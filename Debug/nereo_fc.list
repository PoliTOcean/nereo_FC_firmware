
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022528  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035a0  080226e8  080226e8  000236e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025c88  08025c88  00028b8c  2**0
                  CONTENTS
  4 .ARM          00000008  08025c88  08025c88  00026c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025c90  08025c90  00028b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000030  08025c90  08025c90  00026c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025cc0  08025cc0  00026cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001b8c  20000000  08025cc4  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00028b8c  2**0
                  CONTENTS
 10 .bss          0001563c  20001b90  20001b90  00028b90  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200171cc  200171cc  00028b90  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00028b8c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002439e  00000000  00000000  00028bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005909  00000000  00000000  0004cf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  00052868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001321  00000000  00000000  000541e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034052  00000000  00000000  00055501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002419c  00000000  00000000  00089553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115805  00000000  00000000  000ad6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ef  00000000  00000000  001c2ef4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007810  00000000  00000000  001c2fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001ca7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  001ca865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    00000959  00000000  00000000  001ca895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20001b90 	.word	0x20001b90
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080226d0 	.word	0x080226d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20001b94 	.word	0x20001b94
 80001fc:	080226d0 	.word	0x080226d0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9b5 	b.w	8000fa8 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fb8:	f008 f82c 	bl	8009014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fc4:	f000 f986 	bl	80012d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fc8:	4b58      	ldr	r3, [pc, #352]	@ (800112c <pvPortMallocMicroROS+0x180>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8090 	bne.w	80010f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01e      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fdc:	2208      	movs	r2, #8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f023 0307 	bic.w	r3, r3, #7
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d06a      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d865      	bhi.n	80010f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 800102c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001034:	e004      	b.n	8001040 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d903      	bls.n	8001052 <pvPortMallocMicroROS+0xa6>
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f1      	bne.n	8001036 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	d04c      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4413      	add	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	2308      	movs	r3, #8
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	429a      	cmp	r2, r3
 800107c:	d920      	bls.n	80010c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800107e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001094:	f383 8811 	msr	BASEPRI, r3
 8001098:	f3bf 8f6f 	isb	sy
 800109c:	f3bf 8f4f 	dsb	sy
 80010a0:	613b      	str	r3, [r7, #16]
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ba:	69b8      	ldr	r0, [r7, #24]
 80010bc:	f000 f96c 	bl	8001398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d203      	bcs.n	80010e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <pvPortMallocMicroROS+0x180>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010f6:	f007 ff9b 	bl	8009030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	60fb      	str	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800111c:	69fb      	ldr	r3, [r7, #28]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200090e4 	.word	0x200090e4
 800112c:	200090f0 	.word	0x200090f0
 8001130:	200090e8 	.word	0x200090e8
 8001134:	200090dc 	.word	0x200090dc
 8001138:	200090ec 	.word	0x200090ec

0800113c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d04a      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800114e:	2308      	movs	r3, #8
 8001150:	425b      	negs	r3, r3
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <vPortFreeMicroROS+0x46>
	__asm volatile
 800116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116e:	f383 8811 	msr	BASEPRI, r3
 8001172:	f3bf 8f6f 	isb	sy
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	60fb      	str	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	60bb      	str	r3, [r7, #8]
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d019      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011c8:	f007 ff24 	bl	8009014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f000 f8dc 	bl	8001398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011e0:	f007 ff26 	bl	8009030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200090f0 	.word	0x200090f0
 80011f0:	200090e8 	.word	0x200090e8

080011f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001200:	2308      	movs	r3, #8
 8001202:	425b      	negs	r3, r3
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <getBlockSize+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	43db      	mvns	r3, r3
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

	return count;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200090f0 	.word	0x200090f0

08001230 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800123a:	f007 feeb 	bl	8009014 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff feb4 	bl	8000fac <pvPortMallocMicroROS>
 8001244:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffce 	bl	80011f4 <getBlockSize>
 8001258:	4603      	mov	r3, r0
 800125a:	2208      	movs	r2, #8
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d201      	bcs.n	800126c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f020 fbde 	bl	8021a32 <memcpy>

		vPortFreeMicroROS(pv);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff60 	bl	800113c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800127c:	f007 fed8 	bl	8009030 <xTaskResumeAll>

	return newmem;
 8001280:	68bb      	ldr	r3, [r7, #8]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001294:	f007 febe 	bl	8009014 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff fe82 	bl	8000fac <pvPortMallocMicroROS>
 80012a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ae:	e004      	b.n	80012ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	613a      	str	r2, [r7, #16]
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012c4:	f007 feb4 	bl	8009030 <xTaskResumeAll>
  	return mem;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012da:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <prvHeapInit+0xac>)
 80012e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00c      	beq.n	8001308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3307      	adds	r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <prvHeapInit+0xac>)
 8001304:	4413      	add	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <prvHeapInit+0xb0>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <prvHeapInit+0xb0>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001320:	2208      	movs	r2, #8
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 0307 	bic.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <prvHeapInit+0xb4>)
 8001334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <prvHeapInit+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <prvHeapInit+0xb4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <prvHeapInit+0xb4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <prvHeapInit+0xb8>)
 8001362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <prvHeapInit+0xbc>)
 800136a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <prvHeapInit+0xc0>)
 800136e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20001bac 	.word	0x20001bac
 8001384:	200090dc 	.word	0x200090dc
 8001388:	200090e4 	.word	0x200090e4
 800138c:	200090ec 	.word	0x200090ec
 8001390:	200090e8 	.word	0x200090e8
 8001394:	200090f0 	.word	0x200090f0

08001398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <prvInsertBlockIntoFreeList+0xac>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e002      	b.n	80013ac <prvInsertBlockIntoFreeList+0x14>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f7      	bhi.n	80013a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d108      	bne.n	80013da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	441a      	add	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d118      	bne.n	8001420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d00d      	beq.n	8001416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	441a      	add	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d002      	beq.n	8001436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200090dc 	.word	0x200090dc
 8001448:	200090e4 	.word	0x200090e4

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	203a      	movs	r0, #58	@ 0x3a
 8001474:	f002 fe28 	bl	80040c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001478:	203a      	movs	r0, #58	@ 0x3a
 800147a:	f002 fe41 	bl	8004100 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2046      	movs	r0, #70	@ 0x46
 8001484:	f002 fe20 	bl	80040c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f002 fe39 	bl	8004100 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <cubemx_transport_open+0x28>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f005 faaa 	bl	8006a0c <HAL_UART_Receive_DMA>
    return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200090f4 	.word	0x200090f4

080014c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f005 fabc 	bl	8006a56 <HAL_UART_DMAStop>
    return true;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11c      	bne.n	8001544 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f005 fa0a 	bl	800692c <HAL_UART_Transmit_DMA>
 8001518:	4603      	mov	r3, r0
 800151a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800151c:	e002      	b.n	8001524 <cubemx_transport_write+0x3c>
            osDelay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f006 fd36 	bl	8007f90 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001524:	7cfb      	ldrb	r3, [r7, #19]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <cubemx_transport_write+0x4e>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d1f3      	bne.n	800151e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001536:	7cfb      	ldrb	r3, [r7, #19]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <cubemx_transport_write+0x58>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e002      	b.n	8001546 <cubemx_transport_write+0x5e>
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001544:	2300      	movs	r3, #0
    }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001564:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <cubemx_transport_read+0x9c>)
 800157c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800157e:	b662      	cpsie	i
}
 8001580:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001588:	2001      	movs	r0, #1
 800158a:	f006 fd01 	bl	8007f90 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <cubemx_transport_read+0xa0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <cubemx_transport_read+0x9c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <cubemx_transport_read+0x52>
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe3      	blt.n	800156a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015a6:	e011      	b.n	80015cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	440b      	add	r3, r1
 80015b2:	4910      	ldr	r1, [pc, #64]	@ (80015f4 <cubemx_transport_read+0xa4>)
 80015b4:	5c8a      	ldrb	r2, [r1, r2]
 80015b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <cubemx_transport_read+0x9c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d003      	beq.n	80015e0 <cubemx_transport_read+0x90>
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3e3      	bcc.n	80015a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80015e0:	69bb      	ldr	r3, [r7, #24]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200098f8 	.word	0x200098f8
 80015f0:	200098f4 	.word	0x200098f4
 80015f4:	200090f4 	.word	0x200090f4

080015f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
extern "C" void MX_FREERTOS_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <MX_FREERTOS_Init+0x18>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_FREERTOS_Init+0x1c>)
 8001602:	f006 fc33 	bl	8007e6c <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <MX_FREERTOS_Init+0x20>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	08022928 	.word	0x08022928
 8001614:	0800161d 	.word	0x0800161d
 8001618:	20009904 	.word	0x20009904

0800161c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8001622:	af04      	add	r7, sp, #16
 8001624:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001628:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800162c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rcl_ret_t rc;
	  HAL_IWDG_Refresh(&hiwdg);
 800162e:	484b      	ldr	r0, [pc, #300]	@ (800175c <_Z16StartDefaultTaskPv+0x140>)
 8001630:	f003 fb7d 	bl	8004d2e <HAL_IWDG_Refresh>
	  rmw_uros_set_custom_transport(
 8001634:	4b4a      	ldr	r3, [pc, #296]	@ (8001760 <_Z16StartDefaultTaskPv+0x144>)
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <_Z16StartDefaultTaskPv+0x148>)
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <_Z16StartDefaultTaskPv+0x14c>)
 800163e:	4a4b      	ldr	r2, [pc, #300]	@ (800176c <_Z16StartDefaultTaskPv+0x150>)
 8001640:	494b      	ldr	r1, [pc, #300]	@ (8001770 <_Z16StartDefaultTaskPv+0x154>)
 8001642:	2001      	movs	r0, #1
 8001644:	f00d f904 	bl	800e850 <rmw_uros_set_custom_transport>
	    (void *) &huart1,
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);
	  HAL_IWDG_Refresh(&hiwdg);
 8001648:	4844      	ldr	r0, [pc, #272]	@ (800175c <_Z16StartDefaultTaskPv+0x140>)
 800164a:	f003 fb70 	bl	8004d2e <HAL_IWDG_Refresh>
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800164e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8001652:	4618      	mov	r0, r3
 8001654:	f00d f82e 	bl	800e6b4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001658:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <_Z16StartDefaultTaskPv+0x158>)
 800165a:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800165e:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <_Z16StartDefaultTaskPv+0x15c>)
 8001660:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001664:	4b45      	ldr	r3, [pc, #276]	@ (800177c <_Z16StartDefaultTaskPv+0x160>)
 8001666:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800166a:	4b45      	ldr	r3, [pc, #276]	@ (8001780 <_Z16StartDefaultTaskPv+0x164>)
 800166c:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001670:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8001674:	4618      	mov	r0, r3
 8001676:	f00d f82b 	bl	800e6d0 <rcutils_set_default_allocator>
 800167a:	4603      	mov	r3, r0
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <_Z16StartDefaultTaskPv+0x74>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001686:	218a      	movs	r1, #138	@ 0x8a
 8001688:	483e      	ldr	r0, [pc, #248]	@ (8001784 <_Z16StartDefaultTaskPv+0x168>)
 800168a:	f020 f89b 	bl	80217c4 <iprintf>
 800168e:	e002      	b.n	8001696 <_Z16StartDefaultTaskPv+0x7a>
	  } else HAL_IWDG_Refresh(&hiwdg);
 8001690:	4832      	ldr	r0, [pc, #200]	@ (800175c <_Z16StartDefaultTaskPv+0x140>)
 8001692:	f003 fb4c 	bl	8004d2e <HAL_IWDG_Refresh>
	  nereo_interfaces__msg__CommandVelocity cmd_vel_msg;
	  sensor_msgs__msg__Imu imu_data_msg;
	  sensor_msgs__msg__FluidPressure fluid_pressure;
	  sensor_msgs__msg__Temperature water_temperature;

	  allocator = rcl_get_default_allocator();
 8001696:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800169a:	4618      	mov	r0, r3
 800169c:	f00d f836 	bl	800e70c <rcutils_get_default_allocator>
 80016a0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80016a4:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 80016a8:	f507 6492 	add.w	r4, r7, #1168	@ 0x490
 80016ac:	461d      	mov	r5, r3
 80016ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b2:	682b      	ldr	r3, [r5, #0]
 80016b4:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016b6:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80016ba:	f207 40a4 	addw	r0, r7, #1188	@ 0x4a4
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	f00b fbc5 	bl	800ce50 <rclc_support_init>
 80016c6:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016ca:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d004      	beq.n	80016dc <_Z16StartDefaultTaskPv+0xc0>
 80016d2:	21ac      	movs	r1, #172	@ 0xac
 80016d4:	482c      	ldr	r0, [pc, #176]	@ (8001788 <_Z16StartDefaultTaskPv+0x16c>)
 80016d6:	f020 f875 	bl	80217c4 <iprintf>
 80016da:	e002      	b.n	80016e2 <_Z16StartDefaultTaskPv+0xc6>
	  else HAL_IWDG_Refresh(&hiwdg);
 80016dc:	481f      	ldr	r0, [pc, #124]	@ (800175c <_Z16StartDefaultTaskPv+0x140>)
 80016de:	f003 fb26 	bl	8004d2e <HAL_IWDG_Refresh>

	  // create node
	  rc = rclc_node_init_default(&node, "fc_node", "", &support);
 80016e2:	f207 43a4 	addw	r3, r7, #1188	@ 0x4a4
 80016e6:	f507 6091 	add.w	r0, r7, #1160	@ 0x488
 80016ea:	4a28      	ldr	r2, [pc, #160]	@ (800178c <_Z16StartDefaultTaskPv+0x170>)
 80016ec:	4928      	ldr	r1, [pc, #160]	@ (8001790 <_Z16StartDefaultTaskPv+0x174>)
 80016ee:	f00b fbf9 	bl	800cee4 <rclc_node_init_default>
 80016f2:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016f6:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <_Z16StartDefaultTaskPv+0xec>
 80016fe:	21b1      	movs	r1, #177	@ 0xb1
 8001700:	4821      	ldr	r0, [pc, #132]	@ (8001788 <_Z16StartDefaultTaskPv+0x16c>)
 8001702:	f020 f85f 	bl	80217c4 <iprintf>
 8001706:	e002      	b.n	800170e <_Z16StartDefaultTaskPv+0xf2>
	  else HAL_IWDG_Refresh(&hiwdg);
 8001708:	4814      	ldr	r0, [pc, #80]	@ (800175c <_Z16StartDefaultTaskPv+0x140>)
 800170a:	f003 fb10 	bl	8004d2e <HAL_IWDG_Refresh>

	  executor = rclc_executor_get_zero_initialized_executor();
 800170e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001712:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8001716:	463b      	mov	r3, r7
 8001718:	4618      	mov	r0, r3
 800171a:	f00b f853 	bl	800c7c4 <rclc_executor_get_zero_initialized_executor>
 800171e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001722:	f5a3 63a0 	sub.w	r3, r3, #1280	@ 0x500
 8001726:	4620      	mov	r0, r4
 8001728:	4619      	mov	r1, r3
 800172a:	2388      	movs	r3, #136	@ 0x88
 800172c:	461a      	mov	r2, r3
 800172e:	f020 f980 	bl	8021a32 <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS_SRVS + RCLC_EXECUTOR_PARAMETER_SERVER_HANDLES, &allocator);
 8001732:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8001736:	f207 41a4 	addw	r1, r7, #1188	@ 0x4a4
 800173a:	f507 6080 	add.w	r0, r7, #1024	@ 0x400
 800173e:	220b      	movs	r2, #11
 8001740:	f00b f84a 	bl	800c7d8 <rclc_executor_init>
 8001744:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001748:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d021      	beq.n	8001794 <_Z16StartDefaultTaskPv+0x178>
 8001750:	21b6      	movs	r1, #182	@ 0xb6
 8001752:	480d      	ldr	r0, [pc, #52]	@ (8001788 <_Z16StartDefaultTaskPv+0x16c>)
 8001754:	f020 f836 	bl	80217c4 <iprintf>
 8001758:	e01f      	b.n	800179a <_Z16StartDefaultTaskPv+0x17e>
 800175a:	bf00      	nop
 800175c:	20009920 	.word	0x20009920
 8001760:	08001551 	.word	0x08001551
 8001764:	080014e9 	.word	0x080014e9
 8001768:	080014c9 	.word	0x080014c9
 800176c:	0800149d 	.word	0x0800149d
 8001770:	20009a14 	.word	0x20009a14
 8001774:	08002579 	.word	0x08002579
 8001778:	080025bd 	.word	0x080025bd
 800177c:	080025f5 	.word	0x080025f5
 8001780:	08002661 	.word	0x08002661
 8001784:	080226f4 	.word	0x080226f4
 8001788:	0802271c 	.word	0x0802271c
 800178c:	08022730 	.word	0x08022730
 8001790:	08022734 	.word	0x08022734
	  else HAL_IWDG_Refresh(&hiwdg);
 8001794:	48d7      	ldr	r0, [pc, #860]	@ (8001af4 <_Z16StartDefaultTaskPv+0x4d8>)
 8001796:	f003 faca 	bl	8004d2e <HAL_IWDG_Refresh>

	  // PUBLISHERS
	  rclc_publisher_init_best_effort(
 800179a:	f00a fa21 	bl	800bbe0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 800179e:	4602      	mov	r2, r0
 80017a0:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80017a4:	f507 703d 	add.w	r0, r7, #756	@ 0x2f4
 80017a8:	4bd3      	ldr	r3, [pc, #844]	@ (8001af8 <_Z16StartDefaultTaskPv+0x4dc>)
 80017aa:	f00b fbd7 	bl	800cf5c <rclc_publisher_init_best_effort>

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 80017ae:	f00e f8b9 	bl	800f924 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80017b8:	f507 7037 	add.w	r0, r7, #732	@ 0x2dc
 80017bc:	4bcf      	ldr	r3, [pc, #828]	@ (8001afc <_Z16StartDefaultTaskPv+0x4e0>)
 80017be:	f00b fc9d 	bl	800d0fc <rclc_subscription_init_default>
 80017c2:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017c6:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <_Z16StartDefaultTaskPv+0x1ba>
 80017ce:	21c9      	movs	r1, #201	@ 0xc9
 80017d0:	48cb      	ldr	r0, [pc, #812]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 80017d2:	f01f fff7 	bl	80217c4 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 80017d6:	f00e f8a5 	bl	800f924 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80017da:	4684      	mov	ip, r0
 80017dc:	4cc9      	ldr	r4, [pc, #804]	@ (8001b04 <_Z16StartDefaultTaskPv+0x4e8>)
 80017de:	f507 76bc 	add.w	r6, r7, #376	@ 0x178
 80017e2:	466d      	mov	r5, sp
 80017e4:	f104 0308 	add.w	r3, r4, #8
 80017e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017f2:	4631      	mov	r1, r6
 80017f4:	4660      	mov	r0, ip
 80017f6:	f00a f889 	bl	800b90c <micro_ros_utilities_create_message_memory>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f083 0301 	eor.w	r3, r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8

	  rc = rclc_executor_add_subscription(
 8001806:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800180a:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 800180e:	f507 6080 	add.w	r0, r7, #1024	@ 0x400
 8001812:	2300      	movs	r3, #0
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	4bbc      	ldr	r3, [pc, #752]	@ (8001b08 <_Z16StartDefaultTaskPv+0x4ec>)
 8001818:	f00b f84e 	bl	800c8b8 <rclc_executor_add_subscription>
 800181c:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001820:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <_Z16StartDefaultTaskPv+0x214>
 8001828:	21d0      	movs	r1, #208	@ 0xd0
 800182a:	48b5      	ldr	r0, [pc, #724]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 800182c:	f01f ffca 	bl	80217c4 <iprintf>

	  // CMD Vel sub
	  rc = rclc_subscription_init_default(
 8001830:	f00a f99e 	bl	800bb70 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 8001834:	4602      	mov	r2, r0
 8001836:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 800183a:	f507 7038 	add.w	r0, r7, #736	@ 0x2e0
 800183e:	4bb3      	ldr	r3, [pc, #716]	@ (8001b0c <_Z16StartDefaultTaskPv+0x4f0>)
 8001840:	f00b fc5c 	bl	800d0fc <rclc_subscription_init_default>
 8001844:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &cmd_vel_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity),
			  "/nereo_cmd_vel");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001848:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <_Z16StartDefaultTaskPv+0x23c>
 8001850:	21d8      	movs	r1, #216	@ 0xd8
 8001852:	48ab      	ldr	r0, [pc, #684]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 8001854:	f01f ffb6 	bl	80217c4 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity), &cmd_vel_msg, default_conf);
 8001858:	f00a f98a 	bl	800bb70 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 800185c:	4684      	mov	ip, r0
 800185e:	4ca9      	ldr	r4, [pc, #676]	@ (8001b04 <_Z16StartDefaultTaskPv+0x4e8>)
 8001860:	f507 762f 	add.w	r6, r7, #700	@ 0x2bc
 8001864:	466d      	mov	r5, sp
 8001866:	f104 0308 	add.w	r3, r4, #8
 800186a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001870:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001874:	4631      	mov	r1, r6
 8001876:	4660      	mov	r0, ip
 8001878:	f00a f848 	bl	800b90c <micro_ros_utilities_create_message_memory>
 800187c:	4603      	mov	r3, r0
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8

	  rc = rclc_executor_add_subscription(
 8001888:	f507 722f 	add.w	r2, r7, #700	@ 0x2bc
 800188c:	f507 7138 	add.w	r1, r7, #736	@ 0x2e0
 8001890:	f507 6080 	add.w	r0, r7, #1024	@ 0x400
 8001894:	2300      	movs	r3, #0
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4b9d      	ldr	r3, [pc, #628]	@ (8001b10 <_Z16StartDefaultTaskPv+0x4f4>)
 800189a:	f00b f80d 	bl	800c8b8 <rclc_executor_add_subscription>
 800189e:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &executor, &cmd_vel_subscriber,
			  &cmd_vel_msg, &cmd_vel_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80018a2:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <_Z16StartDefaultTaskPv+0x296>
 80018aa:	21df      	movs	r1, #223	@ 0xdf
 80018ac:	4894      	ldr	r0, [pc, #592]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 80018ae:	f01f ff89 	bl	80217c4 <iprintf>

	  // SERVICES
	  rcl_service_t arm_disarm_srv_server;
	  std_srvs__srv__SetBool_Request set_arm_mode_reqin;
	  std_srvs__srv__SetBool_Response set_arm_mode_resout;
	  rc = rclc_service_init_default(
 80018b2:	f00e fa5d 	bl	800fd70 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80018bc:	f507 7092 	add.w	r0, r7, #292	@ 0x124
 80018c0:	4b94      	ldr	r3, [pc, #592]	@ (8001b14 <_Z16StartDefaultTaskPv+0x4f8>)
 80018c2:	f00b fbb3 	bl	800d02c <rclc_service_init_default>
 80018c6:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &arm_disarm_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool), "/set_rov_arm_mode");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80018ca:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <_Z16StartDefaultTaskPv+0x2be>
 80018d2:	21e8      	movs	r1, #232	@ 0xe8
 80018d4:	488a      	ldr	r0, [pc, #552]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 80018d6:	f01f ff75 	bl	80217c4 <iprintf>
	  rc = rclc_executor_add_service(
 80018da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018de:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80018e2:	f507 7192 	add.w	r1, r7, #292	@ 0x124
 80018e6:	f507 6080 	add.w	r0, r7, #1024	@ 0x400
 80018ea:	4c8b      	ldr	r4, [pc, #556]	@ (8001b18 <_Z16StartDefaultTaskPv+0x4fc>)
 80018ec:	9400      	str	r4, [sp, #0]
 80018ee:	f00b f817 	bl	800c920 <rclc_executor_add_service>
 80018f2:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &executor, &arm_disarm_srv_server, &set_arm_mode_reqin,
			  &set_arm_mode_resout, &arm_disarm_service_callback);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80018f6:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <_Z16StartDefaultTaskPv+0x2ea>
 80018fe:	21ec      	movs	r1, #236	@ 0xec
 8001900:	487f      	ldr	r0, [pc, #508]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 8001902:	f01f ff5f 	bl	80217c4 <iprintf>

	  rcl_service_t nav_mode_srv_server;
	  nereo_interfaces__srv__SetNavigationMode_Request set_navigation_mode_reqin;
	  nereo_interfaces__srv__SetNavigationMode_Response set_navigation_mode_resout;
	  rc = rclc_service_init_default(
 8001906:	f00a f94b 	bl	800bba0 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>
 800190a:	4602      	mov	r2, r0
 800190c:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8001910:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001914:	4b81      	ldr	r3, [pc, #516]	@ (8001b1c <_Z16StartDefaultTaskPv+0x500>)
 8001916:	f00b fb89 	bl	800d02c <rclc_service_init_default>
 800191a:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &nav_mode_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(nereo_interfaces, srv, SetNavigationMode), "/set_rov_navigation_mode");
	  rc = rclc_executor_add_service(
 800191e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001922:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001926:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 800192a:	f507 6080 	add.w	r0, r7, #1024	@ 0x400
 800192e:	4c7c      	ldr	r4, [pc, #496]	@ (8001b20 <_Z16StartDefaultTaskPv+0x504>)
 8001930:	9400      	str	r4, [sp, #0]
 8001932:	f00a fff5 	bl	800c920 <rclc_executor_add_service>
 8001936:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
			  &executor, &nav_mode_srv_server, &set_navigation_mode_reqin,
			  &set_navigation_mode_resout, &set_nav_mode_service_callback);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800193a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <_Z16StartDefaultTaskPv+0x32e>
 8001942:	21f7      	movs	r1, #247	@ 0xf7
 8001944:	486e      	ldr	r0, [pc, #440]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 8001946:	f01f ff3d 	bl	80217c4 <iprintf>

	  // PID PARAM SERVER INIT AND CONFIG
	  const rclc_parameter_options_t pid_param_server_options = {
 800194a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800194e:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001952:	4a74      	ldr	r2, [pc, #464]	@ (8001b24 <_Z16StartDefaultTaskPv+0x508>)
 8001954:	ca07      	ldmia	r2, {r0, r1, r2}
 8001956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  .notify_changed_over_dds = false,
			  .max_params = 18,
			  .allow_undeclared_parameters = false,
			  .low_mem_mode = true };
	  rc = rclc_parameter_server_init_with_option(&pid_param_server, &node, &pid_param_server_options);
 800195a:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 800195e:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8001962:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001966:	4618      	mov	r0, r3
 8001968:	f00c f9ea 	bl	800dd40 <rclc_parameter_server_init_with_option>
 800196c:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001970:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <_Z16StartDefaultTaskPv+0x366>
 8001978:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800197c:	4860      	ldr	r0, [pc, #384]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 800197e:	f01f ff21 	bl	80217c4 <iprintf>

	  // parameters
	  rc = rclc_add_parameter(&pid_param_server, "pid0_K0", RCLC_PARAMETER_DOUBLE);
 8001982:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001986:	2203      	movs	r2, #3
 8001988:	4967      	ldr	r1, [pc, #412]	@ (8001b28 <_Z16StartDefaultTaskPv+0x50c>)
 800198a:	4618      	mov	r0, r3
 800198c:	f00c fa44 	bl	800de18 <rclc_add_parameter>
 8001990:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid0_K1", RCLC_PARAMETER_DOUBLE);
 8001994:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001998:	2203      	movs	r2, #3
 800199a:	4964      	ldr	r1, [pc, #400]	@ (8001b2c <_Z16StartDefaultTaskPv+0x510>)
 800199c:	4618      	mov	r0, r3
 800199e:	f00c fa3b 	bl	800de18 <rclc_add_parameter>
 80019a2:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid0_K2", RCLC_PARAMETER_DOUBLE);
 80019a6:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80019aa:	2203      	movs	r2, #3
 80019ac:	4960      	ldr	r1, [pc, #384]	@ (8001b30 <_Z16StartDefaultTaskPv+0x514>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00c fa32 	bl	800de18 <rclc_add_parameter>
 80019b4:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8

	  rc = rclc_add_parameter(&pid_param_server, "pid1_K0", RCLC_PARAMETER_DOUBLE);
 80019b8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80019bc:	2203      	movs	r2, #3
 80019be:	495d      	ldr	r1, [pc, #372]	@ (8001b34 <_Z16StartDefaultTaskPv+0x518>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00c fa29 	bl	800de18 <rclc_add_parameter>
 80019c6:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid1_K1", RCLC_PARAMETER_DOUBLE);
 80019ca:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80019ce:	2203      	movs	r2, #3
 80019d0:	4959      	ldr	r1, [pc, #356]	@ (8001b38 <_Z16StartDefaultTaskPv+0x51c>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00c fa20 	bl	800de18 <rclc_add_parameter>
 80019d8:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid1_K2", RCLC_PARAMETER_DOUBLE);
 80019dc:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80019e0:	2203      	movs	r2, #3
 80019e2:	4956      	ldr	r1, [pc, #344]	@ (8001b3c <_Z16StartDefaultTaskPv+0x520>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00c fa17 	bl	800de18 <rclc_add_parameter>
 80019ea:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8

	  rc = rclc_add_parameter(&pid_param_server, "pid2_K0", RCLC_PARAMETER_DOUBLE);
 80019ee:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 80019f2:	2203      	movs	r2, #3
 80019f4:	4952      	ldr	r1, [pc, #328]	@ (8001b40 <_Z16StartDefaultTaskPv+0x524>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00c fa0e 	bl	800de18 <rclc_add_parameter>
 80019fc:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid2_K1", RCLC_PARAMETER_DOUBLE);
 8001a00:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001a04:	2203      	movs	r2, #3
 8001a06:	494f      	ldr	r1, [pc, #316]	@ (8001b44 <_Z16StartDefaultTaskPv+0x528>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fa05 	bl	800de18 <rclc_add_parameter>
 8001a0e:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid2_K2", RCLC_PARAMETER_DOUBLE);
 8001a12:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001a16:	2203      	movs	r2, #3
 8001a18:	494b      	ldr	r1, [pc, #300]	@ (8001b48 <_Z16StartDefaultTaskPv+0x52c>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00c f9fc 	bl	800de18 <rclc_add_parameter>
 8001a20:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8

	  rc = rclc_add_parameter(&pid_param_server, "pid3_K0", RCLC_PARAMETER_DOUBLE);
 8001a24:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001a28:	2203      	movs	r2, #3
 8001a2a:	4948      	ldr	r1, [pc, #288]	@ (8001b4c <_Z16StartDefaultTaskPv+0x530>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00c f9f3 	bl	800de18 <rclc_add_parameter>
 8001a32:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid3_K1", RCLC_PARAMETER_DOUBLE);
 8001a36:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	4944      	ldr	r1, [pc, #272]	@ (8001b50 <_Z16StartDefaultTaskPv+0x534>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00c f9ea 	bl	800de18 <rclc_add_parameter>
 8001a44:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  rc = rclc_add_parameter(&pid_param_server, "pid3_K2", RCLC_PARAMETER_DOUBLE);
 8001a48:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4941      	ldr	r1, [pc, #260]	@ (8001b54 <_Z16StartDefaultTaskPv+0x538>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00c f9e1 	bl	800de18 <rclc_add_parameter>
 8001a56:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8

	  rc = rclc_executor_add_parameter_server(&executor, &pid_param_server, on_parameter_changed);
 8001a5a:	f507 713e 	add.w	r1, r7, #760	@ 0x2f8
 8001a5e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001a62:	4a3d      	ldr	r2, [pc, #244]	@ (8001b58 <_Z16StartDefaultTaskPv+0x53c>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00c f979 	bl	800dd5c <rclc_executor_add_parameter_server>
 8001a6a:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001a6e:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <_Z16StartDefaultTaskPv+0x464>
 8001a76:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001a7a:	4821      	ldr	r0, [pc, #132]	@ (8001b00 <_Z16StartDefaultTaskPv+0x4e4>)
 8001a7c:	f01f fea2 	bl	80217c4 <iprintf>

	  // END MICRO ROS INIT
	  printf("Micro ROS initialization done without errors.\n");
 8001a80:	4836      	ldr	r0, [pc, #216]	@ (8001b5c <_Z16StartDefaultTaskPv+0x540>)
 8001a82:	f01f ff07 	bl	8021894 <puts>

	  uint32_t pwm_output[8] = {1500};
 8001a86:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001a8a:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001a8e:	4618      	mov	r0, r3
 8001a90:	2320      	movs	r3, #32
 8001a92:	461a      	mov	r2, r3
 8001a94:	2100      	movs	r1, #0
 8001a96:	f01f ff64 	bl	8021962 <memset>
 8001a9a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001a9e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001aa2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001aa6:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7

	  // PID INIT
	  float kps[PID_NUMBER] = {0};
 8001aae:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001ab2:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	6053      	str	r3, [r2, #4]
 8001abe:	6093      	str	r3, [r2, #8]
 8001ac0:	60d3      	str	r3, [r2, #12]
	  float kis[PID_NUMBER] = {0};
 8001ac2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001ac6:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8001aca:	461a      	mov	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	6053      	str	r3, [r2, #4]
 8001ad2:	6093      	str	r3, [r2, #8]
 8001ad4:	60d3      	str	r3, [r2, #12]
	  float kds[PID_NUMBER] = {0};
 8001ad6:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001ada:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	6053      	str	r3, [r2, #4]
 8001ae6:	6093      	str	r3, [r2, #8]
 8001ae8:	60d3      	str	r3, [r2, #12]
	  init_pids(kps, kis, kds);
 8001aea:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001aee:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8001af2:	e035      	b.n	8001b60 <_Z16StartDefaultTaskPv+0x544>
 8001af4:	20009920 	.word	0x20009920
 8001af8:	0802273c 	.word	0x0802273c
 8001afc:	08022750 	.word	0x08022750
 8001b00:	0802271c 	.word	0x0802271c
 8001b04:	20009908 	.word	0x20009908
 8001b08:	08001eb1 	.word	0x08001eb1
 8001b0c:	0802275c 	.word	0x0802275c
 8001b10:	08001ecd 	.word	0x08001ecd
 8001b14:	0802276c 	.word	0x0802276c
 8001b18:	08001ee9 	.word	0x08001ee9
 8001b1c:	08022780 	.word	0x08022780
 8001b20:	08001f51 	.word	0x08001f51
 8001b24:	08022848 	.word	0x08022848
 8001b28:	0802279c 	.word	0x0802279c
 8001b2c:	080227a4 	.word	0x080227a4
 8001b30:	080227ac 	.word	0x080227ac
 8001b34:	080227b4 	.word	0x080227b4
 8001b38:	080227bc 	.word	0x080227bc
 8001b3c:	080227c4 	.word	0x080227c4
 8001b40:	080227cc 	.word	0x080227cc
 8001b44:	080227d4 	.word	0x080227d4
 8001b48:	080227dc 	.word	0x080227dc
 8001b4c:	080227e4 	.word	0x080227e4
 8001b50:	080227ec 	.word	0x080227ec
 8001b54:	080227f4 	.word	0x080227f4
 8001b58:	08001f91 	.word	0x08001f91
 8001b5c:	080227fc 	.word	0x080227fc
 8001b60:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 fe8d 	bl	8003884 <init_pids>

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 8001b6a:	f002 f9e9 	bl	8003f40 <HAL_GetTick>
 8001b6e:	f8c7 04f0 	str.w	r0, [r7, #1264]	@ 0x4f0
		//printf("Free heap: %d.\n", xPortGetFreeHeapSize());
		// Spin executor once to receive requests and update messages
		rc = rclc_executor_spin_some(&executor, 1000000);
 8001b72:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 8001b76:	4a54      	ldr	r2, [pc, #336]	@ (8001cc8 <_Z16StartDefaultTaskPv+0x6ac>)
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	f00b f92f 	bl	800cde0 <rclc_executor_spin_some>
 8001b82:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8

	    if (rov_arm_mode == ROV_ARMED)
 8001b86:	4b51      	ldr	r3, [pc, #324]	@ (8001ccc <_Z16StartDefaultTaskPv+0x6b0>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04a      	beq.n	8001c30 <_Z16StartDefaultTaskPv+0x614>
	    {
	    	switch (navigation_mode) {
 8001b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd0 <_Z16StartDefaultTaskPv+0x6b4>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <_Z16StartDefaultTaskPv+0x58e>
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d00c      	beq.n	8001bc2 <_Z16StartDefaultTaskPv+0x5a6>
 8001ba8:	e01e      	b.n	8001be8 <_Z16StartDefaultTaskPv+0x5cc>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(cmd_vel_msg.cmd_vel, pwm_output);
 8001baa:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8001bae:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fab7 	bl	8003128 <calculate_pwm>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
	    			break;
 8001bc0:	e02a      	b.n	8001c18 <_Z16StartDefaultTaskPv+0x5fc>
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(cmd_vel_msg.cmd_vel, pwm_output,
 8001bc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001bc6:	f103 0418 	add.w	r4, r3, #24
 8001bca:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8001bce:	f103 0218 	add.w	r2, r3, #24
 8001bd2:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8001bd6:	f507 702f 	add.w	r0, r7, #700	@ 0x2bc
 8001bda:	4623      	mov	r3, r4
 8001bdc:	f001 fea0 	bl	8003920 <calculate_pwm_with_pid>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 34f7 	strb.w	r3, [r7, #1271]	@ 0x4f7
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 8001be6:	e017      	b.n	8001c18 <_Z16StartDefaultTaskPv+0x5fc>
	    		case NAVIGATION_MODE_STABILIZE_CS:

	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 8001bee:	e00e      	b.n	8001c0e <_Z16StartDefaultTaskPv+0x5f2>
 8001bf0:	f897 24ff 	ldrb.w	r2, [r7, #1279]	@ 0x4ff
 8001bf4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001bf8:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001bfc:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c04:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 8001c0e:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	d9ec      	bls.n	8001bf0 <_Z16StartDefaultTaskPv+0x5d4>
	    			break;
 8001c16:	bf00      	nop
	    	}
	    	clamp_pwm_output(pwm_output, 8);
 8001c18:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f8ca 	bl	8001db8 <clamp_pwm_output>
	    	set_pwms(pwm_output);
 8001c24:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f857 	bl	8001cdc <set_pwms>
 8001c2e:	e001      	b.n	8001c34 <_Z16StartDefaultTaskPv+0x618>
	    } else set_pwm_idle();
 8001c30:	f000 f894 	bl	8001d5c <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thruster_pwms[i] = pwm_output[i];
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 34fe 	strb.w	r3, [r7, #1278]	@ 0x4fe
 8001c3a:	e015      	b.n	8001c68 <_Z16StartDefaultTaskPv+0x64c>
 8001c3c:	f897 24fe 	ldrb.w	r2, [r7, #1278]	@ 0x4fe
 8001c40:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001c44:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	f897 24fe 	ldrb.w	r2, [r7, #1278]	@ 0x4fe
 8001c50:	b299      	uxth	r1, r3
 8001c52:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001c56:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001c5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001c5e:	f897 34fe 	ldrb.w	r3, [r7, #1278]	@ 0x4fe
 8001c62:	3301      	adds	r3, #1
 8001c64:	f887 34fe 	strb.w	r3, [r7, #1278]	@ 0x4fe
 8001c68:	f897 34fe 	ldrb.w	r3, [r7, #1278]	@ 0x4fe
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	d9e5      	bls.n	8001c3c <_Z16StartDefaultTaskPv+0x620>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001c70:	f507 7139 	add.w	r1, r7, #740	@ 0x2e4
 8001c74:	f507 733d 	add.w	r3, r7, #756	@ 0x2f4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00a fa14 	bl	800c0a8 <rcl_publish>
 8001c80:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001c84:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <_Z16StartDefaultTaskPv+0x67c>
 8001c8c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001c90:	4810      	ldr	r0, [pc, #64]	@ (8001cd4 <_Z16StartDefaultTaskPv+0x6b8>)
 8001c92:	f01f fd97 	bl	80217c4 <iprintf>
 8001c96:	e002      	b.n	8001c9e <_Z16StartDefaultTaskPv+0x682>
	    else HAL_IWDG_Refresh(&hiwdg);
 8001c98:	480f      	ldr	r0, [pc, #60]	@ (8001cd8 <_Z16StartDefaultTaskPv+0x6bc>)
 8001c9a:	f003 f848 	bl	8004d2e <HAL_IWDG_Refresh>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001c9e:	f002 f94f 	bl	8003f40 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001cae:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	@ 0x4ec
 8001cb2:	2b18      	cmp	r3, #24
 8001cb4:	f63f af59 	bhi.w	8001b6a <_Z16StartDefaultTaskPv+0x54e>
 8001cb8:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	@ 0x4ec
 8001cbc:	f1c3 0319 	rsb	r3, r3, #25
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f006 f965 	bl	8007f90 <osDelay>
	  }
 8001cc6:	e750      	b.n	8001b6a <_Z16StartDefaultTaskPv+0x54e>
 8001cc8:	000f4240 	.word	0x000f4240
 8001ccc:	200098fc 	.word	0x200098fc
 8001cd0:	200098fd 	.word	0x200098fd
 8001cd4:	0802282c 	.word	0x0802282c
 8001cd8:	20009920 	.word	0x20009920

08001cdc <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	// HERE THE PWM Channel - Thruster relation is defined
	TIM2 -> CCR1 = pwms[0] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cec:	3332      	adds	r3, #50	@ 0x32
 8001cee:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2 -> CCR2 = pwms[1] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cfa:	3332      	adds	r3, #50	@ 0x32
 8001cfc:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR3 = pwms[2] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3308      	adds	r3, #8
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d08:	3332      	adds	r3, #50	@ 0x32
 8001d0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM2 -> CCR4 = pwms[3] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	330c      	adds	r3, #12
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d16:	3332      	adds	r3, #50	@ 0x32
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
	// VERTICAL THRUSTERS
	TIM3 -> CCR1 = pwms[4] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3310      	adds	r3, #16
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	@ (8001d58 <set_pwms+0x7c>)
 8001d22:	3332      	adds	r3, #50	@ 0x32
 8001d24:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3 -> CCR2 = pwms[5] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3314      	adds	r3, #20
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <set_pwms+0x7c>)
 8001d2e:	3332      	adds	r3, #50	@ 0x32
 8001d30:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3 -> CCR3 = pwms[6] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3318      	adds	r3, #24
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a07      	ldr	r2, [pc, #28]	@ (8001d58 <set_pwms+0x7c>)
 8001d3a:	3332      	adds	r3, #50	@ 0x32
 8001d3c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[7] + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	331c      	adds	r3, #28
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <set_pwms+0x7c>)
 8001d46:	3332      	adds	r3, #50	@ 0x32
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40000400 	.word	0x40000400

08001d5c <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d64:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d6e:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001d72:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d78:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d82:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3 -> CCR1 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <set_pwm_idle+0x58>)
 8001d8a:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001d8e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <set_pwm_idle+0x58>)
 8001d92:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001d96:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <set_pwm_idle+0x58>)
 8001d9a:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE + OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <set_pwm_idle+0x58>)
 8001da2:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40000400 	.word	0x40000400

08001db8 <clamp_pwm_output>:
void clamp_pwm_output(uint32_t pwms[], int N) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	e023      	b.n	8001e10 <clamp_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d807      	bhi.n	8001dea <clamp_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <clamp_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d906      	bls.n	8001e0a <clamp_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001e08:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	81fb      	strh	r3, [r7, #14]
 8001e10:	89fb      	ldrh	r3, [r7, #14]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dcd7      	bgt.n	8001dc8 <clamp_pwm_output+0x10>
	}
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <update_pid_constants>:
void update_pid_constants(arm_pid_instance_f32 * pid, const float32_t * Kp, const float32_t * Ki, const float32_t * Kd) {
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	603b      	str	r3, [r7, #0]
    if(Kp != NULL) pid->Kp = *Kp;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <update_pid_constants+0x1c>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	619a      	str	r2, [r3, #24]
    if(Ki != NULL) pid->Ki = *Ki;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <update_pid_constants+0x2a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	61da      	str	r2, [r3, #28]
    if(Kd != NULL) pid->Kd = *Kd;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <update_pid_constants+0x38>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	621a      	str	r2, [r3, #32]

    pid->A0 = pid->Kp + pid->Ki + pid->Kd;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
    pid->A1 = -pid->Kp - 2 * pid->Kd;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e84:	eeb1 7a67 	vneg.f32	s14, s15
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	edc3 7a01 	vstr	s15, [r3, #4]
    pid->A2 = pid->Kd;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	609a      	str	r2, [r3, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <imu_subscription_callback>:
void imu_subscription_callback(const void * msgin) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001eb8:	4803      	ldr	r0, [pc, #12]	@ (8001ec8 <imu_subscription_callback+0x18>)
 8001eba:	f002 ff38 	bl	8004d2e <HAL_IWDG_Refresh>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20009920 	.word	0x20009920

08001ecc <cmd_vel_subscription_callback>:
void cmd_vel_subscription_callback (const void * msgin) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	HAL_IWDG_Refresh(&hiwdg);
 8001ed4:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <cmd_vel_subscription_callback+0x18>)
 8001ed6:	f002 ff2a 	bl	8004d2e <HAL_IWDG_Refresh>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20009920 	.word	0x20009920

08001ee8 <arm_disarm_service_callback>:
void arm_disarm_service_callback(const void * request_msg, void * response_msg) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001ef2:	4813      	ldr	r0, [pc, #76]	@ (8001f40 <arm_disarm_service_callback+0x58>)
 8001ef4:	f002 ff1b 	bl	8004d2e <HAL_IWDG_Refresh>
	std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
	std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	60bb      	str	r3, [r7, #8]
	rov_arm_mode = req_in->data ? ROV_ARMED : ROV_DISARMED;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <arm_disarm_service_callback+0x24>
 8001f08:	2201      	movs	r2, #1
 8001f0a:	e000      	b.n	8001f0e <arm_disarm_service_callback+0x26>
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001f44 <arm_disarm_service_callback+0x5c>)
 8001f10:	701a      	strb	r2, [r3, #0]
	printf("%d: arm mode.\n", (int)rov_arm_mode);
 8001f12:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <arm_disarm_service_callback+0x5c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4619      	mov	r1, r3
 8001f1a:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <arm_disarm_service_callback+0x60>)
 8001f1c:	f01f fc52 	bl	80217c4 <iprintf>
	res_in->success = true;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
	res_in->message.capacity = 2;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	60da      	str	r2, [r3, #12]
	res_in->message.size = strlen(empty_string);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	609a      	str	r2, [r3, #8]
	res_in->message.data = empty_string;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <arm_disarm_service_callback+0x64>)
 8001f36:	605a      	str	r2, [r3, #4]
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20009920 	.word	0x20009920
 8001f44:	200098fc 	.word	0x200098fc
 8001f48:	08022854 	.word	0x08022854
 8001f4c:	20009900 	.word	0x20009900

08001f50 <set_nav_mode_service_callback>:
void set_nav_mode_service_callback(const void * request_msg, void * response_msg) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
	HAL_IWDG_Refresh(&hiwdg);
 8001f5a:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <set_nav_mode_service_callback+0x38>)
 8001f5c:	f002 fee7 	bl	8004d2e <HAL_IWDG_Refresh>
	nereo_interfaces__srv__SetNavigationMode_Request * req_in = (nereo_interfaces__srv__SetNavigationMode_Request *) request_msg;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	60fb      	str	r3, [r7, #12]
	nereo_interfaces__srv__SetNavigationMode_Response * res_in = (nereo_interfaces__srv__SetNavigationMode_Response *) response_msg;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	60bb      	str	r3, [r7, #8]
	navigation_mode = (NavigationModes)req_in->navigation_mode;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <set_nav_mode_service_callback+0x3c>)
 8001f6e:	701a      	strb	r2, [r3, #0]
	res_in->mode_after_set = navigation_mode;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <set_nav_mode_service_callback+0x3c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	705a      	strb	r2, [r3, #1]
	res_in->success = true;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20009920 	.word	0x20009920
 8001f8c:	200098fd 	.word	0x200098fd

08001f90 <on_parameter_changed>:
bool on_parameter_changed(const Parameter * old_param, const Parameter * new_param, void * context)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  (void) context;
  HAL_IWDG_Refresh(&hiwdg);
 8001f9c:	4851      	ldr	r0, [pc, #324]	@ (80020e4 <on_parameter_changed+0x154>)
 8001f9e:	f002 fec6 	bl	8004d2e <HAL_IWDG_Refresh>
  if (old_param == NULL && new_param == NULL) {
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <on_parameter_changed+0x28>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <on_parameter_changed+0x28>
    printf("Callback error, both parameters are NULL\n");
 8001fae:	484e      	ldr	r0, [pc, #312]	@ (80020e8 <on_parameter_changed+0x158>)
 8001fb0:	f01f fc70 	bl	8021894 <puts>
    return false;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e090      	b.n	80020da <on_parameter_changed+0x14a>
  }

  if (old_param == NULL) {
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <on_parameter_changed+0x32>
	  return false;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e08b      	b.n	80020da <on_parameter_changed+0x14a>
  } else if (new_param == NULL) {
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <on_parameter_changed+0x3c>
	  return false;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e086      	b.n	80020da <on_parameter_changed+0x14a>
  } else {
    printf("Parameter %s modified.", old_param->name.data);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4846      	ldr	r0, [pc, #280]	@ (80020ec <on_parameter_changed+0x15c>)
 8001fd4:	f01f fbf6 	bl	80217c4 <iprintf>
    if(old_param->name.data[3] != '0' || old_param->name.data[3] != '1' || old_param->name.data[3] != '2' || old_param->name.data[3] != '3')
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3303      	adds	r3, #3
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b30      	cmp	r3, #48	@ 0x30
 8001fe2:	d111      	bne.n	8002008 <on_parameter_changed+0x78>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3303      	adds	r3, #3
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b31      	cmp	r3, #49	@ 0x31
 8001fee:	d10b      	bne.n	8002008 <on_parameter_changed+0x78>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3303      	adds	r3, #3
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b32      	cmp	r3, #50	@ 0x32
 8001ffa:	d105      	bne.n	8002008 <on_parameter_changed+0x78>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3303      	adds	r3, #3
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b33      	cmp	r3, #51	@ 0x33
 8002006:	d001      	beq.n	800200c <on_parameter_changed+0x7c>
    	return false;
 8002008:	2300      	movs	r3, #0
 800200a:	e066      	b.n	80020da <on_parameter_changed+0x14a>
    if(old_param->name.data[6] != '0' || old_param->name.data[6] != '1' || old_param->name.data[6] != '2' || old_param->name.data[6] != '3')
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3306      	adds	r3, #6
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b30      	cmp	r3, #48	@ 0x30
 8002016:	d111      	bne.n	800203c <on_parameter_changed+0xac>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3306      	adds	r3, #6
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b31      	cmp	r3, #49	@ 0x31
 8002022:	d10b      	bne.n	800203c <on_parameter_changed+0xac>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3306      	adds	r3, #6
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b32      	cmp	r3, #50	@ 0x32
 800202e:	d105      	bne.n	800203c <on_parameter_changed+0xac>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3306      	adds	r3, #6
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b33      	cmp	r3, #51	@ 0x33
 800203a:	d001      	beq.n	8002040 <on_parameter_changed+0xb0>
        	return false;
 800203c:	2300      	movs	r3, #0
 800203e:	e04c      	b.n	80020da <on_parameter_changed+0x14a>
    int n_k = old_param->name.data[6] - '0';
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3306      	adds	r3, #6
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3b30      	subs	r3, #48	@ 0x30
 800204a:	61fb      	str	r3, [r7, #28]
    int n_p = old_param->name.data[3] - '0';
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3303      	adds	r3, #3
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3b30      	subs	r3, #48	@ 0x30
 8002056:	61bb      	str	r3, [r7, #24]
    float32_t new_param_f = new_param->value.double_value;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fd8b 	bl	8000b7c <__aeabi_d2f>
 8002066:	4603      	mov	r3, r0
 8002068:	617b      	str	r3, [r7, #20]
    switch(n_k) {
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d025      	beq.n	80020bc <on_parameter_changed+0x12c>
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b02      	cmp	r3, #2
 8002074:	dc30      	bgt.n	80020d8 <on_parameter_changed+0x148>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <on_parameter_changed+0xf4>
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d00e      	beq.n	80020a0 <on_parameter_changed+0x110>
 8002082:	e029      	b.n	80020d8 <on_parameter_changed+0x148>
    case 0: update_pid_constants(&pids[n_p], &new_param_f, NULL, NULL); break;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4a18      	ldr	r2, [pc, #96]	@ (80020f0 <on_parameter_changed+0x160>)
 8002090:	1898      	adds	r0, r3, r2
 8002092:	f107 0114 	add.w	r1, r7, #20
 8002096:	2300      	movs	r3, #0
 8002098:	2200      	movs	r2, #0
 800209a:	f7ff fec4 	bl	8001e26 <update_pid_constants>
 800209e:	e01b      	b.n	80020d8 <on_parameter_changed+0x148>
    case 1: update_pid_constants(&pids[n_p], NULL, &new_param_f, NULL); break;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4a11      	ldr	r2, [pc, #68]	@ (80020f0 <on_parameter_changed+0x160>)
 80020ac:	1898      	adds	r0, r3, r2
 80020ae:	f107 0214 	add.w	r2, r7, #20
 80020b2:	2300      	movs	r3, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	f7ff feb6 	bl	8001e26 <update_pid_constants>
 80020ba:	e00d      	b.n	80020d8 <on_parameter_changed+0x148>
    case 2: update_pid_constants(&pids[n_p], NULL, NULL, &new_param_f); break;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <on_parameter_changed+0x160>)
 80020c8:	1898      	adds	r0, r3, r2
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	f7ff fea8 	bl	8001e26 <update_pid_constants>
 80020d6:	bf00      	nop
    }
  }

  return true;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3720      	adds	r7, #32
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20009920 	.word	0x20009920
 80020e8:	08022864 	.word	0x08022864
 80020ec:	08022890 	.word	0x08022890
 80020f0:	20009b38 	.word	0x20009b38

080020f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	@ 0x28
 80020f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a2c      	ldr	r2, [pc, #176]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b26      	ldr	r3, [pc, #152]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a25      	ldr	r2, [pc, #148]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a10      	ldr	r2, [pc, #64]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <MX_GPIO_Init+0xd0>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	2104      	movs	r1, #4
 800219a:	480b      	ldr	r0, [pc, #44]	@ (80021c8 <MX_GPIO_Init+0xd4>)
 800219c:	f002 fd6c 	bl	8004c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021a0:	2304      	movs	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4804      	ldr	r0, [pc, #16]	@ (80021c8 <MX_GPIO_Init+0xd4>)
 80021b8:	f002 fbb2 	bl	8004920 <HAL_GPIO_Init>

}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	@ 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40021000 	.word	0x40021000

080021cc <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	ed87 0a05 	vstr	s0, [r7, #20]
 80021d6:	edc7 0a04 	vstr	s1, [r7, #16]
 80021da:	ed87 1a03 	vstr	s2, [r7, #12]
 80021de:	edc7 1a02 	vstr	s3, [r7, #8]
 80021e2:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 80021e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80021ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80021f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002202:	edd7 6a05 	vldr	s13, [r7, #20]
 8002206:	edd7 7a04 	vldr	s15, [r7, #16]
 800220a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800220e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002212:	edd7 7a02 	vldr	s15, [r7, #8]
 8002216:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800221a:	eeb0 0a67 	vmov.f32	s0, s15
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	76fb      	strb	r3, [r7, #27]
 8002240:	e017      	b.n	8002272 <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8002242:	7efb      	ldrb	r3, [r7, #27]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	eef0 7ae7 	vabs.f32	s15, s15
 8002252:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8002256:	ed97 7a05 	vldr	s14, [r7, #20]
 800225a:	edd7 7a07 	vldr	s15, [r7, #28]
 800225e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	dd01      	ble.n	800226c <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 800226c:	7efb      	ldrb	r3, [r7, #27]
 800226e:	3301      	adds	r3, #1
 8002270:	76fb      	strb	r3, [r7, #27]
 8002272:	7efa      	ldrb	r2, [r7, #27]
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	429a      	cmp	r2, r3
 8002278:	d3e3      	bcc.n	8002242 <normalize_vector+0x1a>
        }
    }
    for (uint8_t i = 0; i < size; i++) output_array[i] = input_array[i];
 800227a:	2300      	movs	r3, #0
 800227c:	76bb      	strb	r3, [r7, #26]
 800227e:	e00c      	b.n	800229a <normalize_vector+0x72>
 8002280:	7ebb      	ldrb	r3, [r7, #26]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	441a      	add	r2, r3
 8002288:	7ebb      	ldrb	r3, [r7, #26]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	440b      	add	r3, r1
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	7ebb      	ldrb	r3, [r7, #26]
 8002296:	3301      	adds	r3, #1
 8002298:	76bb      	strb	r3, [r7, #26]
 800229a:	7eba      	ldrb	r2, [r7, #26]
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3ee      	bcc.n	8002280 <normalize_vector+0x58>
	if (max_abs_value > 1) {
 80022a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80022a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	dc00      	bgt.n	80022b6 <normalize_vector+0x8e>
		for (uint8_t i = 0; i < size; i++) {
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 80022b4:	e019      	b.n	80022ea <normalize_vector+0xc2>
		for (uint8_t i = 0; i < size; i++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	767b      	strb	r3, [r7, #25]
 80022ba:	e012      	b.n	80022e2 <normalize_vector+0xba>
			output_array[i] = input_array[i] / max_abs_value;
 80022bc:	7e7b      	ldrb	r3, [r7, #25]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	edd3 6a00 	vldr	s13, [r3]
 80022c8:	7e7b      	ldrb	r3, [r7, #25]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	4413      	add	r3, r2
 80022d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80022d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d8:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++) {
 80022dc:	7e7b      	ldrb	r3, [r7, #25]
 80022de:	3301      	adds	r3, #1
 80022e0:	767b      	strb	r3, [r7, #25]
 80022e2:	7e7a      	ldrb	r2, [r7, #25]
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3e8      	bcc.n	80022bc <normalize_vector+0x94>
}
 80022ea:	bf00      	nop
 80022ec:	3724      	adds	r7, #36	@ 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <MX_IWDG_Init+0x2c>)
 80022fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <MX_IWDG_Init+0x30>)
 8002300:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <MX_IWDG_Init+0x2c>)
 8002304:	2204      	movs	r2, #4
 8002306:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500-1;
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <MX_IWDG_Init+0x2c>)
 800230a:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800230e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	@ (8002324 <MX_IWDG_Init+0x2c>)
 8002312:	f002 fcca 	bl	8004caa <HAL_IWDG_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800231c:	f000 f926 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20009920 	.word	0x20009920
 8002328:	40003000 	.word	0x40003000

0800232c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002334:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002338:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d013      	beq.n	800236c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002344:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002348:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800234c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002354:	e000      	b.n	8002358 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002356:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002358:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f9      	beq.n	8002356 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002362:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002380:	f001 fda8 	bl	8003ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002384:	f000 f850 	bl	8002428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002388:	f7ff feb4 	bl	80020f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800238c:	f7ff f85e 	bl	800144c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002390:	f000 fde8 	bl	8002f64 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002394:	f000 fbf4 	bl	8002b80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002398:	f000 fc6c 	bl	8002c74 <MX_TIM3_Init>
  MX_IWDG_Init();
 800239c:	f7ff ffac 	bl	80022f8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  printf("Printf debugging is working! Yay!\n");
 80023a0:	481c      	ldr	r0, [pc, #112]	@ (8002414 <main+0x98>)
 80023a2:	f01f fa77 	bl	8021894 <puts>
  HAL_TIM_Base_Start(&htim2);
 80023a6:	481c      	ldr	r0, [pc, #112]	@ (8002418 <main+0x9c>)
 80023a8:	f003 fa32 	bl	8005810 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023ac:	2100      	movs	r1, #0
 80023ae:	481a      	ldr	r0, [pc, #104]	@ (8002418 <main+0x9c>)
 80023b0:	f003 fb56 	bl	8005a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80023b4:	2104      	movs	r1, #4
 80023b6:	4818      	ldr	r0, [pc, #96]	@ (8002418 <main+0x9c>)
 80023b8:	f003 fb52 	bl	8005a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80023bc:	2108      	movs	r1, #8
 80023be:	4816      	ldr	r0, [pc, #88]	@ (8002418 <main+0x9c>)
 80023c0:	f003 fb4e 	bl	8005a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80023c4:	210c      	movs	r1, #12
 80023c6:	4814      	ldr	r0, [pc, #80]	@ (8002418 <main+0x9c>)
 80023c8:	f003 fb4a 	bl	8005a60 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 80023cc:	4813      	ldr	r0, [pc, #76]	@ (800241c <main+0xa0>)
 80023ce:	f003 fa1f 	bl	8005810 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80023d2:	2100      	movs	r1, #0
 80023d4:	4811      	ldr	r0, [pc, #68]	@ (800241c <main+0xa0>)
 80023d6:	f003 fb43 	bl	8005a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80023da:	2104      	movs	r1, #4
 80023dc:	480f      	ldr	r0, [pc, #60]	@ (800241c <main+0xa0>)
 80023de:	f003 fb3f 	bl	8005a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80023e2:	2108      	movs	r1, #8
 80023e4:	480d      	ldr	r0, [pc, #52]	@ (800241c <main+0xa0>)
 80023e6:	f003 fb3b 	bl	8005a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80023ea:	210c      	movs	r1, #12
 80023ec:	480b      	ldr	r0, [pc, #44]	@ (800241c <main+0xa0>)
 80023ee:	f003 fb37 	bl	8005a60 <HAL_TIM_PWM_Start>

  HAL_IWDG_Init(&hiwdg);
 80023f2:	480b      	ldr	r0, [pc, #44]	@ (8002420 <main+0xa4>)
 80023f4:	f002 fc59 	bl	8004caa <HAL_IWDG_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80023f8:	f005 fcee 	bl	8007dd8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80023fc:	f7ff f8fc 	bl	80015f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002400:	f005 fd0e 	bl	8007e20 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Error starting freeRTOS Scheduler.\n");
 8002404:	4807      	ldr	r0, [pc, #28]	@ (8002424 <main+0xa8>)
 8002406:	f01f fa45 	bl	8021894 <puts>
	  Error_Handler();
 800240a:	f000 f8af 	bl	800256c <Error_Handler>
	  printf("Error starting freeRTOS Scheduler.\n");
 800240e:	bf00      	nop
 8002410:	e7f8      	b.n	8002404 <main+0x88>
 8002412:	bf00      	nop
 8002414:	080228a8 	.word	0x080228a8
 8002418:	20009984 	.word	0x20009984
 800241c:	200099cc 	.word	0x200099cc
 8002420:	20009920 	.word	0x20009920
 8002424:	080228cc 	.word	0x080228cc

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b094      	sub	sp, #80	@ 0x50
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	2234      	movs	r2, #52	@ 0x34
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f01f fa93 	bl	8021962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <SystemClock_Config+0xe0>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	4a2c      	ldr	r2, [pc, #176]	@ (8002508 <SystemClock_Config+0xe0>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245a:	6413      	str	r3, [r2, #64]	@ 0x40
 800245c:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <SystemClock_Config+0xe0>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002468:	2300      	movs	r3, #0
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <SystemClock_Config+0xe4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a26      	ldr	r2, [pc, #152]	@ (800250c <SystemClock_Config+0xe4>)
 8002472:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <SystemClock_Config+0xe4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002484:	2309      	movs	r3, #9
 8002486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002488:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800248c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800248e:	2301      	movs	r3, #1
 8002490:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002492:	2302      	movs	r3, #2
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002496:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800249a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800249c:	2308      	movs	r3, #8
 800249e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 80024a0:	23c3      	movs	r3, #195	@ 0xc3
 80024a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a4:	2302      	movs	r3, #2
 80024a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024a8:	2304      	movs	r3, #4
 80024aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fed7 	bl	8005268 <HAL_RCC_OscConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80024c0:	f000 f854 	bl	800256c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024c4:	f002 fc44 	bl	8004d50 <HAL_PWREx_EnableOverDrive>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80024ce:	f000 f84d 	bl	800256c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d2:	230f      	movs	r3, #15
 80024d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d6:	2302      	movs	r3, #2
 80024d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	2105      	movs	r1, #5
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fc7d 	bl	8004df0 <HAL_RCC_ClockConfig>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80024fc:	f000 f836 	bl	800256c <Error_Handler>
  }
}
 8002500:	bf00      	nop
 8002502:	3750      	adds	r7, #80	@ 0x50
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	40007000 	.word	0x40007000

08002510 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e009      	b.n	8002536 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	60ba      	str	r2, [r7, #8]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fefe 	bl	800232c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	dbf1      	blt.n	8002522 <_write+0x12>
  }
  return len;
 800253e:	687b      	ldr	r3, [r7, #4]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800255a:	f001 fcdd 	bl	8003f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000

0800256c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002570:	b672      	cpsid	i
}
 8002572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <Error_Handler+0x8>

08002578 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002582:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <microros_allocate+0x3c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <microros_allocate+0x3c>)
 8002590:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <microros_allocate+0x40>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	461a      	mov	r2, r3
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <microros_allocate+0x40>)
 80025a0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fd02 	bl	8000fac <pvPortMallocMicroROS>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000992c 	.word	0x2000992c
 80025b8:	20009930 	.word	0x20009930

080025bc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7fe fe11 	bl	80011f4 <getBlockSize>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4a06      	ldr	r2, [pc, #24]	@ (80025f0 <microros_deallocate+0x34>)
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <microros_deallocate+0x34>)
 80025de:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7fe fdab 	bl	800113c <vPortFreeMicroROS>
  }
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20009930 	.word	0x20009930

080025f4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <microros_reallocate+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	461a      	mov	r2, r3
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <microros_reallocate+0x64>)
 800260e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002610:	4b12      	ldr	r3, [pc, #72]	@ (800265c <microros_reallocate+0x68>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4413      	add	r3, r2
 800261a:	461a      	mov	r2, r3
 800261c:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <microros_reallocate+0x68>)
 800261e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d104      	bne.n	8002630 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002626:	68b8      	ldr	r0, [r7, #8]
 8002628:	f7fe fcc0 	bl	8000fac <pvPortMallocMicroROS>
 800262c:	4603      	mov	r3, r0
 800262e:	e00e      	b.n	800264e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7fe fddf 	bl	80011f4 <getBlockSize>
 8002636:	4603      	mov	r3, r0
 8002638:	4a08      	ldr	r2, [pc, #32]	@ (800265c <microros_reallocate+0x68>)
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	461a      	mov	r2, r3
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <microros_reallocate+0x68>)
 8002642:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7fe fdf2 	bl	8001230 <pvPortReallocMicroROS>
 800264c:	4603      	mov	r3, r0
  }
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000992c 	.word	0x2000992c
 800265c:	20009930 	.word	0x20009930

08002660 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <microros_zero_allocate+0x48>)
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	4413      	add	r3, r2
 800267a:	461a      	mov	r2, r3
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <microros_zero_allocate+0x48>)
 800267e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	4a08      	ldr	r2, [pc, #32]	@ (80026ac <microros_zero_allocate+0x4c>)
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	4413      	add	r3, r2
 800268e:	461a      	mov	r2, r3
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <microros_zero_allocate+0x4c>)
 8002692:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7fe fdf7 	bl	800128a <pvPortCallocMicroROS>
 800269c:	4603      	mov	r3, r0
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000992c 	.word	0x2000992c
 80026ac:	20009930 	.word	0x20009930

080026b0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80026b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80026c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c6:	a320      	add	r3, pc, #128	@ (adr r3, 8002748 <UTILS_NanosecondsToTimespec+0x98>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fe faa6 	bl	8000c1c <__aeabi_ldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80026da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026de:	a31a      	add	r3, pc, #104	@ (adr r3, 8002748 <UTILS_NanosecondsToTimespec+0x98>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fe fa9a 	bl	8000c1c <__aeabi_ldivmod>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da20      	bge.n	8002736 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <UTILS_NanosecondsToTimespec+0x90>)
 80026fa:	fb82 1203 	smull	r1, r2, r2, r3
 80026fe:	1712      	asrs	r2, r2, #28
 8002700:	17db      	asrs	r3, r3, #31
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	6979      	ldr	r1, [r7, #20]
 8002710:	17c8      	asrs	r0, r1, #31
 8002712:	460c      	mov	r4, r1
 8002714:	4605      	mov	r5, r0
 8002716:	ebb2 0804 	subs.w	r8, r2, r4
 800271a:	eb63 0905 	sbc.w	r9, r3, r5
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4906      	ldr	r1, [pc, #24]	@ (8002744 <UTILS_NanosecondsToTimespec+0x94>)
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]
    }
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002740:	44b82fa1 	.word	0x44b82fa1
 8002744:	3b9aca00 	.word	0x3b9aca00
 8002748:	3b9aca00 	.word	0x3b9aca00
 800274c:	00000000 	.word	0x00000000

08002750 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002754:	b08e      	sub	sp, #56	@ 0x38
 8002756:	af00      	add	r7, sp, #0
 8002758:	6278      	str	r0, [r7, #36]	@ 0x24
 800275a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800275c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002760:	2300      	movs	r3, #0
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002776:	4618      	mov	r0, r3
 8002778:	f006 fed6 	bl	8009528 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277e:	17da      	asrs	r2, r3, #31
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	61fa      	str	r2, [r7, #28]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	69b9      	ldr	r1, [r7, #24]
 800278e:	000b      	movs	r3, r1
 8002790:	2200      	movs	r2, #0
 8002792:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002798:	2200      	movs	r2, #0
 800279a:	461c      	mov	r4, r3
 800279c:	4615      	mov	r5, r2
 800279e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027a2:	1911      	adds	r1, r2, r4
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	416b      	adcs	r3, r5
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80027ae:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80027b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	f04f 0400 	mov.w	r4, #0
 80027be:	f04f 0500 	mov.w	r5, #0
 80027c2:	015d      	lsls	r5, r3, #5
 80027c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80027c8:	0154      	lsls	r4, r2, #5
 80027ca:	4622      	mov	r2, r4
 80027cc:	462b      	mov	r3, r5
 80027ce:	ebb2 0800 	subs.w	r8, r2, r0
 80027d2:	eb63 0901 	sbc.w	r9, r3, r1
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80027e2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80027e6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80027ea:	4690      	mov	r8, r2
 80027ec:	4699      	mov	r9, r3
 80027ee:	eb18 0a00 	adds.w	sl, r8, r0
 80027f2:	eb49 0b01 	adc.w	fp, r9, r1
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002802:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002806:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800280a:	ebb2 040a 	subs.w	r4, r2, sl
 800280e:	603c      	str	r4, [r7, #0]
 8002810:	eb63 030b 	sbc.w	r3, r3, fp
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281a:	4623      	mov	r3, r4
 800281c:	181b      	adds	r3, r3, r0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	462b      	mov	r3, r5
 8002822:	eb41 0303 	adc.w	r3, r1, r3
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800282e:	f7ff ff3f 	bl	80026b0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002832:	2300      	movs	r3, #0
 8002834:	4618      	mov	r0, r3
 8002836:	3738      	adds	r7, #56	@ 0x38
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_MspInit+0x54>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	4a11      	ldr	r2, [pc, #68]	@ (8002894 <HAL_MspInit+0x54>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002854:	6453      	str	r3, [r2, #68]	@ 0x44
 8002856:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <HAL_MspInit+0x54>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_MspInit+0x54>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <HAL_MspInit+0x54>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	@ 0x40
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <HAL_MspInit+0x54>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	210f      	movs	r1, #15
 8002882:	f06f 0001 	mvn.w	r0, #1
 8002886:	f001 fc1f 	bl	80040c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800

08002898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08c      	sub	sp, #48	@ 0x30
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028a8:	2300      	movs	r3, #0
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_InitTick+0xd4>)
 80028ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b0:	4a2e      	ldr	r2, [pc, #184]	@ (800296c <HAL_InitTick+0xd4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b8:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <HAL_InitTick+0xd4>)
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028c4:	f107 020c 	add.w	r2, r7, #12
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fc98 	bl	8005204 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80028d4:	f002 fc82 	bl	80051dc <HAL_RCC_GetPCLK2Freq>
 80028d8:	4603      	mov	r3, r0
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e0:	4a23      	ldr	r2, [pc, #140]	@ (8002970 <HAL_InitTick+0xd8>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	3b01      	subs	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028ec:	4b21      	ldr	r3, [pc, #132]	@ (8002974 <HAL_InitTick+0xdc>)
 80028ee:	4a22      	ldr	r2, [pc, #136]	@ (8002978 <HAL_InitTick+0xe0>)
 80028f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028f2:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <HAL_InitTick+0xdc>)
 80028f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002974 <HAL_InitTick+0xdc>)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002900:	4b1c      	ldr	r3, [pc, #112]	@ (8002974 <HAL_InitTick+0xdc>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002906:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <HAL_InitTick+0xdc>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_InitTick+0xdc>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002912:	4818      	ldr	r0, [pc, #96]	@ (8002974 <HAL_InitTick+0xdc>)
 8002914:	f002 ff2c 	bl	8005770 <HAL_TIM_Base_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800291e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002922:	2b00      	cmp	r3, #0
 8002924:	d11b      	bne.n	800295e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002926:	4813      	ldr	r0, [pc, #76]	@ (8002974 <HAL_InitTick+0xdc>)
 8002928:	f002 ffda 	bl	80058e0 <HAL_TIM_Base_Start_IT>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002936:	2b00      	cmp	r3, #0
 8002938:	d111      	bne.n	800295e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800293a:	2019      	movs	r0, #25
 800293c:	f001 fbe0 	bl	8004100 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	d808      	bhi.n	8002958 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002946:	2200      	movs	r2, #0
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	2019      	movs	r0, #25
 800294c:	f001 fbbc 	bl	80040c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002950:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <HAL_InitTick+0xe4>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e002      	b.n	800295e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800295e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002962:	4618      	mov	r0, r3
 8002964:	3730      	adds	r7, #48	@ 0x30
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	431bde83 	.word	0x431bde83
 8002974:	20009934 	.word	0x20009934
 8002978:	40010000 	.word	0x40010000
 800297c:	200000c8 	.word	0x200000c8

08002980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <NMI_Handler+0x4>

08002988 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <HardFault_Handler+0x4>

08002990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <MemManage_Handler+0x4>

08002998 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <BusFault_Handler+0x4>

080029a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <UsageFault_Handler+0x4>

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029be:	f003 f917 	bl	8005bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20009934 	.word	0x20009934

080029cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d0:	4802      	ldr	r0, [pc, #8]	@ (80029dc <USART1_IRQHandler+0x10>)
 80029d2:	f004 f8bf 	bl	8006b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20009a14 	.word	0x20009a14

080029e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <DMA2_Stream2_IRQHandler+0x10>)
 80029e6:	f001 fd31 	bl	800444c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20009a5c 	.word	0x20009a5c

080029f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <DMA2_Stream7_IRQHandler+0x10>)
 80029fa:	f001 fd27 	bl	800444c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20009abc 	.word	0x20009abc

08002a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return 1;
 8002a0c:	2301      	movs	r3, #1
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_kill>:

int _kill(int pid, int sig)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a22:	f01e ffd9 	bl	80219d8 <__errno>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2216      	movs	r2, #22
 8002a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_exit>:

void _exit (int status)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ffe7 	bl	8002a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4a:	bf00      	nop
 8002a4c:	e7fd      	b.n	8002a4a <_exit+0x12>

08002a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e00a      	b.n	8002a76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a60:	f3af 8000 	nop.w
 8002a64:	4601      	mov	r1, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dbf0      	blt.n	8002a60 <_read+0x12>
  }

  return len;
 8002a7e:	687b      	ldr	r3, [r7, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ab0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_isatty>:

int _isatty(int file)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <_sbrk+0x5c>)
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <_sbrk+0x60>)
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b04:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <_sbrk+0x64>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	@ (8002b58 <_sbrk+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b20:	f01e ff5a 	bl	80219d8 <__errno>
 8002b24:	4603      	mov	r3, r0
 8002b26:	220c      	movs	r2, #12
 8002b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b2e:	e009      	b.n	8002b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b30:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b36:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a05      	ldr	r2, [pc, #20]	@ (8002b54 <_sbrk+0x64>)
 8002b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20050000 	.word	0x20050000
 8002b50:	00000400 	.word	0x00000400
 8002b54:	20009980 	.word	0x20009980
 8002b58:	200171d0 	.word	0x200171d0

08002b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b60:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <SystemInit+0x20>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <SystemInit+0x20>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	@ 0x28
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b86:	f107 0320 	add.w	r3, r7, #32
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	615a      	str	r2, [r3, #20]
 8002ba0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba2:	4b33      	ldr	r3, [pc, #204]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002baa:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002bac:	2259      	movs	r2, #89	@ 0x59
 8002bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002bb8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bca:	4829      	ldr	r0, [pc, #164]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002bcc:	f002 fef8 	bl	80059c0 <HAL_TIM_PWM_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002bd6:	f7ff fcc9 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002be2:	f107 0320 	add.w	r3, r7, #32
 8002be6:	4619      	mov	r1, r3
 8002be8:	4821      	ldr	r0, [pc, #132]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002bea:	f003 fdbf 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002bf4:	f7ff fcba 	bl	800256c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf8:	2360      	movs	r3, #96	@ 0x60
 8002bfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8002bfc:	f240 53db 	movw	r3, #1499	@ 0x5db
 8002c00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4817      	ldr	r0, [pc, #92]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002c12:	f003 f8dd 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002c1c:	f7ff fca6 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	2204      	movs	r2, #4
 8002c24:	4619      	mov	r1, r3
 8002c26:	4812      	ldr	r0, [pc, #72]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002c28:	f003 f8d2 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002c32:	f7ff fc9b 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	2208      	movs	r2, #8
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480c      	ldr	r0, [pc, #48]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002c3e:	f003 f8c7 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8002c48:	f7ff fc90 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	220c      	movs	r2, #12
 8002c50:	4619      	mov	r1, r3
 8002c52:	4807      	ldr	r0, [pc, #28]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002c54:	f003 f8bc 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8002c5e:	f7ff fc85 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c62:	4803      	ldr	r0, [pc, #12]	@ (8002c70 <MX_TIM2_Init+0xf0>)
 8002c64:	f000 f8e0 	bl	8002e28 <HAL_TIM_MspPostInit>

}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	@ 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20009984 	.word	0x20009984

08002c74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	@ 0x38
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	f107 0320 	add.w	r3, r7, #32
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
 8002ca0:	615a      	str	r2, [r3, #20]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8002da0 <MX_TIM3_Init+0x12c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002caa:	4b3c      	ldr	r3, [pc, #240]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002cac:	2259      	movs	r2, #89	@ 0x59
 8002cae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002cb6:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002cb8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002cbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbe:	4b37      	ldr	r3, [pc, #220]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc4:	4b35      	ldr	r3, [pc, #212]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cca:	4834      	ldr	r0, [pc, #208]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002ccc:	f002 fd50 	bl	8005770 <HAL_TIM_Base_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002cd6:	f7ff fc49 	bl	800256c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ce0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	482d      	ldr	r0, [pc, #180]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002ce8:	f003 f934 	bl	8005f54 <HAL_TIM_ConfigClockSource>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002cf2:	f7ff fc3b 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cf6:	4829      	ldr	r0, [pc, #164]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002cf8:	f002 fe62 	bl	80059c0 <HAL_TIM_PWM_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d02:	f7ff fc33 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d0e:	f107 0320 	add.w	r3, r7, #32
 8002d12:	4619      	mov	r1, r3
 8002d14:	4821      	ldr	r0, [pc, #132]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002d16:	f003 fd29 	bl	800676c <HAL_TIMEx_MasterConfigSynchronization>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002d20:	f7ff fc24 	bl	800256c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d24:	2360      	movs	r3, #96	@ 0x60
 8002d26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8002d28:	f240 53db 	movw	r3, #1499	@ 0x5db
 8002d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4817      	ldr	r0, [pc, #92]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002d3e:	f003 f847 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d48:	f7ff fc10 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d4c:	1d3b      	adds	r3, r7, #4
 8002d4e:	2204      	movs	r2, #4
 8002d50:	4619      	mov	r1, r3
 8002d52:	4812      	ldr	r0, [pc, #72]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002d54:	f003 f83c 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d5e:	f7ff fc05 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2208      	movs	r2, #8
 8002d66:	4619      	mov	r1, r3
 8002d68:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002d6a:	f003 f831 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002d74:	f7ff fbfa 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d78:	1d3b      	adds	r3, r7, #4
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4807      	ldr	r0, [pc, #28]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002d80:	f003 f826 	bl	8005dd0 <HAL_TIM_PWM_ConfigChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002d8a:	f7ff fbef 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d8e:	4803      	ldr	r0, [pc, #12]	@ (8002d9c <MX_TIM3_Init+0x128>)
 8002d90:	f000 f84a 	bl	8002e28 <HAL_TIM_MspPostInit>

}
 8002d94:	bf00      	nop
 8002d96:	3738      	adds	r7, #56	@ 0x38
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200099cc 	.word	0x200099cc
 8002da0:	40000400 	.word	0x40000400

08002da4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db4:	d10d      	bne.n	8002dd2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	4a08      	ldr	r2, [pc, #32]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800

08002de4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e20 <HAL_TIM_Base_MspInit+0x3c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10d      	bne.n	8002e12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <HAL_TIM_Base_MspInit+0x40>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	4a09      	ldr	r2, [pc, #36]	@ (8002e24 <HAL_TIM_Base_MspInit+0x40>)
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e06:	4b07      	ldr	r3, [pc, #28]	@ (8002e24 <HAL_TIM_Base_MspInit+0x40>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	@ 0x30
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 031c 	add.w	r3, r7, #28
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e48:	d11e      	bne.n	8002e88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	4a3f      	ldr	r2, [pc, #252]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002e66:	232e      	movs	r3, #46	@ 0x2e
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	f107 031c 	add.w	r3, r7, #28
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4834      	ldr	r0, [pc, #208]	@ (8002f54 <HAL_TIM_MspPostInit+0x12c>)
 8002e82:	f001 fd4d 	bl	8004920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e86:	e05e      	b.n	8002f46 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM3)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a32      	ldr	r2, [pc, #200]	@ (8002f58 <HAL_TIM_MspPostInit+0x130>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d159      	bne.n	8002f46 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	4b2e      	ldr	r3, [pc, #184]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b27      	ldr	r3, [pc, #156]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a26      	ldr	r2, [pc, #152]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002ed4:	f043 0304 	orr.w	r3, r3, #4
 8002ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eda:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <HAL_TIM_MspPostInit+0x128>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ee6:	2340      	movs	r3, #64	@ 0x40
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	f107 031c 	add.w	r3, r7, #28
 8002efe:	4619      	mov	r1, r3
 8002f00:	4814      	ldr	r0, [pc, #80]	@ (8002f54 <HAL_TIM_MspPostInit+0x12c>)
 8002f02:	f001 fd0d 	bl	8004920 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f06:	2303      	movs	r3, #3
 8002f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f16:	2302      	movs	r3, #2
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480e      	ldr	r0, [pc, #56]	@ (8002f5c <HAL_TIM_MspPostInit+0x134>)
 8002f22:	f001 fcfd 	bl	8004920 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f26:	2380      	movs	r3, #128	@ 0x80
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f36:	2302      	movs	r3, #2
 8002f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4807      	ldr	r0, [pc, #28]	@ (8002f60 <HAL_TIM_MspPostInit+0x138>)
 8002f42:	f001 fced 	bl	8004920 <HAL_GPIO_Init>
}
 8002f46:	bf00      	nop
 8002f48:	3730      	adds	r7, #48	@ 0x30
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800

08002f64 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <MX_USART1_UART_Init+0x50>)
 8002f6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f76:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f9a:	4805      	ldr	r0, [pc, #20]	@ (8002fb0 <MX_USART1_UART_Init+0x4c>)
 8002f9c:	f003 fc76 	bl	800688c <HAL_UART_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002fa6:	f7ff fae1 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20009a14 	.word	0x20009a14
 8002fb4:	40011000 	.word	0x40011000

08002fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a4d      	ldr	r2, [pc, #308]	@ (800310c <HAL_UART_MspInit+0x154>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	f040 8094 	bne.w	8003104 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8003110 <HAL_UART_MspInit+0x158>)
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8003110 <HAL_UART_MspInit+0x158>)
 8002fe6:	f043 0310 	orr.w	r3, r3, #16
 8002fea:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fec:	4b48      	ldr	r3, [pc, #288]	@ (8003110 <HAL_UART_MspInit+0x158>)
 8002fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	4b44      	ldr	r3, [pc, #272]	@ (8003110 <HAL_UART_MspInit+0x158>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	4a43      	ldr	r2, [pc, #268]	@ (8003110 <HAL_UART_MspInit+0x158>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6313      	str	r3, [r2, #48]	@ 0x30
 8003008:	4b41      	ldr	r3, [pc, #260]	@ (8003110 <HAL_UART_MspInit+0x158>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003014:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003026:	2307      	movs	r3, #7
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	4838      	ldr	r0, [pc, #224]	@ (8003114 <HAL_UART_MspInit+0x15c>)
 8003032:	f001 fc75 	bl	8004920 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_UART_MspInit+0x160>)
 8003038:	4a38      	ldr	r2, [pc, #224]	@ (800311c <HAL_UART_MspInit+0x164>)
 800303a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800303c:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_UART_MspInit+0x160>)
 800303e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003042:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003044:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <HAL_UART_MspInit+0x160>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304a:	4b33      	ldr	r3, [pc, #204]	@ (8003118 <HAL_UART_MspInit+0x160>)
 800304c:	2200      	movs	r2, #0
 800304e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003050:	4b31      	ldr	r3, [pc, #196]	@ (8003118 <HAL_UART_MspInit+0x160>)
 8003052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003056:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003058:	4b2f      	ldr	r3, [pc, #188]	@ (8003118 <HAL_UART_MspInit+0x160>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800305e:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <HAL_UART_MspInit+0x160>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003064:	4b2c      	ldr	r3, [pc, #176]	@ (8003118 <HAL_UART_MspInit+0x160>)
 8003066:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800306a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800306c:	4b2a      	ldr	r3, [pc, #168]	@ (8003118 <HAL_UART_MspInit+0x160>)
 800306e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003072:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003074:	4b28      	ldr	r3, [pc, #160]	@ (8003118 <HAL_UART_MspInit+0x160>)
 8003076:	2200      	movs	r2, #0
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800307a:	4827      	ldr	r0, [pc, #156]	@ (8003118 <HAL_UART_MspInit+0x160>)
 800307c:	f001 f84e 	bl	800411c <HAL_DMA_Init>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8003086:	f7ff fa71 	bl	800256c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a22      	ldr	r2, [pc, #136]	@ (8003118 <HAL_UART_MspInit+0x160>)
 800308e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003090:	4a21      	ldr	r2, [pc, #132]	@ (8003118 <HAL_UART_MspInit+0x160>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003096:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <HAL_UART_MspInit+0x168>)
 8003098:	4a22      	ldr	r2, [pc, #136]	@ (8003124 <HAL_UART_MspInit+0x16c>)
 800309a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800309c:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <HAL_UART_MspInit+0x168>)
 800309e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030a6:	2240      	movs	r2, #64	@ 0x40
 80030a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b8:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030c4:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80030d0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d2:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030d8:	4811      	ldr	r0, [pc, #68]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030da:	f001 f81f 	bl	800411c <HAL_DMA_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80030e4:	f7ff fa42 	bl	800256c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80030ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003120 <HAL_UART_MspInit+0x168>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2105      	movs	r1, #5
 80030f8:	2025      	movs	r0, #37	@ 0x25
 80030fa:	f000 ffe5 	bl	80040c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030fe:	2025      	movs	r0, #37	@ 0x25
 8003100:	f000 fffe 	bl	8004100 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003104:	bf00      	nop
 8003106:	3728      	adds	r7, #40	@ 0x28
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40011000 	.word	0x40011000
 8003110:	40023800 	.word	0x40023800
 8003114:	40020000 	.word	0x40020000
 8003118:	20009a5c 	.word	0x20009a5c
 800311c:	40026440 	.word	0x40026440
 8003120:	20009abc 	.word	0x20009abc
 8003124:	400264b8 	.word	0x400264b8

08003128 <calculate_pwm>:

static uint8_t tcm_initialized = 0;
static arm_matrix_instance_f32 fixed_mixing_matrix_instance;

arm_status calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8])
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b09e      	sub	sp, #120	@ 0x78
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003138:	e011      	b.n	800315e <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 800313a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	441a      	add	r2, r3
 8003144:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	3378      	adds	r3, #120	@ 0x78
 800314e:	443b      	add	r3, r7
 8003150:	3b1c      	subs	r3, #28
 8003152:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8003154:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003158:	3301      	adds	r3, #1
 800315a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800315e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003162:	2b05      	cmp	r3, #5
 8003164:	d9e9      	bls.n	800313a <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 8003166:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800316a:	2206      	movs	r2, #6
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff f85a 	bl	8002228 <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8] = {0};
 8003174:	f107 031c 	add.w	r3, r7, #28
 8003178:	2220      	movs	r2, #32
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f01e fbf0 	bl	8021962 <memset>

    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    if(tcm_initialized == 0) {
 8003182:	4b41      	ldr	r3, [pc, #260]	@ (8003288 <calculate_pwm+0x160>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d108      	bne.n	800319c <calculate_pwm+0x74>
    	arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 800318a:	4b40      	ldr	r3, [pc, #256]	@ (800328c <calculate_pwm+0x164>)
 800318c:	2206      	movs	r2, #6
 800318e:	2108      	movs	r1, #8
 8003190:	483f      	ldr	r0, [pc, #252]	@ (8003290 <calculate_pwm+0x168>)
 8003192:	f007 fcf7 	bl	800ab84 <arm_mat_init_f32>
    	tcm_initialized = 1;
 8003196:	4b3c      	ldr	r3, [pc, #240]	@ (8003288 <calculate_pwm+0x160>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
    }
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 800319c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031a0:	f107 0014 	add.w	r0, r7, #20
 80031a4:	2201      	movs	r2, #1
 80031a6:	2106      	movs	r1, #6
 80031a8:	f007 fcec 	bl	800ab84 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	f107 000c 	add.w	r0, r7, #12
 80031b4:	2201      	movs	r2, #1
 80031b6:	2108      	movs	r1, #8
 80031b8:	f007 fce4 	bl	800ab84 <arm_mat_init_f32>
    arm_status code = arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance);
 80031bc:	f107 020c 	add.w	r2, r7, #12
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4619      	mov	r1, r3
 80031c6:	4832      	ldr	r0, [pc, #200]	@ (8003290 <calculate_pwm+0x168>)
 80031c8:	f007 fbcc 	bl	800a964 <arm_mat_mult_f32>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    if (code != ARM_MATH_SUCCESS) return code;
 80031d2:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <calculate_pwm+0xb8>
 80031da:	f997 3074 	ldrsb.w	r3, [r7, #116]	@ 0x74
 80031de:	e04f      	b.n	8003280 <calculate_pwm+0x158>

    for (uint8_t i = 0; i < 8; i++) {
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80031e6:	e011      	b.n	800320c <calculate_pwm+0xe4>
        f_pwm_output[i] = pwm_output_instance.pData[i];
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	441a      	add	r2, r3
 80031f2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	3378      	adds	r3, #120	@ 0x78
 80031fc:	443b      	add	r3, r7
 80031fe:	3b3c      	subs	r3, #60	@ 0x3c
 8003200:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8003202:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003206:	3301      	adds	r3, #1
 8003208:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800320c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8003210:	2b07      	cmp	r3, #7
 8003212:	d9e9      	bls.n	80031e8 <calculate_pwm+0xc0>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 8003214:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003218:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800321c:	2208      	movs	r2, #8
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff f802 	bl	8002228 <normalize_vector>
    for (uint8_t i = 0; i < 8; i++) {
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800322a:	e024      	b.n	8003276 <calculate_pwm+0x14e>
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 800322c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	3378      	adds	r3, #120	@ 0x78
 8003234:	443b      	add	r3, r7
 8003236:	3b3c      	subs	r3, #60	@ 0x3c
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	ed9f 2a15 	vldr	s4, [pc, #84]	@ 8003294 <calculate_pwm+0x16c>
 8003240:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8003298 <calculate_pwm+0x170>
 8003244:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8003248:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800324c:	eeb0 0a67 	vmov.f32	s0, s15
 8003250:	f7fe ffbc 	bl	80021cc <linear_interpolation>
 8003254:	eef0 7a40 	vmov.f32	s15, s0
 8003258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800325c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	ee17 2a90 	vmov	r2, s15
 800326a:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 800326c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8003270:	3301      	adds	r3, #1
 8003272:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8003276:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800327a:	2b07      	cmp	r3, #7
 800327c:	d9d6      	bls.n	800322c <calculate_pwm+0x104>
    }
    return ARM_MATH_SUCCESS;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3778      	adds	r7, #120	@ 0x78
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20009b1c 	.word	0x20009b1c
 800328c:	20000008 	.word	0x20000008
 8003290:	20009b20 	.word	0x20009b20
 8003294:	44ed8000 	.word	0x44ed8000
 8003298:	44898000 	.word	0x44898000

0800329c <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	ed93 7a00 	vldr	s14, [r3]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	edd3 7a01 	vldr	s15, [r3, #4]
 80032c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80032d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80032ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 80032f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80032fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d110      	bne.n	8003326 <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	601a      	str	r2, [r3, #0]
		return;
 8003324:	e02d      	b.n	8003382 <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	edd3 6a00 	vldr	s13, [r3]
 800332c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003340:	eef1 6a67 	vneg.f32	s13, s15
 8003344:	ed97 7a03 	vldr	s14, [r7, #12]
 8003348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	edd3 7a02 	vldr	s15, [r3, #8]
 8003358:	eef1 6a67 	vneg.f32	s13, s15
 800335c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003370:	eef1 6a67 	vneg.f32	s13, s15
 8003374:	ed97 7a03 	vldr	s14, [r7, #12]
 8003378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	ed93 7a00 	vldr	s14, [r3]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	edd3 6a02 	vldr	s13, [r3, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80033c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	edd3 6a03 	vldr	s13, [r3, #12]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80033dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	ed93 7a00 	vldr	s14, [r3]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	edd3 6a02 	vldr	s13, [r3, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	edd3 7a03 	vldr	s15, [r3, #12]
 800341a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800341e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	edd3 6a03 	vldr	s13, [r3, #12]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	edd3 7a02 	vldr	s15, [r3, #8]
 800342e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	ed93 7a00 	vldr	s14, [r3]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	edd3 7a02 	vldr	s15, [r3, #8]
 8003448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	edd3 7a03 	vldr	s15, [r3, #12]
 8003458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800345c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	edd3 6a02 	vldr	s13, [r3, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	edd3 7a00 	vldr	s15, [r3]
 800346c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	edd3 6a03 	vldr	s13, [r3, #12]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	ed93 7a00 	vldr	s14, [r3]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	edd3 7a03 	vldr	s15, [r3, #12]
 800349a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80034be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <calculate_rpy_from_quaternion>:
	if (value < min) return min;
	return value;
}

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 80034ec:	b5b0      	push	{r4, r5, r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	edd3 6a02 	vldr	s13, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800351e:	edc7 7a05 	vstr	s15, [r7, #20]
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	ed93 7a01 	vldr	s14, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	edd3 7a01 	vldr	s15, [r3, #4]
 800352e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	edd3 6a02 	vldr	s13, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	edd3 7a02 	vldr	s15, [r3, #8]
 800353e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003546:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800354a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800354e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003552:	edc7 7a04 	vstr	s15, [r7, #16]
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7fd f81e 	bl	8000598 <__aeabi_f2d>
 800355c:	4604      	mov	r4, r0
 800355e:	460d      	mov	r5, r1
 8003560:	6938      	ldr	r0, [r7, #16]
 8003562:	f7fd f819 	bl	8000598 <__aeabi_f2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	ec43 2b11 	vmov	d1, r2, r3
 800356e:	ec45 4b10 	vmov	d0, r4, r5
 8003572:	f01d f8f5 	bl	8020760 <atan2>
 8003576:	ec53 2b10 	vmov	r2, r3, d0
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7fd fafd 	bl	8000b7c <__aeabi_d2f>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	roll_pitch_yaw_radians[1] = asinf(2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	ed93 7a00 	vldr	s14, [r3]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	edd3 7a02 	vldr	s15, [r3, #8]
 8003594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	edd3 6a01 	vldr	s13, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80035a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	1d1c      	adds	r4, r3, #4
 80035b4:	eeb0 0a67 	vmov.f32	s0, s15
 80035b8:	f01d f8a6 	bl	8020708 <asinf>
 80035bc:	eef0 7a40 	vmov.f32	s15, s0
 80035c0:	edc4 7a00 	vstr	s15, [r4]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	ed93 7a00 	vldr	s14, [r3]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80035d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80035e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035ec:	edc7 7a03 	vstr	s15, [r7, #12]
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80035fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	edd3 6a03 	vldr	s13, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	edd3 7a03 	vldr	s15, [r3, #12]
 800360c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003614:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800361c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003620:	edc7 7a02 	vstr	s15, [r7, #8]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7fc ffb7 	bl	8000598 <__aeabi_f2d>
 800362a:	4604      	mov	r4, r0
 800362c:	460d      	mov	r5, r1
 800362e:	68b8      	ldr	r0, [r7, #8]
 8003630:	f7fc ffb2 	bl	8000598 <__aeabi_f2d>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	ec43 2b11 	vmov	d1, r2, r3
 800363c:	ec45 4b10 	vmov	d0, r4, r5
 8003640:	f01d f88e 	bl	8020760 <atan2>
 8003644:	ec51 0b10 	vmov	r0, r1, d0
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f103 0408 	add.w	r4, r3, #8
 800364e:	f7fd fa95 	bl	8000b7c <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	6023      	str	r3, [r4, #0]
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003660 <update_setpoints>:

// input_values: surge, sway, heave, roll, pitch, yaw
uint8_t update_setpoints(const float cmd_vel[6], const Quaternion * quat, const float * water_pressure)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b09a      	sub	sp, #104	@ 0x68
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 8003672:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003676:	4619      	mov	r1, r3
 8003678:	68b8      	ldr	r0, [r7, #8]
 800367a:	f7ff ff37 	bl	80034ec <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++) {
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003684:	e02d      	b.n	80036e2 <update_setpoints+0x82>
		if(fabsf(cmd_vel[i+3]) < TOLERANCE) {
 8003686:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800368a:	3303      	adds	r3, #3
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4413      	add	r3, r2
 8003692:	edd3 7a00 	vldr	s15, [r3]
 8003696:	eef0 7ae7 	vabs.f32	s15, s15
 800369a:	ee17 0a90 	vmov	r0, s15
 800369e:	f7fc ff7b 	bl	8000598 <__aeabi_f2d>
 80036a2:	a375      	add	r3, pc, #468	@ (adr r3, 8003878 <update_setpoints+0x218>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fd fa40 	bl	8000b2c <__aeabi_dcmplt>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d012      	beq.n	80036d8 <update_setpoints+0x78>
			setpoints[i+1] = rpy_rads[i];
 80036b2:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80036b6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80036ba:	3301      	adds	r3, #1
 80036bc:	0092      	lsls	r2, r2, #2
 80036be:	3268      	adds	r2, #104	@ 0x68
 80036c0:	443a      	add	r2, r7
 80036c2:	3a14      	subs	r2, #20
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	496e      	ldr	r1, [pc, #440]	@ (8003880 <update_setpoints+0x220>)
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	601a      	str	r2, [r3, #0]
			count++;
 80036ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80036d2:	3301      	adds	r3, #1
 80036d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	for(uint8_t i = 0; i < 3; i++) {
 80036d8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80036dc:	3301      	adds	r3, #1
 80036de:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80036e2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d9cd      	bls.n	8003686 <update_setpoints+0x26>
	 * Updates depth setpoint
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f6:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.z = * water_pressure;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	653b      	str	r3, [r7, #80]	@ 0x50
	Quaternion q_inv = {0};
 80036fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
	invert_quaternion(quat, &q_inv);
 800370c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003710:	4619      	mov	r1, r3
 8003712:	68b8      	ldr	r0, [r7, #8]
 8003714:	f7ff fdc2 	bl	800329c <invert_quaternion>
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 8003718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003734:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003738:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800373c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe23 	bl	800338c <multiply_quaternions>
	multiply_quaternions(&intermediate_result, quat, &z_out_RBF);
 8003746:	f107 0214 	add.w	r2, r7, #20
 800374a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fe1b 	bl	800338c <multiply_quaternions>

	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(cmd_vel[0]) < TOLERANCE;
 8003756:	edd7 7a06 	vldr	s15, [r7, #24]
 800375a:	eef0 7ae7 	vabs.f32	s15, s15
 800375e:	ee17 0a90 	vmov	r0, s15
 8003762:	f7fc ff19 	bl	8000598 <__aeabi_f2d>
 8003766:	a344      	add	r3, pc, #272	@ (adr r3, 8003878 <update_setpoints+0x218>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fd f9de 	bl	8000b2c <__aeabi_dcmplt>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d110      	bne.n	8003798 <update_setpoints+0x138>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	eef0 7ae7 	vabs.f32	s15, s15
 8003780:	ee17 0a90 	vmov	r0, s15
 8003784:	f7fc ff08 	bl	8000598 <__aeabi_f2d>
 8003788:	a33b      	add	r3, pc, #236	@ (adr r3, 8003878 <update_setpoints+0x218>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	f7fd f9cd 	bl	8000b2c <__aeabi_dcmplt>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <update_setpoints+0x13c>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <update_setpoints+0x13e>
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(cmd_vel[1]) < TOLERANCE;
 80037a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80037a6:	eef0 7ae7 	vabs.f32	s15, s15
 80037aa:	ee17 0a90 	vmov	r0, s15
 80037ae:	f7fc fef3 	bl	8000598 <__aeabi_f2d>
 80037b2:	a331      	add	r3, pc, #196	@ (adr r3, 8003878 <update_setpoints+0x218>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fd f9b8 	bl	8000b2c <__aeabi_dcmplt>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d111      	bne.n	80037e6 <update_setpoints+0x186>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3304      	adds	r3, #4
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	eef0 7ae7 	vabs.f32	s15, s15
 80037ce:	ee17 0a90 	vmov	r0, s15
 80037d2:	f7fc fee1 	bl	8000598 <__aeabi_f2d>
 80037d6:	a328      	add	r3, pc, #160	@ (adr r3, 8003878 <update_setpoints+0x218>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fd f9a6 	bl	8000b2c <__aeabi_dcmplt>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <update_setpoints+0x18a>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <update_setpoints+0x18c>
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(cmd_vel[2]) < TOLERANCE;
 80037f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80037f4:	eef0 7ae7 	vabs.f32	s15, s15
 80037f8:	ee17 0a90 	vmov	r0, s15
 80037fc:	f7fc fecc 	bl	8000598 <__aeabi_f2d>
 8003800:	a31d      	add	r3, pc, #116	@ (adr r3, 8003878 <update_setpoints+0x218>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f7fd f991 	bl	8000b2c <__aeabi_dcmplt>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d111      	bne.n	8003834 <update_setpoints+0x1d4>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3308      	adds	r3, #8
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	eef0 7ae7 	vabs.f32	s15, s15
 800381c:	ee17 0a90 	vmov	r0, s15
 8003820:	f7fc feba 	bl	8000598 <__aeabi_f2d>
 8003824:	a314      	add	r3, pc, #80	@ (adr r3, 8003878 <update_setpoints+0x218>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f7fd f97f 	bl	8000b2c <__aeabi_dcmplt>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <update_setpoints+0x1d8>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <update_setpoints+0x1da>
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	if (x_condition && y_condition && z_condition) {
 800383e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <update_setpoints+0x208>
 8003846:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <update_setpoints+0x208>
 800384e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <update_setpoints+0x208>
		setpoints[0] = * water_pressure;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a09      	ldr	r2, [pc, #36]	@ (8003880 <update_setpoints+0x220>)
 800385c:	6013      	str	r3, [r2, #0]
		count++;
 800385e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003862:	3301      	adds	r3, #1
 8003864:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return count;
 8003868:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800386c:	4618      	mov	r0, r3
 800386e:	3768      	adds	r7, #104	@ 0x68
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	f3af 8000 	nop.w
 8003878:	9999999a 	.word	0x9999999a
 800387c:	3fa99999 	.word	0x3fa99999
 8003880:	20009b28 	.word	0x20009b28

08003884 <init_pids>:

void init_pids(float kps[PID_NUMBER], float kis[PID_NUMBER], float kds[PID_NUMBER]) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
    for(uint8_t i = 0; i < PID_NUMBER; i++) {
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]
 8003894:	e037      	b.n	8003906 <init_pids+0x82>
    	pids[i].Kp = kps[i];
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4413      	add	r3, r2
 800389e:	7dfa      	ldrb	r2, [r7, #23]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	481d      	ldr	r0, [pc, #116]	@ (8003918 <init_pids+0x94>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4403      	add	r3, r0
 80038ae:	3318      	adds	r3, #24
 80038b0:	6019      	str	r1, [r3, #0]
    	pids[i].Ki = kis[i];
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	4413      	add	r3, r2
 80038ba:	7dfa      	ldrb	r2, [r7, #23]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	4816      	ldr	r0, [pc, #88]	@ (8003918 <init_pids+0x94>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4403      	add	r3, r0
 80038ca:	331c      	adds	r3, #28
 80038cc:	6019      	str	r1, [r3, #0]
    	pids[i].Kd = kds[i];
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	7dfa      	ldrb	r2, [r7, #23]
 80038d8:	6819      	ldr	r1, [r3, #0]
 80038da:	480f      	ldr	r0, [pc, #60]	@ (8003918 <init_pids+0x94>)
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4403      	add	r3, r0
 80038e6:	3320      	adds	r3, #32
 80038e8:	6019      	str	r1, [r3, #0]
        arm_pid_init_f32(&pids[i], 0);
 80038ea:	7dfa      	ldrb	r2, [r7, #23]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <init_pids+0x94>)
 80038f6:	4413      	add	r3, r2
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f007 f814 	bl	800a928 <arm_pid_init_f32>
    for(uint8_t i = 0; i < PID_NUMBER; i++) {
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	3301      	adds	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d9c4      	bls.n	8003896 <init_pids+0x12>
    }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20009b38 	.word	0x20009b38
 800391c:	00000000 	.word	0x00000000

08003920 <calculate_pwm_with_pid>:

arm_status calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b0b0      	sub	sp, #192	@ 0xc0
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
	// The order for 4-elements arrays is: z, roll, pitch, yaw
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 800392e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fdd8 	bl	80034ec <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	66fb      	str	r3, [r7, #108]	@ 0x6c

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fe8a 	bl	8003660 <update_setpoints>
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 800394c:	2300      	movs	r3, #0
 800394e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003952:	e011      	b.n	8003978 <calculate_pwm_with_pid+0x58>
 8003954:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	441a      	add	r2, r3
 800395e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	33c0      	adds	r3, #192	@ 0xc0
 8003968:	443b      	add	r3, r7
 800396a:	3b6c      	subs	r3, #108	@ 0x6c
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003972:	3301      	adds	r3, #1
 8003974:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003978:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800397c:	2b05      	cmp	r3, #5
 800397e:	d9e9      	bls.n	8003954 <calculate_pwm_with_pid+0x34>

	float roll_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 8003980:	4bcd      	ldr	r3, [pc, #820]	@ (8003cb8 <calculate_pwm_with_pid+0x398>)
 8003982:	ed93 7a01 	vldr	s14, [r3, #4]
 8003986:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800398a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398e:	4bcb      	ldr	r3, [pc, #812]	@ (8003cbc <calculate_pwm_with_pid+0x39c>)
 8003990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003994:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8003998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800399c:	ed93 7a00 	vldr	s14, [r3]
 80039a0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80039a4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80039a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80039b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80039b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80039bc:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80039c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80039c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80039d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039dc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80039e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039e4:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    /* Update state */
    S->state[1] = S->state[0];
 80039e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80039f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039fc:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80039fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a04:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8003a06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float pitch_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 8003a0c:	4baa      	ldr	r3, [pc, #680]	@ (8003cb8 <calculate_pwm_with_pid+0x398>)
 8003a0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a12:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a1a:	4ba9      	ldr	r3, [pc, #676]	@ (8003cc0 <calculate_pwm_with_pid+0x3a0>)
 8003a1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a20:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    out = (S->A0 * in) +
 8003a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a28:	ed93 7a00 	vldr	s14, [r3]
 8003a2c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003a30:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a38:	edd3 6a01 	vldr	s13, [r3, #4]
 8003a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a40:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003a48:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a50:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a58:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a68:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    S->state[1] = S->state[0];
 8003a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a7e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a84:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003a88:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003a92:	615a      	str	r2, [r3, #20]
    return (out);
 8003a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 8003a9c:	4b86      	ldr	r3, [pc, #536]	@ (8003cb8 <calculate_pwm_with_pid+0x398>)
 8003a9e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003aa2:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aaa:	4b86      	ldr	r3, [pc, #536]	@ (8003cc4 <calculate_pwm_with_pid+0x3a4>)
 8003aac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ab0:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    out = (S->A0 * in) +
 8003ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ab8:	ed93 7a00 	vldr	s14, [r3]
 8003abc:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ac8:	edd3 6a01 	vldr	s13, [r3, #4]
 8003acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ad0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ae0:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ae8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003af8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b00:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    S->state[1] = S->state[0];
 8003b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b0e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b14:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003b18:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b22:	615a      	str	r2, [r3, #20]
    return (out);
 8003b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	// Applies the inverse rotation of the rov-body-frame (RBF) from the earth-fixed-body-frame (EFBF) ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the RBF.
	Quaternion z_out_q;
	z_out_q.w = z_out_q.x = z_out_q.y = 0;
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b38:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.z = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb8 <calculate_pwm_with_pid+0x398>)
 8003b3c:	ed93 7a00 	vldr	s14, [r3]
 8003b40:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b48:	4b5f      	ldr	r3, [pc, #380]	@ (8003cc8 <calculate_pwm_with_pid+0x3a8>)
 8003b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b4e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    out = (S->A0 * in) +
 8003b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b56:	ed93 7a00 	vldr	s14, [r3]
 8003b5a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b66:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003b76:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b86:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b96:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    S->state[1] = S->state[0];
 8003ba2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bac:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bb2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003bb6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003bb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003bbc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003bc0:	615a      	str	r2, [r3, #20]
    return (out);
 8003bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bc6:	653b      	str	r3, [r7, #80]	@ 0x50
	Quaternion q_inv = {0};
 8003bc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 8003bd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fb5d 	bl	800329c <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 8003be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	60da      	str	r2, [r3, #12]
	Quaternion z_out_RBF = {0};
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	605a      	str	r2, [r3, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	60da      	str	r2, [r3, #12]
	// rotating a vector v by q_inv = q_inv * v * q_inv_inv = q_inv * v * q
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003bfe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003c02:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003c06:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fbbe 	bl	800338c <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_RBF);
 8003c10:	f107 0214 	add.w	r2, r7, #20
 8003c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fbb6 	bl	800338c <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t x_condition = fabsf(z_out_RBF.x) < TOLERANCE || fabsf(input_values[0]) < TOLERANCE;
 8003c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c24:	eef0 7ae7 	vabs.f32	s15, s15
 8003c28:	ee17 0a90 	vmov	r0, s15
 8003c2c:	f7fc fcb4 	bl	8000598 <__aeabi_f2d>
 8003c30:	a31f      	add	r3, pc, #124	@ (adr r3, 8003cb0 <calculate_pwm_with_pid+0x390>)
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f7fc ff79 	bl	8000b2c <__aeabi_dcmplt>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10f      	bne.n	8003c60 <calculate_pwm_with_pid+0x340>
 8003c40:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003c44:	eef0 7ae7 	vabs.f32	s15, s15
 8003c48:	ee17 0a90 	vmov	r0, s15
 8003c4c:	f7fc fca4 	bl	8000598 <__aeabi_f2d>
 8003c50:	a317      	add	r3, pc, #92	@ (adr r3, 8003cb0 <calculate_pwm_with_pid+0x390>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f7fc ff69 	bl	8000b2c <__aeabi_dcmplt>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <calculate_pwm_with_pid+0x344>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <calculate_pwm_with_pid+0x346>
 8003c64:	2300      	movs	r3, #0
 8003c66:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	uint8_t y_condition = fabsf(z_out_RBF.y) < TOLERANCE || fabsf(input_values[1]) < TOLERANCE;
 8003c6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c6e:	eef0 7ae7 	vabs.f32	s15, s15
 8003c72:	ee17 0a90 	vmov	r0, s15
 8003c76:	f7fc fc8f 	bl	8000598 <__aeabi_f2d>
 8003c7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8003cb0 <calculate_pwm_with_pid+0x390>)
 8003c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c80:	f7fc ff54 	bl	8000b2c <__aeabi_dcmplt>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10f      	bne.n	8003caa <calculate_pwm_with_pid+0x38a>
 8003c8a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003c8e:	eef0 7ae7 	vabs.f32	s15, s15
 8003c92:	ee17 0a90 	vmov	r0, s15
 8003c96:	f7fc fc7f 	bl	8000598 <__aeabi_f2d>
 8003c9a:	a305      	add	r3, pc, #20	@ (adr r3, 8003cb0 <calculate_pwm_with_pid+0x390>)
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f7fc ff44 	bl	8000b2c <__aeabi_dcmplt>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <calculate_pwm_with_pid+0x3ac>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00f      	b.n	8003cce <calculate_pwm_with_pid+0x3ae>
 8003cae:	bf00      	nop
 8003cb0:	9999999a 	.word	0x9999999a
 8003cb4:	3fa99999 	.word	0x3fa99999
 8003cb8:	20009b28 	.word	0x20009b28
 8003cbc:	20009b5c 	.word	0x20009b5c
 8003cc0:	20009b80 	.word	0x20009b80
 8003cc4:	20009ba4 	.word	0x20009ba4
 8003cc8:	20009b38 	.word	0x20009b38
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
	uint8_t z_condition = fabsf(z_out_RBF.z) < TOLERANCE || fabsf(input_values[2]) < TOLERANCE;
 8003cd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003cd6:	eef0 7ae7 	vabs.f32	s15, s15
 8003cda:	ee17 0a90 	vmov	r0, s15
 8003cde:	f7fc fc5b 	bl	8000598 <__aeabi_f2d>
 8003ce2:	a365      	add	r3, pc, #404	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f7fc ff20 	bl	8000b2c <__aeabi_dcmplt>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10f      	bne.n	8003d12 <calculate_pwm_with_pid+0x3f2>
 8003cf2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8003cfa:	ee17 0a90 	vmov	r0, s15
 8003cfe:	f7fc fc4b 	bl	8000598 <__aeabi_f2d>
 8003d02:	a35d      	add	r3, pc, #372	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f7fc ff10 	bl	8000b2c <__aeabi_dcmplt>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <calculate_pwm_with_pid+0x3f6>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <calculate_pwm_with_pid+0x3f8>
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad

	if (x_condition && y_condition && z_condition) {
 8003d1c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01f      	beq.n	8003d64 <calculate_pwm_with_pid+0x444>
 8003d24:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01b      	beq.n	8003d64 <calculate_pwm_with_pid+0x444>
 8003d2c:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d017      	beq.n	8003d64 <calculate_pwm_with_pid+0x444>
		input_values[0] += z_out_RBF.x;
 8003d34:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d40:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[1] += z_out_RBF.y;
 8003d44:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d50:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		input_values[2] += z_out_RBF.z;
 8003d54:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003d58:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d60:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}

	// roll
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3]) < TOLERANCE) {
 8003d64:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003d68:	eef0 7ae7 	vabs.f32	s15, s15
 8003d6c:	ee17 0a90 	vmov	r0, s15
 8003d70:	f7fc fc12 	bl	8000598 <__aeabi_f2d>
 8003d74:	a340      	add	r3, pc, #256	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f7fc fed7 	bl	8000b2c <__aeabi_dcmplt>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10f      	bne.n	8003da4 <calculate_pwm_with_pid+0x484>
 8003d84:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003d88:	eef0 7ae7 	vabs.f32	s15, s15
 8003d8c:	ee17 0a90 	vmov	r0, s15
 8003d90:	f7fc fc02 	bl	8000598 <__aeabi_f2d>
 8003d94:	a338      	add	r3, pc, #224	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f7fc fec7 	bl	8000b2c <__aeabi_dcmplt>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <calculate_pwm_with_pid+0x494>
		input_values[3] += roll_pid_feedback;
 8003da4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003da8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// pitch
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4]) < TOLERANCE) {
 8003db4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003db8:	eef0 7ae7 	vabs.f32	s15, s15
 8003dbc:	ee17 0a90 	vmov	r0, s15
 8003dc0:	f7fc fbea 	bl	8000598 <__aeabi_f2d>
 8003dc4:	a32c      	add	r3, pc, #176	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc feaf 	bl	8000b2c <__aeabi_dcmplt>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <calculate_pwm_with_pid+0x4d4>
 8003dd4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003dd8:	eef0 7ae7 	vabs.f32	s15, s15
 8003ddc:	ee17 0a90 	vmov	r0, s15
 8003de0:	f7fc fbda 	bl	8000598 <__aeabi_f2d>
 8003de4:	a324      	add	r3, pc, #144	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f7fc fe9f 	bl	8000b2c <__aeabi_dcmplt>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <calculate_pwm_with_pid+0x4e4>
		input_values[4] += pitch_pid_feedback;
 8003df4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003df8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e00:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5]) < TOLERANCE) {
 8003e04:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003e08:	eef0 7ae7 	vabs.f32	s15, s15
 8003e0c:	ee17 0a90 	vmov	r0, s15
 8003e10:	f7fc fbc2 	bl	8000598 <__aeabi_f2d>
 8003e14:	a318      	add	r3, pc, #96	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f7fc fe87 	bl	8000b2c <__aeabi_dcmplt>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10f      	bne.n	8003e44 <calculate_pwm_with_pid+0x524>
 8003e24:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003e28:	eef0 7ae7 	vabs.f32	s15, s15
 8003e2c:	ee17 0a90 	vmov	r0, s15
 8003e30:	f7fc fbb2 	bl	8000598 <__aeabi_f2d>
 8003e34:	a310      	add	r3, pc, #64	@ (adr r3, 8003e78 <calculate_pwm_with_pid+0x558>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f7fc fe77 	bl	8000b2c <__aeabi_dcmplt>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <calculate_pwm_with_pid+0x534>
		input_values[5] += yaw_pid_feedback;
 8003e44:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003e48:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e50:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	arm_status code = calculate_pwm(&input_values, pwm_output);
 8003e54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff f964 	bl	8003128 <calculate_pwm>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
	return code;
 8003e66:	f997 30ac 	ldrsb.w	r3, [r7, #172]	@ 0xac
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	37c0      	adds	r7, #192	@ 0xc0
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	f3af 8000 	nop.w
 8003e78:	9999999a 	.word	0x9999999a
 8003e7c:	3fa99999 	.word	0x3fa99999

08003e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003eb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003e84:	f7fe fe6a 	bl	8002b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e88:	480c      	ldr	r0, [pc, #48]	@ (8003ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e8a:	490d      	ldr	r1, [pc, #52]	@ (8003ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e90:	e002      	b.n	8003e98 <LoopCopyDataInit>

08003e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e96:	3304      	adds	r3, #4

08003e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e9c:	d3f9      	bcc.n	8003e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8003ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ea4:	e001      	b.n	8003eaa <LoopFillZerobss>

08003ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ea8:	3204      	adds	r2, #4

08003eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eac:	d3fb      	bcc.n	8003ea6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003eae:	f01d fd99 	bl	80219e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eb2:	f7fe fa63 	bl	800237c <main>
  bx  lr    
 8003eb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003eb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec0:	20001b8c 	.word	0x20001b8c
  ldr r2, =_sidata
 8003ec4:	08025cc4 	.word	0x08025cc4
  ldr r2, =_sbss
 8003ec8:	20001b90 	.word	0x20001b90
  ldr r4, =_ebss
 8003ecc:	200171cc 	.word	0x200171cc

08003ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ed0:	e7fe      	b.n	8003ed0 <ADC_IRQHandler>
	...

08003ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f14 <HAL_Init+0x40>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f14 <HAL_Init+0x40>)
 8003ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_Init+0x40>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f14 <HAL_Init+0x40>)
 8003eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef0:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <HAL_Init+0x40>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a07      	ldr	r2, [pc, #28]	@ (8003f14 <HAL_Init+0x40>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003efc:	2003      	movs	r0, #3
 8003efe:	f000 f8d8 	bl	80040b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f02:	200f      	movs	r0, #15
 8003f04:	f7fe fcc8 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f08:	f7fe fc9a 	bl	8002840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40023c00 	.word	0x40023c00

08003f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_IncTick+0x20>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_IncTick+0x24>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4413      	add	r3, r2
 8003f28:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_IncTick+0x24>)
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	200000cc 	.word	0x200000cc
 8003f3c:	20009bc8 	.word	0x20009bc8

08003f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return uwTick;
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <HAL_GetTick+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20009bc8 	.word	0x20009bc8

08003f58 <__NVIC_SetPriorityGrouping>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f74:	4013      	ands	r3, r2
 8003f76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8a:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	60d3      	str	r3, [r2, #12]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <__NVIC_GetPriorityGrouping>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa4:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	0a1b      	lsrs	r3, r3, #8
 8003faa:	f003 0307 	and.w	r3, r3, #7
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_EnableIRQ>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	db0b      	blt.n	8003fe6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	f003 021f 	and.w	r2, r3, #31
 8003fd4:	4907      	ldr	r1, [pc, #28]	@ (8003ff4 <__NVIC_EnableIRQ+0x38>)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2001      	movs	r0, #1
 8003fde:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000e100 	.word	0xe000e100

08003ff8 <__NVIC_SetPriority>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	2b00      	cmp	r3, #0
 800400a:	db0a      	blt.n	8004022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	490c      	ldr	r1, [pc, #48]	@ (8004044 <__NVIC_SetPriority+0x4c>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	0112      	lsls	r2, r2, #4
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	440b      	add	r3, r1
 800401c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004020:	e00a      	b.n	8004038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4908      	ldr	r1, [pc, #32]	@ (8004048 <__NVIC_SetPriority+0x50>)
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	3b04      	subs	r3, #4
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	440b      	add	r3, r1
 8004036:	761a      	strb	r2, [r3, #24]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000e100 	.word	0xe000e100
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <NVIC_EncodePriority>:
{
 800404c:	b480      	push	{r7}
 800404e:	b089      	sub	sp, #36	@ 0x24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f1c3 0307 	rsb	r3, r3, #7
 8004066:	2b04      	cmp	r3, #4
 8004068:	bf28      	it	cs
 800406a:	2304      	movcs	r3, #4
 800406c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3304      	adds	r3, #4
 8004072:	2b06      	cmp	r3, #6
 8004074:	d902      	bls.n	800407c <NVIC_EncodePriority+0x30>
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3b03      	subs	r3, #3
 800407a:	e000      	b.n	800407e <NVIC_EncodePriority+0x32>
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	401a      	ands	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004094:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	43d9      	mvns	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a4:	4313      	orrs	r3, r2
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3724      	adds	r7, #36	@ 0x24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ff4c 	bl	8003f58 <__NVIC_SetPriorityGrouping>
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040da:	f7ff ff61 	bl	8003fa0 <__NVIC_GetPriorityGrouping>
 80040de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	6978      	ldr	r0, [r7, #20]
 80040e6:	f7ff ffb1 	bl	800404c <NVIC_EncodePriority>
 80040ea:	4602      	mov	r2, r0
 80040ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff80 	bl	8003ff8 <__NVIC_SetPriority>
}
 80040f8:	bf00      	nop
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff ff54 	bl	8003fbc <__NVIC_EnableIRQ>
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004128:	f7ff ff0a 	bl	8003f40 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e099      	b.n	800426c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004158:	e00f      	b.n	800417a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800415a:	f7ff fef1 	bl	8003f40 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b05      	cmp	r3, #5
 8004166:	d908      	bls.n	800417a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2203      	movs	r2, #3
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e078      	b.n	800426c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e8      	bne.n	800415a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <HAL_DMA_Init+0x158>)
 8004194:	4013      	ands	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	4313      	orrs	r3, r2
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	2b04      	cmp	r3, #4
 800420c:	d117      	bne.n	800423e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00e      	beq.n	800423e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fb01 	bl	8004828 <DMA_CheckFifoParam>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2240      	movs	r2, #64	@ 0x40
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800423a:	2301      	movs	r3, #1
 800423c:	e016      	b.n	800426c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fab8 	bl	80047bc <DMA_CalcBaseAndBitshift>
 800424c:	4603      	mov	r3, r0
 800424e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	223f      	movs	r2, #63	@ 0x3f
 8004256:	409a      	lsls	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	f010803f 	.word	0xf010803f

08004278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_DMA_Start_IT+0x26>
 800429a:	2302      	movs	r3, #2
 800429c:	e040      	b.n	8004320 <HAL_DMA_Start_IT+0xa8>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d12f      	bne.n	8004312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa4a 	bl	8004760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	223f      	movs	r2, #63	@ 0x3f
 80042d2:	409a      	lsls	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0216 	orr.w	r2, r2, #22
 80042e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e005      	b.n	800431e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800431a:	2302      	movs	r3, #2
 800431c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004336:	f7ff fe03 	bl	8003f40 <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d008      	beq.n	800435a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2280      	movs	r2, #128	@ 0x80
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e052      	b.n	8004400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0216 	bic.w	r2, r2, #22
 8004368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <HAL_DMA_Abort+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0208 	bic.w	r2, r2, #8
 8004398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043aa:	e013      	b.n	80043d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ac:	f7ff fdc8 	bl	8003f40 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d90c      	bls.n	80043d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2203      	movs	r2, #3
 80043c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e015      	b.n	8004400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e4      	bne.n	80043ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e6:	223f      	movs	r2, #63	@ 0x3f
 80043e8:	409a      	lsls	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e00c      	b.n	8004440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2205      	movs	r2, #5
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004458:	4b8e      	ldr	r3, [pc, #568]	@ (8004694 <HAL_DMA_IRQHandler+0x248>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a8e      	ldr	r2, [pc, #568]	@ (8004698 <HAL_DMA_IRQHandler+0x24c>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0a9b      	lsrs	r3, r3, #10
 8004464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	2208      	movs	r2, #8
 8004478:	409a      	lsls	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01a      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d013      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0204 	bic.w	r2, r2, #4
 800449e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a4:	2208      	movs	r2, #8
 80044a6:	409a      	lsls	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f043 0201 	orr.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044da:	2201      	movs	r2, #1
 80044dc:	409a      	lsls	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	f043 0202 	orr.w	r2, r3, #2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f2:	2204      	movs	r2, #4
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d012      	beq.n	8004524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004510:	2204      	movs	r2, #4
 8004512:	409a      	lsls	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	2210      	movs	r2, #16
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d043      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d03c      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	2210      	movs	r2, #16
 8004548:	409a      	lsls	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d018      	beq.n	800458e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d024      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e01f      	b.n	80045bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	4798      	blx	r3
 800458c:	e016      	b.n	80045bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0208 	bic.w	r2, r2, #8
 80045aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c0:	2220      	movs	r2, #32
 80045c2:	409a      	lsls	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 808f 	beq.w	80046ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8087 	beq.w	80046ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e2:	2220      	movs	r2, #32
 80045e4:	409a      	lsls	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d136      	bne.n	8004664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0216 	bic.w	r2, r2, #22
 8004604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_DMA_IRQHandler+0x1da>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0208 	bic.w	r2, r2, #8
 8004634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	223f      	movs	r2, #63	@ 0x3f
 800463c:	409a      	lsls	r2, r3
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004656:	2b00      	cmp	r3, #0
 8004658:	d07e      	beq.n	8004758 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
        }
        return;
 8004662:	e079      	b.n	8004758 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10d      	bne.n	800469c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004684:	2b00      	cmp	r3, #0
 8004686:	d031      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
 8004690:	e02c      	b.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
 8004692:	bf00      	nop
 8004694:	20000004 	.word	0x20000004
 8004698:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d023      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
 80046ac:	e01e      	b.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0210 	bic.w	r2, r2, #16
 80046ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d032      	beq.n	800475a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d022      	beq.n	8004746 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2205      	movs	r2, #5
 8004704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3301      	adds	r3, #1
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	429a      	cmp	r2, r3
 8004722:	d307      	bcc.n	8004734 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f2      	bne.n	8004718 <HAL_DMA_IRQHandler+0x2cc>
 8004732:	e000      	b.n	8004736 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004734:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
 8004756:	e000      	b.n	800475a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004758:	bf00      	nop
    }
  }
}
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800477c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b40      	cmp	r3, #64	@ 0x40
 800478c:	d108      	bne.n	80047a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800479e:	e007      	b.n	80047b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	60da      	str	r2, [r3, #12]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3b10      	subs	r3, #16
 80047cc:	4a14      	ldr	r2, [pc, #80]	@ (8004820 <DMA_CalcBaseAndBitshift+0x64>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047d6:	4a13      	ldr	r2, [pc, #76]	@ (8004824 <DMA_CalcBaseAndBitshift+0x68>)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d909      	bls.n	80047fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80047fc:	e007      	b.n	800480e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	aaaaaaab 	.word	0xaaaaaaab
 8004824:	08022964 	.word	0x08022964

08004828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11f      	bne.n	8004882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d856      	bhi.n	80048f6 <DMA_CheckFifoParam+0xce>
 8004848:	a201      	add	r2, pc, #4	@ (adr r2, 8004850 <DMA_CheckFifoParam+0x28>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004861 	.word	0x08004861
 8004854:	08004873 	.word	0x08004873
 8004858:	08004861 	.word	0x08004861
 800485c:	080048f7 	.word	0x080048f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d046      	beq.n	80048fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004870:	e043      	b.n	80048fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800487a:	d140      	bne.n	80048fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e03d      	b.n	80048fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488a:	d121      	bne.n	80048d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d837      	bhi.n	8004902 <DMA_CheckFifoParam+0xda>
 8004892:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <DMA_CheckFifoParam+0x70>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048a9 	.word	0x080048a9
 800489c:	080048af 	.word	0x080048af
 80048a0:	080048a9 	.word	0x080048a9
 80048a4:	080048c1 	.word	0x080048c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      break;
 80048ac:	e030      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d025      	beq.n	8004906 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048be:	e022      	b.n	8004906 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048c8:	d11f      	bne.n	800490a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ce:	e01c      	b.n	800490a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d903      	bls.n	80048de <DMA_CheckFifoParam+0xb6>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d003      	beq.n	80048e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048dc:	e018      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      break;
 80048e2:	e015      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
      break;
 80048f4:	e00b      	b.n	800490e <DMA_CheckFifoParam+0xe6>
      break;
 80048f6:	bf00      	nop
 80048f8:	e00a      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 80048fa:	bf00      	nop
 80048fc:	e008      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 80048fe:	bf00      	nop
 8004900:	e006      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 8004902:	bf00      	nop
 8004904:	e004      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 8004906:	bf00      	nop
 8004908:	e002      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;   
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 800490e:	bf00      	nop
    }
  } 
  
  return status; 
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop

08004920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e177      	b.n	8004c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800493c:	2201      	movs	r2, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	429a      	cmp	r2, r3
 8004956:	f040 8166 	bne.w	8004c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d005      	beq.n	8004972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496e:	2b02      	cmp	r3, #2
 8004970:	d130      	bne.n	80049d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	2203      	movs	r2, #3
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049a8:	2201      	movs	r2, #1
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 0201 	and.w	r2, r3, #1
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d017      	beq.n	8004a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2203      	movs	r2, #3
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d123      	bne.n	8004a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	08da      	lsrs	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3208      	adds	r2, #8
 8004a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	220f      	movs	r2, #15
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	08da      	lsrs	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	69b9      	ldr	r1, [r7, #24]
 8004a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	2203      	movs	r2, #3
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0203 	and.w	r2, r3, #3
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80c0 	beq.w	8004c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4b66      	ldr	r3, [pc, #408]	@ (8004c44 <HAL_GPIO_Init+0x324>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	4a65      	ldr	r2, [pc, #404]	@ (8004c44 <HAL_GPIO_Init+0x324>)
 8004ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ab6:	4b63      	ldr	r3, [pc, #396]	@ (8004c44 <HAL_GPIO_Init+0x324>)
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ac2:	4a61      	ldr	r2, [pc, #388]	@ (8004c48 <HAL_GPIO_Init+0x328>)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	3302      	adds	r3, #2
 8004aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	220f      	movs	r2, #15
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a58      	ldr	r2, [pc, #352]	@ (8004c4c <HAL_GPIO_Init+0x32c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d037      	beq.n	8004b5e <HAL_GPIO_Init+0x23e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a57      	ldr	r2, [pc, #348]	@ (8004c50 <HAL_GPIO_Init+0x330>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d031      	beq.n	8004b5a <HAL_GPIO_Init+0x23a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a56      	ldr	r2, [pc, #344]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02b      	beq.n	8004b56 <HAL_GPIO_Init+0x236>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a55      	ldr	r2, [pc, #340]	@ (8004c58 <HAL_GPIO_Init+0x338>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d025      	beq.n	8004b52 <HAL_GPIO_Init+0x232>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a54      	ldr	r2, [pc, #336]	@ (8004c5c <HAL_GPIO_Init+0x33c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01f      	beq.n	8004b4e <HAL_GPIO_Init+0x22e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a53      	ldr	r2, [pc, #332]	@ (8004c60 <HAL_GPIO_Init+0x340>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d019      	beq.n	8004b4a <HAL_GPIO_Init+0x22a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a52      	ldr	r2, [pc, #328]	@ (8004c64 <HAL_GPIO_Init+0x344>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_GPIO_Init+0x226>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a51      	ldr	r2, [pc, #324]	@ (8004c68 <HAL_GPIO_Init+0x348>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00d      	beq.n	8004b42 <HAL_GPIO_Init+0x222>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a50      	ldr	r2, [pc, #320]	@ (8004c6c <HAL_GPIO_Init+0x34c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <HAL_GPIO_Init+0x21e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4f      	ldr	r2, [pc, #316]	@ (8004c70 <HAL_GPIO_Init+0x350>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <HAL_GPIO_Init+0x21a>
 8004b36:	2309      	movs	r3, #9
 8004b38:	e012      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b3a:	230a      	movs	r3, #10
 8004b3c:	e010      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b3e:	2308      	movs	r3, #8
 8004b40:	e00e      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b42:	2307      	movs	r3, #7
 8004b44:	e00c      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b46:	2306      	movs	r3, #6
 8004b48:	e00a      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b4a:	2305      	movs	r3, #5
 8004b4c:	e008      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b4e:	2304      	movs	r3, #4
 8004b50:	e006      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b52:	2303      	movs	r3, #3
 8004b54:	e004      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e002      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <HAL_GPIO_Init+0x240>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	f002 0203 	and.w	r2, r2, #3
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	4093      	lsls	r3, r2
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b70:	4935      	ldr	r1, [pc, #212]	@ (8004c48 <HAL_GPIO_Init+0x328>)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	3302      	adds	r3, #2
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ba2:	4a34      	ldr	r2, [pc, #208]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ba8:	4b32      	ldr	r3, [pc, #200]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	43db      	mvns	r3, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bcc:	4a29      	ldr	r2, [pc, #164]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bd2:	4b28      	ldr	r3, [pc, #160]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4013      	ands	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c20:	4a14      	ldr	r2, [pc, #80]	@ (8004c74 <HAL_GPIO_Init+0x354>)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b0f      	cmp	r3, #15
 8004c30:	f67f ae84 	bls.w	800493c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	3724      	adds	r7, #36	@ 0x24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40013800 	.word	0x40013800
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	40020400 	.word	0x40020400
 8004c54:	40020800 	.word	0x40020800
 8004c58:	40020c00 	.word	0x40020c00
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40021400 	.word	0x40021400
 8004c64:	40021800 	.word	0x40021800
 8004c68:	40021c00 	.word	0x40021c00
 8004c6c:	40022000 	.word	0x40022000
 8004c70:	40022400 	.word	0x40022400
 8004c74:	40013c00 	.word	0x40013c00

08004c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	807b      	strh	r3, [r7, #2]
 8004c84:	4613      	mov	r3, r2
 8004c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c88:	787b      	ldrb	r3, [r7, #1]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c8e:	887a      	ldrh	r2, [r7, #2]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c94:	e003      	b.n	8004c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c96:	887b      	ldrh	r3, [r7, #2]
 8004c98:	041a      	lsls	r2, r3, #16
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	619a      	str	r2, [r3, #24]
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e034      	b.n	8004d26 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004cc4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004cce:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6852      	ldr	r2, [r2, #4]
 8004cd8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6892      	ldr	r2, [r2, #8]
 8004ce2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004ce4:	f7ff f92c 	bl	8003f40 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004cea:	e00f      	b.n	8004d0c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004cec:	f7ff f928 	bl	8003f40 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b31      	cmp	r3, #49	@ 0x31
 8004cf8:	d908      	bls.n	8004d0c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e00c      	b.n	8004d26 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e8      	bne.n	8004cec <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004d22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4b20      	ldr	r3, [pc, #128]	@ (8004de0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d78:	2201      	movs	r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7c:	f7ff f8e0 	bl	8003f40 <HAL_GetTick>
 8004d80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d82:	e009      	b.n	8004d98 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d84:	f7ff f8dc 	bl	8003f40 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d92:	d901      	bls.n	8004d98 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e01f      	b.n	8004dd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d98:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004da4:	d1ee      	bne.n	8004d84 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004da6:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dac:	f7ff f8c8 	bl	8003f40 <HAL_GetTick>
 8004db0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004db2:	e009      	b.n	8004dc8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004db4:	f7ff f8c4 	bl	8003f40 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dc2:	d901      	bls.n	8004dc8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e007      	b.n	8004dd8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dc8:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	420e0040 	.word	0x420e0040
 8004de8:	40007000 	.word	0x40007000
 8004dec:	420e0044 	.word	0x420e0044

08004df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0cc      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e04:	4b68      	ldr	r3, [pc, #416]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d90c      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b65      	ldr	r3, [pc, #404]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b63      	ldr	r3, [pc, #396]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0b8      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e44:	4b59      	ldr	r3, [pc, #356]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a58      	ldr	r2, [pc, #352]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e5c:	4b53      	ldr	r3, [pc, #332]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a52      	ldr	r2, [pc, #328]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e68:	4b50      	ldr	r3, [pc, #320]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	494d      	ldr	r1, [pc, #308]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d044      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d119      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e07f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d003      	beq.n	8004eae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eae:	4b3f      	ldr	r3, [pc, #252]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e067      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ece:	4b37      	ldr	r3, [pc, #220]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f023 0203 	bic.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4934      	ldr	r1, [pc, #208]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee0:	f7ff f82e 	bl	8003f40 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	f7ff f82a 	bl	8003f40 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e04f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	4b2b      	ldr	r3, [pc, #172]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 020c 	and.w	r2, r3, #12
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1eb      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f10:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20c      	bcs.n	8004f38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e032      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f44:	4b19      	ldr	r3, [pc, #100]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4916      	ldr	r1, [pc, #88]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	490e      	ldr	r1, [pc, #56]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f76:	f000 f821 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	490a      	ldr	r1, [pc, #40]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	5ccb      	ldrb	r3, [r1, r3]
 8004f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8e:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f92:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fc7e 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023c00 	.word	0x40023c00
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	0802294c 	.word	0x0802294c
 8004fb4:	20000004 	.word	0x20000004
 8004fb8:	200000c8 	.word	0x200000c8

08004fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fc0:	b092      	sub	sp, #72	@ 0x48
 8004fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d00e      	beq.n	8004ffe <HAL_RCC_GetSysClockFreq+0x42>
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	f200 80cd 	bhi.w	8005180 <HAL_RCC_GetSysClockFreq+0x1c4>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fee:	e0c7      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ff0:	4b69      	ldr	r3, [pc, #420]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004ff2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004ff4:	e0c7      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff6:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 8004ffa:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004ffc:	e0c3      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ffe:	4b65      	ldr	r3, [pc, #404]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005008:	4b62      	ldr	r3, [pc, #392]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d04a      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005014:	4b5f      	ldr	r3, [pc, #380]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	099b      	lsrs	r3, r3, #6
 800501a:	2200      	movs	r2, #0
 800501c:	4618      	mov	r0, r3
 800501e:	4611      	mov	r1, r2
 8005020:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005024:	633b      	str	r3, [r7, #48]	@ 0x30
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	@ 0x34
 800502a:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 800502e:	4642      	mov	r2, r8
 8005030:	464b      	mov	r3, r9
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f04f 0100 	mov.w	r1, #0
 800503a:	00d9      	lsls	r1, r3, #3
 800503c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005040:	00d0      	lsls	r0, r2, #3
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4641      	mov	r1, r8
 8005048:	1a54      	subs	r4, r2, r1
 800504a:	4649      	mov	r1, r9
 800504c:	eb63 0501 	sbc.w	r5, r3, r1
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	016b      	lsls	r3, r5, #5
 800505a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800505e:	0162      	lsls	r2, r4, #5
 8005060:	4614      	mov	r4, r2
 8005062:	461d      	mov	r5, r3
 8005064:	4643      	mov	r3, r8
 8005066:	18e3      	adds	r3, r4, r3
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	464b      	mov	r3, r9
 800506c:	eb45 0303 	adc.w	r3, r5, r3
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800507e:	4629      	mov	r1, r5
 8005080:	040b      	lsls	r3, r1, #16
 8005082:	4621      	mov	r1, r4
 8005084:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8005088:	4621      	mov	r1, r4
 800508a:	040a      	lsls	r2, r1, #16
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005092:	2200      	movs	r2, #0
 8005094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800509c:	f7fb fe0e 	bl	8000cbc <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a8:	e05c      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	2200      	movs	r2, #0
 80050b2:	623b      	str	r3, [r7, #32]
 80050b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	f04f 0000 	mov.w	r0, #0
 80050ce:	f04f 0100 	mov.w	r1, #0
 80050d2:	0159      	lsls	r1, r3, #5
 80050d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d8:	0150      	lsls	r0, r2, #5
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4621      	mov	r1, r4
 80050e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80050e4:	4629      	mov	r1, r5
 80050e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050f6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050fa:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050fe:	ebb2 080a 	subs.w	r8, r2, sl
 8005102:	eb63 090b 	sbc.w	r9, r3, fp
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511a:	4690      	mov	r8, r2
 800511c:	4699      	mov	r9, r3
 800511e:	4623      	mov	r3, r4
 8005120:	eb18 0303 	adds.w	r3, r8, r3
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	462b      	mov	r3, r5
 8005128:	eb49 0303 	adc.w	r3, r9, r3
 800512c:	607b      	str	r3, [r7, #4]
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800513a:	4629      	mov	r1, r5
 800513c:	028b      	lsls	r3, r1, #10
 800513e:	4621      	mov	r1, r4
 8005140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005144:	4621      	mov	r1, r4
 8005146:	028a      	lsls	r2, r1, #10
 8005148:	4610      	mov	r0, r2
 800514a:	4619      	mov	r1, r3
 800514c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514e:	2200      	movs	r2, #0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	617a      	str	r2, [r7, #20]
 8005154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005158:	f7fb fdb0 	bl	8000cbc <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4613      	mov	r3, r2
 8005162:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005164:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	3301      	adds	r3, #1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 8005174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800517e:	e002      	b.n	8005186 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8005182:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8005184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8005188:	4618      	mov	r0, r3
 800518a:	3748      	adds	r7, #72	@ 0x48
 800518c:	46bd      	mov	sp, r7
 800518e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800
 8005198:	00f42400 	.word	0x00f42400

0800519c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051a0:	4b03      	ldr	r3, [pc, #12]	@ (80051b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051a2:	681b      	ldr	r3, [r3, #0]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000004 	.word	0x20000004

080051b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051b8:	f7ff fff0 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	0a9b      	lsrs	r3, r3, #10
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	4903      	ldr	r1, [pc, #12]	@ (80051d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ca:	5ccb      	ldrb	r3, [r1, r3]
 80051cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40023800 	.word	0x40023800
 80051d8:	0802295c 	.word	0x0802295c

080051dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051e0:	f7ff ffdc 	bl	800519c <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	0b5b      	lsrs	r3, r3, #13
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4903      	ldr	r1, [pc, #12]	@ (8005200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	0802295c 	.word	0x0802295c

08005204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	220f      	movs	r2, #15
 8005212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005214:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <HAL_RCC_GetClockConfig+0x5c>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0203 	and.w	r2, r3, #3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005220:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <HAL_RCC_GetClockConfig+0x5c>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800522c:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <HAL_RCC_GetClockConfig+0x5c>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_RCC_GetClockConfig+0x5c>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005246:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <HAL_RCC_GetClockConfig+0x60>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 020f 	and.w	r2, r3, #15
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	601a      	str	r2, [r3, #0]
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800
 8005264:	40023c00 	.word	0x40023c00

08005268 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e273      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d075      	beq.n	8005372 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005286:	4b88      	ldr	r3, [pc, #544]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b04      	cmp	r3, #4
 8005290:	d00c      	beq.n	80052ac <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b85      	ldr	r3, [pc, #532]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
        || \
 800529a:	2b08      	cmp	r3, #8
 800529c:	d112      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529e:	4b82      	ldr	r3, [pc, #520]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052aa:	d10b      	bne.n	80052c4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ac:	4b7e      	ldr	r3, [pc, #504]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d05b      	beq.n	8005370 <HAL_RCC_OscConfig+0x108>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d157      	bne.n	8005370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e24e      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052cc:	d106      	bne.n	80052dc <HAL_RCC_OscConfig+0x74>
 80052ce:	4b76      	ldr	r3, [pc, #472]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a75      	ldr	r2, [pc, #468]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e01d      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x98>
 80052e6:	4b70      	ldr	r3, [pc, #448]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6f      	ldr	r2, [pc, #444]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4b6d      	ldr	r3, [pc, #436]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a6c      	ldr	r2, [pc, #432]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_OscConfig+0xb0>
 8005300:	4b69      	ldr	r3, [pc, #420]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a68      	ldr	r2, [pc, #416]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b66      	ldr	r3, [pc, #408]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a65      	ldr	r2, [pc, #404]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d013      	beq.n	8005348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fe fe0e 	bl	8003f40 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005328:	f7fe fe0a 	bl	8003f40 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	@ 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e213      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b5b      	ldr	r3, [pc, #364]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0xc0>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fe fdfa 	bl	8003f40 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fe fdf6 	bl	8003f40 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	@ 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e1ff      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005362:	4b51      	ldr	r3, [pc, #324]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0xe8>
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d063      	beq.n	8005446 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800537e:	4b4a      	ldr	r3, [pc, #296]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538a:	4b47      	ldr	r3, [pc, #284]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005392:	2b08      	cmp	r3, #8
 8005394:	d11c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005396:	4b44      	ldr	r3, [pc, #272]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d116      	bne.n	80053d0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a2:	4b41      	ldr	r3, [pc, #260]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_RCC_OscConfig+0x152>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d001      	beq.n	80053ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e1d3      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ba:	4b3b      	ldr	r3, [pc, #236]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4937      	ldr	r1, [pc, #220]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ce:	e03a      	b.n	8005446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d020      	beq.n	800541a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d8:	4b34      	ldr	r3, [pc, #208]	@ (80054ac <HAL_RCC_OscConfig+0x244>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fe fdaf 	bl	8003f40 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e6:	f7fe fdab 	bl	8003f40 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e1b4      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f8:	4b2b      	ldr	r3, [pc, #172]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005404:	4b28      	ldr	r3, [pc, #160]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4925      	ldr	r1, [pc, #148]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
 8005418:	e015      	b.n	8005446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541a:	4b24      	ldr	r3, [pc, #144]	@ (80054ac <HAL_RCC_OscConfig+0x244>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005420:	f7fe fd8e 	bl	8003f40 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005428:	f7fe fd8a 	bl	8003f40 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e193      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800543a:	4b1b      	ldr	r3, [pc, #108]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d036      	beq.n	80054c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d016      	beq.n	8005488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800545a:	4b15      	ldr	r3, [pc, #84]	@ (80054b0 <HAL_RCC_OscConfig+0x248>)
 800545c:	2201      	movs	r2, #1
 800545e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005460:	f7fe fd6e 	bl	8003f40 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005468:	f7fe fd6a 	bl	8003f40 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e173      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547a:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <HAL_RCC_OscConfig+0x240>)
 800547c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x200>
 8005486:	e01b      	b.n	80054c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005488:	4b09      	ldr	r3, [pc, #36]	@ (80054b0 <HAL_RCC_OscConfig+0x248>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548e:	f7fe fd57 	bl	8003f40 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005494:	e00e      	b.n	80054b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005496:	f7fe fd53 	bl	8003f40 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d907      	bls.n	80054b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e15c      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	42470000 	.word	0x42470000
 80054b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b4:	4b8a      	ldr	r3, [pc, #552]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80054b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ea      	bne.n	8005496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8097 	beq.w	80055fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d2:	4b83      	ldr	r3, [pc, #524]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10f      	bne.n	80054fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]
 80054e2:	4b7f      	ldr	r3, [pc, #508]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e6:	4a7e      	ldr	r2, [pc, #504]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80054e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ee:	4b7c      	ldr	r3, [pc, #496]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fe:	4b79      	ldr	r3, [pc, #484]	@ (80056e4 <HAL_RCC_OscConfig+0x47c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d118      	bne.n	800553c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800550a:	4b76      	ldr	r3, [pc, #472]	@ (80056e4 <HAL_RCC_OscConfig+0x47c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a75      	ldr	r2, [pc, #468]	@ (80056e4 <HAL_RCC_OscConfig+0x47c>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005516:	f7fe fd13 	bl	8003f40 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551e:	f7fe fd0f 	bl	8003f40 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e118      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005530:	4b6c      	ldr	r3, [pc, #432]	@ (80056e4 <HAL_RCC_OscConfig+0x47c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d106      	bne.n	8005552 <HAL_RCC_OscConfig+0x2ea>
 8005544:	4b66      	ldr	r3, [pc, #408]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005548:	4a65      	ldr	r2, [pc, #404]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005550:	e01c      	b.n	800558c <HAL_RCC_OscConfig+0x324>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b05      	cmp	r3, #5
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x30c>
 800555a:	4b61      	ldr	r3, [pc, #388]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	4a60      	ldr	r2, [pc, #384]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	6713      	str	r3, [r2, #112]	@ 0x70
 8005566:	4b5e      	ldr	r3, [pc, #376]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556a:	4a5d      	ldr	r2, [pc, #372]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6713      	str	r3, [r2, #112]	@ 0x70
 8005572:	e00b      	b.n	800558c <HAL_RCC_OscConfig+0x324>
 8005574:	4b5a      	ldr	r3, [pc, #360]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005578:	4a59      	ldr	r2, [pc, #356]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005580:	4b57      	ldr	r3, [pc, #348]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005584:	4a56      	ldr	r2, [pc, #344]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005586:	f023 0304 	bic.w	r3, r3, #4
 800558a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d015      	beq.n	80055c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fe fcd4 	bl	8003f40 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559a:	e00a      	b.n	80055b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fe fcd0 	bl	8003f40 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e0d7      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b2:	4b4b      	ldr	r3, [pc, #300]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ee      	beq.n	800559c <HAL_RCC_OscConfig+0x334>
 80055be:	e014      	b.n	80055ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c0:	f7fe fcbe 	bl	8003f40 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c6:	e00a      	b.n	80055de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c8:	f7fe fcba 	bl	8003f40 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e0c1      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055de:	4b40      	ldr	r3, [pc, #256]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1ee      	bne.n	80055c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f0:	4b3b      	ldr	r3, [pc, #236]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	4a3a      	ldr	r2, [pc, #232]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80055f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80ad 	beq.w	8005760 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005606:	4b36      	ldr	r3, [pc, #216]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 030c 	and.w	r3, r3, #12
 800560e:	2b08      	cmp	r3, #8
 8005610:	d060      	beq.n	80056d4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d145      	bne.n	80056a6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561a:	4b33      	ldr	r3, [pc, #204]	@ (80056e8 <HAL_RCC_OscConfig+0x480>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fe fc8e 	bl	8003f40 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005628:	f7fe fc8a 	bl	8003f40 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e093      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563a:	4b29      	ldr	r3, [pc, #164]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69da      	ldr	r2, [r3, #28]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005654:	019b      	lsls	r3, r3, #6
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	3b01      	subs	r3, #1
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	071b      	lsls	r3, r3, #28
 8005672:	491b      	ldr	r1, [pc, #108]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005678:	4b1b      	ldr	r3, [pc, #108]	@ (80056e8 <HAL_RCC_OscConfig+0x480>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fe fc5f 	bl	8003f40 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005686:	f7fe fc5b 	bl	8003f40 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e064      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005698:	4b11      	ldr	r3, [pc, #68]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x41e>
 80056a4:	e05c      	b.n	8005760 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a6:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <HAL_RCC_OscConfig+0x480>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fe fc48 	bl	8003f40 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fe fc44 	bl	8003f40 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e04d      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c6:	4b06      	ldr	r3, [pc, #24]	@ (80056e0 <HAL_RCC_OscConfig+0x478>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x44c>
 80056d2:	e045      	b.n	8005760 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e040      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ec:	4b1f      	ldr	r3, [pc, #124]	@ (800576c <HAL_RCC_OscConfig+0x504>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d030      	beq.n	800575c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d129      	bne.n	800575c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d122      	bne.n	800575c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005724:	4293      	cmp	r3, r2
 8005726:	d119      	bne.n	800575c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	3b01      	subs	r3, #1
 8005736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d10f      	bne.n	800575c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d107      	bne.n	800575c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800

08005770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e041      	b.n	8005806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fd fb24 	bl	8002de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 fcc0 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b01      	cmp	r3, #1
 8005822:	d001      	beq.n	8005828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e046      	b.n	80058b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a23      	ldr	r2, [pc, #140]	@ (80058c4 <HAL_TIM_Base_Start+0xb4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d022      	beq.n	8005880 <HAL_TIM_Base_Start+0x70>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005842:	d01d      	beq.n	8005880 <HAL_TIM_Base_Start+0x70>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1f      	ldr	r2, [pc, #124]	@ (80058c8 <HAL_TIM_Base_Start+0xb8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_TIM_Base_Start+0x70>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1e      	ldr	r2, [pc, #120]	@ (80058cc <HAL_TIM_Base_Start+0xbc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <HAL_TIM_Base_Start+0x70>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1c      	ldr	r2, [pc, #112]	@ (80058d0 <HAL_TIM_Base_Start+0xc0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_Base_Start+0x70>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1b      	ldr	r2, [pc, #108]	@ (80058d4 <HAL_TIM_Base_Start+0xc4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_TIM_Base_Start+0x70>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a19      	ldr	r2, [pc, #100]	@ (80058d8 <HAL_TIM_Base_Start+0xc8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_Base_Start+0x70>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <HAL_TIM_Base_Start+0xcc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d111      	bne.n	80058a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d010      	beq.n	80058b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	e007      	b.n	80058b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40010400 	.word	0x40010400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40001800 	.word	0x40001800

080058e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e04e      	b.n	8005996 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a23      	ldr	r2, [pc, #140]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d022      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005922:	d01d      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1f      	ldr	r2, [pc, #124]	@ (80059a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1e      	ldr	r2, [pc, #120]	@ (80059ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1c      	ldr	r2, [pc, #112]	@ (80059b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1b      	ldr	r2, [pc, #108]	@ (80059b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a19      	ldr	r2, [pc, #100]	@ (80059b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a18      	ldr	r2, [pc, #96]	@ (80059bc <HAL_TIM_Base_Start_IT+0xdc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d111      	bne.n	8005984 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b06      	cmp	r3, #6
 8005970:	d010      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	e007      	b.n	8005994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40010400 	.word	0x40010400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40001800 	.word	0x40001800

080059c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e041      	b.n	8005a56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fd f9dc 	bl	8002da4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 fb98 	bl	8006134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <HAL_TIM_PWM_Start+0x24>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	e022      	b.n	8005aca <HAL_TIM_PWM_Start+0x6a>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d109      	bne.n	8005a9e <HAL_TIM_PWM_Start+0x3e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	bf14      	ite	ne
 8005a96:	2301      	movne	r3, #1
 8005a98:	2300      	moveq	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	e015      	b.n	8005aca <HAL_TIM_PWM_Start+0x6a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d109      	bne.n	8005ab8 <HAL_TIM_PWM_Start+0x58>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e008      	b.n	8005aca <HAL_TIM_PWM_Start+0x6a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e07c      	b.n	8005bcc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0x82>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ae0:	e013      	b.n	8005b0a <HAL_TIM_PWM_Start+0xaa>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x92>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af0:	e00b      	b.n	8005b0a <HAL_TIM_PWM_Start+0xaa>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xa2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b00:	e003      	b.n	8005b0a <HAL_TIM_PWM_Start+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fe04 	bl	8006720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd4 <HAL_TIM_PWM_Start+0x174>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_TIM_PWM_Start+0xcc>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd8 <HAL_TIM_PWM_Start+0x178>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIM_PWM_Start+0xd0>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_TIM_PWM_Start+0xd2>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a22      	ldr	r2, [pc, #136]	@ (8005bd4 <HAL_TIM_PWM_Start+0x174>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b58:	d01d      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bdc <HAL_TIM_PWM_Start+0x17c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <HAL_TIM_PWM_Start+0x180>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <HAL_TIM_PWM_Start+0x184>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a16      	ldr	r2, [pc, #88]	@ (8005bd8 <HAL_TIM_PWM_Start+0x178>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <HAL_TIM_PWM_Start+0x188>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x136>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a16      	ldr	r2, [pc, #88]	@ (8005bec <HAL_TIM_PWM_Start+0x18c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d111      	bne.n	8005bba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d010      	beq.n	8005bca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb8:	e007      	b.n	8005bca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	40010400 	.word	0x40010400
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40014000 	.word	0x40014000
 8005bec:	40001800 	.word	0x40001800

08005bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0202 	mvn.w	r2, #2
 8005c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fa5b 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa4d 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fa5e 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d020      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01b      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0204 	mvn.w	r2, #4
 8005c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa35 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005c8c:	e005      	b.n	8005c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa27 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fa38 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d020      	beq.n	8005cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0208 	mvn.w	r2, #8
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa0f 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa01 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fa12 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d020      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01b      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0210 	mvn.w	r2, #16
 8005d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f9e9 	bl	80060f6 <HAL_TIM_IC_CaptureCallback>
 8005d24:	e005      	b.n	8005d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f9db 	bl	80060e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f9ec 	bl	800610a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00c      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0201 	mvn.w	r2, #1
 8005d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc fbf6 	bl	8002548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fd7c 	bl	8006878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9bd 	bl	800611e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0220 	mvn.w	r2, #32
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fd4e 	bl	8006864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e0ae      	b.n	8005f4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b0c      	cmp	r3, #12
 8005dfa:	f200 809f 	bhi.w	8005f3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e39 	.word	0x08005e39
 8005e08:	08005f3d 	.word	0x08005f3d
 8005e0c:	08005f3d 	.word	0x08005f3d
 8005e10:	08005f3d 	.word	0x08005f3d
 8005e14:	08005e79 	.word	0x08005e79
 8005e18:	08005f3d 	.word	0x08005f3d
 8005e1c:	08005f3d 	.word	0x08005f3d
 8005e20:	08005f3d 	.word	0x08005f3d
 8005e24:	08005ebb 	.word	0x08005ebb
 8005e28:	08005f3d 	.word	0x08005f3d
 8005e2c:	08005f3d 	.word	0x08005f3d
 8005e30:	08005f3d 	.word	0x08005f3d
 8005e34:	08005efb 	.word	0x08005efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fa24 	bl	800628c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0208 	orr.w	r2, r2, #8
 8005e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0204 	bic.w	r2, r2, #4
 8005e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6999      	ldr	r1, [r3, #24]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	619a      	str	r2, [r3, #24]
      break;
 8005e76:	e064      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fa74 	bl	800636c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6999      	ldr	r1, [r3, #24]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	619a      	str	r2, [r3, #24]
      break;
 8005eb8:	e043      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 fac9 	bl	8006458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f042 0208 	orr.w	r2, r2, #8
 8005ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0204 	bic.w	r2, r2, #4
 8005ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69d9      	ldr	r1, [r3, #28]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	61da      	str	r2, [r3, #28]
      break;
 8005ef8:	e023      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 fb1d 	bl	8006540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69d9      	ldr	r1, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	021a      	lsls	r2, r3, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	61da      	str	r2, [r3, #28]
      break;
 8005f3a:	e002      	b.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIM_ConfigClockSource+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e0b4      	b.n	80060da <HAL_TIM_ConfigClockSource+0x186>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fa8:	d03e      	beq.n	8006028 <HAL_TIM_ConfigClockSource+0xd4>
 8005faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fae:	f200 8087 	bhi.w	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb6:	f000 8086 	beq.w	80060c6 <HAL_TIM_ConfigClockSource+0x172>
 8005fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fbe:	d87f      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b70      	cmp	r3, #112	@ 0x70
 8005fc2:	d01a      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0xa6>
 8005fc4:	2b70      	cmp	r3, #112	@ 0x70
 8005fc6:	d87b      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc8:	2b60      	cmp	r3, #96	@ 0x60
 8005fca:	d050      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x11a>
 8005fcc:	2b60      	cmp	r3, #96	@ 0x60
 8005fce:	d877      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd0:	2b50      	cmp	r3, #80	@ 0x50
 8005fd2:	d03c      	beq.n	800604e <HAL_TIM_ConfigClockSource+0xfa>
 8005fd4:	2b50      	cmp	r3, #80	@ 0x50
 8005fd6:	d873      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd8:	2b40      	cmp	r3, #64	@ 0x40
 8005fda:	d058      	beq.n	800608e <HAL_TIM_ConfigClockSource+0x13a>
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	d86f      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe0:	2b30      	cmp	r3, #48	@ 0x30
 8005fe2:	d064      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005fe4:	2b30      	cmp	r3, #48	@ 0x30
 8005fe6:	d86b      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d060      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d867      	bhi.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d05c      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d05a      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	e062      	b.n	80060c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800600a:	f000 fb69 	bl	80066e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800601c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	609a      	str	r2, [r3, #8]
      break;
 8006026:	e04f      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006038:	f000 fb52 	bl	80066e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800604a:	609a      	str	r2, [r3, #8]
      break;
 800604c:	e03c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	461a      	mov	r2, r3
 800605c:	f000 fac6 	bl	80065ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2150      	movs	r1, #80	@ 0x50
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fb1f 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 800606c:	e02c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800607a:	461a      	mov	r2, r3
 800607c:	f000 fae5 	bl	800664a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2160      	movs	r1, #96	@ 0x60
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fb0f 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 800608c:	e01c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	461a      	mov	r2, r3
 800609c:	f000 faa6 	bl	80065ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2140      	movs	r1, #64	@ 0x40
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 faff 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 80060ac:	e00c      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f000 faf6 	bl	80066aa <TIM_ITRx_SetConfig>
      break;
 80060be:	e003      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	73fb      	strb	r3, [r7, #15]
      break;
 80060c4:	e000      	b.n	80060c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a46      	ldr	r2, [pc, #280]	@ (8006260 <TIM_Base_SetConfig+0x12c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d013      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006152:	d00f      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a43      	ldr	r2, [pc, #268]	@ (8006264 <TIM_Base_SetConfig+0x130>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a42      	ldr	r2, [pc, #264]	@ (8006268 <TIM_Base_SetConfig+0x134>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a41      	ldr	r2, [pc, #260]	@ (800626c <TIM_Base_SetConfig+0x138>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a40      	ldr	r2, [pc, #256]	@ (8006270 <TIM_Base_SetConfig+0x13c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d108      	bne.n	8006186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a35      	ldr	r2, [pc, #212]	@ (8006260 <TIM_Base_SetConfig+0x12c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d02b      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006194:	d027      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a32      	ldr	r2, [pc, #200]	@ (8006264 <TIM_Base_SetConfig+0x130>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d023      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a31      	ldr	r2, [pc, #196]	@ (8006268 <TIM_Base_SetConfig+0x134>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01f      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a30      	ldr	r2, [pc, #192]	@ (800626c <TIM_Base_SetConfig+0x138>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d01b      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006270 <TIM_Base_SetConfig+0x13c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d017      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a2e      	ldr	r2, [pc, #184]	@ (8006274 <TIM_Base_SetConfig+0x140>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006278 <TIM_Base_SetConfig+0x144>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d00f      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2c      	ldr	r2, [pc, #176]	@ (800627c <TIM_Base_SetConfig+0x148>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006280 <TIM_Base_SetConfig+0x14c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006284 <TIM_Base_SetConfig+0x150>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a29      	ldr	r2, [pc, #164]	@ (8006288 <TIM_Base_SetConfig+0x154>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d108      	bne.n	80061f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a10      	ldr	r2, [pc, #64]	@ (8006260 <TIM_Base_SetConfig+0x12c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_Base_SetConfig+0xf8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a12      	ldr	r2, [pc, #72]	@ (8006270 <TIM_Base_SetConfig+0x13c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d103      	bne.n	8006234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b01      	cmp	r3, #1
 8006244:	d105      	bne.n	8006252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f023 0201 	bic.w	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	611a      	str	r2, [r3, #16]
  }
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40010000 	.word	0x40010000
 8006264:	40000400 	.word	0x40000400
 8006268:	40000800 	.word	0x40000800
 800626c:	40000c00 	.word	0x40000c00
 8006270:	40010400 	.word	0x40010400
 8006274:	40014000 	.word	0x40014000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800
 8006280:	40001800 	.word	0x40001800
 8006284:	40001c00 	.word	0x40001c00
 8006288:	40002000 	.word	0x40002000

0800628c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f023 0201 	bic.w	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f023 0302 	bic.w	r3, r3, #2
 80062d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a20      	ldr	r2, [pc, #128]	@ (8006364 <TIM_OC1_SetConfig+0xd8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC1_SetConfig+0x64>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006368 <TIM_OC1_SetConfig+0xdc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10c      	bne.n	800630a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f023 0308 	bic.w	r3, r3, #8
 80062f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f023 0304 	bic.w	r3, r3, #4
 8006308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a15      	ldr	r2, [pc, #84]	@ (8006364 <TIM_OC1_SetConfig+0xd8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC1_SetConfig+0x8e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a14      	ldr	r2, [pc, #80]	@ (8006368 <TIM_OC1_SetConfig+0xdc>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d111      	bne.n	800633e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4313      	orrs	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	621a      	str	r2, [r3, #32]
}
 8006358:	bf00      	nop
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	40010000 	.word	0x40010000
 8006368:	40010400 	.word	0x40010400

0800636c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f023 0210 	bic.w	r2, r3, #16
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800639a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f023 0320 	bic.w	r3, r3, #32
 80063b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	011b      	lsls	r3, r3, #4
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a22      	ldr	r2, [pc, #136]	@ (8006450 <TIM_OC2_SetConfig+0xe4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_OC2_SetConfig+0x68>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a21      	ldr	r2, [pc, #132]	@ (8006454 <TIM_OC2_SetConfig+0xe8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d10d      	bne.n	80063f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a17      	ldr	r2, [pc, #92]	@ (8006450 <TIM_OC2_SetConfig+0xe4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC2_SetConfig+0x94>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a16      	ldr	r2, [pc, #88]	@ (8006454 <TIM_OC2_SetConfig+0xe8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d113      	bne.n	8006428 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40010400 	.word	0x40010400

08006458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a21      	ldr	r2, [pc, #132]	@ (8006538 <TIM_OC3_SetConfig+0xe0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_OC3_SetConfig+0x66>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a20      	ldr	r2, [pc, #128]	@ (800653c <TIM_OC3_SetConfig+0xe4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d10d      	bne.n	80064da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <TIM_OC3_SetConfig+0xe0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <TIM_OC3_SetConfig+0x92>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a15      	ldr	r2, [pc, #84]	@ (800653c <TIM_OC3_SetConfig+0xe4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d113      	bne.n	8006512 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	621a      	str	r2, [r3, #32]
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400

08006540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800656e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800658a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	031b      	lsls	r3, r3, #12
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a12      	ldr	r2, [pc, #72]	@ (80065e4 <TIM_OC4_SetConfig+0xa4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_OC4_SetConfig+0x68>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a11      	ldr	r2, [pc, #68]	@ (80065e8 <TIM_OC4_SetConfig+0xa8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d109      	bne.n	80065bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	019b      	lsls	r3, r3, #6
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	40010000 	.word	0x40010000
 80065e8:	40010400 	.word	0x40010400

080065ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f023 0201 	bic.w	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f023 030a 	bic.w	r3, r3, #10
 8006628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800664a:	b480      	push	{r7}
 800664c:	b087      	sub	sp, #28
 800664e:	af00      	add	r7, sp, #0
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f023 0210 	bic.w	r2, r3, #16
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	031b      	lsls	r3, r3, #12
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006686:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f043 0307 	orr.w	r3, r3, #7
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	431a      	orrs	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4313      	orrs	r3, r2
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2201      	movs	r2, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a1a      	ldr	r2, [r3, #32]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	43db      	mvns	r3, r3
 8006742:	401a      	ands	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a1a      	ldr	r2, [r3, #32]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	fa01 f303 	lsl.w	r3, r1, r3
 8006758:	431a      	orrs	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006780:	2302      	movs	r3, #2
 8006782:	e05a      	b.n	800683a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a21      	ldr	r2, [pc, #132]	@ (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d022      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d0:	d01d      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1d      	ldr	r2, [pc, #116]	@ (800684c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1a      	ldr	r2, [pc, #104]	@ (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a17      	ldr	r2, [pc, #92]	@ (800685c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d10c      	bne.n	8006828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4313      	orrs	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40010000 	.word	0x40010000
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40010400 	.word	0x40010400
 800685c:	40014000 	.word	0x40014000
 8006860:	40001800 	.word	0x40001800

08006864 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e042      	b.n	8006924 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fc fb80 	bl	8002fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2224      	movs	r2, #36	@ 0x24
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 ffc9 	bl	8007868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006904:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08c      	sub	sp, #48	@ 0x30
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4613      	mov	r3, r2
 8006938:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b20      	cmp	r3, #32
 8006944:	d156      	bne.n	80069f4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <HAL_UART_Transmit_DMA+0x26>
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e04f      	b.n	80069f6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	88fa      	ldrh	r2, [r7, #6]
 8006966:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2221      	movs	r2, #33	@ 0x21
 8006972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	4a21      	ldr	r2, [pc, #132]	@ (8006a00 <HAL_UART_Transmit_DMA+0xd4>)
 800697c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	4a20      	ldr	r2, [pc, #128]	@ (8006a04 <HAL_UART_Transmit_DMA+0xd8>)
 8006984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698a:	4a1f      	ldr	r2, [pc, #124]	@ (8006a08 <HAL_UART_Transmit_DMA+0xdc>)
 800698c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	2200      	movs	r2, #0
 8006994:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006996:	f107 0308 	add.w	r3, r7, #8
 800699a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80069a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3304      	adds	r3, #4
 80069aa:	461a      	mov	r2, r3
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	f7fd fc63 	bl	8004278 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3314      	adds	r3, #20
 80069c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	617b      	str	r3, [r7, #20]
   return(result);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80069de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6a39      	ldr	r1, [r7, #32]
 80069e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e5      	bne.n	80069bc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	e000      	b.n	80069f6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80069f4:	2302      	movs	r3, #2
  }
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3730      	adds	r7, #48	@ 0x30
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	080070f5 	.word	0x080070f5
 8006a04:	0800718f 	.word	0x0800718f
 8006a08:	08007313 	.word	0x08007313

08006a0c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	4613      	mov	r3, r2
 8006a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b20      	cmp	r3, #32
 8006a24:	d112      	bne.n	8006a4c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <HAL_UART_Receive_DMA+0x26>
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e00b      	b.n	8006a4e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fcb0 	bl	80073a8 <UART_Start_Receive_DMA>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	e000      	b.n	8006a4e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a4c:	2302      	movs	r3, #2
  }
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b090      	sub	sp, #64	@ 0x40
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a6c:	2b80      	cmp	r3, #128	@ 0x80
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b21      	cmp	r3, #33	@ 0x21
 8006a82:	d128      	bne.n	8006ad6 <HAL_UART_DMAStop+0x80>
 8006a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d025      	beq.n	8006ad6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd fc2c 	bl	8004328 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fd03 	bl	80074dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2301      	moveq	r3, #1
 8006ae6:	2300      	movne	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b22      	cmp	r3, #34	@ 0x22
 8006af6:	d128      	bne.n	8006b4a <HAL_UART_DMAStop+0xf4>
 8006af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d025      	beq.n	8006b4a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3314      	adds	r3, #20
 8006b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b1e:	61fa      	str	r2, [r7, #28]
 8006b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	69b9      	ldr	r1, [r7, #24]
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d004      	beq.n	8006b44 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fd fbf2 	bl	8004328 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fcf1 	bl	800752c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3740      	adds	r7, #64	@ 0x40
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b0ba      	sub	sp, #232	@ 0xe8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10f      	bne.n	8006bba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_UART_IRQHandler+0x66>
 8006ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fd99 	bl	80076ea <UART_Receive_IT>
      return;
 8006bb8:	e25b      	b.n	8007072 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80de 	beq.w	8006d80 <HAL_UART_IRQHandler+0x22c>
 8006bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 80d1 	beq.w	8006d80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00b      	beq.n	8006c02 <HAL_UART_IRQHandler+0xae>
 8006bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfa:	f043 0201 	orr.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <HAL_UART_IRQHandler+0xd2>
 8006c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1e:	f043 0202 	orr.w	r2, r3, #2
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <HAL_UART_IRQHandler+0xf6>
 8006c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c42:	f043 0204 	orr.w	r2, r3, #4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d011      	beq.n	8006c7a <HAL_UART_IRQHandler+0x126>
 8006c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d105      	bne.n	8006c6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c72:	f043 0208 	orr.w	r2, r3, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 81f2 	beq.w	8007068 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x14e>
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fd24 	bl	80076ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b40      	cmp	r3, #64	@ 0x40
 8006cae:	bf0c      	ite	eq
 8006cb0:	2301      	moveq	r3, #1
 8006cb2:	2300      	movne	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <HAL_UART_IRQHandler+0x17a>
 8006cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d04f      	beq.n	8006d6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fc2c 	bl	800752c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cde:	2b40      	cmp	r3, #64	@ 0x40
 8006ce0:	d141      	bne.n	8006d66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3314      	adds	r3, #20
 8006d0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1d9      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d013      	beq.n	8006d5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006f34 <HAL_UART_IRQHandler+0x3e0>)
 8006d3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fd fb60 	bl	8004408 <HAL_DMA_Abort_IT>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d016      	beq.n	8006d7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5c:	e00e      	b.n	8006d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f9b2 	bl	80070c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d64:	e00a      	b.n	8006d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9ae 	bl	80070c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6c:	e006      	b.n	8006d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9aa 	bl	80070c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006d7a:	e175      	b.n	8007068 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7c:	bf00      	nop
    return;
 8006d7e:	e173      	b.n	8007068 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	f040 814f 	bne.w	8007028 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8e:	f003 0310 	and.w	r3, r3, #16
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 8148 	beq.w	8007028 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8141 	beq.w	8007028 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60bb      	str	r3, [r7, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	60bb      	str	r3, [r7, #8]
 8006dba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc6:	2b40      	cmp	r3, #64	@ 0x40
 8006dc8:	f040 80b6 	bne.w	8006f38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8145 	beq.w	800706c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dea:	429a      	cmp	r2, r3
 8006dec:	f080 813e 	bcs.w	800706c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006df6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e02:	f000 8088 	beq.w	8006f16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	330c      	adds	r3, #12
 8006e2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1d9      	bne.n	8006e06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3314      	adds	r3, #20
 8006e58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e1      	bne.n	8006e52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3314      	adds	r3, #20
 8006e94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006eb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006eb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e3      	bne.n	8006e8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2220      	movs	r2, #32
 8006eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ee6:	f023 0310 	bic.w	r3, r3, #16
 8006eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006ef8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006efa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006efe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e3      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fd fa09 	bl	8004328 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f8d5 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f32:	e09b      	b.n	800706c <HAL_UART_IRQHandler+0x518>
 8006f34:	080075f3 	.word	0x080075f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 808e 	beq.w	8007070 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 8089 	beq.w	8007070 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f82:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e3      	bne.n	8006f5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3314      	adds	r3, #20
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fba:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e3      	bne.n	8006f96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	330c      	adds	r3, #12
 8006fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0310 	bic.w	r3, r3, #16
 8006ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007000:	61fa      	str	r2, [r7, #28]
 8007002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	69b9      	ldr	r1, [r7, #24]
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	617b      	str	r3, [r7, #20]
   return(result);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e3      	bne.n	8006fdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800701a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f85b 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007026:	e023      	b.n	8007070 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <HAL_UART_IRQHandler+0x4f4>
 8007034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 faea 	bl	800761a <UART_Transmit_IT>
    return;
 8007046:	e014      	b.n	8007072 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800704c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00e      	beq.n	8007072 <HAL_UART_IRQHandler+0x51e>
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d008      	beq.n	8007072 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fb2a 	bl	80076ba <UART_EndTransmit_IT>
    return;
 8007066:	e004      	b.n	8007072 <HAL_UART_IRQHandler+0x51e>
    return;
 8007068:	bf00      	nop
 800706a:	e002      	b.n	8007072 <HAL_UART_IRQHandler+0x51e>
      return;
 800706c:	bf00      	nop
 800706e:	e000      	b.n	8007072 <HAL_UART_IRQHandler+0x51e>
      return;
 8007070:	bf00      	nop
  }
}
 8007072:	37e8      	adds	r7, #232	@ 0xe8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b090      	sub	sp, #64	@ 0x40
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800710c:	2b00      	cmp	r3, #0
 800710e:	d137      	bne.n	8007180 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007112:	2200      	movs	r2, #0
 8007114:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3314      	adds	r3, #20
 800711c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	623b      	str	r3, [r7, #32]
   return(result);
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800712c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800712e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3314      	adds	r3, #20
 8007134:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007136:	633a      	str	r2, [r7, #48]	@ 0x30
 8007138:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800713c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	60fb      	str	r3, [r7, #12]
   return(result);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007160:	637b      	str	r3, [r7, #52]	@ 0x34
 8007162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800716a:	61fa      	str	r2, [r7, #28]
 800716c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	69b9      	ldr	r1, [r7, #24]
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	617b      	str	r3, [r7, #20]
   return(result);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e5      	bne.n	800714a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800717e:	e002      	b.n	8007186 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007180:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007182:	f7ff ff79 	bl	8007078 <HAL_UART_TxCpltCallback>
}
 8007186:	bf00      	nop
 8007188:	3740      	adds	r7, #64	@ 0x40
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff ff75 	bl	800708c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b09c      	sub	sp, #112	@ 0x70
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d172      	bne.n	80072ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80071c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c8:	2200      	movs	r2, #0
 80071ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	330c      	adds	r3, #12
 80071d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	330c      	adds	r3, #12
 80071ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80071ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80071ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e5      	bne.n	80071cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3314      	adds	r3, #20
 8007206:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	667b      	str	r3, [r7, #100]	@ 0x64
 8007218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3314      	adds	r3, #20
 800721e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007220:	647a      	str	r2, [r7, #68]	@ 0x44
 8007222:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800722e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3314      	adds	r3, #20
 800723a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	623b      	str	r3, [r7, #32]
   return(result);
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800724a:	663b      	str	r3, [r7, #96]	@ 0x60
 800724c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3314      	adds	r3, #20
 8007252:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007254:	633a      	str	r2, [r7, #48]	@ 0x30
 8007256:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800725a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e5      	bne.n	8007234 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800726a:	2220      	movs	r2, #32
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007274:	2b01      	cmp	r3, #1
 8007276:	d119      	bne.n	80072ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	60fb      	str	r3, [r7, #12]
   return(result);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0310 	bic.w	r3, r3, #16
 800728e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007298:	61fa      	str	r2, [r7, #28]
 800729a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	69b9      	ldr	r1, [r7, #24]
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	617b      	str	r3, [r7, #20]
   return(result);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ae:	2200      	movs	r2, #0
 80072b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d106      	bne.n	80072c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072be:	4619      	mov	r1, r3
 80072c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80072c2:	f7ff ff0b 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072c6:	e002      	b.n	80072ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80072c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80072ca:	f7ff fee9 	bl	80070a0 <HAL_UART_RxCpltCallback>
}
 80072ce:	bf00      	nop
 80072d0:	3770      	adds	r7, #112	@ 0x70
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d108      	bne.n	8007304 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	4619      	mov	r1, r3
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff feed 	bl	80070dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007302:	e002      	b.n	800730a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff fed5 	bl	80070b4 <HAL_UART_RxHalfCpltCallback>
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732e:	2b80      	cmp	r3, #128	@ 0x80
 8007330:	bf0c      	ite	eq
 8007332:	2301      	moveq	r3, #1
 8007334:	2300      	movne	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b21      	cmp	r3, #33	@ 0x21
 8007344:	d108      	bne.n	8007358 <UART_DMAError+0x46>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2200      	movs	r2, #0
 8007350:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007352:	68b8      	ldr	r0, [r7, #8]
 8007354:	f000 f8c2 	bl	80074dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007362:	2b40      	cmp	r3, #64	@ 0x40
 8007364:	bf0c      	ite	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	2300      	movne	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b22      	cmp	r3, #34	@ 0x22
 8007378:	d108      	bne.n	800738c <UART_DMAError+0x7a>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007386:	68b8      	ldr	r0, [r7, #8]
 8007388:	f000 f8d0 	bl	800752c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007390:	f043 0210 	orr.w	r2, r3, #16
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007398:	68b8      	ldr	r0, [r7, #8]
 800739a:	f7ff fe95 	bl	80070c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b098      	sub	sp, #96	@ 0x60
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	88fa      	ldrh	r2, [r7, #6]
 80073c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2222      	movs	r2, #34	@ 0x22
 80073cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	4a3e      	ldr	r2, [pc, #248]	@ (80074d0 <UART_Start_Receive_DMA+0x128>)
 80073d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073dc:	4a3d      	ldr	r2, [pc, #244]	@ (80074d4 <UART_Start_Receive_DMA+0x12c>)
 80073de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e4:	4a3c      	ldr	r2, [pc, #240]	@ (80074d8 <UART_Start_Receive_DMA+0x130>)
 80073e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ec:	2200      	movs	r2, #0
 80073ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3304      	adds	r3, #4
 8007400:	4619      	mov	r1, r3
 8007402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	f7fc ff36 	bl	8004278 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800740c:	2300      	movs	r3, #0
 800740e:	613b      	str	r3, [r7, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d019      	beq.n	800745e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	330c      	adds	r3, #12
 8007430:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800743a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007440:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800744a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800744c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e5      	bne.n	800742a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3314      	adds	r3, #20
 8007464:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	f043 0301 	orr.w	r3, r3, #1
 8007474:	657b      	str	r3, [r7, #84]	@ 0x54
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3314      	adds	r3, #20
 800747c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800747e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007482:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e5      	bne.n	800745e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3314      	adds	r3, #20
 8007498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	617b      	str	r3, [r7, #20]
   return(result);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80074b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6a39      	ldr	r1, [r7, #32]
 80074b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	61fb      	str	r3, [r7, #28]
   return(result);
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e5      	bne.n	8007492 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3760      	adds	r7, #96	@ 0x60
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	080071ab 	.word	0x080071ab
 80074d4:	080072d7 	.word	0x080072d7
 80074d8:	08007313 	.word	0x08007313

080074dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	@ 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	61ba      	str	r2, [r7, #24]
 8007506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6979      	ldr	r1, [r7, #20]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	613b      	str	r3, [r7, #16]
   return(result);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e5      	bne.n	80074e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007520:	bf00      	nop
 8007522:	3724      	adds	r7, #36	@ 0x24
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b095      	sub	sp, #84	@ 0x54
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	330c      	adds	r3, #12
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800754a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	330c      	adds	r3, #12
 8007552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007554:	643a      	str	r2, [r7, #64]	@ 0x40
 8007556:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800755a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	61fb      	str	r3, [r7, #28]
   return(result);
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3314      	adds	r3, #20
 8007586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800758a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800758e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007590:	e841 2300 	strex	r3, r2, [r1]
 8007594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1e5      	bne.n	8007568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d119      	bne.n	80075d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 0310 	bic.w	r3, r3, #16
 80075ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075c4:	61ba      	str	r2, [r7, #24]
 80075c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6979      	ldr	r1, [r7, #20]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	613b      	str	r3, [r7, #16]
   return(result);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e5      	bne.n	80075a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80075e6:	bf00      	nop
 80075e8:	3754      	adds	r7, #84	@ 0x54
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7ff fd5b 	bl	80070c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b21      	cmp	r3, #33	@ 0x21
 800762c:	d13e      	bne.n	80076ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007636:	d114      	bne.n	8007662 <UART_Transmit_IT+0x48>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d110      	bne.n	8007662 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007654:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]
 8007660:	e008      	b.n	8007674 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6211      	str	r1, [r2, #32]
 800766c:	781a      	ldrb	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29b      	uxth	r3, r3
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	4619      	mov	r1, r3
 8007682:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10f      	bne.n	80076a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007696:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fccc 	bl	8007078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b08c      	sub	sp, #48	@ 0x30
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b22      	cmp	r3, #34	@ 0x22
 80076fc:	f040 80ae 	bne.w	800785c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007708:	d117      	bne.n	800773a <UART_Receive_IT+0x50>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d113      	bne.n	800773a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007728:	b29a      	uxth	r2, r3
 800772a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28
 8007738:	e026      	b.n	8007788 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800774c:	d007      	beq.n	800775e <UART_Receive_IT+0x74>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10a      	bne.n	800776c <UART_Receive_IT+0x82>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007768:	701a      	strb	r2, [r3, #0]
 800776a:	e008      	b.n	800777e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007778:	b2da      	uxtb	r2, r3
 800777a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29b      	uxth	r3, r3
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	4619      	mov	r1, r3
 8007796:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007798:	2b00      	cmp	r3, #0
 800779a:	d15d      	bne.n	8007858 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0220 	bic.w	r2, r2, #32
 80077aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695a      	ldr	r2, [r3, #20]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0201 	bic.w	r2, r2, #1
 80077ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d135      	bne.n	800784e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	613b      	str	r3, [r7, #16]
   return(result);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f023 0310 	bic.w	r3, r3, #16
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007808:	623a      	str	r2, [r7, #32]
 800780a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	69f9      	ldr	r1, [r7, #28]
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	61bb      	str	r3, [r7, #24]
   return(result);
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e5      	bne.n	80077e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0310 	and.w	r3, r3, #16
 8007826:	2b10      	cmp	r3, #16
 8007828:	d10a      	bne.n	8007840 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff fc48 	bl	80070dc <HAL_UARTEx_RxEventCallback>
 800784c:	e002      	b.n	8007854 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff fc26 	bl	80070a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	e002      	b.n	800785e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007858:	2300      	movs	r3, #0
 800785a:	e000      	b.n	800785e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800785c:	2302      	movs	r3, #2
  }
}
 800785e:	4618      	mov	r0, r3
 8007860:	3730      	adds	r7, #48	@ 0x30
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800786c:	b0c0      	sub	sp, #256	@ 0x100
 800786e:	af00      	add	r7, sp, #0
 8007870:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007884:	68d9      	ldr	r1, [r3, #12]
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	ea40 0301 	orr.w	r3, r0, r1
 8007890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	431a      	orrs	r2, r3
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	431a      	orrs	r2, r3
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078c0:	f021 010c 	bic.w	r1, r1, #12
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078ce:	430b      	orrs	r3, r1
 80078d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e2:	6999      	ldr	r1, [r3, #24]
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	ea40 0301 	orr.w	r3, r0, r1
 80078ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4b8f      	ldr	r3, [pc, #572]	@ (8007b34 <UART_SetConfig+0x2cc>)
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d005      	beq.n	8007908 <UART_SetConfig+0xa0>
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4b8d      	ldr	r3, [pc, #564]	@ (8007b38 <UART_SetConfig+0x2d0>)
 8007904:	429a      	cmp	r2, r3
 8007906:	d104      	bne.n	8007912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007908:	f7fd fc68 	bl	80051dc <HAL_RCC_GetPCLK2Freq>
 800790c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007910:	e003      	b.n	800791a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007912:	f7fd fc4f 	bl	80051b4 <HAL_RCC_GetPCLK1Freq>
 8007916:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007924:	f040 810c 	bne.w	8007b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800792c:	2200      	movs	r2, #0
 800792e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007932:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800793a:	4622      	mov	r2, r4
 800793c:	462b      	mov	r3, r5
 800793e:	1891      	adds	r1, r2, r2
 8007940:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007942:	415b      	adcs	r3, r3
 8007944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800794a:	4621      	mov	r1, r4
 800794c:	eb12 0801 	adds.w	r8, r2, r1
 8007950:	4629      	mov	r1, r5
 8007952:	eb43 0901 	adc.w	r9, r3, r1
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f04f 0300 	mov.w	r3, #0
 800795e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800796a:	4690      	mov	r8, r2
 800796c:	4699      	mov	r9, r3
 800796e:	4623      	mov	r3, r4
 8007970:	eb18 0303 	adds.w	r3, r8, r3
 8007974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007978:	462b      	mov	r3, r5
 800797a:	eb49 0303 	adc.w	r3, r9, r3
 800797e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800798e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007996:	460b      	mov	r3, r1
 8007998:	18db      	adds	r3, r3, r3
 800799a:	653b      	str	r3, [r7, #80]	@ 0x50
 800799c:	4613      	mov	r3, r2
 800799e:	eb42 0303 	adc.w	r3, r2, r3
 80079a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80079a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079ac:	f7f9 f986 	bl	8000cbc <__aeabi_uldivmod>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4b61      	ldr	r3, [pc, #388]	@ (8007b3c <UART_SetConfig+0x2d4>)
 80079b6:	fba3 2302 	umull	r2, r3, r3, r2
 80079ba:	095b      	lsrs	r3, r3, #5
 80079bc:	011c      	lsls	r4, r3, #4
 80079be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079d0:	4642      	mov	r2, r8
 80079d2:	464b      	mov	r3, r9
 80079d4:	1891      	adds	r1, r2, r2
 80079d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079d8:	415b      	adcs	r3, r3
 80079da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079e0:	4641      	mov	r1, r8
 80079e2:	eb12 0a01 	adds.w	sl, r2, r1
 80079e6:	4649      	mov	r1, r9
 80079e8:	eb43 0b01 	adc.w	fp, r3, r1
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a00:	4692      	mov	sl, r2
 8007a02:	469b      	mov	fp, r3
 8007a04:	4643      	mov	r3, r8
 8007a06:	eb1a 0303 	adds.w	r3, sl, r3
 8007a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	eb4b 0303 	adc.w	r3, fp, r3
 8007a14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	18db      	adds	r3, r3, r3
 8007a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a32:	4613      	mov	r3, r2
 8007a34:	eb42 0303 	adc.w	r3, r2, r3
 8007a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a42:	f7f9 f93b 	bl	8000cbc <__aeabi_uldivmod>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b3c <UART_SetConfig+0x2d4>)
 8007a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	2264      	movs	r2, #100	@ 0x64
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	1acb      	subs	r3, r1, r3
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a62:	4b36      	ldr	r3, [pc, #216]	@ (8007b3c <UART_SetConfig+0x2d4>)
 8007a64:	fba3 2302 	umull	r2, r3, r3, r2
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a70:	441c      	add	r4, r3
 8007a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a76:	2200      	movs	r2, #0
 8007a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a84:	4642      	mov	r2, r8
 8007a86:	464b      	mov	r3, r9
 8007a88:	1891      	adds	r1, r2, r2
 8007a8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a8c:	415b      	adcs	r3, r3
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a94:	4641      	mov	r1, r8
 8007a96:	1851      	adds	r1, r2, r1
 8007a98:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	414b      	adcs	r3, r1
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007aac:	4659      	mov	r1, fp
 8007aae:	00cb      	lsls	r3, r1, #3
 8007ab0:	4651      	mov	r1, sl
 8007ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	00ca      	lsls	r2, r1, #3
 8007aba:	4610      	mov	r0, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	189b      	adds	r3, r3, r2
 8007ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ac8:	464b      	mov	r3, r9
 8007aca:	460a      	mov	r2, r1
 8007acc:	eb42 0303 	adc.w	r3, r2, r3
 8007ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ae8:	460b      	mov	r3, r1
 8007aea:	18db      	adds	r3, r3, r3
 8007aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aee:	4613      	mov	r3, r2
 8007af0:	eb42 0303 	adc.w	r3, r2, r3
 8007af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007afe:	f7f9 f8dd 	bl	8000cbc <__aeabi_uldivmod>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4b0d      	ldr	r3, [pc, #52]	@ (8007b3c <UART_SetConfig+0x2d4>)
 8007b08:	fba3 1302 	umull	r1, r3, r3, r2
 8007b0c:	095b      	lsrs	r3, r3, #5
 8007b0e:	2164      	movs	r1, #100	@ 0x64
 8007b10:	fb01 f303 	mul.w	r3, r1, r3
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	3332      	adds	r3, #50	@ 0x32
 8007b1a:	4a08      	ldr	r2, [pc, #32]	@ (8007b3c <UART_SetConfig+0x2d4>)
 8007b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	f003 0207 	and.w	r2, r3, #7
 8007b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4422      	add	r2, r4
 8007b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b30:	e106      	b.n	8007d40 <UART_SetConfig+0x4d8>
 8007b32:	bf00      	nop
 8007b34:	40011000 	.word	0x40011000
 8007b38:	40011400 	.word	0x40011400
 8007b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b52:	4642      	mov	r2, r8
 8007b54:	464b      	mov	r3, r9
 8007b56:	1891      	adds	r1, r2, r2
 8007b58:	6239      	str	r1, [r7, #32]
 8007b5a:	415b      	adcs	r3, r3
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b62:	4641      	mov	r1, r8
 8007b64:	1854      	adds	r4, r2, r1
 8007b66:	4649      	mov	r1, r9
 8007b68:	eb43 0501 	adc.w	r5, r3, r1
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	00eb      	lsls	r3, r5, #3
 8007b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b7a:	00e2      	lsls	r2, r4, #3
 8007b7c:	4614      	mov	r4, r2
 8007b7e:	461d      	mov	r5, r3
 8007b80:	4643      	mov	r3, r8
 8007b82:	18e3      	adds	r3, r4, r3
 8007b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b88:	464b      	mov	r3, r9
 8007b8a:	eb45 0303 	adc.w	r3, r5, r3
 8007b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ba2:	f04f 0200 	mov.w	r2, #0
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bae:	4629      	mov	r1, r5
 8007bb0:	008b      	lsls	r3, r1, #2
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bb8:	4621      	mov	r1, r4
 8007bba:	008a      	lsls	r2, r1, #2
 8007bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007bc0:	f7f9 f87c 	bl	8000cbc <__aeabi_uldivmod>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4b60      	ldr	r3, [pc, #384]	@ (8007d4c <UART_SetConfig+0x4e4>)
 8007bca:	fba3 2302 	umull	r2, r3, r3, r2
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	011c      	lsls	r4, r3, #4
 8007bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007be4:	4642      	mov	r2, r8
 8007be6:	464b      	mov	r3, r9
 8007be8:	1891      	adds	r1, r2, r2
 8007bea:	61b9      	str	r1, [r7, #24]
 8007bec:	415b      	adcs	r3, r3
 8007bee:	61fb      	str	r3, [r7, #28]
 8007bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	1851      	adds	r1, r2, r1
 8007bf8:	6139      	str	r1, [r7, #16]
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	414b      	adcs	r3, r1
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	f04f 0300 	mov.w	r3, #0
 8007c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c0c:	4659      	mov	r1, fp
 8007c0e:	00cb      	lsls	r3, r1, #3
 8007c10:	4651      	mov	r1, sl
 8007c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c16:	4651      	mov	r1, sl
 8007c18:	00ca      	lsls	r2, r1, #3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	4642      	mov	r2, r8
 8007c22:	189b      	adds	r3, r3, r2
 8007c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c28:	464b      	mov	r3, r9
 8007c2a:	460a      	mov	r2, r1
 8007c2c:	eb42 0303 	adc.w	r3, r2, r3
 8007c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	008b      	lsls	r3, r1, #2
 8007c50:	4641      	mov	r1, r8
 8007c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c56:	4641      	mov	r1, r8
 8007c58:	008a      	lsls	r2, r1, #2
 8007c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c5e:	f7f9 f82d 	bl	8000cbc <__aeabi_uldivmod>
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	4b38      	ldr	r3, [pc, #224]	@ (8007d4c <UART_SetConfig+0x4e4>)
 8007c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	2264      	movs	r2, #100	@ 0x64
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	1acb      	subs	r3, r1, r3
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	3332      	adds	r3, #50	@ 0x32
 8007c7c:	4a33      	ldr	r2, [pc, #204]	@ (8007d4c <UART_SetConfig+0x4e4>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c88:	441c      	add	r4, r3
 8007c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c8e:	2200      	movs	r2, #0
 8007c90:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c92:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c98:	4642      	mov	r2, r8
 8007c9a:	464b      	mov	r3, r9
 8007c9c:	1891      	adds	r1, r2, r2
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	415b      	adcs	r3, r3
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ca8:	4641      	mov	r1, r8
 8007caa:	1851      	adds	r1, r2, r1
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	4649      	mov	r1, r9
 8007cb0:	414b      	adcs	r3, r1
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cc0:	4659      	mov	r1, fp
 8007cc2:	00cb      	lsls	r3, r1, #3
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cca:	4651      	mov	r1, sl
 8007ccc:	00ca      	lsls	r2, r1, #3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4642      	mov	r2, r8
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cda:	464b      	mov	r3, r9
 8007cdc:	460a      	mov	r2, r1
 8007cde:	eb42 0303 	adc.w	r3, r2, r3
 8007ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cee:	667a      	str	r2, [r7, #100]	@ 0x64
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	008b      	lsls	r3, r1, #2
 8007d00:	4641      	mov	r1, r8
 8007d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d06:	4641      	mov	r1, r8
 8007d08:	008a      	lsls	r2, r1, #2
 8007d0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d0e:	f7f8 ffd5 	bl	8000cbc <__aeabi_uldivmod>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4b0d      	ldr	r3, [pc, #52]	@ (8007d4c <UART_SetConfig+0x4e4>)
 8007d18:	fba3 1302 	umull	r1, r3, r3, r2
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	2164      	movs	r1, #100	@ 0x64
 8007d20:	fb01 f303 	mul.w	r3, r1, r3
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	3332      	adds	r3, #50	@ 0x32
 8007d2a:	4a08      	ldr	r2, [pc, #32]	@ (8007d4c <UART_SetConfig+0x4e4>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	f003 020f 	and.w	r2, r3, #15
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4422      	add	r2, r4
 8007d3e:	609a      	str	r2, [r3, #8]
}
 8007d40:	bf00      	nop
 8007d42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d46:	46bd      	mov	sp, r7
 8007d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d4c:	51eb851f 	.word	0x51eb851f

08007d50 <__NVIC_SetPriority>:
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	db0a      	blt.n	8007d7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	490c      	ldr	r1, [pc, #48]	@ (8007d9c <__NVIC_SetPriority+0x4c>)
 8007d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d6e:	0112      	lsls	r2, r2, #4
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	440b      	add	r3, r1
 8007d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d78:	e00a      	b.n	8007d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4908      	ldr	r1, [pc, #32]	@ (8007da0 <__NVIC_SetPriority+0x50>)
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	3b04      	subs	r3, #4
 8007d88:	0112      	lsls	r2, r2, #4
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	761a      	strb	r2, [r3, #24]
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	e000e100 	.word	0xe000e100
 8007da0:	e000ed00 	.word	0xe000ed00

08007da4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007da8:	4b05      	ldr	r3, [pc, #20]	@ (8007dc0 <SysTick_Handler+0x1c>)
 8007daa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007dac:	f001 fd40 	bl	8009830 <xTaskGetSchedulerState>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d001      	beq.n	8007dba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007db6:	f002 fb37 	bl	800a428 <xPortSysTickHandler>
  }
}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	e000e010 	.word	0xe000e010

08007dc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007dc8:	2100      	movs	r1, #0
 8007dca:	f06f 0004 	mvn.w	r0, #4
 8007dce:	f7ff ffbf 	bl	8007d50 <__NVIC_SetPriority>
#endif
}
 8007dd2:	bf00      	nop
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dde:	f3ef 8305 	mrs	r3, IPSR
 8007de2:	603b      	str	r3, [r7, #0]
  return(result);
 8007de4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007dea:	f06f 0305 	mvn.w	r3, #5
 8007dee:	607b      	str	r3, [r7, #4]
 8007df0:	e00c      	b.n	8007e0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007df2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e1c <osKernelInitialize+0x44>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dfa:	4b08      	ldr	r3, [pc, #32]	@ (8007e1c <osKernelInitialize+0x44>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	607b      	str	r3, [r7, #4]
 8007e04:	e002      	b.n	8007e0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e0c:	687b      	ldr	r3, [r7, #4]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20009bcc 	.word	0x20009bcc

08007e20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e26:	f3ef 8305 	mrs	r3, IPSR
 8007e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8007e2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007e32:	f06f 0305 	mvn.w	r3, #5
 8007e36:	607b      	str	r3, [r7, #4]
 8007e38:	e010      	b.n	8007e5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e68 <osKernelStart+0x48>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d109      	bne.n	8007e56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e42:	f7ff ffbf 	bl	8007dc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e46:	4b08      	ldr	r3, [pc, #32]	@ (8007e68 <osKernelStart+0x48>)
 8007e48:	2202      	movs	r2, #2
 8007e4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e4c:	f001 f87a 	bl	8008f44 <vTaskStartScheduler>
      stat = osOK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	e002      	b.n	8007e5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e5c:	687b      	ldr	r3, [r7, #4]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20009bcc 	.word	0x20009bcc

08007e6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08e      	sub	sp, #56	@ 0x38
 8007e70:	af04      	add	r7, sp, #16
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e7c:	f3ef 8305 	mrs	r3, IPSR
 8007e80:	617b      	str	r3, [r7, #20]
  return(result);
 8007e82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d17e      	bne.n	8007f86 <osThreadNew+0x11a>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d07b      	beq.n	8007f86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e8e:	2380      	movs	r3, #128	@ 0x80
 8007e90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e92:	2318      	movs	r3, #24
 8007e94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d045      	beq.n	8007f32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <osThreadNew+0x48>
        name = attr->name;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <osThreadNew+0x6e>
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	2b38      	cmp	r3, #56	@ 0x38
 8007ecc:	d805      	bhi.n	8007eda <osThreadNew+0x6e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <osThreadNew+0x72>
        return (NULL);
 8007eda:	2300      	movs	r3, #0
 8007edc:	e054      	b.n	8007f88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	089b      	lsrs	r3, r3, #2
 8007eec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00e      	beq.n	8007f14 <osThreadNew+0xa8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	2b5b      	cmp	r3, #91	@ 0x5b
 8007efc:	d90a      	bls.n	8007f14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d006      	beq.n	8007f14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <osThreadNew+0xa8>
        mem = 1;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	e010      	b.n	8007f36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10c      	bne.n	8007f36 <osThreadNew+0xca>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d108      	bne.n	8007f36 <osThreadNew+0xca>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <osThreadNew+0xca>
          mem = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61bb      	str	r3, [r7, #24]
 8007f30:	e001      	b.n	8007f36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d110      	bne.n	8007f5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f44:	9202      	str	r2, [sp, #8]
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	6a3a      	ldr	r2, [r7, #32]
 8007f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fe1a 	bl	8008b8c <xTaskCreateStatic>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	e013      	b.n	8007f86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d110      	bne.n	8007f86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 fe68 	bl	8008c4c <xTaskCreate>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d001      	beq.n	8007f86 <osThreadNew+0x11a>
            hTask = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f86:	693b      	ldr	r3, [r7, #16]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3728      	adds	r7, #40	@ 0x28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f98:	f3ef 8305 	mrs	r3, IPSR
 8007f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <osDelay+0x1c>
    stat = osErrorISR;
 8007fa4:	f06f 0305 	mvn.w	r3, #5
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	e007      	b.n	8007fbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 ff8e 	bl	8008ed8 <vTaskDelay>
    }
  }

  return (stat);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4a07      	ldr	r2, [pc, #28]	@ (8007ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4a06      	ldr	r2, [pc, #24]	@ (8007ff8 <vApplicationGetIdleTaskMemory+0x30>)
 8007fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2280      	movs	r2, #128	@ 0x80
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	20009bd0 	.word	0x20009bd0
 8007ff8:	20009c2c 	.word	0x20009c2c

08007ffc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a07      	ldr	r2, [pc, #28]	@ (8008028 <vApplicationGetTimerTaskMemory+0x2c>)
 800800c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	4a06      	ldr	r2, [pc, #24]	@ (800802c <vApplicationGetTimerTaskMemory+0x30>)
 8008012:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800801a:	601a      	str	r2, [r3, #0]
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	20009e2c 	.word	0x20009e2c
 800802c:	20009e88 	.word	0x20009e88

08008030 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f103 0208 	add.w	r2, r3, #8
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008048:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f103 0208 	add.w	r2, r3, #8
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f103 0208 	add.w	r2, r3, #8
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
}
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080d2:	b480      	push	{r7}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080e8:	d103      	bne.n	80080f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	e00c      	b.n	800810c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3308      	adds	r3, #8
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e002      	b.n	8008100 <vListInsert+0x2e>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	429a      	cmp	r2, r3
 800810a:	d2f6      	bcs.n	80080fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]
}
 8008138:	bf00      	nop
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6892      	ldr	r2, [r2, #8]
 800815a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6852      	ldr	r2, [r2, #4]
 8008164:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	d103      	bne.n	8008178 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	1e5a      	subs	r2, r3, #1
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <xQueueGenericReset+0x2c>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	60bb      	str	r3, [r7, #8]
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081c4:	f002 f8a0 	bl	800a308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081d0:	68f9      	ldr	r1, [r7, #12]
 80081d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	441a      	add	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f4:	3b01      	subs	r3, #1
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081fa:	fb01 f303 	mul.w	r3, r1, r3
 80081fe:	441a      	add	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	22ff      	movs	r2, #255	@ 0xff
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	22ff      	movs	r2, #255	@ 0xff
 8008210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d114      	bne.n	8008244 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01a      	beq.n	8008258 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3310      	adds	r3, #16
 8008226:	4618      	mov	r0, r3
 8008228:	f001 f91a 	bl	8009460 <xTaskRemoveFromEventList>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d012      	beq.n	8008258 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <xQueueGenericReset+0xd0>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	e009      	b.n	8008258 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3310      	adds	r3, #16
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fef1 	bl	8008030 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3324      	adds	r3, #36	@ 0x24
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff feec 	bl	8008030 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008258:	f002 f888 	bl	800a36c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800825c:	2301      	movs	r3, #1
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08e      	sub	sp, #56	@ 0x38
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10b      	bne.n	80082b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	e7fd      	b.n	80082b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <xQueueGenericCreateStatic+0x56>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <xQueueGenericCreateStatic+0x5a>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <xQueueGenericCreateStatic+0x5c>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10b      	bne.n	80082e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	623b      	str	r3, [r7, #32]
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	e7fd      	b.n	80082e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d102      	bne.n	80082f0 <xQueueGenericCreateStatic+0x84>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <xQueueGenericCreateStatic+0x88>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e000      	b.n	80082f6 <xQueueGenericCreateStatic+0x8a>
 80082f4:	2300      	movs	r3, #0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10b      	bne.n	8008312 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	61fb      	str	r3, [r7, #28]
}
 800830c:	bf00      	nop
 800830e:	bf00      	nop
 8008310:	e7fd      	b.n	800830e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008312:	2350      	movs	r3, #80	@ 0x50
 8008314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b50      	cmp	r3, #80	@ 0x50
 800831a:	d00b      	beq.n	8008334 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	61bb      	str	r3, [r7, #24]
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	e7fd      	b.n	8008330 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008334:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00d      	beq.n	800835c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008348:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800834c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	4613      	mov	r3, r2
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 f805 	bl	8008366 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800835c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800835e:	4618      	mov	r0, r3
 8008360:	3730      	adds	r7, #48	@ 0x30
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e002      	b.n	8008388 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008394:	2101      	movs	r1, #1
 8008396:	69b8      	ldr	r0, [r7, #24]
 8008398:	f7ff fefe 	bl	8008198 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08e      	sub	sp, #56	@ 0x38
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ba:	2300      	movs	r3, #0
 80083bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10b      	bne.n	80083e0 <xQueueGenericSend+0x34>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	e7fd      	b.n	80083dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <xQueueGenericSend+0x42>
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <xQueueGenericSend+0x46>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e000      	b.n	80083f4 <xQueueGenericSend+0x48>
 80083f2:	2300      	movs	r3, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10b      	bne.n	8008410 <xQueueGenericSend+0x64>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	e7fd      	b.n	800840c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d103      	bne.n	800841e <xQueueGenericSend+0x72>
 8008416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <xQueueGenericSend+0x76>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <xQueueGenericSend+0x78>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10b      	bne.n	8008440 <xQueueGenericSend+0x94>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	623b      	str	r3, [r7, #32]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008440:	f001 f9f6 	bl	8009830 <xTaskGetSchedulerState>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d102      	bne.n	8008450 <xQueueGenericSend+0xa4>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <xQueueGenericSend+0xa8>
 8008450:	2301      	movs	r3, #1
 8008452:	e000      	b.n	8008456 <xQueueGenericSend+0xaa>
 8008454:	2300      	movs	r3, #0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <xQueueGenericSend+0xc6>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	61fb      	str	r3, [r7, #28]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008472:	f001 ff49 	bl	800a308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847e:	429a      	cmp	r2, r3
 8008480:	d302      	bcc.n	8008488 <xQueueGenericSend+0xdc>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d129      	bne.n	80084dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800848e:	f000 fa0f 	bl	80088b0 <prvCopyDataToQueue>
 8008492:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	2b00      	cmp	r3, #0
 800849a:	d010      	beq.n	80084be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	3324      	adds	r3, #36	@ 0x24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 ffdd 	bl	8009460 <xTaskRemoveFromEventList>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d013      	beq.n	80084d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084ac:	4b3f      	ldr	r3, [pc, #252]	@ (80085ac <xQueueGenericSend+0x200>)
 80084ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	e00a      	b.n	80084d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084c4:	4b39      	ldr	r3, [pc, #228]	@ (80085ac <xQueueGenericSend+0x200>)
 80084c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084d4:	f001 ff4a 	bl	800a36c <vPortExitCritical>
				return pdPASS;
 80084d8:	2301      	movs	r3, #1
 80084da:	e063      	b.n	80085a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d103      	bne.n	80084ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084e2:	f001 ff43 	bl	800a36c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e05c      	b.n	80085a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084f0:	f107 0314 	add.w	r3, r7, #20
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 f83f 	bl	8009578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084fa:	2301      	movs	r3, #1
 80084fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084fe:	f001 ff35 	bl	800a36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008502:	f000 fd87 	bl	8009014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008506:	f001 feff 	bl	800a308 <vPortEnterCritical>
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008510:	b25b      	sxtb	r3, r3
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008516:	d103      	bne.n	8008520 <xQueueGenericSend+0x174>
 8008518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008526:	b25b      	sxtb	r3, r3
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800852c:	d103      	bne.n	8008536 <xQueueGenericSend+0x18a>
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008536:	f001 ff19 	bl	800a36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800853a:	1d3a      	adds	r2, r7, #4
 800853c:	f107 0314 	add.w	r3, r7, #20
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f001 f82e 	bl	80095a4 <xTaskCheckForTimeOut>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d124      	bne.n	8008598 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800854e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008550:	f000 faa6 	bl	8008aa0 <prvIsQueueFull>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d018      	beq.n	800858c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	3310      	adds	r3, #16
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f000 ff2a 	bl	80093bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800856a:	f000 fa31 	bl	80089d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800856e:	f000 fd5f 	bl	8009030 <xTaskResumeAll>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	f47f af7c 	bne.w	8008472 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800857a:	4b0c      	ldr	r3, [pc, #48]	@ (80085ac <xQueueGenericSend+0x200>)
 800857c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	e772      	b.n	8008472 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800858c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800858e:	f000 fa1f 	bl	80089d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008592:	f000 fd4d 	bl	8009030 <xTaskResumeAll>
 8008596:	e76c      	b.n	8008472 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800859a:	f000 fa19 	bl	80089d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800859e:	f000 fd47 	bl	8009030 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3738      	adds	r7, #56	@ 0x38
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b090      	sub	sp, #64	@ 0x40
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80085c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10b      	bne.n	80085e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085da:	bf00      	nop
 80085dc:	bf00      	nop
 80085de:	e7fd      	b.n	80085dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <xQueueGenericSendFromISR+0x3e>
 80085e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <xQueueGenericSendFromISR+0x42>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <xQueueGenericSendFromISR+0x44>
 80085f2:	2300      	movs	r3, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10b      	bne.n	8008610 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800860a:	bf00      	nop
 800860c:	bf00      	nop
 800860e:	e7fd      	b.n	800860c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2b02      	cmp	r3, #2
 8008614:	d103      	bne.n	800861e <xQueueGenericSendFromISR+0x6e>
 8008616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800861a:	2b01      	cmp	r3, #1
 800861c:	d101      	bne.n	8008622 <xQueueGenericSendFromISR+0x72>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <xQueueGenericSendFromISR+0x74>
 8008622:	2300      	movs	r3, #0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10b      	bne.n	8008640 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	623b      	str	r3, [r7, #32]
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	e7fd      	b.n	800863c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008640:	f001 ff42 	bl	800a4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008644:	f3ef 8211 	mrs	r2, BASEPRI
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	61fa      	str	r2, [r7, #28]
 800865a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800865c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <xQueueGenericSendFromISR+0xc2>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d12f      	bne.n	80086d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800867c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008680:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008688:	f000 f912 	bl	80088b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800868c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008694:	d112      	bne.n	80086bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	d016      	beq.n	80086cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	3324      	adds	r3, #36	@ 0x24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fedc 	bl	8009460 <xTaskRemoveFromEventList>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00e      	beq.n	80086cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	e007      	b.n	80086cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80086c0:	3301      	adds	r3, #1
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	b25a      	sxtb	r2, r3
 80086c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80086cc:	2301      	movs	r3, #1
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80086d0:	e001      	b.n	80086d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3740      	adds	r7, #64	@ 0x40
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08c      	sub	sp, #48	@ 0x30
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086f8:	2300      	movs	r3, #0
 80086fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10b      	bne.n	800871e <xQueueReceive+0x32>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	623b      	str	r3, [r7, #32]
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	e7fd      	b.n	800871a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d103      	bne.n	800872c <xQueueReceive+0x40>
 8008724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <xQueueReceive+0x44>
 800872c:	2301      	movs	r3, #1
 800872e:	e000      	b.n	8008732 <xQueueReceive+0x46>
 8008730:	2300      	movs	r3, #0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <xQueueReceive+0x62>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	61fb      	str	r3, [r7, #28]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800874e:	f001 f86f 	bl	8009830 <xTaskGetSchedulerState>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <xQueueReceive+0x72>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <xQueueReceive+0x76>
 800875e:	2301      	movs	r3, #1
 8008760:	e000      	b.n	8008764 <xQueueReceive+0x78>
 8008762:	2300      	movs	r3, #0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10b      	bne.n	8008780 <xQueueReceive+0x94>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	61bb      	str	r3, [r7, #24]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008780:	f001 fdc2 	bl	800a308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01f      	beq.n	80087d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008794:	f000 f8f6 	bl	8008984 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	1e5a      	subs	r2, r3, #1
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00f      	beq.n	80087c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087aa:	3310      	adds	r3, #16
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fe57 	bl	8009460 <xTaskRemoveFromEventList>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087b8:	4b3c      	ldr	r3, [pc, #240]	@ (80088ac <xQueueReceive+0x1c0>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087c8:	f001 fdd0 	bl	800a36c <vPortExitCritical>
				return pdPASS;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e069      	b.n	80088a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d103      	bne.n	80087de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087d6:	f001 fdc9 	bl	800a36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087da:	2300      	movs	r3, #0
 80087dc:	e062      	b.n	80088a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087e4:	f107 0310 	add.w	r3, r7, #16
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fec5 	bl	8009578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ee:	2301      	movs	r3, #1
 80087f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087f2:	f001 fdbb 	bl	800a36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087f6:	f000 fc0d 	bl	8009014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087fa:	f001 fd85 	bl	800a308 <vPortEnterCritical>
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008804:	b25b      	sxtb	r3, r3
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800880a:	d103      	bne.n	8008814 <xQueueReceive+0x128>
 800880c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800881a:	b25b      	sxtb	r3, r3
 800881c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008820:	d103      	bne.n	800882a <xQueueReceive+0x13e>
 8008822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800882a:	f001 fd9f 	bl	800a36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800882e:	1d3a      	adds	r2, r7, #4
 8008830:	f107 0310 	add.w	r3, r7, #16
 8008834:	4611      	mov	r1, r2
 8008836:	4618      	mov	r0, r3
 8008838:	f000 feb4 	bl	80095a4 <xTaskCheckForTimeOut>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d123      	bne.n	800888a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008844:	f000 f916 	bl	8008a74 <prvIsQueueEmpty>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d017      	beq.n	800887e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800884e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008850:	3324      	adds	r3, #36	@ 0x24
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	4611      	mov	r1, r2
 8008856:	4618      	mov	r0, r3
 8008858:	f000 fdb0 	bl	80093bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800885c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800885e:	f000 f8b7 	bl	80089d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008862:	f000 fbe5 	bl	8009030 <xTaskResumeAll>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d189      	bne.n	8008780 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800886c:	4b0f      	ldr	r3, [pc, #60]	@ (80088ac <xQueueReceive+0x1c0>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	e780      	b.n	8008780 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800887e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008880:	f000 f8a6 	bl	80089d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008884:	f000 fbd4 	bl	8009030 <xTaskResumeAll>
 8008888:	e77a      	b.n	8008780 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800888a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800888c:	f000 f8a0 	bl	80089d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008890:	f000 fbce 	bl	8009030 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008896:	f000 f8ed 	bl	8008a74 <prvIsQueueEmpty>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	f43f af6f 	beq.w	8008780 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3730      	adds	r7, #48	@ 0x30
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10d      	bne.n	80088ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d14d      	bne.n	8008972 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 ffc6 	bl	800986c <xTaskPriorityDisinherit>
 80088e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	609a      	str	r2, [r3, #8]
 80088e8:	e043      	b.n	8008972 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d119      	bne.n	8008924 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6858      	ldr	r0, [r3, #4]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f8:	461a      	mov	r2, r3
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	f019 f899 	bl	8021a32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008908:	441a      	add	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	429a      	cmp	r2, r3
 8008918:	d32b      	bcc.n	8008972 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	e026      	b.n	8008972 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	68d8      	ldr	r0, [r3, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892c:	461a      	mov	r2, r3
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	f019 f87f 	bl	8021a32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	68da      	ldr	r2, [r3, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893c:	425b      	negs	r3, r3
 800893e:	441a      	add	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d207      	bcs.n	8008960 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008958:	425b      	negs	r3, r3
 800895a:	441a      	add	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d105      	bne.n	8008972 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	3b01      	subs	r3, #1
 8008970:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800897a:	697b      	ldr	r3, [r7, #20]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d018      	beq.n	80089c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899e:	441a      	add	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d303      	bcc.n	80089b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68d9      	ldr	r1, [r3, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c0:	461a      	mov	r2, r3
 80089c2:	6838      	ldr	r0, [r7, #0]
 80089c4:	f019 f835 	bl	8021a32 <memcpy>
	}
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089d8:	f001 fc96 	bl	800a308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089e4:	e011      	b.n	8008a0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d012      	beq.n	8008a14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3324      	adds	r3, #36	@ 0x24
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fd34 	bl	8009460 <xTaskRemoveFromEventList>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089fe:	f000 fe35 	bl	800966c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dce9      	bgt.n	80089e6 <prvUnlockQueue+0x16>
 8008a12:	e000      	b.n	8008a16 <prvUnlockQueue+0x46>
					break;
 8008a14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	22ff      	movs	r2, #255	@ 0xff
 8008a1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008a1e:	f001 fca5 	bl	800a36c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a22:	f001 fc71 	bl	800a308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a2e:	e011      	b.n	8008a54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d012      	beq.n	8008a5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3310      	adds	r3, #16
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 fd0f 	bl	8009460 <xTaskRemoveFromEventList>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a48:	f000 fe10 	bl	800966c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dce9      	bgt.n	8008a30 <prvUnlockQueue+0x60>
 8008a5c:	e000      	b.n	8008a60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	22ff      	movs	r2, #255	@ 0xff
 8008a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a68:	f001 fc80 	bl	800a36c <vPortExitCritical>
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a7c:	f001 fc44 	bl	800a308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e001      	b.n	8008a92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a92:	f001 fc6b 	bl	800a36c <vPortExitCritical>

	return xReturn;
 8008a96:	68fb      	ldr	r3, [r7, #12]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008aa8:	f001 fc2e 	bl	800a308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d102      	bne.n	8008abe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	e001      	b.n	8008ac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ac2:	f001 fc53 	bl	800a36c <vPortExitCritical>

	return xReturn;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	e014      	b.n	8008b0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8008b20 <vQueueAddToRegistry+0x50>)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10b      	bne.n	8008b04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008aec:	490c      	ldr	r1, [pc, #48]	@ (8008b20 <vQueueAddToRegistry+0x50>)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008af6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b20 <vQueueAddToRegistry+0x50>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	4413      	add	r3, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b02:	e006      	b.n	8008b12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b07      	cmp	r3, #7
 8008b0e:	d9e7      	bls.n	8008ae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	2000a288 	.word	0x2000a288

08008b24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b34:	f001 fbe8 	bl	800a308 <vPortEnterCritical>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b44:	d103      	bne.n	8008b4e <vQueueWaitForMessageRestricted+0x2a>
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b54:	b25b      	sxtb	r3, r3
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b5a:	d103      	bne.n	8008b64 <vQueueWaitForMessageRestricted+0x40>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b64:	f001 fc02 	bl	800a36c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	3324      	adds	r3, #36	@ 0x24
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fc45 	bl	8009408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b7e:	6978      	ldr	r0, [r7, #20]
 8008b80:	f7ff ff26 	bl	80089d0 <prvUnlockQueue>
	}
 8008b84:	bf00      	nop
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08e      	sub	sp, #56	@ 0x38
 8008b90:	af04      	add	r7, sp, #16
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10b      	bne.n	8008bb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	623b      	str	r3, [r7, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10b      	bne.n	8008bd6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	61fb      	str	r3, [r7, #28]
}
 8008bd0:	bf00      	nop
 8008bd2:	bf00      	nop
 8008bd4:	e7fd      	b.n	8008bd2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008bd6:	235c      	movs	r3, #92	@ 0x5c
 8008bd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b5c      	cmp	r3, #92	@ 0x5c
 8008bde:	d00b      	beq.n	8008bf8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	61bb      	str	r3, [r7, #24]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d01e      	beq.n	8008c3e <xTaskCreateStatic+0xb2>
 8008c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d01b      	beq.n	8008c3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1e:	9302      	str	r3, [sp, #8]
 8008c20:	f107 0314 	add.w	r3, r7, #20
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 f850 	bl	8008cd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c38:	f000 f8de 	bl	8008df8 <prvAddNewTaskToReadyList>
 8008c3c:	e001      	b.n	8008c42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c42:	697b      	ldr	r3, [r7, #20]
	}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3728      	adds	r7, #40	@ 0x28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08c      	sub	sp, #48	@ 0x30
 8008c50:	af04      	add	r7, sp, #16
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	603b      	str	r3, [r7, #0]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 fc73 	bl	800a54c <pvPortMalloc>
 8008c66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c6e:	205c      	movs	r0, #92	@ 0x5c
 8008c70:	f001 fc6c 	bl	800a54c <pvPortMalloc>
 8008c74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c82:	e005      	b.n	8008c90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c84:	6978      	ldr	r0, [r7, #20]
 8008c86:	f001 fd2f 	bl	800a6e8 <vPortFree>
 8008c8a:	e001      	b.n	8008c90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d017      	beq.n	8008cc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c9e:	88fa      	ldrh	r2, [r7, #6]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	9303      	str	r3, [sp, #12]
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	9302      	str	r3, [sp, #8]
 8008ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	68b9      	ldr	r1, [r7, #8]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 f80e 	bl	8008cd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cba:	69f8      	ldr	r0, [r7, #28]
 8008cbc:	f000 f89c 	bl	8008df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	e002      	b.n	8008ccc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
	}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b088      	sub	sp, #32
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	461a      	mov	r2, r3
 8008cee:	21a5      	movs	r1, #165	@ 0xa5
 8008cf0:	f018 fe37 	bl	8021962 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	f023 0307 	bic.w	r3, r3, #7
 8008d0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f003 0307 	and.w	r3, r3, #7
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	617b      	str	r3, [r7, #20]
}
 8008d2a:	bf00      	nop
 8008d2c:	bf00      	nop
 8008d2e:	e7fd      	b.n	8008d2c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01f      	beq.n	8008d76 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d36:	2300      	movs	r3, #0
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	e012      	b.n	8008d62 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	7819      	ldrb	r1, [r3, #0]
 8008d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	3334      	adds	r3, #52	@ 0x34
 8008d4c:	460a      	mov	r2, r1
 8008d4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d006      	beq.n	8008d6a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	2b0f      	cmp	r3, #15
 8008d66:	d9e9      	bls.n	8008d3c <prvInitialiseNewTask+0x66>
 8008d68:	e000      	b.n	8008d6c <prvInitialiseNewTask+0x96>
			{
				break;
 8008d6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d74:	e003      	b.n	8008d7e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d80:	2b37      	cmp	r3, #55	@ 0x37
 8008d82:	d901      	bls.n	8008d88 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d84:	2337      	movs	r3, #55	@ 0x37
 8008d86:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d92:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	2200      	movs	r2, #0
 8008d98:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff f966 	bl	8008070 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da6:	3318      	adds	r3, #24
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff f961 	bl	8008070 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dc2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	68f9      	ldr	r1, [r7, #12]
 8008dd6:	69b8      	ldr	r0, [r7, #24]
 8008dd8:	f001 f966 	bl	800a0a8 <pxPortInitialiseStack>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dee:	bf00      	nop
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e00:	f001 fa82 	bl	800a308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e04:	4b2d      	ldr	r3, [pc, #180]	@ (8008ebc <prvAddNewTaskToReadyList+0xc4>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8008ebc <prvAddNewTaskToReadyList+0xc4>)
 8008e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ec0 <prvAddNewTaskToReadyList+0xc8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d109      	bne.n	8008e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e16:	4a2a      	ldr	r2, [pc, #168]	@ (8008ec0 <prvAddNewTaskToReadyList+0xc8>)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e1c:	4b27      	ldr	r3, [pc, #156]	@ (8008ebc <prvAddNewTaskToReadyList+0xc4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d110      	bne.n	8008e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e24:	f000 fc46 	bl	80096b4 <prvInitialiseTaskLists>
 8008e28:	e00d      	b.n	8008e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e2a:	4b26      	ldr	r3, [pc, #152]	@ (8008ec4 <prvAddNewTaskToReadyList+0xcc>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d109      	bne.n	8008e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e32:	4b23      	ldr	r3, [pc, #140]	@ (8008ec0 <prvAddNewTaskToReadyList+0xc8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d802      	bhi.n	8008e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e40:	4a1f      	ldr	r2, [pc, #124]	@ (8008ec0 <prvAddNewTaskToReadyList+0xc8>)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e46:	4b20      	ldr	r3, [pc, #128]	@ (8008ec8 <prvAddNewTaskToReadyList+0xd0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec8 <prvAddNewTaskToReadyList+0xd0>)
 8008e4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e50:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec8 <prvAddNewTaskToReadyList+0xd0>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <prvAddNewTaskToReadyList+0xd4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d903      	bls.n	8008e6c <prvAddNewTaskToReadyList+0x74>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	4a18      	ldr	r2, [pc, #96]	@ (8008ecc <prvAddNewTaskToReadyList+0xd4>)
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4a15      	ldr	r2, [pc, #84]	@ (8008ed0 <prvAddNewTaskToReadyList+0xd8>)
 8008e7a:	441a      	add	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f7ff f901 	bl	800808a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e88:	f001 fa70 	bl	800a36c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ec4 <prvAddNewTaskToReadyList+0xcc>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00e      	beq.n	8008eb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e94:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <prvAddNewTaskToReadyList+0xc8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d207      	bcs.n	8008eb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed4 <prvAddNewTaskToReadyList+0xdc>)
 8008ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eb2:	bf00      	nop
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	2000a79c 	.word	0x2000a79c
 8008ec0:	2000a2c8 	.word	0x2000a2c8
 8008ec4:	2000a7a8 	.word	0x2000a7a8
 8008ec8:	2000a7b8 	.word	0x2000a7b8
 8008ecc:	2000a7a4 	.word	0x2000a7a4
 8008ed0:	2000a2cc 	.word	0x2000a2cc
 8008ed4:	e000ed04 	.word	0xe000ed04

08008ed8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d018      	beq.n	8008f1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008eea:	4b14      	ldr	r3, [pc, #80]	@ (8008f3c <vTaskDelay+0x64>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <vTaskDelay+0x32>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	60bb      	str	r3, [r7, #8]
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	e7fd      	b.n	8008f06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f0a:	f000 f883 	bl	8009014 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fd1b 	bl	800994c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f16:	f000 f88b 	bl	8009030 <xTaskResumeAll>
 8008f1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f22:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <vTaskDelay+0x68>)
 8008f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	2000a7c4 	.word	0x2000a7c4
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08a      	sub	sp, #40	@ 0x28
 8008f48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f52:	463a      	mov	r2, r7
 8008f54:	1d39      	adds	r1, r7, #4
 8008f56:	f107 0308 	add.w	r3, r7, #8
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff f834 	bl	8007fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	9202      	str	r2, [sp, #8]
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	460a      	mov	r2, r1
 8008f72:	4922      	ldr	r1, [pc, #136]	@ (8008ffc <vTaskStartScheduler+0xb8>)
 8008f74:	4822      	ldr	r0, [pc, #136]	@ (8009000 <vTaskStartScheduler+0xbc>)
 8008f76:	f7ff fe09 	bl	8008b8c <xTaskCreateStatic>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	4a21      	ldr	r2, [pc, #132]	@ (8009004 <vTaskStartScheduler+0xc0>)
 8008f7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f80:	4b20      	ldr	r3, [pc, #128]	@ (8009004 <vTaskStartScheduler+0xc0>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e001      	b.n	8008f92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d102      	bne.n	8008f9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f98:	f000 fd2c 	bl	80099f4 <xTimerCreateTimerTask>
 8008f9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d116      	bne.n	8008fd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	613b      	str	r3, [r7, #16]
}
 8008fb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fb8:	4b13      	ldr	r3, [pc, #76]	@ (8009008 <vTaskStartScheduler+0xc4>)
 8008fba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fc0:	4b12      	ldr	r3, [pc, #72]	@ (800900c <vTaskStartScheduler+0xc8>)
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fc6:	4b12      	ldr	r3, [pc, #72]	@ (8009010 <vTaskStartScheduler+0xcc>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fcc:	f001 f8f8 	bl	800a1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fd0:	e00f      	b.n	8008ff2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fd8:	d10b      	bne.n	8008ff2 <vTaskStartScheduler+0xae>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	60fb      	str	r3, [r7, #12]
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	e7fd      	b.n	8008fee <vTaskStartScheduler+0xaa>
}
 8008ff2:	bf00      	nop
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	080228f0 	.word	0x080228f0
 8009000:	08009685 	.word	0x08009685
 8009004:	2000a7c0 	.word	0x2000a7c0
 8009008:	2000a7bc 	.word	0x2000a7bc
 800900c:	2000a7a8 	.word	0x2000a7a8
 8009010:	2000a7a0 	.word	0x2000a7a0

08009014 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009018:	4b04      	ldr	r3, [pc, #16]	@ (800902c <vTaskSuspendAll+0x18>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3301      	adds	r3, #1
 800901e:	4a03      	ldr	r2, [pc, #12]	@ (800902c <vTaskSuspendAll+0x18>)
 8009020:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009022:	bf00      	nop
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	2000a7c4 	.word	0x2000a7c4

08009030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800903a:	2300      	movs	r3, #0
 800903c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800903e:	4b42      	ldr	r3, [pc, #264]	@ (8009148 <xTaskResumeAll+0x118>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10b      	bne.n	800905e <xTaskResumeAll+0x2e>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	603b      	str	r3, [r7, #0]
}
 8009058:	bf00      	nop
 800905a:	bf00      	nop
 800905c:	e7fd      	b.n	800905a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800905e:	f001 f953 	bl	800a308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009062:	4b39      	ldr	r3, [pc, #228]	@ (8009148 <xTaskResumeAll+0x118>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3b01      	subs	r3, #1
 8009068:	4a37      	ldr	r2, [pc, #220]	@ (8009148 <xTaskResumeAll+0x118>)
 800906a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800906c:	4b36      	ldr	r3, [pc, #216]	@ (8009148 <xTaskResumeAll+0x118>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d162      	bne.n	800913a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009074:	4b35      	ldr	r3, [pc, #212]	@ (800914c <xTaskResumeAll+0x11c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05e      	beq.n	800913a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800907c:	e02f      	b.n	80090de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907e:	4b34      	ldr	r3, [pc, #208]	@ (8009150 <xTaskResumeAll+0x120>)
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3318      	adds	r3, #24
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff f85a 	bl	8008144 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3304      	adds	r3, #4
 8009094:	4618      	mov	r0, r3
 8009096:	f7ff f855 	bl	8008144 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909e:	4b2d      	ldr	r3, [pc, #180]	@ (8009154 <xTaskResumeAll+0x124>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d903      	bls.n	80090ae <xTaskResumeAll+0x7e>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009154 <xTaskResumeAll+0x124>)
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4a27      	ldr	r2, [pc, #156]	@ (8009158 <xTaskResumeAll+0x128>)
 80090bc:	441a      	add	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3304      	adds	r3, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fe ffe0 	bl	800808a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ce:	4b23      	ldr	r3, [pc, #140]	@ (800915c <xTaskResumeAll+0x12c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d302      	bcc.n	80090de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80090d8:	4b21      	ldr	r3, [pc, #132]	@ (8009160 <xTaskResumeAll+0x130>)
 80090da:	2201      	movs	r2, #1
 80090dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090de:	4b1c      	ldr	r3, [pc, #112]	@ (8009150 <xTaskResumeAll+0x120>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1cb      	bne.n	800907e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090ec:	f000 fb80 	bl	80097f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009164 <xTaskResumeAll+0x134>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d010      	beq.n	800911e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090fc:	f000 f846 	bl	800918c <xTaskIncrementTick>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009106:	4b16      	ldr	r3, [pc, #88]	@ (8009160 <xTaskResumeAll+0x130>)
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3b01      	subs	r3, #1
 8009110:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1f1      	bne.n	80090fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009118:	4b12      	ldr	r3, [pc, #72]	@ (8009164 <xTaskResumeAll+0x134>)
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800911e:	4b10      	ldr	r3, [pc, #64]	@ (8009160 <xTaskResumeAll+0x130>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009126:	2301      	movs	r3, #1
 8009128:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800912a:	4b0f      	ldr	r3, [pc, #60]	@ (8009168 <xTaskResumeAll+0x138>)
 800912c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800913a:	f001 f917 	bl	800a36c <vPortExitCritical>

	return xAlreadyYielded;
 800913e:	68bb      	ldr	r3, [r7, #8]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	2000a7c4 	.word	0x2000a7c4
 800914c:	2000a79c 	.word	0x2000a79c
 8009150:	2000a75c 	.word	0x2000a75c
 8009154:	2000a7a4 	.word	0x2000a7a4
 8009158:	2000a2cc 	.word	0x2000a2cc
 800915c:	2000a2c8 	.word	0x2000a2c8
 8009160:	2000a7b0 	.word	0x2000a7b0
 8009164:	2000a7ac 	.word	0x2000a7ac
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009172:	4b05      	ldr	r3, [pc, #20]	@ (8009188 <xTaskGetTickCount+0x1c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009178:	687b      	ldr	r3, [r7, #4]
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	2000a7a0 	.word	0x2000a7a0

0800918c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009196:	4b4f      	ldr	r3, [pc, #316]	@ (80092d4 <xTaskIncrementTick+0x148>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f040 8090 	bne.w	80092c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091a0:	4b4d      	ldr	r3, [pc, #308]	@ (80092d8 <xTaskIncrementTick+0x14c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091a8:	4a4b      	ldr	r2, [pc, #300]	@ (80092d8 <xTaskIncrementTick+0x14c>)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d121      	bne.n	80091f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091b4:	4b49      	ldr	r3, [pc, #292]	@ (80092dc <xTaskIncrementTick+0x150>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00b      	beq.n	80091d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	603b      	str	r3, [r7, #0]
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	e7fd      	b.n	80091d2 <xTaskIncrementTick+0x46>
 80091d6:	4b41      	ldr	r3, [pc, #260]	@ (80092dc <xTaskIncrementTick+0x150>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	4b40      	ldr	r3, [pc, #256]	@ (80092e0 <xTaskIncrementTick+0x154>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a3e      	ldr	r2, [pc, #248]	@ (80092dc <xTaskIncrementTick+0x150>)
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	4a3e      	ldr	r2, [pc, #248]	@ (80092e0 <xTaskIncrementTick+0x154>)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	4b3e      	ldr	r3, [pc, #248]	@ (80092e4 <xTaskIncrementTick+0x158>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3301      	adds	r3, #1
 80091f0:	4a3c      	ldr	r2, [pc, #240]	@ (80092e4 <xTaskIncrementTick+0x158>)
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	f000 fafc 	bl	80097f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091f8:	4b3b      	ldr	r3, [pc, #236]	@ (80092e8 <xTaskIncrementTick+0x15c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d349      	bcc.n	8009296 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009202:	4b36      	ldr	r3, [pc, #216]	@ (80092dc <xTaskIncrementTick+0x150>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800920c:	4b36      	ldr	r3, [pc, #216]	@ (80092e8 <xTaskIncrementTick+0x15c>)
 800920e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009212:	601a      	str	r2, [r3, #0]
					break;
 8009214:	e03f      	b.n	8009296 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009216:	4b31      	ldr	r3, [pc, #196]	@ (80092dc <xTaskIncrementTick+0x150>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	d203      	bcs.n	8009236 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800922e:	4a2e      	ldr	r2, [pc, #184]	@ (80092e8 <xTaskIncrementTick+0x15c>)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009234:	e02f      	b.n	8009296 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	3304      	adds	r3, #4
 800923a:	4618      	mov	r0, r3
 800923c:	f7fe ff82 	bl	8008144 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009244:	2b00      	cmp	r3, #0
 8009246:	d004      	beq.n	8009252 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	3318      	adds	r3, #24
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe ff79 	bl	8008144 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009256:	4b25      	ldr	r3, [pc, #148]	@ (80092ec <xTaskIncrementTick+0x160>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d903      	bls.n	8009266 <xTaskIncrementTick+0xda>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	4a22      	ldr	r2, [pc, #136]	@ (80092ec <xTaskIncrementTick+0x160>)
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4a1f      	ldr	r2, [pc, #124]	@ (80092f0 <xTaskIncrementTick+0x164>)
 8009274:	441a      	add	r2, r3
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	3304      	adds	r3, #4
 800927a:	4619      	mov	r1, r3
 800927c:	4610      	mov	r0, r2
 800927e:	f7fe ff04 	bl	800808a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009286:	4b1b      	ldr	r3, [pc, #108]	@ (80092f4 <xTaskIncrementTick+0x168>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928c:	429a      	cmp	r2, r3
 800928e:	d3b8      	bcc.n	8009202 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009294:	e7b5      	b.n	8009202 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009296:	4b17      	ldr	r3, [pc, #92]	@ (80092f4 <xTaskIncrementTick+0x168>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800929c:	4914      	ldr	r1, [pc, #80]	@ (80092f0 <xTaskIncrementTick+0x164>)
 800929e:	4613      	mov	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4413      	add	r3, r2
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	440b      	add	r3, r1
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d901      	bls.n	80092b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80092ae:	2301      	movs	r3, #1
 80092b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092b2:	4b11      	ldr	r3, [pc, #68]	@ (80092f8 <xTaskIncrementTick+0x16c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80092ba:	2301      	movs	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	e004      	b.n	80092ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092c0:	4b0e      	ldr	r3, [pc, #56]	@ (80092fc <xTaskIncrementTick+0x170>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3301      	adds	r3, #1
 80092c6:	4a0d      	ldr	r2, [pc, #52]	@ (80092fc <xTaskIncrementTick+0x170>)
 80092c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092ca:	697b      	ldr	r3, [r7, #20]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	2000a7c4 	.word	0x2000a7c4
 80092d8:	2000a7a0 	.word	0x2000a7a0
 80092dc:	2000a754 	.word	0x2000a754
 80092e0:	2000a758 	.word	0x2000a758
 80092e4:	2000a7b4 	.word	0x2000a7b4
 80092e8:	2000a7bc 	.word	0x2000a7bc
 80092ec:	2000a7a4 	.word	0x2000a7a4
 80092f0:	2000a2cc 	.word	0x2000a2cc
 80092f4:	2000a2c8 	.word	0x2000a2c8
 80092f8:	2000a7b0 	.word	0x2000a7b0
 80092fc:	2000a7ac 	.word	0x2000a7ac

08009300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009306:	4b28      	ldr	r3, [pc, #160]	@ (80093a8 <vTaskSwitchContext+0xa8>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800930e:	4b27      	ldr	r3, [pc, #156]	@ (80093ac <vTaskSwitchContext+0xac>)
 8009310:	2201      	movs	r2, #1
 8009312:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009314:	e042      	b.n	800939c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009316:	4b25      	ldr	r3, [pc, #148]	@ (80093ac <vTaskSwitchContext+0xac>)
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931c:	4b24      	ldr	r3, [pc, #144]	@ (80093b0 <vTaskSwitchContext+0xb0>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60fb      	str	r3, [r7, #12]
 8009322:	e011      	b.n	8009348 <vTaskSwitchContext+0x48>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10b      	bne.n	8009342 <vTaskSwitchContext+0x42>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	607b      	str	r3, [r7, #4]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <vTaskSwitchContext+0x3e>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3b01      	subs	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	491a      	ldr	r1, [pc, #104]	@ (80093b4 <vTaskSwitchContext+0xb4>)
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4613      	mov	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0e3      	beq.n	8009324 <vTaskSwitchContext+0x24>
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a13      	ldr	r2, [pc, #76]	@ (80093b4 <vTaskSwitchContext+0xb4>)
 8009368:	4413      	add	r3, r2
 800936a:	60bb      	str	r3, [r7, #8]
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	605a      	str	r2, [r3, #4]
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3308      	adds	r3, #8
 800937e:	429a      	cmp	r2, r3
 8009380:	d104      	bne.n	800938c <vTaskSwitchContext+0x8c>
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	605a      	str	r2, [r3, #4]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	4a09      	ldr	r2, [pc, #36]	@ (80093b8 <vTaskSwitchContext+0xb8>)
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	4a06      	ldr	r2, [pc, #24]	@ (80093b0 <vTaskSwitchContext+0xb0>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6013      	str	r3, [r2, #0]
}
 800939c:	bf00      	nop
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	2000a7c4 	.word	0x2000a7c4
 80093ac:	2000a7b0 	.word	0x2000a7b0
 80093b0:	2000a7a4 	.word	0x2000a7a4
 80093b4:	2000a2cc 	.word	0x2000a2cc
 80093b8:	2000a2c8 	.word	0x2000a2c8

080093bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10b      	bne.n	80093e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	60fb      	str	r3, [r7, #12]
}
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
 80093e2:	e7fd      	b.n	80093e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093e4:	4b07      	ldr	r3, [pc, #28]	@ (8009404 <vTaskPlaceOnEventList+0x48>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3318      	adds	r3, #24
 80093ea:	4619      	mov	r1, r3
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7fe fe70 	bl	80080d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093f2:	2101      	movs	r1, #1
 80093f4:	6838      	ldr	r0, [r7, #0]
 80093f6:	f000 faa9 	bl	800994c <prvAddCurrentTaskToDelayedList>
}
 80093fa:	bf00      	nop
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	2000a2c8 	.word	0x2000a2c8

08009408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	617b      	str	r3, [r7, #20]
}
 800942c:	bf00      	nop
 800942e:	bf00      	nop
 8009430:	e7fd      	b.n	800942e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009432:	4b0a      	ldr	r3, [pc, #40]	@ (800945c <vTaskPlaceOnEventListRestricted+0x54>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3318      	adds	r3, #24
 8009438:	4619      	mov	r1, r3
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7fe fe25 	bl	800808a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800944a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	68b8      	ldr	r0, [r7, #8]
 8009450:	f000 fa7c 	bl	800994c <prvAddCurrentTaskToDelayedList>
	}
 8009454:	bf00      	nop
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	2000a2c8 	.word	0x2000a2c8

08009460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60fb      	str	r3, [r7, #12]
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	e7fd      	b.n	800948a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	3318      	adds	r3, #24
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fe56 	bl	8008144 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009498:	4b1d      	ldr	r3, [pc, #116]	@ (8009510 <xTaskRemoveFromEventList+0xb0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d11d      	bne.n	80094dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe fe4d 	bl	8008144 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ae:	4b19      	ldr	r3, [pc, #100]	@ (8009514 <xTaskRemoveFromEventList+0xb4>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d903      	bls.n	80094be <xTaskRemoveFromEventList+0x5e>
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ba:	4a16      	ldr	r2, [pc, #88]	@ (8009514 <xTaskRemoveFromEventList+0xb4>)
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4a13      	ldr	r2, [pc, #76]	@ (8009518 <xTaskRemoveFromEventList+0xb8>)
 80094cc:	441a      	add	r2, r3
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4619      	mov	r1, r3
 80094d4:	4610      	mov	r0, r2
 80094d6:	f7fe fdd8 	bl	800808a <vListInsertEnd>
 80094da:	e005      	b.n	80094e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	3318      	adds	r3, #24
 80094e0:	4619      	mov	r1, r3
 80094e2:	480e      	ldr	r0, [pc, #56]	@ (800951c <xTaskRemoveFromEventList+0xbc>)
 80094e4:	f7fe fdd1 	bl	800808a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009520 <xTaskRemoveFromEventList+0xc0>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d905      	bls.n	8009502 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094f6:	2301      	movs	r3, #1
 80094f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009524 <xTaskRemoveFromEventList+0xc4>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	e001      	b.n	8009506 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009502:	2300      	movs	r3, #0
 8009504:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009506:	697b      	ldr	r3, [r7, #20]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	2000a7c4 	.word	0x2000a7c4
 8009514:	2000a7a4 	.word	0x2000a7a4
 8009518:	2000a2cc 	.word	0x2000a2cc
 800951c:	2000a75c 	.word	0x2000a75c
 8009520:	2000a2c8 	.word	0x2000a2c8
 8009524:	2000a7b0 	.word	0x2000a7b0

08009528 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10b      	bne.n	800954e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	60fb      	str	r3, [r7, #12]
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	e7fd      	b.n	800954a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800954e:	f000 fedb 	bl	800a308 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009552:	4b07      	ldr	r3, [pc, #28]	@ (8009570 <vTaskSetTimeOutState+0x48>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800955a:	4b06      	ldr	r3, [pc, #24]	@ (8009574 <vTaskSetTimeOutState+0x4c>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009562:	f000 ff03 	bl	800a36c <vPortExitCritical>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	2000a7b4 	.word	0x2000a7b4
 8009574:	2000a7a0 	.word	0x2000a7a0

08009578 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009580:	4b06      	ldr	r3, [pc, #24]	@ (800959c <vTaskInternalSetTimeOutState+0x24>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009588:	4b05      	ldr	r3, [pc, #20]	@ (80095a0 <vTaskInternalSetTimeOutState+0x28>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	605a      	str	r2, [r3, #4]
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr
 800959c:	2000a7b4 	.word	0x2000a7b4
 80095a0:	2000a7a0 	.word	0x2000a7a0

080095a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10b      	bne.n	80095cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	613b      	str	r3, [r7, #16]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10b      	bne.n	80095ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	60fb      	str	r3, [r7, #12]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80095ea:	f000 fe8d 	bl	800a308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009664 <xTaskCheckForTimeOut+0xc0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009606:	d102      	bne.n	800960e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009608:	2300      	movs	r3, #0
 800960a:	61fb      	str	r3, [r7, #28]
 800960c:	e023      	b.n	8009656 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	4b15      	ldr	r3, [pc, #84]	@ (8009668 <xTaskCheckForTimeOut+0xc4>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d007      	beq.n	800962a <xTaskCheckForTimeOut+0x86>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	429a      	cmp	r2, r3
 8009622:	d302      	bcc.n	800962a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	61fb      	str	r3, [r7, #28]
 8009628:	e015      	b.n	8009656 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	429a      	cmp	r2, r3
 8009632:	d20b      	bcs.n	800964c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	1ad2      	subs	r2, r2, r3
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f7ff ff99 	bl	8009578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	e004      	b.n	8009656 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009652:	2301      	movs	r3, #1
 8009654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009656:	f000 fe89 	bl	800a36c <vPortExitCritical>

	return xReturn;
 800965a:	69fb      	ldr	r3, [r7, #28]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3720      	adds	r7, #32
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	2000a7a0 	.word	0x2000a7a0
 8009668:	2000a7b4 	.word	0x2000a7b4

0800966c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800966c:	b480      	push	{r7}
 800966e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009670:	4b03      	ldr	r3, [pc, #12]	@ (8009680 <vTaskMissedYield+0x14>)
 8009672:	2201      	movs	r2, #1
 8009674:	601a      	str	r2, [r3, #0]
}
 8009676:	bf00      	nop
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	2000a7b0 	.word	0x2000a7b0

08009684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800968c:	f000 f852 	bl	8009734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009690:	4b06      	ldr	r3, [pc, #24]	@ (80096ac <prvIdleTask+0x28>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d9f9      	bls.n	800968c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009698:	4b05      	ldr	r3, [pc, #20]	@ (80096b0 <prvIdleTask+0x2c>)
 800969a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096a8:	e7f0      	b.n	800968c <prvIdleTask+0x8>
 80096aa:	bf00      	nop
 80096ac:	2000a2cc 	.word	0x2000a2cc
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096ba:	2300      	movs	r3, #0
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	e00c      	b.n	80096da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4a12      	ldr	r2, [pc, #72]	@ (8009714 <prvInitialiseTaskLists+0x60>)
 80096cc:	4413      	add	r3, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fcae 	bl	8008030 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3301      	adds	r3, #1
 80096d8:	607b      	str	r3, [r7, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b37      	cmp	r3, #55	@ 0x37
 80096de:	d9ef      	bls.n	80096c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096e0:	480d      	ldr	r0, [pc, #52]	@ (8009718 <prvInitialiseTaskLists+0x64>)
 80096e2:	f7fe fca5 	bl	8008030 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096e6:	480d      	ldr	r0, [pc, #52]	@ (800971c <prvInitialiseTaskLists+0x68>)
 80096e8:	f7fe fca2 	bl	8008030 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096ec:	480c      	ldr	r0, [pc, #48]	@ (8009720 <prvInitialiseTaskLists+0x6c>)
 80096ee:	f7fe fc9f 	bl	8008030 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096f2:	480c      	ldr	r0, [pc, #48]	@ (8009724 <prvInitialiseTaskLists+0x70>)
 80096f4:	f7fe fc9c 	bl	8008030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096f8:	480b      	ldr	r0, [pc, #44]	@ (8009728 <prvInitialiseTaskLists+0x74>)
 80096fa:	f7fe fc99 	bl	8008030 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096fe:	4b0b      	ldr	r3, [pc, #44]	@ (800972c <prvInitialiseTaskLists+0x78>)
 8009700:	4a05      	ldr	r2, [pc, #20]	@ (8009718 <prvInitialiseTaskLists+0x64>)
 8009702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009704:	4b0a      	ldr	r3, [pc, #40]	@ (8009730 <prvInitialiseTaskLists+0x7c>)
 8009706:	4a05      	ldr	r2, [pc, #20]	@ (800971c <prvInitialiseTaskLists+0x68>)
 8009708:	601a      	str	r2, [r3, #0]
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	2000a2cc 	.word	0x2000a2cc
 8009718:	2000a72c 	.word	0x2000a72c
 800971c:	2000a740 	.word	0x2000a740
 8009720:	2000a75c 	.word	0x2000a75c
 8009724:	2000a770 	.word	0x2000a770
 8009728:	2000a788 	.word	0x2000a788
 800972c:	2000a754 	.word	0x2000a754
 8009730:	2000a758 	.word	0x2000a758

08009734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800973a:	e019      	b.n	8009770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800973c:	f000 fde4 	bl	800a308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009740:	4b10      	ldr	r3, [pc, #64]	@ (8009784 <prvCheckTasksWaitingTermination+0x50>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3304      	adds	r3, #4
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fcf9 	bl	8008144 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009752:	4b0d      	ldr	r3, [pc, #52]	@ (8009788 <prvCheckTasksWaitingTermination+0x54>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3b01      	subs	r3, #1
 8009758:	4a0b      	ldr	r2, [pc, #44]	@ (8009788 <prvCheckTasksWaitingTermination+0x54>)
 800975a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800975c:	4b0b      	ldr	r3, [pc, #44]	@ (800978c <prvCheckTasksWaitingTermination+0x58>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3b01      	subs	r3, #1
 8009762:	4a0a      	ldr	r2, [pc, #40]	@ (800978c <prvCheckTasksWaitingTermination+0x58>)
 8009764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009766:	f000 fe01 	bl	800a36c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f810 	bl	8009790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009770:	4b06      	ldr	r3, [pc, #24]	@ (800978c <prvCheckTasksWaitingTermination+0x58>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e1      	bne.n	800973c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	2000a770 	.word	0x2000a770
 8009788:	2000a79c 	.word	0x2000a79c
 800978c:	2000a784 	.word	0x2000a784

08009790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d108      	bne.n	80097b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 ff9e 	bl	800a6e8 <vPortFree>
				vPortFree( pxTCB );
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 ff9b 	bl	800a6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097b2:	e019      	b.n	80097e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d103      	bne.n	80097c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 ff92 	bl	800a6e8 <vPortFree>
	}
 80097c4:	e010      	b.n	80097e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d00b      	beq.n	80097e8 <prvDeleteTCB+0x58>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	60fb      	str	r3, [r7, #12]
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	e7fd      	b.n	80097e4 <prvDeleteTCB+0x54>
	}
 80097e8:	bf00      	nop
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <prvResetNextTaskUnblockTime+0x38>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009800:	4b0a      	ldr	r3, [pc, #40]	@ (800982c <prvResetNextTaskUnblockTime+0x3c>)
 8009802:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009808:	e008      	b.n	800981c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980a:	4b07      	ldr	r3, [pc, #28]	@ (8009828 <prvResetNextTaskUnblockTime+0x38>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	4a04      	ldr	r2, [pc, #16]	@ (800982c <prvResetNextTaskUnblockTime+0x3c>)
 800981a:	6013      	str	r3, [r2, #0]
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	2000a754 	.word	0x2000a754
 800982c:	2000a7bc 	.word	0x2000a7bc

08009830 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009836:	4b0b      	ldr	r3, [pc, #44]	@ (8009864 <xTaskGetSchedulerState+0x34>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800983e:	2301      	movs	r3, #1
 8009840:	607b      	str	r3, [r7, #4]
 8009842:	e008      	b.n	8009856 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009844:	4b08      	ldr	r3, [pc, #32]	@ (8009868 <xTaskGetSchedulerState+0x38>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800984c:	2302      	movs	r3, #2
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	e001      	b.n	8009856 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009852:	2300      	movs	r3, #0
 8009854:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009856:	687b      	ldr	r3, [r7, #4]
	}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	2000a7a8 	.word	0x2000a7a8
 8009868:	2000a7c4 	.word	0x2000a7c4

0800986c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d058      	beq.n	8009934 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009882:	4b2f      	ldr	r3, [pc, #188]	@ (8009940 <xTaskPriorityDisinherit+0xd4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	429a      	cmp	r2, r3
 800988a:	d00b      	beq.n	80098a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	60fb      	str	r3, [r7, #12]
}
 800989e:	bf00      	nop
 80098a0:	bf00      	nop
 80098a2:	e7fd      	b.n	80098a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10b      	bne.n	80098c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	60bb      	str	r3, [r7, #8]
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	e7fd      	b.n	80098c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c8:	1e5a      	subs	r2, r3, #1
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d02c      	beq.n	8009934 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d128      	bne.n	8009934 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fe fc2c 	bl	8008144 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009904:	4b0f      	ldr	r3, [pc, #60]	@ (8009944 <xTaskPriorityDisinherit+0xd8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	429a      	cmp	r2, r3
 800990a:	d903      	bls.n	8009914 <xTaskPriorityDisinherit+0xa8>
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009910:	4a0c      	ldr	r2, [pc, #48]	@ (8009944 <xTaskPriorityDisinherit+0xd8>)
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4a09      	ldr	r2, [pc, #36]	@ (8009948 <xTaskPriorityDisinherit+0xdc>)
 8009922:	441a      	add	r2, r3
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f7fe fbad 	bl	800808a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009930:	2301      	movs	r3, #1
 8009932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009934:	697b      	ldr	r3, [r7, #20]
	}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	2000a2c8 	.word	0x2000a2c8
 8009944:	2000a7a4 	.word	0x2000a7a4
 8009948:	2000a2cc 	.word	0x2000a2cc

0800994c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009956:	4b21      	ldr	r3, [pc, #132]	@ (80099dc <prvAddCurrentTaskToDelayedList+0x90>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800995c:	4b20      	ldr	r3, [pc, #128]	@ (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3304      	adds	r3, #4
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fbee 	bl	8008144 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800996e:	d10a      	bne.n	8009986 <prvAddCurrentTaskToDelayedList+0x3a>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d007      	beq.n	8009986 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009976:	4b1a      	ldr	r3, [pc, #104]	@ (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3304      	adds	r3, #4
 800997c:	4619      	mov	r1, r3
 800997e:	4819      	ldr	r0, [pc, #100]	@ (80099e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009980:	f7fe fb83 	bl	800808a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009984:	e026      	b.n	80099d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4413      	add	r3, r2
 800998c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800998e:	4b14      	ldr	r3, [pc, #80]	@ (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	429a      	cmp	r2, r3
 800999c:	d209      	bcs.n	80099b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800999e:	4b12      	ldr	r3, [pc, #72]	@ (80099e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b0f      	ldr	r3, [pc, #60]	@ (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3304      	adds	r3, #4
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f7fe fb91 	bl	80080d2 <vListInsert>
}
 80099b0:	e010      	b.n	80099d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099b2:	4b0e      	ldr	r3, [pc, #56]	@ (80099ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4b0a      	ldr	r3, [pc, #40]	@ (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4619      	mov	r1, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	f7fe fb87 	bl	80080d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099c4:	4b0a      	ldr	r3, [pc, #40]	@ (80099f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d202      	bcs.n	80099d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099ce:	4a08      	ldr	r2, [pc, #32]	@ (80099f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	6013      	str	r3, [r2, #0]
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	2000a7a0 	.word	0x2000a7a0
 80099e0:	2000a2c8 	.word	0x2000a2c8
 80099e4:	2000a788 	.word	0x2000a788
 80099e8:	2000a758 	.word	0x2000a758
 80099ec:	2000a754 	.word	0x2000a754
 80099f0:	2000a7bc 	.word	0x2000a7bc

080099f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	@ 0x28
 80099f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099fe:	f000 fb13 	bl	800a028 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a02:	4b1d      	ldr	r3, [pc, #116]	@ (8009a78 <xTimerCreateTimerTask+0x84>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d021      	beq.n	8009a4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a12:	1d3a      	adds	r2, r7, #4
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	f107 030c 	add.w	r3, r7, #12
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe faed 	bl	8007ffc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	9202      	str	r2, [sp, #8]
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	2300      	movs	r3, #0
 8009a32:	460a      	mov	r2, r1
 8009a34:	4911      	ldr	r1, [pc, #68]	@ (8009a7c <xTimerCreateTimerTask+0x88>)
 8009a36:	4812      	ldr	r0, [pc, #72]	@ (8009a80 <xTimerCreateTimerTask+0x8c>)
 8009a38:	f7ff f8a8 	bl	8008b8c <xTaskCreateStatic>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	4a11      	ldr	r2, [pc, #68]	@ (8009a84 <xTimerCreateTimerTask+0x90>)
 8009a40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a42:	4b10      	ldr	r3, [pc, #64]	@ (8009a84 <xTimerCreateTimerTask+0x90>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10b      	bne.n	8009a6c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	613b      	str	r3, [r7, #16]
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	e7fd      	b.n	8009a68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a6c:	697b      	ldr	r3, [r7, #20]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	2000a7f8 	.word	0x2000a7f8
 8009a7c:	080228f8 	.word	0x080228f8
 8009a80:	08009bc1 	.word	0x08009bc1
 8009a84:	2000a7fc 	.word	0x2000a7fc

08009a88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	@ 0x28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <xTimerGenericCommand+0x30>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	623b      	str	r3, [r7, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	e7fd      	b.n	8009ab4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ab8:	4b19      	ldr	r3, [pc, #100]	@ (8009b20 <xTimerGenericCommand+0x98>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d02a      	beq.n	8009b16 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b05      	cmp	r3, #5
 8009ad0:	dc18      	bgt.n	8009b04 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ad2:	f7ff fead 	bl	8009830 <xTaskGetSchedulerState>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d109      	bne.n	8009af0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009adc:	4b10      	ldr	r3, [pc, #64]	@ (8009b20 <xTimerGenericCommand+0x98>)
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	f107 0110 	add.w	r1, r7, #16
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae8:	f7fe fc60 	bl	80083ac <xQueueGenericSend>
 8009aec:	6278      	str	r0, [r7, #36]	@ 0x24
 8009aee:	e012      	b.n	8009b16 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009af0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b20 <xTimerGenericCommand+0x98>)
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	f107 0110 	add.w	r1, r7, #16
 8009af8:	2300      	movs	r3, #0
 8009afa:	2200      	movs	r2, #0
 8009afc:	f7fe fc56 	bl	80083ac <xQueueGenericSend>
 8009b00:	6278      	str	r0, [r7, #36]	@ 0x24
 8009b02:	e008      	b.n	8009b16 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b04:	4b06      	ldr	r3, [pc, #24]	@ (8009b20 <xTimerGenericCommand+0x98>)
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	f107 0110 	add.w	r1, r7, #16
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	f7fe fd4e 	bl	80085b0 <xQueueGenericSendFromISR>
 8009b14:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3728      	adds	r7, #40	@ 0x28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	2000a7f8 	.word	0x2000a7f8

08009b24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af02      	add	r7, sp, #8
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b2e:	4b23      	ldr	r3, [pc, #140]	@ (8009bbc <prvProcessExpiredTimer+0x98>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe fb01 	bl	8008144 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d023      	beq.n	8009b98 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	699a      	ldr	r2, [r3, #24]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	18d1      	adds	r1, r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	6978      	ldr	r0, [r7, #20]
 8009b5e:	f000 f8d5 	bl	8009d0c <prvInsertTimerInActiveList>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d020      	beq.n	8009baa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	2100      	movs	r1, #0
 8009b72:	6978      	ldr	r0, [r7, #20]
 8009b74:	f7ff ff88 	bl	8009a88 <xTimerGenericCommand>
 8009b78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d114      	bne.n	8009baa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	60fb      	str	r3, [r7, #12]
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	e7fd      	b.n	8009b94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b9e:	f023 0301 	bic.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	6978      	ldr	r0, [r7, #20]
 8009bb0:	4798      	blx	r3
}
 8009bb2:	bf00      	nop
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	2000a7f0 	.word	0x2000a7f0

08009bc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009bc8:	f107 0308 	add.w	r3, r7, #8
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f859 	bl	8009c84 <prvGetNextExpireTime>
 8009bd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f805 	bl	8009be8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009bde:	f000 f8d7 	bl	8009d90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009be2:	bf00      	nop
 8009be4:	e7f0      	b.n	8009bc8 <prvTimerTask+0x8>
	...

08009be8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bf2:	f7ff fa0f 	bl	8009014 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bf6:	f107 0308 	add.w	r3, r7, #8
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f866 	bl	8009ccc <prvSampleTimeNow>
 8009c00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d130      	bne.n	8009c6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <prvProcessTimerOrBlockTask+0x3c>
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d806      	bhi.n	8009c24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c16:	f7ff fa0b 	bl	8009030 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ff81 	bl	8009b24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c22:	e024      	b.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d008      	beq.n	8009c3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c2a:	4b13      	ldr	r3, [pc, #76]	@ (8009c78 <prvProcessTimerOrBlockTask+0x90>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <prvProcessTimerOrBlockTask+0x50>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e000      	b.n	8009c3a <prvProcessTimerOrBlockTask+0x52>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c7c <prvProcessTimerOrBlockTask+0x94>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f7fe ff6b 	bl	8008b24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c4e:	f7ff f9ef 	bl	8009030 <xTaskResumeAll>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c58:	4b09      	ldr	r3, [pc, #36]	@ (8009c80 <prvProcessTimerOrBlockTask+0x98>)
 8009c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	f3bf 8f6f 	isb	sy
}
 8009c68:	e001      	b.n	8009c6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c6a:	f7ff f9e1 	bl	8009030 <xTaskResumeAll>
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000a7f4 	.word	0x2000a7f4
 8009c7c:	2000a7f8 	.word	0x2000a7f8
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc8 <prvGetNextExpireTime+0x44>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <prvGetNextExpireTime+0x16>
 8009c96:	2201      	movs	r2, #1
 8009c98:	e000      	b.n	8009c9c <prvGetNextExpireTime+0x18>
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d105      	bne.n	8009cb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ca8:	4b07      	ldr	r3, [pc, #28]	@ (8009cc8 <prvGetNextExpireTime+0x44>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60fb      	str	r3, [r7, #12]
 8009cb2:	e001      	b.n	8009cb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	2000a7f0 	.word	0x2000a7f0

08009ccc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009cd4:	f7ff fa4a 	bl	800916c <xTaskGetTickCount>
 8009cd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009cda:	4b0b      	ldr	r3, [pc, #44]	@ (8009d08 <prvSampleTimeNow+0x3c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d205      	bcs.n	8009cf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ce4:	f000 f93a 	bl	8009f5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	601a      	str	r2, [r3, #0]
 8009cee:	e002      	b.n	8009cf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cf6:	4a04      	ldr	r2, [pc, #16]	@ (8009d08 <prvSampleTimeNow+0x3c>)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	2000a800 	.word	0x2000a800

08009d0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d812      	bhi.n	8009d58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d302      	bcc.n	8009d46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d40:	2301      	movs	r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e01b      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d46:	4b10      	ldr	r3, [pc, #64]	@ (8009d88 <prvInsertTimerInActiveList+0x7c>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4610      	mov	r0, r2
 8009d52:	f7fe f9be 	bl	80080d2 <vListInsert>
 8009d56:	e012      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d206      	bcs.n	8009d6e <prvInsertTimerInActiveList+0x62>
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d302      	bcc.n	8009d6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	617b      	str	r3, [r7, #20]
 8009d6c:	e007      	b.n	8009d7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d6e:	4b07      	ldr	r3, [pc, #28]	@ (8009d8c <prvInsertTimerInActiveList+0x80>)
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f7fe f9aa 	bl	80080d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	2000a7f4 	.word	0x2000a7f4
 8009d8c:	2000a7f0 	.word	0x2000a7f0

08009d90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08e      	sub	sp, #56	@ 0x38
 8009d94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d96:	e0ce      	b.n	8009f36 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	da19      	bge.n	8009dd2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d9e:	1d3b      	adds	r3, r7, #4
 8009da0:	3304      	adds	r3, #4
 8009da2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10b      	bne.n	8009dc2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	61fb      	str	r3, [r7, #28]
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	e7fd      	b.n	8009dbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dc8:	6850      	ldr	r0, [r2, #4]
 8009dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dcc:	6892      	ldr	r2, [r2, #8]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f2c0 80ae 	blt.w	8009f36 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d004      	beq.n	8009df0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	3304      	adds	r3, #4
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe f9aa 	bl	8008144 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009df0:	463b      	mov	r3, r7
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff ff6a 	bl	8009ccc <prvSampleTimeNow>
 8009df8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b09      	cmp	r3, #9
 8009dfe:	f200 8097 	bhi.w	8009f30 <prvProcessReceivedCommands+0x1a0>
 8009e02:	a201      	add	r2, pc, #4	@ (adr r2, 8009e08 <prvProcessReceivedCommands+0x78>)
 8009e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e08:	08009e31 	.word	0x08009e31
 8009e0c:	08009e31 	.word	0x08009e31
 8009e10:	08009e31 	.word	0x08009e31
 8009e14:	08009ea7 	.word	0x08009ea7
 8009e18:	08009ebb 	.word	0x08009ebb
 8009e1c:	08009f07 	.word	0x08009f07
 8009e20:	08009e31 	.word	0x08009e31
 8009e24:	08009e31 	.word	0x08009e31
 8009e28:	08009ea7 	.word	0x08009ea7
 8009e2c:	08009ebb 	.word	0x08009ebb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e36:	f043 0301 	orr.w	r3, r3, #1
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	18d1      	adds	r1, r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e50:	f7ff ff5c 	bl	8009d0c <prvInsertTimerInActiveList>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d06c      	beq.n	8009f34 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d061      	beq.n	8009f34 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	441a      	add	r2, r3
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e82:	f7ff fe01 	bl	8009a88 <xTimerGenericCommand>
 8009e86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d152      	bne.n	8009f34 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	61bb      	str	r3, [r7, #24]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009eb8:	e03d      	b.n	8009f36 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec0:	f043 0301 	orr.w	r3, r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10b      	bne.n	8009ef2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	617b      	str	r3, [r7, #20]
}
 8009eec:	bf00      	nop
 8009eee:	bf00      	nop
 8009ef0:	e7fd      	b.n	8009eee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef8:	18d1      	adds	r1, r2, r3
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f00:	f7ff ff04 	bl	8009d0c <prvInsertTimerInActiveList>
					break;
 8009f04:	e017      	b.n	8009f36 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f0c:	f003 0302 	and.w	r3, r3, #2
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009f14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f16:	f000 fbe7 	bl	800a6e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f1a:	e00c      	b.n	8009f36 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f22:	f023 0301 	bic.w	r3, r3, #1
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009f2e:	e002      	b.n	8009f36 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009f30:	bf00      	nop
 8009f32:	e000      	b.n	8009f36 <prvProcessReceivedCommands+0x1a6>
					break;
 8009f34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f36:	4b08      	ldr	r3, [pc, #32]	@ (8009f58 <prvProcessReceivedCommands+0x1c8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	1d39      	adds	r1, r7, #4
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe fbd4 	bl	80086ec <xQueueReceive>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f47f af26 	bne.w	8009d98 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	3730      	adds	r7, #48	@ 0x30
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	2000a7f8 	.word	0x2000a7f8

08009f5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f62:	e049      	b.n	8009ff8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f64:	4b2e      	ldr	r3, [pc, #184]	@ (800a020 <prvSwitchTimerLists+0xc4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f6e:	4b2c      	ldr	r3, [pc, #176]	@ (800a020 <prvSwitchTimerLists+0xc4>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe f8e1 	bl	8008144 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f90:	f003 0304 	and.w	r3, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d02f      	beq.n	8009ff8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d90e      	bls.n	8009fc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fb6:	4b1a      	ldr	r3, [pc, #104]	@ (800a020 <prvSwitchTimerLists+0xc4>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	f7fe f886 	bl	80080d2 <vListInsert>
 8009fc6:	e017      	b.n	8009ff8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fc8:	2300      	movs	r3, #0
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7ff fd58 	bl	8009a88 <xTimerGenericCommand>
 8009fd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10b      	bne.n	8009ff8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	603b      	str	r3, [r7, #0]
}
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	e7fd      	b.n	8009ff4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ff8:	4b09      	ldr	r3, [pc, #36]	@ (800a020 <prvSwitchTimerLists+0xc4>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1b0      	bne.n	8009f64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a002:	4b07      	ldr	r3, [pc, #28]	@ (800a020 <prvSwitchTimerLists+0xc4>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a008:	4b06      	ldr	r3, [pc, #24]	@ (800a024 <prvSwitchTimerLists+0xc8>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a04      	ldr	r2, [pc, #16]	@ (800a020 <prvSwitchTimerLists+0xc4>)
 800a00e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a010:	4a04      	ldr	r2, [pc, #16]	@ (800a024 <prvSwitchTimerLists+0xc8>)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	6013      	str	r3, [r2, #0]
}
 800a016:	bf00      	nop
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	2000a7f0 	.word	0x2000a7f0
 800a024:	2000a7f4 	.word	0x2000a7f4

0800a028 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a02e:	f000 f96b 	bl	800a308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a032:	4b15      	ldr	r3, [pc, #84]	@ (800a088 <prvCheckForValidListAndQueue+0x60>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d120      	bne.n	800a07c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a03a:	4814      	ldr	r0, [pc, #80]	@ (800a08c <prvCheckForValidListAndQueue+0x64>)
 800a03c:	f7fd fff8 	bl	8008030 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a040:	4813      	ldr	r0, [pc, #76]	@ (800a090 <prvCheckForValidListAndQueue+0x68>)
 800a042:	f7fd fff5 	bl	8008030 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a046:	4b13      	ldr	r3, [pc, #76]	@ (800a094 <prvCheckForValidListAndQueue+0x6c>)
 800a048:	4a10      	ldr	r2, [pc, #64]	@ (800a08c <prvCheckForValidListAndQueue+0x64>)
 800a04a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a04c:	4b12      	ldr	r3, [pc, #72]	@ (800a098 <prvCheckForValidListAndQueue+0x70>)
 800a04e:	4a10      	ldr	r2, [pc, #64]	@ (800a090 <prvCheckForValidListAndQueue+0x68>)
 800a050:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a052:	2300      	movs	r3, #0
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	4b11      	ldr	r3, [pc, #68]	@ (800a09c <prvCheckForValidListAndQueue+0x74>)
 800a058:	4a11      	ldr	r2, [pc, #68]	@ (800a0a0 <prvCheckForValidListAndQueue+0x78>)
 800a05a:	2110      	movs	r1, #16
 800a05c:	200a      	movs	r0, #10
 800a05e:	f7fe f905 	bl	800826c <xQueueGenericCreateStatic>
 800a062:	4603      	mov	r3, r0
 800a064:	4a08      	ldr	r2, [pc, #32]	@ (800a088 <prvCheckForValidListAndQueue+0x60>)
 800a066:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a068:	4b07      	ldr	r3, [pc, #28]	@ (800a088 <prvCheckForValidListAndQueue+0x60>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d005      	beq.n	800a07c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a070:	4b05      	ldr	r3, [pc, #20]	@ (800a088 <prvCheckForValidListAndQueue+0x60>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	490b      	ldr	r1, [pc, #44]	@ (800a0a4 <prvCheckForValidListAndQueue+0x7c>)
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fd2a 	bl	8008ad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a07c:	f000 f976 	bl	800a36c <vPortExitCritical>
}
 800a080:	bf00      	nop
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	2000a7f8 	.word	0x2000a7f8
 800a08c:	2000a7c8 	.word	0x2000a7c8
 800a090:	2000a7dc 	.word	0x2000a7dc
 800a094:	2000a7f0 	.word	0x2000a7f0
 800a098:	2000a7f4 	.word	0x2000a7f4
 800a09c:	2000a8a4 	.word	0x2000a8a4
 800a0a0:	2000a804 	.word	0x2000a804
 800a0a4:	08022900 	.word	0x08022900

0800a0a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3b04      	subs	r3, #4
 800a0b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3b04      	subs	r3, #4
 800a0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	f023 0201 	bic.w	r2, r3, #1
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3b04      	subs	r3, #4
 800a0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0d8:	4a0c      	ldr	r2, [pc, #48]	@ (800a10c <pxPortInitialiseStack+0x64>)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3b14      	subs	r3, #20
 800a0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3b04      	subs	r3, #4
 800a0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f06f 0202 	mvn.w	r2, #2
 800a0f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3b20      	subs	r3, #32
 800a0fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	0800a111 	.word	0x0800a111

0800a110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a11a:	4b13      	ldr	r3, [pc, #76]	@ (800a168 <prvTaskExitError+0x58>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a122:	d00b      	beq.n	800a13c <prvTaskExitError+0x2c>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	60fb      	str	r3, [r7, #12]
}
 800a136:	bf00      	nop
 800a138:	bf00      	nop
 800a13a:	e7fd      	b.n	800a138 <prvTaskExitError+0x28>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	60bb      	str	r3, [r7, #8]
}
 800a14e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a150:	bf00      	nop
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0fc      	beq.n	800a152 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	200000d0 	.word	0x200000d0
 800a16c:	00000000 	.word	0x00000000

0800a170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a170:	4b07      	ldr	r3, [pc, #28]	@ (800a190 <pxCurrentTCBConst2>)
 800a172:	6819      	ldr	r1, [r3, #0]
 800a174:	6808      	ldr	r0, [r1, #0]
 800a176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17a:	f380 8809 	msr	PSP, r0
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f04f 0000 	mov.w	r0, #0
 800a186:	f380 8811 	msr	BASEPRI, r0
 800a18a:	4770      	bx	lr
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst2>:
 800a190:	2000a2c8 	.word	0x2000a2c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a198:	4808      	ldr	r0, [pc, #32]	@ (800a1bc <prvPortStartFirstTask+0x24>)
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	6800      	ldr	r0, [r0, #0]
 800a19e:	f380 8808 	msr	MSP, r0
 800a1a2:	f04f 0000 	mov.w	r0, #0
 800a1a6:	f380 8814 	msr	CONTROL, r0
 800a1aa:	b662      	cpsie	i
 800a1ac:	b661      	cpsie	f
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	df00      	svc	0
 800a1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ba:	bf00      	nop
 800a1bc:	e000ed08 	.word	0xe000ed08

0800a1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1c6:	4b47      	ldr	r3, [pc, #284]	@ (800a2e4 <xPortStartScheduler+0x124>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a47      	ldr	r2, [pc, #284]	@ (800a2e8 <xPortStartScheduler+0x128>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d10b      	bne.n	800a1e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	613b      	str	r3, [r7, #16]
}
 800a1e2:	bf00      	nop
 800a1e4:	bf00      	nop
 800a1e6:	e7fd      	b.n	800a1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a1e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2e4 <xPortStartScheduler+0x124>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a2ec <xPortStartScheduler+0x12c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d10b      	bne.n	800a20a <xPortStartScheduler+0x4a>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	60fb      	str	r3, [r7, #12]
}
 800a204:	bf00      	nop
 800a206:	bf00      	nop
 800a208:	e7fd      	b.n	800a206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a20a:	4b39      	ldr	r3, [pc, #228]	@ (800a2f0 <xPortStartScheduler+0x130>)
 800a20c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	22ff      	movs	r2, #255	@ 0xff
 800a21a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a224:	78fb      	ldrb	r3, [r7, #3]
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	4b31      	ldr	r3, [pc, #196]	@ (800a2f4 <xPortStartScheduler+0x134>)
 800a230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a232:	4b31      	ldr	r3, [pc, #196]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a234:	2207      	movs	r2, #7
 800a236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a238:	e009      	b.n	800a24e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a23a:	4b2f      	ldr	r3, [pc, #188]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3b01      	subs	r3, #1
 800a240:	4a2d      	ldr	r2, [pc, #180]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	b2db      	uxtb	r3, r3
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a24e:	78fb      	ldrb	r3, [r7, #3]
 800a250:	b2db      	uxtb	r3, r3
 800a252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a256:	2b80      	cmp	r3, #128	@ 0x80
 800a258:	d0ef      	beq.n	800a23a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a25a:	4b27      	ldr	r3, [pc, #156]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f1c3 0307 	rsb	r3, r3, #7
 800a262:	2b04      	cmp	r3, #4
 800a264:	d00b      	beq.n	800a27e <xPortStartScheduler+0xbe>
	__asm volatile
 800a266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a26a:	f383 8811 	msr	BASEPRI, r3
 800a26e:	f3bf 8f6f 	isb	sy
 800a272:	f3bf 8f4f 	dsb	sy
 800a276:	60bb      	str	r3, [r7, #8]
}
 800a278:	bf00      	nop
 800a27a:	bf00      	nop
 800a27c:	e7fd      	b.n	800a27a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a27e:	4b1e      	ldr	r3, [pc, #120]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	021b      	lsls	r3, r3, #8
 800a284:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a288:	4b1b      	ldr	r3, [pc, #108]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a290:	4a19      	ldr	r2, [pc, #100]	@ (800a2f8 <xPortStartScheduler+0x138>)
 800a292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	b2da      	uxtb	r2, r3
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a29c:	4b17      	ldr	r3, [pc, #92]	@ (800a2fc <xPortStartScheduler+0x13c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a16      	ldr	r2, [pc, #88]	@ (800a2fc <xPortStartScheduler+0x13c>)
 800a2a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a2a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2a8:	4b14      	ldr	r3, [pc, #80]	@ (800a2fc <xPortStartScheduler+0x13c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a13      	ldr	r2, [pc, #76]	@ (800a2fc <xPortStartScheduler+0x13c>)
 800a2ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a2b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2b4:	f000 f8da 	bl	800a46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2b8:	4b11      	ldr	r3, [pc, #68]	@ (800a300 <xPortStartScheduler+0x140>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2be:	f000 f8f9 	bl	800a4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2c2:	4b10      	ldr	r3, [pc, #64]	@ (800a304 <xPortStartScheduler+0x144>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a304 <xPortStartScheduler+0x144>)
 800a2c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a2cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2ce:	f7ff ff63 	bl	800a198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2d2:	f7ff f815 	bl	8009300 <vTaskSwitchContext>
	prvTaskExitError();
 800a2d6:	f7ff ff1b 	bl	800a110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	e000ed00 	.word	0xe000ed00
 800a2e8:	410fc271 	.word	0x410fc271
 800a2ec:	410fc270 	.word	0x410fc270
 800a2f0:	e000e400 	.word	0xe000e400
 800a2f4:	2000a8f4 	.word	0x2000a8f4
 800a2f8:	2000a8f8 	.word	0x2000a8f8
 800a2fc:	e000ed20 	.word	0xe000ed20
 800a300:	200000d0 	.word	0x200000d0
 800a304:	e000ef34 	.word	0xe000ef34

0800a308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	607b      	str	r3, [r7, #4]
}
 800a320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a322:	4b10      	ldr	r3, [pc, #64]	@ (800a364 <vPortEnterCritical+0x5c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3301      	adds	r3, #1
 800a328:	4a0e      	ldr	r2, [pc, #56]	@ (800a364 <vPortEnterCritical+0x5c>)
 800a32a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a32c:	4b0d      	ldr	r3, [pc, #52]	@ (800a364 <vPortEnterCritical+0x5c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d110      	bne.n	800a356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a334:	4b0c      	ldr	r3, [pc, #48]	@ (800a368 <vPortEnterCritical+0x60>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00b      	beq.n	800a356 <vPortEnterCritical+0x4e>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	603b      	str	r3, [r7, #0]
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	e7fd      	b.n	800a352 <vPortEnterCritical+0x4a>
	}
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	200000d0 	.word	0x200000d0
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a372:	4b12      	ldr	r3, [pc, #72]	@ (800a3bc <vPortExitCritical+0x50>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <vPortExitCritical+0x26>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	607b      	str	r3, [r7, #4]
}
 800a38c:	bf00      	nop
 800a38e:	bf00      	nop
 800a390:	e7fd      	b.n	800a38e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a392:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <vPortExitCritical+0x50>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3b01      	subs	r3, #1
 800a398:	4a08      	ldr	r2, [pc, #32]	@ (800a3bc <vPortExitCritical+0x50>)
 800a39a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a39c:	4b07      	ldr	r3, [pc, #28]	@ (800a3bc <vPortExitCritical+0x50>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d105      	bne.n	800a3b0 <vPortExitCritical+0x44>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	f383 8811 	msr	BASEPRI, r3
}
 800a3ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	200000d0 	.word	0x200000d0

0800a3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3c0:	f3ef 8009 	mrs	r0, PSP
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	4b15      	ldr	r3, [pc, #84]	@ (800a420 <pxCurrentTCBConst>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	f01e 0f10 	tst.w	lr, #16
 800a3d0:	bf08      	it	eq
 800a3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3da:	6010      	str	r0, [r2, #0]
 800a3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a3e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a3e4:	f380 8811 	msr	BASEPRI, r0
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f7fe ff86 	bl	8009300 <vTaskSwitchContext>
 800a3f4:	f04f 0000 	mov.w	r0, #0
 800a3f8:	f380 8811 	msr	BASEPRI, r0
 800a3fc:	bc09      	pop	{r0, r3}
 800a3fe:	6819      	ldr	r1, [r3, #0]
 800a400:	6808      	ldr	r0, [r1, #0]
 800a402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a406:	f01e 0f10 	tst.w	lr, #16
 800a40a:	bf08      	it	eq
 800a40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a410:	f380 8809 	msr	PSP, r0
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	f3af 8000 	nop.w

0800a420 <pxCurrentTCBConst>:
 800a420:	2000a2c8 	.word	0x2000a2c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop

0800a428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	607b      	str	r3, [r7, #4]
}
 800a440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a442:	f7fe fea3 	bl	800918c <xTaskIncrementTick>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a44c:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <xPortSysTickHandler+0x40>)
 800a44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	2300      	movs	r3, #0
 800a456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	f383 8811 	msr	BASEPRI, r3
}
 800a45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a470:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a0 <vPortSetupTimerInterrupt+0x34>)
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a476:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a4 <vPortSetupTimerInterrupt+0x38>)
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a47c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <vPortSetupTimerInterrupt+0x3c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a0a      	ldr	r2, [pc, #40]	@ (800a4ac <vPortSetupTimerInterrupt+0x40>)
 800a482:	fba2 2303 	umull	r2, r3, r2, r3
 800a486:	099b      	lsrs	r3, r3, #6
 800a488:	4a09      	ldr	r2, [pc, #36]	@ (800a4b0 <vPortSetupTimerInterrupt+0x44>)
 800a48a:	3b01      	subs	r3, #1
 800a48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a48e:	4b04      	ldr	r3, [pc, #16]	@ (800a4a0 <vPortSetupTimerInterrupt+0x34>)
 800a490:	2207      	movs	r2, #7
 800a492:	601a      	str	r2, [r3, #0]
}
 800a494:	bf00      	nop
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	e000e010 	.word	0xe000e010
 800a4a4:	e000e018 	.word	0xe000e018
 800a4a8:	20000004 	.word	0x20000004
 800a4ac:	10624dd3 	.word	0x10624dd3
 800a4b0:	e000e014 	.word	0xe000e014

0800a4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a4c4 <vPortEnableVFP+0x10>
 800a4b8:	6801      	ldr	r1, [r0, #0]
 800a4ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a4be:	6001      	str	r1, [r0, #0]
 800a4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4c2:	bf00      	nop
 800a4c4:	e000ed88 	.word	0xe000ed88

0800a4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4ce:	f3ef 8305 	mrs	r3, IPSR
 800a4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b0f      	cmp	r3, #15
 800a4d8:	d915      	bls.n	800a506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a4da:	4a18      	ldr	r2, [pc, #96]	@ (800a53c <vPortValidateInterruptPriority+0x74>)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4413      	add	r3, r2
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a4e4:	4b16      	ldr	r3, [pc, #88]	@ (800a540 <vPortValidateInterruptPriority+0x78>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	7afa      	ldrb	r2, [r7, #11]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d20b      	bcs.n	800a506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	607b      	str	r3, [r7, #4]
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	e7fd      	b.n	800a502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a506:	4b0f      	ldr	r3, [pc, #60]	@ (800a544 <vPortValidateInterruptPriority+0x7c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a50e:	4b0e      	ldr	r3, [pc, #56]	@ (800a548 <vPortValidateInterruptPriority+0x80>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d90b      	bls.n	800a52e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	603b      	str	r3, [r7, #0]
}
 800a528:	bf00      	nop
 800a52a:	bf00      	nop
 800a52c:	e7fd      	b.n	800a52a <vPortValidateInterruptPriority+0x62>
	}
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	e000e3f0 	.word	0xe000e3f0
 800a540:	2000a8f4 	.word	0x2000a8f4
 800a544:	e000ed0c 	.word	0xe000ed0c
 800a548:	2000a8f8 	.word	0x2000a8f8

0800a54c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08a      	sub	sp, #40	@ 0x28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a558:	f7fe fd5c 	bl	8009014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a55c:	4b5c      	ldr	r3, [pc, #368]	@ (800a6d0 <pvPortMalloc+0x184>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a564:	f000 f924 	bl	800a7b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a568:	4b5a      	ldr	r3, [pc, #360]	@ (800a6d4 <pvPortMalloc+0x188>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4013      	ands	r3, r2
 800a570:	2b00      	cmp	r3, #0
 800a572:	f040 8095 	bne.w	800a6a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d01e      	beq.n	800a5ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a57c:	2208      	movs	r2, #8
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4413      	add	r3, r2
 800a582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d015      	beq.n	800a5ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f023 0307 	bic.w	r3, r3, #7
 800a594:	3308      	adds	r3, #8
 800a596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00b      	beq.n	800a5ba <pvPortMalloc+0x6e>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	617b      	str	r3, [r7, #20]
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	e7fd      	b.n	800a5b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d06f      	beq.n	800a6a0 <pvPortMalloc+0x154>
 800a5c0:	4b45      	ldr	r3, [pc, #276]	@ (800a6d8 <pvPortMalloc+0x18c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d86a      	bhi.n	800a6a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5ca:	4b44      	ldr	r3, [pc, #272]	@ (800a6dc <pvPortMalloc+0x190>)
 800a5cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5ce:	4b43      	ldr	r3, [pc, #268]	@ (800a6dc <pvPortMalloc+0x190>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5d4:	e004      	b.n	800a5e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d903      	bls.n	800a5f2 <pvPortMalloc+0xa6>
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1f1      	bne.n	800a5d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a5f2:	4b37      	ldr	r3, [pc, #220]	@ (800a6d0 <pvPortMalloc+0x184>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d051      	beq.n	800a6a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2208      	movs	r2, #8
 800a602:	4413      	add	r3, r2
 800a604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	1ad2      	subs	r2, r2, r3
 800a616:	2308      	movs	r3, #8
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d920      	bls.n	800a660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4413      	add	r3, r2
 800a624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f003 0307 	and.w	r3, r3, #7
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00b      	beq.n	800a648 <pvPortMalloc+0xfc>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	613b      	str	r3, [r7, #16]
}
 800a642:	bf00      	nop
 800a644:	bf00      	nop
 800a646:	e7fd      	b.n	800a644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	685a      	ldr	r2, [r3, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a65a:	69b8      	ldr	r0, [r7, #24]
 800a65c:	f000 f90a 	bl	800a874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a660:	4b1d      	ldr	r3, [pc, #116]	@ (800a6d8 <pvPortMalloc+0x18c>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6d8 <pvPortMalloc+0x18c>)
 800a66c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a66e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d8 <pvPortMalloc+0x18c>)
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4b1b      	ldr	r3, [pc, #108]	@ (800a6e0 <pvPortMalloc+0x194>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d203      	bcs.n	800a682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a67a:	4b17      	ldr	r3, [pc, #92]	@ (800a6d8 <pvPortMalloc+0x18c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a18      	ldr	r2, [pc, #96]	@ (800a6e0 <pvPortMalloc+0x194>)
 800a680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	4b13      	ldr	r3, [pc, #76]	@ (800a6d4 <pvPortMalloc+0x188>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	431a      	orrs	r2, r3
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a696:	4b13      	ldr	r3, [pc, #76]	@ (800a6e4 <pvPortMalloc+0x198>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3301      	adds	r3, #1
 800a69c:	4a11      	ldr	r2, [pc, #68]	@ (800a6e4 <pvPortMalloc+0x198>)
 800a69e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6a0:	f7fe fcc6 	bl	8009030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00b      	beq.n	800a6c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	60fb      	str	r3, [r7, #12]
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	e7fd      	b.n	800a6c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a6c6:	69fb      	ldr	r3, [r7, #28]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3728      	adds	r7, #40	@ 0x28
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20011e34 	.word	0x20011e34
 800a6d4:	20011e48 	.word	0x20011e48
 800a6d8:	20011e38 	.word	0x20011e38
 800a6dc:	20011e2c 	.word	0x20011e2c
 800a6e0:	20011e3c 	.word	0x20011e3c
 800a6e4:	20011e40 	.word	0x20011e40

0800a6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d04f      	beq.n	800a79a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a6fa:	2308      	movs	r3, #8
 800a6fc:	425b      	negs	r3, r3
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	4413      	add	r3, r2
 800a702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	4b25      	ldr	r3, [pc, #148]	@ (800a7a4 <vPortFree+0xbc>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4013      	ands	r3, r2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10b      	bne.n	800a72e <vPortFree+0x46>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	60fb      	str	r3, [r7, #12]
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	e7fd      	b.n	800a72a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00b      	beq.n	800a74e <vPortFree+0x66>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60bb      	str	r3, [r7, #8]
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	e7fd      	b.n	800a74a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	4b14      	ldr	r3, [pc, #80]	@ (800a7a4 <vPortFree+0xbc>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4013      	ands	r3, r2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01e      	beq.n	800a79a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d11a      	bne.n	800a79a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	4b0e      	ldr	r3, [pc, #56]	@ (800a7a4 <vPortFree+0xbc>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	43db      	mvns	r3, r3
 800a76e:	401a      	ands	r2, r3
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a774:	f7fe fc4e 	bl	8009014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a8 <vPortFree+0xc0>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4413      	add	r3, r2
 800a782:	4a09      	ldr	r2, [pc, #36]	@ (800a7a8 <vPortFree+0xc0>)
 800a784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a786:	6938      	ldr	r0, [r7, #16]
 800a788:	f000 f874 	bl	800a874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a78c:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <vPortFree+0xc4>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	4a06      	ldr	r2, [pc, #24]	@ (800a7ac <vPortFree+0xc4>)
 800a794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a796:	f7fe fc4b 	bl	8009030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a79a:	bf00      	nop
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20011e48 	.word	0x20011e48
 800a7a8:	20011e38 	.word	0x20011e38
 800a7ac:	20011e44 	.word	0x20011e44

0800a7b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7b6:	f247 5330 	movw	r3, #30000	@ 0x7530
 800a7ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7bc:	4b27      	ldr	r3, [pc, #156]	@ (800a85c <prvHeapInit+0xac>)
 800a7be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f003 0307 	and.w	r3, r3, #7
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00c      	beq.n	800a7e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3307      	adds	r3, #7
 800a7ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f023 0307 	bic.w	r3, r3, #7
 800a7d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	4a1f      	ldr	r2, [pc, #124]	@ (800a85c <prvHeapInit+0xac>)
 800a7e0:	4413      	add	r3, r2
 800a7e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a860 <prvHeapInit+0xb0>)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a860 <prvHeapInit+0xb0>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a7fc:	2208      	movs	r2, #8
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1a9b      	subs	r3, r3, r2
 800a802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f023 0307 	bic.w	r3, r3, #7
 800a80a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4a15      	ldr	r2, [pc, #84]	@ (800a864 <prvHeapInit+0xb4>)
 800a810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a812:	4b14      	ldr	r3, [pc, #80]	@ (800a864 <prvHeapInit+0xb4>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2200      	movs	r2, #0
 800a818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a81a:	4b12      	ldr	r3, [pc, #72]	@ (800a864 <prvHeapInit+0xb4>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2200      	movs	r2, #0
 800a820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	1ad2      	subs	r2, r2, r3
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a830:	4b0c      	ldr	r3, [pc, #48]	@ (800a864 <prvHeapInit+0xb4>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	4a0a      	ldr	r2, [pc, #40]	@ (800a868 <prvHeapInit+0xb8>)
 800a83e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	4a09      	ldr	r2, [pc, #36]	@ (800a86c <prvHeapInit+0xbc>)
 800a846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a848:	4b09      	ldr	r3, [pc, #36]	@ (800a870 <prvHeapInit+0xc0>)
 800a84a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a84e:	601a      	str	r2, [r3, #0]
}
 800a850:	bf00      	nop
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	2000a8fc 	.word	0x2000a8fc
 800a860:	20011e2c 	.word	0x20011e2c
 800a864:	20011e34 	.word	0x20011e34
 800a868:	20011e3c 	.word	0x20011e3c
 800a86c:	20011e38 	.word	0x20011e38
 800a870:	20011e48 	.word	0x20011e48

0800a874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a87c:	4b28      	ldr	r3, [pc, #160]	@ (800a920 <prvInsertBlockIntoFreeList+0xac>)
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e002      	b.n	800a888 <prvInsertBlockIntoFreeList+0x14>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d8f7      	bhi.n	800a882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	4413      	add	r3, r2
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d108      	bne.n	800a8b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	441a      	add	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	441a      	add	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d118      	bne.n	800a8fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	4b15      	ldr	r3, [pc, #84]	@ (800a924 <prvInsertBlockIntoFreeList+0xb0>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d00d      	beq.n	800a8f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	441a      	add	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	e008      	b.n	800a904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a924 <prvInsertBlockIntoFreeList+0xb0>)
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	e003      	b.n	800a904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d002      	beq.n	800a912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a912:	bf00      	nop
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20011e2c 	.word	0x20011e2c
 800a924:	20011e34 	.word	0x20011e34

0800a928 <arm_pid_init_f32>:
 800a928:	edd0 6a08 	vldr	s13, [r0, #32]
 800a92c:	edd0 7a06 	vldr	s15, [r0, #24]
 800a930:	ed90 7a07 	vldr	s14, [r0, #28]
 800a934:	edc0 6a02 	vstr	s13, [r0, #8]
 800a938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a93c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 800a940:	eef1 7a67 	vneg.f32	s15, s15
 800a944:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a948:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a94c:	ed80 7a00 	vstr	s14, [r0]
 800a950:	edc0 7a01 	vstr	s15, [r0, #4]
 800a954:	b901      	cbnz	r1, 800a958 <arm_pid_init_f32+0x30>
 800a956:	4770      	bx	lr
 800a958:	2300      	movs	r3, #0
 800a95a:	60c3      	str	r3, [r0, #12]
 800a95c:	6103      	str	r3, [r0, #16]
 800a95e:	6143      	str	r3, [r0, #20]
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop

0800a964 <arm_mat_mult_f32>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	460c      	mov	r4, r1
 800a96a:	b08b      	sub	sp, #44	@ 0x2c
 800a96c:	8825      	ldrh	r5, [r4, #0]
 800a96e:	9107      	str	r1, [sp, #28]
 800a970:	8841      	ldrh	r1, [r0, #2]
 800a972:	8806      	ldrh	r6, [r0, #0]
 800a974:	6843      	ldr	r3, [r0, #4]
 800a976:	6857      	ldr	r7, [r2, #4]
 800a978:	6860      	ldr	r0, [r4, #4]
 800a97a:	9602      	str	r6, [sp, #8]
 800a97c:	428d      	cmp	r5, r1
 800a97e:	8864      	ldrh	r4, [r4, #2]
 800a980:	f040 80f9 	bne.w	800ab76 <arm_mat_mult_f32+0x212>
 800a984:	8811      	ldrh	r1, [r2, #0]
 800a986:	42b1      	cmp	r1, r6
 800a988:	f040 80f5 	bne.w	800ab76 <arm_mat_mult_f32+0x212>
 800a98c:	8851      	ldrh	r1, [r2, #2]
 800a98e:	42a1      	cmp	r1, r4
 800a990:	f040 80f1 	bne.w	800ab76 <arm_mat_mult_f32+0x212>
 800a994:	00aa      	lsls	r2, r5, #2
 800a996:	2901      	cmp	r1, #1
 800a998:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 800a99c:	ea4f 0481 	mov.w	r4, r1, lsl #2
 800a9a0:	f005 0e03 	and.w	lr, r5, #3
 800a9a4:	9206      	str	r2, [sp, #24]
 800a9a6:	d170      	bne.n	800aa8a <arm_mat_mult_f32+0x126>
 800a9a8:	1d01      	adds	r1, r0, #4
 800a9aa:	9105      	str	r1, [sp, #20]
 800a9ac:	ea4f 110c 	mov.w	r1, ip, lsl #4
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	f107 0904 	add.w	r9, r7, #4
 800a9b6:	9101      	str	r1, [sp, #4]
 800a9b8:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 800a9bc:	f103 0a10 	add.w	sl, r3, #16
 800a9c0:	f1aa 0310 	sub.w	r3, sl, #16
 800a9c4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a9c8:	9303      	str	r3, [sp, #12]
 800a9ca:	f1a9 0704 	sub.w	r7, r9, #4
 800a9ce:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 800ab80 <arm_mat_mult_f32+0x21c>
 800a9d2:	f1bc 0f00 	cmp.w	ip, #0
 800a9d6:	d052      	beq.n	800aa7e <arm_mat_mult_f32+0x11a>
 800a9d8:	f102 0008 	add.w	r0, r2, #8
 800a9dc:	4653      	mov	r3, sl
 800a9de:	4665      	mov	r5, ip
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	ed13 6a04 	vldr	s12, [r3, #-16]
 800a9e6:	ed91 7a00 	vldr	s14, [r1]
 800a9ea:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a9ee:	edd0 6a00 	vldr	s13, [r0]
 800a9f2:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a9f6:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a9fa:	190e      	adds	r6, r1, r4
 800a9fc:	ee27 7a06 	vmul.f32	s14, s14, s12
 800aa00:	ed96 6a00 	vldr	s12, [r6]
 800aa04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa08:	ee26 6a24 	vmul.f32	s12, s12, s9
 800aa0c:	1906      	adds	r6, r0, r4
 800aa0e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800aa12:	ee26 7a85 	vmul.f32	s14, s13, s10
 800aa16:	edd6 7a00 	vldr	s15, [r6]
 800aa1a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aa1e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800aa22:	3d01      	subs	r5, #1
 800aa24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa28:	f101 0110 	add.w	r1, r1, #16
 800aa2c:	f100 0010 	add.w	r0, r0, #16
 800aa30:	f103 0310 	add.w	r3, r3, #16
 800aa34:	d1d5      	bne.n	800a9e2 <arm_mat_mult_f32+0x7e>
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	4659      	mov	r1, fp
 800aa3a:	441a      	add	r2, r3
 800aa3c:	f1be 0f00 	cmp.w	lr, #0
 800aa40:	d00b      	beq.n	800aa5a <arm_mat_mult_f32+0xf6>
 800aa42:	4673      	mov	r3, lr
 800aa44:	ed92 7a00 	vldr	s14, [r2]
 800aa48:	ecf1 6a01 	vldmia	r1!, {s13}
 800aa4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800aa50:	3b01      	subs	r3, #1
 800aa52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa56:	4422      	add	r2, r4
 800aa58:	d1f4      	bne.n	800aa44 <arm_mat_mult_f32+0xe0>
 800aa5a:	ece7 7a01 	vstmia	r7!, {s15}
 800aa5e:	454f      	cmp	r7, r9
 800aa60:	4642      	mov	r2, r8
 800aa62:	f108 0804 	add.w	r8, r8, #4
 800aa66:	d1b2      	bne.n	800a9ce <arm_mat_mult_f32+0x6a>
 800aa68:	9b06      	ldr	r3, [sp, #24]
 800aa6a:	449b      	add	fp, r3
 800aa6c:	449a      	add	sl, r3
 800aa6e:	9b02      	ldr	r3, [sp, #8]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	44a1      	add	r9, r4
 800aa74:	9302      	str	r3, [sp, #8]
 800aa76:	d004      	beq.n	800aa82 <arm_mat_mult_f32+0x11e>
 800aa78:	9b07      	ldr	r3, [sp, #28]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	e7a0      	b.n	800a9c0 <arm_mat_mult_f32+0x5c>
 800aa7e:	9903      	ldr	r1, [sp, #12]
 800aa80:	e7dc      	b.n	800aa3c <arm_mat_mult_f32+0xd8>
 800aa82:	4618      	mov	r0, r3
 800aa84:	b00b      	add	sp, #44	@ 0x2c
 800aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8a:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 800aa8e:	0092      	lsls	r2, r2, #2
 800aa90:	010e      	lsls	r6, r1, #4
 800aa92:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa94:	00ca      	lsls	r2, r1, #3
 800aa96:	9204      	str	r2, [sp, #16]
 800aa98:	fb06 f20c 	mul.w	r2, r6, ip
 800aa9c:	1d05      	adds	r5, r0, #4
 800aa9e:	9203      	str	r2, [sp, #12]
 800aaa0:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800aaa4:	eb07 0b04 	add.w	fp, r7, r4
 800aaa8:	9505      	str	r5, [sp, #20]
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	f103 0a10 	add.w	sl, r3, #16
 800aab0:	f1aa 0310 	sub.w	r3, sl, #16
 800aab4:	9308      	str	r3, [sp, #32]
 800aab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aabc:	eb0b 0803 	add.w	r8, fp, r3
 800aac0:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800ab80 <arm_mat_mult_f32+0x21c>
 800aac4:	f1bc 0f00 	cmp.w	ip, #0
 800aac8:	d053      	beq.n	800ab72 <arm_mat_mult_f32+0x20e>
 800aaca:	9b04      	ldr	r3, [sp, #16]
 800aacc:	4665      	mov	r5, ip
 800aace:	18c1      	adds	r1, r0, r3
 800aad0:	4602      	mov	r2, r0
 800aad2:	4653      	mov	r3, sl
 800aad4:	ed92 6a00 	vldr	s12, [r2]
 800aad8:	ed13 7a04 	vldr	s14, [r3, #-16]
 800aadc:	ed53 4a03 	vldr	s9, [r3, #-12]
 800aae0:	ed53 6a02 	vldr	s13, [r3, #-8]
 800aae4:	ed91 5a00 	vldr	s10, [r1]
 800aae8:	ed53 5a01 	vldr	s11, [r3, #-4]
 800aaec:	1917      	adds	r7, r2, r4
 800aaee:	ee27 7a06 	vmul.f32	s14, s14, s12
 800aaf2:	ed97 6a00 	vldr	s12, [r7]
 800aaf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aafa:	ee26 6a24 	vmul.f32	s12, s12, s9
 800aafe:	190f      	adds	r7, r1, r4
 800ab00:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ab04:	ee26 7a85 	vmul.f32	s14, s13, s10
 800ab08:	edd7 7a00 	vldr	s15, [r7]
 800ab0c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ab10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ab14:	3d01      	subs	r5, #1
 800ab16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab1a:	4432      	add	r2, r6
 800ab1c:	4431      	add	r1, r6
 800ab1e:	f103 0310 	add.w	r3, r3, #16
 800ab22:	d1d7      	bne.n	800aad4 <arm_mat_mult_f32+0x170>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	9a01      	ldr	r2, [sp, #4]
 800ab28:	4418      	add	r0, r3
 800ab2a:	f1be 0f00 	cmp.w	lr, #0
 800ab2e:	d00b      	beq.n	800ab48 <arm_mat_mult_f32+0x1e4>
 800ab30:	4673      	mov	r3, lr
 800ab32:	edd0 6a00 	vldr	s13, [r0]
 800ab36:	ecb2 7a01 	vldmia	r2!, {s14}
 800ab3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab44:	4420      	add	r0, r4
 800ab46:	d1f4      	bne.n	800ab32 <arm_mat_mult_f32+0x1ce>
 800ab48:	ece8 7a01 	vstmia	r8!, {s15}
 800ab4c:	45d8      	cmp	r8, fp
 800ab4e:	4648      	mov	r0, r9
 800ab50:	f109 0904 	add.w	r9, r9, #4
 800ab54:	d1b4      	bne.n	800aac0 <arm_mat_mult_f32+0x15c>
 800ab56:	9a01      	ldr	r2, [sp, #4]
 800ab58:	9b06      	ldr	r3, [sp, #24]
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4419      	add	r1, r3
 800ab5e:	449a      	add	sl, r3
 800ab60:	9b02      	ldr	r3, [sp, #8]
 800ab62:	9101      	str	r1, [sp, #4]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	44a3      	add	fp, r4
 800ab68:	9302      	str	r3, [sp, #8]
 800ab6a:	d08a      	beq.n	800aa82 <arm_mat_mult_f32+0x11e>
 800ab6c:	9b07      	ldr	r3, [sp, #28]
 800ab6e:	6858      	ldr	r0, [r3, #4]
 800ab70:	e79e      	b.n	800aab0 <arm_mat_mult_f32+0x14c>
 800ab72:	9a08      	ldr	r2, [sp, #32]
 800ab74:	e7d9      	b.n	800ab2a <arm_mat_mult_f32+0x1c6>
 800ab76:	f06f 0002 	mvn.w	r0, #2
 800ab7a:	b00b      	add	sp, #44	@ 0x2c
 800ab7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab80:	00000000 	.word	0x00000000

0800ab84 <arm_mat_init_f32>:
 800ab84:	8001      	strh	r1, [r0, #0]
 800ab86:	8042      	strh	r2, [r0, #2]
 800ab88:	6043      	str	r3, [r0, #4]
 800ab8a:	4770      	bx	lr

0800ab8c <handle_message_memory.constprop.4>:
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab92:	b0a7      	sub	sp, #156	@ 0x9c
 800ab94:	ac30      	add	r4, sp, #192	@ 0xc0
 800ab96:	e884 000c 	stmia.w	r4, {r2, r3}
 800ab9a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800ab9c:	e9dd 9236 	ldrd	r9, r2, [sp, #216]	@ 0xd8
 800aba0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800aba2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aba4:	e9dd a733 	ldrd	sl, r7, [sp, #204]	@ 0xcc
 800aba8:	9117      	str	r1, [sp, #92]	@ 0x5c
 800abaa:	9314      	str	r3, [sp, #80]	@ 0x50
 800abac:	920d      	str	r2, [sp, #52]	@ 0x34
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 81a5 	beq.w	800aefe <handle_message_memory.constprop.4+0x372>
 800abb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d036      	beq.n	800ac2c <handle_message_memory.constprop.4+0xa0>
 800abbe:	2300      	movs	r3, #0
 800abc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc2:	469b      	mov	fp, r3
 800abc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abc6:	691a      	ldr	r2, [r3, #16]
 800abc8:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 800abcc:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800abd0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800abd4:	6899      	ldr	r1, [r3, #8]
 800abd6:	920e      	str	r2, [sp, #56]	@ 0x38
 800abd8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800abda:	7c1a      	ldrb	r2, [r3, #16]
 800abdc:	68d9      	ldr	r1, [r3, #12]
 800abde:	791d      	ldrb	r5, [r3, #4]
 800abe0:	7e1c      	ldrb	r4, [r3, #24]
 800abe2:	9110      	str	r1, [sp, #64]	@ 0x40
 800abe4:	6959      	ldr	r1, [r3, #20]
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	9109      	str	r1, [sp, #36]	@ 0x24
 800abea:	9312      	str	r3, [sp, #72]	@ 0x48
 800abec:	2a00      	cmp	r2, #0
 800abee:	d06e      	beq.n	800acce <handle_message_memory.constprop.4+0x142>
 800abf0:	2900      	cmp	r1, #0
 800abf2:	f000 80c8 	beq.w	800ad86 <handle_message_memory.constprop.4+0x1fa>
 800abf6:	2c00      	cmp	r4, #0
 800abf8:	f040 80c5 	bne.w	800ad86 <handle_message_memory.constprop.4+0x1fa>
 800abfc:	940c      	str	r4, [sp, #48]	@ 0x30
 800abfe:	2f00      	cmp	r7, #0
 800ac00:	d168      	bne.n	800acd4 <handle_message_memory.constprop.4+0x148>
 800ac02:	2d10      	cmp	r5, #16
 800ac04:	f000 8084 	beq.w	800ad10 <handle_message_memory.constprop.4+0x184>
 800ac08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f040 80c0 	bne.w	800ad90 <handle_message_memory.constprop.4+0x204>
 800ac10:	2d12      	cmp	r5, #18
 800ac12:	f000 8157 	beq.w	800aec4 <handle_message_memory.constprop.4+0x338>
 800ac16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac18:	2d64      	cmp	r5, #100	@ 0x64
 800ac1a:	d00d      	beq.n	800ac38 <handle_message_memory.constprop.4+0xac>
 800ac1c:	2f00      	cmp	r7, #0
 800ac1e:	d138      	bne.n	800ac92 <handle_message_memory.constprop.4+0x106>
 800ac20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f10b 0b01 	add.w	fp, fp, #1
 800ac28:	459b      	cmp	fp, r3
 800ac2a:	d3cb      	bcc.n	800abc4 <handle_message_memory.constprop.4+0x38>
 800ac2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac2e:	b027      	add	sp, #156	@ 0x9c
 800ac30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	b002      	add	sp, #8
 800ac36:	4770      	bx	lr
 800ac38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 814f 	beq.w	800aede <handle_message_memory.constprop.4+0x352>
 800ac40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ac44:	4613      	mov	r3, r2
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	bf08      	it	eq
 800ac4a:	460b      	moveq	r3, r1
 800ac4c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac4e:	b1c7      	cbz	r7, 800ac82 <handle_message_memory.constprop.4+0xf6>
 800ac50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac52:	2400      	movs	r4, #0
 800ac54:	1e5d      	subs	r5, r3, #1
 800ac56:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 800ac5a:	462a      	mov	r2, r5
 800ac5c:	4649      	mov	r1, r9
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f016 fe55 	bl	802190e <memcmp>
 800ac64:	4603      	mov	r3, r0
 800ac66:	49a8      	ldr	r1, [pc, #672]	@ (800af08 <handle_message_memory.constprop.4+0x37c>)
 800ac68:	1970      	adds	r0, r6, r5
 800ac6a:	2205      	movs	r2, #5
 800ac6c:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
 800ac70:	3401      	adds	r4, #1
 800ac72:	b923      	cbnz	r3, 800ac7e <handle_message_memory.constprop.4+0xf2>
 800ac74:	f016 fe4b 	bl	802190e <memcmp>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	f000 8134 	beq.w	800aee6 <handle_message_memory.constprop.4+0x35a>
 800ac7e:	42a7      	cmp	r7, r4
 800ac80:	d1e9      	bne.n	800ac56 <handle_message_memory.constprop.4+0xca>
 800ac82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800ac86:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac88:	fb01 3302 	mla	r3, r1, r2, r3
 800ac8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac8e:	2f00      	cmp	r7, #0
 800ac90:	d0c6      	beq.n	800ac20 <handle_message_memory.constprop.4+0x94>
 800ac92:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800ac94:	f7f5 fab4 	bl	8000200 <strlen>
 800ac98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac9a:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800ac9e:	3001      	adds	r0, #1
 800aca0:	9000      	str	r0, [sp, #0]
 800aca2:	9337      	str	r3, [sp, #220]	@ 0xdc
 800aca4:	ae36      	add	r6, sp, #216	@ 0xd8
 800aca6:	ac18      	add	r4, sp, #96	@ 0x60
 800aca8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800acac:	4620      	mov	r0, r4
 800acae:	f005 fbb3 	bl	8010418 <micro_ros_string_utilities_remove_tail_chars>
 800acb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	910d      	str	r1, [sp, #52]	@ 0x34
 800acbc:	f10b 0b01 	add.w	fp, fp, #1
 800acc0:	455b      	cmp	r3, fp
 800acc2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800acc6:	4681      	mov	r9, r0
 800acc8:	f63f af7c 	bhi.w	800abc4 <handle_message_memory.constprop.4+0x38>
 800accc:	e7ae      	b.n	800ac2c <handle_message_memory.constprop.4+0xa0>
 800acce:	920c      	str	r2, [sp, #48]	@ 0x30
 800acd0:	2f00      	cmp	r7, #0
 800acd2:	d096      	beq.n	800ac02 <handle_message_memory.constprop.4+0x76>
 800acd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acd6:	9337      	str	r3, [sp, #220]	@ 0xdc
 800acd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acda:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800acde:	ae36      	add	r6, sp, #216	@ 0xd8
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ace6:	4630      	mov	r0, r6
 800ace8:	f005 fb68 	bl	80103bc <micro_ros_string_utilities_append>
 800acec:	4b87      	ldr	r3, [pc, #540]	@ (800af0c <handle_message_memory.constprop.4+0x380>)
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	f10d 0860 	add.w	r8, sp, #96	@ 0x60
 800acf4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800acf8:	4640      	mov	r0, r8
 800acfa:	f005 fb5f 	bl	80103bc <micro_ros_string_utilities_append>
 800acfe:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800ad02:	2d10      	cmp	r5, #16
 800ad04:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800ad08:	4681      	mov	r9, r0
 800ad0a:	910d      	str	r1, [sp, #52]	@ 0x34
 800ad0c:	f47f af7c 	bne.w	800ac08 <handle_message_memory.constprop.4+0x7c>
 800ad10:	2c00      	cmp	r4, #0
 800ad12:	f000 80c7 	beq.w	800aea4 <handle_message_memory.constprop.4+0x318>
 800ad16:	2301      	movs	r3, #1
 800ad18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad1a:	2f00      	cmp	r7, #0
 800ad1c:	d144      	bne.n	800ada8 <handle_message_memory.constprop.4+0x21c>
 800ad1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800ad22:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ad24:	2d12      	cmp	r5, #18
 800ad26:	fb01 3302 	mla	r3, r1, r2, r3
 800ad2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad2c:	f47f af74 	bne.w	800ac18 <handle_message_memory.constprop.4+0x8c>
 800ad30:	4b77      	ldr	r3, [pc, #476]	@ (800af10 <handle_message_memory.constprop.4+0x384>)
 800ad32:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ad34:	6819      	ldr	r1, [r3, #0]
 800ad36:	f004 fb45 	bl	800f3c4 <get_message_typesupport_handle>
 800ad3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad3c:	6845      	ldr	r5, [r0, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f040 80ea 	bne.w	800af18 <handle_message_memory.constprop.4+0x38c>
 800ad44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad46:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ad48:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800ad4c:	ae36      	add	r6, sp, #216	@ 0xd8
 800ad4e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ad52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad54:	9335      	str	r3, [sp, #212]	@ 0xd4
 800ad56:	f10d 0810 	add.w	r8, sp, #16
 800ad5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad5c:	9330      	str	r3, [sp, #192]	@ 0xc0
 800ad5e:	e9cd a733 	strd	sl, r7, [sp, #204]	@ 0xcc
 800ad62:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800ad66:	ab32      	add	r3, sp, #200	@ 0xc8
 800ad68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ad6e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad70:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ad72:	4419      	add	r1, r3
 800ad74:	ab30      	add	r3, sp, #192	@ 0xc0
 800ad76:	cb0c      	ldmia	r3, {r2, r3}
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f7ff ff07 	bl	800ab8c <handle_message_memory.constprop.4>
 800ad7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad80:	4403      	add	r3, r0
 800ad82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad84:	e74a      	b.n	800ac1c <handle_message_memory.constprop.4+0x90>
 800ad86:	2d10      	cmp	r5, #16
 800ad88:	d07a      	beq.n	800ae80 <handle_message_memory.constprop.4+0x2f4>
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	f040 8097 	bne.w	800aebe <handle_message_memory.constprop.4+0x332>
 800ad90:	2d12      	cmp	r5, #18
 800ad92:	d029      	beq.n	800ade8 <handle_message_memory.constprop.4+0x25c>
 800ad94:	2d64      	cmp	r5, #100	@ 0x64
 800ad96:	d177      	bne.n	800ae88 <handle_message_memory.constprop.4+0x2fc>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad9c:	2c00      	cmp	r4, #0
 800ad9e:	d079      	beq.n	800ae94 <handle_message_memory.constprop.4+0x308>
 800ada0:	2301      	movs	r3, #1
 800ada2:	930c      	str	r3, [sp, #48]	@ 0x30
 800ada4:	2f00      	cmp	r7, #0
 800ada6:	d0ba      	beq.n	800ad1e <handle_message_memory.constprop.4+0x192>
 800ada8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adaa:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
 800adae:	2400      	movs	r4, #0
 800adb0:	1e5e      	subs	r6, r3, #1
 800adb2:	f85a b034 	ldr.w	fp, [sl, r4, lsl #3]
 800adb6:	4658      	mov	r0, fp
 800adb8:	f7f5 fa22 	bl	8000200 <strlen>
 800adbc:	4649      	mov	r1, r9
 800adbe:	4602      	mov	r2, r0
 800adc0:	4658      	mov	r0, fp
 800adc2:	f016 fda4 	bl	802190e <memcmp>
 800adc6:	4605      	mov	r5, r0
 800adc8:	eb0a 08c4 	add.w	r8, sl, r4, lsl #3
 800adcc:	4632      	mov	r2, r6
 800adce:	3401      	adds	r4, #1
 800add0:	4649      	mov	r1, r9
 800add2:	4658      	mov	r0, fp
 800add4:	b91d      	cbnz	r5, 800adde <handle_message_memory.constprop.4+0x252>
 800add6:	f016 fd9a 	bl	802190e <memcmp>
 800adda:	2800      	cmp	r0, #0
 800addc:	d079      	beq.n	800aed2 <handle_message_memory.constprop.4+0x346>
 800adde:	42a7      	cmp	r7, r4
 800ade0:	d8e7      	bhi.n	800adb2 <handle_message_memory.constprop.4+0x226>
 800ade2:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 800ade6:	e79a      	b.n	800ad1e <handle_message_memory.constprop.4+0x192>
 800ade8:	4b49      	ldr	r3, [pc, #292]	@ (800af10 <handle_message_memory.constprop.4+0x384>)
 800adea:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800adec:	6819      	ldr	r1, [r3, #0]
 800adee:	f004 fae9 	bl	800f3c4 <get_message_typesupport_handle>
 800adf2:	6843      	ldr	r3, [r0, #4]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	9311      	str	r3, [sp, #68]	@ 0x44
 800adf8:	b90c      	cbnz	r4, 800adfe <handle_message_memory.constprop.4+0x272>
 800adfa:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800adfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800adfe:	2f00      	cmp	r7, #0
 800ae00:	d14d      	bne.n	800ae9e <handle_message_memory.constprop.4+0x312>
 800ae02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae04:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae06:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ae08:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ae0a:	fb04 3302 	mla	r3, r4, r2, r3
 800ae0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae10:	4b3f      	ldr	r3, [pc, #252]	@ (800af10 <handle_message_memory.constprop.4+0x384>)
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	f004 fad6 	bl	800f3c4 <get_message_typesupport_handle>
 800ae18:	6845      	ldr	r5, [r0, #4]
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	f43f af00 	beq.w	800ac20 <handle_message_memory.constprop.4+0x94>
 800ae20:	ab32      	add	r3, sp, #200	@ 0xc8
 800ae22:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800ae26:	46cb      	mov	fp, r9
 800ae28:	46d1      	mov	r9, sl
 800ae2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae2e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae30:	2400      	movs	r4, #0
 800ae32:	ae36      	add	r6, sp, #216	@ 0xd8
 800ae34:	f10d 0810 	add.w	r8, sp, #16
 800ae38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae3a:	9337      	str	r3, [sp, #220]	@ 0xdc
 800ae3c:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 800ae40:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ae44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae46:	9335      	str	r3, [sp, #212]	@ 0xd4
 800ae48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae4a:	9330      	str	r3, [sp, #192]	@ 0xc0
 800ae4c:	e9cd 9733 	strd	r9, r7, [sp, #204]	@ 0xcc
 800ae50:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800ae54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ae5c:	ab30      	add	r3, sp, #192	@ 0xc0
 800ae5e:	cb0c      	ldmia	r3, {r2, r3}
 800ae60:	2100      	movs	r1, #0
 800ae62:	4628      	mov	r0, r5
 800ae64:	f7ff fe92 	bl	800ab8c <handle_message_memory.constprop.4>
 800ae68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6a:	3401      	adds	r4, #1
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	4482      	add	sl, r0
 800ae70:	d1e2      	bne.n	800ae38 <handle_message_memory.constprop.4+0x2ac>
 800ae72:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 800ae76:	46ca      	mov	sl, r9
 800ae78:	46d9      	mov	r9, fp
 800ae7a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800ae7e:	e6cd      	b.n	800ac1c <handle_message_memory.constprop.4+0x90>
 800ae80:	2301      	movs	r3, #1
 800ae82:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae84:	2564      	movs	r5, #100	@ 0x64
 800ae86:	e6ba      	b.n	800abfe <handle_message_memory.constprop.4+0x72>
 800ae88:	4b22      	ldr	r3, [pc, #136]	@ (800af14 <handle_message_memory.constprop.4+0x388>)
 800ae8a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ae8e:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	d185      	bne.n	800ada0 <handle_message_memory.constprop.4+0x214>
 800ae94:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800ae96:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae98:	2301      	movs	r3, #1
 800ae9a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae9c:	e73d      	b.n	800ad1a <handle_message_memory.constprop.4+0x18e>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	930c      	str	r3, [sp, #48]	@ 0x30
 800aea2:	e781      	b.n	800ada8 <handle_message_memory.constprop.4+0x21c>
 800aea4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aea6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800aea8:	4613      	mov	r3, r2
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	bf08      	it	eq
 800aeae:	460b      	moveq	r3, r1
 800aeb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb2:	bb0f      	cbnz	r7, 800aef8 <handle_message_memory.constprop.4+0x36c>
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeb8:	4413      	add	r3, r2
 800aeba:	930a      	str	r3, [sp, #40]	@ 0x28
 800aebc:	e6b0      	b.n	800ac20 <handle_message_memory.constprop.4+0x94>
 800aebe:	2301      	movs	r3, #1
 800aec0:	930c      	str	r3, [sp, #48]	@ 0x30
 800aec2:	e707      	b.n	800acd4 <handle_message_memory.constprop.4+0x148>
 800aec4:	4b12      	ldr	r3, [pc, #72]	@ (800af10 <handle_message_memory.constprop.4+0x384>)
 800aec6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800aec8:	6819      	ldr	r1, [r3, #0]
 800aeca:	f004 fa7b 	bl	800f3c4 <get_message_typesupport_handle>
 800aece:	6845      	ldr	r5, [r0, #4]
 800aed0:	e738      	b.n	800ad44 <handle_message_memory.constprop.4+0x1b8>
 800aed2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aed6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed8:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 800aedc:	e71f      	b.n	800ad1e <handle_message_memory.constprop.4+0x192>
 800aede:	a821      	add	r0, sp, #132	@ 0x84
 800aee0:	f003 fc14 	bl	800e70c <rcutils_get_default_allocator>
 800aee4:	e6ac      	b.n	800ac40 <handle_message_memory.constprop.4+0xb4>
 800aee6:	6873      	ldr	r3, [r6, #4]
 800aee8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aeea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800aeee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aef0:	fb01 3302 	mla	r3, r1, r2, r3
 800aef4:	930a      	str	r3, [sp, #40]	@ 0x28
 800aef6:	e6ca      	b.n	800ac8e <handle_message_memory.constprop.4+0x102>
 800aef8:	2301      	movs	r3, #1
 800aefa:	9311      	str	r3, [sp, #68]	@ 0x44
 800aefc:	e754      	b.n	800ada8 <handle_message_memory.constprop.4+0x21c>
 800aefe:	a81c      	add	r0, sp, #112	@ 0x70
 800af00:	f003 fc04 	bl	800e70c <rcutils_get_default_allocator>
 800af04:	e656      	b.n	800abb4 <handle_message_memory.constprop.4+0x28>
 800af06:	bf00      	nop
 800af08:	08022970 	.word	0x08022970
 800af0c:	0802296c 	.word	0x0802296c
 800af10:	20000384 	.word	0x20000384
 800af14:	08022978 	.word	0x08022978
 800af18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d180      	bne.n	800ae20 <handle_message_memory.constprop.4+0x294>
 800af1e:	e67d      	b.n	800ac1c <handle_message_memory.constprop.4+0x90>

0800af20 <handle_message_memory.constprop.2>:
 800af20:	b082      	sub	sp, #8
 800af22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af26:	ed2d 8b02 	vpush	{d8}
 800af2a:	b0a9      	sub	sp, #164	@ 0xa4
 800af2c:	ac34      	add	r4, sp, #208	@ 0xd0
 800af2e:	e884 000c 	stmia.w	r4, {r2, r3}
 800af32:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 800af36:	9216      	str	r2, [sp, #88]	@ 0x58
 800af38:	e9dd 723a 	ldrd	r7, r2, [sp, #232]	@ 0xe8
 800af3c:	9308      	str	r3, [sp, #32]
 800af3e:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800af40:	900b      	str	r0, [sp, #44]	@ 0x2c
 800af42:	9112      	str	r1, [sp, #72]	@ 0x48
 800af44:	9314      	str	r3, [sp, #80]	@ 0x50
 800af46:	920c      	str	r2, [sp, #48]	@ 0x30
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 8210 	beq.w	800b36e <handle_message_memory.constprop.2+0x44e>
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	9215      	str	r2, [sp, #84]	@ 0x54
 800af54:	ee08 3a10 	vmov	s16, r3
 800af58:	4603      	mov	r3, r0
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 81c0 	beq.w	800b2e2 <handle_message_memory.constprop.2+0x3c2>
 800af62:	2300      	movs	r3, #0
 800af64:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 800af68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af6a:	691a      	ldr	r2, [r3, #16]
 800af6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af6e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800af72:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800af76:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800af7a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af7c:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800af80:	7c1a      	ldrb	r2, [r3, #16]
 800af82:	791e      	ldrb	r6, [r3, #4]
 800af84:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800af88:	f893 9018 	ldrb.w	r9, [r3, #24]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	9110      	str	r1, [sp, #64]	@ 0x40
 800af90:	930d      	str	r3, [sp, #52]	@ 0x34
 800af92:	2a00      	cmp	r2, #0
 800af94:	d056      	beq.n	800b044 <handle_message_memory.constprop.2+0x124>
 800af96:	f1b8 0f00 	cmp.w	r8, #0
 800af9a:	d002      	beq.n	800afa2 <handle_message_memory.constprop.2+0x82>
 800af9c:	f1b9 0f00 	cmp.w	r9, #0
 800afa0:	d050      	beq.n	800b044 <handle_message_memory.constprop.2+0x124>
 800afa2:	9b08      	ldr	r3, [sp, #32]
 800afa4:	2e10      	cmp	r6, #16
 800afa6:	bf08      	it	eq
 800afa8:	2664      	moveq	r6, #100	@ 0x64
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f040 8154 	bne.w	800b258 <handle_message_memory.constprop.2+0x338>
 800afb0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800afb2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800afb4:	2e12      	cmp	r6, #18
 800afb6:	4413      	add	r3, r2
 800afb8:	930e      	str	r3, [sp, #56]	@ 0x38
 800afba:	f000 80f8 	beq.w	800b1ae <handle_message_memory.constprop.2+0x28e>
 800afbe:	2e64      	cmp	r6, #100	@ 0x64
 800afc0:	f040 8164 	bne.w	800b28c <handle_message_memory.constprop.2+0x36c>
 800afc4:	f1b9 0f00 	cmp.w	r9, #0
 800afc8:	f040 816b 	bne.w	800b2a2 <handle_message_memory.constprop.2+0x382>
 800afcc:	230c      	movs	r3, #12
 800afce:	9311      	str	r3, [sp, #68]	@ 0x44
 800afd0:	2301      	movs	r3, #1
 800afd2:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
 800afd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afd8:	9b08      	ldr	r3, [sp, #32]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d148      	bne.n	800b070 <handle_message_memory.constprop.2+0x150>
 800afde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afe0:	fb03 f208 	mul.w	r2, r3, r8
 800afe4:	ee18 1a10 	vmov	r1, s16
 800afe8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800afea:	9211      	str	r2, [sp, #68]	@ 0x44
 800afec:	4610      	mov	r0, r2
 800afee:	4798      	blx	r3
 800aff0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	2800      	cmp	r0, #0
 800aff6:	f000 8174 	beq.w	800b2e2 <handle_message_memory.constprop.2+0x3c2>
 800affa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800affc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800affe:	2100      	movs	r1, #0
 800b000:	4413      	add	r3, r2
 800b002:	930a      	str	r3, [sp, #40]	@ 0x28
 800b004:	f016 fcad 	bl	8021962 <memset>
 800b008:	4623      	mov	r3, r4
 800b00a:	f8c4 8008 	str.w	r8, [r4, #8]
 800b00e:	2e12      	cmp	r6, #18
 800b010:	f04f 0400 	mov.w	r4, #0
 800b014:	605c      	str	r4, [r3, #4]
 800b016:	f000 80f4 	beq.w	800b202 <handle_message_memory.constprop.2+0x2e2>
 800b01a:	2e64      	cmp	r6, #100	@ 0x64
 800b01c:	d054      	beq.n	800b0c8 <handle_message_memory.constprop.2+0x1a8>
 800b01e:	9b08      	ldr	r3, [sp, #32]
 800b020:	2b00      	cmp	r3, #0
 800b022:	f040 80a6 	bne.w	800b172 <handle_message_memory.constprop.2+0x252>
 800b026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b028:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	3201      	adds	r2, #1
 800b02e:	429a      	cmp	r2, r3
 800b030:	9209      	str	r2, [sp, #36]	@ 0x24
 800b032:	d399      	bcc.n	800af68 <handle_message_memory.constprop.2+0x48>
 800b034:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b036:	b029      	add	sp, #164	@ 0xa4
 800b038:	ecbd 8b02 	vpop	{d8}
 800b03c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	b002      	add	sp, #8
 800b042:	4770      	bx	lr
 800b044:	9b08      	ldr	r3, [sp, #32]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 80c1 	bne.w	800b1ce <handle_message_memory.constprop.2+0x2ae>
 800b04c:	2e10      	cmp	r6, #16
 800b04e:	d134      	bne.n	800b0ba <handle_message_memory.constprop.2+0x19a>
 800b050:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b052:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b054:	4413      	add	r3, r2
 800b056:	930e      	str	r3, [sp, #56]	@ 0x38
 800b058:	f1b9 0f00 	cmp.w	r9, #0
 800b05c:	f000 8126 	beq.w	800b2ac <handle_message_memory.constprop.2+0x38c>
 800b060:	2300      	movs	r3, #0
 800b062:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b064:	2301      	movs	r3, #1
 800b066:	9311      	str	r3, [sp, #68]	@ 0x44
 800b068:	9b08      	ldr	r3, [sp, #32]
 800b06a:	2610      	movs	r6, #16
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d0b6      	beq.n	800afde <handle_message_memory.constprop.2+0xbe>
 800b070:	469a      	mov	sl, r3
 800b072:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 800b076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b078:	9617      	str	r6, [sp, #92]	@ 0x5c
 800b07a:	2400      	movs	r4, #0
 800b07c:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 800b080:	f85b 6034 	ldr.w	r6, [fp, r4, lsl #3]
 800b084:	4630      	mov	r0, r6
 800b086:	f7f5 f8bb 	bl	8000200 <strlen>
 800b08a:	4639      	mov	r1, r7
 800b08c:	4602      	mov	r2, r0
 800b08e:	4630      	mov	r0, r6
 800b090:	f016 fc3d 	bl	802190e <memcmp>
 800b094:	4605      	mov	r5, r0
 800b096:	eb0b 08c4 	add.w	r8, fp, r4, lsl #3
 800b09a:	464a      	mov	r2, r9
 800b09c:	3401      	adds	r4, #1
 800b09e:	4639      	mov	r1, r7
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	b925      	cbnz	r5, 800b0ae <handle_message_memory.constprop.2+0x18e>
 800b0a4:	f016 fc33 	bl	802190e <memcmp>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	f000 811d 	beq.w	800b2e8 <handle_message_memory.constprop.2+0x3c8>
 800b0ae:	4554      	cmp	r4, sl
 800b0b0:	d1e6      	bne.n	800b080 <handle_message_memory.constprop.2+0x160>
 800b0b2:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	@ 0x60
 800b0b6:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800b0b8:	e791      	b.n	800afde <handle_message_memory.constprop.2+0xbe>
 800b0ba:	2e12      	cmp	r6, #18
 800b0bc:	f000 80fe 	beq.w	800b2bc <handle_message_memory.constprop.2+0x39c>
 800b0c0:	2e64      	cmp	r6, #100	@ 0x64
 800b0c2:	f04f 0800 	mov.w	r8, #0
 800b0c6:	d1aa      	bne.n	800b01e <handle_message_memory.constprop.2+0xfe>
 800b0c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 8146 	beq.w	800b35c <handle_message_memory.constprop.2+0x43c>
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	691e      	ldr	r6, [r3, #16]
 800b0d4:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0d6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0d8:	2d00      	cmp	r5, #0
 800b0da:	bf08      	it	eq
 800b0dc:	461d      	moveq	r5, r3
 800b0de:	9b08      	ldr	r3, [sp, #32]
 800b0e0:	b1eb      	cbz	r3, 800b11e <handle_message_memory.constprop.2+0x1fe>
 800b0e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b0e4:	9510      	str	r5, [sp, #64]	@ 0x40
 800b0e6:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
 800b0ea:	2400      	movs	r4, #0
 800b0ec:	469a      	mov	sl, r3
 800b0ee:	f85b 5034 	ldr.w	r5, [fp, r4, lsl #3]
 800b0f2:	464a      	mov	r2, r9
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	f016 fc09 	bl	802190e <memcmp>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	49a1      	ldr	r1, [pc, #644]	@ (800b384 <handle_message_memory.constprop.2+0x464>)
 800b100:	eb05 0009 	add.w	r0, r5, r9
 800b104:	2205      	movs	r2, #5
 800b106:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800b10a:	3401      	adds	r4, #1
 800b10c:	b923      	cbnz	r3, 800b118 <handle_message_memory.constprop.2+0x1f8>
 800b10e:	f016 fbfe 	bl	802190e <memcmp>
 800b112:	2800      	cmp	r0, #0
 800b114:	f000 8129 	beq.w	800b36a <handle_message_memory.constprop.2+0x44a>
 800b118:	4554      	cmp	r4, sl
 800b11a:	d1e8      	bne.n	800b0ee <handle_message_memory.constprop.2+0x1ce>
 800b11c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b11e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b120:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b122:	589c      	ldr	r4, [r3, r2]
 800b124:	fb08 f305 	mul.w	r3, r8, r5
 800b128:	930d      	str	r3, [sp, #52]	@ 0x34
 800b12a:	f1b8 0f00 	cmp.w	r8, #0
 800b12e:	d018      	beq.n	800b162 <handle_message_memory.constprop.2+0x242>
 800b130:	f04f 0a00 	mov.w	sl, #0
 800b134:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800b138:	46b3      	mov	fp, r6
 800b13a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b13c:	46d1      	mov	r9, sl
 800b13e:	4659      	mov	r1, fp
 800b140:	4628      	mov	r0, r5
 800b142:	47b0      	blx	r6
 800b144:	f10a 0a01 	add.w	sl, sl, #1
 800b148:	e9c4 9501 	strd	r9, r5, [r4, #4]
 800b14c:	6020      	str	r0, [r4, #0]
 800b14e:	462a      	mov	r2, r5
 800b150:	2100      	movs	r1, #0
 800b152:	f016 fc06 	bl	8021962 <memset>
 800b156:	45c2      	cmp	sl, r8
 800b158:	f104 040c 	add.w	r4, r4, #12
 800b15c:	d1ef      	bne.n	800b13e <handle_message_memory.constprop.2+0x21e>
 800b15e:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800b162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b164:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b166:	4413      	add	r3, r2
 800b168:	930a      	str	r3, [sp, #40]	@ 0x28
 800b16a:	9b08      	ldr	r3, [sp, #32]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f43f af5a 	beq.w	800b026 <handle_message_memory.constprop.2+0x106>
 800b172:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800b174:	f7f5 f844 	bl	8000200 <strlen>
 800b178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b17a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b17c:	973a      	str	r7, [sp, #232]	@ 0xe8
 800b17e:	3001      	adds	r0, #1
 800b180:	9000      	str	r0, [sp, #0]
 800b182:	933b      	str	r3, [sp, #236]	@ 0xec
 800b184:	ad1a      	add	r5, sp, #104	@ 0x68
 800b186:	ac3a      	add	r4, sp, #232	@ 0xe8
 800b188:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b18c:	3601      	adds	r6, #1
 800b18e:	4628      	mov	r0, r5
 800b190:	9609      	str	r6, [sp, #36]	@ 0x24
 800b192:	f005 f941 	bl	8010418 <micro_ros_string_utilities_remove_tail_chars>
 800b196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	910c      	str	r1, [sp, #48]	@ 0x30
 800b1a0:	429e      	cmp	r6, r3
 800b1a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	f4ff aede 	bcc.w	800af68 <handle_message_memory.constprop.2+0x48>
 800b1ac:	e742      	b.n	800b034 <handle_message_memory.constprop.2+0x114>
 800b1ae:	4b76      	ldr	r3, [pc, #472]	@ (800b388 <handle_message_memory.constprop.2+0x468>)
 800b1b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b1b2:	6819      	ldr	r1, [r3, #0]
 800b1b4:	f004 f906 	bl	800f3c4 <get_message_typesupport_handle>
 800b1b8:	6843      	ldr	r3, [r0, #4]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1be:	f1b9 0f00 	cmp.w	r9, #0
 800b1c2:	d16b      	bne.n	800b29c <handle_message_memory.constprop.2+0x37c>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 800b1ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1cc:	e704      	b.n	800afd8 <handle_message_memory.constprop.2+0xb8>
 800b1ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1d0:	933b      	str	r3, [sp, #236]	@ 0xec
 800b1d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1d4:	973a      	str	r7, [sp, #232]	@ 0xe8
 800b1d6:	ac3a      	add	r4, sp, #232	@ 0xe8
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f005 f8ec 	bl	80103bc <micro_ros_string_utilities_append>
 800b1e4:	4b69      	ldr	r3, [pc, #420]	@ (800b38c <handle_message_memory.constprop.2+0x46c>)
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	af1a      	add	r7, sp, #104	@ 0x68
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b1f0:	f005 f8e4 	bl	80103bc <micro_ros_string_utilities_append>
 800b1f4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b1f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	910c      	str	r1, [sp, #48]	@ 0x30
 800b200:	e724      	b.n	800b04c <handle_message_memory.constprop.2+0x12c>
 800b202:	4b61      	ldr	r3, [pc, #388]	@ (800b388 <handle_message_memory.constprop.2+0x468>)
 800b204:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b206:	6819      	ldr	r1, [r3, #0]
 800b208:	f004 f8dc 	bl	800f3c4 <get_message_typesupport_handle>
 800b20c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b20e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d16d      	bne.n	800b2f2 <handle_message_memory.constprop.2+0x3d2>
 800b216:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b218:	933b      	str	r3, [sp, #236]	@ 0xec
 800b21a:	973a      	str	r7, [sp, #232]	@ 0xe8
 800b21c:	ac3a      	add	r4, sp, #232	@ 0xe8
 800b21e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b222:	9b08      	ldr	r3, [sp, #32]
 800b224:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b226:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b228:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b22a:	f10d 0a10 	add.w	sl, sp, #16
 800b22e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b230:	9334      	str	r3, [sp, #208]	@ 0xd0
 800b232:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
 800b236:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800b23a:	ae36      	add	r6, sp, #216	@ 0xd8
 800b23c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800b240:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b244:	ab34      	add	r3, sp, #208	@ 0xd0
 800b246:	cb0c      	ldmia	r3, {r2, r3}
 800b248:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b24a:	4648      	mov	r0, r9
 800b24c:	f7ff fe68 	bl	800af20 <handle_message_memory.constprop.2>
 800b250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b252:	4403      	add	r3, r0
 800b254:	930a      	str	r3, [sp, #40]	@ 0x28
 800b256:	e6e2      	b.n	800b01e <handle_message_memory.constprop.2+0xfe>
 800b258:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b25a:	933b      	str	r3, [sp, #236]	@ 0xec
 800b25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25e:	973a      	str	r7, [sp, #232]	@ 0xe8
 800b260:	ac3a      	add	r4, sp, #232	@ 0xe8
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b268:	4620      	mov	r0, r4
 800b26a:	f005 f8a7 	bl	80103bc <micro_ros_string_utilities_append>
 800b26e:	4b47      	ldr	r3, [pc, #284]	@ (800b38c <handle_message_memory.constprop.2+0x46c>)
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	af1a      	add	r7, sp, #104	@ 0x68
 800b274:	4638      	mov	r0, r7
 800b276:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b27a:	f005 f89f 	bl	80103bc <micro_ros_string_utilities_append>
 800b27e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800b282:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b286:	4607      	mov	r7, r0
 800b288:	910c      	str	r1, [sp, #48]	@ 0x30
 800b28a:	e691      	b.n	800afb0 <handle_message_memory.constprop.2+0x90>
 800b28c:	4b40      	ldr	r3, [pc, #256]	@ (800b390 <handle_message_memory.constprop.2+0x470>)
 800b28e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b292:	9311      	str	r3, [sp, #68]	@ 0x44
 800b294:	f1b9 0f00 	cmp.w	r9, #0
 800b298:	f43f ae9a 	beq.w	800afd0 <handle_message_memory.constprop.2+0xb0>
 800b29c:	2301      	movs	r3, #1
 800b29e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2a0:	e69a      	b.n	800afd8 <handle_message_memory.constprop.2+0xb8>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2a6:	230c      	movs	r3, #12
 800b2a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2aa:	e695      	b.n	800afd8 <handle_message_memory.constprop.2+0xb8>
 800b2ac:	b195      	cbz	r5, 800b2d4 <handle_message_memory.constprop.2+0x3b4>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 800b2b4:	46a8      	mov	r8, r5
 800b2b6:	2610      	movs	r6, #16
 800b2b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2ba:	e68d      	b.n	800afd8 <handle_message_memory.constprop.2+0xb8>
 800b2bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2be:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b2c0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b2c2:	4413      	add	r3, r2
 800b2c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b2c6:	4b30      	ldr	r3, [pc, #192]	@ (800b388 <handle_message_memory.constprop.2+0x468>)
 800b2c8:	6819      	ldr	r1, [r3, #0]
 800b2ca:	f004 f87b 	bl	800f3c4 <get_message_typesupport_handle>
 800b2ce:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800b2d2:	e7a0      	b.n	800b216 <handle_message_memory.constprop.2+0x2f6>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b2da:	9513      	str	r5, [sp, #76]	@ 0x4c
 800b2dc:	2610      	movs	r6, #16
 800b2de:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2e0:	e67a      	b.n	800afd8 <handle_message_memory.constprop.2+0xb8>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2e6:	e6a5      	b.n	800b034 <handle_message_memory.constprop.2+0x114>
 800b2e8:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	@ 0x5c
 800b2ec:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800b2f0:	e675      	b.n	800afde <handle_message_memory.constprop.2+0xbe>
 800b2f2:	f1b8 0f00 	cmp.w	r8, #0
 800b2f6:	f43f ae92 	beq.w	800b01e <handle_message_memory.constprop.2+0xfe>
 800b2fa:	4625      	mov	r5, r4
 800b2fc:	ac3a      	add	r4, sp, #232	@ 0xe8
 800b2fe:	940d      	str	r4, [sp, #52]	@ 0x34
 800b300:	465c      	mov	r4, fp
 800b302:	46bb      	mov	fp, r7
 800b304:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b306:	f10d 0a10 	add.w	sl, sp, #16
 800b30a:	ae36      	add	r6, sp, #216	@ 0xd8
 800b30c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b30e:	933b      	str	r3, [sp, #236]	@ 0xec
 800b310:	9b08      	ldr	r3, [sp, #32]
 800b312:	9338      	str	r3, [sp, #224]	@ 0xe0
 800b314:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b316:	9339      	str	r3, [sp, #228]	@ 0xe4
 800b318:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b31a:	9334      	str	r3, [sp, #208]	@ 0xd0
 800b31c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b31e:	f8cd b0e8 	str.w	fp, [sp, #232]	@ 0xe8
 800b322:	f8d3 c000 	ldr.w	ip, [r3]
 800b326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b328:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800b32c:	9437      	str	r4, [sp, #220]	@ 0xdc
 800b32e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b332:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800b336:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800b33a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b33e:	ab34      	add	r3, sp, #208	@ 0xd0
 800b340:	fb0e c105 	mla	r1, lr, r5, ip
 800b344:	cb0c      	ldmia	r3, {r2, r3}
 800b346:	4648      	mov	r0, r9
 800b348:	f7ff fdea 	bl	800af20 <handle_message_memory.constprop.2>
 800b34c:	3501      	adds	r5, #1
 800b34e:	45a8      	cmp	r8, r5
 800b350:	4407      	add	r7, r0
 800b352:	d1db      	bne.n	800b30c <handle_message_memory.constprop.2+0x3ec>
 800b354:	970a      	str	r7, [sp, #40]	@ 0x28
 800b356:	465f      	mov	r7, fp
 800b358:	46a3      	mov	fp, r4
 800b35a:	e660      	b.n	800b01e <handle_message_memory.constprop.2+0xfe>
 800b35c:	a823      	add	r0, sp, #140	@ 0x8c
 800b35e:	f003 f9d5 	bl	800e70c <rcutils_get_default_allocator>
 800b362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b364:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 800b366:	930e      	str	r3, [sp, #56]	@ 0x38
 800b368:	e6b5      	b.n	800b0d6 <handle_message_memory.constprop.2+0x1b6>
 800b36a:	686d      	ldr	r5, [r5, #4]
 800b36c:	e6d7      	b.n	800b11e <handle_message_memory.constprop.2+0x1fe>
 800b36e:	a81e      	add	r0, sp, #120	@ 0x78
 800b370:	f003 f9cc 	bl	800e70c <rcutils_get_default_allocator>
 800b374:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b376:	9315      	str	r3, [sp, #84]	@ 0x54
 800b378:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b37a:	ee08 3a10 	vmov	s16, r3
 800b37e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b380:	e5eb      	b.n	800af5a <handle_message_memory.constprop.2+0x3a>
 800b382:	bf00      	nop
 800b384:	08022970 	.word	0x08022970
 800b388:	20000384 	.word	0x20000384
 800b38c:	0802296c 	.word	0x0802296c
 800b390:	08022978 	.word	0x08022978

0800b394 <get_longest_member_name>:
 800b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	ed2d 8b06 	vpush	{d8-d10}
 800b39c:	6885      	ldr	r5, [r0, #8]
 800b39e:	b099      	sub	sp, #100	@ 0x64
 800b3a0:	2d00      	cmp	r5, #0
 800b3a2:	f000 810f 	beq.w	800b5c4 <get_longest_member_name+0x230>
 800b3a6:	f04f 0a00 	mov.w	sl, #0
 800b3aa:	46d3      	mov	fp, sl
 800b3ac:	f8cd a004 	str.w	sl, [sp, #4]
 800b3b0:	9003      	str	r0, [sp, #12]
 800b3b2:	9b03      	ldr	r3, [sp, #12]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	eb03 020a 	add.w	r2, r3, sl
 800b3ba:	f853 700a 	ldr.w	r7, [r3, sl]
 800b3be:	7913      	ldrb	r3, [r2, #4]
 800b3c0:	2b12      	cmp	r3, #18
 800b3c2:	d018      	beq.n	800b3f6 <get_longest_member_name+0x62>
 800b3c4:	f04f 0900 	mov.w	r9, #0
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7f4 ff19 	bl	8000200 <strlen>
 800b3ce:	9b01      	ldr	r3, [sp, #4]
 800b3d0:	4448      	add	r0, r9
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	4283      	cmp	r3, r0
 800b3d6:	f10b 0b01 	add.w	fp, fp, #1
 800b3da:	bf38      	it	cc
 800b3dc:	4603      	movcc	r3, r0
 800b3de:	455d      	cmp	r5, fp
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b3e6:	d8e4      	bhi.n	800b3b2 <get_longest_member_name+0x1e>
 800b3e8:	469b      	mov	fp, r3
 800b3ea:	4658      	mov	r0, fp
 800b3ec:	b019      	add	sp, #100	@ 0x64
 800b3ee:	ecbd 8b06 	vpop	{d8-d10}
 800b3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f6:	4bbc      	ldr	r3, [pc, #752]	@ (800b6e8 <get_longest_member_name+0x354>)
 800b3f8:	68d0      	ldr	r0, [r2, #12]
 800b3fa:	6819      	ldr	r1, [r3, #0]
 800b3fc:	f003 ffe2 	bl	800f3c4 <get_message_typesupport_handle>
 800b400:	6843      	ldr	r3, [r0, #4]
 800b402:	9305      	str	r3, [sp, #20]
 800b404:	689d      	ldr	r5, [r3, #8]
 800b406:	2d00      	cmp	r5, #0
 800b408:	f000 811a 	beq.w	800b640 <get_longest_member_name+0x2ac>
 800b40c:	f04f 0800 	mov.w	r8, #0
 800b410:	ee08 7a10 	vmov	s16, r7
 800b414:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800b418:	46c1      	mov	r9, r8
 800b41a:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b41e:	f8cd 8008 	str.w	r8, [sp, #8]
 800b422:	46c2      	mov	sl, r8
 800b424:	9b05      	ldr	r3, [sp, #20]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	eb03 020a 	add.w	r2, r3, sl
 800b42c:	f853 300a 	ldr.w	r3, [r3, sl]
 800b430:	ee0a 3a10 	vmov	s20, r3
 800b434:	7913      	ldrb	r3, [r2, #4]
 800b436:	2b12      	cmp	r3, #18
 800b438:	d01b      	beq.n	800b472 <get_longest_member_name+0xde>
 800b43a:	2700      	movs	r7, #0
 800b43c:	ee1a 0a10 	vmov	r0, s20
 800b440:	f7f4 fede 	bl	8000200 <strlen>
 800b444:	9b02      	ldr	r3, [sp, #8]
 800b446:	4438      	add	r0, r7
 800b448:	3001      	adds	r0, #1
 800b44a:	4283      	cmp	r3, r0
 800b44c:	f109 0901 	add.w	r9, r9, #1
 800b450:	bf38      	it	cc
 800b452:	4603      	movcc	r3, r0
 800b454:	45a9      	cmp	r9, r5
 800b456:	9302      	str	r3, [sp, #8]
 800b458:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b45c:	d3e2      	bcc.n	800b424 <get_longest_member_name+0x90>
 800b45e:	4699      	mov	r9, r3
 800b460:	9b03      	ldr	r3, [sp, #12]
 800b462:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800b466:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800b46a:	689d      	ldr	r5, [r3, #8]
 800b46c:	ee18 7a10 	vmov	r7, s16
 800b470:	e7aa      	b.n	800b3c8 <get_longest_member_name+0x34>
 800b472:	4b9d      	ldr	r3, [pc, #628]	@ (800b6e8 <get_longest_member_name+0x354>)
 800b474:	68d0      	ldr	r0, [r2, #12]
 800b476:	6819      	ldr	r1, [r3, #0]
 800b478:	f003 ffa4 	bl	800f3c4 <get_message_typesupport_handle>
 800b47c:	6843      	ldr	r3, [r0, #4]
 800b47e:	9307      	str	r3, [sp, #28]
 800b480:	689d      	ldr	r5, [r3, #8]
 800b482:	2d00      	cmp	r5, #0
 800b484:	f000 80a5 	beq.w	800b5d2 <get_longest_member_name+0x23e>
 800b488:	f04f 0b00 	mov.w	fp, #0
 800b48c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800b490:	46d8      	mov	r8, fp
 800b492:	f8cd b010 	str.w	fp, [sp, #16]
 800b496:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800b49a:	46d9      	mov	r9, fp
 800b49c:	9b07      	ldr	r3, [sp, #28]
 800b49e:	691b      	ldr	r3, [r3, #16]
 800b4a0:	eb03 0209 	add.w	r2, r3, r9
 800b4a4:	f853 7009 	ldr.w	r7, [r3, r9]
 800b4a8:	7913      	ldrb	r3, [r2, #4]
 800b4aa:	2b12      	cmp	r3, #18
 800b4ac:	d019      	beq.n	800b4e2 <get_longest_member_name+0x14e>
 800b4ae:	f04f 0a00 	mov.w	sl, #0
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	f7f4 fea4 	bl	8000200 <strlen>
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	4450      	add	r0, sl
 800b4bc:	3001      	adds	r0, #1
 800b4be:	4283      	cmp	r3, r0
 800b4c0:	f108 0801 	add.w	r8, r8, #1
 800b4c4:	bf38      	it	cc
 800b4c6:	4603      	movcc	r3, r0
 800b4c8:	45a8      	cmp	r8, r5
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800b4d0:	d3e4      	bcc.n	800b49c <get_longest_member_name+0x108>
 800b4d2:	461f      	mov	r7, r3
 800b4d4:	9b05      	ldr	r3, [sp, #20]
 800b4d6:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800b4da:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800b4de:	689d      	ldr	r5, [r3, #8]
 800b4e0:	e7ac      	b.n	800b43c <get_longest_member_name+0xa8>
 800b4e2:	4b81      	ldr	r3, [pc, #516]	@ (800b6e8 <get_longest_member_name+0x354>)
 800b4e4:	68d0      	ldr	r0, [r2, #12]
 800b4e6:	6819      	ldr	r1, [r3, #0]
 800b4e8:	f003 ff6c 	bl	800f3c4 <get_message_typesupport_handle>
 800b4ec:	6843      	ldr	r3, [r0, #4]
 800b4ee:	9308      	str	r3, [sp, #32]
 800b4f0:	689d      	ldr	r5, [r3, #8]
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	f000 80f2 	beq.w	800b6dc <get_longest_member_name+0x348>
 800b4f8:	f04f 0b00 	mov.w	fp, #0
 800b4fc:	ee08 7a90 	vmov	s17, r7
 800b500:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800b504:	46da      	mov	sl, fp
 800b506:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 800b50a:	f8cd b018 	str.w	fp, [sp, #24]
 800b50e:	46d9      	mov	r9, fp
 800b510:	9b08      	ldr	r3, [sp, #32]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	eb03 020a 	add.w	r2, r3, sl
 800b518:	f853 700a 	ldr.w	r7, [r3, sl]
 800b51c:	7913      	ldrb	r3, [r2, #4]
 800b51e:	2b12      	cmp	r3, #18
 800b520:	d01b      	beq.n	800b55a <get_longest_member_name+0x1c6>
 800b522:	f04f 0b00 	mov.w	fp, #0
 800b526:	4638      	mov	r0, r7
 800b528:	f7f4 fe6a 	bl	8000200 <strlen>
 800b52c:	9b06      	ldr	r3, [sp, #24]
 800b52e:	4458      	add	r0, fp
 800b530:	3001      	adds	r0, #1
 800b532:	4283      	cmp	r3, r0
 800b534:	f109 0901 	add.w	r9, r9, #1
 800b538:	bf38      	it	cc
 800b53a:	4603      	movcc	r3, r0
 800b53c:	45a9      	cmp	r9, r5
 800b53e:	9306      	str	r3, [sp, #24]
 800b540:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b544:	d3e4      	bcc.n	800b510 <get_longest_member_name+0x17c>
 800b546:	469a      	mov	sl, r3
 800b548:	9b07      	ldr	r3, [sp, #28]
 800b54a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800b54e:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800b552:	689d      	ldr	r5, [r3, #8]
 800b554:	ee18 7a90 	vmov	r7, s17
 800b558:	e7ab      	b.n	800b4b2 <get_longest_member_name+0x11e>
 800b55a:	4b63      	ldr	r3, [pc, #396]	@ (800b6e8 <get_longest_member_name+0x354>)
 800b55c:	68d0      	ldr	r0, [r2, #12]
 800b55e:	6819      	ldr	r1, [r3, #0]
 800b560:	f003 ff30 	bl	800f3c4 <get_message_typesupport_handle>
 800b564:	6843      	ldr	r3, [r0, #4]
 800b566:	9309      	str	r3, [sp, #36]	@ 0x24
 800b568:	689d      	ldr	r5, [r3, #8]
 800b56a:	2d00      	cmp	r5, #0
 800b56c:	f000 80b9 	beq.w	800b6e2 <get_longest_member_name+0x34e>
 800b570:	f04f 0800 	mov.w	r8, #0
 800b574:	ee09 7a10 	vmov	s18, r7
 800b578:	e9cd 9a11 	strd	r9, sl, [sp, #68]	@ 0x44
 800b57c:	46c3      	mov	fp, r8
 800b57e:	46c2      	mov	sl, r8
 800b580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	eb03 0208 	add.w	r2, r3, r8
 800b588:	f853 9008 	ldr.w	r9, [r3, r8]
 800b58c:	7913      	ldrb	r3, [r2, #4]
 800b58e:	2b12      	cmp	r3, #18
 800b590:	d022      	beq.n	800b5d8 <get_longest_member_name+0x244>
 800b592:	2700      	movs	r7, #0
 800b594:	4648      	mov	r0, r9
 800b596:	f7f4 fe33 	bl	8000200 <strlen>
 800b59a:	4438      	add	r0, r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	4582      	cmp	sl, r0
 800b5a0:	f10b 0b01 	add.w	fp, fp, #1
 800b5a4:	bf38      	it	cc
 800b5a6:	4682      	movcc	sl, r0
 800b5a8:	45ab      	cmp	fp, r5
 800b5aa:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 800b5ae:	d3e7      	bcc.n	800b580 <get_longest_member_name+0x1ec>
 800b5b0:	9b08      	ldr	r3, [sp, #32]
 800b5b2:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 800b5b6:	689d      	ldr	r5, [r3, #8]
 800b5b8:	46d3      	mov	fp, sl
 800b5ba:	ee19 7a10 	vmov	r7, s18
 800b5be:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 800b5c2:	e7b0      	b.n	800b526 <get_longest_member_name+0x192>
 800b5c4:	46ab      	mov	fp, r5
 800b5c6:	4658      	mov	r0, fp
 800b5c8:	b019      	add	sp, #100	@ 0x64
 800b5ca:	ecbd 8b06 	vpop	{d8-d10}
 800b5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d2:	9b05      	ldr	r3, [sp, #20]
 800b5d4:	689d      	ldr	r5, [r3, #8]
 800b5d6:	e730      	b.n	800b43a <get_longest_member_name+0xa6>
 800b5d8:	4b43      	ldr	r3, [pc, #268]	@ (800b6e8 <get_longest_member_name+0x354>)
 800b5da:	68d0      	ldr	r0, [r2, #12]
 800b5dc:	6819      	ldr	r1, [r3, #0]
 800b5de:	f003 fef1 	bl	800f3c4 <get_message_typesupport_handle>
 800b5e2:	6843      	ldr	r3, [r0, #4]
 800b5e4:	689e      	ldr	r6, [r3, #8]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	d07f      	beq.n	800b6ec <get_longest_member_name+0x358>
 800b5ec:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
 800b5f0:	2400      	movs	r4, #0
 800b5f2:	ee09 9a90 	vmov	s19, r9
 800b5f6:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 800b5fa:	4627      	mov	r7, r4
 800b5fc:	4691      	mov	r9, r2
 800b5fe:	46a0      	mov	r8, r4
 800b600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b604:	191a      	adds	r2, r3, r4
 800b606:	f853 b004 	ldr.w	fp, [r3, r4]
 800b60a:	7913      	ldrb	r3, [r2, #4]
 800b60c:	2b12      	cmp	r3, #18
 800b60e:	d01a      	beq.n	800b646 <get_longest_member_name+0x2b2>
 800b610:	2500      	movs	r5, #0
 800b612:	4658      	mov	r0, fp
 800b614:	f7f4 fdf4 	bl	8000200 <strlen>
 800b618:	4405      	add	r5, r0
 800b61a:	3501      	adds	r5, #1
 800b61c:	42af      	cmp	r7, r5
 800b61e:	f108 0801 	add.w	r8, r8, #1
 800b622:	bf38      	it	cc
 800b624:	462f      	movcc	r7, r5
 800b626:	45b0      	cmp	r8, r6
 800b628:	f104 043c 	add.w	r4, r4, #60	@ 0x3c
 800b62c:	d3e8      	bcc.n	800b600 <get_longest_member_name+0x26c>
 800b62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b630:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800b634:	689d      	ldr	r5, [r3, #8]
 800b636:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
 800b63a:	ee19 9a90 	vmov	r9, s19
 800b63e:	e7a9      	b.n	800b594 <get_longest_member_name+0x200>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	689d      	ldr	r5, [r3, #8]
 800b644:	e6be      	b.n	800b3c4 <get_longest_member_name+0x30>
 800b646:	4b28      	ldr	r3, [pc, #160]	@ (800b6e8 <get_longest_member_name+0x354>)
 800b648:	68d0      	ldr	r0, [r2, #12]
 800b64a:	6819      	ldr	r1, [r3, #0]
 800b64c:	f003 feba 	bl	800f3c4 <get_message_typesupport_handle>
 800b650:	6843      	ldr	r3, [r0, #4]
 800b652:	9310      	str	r3, [sp, #64]	@ 0x40
 800b654:	6899      	ldr	r1, [r3, #8]
 800b656:	2900      	cmp	r1, #0
 800b658:	d04b      	beq.n	800b6f2 <get_longest_member_name+0x35e>
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	9416      	str	r4, [sp, #88]	@ 0x58
 800b65e:	2600      	movs	r6, #0
 800b660:	ee0a ba90 	vmov	s21, fp
 800b664:	46b2      	mov	sl, r6
 800b666:	46b3      	mov	fp, r6
 800b668:	460c      	mov	r4, r1
 800b66a:	461d      	mov	r5, r3
 800b66c:	19aa      	adds	r2, r5, r6
 800b66e:	59ab      	ldr	r3, [r5, r6]
 800b670:	f892 c004 	ldrb.w	ip, [r2, #4]
 800b674:	f1bc 0f12 	cmp.w	ip, #18
 800b678:	4618      	mov	r0, r3
 800b67a:	d012      	beq.n	800b6a2 <get_longest_member_name+0x30e>
 800b67c:	f7f4 fdc0 	bl	8000200 <strlen>
 800b680:	3001      	adds	r0, #1
 800b682:	4583      	cmp	fp, r0
 800b684:	f10a 0a01 	add.w	sl, sl, #1
 800b688:	bf38      	it	cc
 800b68a:	4683      	movcc	fp, r0
 800b68c:	45a2      	cmp	sl, r4
 800b68e:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 800b692:	d3eb      	bcc.n	800b66c <get_longest_member_name+0x2d8>
 800b694:	465d      	mov	r5, fp
 800b696:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800b698:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b69c:	ee1a ba90 	vmov	fp, s21
 800b6a0:	e7b7      	b.n	800b612 <get_longest_member_name+0x27e>
 800b6a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b6a4:	4b10      	ldr	r3, [pc, #64]	@ (800b6e8 <get_longest_member_name+0x354>)
 800b6a6:	68d0      	ldr	r0, [r2, #12]
 800b6a8:	6819      	ldr	r1, [r3, #0]
 800b6aa:	f003 fe8b 	bl	800f3c4 <get_message_typesupport_handle>
 800b6ae:	6840      	ldr	r0, [r0, #4]
 800b6b0:	f7ff fe70 	bl	800b394 <get_longest_member_name>
 800b6b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7f4 fda1 	bl	8000200 <strlen>
 800b6be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6c0:	4405      	add	r5, r0
 800b6c2:	3501      	adds	r5, #1
 800b6c4:	689c      	ldr	r4, [r3, #8]
 800b6c6:	45ab      	cmp	fp, r5
 800b6c8:	f10a 0a01 	add.w	sl, sl, #1
 800b6cc:	bf38      	it	cc
 800b6ce:	46ab      	movcc	fp, r5
 800b6d0:	4554      	cmp	r4, sl
 800b6d2:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 800b6d6:	d9dd      	bls.n	800b694 <get_longest_member_name+0x300>
 800b6d8:	691d      	ldr	r5, [r3, #16]
 800b6da:	e7c7      	b.n	800b66c <get_longest_member_name+0x2d8>
 800b6dc:	9b07      	ldr	r3, [sp, #28]
 800b6de:	689d      	ldr	r5, [r3, #8]
 800b6e0:	e6e5      	b.n	800b4ae <get_longest_member_name+0x11a>
 800b6e2:	9b08      	ldr	r3, [sp, #32]
 800b6e4:	689d      	ldr	r5, [r3, #8]
 800b6e6:	e71c      	b.n	800b522 <get_longest_member_name+0x18e>
 800b6e8:	20000384 	.word	0x20000384
 800b6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ee:	689d      	ldr	r5, [r3, #8]
 800b6f0:	e74f      	b.n	800b592 <get_longest_member_name+0x1fe>
 800b6f2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b6f6:	e78b      	b.n	800b610 <get_longest_member_name+0x27c>

0800b6f8 <micro_ros_utilities_get_dynamic_size>:
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fe:	ed2d 8b02 	vpush	{d8}
 800b702:	b09f      	sub	sp, #124	@ 0x7c
 800b704:	ac2b      	add	r4, sp, #172	@ 0xac
 800b706:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b70a:	4619      	mov	r1, r3
 800b70c:	2900      	cmp	r1, #0
 800b70e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800b710:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 800b712:	941c      	str	r4, [sp, #112]	@ 0x70
 800b714:	bf08      	it	eq
 800b716:	2105      	moveq	r1, #5
 800b718:	2a00      	cmp	r2, #0
 800b71a:	bf08      	it	eq
 800b71c:	2205      	moveq	r2, #5
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bf08      	it	eq
 800b722:	2314      	moveq	r3, #20
 800b724:	9318      	str	r3, [sp, #96]	@ 0x60
 800b726:	4b78      	ldr	r3, [pc, #480]	@ (800b908 <micro_ros_utilities_get_dynamic_size+0x210>)
 800b728:	911a      	str	r1, [sp, #104]	@ 0x68
 800b72a:	6819      	ldr	r1, [r3, #0]
 800b72c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b72e:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b730:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800b732:	931d      	str	r3, [sp, #116]	@ 0x74
 800b734:	9219      	str	r2, [sp, #100]	@ 0x64
 800b736:	f003 fe45 	bl	800f3c4 <get_message_typesupport_handle>
 800b73a:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 800b73e:	2300      	movs	r3, #0
 800b740:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b744:	9315      	str	r3, [sp, #84]	@ 0x54
 800b746:	e9cb 3301 	strd	r3, r3, [fp, #4]
 800b74a:	b9c4      	cbnz	r4, 800b77e <micro_ros_utilities_get_dynamic_size+0x86>
 800b74c:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800b750:	ab04      	add	r3, sp, #16
 800b752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b756:	ab1e      	add	r3, sp, #120	@ 0x78
 800b758:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b75c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b760:	ab18      	add	r3, sp, #96	@ 0x60
 800b762:	4621      	mov	r1, r4
 800b764:	cb0c      	ldmia	r3, {r2, r3}
 800b766:	4650      	mov	r0, sl
 800b768:	f7ff fa10 	bl	800ab8c <handle_message_memory.constprop.4>
 800b76c:	4604      	mov	r4, r0
 800b76e:	4620      	mov	r0, r4
 800b770:	b01f      	add	sp, #124	@ 0x7c
 800b772:	ecbd 8b02 	vpop	{d8}
 800b776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77a:	b004      	add	sp, #16
 800b77c:	4770      	bx	lr
 800b77e:	f8da 5008 	ldr.w	r5, [sl, #8]
 800b782:	9508      	str	r5, [sp, #32]
 800b784:	b30d      	cbz	r5, 800b7ca <micro_ros_utilities_get_dynamic_size+0xd2>
 800b786:	4698      	mov	r8, r3
 800b788:	9308      	str	r3, [sp, #32]
 800b78a:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800b78e:	461f      	mov	r7, r3
 800b790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	eb03 0208 	add.w	r2, r3, r8
 800b798:	f853 6008 	ldr.w	r6, [r3, r8]
 800b79c:	7913      	ldrb	r3, [r2, #4]
 800b79e:	2b12      	cmp	r3, #18
 800b7a0:	d030      	beq.n	800b804 <micro_ros_utilities_get_dynamic_size+0x10c>
 800b7a2:	f04f 0900 	mov.w	r9, #0
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f7f4 fd2a 	bl	8000200 <strlen>
 800b7ac:	9b08      	ldr	r3, [sp, #32]
 800b7ae:	4448      	add	r0, r9
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	4283      	cmp	r3, r0
 800b7b4:	f107 0701 	add.w	r7, r7, #1
 800b7b8:	bf38      	it	cc
 800b7ba:	4603      	movcc	r3, r0
 800b7bc:	42af      	cmp	r7, r5
 800b7be:	9308      	str	r3, [sp, #32]
 800b7c0:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 800b7c4:	d3e4      	bcc.n	800b790 <micro_ros_utilities_get_dynamic_size+0x98>
 800b7c6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800b7ca:	9908      	ldr	r1, [sp, #32]
 800b7cc:	ac10      	add	r4, sp, #64	@ 0x40
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f004 fddc 	bl	801038c <micro_ros_string_utilities_init_with_size>
 800b7d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b7d8:	ab04      	add	r3, sp, #16
 800b7da:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800b7de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b7e2:	ab1e      	add	r3, sp, #120	@ 0x78
 800b7e4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b7e8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b7ec:	ac18      	add	r4, sp, #96	@ 0x60
 800b7ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4650      	mov	r0, sl
 800b7f6:	f7ff f9c9 	bl	800ab8c <handle_message_memory.constprop.4>
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4658      	mov	r0, fp
 800b7fe:	f004 fe23 	bl	8010448 <micro_ros_string_utilities_destroy>
 800b802:	e7b4      	b.n	800b76e <micro_ros_utilities_get_dynamic_size+0x76>
 800b804:	4b40      	ldr	r3, [pc, #256]	@ (800b908 <micro_ros_utilities_get_dynamic_size+0x210>)
 800b806:	68d0      	ldr	r0, [r2, #12]
 800b808:	6819      	ldr	r1, [r3, #0]
 800b80a:	f003 fddb 	bl	800f3c4 <get_message_typesupport_handle>
 800b80e:	6843      	ldr	r3, [r0, #4]
 800b810:	930a      	str	r3, [sp, #40]	@ 0x28
 800b812:	689d      	ldr	r5, [r3, #8]
 800b814:	b33d      	cbz	r5, 800b866 <micro_ros_utilities_get_dynamic_size+0x16e>
 800b816:	f04f 0a00 	mov.w	sl, #0
 800b81a:	ee08 6a10 	vmov	s16, r6
 800b81e:	970c      	str	r7, [sp, #48]	@ 0x30
 800b820:	46d1      	mov	r9, sl
 800b822:	4657      	mov	r7, sl
 800b824:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800b828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b82a:	691b      	ldr	r3, [r3, #16]
 800b82c:	eb03 020a 	add.w	r2, r3, sl
 800b830:	f853 800a 	ldr.w	r8, [r3, sl]
 800b834:	7913      	ldrb	r3, [r2, #4]
 800b836:	2b12      	cmp	r3, #18
 800b838:	d018      	beq.n	800b86c <micro_ros_utilities_get_dynamic_size+0x174>
 800b83a:	2400      	movs	r4, #0
 800b83c:	4640      	mov	r0, r8
 800b83e:	f7f4 fcdf 	bl	8000200 <strlen>
 800b842:	4404      	add	r4, r0
 800b844:	3401      	adds	r4, #1
 800b846:	45a1      	cmp	r9, r4
 800b848:	f107 0701 	add.w	r7, r7, #1
 800b84c:	bf38      	it	cc
 800b84e:	46a1      	movcc	r9, r4
 800b850:	42af      	cmp	r7, r5
 800b852:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b856:	d3e7      	bcc.n	800b828 <micro_ros_utilities_get_dynamic_size+0x130>
 800b858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800b85e:	ee18 6a10 	vmov	r6, s16
 800b862:	689d      	ldr	r5, [r3, #8]
 800b864:	e79f      	b.n	800b7a6 <micro_ros_utilities_get_dynamic_size+0xae>
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	689d      	ldr	r5, [r3, #8]
 800b86a:	e79a      	b.n	800b7a2 <micro_ros_utilities_get_dynamic_size+0xaa>
 800b86c:	4b26      	ldr	r3, [pc, #152]	@ (800b908 <micro_ros_utilities_get_dynamic_size+0x210>)
 800b86e:	68d0      	ldr	r0, [r2, #12]
 800b870:	6819      	ldr	r1, [r3, #0]
 800b872:	f003 fda7 	bl	800f3c4 <get_message_typesupport_handle>
 800b876:	6843      	ldr	r3, [r0, #4]
 800b878:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b87a:	6899      	ldr	r1, [r3, #8]
 800b87c:	2900      	cmp	r1, #0
 800b87e:	d040      	beq.n	800b902 <micro_ros_utilities_get_dynamic_size+0x20a>
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	970e      	str	r7, [sp, #56]	@ 0x38
 800b884:	2500      	movs	r5, #0
 800b886:	ee08 8a90 	vmov	s17, r8
 800b88a:	462e      	mov	r6, r5
 800b88c:	46a8      	mov	r8, r5
 800b88e:	460f      	mov	r7, r1
 800b890:	461c      	mov	r4, r3
 800b892:	1962      	adds	r2, r4, r5
 800b894:	5963      	ldr	r3, [r4, r5]
 800b896:	f892 c004 	ldrb.w	ip, [r2, #4]
 800b89a:	f1bc 0f12 	cmp.w	ip, #18
 800b89e:	4618      	mov	r0, r3
 800b8a0:	d012      	beq.n	800b8c8 <micro_ros_utilities_get_dynamic_size+0x1d0>
 800b8a2:	f7f4 fcad 	bl	8000200 <strlen>
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	4580      	cmp	r8, r0
 800b8aa:	f106 0601 	add.w	r6, r6, #1
 800b8ae:	bf38      	it	cc
 800b8b0:	4680      	movcc	r8, r0
 800b8b2:	42be      	cmp	r6, r7
 800b8b4:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b8b8:	d3eb      	bcc.n	800b892 <micro_ros_utilities_get_dynamic_size+0x19a>
 800b8ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8bc:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800b8be:	689d      	ldr	r5, [r3, #8]
 800b8c0:	4644      	mov	r4, r8
 800b8c2:	ee18 8a90 	vmov	r8, s17
 800b8c6:	e7b9      	b.n	800b83c <micro_ros_utilities_get_dynamic_size+0x144>
 800b8c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b908 <micro_ros_utilities_get_dynamic_size+0x210>)
 800b8cc:	68d0      	ldr	r0, [r2, #12]
 800b8ce:	6819      	ldr	r1, [r3, #0]
 800b8d0:	f003 fd78 	bl	800f3c4 <get_message_typesupport_handle>
 800b8d4:	6840      	ldr	r0, [r0, #4]
 800b8d6:	f7ff fd5d 	bl	800b394 <get_longest_member_name>
 800b8da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8dc:	4604      	mov	r4, r0
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f4 fc8e 	bl	8000200 <strlen>
 800b8e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8e6:	4404      	add	r4, r0
 800b8e8:	3401      	adds	r4, #1
 800b8ea:	689f      	ldr	r7, [r3, #8]
 800b8ec:	45a0      	cmp	r8, r4
 800b8ee:	f106 0601 	add.w	r6, r6, #1
 800b8f2:	bf38      	it	cc
 800b8f4:	46a0      	movcc	r8, r4
 800b8f6:	42b7      	cmp	r7, r6
 800b8f8:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b8fc:	d9dd      	bls.n	800b8ba <micro_ros_utilities_get_dynamic_size+0x1c2>
 800b8fe:	691c      	ldr	r4, [r3, #16]
 800b900:	e7c7      	b.n	800b892 <micro_ros_utilities_get_dynamic_size+0x19a>
 800b902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b904:	689d      	ldr	r5, [r3, #8]
 800b906:	e798      	b.n	800b83a <micro_ros_utilities_get_dynamic_size+0x142>
 800b908:	20000384 	.word	0x20000384

0800b90c <micro_ros_utilities_create_message_memory>:
 800b90c:	b082      	sub	sp, #8
 800b90e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b912:	ed2d 8b04 	vpush	{d8-d9}
 800b916:	b0a1      	sub	sp, #132	@ 0x84
 800b918:	ac2e      	add	r4, sp, #184	@ 0xb8
 800b91a:	ae31      	add	r6, sp, #196	@ 0xc4
 800b91c:	e884 000c 	stmia.w	r4, {r2, r3}
 800b920:	4605      	mov	r5, r0
 800b922:	468b      	mov	fp, r1
 800b924:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b928:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b92c:	ab2e      	add	r3, sp, #184	@ 0xb8
 800b92e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b930:	4628      	mov	r0, r5
 800b932:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800b934:	f7ff fee0 	bl	800b6f8 <micro_ros_utilities_get_dynamic_size>
 800b938:	4603      	mov	r3, r0
 800b93a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b93c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800b93e:	941e      	str	r4, [sp, #120]	@ 0x78
 800b940:	2b00      	cmp	r3, #0
 800b942:	bf08      	it	eq
 800b944:	2305      	moveq	r3, #5
 800b946:	931c      	str	r3, [sp, #112]	@ 0x70
 800b948:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	bf08      	it	eq
 800b94e:	2305      	moveq	r3, #5
 800b950:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b952:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b954:	2b00      	cmp	r3, #0
 800b956:	bf08      	it	eq
 800b958:	2314      	moveq	r3, #20
 800b95a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b95c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800b95e:	931d      	str	r3, [sp, #116]	@ 0x74
 800b960:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800b962:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b964:	4b81      	ldr	r3, [pc, #516]	@ (800bb6c <micro_ros_utilities_create_message_memory+0x260>)
 800b966:	4628      	mov	r0, r5
 800b968:	6819      	ldr	r1, [r3, #0]
 800b96a:	f003 fd2b 	bl	800f3c4 <get_message_typesupport_handle>
 800b96e:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800b972:	2300      	movs	r3, #0
 800b974:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b978:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b97a:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800b97e:	bb1c      	cbnz	r4, 800b9c8 <micro_ros_utilities_create_message_memory+0xbc>
 800b980:	4621      	mov	r1, r4
 800b982:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b986:	4658      	mov	r0, fp
 800b988:	f015 ffeb 	bl	8021962 <memset>
 800b98c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b990:	ab04      	add	r3, sp, #16
 800b992:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b996:	ab20      	add	r3, sp, #128	@ 0x80
 800b998:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b99c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b9a0:	ac1a      	add	r4, sp, #104	@ 0x68
 800b9a2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b9a6:	4659      	mov	r1, fp
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	f7ff fab9 	bl	800af20 <handle_message_memory.constprop.2>
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9b2:	1b18      	subs	r0, r3, r4
 800b9b4:	fab0 f080 	clz	r0, r0
 800b9b8:	0940      	lsrs	r0, r0, #5
 800b9ba:	b021      	add	sp, #132	@ 0x84
 800b9bc:	ecbd 8b04 	vpop	{d8-d9}
 800b9c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	b002      	add	sp, #8
 800b9c6:	4770      	bx	lr
 800b9c8:	f8da 5008 	ldr.w	r5, [sl, #8]
 800b9cc:	9509      	str	r5, [sp, #36]	@ 0x24
 800b9ce:	b32d      	cbz	r5, 800ba1c <micro_ros_utilities_create_message_memory+0x110>
 800b9d0:	ee08 ba10 	vmov	s16, fp
 800b9d4:	4699      	mov	r9, r3
 800b9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9d8:	461f      	mov	r7, r3
 800b9da:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800b9de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	eb03 0209 	add.w	r2, r3, r9
 800b9e6:	f853 6009 	ldr.w	r6, [r3, r9]
 800b9ea:	7913      	ldrb	r3, [r2, #4]
 800b9ec:	2b12      	cmp	r3, #18
 800b9ee:	d03a      	beq.n	800ba66 <micro_ros_utilities_create_message_memory+0x15a>
 800b9f0:	f04f 0a00 	mov.w	sl, #0
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7f4 fc03 	bl	8000200 <strlen>
 800b9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fc:	4450      	add	r0, sl
 800b9fe:	3001      	adds	r0, #1
 800ba00:	4283      	cmp	r3, r0
 800ba02:	f107 0701 	add.w	r7, r7, #1
 800ba06:	bf38      	it	cc
 800ba08:	4603      	movcc	r3, r0
 800ba0a:	42af      	cmp	r7, r5
 800ba0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba0e:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800ba12:	d3e4      	bcc.n	800b9de <micro_ros_utilities_create_message_memory+0xd2>
 800ba14:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800ba18:	ee18 ba10 	vmov	fp, s16
 800ba1c:	ac12      	add	r4, sp, #72	@ 0x48
 800ba1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba20:	4620      	mov	r0, r4
 800ba22:	f004 fcb3 	bl	801038c <micro_ros_string_utilities_init_with_size>
 800ba26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ba2a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800ba2e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800ba32:	2100      	movs	r1, #0
 800ba34:	4658      	mov	r0, fp
 800ba36:	f015 ff94 	bl	8021962 <memset>
 800ba3a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800ba3e:	ab04      	add	r3, sp, #16
 800ba40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba44:	ab20      	add	r3, sp, #128	@ 0x80
 800ba46:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ba4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ba4e:	ac1a      	add	r4, sp, #104	@ 0x68
 800ba50:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ba54:	4659      	mov	r1, fp
 800ba56:	4650      	mov	r0, sl
 800ba58:	f7ff fa62 	bl	800af20 <handle_message_memory.constprop.2>
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f004 fcf2 	bl	8010448 <micro_ros_string_utilities_destroy>
 800ba64:	e7a4      	b.n	800b9b0 <micro_ros_utilities_create_message_memory+0xa4>
 800ba66:	4b41      	ldr	r3, [pc, #260]	@ (800bb6c <micro_ros_utilities_create_message_memory+0x260>)
 800ba68:	68d0      	ldr	r0, [r2, #12]
 800ba6a:	6819      	ldr	r1, [r3, #0]
 800ba6c:	f003 fcaa 	bl	800f3c4 <get_message_typesupport_handle>
 800ba70:	6843      	ldr	r3, [r0, #4]
 800ba72:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba74:	689d      	ldr	r5, [r3, #8]
 800ba76:	b33d      	cbz	r5, 800bac8 <micro_ros_utilities_create_message_memory+0x1bc>
 800ba78:	f04f 0b00 	mov.w	fp, #0
 800ba7c:	ee08 6a90 	vmov	s17, r6
 800ba80:	970e      	str	r7, [sp, #56]	@ 0x38
 800ba82:	46da      	mov	sl, fp
 800ba84:	465f      	mov	r7, fp
 800ba86:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800ba8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	eb03 020b 	add.w	r2, r3, fp
 800ba92:	f853 600b 	ldr.w	r6, [r3, fp]
 800ba96:	7913      	ldrb	r3, [r2, #4]
 800ba98:	2b12      	cmp	r3, #18
 800ba9a:	d018      	beq.n	800bace <micro_ros_utilities_create_message_memory+0x1c2>
 800ba9c:	2400      	movs	r4, #0
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7f4 fbae 	bl	8000200 <strlen>
 800baa4:	4404      	add	r4, r0
 800baa6:	3401      	adds	r4, #1
 800baa8:	45a2      	cmp	sl, r4
 800baaa:	f107 0701 	add.w	r7, r7, #1
 800baae:	bf38      	it	cc
 800bab0:	46a2      	movcc	sl, r4
 800bab2:	42af      	cmp	r7, r5
 800bab4:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 800bab8:	d3e7      	bcc.n	800ba8a <micro_ros_utilities_create_message_memory+0x17e>
 800baba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800babc:	e9dd 790e 	ldrd	r7, r9, [sp, #56]	@ 0x38
 800bac0:	ee18 6a90 	vmov	r6, s17
 800bac4:	689d      	ldr	r5, [r3, #8]
 800bac6:	e795      	b.n	800b9f4 <micro_ros_utilities_create_message_memory+0xe8>
 800bac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baca:	689d      	ldr	r5, [r3, #8]
 800bacc:	e790      	b.n	800b9f0 <micro_ros_utilities_create_message_memory+0xe4>
 800bace:	4b27      	ldr	r3, [pc, #156]	@ (800bb6c <micro_ros_utilities_create_message_memory+0x260>)
 800bad0:	68d0      	ldr	r0, [r2, #12]
 800bad2:	6819      	ldr	r1, [r3, #0]
 800bad4:	f003 fc76 	bl	800f3c4 <get_message_typesupport_handle>
 800bad8:	6843      	ldr	r3, [r0, #4]
 800bada:	930d      	str	r3, [sp, #52]	@ 0x34
 800badc:	6899      	ldr	r1, [r3, #8]
 800bade:	2900      	cmp	r1, #0
 800bae0:	d040      	beq.n	800bb64 <micro_ros_utilities_create_message_memory+0x258>
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	9710      	str	r7, [sp, #64]	@ 0x40
 800bae6:	2500      	movs	r5, #0
 800bae8:	ee09 6a10 	vmov	s18, r6
 800baec:	46a9      	mov	r9, r5
 800baee:	462e      	mov	r6, r5
 800baf0:	460f      	mov	r7, r1
 800baf2:	461c      	mov	r4, r3
 800baf4:	1962      	adds	r2, r4, r5
 800baf6:	5963      	ldr	r3, [r4, r5]
 800baf8:	f892 c004 	ldrb.w	ip, [r2, #4]
 800bafc:	f1bc 0f12 	cmp.w	ip, #18
 800bb00:	4618      	mov	r0, r3
 800bb02:	d012      	beq.n	800bb2a <micro_ros_utilities_create_message_memory+0x21e>
 800bb04:	f7f4 fb7c 	bl	8000200 <strlen>
 800bb08:	3001      	adds	r0, #1
 800bb0a:	4286      	cmp	r6, r0
 800bb0c:	f109 0901 	add.w	r9, r9, #1
 800bb10:	bf38      	it	cc
 800bb12:	4606      	movcc	r6, r0
 800bb14:	45b9      	cmp	r9, r7
 800bb16:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800bb1a:	d3eb      	bcc.n	800baf4 <micro_ros_utilities_create_message_memory+0x1e8>
 800bb1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb1e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800bb20:	689d      	ldr	r5, [r3, #8]
 800bb22:	4634      	mov	r4, r6
 800bb24:	ee19 6a10 	vmov	r6, s18
 800bb28:	e7b9      	b.n	800ba9e <micro_ros_utilities_create_message_memory+0x192>
 800bb2a:	9311      	str	r3, [sp, #68]	@ 0x44
 800bb2c:	4b0f      	ldr	r3, [pc, #60]	@ (800bb6c <micro_ros_utilities_create_message_memory+0x260>)
 800bb2e:	68d0      	ldr	r0, [r2, #12]
 800bb30:	6819      	ldr	r1, [r3, #0]
 800bb32:	f003 fc47 	bl	800f3c4 <get_message_typesupport_handle>
 800bb36:	6840      	ldr	r0, [r0, #4]
 800bb38:	f7ff fc2c 	bl	800b394 <get_longest_member_name>
 800bb3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7f4 fb5d 	bl	8000200 <strlen>
 800bb46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb48:	4404      	add	r4, r0
 800bb4a:	3401      	adds	r4, #1
 800bb4c:	689f      	ldr	r7, [r3, #8]
 800bb4e:	42a6      	cmp	r6, r4
 800bb50:	f109 0901 	add.w	r9, r9, #1
 800bb54:	bf38      	it	cc
 800bb56:	4626      	movcc	r6, r4
 800bb58:	454f      	cmp	r7, r9
 800bb5a:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800bb5e:	d9dd      	bls.n	800bb1c <micro_ros_utilities_create_message_memory+0x210>
 800bb60:	691c      	ldr	r4, [r3, #16]
 800bb62:	e7c7      	b.n	800baf4 <micro_ros_utilities_create_message_memory+0x1e8>
 800bb64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb66:	689d      	ldr	r5, [r3, #8]
 800bb68:	e798      	b.n	800ba9c <micro_ros_utilities_create_message_memory+0x190>
 800bb6a:	bf00      	nop
 800bb6c:	20000384 	.word	0x20000384

0800bb70 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bb70:	4b04      	ldr	r3, [pc, #16]	@ (800bb84 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	b10a      	cbz	r2, 800bb7a <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800bb76:	4803      	ldr	r0, [pc, #12]	@ (800bb84 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb78:	4770      	bx	lr
 800bb7a:	4a03      	ldr	r2, [pc, #12]	@ (800bb88 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800bb7c:	4801      	ldr	r0, [pc, #4]	@ (800bb84 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bb7e:	6812      	ldr	r2, [r2, #0]
 800bb80:	601a      	str	r2, [r3, #0]
 800bb82:	4770      	bx	lr
 800bb84:	200000dc 	.word	0x200000dc
 800bb88:	20000380 	.word	0x20000380

0800bb8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bb8c:	4a02      	ldr	r2, [pc, #8]	@ (800bb98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xc>)
 800bb8e:	4b03      	ldr	r3, [pc, #12]	@ (800bb9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x10>)
 800bb90:	6812      	ldr	r2, [r2, #0]
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20000380 	.word	0x20000380
 800bb9c:	200000dc 	.word	0x200000dc

0800bba0 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800bba0:	4b04      	ldr	r3, [pc, #16]	@ (800bbb4 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	b10a      	cbz	r2, 800bbaa <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa>
 800bba6:	4803      	ldr	r0, [pc, #12]	@ (800bbb4 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800bba8:	4770      	bx	lr
 800bbaa:	4a03      	ldr	r2, [pc, #12]	@ (800bbb8 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x18>)
 800bbac:	4801      	ldr	r0, [pc, #4]	@ (800bbb4 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800bbae:	6812      	ldr	r2, [r2, #0]
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	4770      	bx	lr
 800bbb4:	200000f0 	.word	0x200000f0
 800bbb8:	20000380 	.word	0x20000380

0800bbbc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800bbbc:	4b04      	ldr	r3, [pc, #16]	@ (800bbd0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bbbe:	4805      	ldr	r0, [pc, #20]	@ (800bbd4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800bbc0:	4905      	ldr	r1, [pc, #20]	@ (800bbd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x1c>)
 800bbc2:	4a06      	ldr	r2, [pc, #24]	@ (800bbdc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x20>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6003      	str	r3, [r0, #0]
 800bbc8:	600b      	str	r3, [r1, #0]
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	20000380 	.word	0x20000380
 800bbd4:	2000010c 	.word	0x2000010c
 800bbd8:	20000118 	.word	0x20000118
 800bbdc:	200000f0 	.word	0x200000f0

0800bbe0 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bbe0:	4b04      	ldr	r3, [pc, #16]	@ (800bbf4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	b10a      	cbz	r2, 800bbea <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800bbe6:	4803      	ldr	r0, [pc, #12]	@ (800bbf4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bbe8:	4770      	bx	lr
 800bbea:	4a03      	ldr	r2, [pc, #12]	@ (800bbf8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800bbec:	4801      	ldr	r0, [pc, #4]	@ (800bbf4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bbee:	6812      	ldr	r2, [r2, #0]
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	4770      	bx	lr
 800bbf4:	2000012c 	.word	0x2000012c
 800bbf8:	20000380 	.word	0x20000380

0800bbfc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bbfc:	4a02      	ldr	r2, [pc, #8]	@ (800bc08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800bbfe:	4b03      	ldr	r3, [pc, #12]	@ (800bc0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800bc00:	6812      	ldr	r2, [r2, #0]
 800bc02:	601a      	str	r2, [r3, #0]
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	20000380 	.word	0x20000380
 800bc0c:	2000012c 	.word	0x2000012c

0800bc10 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__size_function__CommandVelocity__cmd_vel>:
 800bc10:	2006      	movs	r0, #6
 800bc12:	4770      	bx	lr

0800bc14 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_const_function__CommandVelocity__cmd_vel>:
 800bc14:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop

0800bc1c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__fetch_function__CommandVelocity__cmd_vel>:
 800bc1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc20:	680b      	ldr	r3, [r1, #0]
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop

0800bc28 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__assign_function__CommandVelocity__cmd_vel>:
 800bc28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc2c:	6813      	ldr	r3, [r2, #0]
 800bc2e:	600b      	str	r3, [r1, #0]
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop

0800bc34 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_init_function>:
 800bc34:	f00a b978 	b.w	8015f28 <nereo_interfaces__msg__CommandVelocity__init>

0800bc38 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_fini_function>:
 800bc38:	f00a b97a 	b.w	8015f30 <nereo_interfaces__msg__CommandVelocity__fini>

0800bc3c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_function__CommandVelocity__cmd_vel>:
 800bc3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop

0800bc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bc44:	4b04      	ldr	r3, [pc, #16]	@ (800bc58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	b10a      	cbz	r2, 800bc4e <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800bc4a:	4803      	ldr	r0, [pc, #12]	@ (800bc58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bc4c:	4770      	bx	lr
 800bc4e:	4a03      	ldr	r2, [pc, #12]	@ (800bc5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800bc50:	4801      	ldr	r0, [pc, #4]	@ (800bc58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	4770      	bx	lr
 800bc58:	20000174 	.word	0x20000174
 800bc5c:	20000384 	.word	0x20000384

0800bc60 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_init_function>:
 800bc60:	f00a b968 	b.w	8015f34 <nereo_interfaces__srv__SetNavigationMode_Request__init>

0800bc64 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_fini_function>:
 800bc64:	f00a b96a 	b.w	8015f3c <nereo_interfaces__srv__SetNavigationMode_Request__fini>

0800bc68 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_init_function>:
 800bc68:	f00a b96a 	b.w	8015f40 <nereo_interfaces__srv__SetNavigationMode_Response__init>

0800bc6c <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_fini_function>:
 800bc6c:	f00a b96c 	b.w	8015f48 <nereo_interfaces__srv__SetNavigationMode_Response__fini>

0800bc70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800bc70:	4b04      	ldr	r3, [pc, #16]	@ (800bc84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	b10a      	cbz	r2, 800bc7a <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0xa>
 800bc76:	4803      	ldr	r0, [pc, #12]	@ (800bc84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bc78:	4770      	bx	lr
 800bc7a:	4a03      	ldr	r2, [pc, #12]	@ (800bc88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800bc7c:	4801      	ldr	r0, [pc, #4]	@ (800bc84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	4770      	bx	lr
 800bc84:	200001bc 	.word	0x200001bc
 800bc88:	20000384 	.word	0x20000384

0800bc8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800bc8c:	4b04      	ldr	r3, [pc, #16]	@ (800bca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	b10a      	cbz	r2, 800bc96 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0xa>
 800bc92:	4803      	ldr	r0, [pc, #12]	@ (800bca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bc94:	4770      	bx	lr
 800bc96:	4a03      	ldr	r2, [pc, #12]	@ (800bca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x18>)
 800bc98:	4801      	ldr	r0, [pc, #4]	@ (800bca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800bc9a:	6812      	ldr	r2, [r2, #0]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	4770      	bx	lr
 800bca0:	20000240 	.word	0x20000240
 800bca4:	20000384 	.word	0x20000384

0800bca8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800bca8:	4b13      	ldr	r3, [pc, #76]	@ (800bcf8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	b132      	cbz	r2, 800bcbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	689a      	ldr	r2, [r3, #8]
 800bcb2:	b152      	cbz	r2, 800bcca <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x22>
 800bcb4:	68da      	ldr	r2, [r3, #12]
 800bcb6:	b182      	cbz	r2, 800bcda <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x32>
 800bcb8:	480f      	ldr	r0, [pc, #60]	@ (800bcf8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800bcba:	4770      	bx	lr
 800bcbc:	4a0f      	ldr	r2, [pc, #60]	@ (800bcfc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800bcbe:	6812      	ldr	r2, [r2, #0]
 800bcc0:	601a      	str	r2, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	689a      	ldr	r2, [r3, #8]
 800bcc6:	2a00      	cmp	r2, #0
 800bcc8:	d1f4      	bne.n	800bcb4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xc>
 800bcca:	4a0d      	ldr	r2, [pc, #52]	@ (800bd00 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x58>)
 800bccc:	6811      	ldr	r1, [r2, #0]
 800bcce:	b179      	cbz	r1, 800bcf0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x48>
 800bcd0:	6852      	ldr	r2, [r2, #4]
 800bcd2:	609a      	str	r2, [r3, #8]
 800bcd4:	68da      	ldr	r2, [r3, #12]
 800bcd6:	2a00      	cmp	r2, #0
 800bcd8:	d1ee      	bne.n	800bcb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x10>
 800bcda:	4a0a      	ldr	r2, [pc, #40]	@ (800bd04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x5c>)
 800bcdc:	6811      	ldr	r1, [r2, #0]
 800bcde:	b119      	cbz	r1, 800bce8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x40>
 800bce0:	6852      	ldr	r2, [r2, #4]
 800bce2:	4805      	ldr	r0, [pc, #20]	@ (800bcf8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800bce4:	60da      	str	r2, [r3, #12]
 800bce6:	4770      	bx	lr
 800bce8:	4904      	ldr	r1, [pc, #16]	@ (800bcfc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800bcea:	6809      	ldr	r1, [r1, #0]
 800bcec:	6011      	str	r1, [r2, #0]
 800bcee:	e7f7      	b.n	800bce0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x38>
 800bcf0:	4902      	ldr	r1, [pc, #8]	@ (800bcfc <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800bcf2:	6809      	ldr	r1, [r1, #0]
 800bcf4:	6011      	str	r1, [r2, #0]
 800bcf6:	e7eb      	b.n	800bcd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x28>
 800bcf8:	2000025c 	.word	0x2000025c
 800bcfc:	20000384 	.word	0x20000384
 800bd00:	200001bc 	.word	0x200001bc
 800bd04:	20000240 	.word	0x20000240

0800bd08 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thruster_pwms>:
 800bd08:	2008      	movs	r0, #8
 800bd0a:	4770      	bx	lr

0800bd0c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thruster_pwms>:
 800bd0c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop

0800bd14 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thruster_pwms>:
 800bd14:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800bd18:	8013      	strh	r3, [r2, #0]
 800bd1a:	4770      	bx	lr

0800bd1c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thruster_pwms>:
 800bd1c:	8813      	ldrh	r3, [r2, #0]
 800bd1e:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bd22:	4770      	bx	lr

0800bd24 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800bd24:	f00a b912 	b.w	8015f4c <nereo_interfaces__msg__ThrusterStatuses__init>

0800bd28 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800bd28:	f00a b914 	b.w	8015f54 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800bd2c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thruster_pwms>:
 800bd2c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop

0800bd34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bd34:	4b04      	ldr	r3, [pc, #16]	@ (800bd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	b10a      	cbz	r2, 800bd3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800bd3a:	4803      	ldr	r0, [pc, #12]	@ (800bd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd3c:	4770      	bx	lr
 800bd3e:	4a03      	ldr	r2, [pc, #12]	@ (800bd4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800bd40:	4801      	ldr	r0, [pc, #4]	@ (800bd48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800bd42:	6812      	ldr	r2, [r2, #0]
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	4770      	bx	lr
 800bd48:	200002a4 	.word	0x200002a4
 800bd4c:	20000384 	.word	0x20000384

0800bd50 <_CommandVelocity__max_serialized_size>:
 800bd50:	b508      	push	{r3, lr}
 800bd52:	2104      	movs	r1, #4
 800bd54:	2000      	movs	r0, #0
 800bd56:	f007 f8ad 	bl	8012eb4 <ucdr_alignment>
 800bd5a:	3018      	adds	r0, #24
 800bd5c:	bd08      	pop	{r3, pc}
 800bd5e:	bf00      	nop

0800bd60 <get_serialized_size_nereo_interfaces__msg__CommandVelocity>:
 800bd60:	b138      	cbz	r0, 800bd72 <get_serialized_size_nereo_interfaces__msg__CommandVelocity+0x12>
 800bd62:	b508      	push	{r3, lr}
 800bd64:	460b      	mov	r3, r1
 800bd66:	4618      	mov	r0, r3
 800bd68:	2104      	movs	r1, #4
 800bd6a:	f007 f8a3 	bl	8012eb4 <ucdr_alignment>
 800bd6e:	3018      	adds	r0, #24
 800bd70:	bd08      	pop	{r3, pc}
 800bd72:	4770      	bx	lr

0800bd74 <_CommandVelocity__cdr_deserialize>:
 800bd74:	b111      	cbz	r1, 800bd7c <_CommandVelocity__cdr_deserialize+0x8>
 800bd76:	2206      	movs	r2, #6
 800bd78:	f004 beb2 	b.w	8010ae0 <ucdr_deserialize_array_float>
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	4770      	bx	lr

0800bd80 <_CommandVelocity__cdr_serialize>:
 800bd80:	468c      	mov	ip, r1
 800bd82:	4601      	mov	r1, r0
 800bd84:	b118      	cbz	r0, 800bd8e <_CommandVelocity__cdr_serialize+0xe>
 800bd86:	2206      	movs	r2, #6
 800bd88:	4660      	mov	r0, ip
 800bd8a:	f004 be55 	b.w	8010a38 <ucdr_serialize_array_float>
 800bd8e:	4770      	bx	lr

0800bd90 <_CommandVelocity__get_serialized_size>:
 800bd90:	b130      	cbz	r0, 800bda0 <_CommandVelocity__get_serialized_size+0x10>
 800bd92:	b508      	push	{r3, lr}
 800bd94:	2104      	movs	r1, #4
 800bd96:	2000      	movs	r0, #0
 800bd98:	f007 f88c 	bl	8012eb4 <ucdr_alignment>
 800bd9c:	3018      	adds	r0, #24
 800bd9e:	bd08      	pop	{r3, pc}
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop

0800bda4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800bda4:	4800      	ldr	r0, [pc, #0]	@ (800bda8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x4>)
 800bda6:	4770      	bx	lr
 800bda8:	200002b0 	.word	0x200002b0

0800bdac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800bdac:	4800      	ldr	r0, [pc, #0]	@ (800bdb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x4>)
 800bdae:	4770      	bx	lr
 800bdb0:	200002f4 	.word	0x200002f4

0800bdb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800bdb4:	4800      	ldr	r0, [pc, #0]	@ (800bdb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x4>)
 800bdb6:	4770      	bx	lr
 800bdb8:	20000300 	.word	0x20000300

0800bdbc <_SetNavigationMode_Request__max_serialized_size>:
 800bdbc:	b508      	push	{r3, lr}
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	f007 f877 	bl	8012eb4 <ucdr_alignment>
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	bd08      	pop	{r3, pc}
 800bdca:	bf00      	nop

0800bdcc <_SetNavigationMode_Request__cdr_deserialize>:
 800bdcc:	b109      	cbz	r1, 800bdd2 <_SetNavigationMode_Request__cdr_deserialize+0x6>
 800bdce:	f005 b875 	b.w	8010ebc <ucdr_deserialize_uint8_t>
 800bdd2:	4608      	mov	r0, r1
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop

0800bdd8 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request>:
 800bdd8:	b138      	cbz	r0, 800bdea <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request+0x12>
 800bdda:	b508      	push	{r3, lr}
 800bddc:	460b      	mov	r3, r1
 800bdde:	4618      	mov	r0, r3
 800bde0:	2101      	movs	r1, #1
 800bde2:	f007 f867 	bl	8012eb4 <ucdr_alignment>
 800bde6:	3001      	adds	r0, #1
 800bde8:	bd08      	pop	{r3, pc}
 800bdea:	4770      	bx	lr

0800bdec <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response>:
 800bdec:	b180      	cbz	r0, 800be10 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response+0x24>
 800bdee:	b538      	push	{r3, r4, r5, lr}
 800bdf0:	460d      	mov	r5, r1
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	2101      	movs	r1, #1
 800bdf6:	f007 f85d 	bl	8012eb4 <ucdr_alignment>
 800bdfa:	1c6b      	adds	r3, r5, #1
 800bdfc:	181c      	adds	r4, r3, r0
 800bdfe:	2101      	movs	r1, #1
 800be00:	4620      	mov	r0, r4
 800be02:	f007 f857 	bl	8012eb4 <ucdr_alignment>
 800be06:	f1c5 0501 	rsb	r5, r5, #1
 800be0a:	4428      	add	r0, r5
 800be0c:	4420      	add	r0, r4
 800be0e:	bd38      	pop	{r3, r4, r5, pc}
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop

0800be14 <_SetNavigationMode_Request__cdr_serialize>:
 800be14:	460a      	mov	r2, r1
 800be16:	b118      	cbz	r0, 800be20 <_SetNavigationMode_Request__cdr_serialize+0xc>
 800be18:	7801      	ldrb	r1, [r0, #0]
 800be1a:	4610      	mov	r0, r2
 800be1c:	f005 b838 	b.w	8010e90 <ucdr_serialize_uint8_t>
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop

0800be24 <_SetNavigationMode_Response__cdr_deserialize>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	460c      	mov	r4, r1
 800be28:	b141      	cbz	r1, 800be3c <_SetNavigationMode_Response__cdr_deserialize+0x18>
 800be2a:	4605      	mov	r5, r0
 800be2c:	f005 f818 	bl	8010e60 <ucdr_deserialize_bool>
 800be30:	1c61      	adds	r1, r4, #1
 800be32:	4628      	mov	r0, r5
 800be34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be38:	f005 b840 	b.w	8010ebc <ucdr_deserialize_uint8_t>
 800be3c:	4608      	mov	r0, r1
 800be3e:	bd38      	pop	{r3, r4, r5, pc}

0800be40 <_SetNavigationMode_Response__cdr_serialize>:
 800be40:	b160      	cbz	r0, 800be5c <_SetNavigationMode_Response__cdr_serialize+0x1c>
 800be42:	b538      	push	{r3, r4, r5, lr}
 800be44:	460d      	mov	r5, r1
 800be46:	4604      	mov	r4, r0
 800be48:	7801      	ldrb	r1, [r0, #0]
 800be4a:	4628      	mov	r0, r5
 800be4c:	f004 fff2 	bl	8010e34 <ucdr_serialize_bool>
 800be50:	7861      	ldrb	r1, [r4, #1]
 800be52:	4628      	mov	r0, r5
 800be54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be58:	f005 b81a 	b.w	8010e90 <ucdr_serialize_uint8_t>
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop

0800be60 <_SetNavigationMode_Request__get_serialized_size>:
 800be60:	b130      	cbz	r0, 800be70 <_SetNavigationMode_Request__get_serialized_size+0x10>
 800be62:	b508      	push	{r3, lr}
 800be64:	2101      	movs	r1, #1
 800be66:	2000      	movs	r0, #0
 800be68:	f007 f824 	bl	8012eb4 <ucdr_alignment>
 800be6c:	3001      	adds	r0, #1
 800be6e:	bd08      	pop	{r3, pc}
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop

0800be74 <_SetNavigationMode_Response__get_serialized_size>:
 800be74:	b160      	cbz	r0, 800be90 <_SetNavigationMode_Response__get_serialized_size+0x1c>
 800be76:	b510      	push	{r4, lr}
 800be78:	2101      	movs	r1, #1
 800be7a:	2000      	movs	r0, #0
 800be7c:	f007 f81a 	bl	8012eb4 <ucdr_alignment>
 800be80:	1c44      	adds	r4, r0, #1
 800be82:	2101      	movs	r1, #1
 800be84:	4620      	mov	r0, r4
 800be86:	f007 f815 	bl	8012eb4 <ucdr_alignment>
 800be8a:	3001      	adds	r0, #1
 800be8c:	4420      	add	r0, r4
 800be8e:	bd10      	pop	{r4, pc}
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop

0800be94 <_SetNavigationMode_Response__max_serialized_size>:
 800be94:	b510      	push	{r4, lr}
 800be96:	2101      	movs	r1, #1
 800be98:	2000      	movs	r0, #0
 800be9a:	f007 f80b 	bl	8012eb4 <ucdr_alignment>
 800be9e:	1c44      	adds	r4, r0, #1
 800bea0:	2101      	movs	r1, #1
 800bea2:	4620      	mov	r0, r4
 800bea4:	f007 f806 	bl	8012eb4 <ucdr_alignment>
 800bea8:	3001      	adds	r0, #1
 800beaa:	4420      	add	r0, r4
 800beac:	bd10      	pop	{r4, pc}
 800beae:	bf00      	nop

0800beb0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800beb0:	4800      	ldr	r0, [pc, #0]	@ (800beb4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x4>)
 800beb2:	4770      	bx	lr
 800beb4:	200002e8 	.word	0x200002e8

0800beb8 <_ThrusterStatuses__max_serialized_size>:
 800beb8:	b508      	push	{r3, lr}
 800beba:	2102      	movs	r1, #2
 800bebc:	2000      	movs	r0, #0
 800bebe:	f006 fff9 	bl	8012eb4 <ucdr_alignment>
 800bec2:	3010      	adds	r0, #16
 800bec4:	bd08      	pop	{r3, pc}
 800bec6:	bf00      	nop

0800bec8 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800bec8:	b138      	cbz	r0, 800beda <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0x12>
 800beca:	b508      	push	{r3, lr}
 800becc:	460b      	mov	r3, r1
 800bece:	4618      	mov	r0, r3
 800bed0:	2102      	movs	r1, #2
 800bed2:	f006 ffef 	bl	8012eb4 <ucdr_alignment>
 800bed6:	3010      	adds	r0, #16
 800bed8:	bd08      	pop	{r3, pc}
 800beda:	4770      	bx	lr

0800bedc <_ThrusterStatuses__cdr_deserialize>:
 800bedc:	b111      	cbz	r1, 800bee4 <_ThrusterStatuses__cdr_deserialize+0x8>
 800bede:	2208      	movs	r2, #8
 800bee0:	f004 bca8 	b.w	8010834 <ucdr_deserialize_array_uint16_t>
 800bee4:	4608      	mov	r0, r1
 800bee6:	4770      	bx	lr

0800bee8 <_ThrusterStatuses__cdr_serialize>:
 800bee8:	468c      	mov	ip, r1
 800beea:	4601      	mov	r1, r0
 800beec:	b118      	cbz	r0, 800bef6 <_ThrusterStatuses__cdr_serialize+0xe>
 800beee:	2208      	movs	r2, #8
 800bef0:	4660      	mov	r0, ip
 800bef2:	f004 bc49 	b.w	8010788 <ucdr_serialize_array_uint16_t>
 800bef6:	4770      	bx	lr

0800bef8 <_ThrusterStatuses__get_serialized_size>:
 800bef8:	b130      	cbz	r0, 800bf08 <_ThrusterStatuses__get_serialized_size+0x10>
 800befa:	b508      	push	{r3, lr}
 800befc:	2102      	movs	r1, #2
 800befe:	2000      	movs	r0, #0
 800bf00:	f006 ffd8 	bl	8012eb4 <ucdr_alignment>
 800bf04:	3010      	adds	r0, #16
 800bf06:	bd08      	pop	{r3, pc}
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop

0800bf0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800bf0c:	4800      	ldr	r0, [pc, #0]	@ (800bf10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800bf0e:	4770      	bx	lr
 800bf10:	20000344 	.word	0x20000344

0800bf14 <rcl_get_zero_initialized_publisher>:
 800bf14:	4b01      	ldr	r3, [pc, #4]	@ (800bf1c <rcl_get_zero_initialized_publisher+0x8>)
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	08023058 	.word	0x08023058

0800bf20 <rcl_publisher_init>:
 800bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf24:	b088      	sub	sp, #32
 800bf26:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	d069      	beq.n	800c000 <rcl_publisher_init+0xe0>
 800bf2c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800bf30:	4604      	mov	r4, r0
 800bf32:	4648      	mov	r0, r9
 800bf34:	460e      	mov	r6, r1
 800bf36:	4690      	mov	r8, r2
 800bf38:	461f      	mov	r7, r3
 800bf3a:	f002 fbf5 	bl	800e728 <rcutils_allocator_is_valid>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d05e      	beq.n	800c000 <rcl_publisher_init+0xe0>
 800bf42:	2c00      	cmp	r4, #0
 800bf44:	d05c      	beq.n	800c000 <rcl_publisher_init+0xe0>
 800bf46:	f8d4 a000 	ldr.w	sl, [r4]
 800bf4a:	f1ba 0f00 	cmp.w	sl, #0
 800bf4e:	d004      	beq.n	800bf5a <rcl_publisher_init+0x3a>
 800bf50:	2764      	movs	r7, #100	@ 0x64
 800bf52:	4638      	mov	r0, r7
 800bf54:	b008      	add	sp, #32
 800bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f00a fc82 	bl	8016864 <rcl_node_is_valid>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d052      	beq.n	800c00a <rcl_publisher_init+0xea>
 800bf64:	f1b8 0f00 	cmp.w	r8, #0
 800bf68:	d04a      	beq.n	800c000 <rcl_publisher_init+0xe0>
 800bf6a:	2f00      	cmp	r7, #0
 800bf6c:	d048      	beq.n	800c000 <rcl_publisher_init+0xe0>
 800bf6e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bf72:	aa07      	add	r2, sp, #28
 800bf74:	9205      	str	r2, [sp, #20]
 800bf76:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bf7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf7e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bf82:	f8cd a01c 	str.w	sl, [sp, #28]
 800bf86:	4639      	mov	r1, r7
 800bf88:	e899 000c 	ldmia.w	r9, {r2, r3}
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f00a fcbd 	bl	801690c <rcl_node_resolve_name>
 800bf92:	4607      	mov	r7, r0
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d14f      	bne.n	800c038 <rcl_publisher_init+0x118>
 800bf98:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800bf9a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bf9c:	20c8      	movs	r0, #200	@ 0xc8
 800bf9e:	4798      	blx	r3
 800bfa0:	6020      	str	r0, [r4, #0]
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d04e      	beq.n	800c044 <rcl_publisher_init+0x124>
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f00a fc7e 	bl	80168a8 <rcl_node_get_rmw_handle>
 800bfac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	9a07      	ldr	r2, [sp, #28]
 800bfb4:	6827      	ldr	r7, [r4, #0]
 800bfb6:	462b      	mov	r3, r5
 800bfb8:	4641      	mov	r1, r8
 800bfba:	f002 fcc3 	bl	800e944 <rmw_create_publisher>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800bfc4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bfc8:	b370      	cbz	r0, 800c028 <rcl_publisher_init+0x108>
 800bfca:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800bfce:	f002 fd97 	bl	800eb00 <rmw_publisher_get_actual_qos>
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	4607      	mov	r7, r0
 800bfd6:	b9d0      	cbnz	r0, 800c00e <rcl_publisher_init+0xee>
 800bfd8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800bfdc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	2270      	movs	r2, #112	@ 0x70
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f015 fd24 	bl	8021a32 <memcpy>
 800bfea:	6832      	ldr	r2, [r6, #0]
 800bfec:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800bff0:	9807      	ldr	r0, [sp, #28]
 800bff2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bff4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bff6:	4798      	blx	r3
 800bff8:	4638      	mov	r0, r7
 800bffa:	b008      	add	sp, #32
 800bffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c000:	270b      	movs	r7, #11
 800c002:	4638      	mov	r0, r7
 800c004:	b008      	add	sp, #32
 800c006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00a:	27c8      	movs	r7, #200	@ 0xc8
 800c00c:	e7a1      	b.n	800bf52 <rcl_publisher_init+0x32>
 800c00e:	b18b      	cbz	r3, 800c034 <rcl_publisher_init+0x114>
 800c010:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c014:	b142      	cbz	r2, 800c028 <rcl_publisher_init+0x108>
 800c016:	4630      	mov	r0, r6
 800c018:	f00a fc46 	bl	80168a8 <rcl_node_get_rmw_handle>
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c022:	f002 fd7d 	bl	800eb20 <rmw_destroy_publisher>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c02a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c02c:	4618      	mov	r0, r3
 800c02e:	4790      	blx	r2
 800c030:	2300      	movs	r3, #0
 800c032:	6023      	str	r3, [r4, #0]
 800c034:	2701      	movs	r7, #1
 800c036:	e7db      	b.n	800bff0 <rcl_publisher_init+0xd0>
 800c038:	2867      	cmp	r0, #103	@ 0x67
 800c03a:	d0d9      	beq.n	800bff0 <rcl_publisher_init+0xd0>
 800c03c:	2869      	cmp	r0, #105	@ 0x69
 800c03e:	d003      	beq.n	800c048 <rcl_publisher_init+0x128>
 800c040:	280a      	cmp	r0, #10
 800c042:	d1f7      	bne.n	800c034 <rcl_publisher_init+0x114>
 800c044:	270a      	movs	r7, #10
 800c046:	e7d3      	b.n	800bff0 <rcl_publisher_init+0xd0>
 800c048:	2767      	movs	r7, #103	@ 0x67
 800c04a:	e7d1      	b.n	800bff0 <rcl_publisher_init+0xd0>

0800c04c <rcl_publisher_get_default_options>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	4d14      	ldr	r5, [pc, #80]	@ (800c0a0 <rcl_publisher_get_default_options+0x54>)
 800c050:	4914      	ldr	r1, [pc, #80]	@ (800c0a4 <rcl_publisher_get_default_options+0x58>)
 800c052:	b088      	sub	sp, #32
 800c054:	4604      	mov	r4, r0
 800c056:	2250      	movs	r2, #80	@ 0x50
 800c058:	4628      	mov	r0, r5
 800c05a:	f015 fcea 	bl	8021a32 <memcpy>
 800c05e:	a802      	add	r0, sp, #8
 800c060:	f002 fb54 	bl	800e70c <rcutils_get_default_allocator>
 800c064:	f10d 0c08 	add.w	ip, sp, #8
 800c068:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c06c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c070:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c074:	466e      	mov	r6, sp
 800c076:	f8dc 3000 	ldr.w	r3, [ip]
 800c07a:	f8ce 3000 	str.w	r3, [lr]
 800c07e:	4630      	mov	r0, r6
 800c080:	f002 fbe2 	bl	800e848 <rmw_get_default_publisher_options>
 800c084:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c088:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c08c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c090:	2270      	movs	r2, #112	@ 0x70
 800c092:	4629      	mov	r1, r5
 800c094:	4620      	mov	r0, r4
 800c096:	f015 fccc 	bl	8021a32 <memcpy>
 800c09a:	4620      	mov	r0, r4
 800c09c:	b008      	add	sp, #32
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
 800c0a0:	20011e50 	.word	0x20011e50
 800c0a4:	08023060 	.word	0x08023060

0800c0a8 <rcl_publish>:
 800c0a8:	b1f8      	cbz	r0, 800c0ea <rcl_publish+0x42>
 800c0aa:	6803      	ldr	r3, [r0, #0]
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	b1b3      	cbz	r3, 800c0e0 <rcl_publish+0x38>
 800c0b2:	4616      	mov	r6, r2
 800c0b4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c0b8:	b192      	cbz	r2, 800c0e0 <rcl_publish+0x38>
 800c0ba:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c0be:	460d      	mov	r5, r1
 800c0c0:	f009 fff6 	bl	80160b0 <rcl_context_is_valid>
 800c0c4:	b160      	cbz	r0, 800c0e0 <rcl_publish+0x38>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c0cc:	b140      	cbz	r0, 800c0e0 <rcl_publish+0x38>
 800c0ce:	b155      	cbz	r5, 800c0e6 <rcl_publish+0x3e>
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f002 fbd6 	bl	800e884 <rmw_publish>
 800c0d8:	3800      	subs	r0, #0
 800c0da:	bf18      	it	ne
 800c0dc:	2001      	movne	r0, #1
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	200b      	movs	r0, #11
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c0ee:	4770      	bx	lr

0800c0f0 <rcl_publisher_is_valid>:
 800c0f0:	b1a0      	cbz	r0, 800c11c <rcl_publisher_is_valid+0x2c>
 800c0f2:	6803      	ldr	r3, [r0, #0]
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	b173      	cbz	r3, 800c118 <rcl_publisher_is_valid+0x28>
 800c0fa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c0fe:	b15a      	cbz	r2, 800c118 <rcl_publisher_is_valid+0x28>
 800c100:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c104:	f009 ffd4 	bl	80160b0 <rcl_context_is_valid>
 800c108:	b130      	cbz	r0, 800c118 <rcl_publisher_is_valid+0x28>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c110:	3800      	subs	r0, #0
 800c112:	bf18      	it	ne
 800c114:	2001      	movne	r0, #1
 800c116:	bd10      	pop	{r4, pc}
 800c118:	2000      	movs	r0, #0
 800c11a:	bd10      	pop	{r4, pc}
 800c11c:	2000      	movs	r0, #0
 800c11e:	4770      	bx	lr

0800c120 <rcl_publisher_is_valid_except_context>:
 800c120:	b130      	cbz	r0, 800c130 <rcl_publisher_is_valid_except_context+0x10>
 800c122:	6800      	ldr	r0, [r0, #0]
 800c124:	b120      	cbz	r0, 800c130 <rcl_publisher_is_valid_except_context+0x10>
 800c126:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c12a:	3800      	subs	r0, #0
 800c12c:	bf18      	it	ne
 800c12e:	2001      	movne	r0, #1
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop

0800c134 <_rclc_check_for_new_data>:
 800c134:	2800      	cmp	r0, #0
 800c136:	d046      	beq.n	800c1c6 <_rclc_check_for_new_data+0x92>
 800c138:	b510      	push	{r4, lr}
 800c13a:	7802      	ldrb	r2, [r0, #0]
 800c13c:	b084      	sub	sp, #16
 800c13e:	4603      	mov	r3, r0
 800c140:	2a0a      	cmp	r2, #10
 800c142:	d842      	bhi.n	800c1ca <_rclc_check_for_new_data+0x96>
 800c144:	e8df f002 	tbb	[pc, r2]
 800c148:	14181212 	.word	0x14181212
 800c14c:	06060614 	.word	0x06060614
 800c150:	2e1a      	.short	0x2e1a
 800c152:	16          	.byte	0x16
 800c153:	00          	.byte	0x00
 800c154:	6a0a      	ldr	r2, [r1, #32]
 800c156:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c158:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c15c:	2000      	movs	r0, #0
 800c15e:	1a12      	subs	r2, r2, r0
 800c160:	bf18      	it	ne
 800c162:	2201      	movne	r2, #1
 800c164:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c168:	b004      	add	sp, #16
 800c16a:	bd10      	pop	{r4, pc}
 800c16c:	680a      	ldr	r2, [r1, #0]
 800c16e:	e7f2      	b.n	800c156 <_rclc_check_for_new_data+0x22>
 800c170:	698a      	ldr	r2, [r1, #24]
 800c172:	e7f0      	b.n	800c156 <_rclc_check_for_new_data+0x22>
 800c174:	688a      	ldr	r2, [r1, #8]
 800c176:	e7ee      	b.n	800c156 <_rclc_check_for_new_data+0x22>
 800c178:	690a      	ldr	r2, [r1, #16]
 800c17a:	e7ec      	b.n	800c156 <_rclc_check_for_new_data+0x22>
 800c17c:	685c      	ldr	r4, [r3, #4]
 800c17e:	4608      	mov	r0, r1
 800c180:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c184:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c188:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c18c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c190:	9300      	str	r3, [sp, #0]
 800c192:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c196:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c19a:	f104 0110 	add.w	r1, r4, #16
 800c19e:	f00c f933 	bl	8018408 <rcl_action_client_wait_set_get_entities_ready>
 800c1a2:	e7e1      	b.n	800c168 <_rclc_check_for_new_data+0x34>
 800c1a4:	685c      	ldr	r4, [r3, #4]
 800c1a6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c1aa:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c1ae:	e9cd 3200 	strd	r3, r2, [sp]
 800c1b2:	4608      	mov	r0, r1
 800c1b4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c1b8:	f104 0220 	add.w	r2, r4, #32
 800c1bc:	f104 0110 	add.w	r1, r4, #16
 800c1c0:	f00c fb3a 	bl	8018838 <rcl_action_server_wait_set_get_entities_ready>
 800c1c4:	e7d0      	b.n	800c168 <_rclc_check_for_new_data+0x34>
 800c1c6:	200b      	movs	r0, #11
 800c1c8:	4770      	bx	lr
 800c1ca:	2001      	movs	r0, #1
 800c1cc:	e7cc      	b.n	800c168 <_rclc_check_for_new_data+0x34>
 800c1ce:	bf00      	nop

0800c1d0 <_rclc_take_new_data>:
 800c1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1d2:	b09b      	sub	sp, #108	@ 0x6c
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	f000 8088 	beq.w	800c2ea <_rclc_take_new_data+0x11a>
 800c1da:	7803      	ldrb	r3, [r0, #0]
 800c1dc:	4604      	mov	r4, r0
 800c1de:	2b0a      	cmp	r3, #10
 800c1e0:	f200 8167 	bhi.w	800c4b2 <_rclc_take_new_data+0x2e2>
 800c1e4:	e8df f003 	tbb	[pc, r3]
 800c1e8:	44152d2d 	.word	0x44152d2d
 800c1ec:	19191944 	.word	0x19191944
 800c1f0:	065a      	.short	0x065a
 800c1f2:	15          	.byte	0x15
 800c1f3:	00          	.byte	0x00
 800c1f4:	6840      	ldr	r0, [r0, #4]
 800c1f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f040 80b2 	bne.w	800c364 <_rclc_take_new_data+0x194>
 800c200:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c204:	2b00      	cmp	r3, #0
 800c206:	f040 80e4 	bne.w	800c3d2 <_rclc_take_new_data+0x202>
 800c20a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d16f      	bne.n	800c2f2 <_rclc_take_new_data+0x122>
 800c212:	2500      	movs	r5, #0
 800c214:	4628      	mov	r0, r5
 800c216:	b01b      	add	sp, #108	@ 0x6c
 800c218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c21a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c21c:	6a0b      	ldr	r3, [r1, #32]
 800c21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0f5      	beq.n	800c212 <_rclc_take_new_data+0x42>
 800c226:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c22a:	f104 0110 	add.w	r1, r4, #16
 800c22e:	f00a fdc9 	bl	8016dc4 <rcl_take_request>
 800c232:	4605      	mov	r5, r0
 800c234:	2800      	cmp	r0, #0
 800c236:	d0ec      	beq.n	800c212 <_rclc_take_new_data+0x42>
 800c238:	f240 2359 	movw	r3, #601	@ 0x259
 800c23c:	4298      	cmp	r0, r3
 800c23e:	d013      	beq.n	800c268 <_rclc_take_new_data+0x98>
 800c240:	e029      	b.n	800c296 <_rclc_take_new_data+0xc6>
 800c242:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c244:	680b      	ldr	r3, [r1, #0]
 800c246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0e1      	beq.n	800c212 <_rclc_take_new_data+0x42>
 800c24e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c252:	2300      	movs	r3, #0
 800c254:	aa0a      	add	r2, sp, #40	@ 0x28
 800c256:	f00a fef3 	bl	8017040 <rcl_take>
 800c25a:	4605      	mov	r5, r0
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d0d9      	beq.n	800c214 <_rclc_take_new_data+0x44>
 800c260:	f240 1391 	movw	r3, #401	@ 0x191
 800c264:	4298      	cmp	r0, r3
 800c266:	d116      	bne.n	800c296 <_rclc_take_new_data+0xc6>
 800c268:	2300      	movs	r3, #0
 800c26a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c26e:	e7d1      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c270:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c272:	698b      	ldr	r3, [r1, #24]
 800c274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0ca      	beq.n	800c212 <_rclc_take_new_data+0x42>
 800c27c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c280:	f104 0110 	add.w	r1, r4, #16
 800c284:	f009 fea4 	bl	8015fd0 <rcl_take_response>
 800c288:	4605      	mov	r5, r0
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d0c1      	beq.n	800c212 <_rclc_take_new_data+0x42>
 800c28e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c292:	4298      	cmp	r0, r3
 800c294:	d0be      	beq.n	800c214 <_rclc_take_new_data+0x44>
 800c296:	f002 fa6b 	bl	800e770 <rcutils_reset_error>
 800c29a:	e7bb      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c29c:	6840      	ldr	r0, [r0, #4]
 800c29e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d17d      	bne.n	800c3a2 <_rclc_take_new_data+0x1d2>
 800c2a6:	69c3      	ldr	r3, [r0, #28]
 800c2a8:	b11b      	cbz	r3, 800c2b2 <_rclc_take_new_data+0xe2>
 800c2aa:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d144      	bne.n	800c33c <_rclc_take_new_data+0x16c>
 800c2b2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f040 80ac 	bne.w	800c414 <_rclc_take_new_data+0x244>
 800c2bc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d0a6      	beq.n	800c212 <_rclc_take_new_data+0x42>
 800c2c4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c2c6:	a90a      	add	r1, sp, #40	@ 0x28
 800c2c8:	3010      	adds	r0, #16
 800c2ca:	f00b ff75 	bl	80181b8 <rcl_action_take_result_response>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d1e0      	bne.n	800c296 <_rclc_take_new_data+0xc6>
 800c2d4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2d8:	6860      	ldr	r0, [r4, #4]
 800c2da:	f00f fef5 	bl	801c0c8 <rclc_action_find_handle_by_result_request_sequence_number>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d098      	beq.n	800c214 <_rclc_take_new_data+0x44>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c2e8:	e794      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c2ea:	250b      	movs	r5, #11
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	b01b      	add	sp, #108	@ 0x6c
 800c2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2f2:	ae04      	add	r6, sp, #16
 800c2f4:	aa0a      	add	r2, sp, #40	@ 0x28
 800c2f6:	3010      	adds	r0, #16
 800c2f8:	4631      	mov	r1, r6
 800c2fa:	f00c f9d1 	bl	80186a0 <rcl_action_take_cancel_request>
 800c2fe:	4605      	mov	r5, r0
 800c300:	2800      	cmp	r0, #0
 800c302:	d1c8      	bne.n	800c296 <_rclc_take_new_data+0xc6>
 800c304:	6860      	ldr	r0, [r4, #4]
 800c306:	a90a      	add	r1, sp, #40	@ 0x28
 800c308:	f00f fe9c 	bl	801c044 <rclc_action_find_goal_handle_by_uuid>
 800c30c:	4607      	mov	r7, r0
 800c30e:	2800      	cmp	r0, #0
 800c310:	f000 80bb 	beq.w	800c48a <_rclc_take_new_data+0x2ba>
 800c314:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c318:	2101      	movs	r1, #1
 800c31a:	f00c faf9 	bl	8018910 <rcl_action_transition_goal_state>
 800c31e:	2803      	cmp	r0, #3
 800c320:	4684      	mov	ip, r0
 800c322:	f040 80a7 	bne.w	800c474 <_rclc_take_new_data+0x2a4>
 800c326:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c328:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c32c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c32e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c332:	e884 0003 	stmia.w	r4, {r0, r1}
 800c336:	f887 c008 	strb.w	ip, [r7, #8]
 800c33a:	e76b      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c33c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c33e:	3010      	adds	r0, #16
 800c340:	f00b ffba 	bl	80182b8 <rcl_action_take_feedback>
 800c344:	4605      	mov	r5, r0
 800c346:	2800      	cmp	r0, #0
 800c348:	d1a5      	bne.n	800c296 <_rclc_take_new_data+0xc6>
 800c34a:	6860      	ldr	r0, [r4, #4]
 800c34c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c34e:	f00f fe79 	bl	801c044 <rclc_action_find_goal_handle_by_uuid>
 800c352:	4603      	mov	r3, r0
 800c354:	2800      	cmp	r0, #0
 800c356:	f000 80a3 	beq.w	800c4a0 <_rclc_take_new_data+0x2d0>
 800c35a:	2201      	movs	r2, #1
 800c35c:	6860      	ldr	r0, [r4, #4]
 800c35e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c362:	e7a6      	b.n	800c2b2 <_rclc_take_new_data+0xe2>
 800c364:	f00f fe48 	bl	801bff8 <rclc_action_take_goal_handle>
 800c368:	4606      	mov	r6, r0
 800c36a:	6860      	ldr	r0, [r4, #4]
 800c36c:	2e00      	cmp	r6, #0
 800c36e:	f43f af47 	beq.w	800c200 <_rclc_take_new_data+0x30>
 800c372:	6070      	str	r0, [r6, #4]
 800c374:	69f2      	ldr	r2, [r6, #28]
 800c376:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c37a:	3010      	adds	r0, #16
 800c37c:	f00c f8d8 	bl	8018530 <rcl_action_take_goal_request>
 800c380:	4605      	mov	r5, r0
 800c382:	2800      	cmp	r0, #0
 800c384:	f040 808e 	bne.w	800c4a4 <_rclc_take_new_data+0x2d4>
 800c388:	69f7      	ldr	r7, [r6, #28]
 800c38a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c38c:	7235      	strb	r5, [r6, #8]
 800c38e:	f8c6 0009 	str.w	r0, [r6, #9]
 800c392:	f8c6 100d 	str.w	r1, [r6, #13]
 800c396:	6860      	ldr	r0, [r4, #4]
 800c398:	f8c6 2011 	str.w	r2, [r6, #17]
 800c39c:	f8c6 3015 	str.w	r3, [r6, #21]
 800c3a0:	e72e      	b.n	800c200 <_rclc_take_new_data+0x30>
 800c3a2:	aa04      	add	r2, sp, #16
 800c3a4:	a90a      	add	r1, sp, #40	@ 0x28
 800c3a6:	3010      	adds	r0, #16
 800c3a8:	f00b fe8e 	bl	80180c8 <rcl_action_take_goal_response>
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	f47f af71 	bne.w	800c296 <_rclc_take_new_data+0xc6>
 800c3b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3b8:	6860      	ldr	r0, [r4, #4]
 800c3ba:	f00f fe73 	bl	801c0a4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c3be:	b130      	cbz	r0, 800c3ce <_rclc_take_new_data+0x1fe>
 800c3c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c3c4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f880 2020 	strb.w	r2, [r0, #32]
 800c3ce:	6860      	ldr	r0, [r4, #4]
 800c3d0:	e769      	b.n	800c2a6 <_rclc_take_new_data+0xd6>
 800c3d2:	aa04      	add	r2, sp, #16
 800c3d4:	3010      	adds	r0, #16
 800c3d6:	a90a      	add	r1, sp, #40	@ 0x28
 800c3d8:	f00c f922 	bl	8018620 <rcl_action_take_result_request>
 800c3dc:	4605      	mov	r5, r0
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f47f af59 	bne.w	800c296 <_rclc_take_new_data+0xc6>
 800c3e4:	6860      	ldr	r0, [r4, #4]
 800c3e6:	a904      	add	r1, sp, #16
 800c3e8:	f00f fe2c 	bl	801c044 <rclc_action_find_goal_handle_by_uuid>
 800c3ec:	4607      	mov	r7, r0
 800c3ee:	b160      	cbz	r0, 800c40a <_rclc_take_new_data+0x23a>
 800c3f0:	ad0a      	add	r5, sp, #40	@ 0x28
 800c3f2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c3f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c3fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c3fe:	f04f 0c02 	mov.w	ip, #2
 800c402:	e886 0003 	stmia.w	r6, {r0, r1}
 800c406:	f887 c008 	strb.w	ip, [r7, #8]
 800c40a:	6860      	ldr	r0, [r4, #4]
 800c40c:	2300      	movs	r3, #0
 800c40e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c412:	e6fa      	b.n	800c20a <_rclc_take_new_data+0x3a>
 800c414:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c418:	a90a      	add	r1, sp, #40	@ 0x28
 800c41a:	3010      	adds	r0, #16
 800c41c:	f00b ff0c 	bl	8018238 <rcl_action_take_cancel_response>
 800c420:	4605      	mov	r5, r0
 800c422:	2800      	cmp	r0, #0
 800c424:	f47f af37 	bne.w	800c296 <_rclc_take_new_data+0xc6>
 800c428:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c42c:	6860      	ldr	r0, [r4, #4]
 800c42e:	f00f fe5d 	bl	801c0ec <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c432:	4606      	mov	r6, r0
 800c434:	6860      	ldr	r0, [r4, #4]
 800c436:	2e00      	cmp	r6, #0
 800c438:	f43f af40 	beq.w	800c2bc <_rclc_take_new_data+0xec>
 800c43c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c43e:	2701      	movs	r7, #1
 800c440:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c442:	2b00      	cmp	r3, #0
 800c444:	f43f af3a 	beq.w	800c2bc <_rclc_take_new_data+0xec>
 800c448:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c44a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c44e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c452:	f00f fdf7 	bl	801c044 <rclc_action_find_goal_handle_by_uuid>
 800c456:	b138      	cbz	r0, 800c468 <_rclc_take_new_data+0x298>
 800c458:	6860      	ldr	r0, [r4, #4]
 800c45a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c45c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c460:	3501      	adds	r5, #1
 800c462:	42ab      	cmp	r3, r5
 800c464:	d8f0      	bhi.n	800c448 <_rclc_take_new_data+0x278>
 800c466:	e729      	b.n	800c2bc <_rclc_take_new_data+0xec>
 800c468:	6860      	ldr	r0, [r4, #4]
 800c46a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c46c:	3501      	adds	r5, #1
 800c46e:	42ab      	cmp	r3, r5
 800c470:	d8ea      	bhi.n	800c448 <_rclc_take_new_data+0x278>
 800c472:	e723      	b.n	800c2bc <_rclc_take_new_data+0xec>
 800c474:	ab06      	add	r3, sp, #24
 800c476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c478:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c47c:	2103      	movs	r1, #3
 800c47e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c482:	6860      	ldr	r0, [r4, #4]
 800c484:	f00f fea8 	bl	801c1d8 <rclc_action_server_goal_cancel_reject>
 800c488:	e6c4      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c48a:	ab06      	add	r3, sp, #24
 800c48c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c48e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c492:	2102      	movs	r1, #2
 800c494:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c498:	6860      	ldr	r0, [r4, #4]
 800c49a:	f00f fe9d 	bl	801c1d8 <rclc_action_server_goal_cancel_reject>
 800c49e:	e6b9      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c4a0:	6860      	ldr	r0, [r4, #4]
 800c4a2:	e706      	b.n	800c2b2 <_rclc_take_new_data+0xe2>
 800c4a4:	6860      	ldr	r0, [r4, #4]
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	f00f fdb6 	bl	801c018 <rclc_action_remove_used_goal_handle>
 800c4ac:	f002 f960 	bl	800e770 <rcutils_reset_error>
 800c4b0:	e6b0      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c4b2:	2501      	movs	r5, #1
 800c4b4:	e6ae      	b.n	800c214 <_rclc_take_new_data+0x44>
 800c4b6:	bf00      	nop

0800c4b8 <_rclc_execute.part.0>:
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	7803      	ldrb	r3, [r0, #0]
 800c4bc:	b087      	sub	sp, #28
 800c4be:	4604      	mov	r4, r0
 800c4c0:	2b0a      	cmp	r3, #10
 800c4c2:	f200 8136 	bhi.w	800c732 <_rclc_execute.part.0+0x27a>
 800c4c6:	e8df f003 	tbb	[pc, r3]
 800c4ca:	435e      	.short	0x435e
 800c4cc:	06a1664f 	.word	0x06a1664f
 800c4d0:	6c1e0606 	.word	0x6c1e0606
 800c4d4:	59          	.byte	0x59
 800c4d5:	00          	.byte	0x00
 800c4d6:	2b06      	cmp	r3, #6
 800c4d8:	f000 8122 	beq.w	800c720 <_rclc_execute.part.0+0x268>
 800c4dc:	2b07      	cmp	r3, #7
 800c4de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c4e0:	f040 8118 	bne.w	800c714 <_rclc_execute.part.0+0x25c>
 800c4e4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c4e8:	6880      	ldr	r0, [r0, #8]
 800c4ea:	4798      	blx	r3
 800c4ec:	f104 0110 	add.w	r1, r4, #16
 800c4f0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c4f2:	6860      	ldr	r0, [r4, #4]
 800c4f4:	f00a fca6 	bl	8016e44 <rcl_send_response>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d033      	beq.n	800c564 <_rclc_execute.part.0+0xac>
 800c4fc:	9005      	str	r0, [sp, #20]
 800c4fe:	f002 f937 	bl	800e770 <rcutils_reset_error>
 800c502:	9805      	ldr	r0, [sp, #20]
 800c504:	e02e      	b.n	800c564 <_rclc_execute.part.0+0xac>
 800c506:	6840      	ldr	r0, [r0, #4]
 800c508:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 8086 	beq.w	800c61e <_rclc_execute.part.0+0x166>
 800c512:	2600      	movs	r6, #0
 800c514:	2701      	movs	r7, #1
 800c516:	e004      	b.n	800c522 <_rclc_execute.part.0+0x6a>
 800c518:	f00f fd48 	bl	801bfac <rclc_action_send_result_request>
 800c51c:	b998      	cbnz	r0, 800c546 <_rclc_execute.part.0+0x8e>
 800c51e:	722f      	strb	r7, [r5, #8]
 800c520:	6860      	ldr	r0, [r4, #4]
 800c522:	f00f fdf5 	bl	801c110 <rclc_action_find_first_handle_with_goal_response>
 800c526:	4605      	mov	r5, r0
 800c528:	2800      	cmp	r0, #0
 800c52a:	d077      	beq.n	800c61c <_rclc_execute.part.0+0x164>
 800c52c:	6863      	ldr	r3, [r4, #4]
 800c52e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c536:	f885 6020 	strb.w	r6, [r5, #32]
 800c53a:	4798      	blx	r3
 800c53c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c540:	4628      	mov	r0, r5
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1e8      	bne.n	800c518 <_rclc_execute.part.0+0x60>
 800c546:	6860      	ldr	r0, [r4, #4]
 800c548:	4629      	mov	r1, r5
 800c54a:	f00f fd65 	bl	801c018 <rclc_action_remove_used_goal_handle>
 800c54e:	e7e7      	b.n	800c520 <_rclc_execute.part.0+0x68>
 800c550:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c554:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c558:	2d00      	cmp	r5, #0
 800c55a:	f000 80c9 	beq.w	800c6f0 <_rclc_execute.part.0+0x238>
 800c55e:	6880      	ldr	r0, [r0, #8]
 800c560:	4798      	blx	r3
 800c562:	2000      	movs	r0, #0
 800c564:	b007      	add	sp, #28
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c568:	6840      	ldr	r0, [r0, #4]
 800c56a:	f00a fe6d 	bl	8017248 <rcl_timer_call>
 800c56e:	f240 3321 	movw	r3, #801	@ 0x321
 800c572:	4298      	cmp	r0, r3
 800c574:	d004      	beq.n	800c580 <_rclc_execute.part.0+0xc8>
 800c576:	2800      	cmp	r0, #0
 800c578:	d0f4      	beq.n	800c564 <_rclc_execute.part.0+0xac>
 800c57a:	e7bf      	b.n	800c4fc <_rclc_execute.part.0+0x44>
 800c57c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c57e:	4798      	blx	r3
 800c580:	2000      	movs	r0, #0
 800c582:	b007      	add	sp, #28
 800c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c586:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c58a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c58c:	b925      	cbnz	r5, 800c598 <_rclc_execute.part.0+0xe0>
 800c58e:	4628      	mov	r0, r5
 800c590:	4798      	blx	r3
 800c592:	4628      	mov	r0, r5
 800c594:	e7e6      	b.n	800c564 <_rclc_execute.part.0+0xac>
 800c596:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c598:	68a0      	ldr	r0, [r4, #8]
 800c59a:	4798      	blx	r3
 800c59c:	2000      	movs	r0, #0
 800c59e:	b007      	add	sp, #28
 800c5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a2:	6840      	ldr	r0, [r0, #4]
 800c5a4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c5a8:	bb3b      	cbnz	r3, 800c5fa <_rclc_execute.part.0+0x142>
 800c5aa:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d07b      	beq.n	800c6aa <_rclc_execute.part.0+0x1f2>
 800c5b2:	f640 0634 	movw	r6, #2100	@ 0x834
 800c5b6:	2701      	movs	r7, #1
 800c5b8:	e007      	b.n	800c5ca <_rclc_execute.part.0+0x112>
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f00f fdc0 	bl	801c140 <rclc_action_server_response_goal_request>
 800c5c0:	6860      	ldr	r0, [r4, #4]
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	f00f fd28 	bl	801c018 <rclc_action_remove_used_goal_handle>
 800c5c8:	6860      	ldr	r0, [r4, #4]
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	f00f fd52 	bl	801c074 <rclc_action_find_first_handle_by_status>
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d066      	beq.n	800c6a4 <_rclc_execute.part.0+0x1ec>
 800c5d6:	6863      	ldr	r3, [r4, #4]
 800c5d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c5da:	699b      	ldr	r3, [r3, #24]
 800c5dc:	4798      	blx	r3
 800c5de:	42b0      	cmp	r0, r6
 800c5e0:	f04f 0100 	mov.w	r1, #0
 800c5e4:	d1e9      	bne.n	800c5ba <_rclc_execute.part.0+0x102>
 800c5e6:	2101      	movs	r1, #1
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	f00f fda9 	bl	801c140 <rclc_action_server_response_goal_request>
 800c5ee:	722f      	strb	r7, [r5, #8]
 800c5f0:	e7ea      	b.n	800c5c8 <_rclc_execute.part.0+0x110>
 800c5f2:	6848      	ldr	r0, [r1, #4]
 800c5f4:	f00f fd10 	bl	801c018 <rclc_action_remove_used_goal_handle>
 800c5f8:	6860      	ldr	r0, [r4, #4]
 800c5fa:	f00f fd47 	bl	801c08c <rclc_action_find_first_terminated_handle>
 800c5fe:	4601      	mov	r1, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	d1f6      	bne.n	800c5f2 <_rclc_execute.part.0+0x13a>
 800c604:	6860      	ldr	r0, [r4, #4]
 800c606:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c60a:	e7ce      	b.n	800c5aa <_rclc_execute.part.0+0xf2>
 800c60c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c60e:	6880      	ldr	r0, [r0, #8]
 800c610:	f104 0110 	add.w	r1, r4, #16
 800c614:	4798      	blx	r3
 800c616:	2000      	movs	r0, #0
 800c618:	b007      	add	sp, #28
 800c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61c:	6860      	ldr	r0, [r4, #4]
 800c61e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c622:	b18b      	cbz	r3, 800c648 <_rclc_execute.part.0+0x190>
 800c624:	68c5      	ldr	r5, [r0, #12]
 800c626:	b32d      	cbz	r5, 800c674 <_rclc_execute.part.0+0x1bc>
 800c628:	2600      	movs	r6, #0
 800c62a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c62e:	b143      	cbz	r3, 800c642 <_rclc_execute.part.0+0x18a>
 800c630:	69c3      	ldr	r3, [r0, #28]
 800c632:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c636:	b123      	cbz	r3, 800c642 <_rclc_execute.part.0+0x18a>
 800c638:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c63a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c63c:	4628      	mov	r0, r5
 800c63e:	4798      	blx	r3
 800c640:	6860      	ldr	r0, [r4, #4]
 800c642:	682d      	ldr	r5, [r5, #0]
 800c644:	2d00      	cmp	r5, #0
 800c646:	d1f0      	bne.n	800c62a <_rclc_execute.part.0+0x172>
 800c648:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c64c:	b193      	cbz	r3, 800c674 <_rclc_execute.part.0+0x1bc>
 800c64e:	68c5      	ldr	r5, [r0, #12]
 800c650:	b185      	cbz	r5, 800c674 <_rclc_execute.part.0+0x1bc>
 800c652:	2600      	movs	r6, #0
 800c654:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c658:	b14b      	cbz	r3, 800c66e <_rclc_execute.part.0+0x1b6>
 800c65a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c65c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c660:	b12b      	cbz	r3, 800c66e <_rclc_execute.part.0+0x1b6>
 800c662:	4628      	mov	r0, r5
 800c664:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c668:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c66a:	4798      	blx	r3
 800c66c:	6860      	ldr	r0, [r4, #4]
 800c66e:	682d      	ldr	r5, [r5, #0]
 800c670:	2d00      	cmp	r5, #0
 800c672:	d1ef      	bne.n	800c654 <_rclc_execute.part.0+0x19c>
 800c674:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d081      	beq.n	800c580 <_rclc_execute.part.0+0xc8>
 800c67c:	2700      	movs	r7, #0
 800c67e:	e00b      	b.n	800c698 <_rclc_execute.part.0+0x1e0>
 800c680:	6863      	ldr	r3, [r4, #4]
 800c682:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c684:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c686:	6a1e      	ldr	r6, [r3, #32]
 800c688:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c68c:	47b0      	blx	r6
 800c68e:	6860      	ldr	r0, [r4, #4]
 800c690:	4629      	mov	r1, r5
 800c692:	f00f fcc1 	bl	801c018 <rclc_action_remove_used_goal_handle>
 800c696:	6860      	ldr	r0, [r4, #4]
 800c698:	f00f fd46 	bl	801c128 <rclc_action_find_first_handle_with_result_response>
 800c69c:	4605      	mov	r5, r0
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d1ee      	bne.n	800c680 <_rclc_execute.part.0+0x1c8>
 800c6a2:	e76d      	b.n	800c580 <_rclc_execute.part.0+0xc8>
 800c6a4:	6860      	ldr	r0, [r4, #4]
 800c6a6:	f880 5020 	strb.w	r5, [r0, #32]
 800c6aa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f43f af66 	beq.w	800c580 <_rclc_execute.part.0+0xc8>
 800c6b4:	68c5      	ldr	r5, [r0, #12]
 800c6b6:	b1b5      	cbz	r5, 800c6e6 <_rclc_execute.part.0+0x22e>
 800c6b8:	2602      	movs	r6, #2
 800c6ba:	e001      	b.n	800c6c0 <_rclc_execute.part.0+0x208>
 800c6bc:	682d      	ldr	r5, [r5, #0]
 800c6be:	b195      	cbz	r5, 800c6e6 <_rclc_execute.part.0+0x22e>
 800c6c0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c6c4:	2b03      	cmp	r3, #3
 800c6c6:	d1f9      	bne.n	800c6bc <_rclc_execute.part.0+0x204>
 800c6c8:	69c3      	ldr	r3, [r0, #28]
 800c6ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	4798      	blx	r3
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c6dc:	b163      	cbz	r3, 800c6f8 <_rclc_execute.part.0+0x240>
 800c6de:	f00f fd4f 	bl	801c180 <rclc_action_server_goal_cancel_accept>
 800c6e2:	6860      	ldr	r0, [r4, #4]
 800c6e4:	e7ea      	b.n	800c6bc <_rclc_execute.part.0+0x204>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	e739      	b.n	800c564 <_rclc_execute.part.0+0xac>
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	4798      	blx	r3
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	e735      	b.n	800c564 <_rclc_execute.part.0+0xac>
 800c6f8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c6fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c6fe:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c702:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c706:	6860      	ldr	r0, [r4, #4]
 800c708:	2101      	movs	r1, #1
 800c70a:	f00f fd65 	bl	801c1d8 <rclc_action_server_goal_cancel_reject>
 800c70e:	722e      	strb	r6, [r5, #8]
 800c710:	6860      	ldr	r0, [r4, #4]
 800c712:	e7d3      	b.n	800c6bc <_rclc_execute.part.0+0x204>
 800c714:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c716:	6880      	ldr	r0, [r0, #8]
 800c718:	4798      	blx	r3
 800c71a:	f104 0110 	add.w	r1, r4, #16
 800c71e:	e6e7      	b.n	800c4f0 <_rclc_execute.part.0+0x38>
 800c720:	f100 0110 	add.w	r1, r0, #16
 800c724:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c726:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c728:	6880      	ldr	r0, [r0, #8]
 800c72a:	9105      	str	r1, [sp, #20]
 800c72c:	4798      	blx	r3
 800c72e:	9905      	ldr	r1, [sp, #20]
 800c730:	e6de      	b.n	800c4f0 <_rclc_execute.part.0+0x38>
 800c732:	2001      	movs	r0, #1
 800c734:	e716      	b.n	800c564 <_rclc_execute.part.0+0xac>
 800c736:	bf00      	nop

0800c738 <rclc_executor_trigger_any>:
 800c738:	2800      	cmp	r0, #0
 800c73a:	d03f      	beq.n	800c7bc <rclc_executor_trigger_any+0x84>
 800c73c:	2900      	cmp	r1, #0
 800c73e:	d03e      	beq.n	800c7be <rclc_executor_trigger_any+0x86>
 800c740:	4603      	mov	r3, r0
 800c742:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c746:	2200      	movs	r2, #0
 800c748:	2800      	cmp	r0, #0
 800c74a:	d037      	beq.n	800c7bc <rclc_executor_trigger_any+0x84>
 800c74c:	b430      	push	{r4, r5}
 800c74e:	f893 c000 	ldrb.w	ip, [r3]
 800c752:	f1bc 0f08 	cmp.w	ip, #8
 800c756:	d11e      	bne.n	800c796 <rclc_executor_trigger_any+0x5e>
 800c758:	685c      	ldr	r4, [r3, #4]
 800c75a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c75c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c760:	d105      	bne.n	800c76e <rclc_executor_trigger_any+0x36>
 800c762:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c766:	b910      	cbnz	r0, 800c76e <rclc_executor_trigger_any+0x36>
 800c768:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c76c:	b128      	cbz	r0, 800c77a <rclc_executor_trigger_any+0x42>
 800c76e:	bc30      	pop	{r4, r5}
 800c770:	4770      	bx	lr
 800c772:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c776:	2800      	cmp	r0, #0
 800c778:	d1f9      	bne.n	800c76e <rclc_executor_trigger_any+0x36>
 800c77a:	3201      	adds	r2, #1
 800c77c:	4291      	cmp	r1, r2
 800c77e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c782:	d018      	beq.n	800c7b6 <rclc_executor_trigger_any+0x7e>
 800c784:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c788:	2800      	cmp	r0, #0
 800c78a:	d0f0      	beq.n	800c76e <rclc_executor_trigger_any+0x36>
 800c78c:	f893 c000 	ldrb.w	ip, [r3]
 800c790:	f1bc 0f08 	cmp.w	ip, #8
 800c794:	d0e0      	beq.n	800c758 <rclc_executor_trigger_any+0x20>
 800c796:	f1bc 0f09 	cmp.w	ip, #9
 800c79a:	d1ea      	bne.n	800c772 <rclc_executor_trigger_any+0x3a>
 800c79c:	685c      	ldr	r4, [r3, #4]
 800c79e:	6a25      	ldr	r5, [r4, #32]
 800c7a0:	2d00      	cmp	r5, #0
 800c7a2:	d1e4      	bne.n	800c76e <rclc_executor_trigger_any+0x36>
 800c7a4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d1e0      	bne.n	800c76e <rclc_executor_trigger_any+0x36>
 800c7ac:	3201      	adds	r2, #1
 800c7ae:	4291      	cmp	r1, r2
 800c7b0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c7b4:	d1e6      	bne.n	800c784 <rclc_executor_trigger_any+0x4c>
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	bc30      	pop	{r4, r5}
 800c7ba:	4770      	bx	lr
 800c7bc:	4770      	bx	lr
 800c7be:	4608      	mov	r0, r1
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop

0800c7c4 <rclc_executor_get_zero_initialized_executor>:
 800c7c4:	b510      	push	{r4, lr}
 800c7c6:	4903      	ldr	r1, [pc, #12]	@ (800c7d4 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	2288      	movs	r2, #136	@ 0x88
 800c7cc:	f015 f931 	bl	8021a32 <memcpy>
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	bd10      	pop	{r4, pc}
 800c7d4:	080230b0 	.word	0x080230b0

0800c7d8 <rclc_executor_init>:
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d05f      	beq.n	800c89c <rclc_executor_init+0xc4>
 800c7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	b0b0      	sub	sp, #192	@ 0xc0
 800c7e4:	2900      	cmp	r1, #0
 800c7e6:	d051      	beq.n	800c88c <rclc_executor_init+0xb4>
 800c7e8:	4605      	mov	r5, r0
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	4616      	mov	r6, r2
 800c7ee:	461f      	mov	r7, r3
 800c7f0:	f001 ff9a 	bl	800e728 <rcutils_allocator_is_valid>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d049      	beq.n	800c88c <rclc_executor_init+0xb4>
 800c7f8:	2e00      	cmp	r6, #0
 800c7fa:	d047      	beq.n	800c88c <rclc_executor_init+0xb4>
 800c7fc:	492c      	ldr	r1, [pc, #176]	@ (800c8b0 <rclc_executor_init+0xd8>)
 800c7fe:	2288      	movs	r2, #136	@ 0x88
 800c800:	a80e      	add	r0, sp, #56	@ 0x38
 800c802:	f015 f916 	bl	8021a32 <memcpy>
 800c806:	a90e      	add	r1, sp, #56	@ 0x38
 800c808:	2288      	movs	r2, #136	@ 0x88
 800c80a:	4628      	mov	r0, r5
 800c80c:	f015 f911 	bl	8021a32 <memcpy>
 800c810:	602c      	str	r4, [r5, #0]
 800c812:	4668      	mov	r0, sp
 800c814:	60ae      	str	r6, [r5, #8]
 800c816:	466c      	mov	r4, sp
 800c818:	f00a fe88 	bl	801752c <rcl_get_zero_initialized_wait_set>
 800c81c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c81e:	f105 0c14 	add.w	ip, r5, #20
 800c822:	f8d7 8000 	ldr.w	r8, [r7]
 800c826:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c82a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c82c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c832:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c836:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c8a8 <rclc_executor_init+0xd0>
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	f8cc 3000 	str.w	r3, [ip]
 800c840:	6939      	ldr	r1, [r7, #16]
 800c842:	612f      	str	r7, [r5, #16]
 800c844:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c848:	01b0      	lsls	r0, r6, #6
 800c84a:	47c0      	blx	r8
 800c84c:	6068      	str	r0, [r5, #4]
 800c84e:	b338      	cbz	r0, 800c8a0 <rclc_executor_init+0xc8>
 800c850:	2400      	movs	r4, #0
 800c852:	e000      	b.n	800c856 <rclc_executor_init+0x7e>
 800c854:	6868      	ldr	r0, [r5, #4]
 800c856:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c85a:	4631      	mov	r1, r6
 800c85c:	3401      	adds	r4, #1
 800c85e:	f000 fadf 	bl	800ce20 <rclc_executor_handle_init>
 800c862:	42a6      	cmp	r6, r4
 800c864:	d1f6      	bne.n	800c854 <rclc_executor_init+0x7c>
 800c866:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c86a:	f000 facf 	bl	800ce0c <rclc_executor_handle_counters_zero_init>
 800c86e:	4a11      	ldr	r2, [pc, #68]	@ (800c8b4 <rclc_executor_init+0xdc>)
 800c870:	686b      	ldr	r3, [r5, #4]
 800c872:	2000      	movs	r0, #0
 800c874:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c878:	b163      	cbz	r3, 800c894 <rclc_executor_init+0xbc>
 800c87a:	692b      	ldr	r3, [r5, #16]
 800c87c:	b153      	cbz	r3, 800c894 <rclc_executor_init+0xbc>
 800c87e:	68ab      	ldr	r3, [r5, #8]
 800c880:	b143      	cbz	r3, 800c894 <rclc_executor_init+0xbc>
 800c882:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c886:	b030      	add	sp, #192	@ 0xc0
 800c888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c88c:	200b      	movs	r0, #11
 800c88e:	b030      	add	sp, #192	@ 0xc0
 800c890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c894:	4618      	mov	r0, r3
 800c896:	b030      	add	sp, #192	@ 0xc0
 800c898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c89c:	200b      	movs	r0, #11
 800c89e:	4770      	bx	lr
 800c8a0:	200a      	movs	r0, #10
 800c8a2:	e7f4      	b.n	800c88e <rclc_executor_init+0xb6>
 800c8a4:	f3af 8000 	nop.w
 800c8a8:	3b9aca00 	.word	0x3b9aca00
 800c8ac:	00000000 	.word	0x00000000
 800c8b0:	080230b0 	.word	0x080230b0
 800c8b4:	0800c739 	.word	0x0800c739

0800c8b8 <rclc_executor_add_subscription>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c8be:	b338      	cbz	r0, 800c910 <rclc_executor_add_subscription+0x58>
 800c8c0:	b331      	cbz	r1, 800c910 <rclc_executor_add_subscription+0x58>
 800c8c2:	b32a      	cbz	r2, 800c910 <rclc_executor_add_subscription+0x58>
 800c8c4:	b323      	cbz	r3, 800c910 <rclc_executor_add_subscription+0x58>
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c8cc:	42a8      	cmp	r0, r5
 800c8ce:	d301      	bcc.n	800c8d4 <rclc_executor_add_subscription+0x1c>
 800c8d0:	2001      	movs	r0, #1
 800c8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8d4:	6866      	ldr	r6, [r4, #4]
 800c8d6:	0187      	lsls	r7, r0, #6
 800c8d8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c8dc:	2500      	movs	r5, #0
 800c8de:	55f5      	strb	r5, [r6, r7]
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c8e6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	f104 0514 	add.w	r5, r4, #20
 800c8f0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c8f4:	f88c e001 	strb.w	lr, [ip, #1]
 800c8f8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c8fc:	60e0      	str	r0, [r4, #12]
 800c8fe:	4628      	mov	r0, r5
 800c900:	f00a fe28 	bl	8017554 <rcl_wait_set_is_valid>
 800c904:	b930      	cbnz	r0, 800c914 <rclc_executor_add_subscription+0x5c>
 800c906:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c908:	3301      	adds	r3, #1
 800c90a:	2000      	movs	r0, #0
 800c90c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c910:	200b      	movs	r0, #11
 800c912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c914:	4628      	mov	r0, r5
 800c916:	f00a fe23 	bl	8017560 <rcl_wait_set_fini>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d0f3      	beq.n	800c906 <rclc_executor_add_subscription+0x4e>
 800c91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c920 <rclc_executor_add_service>:
 800c920:	b370      	cbz	r0, 800c980 <rclc_executor_add_service+0x60>
 800c922:	b369      	cbz	r1, 800c980 <rclc_executor_add_service+0x60>
 800c924:	b362      	cbz	r2, 800c980 <rclc_executor_add_service+0x60>
 800c926:	b35b      	cbz	r3, 800c980 <rclc_executor_add_service+0x60>
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4604      	mov	r4, r0
 800c92c:	9804      	ldr	r0, [sp, #16]
 800c92e:	b378      	cbz	r0, 800c990 <rclc_executor_add_service+0x70>
 800c930:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800c934:	42a8      	cmp	r0, r5
 800c936:	d301      	bcc.n	800c93c <rclc_executor_add_service+0x1c>
 800c938:	2001      	movs	r0, #1
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	6865      	ldr	r5, [r4, #4]
 800c93e:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800c942:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800c946:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800c94a:	9b04      	ldr	r3, [sp, #16]
 800c94c:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c950:	2305      	movs	r3, #5
 800c952:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c956:	3001      	adds	r0, #1
 800c958:	f825 300e 	strh.w	r3, [r5, lr]
 800c95c:	2201      	movs	r2, #1
 800c95e:	2300      	movs	r3, #0
 800c960:	f104 0514 	add.w	r5, r4, #20
 800c964:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800c968:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800c96c:	60e0      	str	r0, [r4, #12]
 800c96e:	4628      	mov	r0, r5
 800c970:	f00a fdf0 	bl	8017554 <rcl_wait_set_is_valid>
 800c974:	b930      	cbnz	r0, 800c984 <rclc_executor_add_service+0x64>
 800c976:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c978:	3301      	adds	r3, #1
 800c97a:	2000      	movs	r0, #0
 800c97c:	6563      	str	r3, [r4, #84]	@ 0x54
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	200b      	movs	r0, #11
 800c982:	4770      	bx	lr
 800c984:	4628      	mov	r0, r5
 800c986:	f00a fdeb 	bl	8017560 <rcl_wait_set_fini>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d0f3      	beq.n	800c976 <rclc_executor_add_service+0x56>
 800c98e:	e7d4      	b.n	800c93a <rclc_executor_add_service+0x1a>
 800c990:	200b      	movs	r0, #11
 800c992:	bd38      	pop	{r3, r4, r5, pc}

0800c994 <rclc_executor_add_service_with_context>:
 800c994:	b370      	cbz	r0, 800c9f4 <rclc_executor_add_service_with_context+0x60>
 800c996:	b369      	cbz	r1, 800c9f4 <rclc_executor_add_service_with_context+0x60>
 800c998:	b362      	cbz	r2, 800c9f4 <rclc_executor_add_service_with_context+0x60>
 800c99a:	b35b      	cbz	r3, 800c9f4 <rclc_executor_add_service_with_context+0x60>
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4604      	mov	r4, r0
 800c9a0:	9804      	ldr	r0, [sp, #16]
 800c9a2:	b378      	cbz	r0, 800ca04 <rclc_executor_add_service_with_context+0x70>
 800c9a4:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800c9a8:	42a8      	cmp	r0, r5
 800c9aa:	d301      	bcc.n	800c9b0 <rclc_executor_add_service_with_context+0x1c>
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	6865      	ldr	r5, [r4, #4]
 800c9b2:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800c9b6:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c9ba:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800c9be:	9a04      	ldr	r2, [sp, #16]
 800c9c0:	f8cc 2030 	str.w	r2, [ip, #48]	@ 0x30
 800c9c4:	2207      	movs	r2, #7
 800c9c6:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800c9ca:	f825 200e 	strh.w	r2, [r5, lr]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	1c43      	adds	r3, r0, #1
 800c9d2:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800c9d6:	f104 0514 	add.w	r5, r4, #20
 800c9da:	9a05      	ldr	r2, [sp, #20]
 800c9dc:	f8cc 202c 	str.w	r2, [ip, #44]	@ 0x2c
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	60e3      	str	r3, [r4, #12]
 800c9e4:	f00a fdb6 	bl	8017554 <rcl_wait_set_is_valid>
 800c9e8:	b930      	cbnz	r0, 800c9f8 <rclc_executor_add_service_with_context+0x64>
 800c9ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	6563      	str	r3, [r4, #84]	@ 0x54
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	200b      	movs	r0, #11
 800c9f6:	4770      	bx	lr
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	f00a fdb1 	bl	8017560 <rcl_wait_set_fini>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d0f3      	beq.n	800c9ea <rclc_executor_add_service_with_context+0x56>
 800ca02:	e7d4      	b.n	800c9ae <rclc_executor_add_service_with_context+0x1a>
 800ca04:	200b      	movs	r0, #11
 800ca06:	bd38      	pop	{r3, r4, r5, pc}

0800ca08 <rclc_executor_prepare>:
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d044      	beq.n	800ca96 <rclc_executor_prepare+0x8e>
 800ca0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca0e:	f100 0514 	add.w	r5, r0, #20
 800ca12:	b09b      	sub	sp, #108	@ 0x6c
 800ca14:	4604      	mov	r4, r0
 800ca16:	4628      	mov	r0, r5
 800ca18:	f00a fd9c 	bl	8017554 <rcl_wait_set_is_valid>
 800ca1c:	b110      	cbz	r0, 800ca24 <rclc_executor_prepare+0x1c>
 800ca1e:	2000      	movs	r0, #0
 800ca20:	b01b      	add	sp, #108	@ 0x6c
 800ca22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca24:	4628      	mov	r0, r5
 800ca26:	f00a fd9b 	bl	8017560 <rcl_wait_set_fini>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d130      	bne.n	800ca90 <rclc_executor_prepare+0x88>
 800ca2e:	a80c      	add	r0, sp, #48	@ 0x30
 800ca30:	f00a fd7c 	bl	801752c <rcl_get_zero_initialized_wait_set>
 800ca34:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ca38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca3c:	46ae      	mov	lr, r5
 800ca3e:	6927      	ldr	r7, [r4, #16]
 800ca40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca54:	f8dc 3000 	ldr.w	r3, [ip]
 800ca58:	f8ce 3000 	str.w	r3, [lr]
 800ca5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ca5e:	ae04      	add	r6, sp, #16
 800ca60:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	6822      	ldr	r2, [r4, #0]
 800ca66:	6033      	str	r3, [r6, #0]
 800ca68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca6a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ca6c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ca70:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ca74:	e9cd 2100 	strd	r2, r1, [sp]
 800ca78:	4628      	mov	r0, r5
 800ca7a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ca7c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ca7e:	f00b f86d 	bl	8017b5c <rcl_wait_set_init>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d0cc      	beq.n	800ca20 <rclc_executor_prepare+0x18>
 800ca86:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ca88:	f001 fe72 	bl	800e770 <rcutils_reset_error>
 800ca8c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ca8e:	e7c7      	b.n	800ca20 <rclc_executor_prepare+0x18>
 800ca90:	f001 fe6e 	bl	800e770 <rcutils_reset_error>
 800ca94:	e7cb      	b.n	800ca2e <rclc_executor_prepare+0x26>
 800ca96:	200b      	movs	r0, #11
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop

0800ca9c <rclc_executor_spin_some.part.0>:
 800ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	f100 0614 	add.w	r6, r0, #20
 800caa4:	b083      	sub	sp, #12
 800caa6:	4691      	mov	r9, r2
 800caa8:	4698      	mov	r8, r3
 800caaa:	4605      	mov	r5, r0
 800caac:	f7ff ffac 	bl	800ca08 <rclc_executor_prepare>
 800cab0:	4630      	mov	r0, r6
 800cab2:	f00a fe21 	bl	80176f8 <rcl_wait_set_clear>
 800cab6:	4607      	mov	r7, r0
 800cab8:	2800      	cmp	r0, #0
 800caba:	f040 80ed 	bne.w	800cc98 <rclc_executor_spin_some.part.0+0x1fc>
 800cabe:	68ab      	ldr	r3, [r5, #8]
 800cac0:	4604      	mov	r4, r0
 800cac2:	b303      	cbz	r3, 800cb06 <rclc_executor_spin_some.part.0+0x6a>
 800cac4:	6869      	ldr	r1, [r5, #4]
 800cac6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800caca:	01a2      	lsls	r2, r4, #6
 800cacc:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cad0:	b1cb      	cbz	r3, 800cb06 <rclc_executor_spin_some.part.0+0x6a>
 800cad2:	5c8b      	ldrb	r3, [r1, r2]
 800cad4:	2b0a      	cmp	r3, #10
 800cad6:	f200 80d8 	bhi.w	800cc8a <rclc_executor_spin_some.part.0+0x1ee>
 800cada:	e8df f003 	tbb	[pc, r3]
 800cade:	9c9c      	.short	0x9c9c
 800cae0:	068c8ca7 	.word	0x068c8ca7
 800cae4:	bdc90606 	.word	0xbdc90606
 800cae8:	b2          	.byte	0xb2
 800cae9:	00          	.byte	0x00
 800caea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800caee:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800caf2:	4630      	mov	r0, r6
 800caf4:	f00b f948 	bl	8017d88 <rcl_wait_set_add_service>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f040 8086 	bne.w	800cc0a <rclc_executor_spin_some.part.0+0x16e>
 800cafe:	68ab      	ldr	r3, [r5, #8]
 800cb00:	3401      	adds	r4, #1
 800cb02:	429c      	cmp	r4, r3
 800cb04:	d3de      	bcc.n	800cac4 <rclc_executor_spin_some.part.0+0x28>
 800cb06:	4643      	mov	r3, r8
 800cb08:	464a      	mov	r2, r9
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f00b f968 	bl	8017de0 <rcl_wait>
 800cb10:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f000 80c7 	beq.w	800cca8 <rclc_executor_spin_some.part.0+0x20c>
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	f040 80b5 	bne.w	800cc8a <rclc_executor_spin_some.part.0+0x1ee>
 800cb20:	68ab      	ldr	r3, [r5, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 8159 	beq.w	800cdda <rclc_executor_spin_some.part.0+0x33e>
 800cb28:	2400      	movs	r4, #0
 800cb2a:	46a0      	mov	r8, r4
 800cb2c:	f240 1991 	movw	r9, #401	@ 0x191
 800cb30:	e00a      	b.n	800cb48 <rclc_executor_spin_some.part.0+0xac>
 800cb32:	f7ff faff 	bl	800c134 <_rclc_check_for_new_data>
 800cb36:	4604      	mov	r4, r0
 800cb38:	b110      	cbz	r0, 800cb40 <rclc_executor_spin_some.part.0+0xa4>
 800cb3a:	4548      	cmp	r0, r9
 800cb3c:	f040 80b2 	bne.w	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800cb40:	68ab      	ldr	r3, [r5, #8]
 800cb42:	4598      	cmp	r8, r3
 800cb44:	f080 8126 	bcs.w	800cd94 <rclc_executor_spin_some.part.0+0x2f8>
 800cb48:	686a      	ldr	r2, [r5, #4]
 800cb4a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cb4e:	4631      	mov	r1, r6
 800cb50:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cb54:	f108 0801 	add.w	r8, r8, #1
 800cb58:	f1bc 0f00 	cmp.w	ip, #0
 800cb5c:	d1e9      	bne.n	800cb32 <rclc_executor_spin_some.part.0+0x96>
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4610      	mov	r0, r2
 800cb62:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cb66:	4798      	blx	r3
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	f000 809b 	beq.w	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800cb6e:	68ab      	ldr	r3, [r5, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 8097 	beq.w	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800cb76:	f04f 0800 	mov.w	r8, #0
 800cb7a:	f240 1991 	movw	r9, #401	@ 0x191
 800cb7e:	e009      	b.n	800cb94 <rclc_executor_spin_some.part.0+0xf8>
 800cb80:	f7ff fb26 	bl	800c1d0 <_rclc_take_new_data>
 800cb84:	4604      	mov	r4, r0
 800cb86:	b110      	cbz	r0, 800cb8e <rclc_executor_spin_some.part.0+0xf2>
 800cb88:	4548      	cmp	r0, r9
 800cb8a:	f040 808b 	bne.w	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800cb8e:	68ab      	ldr	r3, [r5, #8]
 800cb90:	4598      	cmp	r8, r3
 800cb92:	d209      	bcs.n	800cba8 <rclc_executor_spin_some.part.0+0x10c>
 800cb94:	6868      	ldr	r0, [r5, #4]
 800cb96:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cb9a:	4631      	mov	r1, r6
 800cb9c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cba0:	f108 0801 	add.w	r8, r8, #1
 800cba4:	2a00      	cmp	r2, #0
 800cba6:	d1eb      	bne.n	800cb80 <rclc_executor_spin_some.part.0+0xe4>
 800cba8:	2600      	movs	r6, #0
 800cbaa:	b97b      	cbnz	r3, 800cbcc <rclc_executor_spin_some.part.0+0x130>
 800cbac:	e07a      	b.n	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800cbae:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cbb2:	2a08      	cmp	r2, #8
 800cbb4:	f000 80fd 	beq.w	800cdb2 <rclc_executor_spin_some.part.0+0x316>
 800cbb8:	2a09      	cmp	r2, #9
 800cbba:	f000 80ef 	beq.w	800cd9c <rclc_executor_spin_some.part.0+0x300>
 800cbbe:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cbc2:	b98a      	cbnz	r2, 800cbe8 <rclc_executor_spin_some.part.0+0x14c>
 800cbc4:	3601      	adds	r6, #1
 800cbc6:	429e      	cmp	r6, r3
 800cbc8:	d262      	bcs.n	800cc90 <rclc_executor_spin_some.part.0+0x1f4>
 800cbca:	2400      	movs	r4, #0
 800cbcc:	686a      	ldr	r2, [r5, #4]
 800cbce:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cbd2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cbd6:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cbda:	2900      	cmp	r1, #0
 800cbdc:	d062      	beq.n	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800cbde:	7841      	ldrb	r1, [r0, #1]
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	d0e4      	beq.n	800cbae <rclc_executor_spin_some.part.0+0x112>
 800cbe4:	2901      	cmp	r1, #1
 800cbe6:	d1ed      	bne.n	800cbc4 <rclc_executor_spin_some.part.0+0x128>
 800cbe8:	f7ff fc66 	bl	800c4b8 <_rclc_execute.part.0>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f040 80b6 	bne.w	800cd5e <rclc_executor_spin_some.part.0+0x2c2>
 800cbf2:	68ab      	ldr	r3, [r5, #8]
 800cbf4:	e7e6      	b.n	800cbc4 <rclc_executor_spin_some.part.0+0x128>
 800cbf6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cbfa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cbfe:	4630      	mov	r0, r6
 800cc00:	f00b f896 	bl	8017d30 <rcl_wait_set_add_client>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	f43f af7a 	beq.w	800cafe <rclc_executor_spin_some.part.0+0x62>
 800cc0a:	9001      	str	r0, [sp, #4]
 800cc0c:	f001 fdb0 	bl	800e770 <rcutils_reset_error>
 800cc10:	9801      	ldr	r0, [sp, #4]
 800cc12:	4607      	mov	r7, r0
 800cc14:	e03c      	b.n	800cc90 <rclc_executor_spin_some.part.0+0x1f4>
 800cc16:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc1a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f00a fd3e 	bl	80176a0 <rcl_wait_set_add_subscription>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	f43f af6a 	beq.w	800cafe <rclc_executor_spin_some.part.0+0x62>
 800cc2a:	e7ee      	b.n	800cc0a <rclc_executor_spin_some.part.0+0x16e>
 800cc2c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc30:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc34:	4630      	mov	r0, r6
 800cc36:	f00b f84b 	bl	8017cd0 <rcl_wait_set_add_timer>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	f43f af5f 	beq.w	800cafe <rclc_executor_spin_some.part.0+0x62>
 800cc40:	e7e3      	b.n	800cc0a <rclc_executor_spin_some.part.0+0x16e>
 800cc42:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc46:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f00b f814 	bl	8017c78 <rcl_wait_set_add_guard_condition>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	f43f af54 	beq.w	800cafe <rclc_executor_spin_some.part.0+0x62>
 800cc56:	e7d8      	b.n	800cc0a <rclc_executor_spin_some.part.0+0x16e>
 800cc58:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc5c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc60:	3110      	adds	r1, #16
 800cc62:	4630      	mov	r0, r6
 800cc64:	f00b fd94 	bl	8018790 <rcl_action_wait_set_add_action_server>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	f43f af48 	beq.w	800cafe <rclc_executor_spin_some.part.0+0x62>
 800cc6e:	e7cc      	b.n	800cc0a <rclc_executor_spin_some.part.0+0x16e>
 800cc70:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cc74:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cc78:	3110      	adds	r1, #16
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	f00b fb5f 	bl	8018340 <rcl_action_wait_set_add_action_client>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	f43f af3b 	beq.w	800cafe <rclc_executor_spin_some.part.0+0x62>
 800cc88:	e7bf      	b.n	800cc0a <rclc_executor_spin_some.part.0+0x16e>
 800cc8a:	f001 fd71 	bl	800e770 <rcutils_reset_error>
 800cc8e:	2701      	movs	r7, #1
 800cc90:	4638      	mov	r0, r7
 800cc92:	b003      	add	sp, #12
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc98:	f001 fd6a 	bl	800e770 <rcutils_reset_error>
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	b003      	add	sp, #12
 800cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca4:	4627      	mov	r7, r4
 800cca6:	e7f3      	b.n	800cc90 <rclc_executor_spin_some.part.0+0x1f4>
 800cca8:	68ab      	ldr	r3, [r5, #8]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 8092 	beq.w	800cdd4 <rclc_executor_spin_some.part.0+0x338>
 800ccb0:	2400      	movs	r4, #0
 800ccb2:	46a0      	mov	r8, r4
 800ccb4:	f240 1991 	movw	r9, #401	@ 0x191
 800ccb8:	e008      	b.n	800cccc <rclc_executor_spin_some.part.0+0x230>
 800ccba:	f7ff fa3b 	bl	800c134 <_rclc_check_for_new_data>
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	b108      	cbz	r0, 800ccc6 <rclc_executor_spin_some.part.0+0x22a>
 800ccc2:	4548      	cmp	r0, r9
 800ccc4:	d1ee      	bne.n	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800ccc6:	68ab      	ldr	r3, [r5, #8]
 800ccc8:	4598      	cmp	r8, r3
 800ccca:	d265      	bcs.n	800cd98 <rclc_executor_spin_some.part.0+0x2fc>
 800cccc:	686a      	ldr	r2, [r5, #4]
 800ccce:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ccd8:	f108 0801 	add.w	r8, r8, #1
 800ccdc:	f1bc 0f00 	cmp.w	ip, #0
 800cce0:	d1eb      	bne.n	800ccba <rclc_executor_spin_some.part.0+0x21e>
 800cce2:	4619      	mov	r1, r3
 800cce4:	4610      	mov	r0, r2
 800cce6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ccea:	4798      	blx	r3
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d0d9      	beq.n	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800ccf0:	68ab      	ldr	r3, [r5, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d0d6      	beq.n	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800ccf6:	f04f 0800 	mov.w	r8, #0
 800ccfa:	f240 1991 	movw	r9, #401	@ 0x191
 800ccfe:	f240 2a59 	movw	sl, #601	@ 0x259
 800cd02:	e00e      	b.n	800cd22 <rclc_executor_spin_some.part.0+0x286>
 800cd04:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cd08:	2b08      	cmp	r3, #8
 800cd0a:	d033      	beq.n	800cd74 <rclc_executor_spin_some.part.0+0x2d8>
 800cd0c:	2b09      	cmp	r3, #9
 800cd0e:	d028      	beq.n	800cd62 <rclc_executor_spin_some.part.0+0x2c6>
 800cd10:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cd14:	b9fb      	cbnz	r3, 800cd56 <rclc_executor_spin_some.part.0+0x2ba>
 800cd16:	68ab      	ldr	r3, [r5, #8]
 800cd18:	f108 0801 	add.w	r8, r8, #1
 800cd1c:	4598      	cmp	r8, r3
 800cd1e:	d2b7      	bcs.n	800cc90 <rclc_executor_spin_some.part.0+0x1f4>
 800cd20:	2400      	movs	r4, #0
 800cd22:	6868      	ldr	r0, [r5, #4]
 800cd24:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cd28:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cd2c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0b7      	beq.n	800cca4 <rclc_executor_spin_some.part.0+0x208>
 800cd34:	4631      	mov	r1, r6
 800cd36:	f7ff fa4b 	bl	800c1d0 <_rclc_take_new_data>
 800cd3a:	b118      	cbz	r0, 800cd44 <rclc_executor_spin_some.part.0+0x2a8>
 800cd3c:	4548      	cmp	r0, r9
 800cd3e:	d001      	beq.n	800cd44 <rclc_executor_spin_some.part.0+0x2a8>
 800cd40:	4550      	cmp	r0, sl
 800cd42:	d10c      	bne.n	800cd5e <rclc_executor_spin_some.part.0+0x2c2>
 800cd44:	686b      	ldr	r3, [r5, #4]
 800cd46:	eb13 000b 	adds.w	r0, r3, fp
 800cd4a:	d021      	beq.n	800cd90 <rclc_executor_spin_some.part.0+0x2f4>
 800cd4c:	7842      	ldrb	r2, [r0, #1]
 800cd4e:	2a00      	cmp	r2, #0
 800cd50:	d0d8      	beq.n	800cd04 <rclc_executor_spin_some.part.0+0x268>
 800cd52:	2a01      	cmp	r2, #1
 800cd54:	d1df      	bne.n	800cd16 <rclc_executor_spin_some.part.0+0x27a>
 800cd56:	f7ff fbaf 	bl	800c4b8 <_rclc_execute.part.0>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d0db      	beq.n	800cd16 <rclc_executor_spin_some.part.0+0x27a>
 800cd5e:	4607      	mov	r7, r0
 800cd60:	e796      	b.n	800cc90 <rclc_executor_spin_some.part.0+0x1f4>
 800cd62:	6843      	ldr	r3, [r0, #4]
 800cd64:	6a1a      	ldr	r2, [r3, #32]
 800cd66:	2a00      	cmp	r2, #0
 800cd68:	d1f5      	bne.n	800cd56 <rclc_executor_spin_some.part.0+0x2ba>
 800cd6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d0d1      	beq.n	800cd16 <rclc_executor_spin_some.part.0+0x27a>
 800cd72:	e7f0      	b.n	800cd56 <rclc_executor_spin_some.part.0+0x2ba>
 800cd74:	6843      	ldr	r3, [r0, #4]
 800cd76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd78:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cd7c:	d1eb      	bne.n	800cd56 <rclc_executor_spin_some.part.0+0x2ba>
 800cd7e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cd82:	2a00      	cmp	r2, #0
 800cd84:	d1e7      	bne.n	800cd56 <rclc_executor_spin_some.part.0+0x2ba>
 800cd86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d0c3      	beq.n	800cd16 <rclc_executor_spin_some.part.0+0x27a>
 800cd8e:	e7e2      	b.n	800cd56 <rclc_executor_spin_some.part.0+0x2ba>
 800cd90:	270b      	movs	r7, #11
 800cd92:	e77d      	b.n	800cc90 <rclc_executor_spin_some.part.0+0x1f4>
 800cd94:	686a      	ldr	r2, [r5, #4]
 800cd96:	e6e2      	b.n	800cb5e <rclc_executor_spin_some.part.0+0xc2>
 800cd98:	686a      	ldr	r2, [r5, #4]
 800cd9a:	e7a2      	b.n	800cce2 <rclc_executor_spin_some.part.0+0x246>
 800cd9c:	6842      	ldr	r2, [r0, #4]
 800cd9e:	6a11      	ldr	r1, [r2, #32]
 800cda0:	2900      	cmp	r1, #0
 800cda2:	f47f af21 	bne.w	800cbe8 <rclc_executor_spin_some.part.0+0x14c>
 800cda6:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	f43f af0a 	beq.w	800cbc4 <rclc_executor_spin_some.part.0+0x128>
 800cdb0:	e71a      	b.n	800cbe8 <rclc_executor_spin_some.part.0+0x14c>
 800cdb2:	6842      	ldr	r2, [r0, #4]
 800cdb4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cdb6:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cdba:	f47f af15 	bne.w	800cbe8 <rclc_executor_spin_some.part.0+0x14c>
 800cdbe:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800cdc2:	2900      	cmp	r1, #0
 800cdc4:	f47f af10 	bne.w	800cbe8 <rclc_executor_spin_some.part.0+0x14c>
 800cdc8:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	f43f aef9 	beq.w	800cbc4 <rclc_executor_spin_some.part.0+0x128>
 800cdd2:	e709      	b.n	800cbe8 <rclc_executor_spin_some.part.0+0x14c>
 800cdd4:	686a      	ldr	r2, [r5, #4]
 800cdd6:	461c      	mov	r4, r3
 800cdd8:	e783      	b.n	800cce2 <rclc_executor_spin_some.part.0+0x246>
 800cdda:	686a      	ldr	r2, [r5, #4]
 800cddc:	461c      	mov	r4, r3
 800cdde:	e6be      	b.n	800cb5e <rclc_executor_spin_some.part.0+0xc2>

0800cde0 <rclc_executor_spin_some>:
 800cde0:	b190      	cbz	r0, 800ce08 <rclc_executor_spin_some+0x28>
 800cde2:	b570      	push	{r4, r5, r6, lr}
 800cde4:	4604      	mov	r4, r0
 800cde6:	6800      	ldr	r0, [r0, #0]
 800cde8:	4616      	mov	r6, r2
 800cdea:	461d      	mov	r5, r3
 800cdec:	f009 f960 	bl	80160b0 <rcl_context_is_valid>
 800cdf0:	b130      	cbz	r0, 800ce00 <rclc_executor_spin_some+0x20>
 800cdf2:	4632      	mov	r2, r6
 800cdf4:	462b      	mov	r3, r5
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdfc:	f7ff be4e 	b.w	800ca9c <rclc_executor_spin_some.part.0>
 800ce00:	f001 fcb6 	bl	800e770 <rcutils_reset_error>
 800ce04:	2001      	movs	r0, #1
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	200b      	movs	r0, #11
 800ce0a:	4770      	bx	lr

0800ce0c <rclc_executor_handle_counters_zero_init>:
 800ce0c:	b130      	cbz	r0, 800ce1c <rclc_executor_handle_counters_zero_init+0x10>
 800ce0e:	b508      	push	{r3, lr}
 800ce10:	2220      	movs	r2, #32
 800ce12:	2100      	movs	r1, #0
 800ce14:	f014 fda5 	bl	8021962 <memset>
 800ce18:	2000      	movs	r0, #0
 800ce1a:	bd08      	pop	{r3, pc}
 800ce1c:	200b      	movs	r0, #11
 800ce1e:	4770      	bx	lr

0800ce20 <rclc_executor_handle_init>:
 800ce20:	b168      	cbz	r0, 800ce3e <rclc_executor_handle_init+0x1e>
 800ce22:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800ce48 <rclc_executor_handle_init+0x28>
 800ce26:	2300      	movs	r3, #0
 800ce28:	220b      	movs	r2, #11
 800ce2a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800ce2e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ce32:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ce36:	8002      	strh	r2, [r0, #0]
 800ce38:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	4770      	bx	lr
 800ce3e:	200b      	movs	r0, #11
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	f3af 8000 	nop.w
	...

0800ce50 <rclc_support_init>:
 800ce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce54:	b086      	sub	sp, #24
 800ce56:	b3b8      	cbz	r0, 800cec8 <rclc_support_init+0x78>
 800ce58:	461c      	mov	r4, r3
 800ce5a:	b3ab      	cbz	r3, 800cec8 <rclc_support_init+0x78>
 800ce5c:	460f      	mov	r7, r1
 800ce5e:	4690      	mov	r8, r2
 800ce60:	4606      	mov	r6, r0
 800ce62:	f009 fa8f 	bl	8016384 <rcl_get_zero_initialized_init_options>
 800ce66:	f104 030c 	add.w	r3, r4, #12
 800ce6a:	9005      	str	r0, [sp, #20]
 800ce6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ce70:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ce74:	a805      	add	r0, sp, #20
 800ce76:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ce7a:	f009 fa85 	bl	8016388 <rcl_init_options_init>
 800ce7e:	4605      	mov	r5, r0
 800ce80:	b9e0      	cbnz	r0, 800cebc <rclc_support_init+0x6c>
 800ce82:	ad02      	add	r5, sp, #8
 800ce84:	4628      	mov	r0, r5
 800ce86:	f009 f909 	bl	801609c <rcl_get_zero_initialized_context>
 800ce8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ce8e:	4633      	mov	r3, r6
 800ce90:	e886 0003 	stmia.w	r6, {r0, r1}
 800ce94:	aa05      	add	r2, sp, #20
 800ce96:	4641      	mov	r1, r8
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f009 f96f 	bl	801617c <rcl_init>
 800ce9e:	4605      	mov	r5, r0
 800cea0:	b9b8      	cbnz	r0, 800ced2 <rclc_support_init+0x82>
 800cea2:	60b4      	str	r4, [r6, #8]
 800cea4:	4622      	mov	r2, r4
 800cea6:	f106 010c 	add.w	r1, r6, #12
 800ceaa:	2003      	movs	r0, #3
 800ceac:	f00a f948 	bl	8017140 <rcl_clock_init>
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	b970      	cbnz	r0, 800ced2 <rclc_support_init+0x82>
 800ceb4:	a805      	add	r0, sp, #20
 800ceb6:	f009 facd 	bl	8016454 <rcl_init_options_fini>
 800ceba:	b108      	cbz	r0, 800cec0 <rclc_support_init+0x70>
 800cebc:	f001 fc58 	bl	800e770 <rcutils_reset_error>
 800cec0:	4628      	mov	r0, r5
 800cec2:	b006      	add	sp, #24
 800cec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec8:	250b      	movs	r5, #11
 800ceca:	4628      	mov	r0, r5
 800cecc:	b006      	add	sp, #24
 800cece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced2:	f001 fc4d 	bl	800e770 <rcutils_reset_error>
 800ced6:	a805      	add	r0, sp, #20
 800ced8:	f009 fabc 	bl	8016454 <rcl_init_options_fini>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d0ef      	beq.n	800cec0 <rclc_support_init+0x70>
 800cee0:	e7ec      	b.n	800cebc <rclc_support_init+0x6c>
 800cee2:	bf00      	nop

0800cee4 <rclc_node_init_default>:
 800cee4:	b3b8      	cbz	r0, 800cf56 <rclc_node_init_default+0x72>
 800cee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceea:	460d      	mov	r5, r1
 800ceec:	b0a1      	sub	sp, #132	@ 0x84
 800ceee:	b329      	cbz	r1, 800cf3c <rclc_node_init_default+0x58>
 800cef0:	4616      	mov	r6, r2
 800cef2:	b31a      	cbz	r2, 800cf3c <rclc_node_init_default+0x58>
 800cef4:	461f      	mov	r7, r3
 800cef6:	b30b      	cbz	r3, 800cf3c <rclc_node_init_default+0x58>
 800cef8:	f10d 0810 	add.w	r8, sp, #16
 800cefc:	4604      	mov	r4, r0
 800cefe:	4640      	mov	r0, r8
 800cf00:	f009 fb60 	bl	80165c4 <rcl_get_zero_initialized_node>
 800cf04:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cf08:	f10d 0918 	add.w	r9, sp, #24
 800cf0c:	e884 0003 	stmia.w	r4, {r0, r1}
 800cf10:	4648      	mov	r0, r9
 800cf12:	f009 fccf 	bl	80168b4 <rcl_node_get_default_options>
 800cf16:	4640      	mov	r0, r8
 800cf18:	f009 fb54 	bl	80165c4 <rcl_get_zero_initialized_node>
 800cf1c:	f8cd 9000 	str.w	r9, [sp]
 800cf20:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cf24:	463b      	mov	r3, r7
 800cf26:	e884 0003 	stmia.w	r4, {r0, r1}
 800cf2a:	4632      	mov	r2, r6
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f009 fb52 	bl	80165d8 <rcl_node_init>
 800cf34:	b930      	cbnz	r0, 800cf44 <rclc_node_init_default+0x60>
 800cf36:	b021      	add	sp, #132	@ 0x84
 800cf38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf3c:	200b      	movs	r0, #11
 800cf3e:	b021      	add	sp, #132	@ 0x84
 800cf40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf44:	9003      	str	r0, [sp, #12]
 800cf46:	f001 fc13 	bl	800e770 <rcutils_reset_error>
 800cf4a:	f001 fc11 	bl	800e770 <rcutils_reset_error>
 800cf4e:	9803      	ldr	r0, [sp, #12]
 800cf50:	b021      	add	sp, #132	@ 0x84
 800cf52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf56:	200b      	movs	r0, #11
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop

0800cf5c <rclc_publisher_init_best_effort>:
 800cf5c:	b368      	cbz	r0, 800cfba <rclc_publisher_init_best_effort+0x5e>
 800cf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf62:	460d      	mov	r5, r1
 800cf64:	b0a0      	sub	sp, #128	@ 0x80
 800cf66:	b321      	cbz	r1, 800cfb2 <rclc_publisher_init_best_effort+0x56>
 800cf68:	4616      	mov	r6, r2
 800cf6a:	b312      	cbz	r2, 800cfb2 <rclc_publisher_init_best_effort+0x56>
 800cf6c:	461f      	mov	r7, r3
 800cf6e:	b303      	cbz	r3, 800cfb2 <rclc_publisher_init_best_effort+0x56>
 800cf70:	4604      	mov	r4, r0
 800cf72:	f7fe ffcf 	bl	800bf14 <rcl_get_zero_initialized_publisher>
 800cf76:	f10d 0810 	add.w	r8, sp, #16
 800cf7a:	6020      	str	r0, [r4, #0]
 800cf7c:	4640      	mov	r0, r8
 800cf7e:	f7ff f865 	bl	800c04c <rcl_publisher_get_default_options>
 800cf82:	490f      	ldr	r1, [pc, #60]	@ (800cfc0 <rclc_publisher_init_best_effort+0x64>)
 800cf84:	2250      	movs	r2, #80	@ 0x50
 800cf86:	4640      	mov	r0, r8
 800cf88:	f014 fd53 	bl	8021a32 <memcpy>
 800cf8c:	f8cd 8000 	str.w	r8, [sp]
 800cf90:	463b      	mov	r3, r7
 800cf92:	4632      	mov	r2, r6
 800cf94:	4629      	mov	r1, r5
 800cf96:	4620      	mov	r0, r4
 800cf98:	f7fe ffc2 	bl	800bf20 <rcl_publisher_init>
 800cf9c:	b910      	cbnz	r0, 800cfa4 <rclc_publisher_init_best_effort+0x48>
 800cf9e:	b020      	add	sp, #128	@ 0x80
 800cfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa4:	9003      	str	r0, [sp, #12]
 800cfa6:	f001 fbe3 	bl	800e770 <rcutils_reset_error>
 800cfaa:	9803      	ldr	r0, [sp, #12]
 800cfac:	b020      	add	sp, #128	@ 0x80
 800cfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb2:	200b      	movs	r0, #11
 800cfb4:	b020      	add	sp, #128	@ 0x80
 800cfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfba:	200b      	movs	r0, #11
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	08023138 	.word	0x08023138

0800cfc4 <rclc_publisher_init>:
 800cfc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfc8:	b0a1      	sub	sp, #132	@ 0x84
 800cfca:	f8dd 80a0 	ldr.w	r8, [sp, #160]	@ 0xa0
 800cfce:	b310      	cbz	r0, 800d016 <rclc_publisher_init+0x52>
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	b301      	cbz	r1, 800d016 <rclc_publisher_init+0x52>
 800cfd4:	4616      	mov	r6, r2
 800cfd6:	b1f2      	cbz	r2, 800d016 <rclc_publisher_init+0x52>
 800cfd8:	461f      	mov	r7, r3
 800cfda:	b1e3      	cbz	r3, 800d016 <rclc_publisher_init+0x52>
 800cfdc:	f1b8 0f00 	cmp.w	r8, #0
 800cfe0:	d019      	beq.n	800d016 <rclc_publisher_init+0x52>
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	f7fe ff96 	bl	800bf14 <rcl_get_zero_initialized_publisher>
 800cfe8:	f10d 0910 	add.w	r9, sp, #16
 800cfec:	6020      	str	r0, [r4, #0]
 800cfee:	4648      	mov	r0, r9
 800cff0:	f7ff f82c 	bl	800c04c <rcl_publisher_get_default_options>
 800cff4:	4641      	mov	r1, r8
 800cff6:	2250      	movs	r2, #80	@ 0x50
 800cff8:	4648      	mov	r0, r9
 800cffa:	f014 fd1a 	bl	8021a32 <memcpy>
 800cffe:	f8cd 9000 	str.w	r9, [sp]
 800d002:	463b      	mov	r3, r7
 800d004:	4632      	mov	r2, r6
 800d006:	4629      	mov	r1, r5
 800d008:	4620      	mov	r0, r4
 800d00a:	f7fe ff89 	bl	800bf20 <rcl_publisher_init>
 800d00e:	b930      	cbnz	r0, 800d01e <rclc_publisher_init+0x5a>
 800d010:	b021      	add	sp, #132	@ 0x84
 800d012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d016:	200b      	movs	r0, #11
 800d018:	b021      	add	sp, #132	@ 0x84
 800d01a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d01e:	9003      	str	r0, [sp, #12]
 800d020:	f001 fba6 	bl	800e770 <rcutils_reset_error>
 800d024:	9803      	ldr	r0, [sp, #12]
 800d026:	b021      	add	sp, #132	@ 0x84
 800d028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d02c <rclc_service_init_default>:
 800d02c:	b368      	cbz	r0, 800d08a <rclc_service_init_default+0x5e>
 800d02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d032:	460d      	mov	r5, r1
 800d034:	b09e      	sub	sp, #120	@ 0x78
 800d036:	b321      	cbz	r1, 800d082 <rclc_service_init_default+0x56>
 800d038:	4616      	mov	r6, r2
 800d03a:	b312      	cbz	r2, 800d082 <rclc_service_init_default+0x56>
 800d03c:	461f      	mov	r7, r3
 800d03e:	b303      	cbz	r3, 800d082 <rclc_service_init_default+0x56>
 800d040:	4604      	mov	r4, r0
 800d042:	f009 fe07 	bl	8016c54 <rcl_get_zero_initialized_service>
 800d046:	f10d 0810 	add.w	r8, sp, #16
 800d04a:	6020      	str	r0, [r4, #0]
 800d04c:	4640      	mov	r0, r8
 800d04e:	f009 fe8f 	bl	8016d70 <rcl_service_get_default_options>
 800d052:	490f      	ldr	r1, [pc, #60]	@ (800d090 <rclc_service_init_default+0x64>)
 800d054:	2250      	movs	r2, #80	@ 0x50
 800d056:	4640      	mov	r0, r8
 800d058:	f014 fceb 	bl	8021a32 <memcpy>
 800d05c:	f8cd 8000 	str.w	r8, [sp]
 800d060:	463b      	mov	r3, r7
 800d062:	4632      	mov	r2, r6
 800d064:	4629      	mov	r1, r5
 800d066:	4620      	mov	r0, r4
 800d068:	f009 fdfa 	bl	8016c60 <rcl_service_init>
 800d06c:	b910      	cbnz	r0, 800d074 <rclc_service_init_default+0x48>
 800d06e:	b01e      	add	sp, #120	@ 0x78
 800d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d074:	9003      	str	r0, [sp, #12]
 800d076:	f001 fb7b 	bl	800e770 <rcutils_reset_error>
 800d07a:	9803      	ldr	r0, [sp, #12]
 800d07c:	b01e      	add	sp, #120	@ 0x78
 800d07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d082:	200b      	movs	r0, #11
 800d084:	b01e      	add	sp, #120	@ 0x78
 800d086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d08a:	200b      	movs	r0, #11
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	08023188 	.word	0x08023188

0800d094 <rclc_service_init>:
 800d094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d098:	b09f      	sub	sp, #124	@ 0x7c
 800d09a:	f8dd 8098 	ldr.w	r8, [sp, #152]	@ 0x98
 800d09e:	b310      	cbz	r0, 800d0e6 <rclc_service_init+0x52>
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	b301      	cbz	r1, 800d0e6 <rclc_service_init+0x52>
 800d0a4:	4616      	mov	r6, r2
 800d0a6:	b1f2      	cbz	r2, 800d0e6 <rclc_service_init+0x52>
 800d0a8:	461f      	mov	r7, r3
 800d0aa:	b1e3      	cbz	r3, 800d0e6 <rclc_service_init+0x52>
 800d0ac:	f1b8 0f00 	cmp.w	r8, #0
 800d0b0:	d019      	beq.n	800d0e6 <rclc_service_init+0x52>
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	f009 fdce 	bl	8016c54 <rcl_get_zero_initialized_service>
 800d0b8:	f10d 0910 	add.w	r9, sp, #16
 800d0bc:	6020      	str	r0, [r4, #0]
 800d0be:	4648      	mov	r0, r9
 800d0c0:	f009 fe56 	bl	8016d70 <rcl_service_get_default_options>
 800d0c4:	4641      	mov	r1, r8
 800d0c6:	2250      	movs	r2, #80	@ 0x50
 800d0c8:	4648      	mov	r0, r9
 800d0ca:	f014 fcb2 	bl	8021a32 <memcpy>
 800d0ce:	f8cd 9000 	str.w	r9, [sp]
 800d0d2:	463b      	mov	r3, r7
 800d0d4:	4632      	mov	r2, r6
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f009 fdc1 	bl	8016c60 <rcl_service_init>
 800d0de:	b930      	cbnz	r0, 800d0ee <rclc_service_init+0x5a>
 800d0e0:	b01f      	add	sp, #124	@ 0x7c
 800d0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0e6:	200b      	movs	r0, #11
 800d0e8:	b01f      	add	sp, #124	@ 0x7c
 800d0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0ee:	9003      	str	r0, [sp, #12]
 800d0f0:	f001 fb3e 	bl	800e770 <rcutils_reset_error>
 800d0f4:	9803      	ldr	r0, [sp, #12]
 800d0f6:	b01f      	add	sp, #124	@ 0x7c
 800d0f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d0fc <rclc_subscription_init_default>:
 800d0fc:	b368      	cbz	r0, 800d15a <rclc_subscription_init_default+0x5e>
 800d0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d102:	460d      	mov	r5, r1
 800d104:	b0a0      	sub	sp, #128	@ 0x80
 800d106:	b321      	cbz	r1, 800d152 <rclc_subscription_init_default+0x56>
 800d108:	4616      	mov	r6, r2
 800d10a:	b312      	cbz	r2, 800d152 <rclc_subscription_init_default+0x56>
 800d10c:	461f      	mov	r7, r3
 800d10e:	b303      	cbz	r3, 800d152 <rclc_subscription_init_default+0x56>
 800d110:	4604      	mov	r4, r0
 800d112:	f009 feb9 	bl	8016e88 <rcl_get_zero_initialized_subscription>
 800d116:	f10d 0810 	add.w	r8, sp, #16
 800d11a:	6020      	str	r0, [r4, #0]
 800d11c:	4640      	mov	r0, r8
 800d11e:	f009 ff61 	bl	8016fe4 <rcl_subscription_get_default_options>
 800d122:	490f      	ldr	r1, [pc, #60]	@ (800d160 <rclc_subscription_init_default+0x64>)
 800d124:	2250      	movs	r2, #80	@ 0x50
 800d126:	4640      	mov	r0, r8
 800d128:	f014 fc83 	bl	8021a32 <memcpy>
 800d12c:	f8cd 8000 	str.w	r8, [sp]
 800d130:	463b      	mov	r3, r7
 800d132:	4632      	mov	r2, r6
 800d134:	4629      	mov	r1, r5
 800d136:	4620      	mov	r0, r4
 800d138:	f009 feac 	bl	8016e94 <rcl_subscription_init>
 800d13c:	b910      	cbnz	r0, 800d144 <rclc_subscription_init_default+0x48>
 800d13e:	b020      	add	sp, #128	@ 0x80
 800d140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d144:	9003      	str	r0, [sp, #12]
 800d146:	f001 fb13 	bl	800e770 <rcutils_reset_error>
 800d14a:	9803      	ldr	r0, [sp, #12]
 800d14c:	b020      	add	sp, #128	@ 0x80
 800d14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d152:	200b      	movs	r0, #11
 800d154:	b020      	add	sp, #128	@ 0x80
 800d156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d15a:	200b      	movs	r0, #11
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop
 800d160:	080231d8 	.word	0x080231d8

0800d164 <rclc_parameter_server_describe_service_callback>:
 800d164:	2800      	cmp	r0, #0
 800d166:	d069      	beq.n	800d23c <rclc_parameter_server_describe_service_callback+0xd8>
 800d168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d16c:	4689      	mov	r9, r1
 800d16e:	2900      	cmp	r1, #0
 800d170:	d04d      	beq.n	800d20e <rclc_parameter_server_describe_service_callback+0xaa>
 800d172:	4693      	mov	fp, r2
 800d174:	2a00      	cmp	r2, #0
 800d176:	d04a      	beq.n	800d20e <rclc_parameter_server_describe_service_callback+0xaa>
 800d178:	6843      	ldr	r3, [r0, #4]
 800d17a:	688a      	ldr	r2, [r1, #8]
 800d17c:	4293      	cmp	r3, r2
 800d17e:	4606      	mov	r6, r0
 800d180:	d858      	bhi.n	800d234 <rclc_parameter_server_describe_service_callback+0xd0>
 800d182:	604b      	str	r3, [r1, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d042      	beq.n	800d20e <rclc_parameter_server_describe_service_callback+0xaa>
 800d188:	2400      	movs	r4, #0
 800d18a:	f10b 0aa8 	add.w	sl, fp, #168	@ 0xa8
 800d18e:	4627      	mov	r7, r4
 800d190:	e011      	b.n	800d1b6 <rclc_parameter_server_describe_service_callback+0x52>
 800d192:	6831      	ldr	r1, [r6, #0]
 800d194:	440b      	add	r3, r1
 800d196:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
 800d19a:	f842 102e 	str.w	r1, [r2, lr, lsl #2]
 800d19e:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
 800d1a2:	e9c5 2301 	strd	r2, r3, [r5, #4]
 800d1a6:	f8db 30b8 	ldr.w	r3, [fp, #184]	@ 0xb8
 800d1aa:	4298      	cmp	r0, r3
 800d1ac:	d321      	bcc.n	800d1f2 <rclc_parameter_server_describe_service_callback+0x8e>
 800d1ae:	6873      	ldr	r3, [r6, #4]
 800d1b0:	3401      	adds	r4, #1
 800d1b2:	429c      	cmp	r4, r3
 800d1b4:	d22b      	bcs.n	800d20e <rclc_parameter_server_describe_service_callback+0xaa>
 800d1b6:	6833      	ldr	r3, [r6, #0]
 800d1b8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800d1bc:	4650      	mov	r0, sl
 800d1be:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800d1c2:	f001 f9dd 	bl	800e580 <rclc_parameter_search_index>
 800d1c6:	f8d9 2000 	ldr.w	r2, [r9]
 800d1ca:	eb04 1e04 	add.w	lr, r4, r4, lsl #4
 800d1ce:	eb02 058e 	add.w	r5, r2, lr, lsl #2
 800d1d2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 800d1d6:	732f      	strb	r7, [r5, #12]
 800d1d8:	f89b c103 	ldrb.w	ip, [fp, #259]	@ 0x103
 800d1dc:	632f      	str	r7, [r5, #48]	@ 0x30
 800d1de:	63ef      	str	r7, [r5, #60]	@ 0x3c
 800d1e0:	f885 7028 	strb.w	r7, [r5, #40]	@ 0x28
 800d1e4:	f1bc 0f00 	cmp.w	ip, #0
 800d1e8:	d1d3      	bne.n	800d192 <rclc_parameter_server_describe_service_callback+0x2e>
 800d1ea:	f8db 30b8 	ldr.w	r3, [fp, #184]	@ 0xb8
 800d1ee:	4298      	cmp	r0, r3
 800d1f0:	d20f      	bcs.n	800d212 <rclc_parameter_server_describe_service_callback+0xae>
 800d1f2:	f8db 30b4 	ldr.w	r3, [fp, #180]	@ 0xb4
 800d1f6:	eb00 1100 	add.w	r1, r0, r0, lsl #4
 800d1fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d1fe:	4662      	mov	r2, ip
 800d200:	4628      	mov	r0, r5
 800d202:	f001 f935 	bl	800e470 <rclc_parameter_descriptor_copy>
 800d206:	6873      	ldr	r3, [r6, #4]
 800d208:	3401      	adds	r4, #1
 800d20a:	429c      	cmp	r4, r3
 800d20c:	d3d3      	bcc.n	800d1b6 <rclc_parameter_server_describe_service_callback+0x52>
 800d20e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d212:	6833      	ldr	r3, [r6, #0]
 800d214:	4628      	mov	r0, r5
 800d216:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800d21a:	f001 f9cb 	bl	800e5b4 <rclc_parameter_set_string>
 800d21e:	4908      	ldr	r1, [pc, #32]	@ (800d240 <rclc_parameter_server_describe_service_callback+0xdc>)
 800d220:	f105 0010 	add.w	r0, r5, #16
 800d224:	f001 f9c6 	bl	800e5b4 <rclc_parameter_set_string>
 800d228:	4905      	ldr	r1, [pc, #20]	@ (800d240 <rclc_parameter_server_describe_service_callback+0xdc>)
 800d22a:	f105 001c 	add.w	r0, r5, #28
 800d22e:	f001 f9c1 	bl	800e5b4 <rclc_parameter_set_string>
 800d232:	e7bc      	b.n	800d1ae <rclc_parameter_server_describe_service_callback+0x4a>
 800d234:	2300      	movs	r3, #0
 800d236:	604b      	str	r3, [r1, #4]
 800d238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	080234b8 	.word	0x080234b8

0800d244 <rclc_parameter_server_list_service_callback>:
 800d244:	2900      	cmp	r1, #0
 800d246:	d03c      	beq.n	800d2c2 <rclc_parameter_server_list_service_callback+0x7e>
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24a:	4617      	mov	r7, r2
 800d24c:	b342      	cbz	r2, 800d2a0 <rclc_parameter_server_list_service_callback+0x5c>
 800d24e:	f8d2 30ac 	ldr.w	r3, [r2, #172]	@ 0xac
 800d252:	604b      	str	r3, [r1, #4]
 800d254:	460e      	mov	r6, r1
 800d256:	b31b      	cbz	r3, 800d2a0 <rclc_parameter_server_list_service_callback+0x5c>
 800d258:	2500      	movs	r5, #0
 800d25a:	462c      	mov	r4, r5
 800d25c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800d260:	b1fb      	cbz	r3, 800d2a2 <rclc_parameter_server_list_service_callback+0x5e>
 800d262:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800d266:	6837      	ldr	r7, [r6, #0]
 800d268:	6876      	ldr	r6, [r6, #4]
 800d26a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d26e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800d272:	443d      	add	r5, r7
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	606a      	str	r2, [r5, #4]
 800d278:	1c63      	adds	r3, r4, #1
 800d27a:	429e      	cmp	r6, r3
 800d27c:	d910      	bls.n	800d2a0 <rclc_parameter_server_list_service_callback+0x5c>
 800d27e:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800d282:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d286:	0109      	lsls	r1, r1, #4
 800d288:	0092      	lsls	r2, r2, #2
 800d28a:	1845      	adds	r5, r0, r1
 800d28c:	18bc      	adds	r4, r7, r2
 800d28e:	3301      	adds	r3, #1
 800d290:	686d      	ldr	r5, [r5, #4]
 800d292:	6065      	str	r5, [r4, #4]
 800d294:	429e      	cmp	r6, r3
 800d296:	f101 0170 	add.w	r1, r1, #112	@ 0x70
 800d29a:	f102 020c 	add.w	r2, r2, #12
 800d29e:	d8f4      	bhi.n	800d28a <rclc_parameter_server_list_service_callback+0x46>
 800d2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2a2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800d2a6:	011b      	lsls	r3, r3, #4
 800d2a8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d2ac:	6830      	ldr	r0, [r6, #0]
 800d2ae:	58d1      	ldr	r1, [r2, r3]
 800d2b0:	4428      	add	r0, r5
 800d2b2:	f001 f97f 	bl	800e5b4 <rclc_parameter_set_string>
 800d2b6:	6873      	ldr	r3, [r6, #4]
 800d2b8:	3401      	adds	r4, #1
 800d2ba:	429c      	cmp	r4, r3
 800d2bc:	d2f0      	bcs.n	800d2a0 <rclc_parameter_server_list_service_callback+0x5c>
 800d2be:	350c      	adds	r5, #12
 800d2c0:	e7cc      	b.n	800d25c <rclc_parameter_server_list_service_callback+0x18>
 800d2c2:	4770      	bx	lr

0800d2c4 <rclc_parameter_server_get_types_service_callback>:
 800d2c4:	b338      	cbz	r0, 800d316 <rclc_parameter_server_get_types_service_callback+0x52>
 800d2c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	b1d1      	cbz	r1, 800d302 <rclc_parameter_server_get_types_service_callback+0x3e>
 800d2cc:	b1ca      	cbz	r2, 800d302 <rclc_parameter_server_get_types_service_callback+0x3e>
 800d2ce:	6843      	ldr	r3, [r0, #4]
 800d2d0:	6889      	ldr	r1, [r1, #8]
 800d2d2:	428b      	cmp	r3, r1
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	d81b      	bhi.n	800d310 <rclc_parameter_server_get_types_service_callback+0x4c>
 800d2d8:	606b      	str	r3, [r5, #4]
 800d2da:	b193      	cbz	r3, 800d302 <rclc_parameter_server_get_types_service_callback+0x3e>
 800d2dc:	f102 07a8 	add.w	r7, r2, #168	@ 0xa8
 800d2e0:	2400      	movs	r4, #0
 800d2e2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d2e6:	6832      	ldr	r2, [r6, #0]
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d2ee:	f001 f92b 	bl	800e548 <rclc_parameter_search>
 800d2f2:	682b      	ldr	r3, [r5, #0]
 800d2f4:	b130      	cbz	r0, 800d304 <rclc_parameter_server_get_types_service_callback+0x40>
 800d2f6:	7c02      	ldrb	r2, [r0, #16]
 800d2f8:	551a      	strb	r2, [r3, r4]
 800d2fa:	686b      	ldr	r3, [r5, #4]
 800d2fc:	3401      	adds	r4, #1
 800d2fe:	42a3      	cmp	r3, r4
 800d300:	d8ef      	bhi.n	800d2e2 <rclc_parameter_server_get_types_service_callback+0x1e>
 800d302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d304:	5518      	strb	r0, [r3, r4]
 800d306:	686b      	ldr	r3, [r5, #4]
 800d308:	3401      	adds	r4, #1
 800d30a:	429c      	cmp	r4, r3
 800d30c:	d3e9      	bcc.n	800d2e2 <rclc_parameter_server_get_types_service_callback+0x1e>
 800d30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d310:	2300      	movs	r3, #0
 800d312:	606b      	str	r3, [r5, #4]
 800d314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d316:	4770      	bx	lr

0800d318 <rclc_parameter_server_get_service_callback>:
 800d318:	2800      	cmp	r0, #0
 800d31a:	d038      	beq.n	800d38e <rclc_parameter_server_get_service_callback+0x76>
 800d31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d320:	460e      	mov	r6, r1
 800d322:	b371      	cbz	r1, 800d382 <rclc_parameter_server_get_service_callback+0x6a>
 800d324:	b36a      	cbz	r2, 800d382 <rclc_parameter_server_get_service_callback+0x6a>
 800d326:	6843      	ldr	r3, [r0, #4]
 800d328:	6889      	ldr	r1, [r1, #8]
 800d32a:	428b      	cmp	r3, r1
 800d32c:	4680      	mov	r8, r0
 800d32e:	d82a      	bhi.n	800d386 <rclc_parameter_server_get_service_callback+0x6e>
 800d330:	f8d2 10ac 	ldr.w	r1, [r2, #172]	@ 0xac
 800d334:	428b      	cmp	r3, r1
 800d336:	bf28      	it	cs
 800d338:	460b      	movcs	r3, r1
 800d33a:	4699      	mov	r9, r3
 800d33c:	6073      	str	r3, [r6, #4]
 800d33e:	b303      	cbz	r3, 800d382 <rclc_parameter_server_get_service_callback+0x6a>
 800d340:	2400      	movs	r4, #0
 800d342:	f102 07a8 	add.w	r7, r2, #168	@ 0xa8
 800d346:	4625      	mov	r5, r4
 800d348:	e009      	b.n	800d35e <rclc_parameter_server_get_service_callback+0x46>
 800d34a:	6830      	ldr	r0, [r6, #0]
 800d34c:	3501      	adds	r5, #1
 800d34e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800d352:	f001 f833 	bl	800e3bc <rclc_parameter_value_copy>
 800d356:	45a9      	cmp	r9, r5
 800d358:	f104 040c 	add.w	r4, r4, #12
 800d35c:	d011      	beq.n	800d382 <rclc_parameter_server_get_service_callback+0x6a>
 800d35e:	f8d8 3000 	ldr.w	r3, [r8]
 800d362:	4638      	mov	r0, r7
 800d364:	5919      	ldr	r1, [r3, r4]
 800d366:	f001 f8ef 	bl	800e548 <rclc_parameter_search>
 800d36a:	f100 0110 	add.w	r1, r0, #16
 800d36e:	2800      	cmp	r0, #0
 800d370:	d1eb      	bne.n	800d34a <rclc_parameter_server_get_service_callback+0x32>
 800d372:	6833      	ldr	r3, [r6, #0]
 800d374:	3501      	adds	r5, #1
 800d376:	45a9      	cmp	r9, r5
 800d378:	f803 0034 	strb.w	r0, [r3, r4, lsl #3]
 800d37c:	f104 040c 	add.w	r4, r4, #12
 800d380:	d1ed      	bne.n	800d35e <rclc_parameter_server_get_service_callback+0x46>
 800d382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d386:	2300      	movs	r3, #0
 800d388:	6073      	str	r3, [r6, #4]
 800d38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38e:	4770      	bx	lr

0800d390 <init_parameter_server_memory.part.0>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	b083      	sub	sp, #12
 800d396:	4690      	mov	r8, r2
 800d398:	4604      	mov	r4, r0
 800d39a:	468a      	mov	sl, r1
 800d39c:	30a8      	adds	r0, #168	@ 0xa8
 800d39e:	6851      	ldr	r1, [r2, #4]
 800d3a0:	f8cd a004 	str.w	sl, [sp, #4]
 800d3a4:	f00b fca4 	bl	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 800d3a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3ac:	2500      	movs	r5, #0
 800d3ae:	4607      	mov	r7, r0
 800d3b0:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
 800d3b4:	b173      	cbz	r3, 800d3d4 <init_parameter_server_memory.part.0+0x44>
 800d3b6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800d3ba:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800d3be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800d3c2:	f001 f963 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d3c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3ca:	3501      	adds	r5, #1
 800d3cc:	4038      	ands	r0, r7
 800d3ce:	429d      	cmp	r5, r3
 800d3d0:	b2c7      	uxtb	r7, r0
 800d3d2:	d3f0      	bcc.n	800d3b6 <init_parameter_server_memory.part.0+0x26>
 800d3d4:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 800d3d8:	f00b fbac 	bl	8018b34 <rcl_interfaces__srv__ListParameters_Request__init>
 800d3dc:	f104 0978 	add.w	r9, r4, #120	@ 0x78
 800d3e0:	4007      	ands	r7, r0
 800d3e2:	4648      	mov	r0, r9
 800d3e4:	f00b fbbc 	bl	8018b60 <rcl_interfaces__srv__ListParameters_Response__init>
 800d3e8:	b2fd      	uxtb	r5, r7
 800d3ea:	4005      	ands	r5, r0
 800d3ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	f002 f98b 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 800d3f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3fa:	ea05 0600 	and.w	r6, r5, r0
 800d3fe:	2500      	movs	r5, #0
 800d400:	67e5      	str	r5, [r4, #124]	@ 0x7c
 800d402:	b16b      	cbz	r3, 800d420 <init_parameter_server_memory.part.0+0x90>
 800d404:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d406:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d40a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d40e:	f001 f93d 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d412:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d416:	3501      	adds	r5, #1
 800d418:	429d      	cmp	r5, r3
 800d41a:	ea06 0600 	and.w	r6, r6, r0
 800d41e:	d3f1      	bcc.n	800d404 <init_parameter_server_memory.part.0+0x74>
 800d420:	f104 0b18 	add.w	fp, r4, #24
 800d424:	4658      	mov	r0, fp
 800d426:	f00b fb27 	bl	8018a78 <rcl_interfaces__srv__GetParameters_Request__init>
 800d42a:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 800d42e:	4006      	ands	r6, r0
 800d430:	4648      	mov	r0, r9
 800d432:	f00b fb37 	bl	8018aa4 <rcl_interfaces__srv__GetParameters_Response__init>
 800d436:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d43a:	4006      	ands	r6, r0
 800d43c:	4658      	mov	r0, fp
 800d43e:	f002 f965 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 800d442:	2500      	movs	r5, #0
 800d444:	b2f6      	uxtb	r6, r6
 800d446:	4006      	ands	r6, r0
 800d448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d44c:	61e5      	str	r5, [r4, #28]
 800d44e:	4648      	mov	r0, r9
 800d450:	f00c f820 	bl	8019494 <rcl_interfaces__msg__ParameterValue__Sequence__init>
 800d454:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d458:	62a5      	str	r5, [r4, #40]	@ 0x28
 800d45a:	4006      	ands	r6, r0
 800d45c:	b16b      	cbz	r3, 800d47a <init_parameter_server_memory.part.0+0xea>
 800d45e:	69a3      	ldr	r3, [r4, #24]
 800d460:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d464:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d468:	f001 f910 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d46c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d470:	3501      	adds	r5, #1
 800d472:	429d      	cmp	r5, r3
 800d474:	ea06 0600 	and.w	r6, r6, r0
 800d478:	d3f1      	bcc.n	800d45e <init_parameter_server_memory.part.0+0xce>
 800d47a:	f104 0b48 	add.w	fp, r4, #72	@ 0x48
 800d47e:	4658      	mov	r0, fp
 800d480:	f00c f84a 	bl	8019518 <rcl_interfaces__srv__SetParameters_Request__init>
 800d484:	f104 0954 	add.w	r9, r4, #84	@ 0x54
 800d488:	4006      	ands	r6, r0
 800d48a:	4648      	mov	r0, r9
 800d48c:	f00c f85a 	bl	8019544 <rcl_interfaces__srv__SetParameters_Response__init>
 800d490:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d494:	4006      	ands	r6, r0
 800d496:	4658      	mov	r0, fp
 800d498:	f00b fc2a 	bl	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 800d49c:	2500      	movs	r5, #0
 800d49e:	b2f6      	uxtb	r6, r6
 800d4a0:	ea06 0700 	and.w	r7, r6, r0
 800d4a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4a8:	64e5      	str	r5, [r4, #76]	@ 0x4c
 800d4aa:	4648      	mov	r0, r9
 800d4ac:	f00c f8bc 	bl	8019628 <rcl_interfaces__msg__SetParametersResult__Sequence__init>
 800d4b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4b4:	65a5      	str	r5, [r4, #88]	@ 0x58
 800d4b6:	4007      	ands	r7, r0
 800d4b8:	b1ab      	cbz	r3, 800d4e6 <init_parameter_server_memory.part.0+0x156>
 800d4ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d4bc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800d4c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800d4c4:	f001 f8e2 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d4c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	eb03 1005 	add.w	r0, r3, r5, lsl #4
 800d4d0:	3004      	adds	r0, #4
 800d4d2:	f001 f8db 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d4d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4da:	3501      	adds	r5, #1
 800d4dc:	4030      	ands	r0, r6
 800d4de:	429d      	cmp	r5, r3
 800d4e0:	ea07 0700 	and.w	r7, r7, r0
 800d4e4:	d3e9      	bcc.n	800d4ba <init_parameter_server_memory.part.0+0x12a>
 800d4e6:	f104 0b30 	add.w	fp, r4, #48	@ 0x30
 800d4ea:	4658      	mov	r0, fp
 800d4ec:	f00b fa98 	bl	8018a20 <rcl_interfaces__srv__GetParameterTypes_Request__init>
 800d4f0:	f104 093c 	add.w	r9, r4, #60	@ 0x3c
 800d4f4:	4007      	ands	r7, r0
 800d4f6:	4648      	mov	r0, r9
 800d4f8:	f00b faa8 	bl	8018a4c <rcl_interfaces__srv__GetParameterTypes_Response__init>
 800d4fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d500:	4007      	ands	r7, r0
 800d502:	4658      	mov	r0, fp
 800d504:	f002 f902 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 800d508:	2500      	movs	r5, #0
 800d50a:	b2fe      	uxtb	r6, r7
 800d50c:	4006      	ands	r6, r0
 800d50e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d512:	6365      	str	r5, [r4, #52]	@ 0x34
 800d514:	4648      	mov	r0, r9
 800d516:	f001 ffe5 	bl	800f4e4 <rosidl_runtime_c__uint8__Sequence__init>
 800d51a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d51e:	6425      	str	r5, [r4, #64]	@ 0x40
 800d520:	4006      	ands	r6, r0
 800d522:	b16b      	cbz	r3, 800d540 <init_parameter_server_memory.part.0+0x1b0>
 800d524:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d526:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d52a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d52e:	f001 f8ad 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d532:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d536:	3501      	adds	r5, #1
 800d538:	429d      	cmp	r5, r3
 800d53a:	ea06 0600 	and.w	r6, r6, r0
 800d53e:	d3f1      	bcc.n	800d524 <init_parameter_server_memory.part.0+0x194>
 800d540:	f104 0b90 	add.w	fp, r4, #144	@ 0x90
 800d544:	4658      	mov	r0, fp
 800d546:	f00b fa0d 	bl	8018964 <rcl_interfaces__srv__DescribeParameters_Request__init>
 800d54a:	f104 099c 	add.w	r9, r4, #156	@ 0x9c
 800d54e:	4006      	ands	r6, r0
 800d550:	4648      	mov	r0, r9
 800d552:	f00b fa1d 	bl	8018990 <rcl_interfaces__srv__DescribeParameters_Response__init>
 800d556:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d55a:	4006      	ands	r6, r0
 800d55c:	4658      	mov	r0, fp
 800d55e:	f002 f8d5 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 800d562:	f04f 0b00 	mov.w	fp, #0
 800d566:	b2f6      	uxtb	r6, r6
 800d568:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d56c:	f8c4 b094 	str.w	fp, [r4, #148]	@ 0x94
 800d570:	4006      	ands	r6, r0
 800d572:	4648      	mov	r0, r9
 800d574:	f00b fd30 	bl	8018fd8 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init>
 800d578:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d57c:	f8c4 b0a0 	str.w	fp, [r4, #160]	@ 0xa0
 800d580:	4006      	ands	r6, r0
 800d582:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 800d586:	f00b fd27 	bl	8018fd8 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init>
 800d58a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d58e:	f8c4 b0b8 	str.w	fp, [r4, #184]	@ 0xb8
 800d592:	ea06 0a00 	and.w	sl, r6, r0
 800d596:	2a00      	cmp	r2, #0
 800d598:	d073      	beq.n	800d682 <init_parameter_server_memory.part.0+0x2f2>
 800d59a:	46d9      	mov	r9, fp
 800d59c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800d5a0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
 800d5a4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d5a8:	f001 f870 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800d5b2:	eb0b 150b 	add.w	r5, fp, fp, lsl #4
 800d5b6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800d5ba:	f001 f867 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d5be:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800d5c2:	00ad      	lsls	r5, r5, #2
 800d5c4:	4006      	ands	r6, r0
 800d5c6:	1950      	adds	r0, r2, r5
 800d5c8:	3010      	adds	r0, #16
 800d5ca:	f001 f85f 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d5ce:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800d5d2:	b2f6      	uxtb	r6, r6
 800d5d4:	4006      	ands	r6, r0
 800d5d6:	1950      	adds	r0, r2, r5
 800d5d8:	301c      	adds	r0, #28
 800d5da:	f001 f857 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d5de:	4607      	mov	r7, r0
 800d5e0:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800d5e4:	4428      	add	r0, r5
 800d5e6:	2101      	movs	r1, #1
 800d5e8:	302c      	adds	r0, #44	@ 0x2c
 800d5ea:	f00b f9ed 	bl	80189c8 <rcl_interfaces__msg__FloatingPointRange__Sequence__init>
 800d5ee:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800d5f2:	442a      	add	r2, r5
 800d5f4:	2101      	movs	r1, #1
 800d5f6:	4037      	ands	r7, r6
 800d5f8:	f8c2 9030 	str.w	r9, [r2, #48]	@ 0x30
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	f102 0038 	add.w	r0, r2, #56	@ 0x38
 800d602:	f00b fa6b 	bl	8018adc <rcl_interfaces__msg__IntegerRange__Sequence__init>
 800d606:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800d60a:	403e      	ands	r6, r7
 800d60c:	442a      	add	r2, r5
 800d60e:	4607      	mov	r7, r0
 800d610:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800d614:	f8c2 903c 	str.w	r9, [r2, #60]	@ 0x3c
 800d618:	4428      	add	r0, r5
 800d61a:	f001 f837 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d61e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 800d622:	4037      	ands	r7, r6
 800d624:	4007      	ands	r7, r0
 800d626:	1950      	adds	r0, r2, r5
 800d628:	3010      	adds	r0, #16
 800d62a:	f001 f82f 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d62e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 800d632:	4007      	ands	r7, r0
 800d634:	1950      	adds	r0, r2, r5
 800d636:	301c      	adds	r0, #28
 800d638:	f001 f828 	bl	800e68c <rclc_parameter_descriptor_initialize_string>
 800d63c:	4606      	mov	r6, r0
 800d63e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800d642:	4428      	add	r0, r5
 800d644:	2101      	movs	r1, #1
 800d646:	302c      	adds	r0, #44	@ 0x2c
 800d648:	f00b f9be 	bl	80189c8 <rcl_interfaces__msg__FloatingPointRange__Sequence__init>
 800d64c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 800d650:	442a      	add	r2, r5
 800d652:	4037      	ands	r7, r6
 800d654:	2101      	movs	r1, #1
 800d656:	4606      	mov	r6, r0
 800d658:	f8c2 9030 	str.w	r9, [r2, #48]	@ 0x30
 800d65c:	f102 0038 	add.w	r0, r2, #56	@ 0x38
 800d660:	f00b fa3c 	bl	8018adc <rcl_interfaces__msg__IntegerRange__Sequence__init>
 800d664:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 800d668:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d66c:	403e      	ands	r6, r7
 800d66e:	442a      	add	r2, r5
 800d670:	f10b 0b01 	add.w	fp, fp, #1
 800d674:	4030      	ands	r0, r6
 800d676:	458b      	cmp	fp, r1
 800d678:	f8c2 903c 	str.w	r9, [r2, #60]	@ 0x3c
 800d67c:	ea0a 0a00 	and.w	sl, sl, r0
 800d680:	d38c      	bcc.n	800d59c <init_parameter_server_memory.part.0+0x20c>
 800d682:	f894 2101 	ldrb.w	r2, [r4, #257]	@ 0x101
 800d686:	b922      	cbnz	r2, 800d692 <init_parameter_server_memory.part.0+0x302>
 800d688:	f08a 0001 	eor.w	r0, sl, #1
 800d68c:	b003      	add	sp, #12
 800d68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d692:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 800d696:	f00b fcdd 	bl	8019054 <rcl_interfaces__msg__ParameterEvent__init>
 800d69a:	4605      	mov	r5, r0
 800d69c:	9801      	ldr	r0, [sp, #4]
 800d69e:	f009 f8eb 	bl	8016878 <rcl_node_get_name>
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 800d6a8:	f002 f806 	bl	800f6b8 <rosidl_runtime_c__String__assign>
 800d6ac:	4028      	ands	r0, r5
 800d6ae:	ea0a 0a00 	and.w	sl, sl, r0
 800d6b2:	f08a 0001 	eor.w	r0, sl, #1
 800d6b6:	b003      	add	sp, #12
 800d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6bc:	0000      	movs	r0, r0
	...

0800d6c0 <init_parameter_server_memory_low.part.0>:
 800d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	ed2d 8b02 	vpush	{d8}
 800d6c8:	b08b      	sub	sp, #44	@ 0x2c
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	a805      	add	r0, sp, #20
 800d6ce:	4616      	mov	r6, r2
 800d6d0:	9201      	str	r2, [sp, #4]
 800d6d2:	9103      	str	r1, [sp, #12]
 800d6d4:	f001 f81a 	bl	800e70c <rcutils_get_default_allocator>
 800d6d8:	e9dd 8b08 	ldrd	r8, fp, [sp, #32]
 800d6dc:	9b05      	ldr	r3, [sp, #20]
 800d6de:	6870      	ldr	r0, [r6, #4]
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	465a      	mov	r2, fp
 800d6e4:	2170      	movs	r1, #112	@ 0x70
 800d6e6:	47c0      	blx	r8
 800d6e8:	2500      	movs	r5, #0
 800d6ea:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800d6ee:	6870      	ldr	r0, [r6, #4]
 800d6f0:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 800d6f4:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
 800d6f8:	465a      	mov	r2, fp
 800d6fa:	2144      	movs	r1, #68	@ 0x44
 800d6fc:	47c0      	blx	r8
 800d6fe:	e9c4 052d 	strd	r0, r5, [r4, #180]	@ 0xb4
 800d702:	6870      	ldr	r0, [r6, #4]
 800d704:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc
 800d708:	2800      	cmp	r0, #0
 800d70a:	f000 811c 	beq.w	800d946 <init_parameter_server_memory_low.part.0+0x286>
 800d70e:	46a9      	mov	r9, r5
 800d710:	462e      	mov	r6, r5
 800d712:	f04f 0a01 	mov.w	sl, #1
 800d716:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800d71a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800d71e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800d722:	2132      	movs	r1, #50	@ 0x32
 800d724:	011d      	lsls	r5, r3, #4
 800d726:	f000 ff93 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d72a:	4607      	mov	r7, r0
 800d72c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800d730:	4428      	add	r0, r5
 800d732:	2101      	movs	r1, #1
 800d734:	3028      	adds	r0, #40	@ 0x28
 800d736:	f000 ff8b 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d73a:	4603      	mov	r3, r0
 800d73c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800d740:	eb06 1506 	add.w	r5, r6, r6, lsl #4
 800d744:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800d748:	2101      	movs	r1, #1
 800d74a:	3010      	adds	r0, #16
 800d74c:	431f      	orrs	r7, r3
 800d74e:	f000 ff7f 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d752:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800d756:	00ad      	lsls	r5, r5, #2
 800d758:	4307      	orrs	r7, r0
 800d75a:	1958      	adds	r0, r3, r5
 800d75c:	2101      	movs	r1, #1
 800d75e:	301c      	adds	r0, #28
 800d760:	f000 ff76 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d764:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800d768:	4338      	orrs	r0, r7
 800d76a:	465a      	mov	r2, fp
 800d76c:	210c      	movs	r1, #12
 800d76e:	ea49 0900 	orr.w	r9, r9, r0
 800d772:	2001      	movs	r0, #1
 800d774:	195f      	adds	r7, r3, r5
 800d776:	47c0      	blx	r8
 800d778:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800d77c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d77e:	195f      	adds	r7, r3, r5
 800d780:	2300      	movs	r3, #0
 800d782:	e9c7 3a0c 	strd	r3, sl, [r7, #48]	@ 0x30
 800d786:	210c      	movs	r1, #12
 800d788:	465a      	mov	r2, fp
 800d78a:	2001      	movs	r0, #1
 800d78c:	47c0      	blx	r8
 800d78e:	9b01      	ldr	r3, [sp, #4]
 800d790:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800d794:	63b8      	str	r0, [r7, #56]	@ 0x38
 800d796:	6858      	ldr	r0, [r3, #4]
 800d798:	440d      	add	r5, r1
 800d79a:	3601      	adds	r6, #1
 800d79c:	2300      	movs	r3, #0
 800d79e:	4286      	cmp	r6, r0
 800d7a0:	f8c5 a040 	str.w	sl, [r5, #64]	@ 0x40
 800d7a4:	63eb      	str	r3, [r5, #60]	@ 0x3c
 800d7a6:	d3b6      	bcc.n	800d716 <init_parameter_server_memory_low.part.0+0x56>
 800d7a8:	2500      	movs	r5, #0
 800d7aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d7ae:	9b02      	ldr	r3, [sp, #8]
 800d7b0:	66a5      	str	r5, [r4, #104]	@ 0x68
 800d7b2:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 800d7b6:	0080      	lsls	r0, r0, #2
 800d7b8:	4659      	mov	r1, fp
 800d7ba:	4798      	blx	r3
 800d7bc:	9b01      	ldr	r3, [sp, #4]
 800d7be:	67e5      	str	r5, [r4, #124]	@ 0x7c
 800d7c0:	685f      	ldr	r7, [r3, #4]
 800d7c2:	f8c4 7080 	str.w	r7, [r4, #128]	@ 0x80
 800d7c6:	67a0      	str	r0, [r4, #120]	@ 0x78
 800d7c8:	b187      	cbz	r7, 800d7ec <init_parameter_server_memory_low.part.0+0x12c>
 800d7ca:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800d7ce:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800d7d2:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 800d7d6:	e9d3 5100 	ldrd	r5, r1, [r3]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	6082      	str	r2, [r0, #8]
 800d7de:	3370      	adds	r3, #112	@ 0x70
 800d7e0:	429f      	cmp	r7, r3
 800d7e2:	e9c0 5100 	strd	r5, r1, [r0]
 800d7e6:	f100 000c 	add.w	r0, r0, #12
 800d7ea:	d1f4      	bne.n	800d7d6 <init_parameter_server_memory_low.part.0+0x116>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	2600      	movs	r6, #0
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
 800d7f6:	9f02      	ldr	r7, [sp, #8]
 800d7f8:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	200c      	movs	r0, #12
 800d800:	47b8      	blx	r7
 800d802:	2501      	movs	r5, #1
 800d804:	2132      	movs	r1, #50	@ 0x32
 800d806:	e9c4 0606 	strd	r0, r6, [r4, #24]
 800d80a:	6225      	str	r5, [r4, #32]
 800d80c:	f000 ff20 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d810:	465a      	mov	r2, fp
 800d812:	4607      	mov	r7, r0
 800d814:	2160      	movs	r1, #96	@ 0x60
 800d816:	4628      	mov	r0, r5
 800d818:	47c0      	blx	r8
 800d81a:	ed9f 8b4d 	vldr	d8, [pc, #308]	@ 800d950 <init_parameter_server_memory_low.part.0+0x290>
 800d81e:	6260      	str	r0, [r4, #36]	@ 0x24
 800d820:	4629      	mov	r1, r5
 800d822:	ed84 8b0a 	vstr	d8, [r4, #40]	@ 0x28
 800d826:	3018      	adds	r0, #24
 800d828:	f000 ff12 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d82c:	4338      	orrs	r0, r7
 800d82e:	465a      	mov	r2, fp
 800d830:	ea40 0909 	orr.w	r9, r0, r9
 800d834:	2170      	movs	r1, #112	@ 0x70
 800d836:	4628      	mov	r0, r5
 800d838:	47c0      	blx	r8
 800d83a:	2132      	movs	r1, #50	@ 0x32
 800d83c:	e9c4 0612 	strd	r0, r6, [r4, #72]	@ 0x48
 800d840:	6525      	str	r5, [r4, #80]	@ 0x50
 800d842:	f000 ff05 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d846:	465a      	mov	r2, fp
 800d848:	ea49 0900 	orr.w	r9, r9, r0
 800d84c:	2110      	movs	r1, #16
 800d84e:	4628      	mov	r0, r5
 800d850:	47c0      	blx	r8
 800d852:	2119      	movs	r1, #25
 800d854:	6560      	str	r0, [r4, #84]	@ 0x54
 800d856:	ed84 8b16 	vstr	d8, [r4, #88]	@ 0x58
 800d85a:	3004      	adds	r0, #4
 800d85c:	f000 fef8 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d860:	9f02      	ldr	r7, [sp, #8]
 800d862:	ea49 0900 	orr.w	r9, r9, r0
 800d866:	4659      	mov	r1, fp
 800d868:	200c      	movs	r0, #12
 800d86a:	47b8      	blx	r7
 800d86c:	2132      	movs	r1, #50	@ 0x32
 800d86e:	e9c4 060c 	strd	r0, r6, [r4, #48]	@ 0x30
 800d872:	63a5      	str	r5, [r4, #56]	@ 0x38
 800d874:	f000 feec 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d878:	465a      	mov	r2, fp
 800d87a:	ea49 0900 	orr.w	r9, r9, r0
 800d87e:	4629      	mov	r1, r5
 800d880:	4628      	mov	r0, r5
 800d882:	47c0      	blx	r8
 800d884:	4659      	mov	r1, fp
 800d886:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800d888:	ed84 8b10 	vstr	d8, [r4, #64]	@ 0x40
 800d88c:	200c      	movs	r0, #12
 800d88e:	47b8      	blx	r7
 800d890:	2132      	movs	r1, #50	@ 0x32
 800d892:	e9c4 0624 	strd	r0, r6, [r4, #144]	@ 0x90
 800d896:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
 800d89a:	f000 fed9 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d89e:	465a      	mov	r2, fp
 800d8a0:	ea49 0900 	orr.w	r9, r9, r0
 800d8a4:	2144      	movs	r1, #68	@ 0x44
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	47c0      	blx	r8
 800d8aa:	2132      	movs	r1, #50	@ 0x32
 800d8ac:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c
 800d8b0:	ed84 8b28 	vstr	d8, [r4, #160]	@ 0xa0
 800d8b4:	3010      	adds	r0, #16
 800d8b6:	f000 fecb 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d8ba:	ea49 0900 	orr.w	r9, r9, r0
 800d8be:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	301c      	adds	r0, #28
 800d8c6:	f000 fec3 	bl	800e650 <rclc_parameter_initialize_empty_string>
 800d8ca:	465a      	mov	r2, fp
 800d8cc:	ea49 0700 	orr.w	r7, r9, r0
 800d8d0:	210c      	movs	r1, #12
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f8d4 909c 	ldr.w	r9, [r4, #156]	@ 0x9c
 800d8d8:	47c0      	blx	r8
 800d8da:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 800d8de:	f8d4 909c 	ldr.w	r9, [r4, #156]	@ 0x9c
 800d8e2:	465a      	mov	r2, fp
 800d8e4:	e9c9 650c 	strd	r6, r5, [r9, #48]	@ 0x30
 800d8e8:	210c      	movs	r1, #12
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	47c0      	blx	r8
 800d8ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800d8f2:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 800d8f6:	e9c3 650f 	strd	r6, r5, [r3, #60]	@ 0x3c
 800d8fa:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 800d8fe:	b92b      	cbnz	r3, 800d90c <init_parameter_server_memory_low.part.0+0x24c>
 800d900:	4638      	mov	r0, r7
 800d902:	b00b      	add	sp, #44	@ 0x2c
 800d904:	ecbd 8b02 	vpop	{d8}
 800d908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d910:	4640      	mov	r0, r8
 800d912:	f008 ffb1 	bl	8016878 <rcl_node_get_name>
 800d916:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
 800d91a:	4640      	mov	r0, r8
 800d91c:	f008 ffac 	bl	8016878 <rcl_node_get_name>
 800d920:	f7f2 fc6e 	bl	8000200 <strlen>
 800d924:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 800d928:	4428      	add	r0, r5
 800d92a:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 800d92e:	4638      	mov	r0, r7
 800d930:	e9c4 6539 	strd	r6, r5, [r4, #228]	@ 0xe4
 800d934:	ed84 8b36 	vstr	d8, [r4, #216]	@ 0xd8
 800d938:	ed84 8b3c 	vstr	d8, [r4, #240]	@ 0xf0
 800d93c:	b00b      	add	sp, #44	@ 0x2c
 800d93e:	ecbd 8b02 	vpop	{d8}
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d946:	4681      	mov	r9, r0
 800d948:	e72e      	b.n	800d7a8 <init_parameter_server_memory_low.part.0+0xe8>
 800d94a:	bf00      	nop
 800d94c:	f3af 8000 	nop.w
 800d950:	00000000 	.word	0x00000000
 800d954:	00000001 	.word	0x00000001

0800d958 <rclc_delete_parameter.part.0>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	4604      	mov	r4, r0
 800d95e:	b083      	sub	sp, #12
 800d960:	30a8      	adds	r0, #168	@ 0xa8
 800d962:	f000 fe0d 	bl	800e580 <rclc_parameter_search_index>
 800d966:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800d96a:	4298      	cmp	r0, r3
 800d96c:	d272      	bcs.n	800da54 <rclc_delete_parameter.part.0+0xfc>
 800d96e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800d972:	ebc0 09c0 	rsb	r9, r0, r0, lsl #3
 800d976:	ea4f 1709 	mov.w	r7, r9, lsl #4
 800d97a:	eb03 1909 	add.w	r9, r3, r9, lsl #4
 800d97e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800d982:	eb00 1500 	add.w	r5, r0, r0, lsl #4
 800d986:	eb03 0885 	add.w	r8, r3, r5, lsl #2
 800d98a:	f894 3101 	ldrb.w	r3, [r4, #257]	@ 0x101
 800d98e:	4606      	mov	r6, r0
 800d990:	00ad      	lsls	r5, r5, #2
 800d992:	2b00      	cmp	r3, #0
 800d994:	d13f      	bne.n	800da16 <rclc_delete_parameter.part.0+0xbe>
 800d996:	4934      	ldr	r1, [pc, #208]	@ (800da68 <rclc_delete_parameter.part.0+0x110>)
 800d998:	4648      	mov	r0, r9
 800d99a:	f000 fe0b 	bl	800e5b4 <rclc_parameter_set_string>
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f889 3010 	strb.w	r3, [r9, #16]
 800d9a4:	f888 300c 	strb.w	r3, [r8, #12]
 800d9a8:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
 800d9ac:	f8c8 303c 	str.w	r3, [r8, #60]	@ 0x3c
 800d9b0:	f894 3103 	ldrb.w	r3, [r4, #259]	@ 0x103
 800d9b4:	b9fb      	cbnz	r3, 800d9f6 <rclc_delete_parameter.part.0+0x9e>
 800d9b6:	492c      	ldr	r1, [pc, #176]	@ (800da68 <rclc_delete_parameter.part.0+0x110>)
 800d9b8:	f108 0010 	add.w	r0, r8, #16
 800d9bc:	f000 fdfa 	bl	800e5b4 <rclc_parameter_set_string>
 800d9c0:	4929      	ldr	r1, [pc, #164]	@ (800da68 <rclc_delete_parameter.part.0+0x110>)
 800d9c2:	f108 001c 	add.w	r0, r8, #28
 800d9c6:	f000 fdf5 	bl	800e5b4 <rclc_parameter_set_string>
 800d9ca:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	429e      	cmp	r6, r3
 800d9d2:	d215      	bcs.n	800da00 <rclc_delete_parameter.part.0+0xa8>
 800d9d4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800d9d8:	19c8      	adds	r0, r1, r7
 800d9da:	3770      	adds	r7, #112	@ 0x70
 800d9dc:	4439      	add	r1, r7
 800d9de:	f000 fd0f 	bl	800e400 <rclc_parameter_copy>
 800d9e2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 800d9e6:	f894 2103 	ldrb.w	r2, [r4, #259]	@ 0x103
 800d9ea:	1948      	adds	r0, r1, r5
 800d9ec:	3544      	adds	r5, #68	@ 0x44
 800d9ee:	4429      	add	r1, r5
 800d9f0:	3601      	adds	r6, #1
 800d9f2:	f000 fd3d 	bl	800e470 <rclc_parameter_descriptor_copy>
 800d9f6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	429e      	cmp	r6, r3
 800d9fe:	d3e9      	bcc.n	800d9d4 <rclc_delete_parameter.part.0+0x7c>
 800da00:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 800da04:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 800da08:	3a01      	subs	r2, #1
 800da0a:	2000      	movs	r0, #0
 800da0c:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
 800da10:	b003      	add	sp, #12
 800da12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da16:	f104 0bc0 	add.w	fp, r4, #192	@ 0xc0
 800da1a:	4649      	mov	r1, r9
 800da1c:	4658      	mov	r0, fp
 800da1e:	f000 fe05 	bl	800e62c <rclc_parameter_prepare_deleted_event>
 800da22:	4668      	mov	r0, sp
 800da24:	f000 fec0 	bl	800e7a8 <rcutils_system_time_now>
 800da28:	e9dd a100 	ldrd	sl, r1, [sp]
 800da2c:	a30c      	add	r3, pc, #48	@ (adr r3, 800da60 <rclc_delete_parameter.part.0+0x108>)
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	4650      	mov	r0, sl
 800da34:	f7f3 f8f2 	bl	8000c1c <__aeabi_ldivmod>
 800da38:	4b0c      	ldr	r3, [pc, #48]	@ (800da6c <rclc_delete_parameter.part.0+0x114>)
 800da3a:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800da3e:	fb03 a300 	mla	r3, r3, r0, sl
 800da42:	4659      	mov	r1, fp
 800da44:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800da48:	2200      	movs	r2, #0
 800da4a:	f104 0014 	add.w	r0, r4, #20
 800da4e:	f7fe fb2b 	bl	800c0a8 <rcl_publish>
 800da52:	e7a0      	b.n	800d996 <rclc_delete_parameter.part.0+0x3e>
 800da54:	2001      	movs	r0, #1
 800da56:	b003      	add	sp, #12
 800da58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5c:	f3af 8000 	nop.w
 800da60:	3b9aca00 	.word	0x3b9aca00
 800da64:	00000000 	.word	0x00000000
 800da68:	080234b8 	.word	0x080234b8
 800da6c:	c4653600 	.word	0xc4653600

0800da70 <rclc_parameter_server_init_with_option.part.0>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	b085      	sub	sp, #20
 800da76:	4604      	mov	r4, r0
 800da78:	460d      	mov	r5, r1
 800da7a:	4617      	mov	r7, r2
 800da7c:	f00b fe40 	bl	8019700 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters>
 800da80:	2800      	cmp	r0, #0
 800da82:	f000 813b 	beq.w	800dcfc <rclc_parameter_server_init_with_option.part.0+0x28c>
 800da86:	4681      	mov	r9, r0
 800da88:	4628      	mov	r0, r5
 800da8a:	f008 fef5 	bl	8016878 <rcl_node_get_name>
 800da8e:	f8df 8294 	ldr.w	r8, [pc, #660]	@ 800dd24 <rclc_parameter_server_init_with_option.part.0+0x2b4>
 800da92:	4606      	mov	r6, r0
 800da94:	2232      	movs	r2, #50	@ 0x32
 800da96:	2100      	movs	r1, #0
 800da98:	4640      	mov	r0, r8
 800da9a:	f013 ff62 	bl	8021962 <memset>
 800da9e:	4630      	mov	r0, r6
 800daa0:	f7f2 fbae 	bl	8000200 <strlen>
 800daa4:	4631      	mov	r1, r6
 800daa6:	4682      	mov	sl, r0
 800daa8:	4602      	mov	r2, r0
 800daaa:	4e9c      	ldr	r6, [pc, #624]	@ (800dd1c <rclc_parameter_server_init_with_option.part.0+0x2ac>)
 800daac:	4640      	mov	r0, r8
 800daae:	f013 ffc0 	bl	8021a32 <memcpy>
 800dab2:	4b9b      	ldr	r3, [pc, #620]	@ (800dd20 <rclc_parameter_server_init_with_option.part.0+0x2b0>)
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dab8:	eb08 0c0a 	add.w	ip, r8, sl
 800dabc:	f848 000a 	str.w	r0, [r8, sl]
 800dac0:	f8cc 1004 	str.w	r1, [ip, #4]
 800dac4:	f8cc 2008 	str.w	r2, [ip, #8]
 800dac8:	f8cc 300c 	str.w	r3, [ip, #12]
 800dacc:	464a      	mov	r2, r9
 800dace:	4643      	mov	r3, r8
 800dad0:	4629      	mov	r1, r5
 800dad2:	4620      	mov	r0, r4
 800dad4:	f7ff fade 	bl	800d094 <rclc_service_init>
 800dad8:	9003      	str	r0, [sp, #12]
 800dada:	f00b fdf1 	bl	80196c0 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes>
 800dade:	f104 0804 	add.w	r8, r4, #4
 800dae2:	4682      	mov	sl, r0
 800dae4:	2800      	cmp	r0, #0
 800dae6:	f000 8113 	beq.w	800dd10 <rclc_parameter_server_init_with_option.part.0+0x2a0>
 800daea:	4628      	mov	r0, r5
 800daec:	f008 fec4 	bl	8016878 <rcl_node_get_name>
 800daf0:	4e8c      	ldr	r6, [pc, #560]	@ (800dd24 <rclc_parameter_server_init_with_option.part.0+0x2b4>)
 800daf2:	4683      	mov	fp, r0
 800daf4:	2232      	movs	r2, #50	@ 0x32
 800daf6:	2100      	movs	r1, #0
 800daf8:	4630      	mov	r0, r6
 800dafa:	f013 ff32 	bl	8021962 <memset>
 800dafe:	4658      	mov	r0, fp
 800db00:	f7f2 fb7e 	bl	8000200 <strlen>
 800db04:	4659      	mov	r1, fp
 800db06:	4681      	mov	r9, r0
 800db08:	4602      	mov	r2, r0
 800db0a:	4630      	mov	r0, r6
 800db0c:	f013 ff91 	bl	8021a32 <memcpy>
 800db10:	f8df c21c 	ldr.w	ip, [pc, #540]	@ 800dd30 <rclc_parameter_server_init_with_option.part.0+0x2c0>
 800db14:	4b82      	ldr	r3, [pc, #520]	@ (800dd20 <rclc_parameter_server_init_with_option.part.0+0x2b0>)
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db1c:	eb06 0e09 	add.w	lr, r6, r9
 800db20:	f846 0009 	str.w	r0, [r6, r9]
 800db24:	f8dc 0000 	ldr.w	r0, [ip]
 800db28:	f8ce 1004 	str.w	r1, [lr, #4]
 800db2c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800db30:	f8ce 2008 	str.w	r2, [lr, #8]
 800db34:	f8ce 300c 	str.w	r3, [lr, #12]
 800db38:	f8ce 0010 	str.w	r0, [lr, #16]
 800db3c:	f88e 1014 	strb.w	r1, [lr, #20]
 800db40:	4652      	mov	r2, sl
 800db42:	4633      	mov	r3, r6
 800db44:	4640      	mov	r0, r8
 800db46:	4629      	mov	r1, r5
 800db48:	f7ff faa4 	bl	800d094 <rclc_service_init>
 800db4c:	9b03      	ldr	r3, [sp, #12]
 800db4e:	4303      	orrs	r3, r0
 800db50:	9303      	str	r3, [sp, #12]
 800db52:	f00b fe2d 	bl	80197b0 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters>
 800db56:	f104 0a08 	add.w	sl, r4, #8
 800db5a:	4681      	mov	r9, r0
 800db5c:	2800      	cmp	r0, #0
 800db5e:	f000 80d9 	beq.w	800dd14 <rclc_parameter_server_init_with_option.part.0+0x2a4>
 800db62:	4628      	mov	r0, r5
 800db64:	f008 fe88 	bl	8016878 <rcl_node_get_name>
 800db68:	4e6e      	ldr	r6, [pc, #440]	@ (800dd24 <rclc_parameter_server_init_with_option.part.0+0x2b4>)
 800db6a:	4683      	mov	fp, r0
 800db6c:	2232      	movs	r2, #50	@ 0x32
 800db6e:	2100      	movs	r1, #0
 800db70:	4630      	mov	r0, r6
 800db72:	f013 fef6 	bl	8021962 <memset>
 800db76:	4658      	mov	r0, fp
 800db78:	f7f2 fb42 	bl	8000200 <strlen>
 800db7c:	4659      	mov	r1, fp
 800db7e:	4680      	mov	r8, r0
 800db80:	4602      	mov	r2, r0
 800db82:	4630      	mov	r0, r6
 800db84:	f013 ff55 	bl	8021a32 <memcpy>
 800db88:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 800dd34 <rclc_parameter_server_init_with_option.part.0+0x2c4>
 800db8c:	4b64      	ldr	r3, [pc, #400]	@ (800dd20 <rclc_parameter_server_init_with_option.part.0+0x2b0>)
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db94:	eb06 0e08 	add.w	lr, r6, r8
 800db98:	f846 0008 	str.w	r0, [r6, r8]
 800db9c:	f8ce 1004 	str.w	r1, [lr, #4]
 800dba0:	f8ce 2008 	str.w	r2, [lr, #8]
 800dba4:	f8ce 300c 	str.w	r3, [lr, #12]
 800dba8:	464a      	mov	r2, r9
 800dbaa:	4633      	mov	r3, r6
 800dbac:	4650      	mov	r0, sl
 800dbae:	4629      	mov	r1, r5
 800dbb0:	f7ff fa70 	bl	800d094 <rclc_service_init>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	4303      	orrs	r3, r0
 800dbb8:	9303      	str	r3, [sp, #12]
 800dbba:	f00b fdc1 	bl	8019740 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters>
 800dbbe:	f104 0b0c 	add.w	fp, r4, #12
 800dbc2:	4682      	mov	sl, r0
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	f000 80a7 	beq.w	800dd18 <rclc_parameter_server_init_with_option.part.0+0x2a8>
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f008 fe54 	bl	8016878 <rcl_node_get_name>
 800dbd0:	4e54      	ldr	r6, [pc, #336]	@ (800dd24 <rclc_parameter_server_init_with_option.part.0+0x2b4>)
 800dbd2:	4680      	mov	r8, r0
 800dbd4:	2232      	movs	r2, #50	@ 0x32
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	4630      	mov	r0, r6
 800dbda:	f013 fec2 	bl	8021962 <memset>
 800dbde:	4640      	mov	r0, r8
 800dbe0:	f7f2 fb0e 	bl	8000200 <strlen>
 800dbe4:	4641      	mov	r1, r8
 800dbe6:	4681      	mov	r9, r0
 800dbe8:	4602      	mov	r2, r0
 800dbea:	4630      	mov	r0, r6
 800dbec:	f013 ff21 	bl	8021a32 <memcpy>
 800dbf0:	f8df c144 	ldr.w	ip, [pc, #324]	@ 800dd38 <rclc_parameter_server_init_with_option.part.0+0x2c8>
 800dbf4:	4b4a      	ldr	r3, [pc, #296]	@ (800dd20 <rclc_parameter_server_init_with_option.part.0+0x2b0>)
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dbfc:	eb06 0e09 	add.w	lr, r6, r9
 800dc00:	f846 0009 	str.w	r0, [r6, r9]
 800dc04:	f8ce 300c 	str.w	r3, [lr, #12]
 800dc08:	f89c 3000 	ldrb.w	r3, [ip]
 800dc0c:	f8ce 1004 	str.w	r1, [lr, #4]
 800dc10:	f8ce 2008 	str.w	r2, [lr, #8]
 800dc14:	f88e 3010 	strb.w	r3, [lr, #16]
 800dc18:	4652      	mov	r2, sl
 800dc1a:	4633      	mov	r3, r6
 800dc1c:	4658      	mov	r0, fp
 800dc1e:	4629      	mov	r1, r5
 800dc20:	f7ff fa38 	bl	800d094 <rclc_service_init>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	4303      	orrs	r3, r0
 800dc28:	9303      	str	r3, [sp, #12]
 800dc2a:	f00b fd29 	bl	8019680 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters>
 800dc2e:	f104 0b10 	add.w	fp, r4, #16
 800dc32:	4682      	mov	sl, r0
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d05f      	beq.n	800dcf8 <rclc_parameter_server_init_with_option.part.0+0x288>
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f008 fe1d 	bl	8016878 <rcl_node_get_name>
 800dc3e:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 800dd24 <rclc_parameter_server_init_with_option.part.0+0x2b4>
 800dc42:	4606      	mov	r6, r0
 800dc44:	2232      	movs	r2, #50	@ 0x32
 800dc46:	2100      	movs	r1, #0
 800dc48:	4640      	mov	r0, r8
 800dc4a:	f013 fe8a 	bl	8021962 <memset>
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7f2 fad6 	bl	8000200 <strlen>
 800dc54:	4631      	mov	r1, r6
 800dc56:	4681      	mov	r9, r0
 800dc58:	4602      	mov	r2, r0
 800dc5a:	4640      	mov	r0, r8
 800dc5c:	f013 fee9 	bl	8021a32 <memcpy>
 800dc60:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800dd3c <rclc_parameter_server_init_with_option.part.0+0x2cc>
 800dc64:	4b2e      	ldr	r3, [pc, #184]	@ (800dd20 <rclc_parameter_server_init_with_option.part.0+0x2b0>)
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc6c:	eb08 0e09 	add.w	lr, r8, r9
 800dc70:	f848 0009 	str.w	r0, [r8, r9]
 800dc74:	f8dc 0000 	ldr.w	r0, [ip]
 800dc78:	f8ce 1004 	str.w	r1, [lr, #4]
 800dc7c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800dc80:	f8ce 2008 	str.w	r2, [lr, #8]
 800dc84:	f8ce 300c 	str.w	r3, [lr, #12]
 800dc88:	f8ce 0010 	str.w	r0, [lr, #16]
 800dc8c:	f88e 1014 	strb.w	r1, [lr, #20]
 800dc90:	4652      	mov	r2, sl
 800dc92:	4643      	mov	r3, r8
 800dc94:	4658      	mov	r0, fp
 800dc96:	4629      	mov	r1, r5
 800dc98:	f7ff f9fc 	bl	800d094 <rclc_service_init>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	783a      	ldrb	r2, [r7, #0]
 800dca0:	9e03      	ldr	r6, [sp, #12]
 800dca2:	f884 3100 	strb.w	r3, [r4, #256]	@ 0x100
 800dca6:	7a3b      	ldrb	r3, [r7, #8]
 800dca8:	f884 3102 	strb.w	r3, [r4, #258]	@ 0x102
 800dcac:	7a7b      	ldrb	r3, [r7, #9]
 800dcae:	f884 2101 	strb.w	r2, [r4, #257]	@ 0x101
 800dcb2:	4306      	orrs	r6, r0
 800dcb4:	f884 3103 	strb.w	r3, [r4, #259]	@ 0x103
 800dcb8:	b97a      	cbnz	r2, 800dcda <rclc_parameter_server_init_with_option.part.0+0x26a>
 800dcba:	463a      	mov	r2, r7
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	b12b      	cbz	r3, 800dcce <rclc_parameter_server_init_with_option.part.0+0x25e>
 800dcc2:	f7ff fcfd 	bl	800d6c0 <init_parameter_server_memory_low.part.0>
 800dcc6:	4330      	orrs	r0, r6
 800dcc8:	b005      	add	sp, #20
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	f7ff fb5f 	bl	800d390 <init_parameter_server_memory.part.0>
 800dcd2:	4330      	orrs	r0, r6
 800dcd4:	b005      	add	sp, #20
 800dcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcda:	f00b fd51 	bl	8019780 <rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent>
 800dcde:	4b12      	ldr	r3, [pc, #72]	@ (800dd28 <rclc_parameter_server_init_with_option.part.0+0x2b8>)
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	4602      	mov	r2, r0
 800dce4:	4b11      	ldr	r3, [pc, #68]	@ (800dd2c <rclc_parameter_server_init_with_option.part.0+0x2bc>)
 800dce6:	4629      	mov	r1, r5
 800dce8:	f104 0014 	add.w	r0, r4, #20
 800dcec:	f7ff f96a 	bl	800cfc4 <rclc_publisher_init>
 800dcf0:	f894 3103 	ldrb.w	r3, [r4, #259]	@ 0x103
 800dcf4:	4306      	orrs	r6, r0
 800dcf6:	e7e0      	b.n	800dcba <rclc_parameter_server_init_with_option.part.0+0x24a>
 800dcf8:	200b      	movs	r0, #11
 800dcfa:	e7cf      	b.n	800dc9c <rclc_parameter_server_init_with_option.part.0+0x22c>
 800dcfc:	230b      	movs	r3, #11
 800dcfe:	9303      	str	r3, [sp, #12]
 800dd00:	f00b fcde 	bl	80196c0 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes>
 800dd04:	f104 0804 	add.w	r8, r4, #4
 800dd08:	4682      	mov	sl, r0
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f47f aeed 	bne.w	800daea <rclc_parameter_server_init_with_option.part.0+0x7a>
 800dd10:	200b      	movs	r0, #11
 800dd12:	e71b      	b.n	800db4c <rclc_parameter_server_init_with_option.part.0+0xdc>
 800dd14:	200b      	movs	r0, #11
 800dd16:	e74d      	b.n	800dbb4 <rclc_parameter_server_init_with_option.part.0+0x144>
 800dd18:	200b      	movs	r0, #11
 800dd1a:	e783      	b.n	800dc24 <rclc_parameter_server_init_with_option.part.0+0x1b4>
 800dd1c:	08023228 	.word	0x08023228
 800dd20:	080233c8 	.word	0x080233c8
 800dd24:	20011ec0 	.word	0x20011ec0
 800dd28:	08023378 	.word	0x08023378
 800dd2c:	0802328c 	.word	0x0802328c
 800dd30:	08023238 	.word	0x08023238
 800dd34:	08023250 	.word	0x08023250
 800dd38:	08023260 	.word	0x08023260
 800dd3c:	08023274 	.word	0x08023274

0800dd40 <rclc_parameter_server_init_with_option>:
 800dd40:	b150      	cbz	r0, 800dd58 <rclc_parameter_server_init_with_option+0x18>
 800dd42:	b149      	cbz	r1, 800dd58 <rclc_parameter_server_init_with_option+0x18>
 800dd44:	b410      	push	{r4}
 800dd46:	b11a      	cbz	r2, 800dd50 <rclc_parameter_server_init_with_option+0x10>
 800dd48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd4c:	f7ff be90 	b.w	800da70 <rclc_parameter_server_init_with_option.part.0>
 800dd50:	200b      	movs	r0, #11
 800dd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	200b      	movs	r0, #11
 800dd5a:	4770      	bx	lr

0800dd5c <rclc_executor_add_parameter_server>:
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d04c      	beq.n	800ddfa <rclc_executor_add_parameter_server+0x9e>
 800dd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd62:	460c      	mov	r4, r1
 800dd64:	b083      	sub	sp, #12
 800dd66:	2900      	cmp	r1, #0
 800dd68:	d044      	beq.n	800ddf4 <rclc_executor_add_parameter_server+0x98>
 800dd6a:	4b25      	ldr	r3, [pc, #148]	@ (800de00 <rclc_executor_add_parameter_server+0xa4>)
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	e9c4 213e 	strd	r2, r1, [r4, #248]	@ 0xf8
 800dd72:	e9cd 3400 	strd	r3, r4, [sp]
 800dd76:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 800dd7a:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 800dd7e:	f104 010c 	add.w	r1, r4, #12
 800dd82:	4607      	mov	r7, r0
 800dd84:	f7fe fe06 	bl	800c994 <rclc_executor_add_service_with_context>
 800dd88:	4a1e      	ldr	r2, [pc, #120]	@ (800de04 <rclc_executor_add_parameter_server+0xa8>)
 800dd8a:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800dd8e:	e9cd 2400 	strd	r2, r4, [sp]
 800dd92:	1d21      	adds	r1, r4, #4
 800dd94:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 800dd98:	4606      	mov	r6, r0
 800dd9a:	4638      	mov	r0, r7
 800dd9c:	f7fe fdfa 	bl	800c994 <rclc_executor_add_service_with_context>
 800dda0:	4b19      	ldr	r3, [pc, #100]	@ (800de08 <rclc_executor_add_parameter_server+0xac>)
 800dda2:	f104 0248 	add.w	r2, r4, #72	@ 0x48
 800dda6:	e9cd 3400 	strd	r3, r4, [sp]
 800ddaa:	f104 0108 	add.w	r1, r4, #8
 800ddae:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 800ddb2:	4306      	orrs	r6, r0
 800ddb4:	4638      	mov	r0, r7
 800ddb6:	f7fe fded 	bl	800c994 <rclc_executor_add_service_with_context>
 800ddba:	4b14      	ldr	r3, [pc, #80]	@ (800de0c <rclc_executor_add_parameter_server+0xb0>)
 800ddbc:	4306      	orrs	r6, r0
 800ddbe:	e9cd 3400 	strd	r3, r4, [sp]
 800ddc2:	f104 0218 	add.w	r2, r4, #24
 800ddc6:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 800ddca:	4621      	mov	r1, r4
 800ddcc:	4638      	mov	r0, r7
 800ddce:	f7fe fde1 	bl	800c994 <rclc_executor_add_service_with_context>
 800ddd2:	4b0f      	ldr	r3, [pc, #60]	@ (800de10 <rclc_executor_add_parameter_server+0xb4>)
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	e9cd 3400 	strd	r3, r4, [sp]
 800ddda:	4638      	mov	r0, r7
 800dddc:	f104 039c 	add.w	r3, r4, #156	@ 0x9c
 800dde0:	f104 0290 	add.w	r2, r4, #144	@ 0x90
 800dde4:	f104 0110 	add.w	r1, r4, #16
 800dde8:	f7fe fdd4 	bl	800c994 <rclc_executor_add_service_with_context>
 800ddec:	4335      	orrs	r5, r6
 800ddee:	4328      	orrs	r0, r5
 800ddf0:	b003      	add	sp, #12
 800ddf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf4:	200b      	movs	r0, #11
 800ddf6:	b003      	add	sp, #12
 800ddf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddfa:	200b      	movs	r0, #11
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	0800d245 	.word	0x0800d245
 800de04:	0800d2c5 	.word	0x0800d2c5
 800de08:	0800e019 	.word	0x0800e019
 800de0c:	0800d319 	.word	0x0800d319
 800de10:	0800d165 	.word	0x0800d165
 800de14:	00000000 	.word	0x00000000

0800de18 <rclc_add_parameter>:
 800de18:	2800      	cmp	r0, #0
 800de1a:	d06a      	beq.n	800def2 <rclc_add_parameter+0xda>
 800de1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de20:	460d      	mov	r5, r1
 800de22:	b082      	sub	sp, #8
 800de24:	2900      	cmp	r1, #0
 800de26:	d066      	beq.n	800def6 <rclc_add_parameter+0xde>
 800de28:	f890 3100 	ldrb.w	r3, [r0, #256]	@ 0x100
 800de2c:	4604      	mov	r4, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d15a      	bne.n	800dee8 <rclc_add_parameter+0xd0>
 800de32:	e9d0 732b 	ldrd	r7, r3, [r0, #172]	@ 0xac
 800de36:	42bb      	cmp	r3, r7
 800de38:	d803      	bhi.n	800de42 <rclc_add_parameter+0x2a>
 800de3a:	2001      	movs	r0, #1
 800de3c:	b002      	add	sp, #8
 800de3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de42:	30a8      	adds	r0, #168	@ 0xa8
 800de44:	4616      	mov	r6, r2
 800de46:	f000 fb7f 	bl	800e548 <rclc_parameter_search>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d1f5      	bne.n	800de3a <rclc_add_parameter+0x22>
 800de4e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800de52:	ebc7 08c7 	rsb	r8, r7, r7, lsl #3
 800de56:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800de5a:	4629      	mov	r1, r5
 800de5c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800de60:	f000 fba8 	bl	800e5b4 <rclc_parameter_set_string>
 800de64:	2800      	cmp	r0, #0
 800de66:	d0e8      	beq.n	800de3a <rclc_add_parameter+0x22>
 800de68:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800de6c:	4443      	add	r3, r8
 800de6e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 800de72:	741e      	strb	r6, [r3, #16]
 800de74:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800de78:	3301      	adds	r3, #1
 800de7a:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 800de7e:	f894 3103 	ldrb.w	r3, [r4, #259]	@ 0x103
 800de82:	2b00      	cmp	r3, #0
 800de84:	d039      	beq.n	800defa <rclc_add_parameter+0xe2>
 800de86:	00bf      	lsls	r7, r7, #2
 800de88:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800de8c:	441f      	add	r7, r3
 800de8e:	733e      	strb	r6, [r7, #12]
 800de90:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 800de94:	f894 0101 	ldrb.w	r0, [r4, #257]	@ 0x101
 800de98:	3301      	adds	r3, #1
 800de9a:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d0cc      	beq.n	800de3c <rclc_add_parameter+0x24>
 800dea2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800dea6:	f104 07c0 	add.w	r7, r4, #192	@ 0xc0
 800deaa:	4441      	add	r1, r8
 800deac:	4638      	mov	r0, r7
 800deae:	f000 fb99 	bl	800e5e4 <rclc_parameter_prepare_new_event>
 800deb2:	4668      	mov	r0, sp
 800deb4:	f000 fc78 	bl	800e7a8 <rcutils_system_time_now>
 800deb8:	9e00      	ldr	r6, [sp, #0]
 800deba:	9901      	ldr	r1, [sp, #4]
 800debc:	a315      	add	r3, pc, #84	@ (adr r3, 800df14 <rclc_add_parameter+0xfc>)
 800debe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec2:	4605      	mov	r5, r0
 800dec4:	4630      	mov	r0, r6
 800dec6:	f7f2 fea9 	bl	8000c1c <__aeabi_ldivmod>
 800deca:	4b11      	ldr	r3, [pc, #68]	@ (800df10 <rclc_add_parameter+0xf8>)
 800decc:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800ded0:	fb03 6600 	mla	r6, r3, r0, r6
 800ded4:	4639      	mov	r1, r7
 800ded6:	f8c4 60c4 	str.w	r6, [r4, #196]	@ 0xc4
 800deda:	2200      	movs	r2, #0
 800dedc:	f104 0014 	add.w	r0, r4, #20
 800dee0:	f7fe f8e2 	bl	800c0a8 <rcl_publish>
 800dee4:	4328      	orrs	r0, r5
 800dee6:	e7a9      	b.n	800de3c <rclc_add_parameter+0x24>
 800dee8:	f649 4044 	movw	r0, #40004	@ 0x9c44
 800deec:	b002      	add	sp, #8
 800deee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def2:	200b      	movs	r0, #11
 800def4:	4770      	bx	lr
 800def6:	200b      	movs	r0, #11
 800def8:	e7a0      	b.n	800de3c <rclc_add_parameter+0x24>
 800defa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800defe:	4629      	mov	r1, r5
 800df00:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800df04:	00bf      	lsls	r7, r7, #2
 800df06:	f000 fb55 	bl	800e5b4 <rclc_parameter_set_string>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d1bc      	bne.n	800de88 <rclc_add_parameter+0x70>
 800df0e:	e794      	b.n	800de3a <rclc_add_parameter+0x22>
 800df10:	c4653600 	.word	0xc4653600
 800df14:	3b9aca00 	.word	0x3b9aca00
	...

0800df20 <rclc_add_parameter_undeclared>:
 800df20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df24:	b082      	sub	sp, #8
 800df26:	2800      	cmp	r0, #0
 800df28:	d05c      	beq.n	800dfe4 <rclc_add_parameter_undeclared+0xc4>
 800df2a:	460d      	mov	r5, r1
 800df2c:	2900      	cmp	r1, #0
 800df2e:	d059      	beq.n	800dfe4 <rclc_add_parameter_undeclared+0xc4>
 800df30:	e9d0 732b 	ldrd	r7, r3, [r0, #172]	@ 0xac
 800df34:	42bb      	cmp	r3, r7
 800df36:	4604      	mov	r4, r0
 800df38:	d804      	bhi.n	800df44 <rclc_add_parameter_undeclared+0x24>
 800df3a:	2601      	movs	r6, #1
 800df3c:	4630      	mov	r0, r6
 800df3e:	b002      	add	sp, #8
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df44:	6809      	ldr	r1, [r1, #0]
 800df46:	30a8      	adds	r0, #168	@ 0xa8
 800df48:	f000 fafe 	bl	800e548 <rclc_parameter_search>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d1f4      	bne.n	800df3a <rclc_add_parameter_undeclared+0x1a>
 800df50:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800df54:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
 800df58:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800df5c:	4629      	mov	r1, r5
 800df5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800df62:	f000 fa4d 	bl	800e400 <rclc_parameter_copy>
 800df66:	4606      	mov	r6, r0
 800df68:	2800      	cmp	r0, #0
 800df6a:	d1e6      	bne.n	800df3a <rclc_add_parameter_undeclared+0x1a>
 800df6c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800df70:	3301      	adds	r3, #1
 800df72:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 800df76:	f894 3103 	ldrb.w	r3, [r4, #259]	@ 0x103
 800df7a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 800df7e:	b3b3      	cbz	r3, 800dfee <rclc_add_parameter_undeclared+0xce>
 800df80:	00bf      	lsls	r7, r7, #2
 800df82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800df86:	7c2a      	ldrb	r2, [r5, #16]
 800df88:	441f      	add	r7, r3
 800df8a:	733a      	strb	r2, [r7, #12]
 800df8c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 800df90:	f894 2101 	ldrb.w	r2, [r4, #257]	@ 0x101
 800df94:	3301      	adds	r3, #1
 800df96:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 800df9a:	2a00      	cmp	r2, #0
 800df9c:	d0ce      	beq.n	800df3c <rclc_add_parameter_undeclared+0x1c>
 800df9e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800dfa2:	f104 07c0 	add.w	r7, r4, #192	@ 0xc0
 800dfa6:	4441      	add	r1, r8
 800dfa8:	4638      	mov	r0, r7
 800dfaa:	f000 fb1b 	bl	800e5e4 <rclc_parameter_prepare_new_event>
 800dfae:	4668      	mov	r0, sp
 800dfb0:	f000 fbfa 	bl	800e7a8 <rcutils_system_time_now>
 800dfb4:	9d00      	ldr	r5, [sp, #0]
 800dfb6:	9901      	ldr	r1, [sp, #4]
 800dfb8:	a314      	add	r3, pc, #80	@ (adr r3, 800e00c <rclc_add_parameter_undeclared+0xec>)
 800dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f7f2 fe2b 	bl	8000c1c <__aeabi_ldivmod>
 800dfc6:	4b10      	ldr	r3, [pc, #64]	@ (800e008 <rclc_add_parameter_undeclared+0xe8>)
 800dfc8:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800dfcc:	fb03 5500 	mla	r5, r3, r0, r5
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	f8c4 50c4 	str.w	r5, [r4, #196]	@ 0xc4
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f104 0014 	add.w	r0, r4, #20
 800dfdc:	f7fe f864 	bl	800c0a8 <rcl_publish>
 800dfe0:	4306      	orrs	r6, r0
 800dfe2:	e7ab      	b.n	800df3c <rclc_add_parameter_undeclared+0x1c>
 800dfe4:	260b      	movs	r6, #11
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	b002      	add	sp, #8
 800dfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 800dff2:	6829      	ldr	r1, [r5, #0]
 800dff4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 800dff8:	00bf      	lsls	r7, r7, #2
 800dffa:	f000 fadb 	bl	800e5b4 <rclc_parameter_set_string>
 800dffe:	2800      	cmp	r0, #0
 800e000:	d1bf      	bne.n	800df82 <rclc_add_parameter_undeclared+0x62>
 800e002:	e79a      	b.n	800df3a <rclc_add_parameter_undeclared+0x1a>
 800e004:	f3af 8000 	nop.w
 800e008:	c4653600 	.word	0xc4653600
 800e00c:	3b9aca00 	.word	0x3b9aca00
	...

0800e018 <rclc_parameter_server_set_service_callback>:
 800e018:	2800      	cmp	r0, #0
 800e01a:	f000 81a5 	beq.w	800e368 <rclc_parameter_server_set_service_callback+0x350>
 800e01e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e022:	ed2d 8b04 	vpush	{d8-d9}
 800e026:	460e      	mov	r6, r1
 800e028:	b0a1      	sub	sp, #132	@ 0x84
 800e02a:	2900      	cmp	r1, #0
 800e02c:	f000 8083 	beq.w	800e136 <rclc_parameter_server_set_service_callback+0x11e>
 800e030:	4693      	mov	fp, r2
 800e032:	2a00      	cmp	r2, #0
 800e034:	d07f      	beq.n	800e136 <rclc_parameter_server_set_service_callback+0x11e>
 800e036:	6843      	ldr	r3, [r0, #4]
 800e038:	688a      	ldr	r2, [r1, #8]
 800e03a:	4293      	cmp	r3, r2
 800e03c:	4607      	mov	r7, r0
 800e03e:	f200 8173 	bhi.w	800e328 <rclc_parameter_server_set_service_callback+0x310>
 800e042:	604b      	str	r3, [r1, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d076      	beq.n	800e136 <rclc_parameter_server_set_service_callback+0x11e>
 800e048:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
 800e04c:	ee09 3a10 	vmov	s18, r3
 800e050:	2400      	movs	r4, #0
 800e052:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	6835      	ldr	r5, [r6, #0]
 800e05a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800e05e:	ee19 0a10 	vmov	r0, s18
 800e062:	f853 1008 	ldr.w	r1, [r3, r8]
 800e066:	f000 fa8b 	bl	800e580 <rclc_parameter_search_index>
 800e06a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 800e06e:	6832      	ldr	r2, [r6, #0]
 800e070:	9000      	str	r0, [sp, #0]
 800e072:	ea4f 1904 	mov.w	r9, r4, lsl #4
 800e076:	3504      	adds	r5, #4
 800e078:	f04f 0a00 	mov.w	sl, #0
 800e07c:	f802 a009 	strb.w	sl, [r2, r9]
 800e080:	49bd      	ldr	r1, [pc, #756]	@ (800e378 <rclc_parameter_server_set_service_callback+0x360>)
 800e082:	4628      	mov	r0, r5
 800e084:	f000 fa96 	bl	800e5b4 <rclc_parameter_set_string>
 800e088:	f8db 20ac 	ldr.w	r2, [fp, #172]	@ 0xac
 800e08c:	9b00      	ldr	r3, [sp, #0]
 800e08e:	4293      	cmp	r3, r2
 800e090:	d21e      	bcs.n	800e0d0 <rclc_parameter_server_set_service_callback+0xb8>
 800e092:	f8db 20b4 	ldr.w	r2, [fp, #180]	@ 0xb4
 800e096:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 800e09a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e09e:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 800e0a2:	2a00      	cmp	r2, #0
 800e0a4:	f040 8136 	bne.w	800e314 <rclc_parameter_server_set_service_callback+0x2fc>
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	f8db a0a8 	ldr.w	sl, [fp, #168]	@ 0xa8
 800e0ae:	4442      	add	r2, r8
 800e0b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e0b4:	7c11      	ldrb	r1, [r2, #16]
 800e0b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e0ba:	eb0a 1003 	add.w	r0, sl, r3, lsl #4
 800e0be:	2903      	cmp	r1, #3
 800e0c0:	f200 8173 	bhi.w	800e3aa <rclc_parameter_server_set_service_callback+0x392>
 800e0c4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e0c8:	00c200fb 	.word	0x00c200fb
 800e0cc:	003c008d 	.word	0x003c008d
 800e0d0:	f89b 3102 	ldrb.w	r3, [fp, #258]	@ 0x102
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 8118 	beq.w	800e30a <rclc_parameter_server_set_service_callback+0x2f2>
 800e0da:	6839      	ldr	r1, [r7, #0]
 800e0dc:	4441      	add	r1, r8
 800e0de:	7c0b      	ldrb	r3, [r1, #16]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	f000 8112 	beq.w	800e30a <rclc_parameter_server_set_service_callback+0x2f2>
 800e0e6:	f8db 30b0 	ldr.w	r3, [fp, #176]	@ 0xb0
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	f000 8158 	beq.w	800e3a0 <rclc_parameter_server_set_service_callback+0x388>
 800e0f0:	f8db 30f8 	ldr.w	r3, [fp, #248]	@ 0xf8
 800e0f4:	b16b      	cbz	r3, 800e112 <rclc_parameter_server_set_service_callback+0xfa>
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f88b 2100 	strb.w	r2, [fp, #256]	@ 0x100
 800e0fc:	4650      	mov	r0, sl
 800e0fe:	f8db 20fc 	ldr.w	r2, [fp, #252]	@ 0xfc
 800e102:	4798      	blx	r3
 800e104:	f88b a100 	strb.w	sl, [fp, #256]	@ 0x100
 800e108:	2800      	cmp	r0, #0
 800e10a:	f000 8119 	beq.w	800e340 <rclc_parameter_server_set_service_callback+0x328>
 800e10e:	6839      	ldr	r1, [r7, #0]
 800e110:	4441      	add	r1, r8
 800e112:	4658      	mov	r0, fp
 800e114:	f7ff ff04 	bl	800df20 <rclc_add_parameter_undeclared>
 800e118:	2800      	cmp	r0, #0
 800e11a:	f040 810c 	bne.w	800e336 <rclc_parameter_server_set_service_callback+0x31e>
 800e11e:	4997      	ldr	r1, [pc, #604]	@ (800e37c <rclc_parameter_server_set_service_callback+0x364>)
 800e120:	4628      	mov	r0, r5
 800e122:	f000 fa47 	bl	800e5b4 <rclc_parameter_set_string>
 800e126:	6833      	ldr	r3, [r6, #0]
 800e128:	2201      	movs	r2, #1
 800e12a:	f803 2009 	strb.w	r2, [r3, r9]
 800e12e:	6873      	ldr	r3, [r6, #4]
 800e130:	3401      	adds	r4, #1
 800e132:	429c      	cmp	r4, r3
 800e134:	d38d      	bcc.n	800e052 <rclc_parameter_server_set_service_callback+0x3a>
 800e136:	b021      	add	sp, #132	@ 0x84
 800e138:	ecbd 8b04 	vpop	{d8-d9}
 800e13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e140:	f85a 1008 	ldr.w	r1, [sl, r8]
 800e144:	2900      	cmp	r1, #0
 800e146:	f000 80ea 	beq.w	800e31e <rclc_parameter_server_set_service_callback+0x306>
 800e14a:	f89b a100 	ldrb.w	sl, [fp, #256]	@ 0x100
 800e14e:	f1ba 0f00 	cmp.w	sl, #0
 800e152:	d1e8      	bne.n	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e154:	ee19 0a10 	vmov	r0, s18
 800e158:	ed92 8b08 	vldr	d8, [r2, #32]
 800e15c:	f000 f9f4 	bl	800e548 <rclc_parameter_search>
 800e160:	4680      	mov	r8, r0
 800e162:	2800      	cmp	r0, #0
 800e164:	d0df      	beq.n	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e166:	7c03      	ldrb	r3, [r0, #16]
 800e168:	2b03      	cmp	r3, #3
 800e16a:	f040 80c9 	bne.w	800e300 <rclc_parameter_server_set_service_callback+0x2e8>
 800e16e:	4601      	mov	r1, r0
 800e170:	2270      	movs	r2, #112	@ 0x70
 800e172:	a804      	add	r0, sp, #16
 800e174:	f013 fc5d 	bl	8021a32 <memcpy>
 800e178:	f8db 30f8 	ldr.w	r3, [fp, #248]	@ 0xf8
 800e17c:	ed8d 8b0c 	vstr	d8, [sp, #48]	@ 0x30
 800e180:	b163      	cbz	r3, 800e19c <rclc_parameter_server_set_service_callback+0x184>
 800e182:	2201      	movs	r2, #1
 800e184:	f88b 2100 	strb.w	r2, [fp, #256]	@ 0x100
 800e188:	a904      	add	r1, sp, #16
 800e18a:	f8db 20fc 	ldr.w	r2, [fp, #252]	@ 0xfc
 800e18e:	4640      	mov	r0, r8
 800e190:	4798      	blx	r3
 800e192:	f88b a100 	strb.w	sl, [fp, #256]	@ 0x100
 800e196:	2800      	cmp	r0, #0
 800e198:	f000 80e1 	beq.w	800e35e <rclc_parameter_server_set_service_callback+0x346>
 800e19c:	f89b 3101 	ldrb.w	r3, [fp, #257]	@ 0x101
 800e1a0:	ed88 8b08 	vstr	d8, [r8, #32]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d0be      	beq.n	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e1a8:	4641      	mov	r1, r8
 800e1aa:	f10b 08c0 	add.w	r8, fp, #192	@ 0xc0
 800e1ae:	4640      	mov	r0, r8
 800e1b0:	f000 fa2a 	bl	800e608 <rclc_parameter_prepare_changed_event>
 800e1b4:	a802      	add	r0, sp, #8
 800e1b6:	f000 faf7 	bl	800e7a8 <rcutils_system_time_now>
 800e1ba:	e9dd 5102 	ldrd	r5, r1, [sp, #8]
 800e1be:	a36c      	add	r3, pc, #432	@ (adr r3, 800e370 <rclc_parameter_server_set_service_callback+0x358>)
 800e1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	f7f2 fd29 	bl	8000c1c <__aeabi_ldivmod>
 800e1ca:	4b6d      	ldr	r3, [pc, #436]	@ (800e380 <rclc_parameter_server_set_service_callback+0x368>)
 800e1cc:	fb03 5500 	mla	r5, r3, r0, r5
 800e1d0:	e9cb 0530 	strd	r0, r5, [fp, #192]	@ 0xc0
 800e1d4:	4641      	mov	r1, r8
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f10b 0014 	add.w	r0, fp, #20
 800e1dc:	f7fd ff64 	bl	800c0a8 <rcl_publish>
 800e1e0:	e7a1      	b.n	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e1e2:	f85a 1008 	ldr.w	r1, [sl, r8]
 800e1e6:	2900      	cmp	r1, #0
 800e1e8:	f000 8099 	beq.w	800e31e <rclc_parameter_server_set_service_callback+0x306>
 800e1ec:	f89b a100 	ldrb.w	sl, [fp, #256]	@ 0x100
 800e1f0:	f1ba 0f00 	cmp.w	sl, #0
 800e1f4:	d197      	bne.n	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e1f6:	ee19 0a10 	vmov	r0, s18
 800e1fa:	ed92 8b06 	vldr	d8, [r2, #24]
 800e1fe:	f000 f9a3 	bl	800e548 <rclc_parameter_search>
 800e202:	4680      	mov	r8, r0
 800e204:	2800      	cmp	r0, #0
 800e206:	d08e      	beq.n	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e208:	7c03      	ldrb	r3, [r0, #16]
 800e20a:	2b02      	cmp	r3, #2
 800e20c:	d178      	bne.n	800e300 <rclc_parameter_server_set_service_callback+0x2e8>
 800e20e:	4601      	mov	r1, r0
 800e210:	2270      	movs	r2, #112	@ 0x70
 800e212:	a804      	add	r0, sp, #16
 800e214:	f013 fc0d 	bl	8021a32 <memcpy>
 800e218:	f8db 30f8 	ldr.w	r3, [fp, #248]	@ 0xf8
 800e21c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e220:	b163      	cbz	r3, 800e23c <rclc_parameter_server_set_service_callback+0x224>
 800e222:	2201      	movs	r2, #1
 800e224:	f88b 2100 	strb.w	r2, [fp, #256]	@ 0x100
 800e228:	a904      	add	r1, sp, #16
 800e22a:	f8db 20fc 	ldr.w	r2, [fp, #252]	@ 0xfc
 800e22e:	4640      	mov	r0, r8
 800e230:	4798      	blx	r3
 800e232:	f88b a100 	strb.w	sl, [fp, #256]	@ 0x100
 800e236:	2800      	cmp	r0, #0
 800e238:	f000 8091 	beq.w	800e35e <rclc_parameter_server_set_service_callback+0x346>
 800e23c:	f89b 3101 	ldrb.w	r3, [fp, #257]	@ 0x101
 800e240:	ed88 8b06 	vstr	d8, [r8, #24]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f43f af6e 	beq.w	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e24a:	e7ad      	b.n	800e1a8 <rclc_parameter_server_set_service_callback+0x190>
 800e24c:	f85a 1008 	ldr.w	r1, [sl, r8]
 800e250:	2900      	cmp	r1, #0
 800e252:	d064      	beq.n	800e31e <rclc_parameter_server_set_service_callback+0x306>
 800e254:	f89b 8100 	ldrb.w	r8, [fp, #256]	@ 0x100
 800e258:	f1b8 0f00 	cmp.w	r8, #0
 800e25c:	f47f af63 	bne.w	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e260:	7c53      	ldrb	r3, [r2, #17]
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	ee19 0a10 	vmov	r0, s18
 800e268:	f000 f96e 	bl	800e548 <rclc_parameter_search>
 800e26c:	4682      	mov	sl, r0
 800e26e:	2800      	cmp	r0, #0
 800e270:	f43f af59 	beq.w	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e274:	7c02      	ldrb	r2, [r0, #16]
 800e276:	9201      	str	r2, [sp, #4]
 800e278:	2a01      	cmp	r2, #1
 800e27a:	d141      	bne.n	800e300 <rclc_parameter_server_set_service_callback+0x2e8>
 800e27c:	4601      	mov	r1, r0
 800e27e:	2270      	movs	r2, #112	@ 0x70
 800e280:	a804      	add	r0, sp, #16
 800e282:	f013 fbd6 	bl	8021a32 <memcpy>
 800e286:	9b00      	ldr	r3, [sp, #0]
 800e288:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 800e28c:	f8db 30f8 	ldr.w	r3, [fp, #248]	@ 0xf8
 800e290:	b15b      	cbz	r3, 800e2aa <rclc_parameter_server_set_service_callback+0x292>
 800e292:	9a01      	ldr	r2, [sp, #4]
 800e294:	f88b 2100 	strb.w	r2, [fp, #256]	@ 0x100
 800e298:	a904      	add	r1, sp, #16
 800e29a:	f8db 20fc 	ldr.w	r2, [fp, #252]	@ 0xfc
 800e29e:	4650      	mov	r0, sl
 800e2a0:	4798      	blx	r3
 800e2a2:	f88b 8100 	strb.w	r8, [fp, #256]	@ 0x100
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d059      	beq.n	800e35e <rclc_parameter_server_set_service_callback+0x346>
 800e2aa:	9b00      	ldr	r3, [sp, #0]
 800e2ac:	f88a 3011 	strb.w	r3, [sl, #17]
 800e2b0:	f89b 3101 	ldrb.w	r3, [fp, #257]	@ 0x101
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f43f af36 	beq.w	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e2ba:	4651      	mov	r1, sl
 800e2bc:	e775      	b.n	800e1aa <rclc_parameter_server_set_service_callback+0x192>
 800e2be:	f8db 30f8 	ldr.w	r3, [fp, #248]	@ 0xf8
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d041      	beq.n	800e34a <rclc_parameter_server_set_service_callback+0x332>
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f88b 2100 	strb.w	r2, [fp, #256]	@ 0x100
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	f8db 20fc 	ldr.w	r2, [fp, #252]	@ 0xfc
 800e2d2:	4798      	blx	r3
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	f88b 3100 	strb.w	r3, [fp, #256]	@ 0x100
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	d03f      	beq.n	800e35e <rclc_parameter_server_set_service_callback+0x346>
 800e2de:	f85a 1008 	ldr.w	r1, [sl, r8]
 800e2e2:	b1e1      	cbz	r1, 800e31e <rclc_parameter_server_set_service_callback+0x306>
 800e2e4:	4658      	mov	r0, fp
 800e2e6:	f7ff fb37 	bl	800d958 <rclc_delete_parameter.part.0>
 800e2ea:	280b      	cmp	r0, #11
 800e2ec:	d017      	beq.n	800e31e <rclc_parameter_server_set_service_callback+0x306>
 800e2ee:	f640 73a1 	movw	r3, #4001	@ 0xfa1
 800e2f2:	4298      	cmp	r0, r3
 800e2f4:	d033      	beq.n	800e35e <rclc_parameter_server_set_service_callback+0x346>
 800e2f6:	f640 73a2 	movw	r3, #4002	@ 0xfa2
 800e2fa:	4298      	cmp	r0, r3
 800e2fc:	f47f af13 	bne.w	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e300:	4920      	ldr	r1, [pc, #128]	@ (800e384 <rclc_parameter_server_set_service_callback+0x36c>)
 800e302:	4628      	mov	r0, r5
 800e304:	f000 f956 	bl	800e5b4 <rclc_parameter_set_string>
 800e308:	e711      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e30a:	491f      	ldr	r1, [pc, #124]	@ (800e388 <rclc_parameter_server_set_service_callback+0x370>)
 800e30c:	4628      	mov	r0, r5
 800e30e:	f000 f951 	bl	800e5b4 <rclc_parameter_set_string>
 800e312:	e70c      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e314:	491d      	ldr	r1, [pc, #116]	@ (800e38c <rclc_parameter_server_set_service_callback+0x374>)
 800e316:	4628      	mov	r0, r5
 800e318:	f000 f94c 	bl	800e5b4 <rclc_parameter_set_string>
 800e31c:	e707      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e31e:	491c      	ldr	r1, [pc, #112]	@ (800e390 <rclc_parameter_server_set_service_callback+0x378>)
 800e320:	4628      	mov	r0, r5
 800e322:	f000 f947 	bl	800e5b4 <rclc_parameter_set_string>
 800e326:	e702      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e328:	2300      	movs	r3, #0
 800e32a:	604b      	str	r3, [r1, #4]
 800e32c:	b021      	add	sp, #132	@ 0x84
 800e32e:	ecbd 8b04 	vpop	{d8-d9}
 800e332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e336:	4917      	ldr	r1, [pc, #92]	@ (800e394 <rclc_parameter_server_set_service_callback+0x37c>)
 800e338:	4628      	mov	r0, r5
 800e33a:	f000 f93b 	bl	800e5b4 <rclc_parameter_set_string>
 800e33e:	e6f6      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e340:	4915      	ldr	r1, [pc, #84]	@ (800e398 <rclc_parameter_server_set_service_callback+0x380>)
 800e342:	4628      	mov	r0, r5
 800e344:	f000 f936 	bl	800e5b4 <rclc_parameter_set_string>
 800e348:	e6f1      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e34a:	f85a 1008 	ldr.w	r1, [sl, r8]
 800e34e:	2900      	cmp	r1, #0
 800e350:	d0e5      	beq.n	800e31e <rclc_parameter_server_set_service_callback+0x306>
 800e352:	f89b 3100 	ldrb.w	r3, [fp, #256]	@ 0x100
 800e356:	2b00      	cmp	r3, #0
 800e358:	f47f aee5 	bne.w	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e35c:	e7c2      	b.n	800e2e4 <rclc_parameter_server_set_service_callback+0x2cc>
 800e35e:	490f      	ldr	r1, [pc, #60]	@ (800e39c <rclc_parameter_server_set_service_callback+0x384>)
 800e360:	4628      	mov	r0, r5
 800e362:	f000 f927 	bl	800e5b4 <rclc_parameter_set_string>
 800e366:	e6e2      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop
 800e36c:	f3af 8000 	nop.w
 800e370:	3b9aca00 	.word	0x3b9aca00
 800e374:	00000000 	.word	0x00000000
 800e378:	080234b8 	.word	0x080234b8
 800e37c:	0802334c 	.word	0x0802334c
 800e380:	c4653600 	.word	0xc4653600
 800e384:	080232f0 	.word	0x080232f0
 800e388:	08023360 	.word	0x08023360
 800e38c:	080232a0 	.word	0x080232a0
 800e390:	080232c8 	.word	0x080232c8
 800e394:	08023334 	.word	0x08023334
 800e398:	0802331c 	.word	0x0802331c
 800e39c:	080232dc 	.word	0x080232dc
 800e3a0:	4904      	ldr	r1, [pc, #16]	@ (800e3b4 <rclc_parameter_server_set_service_callback+0x39c>)
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 f906 	bl	800e5b4 <rclc_parameter_set_string>
 800e3a8:	e6c1      	b.n	800e12e <rclc_parameter_server_set_service_callback+0x116>
 800e3aa:	4903      	ldr	r1, [pc, #12]	@ (800e3b8 <rclc_parameter_server_set_service_callback+0x3a0>)
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f000 f901 	bl	800e5b4 <rclc_parameter_set_string>
 800e3b2:	e6b8      	b.n	800e126 <rclc_parameter_server_set_service_callback+0x10e>
 800e3b4:	08023300 	.word	0x08023300
 800e3b8:	080232b4 	.word	0x080232b4

0800e3bc <rclc_parameter_value_copy>:
 800e3bc:	4603      	mov	r3, r0
 800e3be:	b160      	cbz	r0, 800e3da <rclc_parameter_value_copy+0x1e>
 800e3c0:	b159      	cbz	r1, 800e3da <rclc_parameter_value_copy+0x1e>
 800e3c2:	780a      	ldrb	r2, [r1, #0]
 800e3c4:	7002      	strb	r2, [r0, #0]
 800e3c6:	2a02      	cmp	r2, #2
 800e3c8:	d00d      	beq.n	800e3e6 <rclc_parameter_value_copy+0x2a>
 800e3ca:	2a03      	cmp	r2, #3
 800e3cc:	d011      	beq.n	800e3f2 <rclc_parameter_value_copy+0x36>
 800e3ce:	2a01      	cmp	r2, #1
 800e3d0:	d005      	beq.n	800e3de <rclc_parameter_value_copy+0x22>
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	7002      	strb	r2, [r0, #0]
 800e3d6:	2001      	movs	r0, #1
 800e3d8:	4770      	bx	lr
 800e3da:	200b      	movs	r0, #11
 800e3dc:	4770      	bx	lr
 800e3de:	784a      	ldrb	r2, [r1, #1]
 800e3e0:	7042      	strb	r2, [r0, #1]
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	4770      	bx	lr
 800e3e6:	ed91 7b02 	vldr	d7, [r1, #8]
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	ed83 7b02 	vstr	d7, [r3, #8]
 800e3f0:	4770      	bx	lr
 800e3f2:	ed91 7b04 	vldr	d7, [r1, #16]
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	ed83 7b04 	vstr	d7, [r3, #16]
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop

0800e400 <rclc_parameter_copy>:
 800e400:	b310      	cbz	r0, 800e448 <rclc_parameter_copy+0x48>
 800e402:	b570      	push	{r4, r5, r6, lr}
 800e404:	460d      	mov	r5, r1
 800e406:	b309      	cbz	r1, 800e44c <rclc_parameter_copy+0x4c>
 800e408:	680e      	ldr	r6, [r1, #0]
 800e40a:	b13e      	cbz	r6, 800e41c <rclc_parameter_copy+0x1c>
 800e40c:	4604      	mov	r4, r0
 800e40e:	4630      	mov	r0, r6
 800e410:	f7f1 fef6 	bl	8000200 <strlen>
 800e414:	68a3      	ldr	r3, [r4, #8]
 800e416:	1c42      	adds	r2, r0, #1
 800e418:	4293      	cmp	r3, r2
 800e41a:	d201      	bcs.n	800e420 <rclc_parameter_copy+0x20>
 800e41c:	2001      	movs	r0, #1
 800e41e:	bd70      	pop	{r4, r5, r6, pc}
 800e420:	4631      	mov	r1, r6
 800e422:	6820      	ldr	r0, [r4, #0]
 800e424:	f013 fb05 	bl	8021a32 <memcpy>
 800e428:	6820      	ldr	r0, [r4, #0]
 800e42a:	f7f1 fee9 	bl	8000200 <strlen>
 800e42e:	6060      	str	r0, [r4, #4]
 800e430:	7c2b      	ldrb	r3, [r5, #16]
 800e432:	7423      	strb	r3, [r4, #16]
 800e434:	2b02      	cmp	r3, #2
 800e436:	d00b      	beq.n	800e450 <rclc_parameter_copy+0x50>
 800e438:	2b03      	cmp	r3, #3
 800e43a:	d013      	beq.n	800e464 <rclc_parameter_copy+0x64>
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d00d      	beq.n	800e45c <rclc_parameter_copy+0x5c>
 800e440:	2300      	movs	r3, #0
 800e442:	7423      	strb	r3, [r4, #16]
 800e444:	2001      	movs	r0, #1
 800e446:	bd70      	pop	{r4, r5, r6, pc}
 800e448:	200b      	movs	r0, #11
 800e44a:	4770      	bx	lr
 800e44c:	200b      	movs	r0, #11
 800e44e:	bd70      	pop	{r4, r5, r6, pc}
 800e450:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 800e454:	2000      	movs	r0, #0
 800e456:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800e45a:	bd70      	pop	{r4, r5, r6, pc}
 800e45c:	7c6b      	ldrb	r3, [r5, #17]
 800e45e:	7463      	strb	r3, [r4, #17]
 800e460:	2000      	movs	r0, #0
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 800e468:	2000      	movs	r0, #0
 800e46a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e46e:	bd70      	pop	{r4, r5, r6, pc}

0800e470 <rclc_parameter_descriptor_copy>:
 800e470:	2800      	cmp	r0, #0
 800e472:	d065      	beq.n	800e540 <rclc_parameter_descriptor_copy+0xd0>
 800e474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e476:	460d      	mov	r5, r1
 800e478:	2900      	cmp	r1, #0
 800e47a:	d063      	beq.n	800e544 <rclc_parameter_descriptor_copy+0xd4>
 800e47c:	4604      	mov	r4, r0
 800e47e:	2a00      	cmp	r2, #0
 800e480:	d136      	bne.n	800e4f0 <rclc_parameter_descriptor_copy+0x80>
 800e482:	680e      	ldr	r6, [r1, #0]
 800e484:	b136      	cbz	r6, 800e494 <rclc_parameter_descriptor_copy+0x24>
 800e486:	4630      	mov	r0, r6
 800e488:	f7f1 feba 	bl	8000200 <strlen>
 800e48c:	68a3      	ldr	r3, [r4, #8]
 800e48e:	1c42      	adds	r2, r0, #1
 800e490:	4293      	cmp	r3, r2
 800e492:	d201      	bcs.n	800e498 <rclc_parameter_descriptor_copy+0x28>
 800e494:	2001      	movs	r0, #1
 800e496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e498:	4631      	mov	r1, r6
 800e49a:	6820      	ldr	r0, [r4, #0]
 800e49c:	f013 fac9 	bl	8021a32 <memcpy>
 800e4a0:	6820      	ldr	r0, [r4, #0]
 800e4a2:	f7f1 fead 	bl	8000200 <strlen>
 800e4a6:	692e      	ldr	r6, [r5, #16]
 800e4a8:	6060      	str	r0, [r4, #4]
 800e4aa:	2e00      	cmp	r6, #0
 800e4ac:	d0f2      	beq.n	800e494 <rclc_parameter_descriptor_copy+0x24>
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	f7f1 fea6 	bl	8000200 <strlen>
 800e4b4:	69a3      	ldr	r3, [r4, #24]
 800e4b6:	1c42      	adds	r2, r0, #1
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d3eb      	bcc.n	800e494 <rclc_parameter_descriptor_copy+0x24>
 800e4bc:	4631      	mov	r1, r6
 800e4be:	6920      	ldr	r0, [r4, #16]
 800e4c0:	f013 fab7 	bl	8021a32 <memcpy>
 800e4c4:	6920      	ldr	r0, [r4, #16]
 800e4c6:	f7f1 fe9b 	bl	8000200 <strlen>
 800e4ca:	69ee      	ldr	r6, [r5, #28]
 800e4cc:	6160      	str	r0, [r4, #20]
 800e4ce:	2e00      	cmp	r6, #0
 800e4d0:	d0e0      	beq.n	800e494 <rclc_parameter_descriptor_copy+0x24>
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7f1 fe94 	bl	8000200 <strlen>
 800e4d8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e4da:	1c42      	adds	r2, r0, #1
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d3d9      	bcc.n	800e494 <rclc_parameter_descriptor_copy+0x24>
 800e4e0:	4631      	mov	r1, r6
 800e4e2:	69e0      	ldr	r0, [r4, #28]
 800e4e4:	f013 faa5 	bl	8021a32 <memcpy>
 800e4e8:	69e0      	ldr	r0, [r4, #28]
 800e4ea:	f7f1 fe89 	bl	8000200 <strlen>
 800e4ee:	6220      	str	r0, [r4, #32]
 800e4f0:	7b2b      	ldrb	r3, [r5, #12]
 800e4f2:	7323      	strb	r3, [r4, #12]
 800e4f4:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800e4f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e4f8:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 800e4fc:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800e4fe:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800e502:	ed96 7b00 	vldr	d7, [r6]
 800e506:	ed81 7b00 	vstr	d7, [r1]
 800e50a:	ed96 7b02 	vldr	d7, [r6, #8]
 800e50e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800e510:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e512:	6bed      	ldr	r5, [r5, #60]	@ 0x3c
 800e514:	ed81 7b02 	vstr	d7, [r1, #8]
 800e518:	ed96 7b04 	vldr	d7, [r6, #16]
 800e51c:	ed81 7b04 	vstr	d7, [r1, #16]
 800e520:	ed92 7b00 	vldr	d7, [r2]
 800e524:	6327      	str	r7, [r4, #48]	@ 0x30
 800e526:	ed83 7b00 	vstr	d7, [r3]
 800e52a:	ed92 7b02 	vldr	d7, [r2, #8]
 800e52e:	ed83 7b02 	vstr	d7, [r3, #8]
 800e532:	ed92 7b04 	vldr	d7, [r2, #16]
 800e536:	2000      	movs	r0, #0
 800e538:	ed83 7b04 	vstr	d7, [r3, #16]
 800e53c:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800e53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e540:	200b      	movs	r0, #11
 800e542:	4770      	bx	lr
 800e544:	200b      	movs	r0, #11
 800e546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e548 <rclc_parameter_search>:
 800e548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54a:	b1a0      	cbz	r0, 800e576 <rclc_parameter_search+0x2e>
 800e54c:	460e      	mov	r6, r1
 800e54e:	b191      	cbz	r1, 800e576 <rclc_parameter_search+0x2e>
 800e550:	6847      	ldr	r7, [r0, #4]
 800e552:	b19f      	cbz	r7, 800e57c <rclc_parameter_search+0x34>
 800e554:	6803      	ldr	r3, [r0, #0]
 800e556:	2400      	movs	r4, #0
 800e558:	e001      	b.n	800e55e <rclc_parameter_search+0x16>
 800e55a:	42bc      	cmp	r4, r7
 800e55c:	d00b      	beq.n	800e576 <rclc_parameter_search+0x2e>
 800e55e:	6819      	ldr	r1, [r3, #0]
 800e560:	4630      	mov	r0, r6
 800e562:	461d      	mov	r5, r3
 800e564:	f7f1 fe54 	bl	8000210 <strcmp>
 800e568:	3401      	adds	r4, #1
 800e56a:	f105 0370 	add.w	r3, r5, #112	@ 0x70
 800e56e:	2800      	cmp	r0, #0
 800e570:	d1f3      	bne.n	800e55a <rclc_parameter_search+0x12>
 800e572:	4628      	mov	r0, r5
 800e574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e576:	2500      	movs	r5, #0
 800e578:	4628      	mov	r0, r5
 800e57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e57c:	463d      	mov	r5, r7
 800e57e:	e7f8      	b.n	800e572 <rclc_parameter_search+0x2a>

0800e580 <rclc_parameter_search_index>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	b190      	cbz	r0, 800e5aa <rclc_parameter_search_index+0x2a>
 800e584:	460e      	mov	r6, r1
 800e586:	b181      	cbz	r1, 800e5aa <rclc_parameter_search_index+0x2a>
 800e588:	6847      	ldr	r7, [r0, #4]
 800e58a:	b177      	cbz	r7, 800e5aa <rclc_parameter_search_index+0x2a>
 800e58c:	6805      	ldr	r5, [r0, #0]
 800e58e:	2400      	movs	r4, #0
 800e590:	e002      	b.n	800e598 <rclc_parameter_search_index+0x18>
 800e592:	3401      	adds	r4, #1
 800e594:	42bc      	cmp	r4, r7
 800e596:	d008      	beq.n	800e5aa <rclc_parameter_search_index+0x2a>
 800e598:	6829      	ldr	r1, [r5, #0]
 800e59a:	4630      	mov	r0, r6
 800e59c:	f7f1 fe38 	bl	8000210 <strcmp>
 800e5a0:	3570      	adds	r5, #112	@ 0x70
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	d1f5      	bne.n	800e592 <rclc_parameter_search_index+0x12>
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5b2:	bf00      	nop

0800e5b4 <rclc_parameter_set_string>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	b140      	cbz	r0, 800e5cc <rclc_parameter_set_string+0x18>
 800e5ba:	460d      	mov	r5, r1
 800e5bc:	4608      	mov	r0, r1
 800e5be:	b131      	cbz	r1, 800e5ce <rclc_parameter_set_string+0x1a>
 800e5c0:	f7f1 fe1e 	bl	8000200 <strlen>
 800e5c4:	68a3      	ldr	r3, [r4, #8]
 800e5c6:	1c42      	adds	r2, r0, #1
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d201      	bcs.n	800e5d0 <rclc_parameter_set_string+0x1c>
 800e5cc:	2000      	movs	r0, #0
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	6820      	ldr	r0, [r4, #0]
 800e5d4:	f013 fa2d 	bl	8021a32 <memcpy>
 800e5d8:	6820      	ldr	r0, [r4, #0]
 800e5da:	f7f1 fe11 	bl	8000200 <strlen>
 800e5de:	6060      	str	r0, [r4, #4]
 800e5e0:	2001      	movs	r0, #1
 800e5e2:	bd38      	pop	{r3, r4, r5, pc}

0800e5e4 <rclc_parameter_prepare_new_event>:
 800e5e4:	b168      	cbz	r0, 800e602 <rclc_parameter_prepare_new_event+0x1e>
 800e5e6:	b161      	cbz	r1, 800e602 <rclc_parameter_prepare_new_event+0x1e>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e5f0:	6203      	str	r3, [r0, #32]
 800e5f2:	6243      	str	r3, [r0, #36]	@ 0x24
 800e5f4:	6283      	str	r3, [r0, #40]	@ 0x28
 800e5f6:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800e5f8:	6303      	str	r3, [r0, #48]	@ 0x30
 800e5fa:	6343      	str	r3, [r0, #52]	@ 0x34
 800e5fc:	6141      	str	r1, [r0, #20]
 800e5fe:	4618      	mov	r0, r3
 800e600:	4770      	bx	lr
 800e602:	200b      	movs	r0, #11
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop

0800e608 <rclc_parameter_prepare_changed_event>:
 800e608:	b168      	cbz	r0, 800e626 <rclc_parameter_prepare_changed_event+0x1e>
 800e60a:	b161      	cbz	r1, 800e626 <rclc_parameter_prepare_changed_event+0x1e>
 800e60c:	2300      	movs	r3, #0
 800e60e:	2201      	movs	r2, #1
 800e610:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 800e614:	6143      	str	r3, [r0, #20]
 800e616:	6183      	str	r3, [r0, #24]
 800e618:	61c3      	str	r3, [r0, #28]
 800e61a:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800e61c:	6303      	str	r3, [r0, #48]	@ 0x30
 800e61e:	6343      	str	r3, [r0, #52]	@ 0x34
 800e620:	6201      	str	r1, [r0, #32]
 800e622:	4618      	mov	r0, r3
 800e624:	4770      	bx	lr
 800e626:	200b      	movs	r0, #11
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop

0800e62c <rclc_parameter_prepare_deleted_event>:
 800e62c:	b168      	cbz	r0, 800e64a <rclc_parameter_prepare_deleted_event+0x1e>
 800e62e:	b161      	cbz	r1, 800e64a <rclc_parameter_prepare_deleted_event+0x1e>
 800e630:	2300      	movs	r3, #0
 800e632:	2201      	movs	r2, #1
 800e634:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 800e638:	6143      	str	r3, [r0, #20]
 800e63a:	6183      	str	r3, [r0, #24]
 800e63c:	61c3      	str	r3, [r0, #28]
 800e63e:	6203      	str	r3, [r0, #32]
 800e640:	6243      	str	r3, [r0, #36]	@ 0x24
 800e642:	6283      	str	r3, [r0, #40]	@ 0x28
 800e644:	62c1      	str	r1, [r0, #44]	@ 0x2c
 800e646:	4618      	mov	r0, r3
 800e648:	4770      	bx	lr
 800e64a:	200b      	movs	r0, #11
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop

0800e650 <rclc_parameter_initialize_empty_string>:
 800e650:	b1d0      	cbz	r0, 800e688 <rclc_parameter_initialize_empty_string+0x38>
 800e652:	b530      	push	{r4, r5, lr}
 800e654:	460d      	mov	r5, r1
 800e656:	b087      	sub	sp, #28
 800e658:	b181      	cbz	r1, 800e67c <rclc_parameter_initialize_empty_string+0x2c>
 800e65a:	4604      	mov	r4, r0
 800e65c:	a801      	add	r0, sp, #4
 800e65e:	f000 f855 	bl	800e70c <rcutils_get_default_allocator>
 800e662:	9b01      	ldr	r3, [sp, #4]
 800e664:	9905      	ldr	r1, [sp, #20]
 800e666:	4628      	mov	r0, r5
 800e668:	4798      	blx	r3
 800e66a:	6020      	str	r0, [r4, #0]
 800e66c:	b148      	cbz	r0, 800e682 <rclc_parameter_initialize_empty_string+0x32>
 800e66e:	2300      	movs	r3, #0
 800e670:	7003      	strb	r3, [r0, #0]
 800e672:	4618      	mov	r0, r3
 800e674:	e9c4 3501 	strd	r3, r5, [r4, #4]
 800e678:	b007      	add	sp, #28
 800e67a:	bd30      	pop	{r4, r5, pc}
 800e67c:	200b      	movs	r0, #11
 800e67e:	b007      	add	sp, #28
 800e680:	bd30      	pop	{r4, r5, pc}
 800e682:	2001      	movs	r0, #1
 800e684:	b007      	add	sp, #28
 800e686:	bd30      	pop	{r4, r5, pc}
 800e688:	200b      	movs	r0, #11
 800e68a:	4770      	bx	lr

0800e68c <rclc_parameter_descriptor_initialize_string>:
 800e68c:	b510      	push	{r4, lr}
 800e68e:	4604      	mov	r4, r0
 800e690:	b128      	cbz	r0, 800e69e <rclc_parameter_descriptor_initialize_string+0x12>
 800e692:	4903      	ldr	r1, [pc, #12]	@ (800e6a0 <rclc_parameter_descriptor_initialize_string+0x14>)
 800e694:	2231      	movs	r2, #49	@ 0x31
 800e696:	f000 ffe7 	bl	800f668 <rosidl_runtime_c__String__assignn>
 800e69a:	2300      	movs	r3, #0
 800e69c:	6063      	str	r3, [r4, #4]
 800e69e:	bd10      	pop	{r4, pc}
 800e6a0:	20011ef4 	.word	0x20011ef4

0800e6a4 <__default_zero_allocate>:
 800e6a4:	f012 bbc0 	b.w	8020e28 <calloc>

0800e6a8 <__default_reallocate>:
 800e6a8:	f012 bd92 	b.w	80211d0 <realloc>

0800e6ac <__default_deallocate>:
 800e6ac:	f012 bc3a 	b.w	8020f24 <free>

0800e6b0 <__default_allocate>:
 800e6b0:	f012 bc30 	b.w	8020f14 <malloc>

0800e6b4 <rcutils_get_zero_initialized_allocator>:
 800e6b4:	b510      	push	{r4, lr}
 800e6b6:	4c05      	ldr	r4, [pc, #20]	@ (800e6cc <rcutils_get_zero_initialized_allocator+0x18>)
 800e6b8:	4686      	mov	lr, r0
 800e6ba:	4684      	mov	ip, r0
 800e6bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	f8cc 3000 	str.w	r3, [ip]
 800e6c8:	4670      	mov	r0, lr
 800e6ca:	bd10      	pop	{r4, pc}
 800e6cc:	08023418 	.word	0x08023418

0800e6d0 <rcutils_set_default_allocator>:
 800e6d0:	b1a8      	cbz	r0, 800e6fe <rcutils_set_default_allocator+0x2e>
 800e6d2:	6802      	ldr	r2, [r0, #0]
 800e6d4:	b1a2      	cbz	r2, 800e700 <rcutils_set_default_allocator+0x30>
 800e6d6:	6841      	ldr	r1, [r0, #4]
 800e6d8:	b1a1      	cbz	r1, 800e704 <rcutils_set_default_allocator+0x34>
 800e6da:	b410      	push	{r4}
 800e6dc:	68c4      	ldr	r4, [r0, #12]
 800e6de:	b164      	cbz	r4, 800e6fa <rcutils_set_default_allocator+0x2a>
 800e6e0:	6880      	ldr	r0, [r0, #8]
 800e6e2:	b138      	cbz	r0, 800e6f4 <rcutils_set_default_allocator+0x24>
 800e6e4:	4b08      	ldr	r3, [pc, #32]	@ (800e708 <rcutils_set_default_allocator+0x38>)
 800e6e6:	601a      	str	r2, [r3, #0]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800e6ee:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800e6f2:	2001      	movs	r0, #1
 800e6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	e7fa      	b.n	800e6f4 <rcutils_set_default_allocator+0x24>
 800e6fe:	4770      	bx	lr
 800e700:	4610      	mov	r0, r2
 800e702:	4770      	bx	lr
 800e704:	4608      	mov	r0, r1
 800e706:	4770      	bx	lr
 800e708:	2000036c 	.word	0x2000036c

0800e70c <rcutils_get_default_allocator>:
 800e70c:	b510      	push	{r4, lr}
 800e70e:	4c05      	ldr	r4, [pc, #20]	@ (800e724 <rcutils_get_default_allocator+0x18>)
 800e710:	4686      	mov	lr, r0
 800e712:	4684      	mov	ip, r0
 800e714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	f8cc 3000 	str.w	r3, [ip]
 800e720:	4670      	mov	r0, lr
 800e722:	bd10      	pop	{r4, pc}
 800e724:	2000036c 	.word	0x2000036c

0800e728 <rcutils_allocator_is_valid>:
 800e728:	b158      	cbz	r0, 800e742 <rcutils_allocator_is_valid+0x1a>
 800e72a:	6803      	ldr	r3, [r0, #0]
 800e72c:	b143      	cbz	r3, 800e740 <rcutils_allocator_is_valid+0x18>
 800e72e:	6843      	ldr	r3, [r0, #4]
 800e730:	b133      	cbz	r3, 800e740 <rcutils_allocator_is_valid+0x18>
 800e732:	68c3      	ldr	r3, [r0, #12]
 800e734:	b123      	cbz	r3, 800e740 <rcutils_allocator_is_valid+0x18>
 800e736:	6880      	ldr	r0, [r0, #8]
 800e738:	3800      	subs	r0, #0
 800e73a:	bf18      	it	ne
 800e73c:	2001      	movne	r0, #1
 800e73e:	4770      	bx	lr
 800e740:	4618      	mov	r0, r3
 800e742:	4770      	bx	lr

0800e744 <rcutils_get_error_string>:
 800e744:	4b06      	ldr	r3, [pc, #24]	@ (800e760 <rcutils_get_error_string+0x1c>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	b13b      	cbz	r3, 800e75a <rcutils_get_error_string+0x16>
 800e74a:	4b06      	ldr	r3, [pc, #24]	@ (800e764 <rcutils_get_error_string+0x20>)
 800e74c:	781a      	ldrb	r2, [r3, #0]
 800e74e:	b90a      	cbnz	r2, 800e754 <rcutils_get_error_string+0x10>
 800e750:	2201      	movs	r2, #1
 800e752:	701a      	strb	r2, [r3, #0]
 800e754:	4b04      	ldr	r3, [pc, #16]	@ (800e768 <rcutils_get_error_string+0x24>)
 800e756:	7818      	ldrb	r0, [r3, #0]
 800e758:	4770      	bx	lr
 800e75a:	4b04      	ldr	r3, [pc, #16]	@ (800e76c <rcutils_get_error_string+0x28>)
 800e75c:	7818      	ldrb	r0, [r3, #0]
 800e75e:	4770      	bx	lr
 800e760:	20011f26 	.word	0x20011f26
 800e764:	20011f39 	.word	0x20011f39
 800e768:	20011f38 	.word	0x20011f38
 800e76c:	08022b88 	.word	0x08022b88

0800e770 <rcutils_reset_error>:
 800e770:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e790 <rcutils_reset_error+0x20>
 800e774:	4a08      	ldr	r2, [pc, #32]	@ (800e798 <rcutils_reset_error+0x28>)
 800e776:	4809      	ldr	r0, [pc, #36]	@ (800e79c <rcutils_reset_error+0x2c>)
 800e778:	4909      	ldr	r1, [pc, #36]	@ (800e7a0 <rcutils_reset_error+0x30>)
 800e77a:	2300      	movs	r3, #0
 800e77c:	8013      	strh	r3, [r2, #0]
 800e77e:	ed82 7b02 	vstr	d7, [r2, #8]
 800e782:	4a08      	ldr	r2, [pc, #32]	@ (800e7a4 <rcutils_reset_error+0x34>)
 800e784:	7003      	strb	r3, [r0, #0]
 800e786:	700b      	strb	r3, [r1, #0]
 800e788:	7013      	strb	r3, [r2, #0]
 800e78a:	4770      	bx	lr
 800e78c:	f3af 8000 	nop.w
	...
 800e798:	20011f28 	.word	0x20011f28
 800e79c:	20011f39 	.word	0x20011f39
 800e7a0:	20011f38 	.word	0x20011f38
 800e7a4:	20011f26 	.word	0x20011f26

0800e7a8 <rcutils_system_time_now>:
 800e7a8:	b308      	cbz	r0, 800e7ee <rcutils_system_time_now+0x46>
 800e7aa:	b570      	push	{r4, r5, r6, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	4669      	mov	r1, sp
 800e7b2:	2001      	movs	r0, #1
 800e7b4:	f7f3 ffcc 	bl	8002750 <clock_gettime>
 800e7b8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e7bc:	2d00      	cmp	r5, #0
 800e7be:	db13      	blt.n	800e7e8 <rcutils_system_time_now+0x40>
 800e7c0:	9902      	ldr	r1, [sp, #8]
 800e7c2:	2900      	cmp	r1, #0
 800e7c4:	db0d      	blt.n	800e7e2 <rcutils_system_time_now+0x3a>
 800e7c6:	4e0b      	ldr	r6, [pc, #44]	@ (800e7f4 <rcutils_system_time_now+0x4c>)
 800e7c8:	fba3 3206 	umull	r3, r2, r3, r6
 800e7cc:	185b      	adds	r3, r3, r1
 800e7ce:	fb06 2205 	mla	r2, r6, r5, r2
 800e7d2:	f04f 0000 	mov.w	r0, #0
 800e7d6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e7da:	e9c4 3200 	strd	r3, r2, [r4]
 800e7de:	b004      	add	sp, #16
 800e7e0:	bd70      	pop	{r4, r5, r6, pc}
 800e7e2:	ea53 0205 	orrs.w	r2, r3, r5
 800e7e6:	d1ee      	bne.n	800e7c6 <rcutils_system_time_now+0x1e>
 800e7e8:	2002      	movs	r0, #2
 800e7ea:	b004      	add	sp, #16
 800e7ec:	bd70      	pop	{r4, r5, r6, pc}
 800e7ee:	200b      	movs	r0, #11
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	3b9aca00 	.word	0x3b9aca00

0800e7f8 <rcutils_steady_time_now>:
 800e7f8:	b308      	cbz	r0, 800e83e <rcutils_steady_time_now+0x46>
 800e7fa:	b570      	push	{r4, r5, r6, lr}
 800e7fc:	b084      	sub	sp, #16
 800e7fe:	4604      	mov	r4, r0
 800e800:	4669      	mov	r1, sp
 800e802:	2000      	movs	r0, #0
 800e804:	f7f3 ffa4 	bl	8002750 <clock_gettime>
 800e808:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e80c:	2d00      	cmp	r5, #0
 800e80e:	db13      	blt.n	800e838 <rcutils_steady_time_now+0x40>
 800e810:	9902      	ldr	r1, [sp, #8]
 800e812:	2900      	cmp	r1, #0
 800e814:	db0d      	blt.n	800e832 <rcutils_steady_time_now+0x3a>
 800e816:	4e0b      	ldr	r6, [pc, #44]	@ (800e844 <rcutils_steady_time_now+0x4c>)
 800e818:	fba3 3206 	umull	r3, r2, r3, r6
 800e81c:	185b      	adds	r3, r3, r1
 800e81e:	fb06 2205 	mla	r2, r6, r5, r2
 800e822:	f04f 0000 	mov.w	r0, #0
 800e826:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e82a:	e9c4 3200 	strd	r3, r2, [r4]
 800e82e:	b004      	add	sp, #16
 800e830:	bd70      	pop	{r4, r5, r6, pc}
 800e832:	ea53 0205 	orrs.w	r2, r3, r5
 800e836:	d1ee      	bne.n	800e816 <rcutils_steady_time_now+0x1e>
 800e838:	2002      	movs	r0, #2
 800e83a:	b004      	add	sp, #16
 800e83c:	bd70      	pop	{r4, r5, r6, pc}
 800e83e:	200b      	movs	r0, #11
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	3b9aca00 	.word	0x3b9aca00

0800e848 <rmw_get_default_publisher_options>:
 800e848:	2200      	movs	r2, #0
 800e84a:	6002      	str	r2, [r0, #0]
 800e84c:	7102      	strb	r2, [r0, #4]
 800e84e:	4770      	bx	lr

0800e850 <rmw_uros_set_custom_transport>:
 800e850:	b470      	push	{r4, r5, r6}
 800e852:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e856:	b162      	cbz	r2, 800e872 <rmw_uros_set_custom_transport+0x22>
 800e858:	b15b      	cbz	r3, 800e872 <rmw_uros_set_custom_transport+0x22>
 800e85a:	b155      	cbz	r5, 800e872 <rmw_uros_set_custom_transport+0x22>
 800e85c:	b14e      	cbz	r6, 800e872 <rmw_uros_set_custom_transport+0x22>
 800e85e:	4c06      	ldr	r4, [pc, #24]	@ (800e878 <rmw_uros_set_custom_transport+0x28>)
 800e860:	7020      	strb	r0, [r4, #0]
 800e862:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e866:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e86a:	6166      	str	r6, [r4, #20]
 800e86c:	2000      	movs	r0, #0
 800e86e:	bc70      	pop	{r4, r5, r6}
 800e870:	4770      	bx	lr
 800e872:	200b      	movs	r0, #11
 800e874:	bc70      	pop	{r4, r5, r6}
 800e876:	4770      	bx	lr
 800e878:	20011f3c 	.word	0x20011f3c

0800e87c <flush_session>:
 800e87c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e87e:	f005 bbab 	b.w	8013fd8 <uxr_run_session_until_confirm_delivery>
 800e882:	bf00      	nop

0800e884 <rmw_publish>:
 800e884:	2800      	cmp	r0, #0
 800e886:	d053      	beq.n	800e930 <rmw_publish+0xac>
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	460d      	mov	r5, r1
 800e88c:	b08e      	sub	sp, #56	@ 0x38
 800e88e:	2900      	cmp	r1, #0
 800e890:	d04b      	beq.n	800e92a <rmw_publish+0xa6>
 800e892:	4604      	mov	r4, r0
 800e894:	6800      	ldr	r0, [r0, #0]
 800e896:	f000 fd87 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d045      	beq.n	800e92a <rmw_publish+0xa6>
 800e89e:	6866      	ldr	r6, [r4, #4]
 800e8a0:	2e00      	cmp	r6, #0
 800e8a2:	d042      	beq.n	800e92a <rmw_publish+0xa6>
 800e8a4:	69b4      	ldr	r4, [r6, #24]
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	6923      	ldr	r3, [r4, #16]
 800e8aa:	4798      	blx	r3
 800e8ac:	69f3      	ldr	r3, [r6, #28]
 800e8ae:	9005      	str	r0, [sp, #20]
 800e8b0:	b113      	cbz	r3, 800e8b8 <rmw_publish+0x34>
 800e8b2:	a805      	add	r0, sp, #20
 800e8b4:	4798      	blx	r3
 800e8b6:	9805      	ldr	r0, [sp, #20]
 800e8b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	9000      	str	r0, [sp, #0]
 800e8c0:	6972      	ldr	r2, [r6, #20]
 800e8c2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e8c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e8c8:	ab06      	add	r3, sp, #24
 800e8ca:	f006 f971 	bl	8014bb0 <uxr_prepare_output_stream>
 800e8ce:	b1d8      	cbz	r0, 800e908 <rmw_publish+0x84>
 800e8d0:	68a3      	ldr	r3, [r4, #8]
 800e8d2:	a906      	add	r1, sp, #24
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	4798      	blx	r3
 800e8d8:	6a33      	ldr	r3, [r6, #32]
 800e8da:	4604      	mov	r4, r0
 800e8dc:	b10b      	cbz	r3, 800e8e2 <rmw_publish+0x5e>
 800e8de:	a806      	add	r0, sp, #24
 800e8e0:	4798      	blx	r3
 800e8e2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e8ec:	d022      	beq.n	800e934 <rmw_publish+0xb0>
 800e8ee:	6918      	ldr	r0, [r3, #16]
 800e8f0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e8f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8f6:	f005 fb6f 	bl	8013fd8 <uxr_run_session_until_confirm_delivery>
 800e8fa:	4020      	ands	r0, r4
 800e8fc:	b2c4      	uxtb	r4, r0
 800e8fe:	f084 0001 	eor.w	r0, r4, #1
 800e902:	b2c0      	uxtb	r0, r0
 800e904:	b00e      	add	sp, #56	@ 0x38
 800e906:	bd70      	pop	{r4, r5, r6, pc}
 800e908:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e90c:	6918      	ldr	r0, [r3, #16]
 800e90e:	9b05      	ldr	r3, [sp, #20]
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	4b0b      	ldr	r3, [pc, #44]	@ (800e940 <rmw_publish+0xbc>)
 800e914:	9301      	str	r3, [sp, #4]
 800e916:	9602      	str	r6, [sp, #8]
 800e918:	6972      	ldr	r2, [r6, #20]
 800e91a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e91c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e920:	ab06      	add	r3, sp, #24
 800e922:	f006 f975 	bl	8014c10 <uxr_prepare_output_stream_fragmented>
 800e926:	2800      	cmp	r0, #0
 800e928:	d1d2      	bne.n	800e8d0 <rmw_publish+0x4c>
 800e92a:	2001      	movs	r0, #1
 800e92c:	b00e      	add	sp, #56	@ 0x38
 800e92e:	bd70      	pop	{r4, r5, r6, pc}
 800e930:	2001      	movs	r0, #1
 800e932:	4770      	bx	lr
 800e934:	6918      	ldr	r0, [r3, #16]
 800e936:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e93a:	f004 ff8d 	bl	8013858 <uxr_flash_output_streams>
 800e93e:	e7de      	b.n	800e8fe <rmw_publish+0x7a>
 800e940:	0800e87d 	.word	0x0800e87d

0800e944 <rmw_create_publisher>:
 800e944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e948:	b087      	sub	sp, #28
 800e94a:	2800      	cmp	r0, #0
 800e94c:	f000 80cc 	beq.w	800eae8 <rmw_create_publisher+0x1a4>
 800e950:	460e      	mov	r6, r1
 800e952:	2900      	cmp	r1, #0
 800e954:	f000 80c8 	beq.w	800eae8 <rmw_create_publisher+0x1a4>
 800e958:	4604      	mov	r4, r0
 800e95a:	6800      	ldr	r0, [r0, #0]
 800e95c:	4615      	mov	r5, r2
 800e95e:	4698      	mov	r8, r3
 800e960:	f000 fd22 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 800e964:	2800      	cmp	r0, #0
 800e966:	f000 80bf 	beq.w	800eae8 <rmw_create_publisher+0x1a4>
 800e96a:	2d00      	cmp	r5, #0
 800e96c:	f000 80bc 	beq.w	800eae8 <rmw_create_publisher+0x1a4>
 800e970:	782b      	ldrb	r3, [r5, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	f000 80b8 	beq.w	800eae8 <rmw_create_publisher+0x1a4>
 800e978:	f1b8 0f00 	cmp.w	r8, #0
 800e97c:	f000 80b4 	beq.w	800eae8 <rmw_create_publisher+0x1a4>
 800e980:	485c      	ldr	r0, [pc, #368]	@ (800eaf4 <rmw_create_publisher+0x1b0>)
 800e982:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e986:	f00e f9a7 	bl	801ccd8 <get_memory>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	f000 80ac 	beq.w	800eae8 <rmw_create_publisher+0x1a4>
 800e990:	6884      	ldr	r4, [r0, #8]
 800e992:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e996:	f00e fa07 	bl	801cda8 <rmw_get_implementation_identifier>
 800e99a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e99e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e9a2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f7f1 fc2a 	bl	8000200 <strlen>
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	283c      	cmp	r0, #60	@ 0x3c
 800e9b0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e9b4:	f200 8091 	bhi.w	800eada <rmw_create_publisher+0x196>
 800e9b8:	4a4f      	ldr	r2, [pc, #316]	@ (800eaf8 <rmw_create_publisher+0x1b4>)
 800e9ba:	462b      	mov	r3, r5
 800e9bc:	213c      	movs	r1, #60	@ 0x3c
 800e9be:	4650      	mov	r0, sl
 800e9c0:	f012 fb5a 	bl	8021078 <sniprintf>
 800e9c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e9c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e9ca:	4641      	mov	r1, r8
 800e9cc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e9d0:	2250      	movs	r2, #80	@ 0x50
 800e9d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e9d6:	f013 f82c 	bl	8021a32 <memcpy>
 800e9da:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e9de:	4947      	ldr	r1, [pc, #284]	@ (800eafc <rmw_create_publisher+0x1b8>)
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9e6:	bf0c      	ite	eq
 800e9e8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e9ec:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e9f0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	f000 fce3 	bl	800f3c4 <get_message_typesupport_handle>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	d06b      	beq.n	800eada <rmw_create_publisher+0x196>
 800ea02:	6842      	ldr	r2, [r0, #4]
 800ea04:	61a2      	str	r2, [r4, #24]
 800ea06:	2a00      	cmp	r2, #0
 800ea08:	d067      	beq.n	800eada <rmw_create_publisher+0x196>
 800ea0a:	4629      	mov	r1, r5
 800ea0c:	4643      	mov	r3, r8
 800ea0e:	4648      	mov	r0, r9
 800ea10:	f00e fc30 	bl	801d274 <create_topic>
 800ea14:	6260      	str	r0, [r4, #36]	@ 0x24
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d063      	beq.n	800eae2 <rmw_create_publisher+0x19e>
 800ea1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea22:	2103      	movs	r1, #3
 800ea24:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ea28:	1c42      	adds	r2, r0, #1
 800ea2a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ea2e:	f004 fdc5 	bl	80135bc <uxr_object_id>
 800ea32:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ea36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea3a:	6120      	str	r0, [r4, #16]
 800ea3c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ea40:	6910      	ldr	r0, [r2, #16]
 800ea42:	2506      	movs	r5, #6
 800ea44:	9500      	str	r5, [sp, #0]
 800ea46:	6819      	ldr	r1, [r3, #0]
 800ea48:	6922      	ldr	r2, [r4, #16]
 800ea4a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ea4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea52:	f004 fc2b 	bl	80132ac <uxr_buffer_create_publisher_bin>
 800ea56:	4602      	mov	r2, r0
 800ea58:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ea5c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ea60:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ea64:	f000 fb86 	bl	800f174 <run_xrce_session>
 800ea68:	b3b8      	cbz	r0, 800eada <rmw_create_publisher+0x196>
 800ea6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea72:	2105      	movs	r1, #5
 800ea74:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ea78:	1c42      	adds	r2, r0, #1
 800ea7a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ea7e:	f004 fd9d 	bl	80135bc <uxr_object_id>
 800ea82:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ea86:	6160      	str	r0, [r4, #20]
 800ea88:	691e      	ldr	r6, [r3, #16]
 800ea8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea8e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ea92:	f10d 0a10 	add.w	sl, sp, #16
 800ea96:	4641      	mov	r1, r8
 800ea98:	4650      	mov	r0, sl
 800ea9a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ea9e:	f000 fb85 	bl	800f1ac <convert_qos_profile>
 800eaa2:	9503      	str	r5, [sp, #12]
 800eaa4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800eaa8:	9001      	str	r0, [sp, #4]
 800eaaa:	f8ad 1008 	strh.w	r1, [sp, #8]
 800eaae:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eab2:	9300      	str	r3, [sp, #0]
 800eab4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800eab8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800eabc:	f8d8 1000 	ldr.w	r1, [r8]
 800eac0:	4630      	mov	r0, r6
 800eac2:	f004 fc53 	bl	801336c <uxr_buffer_create_datawriter_bin>
 800eac6:	4602      	mov	r2, r0
 800eac8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eacc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ead0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ead4:	f000 fb4e 	bl	800f174 <run_xrce_session>
 800ead8:	b938      	cbnz	r0, 800eaea <rmw_create_publisher+0x1a6>
 800eada:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eadc:	b108      	cbz	r0, 800eae2 <rmw_create_publisher+0x19e>
 800eade:	f000 fa47 	bl	800ef70 <rmw_uxrce_fini_topic_memory>
 800eae2:	4638      	mov	r0, r7
 800eae4:	f000 f9ec 	bl	800eec0 <rmw_uxrce_fini_publisher_memory>
 800eae8:	2700      	movs	r7, #0
 800eaea:	4638      	mov	r0, r7
 800eaec:	b007      	add	sp, #28
 800eaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf2:	bf00      	nop
 800eaf4:	20016ce4 	.word	0x20016ce4
 800eaf8:	0802343c 	.word	0x0802343c
 800eafc:	08022ad4 	.word	0x08022ad4

0800eb00 <rmw_publisher_get_actual_qos>:
 800eb00:	b150      	cbz	r0, 800eb18 <rmw_publisher_get_actual_qos+0x18>
 800eb02:	b508      	push	{r3, lr}
 800eb04:	460b      	mov	r3, r1
 800eb06:	b149      	cbz	r1, 800eb1c <rmw_publisher_get_actual_qos+0x1c>
 800eb08:	6841      	ldr	r1, [r0, #4]
 800eb0a:	2250      	movs	r2, #80	@ 0x50
 800eb0c:	3128      	adds	r1, #40	@ 0x28
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f012 ff8f 	bl	8021a32 <memcpy>
 800eb14:	2000      	movs	r0, #0
 800eb16:	bd08      	pop	{r3, pc}
 800eb18:	200b      	movs	r0, #11
 800eb1a:	4770      	bx	lr
 800eb1c:	200b      	movs	r0, #11
 800eb1e:	bd08      	pop	{r3, pc}

0800eb20 <rmw_destroy_publisher>:
 800eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb22:	b128      	cbz	r0, 800eb30 <rmw_destroy_publisher+0x10>
 800eb24:	4604      	mov	r4, r0
 800eb26:	6800      	ldr	r0, [r0, #0]
 800eb28:	460d      	mov	r5, r1
 800eb2a:	f000 fc3d 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 800eb2e:	b910      	cbnz	r0, 800eb36 <rmw_destroy_publisher+0x16>
 800eb30:	2401      	movs	r4, #1
 800eb32:	4620      	mov	r0, r4
 800eb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb36:	6863      	ldr	r3, [r4, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d0f9      	beq.n	800eb30 <rmw_destroy_publisher+0x10>
 800eb3c:	2d00      	cmp	r5, #0
 800eb3e:	d0f7      	beq.n	800eb30 <rmw_destroy_publisher+0x10>
 800eb40:	6828      	ldr	r0, [r5, #0]
 800eb42:	f000 fc31 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d0f2      	beq.n	800eb30 <rmw_destroy_publisher+0x10>
 800eb4a:	686c      	ldr	r4, [r5, #4]
 800eb4c:	2c00      	cmp	r4, #0
 800eb4e:	d0ef      	beq.n	800eb30 <rmw_destroy_publisher+0x10>
 800eb50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eb52:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800eb56:	f00e fbdd 	bl	801d314 <destroy_topic>
 800eb5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eb5e:	6962      	ldr	r2, [r4, #20]
 800eb60:	6918      	ldr	r0, [r3, #16]
 800eb62:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb6a:	6819      	ldr	r1, [r3, #0]
 800eb6c:	f004 faea 	bl	8013144 <uxr_buffer_delete_entity>
 800eb70:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eb74:	6922      	ldr	r2, [r4, #16]
 800eb76:	691b      	ldr	r3, [r3, #16]
 800eb78:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	6809      	ldr	r1, [r1, #0]
 800eb80:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eb84:	f004 fade 	bl	8013144 <uxr_buffer_delete_entity>
 800eb88:	693e      	ldr	r6, [r7, #16]
 800eb8a:	4622      	mov	r2, r4
 800eb8c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800eb90:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800eb94:	4604      	mov	r4, r0
 800eb96:	4630      	mov	r0, r6
 800eb98:	f000 faec 	bl	800f174 <run_xrce_session>
 800eb9c:	693e      	ldr	r6, [r7, #16]
 800eb9e:	4622      	mov	r2, r4
 800eba0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800eba4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800eba8:	4604      	mov	r4, r0
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f000 fae2 	bl	800f174 <run_xrce_session>
 800ebb0:	b12c      	cbz	r4, 800ebbe <rmw_destroy_publisher+0x9e>
 800ebb2:	b120      	cbz	r0, 800ebbe <rmw_destroy_publisher+0x9e>
 800ebb4:	2400      	movs	r4, #0
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f000 f982 	bl	800eec0 <rmw_uxrce_fini_publisher_memory>
 800ebbc:	e7b9      	b.n	800eb32 <rmw_destroy_publisher+0x12>
 800ebbe:	2402      	movs	r4, #2
 800ebc0:	e7f9      	b.n	800ebb6 <rmw_destroy_publisher+0x96>
 800ebc2:	bf00      	nop

0800ebc4 <rmw_uxrce_init_service_memory>:
 800ebc4:	b1e2      	cbz	r2, 800ec00 <rmw_uxrce_init_service_memory+0x3c>
 800ebc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebca:	7b05      	ldrb	r5, [r0, #12]
 800ebcc:	4606      	mov	r6, r0
 800ebce:	b9ad      	cbnz	r5, 800ebfc <rmw_uxrce_init_service_memory+0x38>
 800ebd0:	23c8      	movs	r3, #200	@ 0xc8
 800ebd2:	e9c0 5500 	strd	r5, r5, [r0]
 800ebd6:	6083      	str	r3, [r0, #8]
 800ebd8:	f240 1301 	movw	r3, #257	@ 0x101
 800ebdc:	4617      	mov	r7, r2
 800ebde:	8183      	strh	r3, [r0, #12]
 800ebe0:	460c      	mov	r4, r1
 800ebe2:	46a8      	mov	r8, r5
 800ebe4:	4621      	mov	r1, r4
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	3501      	adds	r5, #1
 800ebea:	f00e f885 	bl	801ccf8 <put_memory>
 800ebee:	42af      	cmp	r7, r5
 800ebf0:	60a4      	str	r4, [r4, #8]
 800ebf2:	f884 800c 	strb.w	r8, [r4, #12]
 800ebf6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ebfa:	d1f3      	bne.n	800ebe4 <rmw_uxrce_init_service_memory+0x20>
 800ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop

0800ec04 <rmw_uxrce_init_client_memory>:
 800ec04:	b1e2      	cbz	r2, 800ec40 <rmw_uxrce_init_client_memory+0x3c>
 800ec06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0a:	7b05      	ldrb	r5, [r0, #12]
 800ec0c:	4606      	mov	r6, r0
 800ec0e:	b9ad      	cbnz	r5, 800ec3c <rmw_uxrce_init_client_memory+0x38>
 800ec10:	23c8      	movs	r3, #200	@ 0xc8
 800ec12:	e9c0 5500 	strd	r5, r5, [r0]
 800ec16:	6083      	str	r3, [r0, #8]
 800ec18:	f240 1301 	movw	r3, #257	@ 0x101
 800ec1c:	4617      	mov	r7, r2
 800ec1e:	8183      	strh	r3, [r0, #12]
 800ec20:	460c      	mov	r4, r1
 800ec22:	46a8      	mov	r8, r5
 800ec24:	4621      	mov	r1, r4
 800ec26:	4630      	mov	r0, r6
 800ec28:	3501      	adds	r5, #1
 800ec2a:	f00e f865 	bl	801ccf8 <put_memory>
 800ec2e:	42af      	cmp	r7, r5
 800ec30:	60a4      	str	r4, [r4, #8]
 800ec32:	f884 800c 	strb.w	r8, [r4, #12]
 800ec36:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ec3a:	d1f3      	bne.n	800ec24 <rmw_uxrce_init_client_memory+0x20>
 800ec3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop

0800ec44 <rmw_uxrce_init_publisher_memory>:
 800ec44:	b1e2      	cbz	r2, 800ec80 <rmw_uxrce_init_publisher_memory+0x3c>
 800ec46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec4a:	7b05      	ldrb	r5, [r0, #12]
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	b9ad      	cbnz	r5, 800ec7c <rmw_uxrce_init_publisher_memory+0x38>
 800ec50:	23d8      	movs	r3, #216	@ 0xd8
 800ec52:	e9c0 5500 	strd	r5, r5, [r0]
 800ec56:	6083      	str	r3, [r0, #8]
 800ec58:	f240 1301 	movw	r3, #257	@ 0x101
 800ec5c:	4617      	mov	r7, r2
 800ec5e:	8183      	strh	r3, [r0, #12]
 800ec60:	460c      	mov	r4, r1
 800ec62:	46a8      	mov	r8, r5
 800ec64:	4621      	mov	r1, r4
 800ec66:	4630      	mov	r0, r6
 800ec68:	3501      	adds	r5, #1
 800ec6a:	f00e f845 	bl	801ccf8 <put_memory>
 800ec6e:	42af      	cmp	r7, r5
 800ec70:	60a4      	str	r4, [r4, #8]
 800ec72:	f884 800c 	strb.w	r8, [r4, #12]
 800ec76:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ec7a:	d1f3      	bne.n	800ec64 <rmw_uxrce_init_publisher_memory+0x20>
 800ec7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop

0800ec84 <rmw_uxrce_init_subscription_memory>:
 800ec84:	b1e2      	cbz	r2, 800ecc0 <rmw_uxrce_init_subscription_memory+0x3c>
 800ec86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8a:	7b05      	ldrb	r5, [r0, #12]
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	b9ad      	cbnz	r5, 800ecbc <rmw_uxrce_init_subscription_memory+0x38>
 800ec90:	23d8      	movs	r3, #216	@ 0xd8
 800ec92:	e9c0 5500 	strd	r5, r5, [r0]
 800ec96:	6083      	str	r3, [r0, #8]
 800ec98:	f240 1301 	movw	r3, #257	@ 0x101
 800ec9c:	4617      	mov	r7, r2
 800ec9e:	8183      	strh	r3, [r0, #12]
 800eca0:	460c      	mov	r4, r1
 800eca2:	46a8      	mov	r8, r5
 800eca4:	4621      	mov	r1, r4
 800eca6:	4630      	mov	r0, r6
 800eca8:	3501      	adds	r5, #1
 800ecaa:	f00e f825 	bl	801ccf8 <put_memory>
 800ecae:	42af      	cmp	r7, r5
 800ecb0:	60a4      	str	r4, [r4, #8]
 800ecb2:	f884 800c 	strb.w	r8, [r4, #12]
 800ecb6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ecba:	d1f3      	bne.n	800eca4 <rmw_uxrce_init_subscription_memory+0x20>
 800ecbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop

0800ecc4 <rmw_uxrce_init_node_memory>:
 800ecc4:	b1e2      	cbz	r2, 800ed00 <rmw_uxrce_init_node_memory+0x3c>
 800ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecca:	7b05      	ldrb	r5, [r0, #12]
 800eccc:	4606      	mov	r6, r0
 800ecce:	b9ad      	cbnz	r5, 800ecfc <rmw_uxrce_init_node_memory+0x38>
 800ecd0:	23a4      	movs	r3, #164	@ 0xa4
 800ecd2:	e9c0 5500 	strd	r5, r5, [r0]
 800ecd6:	6083      	str	r3, [r0, #8]
 800ecd8:	f240 1301 	movw	r3, #257	@ 0x101
 800ecdc:	4617      	mov	r7, r2
 800ecde:	8183      	strh	r3, [r0, #12]
 800ece0:	460c      	mov	r4, r1
 800ece2:	46a8      	mov	r8, r5
 800ece4:	4621      	mov	r1, r4
 800ece6:	4630      	mov	r0, r6
 800ece8:	3501      	adds	r5, #1
 800ecea:	f00e f805 	bl	801ccf8 <put_memory>
 800ecee:	42af      	cmp	r7, r5
 800ecf0:	60a4      	str	r4, [r4, #8]
 800ecf2:	f884 800c 	strb.w	r8, [r4, #12]
 800ecf6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ecfa:	d1f3      	bne.n	800ece4 <rmw_uxrce_init_node_memory+0x20>
 800ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop

0800ed04 <rmw_uxrce_init_session_memory>:
 800ed04:	b1ea      	cbz	r2, 800ed42 <rmw_uxrce_init_session_memory+0x3e>
 800ed06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed0a:	7b05      	ldrb	r5, [r0, #12]
 800ed0c:	4606      	mov	r6, r0
 800ed0e:	b9b5      	cbnz	r5, 800ed3e <rmw_uxrce_init_session_memory+0x3a>
 800ed10:	e9c0 5500 	strd	r5, r5, [r0]
 800ed14:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ed18:	f240 1301 	movw	r3, #257	@ 0x101
 800ed1c:	4617      	mov	r7, r2
 800ed1e:	f8c0 8008 	str.w	r8, [r0, #8]
 800ed22:	460c      	mov	r4, r1
 800ed24:	8183      	strh	r3, [r0, #12]
 800ed26:	46a9      	mov	r9, r5
 800ed28:	4621      	mov	r1, r4
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	3501      	adds	r5, #1
 800ed2e:	f00d ffe3 	bl	801ccf8 <put_memory>
 800ed32:	42af      	cmp	r7, r5
 800ed34:	60a4      	str	r4, [r4, #8]
 800ed36:	f884 900c 	strb.w	r9, [r4, #12]
 800ed3a:	4444      	add	r4, r8
 800ed3c:	d1f4      	bne.n	800ed28 <rmw_uxrce_init_session_memory+0x24>
 800ed3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed42:	4770      	bx	lr

0800ed44 <rmw_uxrce_init_topic_memory>:
 800ed44:	b1e2      	cbz	r2, 800ed80 <rmw_uxrce_init_topic_memory+0x3c>
 800ed46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4a:	7b05      	ldrb	r5, [r0, #12]
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	b9ad      	cbnz	r5, 800ed7c <rmw_uxrce_init_topic_memory+0x38>
 800ed50:	231c      	movs	r3, #28
 800ed52:	e9c0 5500 	strd	r5, r5, [r0]
 800ed56:	6083      	str	r3, [r0, #8]
 800ed58:	f240 1301 	movw	r3, #257	@ 0x101
 800ed5c:	4617      	mov	r7, r2
 800ed5e:	8183      	strh	r3, [r0, #12]
 800ed60:	460c      	mov	r4, r1
 800ed62:	46a8      	mov	r8, r5
 800ed64:	4621      	mov	r1, r4
 800ed66:	4630      	mov	r0, r6
 800ed68:	3501      	adds	r5, #1
 800ed6a:	f00d ffc5 	bl	801ccf8 <put_memory>
 800ed6e:	42af      	cmp	r7, r5
 800ed70:	60a4      	str	r4, [r4, #8]
 800ed72:	f884 800c 	strb.w	r8, [r4, #12]
 800ed76:	f104 041c 	add.w	r4, r4, #28
 800ed7a:	d1f3      	bne.n	800ed64 <rmw_uxrce_init_topic_memory+0x20>
 800ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop

0800ed84 <rmw_uxrce_init_static_input_buffer_memory>:
 800ed84:	b1ea      	cbz	r2, 800edc2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ed86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8a:	7b05      	ldrb	r5, [r0, #12]
 800ed8c:	4606      	mov	r6, r0
 800ed8e:	b9b5      	cbnz	r5, 800edbe <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ed90:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ed94:	e9c0 5500 	strd	r5, r5, [r0]
 800ed98:	6083      	str	r3, [r0, #8]
 800ed9a:	f240 1301 	movw	r3, #257	@ 0x101
 800ed9e:	4617      	mov	r7, r2
 800eda0:	8183      	strh	r3, [r0, #12]
 800eda2:	460c      	mov	r4, r1
 800eda4:	46a8      	mov	r8, r5
 800eda6:	4621      	mov	r1, r4
 800eda8:	4630      	mov	r0, r6
 800edaa:	3501      	adds	r5, #1
 800edac:	f00d ffa4 	bl	801ccf8 <put_memory>
 800edb0:	42af      	cmp	r7, r5
 800edb2:	60a4      	str	r4, [r4, #8]
 800edb4:	f884 800c 	strb.w	r8, [r4, #12]
 800edb8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800edbc:	d1f3      	bne.n	800eda6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800edbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc2:	4770      	bx	lr

0800edc4 <rmw_uxrce_init_init_options_impl_memory>:
 800edc4:	b1e2      	cbz	r2, 800ee00 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800edc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edca:	7b05      	ldrb	r5, [r0, #12]
 800edcc:	4606      	mov	r6, r0
 800edce:	b9ad      	cbnz	r5, 800edfc <rmw_uxrce_init_init_options_impl_memory+0x38>
 800edd0:	232c      	movs	r3, #44	@ 0x2c
 800edd2:	e9c0 5500 	strd	r5, r5, [r0]
 800edd6:	6083      	str	r3, [r0, #8]
 800edd8:	f240 1301 	movw	r3, #257	@ 0x101
 800eddc:	4617      	mov	r7, r2
 800edde:	8183      	strh	r3, [r0, #12]
 800ede0:	460c      	mov	r4, r1
 800ede2:	46a8      	mov	r8, r5
 800ede4:	4621      	mov	r1, r4
 800ede6:	4630      	mov	r0, r6
 800ede8:	3501      	adds	r5, #1
 800edea:	f00d ff85 	bl	801ccf8 <put_memory>
 800edee:	42af      	cmp	r7, r5
 800edf0:	60a4      	str	r4, [r4, #8]
 800edf2:	f884 800c 	strb.w	r8, [r4, #12]
 800edf6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800edfa:	d1f3      	bne.n	800ede4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop

0800ee04 <rmw_uxrce_init_wait_set_memory>:
 800ee04:	b1e2      	cbz	r2, 800ee40 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ee06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0a:	7b05      	ldrb	r5, [r0, #12]
 800ee0c:	4606      	mov	r6, r0
 800ee0e:	b9ad      	cbnz	r5, 800ee3c <rmw_uxrce_init_wait_set_memory+0x38>
 800ee10:	231c      	movs	r3, #28
 800ee12:	e9c0 5500 	strd	r5, r5, [r0]
 800ee16:	6083      	str	r3, [r0, #8]
 800ee18:	f240 1301 	movw	r3, #257	@ 0x101
 800ee1c:	4617      	mov	r7, r2
 800ee1e:	8183      	strh	r3, [r0, #12]
 800ee20:	460c      	mov	r4, r1
 800ee22:	46a8      	mov	r8, r5
 800ee24:	4621      	mov	r1, r4
 800ee26:	4630      	mov	r0, r6
 800ee28:	3501      	adds	r5, #1
 800ee2a:	f00d ff65 	bl	801ccf8 <put_memory>
 800ee2e:	42af      	cmp	r7, r5
 800ee30:	60a4      	str	r4, [r4, #8]
 800ee32:	f884 800c 	strb.w	r8, [r4, #12]
 800ee36:	f104 041c 	add.w	r4, r4, #28
 800ee3a:	d1f3      	bne.n	800ee24 <rmw_uxrce_init_wait_set_memory+0x20>
 800ee3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop

0800ee44 <rmw_uxrce_init_guard_condition_memory>:
 800ee44:	b1e2      	cbz	r2, 800ee80 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ee46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4a:	7b05      	ldrb	r5, [r0, #12]
 800ee4c:	4606      	mov	r6, r0
 800ee4e:	b9ad      	cbnz	r5, 800ee7c <rmw_uxrce_init_guard_condition_memory+0x38>
 800ee50:	2320      	movs	r3, #32
 800ee52:	e9c0 5500 	strd	r5, r5, [r0]
 800ee56:	6083      	str	r3, [r0, #8]
 800ee58:	f240 1301 	movw	r3, #257	@ 0x101
 800ee5c:	4617      	mov	r7, r2
 800ee5e:	8183      	strh	r3, [r0, #12]
 800ee60:	460c      	mov	r4, r1
 800ee62:	46a8      	mov	r8, r5
 800ee64:	4621      	mov	r1, r4
 800ee66:	4630      	mov	r0, r6
 800ee68:	3501      	adds	r5, #1
 800ee6a:	f00d ff45 	bl	801ccf8 <put_memory>
 800ee6e:	42af      	cmp	r7, r5
 800ee70:	60a4      	str	r4, [r4, #8]
 800ee72:	f884 800c 	strb.w	r8, [r4, #12]
 800ee76:	f104 0420 	add.w	r4, r4, #32
 800ee7a:	d1f3      	bne.n	800ee64 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ee7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop

0800ee84 <rmw_uxrce_fini_session_memory>:
 800ee84:	4601      	mov	r1, r0
 800ee86:	4801      	ldr	r0, [pc, #4]	@ (800ee8c <rmw_uxrce_fini_session_memory+0x8>)
 800ee88:	f00d bf36 	b.w	801ccf8 <put_memory>
 800ee8c:	20016d04 	.word	0x20016d04

0800ee90 <rmw_uxrce_fini_node_memory>:
 800ee90:	b538      	push	{r3, r4, r5, lr}
 800ee92:	4604      	mov	r4, r0
 800ee94:	6800      	ldr	r0, [r0, #0]
 800ee96:	b128      	cbz	r0, 800eea4 <rmw_uxrce_fini_node_memory+0x14>
 800ee98:	4b07      	ldr	r3, [pc, #28]	@ (800eeb8 <rmw_uxrce_fini_node_memory+0x28>)
 800ee9a:	6819      	ldr	r1, [r3, #0]
 800ee9c:	f7f1 f9b8 	bl	8000210 <strcmp>
 800eea0:	b940      	cbnz	r0, 800eeb4 <rmw_uxrce_fini_node_memory+0x24>
 800eea2:	6020      	str	r0, [r4, #0]
 800eea4:	6861      	ldr	r1, [r4, #4]
 800eea6:	b129      	cbz	r1, 800eeb4 <rmw_uxrce_fini_node_memory+0x24>
 800eea8:	2500      	movs	r5, #0
 800eeaa:	4804      	ldr	r0, [pc, #16]	@ (800eebc <rmw_uxrce_fini_node_memory+0x2c>)
 800eeac:	610d      	str	r5, [r1, #16]
 800eeae:	f00d ff23 	bl	801ccf8 <put_memory>
 800eeb2:	6065      	str	r5, [r4, #4]
 800eeb4:	bd38      	pop	{r3, r4, r5, pc}
 800eeb6:	bf00      	nop
 800eeb8:	08025754 	.word	0x08025754
 800eebc:	20016cd4 	.word	0x20016cd4

0800eec0 <rmw_uxrce_fini_publisher_memory>:
 800eec0:	b510      	push	{r4, lr}
 800eec2:	4604      	mov	r4, r0
 800eec4:	6800      	ldr	r0, [r0, #0]
 800eec6:	b128      	cbz	r0, 800eed4 <rmw_uxrce_fini_publisher_memory+0x14>
 800eec8:	4b06      	ldr	r3, [pc, #24]	@ (800eee4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800eeca:	6819      	ldr	r1, [r3, #0]
 800eecc:	f7f1 f9a0 	bl	8000210 <strcmp>
 800eed0:	b938      	cbnz	r0, 800eee2 <rmw_uxrce_fini_publisher_memory+0x22>
 800eed2:	6020      	str	r0, [r4, #0]
 800eed4:	6861      	ldr	r1, [r4, #4]
 800eed6:	b121      	cbz	r1, 800eee2 <rmw_uxrce_fini_publisher_memory+0x22>
 800eed8:	4803      	ldr	r0, [pc, #12]	@ (800eee8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800eeda:	f00d ff0d 	bl	801ccf8 <put_memory>
 800eede:	2300      	movs	r3, #0
 800eee0:	6063      	str	r3, [r4, #4]
 800eee2:	bd10      	pop	{r4, pc}
 800eee4:	08025754 	.word	0x08025754
 800eee8:	20016ce4 	.word	0x20016ce4

0800eeec <rmw_uxrce_fini_subscription_memory>:
 800eeec:	b510      	push	{r4, lr}
 800eeee:	4604      	mov	r4, r0
 800eef0:	6800      	ldr	r0, [r0, #0]
 800eef2:	b128      	cbz	r0, 800ef00 <rmw_uxrce_fini_subscription_memory+0x14>
 800eef4:	4b06      	ldr	r3, [pc, #24]	@ (800ef10 <rmw_uxrce_fini_subscription_memory+0x24>)
 800eef6:	6819      	ldr	r1, [r3, #0]
 800eef8:	f7f1 f98a 	bl	8000210 <strcmp>
 800eefc:	b938      	cbnz	r0, 800ef0e <rmw_uxrce_fini_subscription_memory+0x22>
 800eefe:	6020      	str	r0, [r4, #0]
 800ef00:	6861      	ldr	r1, [r4, #4]
 800ef02:	b121      	cbz	r1, 800ef0e <rmw_uxrce_fini_subscription_memory+0x22>
 800ef04:	4803      	ldr	r0, [pc, #12]	@ (800ef14 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ef06:	f00d fef7 	bl	801ccf8 <put_memory>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	6063      	str	r3, [r4, #4]
 800ef0e:	bd10      	pop	{r4, pc}
 800ef10:	08025754 	.word	0x08025754
 800ef14:	20016d24 	.word	0x20016d24

0800ef18 <rmw_uxrce_fini_service_memory>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	6800      	ldr	r0, [r0, #0]
 800ef1e:	b128      	cbz	r0, 800ef2c <rmw_uxrce_fini_service_memory+0x14>
 800ef20:	4b06      	ldr	r3, [pc, #24]	@ (800ef3c <rmw_uxrce_fini_service_memory+0x24>)
 800ef22:	6819      	ldr	r1, [r3, #0]
 800ef24:	f7f1 f974 	bl	8000210 <strcmp>
 800ef28:	b938      	cbnz	r0, 800ef3a <rmw_uxrce_fini_service_memory+0x22>
 800ef2a:	6020      	str	r0, [r4, #0]
 800ef2c:	6861      	ldr	r1, [r4, #4]
 800ef2e:	b121      	cbz	r1, 800ef3a <rmw_uxrce_fini_service_memory+0x22>
 800ef30:	4803      	ldr	r0, [pc, #12]	@ (800ef40 <rmw_uxrce_fini_service_memory+0x28>)
 800ef32:	f00d fee1 	bl	801ccf8 <put_memory>
 800ef36:	2300      	movs	r3, #0
 800ef38:	6063      	str	r3, [r4, #4]
 800ef3a:	bd10      	pop	{r4, pc}
 800ef3c:	08025754 	.word	0x08025754
 800ef40:	20016cf4 	.word	0x20016cf4

0800ef44 <rmw_uxrce_fini_client_memory>:
 800ef44:	b510      	push	{r4, lr}
 800ef46:	4604      	mov	r4, r0
 800ef48:	6800      	ldr	r0, [r0, #0]
 800ef4a:	b128      	cbz	r0, 800ef58 <rmw_uxrce_fini_client_memory+0x14>
 800ef4c:	4b06      	ldr	r3, [pc, #24]	@ (800ef68 <rmw_uxrce_fini_client_memory+0x24>)
 800ef4e:	6819      	ldr	r1, [r3, #0]
 800ef50:	f7f1 f95e 	bl	8000210 <strcmp>
 800ef54:	b938      	cbnz	r0, 800ef66 <rmw_uxrce_fini_client_memory+0x22>
 800ef56:	6020      	str	r0, [r4, #0]
 800ef58:	6861      	ldr	r1, [r4, #4]
 800ef5a:	b121      	cbz	r1, 800ef66 <rmw_uxrce_fini_client_memory+0x22>
 800ef5c:	4803      	ldr	r0, [pc, #12]	@ (800ef6c <rmw_uxrce_fini_client_memory+0x28>)
 800ef5e:	f00d fecb 	bl	801ccf8 <put_memory>
 800ef62:	2300      	movs	r3, #0
 800ef64:	6063      	str	r3, [r4, #4]
 800ef66:	bd10      	pop	{r4, pc}
 800ef68:	08025754 	.word	0x08025754
 800ef6c:	20011f58 	.word	0x20011f58

0800ef70 <rmw_uxrce_fini_topic_memory>:
 800ef70:	b510      	push	{r4, lr}
 800ef72:	4604      	mov	r4, r0
 800ef74:	4621      	mov	r1, r4
 800ef76:	4803      	ldr	r0, [pc, #12]	@ (800ef84 <rmw_uxrce_fini_topic_memory+0x14>)
 800ef78:	f00d febe 	bl	801ccf8 <put_memory>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	61a3      	str	r3, [r4, #24]
 800ef80:	bd10      	pop	{r4, pc}
 800ef82:	bf00      	nop
 800ef84:	20016d34 	.word	0x20016d34

0800ef88 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ef88:	b082      	sub	sp, #8
 800ef8a:	b530      	push	{r4, r5, lr}
 800ef8c:	4925      	ldr	r1, [pc, #148]	@ (800f024 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ef8e:	680d      	ldr	r5, [r1, #0]
 800ef90:	ac03      	add	r4, sp, #12
 800ef92:	e884 000c 	stmia.w	r4, {r2, r3}
 800ef96:	461c      	mov	r4, r3
 800ef98:	2d00      	cmp	r5, #0
 800ef9a:	d041      	beq.n	800f020 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ef9c:	462b      	mov	r3, r5
 800ef9e:	2100      	movs	r1, #0
 800efa0:	689a      	ldr	r2, [r3, #8]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800efa8:	4290      	cmp	r0, r2
 800efaa:	bf08      	it	eq
 800efac:	3101      	addeq	r1, #1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1f6      	bne.n	800efa0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800efb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	d029      	beq.n	800f00e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800efba:	d907      	bls.n	800efcc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d005      	beq.n	800efcc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800efc0:	2100      	movs	r1, #0
 800efc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efc6:	4608      	mov	r0, r1
 800efc8:	b002      	add	sp, #8
 800efca:	4770      	bx	lr
 800efcc:	b314      	cbz	r4, 800f014 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800efce:	428c      	cmp	r4, r1
 800efd0:	d820      	bhi.n	800f014 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800efd2:	2d00      	cmp	r5, #0
 800efd4:	d0f4      	beq.n	800efc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800efd6:	2100      	movs	r1, #0
 800efd8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800efdc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800efe0:	e002      	b.n	800efe8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800efe2:	686d      	ldr	r5, [r5, #4]
 800efe4:	2d00      	cmp	r5, #0
 800efe6:	d0ec      	beq.n	800efc2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800efe8:	68ab      	ldr	r3, [r5, #8]
 800efea:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800efee:	4290      	cmp	r0, r2
 800eff0:	d1f7      	bne.n	800efe2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800eff2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800eff6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800effa:	4562      	cmp	r2, ip
 800effc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f000:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f004:	daed      	bge.n	800efe2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f006:	4694      	mov	ip, r2
 800f008:	461c      	mov	r4, r3
 800f00a:	4629      	mov	r1, r5
 800f00c:	e7e9      	b.n	800efe2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f00e:	b10c      	cbz	r4, 800f014 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f010:	428c      	cmp	r4, r1
 800f012:	d9d5      	bls.n	800efc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f018:	4802      	ldr	r0, [pc, #8]	@ (800f024 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f01a:	b002      	add	sp, #8
 800f01c:	f00d be5c 	b.w	801ccd8 <get_memory>
 800f020:	4629      	mov	r1, r5
 800f022:	e7c6      	b.n	800efb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f024:	20016d14 	.word	0x20016d14

0800f028 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f028:	4b11      	ldr	r3, [pc, #68]	@ (800f070 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	b530      	push	{r4, r5, lr}
 800f02e:	b1e3      	cbz	r3, 800f06a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f030:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f034:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f038:	2400      	movs	r4, #0
 800f03a:	e001      	b.n	800f040 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	b193      	cbz	r3, 800f066 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f040:	689a      	ldr	r2, [r3, #8]
 800f042:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f046:	4288      	cmp	r0, r1
 800f048:	d1f8      	bne.n	800f03c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f04a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f04e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f052:	4571      	cmp	r1, lr
 800f054:	eb72 050c 	sbcs.w	r5, r2, ip
 800f058:	daf0      	bge.n	800f03c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f05a:	461c      	mov	r4, r3
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	468e      	mov	lr, r1
 800f060:	4694      	mov	ip, r2
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1ec      	bne.n	800f040 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f066:	4620      	mov	r0, r4
 800f068:	bd30      	pop	{r4, r5, pc}
 800f06a:	461c      	mov	r4, r3
 800f06c:	4620      	mov	r0, r4
 800f06e:	bd30      	pop	{r4, r5, pc}
 800f070:	20016d14 	.word	0x20016d14
 800f074:	00000000 	.word	0x00000000

0800f078 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07c:	4b3c      	ldr	r3, [pc, #240]	@ (800f170 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f07e:	ed2d 8b06 	vpush	{d8-d10}
 800f082:	681f      	ldr	r7, [r3, #0]
 800f084:	b08d      	sub	sp, #52	@ 0x34
 800f086:	f00f f857 	bl	801e138 <rmw_uros_epoch_nanos>
 800f08a:	2f00      	cmp	r7, #0
 800f08c:	d05d      	beq.n	800f14a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f08e:	46b8      	mov	r8, r7
 800f090:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800f158 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f094:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f098:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f09c:	2b04      	cmp	r3, #4
 800f09e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800f160 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f0a2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800f168 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f0a6:	4681      	mov	r9, r0
 800f0a8:	468a      	mov	sl, r1
 800f0aa:	ac04      	add	r4, sp, #16
 800f0ac:	d03f      	beq.n	800f12e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f0ae:	2b05      	cmp	r3, #5
 800f0b0:	d044      	beq.n	800f13c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d03b      	beq.n	800f12e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f0b6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f0ba:	ed8d ab06 	vstr	d10, [sp, #24]
 800f0be:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f0c2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f0c6:	ab08      	add	r3, sp, #32
 800f0c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f0ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f0d2:	f00d fc35 	bl	801c940 <rmw_time_equal>
 800f0d6:	b118      	cbz	r0, 800f0e0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f0d8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f0dc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f0e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f0e4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f0e8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f0ec:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f0f0:	f00d fc7a 	bl	801c9e8 <rmw_time_total_nsec>
 800f0f4:	1830      	adds	r0, r6, r0
 800f0f6:	eb47 0101 	adc.w	r1, r7, r1
 800f0fa:	4548      	cmp	r0, r9
 800f0fc:	eb71 030a 	sbcs.w	r3, r1, sl
 800f100:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f104:	db05      	blt.n	800f112 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f106:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f10a:	4591      	cmp	r9, r2
 800f10c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f110:	da03      	bge.n	800f11a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f112:	4817      	ldr	r0, [pc, #92]	@ (800f170 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f114:	4641      	mov	r1, r8
 800f116:	f00d fdef 	bl	801ccf8 <put_memory>
 800f11a:	f1bb 0f00 	cmp.w	fp, #0
 800f11e:	d014      	beq.n	800f14a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f120:	46d8      	mov	r8, fp
 800f122:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f126:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f12a:	2b04      	cmp	r3, #4
 800f12c:	d1bf      	bne.n	800f0ae <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f12e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f132:	3340      	adds	r3, #64	@ 0x40
 800f134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f13a:	e7c0      	b.n	800f0be <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f13c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f140:	3348      	adds	r3, #72	@ 0x48
 800f142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f148:	e7b9      	b.n	800f0be <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f14a:	b00d      	add	sp, #52	@ 0x34
 800f14c:	ecbd 8b06 	vpop	{d8-d10}
 800f150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f154:	f3af 8000 	nop.w
	...
 800f160:	00000001 	.word	0x00000001
 800f164:	00000000 	.word	0x00000000
 800f168:	0000001e 	.word	0x0000001e
 800f16c:	00000000 	.word	0x00000000
 800f170:	20016d14 	.word	0x20016d14

0800f174 <run_xrce_session>:
 800f174:	b510      	push	{r4, lr}
 800f176:	788c      	ldrb	r4, [r1, #2]
 800f178:	b086      	sub	sp, #24
 800f17a:	2c01      	cmp	r4, #1
 800f17c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f180:	d00c      	beq.n	800f19c <run_xrce_session+0x28>
 800f182:	4619      	mov	r1, r3
 800f184:	2301      	movs	r3, #1
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	f10d 020e 	add.w	r2, sp, #14
 800f18c:	f10d 0317 	add.w	r3, sp, #23
 800f190:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f194:	f004 ff46 	bl	8014024 <uxr_run_session_until_all_status>
 800f198:	b006      	add	sp, #24
 800f19a:	bd10      	pop	{r4, pc}
 800f19c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f1a0:	f004 fb5a 	bl	8013858 <uxr_flash_output_streams>
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	b006      	add	sp, #24
 800f1a8:	bd10      	pop	{r4, pc}
 800f1aa:	bf00      	nop

0800f1ac <convert_qos_profile>:
 800f1ac:	7a4a      	ldrb	r2, [r1, #9]
 800f1ae:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f1b2:	2a02      	cmp	r2, #2
 800f1b4:	bf18      	it	ne
 800f1b6:	2200      	movne	r2, #0
 800f1b8:	7002      	strb	r2, [r0, #0]
 800f1ba:	780a      	ldrb	r2, [r1, #0]
 800f1bc:	8889      	ldrh	r1, [r1, #4]
 800f1be:	8081      	strh	r1, [r0, #4]
 800f1c0:	f1ac 0c02 	sub.w	ip, ip, #2
 800f1c4:	f1a2 0202 	sub.w	r2, r2, #2
 800f1c8:	fabc fc8c 	clz	ip, ip
 800f1cc:	fab2 f282 	clz	r2, r2
 800f1d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f1d4:	0952      	lsrs	r2, r2, #5
 800f1d6:	f880 c001 	strb.w	ip, [r0, #1]
 800f1da:	7082      	strb	r2, [r0, #2]
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop

0800f1e0 <generate_service_topics>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	461c      	mov	r4, r3
 800f1e6:	4b12      	ldr	r3, [pc, #72]	@ (800f230 <generate_service_topics+0x50>)
 800f1e8:	9301      	str	r3, [sp, #4]
 800f1ea:	4605      	mov	r5, r0
 800f1ec:	4b11      	ldr	r3, [pc, #68]	@ (800f234 <generate_service_topics+0x54>)
 800f1ee:	9000      	str	r0, [sp, #0]
 800f1f0:	4616      	mov	r6, r2
 800f1f2:	4608      	mov	r0, r1
 800f1f4:	4a10      	ldr	r2, [pc, #64]	@ (800f238 <generate_service_topics+0x58>)
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	f011 ff3e 	bl	8021078 <sniprintf>
 800f1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f23c <generate_service_topics+0x5c>)
 800f1fe:	9301      	str	r3, [sp, #4]
 800f200:	4601      	mov	r1, r0
 800f202:	9500      	str	r5, [sp, #0]
 800f204:	4b0e      	ldr	r3, [pc, #56]	@ (800f240 <generate_service_topics+0x60>)
 800f206:	4a0c      	ldr	r2, [pc, #48]	@ (800f238 <generate_service_topics+0x58>)
 800f208:	460d      	mov	r5, r1
 800f20a:	4630      	mov	r0, r6
 800f20c:	4621      	mov	r1, r4
 800f20e:	f011 ff33 	bl	8021078 <sniprintf>
 800f212:	2d00      	cmp	r5, #0
 800f214:	db01      	blt.n	800f21a <generate_service_topics+0x3a>
 800f216:	42ac      	cmp	r4, r5
 800f218:	dc02      	bgt.n	800f220 <generate_service_topics+0x40>
 800f21a:	2000      	movs	r0, #0
 800f21c:	b002      	add	sp, #8
 800f21e:	bd70      	pop	{r4, r5, r6, pc}
 800f220:	2800      	cmp	r0, #0
 800f222:	dbfa      	blt.n	800f21a <generate_service_topics+0x3a>
 800f224:	4284      	cmp	r4, r0
 800f226:	bfd4      	ite	le
 800f228:	2000      	movle	r0, #0
 800f22a:	2001      	movgt	r0, #1
 800f22c:	b002      	add	sp, #8
 800f22e:	bd70      	pop	{r4, r5, r6, pc}
 800f230:	08023460 	.word	0x08023460
 800f234:	0802345c 	.word	0x0802345c
 800f238:	08023438 	.word	0x08023438
 800f23c:	08023454 	.word	0x08023454
 800f240:	08023450 	.word	0x08023450

0800f244 <generate_service_types>:
 800f244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f248:	4605      	mov	r5, r0
 800f24a:	b086      	sub	sp, #24
 800f24c:	6880      	ldr	r0, [r0, #8]
 800f24e:	460c      	mov	r4, r1
 800f250:	4617      	mov	r7, r2
 800f252:	461e      	mov	r6, r3
 800f254:	4780      	blx	r0
 800f256:	68eb      	ldr	r3, [r5, #12]
 800f258:	4680      	mov	r8, r0
 800f25a:	4798      	blx	r3
 800f25c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f260:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f264:	2300      	movs	r3, #0
 800f266:	7023      	strb	r3, [r4, #0]
 800f268:	6813      	ldr	r3, [r2, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d042      	beq.n	800f2f4 <generate_service_types+0xb0>
 800f26e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800f308 <generate_service_types+0xc4>
 800f272:	4641      	mov	r1, r8
 800f274:	4620      	mov	r0, r4
 800f276:	4c22      	ldr	r4, [pc, #136]	@ (800f300 <generate_service_types+0xbc>)
 800f278:	9405      	str	r4, [sp, #20]
 800f27a:	6852      	ldr	r2, [r2, #4]
 800f27c:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800f310 <generate_service_types+0xcc>
 800f280:	9204      	str	r2, [sp, #16]
 800f282:	9100      	str	r1, [sp, #0]
 800f284:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800f288:	4a1e      	ldr	r2, [pc, #120]	@ (800f304 <generate_service_types+0xc0>)
 800f28a:	f8cd a004 	str.w	sl, [sp, #4]
 800f28e:	4631      	mov	r1, r6
 800f290:	f011 fef2 	bl	8021078 <sniprintf>
 800f294:	2800      	cmp	r0, #0
 800f296:	db1f      	blt.n	800f2d8 <generate_service_types+0x94>
 800f298:	2300      	movs	r3, #0
 800f29a:	703b      	strb	r3, [r7, #0]
 800f29c:	f8d9 3000 	ldr.w	r3, [r9]
 800f2a0:	42b0      	cmp	r0, r6
 800f2a2:	bfac      	ite	ge
 800f2a4:	2500      	movge	r5, #0
 800f2a6:	2501      	movlt	r5, #1
 800f2a8:	b1eb      	cbz	r3, 800f2e6 <generate_service_types+0xa2>
 800f2aa:	4a17      	ldr	r2, [pc, #92]	@ (800f308 <generate_service_types+0xc4>)
 800f2ac:	9405      	str	r4, [sp, #20]
 800f2ae:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f2b2:	9200      	str	r2, [sp, #0]
 800f2b4:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800f2b8:	e9cd a401 	strd	sl, r4, [sp, #4]
 800f2bc:	4a11      	ldr	r2, [pc, #68]	@ (800f304 <generate_service_types+0xc0>)
 800f2be:	4638      	mov	r0, r7
 800f2c0:	4631      	mov	r1, r6
 800f2c2:	f011 fed9 	bl	8021078 <sniprintf>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	db10      	blt.n	800f2ec <generate_service_types+0xa8>
 800f2ca:	42b0      	cmp	r0, r6
 800f2cc:	bfb4      	ite	lt
 800f2ce:	4628      	movlt	r0, r5
 800f2d0:	2000      	movge	r0, #0
 800f2d2:	b006      	add	sp, #24
 800f2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2d8:	2300      	movs	r3, #0
 800f2da:	703b      	strb	r3, [r7, #0]
 800f2dc:	f8d9 3000 	ldr.w	r3, [r9]
 800f2e0:	2500      	movs	r5, #0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1e1      	bne.n	800f2aa <generate_service_types+0x66>
 800f2e6:	4b09      	ldr	r3, [pc, #36]	@ (800f30c <generate_service_types+0xc8>)
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	e7df      	b.n	800f2ac <generate_service_types+0x68>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	b006      	add	sp, #24
 800f2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f4:	4b05      	ldr	r3, [pc, #20]	@ (800f30c <generate_service_types+0xc8>)
 800f2f6:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800f308 <generate_service_types+0xc4>
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	e7ba      	b.n	800f274 <generate_service_types+0x30>
 800f2fe:	bf00      	nop
 800f300:	08023440 	.word	0x08023440
 800f304:	08023430 	.word	0x08023430
 800f308:	0802342c 	.word	0x0802342c
 800f30c:	080234b8 	.word	0x080234b8
 800f310:	08023444 	.word	0x08023444

0800f314 <generate_type_name>:
 800f314:	b530      	push	{r4, r5, lr}
 800f316:	2300      	movs	r3, #0
 800f318:	700b      	strb	r3, [r1, #0]
 800f31a:	6803      	ldr	r3, [r0, #0]
 800f31c:	b087      	sub	sp, #28
 800f31e:	4614      	mov	r4, r2
 800f320:	b1d3      	cbz	r3, 800f358 <generate_type_name+0x44>
 800f322:	4a0f      	ldr	r2, [pc, #60]	@ (800f360 <generate_type_name+0x4c>)
 800f324:	4615      	mov	r5, r2
 800f326:	9203      	str	r2, [sp, #12]
 800f328:	9500      	str	r5, [sp, #0]
 800f32a:	6842      	ldr	r2, [r0, #4]
 800f32c:	480d      	ldr	r0, [pc, #52]	@ (800f364 <generate_type_name+0x50>)
 800f32e:	9001      	str	r0, [sp, #4]
 800f330:	4608      	mov	r0, r1
 800f332:	490d      	ldr	r1, [pc, #52]	@ (800f368 <generate_type_name+0x54>)
 800f334:	9204      	str	r2, [sp, #16]
 800f336:	9105      	str	r1, [sp, #20]
 800f338:	9102      	str	r1, [sp, #8]
 800f33a:	4a0c      	ldr	r2, [pc, #48]	@ (800f36c <generate_type_name+0x58>)
 800f33c:	4621      	mov	r1, r4
 800f33e:	f011 fe9b 	bl	8021078 <sniprintf>
 800f342:	2800      	cmp	r0, #0
 800f344:	db05      	blt.n	800f352 <generate_type_name+0x3e>
 800f346:	4284      	cmp	r4, r0
 800f348:	bfd4      	ite	le
 800f34a:	2000      	movle	r0, #0
 800f34c:	2001      	movgt	r0, #1
 800f34e:	b007      	add	sp, #28
 800f350:	bd30      	pop	{r4, r5, pc}
 800f352:	2000      	movs	r0, #0
 800f354:	b007      	add	sp, #28
 800f356:	bd30      	pop	{r4, r5, pc}
 800f358:	4b05      	ldr	r3, [pc, #20]	@ (800f370 <generate_type_name+0x5c>)
 800f35a:	4a01      	ldr	r2, [pc, #4]	@ (800f360 <generate_type_name+0x4c>)
 800f35c:	461d      	mov	r5, r3
 800f35e:	e7e2      	b.n	800f326 <generate_type_name+0x12>
 800f360:	0802342c 	.word	0x0802342c
 800f364:	08023444 	.word	0x08023444
 800f368:	08023440 	.word	0x08023440
 800f36c:	08023430 	.word	0x08023430
 800f370:	080234b8 	.word	0x080234b8

0800f374 <generate_topic_name>:
 800f374:	b510      	push	{r4, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	4614      	mov	r4, r2
 800f37a:	9000      	str	r0, [sp, #0]
 800f37c:	4b08      	ldr	r3, [pc, #32]	@ (800f3a0 <generate_topic_name+0x2c>)
 800f37e:	4a09      	ldr	r2, [pc, #36]	@ (800f3a4 <generate_topic_name+0x30>)
 800f380:	4608      	mov	r0, r1
 800f382:	4621      	mov	r1, r4
 800f384:	f011 fe78 	bl	8021078 <sniprintf>
 800f388:	2800      	cmp	r0, #0
 800f38a:	db05      	blt.n	800f398 <generate_topic_name+0x24>
 800f38c:	4284      	cmp	r4, r0
 800f38e:	bfd4      	ite	le
 800f390:	2000      	movle	r0, #0
 800f392:	2001      	movgt	r0, #1
 800f394:	b002      	add	sp, #8
 800f396:	bd10      	pop	{r4, pc}
 800f398:	2000      	movs	r0, #0
 800f39a:	b002      	add	sp, #8
 800f39c:	bd10      	pop	{r4, pc}
 800f39e:	bf00      	nop
 800f3a0:	08023468 	.word	0x08023468
 800f3a4:	08023448 	.word	0x08023448

0800f3a8 <is_uxrce_rmw_identifier_valid>:
 800f3a8:	b510      	push	{r4, lr}
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	b140      	cbz	r0, 800f3c0 <is_uxrce_rmw_identifier_valid+0x18>
 800f3ae:	f00d fcfb 	bl	801cda8 <rmw_get_implementation_identifier>
 800f3b2:	4601      	mov	r1, r0
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7f0 ff2b 	bl	8000210 <strcmp>
 800f3ba:	fab0 f080 	clz	r0, r0
 800f3be:	0940      	lsrs	r0, r0, #5
 800f3c0:	bd10      	pop	{r4, pc}
 800f3c2:	bf00      	nop

0800f3c4 <get_message_typesupport_handle>:
 800f3c4:	6883      	ldr	r3, [r0, #8]
 800f3c6:	4718      	bx	r3

0800f3c8 <get_message_typesupport_handle_function>:
 800f3c8:	b510      	push	{r4, lr}
 800f3ca:	4604      	mov	r4, r0
 800f3cc:	6800      	ldr	r0, [r0, #0]
 800f3ce:	f7f0 ff1f 	bl	8000210 <strcmp>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	bf0c      	ite	eq
 800f3d6:	4620      	moveq	r0, r4
 800f3d8:	2000      	movne	r0, #0
 800f3da:	bd10      	pop	{r4, pc}

0800f3dc <rosidl_runtime_c__double__Sequence__init>:
 800f3dc:	b530      	push	{r4, r5, lr}
 800f3de:	4604      	mov	r4, r0
 800f3e0:	b087      	sub	sp, #28
 800f3e2:	b130      	cbz	r0, 800f3f2 <rosidl_runtime_c__double__Sequence__init+0x16>
 800f3e4:	460d      	mov	r5, r1
 800f3e6:	b931      	cbnz	r1, 800f3f6 <rosidl_runtime_c__double__Sequence__init+0x1a>
 800f3e8:	4608      	mov	r0, r1
 800f3ea:	e9c4 0500 	strd	r0, r5, [r4]
 800f3ee:	60a5      	str	r5, [r4, #8]
 800f3f0:	2001      	movs	r0, #1
 800f3f2:	b007      	add	sp, #28
 800f3f4:	bd30      	pop	{r4, r5, pc}
 800f3f6:	a801      	add	r0, sp, #4
 800f3f8:	f7ff f988 	bl	800e70c <rcutils_get_default_allocator>
 800f3fc:	9b01      	ldr	r3, [sp, #4]
 800f3fe:	9905      	ldr	r1, [sp, #20]
 800f400:	00e8      	lsls	r0, r5, #3
 800f402:	4798      	blx	r3
 800f404:	2800      	cmp	r0, #0
 800f406:	d1f0      	bne.n	800f3ea <rosidl_runtime_c__double__Sequence__init+0xe>
 800f408:	e7f3      	b.n	800f3f2 <rosidl_runtime_c__double__Sequence__init+0x16>
 800f40a:	bf00      	nop

0800f40c <rosidl_runtime_c__double__Sequence__fini>:
 800f40c:	b188      	cbz	r0, 800f432 <rosidl_runtime_c__double__Sequence__fini+0x26>
 800f40e:	b510      	push	{r4, lr}
 800f410:	6803      	ldr	r3, [r0, #0]
 800f412:	b086      	sub	sp, #24
 800f414:	4604      	mov	r4, r0
 800f416:	b153      	cbz	r3, 800f42e <rosidl_runtime_c__double__Sequence__fini+0x22>
 800f418:	a801      	add	r0, sp, #4
 800f41a:	f7ff f977 	bl	800e70c <rcutils_get_default_allocator>
 800f41e:	9b02      	ldr	r3, [sp, #8]
 800f420:	9905      	ldr	r1, [sp, #20]
 800f422:	6820      	ldr	r0, [r4, #0]
 800f424:	4798      	blx	r3
 800f426:	2300      	movs	r3, #0
 800f428:	e9c4 3300 	strd	r3, r3, [r4]
 800f42c:	60a3      	str	r3, [r4, #8]
 800f42e:	b006      	add	sp, #24
 800f430:	bd10      	pop	{r4, pc}
 800f432:	4770      	bx	lr

0800f434 <rosidl_runtime_c__boolean__Sequence__init>:
 800f434:	b530      	push	{r4, r5, lr}
 800f436:	4604      	mov	r4, r0
 800f438:	b087      	sub	sp, #28
 800f43a:	b130      	cbz	r0, 800f44a <rosidl_runtime_c__boolean__Sequence__init+0x16>
 800f43c:	460d      	mov	r5, r1
 800f43e:	b931      	cbnz	r1, 800f44e <rosidl_runtime_c__boolean__Sequence__init+0x1a>
 800f440:	4608      	mov	r0, r1
 800f442:	e9c4 0500 	strd	r0, r5, [r4]
 800f446:	60a5      	str	r5, [r4, #8]
 800f448:	2001      	movs	r0, #1
 800f44a:	b007      	add	sp, #28
 800f44c:	bd30      	pop	{r4, r5, pc}
 800f44e:	a801      	add	r0, sp, #4
 800f450:	f7ff f95c 	bl	800e70c <rcutils_get_default_allocator>
 800f454:	9b01      	ldr	r3, [sp, #4]
 800f456:	9905      	ldr	r1, [sp, #20]
 800f458:	4628      	mov	r0, r5
 800f45a:	4798      	blx	r3
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d1f0      	bne.n	800f442 <rosidl_runtime_c__boolean__Sequence__init+0xe>
 800f460:	e7f3      	b.n	800f44a <rosidl_runtime_c__boolean__Sequence__init+0x16>
 800f462:	bf00      	nop

0800f464 <rosidl_runtime_c__boolean__Sequence__fini>:
 800f464:	b188      	cbz	r0, 800f48a <rosidl_runtime_c__boolean__Sequence__fini+0x26>
 800f466:	b510      	push	{r4, lr}
 800f468:	6803      	ldr	r3, [r0, #0]
 800f46a:	b086      	sub	sp, #24
 800f46c:	4604      	mov	r4, r0
 800f46e:	b153      	cbz	r3, 800f486 <rosidl_runtime_c__boolean__Sequence__fini+0x22>
 800f470:	a801      	add	r0, sp, #4
 800f472:	f7ff f94b 	bl	800e70c <rcutils_get_default_allocator>
 800f476:	9b02      	ldr	r3, [sp, #8]
 800f478:	9905      	ldr	r1, [sp, #20]
 800f47a:	6820      	ldr	r0, [r4, #0]
 800f47c:	4798      	blx	r3
 800f47e:	2300      	movs	r3, #0
 800f480:	e9c4 3300 	strd	r3, r3, [r4]
 800f484:	60a3      	str	r3, [r4, #8]
 800f486:	b006      	add	sp, #24
 800f488:	bd10      	pop	{r4, pc}
 800f48a:	4770      	bx	lr

0800f48c <rosidl_runtime_c__octet__Sequence__init>:
 800f48c:	b530      	push	{r4, r5, lr}
 800f48e:	4604      	mov	r4, r0
 800f490:	b087      	sub	sp, #28
 800f492:	b130      	cbz	r0, 800f4a2 <rosidl_runtime_c__octet__Sequence__init+0x16>
 800f494:	460d      	mov	r5, r1
 800f496:	b931      	cbnz	r1, 800f4a6 <rosidl_runtime_c__octet__Sequence__init+0x1a>
 800f498:	4608      	mov	r0, r1
 800f49a:	e9c4 0500 	strd	r0, r5, [r4]
 800f49e:	60a5      	str	r5, [r4, #8]
 800f4a0:	2001      	movs	r0, #1
 800f4a2:	b007      	add	sp, #28
 800f4a4:	bd30      	pop	{r4, r5, pc}
 800f4a6:	a801      	add	r0, sp, #4
 800f4a8:	f7ff f930 	bl	800e70c <rcutils_get_default_allocator>
 800f4ac:	9b01      	ldr	r3, [sp, #4]
 800f4ae:	9905      	ldr	r1, [sp, #20]
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	4798      	blx	r3
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d1f0      	bne.n	800f49a <rosidl_runtime_c__octet__Sequence__init+0xe>
 800f4b8:	e7f3      	b.n	800f4a2 <rosidl_runtime_c__octet__Sequence__init+0x16>
 800f4ba:	bf00      	nop

0800f4bc <rosidl_runtime_c__octet__Sequence__fini>:
 800f4bc:	b188      	cbz	r0, 800f4e2 <rosidl_runtime_c__octet__Sequence__fini+0x26>
 800f4be:	b510      	push	{r4, lr}
 800f4c0:	6803      	ldr	r3, [r0, #0]
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	b153      	cbz	r3, 800f4de <rosidl_runtime_c__octet__Sequence__fini+0x22>
 800f4c8:	a801      	add	r0, sp, #4
 800f4ca:	f7ff f91f 	bl	800e70c <rcutils_get_default_allocator>
 800f4ce:	9b02      	ldr	r3, [sp, #8]
 800f4d0:	9905      	ldr	r1, [sp, #20]
 800f4d2:	6820      	ldr	r0, [r4, #0]
 800f4d4:	4798      	blx	r3
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e9c4 3300 	strd	r3, r3, [r4]
 800f4dc:	60a3      	str	r3, [r4, #8]
 800f4de:	b006      	add	sp, #24
 800f4e0:	bd10      	pop	{r4, pc}
 800f4e2:	4770      	bx	lr

0800f4e4 <rosidl_runtime_c__uint8__Sequence__init>:
 800f4e4:	b530      	push	{r4, r5, lr}
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	b087      	sub	sp, #28
 800f4ea:	b130      	cbz	r0, 800f4fa <rosidl_runtime_c__uint8__Sequence__init+0x16>
 800f4ec:	460d      	mov	r5, r1
 800f4ee:	b931      	cbnz	r1, 800f4fe <rosidl_runtime_c__uint8__Sequence__init+0x1a>
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	e9c4 0500 	strd	r0, r5, [r4]
 800f4f6:	60a5      	str	r5, [r4, #8]
 800f4f8:	2001      	movs	r0, #1
 800f4fa:	b007      	add	sp, #28
 800f4fc:	bd30      	pop	{r4, r5, pc}
 800f4fe:	a801      	add	r0, sp, #4
 800f500:	f7ff f904 	bl	800e70c <rcutils_get_default_allocator>
 800f504:	9b01      	ldr	r3, [sp, #4]
 800f506:	9905      	ldr	r1, [sp, #20]
 800f508:	4628      	mov	r0, r5
 800f50a:	4798      	blx	r3
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1f0      	bne.n	800f4f2 <rosidl_runtime_c__uint8__Sequence__init+0xe>
 800f510:	e7f3      	b.n	800f4fa <rosidl_runtime_c__uint8__Sequence__init+0x16>
 800f512:	bf00      	nop

0800f514 <rosidl_runtime_c__uint8__Sequence__fini>:
 800f514:	b188      	cbz	r0, 800f53a <rosidl_runtime_c__uint8__Sequence__fini+0x26>
 800f516:	b510      	push	{r4, lr}
 800f518:	6803      	ldr	r3, [r0, #0]
 800f51a:	b086      	sub	sp, #24
 800f51c:	4604      	mov	r4, r0
 800f51e:	b153      	cbz	r3, 800f536 <rosidl_runtime_c__uint8__Sequence__fini+0x22>
 800f520:	a801      	add	r0, sp, #4
 800f522:	f7ff f8f3 	bl	800e70c <rcutils_get_default_allocator>
 800f526:	9b02      	ldr	r3, [sp, #8]
 800f528:	9905      	ldr	r1, [sp, #20]
 800f52a:	6820      	ldr	r0, [r4, #0]
 800f52c:	4798      	blx	r3
 800f52e:	2300      	movs	r3, #0
 800f530:	e9c4 3300 	strd	r3, r3, [r4]
 800f534:	60a3      	str	r3, [r4, #8]
 800f536:	b006      	add	sp, #24
 800f538:	bd10      	pop	{r4, pc}
 800f53a:	4770      	bx	lr

0800f53c <rosidl_runtime_c__int64__Sequence__init>:
 800f53c:	b530      	push	{r4, r5, lr}
 800f53e:	4604      	mov	r4, r0
 800f540:	b087      	sub	sp, #28
 800f542:	b130      	cbz	r0, 800f552 <rosidl_runtime_c__int64__Sequence__init+0x16>
 800f544:	460d      	mov	r5, r1
 800f546:	b931      	cbnz	r1, 800f556 <rosidl_runtime_c__int64__Sequence__init+0x1a>
 800f548:	4608      	mov	r0, r1
 800f54a:	e9c4 0500 	strd	r0, r5, [r4]
 800f54e:	60a5      	str	r5, [r4, #8]
 800f550:	2001      	movs	r0, #1
 800f552:	b007      	add	sp, #28
 800f554:	bd30      	pop	{r4, r5, pc}
 800f556:	a801      	add	r0, sp, #4
 800f558:	f7ff f8d8 	bl	800e70c <rcutils_get_default_allocator>
 800f55c:	9b01      	ldr	r3, [sp, #4]
 800f55e:	9905      	ldr	r1, [sp, #20]
 800f560:	00e8      	lsls	r0, r5, #3
 800f562:	4798      	blx	r3
 800f564:	2800      	cmp	r0, #0
 800f566:	d1f0      	bne.n	800f54a <rosidl_runtime_c__int64__Sequence__init+0xe>
 800f568:	e7f3      	b.n	800f552 <rosidl_runtime_c__int64__Sequence__init+0x16>
 800f56a:	bf00      	nop

0800f56c <rosidl_runtime_c__int64__Sequence__fini>:
 800f56c:	b188      	cbz	r0, 800f592 <rosidl_runtime_c__int64__Sequence__fini+0x26>
 800f56e:	b510      	push	{r4, lr}
 800f570:	6803      	ldr	r3, [r0, #0]
 800f572:	b086      	sub	sp, #24
 800f574:	4604      	mov	r4, r0
 800f576:	b153      	cbz	r3, 800f58e <rosidl_runtime_c__int64__Sequence__fini+0x22>
 800f578:	a801      	add	r0, sp, #4
 800f57a:	f7ff f8c7 	bl	800e70c <rcutils_get_default_allocator>
 800f57e:	9b02      	ldr	r3, [sp, #8]
 800f580:	9905      	ldr	r1, [sp, #20]
 800f582:	6820      	ldr	r0, [r4, #0]
 800f584:	4798      	blx	r3
 800f586:	2300      	movs	r3, #0
 800f588:	e9c4 3300 	strd	r3, r3, [r4]
 800f58c:	60a3      	str	r3, [r4, #8]
 800f58e:	b006      	add	sp, #24
 800f590:	bd10      	pop	{r4, pc}
 800f592:	4770      	bx	lr

0800f594 <get_service_typesupport_handle>:
 800f594:	6883      	ldr	r3, [r0, #8]
 800f596:	4718      	bx	r3

0800f598 <get_service_typesupport_handle_function>:
 800f598:	b510      	push	{r4, lr}
 800f59a:	4604      	mov	r4, r0
 800f59c:	6800      	ldr	r0, [r0, #0]
 800f59e:	f7f0 fe37 	bl	8000210 <strcmp>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	bf0c      	ite	eq
 800f5a6:	4620      	moveq	r0, r4
 800f5a8:	2000      	movne	r0, #0
 800f5aa:	bd10      	pop	{r4, pc}

0800f5ac <rosidl_runtime_c__String__init>:
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	b086      	sub	sp, #24
 800f5b2:	b170      	cbz	r0, 800f5d2 <rosidl_runtime_c__String__init+0x26>
 800f5b4:	a801      	add	r0, sp, #4
 800f5b6:	f7ff f8a9 	bl	800e70c <rcutils_get_default_allocator>
 800f5ba:	9b01      	ldr	r3, [sp, #4]
 800f5bc:	9905      	ldr	r1, [sp, #20]
 800f5be:	2001      	movs	r0, #1
 800f5c0:	4798      	blx	r3
 800f5c2:	6020      	str	r0, [r4, #0]
 800f5c4:	b128      	cbz	r0, 800f5d2 <rosidl_runtime_c__String__init+0x26>
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	7001      	strb	r1, [r0, #0]
 800f5cc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	b006      	add	sp, #24
 800f5d4:	bd10      	pop	{r4, pc}
 800f5d6:	bf00      	nop

0800f5d8 <rosidl_runtime_c__String__fini>:
 800f5d8:	b320      	cbz	r0, 800f624 <rosidl_runtime_c__String__fini+0x4c>
 800f5da:	b510      	push	{r4, lr}
 800f5dc:	6803      	ldr	r3, [r0, #0]
 800f5de:	b086      	sub	sp, #24
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	b173      	cbz	r3, 800f602 <rosidl_runtime_c__String__fini+0x2a>
 800f5e4:	6883      	ldr	r3, [r0, #8]
 800f5e6:	b1f3      	cbz	r3, 800f626 <rosidl_runtime_c__String__fini+0x4e>
 800f5e8:	a801      	add	r0, sp, #4
 800f5ea:	f7ff f88f 	bl	800e70c <rcutils_get_default_allocator>
 800f5ee:	9b02      	ldr	r3, [sp, #8]
 800f5f0:	9905      	ldr	r1, [sp, #20]
 800f5f2:	6820      	ldr	r0, [r4, #0]
 800f5f4:	4798      	blx	r3
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	e9c4 3300 	strd	r3, r3, [r4]
 800f5fc:	60a3      	str	r3, [r4, #8]
 800f5fe:	b006      	add	sp, #24
 800f600:	bd10      	pop	{r4, pc}
 800f602:	6843      	ldr	r3, [r0, #4]
 800f604:	b9db      	cbnz	r3, 800f63e <rosidl_runtime_c__String__fini+0x66>
 800f606:	6883      	ldr	r3, [r0, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d0f8      	beq.n	800f5fe <rosidl_runtime_c__String__fini+0x26>
 800f60c:	4b12      	ldr	r3, [pc, #72]	@ (800f658 <rosidl_runtime_c__String__fini+0x80>)
 800f60e:	4813      	ldr	r0, [pc, #76]	@ (800f65c <rosidl_runtime_c__String__fini+0x84>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2251      	movs	r2, #81	@ 0x51
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	2101      	movs	r1, #1
 800f618:	f011 ffd0 	bl	80215bc <fwrite>
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f620:	f011 fc1e 	bl	8020e60 <exit>
 800f624:	4770      	bx	lr
 800f626:	4b0c      	ldr	r3, [pc, #48]	@ (800f658 <rosidl_runtime_c__String__fini+0x80>)
 800f628:	480d      	ldr	r0, [pc, #52]	@ (800f660 <rosidl_runtime_c__String__fini+0x88>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	224c      	movs	r2, #76	@ 0x4c
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	2101      	movs	r1, #1
 800f632:	f011 ffc3 	bl	80215bc <fwrite>
 800f636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f63a:	f011 fc11 	bl	8020e60 <exit>
 800f63e:	4b06      	ldr	r3, [pc, #24]	@ (800f658 <rosidl_runtime_c__String__fini+0x80>)
 800f640:	4808      	ldr	r0, [pc, #32]	@ (800f664 <rosidl_runtime_c__String__fini+0x8c>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	224e      	movs	r2, #78	@ 0x4e
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	2101      	movs	r1, #1
 800f64a:	f011 ffb7 	bl	80215bc <fwrite>
 800f64e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f652:	f011 fc05 	bl	8020e60 <exit>
 800f656:	bf00      	nop
 800f658:	20001b3c 	.word	0x20001b3c
 800f65c:	0802350c 	.word	0x0802350c
 800f660:	0802346c 	.word	0x0802346c
 800f664:	080234bc 	.word	0x080234bc

0800f668 <rosidl_runtime_c__String__assignn>:
 800f668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66c:	4605      	mov	r5, r0
 800f66e:	b086      	sub	sp, #24
 800f670:	b1f0      	cbz	r0, 800f6b0 <rosidl_runtime_c__String__assignn+0x48>
 800f672:	460c      	mov	r4, r1
 800f674:	b1e1      	cbz	r1, 800f6b0 <rosidl_runtime_c__String__assignn+0x48>
 800f676:	1c53      	adds	r3, r2, #1
 800f678:	4616      	mov	r6, r2
 800f67a:	d019      	beq.n	800f6b0 <rosidl_runtime_c__String__assignn+0x48>
 800f67c:	f102 0801 	add.w	r8, r2, #1
 800f680:	a801      	add	r0, sp, #4
 800f682:	f7ff f843 	bl	800e70c <rcutils_get_default_allocator>
 800f686:	9b03      	ldr	r3, [sp, #12]
 800f688:	9a05      	ldr	r2, [sp, #20]
 800f68a:	6828      	ldr	r0, [r5, #0]
 800f68c:	4641      	mov	r1, r8
 800f68e:	4798      	blx	r3
 800f690:	4607      	mov	r7, r0
 800f692:	b168      	cbz	r0, 800f6b0 <rosidl_runtime_c__String__assignn+0x48>
 800f694:	4621      	mov	r1, r4
 800f696:	4632      	mov	r2, r6
 800f698:	f012 f9cb 	bl	8021a32 <memcpy>
 800f69c:	2300      	movs	r3, #0
 800f69e:	2001      	movs	r0, #1
 800f6a0:	55bb      	strb	r3, [r7, r6]
 800f6a2:	e9c5 7600 	strd	r7, r6, [r5]
 800f6a6:	f8c5 8008 	str.w	r8, [r5, #8]
 800f6aa:	b006      	add	sp, #24
 800f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	b006      	add	sp, #24
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6b8 <rosidl_runtime_c__String__assign>:
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6bc:	460c      	mov	r4, r1
 800f6be:	b086      	sub	sp, #24
 800f6c0:	b1f9      	cbz	r1, 800f702 <rosidl_runtime_c__String__assign+0x4a>
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	b1d0      	cbz	r0, 800f6fc <rosidl_runtime_c__String__assign+0x44>
 800f6c6:	4608      	mov	r0, r1
 800f6c8:	f7f0 fd9a 	bl	8000200 <strlen>
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	f106 0801 	add.w	r8, r6, #1
 800f6d2:	a801      	add	r0, sp, #4
 800f6d4:	f7ff f81a 	bl	800e70c <rcutils_get_default_allocator>
 800f6d8:	9b03      	ldr	r3, [sp, #12]
 800f6da:	9a05      	ldr	r2, [sp, #20]
 800f6dc:	6828      	ldr	r0, [r5, #0]
 800f6de:	4641      	mov	r1, r8
 800f6e0:	4798      	blx	r3
 800f6e2:	4607      	mov	r7, r0
 800f6e4:	b150      	cbz	r0, 800f6fc <rosidl_runtime_c__String__assign+0x44>
 800f6e6:	4621      	mov	r1, r4
 800f6e8:	4632      	mov	r2, r6
 800f6ea:	f012 f9a2 	bl	8021a32 <memcpy>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	55bb      	strb	r3, [r7, r6]
 800f6f2:	e9c5 7600 	strd	r7, r6, [r5]
 800f6f6:	2001      	movs	r0, #1
 800f6f8:	f8c5 8008 	str.w	r8, [r5, #8]
 800f6fc:	b006      	add	sp, #24
 800f6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f702:	4608      	mov	r0, r1
 800f704:	b006      	add	sp, #24
 800f706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70a:	bf00      	nop

0800f70c <rosidl_runtime_c__String__Sequence__init>:
 800f70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f710:	4680      	mov	r8, r0
 800f712:	b08b      	sub	sp, #44	@ 0x2c
 800f714:	b138      	cbz	r0, 800f726 <rosidl_runtime_c__String__Sequence__init+0x1a>
 800f716:	468a      	mov	sl, r1
 800f718:	b941      	cbnz	r1, 800f72c <rosidl_runtime_c__String__Sequence__init+0x20>
 800f71a:	460e      	mov	r6, r1
 800f71c:	e9c8 6a00 	strd	r6, sl, [r8]
 800f720:	f8c8 a008 	str.w	sl, [r8, #8]
 800f724:	2001      	movs	r0, #1
 800f726:	b00b      	add	sp, #44	@ 0x2c
 800f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72c:	4668      	mov	r0, sp
 800f72e:	f7fe ffed 	bl	800e70c <rcutils_get_default_allocator>
 800f732:	e9dd 3703 	ldrd	r3, r7, [sp, #12]
 800f736:	210c      	movs	r1, #12
 800f738:	463a      	mov	r2, r7
 800f73a:	4650      	mov	r0, sl
 800f73c:	4798      	blx	r3
 800f73e:	4606      	mov	r6, r0
 800f740:	b340      	cbz	r0, 800f794 <rosidl_runtime_c__String__Sequence__init+0x88>
 800f742:	2400      	movs	r4, #0
 800f744:	4605      	mov	r5, r0
 800f746:	f04f 0901 	mov.w	r9, #1
 800f74a:	46a3      	mov	fp, r4
 800f74c:	e007      	b.n	800f75e <rosidl_runtime_c__String__Sequence__init+0x52>
 800f74e:	3401      	adds	r4, #1
 800f750:	350c      	adds	r5, #12
 800f752:	45a2      	cmp	sl, r4
 800f754:	f880 b000 	strb.w	fp, [r0]
 800f758:	e945 b902 	strd	fp, r9, [r5, #-8]
 800f75c:	d0de      	beq.n	800f71c <rosidl_runtime_c__String__Sequence__init+0x10>
 800f75e:	a805      	add	r0, sp, #20
 800f760:	f7fe ffd4 	bl	800e70c <rcutils_get_default_allocator>
 800f764:	9b05      	ldr	r3, [sp, #20]
 800f766:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f768:	2001      	movs	r0, #1
 800f76a:	4798      	blx	r3
 800f76c:	6028      	str	r0, [r5, #0]
 800f76e:	2800      	cmp	r0, #0
 800f770:	d1ed      	bne.n	800f74e <rosidl_runtime_c__String__Sequence__init+0x42>
 800f772:	b15c      	cbz	r4, 800f78c <rosidl_runtime_c__String__Sequence__init+0x80>
 800f774:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f778:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800f77c:	3c0c      	subs	r4, #12
 800f77e:	4620      	mov	r0, r4
 800f780:	f7ff ff2a 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 800f784:	42a6      	cmp	r6, r4
 800f786:	f1a4 040c 	sub.w	r4, r4, #12
 800f78a:	d1f8      	bne.n	800f77e <rosidl_runtime_c__String__Sequence__init+0x72>
 800f78c:	9b01      	ldr	r3, [sp, #4]
 800f78e:	4639      	mov	r1, r7
 800f790:	4630      	mov	r0, r6
 800f792:	4798      	blx	r3
 800f794:	2000      	movs	r0, #0
 800f796:	b00b      	add	sp, #44	@ 0x2c
 800f798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f79c <rosidl_runtime_c__String__Sequence__fini>:
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d044      	beq.n	800f82a <rosidl_runtime_c__String__Sequence__fini+0x8e>
 800f7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7a2:	6803      	ldr	r3, [r0, #0]
 800f7a4:	b087      	sub	sp, #28
 800f7a6:	4606      	mov	r6, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d03c      	beq.n	800f826 <rosidl_runtime_c__String__Sequence__fini+0x8a>
 800f7ac:	6881      	ldr	r1, [r0, #8]
 800f7ae:	2900      	cmp	r1, #0
 800f7b0:	d02e      	beq.n	800f810 <rosidl_runtime_c__String__Sequence__fini+0x74>
 800f7b2:	2400      	movs	r4, #0
 800f7b4:	4627      	mov	r7, r4
 800f7b6:	e011      	b.n	800f7dc <rosidl_runtime_c__String__Sequence__fini+0x40>
 800f7b8:	68ab      	ldr	r3, [r5, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d036      	beq.n	800f82c <rosidl_runtime_c__String__Sequence__fini+0x90>
 800f7be:	a801      	add	r0, sp, #4
 800f7c0:	f7fe ffa4 	bl	800e70c <rcutils_get_default_allocator>
 800f7c4:	9905      	ldr	r1, [sp, #20]
 800f7c6:	9b02      	ldr	r3, [sp, #8]
 800f7c8:	6828      	ldr	r0, [r5, #0]
 800f7ca:	4798      	blx	r3
 800f7cc:	68b1      	ldr	r1, [r6, #8]
 800f7ce:	60af      	str	r7, [r5, #8]
 800f7d0:	e9c5 7700 	strd	r7, r7, [r5]
 800f7d4:	3401      	adds	r4, #1
 800f7d6:	428c      	cmp	r4, r1
 800f7d8:	d21a      	bcs.n	800f810 <rosidl_runtime_c__String__Sequence__fini+0x74>
 800f7da:	6833      	ldr	r3, [r6, #0]
 800f7dc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f7e0:	eb13 0582 	adds.w	r5, r3, r2, lsl #2
 800f7e4:	d0f6      	beq.n	800f7d4 <rosidl_runtime_c__String__Sequence__fini+0x38>
 800f7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1e4      	bne.n	800f7b8 <rosidl_runtime_c__String__Sequence__fini+0x1c>
 800f7ee:	686b      	ldr	r3, [r5, #4]
 800f7f0:	bb43      	cbnz	r3, 800f844 <rosidl_runtime_c__String__Sequence__fini+0xa8>
 800f7f2:	68ab      	ldr	r3, [r5, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d0ed      	beq.n	800f7d4 <rosidl_runtime_c__String__Sequence__fini+0x38>
 800f7f8:	4b18      	ldr	r3, [pc, #96]	@ (800f85c <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 800f7fa:	4819      	ldr	r0, [pc, #100]	@ (800f860 <rosidl_runtime_c__String__Sequence__fini+0xc4>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2251      	movs	r2, #81	@ 0x51
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	2101      	movs	r1, #1
 800f804:	f011 feda 	bl	80215bc <fwrite>
 800f808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f80c:	f011 fb28 	bl	8020e60 <exit>
 800f810:	a801      	add	r0, sp, #4
 800f812:	f7fe ff7b 	bl	800e70c <rcutils_get_default_allocator>
 800f816:	9b02      	ldr	r3, [sp, #8]
 800f818:	9905      	ldr	r1, [sp, #20]
 800f81a:	6830      	ldr	r0, [r6, #0]
 800f81c:	4798      	blx	r3
 800f81e:	2300      	movs	r3, #0
 800f820:	e9c6 3300 	strd	r3, r3, [r6]
 800f824:	60b3      	str	r3, [r6, #8]
 800f826:	b007      	add	sp, #28
 800f828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f82a:	4770      	bx	lr
 800f82c:	4b0b      	ldr	r3, [pc, #44]	@ (800f85c <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 800f82e:	480d      	ldr	r0, [pc, #52]	@ (800f864 <rosidl_runtime_c__String__Sequence__fini+0xc8>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	224c      	movs	r2, #76	@ 0x4c
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	2101      	movs	r1, #1
 800f838:	f011 fec0 	bl	80215bc <fwrite>
 800f83c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f840:	f011 fb0e 	bl	8020e60 <exit>
 800f844:	4b05      	ldr	r3, [pc, #20]	@ (800f85c <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 800f846:	4808      	ldr	r0, [pc, #32]	@ (800f868 <rosidl_runtime_c__String__Sequence__fini+0xcc>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	224e      	movs	r2, #78	@ 0x4e
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	2101      	movs	r1, #1
 800f850:	f011 feb4 	bl	80215bc <fwrite>
 800f854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f858:	f011 fb02 	bl	8020e60 <exit>
 800f85c:	20001b3c 	.word	0x20001b3c
 800f860:	0802350c 	.word	0x0802350c
 800f864:	0802346c 	.word	0x0802346c
 800f868:	080234bc 	.word	0x080234bc

0800f86c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f870:	6805      	ldr	r5, [r0, #0]
 800f872:	4604      	mov	r4, r0
 800f874:	4628      	mov	r0, r5
 800f876:	460e      	mov	r6, r1
 800f878:	f7f0 fcca 	bl	8000210 <strcmp>
 800f87c:	b1c8      	cbz	r0, 800f8b2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f87e:	4b11      	ldr	r3, [pc, #68]	@ (800f8c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	429d      	cmp	r5, r3
 800f884:	d112      	bne.n	800f8ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f886:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f88a:	f8d8 4000 	ldr.w	r4, [r8]
 800f88e:	b16c      	cbz	r4, 800f8ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f890:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f894:	2700      	movs	r7, #0
 800f896:	3d04      	subs	r5, #4
 800f898:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f89c:	4631      	mov	r1, r6
 800f89e:	f7f0 fcb7 	bl	8000210 <strcmp>
 800f8a2:	00bb      	lsls	r3, r7, #2
 800f8a4:	b140      	cbz	r0, 800f8b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f8a6:	3701      	adds	r7, #1
 800f8a8:	42bc      	cmp	r4, r7
 800f8aa:	d1f5      	bne.n	800f898 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	58d3      	ldr	r3, [r2, r3]
 800f8c2:	4718      	bx	r3
 800f8c4:	20000380 	.word	0x20000380

0800f8c8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8cc:	6805      	ldr	r5, [r0, #0]
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	460e      	mov	r6, r1
 800f8d4:	f7f0 fc9c 	bl	8000210 <strcmp>
 800f8d8:	b1c8      	cbz	r0, 800f90e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f8da:	4b11      	ldr	r3, [pc, #68]	@ (800f920 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	429d      	cmp	r5, r3
 800f8e0:	d112      	bne.n	800f908 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f8e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f8e6:	f8d8 4000 	ldr.w	r4, [r8]
 800f8ea:	b16c      	cbz	r4, 800f908 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f8ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f8f0:	2700      	movs	r7, #0
 800f8f2:	3d04      	subs	r5, #4
 800f8f4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	f7f0 fc89 	bl	8000210 <strcmp>
 800f8fe:	00bb      	lsls	r3, r7, #2
 800f900:	b140      	cbz	r0, 800f914 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f902:	3701      	adds	r7, #1
 800f904:	42bc      	cmp	r4, r7
 800f906:	d1f5      	bne.n	800f8f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f908:	2000      	movs	r0, #0
 800f90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90e:	4620      	mov	r0, r4
 800f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f914:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f91c:	58d3      	ldr	r3, [r2, r3]
 800f91e:	4718      	bx	r3
 800f920:	20000380 	.word	0x20000380

0800f924 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f924:	4b04      	ldr	r3, [pc, #16]	@ (800f938 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	b10a      	cbz	r2, 800f92e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800f92a:	4803      	ldr	r0, [pc, #12]	@ (800f938 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f92c:	4770      	bx	lr
 800f92e:	4a03      	ldr	r2, [pc, #12]	@ (800f93c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800f930:	4801      	ldr	r0, [pc, #4]	@ (800f938 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f932:	6812      	ldr	r2, [r2, #0]
 800f934:	601a      	str	r2, [r3, #0]
 800f936:	4770      	bx	lr
 800f938:	20000390 	.word	0x20000390
 800f93c:	20000380 	.word	0x20000380

0800f940 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f940:	4a02      	ldr	r2, [pc, #8]	@ (800f94c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800f942:	4b03      	ldr	r3, [pc, #12]	@ (800f950 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800f944:	6812      	ldr	r2, [r2, #0]
 800f946:	601a      	str	r2, [r3, #0]
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	20000380 	.word	0x20000380
 800f950:	20000390 	.word	0x20000390

0800f954 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800f954:	2009      	movs	r0, #9
 800f956:	4770      	bx	lr

0800f958 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800f958:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop

0800f960 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800f960:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f968:	e9c2 0100 	strd	r0, r1, [r2]
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop

0800f970 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800f970:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f974:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f978:	e9c1 2300 	strd	r2, r3, [r1]
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop

0800f980 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800f980:	f00e bbe8 	b.w	801e154 <sensor_msgs__msg__Imu__init>

0800f984 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800f984:	f00e bc3c 	b.w	801e200 <sensor_msgs__msg__Imu__fini>

0800f988 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800f988:	2009      	movs	r0, #9
 800f98a:	4770      	bx	lr

0800f98c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800f98c:	2009      	movs	r0, #9
 800f98e:	4770      	bx	lr

0800f990 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800f990:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop

0800f998 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800f998:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop

0800f9a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800f9a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop

0800f9a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800f9a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop

0800f9b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800f9b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f9b4:	4770      	bx	lr
 800f9b6:	bf00      	nop

0800f9b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800f9b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9c0:	e9c2 0100 	strd	r0, r1, [r2]
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop

0800f9c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800f9c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f9cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f9d0:	e9c1 2300 	strd	r2, r3, [r1]
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop

0800f9d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800f9d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f9dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9e0:	e9c2 0100 	strd	r0, r1, [r2]
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop

0800f9e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800f9e8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f9ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f9f0:	e9c1 2300 	strd	r2, r3, [r1]
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop

0800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f9f8:	b510      	push	{r4, lr}
 800f9fa:	f000 f90f 	bl	800fc1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f9fe:	4c0b      	ldr	r4, [pc, #44]	@ (800fa2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800fa00:	60e0      	str	r0, [r4, #12]
 800fa02:	f000 fb5b 	bl	80100bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800fa06:	64a0      	str	r0, [r4, #72]	@ 0x48
 800fa08:	f000 fb6a 	bl	80100e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800fa0c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800fa10:	f000 fb66 	bl	80100e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800fa14:	4b06      	ldr	r3, [pc, #24]	@ (800fa30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800fa16:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	b10a      	cbz	r2, 800fa22 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800fa1e:	4804      	ldr	r0, [pc, #16]	@ (800fa30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800fa20:	bd10      	pop	{r4, pc}
 800fa22:	4a04      	ldr	r2, [pc, #16]	@ (800fa34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800fa24:	4802      	ldr	r0, [pc, #8]	@ (800fa30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800fa26:	6812      	ldr	r2, [r2, #0]
 800fa28:	601a      	str	r2, [r3, #0]
 800fa2a:	bd10      	pop	{r4, pc}
 800fa2c:	2000039c 	.word	0x2000039c
 800fa30:	20000540 	.word	0x20000540
 800fa34:	20000384 	.word	0x20000384

0800fa38 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800fa38:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800fa3c:	4680      	mov	r8, r0
 800fa3e:	460f      	mov	r7, r1
 800fa40:	f000 f910 	bl	800fc64 <get_serialized_size_std_msgs__msg__Header>
 800fa44:	183c      	adds	r4, r7, r0
 800fa46:	4621      	mov	r1, r4
 800fa48:	f108 0018 	add.w	r0, r8, #24
 800fa4c:	f000 fb56 	bl	80100fc <get_serialized_size_geometry_msgs__msg__Quaternion>
 800fa50:	4404      	add	r4, r0
 800fa52:	2108      	movs	r1, #8
 800fa54:	4620      	mov	r0, r4
 800fa56:	f003 fa2d 	bl	8012eb4 <ucdr_alignment>
 800fa5a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800fa5e:	4425      	add	r5, r4
 800fa60:	4629      	mov	r1, r5
 800fa62:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800fa66:	f000 fc01 	bl	801026c <get_serialized_size_geometry_msgs__msg__Vector3>
 800fa6a:	4405      	add	r5, r0
 800fa6c:	2108      	movs	r1, #8
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f003 fa20 	bl	8012eb4 <ucdr_alignment>
 800fa74:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800fa78:	4425      	add	r5, r4
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800fa80:	f000 fbf4 	bl	801026c <get_serialized_size_geometry_msgs__msg__Vector3>
 800fa84:	4405      	add	r5, r0
 800fa86:	2108      	movs	r1, #8
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f003 fa13 	bl	8012eb4 <ucdr_alignment>
 800fa8e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800fa92:	4438      	add	r0, r7
 800fa94:	4428      	add	r0, r5
 800fa96:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800fa9a:	bf00      	nop

0800fa9c <get_serialized_size_sensor_msgs__msg__Imu>:
 800fa9c:	b108      	cbz	r0, 800faa2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800fa9e:	f7ff bfcb 	b.w	800fa38 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800faa2:	4770      	bx	lr

0800faa4 <_Imu__get_serialized_size>:
 800faa4:	b110      	cbz	r0, 800faac <_Imu__get_serialized_size+0x8>
 800faa6:	2100      	movs	r1, #0
 800faa8:	f7ff bfc6 	b.w	800fa38 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop

0800fab0 <_Imu__cdr_deserialize>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	460c      	mov	r4, r1
 800fab4:	b399      	cbz	r1, 800fb1e <_Imu__cdr_deserialize+0x6e>
 800fab6:	4605      	mov	r5, r0
 800fab8:	f000 f956 	bl	800fd68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800fabc:	6843      	ldr	r3, [r0, #4]
 800fabe:	4621      	mov	r1, r4
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	4628      	mov	r0, r5
 800fac4:	4798      	blx	r3
 800fac6:	f000 fbcd 	bl	8010264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800faca:	6843      	ldr	r3, [r0, #4]
 800facc:	f104 0118 	add.w	r1, r4, #24
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	4628      	mov	r0, r5
 800fad4:	4798      	blx	r3
 800fad6:	2209      	movs	r2, #9
 800fad8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800fadc:	4628      	mov	r0, r5
 800fade:	f001 f8fd 	bl	8010cdc <ucdr_deserialize_array_double>
 800fae2:	f000 fc4f 	bl	8010384 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800fae6:	6843      	ldr	r3, [r0, #4]
 800fae8:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	4628      	mov	r0, r5
 800faf0:	4798      	blx	r3
 800faf2:	2209      	movs	r2, #9
 800faf4:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800faf8:	4628      	mov	r0, r5
 800fafa:	f001 f8ef 	bl	8010cdc <ucdr_deserialize_array_double>
 800fafe:	f000 fc41 	bl	8010384 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800fb02:	6843      	ldr	r3, [r0, #4]
 800fb04:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	4798      	blx	r3
 800fb0e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800fb12:	4628      	mov	r0, r5
 800fb14:	2209      	movs	r2, #9
 800fb16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb1a:	f001 b8df 	b.w	8010cdc <ucdr_deserialize_array_double>
 800fb1e:	4608      	mov	r0, r1
 800fb20:	bd38      	pop	{r3, r4, r5, pc}
 800fb22:	bf00      	nop

0800fb24 <_Imu__cdr_serialize>:
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d035      	beq.n	800fb94 <_Imu__cdr_serialize+0x70>
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	460d      	mov	r5, r1
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	f000 f91b 	bl	800fd68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800fb32:	6843      	ldr	r3, [r0, #4]
 800fb34:	4629      	mov	r1, r5
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	4620      	mov	r0, r4
 800fb3a:	4798      	blx	r3
 800fb3c:	f000 fb92 	bl	8010264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800fb40:	6843      	ldr	r3, [r0, #4]
 800fb42:	4629      	mov	r1, r5
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	f104 0018 	add.w	r0, r4, #24
 800fb4a:	4798      	blx	r3
 800fb4c:	2209      	movs	r2, #9
 800fb4e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800fb52:	4628      	mov	r0, r5
 800fb54:	f001 f81a 	bl	8010b8c <ucdr_serialize_array_double>
 800fb58:	f000 fc14 	bl	8010384 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800fb5c:	6843      	ldr	r3, [r0, #4]
 800fb5e:	4629      	mov	r1, r5
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800fb66:	4798      	blx	r3
 800fb68:	2209      	movs	r2, #9
 800fb6a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f001 f80c 	bl	8010b8c <ucdr_serialize_array_double>
 800fb74:	f000 fc06 	bl	8010384 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800fb78:	6843      	ldr	r3, [r0, #4]
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800fb82:	4798      	blx	r3
 800fb84:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800fb88:	4628      	mov	r0, r5
 800fb8a:	2209      	movs	r2, #9
 800fb8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb90:	f000 bffc 	b.w	8010b8c <ucdr_serialize_array_double>
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop

0800fb98 <max_serialized_size_sensor_msgs__msg__Imu>:
 800fb98:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	7003      	strb	r3, [r0, #0]
 800fba0:	4680      	mov	r8, r0
 800fba2:	460f      	mov	r7, r1
 800fba4:	f000 f8d6 	bl	800fd54 <max_serialized_size_std_msgs__msg__Header>
 800fba8:	183c      	adds	r4, r7, r0
 800fbaa:	4621      	mov	r1, r4
 800fbac:	4640      	mov	r0, r8
 800fbae:	f000 fb37 	bl	8010220 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800fbb2:	4404      	add	r4, r0
 800fbb4:	2108      	movs	r1, #8
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f003 f97c 	bl	8012eb4 <ucdr_alignment>
 800fbbc:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800fbc0:	4425      	add	r5, r4
 800fbc2:	4629      	mov	r1, r5
 800fbc4:	4640      	mov	r0, r8
 800fbc6:	f000 fbc1 	bl	801034c <max_serialized_size_geometry_msgs__msg__Vector3>
 800fbca:	4405      	add	r5, r0
 800fbcc:	2108      	movs	r1, #8
 800fbce:	4628      	mov	r0, r5
 800fbd0:	f003 f970 	bl	8012eb4 <ucdr_alignment>
 800fbd4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800fbd8:	4425      	add	r5, r4
 800fbda:	4629      	mov	r1, r5
 800fbdc:	4640      	mov	r0, r8
 800fbde:	f000 fbb5 	bl	801034c <max_serialized_size_geometry_msgs__msg__Vector3>
 800fbe2:	4405      	add	r5, r0
 800fbe4:	2108      	movs	r1, #8
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f003 f964 	bl	8012eb4 <ucdr_alignment>
 800fbec:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800fbf0:	4438      	add	r0, r7
 800fbf2:	4428      	add	r0, r5
 800fbf4:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800fbf8 <_Imu__max_serialized_size>:
 800fbf8:	b500      	push	{lr}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	2100      	movs	r1, #0
 800fbfe:	f10d 0007 	add.w	r0, sp, #7
 800fc02:	f7ff ffc9 	bl	800fb98 <max_serialized_size_sensor_msgs__msg__Imu>
 800fc06:	b003      	add	sp, #12
 800fc08:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800fc0c:	4800      	ldr	r0, [pc, #0]	@ (800fc10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800fc0e:	4770      	bx	lr
 800fc10:	2000054c 	.word	0x2000054c

0800fc14 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800fc14:	f00e bb08 	b.w	801e228 <std_msgs__msg__Header__init>

0800fc18 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800fc18:	f00e bb2a 	b.w	801e270 <std_msgs__msg__Header__fini>

0800fc1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800fc1c:	b508      	push	{r3, lr}
 800fc1e:	f000 f9d3 	bl	800ffc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc22:	4b06      	ldr	r3, [pc, #24]	@ (800fc3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fc24:	4906      	ldr	r1, [pc, #24]	@ (800fc40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	60c8      	str	r0, [r1, #12]
 800fc2a:	b10a      	cbz	r2, 800fc30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800fc2c:	4803      	ldr	r0, [pc, #12]	@ (800fc3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fc2e:	bd08      	pop	{r3, pc}
 800fc30:	4a04      	ldr	r2, [pc, #16]	@ (800fc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800fc32:	4802      	ldr	r0, [pc, #8]	@ (800fc3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fc34:	6812      	ldr	r2, [r2, #0]
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	bd08      	pop	{r3, pc}
 800fc3a:	bf00      	nop
 800fc3c:	200005ec 	.word	0x200005ec
 800fc40:	20000574 	.word	0x20000574
 800fc44:	20000384 	.word	0x20000384

0800fc48 <_Header__max_serialized_size>:
 800fc48:	b500      	push	{lr}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	2100      	movs	r1, #0
 800fc50:	f10d 0007 	add.w	r0, sp, #7
 800fc54:	f88d 3007 	strb.w	r3, [sp, #7]
 800fc58:	f000 fa14 	bl	8010084 <max_serialized_size_builtin_interfaces__msg__Time>
 800fc5c:	b003      	add	sp, #12
 800fc5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc62:	bf00      	nop

0800fc64 <get_serialized_size_std_msgs__msg__Header>:
 800fc64:	b570      	push	{r4, r5, r6, lr}
 800fc66:	4605      	mov	r5, r0
 800fc68:	b168      	cbz	r0, 800fc86 <get_serialized_size_std_msgs__msg__Header+0x22>
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	f000 f9ba 	bl	800ffe4 <get_serialized_size_builtin_interfaces__msg__Time>
 800fc70:	1826      	adds	r6, r4, r0
 800fc72:	2104      	movs	r1, #4
 800fc74:	4630      	mov	r0, r6
 800fc76:	f003 f91d 	bl	8012eb4 <ucdr_alignment>
 800fc7a:	68e9      	ldr	r1, [r5, #12]
 800fc7c:	f1c4 0405 	rsb	r4, r4, #5
 800fc80:	440c      	add	r4, r1
 800fc82:	4404      	add	r4, r0
 800fc84:	19a0      	adds	r0, r4, r6
 800fc86:	bd70      	pop	{r4, r5, r6, pc}

0800fc88 <_Header__cdr_deserialize>:
 800fc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	b083      	sub	sp, #12
 800fc8e:	b1e1      	cbz	r1, 800fcca <_Header__cdr_deserialize+0x42>
 800fc90:	4606      	mov	r6, r0
 800fc92:	f000 fa0b 	bl	80100ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fc96:	6843      	ldr	r3, [r0, #4]
 800fc98:	4621      	mov	r1, r4
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	4798      	blx	r3
 800fca0:	6927      	ldr	r7, [r4, #16]
 800fca2:	68a1      	ldr	r1, [r4, #8]
 800fca4:	ab01      	add	r3, sp, #4
 800fca6:	463a      	mov	r2, r7
 800fca8:	4630      	mov	r0, r6
 800fcaa:	f003 f981 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 800fcae:	9b01      	ldr	r3, [sp, #4]
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	b920      	cbnz	r0, 800fcbe <_Header__cdr_deserialize+0x36>
 800fcb4:	429f      	cmp	r7, r3
 800fcb6:	d30c      	bcc.n	800fcd2 <_Header__cdr_deserialize+0x4a>
 800fcb8:	4628      	mov	r0, r5
 800fcba:	b003      	add	sp, #12
 800fcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcbe:	b103      	cbz	r3, 800fcc2 <_Header__cdr_deserialize+0x3a>
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	60e3      	str	r3, [r4, #12]
 800fcc6:	b003      	add	sp, #12
 800fcc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcca:	460d      	mov	r5, r1
 800fccc:	4628      	mov	r0, r5
 800fcce:	b003      	add	sp, #12
 800fcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcd2:	2101      	movs	r1, #1
 800fcd4:	75b0      	strb	r0, [r6, #22]
 800fcd6:	7571      	strb	r1, [r6, #21]
 800fcd8:	4630      	mov	r0, r6
 800fcda:	60e5      	str	r5, [r4, #12]
 800fcdc:	f003 f900 	bl	8012ee0 <ucdr_align_to>
 800fce0:	4630      	mov	r0, r6
 800fce2:	9901      	ldr	r1, [sp, #4]
 800fce4:	f003 f932 	bl	8012f4c <ucdr_advance_buffer>
 800fce8:	4628      	mov	r0, r5
 800fcea:	b003      	add	sp, #12
 800fcec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcee:	bf00      	nop

0800fcf0 <_Header__cdr_serialize>:
 800fcf0:	b1f8      	cbz	r0, 800fd32 <_Header__cdr_serialize+0x42>
 800fcf2:	b570      	push	{r4, r5, r6, lr}
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	460d      	mov	r5, r1
 800fcf8:	f000 f9d8 	bl	80100ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fcfc:	6843      	ldr	r3, [r0, #4]
 800fcfe:	4629      	mov	r1, r5
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	4620      	mov	r0, r4
 800fd04:	4798      	blx	r3
 800fd06:	68a6      	ldr	r6, [r4, #8]
 800fd08:	b156      	cbz	r6, 800fd20 <_Header__cdr_serialize+0x30>
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f7f0 fa78 	bl	8000200 <strlen>
 800fd10:	4631      	mov	r1, r6
 800fd12:	60e0      	str	r0, [r4, #12]
 800fd14:	1c42      	adds	r2, r0, #1
 800fd16:	4628      	mov	r0, r5
 800fd18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd1c:	f003 b936 	b.w	8012f8c <ucdr_serialize_sequence_char>
 800fd20:	4630      	mov	r0, r6
 800fd22:	60e0      	str	r0, [r4, #12]
 800fd24:	4632      	mov	r2, r6
 800fd26:	4631      	mov	r1, r6
 800fd28:	4628      	mov	r0, r5
 800fd2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd2e:	f003 b92d 	b.w	8012f8c <ucdr_serialize_sequence_char>
 800fd32:	4770      	bx	lr

0800fd34 <_Header__get_serialized_size>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4604      	mov	r4, r0
 800fd38:	b150      	cbz	r0, 800fd50 <_Header__get_serialized_size+0x1c>
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	f000 f952 	bl	800ffe4 <get_serialized_size_builtin_interfaces__msg__Time>
 800fd40:	2104      	movs	r1, #4
 800fd42:	4605      	mov	r5, r0
 800fd44:	f003 f8b6 	bl	8012eb4 <ucdr_alignment>
 800fd48:	68e2      	ldr	r2, [r4, #12]
 800fd4a:	3205      	adds	r2, #5
 800fd4c:	1953      	adds	r3, r2, r5
 800fd4e:	4418      	add	r0, r3
 800fd50:	bd38      	pop	{r3, r4, r5, pc}
 800fd52:	bf00      	nop

0800fd54 <max_serialized_size_std_msgs__msg__Header>:
 800fd54:	b510      	push	{r4, lr}
 800fd56:	2301      	movs	r3, #1
 800fd58:	4604      	mov	r4, r0
 800fd5a:	7003      	strb	r3, [r0, #0]
 800fd5c:	f000 f992 	bl	8010084 <max_serialized_size_builtin_interfaces__msg__Time>
 800fd60:	2300      	movs	r3, #0
 800fd62:	7023      	strb	r3, [r4, #0]
 800fd64:	bd10      	pop	{r4, pc}
 800fd66:	bf00      	nop

0800fd68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800fd68:	4800      	ldr	r0, [pc, #0]	@ (800fd6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800fd6a:	4770      	bx	lr
 800fd6c:	200005f8 	.word	0x200005f8

0800fd70 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800fd70:	4b04      	ldr	r3, [pc, #16]	@ (800fd84 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800fd72:	681a      	ldr	r2, [r3, #0]
 800fd74:	b10a      	cbz	r2, 800fd7a <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800fd76:	4803      	ldr	r0, [pc, #12]	@ (800fd84 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800fd78:	4770      	bx	lr
 800fd7a:	4a03      	ldr	r2, [pc, #12]	@ (800fd88 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800fd7c:	4801      	ldr	r0, [pc, #4]	@ (800fd84 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800fd7e:	6812      	ldr	r2, [r2, #0]
 800fd80:	601a      	str	r2, [r3, #0]
 800fd82:	4770      	bx	lr
 800fd84:	20000628 	.word	0x20000628
 800fd88:	20000380 	.word	0x20000380

0800fd8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800fd8c:	4b04      	ldr	r3, [pc, #16]	@ (800fda0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fd8e:	4805      	ldr	r0, [pc, #20]	@ (800fda4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800fd90:	4905      	ldr	r1, [pc, #20]	@ (800fda8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800fd92:	4a06      	ldr	r2, [pc, #24]	@ (800fdac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6003      	str	r3, [r0, #0]
 800fd98:	600b      	str	r3, [r1, #0]
 800fd9a:	6013      	str	r3, [r2, #0]
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	20000380 	.word	0x20000380
 800fda4:	20000644 	.word	0x20000644
 800fda8:	20000650 	.word	0x20000650
 800fdac:	20000628 	.word	0x20000628

0800fdb0 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800fdb0:	f00e ba6a 	b.w	801e288 <std_srvs__srv__SetBool_Request__init>

0800fdb4 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800fdb4:	f00e ba6c 	b.w	801e290 <std_srvs__srv__SetBool_Request__fini>

0800fdb8 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800fdb8:	f00e ba6c 	b.w	801e294 <std_srvs__srv__SetBool_Response__init>

0800fdbc <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800fdbc:	f00e ba7c 	b.w	801e2b8 <std_srvs__srv__SetBool_Response__fini>

0800fdc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800fdc0:	4b04      	ldr	r3, [pc, #16]	@ (800fdd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	b10a      	cbz	r2, 800fdca <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800fdc6:	4803      	ldr	r0, [pc, #12]	@ (800fdd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fdc8:	4770      	bx	lr
 800fdca:	4a03      	ldr	r2, [pc, #12]	@ (800fdd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800fdcc:	4801      	ldr	r0, [pc, #4]	@ (800fdd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800fdce:	6812      	ldr	r2, [r2, #0]
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	4770      	bx	lr
 800fdd4:	20000698 	.word	0x20000698
 800fdd8:	20000384 	.word	0x20000384

0800fddc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800fddc:	4b04      	ldr	r3, [pc, #16]	@ (800fdf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	b10a      	cbz	r2, 800fde6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800fde2:	4803      	ldr	r0, [pc, #12]	@ (800fdf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800fde4:	4770      	bx	lr
 800fde6:	4a03      	ldr	r2, [pc, #12]	@ (800fdf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800fde8:	4801      	ldr	r0, [pc, #4]	@ (800fdf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800fdea:	6812      	ldr	r2, [r2, #0]
 800fdec:	601a      	str	r2, [r3, #0]
 800fdee:	4770      	bx	lr
 800fdf0:	2000071c 	.word	0x2000071c
 800fdf4:	20000384 	.word	0x20000384

0800fdf8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800fdf8:	4b13      	ldr	r3, [pc, #76]	@ (800fe48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	b132      	cbz	r2, 800fe0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	689a      	ldr	r2, [r3, #8]
 800fe02:	b152      	cbz	r2, 800fe1a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 800fe04:	68da      	ldr	r2, [r3, #12]
 800fe06:	b182      	cbz	r2, 800fe2a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 800fe08:	480f      	ldr	r0, [pc, #60]	@ (800fe48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800fe0a:	4770      	bx	lr
 800fe0c:	4a0f      	ldr	r2, [pc, #60]	@ (800fe4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800fe0e:	6812      	ldr	r2, [r2, #0]
 800fe10:	601a      	str	r2, [r3, #0]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	689a      	ldr	r2, [r3, #8]
 800fe16:	2a00      	cmp	r2, #0
 800fe18:	d1f4      	bne.n	800fe04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 800fe1a:	4a0d      	ldr	r2, [pc, #52]	@ (800fe50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 800fe1c:	6811      	ldr	r1, [r2, #0]
 800fe1e:	b179      	cbz	r1, 800fe40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800fe20:	6852      	ldr	r2, [r2, #4]
 800fe22:	609a      	str	r2, [r3, #8]
 800fe24:	68da      	ldr	r2, [r3, #12]
 800fe26:	2a00      	cmp	r2, #0
 800fe28:	d1ee      	bne.n	800fe08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 800fe2a:	4a0a      	ldr	r2, [pc, #40]	@ (800fe54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 800fe2c:	6811      	ldr	r1, [r2, #0]
 800fe2e:	b119      	cbz	r1, 800fe38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 800fe30:	6852      	ldr	r2, [r2, #4]
 800fe32:	4805      	ldr	r0, [pc, #20]	@ (800fe48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800fe34:	60da      	str	r2, [r3, #12]
 800fe36:	4770      	bx	lr
 800fe38:	4904      	ldr	r1, [pc, #16]	@ (800fe4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800fe3a:	6809      	ldr	r1, [r1, #0]
 800fe3c:	6011      	str	r1, [r2, #0]
 800fe3e:	e7f7      	b.n	800fe30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800fe40:	4902      	ldr	r1, [pc, #8]	@ (800fe4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800fe42:	6809      	ldr	r1, [r1, #0]
 800fe44:	6011      	str	r1, [r2, #0]
 800fe46:	e7eb      	b.n	800fe20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800fe48:	20000738 	.word	0x20000738
 800fe4c:	20000384 	.word	0x20000384
 800fe50:	20000698 	.word	0x20000698
 800fe54:	2000071c 	.word	0x2000071c

0800fe58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800fe58:	4800      	ldr	r0, [pc, #0]	@ (800fe5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800fe5a:	4770      	bx	lr
 800fe5c:	20000760 	.word	0x20000760

0800fe60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800fe60:	4800      	ldr	r0, [pc, #0]	@ (800fe64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800fe62:	4770      	bx	lr
 800fe64:	2000076c 	.word	0x2000076c

0800fe68 <_SetBool_Request__max_serialized_size>:
 800fe68:	b508      	push	{r3, lr}
 800fe6a:	2101      	movs	r1, #1
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	f003 f821 	bl	8012eb4 <ucdr_alignment>
 800fe72:	3001      	adds	r0, #1
 800fe74:	bd08      	pop	{r3, pc}
 800fe76:	bf00      	nop

0800fe78 <_SetBool_Request__cdr_deserialize>:
 800fe78:	b109      	cbz	r1, 800fe7e <_SetBool_Request__cdr_deserialize+0x6>
 800fe7a:	f000 bff1 	b.w	8010e60 <ucdr_deserialize_bool>
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop

0800fe84 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800fe84:	b138      	cbz	r0, 800fe96 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 800fe86:	b508      	push	{r3, lr}
 800fe88:	460b      	mov	r3, r1
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	2101      	movs	r1, #1
 800fe8e:	f003 f811 	bl	8012eb4 <ucdr_alignment>
 800fe92:	3001      	adds	r0, #1
 800fe94:	bd08      	pop	{r3, pc}
 800fe96:	4770      	bx	lr

0800fe98 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800fe98:	b570      	push	{r4, r5, r6, lr}
 800fe9a:	4605      	mov	r5, r0
 800fe9c:	b180      	cbz	r0, 800fec0 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800fe9e:	460c      	mov	r4, r1
 800fea0:	4620      	mov	r0, r4
 800fea2:	2101      	movs	r1, #1
 800fea4:	f003 f806 	bl	8012eb4 <ucdr_alignment>
 800fea8:	1c63      	adds	r3, r4, #1
 800feaa:	181e      	adds	r6, r3, r0
 800feac:	2104      	movs	r1, #4
 800feae:	4630      	mov	r0, r6
 800feb0:	f003 f800 	bl	8012eb4 <ucdr_alignment>
 800feb4:	68a9      	ldr	r1, [r5, #8]
 800feb6:	f1c4 0405 	rsb	r4, r4, #5
 800feba:	440c      	add	r4, r1
 800febc:	4404      	add	r4, r0
 800febe:	19a0      	adds	r0, r4, r6
 800fec0:	bd70      	pop	{r4, r5, r6, pc}
 800fec2:	bf00      	nop

0800fec4 <_SetBool_Request__cdr_serialize>:
 800fec4:	460a      	mov	r2, r1
 800fec6:	b118      	cbz	r0, 800fed0 <_SetBool_Request__cdr_serialize+0xc>
 800fec8:	7801      	ldrb	r1, [r0, #0]
 800feca:	4610      	mov	r0, r2
 800fecc:	f000 bfb2 	b.w	8010e34 <ucdr_serialize_bool>
 800fed0:	4770      	bx	lr
 800fed2:	bf00      	nop

0800fed4 <_SetBool_Response__cdr_deserialize>:
 800fed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fed6:	460c      	mov	r4, r1
 800fed8:	b083      	sub	sp, #12
 800feda:	b1b9      	cbz	r1, 800ff0c <_SetBool_Response__cdr_deserialize+0x38>
 800fedc:	4606      	mov	r6, r0
 800fede:	f000 ffbf 	bl	8010e60 <ucdr_deserialize_bool>
 800fee2:	68e7      	ldr	r7, [r4, #12]
 800fee4:	6861      	ldr	r1, [r4, #4]
 800fee6:	ab01      	add	r3, sp, #4
 800fee8:	463a      	mov	r2, r7
 800feea:	4630      	mov	r0, r6
 800feec:	f003 f860 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 800fef0:	9b01      	ldr	r3, [sp, #4]
 800fef2:	4605      	mov	r5, r0
 800fef4:	b920      	cbnz	r0, 800ff00 <_SetBool_Response__cdr_deserialize+0x2c>
 800fef6:	429f      	cmp	r7, r3
 800fef8:	d30c      	bcc.n	800ff14 <_SetBool_Response__cdr_deserialize+0x40>
 800fefa:	4628      	mov	r0, r5
 800fefc:	b003      	add	sp, #12
 800fefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff00:	b103      	cbz	r3, 800ff04 <_SetBool_Response__cdr_deserialize+0x30>
 800ff02:	3b01      	subs	r3, #1
 800ff04:	4628      	mov	r0, r5
 800ff06:	60a3      	str	r3, [r4, #8]
 800ff08:	b003      	add	sp, #12
 800ff0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff0c:	460d      	mov	r5, r1
 800ff0e:	4628      	mov	r0, r5
 800ff10:	b003      	add	sp, #12
 800ff12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff14:	2101      	movs	r1, #1
 800ff16:	75b0      	strb	r0, [r6, #22]
 800ff18:	7571      	strb	r1, [r6, #21]
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	60a5      	str	r5, [r4, #8]
 800ff1e:	f002 ffdf 	bl	8012ee0 <ucdr_align_to>
 800ff22:	4630      	mov	r0, r6
 800ff24:	9901      	ldr	r1, [sp, #4]
 800ff26:	f003 f811 	bl	8012f4c <ucdr_advance_buffer>
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	b003      	add	sp, #12
 800ff2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff30 <_SetBool_Response__cdr_serialize>:
 800ff30:	b1e0      	cbz	r0, 800ff6c <_SetBool_Response__cdr_serialize+0x3c>
 800ff32:	b570      	push	{r4, r5, r6, lr}
 800ff34:	460d      	mov	r5, r1
 800ff36:	4604      	mov	r4, r0
 800ff38:	7801      	ldrb	r1, [r0, #0]
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	f000 ff7a 	bl	8010e34 <ucdr_serialize_bool>
 800ff40:	6866      	ldr	r6, [r4, #4]
 800ff42:	b156      	cbz	r6, 800ff5a <_SetBool_Response__cdr_serialize+0x2a>
 800ff44:	4630      	mov	r0, r6
 800ff46:	f7f0 f95b 	bl	8000200 <strlen>
 800ff4a:	4631      	mov	r1, r6
 800ff4c:	60a0      	str	r0, [r4, #8]
 800ff4e:	1c42      	adds	r2, r0, #1
 800ff50:	4628      	mov	r0, r5
 800ff52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff56:	f003 b819 	b.w	8012f8c <ucdr_serialize_sequence_char>
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	60a0      	str	r0, [r4, #8]
 800ff5e:	4632      	mov	r2, r6
 800ff60:	4631      	mov	r1, r6
 800ff62:	4628      	mov	r0, r5
 800ff64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff68:	f003 b810 	b.w	8012f8c <ucdr_serialize_sequence_char>
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop

0800ff70 <_SetBool_Request__get_serialized_size>:
 800ff70:	b130      	cbz	r0, 800ff80 <_SetBool_Request__get_serialized_size+0x10>
 800ff72:	b508      	push	{r3, lr}
 800ff74:	2101      	movs	r1, #1
 800ff76:	2000      	movs	r0, #0
 800ff78:	f002 ff9c 	bl	8012eb4 <ucdr_alignment>
 800ff7c:	3001      	adds	r0, #1
 800ff7e:	bd08      	pop	{r3, pc}
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop

0800ff84 <_SetBool_Response__max_serialized_size>:
 800ff84:	b508      	push	{r3, lr}
 800ff86:	2101      	movs	r1, #1
 800ff88:	2000      	movs	r0, #0
 800ff8a:	f002 ff93 	bl	8012eb4 <ucdr_alignment>
 800ff8e:	3001      	adds	r0, #1
 800ff90:	bd08      	pop	{r3, pc}
 800ff92:	bf00      	nop

0800ff94 <_SetBool_Response__get_serialized_size>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	4604      	mov	r4, r0
 800ff98:	b160      	cbz	r0, 800ffb4 <_SetBool_Response__get_serialized_size+0x20>
 800ff9a:	2101      	movs	r1, #1
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	f002 ff89 	bl	8012eb4 <ucdr_alignment>
 800ffa2:	1c45      	adds	r5, r0, #1
 800ffa4:	2104      	movs	r1, #4
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	f002 ff84 	bl	8012eb4 <ucdr_alignment>
 800ffac:	68a3      	ldr	r3, [r4, #8]
 800ffae:	3305      	adds	r3, #5
 800ffb0:	4418      	add	r0, r3
 800ffb2:	4428      	add	r0, r5
 800ffb4:	bd38      	pop	{r3, r4, r5, pc}
 800ffb6:	bf00      	nop

0800ffb8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800ffb8:	4800      	ldr	r0, [pc, #0]	@ (800ffbc <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800ffba:	4770      	bx	lr
 800ffbc:	20000754 	.word	0x20000754

0800ffc0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800ffc0:	f00e b980 	b.w	801e2c4 <builtin_interfaces__msg__Time__init>

0800ffc4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800ffc4:	f00e b982 	b.w	801e2cc <builtin_interfaces__msg__Time__fini>

0800ffc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ffc8:	4b04      	ldr	r3, [pc, #16]	@ (800ffdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	b10a      	cbz	r2, 800ffd2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800ffce:	4803      	ldr	r0, [pc, #12]	@ (800ffdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ffd0:	4770      	bx	lr
 800ffd2:	4a03      	ldr	r2, [pc, #12]	@ (800ffe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800ffd4:	4801      	ldr	r0, [pc, #4]	@ (800ffdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ffd6:	6812      	ldr	r2, [r2, #0]
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	4770      	bx	lr
 800ffdc:	20000828 	.word	0x20000828
 800ffe0:	20000384 	.word	0x20000384

0800ffe4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800ffe4:	b180      	cbz	r0, 8010008 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800ffe6:	b538      	push	{r3, r4, r5, lr}
 800ffe8:	460d      	mov	r5, r1
 800ffea:	4628      	mov	r0, r5
 800ffec:	2104      	movs	r1, #4
 800ffee:	f002 ff61 	bl	8012eb4 <ucdr_alignment>
 800fff2:	1d2b      	adds	r3, r5, #4
 800fff4:	181c      	adds	r4, r3, r0
 800fff6:	2104      	movs	r1, #4
 800fff8:	4620      	mov	r0, r4
 800fffa:	f002 ff5b 	bl	8012eb4 <ucdr_alignment>
 800fffe:	f1c5 0504 	rsb	r5, r5, #4
 8010002:	4428      	add	r0, r5
 8010004:	4420      	add	r0, r4
 8010006:	bd38      	pop	{r3, r4, r5, pc}
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop

0801000c <_Time__cdr_deserialize>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	460c      	mov	r4, r1
 8010010:	b141      	cbz	r1, 8010024 <_Time__cdr_deserialize+0x18>
 8010012:	4605      	mov	r5, r0
 8010014:	f001 feca 	bl	8011dac <ucdr_deserialize_int32_t>
 8010018:	1d21      	adds	r1, r4, #4
 801001a:	4628      	mov	r0, r5
 801001c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010020:	f001 ba7c 	b.w	801151c <ucdr_deserialize_uint32_t>
 8010024:	4608      	mov	r0, r1
 8010026:	bd38      	pop	{r3, r4, r5, pc}

08010028 <_Time__cdr_serialize>:
 8010028:	b160      	cbz	r0, 8010044 <_Time__cdr_serialize+0x1c>
 801002a:	b538      	push	{r3, r4, r5, lr}
 801002c:	460d      	mov	r5, r1
 801002e:	4604      	mov	r4, r0
 8010030:	6801      	ldr	r1, [r0, #0]
 8010032:	4628      	mov	r0, r5
 8010034:	f001 fe22 	bl	8011c7c <ucdr_serialize_int32_t>
 8010038:	6861      	ldr	r1, [r4, #4]
 801003a:	4628      	mov	r0, r5
 801003c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010040:	f001 b93c 	b.w	80112bc <ucdr_serialize_uint32_t>
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop

08010048 <_Time__get_serialized_size>:
 8010048:	b160      	cbz	r0, 8010064 <_Time__get_serialized_size+0x1c>
 801004a:	b510      	push	{r4, lr}
 801004c:	2104      	movs	r1, #4
 801004e:	2000      	movs	r0, #0
 8010050:	f002 ff30 	bl	8012eb4 <ucdr_alignment>
 8010054:	1d04      	adds	r4, r0, #4
 8010056:	2104      	movs	r1, #4
 8010058:	4620      	mov	r0, r4
 801005a:	f002 ff2b 	bl	8012eb4 <ucdr_alignment>
 801005e:	3004      	adds	r0, #4
 8010060:	4420      	add	r0, r4
 8010062:	bd10      	pop	{r4, pc}
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop

08010068 <_Time__max_serialized_size>:
 8010068:	b510      	push	{r4, lr}
 801006a:	2104      	movs	r1, #4
 801006c:	2000      	movs	r0, #0
 801006e:	f002 ff21 	bl	8012eb4 <ucdr_alignment>
 8010072:	1d04      	adds	r4, r0, #4
 8010074:	2104      	movs	r1, #4
 8010076:	4620      	mov	r0, r4
 8010078:	f002 ff1c 	bl	8012eb4 <ucdr_alignment>
 801007c:	3004      	adds	r0, #4
 801007e:	4420      	add	r0, r4
 8010080:	bd10      	pop	{r4, pc}
 8010082:	bf00      	nop

08010084 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	460c      	mov	r4, r1
 8010088:	2301      	movs	r3, #1
 801008a:	7003      	strb	r3, [r0, #0]
 801008c:	2104      	movs	r1, #4
 801008e:	4620      	mov	r0, r4
 8010090:	f002 ff10 	bl	8012eb4 <ucdr_alignment>
 8010094:	1d25      	adds	r5, r4, #4
 8010096:	4405      	add	r5, r0
 8010098:	2104      	movs	r1, #4
 801009a:	4628      	mov	r0, r5
 801009c:	f002 ff0a 	bl	8012eb4 <ucdr_alignment>
 80100a0:	f1c4 0404 	rsb	r4, r4, #4
 80100a4:	4420      	add	r0, r4
 80100a6:	4428      	add	r0, r5
 80100a8:	bd38      	pop	{r3, r4, r5, pc}
 80100aa:	bf00      	nop

080100ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80100ac:	4800      	ldr	r0, [pc, #0]	@ (80100b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80100ae:	4770      	bx	lr
 80100b0:	20000834 	.word	0x20000834

080100b4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 80100b4:	f00e b90c 	b.w	801e2d0 <geometry_msgs__msg__Quaternion__init>

080100b8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 80100b8:	f00e b91e 	b.w	801e2f8 <geometry_msgs__msg__Quaternion__fini>

080100bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80100bc:	4b04      	ldr	r3, [pc, #16]	@ (80100d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	b10a      	cbz	r2, 80100c6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 80100c2:	4803      	ldr	r0, [pc, #12]	@ (80100d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80100c4:	4770      	bx	lr
 80100c6:	4a03      	ldr	r2, [pc, #12]	@ (80100d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 80100c8:	4801      	ldr	r0, [pc, #4]	@ (80100d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 80100ca:	6812      	ldr	r2, [r2, #0]
 80100cc:	601a      	str	r2, [r3, #0]
 80100ce:	4770      	bx	lr
 80100d0:	2000094c 	.word	0x2000094c
 80100d4:	20000384 	.word	0x20000384

080100d8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 80100d8:	f00e b910 	b.w	801e2fc <geometry_msgs__msg__Vector3__init>

080100dc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 80100dc:	f00e b912 	b.w	801e304 <geometry_msgs__msg__Vector3__fini>

080100e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80100e0:	4b04      	ldr	r3, [pc, #16]	@ (80100f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	b10a      	cbz	r2, 80100ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 80100e6:	4803      	ldr	r0, [pc, #12]	@ (80100f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80100e8:	4770      	bx	lr
 80100ea:	4a03      	ldr	r2, [pc, #12]	@ (80100f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 80100ec:	4801      	ldr	r0, [pc, #4]	@ (80100f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80100ee:	6812      	ldr	r2, [r2, #0]
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	4770      	bx	lr
 80100f4:	20000a0c 	.word	0x20000a0c
 80100f8:	20000384 	.word	0x20000384

080100fc <get_serialized_size_geometry_msgs__msg__Quaternion>:
 80100fc:	b1f0      	cbz	r0, 801013c <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 80100fe:	b570      	push	{r4, r5, r6, lr}
 8010100:	460d      	mov	r5, r1
 8010102:	4628      	mov	r0, r5
 8010104:	2108      	movs	r1, #8
 8010106:	f002 fed5 	bl	8012eb4 <ucdr_alignment>
 801010a:	f105 0308 	add.w	r3, r5, #8
 801010e:	181e      	adds	r6, r3, r0
 8010110:	2108      	movs	r1, #8
 8010112:	4630      	mov	r0, r6
 8010114:	f002 fece 	bl	8012eb4 <ucdr_alignment>
 8010118:	f100 0408 	add.w	r4, r0, #8
 801011c:	4434      	add	r4, r6
 801011e:	2108      	movs	r1, #8
 8010120:	4620      	mov	r0, r4
 8010122:	f002 fec7 	bl	8012eb4 <ucdr_alignment>
 8010126:	3008      	adds	r0, #8
 8010128:	4404      	add	r4, r0
 801012a:	2108      	movs	r1, #8
 801012c:	4620      	mov	r0, r4
 801012e:	f002 fec1 	bl	8012eb4 <ucdr_alignment>
 8010132:	f1c5 0508 	rsb	r5, r5, #8
 8010136:	4428      	add	r0, r5
 8010138:	4420      	add	r0, r4
 801013a:	bd70      	pop	{r4, r5, r6, pc}
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop

08010140 <_Quaternion__cdr_deserialize>:
 8010140:	b538      	push	{r3, r4, r5, lr}
 8010142:	460c      	mov	r4, r1
 8010144:	b199      	cbz	r1, 801016e <_Quaternion__cdr_deserialize+0x2e>
 8010146:	4605      	mov	r5, r0
 8010148:	f002 fcc8 	bl	8012adc <ucdr_deserialize_double>
 801014c:	f104 0108 	add.w	r1, r4, #8
 8010150:	4628      	mov	r0, r5
 8010152:	f002 fcc3 	bl	8012adc <ucdr_deserialize_double>
 8010156:	f104 0110 	add.w	r1, r4, #16
 801015a:	4628      	mov	r0, r5
 801015c:	f002 fcbe 	bl	8012adc <ucdr_deserialize_double>
 8010160:	f104 0118 	add.w	r1, r4, #24
 8010164:	4628      	mov	r0, r5
 8010166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801016a:	f002 bcb7 	b.w	8012adc <ucdr_deserialize_double>
 801016e:	4608      	mov	r0, r1
 8010170:	bd38      	pop	{r3, r4, r5, pc}
 8010172:	bf00      	nop

08010174 <_Quaternion__cdr_serialize>:
 8010174:	b1c0      	cbz	r0, 80101a8 <_Quaternion__cdr_serialize+0x34>
 8010176:	b538      	push	{r3, r4, r5, lr}
 8010178:	ed90 0b00 	vldr	d0, [r0]
 801017c:	460d      	mov	r5, r1
 801017e:	4604      	mov	r4, r0
 8010180:	4608      	mov	r0, r1
 8010182:	f002 fb09 	bl	8012798 <ucdr_serialize_double>
 8010186:	ed94 0b02 	vldr	d0, [r4, #8]
 801018a:	4628      	mov	r0, r5
 801018c:	f002 fb04 	bl	8012798 <ucdr_serialize_double>
 8010190:	ed94 0b04 	vldr	d0, [r4, #16]
 8010194:	4628      	mov	r0, r5
 8010196:	f002 faff 	bl	8012798 <ucdr_serialize_double>
 801019a:	ed94 0b06 	vldr	d0, [r4, #24]
 801019e:	4628      	mov	r0, r5
 80101a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101a4:	f002 baf8 	b.w	8012798 <ucdr_serialize_double>
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop

080101ac <_Quaternion__get_serialized_size>:
 80101ac:	b1d0      	cbz	r0, 80101e4 <_Quaternion__get_serialized_size+0x38>
 80101ae:	b538      	push	{r3, r4, r5, lr}
 80101b0:	2108      	movs	r1, #8
 80101b2:	2000      	movs	r0, #0
 80101b4:	f002 fe7e 	bl	8012eb4 <ucdr_alignment>
 80101b8:	f100 0508 	add.w	r5, r0, #8
 80101bc:	2108      	movs	r1, #8
 80101be:	4628      	mov	r0, r5
 80101c0:	f002 fe78 	bl	8012eb4 <ucdr_alignment>
 80101c4:	f100 0408 	add.w	r4, r0, #8
 80101c8:	442c      	add	r4, r5
 80101ca:	2108      	movs	r1, #8
 80101cc:	4620      	mov	r0, r4
 80101ce:	f002 fe71 	bl	8012eb4 <ucdr_alignment>
 80101d2:	3008      	adds	r0, #8
 80101d4:	4404      	add	r4, r0
 80101d6:	2108      	movs	r1, #8
 80101d8:	4620      	mov	r0, r4
 80101da:	f002 fe6b 	bl	8012eb4 <ucdr_alignment>
 80101de:	3008      	adds	r0, #8
 80101e0:	4420      	add	r0, r4
 80101e2:	bd38      	pop	{r3, r4, r5, pc}
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop

080101e8 <_Quaternion__max_serialized_size>:
 80101e8:	b538      	push	{r3, r4, r5, lr}
 80101ea:	2108      	movs	r1, #8
 80101ec:	2000      	movs	r0, #0
 80101ee:	f002 fe61 	bl	8012eb4 <ucdr_alignment>
 80101f2:	f100 0508 	add.w	r5, r0, #8
 80101f6:	2108      	movs	r1, #8
 80101f8:	4628      	mov	r0, r5
 80101fa:	f002 fe5b 	bl	8012eb4 <ucdr_alignment>
 80101fe:	f100 0408 	add.w	r4, r0, #8
 8010202:	442c      	add	r4, r5
 8010204:	2108      	movs	r1, #8
 8010206:	4620      	mov	r0, r4
 8010208:	f002 fe54 	bl	8012eb4 <ucdr_alignment>
 801020c:	3008      	adds	r0, #8
 801020e:	4404      	add	r4, r0
 8010210:	2108      	movs	r1, #8
 8010212:	4620      	mov	r0, r4
 8010214:	f002 fe4e 	bl	8012eb4 <ucdr_alignment>
 8010218:	3008      	adds	r0, #8
 801021a:	4420      	add	r0, r4
 801021c:	bd38      	pop	{r3, r4, r5, pc}
 801021e:	bf00      	nop

08010220 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	2301      	movs	r3, #1
 8010224:	460c      	mov	r4, r1
 8010226:	7003      	strb	r3, [r0, #0]
 8010228:	2108      	movs	r1, #8
 801022a:	4620      	mov	r0, r4
 801022c:	f002 fe42 	bl	8012eb4 <ucdr_alignment>
 8010230:	f104 0508 	add.w	r5, r4, #8
 8010234:	1946      	adds	r6, r0, r5
 8010236:	2108      	movs	r1, #8
 8010238:	4630      	mov	r0, r6
 801023a:	f002 fe3b 	bl	8012eb4 <ucdr_alignment>
 801023e:	f100 0508 	add.w	r5, r0, #8
 8010242:	4435      	add	r5, r6
 8010244:	2108      	movs	r1, #8
 8010246:	4628      	mov	r0, r5
 8010248:	f002 fe34 	bl	8012eb4 <ucdr_alignment>
 801024c:	3008      	adds	r0, #8
 801024e:	4405      	add	r5, r0
 8010250:	2108      	movs	r1, #8
 8010252:	4628      	mov	r0, r5
 8010254:	f002 fe2e 	bl	8012eb4 <ucdr_alignment>
 8010258:	f1c4 0408 	rsb	r4, r4, #8
 801025c:	4420      	add	r0, r4
 801025e:	4428      	add	r0, r5
 8010260:	bd70      	pop	{r4, r5, r6, pc}
 8010262:	bf00      	nop

08010264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8010264:	4800      	ldr	r0, [pc, #0]	@ (8010268 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8010266:	4770      	bx	lr
 8010268:	20000a18 	.word	0x20000a18

0801026c <get_serialized_size_geometry_msgs__msg__Vector3>:
 801026c:	b1b8      	cbz	r0, 801029e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 801026e:	b538      	push	{r3, r4, r5, lr}
 8010270:	460d      	mov	r5, r1
 8010272:	4628      	mov	r0, r5
 8010274:	2108      	movs	r1, #8
 8010276:	f002 fe1d 	bl	8012eb4 <ucdr_alignment>
 801027a:	f105 0308 	add.w	r3, r5, #8
 801027e:	181c      	adds	r4, r3, r0
 8010280:	2108      	movs	r1, #8
 8010282:	4620      	mov	r0, r4
 8010284:	f002 fe16 	bl	8012eb4 <ucdr_alignment>
 8010288:	3008      	adds	r0, #8
 801028a:	4404      	add	r4, r0
 801028c:	2108      	movs	r1, #8
 801028e:	4620      	mov	r0, r4
 8010290:	f002 fe10 	bl	8012eb4 <ucdr_alignment>
 8010294:	f1c5 0508 	rsb	r5, r5, #8
 8010298:	4428      	add	r0, r5
 801029a:	4420      	add	r0, r4
 801029c:	bd38      	pop	{r3, r4, r5, pc}
 801029e:	4770      	bx	lr

080102a0 <_Vector3__cdr_deserialize>:
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	460c      	mov	r4, r1
 80102a4:	b171      	cbz	r1, 80102c4 <_Vector3__cdr_deserialize+0x24>
 80102a6:	4605      	mov	r5, r0
 80102a8:	f002 fc18 	bl	8012adc <ucdr_deserialize_double>
 80102ac:	f104 0108 	add.w	r1, r4, #8
 80102b0:	4628      	mov	r0, r5
 80102b2:	f002 fc13 	bl	8012adc <ucdr_deserialize_double>
 80102b6:	f104 0110 	add.w	r1, r4, #16
 80102ba:	4628      	mov	r0, r5
 80102bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102c0:	f002 bc0c 	b.w	8012adc <ucdr_deserialize_double>
 80102c4:	4608      	mov	r0, r1
 80102c6:	bd38      	pop	{r3, r4, r5, pc}

080102c8 <_Vector3__cdr_serialize>:
 80102c8:	b198      	cbz	r0, 80102f2 <_Vector3__cdr_serialize+0x2a>
 80102ca:	b538      	push	{r3, r4, r5, lr}
 80102cc:	ed90 0b00 	vldr	d0, [r0]
 80102d0:	460d      	mov	r5, r1
 80102d2:	4604      	mov	r4, r0
 80102d4:	4608      	mov	r0, r1
 80102d6:	f002 fa5f 	bl	8012798 <ucdr_serialize_double>
 80102da:	ed94 0b02 	vldr	d0, [r4, #8]
 80102de:	4628      	mov	r0, r5
 80102e0:	f002 fa5a 	bl	8012798 <ucdr_serialize_double>
 80102e4:	ed94 0b04 	vldr	d0, [r4, #16]
 80102e8:	4628      	mov	r0, r5
 80102ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ee:	f002 ba53 	b.w	8012798 <ucdr_serialize_double>
 80102f2:	4770      	bx	lr

080102f4 <_Vector3__get_serialized_size>:
 80102f4:	b198      	cbz	r0, 801031e <_Vector3__get_serialized_size+0x2a>
 80102f6:	b510      	push	{r4, lr}
 80102f8:	2108      	movs	r1, #8
 80102fa:	2000      	movs	r0, #0
 80102fc:	f002 fdda 	bl	8012eb4 <ucdr_alignment>
 8010300:	f100 0408 	add.w	r4, r0, #8
 8010304:	2108      	movs	r1, #8
 8010306:	4620      	mov	r0, r4
 8010308:	f002 fdd4 	bl	8012eb4 <ucdr_alignment>
 801030c:	3008      	adds	r0, #8
 801030e:	4404      	add	r4, r0
 8010310:	2108      	movs	r1, #8
 8010312:	4620      	mov	r0, r4
 8010314:	f002 fdce 	bl	8012eb4 <ucdr_alignment>
 8010318:	3008      	adds	r0, #8
 801031a:	4420      	add	r0, r4
 801031c:	bd10      	pop	{r4, pc}
 801031e:	4770      	bx	lr

08010320 <_Vector3__max_serialized_size>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	2108      	movs	r1, #8
 8010324:	2000      	movs	r0, #0
 8010326:	f002 fdc5 	bl	8012eb4 <ucdr_alignment>
 801032a:	f100 0508 	add.w	r5, r0, #8
 801032e:	2108      	movs	r1, #8
 8010330:	4628      	mov	r0, r5
 8010332:	f002 fdbf 	bl	8012eb4 <ucdr_alignment>
 8010336:	f100 0408 	add.w	r4, r0, #8
 801033a:	442c      	add	r4, r5
 801033c:	2108      	movs	r1, #8
 801033e:	4620      	mov	r0, r4
 8010340:	f002 fdb8 	bl	8012eb4 <ucdr_alignment>
 8010344:	3008      	adds	r0, #8
 8010346:	4420      	add	r0, r4
 8010348:	bd38      	pop	{r3, r4, r5, pc}
 801034a:	bf00      	nop

0801034c <max_serialized_size_geometry_msgs__msg__Vector3>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	2301      	movs	r3, #1
 8010350:	460c      	mov	r4, r1
 8010352:	7003      	strb	r3, [r0, #0]
 8010354:	2108      	movs	r1, #8
 8010356:	4620      	mov	r0, r4
 8010358:	f002 fdac 	bl	8012eb4 <ucdr_alignment>
 801035c:	f104 0508 	add.w	r5, r4, #8
 8010360:	1946      	adds	r6, r0, r5
 8010362:	2108      	movs	r1, #8
 8010364:	4630      	mov	r0, r6
 8010366:	f002 fda5 	bl	8012eb4 <ucdr_alignment>
 801036a:	f100 0508 	add.w	r5, r0, #8
 801036e:	4435      	add	r5, r6
 8010370:	2108      	movs	r1, #8
 8010372:	4628      	mov	r0, r5
 8010374:	f002 fd9e 	bl	8012eb4 <ucdr_alignment>
 8010378:	f1c4 0408 	rsb	r4, r4, #8
 801037c:	4420      	add	r0, r4
 801037e:	4428      	add	r0, r5
 8010380:	bd70      	pop	{r4, r5, r6, pc}
 8010382:	bf00      	nop

08010384 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8010384:	4800      	ldr	r0, [pc, #0]	@ (8010388 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8010386:	4770      	bx	lr
 8010388:	20000a40 	.word	0x20000a40

0801038c <micro_ros_string_utilities_init_with_size>:
 801038c:	b570      	push	{r4, r5, r6, lr}
 801038e:	b086      	sub	sp, #24
 8010390:	1c4c      	adds	r4, r1, #1
 8010392:	4605      	mov	r5, r0
 8010394:	a801      	add	r0, sp, #4
 8010396:	f7fe f9b9 	bl	800e70c <rcutils_get_default_allocator>
 801039a:	9b01      	ldr	r3, [sp, #4]
 801039c:	9905      	ldr	r1, [sp, #20]
 801039e:	4620      	mov	r0, r4
 80103a0:	4798      	blx	r3
 80103a2:	4622      	mov	r2, r4
 80103a4:	2100      	movs	r1, #0
 80103a6:	4606      	mov	r6, r0
 80103a8:	f011 fadb 	bl	8021962 <memset>
 80103ac:	2300      	movs	r3, #0
 80103ae:	4628      	mov	r0, r5
 80103b0:	e9c5 6300 	strd	r6, r3, [r5]
 80103b4:	60ac      	str	r4, [r5, #8]
 80103b6:	b006      	add	sp, #24
 80103b8:	bd70      	pop	{r4, r5, r6, pc}
 80103ba:	bf00      	nop

080103bc <micro_ros_string_utilities_append>:
 80103bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c0:	b08a      	sub	sp, #40	@ 0x28
 80103c2:	4604      	mov	r4, r0
 80103c4:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 80103c8:	a801      	add	r0, sp, #4
 80103ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80103ce:	a805      	add	r0, sp, #20
 80103d0:	f7fe f99c 	bl	800e70c <rcutils_get_default_allocator>
 80103d4:	4640      	mov	r0, r8
 80103d6:	f7ef ff13 	bl	8000200 <strlen>
 80103da:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80103de:	9f03      	ldr	r7, [sp, #12]
 80103e0:	9d01      	ldr	r5, [sp, #4]
 80103e2:	eb00 0a09 	add.w	sl, r0, r9
 80103e6:	45ba      	cmp	sl, r7
 80103e8:	4606      	mov	r6, r0
 80103ea:	d307      	bcc.n	80103fc <micro_ros_string_utilities_append+0x40>
 80103ec:	f10a 0701 	add.w	r7, sl, #1
 80103f0:	4628      	mov	r0, r5
 80103f2:	9b07      	ldr	r3, [sp, #28]
 80103f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103f6:	4639      	mov	r1, r7
 80103f8:	4798      	blx	r3
 80103fa:	4605      	mov	r5, r0
 80103fc:	1c72      	adds	r2, r6, #1
 80103fe:	4641      	mov	r1, r8
 8010400:	eb05 0009 	add.w	r0, r5, r9
 8010404:	f011 fb15 	bl	8021a32 <memcpy>
 8010408:	4620      	mov	r0, r4
 801040a:	e9c4 5a00 	strd	r5, sl, [r4]
 801040e:	60a7      	str	r7, [r4, #8]
 8010410:	b00a      	add	sp, #40	@ 0x28
 8010412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010416:	bf00      	nop

08010418 <micro_ros_string_utilities_remove_tail_chars>:
 8010418:	b500      	push	{lr}
 801041a:	b085      	sub	sp, #20
 801041c:	f10d 0e04 	add.w	lr, sp, #4
 8010420:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 8010424:	4684      	mov	ip, r0
 8010426:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801042a:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 801042e:	460b      	mov	r3, r1
 8010430:	9906      	ldr	r1, [sp, #24]
 8010432:	1a5b      	subs	r3, r3, r1
 8010434:	9901      	ldr	r1, [sp, #4]
 8010436:	f8cc 3004 	str.w	r3, [ip, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	4660      	mov	r0, ip
 801043e:	54ca      	strb	r2, [r1, r3]
 8010440:	b005      	add	sp, #20
 8010442:	f85d fb04 	ldr.w	pc, [sp], #4
 8010446:	bf00      	nop

08010448 <micro_ros_string_utilities_destroy>:
 8010448:	b510      	push	{r4, lr}
 801044a:	4604      	mov	r4, r0
 801044c:	b086      	sub	sp, #24
 801044e:	a801      	add	r0, sp, #4
 8010450:	f7fe f95c 	bl	800e70c <rcutils_get_default_allocator>
 8010454:	9b02      	ldr	r3, [sp, #8]
 8010456:	9905      	ldr	r1, [sp, #20]
 8010458:	6820      	ldr	r0, [r4, #0]
 801045a:	4798      	blx	r3
 801045c:	2300      	movs	r3, #0
 801045e:	e9c4 3300 	strd	r3, r3, [r4]
 8010462:	60a3      	str	r3, [r4, #8]
 8010464:	b006      	add	sp, #24
 8010466:	bd10      	pop	{r4, pc}

08010468 <ucdr_serialize_endian_array_char>:
 8010468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	4619      	mov	r1, r3
 801046e:	461f      	mov	r7, r3
 8010470:	4605      	mov	r5, r0
 8010472:	4690      	mov	r8, r2
 8010474:	f002 fcc6 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010478:	b9e0      	cbnz	r0, 80104b4 <ucdr_serialize_endian_array_char+0x4c>
 801047a:	463e      	mov	r6, r7
 801047c:	e009      	b.n	8010492 <ucdr_serialize_endian_array_char+0x2a>
 801047e:	68a8      	ldr	r0, [r5, #8]
 8010480:	f011 fad7 	bl	8021a32 <memcpy>
 8010484:	68ab      	ldr	r3, [r5, #8]
 8010486:	6928      	ldr	r0, [r5, #16]
 8010488:	4423      	add	r3, r4
 801048a:	4420      	add	r0, r4
 801048c:	1b36      	subs	r6, r6, r4
 801048e:	60ab      	str	r3, [r5, #8]
 8010490:	6128      	str	r0, [r5, #16]
 8010492:	4631      	mov	r1, r6
 8010494:	2201      	movs	r2, #1
 8010496:	4628      	mov	r0, r5
 8010498:	f002 fd3c 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 801049c:	1bb9      	subs	r1, r7, r6
 801049e:	4441      	add	r1, r8
 80104a0:	4604      	mov	r4, r0
 80104a2:	4602      	mov	r2, r0
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d1ea      	bne.n	801047e <ucdr_serialize_endian_array_char+0x16>
 80104a8:	2301      	movs	r3, #1
 80104aa:	7da8      	ldrb	r0, [r5, #22]
 80104ac:	756b      	strb	r3, [r5, #21]
 80104ae:	4058      	eors	r0, r3
 80104b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b4:	463a      	mov	r2, r7
 80104b6:	68a8      	ldr	r0, [r5, #8]
 80104b8:	4641      	mov	r1, r8
 80104ba:	f011 faba 	bl	8021a32 <memcpy>
 80104be:	68aa      	ldr	r2, [r5, #8]
 80104c0:	692b      	ldr	r3, [r5, #16]
 80104c2:	443a      	add	r2, r7
 80104c4:	443b      	add	r3, r7
 80104c6:	60aa      	str	r2, [r5, #8]
 80104c8:	612b      	str	r3, [r5, #16]
 80104ca:	e7ed      	b.n	80104a8 <ucdr_serialize_endian_array_char+0x40>

080104cc <ucdr_deserialize_endian_array_char>:
 80104cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d0:	4619      	mov	r1, r3
 80104d2:	461f      	mov	r7, r3
 80104d4:	4605      	mov	r5, r0
 80104d6:	4690      	mov	r8, r2
 80104d8:	f002 fc94 	bl	8012e04 <ucdr_check_buffer_available_for>
 80104dc:	b9e0      	cbnz	r0, 8010518 <ucdr_deserialize_endian_array_char+0x4c>
 80104de:	463e      	mov	r6, r7
 80104e0:	e009      	b.n	80104f6 <ucdr_deserialize_endian_array_char+0x2a>
 80104e2:	68a9      	ldr	r1, [r5, #8]
 80104e4:	f011 faa5 	bl	8021a32 <memcpy>
 80104e8:	68ab      	ldr	r3, [r5, #8]
 80104ea:	6928      	ldr	r0, [r5, #16]
 80104ec:	4423      	add	r3, r4
 80104ee:	4420      	add	r0, r4
 80104f0:	1b36      	subs	r6, r6, r4
 80104f2:	60ab      	str	r3, [r5, #8]
 80104f4:	6128      	str	r0, [r5, #16]
 80104f6:	2201      	movs	r2, #1
 80104f8:	4631      	mov	r1, r6
 80104fa:	4628      	mov	r0, r5
 80104fc:	f002 fd0a 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010500:	4604      	mov	r4, r0
 8010502:	1bb8      	subs	r0, r7, r6
 8010504:	4440      	add	r0, r8
 8010506:	4622      	mov	r2, r4
 8010508:	2c00      	cmp	r4, #0
 801050a:	d1ea      	bne.n	80104e2 <ucdr_deserialize_endian_array_char+0x16>
 801050c:	2301      	movs	r3, #1
 801050e:	7da8      	ldrb	r0, [r5, #22]
 8010510:	756b      	strb	r3, [r5, #21]
 8010512:	4058      	eors	r0, r3
 8010514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010518:	463a      	mov	r2, r7
 801051a:	68a9      	ldr	r1, [r5, #8]
 801051c:	4640      	mov	r0, r8
 801051e:	f011 fa88 	bl	8021a32 <memcpy>
 8010522:	68aa      	ldr	r2, [r5, #8]
 8010524:	692b      	ldr	r3, [r5, #16]
 8010526:	443a      	add	r2, r7
 8010528:	443b      	add	r3, r7
 801052a:	60aa      	str	r2, [r5, #8]
 801052c:	612b      	str	r3, [r5, #16]
 801052e:	e7ed      	b.n	801050c <ucdr_deserialize_endian_array_char+0x40>

08010530 <ucdr_serialize_endian_array_bool>:
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010534:	4619      	mov	r1, r3
 8010536:	461f      	mov	r7, r3
 8010538:	4605      	mov	r5, r0
 801053a:	4690      	mov	r8, r2
 801053c:	f002 fc62 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010540:	b9e0      	cbnz	r0, 801057c <ucdr_serialize_endian_array_bool+0x4c>
 8010542:	463e      	mov	r6, r7
 8010544:	e009      	b.n	801055a <ucdr_serialize_endian_array_bool+0x2a>
 8010546:	68a8      	ldr	r0, [r5, #8]
 8010548:	f011 fa73 	bl	8021a32 <memcpy>
 801054c:	68ab      	ldr	r3, [r5, #8]
 801054e:	6928      	ldr	r0, [r5, #16]
 8010550:	4423      	add	r3, r4
 8010552:	4420      	add	r0, r4
 8010554:	1b36      	subs	r6, r6, r4
 8010556:	60ab      	str	r3, [r5, #8]
 8010558:	6128      	str	r0, [r5, #16]
 801055a:	4631      	mov	r1, r6
 801055c:	2201      	movs	r2, #1
 801055e:	4628      	mov	r0, r5
 8010560:	f002 fcd8 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010564:	1bb9      	subs	r1, r7, r6
 8010566:	4441      	add	r1, r8
 8010568:	4604      	mov	r4, r0
 801056a:	4602      	mov	r2, r0
 801056c:	2800      	cmp	r0, #0
 801056e:	d1ea      	bne.n	8010546 <ucdr_serialize_endian_array_bool+0x16>
 8010570:	2301      	movs	r3, #1
 8010572:	7da8      	ldrb	r0, [r5, #22]
 8010574:	756b      	strb	r3, [r5, #21]
 8010576:	4058      	eors	r0, r3
 8010578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801057c:	463a      	mov	r2, r7
 801057e:	68a8      	ldr	r0, [r5, #8]
 8010580:	4641      	mov	r1, r8
 8010582:	f011 fa56 	bl	8021a32 <memcpy>
 8010586:	68aa      	ldr	r2, [r5, #8]
 8010588:	692b      	ldr	r3, [r5, #16]
 801058a:	443a      	add	r2, r7
 801058c:	443b      	add	r3, r7
 801058e:	60aa      	str	r2, [r5, #8]
 8010590:	612b      	str	r3, [r5, #16]
 8010592:	e7ed      	b.n	8010570 <ucdr_serialize_endian_array_bool+0x40>

08010594 <ucdr_deserialize_endian_array_bool>:
 8010594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010598:	4619      	mov	r1, r3
 801059a:	461f      	mov	r7, r3
 801059c:	4605      	mov	r5, r0
 801059e:	4690      	mov	r8, r2
 80105a0:	f002 fc30 	bl	8012e04 <ucdr_check_buffer_available_for>
 80105a4:	b9e0      	cbnz	r0, 80105e0 <ucdr_deserialize_endian_array_bool+0x4c>
 80105a6:	463e      	mov	r6, r7
 80105a8:	e009      	b.n	80105be <ucdr_deserialize_endian_array_bool+0x2a>
 80105aa:	68a9      	ldr	r1, [r5, #8]
 80105ac:	f011 fa41 	bl	8021a32 <memcpy>
 80105b0:	68ab      	ldr	r3, [r5, #8]
 80105b2:	6928      	ldr	r0, [r5, #16]
 80105b4:	4423      	add	r3, r4
 80105b6:	4420      	add	r0, r4
 80105b8:	1b36      	subs	r6, r6, r4
 80105ba:	60ab      	str	r3, [r5, #8]
 80105bc:	6128      	str	r0, [r5, #16]
 80105be:	2201      	movs	r2, #1
 80105c0:	4631      	mov	r1, r6
 80105c2:	4628      	mov	r0, r5
 80105c4:	f002 fca6 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 80105c8:	4604      	mov	r4, r0
 80105ca:	1bb8      	subs	r0, r7, r6
 80105cc:	4440      	add	r0, r8
 80105ce:	4622      	mov	r2, r4
 80105d0:	2c00      	cmp	r4, #0
 80105d2:	d1ea      	bne.n	80105aa <ucdr_deserialize_endian_array_bool+0x16>
 80105d4:	2301      	movs	r3, #1
 80105d6:	7da8      	ldrb	r0, [r5, #22]
 80105d8:	756b      	strb	r3, [r5, #21]
 80105da:	4058      	eors	r0, r3
 80105dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e0:	463a      	mov	r2, r7
 80105e2:	68a9      	ldr	r1, [r5, #8]
 80105e4:	4640      	mov	r0, r8
 80105e6:	f011 fa24 	bl	8021a32 <memcpy>
 80105ea:	68aa      	ldr	r2, [r5, #8]
 80105ec:	692b      	ldr	r3, [r5, #16]
 80105ee:	443a      	add	r2, r7
 80105f0:	443b      	add	r3, r7
 80105f2:	60aa      	str	r2, [r5, #8]
 80105f4:	612b      	str	r3, [r5, #16]
 80105f6:	e7ed      	b.n	80105d4 <ucdr_deserialize_endian_array_bool+0x40>

080105f8 <ucdr_serialize_array_uint8_t>:
 80105f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105fc:	4688      	mov	r8, r1
 80105fe:	4611      	mov	r1, r2
 8010600:	4617      	mov	r7, r2
 8010602:	4605      	mov	r5, r0
 8010604:	f002 fbfe 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010608:	b9e0      	cbnz	r0, 8010644 <ucdr_serialize_array_uint8_t+0x4c>
 801060a:	463e      	mov	r6, r7
 801060c:	e009      	b.n	8010622 <ucdr_serialize_array_uint8_t+0x2a>
 801060e:	68a8      	ldr	r0, [r5, #8]
 8010610:	f011 fa0f 	bl	8021a32 <memcpy>
 8010614:	68aa      	ldr	r2, [r5, #8]
 8010616:	692b      	ldr	r3, [r5, #16]
 8010618:	4422      	add	r2, r4
 801061a:	4423      	add	r3, r4
 801061c:	1b36      	subs	r6, r6, r4
 801061e:	60aa      	str	r2, [r5, #8]
 8010620:	612b      	str	r3, [r5, #16]
 8010622:	4631      	mov	r1, r6
 8010624:	2201      	movs	r2, #1
 8010626:	4628      	mov	r0, r5
 8010628:	f002 fc74 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 801062c:	1bb9      	subs	r1, r7, r6
 801062e:	4441      	add	r1, r8
 8010630:	4604      	mov	r4, r0
 8010632:	4602      	mov	r2, r0
 8010634:	2800      	cmp	r0, #0
 8010636:	d1ea      	bne.n	801060e <ucdr_serialize_array_uint8_t+0x16>
 8010638:	2301      	movs	r3, #1
 801063a:	7da8      	ldrb	r0, [r5, #22]
 801063c:	756b      	strb	r3, [r5, #21]
 801063e:	4058      	eors	r0, r3
 8010640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010644:	463a      	mov	r2, r7
 8010646:	68a8      	ldr	r0, [r5, #8]
 8010648:	4641      	mov	r1, r8
 801064a:	f011 f9f2 	bl	8021a32 <memcpy>
 801064e:	68aa      	ldr	r2, [r5, #8]
 8010650:	692b      	ldr	r3, [r5, #16]
 8010652:	443a      	add	r2, r7
 8010654:	443b      	add	r3, r7
 8010656:	60aa      	str	r2, [r5, #8]
 8010658:	612b      	str	r3, [r5, #16]
 801065a:	e7ed      	b.n	8010638 <ucdr_serialize_array_uint8_t+0x40>

0801065c <ucdr_serialize_endian_array_uint8_t>:
 801065c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010660:	4619      	mov	r1, r3
 8010662:	461f      	mov	r7, r3
 8010664:	4605      	mov	r5, r0
 8010666:	4690      	mov	r8, r2
 8010668:	f002 fbcc 	bl	8012e04 <ucdr_check_buffer_available_for>
 801066c:	b9e0      	cbnz	r0, 80106a8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801066e:	463e      	mov	r6, r7
 8010670:	e009      	b.n	8010686 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010672:	68a8      	ldr	r0, [r5, #8]
 8010674:	f011 f9dd 	bl	8021a32 <memcpy>
 8010678:	68ab      	ldr	r3, [r5, #8]
 801067a:	6928      	ldr	r0, [r5, #16]
 801067c:	4423      	add	r3, r4
 801067e:	4420      	add	r0, r4
 8010680:	1b36      	subs	r6, r6, r4
 8010682:	60ab      	str	r3, [r5, #8]
 8010684:	6128      	str	r0, [r5, #16]
 8010686:	4631      	mov	r1, r6
 8010688:	2201      	movs	r2, #1
 801068a:	4628      	mov	r0, r5
 801068c:	f002 fc42 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010690:	1bb9      	subs	r1, r7, r6
 8010692:	4441      	add	r1, r8
 8010694:	4604      	mov	r4, r0
 8010696:	4602      	mov	r2, r0
 8010698:	2800      	cmp	r0, #0
 801069a:	d1ea      	bne.n	8010672 <ucdr_serialize_endian_array_uint8_t+0x16>
 801069c:	2301      	movs	r3, #1
 801069e:	7da8      	ldrb	r0, [r5, #22]
 80106a0:	756b      	strb	r3, [r5, #21]
 80106a2:	4058      	eors	r0, r3
 80106a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a8:	463a      	mov	r2, r7
 80106aa:	68a8      	ldr	r0, [r5, #8]
 80106ac:	4641      	mov	r1, r8
 80106ae:	f011 f9c0 	bl	8021a32 <memcpy>
 80106b2:	68aa      	ldr	r2, [r5, #8]
 80106b4:	692b      	ldr	r3, [r5, #16]
 80106b6:	443a      	add	r2, r7
 80106b8:	443b      	add	r3, r7
 80106ba:	60aa      	str	r2, [r5, #8]
 80106bc:	612b      	str	r3, [r5, #16]
 80106be:	e7ed      	b.n	801069c <ucdr_serialize_endian_array_uint8_t+0x40>

080106c0 <ucdr_deserialize_array_uint8_t>:
 80106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c4:	4688      	mov	r8, r1
 80106c6:	4611      	mov	r1, r2
 80106c8:	4617      	mov	r7, r2
 80106ca:	4605      	mov	r5, r0
 80106cc:	f002 fb9a 	bl	8012e04 <ucdr_check_buffer_available_for>
 80106d0:	b9e0      	cbnz	r0, 801070c <ucdr_deserialize_array_uint8_t+0x4c>
 80106d2:	463e      	mov	r6, r7
 80106d4:	e009      	b.n	80106ea <ucdr_deserialize_array_uint8_t+0x2a>
 80106d6:	68a9      	ldr	r1, [r5, #8]
 80106d8:	f011 f9ab 	bl	8021a32 <memcpy>
 80106dc:	68aa      	ldr	r2, [r5, #8]
 80106de:	692b      	ldr	r3, [r5, #16]
 80106e0:	4422      	add	r2, r4
 80106e2:	4423      	add	r3, r4
 80106e4:	1b36      	subs	r6, r6, r4
 80106e6:	60aa      	str	r2, [r5, #8]
 80106e8:	612b      	str	r3, [r5, #16]
 80106ea:	2201      	movs	r2, #1
 80106ec:	4631      	mov	r1, r6
 80106ee:	4628      	mov	r0, r5
 80106f0:	f002 fc10 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 80106f4:	4604      	mov	r4, r0
 80106f6:	1bb8      	subs	r0, r7, r6
 80106f8:	4440      	add	r0, r8
 80106fa:	4622      	mov	r2, r4
 80106fc:	2c00      	cmp	r4, #0
 80106fe:	d1ea      	bne.n	80106d6 <ucdr_deserialize_array_uint8_t+0x16>
 8010700:	2301      	movs	r3, #1
 8010702:	7da8      	ldrb	r0, [r5, #22]
 8010704:	756b      	strb	r3, [r5, #21]
 8010706:	4058      	eors	r0, r3
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	463a      	mov	r2, r7
 801070e:	68a9      	ldr	r1, [r5, #8]
 8010710:	4640      	mov	r0, r8
 8010712:	f011 f98e 	bl	8021a32 <memcpy>
 8010716:	68aa      	ldr	r2, [r5, #8]
 8010718:	692b      	ldr	r3, [r5, #16]
 801071a:	443a      	add	r2, r7
 801071c:	443b      	add	r3, r7
 801071e:	60aa      	str	r2, [r5, #8]
 8010720:	612b      	str	r3, [r5, #16]
 8010722:	e7ed      	b.n	8010700 <ucdr_deserialize_array_uint8_t+0x40>

08010724 <ucdr_deserialize_endian_array_uint8_t>:
 8010724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010728:	4619      	mov	r1, r3
 801072a:	461f      	mov	r7, r3
 801072c:	4605      	mov	r5, r0
 801072e:	4690      	mov	r8, r2
 8010730:	f002 fb68 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010734:	b9e0      	cbnz	r0, 8010770 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010736:	463e      	mov	r6, r7
 8010738:	e009      	b.n	801074e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801073a:	68a9      	ldr	r1, [r5, #8]
 801073c:	f011 f979 	bl	8021a32 <memcpy>
 8010740:	68ab      	ldr	r3, [r5, #8]
 8010742:	6928      	ldr	r0, [r5, #16]
 8010744:	4423      	add	r3, r4
 8010746:	4420      	add	r0, r4
 8010748:	1b36      	subs	r6, r6, r4
 801074a:	60ab      	str	r3, [r5, #8]
 801074c:	6128      	str	r0, [r5, #16]
 801074e:	2201      	movs	r2, #1
 8010750:	4631      	mov	r1, r6
 8010752:	4628      	mov	r0, r5
 8010754:	f002 fbde 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010758:	4604      	mov	r4, r0
 801075a:	1bb8      	subs	r0, r7, r6
 801075c:	4440      	add	r0, r8
 801075e:	4622      	mov	r2, r4
 8010760:	2c00      	cmp	r4, #0
 8010762:	d1ea      	bne.n	801073a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8010764:	2301      	movs	r3, #1
 8010766:	7da8      	ldrb	r0, [r5, #22]
 8010768:	756b      	strb	r3, [r5, #21]
 801076a:	4058      	eors	r0, r3
 801076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010770:	463a      	mov	r2, r7
 8010772:	68a9      	ldr	r1, [r5, #8]
 8010774:	4640      	mov	r0, r8
 8010776:	f011 f95c 	bl	8021a32 <memcpy>
 801077a:	68aa      	ldr	r2, [r5, #8]
 801077c:	692b      	ldr	r3, [r5, #16]
 801077e:	443a      	add	r2, r7
 8010780:	443b      	add	r3, r7
 8010782:	60aa      	str	r2, [r5, #8]
 8010784:	612b      	str	r3, [r5, #16]
 8010786:	e7ed      	b.n	8010764 <ucdr_deserialize_endian_array_uint8_t+0x40>

08010788 <ucdr_serialize_array_uint16_t>:
 8010788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078c:	460e      	mov	r6, r1
 801078e:	2102      	movs	r1, #2
 8010790:	4604      	mov	r4, r0
 8010792:	4617      	mov	r7, r2
 8010794:	f002 fb96 	bl	8012ec4 <ucdr_buffer_alignment>
 8010798:	4601      	mov	r1, r0
 801079a:	4620      	mov	r0, r4
 801079c:	7d65      	ldrb	r5, [r4, #21]
 801079e:	f002 fbd5 	bl	8012f4c <ucdr_advance_buffer>
 80107a2:	7d21      	ldrb	r1, [r4, #20]
 80107a4:	7565      	strb	r5, [r4, #21]
 80107a6:	2901      	cmp	r1, #1
 80107a8:	d011      	beq.n	80107ce <ucdr_serialize_array_uint16_t+0x46>
 80107aa:	b15f      	cbz	r7, 80107c4 <ucdr_serialize_array_uint16_t+0x3c>
 80107ac:	3e02      	subs	r6, #2
 80107ae:	2500      	movs	r5, #0
 80107b0:	e000      	b.n	80107b4 <ucdr_serialize_array_uint16_t+0x2c>
 80107b2:	7d21      	ldrb	r1, [r4, #20]
 80107b4:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 80107b8:	4620      	mov	r0, r4
 80107ba:	3501      	adds	r5, #1
 80107bc:	f000 fc14 	bl	8010fe8 <ucdr_serialize_endian_uint16_t>
 80107c0:	42af      	cmp	r7, r5
 80107c2:	d1f6      	bne.n	80107b2 <ucdr_serialize_array_uint16_t+0x2a>
 80107c4:	7da0      	ldrb	r0, [r4, #22]
 80107c6:	f080 0001 	eor.w	r0, r0, #1
 80107ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ce:	007f      	lsls	r7, r7, #1
 80107d0:	4639      	mov	r1, r7
 80107d2:	4620      	mov	r0, r4
 80107d4:	f002 fb16 	bl	8012e04 <ucdr_check_buffer_available_for>
 80107d8:	b9f8      	cbnz	r0, 801081a <ucdr_serialize_array_uint16_t+0x92>
 80107da:	46b8      	mov	r8, r7
 80107dc:	e00a      	b.n	80107f4 <ucdr_serialize_array_uint16_t+0x6c>
 80107de:	68a0      	ldr	r0, [r4, #8]
 80107e0:	f011 f927 	bl	8021a32 <memcpy>
 80107e4:	68a2      	ldr	r2, [r4, #8]
 80107e6:	6923      	ldr	r3, [r4, #16]
 80107e8:	442a      	add	r2, r5
 80107ea:	442b      	add	r3, r5
 80107ec:	eba8 0805 	sub.w	r8, r8, r5
 80107f0:	60a2      	str	r2, [r4, #8]
 80107f2:	6123      	str	r3, [r4, #16]
 80107f4:	4641      	mov	r1, r8
 80107f6:	2202      	movs	r2, #2
 80107f8:	4620      	mov	r0, r4
 80107fa:	f002 fb8b 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 80107fe:	eba7 0108 	sub.w	r1, r7, r8
 8010802:	4431      	add	r1, r6
 8010804:	4605      	mov	r5, r0
 8010806:	4602      	mov	r2, r0
 8010808:	2800      	cmp	r0, #0
 801080a:	d1e8      	bne.n	80107de <ucdr_serialize_array_uint16_t+0x56>
 801080c:	7da0      	ldrb	r0, [r4, #22]
 801080e:	2302      	movs	r3, #2
 8010810:	7563      	strb	r3, [r4, #21]
 8010812:	f080 0001 	eor.w	r0, r0, #1
 8010816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081a:	463a      	mov	r2, r7
 801081c:	68a0      	ldr	r0, [r4, #8]
 801081e:	4631      	mov	r1, r6
 8010820:	f011 f907 	bl	8021a32 <memcpy>
 8010824:	68a2      	ldr	r2, [r4, #8]
 8010826:	6923      	ldr	r3, [r4, #16]
 8010828:	443a      	add	r2, r7
 801082a:	441f      	add	r7, r3
 801082c:	60a2      	str	r2, [r4, #8]
 801082e:	6127      	str	r7, [r4, #16]
 8010830:	e7ec      	b.n	801080c <ucdr_serialize_array_uint16_t+0x84>
 8010832:	bf00      	nop

08010834 <ucdr_deserialize_array_uint16_t>:
 8010834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010838:	460e      	mov	r6, r1
 801083a:	2102      	movs	r1, #2
 801083c:	4604      	mov	r4, r0
 801083e:	4617      	mov	r7, r2
 8010840:	f002 fb40 	bl	8012ec4 <ucdr_buffer_alignment>
 8010844:	4601      	mov	r1, r0
 8010846:	4620      	mov	r0, r4
 8010848:	7d65      	ldrb	r5, [r4, #21]
 801084a:	f002 fb7f 	bl	8012f4c <ucdr_advance_buffer>
 801084e:	7d21      	ldrb	r1, [r4, #20]
 8010850:	7565      	strb	r5, [r4, #21]
 8010852:	2901      	cmp	r1, #1
 8010854:	d011      	beq.n	801087a <ucdr_deserialize_array_uint16_t+0x46>
 8010856:	b15f      	cbz	r7, 8010870 <ucdr_deserialize_array_uint16_t+0x3c>
 8010858:	2500      	movs	r5, #0
 801085a:	e000      	b.n	801085e <ucdr_deserialize_array_uint16_t+0x2a>
 801085c:	7d21      	ldrb	r1, [r4, #20]
 801085e:	4632      	mov	r2, r6
 8010860:	4620      	mov	r0, r4
 8010862:	3501      	adds	r5, #1
 8010864:	f000 fcb4 	bl	80111d0 <ucdr_deserialize_endian_uint16_t>
 8010868:	42af      	cmp	r7, r5
 801086a:	f106 0602 	add.w	r6, r6, #2
 801086e:	d1f5      	bne.n	801085c <ucdr_deserialize_array_uint16_t+0x28>
 8010870:	7da0      	ldrb	r0, [r4, #22]
 8010872:	f080 0001 	eor.w	r0, r0, #1
 8010876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801087a:	007f      	lsls	r7, r7, #1
 801087c:	4639      	mov	r1, r7
 801087e:	4620      	mov	r0, r4
 8010880:	f002 fac0 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010884:	b9f8      	cbnz	r0, 80108c6 <ucdr_deserialize_array_uint16_t+0x92>
 8010886:	46b8      	mov	r8, r7
 8010888:	e00a      	b.n	80108a0 <ucdr_deserialize_array_uint16_t+0x6c>
 801088a:	68a1      	ldr	r1, [r4, #8]
 801088c:	f011 f8d1 	bl	8021a32 <memcpy>
 8010890:	68a2      	ldr	r2, [r4, #8]
 8010892:	6923      	ldr	r3, [r4, #16]
 8010894:	442a      	add	r2, r5
 8010896:	442b      	add	r3, r5
 8010898:	eba8 0805 	sub.w	r8, r8, r5
 801089c:	60a2      	str	r2, [r4, #8]
 801089e:	6123      	str	r3, [r4, #16]
 80108a0:	2202      	movs	r2, #2
 80108a2:	4641      	mov	r1, r8
 80108a4:	4620      	mov	r0, r4
 80108a6:	f002 fb35 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 80108aa:	4605      	mov	r5, r0
 80108ac:	eba7 0008 	sub.w	r0, r7, r8
 80108b0:	4430      	add	r0, r6
 80108b2:	462a      	mov	r2, r5
 80108b4:	2d00      	cmp	r5, #0
 80108b6:	d1e8      	bne.n	801088a <ucdr_deserialize_array_uint16_t+0x56>
 80108b8:	7da0      	ldrb	r0, [r4, #22]
 80108ba:	2302      	movs	r3, #2
 80108bc:	7563      	strb	r3, [r4, #21]
 80108be:	f080 0001 	eor.w	r0, r0, #1
 80108c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c6:	463a      	mov	r2, r7
 80108c8:	68a1      	ldr	r1, [r4, #8]
 80108ca:	4630      	mov	r0, r6
 80108cc:	f011 f8b1 	bl	8021a32 <memcpy>
 80108d0:	68a2      	ldr	r2, [r4, #8]
 80108d2:	6923      	ldr	r3, [r4, #16]
 80108d4:	443a      	add	r2, r7
 80108d6:	441f      	add	r7, r3
 80108d8:	60a2      	str	r2, [r4, #8]
 80108da:	6127      	str	r7, [r4, #16]
 80108dc:	e7ec      	b.n	80108b8 <ucdr_deserialize_array_uint16_t+0x84>
 80108de:	bf00      	nop

080108e0 <ucdr_serialize_endian_array_int64_t>:
 80108e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e4:	4688      	mov	r8, r1
 80108e6:	2108      	movs	r1, #8
 80108e8:	4604      	mov	r4, r0
 80108ea:	4616      	mov	r6, r2
 80108ec:	461f      	mov	r7, r3
 80108ee:	f002 fae9 	bl	8012ec4 <ucdr_buffer_alignment>
 80108f2:	4601      	mov	r1, r0
 80108f4:	4620      	mov	r0, r4
 80108f6:	7d65      	ldrb	r5, [r4, #21]
 80108f8:	f002 fb28 	bl	8012f4c <ucdr_advance_buffer>
 80108fc:	f1b8 0f01 	cmp.w	r8, #1
 8010900:	7565      	strb	r5, [r4, #21]
 8010902:	d010      	beq.n	8010926 <ucdr_serialize_endian_array_int64_t+0x46>
 8010904:	b157      	cbz	r7, 801091c <ucdr_serialize_endian_array_int64_t+0x3c>
 8010906:	3e08      	subs	r6, #8
 8010908:	2500      	movs	r5, #0
 801090a:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 801090e:	4641      	mov	r1, r8
 8010910:	4620      	mov	r0, r4
 8010912:	3501      	adds	r5, #1
 8010914:	f001 fbaa 	bl	801206c <ucdr_serialize_endian_int64_t>
 8010918:	42af      	cmp	r7, r5
 801091a:	d1f6      	bne.n	801090a <ucdr_serialize_endian_array_int64_t+0x2a>
 801091c:	7da0      	ldrb	r0, [r4, #22]
 801091e:	f080 0001 	eor.w	r0, r0, #1
 8010922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010926:	00ff      	lsls	r7, r7, #3
 8010928:	4639      	mov	r1, r7
 801092a:	4620      	mov	r0, r4
 801092c:	f002 fa6a 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010930:	b9f8      	cbnz	r0, 8010972 <ucdr_serialize_endian_array_int64_t+0x92>
 8010932:	46b8      	mov	r8, r7
 8010934:	e00a      	b.n	801094c <ucdr_serialize_endian_array_int64_t+0x6c>
 8010936:	68a0      	ldr	r0, [r4, #8]
 8010938:	f011 f87b 	bl	8021a32 <memcpy>
 801093c:	68a2      	ldr	r2, [r4, #8]
 801093e:	6923      	ldr	r3, [r4, #16]
 8010940:	442a      	add	r2, r5
 8010942:	442b      	add	r3, r5
 8010944:	eba8 0805 	sub.w	r8, r8, r5
 8010948:	60a2      	str	r2, [r4, #8]
 801094a:	6123      	str	r3, [r4, #16]
 801094c:	4641      	mov	r1, r8
 801094e:	2208      	movs	r2, #8
 8010950:	4620      	mov	r0, r4
 8010952:	f002 fadf 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010956:	eba7 0108 	sub.w	r1, r7, r8
 801095a:	4431      	add	r1, r6
 801095c:	4605      	mov	r5, r0
 801095e:	4602      	mov	r2, r0
 8010960:	2800      	cmp	r0, #0
 8010962:	d1e8      	bne.n	8010936 <ucdr_serialize_endian_array_int64_t+0x56>
 8010964:	7da0      	ldrb	r0, [r4, #22]
 8010966:	2308      	movs	r3, #8
 8010968:	7563      	strb	r3, [r4, #21]
 801096a:	f080 0001 	eor.w	r0, r0, #1
 801096e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010972:	463a      	mov	r2, r7
 8010974:	68a0      	ldr	r0, [r4, #8]
 8010976:	4631      	mov	r1, r6
 8010978:	f011 f85b 	bl	8021a32 <memcpy>
 801097c:	68a2      	ldr	r2, [r4, #8]
 801097e:	6923      	ldr	r3, [r4, #16]
 8010980:	443a      	add	r2, r7
 8010982:	441f      	add	r7, r3
 8010984:	60a2      	str	r2, [r4, #8]
 8010986:	6127      	str	r7, [r4, #16]
 8010988:	e7ec      	b.n	8010964 <ucdr_serialize_endian_array_int64_t+0x84>
 801098a:	bf00      	nop

0801098c <ucdr_deserialize_endian_array_int64_t>:
 801098c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010990:	4688      	mov	r8, r1
 8010992:	2108      	movs	r1, #8
 8010994:	4605      	mov	r5, r0
 8010996:	4614      	mov	r4, r2
 8010998:	461f      	mov	r7, r3
 801099a:	f002 fa93 	bl	8012ec4 <ucdr_buffer_alignment>
 801099e:	4601      	mov	r1, r0
 80109a0:	4628      	mov	r0, r5
 80109a2:	7d6e      	ldrb	r6, [r5, #21]
 80109a4:	f002 fad2 	bl	8012f4c <ucdr_advance_buffer>
 80109a8:	f1b8 0f01 	cmp.w	r8, #1
 80109ac:	756e      	strb	r6, [r5, #21]
 80109ae:	d010      	beq.n	80109d2 <ucdr_deserialize_endian_array_int64_t+0x46>
 80109b0:	2600      	movs	r6, #0
 80109b2:	b14f      	cbz	r7, 80109c8 <ucdr_deserialize_endian_array_int64_t+0x3c>
 80109b4:	4622      	mov	r2, r4
 80109b6:	4641      	mov	r1, r8
 80109b8:	4628      	mov	r0, r5
 80109ba:	3601      	adds	r6, #1
 80109bc:	f001 fcee 	bl	801239c <ucdr_deserialize_endian_int64_t>
 80109c0:	42b7      	cmp	r7, r6
 80109c2:	f104 0408 	add.w	r4, r4, #8
 80109c6:	d1f5      	bne.n	80109b4 <ucdr_deserialize_endian_array_int64_t+0x28>
 80109c8:	7da8      	ldrb	r0, [r5, #22]
 80109ca:	f080 0001 	eor.w	r0, r0, #1
 80109ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d2:	00ff      	lsls	r7, r7, #3
 80109d4:	4639      	mov	r1, r7
 80109d6:	4628      	mov	r0, r5
 80109d8:	f002 fa14 	bl	8012e04 <ucdr_check_buffer_available_for>
 80109dc:	b9f8      	cbnz	r0, 8010a1e <ucdr_deserialize_endian_array_int64_t+0x92>
 80109de:	46b8      	mov	r8, r7
 80109e0:	e00a      	b.n	80109f8 <ucdr_deserialize_endian_array_int64_t+0x6c>
 80109e2:	68a9      	ldr	r1, [r5, #8]
 80109e4:	f011 f825 	bl	8021a32 <memcpy>
 80109e8:	68aa      	ldr	r2, [r5, #8]
 80109ea:	692b      	ldr	r3, [r5, #16]
 80109ec:	4432      	add	r2, r6
 80109ee:	4433      	add	r3, r6
 80109f0:	eba8 0806 	sub.w	r8, r8, r6
 80109f4:	60aa      	str	r2, [r5, #8]
 80109f6:	612b      	str	r3, [r5, #16]
 80109f8:	2208      	movs	r2, #8
 80109fa:	4641      	mov	r1, r8
 80109fc:	4628      	mov	r0, r5
 80109fe:	f002 fa89 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010a02:	4606      	mov	r6, r0
 8010a04:	eba7 0008 	sub.w	r0, r7, r8
 8010a08:	4420      	add	r0, r4
 8010a0a:	4632      	mov	r2, r6
 8010a0c:	2e00      	cmp	r6, #0
 8010a0e:	d1e8      	bne.n	80109e2 <ucdr_deserialize_endian_array_int64_t+0x56>
 8010a10:	7da8      	ldrb	r0, [r5, #22]
 8010a12:	2308      	movs	r3, #8
 8010a14:	756b      	strb	r3, [r5, #21]
 8010a16:	f080 0001 	eor.w	r0, r0, #1
 8010a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a1e:	463a      	mov	r2, r7
 8010a20:	68a9      	ldr	r1, [r5, #8]
 8010a22:	4620      	mov	r0, r4
 8010a24:	f011 f805 	bl	8021a32 <memcpy>
 8010a28:	68aa      	ldr	r2, [r5, #8]
 8010a2a:	692b      	ldr	r3, [r5, #16]
 8010a2c:	443a      	add	r2, r7
 8010a2e:	441f      	add	r7, r3
 8010a30:	60aa      	str	r2, [r5, #8]
 8010a32:	612f      	str	r7, [r5, #16]
 8010a34:	e7ec      	b.n	8010a10 <ucdr_deserialize_endian_array_int64_t+0x84>
 8010a36:	bf00      	nop

08010a38 <ucdr_serialize_array_float>:
 8010a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a3c:	460e      	mov	r6, r1
 8010a3e:	2104      	movs	r1, #4
 8010a40:	4604      	mov	r4, r0
 8010a42:	4617      	mov	r7, r2
 8010a44:	f002 fa3e 	bl	8012ec4 <ucdr_buffer_alignment>
 8010a48:	4601      	mov	r1, r0
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	7d65      	ldrb	r5, [r4, #21]
 8010a4e:	f002 fa7d 	bl	8012f4c <ucdr_advance_buffer>
 8010a52:	7d21      	ldrb	r1, [r4, #20]
 8010a54:	7565      	strb	r5, [r4, #21]
 8010a56:	2901      	cmp	r1, #1
 8010a58:	d010      	beq.n	8010a7c <ucdr_serialize_array_float+0x44>
 8010a5a:	b157      	cbz	r7, 8010a72 <ucdr_serialize_array_float+0x3a>
 8010a5c:	2500      	movs	r5, #0
 8010a5e:	e000      	b.n	8010a62 <ucdr_serialize_array_float+0x2a>
 8010a60:	7d21      	ldrb	r1, [r4, #20]
 8010a62:	ecb6 0a01 	vldmia	r6!, {s0}
 8010a66:	4620      	mov	r0, r4
 8010a68:	3501      	adds	r5, #1
 8010a6a:	f001 fd65 	bl	8012538 <ucdr_serialize_endian_float>
 8010a6e:	42af      	cmp	r7, r5
 8010a70:	d1f6      	bne.n	8010a60 <ucdr_serialize_array_float+0x28>
 8010a72:	7da0      	ldrb	r0, [r4, #22]
 8010a74:	f080 0001 	eor.w	r0, r0, #1
 8010a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a7c:	00bf      	lsls	r7, r7, #2
 8010a7e:	4639      	mov	r1, r7
 8010a80:	4620      	mov	r0, r4
 8010a82:	f002 f9bf 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010a86:	b9f8      	cbnz	r0, 8010ac8 <ucdr_serialize_array_float+0x90>
 8010a88:	46b8      	mov	r8, r7
 8010a8a:	e00a      	b.n	8010aa2 <ucdr_serialize_array_float+0x6a>
 8010a8c:	68a0      	ldr	r0, [r4, #8]
 8010a8e:	f010 ffd0 	bl	8021a32 <memcpy>
 8010a92:	68a2      	ldr	r2, [r4, #8]
 8010a94:	6923      	ldr	r3, [r4, #16]
 8010a96:	442a      	add	r2, r5
 8010a98:	442b      	add	r3, r5
 8010a9a:	eba8 0805 	sub.w	r8, r8, r5
 8010a9e:	60a2      	str	r2, [r4, #8]
 8010aa0:	6123      	str	r3, [r4, #16]
 8010aa2:	4641      	mov	r1, r8
 8010aa4:	2204      	movs	r2, #4
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f002 fa34 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010aac:	eba7 0108 	sub.w	r1, r7, r8
 8010ab0:	4431      	add	r1, r6
 8010ab2:	4605      	mov	r5, r0
 8010ab4:	4602      	mov	r2, r0
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d1e8      	bne.n	8010a8c <ucdr_serialize_array_float+0x54>
 8010aba:	7da0      	ldrb	r0, [r4, #22]
 8010abc:	2304      	movs	r3, #4
 8010abe:	7563      	strb	r3, [r4, #21]
 8010ac0:	f080 0001 	eor.w	r0, r0, #1
 8010ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac8:	463a      	mov	r2, r7
 8010aca:	68a0      	ldr	r0, [r4, #8]
 8010acc:	4631      	mov	r1, r6
 8010ace:	f010 ffb0 	bl	8021a32 <memcpy>
 8010ad2:	68a2      	ldr	r2, [r4, #8]
 8010ad4:	6923      	ldr	r3, [r4, #16]
 8010ad6:	443a      	add	r2, r7
 8010ad8:	441f      	add	r7, r3
 8010ada:	60a2      	str	r2, [r4, #8]
 8010adc:	6127      	str	r7, [r4, #16]
 8010ade:	e7ec      	b.n	8010aba <ucdr_serialize_array_float+0x82>

08010ae0 <ucdr_deserialize_array_float>:
 8010ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae4:	460e      	mov	r6, r1
 8010ae6:	2104      	movs	r1, #4
 8010ae8:	4604      	mov	r4, r0
 8010aea:	4617      	mov	r7, r2
 8010aec:	f002 f9ea 	bl	8012ec4 <ucdr_buffer_alignment>
 8010af0:	4601      	mov	r1, r0
 8010af2:	4620      	mov	r0, r4
 8010af4:	7d65      	ldrb	r5, [r4, #21]
 8010af6:	f002 fa29 	bl	8012f4c <ucdr_advance_buffer>
 8010afa:	7d21      	ldrb	r1, [r4, #20]
 8010afc:	7565      	strb	r5, [r4, #21]
 8010afe:	2901      	cmp	r1, #1
 8010b00:	d011      	beq.n	8010b26 <ucdr_deserialize_array_float+0x46>
 8010b02:	b15f      	cbz	r7, 8010b1c <ucdr_deserialize_array_float+0x3c>
 8010b04:	2500      	movs	r5, #0
 8010b06:	e000      	b.n	8010b0a <ucdr_deserialize_array_float+0x2a>
 8010b08:	7d21      	ldrb	r1, [r4, #20]
 8010b0a:	4632      	mov	r2, r6
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	3501      	adds	r5, #1
 8010b10:	f001 fdac 	bl	801266c <ucdr_deserialize_endian_float>
 8010b14:	42af      	cmp	r7, r5
 8010b16:	f106 0604 	add.w	r6, r6, #4
 8010b1a:	d1f5      	bne.n	8010b08 <ucdr_deserialize_array_float+0x28>
 8010b1c:	7da0      	ldrb	r0, [r4, #22]
 8010b1e:	f080 0001 	eor.w	r0, r0, #1
 8010b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b26:	00bf      	lsls	r7, r7, #2
 8010b28:	4639      	mov	r1, r7
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f002 f96a 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010b30:	b9f8      	cbnz	r0, 8010b72 <ucdr_deserialize_array_float+0x92>
 8010b32:	46b8      	mov	r8, r7
 8010b34:	e00a      	b.n	8010b4c <ucdr_deserialize_array_float+0x6c>
 8010b36:	68a1      	ldr	r1, [r4, #8]
 8010b38:	f010 ff7b 	bl	8021a32 <memcpy>
 8010b3c:	68a2      	ldr	r2, [r4, #8]
 8010b3e:	6923      	ldr	r3, [r4, #16]
 8010b40:	442a      	add	r2, r5
 8010b42:	442b      	add	r3, r5
 8010b44:	eba8 0805 	sub.w	r8, r8, r5
 8010b48:	60a2      	str	r2, [r4, #8]
 8010b4a:	6123      	str	r3, [r4, #16]
 8010b4c:	2204      	movs	r2, #4
 8010b4e:	4641      	mov	r1, r8
 8010b50:	4620      	mov	r0, r4
 8010b52:	f002 f9df 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010b56:	4605      	mov	r5, r0
 8010b58:	eba7 0008 	sub.w	r0, r7, r8
 8010b5c:	4430      	add	r0, r6
 8010b5e:	462a      	mov	r2, r5
 8010b60:	2d00      	cmp	r5, #0
 8010b62:	d1e8      	bne.n	8010b36 <ucdr_deserialize_array_float+0x56>
 8010b64:	7da0      	ldrb	r0, [r4, #22]
 8010b66:	2304      	movs	r3, #4
 8010b68:	7563      	strb	r3, [r4, #21]
 8010b6a:	f080 0001 	eor.w	r0, r0, #1
 8010b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b72:	463a      	mov	r2, r7
 8010b74:	68a1      	ldr	r1, [r4, #8]
 8010b76:	4630      	mov	r0, r6
 8010b78:	f010 ff5b 	bl	8021a32 <memcpy>
 8010b7c:	68a2      	ldr	r2, [r4, #8]
 8010b7e:	6923      	ldr	r3, [r4, #16]
 8010b80:	443a      	add	r2, r7
 8010b82:	441f      	add	r7, r3
 8010b84:	60a2      	str	r2, [r4, #8]
 8010b86:	6127      	str	r7, [r4, #16]
 8010b88:	e7ec      	b.n	8010b64 <ucdr_deserialize_array_float+0x84>
 8010b8a:	bf00      	nop

08010b8c <ucdr_serialize_array_double>:
 8010b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b90:	460e      	mov	r6, r1
 8010b92:	2108      	movs	r1, #8
 8010b94:	4604      	mov	r4, r0
 8010b96:	4617      	mov	r7, r2
 8010b98:	f002 f994 	bl	8012ec4 <ucdr_buffer_alignment>
 8010b9c:	4601      	mov	r1, r0
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	7d65      	ldrb	r5, [r4, #21]
 8010ba2:	f002 f9d3 	bl	8012f4c <ucdr_advance_buffer>
 8010ba6:	7d21      	ldrb	r1, [r4, #20]
 8010ba8:	7565      	strb	r5, [r4, #21]
 8010baa:	2901      	cmp	r1, #1
 8010bac:	d010      	beq.n	8010bd0 <ucdr_serialize_array_double+0x44>
 8010bae:	b157      	cbz	r7, 8010bc6 <ucdr_serialize_array_double+0x3a>
 8010bb0:	2500      	movs	r5, #0
 8010bb2:	e000      	b.n	8010bb6 <ucdr_serialize_array_double+0x2a>
 8010bb4:	7d21      	ldrb	r1, [r4, #20]
 8010bb6:	ecb6 0b02 	vldmia	r6!, {d0}
 8010bba:	4620      	mov	r0, r4
 8010bbc:	3501      	adds	r5, #1
 8010bbe:	f001 febb 	bl	8012938 <ucdr_serialize_endian_double>
 8010bc2:	42af      	cmp	r7, r5
 8010bc4:	d1f6      	bne.n	8010bb4 <ucdr_serialize_array_double+0x28>
 8010bc6:	7da0      	ldrb	r0, [r4, #22]
 8010bc8:	f080 0001 	eor.w	r0, r0, #1
 8010bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd0:	00ff      	lsls	r7, r7, #3
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f002 f915 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010bda:	b9f8      	cbnz	r0, 8010c1c <ucdr_serialize_array_double+0x90>
 8010bdc:	46b8      	mov	r8, r7
 8010bde:	e00a      	b.n	8010bf6 <ucdr_serialize_array_double+0x6a>
 8010be0:	68a0      	ldr	r0, [r4, #8]
 8010be2:	f010 ff26 	bl	8021a32 <memcpy>
 8010be6:	68a2      	ldr	r2, [r4, #8]
 8010be8:	6923      	ldr	r3, [r4, #16]
 8010bea:	442a      	add	r2, r5
 8010bec:	442b      	add	r3, r5
 8010bee:	eba8 0805 	sub.w	r8, r8, r5
 8010bf2:	60a2      	str	r2, [r4, #8]
 8010bf4:	6123      	str	r3, [r4, #16]
 8010bf6:	4641      	mov	r1, r8
 8010bf8:	2208      	movs	r2, #8
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f002 f98a 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010c00:	eba7 0108 	sub.w	r1, r7, r8
 8010c04:	4431      	add	r1, r6
 8010c06:	4605      	mov	r5, r0
 8010c08:	4602      	mov	r2, r0
 8010c0a:	2800      	cmp	r0, #0
 8010c0c:	d1e8      	bne.n	8010be0 <ucdr_serialize_array_double+0x54>
 8010c0e:	7da0      	ldrb	r0, [r4, #22]
 8010c10:	2308      	movs	r3, #8
 8010c12:	7563      	strb	r3, [r4, #21]
 8010c14:	f080 0001 	eor.w	r0, r0, #1
 8010c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1c:	463a      	mov	r2, r7
 8010c1e:	68a0      	ldr	r0, [r4, #8]
 8010c20:	4631      	mov	r1, r6
 8010c22:	f010 ff06 	bl	8021a32 <memcpy>
 8010c26:	68a2      	ldr	r2, [r4, #8]
 8010c28:	6923      	ldr	r3, [r4, #16]
 8010c2a:	443a      	add	r2, r7
 8010c2c:	441f      	add	r7, r3
 8010c2e:	60a2      	str	r2, [r4, #8]
 8010c30:	6127      	str	r7, [r4, #16]
 8010c32:	e7ec      	b.n	8010c0e <ucdr_serialize_array_double+0x82>

08010c34 <ucdr_serialize_endian_array_double>:
 8010c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c38:	4688      	mov	r8, r1
 8010c3a:	2108      	movs	r1, #8
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	4616      	mov	r6, r2
 8010c40:	461f      	mov	r7, r3
 8010c42:	f002 f93f 	bl	8012ec4 <ucdr_buffer_alignment>
 8010c46:	4601      	mov	r1, r0
 8010c48:	4620      	mov	r0, r4
 8010c4a:	7d65      	ldrb	r5, [r4, #21]
 8010c4c:	f002 f97e 	bl	8012f4c <ucdr_advance_buffer>
 8010c50:	f1b8 0f01 	cmp.w	r8, #1
 8010c54:	7565      	strb	r5, [r4, #21]
 8010c56:	d00f      	beq.n	8010c78 <ucdr_serialize_endian_array_double+0x44>
 8010c58:	2500      	movs	r5, #0
 8010c5a:	b147      	cbz	r7, 8010c6e <ucdr_serialize_endian_array_double+0x3a>
 8010c5c:	ecb6 0b02 	vldmia	r6!, {d0}
 8010c60:	4641      	mov	r1, r8
 8010c62:	4620      	mov	r0, r4
 8010c64:	3501      	adds	r5, #1
 8010c66:	f001 fe67 	bl	8012938 <ucdr_serialize_endian_double>
 8010c6a:	42af      	cmp	r7, r5
 8010c6c:	d1f6      	bne.n	8010c5c <ucdr_serialize_endian_array_double+0x28>
 8010c6e:	7da0      	ldrb	r0, [r4, #22]
 8010c70:	f080 0001 	eor.w	r0, r0, #1
 8010c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c78:	00ff      	lsls	r7, r7, #3
 8010c7a:	4639      	mov	r1, r7
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f002 f8c1 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010c82:	b9f8      	cbnz	r0, 8010cc4 <ucdr_serialize_endian_array_double+0x90>
 8010c84:	46b8      	mov	r8, r7
 8010c86:	e00a      	b.n	8010c9e <ucdr_serialize_endian_array_double+0x6a>
 8010c88:	68a0      	ldr	r0, [r4, #8]
 8010c8a:	f010 fed2 	bl	8021a32 <memcpy>
 8010c8e:	68a2      	ldr	r2, [r4, #8]
 8010c90:	6923      	ldr	r3, [r4, #16]
 8010c92:	442a      	add	r2, r5
 8010c94:	442b      	add	r3, r5
 8010c96:	eba8 0805 	sub.w	r8, r8, r5
 8010c9a:	60a2      	str	r2, [r4, #8]
 8010c9c:	6123      	str	r3, [r4, #16]
 8010c9e:	4641      	mov	r1, r8
 8010ca0:	2208      	movs	r2, #8
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f002 f936 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010ca8:	eba7 0108 	sub.w	r1, r7, r8
 8010cac:	4431      	add	r1, r6
 8010cae:	4605      	mov	r5, r0
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d1e8      	bne.n	8010c88 <ucdr_serialize_endian_array_double+0x54>
 8010cb6:	7da0      	ldrb	r0, [r4, #22]
 8010cb8:	2308      	movs	r3, #8
 8010cba:	7563      	strb	r3, [r4, #21]
 8010cbc:	f080 0001 	eor.w	r0, r0, #1
 8010cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc4:	463a      	mov	r2, r7
 8010cc6:	68a0      	ldr	r0, [r4, #8]
 8010cc8:	4631      	mov	r1, r6
 8010cca:	f010 feb2 	bl	8021a32 <memcpy>
 8010cce:	68a2      	ldr	r2, [r4, #8]
 8010cd0:	6923      	ldr	r3, [r4, #16]
 8010cd2:	443a      	add	r2, r7
 8010cd4:	441f      	add	r7, r3
 8010cd6:	60a2      	str	r2, [r4, #8]
 8010cd8:	6127      	str	r7, [r4, #16]
 8010cda:	e7ec      	b.n	8010cb6 <ucdr_serialize_endian_array_double+0x82>

08010cdc <ucdr_deserialize_array_double>:
 8010cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce0:	460e      	mov	r6, r1
 8010ce2:	2108      	movs	r1, #8
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	4617      	mov	r7, r2
 8010ce8:	f002 f8ec 	bl	8012ec4 <ucdr_buffer_alignment>
 8010cec:	4601      	mov	r1, r0
 8010cee:	4620      	mov	r0, r4
 8010cf0:	7d65      	ldrb	r5, [r4, #21]
 8010cf2:	f002 f92b 	bl	8012f4c <ucdr_advance_buffer>
 8010cf6:	7d21      	ldrb	r1, [r4, #20]
 8010cf8:	7565      	strb	r5, [r4, #21]
 8010cfa:	2901      	cmp	r1, #1
 8010cfc:	d011      	beq.n	8010d22 <ucdr_deserialize_array_double+0x46>
 8010cfe:	b15f      	cbz	r7, 8010d18 <ucdr_deserialize_array_double+0x3c>
 8010d00:	2500      	movs	r5, #0
 8010d02:	e000      	b.n	8010d06 <ucdr_deserialize_array_double+0x2a>
 8010d04:	7d21      	ldrb	r1, [r4, #20]
 8010d06:	4632      	mov	r2, r6
 8010d08:	4620      	mov	r0, r4
 8010d0a:	3501      	adds	r5, #1
 8010d0c:	f001 ffac 	bl	8012c68 <ucdr_deserialize_endian_double>
 8010d10:	42af      	cmp	r7, r5
 8010d12:	f106 0608 	add.w	r6, r6, #8
 8010d16:	d1f5      	bne.n	8010d04 <ucdr_deserialize_array_double+0x28>
 8010d18:	7da0      	ldrb	r0, [r4, #22]
 8010d1a:	f080 0001 	eor.w	r0, r0, #1
 8010d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d22:	00ff      	lsls	r7, r7, #3
 8010d24:	4639      	mov	r1, r7
 8010d26:	4620      	mov	r0, r4
 8010d28:	f002 f86c 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010d2c:	b9f8      	cbnz	r0, 8010d6e <ucdr_deserialize_array_double+0x92>
 8010d2e:	46b8      	mov	r8, r7
 8010d30:	e00a      	b.n	8010d48 <ucdr_deserialize_array_double+0x6c>
 8010d32:	68a1      	ldr	r1, [r4, #8]
 8010d34:	f010 fe7d 	bl	8021a32 <memcpy>
 8010d38:	68a2      	ldr	r2, [r4, #8]
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	442a      	add	r2, r5
 8010d3e:	442b      	add	r3, r5
 8010d40:	eba8 0805 	sub.w	r8, r8, r5
 8010d44:	60a2      	str	r2, [r4, #8]
 8010d46:	6123      	str	r3, [r4, #16]
 8010d48:	2208      	movs	r2, #8
 8010d4a:	4641      	mov	r1, r8
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f002 f8e1 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010d52:	4605      	mov	r5, r0
 8010d54:	eba7 0008 	sub.w	r0, r7, r8
 8010d58:	4430      	add	r0, r6
 8010d5a:	462a      	mov	r2, r5
 8010d5c:	2d00      	cmp	r5, #0
 8010d5e:	d1e8      	bne.n	8010d32 <ucdr_deserialize_array_double+0x56>
 8010d60:	7da0      	ldrb	r0, [r4, #22]
 8010d62:	2308      	movs	r3, #8
 8010d64:	7563      	strb	r3, [r4, #21]
 8010d66:	f080 0001 	eor.w	r0, r0, #1
 8010d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d6e:	463a      	mov	r2, r7
 8010d70:	68a1      	ldr	r1, [r4, #8]
 8010d72:	4630      	mov	r0, r6
 8010d74:	f010 fe5d 	bl	8021a32 <memcpy>
 8010d78:	68a2      	ldr	r2, [r4, #8]
 8010d7a:	6923      	ldr	r3, [r4, #16]
 8010d7c:	443a      	add	r2, r7
 8010d7e:	441f      	add	r7, r3
 8010d80:	60a2      	str	r2, [r4, #8]
 8010d82:	6127      	str	r7, [r4, #16]
 8010d84:	e7ec      	b.n	8010d60 <ucdr_deserialize_array_double+0x84>
 8010d86:	bf00      	nop

08010d88 <ucdr_deserialize_endian_array_double>:
 8010d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d8c:	4688      	mov	r8, r1
 8010d8e:	2108      	movs	r1, #8
 8010d90:	4605      	mov	r5, r0
 8010d92:	4614      	mov	r4, r2
 8010d94:	461f      	mov	r7, r3
 8010d96:	f002 f895 	bl	8012ec4 <ucdr_buffer_alignment>
 8010d9a:	4601      	mov	r1, r0
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	7d6e      	ldrb	r6, [r5, #21]
 8010da0:	f002 f8d4 	bl	8012f4c <ucdr_advance_buffer>
 8010da4:	f1b8 0f01 	cmp.w	r8, #1
 8010da8:	756e      	strb	r6, [r5, #21]
 8010daa:	d010      	beq.n	8010dce <ucdr_deserialize_endian_array_double+0x46>
 8010dac:	2600      	movs	r6, #0
 8010dae:	b14f      	cbz	r7, 8010dc4 <ucdr_deserialize_endian_array_double+0x3c>
 8010db0:	4622      	mov	r2, r4
 8010db2:	4641      	mov	r1, r8
 8010db4:	4628      	mov	r0, r5
 8010db6:	3601      	adds	r6, #1
 8010db8:	f001 ff56 	bl	8012c68 <ucdr_deserialize_endian_double>
 8010dbc:	42b7      	cmp	r7, r6
 8010dbe:	f104 0408 	add.w	r4, r4, #8
 8010dc2:	d1f5      	bne.n	8010db0 <ucdr_deserialize_endian_array_double+0x28>
 8010dc4:	7da8      	ldrb	r0, [r5, #22]
 8010dc6:	f080 0001 	eor.w	r0, r0, #1
 8010dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dce:	00ff      	lsls	r7, r7, #3
 8010dd0:	4639      	mov	r1, r7
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f002 f816 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010dd8:	b9f8      	cbnz	r0, 8010e1a <ucdr_deserialize_endian_array_double+0x92>
 8010dda:	46b8      	mov	r8, r7
 8010ddc:	e00a      	b.n	8010df4 <ucdr_deserialize_endian_array_double+0x6c>
 8010dde:	68a9      	ldr	r1, [r5, #8]
 8010de0:	f010 fe27 	bl	8021a32 <memcpy>
 8010de4:	68aa      	ldr	r2, [r5, #8]
 8010de6:	692b      	ldr	r3, [r5, #16]
 8010de8:	4432      	add	r2, r6
 8010dea:	4433      	add	r3, r6
 8010dec:	eba8 0806 	sub.w	r8, r8, r6
 8010df0:	60aa      	str	r2, [r5, #8]
 8010df2:	612b      	str	r3, [r5, #16]
 8010df4:	2208      	movs	r2, #8
 8010df6:	4641      	mov	r1, r8
 8010df8:	4628      	mov	r0, r5
 8010dfa:	f002 f88b 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8010dfe:	4606      	mov	r6, r0
 8010e00:	eba7 0008 	sub.w	r0, r7, r8
 8010e04:	4420      	add	r0, r4
 8010e06:	4632      	mov	r2, r6
 8010e08:	2e00      	cmp	r6, #0
 8010e0a:	d1e8      	bne.n	8010dde <ucdr_deserialize_endian_array_double+0x56>
 8010e0c:	7da8      	ldrb	r0, [r5, #22]
 8010e0e:	2308      	movs	r3, #8
 8010e10:	756b      	strb	r3, [r5, #21]
 8010e12:	f080 0001 	eor.w	r0, r0, #1
 8010e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e1a:	463a      	mov	r2, r7
 8010e1c:	68a9      	ldr	r1, [r5, #8]
 8010e1e:	4620      	mov	r0, r4
 8010e20:	f010 fe07 	bl	8021a32 <memcpy>
 8010e24:	68aa      	ldr	r2, [r5, #8]
 8010e26:	692b      	ldr	r3, [r5, #16]
 8010e28:	443a      	add	r2, r7
 8010e2a:	441f      	add	r7, r3
 8010e2c:	60aa      	str	r2, [r5, #8]
 8010e2e:	612f      	str	r7, [r5, #16]
 8010e30:	e7ec      	b.n	8010e0c <ucdr_deserialize_endian_array_double+0x84>
 8010e32:	bf00      	nop

08010e34 <ucdr_serialize_bool>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	460d      	mov	r5, r1
 8010e38:	2101      	movs	r1, #1
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	f001 ffee 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8010e40:	b148      	cbz	r0, 8010e56 <ucdr_serialize_bool+0x22>
 8010e42:	68a3      	ldr	r3, [r4, #8]
 8010e44:	701d      	strb	r5, [r3, #0]
 8010e46:	68a2      	ldr	r2, [r4, #8]
 8010e48:	6923      	ldr	r3, [r4, #16]
 8010e4a:	2101      	movs	r1, #1
 8010e4c:	440a      	add	r2, r1
 8010e4e:	440b      	add	r3, r1
 8010e50:	60a2      	str	r2, [r4, #8]
 8010e52:	6123      	str	r3, [r4, #16]
 8010e54:	7561      	strb	r1, [r4, #21]
 8010e56:	7da0      	ldrb	r0, [r4, #22]
 8010e58:	f080 0001 	eor.w	r0, r0, #1
 8010e5c:	bd38      	pop	{r3, r4, r5, pc}
 8010e5e:	bf00      	nop

08010e60 <ucdr_deserialize_bool>:
 8010e60:	b538      	push	{r3, r4, r5, lr}
 8010e62:	460d      	mov	r5, r1
 8010e64:	2101      	movs	r1, #1
 8010e66:	4604      	mov	r4, r0
 8010e68:	f001 ffd8 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8010e6c:	b160      	cbz	r0, 8010e88 <ucdr_deserialize_bool+0x28>
 8010e6e:	68a2      	ldr	r2, [r4, #8]
 8010e70:	6923      	ldr	r3, [r4, #16]
 8010e72:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010e76:	3900      	subs	r1, #0
 8010e78:	bf18      	it	ne
 8010e7a:	2101      	movne	r1, #1
 8010e7c:	7029      	strb	r1, [r5, #0]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	2101      	movs	r1, #1
 8010e82:	60a2      	str	r2, [r4, #8]
 8010e84:	6123      	str	r3, [r4, #16]
 8010e86:	7561      	strb	r1, [r4, #21]
 8010e88:	7da0      	ldrb	r0, [r4, #22]
 8010e8a:	f080 0001 	eor.w	r0, r0, #1
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}

08010e90 <ucdr_serialize_uint8_t>:
 8010e90:	b538      	push	{r3, r4, r5, lr}
 8010e92:	460d      	mov	r5, r1
 8010e94:	2101      	movs	r1, #1
 8010e96:	4604      	mov	r4, r0
 8010e98:	f001 ffc0 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8010e9c:	b148      	cbz	r0, 8010eb2 <ucdr_serialize_uint8_t+0x22>
 8010e9e:	68a3      	ldr	r3, [r4, #8]
 8010ea0:	701d      	strb	r5, [r3, #0]
 8010ea2:	68a2      	ldr	r2, [r4, #8]
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	440a      	add	r2, r1
 8010eaa:	440b      	add	r3, r1
 8010eac:	60a2      	str	r2, [r4, #8]
 8010eae:	6123      	str	r3, [r4, #16]
 8010eb0:	7561      	strb	r1, [r4, #21]
 8010eb2:	7da0      	ldrb	r0, [r4, #22]
 8010eb4:	f080 0001 	eor.w	r0, r0, #1
 8010eb8:	bd38      	pop	{r3, r4, r5, pc}
 8010eba:	bf00      	nop

08010ebc <ucdr_deserialize_uint8_t>:
 8010ebc:	b538      	push	{r3, r4, r5, lr}
 8010ebe:	460d      	mov	r5, r1
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	f001 ffaa 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8010ec8:	b150      	cbz	r0, 8010ee0 <ucdr_deserialize_uint8_t+0x24>
 8010eca:	68a3      	ldr	r3, [r4, #8]
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	702b      	strb	r3, [r5, #0]
 8010ed0:	68a2      	ldr	r2, [r4, #8]
 8010ed2:	6923      	ldr	r3, [r4, #16]
 8010ed4:	2101      	movs	r1, #1
 8010ed6:	440a      	add	r2, r1
 8010ed8:	440b      	add	r3, r1
 8010eda:	60a2      	str	r2, [r4, #8]
 8010edc:	6123      	str	r3, [r4, #16]
 8010ede:	7561      	strb	r1, [r4, #21]
 8010ee0:	7da0      	ldrb	r0, [r4, #22]
 8010ee2:	f080 0001 	eor.w	r0, r0, #1
 8010ee6:	bd38      	pop	{r3, r4, r5, pc}

08010ee8 <ucdr_serialize_uint16_t>:
 8010ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	460b      	mov	r3, r1
 8010ef0:	2102      	movs	r1, #2
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010ef8:	f001 ffe4 	bl	8012ec4 <ucdr_buffer_alignment>
 8010efc:	4601      	mov	r1, r0
 8010efe:	4620      	mov	r0, r4
 8010f00:	7d67      	ldrb	r7, [r4, #21]
 8010f02:	f002 f823 	bl	8012f4c <ucdr_advance_buffer>
 8010f06:	2102      	movs	r1, #2
 8010f08:	4620      	mov	r0, r4
 8010f0a:	f001 ff7b 	bl	8012e04 <ucdr_check_buffer_available_for>
 8010f0e:	bb78      	cbnz	r0, 8010f70 <ucdr_serialize_uint16_t+0x88>
 8010f10:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010f14:	42ab      	cmp	r3, r5
 8010f16:	d926      	bls.n	8010f66 <ucdr_serialize_uint16_t+0x7e>
 8010f18:	1b5e      	subs	r6, r3, r5
 8010f1a:	60a3      	str	r3, [r4, #8]
 8010f1c:	6923      	ldr	r3, [r4, #16]
 8010f1e:	f1c6 0802 	rsb	r8, r6, #2
 8010f22:	4433      	add	r3, r6
 8010f24:	6123      	str	r3, [r4, #16]
 8010f26:	4641      	mov	r1, r8
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f001 ff77 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d03b      	beq.n	8010faa <ucdr_serialize_uint16_t+0xc2>
 8010f32:	7d23      	ldrb	r3, [r4, #20]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d04a      	beq.n	8010fce <ucdr_serialize_uint16_t+0xe6>
 8010f38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f3c:	702b      	strb	r3, [r5, #0]
 8010f3e:	2e00      	cmp	r6, #0
 8010f40:	d040      	beq.n	8010fc4 <ucdr_serialize_uint16_t+0xdc>
 8010f42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f46:	706b      	strb	r3, [r5, #1]
 8010f48:	6923      	ldr	r3, [r4, #16]
 8010f4a:	68a2      	ldr	r2, [r4, #8]
 8010f4c:	7da0      	ldrb	r0, [r4, #22]
 8010f4e:	3302      	adds	r3, #2
 8010f50:	1b9e      	subs	r6, r3, r6
 8010f52:	4442      	add	r2, r8
 8010f54:	2302      	movs	r3, #2
 8010f56:	f080 0001 	eor.w	r0, r0, #1
 8010f5a:	60a2      	str	r2, [r4, #8]
 8010f5c:	6126      	str	r6, [r4, #16]
 8010f5e:	7563      	strb	r3, [r4, #21]
 8010f60:	b002      	add	sp, #8
 8010f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f66:	2102      	movs	r1, #2
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f001 ff57 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8010f6e:	b190      	cbz	r0, 8010f96 <ucdr_serialize_uint16_t+0xae>
 8010f70:	7d23      	ldrb	r3, [r4, #20]
 8010f72:	2b01      	cmp	r3, #1
 8010f74:	68a3      	ldr	r3, [r4, #8]
 8010f76:	d014      	beq.n	8010fa2 <ucdr_serialize_uint16_t+0xba>
 8010f78:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010f7c:	701a      	strb	r2, [r3, #0]
 8010f7e:	68a3      	ldr	r3, [r4, #8]
 8010f80:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f84:	705a      	strb	r2, [r3, #1]
 8010f86:	68a2      	ldr	r2, [r4, #8]
 8010f88:	6923      	ldr	r3, [r4, #16]
 8010f8a:	3202      	adds	r2, #2
 8010f8c:	3302      	adds	r3, #2
 8010f8e:	2102      	movs	r1, #2
 8010f90:	60a2      	str	r2, [r4, #8]
 8010f92:	6123      	str	r3, [r4, #16]
 8010f94:	7561      	strb	r1, [r4, #21]
 8010f96:	7da0      	ldrb	r0, [r4, #22]
 8010f98:	f080 0001 	eor.w	r0, r0, #1
 8010f9c:	b002      	add	sp, #8
 8010f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fa2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010fa6:	801a      	strh	r2, [r3, #0]
 8010fa8:	e7ed      	b.n	8010f86 <ucdr_serialize_uint16_t+0x9e>
 8010faa:	68a2      	ldr	r2, [r4, #8]
 8010fac:	6923      	ldr	r3, [r4, #16]
 8010fae:	7da0      	ldrb	r0, [r4, #22]
 8010fb0:	7567      	strb	r7, [r4, #21]
 8010fb2:	1b92      	subs	r2, r2, r6
 8010fb4:	1b9b      	subs	r3, r3, r6
 8010fb6:	f080 0001 	eor.w	r0, r0, #1
 8010fba:	60a2      	str	r2, [r4, #8]
 8010fbc:	6123      	str	r3, [r4, #16]
 8010fbe:	b002      	add	sp, #8
 8010fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc4:	68a3      	ldr	r3, [r4, #8]
 8010fc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010fca:	701a      	strb	r2, [r3, #0]
 8010fcc:	e7bc      	b.n	8010f48 <ucdr_serialize_uint16_t+0x60>
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f10d 0506 	add.w	r5, sp, #6
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	4632      	mov	r2, r6
 8010fd8:	f010 fd2b 	bl	8021a32 <memcpy>
 8010fdc:	68a0      	ldr	r0, [r4, #8]
 8010fde:	4642      	mov	r2, r8
 8010fe0:	19a9      	adds	r1, r5, r6
 8010fe2:	f010 fd26 	bl	8021a32 <memcpy>
 8010fe6:	e7af      	b.n	8010f48 <ucdr_serialize_uint16_t+0x60>

08010fe8 <ucdr_serialize_endian_uint16_t>:
 8010fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fec:	b083      	sub	sp, #12
 8010fee:	460d      	mov	r5, r1
 8010ff0:	2102      	movs	r1, #2
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010ff8:	f001 ff64 	bl	8012ec4 <ucdr_buffer_alignment>
 8010ffc:	4601      	mov	r1, r0
 8010ffe:	4620      	mov	r0, r4
 8011000:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011004:	f001 ffa2 	bl	8012f4c <ucdr_advance_buffer>
 8011008:	2102      	movs	r1, #2
 801100a:	4620      	mov	r0, r4
 801100c:	f001 fefa 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011010:	bb70      	cbnz	r0, 8011070 <ucdr_serialize_endian_uint16_t+0x88>
 8011012:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011016:	42be      	cmp	r6, r7
 8011018:	d925      	bls.n	8011066 <ucdr_serialize_endian_uint16_t+0x7e>
 801101a:	6923      	ldr	r3, [r4, #16]
 801101c:	60a6      	str	r6, [r4, #8]
 801101e:	1bf6      	subs	r6, r6, r7
 8011020:	4433      	add	r3, r6
 8011022:	f1c6 0902 	rsb	r9, r6, #2
 8011026:	6123      	str	r3, [r4, #16]
 8011028:	4649      	mov	r1, r9
 801102a:	4620      	mov	r0, r4
 801102c:	f001 fef6 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011030:	2800      	cmp	r0, #0
 8011032:	d039      	beq.n	80110a8 <ucdr_serialize_endian_uint16_t+0xc0>
 8011034:	2d01      	cmp	r5, #1
 8011036:	d04a      	beq.n	80110ce <ucdr_serialize_endian_uint16_t+0xe6>
 8011038:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801103c:	703b      	strb	r3, [r7, #0]
 801103e:	2e00      	cmp	r6, #0
 8011040:	d040      	beq.n	80110c4 <ucdr_serialize_endian_uint16_t+0xdc>
 8011042:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011046:	707b      	strb	r3, [r7, #1]
 8011048:	6923      	ldr	r3, [r4, #16]
 801104a:	68a2      	ldr	r2, [r4, #8]
 801104c:	7da0      	ldrb	r0, [r4, #22]
 801104e:	3302      	adds	r3, #2
 8011050:	444a      	add	r2, r9
 8011052:	1b9b      	subs	r3, r3, r6
 8011054:	2102      	movs	r1, #2
 8011056:	f080 0001 	eor.w	r0, r0, #1
 801105a:	60a2      	str	r2, [r4, #8]
 801105c:	6123      	str	r3, [r4, #16]
 801105e:	7561      	strb	r1, [r4, #21]
 8011060:	b003      	add	sp, #12
 8011062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011066:	2102      	movs	r1, #2
 8011068:	4620      	mov	r0, r4
 801106a:	f001 fed7 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 801106e:	b188      	cbz	r0, 8011094 <ucdr_serialize_endian_uint16_t+0xac>
 8011070:	2d01      	cmp	r5, #1
 8011072:	68a3      	ldr	r3, [r4, #8]
 8011074:	d014      	beq.n	80110a0 <ucdr_serialize_endian_uint16_t+0xb8>
 8011076:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801107a:	701a      	strb	r2, [r3, #0]
 801107c:	68a3      	ldr	r3, [r4, #8]
 801107e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011082:	705a      	strb	r2, [r3, #1]
 8011084:	68a2      	ldr	r2, [r4, #8]
 8011086:	6923      	ldr	r3, [r4, #16]
 8011088:	3202      	adds	r2, #2
 801108a:	3302      	adds	r3, #2
 801108c:	2102      	movs	r1, #2
 801108e:	60a2      	str	r2, [r4, #8]
 8011090:	6123      	str	r3, [r4, #16]
 8011092:	7561      	strb	r1, [r4, #21]
 8011094:	7da0      	ldrb	r0, [r4, #22]
 8011096:	f080 0001 	eor.w	r0, r0, #1
 801109a:	b003      	add	sp, #12
 801109c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80110a4:	801a      	strh	r2, [r3, #0]
 80110a6:	e7ed      	b.n	8011084 <ucdr_serialize_endian_uint16_t+0x9c>
 80110a8:	68a2      	ldr	r2, [r4, #8]
 80110aa:	6923      	ldr	r3, [r4, #16]
 80110ac:	7da0      	ldrb	r0, [r4, #22]
 80110ae:	f884 8015 	strb.w	r8, [r4, #21]
 80110b2:	1b92      	subs	r2, r2, r6
 80110b4:	1b9b      	subs	r3, r3, r6
 80110b6:	f080 0001 	eor.w	r0, r0, #1
 80110ba:	60a2      	str	r2, [r4, #8]
 80110bc:	6123      	str	r3, [r4, #16]
 80110be:	b003      	add	sp, #12
 80110c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110c4:	68a3      	ldr	r3, [r4, #8]
 80110c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80110ca:	701a      	strb	r2, [r3, #0]
 80110cc:	e7bc      	b.n	8011048 <ucdr_serialize_endian_uint16_t+0x60>
 80110ce:	f10d 0506 	add.w	r5, sp, #6
 80110d2:	4629      	mov	r1, r5
 80110d4:	4632      	mov	r2, r6
 80110d6:	4638      	mov	r0, r7
 80110d8:	f010 fcab 	bl	8021a32 <memcpy>
 80110dc:	68a0      	ldr	r0, [r4, #8]
 80110de:	464a      	mov	r2, r9
 80110e0:	19a9      	adds	r1, r5, r6
 80110e2:	f010 fca6 	bl	8021a32 <memcpy>
 80110e6:	e7af      	b.n	8011048 <ucdr_serialize_endian_uint16_t+0x60>

080110e8 <ucdr_deserialize_uint16_t>:
 80110e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110ec:	460d      	mov	r5, r1
 80110ee:	2102      	movs	r1, #2
 80110f0:	4604      	mov	r4, r0
 80110f2:	f001 fee7 	bl	8012ec4 <ucdr_buffer_alignment>
 80110f6:	4601      	mov	r1, r0
 80110f8:	4620      	mov	r0, r4
 80110fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 80110fe:	f001 ff25 	bl	8012f4c <ucdr_advance_buffer>
 8011102:	2102      	movs	r1, #2
 8011104:	4620      	mov	r0, r4
 8011106:	f001 fe7d 	bl	8012e04 <ucdr_check_buffer_available_for>
 801110a:	bb60      	cbnz	r0, 8011166 <ucdr_deserialize_uint16_t+0x7e>
 801110c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011110:	42be      	cmp	r6, r7
 8011112:	d923      	bls.n	801115c <ucdr_deserialize_uint16_t+0x74>
 8011114:	6923      	ldr	r3, [r4, #16]
 8011116:	60a6      	str	r6, [r4, #8]
 8011118:	1bf6      	subs	r6, r6, r7
 801111a:	4433      	add	r3, r6
 801111c:	f1c6 0902 	rsb	r9, r6, #2
 8011120:	6123      	str	r3, [r4, #16]
 8011122:	4649      	mov	r1, r9
 8011124:	4620      	mov	r0, r4
 8011126:	f001 fe79 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 801112a:	2800      	cmp	r0, #0
 801112c:	d034      	beq.n	8011198 <ucdr_deserialize_uint16_t+0xb0>
 801112e:	7d23      	ldrb	r3, [r4, #20]
 8011130:	2b01      	cmp	r3, #1
 8011132:	d042      	beq.n	80111ba <ucdr_deserialize_uint16_t+0xd2>
 8011134:	787b      	ldrb	r3, [r7, #1]
 8011136:	702b      	strb	r3, [r5, #0]
 8011138:	2e00      	cmp	r6, #0
 801113a:	d03a      	beq.n	80111b2 <ucdr_deserialize_uint16_t+0xca>
 801113c:	783b      	ldrb	r3, [r7, #0]
 801113e:	706b      	strb	r3, [r5, #1]
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	68a2      	ldr	r2, [r4, #8]
 8011144:	7da0      	ldrb	r0, [r4, #22]
 8011146:	2102      	movs	r1, #2
 8011148:	3302      	adds	r3, #2
 801114a:	444a      	add	r2, r9
 801114c:	1b9b      	subs	r3, r3, r6
 801114e:	7561      	strb	r1, [r4, #21]
 8011150:	60a2      	str	r2, [r4, #8]
 8011152:	6123      	str	r3, [r4, #16]
 8011154:	f080 0001 	eor.w	r0, r0, #1
 8011158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115c:	2102      	movs	r1, #2
 801115e:	4620      	mov	r0, r4
 8011160:	f001 fe5c 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011164:	b180      	cbz	r0, 8011188 <ucdr_deserialize_uint16_t+0xa0>
 8011166:	7d23      	ldrb	r3, [r4, #20]
 8011168:	2b01      	cmp	r3, #1
 801116a:	68a3      	ldr	r3, [r4, #8]
 801116c:	d011      	beq.n	8011192 <ucdr_deserialize_uint16_t+0xaa>
 801116e:	785b      	ldrb	r3, [r3, #1]
 8011170:	702b      	strb	r3, [r5, #0]
 8011172:	68a3      	ldr	r3, [r4, #8]
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	706b      	strb	r3, [r5, #1]
 8011178:	68a2      	ldr	r2, [r4, #8]
 801117a:	6923      	ldr	r3, [r4, #16]
 801117c:	3202      	adds	r2, #2
 801117e:	3302      	adds	r3, #2
 8011180:	2102      	movs	r1, #2
 8011182:	60a2      	str	r2, [r4, #8]
 8011184:	6123      	str	r3, [r4, #16]
 8011186:	7561      	strb	r1, [r4, #21]
 8011188:	7da0      	ldrb	r0, [r4, #22]
 801118a:	f080 0001 	eor.w	r0, r0, #1
 801118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011192:	881b      	ldrh	r3, [r3, #0]
 8011194:	802b      	strh	r3, [r5, #0]
 8011196:	e7ef      	b.n	8011178 <ucdr_deserialize_uint16_t+0x90>
 8011198:	68a2      	ldr	r2, [r4, #8]
 801119a:	6923      	ldr	r3, [r4, #16]
 801119c:	7da0      	ldrb	r0, [r4, #22]
 801119e:	f884 8015 	strb.w	r8, [r4, #21]
 80111a2:	1b92      	subs	r2, r2, r6
 80111a4:	1b9b      	subs	r3, r3, r6
 80111a6:	60a2      	str	r2, [r4, #8]
 80111a8:	6123      	str	r3, [r4, #16]
 80111aa:	f080 0001 	eor.w	r0, r0, #1
 80111ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b2:	68a3      	ldr	r3, [r4, #8]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	706b      	strb	r3, [r5, #1]
 80111b8:	e7c2      	b.n	8011140 <ucdr_deserialize_uint16_t+0x58>
 80111ba:	4639      	mov	r1, r7
 80111bc:	4632      	mov	r2, r6
 80111be:	4628      	mov	r0, r5
 80111c0:	f010 fc37 	bl	8021a32 <memcpy>
 80111c4:	68a1      	ldr	r1, [r4, #8]
 80111c6:	464a      	mov	r2, r9
 80111c8:	19a8      	adds	r0, r5, r6
 80111ca:	f010 fc32 	bl	8021a32 <memcpy>
 80111ce:	e7b7      	b.n	8011140 <ucdr_deserialize_uint16_t+0x58>

080111d0 <ucdr_deserialize_endian_uint16_t>:
 80111d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111d4:	460e      	mov	r6, r1
 80111d6:	2102      	movs	r1, #2
 80111d8:	4604      	mov	r4, r0
 80111da:	4615      	mov	r5, r2
 80111dc:	f001 fe72 	bl	8012ec4 <ucdr_buffer_alignment>
 80111e0:	4601      	mov	r1, r0
 80111e2:	4620      	mov	r0, r4
 80111e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80111e8:	f001 feb0 	bl	8012f4c <ucdr_advance_buffer>
 80111ec:	2102      	movs	r1, #2
 80111ee:	4620      	mov	r0, r4
 80111f0:	f001 fe08 	bl	8012e04 <ucdr_check_buffer_available_for>
 80111f4:	bb70      	cbnz	r0, 8011254 <ucdr_deserialize_endian_uint16_t+0x84>
 80111f6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80111fa:	4547      	cmp	r7, r8
 80111fc:	d925      	bls.n	801124a <ucdr_deserialize_endian_uint16_t+0x7a>
 80111fe:	6923      	ldr	r3, [r4, #16]
 8011200:	60a7      	str	r7, [r4, #8]
 8011202:	eba7 0708 	sub.w	r7, r7, r8
 8011206:	443b      	add	r3, r7
 8011208:	f1c7 0a02 	rsb	sl, r7, #2
 801120c:	6123      	str	r3, [r4, #16]
 801120e:	4651      	mov	r1, sl
 8011210:	4620      	mov	r0, r4
 8011212:	f001 fe03 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011216:	2800      	cmp	r0, #0
 8011218:	d034      	beq.n	8011284 <ucdr_deserialize_endian_uint16_t+0xb4>
 801121a:	2e01      	cmp	r6, #1
 801121c:	d043      	beq.n	80112a6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801121e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011222:	702b      	strb	r3, [r5, #0]
 8011224:	2f00      	cmp	r7, #0
 8011226:	d03a      	beq.n	801129e <ucdr_deserialize_endian_uint16_t+0xce>
 8011228:	f898 3000 	ldrb.w	r3, [r8]
 801122c:	706b      	strb	r3, [r5, #1]
 801122e:	6923      	ldr	r3, [r4, #16]
 8011230:	68a2      	ldr	r2, [r4, #8]
 8011232:	7da0      	ldrb	r0, [r4, #22]
 8011234:	2102      	movs	r1, #2
 8011236:	3302      	adds	r3, #2
 8011238:	4452      	add	r2, sl
 801123a:	1bdb      	subs	r3, r3, r7
 801123c:	7561      	strb	r1, [r4, #21]
 801123e:	60a2      	str	r2, [r4, #8]
 8011240:	6123      	str	r3, [r4, #16]
 8011242:	f080 0001 	eor.w	r0, r0, #1
 8011246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801124a:	2102      	movs	r1, #2
 801124c:	4620      	mov	r0, r4
 801124e:	f001 fde5 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011252:	b178      	cbz	r0, 8011274 <ucdr_deserialize_endian_uint16_t+0xa4>
 8011254:	2e01      	cmp	r6, #1
 8011256:	68a3      	ldr	r3, [r4, #8]
 8011258:	d011      	beq.n	801127e <ucdr_deserialize_endian_uint16_t+0xae>
 801125a:	785b      	ldrb	r3, [r3, #1]
 801125c:	702b      	strb	r3, [r5, #0]
 801125e:	68a3      	ldr	r3, [r4, #8]
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	706b      	strb	r3, [r5, #1]
 8011264:	68a2      	ldr	r2, [r4, #8]
 8011266:	6923      	ldr	r3, [r4, #16]
 8011268:	3202      	adds	r2, #2
 801126a:	3302      	adds	r3, #2
 801126c:	2102      	movs	r1, #2
 801126e:	60a2      	str	r2, [r4, #8]
 8011270:	6123      	str	r3, [r4, #16]
 8011272:	7561      	strb	r1, [r4, #21]
 8011274:	7da0      	ldrb	r0, [r4, #22]
 8011276:	f080 0001 	eor.w	r0, r0, #1
 801127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801127e:	881b      	ldrh	r3, [r3, #0]
 8011280:	802b      	strh	r3, [r5, #0]
 8011282:	e7ef      	b.n	8011264 <ucdr_deserialize_endian_uint16_t+0x94>
 8011284:	68a2      	ldr	r2, [r4, #8]
 8011286:	6923      	ldr	r3, [r4, #16]
 8011288:	7da0      	ldrb	r0, [r4, #22]
 801128a:	f884 9015 	strb.w	r9, [r4, #21]
 801128e:	1bd2      	subs	r2, r2, r7
 8011290:	1bdb      	subs	r3, r3, r7
 8011292:	60a2      	str	r2, [r4, #8]
 8011294:	6123      	str	r3, [r4, #16]
 8011296:	f080 0001 	eor.w	r0, r0, #1
 801129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801129e:	68a3      	ldr	r3, [r4, #8]
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	706b      	strb	r3, [r5, #1]
 80112a4:	e7c3      	b.n	801122e <ucdr_deserialize_endian_uint16_t+0x5e>
 80112a6:	4641      	mov	r1, r8
 80112a8:	463a      	mov	r2, r7
 80112aa:	4628      	mov	r0, r5
 80112ac:	f010 fbc1 	bl	8021a32 <memcpy>
 80112b0:	68a1      	ldr	r1, [r4, #8]
 80112b2:	4652      	mov	r2, sl
 80112b4:	19e8      	adds	r0, r5, r7
 80112b6:	f010 fbbc 	bl	8021a32 <memcpy>
 80112ba:	e7b8      	b.n	801122e <ucdr_deserialize_endian_uint16_t+0x5e>

080112bc <ucdr_serialize_uint32_t>:
 80112bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c0:	b082      	sub	sp, #8
 80112c2:	4604      	mov	r4, r0
 80112c4:	9101      	str	r1, [sp, #4]
 80112c6:	2104      	movs	r1, #4
 80112c8:	f001 fdfc 	bl	8012ec4 <ucdr_buffer_alignment>
 80112cc:	4601      	mov	r1, r0
 80112ce:	4620      	mov	r0, r4
 80112d0:	7d67      	ldrb	r7, [r4, #21]
 80112d2:	f001 fe3b 	bl	8012f4c <ucdr_advance_buffer>
 80112d6:	2104      	movs	r1, #4
 80112d8:	4620      	mov	r0, r4
 80112da:	f001 fd93 	bl	8012e04 <ucdr_check_buffer_available_for>
 80112de:	2800      	cmp	r0, #0
 80112e0:	d139      	bne.n	8011356 <ucdr_serialize_uint32_t+0x9a>
 80112e2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80112e6:	42ab      	cmp	r3, r5
 80112e8:	d930      	bls.n	801134c <ucdr_serialize_uint32_t+0x90>
 80112ea:	1b5e      	subs	r6, r3, r5
 80112ec:	60a3      	str	r3, [r4, #8]
 80112ee:	6923      	ldr	r3, [r4, #16]
 80112f0:	f1c6 0804 	rsb	r8, r6, #4
 80112f4:	4433      	add	r3, r6
 80112f6:	6123      	str	r3, [r4, #16]
 80112f8:	4641      	mov	r1, r8
 80112fa:	4620      	mov	r0, r4
 80112fc:	f001 fd8e 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011300:	2800      	cmp	r0, #0
 8011302:	d04c      	beq.n	801139e <ucdr_serialize_uint32_t+0xe2>
 8011304:	7d23      	ldrb	r3, [r4, #20]
 8011306:	2b01      	cmp	r3, #1
 8011308:	d063      	beq.n	80113d2 <ucdr_serialize_uint32_t+0x116>
 801130a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801130e:	702b      	strb	r3, [r5, #0]
 8011310:	2e00      	cmp	r6, #0
 8011312:	d051      	beq.n	80113b8 <ucdr_serialize_uint32_t+0xfc>
 8011314:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011318:	706b      	strb	r3, [r5, #1]
 801131a:	2e01      	cmp	r6, #1
 801131c:	d050      	beq.n	80113c0 <ucdr_serialize_uint32_t+0x104>
 801131e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011322:	70ab      	strb	r3, [r5, #2]
 8011324:	2e02      	cmp	r6, #2
 8011326:	d04f      	beq.n	80113c8 <ucdr_serialize_uint32_t+0x10c>
 8011328:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801132c:	70eb      	strb	r3, [r5, #3]
 801132e:	6923      	ldr	r3, [r4, #16]
 8011330:	68a2      	ldr	r2, [r4, #8]
 8011332:	7da0      	ldrb	r0, [r4, #22]
 8011334:	3304      	adds	r3, #4
 8011336:	1b9e      	subs	r6, r3, r6
 8011338:	4442      	add	r2, r8
 801133a:	2304      	movs	r3, #4
 801133c:	f080 0001 	eor.w	r0, r0, #1
 8011340:	60a2      	str	r2, [r4, #8]
 8011342:	6126      	str	r6, [r4, #16]
 8011344:	7563      	strb	r3, [r4, #21]
 8011346:	b002      	add	sp, #8
 8011348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801134c:	2104      	movs	r1, #4
 801134e:	4620      	mov	r0, r4
 8011350:	f001 fd64 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011354:	b1d0      	cbz	r0, 801138c <ucdr_serialize_uint32_t+0xd0>
 8011356:	7d23      	ldrb	r3, [r4, #20]
 8011358:	2b01      	cmp	r3, #1
 801135a:	68a3      	ldr	r3, [r4, #8]
 801135c:	d01c      	beq.n	8011398 <ucdr_serialize_uint32_t+0xdc>
 801135e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011362:	701a      	strb	r2, [r3, #0]
 8011364:	68a3      	ldr	r3, [r4, #8]
 8011366:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801136a:	705a      	strb	r2, [r3, #1]
 801136c:	68a3      	ldr	r3, [r4, #8]
 801136e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011372:	709a      	strb	r2, [r3, #2]
 8011374:	68a3      	ldr	r3, [r4, #8]
 8011376:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801137a:	70da      	strb	r2, [r3, #3]
 801137c:	68a2      	ldr	r2, [r4, #8]
 801137e:	6923      	ldr	r3, [r4, #16]
 8011380:	3204      	adds	r2, #4
 8011382:	3304      	adds	r3, #4
 8011384:	2104      	movs	r1, #4
 8011386:	60a2      	str	r2, [r4, #8]
 8011388:	6123      	str	r3, [r4, #16]
 801138a:	7561      	strb	r1, [r4, #21]
 801138c:	7da0      	ldrb	r0, [r4, #22]
 801138e:	f080 0001 	eor.w	r0, r0, #1
 8011392:	b002      	add	sp, #8
 8011394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011398:	9a01      	ldr	r2, [sp, #4]
 801139a:	601a      	str	r2, [r3, #0]
 801139c:	e7ee      	b.n	801137c <ucdr_serialize_uint32_t+0xc0>
 801139e:	68a2      	ldr	r2, [r4, #8]
 80113a0:	6923      	ldr	r3, [r4, #16]
 80113a2:	7da0      	ldrb	r0, [r4, #22]
 80113a4:	7567      	strb	r7, [r4, #21]
 80113a6:	1b92      	subs	r2, r2, r6
 80113a8:	1b9b      	subs	r3, r3, r6
 80113aa:	f080 0001 	eor.w	r0, r0, #1
 80113ae:	60a2      	str	r2, [r4, #8]
 80113b0:	6123      	str	r3, [r4, #16]
 80113b2:	b002      	add	sp, #8
 80113b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113b8:	68a3      	ldr	r3, [r4, #8]
 80113ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80113be:	701a      	strb	r2, [r3, #0]
 80113c0:	68a3      	ldr	r3, [r4, #8]
 80113c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80113c6:	701a      	strb	r2, [r3, #0]
 80113c8:	68a3      	ldr	r3, [r4, #8]
 80113ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80113ce:	701a      	strb	r2, [r3, #0]
 80113d0:	e7ad      	b.n	801132e <ucdr_serialize_uint32_t+0x72>
 80113d2:	4628      	mov	r0, r5
 80113d4:	ad01      	add	r5, sp, #4
 80113d6:	4629      	mov	r1, r5
 80113d8:	4632      	mov	r2, r6
 80113da:	f010 fb2a 	bl	8021a32 <memcpy>
 80113de:	68a0      	ldr	r0, [r4, #8]
 80113e0:	4642      	mov	r2, r8
 80113e2:	19a9      	adds	r1, r5, r6
 80113e4:	f010 fb25 	bl	8021a32 <memcpy>
 80113e8:	e7a1      	b.n	801132e <ucdr_serialize_uint32_t+0x72>
 80113ea:	bf00      	nop

080113ec <ucdr_serialize_endian_uint32_t>:
 80113ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113f0:	b083      	sub	sp, #12
 80113f2:	460d      	mov	r5, r1
 80113f4:	2104      	movs	r1, #4
 80113f6:	4604      	mov	r4, r0
 80113f8:	9201      	str	r2, [sp, #4]
 80113fa:	f001 fd63 	bl	8012ec4 <ucdr_buffer_alignment>
 80113fe:	4601      	mov	r1, r0
 8011400:	4620      	mov	r0, r4
 8011402:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011406:	f001 fda1 	bl	8012f4c <ucdr_advance_buffer>
 801140a:	2104      	movs	r1, #4
 801140c:	4620      	mov	r0, r4
 801140e:	f001 fcf9 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011412:	2800      	cmp	r0, #0
 8011414:	d138      	bne.n	8011488 <ucdr_serialize_endian_uint32_t+0x9c>
 8011416:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801141a:	42b7      	cmp	r7, r6
 801141c:	d92f      	bls.n	801147e <ucdr_serialize_endian_uint32_t+0x92>
 801141e:	6923      	ldr	r3, [r4, #16]
 8011420:	60a7      	str	r7, [r4, #8]
 8011422:	1bbf      	subs	r7, r7, r6
 8011424:	443b      	add	r3, r7
 8011426:	f1c7 0904 	rsb	r9, r7, #4
 801142a:	6123      	str	r3, [r4, #16]
 801142c:	4649      	mov	r1, r9
 801142e:	4620      	mov	r0, r4
 8011430:	f001 fcf4 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011434:	2800      	cmp	r0, #0
 8011436:	d04a      	beq.n	80114ce <ucdr_serialize_endian_uint32_t+0xe2>
 8011438:	2d01      	cmp	r5, #1
 801143a:	d063      	beq.n	8011504 <ucdr_serialize_endian_uint32_t+0x118>
 801143c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011440:	7033      	strb	r3, [r6, #0]
 8011442:	2f00      	cmp	r7, #0
 8011444:	d051      	beq.n	80114ea <ucdr_serialize_endian_uint32_t+0xfe>
 8011446:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801144a:	7073      	strb	r3, [r6, #1]
 801144c:	2f01      	cmp	r7, #1
 801144e:	d050      	beq.n	80114f2 <ucdr_serialize_endian_uint32_t+0x106>
 8011450:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011454:	70b3      	strb	r3, [r6, #2]
 8011456:	2f02      	cmp	r7, #2
 8011458:	d04f      	beq.n	80114fa <ucdr_serialize_endian_uint32_t+0x10e>
 801145a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801145e:	70f3      	strb	r3, [r6, #3]
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	68a2      	ldr	r2, [r4, #8]
 8011464:	7da0      	ldrb	r0, [r4, #22]
 8011466:	3304      	adds	r3, #4
 8011468:	444a      	add	r2, r9
 801146a:	1bdb      	subs	r3, r3, r7
 801146c:	2104      	movs	r1, #4
 801146e:	f080 0001 	eor.w	r0, r0, #1
 8011472:	60a2      	str	r2, [r4, #8]
 8011474:	6123      	str	r3, [r4, #16]
 8011476:	7561      	strb	r1, [r4, #21]
 8011478:	b003      	add	sp, #12
 801147a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801147e:	2104      	movs	r1, #4
 8011480:	4620      	mov	r0, r4
 8011482:	f001 fccb 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011486:	b1c8      	cbz	r0, 80114bc <ucdr_serialize_endian_uint32_t+0xd0>
 8011488:	2d01      	cmp	r5, #1
 801148a:	68a3      	ldr	r3, [r4, #8]
 801148c:	d01c      	beq.n	80114c8 <ucdr_serialize_endian_uint32_t+0xdc>
 801148e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011492:	701a      	strb	r2, [r3, #0]
 8011494:	68a3      	ldr	r3, [r4, #8]
 8011496:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801149a:	705a      	strb	r2, [r3, #1]
 801149c:	68a3      	ldr	r3, [r4, #8]
 801149e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80114a2:	709a      	strb	r2, [r3, #2]
 80114a4:	68a3      	ldr	r3, [r4, #8]
 80114a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80114aa:	70da      	strb	r2, [r3, #3]
 80114ac:	68a2      	ldr	r2, [r4, #8]
 80114ae:	6923      	ldr	r3, [r4, #16]
 80114b0:	3204      	adds	r2, #4
 80114b2:	3304      	adds	r3, #4
 80114b4:	2104      	movs	r1, #4
 80114b6:	60a2      	str	r2, [r4, #8]
 80114b8:	6123      	str	r3, [r4, #16]
 80114ba:	7561      	strb	r1, [r4, #21]
 80114bc:	7da0      	ldrb	r0, [r4, #22]
 80114be:	f080 0001 	eor.w	r0, r0, #1
 80114c2:	b003      	add	sp, #12
 80114c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114c8:	9a01      	ldr	r2, [sp, #4]
 80114ca:	601a      	str	r2, [r3, #0]
 80114cc:	e7ee      	b.n	80114ac <ucdr_serialize_endian_uint32_t+0xc0>
 80114ce:	68a2      	ldr	r2, [r4, #8]
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	7da0      	ldrb	r0, [r4, #22]
 80114d4:	f884 8015 	strb.w	r8, [r4, #21]
 80114d8:	1bd2      	subs	r2, r2, r7
 80114da:	1bdb      	subs	r3, r3, r7
 80114dc:	f080 0001 	eor.w	r0, r0, #1
 80114e0:	60a2      	str	r2, [r4, #8]
 80114e2:	6123      	str	r3, [r4, #16]
 80114e4:	b003      	add	sp, #12
 80114e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114ea:	68a3      	ldr	r3, [r4, #8]
 80114ec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80114f0:	701a      	strb	r2, [r3, #0]
 80114f2:	68a3      	ldr	r3, [r4, #8]
 80114f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80114f8:	701a      	strb	r2, [r3, #0]
 80114fa:	68a3      	ldr	r3, [r4, #8]
 80114fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011500:	701a      	strb	r2, [r3, #0]
 8011502:	e7ad      	b.n	8011460 <ucdr_serialize_endian_uint32_t+0x74>
 8011504:	ad01      	add	r5, sp, #4
 8011506:	4629      	mov	r1, r5
 8011508:	463a      	mov	r2, r7
 801150a:	4630      	mov	r0, r6
 801150c:	f010 fa91 	bl	8021a32 <memcpy>
 8011510:	68a0      	ldr	r0, [r4, #8]
 8011512:	464a      	mov	r2, r9
 8011514:	19e9      	adds	r1, r5, r7
 8011516:	f010 fa8c 	bl	8021a32 <memcpy>
 801151a:	e7a1      	b.n	8011460 <ucdr_serialize_endian_uint32_t+0x74>

0801151c <ucdr_deserialize_uint32_t>:
 801151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011520:	460d      	mov	r5, r1
 8011522:	2104      	movs	r1, #4
 8011524:	4604      	mov	r4, r0
 8011526:	f001 fccd 	bl	8012ec4 <ucdr_buffer_alignment>
 801152a:	4601      	mov	r1, r0
 801152c:	4620      	mov	r0, r4
 801152e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011532:	f001 fd0b 	bl	8012f4c <ucdr_advance_buffer>
 8011536:	2104      	movs	r1, #4
 8011538:	4620      	mov	r0, r4
 801153a:	f001 fc63 	bl	8012e04 <ucdr_check_buffer_available_for>
 801153e:	2800      	cmp	r0, #0
 8011540:	d138      	bne.n	80115b4 <ucdr_deserialize_uint32_t+0x98>
 8011542:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011546:	42b7      	cmp	r7, r6
 8011548:	d92f      	bls.n	80115aa <ucdr_deserialize_uint32_t+0x8e>
 801154a:	6923      	ldr	r3, [r4, #16]
 801154c:	60a7      	str	r7, [r4, #8]
 801154e:	1bbf      	subs	r7, r7, r6
 8011550:	443b      	add	r3, r7
 8011552:	f1c7 0904 	rsb	r9, r7, #4
 8011556:	6123      	str	r3, [r4, #16]
 8011558:	4649      	mov	r1, r9
 801155a:	4620      	mov	r0, r4
 801155c:	f001 fc5e 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011560:	2800      	cmp	r0, #0
 8011562:	d046      	beq.n	80115f2 <ucdr_deserialize_uint32_t+0xd6>
 8011564:	7d23      	ldrb	r3, [r4, #20]
 8011566:	2b01      	cmp	r3, #1
 8011568:	d05c      	beq.n	8011624 <ucdr_deserialize_uint32_t+0x108>
 801156a:	78f3      	ldrb	r3, [r6, #3]
 801156c:	702b      	strb	r3, [r5, #0]
 801156e:	2f00      	cmp	r7, #0
 8011570:	d04c      	beq.n	801160c <ucdr_deserialize_uint32_t+0xf0>
 8011572:	78b3      	ldrb	r3, [r6, #2]
 8011574:	706b      	strb	r3, [r5, #1]
 8011576:	2f01      	cmp	r7, #1
 8011578:	f105 0302 	add.w	r3, r5, #2
 801157c:	d04a      	beq.n	8011614 <ucdr_deserialize_uint32_t+0xf8>
 801157e:	7873      	ldrb	r3, [r6, #1]
 8011580:	70ab      	strb	r3, [r5, #2]
 8011582:	2f02      	cmp	r7, #2
 8011584:	f105 0303 	add.w	r3, r5, #3
 8011588:	d048      	beq.n	801161c <ucdr_deserialize_uint32_t+0x100>
 801158a:	7833      	ldrb	r3, [r6, #0]
 801158c:	70eb      	strb	r3, [r5, #3]
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	68a2      	ldr	r2, [r4, #8]
 8011592:	7da0      	ldrb	r0, [r4, #22]
 8011594:	2104      	movs	r1, #4
 8011596:	3304      	adds	r3, #4
 8011598:	444a      	add	r2, r9
 801159a:	1bdb      	subs	r3, r3, r7
 801159c:	7561      	strb	r1, [r4, #21]
 801159e:	60a2      	str	r2, [r4, #8]
 80115a0:	6123      	str	r3, [r4, #16]
 80115a2:	f080 0001 	eor.w	r0, r0, #1
 80115a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115aa:	2104      	movs	r1, #4
 80115ac:	4620      	mov	r0, r4
 80115ae:	f001 fc35 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80115b2:	b1b0      	cbz	r0, 80115e2 <ucdr_deserialize_uint32_t+0xc6>
 80115b4:	7d23      	ldrb	r3, [r4, #20]
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	68a3      	ldr	r3, [r4, #8]
 80115ba:	d017      	beq.n	80115ec <ucdr_deserialize_uint32_t+0xd0>
 80115bc:	78db      	ldrb	r3, [r3, #3]
 80115be:	702b      	strb	r3, [r5, #0]
 80115c0:	68a3      	ldr	r3, [r4, #8]
 80115c2:	789b      	ldrb	r3, [r3, #2]
 80115c4:	706b      	strb	r3, [r5, #1]
 80115c6:	68a3      	ldr	r3, [r4, #8]
 80115c8:	785b      	ldrb	r3, [r3, #1]
 80115ca:	70ab      	strb	r3, [r5, #2]
 80115cc:	68a3      	ldr	r3, [r4, #8]
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	70eb      	strb	r3, [r5, #3]
 80115d2:	68a2      	ldr	r2, [r4, #8]
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	3204      	adds	r2, #4
 80115d8:	3304      	adds	r3, #4
 80115da:	2104      	movs	r1, #4
 80115dc:	60a2      	str	r2, [r4, #8]
 80115de:	6123      	str	r3, [r4, #16]
 80115e0:	7561      	strb	r1, [r4, #21]
 80115e2:	7da0      	ldrb	r0, [r4, #22]
 80115e4:	f080 0001 	eor.w	r0, r0, #1
 80115e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	602b      	str	r3, [r5, #0]
 80115f0:	e7ef      	b.n	80115d2 <ucdr_deserialize_uint32_t+0xb6>
 80115f2:	68a2      	ldr	r2, [r4, #8]
 80115f4:	6923      	ldr	r3, [r4, #16]
 80115f6:	7da0      	ldrb	r0, [r4, #22]
 80115f8:	f884 8015 	strb.w	r8, [r4, #21]
 80115fc:	1bd2      	subs	r2, r2, r7
 80115fe:	1bdb      	subs	r3, r3, r7
 8011600:	60a2      	str	r2, [r4, #8]
 8011602:	6123      	str	r3, [r4, #16]
 8011604:	f080 0001 	eor.w	r0, r0, #1
 8011608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801160c:	68a3      	ldr	r3, [r4, #8]
 801160e:	789b      	ldrb	r3, [r3, #2]
 8011610:	706b      	strb	r3, [r5, #1]
 8011612:	1cab      	adds	r3, r5, #2
 8011614:	68a2      	ldr	r2, [r4, #8]
 8011616:	7852      	ldrb	r2, [r2, #1]
 8011618:	f803 2b01 	strb.w	r2, [r3], #1
 801161c:	68a2      	ldr	r2, [r4, #8]
 801161e:	7812      	ldrb	r2, [r2, #0]
 8011620:	701a      	strb	r2, [r3, #0]
 8011622:	e7b4      	b.n	801158e <ucdr_deserialize_uint32_t+0x72>
 8011624:	4631      	mov	r1, r6
 8011626:	463a      	mov	r2, r7
 8011628:	4628      	mov	r0, r5
 801162a:	f010 fa02 	bl	8021a32 <memcpy>
 801162e:	68a1      	ldr	r1, [r4, #8]
 8011630:	464a      	mov	r2, r9
 8011632:	19e8      	adds	r0, r5, r7
 8011634:	f010 f9fd 	bl	8021a32 <memcpy>
 8011638:	e7a9      	b.n	801158e <ucdr_deserialize_uint32_t+0x72>
 801163a:	bf00      	nop

0801163c <ucdr_deserialize_endian_uint32_t>:
 801163c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011640:	460e      	mov	r6, r1
 8011642:	2104      	movs	r1, #4
 8011644:	4604      	mov	r4, r0
 8011646:	4615      	mov	r5, r2
 8011648:	f001 fc3c 	bl	8012ec4 <ucdr_buffer_alignment>
 801164c:	4601      	mov	r1, r0
 801164e:	4620      	mov	r0, r4
 8011650:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011654:	f001 fc7a 	bl	8012f4c <ucdr_advance_buffer>
 8011658:	2104      	movs	r1, #4
 801165a:	4620      	mov	r0, r4
 801165c:	f001 fbd2 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011660:	2800      	cmp	r0, #0
 8011662:	d13c      	bne.n	80116de <ucdr_deserialize_endian_uint32_t+0xa2>
 8011664:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011668:	42bb      	cmp	r3, r7
 801166a:	d933      	bls.n	80116d4 <ucdr_deserialize_endian_uint32_t+0x98>
 801166c:	eba3 0807 	sub.w	r8, r3, r7
 8011670:	60a3      	str	r3, [r4, #8]
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	f1c8 0a04 	rsb	sl, r8, #4
 8011678:	4443      	add	r3, r8
 801167a:	6123      	str	r3, [r4, #16]
 801167c:	4651      	mov	r1, sl
 801167e:	4620      	mov	r0, r4
 8011680:	f001 fbcc 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011684:	2800      	cmp	r0, #0
 8011686:	d048      	beq.n	801171a <ucdr_deserialize_endian_uint32_t+0xde>
 8011688:	2e01      	cmp	r6, #1
 801168a:	d061      	beq.n	8011750 <ucdr_deserialize_endian_uint32_t+0x114>
 801168c:	78fb      	ldrb	r3, [r7, #3]
 801168e:	702b      	strb	r3, [r5, #0]
 8011690:	f1b8 0f00 	cmp.w	r8, #0
 8011694:	d050      	beq.n	8011738 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011696:	78bb      	ldrb	r3, [r7, #2]
 8011698:	706b      	strb	r3, [r5, #1]
 801169a:	f1b8 0f01 	cmp.w	r8, #1
 801169e:	f105 0302 	add.w	r3, r5, #2
 80116a2:	d04d      	beq.n	8011740 <ucdr_deserialize_endian_uint32_t+0x104>
 80116a4:	787b      	ldrb	r3, [r7, #1]
 80116a6:	70ab      	strb	r3, [r5, #2]
 80116a8:	f1b8 0f02 	cmp.w	r8, #2
 80116ac:	f105 0303 	add.w	r3, r5, #3
 80116b0:	d04a      	beq.n	8011748 <ucdr_deserialize_endian_uint32_t+0x10c>
 80116b2:	783b      	ldrb	r3, [r7, #0]
 80116b4:	70eb      	strb	r3, [r5, #3]
 80116b6:	6923      	ldr	r3, [r4, #16]
 80116b8:	68a2      	ldr	r2, [r4, #8]
 80116ba:	7da0      	ldrb	r0, [r4, #22]
 80116bc:	2104      	movs	r1, #4
 80116be:	3304      	adds	r3, #4
 80116c0:	4452      	add	r2, sl
 80116c2:	eba3 0308 	sub.w	r3, r3, r8
 80116c6:	7561      	strb	r1, [r4, #21]
 80116c8:	60a2      	str	r2, [r4, #8]
 80116ca:	6123      	str	r3, [r4, #16]
 80116cc:	f080 0001 	eor.w	r0, r0, #1
 80116d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d4:	2104      	movs	r1, #4
 80116d6:	4620      	mov	r0, r4
 80116d8:	f001 fba0 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80116dc:	b1a8      	cbz	r0, 801170a <ucdr_deserialize_endian_uint32_t+0xce>
 80116de:	2e01      	cmp	r6, #1
 80116e0:	68a3      	ldr	r3, [r4, #8]
 80116e2:	d017      	beq.n	8011714 <ucdr_deserialize_endian_uint32_t+0xd8>
 80116e4:	78db      	ldrb	r3, [r3, #3]
 80116e6:	702b      	strb	r3, [r5, #0]
 80116e8:	68a3      	ldr	r3, [r4, #8]
 80116ea:	789b      	ldrb	r3, [r3, #2]
 80116ec:	706b      	strb	r3, [r5, #1]
 80116ee:	68a3      	ldr	r3, [r4, #8]
 80116f0:	785b      	ldrb	r3, [r3, #1]
 80116f2:	70ab      	strb	r3, [r5, #2]
 80116f4:	68a3      	ldr	r3, [r4, #8]
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	70eb      	strb	r3, [r5, #3]
 80116fa:	68a2      	ldr	r2, [r4, #8]
 80116fc:	6923      	ldr	r3, [r4, #16]
 80116fe:	3204      	adds	r2, #4
 8011700:	3304      	adds	r3, #4
 8011702:	2104      	movs	r1, #4
 8011704:	60a2      	str	r2, [r4, #8]
 8011706:	6123      	str	r3, [r4, #16]
 8011708:	7561      	strb	r1, [r4, #21]
 801170a:	7da0      	ldrb	r0, [r4, #22]
 801170c:	f080 0001 	eor.w	r0, r0, #1
 8011710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	602b      	str	r3, [r5, #0]
 8011718:	e7ef      	b.n	80116fa <ucdr_deserialize_endian_uint32_t+0xbe>
 801171a:	68a2      	ldr	r2, [r4, #8]
 801171c:	6923      	ldr	r3, [r4, #16]
 801171e:	7da0      	ldrb	r0, [r4, #22]
 8011720:	f884 9015 	strb.w	r9, [r4, #21]
 8011724:	eba2 0208 	sub.w	r2, r2, r8
 8011728:	eba3 0308 	sub.w	r3, r3, r8
 801172c:	60a2      	str	r2, [r4, #8]
 801172e:	6123      	str	r3, [r4, #16]
 8011730:	f080 0001 	eor.w	r0, r0, #1
 8011734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011738:	68a3      	ldr	r3, [r4, #8]
 801173a:	789b      	ldrb	r3, [r3, #2]
 801173c:	706b      	strb	r3, [r5, #1]
 801173e:	1cab      	adds	r3, r5, #2
 8011740:	68a2      	ldr	r2, [r4, #8]
 8011742:	7852      	ldrb	r2, [r2, #1]
 8011744:	f803 2b01 	strb.w	r2, [r3], #1
 8011748:	68a2      	ldr	r2, [r4, #8]
 801174a:	7812      	ldrb	r2, [r2, #0]
 801174c:	701a      	strb	r2, [r3, #0]
 801174e:	e7b2      	b.n	80116b6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011750:	4639      	mov	r1, r7
 8011752:	4642      	mov	r2, r8
 8011754:	4628      	mov	r0, r5
 8011756:	f010 f96c 	bl	8021a32 <memcpy>
 801175a:	68a1      	ldr	r1, [r4, #8]
 801175c:	4652      	mov	r2, sl
 801175e:	eb05 0008 	add.w	r0, r5, r8
 8011762:	f010 f966 	bl	8021a32 <memcpy>
 8011766:	e7a6      	b.n	80116b6 <ucdr_deserialize_endian_uint32_t+0x7a>

08011768 <ucdr_serialize_uint64_t>:
 8011768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801176c:	2108      	movs	r1, #8
 801176e:	b082      	sub	sp, #8
 8011770:	4604      	mov	r4, r0
 8011772:	e9cd 2300 	strd	r2, r3, [sp]
 8011776:	f001 fba5 	bl	8012ec4 <ucdr_buffer_alignment>
 801177a:	4601      	mov	r1, r0
 801177c:	4620      	mov	r0, r4
 801177e:	7d67      	ldrb	r7, [r4, #21]
 8011780:	f001 fbe4 	bl	8012f4c <ucdr_advance_buffer>
 8011784:	2108      	movs	r1, #8
 8011786:	4620      	mov	r0, r4
 8011788:	f001 fb3c 	bl	8012e04 <ucdr_check_buffer_available_for>
 801178c:	2800      	cmp	r0, #0
 801178e:	d14e      	bne.n	801182e <ucdr_serialize_uint64_t+0xc6>
 8011790:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011794:	42ab      	cmp	r3, r5
 8011796:	d945      	bls.n	8011824 <ucdr_serialize_uint64_t+0xbc>
 8011798:	1b5e      	subs	r6, r3, r5
 801179a:	60a3      	str	r3, [r4, #8]
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	f1c6 0808 	rsb	r8, r6, #8
 80117a2:	4433      	add	r3, r6
 80117a4:	6123      	str	r3, [r4, #16]
 80117a6:	4641      	mov	r1, r8
 80117a8:	4620      	mov	r0, r4
 80117aa:	f001 fb37 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80117ae:	2800      	cmp	r0, #0
 80117b0:	d074      	beq.n	801189c <ucdr_serialize_uint64_t+0x134>
 80117b2:	7d23      	ldrb	r3, [r4, #20]
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	f000 809b 	beq.w	80118f0 <ucdr_serialize_uint64_t+0x188>
 80117ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117be:	702b      	strb	r3, [r5, #0]
 80117c0:	2e00      	cmp	r6, #0
 80117c2:	d078      	beq.n	80118b6 <ucdr_serialize_uint64_t+0x14e>
 80117c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117c8:	706b      	strb	r3, [r5, #1]
 80117ca:	2e01      	cmp	r6, #1
 80117cc:	d077      	beq.n	80118be <ucdr_serialize_uint64_t+0x156>
 80117ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80117d2:	70ab      	strb	r3, [r5, #2]
 80117d4:	2e02      	cmp	r6, #2
 80117d6:	d076      	beq.n	80118c6 <ucdr_serialize_uint64_t+0x15e>
 80117d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117dc:	70eb      	strb	r3, [r5, #3]
 80117de:	2e03      	cmp	r6, #3
 80117e0:	d075      	beq.n	80118ce <ucdr_serialize_uint64_t+0x166>
 80117e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80117e6:	712b      	strb	r3, [r5, #4]
 80117e8:	2e04      	cmp	r6, #4
 80117ea:	d074      	beq.n	80118d6 <ucdr_serialize_uint64_t+0x16e>
 80117ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80117f0:	716b      	strb	r3, [r5, #5]
 80117f2:	2e05      	cmp	r6, #5
 80117f4:	d073      	beq.n	80118de <ucdr_serialize_uint64_t+0x176>
 80117f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80117fa:	71ab      	strb	r3, [r5, #6]
 80117fc:	2e06      	cmp	r6, #6
 80117fe:	d072      	beq.n	80118e6 <ucdr_serialize_uint64_t+0x17e>
 8011800:	f89d 3000 	ldrb.w	r3, [sp]
 8011804:	71eb      	strb	r3, [r5, #7]
 8011806:	6923      	ldr	r3, [r4, #16]
 8011808:	68a2      	ldr	r2, [r4, #8]
 801180a:	7da0      	ldrb	r0, [r4, #22]
 801180c:	3308      	adds	r3, #8
 801180e:	1b9e      	subs	r6, r3, r6
 8011810:	4442      	add	r2, r8
 8011812:	2308      	movs	r3, #8
 8011814:	f080 0001 	eor.w	r0, r0, #1
 8011818:	60a2      	str	r2, [r4, #8]
 801181a:	6126      	str	r6, [r4, #16]
 801181c:	7563      	strb	r3, [r4, #21]
 801181e:	b002      	add	sp, #8
 8011820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011824:	2108      	movs	r1, #8
 8011826:	4620      	mov	r0, r4
 8011828:	f001 faf8 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 801182c:	b350      	cbz	r0, 8011884 <ucdr_serialize_uint64_t+0x11c>
 801182e:	7d23      	ldrb	r3, [r4, #20]
 8011830:	2b01      	cmp	r3, #1
 8011832:	d02d      	beq.n	8011890 <ucdr_serialize_uint64_t+0x128>
 8011834:	68a3      	ldr	r3, [r4, #8]
 8011836:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801183a:	701a      	strb	r2, [r3, #0]
 801183c:	68a3      	ldr	r3, [r4, #8]
 801183e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011842:	705a      	strb	r2, [r3, #1]
 8011844:	68a3      	ldr	r3, [r4, #8]
 8011846:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801184a:	709a      	strb	r2, [r3, #2]
 801184c:	68a3      	ldr	r3, [r4, #8]
 801184e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011852:	70da      	strb	r2, [r3, #3]
 8011854:	68a3      	ldr	r3, [r4, #8]
 8011856:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801185a:	711a      	strb	r2, [r3, #4]
 801185c:	68a3      	ldr	r3, [r4, #8]
 801185e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011862:	715a      	strb	r2, [r3, #5]
 8011864:	68a3      	ldr	r3, [r4, #8]
 8011866:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801186a:	719a      	strb	r2, [r3, #6]
 801186c:	68a3      	ldr	r3, [r4, #8]
 801186e:	f89d 2000 	ldrb.w	r2, [sp]
 8011872:	71da      	strb	r2, [r3, #7]
 8011874:	68a2      	ldr	r2, [r4, #8]
 8011876:	6923      	ldr	r3, [r4, #16]
 8011878:	3208      	adds	r2, #8
 801187a:	3308      	adds	r3, #8
 801187c:	2108      	movs	r1, #8
 801187e:	60a2      	str	r2, [r4, #8]
 8011880:	6123      	str	r3, [r4, #16]
 8011882:	7561      	strb	r1, [r4, #21]
 8011884:	7da0      	ldrb	r0, [r4, #22]
 8011886:	f080 0001 	eor.w	r0, r0, #1
 801188a:	b002      	add	sp, #8
 801188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011890:	466b      	mov	r3, sp
 8011892:	cb03      	ldmia	r3!, {r0, r1}
 8011894:	68a3      	ldr	r3, [r4, #8]
 8011896:	6018      	str	r0, [r3, #0]
 8011898:	6059      	str	r1, [r3, #4]
 801189a:	e7eb      	b.n	8011874 <ucdr_serialize_uint64_t+0x10c>
 801189c:	68a2      	ldr	r2, [r4, #8]
 801189e:	6923      	ldr	r3, [r4, #16]
 80118a0:	7da0      	ldrb	r0, [r4, #22]
 80118a2:	7567      	strb	r7, [r4, #21]
 80118a4:	1b92      	subs	r2, r2, r6
 80118a6:	1b9b      	subs	r3, r3, r6
 80118a8:	f080 0001 	eor.w	r0, r0, #1
 80118ac:	60a2      	str	r2, [r4, #8]
 80118ae:	6123      	str	r3, [r4, #16]
 80118b0:	b002      	add	sp, #8
 80118b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b6:	68a3      	ldr	r3, [r4, #8]
 80118b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80118bc:	701a      	strb	r2, [r3, #0]
 80118be:	68a3      	ldr	r3, [r4, #8]
 80118c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80118c4:	701a      	strb	r2, [r3, #0]
 80118c6:	68a3      	ldr	r3, [r4, #8]
 80118c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80118cc:	701a      	strb	r2, [r3, #0]
 80118ce:	68a3      	ldr	r3, [r4, #8]
 80118d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80118d4:	701a      	strb	r2, [r3, #0]
 80118d6:	68a3      	ldr	r3, [r4, #8]
 80118d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80118dc:	701a      	strb	r2, [r3, #0]
 80118de:	68a3      	ldr	r3, [r4, #8]
 80118e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80118e4:	701a      	strb	r2, [r3, #0]
 80118e6:	68a3      	ldr	r3, [r4, #8]
 80118e8:	f89d 2000 	ldrb.w	r2, [sp]
 80118ec:	701a      	strb	r2, [r3, #0]
 80118ee:	e78a      	b.n	8011806 <ucdr_serialize_uint64_t+0x9e>
 80118f0:	4628      	mov	r0, r5
 80118f2:	466d      	mov	r5, sp
 80118f4:	4629      	mov	r1, r5
 80118f6:	4632      	mov	r2, r6
 80118f8:	f010 f89b 	bl	8021a32 <memcpy>
 80118fc:	68a0      	ldr	r0, [r4, #8]
 80118fe:	4642      	mov	r2, r8
 8011900:	19a9      	adds	r1, r5, r6
 8011902:	f010 f896 	bl	8021a32 <memcpy>
 8011906:	e77e      	b.n	8011806 <ucdr_serialize_uint64_t+0x9e>

08011908 <ucdr_deserialize_uint64_t>:
 8011908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801190c:	460d      	mov	r5, r1
 801190e:	2108      	movs	r1, #8
 8011910:	4604      	mov	r4, r0
 8011912:	f001 fad7 	bl	8012ec4 <ucdr_buffer_alignment>
 8011916:	4601      	mov	r1, r0
 8011918:	4620      	mov	r0, r4
 801191a:	f894 9015 	ldrb.w	r9, [r4, #21]
 801191e:	f001 fb15 	bl	8012f4c <ucdr_advance_buffer>
 8011922:	2108      	movs	r1, #8
 8011924:	4620      	mov	r0, r4
 8011926:	f001 fa6d 	bl	8012e04 <ucdr_check_buffer_available_for>
 801192a:	2800      	cmp	r0, #0
 801192c:	d151      	bne.n	80119d2 <ucdr_deserialize_uint64_t+0xca>
 801192e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011932:	42be      	cmp	r6, r7
 8011934:	d948      	bls.n	80119c8 <ucdr_deserialize_uint64_t+0xc0>
 8011936:	6923      	ldr	r3, [r4, #16]
 8011938:	60a6      	str	r6, [r4, #8]
 801193a:	1bf6      	subs	r6, r6, r7
 801193c:	4433      	add	r3, r6
 801193e:	f1c6 0808 	rsb	r8, r6, #8
 8011942:	6123      	str	r3, [r4, #16]
 8011944:	4641      	mov	r1, r8
 8011946:	4620      	mov	r0, r4
 8011948:	f001 fa68 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 801194c:	2800      	cmp	r0, #0
 801194e:	d06d      	beq.n	8011a2c <ucdr_deserialize_uint64_t+0x124>
 8011950:	7d23      	ldrb	r3, [r4, #20]
 8011952:	2b01      	cmp	r3, #1
 8011954:	f000 8093 	beq.w	8011a7e <ucdr_deserialize_uint64_t+0x176>
 8011958:	79fb      	ldrb	r3, [r7, #7]
 801195a:	702b      	strb	r3, [r5, #0]
 801195c:	2e00      	cmp	r6, #0
 801195e:	d072      	beq.n	8011a46 <ucdr_deserialize_uint64_t+0x13e>
 8011960:	79bb      	ldrb	r3, [r7, #6]
 8011962:	706b      	strb	r3, [r5, #1]
 8011964:	2e01      	cmp	r6, #1
 8011966:	f105 0302 	add.w	r3, r5, #2
 801196a:	d070      	beq.n	8011a4e <ucdr_deserialize_uint64_t+0x146>
 801196c:	797b      	ldrb	r3, [r7, #5]
 801196e:	70ab      	strb	r3, [r5, #2]
 8011970:	2e02      	cmp	r6, #2
 8011972:	f105 0303 	add.w	r3, r5, #3
 8011976:	d06e      	beq.n	8011a56 <ucdr_deserialize_uint64_t+0x14e>
 8011978:	793b      	ldrb	r3, [r7, #4]
 801197a:	70eb      	strb	r3, [r5, #3]
 801197c:	2e03      	cmp	r6, #3
 801197e:	f105 0304 	add.w	r3, r5, #4
 8011982:	d06c      	beq.n	8011a5e <ucdr_deserialize_uint64_t+0x156>
 8011984:	78fb      	ldrb	r3, [r7, #3]
 8011986:	712b      	strb	r3, [r5, #4]
 8011988:	2e04      	cmp	r6, #4
 801198a:	f105 0305 	add.w	r3, r5, #5
 801198e:	d06a      	beq.n	8011a66 <ucdr_deserialize_uint64_t+0x15e>
 8011990:	78bb      	ldrb	r3, [r7, #2]
 8011992:	716b      	strb	r3, [r5, #5]
 8011994:	2e05      	cmp	r6, #5
 8011996:	f105 0306 	add.w	r3, r5, #6
 801199a:	d068      	beq.n	8011a6e <ucdr_deserialize_uint64_t+0x166>
 801199c:	787b      	ldrb	r3, [r7, #1]
 801199e:	71ab      	strb	r3, [r5, #6]
 80119a0:	2e06      	cmp	r6, #6
 80119a2:	f105 0307 	add.w	r3, r5, #7
 80119a6:	d066      	beq.n	8011a76 <ucdr_deserialize_uint64_t+0x16e>
 80119a8:	783b      	ldrb	r3, [r7, #0]
 80119aa:	71eb      	strb	r3, [r5, #7]
 80119ac:	6923      	ldr	r3, [r4, #16]
 80119ae:	68a2      	ldr	r2, [r4, #8]
 80119b0:	7da0      	ldrb	r0, [r4, #22]
 80119b2:	3308      	adds	r3, #8
 80119b4:	1b9e      	subs	r6, r3, r6
 80119b6:	2308      	movs	r3, #8
 80119b8:	4442      	add	r2, r8
 80119ba:	7563      	strb	r3, [r4, #21]
 80119bc:	60a2      	str	r2, [r4, #8]
 80119be:	6126      	str	r6, [r4, #16]
 80119c0:	f080 0001 	eor.w	r0, r0, #1
 80119c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119c8:	2108      	movs	r1, #8
 80119ca:	4620      	mov	r0, r4
 80119cc:	f001 fa26 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80119d0:	b310      	cbz	r0, 8011a18 <ucdr_deserialize_uint64_t+0x110>
 80119d2:	7d23      	ldrb	r3, [r4, #20]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	68a3      	ldr	r3, [r4, #8]
 80119d8:	d023      	beq.n	8011a22 <ucdr_deserialize_uint64_t+0x11a>
 80119da:	79db      	ldrb	r3, [r3, #7]
 80119dc:	702b      	strb	r3, [r5, #0]
 80119de:	68a3      	ldr	r3, [r4, #8]
 80119e0:	799b      	ldrb	r3, [r3, #6]
 80119e2:	706b      	strb	r3, [r5, #1]
 80119e4:	68a3      	ldr	r3, [r4, #8]
 80119e6:	795b      	ldrb	r3, [r3, #5]
 80119e8:	70ab      	strb	r3, [r5, #2]
 80119ea:	68a3      	ldr	r3, [r4, #8]
 80119ec:	791b      	ldrb	r3, [r3, #4]
 80119ee:	70eb      	strb	r3, [r5, #3]
 80119f0:	68a3      	ldr	r3, [r4, #8]
 80119f2:	78db      	ldrb	r3, [r3, #3]
 80119f4:	712b      	strb	r3, [r5, #4]
 80119f6:	68a3      	ldr	r3, [r4, #8]
 80119f8:	789b      	ldrb	r3, [r3, #2]
 80119fa:	716b      	strb	r3, [r5, #5]
 80119fc:	68a3      	ldr	r3, [r4, #8]
 80119fe:	785b      	ldrb	r3, [r3, #1]
 8011a00:	71ab      	strb	r3, [r5, #6]
 8011a02:	68a3      	ldr	r3, [r4, #8]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	71eb      	strb	r3, [r5, #7]
 8011a08:	68a2      	ldr	r2, [r4, #8]
 8011a0a:	6923      	ldr	r3, [r4, #16]
 8011a0c:	3208      	adds	r2, #8
 8011a0e:	3308      	adds	r3, #8
 8011a10:	2108      	movs	r1, #8
 8011a12:	60a2      	str	r2, [r4, #8]
 8011a14:	6123      	str	r3, [r4, #16]
 8011a16:	7561      	strb	r1, [r4, #21]
 8011a18:	7da0      	ldrb	r0, [r4, #22]
 8011a1a:	f080 0001 	eor.w	r0, r0, #1
 8011a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	606b      	str	r3, [r5, #4]
 8011a28:	602a      	str	r2, [r5, #0]
 8011a2a:	e7ed      	b.n	8011a08 <ucdr_deserialize_uint64_t+0x100>
 8011a2c:	68a2      	ldr	r2, [r4, #8]
 8011a2e:	6923      	ldr	r3, [r4, #16]
 8011a30:	7da0      	ldrb	r0, [r4, #22]
 8011a32:	f884 9015 	strb.w	r9, [r4, #21]
 8011a36:	1b92      	subs	r2, r2, r6
 8011a38:	1b9b      	subs	r3, r3, r6
 8011a3a:	60a2      	str	r2, [r4, #8]
 8011a3c:	6123      	str	r3, [r4, #16]
 8011a3e:	f080 0001 	eor.w	r0, r0, #1
 8011a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a46:	68a3      	ldr	r3, [r4, #8]
 8011a48:	799b      	ldrb	r3, [r3, #6]
 8011a4a:	706b      	strb	r3, [r5, #1]
 8011a4c:	1cab      	adds	r3, r5, #2
 8011a4e:	68a2      	ldr	r2, [r4, #8]
 8011a50:	7952      	ldrb	r2, [r2, #5]
 8011a52:	f803 2b01 	strb.w	r2, [r3], #1
 8011a56:	68a2      	ldr	r2, [r4, #8]
 8011a58:	7912      	ldrb	r2, [r2, #4]
 8011a5a:	f803 2b01 	strb.w	r2, [r3], #1
 8011a5e:	68a2      	ldr	r2, [r4, #8]
 8011a60:	78d2      	ldrb	r2, [r2, #3]
 8011a62:	f803 2b01 	strb.w	r2, [r3], #1
 8011a66:	68a2      	ldr	r2, [r4, #8]
 8011a68:	7892      	ldrb	r2, [r2, #2]
 8011a6a:	f803 2b01 	strb.w	r2, [r3], #1
 8011a6e:	68a2      	ldr	r2, [r4, #8]
 8011a70:	7852      	ldrb	r2, [r2, #1]
 8011a72:	f803 2b01 	strb.w	r2, [r3], #1
 8011a76:	68a2      	ldr	r2, [r4, #8]
 8011a78:	7812      	ldrb	r2, [r2, #0]
 8011a7a:	701a      	strb	r2, [r3, #0]
 8011a7c:	e796      	b.n	80119ac <ucdr_deserialize_uint64_t+0xa4>
 8011a7e:	4639      	mov	r1, r7
 8011a80:	4632      	mov	r2, r6
 8011a82:	4628      	mov	r0, r5
 8011a84:	f00f ffd5 	bl	8021a32 <memcpy>
 8011a88:	68a1      	ldr	r1, [r4, #8]
 8011a8a:	4642      	mov	r2, r8
 8011a8c:	19a8      	adds	r0, r5, r6
 8011a8e:	f00f ffd0 	bl	8021a32 <memcpy>
 8011a92:	e78b      	b.n	80119ac <ucdr_deserialize_uint64_t+0xa4>

08011a94 <ucdr_serialize_int16_t>:
 8011a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a98:	b082      	sub	sp, #8
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	2102      	movs	r1, #2
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011aa4:	f001 fa0e 	bl	8012ec4 <ucdr_buffer_alignment>
 8011aa8:	4601      	mov	r1, r0
 8011aaa:	4620      	mov	r0, r4
 8011aac:	7d67      	ldrb	r7, [r4, #21]
 8011aae:	f001 fa4d 	bl	8012f4c <ucdr_advance_buffer>
 8011ab2:	2102      	movs	r1, #2
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	f001 f9a5 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011aba:	bb78      	cbnz	r0, 8011b1c <ucdr_serialize_int16_t+0x88>
 8011abc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011ac0:	42ab      	cmp	r3, r5
 8011ac2:	d926      	bls.n	8011b12 <ucdr_serialize_int16_t+0x7e>
 8011ac4:	1b5e      	subs	r6, r3, r5
 8011ac6:	60a3      	str	r3, [r4, #8]
 8011ac8:	6923      	ldr	r3, [r4, #16]
 8011aca:	f1c6 0802 	rsb	r8, r6, #2
 8011ace:	4433      	add	r3, r6
 8011ad0:	6123      	str	r3, [r4, #16]
 8011ad2:	4641      	mov	r1, r8
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f001 f9a1 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011ada:	2800      	cmp	r0, #0
 8011adc:	d03b      	beq.n	8011b56 <ucdr_serialize_int16_t+0xc2>
 8011ade:	7d23      	ldrb	r3, [r4, #20]
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d04a      	beq.n	8011b7a <ucdr_serialize_int16_t+0xe6>
 8011ae4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ae8:	702b      	strb	r3, [r5, #0]
 8011aea:	2e00      	cmp	r6, #0
 8011aec:	d040      	beq.n	8011b70 <ucdr_serialize_int16_t+0xdc>
 8011aee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011af2:	706b      	strb	r3, [r5, #1]
 8011af4:	6923      	ldr	r3, [r4, #16]
 8011af6:	68a2      	ldr	r2, [r4, #8]
 8011af8:	7da0      	ldrb	r0, [r4, #22]
 8011afa:	3302      	adds	r3, #2
 8011afc:	1b9e      	subs	r6, r3, r6
 8011afe:	4442      	add	r2, r8
 8011b00:	2302      	movs	r3, #2
 8011b02:	f080 0001 	eor.w	r0, r0, #1
 8011b06:	60a2      	str	r2, [r4, #8]
 8011b08:	6126      	str	r6, [r4, #16]
 8011b0a:	7563      	strb	r3, [r4, #21]
 8011b0c:	b002      	add	sp, #8
 8011b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b12:	2102      	movs	r1, #2
 8011b14:	4620      	mov	r0, r4
 8011b16:	f001 f981 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011b1a:	b190      	cbz	r0, 8011b42 <ucdr_serialize_int16_t+0xae>
 8011b1c:	7d23      	ldrb	r3, [r4, #20]
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	68a3      	ldr	r3, [r4, #8]
 8011b22:	d014      	beq.n	8011b4e <ucdr_serialize_int16_t+0xba>
 8011b24:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b28:	701a      	strb	r2, [r3, #0]
 8011b2a:	68a3      	ldr	r3, [r4, #8]
 8011b2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b30:	705a      	strb	r2, [r3, #1]
 8011b32:	68a2      	ldr	r2, [r4, #8]
 8011b34:	6923      	ldr	r3, [r4, #16]
 8011b36:	3202      	adds	r2, #2
 8011b38:	3302      	adds	r3, #2
 8011b3a:	2102      	movs	r1, #2
 8011b3c:	60a2      	str	r2, [r4, #8]
 8011b3e:	6123      	str	r3, [r4, #16]
 8011b40:	7561      	strb	r1, [r4, #21]
 8011b42:	7da0      	ldrb	r0, [r4, #22]
 8011b44:	f080 0001 	eor.w	r0, r0, #1
 8011b48:	b002      	add	sp, #8
 8011b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b4e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011b52:	801a      	strh	r2, [r3, #0]
 8011b54:	e7ed      	b.n	8011b32 <ucdr_serialize_int16_t+0x9e>
 8011b56:	68a2      	ldr	r2, [r4, #8]
 8011b58:	6923      	ldr	r3, [r4, #16]
 8011b5a:	7da0      	ldrb	r0, [r4, #22]
 8011b5c:	7567      	strb	r7, [r4, #21]
 8011b5e:	1b92      	subs	r2, r2, r6
 8011b60:	1b9b      	subs	r3, r3, r6
 8011b62:	f080 0001 	eor.w	r0, r0, #1
 8011b66:	60a2      	str	r2, [r4, #8]
 8011b68:	6123      	str	r3, [r4, #16]
 8011b6a:	b002      	add	sp, #8
 8011b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b70:	68a3      	ldr	r3, [r4, #8]
 8011b72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b76:	701a      	strb	r2, [r3, #0]
 8011b78:	e7bc      	b.n	8011af4 <ucdr_serialize_int16_t+0x60>
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f10d 0506 	add.w	r5, sp, #6
 8011b80:	4629      	mov	r1, r5
 8011b82:	4632      	mov	r2, r6
 8011b84:	f00f ff55 	bl	8021a32 <memcpy>
 8011b88:	68a0      	ldr	r0, [r4, #8]
 8011b8a:	4642      	mov	r2, r8
 8011b8c:	19a9      	adds	r1, r5, r6
 8011b8e:	f00f ff50 	bl	8021a32 <memcpy>
 8011b92:	e7af      	b.n	8011af4 <ucdr_serialize_int16_t+0x60>

08011b94 <ucdr_deserialize_int16_t>:
 8011b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b98:	460d      	mov	r5, r1
 8011b9a:	2102      	movs	r1, #2
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	f001 f991 	bl	8012ec4 <ucdr_buffer_alignment>
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011baa:	f001 f9cf 	bl	8012f4c <ucdr_advance_buffer>
 8011bae:	2102      	movs	r1, #2
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	f001 f927 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011bb6:	bb60      	cbnz	r0, 8011c12 <ucdr_deserialize_int16_t+0x7e>
 8011bb8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011bbc:	42be      	cmp	r6, r7
 8011bbe:	d923      	bls.n	8011c08 <ucdr_deserialize_int16_t+0x74>
 8011bc0:	6923      	ldr	r3, [r4, #16]
 8011bc2:	60a6      	str	r6, [r4, #8]
 8011bc4:	1bf6      	subs	r6, r6, r7
 8011bc6:	4433      	add	r3, r6
 8011bc8:	f1c6 0902 	rsb	r9, r6, #2
 8011bcc:	6123      	str	r3, [r4, #16]
 8011bce:	4649      	mov	r1, r9
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f001 f923 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d034      	beq.n	8011c44 <ucdr_deserialize_int16_t+0xb0>
 8011bda:	7d23      	ldrb	r3, [r4, #20]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d042      	beq.n	8011c66 <ucdr_deserialize_int16_t+0xd2>
 8011be0:	787b      	ldrb	r3, [r7, #1]
 8011be2:	702b      	strb	r3, [r5, #0]
 8011be4:	2e00      	cmp	r6, #0
 8011be6:	d03a      	beq.n	8011c5e <ucdr_deserialize_int16_t+0xca>
 8011be8:	783b      	ldrb	r3, [r7, #0]
 8011bea:	706b      	strb	r3, [r5, #1]
 8011bec:	6923      	ldr	r3, [r4, #16]
 8011bee:	68a2      	ldr	r2, [r4, #8]
 8011bf0:	7da0      	ldrb	r0, [r4, #22]
 8011bf2:	2102      	movs	r1, #2
 8011bf4:	3302      	adds	r3, #2
 8011bf6:	444a      	add	r2, r9
 8011bf8:	1b9b      	subs	r3, r3, r6
 8011bfa:	7561      	strb	r1, [r4, #21]
 8011bfc:	60a2      	str	r2, [r4, #8]
 8011bfe:	6123      	str	r3, [r4, #16]
 8011c00:	f080 0001 	eor.w	r0, r0, #1
 8011c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c08:	2102      	movs	r1, #2
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f001 f906 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011c10:	b180      	cbz	r0, 8011c34 <ucdr_deserialize_int16_t+0xa0>
 8011c12:	7d23      	ldrb	r3, [r4, #20]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	68a3      	ldr	r3, [r4, #8]
 8011c18:	d011      	beq.n	8011c3e <ucdr_deserialize_int16_t+0xaa>
 8011c1a:	785b      	ldrb	r3, [r3, #1]
 8011c1c:	702b      	strb	r3, [r5, #0]
 8011c1e:	68a3      	ldr	r3, [r4, #8]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	706b      	strb	r3, [r5, #1]
 8011c24:	68a2      	ldr	r2, [r4, #8]
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	3202      	adds	r2, #2
 8011c2a:	3302      	adds	r3, #2
 8011c2c:	2102      	movs	r1, #2
 8011c2e:	60a2      	str	r2, [r4, #8]
 8011c30:	6123      	str	r3, [r4, #16]
 8011c32:	7561      	strb	r1, [r4, #21]
 8011c34:	7da0      	ldrb	r0, [r4, #22]
 8011c36:	f080 0001 	eor.w	r0, r0, #1
 8011c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c3e:	881b      	ldrh	r3, [r3, #0]
 8011c40:	802b      	strh	r3, [r5, #0]
 8011c42:	e7ef      	b.n	8011c24 <ucdr_deserialize_int16_t+0x90>
 8011c44:	68a2      	ldr	r2, [r4, #8]
 8011c46:	6923      	ldr	r3, [r4, #16]
 8011c48:	7da0      	ldrb	r0, [r4, #22]
 8011c4a:	f884 8015 	strb.w	r8, [r4, #21]
 8011c4e:	1b92      	subs	r2, r2, r6
 8011c50:	1b9b      	subs	r3, r3, r6
 8011c52:	60a2      	str	r2, [r4, #8]
 8011c54:	6123      	str	r3, [r4, #16]
 8011c56:	f080 0001 	eor.w	r0, r0, #1
 8011c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c5e:	68a3      	ldr	r3, [r4, #8]
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	706b      	strb	r3, [r5, #1]
 8011c64:	e7c2      	b.n	8011bec <ucdr_deserialize_int16_t+0x58>
 8011c66:	4639      	mov	r1, r7
 8011c68:	4632      	mov	r2, r6
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	f00f fee1 	bl	8021a32 <memcpy>
 8011c70:	68a1      	ldr	r1, [r4, #8]
 8011c72:	464a      	mov	r2, r9
 8011c74:	19a8      	adds	r0, r5, r6
 8011c76:	f00f fedc 	bl	8021a32 <memcpy>
 8011c7a:	e7b7      	b.n	8011bec <ucdr_deserialize_int16_t+0x58>

08011c7c <ucdr_serialize_int32_t>:
 8011c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c80:	b082      	sub	sp, #8
 8011c82:	4604      	mov	r4, r0
 8011c84:	9101      	str	r1, [sp, #4]
 8011c86:	2104      	movs	r1, #4
 8011c88:	f001 f91c 	bl	8012ec4 <ucdr_buffer_alignment>
 8011c8c:	4601      	mov	r1, r0
 8011c8e:	4620      	mov	r0, r4
 8011c90:	7d67      	ldrb	r7, [r4, #21]
 8011c92:	f001 f95b 	bl	8012f4c <ucdr_advance_buffer>
 8011c96:	2104      	movs	r1, #4
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f001 f8b3 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d139      	bne.n	8011d16 <ucdr_serialize_int32_t+0x9a>
 8011ca2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011ca6:	42ab      	cmp	r3, r5
 8011ca8:	d930      	bls.n	8011d0c <ucdr_serialize_int32_t+0x90>
 8011caa:	1b5e      	subs	r6, r3, r5
 8011cac:	60a3      	str	r3, [r4, #8]
 8011cae:	6923      	ldr	r3, [r4, #16]
 8011cb0:	f1c6 0804 	rsb	r8, r6, #4
 8011cb4:	4433      	add	r3, r6
 8011cb6:	6123      	str	r3, [r4, #16]
 8011cb8:	4641      	mov	r1, r8
 8011cba:	4620      	mov	r0, r4
 8011cbc:	f001 f8ae 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d04c      	beq.n	8011d5e <ucdr_serialize_int32_t+0xe2>
 8011cc4:	7d23      	ldrb	r3, [r4, #20]
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d063      	beq.n	8011d92 <ucdr_serialize_int32_t+0x116>
 8011cca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011cce:	702b      	strb	r3, [r5, #0]
 8011cd0:	2e00      	cmp	r6, #0
 8011cd2:	d051      	beq.n	8011d78 <ucdr_serialize_int32_t+0xfc>
 8011cd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011cd8:	706b      	strb	r3, [r5, #1]
 8011cda:	2e01      	cmp	r6, #1
 8011cdc:	d050      	beq.n	8011d80 <ucdr_serialize_int32_t+0x104>
 8011cde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ce2:	70ab      	strb	r3, [r5, #2]
 8011ce4:	2e02      	cmp	r6, #2
 8011ce6:	d04f      	beq.n	8011d88 <ucdr_serialize_int32_t+0x10c>
 8011ce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011cec:	70eb      	strb	r3, [r5, #3]
 8011cee:	6923      	ldr	r3, [r4, #16]
 8011cf0:	68a2      	ldr	r2, [r4, #8]
 8011cf2:	7da0      	ldrb	r0, [r4, #22]
 8011cf4:	3304      	adds	r3, #4
 8011cf6:	1b9e      	subs	r6, r3, r6
 8011cf8:	4442      	add	r2, r8
 8011cfa:	2304      	movs	r3, #4
 8011cfc:	f080 0001 	eor.w	r0, r0, #1
 8011d00:	60a2      	str	r2, [r4, #8]
 8011d02:	6126      	str	r6, [r4, #16]
 8011d04:	7563      	strb	r3, [r4, #21]
 8011d06:	b002      	add	sp, #8
 8011d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d0c:	2104      	movs	r1, #4
 8011d0e:	4620      	mov	r0, r4
 8011d10:	f001 f884 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011d14:	b1d0      	cbz	r0, 8011d4c <ucdr_serialize_int32_t+0xd0>
 8011d16:	7d23      	ldrb	r3, [r4, #20]
 8011d18:	2b01      	cmp	r3, #1
 8011d1a:	68a3      	ldr	r3, [r4, #8]
 8011d1c:	d01c      	beq.n	8011d58 <ucdr_serialize_int32_t+0xdc>
 8011d1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011d22:	701a      	strb	r2, [r3, #0]
 8011d24:	68a3      	ldr	r3, [r4, #8]
 8011d26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d2a:	705a      	strb	r2, [r3, #1]
 8011d2c:	68a3      	ldr	r3, [r4, #8]
 8011d2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011d32:	709a      	strb	r2, [r3, #2]
 8011d34:	68a3      	ldr	r3, [r4, #8]
 8011d36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011d3a:	70da      	strb	r2, [r3, #3]
 8011d3c:	68a2      	ldr	r2, [r4, #8]
 8011d3e:	6923      	ldr	r3, [r4, #16]
 8011d40:	3204      	adds	r2, #4
 8011d42:	3304      	adds	r3, #4
 8011d44:	2104      	movs	r1, #4
 8011d46:	60a2      	str	r2, [r4, #8]
 8011d48:	6123      	str	r3, [r4, #16]
 8011d4a:	7561      	strb	r1, [r4, #21]
 8011d4c:	7da0      	ldrb	r0, [r4, #22]
 8011d4e:	f080 0001 	eor.w	r0, r0, #1
 8011d52:	b002      	add	sp, #8
 8011d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d58:	9a01      	ldr	r2, [sp, #4]
 8011d5a:	601a      	str	r2, [r3, #0]
 8011d5c:	e7ee      	b.n	8011d3c <ucdr_serialize_int32_t+0xc0>
 8011d5e:	68a2      	ldr	r2, [r4, #8]
 8011d60:	6923      	ldr	r3, [r4, #16]
 8011d62:	7da0      	ldrb	r0, [r4, #22]
 8011d64:	7567      	strb	r7, [r4, #21]
 8011d66:	1b92      	subs	r2, r2, r6
 8011d68:	1b9b      	subs	r3, r3, r6
 8011d6a:	f080 0001 	eor.w	r0, r0, #1
 8011d6e:	60a2      	str	r2, [r4, #8]
 8011d70:	6123      	str	r3, [r4, #16]
 8011d72:	b002      	add	sp, #8
 8011d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d78:	68a3      	ldr	r3, [r4, #8]
 8011d7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d7e:	701a      	strb	r2, [r3, #0]
 8011d80:	68a3      	ldr	r3, [r4, #8]
 8011d82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011d86:	701a      	strb	r2, [r3, #0]
 8011d88:	68a3      	ldr	r3, [r4, #8]
 8011d8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011d8e:	701a      	strb	r2, [r3, #0]
 8011d90:	e7ad      	b.n	8011cee <ucdr_serialize_int32_t+0x72>
 8011d92:	4628      	mov	r0, r5
 8011d94:	ad01      	add	r5, sp, #4
 8011d96:	4629      	mov	r1, r5
 8011d98:	4632      	mov	r2, r6
 8011d9a:	f00f fe4a 	bl	8021a32 <memcpy>
 8011d9e:	68a0      	ldr	r0, [r4, #8]
 8011da0:	4642      	mov	r2, r8
 8011da2:	19a9      	adds	r1, r5, r6
 8011da4:	f00f fe45 	bl	8021a32 <memcpy>
 8011da8:	e7a1      	b.n	8011cee <ucdr_serialize_int32_t+0x72>
 8011daa:	bf00      	nop

08011dac <ucdr_deserialize_int32_t>:
 8011dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011db0:	460d      	mov	r5, r1
 8011db2:	2104      	movs	r1, #4
 8011db4:	4604      	mov	r4, r0
 8011db6:	f001 f885 	bl	8012ec4 <ucdr_buffer_alignment>
 8011dba:	4601      	mov	r1, r0
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011dc2:	f001 f8c3 	bl	8012f4c <ucdr_advance_buffer>
 8011dc6:	2104      	movs	r1, #4
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f001 f81b 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011dce:	2800      	cmp	r0, #0
 8011dd0:	d138      	bne.n	8011e44 <ucdr_deserialize_int32_t+0x98>
 8011dd2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011dd6:	42b7      	cmp	r7, r6
 8011dd8:	d92f      	bls.n	8011e3a <ucdr_deserialize_int32_t+0x8e>
 8011dda:	6923      	ldr	r3, [r4, #16]
 8011ddc:	60a7      	str	r7, [r4, #8]
 8011dde:	1bbf      	subs	r7, r7, r6
 8011de0:	443b      	add	r3, r7
 8011de2:	f1c7 0904 	rsb	r9, r7, #4
 8011de6:	6123      	str	r3, [r4, #16]
 8011de8:	4649      	mov	r1, r9
 8011dea:	4620      	mov	r0, r4
 8011dec:	f001 f816 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	d046      	beq.n	8011e82 <ucdr_deserialize_int32_t+0xd6>
 8011df4:	7d23      	ldrb	r3, [r4, #20]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d05c      	beq.n	8011eb4 <ucdr_deserialize_int32_t+0x108>
 8011dfa:	78f3      	ldrb	r3, [r6, #3]
 8011dfc:	702b      	strb	r3, [r5, #0]
 8011dfe:	2f00      	cmp	r7, #0
 8011e00:	d04c      	beq.n	8011e9c <ucdr_deserialize_int32_t+0xf0>
 8011e02:	78b3      	ldrb	r3, [r6, #2]
 8011e04:	706b      	strb	r3, [r5, #1]
 8011e06:	2f01      	cmp	r7, #1
 8011e08:	f105 0302 	add.w	r3, r5, #2
 8011e0c:	d04a      	beq.n	8011ea4 <ucdr_deserialize_int32_t+0xf8>
 8011e0e:	7873      	ldrb	r3, [r6, #1]
 8011e10:	70ab      	strb	r3, [r5, #2]
 8011e12:	2f02      	cmp	r7, #2
 8011e14:	f105 0303 	add.w	r3, r5, #3
 8011e18:	d048      	beq.n	8011eac <ucdr_deserialize_int32_t+0x100>
 8011e1a:	7833      	ldrb	r3, [r6, #0]
 8011e1c:	70eb      	strb	r3, [r5, #3]
 8011e1e:	6923      	ldr	r3, [r4, #16]
 8011e20:	68a2      	ldr	r2, [r4, #8]
 8011e22:	7da0      	ldrb	r0, [r4, #22]
 8011e24:	2104      	movs	r1, #4
 8011e26:	3304      	adds	r3, #4
 8011e28:	444a      	add	r2, r9
 8011e2a:	1bdb      	subs	r3, r3, r7
 8011e2c:	7561      	strb	r1, [r4, #21]
 8011e2e:	60a2      	str	r2, [r4, #8]
 8011e30:	6123      	str	r3, [r4, #16]
 8011e32:	f080 0001 	eor.w	r0, r0, #1
 8011e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e3a:	2104      	movs	r1, #4
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f000 ffed 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011e42:	b1b0      	cbz	r0, 8011e72 <ucdr_deserialize_int32_t+0xc6>
 8011e44:	7d23      	ldrb	r3, [r4, #20]
 8011e46:	2b01      	cmp	r3, #1
 8011e48:	68a3      	ldr	r3, [r4, #8]
 8011e4a:	d017      	beq.n	8011e7c <ucdr_deserialize_int32_t+0xd0>
 8011e4c:	78db      	ldrb	r3, [r3, #3]
 8011e4e:	702b      	strb	r3, [r5, #0]
 8011e50:	68a3      	ldr	r3, [r4, #8]
 8011e52:	789b      	ldrb	r3, [r3, #2]
 8011e54:	706b      	strb	r3, [r5, #1]
 8011e56:	68a3      	ldr	r3, [r4, #8]
 8011e58:	785b      	ldrb	r3, [r3, #1]
 8011e5a:	70ab      	strb	r3, [r5, #2]
 8011e5c:	68a3      	ldr	r3, [r4, #8]
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	70eb      	strb	r3, [r5, #3]
 8011e62:	68a2      	ldr	r2, [r4, #8]
 8011e64:	6923      	ldr	r3, [r4, #16]
 8011e66:	3204      	adds	r2, #4
 8011e68:	3304      	adds	r3, #4
 8011e6a:	2104      	movs	r1, #4
 8011e6c:	60a2      	str	r2, [r4, #8]
 8011e6e:	6123      	str	r3, [r4, #16]
 8011e70:	7561      	strb	r1, [r4, #21]
 8011e72:	7da0      	ldrb	r0, [r4, #22]
 8011e74:	f080 0001 	eor.w	r0, r0, #1
 8011e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	602b      	str	r3, [r5, #0]
 8011e80:	e7ef      	b.n	8011e62 <ucdr_deserialize_int32_t+0xb6>
 8011e82:	68a2      	ldr	r2, [r4, #8]
 8011e84:	6923      	ldr	r3, [r4, #16]
 8011e86:	7da0      	ldrb	r0, [r4, #22]
 8011e88:	f884 8015 	strb.w	r8, [r4, #21]
 8011e8c:	1bd2      	subs	r2, r2, r7
 8011e8e:	1bdb      	subs	r3, r3, r7
 8011e90:	60a2      	str	r2, [r4, #8]
 8011e92:	6123      	str	r3, [r4, #16]
 8011e94:	f080 0001 	eor.w	r0, r0, #1
 8011e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e9c:	68a3      	ldr	r3, [r4, #8]
 8011e9e:	789b      	ldrb	r3, [r3, #2]
 8011ea0:	706b      	strb	r3, [r5, #1]
 8011ea2:	1cab      	adds	r3, r5, #2
 8011ea4:	68a2      	ldr	r2, [r4, #8]
 8011ea6:	7852      	ldrb	r2, [r2, #1]
 8011ea8:	f803 2b01 	strb.w	r2, [r3], #1
 8011eac:	68a2      	ldr	r2, [r4, #8]
 8011eae:	7812      	ldrb	r2, [r2, #0]
 8011eb0:	701a      	strb	r2, [r3, #0]
 8011eb2:	e7b4      	b.n	8011e1e <ucdr_deserialize_int32_t+0x72>
 8011eb4:	4631      	mov	r1, r6
 8011eb6:	463a      	mov	r2, r7
 8011eb8:	4628      	mov	r0, r5
 8011eba:	f00f fdba 	bl	8021a32 <memcpy>
 8011ebe:	68a1      	ldr	r1, [r4, #8]
 8011ec0:	464a      	mov	r2, r9
 8011ec2:	19e8      	adds	r0, r5, r7
 8011ec4:	f00f fdb5 	bl	8021a32 <memcpy>
 8011ec8:	e7a9      	b.n	8011e1e <ucdr_deserialize_int32_t+0x72>
 8011eca:	bf00      	nop

08011ecc <ucdr_serialize_int64_t>:
 8011ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed0:	2108      	movs	r1, #8
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8011eda:	f000 fff3 	bl	8012ec4 <ucdr_buffer_alignment>
 8011ede:	4601      	mov	r1, r0
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	7d67      	ldrb	r7, [r4, #21]
 8011ee4:	f001 f832 	bl	8012f4c <ucdr_advance_buffer>
 8011ee8:	2108      	movs	r1, #8
 8011eea:	4620      	mov	r0, r4
 8011eec:	f000 ff8a 	bl	8012e04 <ucdr_check_buffer_available_for>
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d14e      	bne.n	8011f92 <ucdr_serialize_int64_t+0xc6>
 8011ef4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011ef8:	42ab      	cmp	r3, r5
 8011efa:	d945      	bls.n	8011f88 <ucdr_serialize_int64_t+0xbc>
 8011efc:	1b5e      	subs	r6, r3, r5
 8011efe:	60a3      	str	r3, [r4, #8]
 8011f00:	6923      	ldr	r3, [r4, #16]
 8011f02:	f1c6 0808 	rsb	r8, r6, #8
 8011f06:	4433      	add	r3, r6
 8011f08:	6123      	str	r3, [r4, #16]
 8011f0a:	4641      	mov	r1, r8
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f000 ff85 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d074      	beq.n	8012000 <ucdr_serialize_int64_t+0x134>
 8011f16:	7d23      	ldrb	r3, [r4, #20]
 8011f18:	2b01      	cmp	r3, #1
 8011f1a:	f000 809b 	beq.w	8012054 <ucdr_serialize_int64_t+0x188>
 8011f1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f22:	702b      	strb	r3, [r5, #0]
 8011f24:	2e00      	cmp	r6, #0
 8011f26:	d078      	beq.n	801201a <ucdr_serialize_int64_t+0x14e>
 8011f28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f2c:	706b      	strb	r3, [r5, #1]
 8011f2e:	2e01      	cmp	r6, #1
 8011f30:	d077      	beq.n	8012022 <ucdr_serialize_int64_t+0x156>
 8011f32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f36:	70ab      	strb	r3, [r5, #2]
 8011f38:	2e02      	cmp	r6, #2
 8011f3a:	d076      	beq.n	801202a <ucdr_serialize_int64_t+0x15e>
 8011f3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f40:	70eb      	strb	r3, [r5, #3]
 8011f42:	2e03      	cmp	r6, #3
 8011f44:	d075      	beq.n	8012032 <ucdr_serialize_int64_t+0x166>
 8011f46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011f4a:	712b      	strb	r3, [r5, #4]
 8011f4c:	2e04      	cmp	r6, #4
 8011f4e:	d074      	beq.n	801203a <ucdr_serialize_int64_t+0x16e>
 8011f50:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011f54:	716b      	strb	r3, [r5, #5]
 8011f56:	2e05      	cmp	r6, #5
 8011f58:	d073      	beq.n	8012042 <ucdr_serialize_int64_t+0x176>
 8011f5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011f5e:	71ab      	strb	r3, [r5, #6]
 8011f60:	2e06      	cmp	r6, #6
 8011f62:	d072      	beq.n	801204a <ucdr_serialize_int64_t+0x17e>
 8011f64:	f89d 3000 	ldrb.w	r3, [sp]
 8011f68:	71eb      	strb	r3, [r5, #7]
 8011f6a:	6923      	ldr	r3, [r4, #16]
 8011f6c:	68a2      	ldr	r2, [r4, #8]
 8011f6e:	7da0      	ldrb	r0, [r4, #22]
 8011f70:	3308      	adds	r3, #8
 8011f72:	1b9e      	subs	r6, r3, r6
 8011f74:	4442      	add	r2, r8
 8011f76:	2308      	movs	r3, #8
 8011f78:	f080 0001 	eor.w	r0, r0, #1
 8011f7c:	60a2      	str	r2, [r4, #8]
 8011f7e:	6126      	str	r6, [r4, #16]
 8011f80:	7563      	strb	r3, [r4, #21]
 8011f82:	b002      	add	sp, #8
 8011f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f88:	2108      	movs	r1, #8
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f000 ff46 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8011f90:	b350      	cbz	r0, 8011fe8 <ucdr_serialize_int64_t+0x11c>
 8011f92:	7d23      	ldrb	r3, [r4, #20]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d02d      	beq.n	8011ff4 <ucdr_serialize_int64_t+0x128>
 8011f98:	68a3      	ldr	r3, [r4, #8]
 8011f9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f9e:	701a      	strb	r2, [r3, #0]
 8011fa0:	68a3      	ldr	r3, [r4, #8]
 8011fa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011fa6:	705a      	strb	r2, [r3, #1]
 8011fa8:	68a3      	ldr	r3, [r4, #8]
 8011faa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011fae:	709a      	strb	r2, [r3, #2]
 8011fb0:	68a3      	ldr	r3, [r4, #8]
 8011fb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011fb6:	70da      	strb	r2, [r3, #3]
 8011fb8:	68a3      	ldr	r3, [r4, #8]
 8011fba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011fbe:	711a      	strb	r2, [r3, #4]
 8011fc0:	68a3      	ldr	r3, [r4, #8]
 8011fc2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011fc6:	715a      	strb	r2, [r3, #5]
 8011fc8:	68a3      	ldr	r3, [r4, #8]
 8011fca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011fce:	719a      	strb	r2, [r3, #6]
 8011fd0:	68a3      	ldr	r3, [r4, #8]
 8011fd2:	f89d 2000 	ldrb.w	r2, [sp]
 8011fd6:	71da      	strb	r2, [r3, #7]
 8011fd8:	68a2      	ldr	r2, [r4, #8]
 8011fda:	6923      	ldr	r3, [r4, #16]
 8011fdc:	3208      	adds	r2, #8
 8011fde:	3308      	adds	r3, #8
 8011fe0:	2108      	movs	r1, #8
 8011fe2:	60a2      	str	r2, [r4, #8]
 8011fe4:	6123      	str	r3, [r4, #16]
 8011fe6:	7561      	strb	r1, [r4, #21]
 8011fe8:	7da0      	ldrb	r0, [r4, #22]
 8011fea:	f080 0001 	eor.w	r0, r0, #1
 8011fee:	b002      	add	sp, #8
 8011ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff4:	466b      	mov	r3, sp
 8011ff6:	cb03      	ldmia	r3!, {r0, r1}
 8011ff8:	68a3      	ldr	r3, [r4, #8]
 8011ffa:	6018      	str	r0, [r3, #0]
 8011ffc:	6059      	str	r1, [r3, #4]
 8011ffe:	e7eb      	b.n	8011fd8 <ucdr_serialize_int64_t+0x10c>
 8012000:	68a2      	ldr	r2, [r4, #8]
 8012002:	6923      	ldr	r3, [r4, #16]
 8012004:	7da0      	ldrb	r0, [r4, #22]
 8012006:	7567      	strb	r7, [r4, #21]
 8012008:	1b92      	subs	r2, r2, r6
 801200a:	1b9b      	subs	r3, r3, r6
 801200c:	f080 0001 	eor.w	r0, r0, #1
 8012010:	60a2      	str	r2, [r4, #8]
 8012012:	6123      	str	r3, [r4, #16]
 8012014:	b002      	add	sp, #8
 8012016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201a:	68a3      	ldr	r3, [r4, #8]
 801201c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012020:	701a      	strb	r2, [r3, #0]
 8012022:	68a3      	ldr	r3, [r4, #8]
 8012024:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012028:	701a      	strb	r2, [r3, #0]
 801202a:	68a3      	ldr	r3, [r4, #8]
 801202c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012030:	701a      	strb	r2, [r3, #0]
 8012032:	68a3      	ldr	r3, [r4, #8]
 8012034:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012038:	701a      	strb	r2, [r3, #0]
 801203a:	68a3      	ldr	r3, [r4, #8]
 801203c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	68a3      	ldr	r3, [r4, #8]
 8012044:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012048:	701a      	strb	r2, [r3, #0]
 801204a:	68a3      	ldr	r3, [r4, #8]
 801204c:	f89d 2000 	ldrb.w	r2, [sp]
 8012050:	701a      	strb	r2, [r3, #0]
 8012052:	e78a      	b.n	8011f6a <ucdr_serialize_int64_t+0x9e>
 8012054:	4628      	mov	r0, r5
 8012056:	466d      	mov	r5, sp
 8012058:	4629      	mov	r1, r5
 801205a:	4632      	mov	r2, r6
 801205c:	f00f fce9 	bl	8021a32 <memcpy>
 8012060:	68a0      	ldr	r0, [r4, #8]
 8012062:	4642      	mov	r2, r8
 8012064:	19a9      	adds	r1, r5, r6
 8012066:	f00f fce4 	bl	8021a32 <memcpy>
 801206a:	e77e      	b.n	8011f6a <ucdr_serialize_int64_t+0x9e>

0801206c <ucdr_serialize_endian_int64_t>:
 801206c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012070:	460e      	mov	r6, r1
 8012072:	b083      	sub	sp, #12
 8012074:	2108      	movs	r1, #8
 8012076:	4604      	mov	r4, r0
 8012078:	e9cd 2300 	strd	r2, r3, [sp]
 801207c:	f000 ff22 	bl	8012ec4 <ucdr_buffer_alignment>
 8012080:	4601      	mov	r1, r0
 8012082:	4620      	mov	r0, r4
 8012084:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012088:	f000 ff60 	bl	8012f4c <ucdr_advance_buffer>
 801208c:	2108      	movs	r1, #8
 801208e:	4620      	mov	r0, r4
 8012090:	f000 feb8 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012094:	2800      	cmp	r0, #0
 8012096:	d14d      	bne.n	8012134 <ucdr_serialize_endian_int64_t+0xc8>
 8012098:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 801209c:	42bd      	cmp	r5, r7
 801209e:	d944      	bls.n	801212a <ucdr_serialize_endian_int64_t+0xbe>
 80120a0:	6923      	ldr	r3, [r4, #16]
 80120a2:	60a5      	str	r5, [r4, #8]
 80120a4:	1bed      	subs	r5, r5, r7
 80120a6:	442b      	add	r3, r5
 80120a8:	f1c5 0908 	rsb	r9, r5, #8
 80120ac:	6123      	str	r3, [r4, #16]
 80120ae:	4649      	mov	r1, r9
 80120b0:	4620      	mov	r0, r4
 80120b2:	f000 feb3 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d072      	beq.n	80121a0 <ucdr_serialize_endian_int64_t+0x134>
 80120ba:	2e01      	cmp	r6, #1
 80120bc:	f000 809b 	beq.w	80121f6 <ucdr_serialize_endian_int64_t+0x18a>
 80120c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80120c4:	703b      	strb	r3, [r7, #0]
 80120c6:	2d00      	cmp	r5, #0
 80120c8:	d078      	beq.n	80121bc <ucdr_serialize_endian_int64_t+0x150>
 80120ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80120ce:	707b      	strb	r3, [r7, #1]
 80120d0:	2d01      	cmp	r5, #1
 80120d2:	d077      	beq.n	80121c4 <ucdr_serialize_endian_int64_t+0x158>
 80120d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80120d8:	70bb      	strb	r3, [r7, #2]
 80120da:	2d02      	cmp	r5, #2
 80120dc:	d076      	beq.n	80121cc <ucdr_serialize_endian_int64_t+0x160>
 80120de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80120e2:	70fb      	strb	r3, [r7, #3]
 80120e4:	2d03      	cmp	r5, #3
 80120e6:	d075      	beq.n	80121d4 <ucdr_serialize_endian_int64_t+0x168>
 80120e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80120ec:	713b      	strb	r3, [r7, #4]
 80120ee:	2d04      	cmp	r5, #4
 80120f0:	d074      	beq.n	80121dc <ucdr_serialize_endian_int64_t+0x170>
 80120f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80120f6:	717b      	strb	r3, [r7, #5]
 80120f8:	2d05      	cmp	r5, #5
 80120fa:	d073      	beq.n	80121e4 <ucdr_serialize_endian_int64_t+0x178>
 80120fc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012100:	71bb      	strb	r3, [r7, #6]
 8012102:	2d06      	cmp	r5, #6
 8012104:	d072      	beq.n	80121ec <ucdr_serialize_endian_int64_t+0x180>
 8012106:	f89d 3000 	ldrb.w	r3, [sp]
 801210a:	71fb      	strb	r3, [r7, #7]
 801210c:	6923      	ldr	r3, [r4, #16]
 801210e:	68a2      	ldr	r2, [r4, #8]
 8012110:	7da0      	ldrb	r0, [r4, #22]
 8012112:	3308      	adds	r3, #8
 8012114:	1b5d      	subs	r5, r3, r5
 8012116:	444a      	add	r2, r9
 8012118:	2308      	movs	r3, #8
 801211a:	f080 0001 	eor.w	r0, r0, #1
 801211e:	60a2      	str	r2, [r4, #8]
 8012120:	6125      	str	r5, [r4, #16]
 8012122:	7563      	strb	r3, [r4, #21]
 8012124:	b003      	add	sp, #12
 8012126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801212a:	2108      	movs	r1, #8
 801212c:	4620      	mov	r0, r4
 801212e:	f000 fe75 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012132:	b348      	cbz	r0, 8012188 <ucdr_serialize_endian_int64_t+0x11c>
 8012134:	2e01      	cmp	r6, #1
 8012136:	d02d      	beq.n	8012194 <ucdr_serialize_endian_int64_t+0x128>
 8012138:	68a3      	ldr	r3, [r4, #8]
 801213a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801213e:	701a      	strb	r2, [r3, #0]
 8012140:	68a3      	ldr	r3, [r4, #8]
 8012142:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012146:	705a      	strb	r2, [r3, #1]
 8012148:	68a3      	ldr	r3, [r4, #8]
 801214a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801214e:	709a      	strb	r2, [r3, #2]
 8012150:	68a3      	ldr	r3, [r4, #8]
 8012152:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012156:	70da      	strb	r2, [r3, #3]
 8012158:	68a3      	ldr	r3, [r4, #8]
 801215a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801215e:	711a      	strb	r2, [r3, #4]
 8012160:	68a3      	ldr	r3, [r4, #8]
 8012162:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012166:	715a      	strb	r2, [r3, #5]
 8012168:	68a3      	ldr	r3, [r4, #8]
 801216a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801216e:	719a      	strb	r2, [r3, #6]
 8012170:	68a3      	ldr	r3, [r4, #8]
 8012172:	f89d 2000 	ldrb.w	r2, [sp]
 8012176:	71da      	strb	r2, [r3, #7]
 8012178:	68a2      	ldr	r2, [r4, #8]
 801217a:	6923      	ldr	r3, [r4, #16]
 801217c:	3208      	adds	r2, #8
 801217e:	3308      	adds	r3, #8
 8012180:	2108      	movs	r1, #8
 8012182:	60a2      	str	r2, [r4, #8]
 8012184:	6123      	str	r3, [r4, #16]
 8012186:	7561      	strb	r1, [r4, #21]
 8012188:	7da0      	ldrb	r0, [r4, #22]
 801218a:	f080 0001 	eor.w	r0, r0, #1
 801218e:	b003      	add	sp, #12
 8012190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012194:	466b      	mov	r3, sp
 8012196:	cb03      	ldmia	r3!, {r0, r1}
 8012198:	68a3      	ldr	r3, [r4, #8]
 801219a:	6018      	str	r0, [r3, #0]
 801219c:	6059      	str	r1, [r3, #4]
 801219e:	e7eb      	b.n	8012178 <ucdr_serialize_endian_int64_t+0x10c>
 80121a0:	68a2      	ldr	r2, [r4, #8]
 80121a2:	6923      	ldr	r3, [r4, #16]
 80121a4:	7da0      	ldrb	r0, [r4, #22]
 80121a6:	f884 8015 	strb.w	r8, [r4, #21]
 80121aa:	1b52      	subs	r2, r2, r5
 80121ac:	1b5b      	subs	r3, r3, r5
 80121ae:	f080 0001 	eor.w	r0, r0, #1
 80121b2:	60a2      	str	r2, [r4, #8]
 80121b4:	6123      	str	r3, [r4, #16]
 80121b6:	b003      	add	sp, #12
 80121b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121bc:	68a3      	ldr	r3, [r4, #8]
 80121be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121c2:	701a      	strb	r2, [r3, #0]
 80121c4:	68a3      	ldr	r3, [r4, #8]
 80121c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80121ca:	701a      	strb	r2, [r3, #0]
 80121cc:	68a3      	ldr	r3, [r4, #8]
 80121ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80121d2:	701a      	strb	r2, [r3, #0]
 80121d4:	68a3      	ldr	r3, [r4, #8]
 80121d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80121da:	701a      	strb	r2, [r3, #0]
 80121dc:	68a3      	ldr	r3, [r4, #8]
 80121de:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80121e2:	701a      	strb	r2, [r3, #0]
 80121e4:	68a3      	ldr	r3, [r4, #8]
 80121e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80121ea:	701a      	strb	r2, [r3, #0]
 80121ec:	68a3      	ldr	r3, [r4, #8]
 80121ee:	f89d 2000 	ldrb.w	r2, [sp]
 80121f2:	701a      	strb	r2, [r3, #0]
 80121f4:	e78a      	b.n	801210c <ucdr_serialize_endian_int64_t+0xa0>
 80121f6:	466e      	mov	r6, sp
 80121f8:	4631      	mov	r1, r6
 80121fa:	462a      	mov	r2, r5
 80121fc:	4638      	mov	r0, r7
 80121fe:	f00f fc18 	bl	8021a32 <memcpy>
 8012202:	68a0      	ldr	r0, [r4, #8]
 8012204:	464a      	mov	r2, r9
 8012206:	1971      	adds	r1, r6, r5
 8012208:	f00f fc13 	bl	8021a32 <memcpy>
 801220c:	e77e      	b.n	801210c <ucdr_serialize_endian_int64_t+0xa0>
 801220e:	bf00      	nop

08012210 <ucdr_deserialize_int64_t>:
 8012210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012214:	460d      	mov	r5, r1
 8012216:	2108      	movs	r1, #8
 8012218:	4604      	mov	r4, r0
 801221a:	f000 fe53 	bl	8012ec4 <ucdr_buffer_alignment>
 801221e:	4601      	mov	r1, r0
 8012220:	4620      	mov	r0, r4
 8012222:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012226:	f000 fe91 	bl	8012f4c <ucdr_advance_buffer>
 801222a:	2108      	movs	r1, #8
 801222c:	4620      	mov	r0, r4
 801222e:	f000 fde9 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012232:	2800      	cmp	r0, #0
 8012234:	d151      	bne.n	80122da <ucdr_deserialize_int64_t+0xca>
 8012236:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801223a:	42be      	cmp	r6, r7
 801223c:	d948      	bls.n	80122d0 <ucdr_deserialize_int64_t+0xc0>
 801223e:	6923      	ldr	r3, [r4, #16]
 8012240:	60a6      	str	r6, [r4, #8]
 8012242:	1bf6      	subs	r6, r6, r7
 8012244:	4433      	add	r3, r6
 8012246:	f1c6 0808 	rsb	r8, r6, #8
 801224a:	6123      	str	r3, [r4, #16]
 801224c:	4641      	mov	r1, r8
 801224e:	4620      	mov	r0, r4
 8012250:	f000 fde4 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012254:	2800      	cmp	r0, #0
 8012256:	d06d      	beq.n	8012334 <ucdr_deserialize_int64_t+0x124>
 8012258:	7d23      	ldrb	r3, [r4, #20]
 801225a:	2b01      	cmp	r3, #1
 801225c:	f000 8093 	beq.w	8012386 <ucdr_deserialize_int64_t+0x176>
 8012260:	79fb      	ldrb	r3, [r7, #7]
 8012262:	702b      	strb	r3, [r5, #0]
 8012264:	2e00      	cmp	r6, #0
 8012266:	d072      	beq.n	801234e <ucdr_deserialize_int64_t+0x13e>
 8012268:	79bb      	ldrb	r3, [r7, #6]
 801226a:	706b      	strb	r3, [r5, #1]
 801226c:	2e01      	cmp	r6, #1
 801226e:	f105 0302 	add.w	r3, r5, #2
 8012272:	d070      	beq.n	8012356 <ucdr_deserialize_int64_t+0x146>
 8012274:	797b      	ldrb	r3, [r7, #5]
 8012276:	70ab      	strb	r3, [r5, #2]
 8012278:	2e02      	cmp	r6, #2
 801227a:	f105 0303 	add.w	r3, r5, #3
 801227e:	d06e      	beq.n	801235e <ucdr_deserialize_int64_t+0x14e>
 8012280:	793b      	ldrb	r3, [r7, #4]
 8012282:	70eb      	strb	r3, [r5, #3]
 8012284:	2e03      	cmp	r6, #3
 8012286:	f105 0304 	add.w	r3, r5, #4
 801228a:	d06c      	beq.n	8012366 <ucdr_deserialize_int64_t+0x156>
 801228c:	78fb      	ldrb	r3, [r7, #3]
 801228e:	712b      	strb	r3, [r5, #4]
 8012290:	2e04      	cmp	r6, #4
 8012292:	f105 0305 	add.w	r3, r5, #5
 8012296:	d06a      	beq.n	801236e <ucdr_deserialize_int64_t+0x15e>
 8012298:	78bb      	ldrb	r3, [r7, #2]
 801229a:	716b      	strb	r3, [r5, #5]
 801229c:	2e05      	cmp	r6, #5
 801229e:	f105 0306 	add.w	r3, r5, #6
 80122a2:	d068      	beq.n	8012376 <ucdr_deserialize_int64_t+0x166>
 80122a4:	787b      	ldrb	r3, [r7, #1]
 80122a6:	71ab      	strb	r3, [r5, #6]
 80122a8:	2e06      	cmp	r6, #6
 80122aa:	f105 0307 	add.w	r3, r5, #7
 80122ae:	d066      	beq.n	801237e <ucdr_deserialize_int64_t+0x16e>
 80122b0:	783b      	ldrb	r3, [r7, #0]
 80122b2:	71eb      	strb	r3, [r5, #7]
 80122b4:	6923      	ldr	r3, [r4, #16]
 80122b6:	68a2      	ldr	r2, [r4, #8]
 80122b8:	7da0      	ldrb	r0, [r4, #22]
 80122ba:	3308      	adds	r3, #8
 80122bc:	1b9e      	subs	r6, r3, r6
 80122be:	2308      	movs	r3, #8
 80122c0:	4442      	add	r2, r8
 80122c2:	7563      	strb	r3, [r4, #21]
 80122c4:	60a2      	str	r2, [r4, #8]
 80122c6:	6126      	str	r6, [r4, #16]
 80122c8:	f080 0001 	eor.w	r0, r0, #1
 80122cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122d0:	2108      	movs	r1, #8
 80122d2:	4620      	mov	r0, r4
 80122d4:	f000 fda2 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80122d8:	b310      	cbz	r0, 8012320 <ucdr_deserialize_int64_t+0x110>
 80122da:	7d23      	ldrb	r3, [r4, #20]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	68a3      	ldr	r3, [r4, #8]
 80122e0:	d023      	beq.n	801232a <ucdr_deserialize_int64_t+0x11a>
 80122e2:	79db      	ldrb	r3, [r3, #7]
 80122e4:	702b      	strb	r3, [r5, #0]
 80122e6:	68a3      	ldr	r3, [r4, #8]
 80122e8:	799b      	ldrb	r3, [r3, #6]
 80122ea:	706b      	strb	r3, [r5, #1]
 80122ec:	68a3      	ldr	r3, [r4, #8]
 80122ee:	795b      	ldrb	r3, [r3, #5]
 80122f0:	70ab      	strb	r3, [r5, #2]
 80122f2:	68a3      	ldr	r3, [r4, #8]
 80122f4:	791b      	ldrb	r3, [r3, #4]
 80122f6:	70eb      	strb	r3, [r5, #3]
 80122f8:	68a3      	ldr	r3, [r4, #8]
 80122fa:	78db      	ldrb	r3, [r3, #3]
 80122fc:	712b      	strb	r3, [r5, #4]
 80122fe:	68a3      	ldr	r3, [r4, #8]
 8012300:	789b      	ldrb	r3, [r3, #2]
 8012302:	716b      	strb	r3, [r5, #5]
 8012304:	68a3      	ldr	r3, [r4, #8]
 8012306:	785b      	ldrb	r3, [r3, #1]
 8012308:	71ab      	strb	r3, [r5, #6]
 801230a:	68a3      	ldr	r3, [r4, #8]
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	71eb      	strb	r3, [r5, #7]
 8012310:	68a2      	ldr	r2, [r4, #8]
 8012312:	6923      	ldr	r3, [r4, #16]
 8012314:	3208      	adds	r2, #8
 8012316:	3308      	adds	r3, #8
 8012318:	2108      	movs	r1, #8
 801231a:	60a2      	str	r2, [r4, #8]
 801231c:	6123      	str	r3, [r4, #16]
 801231e:	7561      	strb	r1, [r4, #21]
 8012320:	7da0      	ldrb	r0, [r4, #22]
 8012322:	f080 0001 	eor.w	r0, r0, #1
 8012326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	606b      	str	r3, [r5, #4]
 8012330:	602a      	str	r2, [r5, #0]
 8012332:	e7ed      	b.n	8012310 <ucdr_deserialize_int64_t+0x100>
 8012334:	68a2      	ldr	r2, [r4, #8]
 8012336:	6923      	ldr	r3, [r4, #16]
 8012338:	7da0      	ldrb	r0, [r4, #22]
 801233a:	f884 9015 	strb.w	r9, [r4, #21]
 801233e:	1b92      	subs	r2, r2, r6
 8012340:	1b9b      	subs	r3, r3, r6
 8012342:	60a2      	str	r2, [r4, #8]
 8012344:	6123      	str	r3, [r4, #16]
 8012346:	f080 0001 	eor.w	r0, r0, #1
 801234a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801234e:	68a3      	ldr	r3, [r4, #8]
 8012350:	799b      	ldrb	r3, [r3, #6]
 8012352:	706b      	strb	r3, [r5, #1]
 8012354:	1cab      	adds	r3, r5, #2
 8012356:	68a2      	ldr	r2, [r4, #8]
 8012358:	7952      	ldrb	r2, [r2, #5]
 801235a:	f803 2b01 	strb.w	r2, [r3], #1
 801235e:	68a2      	ldr	r2, [r4, #8]
 8012360:	7912      	ldrb	r2, [r2, #4]
 8012362:	f803 2b01 	strb.w	r2, [r3], #1
 8012366:	68a2      	ldr	r2, [r4, #8]
 8012368:	78d2      	ldrb	r2, [r2, #3]
 801236a:	f803 2b01 	strb.w	r2, [r3], #1
 801236e:	68a2      	ldr	r2, [r4, #8]
 8012370:	7892      	ldrb	r2, [r2, #2]
 8012372:	f803 2b01 	strb.w	r2, [r3], #1
 8012376:	68a2      	ldr	r2, [r4, #8]
 8012378:	7852      	ldrb	r2, [r2, #1]
 801237a:	f803 2b01 	strb.w	r2, [r3], #1
 801237e:	68a2      	ldr	r2, [r4, #8]
 8012380:	7812      	ldrb	r2, [r2, #0]
 8012382:	701a      	strb	r2, [r3, #0]
 8012384:	e796      	b.n	80122b4 <ucdr_deserialize_int64_t+0xa4>
 8012386:	4639      	mov	r1, r7
 8012388:	4632      	mov	r2, r6
 801238a:	4628      	mov	r0, r5
 801238c:	f00f fb51 	bl	8021a32 <memcpy>
 8012390:	68a1      	ldr	r1, [r4, #8]
 8012392:	4642      	mov	r2, r8
 8012394:	19a8      	adds	r0, r5, r6
 8012396:	f00f fb4c 	bl	8021a32 <memcpy>
 801239a:	e78b      	b.n	80122b4 <ucdr_deserialize_int64_t+0xa4>

0801239c <ucdr_deserialize_endian_int64_t>:
 801239c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123a0:	460f      	mov	r7, r1
 80123a2:	2108      	movs	r1, #8
 80123a4:	4604      	mov	r4, r0
 80123a6:	4615      	mov	r5, r2
 80123a8:	f000 fd8c 	bl	8012ec4 <ucdr_buffer_alignment>
 80123ac:	4601      	mov	r1, r0
 80123ae:	4620      	mov	r0, r4
 80123b0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80123b4:	f000 fdca 	bl	8012f4c <ucdr_advance_buffer>
 80123b8:	2108      	movs	r1, #8
 80123ba:	4620      	mov	r0, r4
 80123bc:	f000 fd22 	bl	8012e04 <ucdr_check_buffer_available_for>
 80123c0:	2800      	cmp	r0, #0
 80123c2:	d159      	bne.n	8012478 <ucdr_deserialize_endian_int64_t+0xdc>
 80123c4:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 80123c8:	4546      	cmp	r6, r8
 80123ca:	d950      	bls.n	801246e <ucdr_deserialize_endian_int64_t+0xd2>
 80123cc:	6923      	ldr	r3, [r4, #16]
 80123ce:	60a6      	str	r6, [r4, #8]
 80123d0:	eba6 0608 	sub.w	r6, r6, r8
 80123d4:	4433      	add	r3, r6
 80123d6:	f1c6 0a08 	rsb	sl, r6, #8
 80123da:	6123      	str	r3, [r4, #16]
 80123dc:	4651      	mov	r1, sl
 80123de:	4620      	mov	r0, r4
 80123e0:	f000 fd1c 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d073      	beq.n	80124d0 <ucdr_deserialize_endian_int64_t+0x134>
 80123e8:	2f01      	cmp	r7, #1
 80123ea:	f000 809a 	beq.w	8012522 <ucdr_deserialize_endian_int64_t+0x186>
 80123ee:	f898 3007 	ldrb.w	r3, [r8, #7]
 80123f2:	702b      	strb	r3, [r5, #0]
 80123f4:	2e00      	cmp	r6, #0
 80123f6:	d078      	beq.n	80124ea <ucdr_deserialize_endian_int64_t+0x14e>
 80123f8:	f898 3006 	ldrb.w	r3, [r8, #6]
 80123fc:	706b      	strb	r3, [r5, #1]
 80123fe:	2e01      	cmp	r6, #1
 8012400:	f105 0302 	add.w	r3, r5, #2
 8012404:	d075      	beq.n	80124f2 <ucdr_deserialize_endian_int64_t+0x156>
 8012406:	f898 3005 	ldrb.w	r3, [r8, #5]
 801240a:	70ab      	strb	r3, [r5, #2]
 801240c:	2e02      	cmp	r6, #2
 801240e:	f105 0303 	add.w	r3, r5, #3
 8012412:	d072      	beq.n	80124fa <ucdr_deserialize_endian_int64_t+0x15e>
 8012414:	f898 3004 	ldrb.w	r3, [r8, #4]
 8012418:	70eb      	strb	r3, [r5, #3]
 801241a:	2e03      	cmp	r6, #3
 801241c:	f105 0304 	add.w	r3, r5, #4
 8012420:	d06f      	beq.n	8012502 <ucdr_deserialize_endian_int64_t+0x166>
 8012422:	f898 3003 	ldrb.w	r3, [r8, #3]
 8012426:	712b      	strb	r3, [r5, #4]
 8012428:	2e04      	cmp	r6, #4
 801242a:	f105 0305 	add.w	r3, r5, #5
 801242e:	d06c      	beq.n	801250a <ucdr_deserialize_endian_int64_t+0x16e>
 8012430:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012434:	716b      	strb	r3, [r5, #5]
 8012436:	2e05      	cmp	r6, #5
 8012438:	f105 0306 	add.w	r3, r5, #6
 801243c:	d069      	beq.n	8012512 <ucdr_deserialize_endian_int64_t+0x176>
 801243e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012442:	71ab      	strb	r3, [r5, #6]
 8012444:	2e06      	cmp	r6, #6
 8012446:	f105 0307 	add.w	r3, r5, #7
 801244a:	d066      	beq.n	801251a <ucdr_deserialize_endian_int64_t+0x17e>
 801244c:	f898 3000 	ldrb.w	r3, [r8]
 8012450:	71eb      	strb	r3, [r5, #7]
 8012452:	6923      	ldr	r3, [r4, #16]
 8012454:	68a2      	ldr	r2, [r4, #8]
 8012456:	7da0      	ldrb	r0, [r4, #22]
 8012458:	3308      	adds	r3, #8
 801245a:	1b9e      	subs	r6, r3, r6
 801245c:	2308      	movs	r3, #8
 801245e:	4452      	add	r2, sl
 8012460:	7563      	strb	r3, [r4, #21]
 8012462:	60a2      	str	r2, [r4, #8]
 8012464:	6126      	str	r6, [r4, #16]
 8012466:	f080 0001 	eor.w	r0, r0, #1
 801246a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801246e:	2108      	movs	r1, #8
 8012470:	4620      	mov	r0, r4
 8012472:	f000 fcd3 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012476:	b308      	cbz	r0, 80124bc <ucdr_deserialize_endian_int64_t+0x120>
 8012478:	2f01      	cmp	r7, #1
 801247a:	68a3      	ldr	r3, [r4, #8]
 801247c:	d023      	beq.n	80124c6 <ucdr_deserialize_endian_int64_t+0x12a>
 801247e:	79db      	ldrb	r3, [r3, #7]
 8012480:	702b      	strb	r3, [r5, #0]
 8012482:	68a3      	ldr	r3, [r4, #8]
 8012484:	799b      	ldrb	r3, [r3, #6]
 8012486:	706b      	strb	r3, [r5, #1]
 8012488:	68a3      	ldr	r3, [r4, #8]
 801248a:	795b      	ldrb	r3, [r3, #5]
 801248c:	70ab      	strb	r3, [r5, #2]
 801248e:	68a3      	ldr	r3, [r4, #8]
 8012490:	791b      	ldrb	r3, [r3, #4]
 8012492:	70eb      	strb	r3, [r5, #3]
 8012494:	68a3      	ldr	r3, [r4, #8]
 8012496:	78db      	ldrb	r3, [r3, #3]
 8012498:	712b      	strb	r3, [r5, #4]
 801249a:	68a3      	ldr	r3, [r4, #8]
 801249c:	789b      	ldrb	r3, [r3, #2]
 801249e:	716b      	strb	r3, [r5, #5]
 80124a0:	68a3      	ldr	r3, [r4, #8]
 80124a2:	785b      	ldrb	r3, [r3, #1]
 80124a4:	71ab      	strb	r3, [r5, #6]
 80124a6:	68a3      	ldr	r3, [r4, #8]
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	71eb      	strb	r3, [r5, #7]
 80124ac:	68a2      	ldr	r2, [r4, #8]
 80124ae:	6923      	ldr	r3, [r4, #16]
 80124b0:	3208      	adds	r2, #8
 80124b2:	3308      	adds	r3, #8
 80124b4:	2108      	movs	r1, #8
 80124b6:	60a2      	str	r2, [r4, #8]
 80124b8:	6123      	str	r3, [r4, #16]
 80124ba:	7561      	strb	r1, [r4, #21]
 80124bc:	7da0      	ldrb	r0, [r4, #22]
 80124be:	f080 0001 	eor.w	r0, r0, #1
 80124c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	606b      	str	r3, [r5, #4]
 80124cc:	602a      	str	r2, [r5, #0]
 80124ce:	e7ed      	b.n	80124ac <ucdr_deserialize_endian_int64_t+0x110>
 80124d0:	68a2      	ldr	r2, [r4, #8]
 80124d2:	6923      	ldr	r3, [r4, #16]
 80124d4:	7da0      	ldrb	r0, [r4, #22]
 80124d6:	f884 9015 	strb.w	r9, [r4, #21]
 80124da:	1b92      	subs	r2, r2, r6
 80124dc:	1b9b      	subs	r3, r3, r6
 80124de:	60a2      	str	r2, [r4, #8]
 80124e0:	6123      	str	r3, [r4, #16]
 80124e2:	f080 0001 	eor.w	r0, r0, #1
 80124e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ea:	68a3      	ldr	r3, [r4, #8]
 80124ec:	799b      	ldrb	r3, [r3, #6]
 80124ee:	706b      	strb	r3, [r5, #1]
 80124f0:	1cab      	adds	r3, r5, #2
 80124f2:	68a2      	ldr	r2, [r4, #8]
 80124f4:	7952      	ldrb	r2, [r2, #5]
 80124f6:	f803 2b01 	strb.w	r2, [r3], #1
 80124fa:	68a2      	ldr	r2, [r4, #8]
 80124fc:	7912      	ldrb	r2, [r2, #4]
 80124fe:	f803 2b01 	strb.w	r2, [r3], #1
 8012502:	68a2      	ldr	r2, [r4, #8]
 8012504:	78d2      	ldrb	r2, [r2, #3]
 8012506:	f803 2b01 	strb.w	r2, [r3], #1
 801250a:	68a2      	ldr	r2, [r4, #8]
 801250c:	7892      	ldrb	r2, [r2, #2]
 801250e:	f803 2b01 	strb.w	r2, [r3], #1
 8012512:	68a2      	ldr	r2, [r4, #8]
 8012514:	7852      	ldrb	r2, [r2, #1]
 8012516:	f803 2b01 	strb.w	r2, [r3], #1
 801251a:	68a2      	ldr	r2, [r4, #8]
 801251c:	7812      	ldrb	r2, [r2, #0]
 801251e:	701a      	strb	r2, [r3, #0]
 8012520:	e797      	b.n	8012452 <ucdr_deserialize_endian_int64_t+0xb6>
 8012522:	4641      	mov	r1, r8
 8012524:	4632      	mov	r2, r6
 8012526:	4628      	mov	r0, r5
 8012528:	f00f fa83 	bl	8021a32 <memcpy>
 801252c:	68a1      	ldr	r1, [r4, #8]
 801252e:	4652      	mov	r2, sl
 8012530:	19a8      	adds	r0, r5, r6
 8012532:	f00f fa7e 	bl	8021a32 <memcpy>
 8012536:	e78c      	b.n	8012452 <ucdr_deserialize_endian_int64_t+0xb6>

08012538 <ucdr_serialize_endian_float>:
 8012538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801253c:	460d      	mov	r5, r1
 801253e:	b083      	sub	sp, #12
 8012540:	2104      	movs	r1, #4
 8012542:	4604      	mov	r4, r0
 8012544:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012548:	f000 fcbc 	bl	8012ec4 <ucdr_buffer_alignment>
 801254c:	4601      	mov	r1, r0
 801254e:	4620      	mov	r0, r4
 8012550:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012554:	f000 fcfa 	bl	8012f4c <ucdr_advance_buffer>
 8012558:	2104      	movs	r1, #4
 801255a:	4620      	mov	r0, r4
 801255c:	f000 fc52 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012560:	2800      	cmp	r0, #0
 8012562:	d138      	bne.n	80125d6 <ucdr_serialize_endian_float+0x9e>
 8012564:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012568:	42b7      	cmp	r7, r6
 801256a:	d92f      	bls.n	80125cc <ucdr_serialize_endian_float+0x94>
 801256c:	6923      	ldr	r3, [r4, #16]
 801256e:	60a7      	str	r7, [r4, #8]
 8012570:	1bbf      	subs	r7, r7, r6
 8012572:	443b      	add	r3, r7
 8012574:	f1c7 0904 	rsb	r9, r7, #4
 8012578:	6123      	str	r3, [r4, #16]
 801257a:	4649      	mov	r1, r9
 801257c:	4620      	mov	r0, r4
 801257e:	f000 fc4d 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012582:	2800      	cmp	r0, #0
 8012584:	d04a      	beq.n	801261c <ucdr_serialize_endian_float+0xe4>
 8012586:	2d01      	cmp	r5, #1
 8012588:	d063      	beq.n	8012652 <ucdr_serialize_endian_float+0x11a>
 801258a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801258e:	7033      	strb	r3, [r6, #0]
 8012590:	2f00      	cmp	r7, #0
 8012592:	d051      	beq.n	8012638 <ucdr_serialize_endian_float+0x100>
 8012594:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012598:	7073      	strb	r3, [r6, #1]
 801259a:	2f01      	cmp	r7, #1
 801259c:	d050      	beq.n	8012640 <ucdr_serialize_endian_float+0x108>
 801259e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80125a2:	70b3      	strb	r3, [r6, #2]
 80125a4:	2f02      	cmp	r7, #2
 80125a6:	d04f      	beq.n	8012648 <ucdr_serialize_endian_float+0x110>
 80125a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125ac:	70f3      	strb	r3, [r6, #3]
 80125ae:	6923      	ldr	r3, [r4, #16]
 80125b0:	68a2      	ldr	r2, [r4, #8]
 80125b2:	7da0      	ldrb	r0, [r4, #22]
 80125b4:	3304      	adds	r3, #4
 80125b6:	444a      	add	r2, r9
 80125b8:	1bdb      	subs	r3, r3, r7
 80125ba:	2104      	movs	r1, #4
 80125bc:	f080 0001 	eor.w	r0, r0, #1
 80125c0:	60a2      	str	r2, [r4, #8]
 80125c2:	6123      	str	r3, [r4, #16]
 80125c4:	7561      	strb	r1, [r4, #21]
 80125c6:	b003      	add	sp, #12
 80125c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125cc:	2104      	movs	r1, #4
 80125ce:	4620      	mov	r0, r4
 80125d0:	f000 fc24 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80125d4:	b1c8      	cbz	r0, 801260a <ucdr_serialize_endian_float+0xd2>
 80125d6:	2d01      	cmp	r5, #1
 80125d8:	68a3      	ldr	r3, [r4, #8]
 80125da:	d01c      	beq.n	8012616 <ucdr_serialize_endian_float+0xde>
 80125dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80125e0:	701a      	strb	r2, [r3, #0]
 80125e2:	68a3      	ldr	r3, [r4, #8]
 80125e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125e8:	705a      	strb	r2, [r3, #1]
 80125ea:	68a3      	ldr	r3, [r4, #8]
 80125ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125f0:	709a      	strb	r2, [r3, #2]
 80125f2:	68a3      	ldr	r3, [r4, #8]
 80125f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125f8:	70da      	strb	r2, [r3, #3]
 80125fa:	68a2      	ldr	r2, [r4, #8]
 80125fc:	6923      	ldr	r3, [r4, #16]
 80125fe:	3204      	adds	r2, #4
 8012600:	3304      	adds	r3, #4
 8012602:	2104      	movs	r1, #4
 8012604:	60a2      	str	r2, [r4, #8]
 8012606:	6123      	str	r3, [r4, #16]
 8012608:	7561      	strb	r1, [r4, #21]
 801260a:	7da0      	ldrb	r0, [r4, #22]
 801260c:	f080 0001 	eor.w	r0, r0, #1
 8012610:	b003      	add	sp, #12
 8012612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012616:	9a01      	ldr	r2, [sp, #4]
 8012618:	601a      	str	r2, [r3, #0]
 801261a:	e7ee      	b.n	80125fa <ucdr_serialize_endian_float+0xc2>
 801261c:	68a2      	ldr	r2, [r4, #8]
 801261e:	6923      	ldr	r3, [r4, #16]
 8012620:	7da0      	ldrb	r0, [r4, #22]
 8012622:	f884 8015 	strb.w	r8, [r4, #21]
 8012626:	1bd2      	subs	r2, r2, r7
 8012628:	1bdb      	subs	r3, r3, r7
 801262a:	f080 0001 	eor.w	r0, r0, #1
 801262e:	60a2      	str	r2, [r4, #8]
 8012630:	6123      	str	r3, [r4, #16]
 8012632:	b003      	add	sp, #12
 8012634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012638:	68a3      	ldr	r3, [r4, #8]
 801263a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801263e:	701a      	strb	r2, [r3, #0]
 8012640:	68a3      	ldr	r3, [r4, #8]
 8012642:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012646:	701a      	strb	r2, [r3, #0]
 8012648:	68a3      	ldr	r3, [r4, #8]
 801264a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801264e:	701a      	strb	r2, [r3, #0]
 8012650:	e7ad      	b.n	80125ae <ucdr_serialize_endian_float+0x76>
 8012652:	ad01      	add	r5, sp, #4
 8012654:	4629      	mov	r1, r5
 8012656:	463a      	mov	r2, r7
 8012658:	4630      	mov	r0, r6
 801265a:	f00f f9ea 	bl	8021a32 <memcpy>
 801265e:	68a0      	ldr	r0, [r4, #8]
 8012660:	464a      	mov	r2, r9
 8012662:	19e9      	adds	r1, r5, r7
 8012664:	f00f f9e5 	bl	8021a32 <memcpy>
 8012668:	e7a1      	b.n	80125ae <ucdr_serialize_endian_float+0x76>
 801266a:	bf00      	nop

0801266c <ucdr_deserialize_endian_float>:
 801266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012670:	460e      	mov	r6, r1
 8012672:	2104      	movs	r1, #4
 8012674:	4604      	mov	r4, r0
 8012676:	4615      	mov	r5, r2
 8012678:	f000 fc24 	bl	8012ec4 <ucdr_buffer_alignment>
 801267c:	4601      	mov	r1, r0
 801267e:	4620      	mov	r0, r4
 8012680:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012684:	f000 fc62 	bl	8012f4c <ucdr_advance_buffer>
 8012688:	2104      	movs	r1, #4
 801268a:	4620      	mov	r0, r4
 801268c:	f000 fbba 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012690:	2800      	cmp	r0, #0
 8012692:	d13c      	bne.n	801270e <ucdr_deserialize_endian_float+0xa2>
 8012694:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012698:	42bb      	cmp	r3, r7
 801269a:	d933      	bls.n	8012704 <ucdr_deserialize_endian_float+0x98>
 801269c:	eba3 0807 	sub.w	r8, r3, r7
 80126a0:	60a3      	str	r3, [r4, #8]
 80126a2:	6923      	ldr	r3, [r4, #16]
 80126a4:	f1c8 0a04 	rsb	sl, r8, #4
 80126a8:	4443      	add	r3, r8
 80126aa:	6123      	str	r3, [r4, #16]
 80126ac:	4651      	mov	r1, sl
 80126ae:	4620      	mov	r0, r4
 80126b0:	f000 fbb4 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d048      	beq.n	801274a <ucdr_deserialize_endian_float+0xde>
 80126b8:	2e01      	cmp	r6, #1
 80126ba:	d061      	beq.n	8012780 <ucdr_deserialize_endian_float+0x114>
 80126bc:	78fb      	ldrb	r3, [r7, #3]
 80126be:	702b      	strb	r3, [r5, #0]
 80126c0:	f1b8 0f00 	cmp.w	r8, #0
 80126c4:	d050      	beq.n	8012768 <ucdr_deserialize_endian_float+0xfc>
 80126c6:	78bb      	ldrb	r3, [r7, #2]
 80126c8:	706b      	strb	r3, [r5, #1]
 80126ca:	f1b8 0f01 	cmp.w	r8, #1
 80126ce:	f105 0302 	add.w	r3, r5, #2
 80126d2:	d04d      	beq.n	8012770 <ucdr_deserialize_endian_float+0x104>
 80126d4:	787b      	ldrb	r3, [r7, #1]
 80126d6:	70ab      	strb	r3, [r5, #2]
 80126d8:	f1b8 0f02 	cmp.w	r8, #2
 80126dc:	f105 0303 	add.w	r3, r5, #3
 80126e0:	d04a      	beq.n	8012778 <ucdr_deserialize_endian_float+0x10c>
 80126e2:	783b      	ldrb	r3, [r7, #0]
 80126e4:	70eb      	strb	r3, [r5, #3]
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	68a2      	ldr	r2, [r4, #8]
 80126ea:	7da0      	ldrb	r0, [r4, #22]
 80126ec:	2104      	movs	r1, #4
 80126ee:	3304      	adds	r3, #4
 80126f0:	4452      	add	r2, sl
 80126f2:	eba3 0308 	sub.w	r3, r3, r8
 80126f6:	7561      	strb	r1, [r4, #21]
 80126f8:	60a2      	str	r2, [r4, #8]
 80126fa:	6123      	str	r3, [r4, #16]
 80126fc:	f080 0001 	eor.w	r0, r0, #1
 8012700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012704:	2104      	movs	r1, #4
 8012706:	4620      	mov	r0, r4
 8012708:	f000 fb88 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 801270c:	b1a8      	cbz	r0, 801273a <ucdr_deserialize_endian_float+0xce>
 801270e:	2e01      	cmp	r6, #1
 8012710:	68a3      	ldr	r3, [r4, #8]
 8012712:	d017      	beq.n	8012744 <ucdr_deserialize_endian_float+0xd8>
 8012714:	78db      	ldrb	r3, [r3, #3]
 8012716:	702b      	strb	r3, [r5, #0]
 8012718:	68a3      	ldr	r3, [r4, #8]
 801271a:	789b      	ldrb	r3, [r3, #2]
 801271c:	706b      	strb	r3, [r5, #1]
 801271e:	68a3      	ldr	r3, [r4, #8]
 8012720:	785b      	ldrb	r3, [r3, #1]
 8012722:	70ab      	strb	r3, [r5, #2]
 8012724:	68a3      	ldr	r3, [r4, #8]
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	70eb      	strb	r3, [r5, #3]
 801272a:	68a2      	ldr	r2, [r4, #8]
 801272c:	6923      	ldr	r3, [r4, #16]
 801272e:	3204      	adds	r2, #4
 8012730:	3304      	adds	r3, #4
 8012732:	2104      	movs	r1, #4
 8012734:	60a2      	str	r2, [r4, #8]
 8012736:	6123      	str	r3, [r4, #16]
 8012738:	7561      	strb	r1, [r4, #21]
 801273a:	7da0      	ldrb	r0, [r4, #22]
 801273c:	f080 0001 	eor.w	r0, r0, #1
 8012740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	602b      	str	r3, [r5, #0]
 8012748:	e7ef      	b.n	801272a <ucdr_deserialize_endian_float+0xbe>
 801274a:	68a2      	ldr	r2, [r4, #8]
 801274c:	6923      	ldr	r3, [r4, #16]
 801274e:	7da0      	ldrb	r0, [r4, #22]
 8012750:	f884 9015 	strb.w	r9, [r4, #21]
 8012754:	eba2 0208 	sub.w	r2, r2, r8
 8012758:	eba3 0308 	sub.w	r3, r3, r8
 801275c:	60a2      	str	r2, [r4, #8]
 801275e:	6123      	str	r3, [r4, #16]
 8012760:	f080 0001 	eor.w	r0, r0, #1
 8012764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012768:	68a3      	ldr	r3, [r4, #8]
 801276a:	789b      	ldrb	r3, [r3, #2]
 801276c:	706b      	strb	r3, [r5, #1]
 801276e:	1cab      	adds	r3, r5, #2
 8012770:	68a2      	ldr	r2, [r4, #8]
 8012772:	7852      	ldrb	r2, [r2, #1]
 8012774:	f803 2b01 	strb.w	r2, [r3], #1
 8012778:	68a2      	ldr	r2, [r4, #8]
 801277a:	7812      	ldrb	r2, [r2, #0]
 801277c:	701a      	strb	r2, [r3, #0]
 801277e:	e7b2      	b.n	80126e6 <ucdr_deserialize_endian_float+0x7a>
 8012780:	4639      	mov	r1, r7
 8012782:	4642      	mov	r2, r8
 8012784:	4628      	mov	r0, r5
 8012786:	f00f f954 	bl	8021a32 <memcpy>
 801278a:	68a1      	ldr	r1, [r4, #8]
 801278c:	4652      	mov	r2, sl
 801278e:	eb05 0008 	add.w	r0, r5, r8
 8012792:	f00f f94e 	bl	8021a32 <memcpy>
 8012796:	e7a6      	b.n	80126e6 <ucdr_deserialize_endian_float+0x7a>

08012798 <ucdr_serialize_double>:
 8012798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801279c:	2108      	movs	r1, #8
 801279e:	b082      	sub	sp, #8
 80127a0:	4604      	mov	r4, r0
 80127a2:	ed8d 0b00 	vstr	d0, [sp]
 80127a6:	f000 fb8d 	bl	8012ec4 <ucdr_buffer_alignment>
 80127aa:	4601      	mov	r1, r0
 80127ac:	4620      	mov	r0, r4
 80127ae:	7d67      	ldrb	r7, [r4, #21]
 80127b0:	f000 fbcc 	bl	8012f4c <ucdr_advance_buffer>
 80127b4:	2108      	movs	r1, #8
 80127b6:	4620      	mov	r0, r4
 80127b8:	f000 fb24 	bl	8012e04 <ucdr_check_buffer_available_for>
 80127bc:	2800      	cmp	r0, #0
 80127be:	d14e      	bne.n	801285e <ucdr_serialize_double+0xc6>
 80127c0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80127c4:	42ab      	cmp	r3, r5
 80127c6:	d945      	bls.n	8012854 <ucdr_serialize_double+0xbc>
 80127c8:	1b5e      	subs	r6, r3, r5
 80127ca:	60a3      	str	r3, [r4, #8]
 80127cc:	6923      	ldr	r3, [r4, #16]
 80127ce:	f1c6 0808 	rsb	r8, r6, #8
 80127d2:	4433      	add	r3, r6
 80127d4:	6123      	str	r3, [r4, #16]
 80127d6:	4641      	mov	r1, r8
 80127d8:	4620      	mov	r0, r4
 80127da:	f000 fb1f 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80127de:	2800      	cmp	r0, #0
 80127e0:	d074      	beq.n	80128cc <ucdr_serialize_double+0x134>
 80127e2:	7d23      	ldrb	r3, [r4, #20]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	f000 809b 	beq.w	8012920 <ucdr_serialize_double+0x188>
 80127ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80127ee:	702b      	strb	r3, [r5, #0]
 80127f0:	2e00      	cmp	r6, #0
 80127f2:	d078      	beq.n	80128e6 <ucdr_serialize_double+0x14e>
 80127f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80127f8:	706b      	strb	r3, [r5, #1]
 80127fa:	2e01      	cmp	r6, #1
 80127fc:	d077      	beq.n	80128ee <ucdr_serialize_double+0x156>
 80127fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012802:	70ab      	strb	r3, [r5, #2]
 8012804:	2e02      	cmp	r6, #2
 8012806:	d076      	beq.n	80128f6 <ucdr_serialize_double+0x15e>
 8012808:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801280c:	70eb      	strb	r3, [r5, #3]
 801280e:	2e03      	cmp	r6, #3
 8012810:	d075      	beq.n	80128fe <ucdr_serialize_double+0x166>
 8012812:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012816:	712b      	strb	r3, [r5, #4]
 8012818:	2e04      	cmp	r6, #4
 801281a:	d074      	beq.n	8012906 <ucdr_serialize_double+0x16e>
 801281c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012820:	716b      	strb	r3, [r5, #5]
 8012822:	2e05      	cmp	r6, #5
 8012824:	d073      	beq.n	801290e <ucdr_serialize_double+0x176>
 8012826:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801282a:	71ab      	strb	r3, [r5, #6]
 801282c:	2e06      	cmp	r6, #6
 801282e:	d072      	beq.n	8012916 <ucdr_serialize_double+0x17e>
 8012830:	f89d 3000 	ldrb.w	r3, [sp]
 8012834:	71eb      	strb	r3, [r5, #7]
 8012836:	6923      	ldr	r3, [r4, #16]
 8012838:	68a2      	ldr	r2, [r4, #8]
 801283a:	7da0      	ldrb	r0, [r4, #22]
 801283c:	3308      	adds	r3, #8
 801283e:	1b9e      	subs	r6, r3, r6
 8012840:	4442      	add	r2, r8
 8012842:	2308      	movs	r3, #8
 8012844:	f080 0001 	eor.w	r0, r0, #1
 8012848:	60a2      	str	r2, [r4, #8]
 801284a:	6126      	str	r6, [r4, #16]
 801284c:	7563      	strb	r3, [r4, #21]
 801284e:	b002      	add	sp, #8
 8012850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012854:	2108      	movs	r1, #8
 8012856:	4620      	mov	r0, r4
 8012858:	f000 fae0 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 801285c:	b350      	cbz	r0, 80128b4 <ucdr_serialize_double+0x11c>
 801285e:	7d23      	ldrb	r3, [r4, #20]
 8012860:	2b01      	cmp	r3, #1
 8012862:	d02d      	beq.n	80128c0 <ucdr_serialize_double+0x128>
 8012864:	68a3      	ldr	r3, [r4, #8]
 8012866:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801286a:	701a      	strb	r2, [r3, #0]
 801286c:	68a3      	ldr	r3, [r4, #8]
 801286e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012872:	705a      	strb	r2, [r3, #1]
 8012874:	68a3      	ldr	r3, [r4, #8]
 8012876:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801287a:	709a      	strb	r2, [r3, #2]
 801287c:	68a3      	ldr	r3, [r4, #8]
 801287e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012882:	70da      	strb	r2, [r3, #3]
 8012884:	68a3      	ldr	r3, [r4, #8]
 8012886:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801288a:	711a      	strb	r2, [r3, #4]
 801288c:	68a3      	ldr	r3, [r4, #8]
 801288e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012892:	715a      	strb	r2, [r3, #5]
 8012894:	68a3      	ldr	r3, [r4, #8]
 8012896:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801289a:	719a      	strb	r2, [r3, #6]
 801289c:	68a3      	ldr	r3, [r4, #8]
 801289e:	f89d 2000 	ldrb.w	r2, [sp]
 80128a2:	71da      	strb	r2, [r3, #7]
 80128a4:	68a2      	ldr	r2, [r4, #8]
 80128a6:	6923      	ldr	r3, [r4, #16]
 80128a8:	3208      	adds	r2, #8
 80128aa:	3308      	adds	r3, #8
 80128ac:	2108      	movs	r1, #8
 80128ae:	60a2      	str	r2, [r4, #8]
 80128b0:	6123      	str	r3, [r4, #16]
 80128b2:	7561      	strb	r1, [r4, #21]
 80128b4:	7da0      	ldrb	r0, [r4, #22]
 80128b6:	f080 0001 	eor.w	r0, r0, #1
 80128ba:	b002      	add	sp, #8
 80128bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c0:	466b      	mov	r3, sp
 80128c2:	cb03      	ldmia	r3!, {r0, r1}
 80128c4:	68a3      	ldr	r3, [r4, #8]
 80128c6:	6018      	str	r0, [r3, #0]
 80128c8:	6059      	str	r1, [r3, #4]
 80128ca:	e7eb      	b.n	80128a4 <ucdr_serialize_double+0x10c>
 80128cc:	68a2      	ldr	r2, [r4, #8]
 80128ce:	6923      	ldr	r3, [r4, #16]
 80128d0:	7da0      	ldrb	r0, [r4, #22]
 80128d2:	7567      	strb	r7, [r4, #21]
 80128d4:	1b92      	subs	r2, r2, r6
 80128d6:	1b9b      	subs	r3, r3, r6
 80128d8:	f080 0001 	eor.w	r0, r0, #1
 80128dc:	60a2      	str	r2, [r4, #8]
 80128de:	6123      	str	r3, [r4, #16]
 80128e0:	b002      	add	sp, #8
 80128e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e6:	68a3      	ldr	r3, [r4, #8]
 80128e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128ec:	701a      	strb	r2, [r3, #0]
 80128ee:	68a3      	ldr	r3, [r4, #8]
 80128f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80128f4:	701a      	strb	r2, [r3, #0]
 80128f6:	68a3      	ldr	r3, [r4, #8]
 80128f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80128fc:	701a      	strb	r2, [r3, #0]
 80128fe:	68a3      	ldr	r3, [r4, #8]
 8012900:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012904:	701a      	strb	r2, [r3, #0]
 8012906:	68a3      	ldr	r3, [r4, #8]
 8012908:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801290c:	701a      	strb	r2, [r3, #0]
 801290e:	68a3      	ldr	r3, [r4, #8]
 8012910:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012914:	701a      	strb	r2, [r3, #0]
 8012916:	68a3      	ldr	r3, [r4, #8]
 8012918:	f89d 2000 	ldrb.w	r2, [sp]
 801291c:	701a      	strb	r2, [r3, #0]
 801291e:	e78a      	b.n	8012836 <ucdr_serialize_double+0x9e>
 8012920:	4628      	mov	r0, r5
 8012922:	466d      	mov	r5, sp
 8012924:	4629      	mov	r1, r5
 8012926:	4632      	mov	r2, r6
 8012928:	f00f f883 	bl	8021a32 <memcpy>
 801292c:	68a0      	ldr	r0, [r4, #8]
 801292e:	4642      	mov	r2, r8
 8012930:	19a9      	adds	r1, r5, r6
 8012932:	f00f f87e 	bl	8021a32 <memcpy>
 8012936:	e77e      	b.n	8012836 <ucdr_serialize_double+0x9e>

08012938 <ucdr_serialize_endian_double>:
 8012938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801293c:	460e      	mov	r6, r1
 801293e:	b083      	sub	sp, #12
 8012940:	2108      	movs	r1, #8
 8012942:	4604      	mov	r4, r0
 8012944:	ed8d 0b00 	vstr	d0, [sp]
 8012948:	f000 fabc 	bl	8012ec4 <ucdr_buffer_alignment>
 801294c:	4601      	mov	r1, r0
 801294e:	4620      	mov	r0, r4
 8012950:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012954:	f000 fafa 	bl	8012f4c <ucdr_advance_buffer>
 8012958:	2108      	movs	r1, #8
 801295a:	4620      	mov	r0, r4
 801295c:	f000 fa52 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012960:	2800      	cmp	r0, #0
 8012962:	d14d      	bne.n	8012a00 <ucdr_serialize_endian_double+0xc8>
 8012964:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8012968:	42bd      	cmp	r5, r7
 801296a:	d944      	bls.n	80129f6 <ucdr_serialize_endian_double+0xbe>
 801296c:	6923      	ldr	r3, [r4, #16]
 801296e:	60a5      	str	r5, [r4, #8]
 8012970:	1bed      	subs	r5, r5, r7
 8012972:	442b      	add	r3, r5
 8012974:	f1c5 0908 	rsb	r9, r5, #8
 8012978:	6123      	str	r3, [r4, #16]
 801297a:	4649      	mov	r1, r9
 801297c:	4620      	mov	r0, r4
 801297e:	f000 fa4d 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012982:	2800      	cmp	r0, #0
 8012984:	d072      	beq.n	8012a6c <ucdr_serialize_endian_double+0x134>
 8012986:	2e01      	cmp	r6, #1
 8012988:	f000 809b 	beq.w	8012ac2 <ucdr_serialize_endian_double+0x18a>
 801298c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012990:	703b      	strb	r3, [r7, #0]
 8012992:	2d00      	cmp	r5, #0
 8012994:	d078      	beq.n	8012a88 <ucdr_serialize_endian_double+0x150>
 8012996:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801299a:	707b      	strb	r3, [r7, #1]
 801299c:	2d01      	cmp	r5, #1
 801299e:	d077      	beq.n	8012a90 <ucdr_serialize_endian_double+0x158>
 80129a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129a4:	70bb      	strb	r3, [r7, #2]
 80129a6:	2d02      	cmp	r5, #2
 80129a8:	d076      	beq.n	8012a98 <ucdr_serialize_endian_double+0x160>
 80129aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129ae:	70fb      	strb	r3, [r7, #3]
 80129b0:	2d03      	cmp	r5, #3
 80129b2:	d075      	beq.n	8012aa0 <ucdr_serialize_endian_double+0x168>
 80129b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80129b8:	713b      	strb	r3, [r7, #4]
 80129ba:	2d04      	cmp	r5, #4
 80129bc:	d074      	beq.n	8012aa8 <ucdr_serialize_endian_double+0x170>
 80129be:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80129c2:	717b      	strb	r3, [r7, #5]
 80129c4:	2d05      	cmp	r5, #5
 80129c6:	d073      	beq.n	8012ab0 <ucdr_serialize_endian_double+0x178>
 80129c8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80129cc:	71bb      	strb	r3, [r7, #6]
 80129ce:	2d06      	cmp	r5, #6
 80129d0:	d072      	beq.n	8012ab8 <ucdr_serialize_endian_double+0x180>
 80129d2:	f89d 3000 	ldrb.w	r3, [sp]
 80129d6:	71fb      	strb	r3, [r7, #7]
 80129d8:	6923      	ldr	r3, [r4, #16]
 80129da:	68a2      	ldr	r2, [r4, #8]
 80129dc:	7da0      	ldrb	r0, [r4, #22]
 80129de:	3308      	adds	r3, #8
 80129e0:	1b5d      	subs	r5, r3, r5
 80129e2:	444a      	add	r2, r9
 80129e4:	2308      	movs	r3, #8
 80129e6:	f080 0001 	eor.w	r0, r0, #1
 80129ea:	60a2      	str	r2, [r4, #8]
 80129ec:	6125      	str	r5, [r4, #16]
 80129ee:	7563      	strb	r3, [r4, #21]
 80129f0:	b003      	add	sp, #12
 80129f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129f6:	2108      	movs	r1, #8
 80129f8:	4620      	mov	r0, r4
 80129fa:	f000 fa0f 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 80129fe:	b348      	cbz	r0, 8012a54 <ucdr_serialize_endian_double+0x11c>
 8012a00:	2e01      	cmp	r6, #1
 8012a02:	d02d      	beq.n	8012a60 <ucdr_serialize_endian_double+0x128>
 8012a04:	68a3      	ldr	r3, [r4, #8]
 8012a06:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012a0a:	701a      	strb	r2, [r3, #0]
 8012a0c:	68a3      	ldr	r3, [r4, #8]
 8012a0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a12:	705a      	strb	r2, [r3, #1]
 8012a14:	68a3      	ldr	r3, [r4, #8]
 8012a16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a1a:	709a      	strb	r2, [r3, #2]
 8012a1c:	68a3      	ldr	r3, [r4, #8]
 8012a1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a22:	70da      	strb	r2, [r3, #3]
 8012a24:	68a3      	ldr	r3, [r4, #8]
 8012a26:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012a2a:	711a      	strb	r2, [r3, #4]
 8012a2c:	68a3      	ldr	r3, [r4, #8]
 8012a2e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a32:	715a      	strb	r2, [r3, #5]
 8012a34:	68a3      	ldr	r3, [r4, #8]
 8012a36:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012a3a:	719a      	strb	r2, [r3, #6]
 8012a3c:	68a3      	ldr	r3, [r4, #8]
 8012a3e:	f89d 2000 	ldrb.w	r2, [sp]
 8012a42:	71da      	strb	r2, [r3, #7]
 8012a44:	68a2      	ldr	r2, [r4, #8]
 8012a46:	6923      	ldr	r3, [r4, #16]
 8012a48:	3208      	adds	r2, #8
 8012a4a:	3308      	adds	r3, #8
 8012a4c:	2108      	movs	r1, #8
 8012a4e:	60a2      	str	r2, [r4, #8]
 8012a50:	6123      	str	r3, [r4, #16]
 8012a52:	7561      	strb	r1, [r4, #21]
 8012a54:	7da0      	ldrb	r0, [r4, #22]
 8012a56:	f080 0001 	eor.w	r0, r0, #1
 8012a5a:	b003      	add	sp, #12
 8012a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a60:	466b      	mov	r3, sp
 8012a62:	cb03      	ldmia	r3!, {r0, r1}
 8012a64:	68a3      	ldr	r3, [r4, #8]
 8012a66:	6018      	str	r0, [r3, #0]
 8012a68:	6059      	str	r1, [r3, #4]
 8012a6a:	e7eb      	b.n	8012a44 <ucdr_serialize_endian_double+0x10c>
 8012a6c:	68a2      	ldr	r2, [r4, #8]
 8012a6e:	6923      	ldr	r3, [r4, #16]
 8012a70:	7da0      	ldrb	r0, [r4, #22]
 8012a72:	f884 8015 	strb.w	r8, [r4, #21]
 8012a76:	1b52      	subs	r2, r2, r5
 8012a78:	1b5b      	subs	r3, r3, r5
 8012a7a:	f080 0001 	eor.w	r0, r0, #1
 8012a7e:	60a2      	str	r2, [r4, #8]
 8012a80:	6123      	str	r3, [r4, #16]
 8012a82:	b003      	add	sp, #12
 8012a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a88:	68a3      	ldr	r3, [r4, #8]
 8012a8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a8e:	701a      	strb	r2, [r3, #0]
 8012a90:	68a3      	ldr	r3, [r4, #8]
 8012a92:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a96:	701a      	strb	r2, [r3, #0]
 8012a98:	68a3      	ldr	r3, [r4, #8]
 8012a9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a9e:	701a      	strb	r2, [r3, #0]
 8012aa0:	68a3      	ldr	r3, [r4, #8]
 8012aa2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012aa6:	701a      	strb	r2, [r3, #0]
 8012aa8:	68a3      	ldr	r3, [r4, #8]
 8012aaa:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012aae:	701a      	strb	r2, [r3, #0]
 8012ab0:	68a3      	ldr	r3, [r4, #8]
 8012ab2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012ab6:	701a      	strb	r2, [r3, #0]
 8012ab8:	68a3      	ldr	r3, [r4, #8]
 8012aba:	f89d 2000 	ldrb.w	r2, [sp]
 8012abe:	701a      	strb	r2, [r3, #0]
 8012ac0:	e78a      	b.n	80129d8 <ucdr_serialize_endian_double+0xa0>
 8012ac2:	466e      	mov	r6, sp
 8012ac4:	4631      	mov	r1, r6
 8012ac6:	462a      	mov	r2, r5
 8012ac8:	4638      	mov	r0, r7
 8012aca:	f00e ffb2 	bl	8021a32 <memcpy>
 8012ace:	68a0      	ldr	r0, [r4, #8]
 8012ad0:	464a      	mov	r2, r9
 8012ad2:	1971      	adds	r1, r6, r5
 8012ad4:	f00e ffad 	bl	8021a32 <memcpy>
 8012ad8:	e77e      	b.n	80129d8 <ucdr_serialize_endian_double+0xa0>
 8012ada:	bf00      	nop

08012adc <ucdr_deserialize_double>:
 8012adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ae0:	460d      	mov	r5, r1
 8012ae2:	2108      	movs	r1, #8
 8012ae4:	4604      	mov	r4, r0
 8012ae6:	f000 f9ed 	bl	8012ec4 <ucdr_buffer_alignment>
 8012aea:	4601      	mov	r1, r0
 8012aec:	4620      	mov	r0, r4
 8012aee:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012af2:	f000 fa2b 	bl	8012f4c <ucdr_advance_buffer>
 8012af6:	2108      	movs	r1, #8
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 f983 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	d151      	bne.n	8012ba6 <ucdr_deserialize_double+0xca>
 8012b02:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012b06:	42be      	cmp	r6, r7
 8012b08:	d948      	bls.n	8012b9c <ucdr_deserialize_double+0xc0>
 8012b0a:	6923      	ldr	r3, [r4, #16]
 8012b0c:	60a6      	str	r6, [r4, #8]
 8012b0e:	1bf6      	subs	r6, r6, r7
 8012b10:	4433      	add	r3, r6
 8012b12:	f1c6 0808 	rsb	r8, r6, #8
 8012b16:	6123      	str	r3, [r4, #16]
 8012b18:	4641      	mov	r1, r8
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f000 f97e 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012b20:	2800      	cmp	r0, #0
 8012b22:	d06d      	beq.n	8012c00 <ucdr_deserialize_double+0x124>
 8012b24:	7d23      	ldrb	r3, [r4, #20]
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	f000 8093 	beq.w	8012c52 <ucdr_deserialize_double+0x176>
 8012b2c:	79fb      	ldrb	r3, [r7, #7]
 8012b2e:	702b      	strb	r3, [r5, #0]
 8012b30:	2e00      	cmp	r6, #0
 8012b32:	d072      	beq.n	8012c1a <ucdr_deserialize_double+0x13e>
 8012b34:	79bb      	ldrb	r3, [r7, #6]
 8012b36:	706b      	strb	r3, [r5, #1]
 8012b38:	2e01      	cmp	r6, #1
 8012b3a:	f105 0302 	add.w	r3, r5, #2
 8012b3e:	d070      	beq.n	8012c22 <ucdr_deserialize_double+0x146>
 8012b40:	797b      	ldrb	r3, [r7, #5]
 8012b42:	70ab      	strb	r3, [r5, #2]
 8012b44:	2e02      	cmp	r6, #2
 8012b46:	f105 0303 	add.w	r3, r5, #3
 8012b4a:	d06e      	beq.n	8012c2a <ucdr_deserialize_double+0x14e>
 8012b4c:	793b      	ldrb	r3, [r7, #4]
 8012b4e:	70eb      	strb	r3, [r5, #3]
 8012b50:	2e03      	cmp	r6, #3
 8012b52:	f105 0304 	add.w	r3, r5, #4
 8012b56:	d06c      	beq.n	8012c32 <ucdr_deserialize_double+0x156>
 8012b58:	78fb      	ldrb	r3, [r7, #3]
 8012b5a:	712b      	strb	r3, [r5, #4]
 8012b5c:	2e04      	cmp	r6, #4
 8012b5e:	f105 0305 	add.w	r3, r5, #5
 8012b62:	d06a      	beq.n	8012c3a <ucdr_deserialize_double+0x15e>
 8012b64:	78bb      	ldrb	r3, [r7, #2]
 8012b66:	716b      	strb	r3, [r5, #5]
 8012b68:	2e05      	cmp	r6, #5
 8012b6a:	f105 0306 	add.w	r3, r5, #6
 8012b6e:	d068      	beq.n	8012c42 <ucdr_deserialize_double+0x166>
 8012b70:	787b      	ldrb	r3, [r7, #1]
 8012b72:	71ab      	strb	r3, [r5, #6]
 8012b74:	2e06      	cmp	r6, #6
 8012b76:	f105 0307 	add.w	r3, r5, #7
 8012b7a:	d066      	beq.n	8012c4a <ucdr_deserialize_double+0x16e>
 8012b7c:	783b      	ldrb	r3, [r7, #0]
 8012b7e:	71eb      	strb	r3, [r5, #7]
 8012b80:	6923      	ldr	r3, [r4, #16]
 8012b82:	68a2      	ldr	r2, [r4, #8]
 8012b84:	7da0      	ldrb	r0, [r4, #22]
 8012b86:	3308      	adds	r3, #8
 8012b88:	1b9e      	subs	r6, r3, r6
 8012b8a:	2308      	movs	r3, #8
 8012b8c:	4442      	add	r2, r8
 8012b8e:	7563      	strb	r3, [r4, #21]
 8012b90:	60a2      	str	r2, [r4, #8]
 8012b92:	6126      	str	r6, [r4, #16]
 8012b94:	f080 0001 	eor.w	r0, r0, #1
 8012b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b9c:	2108      	movs	r1, #8
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f000 f93c 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012ba4:	b310      	cbz	r0, 8012bec <ucdr_deserialize_double+0x110>
 8012ba6:	7d23      	ldrb	r3, [r4, #20]
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	68a3      	ldr	r3, [r4, #8]
 8012bac:	d023      	beq.n	8012bf6 <ucdr_deserialize_double+0x11a>
 8012bae:	79db      	ldrb	r3, [r3, #7]
 8012bb0:	702b      	strb	r3, [r5, #0]
 8012bb2:	68a3      	ldr	r3, [r4, #8]
 8012bb4:	799b      	ldrb	r3, [r3, #6]
 8012bb6:	706b      	strb	r3, [r5, #1]
 8012bb8:	68a3      	ldr	r3, [r4, #8]
 8012bba:	795b      	ldrb	r3, [r3, #5]
 8012bbc:	70ab      	strb	r3, [r5, #2]
 8012bbe:	68a3      	ldr	r3, [r4, #8]
 8012bc0:	791b      	ldrb	r3, [r3, #4]
 8012bc2:	70eb      	strb	r3, [r5, #3]
 8012bc4:	68a3      	ldr	r3, [r4, #8]
 8012bc6:	78db      	ldrb	r3, [r3, #3]
 8012bc8:	712b      	strb	r3, [r5, #4]
 8012bca:	68a3      	ldr	r3, [r4, #8]
 8012bcc:	789b      	ldrb	r3, [r3, #2]
 8012bce:	716b      	strb	r3, [r5, #5]
 8012bd0:	68a3      	ldr	r3, [r4, #8]
 8012bd2:	785b      	ldrb	r3, [r3, #1]
 8012bd4:	71ab      	strb	r3, [r5, #6]
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	71eb      	strb	r3, [r5, #7]
 8012bdc:	68a2      	ldr	r2, [r4, #8]
 8012bde:	6923      	ldr	r3, [r4, #16]
 8012be0:	3208      	adds	r2, #8
 8012be2:	3308      	adds	r3, #8
 8012be4:	2108      	movs	r1, #8
 8012be6:	60a2      	str	r2, [r4, #8]
 8012be8:	6123      	str	r3, [r4, #16]
 8012bea:	7561      	strb	r1, [r4, #21]
 8012bec:	7da0      	ldrb	r0, [r4, #22]
 8012bee:	f080 0001 	eor.w	r0, r0, #1
 8012bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	606b      	str	r3, [r5, #4]
 8012bfc:	602a      	str	r2, [r5, #0]
 8012bfe:	e7ed      	b.n	8012bdc <ucdr_deserialize_double+0x100>
 8012c00:	68a2      	ldr	r2, [r4, #8]
 8012c02:	6923      	ldr	r3, [r4, #16]
 8012c04:	7da0      	ldrb	r0, [r4, #22]
 8012c06:	f884 9015 	strb.w	r9, [r4, #21]
 8012c0a:	1b92      	subs	r2, r2, r6
 8012c0c:	1b9b      	subs	r3, r3, r6
 8012c0e:	60a2      	str	r2, [r4, #8]
 8012c10:	6123      	str	r3, [r4, #16]
 8012c12:	f080 0001 	eor.w	r0, r0, #1
 8012c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c1a:	68a3      	ldr	r3, [r4, #8]
 8012c1c:	799b      	ldrb	r3, [r3, #6]
 8012c1e:	706b      	strb	r3, [r5, #1]
 8012c20:	1cab      	adds	r3, r5, #2
 8012c22:	68a2      	ldr	r2, [r4, #8]
 8012c24:	7952      	ldrb	r2, [r2, #5]
 8012c26:	f803 2b01 	strb.w	r2, [r3], #1
 8012c2a:	68a2      	ldr	r2, [r4, #8]
 8012c2c:	7912      	ldrb	r2, [r2, #4]
 8012c2e:	f803 2b01 	strb.w	r2, [r3], #1
 8012c32:	68a2      	ldr	r2, [r4, #8]
 8012c34:	78d2      	ldrb	r2, [r2, #3]
 8012c36:	f803 2b01 	strb.w	r2, [r3], #1
 8012c3a:	68a2      	ldr	r2, [r4, #8]
 8012c3c:	7892      	ldrb	r2, [r2, #2]
 8012c3e:	f803 2b01 	strb.w	r2, [r3], #1
 8012c42:	68a2      	ldr	r2, [r4, #8]
 8012c44:	7852      	ldrb	r2, [r2, #1]
 8012c46:	f803 2b01 	strb.w	r2, [r3], #1
 8012c4a:	68a2      	ldr	r2, [r4, #8]
 8012c4c:	7812      	ldrb	r2, [r2, #0]
 8012c4e:	701a      	strb	r2, [r3, #0]
 8012c50:	e796      	b.n	8012b80 <ucdr_deserialize_double+0xa4>
 8012c52:	4639      	mov	r1, r7
 8012c54:	4632      	mov	r2, r6
 8012c56:	4628      	mov	r0, r5
 8012c58:	f00e feeb 	bl	8021a32 <memcpy>
 8012c5c:	68a1      	ldr	r1, [r4, #8]
 8012c5e:	4642      	mov	r2, r8
 8012c60:	19a8      	adds	r0, r5, r6
 8012c62:	f00e fee6 	bl	8021a32 <memcpy>
 8012c66:	e78b      	b.n	8012b80 <ucdr_deserialize_double+0xa4>

08012c68 <ucdr_deserialize_endian_double>:
 8012c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c6c:	460f      	mov	r7, r1
 8012c6e:	2108      	movs	r1, #8
 8012c70:	4604      	mov	r4, r0
 8012c72:	4615      	mov	r5, r2
 8012c74:	f000 f926 	bl	8012ec4 <ucdr_buffer_alignment>
 8012c78:	4601      	mov	r1, r0
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012c80:	f000 f964 	bl	8012f4c <ucdr_advance_buffer>
 8012c84:	2108      	movs	r1, #8
 8012c86:	4620      	mov	r0, r4
 8012c88:	f000 f8bc 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d159      	bne.n	8012d44 <ucdr_deserialize_endian_double+0xdc>
 8012c90:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8012c94:	4546      	cmp	r6, r8
 8012c96:	d950      	bls.n	8012d3a <ucdr_deserialize_endian_double+0xd2>
 8012c98:	6923      	ldr	r3, [r4, #16]
 8012c9a:	60a6      	str	r6, [r4, #8]
 8012c9c:	eba6 0608 	sub.w	r6, r6, r8
 8012ca0:	4433      	add	r3, r6
 8012ca2:	f1c6 0a08 	rsb	sl, r6, #8
 8012ca6:	6123      	str	r3, [r4, #16]
 8012ca8:	4651      	mov	r1, sl
 8012caa:	4620      	mov	r0, r4
 8012cac:	f000 f8b6 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	d073      	beq.n	8012d9c <ucdr_deserialize_endian_double+0x134>
 8012cb4:	2f01      	cmp	r7, #1
 8012cb6:	f000 809a 	beq.w	8012dee <ucdr_deserialize_endian_double+0x186>
 8012cba:	f898 3007 	ldrb.w	r3, [r8, #7]
 8012cbe:	702b      	strb	r3, [r5, #0]
 8012cc0:	2e00      	cmp	r6, #0
 8012cc2:	d078      	beq.n	8012db6 <ucdr_deserialize_endian_double+0x14e>
 8012cc4:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012cc8:	706b      	strb	r3, [r5, #1]
 8012cca:	2e01      	cmp	r6, #1
 8012ccc:	f105 0302 	add.w	r3, r5, #2
 8012cd0:	d075      	beq.n	8012dbe <ucdr_deserialize_endian_double+0x156>
 8012cd2:	f898 3005 	ldrb.w	r3, [r8, #5]
 8012cd6:	70ab      	strb	r3, [r5, #2]
 8012cd8:	2e02      	cmp	r6, #2
 8012cda:	f105 0303 	add.w	r3, r5, #3
 8012cde:	d072      	beq.n	8012dc6 <ucdr_deserialize_endian_double+0x15e>
 8012ce0:	f898 3004 	ldrb.w	r3, [r8, #4]
 8012ce4:	70eb      	strb	r3, [r5, #3]
 8012ce6:	2e03      	cmp	r6, #3
 8012ce8:	f105 0304 	add.w	r3, r5, #4
 8012cec:	d06f      	beq.n	8012dce <ucdr_deserialize_endian_double+0x166>
 8012cee:	f898 3003 	ldrb.w	r3, [r8, #3]
 8012cf2:	712b      	strb	r3, [r5, #4]
 8012cf4:	2e04      	cmp	r6, #4
 8012cf6:	f105 0305 	add.w	r3, r5, #5
 8012cfa:	d06c      	beq.n	8012dd6 <ucdr_deserialize_endian_double+0x16e>
 8012cfc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012d00:	716b      	strb	r3, [r5, #5]
 8012d02:	2e05      	cmp	r6, #5
 8012d04:	f105 0306 	add.w	r3, r5, #6
 8012d08:	d069      	beq.n	8012dde <ucdr_deserialize_endian_double+0x176>
 8012d0a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d0e:	71ab      	strb	r3, [r5, #6]
 8012d10:	2e06      	cmp	r6, #6
 8012d12:	f105 0307 	add.w	r3, r5, #7
 8012d16:	d066      	beq.n	8012de6 <ucdr_deserialize_endian_double+0x17e>
 8012d18:	f898 3000 	ldrb.w	r3, [r8]
 8012d1c:	71eb      	strb	r3, [r5, #7]
 8012d1e:	6923      	ldr	r3, [r4, #16]
 8012d20:	68a2      	ldr	r2, [r4, #8]
 8012d22:	7da0      	ldrb	r0, [r4, #22]
 8012d24:	3308      	adds	r3, #8
 8012d26:	1b9e      	subs	r6, r3, r6
 8012d28:	2308      	movs	r3, #8
 8012d2a:	4452      	add	r2, sl
 8012d2c:	7563      	strb	r3, [r4, #21]
 8012d2e:	60a2      	str	r2, [r4, #8]
 8012d30:	6126      	str	r6, [r4, #16]
 8012d32:	f080 0001 	eor.w	r0, r0, #1
 8012d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d3a:	2108      	movs	r1, #8
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	f000 f86d 	bl	8012e1c <ucdr_check_final_buffer_behavior>
 8012d42:	b308      	cbz	r0, 8012d88 <ucdr_deserialize_endian_double+0x120>
 8012d44:	2f01      	cmp	r7, #1
 8012d46:	68a3      	ldr	r3, [r4, #8]
 8012d48:	d023      	beq.n	8012d92 <ucdr_deserialize_endian_double+0x12a>
 8012d4a:	79db      	ldrb	r3, [r3, #7]
 8012d4c:	702b      	strb	r3, [r5, #0]
 8012d4e:	68a3      	ldr	r3, [r4, #8]
 8012d50:	799b      	ldrb	r3, [r3, #6]
 8012d52:	706b      	strb	r3, [r5, #1]
 8012d54:	68a3      	ldr	r3, [r4, #8]
 8012d56:	795b      	ldrb	r3, [r3, #5]
 8012d58:	70ab      	strb	r3, [r5, #2]
 8012d5a:	68a3      	ldr	r3, [r4, #8]
 8012d5c:	791b      	ldrb	r3, [r3, #4]
 8012d5e:	70eb      	strb	r3, [r5, #3]
 8012d60:	68a3      	ldr	r3, [r4, #8]
 8012d62:	78db      	ldrb	r3, [r3, #3]
 8012d64:	712b      	strb	r3, [r5, #4]
 8012d66:	68a3      	ldr	r3, [r4, #8]
 8012d68:	789b      	ldrb	r3, [r3, #2]
 8012d6a:	716b      	strb	r3, [r5, #5]
 8012d6c:	68a3      	ldr	r3, [r4, #8]
 8012d6e:	785b      	ldrb	r3, [r3, #1]
 8012d70:	71ab      	strb	r3, [r5, #6]
 8012d72:	68a3      	ldr	r3, [r4, #8]
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	71eb      	strb	r3, [r5, #7]
 8012d78:	68a2      	ldr	r2, [r4, #8]
 8012d7a:	6923      	ldr	r3, [r4, #16]
 8012d7c:	3208      	adds	r2, #8
 8012d7e:	3308      	adds	r3, #8
 8012d80:	2108      	movs	r1, #8
 8012d82:	60a2      	str	r2, [r4, #8]
 8012d84:	6123      	str	r3, [r4, #16]
 8012d86:	7561      	strb	r1, [r4, #21]
 8012d88:	7da0      	ldrb	r0, [r4, #22]
 8012d8a:	f080 0001 	eor.w	r0, r0, #1
 8012d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	606b      	str	r3, [r5, #4]
 8012d98:	602a      	str	r2, [r5, #0]
 8012d9a:	e7ed      	b.n	8012d78 <ucdr_deserialize_endian_double+0x110>
 8012d9c:	68a2      	ldr	r2, [r4, #8]
 8012d9e:	6923      	ldr	r3, [r4, #16]
 8012da0:	7da0      	ldrb	r0, [r4, #22]
 8012da2:	f884 9015 	strb.w	r9, [r4, #21]
 8012da6:	1b92      	subs	r2, r2, r6
 8012da8:	1b9b      	subs	r3, r3, r6
 8012daa:	60a2      	str	r2, [r4, #8]
 8012dac:	6123      	str	r3, [r4, #16]
 8012dae:	f080 0001 	eor.w	r0, r0, #1
 8012db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012db6:	68a3      	ldr	r3, [r4, #8]
 8012db8:	799b      	ldrb	r3, [r3, #6]
 8012dba:	706b      	strb	r3, [r5, #1]
 8012dbc:	1cab      	adds	r3, r5, #2
 8012dbe:	68a2      	ldr	r2, [r4, #8]
 8012dc0:	7952      	ldrb	r2, [r2, #5]
 8012dc2:	f803 2b01 	strb.w	r2, [r3], #1
 8012dc6:	68a2      	ldr	r2, [r4, #8]
 8012dc8:	7912      	ldrb	r2, [r2, #4]
 8012dca:	f803 2b01 	strb.w	r2, [r3], #1
 8012dce:	68a2      	ldr	r2, [r4, #8]
 8012dd0:	78d2      	ldrb	r2, [r2, #3]
 8012dd2:	f803 2b01 	strb.w	r2, [r3], #1
 8012dd6:	68a2      	ldr	r2, [r4, #8]
 8012dd8:	7892      	ldrb	r2, [r2, #2]
 8012dda:	f803 2b01 	strb.w	r2, [r3], #1
 8012dde:	68a2      	ldr	r2, [r4, #8]
 8012de0:	7852      	ldrb	r2, [r2, #1]
 8012de2:	f803 2b01 	strb.w	r2, [r3], #1
 8012de6:	68a2      	ldr	r2, [r4, #8]
 8012de8:	7812      	ldrb	r2, [r2, #0]
 8012dea:	701a      	strb	r2, [r3, #0]
 8012dec:	e797      	b.n	8012d1e <ucdr_deserialize_endian_double+0xb6>
 8012dee:	4641      	mov	r1, r8
 8012df0:	4632      	mov	r2, r6
 8012df2:	4628      	mov	r0, r5
 8012df4:	f00e fe1d 	bl	8021a32 <memcpy>
 8012df8:	68a1      	ldr	r1, [r4, #8]
 8012dfa:	4652      	mov	r2, sl
 8012dfc:	19a8      	adds	r0, r5, r6
 8012dfe:	f00e fe18 	bl	8021a32 <memcpy>
 8012e02:	e78c      	b.n	8012d1e <ucdr_deserialize_endian_double+0xb6>

08012e04 <ucdr_check_buffer_available_for>:
 8012e04:	7d83      	ldrb	r3, [r0, #22]
 8012e06:	b93b      	cbnz	r3, 8012e18 <ucdr_check_buffer_available_for+0x14>
 8012e08:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012e0c:	4419      	add	r1, r3
 8012e0e:	4288      	cmp	r0, r1
 8012e10:	bf34      	ite	cc
 8012e12:	2000      	movcc	r0, #0
 8012e14:	2001      	movcs	r0, #1
 8012e16:	4770      	bx	lr
 8012e18:	2000      	movs	r0, #0
 8012e1a:	4770      	bx	lr

08012e1c <ucdr_check_final_buffer_behavior>:
 8012e1c:	7d83      	ldrb	r3, [r0, #22]
 8012e1e:	b943      	cbnz	r3, 8012e32 <ucdr_check_final_buffer_behavior+0x16>
 8012e20:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012e24:	4291      	cmp	r1, r2
 8012e26:	b510      	push	{r4, lr}
 8012e28:	4604      	mov	r4, r0
 8012e2a:	d205      	bcs.n	8012e38 <ucdr_check_final_buffer_behavior+0x1c>
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	4618      	mov	r0, r3
 8012e30:	bd10      	pop	{r4, pc}
 8012e32:	2300      	movs	r3, #0
 8012e34:	4618      	mov	r0, r3
 8012e36:	4770      	bx	lr
 8012e38:	6982      	ldr	r2, [r0, #24]
 8012e3a:	b13a      	cbz	r2, 8012e4c <ucdr_check_final_buffer_behavior+0x30>
 8012e3c:	69c1      	ldr	r1, [r0, #28]
 8012e3e:	4790      	blx	r2
 8012e40:	f080 0301 	eor.w	r3, r0, #1
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	75a0      	strb	r0, [r4, #22]
 8012e48:	4618      	mov	r0, r3
 8012e4a:	bd10      	pop	{r4, pc}
 8012e4c:	2001      	movs	r0, #1
 8012e4e:	75a0      	strb	r0, [r4, #22]
 8012e50:	e7fa      	b.n	8012e48 <ucdr_check_final_buffer_behavior+0x2c>
 8012e52:	bf00      	nop

08012e54 <ucdr_set_on_full_buffer_callback>:
 8012e54:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop

08012e5c <ucdr_init_buffer_origin_offset_endian>:
 8012e5c:	b410      	push	{r4}
 8012e5e:	9c01      	ldr	r4, [sp, #4]
 8012e60:	6001      	str	r1, [r0, #0]
 8012e62:	440a      	add	r2, r1
 8012e64:	6042      	str	r2, [r0, #4]
 8012e66:	190a      	adds	r2, r1, r4
 8012e68:	441c      	add	r4, r3
 8012e6a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8012e6e:	6082      	str	r2, [r0, #8]
 8012e70:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012e74:	7503      	strb	r3, [r0, #20]
 8012e76:	2200      	movs	r2, #0
 8012e78:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e80:	7542      	strb	r2, [r0, #21]
 8012e82:	7582      	strb	r2, [r0, #22]
 8012e84:	4770      	bx	lr
 8012e86:	bf00      	nop

08012e88 <ucdr_init_buffer_origin_offset>:
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	9c04      	ldr	r4, [sp, #16]
 8012e8e:	9400      	str	r4, [sp, #0]
 8012e90:	2401      	movs	r4, #1
 8012e92:	9401      	str	r4, [sp, #4]
 8012e94:	f7ff ffe2 	bl	8012e5c <ucdr_init_buffer_origin_offset_endian>
 8012e98:	b002      	add	sp, #8
 8012e9a:	bd10      	pop	{r4, pc}

08012e9c <ucdr_init_buffer_origin>:
 8012e9c:	b510      	push	{r4, lr}
 8012e9e:	b082      	sub	sp, #8
 8012ea0:	2400      	movs	r4, #0
 8012ea2:	9400      	str	r4, [sp, #0]
 8012ea4:	f7ff fff0 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 8012ea8:	b002      	add	sp, #8
 8012eaa:	bd10      	pop	{r4, pc}

08012eac <ucdr_init_buffer>:
 8012eac:	2300      	movs	r3, #0
 8012eae:	f7ff bff5 	b.w	8012e9c <ucdr_init_buffer_origin>
 8012eb2:	bf00      	nop

08012eb4 <ucdr_alignment>:
 8012eb4:	fbb0 f3f1 	udiv	r3, r0, r1
 8012eb8:	fb03 0011 	mls	r0, r3, r1, r0
 8012ebc:	1a08      	subs	r0, r1, r0
 8012ebe:	3901      	subs	r1, #1
 8012ec0:	4008      	ands	r0, r1
 8012ec2:	4770      	bx	lr

08012ec4 <ucdr_buffer_alignment>:
 8012ec4:	7d43      	ldrb	r3, [r0, #21]
 8012ec6:	428b      	cmp	r3, r1
 8012ec8:	d208      	bcs.n	8012edc <ucdr_buffer_alignment+0x18>
 8012eca:	6900      	ldr	r0, [r0, #16]
 8012ecc:	fbb0 f3f1 	udiv	r3, r0, r1
 8012ed0:	fb01 0013 	mls	r0, r1, r3, r0
 8012ed4:	1a08      	subs	r0, r1, r0
 8012ed6:	3901      	subs	r1, #1
 8012ed8:	4008      	ands	r0, r1
 8012eda:	4770      	bx	lr
 8012edc:	2000      	movs	r0, #0
 8012ede:	4770      	bx	lr

08012ee0 <ucdr_align_to>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	460d      	mov	r5, r1
 8012ee6:	f7ff ffed 	bl	8012ec4 <ucdr_buffer_alignment>
 8012eea:	68a3      	ldr	r3, [r4, #8]
 8012eec:	6921      	ldr	r1, [r4, #16]
 8012eee:	7565      	strb	r5, [r4, #21]
 8012ef0:	181a      	adds	r2, r3, r0
 8012ef2:	6863      	ldr	r3, [r4, #4]
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	4408      	add	r0, r1
 8012ef8:	bf28      	it	cs
 8012efa:	4613      	movcs	r3, r2
 8012efc:	6120      	str	r0, [r4, #16]
 8012efe:	60a3      	str	r3, [r4, #8]
 8012f00:	bd38      	pop	{r3, r4, r5, pc}
 8012f02:	bf00      	nop

08012f04 <ucdr_buffer_length>:
 8012f04:	6882      	ldr	r2, [r0, #8]
 8012f06:	6800      	ldr	r0, [r0, #0]
 8012f08:	1a10      	subs	r0, r2, r0
 8012f0a:	4770      	bx	lr

08012f0c <ucdr_buffer_remaining>:
 8012f0c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8012f10:	1a10      	subs	r0, r2, r0
 8012f12:	4770      	bx	lr

08012f14 <ucdr_check_final_buffer_behavior_array>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	7d83      	ldrb	r3, [r0, #22]
 8012f18:	b963      	cbnz	r3, 8012f34 <ucdr_check_final_buffer_behavior_array+0x20>
 8012f1a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	4604      	mov	r4, r0
 8012f22:	460d      	mov	r5, r1
 8012f24:	d308      	bcc.n	8012f38 <ucdr_check_final_buffer_behavior_array+0x24>
 8012f26:	b139      	cbz	r1, 8012f38 <ucdr_check_final_buffer_behavior_array+0x24>
 8012f28:	6983      	ldr	r3, [r0, #24]
 8012f2a:	b163      	cbz	r3, 8012f46 <ucdr_check_final_buffer_behavior_array+0x32>
 8012f2c:	69c1      	ldr	r1, [r0, #28]
 8012f2e:	4798      	blx	r3
 8012f30:	75a0      	strb	r0, [r4, #22]
 8012f32:	b108      	cbz	r0, 8012f38 <ucdr_check_final_buffer_behavior_array+0x24>
 8012f34:	2000      	movs	r0, #0
 8012f36:	bd38      	pop	{r3, r4, r5, pc}
 8012f38:	4620      	mov	r0, r4
 8012f3a:	f7ff ffe7 	bl	8012f0c <ucdr_buffer_remaining>
 8012f3e:	42a8      	cmp	r0, r5
 8012f40:	bf28      	it	cs
 8012f42:	4628      	movcs	r0, r5
 8012f44:	bd38      	pop	{r3, r4, r5, pc}
 8012f46:	2301      	movs	r3, #1
 8012f48:	7583      	strb	r3, [r0, #22]
 8012f4a:	e7f3      	b.n	8012f34 <ucdr_check_final_buffer_behavior_array+0x20>

08012f4c <ucdr_advance_buffer>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	4604      	mov	r4, r0
 8012f50:	460d      	mov	r5, r1
 8012f52:	f7ff ff57 	bl	8012e04 <ucdr_check_buffer_available_for>
 8012f56:	b178      	cbz	r0, 8012f78 <ucdr_advance_buffer+0x2c>
 8012f58:	6923      	ldr	r3, [r4, #16]
 8012f5a:	68a2      	ldr	r2, [r4, #8]
 8012f5c:	442b      	add	r3, r5
 8012f5e:	6123      	str	r3, [r4, #16]
 8012f60:	2301      	movs	r3, #1
 8012f62:	442a      	add	r2, r5
 8012f64:	7563      	strb	r3, [r4, #21]
 8012f66:	60a2      	str	r2, [r4, #8]
 8012f68:	bd38      	pop	{r3, r4, r5, pc}
 8012f6a:	68a2      	ldr	r2, [r4, #8]
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	4402      	add	r2, r0
 8012f70:	4403      	add	r3, r0
 8012f72:	1a2d      	subs	r5, r5, r0
 8012f74:	60a2      	str	r2, [r4, #8]
 8012f76:	6123      	str	r3, [r4, #16]
 8012f78:	4629      	mov	r1, r5
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	f7ff ffc9 	bl	8012f14 <ucdr_check_final_buffer_behavior_array>
 8012f82:	2800      	cmp	r0, #0
 8012f84:	d1f1      	bne.n	8012f6a <ucdr_advance_buffer+0x1e>
 8012f86:	2301      	movs	r3, #1
 8012f88:	7563      	strb	r3, [r4, #21]
 8012f8a:	bd38      	pop	{r3, r4, r5, pc}

08012f8c <ucdr_serialize_sequence_char>:
 8012f8c:	b570      	push	{r4, r5, r6, lr}
 8012f8e:	4615      	mov	r5, r2
 8012f90:	460e      	mov	r6, r1
 8012f92:	7d01      	ldrb	r1, [r0, #20]
 8012f94:	4604      	mov	r4, r0
 8012f96:	f7fe fa29 	bl	80113ec <ucdr_serialize_endian_uint32_t>
 8012f9a:	b90d      	cbnz	r5, 8012fa0 <ucdr_serialize_sequence_char+0x14>
 8012f9c:	2001      	movs	r0, #1
 8012f9e:	bd70      	pop	{r4, r5, r6, pc}
 8012fa0:	7d21      	ldrb	r1, [r4, #20]
 8012fa2:	462b      	mov	r3, r5
 8012fa4:	4632      	mov	r2, r6
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fac:	f7fd ba5c 	b.w	8010468 <ucdr_serialize_endian_array_char>

08012fb0 <ucdr_deserialize_sequence_char>:
 8012fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb4:	461d      	mov	r5, r3
 8012fb6:	4616      	mov	r6, r2
 8012fb8:	460f      	mov	r7, r1
 8012fba:	461a      	mov	r2, r3
 8012fbc:	7d01      	ldrb	r1, [r0, #20]
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	f7fe fb3c 	bl	801163c <ucdr_deserialize_endian_uint32_t>
 8012fc4:	682b      	ldr	r3, [r5, #0]
 8012fc6:	429e      	cmp	r6, r3
 8012fc8:	bf3c      	itt	cc
 8012fca:	2201      	movcc	r2, #1
 8012fcc:	75a2      	strbcc	r2, [r4, #22]
 8012fce:	b913      	cbnz	r3, 8012fd6 <ucdr_deserialize_sequence_char+0x26>
 8012fd0:	2001      	movs	r0, #1
 8012fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd6:	7d21      	ldrb	r1, [r4, #20]
 8012fd8:	463a      	mov	r2, r7
 8012fda:	4620      	mov	r0, r4
 8012fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe0:	f7fd ba74 	b.w	80104cc <ucdr_deserialize_endian_array_char>

08012fe4 <ucdr_serialize_sequence_bool>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	4615      	mov	r5, r2
 8012fe8:	460e      	mov	r6, r1
 8012fea:	7d01      	ldrb	r1, [r0, #20]
 8012fec:	4604      	mov	r4, r0
 8012fee:	f7fe f9fd 	bl	80113ec <ucdr_serialize_endian_uint32_t>
 8012ff2:	b90d      	cbnz	r5, 8012ff8 <ucdr_serialize_sequence_bool+0x14>
 8012ff4:	2001      	movs	r0, #1
 8012ff6:	bd70      	pop	{r4, r5, r6, pc}
 8012ff8:	7d21      	ldrb	r1, [r4, #20]
 8012ffa:	462b      	mov	r3, r5
 8012ffc:	4632      	mov	r2, r6
 8012ffe:	4620      	mov	r0, r4
 8013000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013004:	f7fd ba94 	b.w	8010530 <ucdr_serialize_endian_array_bool>

08013008 <ucdr_deserialize_sequence_bool>:
 8013008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801300c:	461d      	mov	r5, r3
 801300e:	4616      	mov	r6, r2
 8013010:	460f      	mov	r7, r1
 8013012:	461a      	mov	r2, r3
 8013014:	7d01      	ldrb	r1, [r0, #20]
 8013016:	4604      	mov	r4, r0
 8013018:	f7fe fb10 	bl	801163c <ucdr_deserialize_endian_uint32_t>
 801301c:	682b      	ldr	r3, [r5, #0]
 801301e:	429e      	cmp	r6, r3
 8013020:	bf3c      	itt	cc
 8013022:	2201      	movcc	r2, #1
 8013024:	75a2      	strbcc	r2, [r4, #22]
 8013026:	b913      	cbnz	r3, 801302e <ucdr_deserialize_sequence_bool+0x26>
 8013028:	2001      	movs	r0, #1
 801302a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801302e:	7d21      	ldrb	r1, [r4, #20]
 8013030:	463a      	mov	r2, r7
 8013032:	4620      	mov	r0, r4
 8013034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013038:	f7fd baac 	b.w	8010594 <ucdr_deserialize_endian_array_bool>

0801303c <ucdr_serialize_sequence_uint8_t>:
 801303c:	b570      	push	{r4, r5, r6, lr}
 801303e:	4615      	mov	r5, r2
 8013040:	460e      	mov	r6, r1
 8013042:	7d01      	ldrb	r1, [r0, #20]
 8013044:	4604      	mov	r4, r0
 8013046:	f7fe f9d1 	bl	80113ec <ucdr_serialize_endian_uint32_t>
 801304a:	b90d      	cbnz	r5, 8013050 <ucdr_serialize_sequence_uint8_t+0x14>
 801304c:	2001      	movs	r0, #1
 801304e:	bd70      	pop	{r4, r5, r6, pc}
 8013050:	7d21      	ldrb	r1, [r4, #20]
 8013052:	462b      	mov	r3, r5
 8013054:	4632      	mov	r2, r6
 8013056:	4620      	mov	r0, r4
 8013058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801305c:	f7fd bafe 	b.w	801065c <ucdr_serialize_endian_array_uint8_t>

08013060 <ucdr_deserialize_sequence_uint8_t>:
 8013060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013064:	461d      	mov	r5, r3
 8013066:	4616      	mov	r6, r2
 8013068:	460f      	mov	r7, r1
 801306a:	461a      	mov	r2, r3
 801306c:	7d01      	ldrb	r1, [r0, #20]
 801306e:	4604      	mov	r4, r0
 8013070:	f7fe fae4 	bl	801163c <ucdr_deserialize_endian_uint32_t>
 8013074:	682b      	ldr	r3, [r5, #0]
 8013076:	429e      	cmp	r6, r3
 8013078:	bf3c      	itt	cc
 801307a:	2201      	movcc	r2, #1
 801307c:	75a2      	strbcc	r2, [r4, #22]
 801307e:	b913      	cbnz	r3, 8013086 <ucdr_deserialize_sequence_uint8_t+0x26>
 8013080:	2001      	movs	r0, #1
 8013082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013086:	7d21      	ldrb	r1, [r4, #20]
 8013088:	463a      	mov	r2, r7
 801308a:	4620      	mov	r0, r4
 801308c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013090:	f7fd bb48 	b.w	8010724 <ucdr_deserialize_endian_array_uint8_t>

08013094 <ucdr_serialize_sequence_int64_t>:
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	4615      	mov	r5, r2
 8013098:	460e      	mov	r6, r1
 801309a:	7d01      	ldrb	r1, [r0, #20]
 801309c:	4604      	mov	r4, r0
 801309e:	f7fe f9a5 	bl	80113ec <ucdr_serialize_endian_uint32_t>
 80130a2:	b90d      	cbnz	r5, 80130a8 <ucdr_serialize_sequence_int64_t+0x14>
 80130a4:	2001      	movs	r0, #1
 80130a6:	bd70      	pop	{r4, r5, r6, pc}
 80130a8:	7d21      	ldrb	r1, [r4, #20]
 80130aa:	462b      	mov	r3, r5
 80130ac:	4632      	mov	r2, r6
 80130ae:	4620      	mov	r0, r4
 80130b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130b4:	f7fd bc14 	b.w	80108e0 <ucdr_serialize_endian_array_int64_t>

080130b8 <ucdr_deserialize_sequence_int64_t>:
 80130b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130bc:	461d      	mov	r5, r3
 80130be:	4616      	mov	r6, r2
 80130c0:	460f      	mov	r7, r1
 80130c2:	461a      	mov	r2, r3
 80130c4:	7d01      	ldrb	r1, [r0, #20]
 80130c6:	4604      	mov	r4, r0
 80130c8:	f7fe fab8 	bl	801163c <ucdr_deserialize_endian_uint32_t>
 80130cc:	682b      	ldr	r3, [r5, #0]
 80130ce:	429e      	cmp	r6, r3
 80130d0:	bf3c      	itt	cc
 80130d2:	2201      	movcc	r2, #1
 80130d4:	75a2      	strbcc	r2, [r4, #22]
 80130d6:	b913      	cbnz	r3, 80130de <ucdr_deserialize_sequence_int64_t+0x26>
 80130d8:	2001      	movs	r0, #1
 80130da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130de:	7d21      	ldrb	r1, [r4, #20]
 80130e0:	463a      	mov	r2, r7
 80130e2:	4620      	mov	r0, r4
 80130e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130e8:	f7fd bc50 	b.w	801098c <ucdr_deserialize_endian_array_int64_t>

080130ec <ucdr_serialize_sequence_double>:
 80130ec:	b570      	push	{r4, r5, r6, lr}
 80130ee:	4615      	mov	r5, r2
 80130f0:	460e      	mov	r6, r1
 80130f2:	7d01      	ldrb	r1, [r0, #20]
 80130f4:	4604      	mov	r4, r0
 80130f6:	f7fe f979 	bl	80113ec <ucdr_serialize_endian_uint32_t>
 80130fa:	b90d      	cbnz	r5, 8013100 <ucdr_serialize_sequence_double+0x14>
 80130fc:	2001      	movs	r0, #1
 80130fe:	bd70      	pop	{r4, r5, r6, pc}
 8013100:	7d21      	ldrb	r1, [r4, #20]
 8013102:	462b      	mov	r3, r5
 8013104:	4632      	mov	r2, r6
 8013106:	4620      	mov	r0, r4
 8013108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801310c:	f7fd bd92 	b.w	8010c34 <ucdr_serialize_endian_array_double>

08013110 <ucdr_deserialize_sequence_double>:
 8013110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013114:	461d      	mov	r5, r3
 8013116:	4616      	mov	r6, r2
 8013118:	460f      	mov	r7, r1
 801311a:	461a      	mov	r2, r3
 801311c:	7d01      	ldrb	r1, [r0, #20]
 801311e:	4604      	mov	r4, r0
 8013120:	f7fe fa8c 	bl	801163c <ucdr_deserialize_endian_uint32_t>
 8013124:	682b      	ldr	r3, [r5, #0]
 8013126:	429e      	cmp	r6, r3
 8013128:	bf3c      	itt	cc
 801312a:	2201      	movcc	r2, #1
 801312c:	75a2      	strbcc	r2, [r4, #22]
 801312e:	b913      	cbnz	r3, 8013136 <ucdr_deserialize_sequence_double+0x26>
 8013130:	2001      	movs	r0, #1
 8013132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013136:	7d21      	ldrb	r1, [r4, #20]
 8013138:	463a      	mov	r2, r7
 801313a:	4620      	mov	r0, r4
 801313c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013140:	f7fd be22 	b.w	8010d88 <ucdr_deserialize_endian_array_double>

08013144 <uxr_buffer_delete_entity>:
 8013144:	b510      	push	{r4, lr}
 8013146:	2300      	movs	r3, #0
 8013148:	b08e      	sub	sp, #56	@ 0x38
 801314a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801314e:	2303      	movs	r3, #3
 8013150:	9300      	str	r3, [sp, #0]
 8013152:	2204      	movs	r2, #4
 8013154:	ab06      	add	r3, sp, #24
 8013156:	4604      	mov	r4, r0
 8013158:	9103      	str	r1, [sp, #12]
 801315a:	f001 f98b 	bl	8014474 <uxr_prepare_stream_to_write_submessage>
 801315e:	b918      	cbnz	r0, 8013168 <uxr_buffer_delete_entity+0x24>
 8013160:	4604      	mov	r4, r0
 8013162:	4620      	mov	r0, r4
 8013164:	b00e      	add	sp, #56	@ 0x38
 8013166:	bd10      	pop	{r4, pc}
 8013168:	9902      	ldr	r1, [sp, #8]
 801316a:	aa05      	add	r2, sp, #20
 801316c:	4620      	mov	r0, r4
 801316e:	f001 fab7 	bl	80146e0 <uxr_init_base_object_request>
 8013172:	a905      	add	r1, sp, #20
 8013174:	4604      	mov	r4, r0
 8013176:	a806      	add	r0, sp, #24
 8013178:	f002 fd3c 	bl	8015bf4 <uxr_serialize_DELETE_Payload>
 801317c:	4620      	mov	r0, r4
 801317e:	b00e      	add	sp, #56	@ 0x38
 8013180:	bd10      	pop	{r4, pc}
 8013182:	bf00      	nop

08013184 <uxr_common_create_entity>:
 8013184:	b510      	push	{r4, lr}
 8013186:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801318a:	b08c      	sub	sp, #48	@ 0x30
 801318c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013190:	f1bc 0f01 	cmp.w	ip, #1
 8013194:	bf0c      	ite	eq
 8013196:	f003 0201 	andeq.w	r2, r3, #1
 801319a:	2200      	movne	r2, #0
 801319c:	330e      	adds	r3, #14
 801319e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80131a2:	9101      	str	r1, [sp, #4]
 80131a4:	441a      	add	r2, r3
 80131a6:	2301      	movs	r3, #1
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	9903      	ldr	r1, [sp, #12]
 80131ac:	ab04      	add	r3, sp, #16
 80131ae:	b292      	uxth	r2, r2
 80131b0:	4604      	mov	r4, r0
 80131b2:	f001 f95f 	bl	8014474 <uxr_prepare_stream_to_write_submessage>
 80131b6:	b918      	cbnz	r0, 80131c0 <uxr_common_create_entity+0x3c>
 80131b8:	4604      	mov	r4, r0
 80131ba:	4620      	mov	r0, r4
 80131bc:	b00c      	add	sp, #48	@ 0x30
 80131be:	bd10      	pop	{r4, pc}
 80131c0:	9902      	ldr	r1, [sp, #8]
 80131c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80131c4:	4620      	mov	r0, r4
 80131c6:	f001 fa8b 	bl	80146e0 <uxr_init_base_object_request>
 80131ca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80131cc:	4604      	mov	r4, r0
 80131ce:	a804      	add	r0, sp, #16
 80131d0:	f002 fc6c 	bl	8015aac <uxr_serialize_CREATE_Payload>
 80131d4:	4620      	mov	r0, r4
 80131d6:	b00c      	add	sp, #48	@ 0x30
 80131d8:	bd10      	pop	{r4, pc}
 80131da:	bf00      	nop

080131dc <uxr_buffer_create_participant_bin>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80131e2:	ac11      	add	r4, sp, #68	@ 0x44
 80131e4:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80131e8:	2303      	movs	r3, #3
 80131ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80131ee:	7223      	strb	r3, [r4, #8]
 80131f0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80131f2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80131f6:	2201      	movs	r2, #1
 80131f8:	2100      	movs	r1, #0
 80131fa:	4605      	mov	r5, r0
 80131fc:	7122      	strb	r2, [r4, #4]
 80131fe:	f88d 1014 	strb.w	r1, [sp, #20]
 8013202:	b1cb      	cbz	r3, 8013238 <uxr_buffer_create_participant_bin+0x5c>
 8013204:	f88d 201c 	strb.w	r2, [sp, #28]
 8013208:	9308      	str	r3, [sp, #32]
 801320a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801320e:	a915      	add	r1, sp, #84	@ 0x54
 8013210:	a809      	add	r0, sp, #36	@ 0x24
 8013212:	f7ff fe4b 	bl	8012eac <ucdr_init_buffer>
 8013216:	a905      	add	r1, sp, #20
 8013218:	a809      	add	r0, sp, #36	@ 0x24
 801321a:	f001 fff5 	bl	8015208 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801321e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013220:	9600      	str	r6, [sp, #0]
 8013222:	9401      	str	r4, [sp, #4]
 8013224:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013228:	60e3      	str	r3, [r4, #12]
 801322a:	4628      	mov	r0, r5
 801322c:	b29b      	uxth	r3, r3
 801322e:	f7ff ffa9 	bl	8013184 <uxr_common_create_entity>
 8013232:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8013236:	bd70      	pop	{r4, r5, r6, pc}
 8013238:	f88d 301c 	strb.w	r3, [sp, #28]
 801323c:	e7e5      	b.n	801320a <uxr_buffer_create_participant_bin+0x2e>
 801323e:	bf00      	nop

08013240 <uxr_buffer_create_topic_bin>:
 8013240:	b570      	push	{r4, r5, r6, lr}
 8013242:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8013246:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801324a:	9105      	str	r1, [sp, #20]
 801324c:	4605      	mov	r5, r0
 801324e:	a997      	add	r1, sp, #604	@ 0x25c
 8013250:	4618      	mov	r0, r3
 8013252:	2302      	movs	r3, #2
 8013254:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8013258:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801325c:	f000 f9d0 	bl	8013600 <uxr_object_id_to_raw>
 8013260:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8013262:	9306      	str	r3, [sp, #24]
 8013264:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8013266:	930a      	str	r3, [sp, #40]	@ 0x28
 8013268:	2303      	movs	r3, #3
 801326a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801326e:	2301      	movs	r3, #1
 8013270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013274:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013278:	a917      	add	r1, sp, #92	@ 0x5c
 801327a:	2300      	movs	r3, #0
 801327c:	a80b      	add	r0, sp, #44	@ 0x2c
 801327e:	f88d 301c 	strb.w	r3, [sp, #28]
 8013282:	f7ff fe13 	bl	8012eac <ucdr_init_buffer>
 8013286:	a906      	add	r1, sp, #24
 8013288:	a80b      	add	r0, sp, #44	@ 0x2c
 801328a:	f001 ffdf 	bl	801524c <uxr_serialize_OBJK_Topic_Binary>
 801328e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013290:	9316      	str	r3, [sp, #88]	@ 0x58
 8013292:	ac13      	add	r4, sp, #76	@ 0x4c
 8013294:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013298:	9600      	str	r6, [sp, #0]
 801329a:	9401      	str	r4, [sp, #4]
 801329c:	b29b      	uxth	r3, r3
 801329e:	4628      	mov	r0, r5
 80132a0:	f7ff ff70 	bl	8013184 <uxr_common_create_entity>
 80132a4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80132a8:	bd70      	pop	{r4, r5, r6, pc}
 80132aa:	bf00      	nop

080132ac <uxr_buffer_create_publisher_bin>:
 80132ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ae:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80132b2:	4605      	mov	r5, r0
 80132b4:	9105      	str	r1, [sp, #20]
 80132b6:	4618      	mov	r0, r3
 80132b8:	2603      	movs	r6, #3
 80132ba:	a992      	add	r1, sp, #584	@ 0x248
 80132bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80132c0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80132c4:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80132c8:	f000 f99a 	bl	8013600 <uxr_object_id_to_raw>
 80132cc:	2300      	movs	r3, #0
 80132ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80132d2:	a912      	add	r1, sp, #72	@ 0x48
 80132d4:	a806      	add	r0, sp, #24
 80132d6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80132da:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80132de:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80132e2:	f7ff fde3 	bl	8012eac <ucdr_init_buffer>
 80132e6:	a993      	add	r1, sp, #588	@ 0x24c
 80132e8:	a806      	add	r0, sp, #24
 80132ea:	f002 f863 	bl	80153b4 <uxr_serialize_OBJK_Publisher_Binary>
 80132ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80132f2:	ac0e      	add	r4, sp, #56	@ 0x38
 80132f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80132f8:	9700      	str	r7, [sp, #0]
 80132fa:	9401      	str	r4, [sp, #4]
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	4628      	mov	r0, r5
 8013300:	f7ff ff40 	bl	8013184 <uxr_common_create_entity>
 8013304:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8013308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801330a:	bf00      	nop

0801330c <uxr_buffer_create_subscriber_bin>:
 801330c:	b570      	push	{r4, r5, r6, lr}
 801330e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8013312:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013316:	9105      	str	r1, [sp, #20]
 8013318:	4605      	mov	r5, r0
 801331a:	a992      	add	r1, sp, #584	@ 0x248
 801331c:	4618      	mov	r0, r3
 801331e:	2304      	movs	r3, #4
 8013320:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8013324:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8013328:	f000 f96a 	bl	8013600 <uxr_object_id_to_raw>
 801332c:	2300      	movs	r3, #0
 801332e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013332:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8013336:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801333a:	a912      	add	r1, sp, #72	@ 0x48
 801333c:	2303      	movs	r3, #3
 801333e:	a806      	add	r0, sp, #24
 8013340:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013344:	f7ff fdb2 	bl	8012eac <ucdr_init_buffer>
 8013348:	a993      	add	r1, sp, #588	@ 0x24c
 801334a:	a806      	add	r0, sp, #24
 801334c:	f002 f8e2 	bl	8015514 <uxr_serialize_OBJK_Subscriber_Binary>
 8013350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013352:	9311      	str	r3, [sp, #68]	@ 0x44
 8013354:	ac0e      	add	r4, sp, #56	@ 0x38
 8013356:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801335a:	9600      	str	r6, [sp, #0]
 801335c:	9401      	str	r4, [sp, #4]
 801335e:	b29b      	uxth	r3, r3
 8013360:	4628      	mov	r0, r5
 8013362:	f7ff ff0f 	bl	8013184 <uxr_common_create_entity>
 8013366:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 801336a:	bd70      	pop	{r4, r5, r6, pc}

0801336c <uxr_buffer_create_datawriter_bin>:
 801336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013370:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013374:	ac1d      	add	r4, sp, #116	@ 0x74
 8013376:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801337a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801337e:	9105      	str	r1, [sp, #20]
 8013380:	4606      	mov	r6, r0
 8013382:	a9a1      	add	r1, sp, #644	@ 0x284
 8013384:	4618      	mov	r0, r3
 8013386:	2305      	movs	r3, #5
 8013388:	7123      	strb	r3, [r4, #4]
 801338a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801338e:	2703      	movs	r7, #3
 8013390:	f000 f936 	bl	8013600 <uxr_object_id_to_raw>
 8013394:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8013396:	7227      	strb	r7, [r4, #8]
 8013398:	a90e      	add	r1, sp, #56	@ 0x38
 801339a:	f000 f931 	bl	8013600 <uxr_object_id_to_raw>
 801339e:	2300      	movs	r3, #0
 80133a0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80133a4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80133a8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80133ac:	3d00      	subs	r5, #0
 80133ae:	bf18      	it	ne
 80133b0:	2501      	movne	r5, #1
 80133b2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80133b6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80133ba:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80133be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80133c2:	2301      	movs	r3, #1
 80133c4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80133c8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80133cc:	bb8a      	cbnz	r2, 8013432 <uxr_buffer_create_datawriter_bin+0xc6>
 80133ce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80133d2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80133d6:	f04f 0c13 	mov.w	ip, #19
 80133da:	250b      	movs	r5, #11
 80133dc:	2221      	movs	r2, #33	@ 0x21
 80133de:	2111      	movs	r1, #17
 80133e0:	2009      	movs	r0, #9
 80133e2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80133e6:	b923      	cbnz	r3, 80133f2 <uxr_buffer_create_datawriter_bin+0x86>
 80133e8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80133ec:	4672      	mov	r2, lr
 80133ee:	4661      	mov	r1, ip
 80133f0:	4628      	mov	r0, r5
 80133f2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d025      	beq.n	8013446 <uxr_buffer_create_datawriter_bin+0xda>
 80133fa:	2b03      	cmp	r3, #3
 80133fc:	d029      	beq.n	8013452 <uxr_buffer_create_datawriter_bin+0xe6>
 80133fe:	b32b      	cbz	r3, 801344c <uxr_buffer_create_datawriter_bin+0xe0>
 8013400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013404:	a921      	add	r1, sp, #132	@ 0x84
 8013406:	a806      	add	r0, sp, #24
 8013408:	f7ff fd50 	bl	8012eac <ucdr_init_buffer>
 801340c:	a90e      	add	r1, sp, #56	@ 0x38
 801340e:	a806      	add	r0, sp, #24
 8013410:	f002 f932 	bl	8015678 <uxr_serialize_OBJK_DataWriter_Binary>
 8013414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013416:	f8cd 8000 	str.w	r8, [sp]
 801341a:	9401      	str	r4, [sp, #4]
 801341c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013420:	60e3      	str	r3, [r4, #12]
 8013422:	4630      	mov	r0, r6
 8013424:	b29b      	uxth	r3, r3
 8013426:	f7ff fead 	bl	8013184 <uxr_common_create_entity>
 801342a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801342e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013432:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8013436:	f04f 0c12 	mov.w	ip, #18
 801343a:	250a      	movs	r5, #10
 801343c:	2220      	movs	r2, #32
 801343e:	2110      	movs	r1, #16
 8013440:	2008      	movs	r0, #8
 8013442:	2702      	movs	r7, #2
 8013444:	e7cd      	b.n	80133e2 <uxr_buffer_create_datawriter_bin+0x76>
 8013446:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801344a:	e7d9      	b.n	8013400 <uxr_buffer_create_datawriter_bin+0x94>
 801344c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8013450:	e7d6      	b.n	8013400 <uxr_buffer_create_datawriter_bin+0x94>
 8013452:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8013456:	e7d3      	b.n	8013400 <uxr_buffer_create_datawriter_bin+0x94>

08013458 <uxr_buffer_create_datareader_bin>:
 8013458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8013460:	ac1f      	add	r4, sp, #124	@ 0x7c
 8013462:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013466:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 801346a:	9105      	str	r1, [sp, #20]
 801346c:	4606      	mov	r6, r0
 801346e:	a9a3      	add	r1, sp, #652	@ 0x28c
 8013470:	4618      	mov	r0, r3
 8013472:	2306      	movs	r3, #6
 8013474:	7123      	strb	r3, [r4, #4]
 8013476:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801347a:	2703      	movs	r7, #3
 801347c:	f000 f8c0 	bl	8013600 <uxr_object_id_to_raw>
 8013480:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8013482:	7227      	strb	r7, [r4, #8]
 8013484:	a90e      	add	r1, sp, #56	@ 0x38
 8013486:	f000 f8bb 	bl	8013600 <uxr_object_id_to_raw>
 801348a:	2300      	movs	r3, #0
 801348c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8013490:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8013494:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8013498:	3d00      	subs	r5, #0
 801349a:	bf18      	it	ne
 801349c:	2501      	movne	r5, #1
 801349e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80134a2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80134a6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80134aa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80134ae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80134b2:	2301      	movs	r3, #1
 80134b4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80134b8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80134bc:	bb8a      	cbnz	r2, 8013522 <uxr_buffer_create_datareader_bin+0xca>
 80134be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80134c2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80134c6:	f04f 0c13 	mov.w	ip, #19
 80134ca:	250b      	movs	r5, #11
 80134cc:	2221      	movs	r2, #33	@ 0x21
 80134ce:	2111      	movs	r1, #17
 80134d0:	2009      	movs	r0, #9
 80134d2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80134d6:	b923      	cbnz	r3, 80134e2 <uxr_buffer_create_datareader_bin+0x8a>
 80134d8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80134dc:	4672      	mov	r2, lr
 80134de:	4661      	mov	r1, ip
 80134e0:	4628      	mov	r0, r5
 80134e2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d025      	beq.n	8013536 <uxr_buffer_create_datareader_bin+0xde>
 80134ea:	2b03      	cmp	r3, #3
 80134ec:	d029      	beq.n	8013542 <uxr_buffer_create_datareader_bin+0xea>
 80134ee:	b32b      	cbz	r3, 801353c <uxr_buffer_create_datareader_bin+0xe4>
 80134f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80134f4:	a923      	add	r1, sp, #140	@ 0x8c
 80134f6:	a806      	add	r0, sp, #24
 80134f8:	f7ff fcd8 	bl	8012eac <ucdr_init_buffer>
 80134fc:	a90e      	add	r1, sp, #56	@ 0x38
 80134fe:	a806      	add	r0, sp, #24
 8013500:	f002 f87e 	bl	8015600 <uxr_serialize_OBJK_DataReader_Binary>
 8013504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013506:	f8cd 8000 	str.w	r8, [sp]
 801350a:	9401      	str	r4, [sp, #4]
 801350c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013510:	60e3      	str	r3, [r4, #12]
 8013512:	4630      	mov	r0, r6
 8013514:	b29b      	uxth	r3, r3
 8013516:	f7ff fe35 	bl	8013184 <uxr_common_create_entity>
 801351a:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801351e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013522:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8013526:	f04f 0c12 	mov.w	ip, #18
 801352a:	250a      	movs	r5, #10
 801352c:	2220      	movs	r2, #32
 801352e:	2110      	movs	r1, #16
 8013530:	2008      	movs	r0, #8
 8013532:	2702      	movs	r7, #2
 8013534:	e7cd      	b.n	80134d2 <uxr_buffer_create_datareader_bin+0x7a>
 8013536:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801353a:	e7d9      	b.n	80134f0 <uxr_buffer_create_datareader_bin+0x98>
 801353c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8013540:	e7d6      	b.n	80134f0 <uxr_buffer_create_datareader_bin+0x98>
 8013542:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8013546:	e7d3      	b.n	80134f0 <uxr_buffer_create_datareader_bin+0x98>

08013548 <uxr_buffer_create_replier_bin>:
 8013548:	b570      	push	{r4, r5, r6, lr}
 801354a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801354e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013552:	9105      	str	r1, [sp, #20]
 8013554:	4605      	mov	r5, r0
 8013556:	a999      	add	r1, sp, #612	@ 0x264
 8013558:	4618      	mov	r0, r3
 801355a:	2308      	movs	r3, #8
 801355c:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8013560:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8013564:	f000 f84c 	bl	8013600 <uxr_object_id_to_raw>
 8013568:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 801356a:	9306      	str	r3, [sp, #24]
 801356c:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 801356e:	9307      	str	r3, [sp, #28]
 8013570:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8013572:	9308      	str	r3, [sp, #32]
 8013574:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8013576:	930c      	str	r3, [sp, #48]	@ 0x30
 8013578:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801357a:	930a      	str	r3, [sp, #40]	@ 0x28
 801357c:	2301      	movs	r3, #1
 801357e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013582:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013586:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801358a:	a919      	add	r1, sp, #100	@ 0x64
 801358c:	2303      	movs	r3, #3
 801358e:	a80d      	add	r0, sp, #52	@ 0x34
 8013590:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8013594:	f7ff fc8a 	bl	8012eac <ucdr_init_buffer>
 8013598:	a906      	add	r1, sp, #24
 801359a:	a80d      	add	r0, sp, #52	@ 0x34
 801359c:	f002 f898 	bl	80156d0 <uxr_serialize_OBJK_Replier_Binary>
 80135a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80135a2:	9318      	str	r3, [sp, #96]	@ 0x60
 80135a4:	ac15      	add	r4, sp, #84	@ 0x54
 80135a6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80135aa:	9600      	str	r6, [sp, #0]
 80135ac:	9401      	str	r4, [sp, #4]
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7ff fde7 	bl	8013184 <uxr_common_create_entity>
 80135b6:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 80135ba:	bd70      	pop	{r4, r5, r6, pc}

080135bc <uxr_object_id>:
 80135bc:	b082      	sub	sp, #8
 80135be:	2300      	movs	r3, #0
 80135c0:	f88d 1006 	strb.w	r1, [sp, #6]
 80135c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80135c8:	f360 030f 	bfi	r3, r0, #0, #16
 80135cc:	f362 431f 	bfi	r3, r2, #16, #16
 80135d0:	4618      	mov	r0, r3
 80135d2:	b002      	add	sp, #8
 80135d4:	4770      	bx	lr
 80135d6:	bf00      	nop

080135d8 <uxr_object_id_from_raw>:
 80135d8:	7843      	ldrb	r3, [r0, #1]
 80135da:	7801      	ldrb	r1, [r0, #0]
 80135dc:	b082      	sub	sp, #8
 80135de:	f003 020f 	and.w	r2, r3, #15
 80135e2:	f88d 2006 	strb.w	r2, [sp, #6]
 80135e6:	091b      	lsrs	r3, r3, #4
 80135e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80135ec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80135f0:	2000      	movs	r0, #0
 80135f2:	f363 000f 	bfi	r0, r3, #0, #16
 80135f6:	f362 401f 	bfi	r0, r2, #16, #16
 80135fa:	b002      	add	sp, #8
 80135fc:	4770      	bx	lr
 80135fe:	bf00      	nop

08013600 <uxr_object_id_to_raw>:
 8013600:	4602      	mov	r2, r0
 8013602:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013606:	b082      	sub	sp, #8
 8013608:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801360c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013610:	f881 c000 	strb.w	ip, [r1]
 8013614:	7048      	strb	r0, [r1, #1]
 8013616:	b002      	add	sp, #8
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop

0801361c <on_get_fragmentation_info>:
 801361c:	b500      	push	{lr}
 801361e:	b08b      	sub	sp, #44	@ 0x2c
 8013620:	4601      	mov	r1, r0
 8013622:	2204      	movs	r2, #4
 8013624:	a802      	add	r0, sp, #8
 8013626:	f7ff fc41 	bl	8012eac <ucdr_init_buffer>
 801362a:	f10d 0305 	add.w	r3, sp, #5
 801362e:	f10d 0206 	add.w	r2, sp, #6
 8013632:	a901      	add	r1, sp, #4
 8013634:	a802      	add	r0, sp, #8
 8013636:	f001 f9d5 	bl	80149e4 <uxr_read_submessage_header>
 801363a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801363e:	2b0d      	cmp	r3, #13
 8013640:	d003      	beq.n	801364a <on_get_fragmentation_info+0x2e>
 8013642:	2000      	movs	r0, #0
 8013644:	b00b      	add	sp, #44	@ 0x2c
 8013646:	f85d fb04 	ldr.w	pc, [sp], #4
 801364a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801364e:	f013 0f02 	tst.w	r3, #2
 8013652:	bf14      	ite	ne
 8013654:	2002      	movne	r0, #2
 8013656:	2001      	moveq	r0, #1
 8013658:	b00b      	add	sp, #44	@ 0x2c
 801365a:	f85d fb04 	ldr.w	pc, [sp], #4
 801365e:	bf00      	nop

08013660 <read_submessage_get_info>:
 8013660:	b570      	push	{r4, r5, r6, lr}
 8013662:	2500      	movs	r5, #0
 8013664:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013668:	4604      	mov	r4, r0
 801366a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801366e:	460e      	mov	r6, r1
 8013670:	a810      	add	r0, sp, #64	@ 0x40
 8013672:	4629      	mov	r1, r5
 8013674:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013678:	f00e f973 	bl	8021962 <memset>
 801367c:	a903      	add	r1, sp, #12
 801367e:	4630      	mov	r0, r6
 8013680:	f002 faa4 	bl	8015bcc <uxr_deserialize_GET_INFO_Payload>
 8013684:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013688:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801368c:	4620      	mov	r0, r4
 801368e:	f001 f81f 	bl	80146d0 <uxr_session_header_offset>
 8013692:	462b      	mov	r3, r5
 8013694:	9000      	str	r0, [sp, #0]
 8013696:	220c      	movs	r2, #12
 8013698:	a905      	add	r1, sp, #20
 801369a:	a808      	add	r0, sp, #32
 801369c:	f7ff fbf4 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 80136a0:	a910      	add	r1, sp, #64	@ 0x40
 80136a2:	a808      	add	r0, sp, #32
 80136a4:	f002 fb04 	bl	8015cb0 <uxr_serialize_INFO_Payload>
 80136a8:	9b08      	ldr	r3, [sp, #32]
 80136aa:	462a      	mov	r2, r5
 80136ac:	4629      	mov	r1, r5
 80136ae:	4620      	mov	r0, r4
 80136b0:	f000 ffb8 	bl	8014624 <uxr_stamp_session_header>
 80136b4:	a808      	add	r0, sp, #32
 80136b6:	f7ff fc25 	bl	8012f04 <ucdr_buffer_length>
 80136ba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80136bc:	4602      	mov	r2, r0
 80136be:	a905      	add	r1, sp, #20
 80136c0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80136c4:	47a0      	blx	r4
 80136c6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80136ca:	bd70      	pop	{r4, r5, r6, pc}

080136cc <write_submessage_acknack.isra.0>:
 80136cc:	b570      	push	{r4, r5, r6, lr}
 80136ce:	b092      	sub	sp, #72	@ 0x48
 80136d0:	4605      	mov	r5, r0
 80136d2:	460e      	mov	r6, r1
 80136d4:	4614      	mov	r4, r2
 80136d6:	f000 fffb 	bl	80146d0 <uxr_session_header_offset>
 80136da:	a905      	add	r1, sp, #20
 80136dc:	9000      	str	r0, [sp, #0]
 80136de:	2300      	movs	r3, #0
 80136e0:	a80a      	add	r0, sp, #40	@ 0x28
 80136e2:	2211      	movs	r2, #17
 80136e4:	f7ff fbd0 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 80136e8:	2218      	movs	r2, #24
 80136ea:	fb02 5404 	mla	r4, r2, r4, r5
 80136ee:	2300      	movs	r3, #0
 80136f0:	2205      	movs	r2, #5
 80136f2:	3450      	adds	r4, #80	@ 0x50
 80136f4:	210a      	movs	r1, #10
 80136f6:	a80a      	add	r0, sp, #40	@ 0x28
 80136f8:	f001 f95a 	bl	80149b0 <uxr_buffer_submessage_header>
 80136fc:	a903      	add	r1, sp, #12
 80136fe:	4620      	mov	r0, r4
 8013700:	f00b f87e 	bl	801e800 <uxr_compute_acknack>
 8013704:	ba40      	rev16	r0, r0
 8013706:	f8ad 000e 	strh.w	r0, [sp, #14]
 801370a:	a903      	add	r1, sp, #12
 801370c:	a80a      	add	r0, sp, #40	@ 0x28
 801370e:	f88d 6010 	strb.w	r6, [sp, #16]
 8013712:	f002 fb3d 	bl	8015d90 <uxr_serialize_ACKNACK_Payload>
 8013716:	2200      	movs	r2, #0
 8013718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801371a:	4611      	mov	r1, r2
 801371c:	4628      	mov	r0, r5
 801371e:	f000 ff81 	bl	8014624 <uxr_stamp_session_header>
 8013722:	a80a      	add	r0, sp, #40	@ 0x28
 8013724:	f7ff fbee 	bl	8012f04 <ucdr_buffer_length>
 8013728:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801372a:	4602      	mov	r2, r0
 801372c:	a905      	add	r1, sp, #20
 801372e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013732:	47a0      	blx	r4
 8013734:	b012      	add	sp, #72	@ 0x48
 8013736:	bd70      	pop	{r4, r5, r6, pc}

08013738 <uxr_init_session>:
 8013738:	b510      	push	{r4, lr}
 801373a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013770 <uxr_init_session+0x38>
 801373e:	2300      	movs	r3, #0
 8013740:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8013744:	4604      	mov	r4, r0
 8013746:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801374a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801374e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8013752:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8013756:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801375a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801375e:	2181      	movs	r1, #129	@ 0x81
 8013760:	f000 fecc 	bl	80144fc <uxr_init_session_info>
 8013764:	f104 0008 	add.w	r0, r4, #8
 8013768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801376c:	f001 b83c 	b.w	80147e8 <uxr_init_stream_storage>
	...

08013778 <uxr_set_status_callback>:
 8013778:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801377c:	4770      	bx	lr
 801377e:	bf00      	nop

08013780 <uxr_set_topic_callback>:
 8013780:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop

08013788 <uxr_set_request_callback>:
 8013788:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801378c:	4770      	bx	lr
 801378e:	bf00      	nop

08013790 <uxr_set_reply_callback>:
 8013790:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8013794:	4770      	bx	lr
 8013796:	bf00      	nop

08013798 <uxr_create_output_best_effort_stream>:
 8013798:	b510      	push	{r4, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	e9cd 2100 	strd	r2, r1, [sp]
 80137a0:	4604      	mov	r4, r0
 80137a2:	f000 ff95 	bl	80146d0 <uxr_session_header_offset>
 80137a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80137aa:	4603      	mov	r3, r0
 80137ac:	f104 0008 	add.w	r0, r4, #8
 80137b0:	b004      	add	sp, #16
 80137b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137b6:	f001 b861 	b.w	801487c <uxr_add_output_best_effort_buffer>
 80137ba:	bf00      	nop

080137bc <uxr_create_output_reliable_stream>:
 80137bc:	b510      	push	{r4, lr}
 80137be:	b088      	sub	sp, #32
 80137c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80137c4:	4604      	mov	r4, r0
 80137c6:	9303      	str	r3, [sp, #12]
 80137c8:	f000 ff82 	bl	80146d0 <uxr_session_header_offset>
 80137cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80137d0:	9000      	str	r0, [sp, #0]
 80137d2:	9905      	ldr	r1, [sp, #20]
 80137d4:	f104 0008 	add.w	r0, r4, #8
 80137d8:	f001 f864 	bl	80148a4 <uxr_add_output_reliable_buffer>
 80137dc:	2200      	movs	r2, #0
 80137de:	b2c3      	uxtb	r3, r0
 80137e0:	f363 0207 	bfi	r2, r3, #0, #8
 80137e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80137e8:	f363 220f 	bfi	r2, r3, #8, #8
 80137ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80137f0:	f363 4217 	bfi	r2, r3, #16, #8
 80137f4:	0e03      	lsrs	r3, r0, #24
 80137f6:	f363 621f 	bfi	r2, r3, #24, #8
 80137fa:	4610      	mov	r0, r2
 80137fc:	b008      	add	sp, #32
 80137fe:	bd10      	pop	{r4, pc}

08013800 <uxr_create_input_best_effort_stream>:
 8013800:	b082      	sub	sp, #8
 8013802:	3008      	adds	r0, #8
 8013804:	b002      	add	sp, #8
 8013806:	f001 b867 	b.w	80148d8 <uxr_add_input_best_effort_buffer>
 801380a:	bf00      	nop

0801380c <uxr_create_input_reliable_stream>:
 801380c:	b510      	push	{r4, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	4c0b      	ldr	r4, [pc, #44]	@ (8013840 <uxr_create_input_reliable_stream+0x34>)
 8013812:	9400      	str	r4, [sp, #0]
 8013814:	3008      	adds	r0, #8
 8013816:	f001 f875 	bl	8014904 <uxr_add_input_reliable_buffer>
 801381a:	2200      	movs	r2, #0
 801381c:	b2c3      	uxtb	r3, r0
 801381e:	f363 0207 	bfi	r2, r3, #0, #8
 8013822:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013826:	f363 220f 	bfi	r2, r3, #8, #8
 801382a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801382e:	f363 4217 	bfi	r2, r3, #16, #8
 8013832:	0e03      	lsrs	r3, r0, #24
 8013834:	f363 621f 	bfi	r2, r3, #24, #8
 8013838:	4610      	mov	r0, r2
 801383a:	b004      	add	sp, #16
 801383c:	bd10      	pop	{r4, pc}
 801383e:	bf00      	nop
 8013840:	0801361d 	.word	0x0801361d

08013844 <uxr_epoch_nanos>:
 8013844:	b510      	push	{r4, lr}
 8013846:	4604      	mov	r4, r0
 8013848:	f001 f912 	bl	8014a70 <uxr_nanos>
 801384c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8013850:	1ac0      	subs	r0, r0, r3
 8013852:	eb61 0102 	sbc.w	r1, r1, r2
 8013856:	bd10      	pop	{r4, pc}

08013858 <uxr_flash_output_streams>:
 8013858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801385c:	7e03      	ldrb	r3, [r0, #24]
 801385e:	b084      	sub	sp, #16
 8013860:	4604      	mov	r4, r0
 8013862:	2b00      	cmp	r3, #0
 8013864:	d035      	beq.n	80138d2 <uxr_flash_output_streams+0x7a>
 8013866:	f04f 0900 	mov.w	r9, #0
 801386a:	4648      	mov	r0, r9
 801386c:	f10d 0802 	add.w	r8, sp, #2
 8013870:	af03      	add	r7, sp, #12
 8013872:	ae02      	add	r6, sp, #8
 8013874:	e006      	b.n	8013884 <uxr_flash_output_streams+0x2c>
 8013876:	7e23      	ldrb	r3, [r4, #24]
 8013878:	f109 0901 	add.w	r9, r9, #1
 801387c:	fa5f f089 	uxtb.w	r0, r9
 8013880:	4283      	cmp	r3, r0
 8013882:	d926      	bls.n	80138d2 <uxr_flash_output_streams+0x7a>
 8013884:	2201      	movs	r2, #1
 8013886:	4611      	mov	r1, r2
 8013888:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801388c:	f000 ff58 	bl	8014740 <uxr_stream_id>
 8013890:	3508      	adds	r5, #8
 8013892:	4684      	mov	ip, r0
 8013894:	4643      	mov	r3, r8
 8013896:	463a      	mov	r2, r7
 8013898:	4631      	mov	r1, r6
 801389a:	4628      	mov	r0, r5
 801389c:	f8cd c004 	str.w	ip, [sp, #4]
 80138a0:	f00b f834 	bl	801e90c <uxr_prepare_best_effort_buffer_to_send>
 80138a4:	2800      	cmp	r0, #0
 80138a6:	d0e6      	beq.n	8013876 <uxr_flash_output_streams+0x1e>
 80138a8:	9b02      	ldr	r3, [sp, #8]
 80138aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80138ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80138b2:	4620      	mov	r0, r4
 80138b4:	f000 feb6 	bl	8014624 <uxr_stamp_session_header>
 80138b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80138ba:	9a03      	ldr	r2, [sp, #12]
 80138bc:	685d      	ldr	r5, [r3, #4]
 80138be:	6818      	ldr	r0, [r3, #0]
 80138c0:	9902      	ldr	r1, [sp, #8]
 80138c2:	47a8      	blx	r5
 80138c4:	f109 0901 	add.w	r9, r9, #1
 80138c8:	7e23      	ldrb	r3, [r4, #24]
 80138ca:	fa5f f089 	uxtb.w	r0, r9
 80138ce:	4283      	cmp	r3, r0
 80138d0:	d8d8      	bhi.n	8013884 <uxr_flash_output_streams+0x2c>
 80138d2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80138d6:	b38b      	cbz	r3, 801393c <uxr_flash_output_streams+0xe4>
 80138d8:	f04f 0900 	mov.w	r9, #0
 80138dc:	f10d 0802 	add.w	r8, sp, #2
 80138e0:	af03      	add	r7, sp, #12
 80138e2:	ae02      	add	r6, sp, #8
 80138e4:	4648      	mov	r0, r9
 80138e6:	2201      	movs	r2, #1
 80138e8:	2102      	movs	r1, #2
 80138ea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80138ee:	f000 ff27 	bl	8014740 <uxr_stream_id>
 80138f2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80138f6:	3520      	adds	r5, #32
 80138f8:	9001      	str	r0, [sp, #4]
 80138fa:	e00d      	b.n	8013918 <uxr_flash_output_streams+0xc0>
 80138fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013900:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013904:	9b02      	ldr	r3, [sp, #8]
 8013906:	f000 fe8d 	bl	8014624 <uxr_stamp_session_header>
 801390a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801390c:	9a03      	ldr	r2, [sp, #12]
 801390e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8013912:	9902      	ldr	r1, [sp, #8]
 8013914:	6818      	ldr	r0, [r3, #0]
 8013916:	47d0      	blx	sl
 8013918:	4643      	mov	r3, r8
 801391a:	463a      	mov	r2, r7
 801391c:	4631      	mov	r1, r6
 801391e:	4628      	mov	r0, r5
 8013920:	f00b fa12 	bl	801ed48 <uxr_prepare_next_reliable_buffer_to_send>
 8013924:	4603      	mov	r3, r0
 8013926:	4620      	mov	r0, r4
 8013928:	2b00      	cmp	r3, #0
 801392a:	d1e7      	bne.n	80138fc <uxr_flash_output_streams+0xa4>
 801392c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013930:	f109 0901 	add.w	r9, r9, #1
 8013934:	fa5f f089 	uxtb.w	r0, r9
 8013938:	4283      	cmp	r3, r0
 801393a:	d8d4      	bhi.n	80138e6 <uxr_flash_output_streams+0x8e>
 801393c:	b004      	add	sp, #16
 801393e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013942:	bf00      	nop

08013944 <read_submessage_info>:
 8013944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013948:	460d      	mov	r5, r1
 801394a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801394e:	4669      	mov	r1, sp
 8013950:	4607      	mov	r7, r0
 8013952:	4628      	mov	r0, r5
 8013954:	f002 f848 	bl	80159e8 <uxr_deserialize_BaseObjectReply>
 8013958:	a902      	add	r1, sp, #8
 801395a:	4604      	mov	r4, r0
 801395c:	4628      	mov	r0, r5
 801395e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013962:	f7fd fa7d 	bl	8010e60 <ucdr_deserialize_bool>
 8013966:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801396a:	4004      	ands	r4, r0
 801396c:	b2e4      	uxtb	r4, r4
 801396e:	b95b      	cbnz	r3, 8013988 <read_submessage_info+0x44>
 8013970:	a987      	add	r1, sp, #540	@ 0x21c
 8013972:	4628      	mov	r0, r5
 8013974:	f7fd fa74 	bl	8010e60 <ucdr_deserialize_bool>
 8013978:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801397c:	4606      	mov	r6, r0
 801397e:	b94b      	cbnz	r3, 8013994 <read_submessage_info+0x50>
 8013980:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013988:	a903      	add	r1, sp, #12
 801398a:	4628      	mov	r0, r5
 801398c:	f001 fed4 	bl	8015738 <uxr_deserialize_ObjectVariant>
 8013990:	4004      	ands	r4, r0
 8013992:	e7ed      	b.n	8013970 <read_submessage_info+0x2c>
 8013994:	a988      	add	r1, sp, #544	@ 0x220
 8013996:	4628      	mov	r0, r5
 8013998:	f7fd fa90 	bl	8010ebc <ucdr_deserialize_uint8_t>
 801399c:	4234      	tst	r4, r6
 801399e:	d0ef      	beq.n	8013980 <read_submessage_info+0x3c>
 80139a0:	2800      	cmp	r0, #0
 80139a2:	d0ed      	beq.n	8013980 <read_submessage_info+0x3c>
 80139a4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80139a8:	2b0d      	cmp	r3, #13
 80139aa:	d1e9      	bne.n	8013980 <read_submessage_info+0x3c>
 80139ac:	a98a      	add	r1, sp, #552	@ 0x228
 80139ae:	4628      	mov	r0, r5
 80139b0:	f7fe f8f0 	bl	8011b94 <ucdr_deserialize_int16_t>
 80139b4:	b140      	cbz	r0, 80139c8 <read_submessage_info+0x84>
 80139b6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	dd07      	ble.n	80139ce <read_submessage_info+0x8a>
 80139be:	f1b8 0f00 	cmp.w	r8, #0
 80139c2:	bf14      	ite	ne
 80139c4:	2001      	movne	r0, #1
 80139c6:	2002      	moveq	r0, #2
 80139c8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80139cc:	e7d8      	b.n	8013980 <read_submessage_info+0x3c>
 80139ce:	2000      	movs	r0, #0
 80139d0:	e7fa      	b.n	80139c8 <read_submessage_info+0x84>
 80139d2:	bf00      	nop

080139d4 <read_submessage_list>:
 80139d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d8:	b097      	sub	sp, #92	@ 0x5c
 80139da:	4ec1      	ldr	r6, [pc, #772]	@ (8013ce0 <read_submessage_list+0x30c>)
 80139dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80139de:	4604      	mov	r4, r0
 80139e0:	460d      	mov	r5, r1
 80139e2:	f04f 0801 	mov.w	r8, #1
 80139e6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80139ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80139ec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80139f0:	4628      	mov	r0, r5
 80139f2:	f000 fff7 	bl	80149e4 <uxr_read_submessage_header>
 80139f6:	2800      	cmp	r0, #0
 80139f8:	f000 813e 	beq.w	8013c78 <read_submessage_list+0x2a4>
 80139fc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8013a00:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8013a04:	3b02      	subs	r3, #2
 8013a06:	2b0d      	cmp	r3, #13
 8013a08:	d8ed      	bhi.n	80139e6 <read_submessage_list+0x12>
 8013a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8013a10 <read_submessage_list+0x3c>)
 8013a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a10:	08013c6f 	.word	0x08013c6f
 8013a14:	080139e7 	.word	0x080139e7
 8013a18:	08013c5f 	.word	0x08013c5f
 8013a1c:	08013bfd 	.word	0x08013bfd
 8013a20:	08013bf3 	.word	0x08013bf3
 8013a24:	080139e7 	.word	0x080139e7
 8013a28:	080139e7 	.word	0x080139e7
 8013a2c:	08013b53 	.word	0x08013b53
 8013a30:	08013ae3 	.word	0x08013ae3
 8013a34:	08013aa3 	.word	0x08013aa3
 8013a38:	080139e7 	.word	0x080139e7
 8013a3c:	080139e7 	.word	0x080139e7
 8013a40:	080139e7 	.word	0x080139e7
 8013a44:	08013a49 	.word	0x08013a49
 8013a48:	a910      	add	r1, sp, #64	@ 0x40
 8013a4a:	4628      	mov	r0, r5
 8013a4c:	f002 f9f0 	bl	8015e30 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013a50:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8013a54:	f1b9 0f00 	cmp.w	r9, #0
 8013a58:	f000 8116 	beq.w	8013c88 <read_submessage_list+0x2b4>
 8013a5c:	f001 f808 	bl	8014a70 <uxr_nanos>
 8013a60:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8013a62:	4602      	mov	r2, r0
 8013a64:	460b      	mov	r3, r1
 8013a66:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013a68:	2100      	movs	r1, #0
 8013a6a:	468c      	mov	ip, r1
 8013a6c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013a70:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013a74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013a76:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8013a78:	468c      	mov	ip, r1
 8013a7a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013a7e:	46e2      	mov	sl, ip
 8013a80:	46bc      	mov	ip, r7
 8013a82:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8013a86:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013a8a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8013a8e:	e9cd 7100 	strd	r7, r1, [sp]
 8013a92:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013a96:	9106      	str	r1, [sp, #24]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	47c8      	blx	r9
 8013a9c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8013aa0:	e7a1      	b.n	80139e6 <read_submessage_list+0x12>
 8013aa2:	a910      	add	r1, sp, #64	@ 0x40
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f002 f9b1 	bl	8015e0c <uxr_deserialize_HEARTBEAT_Payload>
 8013aaa:	2100      	movs	r1, #0
 8013aac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013ab0:	f000 fe70 	bl	8014794 <uxr_stream_id_from_raw>
 8013ab4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013ab8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013aba:	4639      	mov	r1, r7
 8013abc:	f104 0008 	add.w	r0, r4, #8
 8013ac0:	f000 ff56 	bl	8014970 <uxr_get_input_reliable_stream>
 8013ac4:	2800      	cmp	r0, #0
 8013ac6:	d08e      	beq.n	80139e6 <read_submessage_list+0x12>
 8013ac8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8013acc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013ad0:	f00a fe8a 	bl	801e7e8 <uxr_process_heartbeat>
 8013ad4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013ad8:	463a      	mov	r2, r7
 8013ada:	4620      	mov	r0, r4
 8013adc:	f7ff fdf6 	bl	80136cc <write_submessage_acknack.isra.0>
 8013ae0:	e781      	b.n	80139e6 <read_submessage_list+0x12>
 8013ae2:	a910      	add	r1, sp, #64	@ 0x40
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	f002 f969 	bl	8015dbc <uxr_deserialize_ACKNACK_Payload>
 8013aea:	2100      	movs	r1, #0
 8013aec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013af0:	f000 fe50 	bl	8014794 <uxr_stream_id_from_raw>
 8013af4:	900d      	str	r0, [sp, #52]	@ 0x34
 8013af6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013afa:	f104 0008 	add.w	r0, r4, #8
 8013afe:	f000 ff23 	bl	8014948 <uxr_get_output_reliable_stream>
 8013b02:	4607      	mov	r7, r0
 8013b04:	2800      	cmp	r0, #0
 8013b06:	f43f af6e 	beq.w	80139e6 <read_submessage_list+0x12>
 8013b0a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8013b0e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8013b12:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013b16:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013b1a:	b289      	uxth	r1, r1
 8013b1c:	f00b f9be 	bl	801ee9c <uxr_process_acknack>
 8013b20:	4638      	mov	r0, r7
 8013b22:	f00b f97b 	bl	801ee1c <uxr_begin_output_nack_buffer_it>
 8013b26:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013b2a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8013b2e:	e006      	b.n	8013b3e <read_submessage_list+0x16a>
 8013b30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013b32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013b34:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013b38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b3a:	6818      	ldr	r0, [r3, #0]
 8013b3c:	47c8      	blx	r9
 8013b3e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8013b42:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013b44:	4651      	mov	r1, sl
 8013b46:	4638      	mov	r0, r7
 8013b48:	f00b f96a 	bl	801ee20 <uxr_next_reliable_nack_buffer_to_send>
 8013b4c:	2800      	cmp	r0, #0
 8013b4e:	d1ef      	bne.n	8013b30 <read_submessage_list+0x15c>
 8013b50:	e749      	b.n	80139e6 <read_submessage_list+0x12>
 8013b52:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013b56:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8013b5a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013b5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8013b62:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8013b66:	4651      	mov	r1, sl
 8013b68:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013b6c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8013b70:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8013b74:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8013b78:	4628      	mov	r0, r5
 8013b7a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8013b7e:	f001 fe7d 	bl	801587c <uxr_deserialize_BaseObjectRequest>
 8013b82:	4650      	mov	r0, sl
 8013b84:	a90f      	add	r1, sp, #60	@ 0x3c
 8013b86:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8013b8a:	f000 fdc7 	bl	801471c <uxr_parse_base_object_request>
 8013b8e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8013b92:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b94:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8013b98:	9110      	str	r1, [sp, #64]	@ 0x40
 8013b9a:	3f04      	subs	r7, #4
 8013b9c:	f009 090e 	and.w	r9, r9, #14
 8013ba0:	b2bf      	uxth	r7, r7
 8013ba2:	f1bb 0f00 	cmp.w	fp, #0
 8013ba6:	d006      	beq.n	8013bb6 <read_submessage_list+0x1e2>
 8013ba8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013bac:	9300      	str	r3, [sp, #0]
 8013bae:	4652      	mov	r2, sl
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	47d8      	blx	fp
 8013bb6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013bb8:	b16a      	cbz	r2, 8013bd6 <read_submessage_list+0x202>
 8013bba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	3802      	subs	r0, #2
 8013bc0:	e002      	b.n	8013bc8 <read_submessage_list+0x1f4>
 8013bc2:	3101      	adds	r1, #1
 8013bc4:	4291      	cmp	r1, r2
 8013bc6:	d006      	beq.n	8013bd6 <read_submessage_list+0x202>
 8013bc8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013bcc:	4553      	cmp	r3, sl
 8013bce:	d1f8      	bne.n	8013bc2 <read_submessage_list+0x1ee>
 8013bd0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	545a      	strb	r2, [r3, r1]
 8013bd6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8013bda:	9102      	str	r1, [sp, #8]
 8013bdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013bde:	9101      	str	r1, [sp, #4]
 8013be0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013be2:	9100      	str	r1, [sp, #0]
 8013be4:	464b      	mov	r3, r9
 8013be6:	463a      	mov	r2, r7
 8013be8:	4629      	mov	r1, r5
 8013bea:	4620      	mov	r0, r4
 8013bec:	f00b fa14 	bl	801f018 <read_submessage_format>
 8013bf0:	e6f9      	b.n	80139e6 <read_submessage_list+0x12>
 8013bf2:	4629      	mov	r1, r5
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	f7ff fea5 	bl	8013944 <read_submessage_info>
 8013bfa:	e6f4      	b.n	80139e6 <read_submessage_list+0x12>
 8013bfc:	2a00      	cmp	r2, #0
 8013bfe:	d03e      	beq.n	8013c7e <read_submessage_list+0x2aa>
 8013c00:	a910      	add	r1, sp, #64	@ 0x40
 8013c02:	4628      	mov	r0, r5
 8013c04:	f002 f836 	bl	8015c74 <uxr_deserialize_STATUS_Payload>
 8013c08:	a90e      	add	r1, sp, #56	@ 0x38
 8013c0a:	aa0d      	add	r2, sp, #52	@ 0x34
 8013c0c:	a810      	add	r0, sp, #64	@ 0x40
 8013c0e:	f000 fd85 	bl	801471c <uxr_parse_base_object_request>
 8013c12:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8013c16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013c18:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8013c1c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8013c20:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013c22:	f1ba 0f00 	cmp.w	sl, #0
 8013c26:	d006      	beq.n	8013c36 <read_submessage_list+0x262>
 8013c28:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013c2c:	9300      	str	r3, [sp, #0]
 8013c2e:	463a      	mov	r2, r7
 8013c30:	464b      	mov	r3, r9
 8013c32:	4620      	mov	r0, r4
 8013c34:	47d0      	blx	sl
 8013c36:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013c38:	2a00      	cmp	r2, #0
 8013c3a:	f43f aed4 	beq.w	80139e6 <read_submessage_list+0x12>
 8013c3e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013c40:	2100      	movs	r1, #0
 8013c42:	3802      	subs	r0, #2
 8013c44:	e003      	b.n	8013c4e <read_submessage_list+0x27a>
 8013c46:	3101      	adds	r1, #1
 8013c48:	4291      	cmp	r1, r2
 8013c4a:	f43f aecc 	beq.w	80139e6 <read_submessage_list+0x12>
 8013c4e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013c52:	42bb      	cmp	r3, r7
 8013c54:	d1f7      	bne.n	8013c46 <read_submessage_list+0x272>
 8013c56:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013c58:	f803 9001 	strb.w	r9, [r3, r1]
 8013c5c:	e6c3      	b.n	80139e6 <read_submessage_list+0x12>
 8013c5e:	2a00      	cmp	r2, #0
 8013c60:	f47f aec1 	bne.w	80139e6 <read_submessage_list+0x12>
 8013c64:	4629      	mov	r1, r5
 8013c66:	4620      	mov	r0, r4
 8013c68:	f000 fc9e 	bl	80145a8 <uxr_read_create_session_status>
 8013c6c:	e6bb      	b.n	80139e6 <read_submessage_list+0x12>
 8013c6e:	4629      	mov	r1, r5
 8013c70:	4620      	mov	r0, r4
 8013c72:	f7ff fcf5 	bl	8013660 <read_submessage_get_info>
 8013c76:	e6b6      	b.n	80139e6 <read_submessage_list+0x12>
 8013c78:	b017      	add	sp, #92	@ 0x5c
 8013c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c7e:	4629      	mov	r1, r5
 8013c80:	4620      	mov	r0, r4
 8013c82:	f000 fc9d 	bl	80145c0 <uxr_read_delete_session_status>
 8013c86:	e6ae      	b.n	80139e6 <read_submessage_list+0x12>
 8013c88:	f000 fef2 	bl	8014a70 <uxr_nanos>
 8013c8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013c8e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013c90:	464f      	mov	r7, r9
 8013c92:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013c96:	1812      	adds	r2, r2, r0
 8013c98:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013c9a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013c9c:	eb47 0101 	adc.w	r1, r7, r1
 8013ca0:	464f      	mov	r7, r9
 8013ca2:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013ca6:	463b      	mov	r3, r7
 8013ca8:	4684      	mov	ip, r0
 8013caa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8013cae:	fbc7 0906 	smlal	r0, r9, r7, r6
 8013cb2:	eb1c 0c00 	adds.w	ip, ip, r0
 8013cb6:	464f      	mov	r7, r9
 8013cb8:	eb43 0307 	adc.w	r3, r3, r7
 8013cbc:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013cc0:	eb61 0303 	sbc.w	r3, r1, r3
 8013cc4:	0fda      	lsrs	r2, r3, #31
 8013cc6:	eb12 020c 	adds.w	r2, r2, ip
 8013cca:	f143 0300 	adc.w	r3, r3, #0
 8013cce:	0852      	lsrs	r2, r2, #1
 8013cd0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8013cd4:	105b      	asrs	r3, r3, #1
 8013cd6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8013cda:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013cde:	e6dd      	b.n	8013a9c <read_submessage_list+0xc8>
 8013ce0:	3b9aca00 	.word	0x3b9aca00

08013ce4 <listen_message_reliably>:
 8013ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ce8:	1e0b      	subs	r3, r1, #0
 8013cea:	b09d      	sub	sp, #116	@ 0x74
 8013cec:	bfb8      	it	lt
 8013cee:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8013cf2:	4680      	mov	r8, r0
 8013cf4:	9305      	str	r3, [sp, #20]
 8013cf6:	f000 fea1 	bl	8014a3c <uxr_millis>
 8013cfa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8013cfe:	4681      	mov	r9, r0
 8013d00:	2a00      	cmp	r2, #0
 8013d02:	f000 80a1 	beq.w	8013e48 <listen_message_reliably+0x164>
 8013d06:	2600      	movs	r6, #0
 8013d08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013d0c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8013d10:	9303      	str	r3, [sp, #12]
 8013d12:	4630      	mov	r0, r6
 8013d14:	460f      	mov	r7, r1
 8013d16:	e00f      	b.n	8013d38 <listen_message_reliably+0x54>
 8013d18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013d1c:	9903      	ldr	r1, [sp, #12]
 8013d1e:	455a      	cmp	r2, fp
 8013d20:	f106 0601 	add.w	r6, r6, #1
 8013d24:	eb73 0101 	sbcs.w	r1, r3, r1
 8013d28:	b2f0      	uxtb	r0, r6
 8013d2a:	da01      	bge.n	8013d30 <listen_message_reliably+0x4c>
 8013d2c:	4693      	mov	fp, r2
 8013d2e:	9303      	str	r3, [sp, #12]
 8013d30:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013d34:	4283      	cmp	r3, r0
 8013d36:	d960      	bls.n	8013dfa <listen_message_reliably+0x116>
 8013d38:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013d3c:	2102      	movs	r1, #2
 8013d3e:	2201      	movs	r2, #1
 8013d40:	f000 fcfe 	bl	8014740 <uxr_stream_id>
 8013d44:	00e4      	lsls	r4, r4, #3
 8013d46:	f104 0520 	add.w	r5, r4, #32
 8013d4a:	4445      	add	r5, r8
 8013d4c:	4601      	mov	r1, r0
 8013d4e:	463b      	mov	r3, r7
 8013d50:	464a      	mov	r2, r9
 8013d52:	4628      	mov	r0, r5
 8013d54:	9109      	str	r1, [sp, #36]	@ 0x24
 8013d56:	f00b f837 	bl	801edc8 <uxr_update_output_stream_heartbeat_timestamp>
 8013d5a:	eb08 0304 	add.w	r3, r8, r4
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	d0da      	beq.n	8013d18 <listen_message_reliably+0x34>
 8013d62:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013d66:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8013d6a:	9304      	str	r3, [sp, #16]
 8013d6c:	4640      	mov	r0, r8
 8013d6e:	f000 fcaf 	bl	80146d0 <uxr_session_header_offset>
 8013d72:	3501      	adds	r5, #1
 8013d74:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8013d78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013d7c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013d80:	2300      	movs	r3, #0
 8013d82:	2211      	movs	r2, #17
 8013d84:	9000      	str	r0, [sp, #0]
 8013d86:	a90c      	add	r1, sp, #48	@ 0x30
 8013d88:	4650      	mov	r0, sl
 8013d8a:	f7ff f87d 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	2205      	movs	r2, #5
 8013d92:	210b      	movs	r1, #11
 8013d94:	4650      	mov	r0, sl
 8013d96:	f000 fe0b 	bl	80149b0 <uxr_buffer_submessage_header>
 8013d9a:	8968      	ldrh	r0, [r5, #10]
 8013d9c:	2101      	movs	r1, #1
 8013d9e:	f00b fa05 	bl	801f1ac <uxr_seq_num_add>
 8013da2:	892b      	ldrh	r3, [r5, #8]
 8013da4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013da8:	4602      	mov	r2, r0
 8013daa:	9b04      	ldr	r3, [sp, #16]
 8013dac:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013db0:	a90a      	add	r1, sp, #40	@ 0x28
 8013db2:	4650      	mov	r0, sl
 8013db4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013db8:	f002 f814 	bl	8015de4 <uxr_serialize_HEARTBEAT_Payload>
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	4611      	mov	r1, r2
 8013dc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013dc2:	4640      	mov	r0, r8
 8013dc4:	f000 fc2e 	bl	8014624 <uxr_stamp_session_header>
 8013dc8:	4650      	mov	r0, sl
 8013dca:	f7ff f89b 	bl	8012f04 <ucdr_buffer_length>
 8013dce:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	a90c      	add	r1, sp, #48	@ 0x30
 8013dd6:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013dda:	4444      	add	r4, r8
 8013ddc:	47a8      	blx	r5
 8013dde:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8013de2:	9903      	ldr	r1, [sp, #12]
 8013de4:	455a      	cmp	r2, fp
 8013de6:	f106 0601 	add.w	r6, r6, #1
 8013dea:	eb73 0101 	sbcs.w	r1, r3, r1
 8013dee:	b2f0      	uxtb	r0, r6
 8013df0:	db9c      	blt.n	8013d2c <listen_message_reliably+0x48>
 8013df2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013df6:	4283      	cmp	r3, r0
 8013df8:	d89e      	bhi.n	8013d38 <listen_message_reliably+0x54>
 8013dfa:	9a03      	ldr	r2, [sp, #12]
 8013dfc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013e00:	429a      	cmp	r2, r3
 8013e02:	bf08      	it	eq
 8013e04:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013e08:	d01e      	beq.n	8013e48 <listen_message_reliably+0x164>
 8013e0a:	ebab 0309 	sub.w	r3, fp, r9
 8013e0e:	9905      	ldr	r1, [sp, #20]
 8013e10:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	bf08      	it	eq
 8013e18:	2301      	moveq	r3, #1
 8013e1a:	4299      	cmp	r1, r3
 8013e1c:	bfa8      	it	ge
 8013e1e:	4619      	movge	r1, r3
 8013e20:	6894      	ldr	r4, [r2, #8]
 8013e22:	6810      	ldr	r0, [r2, #0]
 8013e24:	4689      	mov	r9, r1
 8013e26:	460b      	mov	r3, r1
 8013e28:	aa08      	add	r2, sp, #32
 8013e2a:	a907      	add	r1, sp, #28
 8013e2c:	47a0      	blx	r4
 8013e2e:	b968      	cbnz	r0, 8013e4c <listen_message_reliably+0x168>
 8013e30:	9b05      	ldr	r3, [sp, #20]
 8013e32:	eba3 0309 	sub.w	r3, r3, r9
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	9305      	str	r3, [sp, #20]
 8013e3a:	f73f af5c 	bgt.w	8013cf6 <listen_message_reliably+0x12>
 8013e3e:	4604      	mov	r4, r0
 8013e40:	4620      	mov	r0, r4
 8013e42:	b01d      	add	sp, #116	@ 0x74
 8013e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e48:	9b05      	ldr	r3, [sp, #20]
 8013e4a:	e7e0      	b.n	8013e0e <listen_message_reliably+0x12a>
 8013e4c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013e50:	4604      	mov	r4, r0
 8013e52:	a80c      	add	r0, sp, #48	@ 0x30
 8013e54:	f7ff f82a 	bl	8012eac <ucdr_init_buffer>
 8013e58:	2500      	movs	r5, #0
 8013e5a:	f10d 031a 	add.w	r3, sp, #26
 8013e5e:	aa06      	add	r2, sp, #24
 8013e60:	a90c      	add	r1, sp, #48	@ 0x30
 8013e62:	4640      	mov	r0, r8
 8013e64:	f88d 5018 	strb.w	r5, [sp, #24]
 8013e68:	f000 fbf0 	bl	801464c <uxr_read_session_header>
 8013e6c:	b918      	cbnz	r0, 8013e76 <listen_message_reliably+0x192>
 8013e6e:	4620      	mov	r0, r4
 8013e70:	b01d      	add	sp, #116	@ 0x74
 8013e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e76:	4629      	mov	r1, r5
 8013e78:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013e7c:	f000 fc8a 	bl	8014794 <uxr_stream_id_from_raw>
 8013e80:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013e84:	2d01      	cmp	r5, #1
 8013e86:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013e8a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013e8e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013e92:	d04b      	beq.n	8013f2c <listen_message_reliably+0x248>
 8013e94:	2d02      	cmp	r5, #2
 8013e96:	d00f      	beq.n	8013eb8 <listen_message_reliably+0x1d4>
 8013e98:	2d00      	cmp	r5, #0
 8013e9a:	d1e8      	bne.n	8013e6e <listen_message_reliably+0x18a>
 8013e9c:	4629      	mov	r1, r5
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	f000 fc78 	bl	8014794 <uxr_stream_id_from_raw>
 8013ea4:	a90c      	add	r1, sp, #48	@ 0x30
 8013ea6:	4602      	mov	r2, r0
 8013ea8:	4640      	mov	r0, r8
 8013eaa:	920a      	str	r2, [sp, #40]	@ 0x28
 8013eac:	f7ff fd92 	bl	80139d4 <read_submessage_list>
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	b01d      	add	sp, #116	@ 0x74
 8013eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013eb8:	4631      	mov	r1, r6
 8013eba:	f108 0008 	add.w	r0, r8, #8
 8013ebe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013ec2:	f000 fd55 	bl	8014970 <uxr_get_input_reliable_stream>
 8013ec6:	4607      	mov	r7, r0
 8013ec8:	b338      	cbz	r0, 8013f1a <listen_message_reliably+0x236>
 8013eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ecc:	9203      	str	r2, [sp, #12]
 8013ece:	a80c      	add	r0, sp, #48	@ 0x30
 8013ed0:	f7ff f81c 	bl	8012f0c <ucdr_buffer_remaining>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	f10d 0019 	add.w	r0, sp, #25
 8013eda:	9000      	str	r0, [sp, #0]
 8013edc:	9a03      	ldr	r2, [sp, #12]
 8013ede:	4651      	mov	r1, sl
 8013ee0:	4638      	mov	r0, r7
 8013ee2:	f00a fb87 	bl	801e5f4 <uxr_receive_reliable_message>
 8013ee6:	b1c0      	cbz	r0, 8013f1a <listen_message_reliably+0x236>
 8013ee8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013eec:	b393      	cbz	r3, 8013f54 <listen_message_reliably+0x270>
 8013eee:	ad14      	add	r5, sp, #80	@ 0x50
 8013ef0:	f04f 0a02 	mov.w	sl, #2
 8013ef4:	e00a      	b.n	8013f0c <listen_message_reliably+0x228>
 8013ef6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013efa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013efe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8013f02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f04:	4629      	mov	r1, r5
 8013f06:	4640      	mov	r0, r8
 8013f08:	f7ff fd64 	bl	80139d4 <read_submessage_list>
 8013f0c:	2204      	movs	r2, #4
 8013f0e:	4629      	mov	r1, r5
 8013f10:	4638      	mov	r0, r7
 8013f12:	f00a fbef 	bl	801e6f4 <uxr_next_input_reliable_buffer_available>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d1ed      	bne.n	8013ef6 <listen_message_reliably+0x212>
 8013f1a:	4640      	mov	r0, r8
 8013f1c:	4632      	mov	r2, r6
 8013f1e:	4649      	mov	r1, r9
 8013f20:	f7ff fbd4 	bl	80136cc <write_submessage_acknack.isra.0>
 8013f24:	4620      	mov	r0, r4
 8013f26:	b01d      	add	sp, #116	@ 0x74
 8013f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f2c:	4631      	mov	r1, r6
 8013f2e:	f108 0008 	add.w	r0, r8, #8
 8013f32:	f000 fd13 	bl	801495c <uxr_get_input_best_effort_stream>
 8013f36:	2800      	cmp	r0, #0
 8013f38:	d099      	beq.n	8013e6e <listen_message_reliably+0x18a>
 8013f3a:	4651      	mov	r1, sl
 8013f3c:	f00a fac6 	bl	801e4cc <uxr_receive_best_effort_message>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	d094      	beq.n	8013e6e <listen_message_reliably+0x18a>
 8013f44:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013f48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f4a:	a90c      	add	r1, sp, #48	@ 0x30
 8013f4c:	4640      	mov	r0, r8
 8013f4e:	f7ff fd41 	bl	80139d4 <read_submessage_list>
 8013f52:	e78c      	b.n	8013e6e <listen_message_reliably+0x18a>
 8013f54:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013f58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013f5a:	a90c      	add	r1, sp, #48	@ 0x30
 8013f5c:	4640      	mov	r0, r8
 8013f5e:	f7ff fd39 	bl	80139d4 <read_submessage_list>
 8013f62:	e7c4      	b.n	8013eee <listen_message_reliably+0x20a>

08013f64 <uxr_run_session_timeout>:
 8013f64:	b570      	push	{r4, r5, r6, lr}
 8013f66:	4604      	mov	r4, r0
 8013f68:	460d      	mov	r5, r1
 8013f6a:	f000 fd67 	bl	8014a3c <uxr_millis>
 8013f6e:	4606      	mov	r6, r0
 8013f70:	4620      	mov	r0, r4
 8013f72:	f7ff fc71 	bl	8013858 <uxr_flash_output_streams>
 8013f76:	4629      	mov	r1, r5
 8013f78:	4620      	mov	r0, r4
 8013f7a:	f7ff feb3 	bl	8013ce4 <listen_message_reliably>
 8013f7e:	f000 fd5d 	bl	8014a3c <uxr_millis>
 8013f82:	1b83      	subs	r3, r0, r6
 8013f84:	1ae9      	subs	r1, r5, r3
 8013f86:	2900      	cmp	r1, #0
 8013f88:	dcf6      	bgt.n	8013f78 <uxr_run_session_timeout+0x14>
 8013f8a:	f104 0008 	add.w	r0, r4, #8
 8013f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f92:	f000 bcf7 	b.w	8014984 <uxr_output_streams_confirmed>
 8013f96:	bf00      	nop

08013f98 <uxr_run_session_until_data>:
 8013f98:	b570      	push	{r4, r5, r6, lr}
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	460d      	mov	r5, r1
 8013f9e:	f000 fd4d 	bl	8014a3c <uxr_millis>
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f7ff fc57 	bl	8013858 <uxr_flash_output_streams>
 8013faa:	2300      	movs	r3, #0
 8013fac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8013fb0:	4629      	mov	r1, r5
 8013fb2:	e005      	b.n	8013fc0 <uxr_run_session_until_data+0x28>
 8013fb4:	f000 fd42 	bl	8014a3c <uxr_millis>
 8013fb8:	1b83      	subs	r3, r0, r6
 8013fba:	1ae9      	subs	r1, r5, r3
 8013fbc:	2900      	cmp	r1, #0
 8013fbe:	dd07      	ble.n	8013fd0 <uxr_run_session_until_data+0x38>
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	f7ff fe8f 	bl	8013ce4 <listen_message_reliably>
 8013fc6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	d0f2      	beq.n	8013fb4 <uxr_run_session_until_data+0x1c>
 8013fce:	bd70      	pop	{r4, r5, r6, pc}
 8013fd0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013fd4:	bd70      	pop	{r4, r5, r6, pc}
 8013fd6:	bf00      	nop

08013fd8 <uxr_run_session_until_confirm_delivery>:
 8013fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fdc:	4606      	mov	r6, r0
 8013fde:	460d      	mov	r5, r1
 8013fe0:	f000 fd2c 	bl	8014a3c <uxr_millis>
 8013fe4:	4607      	mov	r7, r0
 8013fe6:	4630      	mov	r0, r6
 8013fe8:	f7ff fc36 	bl	8013858 <uxr_flash_output_streams>
 8013fec:	2d00      	cmp	r5, #0
 8013fee:	f106 0808 	add.w	r8, r6, #8
 8013ff2:	bfa8      	it	ge
 8013ff4:	462c      	movge	r4, r5
 8013ff6:	da07      	bge.n	8014008 <uxr_run_session_until_confirm_delivery+0x30>
 8013ff8:	e00e      	b.n	8014018 <uxr_run_session_until_confirm_delivery+0x40>
 8013ffa:	f7ff fe73 	bl	8013ce4 <listen_message_reliably>
 8013ffe:	f000 fd1d 	bl	8014a3c <uxr_millis>
 8014002:	1bc3      	subs	r3, r0, r7
 8014004:	1aec      	subs	r4, r5, r3
 8014006:	d407      	bmi.n	8014018 <uxr_run_session_until_confirm_delivery+0x40>
 8014008:	4640      	mov	r0, r8
 801400a:	f000 fcbb 	bl	8014984 <uxr_output_streams_confirmed>
 801400e:	4603      	mov	r3, r0
 8014010:	4621      	mov	r1, r4
 8014012:	4630      	mov	r0, r6
 8014014:	2b00      	cmp	r3, #0
 8014016:	d0f0      	beq.n	8013ffa <uxr_run_session_until_confirm_delivery+0x22>
 8014018:	4640      	mov	r0, r8
 801401a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801401e:	f000 bcb1 	b.w	8014984 <uxr_output_streams_confirmed>
 8014022:	bf00      	nop

08014024 <uxr_run_session_until_all_status>:
 8014024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014028:	9c08      	ldr	r4, [sp, #32]
 801402a:	4606      	mov	r6, r0
 801402c:	460f      	mov	r7, r1
 801402e:	4691      	mov	r9, r2
 8014030:	461d      	mov	r5, r3
 8014032:	f7ff fc11 	bl	8013858 <uxr_flash_output_streams>
 8014036:	b124      	cbz	r4, 8014042 <uxr_run_session_until_all_status+0x1e>
 8014038:	4622      	mov	r2, r4
 801403a:	21ff      	movs	r1, #255	@ 0xff
 801403c:	4628      	mov	r0, r5
 801403e:	f00d fc90 	bl	8021962 <memset>
 8014042:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8014046:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8014048:	f000 fcf8 	bl	8014a3c <uxr_millis>
 801404c:	3d01      	subs	r5, #1
 801404e:	f1a9 0902 	sub.w	r9, r9, #2
 8014052:	4680      	mov	r8, r0
 8014054:	4639      	mov	r1, r7
 8014056:	4630      	mov	r0, r6
 8014058:	f7ff fe44 	bl	8013ce4 <listen_message_reliably>
 801405c:	f000 fcee 	bl	8014a3c <uxr_millis>
 8014060:	eba0 0008 	sub.w	r0, r0, r8
 8014064:	1a39      	subs	r1, r7, r0
 8014066:	b344      	cbz	r4, 80140ba <uxr_run_session_until_all_status+0x96>
 8014068:	4628      	mov	r0, r5
 801406a:	46ac      	mov	ip, r5
 801406c:	2301      	movs	r3, #1
 801406e:	e002      	b.n	8014076 <uxr_run_session_until_all_status+0x52>
 8014070:	42a3      	cmp	r3, r4
 8014072:	d20d      	bcs.n	8014090 <uxr_run_session_until_all_status+0x6c>
 8014074:	3301      	adds	r3, #1
 8014076:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801407a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801407e:	d1f7      	bne.n	8014070 <uxr_run_session_until_all_status+0x4c>
 8014080:	42a3      	cmp	r3, r4
 8014082:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8014086:	d213      	bcs.n	80140b0 <uxr_run_session_until_all_status+0x8c>
 8014088:	2a00      	cmp	r2, #0
 801408a:	d0f3      	beq.n	8014074 <uxr_run_session_until_all_status+0x50>
 801408c:	2900      	cmp	r1, #0
 801408e:	dce2      	bgt.n	8014056 <uxr_run_session_until_all_status+0x32>
 8014090:	2300      	movs	r3, #0
 8014092:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8014094:	442c      	add	r4, r5
 8014096:	e001      	b.n	801409c <uxr_run_session_until_all_status+0x78>
 8014098:	2b01      	cmp	r3, #1
 801409a:	d812      	bhi.n	80140c2 <uxr_run_session_until_all_status+0x9e>
 801409c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80140a0:	4284      	cmp	r4, r0
 80140a2:	d1f9      	bne.n	8014098 <uxr_run_session_until_all_status+0x74>
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	bf8c      	ite	hi
 80140a8:	2000      	movhi	r0, #0
 80140aa:	2001      	movls	r0, #1
 80140ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140b0:	2900      	cmp	r1, #0
 80140b2:	dded      	ble.n	8014090 <uxr_run_session_until_all_status+0x6c>
 80140b4:	2a00      	cmp	r2, #0
 80140b6:	d1ce      	bne.n	8014056 <uxr_run_session_until_all_status+0x32>
 80140b8:	e7ea      	b.n	8014090 <uxr_run_session_until_all_status+0x6c>
 80140ba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80140bc:	2001      	movs	r0, #1
 80140be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140c2:	2000      	movs	r0, #0
 80140c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080140c8 <wait_session_status>:
 80140c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140cc:	4604      	mov	r4, r0
 80140ce:	b09d      	sub	sp, #116	@ 0x74
 80140d0:	20ff      	movs	r0, #255	@ 0xff
 80140d2:	7160      	strb	r0, [r4, #5]
 80140d4:	9303      	str	r3, [sp, #12]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f000 80b6 	beq.w	8014248 <wait_session_status+0x180>
 80140dc:	468a      	mov	sl, r1
 80140de:	4691      	mov	r9, r2
 80140e0:	f04f 0b00 	mov.w	fp, #0
 80140e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80140e6:	464a      	mov	r2, r9
 80140e8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80140ec:	4651      	mov	r1, sl
 80140ee:	47a8      	blx	r5
 80140f0:	f000 fca4 	bl	8014a3c <uxr_millis>
 80140f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80140f8:	4605      	mov	r5, r0
 80140fa:	e009      	b.n	8014110 <wait_session_status+0x48>
 80140fc:	f000 fc9e 	bl	8014a3c <uxr_millis>
 8014100:	1b40      	subs	r0, r0, r5
 8014102:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014106:	2b00      	cmp	r3, #0
 8014108:	dd40      	ble.n	801418c <wait_session_status+0xc4>
 801410a:	7960      	ldrb	r0, [r4, #5]
 801410c:	28ff      	cmp	r0, #255	@ 0xff
 801410e:	d145      	bne.n	801419c <wait_session_status+0xd4>
 8014110:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014112:	a908      	add	r1, sp, #32
 8014114:	6896      	ldr	r6, [r2, #8]
 8014116:	6810      	ldr	r0, [r2, #0]
 8014118:	aa09      	add	r2, sp, #36	@ 0x24
 801411a:	47b0      	blx	r6
 801411c:	2800      	cmp	r0, #0
 801411e:	d0ed      	beq.n	80140fc <wait_session_status+0x34>
 8014120:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014124:	a80c      	add	r0, sp, #48	@ 0x30
 8014126:	f7fe fec1 	bl	8012eac <ucdr_init_buffer>
 801412a:	2600      	movs	r6, #0
 801412c:	f10d 031e 	add.w	r3, sp, #30
 8014130:	aa07      	add	r2, sp, #28
 8014132:	a90c      	add	r1, sp, #48	@ 0x30
 8014134:	4620      	mov	r0, r4
 8014136:	f88d 601c 	strb.w	r6, [sp, #28]
 801413a:	f000 fa87 	bl	801464c <uxr_read_session_header>
 801413e:	2800      	cmp	r0, #0
 8014140:	d0dc      	beq.n	80140fc <wait_session_status+0x34>
 8014142:	4631      	mov	r1, r6
 8014144:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014148:	f000 fb24 	bl	8014794 <uxr_stream_id_from_raw>
 801414c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014150:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014154:	9302      	str	r3, [sp, #8]
 8014156:	2f01      	cmp	r7, #1
 8014158:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801415c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014160:	d05c      	beq.n	801421c <wait_session_status+0x154>
 8014162:	2f02      	cmp	r7, #2
 8014164:	d020      	beq.n	80141a8 <wait_session_status+0xe0>
 8014166:	2f00      	cmp	r7, #0
 8014168:	d1c8      	bne.n	80140fc <wait_session_status+0x34>
 801416a:	4639      	mov	r1, r7
 801416c:	4638      	mov	r0, r7
 801416e:	f000 fb11 	bl	8014794 <uxr_stream_id_from_raw>
 8014172:	a90c      	add	r1, sp, #48	@ 0x30
 8014174:	4602      	mov	r2, r0
 8014176:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014178:	4620      	mov	r0, r4
 801417a:	f7ff fc2b 	bl	80139d4 <read_submessage_list>
 801417e:	f000 fc5d 	bl	8014a3c <uxr_millis>
 8014182:	1b40      	subs	r0, r0, r5
 8014184:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014188:	2b00      	cmp	r3, #0
 801418a:	dcbe      	bgt.n	801410a <wait_session_status+0x42>
 801418c:	9b03      	ldr	r3, [sp, #12]
 801418e:	7960      	ldrb	r0, [r4, #5]
 8014190:	f10b 0b01 	add.w	fp, fp, #1
 8014194:	455b      	cmp	r3, fp
 8014196:	d001      	beq.n	801419c <wait_session_status+0xd4>
 8014198:	28ff      	cmp	r0, #255	@ 0xff
 801419a:	d0a3      	beq.n	80140e4 <wait_session_status+0x1c>
 801419c:	38ff      	subs	r0, #255	@ 0xff
 801419e:	bf18      	it	ne
 80141a0:	2001      	movne	r0, #1
 80141a2:	b01d      	add	sp, #116	@ 0x74
 80141a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80141ac:	9304      	str	r3, [sp, #16]
 80141ae:	4631      	mov	r1, r6
 80141b0:	f104 0008 	add.w	r0, r4, #8
 80141b4:	f000 fbdc 	bl	8014970 <uxr_get_input_reliable_stream>
 80141b8:	4680      	mov	r8, r0
 80141ba:	b348      	cbz	r0, 8014210 <wait_session_status+0x148>
 80141bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80141be:	9205      	str	r2, [sp, #20]
 80141c0:	a80c      	add	r0, sp, #48	@ 0x30
 80141c2:	f7fe fea3 	bl	8012f0c <ucdr_buffer_remaining>
 80141c6:	4603      	mov	r3, r0
 80141c8:	f10d 001d 	add.w	r0, sp, #29
 80141cc:	9000      	str	r0, [sp, #0]
 80141ce:	9a05      	ldr	r2, [sp, #20]
 80141d0:	9902      	ldr	r1, [sp, #8]
 80141d2:	4640      	mov	r0, r8
 80141d4:	f00a fa0e 	bl	801e5f4 <uxr_receive_reliable_message>
 80141d8:	b1d0      	cbz	r0, 8014210 <wait_session_status+0x148>
 80141da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d03a      	beq.n	8014258 <wait_session_status+0x190>
 80141e2:	9f04      	ldr	r7, [sp, #16]
 80141e4:	e00a      	b.n	80141fc <wait_session_status+0x134>
 80141e6:	f04f 0302 	mov.w	r3, #2
 80141ea:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80141ee:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80141f2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80141f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80141f8:	f7ff fbec 	bl	80139d4 <read_submessage_list>
 80141fc:	a914      	add	r1, sp, #80	@ 0x50
 80141fe:	2204      	movs	r2, #4
 8014200:	4640      	mov	r0, r8
 8014202:	f00a fa77 	bl	801e6f4 <uxr_next_input_reliable_buffer_available>
 8014206:	4603      	mov	r3, r0
 8014208:	a914      	add	r1, sp, #80	@ 0x50
 801420a:	4620      	mov	r0, r4
 801420c:	2b00      	cmp	r3, #0
 801420e:	d1ea      	bne.n	80141e6 <wait_session_status+0x11e>
 8014210:	9904      	ldr	r1, [sp, #16]
 8014212:	4632      	mov	r2, r6
 8014214:	4620      	mov	r0, r4
 8014216:	f7ff fa59 	bl	80136cc <write_submessage_acknack.isra.0>
 801421a:	e76f      	b.n	80140fc <wait_session_status+0x34>
 801421c:	4631      	mov	r1, r6
 801421e:	f104 0008 	add.w	r0, r4, #8
 8014222:	f000 fb9b 	bl	801495c <uxr_get_input_best_effort_stream>
 8014226:	2800      	cmp	r0, #0
 8014228:	f43f af68 	beq.w	80140fc <wait_session_status+0x34>
 801422c:	9902      	ldr	r1, [sp, #8]
 801422e:	f00a f94d 	bl	801e4cc <uxr_receive_best_effort_message>
 8014232:	2800      	cmp	r0, #0
 8014234:	f43f af62 	beq.w	80140fc <wait_session_status+0x34>
 8014238:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801423c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801423e:	a90c      	add	r1, sp, #48	@ 0x30
 8014240:	4620      	mov	r0, r4
 8014242:	f7ff fbc7 	bl	80139d4 <read_submessage_list>
 8014246:	e759      	b.n	80140fc <wait_session_status+0x34>
 8014248:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801424a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801424e:	47a0      	blx	r4
 8014250:	2001      	movs	r0, #1
 8014252:	b01d      	add	sp, #116	@ 0x74
 8014254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014258:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801425c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801425e:	a90c      	add	r1, sp, #48	@ 0x30
 8014260:	4620      	mov	r0, r4
 8014262:	f7ff fbb7 	bl	80139d4 <read_submessage_list>
 8014266:	e7bc      	b.n	80141e2 <wait_session_status+0x11a>

08014268 <uxr_delete_session_retries>:
 8014268:	b530      	push	{r4, r5, lr}
 801426a:	b08f      	sub	sp, #60	@ 0x3c
 801426c:	4604      	mov	r4, r0
 801426e:	460d      	mov	r5, r1
 8014270:	f000 fa2e 	bl	80146d0 <uxr_session_header_offset>
 8014274:	2300      	movs	r3, #0
 8014276:	2210      	movs	r2, #16
 8014278:	9000      	str	r0, [sp, #0]
 801427a:	a902      	add	r1, sp, #8
 801427c:	a806      	add	r0, sp, #24
 801427e:	f7fe fe03 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 8014282:	a906      	add	r1, sp, #24
 8014284:	4620      	mov	r0, r4
 8014286:	f000 f973 	bl	8014570 <uxr_buffer_delete_session>
 801428a:	2200      	movs	r2, #0
 801428c:	4611      	mov	r1, r2
 801428e:	9b06      	ldr	r3, [sp, #24]
 8014290:	4620      	mov	r0, r4
 8014292:	f000 f9c7 	bl	8014624 <uxr_stamp_session_header>
 8014296:	a806      	add	r0, sp, #24
 8014298:	f7fe fe34 	bl	8012f04 <ucdr_buffer_length>
 801429c:	462b      	mov	r3, r5
 801429e:	4602      	mov	r2, r0
 80142a0:	a902      	add	r1, sp, #8
 80142a2:	4620      	mov	r0, r4
 80142a4:	f7ff ff10 	bl	80140c8 <wait_session_status>
 80142a8:	b118      	cbz	r0, 80142b2 <uxr_delete_session_retries+0x4a>
 80142aa:	7960      	ldrb	r0, [r4, #5]
 80142ac:	fab0 f080 	clz	r0, r0
 80142b0:	0940      	lsrs	r0, r0, #5
 80142b2:	b00f      	add	sp, #60	@ 0x3c
 80142b4:	bd30      	pop	{r4, r5, pc}
 80142b6:	bf00      	nop

080142b8 <uxr_create_session>:
 80142b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142bc:	f100 0b08 	add.w	fp, r0, #8
 80142c0:	b0ab      	sub	sp, #172	@ 0xac
 80142c2:	4604      	mov	r4, r0
 80142c4:	4658      	mov	r0, fp
 80142c6:	f000 fa99 	bl	80147fc <uxr_reset_stream_storage>
 80142ca:	4620      	mov	r0, r4
 80142cc:	f000 fa00 	bl	80146d0 <uxr_session_header_offset>
 80142d0:	2300      	movs	r3, #0
 80142d2:	9000      	str	r0, [sp, #0]
 80142d4:	221c      	movs	r2, #28
 80142d6:	a90b      	add	r1, sp, #44	@ 0x2c
 80142d8:	a812      	add	r0, sp, #72	@ 0x48
 80142da:	f7fe fdd5 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 80142de:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80142e0:	8a1a      	ldrh	r2, [r3, #16]
 80142e2:	3a04      	subs	r2, #4
 80142e4:	b292      	uxth	r2, r2
 80142e6:	a912      	add	r1, sp, #72	@ 0x48
 80142e8:	4620      	mov	r0, r4
 80142ea:	f000 f917 	bl	801451c <uxr_buffer_create_session>
 80142ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80142f0:	4620      	mov	r0, r4
 80142f2:	f000 f983 	bl	80145fc <uxr_stamp_create_session_header>
 80142f6:	a812      	add	r0, sp, #72	@ 0x48
 80142f8:	f7fe fe04 	bl	8012f04 <ucdr_buffer_length>
 80142fc:	23ff      	movs	r3, #255	@ 0xff
 80142fe:	7163      	strb	r3, [r4, #5]
 8014300:	230a      	movs	r3, #10
 8014302:	46da      	mov	sl, fp
 8014304:	9303      	str	r3, [sp, #12]
 8014306:	4683      	mov	fp, r0
 8014308:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801430a:	465a      	mov	r2, fp
 801430c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014310:	a90b      	add	r1, sp, #44	@ 0x2c
 8014312:	47a8      	blx	r5
 8014314:	f000 fb92 	bl	8014a3c <uxr_millis>
 8014318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801431c:	4605      	mov	r5, r0
 801431e:	e009      	b.n	8014334 <uxr_create_session+0x7c>
 8014320:	f000 fb8c 	bl	8014a3c <uxr_millis>
 8014324:	1b40      	subs	r0, r0, r5
 8014326:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801432a:	2b00      	cmp	r3, #0
 801432c:	7962      	ldrb	r2, [r4, #5]
 801432e:	dd38      	ble.n	80143a2 <uxr_create_session+0xea>
 8014330:	2aff      	cmp	r2, #255	@ 0xff
 8014332:	d13c      	bne.n	80143ae <uxr_create_session+0xf6>
 8014334:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014336:	a907      	add	r1, sp, #28
 8014338:	6896      	ldr	r6, [r2, #8]
 801433a:	6810      	ldr	r0, [r2, #0]
 801433c:	aa08      	add	r2, sp, #32
 801433e:	47b0      	blx	r6
 8014340:	2800      	cmp	r0, #0
 8014342:	d0ed      	beq.n	8014320 <uxr_create_session+0x68>
 8014344:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014348:	a81a      	add	r0, sp, #104	@ 0x68
 801434a:	f7fe fdaf 	bl	8012eac <ucdr_init_buffer>
 801434e:	2600      	movs	r6, #0
 8014350:	f10d 031a 	add.w	r3, sp, #26
 8014354:	aa06      	add	r2, sp, #24
 8014356:	a91a      	add	r1, sp, #104	@ 0x68
 8014358:	4620      	mov	r0, r4
 801435a:	f88d 6018 	strb.w	r6, [sp, #24]
 801435e:	f000 f975 	bl	801464c <uxr_read_session_header>
 8014362:	2800      	cmp	r0, #0
 8014364:	d0dc      	beq.n	8014320 <uxr_create_session+0x68>
 8014366:	4631      	mov	r1, r6
 8014368:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801436c:	f000 fa12 	bl	8014794 <uxr_stream_id_from_raw>
 8014370:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014374:	2e01      	cmp	r6, #1
 8014376:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801437a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801437e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8014382:	d053      	beq.n	801442c <uxr_create_session+0x174>
 8014384:	2e02      	cmp	r6, #2
 8014386:	d018      	beq.n	80143ba <uxr_create_session+0x102>
 8014388:	2e00      	cmp	r6, #0
 801438a:	d1c9      	bne.n	8014320 <uxr_create_session+0x68>
 801438c:	4631      	mov	r1, r6
 801438e:	4630      	mov	r0, r6
 8014390:	f000 fa00 	bl	8014794 <uxr_stream_id_from_raw>
 8014394:	a91a      	add	r1, sp, #104	@ 0x68
 8014396:	4602      	mov	r2, r0
 8014398:	900a      	str	r0, [sp, #40]	@ 0x28
 801439a:	4620      	mov	r0, r4
 801439c:	f7ff fb1a 	bl	80139d4 <read_submessage_list>
 80143a0:	e7be      	b.n	8014320 <uxr_create_session+0x68>
 80143a2:	9b03      	ldr	r3, [sp, #12]
 80143a4:	3b01      	subs	r3, #1
 80143a6:	9303      	str	r3, [sp, #12]
 80143a8:	d001      	beq.n	80143ae <uxr_create_session+0xf6>
 80143aa:	2aff      	cmp	r2, #255	@ 0xff
 80143ac:	d0ac      	beq.n	8014308 <uxr_create_session+0x50>
 80143ae:	2a00      	cmp	r2, #0
 80143b0:	d051      	beq.n	8014456 <uxr_create_session+0x19e>
 80143b2:	2000      	movs	r0, #0
 80143b4:	b02b      	add	sp, #172	@ 0xac
 80143b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80143be:	9304      	str	r3, [sp, #16]
 80143c0:	4639      	mov	r1, r7
 80143c2:	4650      	mov	r0, sl
 80143c4:	f000 fad4 	bl	8014970 <uxr_get_input_reliable_stream>
 80143c8:	4680      	mov	r8, r0
 80143ca:	b348      	cbz	r0, 8014420 <uxr_create_session+0x168>
 80143cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80143ce:	9205      	str	r2, [sp, #20]
 80143d0:	a81a      	add	r0, sp, #104	@ 0x68
 80143d2:	f7fe fd9b 	bl	8012f0c <ucdr_buffer_remaining>
 80143d6:	4603      	mov	r3, r0
 80143d8:	f10d 0019 	add.w	r0, sp, #25
 80143dc:	9000      	str	r0, [sp, #0]
 80143de:	9a05      	ldr	r2, [sp, #20]
 80143e0:	4649      	mov	r1, r9
 80143e2:	4640      	mov	r0, r8
 80143e4:	f00a f906 	bl	801e5f4 <uxr_receive_reliable_message>
 80143e8:	b1d0      	cbz	r0, 8014420 <uxr_create_session+0x168>
 80143ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d038      	beq.n	8014464 <uxr_create_session+0x1ac>
 80143f2:	9e04      	ldr	r6, [sp, #16]
 80143f4:	e00a      	b.n	801440c <uxr_create_session+0x154>
 80143f6:	f04f 0302 	mov.w	r3, #2
 80143fa:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80143fe:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8014402:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014408:	f7ff fae4 	bl	80139d4 <read_submessage_list>
 801440c:	a922      	add	r1, sp, #136	@ 0x88
 801440e:	2204      	movs	r2, #4
 8014410:	4640      	mov	r0, r8
 8014412:	f00a f96f 	bl	801e6f4 <uxr_next_input_reliable_buffer_available>
 8014416:	4603      	mov	r3, r0
 8014418:	a922      	add	r1, sp, #136	@ 0x88
 801441a:	4620      	mov	r0, r4
 801441c:	2b00      	cmp	r3, #0
 801441e:	d1ea      	bne.n	80143f6 <uxr_create_session+0x13e>
 8014420:	9904      	ldr	r1, [sp, #16]
 8014422:	463a      	mov	r2, r7
 8014424:	4620      	mov	r0, r4
 8014426:	f7ff f951 	bl	80136cc <write_submessage_acknack.isra.0>
 801442a:	e779      	b.n	8014320 <uxr_create_session+0x68>
 801442c:	4639      	mov	r1, r7
 801442e:	4650      	mov	r0, sl
 8014430:	f000 fa94 	bl	801495c <uxr_get_input_best_effort_stream>
 8014434:	2800      	cmp	r0, #0
 8014436:	f43f af73 	beq.w	8014320 <uxr_create_session+0x68>
 801443a:	4649      	mov	r1, r9
 801443c:	f00a f846 	bl	801e4cc <uxr_receive_best_effort_message>
 8014440:	2800      	cmp	r0, #0
 8014442:	f43f af6d 	beq.w	8014320 <uxr_create_session+0x68>
 8014446:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801444a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801444c:	a91a      	add	r1, sp, #104	@ 0x68
 801444e:	4620      	mov	r0, r4
 8014450:	f7ff fac0 	bl	80139d4 <read_submessage_list>
 8014454:	e764      	b.n	8014320 <uxr_create_session+0x68>
 8014456:	4650      	mov	r0, sl
 8014458:	f000 f9d0 	bl	80147fc <uxr_reset_stream_storage>
 801445c:	2001      	movs	r0, #1
 801445e:	b02b      	add	sp, #172	@ 0xac
 8014460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014464:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8014468:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801446a:	a91a      	add	r1, sp, #104	@ 0x68
 801446c:	4620      	mov	r0, r4
 801446e:	f7ff fab1 	bl	80139d4 <read_submessage_list>
 8014472:	e7be      	b.n	80143f2 <uxr_create_session+0x13a>

08014474 <uxr_prepare_stream_to_write_submessage>:
 8014474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014478:	b082      	sub	sp, #8
 801447a:	4682      	mov	sl, r0
 801447c:	4610      	mov	r0, r2
 801447e:	4615      	mov	r5, r2
 8014480:	461e      	mov	r6, r3
 8014482:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8014486:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801448a:	9101      	str	r1, [sp, #4]
 801448c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014490:	f000 face 	bl	8014a30 <uxr_submessage_padding>
 8014494:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014498:	f105 0904 	add.w	r9, r5, #4
 801449c:	2b01      	cmp	r3, #1
 801449e:	4481      	add	r9, r0
 80144a0:	d01d      	beq.n	80144de <uxr_prepare_stream_to_write_submessage+0x6a>
 80144a2:	2b02      	cmp	r3, #2
 80144a4:	d116      	bne.n	80144d4 <uxr_prepare_stream_to_write_submessage+0x60>
 80144a6:	4621      	mov	r1, r4
 80144a8:	f10a 0008 	add.w	r0, sl, #8
 80144ac:	f000 fa4c 	bl	8014948 <uxr_get_output_reliable_stream>
 80144b0:	4604      	mov	r4, r0
 80144b2:	b158      	cbz	r0, 80144cc <uxr_prepare_stream_to_write_submessage+0x58>
 80144b4:	4649      	mov	r1, r9
 80144b6:	4632      	mov	r2, r6
 80144b8:	f00a fad8 	bl	801ea6c <uxr_prepare_reliable_buffer_to_write>
 80144bc:	4604      	mov	r4, r0
 80144be:	b12c      	cbz	r4, 80144cc <uxr_prepare_stream_to_write_submessage+0x58>
 80144c0:	4643      	mov	r3, r8
 80144c2:	b2aa      	uxth	r2, r5
 80144c4:	4639      	mov	r1, r7
 80144c6:	4630      	mov	r0, r6
 80144c8:	f000 fa72 	bl	80149b0 <uxr_buffer_submessage_header>
 80144cc:	4620      	mov	r0, r4
 80144ce:	b002      	add	sp, #8
 80144d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d4:	2400      	movs	r4, #0
 80144d6:	4620      	mov	r0, r4
 80144d8:	b002      	add	sp, #8
 80144da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144de:	4621      	mov	r1, r4
 80144e0:	f10a 0008 	add.w	r0, sl, #8
 80144e4:	f000 fa28 	bl	8014938 <uxr_get_output_best_effort_stream>
 80144e8:	4604      	mov	r4, r0
 80144ea:	2800      	cmp	r0, #0
 80144ec:	d0ee      	beq.n	80144cc <uxr_prepare_stream_to_write_submessage+0x58>
 80144ee:	4649      	mov	r1, r9
 80144f0:	4632      	mov	r2, r6
 80144f2:	f00a f9eb 	bl	801e8cc <uxr_prepare_best_effort_buffer_to_write>
 80144f6:	4604      	mov	r4, r0
 80144f8:	e7e1      	b.n	80144be <uxr_prepare_stream_to_write_submessage+0x4a>
 80144fa:	bf00      	nop

080144fc <uxr_init_session_info>:
 80144fc:	0e13      	lsrs	r3, r2, #24
 80144fe:	7043      	strb	r3, [r0, #1]
 8014500:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014504:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014508:	7001      	strb	r1, [r0, #0]
 801450a:	70c3      	strb	r3, [r0, #3]
 801450c:	2109      	movs	r1, #9
 801450e:	23ff      	movs	r3, #255	@ 0xff
 8014510:	f880 c002 	strb.w	ip, [r0, #2]
 8014514:	7102      	strb	r2, [r0, #4]
 8014516:	80c1      	strh	r1, [r0, #6]
 8014518:	7143      	strb	r3, [r0, #5]
 801451a:	4770      	bx	lr

0801451c <uxr_buffer_create_session>:
 801451c:	b530      	push	{r4, r5, lr}
 801451e:	b089      	sub	sp, #36	@ 0x24
 8014520:	2300      	movs	r3, #0
 8014522:	4d12      	ldr	r5, [pc, #72]	@ (801456c <uxr_buffer_create_session+0x50>)
 8014524:	9307      	str	r3, [sp, #28]
 8014526:	f8ad 201c 	strh.w	r2, [sp, #28]
 801452a:	2201      	movs	r2, #1
 801452c:	9301      	str	r3, [sp, #4]
 801452e:	80c2      	strh	r2, [r0, #6]
 8014530:	f88d 2004 	strb.w	r2, [sp, #4]
 8014534:	682a      	ldr	r2, [r5, #0]
 8014536:	9200      	str	r2, [sp, #0]
 8014538:	88aa      	ldrh	r2, [r5, #4]
 801453a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801453e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014542:	9202      	str	r2, [sp, #8]
 8014544:	460c      	mov	r4, r1
 8014546:	7802      	ldrb	r2, [r0, #0]
 8014548:	9303      	str	r3, [sp, #12]
 801454a:	4619      	mov	r1, r3
 801454c:	f88d 200c 	strb.w	r2, [sp, #12]
 8014550:	4620      	mov	r0, r4
 8014552:	2210      	movs	r2, #16
 8014554:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014558:	9306      	str	r3, [sp, #24]
 801455a:	f000 fa29 	bl	80149b0 <uxr_buffer_submessage_header>
 801455e:	4669      	mov	r1, sp
 8014560:	4620      	mov	r0, r4
 8014562:	f001 faa1 	bl	8015aa8 <uxr_serialize_CREATE_CLIENT_Payload>
 8014566:	b009      	add	sp, #36	@ 0x24
 8014568:	bd30      	pop	{r4, r5, pc}
 801456a:	bf00      	nop
 801456c:	08022908 	.word	0x08022908

08014570 <uxr_buffer_delete_session>:
 8014570:	b510      	push	{r4, lr}
 8014572:	4b0c      	ldr	r3, [pc, #48]	@ (80145a4 <uxr_buffer_delete_session+0x34>)
 8014574:	b082      	sub	sp, #8
 8014576:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801457a:	f8ad c006 	strh.w	ip, [sp, #6]
 801457e:	460c      	mov	r4, r1
 8014580:	2202      	movs	r2, #2
 8014582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014586:	80c2      	strh	r2, [r0, #6]
 8014588:	f8ad 3004 	strh.w	r3, [sp, #4]
 801458c:	2204      	movs	r2, #4
 801458e:	2300      	movs	r3, #0
 8014590:	2103      	movs	r1, #3
 8014592:	4620      	mov	r0, r4
 8014594:	f000 fa0c 	bl	80149b0 <uxr_buffer_submessage_header>
 8014598:	a901      	add	r1, sp, #4
 801459a:	4620      	mov	r0, r4
 801459c:	f001 fb2a 	bl	8015bf4 <uxr_serialize_DELETE_Payload>
 80145a0:	b002      	add	sp, #8
 80145a2:	bd10      	pop	{r4, pc}
 80145a4:	08022908 	.word	0x08022908

080145a8 <uxr_read_create_session_status>:
 80145a8:	b510      	push	{r4, lr}
 80145aa:	b088      	sub	sp, #32
 80145ac:	4604      	mov	r4, r0
 80145ae:	4608      	mov	r0, r1
 80145b0:	a901      	add	r1, sp, #4
 80145b2:	f001 fb2f 	bl	8015c14 <uxr_deserialize_STATUS_AGENT_Payload>
 80145b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80145ba:	7163      	strb	r3, [r4, #5]
 80145bc:	b008      	add	sp, #32
 80145be:	bd10      	pop	{r4, pc}

080145c0 <uxr_read_delete_session_status>:
 80145c0:	b510      	push	{r4, lr}
 80145c2:	4604      	mov	r4, r0
 80145c4:	b084      	sub	sp, #16
 80145c6:	4608      	mov	r0, r1
 80145c8:	a902      	add	r1, sp, #8
 80145ca:	f001 fb53 	bl	8015c74 <uxr_deserialize_STATUS_Payload>
 80145ce:	88e3      	ldrh	r3, [r4, #6]
 80145d0:	2b02      	cmp	r3, #2
 80145d2:	d001      	beq.n	80145d8 <uxr_read_delete_session_status+0x18>
 80145d4:	b004      	add	sp, #16
 80145d6:	bd10      	pop	{r4, pc}
 80145d8:	f10d 000a 	add.w	r0, sp, #10
 80145dc:	f7fe fffc 	bl	80135d8 <uxr_object_id_from_raw>
 80145e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80145e4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80145e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	2b02      	cmp	r3, #2
 80145f0:	bf04      	itt	eq
 80145f2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80145f6:	7163      	strbeq	r3, [r4, #5]
 80145f8:	b004      	add	sp, #16
 80145fa:	bd10      	pop	{r4, pc}

080145fc <uxr_stamp_create_session_header>:
 80145fc:	b510      	push	{r4, lr}
 80145fe:	2208      	movs	r2, #8
 8014600:	b08a      	sub	sp, #40	@ 0x28
 8014602:	4604      	mov	r4, r0
 8014604:	eb0d 0002 	add.w	r0, sp, r2
 8014608:	f7fe fc50 	bl	8012eac <ucdr_init_buffer>
 801460c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014610:	9400      	str	r4, [sp, #0]
 8014612:	2300      	movs	r3, #0
 8014614:	461a      	mov	r2, r3
 8014616:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801461a:	a802      	add	r0, sp, #8
 801461c:	f000 fbc2 	bl	8014da4 <uxr_serialize_message_header>
 8014620:	b00a      	add	sp, #40	@ 0x28
 8014622:	bd10      	pop	{r4, pc}

08014624 <uxr_stamp_session_header>:
 8014624:	b530      	push	{r4, r5, lr}
 8014626:	b08d      	sub	sp, #52	@ 0x34
 8014628:	4604      	mov	r4, r0
 801462a:	460d      	mov	r5, r1
 801462c:	9203      	str	r2, [sp, #12]
 801462e:	4619      	mov	r1, r3
 8014630:	a804      	add	r0, sp, #16
 8014632:	2208      	movs	r2, #8
 8014634:	f7fe fc3a 	bl	8012eac <ucdr_init_buffer>
 8014638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801463c:	9b03      	ldr	r3, [sp, #12]
 801463e:	9400      	str	r4, [sp, #0]
 8014640:	462a      	mov	r2, r5
 8014642:	a804      	add	r0, sp, #16
 8014644:	f000 fbae 	bl	8014da4 <uxr_serialize_message_header>
 8014648:	b00d      	add	sp, #52	@ 0x34
 801464a:	bd30      	pop	{r4, r5, pc}

0801464c <uxr_read_session_header>:
 801464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014650:	4607      	mov	r7, r0
 8014652:	b084      	sub	sp, #16
 8014654:	4608      	mov	r0, r1
 8014656:	460c      	mov	r4, r1
 8014658:	4615      	mov	r5, r2
 801465a:	461e      	mov	r6, r3
 801465c:	f7fe fc56 	bl	8012f0c <ucdr_buffer_remaining>
 8014660:	2808      	cmp	r0, #8
 8014662:	d803      	bhi.n	801466c <uxr_read_session_header+0x20>
 8014664:	2000      	movs	r0, #0
 8014666:	b004      	add	sp, #16
 8014668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801466c:	f10d 080c 	add.w	r8, sp, #12
 8014670:	4633      	mov	r3, r6
 8014672:	462a      	mov	r2, r5
 8014674:	f8cd 8000 	str.w	r8, [sp]
 8014678:	4620      	mov	r0, r4
 801467a:	f10d 010b 	add.w	r1, sp, #11
 801467e:	f000 fbaf 	bl	8014de0 <uxr_deserialize_message_header>
 8014682:	783a      	ldrb	r2, [r7, #0]
 8014684:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014688:	4293      	cmp	r3, r2
 801468a:	d1eb      	bne.n	8014664 <uxr_read_session_header+0x18>
 801468c:	061b      	lsls	r3, r3, #24
 801468e:	d41c      	bmi.n	80146ca <uxr_read_session_header+0x7e>
 8014690:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014694:	787b      	ldrb	r3, [r7, #1]
 8014696:	429a      	cmp	r2, r3
 8014698:	d003      	beq.n	80146a2 <uxr_read_session_header+0x56>
 801469a:	2001      	movs	r0, #1
 801469c:	f080 0001 	eor.w	r0, r0, #1
 80146a0:	e7e1      	b.n	8014666 <uxr_read_session_header+0x1a>
 80146a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80146a6:	78bb      	ldrb	r3, [r7, #2]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	f107 0102 	add.w	r1, r7, #2
 80146ae:	d1f4      	bne.n	801469a <uxr_read_session_header+0x4e>
 80146b0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80146b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d1ee      	bne.n	801469a <uxr_read_session_header+0x4e>
 80146bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80146c0:	784b      	ldrb	r3, [r1, #1]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d1e9      	bne.n	801469a <uxr_read_session_header+0x4e>
 80146c6:	2000      	movs	r0, #0
 80146c8:	e7e8      	b.n	801469c <uxr_read_session_header+0x50>
 80146ca:	2001      	movs	r0, #1
 80146cc:	e7cb      	b.n	8014666 <uxr_read_session_header+0x1a>
 80146ce:	bf00      	nop

080146d0 <uxr_session_header_offset>:
 80146d0:	f990 3000 	ldrsb.w	r3, [r0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	bfac      	ite	ge
 80146d8:	2008      	movge	r0, #8
 80146da:	2004      	movlt	r0, #4
 80146dc:	4770      	bx	lr
 80146de:	bf00      	nop

080146e0 <uxr_init_base_object_request>:
 80146e0:	b510      	push	{r4, lr}
 80146e2:	88c3      	ldrh	r3, [r0, #6]
 80146e4:	b082      	sub	sp, #8
 80146e6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80146ea:	9101      	str	r1, [sp, #4]
 80146ec:	f1a3 010a 	sub.w	r1, r3, #10
 80146f0:	b289      	uxth	r1, r1
 80146f2:	42a1      	cmp	r1, r4
 80146f4:	d80e      	bhi.n	8014714 <uxr_init_base_object_request+0x34>
 80146f6:	3301      	adds	r3, #1
 80146f8:	b29c      	uxth	r4, r3
 80146fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	80c4      	strh	r4, [r0, #6]
 8014702:	9801      	ldr	r0, [sp, #4]
 8014704:	7011      	strb	r1, [r2, #0]
 8014706:	7053      	strb	r3, [r2, #1]
 8014708:	1c91      	adds	r1, r2, #2
 801470a:	f7fe ff79 	bl	8013600 <uxr_object_id_to_raw>
 801470e:	4620      	mov	r0, r4
 8014710:	b002      	add	sp, #8
 8014712:	bd10      	pop	{r4, pc}
 8014714:	230a      	movs	r3, #10
 8014716:	2100      	movs	r1, #0
 8014718:	461c      	mov	r4, r3
 801471a:	e7f1      	b.n	8014700 <uxr_init_base_object_request+0x20>

0801471c <uxr_parse_base_object_request>:
 801471c:	b570      	push	{r4, r5, r6, lr}
 801471e:	4604      	mov	r4, r0
 8014720:	3002      	adds	r0, #2
 8014722:	460d      	mov	r5, r1
 8014724:	4616      	mov	r6, r2
 8014726:	f7fe ff57 	bl	80135d8 <uxr_object_id_from_raw>
 801472a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801472e:	8028      	strh	r0, [r5, #0]
 8014730:	806b      	strh	r3, [r5, #2]
 8014732:	7822      	ldrb	r2, [r4, #0]
 8014734:	7863      	ldrb	r3, [r4, #1]
 8014736:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801473a:	8033      	strh	r3, [r6, #0]
 801473c:	bd70      	pop	{r4, r5, r6, pc}
 801473e:	bf00      	nop

08014740 <uxr_stream_id>:
 8014740:	2901      	cmp	r1, #1
 8014742:	b082      	sub	sp, #8
 8014744:	d01d      	beq.n	8014782 <uxr_stream_id+0x42>
 8014746:	2902      	cmp	r1, #2
 8014748:	f04f 0c00 	mov.w	ip, #0
 801474c:	d01e      	beq.n	801478c <uxr_stream_id+0x4c>
 801474e:	2300      	movs	r3, #0
 8014750:	f36c 0307 	bfi	r3, ip, #0, #8
 8014754:	f360 230f 	bfi	r3, r0, #8, #8
 8014758:	f361 4317 	bfi	r3, r1, #16, #8
 801475c:	f362 631f 	bfi	r3, r2, #24, #8
 8014760:	b2da      	uxtb	r2, r3
 8014762:	2000      	movs	r0, #0
 8014764:	f362 0007 	bfi	r0, r2, #0, #8
 8014768:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801476c:	f362 200f 	bfi	r0, r2, #8, #8
 8014770:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014774:	f362 4017 	bfi	r0, r2, #16, #8
 8014778:	0e1b      	lsrs	r3, r3, #24
 801477a:	f363 601f 	bfi	r0, r3, #24, #8
 801477e:	b002      	add	sp, #8
 8014780:	4770      	bx	lr
 8014782:	f100 0c01 	add.w	ip, r0, #1
 8014786:	fa5f fc8c 	uxtb.w	ip, ip
 801478a:	e7e0      	b.n	801474e <uxr_stream_id+0xe>
 801478c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8014790:	e7dd      	b.n	801474e <uxr_stream_id+0xe>
 8014792:	bf00      	nop

08014794 <uxr_stream_id_from_raw>:
 8014794:	b082      	sub	sp, #8
 8014796:	b130      	cbz	r0, 80147a6 <uxr_stream_id_from_raw+0x12>
 8014798:	0603      	lsls	r3, r0, #24
 801479a:	d420      	bmi.n	80147de <uxr_stream_id_from_raw+0x4a>
 801479c:	1e42      	subs	r2, r0, #1
 801479e:	b2d2      	uxtb	r2, r2
 80147a0:	f04f 0c01 	mov.w	ip, #1
 80147a4:	e001      	b.n	80147aa <uxr_stream_id_from_raw+0x16>
 80147a6:	4684      	mov	ip, r0
 80147a8:	4602      	mov	r2, r0
 80147aa:	2300      	movs	r3, #0
 80147ac:	f360 0307 	bfi	r3, r0, #0, #8
 80147b0:	f362 230f 	bfi	r3, r2, #8, #8
 80147b4:	f36c 4317 	bfi	r3, ip, #16, #8
 80147b8:	f361 631f 	bfi	r3, r1, #24, #8
 80147bc:	b2da      	uxtb	r2, r3
 80147be:	2000      	movs	r0, #0
 80147c0:	f362 0007 	bfi	r0, r2, #0, #8
 80147c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80147c8:	f362 200f 	bfi	r0, r2, #8, #8
 80147cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80147d0:	f362 4017 	bfi	r0, r2, #16, #8
 80147d4:	0e1b      	lsrs	r3, r3, #24
 80147d6:	f363 601f 	bfi	r0, r3, #24, #8
 80147da:	b002      	add	sp, #8
 80147dc:	4770      	bx	lr
 80147de:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80147e2:	f04f 0c02 	mov.w	ip, #2
 80147e6:	e7e0      	b.n	80147aa <uxr_stream_id_from_raw+0x16>

080147e8 <uxr_init_stream_storage>:
 80147e8:	2300      	movs	r3, #0
 80147ea:	7403      	strb	r3, [r0, #16]
 80147ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80147f0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80147f4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80147f8:	4770      	bx	lr
 80147fa:	bf00      	nop

080147fc <uxr_reset_stream_storage>:
 80147fc:	b570      	push	{r4, r5, r6, lr}
 80147fe:	7c03      	ldrb	r3, [r0, #16]
 8014800:	4604      	mov	r4, r0
 8014802:	b153      	cbz	r3, 801481a <uxr_reset_stream_storage+0x1e>
 8014804:	4606      	mov	r6, r0
 8014806:	2500      	movs	r5, #0
 8014808:	4630      	mov	r0, r6
 801480a:	f00a f859 	bl	801e8c0 <uxr_reset_output_best_effort_stream>
 801480e:	7c23      	ldrb	r3, [r4, #16]
 8014810:	3501      	adds	r5, #1
 8014812:	42ab      	cmp	r3, r5
 8014814:	f106 0610 	add.w	r6, r6, #16
 8014818:	d8f6      	bhi.n	8014808 <uxr_reset_stream_storage+0xc>
 801481a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801481e:	b163      	cbz	r3, 801483a <uxr_reset_stream_storage+0x3e>
 8014820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014824:	2500      	movs	r5, #0
 8014826:	4630      	mov	r0, r6
 8014828:	f009 fe4c 	bl	801e4c4 <uxr_reset_input_best_effort_stream>
 801482c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014830:	3501      	adds	r5, #1
 8014832:	42ab      	cmp	r3, r5
 8014834:	f106 0602 	add.w	r6, r6, #2
 8014838:	d8f5      	bhi.n	8014826 <uxr_reset_stream_storage+0x2a>
 801483a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801483e:	b163      	cbz	r3, 801485a <uxr_reset_stream_storage+0x5e>
 8014840:	f104 0618 	add.w	r6, r4, #24
 8014844:	2500      	movs	r5, #0
 8014846:	4630      	mov	r0, r6
 8014848:	f00a f8e6 	bl	801ea18 <uxr_reset_output_reliable_stream>
 801484c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014850:	3501      	adds	r5, #1
 8014852:	42ab      	cmp	r3, r5
 8014854:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8014858:	d8f5      	bhi.n	8014846 <uxr_reset_stream_storage+0x4a>
 801485a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801485e:	b163      	cbz	r3, 801487a <uxr_reset_stream_storage+0x7e>
 8014860:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8014864:	2500      	movs	r5, #0
 8014866:	4630      	mov	r0, r6
 8014868:	f009 fea0 	bl	801e5ac <uxr_reset_input_reliable_stream>
 801486c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8014870:	3501      	adds	r5, #1
 8014872:	42ab      	cmp	r3, r5
 8014874:	f106 0618 	add.w	r6, r6, #24
 8014878:	d8f5      	bhi.n	8014866 <uxr_reset_stream_storage+0x6a>
 801487a:	bd70      	pop	{r4, r5, r6, pc}

0801487c <uxr_add_output_best_effort_buffer>:
 801487c:	b510      	push	{r4, lr}
 801487e:	7c04      	ldrb	r4, [r0, #16]
 8014880:	f104 0c01 	add.w	ip, r4, #1
 8014884:	b082      	sub	sp, #8
 8014886:	f880 c010 	strb.w	ip, [r0, #16]
 801488a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801488e:	f00a f80d 	bl	801e8ac <uxr_init_output_best_effort_stream>
 8014892:	2201      	movs	r2, #1
 8014894:	4611      	mov	r1, r2
 8014896:	4620      	mov	r0, r4
 8014898:	b002      	add	sp, #8
 801489a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801489e:	f7ff bf4f 	b.w	8014740 <uxr_stream_id>
 80148a2:	bf00      	nop

080148a4 <uxr_add_output_reliable_buffer>:
 80148a4:	b510      	push	{r4, lr}
 80148a6:	b084      	sub	sp, #16
 80148a8:	4684      	mov	ip, r0
 80148aa:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80148ae:	9000      	str	r0, [sp, #0]
 80148b0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80148b4:	2028      	movs	r0, #40	@ 0x28
 80148b6:	fb00 c004 	mla	r0, r0, r4, ip
 80148ba:	f104 0e01 	add.w	lr, r4, #1
 80148be:	3018      	adds	r0, #24
 80148c0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80148c4:	f00a f870 	bl	801e9a8 <uxr_init_output_reliable_stream>
 80148c8:	2201      	movs	r2, #1
 80148ca:	2102      	movs	r1, #2
 80148cc:	4620      	mov	r0, r4
 80148ce:	b004      	add	sp, #16
 80148d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148d4:	f7ff bf34 	b.w	8014740 <uxr_stream_id>

080148d8 <uxr_add_input_best_effort_buffer>:
 80148d8:	b510      	push	{r4, lr}
 80148da:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80148de:	4603      	mov	r3, r0
 80148e0:	1c62      	adds	r2, r4, #1
 80148e2:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80148e6:	b082      	sub	sp, #8
 80148e8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80148ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80148f0:	f009 fde4 	bl	801e4bc <uxr_init_input_best_effort_stream>
 80148f4:	2200      	movs	r2, #0
 80148f6:	2101      	movs	r1, #1
 80148f8:	4620      	mov	r0, r4
 80148fa:	b002      	add	sp, #8
 80148fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014900:	f7ff bf1e 	b.w	8014740 <uxr_stream_id>

08014904 <uxr_add_input_reliable_buffer>:
 8014904:	b510      	push	{r4, lr}
 8014906:	b084      	sub	sp, #16
 8014908:	4684      	mov	ip, r0
 801490a:	9806      	ldr	r0, [sp, #24]
 801490c:	9000      	str	r0, [sp, #0]
 801490e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014912:	2018      	movs	r0, #24
 8014914:	fb00 c004 	mla	r0, r0, r4, ip
 8014918:	f104 0e01 	add.w	lr, r4, #1
 801491c:	3048      	adds	r0, #72	@ 0x48
 801491e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8014922:	f009 fe17 	bl	801e554 <uxr_init_input_reliable_stream>
 8014926:	2200      	movs	r2, #0
 8014928:	2102      	movs	r1, #2
 801492a:	4620      	mov	r0, r4
 801492c:	b004      	add	sp, #16
 801492e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014932:	f7ff bf05 	b.w	8014740 <uxr_stream_id>
 8014936:	bf00      	nop

08014938 <uxr_get_output_best_effort_stream>:
 8014938:	7c03      	ldrb	r3, [r0, #16]
 801493a:	428b      	cmp	r3, r1
 801493c:	bf8c      	ite	hi
 801493e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014942:	2000      	movls	r0, #0
 8014944:	4770      	bx	lr
 8014946:	bf00      	nop

08014948 <uxr_get_output_reliable_stream>:
 8014948:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801494c:	428b      	cmp	r3, r1
 801494e:	bf83      	ittte	hi
 8014950:	2328      	movhi	r3, #40	@ 0x28
 8014952:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014956:	3018      	addhi	r0, #24
 8014958:	2000      	movls	r0, #0
 801495a:	4770      	bx	lr

0801495c <uxr_get_input_best_effort_stream>:
 801495c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8014960:	428b      	cmp	r3, r1
 8014962:	bf86      	itte	hi
 8014964:	3121      	addhi	r1, #33	@ 0x21
 8014966:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801496a:	2000      	movls	r0, #0
 801496c:	4770      	bx	lr
 801496e:	bf00      	nop

08014970 <uxr_get_input_reliable_stream>:
 8014970:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8014974:	428b      	cmp	r3, r1
 8014976:	bf83      	ittte	hi
 8014978:	2318      	movhi	r3, #24
 801497a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801497e:	3048      	addhi	r0, #72	@ 0x48
 8014980:	2000      	movls	r0, #0
 8014982:	4770      	bx	lr

08014984 <uxr_output_streams_confirmed>:
 8014984:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8014988:	b183      	cbz	r3, 80149ac <uxr_output_streams_confirmed+0x28>
 801498a:	b570      	push	{r4, r5, r6, lr}
 801498c:	4606      	mov	r6, r0
 801498e:	f100 0518 	add.w	r5, r0, #24
 8014992:	2400      	movs	r4, #0
 8014994:	e001      	b.n	801499a <uxr_output_streams_confirmed+0x16>
 8014996:	3528      	adds	r5, #40	@ 0x28
 8014998:	b138      	cbz	r0, 80149aa <uxr_output_streams_confirmed+0x26>
 801499a:	4628      	mov	r0, r5
 801499c:	f00a faac 	bl	801eef8 <uxr_is_output_up_to_date>
 80149a0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80149a4:	3401      	adds	r4, #1
 80149a6:	42a3      	cmp	r3, r4
 80149a8:	d8f5      	bhi.n	8014996 <uxr_output_streams_confirmed+0x12>
 80149aa:	bd70      	pop	{r4, r5, r6, pc}
 80149ac:	2001      	movs	r0, #1
 80149ae:	4770      	bx	lr

080149b0 <uxr_buffer_submessage_header>:
 80149b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b2:	4604      	mov	r4, r0
 80149b4:	460e      	mov	r6, r1
 80149b6:	2104      	movs	r1, #4
 80149b8:	4615      	mov	r5, r2
 80149ba:	461f      	mov	r7, r3
 80149bc:	f7fe fa90 	bl	8012ee0 <ucdr_align_to>
 80149c0:	2301      	movs	r3, #1
 80149c2:	ea47 0203 	orr.w	r2, r7, r3
 80149c6:	4631      	mov	r1, r6
 80149c8:	7523      	strb	r3, [r4, #20]
 80149ca:	4620      	mov	r0, r4
 80149cc:	462b      	mov	r3, r5
 80149ce:	f000 fa27 	bl	8014e20 <uxr_serialize_submessage_header>
 80149d2:	4620      	mov	r0, r4
 80149d4:	f7fe fa9a 	bl	8012f0c <ucdr_buffer_remaining>
 80149d8:	42a8      	cmp	r0, r5
 80149da:	bf34      	ite	cc
 80149dc:	2000      	movcc	r0, #0
 80149de:	2001      	movcs	r0, #1
 80149e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149e2:	bf00      	nop

080149e4 <uxr_read_submessage_header>:
 80149e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149e8:	4604      	mov	r4, r0
 80149ea:	460d      	mov	r5, r1
 80149ec:	2104      	movs	r1, #4
 80149ee:	4616      	mov	r6, r2
 80149f0:	4698      	mov	r8, r3
 80149f2:	f7fe fa75 	bl	8012ee0 <ucdr_align_to>
 80149f6:	4620      	mov	r0, r4
 80149f8:	f7fe fa88 	bl	8012f0c <ucdr_buffer_remaining>
 80149fc:	2803      	cmp	r0, #3
 80149fe:	bf8c      	ite	hi
 8014a00:	2701      	movhi	r7, #1
 8014a02:	2700      	movls	r7, #0
 8014a04:	d802      	bhi.n	8014a0c <uxr_read_submessage_header+0x28>
 8014a06:	4638      	mov	r0, r7
 8014a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a0c:	4633      	mov	r3, r6
 8014a0e:	4642      	mov	r2, r8
 8014a10:	4620      	mov	r0, r4
 8014a12:	4629      	mov	r1, r5
 8014a14:	f000 fa18 	bl	8014e48 <uxr_deserialize_submessage_header>
 8014a18:	f898 3000 	ldrb.w	r3, [r8]
 8014a1c:	f003 0201 	and.w	r2, r3, #1
 8014a20:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8014a24:	f888 3000 	strb.w	r3, [r8]
 8014a28:	7522      	strb	r2, [r4, #20]
 8014a2a:	4638      	mov	r0, r7
 8014a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a30 <uxr_submessage_padding>:
 8014a30:	f010 0003 	ands.w	r0, r0, #3
 8014a34:	bf18      	it	ne
 8014a36:	f1c0 0004 	rsbne	r0, r0, #4
 8014a3a:	4770      	bx	lr

08014a3c <uxr_millis>:
 8014a3c:	b510      	push	{r4, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	4669      	mov	r1, sp
 8014a42:	2001      	movs	r0, #1
 8014a44:	f7ed fe84 	bl	8002750 <clock_gettime>
 8014a48:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8014a4c:	4906      	ldr	r1, [pc, #24]	@ (8014a68 <uxr_millis+0x2c>)
 8014a4e:	fba0 0301 	umull	r0, r3, r0, r1
 8014a52:	1900      	adds	r0, r0, r4
 8014a54:	fb01 3102 	mla	r1, r1, r2, r3
 8014a58:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014a5c:	4a03      	ldr	r2, [pc, #12]	@ (8014a6c <uxr_millis+0x30>)
 8014a5e:	2300      	movs	r3, #0
 8014a60:	f7ec f8dc 	bl	8000c1c <__aeabi_ldivmod>
 8014a64:	b004      	add	sp, #16
 8014a66:	bd10      	pop	{r4, pc}
 8014a68:	3b9aca00 	.word	0x3b9aca00
 8014a6c:	000f4240 	.word	0x000f4240

08014a70 <uxr_nanos>:
 8014a70:	b510      	push	{r4, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	4669      	mov	r1, sp
 8014a76:	2001      	movs	r0, #1
 8014a78:	f7ed fe6a 	bl	8002750 <clock_gettime>
 8014a7c:	4a06      	ldr	r2, [pc, #24]	@ (8014a98 <uxr_nanos+0x28>)
 8014a7e:	9800      	ldr	r0, [sp, #0]
 8014a80:	9902      	ldr	r1, [sp, #8]
 8014a82:	9c01      	ldr	r4, [sp, #4]
 8014a84:	fba0 0302 	umull	r0, r3, r0, r2
 8014a88:	1840      	adds	r0, r0, r1
 8014a8a:	fb02 3304 	mla	r3, r2, r4, r3
 8014a8e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8014a92:	b004      	add	sp, #16
 8014a94:	bd10      	pop	{r4, pc}
 8014a96:	bf00      	nop
 8014a98:	3b9aca00 	.word	0x3b9aca00

08014a9c <on_full_output_buffer_fragmented>:
 8014a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aa0:	460c      	mov	r4, r1
 8014aa2:	b08a      	sub	sp, #40	@ 0x28
 8014aa4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8014aa8:	4606      	mov	r6, r0
 8014aaa:	f104 0008 	add.w	r0, r4, #8
 8014aae:	f7ff ff4b 	bl	8014948 <uxr_get_output_reliable_stream>
 8014ab2:	4605      	mov	r5, r0
 8014ab4:	f00a fa2a 	bl	801ef0c <get_available_free_slots>
 8014ab8:	b968      	cbnz	r0, 8014ad6 <on_full_output_buffer_fragmented+0x3a>
 8014aba:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8014abe:	4620      	mov	r0, r4
 8014ac0:	4798      	blx	r3
 8014ac2:	b918      	cbnz	r0, 8014acc <on_full_output_buffer_fragmented+0x30>
 8014ac4:	2001      	movs	r0, #1
 8014ac6:	b00a      	add	sp, #40	@ 0x28
 8014ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014acc:	4628      	mov	r0, r5
 8014ace:	f00a fa1d 	bl	801ef0c <get_available_free_slots>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d0f6      	beq.n	8014ac4 <on_full_output_buffer_fragmented+0x28>
 8014ad6:	8929      	ldrh	r1, [r5, #8]
 8014ad8:	89eb      	ldrh	r3, [r5, #14]
 8014ada:	7b28      	ldrb	r0, [r5, #12]
 8014adc:	686a      	ldr	r2, [r5, #4]
 8014ade:	fbb2 f8f1 	udiv	r8, r2, r1
 8014ae2:	fbb3 f2f1 	udiv	r2, r3, r1
 8014ae6:	fb01 3112 	mls	r1, r1, r2, r3
 8014aea:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8014aee:	b289      	uxth	r1, r1
 8014af0:	fb08 f101 	mul.w	r1, r8, r1
 8014af4:	30fc      	adds	r0, #252	@ 0xfc
 8014af6:	f1a8 0804 	sub.w	r8, r8, #4
 8014afa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8014afe:	4440      	add	r0, r8
 8014b00:	b287      	uxth	r7, r0
 8014b02:	1bdb      	subs	r3, r3, r7
 8014b04:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8014b08:	682b      	ldr	r3, [r5, #0]
 8014b0a:	3104      	adds	r1, #4
 8014b0c:	4419      	add	r1, r3
 8014b0e:	4642      	mov	r2, r8
 8014b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b14:	9300      	str	r3, [sp, #0]
 8014b16:	a802      	add	r0, sp, #8
 8014b18:	2300      	movs	r3, #0
 8014b1a:	f7fe f9b5 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 8014b1e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014b22:	f102 0308 	add.w	r3, r2, #8
 8014b26:	4543      	cmp	r3, r8
 8014b28:	d928      	bls.n	8014b7c <on_full_output_buffer_fragmented+0xe0>
 8014b2a:	463a      	mov	r2, r7
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	210d      	movs	r1, #13
 8014b30:	a802      	add	r0, sp, #8
 8014b32:	f7ff ff3d 	bl	80149b0 <uxr_buffer_submessage_header>
 8014b36:	8929      	ldrh	r1, [r5, #8]
 8014b38:	89eb      	ldrh	r3, [r5, #14]
 8014b3a:	fbb3 f2f1 	udiv	r2, r3, r1
 8014b3e:	fb01 3312 	mls	r3, r1, r2, r3
 8014b42:	b29b      	uxth	r3, r3
 8014b44:	686a      	ldr	r2, [r5, #4]
 8014b46:	fbb2 f2f1 	udiv	r2, r2, r1
 8014b4a:	fb02 f303 	mul.w	r3, r2, r3
 8014b4e:	682a      	ldr	r2, [r5, #0]
 8014b50:	f842 8003 	str.w	r8, [r2, r3]
 8014b54:	89e8      	ldrh	r0, [r5, #14]
 8014b56:	2101      	movs	r1, #1
 8014b58:	f00a fb28 	bl	801f1ac <uxr_seq_num_add>
 8014b5c:	9904      	ldr	r1, [sp, #16]
 8014b5e:	9a03      	ldr	r2, [sp, #12]
 8014b60:	81e8      	strh	r0, [r5, #14]
 8014b62:	1a52      	subs	r2, r2, r1
 8014b64:	4630      	mov	r0, r6
 8014b66:	f7fe f9a1 	bl	8012eac <ucdr_init_buffer>
 8014b6a:	4630      	mov	r0, r6
 8014b6c:	490f      	ldr	r1, [pc, #60]	@ (8014bac <on_full_output_buffer_fragmented+0x110>)
 8014b6e:	4622      	mov	r2, r4
 8014b70:	f7fe f970 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 8014b74:	2000      	movs	r0, #0
 8014b76:	b00a      	add	sp, #40	@ 0x28
 8014b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b7c:	b292      	uxth	r2, r2
 8014b7e:	2302      	movs	r3, #2
 8014b80:	210d      	movs	r1, #13
 8014b82:	a802      	add	r0, sp, #8
 8014b84:	f7ff ff14 	bl	80149b0 <uxr_buffer_submessage_header>
 8014b88:	8928      	ldrh	r0, [r5, #8]
 8014b8a:	89eb      	ldrh	r3, [r5, #14]
 8014b8c:	fbb3 f1f0 	udiv	r1, r3, r0
 8014b90:	fb00 3311 	mls	r3, r0, r1, r3
 8014b94:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014b98:	6869      	ldr	r1, [r5, #4]
 8014b9a:	fbb1 f1f0 	udiv	r1, r1, r0
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	fb01 f303 	mul.w	r3, r1, r3
 8014ba4:	6829      	ldr	r1, [r5, #0]
 8014ba6:	3208      	adds	r2, #8
 8014ba8:	50ca      	str	r2, [r1, r3]
 8014baa:	e7d3      	b.n	8014b54 <on_full_output_buffer_fragmented+0xb8>
 8014bac:	08014a9d 	.word	0x08014a9d

08014bb0 <uxr_prepare_output_stream>:
 8014bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bb2:	b087      	sub	sp, #28
 8014bb4:	2707      	movs	r7, #7
 8014bb6:	9202      	str	r2, [sp, #8]
 8014bb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014bba:	9103      	str	r1, [sp, #12]
 8014bbc:	2500      	movs	r5, #0
 8014bbe:	3204      	adds	r2, #4
 8014bc0:	e9cd 7500 	strd	r7, r5, [sp]
 8014bc4:	461c      	mov	r4, r3
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	f7ff fc54 	bl	8014474 <uxr_prepare_stream_to_write_submessage>
 8014bcc:	f080 0201 	eor.w	r2, r0, #1
 8014bd0:	b2d2      	uxtb	r2, r2
 8014bd2:	75a2      	strb	r2, [r4, #22]
 8014bd4:	b112      	cbz	r2, 8014bdc <uxr_prepare_output_stream+0x2c>
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	b007      	add	sp, #28
 8014bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bdc:	aa05      	add	r2, sp, #20
 8014bde:	9902      	ldr	r1, [sp, #8]
 8014be0:	4630      	mov	r0, r6
 8014be2:	f7ff fd7d 	bl	80146e0 <uxr_init_base_object_request>
 8014be6:	a905      	add	r1, sp, #20
 8014be8:	4605      	mov	r5, r0
 8014bea:	4620      	mov	r0, r4
 8014bec:	f001 f8c0 	bl	8015d70 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014bf0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014bf4:	69a6      	ldr	r6, [r4, #24]
 8014bf6:	69e7      	ldr	r7, [r4, #28]
 8014bf8:	1a52      	subs	r2, r2, r1
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f7fe f956 	bl	8012eac <ucdr_init_buffer>
 8014c00:	4620      	mov	r0, r4
 8014c02:	463a      	mov	r2, r7
 8014c04:	4631      	mov	r1, r6
 8014c06:	f7fe f925 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	b007      	add	sp, #28
 8014c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c10 <uxr_prepare_output_stream_fragmented>:
 8014c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c14:	b091      	sub	sp, #68	@ 0x44
 8014c16:	4605      	mov	r5, r0
 8014c18:	9105      	str	r1, [sp, #20]
 8014c1a:	3008      	adds	r0, #8
 8014c1c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014c20:	461e      	mov	r6, r3
 8014c22:	9204      	str	r2, [sp, #16]
 8014c24:	f7ff fe90 	bl	8014948 <uxr_get_output_reliable_stream>
 8014c28:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014c2c:	2b01      	cmp	r3, #1
 8014c2e:	f000 8091 	beq.w	8014d54 <uxr_prepare_output_stream_fragmented+0x144>
 8014c32:	4604      	mov	r4, r0
 8014c34:	2800      	cmp	r0, #0
 8014c36:	f000 808d 	beq.w	8014d54 <uxr_prepare_output_stream_fragmented+0x144>
 8014c3a:	f00a f967 	bl	801ef0c <get_available_free_slots>
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	f000 8083 	beq.w	8014d4a <uxr_prepare_output_stream_fragmented+0x13a>
 8014c44:	8922      	ldrh	r2, [r4, #8]
 8014c46:	89e7      	ldrh	r7, [r4, #14]
 8014c48:	fbb7 f9f2 	udiv	r9, r7, r2
 8014c4c:	fb02 7919 	mls	r9, r2, r9, r7
 8014c50:	fa1f f989 	uxth.w	r9, r9
 8014c54:	6863      	ldr	r3, [r4, #4]
 8014c56:	fbb3 f2f2 	udiv	r2, r3, r2
 8014c5a:	6823      	ldr	r3, [r4, #0]
 8014c5c:	9203      	str	r2, [sp, #12]
 8014c5e:	fb02 f909 	mul.w	r9, r2, r9
 8014c62:	f109 0904 	add.w	r9, r9, #4
 8014c66:	4499      	add	r9, r3
 8014c68:	7b23      	ldrb	r3, [r4, #12]
 8014c6a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014c6e:	4543      	cmp	r3, r8
 8014c70:	f1a2 0b04 	sub.w	fp, r2, #4
 8014c74:	d37a      	bcc.n	8014d6c <uxr_prepare_output_stream_fragmented+0x15c>
 8014c76:	f1ab 0a04 	sub.w	sl, fp, #4
 8014c7a:	ebaa 0a03 	sub.w	sl, sl, r3
 8014c7e:	465a      	mov	r2, fp
 8014c80:	2300      	movs	r3, #0
 8014c82:	4649      	mov	r1, r9
 8014c84:	a808      	add	r0, sp, #32
 8014c86:	f8cd 8000 	str.w	r8, [sp]
 8014c8a:	f7fe f8fd 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 8014c8e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014c90:	fa1f fa8a 	uxth.w	sl, sl
 8014c94:	4652      	mov	r2, sl
 8014c96:	f103 0a08 	add.w	sl, r3, #8
 8014c9a:	45da      	cmp	sl, fp
 8014c9c:	bf34      	ite	cc
 8014c9e:	2302      	movcc	r3, #2
 8014ca0:	2300      	movcs	r3, #0
 8014ca2:	210d      	movs	r1, #13
 8014ca4:	a808      	add	r0, sp, #32
 8014ca6:	f7ff fe83 	bl	80149b0 <uxr_buffer_submessage_header>
 8014caa:	8921      	ldrh	r1, [r4, #8]
 8014cac:	fbb7 f2f1 	udiv	r2, r7, r1
 8014cb0:	fb01 7212 	mls	r2, r1, r2, r7
 8014cb4:	b292      	uxth	r2, r2
 8014cb6:	6863      	ldr	r3, [r4, #4]
 8014cb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8014cbc:	fb02 f303 	mul.w	r3, r2, r3
 8014cc0:	6822      	ldr	r2, [r4, #0]
 8014cc2:	4638      	mov	r0, r7
 8014cc4:	f842 b003 	str.w	fp, [r2, r3]
 8014cc8:	2101      	movs	r1, #1
 8014cca:	f00a fa6f 	bl	801f1ac <uxr_seq_num_add>
 8014cce:	9b03      	ldr	r3, [sp, #12]
 8014cd0:	f108 0104 	add.w	r1, r8, #4
 8014cd4:	f1a3 0208 	sub.w	r2, r3, #8
 8014cd8:	eba2 0208 	sub.w	r2, r2, r8
 8014cdc:	4449      	add	r1, r9
 8014cde:	4607      	mov	r7, r0
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	f7fe f8e3 	bl	8012eac <ucdr_init_buffer>
 8014ce6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014ce8:	81e7      	strh	r7, [r4, #14]
 8014cea:	1d1a      	adds	r2, r3, #4
 8014cec:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014cf0:	bf28      	it	cs
 8014cf2:	2200      	movcs	r2, #0
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	b292      	uxth	r2, r2
 8014cf8:	2107      	movs	r1, #7
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f7ff fe58 	bl	80149b0 <uxr_buffer_submessage_header>
 8014d00:	9904      	ldr	r1, [sp, #16]
 8014d02:	aa07      	add	r2, sp, #28
 8014d04:	4628      	mov	r0, r5
 8014d06:	f7ff fceb 	bl	80146e0 <uxr_init_base_object_request>
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	b318      	cbz	r0, 8014d56 <uxr_prepare_output_stream_fragmented+0x146>
 8014d0e:	a907      	add	r1, sp, #28
 8014d10:	4630      	mov	r0, r6
 8014d12:	f001 f82d 	bl	8015d70 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014d16:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014d1a:	4630      	mov	r0, r6
 8014d1c:	1a52      	subs	r2, r2, r1
 8014d1e:	f7fe f8c5 	bl	8012eac <ucdr_init_buffer>
 8014d22:	9b05      	ldr	r3, [sp, #20]
 8014d24:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8014d28:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014d2a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8014d2e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014d30:	491b      	ldr	r1, [pc, #108]	@ (8014da0 <uxr_prepare_output_stream_fragmented+0x190>)
 8014d32:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8014d36:	4630      	mov	r0, r6
 8014d38:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8014d3c:	462a      	mov	r2, r5
 8014d3e:	f7fe f889 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 8014d42:	4620      	mov	r0, r4
 8014d44:	b011      	add	sp, #68	@ 0x44
 8014d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d4a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8014d4c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014d4e:	4628      	mov	r0, r5
 8014d50:	4798      	blx	r3
 8014d52:	b920      	cbnz	r0, 8014d5e <uxr_prepare_output_stream_fragmented+0x14e>
 8014d54:	2400      	movs	r4, #0
 8014d56:	4620      	mov	r0, r4
 8014d58:	b011      	add	sp, #68	@ 0x44
 8014d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5e:	4620      	mov	r0, r4
 8014d60:	f00a f8d4 	bl	801ef0c <get_available_free_slots>
 8014d64:	2800      	cmp	r0, #0
 8014d66:	f47f af6d 	bne.w	8014c44 <uxr_prepare_output_stream_fragmented+0x34>
 8014d6a:	e7f3      	b.n	8014d54 <uxr_prepare_output_stream_fragmented+0x144>
 8014d6c:	4638      	mov	r0, r7
 8014d6e:	2101      	movs	r1, #1
 8014d70:	f00a fa1c 	bl	801f1ac <uxr_seq_num_add>
 8014d74:	8921      	ldrh	r1, [r4, #8]
 8014d76:	fbb0 f2f1 	udiv	r2, r0, r1
 8014d7a:	fb01 0912 	mls	r9, r1, r2, r0
 8014d7e:	fa1f f289 	uxth.w	r2, r9
 8014d82:	6863      	ldr	r3, [r4, #4]
 8014d84:	fbb3 f9f1 	udiv	r9, r3, r1
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	fb02 f909 	mul.w	r9, r2, r9
 8014d8e:	f109 0904 	add.w	r9, r9, #4
 8014d92:	4499      	add	r9, r3
 8014d94:	4607      	mov	r7, r0
 8014d96:	7b23      	ldrb	r3, [r4, #12]
 8014d98:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014d9c:	e76b      	b.n	8014c76 <uxr_prepare_output_stream_fragmented+0x66>
 8014d9e:	bf00      	nop
 8014da0:	08014a9d 	.word	0x08014a9d

08014da4 <uxr_serialize_message_header>:
 8014da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014da6:	b083      	sub	sp, #12
 8014da8:	4616      	mov	r6, r2
 8014daa:	4604      	mov	r4, r0
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	460d      	mov	r5, r1
 8014db0:	9f08      	ldr	r7, [sp, #32]
 8014db2:	f7fc f86d 	bl	8010e90 <ucdr_serialize_uint8_t>
 8014db6:	4631      	mov	r1, r6
 8014db8:	4620      	mov	r0, r4
 8014dba:	f7fc f869 	bl	8010e90 <ucdr_serialize_uint8_t>
 8014dbe:	9a01      	ldr	r2, [sp, #4]
 8014dc0:	2101      	movs	r1, #1
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f7fc f910 	bl	8010fe8 <ucdr_serialize_endian_uint16_t>
 8014dc8:	062b      	lsls	r3, r5, #24
 8014dca:	d501      	bpl.n	8014dd0 <uxr_serialize_message_header+0x2c>
 8014dcc:	b003      	add	sp, #12
 8014dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dd0:	2204      	movs	r2, #4
 8014dd2:	4639      	mov	r1, r7
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	b003      	add	sp, #12
 8014dd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ddc:	f7fb bc0c 	b.w	80105f8 <ucdr_serialize_array_uint8_t>

08014de0 <uxr_deserialize_message_header>:
 8014de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014de2:	b083      	sub	sp, #12
 8014de4:	4616      	mov	r6, r2
 8014de6:	4604      	mov	r4, r0
 8014de8:	9301      	str	r3, [sp, #4]
 8014dea:	460d      	mov	r5, r1
 8014dec:	9f08      	ldr	r7, [sp, #32]
 8014dee:	f7fc f865 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8014df2:	4631      	mov	r1, r6
 8014df4:	4620      	mov	r0, r4
 8014df6:	f7fc f861 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8014dfa:	9a01      	ldr	r2, [sp, #4]
 8014dfc:	2101      	movs	r1, #1
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f7fc f9e6 	bl	80111d0 <ucdr_deserialize_endian_uint16_t>
 8014e04:	f995 3000 	ldrsb.w	r3, [r5]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	da01      	bge.n	8014e10 <uxr_deserialize_message_header+0x30>
 8014e0c:	b003      	add	sp, #12
 8014e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e10:	2204      	movs	r2, #4
 8014e12:	4639      	mov	r1, r7
 8014e14:	4620      	mov	r0, r4
 8014e16:	b003      	add	sp, #12
 8014e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014e1c:	f7fb bc50 	b.w	80106c0 <ucdr_deserialize_array_uint8_t>

08014e20 <uxr_serialize_submessage_header>:
 8014e20:	b530      	push	{r4, r5, lr}
 8014e22:	b083      	sub	sp, #12
 8014e24:	4615      	mov	r5, r2
 8014e26:	4604      	mov	r4, r0
 8014e28:	9301      	str	r3, [sp, #4]
 8014e2a:	f7fc f831 	bl	8010e90 <ucdr_serialize_uint8_t>
 8014e2e:	4629      	mov	r1, r5
 8014e30:	4620      	mov	r0, r4
 8014e32:	f7fc f82d 	bl	8010e90 <ucdr_serialize_uint8_t>
 8014e36:	9a01      	ldr	r2, [sp, #4]
 8014e38:	2101      	movs	r1, #1
 8014e3a:	4620      	mov	r0, r4
 8014e3c:	b003      	add	sp, #12
 8014e3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e42:	f7fc b8d1 	b.w	8010fe8 <ucdr_serialize_endian_uint16_t>
 8014e46:	bf00      	nop

08014e48 <uxr_deserialize_submessage_header>:
 8014e48:	b530      	push	{r4, r5, lr}
 8014e4a:	b083      	sub	sp, #12
 8014e4c:	4615      	mov	r5, r2
 8014e4e:	4604      	mov	r4, r0
 8014e50:	9301      	str	r3, [sp, #4]
 8014e52:	f7fc f833 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8014e56:	4629      	mov	r1, r5
 8014e58:	4620      	mov	r0, r4
 8014e5a:	f7fc f82f 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8014e5e:	9a01      	ldr	r2, [sp, #4]
 8014e60:	2101      	movs	r1, #1
 8014e62:	4620      	mov	r0, r4
 8014e64:	b003      	add	sp, #12
 8014e66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e6a:	f7fc b9b1 	b.w	80111d0 <ucdr_deserialize_endian_uint16_t>
 8014e6e:	bf00      	nop

08014e70 <uxr_serialize_CLIENT_Representation>:
 8014e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e74:	2204      	movs	r2, #4
 8014e76:	460e      	mov	r6, r1
 8014e78:	4605      	mov	r5, r0
 8014e7a:	f7fb fbbd 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8014e7e:	2202      	movs	r2, #2
 8014e80:	4607      	mov	r7, r0
 8014e82:	1d31      	adds	r1, r6, #4
 8014e84:	4628      	mov	r0, r5
 8014e86:	f7fb fbb7 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8014e8a:	4038      	ands	r0, r7
 8014e8c:	2202      	movs	r2, #2
 8014e8e:	1db1      	adds	r1, r6, #6
 8014e90:	b2c7      	uxtb	r7, r0
 8014e92:	4628      	mov	r0, r5
 8014e94:	f7fb fbb0 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8014e98:	2204      	movs	r2, #4
 8014e9a:	4007      	ands	r7, r0
 8014e9c:	f106 0108 	add.w	r1, r6, #8
 8014ea0:	4628      	mov	r0, r5
 8014ea2:	f7fb fba9 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8014ea6:	7b31      	ldrb	r1, [r6, #12]
 8014ea8:	4007      	ands	r7, r0
 8014eaa:	4628      	mov	r0, r5
 8014eac:	f7fb fff0 	bl	8010e90 <ucdr_serialize_uint8_t>
 8014eb0:	7b71      	ldrb	r1, [r6, #13]
 8014eb2:	4007      	ands	r7, r0
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	f7fb ffbd 	bl	8010e34 <ucdr_serialize_bool>
 8014eba:	7b73      	ldrb	r3, [r6, #13]
 8014ebc:	ea07 0800 	and.w	r8, r7, r0
 8014ec0:	b93b      	cbnz	r3, 8014ed2 <uxr_serialize_CLIENT_Representation+0x62>
 8014ec2:	8bb1      	ldrh	r1, [r6, #28]
 8014ec4:	4628      	mov	r0, r5
 8014ec6:	f7fc f80f 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8014eca:	ea08 0000 	and.w	r0, r8, r0
 8014ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ed2:	6931      	ldr	r1, [r6, #16]
 8014ed4:	4628      	mov	r0, r5
 8014ed6:	f7fc f9f1 	bl	80112bc <ucdr_serialize_uint32_t>
 8014eda:	6933      	ldr	r3, [r6, #16]
 8014edc:	b1e3      	cbz	r3, 8014f18 <uxr_serialize_CLIENT_Representation+0xa8>
 8014ede:	b1c0      	cbz	r0, 8014f12 <uxr_serialize_CLIENT_Representation+0xa2>
 8014ee0:	4637      	mov	r7, r6
 8014ee2:	f04f 0900 	mov.w	r9, #0
 8014ee6:	e001      	b.n	8014eec <uxr_serialize_CLIENT_Representation+0x7c>
 8014ee8:	3708      	adds	r7, #8
 8014eea:	b194      	cbz	r4, 8014f12 <uxr_serialize_CLIENT_Representation+0xa2>
 8014eec:	6979      	ldr	r1, [r7, #20]
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f009 fa0a 	bl	801e308 <ucdr_serialize_string>
 8014ef4:	69b9      	ldr	r1, [r7, #24]
 8014ef6:	4604      	mov	r4, r0
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f009 fa05 	bl	801e308 <ucdr_serialize_string>
 8014efe:	6933      	ldr	r3, [r6, #16]
 8014f00:	f109 0901 	add.w	r9, r9, #1
 8014f04:	4004      	ands	r4, r0
 8014f06:	4599      	cmp	r9, r3
 8014f08:	b2e4      	uxtb	r4, r4
 8014f0a:	d3ed      	bcc.n	8014ee8 <uxr_serialize_CLIENT_Representation+0x78>
 8014f0c:	ea08 0804 	and.w	r8, r8, r4
 8014f10:	e7d7      	b.n	8014ec2 <uxr_serialize_CLIENT_Representation+0x52>
 8014f12:	f04f 0800 	mov.w	r8, #0
 8014f16:	e7d4      	b.n	8014ec2 <uxr_serialize_CLIENT_Representation+0x52>
 8014f18:	ea08 0800 	and.w	r8, r8, r0
 8014f1c:	e7d1      	b.n	8014ec2 <uxr_serialize_CLIENT_Representation+0x52>
 8014f1e:	bf00      	nop

08014f20 <uxr_deserialize_CLIENT_Representation>:
 8014f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f24:	2204      	movs	r2, #4
 8014f26:	460c      	mov	r4, r1
 8014f28:	4605      	mov	r5, r0
 8014f2a:	f7fb fbc9 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8014f2e:	2202      	movs	r2, #2
 8014f30:	4607      	mov	r7, r0
 8014f32:	1d21      	adds	r1, r4, #4
 8014f34:	4628      	mov	r0, r5
 8014f36:	f7fb fbc3 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8014f3a:	4038      	ands	r0, r7
 8014f3c:	2202      	movs	r2, #2
 8014f3e:	1da1      	adds	r1, r4, #6
 8014f40:	b2c6      	uxtb	r6, r0
 8014f42:	4628      	mov	r0, r5
 8014f44:	f7fb fbbc 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8014f48:	2204      	movs	r2, #4
 8014f4a:	4006      	ands	r6, r0
 8014f4c:	f104 0108 	add.w	r1, r4, #8
 8014f50:	4628      	mov	r0, r5
 8014f52:	f7fb fbb5 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8014f56:	f104 010c 	add.w	r1, r4, #12
 8014f5a:	4006      	ands	r6, r0
 8014f5c:	4628      	mov	r0, r5
 8014f5e:	f7fb ffad 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8014f62:	f104 010d 	add.w	r1, r4, #13
 8014f66:	ea06 0700 	and.w	r7, r6, r0
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	f7fb ff78 	bl	8010e60 <ucdr_deserialize_bool>
 8014f70:	7b63      	ldrb	r3, [r4, #13]
 8014f72:	4007      	ands	r7, r0
 8014f74:	b93b      	cbnz	r3, 8014f86 <uxr_deserialize_CLIENT_Representation+0x66>
 8014f76:	f104 011c 	add.w	r1, r4, #28
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	f7fc f8b4 	bl	80110e8 <ucdr_deserialize_uint16_t>
 8014f80:	4038      	ands	r0, r7
 8014f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f86:	f104 0110 	add.w	r1, r4, #16
 8014f8a:	4628      	mov	r0, r5
 8014f8c:	f7fc fac6 	bl	801151c <ucdr_deserialize_uint32_t>
 8014f90:	6923      	ldr	r3, [r4, #16]
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d903      	bls.n	8014f9e <uxr_deserialize_CLIENT_Representation+0x7e>
 8014f96:	2301      	movs	r3, #1
 8014f98:	75ab      	strb	r3, [r5, #22]
 8014f9a:	2700      	movs	r7, #0
 8014f9c:	e7eb      	b.n	8014f76 <uxr_deserialize_CLIENT_Representation+0x56>
 8014f9e:	b30b      	cbz	r3, 8014fe4 <uxr_deserialize_CLIENT_Representation+0xc4>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d0fa      	beq.n	8014f9a <uxr_deserialize_CLIENT_Representation+0x7a>
 8014fa4:	46a0      	mov	r8, r4
 8014fa6:	f04f 0900 	mov.w	r9, #0
 8014faa:	e001      	b.n	8014fb0 <uxr_deserialize_CLIENT_Representation+0x90>
 8014fac:	2e00      	cmp	r6, #0
 8014fae:	d0f4      	beq.n	8014f9a <uxr_deserialize_CLIENT_Representation+0x7a>
 8014fb0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014fb8:	4628      	mov	r0, r5
 8014fba:	f009 f9b5 	bl	801e328 <ucdr_deserialize_string>
 8014fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014fc2:	4606      	mov	r6, r0
 8014fc4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f009 f9ad 	bl	801e328 <ucdr_deserialize_string>
 8014fce:	6923      	ldr	r3, [r4, #16]
 8014fd0:	f109 0901 	add.w	r9, r9, #1
 8014fd4:	4006      	ands	r6, r0
 8014fd6:	4599      	cmp	r9, r3
 8014fd8:	f108 0808 	add.w	r8, r8, #8
 8014fdc:	b2f6      	uxtb	r6, r6
 8014fde:	d3e5      	bcc.n	8014fac <uxr_deserialize_CLIENT_Representation+0x8c>
 8014fe0:	4037      	ands	r7, r6
 8014fe2:	e7c8      	b.n	8014f76 <uxr_deserialize_CLIENT_Representation+0x56>
 8014fe4:	4007      	ands	r7, r0
 8014fe6:	e7c6      	b.n	8014f76 <uxr_deserialize_CLIENT_Representation+0x56>

08014fe8 <uxr_serialize_AGENT_Representation>:
 8014fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fec:	2204      	movs	r2, #4
 8014fee:	460f      	mov	r7, r1
 8014ff0:	4605      	mov	r5, r0
 8014ff2:	f7fb fb01 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8014ff6:	2202      	movs	r2, #2
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	1d39      	adds	r1, r7, #4
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	f7fb fafb 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015002:	4020      	ands	r0, r4
 8015004:	2202      	movs	r2, #2
 8015006:	1db9      	adds	r1, r7, #6
 8015008:	b2c4      	uxtb	r4, r0
 801500a:	4628      	mov	r0, r5
 801500c:	f7fb faf4 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015010:	7a39      	ldrb	r1, [r7, #8]
 8015012:	4004      	ands	r4, r0
 8015014:	4628      	mov	r0, r5
 8015016:	f7fb ff0d 	bl	8010e34 <ucdr_serialize_bool>
 801501a:	7a3b      	ldrb	r3, [r7, #8]
 801501c:	ea00 0804 	and.w	r8, r0, r4
 8015020:	b913      	cbnz	r3, 8015028 <uxr_serialize_AGENT_Representation+0x40>
 8015022:	4640      	mov	r0, r8
 8015024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015028:	68f9      	ldr	r1, [r7, #12]
 801502a:	4628      	mov	r0, r5
 801502c:	f7fc f946 	bl	80112bc <ucdr_serialize_uint32_t>
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	b303      	cbz	r3, 8015076 <uxr_serialize_AGENT_Representation+0x8e>
 8015034:	b1d0      	cbz	r0, 801506c <uxr_serialize_AGENT_Representation+0x84>
 8015036:	463e      	mov	r6, r7
 8015038:	f04f 0900 	mov.w	r9, #0
 801503c:	e001      	b.n	8015042 <uxr_serialize_AGENT_Representation+0x5a>
 801503e:	3608      	adds	r6, #8
 8015040:	b1a4      	cbz	r4, 801506c <uxr_serialize_AGENT_Representation+0x84>
 8015042:	6931      	ldr	r1, [r6, #16]
 8015044:	4628      	mov	r0, r5
 8015046:	f009 f95f 	bl	801e308 <ucdr_serialize_string>
 801504a:	6971      	ldr	r1, [r6, #20]
 801504c:	4604      	mov	r4, r0
 801504e:	4628      	mov	r0, r5
 8015050:	f009 f95a 	bl	801e308 <ucdr_serialize_string>
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f109 0901 	add.w	r9, r9, #1
 801505a:	4004      	ands	r4, r0
 801505c:	4599      	cmp	r9, r3
 801505e:	b2e4      	uxtb	r4, r4
 8015060:	d3ed      	bcc.n	801503e <uxr_serialize_AGENT_Representation+0x56>
 8015062:	ea08 0804 	and.w	r8, r8, r4
 8015066:	4640      	mov	r0, r8
 8015068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801506c:	f04f 0800 	mov.w	r8, #0
 8015070:	4640      	mov	r0, r8
 8015072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015076:	ea08 0800 	and.w	r8, r8, r0
 801507a:	e7d2      	b.n	8015022 <uxr_serialize_AGENT_Representation+0x3a>

0801507c <uxr_serialize_DATAWRITER_Representation>:
 801507c:	b570      	push	{r4, r5, r6, lr}
 801507e:	460d      	mov	r5, r1
 8015080:	7809      	ldrb	r1, [r1, #0]
 8015082:	4606      	mov	r6, r0
 8015084:	f7fb ff04 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015088:	4604      	mov	r4, r0
 801508a:	b130      	cbz	r0, 801509a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801508c:	782b      	ldrb	r3, [r5, #0]
 801508e:	2b02      	cmp	r3, #2
 8015090:	d00c      	beq.n	80150ac <uxr_serialize_DATAWRITER_Representation+0x30>
 8015092:	2b03      	cmp	r3, #3
 8015094:	d010      	beq.n	80150b8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015096:	2b01      	cmp	r3, #1
 8015098:	d008      	beq.n	80150ac <uxr_serialize_DATAWRITER_Representation+0x30>
 801509a:	2202      	movs	r2, #2
 801509c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80150a0:	4630      	mov	r0, r6
 80150a2:	f7fb faa9 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 80150a6:	4020      	ands	r0, r4
 80150a8:	b2c0      	uxtb	r0, r0
 80150aa:	bd70      	pop	{r4, r5, r6, pc}
 80150ac:	6869      	ldr	r1, [r5, #4]
 80150ae:	4630      	mov	r0, r6
 80150b0:	f009 f92a 	bl	801e308 <ucdr_serialize_string>
 80150b4:	4604      	mov	r4, r0
 80150b6:	e7f0      	b.n	801509a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80150b8:	4629      	mov	r1, r5
 80150ba:	4630      	mov	r0, r6
 80150bc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80150c0:	3104      	adds	r1, #4
 80150c2:	f7fd ffbb 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 80150c6:	4604      	mov	r4, r0
 80150c8:	e7e7      	b.n	801509a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80150ca:	bf00      	nop

080150cc <uxr_serialize_ObjectVariant.part.0>:
 80150cc:	b570      	push	{r4, r5, r6, lr}
 80150ce:	780b      	ldrb	r3, [r1, #0]
 80150d0:	3b01      	subs	r3, #1
 80150d2:	460c      	mov	r4, r1
 80150d4:	4605      	mov	r5, r0
 80150d6:	2b0d      	cmp	r3, #13
 80150d8:	d854      	bhi.n	8015184 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80150da:	e8df f003 	tbb	[pc, r3]
 80150de:	0730      	.short	0x0730
 80150e0:	07071b1b 	.word	0x07071b1b
 80150e4:	0c530707 	.word	0x0c530707
 80150e8:	494e0c0c 	.word	0x494e0c0c
 80150ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150f0:	3104      	adds	r1, #4
 80150f2:	f7ff bfc3 	b.w	801507c <uxr_serialize_DATAWRITER_Representation>
 80150f6:	7909      	ldrb	r1, [r1, #4]
 80150f8:	f7fb feca 	bl	8010e90 <ucdr_serialize_uint8_t>
 80150fc:	b1e8      	cbz	r0, 801513a <uxr_serialize_ObjectVariant.part.0+0x6e>
 80150fe:	7923      	ldrb	r3, [r4, #4]
 8015100:	2b01      	cmp	r3, #1
 8015102:	d001      	beq.n	8015108 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015104:	2b02      	cmp	r3, #2
 8015106:	d13d      	bne.n	8015184 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015108:	68a1      	ldr	r1, [r4, #8]
 801510a:	4628      	mov	r0, r5
 801510c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015110:	f009 b8fa 	b.w	801e308 <ucdr_serialize_string>
 8015114:	7909      	ldrb	r1, [r1, #4]
 8015116:	f7fb febb 	bl	8010e90 <ucdr_serialize_uint8_t>
 801511a:	4606      	mov	r6, r0
 801511c:	b120      	cbz	r0, 8015128 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801511e:	7923      	ldrb	r3, [r4, #4]
 8015120:	2b02      	cmp	r3, #2
 8015122:	d039      	beq.n	8015198 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015124:	2b03      	cmp	r3, #3
 8015126:	d02f      	beq.n	8015188 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015128:	2202      	movs	r2, #2
 801512a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801512e:	4628      	mov	r0, r5
 8015130:	f7fb fa62 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015134:	4030      	ands	r0, r6
 8015136:	b2c0      	uxtb	r0, r0
 8015138:	bd70      	pop	{r4, r5, r6, pc}
 801513a:	2000      	movs	r0, #0
 801513c:	bd70      	pop	{r4, r5, r6, pc}
 801513e:	7909      	ldrb	r1, [r1, #4]
 8015140:	f7fb fea6 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015144:	4606      	mov	r6, r0
 8015146:	b158      	cbz	r0, 8015160 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015148:	7923      	ldrb	r3, [r4, #4]
 801514a:	2b02      	cmp	r3, #2
 801514c:	d003      	beq.n	8015156 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801514e:	2b03      	cmp	r3, #3
 8015150:	d028      	beq.n	80151a4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8015152:	2b01      	cmp	r3, #1
 8015154:	d104      	bne.n	8015160 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015156:	68a1      	ldr	r1, [r4, #8]
 8015158:	4628      	mov	r0, r5
 801515a:	f009 f8d5 	bl	801e308 <ucdr_serialize_string>
 801515e:	4606      	mov	r6, r0
 8015160:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8015164:	4628      	mov	r0, r5
 8015166:	f7fc fc95 	bl	8011a94 <ucdr_serialize_int16_t>
 801516a:	4030      	ands	r0, r6
 801516c:	b2c0      	uxtb	r0, r0
 801516e:	bd70      	pop	{r4, r5, r6, pc}
 8015170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015174:	3104      	adds	r1, #4
 8015176:	f7ff be7b 	b.w	8014e70 <uxr_serialize_CLIENT_Representation>
 801517a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801517e:	3104      	adds	r1, #4
 8015180:	f7ff bf32 	b.w	8014fe8 <uxr_serialize_AGENT_Representation>
 8015184:	2001      	movs	r0, #1
 8015186:	bd70      	pop	{r4, r5, r6, pc}
 8015188:	68a2      	ldr	r2, [r4, #8]
 801518a:	f104 010c 	add.w	r1, r4, #12
 801518e:	4628      	mov	r0, r5
 8015190:	f7fd ff54 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 8015194:	4606      	mov	r6, r0
 8015196:	e7c7      	b.n	8015128 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015198:	68a1      	ldr	r1, [r4, #8]
 801519a:	4628      	mov	r0, r5
 801519c:	f009 f8b4 	bl	801e308 <ucdr_serialize_string>
 80151a0:	4606      	mov	r6, r0
 80151a2:	e7c1      	b.n	8015128 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80151a4:	68a2      	ldr	r2, [r4, #8]
 80151a6:	f104 010c 	add.w	r1, r4, #12
 80151aa:	4628      	mov	r0, r5
 80151ac:	f7fd ff46 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 80151b0:	4606      	mov	r6, r0
 80151b2:	e7d5      	b.n	8015160 <uxr_serialize_ObjectVariant.part.0+0x94>

080151b4 <uxr_deserialize_DATAWRITER_Representation>:
 80151b4:	b570      	push	{r4, r5, r6, lr}
 80151b6:	4606      	mov	r6, r0
 80151b8:	460d      	mov	r5, r1
 80151ba:	f7fb fe7f 	bl	8010ebc <ucdr_deserialize_uint8_t>
 80151be:	4604      	mov	r4, r0
 80151c0:	b130      	cbz	r0, 80151d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80151c2:	782b      	ldrb	r3, [r5, #0]
 80151c4:	2b02      	cmp	r3, #2
 80151c6:	d00c      	beq.n	80151e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80151c8:	2b03      	cmp	r3, #3
 80151ca:	d012      	beq.n	80151f2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	d008      	beq.n	80151e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80151d0:	2202      	movs	r2, #2
 80151d2:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80151d6:	4630      	mov	r0, r6
 80151d8:	f7fb fa72 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 80151dc:	4020      	ands	r0, r4
 80151de:	b2c0      	uxtb	r0, r0
 80151e0:	bd70      	pop	{r4, r5, r6, pc}
 80151e2:	6869      	ldr	r1, [r5, #4]
 80151e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151e8:	4630      	mov	r0, r6
 80151ea:	f009 f89d 	bl	801e328 <ucdr_deserialize_string>
 80151ee:	4604      	mov	r4, r0
 80151f0:	e7ee      	b.n	80151d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80151f2:	1d2b      	adds	r3, r5, #4
 80151f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80151f8:	f105 0108 	add.w	r1, r5, #8
 80151fc:	4630      	mov	r0, r6
 80151fe:	f7fd ff2f 	bl	8013060 <ucdr_deserialize_sequence_uint8_t>
 8015202:	4604      	mov	r4, r0
 8015204:	e7e4      	b.n	80151d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015206:	bf00      	nop

08015208 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015208:	b570      	push	{r4, r5, r6, lr}
 801520a:	460d      	mov	r5, r1
 801520c:	7809      	ldrb	r1, [r1, #0]
 801520e:	4606      	mov	r6, r0
 8015210:	f7fb fe10 	bl	8010e34 <ucdr_serialize_bool>
 8015214:	782b      	ldrb	r3, [r5, #0]
 8015216:	4604      	mov	r4, r0
 8015218:	b94b      	cbnz	r3, 801522e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801521a:	7a29      	ldrb	r1, [r5, #8]
 801521c:	4630      	mov	r0, r6
 801521e:	f7fb fe09 	bl	8010e34 <ucdr_serialize_bool>
 8015222:	7a2b      	ldrb	r3, [r5, #8]
 8015224:	4004      	ands	r4, r0
 8015226:	b2e4      	uxtb	r4, r4
 8015228:	b943      	cbnz	r3, 801523c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801522a:	4620      	mov	r0, r4
 801522c:	bd70      	pop	{r4, r5, r6, pc}
 801522e:	6869      	ldr	r1, [r5, #4]
 8015230:	4630      	mov	r0, r6
 8015232:	f009 f869 	bl	801e308 <ucdr_serialize_string>
 8015236:	4004      	ands	r4, r0
 8015238:	b2e4      	uxtb	r4, r4
 801523a:	e7ee      	b.n	801521a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801523c:	68e9      	ldr	r1, [r5, #12]
 801523e:	4630      	mov	r0, r6
 8015240:	f009 f862 	bl	801e308 <ucdr_serialize_string>
 8015244:	4004      	ands	r4, r0
 8015246:	4620      	mov	r0, r4
 8015248:	bd70      	pop	{r4, r5, r6, pc}
 801524a:	bf00      	nop

0801524c <uxr_serialize_OBJK_Topic_Binary>:
 801524c:	b570      	push	{r4, r5, r6, lr}
 801524e:	460d      	mov	r5, r1
 8015250:	6809      	ldr	r1, [r1, #0]
 8015252:	4606      	mov	r6, r0
 8015254:	f009 f858 	bl	801e308 <ucdr_serialize_string>
 8015258:	7929      	ldrb	r1, [r5, #4]
 801525a:	4604      	mov	r4, r0
 801525c:	4630      	mov	r0, r6
 801525e:	f7fb fde9 	bl	8010e34 <ucdr_serialize_bool>
 8015262:	792b      	ldrb	r3, [r5, #4]
 8015264:	4004      	ands	r4, r0
 8015266:	b2e4      	uxtb	r4, r4
 8015268:	b943      	cbnz	r3, 801527c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801526a:	7b29      	ldrb	r1, [r5, #12]
 801526c:	4630      	mov	r0, r6
 801526e:	f7fb fde1 	bl	8010e34 <ucdr_serialize_bool>
 8015272:	7b2b      	ldrb	r3, [r5, #12]
 8015274:	4004      	ands	r4, r0
 8015276:	b93b      	cbnz	r3, 8015288 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015278:	4620      	mov	r0, r4
 801527a:	bd70      	pop	{r4, r5, r6, pc}
 801527c:	68a9      	ldr	r1, [r5, #8]
 801527e:	4630      	mov	r0, r6
 8015280:	f009 f842 	bl	801e308 <ucdr_serialize_string>
 8015284:	4004      	ands	r4, r0
 8015286:	e7f0      	b.n	801526a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015288:	6929      	ldr	r1, [r5, #16]
 801528a:	4630      	mov	r0, r6
 801528c:	f009 f83c 	bl	801e308 <ucdr_serialize_string>
 8015290:	4004      	ands	r4, r0
 8015292:	b2e4      	uxtb	r4, r4
 8015294:	4620      	mov	r0, r4
 8015296:	bd70      	pop	{r4, r5, r6, pc}

08015298 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801529c:	460c      	mov	r4, r1
 801529e:	7809      	ldrb	r1, [r1, #0]
 80152a0:	4606      	mov	r6, r0
 80152a2:	f7fb fdc7 	bl	8010e34 <ucdr_serialize_bool>
 80152a6:	7823      	ldrb	r3, [r4, #0]
 80152a8:	4605      	mov	r5, r0
 80152aa:	b96b      	cbnz	r3, 80152c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80152ac:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80152b0:	4630      	mov	r0, r6
 80152b2:	f7fb fdbf 	bl	8010e34 <ucdr_serialize_bool>
 80152b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80152ba:	4005      	ands	r5, r0
 80152bc:	b2ed      	uxtb	r5, r5
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d169      	bne.n	8015396 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80152c2:	4628      	mov	r0, r5
 80152c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c8:	6861      	ldr	r1, [r4, #4]
 80152ca:	4630      	mov	r0, r6
 80152cc:	f7fb fff6 	bl	80112bc <ucdr_serialize_uint32_t>
 80152d0:	6863      	ldr	r3, [r4, #4]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d06b      	beq.n	80153ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	d067      	beq.n	80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152da:	68a1      	ldr	r1, [r4, #8]
 80152dc:	4630      	mov	r0, r6
 80152de:	f009 f813 	bl	801e308 <ucdr_serialize_string>
 80152e2:	6863      	ldr	r3, [r4, #4]
 80152e4:	2b01      	cmp	r3, #1
 80152e6:	d953      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152e8:	2800      	cmp	r0, #0
 80152ea:	d05e      	beq.n	80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152ec:	68e1      	ldr	r1, [r4, #12]
 80152ee:	4630      	mov	r0, r6
 80152f0:	f009 f80a 	bl	801e308 <ucdr_serialize_string>
 80152f4:	6863      	ldr	r3, [r4, #4]
 80152f6:	2b02      	cmp	r3, #2
 80152f8:	d94a      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80152fa:	2800      	cmp	r0, #0
 80152fc:	d055      	beq.n	80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80152fe:	6921      	ldr	r1, [r4, #16]
 8015300:	4630      	mov	r0, r6
 8015302:	f009 f801 	bl	801e308 <ucdr_serialize_string>
 8015306:	6863      	ldr	r3, [r4, #4]
 8015308:	2b03      	cmp	r3, #3
 801530a:	d941      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801530c:	2800      	cmp	r0, #0
 801530e:	d04c      	beq.n	80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015310:	6961      	ldr	r1, [r4, #20]
 8015312:	4630      	mov	r0, r6
 8015314:	f008 fff8 	bl	801e308 <ucdr_serialize_string>
 8015318:	6863      	ldr	r3, [r4, #4]
 801531a:	2b04      	cmp	r3, #4
 801531c:	d938      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801531e:	2800      	cmp	r0, #0
 8015320:	d043      	beq.n	80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015322:	69a1      	ldr	r1, [r4, #24]
 8015324:	4630      	mov	r0, r6
 8015326:	f008 ffef 	bl	801e308 <ucdr_serialize_string>
 801532a:	6863      	ldr	r3, [r4, #4]
 801532c:	2b05      	cmp	r3, #5
 801532e:	d92f      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015330:	2800      	cmp	r0, #0
 8015332:	d03a      	beq.n	80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015334:	69e1      	ldr	r1, [r4, #28]
 8015336:	4630      	mov	r0, r6
 8015338:	f008 ffe6 	bl	801e308 <ucdr_serialize_string>
 801533c:	6863      	ldr	r3, [r4, #4]
 801533e:	2b06      	cmp	r3, #6
 8015340:	d926      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015342:	b390      	cbz	r0, 80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015344:	6a21      	ldr	r1, [r4, #32]
 8015346:	4630      	mov	r0, r6
 8015348:	f008 ffde 	bl	801e308 <ucdr_serialize_string>
 801534c:	6863      	ldr	r3, [r4, #4]
 801534e:	2b07      	cmp	r3, #7
 8015350:	d91e      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015352:	b350      	cbz	r0, 80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015354:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015356:	4630      	mov	r0, r6
 8015358:	f008 ffd6 	bl	801e308 <ucdr_serialize_string>
 801535c:	6863      	ldr	r3, [r4, #4]
 801535e:	2b08      	cmp	r3, #8
 8015360:	d916      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015362:	b310      	cbz	r0, 80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015364:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015366:	4630      	mov	r0, r6
 8015368:	f008 ffce 	bl	801e308 <ucdr_serialize_string>
 801536c:	6863      	ldr	r3, [r4, #4]
 801536e:	2b09      	cmp	r3, #9
 8015370:	d90e      	bls.n	8015390 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015372:	b1d0      	cbz	r0, 80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015374:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015378:	2709      	movs	r7, #9
 801537a:	e000      	b.n	801537e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801537c:	b1a8      	cbz	r0, 80153aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801537e:	f858 1b04 	ldr.w	r1, [r8], #4
 8015382:	4630      	mov	r0, r6
 8015384:	f008 ffc0 	bl	801e308 <ucdr_serialize_string>
 8015388:	6862      	ldr	r2, [r4, #4]
 801538a:	3701      	adds	r7, #1
 801538c:	4297      	cmp	r7, r2
 801538e:	d3f5      	bcc.n	801537c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015390:	4005      	ands	r5, r0
 8015392:	b2ed      	uxtb	r5, r5
 8015394:	e78a      	b.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015396:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015398:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801539c:	4630      	mov	r0, r6
 801539e:	f7fd fe4d 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 80153a2:	4005      	ands	r5, r0
 80153a4:	4628      	mov	r0, r5
 80153a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153aa:	2500      	movs	r5, #0
 80153ac:	e77e      	b.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80153ae:	4028      	ands	r0, r5
 80153b0:	b2c5      	uxtb	r5, r0
 80153b2:	e77b      	b.n	80152ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080153b4 <uxr_serialize_OBJK_Publisher_Binary>:
 80153b4:	b570      	push	{r4, r5, r6, lr}
 80153b6:	460d      	mov	r5, r1
 80153b8:	7809      	ldrb	r1, [r1, #0]
 80153ba:	4606      	mov	r6, r0
 80153bc:	f7fb fd3a 	bl	8010e34 <ucdr_serialize_bool>
 80153c0:	782b      	ldrb	r3, [r5, #0]
 80153c2:	4604      	mov	r4, r0
 80153c4:	b94b      	cbnz	r3, 80153da <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80153c6:	7a29      	ldrb	r1, [r5, #8]
 80153c8:	4630      	mov	r0, r6
 80153ca:	f7fb fd33 	bl	8010e34 <ucdr_serialize_bool>
 80153ce:	7a2b      	ldrb	r3, [r5, #8]
 80153d0:	4004      	ands	r4, r0
 80153d2:	b2e4      	uxtb	r4, r4
 80153d4:	b943      	cbnz	r3, 80153e8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80153d6:	4620      	mov	r0, r4
 80153d8:	bd70      	pop	{r4, r5, r6, pc}
 80153da:	6869      	ldr	r1, [r5, #4]
 80153dc:	4630      	mov	r0, r6
 80153de:	f008 ff93 	bl	801e308 <ucdr_serialize_string>
 80153e2:	4004      	ands	r4, r0
 80153e4:	b2e4      	uxtb	r4, r4
 80153e6:	e7ee      	b.n	80153c6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80153e8:	f105 010c 	add.w	r1, r5, #12
 80153ec:	4630      	mov	r0, r6
 80153ee:	f7ff ff53 	bl	8015298 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80153f2:	4004      	ands	r4, r0
 80153f4:	4620      	mov	r0, r4
 80153f6:	bd70      	pop	{r4, r5, r6, pc}

080153f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80153f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153fc:	460c      	mov	r4, r1
 80153fe:	7809      	ldrb	r1, [r1, #0]
 8015400:	4606      	mov	r6, r0
 8015402:	f7fb fd17 	bl	8010e34 <ucdr_serialize_bool>
 8015406:	7823      	ldrb	r3, [r4, #0]
 8015408:	4605      	mov	r5, r0
 801540a:	b96b      	cbnz	r3, 8015428 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801540c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015410:	4630      	mov	r0, r6
 8015412:	f7fb fd0f 	bl	8010e34 <ucdr_serialize_bool>
 8015416:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801541a:	4005      	ands	r5, r0
 801541c:	b2ed      	uxtb	r5, r5
 801541e:	2b00      	cmp	r3, #0
 8015420:	d169      	bne.n	80154f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8015422:	4628      	mov	r0, r5
 8015424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015428:	6861      	ldr	r1, [r4, #4]
 801542a:	4630      	mov	r0, r6
 801542c:	f7fb ff46 	bl	80112bc <ucdr_serialize_uint32_t>
 8015430:	6863      	ldr	r3, [r4, #4]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d06b      	beq.n	801550e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8015436:	2800      	cmp	r0, #0
 8015438:	d067      	beq.n	801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801543a:	68a1      	ldr	r1, [r4, #8]
 801543c:	4630      	mov	r0, r6
 801543e:	f008 ff63 	bl	801e308 <ucdr_serialize_string>
 8015442:	6863      	ldr	r3, [r4, #4]
 8015444:	2b01      	cmp	r3, #1
 8015446:	d953      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015448:	2800      	cmp	r0, #0
 801544a:	d05e      	beq.n	801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801544c:	68e1      	ldr	r1, [r4, #12]
 801544e:	4630      	mov	r0, r6
 8015450:	f008 ff5a 	bl	801e308 <ucdr_serialize_string>
 8015454:	6863      	ldr	r3, [r4, #4]
 8015456:	2b02      	cmp	r3, #2
 8015458:	d94a      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801545a:	2800      	cmp	r0, #0
 801545c:	d055      	beq.n	801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801545e:	6921      	ldr	r1, [r4, #16]
 8015460:	4630      	mov	r0, r6
 8015462:	f008 ff51 	bl	801e308 <ucdr_serialize_string>
 8015466:	6863      	ldr	r3, [r4, #4]
 8015468:	2b03      	cmp	r3, #3
 801546a:	d941      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801546c:	2800      	cmp	r0, #0
 801546e:	d04c      	beq.n	801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015470:	6961      	ldr	r1, [r4, #20]
 8015472:	4630      	mov	r0, r6
 8015474:	f008 ff48 	bl	801e308 <ucdr_serialize_string>
 8015478:	6863      	ldr	r3, [r4, #4]
 801547a:	2b04      	cmp	r3, #4
 801547c:	d938      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801547e:	2800      	cmp	r0, #0
 8015480:	d043      	beq.n	801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015482:	69a1      	ldr	r1, [r4, #24]
 8015484:	4630      	mov	r0, r6
 8015486:	f008 ff3f 	bl	801e308 <ucdr_serialize_string>
 801548a:	6863      	ldr	r3, [r4, #4]
 801548c:	2b05      	cmp	r3, #5
 801548e:	d92f      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015490:	2800      	cmp	r0, #0
 8015492:	d03a      	beq.n	801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015494:	69e1      	ldr	r1, [r4, #28]
 8015496:	4630      	mov	r0, r6
 8015498:	f008 ff36 	bl	801e308 <ucdr_serialize_string>
 801549c:	6863      	ldr	r3, [r4, #4]
 801549e:	2b06      	cmp	r3, #6
 80154a0:	d926      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80154a2:	b390      	cbz	r0, 801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80154a4:	6a21      	ldr	r1, [r4, #32]
 80154a6:	4630      	mov	r0, r6
 80154a8:	f008 ff2e 	bl	801e308 <ucdr_serialize_string>
 80154ac:	6863      	ldr	r3, [r4, #4]
 80154ae:	2b07      	cmp	r3, #7
 80154b0:	d91e      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80154b2:	b350      	cbz	r0, 801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80154b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80154b6:	4630      	mov	r0, r6
 80154b8:	f008 ff26 	bl	801e308 <ucdr_serialize_string>
 80154bc:	6863      	ldr	r3, [r4, #4]
 80154be:	2b08      	cmp	r3, #8
 80154c0:	d916      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80154c2:	b310      	cbz	r0, 801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80154c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80154c6:	4630      	mov	r0, r6
 80154c8:	f008 ff1e 	bl	801e308 <ucdr_serialize_string>
 80154cc:	6863      	ldr	r3, [r4, #4]
 80154ce:	2b09      	cmp	r3, #9
 80154d0:	d90e      	bls.n	80154f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80154d2:	b1d0      	cbz	r0, 801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80154d4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80154d8:	2709      	movs	r7, #9
 80154da:	e000      	b.n	80154de <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80154dc:	b1a8      	cbz	r0, 801550a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80154de:	f858 1b04 	ldr.w	r1, [r8], #4
 80154e2:	4630      	mov	r0, r6
 80154e4:	f008 ff10 	bl	801e308 <ucdr_serialize_string>
 80154e8:	6862      	ldr	r2, [r4, #4]
 80154ea:	3701      	adds	r7, #1
 80154ec:	4297      	cmp	r7, r2
 80154ee:	d3f5      	bcc.n	80154dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80154f0:	4005      	ands	r5, r0
 80154f2:	b2ed      	uxtb	r5, r5
 80154f4:	e78a      	b.n	801540c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80154f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80154f8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80154fc:	4630      	mov	r0, r6
 80154fe:	f7fd fd9d 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 8015502:	4005      	ands	r5, r0
 8015504:	4628      	mov	r0, r5
 8015506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801550a:	2500      	movs	r5, #0
 801550c:	e77e      	b.n	801540c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801550e:	4028      	ands	r0, r5
 8015510:	b2c5      	uxtb	r5, r0
 8015512:	e77b      	b.n	801540c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08015514 <uxr_serialize_OBJK_Subscriber_Binary>:
 8015514:	b570      	push	{r4, r5, r6, lr}
 8015516:	460d      	mov	r5, r1
 8015518:	7809      	ldrb	r1, [r1, #0]
 801551a:	4606      	mov	r6, r0
 801551c:	f7fb fc8a 	bl	8010e34 <ucdr_serialize_bool>
 8015520:	782b      	ldrb	r3, [r5, #0]
 8015522:	4604      	mov	r4, r0
 8015524:	b94b      	cbnz	r3, 801553a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8015526:	7a29      	ldrb	r1, [r5, #8]
 8015528:	4630      	mov	r0, r6
 801552a:	f7fb fc83 	bl	8010e34 <ucdr_serialize_bool>
 801552e:	7a2b      	ldrb	r3, [r5, #8]
 8015530:	4004      	ands	r4, r0
 8015532:	b2e4      	uxtb	r4, r4
 8015534:	b943      	cbnz	r3, 8015548 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8015536:	4620      	mov	r0, r4
 8015538:	bd70      	pop	{r4, r5, r6, pc}
 801553a:	6869      	ldr	r1, [r5, #4]
 801553c:	4630      	mov	r0, r6
 801553e:	f008 fee3 	bl	801e308 <ucdr_serialize_string>
 8015542:	4004      	ands	r4, r0
 8015544:	b2e4      	uxtb	r4, r4
 8015546:	e7ee      	b.n	8015526 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8015548:	f105 010c 	add.w	r1, r5, #12
 801554c:	4630      	mov	r0, r6
 801554e:	f7ff ff53 	bl	80153f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8015552:	4004      	ands	r4, r0
 8015554:	4620      	mov	r0, r4
 8015556:	bd70      	pop	{r4, r5, r6, pc}

08015558 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015558:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801555c:	4688      	mov	r8, r1
 801555e:	8809      	ldrh	r1, [r1, #0]
 8015560:	4681      	mov	r9, r0
 8015562:	f7fb fcc1 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015566:	f898 1002 	ldrb.w	r1, [r8, #2]
 801556a:	4606      	mov	r6, r0
 801556c:	4648      	mov	r0, r9
 801556e:	f7fb fc61 	bl	8010e34 <ucdr_serialize_bool>
 8015572:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015576:	4006      	ands	r6, r0
 8015578:	b2f5      	uxtb	r5, r6
 801557a:	b9eb      	cbnz	r3, 80155b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801557c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015580:	4648      	mov	r0, r9
 8015582:	f7fb fc57 	bl	8010e34 <ucdr_serialize_bool>
 8015586:	f898 3006 	ldrb.w	r3, [r8, #6]
 801558a:	4005      	ands	r5, r0
 801558c:	bb7b      	cbnz	r3, 80155ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801558e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8015592:	4648      	mov	r0, r9
 8015594:	f7fb fc4e 	bl	8010e34 <ucdr_serialize_bool>
 8015598:	f898 300c 	ldrb.w	r3, [r8, #12]
 801559c:	4005      	ands	r5, r0
 801559e:	b9f3      	cbnz	r3, 80155de <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80155a0:	f898 1014 	ldrb.w	r1, [r8, #20]
 80155a4:	4648      	mov	r0, r9
 80155a6:	f7fb fc45 	bl	8010e34 <ucdr_serialize_bool>
 80155aa:	f898 3014 	ldrb.w	r3, [r8, #20]
 80155ae:	4005      	ands	r5, r0
 80155b0:	b94b      	cbnz	r3, 80155c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80155b2:	4628      	mov	r0, r5
 80155b4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80155b8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80155bc:	4648      	mov	r0, r9
 80155be:	f7fb fc93 	bl	8010ee8 <ucdr_serialize_uint16_t>
 80155c2:	4005      	ands	r5, r0
 80155c4:	e7da      	b.n	801557c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80155c6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80155ca:	f108 011c 	add.w	r1, r8, #28
 80155ce:	4648      	mov	r0, r9
 80155d0:	f7fd fd34 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 80155d4:	4028      	ands	r0, r5
 80155d6:	b2c5      	uxtb	r5, r0
 80155d8:	4628      	mov	r0, r5
 80155da:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80155de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80155e2:	4648      	mov	r0, r9
 80155e4:	f7fb fe6a 	bl	80112bc <ucdr_serialize_uint32_t>
 80155e8:	4028      	ands	r0, r5
 80155ea:	b2c5      	uxtb	r5, r0
 80155ec:	e7d8      	b.n	80155a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80155ee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80155f2:	4648      	mov	r0, r9
 80155f4:	f7fb fe62 	bl	80112bc <ucdr_serialize_uint32_t>
 80155f8:	4028      	ands	r0, r5
 80155fa:	b2c5      	uxtb	r5, r0
 80155fc:	e7c7      	b.n	801558e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80155fe:	bf00      	nop

08015600 <uxr_serialize_OBJK_DataReader_Binary>:
 8015600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015602:	2202      	movs	r2, #2
 8015604:	460c      	mov	r4, r1
 8015606:	4606      	mov	r6, r0
 8015608:	f7fa fff6 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 801560c:	78a1      	ldrb	r1, [r4, #2]
 801560e:	4605      	mov	r5, r0
 8015610:	4630      	mov	r0, r6
 8015612:	f7fb fc0f 	bl	8010e34 <ucdr_serialize_bool>
 8015616:	78a3      	ldrb	r3, [r4, #2]
 8015618:	4005      	ands	r5, r0
 801561a:	b2ed      	uxtb	r5, r5
 801561c:	b90b      	cbnz	r3, 8015622 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801561e:	4628      	mov	r0, r5
 8015620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015622:	f104 0108 	add.w	r1, r4, #8
 8015626:	4630      	mov	r0, r6
 8015628:	f7ff ff96 	bl	8015558 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801562c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015630:	4607      	mov	r7, r0
 8015632:	4630      	mov	r0, r6
 8015634:	f7fb fbfe 	bl	8010e34 <ucdr_serialize_bool>
 8015638:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801563c:	4038      	ands	r0, r7
 801563e:	b2c7      	uxtb	r7, r0
 8015640:	b95b      	cbnz	r3, 801565a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8015642:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8015646:	4630      	mov	r0, r6
 8015648:	f7fb fbf4 	bl	8010e34 <ucdr_serialize_bool>
 801564c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015650:	4007      	ands	r7, r0
 8015652:	b94b      	cbnz	r3, 8015668 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8015654:	403d      	ands	r5, r7
 8015656:	4628      	mov	r0, r5
 8015658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801565a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801565e:	4630      	mov	r0, r6
 8015660:	f7fc f882 	bl	8011768 <ucdr_serialize_uint64_t>
 8015664:	4007      	ands	r7, r0
 8015666:	e7ec      	b.n	8015642 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8015668:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801566a:	4630      	mov	r0, r6
 801566c:	f008 fe4c 	bl	801e308 <ucdr_serialize_string>
 8015670:	4007      	ands	r7, r0
 8015672:	b2ff      	uxtb	r7, r7
 8015674:	e7ee      	b.n	8015654 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8015676:	bf00      	nop

08015678 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801567a:	2202      	movs	r2, #2
 801567c:	460d      	mov	r5, r1
 801567e:	4606      	mov	r6, r0
 8015680:	f7fa ffba 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015684:	78a9      	ldrb	r1, [r5, #2]
 8015686:	4604      	mov	r4, r0
 8015688:	4630      	mov	r0, r6
 801568a:	f7fb fbd3 	bl	8010e34 <ucdr_serialize_bool>
 801568e:	78ab      	ldrb	r3, [r5, #2]
 8015690:	4004      	ands	r4, r0
 8015692:	b2e4      	uxtb	r4, r4
 8015694:	b90b      	cbnz	r3, 801569a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015696:	4620      	mov	r0, r4
 8015698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801569a:	f105 0108 	add.w	r1, r5, #8
 801569e:	4630      	mov	r0, r6
 80156a0:	f7ff ff5a 	bl	8015558 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80156a4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80156a8:	4607      	mov	r7, r0
 80156aa:	4630      	mov	r0, r6
 80156ac:	f7fb fbc2 	bl	8010e34 <ucdr_serialize_bool>
 80156b0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80156b4:	4038      	ands	r0, r7
 80156b6:	b2c7      	uxtb	r7, r0
 80156b8:	b913      	cbnz	r3, 80156c0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80156ba:	403c      	ands	r4, r7
 80156bc:	4620      	mov	r0, r4
 80156be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156c0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80156c4:	4630      	mov	r0, r6
 80156c6:	f7fc f84f 	bl	8011768 <ucdr_serialize_uint64_t>
 80156ca:	4007      	ands	r7, r0
 80156cc:	e7f5      	b.n	80156ba <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80156ce:	bf00      	nop

080156d0 <uxr_serialize_OBJK_Replier_Binary>:
 80156d0:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80156d4:	460f      	mov	r7, r1
 80156d6:	6809      	ldr	r1, [r1, #0]
 80156d8:	4680      	mov	r8, r0
 80156da:	f008 fe15 	bl	801e308 <ucdr_serialize_string>
 80156de:	6879      	ldr	r1, [r7, #4]
 80156e0:	4605      	mov	r5, r0
 80156e2:	4640      	mov	r0, r8
 80156e4:	f008 fe10 	bl	801e308 <ucdr_serialize_string>
 80156e8:	68b9      	ldr	r1, [r7, #8]
 80156ea:	4005      	ands	r5, r0
 80156ec:	4640      	mov	r0, r8
 80156ee:	f008 fe0b 	bl	801e308 <ucdr_serialize_string>
 80156f2:	b2ec      	uxtb	r4, r5
 80156f4:	4004      	ands	r4, r0
 80156f6:	7b39      	ldrb	r1, [r7, #12]
 80156f8:	4640      	mov	r0, r8
 80156fa:	f7fb fb9b 	bl	8010e34 <ucdr_serialize_bool>
 80156fe:	7b3b      	ldrb	r3, [r7, #12]
 8015700:	4004      	ands	r4, r0
 8015702:	b94b      	cbnz	r3, 8015718 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8015704:	7d39      	ldrb	r1, [r7, #20]
 8015706:	4640      	mov	r0, r8
 8015708:	f7fb fb94 	bl	8010e34 <ucdr_serialize_bool>
 801570c:	7d3b      	ldrb	r3, [r7, #20]
 801570e:	4004      	ands	r4, r0
 8015710:	b943      	cbnz	r3, 8015724 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8015712:	4620      	mov	r0, r4
 8015714:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015718:	6939      	ldr	r1, [r7, #16]
 801571a:	4640      	mov	r0, r8
 801571c:	f008 fdf4 	bl	801e308 <ucdr_serialize_string>
 8015720:	4004      	ands	r4, r0
 8015722:	e7ef      	b.n	8015704 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8015724:	69b9      	ldr	r1, [r7, #24]
 8015726:	4640      	mov	r0, r8
 8015728:	f008 fdee 	bl	801e308 <ucdr_serialize_string>
 801572c:	4004      	ands	r4, r0
 801572e:	b2e4      	uxtb	r4, r4
 8015730:	4620      	mov	r0, r4
 8015732:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8015736:	bf00      	nop

08015738 <uxr_deserialize_ObjectVariant>:
 8015738:	b570      	push	{r4, r5, r6, lr}
 801573a:	4605      	mov	r5, r0
 801573c:	460e      	mov	r6, r1
 801573e:	f7fb fbbd 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015742:	b168      	cbz	r0, 8015760 <uxr_deserialize_ObjectVariant+0x28>
 8015744:	7833      	ldrb	r3, [r6, #0]
 8015746:	3b01      	subs	r3, #1
 8015748:	4604      	mov	r4, r0
 801574a:	2b0d      	cmp	r3, #13
 801574c:	d809      	bhi.n	8015762 <uxr_deserialize_ObjectVariant+0x2a>
 801574e:	e8df f003 	tbb	[pc, r3]
 8015752:	0a41      	.short	0x0a41
 8015754:	0a0a2323 	.word	0x0a0a2323
 8015758:	10080a0a 	.word	0x10080a0a
 801575c:	565c1010 	.word	0x565c1010
 8015760:	2400      	movs	r4, #0
 8015762:	4620      	mov	r0, r4
 8015764:	bd70      	pop	{r4, r5, r6, pc}
 8015766:	1d31      	adds	r1, r6, #4
 8015768:	4628      	mov	r0, r5
 801576a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801576e:	f7ff bd21 	b.w	80151b4 <uxr_deserialize_DATAWRITER_Representation>
 8015772:	1d31      	adds	r1, r6, #4
 8015774:	4628      	mov	r0, r5
 8015776:	f7fb fba1 	bl	8010ebc <ucdr_deserialize_uint8_t>
 801577a:	2800      	cmp	r0, #0
 801577c:	d0f0      	beq.n	8015760 <uxr_deserialize_ObjectVariant+0x28>
 801577e:	7933      	ldrb	r3, [r6, #4]
 8015780:	2b01      	cmp	r3, #1
 8015782:	d001      	beq.n	8015788 <uxr_deserialize_ObjectVariant+0x50>
 8015784:	2b02      	cmp	r3, #2
 8015786:	d1ec      	bne.n	8015762 <uxr_deserialize_ObjectVariant+0x2a>
 8015788:	68b1      	ldr	r1, [r6, #8]
 801578a:	4628      	mov	r0, r5
 801578c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015794:	f008 bdc8 	b.w	801e328 <ucdr_deserialize_string>
 8015798:	1d31      	adds	r1, r6, #4
 801579a:	4628      	mov	r0, r5
 801579c:	f7fb fb8e 	bl	8010ebc <ucdr_deserialize_uint8_t>
 80157a0:	4604      	mov	r4, r0
 80157a2:	b170      	cbz	r0, 80157c2 <uxr_deserialize_ObjectVariant+0x8a>
 80157a4:	7933      	ldrb	r3, [r6, #4]
 80157a6:	2b02      	cmp	r3, #2
 80157a8:	d04c      	beq.n	8015844 <uxr_deserialize_ObjectVariant+0x10c>
 80157aa:	2b03      	cmp	r3, #3
 80157ac:	d109      	bne.n	80157c2 <uxr_deserialize_ObjectVariant+0x8a>
 80157ae:	f106 0308 	add.w	r3, r6, #8
 80157b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80157b6:	f106 010c 	add.w	r1, r6, #12
 80157ba:	4628      	mov	r0, r5
 80157bc:	f7fd fc50 	bl	8013060 <ucdr_deserialize_sequence_uint8_t>
 80157c0:	4604      	mov	r4, r0
 80157c2:	2202      	movs	r2, #2
 80157c4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80157c8:	4628      	mov	r0, r5
 80157ca:	f7fa ff79 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 80157ce:	4020      	ands	r0, r4
 80157d0:	b2c4      	uxtb	r4, r0
 80157d2:	e7c6      	b.n	8015762 <uxr_deserialize_ObjectVariant+0x2a>
 80157d4:	1d31      	adds	r1, r6, #4
 80157d6:	4628      	mov	r0, r5
 80157d8:	f7fb fb70 	bl	8010ebc <ucdr_deserialize_uint8_t>
 80157dc:	4604      	mov	r4, r0
 80157de:	b130      	cbz	r0, 80157ee <uxr_deserialize_ObjectVariant+0xb6>
 80157e0:	7933      	ldrb	r3, [r6, #4]
 80157e2:	2b02      	cmp	r3, #2
 80157e4:	d036      	beq.n	8015854 <uxr_deserialize_ObjectVariant+0x11c>
 80157e6:	2b03      	cmp	r3, #3
 80157e8:	d03c      	beq.n	8015864 <uxr_deserialize_ObjectVariant+0x12c>
 80157ea:	2b01      	cmp	r3, #1
 80157ec:	d032      	beq.n	8015854 <uxr_deserialize_ObjectVariant+0x11c>
 80157ee:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80157f2:	4628      	mov	r0, r5
 80157f4:	f7fc f9ce 	bl	8011b94 <ucdr_deserialize_int16_t>
 80157f8:	4020      	ands	r0, r4
 80157fa:	b2c4      	uxtb	r4, r0
 80157fc:	e7b1      	b.n	8015762 <uxr_deserialize_ObjectVariant+0x2a>
 80157fe:	1d31      	adds	r1, r6, #4
 8015800:	4628      	mov	r0, r5
 8015802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015806:	f7ff bb8b 	b.w	8014f20 <uxr_deserialize_CLIENT_Representation>
 801580a:	2204      	movs	r2, #4
 801580c:	18b1      	adds	r1, r6, r2
 801580e:	4628      	mov	r0, r5
 8015810:	f7fa ff56 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015814:	2202      	movs	r2, #2
 8015816:	f106 0108 	add.w	r1, r6, #8
 801581a:	4604      	mov	r4, r0
 801581c:	4628      	mov	r0, r5
 801581e:	f7fa ff4f 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015822:	2202      	movs	r2, #2
 8015824:	4004      	ands	r4, r0
 8015826:	f106 010a 	add.w	r1, r6, #10
 801582a:	4628      	mov	r0, r5
 801582c:	f7fa ff48 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015830:	b2e4      	uxtb	r4, r4
 8015832:	4603      	mov	r3, r0
 8015834:	f106 010c 	add.w	r1, r6, #12
 8015838:	4628      	mov	r0, r5
 801583a:	401c      	ands	r4, r3
 801583c:	f7fb fb10 	bl	8010e60 <ucdr_deserialize_bool>
 8015840:	4004      	ands	r4, r0
 8015842:	e78e      	b.n	8015762 <uxr_deserialize_ObjectVariant+0x2a>
 8015844:	68b1      	ldr	r1, [r6, #8]
 8015846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801584a:	4628      	mov	r0, r5
 801584c:	f008 fd6c 	bl	801e328 <ucdr_deserialize_string>
 8015850:	4604      	mov	r4, r0
 8015852:	e7b6      	b.n	80157c2 <uxr_deserialize_ObjectVariant+0x8a>
 8015854:	68b1      	ldr	r1, [r6, #8]
 8015856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801585a:	4628      	mov	r0, r5
 801585c:	f008 fd64 	bl	801e328 <ucdr_deserialize_string>
 8015860:	4604      	mov	r4, r0
 8015862:	e7c4      	b.n	80157ee <uxr_deserialize_ObjectVariant+0xb6>
 8015864:	f106 0308 	add.w	r3, r6, #8
 8015868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801586c:	f106 010c 	add.w	r1, r6, #12
 8015870:	4628      	mov	r0, r5
 8015872:	f7fd fbf5 	bl	8013060 <ucdr_deserialize_sequence_uint8_t>
 8015876:	4604      	mov	r4, r0
 8015878:	e7b9      	b.n	80157ee <uxr_deserialize_ObjectVariant+0xb6>
 801587a:	bf00      	nop

0801587c <uxr_deserialize_BaseObjectRequest>:
 801587c:	b570      	push	{r4, r5, r6, lr}
 801587e:	2202      	movs	r2, #2
 8015880:	4605      	mov	r5, r0
 8015882:	460e      	mov	r6, r1
 8015884:	f7fa ff1c 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015888:	2202      	movs	r2, #2
 801588a:	4604      	mov	r4, r0
 801588c:	18b1      	adds	r1, r6, r2
 801588e:	4628      	mov	r0, r5
 8015890:	f7fa ff16 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015894:	4020      	ands	r0, r4
 8015896:	b2c0      	uxtb	r0, r0
 8015898:	bd70      	pop	{r4, r5, r6, pc}
 801589a:	bf00      	nop

0801589c <uxr_serialize_ActivityInfoVariant>:
 801589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158a0:	460d      	mov	r5, r1
 80158a2:	7809      	ldrb	r1, [r1, #0]
 80158a4:	4607      	mov	r7, r0
 80158a6:	f7fb faf3 	bl	8010e90 <ucdr_serialize_uint8_t>
 80158aa:	4681      	mov	r9, r0
 80158ac:	b138      	cbz	r0, 80158be <uxr_serialize_ActivityInfoVariant+0x22>
 80158ae:	782b      	ldrb	r3, [r5, #0]
 80158b0:	2b06      	cmp	r3, #6
 80158b2:	f000 8082 	beq.w	80159ba <uxr_serialize_ActivityInfoVariant+0x11e>
 80158b6:	2b0d      	cmp	r3, #13
 80158b8:	d016      	beq.n	80158e8 <uxr_serialize_ActivityInfoVariant+0x4c>
 80158ba:	2b05      	cmp	r3, #5
 80158bc:	d002      	beq.n	80158c4 <uxr_serialize_ActivityInfoVariant+0x28>
 80158be:	4648      	mov	r0, r9
 80158c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158c4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80158c8:	4638      	mov	r0, r7
 80158ca:	f7fc f8e3 	bl	8011a94 <ucdr_serialize_int16_t>
 80158ce:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80158d2:	4681      	mov	r9, r0
 80158d4:	4638      	mov	r0, r7
 80158d6:	f7fb ff47 	bl	8011768 <ucdr_serialize_uint64_t>
 80158da:	ea09 0000 	and.w	r0, r9, r0
 80158de:	fa5f f980 	uxtb.w	r9, r0
 80158e2:	4648      	mov	r0, r9
 80158e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80158ec:	4638      	mov	r0, r7
 80158ee:	f7fc f8d1 	bl	8011a94 <ucdr_serialize_int16_t>
 80158f2:	68e9      	ldr	r1, [r5, #12]
 80158f4:	4681      	mov	r9, r0
 80158f6:	4638      	mov	r0, r7
 80158f8:	f7fb fce0 	bl	80112bc <ucdr_serialize_uint32_t>
 80158fc:	68eb      	ldr	r3, [r5, #12]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d0eb      	beq.n	80158da <uxr_serialize_ActivityInfoVariant+0x3e>
 8015902:	b320      	cbz	r0, 801594e <uxr_serialize_ActivityInfoVariant+0xb2>
 8015904:	f105 080c 	add.w	r8, r5, #12
 8015908:	2600      	movs	r6, #0
 801590a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801590e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8015912:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8015916:	4638      	mov	r0, r7
 8015918:	f7fb faba 	bl	8010e90 <ucdr_serialize_uint8_t>
 801591c:	2800      	cmp	r0, #0
 801591e:	d053      	beq.n	80159c8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8015920:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8015924:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015928:	0074      	lsls	r4, r6, #1
 801592a:	00c9      	lsls	r1, r1, #3
 801592c:	2b03      	cmp	r3, #3
 801592e:	d854      	bhi.n	80159da <uxr_serialize_ActivityInfoVariant+0x13e>
 8015930:	e8df f003 	tbb	[pc, r3]
 8015934:	02102132 	.word	0x02102132
 8015938:	4441      	add	r1, r8
 801593a:	4638      	mov	r0, r7
 801593c:	6889      	ldr	r1, [r1, #8]
 801593e:	f008 fce3 	bl	801e308 <ucdr_serialize_string>
 8015942:	68ea      	ldr	r2, [r5, #12]
 8015944:	3601      	adds	r6, #1
 8015946:	4296      	cmp	r6, r2
 8015948:	d242      	bcs.n	80159d0 <uxr_serialize_ActivityInfoVariant+0x134>
 801594a:	2800      	cmp	r0, #0
 801594c:	d1dd      	bne.n	801590a <uxr_serialize_ActivityInfoVariant+0x6e>
 801594e:	f04f 0900 	mov.w	r9, #0
 8015952:	e7b4      	b.n	80158be <uxr_serialize_ActivityInfoVariant+0x22>
 8015954:	3108      	adds	r1, #8
 8015956:	4441      	add	r1, r8
 8015958:	2210      	movs	r2, #16
 801595a:	4638      	mov	r0, r7
 801595c:	f7fa fe4c 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015960:	4434      	add	r4, r6
 8015962:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015966:	4604      	mov	r4, r0
 8015968:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801596a:	4638      	mov	r0, r7
 801596c:	f7fb fca6 	bl	80112bc <ucdr_serialize_uint32_t>
 8015970:	4020      	ands	r0, r4
 8015972:	b2c0      	uxtb	r0, r0
 8015974:	e7e5      	b.n	8015942 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015976:	3108      	adds	r1, #8
 8015978:	4441      	add	r1, r8
 801597a:	2204      	movs	r2, #4
 801597c:	4638      	mov	r0, r7
 801597e:	f7fa fe3b 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015982:	4434      	add	r4, r6
 8015984:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015988:	4604      	mov	r4, r0
 801598a:	8b19      	ldrh	r1, [r3, #24]
 801598c:	4638      	mov	r0, r7
 801598e:	f7fb faab 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015992:	4020      	ands	r0, r4
 8015994:	b2c0      	uxtb	r0, r0
 8015996:	e7d4      	b.n	8015942 <uxr_serialize_ActivityInfoVariant+0xa6>
 8015998:	3108      	adds	r1, #8
 801599a:	4441      	add	r1, r8
 801599c:	2202      	movs	r2, #2
 801599e:	4638      	mov	r0, r7
 80159a0:	f7fa fe2a 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 80159a4:	4434      	add	r4, r6
 80159a6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80159aa:	4604      	mov	r4, r0
 80159ac:	7d99      	ldrb	r1, [r3, #22]
 80159ae:	4638      	mov	r0, r7
 80159b0:	f7fb fa6e 	bl	8010e90 <ucdr_serialize_uint8_t>
 80159b4:	4020      	ands	r0, r4
 80159b6:	b2c0      	uxtb	r0, r0
 80159b8:	e7c3      	b.n	8015942 <uxr_serialize_ActivityInfoVariant+0xa6>
 80159ba:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80159be:	4638      	mov	r0, r7
 80159c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159c4:	f7fc b866 	b.w	8011a94 <ucdr_serialize_int16_t>
 80159c8:	68ea      	ldr	r2, [r5, #12]
 80159ca:	3601      	adds	r6, #1
 80159cc:	42b2      	cmp	r2, r6
 80159ce:	d8be      	bhi.n	801594e <uxr_serialize_ActivityInfoVariant+0xb2>
 80159d0:	ea09 0900 	and.w	r9, r9, r0
 80159d4:	fa5f f989 	uxtb.w	r9, r9
 80159d8:	e771      	b.n	80158be <uxr_serialize_ActivityInfoVariant+0x22>
 80159da:	68eb      	ldr	r3, [r5, #12]
 80159dc:	3601      	adds	r6, #1
 80159de:	429e      	cmp	r6, r3
 80159e0:	f10a 0a18 	add.w	sl, sl, #24
 80159e4:	d395      	bcc.n	8015912 <uxr_serialize_ActivityInfoVariant+0x76>
 80159e6:	e76a      	b.n	80158be <uxr_serialize_ActivityInfoVariant+0x22>

080159e8 <uxr_deserialize_BaseObjectReply>:
 80159e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ec:	2202      	movs	r2, #2
 80159ee:	4606      	mov	r6, r0
 80159f0:	460f      	mov	r7, r1
 80159f2:	f7fa fe65 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 80159f6:	2202      	movs	r2, #2
 80159f8:	18b9      	adds	r1, r7, r2
 80159fa:	4605      	mov	r5, r0
 80159fc:	4630      	mov	r0, r6
 80159fe:	f7fa fe5f 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015a02:	1d39      	adds	r1, r7, #4
 8015a04:	4680      	mov	r8, r0
 8015a06:	4630      	mov	r0, r6
 8015a08:	f7fb fa58 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015a0c:	1d79      	adds	r1, r7, #5
 8015a0e:	4604      	mov	r4, r0
 8015a10:	4630      	mov	r0, r6
 8015a12:	f7fb fa53 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015a16:	ea05 0508 	and.w	r5, r5, r8
 8015a1a:	402c      	ands	r4, r5
 8015a1c:	4020      	ands	r0, r4
 8015a1e:	b2c0      	uxtb	r0, r0
 8015a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a24 <uxr_serialize_ReadSpecification>:
 8015a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a28:	460e      	mov	r6, r1
 8015a2a:	7809      	ldrb	r1, [r1, #0]
 8015a2c:	4607      	mov	r7, r0
 8015a2e:	f7fb fa2f 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015a32:	7871      	ldrb	r1, [r6, #1]
 8015a34:	4604      	mov	r4, r0
 8015a36:	4638      	mov	r0, r7
 8015a38:	f7fb fa2a 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015a3c:	78b1      	ldrb	r1, [r6, #2]
 8015a3e:	4004      	ands	r4, r0
 8015a40:	4638      	mov	r0, r7
 8015a42:	f7fb f9f7 	bl	8010e34 <ucdr_serialize_bool>
 8015a46:	78b3      	ldrb	r3, [r6, #2]
 8015a48:	b2e4      	uxtb	r4, r4
 8015a4a:	4004      	ands	r4, r0
 8015a4c:	b94b      	cbnz	r3, 8015a62 <uxr_serialize_ReadSpecification+0x3e>
 8015a4e:	7a31      	ldrb	r1, [r6, #8]
 8015a50:	4638      	mov	r0, r7
 8015a52:	f7fb f9ef 	bl	8010e34 <ucdr_serialize_bool>
 8015a56:	7a33      	ldrb	r3, [r6, #8]
 8015a58:	4004      	ands	r4, r0
 8015a5a:	b943      	cbnz	r3, 8015a6e <uxr_serialize_ReadSpecification+0x4a>
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a62:	6871      	ldr	r1, [r6, #4]
 8015a64:	4638      	mov	r0, r7
 8015a66:	f008 fc4f 	bl	801e308 <ucdr_serialize_string>
 8015a6a:	4004      	ands	r4, r0
 8015a6c:	e7ef      	b.n	8015a4e <uxr_serialize_ReadSpecification+0x2a>
 8015a6e:	8971      	ldrh	r1, [r6, #10]
 8015a70:	4638      	mov	r0, r7
 8015a72:	f7fb fa39 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015a76:	89b1      	ldrh	r1, [r6, #12]
 8015a78:	4605      	mov	r5, r0
 8015a7a:	4638      	mov	r0, r7
 8015a7c:	f7fb fa34 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015a80:	89f1      	ldrh	r1, [r6, #14]
 8015a82:	4005      	ands	r5, r0
 8015a84:	4638      	mov	r0, r7
 8015a86:	f7fb fa2f 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015a8a:	8a31      	ldrh	r1, [r6, #16]
 8015a8c:	4680      	mov	r8, r0
 8015a8e:	4638      	mov	r0, r7
 8015a90:	f7fb fa2a 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015a94:	b2ed      	uxtb	r5, r5
 8015a96:	4025      	ands	r5, r4
 8015a98:	ea08 0505 	and.w	r5, r8, r5
 8015a9c:	ea00 0405 	and.w	r4, r0, r5
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa6:	bf00      	nop

08015aa8 <uxr_serialize_CREATE_CLIENT_Payload>:
 8015aa8:	f7ff b9e2 	b.w	8014e70 <uxr_serialize_CLIENT_Representation>

08015aac <uxr_serialize_CREATE_Payload>:
 8015aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aae:	2202      	movs	r2, #2
 8015ab0:	4607      	mov	r7, r0
 8015ab2:	460e      	mov	r6, r1
 8015ab4:	f7fa fda0 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015ab8:	2202      	movs	r2, #2
 8015aba:	18b1      	adds	r1, r6, r2
 8015abc:	4605      	mov	r5, r0
 8015abe:	4638      	mov	r0, r7
 8015ac0:	f7fa fd9a 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015ac4:	7931      	ldrb	r1, [r6, #4]
 8015ac6:	4604      	mov	r4, r0
 8015ac8:	4638      	mov	r0, r7
 8015aca:	f7fb f9e1 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015ace:	b170      	cbz	r0, 8015aee <uxr_serialize_CREATE_Payload+0x42>
 8015ad0:	7933      	ldrb	r3, [r6, #4]
 8015ad2:	402c      	ands	r4, r5
 8015ad4:	3b01      	subs	r3, #1
 8015ad6:	b2e4      	uxtb	r4, r4
 8015ad8:	2b0d      	cmp	r3, #13
 8015ada:	d809      	bhi.n	8015af0 <uxr_serialize_CREATE_Payload+0x44>
 8015adc:	e8df f003 	tbb	[pc, r3]
 8015ae0:	23230a4c 	.word	0x23230a4c
 8015ae4:	0a0a0a0a 	.word	0x0a0a0a0a
 8015ae8:	12121208 	.word	0x12121208
 8015aec:	3e45      	.short	0x3e45
 8015aee:	2400      	movs	r4, #0
 8015af0:	4620      	mov	r0, r4
 8015af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015af4:	f106 0108 	add.w	r1, r6, #8
 8015af8:	4638      	mov	r0, r7
 8015afa:	f7ff fabf 	bl	801507c <uxr_serialize_DATAWRITER_Representation>
 8015afe:	4004      	ands	r4, r0
 8015b00:	4620      	mov	r0, r4
 8015b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b04:	7a31      	ldrb	r1, [r6, #8]
 8015b06:	4638      	mov	r0, r7
 8015b08:	f7fb f9c2 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	d0ee      	beq.n	8015aee <uxr_serialize_CREATE_Payload+0x42>
 8015b10:	7a33      	ldrb	r3, [r6, #8]
 8015b12:	2b01      	cmp	r3, #1
 8015b14:	d001      	beq.n	8015b1a <uxr_serialize_CREATE_Payload+0x6e>
 8015b16:	2b02      	cmp	r3, #2
 8015b18:	d1ea      	bne.n	8015af0 <uxr_serialize_CREATE_Payload+0x44>
 8015b1a:	68f1      	ldr	r1, [r6, #12]
 8015b1c:	4638      	mov	r0, r7
 8015b1e:	f008 fbf3 	bl	801e308 <ucdr_serialize_string>
 8015b22:	4004      	ands	r4, r0
 8015b24:	e7e4      	b.n	8015af0 <uxr_serialize_CREATE_Payload+0x44>
 8015b26:	7a31      	ldrb	r1, [r6, #8]
 8015b28:	4638      	mov	r0, r7
 8015b2a:	f7fb f9b1 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015b2e:	4605      	mov	r5, r0
 8015b30:	b158      	cbz	r0, 8015b4a <uxr_serialize_CREATE_Payload+0x9e>
 8015b32:	7a33      	ldrb	r3, [r6, #8]
 8015b34:	2b02      	cmp	r3, #2
 8015b36:	d034      	beq.n	8015ba2 <uxr_serialize_CREATE_Payload+0xf6>
 8015b38:	2b03      	cmp	r3, #3
 8015b3a:	d106      	bne.n	8015b4a <uxr_serialize_CREATE_Payload+0x9e>
 8015b3c:	68f2      	ldr	r2, [r6, #12]
 8015b3e:	f106 0110 	add.w	r1, r6, #16
 8015b42:	4638      	mov	r0, r7
 8015b44:	f7fd fa7a 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 8015b48:	4605      	mov	r5, r0
 8015b4a:	2202      	movs	r2, #2
 8015b4c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8015b50:	4638      	mov	r0, r7
 8015b52:	f7fa fd51 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015b56:	4028      	ands	r0, r5
 8015b58:	4004      	ands	r4, r0
 8015b5a:	e7c9      	b.n	8015af0 <uxr_serialize_CREATE_Payload+0x44>
 8015b5c:	f106 0108 	add.w	r1, r6, #8
 8015b60:	4638      	mov	r0, r7
 8015b62:	f7ff f985 	bl	8014e70 <uxr_serialize_CLIENT_Representation>
 8015b66:	4004      	ands	r4, r0
 8015b68:	e7c2      	b.n	8015af0 <uxr_serialize_CREATE_Payload+0x44>
 8015b6a:	f106 0108 	add.w	r1, r6, #8
 8015b6e:	4638      	mov	r0, r7
 8015b70:	f7ff fa3a 	bl	8014fe8 <uxr_serialize_AGENT_Representation>
 8015b74:	4004      	ands	r4, r0
 8015b76:	e7bb      	b.n	8015af0 <uxr_serialize_CREATE_Payload+0x44>
 8015b78:	7a31      	ldrb	r1, [r6, #8]
 8015b7a:	4638      	mov	r0, r7
 8015b7c:	f7fb f988 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015b80:	4605      	mov	r5, r0
 8015b82:	b130      	cbz	r0, 8015b92 <uxr_serialize_CREATE_Payload+0xe6>
 8015b84:	7a33      	ldrb	r3, [r6, #8]
 8015b86:	2b02      	cmp	r3, #2
 8015b88:	d011      	beq.n	8015bae <uxr_serialize_CREATE_Payload+0x102>
 8015b8a:	2b03      	cmp	r3, #3
 8015b8c:	d015      	beq.n	8015bba <uxr_serialize_CREATE_Payload+0x10e>
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d00d      	beq.n	8015bae <uxr_serialize_CREATE_Payload+0x102>
 8015b92:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8015b96:	4638      	mov	r0, r7
 8015b98:	f7fb ff7c 	bl	8011a94 <ucdr_serialize_int16_t>
 8015b9c:	4028      	ands	r0, r5
 8015b9e:	4004      	ands	r4, r0
 8015ba0:	e7a6      	b.n	8015af0 <uxr_serialize_CREATE_Payload+0x44>
 8015ba2:	68f1      	ldr	r1, [r6, #12]
 8015ba4:	4638      	mov	r0, r7
 8015ba6:	f008 fbaf 	bl	801e308 <ucdr_serialize_string>
 8015baa:	4605      	mov	r5, r0
 8015bac:	e7cd      	b.n	8015b4a <uxr_serialize_CREATE_Payload+0x9e>
 8015bae:	68f1      	ldr	r1, [r6, #12]
 8015bb0:	4638      	mov	r0, r7
 8015bb2:	f008 fba9 	bl	801e308 <ucdr_serialize_string>
 8015bb6:	4605      	mov	r5, r0
 8015bb8:	e7eb      	b.n	8015b92 <uxr_serialize_CREATE_Payload+0xe6>
 8015bba:	68f2      	ldr	r2, [r6, #12]
 8015bbc:	f106 0110 	add.w	r1, r6, #16
 8015bc0:	4638      	mov	r0, r7
 8015bc2:	f7fd fa3b 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 8015bc6:	4605      	mov	r5, r0
 8015bc8:	e7e3      	b.n	8015b92 <uxr_serialize_CREATE_Payload+0xe6>
 8015bca:	bf00      	nop

08015bcc <uxr_deserialize_GET_INFO_Payload>:
 8015bcc:	b570      	push	{r4, r5, r6, lr}
 8015bce:	2202      	movs	r2, #2
 8015bd0:	4605      	mov	r5, r0
 8015bd2:	460e      	mov	r6, r1
 8015bd4:	f7fa fd74 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015bd8:	2202      	movs	r2, #2
 8015bda:	18b1      	adds	r1, r6, r2
 8015bdc:	4604      	mov	r4, r0
 8015bde:	4628      	mov	r0, r5
 8015be0:	f7fa fd6e 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015be4:	1d31      	adds	r1, r6, #4
 8015be6:	4004      	ands	r4, r0
 8015be8:	4628      	mov	r0, r5
 8015bea:	f7fb fc97 	bl	801151c <ucdr_deserialize_uint32_t>
 8015bee:	b2e4      	uxtb	r4, r4
 8015bf0:	4020      	ands	r0, r4
 8015bf2:	bd70      	pop	{r4, r5, r6, pc}

08015bf4 <uxr_serialize_DELETE_Payload>:
 8015bf4:	b570      	push	{r4, r5, r6, lr}
 8015bf6:	2202      	movs	r2, #2
 8015bf8:	4605      	mov	r5, r0
 8015bfa:	460e      	mov	r6, r1
 8015bfc:	f7fa fcfc 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015c00:	2202      	movs	r2, #2
 8015c02:	4604      	mov	r4, r0
 8015c04:	18b1      	adds	r1, r6, r2
 8015c06:	4628      	mov	r0, r5
 8015c08:	f7fa fcf6 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015c0c:	4020      	ands	r0, r4
 8015c0e:	b2c0      	uxtb	r0, r0
 8015c10:	bd70      	pop	{r4, r5, r6, pc}
 8015c12:	bf00      	nop

08015c14 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c18:	4605      	mov	r5, r0
 8015c1a:	460e      	mov	r6, r1
 8015c1c:	f7fb f94e 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015c20:	1c71      	adds	r1, r6, #1
 8015c22:	4604      	mov	r4, r0
 8015c24:	4628      	mov	r0, r5
 8015c26:	f7fb f949 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015c2a:	2204      	movs	r2, #4
 8015c2c:	18b1      	adds	r1, r6, r2
 8015c2e:	4680      	mov	r8, r0
 8015c30:	4628      	mov	r0, r5
 8015c32:	f7fa fd45 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015c36:	f106 0108 	add.w	r1, r6, #8
 8015c3a:	4607      	mov	r7, r0
 8015c3c:	2202      	movs	r2, #2
 8015c3e:	4628      	mov	r0, r5
 8015c40:	f7fa fd3e 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015c44:	ea04 0308 	and.w	r3, r4, r8
 8015c48:	b2db      	uxtb	r3, r3
 8015c4a:	ea03 0407 	and.w	r4, r3, r7
 8015c4e:	2202      	movs	r2, #2
 8015c50:	4607      	mov	r7, r0
 8015c52:	f106 010a 	add.w	r1, r6, #10
 8015c56:	4628      	mov	r0, r5
 8015c58:	f7fa fd32 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015c5c:	f106 010c 	add.w	r1, r6, #12
 8015c60:	4603      	mov	r3, r0
 8015c62:	4628      	mov	r0, r5
 8015c64:	461d      	mov	r5, r3
 8015c66:	f7fb f8fb 	bl	8010e60 <ucdr_deserialize_bool>
 8015c6a:	403c      	ands	r4, r7
 8015c6c:	4025      	ands	r5, r4
 8015c6e:	4028      	ands	r0, r5
 8015c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c74 <uxr_deserialize_STATUS_Payload>:
 8015c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c78:	2202      	movs	r2, #2
 8015c7a:	4606      	mov	r6, r0
 8015c7c:	460f      	mov	r7, r1
 8015c7e:	f7fa fd1f 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015c82:	2202      	movs	r2, #2
 8015c84:	18b9      	adds	r1, r7, r2
 8015c86:	4605      	mov	r5, r0
 8015c88:	4630      	mov	r0, r6
 8015c8a:	f7fa fd19 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015c8e:	1d39      	adds	r1, r7, #4
 8015c90:	4680      	mov	r8, r0
 8015c92:	4630      	mov	r0, r6
 8015c94:	f7fb f912 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015c98:	1d79      	adds	r1, r7, #5
 8015c9a:	4604      	mov	r4, r0
 8015c9c:	4630      	mov	r0, r6
 8015c9e:	f7fb f90d 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015ca2:	ea05 0508 	and.w	r5, r5, r8
 8015ca6:	402c      	ands	r4, r5
 8015ca8:	4020      	ands	r0, r4
 8015caa:	b2c0      	uxtb	r0, r0
 8015cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015cb0 <uxr_serialize_INFO_Payload>:
 8015cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb4:	2202      	movs	r2, #2
 8015cb6:	460c      	mov	r4, r1
 8015cb8:	4605      	mov	r5, r0
 8015cba:	f7fa fc9d 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015cbe:	2202      	movs	r2, #2
 8015cc0:	18a1      	adds	r1, r4, r2
 8015cc2:	4680      	mov	r8, r0
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	f7fa fc97 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015cca:	7921      	ldrb	r1, [r4, #4]
 8015ccc:	4607      	mov	r7, r0
 8015cce:	4628      	mov	r0, r5
 8015cd0:	f7fb f8de 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015cd4:	7961      	ldrb	r1, [r4, #5]
 8015cd6:	4606      	mov	r6, r0
 8015cd8:	4628      	mov	r0, r5
 8015cda:	f7fb f8d9 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015cde:	ea08 0807 	and.w	r8, r8, r7
 8015ce2:	ea06 0608 	and.w	r6, r6, r8
 8015ce6:	4006      	ands	r6, r0
 8015ce8:	7a21      	ldrb	r1, [r4, #8]
 8015cea:	4628      	mov	r0, r5
 8015cec:	f7fb f8a2 	bl	8010e34 <ucdr_serialize_bool>
 8015cf0:	7a23      	ldrb	r3, [r4, #8]
 8015cf2:	b2f7      	uxtb	r7, r6
 8015cf4:	4606      	mov	r6, r0
 8015cf6:	b96b      	cbnz	r3, 8015d14 <uxr_serialize_INFO_Payload+0x64>
 8015cf8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	f7fb f899 	bl	8010e34 <ucdr_serialize_bool>
 8015d02:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8015d06:	4030      	ands	r0, r6
 8015d08:	b2c6      	uxtb	r6, r0
 8015d0a:	b983      	cbnz	r3, 8015d2e <uxr_serialize_INFO_Payload+0x7e>
 8015d0c:	ea06 0007 	and.w	r0, r6, r7
 8015d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d14:	7b21      	ldrb	r1, [r4, #12]
 8015d16:	4628      	mov	r0, r5
 8015d18:	f7fb f8ba 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015d1c:	b188      	cbz	r0, 8015d42 <uxr_serialize_INFO_Payload+0x92>
 8015d1e:	f104 010c 	add.w	r1, r4, #12
 8015d22:	4628      	mov	r0, r5
 8015d24:	f7ff f9d2 	bl	80150cc <uxr_serialize_ObjectVariant.part.0>
 8015d28:	4030      	ands	r0, r6
 8015d2a:	b2c6      	uxtb	r6, r0
 8015d2c:	e7e4      	b.n	8015cf8 <uxr_serialize_INFO_Payload+0x48>
 8015d2e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015d32:	4628      	mov	r0, r5
 8015d34:	f7ff fdb2 	bl	801589c <uxr_serialize_ActivityInfoVariant>
 8015d38:	4006      	ands	r6, r0
 8015d3a:	ea06 0007 	and.w	r0, r6, r7
 8015d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d42:	4606      	mov	r6, r0
 8015d44:	e7d8      	b.n	8015cf8 <uxr_serialize_INFO_Payload+0x48>
 8015d46:	bf00      	nop

08015d48 <uxr_serialize_READ_DATA_Payload>:
 8015d48:	b570      	push	{r4, r5, r6, lr}
 8015d4a:	2202      	movs	r2, #2
 8015d4c:	4605      	mov	r5, r0
 8015d4e:	460e      	mov	r6, r1
 8015d50:	f7fa fc52 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015d54:	2202      	movs	r2, #2
 8015d56:	18b1      	adds	r1, r6, r2
 8015d58:	4604      	mov	r4, r0
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	f7fa fc4c 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015d60:	1d31      	adds	r1, r6, #4
 8015d62:	4004      	ands	r4, r0
 8015d64:	4628      	mov	r0, r5
 8015d66:	f7ff fe5d 	bl	8015a24 <uxr_serialize_ReadSpecification>
 8015d6a:	b2e4      	uxtb	r4, r4
 8015d6c:	4020      	ands	r0, r4
 8015d6e:	bd70      	pop	{r4, r5, r6, pc}

08015d70 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015d70:	b570      	push	{r4, r5, r6, lr}
 8015d72:	2202      	movs	r2, #2
 8015d74:	4605      	mov	r5, r0
 8015d76:	460e      	mov	r6, r1
 8015d78:	f7fa fc3e 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015d7c:	2202      	movs	r2, #2
 8015d7e:	4604      	mov	r4, r0
 8015d80:	18b1      	adds	r1, r6, r2
 8015d82:	4628      	mov	r0, r5
 8015d84:	f7fa fc38 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015d88:	4020      	ands	r0, r4
 8015d8a:	b2c0      	uxtb	r0, r0
 8015d8c:	bd70      	pop	{r4, r5, r6, pc}
 8015d8e:	bf00      	nop

08015d90 <uxr_serialize_ACKNACK_Payload>:
 8015d90:	b570      	push	{r4, r5, r6, lr}
 8015d92:	460c      	mov	r4, r1
 8015d94:	460e      	mov	r6, r1
 8015d96:	f834 1b02 	ldrh.w	r1, [r4], #2
 8015d9a:	4605      	mov	r5, r0
 8015d9c:	f7fb f8a4 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015da0:	2202      	movs	r2, #2
 8015da2:	4621      	mov	r1, r4
 8015da4:	4604      	mov	r4, r0
 8015da6:	4628      	mov	r0, r5
 8015da8:	f7fa fc26 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015dac:	7931      	ldrb	r1, [r6, #4]
 8015dae:	4004      	ands	r4, r0
 8015db0:	4628      	mov	r0, r5
 8015db2:	f7fb f86d 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015db6:	b2e4      	uxtb	r4, r4
 8015db8:	4020      	ands	r0, r4
 8015dba:	bd70      	pop	{r4, r5, r6, pc}

08015dbc <uxr_deserialize_ACKNACK_Payload>:
 8015dbc:	b570      	push	{r4, r5, r6, lr}
 8015dbe:	4605      	mov	r5, r0
 8015dc0:	460e      	mov	r6, r1
 8015dc2:	f7fb f991 	bl	80110e8 <ucdr_deserialize_uint16_t>
 8015dc6:	2202      	movs	r2, #2
 8015dc8:	18b1      	adds	r1, r6, r2
 8015dca:	4604      	mov	r4, r0
 8015dcc:	4628      	mov	r0, r5
 8015dce:	f7fa fc77 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015dd2:	1d31      	adds	r1, r6, #4
 8015dd4:	4004      	ands	r4, r0
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	f7fb f870 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015ddc:	b2e4      	uxtb	r4, r4
 8015dde:	4020      	ands	r0, r4
 8015de0:	bd70      	pop	{r4, r5, r6, pc}
 8015de2:	bf00      	nop

08015de4 <uxr_serialize_HEARTBEAT_Payload>:
 8015de4:	b570      	push	{r4, r5, r6, lr}
 8015de6:	460d      	mov	r5, r1
 8015de8:	8809      	ldrh	r1, [r1, #0]
 8015dea:	4606      	mov	r6, r0
 8015dec:	f7fb f87c 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015df0:	8869      	ldrh	r1, [r5, #2]
 8015df2:	4604      	mov	r4, r0
 8015df4:	4630      	mov	r0, r6
 8015df6:	f7fb f877 	bl	8010ee8 <ucdr_serialize_uint16_t>
 8015dfa:	7929      	ldrb	r1, [r5, #4]
 8015dfc:	4004      	ands	r4, r0
 8015dfe:	4630      	mov	r0, r6
 8015e00:	f7fb f846 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015e04:	b2e4      	uxtb	r4, r4
 8015e06:	4020      	ands	r0, r4
 8015e08:	bd70      	pop	{r4, r5, r6, pc}
 8015e0a:	bf00      	nop

08015e0c <uxr_deserialize_HEARTBEAT_Payload>:
 8015e0c:	b570      	push	{r4, r5, r6, lr}
 8015e0e:	4605      	mov	r5, r0
 8015e10:	460e      	mov	r6, r1
 8015e12:	f7fb f969 	bl	80110e8 <ucdr_deserialize_uint16_t>
 8015e16:	1cb1      	adds	r1, r6, #2
 8015e18:	4604      	mov	r4, r0
 8015e1a:	4628      	mov	r0, r5
 8015e1c:	f7fb f964 	bl	80110e8 <ucdr_deserialize_uint16_t>
 8015e20:	1d31      	adds	r1, r6, #4
 8015e22:	4004      	ands	r4, r0
 8015e24:	4628      	mov	r0, r5
 8015e26:	f7fb f849 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015e2a:	b2e4      	uxtb	r4, r4
 8015e2c:	4020      	ands	r0, r4
 8015e2e:	bd70      	pop	{r4, r5, r6, pc}

08015e30 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e34:	4605      	mov	r5, r0
 8015e36:	460e      	mov	r6, r1
 8015e38:	f7fb ffb8 	bl	8011dac <ucdr_deserialize_int32_t>
 8015e3c:	1d31      	adds	r1, r6, #4
 8015e3e:	4607      	mov	r7, r0
 8015e40:	4628      	mov	r0, r5
 8015e42:	f7fb fb6b 	bl	801151c <ucdr_deserialize_uint32_t>
 8015e46:	f106 0108 	add.w	r1, r6, #8
 8015e4a:	4680      	mov	r8, r0
 8015e4c:	4628      	mov	r0, r5
 8015e4e:	f7fb ffad 	bl	8011dac <ucdr_deserialize_int32_t>
 8015e52:	f106 010c 	add.w	r1, r6, #12
 8015e56:	4604      	mov	r4, r0
 8015e58:	4628      	mov	r0, r5
 8015e5a:	f7fb fb5f 	bl	801151c <ucdr_deserialize_uint32_t>
 8015e5e:	ea07 0708 	and.w	r7, r7, r8
 8015e62:	403c      	ands	r4, r7
 8015e64:	f106 0110 	add.w	r1, r6, #16
 8015e68:	4004      	ands	r4, r0
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	f7fb ff9e 	bl	8011dac <ucdr_deserialize_int32_t>
 8015e70:	f106 0114 	add.w	r1, r6, #20
 8015e74:	4607      	mov	r7, r0
 8015e76:	4628      	mov	r0, r5
 8015e78:	f7fb fb50 	bl	801151c <ucdr_deserialize_uint32_t>
 8015e7c:	b2e4      	uxtb	r4, r4
 8015e7e:	403c      	ands	r4, r7
 8015e80:	4020      	ands	r0, r4
 8015e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e86:	bf00      	nop

08015e88 <uxr_serialize_SampleIdentity>:
 8015e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e8c:	220c      	movs	r2, #12
 8015e8e:	4604      	mov	r4, r0
 8015e90:	460d      	mov	r5, r1
 8015e92:	f7fa fbb1 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015e96:	2203      	movs	r2, #3
 8015e98:	f105 010c 	add.w	r1, r5, #12
 8015e9c:	4607      	mov	r7, r0
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f7fa fbaa 	bl	80105f8 <ucdr_serialize_array_uint8_t>
 8015ea4:	7be9      	ldrb	r1, [r5, #15]
 8015ea6:	4680      	mov	r8, r0
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f7fa fff1 	bl	8010e90 <ucdr_serialize_uint8_t>
 8015eae:	6929      	ldr	r1, [r5, #16]
 8015eb0:	4606      	mov	r6, r0
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	f7fb fee2 	bl	8011c7c <ucdr_serialize_int32_t>
 8015eb8:	6969      	ldr	r1, [r5, #20]
 8015eba:	4603      	mov	r3, r0
 8015ebc:	4620      	mov	r0, r4
 8015ebe:	ea07 0708 	and.w	r7, r7, r8
 8015ec2:	461c      	mov	r4, r3
 8015ec4:	f7fb f9fa 	bl	80112bc <ucdr_serialize_uint32_t>
 8015ec8:	403e      	ands	r6, r7
 8015eca:	4034      	ands	r4, r6
 8015ecc:	4020      	ands	r0, r4
 8015ece:	b2c0      	uxtb	r0, r0
 8015ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ed4 <uxr_deserialize_SampleIdentity>:
 8015ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ed8:	220c      	movs	r2, #12
 8015eda:	4604      	mov	r4, r0
 8015edc:	460d      	mov	r5, r1
 8015ede:	f7fa fbef 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015ee2:	2203      	movs	r2, #3
 8015ee4:	f105 010c 	add.w	r1, r5, #12
 8015ee8:	4607      	mov	r7, r0
 8015eea:	4620      	mov	r0, r4
 8015eec:	f7fa fbe8 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8015ef0:	f105 010f 	add.w	r1, r5, #15
 8015ef4:	4680      	mov	r8, r0
 8015ef6:	4620      	mov	r0, r4
 8015ef8:	f7fa ffe0 	bl	8010ebc <ucdr_deserialize_uint8_t>
 8015efc:	f105 0110 	add.w	r1, r5, #16
 8015f00:	4606      	mov	r6, r0
 8015f02:	4620      	mov	r0, r4
 8015f04:	f7fb ff52 	bl	8011dac <ucdr_deserialize_int32_t>
 8015f08:	f105 0114 	add.w	r1, r5, #20
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	4620      	mov	r0, r4
 8015f10:	ea07 0708 	and.w	r7, r7, r8
 8015f14:	461c      	mov	r4, r3
 8015f16:	f7fb fb01 	bl	801151c <ucdr_deserialize_uint32_t>
 8015f1a:	403e      	ands	r6, r7
 8015f1c:	4034      	ands	r4, r6
 8015f1e:	4020      	ands	r0, r4
 8015f20:	b2c0      	uxtb	r0, r0
 8015f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f26:	bf00      	nop

08015f28 <nereo_interfaces__msg__CommandVelocity__init>:
 8015f28:	3800      	subs	r0, #0
 8015f2a:	bf18      	it	ne
 8015f2c:	2001      	movne	r0, #1
 8015f2e:	4770      	bx	lr

08015f30 <nereo_interfaces__msg__CommandVelocity__fini>:
 8015f30:	4770      	bx	lr
 8015f32:	bf00      	nop

08015f34 <nereo_interfaces__srv__SetNavigationMode_Request__init>:
 8015f34:	3800      	subs	r0, #0
 8015f36:	bf18      	it	ne
 8015f38:	2001      	movne	r0, #1
 8015f3a:	4770      	bx	lr

08015f3c <nereo_interfaces__srv__SetNavigationMode_Request__fini>:
 8015f3c:	4770      	bx	lr
 8015f3e:	bf00      	nop

08015f40 <nereo_interfaces__srv__SetNavigationMode_Response__init>:
 8015f40:	3800      	subs	r0, #0
 8015f42:	bf18      	it	ne
 8015f44:	2001      	movne	r0, #1
 8015f46:	4770      	bx	lr

08015f48 <nereo_interfaces__srv__SetNavigationMode_Response__fini>:
 8015f48:	4770      	bx	lr
 8015f4a:	bf00      	nop

08015f4c <nereo_interfaces__msg__ThrusterStatuses__init>:
 8015f4c:	3800      	subs	r0, #0
 8015f4e:	bf18      	it	ne
 8015f50:	2001      	movne	r0, #1
 8015f52:	4770      	bx	lr

08015f54 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 8015f54:	4770      	bx	lr
 8015f56:	bf00      	nop

08015f58 <rcl_client_get_rmw_handle>:
 8015f58:	b118      	cbz	r0, 8015f62 <rcl_client_get_rmw_handle+0xa>
 8015f5a:	6800      	ldr	r0, [r0, #0]
 8015f5c:	b108      	cbz	r0, 8015f62 <rcl_client_get_rmw_handle+0xa>
 8015f5e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015f62:	4770      	bx	lr

08015f64 <rcl_send_request>:
 8015f64:	b570      	push	{r4, r5, r6, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	b1e8      	cbz	r0, 8015fa6 <rcl_send_request+0x42>
 8015f6a:	4604      	mov	r4, r0
 8015f6c:	6800      	ldr	r0, [r0, #0]
 8015f6e:	b1d0      	cbz	r0, 8015fa6 <rcl_send_request+0x42>
 8015f70:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015f74:	b1bb      	cbz	r3, 8015fa6 <rcl_send_request+0x42>
 8015f76:	460e      	mov	r6, r1
 8015f78:	b1d1      	cbz	r1, 8015fb0 <rcl_send_request+0x4c>
 8015f7a:	4615      	mov	r5, r2
 8015f7c:	b1c2      	cbz	r2, 8015fb0 <rcl_send_request+0x4c>
 8015f7e:	2105      	movs	r1, #5
 8015f80:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015f84:	f006 f948 	bl	801c218 <__atomic_load_8>
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	e9c5 0100 	strd	r0, r1, [r5]
 8015f8e:	462a      	mov	r2, r5
 8015f90:	4631      	mov	r1, r6
 8015f92:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015f96:	f007 faf3 	bl	801d580 <rmw_send_request>
 8015f9a:	4606      	mov	r6, r0
 8015f9c:	b160      	cbz	r0, 8015fb8 <rcl_send_request+0x54>
 8015f9e:	2601      	movs	r6, #1
 8015fa0:	4630      	mov	r0, r6
 8015fa2:	b002      	add	sp, #8
 8015fa4:	bd70      	pop	{r4, r5, r6, pc}
 8015fa6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8015faa:	4630      	mov	r0, r6
 8015fac:	b002      	add	sp, #8
 8015fae:	bd70      	pop	{r4, r5, r6, pc}
 8015fb0:	260b      	movs	r6, #11
 8015fb2:	4630      	mov	r0, r6
 8015fb4:	b002      	add	sp, #8
 8015fb6:	bd70      	pop	{r4, r5, r6, pc}
 8015fb8:	6820      	ldr	r0, [r4, #0]
 8015fba:	2105      	movs	r1, #5
 8015fbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015fc0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015fc4:	9100      	str	r1, [sp, #0]
 8015fc6:	f006 f993 	bl	801c2f0 <__atomic_exchange_8>
 8015fca:	4630      	mov	r0, r6
 8015fcc:	b002      	add	sp, #8
 8015fce:	bd70      	pop	{r4, r5, r6, pc}

08015fd0 <rcl_take_response>:
 8015fd0:	b570      	push	{r4, r5, r6, lr}
 8015fd2:	468e      	mov	lr, r1
 8015fd4:	460c      	mov	r4, r1
 8015fd6:	4616      	mov	r6, r2
 8015fd8:	4605      	mov	r5, r0
 8015fda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015fde:	b08c      	sub	sp, #48	@ 0x30
 8015fe0:	f10d 0c18 	add.w	ip, sp, #24
 8015fe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fe8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015fec:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015ff0:	b35d      	cbz	r5, 801604a <rcl_take_response+0x7a>
 8015ff2:	682b      	ldr	r3, [r5, #0]
 8015ff4:	b34b      	cbz	r3, 801604a <rcl_take_response+0x7a>
 8015ff6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015ffa:	b330      	cbz	r0, 801604a <rcl_take_response+0x7a>
 8015ffc:	b346      	cbz	r6, 8016050 <rcl_take_response+0x80>
 8015ffe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8016058 <rcl_take_response+0x88>
 8016002:	2300      	movs	r3, #0
 8016004:	f88d 3007 	strb.w	r3, [sp, #7]
 8016008:	4632      	mov	r2, r6
 801600a:	f10d 0307 	add.w	r3, sp, #7
 801600e:	a902      	add	r1, sp, #8
 8016010:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016014:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016018:	f007 fbba 	bl	801d790 <rmw_take_response>
 801601c:	4605      	mov	r5, r0
 801601e:	b9c8      	cbnz	r0, 8016054 <rcl_take_response+0x84>
 8016020:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016024:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016028:	2a00      	cmp	r2, #0
 801602a:	bf08      	it	eq
 801602c:	461d      	moveq	r5, r3
 801602e:	f10d 0e18 	add.w	lr, sp, #24
 8016032:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016036:	46a4      	mov	ip, r4
 8016038:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801603c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016040:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016044:	4628      	mov	r0, r5
 8016046:	b00c      	add	sp, #48	@ 0x30
 8016048:	bd70      	pop	{r4, r5, r6, pc}
 801604a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801604e:	e7ee      	b.n	801602e <rcl_take_response+0x5e>
 8016050:	250b      	movs	r5, #11
 8016052:	e7ec      	b.n	801602e <rcl_take_response+0x5e>
 8016054:	2501      	movs	r5, #1
 8016056:	e7ea      	b.n	801602e <rcl_take_response+0x5e>
	...

08016060 <rcl_client_is_valid>:
 8016060:	b130      	cbz	r0, 8016070 <rcl_client_is_valid+0x10>
 8016062:	6800      	ldr	r0, [r0, #0]
 8016064:	b120      	cbz	r0, 8016070 <rcl_client_is_valid+0x10>
 8016066:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801606a:	3800      	subs	r0, #0
 801606c:	bf18      	it	ne
 801606e:	2001      	movne	r0, #1
 8016070:	4770      	bx	lr
 8016072:	bf00      	nop

08016074 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016074:	280b      	cmp	r0, #11
 8016076:	dc0d      	bgt.n	8016094 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016078:	2800      	cmp	r0, #0
 801607a:	db09      	blt.n	8016090 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801607c:	280b      	cmp	r0, #11
 801607e:	d807      	bhi.n	8016090 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016080:	e8df f000 	tbb	[pc, r0]
 8016084:	07060607 	.word	0x07060607
 8016088:	06060606 	.word	0x06060606
 801608c:	07070606 	.word	0x07070606
 8016090:	2001      	movs	r0, #1
 8016092:	4770      	bx	lr
 8016094:	28cb      	cmp	r0, #203	@ 0xcb
 8016096:	bf18      	it	ne
 8016098:	2001      	movne	r0, #1
 801609a:	4770      	bx	lr

0801609c <rcl_get_zero_initialized_context>:
 801609c:	4a03      	ldr	r2, [pc, #12]	@ (80160ac <rcl_get_zero_initialized_context+0x10>)
 801609e:	4603      	mov	r3, r0
 80160a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80160a8:	4618      	mov	r0, r3
 80160aa:	4770      	bx	lr
 80160ac:	08023b98 	.word	0x08023b98

080160b0 <rcl_context_is_valid>:
 80160b0:	b118      	cbz	r0, 80160ba <rcl_context_is_valid+0xa>
 80160b2:	6840      	ldr	r0, [r0, #4]
 80160b4:	3800      	subs	r0, #0
 80160b6:	bf18      	it	ne
 80160b8:	2001      	movne	r0, #1
 80160ba:	4770      	bx	lr

080160bc <__cleanup_context>:
 80160bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160c0:	4606      	mov	r6, r0
 80160c2:	6800      	ldr	r0, [r0, #0]
 80160c4:	2300      	movs	r3, #0
 80160c6:	6073      	str	r3, [r6, #4]
 80160c8:	2800      	cmp	r0, #0
 80160ca:	d049      	beq.n	8016160 <__cleanup_context+0xa4>
 80160cc:	6947      	ldr	r7, [r0, #20]
 80160ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80160d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80160d6:	b137      	cbz	r7, 80160e6 <__cleanup_context+0x2a>
 80160d8:	3014      	adds	r0, #20
 80160da:	f000 f9bb 	bl	8016454 <rcl_init_options_fini>
 80160de:	4607      	mov	r7, r0
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d144      	bne.n	801616e <__cleanup_context+0xb2>
 80160e4:	6830      	ldr	r0, [r6, #0]
 80160e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80160e8:	b143      	cbz	r3, 80160fc <__cleanup_context+0x40>
 80160ea:	3028      	adds	r0, #40	@ 0x28
 80160ec:	f007 f890 	bl	801d210 <rmw_context_fini>
 80160f0:	b118      	cbz	r0, 80160fa <__cleanup_context+0x3e>
 80160f2:	2f00      	cmp	r7, #0
 80160f4:	d03e      	beq.n	8016174 <__cleanup_context+0xb8>
 80160f6:	f7f8 fb3b 	bl	800e770 <rcutils_reset_error>
 80160fa:	6830      	ldr	r0, [r6, #0]
 80160fc:	6a03      	ldr	r3, [r0, #32]
 80160fe:	b1db      	cbz	r3, 8016138 <__cleanup_context+0x7c>
 8016100:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8016104:	2a01      	cmp	r2, #1
 8016106:	f17c 0100 	sbcs.w	r1, ip, #0
 801610a:	db11      	blt.n	8016130 <__cleanup_context+0x74>
 801610c:	2400      	movs	r4, #0
 801610e:	4625      	mov	r5, r4
 8016110:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016114:	4649      	mov	r1, r9
 8016116:	b1b8      	cbz	r0, 8016148 <__cleanup_context+0x8c>
 8016118:	47c0      	blx	r8
 801611a:	6833      	ldr	r3, [r6, #0]
 801611c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8016120:	3401      	adds	r4, #1
 8016122:	f145 0500 	adc.w	r5, r5, #0
 8016126:	4294      	cmp	r4, r2
 8016128:	eb75 010c 	sbcs.w	r1, r5, ip
 801612c:	6a1b      	ldr	r3, [r3, #32]
 801612e:	dbef      	blt.n	8016110 <__cleanup_context+0x54>
 8016130:	4618      	mov	r0, r3
 8016132:	4649      	mov	r1, r9
 8016134:	47c0      	blx	r8
 8016136:	6830      	ldr	r0, [r6, #0]
 8016138:	4649      	mov	r1, r9
 801613a:	47c0      	blx	r8
 801613c:	2300      	movs	r3, #0
 801613e:	e9c6 3300 	strd	r3, r3, [r6]
 8016142:	4638      	mov	r0, r7
 8016144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016148:	3401      	adds	r4, #1
 801614a:	f145 0500 	adc.w	r5, r5, #0
 801614e:	4294      	cmp	r4, r2
 8016150:	eb75 010c 	sbcs.w	r1, r5, ip
 8016154:	dbdc      	blt.n	8016110 <__cleanup_context+0x54>
 8016156:	4618      	mov	r0, r3
 8016158:	4649      	mov	r1, r9
 801615a:	47c0      	blx	r8
 801615c:	6830      	ldr	r0, [r6, #0]
 801615e:	e7eb      	b.n	8016138 <__cleanup_context+0x7c>
 8016160:	4607      	mov	r7, r0
 8016162:	2300      	movs	r3, #0
 8016164:	e9c6 3300 	strd	r3, r3, [r6]
 8016168:	4638      	mov	r0, r7
 801616a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801616e:	f7f8 faff 	bl	800e770 <rcutils_reset_error>
 8016172:	e7b7      	b.n	80160e4 <__cleanup_context+0x28>
 8016174:	f7ff ff7e 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 8016178:	4607      	mov	r7, r0
 801617a:	e7bc      	b.n	80160f6 <__cleanup_context+0x3a>

0801617c <rcl_init>:
 801617c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016180:	1e05      	subs	r5, r0, #0
 8016182:	b09e      	sub	sp, #120	@ 0x78
 8016184:	460e      	mov	r6, r1
 8016186:	4690      	mov	r8, r2
 8016188:	461f      	mov	r7, r3
 801618a:	f340 809c 	ble.w	80162c6 <rcl_init+0x14a>
 801618e:	2900      	cmp	r1, #0
 8016190:	f000 809c 	beq.w	80162cc <rcl_init+0x150>
 8016194:	f1a1 0e04 	sub.w	lr, r1, #4
 8016198:	f04f 0c00 	mov.w	ip, #0
 801619c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80161a0:	f10c 0c01 	add.w	ip, ip, #1
 80161a4:	2c00      	cmp	r4, #0
 80161a6:	f000 8091 	beq.w	80162cc <rcl_init+0x150>
 80161aa:	4565      	cmp	r5, ip
 80161ac:	d1f6      	bne.n	801619c <rcl_init+0x20>
 80161ae:	f1b8 0f00 	cmp.w	r8, #0
 80161b2:	f000 808b 	beq.w	80162cc <rcl_init+0x150>
 80161b6:	f8d8 4000 	ldr.w	r4, [r8]
 80161ba:	2c00      	cmp	r4, #0
 80161bc:	f000 8086 	beq.w	80162cc <rcl_init+0x150>
 80161c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161c2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80161c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80161ca:	6823      	ldr	r3, [r4, #0]
 80161cc:	f8cc 3000 	str.w	r3, [ip]
 80161d0:	a819      	add	r0, sp, #100	@ 0x64
 80161d2:	f7f8 faa9 	bl	800e728 <rcutils_allocator_is_valid>
 80161d6:	2800      	cmp	r0, #0
 80161d8:	d078      	beq.n	80162cc <rcl_init+0x150>
 80161da:	2f00      	cmp	r7, #0
 80161dc:	d076      	beq.n	80162cc <rcl_init+0x150>
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d178      	bne.n	80162d6 <rcl_init+0x15a>
 80161e4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80161e8:	2178      	movs	r1, #120	@ 0x78
 80161ea:	2001      	movs	r0, #1
 80161ec:	4798      	blx	r3
 80161ee:	4604      	mov	r4, r0
 80161f0:	6038      	str	r0, [r7, #0]
 80161f2:	2800      	cmp	r0, #0
 80161f4:	f000 80b6 	beq.w	8016364 <rcl_init+0x1e8>
 80161f8:	a802      	add	r0, sp, #8
 80161fa:	f006 fb5d 	bl	801c8b8 <rmw_get_zero_initialized_context>
 80161fe:	a902      	add	r1, sp, #8
 8016200:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016204:	2250      	movs	r2, #80	@ 0x50
 8016206:	ac19      	add	r4, sp, #100	@ 0x64
 8016208:	f00b fc13 	bl	8021a32 <memcpy>
 801620c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801620e:	f8d7 e000 	ldr.w	lr, [r7]
 8016212:	46f4      	mov	ip, lr
 8016214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016218:	6823      	ldr	r3, [r4, #0]
 801621a:	f8cc 3000 	str.w	r3, [ip]
 801621e:	f10e 0114 	add.w	r1, lr, #20
 8016222:	4640      	mov	r0, r8
 8016224:	f000 f940 	bl	80164a8 <rcl_init_options_copy>
 8016228:	4604      	mov	r4, r0
 801622a:	2800      	cmp	r0, #0
 801622c:	d144      	bne.n	80162b8 <rcl_init+0x13c>
 801622e:	f8d7 9000 	ldr.w	r9, [r7]
 8016232:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8016236:	f8c9 0020 	str.w	r0, [r9, #32]
 801623a:	f8c9 5018 	str.w	r5, [r9, #24]
 801623e:	f8c9 801c 	str.w	r8, [r9, #28]
 8016242:	2d00      	cmp	r5, #0
 8016244:	d04e      	beq.n	80162e4 <rcl_init+0x168>
 8016246:	2e00      	cmp	r6, #0
 8016248:	d04c      	beq.n	80162e4 <rcl_init+0x168>
 801624a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801624e:	2104      	movs	r1, #4
 8016250:	4628      	mov	r0, r5
 8016252:	4798      	blx	r3
 8016254:	f8c9 0020 	str.w	r0, [r9, #32]
 8016258:	f8d7 9000 	ldr.w	r9, [r7]
 801625c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8016260:	46ca      	mov	sl, r9
 8016262:	b343      	cbz	r3, 80162b6 <rcl_init+0x13a>
 8016264:	2d01      	cmp	r5, #1
 8016266:	f178 0300 	sbcs.w	r3, r8, #0
 801626a:	db3b      	blt.n	80162e4 <rcl_init+0x168>
 801626c:	2400      	movs	r4, #0
 801626e:	3e04      	subs	r6, #4
 8016270:	46a1      	mov	r9, r4
 8016272:	e00b      	b.n	801628c <rcl_init+0x110>
 8016274:	6831      	ldr	r1, [r6, #0]
 8016276:	f00b fbdc 	bl	8021a32 <memcpy>
 801627a:	3401      	adds	r4, #1
 801627c:	f149 0900 	adc.w	r9, r9, #0
 8016280:	45c8      	cmp	r8, r9
 8016282:	bf08      	it	eq
 8016284:	42a5      	cmpeq	r5, r4
 8016286:	d02b      	beq.n	80162e0 <rcl_init+0x164>
 8016288:	f8d7 a000 	ldr.w	sl, [r7]
 801628c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016290:	f7e9 ffb6 	bl	8000200 <strlen>
 8016294:	1c42      	adds	r2, r0, #1
 8016296:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016298:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801629a:	f8da a020 	ldr.w	sl, [sl, #32]
 801629e:	9201      	str	r2, [sp, #4]
 80162a0:	4610      	mov	r0, r2
 80162a2:	4798      	blx	r3
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80162aa:	6a1b      	ldr	r3, [r3, #32]
 80162ac:	9a01      	ldr	r2, [sp, #4]
 80162ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80162b2:	2800      	cmp	r0, #0
 80162b4:	d1de      	bne.n	8016274 <rcl_init+0xf8>
 80162b6:	240a      	movs	r4, #10
 80162b8:	4638      	mov	r0, r7
 80162ba:	f7ff feff 	bl	80160bc <__cleanup_context>
 80162be:	4620      	mov	r0, r4
 80162c0:	b01e      	add	sp, #120	@ 0x78
 80162c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162c6:	2900      	cmp	r1, #0
 80162c8:	f43f af71 	beq.w	80161ae <rcl_init+0x32>
 80162cc:	240b      	movs	r4, #11
 80162ce:	4620      	mov	r0, r4
 80162d0:	b01e      	add	sp, #120	@ 0x78
 80162d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162d6:	2464      	movs	r4, #100	@ 0x64
 80162d8:	4620      	mov	r0, r4
 80162da:	b01e      	add	sp, #120	@ 0x78
 80162dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e0:	f8d7 9000 	ldr.w	r9, [r7]
 80162e4:	4926      	ldr	r1, [pc, #152]	@ (8016380 <rcl_init+0x204>)
 80162e6:	680b      	ldr	r3, [r1, #0]
 80162e8:	3301      	adds	r3, #1
 80162ea:	d036      	beq.n	801635a <rcl_init+0x1de>
 80162ec:	600b      	str	r3, [r1, #0]
 80162ee:	461a      	mov	r2, r3
 80162f0:	2400      	movs	r4, #0
 80162f2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80162f6:	607b      	str	r3, [r7, #4]
 80162f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80162fa:	3301      	adds	r3, #1
 80162fc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8016300:	d034      	beq.n	801636c <rcl_init+0x1f0>
 8016302:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8016306:	b93b      	cbnz	r3, 8016318 <rcl_init+0x19c>
 8016308:	3030      	adds	r0, #48	@ 0x30
 801630a:	f000 f939 	bl	8016580 <rcl_get_localhost_only>
 801630e:	4604      	mov	r4, r0
 8016310:	2800      	cmp	r0, #0
 8016312:	d1d1      	bne.n	80162b8 <rcl_init+0x13c>
 8016314:	683b      	ldr	r3, [r7, #0]
 8016316:	6958      	ldr	r0, [r3, #20]
 8016318:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801631a:	aa18      	add	r2, sp, #96	@ 0x60
 801631c:	a917      	add	r1, sp, #92	@ 0x5c
 801631e:	f001 f8f3 	bl	8017508 <rcl_validate_enclave_name>
 8016322:	4604      	mov	r4, r0
 8016324:	2800      	cmp	r0, #0
 8016326:	d1c7      	bne.n	80162b8 <rcl_init+0x13c>
 8016328:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801632a:	b9eb      	cbnz	r3, 8016368 <rcl_init+0x1ec>
 801632c:	6839      	ldr	r1, [r7, #0]
 801632e:	694b      	ldr	r3, [r1, #20]
 8016330:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8016332:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8016336:	f000 fc3d 	bl	8016bb4 <rcl_get_security_options_from_environment>
 801633a:	4604      	mov	r4, r0
 801633c:	2800      	cmp	r0, #0
 801633e:	d1bb      	bne.n	80162b8 <rcl_init+0x13c>
 8016340:	6839      	ldr	r1, [r7, #0]
 8016342:	6948      	ldr	r0, [r1, #20]
 8016344:	3128      	adds	r1, #40	@ 0x28
 8016346:	3018      	adds	r0, #24
 8016348:	f006 fe2c 	bl	801cfa4 <rmw_init>
 801634c:	4604      	mov	r4, r0
 801634e:	2800      	cmp	r0, #0
 8016350:	d0bd      	beq.n	80162ce <rcl_init+0x152>
 8016352:	f7ff fe8f 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 8016356:	4604      	mov	r4, r0
 8016358:	e7ae      	b.n	80162b8 <rcl_init+0x13c>
 801635a:	2201      	movs	r2, #1
 801635c:	461c      	mov	r4, r3
 801635e:	600a      	str	r2, [r1, #0]
 8016360:	4613      	mov	r3, r2
 8016362:	e7c6      	b.n	80162f2 <rcl_init+0x176>
 8016364:	240a      	movs	r4, #10
 8016366:	e7b2      	b.n	80162ce <rcl_init+0x152>
 8016368:	2401      	movs	r4, #1
 801636a:	e7a5      	b.n	80162b8 <rcl_init+0x13c>
 801636c:	3024      	adds	r0, #36	@ 0x24
 801636e:	f009 fbcf 	bl	801fb10 <rcl_get_default_domain_id>
 8016372:	4604      	mov	r4, r0
 8016374:	2800      	cmp	r0, #0
 8016376:	d19f      	bne.n	80162b8 <rcl_init+0x13c>
 8016378:	683b      	ldr	r3, [r7, #0]
 801637a:	6958      	ldr	r0, [r3, #20]
 801637c:	e7c1      	b.n	8016302 <rcl_init+0x186>
 801637e:	bf00      	nop
 8016380:	20016d54 	.word	0x20016d54

08016384 <rcl_get_zero_initialized_init_options>:
 8016384:	2000      	movs	r0, #0
 8016386:	4770      	bx	lr

08016388 <rcl_init_options_init>:
 8016388:	b084      	sub	sp, #16
 801638a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801638c:	b097      	sub	sp, #92	@ 0x5c
 801638e:	ae1d      	add	r6, sp, #116	@ 0x74
 8016390:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8016394:	2800      	cmp	r0, #0
 8016396:	d058      	beq.n	801644a <rcl_init_options_init+0xc2>
 8016398:	6803      	ldr	r3, [r0, #0]
 801639a:	4605      	mov	r5, r0
 801639c:	b133      	cbz	r3, 80163ac <rcl_init_options_init+0x24>
 801639e:	2464      	movs	r4, #100	@ 0x64
 80163a0:	4620      	mov	r0, r4
 80163a2:	b017      	add	sp, #92	@ 0x5c
 80163a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80163a8:	b004      	add	sp, #16
 80163aa:	4770      	bx	lr
 80163ac:	4630      	mov	r0, r6
 80163ae:	f7f8 f9bb 	bl	800e728 <rcutils_allocator_is_valid>
 80163b2:	2800      	cmp	r0, #0
 80163b4:	d049      	beq.n	801644a <rcl_init_options_init+0xc2>
 80163b6:	46b4      	mov	ip, r6
 80163b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80163bc:	ac11      	add	r4, sp, #68	@ 0x44
 80163be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163c0:	f8dc 3000 	ldr.w	r3, [ip]
 80163c4:	6023      	str	r3, [r4, #0]
 80163c6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80163c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80163ca:	2050      	movs	r0, #80	@ 0x50
 80163cc:	4798      	blx	r3
 80163ce:	4604      	mov	r4, r0
 80163d0:	6028      	str	r0, [r5, #0]
 80163d2:	2800      	cmp	r0, #0
 80163d4:	d03b      	beq.n	801644e <rcl_init_options_init+0xc6>
 80163d6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80163da:	4686      	mov	lr, r0
 80163dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80163e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80163e4:	f8dc 3000 	ldr.w	r3, [ip]
 80163e8:	f8ce 3000 	str.w	r3, [lr]
 80163ec:	a802      	add	r0, sp, #8
 80163ee:	f006 fa73 	bl	801c8d8 <rmw_get_zero_initialized_init_options>
 80163f2:	f10d 0e08 	add.w	lr, sp, #8
 80163f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163fa:	f104 0c18 	add.w	ip, r4, #24
 80163fe:	682f      	ldr	r7, [r5, #0]
 8016400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016404:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016408:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801640c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016410:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016414:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016418:	ac20      	add	r4, sp, #128	@ 0x80
 801641a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801641e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016422:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016426:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801642a:	f107 0018 	add.w	r0, r7, #24
 801642e:	f006 fcc1 	bl	801cdb4 <rmw_init_options_init>
 8016432:	4604      	mov	r4, r0
 8016434:	2800      	cmp	r0, #0
 8016436:	d0b3      	beq.n	80163a0 <rcl_init_options_init+0x18>
 8016438:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801643a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801643c:	6828      	ldr	r0, [r5, #0]
 801643e:	4798      	blx	r3
 8016440:	4620      	mov	r0, r4
 8016442:	f7ff fe17 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 8016446:	4604      	mov	r4, r0
 8016448:	e7aa      	b.n	80163a0 <rcl_init_options_init+0x18>
 801644a:	240b      	movs	r4, #11
 801644c:	e7a8      	b.n	80163a0 <rcl_init_options_init+0x18>
 801644e:	240a      	movs	r4, #10
 8016450:	e7a6      	b.n	80163a0 <rcl_init_options_init+0x18>
 8016452:	bf00      	nop

08016454 <rcl_init_options_fini>:
 8016454:	b530      	push	{r4, r5, lr}
 8016456:	b087      	sub	sp, #28
 8016458:	b1f0      	cbz	r0, 8016498 <rcl_init_options_fini+0x44>
 801645a:	6803      	ldr	r3, [r0, #0]
 801645c:	4604      	mov	r4, r0
 801645e:	b1db      	cbz	r3, 8016498 <rcl_init_options_fini+0x44>
 8016460:	469c      	mov	ip, r3
 8016462:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016466:	f10d 0e04 	add.w	lr, sp, #4
 801646a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801646e:	f8dc 3000 	ldr.w	r3, [ip]
 8016472:	f8ce 3000 	str.w	r3, [lr]
 8016476:	a801      	add	r0, sp, #4
 8016478:	f7f8 f956 	bl	800e728 <rcutils_allocator_is_valid>
 801647c:	b160      	cbz	r0, 8016498 <rcl_init_options_fini+0x44>
 801647e:	6820      	ldr	r0, [r4, #0]
 8016480:	3018      	adds	r0, #24
 8016482:	f006 fd47 	bl	801cf14 <rmw_init_options_fini>
 8016486:	4605      	mov	r5, r0
 8016488:	b950      	cbnz	r0, 80164a0 <rcl_init_options_fini+0x4c>
 801648a:	6820      	ldr	r0, [r4, #0]
 801648c:	9b02      	ldr	r3, [sp, #8]
 801648e:	9905      	ldr	r1, [sp, #20]
 8016490:	4798      	blx	r3
 8016492:	4628      	mov	r0, r5
 8016494:	b007      	add	sp, #28
 8016496:	bd30      	pop	{r4, r5, pc}
 8016498:	250b      	movs	r5, #11
 801649a:	4628      	mov	r0, r5
 801649c:	b007      	add	sp, #28
 801649e:	bd30      	pop	{r4, r5, pc}
 80164a0:	f7ff fde8 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 80164a4:	4605      	mov	r5, r0
 80164a6:	e7f8      	b.n	801649a <rcl_init_options_fini+0x46>

080164a8 <rcl_init_options_copy>:
 80164a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164ac:	b094      	sub	sp, #80	@ 0x50
 80164ae:	2800      	cmp	r0, #0
 80164b0:	d058      	beq.n	8016564 <rcl_init_options_copy+0xbc>
 80164b2:	4604      	mov	r4, r0
 80164b4:	6800      	ldr	r0, [r0, #0]
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d054      	beq.n	8016564 <rcl_init_options_copy+0xbc>
 80164ba:	460e      	mov	r6, r1
 80164bc:	f7f8 f934 	bl	800e728 <rcutils_allocator_is_valid>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d04f      	beq.n	8016564 <rcl_init_options_copy+0xbc>
 80164c4:	2e00      	cmp	r6, #0
 80164c6:	d04d      	beq.n	8016564 <rcl_init_options_copy+0xbc>
 80164c8:	6833      	ldr	r3, [r6, #0]
 80164ca:	b123      	cbz	r3, 80164d6 <rcl_init_options_copy+0x2e>
 80164cc:	2464      	movs	r4, #100	@ 0x64
 80164ce:	4620      	mov	r0, r4
 80164d0:	b014      	add	sp, #80	@ 0x50
 80164d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164d6:	6827      	ldr	r7, [r4, #0]
 80164d8:	46bc      	mov	ip, r7
 80164da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164de:	ad0f      	add	r5, sp, #60	@ 0x3c
 80164e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80164e2:	f8dc 3000 	ldr.w	r3, [ip]
 80164e6:	f8d7 8000 	ldr.w	r8, [r7]
 80164ea:	602b      	str	r3, [r5, #0]
 80164ec:	4619      	mov	r1, r3
 80164ee:	2050      	movs	r0, #80	@ 0x50
 80164f0:	47c0      	blx	r8
 80164f2:	4605      	mov	r5, r0
 80164f4:	6030      	str	r0, [r6, #0]
 80164f6:	b3d0      	cbz	r0, 801656e <rcl_init_options_copy+0xc6>
 80164f8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80164fc:	4686      	mov	lr, r0
 80164fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016502:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016506:	f8dc 3000 	ldr.w	r3, [ip]
 801650a:	f8ce 3000 	str.w	r3, [lr]
 801650e:	4668      	mov	r0, sp
 8016510:	f006 f9e2 	bl	801c8d8 <rmw_get_zero_initialized_init_options>
 8016514:	46ee      	mov	lr, sp
 8016516:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801651a:	f105 0c18 	add.w	ip, r5, #24
 801651e:	6824      	ldr	r4, [r4, #0]
 8016520:	6835      	ldr	r5, [r6, #0]
 8016522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016526:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801652a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801652e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016536:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801653a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801653e:	f104 0018 	add.w	r0, r4, #24
 8016542:	f105 0118 	add.w	r1, r5, #24
 8016546:	f006 fc9d 	bl	801ce84 <rmw_init_options_copy>
 801654a:	4604      	mov	r4, r0
 801654c:	2800      	cmp	r0, #0
 801654e:	d0be      	beq.n	80164ce <rcl_init_options_copy+0x26>
 8016550:	f7f8 f8f8 	bl	800e744 <rcutils_get_error_string>
 8016554:	f7f8 f90c 	bl	800e770 <rcutils_reset_error>
 8016558:	4630      	mov	r0, r6
 801655a:	f7ff ff7b 	bl	8016454 <rcl_init_options_fini>
 801655e:	b140      	cbz	r0, 8016572 <rcl_init_options_copy+0xca>
 8016560:	4604      	mov	r4, r0
 8016562:	e7b4      	b.n	80164ce <rcl_init_options_copy+0x26>
 8016564:	240b      	movs	r4, #11
 8016566:	4620      	mov	r0, r4
 8016568:	b014      	add	sp, #80	@ 0x50
 801656a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801656e:	240a      	movs	r4, #10
 8016570:	e7ad      	b.n	80164ce <rcl_init_options_copy+0x26>
 8016572:	4620      	mov	r0, r4
 8016574:	b014      	add	sp, #80	@ 0x50
 8016576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801657a:	f7ff bd7b 	b.w	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 801657e:	bf00      	nop

08016580 <rcl_get_localhost_only>:
 8016580:	b510      	push	{r4, lr}
 8016582:	b082      	sub	sp, #8
 8016584:	2300      	movs	r3, #0
 8016586:	9301      	str	r3, [sp, #4]
 8016588:	b1b8      	cbz	r0, 80165ba <rcl_get_localhost_only+0x3a>
 801658a:	4604      	mov	r4, r0
 801658c:	a901      	add	r1, sp, #4
 801658e:	480c      	ldr	r0, [pc, #48]	@ (80165c0 <rcl_get_localhost_only+0x40>)
 8016590:	f005 fee6 	bl	801c360 <rcutils_get_env>
 8016594:	b110      	cbz	r0, 801659c <rcl_get_localhost_only+0x1c>
 8016596:	2001      	movs	r0, #1
 8016598:	b002      	add	sp, #8
 801659a:	bd10      	pop	{r4, pc}
 801659c:	9b01      	ldr	r3, [sp, #4]
 801659e:	b113      	cbz	r3, 80165a6 <rcl_get_localhost_only+0x26>
 80165a0:	781a      	ldrb	r2, [r3, #0]
 80165a2:	2a31      	cmp	r2, #49	@ 0x31
 80165a4:	d004      	beq.n	80165b0 <rcl_get_localhost_only+0x30>
 80165a6:	2302      	movs	r3, #2
 80165a8:	2000      	movs	r0, #0
 80165aa:	7023      	strb	r3, [r4, #0]
 80165ac:	b002      	add	sp, #8
 80165ae:	bd10      	pop	{r4, pc}
 80165b0:	785b      	ldrb	r3, [r3, #1]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d1f7      	bne.n	80165a6 <rcl_get_localhost_only+0x26>
 80165b6:	2301      	movs	r3, #1
 80165b8:	e7f6      	b.n	80165a8 <rcl_get_localhost_only+0x28>
 80165ba:	200b      	movs	r0, #11
 80165bc:	b002      	add	sp, #8
 80165be:	bd10      	pop	{r4, pc}
 80165c0:	08023ba0 	.word	0x08023ba0

080165c4 <rcl_get_zero_initialized_node>:
 80165c4:	4a03      	ldr	r2, [pc, #12]	@ (80165d4 <rcl_get_zero_initialized_node+0x10>)
 80165c6:	4603      	mov	r3, r0
 80165c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80165d0:	4618      	mov	r0, r3
 80165d2:	4770      	bx	lr
 80165d4:	08023bc4 	.word	0x08023bc4

080165d8 <rcl_node_init>:
 80165d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165dc:	b0a9      	sub	sp, #164	@ 0xa4
 80165de:	4604      	mov	r4, r0
 80165e0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80165e4:	a823      	add	r0, sp, #140	@ 0x8c
 80165e6:	460e      	mov	r6, r1
 80165e8:	4615      	mov	r5, r2
 80165ea:	461f      	mov	r7, r3
 80165ec:	f009 fcb8 	bl	801ff60 <rcl_guard_condition_get_default_options>
 80165f0:	f1b8 0f00 	cmp.w	r8, #0
 80165f4:	f000 80e6 	beq.w	80167c4 <rcl_node_init+0x1ec>
 80165f8:	4640      	mov	r0, r8
 80165fa:	f7f8 f895 	bl	800e728 <rcutils_allocator_is_valid>
 80165fe:	2800      	cmp	r0, #0
 8016600:	f000 80e0 	beq.w	80167c4 <rcl_node_init+0x1ec>
 8016604:	2e00      	cmp	r6, #0
 8016606:	f000 80dd 	beq.w	80167c4 <rcl_node_init+0x1ec>
 801660a:	2d00      	cmp	r5, #0
 801660c:	f000 80da 	beq.w	80167c4 <rcl_node_init+0x1ec>
 8016610:	2c00      	cmp	r4, #0
 8016612:	f000 80d7 	beq.w	80167c4 <rcl_node_init+0x1ec>
 8016616:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801661a:	f1b9 0f00 	cmp.w	r9, #0
 801661e:	f040 80fd 	bne.w	801681c <rcl_node_init+0x244>
 8016622:	2f00      	cmp	r7, #0
 8016624:	f000 80ce 	beq.w	80167c4 <rcl_node_init+0x1ec>
 8016628:	4638      	mov	r0, r7
 801662a:	f7ff fd41 	bl	80160b0 <rcl_context_is_valid>
 801662e:	4682      	mov	sl, r0
 8016630:	2800      	cmp	r0, #0
 8016632:	f000 80cd 	beq.w	80167d0 <rcl_node_init+0x1f8>
 8016636:	464a      	mov	r2, r9
 8016638:	a922      	add	r1, sp, #136	@ 0x88
 801663a:	4630      	mov	r0, r6
 801663c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8016640:	f006 faec 	bl	801cc1c <rmw_validate_node_name>
 8016644:	4681      	mov	r9, r0
 8016646:	2800      	cmp	r0, #0
 8016648:	f040 80be 	bne.w	80167c8 <rcl_node_init+0x1f0>
 801664c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801664e:	2800      	cmp	r0, #0
 8016650:	f040 80f0 	bne.w	8016834 <rcl_node_init+0x25c>
 8016654:	4628      	mov	r0, r5
 8016656:	f7e9 fdd3 	bl	8000200 <strlen>
 801665a:	2800      	cmp	r0, #0
 801665c:	f040 80bb 	bne.w	80167d6 <rcl_node_init+0x1fe>
 8016660:	4d7c      	ldr	r5, [pc, #496]	@ (8016854 <rcl_node_init+0x27c>)
 8016662:	a922      	add	r1, sp, #136	@ 0x88
 8016664:	2200      	movs	r2, #0
 8016666:	4628      	mov	r0, r5
 8016668:	f006 faba 	bl	801cbe0 <rmw_validate_namespace>
 801666c:	4681      	mov	r9, r0
 801666e:	2800      	cmp	r0, #0
 8016670:	f040 80aa 	bne.w	80167c8 <rcl_node_init+0x1f0>
 8016674:	4682      	mov	sl, r0
 8016676:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8016678:	2800      	cmp	r0, #0
 801667a:	f040 80e0 	bne.w	801683e <rcl_node_init+0x266>
 801667e:	f8d8 3000 	ldr.w	r3, [r8]
 8016682:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016686:	2078      	movs	r0, #120	@ 0x78
 8016688:	4798      	blx	r3
 801668a:	4681      	mov	r9, r0
 801668c:	6060      	str	r0, [r4, #4]
 801668e:	2800      	cmp	r0, #0
 8016690:	f000 80ca 	beq.w	8016828 <rcl_node_init+0x250>
 8016694:	2200      	movs	r2, #0
 8016696:	2300      	movs	r3, #0
 8016698:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 801669c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80166a0:	a808      	add	r0, sp, #32
 80166a2:	f000 f907 	bl	80168b4 <rcl_node_get_default_options>
 80166a6:	a908      	add	r1, sp, #32
 80166a8:	4648      	mov	r0, r9
 80166aa:	2268      	movs	r2, #104	@ 0x68
 80166ac:	f00b f9c1 	bl	8021a32 <memcpy>
 80166b0:	6861      	ldr	r1, [r4, #4]
 80166b2:	6027      	str	r7, [r4, #0]
 80166b4:	4640      	mov	r0, r8
 80166b6:	f000 f90b 	bl	80168d0 <rcl_node_options_copy>
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d158      	bne.n	8016770 <rcl_node_init+0x198>
 80166be:	4628      	mov	r0, r5
 80166c0:	f7e9 fd9e 	bl	8000200 <strlen>
 80166c4:	4428      	add	r0, r5
 80166c6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80166ca:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80166ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80166d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80166d4:	9300      	str	r3, [sp, #0]
 80166d6:	bf0c      	ite	eq
 80166d8:	4b5f      	ldreq	r3, [pc, #380]	@ (8016858 <rcl_node_init+0x280>)
 80166da:	4b60      	ldrne	r3, [pc, #384]	@ (801685c <rcl_node_init+0x284>)
 80166dc:	9302      	str	r3, [sp, #8]
 80166de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80166e2:	9301      	str	r3, [sp, #4]
 80166e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80166e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80166ec:	f005 fe60 	bl	801c3b0 <rcutils_format_string_limit>
 80166f0:	6823      	ldr	r3, [r4, #0]
 80166f2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80166f6:	6818      	ldr	r0, [r3, #0]
 80166f8:	4631      	mov	r1, r6
 80166fa:	3028      	adds	r0, #40	@ 0x28
 80166fc:	462a      	mov	r2, r5
 80166fe:	6866      	ldr	r6, [r4, #4]
 8016700:	f006 fea4 	bl	801d44c <rmw_create_node>
 8016704:	6863      	ldr	r3, [r4, #4]
 8016706:	66b0      	str	r0, [r6, #104]	@ 0x68
 8016708:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801670a:	2800      	cmp	r0, #0
 801670c:	d032      	beq.n	8016774 <rcl_node_init+0x19c>
 801670e:	f006 ff31 	bl	801d574 <rmw_node_get_graph_guard_condition>
 8016712:	4681      	mov	r9, r0
 8016714:	b360      	cbz	r0, 8016770 <rcl_node_init+0x198>
 8016716:	f8d8 3000 	ldr.w	r3, [r8]
 801671a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801671e:	6866      	ldr	r6, [r4, #4]
 8016720:	2008      	movs	r0, #8
 8016722:	4798      	blx	r3
 8016724:	6863      	ldr	r3, [r4, #4]
 8016726:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8016728:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801672c:	f1bb 0f00 	cmp.w	fp, #0
 8016730:	d020      	beq.n	8016774 <rcl_node_init+0x19c>
 8016732:	a806      	add	r0, sp, #24
 8016734:	f009 fb84 	bl	801fe40 <rcl_get_zero_initialized_guard_condition>
 8016738:	a806      	add	r0, sp, #24
 801673a:	c803      	ldmia	r0, {r0, r1}
 801673c:	6863      	ldr	r3, [r4, #4]
 801673e:	46c4      	mov	ip, r8
 8016740:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8016744:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016748:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801674c:	ae23      	add	r6, sp, #140	@ 0x8c
 801674e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016750:	f8dc 3000 	ldr.w	r3, [ip]
 8016754:	6033      	str	r3, [r6, #0]
 8016756:	ab28      	add	r3, sp, #160	@ 0xa0
 8016758:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801675c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016760:	4649      	mov	r1, r9
 8016762:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016764:	463a      	mov	r2, r7
 8016766:	4670      	mov	r0, lr
 8016768:	f009 fb74 	bl	801fe54 <rcl_guard_condition_init_from_rmw>
 801676c:	4681      	mov	r9, r0
 801676e:	b328      	cbz	r0, 80167bc <rcl_node_init+0x1e4>
 8016770:	6863      	ldr	r3, [r4, #4]
 8016772:	b1f3      	cbz	r3, 80167b2 <rcl_node_init+0x1da>
 8016774:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016776:	b128      	cbz	r0, 8016784 <rcl_node_init+0x1ac>
 8016778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801677c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016780:	4798      	blx	r3
 8016782:	6863      	ldr	r3, [r4, #4]
 8016784:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8016786:	b110      	cbz	r0, 801678e <rcl_node_init+0x1b6>
 8016788:	f006 fe78 	bl	801d47c <rmw_destroy_node>
 801678c:	6863      	ldr	r3, [r4, #4]
 801678e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8016790:	b148      	cbz	r0, 80167a6 <rcl_node_init+0x1ce>
 8016792:	f009 fbbf 	bl	801ff14 <rcl_guard_condition_fini>
 8016796:	6863      	ldr	r3, [r4, #4]
 8016798:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801679c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801679e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80167a2:	4798      	blx	r3
 80167a4:	6863      	ldr	r3, [r4, #4]
 80167a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80167aa:	4618      	mov	r0, r3
 80167ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80167b0:	4798      	blx	r3
 80167b2:	2300      	movs	r3, #0
 80167b4:	e9c4 3300 	strd	r3, r3, [r4]
 80167b8:	f04f 0901 	mov.w	r9, #1
 80167bc:	f1ba 0f00 	cmp.w	sl, #0
 80167c0:	d125      	bne.n	801680e <rcl_node_init+0x236>
 80167c2:	e001      	b.n	80167c8 <rcl_node_init+0x1f0>
 80167c4:	f04f 090b 	mov.w	r9, #11
 80167c8:	4648      	mov	r0, r9
 80167ca:	b029      	add	sp, #164	@ 0xa4
 80167cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167d0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80167d4:	e7f8      	b.n	80167c8 <rcl_node_init+0x1f0>
 80167d6:	782b      	ldrb	r3, [r5, #0]
 80167d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80167da:	f43f af42 	beq.w	8016662 <rcl_node_init+0x8a>
 80167de:	9503      	str	r5, [sp, #12]
 80167e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80167e4:	9300      	str	r3, [sp, #0]
 80167e6:	4b1e      	ldr	r3, [pc, #120]	@ (8016860 <rcl_node_init+0x288>)
 80167e8:	9302      	str	r3, [sp, #8]
 80167ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80167ee:	9301      	str	r3, [sp, #4]
 80167f0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80167f4:	f005 fddc 	bl	801c3b0 <rcutils_format_string_limit>
 80167f8:	4605      	mov	r5, r0
 80167fa:	b340      	cbz	r0, 801684e <rcl_node_init+0x276>
 80167fc:	2200      	movs	r2, #0
 80167fe:	a922      	add	r1, sp, #136	@ 0x88
 8016800:	9222      	str	r2, [sp, #136]	@ 0x88
 8016802:	f006 f9ed 	bl	801cbe0 <rmw_validate_namespace>
 8016806:	4681      	mov	r9, r0
 8016808:	2800      	cmp	r0, #0
 801680a:	f43f af34 	beq.w	8016676 <rcl_node_init+0x9e>
 801680e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016812:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016816:	4628      	mov	r0, r5
 8016818:	4798      	blx	r3
 801681a:	e7d5      	b.n	80167c8 <rcl_node_init+0x1f0>
 801681c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8016820:	4648      	mov	r0, r9
 8016822:	b029      	add	sp, #164	@ 0xa4
 8016824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016828:	f04f 090a 	mov.w	r9, #10
 801682c:	f1ba 0f00 	cmp.w	sl, #0
 8016830:	d1ed      	bne.n	801680e <rcl_node_init+0x236>
 8016832:	e7c9      	b.n	80167c8 <rcl_node_init+0x1f0>
 8016834:	f006 fa44 	bl	801ccc0 <rmw_node_name_validation_result_string>
 8016838:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 801683c:	e7c4      	b.n	80167c8 <rcl_node_init+0x1f0>
 801683e:	f006 f9e1 	bl	801cc04 <rmw_namespace_validation_result_string>
 8016842:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8016846:	f1ba 0f00 	cmp.w	sl, #0
 801684a:	d1e0      	bne.n	801680e <rcl_node_init+0x236>
 801684c:	e7bc      	b.n	80167c8 <rcl_node_init+0x1f0>
 801684e:	f04f 090a 	mov.w	r9, #10
 8016852:	e7b9      	b.n	80167c8 <rcl_node_init+0x1f0>
 8016854:	08023bb4 	.word	0x08023bb4
 8016858:	08023448 	.word	0x08023448
 801685c:	08023bbc 	.word	0x08023bbc
 8016860:	08023bb8 	.word	0x08023bb8

08016864 <rcl_node_is_valid>:
 8016864:	b130      	cbz	r0, 8016874 <rcl_node_is_valid+0x10>
 8016866:	6843      	ldr	r3, [r0, #4]
 8016868:	b123      	cbz	r3, 8016874 <rcl_node_is_valid+0x10>
 801686a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801686c:	b113      	cbz	r3, 8016874 <rcl_node_is_valid+0x10>
 801686e:	6800      	ldr	r0, [r0, #0]
 8016870:	f7ff bc1e 	b.w	80160b0 <rcl_context_is_valid>
 8016874:	2000      	movs	r0, #0
 8016876:	4770      	bx	lr

08016878 <rcl_node_get_name>:
 8016878:	b120      	cbz	r0, 8016884 <rcl_node_get_name+0xc>
 801687a:	6840      	ldr	r0, [r0, #4]
 801687c:	b110      	cbz	r0, 8016884 <rcl_node_get_name+0xc>
 801687e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016880:	b100      	cbz	r0, 8016884 <rcl_node_get_name+0xc>
 8016882:	6880      	ldr	r0, [r0, #8]
 8016884:	4770      	bx	lr
 8016886:	bf00      	nop

08016888 <rcl_node_get_namespace>:
 8016888:	b120      	cbz	r0, 8016894 <rcl_node_get_namespace+0xc>
 801688a:	6840      	ldr	r0, [r0, #4]
 801688c:	b110      	cbz	r0, 8016894 <rcl_node_get_namespace+0xc>
 801688e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8016890:	b100      	cbz	r0, 8016894 <rcl_node_get_namespace+0xc>
 8016892:	68c0      	ldr	r0, [r0, #12]
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop

08016898 <rcl_node_get_options>:
 8016898:	b128      	cbz	r0, 80168a6 <rcl_node_get_options+0xe>
 801689a:	6840      	ldr	r0, [r0, #4]
 801689c:	b118      	cbz	r0, 80168a6 <rcl_node_get_options+0xe>
 801689e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	bf08      	it	eq
 80168a4:	2000      	moveq	r0, #0
 80168a6:	4770      	bx	lr

080168a8 <rcl_node_get_rmw_handle>:
 80168a8:	b110      	cbz	r0, 80168b0 <rcl_node_get_rmw_handle+0x8>
 80168aa:	6840      	ldr	r0, [r0, #4]
 80168ac:	b100      	cbz	r0, 80168b0 <rcl_node_get_rmw_handle+0x8>
 80168ae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80168b0:	4770      	bx	lr
 80168b2:	bf00      	nop

080168b4 <rcl_node_get_default_options>:
 80168b4:	b510      	push	{r4, lr}
 80168b6:	2268      	movs	r2, #104	@ 0x68
 80168b8:	4604      	mov	r4, r0
 80168ba:	2100      	movs	r1, #0
 80168bc:	f00b f851 	bl	8021962 <memset>
 80168c0:	4620      	mov	r0, r4
 80168c2:	f7f7 ff23 	bl	800e70c <rcutils_get_default_allocator>
 80168c6:	2301      	movs	r3, #1
 80168c8:	7523      	strb	r3, [r4, #20]
 80168ca:	4620      	mov	r0, r4
 80168cc:	bd10      	pop	{r4, pc}
 80168ce:	bf00      	nop

080168d0 <rcl_node_options_copy>:
 80168d0:	b1d0      	cbz	r0, 8016908 <rcl_node_options_copy+0x38>
 80168d2:	b570      	push	{r4, r5, r6, lr}
 80168d4:	460c      	mov	r4, r1
 80168d6:	b1a9      	cbz	r1, 8016904 <rcl_node_options_copy+0x34>
 80168d8:	4288      	cmp	r0, r1
 80168da:	4684      	mov	ip, r0
 80168dc:	d012      	beq.n	8016904 <rcl_node_options_copy+0x34>
 80168de:	4605      	mov	r5, r0
 80168e0:	8a86      	ldrh	r6, [r0, #20]
 80168e2:	468e      	mov	lr, r1
 80168e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80168ea:	682b      	ldr	r3, [r5, #0]
 80168ec:	f8ce 3000 	str.w	r3, [lr]
 80168f0:	f10c 0118 	add.w	r1, ip, #24
 80168f4:	2250      	movs	r2, #80	@ 0x50
 80168f6:	82a6      	strh	r6, [r4, #20]
 80168f8:	f104 0018 	add.w	r0, r4, #24
 80168fc:	f00b f899 	bl	8021a32 <memcpy>
 8016900:	2000      	movs	r0, #0
 8016902:	bd70      	pop	{r4, r5, r6, pc}
 8016904:	200b      	movs	r0, #11
 8016906:	bd70      	pop	{r4, r5, r6, pc}
 8016908:	200b      	movs	r0, #11
 801690a:	4770      	bx	lr

0801690c <rcl_node_resolve_name>:
 801690c:	b082      	sub	sp, #8
 801690e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016912:	b091      	sub	sp, #68	@ 0x44
 8016914:	ac1a      	add	r4, sp, #104	@ 0x68
 8016916:	e884 000c 	stmia.w	r4, {r2, r3}
 801691a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801691e:	2800      	cmp	r0, #0
 8016920:	d03b      	beq.n	801699a <rcl_node_resolve_name+0x8e>
 8016922:	460c      	mov	r4, r1
 8016924:	4605      	mov	r5, r0
 8016926:	f7ff ffb7 	bl	8016898 <rcl_node_get_options>
 801692a:	2800      	cmp	r0, #0
 801692c:	d037      	beq.n	801699e <rcl_node_resolve_name+0x92>
 801692e:	4628      	mov	r0, r5
 8016930:	f7ff ffa2 	bl	8016878 <rcl_node_get_name>
 8016934:	4606      	mov	r6, r0
 8016936:	4628      	mov	r0, r5
 8016938:	f7ff ffa6 	bl	8016888 <rcl_node_get_namespace>
 801693c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016940:	4681      	mov	r9, r0
 8016942:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016946:	ad0b      	add	r5, sp, #44	@ 0x2c
 8016948:	46ac      	mov	ip, r5
 801694a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801694e:	f8de 3000 	ldr.w	r3, [lr]
 8016952:	f8cc 3000 	str.w	r3, [ip]
 8016956:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016958:	b1fb      	cbz	r3, 801699a <rcl_node_resolve_name+0x8e>
 801695a:	468a      	mov	sl, r1
 801695c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8016960:	f005 fe7e 	bl	801c660 <rcutils_get_zero_initialized_string_map>
 8016964:	ab10      	add	r3, sp, #64	@ 0x40
 8016966:	9008      	str	r0, [sp, #32]
 8016968:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801696c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016970:	2100      	movs	r1, #0
 8016972:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016976:	a808      	add	r0, sp, #32
 8016978:	f005 feea 	bl	801c750 <rcutils_string_map_init>
 801697c:	4607      	mov	r7, r0
 801697e:	b180      	cbz	r0, 80169a2 <rcl_node_resolve_name+0x96>
 8016980:	f7f7 fee0 	bl	800e744 <rcutils_get_error_string>
 8016984:	f7f7 fef4 	bl	800e770 <rcutils_reset_error>
 8016988:	2f0a      	cmp	r7, #10
 801698a:	bf18      	it	ne
 801698c:	2701      	movne	r7, #1
 801698e:	4638      	mov	r0, r7
 8016990:	b011      	add	sp, #68	@ 0x44
 8016992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016996:	b002      	add	sp, #8
 8016998:	4770      	bx	lr
 801699a:	270b      	movs	r7, #11
 801699c:	e7f7      	b.n	801698e <rcl_node_resolve_name+0x82>
 801699e:	2701      	movs	r7, #1
 80169a0:	e7f5      	b.n	801698e <rcl_node_resolve_name+0x82>
 80169a2:	9009      	str	r0, [sp, #36]	@ 0x24
 80169a4:	9007      	str	r0, [sp, #28]
 80169a6:	a808      	add	r0, sp, #32
 80169a8:	f009 fa44 	bl	801fe34 <rcl_get_default_topic_name_substitutions>
 80169ac:	4607      	mov	r7, r0
 80169ae:	b1a8      	cbz	r0, 80169dc <rcl_node_resolve_name+0xd0>
 80169b0:	280a      	cmp	r0, #10
 80169b2:	9c07      	ldr	r4, [sp, #28]
 80169b4:	d000      	beq.n	80169b8 <rcl_node_resolve_name+0xac>
 80169b6:	2701      	movs	r7, #1
 80169b8:	a808      	add	r0, sp, #32
 80169ba:	f005 ff09 	bl	801c7d0 <rcutils_string_map_fini>
 80169be:	2800      	cmp	r0, #0
 80169c0:	d13d      	bne.n	8016a3e <rcl_node_resolve_name+0x132>
 80169c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169c4:	4659      	mov	r1, fp
 80169c6:	47d0      	blx	sl
 80169c8:	4659      	mov	r1, fp
 80169ca:	4620      	mov	r0, r4
 80169cc:	47d0      	blx	sl
 80169ce:	f1b8 0f00 	cmp.w	r8, #0
 80169d2:	d0dc      	beq.n	801698e <rcl_node_resolve_name+0x82>
 80169d4:	2f67      	cmp	r7, #103	@ 0x67
 80169d6:	bf08      	it	eq
 80169d8:	2768      	moveq	r7, #104	@ 0x68
 80169da:	e7d8      	b.n	801698e <rcl_node_resolve_name+0x82>
 80169dc:	ab09      	add	r3, sp, #36	@ 0x24
 80169de:	9305      	str	r3, [sp, #20]
 80169e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169e2:	46ec      	mov	ip, sp
 80169e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169e8:	682b      	ldr	r3, [r5, #0]
 80169ea:	f8cc 3000 	str.w	r3, [ip]
 80169ee:	464a      	mov	r2, r9
 80169f0:	4631      	mov	r1, r6
 80169f2:	4620      	mov	r0, r4
 80169f4:	ab08      	add	r3, sp, #32
 80169f6:	f009 f8bf 	bl	801fb78 <rcl_expand_topic_name>
 80169fa:	4607      	mov	r7, r0
 80169fc:	b9b8      	cbnz	r0, 8016a2e <rcl_node_resolve_name+0x122>
 80169fe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016a00:	9009      	str	r0, [sp, #36]	@ 0x24
 8016a02:	4602      	mov	r2, r0
 8016a04:	a90a      	add	r1, sp, #40	@ 0x28
 8016a06:	4620      	mov	r0, r4
 8016a08:	f006 f826 	bl	801ca58 <rmw_validate_full_topic_name>
 8016a0c:	b988      	cbnz	r0, 8016a32 <rcl_node_resolve_name+0x126>
 8016a0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016a10:	b9d5      	cbnz	r5, 8016a48 <rcl_node_resolve_name+0x13c>
 8016a12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016a14:	a808      	add	r0, sp, #32
 8016a16:	601c      	str	r4, [r3, #0]
 8016a18:	f005 feda 	bl	801c7d0 <rcutils_string_map_fini>
 8016a1c:	4607      	mov	r7, r0
 8016a1e:	b1a8      	cbz	r0, 8016a4c <rcl_node_resolve_name+0x140>
 8016a20:	f7f7 fe90 	bl	800e744 <rcutils_get_error_string>
 8016a24:	462c      	mov	r4, r5
 8016a26:	f7f7 fea3 	bl	800e770 <rcutils_reset_error>
 8016a2a:	2701      	movs	r7, #1
 8016a2c:	e7c9      	b.n	80169c2 <rcl_node_resolve_name+0xb6>
 8016a2e:	9c07      	ldr	r4, [sp, #28]
 8016a30:	e7c2      	b.n	80169b8 <rcl_node_resolve_name+0xac>
 8016a32:	f7f7 fe87 	bl	800e744 <rcutils_get_error_string>
 8016a36:	2701      	movs	r7, #1
 8016a38:	f7f7 fe9a 	bl	800e770 <rcutils_reset_error>
 8016a3c:	e7bc      	b.n	80169b8 <rcl_node_resolve_name+0xac>
 8016a3e:	f7f7 fe81 	bl	800e744 <rcutils_get_error_string>
 8016a42:	f7f7 fe95 	bl	800e770 <rcutils_reset_error>
 8016a46:	e7bc      	b.n	80169c2 <rcl_node_resolve_name+0xb6>
 8016a48:	2767      	movs	r7, #103	@ 0x67
 8016a4a:	e7b5      	b.n	80169b8 <rcl_node_resolve_name+0xac>
 8016a4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016a4e:	4659      	mov	r1, fp
 8016a50:	47d0      	blx	sl
 8016a52:	4659      	mov	r1, fp
 8016a54:	4638      	mov	r0, r7
 8016a56:	47d0      	blx	sl
 8016a58:	e799      	b.n	801698e <rcl_node_resolve_name+0x82>
 8016a5a:	bf00      	nop

08016a5c <exact_match_lookup>:
 8016a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a5e:	f102 0708 	add.w	r7, r2, #8
 8016a62:	460b      	mov	r3, r1
 8016a64:	4614      	mov	r4, r2
 8016a66:	4606      	mov	r6, r0
 8016a68:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016a6c:	b085      	sub	sp, #20
 8016a6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a72:	4618      	mov	r0, r3
 8016a74:	4919      	ldr	r1, [pc, #100]	@ (8016adc <exact_match_lookup+0x80>)
 8016a76:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016a7a:	f005 fc8b 	bl	801c394 <rcutils_join_path>
 8016a7e:	7833      	ldrb	r3, [r6, #0]
 8016a80:	2b2f      	cmp	r3, #47	@ 0x2f
 8016a82:	4605      	mov	r5, r0
 8016a84:	d023      	beq.n	8016ace <exact_match_lookup+0x72>
 8016a86:	f104 030c 	add.w	r3, r4, #12
 8016a8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016a8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016a92:	1c70      	adds	r0, r6, #1
 8016a94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016a98:	f005 fc82 	bl	801c3a0 <rcutils_to_native_path>
 8016a9c:	4606      	mov	r6, r0
 8016a9e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016aa2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016aa6:	4631      	mov	r1, r6
 8016aa8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016aac:	4628      	mov	r0, r5
 8016aae:	f005 fc71 	bl	801c394 <rcutils_join_path>
 8016ab2:	6862      	ldr	r2, [r4, #4]
 8016ab4:	6921      	ldr	r1, [r4, #16]
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	4630      	mov	r0, r6
 8016aba:	461e      	mov	r6, r3
 8016abc:	4790      	blx	r2
 8016abe:	4628      	mov	r0, r5
 8016ac0:	6863      	ldr	r3, [r4, #4]
 8016ac2:	6921      	ldr	r1, [r4, #16]
 8016ac4:	4798      	blx	r3
 8016ac6:	4635      	mov	r5, r6
 8016ac8:	4628      	mov	r0, r5
 8016aca:	b005      	add	sp, #20
 8016acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ace:	7873      	ldrb	r3, [r6, #1]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d1d8      	bne.n	8016a86 <exact_match_lookup+0x2a>
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	b005      	add	sp, #20
 8016ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ada:	bf00      	nop
 8016adc:	08023c08 	.word	0x08023c08

08016ae0 <rcl_get_secure_root>:
 8016ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ae4:	b085      	sub	sp, #20
 8016ae6:	b168      	cbz	r0, 8016b04 <rcl_get_secure_root+0x24>
 8016ae8:	4607      	mov	r7, r0
 8016aea:	4608      	mov	r0, r1
 8016aec:	460c      	mov	r4, r1
 8016aee:	f7f7 fe1b 	bl	800e728 <rcutils_allocator_is_valid>
 8016af2:	b138      	cbz	r0, 8016b04 <rcl_get_secure_root+0x24>
 8016af4:	2300      	movs	r3, #0
 8016af6:	482d      	ldr	r0, [pc, #180]	@ (8016bac <rcl_get_secure_root+0xcc>)
 8016af8:	9303      	str	r3, [sp, #12]
 8016afa:	a903      	add	r1, sp, #12
 8016afc:	f005 fc30 	bl	801c360 <rcutils_get_env>
 8016b00:	4605      	mov	r5, r0
 8016b02:	b120      	cbz	r0, 8016b0e <rcl_get_secure_root+0x2e>
 8016b04:	2500      	movs	r5, #0
 8016b06:	4628      	mov	r0, r5
 8016b08:	b005      	add	sp, #20
 8016b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b0e:	9b03      	ldr	r3, [sp, #12]
 8016b10:	781a      	ldrb	r2, [r3, #0]
 8016b12:	2a00      	cmp	r2, #0
 8016b14:	d0f6      	beq.n	8016b04 <rcl_get_secure_root+0x24>
 8016b16:	f104 090c 	add.w	r9, r4, #12
 8016b1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016b1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016b22:	4618      	mov	r0, r3
 8016b24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016b28:	f005 fd5c 	bl	801c5e4 <rcutils_strdup>
 8016b2c:	4680      	mov	r8, r0
 8016b2e:	2800      	cmp	r0, #0
 8016b30:	d0e8      	beq.n	8016b04 <rcl_get_secure_root+0x24>
 8016b32:	481f      	ldr	r0, [pc, #124]	@ (8016bb0 <rcl_get_secure_root+0xd0>)
 8016b34:	9503      	str	r5, [sp, #12]
 8016b36:	a903      	add	r1, sp, #12
 8016b38:	f005 fc12 	bl	801c360 <rcutils_get_env>
 8016b3c:	b160      	cbz	r0, 8016b58 <rcl_get_secure_root+0x78>
 8016b3e:	2600      	movs	r6, #0
 8016b40:	6863      	ldr	r3, [r4, #4]
 8016b42:	6921      	ldr	r1, [r4, #16]
 8016b44:	4630      	mov	r0, r6
 8016b46:	4798      	blx	r3
 8016b48:	4640      	mov	r0, r8
 8016b4a:	6863      	ldr	r3, [r4, #4]
 8016b4c:	6921      	ldr	r1, [r4, #16]
 8016b4e:	4798      	blx	r3
 8016b50:	4628      	mov	r0, r5
 8016b52:	b005      	add	sp, #20
 8016b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b58:	9b03      	ldr	r3, [sp, #12]
 8016b5a:	781e      	ldrb	r6, [r3, #0]
 8016b5c:	b1f6      	cbz	r6, 8016b9c <rcl_get_secure_root+0xbc>
 8016b5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016b62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016b66:	4618      	mov	r0, r3
 8016b68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016b6c:	f005 fd3a 	bl	801c5e4 <rcutils_strdup>
 8016b70:	4606      	mov	r6, r0
 8016b72:	2800      	cmp	r0, #0
 8016b74:	d0e3      	beq.n	8016b3e <rcl_get_secure_root+0x5e>
 8016b76:	4622      	mov	r2, r4
 8016b78:	4641      	mov	r1, r8
 8016b7a:	f7ff ff6f 	bl	8016a5c <exact_match_lookup>
 8016b7e:	4605      	mov	r5, r0
 8016b80:	2d00      	cmp	r5, #0
 8016b82:	d0dd      	beq.n	8016b40 <rcl_get_secure_root+0x60>
 8016b84:	4628      	mov	r0, r5
 8016b86:	f005 fc03 	bl	801c390 <rcutils_is_directory>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	d1d7      	bne.n	8016b40 <rcl_get_secure_root+0x60>
 8016b90:	4628      	mov	r0, r5
 8016b92:	6921      	ldr	r1, [r4, #16]
 8016b94:	461d      	mov	r5, r3
 8016b96:	6863      	ldr	r3, [r4, #4]
 8016b98:	4798      	blx	r3
 8016b9a:	e7d1      	b.n	8016b40 <rcl_get_secure_root+0x60>
 8016b9c:	4622      	mov	r2, r4
 8016b9e:	4638      	mov	r0, r7
 8016ba0:	4641      	mov	r1, r8
 8016ba2:	f7ff ff5b 	bl	8016a5c <exact_match_lookup>
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	e7ea      	b.n	8016b80 <rcl_get_secure_root+0xa0>
 8016baa:	bf00      	nop
 8016bac:	08023c14 	.word	0x08023c14
 8016bb0:	08023c2c 	.word	0x08023c2c

08016bb4 <rcl_get_security_options_from_environment>:
 8016bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb8:	b082      	sub	sp, #8
 8016bba:	2300      	movs	r3, #0
 8016bbc:	4606      	mov	r6, r0
 8016bbe:	460f      	mov	r7, r1
 8016bc0:	4820      	ldr	r0, [pc, #128]	@ (8016c44 <rcl_get_security_options_from_environment+0x90>)
 8016bc2:	9301      	str	r3, [sp, #4]
 8016bc4:	a901      	add	r1, sp, #4
 8016bc6:	4690      	mov	r8, r2
 8016bc8:	f005 fbca 	bl	801c360 <rcutils_get_env>
 8016bcc:	b120      	cbz	r0, 8016bd8 <rcl_get_security_options_from_environment+0x24>
 8016bce:	2501      	movs	r5, #1
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	b002      	add	sp, #8
 8016bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd8:	491b      	ldr	r1, [pc, #108]	@ (8016c48 <rcl_get_security_options_from_environment+0x94>)
 8016bda:	4604      	mov	r4, r0
 8016bdc:	9801      	ldr	r0, [sp, #4]
 8016bde:	f7e9 fb17 	bl	8000210 <strcmp>
 8016be2:	4605      	mov	r5, r0
 8016be4:	b9e8      	cbnz	r0, 8016c22 <rcl_get_security_options_from_environment+0x6e>
 8016be6:	9001      	str	r0, [sp, #4]
 8016be8:	f1b8 0f00 	cmp.w	r8, #0
 8016bec:	d020      	beq.n	8016c30 <rcl_get_security_options_from_environment+0x7c>
 8016bee:	4817      	ldr	r0, [pc, #92]	@ (8016c4c <rcl_get_security_options_from_environment+0x98>)
 8016bf0:	a901      	add	r1, sp, #4
 8016bf2:	f005 fbb5 	bl	801c360 <rcutils_get_env>
 8016bf6:	2800      	cmp	r0, #0
 8016bf8:	d1e9      	bne.n	8016bce <rcl_get_security_options_from_environment+0x1a>
 8016bfa:	4915      	ldr	r1, [pc, #84]	@ (8016c50 <rcl_get_security_options_from_environment+0x9c>)
 8016bfc:	9801      	ldr	r0, [sp, #4]
 8016bfe:	f7e9 fb07 	bl	8000210 <strcmp>
 8016c02:	fab0 f080 	clz	r0, r0
 8016c06:	0940      	lsrs	r0, r0, #5
 8016c08:	f888 0000 	strb.w	r0, [r8]
 8016c0c:	4639      	mov	r1, r7
 8016c0e:	4630      	mov	r0, r6
 8016c10:	f7ff ff66 	bl	8016ae0 <rcl_get_secure_root>
 8016c14:	b170      	cbz	r0, 8016c34 <rcl_get_security_options_from_environment+0x80>
 8016c16:	f8c8 0004 	str.w	r0, [r8, #4]
 8016c1a:	4628      	mov	r0, r5
 8016c1c:	b002      	add	sp, #8
 8016c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c22:	4625      	mov	r5, r4
 8016c24:	4628      	mov	r0, r5
 8016c26:	f888 4000 	strb.w	r4, [r8]
 8016c2a:	b002      	add	sp, #8
 8016c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c30:	250b      	movs	r5, #11
 8016c32:	e7cd      	b.n	8016bd0 <rcl_get_security_options_from_environment+0x1c>
 8016c34:	f898 5000 	ldrb.w	r5, [r8]
 8016c38:	f1a5 0501 	sub.w	r5, r5, #1
 8016c3c:	fab5 f585 	clz	r5, r5
 8016c40:	096d      	lsrs	r5, r5, #5
 8016c42:	e7c5      	b.n	8016bd0 <rcl_get_security_options_from_environment+0x1c>
 8016c44:	08023bcc 	.word	0x08023bcc
 8016c48:	08023be0 	.word	0x08023be0
 8016c4c:	08023be8 	.word	0x08023be8
 8016c50:	08023c00 	.word	0x08023c00

08016c54 <rcl_get_zero_initialized_service>:
 8016c54:	4b01      	ldr	r3, [pc, #4]	@ (8016c5c <rcl_get_zero_initialized_service+0x8>)
 8016c56:	6818      	ldr	r0, [r3, #0]
 8016c58:	4770      	bx	lr
 8016c5a:	bf00      	nop
 8016c5c:	08023c4c 	.word	0x08023c4c

08016c60 <rcl_service_init>:
 8016c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c64:	b089      	sub	sp, #36	@ 0x24
 8016c66:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016c68:	b1c5      	cbz	r5, 8016c9c <rcl_service_init+0x3c>
 8016c6a:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8016c6e:	4604      	mov	r4, r0
 8016c70:	4648      	mov	r0, r9
 8016c72:	4688      	mov	r8, r1
 8016c74:	4617      	mov	r7, r2
 8016c76:	461e      	mov	r6, r3
 8016c78:	f7f7 fd56 	bl	800e728 <rcutils_allocator_is_valid>
 8016c7c:	b170      	cbz	r0, 8016c9c <rcl_service_init+0x3c>
 8016c7e:	b16c      	cbz	r4, 8016c9c <rcl_service_init+0x3c>
 8016c80:	4640      	mov	r0, r8
 8016c82:	f7ff fdef 	bl	8016864 <rcl_node_is_valid>
 8016c86:	2800      	cmp	r0, #0
 8016c88:	d058      	beq.n	8016d3c <rcl_service_init+0xdc>
 8016c8a:	b13f      	cbz	r7, 8016c9c <rcl_service_init+0x3c>
 8016c8c:	b136      	cbz	r6, 8016c9c <rcl_service_init+0x3c>
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	b14b      	cbz	r3, 8016ca6 <rcl_service_init+0x46>
 8016c92:	2664      	movs	r6, #100	@ 0x64
 8016c94:	4630      	mov	r0, r6
 8016c96:	b009      	add	sp, #36	@ 0x24
 8016c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c9c:	260b      	movs	r6, #11
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	b009      	add	sp, #36	@ 0x24
 8016ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ca6:	aa07      	add	r2, sp, #28
 8016ca8:	9205      	str	r2, [sp, #20]
 8016caa:	2201      	movs	r2, #1
 8016cac:	9304      	str	r3, [sp, #16]
 8016cae:	9203      	str	r2, [sp, #12]
 8016cb0:	9307      	str	r3, [sp, #28]
 8016cb2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8016cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016cba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016cbe:	4631      	mov	r1, r6
 8016cc0:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016cc4:	4640      	mov	r0, r8
 8016cc6:	f7ff fe21 	bl	801690c <rcl_node_resolve_name>
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d145      	bne.n	8016d5a <rcl_service_init+0xfa>
 8016cce:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8016cd0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8016cd2:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8016cd6:	4798      	blx	r3
 8016cd8:	6020      	str	r0, [r4, #0]
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	d043      	beq.n	8016d66 <rcl_service_init+0x106>
 8016cde:	4640      	mov	r0, r8
 8016ce0:	f7ff fde2 	bl	80168a8 <rcl_node_get_rmw_handle>
 8016ce4:	462b      	mov	r3, r5
 8016ce6:	9a07      	ldr	r2, [sp, #28]
 8016ce8:	6826      	ldr	r6, [r4, #0]
 8016cea:	4639      	mov	r1, r7
 8016cec:	f006 fd9a 	bl	801d824 <rmw_create_service>
 8016cf0:	6823      	ldr	r3, [r4, #0]
 8016cf2:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8016cf6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016cfa:	b330      	cbz	r0, 8016d4a <rcl_service_init+0xea>
 8016cfc:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8016d00:	f006 feb6 	bl	801da70 <rmw_service_request_subscription_get_actual_qos>
 8016d04:	b9f8      	cbnz	r0, 8016d46 <rcl_service_init+0xe6>
 8016d06:	6821      	ldr	r1, [r4, #0]
 8016d08:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8016d0c:	31b8      	adds	r1, #184	@ 0xb8
 8016d0e:	f006 fe9f 	bl	801da50 <rmw_service_response_publisher_get_actual_qos>
 8016d12:	4606      	mov	r6, r0
 8016d14:	b9b8      	cbnz	r0, 8016d46 <rcl_service_init+0xe6>
 8016d16:	6820      	ldr	r0, [r4, #0]
 8016d18:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8016d1c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8016d20:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8016d24:	2268      	movs	r2, #104	@ 0x68
 8016d26:	4629      	mov	r1, r5
 8016d28:	f00a fe83 	bl	8021a32 <memcpy>
 8016d2c:	9807      	ldr	r0, [sp, #28]
 8016d2e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8016d30:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8016d32:	4798      	blx	r3
 8016d34:	4630      	mov	r0, r6
 8016d36:	b009      	add	sp, #36	@ 0x24
 8016d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d3c:	26c8      	movs	r6, #200	@ 0xc8
 8016d3e:	4630      	mov	r0, r6
 8016d40:	b009      	add	sp, #36	@ 0x24
 8016d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d46:	6823      	ldr	r3, [r4, #0]
 8016d48:	b12b      	cbz	r3, 8016d56 <rcl_service_init+0xf6>
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8016d4e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8016d50:	4790      	blx	r2
 8016d52:	2300      	movs	r3, #0
 8016d54:	6023      	str	r3, [r4, #0]
 8016d56:	2601      	movs	r6, #1
 8016d58:	e7e8      	b.n	8016d2c <rcl_service_init+0xcc>
 8016d5a:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d903      	bls.n	8016d6a <rcl_service_init+0x10a>
 8016d62:	280a      	cmp	r0, #10
 8016d64:	d1f7      	bne.n	8016d56 <rcl_service_init+0xf6>
 8016d66:	260a      	movs	r6, #10
 8016d68:	e7e0      	b.n	8016d2c <rcl_service_init+0xcc>
 8016d6a:	2668      	movs	r6, #104	@ 0x68
 8016d6c:	e7de      	b.n	8016d2c <rcl_service_init+0xcc>
 8016d6e:	bf00      	nop

08016d70 <rcl_service_get_default_options>:
 8016d70:	b530      	push	{r4, r5, lr}
 8016d72:	4d0f      	ldr	r5, [pc, #60]	@ (8016db0 <rcl_service_get_default_options+0x40>)
 8016d74:	490f      	ldr	r1, [pc, #60]	@ (8016db4 <rcl_service_get_default_options+0x44>)
 8016d76:	b087      	sub	sp, #28
 8016d78:	4604      	mov	r4, r0
 8016d7a:	2250      	movs	r2, #80	@ 0x50
 8016d7c:	4628      	mov	r0, r5
 8016d7e:	f00a fe58 	bl	8021a32 <memcpy>
 8016d82:	4668      	mov	r0, sp
 8016d84:	f7f7 fcc2 	bl	800e70c <rcutils_get_default_allocator>
 8016d88:	46ec      	mov	ip, sp
 8016d8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016d8e:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8016d92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016d96:	2268      	movs	r2, #104	@ 0x68
 8016d98:	f8dc 3000 	ldr.w	r3, [ip]
 8016d9c:	f8ce 3000 	str.w	r3, [lr]
 8016da0:	4629      	mov	r1, r5
 8016da2:	4620      	mov	r0, r4
 8016da4:	f00a fe45 	bl	8021a32 <memcpy>
 8016da8:	4620      	mov	r0, r4
 8016daa:	b007      	add	sp, #28
 8016dac:	bd30      	pop	{r4, r5, pc}
 8016dae:	bf00      	nop
 8016db0:	20016d58 	.word	0x20016d58
 8016db4:	08023c50 	.word	0x08023c50

08016db8 <rcl_service_get_rmw_handle>:
 8016db8:	b118      	cbz	r0, 8016dc2 <rcl_service_get_rmw_handle+0xa>
 8016dba:	6800      	ldr	r0, [r0, #0]
 8016dbc:	b108      	cbz	r0, 8016dc2 <rcl_service_get_rmw_handle+0xa>
 8016dbe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016dc2:	4770      	bx	lr

08016dc4 <rcl_take_request>:
 8016dc4:	b570      	push	{r4, r5, r6, lr}
 8016dc6:	468e      	mov	lr, r1
 8016dc8:	460c      	mov	r4, r1
 8016dca:	4616      	mov	r6, r2
 8016dcc:	4605      	mov	r5, r0
 8016dce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016dd2:	b08c      	sub	sp, #48	@ 0x30
 8016dd4:	f10d 0c18 	add.w	ip, sp, #24
 8016dd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ddc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016de0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016de4:	b30d      	cbz	r5, 8016e2a <rcl_take_request+0x66>
 8016de6:	682b      	ldr	r3, [r5, #0]
 8016de8:	b1fb      	cbz	r3, 8016e2a <rcl_take_request+0x66>
 8016dea:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016dee:	b1e0      	cbz	r0, 8016e2a <rcl_take_request+0x66>
 8016df0:	b336      	cbz	r6, 8016e40 <rcl_take_request+0x7c>
 8016df2:	2300      	movs	r3, #0
 8016df4:	f88d 3007 	strb.w	r3, [sp, #7]
 8016df8:	4632      	mov	r2, r6
 8016dfa:	f10d 0307 	add.w	r3, sp, #7
 8016dfe:	a902      	add	r1, sp, #8
 8016e00:	f006 fc0c 	bl	801d61c <rmw_take_request>
 8016e04:	4605      	mov	r5, r0
 8016e06:	b198      	cbz	r0, 8016e30 <rcl_take_request+0x6c>
 8016e08:	280a      	cmp	r0, #10
 8016e0a:	bf18      	it	ne
 8016e0c:	2501      	movne	r5, #1
 8016e0e:	f10d 0e18 	add.w	lr, sp, #24
 8016e12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e16:	46a4      	mov	ip, r4
 8016e18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016e20:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016e24:	4628      	mov	r0, r5
 8016e26:	b00c      	add	sp, #48	@ 0x30
 8016e28:	bd70      	pop	{r4, r5, r6, pc}
 8016e2a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8016e2e:	e7ee      	b.n	8016e0e <rcl_take_request+0x4a>
 8016e30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016e34:	f240 2359 	movw	r3, #601	@ 0x259
 8016e38:	2a00      	cmp	r2, #0
 8016e3a:	bf08      	it	eq
 8016e3c:	461d      	moveq	r5, r3
 8016e3e:	e7e6      	b.n	8016e0e <rcl_take_request+0x4a>
 8016e40:	250b      	movs	r5, #11
 8016e42:	e7e4      	b.n	8016e0e <rcl_take_request+0x4a>

08016e44 <rcl_send_response>:
 8016e44:	b170      	cbz	r0, 8016e64 <rcl_send_response+0x20>
 8016e46:	6800      	ldr	r0, [r0, #0]
 8016e48:	b160      	cbz	r0, 8016e64 <rcl_send_response+0x20>
 8016e4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016e4e:	b148      	cbz	r0, 8016e64 <rcl_send_response+0x20>
 8016e50:	b159      	cbz	r1, 8016e6a <rcl_send_response+0x26>
 8016e52:	b510      	push	{r4, lr}
 8016e54:	b15a      	cbz	r2, 8016e6e <rcl_send_response+0x2a>
 8016e56:	f006 fc3f 	bl	801d6d8 <rmw_send_response>
 8016e5a:	b110      	cbz	r0, 8016e62 <rcl_send_response+0x1e>
 8016e5c:	2802      	cmp	r0, #2
 8016e5e:	bf18      	it	ne
 8016e60:	2001      	movne	r0, #1
 8016e62:	bd10      	pop	{r4, pc}
 8016e64:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016e68:	4770      	bx	lr
 8016e6a:	200b      	movs	r0, #11
 8016e6c:	4770      	bx	lr
 8016e6e:	200b      	movs	r0, #11
 8016e70:	bd10      	pop	{r4, pc}
 8016e72:	bf00      	nop

08016e74 <rcl_service_is_valid>:
 8016e74:	b130      	cbz	r0, 8016e84 <rcl_service_is_valid+0x10>
 8016e76:	6800      	ldr	r0, [r0, #0]
 8016e78:	b120      	cbz	r0, 8016e84 <rcl_service_is_valid+0x10>
 8016e7a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016e7e:	3800      	subs	r0, #0
 8016e80:	bf18      	it	ne
 8016e82:	2001      	movne	r0, #1
 8016e84:	4770      	bx	lr
 8016e86:	bf00      	nop

08016e88 <rcl_get_zero_initialized_subscription>:
 8016e88:	4b01      	ldr	r3, [pc, #4]	@ (8016e90 <rcl_get_zero_initialized_subscription+0x8>)
 8016e8a:	6818      	ldr	r0, [r3, #0]
 8016e8c:	4770      	bx	lr
 8016e8e:	bf00      	nop
 8016e90:	08023ca0 	.word	0x08023ca0

08016e94 <rcl_subscription_init>:
 8016e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e98:	b089      	sub	sp, #36	@ 0x24
 8016e9a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016e9c:	b1d6      	cbz	r6, 8016ed4 <rcl_subscription_init+0x40>
 8016e9e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	4648      	mov	r0, r9
 8016ea6:	460d      	mov	r5, r1
 8016ea8:	4690      	mov	r8, r2
 8016eaa:	461f      	mov	r7, r3
 8016eac:	f7f7 fc3c 	bl	800e728 <rcutils_allocator_is_valid>
 8016eb0:	b180      	cbz	r0, 8016ed4 <rcl_subscription_init+0x40>
 8016eb2:	b17c      	cbz	r4, 8016ed4 <rcl_subscription_init+0x40>
 8016eb4:	4628      	mov	r0, r5
 8016eb6:	f7ff fcd5 	bl	8016864 <rcl_node_is_valid>
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	d054      	beq.n	8016f68 <rcl_subscription_init+0xd4>
 8016ebe:	f1b8 0f00 	cmp.w	r8, #0
 8016ec2:	d007      	beq.n	8016ed4 <rcl_subscription_init+0x40>
 8016ec4:	b137      	cbz	r7, 8016ed4 <rcl_subscription_init+0x40>
 8016ec6:	6823      	ldr	r3, [r4, #0]
 8016ec8:	b14b      	cbz	r3, 8016ede <rcl_subscription_init+0x4a>
 8016eca:	2764      	movs	r7, #100	@ 0x64
 8016ecc:	4638      	mov	r0, r7
 8016ece:	b009      	add	sp, #36	@ 0x24
 8016ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ed4:	270b      	movs	r7, #11
 8016ed6:	4638      	mov	r0, r7
 8016ed8:	b009      	add	sp, #36	@ 0x24
 8016eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ede:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016ee2:	aa07      	add	r2, sp, #28
 8016ee4:	9205      	str	r2, [sp, #20]
 8016ee6:	9307      	str	r3, [sp, #28]
 8016ee8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8016eec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ef0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016ef4:	4639      	mov	r1, r7
 8016ef6:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016efa:	4628      	mov	r0, r5
 8016efc:	f7ff fd06 	bl	801690c <rcl_node_resolve_name>
 8016f00:	4607      	mov	r7, r0
 8016f02:	2800      	cmp	r0, #0
 8016f04:	d15f      	bne.n	8016fc6 <rcl_subscription_init+0x132>
 8016f06:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8016f0a:	21c8      	movs	r1, #200	@ 0xc8
 8016f0c:	2001      	movs	r0, #1
 8016f0e:	4798      	blx	r3
 8016f10:	6020      	str	r0, [r4, #0]
 8016f12:	2800      	cmp	r0, #0
 8016f14:	d05d      	beq.n	8016fd2 <rcl_subscription_init+0x13e>
 8016f16:	4628      	mov	r0, r5
 8016f18:	f7ff fcc6 	bl	80168a8 <rcl_node_get_rmw_handle>
 8016f1c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	9a07      	ldr	r2, [sp, #28]
 8016f24:	6827      	ldr	r7, [r4, #0]
 8016f26:	4641      	mov	r1, r8
 8016f28:	4633      	mov	r3, r6
 8016f2a:	f006 fdb1 	bl	801da90 <rmw_create_subscription>
 8016f2e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8016f32:	6827      	ldr	r7, [r4, #0]
 8016f34:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8016f38:	b348      	cbz	r0, 8016f8e <rcl_subscription_init+0xfa>
 8016f3a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8016f3e:	f006 fe89 	bl	801dc54 <rmw_subscription_get_actual_qos>
 8016f42:	4607      	mov	r7, r0
 8016f44:	b9a8      	cbnz	r0, 8016f72 <rcl_subscription_init+0xde>
 8016f46:	6820      	ldr	r0, [r4, #0]
 8016f48:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8016f4c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8016f50:	2270      	movs	r2, #112	@ 0x70
 8016f52:	4631      	mov	r1, r6
 8016f54:	f00a fd6d 	bl	8021a32 <memcpy>
 8016f58:	9807      	ldr	r0, [sp, #28]
 8016f5a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8016f5c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8016f5e:	4798      	blx	r3
 8016f60:	4638      	mov	r0, r7
 8016f62:	b009      	add	sp, #36	@ 0x24
 8016f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f68:	27c8      	movs	r7, #200	@ 0xc8
 8016f6a:	4638      	mov	r0, r7
 8016f6c:	b009      	add	sp, #36	@ 0x24
 8016f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f72:	6827      	ldr	r7, [r4, #0]
 8016f74:	b32f      	cbz	r7, 8016fc2 <rcl_subscription_init+0x12e>
 8016f76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8016f7a:	b14b      	cbz	r3, 8016f90 <rcl_subscription_init+0xfc>
 8016f7c:	4628      	mov	r0, r5
 8016f7e:	f7ff fc93 	bl	80168a8 <rcl_node_get_rmw_handle>
 8016f82:	6823      	ldr	r3, [r4, #0]
 8016f84:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8016f88:	f006 fe74 	bl	801dc74 <rmw_destroy_subscription>
 8016f8c:	6827      	ldr	r7, [r4, #0]
 8016f8e:	b197      	cbz	r7, 8016fb6 <rcl_subscription_init+0x122>
 8016f90:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8016f94:	4628      	mov	r0, r5
 8016f96:	f7f7 fbc7 	bl	800e728 <rcutils_allocator_is_valid>
 8016f9a:	b158      	cbz	r0, 8016fb4 <rcl_subscription_init+0x120>
 8016f9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8016f9e:	b148      	cbz	r0, 8016fb4 <rcl_subscription_init+0x120>
 8016fa0:	4629      	mov	r1, r5
 8016fa2:	f005 fcad 	bl	801c900 <rmw_subscription_content_filter_options_fini>
 8016fa6:	4605      	mov	r5, r0
 8016fa8:	b9b8      	cbnz	r0, 8016fda <rcl_subscription_init+0x146>
 8016faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8016fae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8016fb0:	4798      	blx	r3
 8016fb2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8016fb4:	6827      	ldr	r7, [r4, #0]
 8016fb6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8016fb8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8016fba:	4638      	mov	r0, r7
 8016fbc:	4798      	blx	r3
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	6023      	str	r3, [r4, #0]
 8016fc2:	2701      	movs	r7, #1
 8016fc4:	e7c8      	b.n	8016f58 <rcl_subscription_init+0xc4>
 8016fc6:	2867      	cmp	r0, #103	@ 0x67
 8016fc8:	d0c6      	beq.n	8016f58 <rcl_subscription_init+0xc4>
 8016fca:	2869      	cmp	r0, #105	@ 0x69
 8016fcc:	d003      	beq.n	8016fd6 <rcl_subscription_init+0x142>
 8016fce:	280a      	cmp	r0, #10
 8016fd0:	d1f7      	bne.n	8016fc2 <rcl_subscription_init+0x12e>
 8016fd2:	270a      	movs	r7, #10
 8016fd4:	e7c0      	b.n	8016f58 <rcl_subscription_init+0xc4>
 8016fd6:	2767      	movs	r7, #103	@ 0x67
 8016fd8:	e7be      	b.n	8016f58 <rcl_subscription_init+0xc4>
 8016fda:	f7ff f84b 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 8016fde:	6827      	ldr	r7, [r4, #0]
 8016fe0:	e7e9      	b.n	8016fb6 <rcl_subscription_init+0x122>
 8016fe2:	bf00      	nop

08016fe4 <rcl_subscription_get_default_options>:
 8016fe4:	b570      	push	{r4, r5, r6, lr}
 8016fe6:	4d14      	ldr	r5, [pc, #80]	@ (8017038 <rcl_subscription_get_default_options+0x54>)
 8016fe8:	4914      	ldr	r1, [pc, #80]	@ (801703c <rcl_subscription_get_default_options+0x58>)
 8016fea:	b08a      	sub	sp, #40	@ 0x28
 8016fec:	4604      	mov	r4, r0
 8016fee:	2250      	movs	r2, #80	@ 0x50
 8016ff0:	4628      	mov	r0, r5
 8016ff2:	f00a fd1e 	bl	8021a32 <memcpy>
 8016ff6:	a804      	add	r0, sp, #16
 8016ff8:	f7f7 fb88 	bl	800e70c <rcutils_get_default_allocator>
 8016ffc:	f10d 0c10 	add.w	ip, sp, #16
 8017000:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017004:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8017008:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801700c:	466e      	mov	r6, sp
 801700e:	f8dc 3000 	ldr.w	r3, [ip]
 8017012:	f8ce 3000 	str.w	r3, [lr]
 8017016:	4630      	mov	r0, r6
 8017018:	f005 fc8c 	bl	801c934 <rmw_get_default_subscription_options>
 801701c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017020:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8017024:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017028:	2270      	movs	r2, #112	@ 0x70
 801702a:	4629      	mov	r1, r5
 801702c:	4620      	mov	r0, r4
 801702e:	f00a fd00 	bl	8021a32 <memcpy>
 8017032:	4620      	mov	r0, r4
 8017034:	b00a      	add	sp, #40	@ 0x28
 8017036:	bd70      	pop	{r4, r5, r6, pc}
 8017038:	20016dc0 	.word	0x20016dc0
 801703c:	08023ca8 	.word	0x08023ca8

08017040 <rcl_take>:
 8017040:	2800      	cmp	r0, #0
 8017042:	d04a      	beq.n	80170da <rcl_take+0x9a>
 8017044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017048:	4604      	mov	r4, r0
 801704a:	6800      	ldr	r0, [r0, #0]
 801704c:	b0a4      	sub	sp, #144	@ 0x90
 801704e:	2800      	cmp	r0, #0
 8017050:	d03b      	beq.n	80170ca <rcl_take+0x8a>
 8017052:	461f      	mov	r7, r3
 8017054:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8017058:	2b00      	cmp	r3, #0
 801705a:	d036      	beq.n	80170ca <rcl_take+0x8a>
 801705c:	460e      	mov	r6, r1
 801705e:	2900      	cmp	r1, #0
 8017060:	d039      	beq.n	80170d6 <rcl_take+0x96>
 8017062:	4615      	mov	r5, r2
 8017064:	2a00      	cmp	r2, #0
 8017066:	d03c      	beq.n	80170e2 <rcl_take+0xa2>
 8017068:	a802      	add	r0, sp, #8
 801706a:	f005 fced 	bl	801ca48 <rmw_get_zero_initialized_message_info>
 801706e:	f10d 0c08 	add.w	ip, sp, #8
 8017072:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017076:	46ae      	mov	lr, r5
 8017078:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801707c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017080:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017088:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801708c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8017090:	f04f 0800 	mov.w	r8, #0
 8017094:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8017098:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801709c:	6822      	ldr	r2, [r4, #0]
 801709e:	462b      	mov	r3, r5
 80170a0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80170a4:	9700      	str	r7, [sp, #0]
 80170a6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80170aa:	4631      	mov	r1, r6
 80170ac:	f006 fe42 	bl	801dd34 <rmw_take_with_info>
 80170b0:	4603      	mov	r3, r0
 80170b2:	b9c0      	cbnz	r0, 80170e6 <rcl_take+0xa6>
 80170b4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80170b8:	f240 1291 	movw	r2, #401	@ 0x191
 80170bc:	2900      	cmp	r1, #0
 80170be:	bf08      	it	eq
 80170c0:	4613      	moveq	r3, r2
 80170c2:	4618      	mov	r0, r3
 80170c4:	b024      	add	sp, #144	@ 0x90
 80170c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80170ce:	4618      	mov	r0, r3
 80170d0:	b024      	add	sp, #144	@ 0x90
 80170d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170d6:	230b      	movs	r3, #11
 80170d8:	e7f3      	b.n	80170c2 <rcl_take+0x82>
 80170da:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80170de:	4618      	mov	r0, r3
 80170e0:	4770      	bx	lr
 80170e2:	ad14      	add	r5, sp, #80	@ 0x50
 80170e4:	e7c0      	b.n	8017068 <rcl_take+0x28>
 80170e6:	f7fe ffc5 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 80170ea:	4603      	mov	r3, r0
 80170ec:	e7e9      	b.n	80170c2 <rcl_take+0x82>
 80170ee:	bf00      	nop

080170f0 <rcl_subscription_get_rmw_handle>:
 80170f0:	b118      	cbz	r0, 80170fa <rcl_subscription_get_rmw_handle+0xa>
 80170f2:	6800      	ldr	r0, [r0, #0]
 80170f4:	b108      	cbz	r0, 80170fa <rcl_subscription_get_rmw_handle+0xa>
 80170f6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80170fa:	4770      	bx	lr

080170fc <rcl_subscription_is_valid>:
 80170fc:	b130      	cbz	r0, 801710c <rcl_subscription_is_valid+0x10>
 80170fe:	6800      	ldr	r0, [r0, #0]
 8017100:	b120      	cbz	r0, 801710c <rcl_subscription_is_valid+0x10>
 8017102:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017106:	3800      	subs	r0, #0
 8017108:	bf18      	it	ne
 801710a:	2001      	movne	r0, #1
 801710c:	4770      	bx	lr
 801710e:	bf00      	nop

08017110 <rcl_get_system_time>:
 8017110:	4608      	mov	r0, r1
 8017112:	f7f7 bb49 	b.w	800e7a8 <rcutils_system_time_now>
 8017116:	bf00      	nop

08017118 <rcl_get_steady_time>:
 8017118:	4608      	mov	r0, r1
 801711a:	f7f7 bb6d 	b.w	800e7f8 <rcutils_steady_time_now>
 801711e:	bf00      	nop

08017120 <rcl_get_ros_time>:
 8017120:	7a03      	ldrb	r3, [r0, #8]
 8017122:	b510      	push	{r4, lr}
 8017124:	460c      	mov	r4, r1
 8017126:	b133      	cbz	r3, 8017136 <rcl_get_ros_time+0x16>
 8017128:	2105      	movs	r1, #5
 801712a:	f005 f875 	bl	801c218 <__atomic_load_8>
 801712e:	e9c4 0100 	strd	r0, r1, [r4]
 8017132:	2000      	movs	r0, #0
 8017134:	bd10      	pop	{r4, pc}
 8017136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801713a:	4608      	mov	r0, r1
 801713c:	f7f7 bb34 	b.w	800e7a8 <rcutils_system_time_now>

08017140 <rcl_clock_init>:
 8017140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017142:	4605      	mov	r5, r0
 8017144:	4610      	mov	r0, r2
 8017146:	4614      	mov	r4, r2
 8017148:	460e      	mov	r6, r1
 801714a:	f7f7 faed 	bl	800e728 <rcutils_allocator_is_valid>
 801714e:	b128      	cbz	r0, 801715c <rcl_clock_init+0x1c>
 8017150:	2d03      	cmp	r5, #3
 8017152:	d803      	bhi.n	801715c <rcl_clock_init+0x1c>
 8017154:	e8df f005 	tbb	[pc, r5]
 8017158:	06532e1d 	.word	0x06532e1d
 801715c:	f04f 0c0b 	mov.w	ip, #11
 8017160:	4660      	mov	r0, ip
 8017162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017164:	2e00      	cmp	r6, #0
 8017166:	d0f9      	beq.n	801715c <rcl_clock_init+0x1c>
 8017168:	2c00      	cmp	r4, #0
 801716a:	d0f7      	beq.n	801715c <rcl_clock_init+0x1c>
 801716c:	2300      	movs	r3, #0
 801716e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017172:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8017228 <rcl_clock_init+0xe8>
 8017176:	6133      	str	r3, [r6, #16]
 8017178:	f106 0514 	add.w	r5, r6, #20
 801717c:	469c      	mov	ip, r3
 801717e:	2703      	movs	r7, #3
 8017180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017184:	6823      	ldr	r3, [r4, #0]
 8017186:	602b      	str	r3, [r5, #0]
 8017188:	7037      	strb	r7, [r6, #0]
 801718a:	f8c6 e00c 	str.w	lr, [r6, #12]
 801718e:	4660      	mov	r0, ip
 8017190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017192:	2e00      	cmp	r6, #0
 8017194:	d0e2      	beq.n	801715c <rcl_clock_init+0x1c>
 8017196:	2300      	movs	r3, #0
 8017198:	7033      	strb	r3, [r6, #0]
 801719a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801719e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80171a2:	469c      	mov	ip, r3
 80171a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171a6:	f106 0514 	add.w	r5, r6, #20
 80171aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80171ac:	6823      	ldr	r3, [r4, #0]
 80171ae:	602b      	str	r3, [r5, #0]
 80171b0:	4660      	mov	r0, ip
 80171b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b4:	2e00      	cmp	r6, #0
 80171b6:	d0d1      	beq.n	801715c <rcl_clock_init+0x1c>
 80171b8:	2c00      	cmp	r4, #0
 80171ba:	d0cf      	beq.n	801715c <rcl_clock_init+0x1c>
 80171bc:	2700      	movs	r7, #0
 80171be:	7037      	strb	r7, [r6, #0]
 80171c0:	46a4      	mov	ip, r4
 80171c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80171c6:	f106 0514 	add.w	r5, r6, #20
 80171ca:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80171ce:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80171d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80171d4:	f8dc 3000 	ldr.w	r3, [ip]
 80171d8:	602b      	str	r3, [r5, #0]
 80171da:	6921      	ldr	r1, [r4, #16]
 80171dc:	6823      	ldr	r3, [r4, #0]
 80171de:	2010      	movs	r0, #16
 80171e0:	4798      	blx	r3
 80171e2:	6130      	str	r0, [r6, #16]
 80171e4:	b1d0      	cbz	r0, 801721c <rcl_clock_init+0xdc>
 80171e6:	2200      	movs	r2, #0
 80171e8:	2300      	movs	r3, #0
 80171ea:	e9c0 2300 	strd	r2, r3, [r0]
 80171ee:	2301      	movs	r3, #1
 80171f0:	7207      	strb	r7, [r0, #8]
 80171f2:	4a0c      	ldr	r2, [pc, #48]	@ (8017224 <rcl_clock_init+0xe4>)
 80171f4:	7033      	strb	r3, [r6, #0]
 80171f6:	46bc      	mov	ip, r7
 80171f8:	60f2      	str	r2, [r6, #12]
 80171fa:	4660      	mov	r0, ip
 80171fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171fe:	2e00      	cmp	r6, #0
 8017200:	d0ac      	beq.n	801715c <rcl_clock_init+0x1c>
 8017202:	2c00      	cmp	r4, #0
 8017204:	d0aa      	beq.n	801715c <rcl_clock_init+0x1c>
 8017206:	2300      	movs	r3, #0
 8017208:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801720c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 801722c <rcl_clock_init+0xec>
 8017210:	6133      	str	r3, [r6, #16]
 8017212:	f106 0514 	add.w	r5, r6, #20
 8017216:	469c      	mov	ip, r3
 8017218:	2702      	movs	r7, #2
 801721a:	e7b1      	b.n	8017180 <rcl_clock_init+0x40>
 801721c:	f04f 0c0a 	mov.w	ip, #10
 8017220:	e79e      	b.n	8017160 <rcl_clock_init+0x20>
 8017222:	bf00      	nop
 8017224:	08017121 	.word	0x08017121
 8017228:	08017119 	.word	0x08017119
 801722c:	08017111 	.word	0x08017111

08017230 <rcl_clock_get_now>:
 8017230:	b140      	cbz	r0, 8017244 <rcl_clock_get_now+0x14>
 8017232:	b139      	cbz	r1, 8017244 <rcl_clock_get_now+0x14>
 8017234:	7803      	ldrb	r3, [r0, #0]
 8017236:	b11b      	cbz	r3, 8017240 <rcl_clock_get_now+0x10>
 8017238:	68c3      	ldr	r3, [r0, #12]
 801723a:	b10b      	cbz	r3, 8017240 <rcl_clock_get_now+0x10>
 801723c:	6900      	ldr	r0, [r0, #16]
 801723e:	4718      	bx	r3
 8017240:	2001      	movs	r0, #1
 8017242:	4770      	bx	lr
 8017244:	200b      	movs	r0, #11
 8017246:	4770      	bx	lr

08017248 <rcl_timer_call>:
 8017248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801724c:	b087      	sub	sp, #28
 801724e:	2800      	cmp	r0, #0
 8017250:	d06d      	beq.n	801732e <rcl_timer_call+0xe6>
 8017252:	6803      	ldr	r3, [r0, #0]
 8017254:	4604      	mov	r4, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d063      	beq.n	8017322 <rcl_timer_call+0xda>
 801725a:	f3bf 8f5b 	dmb	ish
 801725e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017262:	f3bf 8f5b 	dmb	ish
 8017266:	2b00      	cmp	r3, #0
 8017268:	d150      	bne.n	801730c <rcl_timer_call+0xc4>
 801726a:	6803      	ldr	r3, [r0, #0]
 801726c:	a904      	add	r1, sp, #16
 801726e:	6818      	ldr	r0, [r3, #0]
 8017270:	f7ff ffde 	bl	8017230 <rcl_clock_get_now>
 8017274:	4605      	mov	r5, r0
 8017276:	2800      	cmp	r0, #0
 8017278:	d14a      	bne.n	8017310 <rcl_timer_call+0xc8>
 801727a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801727e:	2b00      	cmp	r3, #0
 8017280:	db4a      	blt.n	8017318 <rcl_timer_call+0xd0>
 8017282:	6820      	ldr	r0, [r4, #0]
 8017284:	f04f 0a05 	mov.w	sl, #5
 8017288:	f8cd a000 	str.w	sl, [sp]
 801728c:	3020      	adds	r0, #32
 801728e:	f005 f82f 	bl	801c2f0 <__atomic_exchange_8>
 8017292:	6823      	ldr	r3, [r4, #0]
 8017294:	f3bf 8f5b 	dmb	ish
 8017298:	4680      	mov	r8, r0
 801729a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801729e:	f3bf 8f5b 	dmb	ish
 80172a2:	6820      	ldr	r0, [r4, #0]
 80172a4:	4689      	mov	r9, r1
 80172a6:	3028      	adds	r0, #40	@ 0x28
 80172a8:	4651      	mov	r1, sl
 80172aa:	f004 ffb5 	bl	801c218 <__atomic_load_8>
 80172ae:	4606      	mov	r6, r0
 80172b0:	6820      	ldr	r0, [r4, #0]
 80172b2:	460f      	mov	r7, r1
 80172b4:	3018      	adds	r0, #24
 80172b6:	4651      	mov	r1, sl
 80172b8:	f004 ffae 	bl	801c218 <__atomic_load_8>
 80172bc:	1836      	adds	r6, r6, r0
 80172be:	4602      	mov	r2, r0
 80172c0:	4682      	mov	sl, r0
 80172c2:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80172c6:	eb47 0701 	adc.w	r7, r7, r1
 80172ca:	4286      	cmp	r6, r0
 80172cc:	460b      	mov	r3, r1
 80172ce:	eb77 010c 	sbcs.w	r1, r7, ip
 80172d2:	da04      	bge.n	80172de <rcl_timer_call+0x96>
 80172d4:	ea53 0102 	orrs.w	r1, r3, r2
 80172d8:	d12e      	bne.n	8017338 <rcl_timer_call+0xf0>
 80172da:	4606      	mov	r6, r0
 80172dc:	4667      	mov	r7, ip
 80172de:	6820      	ldr	r0, [r4, #0]
 80172e0:	2105      	movs	r1, #5
 80172e2:	4632      	mov	r2, r6
 80172e4:	463b      	mov	r3, r7
 80172e6:	3028      	adds	r0, #40	@ 0x28
 80172e8:	9100      	str	r1, [sp, #0]
 80172ea:	f004 ffcb 	bl	801c284 <__atomic_store_8>
 80172ee:	f1bb 0f00 	cmp.w	fp, #0
 80172f2:	d00d      	beq.n	8017310 <rcl_timer_call+0xc8>
 80172f4:	9a04      	ldr	r2, [sp, #16]
 80172f6:	9b05      	ldr	r3, [sp, #20]
 80172f8:	ebb2 0208 	subs.w	r2, r2, r8
 80172fc:	4620      	mov	r0, r4
 80172fe:	eb63 0309 	sbc.w	r3, r3, r9
 8017302:	47d8      	blx	fp
 8017304:	4628      	mov	r0, r5
 8017306:	b007      	add	sp, #28
 8017308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801730c:	f240 3521 	movw	r5, #801	@ 0x321
 8017310:	4628      	mov	r0, r5
 8017312:	b007      	add	sp, #28
 8017314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017318:	2501      	movs	r5, #1
 801731a:	4628      	mov	r0, r5
 801731c:	b007      	add	sp, #28
 801731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017322:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8017326:	4628      	mov	r0, r5
 8017328:	b007      	add	sp, #28
 801732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801732e:	250b      	movs	r5, #11
 8017330:	4628      	mov	r0, r5
 8017332:	b007      	add	sp, #28
 8017334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017338:	1b80      	subs	r0, r0, r6
 801733a:	eb6c 0107 	sbc.w	r1, ip, r7
 801733e:	3801      	subs	r0, #1
 8017340:	f161 0100 	sbc.w	r1, r1, #0
 8017344:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017348:	f7e9 fc68 	bl	8000c1c <__aeabi_ldivmod>
 801734c:	9b02      	ldr	r3, [sp, #8]
 801734e:	3001      	adds	r0, #1
 8017350:	f141 0100 	adc.w	r1, r1, #0
 8017354:	fb00 f303 	mul.w	r3, r0, r3
 8017358:	fb01 330a 	mla	r3, r1, sl, r3
 801735c:	fba0 0a0a 	umull	r0, sl, r0, sl
 8017360:	1986      	adds	r6, r0, r6
 8017362:	4453      	add	r3, sl
 8017364:	eb43 0707 	adc.w	r7, r3, r7
 8017368:	e7b9      	b.n	80172de <rcl_timer_call+0x96>
 801736a:	bf00      	nop

0801736c <rcl_timer_is_ready>:
 801736c:	b570      	push	{r4, r5, r6, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	b378      	cbz	r0, 80173d2 <rcl_timer_is_ready+0x66>
 8017372:	6803      	ldr	r3, [r0, #0]
 8017374:	4604      	mov	r4, r0
 8017376:	b383      	cbz	r3, 80173da <rcl_timer_is_ready+0x6e>
 8017378:	460d      	mov	r5, r1
 801737a:	b351      	cbz	r1, 80173d2 <rcl_timer_is_ready+0x66>
 801737c:	f3bf 8f5b 	dmb	ish
 8017380:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8017384:	f3bf 8f5b 	dmb	ish
 8017388:	b953      	cbnz	r3, 80173a0 <rcl_timer_is_ready+0x34>
 801738a:	6803      	ldr	r3, [r0, #0]
 801738c:	4669      	mov	r1, sp
 801738e:	6818      	ldr	r0, [r3, #0]
 8017390:	f7ff ff4e 	bl	8017230 <rcl_clock_get_now>
 8017394:	4606      	mov	r6, r0
 8017396:	b140      	cbz	r0, 80173aa <rcl_timer_is_ready+0x3e>
 8017398:	f240 3321 	movw	r3, #801	@ 0x321
 801739c:	4298      	cmp	r0, r3
 801739e:	d101      	bne.n	80173a4 <rcl_timer_is_ready+0x38>
 80173a0:	2600      	movs	r6, #0
 80173a2:	702e      	strb	r6, [r5, #0]
 80173a4:	4630      	mov	r0, r6
 80173a6:	b002      	add	sp, #8
 80173a8:	bd70      	pop	{r4, r5, r6, pc}
 80173aa:	6820      	ldr	r0, [r4, #0]
 80173ac:	2105      	movs	r1, #5
 80173ae:	3028      	adds	r0, #40	@ 0x28
 80173b0:	f004 ff32 	bl	801c218 <__atomic_load_8>
 80173b4:	9b00      	ldr	r3, [sp, #0]
 80173b6:	1ac0      	subs	r0, r0, r3
 80173b8:	9b01      	ldr	r3, [sp, #4]
 80173ba:	eb61 0103 	sbc.w	r1, r1, r3
 80173be:	2801      	cmp	r0, #1
 80173c0:	f171 0300 	sbcs.w	r3, r1, #0
 80173c4:	bfb4      	ite	lt
 80173c6:	2301      	movlt	r3, #1
 80173c8:	2300      	movge	r3, #0
 80173ca:	4630      	mov	r0, r6
 80173cc:	702b      	strb	r3, [r5, #0]
 80173ce:	b002      	add	sp, #8
 80173d0:	bd70      	pop	{r4, r5, r6, pc}
 80173d2:	260b      	movs	r6, #11
 80173d4:	4630      	mov	r0, r6
 80173d6:	b002      	add	sp, #8
 80173d8:	bd70      	pop	{r4, r5, r6, pc}
 80173da:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80173de:	e7e1      	b.n	80173a4 <rcl_timer_is_ready+0x38>

080173e0 <rcl_timer_get_time_until_next_call>:
 80173e0:	b570      	push	{r4, r5, r6, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	b330      	cbz	r0, 8017434 <rcl_timer_get_time_until_next_call+0x54>
 80173e6:	6803      	ldr	r3, [r0, #0]
 80173e8:	4604      	mov	r4, r0
 80173ea:	b33b      	cbz	r3, 801743c <rcl_timer_get_time_until_next_call+0x5c>
 80173ec:	460d      	mov	r5, r1
 80173ee:	b309      	cbz	r1, 8017434 <rcl_timer_get_time_until_next_call+0x54>
 80173f0:	f3bf 8f5b 	dmb	ish
 80173f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80173f8:	f3bf 8f5b 	dmb	ish
 80173fc:	b9ab      	cbnz	r3, 801742a <rcl_timer_get_time_until_next_call+0x4a>
 80173fe:	6803      	ldr	r3, [r0, #0]
 8017400:	4669      	mov	r1, sp
 8017402:	6818      	ldr	r0, [r3, #0]
 8017404:	f7ff ff14 	bl	8017230 <rcl_clock_get_now>
 8017408:	4606      	mov	r6, r0
 801740a:	b958      	cbnz	r0, 8017424 <rcl_timer_get_time_until_next_call+0x44>
 801740c:	6820      	ldr	r0, [r4, #0]
 801740e:	2105      	movs	r1, #5
 8017410:	3028      	adds	r0, #40	@ 0x28
 8017412:	f004 ff01 	bl	801c218 <__atomic_load_8>
 8017416:	9b00      	ldr	r3, [sp, #0]
 8017418:	1ac0      	subs	r0, r0, r3
 801741a:	9b01      	ldr	r3, [sp, #4]
 801741c:	6028      	str	r0, [r5, #0]
 801741e:	eb61 0103 	sbc.w	r1, r1, r3
 8017422:	6069      	str	r1, [r5, #4]
 8017424:	4630      	mov	r0, r6
 8017426:	b002      	add	sp, #8
 8017428:	bd70      	pop	{r4, r5, r6, pc}
 801742a:	f240 3621 	movw	r6, #801	@ 0x321
 801742e:	4630      	mov	r0, r6
 8017430:	b002      	add	sp, #8
 8017432:	bd70      	pop	{r4, r5, r6, pc}
 8017434:	260b      	movs	r6, #11
 8017436:	4630      	mov	r0, r6
 8017438:	b002      	add	sp, #8
 801743a:	bd70      	pop	{r4, r5, r6, pc}
 801743c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8017440:	e7f0      	b.n	8017424 <rcl_timer_get_time_until_next_call+0x44>
 8017442:	bf00      	nop

08017444 <rcl_timer_get_guard_condition>:
 8017444:	b130      	cbz	r0, 8017454 <rcl_timer_get_guard_condition+0x10>
 8017446:	6800      	ldr	r0, [r0, #0]
 8017448:	b120      	cbz	r0, 8017454 <rcl_timer_get_guard_condition+0x10>
 801744a:	68c3      	ldr	r3, [r0, #12]
 801744c:	b10b      	cbz	r3, 8017452 <rcl_timer_get_guard_condition+0xe>
 801744e:	3008      	adds	r0, #8
 8017450:	4770      	bx	lr
 8017452:	4618      	mov	r0, r3
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop

08017458 <rcl_validate_enclave_name_with_size>:
 8017458:	b378      	cbz	r0, 80174ba <rcl_validate_enclave_name_with_size+0x62>
 801745a:	b570      	push	{r4, r5, r6, lr}
 801745c:	4615      	mov	r5, r2
 801745e:	b0c2      	sub	sp, #264	@ 0x108
 8017460:	b302      	cbz	r2, 80174a4 <rcl_validate_enclave_name_with_size+0x4c>
 8017462:	461e      	mov	r6, r3
 8017464:	466a      	mov	r2, sp
 8017466:	ab01      	add	r3, sp, #4
 8017468:	460c      	mov	r4, r1
 801746a:	f005 fb6b 	bl	801cb44 <rmw_validate_namespace_with_size>
 801746e:	4684      	mov	ip, r0
 8017470:	b9e8      	cbnz	r0, 80174ae <rcl_validate_enclave_name_with_size+0x56>
 8017472:	9b00      	ldr	r3, [sp, #0]
 8017474:	b923      	cbnz	r3, 8017480 <rcl_validate_enclave_name_with_size+0x28>
 8017476:	2300      	movs	r3, #0
 8017478:	602b      	str	r3, [r5, #0]
 801747a:	4660      	mov	r0, ip
 801747c:	b042      	add	sp, #264	@ 0x108
 801747e:	bd70      	pop	{r4, r5, r6, pc}
 8017480:	2b07      	cmp	r3, #7
 8017482:	d007      	beq.n	8017494 <rcl_validate_enclave_name_with_size+0x3c>
 8017484:	1e5a      	subs	r2, r3, #1
 8017486:	2a05      	cmp	r2, #5
 8017488:	d833      	bhi.n	80174f2 <rcl_validate_enclave_name_with_size+0x9a>
 801748a:	e8df f002 	tbb	[pc, r2]
 801748e:	2c2f      	.short	0x2c2f
 8017490:	1a232629 	.word	0x1a232629
 8017494:	2cff      	cmp	r4, #255	@ 0xff
 8017496:	d9ee      	bls.n	8017476 <rcl_validate_enclave_name_with_size+0x1e>
 8017498:	602b      	str	r3, [r5, #0]
 801749a:	2e00      	cmp	r6, #0
 801749c:	d0ed      	beq.n	801747a <rcl_validate_enclave_name_with_size+0x22>
 801749e:	23fe      	movs	r3, #254	@ 0xfe
 80174a0:	6033      	str	r3, [r6, #0]
 80174a2:	e7ea      	b.n	801747a <rcl_validate_enclave_name_with_size+0x22>
 80174a4:	f04f 0c0b 	mov.w	ip, #11
 80174a8:	4660      	mov	r0, ip
 80174aa:	b042      	add	sp, #264	@ 0x108
 80174ac:	bd70      	pop	{r4, r5, r6, pc}
 80174ae:	f7fe fde1 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 80174b2:	4684      	mov	ip, r0
 80174b4:	4660      	mov	r0, ip
 80174b6:	b042      	add	sp, #264	@ 0x108
 80174b8:	bd70      	pop	{r4, r5, r6, pc}
 80174ba:	f04f 0c0b 	mov.w	ip, #11
 80174be:	4660      	mov	r0, ip
 80174c0:	4770      	bx	lr
 80174c2:	2306      	movs	r3, #6
 80174c4:	602b      	str	r3, [r5, #0]
 80174c6:	2e00      	cmp	r6, #0
 80174c8:	d0d7      	beq.n	801747a <rcl_validate_enclave_name_with_size+0x22>
 80174ca:	9b01      	ldr	r3, [sp, #4]
 80174cc:	6033      	str	r3, [r6, #0]
 80174ce:	4660      	mov	r0, ip
 80174d0:	b042      	add	sp, #264	@ 0x108
 80174d2:	bd70      	pop	{r4, r5, r6, pc}
 80174d4:	2305      	movs	r3, #5
 80174d6:	602b      	str	r3, [r5, #0]
 80174d8:	e7f5      	b.n	80174c6 <rcl_validate_enclave_name_with_size+0x6e>
 80174da:	2304      	movs	r3, #4
 80174dc:	602b      	str	r3, [r5, #0]
 80174de:	e7f2      	b.n	80174c6 <rcl_validate_enclave_name_with_size+0x6e>
 80174e0:	2303      	movs	r3, #3
 80174e2:	602b      	str	r3, [r5, #0]
 80174e4:	e7ef      	b.n	80174c6 <rcl_validate_enclave_name_with_size+0x6e>
 80174e6:	2302      	movs	r3, #2
 80174e8:	602b      	str	r3, [r5, #0]
 80174ea:	e7ec      	b.n	80174c6 <rcl_validate_enclave_name_with_size+0x6e>
 80174ec:	2301      	movs	r3, #1
 80174ee:	602b      	str	r3, [r5, #0]
 80174f0:	e7e9      	b.n	80174c6 <rcl_validate_enclave_name_with_size+0x6e>
 80174f2:	4a04      	ldr	r2, [pc, #16]	@ (8017504 <rcl_validate_enclave_name_with_size+0xac>)
 80174f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80174f8:	a802      	add	r0, sp, #8
 80174fa:	f005 f847 	bl	801c58c <rcutils_snprintf>
 80174fe:	f04f 0c01 	mov.w	ip, #1
 8017502:	e7ba      	b.n	801747a <rcl_validate_enclave_name_with_size+0x22>
 8017504:	08023cf8 	.word	0x08023cf8

08017508 <rcl_validate_enclave_name>:
 8017508:	b168      	cbz	r0, 8017526 <rcl_validate_enclave_name+0x1e>
 801750a:	b570      	push	{r4, r5, r6, lr}
 801750c:	460d      	mov	r5, r1
 801750e:	4616      	mov	r6, r2
 8017510:	4604      	mov	r4, r0
 8017512:	f7e8 fe75 	bl	8000200 <strlen>
 8017516:	4633      	mov	r3, r6
 8017518:	4601      	mov	r1, r0
 801751a:	462a      	mov	r2, r5
 801751c:	4620      	mov	r0, r4
 801751e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017522:	f7ff bf99 	b.w	8017458 <rcl_validate_enclave_name_with_size>
 8017526:	200b      	movs	r0, #11
 8017528:	4770      	bx	lr
 801752a:	bf00      	nop

0801752c <rcl_get_zero_initialized_wait_set>:
 801752c:	b510      	push	{r4, lr}
 801752e:	4c08      	ldr	r4, [pc, #32]	@ (8017550 <rcl_get_zero_initialized_wait_set+0x24>)
 8017530:	4686      	mov	lr, r0
 8017532:	4684      	mov	ip, r0
 8017534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801753a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801753c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017542:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017546:	6823      	ldr	r3, [r4, #0]
 8017548:	f8cc 3000 	str.w	r3, [ip]
 801754c:	4670      	mov	r0, lr
 801754e:	bd10      	pop	{r4, pc}
 8017550:	08023d58 	.word	0x08023d58

08017554 <rcl_wait_set_is_valid>:
 8017554:	b118      	cbz	r0, 801755e <rcl_wait_set_is_valid+0xa>
 8017556:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017558:	3800      	subs	r0, #0
 801755a:	bf18      	it	ne
 801755c:	2001      	movne	r0, #1
 801755e:	4770      	bx	lr

08017560 <rcl_wait_set_fini>:
 8017560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017564:	b082      	sub	sp, #8
 8017566:	2800      	cmp	r0, #0
 8017568:	f000 8095 	beq.w	8017696 <rcl_wait_set_fini+0x136>
 801756c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801756e:	4604      	mov	r4, r0
 8017570:	2e00      	cmp	r6, #0
 8017572:	f000 808c 	beq.w	801768e <rcl_wait_set_fini+0x12e>
 8017576:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8017578:	f006 fdca 	bl	801e110 <rmw_destroy_wait_set>
 801757c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801757e:	1e06      	subs	r6, r0, #0
 8017580:	bf18      	it	ne
 8017582:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017586:	2d00      	cmp	r5, #0
 8017588:	f000 8081 	beq.w	801768e <rcl_wait_set_fini+0x12e>
 801758c:	6820      	ldr	r0, [r4, #0]
 801758e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017592:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017594:	2700      	movs	r7, #0
 8017596:	6067      	str	r7, [r4, #4]
 8017598:	602f      	str	r7, [r5, #0]
 801759a:	b120      	cbz	r0, 80175a6 <rcl_wait_set_fini+0x46>
 801759c:	9101      	str	r1, [sp, #4]
 801759e:	47c0      	blx	r8
 80175a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175a2:	9901      	ldr	r1, [sp, #4]
 80175a4:	6027      	str	r7, [r4, #0]
 80175a6:	68a8      	ldr	r0, [r5, #8]
 80175a8:	b120      	cbz	r0, 80175b4 <rcl_wait_set_fini+0x54>
 80175aa:	47c0      	blx	r8
 80175ac:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175ae:	2300      	movs	r3, #0
 80175b0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80175b4:	68a0      	ldr	r0, [r4, #8]
 80175b6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175b8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175ba:	f04f 0800 	mov.w	r8, #0
 80175be:	f8c4 800c 	str.w	r8, [r4, #12]
 80175c2:	f8c5 800c 	str.w	r8, [r5, #12]
 80175c6:	b128      	cbz	r0, 80175d4 <rcl_wait_set_fini+0x74>
 80175c8:	47b8      	blx	r7
 80175ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175cc:	f8c4 8008 	str.w	r8, [r4, #8]
 80175d0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175d4:	6968      	ldr	r0, [r5, #20]
 80175d6:	f04f 0800 	mov.w	r8, #0
 80175da:	f8c5 8010 	str.w	r8, [r5, #16]
 80175de:	b128      	cbz	r0, 80175ec <rcl_wait_set_fini+0x8c>
 80175e0:	47b8      	blx	r7
 80175e2:	f8c5 8014 	str.w	r8, [r5, #20]
 80175e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175e8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175ea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175ec:	6920      	ldr	r0, [r4, #16]
 80175ee:	f04f 0800 	mov.w	r8, #0
 80175f2:	f8c4 8014 	str.w	r8, [r4, #20]
 80175f6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80175fa:	b128      	cbz	r0, 8017608 <rcl_wait_set_fini+0xa8>
 80175fc:	47b8      	blx	r7
 80175fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017600:	f8c4 8010 	str.w	r8, [r4, #16]
 8017604:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017606:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017608:	69a0      	ldr	r0, [r4, #24]
 801760a:	f04f 0800 	mov.w	r8, #0
 801760e:	f8c4 801c 	str.w	r8, [r4, #28]
 8017612:	f8c5 8018 	str.w	r8, [r5, #24]
 8017616:	b128      	cbz	r0, 8017624 <rcl_wait_set_fini+0xc4>
 8017618:	9101      	str	r1, [sp, #4]
 801761a:	47b8      	blx	r7
 801761c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801761e:	9901      	ldr	r1, [sp, #4]
 8017620:	f8c4 8018 	str.w	r8, [r4, #24]
 8017624:	6a28      	ldr	r0, [r5, #32]
 8017626:	b120      	cbz	r0, 8017632 <rcl_wait_set_fini+0xd2>
 8017628:	47b8      	blx	r7
 801762a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801762c:	2300      	movs	r3, #0
 801762e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8017632:	6a20      	ldr	r0, [r4, #32]
 8017634:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017638:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801763a:	2700      	movs	r7, #0
 801763c:	6267      	str	r7, [r4, #36]	@ 0x24
 801763e:	626f      	str	r7, [r5, #36]	@ 0x24
 8017640:	b120      	cbz	r0, 801764c <rcl_wait_set_fini+0xec>
 8017642:	9101      	str	r1, [sp, #4]
 8017644:	47c0      	blx	r8
 8017646:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017648:	9901      	ldr	r1, [sp, #4]
 801764a:	6227      	str	r7, [r4, #32]
 801764c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801764e:	b120      	cbz	r0, 801765a <rcl_wait_set_fini+0xfa>
 8017650:	47c0      	blx	r8
 8017652:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017654:	2300      	movs	r3, #0
 8017656:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801765a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801765c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017660:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017662:	2700      	movs	r7, #0
 8017664:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8017666:	632f      	str	r7, [r5, #48]	@ 0x30
 8017668:	b120      	cbz	r0, 8017674 <rcl_wait_set_fini+0x114>
 801766a:	9101      	str	r1, [sp, #4]
 801766c:	47c0      	blx	r8
 801766e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017670:	9901      	ldr	r1, [sp, #4]
 8017672:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017674:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017676:	b120      	cbz	r0, 8017682 <rcl_wait_set_fini+0x122>
 8017678:	47c0      	blx	r8
 801767a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801767c:	2300      	movs	r3, #0
 801767e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8017682:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017684:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017686:	4628      	mov	r0, r5
 8017688:	4798      	blx	r3
 801768a:	2300      	movs	r3, #0
 801768c:	6323      	str	r3, [r4, #48]	@ 0x30
 801768e:	4630      	mov	r0, r6
 8017690:	b002      	add	sp, #8
 8017692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017696:	260b      	movs	r6, #11
 8017698:	4630      	mov	r0, r6
 801769a:	b002      	add	sp, #8
 801769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176a0 <rcl_wait_set_add_subscription>:
 80176a0:	b318      	cbz	r0, 80176ea <rcl_wait_set_add_subscription+0x4a>
 80176a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80176a4:	b570      	push	{r4, r5, r6, lr}
 80176a6:	4604      	mov	r4, r0
 80176a8:	b30b      	cbz	r3, 80176ee <rcl_wait_set_add_subscription+0x4e>
 80176aa:	b319      	cbz	r1, 80176f4 <rcl_wait_set_add_subscription+0x54>
 80176ac:	681d      	ldr	r5, [r3, #0]
 80176ae:	6840      	ldr	r0, [r0, #4]
 80176b0:	4285      	cmp	r5, r0
 80176b2:	d217      	bcs.n	80176e4 <rcl_wait_set_add_subscription+0x44>
 80176b4:	6820      	ldr	r0, [r4, #0]
 80176b6:	1c6e      	adds	r6, r5, #1
 80176b8:	601e      	str	r6, [r3, #0]
 80176ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80176be:	b102      	cbz	r2, 80176c2 <rcl_wait_set_add_subscription+0x22>
 80176c0:	6015      	str	r5, [r2, #0]
 80176c2:	4608      	mov	r0, r1
 80176c4:	f7ff fd14 	bl	80170f0 <rcl_subscription_get_rmw_handle>
 80176c8:	b150      	cbz	r0, 80176e0 <rcl_wait_set_add_subscription+0x40>
 80176ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176cc:	6842      	ldr	r2, [r0, #4]
 80176ce:	689b      	ldr	r3, [r3, #8]
 80176d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80176d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80176d6:	6853      	ldr	r3, [r2, #4]
 80176d8:	3301      	adds	r3, #1
 80176da:	2000      	movs	r0, #0
 80176dc:	6053      	str	r3, [r2, #4]
 80176de:	bd70      	pop	{r4, r5, r6, pc}
 80176e0:	2001      	movs	r0, #1
 80176e2:	bd70      	pop	{r4, r5, r6, pc}
 80176e4:	f240 3086 	movw	r0, #902	@ 0x386
 80176e8:	bd70      	pop	{r4, r5, r6, pc}
 80176ea:	200b      	movs	r0, #11
 80176ec:	4770      	bx	lr
 80176ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80176f2:	bd70      	pop	{r4, r5, r6, pc}
 80176f4:	200b      	movs	r0, #11
 80176f6:	bd70      	pop	{r4, r5, r6, pc}

080176f8 <rcl_wait_set_clear>:
 80176f8:	2800      	cmp	r0, #0
 80176fa:	d073      	beq.n	80177e4 <rcl_wait_set_clear+0xec>
 80176fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80176fe:	b510      	push	{r4, lr}
 8017700:	4604      	mov	r4, r0
 8017702:	2b00      	cmp	r3, #0
 8017704:	d070      	beq.n	80177e8 <rcl_wait_set_clear+0xf0>
 8017706:	6800      	ldr	r0, [r0, #0]
 8017708:	b138      	cbz	r0, 801771a <rcl_wait_set_clear+0x22>
 801770a:	6862      	ldr	r2, [r4, #4]
 801770c:	2100      	movs	r1, #0
 801770e:	0092      	lsls	r2, r2, #2
 8017710:	f00a f927 	bl	8021962 <memset>
 8017714:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017716:	2200      	movs	r2, #0
 8017718:	601a      	str	r2, [r3, #0]
 801771a:	68a0      	ldr	r0, [r4, #8]
 801771c:	b138      	cbz	r0, 801772e <rcl_wait_set_clear+0x36>
 801771e:	68e2      	ldr	r2, [r4, #12]
 8017720:	2100      	movs	r1, #0
 8017722:	0092      	lsls	r2, r2, #2
 8017724:	f00a f91d 	bl	8021962 <memset>
 8017728:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801772a:	2200      	movs	r2, #0
 801772c:	60da      	str	r2, [r3, #12]
 801772e:	69a0      	ldr	r0, [r4, #24]
 8017730:	b138      	cbz	r0, 8017742 <rcl_wait_set_clear+0x4a>
 8017732:	69e2      	ldr	r2, [r4, #28]
 8017734:	2100      	movs	r1, #0
 8017736:	0092      	lsls	r2, r2, #2
 8017738:	f00a f913 	bl	8021962 <memset>
 801773c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801773e:	2200      	movs	r2, #0
 8017740:	619a      	str	r2, [r3, #24]
 8017742:	6a20      	ldr	r0, [r4, #32]
 8017744:	b138      	cbz	r0, 8017756 <rcl_wait_set_clear+0x5e>
 8017746:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017748:	2100      	movs	r1, #0
 801774a:	0092      	lsls	r2, r2, #2
 801774c:	f00a f909 	bl	8021962 <memset>
 8017750:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017752:	2200      	movs	r2, #0
 8017754:	625a      	str	r2, [r3, #36]	@ 0x24
 8017756:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017758:	b138      	cbz	r0, 801776a <rcl_wait_set_clear+0x72>
 801775a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801775c:	2100      	movs	r1, #0
 801775e:	0092      	lsls	r2, r2, #2
 8017760:	f00a f8ff 	bl	8021962 <memset>
 8017764:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017766:	2200      	movs	r2, #0
 8017768:	631a      	str	r2, [r3, #48]	@ 0x30
 801776a:	6920      	ldr	r0, [r4, #16]
 801776c:	b138      	cbz	r0, 801777e <rcl_wait_set_clear+0x86>
 801776e:	6962      	ldr	r2, [r4, #20]
 8017770:	2100      	movs	r1, #0
 8017772:	0092      	lsls	r2, r2, #2
 8017774:	f00a f8f5 	bl	8021962 <memset>
 8017778:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801777a:	2200      	movs	r2, #0
 801777c:	641a      	str	r2, [r3, #64]	@ 0x40
 801777e:	6898      	ldr	r0, [r3, #8]
 8017780:	b138      	cbz	r0, 8017792 <rcl_wait_set_clear+0x9a>
 8017782:	685a      	ldr	r2, [r3, #4]
 8017784:	2100      	movs	r1, #0
 8017786:	0092      	lsls	r2, r2, #2
 8017788:	f00a f8eb 	bl	8021962 <memset>
 801778c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801778e:	2200      	movs	r2, #0
 8017790:	605a      	str	r2, [r3, #4]
 8017792:	6958      	ldr	r0, [r3, #20]
 8017794:	b138      	cbz	r0, 80177a6 <rcl_wait_set_clear+0xae>
 8017796:	691a      	ldr	r2, [r3, #16]
 8017798:	2100      	movs	r1, #0
 801779a:	0092      	lsls	r2, r2, #2
 801779c:	f00a f8e1 	bl	8021962 <memset>
 80177a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177a2:	2200      	movs	r2, #0
 80177a4:	611a      	str	r2, [r3, #16]
 80177a6:	6a18      	ldr	r0, [r3, #32]
 80177a8:	b138      	cbz	r0, 80177ba <rcl_wait_set_clear+0xc2>
 80177aa:	69da      	ldr	r2, [r3, #28]
 80177ac:	2100      	movs	r1, #0
 80177ae:	0092      	lsls	r2, r2, #2
 80177b0:	f00a f8d7 	bl	8021962 <memset>
 80177b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177b6:	2200      	movs	r2, #0
 80177b8:	61da      	str	r2, [r3, #28]
 80177ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80177bc:	b138      	cbz	r0, 80177ce <rcl_wait_set_clear+0xd6>
 80177be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80177c0:	2100      	movs	r1, #0
 80177c2:	0092      	lsls	r2, r2, #2
 80177c4:	f00a f8cd 	bl	8021962 <memset>
 80177c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177ca:	2200      	movs	r2, #0
 80177cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80177ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80177d0:	b138      	cbz	r0, 80177e2 <rcl_wait_set_clear+0xea>
 80177d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80177d4:	2100      	movs	r1, #0
 80177d6:	0092      	lsls	r2, r2, #2
 80177d8:	f00a f8c3 	bl	8021962 <memset>
 80177dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177de:	2000      	movs	r0, #0
 80177e0:	6358      	str	r0, [r3, #52]	@ 0x34
 80177e2:	bd10      	pop	{r4, pc}
 80177e4:	200b      	movs	r0, #11
 80177e6:	4770      	bx	lr
 80177e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80177ec:	bd10      	pop	{r4, pc}
 80177ee:	bf00      	nop

080177f0 <rcl_wait_set_resize>:
 80177f0:	2800      	cmp	r0, #0
 80177f2:	f000 8185 	beq.w	8017b00 <rcl_wait_set_resize+0x310>
 80177f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177fa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80177fc:	b083      	sub	sp, #12
 80177fe:	4605      	mov	r5, r0
 8017800:	2c00      	cmp	r4, #0
 8017802:	f000 817f 	beq.w	8017b04 <rcl_wait_set_resize+0x314>
 8017806:	f04f 0900 	mov.w	r9, #0
 801780a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801780e:	461f      	mov	r7, r3
 8017810:	4688      	mov	r8, r1
 8017812:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8017816:	4616      	mov	r6, r2
 8017818:	f8c0 9004 	str.w	r9, [r0, #4]
 801781c:	f8c4 9000 	str.w	r9, [r4]
 8017820:	2900      	cmp	r1, #0
 8017822:	f000 80bd 	beq.w	80179a0 <rcl_wait_set_resize+0x1b0>
 8017826:	008c      	lsls	r4, r1, #2
 8017828:	6800      	ldr	r0, [r0, #0]
 801782a:	9301      	str	r3, [sp, #4]
 801782c:	4652      	mov	r2, sl
 801782e:	4621      	mov	r1, r4
 8017830:	4798      	blx	r3
 8017832:	9b01      	ldr	r3, [sp, #4]
 8017834:	6028      	str	r0, [r5, #0]
 8017836:	2800      	cmp	r0, #0
 8017838:	f000 80cb 	beq.w	80179d2 <rcl_wait_set_resize+0x1e2>
 801783c:	4622      	mov	r2, r4
 801783e:	4649      	mov	r1, r9
 8017840:	9301      	str	r3, [sp, #4]
 8017842:	f00a f88e 	bl	8021962 <memset>
 8017846:	f8c5 8004 	str.w	r8, [r5, #4]
 801784a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801784e:	9b01      	ldr	r3, [sp, #4]
 8017850:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017854:	f8c8 9004 	str.w	r9, [r8, #4]
 8017858:	4652      	mov	r2, sl
 801785a:	4621      	mov	r1, r4
 801785c:	4798      	blx	r3
 801785e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017860:	f8c8 0008 	str.w	r0, [r8, #8]
 8017864:	689b      	ldr	r3, [r3, #8]
 8017866:	2b00      	cmp	r3, #0
 8017868:	f000 80ac 	beq.w	80179c4 <rcl_wait_set_resize+0x1d4>
 801786c:	4622      	mov	r2, r4
 801786e:	4649      	mov	r1, r9
 8017870:	4618      	mov	r0, r3
 8017872:	f00a f876 	bl	8021962 <memset>
 8017876:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017878:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801787c:	f04f 0800 	mov.w	r8, #0
 8017880:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8017884:	f8c5 800c 	str.w	r8, [r5, #12]
 8017888:	f8c4 800c 	str.w	r8, [r4, #12]
 801788c:	2e00      	cmp	r6, #0
 801788e:	f040 80a4 	bne.w	80179da <rcl_wait_set_resize+0x1ea>
 8017892:	68a8      	ldr	r0, [r5, #8]
 8017894:	b128      	cbz	r0, 80178a2 <rcl_wait_set_resize+0xb2>
 8017896:	4649      	mov	r1, r9
 8017898:	4790      	blx	r2
 801789a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801789c:	60ae      	str	r6, [r5, #8]
 801789e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80178a2:	f04f 0800 	mov.w	r8, #0
 80178a6:	19f6      	adds	r6, r6, r7
 80178a8:	f8c4 8010 	str.w	r8, [r4, #16]
 80178ac:	f040 80ac 	bne.w	8017a08 <rcl_wait_set_resize+0x218>
 80178b0:	6960      	ldr	r0, [r4, #20]
 80178b2:	b130      	cbz	r0, 80178c2 <rcl_wait_set_resize+0xd2>
 80178b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80178b6:	4649      	mov	r1, r9
 80178b8:	4798      	blx	r3
 80178ba:	6166      	str	r6, [r4, #20]
 80178bc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178be:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80178c2:	2600      	movs	r6, #0
 80178c4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80178c8:	616e      	str	r6, [r5, #20]
 80178ca:	6426      	str	r6, [r4, #64]	@ 0x40
 80178cc:	2f00      	cmp	r7, #0
 80178ce:	f040 80ad 	bne.w	8017a2c <rcl_wait_set_resize+0x23c>
 80178d2:	6928      	ldr	r0, [r5, #16]
 80178d4:	b138      	cbz	r0, 80178e6 <rcl_wait_set_resize+0xf6>
 80178d6:	4649      	mov	r1, r9
 80178d8:	47d0      	blx	sl
 80178da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178dc:	612f      	str	r7, [r5, #16]
 80178de:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80178e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80178e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178e8:	2600      	movs	r6, #0
 80178ea:	61ee      	str	r6, [r5, #28]
 80178ec:	61a6      	str	r6, [r4, #24]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	f040 80af 	bne.w	8017a52 <rcl_wait_set_resize+0x262>
 80178f4:	69a8      	ldr	r0, [r5, #24]
 80178f6:	b120      	cbz	r0, 8017902 <rcl_wait_set_resize+0x112>
 80178f8:	4649      	mov	r1, r9
 80178fa:	47d0      	blx	sl
 80178fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017900:	61ab      	str	r3, [r5, #24]
 8017902:	6a20      	ldr	r0, [r4, #32]
 8017904:	b128      	cbz	r0, 8017912 <rcl_wait_set_resize+0x122>
 8017906:	4649      	mov	r1, r9
 8017908:	47d0      	blx	sl
 801790a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801790c:	2300      	movs	r3, #0
 801790e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8017912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017914:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017916:	2600      	movs	r6, #0
 8017918:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801791c:	626e      	str	r6, [r5, #36]	@ 0x24
 801791e:	6266      	str	r6, [r4, #36]	@ 0x24
 8017920:	2b00      	cmp	r3, #0
 8017922:	f000 80b6 	beq.w	8017a92 <rcl_wait_set_resize+0x2a2>
 8017926:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801792a:	6a28      	ldr	r0, [r5, #32]
 801792c:	463a      	mov	r2, r7
 801792e:	4651      	mov	r1, sl
 8017930:	47c8      	blx	r9
 8017932:	6228      	str	r0, [r5, #32]
 8017934:	2800      	cmp	r0, #0
 8017936:	d04c      	beq.n	80179d2 <rcl_wait_set_resize+0x1e2>
 8017938:	4652      	mov	r2, sl
 801793a:	4631      	mov	r1, r6
 801793c:	f00a f811 	bl	8021962 <memset>
 8017940:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017944:	626b      	str	r3, [r5, #36]	@ 0x24
 8017946:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017948:	62a6      	str	r6, [r4, #40]	@ 0x28
 801794a:	463a      	mov	r2, r7
 801794c:	4651      	mov	r1, sl
 801794e:	47c8      	blx	r9
 8017950:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017952:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8017954:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8017956:	2c00      	cmp	r4, #0
 8017958:	f000 80f0 	beq.w	8017b3c <rcl_wait_set_resize+0x34c>
 801795c:	4620      	mov	r0, r4
 801795e:	4652      	mov	r2, sl
 8017960:	4631      	mov	r1, r6
 8017962:	f009 fffe 	bl	8021962 <memset>
 8017966:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801796a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801796c:	2600      	movs	r6, #0
 801796e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017972:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8017974:	6326      	str	r6, [r4, #48]	@ 0x30
 8017976:	2b00      	cmp	r3, #0
 8017978:	f040 809d 	bne.w	8017ab6 <rcl_wait_set_resize+0x2c6>
 801797c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801797e:	b120      	cbz	r0, 801798a <rcl_wait_set_resize+0x19a>
 8017980:	4639      	mov	r1, r7
 8017982:	47c0      	blx	r8
 8017984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017986:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017988:	62ab      	str	r3, [r5, #40]	@ 0x28
 801798a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801798c:	b310      	cbz	r0, 80179d4 <rcl_wait_set_resize+0x1e4>
 801798e:	4639      	mov	r1, r7
 8017990:	47c0      	blx	r8
 8017992:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017994:	2000      	movs	r0, #0
 8017996:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801799a:	b003      	add	sp, #12
 801799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179a0:	6800      	ldr	r0, [r0, #0]
 80179a2:	b120      	cbz	r0, 80179ae <rcl_wait_set_resize+0x1be>
 80179a4:	4651      	mov	r1, sl
 80179a6:	47d8      	blx	fp
 80179a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179aa:	f8c5 8000 	str.w	r8, [r5]
 80179ae:	68a0      	ldr	r0, [r4, #8]
 80179b0:	2800      	cmp	r0, #0
 80179b2:	f43f af61 	beq.w	8017878 <rcl_wait_set_resize+0x88>
 80179b6:	4651      	mov	r1, sl
 80179b8:	47d8      	blx	fp
 80179ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179bc:	2300      	movs	r3, #0
 80179be:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80179c2:	e759      	b.n	8017878 <rcl_wait_set_resize+0x88>
 80179c4:	6828      	ldr	r0, [r5, #0]
 80179c6:	9301      	str	r3, [sp, #4]
 80179c8:	4651      	mov	r1, sl
 80179ca:	47d8      	blx	fp
 80179cc:	9b01      	ldr	r3, [sp, #4]
 80179ce:	e9c5 3300 	strd	r3, r3, [r5]
 80179d2:	200a      	movs	r0, #10
 80179d4:	b003      	add	sp, #12
 80179d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179da:	00b4      	lsls	r4, r6, #2
 80179dc:	68a8      	ldr	r0, [r5, #8]
 80179de:	464a      	mov	r2, r9
 80179e0:	4621      	mov	r1, r4
 80179e2:	4798      	blx	r3
 80179e4:	60a8      	str	r0, [r5, #8]
 80179e6:	2800      	cmp	r0, #0
 80179e8:	d0f3      	beq.n	80179d2 <rcl_wait_set_resize+0x1e2>
 80179ea:	4622      	mov	r2, r4
 80179ec:	4641      	mov	r1, r8
 80179ee:	f009 ffb8 	bl	8021962 <memset>
 80179f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179f4:	60ee      	str	r6, [r5, #12]
 80179f6:	f04f 0800 	mov.w	r8, #0
 80179fa:	19f6      	adds	r6, r6, r7
 80179fc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017a00:	f8c4 8010 	str.w	r8, [r4, #16]
 8017a04:	f43f af54 	beq.w	80178b0 <rcl_wait_set_resize+0xc0>
 8017a08:	00b6      	lsls	r6, r6, #2
 8017a0a:	464a      	mov	r2, r9
 8017a0c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017a0e:	6960      	ldr	r0, [r4, #20]
 8017a10:	4631      	mov	r1, r6
 8017a12:	4798      	blx	r3
 8017a14:	4681      	mov	r9, r0
 8017a16:	6160      	str	r0, [r4, #20]
 8017a18:	2800      	cmp	r0, #0
 8017a1a:	d076      	beq.n	8017b0a <rcl_wait_set_resize+0x31a>
 8017a1c:	4632      	mov	r2, r6
 8017a1e:	4641      	mov	r1, r8
 8017a20:	f009 ff9f 	bl	8021962 <memset>
 8017a24:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a26:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017a2a:	e74a      	b.n	80178c2 <rcl_wait_set_resize+0xd2>
 8017a2c:	00bc      	lsls	r4, r7, #2
 8017a2e:	6928      	ldr	r0, [r5, #16]
 8017a30:	464a      	mov	r2, r9
 8017a32:	4621      	mov	r1, r4
 8017a34:	47c0      	blx	r8
 8017a36:	6128      	str	r0, [r5, #16]
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	d0ca      	beq.n	80179d2 <rcl_wait_set_resize+0x1e2>
 8017a3c:	4622      	mov	r2, r4
 8017a3e:	4631      	mov	r1, r6
 8017a40:	f009 ff8f 	bl	8021962 <memset>
 8017a44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a46:	616f      	str	r7, [r5, #20]
 8017a48:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017a4c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017a50:	e749      	b.n	80178e6 <rcl_wait_set_resize+0xf6>
 8017a52:	009c      	lsls	r4, r3, #2
 8017a54:	69a8      	ldr	r0, [r5, #24]
 8017a56:	464a      	mov	r2, r9
 8017a58:	4621      	mov	r1, r4
 8017a5a:	47c0      	blx	r8
 8017a5c:	61a8      	str	r0, [r5, #24]
 8017a5e:	2800      	cmp	r0, #0
 8017a60:	d0b7      	beq.n	80179d2 <rcl_wait_set_resize+0x1e2>
 8017a62:	4622      	mov	r2, r4
 8017a64:	4631      	mov	r1, r6
 8017a66:	f009 ff7c 	bl	8021962 <memset>
 8017a6a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017a6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a6e:	61eb      	str	r3, [r5, #28]
 8017a70:	6a38      	ldr	r0, [r7, #32]
 8017a72:	61fe      	str	r6, [r7, #28]
 8017a74:	464a      	mov	r2, r9
 8017a76:	4621      	mov	r1, r4
 8017a78:	47c0      	blx	r8
 8017a7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017a7c:	6238      	str	r0, [r7, #32]
 8017a7e:	6a1f      	ldr	r7, [r3, #32]
 8017a80:	2f00      	cmp	r7, #0
 8017a82:	d054      	beq.n	8017b2e <rcl_wait_set_resize+0x33e>
 8017a84:	4622      	mov	r2, r4
 8017a86:	4631      	mov	r1, r6
 8017a88:	4638      	mov	r0, r7
 8017a8a:	f009 ff6a 	bl	8021962 <memset>
 8017a8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a90:	e73f      	b.n	8017912 <rcl_wait_set_resize+0x122>
 8017a92:	6a28      	ldr	r0, [r5, #32]
 8017a94:	b120      	cbz	r0, 8017aa0 <rcl_wait_set_resize+0x2b0>
 8017a96:	4639      	mov	r1, r7
 8017a98:	47c0      	blx	r8
 8017a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a9c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a9e:	622b      	str	r3, [r5, #32]
 8017aa0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017aa2:	2800      	cmp	r0, #0
 8017aa4:	f43f af60 	beq.w	8017968 <rcl_wait_set_resize+0x178>
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	47c0      	blx	r8
 8017aac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017aae:	2300      	movs	r3, #0
 8017ab0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017ab4:	e758      	b.n	8017968 <rcl_wait_set_resize+0x178>
 8017ab6:	009c      	lsls	r4, r3, #2
 8017ab8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017aba:	463a      	mov	r2, r7
 8017abc:	4621      	mov	r1, r4
 8017abe:	47c8      	blx	r9
 8017ac0:	62a8      	str	r0, [r5, #40]	@ 0x28
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	d085      	beq.n	80179d2 <rcl_wait_set_resize+0x1e2>
 8017ac6:	4622      	mov	r2, r4
 8017ac8:	4631      	mov	r1, r6
 8017aca:	f009 ff4a 	bl	8021962 <memset>
 8017ace:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ad4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8017ad6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8017ada:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017ade:	463a      	mov	r2, r7
 8017ae0:	4621      	mov	r1, r4
 8017ae2:	47c8      	blx	r9
 8017ae4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017ae6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8017aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017aec:	b36b      	cbz	r3, 8017b4a <rcl_wait_set_resize+0x35a>
 8017aee:	4622      	mov	r2, r4
 8017af0:	4631      	mov	r1, r6
 8017af2:	4618      	mov	r0, r3
 8017af4:	f009 ff35 	bl	8021962 <memset>
 8017af8:	4630      	mov	r0, r6
 8017afa:	b003      	add	sp, #12
 8017afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b00:	200b      	movs	r0, #11
 8017b02:	4770      	bx	lr
 8017b04:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017b08:	e764      	b.n	80179d4 <rcl_wait_set_resize+0x1e4>
 8017b0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017b0c:	68a8      	ldr	r0, [r5, #8]
 8017b0e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017b12:	4798      	blx	r3
 8017b14:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017b16:	6928      	ldr	r0, [r5, #16]
 8017b18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017b1a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017b1c:	f8c5 900c 	str.w	r9, [r5, #12]
 8017b20:	f8c5 9008 	str.w	r9, [r5, #8]
 8017b24:	4790      	blx	r2
 8017b26:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017b2a:	200a      	movs	r0, #10
 8017b2c:	e752      	b.n	80179d4 <rcl_wait_set_resize+0x1e4>
 8017b2e:	69a8      	ldr	r0, [r5, #24]
 8017b30:	4649      	mov	r1, r9
 8017b32:	47d0      	blx	sl
 8017b34:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017b38:	200a      	movs	r0, #10
 8017b3a:	e74b      	b.n	80179d4 <rcl_wait_set_resize+0x1e4>
 8017b3c:	6a28      	ldr	r0, [r5, #32]
 8017b3e:	4639      	mov	r1, r7
 8017b40:	47c0      	blx	r8
 8017b42:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017b46:	200a      	movs	r0, #10
 8017b48:	e744      	b.n	80179d4 <rcl_wait_set_resize+0x1e4>
 8017b4a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017b4c:	9301      	str	r3, [sp, #4]
 8017b4e:	4639      	mov	r1, r7
 8017b50:	47c0      	blx	r8
 8017b52:	9b01      	ldr	r3, [sp, #4]
 8017b54:	200a      	movs	r0, #10
 8017b56:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017b5a:	e73b      	b.n	80179d4 <rcl_wait_set_resize+0x1e4>

08017b5c <rcl_wait_set_init>:
 8017b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b60:	b084      	sub	sp, #16
 8017b62:	4604      	mov	r4, r0
 8017b64:	a810      	add	r0, sp, #64	@ 0x40
 8017b66:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8017b6a:	460f      	mov	r7, r1
 8017b6c:	4690      	mov	r8, r2
 8017b6e:	4699      	mov	r9, r3
 8017b70:	f7f6 fdda 	bl	800e728 <rcutils_allocator_is_valid>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d06b      	beq.n	8017c50 <rcl_wait_set_init+0xf4>
 8017b78:	2c00      	cmp	r4, #0
 8017b7a:	d069      	beq.n	8017c50 <rcl_wait_set_init+0xf4>
 8017b7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017b7e:	b125      	cbz	r5, 8017b8a <rcl_wait_set_init+0x2e>
 8017b80:	2564      	movs	r5, #100	@ 0x64
 8017b82:	4628      	mov	r0, r5
 8017b84:	b004      	add	sp, #16
 8017b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b8a:	f1ba 0f00 	cmp.w	sl, #0
 8017b8e:	d05f      	beq.n	8017c50 <rcl_wait_set_init+0xf4>
 8017b90:	4650      	mov	r0, sl
 8017b92:	f7fe fa8d 	bl	80160b0 <rcl_context_is_valid>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	d067      	beq.n	8017c6a <rcl_wait_set_init+0x10e>
 8017b9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017b9c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8017b9e:	205c      	movs	r0, #92	@ 0x5c
 8017ba0:	4798      	blx	r3
 8017ba2:	6320      	str	r0, [r4, #48]	@ 0x30
 8017ba4:	2800      	cmp	r0, #0
 8017ba6:	d062      	beq.n	8017c6e <rcl_wait_set_init+0x112>
 8017ba8:	4629      	mov	r1, r5
 8017baa:	225c      	movs	r2, #92	@ 0x5c
 8017bac:	f009 fed9 	bl	8021962 <memset>
 8017bb0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8017bb4:	eb03 0e02 	add.w	lr, r3, r2
 8017bb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bba:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8017bbc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017bc0:	449e      	add	lr, r3
 8017bc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017bc6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017bca:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8017bce:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017bd2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8017bd6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8017bda:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8017bde:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8017be2:	f8da a000 	ldr.w	sl, [sl]
 8017be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017be8:	44c6      	add	lr, r8
 8017bea:	f8dc 3000 	ldr.w	r3, [ip]
 8017bee:	602b      	str	r3, [r5, #0]
 8017bf0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8017bf4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8017bf8:	f006 fa80 	bl	801e0fc <rmw_create_wait_set>
 8017bfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bfe:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8017c00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017c02:	b350      	cbz	r0, 8017c5a <rcl_wait_set_init+0xfe>
 8017c04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c06:	9302      	str	r3, [sp, #8]
 8017c08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017c0a:	9301      	str	r3, [sp, #4]
 8017c0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c0e:	9300      	str	r3, [sp, #0]
 8017c10:	4642      	mov	r2, r8
 8017c12:	464b      	mov	r3, r9
 8017c14:	4639      	mov	r1, r7
 8017c16:	4620      	mov	r0, r4
 8017c18:	f7ff fdea 	bl	80177f0 <rcl_wait_set_resize>
 8017c1c:	4605      	mov	r5, r0
 8017c1e:	2800      	cmp	r0, #0
 8017c20:	d0af      	beq.n	8017b82 <rcl_wait_set_init+0x26>
 8017c22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c24:	bb2b      	cbnz	r3, 8017c72 <rcl_wait_set_init+0x116>
 8017c26:	2600      	movs	r6, #0
 8017c28:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017c2c:	9600      	str	r6, [sp, #0]
 8017c2e:	4633      	mov	r3, r6
 8017c30:	4632      	mov	r2, r6
 8017c32:	4631      	mov	r1, r6
 8017c34:	4620      	mov	r0, r4
 8017c36:	f7ff fddb 	bl	80177f0 <rcl_wait_set_resize>
 8017c3a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	d0a0      	beq.n	8017b82 <rcl_wait_set_init+0x26>
 8017c40:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017c42:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017c44:	4798      	blx	r3
 8017c46:	4628      	mov	r0, r5
 8017c48:	6326      	str	r6, [r4, #48]	@ 0x30
 8017c4a:	b004      	add	sp, #16
 8017c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c50:	250b      	movs	r5, #11
 8017c52:	4628      	mov	r0, r5
 8017c54:	b004      	add	sp, #16
 8017c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c5a:	2501      	movs	r5, #1
 8017c5c:	f006 fa58 	bl	801e110 <rmw_destroy_wait_set>
 8017c60:	2800      	cmp	r0, #0
 8017c62:	bf18      	it	ne
 8017c64:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8017c68:	e7dd      	b.n	8017c26 <rcl_wait_set_init+0xca>
 8017c6a:	2565      	movs	r5, #101	@ 0x65
 8017c6c:	e789      	b.n	8017b82 <rcl_wait_set_init+0x26>
 8017c6e:	250a      	movs	r5, #10
 8017c70:	e787      	b.n	8017b82 <rcl_wait_set_init+0x26>
 8017c72:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017c74:	e7f2      	b.n	8017c5c <rcl_wait_set_init+0x100>
 8017c76:	bf00      	nop

08017c78 <rcl_wait_set_add_guard_condition>:
 8017c78:	b318      	cbz	r0, 8017cc2 <rcl_wait_set_add_guard_condition+0x4a>
 8017c7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017c7c:	b570      	push	{r4, r5, r6, lr}
 8017c7e:	4604      	mov	r4, r0
 8017c80:	b30b      	cbz	r3, 8017cc6 <rcl_wait_set_add_guard_condition+0x4e>
 8017c82:	b319      	cbz	r1, 8017ccc <rcl_wait_set_add_guard_condition+0x54>
 8017c84:	68dd      	ldr	r5, [r3, #12]
 8017c86:	68c0      	ldr	r0, [r0, #12]
 8017c88:	4285      	cmp	r5, r0
 8017c8a:	d217      	bcs.n	8017cbc <rcl_wait_set_add_guard_condition+0x44>
 8017c8c:	68a0      	ldr	r0, [r4, #8]
 8017c8e:	1c6e      	adds	r6, r5, #1
 8017c90:	60de      	str	r6, [r3, #12]
 8017c92:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017c96:	b102      	cbz	r2, 8017c9a <rcl_wait_set_add_guard_condition+0x22>
 8017c98:	6015      	str	r5, [r2, #0]
 8017c9a:	4608      	mov	r0, r1
 8017c9c:	f008 f97c 	bl	801ff98 <rcl_guard_condition_get_rmw_handle>
 8017ca0:	b150      	cbz	r0, 8017cb8 <rcl_wait_set_add_guard_condition+0x40>
 8017ca2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ca4:	6842      	ldr	r2, [r0, #4]
 8017ca6:	695b      	ldr	r3, [r3, #20]
 8017ca8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017cac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017cae:	6913      	ldr	r3, [r2, #16]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	2000      	movs	r0, #0
 8017cb4:	6113      	str	r3, [r2, #16]
 8017cb6:	bd70      	pop	{r4, r5, r6, pc}
 8017cb8:	2001      	movs	r0, #1
 8017cba:	bd70      	pop	{r4, r5, r6, pc}
 8017cbc:	f240 3086 	movw	r0, #902	@ 0x386
 8017cc0:	bd70      	pop	{r4, r5, r6, pc}
 8017cc2:	200b      	movs	r0, #11
 8017cc4:	4770      	bx	lr
 8017cc6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017cca:	bd70      	pop	{r4, r5, r6, pc}
 8017ccc:	200b      	movs	r0, #11
 8017cce:	bd70      	pop	{r4, r5, r6, pc}

08017cd0 <rcl_wait_set_add_timer>:
 8017cd0:	b328      	cbz	r0, 8017d1e <rcl_wait_set_add_timer+0x4e>
 8017cd2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017cd4:	b570      	push	{r4, r5, r6, lr}
 8017cd6:	4604      	mov	r4, r0
 8017cd8:	b31b      	cbz	r3, 8017d22 <rcl_wait_set_add_timer+0x52>
 8017cda:	b329      	cbz	r1, 8017d28 <rcl_wait_set_add_timer+0x58>
 8017cdc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8017cde:	6965      	ldr	r5, [r4, #20]
 8017ce0:	42a8      	cmp	r0, r5
 8017ce2:	d219      	bcs.n	8017d18 <rcl_wait_set_add_timer+0x48>
 8017ce4:	6925      	ldr	r5, [r4, #16]
 8017ce6:	1c46      	adds	r6, r0, #1
 8017ce8:	641e      	str	r6, [r3, #64]	@ 0x40
 8017cea:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017cee:	b102      	cbz	r2, 8017cf2 <rcl_wait_set_add_timer+0x22>
 8017cf0:	6010      	str	r0, [r2, #0]
 8017cf2:	4608      	mov	r0, r1
 8017cf4:	f7ff fba6 	bl	8017444 <rcl_timer_get_guard_condition>
 8017cf8:	b168      	cbz	r0, 8017d16 <rcl_wait_set_add_timer+0x46>
 8017cfa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017cfc:	68e3      	ldr	r3, [r4, #12]
 8017cfe:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8017d00:	3b01      	subs	r3, #1
 8017d02:	441d      	add	r5, r3
 8017d04:	f008 f948 	bl	801ff98 <rcl_guard_condition_get_rmw_handle>
 8017d08:	b180      	cbz	r0, 8017d2c <rcl_wait_set_add_timer+0x5c>
 8017d0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d0c:	6842      	ldr	r2, [r0, #4]
 8017d0e:	695b      	ldr	r3, [r3, #20]
 8017d10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d14:	2000      	movs	r0, #0
 8017d16:	bd70      	pop	{r4, r5, r6, pc}
 8017d18:	f240 3086 	movw	r0, #902	@ 0x386
 8017d1c:	bd70      	pop	{r4, r5, r6, pc}
 8017d1e:	200b      	movs	r0, #11
 8017d20:	4770      	bx	lr
 8017d22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017d26:	bd70      	pop	{r4, r5, r6, pc}
 8017d28:	200b      	movs	r0, #11
 8017d2a:	bd70      	pop	{r4, r5, r6, pc}
 8017d2c:	2001      	movs	r0, #1
 8017d2e:	bd70      	pop	{r4, r5, r6, pc}

08017d30 <rcl_wait_set_add_client>:
 8017d30:	b318      	cbz	r0, 8017d7a <rcl_wait_set_add_client+0x4a>
 8017d32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017d34:	b570      	push	{r4, r5, r6, lr}
 8017d36:	4604      	mov	r4, r0
 8017d38:	b30b      	cbz	r3, 8017d7e <rcl_wait_set_add_client+0x4e>
 8017d3a:	b319      	cbz	r1, 8017d84 <rcl_wait_set_add_client+0x54>
 8017d3c:	699d      	ldr	r5, [r3, #24]
 8017d3e:	69c0      	ldr	r0, [r0, #28]
 8017d40:	4285      	cmp	r5, r0
 8017d42:	d217      	bcs.n	8017d74 <rcl_wait_set_add_client+0x44>
 8017d44:	69a0      	ldr	r0, [r4, #24]
 8017d46:	1c6e      	adds	r6, r5, #1
 8017d48:	619e      	str	r6, [r3, #24]
 8017d4a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017d4e:	b102      	cbz	r2, 8017d52 <rcl_wait_set_add_client+0x22>
 8017d50:	6015      	str	r5, [r2, #0]
 8017d52:	4608      	mov	r0, r1
 8017d54:	f7fe f900 	bl	8015f58 <rcl_client_get_rmw_handle>
 8017d58:	b150      	cbz	r0, 8017d70 <rcl_wait_set_add_client+0x40>
 8017d5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d5c:	6842      	ldr	r2, [r0, #4]
 8017d5e:	6a1b      	ldr	r3, [r3, #32]
 8017d60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d64:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017d66:	69d3      	ldr	r3, [r2, #28]
 8017d68:	3301      	adds	r3, #1
 8017d6a:	2000      	movs	r0, #0
 8017d6c:	61d3      	str	r3, [r2, #28]
 8017d6e:	bd70      	pop	{r4, r5, r6, pc}
 8017d70:	2001      	movs	r0, #1
 8017d72:	bd70      	pop	{r4, r5, r6, pc}
 8017d74:	f240 3086 	movw	r0, #902	@ 0x386
 8017d78:	bd70      	pop	{r4, r5, r6, pc}
 8017d7a:	200b      	movs	r0, #11
 8017d7c:	4770      	bx	lr
 8017d7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017d82:	bd70      	pop	{r4, r5, r6, pc}
 8017d84:	200b      	movs	r0, #11
 8017d86:	bd70      	pop	{r4, r5, r6, pc}

08017d88 <rcl_wait_set_add_service>:
 8017d88:	b318      	cbz	r0, 8017dd2 <rcl_wait_set_add_service+0x4a>
 8017d8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017d8c:	b570      	push	{r4, r5, r6, lr}
 8017d8e:	4604      	mov	r4, r0
 8017d90:	b30b      	cbz	r3, 8017dd6 <rcl_wait_set_add_service+0x4e>
 8017d92:	b319      	cbz	r1, 8017ddc <rcl_wait_set_add_service+0x54>
 8017d94:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017d96:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017d98:	4285      	cmp	r5, r0
 8017d9a:	d217      	bcs.n	8017dcc <rcl_wait_set_add_service+0x44>
 8017d9c:	6a20      	ldr	r0, [r4, #32]
 8017d9e:	1c6e      	adds	r6, r5, #1
 8017da0:	625e      	str	r6, [r3, #36]	@ 0x24
 8017da2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017da6:	b102      	cbz	r2, 8017daa <rcl_wait_set_add_service+0x22>
 8017da8:	6015      	str	r5, [r2, #0]
 8017daa:	4608      	mov	r0, r1
 8017dac:	f7ff f804 	bl	8016db8 <rcl_service_get_rmw_handle>
 8017db0:	b150      	cbz	r0, 8017dc8 <rcl_wait_set_add_service+0x40>
 8017db2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017db4:	6842      	ldr	r2, [r0, #4]
 8017db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017db8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017dbc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017dbe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	2000      	movs	r0, #0
 8017dc4:	6293      	str	r3, [r2, #40]	@ 0x28
 8017dc6:	bd70      	pop	{r4, r5, r6, pc}
 8017dc8:	2001      	movs	r0, #1
 8017dca:	bd70      	pop	{r4, r5, r6, pc}
 8017dcc:	f240 3086 	movw	r0, #902	@ 0x386
 8017dd0:	bd70      	pop	{r4, r5, r6, pc}
 8017dd2:	200b      	movs	r0, #11
 8017dd4:	4770      	bx	lr
 8017dd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017dda:	bd70      	pop	{r4, r5, r6, pc}
 8017ddc:	200b      	movs	r0, #11
 8017dde:	bd70      	pop	{r4, r5, r6, pc}

08017de0 <rcl_wait>:
 8017de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de4:	ed2d 8b02 	vpush	{d8}
 8017de8:	b08d      	sub	sp, #52	@ 0x34
 8017dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017dee:	2800      	cmp	r0, #0
 8017df0:	f000 8143 	beq.w	801807a <rcl_wait+0x29a>
 8017df4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017df6:	4605      	mov	r5, r0
 8017df8:	2e00      	cmp	r6, #0
 8017dfa:	f000 8112 	beq.w	8018022 <rcl_wait+0x242>
 8017dfe:	6843      	ldr	r3, [r0, #4]
 8017e00:	b983      	cbnz	r3, 8017e24 <rcl_wait+0x44>
 8017e02:	68eb      	ldr	r3, [r5, #12]
 8017e04:	b973      	cbnz	r3, 8017e24 <rcl_wait+0x44>
 8017e06:	696b      	ldr	r3, [r5, #20]
 8017e08:	b963      	cbnz	r3, 8017e24 <rcl_wait+0x44>
 8017e0a:	69eb      	ldr	r3, [r5, #28]
 8017e0c:	b953      	cbnz	r3, 8017e24 <rcl_wait+0x44>
 8017e0e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017e10:	b943      	cbnz	r3, 8017e24 <rcl_wait+0x44>
 8017e12:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8017e14:	b933      	cbnz	r3, 8017e24 <rcl_wait+0x44>
 8017e16:	f240 3085 	movw	r0, #901	@ 0x385
 8017e1a:	b00d      	add	sp, #52	@ 0x34
 8017e1c:	ecbd 8b02 	vpop	{d8}
 8017e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e24:	9b04      	ldr	r3, [sp, #16]
 8017e26:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8017e28:	2b01      	cmp	r3, #1
 8017e2a:	9b05      	ldr	r3, [sp, #20]
 8017e2c:	f173 0300 	sbcs.w	r3, r3, #0
 8017e30:	f2c0 80f0 	blt.w	8018014 <rcl_wait+0x234>
 8017e34:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017e38:	4643      	mov	r3, r8
 8017e3a:	2a00      	cmp	r2, #0
 8017e3c:	f000 8133 	beq.w	80180a6 <rcl_wait+0x2c6>
 8017e40:	2400      	movs	r4, #0
 8017e42:	4613      	mov	r3, r2
 8017e44:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80180b8 <rcl_wait+0x2d8>
 8017e48:	46a2      	mov	sl, r4
 8017e4a:	46a3      	mov	fp, r4
 8017e4c:	f240 3921 	movw	r9, #801	@ 0x321
 8017e50:	4632      	mov	r2, r6
 8017e52:	e014      	b.n	8017e7e <rcl_wait+0x9e>
 8017e54:	2800      	cmp	r0, #0
 8017e56:	d1e0      	bne.n	8017e1a <rcl_wait+0x3a>
 8017e58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017e5c:	4542      	cmp	r2, r8
 8017e5e:	eb73 0107 	sbcs.w	r1, r3, r7
 8017e62:	da03      	bge.n	8017e6c <rcl_wait+0x8c>
 8017e64:	4690      	mov	r8, r2
 8017e66:	461f      	mov	r7, r3
 8017e68:	f04f 0b01 	mov.w	fp, #1
 8017e6c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017e6e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017e70:	3401      	adds	r4, #1
 8017e72:	f14a 0a00 	adc.w	sl, sl, #0
 8017e76:	429c      	cmp	r4, r3
 8017e78:	f17a 0100 	sbcs.w	r1, sl, #0
 8017e7c:	d228      	bcs.n	8017ed0 <rcl_wait+0xf0>
 8017e7e:	6928      	ldr	r0, [r5, #16]
 8017e80:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017e84:	a908      	add	r1, sp, #32
 8017e86:	00a6      	lsls	r6, r4, #2
 8017e88:	2800      	cmp	r0, #0
 8017e8a:	d0f1      	beq.n	8017e70 <rcl_wait+0x90>
 8017e8c:	68eb      	ldr	r3, [r5, #12]
 8017e8e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017e92:	4423      	add	r3, r4
 8017e94:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017e98:	f1be 0f00 	cmp.w	lr, #0
 8017e9c:	d006      	beq.n	8017eac <rcl_wait+0xcc>
 8017e9e:	6913      	ldr	r3, [r2, #16]
 8017ea0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017ea4:	3301      	adds	r3, #1
 8017ea6:	6113      	str	r3, [r2, #16]
 8017ea8:	692b      	ldr	r3, [r5, #16]
 8017eaa:	5998      	ldr	r0, [r3, r6]
 8017eac:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017eb0:	f7ff fa96 	bl	80173e0 <rcl_timer_get_time_until_next_call>
 8017eb4:	4548      	cmp	r0, r9
 8017eb6:	d1cd      	bne.n	8017e54 <rcl_wait+0x74>
 8017eb8:	692b      	ldr	r3, [r5, #16]
 8017eba:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017ebc:	2100      	movs	r1, #0
 8017ebe:	5199      	str	r1, [r3, r6]
 8017ec0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017ec2:	3401      	adds	r4, #1
 8017ec4:	f14a 0a00 	adc.w	sl, sl, #0
 8017ec8:	429c      	cmp	r4, r3
 8017eca:	f17a 0100 	sbcs.w	r1, sl, #0
 8017ece:	d3d6      	bcc.n	8017e7e <rcl_wait+0x9e>
 8017ed0:	4616      	mov	r6, r2
 8017ed2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017ed6:	4313      	orrs	r3, r2
 8017ed8:	46d9      	mov	r9, fp
 8017eda:	f040 80a9 	bne.w	8018030 <rcl_wait+0x250>
 8017ede:	2300      	movs	r3, #0
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017ee6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017eea:	ab08      	add	r3, sp, #32
 8017eec:	9302      	str	r3, [sp, #8]
 8017eee:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8017ef0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8017ef4:	e9cd 3200 	strd	r3, r2, [sp]
 8017ef8:	f106 0110 	add.w	r1, r6, #16
 8017efc:	f106 031c 	add.w	r3, r6, #28
 8017f00:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8017f04:	1d30      	adds	r0, r6, #4
 8017f06:	f005 ff81 	bl	801de0c <rmw_wait>
 8017f0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017f0e:	4680      	mov	r8, r0
 8017f10:	b1ca      	cbz	r2, 8017f46 <rcl_wait+0x166>
 8017f12:	2400      	movs	r4, #0
 8017f14:	4627      	mov	r7, r4
 8017f16:	692a      	ldr	r2, [r5, #16]
 8017f18:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8017f1c:	f10d 011f 	add.w	r1, sp, #31
 8017f20:	00a6      	lsls	r6, r4, #2
 8017f22:	b160      	cbz	r0, 8017f3e <rcl_wait+0x15e>
 8017f24:	f88d 701f 	strb.w	r7, [sp, #31]
 8017f28:	f7ff fa20 	bl	801736c <rcl_timer_is_ready>
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	f47f af74 	bne.w	8017e1a <rcl_wait+0x3a>
 8017f32:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017f36:	b90b      	cbnz	r3, 8017f3c <rcl_wait+0x15c>
 8017f38:	692a      	ldr	r2, [r5, #16]
 8017f3a:	5193      	str	r3, [r2, r6]
 8017f3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017f40:	3401      	adds	r4, #1
 8017f42:	42a2      	cmp	r2, r4
 8017f44:	d8e7      	bhi.n	8017f16 <rcl_wait+0x136>
 8017f46:	f038 0002 	bics.w	r0, r8, #2
 8017f4a:	f040 8090 	bne.w	801806e <rcl_wait+0x28e>
 8017f4e:	686e      	ldr	r6, [r5, #4]
 8017f50:	4602      	mov	r2, r0
 8017f52:	b91e      	cbnz	r6, 8017f5c <rcl_wait+0x17c>
 8017f54:	e00d      	b.n	8017f72 <rcl_wait+0x192>
 8017f56:	3201      	adds	r2, #1
 8017f58:	42b2      	cmp	r2, r6
 8017f5a:	d00a      	beq.n	8017f72 <rcl_wait+0x192>
 8017f5c:	6899      	ldr	r1, [r3, #8]
 8017f5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f62:	2900      	cmp	r1, #0
 8017f64:	d1f7      	bne.n	8017f56 <rcl_wait+0x176>
 8017f66:	682c      	ldr	r4, [r5, #0]
 8017f68:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f6c:	3201      	adds	r2, #1
 8017f6e:	42b2      	cmp	r2, r6
 8017f70:	d1f4      	bne.n	8017f5c <rcl_wait+0x17c>
 8017f72:	68ee      	ldr	r6, [r5, #12]
 8017f74:	2200      	movs	r2, #0
 8017f76:	b91e      	cbnz	r6, 8017f80 <rcl_wait+0x1a0>
 8017f78:	e00d      	b.n	8017f96 <rcl_wait+0x1b6>
 8017f7a:	3201      	adds	r2, #1
 8017f7c:	42b2      	cmp	r2, r6
 8017f7e:	d00a      	beq.n	8017f96 <rcl_wait+0x1b6>
 8017f80:	6959      	ldr	r1, [r3, #20]
 8017f82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f86:	2900      	cmp	r1, #0
 8017f88:	d1f7      	bne.n	8017f7a <rcl_wait+0x19a>
 8017f8a:	68ac      	ldr	r4, [r5, #8]
 8017f8c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f90:	3201      	adds	r2, #1
 8017f92:	42b2      	cmp	r2, r6
 8017f94:	d1f4      	bne.n	8017f80 <rcl_wait+0x1a0>
 8017f96:	69ee      	ldr	r6, [r5, #28]
 8017f98:	2200      	movs	r2, #0
 8017f9a:	b91e      	cbnz	r6, 8017fa4 <rcl_wait+0x1c4>
 8017f9c:	e00d      	b.n	8017fba <rcl_wait+0x1da>
 8017f9e:	3201      	adds	r2, #1
 8017fa0:	42b2      	cmp	r2, r6
 8017fa2:	d00a      	beq.n	8017fba <rcl_wait+0x1da>
 8017fa4:	6a19      	ldr	r1, [r3, #32]
 8017fa6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017faa:	2900      	cmp	r1, #0
 8017fac:	d1f7      	bne.n	8017f9e <rcl_wait+0x1be>
 8017fae:	69ac      	ldr	r4, [r5, #24]
 8017fb0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017fb4:	3201      	adds	r2, #1
 8017fb6:	42b2      	cmp	r2, r6
 8017fb8:	d1f4      	bne.n	8017fa4 <rcl_wait+0x1c4>
 8017fba:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	b91e      	cbnz	r6, 8017fc8 <rcl_wait+0x1e8>
 8017fc0:	e00d      	b.n	8017fde <rcl_wait+0x1fe>
 8017fc2:	3201      	adds	r2, #1
 8017fc4:	4296      	cmp	r6, r2
 8017fc6:	d00a      	beq.n	8017fde <rcl_wait+0x1fe>
 8017fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017fca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fce:	2900      	cmp	r1, #0
 8017fd0:	d1f7      	bne.n	8017fc2 <rcl_wait+0x1e2>
 8017fd2:	6a2c      	ldr	r4, [r5, #32]
 8017fd4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017fd8:	3201      	adds	r2, #1
 8017fda:	4296      	cmp	r6, r2
 8017fdc:	d1f4      	bne.n	8017fc8 <rcl_wait+0x1e8>
 8017fde:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	b91e      	cbnz	r6, 8017fec <rcl_wait+0x20c>
 8017fe4:	e00d      	b.n	8018002 <rcl_wait+0x222>
 8017fe6:	3201      	adds	r2, #1
 8017fe8:	42b2      	cmp	r2, r6
 8017fea:	d00a      	beq.n	8018002 <rcl_wait+0x222>
 8017fec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017fee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017ff2:	2900      	cmp	r1, #0
 8017ff4:	d1f7      	bne.n	8017fe6 <rcl_wait+0x206>
 8017ff6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8017ff8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017ffc:	3201      	adds	r2, #1
 8017ffe:	42b2      	cmp	r2, r6
 8018000:	d1f4      	bne.n	8017fec <rcl_wait+0x20c>
 8018002:	f1b8 0f02 	cmp.w	r8, #2
 8018006:	f47f af08 	bne.w	8017e1a <rcl_wait+0x3a>
 801800a:	464b      	mov	r3, r9
 801800c:	2b00      	cmp	r3, #0
 801800e:	bf08      	it	eq
 8018010:	2002      	moveq	r0, #2
 8018012:	e702      	b.n	8017e1a <rcl_wait+0x3a>
 8018014:	2a00      	cmp	r2, #0
 8018016:	d03a      	beq.n	801808e <rcl_wait+0x2ae>
 8018018:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801801c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018020:	e70e      	b.n	8017e40 <rcl_wait+0x60>
 8018022:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018026:	b00d      	add	sp, #52	@ 0x34
 8018028:	ecbd 8b02 	vpop	{d8}
 801802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018030:	9b04      	ldr	r3, [sp, #16]
 8018032:	2b01      	cmp	r3, #1
 8018034:	9b05      	ldr	r3, [sp, #20]
 8018036:	f173 0300 	sbcs.w	r3, r3, #0
 801803a:	db24      	blt.n	8018086 <rcl_wait+0x2a6>
 801803c:	2f00      	cmp	r7, #0
 801803e:	bfbc      	itt	lt
 8018040:	f04f 0800 	movlt.w	r8, #0
 8018044:	4647      	movlt	r7, r8
 8018046:	a31e      	add	r3, pc, #120	@ (adr r3, 80180c0 <rcl_wait+0x2e0>)
 8018048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804c:	4640      	mov	r0, r8
 801804e:	4639      	mov	r1, r7
 8018050:	f7e8 fde4 	bl	8000c1c <__aeabi_ldivmod>
 8018054:	a31a      	add	r3, pc, #104	@ (adr r3, 80180c0 <rcl_wait+0x2e0>)
 8018056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801805e:	4640      	mov	r0, r8
 8018060:	4639      	mov	r1, r7
 8018062:	f7e8 fddb 	bl	8000c1c <__aeabi_ldivmod>
 8018066:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801806a:	ab08      	add	r3, sp, #32
 801806c:	e73e      	b.n	8017eec <rcl_wait+0x10c>
 801806e:	2001      	movs	r0, #1
 8018070:	b00d      	add	sp, #52	@ 0x34
 8018072:	ecbd 8b02 	vpop	{d8}
 8018076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801807a:	200b      	movs	r0, #11
 801807c:	b00d      	add	sp, #52	@ 0x34
 801807e:	ecbd 8b02 	vpop	{d8}
 8018082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018086:	465b      	mov	r3, fp
 8018088:	2b00      	cmp	r3, #0
 801808a:	d1d7      	bne.n	801803c <rcl_wait+0x25c>
 801808c:	e72e      	b.n	8017eec <rcl_wait+0x10c>
 801808e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018092:	430b      	orrs	r3, r1
 8018094:	bf08      	it	eq
 8018096:	4691      	moveq	r9, r2
 8018098:	f43f af21 	beq.w	8017ede <rcl_wait+0xfe>
 801809c:	9b04      	ldr	r3, [sp, #16]
 801809e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80180a2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80180a6:	2b01      	cmp	r3, #1
 80180a8:	9b05      	ldr	r3, [sp, #20]
 80180aa:	f173 0300 	sbcs.w	r3, r3, #0
 80180ae:	f04f 0300 	mov.w	r3, #0
 80180b2:	4699      	mov	r9, r3
 80180b4:	dac2      	bge.n	801803c <rcl_wait+0x25c>
 80180b6:	e719      	b.n	8017eec <rcl_wait+0x10c>
 80180b8:	ffffffff 	.word	0xffffffff
 80180bc:	7fffffff 	.word	0x7fffffff
 80180c0:	3b9aca00 	.word	0x3b9aca00
 80180c4:	00000000 	.word	0x00000000

080180c8 <rcl_action_take_goal_response>:
 80180c8:	2800      	cmp	r0, #0
 80180ca:	d039      	beq.n	8018140 <rcl_action_take_goal_response+0x78>
 80180cc:	b570      	push	{r4, r5, r6, lr}
 80180ce:	4604      	mov	r4, r0
 80180d0:	6800      	ldr	r0, [r0, #0]
 80180d2:	b380      	cbz	r0, 8018136 <rcl_action_take_goal_response+0x6e>
 80180d4:	460d      	mov	r5, r1
 80180d6:	4616      	mov	r6, r2
 80180d8:	f7fd ffc2 	bl	8016060 <rcl_client_is_valid>
 80180dc:	b330      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180de:	6820      	ldr	r0, [r4, #0]
 80180e0:	3004      	adds	r0, #4
 80180e2:	f7fd ffbd 	bl	8016060 <rcl_client_is_valid>
 80180e6:	b308      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180e8:	6820      	ldr	r0, [r4, #0]
 80180ea:	3008      	adds	r0, #8
 80180ec:	f7fd ffb8 	bl	8016060 <rcl_client_is_valid>
 80180f0:	b1e0      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180f2:	6820      	ldr	r0, [r4, #0]
 80180f4:	300c      	adds	r0, #12
 80180f6:	f7ff f801 	bl	80170fc <rcl_subscription_is_valid>
 80180fa:	b1b8      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180fc:	6820      	ldr	r0, [r4, #0]
 80180fe:	3010      	adds	r0, #16
 8018100:	f7fe fffc 	bl	80170fc <rcl_subscription_is_valid>
 8018104:	b190      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 8018106:	b1cd      	cbz	r5, 801813c <rcl_action_take_goal_response+0x74>
 8018108:	b1c6      	cbz	r6, 801813c <rcl_action_take_goal_response+0x74>
 801810a:	6820      	ldr	r0, [r4, #0]
 801810c:	4632      	mov	r2, r6
 801810e:	4629      	mov	r1, r5
 8018110:	f7fd ff5e 	bl	8015fd0 <rcl_take_response>
 8018114:	b148      	cbz	r0, 801812a <rcl_action_take_goal_response+0x62>
 8018116:	280a      	cmp	r0, #10
 8018118:	d007      	beq.n	801812a <rcl_action_take_goal_response+0x62>
 801811a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801811e:	f640 0337 	movw	r3, #2103	@ 0x837
 8018122:	4290      	cmp	r0, r2
 8018124:	bf0c      	ite	eq
 8018126:	4618      	moveq	r0, r3
 8018128:	2001      	movne	r0, #1
 801812a:	bd70      	pop	{r4, r5, r6, pc}
 801812c:	f7f6 fb20 	bl	800e770 <rcutils_reset_error>
 8018130:	f640 0036 	movw	r0, #2102	@ 0x836
 8018134:	bd70      	pop	{r4, r5, r6, pc}
 8018136:	f640 0036 	movw	r0, #2102	@ 0x836
 801813a:	bd70      	pop	{r4, r5, r6, pc}
 801813c:	200b      	movs	r0, #11
 801813e:	bd70      	pop	{r4, r5, r6, pc}
 8018140:	f640 0036 	movw	r0, #2102	@ 0x836
 8018144:	4770      	bx	lr
 8018146:	bf00      	nop

08018148 <rcl_action_send_result_request>:
 8018148:	b390      	cbz	r0, 80181b0 <rcl_action_send_result_request+0x68>
 801814a:	b570      	push	{r4, r5, r6, lr}
 801814c:	4604      	mov	r4, r0
 801814e:	6800      	ldr	r0, [r0, #0]
 8018150:	b348      	cbz	r0, 80181a6 <rcl_action_send_result_request+0x5e>
 8018152:	460d      	mov	r5, r1
 8018154:	4616      	mov	r6, r2
 8018156:	f7fd ff83 	bl	8016060 <rcl_client_is_valid>
 801815a:	b1f8      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 801815c:	6820      	ldr	r0, [r4, #0]
 801815e:	3004      	adds	r0, #4
 8018160:	f7fd ff7e 	bl	8016060 <rcl_client_is_valid>
 8018164:	b1d0      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 8018166:	6820      	ldr	r0, [r4, #0]
 8018168:	3008      	adds	r0, #8
 801816a:	f7fd ff79 	bl	8016060 <rcl_client_is_valid>
 801816e:	b1a8      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 8018170:	6820      	ldr	r0, [r4, #0]
 8018172:	300c      	adds	r0, #12
 8018174:	f7fe ffc2 	bl	80170fc <rcl_subscription_is_valid>
 8018178:	b180      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 801817a:	6820      	ldr	r0, [r4, #0]
 801817c:	3010      	adds	r0, #16
 801817e:	f7fe ffbd 	bl	80170fc <rcl_subscription_is_valid>
 8018182:	b158      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 8018184:	b195      	cbz	r5, 80181ac <rcl_action_send_result_request+0x64>
 8018186:	b18e      	cbz	r6, 80181ac <rcl_action_send_result_request+0x64>
 8018188:	6820      	ldr	r0, [r4, #0]
 801818a:	4632      	mov	r2, r6
 801818c:	4629      	mov	r1, r5
 801818e:	3008      	adds	r0, #8
 8018190:	f7fd fee8 	bl	8015f64 <rcl_send_request>
 8018194:	3800      	subs	r0, #0
 8018196:	bf18      	it	ne
 8018198:	2001      	movne	r0, #1
 801819a:	bd70      	pop	{r4, r5, r6, pc}
 801819c:	f7f6 fae8 	bl	800e770 <rcutils_reset_error>
 80181a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80181a4:	bd70      	pop	{r4, r5, r6, pc}
 80181a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80181aa:	bd70      	pop	{r4, r5, r6, pc}
 80181ac:	200b      	movs	r0, #11
 80181ae:	bd70      	pop	{r4, r5, r6, pc}
 80181b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80181b4:	4770      	bx	lr
 80181b6:	bf00      	nop

080181b8 <rcl_action_take_result_response>:
 80181b8:	2800      	cmp	r0, #0
 80181ba:	d03a      	beq.n	8018232 <rcl_action_take_result_response+0x7a>
 80181bc:	b570      	push	{r4, r5, r6, lr}
 80181be:	4604      	mov	r4, r0
 80181c0:	6800      	ldr	r0, [r0, #0]
 80181c2:	b388      	cbz	r0, 8018228 <rcl_action_take_result_response+0x70>
 80181c4:	460d      	mov	r5, r1
 80181c6:	4616      	mov	r6, r2
 80181c8:	f7fd ff4a 	bl	8016060 <rcl_client_is_valid>
 80181cc:	b338      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181ce:	6820      	ldr	r0, [r4, #0]
 80181d0:	3004      	adds	r0, #4
 80181d2:	f7fd ff45 	bl	8016060 <rcl_client_is_valid>
 80181d6:	b310      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181d8:	6820      	ldr	r0, [r4, #0]
 80181da:	3008      	adds	r0, #8
 80181dc:	f7fd ff40 	bl	8016060 <rcl_client_is_valid>
 80181e0:	b1e8      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181e2:	6820      	ldr	r0, [r4, #0]
 80181e4:	300c      	adds	r0, #12
 80181e6:	f7fe ff89 	bl	80170fc <rcl_subscription_is_valid>
 80181ea:	b1c0      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181ec:	6820      	ldr	r0, [r4, #0]
 80181ee:	3010      	adds	r0, #16
 80181f0:	f7fe ff84 	bl	80170fc <rcl_subscription_is_valid>
 80181f4:	b198      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181f6:	b1d5      	cbz	r5, 801822e <rcl_action_take_result_response+0x76>
 80181f8:	b1ce      	cbz	r6, 801822e <rcl_action_take_result_response+0x76>
 80181fa:	6820      	ldr	r0, [r4, #0]
 80181fc:	4632      	mov	r2, r6
 80181fe:	4629      	mov	r1, r5
 8018200:	3008      	adds	r0, #8
 8018202:	f7fd fee5 	bl	8015fd0 <rcl_take_response>
 8018206:	b148      	cbz	r0, 801821c <rcl_action_take_result_response+0x64>
 8018208:	280a      	cmp	r0, #10
 801820a:	d007      	beq.n	801821c <rcl_action_take_result_response+0x64>
 801820c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018210:	f640 0337 	movw	r3, #2103	@ 0x837
 8018214:	4290      	cmp	r0, r2
 8018216:	bf0c      	ite	eq
 8018218:	4618      	moveq	r0, r3
 801821a:	2001      	movne	r0, #1
 801821c:	bd70      	pop	{r4, r5, r6, pc}
 801821e:	f7f6 faa7 	bl	800e770 <rcutils_reset_error>
 8018222:	f640 0036 	movw	r0, #2102	@ 0x836
 8018226:	bd70      	pop	{r4, r5, r6, pc}
 8018228:	f640 0036 	movw	r0, #2102	@ 0x836
 801822c:	bd70      	pop	{r4, r5, r6, pc}
 801822e:	200b      	movs	r0, #11
 8018230:	bd70      	pop	{r4, r5, r6, pc}
 8018232:	f640 0036 	movw	r0, #2102	@ 0x836
 8018236:	4770      	bx	lr

08018238 <rcl_action_take_cancel_response>:
 8018238:	2800      	cmp	r0, #0
 801823a:	d03a      	beq.n	80182b2 <rcl_action_take_cancel_response+0x7a>
 801823c:	b570      	push	{r4, r5, r6, lr}
 801823e:	4604      	mov	r4, r0
 8018240:	6800      	ldr	r0, [r0, #0]
 8018242:	b388      	cbz	r0, 80182a8 <rcl_action_take_cancel_response+0x70>
 8018244:	460d      	mov	r5, r1
 8018246:	4616      	mov	r6, r2
 8018248:	f7fd ff0a 	bl	8016060 <rcl_client_is_valid>
 801824c:	b338      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 801824e:	6820      	ldr	r0, [r4, #0]
 8018250:	3004      	adds	r0, #4
 8018252:	f7fd ff05 	bl	8016060 <rcl_client_is_valid>
 8018256:	b310      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 8018258:	6820      	ldr	r0, [r4, #0]
 801825a:	3008      	adds	r0, #8
 801825c:	f7fd ff00 	bl	8016060 <rcl_client_is_valid>
 8018260:	b1e8      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 8018262:	6820      	ldr	r0, [r4, #0]
 8018264:	300c      	adds	r0, #12
 8018266:	f7fe ff49 	bl	80170fc <rcl_subscription_is_valid>
 801826a:	b1c0      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 801826c:	6820      	ldr	r0, [r4, #0]
 801826e:	3010      	adds	r0, #16
 8018270:	f7fe ff44 	bl	80170fc <rcl_subscription_is_valid>
 8018274:	b198      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 8018276:	b1d5      	cbz	r5, 80182ae <rcl_action_take_cancel_response+0x76>
 8018278:	b1ce      	cbz	r6, 80182ae <rcl_action_take_cancel_response+0x76>
 801827a:	6820      	ldr	r0, [r4, #0]
 801827c:	4632      	mov	r2, r6
 801827e:	4629      	mov	r1, r5
 8018280:	3004      	adds	r0, #4
 8018282:	f7fd fea5 	bl	8015fd0 <rcl_take_response>
 8018286:	b148      	cbz	r0, 801829c <rcl_action_take_cancel_response+0x64>
 8018288:	280a      	cmp	r0, #10
 801828a:	d007      	beq.n	801829c <rcl_action_take_cancel_response+0x64>
 801828c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018290:	f640 0337 	movw	r3, #2103	@ 0x837
 8018294:	4290      	cmp	r0, r2
 8018296:	bf0c      	ite	eq
 8018298:	4618      	moveq	r0, r3
 801829a:	2001      	movne	r0, #1
 801829c:	bd70      	pop	{r4, r5, r6, pc}
 801829e:	f7f6 fa67 	bl	800e770 <rcutils_reset_error>
 80182a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80182a6:	bd70      	pop	{r4, r5, r6, pc}
 80182a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80182ac:	bd70      	pop	{r4, r5, r6, pc}
 80182ae:	200b      	movs	r0, #11
 80182b0:	bd70      	pop	{r4, r5, r6, pc}
 80182b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80182b6:	4770      	bx	lr

080182b8 <rcl_action_take_feedback>:
 80182b8:	2800      	cmp	r0, #0
 80182ba:	d038      	beq.n	801832e <rcl_action_take_feedback+0x76>
 80182bc:	b530      	push	{r4, r5, lr}
 80182be:	4604      	mov	r4, r0
 80182c0:	6800      	ldr	r0, [r0, #0]
 80182c2:	b091      	sub	sp, #68	@ 0x44
 80182c4:	b378      	cbz	r0, 8018326 <rcl_action_take_feedback+0x6e>
 80182c6:	460d      	mov	r5, r1
 80182c8:	f7fd feca 	bl	8016060 <rcl_client_is_valid>
 80182cc:	b328      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182ce:	6820      	ldr	r0, [r4, #0]
 80182d0:	3004      	adds	r0, #4
 80182d2:	f7fd fec5 	bl	8016060 <rcl_client_is_valid>
 80182d6:	b300      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182d8:	6820      	ldr	r0, [r4, #0]
 80182da:	3008      	adds	r0, #8
 80182dc:	f7fd fec0 	bl	8016060 <rcl_client_is_valid>
 80182e0:	b1d8      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182e2:	6820      	ldr	r0, [r4, #0]
 80182e4:	300c      	adds	r0, #12
 80182e6:	f7fe ff09 	bl	80170fc <rcl_subscription_is_valid>
 80182ea:	b1b0      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182ec:	6820      	ldr	r0, [r4, #0]
 80182ee:	3010      	adds	r0, #16
 80182f0:	f7fe ff04 	bl	80170fc <rcl_subscription_is_valid>
 80182f4:	b188      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182f6:	b1ed      	cbz	r5, 8018334 <rcl_action_take_feedback+0x7c>
 80182f8:	6820      	ldr	r0, [r4, #0]
 80182fa:	2300      	movs	r3, #0
 80182fc:	466a      	mov	r2, sp
 80182fe:	4629      	mov	r1, r5
 8018300:	300c      	adds	r0, #12
 8018302:	f7fe fe9d 	bl	8017040 <rcl_take>
 8018306:	b160      	cbz	r0, 8018322 <rcl_action_take_feedback+0x6a>
 8018308:	f240 1391 	movw	r3, #401	@ 0x191
 801830c:	4298      	cmp	r0, r3
 801830e:	d014      	beq.n	801833a <rcl_action_take_feedback+0x82>
 8018310:	280a      	cmp	r0, #10
 8018312:	bf18      	it	ne
 8018314:	2001      	movne	r0, #1
 8018316:	b011      	add	sp, #68	@ 0x44
 8018318:	bd30      	pop	{r4, r5, pc}
 801831a:	f7f6 fa29 	bl	800e770 <rcutils_reset_error>
 801831e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018322:	b011      	add	sp, #68	@ 0x44
 8018324:	bd30      	pop	{r4, r5, pc}
 8018326:	f640 0036 	movw	r0, #2102	@ 0x836
 801832a:	b011      	add	sp, #68	@ 0x44
 801832c:	bd30      	pop	{r4, r5, pc}
 801832e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018332:	4770      	bx	lr
 8018334:	200b      	movs	r0, #11
 8018336:	b011      	add	sp, #68	@ 0x44
 8018338:	bd30      	pop	{r4, r5, pc}
 801833a:	f640 0037 	movw	r0, #2103	@ 0x837
 801833e:	e7f0      	b.n	8018322 <rcl_action_take_feedback+0x6a>

08018340 <rcl_action_wait_set_add_action_client>:
 8018340:	2800      	cmp	r0, #0
 8018342:	d048      	beq.n	80183d6 <rcl_action_wait_set_add_action_client+0x96>
 8018344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018346:	460c      	mov	r4, r1
 8018348:	2900      	cmp	r1, #0
 801834a:	d03c      	beq.n	80183c6 <rcl_action_wait_set_add_action_client+0x86>
 801834c:	4605      	mov	r5, r0
 801834e:	6808      	ldr	r0, [r1, #0]
 8018350:	2800      	cmp	r0, #0
 8018352:	d038      	beq.n	80183c6 <rcl_action_wait_set_add_action_client+0x86>
 8018354:	4617      	mov	r7, r2
 8018356:	461e      	mov	r6, r3
 8018358:	f7fd fe82 	bl	8016060 <rcl_client_is_valid>
 801835c:	b3b0      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 801835e:	6820      	ldr	r0, [r4, #0]
 8018360:	3004      	adds	r0, #4
 8018362:	f7fd fe7d 	bl	8016060 <rcl_client_is_valid>
 8018366:	b388      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 8018368:	6820      	ldr	r0, [r4, #0]
 801836a:	3008      	adds	r0, #8
 801836c:	f7fd fe78 	bl	8016060 <rcl_client_is_valid>
 8018370:	b360      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 8018372:	6820      	ldr	r0, [r4, #0]
 8018374:	300c      	adds	r0, #12
 8018376:	f7fe fec1 	bl	80170fc <rcl_subscription_is_valid>
 801837a:	b338      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 801837c:	6820      	ldr	r0, [r4, #0]
 801837e:	3010      	adds	r0, #16
 8018380:	f7fe febc 	bl	80170fc <rcl_subscription_is_valid>
 8018384:	b310      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 8018386:	6821      	ldr	r1, [r4, #0]
 8018388:	4628      	mov	r0, r5
 801838a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801838e:	f7ff fccf 	bl	8017d30 <rcl_wait_set_add_client>
 8018392:	b9b8      	cbnz	r0, 80183c4 <rcl_action_wait_set_add_action_client+0x84>
 8018394:	6821      	ldr	r1, [r4, #0]
 8018396:	4628      	mov	r0, r5
 8018398:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801839c:	3104      	adds	r1, #4
 801839e:	f7ff fcc7 	bl	8017d30 <rcl_wait_set_add_client>
 80183a2:	b978      	cbnz	r0, 80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183a4:	6821      	ldr	r1, [r4, #0]
 80183a6:	4628      	mov	r0, r5
 80183a8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80183ac:	3108      	adds	r1, #8
 80183ae:	f7ff fcbf 	bl	8017d30 <rcl_wait_set_add_client>
 80183b2:	b938      	cbnz	r0, 80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183b4:	6821      	ldr	r1, [r4, #0]
 80183b6:	4628      	mov	r0, r5
 80183b8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80183bc:	310c      	adds	r1, #12
 80183be:	f7ff f96f 	bl	80176a0 <rcl_wait_set_add_subscription>
 80183c2:	b158      	cbz	r0, 80183dc <rcl_action_wait_set_add_action_client+0x9c>
 80183c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80183ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183cc:	f7f6 f9d0 	bl	800e770 <rcutils_reset_error>
 80183d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80183d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80183da:	4770      	bx	lr
 80183dc:	6821      	ldr	r1, [r4, #0]
 80183de:	4628      	mov	r0, r5
 80183e0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80183e4:	3110      	adds	r1, #16
 80183e6:	f7ff f95b 	bl	80176a0 <rcl_wait_set_add_subscription>
 80183ea:	2800      	cmp	r0, #0
 80183ec:	d1ea      	bne.n	80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183ee:	b11f      	cbz	r7, 80183f8 <rcl_action_wait_set_add_action_client+0xb8>
 80183f0:	6823      	ldr	r3, [r4, #0]
 80183f2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80183f6:	603b      	str	r3, [r7, #0]
 80183f8:	2e00      	cmp	r6, #0
 80183fa:	d0e3      	beq.n	80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8018402:	6033      	str	r3, [r6, #0]
 8018404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018406:	bf00      	nop

08018408 <rcl_action_client_wait_set_get_entities_ready>:
 8018408:	2800      	cmp	r0, #0
 801840a:	f000 808d 	beq.w	8018528 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801840e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018412:	460c      	mov	r4, r1
 8018414:	2900      	cmp	r1, #0
 8018416:	d077      	beq.n	8018508 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018418:	4605      	mov	r5, r0
 801841a:	6808      	ldr	r0, [r1, #0]
 801841c:	2800      	cmp	r0, #0
 801841e:	d073      	beq.n	8018508 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018420:	4616      	mov	r6, r2
 8018422:	461f      	mov	r7, r3
 8018424:	f7fd fe1c 	bl	8016060 <rcl_client_is_valid>
 8018428:	2800      	cmp	r0, #0
 801842a:	d071      	beq.n	8018510 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801842c:	6820      	ldr	r0, [r4, #0]
 801842e:	3004      	adds	r0, #4
 8018430:	f7fd fe16 	bl	8016060 <rcl_client_is_valid>
 8018434:	2800      	cmp	r0, #0
 8018436:	d06b      	beq.n	8018510 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018438:	6820      	ldr	r0, [r4, #0]
 801843a:	3008      	adds	r0, #8
 801843c:	f7fd fe10 	bl	8016060 <rcl_client_is_valid>
 8018440:	2800      	cmp	r0, #0
 8018442:	d065      	beq.n	8018510 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018444:	6820      	ldr	r0, [r4, #0]
 8018446:	300c      	adds	r0, #12
 8018448:	f7fe fe58 	bl	80170fc <rcl_subscription_is_valid>
 801844c:	2800      	cmp	r0, #0
 801844e:	d05f      	beq.n	8018510 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018450:	6820      	ldr	r0, [r4, #0]
 8018452:	3010      	adds	r0, #16
 8018454:	f7fe fe52 	bl	80170fc <rcl_subscription_is_valid>
 8018458:	2800      	cmp	r0, #0
 801845a:	d059      	beq.n	8018510 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801845c:	2e00      	cmp	r6, #0
 801845e:	d060      	beq.n	8018522 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018460:	2f00      	cmp	r7, #0
 8018462:	d05e      	beq.n	8018522 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018464:	9b06      	ldr	r3, [sp, #24]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d05b      	beq.n	8018522 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801846a:	9b07      	ldr	r3, [sp, #28]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d058      	beq.n	8018522 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018470:	9b08      	ldr	r3, [sp, #32]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d055      	beq.n	8018522 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018476:	6823      	ldr	r3, [r4, #0]
 8018478:	686a      	ldr	r2, [r5, #4]
 801847a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801847e:	428a      	cmp	r2, r1
 8018480:	d94c      	bls.n	801851c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018482:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8018486:	4282      	cmp	r2, r0
 8018488:	d948      	bls.n	801851c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801848a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801848e:	69ea      	ldr	r2, [r5, #28]
 8018490:	42a2      	cmp	r2, r4
 8018492:	d943      	bls.n	801851c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018494:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8018498:	4562      	cmp	r2, ip
 801849a:	d93f      	bls.n	801851c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801849c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80184a0:	4572      	cmp	r2, lr
 80184a2:	d93b      	bls.n	801851c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80184a4:	69aa      	ldr	r2, [r5, #24]
 80184a6:	682d      	ldr	r5, [r5, #0]
 80184a8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80184ac:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80184b0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80184b4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80184b8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80184bc:	f103 0c0c 	add.w	ip, r3, #12
 80184c0:	eba5 050c 	sub.w	r5, r5, ip
 80184c4:	fab5 f585 	clz	r5, r5
 80184c8:	096d      	lsrs	r5, r5, #5
 80184ca:	7035      	strb	r5, [r6, #0]
 80184cc:	f103 0510 	add.w	r5, r3, #16
 80184d0:	1b64      	subs	r4, r4, r5
 80184d2:	fab4 f484 	clz	r4, r4
 80184d6:	0964      	lsrs	r4, r4, #5
 80184d8:	703c      	strb	r4, [r7, #0]
 80184da:	eba3 0008 	sub.w	r0, r3, r8
 80184de:	1d1c      	adds	r4, r3, #4
 80184e0:	3308      	adds	r3, #8
 80184e2:	1ad3      	subs	r3, r2, r3
 80184e4:	fab0 f080 	clz	r0, r0
 80184e8:	9a06      	ldr	r2, [sp, #24]
 80184ea:	0940      	lsrs	r0, r0, #5
 80184ec:	1b09      	subs	r1, r1, r4
 80184ee:	7010      	strb	r0, [r2, #0]
 80184f0:	fab1 f181 	clz	r1, r1
 80184f4:	9a07      	ldr	r2, [sp, #28]
 80184f6:	0949      	lsrs	r1, r1, #5
 80184f8:	7011      	strb	r1, [r2, #0]
 80184fa:	fab3 f383 	clz	r3, r3
 80184fe:	9a08      	ldr	r2, [sp, #32]
 8018500:	095b      	lsrs	r3, r3, #5
 8018502:	2000      	movs	r0, #0
 8018504:	7013      	strb	r3, [r2, #0]
 8018506:	e001      	b.n	801850c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8018508:	f640 0036 	movw	r0, #2102	@ 0x836
 801850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018510:	f7f6 f92e 	bl	800e770 <rcutils_reset_error>
 8018514:	f640 0036 	movw	r0, #2102	@ 0x836
 8018518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801851c:	2001      	movs	r0, #1
 801851e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018522:	200b      	movs	r0, #11
 8018524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018528:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801852c:	4770      	bx	lr
 801852e:	bf00      	nop

08018530 <rcl_action_take_goal_request>:
 8018530:	2800      	cmp	r0, #0
 8018532:	d039      	beq.n	80185a8 <rcl_action_take_goal_request+0x78>
 8018534:	b570      	push	{r4, r5, r6, lr}
 8018536:	4604      	mov	r4, r0
 8018538:	6800      	ldr	r0, [r0, #0]
 801853a:	b380      	cbz	r0, 801859e <rcl_action_take_goal_request+0x6e>
 801853c:	460d      	mov	r5, r1
 801853e:	4616      	mov	r6, r2
 8018540:	f7fe fc98 	bl	8016e74 <rcl_service_is_valid>
 8018544:	b330      	cbz	r0, 8018594 <rcl_action_take_goal_request+0x64>
 8018546:	6820      	ldr	r0, [r4, #0]
 8018548:	3004      	adds	r0, #4
 801854a:	f7fe fc93 	bl	8016e74 <rcl_service_is_valid>
 801854e:	b308      	cbz	r0, 8018594 <rcl_action_take_goal_request+0x64>
 8018550:	6820      	ldr	r0, [r4, #0]
 8018552:	3008      	adds	r0, #8
 8018554:	f7fe fc8e 	bl	8016e74 <rcl_service_is_valid>
 8018558:	b1e0      	cbz	r0, 8018594 <rcl_action_take_goal_request+0x64>
 801855a:	6820      	ldr	r0, [r4, #0]
 801855c:	300c      	adds	r0, #12
 801855e:	f7f3 fdc7 	bl	800c0f0 <rcl_publisher_is_valid>
 8018562:	b1b8      	cbz	r0, 8018594 <rcl_action_take_goal_request+0x64>
 8018564:	6820      	ldr	r0, [r4, #0]
 8018566:	3010      	adds	r0, #16
 8018568:	f7f3 fdc2 	bl	800c0f0 <rcl_publisher_is_valid>
 801856c:	b190      	cbz	r0, 8018594 <rcl_action_take_goal_request+0x64>
 801856e:	b1cd      	cbz	r5, 80185a4 <rcl_action_take_goal_request+0x74>
 8018570:	b1c6      	cbz	r6, 80185a4 <rcl_action_take_goal_request+0x74>
 8018572:	6820      	ldr	r0, [r4, #0]
 8018574:	4632      	mov	r2, r6
 8018576:	4629      	mov	r1, r5
 8018578:	f7fe fc24 	bl	8016dc4 <rcl_take_request>
 801857c:	b148      	cbz	r0, 8018592 <rcl_action_take_goal_request+0x62>
 801857e:	280a      	cmp	r0, #10
 8018580:	d007      	beq.n	8018592 <rcl_action_take_goal_request+0x62>
 8018582:	f240 2259 	movw	r2, #601	@ 0x259
 8018586:	f640 0399 	movw	r3, #2201	@ 0x899
 801858a:	4290      	cmp	r0, r2
 801858c:	bf0c      	ite	eq
 801858e:	4618      	moveq	r0, r3
 8018590:	2001      	movne	r0, #1
 8018592:	bd70      	pop	{r4, r5, r6, pc}
 8018594:	f7f6 f8ec 	bl	800e770 <rcutils_reset_error>
 8018598:	f640 0098 	movw	r0, #2200	@ 0x898
 801859c:	bd70      	pop	{r4, r5, r6, pc}
 801859e:	f640 0098 	movw	r0, #2200	@ 0x898
 80185a2:	bd70      	pop	{r4, r5, r6, pc}
 80185a4:	200b      	movs	r0, #11
 80185a6:	bd70      	pop	{r4, r5, r6, pc}
 80185a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop

080185b0 <rcl_action_send_goal_response>:
 80185b0:	b390      	cbz	r0, 8018618 <rcl_action_send_goal_response+0x68>
 80185b2:	b570      	push	{r4, r5, r6, lr}
 80185b4:	4604      	mov	r4, r0
 80185b6:	6800      	ldr	r0, [r0, #0]
 80185b8:	b348      	cbz	r0, 801860e <rcl_action_send_goal_response+0x5e>
 80185ba:	460d      	mov	r5, r1
 80185bc:	4616      	mov	r6, r2
 80185be:	f7fe fc59 	bl	8016e74 <rcl_service_is_valid>
 80185c2:	b1f8      	cbz	r0, 8018604 <rcl_action_send_goal_response+0x54>
 80185c4:	6820      	ldr	r0, [r4, #0]
 80185c6:	3004      	adds	r0, #4
 80185c8:	f7fe fc54 	bl	8016e74 <rcl_service_is_valid>
 80185cc:	b1d0      	cbz	r0, 8018604 <rcl_action_send_goal_response+0x54>
 80185ce:	6820      	ldr	r0, [r4, #0]
 80185d0:	3008      	adds	r0, #8
 80185d2:	f7fe fc4f 	bl	8016e74 <rcl_service_is_valid>
 80185d6:	b1a8      	cbz	r0, 8018604 <rcl_action_send_goal_response+0x54>
 80185d8:	6820      	ldr	r0, [r4, #0]
 80185da:	300c      	adds	r0, #12
 80185dc:	f7f3 fd88 	bl	800c0f0 <rcl_publisher_is_valid>
 80185e0:	b180      	cbz	r0, 8018604 <rcl_action_send_goal_response+0x54>
 80185e2:	6820      	ldr	r0, [r4, #0]
 80185e4:	3010      	adds	r0, #16
 80185e6:	f7f3 fd83 	bl	800c0f0 <rcl_publisher_is_valid>
 80185ea:	b158      	cbz	r0, 8018604 <rcl_action_send_goal_response+0x54>
 80185ec:	b195      	cbz	r5, 8018614 <rcl_action_send_goal_response+0x64>
 80185ee:	b18e      	cbz	r6, 8018614 <rcl_action_send_goal_response+0x64>
 80185f0:	6820      	ldr	r0, [r4, #0]
 80185f2:	4632      	mov	r2, r6
 80185f4:	4629      	mov	r1, r5
 80185f6:	f7fe fc25 	bl	8016e44 <rcl_send_response>
 80185fa:	b110      	cbz	r0, 8018602 <rcl_action_send_goal_response+0x52>
 80185fc:	2802      	cmp	r0, #2
 80185fe:	bf18      	it	ne
 8018600:	2001      	movne	r0, #1
 8018602:	bd70      	pop	{r4, r5, r6, pc}
 8018604:	f7f6 f8b4 	bl	800e770 <rcutils_reset_error>
 8018608:	f640 0098 	movw	r0, #2200	@ 0x898
 801860c:	bd70      	pop	{r4, r5, r6, pc}
 801860e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018612:	bd70      	pop	{r4, r5, r6, pc}
 8018614:	200b      	movs	r0, #11
 8018616:	bd70      	pop	{r4, r5, r6, pc}
 8018618:	f640 0098 	movw	r0, #2200	@ 0x898
 801861c:	4770      	bx	lr
 801861e:	bf00      	nop

08018620 <rcl_action_take_result_request>:
 8018620:	2800      	cmp	r0, #0
 8018622:	d03a      	beq.n	801869a <rcl_action_take_result_request+0x7a>
 8018624:	b570      	push	{r4, r5, r6, lr}
 8018626:	4604      	mov	r4, r0
 8018628:	6800      	ldr	r0, [r0, #0]
 801862a:	b388      	cbz	r0, 8018690 <rcl_action_take_result_request+0x70>
 801862c:	460d      	mov	r5, r1
 801862e:	4616      	mov	r6, r2
 8018630:	f7fe fc20 	bl	8016e74 <rcl_service_is_valid>
 8018634:	b338      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 8018636:	6820      	ldr	r0, [r4, #0]
 8018638:	3004      	adds	r0, #4
 801863a:	f7fe fc1b 	bl	8016e74 <rcl_service_is_valid>
 801863e:	b310      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 8018640:	6820      	ldr	r0, [r4, #0]
 8018642:	3008      	adds	r0, #8
 8018644:	f7fe fc16 	bl	8016e74 <rcl_service_is_valid>
 8018648:	b1e8      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 801864a:	6820      	ldr	r0, [r4, #0]
 801864c:	300c      	adds	r0, #12
 801864e:	f7f3 fd4f 	bl	800c0f0 <rcl_publisher_is_valid>
 8018652:	b1c0      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 8018654:	6820      	ldr	r0, [r4, #0]
 8018656:	3010      	adds	r0, #16
 8018658:	f7f3 fd4a 	bl	800c0f0 <rcl_publisher_is_valid>
 801865c:	b198      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 801865e:	b1d5      	cbz	r5, 8018696 <rcl_action_take_result_request+0x76>
 8018660:	b1ce      	cbz	r6, 8018696 <rcl_action_take_result_request+0x76>
 8018662:	6820      	ldr	r0, [r4, #0]
 8018664:	4632      	mov	r2, r6
 8018666:	4629      	mov	r1, r5
 8018668:	3008      	adds	r0, #8
 801866a:	f7fe fbab 	bl	8016dc4 <rcl_take_request>
 801866e:	b148      	cbz	r0, 8018684 <rcl_action_take_result_request+0x64>
 8018670:	280a      	cmp	r0, #10
 8018672:	d007      	beq.n	8018684 <rcl_action_take_result_request+0x64>
 8018674:	f240 2259 	movw	r2, #601	@ 0x259
 8018678:	f640 0399 	movw	r3, #2201	@ 0x899
 801867c:	4290      	cmp	r0, r2
 801867e:	bf0c      	ite	eq
 8018680:	4618      	moveq	r0, r3
 8018682:	2001      	movne	r0, #1
 8018684:	bd70      	pop	{r4, r5, r6, pc}
 8018686:	f7f6 f873 	bl	800e770 <rcutils_reset_error>
 801868a:	f640 0098 	movw	r0, #2200	@ 0x898
 801868e:	bd70      	pop	{r4, r5, r6, pc}
 8018690:	f640 0098 	movw	r0, #2200	@ 0x898
 8018694:	bd70      	pop	{r4, r5, r6, pc}
 8018696:	200b      	movs	r0, #11
 8018698:	bd70      	pop	{r4, r5, r6, pc}
 801869a:	f640 0098 	movw	r0, #2200	@ 0x898
 801869e:	4770      	bx	lr

080186a0 <rcl_action_take_cancel_request>:
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d03a      	beq.n	801871a <rcl_action_take_cancel_request+0x7a>
 80186a4:	b570      	push	{r4, r5, r6, lr}
 80186a6:	4604      	mov	r4, r0
 80186a8:	6800      	ldr	r0, [r0, #0]
 80186aa:	b388      	cbz	r0, 8018710 <rcl_action_take_cancel_request+0x70>
 80186ac:	460d      	mov	r5, r1
 80186ae:	4616      	mov	r6, r2
 80186b0:	f7fe fbe0 	bl	8016e74 <rcl_service_is_valid>
 80186b4:	b338      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186b6:	6820      	ldr	r0, [r4, #0]
 80186b8:	3004      	adds	r0, #4
 80186ba:	f7fe fbdb 	bl	8016e74 <rcl_service_is_valid>
 80186be:	b310      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186c0:	6820      	ldr	r0, [r4, #0]
 80186c2:	3008      	adds	r0, #8
 80186c4:	f7fe fbd6 	bl	8016e74 <rcl_service_is_valid>
 80186c8:	b1e8      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186ca:	6820      	ldr	r0, [r4, #0]
 80186cc:	300c      	adds	r0, #12
 80186ce:	f7f3 fd0f 	bl	800c0f0 <rcl_publisher_is_valid>
 80186d2:	b1c0      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186d4:	6820      	ldr	r0, [r4, #0]
 80186d6:	3010      	adds	r0, #16
 80186d8:	f7f3 fd0a 	bl	800c0f0 <rcl_publisher_is_valid>
 80186dc:	b198      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186de:	b1d5      	cbz	r5, 8018716 <rcl_action_take_cancel_request+0x76>
 80186e0:	b1ce      	cbz	r6, 8018716 <rcl_action_take_cancel_request+0x76>
 80186e2:	6820      	ldr	r0, [r4, #0]
 80186e4:	4632      	mov	r2, r6
 80186e6:	4629      	mov	r1, r5
 80186e8:	3004      	adds	r0, #4
 80186ea:	f7fe fb6b 	bl	8016dc4 <rcl_take_request>
 80186ee:	b148      	cbz	r0, 8018704 <rcl_action_take_cancel_request+0x64>
 80186f0:	280a      	cmp	r0, #10
 80186f2:	d007      	beq.n	8018704 <rcl_action_take_cancel_request+0x64>
 80186f4:	f240 2259 	movw	r2, #601	@ 0x259
 80186f8:	f640 0399 	movw	r3, #2201	@ 0x899
 80186fc:	4290      	cmp	r0, r2
 80186fe:	bf0c      	ite	eq
 8018700:	4618      	moveq	r0, r3
 8018702:	2001      	movne	r0, #1
 8018704:	bd70      	pop	{r4, r5, r6, pc}
 8018706:	f7f6 f833 	bl	800e770 <rcutils_reset_error>
 801870a:	f640 0098 	movw	r0, #2200	@ 0x898
 801870e:	bd70      	pop	{r4, r5, r6, pc}
 8018710:	f640 0098 	movw	r0, #2200	@ 0x898
 8018714:	bd70      	pop	{r4, r5, r6, pc}
 8018716:	200b      	movs	r0, #11
 8018718:	bd70      	pop	{r4, r5, r6, pc}
 801871a:	f640 0098 	movw	r0, #2200	@ 0x898
 801871e:	4770      	bx	lr

08018720 <rcl_action_send_cancel_response>:
 8018720:	b398      	cbz	r0, 801878a <rcl_action_send_cancel_response+0x6a>
 8018722:	b570      	push	{r4, r5, r6, lr}
 8018724:	4604      	mov	r4, r0
 8018726:	6800      	ldr	r0, [r0, #0]
 8018728:	b350      	cbz	r0, 8018780 <rcl_action_send_cancel_response+0x60>
 801872a:	460d      	mov	r5, r1
 801872c:	4616      	mov	r6, r2
 801872e:	f7fe fba1 	bl	8016e74 <rcl_service_is_valid>
 8018732:	b300      	cbz	r0, 8018776 <rcl_action_send_cancel_response+0x56>
 8018734:	6820      	ldr	r0, [r4, #0]
 8018736:	3004      	adds	r0, #4
 8018738:	f7fe fb9c 	bl	8016e74 <rcl_service_is_valid>
 801873c:	b1d8      	cbz	r0, 8018776 <rcl_action_send_cancel_response+0x56>
 801873e:	6820      	ldr	r0, [r4, #0]
 8018740:	3008      	adds	r0, #8
 8018742:	f7fe fb97 	bl	8016e74 <rcl_service_is_valid>
 8018746:	b1b0      	cbz	r0, 8018776 <rcl_action_send_cancel_response+0x56>
 8018748:	6820      	ldr	r0, [r4, #0]
 801874a:	300c      	adds	r0, #12
 801874c:	f7f3 fcd0 	bl	800c0f0 <rcl_publisher_is_valid>
 8018750:	b188      	cbz	r0, 8018776 <rcl_action_send_cancel_response+0x56>
 8018752:	6820      	ldr	r0, [r4, #0]
 8018754:	3010      	adds	r0, #16
 8018756:	f7f3 fccb 	bl	800c0f0 <rcl_publisher_is_valid>
 801875a:	b160      	cbz	r0, 8018776 <rcl_action_send_cancel_response+0x56>
 801875c:	b19d      	cbz	r5, 8018786 <rcl_action_send_cancel_response+0x66>
 801875e:	b196      	cbz	r6, 8018786 <rcl_action_send_cancel_response+0x66>
 8018760:	6820      	ldr	r0, [r4, #0]
 8018762:	4632      	mov	r2, r6
 8018764:	4629      	mov	r1, r5
 8018766:	3004      	adds	r0, #4
 8018768:	f7fe fb6c 	bl	8016e44 <rcl_send_response>
 801876c:	b110      	cbz	r0, 8018774 <rcl_action_send_cancel_response+0x54>
 801876e:	2802      	cmp	r0, #2
 8018770:	bf18      	it	ne
 8018772:	2001      	movne	r0, #1
 8018774:	bd70      	pop	{r4, r5, r6, pc}
 8018776:	f7f5 fffb 	bl	800e770 <rcutils_reset_error>
 801877a:	f640 0098 	movw	r0, #2200	@ 0x898
 801877e:	bd70      	pop	{r4, r5, r6, pc}
 8018780:	f640 0098 	movw	r0, #2200	@ 0x898
 8018784:	bd70      	pop	{r4, r5, r6, pc}
 8018786:	200b      	movs	r0, #11
 8018788:	bd70      	pop	{r4, r5, r6, pc}
 801878a:	f640 0098 	movw	r0, #2200	@ 0x898
 801878e:	4770      	bx	lr

08018790 <rcl_action_wait_set_add_action_server>:
 8018790:	2800      	cmp	r0, #0
 8018792:	d04d      	beq.n	8018830 <rcl_action_wait_set_add_action_server+0xa0>
 8018794:	b570      	push	{r4, r5, r6, lr}
 8018796:	460c      	mov	r4, r1
 8018798:	b159      	cbz	r1, 80187b2 <rcl_action_wait_set_add_action_server+0x22>
 801879a:	4605      	mov	r5, r0
 801879c:	6808      	ldr	r0, [r1, #0]
 801879e:	b140      	cbz	r0, 80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187a0:	4616      	mov	r6, r2
 80187a2:	f7fe fb67 	bl	8016e74 <rcl_service_is_valid>
 80187a6:	b120      	cbz	r0, 80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187a8:	6820      	ldr	r0, [r4, #0]
 80187aa:	3004      	adds	r0, #4
 80187ac:	f7fe fb62 	bl	8016e74 <rcl_service_is_valid>
 80187b0:	b910      	cbnz	r0, 80187b8 <rcl_action_wait_set_add_action_server+0x28>
 80187b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80187b6:	bd70      	pop	{r4, r5, r6, pc}
 80187b8:	6820      	ldr	r0, [r4, #0]
 80187ba:	3008      	adds	r0, #8
 80187bc:	f7fe fb5a 	bl	8016e74 <rcl_service_is_valid>
 80187c0:	2800      	cmp	r0, #0
 80187c2:	d0f6      	beq.n	80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187c4:	6820      	ldr	r0, [r4, #0]
 80187c6:	300c      	adds	r0, #12
 80187c8:	f7f3 fcaa 	bl	800c120 <rcl_publisher_is_valid_except_context>
 80187cc:	2800      	cmp	r0, #0
 80187ce:	d0f0      	beq.n	80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187d0:	6820      	ldr	r0, [r4, #0]
 80187d2:	3010      	adds	r0, #16
 80187d4:	f7f3 fca4 	bl	800c120 <rcl_publisher_is_valid_except_context>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d0ea      	beq.n	80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187dc:	6821      	ldr	r1, [r4, #0]
 80187de:	4628      	mov	r0, r5
 80187e0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80187e4:	f7ff fad0 	bl	8017d88 <rcl_wait_set_add_service>
 80187e8:	2800      	cmp	r0, #0
 80187ea:	d1e4      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 80187ec:	6821      	ldr	r1, [r4, #0]
 80187ee:	4628      	mov	r0, r5
 80187f0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80187f4:	3104      	adds	r1, #4
 80187f6:	f7ff fac7 	bl	8017d88 <rcl_wait_set_add_service>
 80187fa:	2800      	cmp	r0, #0
 80187fc:	d1db      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 80187fe:	6821      	ldr	r1, [r4, #0]
 8018800:	4628      	mov	r0, r5
 8018802:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8018806:	3108      	adds	r1, #8
 8018808:	f7ff fabe 	bl	8017d88 <rcl_wait_set_add_service>
 801880c:	2800      	cmp	r0, #0
 801880e:	d1d2      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 8018810:	6821      	ldr	r1, [r4, #0]
 8018812:	4628      	mov	r0, r5
 8018814:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8018818:	3114      	adds	r1, #20
 801881a:	f7ff fa59 	bl	8017cd0 <rcl_wait_set_add_timer>
 801881e:	2800      	cmp	r0, #0
 8018820:	d1c9      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 8018822:	2e00      	cmp	r6, #0
 8018824:	d0c7      	beq.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 8018826:	6823      	ldr	r3, [r4, #0]
 8018828:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801882c:	6033      	str	r3, [r6, #0]
 801882e:	bd70      	pop	{r4, r5, r6, pc}
 8018830:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop

08018838 <rcl_action_server_wait_set_get_entities_ready>:
 8018838:	2800      	cmp	r0, #0
 801883a:	d05a      	beq.n	80188f2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801883e:	460c      	mov	r4, r1
 8018840:	b161      	cbz	r1, 801885c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018842:	4605      	mov	r5, r0
 8018844:	6808      	ldr	r0, [r1, #0]
 8018846:	b148      	cbz	r0, 801885c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018848:	4616      	mov	r6, r2
 801884a:	461f      	mov	r7, r3
 801884c:	f7fe fb12 	bl	8016e74 <rcl_service_is_valid>
 8018850:	b120      	cbz	r0, 801885c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018852:	6820      	ldr	r0, [r4, #0]
 8018854:	3004      	adds	r0, #4
 8018856:	f7fe fb0d 	bl	8016e74 <rcl_service_is_valid>
 801885a:	b910      	cbnz	r0, 8018862 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801885c:	f640 0098 	movw	r0, #2200	@ 0x898
 8018860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018862:	6820      	ldr	r0, [r4, #0]
 8018864:	3008      	adds	r0, #8
 8018866:	f7fe fb05 	bl	8016e74 <rcl_service_is_valid>
 801886a:	2800      	cmp	r0, #0
 801886c:	d0f6      	beq.n	801885c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801886e:	6820      	ldr	r0, [r4, #0]
 8018870:	300c      	adds	r0, #12
 8018872:	f7f3 fc55 	bl	800c120 <rcl_publisher_is_valid_except_context>
 8018876:	2800      	cmp	r0, #0
 8018878:	d0f0      	beq.n	801885c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801887a:	6820      	ldr	r0, [r4, #0]
 801887c:	3010      	adds	r0, #16
 801887e:	f7f3 fc4f 	bl	800c120 <rcl_publisher_is_valid_except_context>
 8018882:	2800      	cmp	r0, #0
 8018884:	d0ea      	beq.n	801885c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018886:	b3be      	cbz	r6, 80188f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018888:	b3b7      	cbz	r7, 80188f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801888a:	9b06      	ldr	r3, [sp, #24]
 801888c:	b3a3      	cbz	r3, 80188f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801888e:	9b07      	ldr	r3, [sp, #28]
 8018890:	b393      	cbz	r3, 80188f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018892:	6821      	ldr	r1, [r4, #0]
 8018894:	692a      	ldr	r2, [r5, #16]
 8018896:	6a2c      	ldr	r4, [r5, #32]
 8018898:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801889c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80188a0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80188a4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80188a8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80188ac:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80188b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80188b4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80188b8:	1a64      	subs	r4, r4, r1
 80188ba:	fab4 f484 	clz	r4, r4
 80188be:	0964      	lsrs	r4, r4, #5
 80188c0:	7034      	strb	r4, [r6, #0]
 80188c2:	1d0c      	adds	r4, r1, #4
 80188c4:	1b1b      	subs	r3, r3, r4
 80188c6:	fab3 f383 	clz	r3, r3
 80188ca:	095b      	lsrs	r3, r3, #5
 80188cc:	f101 0408 	add.w	r4, r1, #8
 80188d0:	703b      	strb	r3, [r7, #0]
 80188d2:	f101 0314 	add.w	r3, r1, #20
 80188d6:	1b01      	subs	r1, r0, r4
 80188d8:	1ad3      	subs	r3, r2, r3
 80188da:	fab1 f181 	clz	r1, r1
 80188de:	9a06      	ldr	r2, [sp, #24]
 80188e0:	0949      	lsrs	r1, r1, #5
 80188e2:	7011      	strb	r1, [r2, #0]
 80188e4:	fab3 f383 	clz	r3, r3
 80188e8:	9a07      	ldr	r2, [sp, #28]
 80188ea:	095b      	lsrs	r3, r3, #5
 80188ec:	2000      	movs	r0, #0
 80188ee:	7013      	strb	r3, [r2, #0]
 80188f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80188f6:	4770      	bx	lr
 80188f8:	200b      	movs	r0, #11
 80188fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080188fc <_execute_event_handler>:
 80188fc:	2002      	movs	r0, #2
 80188fe:	4770      	bx	lr

08018900 <_cancel_goal_event_handler>:
 8018900:	2003      	movs	r0, #3
 8018902:	4770      	bx	lr

08018904 <_succeed_event_handler>:
 8018904:	2004      	movs	r0, #4
 8018906:	4770      	bx	lr

08018908 <_abort_event_handler>:
 8018908:	2006      	movs	r0, #6
 801890a:	4770      	bx	lr

0801890c <_canceled_event_handler>:
 801890c:	2005      	movs	r0, #5
 801890e:	4770      	bx	lr

08018910 <rcl_action_transition_goal_state>:
 8018910:	b2c2      	uxtb	r2, r0
 8018912:	2a06      	cmp	r2, #6
 8018914:	d80c      	bhi.n	8018930 <rcl_action_transition_goal_state+0x20>
 8018916:	2904      	cmp	r1, #4
 8018918:	d80a      	bhi.n	8018930 <rcl_action_transition_goal_state+0x20>
 801891a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801891e:	b410      	push	{r4}
 8018920:	1853      	adds	r3, r2, r1
 8018922:	4c06      	ldr	r4, [pc, #24]	@ (801893c <rcl_action_transition_goal_state+0x2c>)
 8018924:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018928:	b123      	cbz	r3, 8018934 <rcl_action_transition_goal_state+0x24>
 801892a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801892e:	4718      	bx	r3
 8018930:	2000      	movs	r0, #0
 8018932:	4770      	bx	lr
 8018934:	2000      	movs	r0, #0
 8018936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801893a:	4770      	bx	lr
 801893c:	08023d8c 	.word	0x08023d8c

08018940 <rcl_action_get_zero_initialized_cancel_response>:
 8018940:	b510      	push	{r4, lr}
 8018942:	4c07      	ldr	r4, [pc, #28]	@ (8018960 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018944:	4686      	mov	lr, r0
 8018946:	4684      	mov	ip, r0
 8018948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801894a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801894e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018954:	6823      	ldr	r3, [r4, #0]
 8018956:	f8cc 3000 	str.w	r3, [ip]
 801895a:	4670      	mov	r0, lr
 801895c:	bd10      	pop	{r4, pc}
 801895e:	bf00      	nop
 8018960:	08023e18 	.word	0x08023e18

08018964 <rcl_interfaces__srv__DescribeParameters_Request__init>:
 8018964:	b538      	push	{r3, r4, r5, lr}
 8018966:	4604      	mov	r4, r0
 8018968:	b130      	cbz	r0, 8018978 <rcl_interfaces__srv__DescribeParameters_Request__init+0x14>
 801896a:	2100      	movs	r1, #0
 801896c:	f7f6 fece 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 8018970:	4605      	mov	r5, r0
 8018972:	b120      	cbz	r0, 801897e <rcl_interfaces__srv__DescribeParameters_Request__init+0x1a>
 8018974:	4628      	mov	r0, r5
 8018976:	bd38      	pop	{r3, r4, r5, pc}
 8018978:	4605      	mov	r5, r0
 801897a:	4628      	mov	r0, r5
 801897c:	bd38      	pop	{r3, r4, r5, pc}
 801897e:	4620      	mov	r0, r4
 8018980:	f7f6 ff0c 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018984:	4628      	mov	r0, r5
 8018986:	bd38      	pop	{r3, r4, r5, pc}

08018988 <rcl_interfaces__srv__DescribeParameters_Request__fini>:
 8018988:	b108      	cbz	r0, 801898e <rcl_interfaces__srv__DescribeParameters_Request__fini+0x6>
 801898a:	f7f6 bf07 	b.w	800f79c <rosidl_runtime_c__String__Sequence__fini>
 801898e:	4770      	bx	lr

08018990 <rcl_interfaces__srv__DescribeParameters_Response__init>:
 8018990:	b538      	push	{r3, r4, r5, lr}
 8018992:	4604      	mov	r4, r0
 8018994:	b130      	cbz	r0, 80189a4 <rcl_interfaces__srv__DescribeParameters_Response__init+0x14>
 8018996:	2100      	movs	r1, #0
 8018998:	f000 fb1e 	bl	8018fd8 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init>
 801899c:	4605      	mov	r5, r0
 801899e:	b120      	cbz	r0, 80189aa <rcl_interfaces__srv__DescribeParameters_Response__init+0x1a>
 80189a0:	4628      	mov	r0, r5
 80189a2:	bd38      	pop	{r3, r4, r5, pc}
 80189a4:	4605      	mov	r5, r0
 80189a6:	4628      	mov	r0, r5
 80189a8:	bd38      	pop	{r3, r4, r5, pc}
 80189aa:	4620      	mov	r0, r4
 80189ac:	f000 fb18 	bl	8018fe0 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini>
 80189b0:	4628      	mov	r0, r5
 80189b2:	bd38      	pop	{r3, r4, r5, pc}

080189b4 <rcl_interfaces__srv__DescribeParameters_Response__fini>:
 80189b4:	b108      	cbz	r0, 80189ba <rcl_interfaces__srv__DescribeParameters_Response__fini+0x6>
 80189b6:	f000 bb13 	b.w	8018fe0 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini>
 80189ba:	4770      	bx	lr

080189bc <rcl_interfaces__msg__FloatingPointRange__init>:
 80189bc:	3800      	subs	r0, #0
 80189be:	bf18      	it	ne
 80189c0:	2001      	movne	r0, #1
 80189c2:	4770      	bx	lr

080189c4 <rcl_interfaces__msg__FloatingPointRange__fini>:
 80189c4:	4770      	bx	lr
 80189c6:	bf00      	nop

080189c8 <rcl_interfaces__msg__FloatingPointRange__Sequence__init>:
 80189c8:	b530      	push	{r4, r5, lr}
 80189ca:	4604      	mov	r4, r0
 80189cc:	b087      	sub	sp, #28
 80189ce:	b148      	cbz	r0, 80189e4 <rcl_interfaces__msg__FloatingPointRange__Sequence__init+0x1c>
 80189d0:	460d      	mov	r5, r1
 80189d2:	a801      	add	r0, sp, #4
 80189d4:	f7f5 fe9a 	bl	800e70c <rcutils_get_default_allocator>
 80189d8:	b935      	cbnz	r5, 80189e8 <rcl_interfaces__msg__FloatingPointRange__Sequence__init+0x20>
 80189da:	4628      	mov	r0, r5
 80189dc:	e9c4 0500 	strd	r0, r5, [r4]
 80189e0:	60a5      	str	r5, [r4, #8]
 80189e2:	2001      	movs	r0, #1
 80189e4:	b007      	add	sp, #28
 80189e6:	bd30      	pop	{r4, r5, pc}
 80189e8:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80189ec:	2118      	movs	r1, #24
 80189ee:	4628      	mov	r0, r5
 80189f0:	4798      	blx	r3
 80189f2:	2800      	cmp	r0, #0
 80189f4:	d1f2      	bne.n	80189dc <rcl_interfaces__msg__FloatingPointRange__Sequence__init+0x14>
 80189f6:	e7f5      	b.n	80189e4 <rcl_interfaces__msg__FloatingPointRange__Sequence__init+0x1c>

080189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>:
 80189f8:	b180      	cbz	r0, 8018a1c <rcl_interfaces__msg__FloatingPointRange__Sequence__fini+0x24>
 80189fa:	b510      	push	{r4, lr}
 80189fc:	4604      	mov	r4, r0
 80189fe:	b086      	sub	sp, #24
 8018a00:	a801      	add	r0, sp, #4
 8018a02:	f7f5 fe83 	bl	800e70c <rcutils_get_default_allocator>
 8018a06:	6820      	ldr	r0, [r4, #0]
 8018a08:	b130      	cbz	r0, 8018a18 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini+0x20>
 8018a0a:	9b02      	ldr	r3, [sp, #8]
 8018a0c:	9905      	ldr	r1, [sp, #20]
 8018a0e:	4798      	blx	r3
 8018a10:	2300      	movs	r3, #0
 8018a12:	e9c4 3300 	strd	r3, r3, [r4]
 8018a16:	60a3      	str	r3, [r4, #8]
 8018a18:	b006      	add	sp, #24
 8018a1a:	bd10      	pop	{r4, pc}
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop

08018a20 <rcl_interfaces__srv__GetParameterTypes_Request__init>:
 8018a20:	b538      	push	{r3, r4, r5, lr}
 8018a22:	4604      	mov	r4, r0
 8018a24:	b130      	cbz	r0, 8018a34 <rcl_interfaces__srv__GetParameterTypes_Request__init+0x14>
 8018a26:	2100      	movs	r1, #0
 8018a28:	f7f6 fe70 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 8018a2c:	4605      	mov	r5, r0
 8018a2e:	b120      	cbz	r0, 8018a3a <rcl_interfaces__srv__GetParameterTypes_Request__init+0x1a>
 8018a30:	4628      	mov	r0, r5
 8018a32:	bd38      	pop	{r3, r4, r5, pc}
 8018a34:	4605      	mov	r5, r0
 8018a36:	4628      	mov	r0, r5
 8018a38:	bd38      	pop	{r3, r4, r5, pc}
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	f7f6 feae 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018a40:	4628      	mov	r0, r5
 8018a42:	bd38      	pop	{r3, r4, r5, pc}

08018a44 <rcl_interfaces__srv__GetParameterTypes_Request__fini>:
 8018a44:	b108      	cbz	r0, 8018a4a <rcl_interfaces__srv__GetParameterTypes_Request__fini+0x6>
 8018a46:	f7f6 bea9 	b.w	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018a4a:	4770      	bx	lr

08018a4c <rcl_interfaces__srv__GetParameterTypes_Response__init>:
 8018a4c:	b538      	push	{r3, r4, r5, lr}
 8018a4e:	4604      	mov	r4, r0
 8018a50:	b130      	cbz	r0, 8018a60 <rcl_interfaces__srv__GetParameterTypes_Response__init+0x14>
 8018a52:	2100      	movs	r1, #0
 8018a54:	f7f6 fd46 	bl	800f4e4 <rosidl_runtime_c__uint8__Sequence__init>
 8018a58:	4605      	mov	r5, r0
 8018a5a:	b120      	cbz	r0, 8018a66 <rcl_interfaces__srv__GetParameterTypes_Response__init+0x1a>
 8018a5c:	4628      	mov	r0, r5
 8018a5e:	bd38      	pop	{r3, r4, r5, pc}
 8018a60:	4605      	mov	r5, r0
 8018a62:	4628      	mov	r0, r5
 8018a64:	bd38      	pop	{r3, r4, r5, pc}
 8018a66:	4620      	mov	r0, r4
 8018a68:	f7f6 fd54 	bl	800f514 <rosidl_runtime_c__uint8__Sequence__fini>
 8018a6c:	4628      	mov	r0, r5
 8018a6e:	bd38      	pop	{r3, r4, r5, pc}

08018a70 <rcl_interfaces__srv__GetParameterTypes_Response__fini>:
 8018a70:	b108      	cbz	r0, 8018a76 <rcl_interfaces__srv__GetParameterTypes_Response__fini+0x6>
 8018a72:	f7f6 bd4f 	b.w	800f514 <rosidl_runtime_c__uint8__Sequence__fini>
 8018a76:	4770      	bx	lr

08018a78 <rcl_interfaces__srv__GetParameters_Request__init>:
 8018a78:	b538      	push	{r3, r4, r5, lr}
 8018a7a:	4604      	mov	r4, r0
 8018a7c:	b130      	cbz	r0, 8018a8c <rcl_interfaces__srv__GetParameters_Request__init+0x14>
 8018a7e:	2100      	movs	r1, #0
 8018a80:	f7f6 fe44 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 8018a84:	4605      	mov	r5, r0
 8018a86:	b120      	cbz	r0, 8018a92 <rcl_interfaces__srv__GetParameters_Request__init+0x1a>
 8018a88:	4628      	mov	r0, r5
 8018a8a:	bd38      	pop	{r3, r4, r5, pc}
 8018a8c:	4605      	mov	r5, r0
 8018a8e:	4628      	mov	r0, r5
 8018a90:	bd38      	pop	{r3, r4, r5, pc}
 8018a92:	4620      	mov	r0, r4
 8018a94:	f7f6 fe82 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018a98:	4628      	mov	r0, r5
 8018a9a:	bd38      	pop	{r3, r4, r5, pc}

08018a9c <rcl_interfaces__srv__GetParameters_Request__fini>:
 8018a9c:	b108      	cbz	r0, 8018aa2 <rcl_interfaces__srv__GetParameters_Request__fini+0x6>
 8018a9e:	f7f6 be7d 	b.w	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018aa2:	4770      	bx	lr

08018aa4 <rcl_interfaces__srv__GetParameters_Response__init>:
 8018aa4:	b538      	push	{r3, r4, r5, lr}
 8018aa6:	4604      	mov	r4, r0
 8018aa8:	b130      	cbz	r0, 8018ab8 <rcl_interfaces__srv__GetParameters_Response__init+0x14>
 8018aaa:	2100      	movs	r1, #0
 8018aac:	f000 fcf2 	bl	8019494 <rcl_interfaces__msg__ParameterValue__Sequence__init>
 8018ab0:	4605      	mov	r5, r0
 8018ab2:	b120      	cbz	r0, 8018abe <rcl_interfaces__srv__GetParameters_Response__init+0x1a>
 8018ab4:	4628      	mov	r0, r5
 8018ab6:	bd38      	pop	{r3, r4, r5, pc}
 8018ab8:	4605      	mov	r5, r0
 8018aba:	4628      	mov	r0, r5
 8018abc:	bd38      	pop	{r3, r4, r5, pc}
 8018abe:	4620      	mov	r0, r4
 8018ac0:	f000 fcec 	bl	801949c <rcl_interfaces__msg__ParameterValue__Sequence__fini>
 8018ac4:	4628      	mov	r0, r5
 8018ac6:	bd38      	pop	{r3, r4, r5, pc}

08018ac8 <rcl_interfaces__srv__GetParameters_Response__fini>:
 8018ac8:	b108      	cbz	r0, 8018ace <rcl_interfaces__srv__GetParameters_Response__fini+0x6>
 8018aca:	f000 bce7 	b.w	801949c <rcl_interfaces__msg__ParameterValue__Sequence__fini>
 8018ace:	4770      	bx	lr

08018ad0 <rcl_interfaces__msg__IntegerRange__init>:
 8018ad0:	3800      	subs	r0, #0
 8018ad2:	bf18      	it	ne
 8018ad4:	2001      	movne	r0, #1
 8018ad6:	4770      	bx	lr

08018ad8 <rcl_interfaces__msg__IntegerRange__fini>:
 8018ad8:	4770      	bx	lr
 8018ada:	bf00      	nop

08018adc <rcl_interfaces__msg__IntegerRange__Sequence__init>:
 8018adc:	b530      	push	{r4, r5, lr}
 8018ade:	4604      	mov	r4, r0
 8018ae0:	b087      	sub	sp, #28
 8018ae2:	b148      	cbz	r0, 8018af8 <rcl_interfaces__msg__IntegerRange__Sequence__init+0x1c>
 8018ae4:	460d      	mov	r5, r1
 8018ae6:	a801      	add	r0, sp, #4
 8018ae8:	f7f5 fe10 	bl	800e70c <rcutils_get_default_allocator>
 8018aec:	b935      	cbnz	r5, 8018afc <rcl_interfaces__msg__IntegerRange__Sequence__init+0x20>
 8018aee:	4628      	mov	r0, r5
 8018af0:	e9c4 0500 	strd	r0, r5, [r4]
 8018af4:	60a5      	str	r5, [r4, #8]
 8018af6:	2001      	movs	r0, #1
 8018af8:	b007      	add	sp, #28
 8018afa:	bd30      	pop	{r4, r5, pc}
 8018afc:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018b00:	2118      	movs	r1, #24
 8018b02:	4628      	mov	r0, r5
 8018b04:	4798      	blx	r3
 8018b06:	2800      	cmp	r0, #0
 8018b08:	d1f2      	bne.n	8018af0 <rcl_interfaces__msg__IntegerRange__Sequence__init+0x14>
 8018b0a:	e7f5      	b.n	8018af8 <rcl_interfaces__msg__IntegerRange__Sequence__init+0x1c>

08018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>:
 8018b0c:	b180      	cbz	r0, 8018b30 <rcl_interfaces__msg__IntegerRange__Sequence__fini+0x24>
 8018b0e:	b510      	push	{r4, lr}
 8018b10:	4604      	mov	r4, r0
 8018b12:	b086      	sub	sp, #24
 8018b14:	a801      	add	r0, sp, #4
 8018b16:	f7f5 fdf9 	bl	800e70c <rcutils_get_default_allocator>
 8018b1a:	6820      	ldr	r0, [r4, #0]
 8018b1c:	b130      	cbz	r0, 8018b2c <rcl_interfaces__msg__IntegerRange__Sequence__fini+0x20>
 8018b1e:	9b02      	ldr	r3, [sp, #8]
 8018b20:	9905      	ldr	r1, [sp, #20]
 8018b22:	4798      	blx	r3
 8018b24:	2300      	movs	r3, #0
 8018b26:	e9c4 3300 	strd	r3, r3, [r4]
 8018b2a:	60a3      	str	r3, [r4, #8]
 8018b2c:	b006      	add	sp, #24
 8018b2e:	bd10      	pop	{r4, pc}
 8018b30:	4770      	bx	lr
 8018b32:	bf00      	nop

08018b34 <rcl_interfaces__srv__ListParameters_Request__init>:
 8018b34:	b538      	push	{r3, r4, r5, lr}
 8018b36:	4604      	mov	r4, r0
 8018b38:	b130      	cbz	r0, 8018b48 <rcl_interfaces__srv__ListParameters_Request__init+0x14>
 8018b3a:	2100      	movs	r1, #0
 8018b3c:	f7f6 fde6 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 8018b40:	4605      	mov	r5, r0
 8018b42:	b120      	cbz	r0, 8018b4e <rcl_interfaces__srv__ListParameters_Request__init+0x1a>
 8018b44:	4628      	mov	r0, r5
 8018b46:	bd38      	pop	{r3, r4, r5, pc}
 8018b48:	4605      	mov	r5, r0
 8018b4a:	4628      	mov	r0, r5
 8018b4c:	bd38      	pop	{r3, r4, r5, pc}
 8018b4e:	4620      	mov	r0, r4
 8018b50:	f7f6 fe24 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018b54:	4628      	mov	r0, r5
 8018b56:	bd38      	pop	{r3, r4, r5, pc}

08018b58 <rcl_interfaces__srv__ListParameters_Request__fini>:
 8018b58:	b108      	cbz	r0, 8018b5e <rcl_interfaces__srv__ListParameters_Request__fini+0x6>
 8018b5a:	f7f6 be1f 	b.w	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018b5e:	4770      	bx	lr

08018b60 <rcl_interfaces__srv__ListParameters_Response__init>:
 8018b60:	b538      	push	{r3, r4, r5, lr}
 8018b62:	4604      	mov	r4, r0
 8018b64:	b128      	cbz	r0, 8018b72 <rcl_interfaces__srv__ListParameters_Response__init+0x12>
 8018b66:	f000 f811 	bl	8018b8c <rcl_interfaces__msg__ListParametersResult__init>
 8018b6a:	4605      	mov	r5, r0
 8018b6c:	b120      	cbz	r0, 8018b78 <rcl_interfaces__srv__ListParameters_Response__init+0x18>
 8018b6e:	4628      	mov	r0, r5
 8018b70:	bd38      	pop	{r3, r4, r5, pc}
 8018b72:	4605      	mov	r5, r0
 8018b74:	4628      	mov	r0, r5
 8018b76:	bd38      	pop	{r3, r4, r5, pc}
 8018b78:	4620      	mov	r0, r4
 8018b7a:	f000 f82d 	bl	8018bd8 <rcl_interfaces__msg__ListParametersResult__fini>
 8018b7e:	4628      	mov	r0, r5
 8018b80:	bd38      	pop	{r3, r4, r5, pc}
 8018b82:	bf00      	nop

08018b84 <rcl_interfaces__srv__ListParameters_Response__fini>:
 8018b84:	b108      	cbz	r0, 8018b8a <rcl_interfaces__srv__ListParameters_Response__fini+0x6>
 8018b86:	f000 b827 	b.w	8018bd8 <rcl_interfaces__msg__ListParametersResult__fini>
 8018b8a:	4770      	bx	lr

08018b8c <rcl_interfaces__msg__ListParametersResult__init>:
 8018b8c:	b570      	push	{r4, r5, r6, lr}
 8018b8e:	4605      	mov	r5, r0
 8018b90:	b1b8      	cbz	r0, 8018bc2 <rcl_interfaces__msg__ListParametersResult__init+0x36>
 8018b92:	2100      	movs	r1, #0
 8018b94:	f7f6 fdba 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 8018b98:	4604      	mov	r4, r0
 8018b9a:	b148      	cbz	r0, 8018bb0 <rcl_interfaces__msg__ListParametersResult__init+0x24>
 8018b9c:	f105 060c 	add.w	r6, r5, #12
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	4630      	mov	r0, r6
 8018ba4:	f7f6 fdb2 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 8018ba8:	4604      	mov	r4, r0
 8018baa:	b168      	cbz	r0, 8018bc8 <rcl_interfaces__msg__ListParametersResult__init+0x3c>
 8018bac:	4620      	mov	r0, r4
 8018bae:	bd70      	pop	{r4, r5, r6, pc}
 8018bb0:	4628      	mov	r0, r5
 8018bb2:	f7f6 fdf3 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018bb6:	f105 000c 	add.w	r0, r5, #12
 8018bba:	f7f6 fdef 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	bd70      	pop	{r4, r5, r6, pc}
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	bd70      	pop	{r4, r5, r6, pc}
 8018bc8:	4628      	mov	r0, r5
 8018bca:	f7f6 fde7 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018bce:	4630      	mov	r0, r6
 8018bd0:	f7f6 fde4 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018bd4:	e7ea      	b.n	8018bac <rcl_interfaces__msg__ListParametersResult__init+0x20>
 8018bd6:	bf00      	nop

08018bd8 <rcl_interfaces__msg__ListParametersResult__fini>:
 8018bd8:	b148      	cbz	r0, 8018bee <rcl_interfaces__msg__ListParametersResult__fini+0x16>
 8018bda:	b510      	push	{r4, lr}
 8018bdc:	4604      	mov	r4, r0
 8018bde:	f7f6 fddd 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018be2:	f104 000c 	add.w	r0, r4, #12
 8018be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bea:	f7f6 bdd7 	b.w	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8018bee:	4770      	bx	lr

08018bf0 <rcl_interfaces__msg__Parameter__Sequence__init.part.0>:
 8018bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bf4:	b086      	sub	sp, #24
 8018bf6:	4682      	mov	sl, r0
 8018bf8:	460e      	mov	r6, r1
 8018bfa:	a801      	add	r0, sp, #4
 8018bfc:	f7f5 fd86 	bl	800e70c <rcutils_get_default_allocator>
 8018c00:	2e00      	cmp	r6, #0
 8018c02:	d03c      	beq.n	8018c7e <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x8e>
 8018c04:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8018c08:	2170      	movs	r1, #112	@ 0x70
 8018c0a:	4642      	mov	r2, r8
 8018c0c:	4630      	mov	r0, r6
 8018c0e:	4798      	blx	r3
 8018c10:	4607      	mov	r7, r0
 8018c12:	b388      	cbz	r0, 8018c78 <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x88>
 8018c14:	4605      	mov	r5, r0
 8018c16:	2400      	movs	r4, #0
 8018c18:	e007      	b.n	8018c2a <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x3a>
 8018c1a:	f000 fb87 	bl	801932c <rcl_interfaces__msg__ParameterValue__init>
 8018c1e:	b168      	cbz	r0, 8018c3c <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x4c>
 8018c20:	3401      	adds	r4, #1
 8018c22:	42a6      	cmp	r6, r4
 8018c24:	f105 0570 	add.w	r5, r5, #112	@ 0x70
 8018c28:	d02a      	beq.n	8018c80 <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x90>
 8018c2a:	4628      	mov	r0, r5
 8018c2c:	f7f6 fcbe 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018c30:	f105 0910 	add.w	r9, r5, #16
 8018c34:	4603      	mov	r3, r0
 8018c36:	4648      	mov	r0, r9
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d1ee      	bne.n	8018c1a <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x2a>
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	f7f6 fccb 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018c42:	4648      	mov	r0, r9
 8018c44:	f000 fc08 	bl	8019458 <rcl_interfaces__msg__ParameterValue__fini>
 8018c48:	42a6      	cmp	r6, r4
 8018c4a:	d919      	bls.n	8018c80 <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x90>
 8018c4c:	b17c      	cbz	r4, 8018c6e <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x7e>
 8018c4e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8018c52:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 8018c56:	3c70      	subs	r4, #112	@ 0x70
 8018c58:	4620      	mov	r0, r4
 8018c5a:	f7f6 fcbd 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018c5e:	f104 0010 	add.w	r0, r4, #16
 8018c62:	f000 fbf9 	bl	8019458 <rcl_interfaces__msg__ParameterValue__fini>
 8018c66:	42bc      	cmp	r4, r7
 8018c68:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8018c6c:	d1f4      	bne.n	8018c58 <rcl_interfaces__msg__Parameter__Sequence__init.part.0+0x68>
 8018c6e:	4638      	mov	r0, r7
 8018c70:	9b02      	ldr	r3, [sp, #8]
 8018c72:	4641      	mov	r1, r8
 8018c74:	4798      	blx	r3
 8018c76:	2000      	movs	r0, #0
 8018c78:	b006      	add	sp, #24
 8018c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c7e:	4637      	mov	r7, r6
 8018c80:	2001      	movs	r0, #1
 8018c82:	e9ca 7600 	strd	r7, r6, [sl]
 8018c86:	f8ca 6008 	str.w	r6, [sl, #8]
 8018c8a:	b006      	add	sp, #24
 8018c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018c90 <rcl_interfaces__msg__Parameter__init>:
 8018c90:	b570      	push	{r4, r5, r6, lr}
 8018c92:	4605      	mov	r5, r0
 8018c94:	b1a8      	cbz	r0, 8018cc2 <rcl_interfaces__msg__Parameter__init+0x32>
 8018c96:	f7f6 fc89 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018c9a:	4604      	mov	r4, r0
 8018c9c:	b140      	cbz	r0, 8018cb0 <rcl_interfaces__msg__Parameter__init+0x20>
 8018c9e:	f105 0610 	add.w	r6, r5, #16
 8018ca2:	4630      	mov	r0, r6
 8018ca4:	f000 fb42 	bl	801932c <rcl_interfaces__msg__ParameterValue__init>
 8018ca8:	4604      	mov	r4, r0
 8018caa:	b168      	cbz	r0, 8018cc8 <rcl_interfaces__msg__Parameter__init+0x38>
 8018cac:	4620      	mov	r0, r4
 8018cae:	bd70      	pop	{r4, r5, r6, pc}
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	f7f6 fc91 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018cb6:	f105 0010 	add.w	r0, r5, #16
 8018cba:	f000 fbcd 	bl	8019458 <rcl_interfaces__msg__ParameterValue__fini>
 8018cbe:	4620      	mov	r0, r4
 8018cc0:	bd70      	pop	{r4, r5, r6, pc}
 8018cc2:	4604      	mov	r4, r0
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}
 8018cc8:	4628      	mov	r0, r5
 8018cca:	f7f6 fc85 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018cce:	4630      	mov	r0, r6
 8018cd0:	f000 fbc2 	bl	8019458 <rcl_interfaces__msg__ParameterValue__fini>
 8018cd4:	e7ea      	b.n	8018cac <rcl_interfaces__msg__Parameter__init+0x1c>
 8018cd6:	bf00      	nop

08018cd8 <rcl_interfaces__msg__Parameter__fini>:
 8018cd8:	b148      	cbz	r0, 8018cee <rcl_interfaces__msg__Parameter__fini+0x16>
 8018cda:	b510      	push	{r4, lr}
 8018cdc:	4604      	mov	r4, r0
 8018cde:	f7f6 fc7b 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018ce2:	f104 0010 	add.w	r0, r4, #16
 8018ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cea:	f000 bbb5 	b.w	8019458 <rcl_interfaces__msg__ParameterValue__fini>
 8018cee:	4770      	bx	lr

08018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>:
 8018cf0:	b108      	cbz	r0, 8018cf6 <rcl_interfaces__msg__Parameter__Sequence__init+0x6>
 8018cf2:	f7ff bf7d 	b.w	8018bf0 <rcl_interfaces__msg__Parameter__Sequence__init.part.0>
 8018cf6:	4770      	bx	lr

08018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>:
 8018cf8:	b348      	cbz	r0, 8018d4e <rcl_interfaces__msg__Parameter__Sequence__fini+0x56>
 8018cfa:	b570      	push	{r4, r5, r6, lr}
 8018cfc:	4606      	mov	r6, r0
 8018cfe:	b086      	sub	sp, #24
 8018d00:	a801      	add	r0, sp, #4
 8018d02:	f7f5 fd03 	bl	800e70c <rcutils_get_default_allocator>
 8018d06:	6832      	ldr	r2, [r6, #0]
 8018d08:	b1da      	cbz	r2, 8018d42 <rcl_interfaces__msg__Parameter__Sequence__fini+0x4a>
 8018d0a:	68b1      	ldr	r1, [r6, #8]
 8018d0c:	b189      	cbz	r1, 8018d32 <rcl_interfaces__msg__Parameter__Sequence__fini+0x3a>
 8018d0e:	2500      	movs	r5, #0
 8018d10:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8018d14:	eb12 1403 	adds.w	r4, r2, r3, lsl #4
 8018d18:	4620      	mov	r0, r4
 8018d1a:	d014      	beq.n	8018d46 <rcl_interfaces__msg__Parameter__Sequence__fini+0x4e>
 8018d1c:	f7f6 fc5c 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018d20:	f104 0010 	add.w	r0, r4, #16
 8018d24:	f000 fb98 	bl	8019458 <rcl_interfaces__msg__ParameterValue__fini>
 8018d28:	68b1      	ldr	r1, [r6, #8]
 8018d2a:	6832      	ldr	r2, [r6, #0]
 8018d2c:	3501      	adds	r5, #1
 8018d2e:	428d      	cmp	r5, r1
 8018d30:	d3ee      	bcc.n	8018d10 <rcl_interfaces__msg__Parameter__Sequence__fini+0x18>
 8018d32:	9b02      	ldr	r3, [sp, #8]
 8018d34:	9905      	ldr	r1, [sp, #20]
 8018d36:	4610      	mov	r0, r2
 8018d38:	4798      	blx	r3
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	e9c6 3300 	strd	r3, r3, [r6]
 8018d40:	60b3      	str	r3, [r6, #8]
 8018d42:	b006      	add	sp, #24
 8018d44:	bd70      	pop	{r4, r5, r6, pc}
 8018d46:	3501      	adds	r5, #1
 8018d48:	428d      	cmp	r5, r1
 8018d4a:	d3e1      	bcc.n	8018d10 <rcl_interfaces__msg__Parameter__Sequence__fini+0x18>
 8018d4c:	e7f1      	b.n	8018d32 <rcl_interfaces__msg__Parameter__Sequence__fini+0x3a>
 8018d4e:	4770      	bx	lr

08018d50 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0>:
 8018d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d54:	ed2d 8b02 	vpush	{d8}
 8018d58:	b089      	sub	sp, #36	@ 0x24
 8018d5a:	4681      	mov	r9, r0
 8018d5c:	460d      	mov	r5, r1
 8018d5e:	a803      	add	r0, sp, #12
 8018d60:	f7f5 fcd4 	bl	800e70c <rcutils_get_default_allocator>
 8018d64:	2d00      	cmp	r5, #0
 8018d66:	d076      	beq.n	8018e56 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x106>
 8018d68:	9b07      	ldr	r3, [sp, #28]
 8018d6a:	2144      	movs	r1, #68	@ 0x44
 8018d6c:	461a      	mov	r2, r3
 8018d6e:	ee08 3a10 	vmov	s16, r3
 8018d72:	4628      	mov	r0, r5
 8018d74:	9b06      	ldr	r3, [sp, #24]
 8018d76:	4798      	blx	r3
 8018d78:	4607      	mov	r7, r0
 8018d7a:	2800      	cmp	r0, #0
 8018d7c:	d066      	beq.n	8018e4c <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0xfc>
 8018d7e:	4683      	mov	fp, r0
 8018d80:	2400      	movs	r4, #0
 8018d82:	e022      	b.n	8018dca <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x7a>
 8018d84:	f7f6 fc12 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018d88:	4602      	mov	r2, r0
 8018d8a:	f10b 0a2c 	add.w	sl, fp, #44	@ 0x2c
 8018d8e:	4640      	mov	r0, r8
 8018d90:	2a00      	cmp	r2, #0
 8018d92:	d06b      	beq.n	8018e6c <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x11c>
 8018d94:	f10b 0338 	add.w	r3, fp, #56	@ 0x38
 8018d98:	9301      	str	r3, [sp, #4]
 8018d9a:	f7f6 fc07 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018d9e:	b1f8      	cbz	r0, 8018de0 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x90>
 8018da0:	f04f 0300 	mov.w	r3, #0
 8018da4:	f8ab 3028 	strh.w	r3, [fp, #40]	@ 0x28
 8018da8:	2100      	movs	r1, #0
 8018daa:	4650      	mov	r0, sl
 8018dac:	f7ff fe0c 	bl	80189c8 <rcl_interfaces__msg__FloatingPointRange__Sequence__init>
 8018db0:	2800      	cmp	r0, #0
 8018db2:	d06d      	beq.n	8018e90 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x140>
 8018db4:	9801      	ldr	r0, [sp, #4]
 8018db6:	2100      	movs	r1, #0
 8018db8:	f7ff fe90 	bl	8018adc <rcl_interfaces__msg__IntegerRange__Sequence__init>
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	d06f      	beq.n	8018ea0 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x150>
 8018dc0:	3401      	adds	r4, #1
 8018dc2:	42a5      	cmp	r5, r4
 8018dc4:	f10b 0b44 	add.w	fp, fp, #68	@ 0x44
 8018dc8:	d046      	beq.n	8018e58 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x108>
 8018dca:	4658      	mov	r0, fp
 8018dcc:	f7f6 fbee 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018dd0:	f10b 0610 	add.w	r6, fp, #16
 8018dd4:	4602      	mov	r2, r0
 8018dd6:	f10b 081c 	add.w	r8, fp, #28
 8018dda:	4630      	mov	r0, r6
 8018ddc:	2a00      	cmp	r2, #0
 8018dde:	d1d1      	bne.n	8018d84 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x34>
 8018de0:	4658      	mov	r0, fp
 8018de2:	f7f6 fbf9 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018de6:	4630      	mov	r0, r6
 8018de8:	f7f6 fbf6 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018dec:	4640      	mov	r0, r8
 8018dee:	f7f6 fbf3 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018df2:	f10b 002c 	add.w	r0, fp, #44	@ 0x2c
 8018df6:	f7ff fdff 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018dfa:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
 8018dfe:	f7ff fe85 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018e02:	42a5      	cmp	r5, r4
 8018e04:	d928      	bls.n	8018e58 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x108>
 8018e06:	b1dc      	cbz	r4, 8018e40 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0xf0>
 8018e08:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8018e0c:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8018e10:	3c44      	subs	r4, #68	@ 0x44
 8018e12:	4620      	mov	r0, r4
 8018e14:	f7f6 fbe0 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e18:	f104 0010 	add.w	r0, r4, #16
 8018e1c:	f7f6 fbdc 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e20:	f104 001c 	add.w	r0, r4, #28
 8018e24:	f7f6 fbd8 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e28:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8018e2c:	f7ff fde4 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018e30:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8018e34:	f7ff fe6a 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018e38:	42a7      	cmp	r7, r4
 8018e3a:	f1a4 0444 	sub.w	r4, r4, #68	@ 0x44
 8018e3e:	d1e8      	bne.n	8018e12 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0xc2>
 8018e40:	4638      	mov	r0, r7
 8018e42:	9b04      	ldr	r3, [sp, #16]
 8018e44:	ee18 1a10 	vmov	r1, s16
 8018e48:	4798      	blx	r3
 8018e4a:	2000      	movs	r0, #0
 8018e4c:	b009      	add	sp, #36	@ 0x24
 8018e4e:	ecbd 8b02 	vpop	{d8}
 8018e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e56:	462f      	mov	r7, r5
 8018e58:	2001      	movs	r0, #1
 8018e5a:	e9c9 7500 	strd	r7, r5, [r9]
 8018e5e:	f8c9 5008 	str.w	r5, [r9, #8]
 8018e62:	b009      	add	sp, #36	@ 0x24
 8018e64:	ecbd 8b02 	vpop	{d8}
 8018e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e6c:	4658      	mov	r0, fp
 8018e6e:	f7f6 fbb3 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e72:	4630      	mov	r0, r6
 8018e74:	f7f6 fbb0 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e78:	f10b 001c 	add.w	r0, fp, #28
 8018e7c:	f7f6 fbac 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e80:	4650      	mov	r0, sl
 8018e82:	f7ff fdb9 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018e86:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
 8018e8a:	f7ff fe3f 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018e8e:	e7b8      	b.n	8018e02 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0xb2>
 8018e90:	4658      	mov	r0, fp
 8018e92:	f7f6 fba1 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e96:	4630      	mov	r0, r6
 8018e98:	f7f6 fb9e 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018e9c:	4640      	mov	r0, r8
 8018e9e:	e7ed      	b.n	8018e7c <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0x12c>
 8018ea0:	4658      	mov	r0, fp
 8018ea2:	f7f6 fb99 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018ea6:	4630      	mov	r0, r6
 8018ea8:	f7f6 fb96 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018eac:	4640      	mov	r0, r8
 8018eae:	f7f6 fb93 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018eb2:	4650      	mov	r0, sl
 8018eb4:	f7ff fda0 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018eb8:	9801      	ldr	r0, [sp, #4]
 8018eba:	f7ff fe27 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018ebe:	e7a0      	b.n	8018e02 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0+0xb2>

08018ec0 <rcl_interfaces__msg__ParameterDescriptor__init>:
 8018ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018ec4:	4605      	mov	r5, r0
 8018ec6:	2800      	cmp	r0, #0
 8018ec8:	d04c      	beq.n	8018f64 <rcl_interfaces__msg__ParameterDescriptor__init+0xa4>
 8018eca:	f7f6 fb6f 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018ece:	4604      	mov	r4, r0
 8018ed0:	b390      	cbz	r0, 8018f38 <rcl_interfaces__msg__ParameterDescriptor__init+0x78>
 8018ed2:	f105 0610 	add.w	r6, r5, #16
 8018ed6:	4630      	mov	r0, r6
 8018ed8:	f7f6 fb68 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018edc:	4604      	mov	r4, r0
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	d04c      	beq.n	8018f7c <rcl_interfaces__msg__ParameterDescriptor__init+0xbc>
 8018ee2:	f105 071c 	add.w	r7, r5, #28
 8018ee6:	4638      	mov	r0, r7
 8018ee8:	f7f6 fb60 	bl	800f5ac <rosidl_runtime_c__String__init>
 8018eec:	4604      	mov	r4, r0
 8018eee:	b3e8      	cbz	r0, 8018f6c <rcl_interfaces__msg__ParameterDescriptor__init+0xac>
 8018ef0:	f04f 0800 	mov.w	r8, #0
 8018ef4:	f105 092c 	add.w	r9, r5, #44	@ 0x2c
 8018ef8:	f8a5 8028 	strh.w	r8, [r5, #40]	@ 0x28
 8018efc:	4641      	mov	r1, r8
 8018efe:	4648      	mov	r0, r9
 8018f00:	f7ff fd62 	bl	80189c8 <rcl_interfaces__msg__FloatingPointRange__Sequence__init>
 8018f04:	4604      	mov	r4, r0
 8018f06:	b3f0      	cbz	r0, 8018f86 <rcl_interfaces__msg__ParameterDescriptor__init+0xc6>
 8018f08:	4641      	mov	r1, r8
 8018f0a:	f105 0838 	add.w	r8, r5, #56	@ 0x38
 8018f0e:	4640      	mov	r0, r8
 8018f10:	f7ff fde4 	bl	8018adc <rcl_interfaces__msg__IntegerRange__Sequence__init>
 8018f14:	4604      	mov	r4, r0
 8018f16:	bb10      	cbnz	r0, 8018f5e <rcl_interfaces__msg__ParameterDescriptor__init+0x9e>
 8018f18:	4628      	mov	r0, r5
 8018f1a:	f7f6 fb5d 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f1e:	4630      	mov	r0, r6
 8018f20:	f7f6 fb5a 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f24:	4638      	mov	r0, r7
 8018f26:	f7f6 fb57 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f2a:	4648      	mov	r0, r9
 8018f2c:	f7ff fd64 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018f30:	4640      	mov	r0, r8
 8018f32:	f7ff fdeb 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018f36:	e012      	b.n	8018f5e <rcl_interfaces__msg__ParameterDescriptor__init+0x9e>
 8018f38:	4628      	mov	r0, r5
 8018f3a:	f7f6 fb4d 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f3e:	f105 0010 	add.w	r0, r5, #16
 8018f42:	f7f6 fb49 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f46:	f105 001c 	add.w	r0, r5, #28
 8018f4a:	f7f6 fb45 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f4e:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8018f52:	f7ff fd51 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018f56:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8018f5a:	f7ff fdd7 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018f5e:	4620      	mov	r0, r4
 8018f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f64:	4604      	mov	r4, r0
 8018f66:	4620      	mov	r0, r4
 8018f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f6c:	4628      	mov	r0, r5
 8018f6e:	f7f6 fb33 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f72:	4630      	mov	r0, r6
 8018f74:	f7f6 fb30 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f78:	4638      	mov	r0, r7
 8018f7a:	e7e6      	b.n	8018f4a <rcl_interfaces__msg__ParameterDescriptor__init+0x8a>
 8018f7c:	4628      	mov	r0, r5
 8018f7e:	f7f6 fb2b 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f82:	4630      	mov	r0, r6
 8018f84:	e7dd      	b.n	8018f42 <rcl_interfaces__msg__ParameterDescriptor__init+0x82>
 8018f86:	4628      	mov	r0, r5
 8018f88:	f7f6 fb26 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f8c:	4630      	mov	r0, r6
 8018f8e:	f7f6 fb23 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f92:	4638      	mov	r0, r7
 8018f94:	f7f6 fb20 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018f98:	4648      	mov	r0, r9
 8018f9a:	f7ff fd2d 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018f9e:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8018fa2:	f7ff fdb3 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018fa6:	e7da      	b.n	8018f5e <rcl_interfaces__msg__ParameterDescriptor__init+0x9e>

08018fa8 <rcl_interfaces__msg__ParameterDescriptor__fini>:
 8018fa8:	b1a8      	cbz	r0, 8018fd6 <rcl_interfaces__msg__ParameterDescriptor__fini+0x2e>
 8018faa:	b510      	push	{r4, lr}
 8018fac:	4604      	mov	r4, r0
 8018fae:	f7f6 fb13 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018fb2:	f104 0010 	add.w	r0, r4, #16
 8018fb6:	f7f6 fb0f 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018fba:	f104 001c 	add.w	r0, r4, #28
 8018fbe:	f7f6 fb0b 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8018fc2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8018fc6:	f7ff fd17 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8018fca:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8018fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fd2:	f7ff bd9b 	b.w	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8018fd6:	4770      	bx	lr

08018fd8 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init>:
 8018fd8:	b108      	cbz	r0, 8018fde <rcl_interfaces__msg__ParameterDescriptor__Sequence__init+0x6>
 8018fda:	f7ff beb9 	b.w	8018d50 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init.part.0>
 8018fde:	4770      	bx	lr

08018fe0 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini>:
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	d035      	beq.n	8019050 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini+0x70>
 8018fe4:	b570      	push	{r4, r5, r6, lr}
 8018fe6:	4606      	mov	r6, r0
 8018fe8:	b086      	sub	sp, #24
 8018fea:	a801      	add	r0, sp, #4
 8018fec:	f7f5 fb8e 	bl	800e70c <rcutils_get_default_allocator>
 8018ff0:	6833      	ldr	r3, [r6, #0]
 8018ff2:	b33b      	cbz	r3, 8019044 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini+0x64>
 8018ff4:	68b2      	ldr	r2, [r6, #8]
 8018ff6:	b1ea      	cbz	r2, 8019034 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini+0x54>
 8018ff8:	2500      	movs	r5, #0
 8018ffa:	eb05 1405 	add.w	r4, r5, r5, lsl #4
 8018ffe:	eb13 0484 	adds.w	r4, r3, r4, lsl #2
 8019002:	4620      	mov	r0, r4
 8019004:	d020      	beq.n	8019048 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini+0x68>
 8019006:	f7f6 fae7 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801900a:	f104 0010 	add.w	r0, r4, #16
 801900e:	f7f6 fae3 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019012:	f104 001c 	add.w	r0, r4, #28
 8019016:	f7f6 fadf 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801901a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801901e:	f7ff fceb 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8019022:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8019026:	f7ff fd71 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 801902a:	68b2      	ldr	r2, [r6, #8]
 801902c:	6833      	ldr	r3, [r6, #0]
 801902e:	3501      	adds	r5, #1
 8019030:	4295      	cmp	r5, r2
 8019032:	d3e2      	bcc.n	8018ffa <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini+0x1a>
 8019034:	4618      	mov	r0, r3
 8019036:	9a02      	ldr	r2, [sp, #8]
 8019038:	9905      	ldr	r1, [sp, #20]
 801903a:	4790      	blx	r2
 801903c:	2300      	movs	r3, #0
 801903e:	e9c6 3300 	strd	r3, r3, [r6]
 8019042:	60b3      	str	r3, [r6, #8]
 8019044:	b006      	add	sp, #24
 8019046:	bd70      	pop	{r4, r5, r6, pc}
 8019048:	3501      	adds	r5, #1
 801904a:	4295      	cmp	r5, r2
 801904c:	d3d5      	bcc.n	8018ffa <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini+0x1a>
 801904e:	e7f1      	b.n	8019034 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini+0x54>
 8019050:	4770      	bx	lr
 8019052:	bf00      	nop

08019054 <rcl_interfaces__msg__ParameterEvent__init>:
 8019054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019058:	4605      	mov	r5, r0
 801905a:	2800      	cmp	r0, #0
 801905c:	d049      	beq.n	80190f2 <rcl_interfaces__msg__ParameterEvent__init+0x9e>
 801905e:	f005 f931 	bl	801e2c4 <builtin_interfaces__msg__Time__init>
 8019062:	4604      	mov	r4, r0
 8019064:	b378      	cbz	r0, 80190c6 <rcl_interfaces__msg__ParameterEvent__init+0x72>
 8019066:	f105 0608 	add.w	r6, r5, #8
 801906a:	4630      	mov	r0, r6
 801906c:	f7f6 fa9e 	bl	800f5ac <rosidl_runtime_c__String__init>
 8019070:	4604      	mov	r4, r0
 8019072:	2800      	cmp	r0, #0
 8019074:	d049      	beq.n	801910a <rcl_interfaces__msg__ParameterEvent__init+0xb6>
 8019076:	f105 0714 	add.w	r7, r5, #20
 801907a:	2100      	movs	r1, #0
 801907c:	4638      	mov	r0, r7
 801907e:	f7ff fe37 	bl	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 8019082:	4604      	mov	r4, r0
 8019084:	b3c8      	cbz	r0, 80190fa <rcl_interfaces__msg__ParameterEvent__init+0xa6>
 8019086:	f105 0820 	add.w	r8, r5, #32
 801908a:	2100      	movs	r1, #0
 801908c:	4640      	mov	r0, r8
 801908e:	f7ff fe2f 	bl	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 8019092:	4604      	mov	r4, r0
 8019094:	b3f0      	cbz	r0, 8019114 <rcl_interfaces__msg__ParameterEvent__init+0xc0>
 8019096:	f105 092c 	add.w	r9, r5, #44	@ 0x2c
 801909a:	2100      	movs	r1, #0
 801909c:	4648      	mov	r0, r9
 801909e:	f7ff fe27 	bl	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 80190a2:	4604      	mov	r4, r0
 80190a4:	bb10      	cbnz	r0, 80190ec <rcl_interfaces__msg__ParameterEvent__init+0x98>
 80190a6:	4628      	mov	r0, r5
 80190a8:	f005 f910 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 80190ac:	4630      	mov	r0, r6
 80190ae:	f7f6 fa93 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80190b2:	4638      	mov	r0, r7
 80190b4:	f7ff fe20 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 80190b8:	4640      	mov	r0, r8
 80190ba:	f7ff fe1d 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 80190be:	4648      	mov	r0, r9
 80190c0:	f7ff fe1a 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 80190c4:	e012      	b.n	80190ec <rcl_interfaces__msg__ParameterEvent__init+0x98>
 80190c6:	4628      	mov	r0, r5
 80190c8:	f005 f900 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 80190cc:	f105 0008 	add.w	r0, r5, #8
 80190d0:	f7f6 fa82 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80190d4:	f105 0014 	add.w	r0, r5, #20
 80190d8:	f7ff fe0e 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 80190dc:	f105 0020 	add.w	r0, r5, #32
 80190e0:	f7ff fe0a 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 80190e4:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 80190e8:	f7ff fe06 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 80190ec:	4620      	mov	r0, r4
 80190ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190f2:	4604      	mov	r4, r0
 80190f4:	4620      	mov	r0, r4
 80190f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190fa:	4628      	mov	r0, r5
 80190fc:	f005 f8e6 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 8019100:	4630      	mov	r0, r6
 8019102:	f7f6 fa69 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019106:	4638      	mov	r0, r7
 8019108:	e7e6      	b.n	80190d8 <rcl_interfaces__msg__ParameterEvent__init+0x84>
 801910a:	4628      	mov	r0, r5
 801910c:	f005 f8de 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 8019110:	4630      	mov	r0, r6
 8019112:	e7dd      	b.n	80190d0 <rcl_interfaces__msg__ParameterEvent__init+0x7c>
 8019114:	4628      	mov	r0, r5
 8019116:	f005 f8d9 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 801911a:	4630      	mov	r0, r6
 801911c:	f7f6 fa5c 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019120:	4638      	mov	r0, r7
 8019122:	f7ff fde9 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 8019126:	4640      	mov	r0, r8
 8019128:	f7ff fde6 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 801912c:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8019130:	f7ff fde2 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 8019134:	e7da      	b.n	80190ec <rcl_interfaces__msg__ParameterEvent__init+0x98>
 8019136:	bf00      	nop

08019138 <rcl_interfaces__msg__ParameterEvent__fini>:
 8019138:	b1a8      	cbz	r0, 8019166 <rcl_interfaces__msg__ParameterEvent__fini+0x2e>
 801913a:	b510      	push	{r4, lr}
 801913c:	4604      	mov	r4, r0
 801913e:	f005 f8c5 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 8019142:	f104 0008 	add.w	r0, r4, #8
 8019146:	f7f6 fa47 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801914a:	f104 0014 	add.w	r0, r4, #20
 801914e:	f7ff fdd3 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 8019152:	f104 0020 	add.w	r0, r4, #32
 8019156:	f7ff fdcf 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 801915a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 801915e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019162:	f7ff bdc9 	b.w	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 8019166:	4770      	bx	lr

08019168 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0>:
 8019168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801916c:	ed2d 8b02 	vpush	{d8}
 8019170:	b08b      	sub	sp, #44	@ 0x2c
 8019172:	4681      	mov	r9, r0
 8019174:	460e      	mov	r6, r1
 8019176:	a805      	add	r0, sp, #20
 8019178:	f7f5 fac8 	bl	800e70c <rcutils_get_default_allocator>
 801917c:	2e00      	cmp	r6, #0
 801917e:	f000 808b 	beq.w	8019298 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x130>
 8019182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019184:	2160      	movs	r1, #96	@ 0x60
 8019186:	461a      	mov	r2, r3
 8019188:	ee08 3a10 	vmov	s16, r3
 801918c:	4630      	mov	r0, r6
 801918e:	9b08      	ldr	r3, [sp, #32]
 8019190:	4798      	blx	r3
 8019192:	9001      	str	r0, [sp, #4]
 8019194:	4604      	mov	r4, r0
 8019196:	2800      	cmp	r0, #0
 8019198:	d079      	beq.n	801928e <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x126>
 801919a:	2500      	movs	r5, #0
 801919c:	e029      	b.n	80191f2 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x8a>
 801919e:	f7f6 f975 	bl	800f48c <rosidl_runtime_c__octet__Sequence__init>
 80191a2:	4602      	mov	r2, r0
 80191a4:	f104 0b3c 	add.w	fp, r4, #60	@ 0x3c
 80191a8:	2100      	movs	r1, #0
 80191aa:	4650      	mov	r0, sl
 80191ac:	2a00      	cmp	r2, #0
 80191ae:	d07f      	beq.n	80192b0 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x148>
 80191b0:	f7f6 f940 	bl	800f434 <rosidl_runtime_c__boolean__Sequence__init>
 80191b4:	b358      	cbz	r0, 801920e <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0xa6>
 80191b6:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80191ba:	9302      	str	r3, [sp, #8]
 80191bc:	2100      	movs	r1, #0
 80191be:	f104 0354 	add.w	r3, r4, #84	@ 0x54
 80191c2:	4658      	mov	r0, fp
 80191c4:	9303      	str	r3, [sp, #12]
 80191c6:	f7f6 f9b9 	bl	800f53c <rosidl_runtime_c__int64__Sequence__init>
 80191ca:	2800      	cmp	r0, #0
 80191cc:	d07c      	beq.n	80192c8 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x160>
 80191ce:	9802      	ldr	r0, [sp, #8]
 80191d0:	2100      	movs	r1, #0
 80191d2:	f7f6 f903 	bl	800f3dc <rosidl_runtime_c__double__Sequence__init>
 80191d6:	2800      	cmp	r0, #0
 80191d8:	f000 8081 	beq.w	80192de <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x176>
 80191dc:	9803      	ldr	r0, [sp, #12]
 80191de:	2100      	movs	r1, #0
 80191e0:	3460      	adds	r4, #96	@ 0x60
 80191e2:	f7f6 fa93 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 80191e6:	2800      	cmp	r0, #0
 80191e8:	f000 808d 	beq.w	8019306 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x19e>
 80191ec:	3501      	adds	r5, #1
 80191ee:	42ae      	cmp	r6, r5
 80191f0:	d053      	beq.n	801929a <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x132>
 80191f2:	f104 0718 	add.w	r7, r4, #24
 80191f6:	4638      	mov	r0, r7
 80191f8:	f7f6 f9d8 	bl	800f5ac <rosidl_runtime_c__String__init>
 80191fc:	f104 0824 	add.w	r8, r4, #36	@ 0x24
 8019200:	4602      	mov	r2, r0
 8019202:	f104 0a30 	add.w	sl, r4, #48	@ 0x30
 8019206:	2100      	movs	r1, #0
 8019208:	4640      	mov	r0, r8
 801920a:	2a00      	cmp	r2, #0
 801920c:	d1c7      	bne.n	801919e <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x36>
 801920e:	4638      	mov	r0, r7
 8019210:	f7f6 f9e2 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019214:	4640      	mov	r0, r8
 8019216:	f7f6 f951 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 801921a:	4650      	mov	r0, sl
 801921c:	f7f6 f922 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 8019220:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8019224:	f7f6 f9a2 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 8019228:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 801922c:	f7f6 f8ee 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 8019230:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8019234:	f7f6 fab2 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019238:	42ae      	cmp	r6, r5
 801923a:	d92e      	bls.n	801929a <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x132>
 801923c:	b30d      	cbz	r5, 8019282 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0x11a>
 801923e:	9b01      	ldr	r3, [sp, #4]
 8019240:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8019244:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8019248:	3c48      	subs	r4, #72	@ 0x48
 801924a:	f1a3 0548 	sub.w	r5, r3, #72	@ 0x48
 801924e:	4620      	mov	r0, r4
 8019250:	f7f6 f9c2 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019254:	f104 000c 	add.w	r0, r4, #12
 8019258:	f7f6 f930 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 801925c:	f104 0018 	add.w	r0, r4, #24
 8019260:	f7f6 f900 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 8019264:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019268:	f7f6 f980 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 801926c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8019270:	f7f6 f8cc 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 8019274:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8019278:	3c60      	subs	r4, #96	@ 0x60
 801927a:	f7f6 fa8f 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 801927e:	42ac      	cmp	r4, r5
 8019280:	d1e5      	bne.n	801924e <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0xe6>
 8019282:	9801      	ldr	r0, [sp, #4]
 8019284:	9b06      	ldr	r3, [sp, #24]
 8019286:	ee18 1a10 	vmov	r1, s16
 801928a:	4798      	blx	r3
 801928c:	2000      	movs	r0, #0
 801928e:	b00b      	add	sp, #44	@ 0x2c
 8019290:	ecbd 8b02 	vpop	{d8}
 8019294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019298:	9601      	str	r6, [sp, #4]
 801929a:	9b01      	ldr	r3, [sp, #4]
 801929c:	f8c9 6008 	str.w	r6, [r9, #8]
 80192a0:	2001      	movs	r0, #1
 80192a2:	e9c9 3600 	strd	r3, r6, [r9]
 80192a6:	b00b      	add	sp, #44	@ 0x2c
 80192a8:	ecbd 8b02 	vpop	{d8}
 80192ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192b0:	4638      	mov	r0, r7
 80192b2:	f7f6 f991 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80192b6:	4640      	mov	r0, r8
 80192b8:	f7f6 f900 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 80192bc:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80192c0:	f7f6 f8d0 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 80192c4:	4658      	mov	r0, fp
 80192c6:	e7ad      	b.n	8019224 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0xbc>
 80192c8:	4638      	mov	r0, r7
 80192ca:	f7f6 f985 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80192ce:	4640      	mov	r0, r8
 80192d0:	f7f6 f8f4 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 80192d4:	4650      	mov	r0, sl
 80192d6:	f7f6 f8c5 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 80192da:	4658      	mov	r0, fp
 80192dc:	e7a2      	b.n	8019224 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0xbc>
 80192de:	4638      	mov	r0, r7
 80192e0:	f7f6 f97a 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80192e4:	4640      	mov	r0, r8
 80192e6:	f7f6 f8e9 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 80192ea:	4650      	mov	r0, sl
 80192ec:	f7f6 f8ba 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 80192f0:	4658      	mov	r0, fp
 80192f2:	f7f6 f93b 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 80192f6:	9802      	ldr	r0, [sp, #8]
 80192f8:	f7f6 f888 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 80192fc:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8019300:	f7f6 fa4c 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019304:	e798      	b.n	8019238 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0xd0>
 8019306:	4638      	mov	r0, r7
 8019308:	f7f6 f966 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801930c:	4640      	mov	r0, r8
 801930e:	f7f6 f8d5 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 8019312:	4650      	mov	r0, sl
 8019314:	f7f6 f8a6 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 8019318:	4658      	mov	r0, fp
 801931a:	f7f6 f927 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 801931e:	9802      	ldr	r0, [sp, #8]
 8019320:	f7f6 f874 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 8019324:	9803      	ldr	r0, [sp, #12]
 8019326:	f7f6 fa39 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 801932a:	e785      	b.n	8019238 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0+0xd0>

0801932c <rcl_interfaces__msg__ParameterValue__init>:
 801932c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019330:	4605      	mov	r5, r0
 8019332:	2800      	cmp	r0, #0
 8019334:	d05f      	beq.n	80193f6 <rcl_interfaces__msg__ParameterValue__init+0xca>
 8019336:	f100 0618 	add.w	r6, r0, #24
 801933a:	4630      	mov	r0, r6
 801933c:	f7f6 f936 	bl	800f5ac <rosidl_runtime_c__String__init>
 8019340:	4604      	mov	r4, r0
 8019342:	2800      	cmp	r0, #0
 8019344:	d03d      	beq.n	80193c2 <rcl_interfaces__msg__ParameterValue__init+0x96>
 8019346:	f105 0724 	add.w	r7, r5, #36	@ 0x24
 801934a:	2100      	movs	r1, #0
 801934c:	4638      	mov	r0, r7
 801934e:	f7f6 f89d 	bl	800f48c <rosidl_runtime_c__octet__Sequence__init>
 8019352:	4604      	mov	r4, r0
 8019354:	2800      	cmp	r0, #0
 8019356:	d05a      	beq.n	801940e <rcl_interfaces__msg__ParameterValue__init+0xe2>
 8019358:	f105 0830 	add.w	r8, r5, #48	@ 0x30
 801935c:	2100      	movs	r1, #0
 801935e:	4640      	mov	r0, r8
 8019360:	f7f6 f868 	bl	800f434 <rosidl_runtime_c__boolean__Sequence__init>
 8019364:	4604      	mov	r4, r0
 8019366:	2800      	cmp	r0, #0
 8019368:	d049      	beq.n	80193fe <rcl_interfaces__msg__ParameterValue__init+0xd2>
 801936a:	f105 093c 	add.w	r9, r5, #60	@ 0x3c
 801936e:	2100      	movs	r1, #0
 8019370:	4648      	mov	r0, r9
 8019372:	f7f6 f8e3 	bl	800f53c <rosidl_runtime_c__int64__Sequence__init>
 8019376:	4604      	mov	r4, r0
 8019378:	2800      	cmp	r0, #0
 801937a:	d04d      	beq.n	8019418 <rcl_interfaces__msg__ParameterValue__init+0xec>
 801937c:	f105 0a48 	add.w	sl, r5, #72	@ 0x48
 8019380:	2100      	movs	r1, #0
 8019382:	4650      	mov	r0, sl
 8019384:	f7f6 f82a 	bl	800f3dc <rosidl_runtime_c__double__Sequence__init>
 8019388:	4604      	mov	r4, r0
 801938a:	2800      	cmp	r0, #0
 801938c:	d04f      	beq.n	801942e <rcl_interfaces__msg__ParameterValue__init+0x102>
 801938e:	3554      	adds	r5, #84	@ 0x54
 8019390:	2100      	movs	r1, #0
 8019392:	4628      	mov	r0, r5
 8019394:	f7f6 f9ba 	bl	800f70c <rosidl_runtime_c__String__Sequence__init>
 8019398:	4604      	mov	r4, r0
 801939a:	bb48      	cbnz	r0, 80193f0 <rcl_interfaces__msg__ParameterValue__init+0xc4>
 801939c:	4630      	mov	r0, r6
 801939e:	f7f6 f91b 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80193a2:	4638      	mov	r0, r7
 80193a4:	f7f6 f88a 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 80193a8:	4640      	mov	r0, r8
 80193aa:	f7f6 f85b 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 80193ae:	4648      	mov	r0, r9
 80193b0:	f7f6 f8dc 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 80193b4:	4650      	mov	r0, sl
 80193b6:	f7f6 f829 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 80193ba:	4628      	mov	r0, r5
 80193bc:	f7f6 f9ee 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 80193c0:	e016      	b.n	80193f0 <rcl_interfaces__msg__ParameterValue__init+0xc4>
 80193c2:	4630      	mov	r0, r6
 80193c4:	f7f6 f908 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80193c8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80193cc:	f7f6 f876 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 80193d0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80193d4:	f7f6 f846 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 80193d8:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 80193dc:	f7f6 f8c6 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 80193e0:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80193e4:	f7f6 f812 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 80193e8:	f105 0054 	add.w	r0, r5, #84	@ 0x54
 80193ec:	f7f6 f9d6 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 80193f0:	4620      	mov	r0, r4
 80193f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193f6:	4604      	mov	r4, r0
 80193f8:	4620      	mov	r0, r4
 80193fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193fe:	4630      	mov	r0, r6
 8019400:	f7f6 f8ea 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019404:	4638      	mov	r0, r7
 8019406:	f7f6 f859 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 801940a:	4640      	mov	r0, r8
 801940c:	e7e2      	b.n	80193d4 <rcl_interfaces__msg__ParameterValue__init+0xa8>
 801940e:	4630      	mov	r0, r6
 8019410:	f7f6 f8e2 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019414:	4638      	mov	r0, r7
 8019416:	e7d9      	b.n	80193cc <rcl_interfaces__msg__ParameterValue__init+0xa0>
 8019418:	4630      	mov	r0, r6
 801941a:	f7f6 f8dd 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801941e:	4638      	mov	r0, r7
 8019420:	f7f6 f84c 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 8019424:	4640      	mov	r0, r8
 8019426:	f7f6 f81d 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 801942a:	4648      	mov	r0, r9
 801942c:	e7d6      	b.n	80193dc <rcl_interfaces__msg__ParameterValue__init+0xb0>
 801942e:	4630      	mov	r0, r6
 8019430:	f7f6 f8d2 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019434:	4638      	mov	r0, r7
 8019436:	f7f6 f841 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 801943a:	4640      	mov	r0, r8
 801943c:	f7f6 f812 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 8019440:	4648      	mov	r0, r9
 8019442:	f7f6 f893 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 8019446:	4650      	mov	r0, sl
 8019448:	f7f5 ffe0 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 801944c:	f105 0054 	add.w	r0, r5, #84	@ 0x54
 8019450:	f7f6 f9a4 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019454:	e7cc      	b.n	80193f0 <rcl_interfaces__msg__ParameterValue__init+0xc4>
 8019456:	bf00      	nop

08019458 <rcl_interfaces__msg__ParameterValue__fini>:
 8019458:	b1d0      	cbz	r0, 8019490 <rcl_interfaces__msg__ParameterValue__fini+0x38>
 801945a:	b510      	push	{r4, lr}
 801945c:	4604      	mov	r4, r0
 801945e:	3018      	adds	r0, #24
 8019460:	f7f6 f8ba 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019464:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8019468:	f7f6 f828 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 801946c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8019470:	f7f5 fff8 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 8019474:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8019478:	f7f6 f878 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 801947c:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8019480:	f7f5 ffc4 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 8019484:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8019488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801948c:	f7f6 b986 	b.w	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019490:	4770      	bx	lr
 8019492:	bf00      	nop

08019494 <rcl_interfaces__msg__ParameterValue__Sequence__init>:
 8019494:	b108      	cbz	r0, 801949a <rcl_interfaces__msg__ParameterValue__Sequence__init+0x6>
 8019496:	f7ff be67 	b.w	8019168 <rcl_interfaces__msg__ParameterValue__Sequence__init.part.0>
 801949a:	4770      	bx	lr

0801949c <rcl_interfaces__msg__ParameterValue__Sequence__fini>:
 801949c:	2800      	cmp	r0, #0
 801949e:	d03a      	beq.n	8019516 <rcl_interfaces__msg__ParameterValue__Sequence__fini+0x7a>
 80194a0:	b570      	push	{r4, r5, r6, lr}
 80194a2:	4606      	mov	r6, r0
 80194a4:	b086      	sub	sp, #24
 80194a6:	a801      	add	r0, sp, #4
 80194a8:	f7f5 f930 	bl	800e70c <rcutils_get_default_allocator>
 80194ac:	6833      	ldr	r3, [r6, #0]
 80194ae:	b363      	cbz	r3, 801950a <rcl_interfaces__msg__ParameterValue__Sequence__fini+0x6e>
 80194b0:	68b2      	ldr	r2, [r6, #8]
 80194b2:	b312      	cbz	r2, 80194fa <rcl_interfaces__msg__ParameterValue__Sequence__fini+0x5e>
 80194b4:	2500      	movs	r5, #0
 80194b6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80194ba:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
 80194be:	f104 0018 	add.w	r0, r4, #24
 80194c2:	d024      	beq.n	801950e <rcl_interfaces__msg__ParameterValue__Sequence__fini+0x72>
 80194c4:	f7f6 f888 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80194c8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80194cc:	f7f5 fff6 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 80194d0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80194d4:	f7f5 ffc6 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 80194d8:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80194dc:	f7f6 f846 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 80194e0:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 80194e4:	f7f5 ff92 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 80194e8:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80194ec:	f7f6 f956 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 80194f0:	68b2      	ldr	r2, [r6, #8]
 80194f2:	6833      	ldr	r3, [r6, #0]
 80194f4:	3501      	adds	r5, #1
 80194f6:	4295      	cmp	r5, r2
 80194f8:	d3dd      	bcc.n	80194b6 <rcl_interfaces__msg__ParameterValue__Sequence__fini+0x1a>
 80194fa:	4618      	mov	r0, r3
 80194fc:	9a02      	ldr	r2, [sp, #8]
 80194fe:	9905      	ldr	r1, [sp, #20]
 8019500:	4790      	blx	r2
 8019502:	2300      	movs	r3, #0
 8019504:	e9c6 3300 	strd	r3, r3, [r6]
 8019508:	60b3      	str	r3, [r6, #8]
 801950a:	b006      	add	sp, #24
 801950c:	bd70      	pop	{r4, r5, r6, pc}
 801950e:	3501      	adds	r5, #1
 8019510:	4295      	cmp	r5, r2
 8019512:	d3d0      	bcc.n	80194b6 <rcl_interfaces__msg__ParameterValue__Sequence__fini+0x1a>
 8019514:	e7f1      	b.n	80194fa <rcl_interfaces__msg__ParameterValue__Sequence__fini+0x5e>
 8019516:	4770      	bx	lr

08019518 <rcl_interfaces__srv__SetParameters_Request__init>:
 8019518:	b538      	push	{r3, r4, r5, lr}
 801951a:	4604      	mov	r4, r0
 801951c:	b130      	cbz	r0, 801952c <rcl_interfaces__srv__SetParameters_Request__init+0x14>
 801951e:	2100      	movs	r1, #0
 8019520:	f7ff fbe6 	bl	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 8019524:	4605      	mov	r5, r0
 8019526:	b120      	cbz	r0, 8019532 <rcl_interfaces__srv__SetParameters_Request__init+0x1a>
 8019528:	4628      	mov	r0, r5
 801952a:	bd38      	pop	{r3, r4, r5, pc}
 801952c:	4605      	mov	r5, r0
 801952e:	4628      	mov	r0, r5
 8019530:	bd38      	pop	{r3, r4, r5, pc}
 8019532:	4620      	mov	r0, r4
 8019534:	f7ff fbe0 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 8019538:	4628      	mov	r0, r5
 801953a:	bd38      	pop	{r3, r4, r5, pc}

0801953c <rcl_interfaces__srv__SetParameters_Request__fini>:
 801953c:	b108      	cbz	r0, 8019542 <rcl_interfaces__srv__SetParameters_Request__fini+0x6>
 801953e:	f7ff bbdb 	b.w	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 8019542:	4770      	bx	lr

08019544 <rcl_interfaces__srv__SetParameters_Response__init>:
 8019544:	b538      	push	{r3, r4, r5, lr}
 8019546:	4604      	mov	r4, r0
 8019548:	b130      	cbz	r0, 8019558 <rcl_interfaces__srv__SetParameters_Response__init+0x14>
 801954a:	2100      	movs	r1, #0
 801954c:	f000 f86c 	bl	8019628 <rcl_interfaces__msg__SetParametersResult__Sequence__init>
 8019550:	4605      	mov	r5, r0
 8019552:	b120      	cbz	r0, 801955e <rcl_interfaces__srv__SetParameters_Response__init+0x1a>
 8019554:	4628      	mov	r0, r5
 8019556:	bd38      	pop	{r3, r4, r5, pc}
 8019558:	4605      	mov	r5, r0
 801955a:	4628      	mov	r0, r5
 801955c:	bd38      	pop	{r3, r4, r5, pc}
 801955e:	4620      	mov	r0, r4
 8019560:	f000 f866 	bl	8019630 <rcl_interfaces__msg__SetParametersResult__Sequence__fini>
 8019564:	4628      	mov	r0, r5
 8019566:	bd38      	pop	{r3, r4, r5, pc}

08019568 <rcl_interfaces__srv__SetParameters_Response__fini>:
 8019568:	b108      	cbz	r0, 801956e <rcl_interfaces__srv__SetParameters_Response__fini+0x6>
 801956a:	f000 b861 	b.w	8019630 <rcl_interfaces__msg__SetParametersResult__Sequence__fini>
 801956e:	4770      	bx	lr

08019570 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0>:
 8019570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019574:	b086      	sub	sp, #24
 8019576:	4680      	mov	r8, r0
 8019578:	460f      	mov	r7, r1
 801957a:	a801      	add	r0, sp, #4
 801957c:	f7f5 f8c6 	bl	800e70c <rcutils_get_default_allocator>
 8019580:	b36f      	cbz	r7, 80195de <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x6e>
 8019582:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 8019586:	2110      	movs	r1, #16
 8019588:	4652      	mov	r2, sl
 801958a:	4638      	mov	r0, r7
 801958c:	4798      	blx	r3
 801958e:	4681      	mov	r9, r0
 8019590:	b378      	cbz	r0, 80195f2 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x82>
 8019592:	1d06      	adds	r6, r0, #4
 8019594:	2500      	movs	r5, #0
 8019596:	e004      	b.n	80195a2 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x32>
 8019598:	3501      	adds	r5, #1
 801959a:	42af      	cmp	r7, r5
 801959c:	f106 0610 	add.w	r6, r6, #16
 80195a0:	d01e      	beq.n	80195e0 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x70>
 80195a2:	4630      	mov	r0, r6
 80195a4:	f7f6 f802 	bl	800f5ac <rosidl_runtime_c__String__init>
 80195a8:	4604      	mov	r4, r0
 80195aa:	2800      	cmp	r0, #0
 80195ac:	d1f4      	bne.n	8019598 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x28>
 80195ae:	4630      	mov	r0, r6
 80195b0:	f7f6 f812 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80195b4:	42af      	cmp	r7, r5
 80195b6:	d913      	bls.n	80195e0 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x70>
 80195b8:	b14d      	cbz	r5, 80195ce <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x5e>
 80195ba:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 80195be:	3e0c      	subs	r6, #12
 80195c0:	4630      	mov	r0, r6
 80195c2:	f7f6 f809 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 80195c6:	3d01      	subs	r5, #1
 80195c8:	f1a6 0610 	sub.w	r6, r6, #16
 80195cc:	d1f8      	bne.n	80195c0 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x50>
 80195ce:	4648      	mov	r0, r9
 80195d0:	9b02      	ldr	r3, [sp, #8]
 80195d2:	4651      	mov	r1, sl
 80195d4:	4798      	blx	r3
 80195d6:	4620      	mov	r0, r4
 80195d8:	b006      	add	sp, #24
 80195da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195de:	46b9      	mov	r9, r7
 80195e0:	e9c8 9700 	strd	r9, r7, [r8]
 80195e4:	f8c8 7008 	str.w	r7, [r8, #8]
 80195e8:	2401      	movs	r4, #1
 80195ea:	4620      	mov	r0, r4
 80195ec:	b006      	add	sp, #24
 80195ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195f2:	4604      	mov	r4, r0
 80195f4:	e7f9      	b.n	80195ea <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0+0x7a>
 80195f6:	bf00      	nop

080195f8 <rcl_interfaces__msg__SetParametersResult__init>:
 80195f8:	b538      	push	{r3, r4, r5, lr}
 80195fa:	b138      	cbz	r0, 801960c <rcl_interfaces__msg__SetParametersResult__init+0x14>
 80195fc:	1d05      	adds	r5, r0, #4
 80195fe:	4628      	mov	r0, r5
 8019600:	f7f5 ffd4 	bl	800f5ac <rosidl_runtime_c__String__init>
 8019604:	4604      	mov	r4, r0
 8019606:	b120      	cbz	r0, 8019612 <rcl_interfaces__msg__SetParametersResult__init+0x1a>
 8019608:	4620      	mov	r0, r4
 801960a:	bd38      	pop	{r3, r4, r5, pc}
 801960c:	4604      	mov	r4, r0
 801960e:	4620      	mov	r0, r4
 8019610:	bd38      	pop	{r3, r4, r5, pc}
 8019612:	4628      	mov	r0, r5
 8019614:	f7f5 ffe0 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019618:	4620      	mov	r0, r4
 801961a:	bd38      	pop	{r3, r4, r5, pc}

0801961c <rcl_interfaces__msg__SetParametersResult__fini>:
 801961c:	b110      	cbz	r0, 8019624 <rcl_interfaces__msg__SetParametersResult__fini+0x8>
 801961e:	3004      	adds	r0, #4
 8019620:	f7f5 bfda 	b.w	800f5d8 <rosidl_runtime_c__String__fini>
 8019624:	4770      	bx	lr
 8019626:	bf00      	nop

08019628 <rcl_interfaces__msg__SetParametersResult__Sequence__init>:
 8019628:	b108      	cbz	r0, 801962e <rcl_interfaces__msg__SetParametersResult__Sequence__init+0x6>
 801962a:	f7ff bfa1 	b.w	8019570 <rcl_interfaces__msg__SetParametersResult__Sequence__init.part.0>
 801962e:	4770      	bx	lr

08019630 <rcl_interfaces__msg__SetParametersResult__Sequence__fini>:
 8019630:	b320      	cbz	r0, 801967c <rcl_interfaces__msg__SetParametersResult__Sequence__fini+0x4c>
 8019632:	b530      	push	{r4, r5, lr}
 8019634:	4605      	mov	r5, r0
 8019636:	b087      	sub	sp, #28
 8019638:	a801      	add	r0, sp, #4
 801963a:	f7f5 f867 	bl	800e70c <rcutils_get_default_allocator>
 801963e:	682b      	ldr	r3, [r5, #0]
 8019640:	b1b3      	cbz	r3, 8019670 <rcl_interfaces__msg__SetParametersResult__Sequence__fini+0x40>
 8019642:	68aa      	ldr	r2, [r5, #8]
 8019644:	b162      	cbz	r2, 8019660 <rcl_interfaces__msg__SetParametersResult__Sequence__fini+0x30>
 8019646:	2400      	movs	r4, #0
 8019648:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 801964c:	f100 0004 	add.w	r0, r0, #4
 8019650:	d010      	beq.n	8019674 <rcl_interfaces__msg__SetParametersResult__Sequence__fini+0x44>
 8019652:	f7f5 ffc1 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 8019656:	68aa      	ldr	r2, [r5, #8]
 8019658:	682b      	ldr	r3, [r5, #0]
 801965a:	3401      	adds	r4, #1
 801965c:	4294      	cmp	r4, r2
 801965e:	d3f3      	bcc.n	8019648 <rcl_interfaces__msg__SetParametersResult__Sequence__fini+0x18>
 8019660:	4618      	mov	r0, r3
 8019662:	9a02      	ldr	r2, [sp, #8]
 8019664:	9905      	ldr	r1, [sp, #20]
 8019666:	4790      	blx	r2
 8019668:	2300      	movs	r3, #0
 801966a:	e9c5 3300 	strd	r3, r3, [r5]
 801966e:	60ab      	str	r3, [r5, #8]
 8019670:	b007      	add	sp, #28
 8019672:	bd30      	pop	{r4, r5, pc}
 8019674:	3401      	adds	r4, #1
 8019676:	4294      	cmp	r4, r2
 8019678:	d3e6      	bcc.n	8019648 <rcl_interfaces__msg__SetParametersResult__Sequence__fini+0x18>
 801967a:	e7f1      	b.n	8019660 <rcl_interfaces__msg__SetParametersResult__Sequence__fini+0x30>
 801967c:	4770      	bx	lr
 801967e:	bf00      	nop

08019680 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters>:
 8019680:	4b04      	ldr	r3, [pc, #16]	@ (8019694 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x14>)
 8019682:	681a      	ldr	r2, [r3, #0]
 8019684:	b10a      	cbz	r2, 801968a <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0xa>
 8019686:	4803      	ldr	r0, [pc, #12]	@ (8019694 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x14>)
 8019688:	4770      	bx	lr
 801968a:	4a03      	ldr	r2, [pc, #12]	@ (8019698 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x18>)
 801968c:	4801      	ldr	r0, [pc, #4]	@ (8019694 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x14>)
 801968e:	6812      	ldr	r2, [r2, #0]
 8019690:	601a      	str	r2, [r3, #0]
 8019692:	4770      	bx	lr
 8019694:	20000a70 	.word	0x20000a70
 8019698:	20000380 	.word	0x20000380

0801969c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request>:
 801969c:	4b04      	ldr	r3, [pc, #16]	@ (80196b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x14>)
 801969e:	4805      	ldr	r0, [pc, #20]	@ (80196b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x18>)
 80196a0:	4905      	ldr	r1, [pc, #20]	@ (80196b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x1c>)
 80196a2:	4a06      	ldr	r2, [pc, #24]	@ (80196bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x20>)
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	6003      	str	r3, [r0, #0]
 80196a8:	600b      	str	r3, [r1, #0]
 80196aa:	6013      	str	r3, [r2, #0]
 80196ac:	4770      	bx	lr
 80196ae:	bf00      	nop
 80196b0:	20000380 	.word	0x20000380
 80196b4:	20000a8c 	.word	0x20000a8c
 80196b8:	20000a98 	.word	0x20000a98
 80196bc:	20000a70 	.word	0x20000a70

080196c0 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes>:
 80196c0:	4b04      	ldr	r3, [pc, #16]	@ (80196d4 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x14>)
 80196c2:	681a      	ldr	r2, [r3, #0]
 80196c4:	b10a      	cbz	r2, 80196ca <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0xa>
 80196c6:	4803      	ldr	r0, [pc, #12]	@ (80196d4 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x14>)
 80196c8:	4770      	bx	lr
 80196ca:	4a03      	ldr	r2, [pc, #12]	@ (80196d8 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x18>)
 80196cc:	4801      	ldr	r0, [pc, #4]	@ (80196d4 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x14>)
 80196ce:	6812      	ldr	r2, [r2, #0]
 80196d0:	601a      	str	r2, [r3, #0]
 80196d2:	4770      	bx	lr
 80196d4:	20000aac 	.word	0x20000aac
 80196d8:	20000380 	.word	0x20000380

080196dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request>:
 80196dc:	4b04      	ldr	r3, [pc, #16]	@ (80196f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x14>)
 80196de:	4805      	ldr	r0, [pc, #20]	@ (80196f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x18>)
 80196e0:	4905      	ldr	r1, [pc, #20]	@ (80196f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x1c>)
 80196e2:	4a06      	ldr	r2, [pc, #24]	@ (80196fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x20>)
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	6003      	str	r3, [r0, #0]
 80196e8:	600b      	str	r3, [r1, #0]
 80196ea:	6013      	str	r3, [r2, #0]
 80196ec:	4770      	bx	lr
 80196ee:	bf00      	nop
 80196f0:	20000380 	.word	0x20000380
 80196f4:	20000ac8 	.word	0x20000ac8
 80196f8:	20000ad4 	.word	0x20000ad4
 80196fc:	20000aac 	.word	0x20000aac

08019700 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters>:
 8019700:	4b04      	ldr	r3, [pc, #16]	@ (8019714 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x14>)
 8019702:	681a      	ldr	r2, [r3, #0]
 8019704:	b10a      	cbz	r2, 801970a <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0xa>
 8019706:	4803      	ldr	r0, [pc, #12]	@ (8019714 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x14>)
 8019708:	4770      	bx	lr
 801970a:	4a03      	ldr	r2, [pc, #12]	@ (8019718 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x18>)
 801970c:	4801      	ldr	r0, [pc, #4]	@ (8019714 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x14>)
 801970e:	6812      	ldr	r2, [r2, #0]
 8019710:	601a      	str	r2, [r3, #0]
 8019712:	4770      	bx	lr
 8019714:	20000ae8 	.word	0x20000ae8
 8019718:	20000380 	.word	0x20000380

0801971c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request>:
 801971c:	4b04      	ldr	r3, [pc, #16]	@ (8019730 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x14>)
 801971e:	4805      	ldr	r0, [pc, #20]	@ (8019734 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x18>)
 8019720:	4905      	ldr	r1, [pc, #20]	@ (8019738 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x1c>)
 8019722:	4a06      	ldr	r2, [pc, #24]	@ (801973c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x20>)
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	6003      	str	r3, [r0, #0]
 8019728:	600b      	str	r3, [r1, #0]
 801972a:	6013      	str	r3, [r2, #0]
 801972c:	4770      	bx	lr
 801972e:	bf00      	nop
 8019730:	20000380 	.word	0x20000380
 8019734:	20000b04 	.word	0x20000b04
 8019738:	20000b10 	.word	0x20000b10
 801973c:	20000ae8 	.word	0x20000ae8

08019740 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters>:
 8019740:	4b04      	ldr	r3, [pc, #16]	@ (8019754 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x14>)
 8019742:	681a      	ldr	r2, [r3, #0]
 8019744:	b10a      	cbz	r2, 801974a <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0xa>
 8019746:	4803      	ldr	r0, [pc, #12]	@ (8019754 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x14>)
 8019748:	4770      	bx	lr
 801974a:	4a03      	ldr	r2, [pc, #12]	@ (8019758 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x18>)
 801974c:	4801      	ldr	r0, [pc, #4]	@ (8019754 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x14>)
 801974e:	6812      	ldr	r2, [r2, #0]
 8019750:	601a      	str	r2, [r3, #0]
 8019752:	4770      	bx	lr
 8019754:	20000b24 	.word	0x20000b24
 8019758:	20000380 	.word	0x20000380

0801975c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request>:
 801975c:	4b04      	ldr	r3, [pc, #16]	@ (8019770 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x14>)
 801975e:	4805      	ldr	r0, [pc, #20]	@ (8019774 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x18>)
 8019760:	4905      	ldr	r1, [pc, #20]	@ (8019778 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x1c>)
 8019762:	4a06      	ldr	r2, [pc, #24]	@ (801977c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x20>)
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	6003      	str	r3, [r0, #0]
 8019768:	600b      	str	r3, [r1, #0]
 801976a:	6013      	str	r3, [r2, #0]
 801976c:	4770      	bx	lr
 801976e:	bf00      	nop
 8019770:	20000380 	.word	0x20000380
 8019774:	20000b40 	.word	0x20000b40
 8019778:	20000b4c 	.word	0x20000b4c
 801977c:	20000b24 	.word	0x20000b24

08019780 <rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent>:
 8019780:	4b04      	ldr	r3, [pc, #16]	@ (8019794 <rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x14>)
 8019782:	681a      	ldr	r2, [r3, #0]
 8019784:	b10a      	cbz	r2, 801978a <rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0xa>
 8019786:	4803      	ldr	r0, [pc, #12]	@ (8019794 <rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x14>)
 8019788:	4770      	bx	lr
 801978a:	4a03      	ldr	r2, [pc, #12]	@ (8019798 <rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x18>)
 801978c:	4801      	ldr	r0, [pc, #4]	@ (8019794 <rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x14>)
 801978e:	6812      	ldr	r2, [r2, #0]
 8019790:	601a      	str	r2, [r3, #0]
 8019792:	4770      	bx	lr
 8019794:	20000b60 	.word	0x20000b60
 8019798:	20000380 	.word	0x20000380

0801979c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent>:
 801979c:	4a02      	ldr	r2, [pc, #8]	@ (80197a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0xc>)
 801979e:	4b03      	ldr	r3, [pc, #12]	@ (80197ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x10>)
 80197a0:	6812      	ldr	r2, [r2, #0]
 80197a2:	601a      	str	r2, [r3, #0]
 80197a4:	4770      	bx	lr
 80197a6:	bf00      	nop
 80197a8:	20000380 	.word	0x20000380
 80197ac:	20000b60 	.word	0x20000b60

080197b0 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters>:
 80197b0:	4b04      	ldr	r3, [pc, #16]	@ (80197c4 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x14>)
 80197b2:	681a      	ldr	r2, [r3, #0]
 80197b4:	b10a      	cbz	r2, 80197ba <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0xa>
 80197b6:	4803      	ldr	r0, [pc, #12]	@ (80197c4 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x14>)
 80197b8:	4770      	bx	lr
 80197ba:	4a03      	ldr	r2, [pc, #12]	@ (80197c8 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x18>)
 80197bc:	4801      	ldr	r0, [pc, #4]	@ (80197c4 <rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x14>)
 80197be:	6812      	ldr	r2, [r2, #0]
 80197c0:	601a      	str	r2, [r3, #0]
 80197c2:	4770      	bx	lr
 80197c4:	20000b74 	.word	0x20000b74
 80197c8:	20000380 	.word	0x20000380

080197cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request>:
 80197cc:	4b04      	ldr	r3, [pc, #16]	@ (80197e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x14>)
 80197ce:	4805      	ldr	r0, [pc, #20]	@ (80197e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x18>)
 80197d0:	4905      	ldr	r1, [pc, #20]	@ (80197e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x1c>)
 80197d2:	4a06      	ldr	r2, [pc, #24]	@ (80197ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x20>)
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	6003      	str	r3, [r0, #0]
 80197d8:	600b      	str	r3, [r1, #0]
 80197da:	6013      	str	r3, [r2, #0]
 80197dc:	4770      	bx	lr
 80197de:	bf00      	nop
 80197e0:	20000380 	.word	0x20000380
 80197e4:	20000b90 	.word	0x20000b90
 80197e8:	20000b9c 	.word	0x20000b9c
 80197ec:	20000b74 	.word	0x20000b74

080197f0 <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__size_function__DescribeParameters_Request__names>:
 80197f0:	6840      	ldr	r0, [r0, #4]
 80197f2:	4770      	bx	lr

080197f4 <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__get_const_function__DescribeParameters_Request__names>:
 80197f4:	6800      	ldr	r0, [r0, #0]
 80197f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80197fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80197fe:	4770      	bx	lr

08019800 <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__fetch_function__DescribeParameters_Request__names>:
 8019800:	6803      	ldr	r3, [r0, #0]
 8019802:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019806:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801980a:	4613      	mov	r3, r2
 801980c:	c907      	ldmia	r1, {r0, r1, r2}
 801980e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019812:	4770      	bx	lr

08019814 <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__assign_function__DescribeParameters_Request__names>:
 8019814:	4603      	mov	r3, r0
 8019816:	468c      	mov	ip, r1
 8019818:	ca07      	ldmia	r2, {r0, r1, r2}
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019820:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8019824:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019828:	4770      	bx	lr
 801982a:	bf00      	nop

0801982c <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__size_function__DescribeParameters_Response__descriptors>:
 801982c:	6840      	ldr	r0, [r0, #4]
 801982e:	4770      	bx	lr

08019830 <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__get_const_function__DescribeParameters_Response__descriptors>:
 8019830:	6800      	ldr	r0, [r0, #0]
 8019832:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8019836:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801983a:	4770      	bx	lr

0801983c <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__fetch_function__DescribeParameters_Response__descriptors>:
 801983c:	b508      	push	{r3, lr}
 801983e:	6803      	ldr	r3, [r0, #0]
 8019840:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8019844:	4610      	mov	r0, r2
 8019846:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801984a:	2244      	movs	r2, #68	@ 0x44
 801984c:	f008 f8f1 	bl	8021a32 <memcpy>
 8019850:	bd08      	pop	{r3, pc}
 8019852:	bf00      	nop

08019854 <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__assign_function__DescribeParameters_Response__descriptors>:
 8019854:	b508      	push	{r3, lr}
 8019856:	6800      	ldr	r0, [r0, #0]
 8019858:	460b      	mov	r3, r1
 801985a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801985e:	4611      	mov	r1, r2
 8019860:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8019864:	2244      	movs	r2, #68	@ 0x44
 8019866:	f008 f8e4 	bl	8021a32 <memcpy>
 801986a:	bd08      	pop	{r3, pc}

0801986c <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__DescribeParameters_Request_init_function>:
 801986c:	f7ff b87a 	b.w	8018964 <rcl_interfaces__srv__DescribeParameters_Request__init>

08019870 <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__DescribeParameters_Request_fini_function>:
 8019870:	f7ff b88a 	b.w	8018988 <rcl_interfaces__srv__DescribeParameters_Request__fini>

08019874 <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__resize_function__DescribeParameters_Request__names>:
 8019874:	b510      	push	{r4, lr}
 8019876:	b082      	sub	sp, #8
 8019878:	4604      	mov	r4, r0
 801987a:	9101      	str	r1, [sp, #4]
 801987c:	f7f5 ff8e 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019880:	9901      	ldr	r1, [sp, #4]
 8019882:	4620      	mov	r0, r4
 8019884:	b002      	add	sp, #8
 8019886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801988a:	f7f5 bf3f 	b.w	800f70c <rosidl_runtime_c__String__Sequence__init>
 801988e:	bf00      	nop

08019890 <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__DescribeParameters_Response_init_function>:
 8019890:	f7ff b87e 	b.w	8018990 <rcl_interfaces__srv__DescribeParameters_Response__init>

08019894 <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__DescribeParameters_Response_fini_function>:
 8019894:	f7ff b88e 	b.w	80189b4 <rcl_interfaces__srv__DescribeParameters_Response__fini>

08019898 <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__resize_function__DescribeParameters_Response__descriptors>:
 8019898:	b510      	push	{r4, lr}
 801989a:	b082      	sub	sp, #8
 801989c:	4604      	mov	r4, r0
 801989e:	9101      	str	r1, [sp, #4]
 80198a0:	f7ff fb9e 	bl	8018fe0 <rcl_interfaces__msg__ParameterDescriptor__Sequence__fini>
 80198a4:	9901      	ldr	r1, [sp, #4]
 80198a6:	4620      	mov	r0, r4
 80198a8:	b002      	add	sp, #8
 80198aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198ae:	f7ff bb93 	b.w	8018fd8 <rcl_interfaces__msg__ParameterDescriptor__Sequence__init>
 80198b2:	bf00      	nop

080198b4 <rcl_interfaces__srv__DescribeParameters_Response__rosidl_typesupport_introspection_c__get_function__DescribeParameters_Response__descriptors>:
 80198b4:	6800      	ldr	r0, [r0, #0]
 80198b6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80198ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80198be:	4770      	bx	lr

080198c0 <rcl_interfaces__srv__DescribeParameters_Request__rosidl_typesupport_introspection_c__get_function__DescribeParameters_Request__names>:
 80198c0:	6800      	ldr	r0, [r0, #0]
 80198c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80198c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80198ca:	4770      	bx	lr

080198cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request>:
 80198cc:	4b04      	ldr	r3, [pc, #16]	@ (80198e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x14>)
 80198ce:	681a      	ldr	r2, [r3, #0]
 80198d0:	b10a      	cbz	r2, 80198d6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0xa>
 80198d2:	4803      	ldr	r0, [pc, #12]	@ (80198e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x14>)
 80198d4:	4770      	bx	lr
 80198d6:	4a03      	ldr	r2, [pc, #12]	@ (80198e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x18>)
 80198d8:	4801      	ldr	r0, [pc, #4]	@ (80198e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x14>)
 80198da:	6812      	ldr	r2, [r2, #0]
 80198dc:	601a      	str	r2, [r3, #0]
 80198de:	4770      	bx	lr
 80198e0:	20000be4 	.word	0x20000be4
 80198e4:	20000384 	.word	0x20000384

080198e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response>:
 80198e8:	b508      	push	{r3, lr}
 80198ea:	f000 fb4b 	bl	8019f84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>
 80198ee:	4b06      	ldr	r3, [pc, #24]	@ (8019908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response+0x20>)
 80198f0:	4906      	ldr	r1, [pc, #24]	@ (801990c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response+0x24>)
 80198f2:	681a      	ldr	r2, [r3, #0]
 80198f4:	60c8      	str	r0, [r1, #12]
 80198f6:	b10a      	cbz	r2, 80198fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response+0x14>
 80198f8:	4803      	ldr	r0, [pc, #12]	@ (8019908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response+0x20>)
 80198fa:	bd08      	pop	{r3, pc}
 80198fc:	4a04      	ldr	r2, [pc, #16]	@ (8019910 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response+0x28>)
 80198fe:	4802      	ldr	r0, [pc, #8]	@ (8019908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response+0x20>)
 8019900:	6812      	ldr	r2, [r2, #0]
 8019902:	601a      	str	r2, [r3, #0]
 8019904:	bd08      	pop	{r3, pc}
 8019906:	bf00      	nop
 8019908:	20000c2c 	.word	0x20000c2c
 801990c:	20000bf0 	.word	0x20000bf0
 8019910:	20000384 	.word	0x20000384

08019914 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters>:
 8019914:	4b16      	ldr	r3, [pc, #88]	@ (8019970 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x5c>)
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	b510      	push	{r4, lr}
 801991a:	b132      	cbz	r2, 801992a <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x16>
 801991c:	685c      	ldr	r4, [r3, #4]
 801991e:	68a3      	ldr	r3, [r4, #8]
 8019920:	b153      	cbz	r3, 8019938 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x24>
 8019922:	68e3      	ldr	r3, [r4, #12]
 8019924:	b183      	cbz	r3, 8019948 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x34>
 8019926:	4812      	ldr	r0, [pc, #72]	@ (8019970 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x5c>)
 8019928:	bd10      	pop	{r4, pc}
 801992a:	4a12      	ldr	r2, [pc, #72]	@ (8019974 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x60>)
 801992c:	685c      	ldr	r4, [r3, #4]
 801992e:	6812      	ldr	r2, [r2, #0]
 8019930:	601a      	str	r2, [r3, #0]
 8019932:	68a3      	ldr	r3, [r4, #8]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d1f4      	bne.n	8019922 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0xe>
 8019938:	4b0f      	ldr	r3, [pc, #60]	@ (8019978 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x64>)
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	b17a      	cbz	r2, 801995e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x4a>
 801993e:	685b      	ldr	r3, [r3, #4]
 8019940:	60a3      	str	r3, [r4, #8]
 8019942:	68e3      	ldr	r3, [r4, #12]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d1ee      	bne.n	8019926 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x12>
 8019948:	f000 fb1c 	bl	8019f84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>
 801994c:	4b0b      	ldr	r3, [pc, #44]	@ (801997c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x68>)
 801994e:	490c      	ldr	r1, [pc, #48]	@ (8019980 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x6c>)
 8019950:	681a      	ldr	r2, [r3, #0]
 8019952:	60c8      	str	r0, [r1, #12]
 8019954:	b13a      	cbz	r2, 8019966 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x52>
 8019956:	685b      	ldr	r3, [r3, #4]
 8019958:	4805      	ldr	r0, [pc, #20]	@ (8019970 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x5c>)
 801995a:	60e3      	str	r3, [r4, #12]
 801995c:	bd10      	pop	{r4, pc}
 801995e:	4a05      	ldr	r2, [pc, #20]	@ (8019974 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x60>)
 8019960:	6812      	ldr	r2, [r2, #0]
 8019962:	601a      	str	r2, [r3, #0]
 8019964:	e7eb      	b.n	801993e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x2a>
 8019966:	4a03      	ldr	r2, [pc, #12]	@ (8019974 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x60>)
 8019968:	6812      	ldr	r2, [r2, #0]
 801996a:	601a      	str	r2, [r3, #0]
 801996c:	e7f3      	b.n	8019956 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x42>
 801996e:	bf00      	nop
 8019970:	20000c48 	.word	0x20000c48
 8019974:	20000384 	.word	0x20000384
 8019978:	20000be4 	.word	0x20000be4
 801997c:	20000c2c 	.word	0x20000c2c
 8019980:	20000bf0 	.word	0x20000bf0

08019984 <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__size_function__GetParameterTypes_Request__names>:
 8019984:	6840      	ldr	r0, [r0, #4]
 8019986:	4770      	bx	lr

08019988 <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__get_const_function__GetParameterTypes_Request__names>:
 8019988:	6800      	ldr	r0, [r0, #0]
 801998a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801998e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019992:	4770      	bx	lr

08019994 <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__fetch_function__GetParameterTypes_Request__names>:
 8019994:	6803      	ldr	r3, [r0, #0]
 8019996:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801999a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801999e:	4613      	mov	r3, r2
 80199a0:	c907      	ldmia	r1, {r0, r1, r2}
 80199a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80199a6:	4770      	bx	lr

080199a8 <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__assign_function__GetParameterTypes_Request__names>:
 80199a8:	4603      	mov	r3, r0
 80199aa:	468c      	mov	ip, r1
 80199ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80199b4:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 80199b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80199bc:	4770      	bx	lr
 80199be:	bf00      	nop

080199c0 <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__size_function__GetParameterTypes_Response__types>:
 80199c0:	6840      	ldr	r0, [r0, #4]
 80199c2:	4770      	bx	lr

080199c4 <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__get_const_function__GetParameterTypes_Response__types>:
 80199c4:	6800      	ldr	r0, [r0, #0]
 80199c6:	4408      	add	r0, r1
 80199c8:	4770      	bx	lr
 80199ca:	bf00      	nop

080199cc <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__fetch_function__GetParameterTypes_Response__types>:
 80199cc:	6803      	ldr	r3, [r0, #0]
 80199ce:	5c5b      	ldrb	r3, [r3, r1]
 80199d0:	7013      	strb	r3, [r2, #0]
 80199d2:	4770      	bx	lr

080199d4 <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__assign_function__GetParameterTypes_Response__types>:
 80199d4:	6803      	ldr	r3, [r0, #0]
 80199d6:	7812      	ldrb	r2, [r2, #0]
 80199d8:	545a      	strb	r2, [r3, r1]
 80199da:	4770      	bx	lr

080199dc <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__GetParameterTypes_Request_init_function>:
 80199dc:	f7ff b820 	b.w	8018a20 <rcl_interfaces__srv__GetParameterTypes_Request__init>

080199e0 <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__GetParameterTypes_Request_fini_function>:
 80199e0:	f7ff b830 	b.w	8018a44 <rcl_interfaces__srv__GetParameterTypes_Request__fini>

080199e4 <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__resize_function__GetParameterTypes_Request__names>:
 80199e4:	b510      	push	{r4, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	4604      	mov	r4, r0
 80199ea:	9101      	str	r1, [sp, #4]
 80199ec:	f7f5 fed6 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 80199f0:	9901      	ldr	r1, [sp, #4]
 80199f2:	4620      	mov	r0, r4
 80199f4:	b002      	add	sp, #8
 80199f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199fa:	f7f5 be87 	b.w	800f70c <rosidl_runtime_c__String__Sequence__init>
 80199fe:	bf00      	nop

08019a00 <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__GetParameterTypes_Response_init_function>:
 8019a00:	f7ff b824 	b.w	8018a4c <rcl_interfaces__srv__GetParameterTypes_Response__init>

08019a04 <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__GetParameterTypes_Response_fini_function>:
 8019a04:	f7ff b834 	b.w	8018a70 <rcl_interfaces__srv__GetParameterTypes_Response__fini>

08019a08 <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__resize_function__GetParameterTypes_Response__types>:
 8019a08:	b510      	push	{r4, lr}
 8019a0a:	b082      	sub	sp, #8
 8019a0c:	4604      	mov	r4, r0
 8019a0e:	9101      	str	r1, [sp, #4]
 8019a10:	f7f5 fd80 	bl	800f514 <rosidl_runtime_c__uint8__Sequence__fini>
 8019a14:	9901      	ldr	r1, [sp, #4]
 8019a16:	4620      	mov	r0, r4
 8019a18:	b002      	add	sp, #8
 8019a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a1e:	f7f5 bd61 	b.w	800f4e4 <rosidl_runtime_c__uint8__Sequence__init>
 8019a22:	bf00      	nop

08019a24 <rcl_interfaces__srv__GetParameterTypes_Response__rosidl_typesupport_introspection_c__get_function__GetParameterTypes_Response__types>:
 8019a24:	6800      	ldr	r0, [r0, #0]
 8019a26:	4408      	add	r0, r1
 8019a28:	4770      	bx	lr
 8019a2a:	bf00      	nop

08019a2c <rcl_interfaces__srv__GetParameterTypes_Request__rosidl_typesupport_introspection_c__get_function__GetParameterTypes_Request__names>:
 8019a2c:	6800      	ldr	r0, [r0, #0]
 8019a2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019a36:	4770      	bx	lr

08019a38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request>:
 8019a38:	4b04      	ldr	r3, [pc, #16]	@ (8019a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x14>)
 8019a3a:	681a      	ldr	r2, [r3, #0]
 8019a3c:	b10a      	cbz	r2, 8019a42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0xa>
 8019a3e:	4803      	ldr	r0, [pc, #12]	@ (8019a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x14>)
 8019a40:	4770      	bx	lr
 8019a42:	4a03      	ldr	r2, [pc, #12]	@ (8019a50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x18>)
 8019a44:	4801      	ldr	r0, [pc, #4]	@ (8019a4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x14>)
 8019a46:	6812      	ldr	r2, [r2, #0]
 8019a48:	601a      	str	r2, [r3, #0]
 8019a4a:	4770      	bx	lr
 8019a4c:	20000c90 	.word	0x20000c90
 8019a50:	20000384 	.word	0x20000384

08019a54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response>:
 8019a54:	4b04      	ldr	r3, [pc, #16]	@ (8019a68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response+0x14>)
 8019a56:	681a      	ldr	r2, [r3, #0]
 8019a58:	b10a      	cbz	r2, 8019a5e <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response+0xa>
 8019a5a:	4803      	ldr	r0, [pc, #12]	@ (8019a68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response+0x14>)
 8019a5c:	4770      	bx	lr
 8019a5e:	4a03      	ldr	r2, [pc, #12]	@ (8019a6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response+0x18>)
 8019a60:	4801      	ldr	r0, [pc, #4]	@ (8019a68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response+0x14>)
 8019a62:	6812      	ldr	r2, [r2, #0]
 8019a64:	601a      	str	r2, [r3, #0]
 8019a66:	4770      	bx	lr
 8019a68:	20000cd8 	.word	0x20000cd8
 8019a6c:	20000384 	.word	0x20000384

08019a70 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes>:
 8019a70:	4b13      	ldr	r3, [pc, #76]	@ (8019ac0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x50>)
 8019a72:	681a      	ldr	r2, [r3, #0]
 8019a74:	b132      	cbz	r2, 8019a84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x14>
 8019a76:	685b      	ldr	r3, [r3, #4]
 8019a78:	689a      	ldr	r2, [r3, #8]
 8019a7a:	b152      	cbz	r2, 8019a92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x22>
 8019a7c:	68da      	ldr	r2, [r3, #12]
 8019a7e:	b182      	cbz	r2, 8019aa2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x32>
 8019a80:	480f      	ldr	r0, [pc, #60]	@ (8019ac0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x50>)
 8019a82:	4770      	bx	lr
 8019a84:	4a0f      	ldr	r2, [pc, #60]	@ (8019ac4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x54>)
 8019a86:	6812      	ldr	r2, [r2, #0]
 8019a88:	601a      	str	r2, [r3, #0]
 8019a8a:	685b      	ldr	r3, [r3, #4]
 8019a8c:	689a      	ldr	r2, [r3, #8]
 8019a8e:	2a00      	cmp	r2, #0
 8019a90:	d1f4      	bne.n	8019a7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0xc>
 8019a92:	4a0d      	ldr	r2, [pc, #52]	@ (8019ac8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x58>)
 8019a94:	6811      	ldr	r1, [r2, #0]
 8019a96:	b179      	cbz	r1, 8019ab8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x48>
 8019a98:	6852      	ldr	r2, [r2, #4]
 8019a9a:	609a      	str	r2, [r3, #8]
 8019a9c:	68da      	ldr	r2, [r3, #12]
 8019a9e:	2a00      	cmp	r2, #0
 8019aa0:	d1ee      	bne.n	8019a80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x10>
 8019aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8019acc <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x5c>)
 8019aa4:	6811      	ldr	r1, [r2, #0]
 8019aa6:	b119      	cbz	r1, 8019ab0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x40>
 8019aa8:	6852      	ldr	r2, [r2, #4]
 8019aaa:	4805      	ldr	r0, [pc, #20]	@ (8019ac0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x50>)
 8019aac:	60da      	str	r2, [r3, #12]
 8019aae:	4770      	bx	lr
 8019ab0:	4904      	ldr	r1, [pc, #16]	@ (8019ac4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x54>)
 8019ab2:	6809      	ldr	r1, [r1, #0]
 8019ab4:	6011      	str	r1, [r2, #0]
 8019ab6:	e7f7      	b.n	8019aa8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x38>
 8019ab8:	4902      	ldr	r1, [pc, #8]	@ (8019ac4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x54>)
 8019aba:	6809      	ldr	r1, [r1, #0]
 8019abc:	6011      	str	r1, [r2, #0]
 8019abe:	e7eb      	b.n	8019a98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x28>
 8019ac0:	20000cf4 	.word	0x20000cf4
 8019ac4:	20000384 	.word	0x20000384
 8019ac8:	20000c90 	.word	0x20000c90
 8019acc:	20000cd8 	.word	0x20000cd8

08019ad0 <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__size_function__GetParameters_Request__names>:
 8019ad0:	6840      	ldr	r0, [r0, #4]
 8019ad2:	4770      	bx	lr

08019ad4 <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__get_const_function__GetParameters_Request__names>:
 8019ad4:	6800      	ldr	r0, [r0, #0]
 8019ad6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019ada:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019ade:	4770      	bx	lr

08019ae0 <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__fetch_function__GetParameters_Request__names>:
 8019ae0:	6803      	ldr	r3, [r0, #0]
 8019ae2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019ae6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019aea:	4613      	mov	r3, r2
 8019aec:	c907      	ldmia	r1, {r0, r1, r2}
 8019aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019af2:	4770      	bx	lr

08019af4 <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__assign_function__GetParameters_Request__names>:
 8019af4:	4603      	mov	r3, r0
 8019af6:	468c      	mov	ip, r1
 8019af8:	ca07      	ldmia	r2, {r0, r1, r2}
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019b00:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8019b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019b08:	4770      	bx	lr
 8019b0a:	bf00      	nop

08019b0c <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__size_function__GetParameters_Response__values>:
 8019b0c:	6840      	ldr	r0, [r0, #4]
 8019b0e:	4770      	bx	lr

08019b10 <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__get_const_function__GetParameters_Response__values>:
 8019b10:	6800      	ldr	r0, [r0, #0]
 8019b12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019b16:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8019b1a:	4770      	bx	lr

08019b1c <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__fetch_function__GetParameters_Response__values>:
 8019b1c:	b508      	push	{r3, lr}
 8019b1e:	6803      	ldr	r3, [r0, #0]
 8019b20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019b24:	4610      	mov	r0, r2
 8019b26:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8019b2a:	2260      	movs	r2, #96	@ 0x60
 8019b2c:	f007 ff81 	bl	8021a32 <memcpy>
 8019b30:	bd08      	pop	{r3, pc}
 8019b32:	bf00      	nop

08019b34 <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__assign_function__GetParameters_Response__values>:
 8019b34:	b508      	push	{r3, lr}
 8019b36:	6800      	ldr	r0, [r0, #0]
 8019b38:	460b      	mov	r3, r1
 8019b3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b3e:	4611      	mov	r1, r2
 8019b40:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8019b44:	2260      	movs	r2, #96	@ 0x60
 8019b46:	f007 ff74 	bl	8021a32 <memcpy>
 8019b4a:	bd08      	pop	{r3, pc}

08019b4c <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__GetParameters_Request_init_function>:
 8019b4c:	f7fe bf94 	b.w	8018a78 <rcl_interfaces__srv__GetParameters_Request__init>

08019b50 <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__GetParameters_Request_fini_function>:
 8019b50:	f7fe bfa4 	b.w	8018a9c <rcl_interfaces__srv__GetParameters_Request__fini>

08019b54 <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__resize_function__GetParameters_Request__names>:
 8019b54:	b510      	push	{r4, lr}
 8019b56:	b082      	sub	sp, #8
 8019b58:	4604      	mov	r4, r0
 8019b5a:	9101      	str	r1, [sp, #4]
 8019b5c:	f7f5 fe1e 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019b60:	9901      	ldr	r1, [sp, #4]
 8019b62:	4620      	mov	r0, r4
 8019b64:	b002      	add	sp, #8
 8019b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b6a:	f7f5 bdcf 	b.w	800f70c <rosidl_runtime_c__String__Sequence__init>
 8019b6e:	bf00      	nop

08019b70 <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__GetParameters_Response_init_function>:
 8019b70:	f7fe bf98 	b.w	8018aa4 <rcl_interfaces__srv__GetParameters_Response__init>

08019b74 <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__GetParameters_Response_fini_function>:
 8019b74:	f7fe bfa8 	b.w	8018ac8 <rcl_interfaces__srv__GetParameters_Response__fini>

08019b78 <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__resize_function__GetParameters_Response__values>:
 8019b78:	b510      	push	{r4, lr}
 8019b7a:	b082      	sub	sp, #8
 8019b7c:	4604      	mov	r4, r0
 8019b7e:	9101      	str	r1, [sp, #4]
 8019b80:	f7ff fc8c 	bl	801949c <rcl_interfaces__msg__ParameterValue__Sequence__fini>
 8019b84:	9901      	ldr	r1, [sp, #4]
 8019b86:	4620      	mov	r0, r4
 8019b88:	b002      	add	sp, #8
 8019b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b8e:	f7ff bc81 	b.w	8019494 <rcl_interfaces__msg__ParameterValue__Sequence__init>
 8019b92:	bf00      	nop

08019b94 <rcl_interfaces__srv__GetParameters_Response__rosidl_typesupport_introspection_c__get_function__GetParameters_Response__values>:
 8019b94:	6800      	ldr	r0, [r0, #0]
 8019b96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019b9a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8019b9e:	4770      	bx	lr

08019ba0 <rcl_interfaces__srv__GetParameters_Request__rosidl_typesupport_introspection_c__get_function__GetParameters_Request__names>:
 8019ba0:	6800      	ldr	r0, [r0, #0]
 8019ba2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019ba6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019baa:	4770      	bx	lr

08019bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request>:
 8019bac:	4b04      	ldr	r3, [pc, #16]	@ (8019bc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x14>)
 8019bae:	681a      	ldr	r2, [r3, #0]
 8019bb0:	b10a      	cbz	r2, 8019bb6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0xa>
 8019bb2:	4803      	ldr	r0, [pc, #12]	@ (8019bc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x14>)
 8019bb4:	4770      	bx	lr
 8019bb6:	4a03      	ldr	r2, [pc, #12]	@ (8019bc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x18>)
 8019bb8:	4801      	ldr	r0, [pc, #4]	@ (8019bc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x14>)
 8019bba:	6812      	ldr	r2, [r2, #0]
 8019bbc:	601a      	str	r2, [r3, #0]
 8019bbe:	4770      	bx	lr
 8019bc0:	20000d3c 	.word	0x20000d3c
 8019bc4:	20000384 	.word	0x20000384

08019bc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response>:
 8019bc8:	b508      	push	{r3, lr}
 8019bca:	f000 fb7d 	bl	801a2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 8019bce:	4b06      	ldr	r3, [pc, #24]	@ (8019be8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response+0x20>)
 8019bd0:	4906      	ldr	r1, [pc, #24]	@ (8019bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response+0x24>)
 8019bd2:	681a      	ldr	r2, [r3, #0]
 8019bd4:	60c8      	str	r0, [r1, #12]
 8019bd6:	b10a      	cbz	r2, 8019bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response+0x14>
 8019bd8:	4803      	ldr	r0, [pc, #12]	@ (8019be8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response+0x20>)
 8019bda:	bd08      	pop	{r3, pc}
 8019bdc:	4a04      	ldr	r2, [pc, #16]	@ (8019bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response+0x28>)
 8019bde:	4802      	ldr	r0, [pc, #8]	@ (8019be8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response+0x20>)
 8019be0:	6812      	ldr	r2, [r2, #0]
 8019be2:	601a      	str	r2, [r3, #0]
 8019be4:	bd08      	pop	{r3, pc}
 8019be6:	bf00      	nop
 8019be8:	20000d84 	.word	0x20000d84
 8019bec:	20000d48 	.word	0x20000d48
 8019bf0:	20000384 	.word	0x20000384

08019bf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters>:
 8019bf4:	4b16      	ldr	r3, [pc, #88]	@ (8019c50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x5c>)
 8019bf6:	681a      	ldr	r2, [r3, #0]
 8019bf8:	b510      	push	{r4, lr}
 8019bfa:	b132      	cbz	r2, 8019c0a <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x16>
 8019bfc:	685c      	ldr	r4, [r3, #4]
 8019bfe:	68a3      	ldr	r3, [r4, #8]
 8019c00:	b153      	cbz	r3, 8019c18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x24>
 8019c02:	68e3      	ldr	r3, [r4, #12]
 8019c04:	b183      	cbz	r3, 8019c28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x34>
 8019c06:	4812      	ldr	r0, [pc, #72]	@ (8019c50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x5c>)
 8019c08:	bd10      	pop	{r4, pc}
 8019c0a:	4a12      	ldr	r2, [pc, #72]	@ (8019c54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x60>)
 8019c0c:	685c      	ldr	r4, [r3, #4]
 8019c0e:	6812      	ldr	r2, [r2, #0]
 8019c10:	601a      	str	r2, [r3, #0]
 8019c12:	68a3      	ldr	r3, [r4, #8]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d1f4      	bne.n	8019c02 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0xe>
 8019c18:	4b0f      	ldr	r3, [pc, #60]	@ (8019c58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x64>)
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	b17a      	cbz	r2, 8019c3e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x4a>
 8019c1e:	685b      	ldr	r3, [r3, #4]
 8019c20:	60a3      	str	r3, [r4, #8]
 8019c22:	68e3      	ldr	r3, [r4, #12]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d1ee      	bne.n	8019c06 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x12>
 8019c28:	f000 fb4e 	bl	801a2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 8019c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8019c5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x68>)
 8019c2e:	490c      	ldr	r1, [pc, #48]	@ (8019c60 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x6c>)
 8019c30:	681a      	ldr	r2, [r3, #0]
 8019c32:	60c8      	str	r0, [r1, #12]
 8019c34:	b13a      	cbz	r2, 8019c46 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x52>
 8019c36:	685b      	ldr	r3, [r3, #4]
 8019c38:	4805      	ldr	r0, [pc, #20]	@ (8019c50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x5c>)
 8019c3a:	60e3      	str	r3, [r4, #12]
 8019c3c:	bd10      	pop	{r4, pc}
 8019c3e:	4a05      	ldr	r2, [pc, #20]	@ (8019c54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x60>)
 8019c40:	6812      	ldr	r2, [r2, #0]
 8019c42:	601a      	str	r2, [r3, #0]
 8019c44:	e7eb      	b.n	8019c1e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x2a>
 8019c46:	4a03      	ldr	r2, [pc, #12]	@ (8019c54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x60>)
 8019c48:	6812      	ldr	r2, [r2, #0]
 8019c4a:	601a      	str	r2, [r3, #0]
 8019c4c:	e7f3      	b.n	8019c36 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x42>
 8019c4e:	bf00      	nop
 8019c50:	20000da0 	.word	0x20000da0
 8019c54:	20000384 	.word	0x20000384
 8019c58:	20000d3c 	.word	0x20000d3c
 8019c5c:	20000d84 	.word	0x20000d84
 8019c60:	20000d48 	.word	0x20000d48

08019c64 <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__size_function__ListParameters_Request__prefixes>:
 8019c64:	6840      	ldr	r0, [r0, #4]
 8019c66:	4770      	bx	lr

08019c68 <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__get_const_function__ListParameters_Request__prefixes>:
 8019c68:	6800      	ldr	r0, [r0, #0]
 8019c6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019c6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019c72:	4770      	bx	lr

08019c74 <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__fetch_function__ListParameters_Request__prefixes>:
 8019c74:	6803      	ldr	r3, [r0, #0]
 8019c76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019c7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019c7e:	4613      	mov	r3, r2
 8019c80:	c907      	ldmia	r1, {r0, r1, r2}
 8019c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019c86:	4770      	bx	lr

08019c88 <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__assign_function__ListParameters_Request__prefixes>:
 8019c88:	4603      	mov	r3, r0
 8019c8a:	468c      	mov	ip, r1
 8019c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019c94:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8019c98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019c9c:	4770      	bx	lr
 8019c9e:	bf00      	nop

08019ca0 <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__ListParameters_Request_init_function>:
 8019ca0:	f7fe bf48 	b.w	8018b34 <rcl_interfaces__srv__ListParameters_Request__init>

08019ca4 <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__ListParameters_Request_fini_function>:
 8019ca4:	f7fe bf58 	b.w	8018b58 <rcl_interfaces__srv__ListParameters_Request__fini>

08019ca8 <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__resize_function__ListParameters_Request__prefixes>:
 8019ca8:	b510      	push	{r4, lr}
 8019caa:	b082      	sub	sp, #8
 8019cac:	4604      	mov	r4, r0
 8019cae:	9101      	str	r1, [sp, #4]
 8019cb0:	f7f5 fd74 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019cb4:	9901      	ldr	r1, [sp, #4]
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	b002      	add	sp, #8
 8019cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cbe:	f7f5 bd25 	b.w	800f70c <rosidl_runtime_c__String__Sequence__init>
 8019cc2:	bf00      	nop

08019cc4 <rcl_interfaces__srv__ListParameters_Response__rosidl_typesupport_introspection_c__ListParameters_Response_init_function>:
 8019cc4:	f7fe bf4c 	b.w	8018b60 <rcl_interfaces__srv__ListParameters_Response__init>

08019cc8 <rcl_interfaces__srv__ListParameters_Response__rosidl_typesupport_introspection_c__ListParameters_Response_fini_function>:
 8019cc8:	f7fe bf5c 	b.w	8018b84 <rcl_interfaces__srv__ListParameters_Response__fini>

08019ccc <rcl_interfaces__srv__ListParameters_Request__rosidl_typesupport_introspection_c__get_function__ListParameters_Request__prefixes>:
 8019ccc:	6800      	ldr	r0, [r0, #0]
 8019cce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019cd2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019cd6:	4770      	bx	lr

08019cd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request>:
 8019cd8:	4b04      	ldr	r3, [pc, #16]	@ (8019cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x14>)
 8019cda:	681a      	ldr	r2, [r3, #0]
 8019cdc:	b10a      	cbz	r2, 8019ce2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0xa>
 8019cde:	4803      	ldr	r0, [pc, #12]	@ (8019cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x14>)
 8019ce0:	4770      	bx	lr
 8019ce2:	4a03      	ldr	r2, [pc, #12]	@ (8019cf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x18>)
 8019ce4:	4801      	ldr	r0, [pc, #4]	@ (8019cec <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x14>)
 8019ce6:	6812      	ldr	r2, [r2, #0]
 8019ce8:	601a      	str	r2, [r3, #0]
 8019cea:	4770      	bx	lr
 8019cec:	20000e24 	.word	0x20000e24
 8019cf0:	20000384 	.word	0x20000384

08019cf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response>:
 8019cf4:	b508      	push	{r3, lr}
 8019cf6:	f000 f8b3 	bl	8019e60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult>
 8019cfa:	4b06      	ldr	r3, [pc, #24]	@ (8019d14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response+0x20>)
 8019cfc:	4906      	ldr	r1, [pc, #24]	@ (8019d18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response+0x24>)
 8019cfe:	681a      	ldr	r2, [r3, #0]
 8019d00:	60c8      	str	r0, [r1, #12]
 8019d02:	b10a      	cbz	r2, 8019d08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response+0x14>
 8019d04:	4803      	ldr	r0, [pc, #12]	@ (8019d14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response+0x20>)
 8019d06:	bd08      	pop	{r3, pc}
 8019d08:	4a04      	ldr	r2, [pc, #16]	@ (8019d1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response+0x28>)
 8019d0a:	4802      	ldr	r0, [pc, #8]	@ (8019d14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response+0x20>)
 8019d0c:	6812      	ldr	r2, [r2, #0]
 8019d0e:	601a      	str	r2, [r3, #0]
 8019d10:	bd08      	pop	{r3, pc}
 8019d12:	bf00      	nop
 8019d14:	20000e6c 	.word	0x20000e6c
 8019d18:	20000e30 	.word	0x20000e30
 8019d1c:	20000384 	.word	0x20000384

08019d20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters>:
 8019d20:	4b16      	ldr	r3, [pc, #88]	@ (8019d7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x5c>)
 8019d22:	681a      	ldr	r2, [r3, #0]
 8019d24:	b510      	push	{r4, lr}
 8019d26:	b132      	cbz	r2, 8019d36 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x16>
 8019d28:	685c      	ldr	r4, [r3, #4]
 8019d2a:	68a3      	ldr	r3, [r4, #8]
 8019d2c:	b153      	cbz	r3, 8019d44 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x24>
 8019d2e:	68e3      	ldr	r3, [r4, #12]
 8019d30:	b183      	cbz	r3, 8019d54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x34>
 8019d32:	4812      	ldr	r0, [pc, #72]	@ (8019d7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x5c>)
 8019d34:	bd10      	pop	{r4, pc}
 8019d36:	4a12      	ldr	r2, [pc, #72]	@ (8019d80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x60>)
 8019d38:	685c      	ldr	r4, [r3, #4]
 8019d3a:	6812      	ldr	r2, [r2, #0]
 8019d3c:	601a      	str	r2, [r3, #0]
 8019d3e:	68a3      	ldr	r3, [r4, #8]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d1f4      	bne.n	8019d2e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0xe>
 8019d44:	4b0f      	ldr	r3, [pc, #60]	@ (8019d84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x64>)
 8019d46:	681a      	ldr	r2, [r3, #0]
 8019d48:	b17a      	cbz	r2, 8019d6a <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x4a>
 8019d4a:	685b      	ldr	r3, [r3, #4]
 8019d4c:	60a3      	str	r3, [r4, #8]
 8019d4e:	68e3      	ldr	r3, [r4, #12]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d1ee      	bne.n	8019d32 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x12>
 8019d54:	f000 f884 	bl	8019e60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult>
 8019d58:	4b0b      	ldr	r3, [pc, #44]	@ (8019d88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x68>)
 8019d5a:	490c      	ldr	r1, [pc, #48]	@ (8019d8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x6c>)
 8019d5c:	681a      	ldr	r2, [r3, #0]
 8019d5e:	60c8      	str	r0, [r1, #12]
 8019d60:	b13a      	cbz	r2, 8019d72 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x52>
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	4805      	ldr	r0, [pc, #20]	@ (8019d7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x5c>)
 8019d66:	60e3      	str	r3, [r4, #12]
 8019d68:	bd10      	pop	{r4, pc}
 8019d6a:	4a05      	ldr	r2, [pc, #20]	@ (8019d80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x60>)
 8019d6c:	6812      	ldr	r2, [r2, #0]
 8019d6e:	601a      	str	r2, [r3, #0]
 8019d70:	e7eb      	b.n	8019d4a <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x2a>
 8019d72:	4a03      	ldr	r2, [pc, #12]	@ (8019d80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x60>)
 8019d74:	6812      	ldr	r2, [r2, #0]
 8019d76:	601a      	str	r2, [r3, #0]
 8019d78:	e7f3      	b.n	8019d62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x42>
 8019d7a:	bf00      	nop
 8019d7c:	20000e88 	.word	0x20000e88
 8019d80:	20000384 	.word	0x20000384
 8019d84:	20000e24 	.word	0x20000e24
 8019d88:	20000e6c 	.word	0x20000e6c
 8019d8c:	20000e30 	.word	0x20000e30

08019d90 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__size_function__ListParametersResult__names>:
 8019d90:	6840      	ldr	r0, [r0, #4]
 8019d92:	4770      	bx	lr

08019d94 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__get_const_function__ListParametersResult__names>:
 8019d94:	6800      	ldr	r0, [r0, #0]
 8019d96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019d9a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019d9e:	4770      	bx	lr

08019da0 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__fetch_function__ListParametersResult__names>:
 8019da0:	6803      	ldr	r3, [r0, #0]
 8019da2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019da6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019daa:	4613      	mov	r3, r2
 8019dac:	c907      	ldmia	r1, {r0, r1, r2}
 8019dae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019db2:	4770      	bx	lr

08019db4 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__assign_function__ListParametersResult__names>:
 8019db4:	4603      	mov	r3, r0
 8019db6:	468c      	mov	ip, r1
 8019db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019dc0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8019dc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019dc8:	4770      	bx	lr
 8019dca:	bf00      	nop

08019dcc <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__ListParametersResult_init_function>:
 8019dcc:	f7fe bede 	b.w	8018b8c <rcl_interfaces__msg__ListParametersResult__init>

08019dd0 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__ListParametersResult_fini_function>:
 8019dd0:	f7fe bf02 	b.w	8018bd8 <rcl_interfaces__msg__ListParametersResult__fini>

08019dd4 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__resize_function__ListParametersResult__names>:
 8019dd4:	b510      	push	{r4, lr}
 8019dd6:	b082      	sub	sp, #8
 8019dd8:	4604      	mov	r4, r0
 8019dda:	9101      	str	r1, [sp, #4]
 8019ddc:	f7f5 fcde 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019de0:	9901      	ldr	r1, [sp, #4]
 8019de2:	4620      	mov	r0, r4
 8019de4:	b002      	add	sp, #8
 8019de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dea:	f7f5 bc8f 	b.w	800f70c <rosidl_runtime_c__String__Sequence__init>
 8019dee:	bf00      	nop

08019df0 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__size_function__ListParametersResult__prefixes>:
 8019df0:	6840      	ldr	r0, [r0, #4]
 8019df2:	4770      	bx	lr

08019df4 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__get_const_function__ListParametersResult__prefixes>:
 8019df4:	6800      	ldr	r0, [r0, #0]
 8019df6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019dfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019dfe:	4770      	bx	lr

08019e00 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__get_function__ListParametersResult__prefixes>:
 8019e00:	6800      	ldr	r0, [r0, #0]
 8019e02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019e0a:	4770      	bx	lr

08019e0c <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__get_function__ListParametersResult__names>:
 8019e0c:	6800      	ldr	r0, [r0, #0]
 8019e0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e12:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8019e16:	4770      	bx	lr

08019e18 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__resize_function__ListParametersResult__prefixes>:
 8019e18:	b510      	push	{r4, lr}
 8019e1a:	b082      	sub	sp, #8
 8019e1c:	4604      	mov	r4, r0
 8019e1e:	9101      	str	r1, [sp, #4]
 8019e20:	f7f5 fcbc 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 8019e24:	9901      	ldr	r1, [sp, #4]
 8019e26:	4620      	mov	r0, r4
 8019e28:	b002      	add	sp, #8
 8019e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e2e:	f7f5 bc6d 	b.w	800f70c <rosidl_runtime_c__String__Sequence__init>
 8019e32:	bf00      	nop

08019e34 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__fetch_function__ListParametersResult__prefixes>:
 8019e34:	6803      	ldr	r3, [r0, #0]
 8019e36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e3a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019e3e:	4613      	mov	r3, r2
 8019e40:	c907      	ldmia	r1, {r0, r1, r2}
 8019e42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019e46:	4770      	bx	lr

08019e48 <rcl_interfaces__msg__ListParametersResult__rosidl_typesupport_introspection_c__assign_function__ListParametersResult__prefixes>:
 8019e48:	4603      	mov	r3, r0
 8019e4a:	468c      	mov	ip, r1
 8019e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019e54:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8019e58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019e5c:	4770      	bx	lr
 8019e5e:	bf00      	nop

08019e60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult>:
 8019e60:	4b04      	ldr	r3, [pc, #16]	@ (8019e74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult+0x14>)
 8019e62:	681a      	ldr	r2, [r3, #0]
 8019e64:	b10a      	cbz	r2, 8019e6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult+0xa>
 8019e66:	4803      	ldr	r0, [pc, #12]	@ (8019e74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult+0x14>)
 8019e68:	4770      	bx	lr
 8019e6a:	4a03      	ldr	r2, [pc, #12]	@ (8019e78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult+0x18>)
 8019e6c:	4801      	ldr	r0, [pc, #4]	@ (8019e74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult+0x14>)
 8019e6e:	6812      	ldr	r2, [r2, #0]
 8019e70:	601a      	str	r2, [r3, #0]
 8019e72:	4770      	bx	lr
 8019e74:	20000f0c 	.word	0x20000f0c
 8019e78:	20000384 	.word	0x20000384

08019e7c <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__size_function__ParameterDescriptor__floating_point_range>:
 8019e7c:	6840      	ldr	r0, [r0, #4]
 8019e7e:	4770      	bx	lr

08019e80 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__get_const_function__ParameterDescriptor__floating_point_range>:
 8019e80:	6800      	ldr	r0, [r0, #0]
 8019e82:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e86:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8019e8a:	4770      	bx	lr

08019e8c <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__fetch_function__ParameterDescriptor__floating_point_range>:
 8019e8c:	6803      	ldr	r3, [r0, #0]
 8019e8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019e92:	b500      	push	{lr}
 8019e94:	eb03 0ec1 	add.w	lr, r3, r1, lsl #3
 8019e98:	4694      	mov	ip, r2
 8019e9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ea2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019ea6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8019eae:	bf00      	nop

08019eb0 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__assign_function__ParameterDescriptor__floating_point_range>:
 8019eb0:	6803      	ldr	r3, [r0, #0]
 8019eb2:	b500      	push	{lr}
 8019eb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019eb8:	4696      	mov	lr, r2
 8019eba:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
 8019ebe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019ec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ec6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019eca:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ed2:	bf00      	nop

08019ed4 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__size_function__ParameterDescriptor__integer_range>:
 8019ed4:	6840      	ldr	r0, [r0, #4]
 8019ed6:	4770      	bx	lr

08019ed8 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__get_const_function__ParameterDescriptor__integer_range>:
 8019ed8:	6800      	ldr	r0, [r0, #0]
 8019eda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019ede:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8019ee2:	4770      	bx	lr

08019ee4 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__fetch_function__ParameterDescriptor__integer_range>:
 8019ee4:	6803      	ldr	r3, [r0, #0]
 8019ee6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019eea:	b500      	push	{lr}
 8019eec:	eb03 0ec1 	add.w	lr, r3, r1, lsl #3
 8019ef0:	4694      	mov	ip, r2
 8019ef2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019ef6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019efa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019efe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f06:	bf00      	nop

08019f08 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__assign_function__ParameterDescriptor__integer_range>:
 8019f08:	6803      	ldr	r3, [r0, #0]
 8019f0a:	b500      	push	{lr}
 8019f0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019f10:	4696      	mov	lr, r2
 8019f12:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
 8019f16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019f1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f1e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019f22:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f2a:	bf00      	nop

08019f2c <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__ParameterDescriptor_init_function>:
 8019f2c:	f7fe bfc8 	b.w	8018ec0 <rcl_interfaces__msg__ParameterDescriptor__init>

08019f30 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__ParameterDescriptor_fini_function>:
 8019f30:	f7ff b83a 	b.w	8018fa8 <rcl_interfaces__msg__ParameterDescriptor__fini>

08019f34 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__resize_function__ParameterDescriptor__floating_point_range>:
 8019f34:	b510      	push	{r4, lr}
 8019f36:	b082      	sub	sp, #8
 8019f38:	4604      	mov	r4, r0
 8019f3a:	9101      	str	r1, [sp, #4]
 8019f3c:	f7fe fd5c 	bl	80189f8 <rcl_interfaces__msg__FloatingPointRange__Sequence__fini>
 8019f40:	9901      	ldr	r1, [sp, #4]
 8019f42:	4620      	mov	r0, r4
 8019f44:	b002      	add	sp, #8
 8019f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f4a:	f7fe bd3d 	b.w	80189c8 <rcl_interfaces__msg__FloatingPointRange__Sequence__init>
 8019f4e:	bf00      	nop

08019f50 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__resize_function__ParameterDescriptor__integer_range>:
 8019f50:	b510      	push	{r4, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	4604      	mov	r4, r0
 8019f56:	9101      	str	r1, [sp, #4]
 8019f58:	f7fe fdd8 	bl	8018b0c <rcl_interfaces__msg__IntegerRange__Sequence__fini>
 8019f5c:	9901      	ldr	r1, [sp, #4]
 8019f5e:	4620      	mov	r0, r4
 8019f60:	b002      	add	sp, #8
 8019f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f66:	f7fe bdb9 	b.w	8018adc <rcl_interfaces__msg__IntegerRange__Sequence__init>
 8019f6a:	bf00      	nop

08019f6c <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__get_function__ParameterDescriptor__integer_range>:
 8019f6c:	6800      	ldr	r0, [r0, #0]
 8019f6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019f72:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8019f76:	4770      	bx	lr

08019f78 <rcl_interfaces__msg__ParameterDescriptor__rosidl_typesupport_introspection_c__get_function__ParameterDescriptor__floating_point_range>:
 8019f78:	6800      	ldr	r0, [r0, #0]
 8019f7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019f7e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8019f82:	4770      	bx	lr

08019f84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>:
 8019f84:	b510      	push	{r4, lr}
 8019f86:	f006 f8e3 	bl	8020150 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange>
 8019f8a:	4c08      	ldr	r4, [pc, #32]	@ (8019fac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor+0x28>)
 8019f8c:	f8c4 0174 	str.w	r0, [r4, #372]	@ 0x174
 8019f90:	f006 f8f0 	bl	8020174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange>
 8019f94:	4b06      	ldr	r3, [pc, #24]	@ (8019fb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor+0x2c>)
 8019f96:	f8c4 01b0 	str.w	r0, [r4, #432]	@ 0x1b0
 8019f9a:	681a      	ldr	r2, [r3, #0]
 8019f9c:	b10a      	cbz	r2, 8019fa2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor+0x1e>
 8019f9e:	4804      	ldr	r0, [pc, #16]	@ (8019fb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor+0x2c>)
 8019fa0:	bd10      	pop	{r4, pc}
 8019fa2:	4a04      	ldr	r2, [pc, #16]	@ (8019fb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor+0x30>)
 8019fa4:	4802      	ldr	r0, [pc, #8]	@ (8019fb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor+0x2c>)
 8019fa6:	6812      	ldr	r2, [r2, #0]
 8019fa8:	601a      	str	r2, [r3, #0]
 8019faa:	bd10      	pop	{r4, pc}
 8019fac:	20000f18 	.word	0x20000f18
 8019fb0:	200010f8 	.word	0x200010f8
 8019fb4:	20000384 	.word	0x20000384

08019fb8 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__size_function__ParameterEvent__new_parameters>:
 8019fb8:	6840      	ldr	r0, [r0, #4]
 8019fba:	4770      	bx	lr

08019fbc <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__get_const_function__ParameterEvent__new_parameters>:
 8019fbc:	6800      	ldr	r0, [r0, #0]
 8019fbe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8019fc2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8019fc6:	4770      	bx	lr

08019fc8 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__fetch_function__ParameterEvent__new_parameters>:
 8019fc8:	b508      	push	{r3, lr}
 8019fca:	6803      	ldr	r3, [r0, #0]
 8019fcc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8019fd0:	4610      	mov	r0, r2
 8019fd2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8019fd6:	2270      	movs	r2, #112	@ 0x70
 8019fd8:	f007 fd2b 	bl	8021a32 <memcpy>
 8019fdc:	bd08      	pop	{r3, pc}
 8019fde:	bf00      	nop

08019fe0 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__assign_function__ParameterEvent__new_parameters>:
 8019fe0:	b508      	push	{r3, lr}
 8019fe2:	6800      	ldr	r0, [r0, #0]
 8019fe4:	460b      	mov	r3, r1
 8019fe6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019fea:	4611      	mov	r1, r2
 8019fec:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8019ff0:	2270      	movs	r2, #112	@ 0x70
 8019ff2:	f007 fd1e 	bl	8021a32 <memcpy>
 8019ff6:	bd08      	pop	{r3, pc}

08019ff8 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__ParameterEvent_init_function>:
 8019ff8:	f7ff b82c 	b.w	8019054 <rcl_interfaces__msg__ParameterEvent__init>

08019ffc <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__ParameterEvent_fini_function>:
 8019ffc:	f7ff b89c 	b.w	8019138 <rcl_interfaces__msg__ParameterEvent__fini>

0801a000 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__resize_function__ParameterEvent__new_parameters>:
 801a000:	b510      	push	{r4, lr}
 801a002:	b082      	sub	sp, #8
 801a004:	4604      	mov	r4, r0
 801a006:	9101      	str	r1, [sp, #4]
 801a008:	f7fe fe76 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 801a00c:	9901      	ldr	r1, [sp, #4]
 801a00e:	4620      	mov	r0, r4
 801a010:	b002      	add	sp, #8
 801a012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a016:	f7fe be6b 	b.w	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 801a01a:	bf00      	nop

0801a01c <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__size_function__ParameterEvent__deleted_parameters>:
 801a01c:	6840      	ldr	r0, [r0, #4]
 801a01e:	4770      	bx	lr

0801a020 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__size_function__ParameterEvent__changed_parameters>:
 801a020:	6840      	ldr	r0, [r0, #4]
 801a022:	4770      	bx	lr

0801a024 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__get_const_function__ParameterEvent__changed_parameters>:
 801a024:	6800      	ldr	r0, [r0, #0]
 801a026:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a02a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a02e:	4770      	bx	lr

0801a030 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__get_function__ParameterEvent__new_parameters>:
 801a030:	6800      	ldr	r0, [r0, #0]
 801a032:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a036:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a03a:	4770      	bx	lr

0801a03c <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__get_const_function__ParameterEvent__deleted_parameters>:
 801a03c:	6800      	ldr	r0, [r0, #0]
 801a03e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a042:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a046:	4770      	bx	lr

0801a048 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__get_function__ParameterEvent__deleted_parameters>:
 801a048:	6800      	ldr	r0, [r0, #0]
 801a04a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a04e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a052:	4770      	bx	lr

0801a054 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__get_function__ParameterEvent__changed_parameters>:
 801a054:	6800      	ldr	r0, [r0, #0]
 801a056:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a05a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a05e:	4770      	bx	lr

0801a060 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__resize_function__ParameterEvent__deleted_parameters>:
 801a060:	b510      	push	{r4, lr}
 801a062:	b082      	sub	sp, #8
 801a064:	4604      	mov	r4, r0
 801a066:	9101      	str	r1, [sp, #4]
 801a068:	f7fe fe46 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 801a06c:	9901      	ldr	r1, [sp, #4]
 801a06e:	4620      	mov	r0, r4
 801a070:	b002      	add	sp, #8
 801a072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a076:	f7fe be3b 	b.w	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 801a07a:	bf00      	nop

0801a07c <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__resize_function__ParameterEvent__changed_parameters>:
 801a07c:	b510      	push	{r4, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	4604      	mov	r4, r0
 801a082:	9101      	str	r1, [sp, #4]
 801a084:	f7fe fe38 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 801a088:	9901      	ldr	r1, [sp, #4]
 801a08a:	4620      	mov	r0, r4
 801a08c:	b002      	add	sp, #8
 801a08e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a092:	f7fe be2d 	b.w	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 801a096:	bf00      	nop

0801a098 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__fetch_function__ParameterEvent__changed_parameters>:
 801a098:	b508      	push	{r3, lr}
 801a09a:	6803      	ldr	r3, [r0, #0]
 801a09c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a0a0:	4610      	mov	r0, r2
 801a0a2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 801a0a6:	2270      	movs	r2, #112	@ 0x70
 801a0a8:	f007 fcc3 	bl	8021a32 <memcpy>
 801a0ac:	bd08      	pop	{r3, pc}
 801a0ae:	bf00      	nop

0801a0b0 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__assign_function__ParameterEvent__changed_parameters>:
 801a0b0:	b508      	push	{r3, lr}
 801a0b2:	6800      	ldr	r0, [r0, #0]
 801a0b4:	460b      	mov	r3, r1
 801a0b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a0ba:	4611      	mov	r1, r2
 801a0bc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801a0c0:	2270      	movs	r2, #112	@ 0x70
 801a0c2:	f007 fcb6 	bl	8021a32 <memcpy>
 801a0c6:	bd08      	pop	{r3, pc}

0801a0c8 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__fetch_function__ParameterEvent__deleted_parameters>:
 801a0c8:	b508      	push	{r3, lr}
 801a0ca:	6803      	ldr	r3, [r0, #0]
 801a0cc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a0d0:	4610      	mov	r0, r2
 801a0d2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 801a0d6:	2270      	movs	r2, #112	@ 0x70
 801a0d8:	f007 fcab 	bl	8021a32 <memcpy>
 801a0dc:	bd08      	pop	{r3, pc}
 801a0de:	bf00      	nop

0801a0e0 <rcl_interfaces__msg__ParameterEvent__rosidl_typesupport_introspection_c__assign_function__ParameterEvent__deleted_parameters>:
 801a0e0:	b508      	push	{r3, lr}
 801a0e2:	6800      	ldr	r0, [r0, #0]
 801a0e4:	460b      	mov	r3, r1
 801a0e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a0ea:	4611      	mov	r1, r2
 801a0ec:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801a0f0:	2270      	movs	r2, #112	@ 0x70
 801a0f2:	f007 fc9e 	bl	8021a32 <memcpy>
 801a0f6:	bd08      	pop	{r3, pc}

0801a0f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent>:
 801a0f8:	b510      	push	{r4, lr}
 801a0fa:	f7f5 ff65 	bl	800ffc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801a0fe:	4c0c      	ldr	r4, [pc, #48]	@ (801a130 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x38>)
 801a100:	60e0      	str	r0, [r4, #12]
 801a102:	f006 f849 	bl	8020198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801a106:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801a10a:	f006 f845 	bl	8020198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801a10e:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 801a112:	f006 f841 	bl	8020198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801a116:	4b07      	ldr	r3, [pc, #28]	@ (801a134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x3c>)
 801a118:	f8c4 00fc 	str.w	r0, [r4, #252]	@ 0xfc
 801a11c:	681a      	ldr	r2, [r3, #0]
 801a11e:	b10a      	cbz	r2, 801a124 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x2c>
 801a120:	4804      	ldr	r0, [pc, #16]	@ (801a134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x3c>)
 801a122:	bd10      	pop	{r4, pc}
 801a124:	4a04      	ldr	r2, [pc, #16]	@ (801a138 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x40>)
 801a126:	4803      	ldr	r0, [pc, #12]	@ (801a134 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x3c>)
 801a128:	6812      	ldr	r2, [r2, #0]
 801a12a:	601a      	str	r2, [r3, #0]
 801a12c:	bd10      	pop	{r4, pc}
 801a12e:	bf00      	nop
 801a130:	20001104 	.word	0x20001104
 801a134:	20001230 	.word	0x20001230
 801a138:	20000384 	.word	0x20000384

0801a13c <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__size_function__ParameterValue__byte_array_value>:
 801a13c:	6840      	ldr	r0, [r0, #4]
 801a13e:	4770      	bx	lr

0801a140 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_const_function__ParameterValue__byte_array_value>:
 801a140:	6800      	ldr	r0, [r0, #0]
 801a142:	4408      	add	r0, r1
 801a144:	4770      	bx	lr
 801a146:	bf00      	nop

0801a148 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__fetch_function__ParameterValue__byte_array_value>:
 801a148:	6803      	ldr	r3, [r0, #0]
 801a14a:	5c5b      	ldrb	r3, [r3, r1]
 801a14c:	7013      	strb	r3, [r2, #0]
 801a14e:	4770      	bx	lr

0801a150 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__assign_function__ParameterValue__byte_array_value>:
 801a150:	6803      	ldr	r3, [r0, #0]
 801a152:	7812      	ldrb	r2, [r2, #0]
 801a154:	545a      	strb	r2, [r3, r1]
 801a156:	4770      	bx	lr

0801a158 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__size_function__ParameterValue__bool_array_value>:
 801a158:	6840      	ldr	r0, [r0, #4]
 801a15a:	4770      	bx	lr

0801a15c <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_const_function__ParameterValue__bool_array_value>:
 801a15c:	6800      	ldr	r0, [r0, #0]
 801a15e:	4408      	add	r0, r1
 801a160:	4770      	bx	lr
 801a162:	bf00      	nop

0801a164 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__fetch_function__ParameterValue__bool_array_value>:
 801a164:	6803      	ldr	r3, [r0, #0]
 801a166:	5c5b      	ldrb	r3, [r3, r1]
 801a168:	7013      	strb	r3, [r2, #0]
 801a16a:	4770      	bx	lr

0801a16c <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__assign_function__ParameterValue__bool_array_value>:
 801a16c:	6803      	ldr	r3, [r0, #0]
 801a16e:	7812      	ldrb	r2, [r2, #0]
 801a170:	545a      	strb	r2, [r3, r1]
 801a172:	4770      	bx	lr

0801a174 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__size_function__ParameterValue__integer_array_value>:
 801a174:	6840      	ldr	r0, [r0, #4]
 801a176:	4770      	bx	lr

0801a178 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_const_function__ParameterValue__integer_array_value>:
 801a178:	6800      	ldr	r0, [r0, #0]
 801a17a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801a17e:	4770      	bx	lr

0801a180 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__fetch_function__ParameterValue__integer_array_value>:
 801a180:	6803      	ldr	r3, [r0, #0]
 801a182:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a186:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a18a:	e9c2 0100 	strd	r0, r1, [r2]
 801a18e:	4770      	bx	lr

0801a190 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__assign_function__ParameterValue__integer_array_value>:
 801a190:	6803      	ldr	r3, [r0, #0]
 801a192:	ed92 7b00 	vldr	d7, [r2]
 801a196:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a19a:	ed81 7b00 	vstr	d7, [r1]
 801a19e:	4770      	bx	lr

0801a1a0 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__size_function__ParameterValue__double_array_value>:
 801a1a0:	6840      	ldr	r0, [r0, #4]
 801a1a2:	4770      	bx	lr

0801a1a4 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_const_function__ParameterValue__double_array_value>:
 801a1a4:	6800      	ldr	r0, [r0, #0]
 801a1a6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801a1aa:	4770      	bx	lr

0801a1ac <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__fetch_function__ParameterValue__double_array_value>:
 801a1ac:	6803      	ldr	r3, [r0, #0]
 801a1ae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a1b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a1b6:	e9c2 0100 	strd	r0, r1, [r2]
 801a1ba:	4770      	bx	lr

0801a1bc <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__assign_function__ParameterValue__double_array_value>:
 801a1bc:	6803      	ldr	r3, [r0, #0]
 801a1be:	ed92 7b00 	vldr	d7, [r2]
 801a1c2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a1c6:	ed81 7b00 	vstr	d7, [r1]
 801a1ca:	4770      	bx	lr

0801a1cc <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__size_function__ParameterValue__string_array_value>:
 801a1cc:	6840      	ldr	r0, [r0, #4]
 801a1ce:	4770      	bx	lr

0801a1d0 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_const_function__ParameterValue__string_array_value>:
 801a1d0:	6800      	ldr	r0, [r0, #0]
 801a1d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a1d6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801a1da:	4770      	bx	lr

0801a1dc <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__fetch_function__ParameterValue__string_array_value>:
 801a1dc:	6803      	ldr	r3, [r0, #0]
 801a1de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a1e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	c907      	ldmia	r1, {r0, r1, r2}
 801a1ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1ee:	4770      	bx	lr

0801a1f0 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__assign_function__ParameterValue__string_array_value>:
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	468c      	mov	ip, r1
 801a1f4:	ca07      	ldmia	r2, {r0, r1, r2}
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a1fc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801a200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a204:	4770      	bx	lr
 801a206:	bf00      	nop

0801a208 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__ParameterValue_init_function>:
 801a208:	f7ff b890 	b.w	801932c <rcl_interfaces__msg__ParameterValue__init>

0801a20c <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__ParameterValue_fini_function>:
 801a20c:	f7ff b924 	b.w	8019458 <rcl_interfaces__msg__ParameterValue__fini>

0801a210 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__resize_function__ParameterValue__byte_array_value>:
 801a210:	b510      	push	{r4, lr}
 801a212:	b082      	sub	sp, #8
 801a214:	4604      	mov	r4, r0
 801a216:	9101      	str	r1, [sp, #4]
 801a218:	f7f5 f950 	bl	800f4bc <rosidl_runtime_c__octet__Sequence__fini>
 801a21c:	9901      	ldr	r1, [sp, #4]
 801a21e:	4620      	mov	r0, r4
 801a220:	b002      	add	sp, #8
 801a222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a226:	f7f5 b931 	b.w	800f48c <rosidl_runtime_c__octet__Sequence__init>
 801a22a:	bf00      	nop

0801a22c <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__resize_function__ParameterValue__bool_array_value>:
 801a22c:	b510      	push	{r4, lr}
 801a22e:	b082      	sub	sp, #8
 801a230:	4604      	mov	r4, r0
 801a232:	9101      	str	r1, [sp, #4]
 801a234:	f7f5 f916 	bl	800f464 <rosidl_runtime_c__boolean__Sequence__fini>
 801a238:	9901      	ldr	r1, [sp, #4]
 801a23a:	4620      	mov	r0, r4
 801a23c:	b002      	add	sp, #8
 801a23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a242:	f7f5 b8f7 	b.w	800f434 <rosidl_runtime_c__boolean__Sequence__init>
 801a246:	bf00      	nop

0801a248 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__resize_function__ParameterValue__integer_array_value>:
 801a248:	b510      	push	{r4, lr}
 801a24a:	b082      	sub	sp, #8
 801a24c:	4604      	mov	r4, r0
 801a24e:	9101      	str	r1, [sp, #4]
 801a250:	f7f5 f98c 	bl	800f56c <rosidl_runtime_c__int64__Sequence__fini>
 801a254:	9901      	ldr	r1, [sp, #4]
 801a256:	4620      	mov	r0, r4
 801a258:	b002      	add	sp, #8
 801a25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a25e:	f7f5 b96d 	b.w	800f53c <rosidl_runtime_c__int64__Sequence__init>
 801a262:	bf00      	nop

0801a264 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__resize_function__ParameterValue__double_array_value>:
 801a264:	b510      	push	{r4, lr}
 801a266:	b082      	sub	sp, #8
 801a268:	4604      	mov	r4, r0
 801a26a:	9101      	str	r1, [sp, #4]
 801a26c:	f7f5 f8ce 	bl	800f40c <rosidl_runtime_c__double__Sequence__fini>
 801a270:	9901      	ldr	r1, [sp, #4]
 801a272:	4620      	mov	r0, r4
 801a274:	b002      	add	sp, #8
 801a276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a27a:	f7f5 b8af 	b.w	800f3dc <rosidl_runtime_c__double__Sequence__init>
 801a27e:	bf00      	nop

0801a280 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__resize_function__ParameterValue__string_array_value>:
 801a280:	b510      	push	{r4, lr}
 801a282:	b082      	sub	sp, #8
 801a284:	4604      	mov	r4, r0
 801a286:	9101      	str	r1, [sp, #4]
 801a288:	f7f5 fa88 	bl	800f79c <rosidl_runtime_c__String__Sequence__fini>
 801a28c:	9901      	ldr	r1, [sp, #4]
 801a28e:	4620      	mov	r0, r4
 801a290:	b002      	add	sp, #8
 801a292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a296:	f7f5 ba39 	b.w	800f70c <rosidl_runtime_c__String__Sequence__init>
 801a29a:	bf00      	nop

0801a29c <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_function__ParameterValue__bool_array_value>:
 801a29c:	6800      	ldr	r0, [r0, #0]
 801a29e:	4408      	add	r0, r1
 801a2a0:	4770      	bx	lr
 801a2a2:	bf00      	nop

0801a2a4 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_function__ParameterValue__byte_array_value>:
 801a2a4:	6800      	ldr	r0, [r0, #0]
 801a2a6:	4408      	add	r0, r1
 801a2a8:	4770      	bx	lr
 801a2aa:	bf00      	nop

0801a2ac <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_function__ParameterValue__string_array_value>:
 801a2ac:	6800      	ldr	r0, [r0, #0]
 801a2ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a2b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801a2b6:	4770      	bx	lr

0801a2b8 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_function__ParameterValue__integer_array_value>:
 801a2b8:	6800      	ldr	r0, [r0, #0]
 801a2ba:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801a2be:	4770      	bx	lr

0801a2c0 <rcl_interfaces__msg__ParameterValue__rosidl_typesupport_introspection_c__get_function__ParameterValue__double_array_value>:
 801a2c0:	6800      	ldr	r0, [r0, #0]
 801a2c2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801a2c6:	4770      	bx	lr

0801a2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>:
 801a2c8:	4b04      	ldr	r3, [pc, #16]	@ (801a2dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue+0x14>)
 801a2ca:	681a      	ldr	r2, [r3, #0]
 801a2cc:	b10a      	cbz	r2, 801a2d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue+0xa>
 801a2ce:	4803      	ldr	r0, [pc, #12]	@ (801a2dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue+0x14>)
 801a2d0:	4770      	bx	lr
 801a2d2:	4a03      	ldr	r2, [pc, #12]	@ (801a2e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue+0x18>)
 801a2d4:	4801      	ldr	r0, [pc, #4]	@ (801a2dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue+0x14>)
 801a2d6:	6812      	ldr	r2, [r2, #0]
 801a2d8:	601a      	str	r2, [r3, #0]
 801a2da:	4770      	bx	lr
 801a2dc:	20001494 	.word	0x20001494
 801a2e0:	20000384 	.word	0x20000384

0801a2e4 <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__size_function__SetParameters_Request__parameters>:
 801a2e4:	6840      	ldr	r0, [r0, #4]
 801a2e6:	4770      	bx	lr

0801a2e8 <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__get_const_function__SetParameters_Request__parameters>:
 801a2e8:	6800      	ldr	r0, [r0, #0]
 801a2ea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a2ee:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a2f2:	4770      	bx	lr

0801a2f4 <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__fetch_function__SetParameters_Request__parameters>:
 801a2f4:	b508      	push	{r3, lr}
 801a2f6:	6803      	ldr	r3, [r0, #0]
 801a2f8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a2fc:	4610      	mov	r0, r2
 801a2fe:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 801a302:	2270      	movs	r2, #112	@ 0x70
 801a304:	f007 fb95 	bl	8021a32 <memcpy>
 801a308:	bd08      	pop	{r3, pc}
 801a30a:	bf00      	nop

0801a30c <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__assign_function__SetParameters_Request__parameters>:
 801a30c:	b508      	push	{r3, lr}
 801a30e:	6800      	ldr	r0, [r0, #0]
 801a310:	460b      	mov	r3, r1
 801a312:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801a316:	4611      	mov	r1, r2
 801a318:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 801a31c:	2270      	movs	r2, #112	@ 0x70
 801a31e:	f007 fb88 	bl	8021a32 <memcpy>
 801a322:	bd08      	pop	{r3, pc}

0801a324 <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__size_function__SetParameters_Response__results>:
 801a324:	6840      	ldr	r0, [r0, #4]
 801a326:	4770      	bx	lr

0801a328 <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__get_const_function__SetParameters_Response__results>:
 801a328:	6800      	ldr	r0, [r0, #0]
 801a32a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a32e:	4770      	bx	lr

0801a330 <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__fetch_function__SetParameters_Response__results>:
 801a330:	6803      	ldr	r3, [r0, #0]
 801a332:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 801a336:	4694      	mov	ip, r2
 801a338:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 801a33a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801a33e:	4770      	bx	lr

0801a340 <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__assign_function__SetParameters_Response__results>:
 801a340:	6803      	ldr	r3, [r0, #0]
 801a342:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 801a346:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 801a348:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801a34c:	4770      	bx	lr
 801a34e:	bf00      	nop

0801a350 <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__SetParameters_Request_init_function>:
 801a350:	f7ff b8e2 	b.w	8019518 <rcl_interfaces__srv__SetParameters_Request__init>

0801a354 <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__SetParameters_Request_fini_function>:
 801a354:	f7ff b8f2 	b.w	801953c <rcl_interfaces__srv__SetParameters_Request__fini>

0801a358 <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__resize_function__SetParameters_Request__parameters>:
 801a358:	b510      	push	{r4, lr}
 801a35a:	b082      	sub	sp, #8
 801a35c:	4604      	mov	r4, r0
 801a35e:	9101      	str	r1, [sp, #4]
 801a360:	f7fe fcca 	bl	8018cf8 <rcl_interfaces__msg__Parameter__Sequence__fini>
 801a364:	9901      	ldr	r1, [sp, #4]
 801a366:	4620      	mov	r0, r4
 801a368:	b002      	add	sp, #8
 801a36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a36e:	f7fe bcbf 	b.w	8018cf0 <rcl_interfaces__msg__Parameter__Sequence__init>
 801a372:	bf00      	nop

0801a374 <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__SetParameters_Response_init_function>:
 801a374:	f7ff b8e6 	b.w	8019544 <rcl_interfaces__srv__SetParameters_Response__init>

0801a378 <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__SetParameters_Response_fini_function>:
 801a378:	f7ff b8f6 	b.w	8019568 <rcl_interfaces__srv__SetParameters_Response__fini>

0801a37c <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__resize_function__SetParameters_Response__results>:
 801a37c:	b510      	push	{r4, lr}
 801a37e:	b082      	sub	sp, #8
 801a380:	4604      	mov	r4, r0
 801a382:	9101      	str	r1, [sp, #4]
 801a384:	f7ff f954 	bl	8019630 <rcl_interfaces__msg__SetParametersResult__Sequence__fini>
 801a388:	9901      	ldr	r1, [sp, #4]
 801a38a:	4620      	mov	r0, r4
 801a38c:	b002      	add	sp, #8
 801a38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a392:	f7ff b949 	b.w	8019628 <rcl_interfaces__msg__SetParametersResult__Sequence__init>
 801a396:	bf00      	nop

0801a398 <rcl_interfaces__srv__SetParameters_Response__rosidl_typesupport_introspection_c__get_function__SetParameters_Response__results>:
 801a398:	6800      	ldr	r0, [r0, #0]
 801a39a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a39e:	4770      	bx	lr

0801a3a0 <rcl_interfaces__srv__SetParameters_Request__rosidl_typesupport_introspection_c__get_function__SetParameters_Request__parameters>:
 801a3a0:	6800      	ldr	r0, [r0, #0]
 801a3a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801a3a6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 801a3aa:	4770      	bx	lr

0801a3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request>:
 801a3ac:	b508      	push	{r3, lr}
 801a3ae:	f005 fef3 	bl	8020198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801a3b2:	4b06      	ldr	r3, [pc, #24]	@ (801a3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x20>)
 801a3b4:	4906      	ldr	r1, [pc, #24]	@ (801a3d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x24>)
 801a3b6:	681a      	ldr	r2, [r3, #0]
 801a3b8:	60c8      	str	r0, [r1, #12]
 801a3ba:	b10a      	cbz	r2, 801a3c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x14>
 801a3bc:	4803      	ldr	r0, [pc, #12]	@ (801a3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x20>)
 801a3be:	bd08      	pop	{r3, pc}
 801a3c0:	4a04      	ldr	r2, [pc, #16]	@ (801a3d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x28>)
 801a3c2:	4802      	ldr	r0, [pc, #8]	@ (801a3cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x20>)
 801a3c4:	6812      	ldr	r2, [r2, #0]
 801a3c6:	601a      	str	r2, [r3, #0]
 801a3c8:	bd08      	pop	{r3, pc}
 801a3ca:	bf00      	nop
 801a3cc:	200014dc 	.word	0x200014dc
 801a3d0:	200014a0 	.word	0x200014a0
 801a3d4:	20000384 	.word	0x20000384

0801a3d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response>:
 801a3d8:	b508      	push	{r3, lr}
 801a3da:	f000 f855 	bl	801a488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>
 801a3de:	4b06      	ldr	r3, [pc, #24]	@ (801a3f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response+0x20>)
 801a3e0:	4906      	ldr	r1, [pc, #24]	@ (801a3fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response+0x24>)
 801a3e2:	681a      	ldr	r2, [r3, #0]
 801a3e4:	60c8      	str	r0, [r1, #12]
 801a3e6:	b10a      	cbz	r2, 801a3ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response+0x14>
 801a3e8:	4803      	ldr	r0, [pc, #12]	@ (801a3f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response+0x20>)
 801a3ea:	bd08      	pop	{r3, pc}
 801a3ec:	4a04      	ldr	r2, [pc, #16]	@ (801a400 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response+0x28>)
 801a3ee:	4802      	ldr	r0, [pc, #8]	@ (801a3f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response+0x20>)
 801a3f0:	6812      	ldr	r2, [r2, #0]
 801a3f2:	601a      	str	r2, [r3, #0]
 801a3f4:	bd08      	pop	{r3, pc}
 801a3f6:	bf00      	nop
 801a3f8:	20001524 	.word	0x20001524
 801a3fc:	200014e8 	.word	0x200014e8
 801a400:	20000384 	.word	0x20000384

0801a404 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters>:
 801a404:	4b18      	ldr	r3, [pc, #96]	@ (801a468 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x64>)
 801a406:	681a      	ldr	r2, [r3, #0]
 801a408:	b510      	push	{r4, lr}
 801a40a:	b132      	cbz	r2, 801a41a <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x16>
 801a40c:	685c      	ldr	r4, [r3, #4]
 801a40e:	68a3      	ldr	r3, [r4, #8]
 801a410:	b153      	cbz	r3, 801a428 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x24>
 801a412:	68e3      	ldr	r3, [r4, #12]
 801a414:	b1a3      	cbz	r3, 801a440 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x3c>
 801a416:	4814      	ldr	r0, [pc, #80]	@ (801a468 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x64>)
 801a418:	bd10      	pop	{r4, pc}
 801a41a:	4a14      	ldr	r2, [pc, #80]	@ (801a46c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x68>)
 801a41c:	685c      	ldr	r4, [r3, #4]
 801a41e:	6812      	ldr	r2, [r2, #0]
 801a420:	601a      	str	r2, [r3, #0]
 801a422:	68a3      	ldr	r3, [r4, #8]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d1f4      	bne.n	801a412 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0xe>
 801a428:	f005 feb6 	bl	8020198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801a42c:	4b10      	ldr	r3, [pc, #64]	@ (801a470 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x6c>)
 801a42e:	4911      	ldr	r1, [pc, #68]	@ (801a474 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x70>)
 801a430:	681a      	ldr	r2, [r3, #0]
 801a432:	60c8      	str	r0, [r1, #12]
 801a434:	b19a      	cbz	r2, 801a45e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x5a>
 801a436:	685b      	ldr	r3, [r3, #4]
 801a438:	60a3      	str	r3, [r4, #8]
 801a43a:	68e3      	ldr	r3, [r4, #12]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d1ea      	bne.n	801a416 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x12>
 801a440:	f000 f822 	bl	801a488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>
 801a444:	4b0c      	ldr	r3, [pc, #48]	@ (801a478 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x74>)
 801a446:	490d      	ldr	r1, [pc, #52]	@ (801a47c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x78>)
 801a448:	681a      	ldr	r2, [r3, #0]
 801a44a:	60c8      	str	r0, [r1, #12]
 801a44c:	b11a      	cbz	r2, 801a456 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x52>
 801a44e:	685b      	ldr	r3, [r3, #4]
 801a450:	4805      	ldr	r0, [pc, #20]	@ (801a468 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x64>)
 801a452:	60e3      	str	r3, [r4, #12]
 801a454:	bd10      	pop	{r4, pc}
 801a456:	4a05      	ldr	r2, [pc, #20]	@ (801a46c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x68>)
 801a458:	6812      	ldr	r2, [r2, #0]
 801a45a:	601a      	str	r2, [r3, #0]
 801a45c:	e7f7      	b.n	801a44e <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x4a>
 801a45e:	4a03      	ldr	r2, [pc, #12]	@ (801a46c <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x68>)
 801a460:	6812      	ldr	r2, [r2, #0]
 801a462:	601a      	str	r2, [r3, #0]
 801a464:	e7e7      	b.n	801a436 <rosidl_typesupport_introspection_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x32>
 801a466:	bf00      	nop
 801a468:	20001540 	.word	0x20001540
 801a46c:	20000384 	.word	0x20000384
 801a470:	200014dc 	.word	0x200014dc
 801a474:	200014a0 	.word	0x200014a0
 801a478:	20001524 	.word	0x20001524
 801a47c:	200014e8 	.word	0x200014e8

0801a480 <rcl_interfaces__msg__SetParametersResult__rosidl_typesupport_introspection_c__SetParametersResult_init_function>:
 801a480:	f7ff b8ba 	b.w	80195f8 <rcl_interfaces__msg__SetParametersResult__init>

0801a484 <rcl_interfaces__msg__SetParametersResult__rosidl_typesupport_introspection_c__SetParametersResult_fini_function>:
 801a484:	f7ff b8ca 	b.w	801961c <rcl_interfaces__msg__SetParametersResult__fini>

0801a488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>:
 801a488:	4b04      	ldr	r3, [pc, #16]	@ (801a49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult+0x14>)
 801a48a:	681a      	ldr	r2, [r3, #0]
 801a48c:	b10a      	cbz	r2, 801a492 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult+0xa>
 801a48e:	4803      	ldr	r0, [pc, #12]	@ (801a49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult+0x14>)
 801a490:	4770      	bx	lr
 801a492:	4a03      	ldr	r2, [pc, #12]	@ (801a4a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult+0x18>)
 801a494:	4801      	ldr	r0, [pc, #4]	@ (801a49c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult+0x14>)
 801a496:	6812      	ldr	r2, [r2, #0]
 801a498:	601a      	str	r2, [r3, #0]
 801a49a:	4770      	bx	lr
 801a49c:	200015c4 	.word	0x200015c4
 801a4a0:	20000384 	.word	0x20000384

0801a4a4 <_DescribeParameters_Request__max_serialized_size>:
 801a4a4:	2000      	movs	r0, #0
 801a4a6:	4770      	bx	lr

0801a4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request>:
 801a4a8:	4800      	ldr	r0, [pc, #0]	@ (801a4ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Request+0x4>)
 801a4aa:	4770      	bx	lr
 801a4ac:	200015ec 	.word	0x200015ec

0801a4b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response>:
 801a4b0:	4800      	ldr	r0, [pc, #0]	@ (801a4b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response+0x4>)
 801a4b2:	4770      	bx	lr
 801a4b4:	200015f8 	.word	0x200015f8

0801a4b8 <_DescribeParameters_Request__get_serialized_size>:
 801a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ba:	4607      	mov	r7, r0
 801a4bc:	b1c8      	cbz	r0, 801a4f2 <_DescribeParameters_Request__get_serialized_size+0x3a>
 801a4be:	6846      	ldr	r6, [r0, #4]
 801a4c0:	2104      	movs	r1, #4
 801a4c2:	2000      	movs	r0, #0
 801a4c4:	f7f8 fcf6 	bl	8012eb4 <ucdr_alignment>
 801a4c8:	1d04      	adds	r4, r0, #4
 801a4ca:	b186      	cbz	r6, 801a4ee <_DescribeParameters_Request__get_serialized_size+0x36>
 801a4cc:	2500      	movs	r5, #0
 801a4ce:	4620      	mov	r0, r4
 801a4d0:	2104      	movs	r1, #4
 801a4d2:	f7f8 fcef 	bl	8012eb4 <ucdr_alignment>
 801a4d6:	683b      	ldr	r3, [r7, #0]
 801a4d8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a4dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801a4e0:	4404      	add	r4, r0
 801a4e2:	685b      	ldr	r3, [r3, #4]
 801a4e4:	3501      	adds	r5, #1
 801a4e6:	3405      	adds	r4, #5
 801a4e8:	42ae      	cmp	r6, r5
 801a4ea:	441c      	add	r4, r3
 801a4ec:	d1ef      	bne.n	801a4ce <_DescribeParameters_Request__get_serialized_size+0x16>
 801a4ee:	4620      	mov	r0, r4
 801a4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4f2:	4604      	mov	r4, r0
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a4f8 <_DescribeParameters_Request__cdr_deserialize>:
 801a4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4fc:	460d      	mov	r5, r1
 801a4fe:	b083      	sub	sp, #12
 801a500:	2900      	cmp	r1, #0
 801a502:	d037      	beq.n	801a574 <_DescribeParameters_Request__cdr_deserialize+0x7c>
 801a504:	4669      	mov	r1, sp
 801a506:	4606      	mov	r6, r0
 801a508:	f7f7 f808 	bl	801151c <ucdr_deserialize_uint32_t>
 801a50c:	9900      	ldr	r1, [sp, #0]
 801a50e:	68ab      	ldr	r3, [r5, #8]
 801a510:	428b      	cmp	r3, r1
 801a512:	4680      	mov	r8, r0
 801a514:	d32e      	bcc.n	801a574 <_DescribeParameters_Request__cdr_deserialize+0x7c>
 801a516:	6069      	str	r1, [r5, #4]
 801a518:	2400      	movs	r4, #0
 801a51a:	b368      	cbz	r0, 801a578 <_DescribeParameters_Request__cdr_deserialize+0x80>
 801a51c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801a520:	42a1      	cmp	r1, r4
 801a522:	ab01      	add	r3, sp, #4
 801a524:	4630      	mov	r0, r6
 801a526:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801a52a:	d925      	bls.n	801a578 <_DescribeParameters_Request__cdr_deserialize+0x80>
 801a52c:	6829      	ldr	r1, [r5, #0]
 801a52e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801a532:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a536:	f8dc 9008 	ldr.w	r9, [ip, #8]
 801a53a:	464a      	mov	r2, r9
 801a53c:	f7f8 fd38 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801a540:	3401      	adds	r4, #1
 801a542:	9a01      	ldr	r2, [sp, #4]
 801a544:	4603      	mov	r3, r0
 801a546:	b130      	cbz	r0, 801a556 <_DescribeParameters_Request__cdr_deserialize+0x5e>
 801a548:	b102      	cbz	r2, 801a54c <_DescribeParameters_Request__cdr_deserialize+0x54>
 801a54a:	3a01      	subs	r2, #1
 801a54c:	682b      	ldr	r3, [r5, #0]
 801a54e:	9900      	ldr	r1, [sp, #0]
 801a550:	443b      	add	r3, r7
 801a552:	605a      	str	r2, [r3, #4]
 801a554:	e7e2      	b.n	801a51c <_DescribeParameters_Request__cdr_deserialize+0x24>
 801a556:	4591      	cmp	r9, r2
 801a558:	d20c      	bcs.n	801a574 <_DescribeParameters_Request__cdr_deserialize+0x7c>
 801a55a:	2101      	movs	r1, #1
 801a55c:	7571      	strb	r1, [r6, #21]
 801a55e:	682a      	ldr	r2, [r5, #0]
 801a560:	75b0      	strb	r0, [r6, #22]
 801a562:	4417      	add	r7, r2
 801a564:	4630      	mov	r0, r6
 801a566:	607b      	str	r3, [r7, #4]
 801a568:	f7f8 fcba 	bl	8012ee0 <ucdr_align_to>
 801a56c:	9901      	ldr	r1, [sp, #4]
 801a56e:	4630      	mov	r0, r6
 801a570:	f7f8 fcec 	bl	8012f4c <ucdr_advance_buffer>
 801a574:	f04f 0800 	mov.w	r8, #0
 801a578:	4640      	mov	r0, r8
 801a57a:	b003      	add	sp, #12
 801a57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a580 <_DescribeParameters_Request__cdr_serialize>:
 801a580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a584:	b338      	cbz	r0, 801a5d6 <_DescribeParameters_Request__cdr_serialize+0x56>
 801a586:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a58a:	460f      	mov	r7, r1
 801a58c:	4606      	mov	r6, r0
 801a58e:	4608      	mov	r0, r1
 801a590:	4641      	mov	r1, r8
 801a592:	f7f6 fe93 	bl	80112bc <ucdr_serialize_uint32_t>
 801a596:	4681      	mov	r9, r0
 801a598:	b1e8      	cbz	r0, 801a5d6 <_DescribeParameters_Request__cdr_serialize+0x56>
 801a59a:	f1b8 0f00 	cmp.w	r8, #0
 801a59e:	d01c      	beq.n	801a5da <_DescribeParameters_Request__cdr_serialize+0x5a>
 801a5a0:	2400      	movs	r4, #0
 801a5a2:	e00c      	b.n	801a5be <_DescribeParameters_Request__cdr_serialize+0x3e>
 801a5a4:	f7e5 fe2c 	bl	8000200 <strlen>
 801a5a8:	1c42      	adds	r2, r0, #1
 801a5aa:	f8ca 0004 	str.w	r0, [sl, #4]
 801a5ae:	4629      	mov	r1, r5
 801a5b0:	4638      	mov	r0, r7
 801a5b2:	f7f8 fceb 	bl	8012f8c <ucdr_serialize_sequence_char>
 801a5b6:	3401      	adds	r4, #1
 801a5b8:	b168      	cbz	r0, 801a5d6 <_DescribeParameters_Request__cdr_serialize+0x56>
 801a5ba:	45a0      	cmp	r8, r4
 801a5bc:	d00d      	beq.n	801a5da <_DescribeParameters_Request__cdr_serialize+0x5a>
 801a5be:	6833      	ldr	r3, [r6, #0]
 801a5c0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801a5c4:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 801a5c8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a5cc:	4628      	mov	r0, r5
 801a5ce:	2d00      	cmp	r5, #0
 801a5d0:	d1e8      	bne.n	801a5a4 <_DescribeParameters_Request__cdr_serialize+0x24>
 801a5d2:	462a      	mov	r2, r5
 801a5d4:	e7e9      	b.n	801a5aa <_DescribeParameters_Request__cdr_serialize+0x2a>
 801a5d6:	f04f 0900 	mov.w	r9, #0
 801a5da:	4648      	mov	r0, r9
 801a5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a5e0 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Response>:
 801a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5e4:	4607      	mov	r7, r0
 801a5e6:	b338      	cbz	r0, 801a638 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Response+0x58>
 801a5e8:	4689      	mov	r9, r1
 801a5ea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a5ee:	2104      	movs	r1, #4
 801a5f0:	4648      	mov	r0, r9
 801a5f2:	f7f8 fc5f 	bl	8012eb4 <ucdr_alignment>
 801a5f6:	f109 0604 	add.w	r6, r9, #4
 801a5fa:	4406      	add	r6, r0
 801a5fc:	f1b8 0f00 	cmp.w	r8, #0
 801a600:	d018      	beq.n	801a634 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Response+0x54>
 801a602:	2500      	movs	r5, #0
 801a604:	f000 ff4a 	bl	801b49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>
 801a608:	683a      	ldr	r2, [r7, #0]
 801a60a:	6843      	ldr	r3, [r0, #4]
 801a60c:	eb05 1005 	add.w	r0, r5, r5, lsl #4
 801a610:	4631      	mov	r1, r6
 801a612:	695b      	ldr	r3, [r3, #20]
 801a614:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801a618:	4798      	blx	r3
 801a61a:	4604      	mov	r4, r0
 801a61c:	2c04      	cmp	r4, #4
 801a61e:	4621      	mov	r1, r4
 801a620:	4630      	mov	r0, r6
 801a622:	bf28      	it	cs
 801a624:	2104      	movcs	r1, #4
 801a626:	f7f8 fc45 	bl	8012eb4 <ucdr_alignment>
 801a62a:	3501      	adds	r5, #1
 801a62c:	4404      	add	r4, r0
 801a62e:	45a8      	cmp	r8, r5
 801a630:	4426      	add	r6, r4
 801a632:	d1e7      	bne.n	801a604 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Response+0x24>
 801a634:	eba6 0009 	sub.w	r0, r6, r9
 801a638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a63c <_DescribeParameters_Response__cdr_deserialize>:
 801a63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a63e:	460e      	mov	r6, r1
 801a640:	b083      	sub	sp, #12
 801a642:	b301      	cbz	r1, 801a686 <_DescribeParameters_Response__cdr_deserialize+0x4a>
 801a644:	a901      	add	r1, sp, #4
 801a646:	4607      	mov	r7, r0
 801a648:	f7f6 ff68 	bl	801151c <ucdr_deserialize_uint32_t>
 801a64c:	9b01      	ldr	r3, [sp, #4]
 801a64e:	68b2      	ldr	r2, [r6, #8]
 801a650:	429a      	cmp	r2, r3
 801a652:	d315      	bcc.n	801a680 <_DescribeParameters_Response__cdr_deserialize+0x44>
 801a654:	6073      	str	r3, [r6, #4]
 801a656:	b1a3      	cbz	r3, 801a682 <_DescribeParameters_Response__cdr_deserialize+0x46>
 801a658:	2400      	movs	r4, #0
 801a65a:	4625      	mov	r5, r4
 801a65c:	e002      	b.n	801a664 <_DescribeParameters_Response__cdr_deserialize+0x28>
 801a65e:	9b01      	ldr	r3, [sp, #4]
 801a660:	429d      	cmp	r5, r3
 801a662:	d20e      	bcs.n	801a682 <_DescribeParameters_Response__cdr_deserialize+0x46>
 801a664:	f000 ff1a 	bl	801b49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>
 801a668:	6831      	ldr	r1, [r6, #0]
 801a66a:	6843      	ldr	r3, [r0, #4]
 801a66c:	4421      	add	r1, r4
 801a66e:	68db      	ldr	r3, [r3, #12]
 801a670:	4638      	mov	r0, r7
 801a672:	4798      	blx	r3
 801a674:	3501      	adds	r5, #1
 801a676:	3444      	adds	r4, #68	@ 0x44
 801a678:	2800      	cmp	r0, #0
 801a67a:	d1f0      	bne.n	801a65e <_DescribeParameters_Response__cdr_deserialize+0x22>
 801a67c:	b003      	add	sp, #12
 801a67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a680:	2000      	movs	r0, #0
 801a682:	b003      	add	sp, #12
 801a684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a686:	4608      	mov	r0, r1
 801a688:	b003      	add	sp, #12
 801a68a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a68c <_DescribeParameters_Response__cdr_serialize>:
 801a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a690:	b1d8      	cbz	r0, 801a6ca <_DescribeParameters_Response__cdr_serialize+0x3e>
 801a692:	6847      	ldr	r7, [r0, #4]
 801a694:	460e      	mov	r6, r1
 801a696:	4605      	mov	r5, r0
 801a698:	4608      	mov	r0, r1
 801a69a:	4639      	mov	r1, r7
 801a69c:	f7f6 fe0e 	bl	80112bc <ucdr_serialize_uint32_t>
 801a6a0:	4680      	mov	r8, r0
 801a6a2:	b190      	cbz	r0, 801a6ca <_DescribeParameters_Response__cdr_serialize+0x3e>
 801a6a4:	b19f      	cbz	r7, 801a6ce <_DescribeParameters_Response__cdr_serialize+0x42>
 801a6a6:	2400      	movs	r4, #0
 801a6a8:	e001      	b.n	801a6ae <_DescribeParameters_Response__cdr_serialize+0x22>
 801a6aa:	42a7      	cmp	r7, r4
 801a6ac:	d00f      	beq.n	801a6ce <_DescribeParameters_Response__cdr_serialize+0x42>
 801a6ae:	f000 fef5 	bl	801b49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>
 801a6b2:	682a      	ldr	r2, [r5, #0]
 801a6b4:	6843      	ldr	r3, [r0, #4]
 801a6b6:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 801a6ba:	689b      	ldr	r3, [r3, #8]
 801a6bc:	4631      	mov	r1, r6
 801a6be:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801a6c2:	3401      	adds	r4, #1
 801a6c4:	4798      	blx	r3
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	d1ef      	bne.n	801a6aa <_DescribeParameters_Response__cdr_serialize+0x1e>
 801a6ca:	f04f 0800 	mov.w	r8, #0
 801a6ce:	4640      	mov	r0, r8
 801a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a6d4 <_DescribeParameters_Response__max_serialized_size>:
 801a6d4:	2000      	movs	r0, #0
 801a6d6:	4770      	bx	lr

0801a6d8 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Request>:
 801a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6dc:	4680      	mov	r8, r0
 801a6de:	b1d8      	cbz	r0, 801a718 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Request+0x40>
 801a6e0:	460e      	mov	r6, r1
 801a6e2:	6845      	ldr	r5, [r0, #4]
 801a6e4:	2104      	movs	r1, #4
 801a6e6:	4630      	mov	r0, r6
 801a6e8:	f7f8 fbe4 	bl	8012eb4 <ucdr_alignment>
 801a6ec:	1d32      	adds	r2, r6, #4
 801a6ee:	1814      	adds	r4, r2, r0
 801a6f0:	b18d      	cbz	r5, 801a716 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Request+0x3e>
 801a6f2:	2700      	movs	r7, #0
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	2104      	movs	r1, #4
 801a6f8:	f7f8 fbdc 	bl	8012eb4 <ucdr_alignment>
 801a6fc:	f8d8 3000 	ldr.w	r3, [r8]
 801a700:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 801a704:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801a708:	3701      	adds	r7, #1
 801a70a:	1903      	adds	r3, r0, r4
 801a70c:	6854      	ldr	r4, [r2, #4]
 801a70e:	3305      	adds	r3, #5
 801a710:	42bd      	cmp	r5, r7
 801a712:	441c      	add	r4, r3
 801a714:	d1ee      	bne.n	801a6f4 <get_serialized_size_rcl_interfaces__srv__DescribeParameters_Request+0x1c>
 801a716:	1ba0      	subs	r0, r4, r6
 801a718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a71c <_DescribeParameters_Response__get_serialized_size>:
 801a71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a720:	4607      	mov	r7, r0
 801a722:	b328      	cbz	r0, 801a770 <_DescribeParameters_Response__get_serialized_size+0x54>
 801a724:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a728:	2104      	movs	r1, #4
 801a72a:	2000      	movs	r0, #0
 801a72c:	f7f8 fbc2 	bl	8012eb4 <ucdr_alignment>
 801a730:	1d06      	adds	r6, r0, #4
 801a732:	f1b8 0f00 	cmp.w	r8, #0
 801a736:	d018      	beq.n	801a76a <_DescribeParameters_Response__get_serialized_size+0x4e>
 801a738:	2500      	movs	r5, #0
 801a73a:	f000 feaf 	bl	801b49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>
 801a73e:	683a      	ldr	r2, [r7, #0]
 801a740:	6843      	ldr	r3, [r0, #4]
 801a742:	eb05 1005 	add.w	r0, r5, r5, lsl #4
 801a746:	4631      	mov	r1, r6
 801a748:	695b      	ldr	r3, [r3, #20]
 801a74a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801a74e:	4798      	blx	r3
 801a750:	4604      	mov	r4, r0
 801a752:	2c04      	cmp	r4, #4
 801a754:	4621      	mov	r1, r4
 801a756:	4630      	mov	r0, r6
 801a758:	bf28      	it	cs
 801a75a:	2104      	movcs	r1, #4
 801a75c:	f7f8 fbaa 	bl	8012eb4 <ucdr_alignment>
 801a760:	3501      	adds	r5, #1
 801a762:	4404      	add	r4, r0
 801a764:	45a8      	cmp	r8, r5
 801a766:	4426      	add	r6, r4
 801a768:	d1e7      	bne.n	801a73a <_DescribeParameters_Response__get_serialized_size+0x1e>
 801a76a:	4630      	mov	r0, r6
 801a76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a770:	4606      	mov	r6, r0
 801a772:	4630      	mov	r0, r6
 801a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a778 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters>:
 801a778:	4800      	ldr	r0, [pc, #0]	@ (801a77c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__DescribeParameters+0x4>)
 801a77a:	4770      	bx	lr
 801a77c:	200015e0 	.word	0x200015e0

0801a780 <_GetParameterTypes_Request__max_serialized_size>:
 801a780:	2000      	movs	r0, #0
 801a782:	4770      	bx	lr

0801a784 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request>:
 801a784:	4800      	ldr	r0, [pc, #0]	@ (801a788 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Request+0x4>)
 801a786:	4770      	bx	lr
 801a788:	20001658 	.word	0x20001658

0801a78c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response>:
 801a78c:	4800      	ldr	r0, [pc, #0]	@ (801a790 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameterTypes_Response+0x4>)
 801a78e:	4770      	bx	lr
 801a790:	20001664 	.word	0x20001664

0801a794 <_GetParameterTypes_Request__get_serialized_size>:
 801a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a796:	4607      	mov	r7, r0
 801a798:	b1c8      	cbz	r0, 801a7ce <_GetParameterTypes_Request__get_serialized_size+0x3a>
 801a79a:	6846      	ldr	r6, [r0, #4]
 801a79c:	2104      	movs	r1, #4
 801a79e:	2000      	movs	r0, #0
 801a7a0:	f7f8 fb88 	bl	8012eb4 <ucdr_alignment>
 801a7a4:	1d04      	adds	r4, r0, #4
 801a7a6:	b186      	cbz	r6, 801a7ca <_GetParameterTypes_Request__get_serialized_size+0x36>
 801a7a8:	2500      	movs	r5, #0
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	2104      	movs	r1, #4
 801a7ae:	f7f8 fb81 	bl	8012eb4 <ucdr_alignment>
 801a7b2:	683b      	ldr	r3, [r7, #0]
 801a7b4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a7b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801a7bc:	4404      	add	r4, r0
 801a7be:	685b      	ldr	r3, [r3, #4]
 801a7c0:	3501      	adds	r5, #1
 801a7c2:	3405      	adds	r4, #5
 801a7c4:	42ae      	cmp	r6, r5
 801a7c6:	441c      	add	r4, r3
 801a7c8:	d1ef      	bne.n	801a7aa <_GetParameterTypes_Request__get_serialized_size+0x16>
 801a7ca:	4620      	mov	r0, r4
 801a7cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a7d4 <get_serialized_size_rcl_interfaces__srv__GetParameterTypes_Response>:
 801a7d4:	b198      	cbz	r0, 801a7fe <get_serialized_size_rcl_interfaces__srv__GetParameterTypes_Response+0x2a>
 801a7d6:	b570      	push	{r4, r5, r6, lr}
 801a7d8:	460d      	mov	r5, r1
 801a7da:	6846      	ldr	r6, [r0, #4]
 801a7dc:	2104      	movs	r1, #4
 801a7de:	4628      	mov	r0, r5
 801a7e0:	f7f8 fb68 	bl	8012eb4 <ucdr_alignment>
 801a7e4:	1d2b      	adds	r3, r5, #4
 801a7e6:	181c      	adds	r4, r3, r0
 801a7e8:	b90e      	cbnz	r6, 801a7ee <get_serialized_size_rcl_interfaces__srv__GetParameterTypes_Response+0x1a>
 801a7ea:	1b60      	subs	r0, r4, r5
 801a7ec:	bd70      	pop	{r4, r5, r6, pc}
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	2101      	movs	r1, #1
 801a7f2:	f7f8 fb5f 	bl	8012eb4 <ucdr_alignment>
 801a7f6:	1933      	adds	r3, r6, r4
 801a7f8:	181c      	adds	r4, r3, r0
 801a7fa:	1b60      	subs	r0, r4, r5
 801a7fc:	bd70      	pop	{r4, r5, r6, pc}
 801a7fe:	4770      	bx	lr

0801a800 <_GetParameterTypes_Request__cdr_deserialize>:
 801a800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a804:	460d      	mov	r5, r1
 801a806:	b083      	sub	sp, #12
 801a808:	2900      	cmp	r1, #0
 801a80a:	d037      	beq.n	801a87c <_GetParameterTypes_Request__cdr_deserialize+0x7c>
 801a80c:	4669      	mov	r1, sp
 801a80e:	4606      	mov	r6, r0
 801a810:	f7f6 fe84 	bl	801151c <ucdr_deserialize_uint32_t>
 801a814:	9900      	ldr	r1, [sp, #0]
 801a816:	68ab      	ldr	r3, [r5, #8]
 801a818:	428b      	cmp	r3, r1
 801a81a:	4680      	mov	r8, r0
 801a81c:	d32e      	bcc.n	801a87c <_GetParameterTypes_Request__cdr_deserialize+0x7c>
 801a81e:	6069      	str	r1, [r5, #4]
 801a820:	2400      	movs	r4, #0
 801a822:	b368      	cbz	r0, 801a880 <_GetParameterTypes_Request__cdr_deserialize+0x80>
 801a824:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801a828:	42a1      	cmp	r1, r4
 801a82a:	ab01      	add	r3, sp, #4
 801a82c:	4630      	mov	r0, r6
 801a82e:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801a832:	d925      	bls.n	801a880 <_GetParameterTypes_Request__cdr_deserialize+0x80>
 801a834:	6829      	ldr	r1, [r5, #0]
 801a836:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801a83a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a83e:	f8dc 9008 	ldr.w	r9, [ip, #8]
 801a842:	464a      	mov	r2, r9
 801a844:	f7f8 fbb4 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801a848:	3401      	adds	r4, #1
 801a84a:	9a01      	ldr	r2, [sp, #4]
 801a84c:	4603      	mov	r3, r0
 801a84e:	b130      	cbz	r0, 801a85e <_GetParameterTypes_Request__cdr_deserialize+0x5e>
 801a850:	b102      	cbz	r2, 801a854 <_GetParameterTypes_Request__cdr_deserialize+0x54>
 801a852:	3a01      	subs	r2, #1
 801a854:	682b      	ldr	r3, [r5, #0]
 801a856:	9900      	ldr	r1, [sp, #0]
 801a858:	443b      	add	r3, r7
 801a85a:	605a      	str	r2, [r3, #4]
 801a85c:	e7e2      	b.n	801a824 <_GetParameterTypes_Request__cdr_deserialize+0x24>
 801a85e:	4591      	cmp	r9, r2
 801a860:	d20c      	bcs.n	801a87c <_GetParameterTypes_Request__cdr_deserialize+0x7c>
 801a862:	2101      	movs	r1, #1
 801a864:	7571      	strb	r1, [r6, #21]
 801a866:	682a      	ldr	r2, [r5, #0]
 801a868:	75b0      	strb	r0, [r6, #22]
 801a86a:	4417      	add	r7, r2
 801a86c:	4630      	mov	r0, r6
 801a86e:	607b      	str	r3, [r7, #4]
 801a870:	f7f8 fb36 	bl	8012ee0 <ucdr_align_to>
 801a874:	9901      	ldr	r1, [sp, #4]
 801a876:	4630      	mov	r0, r6
 801a878:	f7f8 fb68 	bl	8012f4c <ucdr_advance_buffer>
 801a87c:	f04f 0800 	mov.w	r8, #0
 801a880:	4640      	mov	r0, r8
 801a882:	b003      	add	sp, #12
 801a884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a888 <_GetParameterTypes_Request__cdr_serialize>:
 801a888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a88c:	b338      	cbz	r0, 801a8de <_GetParameterTypes_Request__cdr_serialize+0x56>
 801a88e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801a892:	460f      	mov	r7, r1
 801a894:	4606      	mov	r6, r0
 801a896:	4608      	mov	r0, r1
 801a898:	4641      	mov	r1, r8
 801a89a:	f7f6 fd0f 	bl	80112bc <ucdr_serialize_uint32_t>
 801a89e:	4681      	mov	r9, r0
 801a8a0:	b1e8      	cbz	r0, 801a8de <_GetParameterTypes_Request__cdr_serialize+0x56>
 801a8a2:	f1b8 0f00 	cmp.w	r8, #0
 801a8a6:	d01c      	beq.n	801a8e2 <_GetParameterTypes_Request__cdr_serialize+0x5a>
 801a8a8:	2400      	movs	r4, #0
 801a8aa:	e00c      	b.n	801a8c6 <_GetParameterTypes_Request__cdr_serialize+0x3e>
 801a8ac:	f7e5 fca8 	bl	8000200 <strlen>
 801a8b0:	1c42      	adds	r2, r0, #1
 801a8b2:	f8ca 0004 	str.w	r0, [sl, #4]
 801a8b6:	4629      	mov	r1, r5
 801a8b8:	4638      	mov	r0, r7
 801a8ba:	f7f8 fb67 	bl	8012f8c <ucdr_serialize_sequence_char>
 801a8be:	3401      	adds	r4, #1
 801a8c0:	b168      	cbz	r0, 801a8de <_GetParameterTypes_Request__cdr_serialize+0x56>
 801a8c2:	45a0      	cmp	r8, r4
 801a8c4:	d00d      	beq.n	801a8e2 <_GetParameterTypes_Request__cdr_serialize+0x5a>
 801a8c6:	6833      	ldr	r3, [r6, #0]
 801a8c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801a8cc:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 801a8d0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a8d4:	4628      	mov	r0, r5
 801a8d6:	2d00      	cmp	r5, #0
 801a8d8:	d1e8      	bne.n	801a8ac <_GetParameterTypes_Request__cdr_serialize+0x24>
 801a8da:	462a      	mov	r2, r5
 801a8dc:	e7e9      	b.n	801a8b2 <_GetParameterTypes_Request__cdr_serialize+0x2a>
 801a8de:	f04f 0900 	mov.w	r9, #0
 801a8e2:	4648      	mov	r0, r9
 801a8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a8e8 <_GetParameterTypes_Response__cdr_deserialize>:
 801a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8ea:	460c      	mov	r4, r1
 801a8ec:	b083      	sub	sp, #12
 801a8ee:	b191      	cbz	r1, 801a916 <_GetParameterTypes_Response__cdr_deserialize+0x2e>
 801a8f0:	688f      	ldr	r7, [r1, #8]
 801a8f2:	6809      	ldr	r1, [r1, #0]
 801a8f4:	ab01      	add	r3, sp, #4
 801a8f6:	463a      	mov	r2, r7
 801a8f8:	4606      	mov	r6, r0
 801a8fa:	f7f8 fbb1 	bl	8013060 <ucdr_deserialize_sequence_uint8_t>
 801a8fe:	9b01      	ldr	r3, [sp, #4]
 801a900:	4605      	mov	r5, r0
 801a902:	b920      	cbnz	r0, 801a90e <_GetParameterTypes_Response__cdr_deserialize+0x26>
 801a904:	429f      	cmp	r7, r3
 801a906:	d30a      	bcc.n	801a91e <_GetParameterTypes_Response__cdr_deserialize+0x36>
 801a908:	4628      	mov	r0, r5
 801a90a:	b003      	add	sp, #12
 801a90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a90e:	4628      	mov	r0, r5
 801a910:	6063      	str	r3, [r4, #4]
 801a912:	b003      	add	sp, #12
 801a914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a916:	460d      	mov	r5, r1
 801a918:	4628      	mov	r0, r5
 801a91a:	b003      	add	sp, #12
 801a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a91e:	2101      	movs	r1, #1
 801a920:	75b0      	strb	r0, [r6, #22]
 801a922:	7571      	strb	r1, [r6, #21]
 801a924:	4630      	mov	r0, r6
 801a926:	6065      	str	r5, [r4, #4]
 801a928:	f7f8 fada 	bl	8012ee0 <ucdr_align_to>
 801a92c:	4630      	mov	r0, r6
 801a92e:	9901      	ldr	r1, [sp, #4]
 801a930:	f7f8 fb0c 	bl	8012f4c <ucdr_advance_buffer>
 801a934:	4628      	mov	r0, r5
 801a936:	b003      	add	sp, #12
 801a938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a93a:	bf00      	nop

0801a93c <_GetParameterTypes_Response__cdr_serialize>:
 801a93c:	468c      	mov	ip, r1
 801a93e:	b120      	cbz	r0, 801a94a <_GetParameterTypes_Response__cdr_serialize+0xe>
 801a940:	e9d0 1200 	ldrd	r1, r2, [r0]
 801a944:	4660      	mov	r0, ip
 801a946:	f7f8 bb79 	b.w	801303c <ucdr_serialize_sequence_uint8_t>
 801a94a:	4770      	bx	lr

0801a94c <_GetParameterTypes_Response__max_serialized_size>:
 801a94c:	2000      	movs	r0, #0
 801a94e:	4770      	bx	lr

0801a950 <_GetParameterTypes_Response__get_serialized_size>:
 801a950:	b538      	push	{r3, r4, r5, lr}
 801a952:	b180      	cbz	r0, 801a976 <_GetParameterTypes_Response__get_serialized_size+0x26>
 801a954:	6845      	ldr	r5, [r0, #4]
 801a956:	2104      	movs	r1, #4
 801a958:	2000      	movs	r0, #0
 801a95a:	f7f8 faab 	bl	8012eb4 <ucdr_alignment>
 801a95e:	1d04      	adds	r4, r0, #4
 801a960:	b90d      	cbnz	r5, 801a966 <_GetParameterTypes_Response__get_serialized_size+0x16>
 801a962:	4620      	mov	r0, r4
 801a964:	bd38      	pop	{r3, r4, r5, pc}
 801a966:	4620      	mov	r0, r4
 801a968:	2101      	movs	r1, #1
 801a96a:	f7f8 faa3 	bl	8012eb4 <ucdr_alignment>
 801a96e:	442c      	add	r4, r5
 801a970:	4404      	add	r4, r0
 801a972:	4620      	mov	r0, r4
 801a974:	bd38      	pop	{r3, r4, r5, pc}
 801a976:	4604      	mov	r4, r0
 801a978:	4620      	mov	r0, r4
 801a97a:	bd38      	pop	{r3, r4, r5, pc}

0801a97c <get_serialized_size_rcl_interfaces__srv__GetParameterTypes_Request>:
 801a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a980:	4680      	mov	r8, r0
 801a982:	b1d8      	cbz	r0, 801a9bc <get_serialized_size_rcl_interfaces__srv__GetParameterTypes_Request+0x40>
 801a984:	460e      	mov	r6, r1
 801a986:	6845      	ldr	r5, [r0, #4]
 801a988:	2104      	movs	r1, #4
 801a98a:	4630      	mov	r0, r6
 801a98c:	f7f8 fa92 	bl	8012eb4 <ucdr_alignment>
 801a990:	1d32      	adds	r2, r6, #4
 801a992:	1814      	adds	r4, r2, r0
 801a994:	b18d      	cbz	r5, 801a9ba <get_serialized_size_rcl_interfaces__srv__GetParameterTypes_Request+0x3e>
 801a996:	2700      	movs	r7, #0
 801a998:	4620      	mov	r0, r4
 801a99a:	2104      	movs	r1, #4
 801a99c:	f7f8 fa8a 	bl	8012eb4 <ucdr_alignment>
 801a9a0:	f8d8 3000 	ldr.w	r3, [r8]
 801a9a4:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 801a9a8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801a9ac:	3701      	adds	r7, #1
 801a9ae:	1903      	adds	r3, r0, r4
 801a9b0:	6854      	ldr	r4, [r2, #4]
 801a9b2:	3305      	adds	r3, #5
 801a9b4:	42bd      	cmp	r5, r7
 801a9b6:	441c      	add	r4, r3
 801a9b8:	d1ee      	bne.n	801a998 <get_serialized_size_rcl_interfaces__srv__GetParameterTypes_Request+0x1c>
 801a9ba:	1ba0      	subs	r0, r4, r6
 801a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a9c0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes>:
 801a9c0:	4800      	ldr	r0, [pc, #0]	@ (801a9c4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameterTypes+0x4>)
 801a9c2:	4770      	bx	lr
 801a9c4:	2000164c 	.word	0x2000164c

0801a9c8 <_GetParameters_Request__max_serialized_size>:
 801a9c8:	2000      	movs	r0, #0
 801a9ca:	4770      	bx	lr

0801a9cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request>:
 801a9cc:	4800      	ldr	r0, [pc, #0]	@ (801a9d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Request+0x4>)
 801a9ce:	4770      	bx	lr
 801a9d0:	200016c4 	.word	0x200016c4

0801a9d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response>:
 801a9d4:	4800      	ldr	r0, [pc, #0]	@ (801a9d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__GetParameters_Response+0x4>)
 801a9d6:	4770      	bx	lr
 801a9d8:	200016d0 	.word	0x200016d0

0801a9dc <_GetParameters_Request__get_serialized_size>:
 801a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9de:	4607      	mov	r7, r0
 801a9e0:	b1c8      	cbz	r0, 801aa16 <_GetParameters_Request__get_serialized_size+0x3a>
 801a9e2:	6846      	ldr	r6, [r0, #4]
 801a9e4:	2104      	movs	r1, #4
 801a9e6:	2000      	movs	r0, #0
 801a9e8:	f7f8 fa64 	bl	8012eb4 <ucdr_alignment>
 801a9ec:	1d04      	adds	r4, r0, #4
 801a9ee:	b186      	cbz	r6, 801aa12 <_GetParameters_Request__get_serialized_size+0x36>
 801a9f0:	2500      	movs	r5, #0
 801a9f2:	4620      	mov	r0, r4
 801a9f4:	2104      	movs	r1, #4
 801a9f6:	f7f8 fa5d 	bl	8012eb4 <ucdr_alignment>
 801a9fa:	683b      	ldr	r3, [r7, #0]
 801a9fc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801aa00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801aa04:	4404      	add	r4, r0
 801aa06:	685b      	ldr	r3, [r3, #4]
 801aa08:	3501      	adds	r5, #1
 801aa0a:	3405      	adds	r4, #5
 801aa0c:	42ae      	cmp	r6, r5
 801aa0e:	441c      	add	r4, r3
 801aa10:	d1ef      	bne.n	801a9f2 <_GetParameters_Request__get_serialized_size+0x16>
 801aa12:	4620      	mov	r0, r4
 801aa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa16:	4604      	mov	r4, r0
 801aa18:	4620      	mov	r0, r4
 801aa1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa1c <_GetParameters_Request__cdr_deserialize>:
 801aa1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa20:	460d      	mov	r5, r1
 801aa22:	b083      	sub	sp, #12
 801aa24:	2900      	cmp	r1, #0
 801aa26:	d037      	beq.n	801aa98 <_GetParameters_Request__cdr_deserialize+0x7c>
 801aa28:	4669      	mov	r1, sp
 801aa2a:	4606      	mov	r6, r0
 801aa2c:	f7f6 fd76 	bl	801151c <ucdr_deserialize_uint32_t>
 801aa30:	9900      	ldr	r1, [sp, #0]
 801aa32:	68ab      	ldr	r3, [r5, #8]
 801aa34:	428b      	cmp	r3, r1
 801aa36:	4680      	mov	r8, r0
 801aa38:	d32e      	bcc.n	801aa98 <_GetParameters_Request__cdr_deserialize+0x7c>
 801aa3a:	6069      	str	r1, [r5, #4]
 801aa3c:	2400      	movs	r4, #0
 801aa3e:	b368      	cbz	r0, 801aa9c <_GetParameters_Request__cdr_deserialize+0x80>
 801aa40:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801aa44:	42a1      	cmp	r1, r4
 801aa46:	ab01      	add	r3, sp, #4
 801aa48:	4630      	mov	r0, r6
 801aa4a:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801aa4e:	d925      	bls.n	801aa9c <_GetParameters_Request__cdr_deserialize+0x80>
 801aa50:	6829      	ldr	r1, [r5, #0]
 801aa52:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801aa56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aa5a:	f8dc 9008 	ldr.w	r9, [ip, #8]
 801aa5e:	464a      	mov	r2, r9
 801aa60:	f7f8 faa6 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801aa64:	3401      	adds	r4, #1
 801aa66:	9a01      	ldr	r2, [sp, #4]
 801aa68:	4603      	mov	r3, r0
 801aa6a:	b130      	cbz	r0, 801aa7a <_GetParameters_Request__cdr_deserialize+0x5e>
 801aa6c:	b102      	cbz	r2, 801aa70 <_GetParameters_Request__cdr_deserialize+0x54>
 801aa6e:	3a01      	subs	r2, #1
 801aa70:	682b      	ldr	r3, [r5, #0]
 801aa72:	9900      	ldr	r1, [sp, #0]
 801aa74:	443b      	add	r3, r7
 801aa76:	605a      	str	r2, [r3, #4]
 801aa78:	e7e2      	b.n	801aa40 <_GetParameters_Request__cdr_deserialize+0x24>
 801aa7a:	4591      	cmp	r9, r2
 801aa7c:	d20c      	bcs.n	801aa98 <_GetParameters_Request__cdr_deserialize+0x7c>
 801aa7e:	2101      	movs	r1, #1
 801aa80:	7571      	strb	r1, [r6, #21]
 801aa82:	682a      	ldr	r2, [r5, #0]
 801aa84:	75b0      	strb	r0, [r6, #22]
 801aa86:	4417      	add	r7, r2
 801aa88:	4630      	mov	r0, r6
 801aa8a:	607b      	str	r3, [r7, #4]
 801aa8c:	f7f8 fa28 	bl	8012ee0 <ucdr_align_to>
 801aa90:	9901      	ldr	r1, [sp, #4]
 801aa92:	4630      	mov	r0, r6
 801aa94:	f7f8 fa5a 	bl	8012f4c <ucdr_advance_buffer>
 801aa98:	f04f 0800 	mov.w	r8, #0
 801aa9c:	4640      	mov	r0, r8
 801aa9e:	b003      	add	sp, #12
 801aaa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801aaa4 <_GetParameters_Request__cdr_serialize>:
 801aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaa8:	b338      	cbz	r0, 801aafa <_GetParameters_Request__cdr_serialize+0x56>
 801aaaa:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801aaae:	460f      	mov	r7, r1
 801aab0:	4606      	mov	r6, r0
 801aab2:	4608      	mov	r0, r1
 801aab4:	4641      	mov	r1, r8
 801aab6:	f7f6 fc01 	bl	80112bc <ucdr_serialize_uint32_t>
 801aaba:	4681      	mov	r9, r0
 801aabc:	b1e8      	cbz	r0, 801aafa <_GetParameters_Request__cdr_serialize+0x56>
 801aabe:	f1b8 0f00 	cmp.w	r8, #0
 801aac2:	d01c      	beq.n	801aafe <_GetParameters_Request__cdr_serialize+0x5a>
 801aac4:	2400      	movs	r4, #0
 801aac6:	e00c      	b.n	801aae2 <_GetParameters_Request__cdr_serialize+0x3e>
 801aac8:	f7e5 fb9a 	bl	8000200 <strlen>
 801aacc:	1c42      	adds	r2, r0, #1
 801aace:	f8ca 0004 	str.w	r0, [sl, #4]
 801aad2:	4629      	mov	r1, r5
 801aad4:	4638      	mov	r0, r7
 801aad6:	f7f8 fa59 	bl	8012f8c <ucdr_serialize_sequence_char>
 801aada:	3401      	adds	r4, #1
 801aadc:	b168      	cbz	r0, 801aafa <_GetParameters_Request__cdr_serialize+0x56>
 801aade:	45a0      	cmp	r8, r4
 801aae0:	d00d      	beq.n	801aafe <_GetParameters_Request__cdr_serialize+0x5a>
 801aae2:	6833      	ldr	r3, [r6, #0]
 801aae4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801aae8:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 801aaec:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801aaf0:	4628      	mov	r0, r5
 801aaf2:	2d00      	cmp	r5, #0
 801aaf4:	d1e8      	bne.n	801aac8 <_GetParameters_Request__cdr_serialize+0x24>
 801aaf6:	462a      	mov	r2, r5
 801aaf8:	e7e9      	b.n	801aace <_GetParameters_Request__cdr_serialize+0x2a>
 801aafa:	f04f 0900 	mov.w	r9, #0
 801aafe:	4648      	mov	r0, r9
 801ab00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801ab04 <get_serialized_size_rcl_interfaces__srv__GetParameters_Response>:
 801ab04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab08:	4607      	mov	r7, r0
 801ab0a:	b338      	cbz	r0, 801ab5c <get_serialized_size_rcl_interfaces__srv__GetParameters_Response+0x58>
 801ab0c:	4689      	mov	r9, r1
 801ab0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ab12:	2104      	movs	r1, #4
 801ab14:	4648      	mov	r0, r9
 801ab16:	f7f8 f9cd 	bl	8012eb4 <ucdr_alignment>
 801ab1a:	f109 0604 	add.w	r6, r9, #4
 801ab1e:	4406      	add	r6, r0
 801ab20:	f1b8 0f00 	cmp.w	r8, #0
 801ab24:	d018      	beq.n	801ab58 <get_serialized_size_rcl_interfaces__srv__GetParameters_Response+0x54>
 801ab26:	2500      	movs	r5, #0
 801ab28:	f001 f860 	bl	801bbec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 801ab2c:	683a      	ldr	r2, [r7, #0]
 801ab2e:	6843      	ldr	r3, [r0, #4]
 801ab30:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801ab34:	4631      	mov	r1, r6
 801ab36:	695b      	ldr	r3, [r3, #20]
 801ab38:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 801ab3c:	4798      	blx	r3
 801ab3e:	4604      	mov	r4, r0
 801ab40:	2c04      	cmp	r4, #4
 801ab42:	4621      	mov	r1, r4
 801ab44:	4630      	mov	r0, r6
 801ab46:	bf28      	it	cs
 801ab48:	2104      	movcs	r1, #4
 801ab4a:	f7f8 f9b3 	bl	8012eb4 <ucdr_alignment>
 801ab4e:	3501      	adds	r5, #1
 801ab50:	4404      	add	r4, r0
 801ab52:	45a8      	cmp	r8, r5
 801ab54:	4426      	add	r6, r4
 801ab56:	d1e7      	bne.n	801ab28 <get_serialized_size_rcl_interfaces__srv__GetParameters_Response+0x24>
 801ab58:	eba6 0009 	sub.w	r0, r6, r9
 801ab5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801ab60 <_GetParameters_Response__cdr_deserialize>:
 801ab60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab62:	460e      	mov	r6, r1
 801ab64:	b083      	sub	sp, #12
 801ab66:	b301      	cbz	r1, 801abaa <_GetParameters_Response__cdr_deserialize+0x4a>
 801ab68:	a901      	add	r1, sp, #4
 801ab6a:	4607      	mov	r7, r0
 801ab6c:	f7f6 fcd6 	bl	801151c <ucdr_deserialize_uint32_t>
 801ab70:	9b01      	ldr	r3, [sp, #4]
 801ab72:	68b2      	ldr	r2, [r6, #8]
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d315      	bcc.n	801aba4 <_GetParameters_Response__cdr_deserialize+0x44>
 801ab78:	6073      	str	r3, [r6, #4]
 801ab7a:	b1a3      	cbz	r3, 801aba6 <_GetParameters_Response__cdr_deserialize+0x46>
 801ab7c:	2400      	movs	r4, #0
 801ab7e:	4625      	mov	r5, r4
 801ab80:	e002      	b.n	801ab88 <_GetParameters_Response__cdr_deserialize+0x28>
 801ab82:	9b01      	ldr	r3, [sp, #4]
 801ab84:	429d      	cmp	r5, r3
 801ab86:	d20e      	bcs.n	801aba6 <_GetParameters_Response__cdr_deserialize+0x46>
 801ab88:	f001 f830 	bl	801bbec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 801ab8c:	6831      	ldr	r1, [r6, #0]
 801ab8e:	6843      	ldr	r3, [r0, #4]
 801ab90:	4421      	add	r1, r4
 801ab92:	68db      	ldr	r3, [r3, #12]
 801ab94:	4638      	mov	r0, r7
 801ab96:	4798      	blx	r3
 801ab98:	3501      	adds	r5, #1
 801ab9a:	3460      	adds	r4, #96	@ 0x60
 801ab9c:	2800      	cmp	r0, #0
 801ab9e:	d1f0      	bne.n	801ab82 <_GetParameters_Response__cdr_deserialize+0x22>
 801aba0:	b003      	add	sp, #12
 801aba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aba4:	2000      	movs	r0, #0
 801aba6:	b003      	add	sp, #12
 801aba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801abaa:	4608      	mov	r0, r1
 801abac:	b003      	add	sp, #12
 801abae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801abb0 <_GetParameters_Response__cdr_serialize>:
 801abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abb4:	b1d8      	cbz	r0, 801abee <_GetParameters_Response__cdr_serialize+0x3e>
 801abb6:	6847      	ldr	r7, [r0, #4]
 801abb8:	460e      	mov	r6, r1
 801abba:	4605      	mov	r5, r0
 801abbc:	4608      	mov	r0, r1
 801abbe:	4639      	mov	r1, r7
 801abc0:	f7f6 fb7c 	bl	80112bc <ucdr_serialize_uint32_t>
 801abc4:	4680      	mov	r8, r0
 801abc6:	b190      	cbz	r0, 801abee <_GetParameters_Response__cdr_serialize+0x3e>
 801abc8:	b19f      	cbz	r7, 801abf2 <_GetParameters_Response__cdr_serialize+0x42>
 801abca:	2400      	movs	r4, #0
 801abcc:	e001      	b.n	801abd2 <_GetParameters_Response__cdr_serialize+0x22>
 801abce:	42a7      	cmp	r7, r4
 801abd0:	d00f      	beq.n	801abf2 <_GetParameters_Response__cdr_serialize+0x42>
 801abd2:	f001 f80b 	bl	801bbec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 801abd6:	682a      	ldr	r2, [r5, #0]
 801abd8:	6843      	ldr	r3, [r0, #4]
 801abda:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 801abde:	689b      	ldr	r3, [r3, #8]
 801abe0:	4631      	mov	r1, r6
 801abe2:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 801abe6:	3401      	adds	r4, #1
 801abe8:	4798      	blx	r3
 801abea:	2800      	cmp	r0, #0
 801abec:	d1ef      	bne.n	801abce <_GetParameters_Response__cdr_serialize+0x1e>
 801abee:	f04f 0800 	mov.w	r8, #0
 801abf2:	4640      	mov	r0, r8
 801abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801abf8 <_GetParameters_Response__max_serialized_size>:
 801abf8:	2000      	movs	r0, #0
 801abfa:	4770      	bx	lr

0801abfc <get_serialized_size_rcl_interfaces__srv__GetParameters_Request>:
 801abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac00:	4680      	mov	r8, r0
 801ac02:	b1d8      	cbz	r0, 801ac3c <get_serialized_size_rcl_interfaces__srv__GetParameters_Request+0x40>
 801ac04:	460e      	mov	r6, r1
 801ac06:	6845      	ldr	r5, [r0, #4]
 801ac08:	2104      	movs	r1, #4
 801ac0a:	4630      	mov	r0, r6
 801ac0c:	f7f8 f952 	bl	8012eb4 <ucdr_alignment>
 801ac10:	1d32      	adds	r2, r6, #4
 801ac12:	1814      	adds	r4, r2, r0
 801ac14:	b18d      	cbz	r5, 801ac3a <get_serialized_size_rcl_interfaces__srv__GetParameters_Request+0x3e>
 801ac16:	2700      	movs	r7, #0
 801ac18:	4620      	mov	r0, r4
 801ac1a:	2104      	movs	r1, #4
 801ac1c:	f7f8 f94a 	bl	8012eb4 <ucdr_alignment>
 801ac20:	f8d8 3000 	ldr.w	r3, [r8]
 801ac24:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 801ac28:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801ac2c:	3701      	adds	r7, #1
 801ac2e:	1903      	adds	r3, r0, r4
 801ac30:	6854      	ldr	r4, [r2, #4]
 801ac32:	3305      	adds	r3, #5
 801ac34:	42bd      	cmp	r5, r7
 801ac36:	441c      	add	r4, r3
 801ac38:	d1ee      	bne.n	801ac18 <get_serialized_size_rcl_interfaces__srv__GetParameters_Request+0x1c>
 801ac3a:	1ba0      	subs	r0, r4, r6
 801ac3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ac40 <_GetParameters_Response__get_serialized_size>:
 801ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac44:	4607      	mov	r7, r0
 801ac46:	b328      	cbz	r0, 801ac94 <_GetParameters_Response__get_serialized_size+0x54>
 801ac48:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801ac4c:	2104      	movs	r1, #4
 801ac4e:	2000      	movs	r0, #0
 801ac50:	f7f8 f930 	bl	8012eb4 <ucdr_alignment>
 801ac54:	1d06      	adds	r6, r0, #4
 801ac56:	f1b8 0f00 	cmp.w	r8, #0
 801ac5a:	d018      	beq.n	801ac8e <_GetParameters_Response__get_serialized_size+0x4e>
 801ac5c:	2500      	movs	r5, #0
 801ac5e:	f000 ffc5 	bl	801bbec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 801ac62:	683a      	ldr	r2, [r7, #0]
 801ac64:	6843      	ldr	r3, [r0, #4]
 801ac66:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801ac6a:	4631      	mov	r1, r6
 801ac6c:	695b      	ldr	r3, [r3, #20]
 801ac6e:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 801ac72:	4798      	blx	r3
 801ac74:	4604      	mov	r4, r0
 801ac76:	2c04      	cmp	r4, #4
 801ac78:	4621      	mov	r1, r4
 801ac7a:	4630      	mov	r0, r6
 801ac7c:	bf28      	it	cs
 801ac7e:	2104      	movcs	r1, #4
 801ac80:	f7f8 f918 	bl	8012eb4 <ucdr_alignment>
 801ac84:	3501      	adds	r5, #1
 801ac86:	4404      	add	r4, r0
 801ac88:	45a8      	cmp	r8, r5
 801ac8a:	4426      	add	r6, r4
 801ac8c:	d1e7      	bne.n	801ac5e <_GetParameters_Response__get_serialized_size+0x1e>
 801ac8e:	4630      	mov	r0, r6
 801ac90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac94:	4606      	mov	r6, r0
 801ac96:	4630      	mov	r0, r6
 801ac98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ac9c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters>:
 801ac9c:	4800      	ldr	r0, [pc, #0]	@ (801aca0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__GetParameters+0x4>)
 801ac9e:	4770      	bx	lr
 801aca0:	200016b8 	.word	0x200016b8

0801aca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request>:
 801aca4:	4800      	ldr	r0, [pc, #0]	@ (801aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Request+0x4>)
 801aca6:	4770      	bx	lr
 801aca8:	20001730 	.word	0x20001730

0801acac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response>:
 801acac:	4800      	ldr	r0, [pc, #0]	@ (801acb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response+0x4>)
 801acae:	4770      	bx	lr
 801acb0:	2000173c 	.word	0x2000173c

0801acb4 <_ListParameters_Request__max_serialized_size>:
 801acb4:	b508      	push	{r3, lr}
 801acb6:	2108      	movs	r1, #8
 801acb8:	2000      	movs	r0, #0
 801acba:	f7f8 f8fb 	bl	8012eb4 <ucdr_alignment>
 801acbe:	3008      	adds	r0, #8
 801acc0:	bd08      	pop	{r3, pc}
 801acc2:	bf00      	nop

0801acc4 <get_serialized_size_rcl_interfaces__srv__ListParameters_Response>:
 801acc4:	b108      	cbz	r0, 801acca <get_serialized_size_rcl_interfaces__srv__ListParameters_Response+0x6>
 801acc6:	f000 b941 	b.w	801af4c <get_serialized_size_rcl_interfaces__msg__ListParametersResult>
 801acca:	4770      	bx	lr

0801accc <_ListParameters_Response__max_serialized_size>:
 801accc:	b500      	push	{lr}
 801acce:	b083      	sub	sp, #12
 801acd0:	2301      	movs	r3, #1
 801acd2:	2100      	movs	r1, #0
 801acd4:	f10d 0007 	add.w	r0, sp, #7
 801acd8:	f88d 3007 	strb.w	r3, [sp, #7]
 801acdc:	f000 fa14 	bl	801b108 <max_serialized_size_rcl_interfaces__msg__ListParametersResult>
 801ace0:	b003      	add	sp, #12
 801ace2:	f85d fb04 	ldr.w	pc, [sp], #4
 801ace6:	bf00      	nop

0801ace8 <_ListParameters_Request__get_serialized_size>:
 801ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acea:	4607      	mov	r7, r0
 801acec:	b1e8      	cbz	r0, 801ad2a <_ListParameters_Request__get_serialized_size+0x42>
 801acee:	6846      	ldr	r6, [r0, #4]
 801acf0:	2104      	movs	r1, #4
 801acf2:	2000      	movs	r0, #0
 801acf4:	f7f8 f8de 	bl	8012eb4 <ucdr_alignment>
 801acf8:	1d04      	adds	r4, r0, #4
 801acfa:	b186      	cbz	r6, 801ad1e <_ListParameters_Request__get_serialized_size+0x36>
 801acfc:	2500      	movs	r5, #0
 801acfe:	4620      	mov	r0, r4
 801ad00:	2104      	movs	r1, #4
 801ad02:	f7f8 f8d7 	bl	8012eb4 <ucdr_alignment>
 801ad06:	683a      	ldr	r2, [r7, #0]
 801ad08:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801ad0c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ad10:	3501      	adds	r5, #1
 801ad12:	1903      	adds	r3, r0, r4
 801ad14:	6854      	ldr	r4, [r2, #4]
 801ad16:	3305      	adds	r3, #5
 801ad18:	42ae      	cmp	r6, r5
 801ad1a:	441c      	add	r4, r3
 801ad1c:	d1ef      	bne.n	801acfe <_ListParameters_Request__get_serialized_size+0x16>
 801ad1e:	2108      	movs	r1, #8
 801ad20:	4620      	mov	r0, r4
 801ad22:	f7f8 f8c7 	bl	8012eb4 <ucdr_alignment>
 801ad26:	4420      	add	r0, r4
 801ad28:	3008      	adds	r0, #8
 801ad2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ad2c <_ListParameters_Request__cdr_deserialize>:
 801ad2c:	2900      	cmp	r1, #0
 801ad2e:	d047      	beq.n	801adc0 <_ListParameters_Request__cdr_deserialize+0x94>
 801ad30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad34:	460d      	mov	r5, r1
 801ad36:	b082      	sub	sp, #8
 801ad38:	4669      	mov	r1, sp
 801ad3a:	4606      	mov	r6, r0
 801ad3c:	f7f6 fbee 	bl	801151c <ucdr_deserialize_uint32_t>
 801ad40:	9900      	ldr	r1, [sp, #0]
 801ad42:	68ab      	ldr	r3, [r5, #8]
 801ad44:	428b      	cmp	r3, r1
 801ad46:	d31e      	bcc.n	801ad86 <_ListParameters_Request__cdr_deserialize+0x5a>
 801ad48:	6069      	str	r1, [r5, #4]
 801ad4a:	2400      	movs	r4, #0
 801ad4c:	b310      	cbz	r0, 801ad94 <_ListParameters_Request__cdr_deserialize+0x68>
 801ad4e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801ad52:	428c      	cmp	r4, r1
 801ad54:	ab01      	add	r3, sp, #4
 801ad56:	4630      	mov	r0, r6
 801ad58:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801ad5c:	d21a      	bcs.n	801ad94 <_ListParameters_Request__cdr_deserialize+0x68>
 801ad5e:	6829      	ldr	r1, [r5, #0]
 801ad60:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801ad64:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801ad68:	f8dc 8008 	ldr.w	r8, [ip, #8]
 801ad6c:	4642      	mov	r2, r8
 801ad6e:	3401      	adds	r4, #1
 801ad70:	f7f8 f91e 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801ad74:	b158      	cbz	r0, 801ad8e <_ListParameters_Request__cdr_deserialize+0x62>
 801ad76:	9a01      	ldr	r2, [sp, #4]
 801ad78:	b102      	cbz	r2, 801ad7c <_ListParameters_Request__cdr_deserialize+0x50>
 801ad7a:	3a01      	subs	r2, #1
 801ad7c:	682b      	ldr	r3, [r5, #0]
 801ad7e:	9900      	ldr	r1, [sp, #0]
 801ad80:	443b      	add	r3, r7
 801ad82:	605a      	str	r2, [r3, #4]
 801ad84:	e7e3      	b.n	801ad4e <_ListParameters_Request__cdr_deserialize+0x22>
 801ad86:	2000      	movs	r0, #0
 801ad88:	b002      	add	sp, #8
 801ad8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad8e:	9b01      	ldr	r3, [sp, #4]
 801ad90:	4598      	cmp	r8, r3
 801ad92:	d307      	bcc.n	801ada4 <_ListParameters_Request__cdr_deserialize+0x78>
 801ad94:	f105 0110 	add.w	r1, r5, #16
 801ad98:	4630      	mov	r0, r6
 801ad9a:	b002      	add	sp, #8
 801ad9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ada0:	f7f6 bdb2 	b.w	8011908 <ucdr_deserialize_uint64_t>
 801ada4:	2101      	movs	r1, #1
 801ada6:	7571      	strb	r1, [r6, #21]
 801ada8:	682b      	ldr	r3, [r5, #0]
 801adaa:	75b0      	strb	r0, [r6, #22]
 801adac:	443b      	add	r3, r7
 801adae:	6058      	str	r0, [r3, #4]
 801adb0:	4630      	mov	r0, r6
 801adb2:	f7f8 f895 	bl	8012ee0 <ucdr_align_to>
 801adb6:	9901      	ldr	r1, [sp, #4]
 801adb8:	4630      	mov	r0, r6
 801adba:	f7f8 f8c7 	bl	8012f4c <ucdr_advance_buffer>
 801adbe:	e7e9      	b.n	801ad94 <_ListParameters_Request__cdr_deserialize+0x68>
 801adc0:	2000      	movs	r0, #0
 801adc2:	4770      	bx	lr

0801adc4 <_ListParameters_Request__cdr_serialize>:
 801adc4:	b378      	cbz	r0, 801ae26 <_ListParameters_Request__cdr_serialize+0x62>
 801adc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adca:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801adce:	460f      	mov	r7, r1
 801add0:	4606      	mov	r6, r0
 801add2:	4608      	mov	r0, r1
 801add4:	4641      	mov	r1, r8
 801add6:	f7f6 fa71 	bl	80112bc <ucdr_serialize_uint32_t>
 801adda:	b1e8      	cbz	r0, 801ae18 <_ListParameters_Request__cdr_serialize+0x54>
 801addc:	f1b8 0f00 	cmp.w	r8, #0
 801ade0:	d01a      	beq.n	801ae18 <_ListParameters_Request__cdr_serialize+0x54>
 801ade2:	2400      	movs	r4, #0
 801ade4:	e00c      	b.n	801ae00 <_ListParameters_Request__cdr_serialize+0x3c>
 801ade6:	f7e5 fa0b 	bl	8000200 <strlen>
 801adea:	1c42      	adds	r2, r0, #1
 801adec:	f8c9 0004 	str.w	r0, [r9, #4]
 801adf0:	4629      	mov	r1, r5
 801adf2:	4638      	mov	r0, r7
 801adf4:	f7f8 f8ca 	bl	8012f8c <ucdr_serialize_sequence_char>
 801adf8:	3401      	adds	r4, #1
 801adfa:	b168      	cbz	r0, 801ae18 <_ListParameters_Request__cdr_serialize+0x54>
 801adfc:	45a0      	cmp	r8, r4
 801adfe:	d00b      	beq.n	801ae18 <_ListParameters_Request__cdr_serialize+0x54>
 801ae00:	6833      	ldr	r3, [r6, #0]
 801ae02:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801ae06:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801ae0a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801ae0e:	4628      	mov	r0, r5
 801ae10:	2d00      	cmp	r5, #0
 801ae12:	d1e8      	bne.n	801ade6 <_ListParameters_Request__cdr_serialize+0x22>
 801ae14:	462a      	mov	r2, r5
 801ae16:	e7e9      	b.n	801adec <_ListParameters_Request__cdr_serialize+0x28>
 801ae18:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801ae1c:	4638      	mov	r0, r7
 801ae1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae22:	f7f6 bca1 	b.w	8011768 <ucdr_serialize_uint64_t>
 801ae26:	4770      	bx	lr

0801ae28 <_ListParameters_Response__get_serialized_size>:
 801ae28:	b110      	cbz	r0, 801ae30 <_ListParameters_Response__get_serialized_size+0x8>
 801ae2a:	2100      	movs	r1, #0
 801ae2c:	f000 b88e 	b.w	801af4c <get_serialized_size_rcl_interfaces__msg__ListParametersResult>
 801ae30:	4770      	bx	lr
 801ae32:	bf00      	nop

0801ae34 <_ListParameters_Response__cdr_deserialize>:
 801ae34:	b570      	push	{r4, r5, r6, lr}
 801ae36:	460c      	mov	r4, r1
 801ae38:	b149      	cbz	r1, 801ae4e <_ListParameters_Response__cdr_deserialize+0x1a>
 801ae3a:	4605      	mov	r5, r0
 801ae3c:	f000 f968 	bl	801b110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult>
 801ae40:	6843      	ldr	r3, [r0, #4]
 801ae42:	4621      	mov	r1, r4
 801ae44:	4628      	mov	r0, r5
 801ae46:	68db      	ldr	r3, [r3, #12]
 801ae48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae4c:	4718      	bx	r3
 801ae4e:	4608      	mov	r0, r1
 801ae50:	bd70      	pop	{r4, r5, r6, pc}
 801ae52:	bf00      	nop

0801ae54 <_ListParameters_Response__cdr_serialize>:
 801ae54:	b158      	cbz	r0, 801ae6e <_ListParameters_Response__cdr_serialize+0x1a>
 801ae56:	b570      	push	{r4, r5, r6, lr}
 801ae58:	460d      	mov	r5, r1
 801ae5a:	4604      	mov	r4, r0
 801ae5c:	f000 f958 	bl	801b110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult>
 801ae60:	6843      	ldr	r3, [r0, #4]
 801ae62:	4629      	mov	r1, r5
 801ae64:	4620      	mov	r0, r4
 801ae66:	689b      	ldr	r3, [r3, #8]
 801ae68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae6c:	4718      	bx	r3
 801ae6e:	4770      	bx	lr

0801ae70 <get_serialized_size_rcl_interfaces__srv__ListParameters_Request>:
 801ae70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae74:	4680      	mov	r8, r0
 801ae76:	b310      	cbz	r0, 801aebe <get_serialized_size_rcl_interfaces__srv__ListParameters_Request+0x4e>
 801ae78:	460e      	mov	r6, r1
 801ae7a:	6847      	ldr	r7, [r0, #4]
 801ae7c:	2104      	movs	r1, #4
 801ae7e:	4630      	mov	r0, r6
 801ae80:	f7f8 f818 	bl	8012eb4 <ucdr_alignment>
 801ae84:	1d33      	adds	r3, r6, #4
 801ae86:	181c      	adds	r4, r3, r0
 801ae88:	b18f      	cbz	r7, 801aeae <get_serialized_size_rcl_interfaces__srv__ListParameters_Request+0x3e>
 801ae8a:	2500      	movs	r5, #0
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	2104      	movs	r1, #4
 801ae90:	f7f8 f810 	bl	8012eb4 <ucdr_alignment>
 801ae94:	f8d8 3000 	ldr.w	r3, [r8]
 801ae98:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ae9c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801aea0:	3501      	adds	r5, #1
 801aea2:	1903      	adds	r3, r0, r4
 801aea4:	6854      	ldr	r4, [r2, #4]
 801aea6:	3305      	adds	r3, #5
 801aea8:	42af      	cmp	r7, r5
 801aeaa:	441c      	add	r4, r3
 801aeac:	d1ee      	bne.n	801ae8c <get_serialized_size_rcl_interfaces__srv__ListParameters_Request+0x1c>
 801aeae:	2108      	movs	r1, #8
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	f7f7 ffff 	bl	8012eb4 <ucdr_alignment>
 801aeb6:	f1c6 0308 	rsb	r3, r6, #8
 801aeba:	4423      	add	r3, r4
 801aebc:	4418      	add	r0, r3
 801aebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec2:	bf00      	nop

0801aec4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters>:
 801aec4:	4800      	ldr	r0, [pc, #0]	@ (801aec8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__ListParameters+0x4>)
 801aec6:	4770      	bx	lr
 801aec8:	20001724 	.word	0x20001724

0801aecc <_ListParametersResult__max_serialized_size>:
 801aecc:	2000      	movs	r0, #0
 801aece:	4770      	bx	lr

0801aed0 <get_serialized_size_rcl_interfaces__msg__ListParametersResult.part.0>:
 801aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aed4:	460d      	mov	r5, r1
 801aed6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801aeda:	4604      	mov	r4, r0
 801aedc:	2104      	movs	r1, #4
 801aede:	4628      	mov	r0, r5
 801aee0:	f7f7 ffe8 	bl	8012eb4 <ucdr_alignment>
 801aee4:	1d2a      	adds	r2, r5, #4
 801aee6:	1886      	adds	r6, r0, r2
 801aee8:	f1b8 0f00 	cmp.w	r8, #0
 801aeec:	d010      	beq.n	801af10 <get_serialized_size_rcl_interfaces__msg__ListParametersResult.part.0+0x40>
 801aeee:	2700      	movs	r7, #0
 801aef0:	4630      	mov	r0, r6
 801aef2:	2104      	movs	r1, #4
 801aef4:	f7f7 ffde 	bl	8012eb4 <ucdr_alignment>
 801aef8:	6823      	ldr	r3, [r4, #0]
 801aefa:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 801aefe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801af02:	3701      	adds	r7, #1
 801af04:	1983      	adds	r3, r0, r6
 801af06:	6856      	ldr	r6, [r2, #4]
 801af08:	3305      	adds	r3, #5
 801af0a:	45b8      	cmp	r8, r7
 801af0c:	441e      	add	r6, r3
 801af0e:	d1ef      	bne.n	801aef0 <get_serialized_size_rcl_interfaces__msg__ListParametersResult.part.0+0x20>
 801af10:	4630      	mov	r0, r6
 801af12:	2104      	movs	r1, #4
 801af14:	6927      	ldr	r7, [r4, #16]
 801af16:	f7f7 ffcd 	bl	8012eb4 <ucdr_alignment>
 801af1a:	1983      	adds	r3, r0, r6
 801af1c:	1d1e      	adds	r6, r3, #4
 801af1e:	b197      	cbz	r7, 801af46 <get_serialized_size_rcl_interfaces__msg__ListParametersResult.part.0+0x76>
 801af20:	f04f 0800 	mov.w	r8, #0
 801af24:	4630      	mov	r0, r6
 801af26:	2104      	movs	r1, #4
 801af28:	f7f7 ffc4 	bl	8012eb4 <ucdr_alignment>
 801af2c:	68e3      	ldr	r3, [r4, #12]
 801af2e:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801af32:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801af36:	f108 0801 	add.w	r8, r8, #1
 801af3a:	1983      	adds	r3, r0, r6
 801af3c:	6856      	ldr	r6, [r2, #4]
 801af3e:	3305      	adds	r3, #5
 801af40:	4547      	cmp	r7, r8
 801af42:	441e      	add	r6, r3
 801af44:	d1ee      	bne.n	801af24 <get_serialized_size_rcl_interfaces__msg__ListParametersResult.part.0+0x54>
 801af46:	1b70      	subs	r0, r6, r5
 801af48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801af4c <get_serialized_size_rcl_interfaces__msg__ListParametersResult>:
 801af4c:	b108      	cbz	r0, 801af52 <get_serialized_size_rcl_interfaces__msg__ListParametersResult+0x6>
 801af4e:	f7ff bfbf 	b.w	801aed0 <get_serialized_size_rcl_interfaces__msg__ListParametersResult.part.0>
 801af52:	4770      	bx	lr

0801af54 <_ListParametersResult__get_serialized_size>:
 801af54:	b110      	cbz	r0, 801af5c <_ListParametersResult__get_serialized_size+0x8>
 801af56:	2100      	movs	r1, #0
 801af58:	f7ff bfba 	b.w	801aed0 <get_serialized_size_rcl_interfaces__msg__ListParametersResult.part.0>
 801af5c:	4770      	bx	lr
 801af5e:	bf00      	nop

0801af60 <_ListParametersResult__cdr_deserialize>:
 801af60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af64:	460d      	mov	r5, r1
 801af66:	b083      	sub	sp, #12
 801af68:	2900      	cmp	r1, #0
 801af6a:	d035      	beq.n	801afd8 <_ListParametersResult__cdr_deserialize+0x78>
 801af6c:	4669      	mov	r1, sp
 801af6e:	4606      	mov	r6, r0
 801af70:	f7f6 fad4 	bl	801151c <ucdr_deserialize_uint32_t>
 801af74:	9900      	ldr	r1, [sp, #0]
 801af76:	68ab      	ldr	r3, [r5, #8]
 801af78:	428b      	cmp	r3, r1
 801af7a:	d32d      	bcc.n	801afd8 <_ListParametersResult__cdr_deserialize+0x78>
 801af7c:	6069      	str	r1, [r5, #4]
 801af7e:	2400      	movs	r4, #0
 801af80:	b398      	cbz	r0, 801afea <_ListParametersResult__cdr_deserialize+0x8a>
 801af82:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801af86:	42a1      	cmp	r1, r4
 801af88:	ab01      	add	r3, sp, #4
 801af8a:	4630      	mov	r0, r6
 801af8c:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801af90:	d92b      	bls.n	801afea <_ListParametersResult__cdr_deserialize+0x8a>
 801af92:	6829      	ldr	r1, [r5, #0]
 801af94:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801af98:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801af9c:	f8dc 8008 	ldr.w	r8, [ip, #8]
 801afa0:	4642      	mov	r2, r8
 801afa2:	3401      	adds	r4, #1
 801afa4:	f7f8 f804 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801afa8:	b1e0      	cbz	r0, 801afe4 <_ListParametersResult__cdr_deserialize+0x84>
 801afaa:	9a01      	ldr	r2, [sp, #4]
 801afac:	b102      	cbz	r2, 801afb0 <_ListParametersResult__cdr_deserialize+0x50>
 801afae:	3a01      	subs	r2, #1
 801afb0:	682b      	ldr	r3, [r5, #0]
 801afb2:	9900      	ldr	r1, [sp, #0]
 801afb4:	443b      	add	r3, r7
 801afb6:	605a      	str	r2, [r3, #4]
 801afb8:	e7e3      	b.n	801af82 <_ListParametersResult__cdr_deserialize+0x22>
 801afba:	4591      	cmp	r9, r2
 801afbc:	d20c      	bcs.n	801afd8 <_ListParametersResult__cdr_deserialize+0x78>
 801afbe:	2101      	movs	r1, #1
 801afc0:	7571      	strb	r1, [r6, #21]
 801afc2:	68ea      	ldr	r2, [r5, #12]
 801afc4:	75b0      	strb	r0, [r6, #22]
 801afc6:	4417      	add	r7, r2
 801afc8:	4630      	mov	r0, r6
 801afca:	607b      	str	r3, [r7, #4]
 801afcc:	f7f7 ff88 	bl	8012ee0 <ucdr_align_to>
 801afd0:	9901      	ldr	r1, [sp, #4]
 801afd2:	4630      	mov	r0, r6
 801afd4:	f7f7 ffba 	bl	8012f4c <ucdr_advance_buffer>
 801afd8:	f04f 0800 	mov.w	r8, #0
 801afdc:	4640      	mov	r0, r8
 801afde:	b003      	add	sp, #12
 801afe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afe4:	9b01      	ldr	r3, [sp, #4]
 801afe6:	4598      	cmp	r8, r3
 801afe8:	d32a      	bcc.n	801b040 <_ListParametersResult__cdr_deserialize+0xe0>
 801afea:	4669      	mov	r1, sp
 801afec:	4630      	mov	r0, r6
 801afee:	f7f6 fa95 	bl	801151c <ucdr_deserialize_uint32_t>
 801aff2:	9900      	ldr	r1, [sp, #0]
 801aff4:	696b      	ldr	r3, [r5, #20]
 801aff6:	428b      	cmp	r3, r1
 801aff8:	4680      	mov	r8, r0
 801affa:	d3ed      	bcc.n	801afd8 <_ListParametersResult__cdr_deserialize+0x78>
 801affc:	6129      	str	r1, [r5, #16]
 801affe:	2400      	movs	r4, #0
 801b000:	2800      	cmp	r0, #0
 801b002:	d0eb      	beq.n	801afdc <_ListParametersResult__cdr_deserialize+0x7c>
 801b004:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801b008:	42a1      	cmp	r1, r4
 801b00a:	ab01      	add	r3, sp, #4
 801b00c:	4630      	mov	r0, r6
 801b00e:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801b012:	d9e3      	bls.n	801afdc <_ListParametersResult__cdr_deserialize+0x7c>
 801b014:	68e9      	ldr	r1, [r5, #12]
 801b016:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801b01a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b01e:	f8dc 9008 	ldr.w	r9, [ip, #8]
 801b022:	464a      	mov	r2, r9
 801b024:	f7f7 ffc4 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801b028:	3401      	adds	r4, #1
 801b02a:	9a01      	ldr	r2, [sp, #4]
 801b02c:	4603      	mov	r3, r0
 801b02e:	2800      	cmp	r0, #0
 801b030:	d0c3      	beq.n	801afba <_ListParametersResult__cdr_deserialize+0x5a>
 801b032:	b102      	cbz	r2, 801b036 <_ListParametersResult__cdr_deserialize+0xd6>
 801b034:	3a01      	subs	r2, #1
 801b036:	68eb      	ldr	r3, [r5, #12]
 801b038:	9900      	ldr	r1, [sp, #0]
 801b03a:	443b      	add	r3, r7
 801b03c:	605a      	str	r2, [r3, #4]
 801b03e:	e7e1      	b.n	801b004 <_ListParametersResult__cdr_deserialize+0xa4>
 801b040:	2101      	movs	r1, #1
 801b042:	7571      	strb	r1, [r6, #21]
 801b044:	682b      	ldr	r3, [r5, #0]
 801b046:	75b0      	strb	r0, [r6, #22]
 801b048:	443b      	add	r3, r7
 801b04a:	6058      	str	r0, [r3, #4]
 801b04c:	4630      	mov	r0, r6
 801b04e:	f7f7 ff47 	bl	8012ee0 <ucdr_align_to>
 801b052:	9901      	ldr	r1, [sp, #4]
 801b054:	4630      	mov	r0, r6
 801b056:	f7f7 ff79 	bl	8012f4c <ucdr_advance_buffer>
 801b05a:	e7c6      	b.n	801afea <_ListParametersResult__cdr_deserialize+0x8a>

0801b05c <_ListParametersResult__cdr_serialize>:
 801b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b060:	2800      	cmp	r0, #0
 801b062:	d04c      	beq.n	801b0fe <_ListParametersResult__cdr_serialize+0xa2>
 801b064:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b068:	460f      	mov	r7, r1
 801b06a:	4606      	mov	r6, r0
 801b06c:	4608      	mov	r0, r1
 801b06e:	4641      	mov	r1, r8
 801b070:	f7f6 f924 	bl	80112bc <ucdr_serialize_uint32_t>
 801b074:	b1e8      	cbz	r0, 801b0b2 <_ListParametersResult__cdr_serialize+0x56>
 801b076:	f1b8 0f00 	cmp.w	r8, #0
 801b07a:	d01a      	beq.n	801b0b2 <_ListParametersResult__cdr_serialize+0x56>
 801b07c:	2400      	movs	r4, #0
 801b07e:	e00c      	b.n	801b09a <_ListParametersResult__cdr_serialize+0x3e>
 801b080:	f7e5 f8be 	bl	8000200 <strlen>
 801b084:	1c42      	adds	r2, r0, #1
 801b086:	f8c9 0004 	str.w	r0, [r9, #4]
 801b08a:	4629      	mov	r1, r5
 801b08c:	4638      	mov	r0, r7
 801b08e:	f7f7 ff7d 	bl	8012f8c <ucdr_serialize_sequence_char>
 801b092:	3401      	adds	r4, #1
 801b094:	b168      	cbz	r0, 801b0b2 <_ListParametersResult__cdr_serialize+0x56>
 801b096:	45a0      	cmp	r8, r4
 801b098:	d00b      	beq.n	801b0b2 <_ListParametersResult__cdr_serialize+0x56>
 801b09a:	6833      	ldr	r3, [r6, #0]
 801b09c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801b0a0:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801b0a4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b0a8:	4628      	mov	r0, r5
 801b0aa:	2d00      	cmp	r5, #0
 801b0ac:	d1e8      	bne.n	801b080 <_ListParametersResult__cdr_serialize+0x24>
 801b0ae:	462a      	mov	r2, r5
 801b0b0:	e7e9      	b.n	801b086 <_ListParametersResult__cdr_serialize+0x2a>
 801b0b2:	f8d6 8010 	ldr.w	r8, [r6, #16]
 801b0b6:	4638      	mov	r0, r7
 801b0b8:	4641      	mov	r1, r8
 801b0ba:	f7f6 f8ff 	bl	80112bc <ucdr_serialize_uint32_t>
 801b0be:	4681      	mov	r9, r0
 801b0c0:	b1e8      	cbz	r0, 801b0fe <_ListParametersResult__cdr_serialize+0xa2>
 801b0c2:	f1b8 0f00 	cmp.w	r8, #0
 801b0c6:	d01c      	beq.n	801b102 <_ListParametersResult__cdr_serialize+0xa6>
 801b0c8:	2400      	movs	r4, #0
 801b0ca:	e00c      	b.n	801b0e6 <_ListParametersResult__cdr_serialize+0x8a>
 801b0cc:	f7e5 f898 	bl	8000200 <strlen>
 801b0d0:	1c42      	adds	r2, r0, #1
 801b0d2:	f8ca 0004 	str.w	r0, [sl, #4]
 801b0d6:	4629      	mov	r1, r5
 801b0d8:	4638      	mov	r0, r7
 801b0da:	f7f7 ff57 	bl	8012f8c <ucdr_serialize_sequence_char>
 801b0de:	3401      	adds	r4, #1
 801b0e0:	b168      	cbz	r0, 801b0fe <_ListParametersResult__cdr_serialize+0xa2>
 801b0e2:	45a0      	cmp	r8, r4
 801b0e4:	d00d      	beq.n	801b102 <_ListParametersResult__cdr_serialize+0xa6>
 801b0e6:	68f3      	ldr	r3, [r6, #12]
 801b0e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801b0ec:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 801b0f0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b0f4:	4628      	mov	r0, r5
 801b0f6:	2d00      	cmp	r5, #0
 801b0f8:	d1e8      	bne.n	801b0cc <_ListParametersResult__cdr_serialize+0x70>
 801b0fa:	462a      	mov	r2, r5
 801b0fc:	e7e9      	b.n	801b0d2 <_ListParametersResult__cdr_serialize+0x76>
 801b0fe:	f04f 0900 	mov.w	r9, #0
 801b102:	4648      	mov	r0, r9
 801b104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b108 <max_serialized_size_rcl_interfaces__msg__ListParametersResult>:
 801b108:	2300      	movs	r3, #0
 801b10a:	7003      	strb	r3, [r0, #0]
 801b10c:	4618      	mov	r0, r3
 801b10e:	4770      	bx	lr

0801b110 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult>:
 801b110:	4800      	ldr	r0, [pc, #0]	@ (801b114 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ListParametersResult+0x4>)
 801b112:	4770      	bx	lr
 801b114:	20001780 	.word	0x20001780

0801b118 <_ParameterDescriptor__cdr_serialize>:
 801b118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b11c:	2800      	cmp	r0, #0
 801b11e:	d066      	beq.n	801b1ee <_ParameterDescriptor__cdr_serialize+0xd6>
 801b120:	6805      	ldr	r5, [r0, #0]
 801b122:	460e      	mov	r6, r1
 801b124:	4604      	mov	r4, r0
 801b126:	2d00      	cmp	r5, #0
 801b128:	d06c      	beq.n	801b204 <_ParameterDescriptor__cdr_serialize+0xec>
 801b12a:	4628      	mov	r0, r5
 801b12c:	f7e5 f868 	bl	8000200 <strlen>
 801b130:	1c42      	adds	r2, r0, #1
 801b132:	4629      	mov	r1, r5
 801b134:	6060      	str	r0, [r4, #4]
 801b136:	4630      	mov	r0, r6
 801b138:	f7f7 ff28 	bl	8012f8c <ucdr_serialize_sequence_char>
 801b13c:	7b21      	ldrb	r1, [r4, #12]
 801b13e:	4630      	mov	r0, r6
 801b140:	f7f5 fea6 	bl	8010e90 <ucdr_serialize_uint8_t>
 801b144:	6925      	ldr	r5, [r4, #16]
 801b146:	2d00      	cmp	r5, #0
 801b148:	d059      	beq.n	801b1fe <_ParameterDescriptor__cdr_serialize+0xe6>
 801b14a:	4628      	mov	r0, r5
 801b14c:	f7e5 f858 	bl	8000200 <strlen>
 801b150:	1c42      	adds	r2, r0, #1
 801b152:	6160      	str	r0, [r4, #20]
 801b154:	4629      	mov	r1, r5
 801b156:	4630      	mov	r0, r6
 801b158:	f7f7 ff18 	bl	8012f8c <ucdr_serialize_sequence_char>
 801b15c:	69e5      	ldr	r5, [r4, #28]
 801b15e:	2d00      	cmp	r5, #0
 801b160:	d04a      	beq.n	801b1f8 <_ParameterDescriptor__cdr_serialize+0xe0>
 801b162:	4628      	mov	r0, r5
 801b164:	f7e5 f84c 	bl	8000200 <strlen>
 801b168:	1c42      	adds	r2, r0, #1
 801b16a:	4629      	mov	r1, r5
 801b16c:	6220      	str	r0, [r4, #32]
 801b16e:	4630      	mov	r0, r6
 801b170:	f7f7 ff0c 	bl	8012f8c <ucdr_serialize_sequence_char>
 801b174:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801b178:	4630      	mov	r0, r6
 801b17a:	f7f5 fe5b 	bl	8010e34 <ucdr_serialize_bool>
 801b17e:	f894 1029 	ldrb.w	r1, [r4, #41]	@ 0x29
 801b182:	4630      	mov	r0, r6
 801b184:	f7f5 fe56 	bl	8010e34 <ucdr_serialize_bool>
 801b188:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 801b18a:	4630      	mov	r0, r6
 801b18c:	4639      	mov	r1, r7
 801b18e:	f7f6 f895 	bl	80112bc <ucdr_serialize_uint32_t>
 801b192:	b190      	cbz	r0, 801b1ba <_ParameterDescriptor__cdr_serialize+0xa2>
 801b194:	b18f      	cbz	r7, 801b1ba <_ParameterDescriptor__cdr_serialize+0xa2>
 801b196:	2500      	movs	r5, #0
 801b198:	e001      	b.n	801b19e <_ParameterDescriptor__cdr_serialize+0x86>
 801b19a:	42af      	cmp	r7, r5
 801b19c:	d00d      	beq.n	801b1ba <_ParameterDescriptor__cdr_serialize+0xa2>
 801b19e:	f005 f881 	bl	80202a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange>
 801b1a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b1a4:	6843      	ldr	r3, [r0, #4]
 801b1a6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801b1aa:	689b      	ldr	r3, [r3, #8]
 801b1ac:	4631      	mov	r1, r6
 801b1ae:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 801b1b2:	3501      	adds	r5, #1
 801b1b4:	4798      	blx	r3
 801b1b6:	2800      	cmp	r0, #0
 801b1b8:	d1ef      	bne.n	801b19a <_ParameterDescriptor__cdr_serialize+0x82>
 801b1ba:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 801b1bc:	4630      	mov	r0, r6
 801b1be:	4639      	mov	r1, r7
 801b1c0:	f7f6 f87c 	bl	80112bc <ucdr_serialize_uint32_t>
 801b1c4:	4680      	mov	r8, r0
 801b1c6:	b190      	cbz	r0, 801b1ee <_ParameterDescriptor__cdr_serialize+0xd6>
 801b1c8:	b19f      	cbz	r7, 801b1f2 <_ParameterDescriptor__cdr_serialize+0xda>
 801b1ca:	2500      	movs	r5, #0
 801b1cc:	e001      	b.n	801b1d2 <_ParameterDescriptor__cdr_serialize+0xba>
 801b1ce:	42af      	cmp	r7, r5
 801b1d0:	d00f      	beq.n	801b1f2 <_ParameterDescriptor__cdr_serialize+0xda>
 801b1d2:	f005 f8db 	bl	802038c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange>
 801b1d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801b1d8:	6843      	ldr	r3, [r0, #4]
 801b1da:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801b1de:	689b      	ldr	r3, [r3, #8]
 801b1e0:	4631      	mov	r1, r6
 801b1e2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 801b1e6:	3501      	adds	r5, #1
 801b1e8:	4798      	blx	r3
 801b1ea:	2800      	cmp	r0, #0
 801b1ec:	d1ef      	bne.n	801b1ce <_ParameterDescriptor__cdr_serialize+0xb6>
 801b1ee:	f04f 0800 	mov.w	r8, #0
 801b1f2:	4640      	mov	r0, r8
 801b1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1f8:	462a      	mov	r2, r5
 801b1fa:	4628      	mov	r0, r5
 801b1fc:	e7b5      	b.n	801b16a <_ParameterDescriptor__cdr_serialize+0x52>
 801b1fe:	462a      	mov	r2, r5
 801b200:	4628      	mov	r0, r5
 801b202:	e7a6      	b.n	801b152 <_ParameterDescriptor__cdr_serialize+0x3a>
 801b204:	462a      	mov	r2, r5
 801b206:	4628      	mov	r0, r5
 801b208:	e793      	b.n	801b132 <_ParameterDescriptor__cdr_serialize+0x1a>
 801b20a:	bf00      	nop

0801b20c <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor.part.0>:
 801b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b210:	4605      	mov	r5, r0
 801b212:	460e      	mov	r6, r1
 801b214:	4630      	mov	r0, r6
 801b216:	2104      	movs	r1, #4
 801b218:	f7f7 fe4c 	bl	8012eb4 <ucdr_alignment>
 801b21c:	686b      	ldr	r3, [r5, #4]
 801b21e:	4433      	add	r3, r6
 801b220:	3305      	adds	r3, #5
 801b222:	eb00 0803 	add.w	r8, r0, r3
 801b226:	2101      	movs	r1, #1
 801b228:	4640      	mov	r0, r8
 801b22a:	f7f7 fe43 	bl	8012eb4 <ucdr_alignment>
 801b22e:	1c44      	adds	r4, r0, #1
 801b230:	4444      	add	r4, r8
 801b232:	2104      	movs	r1, #4
 801b234:	4620      	mov	r0, r4
 801b236:	f7f7 fe3d 	bl	8012eb4 <ucdr_alignment>
 801b23a:	696b      	ldr	r3, [r5, #20]
 801b23c:	3305      	adds	r3, #5
 801b23e:	4403      	add	r3, r0
 801b240:	441c      	add	r4, r3
 801b242:	2104      	movs	r1, #4
 801b244:	4620      	mov	r0, r4
 801b246:	f7f7 fe35 	bl	8012eb4 <ucdr_alignment>
 801b24a:	6a2b      	ldr	r3, [r5, #32]
 801b24c:	3305      	adds	r3, #5
 801b24e:	4403      	add	r3, r0
 801b250:	441c      	add	r4, r3
 801b252:	2101      	movs	r1, #1
 801b254:	4620      	mov	r0, r4
 801b256:	f7f7 fe2d 	bl	8012eb4 <ucdr_alignment>
 801b25a:	3001      	adds	r0, #1
 801b25c:	4404      	add	r4, r0
 801b25e:	2101      	movs	r1, #1
 801b260:	4620      	mov	r0, r4
 801b262:	f7f7 fe27 	bl	8012eb4 <ucdr_alignment>
 801b266:	3001      	adds	r0, #1
 801b268:	4404      	add	r4, r0
 801b26a:	2104      	movs	r1, #4
 801b26c:	4620      	mov	r0, r4
 801b26e:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 801b272:	f7f7 fe1f 	bl	8012eb4 <ucdr_alignment>
 801b276:	3004      	adds	r0, #4
 801b278:	eb00 0804 	add.w	r8, r0, r4
 801b27c:	f1b9 0f00 	cmp.w	r9, #0
 801b280:	d018      	beq.n	801b2b4 <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor.part.0+0xa8>
 801b282:	2700      	movs	r7, #0
 801b284:	f005 f80e 	bl	80202a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange>
 801b288:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801b28a:	6843      	ldr	r3, [r0, #4]
 801b28c:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 801b290:	4641      	mov	r1, r8
 801b292:	695b      	ldr	r3, [r3, #20]
 801b294:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 801b298:	4798      	blx	r3
 801b29a:	4604      	mov	r4, r0
 801b29c:	2c04      	cmp	r4, #4
 801b29e:	4621      	mov	r1, r4
 801b2a0:	4640      	mov	r0, r8
 801b2a2:	bf28      	it	cs
 801b2a4:	2104      	movcs	r1, #4
 801b2a6:	f7f7 fe05 	bl	8012eb4 <ucdr_alignment>
 801b2aa:	3701      	adds	r7, #1
 801b2ac:	4404      	add	r4, r0
 801b2ae:	45b9      	cmp	r9, r7
 801b2b0:	44a0      	add	r8, r4
 801b2b2:	d1e7      	bne.n	801b284 <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor.part.0+0x78>
 801b2b4:	4640      	mov	r0, r8
 801b2b6:	2104      	movs	r1, #4
 801b2b8:	f8d5 903c 	ldr.w	r9, [r5, #60]	@ 0x3c
 801b2bc:	f7f7 fdfa 	bl	8012eb4 <ucdr_alignment>
 801b2c0:	4480      	add	r8, r0
 801b2c2:	f108 0804 	add.w	r8, r8, #4
 801b2c6:	f1b9 0f00 	cmp.w	r9, #0
 801b2ca:	d018      	beq.n	801b2fe <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor.part.0+0xf2>
 801b2cc:	2700      	movs	r7, #0
 801b2ce:	f005 f85d 	bl	802038c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange>
 801b2d2:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 801b2d4:	6843      	ldr	r3, [r0, #4]
 801b2d6:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 801b2da:	4641      	mov	r1, r8
 801b2dc:	695b      	ldr	r3, [r3, #20]
 801b2de:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 801b2e2:	4798      	blx	r3
 801b2e4:	4604      	mov	r4, r0
 801b2e6:	2c04      	cmp	r4, #4
 801b2e8:	4621      	mov	r1, r4
 801b2ea:	4640      	mov	r0, r8
 801b2ec:	bf28      	it	cs
 801b2ee:	2104      	movcs	r1, #4
 801b2f0:	f7f7 fde0 	bl	8012eb4 <ucdr_alignment>
 801b2f4:	3701      	adds	r7, #1
 801b2f6:	4404      	add	r4, r0
 801b2f8:	45b9      	cmp	r9, r7
 801b2fa:	44a0      	add	r8, r4
 801b2fc:	d1e7      	bne.n	801b2ce <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor.part.0+0xc2>
 801b2fe:	eba8 0006 	sub.w	r0, r8, r6
 801b302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b306:	bf00      	nop

0801b308 <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor>:
 801b308:	b108      	cbz	r0, 801b30e <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor+0x6>
 801b30a:	f7ff bf7f 	b.w	801b20c <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor.part.0>
 801b30e:	4770      	bx	lr

0801b310 <_ParameterDescriptor__get_serialized_size>:
 801b310:	b110      	cbz	r0, 801b318 <_ParameterDescriptor__get_serialized_size+0x8>
 801b312:	2100      	movs	r1, #0
 801b314:	f7ff bf7a 	b.w	801b20c <get_serialized_size_rcl_interfaces__msg__ParameterDescriptor.part.0>
 801b318:	4770      	bx	lr
 801b31a:	bf00      	nop

0801b31c <_ParameterDescriptor__cdr_deserialize>:
 801b31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b31e:	460c      	mov	r4, r1
 801b320:	b083      	sub	sp, #12
 801b322:	2900      	cmp	r1, #0
 801b324:	f000 8093 	beq.w	801b44e <_ParameterDescriptor__cdr_deserialize+0x132>
 801b328:	688e      	ldr	r6, [r1, #8]
 801b32a:	6809      	ldr	r1, [r1, #0]
 801b32c:	ab01      	add	r3, sp, #4
 801b32e:	4632      	mov	r2, r6
 801b330:	4605      	mov	r5, r0
 801b332:	f7f7 fe3d 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801b336:	9b01      	ldr	r3, [sp, #4]
 801b338:	2800      	cmp	r0, #0
 801b33a:	d165      	bne.n	801b408 <_ParameterDescriptor__cdr_deserialize+0xec>
 801b33c:	429e      	cmp	r6, r3
 801b33e:	f0c0 808d 	bcc.w	801b45c <_ParameterDescriptor__cdr_deserialize+0x140>
 801b342:	f104 010c 	add.w	r1, r4, #12
 801b346:	4628      	mov	r0, r5
 801b348:	f7f5 fdb8 	bl	8010ebc <ucdr_deserialize_uint8_t>
 801b34c:	69a6      	ldr	r6, [r4, #24]
 801b34e:	6921      	ldr	r1, [r4, #16]
 801b350:	ab01      	add	r3, sp, #4
 801b352:	4632      	mov	r2, r6
 801b354:	4628      	mov	r0, r5
 801b356:	f7f7 fe2b 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801b35a:	9b01      	ldr	r3, [sp, #4]
 801b35c:	2800      	cmp	r0, #0
 801b35e:	d068      	beq.n	801b432 <_ParameterDescriptor__cdr_deserialize+0x116>
 801b360:	2b00      	cmp	r3, #0
 801b362:	d179      	bne.n	801b458 <_ParameterDescriptor__cdr_deserialize+0x13c>
 801b364:	6163      	str	r3, [r4, #20]
 801b366:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801b368:	69e1      	ldr	r1, [r4, #28]
 801b36a:	ab01      	add	r3, sp, #4
 801b36c:	4632      	mov	r2, r6
 801b36e:	4628      	mov	r0, r5
 801b370:	f7f7 fe1e 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801b374:	9b01      	ldr	r3, [sp, #4]
 801b376:	2800      	cmp	r0, #0
 801b378:	d04d      	beq.n	801b416 <_ParameterDescriptor__cdr_deserialize+0xfa>
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d16a      	bne.n	801b454 <_ParameterDescriptor__cdr_deserialize+0x138>
 801b37e:	6223      	str	r3, [r4, #32]
 801b380:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b384:	4628      	mov	r0, r5
 801b386:	f7f5 fd6b 	bl	8010e60 <ucdr_deserialize_bool>
 801b38a:	f104 0129 	add.w	r1, r4, #41	@ 0x29
 801b38e:	4628      	mov	r0, r5
 801b390:	f7f5 fd66 	bl	8010e60 <ucdr_deserialize_bool>
 801b394:	a901      	add	r1, sp, #4
 801b396:	4628      	mov	r0, r5
 801b398:	f7f6 f8c0 	bl	801151c <ucdr_deserialize_uint32_t>
 801b39c:	9b01      	ldr	r3, [sp, #4]
 801b39e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801b3a0:	429a      	cmp	r2, r3
 801b3a2:	d335      	bcc.n	801b410 <_ParameterDescriptor__cdr_deserialize+0xf4>
 801b3a4:	6323      	str	r3, [r4, #48]	@ 0x30
 801b3a6:	b18b      	cbz	r3, 801b3cc <_ParameterDescriptor__cdr_deserialize+0xb0>
 801b3a8:	2600      	movs	r6, #0
 801b3aa:	4637      	mov	r7, r6
 801b3ac:	e002      	b.n	801b3b4 <_ParameterDescriptor__cdr_deserialize+0x98>
 801b3ae:	9b01      	ldr	r3, [sp, #4]
 801b3b0:	429f      	cmp	r7, r3
 801b3b2:	d20b      	bcs.n	801b3cc <_ParameterDescriptor__cdr_deserialize+0xb0>
 801b3b4:	f004 ff76 	bl	80202a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange>
 801b3b8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b3ba:	6843      	ldr	r3, [r0, #4]
 801b3bc:	4431      	add	r1, r6
 801b3be:	68db      	ldr	r3, [r3, #12]
 801b3c0:	4628      	mov	r0, r5
 801b3c2:	4798      	blx	r3
 801b3c4:	3701      	adds	r7, #1
 801b3c6:	3618      	adds	r6, #24
 801b3c8:	2800      	cmp	r0, #0
 801b3ca:	d1f0      	bne.n	801b3ae <_ParameterDescriptor__cdr_deserialize+0x92>
 801b3cc:	a901      	add	r1, sp, #4
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	f7f6 f8a4 	bl	801151c <ucdr_deserialize_uint32_t>
 801b3d4:	9b01      	ldr	r3, [sp, #4]
 801b3d6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801b3d8:	429a      	cmp	r2, r3
 801b3da:	d319      	bcc.n	801b410 <_ParameterDescriptor__cdr_deserialize+0xf4>
 801b3dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801b3de:	b18b      	cbz	r3, 801b404 <_ParameterDescriptor__cdr_deserialize+0xe8>
 801b3e0:	2600      	movs	r6, #0
 801b3e2:	4637      	mov	r7, r6
 801b3e4:	e002      	b.n	801b3ec <_ParameterDescriptor__cdr_deserialize+0xd0>
 801b3e6:	9b01      	ldr	r3, [sp, #4]
 801b3e8:	429f      	cmp	r7, r3
 801b3ea:	d20b      	bcs.n	801b404 <_ParameterDescriptor__cdr_deserialize+0xe8>
 801b3ec:	f004 ffce 	bl	802038c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange>
 801b3f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b3f2:	6843      	ldr	r3, [r0, #4]
 801b3f4:	4431      	add	r1, r6
 801b3f6:	68db      	ldr	r3, [r3, #12]
 801b3f8:	4628      	mov	r0, r5
 801b3fa:	4798      	blx	r3
 801b3fc:	3701      	adds	r7, #1
 801b3fe:	3618      	adds	r6, #24
 801b400:	2800      	cmp	r0, #0
 801b402:	d1f0      	bne.n	801b3e6 <_ParameterDescriptor__cdr_deserialize+0xca>
 801b404:	b003      	add	sp, #12
 801b406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b408:	b103      	cbz	r3, 801b40c <_ParameterDescriptor__cdr_deserialize+0xf0>
 801b40a:	3b01      	subs	r3, #1
 801b40c:	6063      	str	r3, [r4, #4]
 801b40e:	e798      	b.n	801b342 <_ParameterDescriptor__cdr_deserialize+0x26>
 801b410:	2000      	movs	r0, #0
 801b412:	b003      	add	sp, #12
 801b414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b416:	429e      	cmp	r6, r3
 801b418:	d2b2      	bcs.n	801b380 <_ParameterDescriptor__cdr_deserialize+0x64>
 801b41a:	2101      	movs	r1, #1
 801b41c:	75a8      	strb	r0, [r5, #22]
 801b41e:	7569      	strb	r1, [r5, #21]
 801b420:	6220      	str	r0, [r4, #32]
 801b422:	4628      	mov	r0, r5
 801b424:	f7f7 fd5c 	bl	8012ee0 <ucdr_align_to>
 801b428:	9901      	ldr	r1, [sp, #4]
 801b42a:	4628      	mov	r0, r5
 801b42c:	f7f7 fd8e 	bl	8012f4c <ucdr_advance_buffer>
 801b430:	e7a6      	b.n	801b380 <_ParameterDescriptor__cdr_deserialize+0x64>
 801b432:	429e      	cmp	r6, r3
 801b434:	d297      	bcs.n	801b366 <_ParameterDescriptor__cdr_deserialize+0x4a>
 801b436:	2101      	movs	r1, #1
 801b438:	75a8      	strb	r0, [r5, #22]
 801b43a:	7569      	strb	r1, [r5, #21]
 801b43c:	6160      	str	r0, [r4, #20]
 801b43e:	4628      	mov	r0, r5
 801b440:	f7f7 fd4e 	bl	8012ee0 <ucdr_align_to>
 801b444:	9901      	ldr	r1, [sp, #4]
 801b446:	4628      	mov	r0, r5
 801b448:	f7f7 fd80 	bl	8012f4c <ucdr_advance_buffer>
 801b44c:	e78b      	b.n	801b366 <_ParameterDescriptor__cdr_deserialize+0x4a>
 801b44e:	4608      	mov	r0, r1
 801b450:	b003      	add	sp, #12
 801b452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b454:	3b01      	subs	r3, #1
 801b456:	e792      	b.n	801b37e <_ParameterDescriptor__cdr_deserialize+0x62>
 801b458:	3b01      	subs	r3, #1
 801b45a:	e783      	b.n	801b364 <_ParameterDescriptor__cdr_deserialize+0x48>
 801b45c:	2101      	movs	r1, #1
 801b45e:	75a8      	strb	r0, [r5, #22]
 801b460:	7569      	strb	r1, [r5, #21]
 801b462:	6060      	str	r0, [r4, #4]
 801b464:	4628      	mov	r0, r5
 801b466:	f7f7 fd3b 	bl	8012ee0 <ucdr_align_to>
 801b46a:	9901      	ldr	r1, [sp, #4]
 801b46c:	4628      	mov	r0, r5
 801b46e:	f7f7 fd6d 	bl	8012f4c <ucdr_advance_buffer>
 801b472:	e766      	b.n	801b342 <_ParameterDescriptor__cdr_deserialize+0x26>

0801b474 <_ParameterDescriptor__max_serialized_size>:
 801b474:	b538      	push	{r3, r4, r5, lr}
 801b476:	2101      	movs	r1, #1
 801b478:	2000      	movs	r0, #0
 801b47a:	f7f7 fd1b 	bl	8012eb4 <ucdr_alignment>
 801b47e:	1c45      	adds	r5, r0, #1
 801b480:	2101      	movs	r1, #1
 801b482:	4628      	mov	r0, r5
 801b484:	f7f7 fd16 	bl	8012eb4 <ucdr_alignment>
 801b488:	1c44      	adds	r4, r0, #1
 801b48a:	442c      	add	r4, r5
 801b48c:	2101      	movs	r1, #1
 801b48e:	4620      	mov	r0, r4
 801b490:	f7f7 fd10 	bl	8012eb4 <ucdr_alignment>
 801b494:	3001      	adds	r0, #1
 801b496:	4420      	add	r0, r4
 801b498:	bd38      	pop	{r3, r4, r5, pc}
 801b49a:	bf00      	nop

0801b49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor>:
 801b49c:	4800      	ldr	r0, [pc, #0]	@ (801b4a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterDescriptor+0x4>)
 801b49e:	4770      	bx	lr
 801b4a0:	200017a8 	.word	0x200017a8

0801b4a4 <_ParameterEvent__max_serialized_size>:
 801b4a4:	b500      	push	{lr}
 801b4a6:	b083      	sub	sp, #12
 801b4a8:	2301      	movs	r3, #1
 801b4aa:	2100      	movs	r1, #0
 801b4ac:	f10d 0007 	add.w	r0, sp, #7
 801b4b0:	f88d 3007 	strb.w	r3, [sp, #7]
 801b4b4:	f7f4 fde6 	bl	8010084 <max_serialized_size_builtin_interfaces__msg__Time>
 801b4b8:	b003      	add	sp, #12
 801b4ba:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4be:	bf00      	nop

0801b4c0 <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0>:
 801b4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4c4:	4605      	mov	r5, r0
 801b4c6:	460e      	mov	r6, r1
 801b4c8:	f7f4 fd8c 	bl	800ffe4 <get_serialized_size_builtin_interfaces__msg__Time>
 801b4cc:	eb06 0a00 	add.w	sl, r6, r0
 801b4d0:	2104      	movs	r1, #4
 801b4d2:	4650      	mov	r0, sl
 801b4d4:	f7f7 fcee 	bl	8012eb4 <ucdr_alignment>
 801b4d8:	68eb      	ldr	r3, [r5, #12]
 801b4da:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801b4de:	3305      	adds	r3, #5
 801b4e0:	4403      	add	r3, r0
 801b4e2:	449a      	add	sl, r3
 801b4e4:	4650      	mov	r0, sl
 801b4e6:	2104      	movs	r1, #4
 801b4e8:	f7f7 fce4 	bl	8012eb4 <ucdr_alignment>
 801b4ec:	3004      	adds	r0, #4
 801b4ee:	4482      	add	sl, r0
 801b4f0:	f1b9 0f00 	cmp.w	r9, #0
 801b4f4:	d018      	beq.n	801b528 <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0+0x68>
 801b4f6:	2700      	movs	r7, #0
 801b4f8:	f004 ffca 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b4fc:	696a      	ldr	r2, [r5, #20]
 801b4fe:	6843      	ldr	r3, [r0, #4]
 801b500:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 801b504:	4651      	mov	r1, sl
 801b506:	695b      	ldr	r3, [r3, #20]
 801b508:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801b50c:	4798      	blx	r3
 801b50e:	4604      	mov	r4, r0
 801b510:	2c04      	cmp	r4, #4
 801b512:	4650      	mov	r0, sl
 801b514:	4621      	mov	r1, r4
 801b516:	bf28      	it	cs
 801b518:	2104      	movcs	r1, #4
 801b51a:	f7f7 fccb 	bl	8012eb4 <ucdr_alignment>
 801b51e:	3701      	adds	r7, #1
 801b520:	4420      	add	r0, r4
 801b522:	45b9      	cmp	r9, r7
 801b524:	4482      	add	sl, r0
 801b526:	d1e7      	bne.n	801b4f8 <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0+0x38>
 801b528:	2104      	movs	r1, #4
 801b52a:	4650      	mov	r0, sl
 801b52c:	f8d5 9024 	ldr.w	r9, [r5, #36]	@ 0x24
 801b530:	f7f7 fcc0 	bl	8012eb4 <ucdr_alignment>
 801b534:	4450      	add	r0, sl
 801b536:	f100 0804 	add.w	r8, r0, #4
 801b53a:	f1b9 0f00 	cmp.w	r9, #0
 801b53e:	d018      	beq.n	801b572 <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0+0xb2>
 801b540:	2700      	movs	r7, #0
 801b542:	f004 ffa5 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b546:	6a2a      	ldr	r2, [r5, #32]
 801b548:	6843      	ldr	r3, [r0, #4]
 801b54a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 801b54e:	4641      	mov	r1, r8
 801b550:	695b      	ldr	r3, [r3, #20]
 801b552:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801b556:	4798      	blx	r3
 801b558:	4604      	mov	r4, r0
 801b55a:	2c04      	cmp	r4, #4
 801b55c:	4640      	mov	r0, r8
 801b55e:	4621      	mov	r1, r4
 801b560:	bf28      	it	cs
 801b562:	2104      	movcs	r1, #4
 801b564:	f7f7 fca6 	bl	8012eb4 <ucdr_alignment>
 801b568:	3701      	adds	r7, #1
 801b56a:	4420      	add	r0, r4
 801b56c:	45b9      	cmp	r9, r7
 801b56e:	4480      	add	r8, r0
 801b570:	d1e7      	bne.n	801b542 <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0+0x82>
 801b572:	4640      	mov	r0, r8
 801b574:	2104      	movs	r1, #4
 801b576:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 801b57a:	f7f7 fc9b 	bl	8012eb4 <ucdr_alignment>
 801b57e:	4480      	add	r8, r0
 801b580:	f108 0804 	add.w	r8, r8, #4
 801b584:	f1b9 0f00 	cmp.w	r9, #0
 801b588:	d018      	beq.n	801b5bc <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0+0xfc>
 801b58a:	2700      	movs	r7, #0
 801b58c:	f004 ff80 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b590:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801b592:	6843      	ldr	r3, [r0, #4]
 801b594:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 801b598:	4641      	mov	r1, r8
 801b59a:	695b      	ldr	r3, [r3, #20]
 801b59c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801b5a0:	4798      	blx	r3
 801b5a2:	4604      	mov	r4, r0
 801b5a4:	2c04      	cmp	r4, #4
 801b5a6:	4640      	mov	r0, r8
 801b5a8:	4621      	mov	r1, r4
 801b5aa:	bf28      	it	cs
 801b5ac:	2104      	movcs	r1, #4
 801b5ae:	f7f7 fc81 	bl	8012eb4 <ucdr_alignment>
 801b5b2:	3701      	adds	r7, #1
 801b5b4:	4420      	add	r0, r4
 801b5b6:	45b9      	cmp	r9, r7
 801b5b8:	4480      	add	r8, r0
 801b5ba:	d1e7      	bne.n	801b58c <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0+0xcc>
 801b5bc:	eba8 0006 	sub.w	r0, r8, r6
 801b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b5c4 <get_serialized_size_rcl_interfaces__msg__ParameterEvent>:
 801b5c4:	b108      	cbz	r0, 801b5ca <get_serialized_size_rcl_interfaces__msg__ParameterEvent+0x6>
 801b5c6:	f7ff bf7b 	b.w	801b4c0 <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0>
 801b5ca:	4770      	bx	lr

0801b5cc <_ParameterEvent__get_serialized_size>:
 801b5cc:	b110      	cbz	r0, 801b5d4 <_ParameterEvent__get_serialized_size+0x8>
 801b5ce:	2100      	movs	r1, #0
 801b5d0:	f7ff bf76 	b.w	801b4c0 <get_serialized_size_rcl_interfaces__msg__ParameterEvent.part.0>
 801b5d4:	4770      	bx	lr
 801b5d6:	bf00      	nop

0801b5d8 <_ParameterEvent__cdr_deserialize>:
 801b5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5da:	460c      	mov	r4, r1
 801b5dc:	b083      	sub	sp, #12
 801b5de:	2900      	cmp	r1, #0
 801b5e0:	d06f      	beq.n	801b6c2 <_ParameterEvent__cdr_deserialize+0xea>
 801b5e2:	4605      	mov	r5, r0
 801b5e4:	f7f4 fd62 	bl	80100ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801b5e8:	6843      	ldr	r3, [r0, #4]
 801b5ea:	4621      	mov	r1, r4
 801b5ec:	68db      	ldr	r3, [r3, #12]
 801b5ee:	4628      	mov	r0, r5
 801b5f0:	4798      	blx	r3
 801b5f2:	6926      	ldr	r6, [r4, #16]
 801b5f4:	68a1      	ldr	r1, [r4, #8]
 801b5f6:	ab01      	add	r3, sp, #4
 801b5f8:	4632      	mov	r2, r6
 801b5fa:	4628      	mov	r0, r5
 801b5fc:	f7f7 fcd8 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801b600:	9b01      	ldr	r3, [sp, #4]
 801b602:	2800      	cmp	r0, #0
 801b604:	d156      	bne.n	801b6b4 <_ParameterEvent__cdr_deserialize+0xdc>
 801b606:	429e      	cmp	r6, r3
 801b608:	d35e      	bcc.n	801b6c8 <_ParameterEvent__cdr_deserialize+0xf0>
 801b60a:	a901      	add	r1, sp, #4
 801b60c:	4628      	mov	r0, r5
 801b60e:	f7f5 ff85 	bl	801151c <ucdr_deserialize_uint32_t>
 801b612:	9b01      	ldr	r3, [sp, #4]
 801b614:	69e2      	ldr	r2, [r4, #28]
 801b616:	429a      	cmp	r2, r3
 801b618:	d350      	bcc.n	801b6bc <_ParameterEvent__cdr_deserialize+0xe4>
 801b61a:	61a3      	str	r3, [r4, #24]
 801b61c:	b18b      	cbz	r3, 801b642 <_ParameterEvent__cdr_deserialize+0x6a>
 801b61e:	2600      	movs	r6, #0
 801b620:	4637      	mov	r7, r6
 801b622:	e002      	b.n	801b62a <_ParameterEvent__cdr_deserialize+0x52>
 801b624:	9b01      	ldr	r3, [sp, #4]
 801b626:	429f      	cmp	r7, r3
 801b628:	d20b      	bcs.n	801b642 <_ParameterEvent__cdr_deserialize+0x6a>
 801b62a:	f004 ff31 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b62e:	6961      	ldr	r1, [r4, #20]
 801b630:	6843      	ldr	r3, [r0, #4]
 801b632:	4431      	add	r1, r6
 801b634:	68db      	ldr	r3, [r3, #12]
 801b636:	4628      	mov	r0, r5
 801b638:	4798      	blx	r3
 801b63a:	3701      	adds	r7, #1
 801b63c:	3670      	adds	r6, #112	@ 0x70
 801b63e:	2800      	cmp	r0, #0
 801b640:	d1f0      	bne.n	801b624 <_ParameterEvent__cdr_deserialize+0x4c>
 801b642:	a901      	add	r1, sp, #4
 801b644:	4628      	mov	r0, r5
 801b646:	f7f5 ff69 	bl	801151c <ucdr_deserialize_uint32_t>
 801b64a:	9b01      	ldr	r3, [sp, #4]
 801b64c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801b64e:	429a      	cmp	r2, r3
 801b650:	d334      	bcc.n	801b6bc <_ParameterEvent__cdr_deserialize+0xe4>
 801b652:	6263      	str	r3, [r4, #36]	@ 0x24
 801b654:	b18b      	cbz	r3, 801b67a <_ParameterEvent__cdr_deserialize+0xa2>
 801b656:	2600      	movs	r6, #0
 801b658:	4637      	mov	r7, r6
 801b65a:	e002      	b.n	801b662 <_ParameterEvent__cdr_deserialize+0x8a>
 801b65c:	9b01      	ldr	r3, [sp, #4]
 801b65e:	429f      	cmp	r7, r3
 801b660:	d20b      	bcs.n	801b67a <_ParameterEvent__cdr_deserialize+0xa2>
 801b662:	f004 ff15 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b666:	6a21      	ldr	r1, [r4, #32]
 801b668:	6843      	ldr	r3, [r0, #4]
 801b66a:	4431      	add	r1, r6
 801b66c:	68db      	ldr	r3, [r3, #12]
 801b66e:	4628      	mov	r0, r5
 801b670:	4798      	blx	r3
 801b672:	3701      	adds	r7, #1
 801b674:	3670      	adds	r6, #112	@ 0x70
 801b676:	2800      	cmp	r0, #0
 801b678:	d1f0      	bne.n	801b65c <_ParameterEvent__cdr_deserialize+0x84>
 801b67a:	a901      	add	r1, sp, #4
 801b67c:	4628      	mov	r0, r5
 801b67e:	f7f5 ff4d 	bl	801151c <ucdr_deserialize_uint32_t>
 801b682:	9b01      	ldr	r3, [sp, #4]
 801b684:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801b686:	429a      	cmp	r2, r3
 801b688:	d318      	bcc.n	801b6bc <_ParameterEvent__cdr_deserialize+0xe4>
 801b68a:	6323      	str	r3, [r4, #48]	@ 0x30
 801b68c:	b1bb      	cbz	r3, 801b6be <_ParameterEvent__cdr_deserialize+0xe6>
 801b68e:	2600      	movs	r6, #0
 801b690:	4637      	mov	r7, r6
 801b692:	e002      	b.n	801b69a <_ParameterEvent__cdr_deserialize+0xc2>
 801b694:	9b01      	ldr	r3, [sp, #4]
 801b696:	429f      	cmp	r7, r3
 801b698:	d211      	bcs.n	801b6be <_ParameterEvent__cdr_deserialize+0xe6>
 801b69a:	f004 fef9 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b69e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b6a0:	6843      	ldr	r3, [r0, #4]
 801b6a2:	4431      	add	r1, r6
 801b6a4:	68db      	ldr	r3, [r3, #12]
 801b6a6:	4628      	mov	r0, r5
 801b6a8:	4798      	blx	r3
 801b6aa:	3701      	adds	r7, #1
 801b6ac:	3670      	adds	r6, #112	@ 0x70
 801b6ae:	2800      	cmp	r0, #0
 801b6b0:	d1f0      	bne.n	801b694 <_ParameterEvent__cdr_deserialize+0xbc>
 801b6b2:	e004      	b.n	801b6be <_ParameterEvent__cdr_deserialize+0xe6>
 801b6b4:	b103      	cbz	r3, 801b6b8 <_ParameterEvent__cdr_deserialize+0xe0>
 801b6b6:	3b01      	subs	r3, #1
 801b6b8:	60e3      	str	r3, [r4, #12]
 801b6ba:	e7a6      	b.n	801b60a <_ParameterEvent__cdr_deserialize+0x32>
 801b6bc:	2000      	movs	r0, #0
 801b6be:	b003      	add	sp, #12
 801b6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6c2:	4608      	mov	r0, r1
 801b6c4:	b003      	add	sp, #12
 801b6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6c8:	2101      	movs	r1, #1
 801b6ca:	75a8      	strb	r0, [r5, #22]
 801b6cc:	7569      	strb	r1, [r5, #21]
 801b6ce:	60e0      	str	r0, [r4, #12]
 801b6d0:	4628      	mov	r0, r5
 801b6d2:	f7f7 fc05 	bl	8012ee0 <ucdr_align_to>
 801b6d6:	9901      	ldr	r1, [sp, #4]
 801b6d8:	4628      	mov	r0, r5
 801b6da:	f7f7 fc37 	bl	8012f4c <ucdr_advance_buffer>
 801b6de:	e794      	b.n	801b60a <_ParameterEvent__cdr_deserialize+0x32>

0801b6e0 <_ParameterEvent__cdr_serialize>:
 801b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6e4:	2800      	cmp	r0, #0
 801b6e6:	d060      	beq.n	801b7aa <_ParameterEvent__cdr_serialize+0xca>
 801b6e8:	4604      	mov	r4, r0
 801b6ea:	460d      	mov	r5, r1
 801b6ec:	f7f4 fcde 	bl	80100ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801b6f0:	6843      	ldr	r3, [r0, #4]
 801b6f2:	4629      	mov	r1, r5
 801b6f4:	689b      	ldr	r3, [r3, #8]
 801b6f6:	4620      	mov	r0, r4
 801b6f8:	4798      	blx	r3
 801b6fa:	68a6      	ldr	r6, [r4, #8]
 801b6fc:	2e00      	cmp	r6, #0
 801b6fe:	d059      	beq.n	801b7b4 <_ParameterEvent__cdr_serialize+0xd4>
 801b700:	4630      	mov	r0, r6
 801b702:	f7e4 fd7d 	bl	8000200 <strlen>
 801b706:	1c42      	adds	r2, r0, #1
 801b708:	4631      	mov	r1, r6
 801b70a:	60e0      	str	r0, [r4, #12]
 801b70c:	4628      	mov	r0, r5
 801b70e:	f7f7 fc3d 	bl	8012f8c <ucdr_serialize_sequence_char>
 801b712:	69a7      	ldr	r7, [r4, #24]
 801b714:	4628      	mov	r0, r5
 801b716:	4639      	mov	r1, r7
 801b718:	f7f5 fdd0 	bl	80112bc <ucdr_serialize_uint32_t>
 801b71c:	b190      	cbz	r0, 801b744 <_ParameterEvent__cdr_serialize+0x64>
 801b71e:	b18f      	cbz	r7, 801b744 <_ParameterEvent__cdr_serialize+0x64>
 801b720:	2600      	movs	r6, #0
 801b722:	e001      	b.n	801b728 <_ParameterEvent__cdr_serialize+0x48>
 801b724:	42b7      	cmp	r7, r6
 801b726:	d00d      	beq.n	801b744 <_ParameterEvent__cdr_serialize+0x64>
 801b728:	f004 feb2 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b72c:	6962      	ldr	r2, [r4, #20]
 801b72e:	6843      	ldr	r3, [r0, #4]
 801b730:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 801b734:	689b      	ldr	r3, [r3, #8]
 801b736:	4629      	mov	r1, r5
 801b738:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801b73c:	3601      	adds	r6, #1
 801b73e:	4798      	blx	r3
 801b740:	2800      	cmp	r0, #0
 801b742:	d1ef      	bne.n	801b724 <_ParameterEvent__cdr_serialize+0x44>
 801b744:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 801b746:	4628      	mov	r0, r5
 801b748:	4639      	mov	r1, r7
 801b74a:	f7f5 fdb7 	bl	80112bc <ucdr_serialize_uint32_t>
 801b74e:	b190      	cbz	r0, 801b776 <_ParameterEvent__cdr_serialize+0x96>
 801b750:	b18f      	cbz	r7, 801b776 <_ParameterEvent__cdr_serialize+0x96>
 801b752:	2600      	movs	r6, #0
 801b754:	e001      	b.n	801b75a <_ParameterEvent__cdr_serialize+0x7a>
 801b756:	42b7      	cmp	r7, r6
 801b758:	d00d      	beq.n	801b776 <_ParameterEvent__cdr_serialize+0x96>
 801b75a:	f004 fe99 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b75e:	6a22      	ldr	r2, [r4, #32]
 801b760:	6843      	ldr	r3, [r0, #4]
 801b762:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 801b766:	689b      	ldr	r3, [r3, #8]
 801b768:	4629      	mov	r1, r5
 801b76a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801b76e:	3601      	adds	r6, #1
 801b770:	4798      	blx	r3
 801b772:	2800      	cmp	r0, #0
 801b774:	d1ef      	bne.n	801b756 <_ParameterEvent__cdr_serialize+0x76>
 801b776:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 801b778:	4628      	mov	r0, r5
 801b77a:	4639      	mov	r1, r7
 801b77c:	f7f5 fd9e 	bl	80112bc <ucdr_serialize_uint32_t>
 801b780:	4680      	mov	r8, r0
 801b782:	b190      	cbz	r0, 801b7aa <_ParameterEvent__cdr_serialize+0xca>
 801b784:	b19f      	cbz	r7, 801b7ae <_ParameterEvent__cdr_serialize+0xce>
 801b786:	2600      	movs	r6, #0
 801b788:	e001      	b.n	801b78e <_ParameterEvent__cdr_serialize+0xae>
 801b78a:	42b7      	cmp	r7, r6
 801b78c:	d00f      	beq.n	801b7ae <_ParameterEvent__cdr_serialize+0xce>
 801b78e:	f004 fe7f 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801b792:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b794:	6843      	ldr	r3, [r0, #4]
 801b796:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
 801b79a:	689b      	ldr	r3, [r3, #8]
 801b79c:	4629      	mov	r1, r5
 801b79e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801b7a2:	3601      	adds	r6, #1
 801b7a4:	4798      	blx	r3
 801b7a6:	2800      	cmp	r0, #0
 801b7a8:	d1ef      	bne.n	801b78a <_ParameterEvent__cdr_serialize+0xaa>
 801b7aa:	f04f 0800 	mov.w	r8, #0
 801b7ae:	4640      	mov	r0, r8
 801b7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7b4:	4632      	mov	r2, r6
 801b7b6:	4630      	mov	r0, r6
 801b7b8:	e7a6      	b.n	801b708 <_ParameterEvent__cdr_serialize+0x28>
 801b7ba:	bf00      	nop

0801b7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent>:
 801b7bc:	4800      	ldr	r0, [pc, #0]	@ (801b7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterEvent+0x4>)
 801b7be:	4770      	bx	lr
 801b7c0:	200017d0 	.word	0x200017d0

0801b7c4 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0>:
 801b7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7c8:	460e      	mov	r6, r1
 801b7ca:	4605      	mov	r5, r0
 801b7cc:	2101      	movs	r1, #1
 801b7ce:	4630      	mov	r0, r6
 801b7d0:	f7f7 fb70 	bl	8012eb4 <ucdr_alignment>
 801b7d4:	1c74      	adds	r4, r6, #1
 801b7d6:	1907      	adds	r7, r0, r4
 801b7d8:	2101      	movs	r1, #1
 801b7da:	4638      	mov	r0, r7
 801b7dc:	f7f7 fb6a 	bl	8012eb4 <ucdr_alignment>
 801b7e0:	1c44      	adds	r4, r0, #1
 801b7e2:	443c      	add	r4, r7
 801b7e4:	2108      	movs	r1, #8
 801b7e6:	4620      	mov	r0, r4
 801b7e8:	f7f7 fb64 	bl	8012eb4 <ucdr_alignment>
 801b7ec:	3008      	adds	r0, #8
 801b7ee:	4404      	add	r4, r0
 801b7f0:	2108      	movs	r1, #8
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	f7f7 fb5e 	bl	8012eb4 <ucdr_alignment>
 801b7f8:	3008      	adds	r0, #8
 801b7fa:	4404      	add	r4, r0
 801b7fc:	2104      	movs	r1, #4
 801b7fe:	4620      	mov	r0, r4
 801b800:	f7f7 fb58 	bl	8012eb4 <ucdr_alignment>
 801b804:	69eb      	ldr	r3, [r5, #28]
 801b806:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 801b808:	3305      	adds	r3, #5
 801b80a:	4403      	add	r3, r0
 801b80c:	441c      	add	r4, r3
 801b80e:	4620      	mov	r0, r4
 801b810:	2104      	movs	r1, #4
 801b812:	f7f7 fb4f 	bl	8012eb4 <ucdr_alignment>
 801b816:	3004      	adds	r0, #4
 801b818:	4404      	add	r4, r0
 801b81a:	bbb7      	cbnz	r7, 801b88a <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0xc6>
 801b81c:	4620      	mov	r0, r4
 801b81e:	2104      	movs	r1, #4
 801b820:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 801b822:	f7f7 fb47 	bl	8012eb4 <ucdr_alignment>
 801b826:	4404      	add	r4, r0
 801b828:	3404      	adds	r4, #4
 801b82a:	2f00      	cmp	r7, #0
 801b82c:	d144      	bne.n	801b8b8 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0xf4>
 801b82e:	4620      	mov	r0, r4
 801b830:	2104      	movs	r1, #4
 801b832:	6c2f      	ldr	r7, [r5, #64]	@ 0x40
 801b834:	f7f7 fb3e 	bl	8012eb4 <ucdr_alignment>
 801b838:	4404      	add	r4, r0
 801b83a:	3404      	adds	r4, #4
 801b83c:	bba7      	cbnz	r7, 801b8a8 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0xe4>
 801b83e:	4620      	mov	r0, r4
 801b840:	2104      	movs	r1, #4
 801b842:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801b844:	f7f7 fb36 	bl	8012eb4 <ucdr_alignment>
 801b848:	4404      	add	r4, r0
 801b84a:	3404      	adds	r4, #4
 801b84c:	bb27      	cbnz	r7, 801b898 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0xd4>
 801b84e:	4620      	mov	r0, r4
 801b850:	2104      	movs	r1, #4
 801b852:	6daf      	ldr	r7, [r5, #88]	@ 0x58
 801b854:	f7f7 fb2e 	bl	8012eb4 <ucdr_alignment>
 801b858:	4404      	add	r4, r0
 801b85a:	3404      	adds	r4, #4
 801b85c:	b197      	cbz	r7, 801b884 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0xc0>
 801b85e:	f04f 0800 	mov.w	r8, #0
 801b862:	4620      	mov	r0, r4
 801b864:	2104      	movs	r1, #4
 801b866:	f7f7 fb25 	bl	8012eb4 <ucdr_alignment>
 801b86a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 801b86c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801b870:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801b874:	4404      	add	r4, r0
 801b876:	685b      	ldr	r3, [r3, #4]
 801b878:	f108 0801 	add.w	r8, r8, #1
 801b87c:	3405      	adds	r4, #5
 801b87e:	4547      	cmp	r7, r8
 801b880:	441c      	add	r4, r3
 801b882:	d1ee      	bne.n	801b862 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0x9e>
 801b884:	1ba0      	subs	r0, r4, r6
 801b886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b88a:	4620      	mov	r0, r4
 801b88c:	2101      	movs	r1, #1
 801b88e:	f7f7 fb11 	bl	8012eb4 <ucdr_alignment>
 801b892:	443c      	add	r4, r7
 801b894:	4404      	add	r4, r0
 801b896:	e7c1      	b.n	801b81c <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0x58>
 801b898:	4620      	mov	r0, r4
 801b89a:	2108      	movs	r1, #8
 801b89c:	f7f7 fb0a 	bl	8012eb4 <ucdr_alignment>
 801b8a0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 801b8a4:	4404      	add	r4, r0
 801b8a6:	e7d2      	b.n	801b84e <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0x8a>
 801b8a8:	4620      	mov	r0, r4
 801b8aa:	2108      	movs	r1, #8
 801b8ac:	f7f7 fb02 	bl	8012eb4 <ucdr_alignment>
 801b8b0:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 801b8b4:	4404      	add	r4, r0
 801b8b6:	e7c2      	b.n	801b83e <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0x7a>
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	2101      	movs	r1, #1
 801b8bc:	f7f7 fafa 	bl	8012eb4 <ucdr_alignment>
 801b8c0:	443c      	add	r4, r7
 801b8c2:	4404      	add	r4, r0
 801b8c4:	e7b3      	b.n	801b82e <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0+0x6a>
 801b8c6:	bf00      	nop

0801b8c8 <get_serialized_size_rcl_interfaces__msg__ParameterValue>:
 801b8c8:	b108      	cbz	r0, 801b8ce <get_serialized_size_rcl_interfaces__msg__ParameterValue+0x6>
 801b8ca:	f7ff bf7b 	b.w	801b7c4 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0>
 801b8ce:	4770      	bx	lr

0801b8d0 <_ParameterValue__get_serialized_size>:
 801b8d0:	b110      	cbz	r0, 801b8d8 <_ParameterValue__get_serialized_size+0x8>
 801b8d2:	2100      	movs	r1, #0
 801b8d4:	f7ff bf76 	b.w	801b7c4 <get_serialized_size_rcl_interfaces__msg__ParameterValue.part.0>
 801b8d8:	4770      	bx	lr
 801b8da:	bf00      	nop

0801b8dc <_ParameterValue__cdr_deserialize>:
 801b8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b8e0:	460c      	mov	r4, r1
 801b8e2:	b083      	sub	sp, #12
 801b8e4:	2900      	cmp	r1, #0
 801b8e6:	f000 8083 	beq.w	801b9f0 <_ParameterValue__cdr_deserialize+0x114>
 801b8ea:	4606      	mov	r6, r0
 801b8ec:	f7f5 fae6 	bl	8010ebc <ucdr_deserialize_uint8_t>
 801b8f0:	1c61      	adds	r1, r4, #1
 801b8f2:	4630      	mov	r0, r6
 801b8f4:	f7f5 fab4 	bl	8010e60 <ucdr_deserialize_bool>
 801b8f8:	f104 0108 	add.w	r1, r4, #8
 801b8fc:	4630      	mov	r0, r6
 801b8fe:	f7f6 fc87 	bl	8012210 <ucdr_deserialize_int64_t>
 801b902:	f104 0110 	add.w	r1, r4, #16
 801b906:	4630      	mov	r0, r6
 801b908:	f7f7 f8e8 	bl	8012adc <ucdr_deserialize_double>
 801b90c:	6a25      	ldr	r5, [r4, #32]
 801b90e:	69a1      	ldr	r1, [r4, #24]
 801b910:	ab01      	add	r3, sp, #4
 801b912:	462a      	mov	r2, r5
 801b914:	4630      	mov	r0, r6
 801b916:	f7f7 fb4b 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801b91a:	9b01      	ldr	r3, [sp, #4]
 801b91c:	2800      	cmp	r0, #0
 801b91e:	d16d      	bne.n	801b9fc <_ParameterValue__cdr_deserialize+0x120>
 801b920:	429d      	cmp	r5, r3
 801b922:	f0c0 80ac 	bcc.w	801ba7e <_ParameterValue__cdr_deserialize+0x1a2>
 801b926:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 801b928:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801b92a:	ab01      	add	r3, sp, #4
 801b92c:	462a      	mov	r2, r5
 801b92e:	4630      	mov	r0, r6
 801b930:	f7f7 fb96 	bl	8013060 <ucdr_deserialize_sequence_uint8_t>
 801b934:	9b01      	ldr	r3, [sp, #4]
 801b936:	2800      	cmp	r0, #0
 801b938:	d064      	beq.n	801ba04 <_ParameterValue__cdr_deserialize+0x128>
 801b93a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b93c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801b93e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b940:	ab01      	add	r3, sp, #4
 801b942:	462a      	mov	r2, r5
 801b944:	4630      	mov	r0, r6
 801b946:	f7f7 fb5f 	bl	8013008 <ucdr_deserialize_sequence_bool>
 801b94a:	9b01      	ldr	r3, [sp, #4]
 801b94c:	2800      	cmp	r0, #0
 801b94e:	f000 8087 	beq.w	801ba60 <_ParameterValue__cdr_deserialize+0x184>
 801b952:	6363      	str	r3, [r4, #52]	@ 0x34
 801b954:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 801b956:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801b958:	ab01      	add	r3, sp, #4
 801b95a:	462a      	mov	r2, r5
 801b95c:	4630      	mov	r0, r6
 801b95e:	f7f7 fbab 	bl	80130b8 <ucdr_deserialize_sequence_int64_t>
 801b962:	9b01      	ldr	r3, [sp, #4]
 801b964:	2800      	cmp	r0, #0
 801b966:	d06b      	beq.n	801ba40 <_ParameterValue__cdr_deserialize+0x164>
 801b968:	6423      	str	r3, [r4, #64]	@ 0x40
 801b96a:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 801b96c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b96e:	ab01      	add	r3, sp, #4
 801b970:	462a      	mov	r2, r5
 801b972:	4630      	mov	r0, r6
 801b974:	f7f7 fbcc 	bl	8013110 <ucdr_deserialize_sequence_double>
 801b978:	9b01      	ldr	r3, [sp, #4]
 801b97a:	2800      	cmp	r0, #0
 801b97c:	d050      	beq.n	801ba20 <_ParameterValue__cdr_deserialize+0x144>
 801b97e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801b980:	4669      	mov	r1, sp
 801b982:	4630      	mov	r0, r6
 801b984:	f7f5 fdca 	bl	801151c <ucdr_deserialize_uint32_t>
 801b988:	9900      	ldr	r1, [sp, #0]
 801b98a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801b98c:	428b      	cmp	r3, r1
 801b98e:	4680      	mov	r8, r0
 801b990:	d32e      	bcc.n	801b9f0 <_ParameterValue__cdr_deserialize+0x114>
 801b992:	65a1      	str	r1, [r4, #88]	@ 0x58
 801b994:	2500      	movs	r5, #0
 801b996:	b368      	cbz	r0, 801b9f4 <_ParameterValue__cdr_deserialize+0x118>
 801b998:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b99c:	42a9      	cmp	r1, r5
 801b99e:	ab01      	add	r3, sp, #4
 801b9a0:	4630      	mov	r0, r6
 801b9a2:	ea4f 0782 	mov.w	r7, r2, lsl #2
 801b9a6:	d925      	bls.n	801b9f4 <_ParameterValue__cdr_deserialize+0x118>
 801b9a8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 801b9aa:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801b9ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b9b2:	f8dc 9008 	ldr.w	r9, [ip, #8]
 801b9b6:	464a      	mov	r2, r9
 801b9b8:	f7f7 fafa 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801b9bc:	3501      	adds	r5, #1
 801b9be:	9a01      	ldr	r2, [sp, #4]
 801b9c0:	4603      	mov	r3, r0
 801b9c2:	b130      	cbz	r0, 801b9d2 <_ParameterValue__cdr_deserialize+0xf6>
 801b9c4:	b102      	cbz	r2, 801b9c8 <_ParameterValue__cdr_deserialize+0xec>
 801b9c6:	3a01      	subs	r2, #1
 801b9c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801b9ca:	9900      	ldr	r1, [sp, #0]
 801b9cc:	443b      	add	r3, r7
 801b9ce:	605a      	str	r2, [r3, #4]
 801b9d0:	e7e2      	b.n	801b998 <_ParameterValue__cdr_deserialize+0xbc>
 801b9d2:	4591      	cmp	r9, r2
 801b9d4:	d20c      	bcs.n	801b9f0 <_ParameterValue__cdr_deserialize+0x114>
 801b9d6:	2101      	movs	r1, #1
 801b9d8:	7571      	strb	r1, [r6, #21]
 801b9da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b9dc:	75b0      	strb	r0, [r6, #22]
 801b9de:	4417      	add	r7, r2
 801b9e0:	4630      	mov	r0, r6
 801b9e2:	607b      	str	r3, [r7, #4]
 801b9e4:	f7f7 fa7c 	bl	8012ee0 <ucdr_align_to>
 801b9e8:	9901      	ldr	r1, [sp, #4]
 801b9ea:	4630      	mov	r0, r6
 801b9ec:	f7f7 faae 	bl	8012f4c <ucdr_advance_buffer>
 801b9f0:	f04f 0800 	mov.w	r8, #0
 801b9f4:	4640      	mov	r0, r8
 801b9f6:	b003      	add	sp, #12
 801b9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9fc:	b103      	cbz	r3, 801ba00 <_ParameterValue__cdr_deserialize+0x124>
 801b9fe:	3b01      	subs	r3, #1
 801ba00:	61e3      	str	r3, [r4, #28]
 801ba02:	e790      	b.n	801b926 <_ParameterValue__cdr_deserialize+0x4a>
 801ba04:	429d      	cmp	r5, r3
 801ba06:	d299      	bcs.n	801b93c <_ParameterValue__cdr_deserialize+0x60>
 801ba08:	2101      	movs	r1, #1
 801ba0a:	75b0      	strb	r0, [r6, #22]
 801ba0c:	7571      	strb	r1, [r6, #21]
 801ba0e:	62a0      	str	r0, [r4, #40]	@ 0x28
 801ba10:	4630      	mov	r0, r6
 801ba12:	f7f7 fa65 	bl	8012ee0 <ucdr_align_to>
 801ba16:	9901      	ldr	r1, [sp, #4]
 801ba18:	4630      	mov	r0, r6
 801ba1a:	f7f7 fa97 	bl	8012f4c <ucdr_advance_buffer>
 801ba1e:	e78d      	b.n	801b93c <_ParameterValue__cdr_deserialize+0x60>
 801ba20:	429d      	cmp	r5, r3
 801ba22:	d2ad      	bcs.n	801b980 <_ParameterValue__cdr_deserialize+0xa4>
 801ba24:	2301      	movs	r3, #1
 801ba26:	75b0      	strb	r0, [r6, #22]
 801ba28:	7573      	strb	r3, [r6, #21]
 801ba2a:	2108      	movs	r1, #8
 801ba2c:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801ba2e:	4630      	mov	r0, r6
 801ba30:	f7f7 fa56 	bl	8012ee0 <ucdr_align_to>
 801ba34:	9901      	ldr	r1, [sp, #4]
 801ba36:	4630      	mov	r0, r6
 801ba38:	00c9      	lsls	r1, r1, #3
 801ba3a:	f7f7 fa87 	bl	8012f4c <ucdr_advance_buffer>
 801ba3e:	e79f      	b.n	801b980 <_ParameterValue__cdr_deserialize+0xa4>
 801ba40:	429d      	cmp	r5, r3
 801ba42:	d292      	bcs.n	801b96a <_ParameterValue__cdr_deserialize+0x8e>
 801ba44:	2301      	movs	r3, #1
 801ba46:	75b0      	strb	r0, [r6, #22]
 801ba48:	7573      	strb	r3, [r6, #21]
 801ba4a:	2108      	movs	r1, #8
 801ba4c:	6420      	str	r0, [r4, #64]	@ 0x40
 801ba4e:	4630      	mov	r0, r6
 801ba50:	f7f7 fa46 	bl	8012ee0 <ucdr_align_to>
 801ba54:	9901      	ldr	r1, [sp, #4]
 801ba56:	4630      	mov	r0, r6
 801ba58:	00c9      	lsls	r1, r1, #3
 801ba5a:	f7f7 fa77 	bl	8012f4c <ucdr_advance_buffer>
 801ba5e:	e784      	b.n	801b96a <_ParameterValue__cdr_deserialize+0x8e>
 801ba60:	429d      	cmp	r5, r3
 801ba62:	f4bf af77 	bcs.w	801b954 <_ParameterValue__cdr_deserialize+0x78>
 801ba66:	2101      	movs	r1, #1
 801ba68:	75b0      	strb	r0, [r6, #22]
 801ba6a:	7571      	strb	r1, [r6, #21]
 801ba6c:	6360      	str	r0, [r4, #52]	@ 0x34
 801ba6e:	4630      	mov	r0, r6
 801ba70:	f7f7 fa36 	bl	8012ee0 <ucdr_align_to>
 801ba74:	9901      	ldr	r1, [sp, #4]
 801ba76:	4630      	mov	r0, r6
 801ba78:	f7f7 fa68 	bl	8012f4c <ucdr_advance_buffer>
 801ba7c:	e76a      	b.n	801b954 <_ParameterValue__cdr_deserialize+0x78>
 801ba7e:	2101      	movs	r1, #1
 801ba80:	75b0      	strb	r0, [r6, #22]
 801ba82:	7571      	strb	r1, [r6, #21]
 801ba84:	61e0      	str	r0, [r4, #28]
 801ba86:	4630      	mov	r0, r6
 801ba88:	f7f7 fa2a 	bl	8012ee0 <ucdr_align_to>
 801ba8c:	9901      	ldr	r1, [sp, #4]
 801ba8e:	4630      	mov	r0, r6
 801ba90:	f7f7 fa5c 	bl	8012f4c <ucdr_advance_buffer>
 801ba94:	e747      	b.n	801b926 <_ParameterValue__cdr_deserialize+0x4a>
 801ba96:	bf00      	nop

0801ba98 <_ParameterValue__cdr_serialize>:
 801ba98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba9c:	2800      	cmp	r0, #0
 801ba9e:	d059      	beq.n	801bb54 <_ParameterValue__cdr_serialize+0xbc>
 801baa0:	460f      	mov	r7, r1
 801baa2:	4606      	mov	r6, r0
 801baa4:	7801      	ldrb	r1, [r0, #0]
 801baa6:	4638      	mov	r0, r7
 801baa8:	f7f5 f9f2 	bl	8010e90 <ucdr_serialize_uint8_t>
 801baac:	7871      	ldrb	r1, [r6, #1]
 801baae:	4638      	mov	r0, r7
 801bab0:	f7f5 f9c0 	bl	8010e34 <ucdr_serialize_bool>
 801bab4:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 801bab8:	4638      	mov	r0, r7
 801baba:	f7f6 fa07 	bl	8011ecc <ucdr_serialize_int64_t>
 801babe:	ed96 0b04 	vldr	d0, [r6, #16]
 801bac2:	4638      	mov	r0, r7
 801bac4:	f7f6 fe68 	bl	8012798 <ucdr_serialize_double>
 801bac8:	69b4      	ldr	r4, [r6, #24]
 801baca:	2c00      	cmp	r4, #0
 801bacc:	d047      	beq.n	801bb5e <_ParameterValue__cdr_serialize+0xc6>
 801bace:	4620      	mov	r0, r4
 801bad0:	f7e4 fb96 	bl	8000200 <strlen>
 801bad4:	1c42      	adds	r2, r0, #1
 801bad6:	4621      	mov	r1, r4
 801bad8:	61f0      	str	r0, [r6, #28]
 801bada:	4638      	mov	r0, r7
 801badc:	f7f7 fa56 	bl	8012f8c <ucdr_serialize_sequence_char>
 801bae0:	e9d6 1209 	ldrd	r1, r2, [r6, #36]	@ 0x24
 801bae4:	4638      	mov	r0, r7
 801bae6:	f7f7 faa9 	bl	801303c <ucdr_serialize_sequence_uint8_t>
 801baea:	e9d6 120c 	ldrd	r1, r2, [r6, #48]	@ 0x30
 801baee:	4638      	mov	r0, r7
 801baf0:	f7f7 fa78 	bl	8012fe4 <ucdr_serialize_sequence_bool>
 801baf4:	e9d6 120f 	ldrd	r1, r2, [r6, #60]	@ 0x3c
 801baf8:	4638      	mov	r0, r7
 801bafa:	f7f7 facb 	bl	8013094 <ucdr_serialize_sequence_int64_t>
 801bafe:	e9d6 1212 	ldrd	r1, r2, [r6, #72]	@ 0x48
 801bb02:	4638      	mov	r0, r7
 801bb04:	f7f7 faf2 	bl	80130ec <ucdr_serialize_sequence_double>
 801bb08:	f8d6 8058 	ldr.w	r8, [r6, #88]	@ 0x58
 801bb0c:	4638      	mov	r0, r7
 801bb0e:	4641      	mov	r1, r8
 801bb10:	f7f5 fbd4 	bl	80112bc <ucdr_serialize_uint32_t>
 801bb14:	4681      	mov	r9, r0
 801bb16:	b1e8      	cbz	r0, 801bb54 <_ParameterValue__cdr_serialize+0xbc>
 801bb18:	f1b8 0f00 	cmp.w	r8, #0
 801bb1c:	d01c      	beq.n	801bb58 <_ParameterValue__cdr_serialize+0xc0>
 801bb1e:	2400      	movs	r4, #0
 801bb20:	e00c      	b.n	801bb3c <_ParameterValue__cdr_serialize+0xa4>
 801bb22:	f7e4 fb6d 	bl	8000200 <strlen>
 801bb26:	1c42      	adds	r2, r0, #1
 801bb28:	f8ca 0004 	str.w	r0, [sl, #4]
 801bb2c:	4629      	mov	r1, r5
 801bb2e:	4638      	mov	r0, r7
 801bb30:	f7f7 fa2c 	bl	8012f8c <ucdr_serialize_sequence_char>
 801bb34:	3401      	adds	r4, #1
 801bb36:	b168      	cbz	r0, 801bb54 <_ParameterValue__cdr_serialize+0xbc>
 801bb38:	45a0      	cmp	r8, r4
 801bb3a:	d00d      	beq.n	801bb58 <_ParameterValue__cdr_serialize+0xc0>
 801bb3c:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801bb3e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801bb42:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 801bb46:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801bb4a:	4628      	mov	r0, r5
 801bb4c:	2d00      	cmp	r5, #0
 801bb4e:	d1e8      	bne.n	801bb22 <_ParameterValue__cdr_serialize+0x8a>
 801bb50:	462a      	mov	r2, r5
 801bb52:	e7e9      	b.n	801bb28 <_ParameterValue__cdr_serialize+0x90>
 801bb54:	f04f 0900 	mov.w	r9, #0
 801bb58:	4648      	mov	r0, r9
 801bb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb5e:	4622      	mov	r2, r4
 801bb60:	4620      	mov	r0, r4
 801bb62:	e7b8      	b.n	801bad6 <_ParameterValue__cdr_serialize+0x3e>

0801bb64 <_ParameterValue__max_serialized_size>:
 801bb64:	b538      	push	{r3, r4, r5, lr}
 801bb66:	2101      	movs	r1, #1
 801bb68:	2000      	movs	r0, #0
 801bb6a:	f7f7 f9a3 	bl	8012eb4 <ucdr_alignment>
 801bb6e:	1c45      	adds	r5, r0, #1
 801bb70:	2101      	movs	r1, #1
 801bb72:	4628      	mov	r0, r5
 801bb74:	f7f7 f99e 	bl	8012eb4 <ucdr_alignment>
 801bb78:	1c44      	adds	r4, r0, #1
 801bb7a:	442c      	add	r4, r5
 801bb7c:	2108      	movs	r1, #8
 801bb7e:	4620      	mov	r0, r4
 801bb80:	f7f7 f998 	bl	8012eb4 <ucdr_alignment>
 801bb84:	3008      	adds	r0, #8
 801bb86:	4404      	add	r4, r0
 801bb88:	2108      	movs	r1, #8
 801bb8a:	4620      	mov	r0, r4
 801bb8c:	f7f7 f992 	bl	8012eb4 <ucdr_alignment>
 801bb90:	3008      	adds	r0, #8
 801bb92:	4420      	add	r0, r4
 801bb94:	bd38      	pop	{r3, r4, r5, pc}
 801bb96:	bf00      	nop

0801bb98 <max_serialized_size_rcl_interfaces__msg__ParameterValue>:
 801bb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb9c:	f04f 0801 	mov.w	r8, #1
 801bba0:	460c      	mov	r4, r1
 801bba2:	4607      	mov	r7, r0
 801bba4:	4641      	mov	r1, r8
 801bba6:	f880 8000 	strb.w	r8, [r0]
 801bbaa:	4620      	mov	r0, r4
 801bbac:	f7f7 f982 	bl	8012eb4 <ucdr_alignment>
 801bbb0:	eb04 0608 	add.w	r6, r4, r8
 801bbb4:	4406      	add	r6, r0
 801bbb6:	4641      	mov	r1, r8
 801bbb8:	4630      	mov	r0, r6
 801bbba:	f7f7 f97b 	bl	8012eb4 <ucdr_alignment>
 801bbbe:	eb00 0508 	add.w	r5, r0, r8
 801bbc2:	442e      	add	r6, r5
 801bbc4:	2108      	movs	r1, #8
 801bbc6:	4630      	mov	r0, r6
 801bbc8:	f7f7 f974 	bl	8012eb4 <ucdr_alignment>
 801bbcc:	f100 0508 	add.w	r5, r0, #8
 801bbd0:	4435      	add	r5, r6
 801bbd2:	2108      	movs	r1, #8
 801bbd4:	4628      	mov	r0, r5
 801bbd6:	f7f7 f96d 	bl	8012eb4 <ucdr_alignment>
 801bbda:	f1c4 0408 	rsb	r4, r4, #8
 801bbde:	2300      	movs	r3, #0
 801bbe0:	4420      	add	r0, r4
 801bbe2:	703b      	strb	r3, [r7, #0]
 801bbe4:	4428      	add	r0, r5
 801bbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbea:	bf00      	nop

0801bbec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>:
 801bbec:	4800      	ldr	r0, [pc, #0]	@ (801bbf0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue+0x4>)
 801bbee:	4770      	bx	lr
 801bbf0:	200017f8 	.word	0x200017f8

0801bbf4 <_SetParameters_Request__max_serialized_size>:
 801bbf4:	2000      	movs	r0, #0
 801bbf6:	4770      	bx	lr

0801bbf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request>:
 801bbf8:	4800      	ldr	r0, [pc, #0]	@ (801bbfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Request+0x4>)
 801bbfa:	4770      	bx	lr
 801bbfc:	2000183c 	.word	0x2000183c

0801bc00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response>:
 801bc00:	4800      	ldr	r0, [pc, #0]	@ (801bc04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__srv__SetParameters_Response+0x4>)
 801bc02:	4770      	bx	lr
 801bc04:	20001848 	.word	0x20001848

0801bc08 <get_serialized_size_rcl_interfaces__srv__SetParameters_Request>:
 801bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc0c:	4607      	mov	r7, r0
 801bc0e:	b338      	cbz	r0, 801bc60 <get_serialized_size_rcl_interfaces__srv__SetParameters_Request+0x58>
 801bc10:	4689      	mov	r9, r1
 801bc12:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801bc16:	2104      	movs	r1, #4
 801bc18:	4648      	mov	r0, r9
 801bc1a:	f7f7 f94b 	bl	8012eb4 <ucdr_alignment>
 801bc1e:	f109 0604 	add.w	r6, r9, #4
 801bc22:	4406      	add	r6, r0
 801bc24:	f1b8 0f00 	cmp.w	r8, #0
 801bc28:	d018      	beq.n	801bc5c <get_serialized_size_rcl_interfaces__srv__SetParameters_Request+0x54>
 801bc2a:	2500      	movs	r5, #0
 801bc2c:	f004 fc30 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801bc30:	683a      	ldr	r2, [r7, #0]
 801bc32:	6843      	ldr	r3, [r0, #4]
 801bc34:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 801bc38:	4631      	mov	r1, r6
 801bc3a:	695b      	ldr	r3, [r3, #20]
 801bc3c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801bc40:	4798      	blx	r3
 801bc42:	4604      	mov	r4, r0
 801bc44:	2c04      	cmp	r4, #4
 801bc46:	4621      	mov	r1, r4
 801bc48:	4630      	mov	r0, r6
 801bc4a:	bf28      	it	cs
 801bc4c:	2104      	movcs	r1, #4
 801bc4e:	f7f7 f931 	bl	8012eb4 <ucdr_alignment>
 801bc52:	3501      	adds	r5, #1
 801bc54:	4404      	add	r4, r0
 801bc56:	45a8      	cmp	r8, r5
 801bc58:	4426      	add	r6, r4
 801bc5a:	d1e7      	bne.n	801bc2c <get_serialized_size_rcl_interfaces__srv__SetParameters_Request+0x24>
 801bc5c:	eba6 0009 	sub.w	r0, r6, r9
 801bc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801bc64 <_SetParameters_Request__cdr_deserialize>:
 801bc64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc66:	460e      	mov	r6, r1
 801bc68:	b083      	sub	sp, #12
 801bc6a:	b301      	cbz	r1, 801bcae <_SetParameters_Request__cdr_deserialize+0x4a>
 801bc6c:	a901      	add	r1, sp, #4
 801bc6e:	4607      	mov	r7, r0
 801bc70:	f7f5 fc54 	bl	801151c <ucdr_deserialize_uint32_t>
 801bc74:	9b01      	ldr	r3, [sp, #4]
 801bc76:	68b2      	ldr	r2, [r6, #8]
 801bc78:	429a      	cmp	r2, r3
 801bc7a:	d315      	bcc.n	801bca8 <_SetParameters_Request__cdr_deserialize+0x44>
 801bc7c:	6073      	str	r3, [r6, #4]
 801bc7e:	b1a3      	cbz	r3, 801bcaa <_SetParameters_Request__cdr_deserialize+0x46>
 801bc80:	2400      	movs	r4, #0
 801bc82:	4625      	mov	r5, r4
 801bc84:	e002      	b.n	801bc8c <_SetParameters_Request__cdr_deserialize+0x28>
 801bc86:	9b01      	ldr	r3, [sp, #4]
 801bc88:	429d      	cmp	r5, r3
 801bc8a:	d20e      	bcs.n	801bcaa <_SetParameters_Request__cdr_deserialize+0x46>
 801bc8c:	f004 fc00 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801bc90:	6831      	ldr	r1, [r6, #0]
 801bc92:	6843      	ldr	r3, [r0, #4]
 801bc94:	4421      	add	r1, r4
 801bc96:	68db      	ldr	r3, [r3, #12]
 801bc98:	4638      	mov	r0, r7
 801bc9a:	4798      	blx	r3
 801bc9c:	3501      	adds	r5, #1
 801bc9e:	3470      	adds	r4, #112	@ 0x70
 801bca0:	2800      	cmp	r0, #0
 801bca2:	d1f0      	bne.n	801bc86 <_SetParameters_Request__cdr_deserialize+0x22>
 801bca4:	b003      	add	sp, #12
 801bca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bca8:	2000      	movs	r0, #0
 801bcaa:	b003      	add	sp, #12
 801bcac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bcae:	4608      	mov	r0, r1
 801bcb0:	b003      	add	sp, #12
 801bcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bcb4 <_SetParameters_Request__cdr_serialize>:
 801bcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcb8:	b1d8      	cbz	r0, 801bcf2 <_SetParameters_Request__cdr_serialize+0x3e>
 801bcba:	6847      	ldr	r7, [r0, #4]
 801bcbc:	460e      	mov	r6, r1
 801bcbe:	4605      	mov	r5, r0
 801bcc0:	4608      	mov	r0, r1
 801bcc2:	4639      	mov	r1, r7
 801bcc4:	f7f5 fafa 	bl	80112bc <ucdr_serialize_uint32_t>
 801bcc8:	4680      	mov	r8, r0
 801bcca:	b190      	cbz	r0, 801bcf2 <_SetParameters_Request__cdr_serialize+0x3e>
 801bccc:	b19f      	cbz	r7, 801bcf6 <_SetParameters_Request__cdr_serialize+0x42>
 801bcce:	2400      	movs	r4, #0
 801bcd0:	e001      	b.n	801bcd6 <_SetParameters_Request__cdr_serialize+0x22>
 801bcd2:	42a7      	cmp	r7, r4
 801bcd4:	d00f      	beq.n	801bcf6 <_SetParameters_Request__cdr_serialize+0x42>
 801bcd6:	f004 fbdb 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801bcda:	682a      	ldr	r2, [r5, #0]
 801bcdc:	6843      	ldr	r3, [r0, #4]
 801bcde:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 801bce2:	689b      	ldr	r3, [r3, #8]
 801bce4:	4631      	mov	r1, r6
 801bce6:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801bcea:	3401      	adds	r4, #1
 801bcec:	4798      	blx	r3
 801bcee:	2800      	cmp	r0, #0
 801bcf0:	d1ef      	bne.n	801bcd2 <_SetParameters_Request__cdr_serialize+0x1e>
 801bcf2:	f04f 0800 	mov.w	r8, #0
 801bcf6:	4640      	mov	r0, r8
 801bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bcfc <get_serialized_size_rcl_interfaces__srv__SetParameters_Response>:
 801bcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd00:	4607      	mov	r7, r0
 801bd02:	b328      	cbz	r0, 801bd50 <get_serialized_size_rcl_interfaces__srv__SetParameters_Response+0x54>
 801bd04:	4689      	mov	r9, r1
 801bd06:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801bd0a:	2104      	movs	r1, #4
 801bd0c:	4648      	mov	r0, r9
 801bd0e:	f7f7 f8d1 	bl	8012eb4 <ucdr_alignment>
 801bd12:	f109 0504 	add.w	r5, r9, #4
 801bd16:	4405      	add	r5, r0
 801bd18:	f1b8 0f00 	cmp.w	r8, #0
 801bd1c:	d016      	beq.n	801bd4c <get_serialized_size_rcl_interfaces__srv__SetParameters_Response+0x50>
 801bd1e:	2600      	movs	r6, #0
 801bd20:	f000 f940 	bl	801bfa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>
 801bd24:	683a      	ldr	r2, [r7, #0]
 801bd26:	6843      	ldr	r3, [r0, #4]
 801bd28:	4629      	mov	r1, r5
 801bd2a:	eb02 1006 	add.w	r0, r2, r6, lsl #4
 801bd2e:	695b      	ldr	r3, [r3, #20]
 801bd30:	4798      	blx	r3
 801bd32:	4604      	mov	r4, r0
 801bd34:	2c04      	cmp	r4, #4
 801bd36:	4621      	mov	r1, r4
 801bd38:	4628      	mov	r0, r5
 801bd3a:	bf28      	it	cs
 801bd3c:	2104      	movcs	r1, #4
 801bd3e:	f7f7 f8b9 	bl	8012eb4 <ucdr_alignment>
 801bd42:	3601      	adds	r6, #1
 801bd44:	4404      	add	r4, r0
 801bd46:	45b0      	cmp	r8, r6
 801bd48:	4425      	add	r5, r4
 801bd4a:	d1e9      	bne.n	801bd20 <get_serialized_size_rcl_interfaces__srv__SetParameters_Response+0x24>
 801bd4c:	eba5 0009 	sub.w	r0, r5, r9
 801bd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801bd54 <_SetParameters_Response__cdr_deserialize>:
 801bd54:	b570      	push	{r4, r5, r6, lr}
 801bd56:	460d      	mov	r5, r1
 801bd58:	b082      	sub	sp, #8
 801bd5a:	b1f9      	cbz	r1, 801bd9c <_SetParameters_Response__cdr_deserialize+0x48>
 801bd5c:	a901      	add	r1, sp, #4
 801bd5e:	4606      	mov	r6, r0
 801bd60:	f7f5 fbdc 	bl	801151c <ucdr_deserialize_uint32_t>
 801bd64:	9b01      	ldr	r3, [sp, #4]
 801bd66:	68aa      	ldr	r2, [r5, #8]
 801bd68:	429a      	cmp	r2, r3
 801bd6a:	d314      	bcc.n	801bd96 <_SetParameters_Response__cdr_deserialize+0x42>
 801bd6c:	606b      	str	r3, [r5, #4]
 801bd6e:	b19b      	cbz	r3, 801bd98 <_SetParameters_Response__cdr_deserialize+0x44>
 801bd70:	2400      	movs	r4, #0
 801bd72:	e002      	b.n	801bd7a <_SetParameters_Response__cdr_deserialize+0x26>
 801bd74:	9b01      	ldr	r3, [sp, #4]
 801bd76:	429c      	cmp	r4, r3
 801bd78:	d20e      	bcs.n	801bd98 <_SetParameters_Response__cdr_deserialize+0x44>
 801bd7a:	f000 f913 	bl	801bfa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>
 801bd7e:	6829      	ldr	r1, [r5, #0]
 801bd80:	6843      	ldr	r3, [r0, #4]
 801bd82:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 801bd86:	68db      	ldr	r3, [r3, #12]
 801bd88:	4630      	mov	r0, r6
 801bd8a:	3401      	adds	r4, #1
 801bd8c:	4798      	blx	r3
 801bd8e:	2800      	cmp	r0, #0
 801bd90:	d1f0      	bne.n	801bd74 <_SetParameters_Response__cdr_deserialize+0x20>
 801bd92:	b002      	add	sp, #8
 801bd94:	bd70      	pop	{r4, r5, r6, pc}
 801bd96:	2000      	movs	r0, #0
 801bd98:	b002      	add	sp, #8
 801bd9a:	bd70      	pop	{r4, r5, r6, pc}
 801bd9c:	4608      	mov	r0, r1
 801bd9e:	b002      	add	sp, #8
 801bda0:	bd70      	pop	{r4, r5, r6, pc}
 801bda2:	bf00      	nop

0801bda4 <_SetParameters_Response__cdr_serialize>:
 801bda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bda8:	b1c8      	cbz	r0, 801bdde <_SetParameters_Response__cdr_serialize+0x3a>
 801bdaa:	6847      	ldr	r7, [r0, #4]
 801bdac:	460e      	mov	r6, r1
 801bdae:	4605      	mov	r5, r0
 801bdb0:	4608      	mov	r0, r1
 801bdb2:	4639      	mov	r1, r7
 801bdb4:	f7f5 fa82 	bl	80112bc <ucdr_serialize_uint32_t>
 801bdb8:	4680      	mov	r8, r0
 801bdba:	b180      	cbz	r0, 801bdde <_SetParameters_Response__cdr_serialize+0x3a>
 801bdbc:	b18f      	cbz	r7, 801bde2 <_SetParameters_Response__cdr_serialize+0x3e>
 801bdbe:	2400      	movs	r4, #0
 801bdc0:	e001      	b.n	801bdc6 <_SetParameters_Response__cdr_serialize+0x22>
 801bdc2:	42a7      	cmp	r7, r4
 801bdc4:	d00d      	beq.n	801bde2 <_SetParameters_Response__cdr_serialize+0x3e>
 801bdc6:	f000 f8ed 	bl	801bfa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>
 801bdca:	682a      	ldr	r2, [r5, #0]
 801bdcc:	6843      	ldr	r3, [r0, #4]
 801bdce:	4631      	mov	r1, r6
 801bdd0:	eb02 1004 	add.w	r0, r2, r4, lsl #4
 801bdd4:	689b      	ldr	r3, [r3, #8]
 801bdd6:	3401      	adds	r4, #1
 801bdd8:	4798      	blx	r3
 801bdda:	2800      	cmp	r0, #0
 801bddc:	d1f1      	bne.n	801bdc2 <_SetParameters_Response__cdr_serialize+0x1e>
 801bdde:	f04f 0800 	mov.w	r8, #0
 801bde2:	4640      	mov	r0, r8
 801bde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bde8 <_SetParameters_Response__max_serialized_size>:
 801bde8:	2000      	movs	r0, #0
 801bdea:	4770      	bx	lr

0801bdec <_SetParameters_Response__get_serialized_size>:
 801bdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdf0:	4607      	mov	r7, r0
 801bdf2:	b318      	cbz	r0, 801be3c <_SetParameters_Response__get_serialized_size+0x50>
 801bdf4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801bdf8:	2104      	movs	r1, #4
 801bdfa:	2000      	movs	r0, #0
 801bdfc:	f7f7 f85a 	bl	8012eb4 <ucdr_alignment>
 801be00:	1d05      	adds	r5, r0, #4
 801be02:	f1b8 0f00 	cmp.w	r8, #0
 801be06:	d016      	beq.n	801be36 <_SetParameters_Response__get_serialized_size+0x4a>
 801be08:	2600      	movs	r6, #0
 801be0a:	f000 f8cb 	bl	801bfa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>
 801be0e:	683a      	ldr	r2, [r7, #0]
 801be10:	6843      	ldr	r3, [r0, #4]
 801be12:	4629      	mov	r1, r5
 801be14:	eb02 1006 	add.w	r0, r2, r6, lsl #4
 801be18:	695b      	ldr	r3, [r3, #20]
 801be1a:	4798      	blx	r3
 801be1c:	4604      	mov	r4, r0
 801be1e:	2c04      	cmp	r4, #4
 801be20:	4621      	mov	r1, r4
 801be22:	4628      	mov	r0, r5
 801be24:	bf28      	it	cs
 801be26:	2104      	movcs	r1, #4
 801be28:	f7f7 f844 	bl	8012eb4 <ucdr_alignment>
 801be2c:	3601      	adds	r6, #1
 801be2e:	4404      	add	r4, r0
 801be30:	45b0      	cmp	r8, r6
 801be32:	4425      	add	r5, r4
 801be34:	d1e9      	bne.n	801be0a <_SetParameters_Response__get_serialized_size+0x1e>
 801be36:	4628      	mov	r0, r5
 801be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be3c:	4605      	mov	r5, r0
 801be3e:	4628      	mov	r0, r5
 801be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801be44 <_SetParameters_Request__get_serialized_size>:
 801be44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be48:	4607      	mov	r7, r0
 801be4a:	b328      	cbz	r0, 801be98 <_SetParameters_Request__get_serialized_size+0x54>
 801be4c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801be50:	2104      	movs	r1, #4
 801be52:	2000      	movs	r0, #0
 801be54:	f7f7 f82e 	bl	8012eb4 <ucdr_alignment>
 801be58:	1d06      	adds	r6, r0, #4
 801be5a:	f1b8 0f00 	cmp.w	r8, #0
 801be5e:	d018      	beq.n	801be92 <_SetParameters_Request__get_serialized_size+0x4e>
 801be60:	2500      	movs	r5, #0
 801be62:	f004 fb15 	bl	8020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>
 801be66:	683a      	ldr	r2, [r7, #0]
 801be68:	6843      	ldr	r3, [r0, #4]
 801be6a:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 801be6e:	4631      	mov	r1, r6
 801be70:	695b      	ldr	r3, [r3, #20]
 801be72:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 801be76:	4798      	blx	r3
 801be78:	4604      	mov	r4, r0
 801be7a:	2c04      	cmp	r4, #4
 801be7c:	4621      	mov	r1, r4
 801be7e:	4630      	mov	r0, r6
 801be80:	bf28      	it	cs
 801be82:	2104      	movcs	r1, #4
 801be84:	f7f7 f816 	bl	8012eb4 <ucdr_alignment>
 801be88:	3501      	adds	r5, #1
 801be8a:	4404      	add	r4, r0
 801be8c:	45a8      	cmp	r8, r5
 801be8e:	4426      	add	r6, r4
 801be90:	d1e7      	bne.n	801be62 <_SetParameters_Request__get_serialized_size+0x1e>
 801be92:	4630      	mov	r0, r6
 801be94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be98:	4606      	mov	r6, r0
 801be9a:	4630      	mov	r0, r6
 801be9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bea0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters>:
 801bea0:	4800      	ldr	r0, [pc, #0]	@ (801bea4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__rcl_interfaces__srv__SetParameters+0x4>)
 801bea2:	4770      	bx	lr
 801bea4:	20001830 	.word	0x20001830

0801bea8 <_SetParametersResult__max_serialized_size>:
 801bea8:	b508      	push	{r3, lr}
 801beaa:	2101      	movs	r1, #1
 801beac:	2000      	movs	r0, #0
 801beae:	f7f7 f801 	bl	8012eb4 <ucdr_alignment>
 801beb2:	3001      	adds	r0, #1
 801beb4:	bd08      	pop	{r3, pc}
 801beb6:	bf00      	nop

0801beb8 <get_serialized_size_rcl_interfaces__msg__SetParametersResult>:
 801beb8:	b570      	push	{r4, r5, r6, lr}
 801beba:	4605      	mov	r5, r0
 801bebc:	b180      	cbz	r0, 801bee0 <get_serialized_size_rcl_interfaces__msg__SetParametersResult+0x28>
 801bebe:	460c      	mov	r4, r1
 801bec0:	4620      	mov	r0, r4
 801bec2:	2101      	movs	r1, #1
 801bec4:	f7f6 fff6 	bl	8012eb4 <ucdr_alignment>
 801bec8:	1c63      	adds	r3, r4, #1
 801beca:	181e      	adds	r6, r3, r0
 801becc:	2104      	movs	r1, #4
 801bece:	4630      	mov	r0, r6
 801bed0:	f7f6 fff0 	bl	8012eb4 <ucdr_alignment>
 801bed4:	68a9      	ldr	r1, [r5, #8]
 801bed6:	f1c4 0405 	rsb	r4, r4, #5
 801beda:	440c      	add	r4, r1
 801bedc:	4404      	add	r4, r0
 801bede:	19a0      	adds	r0, r4, r6
 801bee0:	bd70      	pop	{r4, r5, r6, pc}
 801bee2:	bf00      	nop

0801bee4 <_SetParametersResult__cdr_deserialize>:
 801bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bee6:	460c      	mov	r4, r1
 801bee8:	b083      	sub	sp, #12
 801beea:	b1b9      	cbz	r1, 801bf1c <_SetParametersResult__cdr_deserialize+0x38>
 801beec:	4606      	mov	r6, r0
 801beee:	f7f4 ffb7 	bl	8010e60 <ucdr_deserialize_bool>
 801bef2:	68e7      	ldr	r7, [r4, #12]
 801bef4:	6861      	ldr	r1, [r4, #4]
 801bef6:	ab01      	add	r3, sp, #4
 801bef8:	463a      	mov	r2, r7
 801befa:	4630      	mov	r0, r6
 801befc:	f7f7 f858 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801bf00:	9b01      	ldr	r3, [sp, #4]
 801bf02:	4605      	mov	r5, r0
 801bf04:	b920      	cbnz	r0, 801bf10 <_SetParametersResult__cdr_deserialize+0x2c>
 801bf06:	429f      	cmp	r7, r3
 801bf08:	d30c      	bcc.n	801bf24 <_SetParametersResult__cdr_deserialize+0x40>
 801bf0a:	4628      	mov	r0, r5
 801bf0c:	b003      	add	sp, #12
 801bf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf10:	b103      	cbz	r3, 801bf14 <_SetParametersResult__cdr_deserialize+0x30>
 801bf12:	3b01      	subs	r3, #1
 801bf14:	4628      	mov	r0, r5
 801bf16:	60a3      	str	r3, [r4, #8]
 801bf18:	b003      	add	sp, #12
 801bf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf1c:	460d      	mov	r5, r1
 801bf1e:	4628      	mov	r0, r5
 801bf20:	b003      	add	sp, #12
 801bf22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf24:	2101      	movs	r1, #1
 801bf26:	75b0      	strb	r0, [r6, #22]
 801bf28:	7571      	strb	r1, [r6, #21]
 801bf2a:	4630      	mov	r0, r6
 801bf2c:	60a5      	str	r5, [r4, #8]
 801bf2e:	f7f6 ffd7 	bl	8012ee0 <ucdr_align_to>
 801bf32:	4630      	mov	r0, r6
 801bf34:	9901      	ldr	r1, [sp, #4]
 801bf36:	f7f7 f809 	bl	8012f4c <ucdr_advance_buffer>
 801bf3a:	4628      	mov	r0, r5
 801bf3c:	b003      	add	sp, #12
 801bf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bf40 <_SetParametersResult__cdr_serialize>:
 801bf40:	b1e0      	cbz	r0, 801bf7c <_SetParametersResult__cdr_serialize+0x3c>
 801bf42:	b570      	push	{r4, r5, r6, lr}
 801bf44:	460d      	mov	r5, r1
 801bf46:	4604      	mov	r4, r0
 801bf48:	7801      	ldrb	r1, [r0, #0]
 801bf4a:	4628      	mov	r0, r5
 801bf4c:	f7f4 ff72 	bl	8010e34 <ucdr_serialize_bool>
 801bf50:	6866      	ldr	r6, [r4, #4]
 801bf52:	b156      	cbz	r6, 801bf6a <_SetParametersResult__cdr_serialize+0x2a>
 801bf54:	4630      	mov	r0, r6
 801bf56:	f7e4 f953 	bl	8000200 <strlen>
 801bf5a:	4631      	mov	r1, r6
 801bf5c:	60a0      	str	r0, [r4, #8]
 801bf5e:	1c42      	adds	r2, r0, #1
 801bf60:	4628      	mov	r0, r5
 801bf62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf66:	f7f7 b811 	b.w	8012f8c <ucdr_serialize_sequence_char>
 801bf6a:	4630      	mov	r0, r6
 801bf6c:	60a0      	str	r0, [r4, #8]
 801bf6e:	4632      	mov	r2, r6
 801bf70:	4631      	mov	r1, r6
 801bf72:	4628      	mov	r0, r5
 801bf74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf78:	f7f7 b808 	b.w	8012f8c <ucdr_serialize_sequence_char>
 801bf7c:	4770      	bx	lr
 801bf7e:	bf00      	nop

0801bf80 <_SetParametersResult__get_serialized_size>:
 801bf80:	b538      	push	{r3, r4, r5, lr}
 801bf82:	4604      	mov	r4, r0
 801bf84:	b160      	cbz	r0, 801bfa0 <_SetParametersResult__get_serialized_size+0x20>
 801bf86:	2101      	movs	r1, #1
 801bf88:	2000      	movs	r0, #0
 801bf8a:	f7f6 ff93 	bl	8012eb4 <ucdr_alignment>
 801bf8e:	1c45      	adds	r5, r0, #1
 801bf90:	2104      	movs	r1, #4
 801bf92:	4628      	mov	r0, r5
 801bf94:	f7f6 ff8e 	bl	8012eb4 <ucdr_alignment>
 801bf98:	68a3      	ldr	r3, [r4, #8]
 801bf9a:	3305      	adds	r3, #5
 801bf9c:	4418      	add	r0, r3
 801bf9e:	4428      	add	r0, r5
 801bfa0:	bd38      	pop	{r3, r4, r5, pc}
 801bfa2:	bf00      	nop

0801bfa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult>:
 801bfa4:	4800      	ldr	r0, [pc, #0]	@ (801bfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__SetParametersResult+0x4>)
 801bfa6:	4770      	bx	lr
 801bfa8:	2000188c 	.word	0x2000188c

0801bfac <rclc_action_send_result_request>:
 801bfac:	b1d0      	cbz	r0, 801bfe4 <rclc_action_send_result_request+0x38>
 801bfae:	b500      	push	{lr}
 801bfb0:	4684      	mov	ip, r0
 801bfb2:	b087      	sub	sp, #28
 801bfb4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801bfb8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801bfbc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801bfc0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801bfc4:	f10d 0e08 	add.w	lr, sp, #8
 801bfc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bfcc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801bfd0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801bfd4:	a902      	add	r1, sp, #8
 801bfd6:	3010      	adds	r0, #16
 801bfd8:	f7fc f8b6 	bl	8018148 <rcl_action_send_result_request>
 801bfdc:	b920      	cbnz	r0, 801bfe8 <rclc_action_send_result_request+0x3c>
 801bfde:	b007      	add	sp, #28
 801bfe0:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfe4:	200b      	movs	r0, #11
 801bfe6:	4770      	bx	lr
 801bfe8:	9001      	str	r0, [sp, #4]
 801bfea:	f7f2 fbc1 	bl	800e770 <rcutils_reset_error>
 801bfee:	9801      	ldr	r0, [sp, #4]
 801bff0:	b007      	add	sp, #28
 801bff2:	f85d fb04 	ldr.w	pc, [sp], #4
 801bff6:	bf00      	nop

0801bff8 <rclc_action_take_goal_handle>:
 801bff8:	b160      	cbz	r0, 801c014 <rclc_action_take_goal_handle+0x1c>
 801bffa:	6883      	ldr	r3, [r0, #8]
 801bffc:	b143      	cbz	r3, 801c010 <rclc_action_take_goal_handle+0x18>
 801bffe:	6819      	ldr	r1, [r3, #0]
 801c000:	6081      	str	r1, [r0, #8]
 801c002:	2200      	movs	r2, #0
 801c004:	721a      	strb	r2, [r3, #8]
 801c006:	68c1      	ldr	r1, [r0, #12]
 801c008:	6019      	str	r1, [r3, #0]
 801c00a:	621a      	str	r2, [r3, #32]
 801c00c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801c00e:	60c3      	str	r3, [r0, #12]
 801c010:	4618      	mov	r0, r3
 801c012:	4770      	bx	lr
 801c014:	4603      	mov	r3, r0
 801c016:	e7fb      	b.n	801c010 <rclc_action_take_goal_handle+0x18>

0801c018 <rclc_action_remove_used_goal_handle>:
 801c018:	b180      	cbz	r0, 801c03c <rclc_action_remove_used_goal_handle+0x24>
 801c01a:	b179      	cbz	r1, 801c03c <rclc_action_remove_used_goal_handle+0x24>
 801c01c:	68c3      	ldr	r3, [r0, #12]
 801c01e:	4299      	cmp	r1, r3
 801c020:	d00d      	beq.n	801c03e <rclc_action_remove_used_goal_handle+0x26>
 801c022:	b12b      	cbz	r3, 801c030 <rclc_action_remove_used_goal_handle+0x18>
 801c024:	681a      	ldr	r2, [r3, #0]
 801c026:	4291      	cmp	r1, r2
 801c028:	d003      	beq.n	801c032 <rclc_action_remove_used_goal_handle+0x1a>
 801c02a:	4613      	mov	r3, r2
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d1f9      	bne.n	801c024 <rclc_action_remove_used_goal_handle+0xc>
 801c030:	4770      	bx	lr
 801c032:	680a      	ldr	r2, [r1, #0]
 801c034:	601a      	str	r2, [r3, #0]
 801c036:	6883      	ldr	r3, [r0, #8]
 801c038:	600b      	str	r3, [r1, #0]
 801c03a:	6081      	str	r1, [r0, #8]
 801c03c:	4770      	bx	lr
 801c03e:	680b      	ldr	r3, [r1, #0]
 801c040:	60c3      	str	r3, [r0, #12]
 801c042:	e7f8      	b.n	801c036 <rclc_action_remove_used_goal_handle+0x1e>

0801c044 <rclc_action_find_goal_handle_by_uuid>:
 801c044:	b538      	push	{r3, r4, r5, lr}
 801c046:	b180      	cbz	r0, 801c06a <rclc_action_find_goal_handle_by_uuid+0x26>
 801c048:	460d      	mov	r5, r1
 801c04a:	b181      	cbz	r1, 801c06e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801c04c:	68c4      	ldr	r4, [r0, #12]
 801c04e:	b914      	cbnz	r4, 801c056 <rclc_action_find_goal_handle_by_uuid+0x12>
 801c050:	e009      	b.n	801c066 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c052:	6824      	ldr	r4, [r4, #0]
 801c054:	b13c      	cbz	r4, 801c066 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c056:	f104 0009 	add.w	r0, r4, #9
 801c05a:	2210      	movs	r2, #16
 801c05c:	4629      	mov	r1, r5
 801c05e:	f005 fc56 	bl	802190e <memcmp>
 801c062:	2800      	cmp	r0, #0
 801c064:	d1f5      	bne.n	801c052 <rclc_action_find_goal_handle_by_uuid+0xe>
 801c066:	4620      	mov	r0, r4
 801c068:	bd38      	pop	{r3, r4, r5, pc}
 801c06a:	4604      	mov	r4, r0
 801c06c:	e7fb      	b.n	801c066 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c06e:	460c      	mov	r4, r1
 801c070:	e7f9      	b.n	801c066 <rclc_action_find_goal_handle_by_uuid+0x22>
 801c072:	bf00      	nop

0801c074 <rclc_action_find_first_handle_by_status>:
 801c074:	b140      	cbz	r0, 801c088 <rclc_action_find_first_handle_by_status+0x14>
 801c076:	68c0      	ldr	r0, [r0, #12]
 801c078:	b910      	cbnz	r0, 801c080 <rclc_action_find_first_handle_by_status+0xc>
 801c07a:	e005      	b.n	801c088 <rclc_action_find_first_handle_by_status+0x14>
 801c07c:	6800      	ldr	r0, [r0, #0]
 801c07e:	b118      	cbz	r0, 801c088 <rclc_action_find_first_handle_by_status+0x14>
 801c080:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801c084:	428b      	cmp	r3, r1
 801c086:	d1f9      	bne.n	801c07c <rclc_action_find_first_handle_by_status+0x8>
 801c088:	4770      	bx	lr
 801c08a:	bf00      	nop

0801c08c <rclc_action_find_first_terminated_handle>:
 801c08c:	b140      	cbz	r0, 801c0a0 <rclc_action_find_first_terminated_handle+0x14>
 801c08e:	68c0      	ldr	r0, [r0, #12]
 801c090:	b910      	cbnz	r0, 801c098 <rclc_action_find_first_terminated_handle+0xc>
 801c092:	e005      	b.n	801c0a0 <rclc_action_find_first_terminated_handle+0x14>
 801c094:	6800      	ldr	r0, [r0, #0]
 801c096:	b118      	cbz	r0, 801c0a0 <rclc_action_find_first_terminated_handle+0x14>
 801c098:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801c09c:	2b03      	cmp	r3, #3
 801c09e:	ddf9      	ble.n	801c094 <rclc_action_find_first_terminated_handle+0x8>
 801c0a0:	4770      	bx	lr
 801c0a2:	bf00      	nop

0801c0a4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801c0a4:	b170      	cbz	r0, 801c0c4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801c0a6:	68c0      	ldr	r0, [r0, #12]
 801c0a8:	b160      	cbz	r0, 801c0c4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801c0aa:	b410      	push	{r4}
 801c0ac:	e001      	b.n	801c0b2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801c0ae:	6800      	ldr	r0, [r0, #0]
 801c0b0:	b128      	cbz	r0, 801c0be <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801c0b2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801c0b6:	4299      	cmp	r1, r3
 801c0b8:	bf08      	it	eq
 801c0ba:	4294      	cmpeq	r4, r2
 801c0bc:	d1f7      	bne.n	801c0ae <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801c0be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0c2:	4770      	bx	lr
 801c0c4:	4770      	bx	lr
 801c0c6:	bf00      	nop

0801c0c8 <rclc_action_find_handle_by_result_request_sequence_number>:
 801c0c8:	b170      	cbz	r0, 801c0e8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801c0ca:	68c0      	ldr	r0, [r0, #12]
 801c0cc:	b160      	cbz	r0, 801c0e8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801c0ce:	b410      	push	{r4}
 801c0d0:	e001      	b.n	801c0d6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801c0d2:	6800      	ldr	r0, [r0, #0]
 801c0d4:	b128      	cbz	r0, 801c0e2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801c0d6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801c0da:	4299      	cmp	r1, r3
 801c0dc:	bf08      	it	eq
 801c0de:	4294      	cmpeq	r4, r2
 801c0e0:	d1f7      	bne.n	801c0d2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801c0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0e6:	4770      	bx	lr
 801c0e8:	4770      	bx	lr
 801c0ea:	bf00      	nop

0801c0ec <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801c0ec:	b170      	cbz	r0, 801c10c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801c0ee:	68c0      	ldr	r0, [r0, #12]
 801c0f0:	b160      	cbz	r0, 801c10c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801c0f2:	b410      	push	{r4}
 801c0f4:	e001      	b.n	801c0fa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801c0f6:	6800      	ldr	r0, [r0, #0]
 801c0f8:	b128      	cbz	r0, 801c106 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801c0fa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801c0fe:	4299      	cmp	r1, r3
 801c100:	bf08      	it	eq
 801c102:	4294      	cmpeq	r4, r2
 801c104:	d1f7      	bne.n	801c0f6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801c106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c10a:	4770      	bx	lr
 801c10c:	4770      	bx	lr
 801c10e:	bf00      	nop

0801c110 <rclc_action_find_first_handle_with_goal_response>:
 801c110:	b140      	cbz	r0, 801c124 <rclc_action_find_first_handle_with_goal_response+0x14>
 801c112:	68c0      	ldr	r0, [r0, #12]
 801c114:	b910      	cbnz	r0, 801c11c <rclc_action_find_first_handle_with_goal_response+0xc>
 801c116:	e005      	b.n	801c124 <rclc_action_find_first_handle_with_goal_response+0x14>
 801c118:	6800      	ldr	r0, [r0, #0]
 801c11a:	b118      	cbz	r0, 801c124 <rclc_action_find_first_handle_with_goal_response+0x14>
 801c11c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d0f9      	beq.n	801c118 <rclc_action_find_first_handle_with_goal_response+0x8>
 801c124:	4770      	bx	lr
 801c126:	bf00      	nop

0801c128 <rclc_action_find_first_handle_with_result_response>:
 801c128:	b140      	cbz	r0, 801c13c <rclc_action_find_first_handle_with_result_response+0x14>
 801c12a:	68c0      	ldr	r0, [r0, #12]
 801c12c:	b910      	cbnz	r0, 801c134 <rclc_action_find_first_handle_with_result_response+0xc>
 801c12e:	e005      	b.n	801c13c <rclc_action_find_first_handle_with_result_response+0x14>
 801c130:	6800      	ldr	r0, [r0, #0]
 801c132:	b118      	cbz	r0, 801c13c <rclc_action_find_first_handle_with_result_response+0x14>
 801c134:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d0f9      	beq.n	801c130 <rclc_action_find_first_handle_with_result_response+0x8>
 801c13c:	4770      	bx	lr
 801c13e:	bf00      	nop

0801c140 <rclc_action_server_response_goal_request>:
 801c140:	b198      	cbz	r0, 801c16a <rclc_action_server_response_goal_request+0x2a>
 801c142:	b510      	push	{r4, lr}
 801c144:	6844      	ldr	r4, [r0, #4]
 801c146:	b086      	sub	sp, #24
 801c148:	2200      	movs	r2, #0
 801c14a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801c14e:	460b      	mov	r3, r1
 801c150:	9205      	str	r2, [sp, #20]
 801c152:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801c156:	aa03      	add	r2, sp, #12
 801c158:	f104 0010 	add.w	r0, r4, #16
 801c15c:	f88d 300c 	strb.w	r3, [sp, #12]
 801c160:	f7fc fa26 	bl	80185b0 <rcl_action_send_goal_response>
 801c164:	b918      	cbnz	r0, 801c16e <rclc_action_server_response_goal_request+0x2e>
 801c166:	b006      	add	sp, #24
 801c168:	bd10      	pop	{r4, pc}
 801c16a:	200b      	movs	r0, #11
 801c16c:	4770      	bx	lr
 801c16e:	9001      	str	r0, [sp, #4]
 801c170:	f7f2 fafe 	bl	800e770 <rcutils_reset_error>
 801c174:	9801      	ldr	r0, [sp, #4]
 801c176:	b006      	add	sp, #24
 801c178:	bd10      	pop	{r4, pc}
 801c17a:	bf00      	nop
 801c17c:	0000      	movs	r0, r0
	...

0801c180 <rclc_action_server_goal_cancel_accept>:
 801c180:	b310      	cbz	r0, 801c1c8 <rclc_action_server_goal_cancel_accept+0x48>
 801c182:	b510      	push	{r4, lr}
 801c184:	b090      	sub	sp, #64	@ 0x40
 801c186:	4604      	mov	r4, r0
 801c188:	a806      	add	r0, sp, #24
 801c18a:	f7fc fbd9 	bl	8018940 <rcl_action_get_zero_initialized_cancel_response>
 801c18e:	2300      	movs	r3, #0
 801c190:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801c194:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801c198:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801c19c:	f88d 3018 	strb.w	r3, [sp, #24]
 801c1a0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801c1a4:	f8cd d01c 	str.w	sp, [sp, #28]
 801c1a8:	46ec      	mov	ip, sp
 801c1aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1ae:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801c1d0 <rclc_action_server_goal_cancel_accept+0x50>
 801c1b2:	6860      	ldr	r0, [r4, #4]
 801c1b4:	aa06      	add	r2, sp, #24
 801c1b6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801c1ba:	3010      	adds	r0, #16
 801c1bc:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c1c0:	f7fc faae 	bl	8018720 <rcl_action_send_cancel_response>
 801c1c4:	b010      	add	sp, #64	@ 0x40
 801c1c6:	bd10      	pop	{r4, pc}
 801c1c8:	200b      	movs	r0, #11
 801c1ca:	4770      	bx	lr
 801c1cc:	f3af 8000 	nop.w
 801c1d0:	00000001 	.word	0x00000001
 801c1d4:	00000001 	.word	0x00000001

0801c1d8 <rclc_action_server_goal_cancel_reject>:
 801c1d8:	b082      	sub	sp, #8
 801c1da:	b530      	push	{r4, r5, lr}
 801c1dc:	b08b      	sub	sp, #44	@ 0x2c
 801c1de:	ac0e      	add	r4, sp, #56	@ 0x38
 801c1e0:	e884 000c 	stmia.w	r4, {r2, r3}
 801c1e4:	b188      	cbz	r0, 801c20a <rclc_action_server_goal_cancel_reject+0x32>
 801c1e6:	4604      	mov	r4, r0
 801c1e8:	a801      	add	r0, sp, #4
 801c1ea:	460d      	mov	r5, r1
 801c1ec:	f7fc fba8 	bl	8018940 <rcl_action_get_zero_initialized_cancel_response>
 801c1f0:	aa01      	add	r2, sp, #4
 801c1f2:	a90e      	add	r1, sp, #56	@ 0x38
 801c1f4:	f104 0010 	add.w	r0, r4, #16
 801c1f8:	f88d 5004 	strb.w	r5, [sp, #4]
 801c1fc:	f7fc fa90 	bl	8018720 <rcl_action_send_cancel_response>
 801c200:	b00b      	add	sp, #44	@ 0x2c
 801c202:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c206:	b002      	add	sp, #8
 801c208:	4770      	bx	lr
 801c20a:	200b      	movs	r0, #11
 801c20c:	b00b      	add	sp, #44	@ 0x2c
 801c20e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c212:	b002      	add	sp, #8
 801c214:	4770      	bx	lr
 801c216:	bf00      	nop

0801c218 <__atomic_load_8>:
 801c218:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801c21c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801c220:	4a15      	ldr	r2, [pc, #84]	@ (801c278 <__atomic_load_8+0x60>)
 801c222:	4b16      	ldr	r3, [pc, #88]	@ (801c27c <__atomic_load_8+0x64>)
 801c224:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801c228:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801c22c:	fb02 f101 	mul.w	r1, r2, r1
 801c230:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801c234:	fba3 2301 	umull	r2, r3, r3, r1
 801c238:	091b      	lsrs	r3, r3, #4
 801c23a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c23e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801c242:	b4d0      	push	{r4, r6, r7}
 801c244:	4c0e      	ldr	r4, [pc, #56]	@ (801c280 <__atomic_load_8+0x68>)
 801c246:	1ac9      	subs	r1, r1, r3
 801c248:	1862      	adds	r2, r4, r1
 801c24a:	f04f 0c01 	mov.w	ip, #1
 801c24e:	e8d2 3f4f 	ldrexb	r3, [r2]
 801c252:	e8c2 cf46 	strexb	r6, ip, [r2]
 801c256:	2e00      	cmp	r6, #0
 801c258:	d1f9      	bne.n	801c24e <__atomic_load_8+0x36>
 801c25a:	f3bf 8f5b 	dmb	ish
 801c25e:	b2db      	uxtb	r3, r3
 801c260:	2b00      	cmp	r3, #0
 801c262:	d1f4      	bne.n	801c24e <__atomic_load_8+0x36>
 801c264:	e9d0 6700 	ldrd	r6, r7, [r0]
 801c268:	f3bf 8f5b 	dmb	ish
 801c26c:	5463      	strb	r3, [r4, r1]
 801c26e:	4630      	mov	r0, r6
 801c270:	4639      	mov	r1, r7
 801c272:	bcd0      	pop	{r4, r6, r7}
 801c274:	4770      	bx	lr
 801c276:	bf00      	nop
 801c278:	27d4eb2d 	.word	0x27d4eb2d
 801c27c:	b21642c9 	.word	0xb21642c9
 801c280:	20016e30 	.word	0x20016e30

0801c284 <__atomic_store_8>:
 801c284:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801c288:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801c28c:	b570      	push	{r4, r5, r6, lr}
 801c28e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801c292:	4c14      	ldr	r4, [pc, #80]	@ (801c2e4 <__atomic_store_8+0x60>)
 801c294:	4d14      	ldr	r5, [pc, #80]	@ (801c2e8 <__atomic_store_8+0x64>)
 801c296:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801c29a:	fb04 f101 	mul.w	r1, r4, r1
 801c29e:	4c13      	ldr	r4, [pc, #76]	@ (801c2ec <__atomic_store_8+0x68>)
 801c2a0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801c2a4:	fba4 4e01 	umull	r4, lr, r4, r1
 801c2a8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801c2ac:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801c2b0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801c2b4:	eba1 0e0e 	sub.w	lr, r1, lr
 801c2b8:	eb05 0c0e 	add.w	ip, r5, lr
 801c2bc:	f04f 0401 	mov.w	r4, #1
 801c2c0:	e8dc 1f4f 	ldrexb	r1, [ip]
 801c2c4:	e8cc 4f46 	strexb	r6, r4, [ip]
 801c2c8:	2e00      	cmp	r6, #0
 801c2ca:	d1f9      	bne.n	801c2c0 <__atomic_store_8+0x3c>
 801c2cc:	f3bf 8f5b 	dmb	ish
 801c2d0:	b2c9      	uxtb	r1, r1
 801c2d2:	2900      	cmp	r1, #0
 801c2d4:	d1f4      	bne.n	801c2c0 <__atomic_store_8+0x3c>
 801c2d6:	e9c0 2300 	strd	r2, r3, [r0]
 801c2da:	f3bf 8f5b 	dmb	ish
 801c2de:	f805 100e 	strb.w	r1, [r5, lr]
 801c2e2:	bd70      	pop	{r4, r5, r6, pc}
 801c2e4:	27d4eb2d 	.word	0x27d4eb2d
 801c2e8:	20016e30 	.word	0x20016e30
 801c2ec:	b21642c9 	.word	0xb21642c9

0801c2f0 <__atomic_exchange_8>:
 801c2f0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801c2f4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801c2f8:	4916      	ldr	r1, [pc, #88]	@ (801c354 <__atomic_exchange_8+0x64>)
 801c2fa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801c2fe:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801c302:	fb01 fc0c 	mul.w	ip, r1, ip
 801c306:	4914      	ldr	r1, [pc, #80]	@ (801c358 <__atomic_exchange_8+0x68>)
 801c308:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801c30c:	b570      	push	{r4, r5, r6, lr}
 801c30e:	4605      	mov	r5, r0
 801c310:	fba1 010c 	umull	r0, r1, r1, ip
 801c314:	0909      	lsrs	r1, r1, #4
 801c316:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801c31a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801c31e:	4e0f      	ldr	r6, [pc, #60]	@ (801c35c <__atomic_exchange_8+0x6c>)
 801c320:	ebac 0c01 	sub.w	ip, ip, r1
 801c324:	eb06 010c 	add.w	r1, r6, ip
 801c328:	f04f 0e01 	mov.w	lr, #1
 801c32c:	e8d1 4f4f 	ldrexb	r4, [r1]
 801c330:	e8c1 ef40 	strexb	r0, lr, [r1]
 801c334:	2800      	cmp	r0, #0
 801c336:	d1f9      	bne.n	801c32c <__atomic_exchange_8+0x3c>
 801c338:	f3bf 8f5b 	dmb	ish
 801c33c:	b2e4      	uxtb	r4, r4
 801c33e:	2c00      	cmp	r4, #0
 801c340:	d1f4      	bne.n	801c32c <__atomic_exchange_8+0x3c>
 801c342:	e9d5 0100 	ldrd	r0, r1, [r5]
 801c346:	e9c5 2300 	strd	r2, r3, [r5]
 801c34a:	f3bf 8f5b 	dmb	ish
 801c34e:	f806 400c 	strb.w	r4, [r6, ip]
 801c352:	bd70      	pop	{r4, r5, r6, pc}
 801c354:	27d4eb2d 	.word	0x27d4eb2d
 801c358:	b21642c9 	.word	0xb21642c9
 801c35c:	20016e30 	.word	0x20016e30

0801c360 <rcutils_get_env>:
 801c360:	b168      	cbz	r0, 801c37e <rcutils_get_env+0x1e>
 801c362:	b510      	push	{r4, lr}
 801c364:	460c      	mov	r4, r1
 801c366:	b129      	cbz	r1, 801c374 <rcutils_get_env+0x14>
 801c368:	f004 fd8c 	bl	8020e84 <getenv>
 801c36c:	b120      	cbz	r0, 801c378 <rcutils_get_env+0x18>
 801c36e:	6020      	str	r0, [r4, #0]
 801c370:	2000      	movs	r0, #0
 801c372:	bd10      	pop	{r4, pc}
 801c374:	4803      	ldr	r0, [pc, #12]	@ (801c384 <rcutils_get_env+0x24>)
 801c376:	bd10      	pop	{r4, pc}
 801c378:	4b03      	ldr	r3, [pc, #12]	@ (801c388 <rcutils_get_env+0x28>)
 801c37a:	6023      	str	r3, [r4, #0]
 801c37c:	bd10      	pop	{r4, pc}
 801c37e:	4803      	ldr	r0, [pc, #12]	@ (801c38c <rcutils_get_env+0x2c>)
 801c380:	4770      	bx	lr
 801c382:	bf00      	nop
 801c384:	08025408 	.word	0x08025408
 801c388:	080234b8 	.word	0x080234b8
 801c38c:	080253ec 	.word	0x080253ec

0801c390 <rcutils_is_directory>:
 801c390:	2000      	movs	r0, #0
 801c392:	4770      	bx	lr

0801c394 <rcutils_join_path>:
 801c394:	b082      	sub	sp, #8
 801c396:	e88d 000c 	stmia.w	sp, {r2, r3}
 801c39a:	2000      	movs	r0, #0
 801c39c:	b002      	add	sp, #8
 801c39e:	4770      	bx	lr

0801c3a0 <rcutils_to_native_path>:
 801c3a0:	b084      	sub	sp, #16
 801c3a2:	a801      	add	r0, sp, #4
 801c3a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801c3a8:	b004      	add	sp, #16
 801c3aa:	2000      	movs	r0, #0
 801c3ac:	4770      	bx	lr
 801c3ae:	bf00      	nop

0801c3b0 <rcutils_format_string_limit>:
 801c3b0:	b40f      	push	{r0, r1, r2, r3}
 801c3b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3b4:	b083      	sub	sp, #12
 801c3b6:	ac08      	add	r4, sp, #32
 801c3b8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801c3ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801c3be:	b34e      	cbz	r6, 801c414 <rcutils_format_string_limit+0x64>
 801c3c0:	a808      	add	r0, sp, #32
 801c3c2:	f7f2 f9b1 	bl	800e728 <rcutils_allocator_is_valid>
 801c3c6:	b328      	cbz	r0, 801c414 <rcutils_format_string_limit+0x64>
 801c3c8:	2100      	movs	r1, #0
 801c3ca:	ab0f      	add	r3, sp, #60	@ 0x3c
 801c3cc:	4632      	mov	r2, r6
 801c3ce:	4608      	mov	r0, r1
 801c3d0:	e9cd 3300 	strd	r3, r3, [sp]
 801c3d4:	f000 f8f4 	bl	801c5c0 <rcutils_vsnprintf>
 801c3d8:	1c43      	adds	r3, r0, #1
 801c3da:	4605      	mov	r5, r0
 801c3dc:	d01a      	beq.n	801c414 <rcutils_format_string_limit+0x64>
 801c3de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c3e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c3e2:	1c47      	adds	r7, r0, #1
 801c3e4:	429f      	cmp	r7, r3
 801c3e6:	bf84      	itt	hi
 801c3e8:	461f      	movhi	r7, r3
 801c3ea:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801c3ee:	4638      	mov	r0, r7
 801c3f0:	9b08      	ldr	r3, [sp, #32]
 801c3f2:	4798      	blx	r3
 801c3f4:	4604      	mov	r4, r0
 801c3f6:	b168      	cbz	r0, 801c414 <rcutils_format_string_limit+0x64>
 801c3f8:	9b01      	ldr	r3, [sp, #4]
 801c3fa:	4632      	mov	r2, r6
 801c3fc:	4639      	mov	r1, r7
 801c3fe:	f000 f8df 	bl	801c5c0 <rcutils_vsnprintf>
 801c402:	2800      	cmp	r0, #0
 801c404:	db02      	blt.n	801c40c <rcutils_format_string_limit+0x5c>
 801c406:	2300      	movs	r3, #0
 801c408:	5563      	strb	r3, [r4, r5]
 801c40a:	e004      	b.n	801c416 <rcutils_format_string_limit+0x66>
 801c40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c40e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c410:	4620      	mov	r0, r4
 801c412:	4798      	blx	r3
 801c414:	2400      	movs	r4, #0
 801c416:	4620      	mov	r0, r4
 801c418:	b003      	add	sp, #12
 801c41a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c41e:	b004      	add	sp, #16
 801c420:	4770      	bx	lr
 801c422:	bf00      	nop

0801c424 <rcutils_repl_str>:
 801c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c428:	ed2d 8b02 	vpush	{d8}
 801c42c:	b087      	sub	sp, #28
 801c42e:	4680      	mov	r8, r0
 801c430:	4608      	mov	r0, r1
 801c432:	f8cd 8004 	str.w	r8, [sp, #4]
 801c436:	ee08 2a10 	vmov	s16, r2
 801c43a:	468a      	mov	sl, r1
 801c43c:	4699      	mov	r9, r3
 801c43e:	f7e3 fedf 	bl	8000200 <strlen>
 801c442:	2600      	movs	r6, #0
 801c444:	4647      	mov	r7, r8
 801c446:	9002      	str	r0, [sp, #8]
 801c448:	46b3      	mov	fp, r6
 801c44a:	2510      	movs	r5, #16
 801c44c:	46b0      	mov	r8, r6
 801c44e:	e01d      	b.n	801c48c <rcutils_repl_str+0x68>
 801c450:	f10b 0b01 	add.w	fp, fp, #1
 801c454:	455e      	cmp	r6, fp
 801c456:	d211      	bcs.n	801c47c <rcutils_repl_str+0x58>
 801c458:	442e      	add	r6, r5
 801c45a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801c45e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801c462:	00b1      	lsls	r1, r6, #2
 801c464:	4798      	blx	r3
 801c466:	2800      	cmp	r0, #0
 801c468:	f000 8088 	beq.w	801c57c <rcutils_repl_str+0x158>
 801c46c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c470:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801c474:	4680      	mov	r8, r0
 801c476:	bf28      	it	cs
 801c478:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801c47c:	9a01      	ldr	r2, [sp, #4]
 801c47e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801c482:	1aa2      	subs	r2, r4, r2
 801c484:	f843 2c04 	str.w	r2, [r3, #-4]
 801c488:	9b02      	ldr	r3, [sp, #8]
 801c48a:	18e7      	adds	r7, r4, r3
 801c48c:	4651      	mov	r1, sl
 801c48e:	4638      	mov	r0, r7
 801c490:	f005 fa27 	bl	80218e2 <strstr>
 801c494:	4604      	mov	r4, r0
 801c496:	4640      	mov	r0, r8
 801c498:	2c00      	cmp	r4, #0
 801c49a:	d1d9      	bne.n	801c450 <rcutils_repl_str+0x2c>
 801c49c:	46b8      	mov	r8, r7
 801c49e:	4607      	mov	r7, r0
 801c4a0:	4640      	mov	r0, r8
 801c4a2:	f7e3 fead 	bl	8000200 <strlen>
 801c4a6:	9b01      	ldr	r3, [sp, #4]
 801c4a8:	eba8 0303 	sub.w	r3, r8, r3
 801c4ac:	181c      	adds	r4, r3, r0
 801c4ae:	9404      	str	r4, [sp, #16]
 801c4b0:	f1bb 0f00 	cmp.w	fp, #0
 801c4b4:	d04a      	beq.n	801c54c <rcutils_repl_str+0x128>
 801c4b6:	ee18 0a10 	vmov	r0, s16
 801c4ba:	f7e3 fea1 	bl	8000200 <strlen>
 801c4be:	9b02      	ldr	r3, [sp, #8]
 801c4c0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801c4c4:	1ac3      	subs	r3, r0, r3
 801c4c6:	fb0b 4303 	mla	r3, fp, r3, r4
 801c4ca:	461a      	mov	r2, r3
 801c4cc:	9305      	str	r3, [sp, #20]
 801c4ce:	4606      	mov	r6, r0
 801c4d0:	f8d9 3000 	ldr.w	r3, [r9]
 801c4d4:	1c50      	adds	r0, r2, #1
 801c4d6:	4798      	blx	r3
 801c4d8:	9003      	str	r0, [sp, #12]
 801c4da:	2800      	cmp	r0, #0
 801c4dc:	d04f      	beq.n	801c57e <rcutils_repl_str+0x15a>
 801c4de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c4e2:	683a      	ldr	r2, [r7, #0]
 801c4e4:	4641      	mov	r1, r8
 801c4e6:	f005 faa4 	bl	8021a32 <memcpy>
 801c4ea:	683d      	ldr	r5, [r7, #0]
 801c4ec:	9b03      	ldr	r3, [sp, #12]
 801c4ee:	9701      	str	r7, [sp, #4]
 801c4f0:	46ba      	mov	sl, r7
 801c4f2:	441d      	add	r5, r3
 801c4f4:	9f02      	ldr	r7, [sp, #8]
 801c4f6:	f8cd 9008 	str.w	r9, [sp, #8]
 801c4fa:	2401      	movs	r4, #1
 801c4fc:	46d1      	mov	r9, sl
 801c4fe:	ee18 aa10 	vmov	sl, s16
 801c502:	e00a      	b.n	801c51a <rcutils_repl_str+0xf6>
 801c504:	f8d9 5000 	ldr.w	r5, [r9]
 801c508:	1aaa      	subs	r2, r5, r2
 801c50a:	1885      	adds	r5, r0, r2
 801c50c:	f005 fa91 	bl	8021a32 <memcpy>
 801c510:	45a3      	cmp	fp, r4
 801c512:	f104 0201 	add.w	r2, r4, #1
 801c516:	d935      	bls.n	801c584 <rcutils_repl_str+0x160>
 801c518:	4614      	mov	r4, r2
 801c51a:	4632      	mov	r2, r6
 801c51c:	4651      	mov	r1, sl
 801c51e:	4628      	mov	r0, r5
 801c520:	f005 fa87 	bl	8021a32 <memcpy>
 801c524:	f859 2b04 	ldr.w	r2, [r9], #4
 801c528:	45a3      	cmp	fp, r4
 801c52a:	443a      	add	r2, r7
 801c52c:	eb05 0006 	add.w	r0, r5, r6
 801c530:	eb08 0102 	add.w	r1, r8, r2
 801c534:	d1e6      	bne.n	801c504 <rcutils_repl_str+0xe0>
 801c536:	9b04      	ldr	r3, [sp, #16]
 801c538:	1a9a      	subs	r2, r3, r2
 801c53a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801c53e:	f005 fa78 	bl	8021a32 <memcpy>
 801c542:	9a03      	ldr	r2, [sp, #12]
 801c544:	9905      	ldr	r1, [sp, #20]
 801c546:	2300      	movs	r3, #0
 801c548:	5453      	strb	r3, [r2, r1]
 801c54a:	e00b      	b.n	801c564 <rcutils_repl_str+0x140>
 801c54c:	4620      	mov	r0, r4
 801c54e:	f8d9 3000 	ldr.w	r3, [r9]
 801c552:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801c556:	3001      	adds	r0, #1
 801c558:	4798      	blx	r3
 801c55a:	9003      	str	r0, [sp, #12]
 801c55c:	b110      	cbz	r0, 801c564 <rcutils_repl_str+0x140>
 801c55e:	9901      	ldr	r1, [sp, #4]
 801c560:	f005 fa75 	bl	8021a4e <strcpy>
 801c564:	4638      	mov	r0, r7
 801c566:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801c56a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801c56e:	4798      	blx	r3
 801c570:	9803      	ldr	r0, [sp, #12]
 801c572:	b007      	add	sp, #28
 801c574:	ecbd 8b02 	vpop	{d8}
 801c578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c57c:	4647      	mov	r7, r8
 801c57e:	2300      	movs	r3, #0
 801c580:	9303      	str	r3, [sp, #12]
 801c582:	e7ef      	b.n	801c564 <rcutils_repl_str+0x140>
 801c584:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801c588:	e7db      	b.n	801c542 <rcutils_repl_str+0x11e>
 801c58a:	bf00      	nop

0801c58c <rcutils_snprintf>:
 801c58c:	b40c      	push	{r2, r3}
 801c58e:	b530      	push	{r4, r5, lr}
 801c590:	b083      	sub	sp, #12
 801c592:	ab06      	add	r3, sp, #24
 801c594:	f853 2b04 	ldr.w	r2, [r3], #4
 801c598:	9301      	str	r3, [sp, #4]
 801c59a:	b152      	cbz	r2, 801c5b2 <rcutils_snprintf+0x26>
 801c59c:	b138      	cbz	r0, 801c5ae <rcutils_snprintf+0x22>
 801c59e:	b141      	cbz	r1, 801c5b2 <rcutils_snprintf+0x26>
 801c5a0:	f004 ffb2 	bl	8021508 <vsniprintf>
 801c5a4:	b003      	add	sp, #12
 801c5a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c5aa:	b002      	add	sp, #8
 801c5ac:	4770      	bx	lr
 801c5ae:	2900      	cmp	r1, #0
 801c5b0:	d0f6      	beq.n	801c5a0 <rcutils_snprintf+0x14>
 801c5b2:	f005 fa11 	bl	80219d8 <__errno>
 801c5b6:	2316      	movs	r3, #22
 801c5b8:	6003      	str	r3, [r0, #0]
 801c5ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c5be:	e7f1      	b.n	801c5a4 <rcutils_snprintf+0x18>

0801c5c0 <rcutils_vsnprintf>:
 801c5c0:	b570      	push	{r4, r5, r6, lr}
 801c5c2:	b13a      	cbz	r2, 801c5d4 <rcutils_vsnprintf+0x14>
 801c5c4:	b120      	cbz	r0, 801c5d0 <rcutils_vsnprintf+0x10>
 801c5c6:	b129      	cbz	r1, 801c5d4 <rcutils_vsnprintf+0x14>
 801c5c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c5cc:	f004 bf9c 	b.w	8021508 <vsniprintf>
 801c5d0:	2900      	cmp	r1, #0
 801c5d2:	d0f9      	beq.n	801c5c8 <rcutils_vsnprintf+0x8>
 801c5d4:	f005 fa00 	bl	80219d8 <__errno>
 801c5d8:	2316      	movs	r3, #22
 801c5da:	6003      	str	r3, [r0, #0]
 801c5dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c5e0:	bd70      	pop	{r4, r5, r6, pc}
 801c5e2:	bf00      	nop

0801c5e4 <rcutils_strdup>:
 801c5e4:	b084      	sub	sp, #16
 801c5e6:	b570      	push	{r4, r5, r6, lr}
 801c5e8:	b082      	sub	sp, #8
 801c5ea:	ac07      	add	r4, sp, #28
 801c5ec:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801c5f0:	4605      	mov	r5, r0
 801c5f2:	b1b0      	cbz	r0, 801c622 <rcutils_strdup+0x3e>
 801c5f4:	f7e3 fe04 	bl	8000200 <strlen>
 801c5f8:	1c42      	adds	r2, r0, #1
 801c5fa:	9b07      	ldr	r3, [sp, #28]
 801c5fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c5fe:	9201      	str	r2, [sp, #4]
 801c600:	4606      	mov	r6, r0
 801c602:	4610      	mov	r0, r2
 801c604:	4798      	blx	r3
 801c606:	4604      	mov	r4, r0
 801c608:	b128      	cbz	r0, 801c616 <rcutils_strdup+0x32>
 801c60a:	9a01      	ldr	r2, [sp, #4]
 801c60c:	4629      	mov	r1, r5
 801c60e:	f005 fa10 	bl	8021a32 <memcpy>
 801c612:	2300      	movs	r3, #0
 801c614:	55a3      	strb	r3, [r4, r6]
 801c616:	4620      	mov	r0, r4
 801c618:	b002      	add	sp, #8
 801c61a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c61e:	b004      	add	sp, #16
 801c620:	4770      	bx	lr
 801c622:	4604      	mov	r4, r0
 801c624:	e7f7      	b.n	801c616 <rcutils_strdup+0x32>
 801c626:	bf00      	nop

0801c628 <rcutils_strndup>:
 801c628:	b082      	sub	sp, #8
 801c62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c62c:	ac06      	add	r4, sp, #24
 801c62e:	e884 000c 	stmia.w	r4, {r2, r3}
 801c632:	4605      	mov	r5, r0
 801c634:	b188      	cbz	r0, 801c65a <rcutils_strndup+0x32>
 801c636:	1c4f      	adds	r7, r1, #1
 801c638:	460e      	mov	r6, r1
 801c63a:	4638      	mov	r0, r7
 801c63c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c63e:	4790      	blx	r2
 801c640:	4604      	mov	r4, r0
 801c642:	b128      	cbz	r0, 801c650 <rcutils_strndup+0x28>
 801c644:	463a      	mov	r2, r7
 801c646:	4629      	mov	r1, r5
 801c648:	f005 f9f3 	bl	8021a32 <memcpy>
 801c64c:	2300      	movs	r3, #0
 801c64e:	55a3      	strb	r3, [r4, r6]
 801c650:	4620      	mov	r0, r4
 801c652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c656:	b002      	add	sp, #8
 801c658:	4770      	bx	lr
 801c65a:	4604      	mov	r4, r0
 801c65c:	e7f8      	b.n	801c650 <rcutils_strndup+0x28>
 801c65e:	bf00      	nop

0801c660 <rcutils_get_zero_initialized_string_map>:
 801c660:	4b01      	ldr	r3, [pc, #4]	@ (801c668 <rcutils_get_zero_initialized_string_map+0x8>)
 801c662:	2000      	movs	r0, #0
 801c664:	6018      	str	r0, [r3, #0]
 801c666:	4770      	bx	lr
 801c668:	20016e48 	.word	0x20016e48

0801c66c <rcutils_string_map_reserve>:
 801c66c:	2800      	cmp	r0, #0
 801c66e:	d05f      	beq.n	801c730 <rcutils_string_map_reserve+0xc4>
 801c670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c674:	460c      	mov	r4, r1
 801c676:	6801      	ldr	r1, [r0, #0]
 801c678:	b082      	sub	sp, #8
 801c67a:	4605      	mov	r5, r0
 801c67c:	b129      	cbz	r1, 801c68a <rcutils_string_map_reserve+0x1e>
 801c67e:	68cb      	ldr	r3, [r1, #12]
 801c680:	42a3      	cmp	r3, r4
 801c682:	d906      	bls.n	801c692 <rcutils_string_map_reserve+0x26>
 801c684:	461c      	mov	r4, r3
 801c686:	2900      	cmp	r1, #0
 801c688:	d1f9      	bne.n	801c67e <rcutils_string_map_reserve+0x12>
 801c68a:	201f      	movs	r0, #31
 801c68c:	b002      	add	sp, #8
 801c68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c692:	688b      	ldr	r3, [r1, #8]
 801c694:	42a3      	cmp	r3, r4
 801c696:	d047      	beq.n	801c728 <rcutils_string_map_reserve+0xbc>
 801c698:	6a0e      	ldr	r6, [r1, #32]
 801c69a:	2c00      	cmp	r4, #0
 801c69c:	d034      	beq.n	801c708 <rcutils_string_map_reserve+0x9c>
 801c69e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801c6a2:	d243      	bcs.n	801c72c <rcutils_string_map_reserve+0xc0>
 801c6a4:	00a7      	lsls	r7, r4, #2
 801c6a6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801c6aa:	6808      	ldr	r0, [r1, #0]
 801c6ac:	4632      	mov	r2, r6
 801c6ae:	4639      	mov	r1, r7
 801c6b0:	47c0      	blx	r8
 801c6b2:	2800      	cmp	r0, #0
 801c6b4:	d03a      	beq.n	801c72c <rcutils_string_map_reserve+0xc0>
 801c6b6:	682b      	ldr	r3, [r5, #0]
 801c6b8:	4632      	mov	r2, r6
 801c6ba:	6018      	str	r0, [r3, #0]
 801c6bc:	4639      	mov	r1, r7
 801c6be:	6858      	ldr	r0, [r3, #4]
 801c6c0:	47c0      	blx	r8
 801c6c2:	2800      	cmp	r0, #0
 801c6c4:	d032      	beq.n	801c72c <rcutils_string_map_reserve+0xc0>
 801c6c6:	682d      	ldr	r5, [r5, #0]
 801c6c8:	68ab      	ldr	r3, [r5, #8]
 801c6ca:	6068      	str	r0, [r5, #4]
 801c6cc:	42a3      	cmp	r3, r4
 801c6ce:	d226      	bcs.n	801c71e <rcutils_string_map_reserve+0xb2>
 801c6d0:	682a      	ldr	r2, [r5, #0]
 801c6d2:	eb00 0c07 	add.w	ip, r0, r7
 801c6d6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801c6da:	45e6      	cmp	lr, ip
 801c6dc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 801c6e0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801c6e4:	d203      	bcs.n	801c6ee <rcutils_string_map_reserve+0x82>
 801c6e6:	eb02 0c07 	add.w	ip, r2, r7
 801c6ea:	4566      	cmp	r6, ip
 801c6ec:	d322      	bcc.n	801c734 <rcutils_string_map_reserve+0xc8>
 801c6ee:	1ae3      	subs	r3, r4, r3
 801c6f0:	009a      	lsls	r2, r3, #2
 801c6f2:	4670      	mov	r0, lr
 801c6f4:	2100      	movs	r1, #0
 801c6f6:	9201      	str	r2, [sp, #4]
 801c6f8:	f005 f933 	bl	8021962 <memset>
 801c6fc:	9a01      	ldr	r2, [sp, #4]
 801c6fe:	2100      	movs	r1, #0
 801c700:	4630      	mov	r0, r6
 801c702:	f005 f92e 	bl	8021962 <memset>
 801c706:	e00a      	b.n	801c71e <rcutils_string_map_reserve+0xb2>
 801c708:	694f      	ldr	r7, [r1, #20]
 801c70a:	6808      	ldr	r0, [r1, #0]
 801c70c:	4631      	mov	r1, r6
 801c70e:	47b8      	blx	r7
 801c710:	682b      	ldr	r3, [r5, #0]
 801c712:	4631      	mov	r1, r6
 801c714:	6858      	ldr	r0, [r3, #4]
 801c716:	601c      	str	r4, [r3, #0]
 801c718:	47b8      	blx	r7
 801c71a:	682d      	ldr	r5, [r5, #0]
 801c71c:	606c      	str	r4, [r5, #4]
 801c71e:	2000      	movs	r0, #0
 801c720:	60ac      	str	r4, [r5, #8]
 801c722:	b002      	add	sp, #8
 801c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c728:	2000      	movs	r0, #0
 801c72a:	e7af      	b.n	801c68c <rcutils_string_map_reserve+0x20>
 801c72c:	200a      	movs	r0, #10
 801c72e:	e7ad      	b.n	801c68c <rcutils_string_map_reserve+0x20>
 801c730:	200b      	movs	r0, #11
 801c732:	4770      	bx	lr
 801c734:	1f0b      	subs	r3, r1, #4
 801c736:	4418      	add	r0, r3
 801c738:	4413      	add	r3, r2
 801c73a:	3a04      	subs	r2, #4
 801c73c:	4417      	add	r7, r2
 801c73e:	2200      	movs	r2, #0
 801c740:	f843 2f04 	str.w	r2, [r3, #4]!
 801c744:	42bb      	cmp	r3, r7
 801c746:	f840 2f04 	str.w	r2, [r0, #4]!
 801c74a:	d1f9      	bne.n	801c740 <rcutils_string_map_reserve+0xd4>
 801c74c:	e7e7      	b.n	801c71e <rcutils_string_map_reserve+0xb2>
 801c74e:	bf00      	nop

0801c750 <rcutils_string_map_init>:
 801c750:	b082      	sub	sp, #8
 801c752:	b570      	push	{r4, r5, r6, lr}
 801c754:	ac04      	add	r4, sp, #16
 801c756:	e884 000c 	stmia.w	r4, {r2, r3}
 801c75a:	b380      	cbz	r0, 801c7be <rcutils_string_map_init+0x6e>
 801c75c:	6806      	ldr	r6, [r0, #0]
 801c75e:	4604      	mov	r4, r0
 801c760:	b12e      	cbz	r6, 801c76e <rcutils_string_map_init+0x1e>
 801c762:	251e      	movs	r5, #30
 801c764:	4628      	mov	r0, r5
 801c766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c76a:	b002      	add	sp, #8
 801c76c:	4770      	bx	lr
 801c76e:	a804      	add	r0, sp, #16
 801c770:	460d      	mov	r5, r1
 801c772:	f7f1 ffd9 	bl	800e728 <rcutils_allocator_is_valid>
 801c776:	b310      	cbz	r0, 801c7be <rcutils_string_map_init+0x6e>
 801c778:	9b04      	ldr	r3, [sp, #16]
 801c77a:	9908      	ldr	r1, [sp, #32]
 801c77c:	2024      	movs	r0, #36	@ 0x24
 801c77e:	4798      	blx	r3
 801c780:	6020      	str	r0, [r4, #0]
 801c782:	b310      	cbz	r0, 801c7ca <rcutils_string_map_init+0x7a>
 801c784:	f10d 0e10 	add.w	lr, sp, #16
 801c788:	e9c0 6600 	strd	r6, r6, [r0]
 801c78c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801c790:	f100 0c10 	add.w	ip, r0, #16
 801c794:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c798:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c79c:	f8de 3000 	ldr.w	r3, [lr]
 801c7a0:	f8cc 3000 	str.w	r3, [ip]
 801c7a4:	4629      	mov	r1, r5
 801c7a6:	4620      	mov	r0, r4
 801c7a8:	f7ff ff60 	bl	801c66c <rcutils_string_map_reserve>
 801c7ac:	4605      	mov	r5, r0
 801c7ae:	2800      	cmp	r0, #0
 801c7b0:	d0d8      	beq.n	801c764 <rcutils_string_map_init+0x14>
 801c7b2:	9b05      	ldr	r3, [sp, #20]
 801c7b4:	9908      	ldr	r1, [sp, #32]
 801c7b6:	6820      	ldr	r0, [r4, #0]
 801c7b8:	4798      	blx	r3
 801c7ba:	6026      	str	r6, [r4, #0]
 801c7bc:	e7d2      	b.n	801c764 <rcutils_string_map_init+0x14>
 801c7be:	250b      	movs	r5, #11
 801c7c0:	4628      	mov	r0, r5
 801c7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7c6:	b002      	add	sp, #8
 801c7c8:	4770      	bx	lr
 801c7ca:	250a      	movs	r5, #10
 801c7cc:	e7ca      	b.n	801c764 <rcutils_string_map_init+0x14>
 801c7ce:	bf00      	nop

0801c7d0 <rcutils_string_map_fini>:
 801c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7d4:	b082      	sub	sp, #8
 801c7d6:	2800      	cmp	r0, #0
 801c7d8:	d03a      	beq.n	801c850 <rcutils_string_map_fini+0x80>
 801c7da:	6804      	ldr	r4, [r0, #0]
 801c7dc:	4606      	mov	r6, r0
 801c7de:	2c00      	cmp	r4, #0
 801c7e0:	d032      	beq.n	801c848 <rcutils_string_map_fini+0x78>
 801c7e2:	68a3      	ldr	r3, [r4, #8]
 801c7e4:	b32b      	cbz	r3, 801c832 <rcutils_string_map_fini+0x62>
 801c7e6:	2500      	movs	r5, #0
 801c7e8:	6822      	ldr	r2, [r4, #0]
 801c7ea:	462f      	mov	r7, r5
 801c7ec:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801c7f0:	b1e0      	cbz	r0, 801c82c <rcutils_string_map_fini+0x5c>
 801c7f2:	6a21      	ldr	r1, [r4, #32]
 801c7f4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801c7f8:	9101      	str	r1, [sp, #4]
 801c7fa:	47c0      	blx	r8
 801c7fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c800:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801c804:	9901      	ldr	r1, [sp, #4]
 801c806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c80a:	47c0      	blx	r8
 801c80c:	68e3      	ldr	r3, [r4, #12]
 801c80e:	6862      	ldr	r2, [r4, #4]
 801c810:	3b01      	subs	r3, #1
 801c812:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801c816:	60e3      	str	r3, [r4, #12]
 801c818:	6834      	ldr	r4, [r6, #0]
 801c81a:	68a3      	ldr	r3, [r4, #8]
 801c81c:	3501      	adds	r5, #1
 801c81e:	429d      	cmp	r5, r3
 801c820:	d207      	bcs.n	801c832 <rcutils_string_map_fini+0x62>
 801c822:	6822      	ldr	r2, [r4, #0]
 801c824:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801c828:	2800      	cmp	r0, #0
 801c82a:	d1e2      	bne.n	801c7f2 <rcutils_string_map_fini+0x22>
 801c82c:	3501      	adds	r5, #1
 801c82e:	429d      	cmp	r5, r3
 801c830:	d3dc      	bcc.n	801c7ec <rcutils_string_map_fini+0x1c>
 801c832:	2100      	movs	r1, #0
 801c834:	4630      	mov	r0, r6
 801c836:	f7ff ff19 	bl	801c66c <rcutils_string_map_reserve>
 801c83a:	4604      	mov	r4, r0
 801c83c:	b920      	cbnz	r0, 801c848 <rcutils_string_map_fini+0x78>
 801c83e:	6830      	ldr	r0, [r6, #0]
 801c840:	6943      	ldr	r3, [r0, #20]
 801c842:	6a01      	ldr	r1, [r0, #32]
 801c844:	4798      	blx	r3
 801c846:	6034      	str	r4, [r6, #0]
 801c848:	4620      	mov	r0, r4
 801c84a:	b002      	add	sp, #8
 801c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c850:	240b      	movs	r4, #11
 801c852:	4620      	mov	r0, r4
 801c854:	b002      	add	sp, #8
 801c856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c85a:	bf00      	nop

0801c85c <rcutils_string_map_getn>:
 801c85c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c860:	b300      	cbz	r0, 801c8a4 <rcutils_string_map_getn+0x48>
 801c862:	6807      	ldr	r7, [r0, #0]
 801c864:	b1ff      	cbz	r7, 801c8a6 <rcutils_string_map_getn+0x4a>
 801c866:	4688      	mov	r8, r1
 801c868:	b1e1      	cbz	r1, 801c8a4 <rcutils_string_map_getn+0x48>
 801c86a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801c86e:	683e      	ldr	r6, [r7, #0]
 801c870:	f1ba 0f00 	cmp.w	sl, #0
 801c874:	d016      	beq.n	801c8a4 <rcutils_string_map_getn+0x48>
 801c876:	4691      	mov	r9, r2
 801c878:	3e04      	subs	r6, #4
 801c87a:	2400      	movs	r4, #0
 801c87c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801c880:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c884:	4628      	mov	r0, r5
 801c886:	3401      	adds	r4, #1
 801c888:	b155      	cbz	r5, 801c8a0 <rcutils_string_map_getn+0x44>
 801c88a:	f7e3 fcb9 	bl	8000200 <strlen>
 801c88e:	4548      	cmp	r0, r9
 801c890:	4602      	mov	r2, r0
 801c892:	4629      	mov	r1, r5
 801c894:	bf38      	it	cc
 801c896:	464a      	movcc	r2, r9
 801c898:	4640      	mov	r0, r8
 801c89a:	f005 f810 	bl	80218be <strncmp>
 801c89e:	b128      	cbz	r0, 801c8ac <rcutils_string_map_getn+0x50>
 801c8a0:	45a2      	cmp	sl, r4
 801c8a2:	d1eb      	bne.n	801c87c <rcutils_string_map_getn+0x20>
 801c8a4:	2700      	movs	r7, #0
 801c8a6:	4638      	mov	r0, r7
 801c8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	f853 700b 	ldr.w	r7, [r3, fp]
 801c8b2:	4638      	mov	r0, r7
 801c8b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8b8 <rmw_get_zero_initialized_context>:
 801c8b8:	b510      	push	{r4, lr}
 801c8ba:	4604      	mov	r4, r0
 801c8bc:	3010      	adds	r0, #16
 801c8be:	f000 f80b 	bl	801c8d8 <rmw_get_zero_initialized_init_options>
 801c8c2:	2300      	movs	r3, #0
 801c8c4:	2000      	movs	r0, #0
 801c8c6:	2100      	movs	r1, #0
 801c8c8:	e9c4 0100 	strd	r0, r1, [r4]
 801c8cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 801c8d0:	60a3      	str	r3, [r4, #8]
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	bd10      	pop	{r4, pc}
 801c8d6:	bf00      	nop

0801c8d8 <rmw_get_zero_initialized_init_options>:
 801c8d8:	b510      	push	{r4, lr}
 801c8da:	2238      	movs	r2, #56	@ 0x38
 801c8dc:	4604      	mov	r4, r0
 801c8de:	2100      	movs	r1, #0
 801c8e0:	f005 f83f 	bl	8021962 <memset>
 801c8e4:	f104 0010 	add.w	r0, r4, #16
 801c8e8:	f000 f806 	bl	801c8f8 <rmw_get_default_security_options>
 801c8ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c8f0:	60e3      	str	r3, [r4, #12]
 801c8f2:	4620      	mov	r0, r4
 801c8f4:	bd10      	pop	{r4, pc}
 801c8f6:	bf00      	nop

0801c8f8 <rmw_get_default_security_options>:
 801c8f8:	2200      	movs	r2, #0
 801c8fa:	7002      	strb	r2, [r0, #0]
 801c8fc:	6042      	str	r2, [r0, #4]
 801c8fe:	4770      	bx	lr

0801c900 <rmw_subscription_content_filter_options_fini>:
 801c900:	b1b0      	cbz	r0, 801c930 <rmw_subscription_content_filter_options_fini+0x30>
 801c902:	b538      	push	{r3, r4, r5, lr}
 801c904:	4604      	mov	r4, r0
 801c906:	4608      	mov	r0, r1
 801c908:	460d      	mov	r5, r1
 801c90a:	f7f1 ff0d 	bl	800e728 <rcutils_allocator_is_valid>
 801c90e:	b168      	cbz	r0, 801c92c <rmw_subscription_content_filter_options_fini+0x2c>
 801c910:	6820      	ldr	r0, [r4, #0]
 801c912:	b120      	cbz	r0, 801c91e <rmw_subscription_content_filter_options_fini+0x1e>
 801c914:	686b      	ldr	r3, [r5, #4]
 801c916:	6929      	ldr	r1, [r5, #16]
 801c918:	4798      	blx	r3
 801c91a:	2300      	movs	r3, #0
 801c91c:	6023      	str	r3, [r4, #0]
 801c91e:	1d20      	adds	r0, r4, #4
 801c920:	f003 fdba 	bl	8020498 <rcutils_string_array_fini>
 801c924:	3800      	subs	r0, #0
 801c926:	bf18      	it	ne
 801c928:	2001      	movne	r0, #1
 801c92a:	bd38      	pop	{r3, r4, r5, pc}
 801c92c:	200b      	movs	r0, #11
 801c92e:	bd38      	pop	{r3, r4, r5, pc}
 801c930:	200b      	movs	r0, #11
 801c932:	4770      	bx	lr

0801c934 <rmw_get_default_subscription_options>:
 801c934:	2200      	movs	r2, #0
 801c936:	e9c0 2200 	strd	r2, r2, [r0]
 801c93a:	6082      	str	r2, [r0, #8]
 801c93c:	4770      	bx	lr
 801c93e:	bf00      	nop

0801c940 <rmw_time_equal>:
 801c940:	b4f0      	push	{r4, r5, r6, r7}
 801c942:	b084      	sub	sp, #16
 801c944:	ac04      	add	r4, sp, #16
 801c946:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801c94a:	4603      	mov	r3, r0
 801c94c:	4924      	ldr	r1, [pc, #144]	@ (801c9e0 <rmw_time_equal+0xa0>)
 801c94e:	9e03      	ldr	r6, [sp, #12]
 801c950:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801c954:	2202      	movs	r2, #2
 801c956:	4299      	cmp	r1, r3
 801c958:	41aa      	sbcs	r2, r5
 801c95a:	d330      	bcc.n	801c9be <rmw_time_equal+0x7e>
 801c95c:	4c21      	ldr	r4, [pc, #132]	@ (801c9e4 <rmw_time_equal+0xa4>)
 801c95e:	fba3 3204 	umull	r3, r2, r3, r4
 801c962:	fb04 2205 	mla	r2, r4, r5, r2
 801c966:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c96a:	43dd      	mvns	r5, r3
 801c96c:	1a8c      	subs	r4, r1, r2
 801c96e:	4285      	cmp	r5, r0
 801c970:	41b4      	sbcs	r4, r6
 801c972:	d332      	bcc.n	801c9da <rmw_time_equal+0x9a>
 801c974:	eb10 0c03 	adds.w	ip, r0, r3
 801c978:	eb42 0106 	adc.w	r1, r2, r6
 801c97c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801c980:	4817      	ldr	r0, [pc, #92]	@ (801c9e0 <rmw_time_equal+0xa0>)
 801c982:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c984:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c986:	2202      	movs	r2, #2
 801c988:	4298      	cmp	r0, r3
 801c98a:	41b2      	sbcs	r2, r6
 801c98c:	d31c      	bcc.n	801c9c8 <rmw_time_equal+0x88>
 801c98e:	4c15      	ldr	r4, [pc, #84]	@ (801c9e4 <rmw_time_equal+0xa4>)
 801c990:	fba3 3204 	umull	r3, r2, r3, r4
 801c994:	fb04 2206 	mla	r2, r4, r6, r2
 801c998:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801c99c:	43de      	mvns	r6, r3
 801c99e:	1a84      	subs	r4, r0, r2
 801c9a0:	42ae      	cmp	r6, r5
 801c9a2:	41bc      	sbcs	r4, r7
 801c9a4:	d315      	bcc.n	801c9d2 <rmw_time_equal+0x92>
 801c9a6:	195b      	adds	r3, r3, r5
 801c9a8:	eb42 0207 	adc.w	r2, r2, r7
 801c9ac:	428a      	cmp	r2, r1
 801c9ae:	bf08      	it	eq
 801c9b0:	4563      	cmpeq	r3, ip
 801c9b2:	bf0c      	ite	eq
 801c9b4:	2001      	moveq	r0, #1
 801c9b6:	2000      	movne	r0, #0
 801c9b8:	b004      	add	sp, #16
 801c9ba:	bcf0      	pop	{r4, r5, r6, r7}
 801c9bc:	4770      	bx	lr
 801c9be:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801c9c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801c9c6:	e7d9      	b.n	801c97c <rmw_time_equal+0x3c>
 801c9c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c9cc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801c9d0:	e7ec      	b.n	801c9ac <rmw_time_equal+0x6c>
 801c9d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c9d6:	4602      	mov	r2, r0
 801c9d8:	e7e8      	b.n	801c9ac <rmw_time_equal+0x6c>
 801c9da:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801c9de:	e7cd      	b.n	801c97c <rmw_time_equal+0x3c>
 801c9e0:	25c17d04 	.word	0x25c17d04
 801c9e4:	3b9aca00 	.word	0x3b9aca00

0801c9e8 <rmw_time_total_nsec>:
 801c9e8:	b470      	push	{r4, r5, r6}
 801c9ea:	b085      	sub	sp, #20
 801c9ec:	ac04      	add	r4, sp, #16
 801c9ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	4912      	ldr	r1, [pc, #72]	@ (801ca40 <rmw_time_total_nsec+0x58>)
 801c9f6:	9e03      	ldr	r6, [sp, #12]
 801c9f8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801c9fc:	2202      	movs	r2, #2
 801c9fe:	4299      	cmp	r1, r3
 801ca00:	41aa      	sbcs	r2, r5
 801ca02:	d311      	bcc.n	801ca28 <rmw_time_total_nsec+0x40>
 801ca04:	4c0f      	ldr	r4, [pc, #60]	@ (801ca44 <rmw_time_total_nsec+0x5c>)
 801ca06:	fba3 3204 	umull	r3, r2, r3, r4
 801ca0a:	fb04 2205 	mla	r2, r4, r5, r2
 801ca0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ca12:	43dd      	mvns	r5, r3
 801ca14:	1a8c      	subs	r4, r1, r2
 801ca16:	4285      	cmp	r5, r0
 801ca18:	41b4      	sbcs	r4, r6
 801ca1a:	d30c      	bcc.n	801ca36 <rmw_time_total_nsec+0x4e>
 801ca1c:	1818      	adds	r0, r3, r0
 801ca1e:	eb42 0106 	adc.w	r1, r2, r6
 801ca22:	b005      	add	sp, #20
 801ca24:	bc70      	pop	{r4, r5, r6}
 801ca26:	4770      	bx	lr
 801ca28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ca30:	b005      	add	sp, #20
 801ca32:	bc70      	pop	{r4, r5, r6}
 801ca34:	4770      	bx	lr
 801ca36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ca3a:	b005      	add	sp, #20
 801ca3c:	bc70      	pop	{r4, r5, r6}
 801ca3e:	4770      	bx	lr
 801ca40:	25c17d04 	.word	0x25c17d04
 801ca44:	3b9aca00 	.word	0x3b9aca00

0801ca48 <rmw_get_zero_initialized_message_info>:
 801ca48:	b510      	push	{r4, lr}
 801ca4a:	2240      	movs	r2, #64	@ 0x40
 801ca4c:	4604      	mov	r4, r0
 801ca4e:	2100      	movs	r1, #0
 801ca50:	f004 ff87 	bl	8021962 <memset>
 801ca54:	4620      	mov	r0, r4
 801ca56:	bd10      	pop	{r4, pc}

0801ca58 <rmw_validate_full_topic_name>:
 801ca58:	2800      	cmp	r0, #0
 801ca5a:	d057      	beq.n	801cb0c <rmw_validate_full_topic_name+0xb4>
 801ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca60:	460d      	mov	r5, r1
 801ca62:	2900      	cmp	r1, #0
 801ca64:	d054      	beq.n	801cb10 <rmw_validate_full_topic_name+0xb8>
 801ca66:	4616      	mov	r6, r2
 801ca68:	4604      	mov	r4, r0
 801ca6a:	f7e3 fbc9 	bl	8000200 <strlen>
 801ca6e:	b148      	cbz	r0, 801ca84 <rmw_validate_full_topic_name+0x2c>
 801ca70:	7823      	ldrb	r3, [r4, #0]
 801ca72:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca74:	d00d      	beq.n	801ca92 <rmw_validate_full_topic_name+0x3a>
 801ca76:	2302      	movs	r3, #2
 801ca78:	602b      	str	r3, [r5, #0]
 801ca7a:	b13e      	cbz	r6, 801ca8c <rmw_validate_full_topic_name+0x34>
 801ca7c:	2000      	movs	r0, #0
 801ca7e:	6030      	str	r0, [r6, #0]
 801ca80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca84:	2301      	movs	r3, #1
 801ca86:	602b      	str	r3, [r5, #0]
 801ca88:	2e00      	cmp	r6, #0
 801ca8a:	d1f7      	bne.n	801ca7c <rmw_validate_full_topic_name+0x24>
 801ca8c:	2000      	movs	r0, #0
 801ca8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca92:	1e43      	subs	r3, r0, #1
 801ca94:	5ce2      	ldrb	r2, [r4, r3]
 801ca96:	2a2f      	cmp	r2, #47	@ 0x2f
 801ca98:	d03c      	beq.n	801cb14 <rmw_validate_full_topic_name+0xbc>
 801ca9a:	1e63      	subs	r3, r4, #1
 801ca9c:	eb03 0800 	add.w	r8, r3, r0
 801caa0:	f1c4 0e01 	rsb	lr, r4, #1
 801caa4:	eb0e 0703 	add.w	r7, lr, r3
 801caa8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801caac:	f021 0220 	bic.w	r2, r1, #32
 801cab0:	3a41      	subs	r2, #65	@ 0x41
 801cab2:	2a19      	cmp	r2, #25
 801cab4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 801cab8:	d90b      	bls.n	801cad2 <rmw_validate_full_topic_name+0x7a>
 801caba:	295f      	cmp	r1, #95	@ 0x5f
 801cabc:	d009      	beq.n	801cad2 <rmw_validate_full_topic_name+0x7a>
 801cabe:	f1bc 0f0a 	cmp.w	ip, #10
 801cac2:	d906      	bls.n	801cad2 <rmw_validate_full_topic_name+0x7a>
 801cac4:	2304      	movs	r3, #4
 801cac6:	602b      	str	r3, [r5, #0]
 801cac8:	2e00      	cmp	r6, #0
 801caca:	d0df      	beq.n	801ca8c <rmw_validate_full_topic_name+0x34>
 801cacc:	6037      	str	r7, [r6, #0]
 801cace:	2000      	movs	r0, #0
 801cad0:	e7d6      	b.n	801ca80 <rmw_validate_full_topic_name+0x28>
 801cad2:	4543      	cmp	r3, r8
 801cad4:	d1e6      	bne.n	801caa4 <rmw_validate_full_topic_name+0x4c>
 801cad6:	4f1a      	ldr	r7, [pc, #104]	@ (801cb40 <rmw_validate_full_topic_name+0xe8>)
 801cad8:	2301      	movs	r3, #1
 801cada:	e004      	b.n	801cae6 <rmw_validate_full_topic_name+0x8e>
 801cadc:	4298      	cmp	r0, r3
 801cade:	f104 0401 	add.w	r4, r4, #1
 801cae2:	d91c      	bls.n	801cb1e <rmw_validate_full_topic_name+0xc6>
 801cae4:	4613      	mov	r3, r2
 801cae6:	4298      	cmp	r0, r3
 801cae8:	f103 0201 	add.w	r2, r3, #1
 801caec:	d0f6      	beq.n	801cadc <rmw_validate_full_topic_name+0x84>
 801caee:	7821      	ldrb	r1, [r4, #0]
 801caf0:	292f      	cmp	r1, #47	@ 0x2f
 801caf2:	d1f3      	bne.n	801cadc <rmw_validate_full_topic_name+0x84>
 801caf4:	7861      	ldrb	r1, [r4, #1]
 801caf6:	292f      	cmp	r1, #47	@ 0x2f
 801caf8:	d01c      	beq.n	801cb34 <rmw_validate_full_topic_name+0xdc>
 801cafa:	5dc9      	ldrb	r1, [r1, r7]
 801cafc:	0749      	lsls	r1, r1, #29
 801cafe:	d5ed      	bpl.n	801cadc <rmw_validate_full_topic_name+0x84>
 801cb00:	2206      	movs	r2, #6
 801cb02:	602a      	str	r2, [r5, #0]
 801cb04:	2e00      	cmp	r6, #0
 801cb06:	d0c1      	beq.n	801ca8c <rmw_validate_full_topic_name+0x34>
 801cb08:	6033      	str	r3, [r6, #0]
 801cb0a:	e7bf      	b.n	801ca8c <rmw_validate_full_topic_name+0x34>
 801cb0c:	200b      	movs	r0, #11
 801cb0e:	4770      	bx	lr
 801cb10:	200b      	movs	r0, #11
 801cb12:	e7b5      	b.n	801ca80 <rmw_validate_full_topic_name+0x28>
 801cb14:	2203      	movs	r2, #3
 801cb16:	602a      	str	r2, [r5, #0]
 801cb18:	2e00      	cmp	r6, #0
 801cb1a:	d1f5      	bne.n	801cb08 <rmw_validate_full_topic_name+0xb0>
 801cb1c:	e7b6      	b.n	801ca8c <rmw_validate_full_topic_name+0x34>
 801cb1e:	28f7      	cmp	r0, #247	@ 0xf7
 801cb20:	d802      	bhi.n	801cb28 <rmw_validate_full_topic_name+0xd0>
 801cb22:	2000      	movs	r0, #0
 801cb24:	6028      	str	r0, [r5, #0]
 801cb26:	e7ab      	b.n	801ca80 <rmw_validate_full_topic_name+0x28>
 801cb28:	2307      	movs	r3, #7
 801cb2a:	602b      	str	r3, [r5, #0]
 801cb2c:	2e00      	cmp	r6, #0
 801cb2e:	d0ad      	beq.n	801ca8c <rmw_validate_full_topic_name+0x34>
 801cb30:	23f6      	movs	r3, #246	@ 0xf6
 801cb32:	e7e9      	b.n	801cb08 <rmw_validate_full_topic_name+0xb0>
 801cb34:	2205      	movs	r2, #5
 801cb36:	602a      	str	r2, [r5, #0]
 801cb38:	2e00      	cmp	r6, #0
 801cb3a:	d1e5      	bne.n	801cb08 <rmw_validate_full_topic_name+0xb0>
 801cb3c:	e7a6      	b.n	801ca8c <rmw_validate_full_topic_name+0x34>
 801cb3e:	bf00      	nop
 801cb40:	08025b18 	.word	0x08025b18

0801cb44 <rmw_validate_namespace_with_size>:
 801cb44:	b340      	cbz	r0, 801cb98 <rmw_validate_namespace_with_size+0x54>
 801cb46:	b570      	push	{r4, r5, r6, lr}
 801cb48:	4614      	mov	r4, r2
 801cb4a:	b0c2      	sub	sp, #264	@ 0x108
 801cb4c:	b332      	cbz	r2, 801cb9c <rmw_validate_namespace_with_size+0x58>
 801cb4e:	2901      	cmp	r1, #1
 801cb50:	460d      	mov	r5, r1
 801cb52:	461e      	mov	r6, r3
 801cb54:	d102      	bne.n	801cb5c <rmw_validate_namespace_with_size+0x18>
 801cb56:	7803      	ldrb	r3, [r0, #0]
 801cb58:	2b2f      	cmp	r3, #47	@ 0x2f
 801cb5a:	d012      	beq.n	801cb82 <rmw_validate_namespace_with_size+0x3e>
 801cb5c:	aa01      	add	r2, sp, #4
 801cb5e:	4669      	mov	r1, sp
 801cb60:	f7ff ff7a 	bl	801ca58 <rmw_validate_full_topic_name>
 801cb64:	b978      	cbnz	r0, 801cb86 <rmw_validate_namespace_with_size+0x42>
 801cb66:	9b00      	ldr	r3, [sp, #0]
 801cb68:	b14b      	cbz	r3, 801cb7e <rmw_validate_namespace_with_size+0x3a>
 801cb6a:	2b07      	cmp	r3, #7
 801cb6c:	d007      	beq.n	801cb7e <rmw_validate_namespace_with_size+0x3a>
 801cb6e:	1e5a      	subs	r2, r3, #1
 801cb70:	2a05      	cmp	r2, #5
 801cb72:	d82b      	bhi.n	801cbcc <rmw_validate_namespace_with_size+0x88>
 801cb74:	e8df f002 	tbb	[pc, r2]
 801cb78:	1e212427 	.word	0x1e212427
 801cb7c:	141b      	.short	0x141b
 801cb7e:	2df5      	cmp	r5, #245	@ 0xf5
 801cb80:	d803      	bhi.n	801cb8a <rmw_validate_namespace_with_size+0x46>
 801cb82:	2000      	movs	r0, #0
 801cb84:	6020      	str	r0, [r4, #0]
 801cb86:	b042      	add	sp, #264	@ 0x108
 801cb88:	bd70      	pop	{r4, r5, r6, pc}
 801cb8a:	2307      	movs	r3, #7
 801cb8c:	6023      	str	r3, [r4, #0]
 801cb8e:	2e00      	cmp	r6, #0
 801cb90:	d0f9      	beq.n	801cb86 <rmw_validate_namespace_with_size+0x42>
 801cb92:	23f4      	movs	r3, #244	@ 0xf4
 801cb94:	6033      	str	r3, [r6, #0]
 801cb96:	e7f6      	b.n	801cb86 <rmw_validate_namespace_with_size+0x42>
 801cb98:	200b      	movs	r0, #11
 801cb9a:	4770      	bx	lr
 801cb9c:	200b      	movs	r0, #11
 801cb9e:	e7f2      	b.n	801cb86 <rmw_validate_namespace_with_size+0x42>
 801cba0:	2306      	movs	r3, #6
 801cba2:	6023      	str	r3, [r4, #0]
 801cba4:	2e00      	cmp	r6, #0
 801cba6:	d0ee      	beq.n	801cb86 <rmw_validate_namespace_with_size+0x42>
 801cba8:	9b01      	ldr	r3, [sp, #4]
 801cbaa:	6033      	str	r3, [r6, #0]
 801cbac:	e7eb      	b.n	801cb86 <rmw_validate_namespace_with_size+0x42>
 801cbae:	2305      	movs	r3, #5
 801cbb0:	6023      	str	r3, [r4, #0]
 801cbb2:	e7f7      	b.n	801cba4 <rmw_validate_namespace_with_size+0x60>
 801cbb4:	2304      	movs	r3, #4
 801cbb6:	6023      	str	r3, [r4, #0]
 801cbb8:	e7f4      	b.n	801cba4 <rmw_validate_namespace_with_size+0x60>
 801cbba:	2303      	movs	r3, #3
 801cbbc:	6023      	str	r3, [r4, #0]
 801cbbe:	e7f1      	b.n	801cba4 <rmw_validate_namespace_with_size+0x60>
 801cbc0:	2302      	movs	r3, #2
 801cbc2:	6023      	str	r3, [r4, #0]
 801cbc4:	e7ee      	b.n	801cba4 <rmw_validate_namespace_with_size+0x60>
 801cbc6:	2301      	movs	r3, #1
 801cbc8:	6023      	str	r3, [r4, #0]
 801cbca:	e7eb      	b.n	801cba4 <rmw_validate_namespace_with_size+0x60>
 801cbcc:	4a03      	ldr	r2, [pc, #12]	@ (801cbdc <rmw_validate_namespace_with_size+0x98>)
 801cbce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801cbd2:	a802      	add	r0, sp, #8
 801cbd4:	f7ff fcda 	bl	801c58c <rcutils_snprintf>
 801cbd8:	2001      	movs	r0, #1
 801cbda:	e7d4      	b.n	801cb86 <rmw_validate_namespace_with_size+0x42>
 801cbdc:	08025424 	.word	0x08025424

0801cbe0 <rmw_validate_namespace>:
 801cbe0:	b168      	cbz	r0, 801cbfe <rmw_validate_namespace+0x1e>
 801cbe2:	b570      	push	{r4, r5, r6, lr}
 801cbe4:	460d      	mov	r5, r1
 801cbe6:	4616      	mov	r6, r2
 801cbe8:	4604      	mov	r4, r0
 801cbea:	f7e3 fb09 	bl	8000200 <strlen>
 801cbee:	4633      	mov	r3, r6
 801cbf0:	4601      	mov	r1, r0
 801cbf2:	462a      	mov	r2, r5
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cbfa:	f7ff bfa3 	b.w	801cb44 <rmw_validate_namespace_with_size>
 801cbfe:	200b      	movs	r0, #11
 801cc00:	4770      	bx	lr
 801cc02:	bf00      	nop

0801cc04 <rmw_namespace_validation_result_string>:
 801cc04:	2807      	cmp	r0, #7
 801cc06:	bf9a      	itte	ls
 801cc08:	4b02      	ldrls	r3, [pc, #8]	@ (801cc14 <rmw_namespace_validation_result_string+0x10>)
 801cc0a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801cc0e:	4802      	ldrhi	r0, [pc, #8]	@ (801cc18 <rmw_namespace_validation_result_string+0x14>)
 801cc10:	4770      	bx	lr
 801cc12:	bf00      	nop
 801cc14:	0802561c 	.word	0x0802561c
 801cc18:	08025474 	.word	0x08025474

0801cc1c <rmw_validate_node_name>:
 801cc1c:	2800      	cmp	r0, #0
 801cc1e:	d03b      	beq.n	801cc98 <rmw_validate_node_name+0x7c>
 801cc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc24:	460d      	mov	r5, r1
 801cc26:	2900      	cmp	r1, #0
 801cc28:	d038      	beq.n	801cc9c <rmw_validate_node_name+0x80>
 801cc2a:	4616      	mov	r6, r2
 801cc2c:	4604      	mov	r4, r0
 801cc2e:	f7e3 fae7 	bl	8000200 <strlen>
 801cc32:	b1e0      	cbz	r0, 801cc6e <rmw_validate_node_name+0x52>
 801cc34:	1e63      	subs	r3, r4, #1
 801cc36:	eb03 0800 	add.w	r8, r3, r0
 801cc3a:	f1c4 0101 	rsb	r1, r4, #1
 801cc3e:	18cf      	adds	r7, r1, r3
 801cc40:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801cc44:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801cc48:	f02e 0c20 	bic.w	ip, lr, #32
 801cc4c:	2a09      	cmp	r2, #9
 801cc4e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801cc52:	d914      	bls.n	801cc7e <rmw_validate_node_name+0x62>
 801cc54:	f1bc 0f19 	cmp.w	ip, #25
 801cc58:	d911      	bls.n	801cc7e <rmw_validate_node_name+0x62>
 801cc5a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801cc5e:	d00e      	beq.n	801cc7e <rmw_validate_node_name+0x62>
 801cc60:	2302      	movs	r3, #2
 801cc62:	602b      	str	r3, [r5, #0]
 801cc64:	b106      	cbz	r6, 801cc68 <rmw_validate_node_name+0x4c>
 801cc66:	6037      	str	r7, [r6, #0]
 801cc68:	2000      	movs	r0, #0
 801cc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc6e:	2301      	movs	r3, #1
 801cc70:	602b      	str	r3, [r5, #0]
 801cc72:	2e00      	cmp	r6, #0
 801cc74:	d0f8      	beq.n	801cc68 <rmw_validate_node_name+0x4c>
 801cc76:	2000      	movs	r0, #0
 801cc78:	6030      	str	r0, [r6, #0]
 801cc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc7e:	4543      	cmp	r3, r8
 801cc80:	d1dd      	bne.n	801cc3e <rmw_validate_node_name+0x22>
 801cc82:	7822      	ldrb	r2, [r4, #0]
 801cc84:	4b0d      	ldr	r3, [pc, #52]	@ (801ccbc <rmw_validate_node_name+0xa0>)
 801cc86:	5cd3      	ldrb	r3, [r2, r3]
 801cc88:	f013 0304 	ands.w	r3, r3, #4
 801cc8c:	d110      	bne.n	801ccb0 <rmw_validate_node_name+0x94>
 801cc8e:	28ff      	cmp	r0, #255	@ 0xff
 801cc90:	d806      	bhi.n	801cca0 <rmw_validate_node_name+0x84>
 801cc92:	602b      	str	r3, [r5, #0]
 801cc94:	4618      	mov	r0, r3
 801cc96:	e7e8      	b.n	801cc6a <rmw_validate_node_name+0x4e>
 801cc98:	200b      	movs	r0, #11
 801cc9a:	4770      	bx	lr
 801cc9c:	200b      	movs	r0, #11
 801cc9e:	e7e4      	b.n	801cc6a <rmw_validate_node_name+0x4e>
 801cca0:	2204      	movs	r2, #4
 801cca2:	602a      	str	r2, [r5, #0]
 801cca4:	2e00      	cmp	r6, #0
 801cca6:	d0df      	beq.n	801cc68 <rmw_validate_node_name+0x4c>
 801cca8:	22fe      	movs	r2, #254	@ 0xfe
 801ccaa:	6032      	str	r2, [r6, #0]
 801ccac:	4618      	mov	r0, r3
 801ccae:	e7dc      	b.n	801cc6a <rmw_validate_node_name+0x4e>
 801ccb0:	2303      	movs	r3, #3
 801ccb2:	602b      	str	r3, [r5, #0]
 801ccb4:	2e00      	cmp	r6, #0
 801ccb6:	d1de      	bne.n	801cc76 <rmw_validate_node_name+0x5a>
 801ccb8:	e7d6      	b.n	801cc68 <rmw_validate_node_name+0x4c>
 801ccba:	bf00      	nop
 801ccbc:	08025b18 	.word	0x08025b18

0801ccc0 <rmw_node_name_validation_result_string>:
 801ccc0:	2804      	cmp	r0, #4
 801ccc2:	bf9a      	itte	ls
 801ccc4:	4b02      	ldrls	r3, [pc, #8]	@ (801ccd0 <rmw_node_name_validation_result_string+0x10>)
 801ccc6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801ccca:	4802      	ldrhi	r0, [pc, #8]	@ (801ccd4 <rmw_node_name_validation_result_string+0x14>)
 801cccc:	4770      	bx	lr
 801ccce:	bf00      	nop
 801ccd0:	08025728 	.word	0x08025728
 801ccd4:	0802563c 	.word	0x0802563c

0801ccd8 <get_memory>:
 801ccd8:	4603      	mov	r3, r0
 801ccda:	6840      	ldr	r0, [r0, #4]
 801ccdc:	b158      	cbz	r0, 801ccf6 <get_memory+0x1e>
 801ccde:	6842      	ldr	r2, [r0, #4]
 801cce0:	605a      	str	r2, [r3, #4]
 801cce2:	b10a      	cbz	r2, 801cce8 <get_memory+0x10>
 801cce4:	2100      	movs	r1, #0
 801cce6:	6011      	str	r1, [r2, #0]
 801cce8:	681a      	ldr	r2, [r3, #0]
 801ccea:	6042      	str	r2, [r0, #4]
 801ccec:	b102      	cbz	r2, 801ccf0 <get_memory+0x18>
 801ccee:	6010      	str	r0, [r2, #0]
 801ccf0:	2200      	movs	r2, #0
 801ccf2:	6002      	str	r2, [r0, #0]
 801ccf4:	6018      	str	r0, [r3, #0]
 801ccf6:	4770      	bx	lr

0801ccf8 <put_memory>:
 801ccf8:	680b      	ldr	r3, [r1, #0]
 801ccfa:	b10b      	cbz	r3, 801cd00 <put_memory+0x8>
 801ccfc:	684a      	ldr	r2, [r1, #4]
 801ccfe:	605a      	str	r2, [r3, #4]
 801cd00:	684a      	ldr	r2, [r1, #4]
 801cd02:	b102      	cbz	r2, 801cd06 <put_memory+0xe>
 801cd04:	6013      	str	r3, [r2, #0]
 801cd06:	6803      	ldr	r3, [r0, #0]
 801cd08:	428b      	cmp	r3, r1
 801cd0a:	6843      	ldr	r3, [r0, #4]
 801cd0c:	bf08      	it	eq
 801cd0e:	6002      	streq	r2, [r0, #0]
 801cd10:	604b      	str	r3, [r1, #4]
 801cd12:	b103      	cbz	r3, 801cd16 <put_memory+0x1e>
 801cd14:	6019      	str	r1, [r3, #0]
 801cd16:	2300      	movs	r3, #0
 801cd18:	600b      	str	r3, [r1, #0]
 801cd1a:	6041      	str	r1, [r0, #4]
 801cd1c:	4770      	bx	lr
 801cd1e:	bf00      	nop

0801cd20 <rmw_destroy_client>:
 801cd20:	b570      	push	{r4, r5, r6, lr}
 801cd22:	b128      	cbz	r0, 801cd30 <rmw_destroy_client+0x10>
 801cd24:	4604      	mov	r4, r0
 801cd26:	6800      	ldr	r0, [r0, #0]
 801cd28:	460d      	mov	r5, r1
 801cd2a:	f7f2 fb3d 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801cd2e:	b910      	cbnz	r0, 801cd36 <rmw_destroy_client+0x16>
 801cd30:	2401      	movs	r4, #1
 801cd32:	4620      	mov	r0, r4
 801cd34:	bd70      	pop	{r4, r5, r6, pc}
 801cd36:	6863      	ldr	r3, [r4, #4]
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d0f9      	beq.n	801cd30 <rmw_destroy_client+0x10>
 801cd3c:	2d00      	cmp	r5, #0
 801cd3e:	d0f7      	beq.n	801cd30 <rmw_destroy_client+0x10>
 801cd40:	6828      	ldr	r0, [r5, #0]
 801cd42:	f7f2 fb31 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801cd46:	2800      	cmp	r0, #0
 801cd48:	d0f2      	beq.n	801cd30 <rmw_destroy_client+0x10>
 801cd4a:	686e      	ldr	r6, [r5, #4]
 801cd4c:	2e00      	cmp	r6, #0
 801cd4e:	d0ef      	beq.n	801cd30 <rmw_destroy_client+0x10>
 801cd50:	6864      	ldr	r4, [r4, #4]
 801cd52:	6932      	ldr	r2, [r6, #16]
 801cd54:	6920      	ldr	r0, [r4, #16]
 801cd56:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801cd5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cd5e:	6819      	ldr	r1, [r3, #0]
 801cd60:	f002 f92e 	bl	801efc0 <uxr_buffer_cancel_data>
 801cd64:	4602      	mov	r2, r0
 801cd66:	6920      	ldr	r0, [r4, #16]
 801cd68:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801cd6c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801cd70:	f7f2 fa00 	bl	800f174 <run_xrce_session>
 801cd74:	6920      	ldr	r0, [r4, #16]
 801cd76:	6932      	ldr	r2, [r6, #16]
 801cd78:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801cd7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cd80:	6819      	ldr	r1, [r3, #0]
 801cd82:	f7f6 f9df 	bl	8013144 <uxr_buffer_delete_entity>
 801cd86:	4602      	mov	r2, r0
 801cd88:	6920      	ldr	r0, [r4, #16]
 801cd8a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801cd8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801cd92:	f7f2 f9ef 	bl	800f174 <run_xrce_session>
 801cd96:	2800      	cmp	r0, #0
 801cd98:	4628      	mov	r0, r5
 801cd9a:	bf14      	ite	ne
 801cd9c:	2400      	movne	r4, #0
 801cd9e:	2402      	moveq	r4, #2
 801cda0:	f7f2 f8d0 	bl	800ef44 <rmw_uxrce_fini_client_memory>
 801cda4:	e7c5      	b.n	801cd32 <rmw_destroy_client+0x12>
 801cda6:	bf00      	nop

0801cda8 <rmw_get_implementation_identifier>:
 801cda8:	4b01      	ldr	r3, [pc, #4]	@ (801cdb0 <rmw_get_implementation_identifier+0x8>)
 801cdaa:	6818      	ldr	r0, [r3, #0]
 801cdac:	4770      	bx	lr
 801cdae:	bf00      	nop
 801cdb0:	08025754 	.word	0x08025754

0801cdb4 <rmw_init_options_init>:
 801cdb4:	b084      	sub	sp, #16
 801cdb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdb8:	b083      	sub	sp, #12
 801cdba:	ad09      	add	r5, sp, #36	@ 0x24
 801cdbc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801cdc0:	b130      	cbz	r0, 801cdd0 <rmw_init_options_init+0x1c>
 801cdc2:	4604      	mov	r4, r0
 801cdc4:	4628      	mov	r0, r5
 801cdc6:	f7f1 fcaf 	bl	800e728 <rcutils_allocator_is_valid>
 801cdca:	b108      	cbz	r0, 801cdd0 <rmw_init_options_init+0x1c>
 801cdcc:	68a6      	ldr	r6, [r4, #8]
 801cdce:	b12e      	cbz	r6, 801cddc <rmw_init_options_init+0x28>
 801cdd0:	200b      	movs	r0, #11
 801cdd2:	b003      	add	sp, #12
 801cdd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cdd8:	b004      	add	sp, #16
 801cdda:	4770      	bx	lr
 801cddc:	2200      	movs	r2, #0
 801cdde:	2300      	movs	r3, #0
 801cde0:	e9c4 2300 	strd	r2, r3, [r4]
 801cde4:	4b22      	ldr	r3, [pc, #136]	@ (801ce70 <rmw_init_options_init+0xbc>)
 801cde6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801ce80 <rmw_init_options_init+0xcc>
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	60a3      	str	r3, [r4, #8]
 801cdee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cdf0:	f104 0c20 	add.w	ip, r4, #32
 801cdf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cdf8:	466f      	mov	r7, sp
 801cdfa:	682b      	ldr	r3, [r5, #0]
 801cdfc:	f8cc 3000 	str.w	r3, [ip]
 801ce00:	4638      	mov	r0, r7
 801ce02:	f8c4 e01c 	str.w	lr, [r4, #28]
 801ce06:	60e6      	str	r6, [r4, #12]
 801ce08:	f7ff fd76 	bl	801c8f8 <rmw_get_default_security_options>
 801ce0c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ce10:	f104 0310 	add.w	r3, r4, #16
 801ce14:	e883 0003 	stmia.w	r3, {r0, r1}
 801ce18:	2203      	movs	r2, #3
 801ce1a:	4816      	ldr	r0, [pc, #88]	@ (801ce74 <rmw_init_options_init+0xc0>)
 801ce1c:	4916      	ldr	r1, [pc, #88]	@ (801ce78 <rmw_init_options_init+0xc4>)
 801ce1e:	7626      	strb	r6, [r4, #24]
 801ce20:	f7f1 ffd0 	bl	800edc4 <rmw_uxrce_init_init_options_impl_memory>
 801ce24:	4813      	ldr	r0, [pc, #76]	@ (801ce74 <rmw_init_options_init+0xc0>)
 801ce26:	f7ff ff57 	bl	801ccd8 <get_memory>
 801ce2a:	b1f0      	cbz	r0, 801ce6a <rmw_init_options_init+0xb6>
 801ce2c:	4a13      	ldr	r2, [pc, #76]	@ (801ce7c <rmw_init_options_init+0xc8>)
 801ce2e:	6883      	ldr	r3, [r0, #8]
 801ce30:	6851      	ldr	r1, [r2, #4]
 801ce32:	7810      	ldrb	r0, [r2, #0]
 801ce34:	6363      	str	r3, [r4, #52]	@ 0x34
 801ce36:	7418      	strb	r0, [r3, #16]
 801ce38:	6159      	str	r1, [r3, #20]
 801ce3a:	68d1      	ldr	r1, [r2, #12]
 801ce3c:	61d9      	str	r1, [r3, #28]
 801ce3e:	6911      	ldr	r1, [r2, #16]
 801ce40:	6219      	str	r1, [r3, #32]
 801ce42:	6951      	ldr	r1, [r2, #20]
 801ce44:	6892      	ldr	r2, [r2, #8]
 801ce46:	619a      	str	r2, [r3, #24]
 801ce48:	6259      	str	r1, [r3, #36]	@ 0x24
 801ce4a:	f7f7 fe11 	bl	8014a70 <uxr_nanos>
 801ce4e:	f004 f953 	bl	80210f8 <srand>
 801ce52:	f004 f97f 	bl	8021154 <rand>
 801ce56:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ce58:	6298      	str	r0, [r3, #40]	@ 0x28
 801ce5a:	2800      	cmp	r0, #0
 801ce5c:	d0f9      	beq.n	801ce52 <rmw_init_options_init+0x9e>
 801ce5e:	2000      	movs	r0, #0
 801ce60:	b003      	add	sp, #12
 801ce62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ce66:	b004      	add	sp, #16
 801ce68:	4770      	bx	lr
 801ce6a:	2001      	movs	r0, #1
 801ce6c:	e7b1      	b.n	801cdd2 <rmw_init_options_init+0x1e>
 801ce6e:	bf00      	nop
 801ce70:	08025754 	.word	0x08025754
 801ce74:	20016cc4 	.word	0x20016cc4
 801ce78:	200120b0 	.word	0x200120b0
 801ce7c:	20011f3c 	.word	0x20011f3c
 801ce80:	08023bb4 	.word	0x08023bb4

0801ce84 <rmw_init_options_copy>:
 801ce84:	b570      	push	{r4, r5, r6, lr}
 801ce86:	b158      	cbz	r0, 801cea0 <rmw_init_options_copy+0x1c>
 801ce88:	460d      	mov	r5, r1
 801ce8a:	b149      	cbz	r1, 801cea0 <rmw_init_options_copy+0x1c>
 801ce8c:	4604      	mov	r4, r0
 801ce8e:	6880      	ldr	r0, [r0, #8]
 801ce90:	b120      	cbz	r0, 801ce9c <rmw_init_options_copy+0x18>
 801ce92:	4b1e      	ldr	r3, [pc, #120]	@ (801cf0c <rmw_init_options_copy+0x88>)
 801ce94:	6819      	ldr	r1, [r3, #0]
 801ce96:	f7e3 f9bb 	bl	8000210 <strcmp>
 801ce9a:	bb90      	cbnz	r0, 801cf02 <rmw_init_options_copy+0x7e>
 801ce9c:	68ab      	ldr	r3, [r5, #8]
 801ce9e:	b113      	cbz	r3, 801cea6 <rmw_init_options_copy+0x22>
 801cea0:	250b      	movs	r5, #11
 801cea2:	4628      	mov	r0, r5
 801cea4:	bd70      	pop	{r4, r5, r6, pc}
 801cea6:	4623      	mov	r3, r4
 801cea8:	462a      	mov	r2, r5
 801ceaa:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801ceae:	f8d3 c000 	ldr.w	ip, [r3]
 801ceb2:	6858      	ldr	r0, [r3, #4]
 801ceb4:	6899      	ldr	r1, [r3, #8]
 801ceb6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801ceba:	f8c2 e00c 	str.w	lr, [r2, #12]
 801cebe:	3310      	adds	r3, #16
 801cec0:	42b3      	cmp	r3, r6
 801cec2:	f8c2 c000 	str.w	ip, [r2]
 801cec6:	6050      	str	r0, [r2, #4]
 801cec8:	6091      	str	r1, [r2, #8]
 801ceca:	f102 0210 	add.w	r2, r2, #16
 801cece:	d1ee      	bne.n	801ceae <rmw_init_options_copy+0x2a>
 801ced0:	6819      	ldr	r1, [r3, #0]
 801ced2:	685b      	ldr	r3, [r3, #4]
 801ced4:	480e      	ldr	r0, [pc, #56]	@ (801cf10 <rmw_init_options_copy+0x8c>)
 801ced6:	6053      	str	r3, [r2, #4]
 801ced8:	6011      	str	r1, [r2, #0]
 801ceda:	f7ff fefd 	bl	801ccd8 <get_memory>
 801cede:	b198      	cbz	r0, 801cf08 <rmw_init_options_copy+0x84>
 801cee0:	6883      	ldr	r3, [r0, #8]
 801cee2:	636b      	str	r3, [r5, #52]	@ 0x34
 801cee4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cee6:	f102 0c10 	add.w	ip, r2, #16
 801ceea:	f103 0410 	add.w	r4, r3, #16
 801ceee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cef4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801cef8:	2500      	movs	r5, #0
 801cefa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801cefe:	4628      	mov	r0, r5
 801cf00:	bd70      	pop	{r4, r5, r6, pc}
 801cf02:	250c      	movs	r5, #12
 801cf04:	4628      	mov	r0, r5
 801cf06:	bd70      	pop	{r4, r5, r6, pc}
 801cf08:	2501      	movs	r5, #1
 801cf0a:	e7ca      	b.n	801cea2 <rmw_init_options_copy+0x1e>
 801cf0c:	08025754 	.word	0x08025754
 801cf10:	20016cc4 	.word	0x20016cc4

0801cf14 <rmw_init_options_fini>:
 801cf14:	2800      	cmp	r0, #0
 801cf16:	d03d      	beq.n	801cf94 <rmw_init_options_fini+0x80>
 801cf18:	b510      	push	{r4, lr}
 801cf1a:	4604      	mov	r4, r0
 801cf1c:	b08e      	sub	sp, #56	@ 0x38
 801cf1e:	3020      	adds	r0, #32
 801cf20:	f7f1 fc02 	bl	800e728 <rcutils_allocator_is_valid>
 801cf24:	b360      	cbz	r0, 801cf80 <rmw_init_options_fini+0x6c>
 801cf26:	68a0      	ldr	r0, [r4, #8]
 801cf28:	b120      	cbz	r0, 801cf34 <rmw_init_options_fini+0x20>
 801cf2a:	4b1c      	ldr	r3, [pc, #112]	@ (801cf9c <rmw_init_options_fini+0x88>)
 801cf2c:	6819      	ldr	r1, [r3, #0]
 801cf2e:	f7e3 f96f 	bl	8000210 <strcmp>
 801cf32:	bb68      	cbnz	r0, 801cf90 <rmw_init_options_fini+0x7c>
 801cf34:	4b1a      	ldr	r3, [pc, #104]	@ (801cfa0 <rmw_init_options_fini+0x8c>)
 801cf36:	6819      	ldr	r1, [r3, #0]
 801cf38:	b331      	cbz	r1, 801cf88 <rmw_init_options_fini+0x74>
 801cf3a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cf3c:	e001      	b.n	801cf42 <rmw_init_options_fini+0x2e>
 801cf3e:	6849      	ldr	r1, [r1, #4]
 801cf40:	b311      	cbz	r1, 801cf88 <rmw_init_options_fini+0x74>
 801cf42:	688b      	ldr	r3, [r1, #8]
 801cf44:	429a      	cmp	r2, r3
 801cf46:	d1fa      	bne.n	801cf3e <rmw_init_options_fini+0x2a>
 801cf48:	4815      	ldr	r0, [pc, #84]	@ (801cfa0 <rmw_init_options_fini+0x8c>)
 801cf4a:	f7ff fed5 	bl	801ccf8 <put_memory>
 801cf4e:	4668      	mov	r0, sp
 801cf50:	f7ff fcc2 	bl	801c8d8 <rmw_get_zero_initialized_init_options>
 801cf54:	46ee      	mov	lr, sp
 801cf56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cf5a:	46a4      	mov	ip, r4
 801cf5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cf60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cf64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cf68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cf6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cf70:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801cf74:	e88c 0003 	stmia.w	ip, {r0, r1}
 801cf78:	2300      	movs	r3, #0
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	b00e      	add	sp, #56	@ 0x38
 801cf7e:	bd10      	pop	{r4, pc}
 801cf80:	230b      	movs	r3, #11
 801cf82:	4618      	mov	r0, r3
 801cf84:	b00e      	add	sp, #56	@ 0x38
 801cf86:	bd10      	pop	{r4, pc}
 801cf88:	2301      	movs	r3, #1
 801cf8a:	4618      	mov	r0, r3
 801cf8c:	b00e      	add	sp, #56	@ 0x38
 801cf8e:	bd10      	pop	{r4, pc}
 801cf90:	230c      	movs	r3, #12
 801cf92:	e7f2      	b.n	801cf7a <rmw_init_options_fini+0x66>
 801cf94:	230b      	movs	r3, #11
 801cf96:	4618      	mov	r0, r3
 801cf98:	4770      	bx	lr
 801cf9a:	bf00      	nop
 801cf9c:	08025754 	.word	0x08025754
 801cfa0:	20016cc4 	.word	0x20016cc4

0801cfa4 <rmw_init>:
 801cfa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cfa8:	b083      	sub	sp, #12
 801cfaa:	2800      	cmp	r0, #0
 801cfac:	f000 80d3 	beq.w	801d156 <rmw_init+0x1b2>
 801cfb0:	460e      	mov	r6, r1
 801cfb2:	2900      	cmp	r1, #0
 801cfb4:	f000 80cf 	beq.w	801d156 <rmw_init+0x1b2>
 801cfb8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801cfba:	4605      	mov	r5, r0
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	f000 80ca 	beq.w	801d156 <rmw_init+0x1b2>
 801cfc2:	4b78      	ldr	r3, [pc, #480]	@ (801d1a4 <rmw_init+0x200>)
 801cfc4:	6880      	ldr	r0, [r0, #8]
 801cfc6:	681f      	ldr	r7, [r3, #0]
 801cfc8:	b128      	cbz	r0, 801cfd6 <rmw_init+0x32>
 801cfca:	4639      	mov	r1, r7
 801cfcc:	f7e3 f920 	bl	8000210 <strcmp>
 801cfd0:	2800      	cmp	r0, #0
 801cfd2:	f040 80ca 	bne.w	801d16a <rmw_init+0x1c6>
 801cfd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801cfda:	4c73      	ldr	r4, [pc, #460]	@ (801d1a8 <rmw_init+0x204>)
 801cfdc:	4973      	ldr	r1, [pc, #460]	@ (801d1ac <rmw_init+0x208>)
 801cfde:	4874      	ldr	r0, [pc, #464]	@ (801d1b0 <rmw_init+0x20c>)
 801cfe0:	60b7      	str	r7, [r6, #8]
 801cfe2:	e9c6 2300 	strd	r2, r3, [r6]
 801cfe6:	68eb      	ldr	r3, [r5, #12]
 801cfe8:	64b3      	str	r3, [r6, #72]	@ 0x48
 801cfea:	2201      	movs	r2, #1
 801cfec:	f7f1 fe8a 	bl	800ed04 <rmw_uxrce_init_session_memory>
 801cff0:	4620      	mov	r0, r4
 801cff2:	4970      	ldr	r1, [pc, #448]	@ (801d1b4 <rmw_init+0x210>)
 801cff4:	2204      	movs	r2, #4
 801cff6:	f7f1 fec5 	bl	800ed84 <rmw_uxrce_init_static_input_buffer_memory>
 801cffa:	f04f 0800 	mov.w	r8, #0
 801cffe:	486c      	ldr	r0, [pc, #432]	@ (801d1b0 <rmw_init+0x20c>)
 801d000:	f884 800d 	strb.w	r8, [r4, #13]
 801d004:	f7ff fe68 	bl	801ccd8 <get_memory>
 801d008:	2800      	cmp	r0, #0
 801d00a:	f000 80a9 	beq.w	801d160 <rmw_init+0x1bc>
 801d00e:	6884      	ldr	r4, [r0, #8]
 801d010:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801d012:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801d014:	f890 c010 	ldrb.w	ip, [r0, #16]
 801d018:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801d01c:	9101      	str	r1, [sp, #4]
 801d01e:	6a00      	ldr	r0, [r0, #32]
 801d020:	9000      	str	r0, [sp, #0]
 801d022:	f104 0910 	add.w	r9, r4, #16
 801d026:	4661      	mov	r1, ip
 801d028:	4648      	mov	r0, r9
 801d02a:	f001 fa01 	bl	801e430 <uxr_set_custom_transport_callbacks>
 801d02e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801d032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d036:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801d03a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801d03e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801d042:	495d      	ldr	r1, [pc, #372]	@ (801d1b8 <rmw_init+0x214>)
 801d044:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801d048:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801d04c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801d050:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801d054:	4859      	ldr	r0, [pc, #356]	@ (801d1bc <rmw_init+0x218>)
 801d056:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801d05a:	2201      	movs	r2, #1
 801d05c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801d05e:	f7f1 fe31 	bl	800ecc4 <rmw_uxrce_init_node_memory>
 801d062:	4957      	ldr	r1, [pc, #348]	@ (801d1c0 <rmw_init+0x21c>)
 801d064:	4857      	ldr	r0, [pc, #348]	@ (801d1c4 <rmw_init+0x220>)
 801d066:	2205      	movs	r2, #5
 801d068:	f7f1 fe0c 	bl	800ec84 <rmw_uxrce_init_subscription_memory>
 801d06c:	4956      	ldr	r1, [pc, #344]	@ (801d1c8 <rmw_init+0x224>)
 801d06e:	4857      	ldr	r0, [pc, #348]	@ (801d1cc <rmw_init+0x228>)
 801d070:	220a      	movs	r2, #10
 801d072:	f7f1 fde7 	bl	800ec44 <rmw_uxrce_init_publisher_memory>
 801d076:	4956      	ldr	r1, [pc, #344]	@ (801d1d0 <rmw_init+0x22c>)
 801d078:	4856      	ldr	r0, [pc, #344]	@ (801d1d4 <rmw_init+0x230>)
 801d07a:	2207      	movs	r2, #7
 801d07c:	f7f1 fda2 	bl	800ebc4 <rmw_uxrce_init_service_memory>
 801d080:	4955      	ldr	r1, [pc, #340]	@ (801d1d8 <rmw_init+0x234>)
 801d082:	4856      	ldr	r0, [pc, #344]	@ (801d1dc <rmw_init+0x238>)
 801d084:	2201      	movs	r2, #1
 801d086:	f7f1 fdbd 	bl	800ec04 <rmw_uxrce_init_client_memory>
 801d08a:	4955      	ldr	r1, [pc, #340]	@ (801d1e0 <rmw_init+0x23c>)
 801d08c:	4855      	ldr	r0, [pc, #340]	@ (801d1e4 <rmw_init+0x240>)
 801d08e:	220f      	movs	r2, #15
 801d090:	f7f1 fe58 	bl	800ed44 <rmw_uxrce_init_topic_memory>
 801d094:	4954      	ldr	r1, [pc, #336]	@ (801d1e8 <rmw_init+0x244>)
 801d096:	4855      	ldr	r0, [pc, #340]	@ (801d1ec <rmw_init+0x248>)
 801d098:	2203      	movs	r2, #3
 801d09a:	f7f1 fe93 	bl	800edc4 <rmw_uxrce_init_init_options_impl_memory>
 801d09e:	4954      	ldr	r1, [pc, #336]	@ (801d1f0 <rmw_init+0x24c>)
 801d0a0:	4854      	ldr	r0, [pc, #336]	@ (801d1f4 <rmw_init+0x250>)
 801d0a2:	2204      	movs	r2, #4
 801d0a4:	f7f1 feae 	bl	800ee04 <rmw_uxrce_init_wait_set_memory>
 801d0a8:	4953      	ldr	r1, [pc, #332]	@ (801d1f8 <rmw_init+0x254>)
 801d0aa:	4854      	ldr	r0, [pc, #336]	@ (801d1fc <rmw_init+0x258>)
 801d0ac:	2204      	movs	r2, #4
 801d0ae:	f7f1 fec9 	bl	800ee44 <rmw_uxrce_init_guard_condition_memory>
 801d0b2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801d0b4:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801d0b6:	4642      	mov	r2, r8
 801d0b8:	f000 fe90 	bl	801dddc <rmw_uxrce_transport_init>
 801d0bc:	4607      	mov	r7, r0
 801d0be:	2800      	cmp	r0, #0
 801d0c0:	d158      	bne.n	801d174 <rmw_init+0x1d0>
 801d0c2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801d0c4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801d0c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d0ca:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801d0ce:	4628      	mov	r0, r5
 801d0d0:	f7f6 fb32 	bl	8013738 <uxr_init_session>
 801d0d4:	494a      	ldr	r1, [pc, #296]	@ (801d200 <rmw_init+0x25c>)
 801d0d6:	4622      	mov	r2, r4
 801d0d8:	4628      	mov	r0, r5
 801d0da:	f7f6 fb51 	bl	8013780 <uxr_set_topic_callback>
 801d0de:	4949      	ldr	r1, [pc, #292]	@ (801d204 <rmw_init+0x260>)
 801d0e0:	463a      	mov	r2, r7
 801d0e2:	4628      	mov	r0, r5
 801d0e4:	f7f6 fb48 	bl	8013778 <uxr_set_status_callback>
 801d0e8:	4947      	ldr	r1, [pc, #284]	@ (801d208 <rmw_init+0x264>)
 801d0ea:	463a      	mov	r2, r7
 801d0ec:	4628      	mov	r0, r5
 801d0ee:	f7f6 fb4b 	bl	8013788 <uxr_set_request_callback>
 801d0f2:	4946      	ldr	r1, [pc, #280]	@ (801d20c <rmw_init+0x268>)
 801d0f4:	463a      	mov	r2, r7
 801d0f6:	4628      	mov	r0, r5
 801d0f8:	f7f6 fb4a 	bl	8013790 <uxr_set_reply_callback>
 801d0fc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801d100:	2304      	movs	r3, #4
 801d102:	0092      	lsls	r2, r2, #2
 801d104:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801d108:	4628      	mov	r0, r5
 801d10a:	f7f6 fb7f 	bl	801380c <uxr_create_input_reliable_stream>
 801d10e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801d112:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801d116:	0092      	lsls	r2, r2, #2
 801d118:	2304      	movs	r3, #4
 801d11a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801d11e:	4628      	mov	r0, r5
 801d120:	f7f6 fb4c 	bl	80137bc <uxr_create_output_reliable_stream>
 801d124:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801d128:	4628      	mov	r0, r5
 801d12a:	f7f6 fb69 	bl	8013800 <uxr_create_input_best_effort_stream>
 801d12e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801d132:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801d136:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801d13a:	3114      	adds	r1, #20
 801d13c:	4628      	mov	r0, r5
 801d13e:	f7f6 fb2b 	bl	8013798 <uxr_create_output_best_effort_stream>
 801d142:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801d146:	4628      	mov	r0, r5
 801d148:	f7f7 f8b6 	bl	80142b8 <uxr_create_session>
 801d14c:	b1f8      	cbz	r0, 801d18e <rmw_init+0x1ea>
 801d14e:	4638      	mov	r0, r7
 801d150:	b003      	add	sp, #12
 801d152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d156:	270b      	movs	r7, #11
 801d158:	4638      	mov	r0, r7
 801d15a:	b003      	add	sp, #12
 801d15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d160:	2701      	movs	r7, #1
 801d162:	4638      	mov	r0, r7
 801d164:	b003      	add	sp, #12
 801d166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d16a:	270c      	movs	r7, #12
 801d16c:	4638      	mov	r0, r7
 801d16e:	b003      	add	sp, #12
 801d170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d174:	4648      	mov	r0, r9
 801d176:	f001 f99d 	bl	801e4b4 <uxr_close_custom_transport>
 801d17a:	480d      	ldr	r0, [pc, #52]	@ (801d1b0 <rmw_init+0x20c>)
 801d17c:	4621      	mov	r1, r4
 801d17e:	f7ff fdbb 	bl	801ccf8 <put_memory>
 801d182:	4638      	mov	r0, r7
 801d184:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801d188:	b003      	add	sp, #12
 801d18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d18e:	4648      	mov	r0, r9
 801d190:	f001 f990 	bl	801e4b4 <uxr_close_custom_transport>
 801d194:	4806      	ldr	r0, [pc, #24]	@ (801d1b0 <rmw_init+0x20c>)
 801d196:	4621      	mov	r1, r4
 801d198:	f7ff fdae 	bl	801ccf8 <put_memory>
 801d19c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801d19e:	2701      	movs	r7, #1
 801d1a0:	e7d5      	b.n	801d14e <rmw_init+0x1aa>
 801d1a2:	bf00      	nop
 801d1a4:	08025754 	.word	0x08025754
 801d1a8:	20016d14 	.word	0x20016d14
 801d1ac:	20012fc0 	.word	0x20012fc0
 801d1b0:	20016d04 	.word	0x20016d04
 801d1b4:	20014568 	.word	0x20014568
 801d1b8:	20012134 	.word	0x20012134
 801d1bc:	20016cd4 	.word	0x20016cd4
 801d1c0:	20016668 	.word	0x20016668
 801d1c4:	20016d24 	.word	0x20016d24
 801d1c8:	200121d8 	.word	0x200121d8
 801d1cc:	20016ce4 	.word	0x20016ce4
 801d1d0:	20012a48 	.word	0x20012a48
 801d1d4:	20016cf4 	.word	0x20016cf4
 801d1d8:	20011f68 	.word	0x20011f68
 801d1dc:	20011f58 	.word	0x20011f58
 801d1e0:	20016aa0 	.word	0x20016aa0
 801d1e4:	20016d34 	.word	0x20016d34
 801d1e8:	200120b0 	.word	0x200120b0
 801d1ec:	20016cc4 	.word	0x20016cc4
 801d1f0:	20016c44 	.word	0x20016c44
 801d1f4:	20016d44 	.word	0x20016d44
 801d1f8:	20012030 	.word	0x20012030
 801d1fc:	20016cb4 	.word	0x20016cb4
 801d200:	080204f1 	.word	0x080204f1
 801d204:	080204e9 	.word	0x080204e9
 801d208:	08020589 	.word	0x08020589
 801d20c:	08020625 	.word	0x08020625

0801d210 <rmw_context_fini>:
 801d210:	4b17      	ldr	r3, [pc, #92]	@ (801d270 <rmw_context_fini+0x60>)
 801d212:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801d214:	b570      	push	{r4, r5, r6, lr}
 801d216:	681c      	ldr	r4, [r3, #0]
 801d218:	4605      	mov	r5, r0
 801d21a:	b334      	cbz	r4, 801d26a <rmw_context_fini+0x5a>
 801d21c:	2600      	movs	r6, #0
 801d21e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801d222:	6902      	ldr	r2, [r0, #16]
 801d224:	428a      	cmp	r2, r1
 801d226:	d018      	beq.n	801d25a <rmw_context_fini+0x4a>
 801d228:	2c00      	cmp	r4, #0
 801d22a:	d1f8      	bne.n	801d21e <rmw_context_fini+0xe>
 801d22c:	b189      	cbz	r1, 801d252 <rmw_context_fini+0x42>
 801d22e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801d232:	789b      	ldrb	r3, [r3, #2]
 801d234:	2b01      	cmp	r3, #1
 801d236:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801d23a:	bf14      	ite	ne
 801d23c:	210a      	movne	r1, #10
 801d23e:	2100      	moveq	r1, #0
 801d240:	f7f7 f812 	bl	8014268 <uxr_delete_session_retries>
 801d244:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801d246:	f7f1 fe1d 	bl	800ee84 <rmw_uxrce_fini_session_memory>
 801d24a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801d24c:	3010      	adds	r0, #16
 801d24e:	f001 f931 	bl	801e4b4 <uxr_close_custom_transport>
 801d252:	2300      	movs	r3, #0
 801d254:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801d256:	4630      	mov	r0, r6
 801d258:	bd70      	pop	{r4, r5, r6, pc}
 801d25a:	3018      	adds	r0, #24
 801d25c:	f000 f90e 	bl	801d47c <rmw_destroy_node>
 801d260:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801d262:	4606      	mov	r6, r0
 801d264:	2c00      	cmp	r4, #0
 801d266:	d1da      	bne.n	801d21e <rmw_context_fini+0xe>
 801d268:	e7e0      	b.n	801d22c <rmw_context_fini+0x1c>
 801d26a:	4626      	mov	r6, r4
 801d26c:	e7de      	b.n	801d22c <rmw_context_fini+0x1c>
 801d26e:	bf00      	nop
 801d270:	20016cd4 	.word	0x20016cd4

0801d274 <create_topic>:
 801d274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d278:	4605      	mov	r5, r0
 801d27a:	b084      	sub	sp, #16
 801d27c:	4822      	ldr	r0, [pc, #136]	@ (801d308 <create_topic+0x94>)
 801d27e:	460f      	mov	r7, r1
 801d280:	4616      	mov	r6, r2
 801d282:	f7ff fd29 	bl	801ccd8 <get_memory>
 801d286:	4604      	mov	r4, r0
 801d288:	2800      	cmp	r0, #0
 801d28a:	d039      	beq.n	801d300 <create_topic+0x8c>
 801d28c:	692b      	ldr	r3, [r5, #16]
 801d28e:	6884      	ldr	r4, [r0, #8]
 801d290:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801d310 <create_topic+0x9c>
 801d294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801d298:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801d29c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801d2a0:	1c42      	adds	r2, r0, #1
 801d2a2:	2102      	movs	r1, #2
 801d2a4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801d2a8:	f7f6 f988 	bl	80135bc <uxr_object_id>
 801d2ac:	223c      	movs	r2, #60	@ 0x3c
 801d2ae:	6120      	str	r0, [r4, #16]
 801d2b0:	4641      	mov	r1, r8
 801d2b2:	4638      	mov	r0, r7
 801d2b4:	f7f2 f85e 	bl	800f374 <generate_topic_name>
 801d2b8:	b1f0      	cbz	r0, 801d2f8 <create_topic+0x84>
 801d2ba:	4f14      	ldr	r7, [pc, #80]	@ (801d30c <create_topic+0x98>)
 801d2bc:	4630      	mov	r0, r6
 801d2be:	2264      	movs	r2, #100	@ 0x64
 801d2c0:	4639      	mov	r1, r7
 801d2c2:	f7f2 f827 	bl	800f314 <generate_type_name>
 801d2c6:	b1b8      	cbz	r0, 801d2f8 <create_topic+0x84>
 801d2c8:	6928      	ldr	r0, [r5, #16]
 801d2ca:	2306      	movs	r3, #6
 801d2cc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801d2d0:	f8cd 8000 	str.w	r8, [sp]
 801d2d4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801d2d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d2dc:	6811      	ldr	r1, [r2, #0]
 801d2de:	696b      	ldr	r3, [r5, #20]
 801d2e0:	6922      	ldr	r2, [r4, #16]
 801d2e2:	f7f5 ffad 	bl	8013240 <uxr_buffer_create_topic_bin>
 801d2e6:	4602      	mov	r2, r0
 801d2e8:	6928      	ldr	r0, [r5, #16]
 801d2ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801d2ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801d2f2:	f7f1 ff3f 	bl	800f174 <run_xrce_session>
 801d2f6:	b918      	cbnz	r0, 801d300 <create_topic+0x8c>
 801d2f8:	4620      	mov	r0, r4
 801d2fa:	f7f1 fe39 	bl	800ef70 <rmw_uxrce_fini_topic_memory>
 801d2fe:	2400      	movs	r4, #0
 801d300:	4620      	mov	r0, r4
 801d302:	b004      	add	sp, #16
 801d304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d308:	20016d34 	.word	0x20016d34
 801d30c:	20016e88 	.word	0x20016e88
 801d310:	20016e4c 	.word	0x20016e4c

0801d314 <destroy_topic>:
 801d314:	b538      	push	{r3, r4, r5, lr}
 801d316:	6985      	ldr	r5, [r0, #24]
 801d318:	b1d5      	cbz	r5, 801d350 <destroy_topic+0x3c>
 801d31a:	4604      	mov	r4, r0
 801d31c:	6928      	ldr	r0, [r5, #16]
 801d31e:	6922      	ldr	r2, [r4, #16]
 801d320:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801d324:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d328:	6819      	ldr	r1, [r3, #0]
 801d32a:	f7f5 ff0b 	bl	8013144 <uxr_buffer_delete_entity>
 801d32e:	4602      	mov	r2, r0
 801d330:	6928      	ldr	r0, [r5, #16]
 801d332:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801d336:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801d33a:	f7f1 ff1b 	bl	800f174 <run_xrce_session>
 801d33e:	2800      	cmp	r0, #0
 801d340:	4620      	mov	r0, r4
 801d342:	bf14      	ite	ne
 801d344:	2400      	movne	r4, #0
 801d346:	2402      	moveq	r4, #2
 801d348:	f7f1 fe12 	bl	800ef70 <rmw_uxrce_fini_topic_memory>
 801d34c:	4620      	mov	r0, r4
 801d34e:	bd38      	pop	{r3, r4, r5, pc}
 801d350:	2401      	movs	r4, #1
 801d352:	4620      	mov	r0, r4
 801d354:	bd38      	pop	{r3, r4, r5, pc}
 801d356:	bf00      	nop

0801d358 <create_node>:
 801d358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d35c:	b083      	sub	sp, #12
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d05f      	beq.n	801d422 <create_node+0xca>
 801d362:	4606      	mov	r6, r0
 801d364:	4835      	ldr	r0, [pc, #212]	@ (801d43c <create_node+0xe4>)
 801d366:	460f      	mov	r7, r1
 801d368:	4690      	mov	r8, r2
 801d36a:	461d      	mov	r5, r3
 801d36c:	f7ff fcb4 	bl	801ccd8 <get_memory>
 801d370:	2800      	cmp	r0, #0
 801d372:	d056      	beq.n	801d422 <create_node+0xca>
 801d374:	6884      	ldr	r4, [r0, #8]
 801d376:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801d378:	6123      	str	r3, [r4, #16]
 801d37a:	f7ff fd15 	bl	801cda8 <rmw_get_implementation_identifier>
 801d37e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801d382:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801d386:	f8c4 9020 	str.w	r9, [r4, #32]
 801d38a:	4630      	mov	r0, r6
 801d38c:	f7e2 ff38 	bl	8000200 <strlen>
 801d390:	1c42      	adds	r2, r0, #1
 801d392:	2a3c      	cmp	r2, #60	@ 0x3c
 801d394:	f104 0518 	add.w	r5, r4, #24
 801d398:	d840      	bhi.n	801d41c <create_node+0xc4>
 801d39a:	4648      	mov	r0, r9
 801d39c:	4631      	mov	r1, r6
 801d39e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801d3a2:	f004 fb46 	bl	8021a32 <memcpy>
 801d3a6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801d3aa:	4638      	mov	r0, r7
 801d3ac:	f7e2 ff28 	bl	8000200 <strlen>
 801d3b0:	1c42      	adds	r2, r0, #1
 801d3b2:	2a3c      	cmp	r2, #60	@ 0x3c
 801d3b4:	d832      	bhi.n	801d41c <create_node+0xc4>
 801d3b6:	4639      	mov	r1, r7
 801d3b8:	4648      	mov	r0, r9
 801d3ba:	f004 fb3a 	bl	8021a32 <memcpy>
 801d3be:	6923      	ldr	r3, [r4, #16]
 801d3c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801d3c4:	2101      	movs	r1, #1
 801d3c6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801d3ca:	1842      	adds	r2, r0, r1
 801d3cc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801d3d0:	f7f6 f8f4 	bl	80135bc <uxr_object_id>
 801d3d4:	6160      	str	r0, [r4, #20]
 801d3d6:	783b      	ldrb	r3, [r7, #0]
 801d3d8:	2b2f      	cmp	r3, #47	@ 0x2f
 801d3da:	d127      	bne.n	801d42c <create_node+0xd4>
 801d3dc:	787b      	ldrb	r3, [r7, #1]
 801d3de:	bb2b      	cbnz	r3, 801d42c <create_node+0xd4>
 801d3e0:	4a17      	ldr	r2, [pc, #92]	@ (801d440 <create_node+0xe8>)
 801d3e2:	4818      	ldr	r0, [pc, #96]	@ (801d444 <create_node+0xec>)
 801d3e4:	4633      	mov	r3, r6
 801d3e6:	213c      	movs	r1, #60	@ 0x3c
 801d3e8:	f003 fe46 	bl	8021078 <sniprintf>
 801d3ec:	6920      	ldr	r0, [r4, #16]
 801d3ee:	4915      	ldr	r1, [pc, #84]	@ (801d444 <create_node+0xec>)
 801d3f0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801d3f4:	9100      	str	r1, [sp, #0]
 801d3f6:	2106      	movs	r1, #6
 801d3f8:	9101      	str	r1, [sp, #4]
 801d3fa:	6811      	ldr	r1, [r2, #0]
 801d3fc:	6962      	ldr	r2, [r4, #20]
 801d3fe:	fa1f f388 	uxth.w	r3, r8
 801d402:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d406:	f7f5 fee9 	bl	80131dc <uxr_buffer_create_participant_bin>
 801d40a:	4602      	mov	r2, r0
 801d40c:	6920      	ldr	r0, [r4, #16]
 801d40e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801d412:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801d416:	f7f1 fead 	bl	800f174 <run_xrce_session>
 801d41a:	b918      	cbnz	r0, 801d424 <create_node+0xcc>
 801d41c:	4628      	mov	r0, r5
 801d41e:	f7f1 fd37 	bl	800ee90 <rmw_uxrce_fini_node_memory>
 801d422:	2500      	movs	r5, #0
 801d424:	4628      	mov	r0, r5
 801d426:	b003      	add	sp, #12
 801d428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d42c:	4a06      	ldr	r2, [pc, #24]	@ (801d448 <create_node+0xf0>)
 801d42e:	9600      	str	r6, [sp, #0]
 801d430:	463b      	mov	r3, r7
 801d432:	213c      	movs	r1, #60	@ 0x3c
 801d434:	4803      	ldr	r0, [pc, #12]	@ (801d444 <create_node+0xec>)
 801d436:	f003 fe1f 	bl	8021078 <sniprintf>
 801d43a:	e7d7      	b.n	801d3ec <create_node+0x94>
 801d43c:	20016cd4 	.word	0x20016cd4
 801d440:	0802343c 	.word	0x0802343c
 801d444:	20016eec 	.word	0x20016eec
 801d448:	08023bbc 	.word	0x08023bbc

0801d44c <rmw_create_node>:
 801d44c:	b199      	cbz	r1, 801d476 <rmw_create_node+0x2a>
 801d44e:	780b      	ldrb	r3, [r1, #0]
 801d450:	468c      	mov	ip, r1
 801d452:	b183      	cbz	r3, 801d476 <rmw_create_node+0x2a>
 801d454:	b410      	push	{r4}
 801d456:	4614      	mov	r4, r2
 801d458:	b14a      	cbz	r2, 801d46e <rmw_create_node+0x22>
 801d45a:	7813      	ldrb	r3, [r2, #0]
 801d45c:	b13b      	cbz	r3, 801d46e <rmw_create_node+0x22>
 801d45e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801d460:	4603      	mov	r3, r0
 801d462:	4621      	mov	r1, r4
 801d464:	4660      	mov	r0, ip
 801d466:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d46a:	f7ff bf75 	b.w	801d358 <create_node>
 801d46e:	2000      	movs	r0, #0
 801d470:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d474:	4770      	bx	lr
 801d476:	2000      	movs	r0, #0
 801d478:	4770      	bx	lr
 801d47a:	bf00      	nop

0801d47c <rmw_destroy_node>:
 801d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d47e:	b328      	cbz	r0, 801d4cc <rmw_destroy_node+0x50>
 801d480:	4607      	mov	r7, r0
 801d482:	6800      	ldr	r0, [r0, #0]
 801d484:	b120      	cbz	r0, 801d490 <rmw_destroy_node+0x14>
 801d486:	4b36      	ldr	r3, [pc, #216]	@ (801d560 <rmw_destroy_node+0xe4>)
 801d488:	6819      	ldr	r1, [r3, #0]
 801d48a:	f7e2 fec1 	bl	8000210 <strcmp>
 801d48e:	b9e8      	cbnz	r0, 801d4cc <rmw_destroy_node+0x50>
 801d490:	687d      	ldr	r5, [r7, #4]
 801d492:	b1dd      	cbz	r5, 801d4cc <rmw_destroy_node+0x50>
 801d494:	4b33      	ldr	r3, [pc, #204]	@ (801d564 <rmw_destroy_node+0xe8>)
 801d496:	681c      	ldr	r4, [r3, #0]
 801d498:	2c00      	cmp	r4, #0
 801d49a:	d05f      	beq.n	801d55c <rmw_destroy_node+0xe0>
 801d49c:	2600      	movs	r6, #0
 801d49e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801d4a2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801d4a6:	429d      	cmp	r5, r3
 801d4a8:	d013      	beq.n	801d4d2 <rmw_destroy_node+0x56>
 801d4aa:	2c00      	cmp	r4, #0
 801d4ac:	d1f7      	bne.n	801d49e <rmw_destroy_node+0x22>
 801d4ae:	4b2e      	ldr	r3, [pc, #184]	@ (801d568 <rmw_destroy_node+0xec>)
 801d4b0:	681c      	ldr	r4, [r3, #0]
 801d4b2:	b1c4      	cbz	r4, 801d4e6 <rmw_destroy_node+0x6a>
 801d4b4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801d4b8:	6a0b      	ldr	r3, [r1, #32]
 801d4ba:	429d      	cmp	r5, r3
 801d4bc:	d1f9      	bne.n	801d4b2 <rmw_destroy_node+0x36>
 801d4be:	317c      	adds	r1, #124	@ 0x7c
 801d4c0:	4638      	mov	r0, r7
 801d4c2:	f000 fbd7 	bl	801dc74 <rmw_destroy_subscription>
 801d4c6:	2801      	cmp	r0, #1
 801d4c8:	4606      	mov	r6, r0
 801d4ca:	d1f2      	bne.n	801d4b2 <rmw_destroy_node+0x36>
 801d4cc:	2601      	movs	r6, #1
 801d4ce:	4630      	mov	r0, r6
 801d4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4d2:	3184      	adds	r1, #132	@ 0x84
 801d4d4:	4638      	mov	r0, r7
 801d4d6:	f7f1 fb23 	bl	800eb20 <rmw_destroy_publisher>
 801d4da:	2801      	cmp	r0, #1
 801d4dc:	4606      	mov	r6, r0
 801d4de:	d0f5      	beq.n	801d4cc <rmw_destroy_node+0x50>
 801d4e0:	2c00      	cmp	r4, #0
 801d4e2:	d1dc      	bne.n	801d49e <rmw_destroy_node+0x22>
 801d4e4:	e7e3      	b.n	801d4ae <rmw_destroy_node+0x32>
 801d4e6:	4b21      	ldr	r3, [pc, #132]	@ (801d56c <rmw_destroy_node+0xf0>)
 801d4e8:	681c      	ldr	r4, [r3, #0]
 801d4ea:	b16c      	cbz	r4, 801d508 <rmw_destroy_node+0x8c>
 801d4ec:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801d4f0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801d4f2:	429d      	cmp	r5, r3
 801d4f4:	d1f9      	bne.n	801d4ea <rmw_destroy_node+0x6e>
 801d4f6:	317c      	adds	r1, #124	@ 0x7c
 801d4f8:	4638      	mov	r0, r7
 801d4fa:	f000 fa65 	bl	801d9c8 <rmw_destroy_service>
 801d4fe:	2801      	cmp	r0, #1
 801d500:	4606      	mov	r6, r0
 801d502:	d0e3      	beq.n	801d4cc <rmw_destroy_node+0x50>
 801d504:	2c00      	cmp	r4, #0
 801d506:	d1f1      	bne.n	801d4ec <rmw_destroy_node+0x70>
 801d508:	4b19      	ldr	r3, [pc, #100]	@ (801d570 <rmw_destroy_node+0xf4>)
 801d50a:	681c      	ldr	r4, [r3, #0]
 801d50c:	b16c      	cbz	r4, 801d52a <rmw_destroy_node+0xae>
 801d50e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801d512:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801d514:	429d      	cmp	r5, r3
 801d516:	d1f9      	bne.n	801d50c <rmw_destroy_node+0x90>
 801d518:	317c      	adds	r1, #124	@ 0x7c
 801d51a:	4638      	mov	r0, r7
 801d51c:	f7ff fc00 	bl	801cd20 <rmw_destroy_client>
 801d520:	2801      	cmp	r0, #1
 801d522:	4606      	mov	r6, r0
 801d524:	d0d2      	beq.n	801d4cc <rmw_destroy_node+0x50>
 801d526:	2c00      	cmp	r4, #0
 801d528:	d1f1      	bne.n	801d50e <rmw_destroy_node+0x92>
 801d52a:	6928      	ldr	r0, [r5, #16]
 801d52c:	696a      	ldr	r2, [r5, #20]
 801d52e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801d532:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d536:	6819      	ldr	r1, [r3, #0]
 801d538:	f7f5 fe04 	bl	8013144 <uxr_buffer_delete_entity>
 801d53c:	4602      	mov	r2, r0
 801d53e:	6928      	ldr	r0, [r5, #16]
 801d540:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801d544:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801d548:	f7f1 fe14 	bl	800f174 <run_xrce_session>
 801d54c:	2800      	cmp	r0, #0
 801d54e:	bf08      	it	eq
 801d550:	2602      	moveq	r6, #2
 801d552:	4638      	mov	r0, r7
 801d554:	f7f1 fc9c 	bl	800ee90 <rmw_uxrce_fini_node_memory>
 801d558:	4630      	mov	r0, r6
 801d55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d55c:	4626      	mov	r6, r4
 801d55e:	e7a6      	b.n	801d4ae <rmw_destroy_node+0x32>
 801d560:	08025754 	.word	0x08025754
 801d564:	20016ce4 	.word	0x20016ce4
 801d568:	20016d24 	.word	0x20016d24
 801d56c:	20016cf4 	.word	0x20016cf4
 801d570:	20011f58 	.word	0x20011f58

0801d574 <rmw_node_get_graph_guard_condition>:
 801d574:	6843      	ldr	r3, [r0, #4]
 801d576:	6918      	ldr	r0, [r3, #16]
 801d578:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801d57c:	4770      	bx	lr
 801d57e:	bf00      	nop

0801d580 <rmw_send_request>:
 801d580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d584:	4604      	mov	r4, r0
 801d586:	6800      	ldr	r0, [r0, #0]
 801d588:	b08b      	sub	sp, #44	@ 0x2c
 801d58a:	460e      	mov	r6, r1
 801d58c:	4615      	mov	r5, r2
 801d58e:	b128      	cbz	r0, 801d59c <rmw_send_request+0x1c>
 801d590:	4b21      	ldr	r3, [pc, #132]	@ (801d618 <rmw_send_request+0x98>)
 801d592:	6819      	ldr	r1, [r3, #0]
 801d594:	f7e2 fe3c 	bl	8000210 <strcmp>
 801d598:	2800      	cmp	r0, #0
 801d59a:	d139      	bne.n	801d610 <rmw_send_request+0x90>
 801d59c:	6864      	ldr	r4, [r4, #4]
 801d59e:	6963      	ldr	r3, [r4, #20]
 801d5a0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801d5a4:	689b      	ldr	r3, [r3, #8]
 801d5a6:	4798      	blx	r3
 801d5a8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801d5ac:	4630      	mov	r0, r6
 801d5ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d5b2:	4798      	blx	r3
 801d5b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d5b8:	9000      	str	r0, [sp, #0]
 801d5ba:	6922      	ldr	r2, [r4, #16]
 801d5bc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801d5be:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801d5c2:	ab02      	add	r3, sp, #8
 801d5c4:	f7f7 faf4 	bl	8014bb0 <uxr_prepare_output_stream>
 801d5c8:	2700      	movs	r7, #0
 801d5ca:	6028      	str	r0, [r5, #0]
 801d5cc:	606f      	str	r7, [r5, #4]
 801d5ce:	b198      	cbz	r0, 801d5f8 <rmw_send_request+0x78>
 801d5d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801d5d4:	a902      	add	r1, sp, #8
 801d5d6:	4630      	mov	r0, r6
 801d5d8:	4798      	blx	r3
 801d5da:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801d5de:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801d5e2:	2b01      	cmp	r3, #1
 801d5e4:	d00c      	beq.n	801d600 <rmw_send_request+0x80>
 801d5e6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801d5e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d5ec:	f7f6 fcf4 	bl	8013fd8 <uxr_run_session_until_confirm_delivery>
 801d5f0:	4638      	mov	r0, r7
 801d5f2:	b00b      	add	sp, #44	@ 0x2c
 801d5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5f8:	2001      	movs	r0, #1
 801d5fa:	b00b      	add	sp, #44	@ 0x2c
 801d5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d600:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d604:	f7f6 f928 	bl	8013858 <uxr_flash_output_streams>
 801d608:	4638      	mov	r0, r7
 801d60a:	b00b      	add	sp, #44	@ 0x2c
 801d60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d610:	200c      	movs	r0, #12
 801d612:	b00b      	add	sp, #44	@ 0x2c
 801d614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d618:	08025754 	.word	0x08025754

0801d61c <rmw_take_request>:
 801d61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d620:	4605      	mov	r5, r0
 801d622:	6800      	ldr	r0, [r0, #0]
 801d624:	b089      	sub	sp, #36	@ 0x24
 801d626:	460c      	mov	r4, r1
 801d628:	4690      	mov	r8, r2
 801d62a:	461e      	mov	r6, r3
 801d62c:	b128      	cbz	r0, 801d63a <rmw_take_request+0x1e>
 801d62e:	4b28      	ldr	r3, [pc, #160]	@ (801d6d0 <rmw_take_request+0xb4>)
 801d630:	6819      	ldr	r1, [r3, #0]
 801d632:	f7e2 fded 	bl	8000210 <strcmp>
 801d636:	2800      	cmp	r0, #0
 801d638:	d146      	bne.n	801d6c8 <rmw_take_request+0xac>
 801d63a:	b10e      	cbz	r6, 801d640 <rmw_take_request+0x24>
 801d63c:	2300      	movs	r3, #0
 801d63e:	7033      	strb	r3, [r6, #0]
 801d640:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801d644:	f7f1 fd18 	bl	800f078 <rmw_uxrce_clean_expired_static_input_buffer>
 801d648:	4648      	mov	r0, r9
 801d64a:	f7f1 fced 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d64e:	4607      	mov	r7, r0
 801d650:	b3b0      	cbz	r0, 801d6c0 <rmw_take_request+0xa4>
 801d652:	6885      	ldr	r5, [r0, #8]
 801d654:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801d658:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801d65c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801d660:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801d664:	7423      	strb	r3, [r4, #16]
 801d666:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801d66a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801d66e:	74e2      	strb	r2, [r4, #19]
 801d670:	f8a4 3011 	strh.w	r3, [r4, #17]
 801d674:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801d678:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801d67c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801d680:	61e1      	str	r1, [r4, #28]
 801d682:	6162      	str	r2, [r4, #20]
 801d684:	61a3      	str	r3, [r4, #24]
 801d686:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801d68a:	689b      	ldr	r3, [r3, #8]
 801d68c:	4798      	blx	r3
 801d68e:	6844      	ldr	r4, [r0, #4]
 801d690:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801d694:	f105 0110 	add.w	r1, r5, #16
 801d698:	4668      	mov	r0, sp
 801d69a:	f7f5 fc07 	bl	8012eac <ucdr_init_buffer>
 801d69e:	68e3      	ldr	r3, [r4, #12]
 801d6a0:	4641      	mov	r1, r8
 801d6a2:	4668      	mov	r0, sp
 801d6a4:	4798      	blx	r3
 801d6a6:	4639      	mov	r1, r7
 801d6a8:	4604      	mov	r4, r0
 801d6aa:	480a      	ldr	r0, [pc, #40]	@ (801d6d4 <rmw_take_request+0xb8>)
 801d6ac:	f7ff fb24 	bl	801ccf8 <put_memory>
 801d6b0:	b106      	cbz	r6, 801d6b4 <rmw_take_request+0x98>
 801d6b2:	7034      	strb	r4, [r6, #0]
 801d6b4:	f084 0001 	eor.w	r0, r4, #1
 801d6b8:	b2c0      	uxtb	r0, r0
 801d6ba:	b009      	add	sp, #36	@ 0x24
 801d6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6c0:	2001      	movs	r0, #1
 801d6c2:	b009      	add	sp, #36	@ 0x24
 801d6c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6c8:	200c      	movs	r0, #12
 801d6ca:	b009      	add	sp, #36	@ 0x24
 801d6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6d0:	08025754 	.word	0x08025754
 801d6d4:	20016d14 	.word	0x20016d14

0801d6d8 <rmw_send_response>:
 801d6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6da:	4605      	mov	r5, r0
 801d6dc:	6800      	ldr	r0, [r0, #0]
 801d6de:	b091      	sub	sp, #68	@ 0x44
 801d6e0:	460c      	mov	r4, r1
 801d6e2:	4616      	mov	r6, r2
 801d6e4:	b128      	cbz	r0, 801d6f2 <rmw_send_response+0x1a>
 801d6e6:	4b29      	ldr	r3, [pc, #164]	@ (801d78c <rmw_send_response+0xb4>)
 801d6e8:	6819      	ldr	r1, [r3, #0]
 801d6ea:	f7e2 fd91 	bl	8000210 <strcmp>
 801d6ee:	2800      	cmp	r0, #0
 801d6f0:	d141      	bne.n	801d776 <rmw_send_response+0x9e>
 801d6f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801d6f6:	9306      	str	r3, [sp, #24]
 801d6f8:	4623      	mov	r3, r4
 801d6fa:	9207      	str	r2, [sp, #28]
 801d6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d700:	686d      	ldr	r5, [r5, #4]
 801d702:	789b      	ldrb	r3, [r3, #2]
 801d704:	68a1      	ldr	r1, [r4, #8]
 801d706:	f88d 2017 	strb.w	r2, [sp, #23]
 801d70a:	f88d 3016 	strb.w	r3, [sp, #22]
 801d70e:	68e2      	ldr	r2, [r4, #12]
 801d710:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801d714:	6860      	ldr	r0, [r4, #4]
 801d716:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d71a:	ab02      	add	r3, sp, #8
 801d71c:	c307      	stmia	r3!, {r0, r1, r2}
 801d71e:	696b      	ldr	r3, [r5, #20]
 801d720:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801d722:	68db      	ldr	r3, [r3, #12]
 801d724:	4798      	blx	r3
 801d726:	6844      	ldr	r4, [r0, #4]
 801d728:	4630      	mov	r0, r6
 801d72a:	6923      	ldr	r3, [r4, #16]
 801d72c:	4798      	blx	r3
 801d72e:	f100 0318 	add.w	r3, r0, #24
 801d732:	6938      	ldr	r0, [r7, #16]
 801d734:	9300      	str	r3, [sp, #0]
 801d736:	692a      	ldr	r2, [r5, #16]
 801d738:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801d73a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d73e:	ab08      	add	r3, sp, #32
 801d740:	f7f7 fa36 	bl	8014bb0 <uxr_prepare_output_stream>
 801d744:	b910      	cbnz	r0, 801d74c <rmw_send_response+0x74>
 801d746:	2001      	movs	r0, #1
 801d748:	b011      	add	sp, #68	@ 0x44
 801d74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d74c:	a902      	add	r1, sp, #8
 801d74e:	a808      	add	r0, sp, #32
 801d750:	f7f8 fb9a 	bl	8015e88 <uxr_serialize_SampleIdentity>
 801d754:	68a3      	ldr	r3, [r4, #8]
 801d756:	a908      	add	r1, sp, #32
 801d758:	4630      	mov	r0, r6
 801d75a:	4798      	blx	r3
 801d75c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801d760:	6938      	ldr	r0, [r7, #16]
 801d762:	2b01      	cmp	r3, #1
 801d764:	d00a      	beq.n	801d77c <rmw_send_response+0xa4>
 801d766:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801d768:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d76c:	f7f6 fc34 	bl	8013fd8 <uxr_run_session_until_confirm_delivery>
 801d770:	2000      	movs	r0, #0
 801d772:	b011      	add	sp, #68	@ 0x44
 801d774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d776:	200c      	movs	r0, #12
 801d778:	b011      	add	sp, #68	@ 0x44
 801d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d77c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d780:	f7f6 f86a 	bl	8013858 <uxr_flash_output_streams>
 801d784:	2000      	movs	r0, #0
 801d786:	b011      	add	sp, #68	@ 0x44
 801d788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d78a:	bf00      	nop
 801d78c:	08025754 	.word	0x08025754

0801d790 <rmw_take_response>:
 801d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d794:	4604      	mov	r4, r0
 801d796:	6800      	ldr	r0, [r0, #0]
 801d798:	b088      	sub	sp, #32
 801d79a:	4688      	mov	r8, r1
 801d79c:	4617      	mov	r7, r2
 801d79e:	461d      	mov	r5, r3
 801d7a0:	b120      	cbz	r0, 801d7ac <rmw_take_response+0x1c>
 801d7a2:	4b1e      	ldr	r3, [pc, #120]	@ (801d81c <rmw_take_response+0x8c>)
 801d7a4:	6819      	ldr	r1, [r3, #0]
 801d7a6:	f7e2 fd33 	bl	8000210 <strcmp>
 801d7aa:	bb78      	cbnz	r0, 801d80c <rmw_take_response+0x7c>
 801d7ac:	b10d      	cbz	r5, 801d7b2 <rmw_take_response+0x22>
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	702b      	strb	r3, [r5, #0]
 801d7b2:	6864      	ldr	r4, [r4, #4]
 801d7b4:	f7f1 fc60 	bl	800f078 <rmw_uxrce_clean_expired_static_input_buffer>
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	f7f1 fc35 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d7be:	4606      	mov	r6, r0
 801d7c0:	b340      	cbz	r0, 801d814 <rmw_take_response+0x84>
 801d7c2:	6963      	ldr	r3, [r4, #20]
 801d7c4:	6884      	ldr	r4, [r0, #8]
 801d7c6:	68db      	ldr	r3, [r3, #12]
 801d7c8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801d7cc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801d7d0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801d7d4:	4798      	blx	r3
 801d7d6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801d7da:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801d7de:	f104 0110 	add.w	r1, r4, #16
 801d7e2:	4668      	mov	r0, sp
 801d7e4:	f7f5 fb62 	bl	8012eac <ucdr_init_buffer>
 801d7e8:	4639      	mov	r1, r7
 801d7ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d7ee:	4668      	mov	r0, sp
 801d7f0:	4798      	blx	r3
 801d7f2:	4631      	mov	r1, r6
 801d7f4:	4604      	mov	r4, r0
 801d7f6:	480a      	ldr	r0, [pc, #40]	@ (801d820 <rmw_take_response+0x90>)
 801d7f8:	f7ff fa7e 	bl	801ccf8 <put_memory>
 801d7fc:	b105      	cbz	r5, 801d800 <rmw_take_response+0x70>
 801d7fe:	702c      	strb	r4, [r5, #0]
 801d800:	f084 0001 	eor.w	r0, r4, #1
 801d804:	b2c0      	uxtb	r0, r0
 801d806:	b008      	add	sp, #32
 801d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d80c:	200c      	movs	r0, #12
 801d80e:	b008      	add	sp, #32
 801d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d814:	2001      	movs	r0, #1
 801d816:	b008      	add	sp, #32
 801d818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d81c:	08025754 	.word	0x08025754
 801d820:	20016d14 	.word	0x20016d14

0801d824 <rmw_create_service>:
 801d824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d828:	b091      	sub	sp, #68	@ 0x44
 801d82a:	2800      	cmp	r0, #0
 801d82c:	f000 80ba 	beq.w	801d9a4 <rmw_create_service+0x180>
 801d830:	4689      	mov	r9, r1
 801d832:	2900      	cmp	r1, #0
 801d834:	f000 80b6 	beq.w	801d9a4 <rmw_create_service+0x180>
 801d838:	4606      	mov	r6, r0
 801d83a:	6800      	ldr	r0, [r0, #0]
 801d83c:	4614      	mov	r4, r2
 801d83e:	461d      	mov	r5, r3
 801d840:	f7f1 fdb2 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801d844:	2800      	cmp	r0, #0
 801d846:	f000 80ad 	beq.w	801d9a4 <rmw_create_service+0x180>
 801d84a:	2c00      	cmp	r4, #0
 801d84c:	f000 80aa 	beq.w	801d9a4 <rmw_create_service+0x180>
 801d850:	7823      	ldrb	r3, [r4, #0]
 801d852:	2b00      	cmp	r3, #0
 801d854:	f000 80a6 	beq.w	801d9a4 <rmw_create_service+0x180>
 801d858:	2d00      	cmp	r5, #0
 801d85a:	f000 80a3 	beq.w	801d9a4 <rmw_create_service+0x180>
 801d85e:	4854      	ldr	r0, [pc, #336]	@ (801d9b0 <rmw_create_service+0x18c>)
 801d860:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801d864:	f7ff fa38 	bl	801ccd8 <get_memory>
 801d868:	4606      	mov	r6, r0
 801d86a:	2800      	cmp	r0, #0
 801d86c:	f000 809b 	beq.w	801d9a6 <rmw_create_service+0x182>
 801d870:	6887      	ldr	r7, [r0, #8]
 801d872:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801d876:	f7ff fa97 	bl	801cda8 <rmw_get_implementation_identifier>
 801d87a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 801d87e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801d880:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801d884:	4620      	mov	r0, r4
 801d886:	f7e2 fcbb 	bl	8000200 <strlen>
 801d88a:	1c42      	adds	r2, r0, #1
 801d88c:	2a3c      	cmp	r2, #60	@ 0x3c
 801d88e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801d892:	f200 8084 	bhi.w	801d99e <rmw_create_service+0x17a>
 801d896:	4621      	mov	r1, r4
 801d898:	4650      	mov	r0, sl
 801d89a:	f004 f8ca 	bl	8021a32 <memcpy>
 801d89e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d8a2:	4629      	mov	r1, r5
 801d8a4:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 801d8a8:	677b      	str	r3, [r7, #116]	@ 0x74
 801d8aa:	2250      	movs	r2, #80	@ 0x50
 801d8ac:	f107 0020 	add.w	r0, r7, #32
 801d8b0:	f004 f8bf 	bl	8021a32 <memcpy>
 801d8b4:	493f      	ldr	r1, [pc, #252]	@ (801d9b4 <rmw_create_service+0x190>)
 801d8b6:	4648      	mov	r0, r9
 801d8b8:	f7f1 fe6c 	bl	800f594 <get_service_typesupport_handle>
 801d8bc:	2800      	cmp	r0, #0
 801d8be:	d06e      	beq.n	801d99e <rmw_create_service+0x17a>
 801d8c0:	6843      	ldr	r3, [r0, #4]
 801d8c2:	617b      	str	r3, [r7, #20]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d06a      	beq.n	801d99e <rmw_create_service+0x17a>
 801d8c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d8cc:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 801d9bc <rmw_create_service+0x198>
 801d8d0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 801d9c0 <rmw_create_service+0x19c>
 801d8d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801d8d8:	2108      	movs	r1, #8
 801d8da:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 801d8de:	1c42      	adds	r2, r0, #1
 801d8e0:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801d8e4:	f7f5 fe6a 	bl	80135bc <uxr_object_id>
 801d8e8:	2364      	movs	r3, #100	@ 0x64
 801d8ea:	6138      	str	r0, [r7, #16]
 801d8ec:	4652      	mov	r2, sl
 801d8ee:	6978      	ldr	r0, [r7, #20]
 801d8f0:	4649      	mov	r1, r9
 801d8f2:	f7f1 fca7 	bl	800f244 <generate_service_types>
 801d8f6:	2800      	cmp	r0, #0
 801d8f8:	d051      	beq.n	801d99e <rmw_create_service+0x17a>
 801d8fa:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 801d9c4 <rmw_create_service+0x1a0>
 801d8fe:	4a2e      	ldr	r2, [pc, #184]	@ (801d9b8 <rmw_create_service+0x194>)
 801d900:	233c      	movs	r3, #60	@ 0x3c
 801d902:	4659      	mov	r1, fp
 801d904:	4620      	mov	r0, r4
 801d906:	f7f1 fc6b 	bl	800f1e0 <generate_service_topics>
 801d90a:	2800      	cmp	r0, #0
 801d90c:	d047      	beq.n	801d99e <rmw_create_service+0x17a>
 801d90e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801d912:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 801d916:	a80c      	add	r0, sp, #48	@ 0x30
 801d918:	4629      	mov	r1, r5
 801d91a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801d91e:	f7f1 fc45 	bl	800f1ac <convert_qos_profile>
 801d922:	4a25      	ldr	r2, [pc, #148]	@ (801d9b8 <rmw_create_service+0x194>)
 801d924:	9400      	str	r4, [sp, #0]
 801d926:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d92a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801d92e:	a80c      	add	r0, sp, #48	@ 0x30
 801d930:	c803      	ldmia	r0, {r0, r1}
 801d932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d934:	9005      	str	r0, [sp, #20]
 801d936:	9a08      	ldr	r2, [sp, #32]
 801d938:	f8ad 1018 	strh.w	r1, [sp, #24]
 801d93c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801d940:	2306      	movs	r3, #6
 801d942:	9307      	str	r3, [sp, #28]
 801d944:	6811      	ldr	r1, [r2, #0]
 801d946:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801d94a:	693a      	ldr	r2, [r7, #16]
 801d94c:	f7f5 fdfc 	bl	8013548 <uxr_buffer_create_replier_bin>
 801d950:	4602      	mov	r2, r0
 801d952:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801d956:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801d95a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801d95e:	f7f1 fc09 	bl	800f174 <run_xrce_session>
 801d962:	b1e0      	cbz	r0, 801d99e <rmw_create_service+0x17a>
 801d964:	7a2b      	ldrb	r3, [r5, #8]
 801d966:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801d96a:	2200      	movs	r2, #0
 801d96c:	2b02      	cmp	r3, #2
 801d96e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801d972:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 801d976:	bf0c      	ite	eq
 801d978:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 801d97c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 801d980:	673a      	str	r2, [r7, #112]	@ 0x70
 801d982:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d984:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801d988:	ab0e      	add	r3, sp, #56	@ 0x38
 801d98a:	9300      	str	r3, [sp, #0]
 801d98c:	6811      	ldr	r1, [r2, #0]
 801d98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d990:	693a      	ldr	r2, [r7, #16]
 801d992:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d996:	f001 fad9 	bl	801ef4c <uxr_buffer_request_data>
 801d99a:	8338      	strh	r0, [r7, #24]
 801d99c:	e003      	b.n	801d9a6 <rmw_create_service+0x182>
 801d99e:	4630      	mov	r0, r6
 801d9a0:	f7f1 faba 	bl	800ef18 <rmw_uxrce_fini_service_memory>
 801d9a4:	2600      	movs	r6, #0
 801d9a6:	4630      	mov	r0, r6
 801d9a8:	b011      	add	sp, #68	@ 0x44
 801d9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ae:	bf00      	nop
 801d9b0:	20016cf4 	.word	0x20016cf4
 801d9b4:	08022ad4 	.word	0x08022ad4
 801d9b8:	20016fc8 	.word	0x20016fc8
 801d9bc:	20017004 	.word	0x20017004
 801d9c0:	20016f64 	.word	0x20016f64
 801d9c4:	20016f28 	.word	0x20016f28

0801d9c8 <rmw_destroy_service>:
 801d9c8:	b570      	push	{r4, r5, r6, lr}
 801d9ca:	b128      	cbz	r0, 801d9d8 <rmw_destroy_service+0x10>
 801d9cc:	4604      	mov	r4, r0
 801d9ce:	6800      	ldr	r0, [r0, #0]
 801d9d0:	460d      	mov	r5, r1
 801d9d2:	f7f1 fce9 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801d9d6:	b910      	cbnz	r0, 801d9de <rmw_destroy_service+0x16>
 801d9d8:	2401      	movs	r4, #1
 801d9da:	4620      	mov	r0, r4
 801d9dc:	bd70      	pop	{r4, r5, r6, pc}
 801d9de:	6863      	ldr	r3, [r4, #4]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d0f9      	beq.n	801d9d8 <rmw_destroy_service+0x10>
 801d9e4:	2d00      	cmp	r5, #0
 801d9e6:	d0f7      	beq.n	801d9d8 <rmw_destroy_service+0x10>
 801d9e8:	6828      	ldr	r0, [r5, #0]
 801d9ea:	f7f1 fcdd 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801d9ee:	2800      	cmp	r0, #0
 801d9f0:	d0f2      	beq.n	801d9d8 <rmw_destroy_service+0x10>
 801d9f2:	686e      	ldr	r6, [r5, #4]
 801d9f4:	2e00      	cmp	r6, #0
 801d9f6:	d0ef      	beq.n	801d9d8 <rmw_destroy_service+0x10>
 801d9f8:	6864      	ldr	r4, [r4, #4]
 801d9fa:	6932      	ldr	r2, [r6, #16]
 801d9fc:	6920      	ldr	r0, [r4, #16]
 801d9fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801da02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801da06:	6819      	ldr	r1, [r3, #0]
 801da08:	f001 fada 	bl	801efc0 <uxr_buffer_cancel_data>
 801da0c:	4602      	mov	r2, r0
 801da0e:	6920      	ldr	r0, [r4, #16]
 801da10:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801da14:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801da18:	f7f1 fbac 	bl	800f174 <run_xrce_session>
 801da1c:	6920      	ldr	r0, [r4, #16]
 801da1e:	6932      	ldr	r2, [r6, #16]
 801da20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801da24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801da28:	6819      	ldr	r1, [r3, #0]
 801da2a:	f7f5 fb8b 	bl	8013144 <uxr_buffer_delete_entity>
 801da2e:	4602      	mov	r2, r0
 801da30:	6920      	ldr	r0, [r4, #16]
 801da32:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801da36:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801da3a:	f7f1 fb9b 	bl	800f174 <run_xrce_session>
 801da3e:	2800      	cmp	r0, #0
 801da40:	4628      	mov	r0, r5
 801da42:	bf14      	ite	ne
 801da44:	2400      	movne	r4, #0
 801da46:	2402      	moveq	r4, #2
 801da48:	f7f1 fa66 	bl	800ef18 <rmw_uxrce_fini_service_memory>
 801da4c:	e7c5      	b.n	801d9da <rmw_destroy_service+0x12>
 801da4e:	bf00      	nop

0801da50 <rmw_service_response_publisher_get_actual_qos>:
 801da50:	b150      	cbz	r0, 801da68 <rmw_service_response_publisher_get_actual_qos+0x18>
 801da52:	b508      	push	{r3, lr}
 801da54:	460b      	mov	r3, r1
 801da56:	b149      	cbz	r1, 801da6c <rmw_service_response_publisher_get_actual_qos+0x1c>
 801da58:	6841      	ldr	r1, [r0, #4]
 801da5a:	2250      	movs	r2, #80	@ 0x50
 801da5c:	3120      	adds	r1, #32
 801da5e:	4618      	mov	r0, r3
 801da60:	f003 ffe7 	bl	8021a32 <memcpy>
 801da64:	2000      	movs	r0, #0
 801da66:	bd08      	pop	{r3, pc}
 801da68:	200b      	movs	r0, #11
 801da6a:	4770      	bx	lr
 801da6c:	200b      	movs	r0, #11
 801da6e:	bd08      	pop	{r3, pc}

0801da70 <rmw_service_request_subscription_get_actual_qos>:
 801da70:	b150      	cbz	r0, 801da88 <rmw_service_request_subscription_get_actual_qos+0x18>
 801da72:	b508      	push	{r3, lr}
 801da74:	460b      	mov	r3, r1
 801da76:	b149      	cbz	r1, 801da8c <rmw_service_request_subscription_get_actual_qos+0x1c>
 801da78:	6841      	ldr	r1, [r0, #4]
 801da7a:	2250      	movs	r2, #80	@ 0x50
 801da7c:	3120      	adds	r1, #32
 801da7e:	4618      	mov	r0, r3
 801da80:	f003 ffd7 	bl	8021a32 <memcpy>
 801da84:	2000      	movs	r0, #0
 801da86:	bd08      	pop	{r3, pc}
 801da88:	200b      	movs	r0, #11
 801da8a:	4770      	bx	lr
 801da8c:	200b      	movs	r0, #11
 801da8e:	bd08      	pop	{r3, pc}

0801da90 <rmw_create_subscription>:
 801da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da94:	b08d      	sub	sp, #52	@ 0x34
 801da96:	2800      	cmp	r0, #0
 801da98:	f000 80d1 	beq.w	801dc3e <rmw_create_subscription+0x1ae>
 801da9c:	460e      	mov	r6, r1
 801da9e:	2900      	cmp	r1, #0
 801daa0:	f000 80cd 	beq.w	801dc3e <rmw_create_subscription+0x1ae>
 801daa4:	4604      	mov	r4, r0
 801daa6:	6800      	ldr	r0, [r0, #0]
 801daa8:	4615      	mov	r5, r2
 801daaa:	4698      	mov	r8, r3
 801daac:	f7f1 fc7c 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801dab0:	2800      	cmp	r0, #0
 801dab2:	f000 80c4 	beq.w	801dc3e <rmw_create_subscription+0x1ae>
 801dab6:	2d00      	cmp	r5, #0
 801dab8:	f000 80c1 	beq.w	801dc3e <rmw_create_subscription+0x1ae>
 801dabc:	782b      	ldrb	r3, [r5, #0]
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	f000 80bd 	beq.w	801dc3e <rmw_create_subscription+0x1ae>
 801dac4:	f1b8 0f00 	cmp.w	r8, #0
 801dac8:	f000 80b9 	beq.w	801dc3e <rmw_create_subscription+0x1ae>
 801dacc:	485e      	ldr	r0, [pc, #376]	@ (801dc48 <rmw_create_subscription+0x1b8>)
 801dace:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801dad2:	f7ff f901 	bl	801ccd8 <get_memory>
 801dad6:	4604      	mov	r4, r0
 801dad8:	2800      	cmp	r0, #0
 801dada:	f000 80b1 	beq.w	801dc40 <rmw_create_subscription+0x1b0>
 801dade:	6887      	ldr	r7, [r0, #8]
 801dae0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801dae4:	f7ff f960 	bl	801cda8 <rmw_get_implementation_identifier>
 801dae8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 801daec:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801daee:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801daf2:	4628      	mov	r0, r5
 801daf4:	f7e2 fb84 	bl	8000200 <strlen>
 801daf8:	3001      	adds	r0, #1
 801dafa:	283c      	cmp	r0, #60	@ 0x3c
 801dafc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 801db00:	f200 8096 	bhi.w	801dc30 <rmw_create_subscription+0x1a0>
 801db04:	4a51      	ldr	r2, [pc, #324]	@ (801dc4c <rmw_create_subscription+0x1bc>)
 801db06:	462b      	mov	r3, r5
 801db08:	213c      	movs	r1, #60	@ 0x3c
 801db0a:	4650      	mov	r0, sl
 801db0c:	f003 fab4 	bl	8021078 <sniprintf>
 801db10:	4641      	mov	r1, r8
 801db12:	f8c7 9020 	str.w	r9, [r7, #32]
 801db16:	2250      	movs	r2, #80	@ 0x50
 801db18:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801db1c:	f003 ff89 	bl	8021a32 <memcpy>
 801db20:	494b      	ldr	r1, [pc, #300]	@ (801dc50 <rmw_create_subscription+0x1c0>)
 801db22:	4630      	mov	r0, r6
 801db24:	f7f1 fc4e 	bl	800f3c4 <get_message_typesupport_handle>
 801db28:	2800      	cmp	r0, #0
 801db2a:	f000 8081 	beq.w	801dc30 <rmw_create_subscription+0x1a0>
 801db2e:	6842      	ldr	r2, [r0, #4]
 801db30:	61ba      	str	r2, [r7, #24]
 801db32:	2a00      	cmp	r2, #0
 801db34:	d07c      	beq.n	801dc30 <rmw_create_subscription+0x1a0>
 801db36:	4629      	mov	r1, r5
 801db38:	4643      	mov	r3, r8
 801db3a:	4648      	mov	r0, r9
 801db3c:	f7ff fb9a 	bl	801d274 <create_topic>
 801db40:	61f8      	str	r0, [r7, #28]
 801db42:	2800      	cmp	r0, #0
 801db44:	d078      	beq.n	801dc38 <rmw_create_subscription+0x1a8>
 801db46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801db4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801db4e:	2104      	movs	r1, #4
 801db50:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801db54:	1c42      	adds	r2, r0, #1
 801db56:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801db5a:	f7f5 fd2f 	bl	80135bc <uxr_object_id>
 801db5e:	6138      	str	r0, [r7, #16]
 801db60:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801db64:	2506      	movs	r5, #6
 801db66:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801db6a:	9500      	str	r5, [sp, #0]
 801db6c:	6819      	ldr	r1, [r3, #0]
 801db6e:	693a      	ldr	r2, [r7, #16]
 801db70:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801db74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801db78:	f7f5 fbc8 	bl	801330c <uxr_buffer_create_subscriber_bin>
 801db7c:	4602      	mov	r2, r0
 801db7e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801db82:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801db86:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801db8a:	f7f1 faf3 	bl	800f174 <run_xrce_session>
 801db8e:	2800      	cmp	r0, #0
 801db90:	d04e      	beq.n	801dc30 <rmw_create_subscription+0x1a0>
 801db92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801db96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801db9a:	4629      	mov	r1, r5
 801db9c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801dba0:	1c42      	adds	r2, r0, #1
 801dba2:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801dba6:	f7f5 fd09 	bl	80135bc <uxr_object_id>
 801dbaa:	ae08      	add	r6, sp, #32
 801dbac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801dbb0:	69fb      	ldr	r3, [r7, #28]
 801dbb2:	6178      	str	r0, [r7, #20]
 801dbb4:	4641      	mov	r1, r8
 801dbb6:	4630      	mov	r0, r6
 801dbb8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801dbbc:	9305      	str	r3, [sp, #20]
 801dbbe:	f7f1 faf5 	bl	800f1ac <convert_qos_profile>
 801dbc2:	9503      	str	r5, [sp, #12]
 801dbc4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801dbc8:	9b05      	ldr	r3, [sp, #20]
 801dbca:	9001      	str	r0, [sp, #4]
 801dbcc:	f8ad 1008 	strh.w	r1, [sp, #8]
 801dbd0:	691b      	ldr	r3, [r3, #16]
 801dbd2:	9300      	str	r3, [sp, #0]
 801dbd4:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801dbd8:	f8db 1000 	ldr.w	r1, [fp]
 801dbdc:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801dbe0:	f7f5 fc3a 	bl	8013458 <uxr_buffer_create_datareader_bin>
 801dbe4:	4602      	mov	r2, r0
 801dbe6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801dbea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801dbee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801dbf2:	f7f1 fabf 	bl	800f174 <run_xrce_session>
 801dbf6:	b1d8      	cbz	r0, 801dc30 <rmw_create_subscription+0x1a0>
 801dbf8:	f898 3008 	ldrb.w	r3, [r8, #8]
 801dbfc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801dc00:	2b02      	cmp	r3, #2
 801dc02:	bf0c      	ite	eq
 801dc04:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801dc08:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801dc0c:	9307      	str	r3, [sp, #28]
 801dc0e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801dc12:	2200      	movs	r2, #0
 801dc14:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801dc18:	ab0a      	add	r3, sp, #40	@ 0x28
 801dc1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801dc1e:	9300      	str	r3, [sp, #0]
 801dc20:	697a      	ldr	r2, [r7, #20]
 801dc22:	9b07      	ldr	r3, [sp, #28]
 801dc24:	6809      	ldr	r1, [r1, #0]
 801dc26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801dc2a:	f001 f98f 	bl	801ef4c <uxr_buffer_request_data>
 801dc2e:	e007      	b.n	801dc40 <rmw_create_subscription+0x1b0>
 801dc30:	69f8      	ldr	r0, [r7, #28]
 801dc32:	b108      	cbz	r0, 801dc38 <rmw_create_subscription+0x1a8>
 801dc34:	f7f1 f99c 	bl	800ef70 <rmw_uxrce_fini_topic_memory>
 801dc38:	4620      	mov	r0, r4
 801dc3a:	f7f1 f957 	bl	800eeec <rmw_uxrce_fini_subscription_memory>
 801dc3e:	2400      	movs	r4, #0
 801dc40:	4620      	mov	r0, r4
 801dc42:	b00d      	add	sp, #52	@ 0x34
 801dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc48:	20016d24 	.word	0x20016d24
 801dc4c:	0802343c 	.word	0x0802343c
 801dc50:	08022ad4 	.word	0x08022ad4

0801dc54 <rmw_subscription_get_actual_qos>:
 801dc54:	b150      	cbz	r0, 801dc6c <rmw_subscription_get_actual_qos+0x18>
 801dc56:	b508      	push	{r3, lr}
 801dc58:	460b      	mov	r3, r1
 801dc5a:	b149      	cbz	r1, 801dc70 <rmw_subscription_get_actual_qos+0x1c>
 801dc5c:	6841      	ldr	r1, [r0, #4]
 801dc5e:	2250      	movs	r2, #80	@ 0x50
 801dc60:	3128      	adds	r1, #40	@ 0x28
 801dc62:	4618      	mov	r0, r3
 801dc64:	f003 fee5 	bl	8021a32 <memcpy>
 801dc68:	2000      	movs	r0, #0
 801dc6a:	bd08      	pop	{r3, pc}
 801dc6c:	200b      	movs	r0, #11
 801dc6e:	4770      	bx	lr
 801dc70:	200b      	movs	r0, #11
 801dc72:	bd08      	pop	{r3, pc}

0801dc74 <rmw_destroy_subscription>:
 801dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc76:	b128      	cbz	r0, 801dc84 <rmw_destroy_subscription+0x10>
 801dc78:	4604      	mov	r4, r0
 801dc7a:	6800      	ldr	r0, [r0, #0]
 801dc7c:	460d      	mov	r5, r1
 801dc7e:	f7f1 fb93 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801dc82:	b910      	cbnz	r0, 801dc8a <rmw_destroy_subscription+0x16>
 801dc84:	2401      	movs	r4, #1
 801dc86:	4620      	mov	r0, r4
 801dc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc8a:	6863      	ldr	r3, [r4, #4]
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d0f9      	beq.n	801dc84 <rmw_destroy_subscription+0x10>
 801dc90:	2d00      	cmp	r5, #0
 801dc92:	d0f7      	beq.n	801dc84 <rmw_destroy_subscription+0x10>
 801dc94:	6828      	ldr	r0, [r5, #0]
 801dc96:	f7f1 fb87 	bl	800f3a8 <is_uxrce_rmw_identifier_valid>
 801dc9a:	2800      	cmp	r0, #0
 801dc9c:	d0f2      	beq.n	801dc84 <rmw_destroy_subscription+0x10>
 801dc9e:	686c      	ldr	r4, [r5, #4]
 801dca0:	2c00      	cmp	r4, #0
 801dca2:	d0ef      	beq.n	801dc84 <rmw_destroy_subscription+0x10>
 801dca4:	6a26      	ldr	r6, [r4, #32]
 801dca6:	6962      	ldr	r2, [r4, #20]
 801dca8:	6930      	ldr	r0, [r6, #16]
 801dcaa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801dcae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801dcb2:	6819      	ldr	r1, [r3, #0]
 801dcb4:	f001 f984 	bl	801efc0 <uxr_buffer_cancel_data>
 801dcb8:	4602      	mov	r2, r0
 801dcba:	6930      	ldr	r0, [r6, #16]
 801dcbc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801dcc0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801dcc4:	f7f1 fa56 	bl	800f174 <run_xrce_session>
 801dcc8:	69e0      	ldr	r0, [r4, #28]
 801dcca:	f7ff fb23 	bl	801d314 <destroy_topic>
 801dcce:	6a23      	ldr	r3, [r4, #32]
 801dcd0:	6962      	ldr	r2, [r4, #20]
 801dcd2:	6918      	ldr	r0, [r3, #16]
 801dcd4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801dcd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801dcdc:	6819      	ldr	r1, [r3, #0]
 801dcde:	f7f5 fa31 	bl	8013144 <uxr_buffer_delete_entity>
 801dce2:	6a23      	ldr	r3, [r4, #32]
 801dce4:	6922      	ldr	r2, [r4, #16]
 801dce6:	691b      	ldr	r3, [r3, #16]
 801dce8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801dcec:	4604      	mov	r4, r0
 801dcee:	6809      	ldr	r1, [r1, #0]
 801dcf0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801dcf4:	f7f5 fa26 	bl	8013144 <uxr_buffer_delete_entity>
 801dcf8:	6937      	ldr	r7, [r6, #16]
 801dcfa:	4622      	mov	r2, r4
 801dcfc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801dd00:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801dd04:	4604      	mov	r4, r0
 801dd06:	4638      	mov	r0, r7
 801dd08:	f7f1 fa34 	bl	800f174 <run_xrce_session>
 801dd0c:	6936      	ldr	r6, [r6, #16]
 801dd0e:	4622      	mov	r2, r4
 801dd10:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801dd14:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801dd18:	4604      	mov	r4, r0
 801dd1a:	4630      	mov	r0, r6
 801dd1c:	f7f1 fa2a 	bl	800f174 <run_xrce_session>
 801dd20:	b12c      	cbz	r4, 801dd2e <rmw_destroy_subscription+0xba>
 801dd22:	b120      	cbz	r0, 801dd2e <rmw_destroy_subscription+0xba>
 801dd24:	2400      	movs	r4, #0
 801dd26:	4628      	mov	r0, r5
 801dd28:	f7f1 f8e0 	bl	800eeec <rmw_uxrce_fini_subscription_memory>
 801dd2c:	e7ab      	b.n	801dc86 <rmw_destroy_subscription+0x12>
 801dd2e:	2402      	movs	r4, #2
 801dd30:	e7f9      	b.n	801dd26 <rmw_destroy_subscription+0xb2>
 801dd32:	bf00      	nop

0801dd34 <rmw_take_with_info>:
 801dd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd36:	4604      	mov	r4, r0
 801dd38:	6800      	ldr	r0, [r0, #0]
 801dd3a:	b089      	sub	sp, #36	@ 0x24
 801dd3c:	460f      	mov	r7, r1
 801dd3e:	4615      	mov	r5, r2
 801dd40:	b128      	cbz	r0, 801dd4e <rmw_take_with_info+0x1a>
 801dd42:	4b24      	ldr	r3, [pc, #144]	@ (801ddd4 <rmw_take_with_info+0xa0>)
 801dd44:	6819      	ldr	r1, [r3, #0]
 801dd46:	f7e2 fa63 	bl	8000210 <strcmp>
 801dd4a:	2800      	cmp	r0, #0
 801dd4c:	d13e      	bne.n	801ddcc <rmw_take_with_info+0x98>
 801dd4e:	b305      	cbz	r5, 801dd92 <rmw_take_with_info+0x5e>
 801dd50:	6864      	ldr	r4, [r4, #4]
 801dd52:	2300      	movs	r3, #0
 801dd54:	702b      	strb	r3, [r5, #0]
 801dd56:	f7f1 f98f 	bl	800f078 <rmw_uxrce_clean_expired_static_input_buffer>
 801dd5a:	4620      	mov	r0, r4
 801dd5c:	f7f1 f964 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801dd60:	4606      	mov	r6, r0
 801dd62:	b1f0      	cbz	r0, 801dda2 <rmw_take_with_info+0x6e>
 801dd64:	6881      	ldr	r1, [r0, #8]
 801dd66:	4668      	mov	r0, sp
 801dd68:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801dd6c:	3110      	adds	r1, #16
 801dd6e:	f7f5 f89d 	bl	8012eac <ucdr_init_buffer>
 801dd72:	69a3      	ldr	r3, [r4, #24]
 801dd74:	4639      	mov	r1, r7
 801dd76:	68db      	ldr	r3, [r3, #12]
 801dd78:	4668      	mov	r0, sp
 801dd7a:	4798      	blx	r3
 801dd7c:	4631      	mov	r1, r6
 801dd7e:	4604      	mov	r4, r0
 801dd80:	4815      	ldr	r0, [pc, #84]	@ (801ddd8 <rmw_take_with_info+0xa4>)
 801dd82:	f7fe ffb9 	bl	801ccf8 <put_memory>
 801dd86:	702c      	strb	r4, [r5, #0]
 801dd88:	f084 0001 	eor.w	r0, r4, #1
 801dd8c:	b2c0      	uxtb	r0, r0
 801dd8e:	b009      	add	sp, #36	@ 0x24
 801dd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd92:	6864      	ldr	r4, [r4, #4]
 801dd94:	f7f1 f970 	bl	800f078 <rmw_uxrce_clean_expired_static_input_buffer>
 801dd98:	4620      	mov	r0, r4
 801dd9a:	f7f1 f945 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801dd9e:	4605      	mov	r5, r0
 801dda0:	b910      	cbnz	r0, 801dda8 <rmw_take_with_info+0x74>
 801dda2:	2001      	movs	r0, #1
 801dda4:	b009      	add	sp, #36	@ 0x24
 801dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dda8:	68a9      	ldr	r1, [r5, #8]
 801ddaa:	4668      	mov	r0, sp
 801ddac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801ddb0:	3110      	adds	r1, #16
 801ddb2:	f7f5 f87b 	bl	8012eac <ucdr_init_buffer>
 801ddb6:	69a3      	ldr	r3, [r4, #24]
 801ddb8:	4639      	mov	r1, r7
 801ddba:	68db      	ldr	r3, [r3, #12]
 801ddbc:	4668      	mov	r0, sp
 801ddbe:	4798      	blx	r3
 801ddc0:	4629      	mov	r1, r5
 801ddc2:	4604      	mov	r4, r0
 801ddc4:	4804      	ldr	r0, [pc, #16]	@ (801ddd8 <rmw_take_with_info+0xa4>)
 801ddc6:	f7fe ff97 	bl	801ccf8 <put_memory>
 801ddca:	e7dd      	b.n	801dd88 <rmw_take_with_info+0x54>
 801ddcc:	200c      	movs	r0, #12
 801ddce:	b009      	add	sp, #36	@ 0x24
 801ddd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ddd2:	bf00      	nop
 801ddd4:	08025754 	.word	0x08025754
 801ddd8:	20016d14 	.word	0x20016d14

0801dddc <rmw_uxrce_transport_init>:
 801dddc:	b508      	push	{r3, lr}
 801ddde:	b108      	cbz	r0, 801dde4 <rmw_uxrce_transport_init+0x8>
 801dde0:	f100 0210 	add.w	r2, r0, #16
 801dde4:	b139      	cbz	r1, 801ddf6 <rmw_uxrce_transport_init+0x1a>
 801dde6:	6949      	ldr	r1, [r1, #20]
 801dde8:	4610      	mov	r0, r2
 801ddea:	f000 fb2f 	bl	801e44c <uxr_init_custom_transport>
 801ddee:	f080 0001 	eor.w	r0, r0, #1
 801ddf2:	b2c0      	uxtb	r0, r0
 801ddf4:	bd08      	pop	{r3, pc}
 801ddf6:	4b04      	ldr	r3, [pc, #16]	@ (801de08 <rmw_uxrce_transport_init+0x2c>)
 801ddf8:	4610      	mov	r0, r2
 801ddfa:	6859      	ldr	r1, [r3, #4]
 801ddfc:	f000 fb26 	bl	801e44c <uxr_init_custom_transport>
 801de00:	f080 0001 	eor.w	r0, r0, #1
 801de04:	b2c0      	uxtb	r0, r0
 801de06:	bd08      	pop	{r3, pc}
 801de08:	20011f3c 	.word	0x20011f3c

0801de0c <rmw_wait>:
 801de0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de10:	b089      	sub	sp, #36	@ 0x24
 801de12:	4605      	mov	r5, r0
 801de14:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801de16:	460e      	mov	r6, r1
 801de18:	4698      	mov	r8, r3
 801de1a:	4691      	mov	r9, r2
 801de1c:	2a00      	cmp	r2, #0
 801de1e:	f000 810a 	beq.w	801e036 <rmw_wait+0x22a>
 801de22:	b16c      	cbz	r4, 801de40 <rmw_wait+0x34>
 801de24:	4bae      	ldr	r3, [pc, #696]	@ (801e0e0 <rmw_wait+0x2d4>)
 801de26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801de28:	af04      	add	r7, sp, #16
 801de2a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801de2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801de32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801de36:	f7fe fd83 	bl	801c940 <rmw_time_equal>
 801de3a:	2800      	cmp	r0, #0
 801de3c:	f000 8127 	beq.w	801e08e <rmw_wait+0x282>
 801de40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801de44:	f7f1 f918 	bl	800f078 <rmw_uxrce_clean_expired_static_input_buffer>
 801de48:	4ba6      	ldr	r3, [pc, #664]	@ (801e0e4 <rmw_wait+0x2d8>)
 801de4a:	681c      	ldr	r4, [r3, #0]
 801de4c:	b14c      	cbz	r4, 801de62 <rmw_wait+0x56>
 801de4e:	4623      	mov	r3, r4
 801de50:	2100      	movs	r1, #0
 801de52:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801de56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801de5a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d1f7      	bne.n	801de52 <rmw_wait+0x46>
 801de62:	f1b9 0f00 	cmp.w	r9, #0
 801de66:	d011      	beq.n	801de8c <rmw_wait+0x80>
 801de68:	f8d9 1000 	ldr.w	r1, [r9]
 801de6c:	b171      	cbz	r1, 801de8c <rmw_wait+0x80>
 801de6e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801de72:	2300      	movs	r3, #0
 801de74:	2001      	movs	r0, #1
 801de76:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801de7a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801de7c:	6912      	ldr	r2, [r2, #16]
 801de7e:	3301      	adds	r3, #1
 801de80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801de84:	4299      	cmp	r1, r3
 801de86:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801de8a:	d1f4      	bne.n	801de76 <rmw_wait+0x6a>
 801de8c:	f1b8 0f00 	cmp.w	r8, #0
 801de90:	d011      	beq.n	801deb6 <rmw_wait+0xaa>
 801de92:	f8d8 1000 	ldr.w	r1, [r8]
 801de96:	b171      	cbz	r1, 801deb6 <rmw_wait+0xaa>
 801de98:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801de9c:	2300      	movs	r3, #0
 801de9e:	2001      	movs	r0, #1
 801dea0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801dea4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801dea6:	6912      	ldr	r2, [r2, #16]
 801dea8:	3301      	adds	r3, #1
 801deaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801deae:	4299      	cmp	r1, r3
 801deb0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801deb4:	d1f4      	bne.n	801dea0 <rmw_wait+0x94>
 801deb6:	b185      	cbz	r5, 801deda <rmw_wait+0xce>
 801deb8:	6829      	ldr	r1, [r5, #0]
 801deba:	b171      	cbz	r1, 801deda <rmw_wait+0xce>
 801debc:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801dec0:	2300      	movs	r3, #0
 801dec2:	2001      	movs	r0, #1
 801dec4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801dec8:	6a12      	ldr	r2, [r2, #32]
 801deca:	6912      	ldr	r2, [r2, #16]
 801decc:	3301      	adds	r3, #1
 801dece:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ded2:	4299      	cmp	r1, r3
 801ded4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ded8:	d1f4      	bne.n	801dec4 <rmw_wait+0xb8>
 801deda:	b34c      	cbz	r4, 801df30 <rmw_wait+0x124>
 801dedc:	4622      	mov	r2, r4
 801dede:	2300      	movs	r3, #0
 801dee0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801dee4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801dee8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801deec:	440b      	add	r3, r1
 801deee:	b2db      	uxtb	r3, r3
 801def0:	2a00      	cmp	r2, #0
 801def2:	d1f5      	bne.n	801dee0 <rmw_wait+0xd4>
 801def4:	2b00      	cmp	r3, #0
 801def6:	f000 8084 	beq.w	801e002 <rmw_wait+0x1f6>
 801defa:	1c7a      	adds	r2, r7, #1
 801defc:	d00d      	beq.n	801df1a <rmw_wait+0x10e>
 801defe:	ee07 7a90 	vmov	s15, r7
 801df02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801df06:	ee07 3a90 	vmov	s15, r3
 801df0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df12:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801df16:	ee17 7a90 	vmov	r7, s15
 801df1a:	68a0      	ldr	r0, [r4, #8]
 801df1c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801df20:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801df24:	2b00      	cmp	r3, #0
 801df26:	f040 8090 	bne.w	801e04a <rmw_wait+0x23e>
 801df2a:	6864      	ldr	r4, [r4, #4]
 801df2c:	2c00      	cmp	r4, #0
 801df2e:	d1f4      	bne.n	801df1a <rmw_wait+0x10e>
 801df30:	f1b9 0f00 	cmp.w	r9, #0
 801df34:	f000 80bc 	beq.w	801e0b0 <rmw_wait+0x2a4>
 801df38:	f8d9 7000 	ldr.w	r7, [r9]
 801df3c:	2f00      	cmp	r7, #0
 801df3e:	f000 808e 	beq.w	801e05e <rmw_wait+0x252>
 801df42:	2400      	movs	r4, #0
 801df44:	4627      	mov	r7, r4
 801df46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801df4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801df4e:	f7f1 f86b 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801df52:	2800      	cmp	r0, #0
 801df54:	d05f      	beq.n	801e016 <rmw_wait+0x20a>
 801df56:	f8d9 3000 	ldr.w	r3, [r9]
 801df5a:	3401      	adds	r4, #1
 801df5c:	42a3      	cmp	r3, r4
 801df5e:	f04f 0701 	mov.w	r7, #1
 801df62:	d8f0      	bhi.n	801df46 <rmw_wait+0x13a>
 801df64:	f1b8 0f00 	cmp.w	r8, #0
 801df68:	d012      	beq.n	801df90 <rmw_wait+0x184>
 801df6a:	f8d8 3000 	ldr.w	r3, [r8]
 801df6e:	b17b      	cbz	r3, 801df90 <rmw_wait+0x184>
 801df70:	2400      	movs	r4, #0
 801df72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801df76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801df7a:	f7f1 f855 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801df7e:	2800      	cmp	r0, #0
 801df80:	d051      	beq.n	801e026 <rmw_wait+0x21a>
 801df82:	f8d8 3000 	ldr.w	r3, [r8]
 801df86:	3401      	adds	r4, #1
 801df88:	42a3      	cmp	r3, r4
 801df8a:	f04f 0701 	mov.w	r7, #1
 801df8e:	d8f0      	bhi.n	801df72 <rmw_wait+0x166>
 801df90:	b1dd      	cbz	r5, 801dfca <rmw_wait+0x1be>
 801df92:	682b      	ldr	r3, [r5, #0]
 801df94:	b1cb      	cbz	r3, 801dfca <rmw_wait+0x1be>
 801df96:	2400      	movs	r4, #0
 801df98:	686b      	ldr	r3, [r5, #4]
 801df9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801df9e:	f7f1 f843 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801dfa2:	b158      	cbz	r0, 801dfbc <rmw_wait+0x1b0>
 801dfa4:	682b      	ldr	r3, [r5, #0]
 801dfa6:	3401      	adds	r4, #1
 801dfa8:	42a3      	cmp	r3, r4
 801dfaa:	d969      	bls.n	801e080 <rmw_wait+0x274>
 801dfac:	686b      	ldr	r3, [r5, #4]
 801dfae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801dfb2:	2701      	movs	r7, #1
 801dfb4:	f7f1 f838 	bl	800f028 <rmw_uxrce_find_static_input_buffer_by_owner>
 801dfb8:	2800      	cmp	r0, #0
 801dfba:	d1f3      	bne.n	801dfa4 <rmw_wait+0x198>
 801dfbc:	e9d5 3200 	ldrd	r3, r2, [r5]
 801dfc0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801dfc4:	3401      	adds	r4, #1
 801dfc6:	42a3      	cmp	r3, r4
 801dfc8:	d8e6      	bhi.n	801df98 <rmw_wait+0x18c>
 801dfca:	b1a6      	cbz	r6, 801dff6 <rmw_wait+0x1ea>
 801dfcc:	6834      	ldr	r4, [r6, #0]
 801dfce:	b194      	cbz	r4, 801dff6 <rmw_wait+0x1ea>
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	461d      	mov	r5, r3
 801dfd4:	e004      	b.n	801dfe0 <rmw_wait+0x1d4>
 801dfd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801dfda:	3301      	adds	r3, #1
 801dfdc:	42a3      	cmp	r3, r4
 801dfde:	d00a      	beq.n	801dff6 <rmw_wait+0x1ea>
 801dfe0:	6870      	ldr	r0, [r6, #4]
 801dfe2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801dfe6:	7c0a      	ldrb	r2, [r1, #16]
 801dfe8:	2a00      	cmp	r2, #0
 801dfea:	d0f4      	beq.n	801dfd6 <rmw_wait+0x1ca>
 801dfec:	3301      	adds	r3, #1
 801dfee:	42a3      	cmp	r3, r4
 801dff0:	740d      	strb	r5, [r1, #16]
 801dff2:	4617      	mov	r7, r2
 801dff4:	d1f4      	bne.n	801dfe0 <rmw_wait+0x1d4>
 801dff6:	2f00      	cmp	r7, #0
 801dff8:	d03e      	beq.n	801e078 <rmw_wait+0x26c>
 801dffa:	2000      	movs	r0, #0
 801dffc:	b009      	add	sp, #36	@ 0x24
 801dffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e002:	68a0      	ldr	r0, [r4, #8]
 801e004:	2100      	movs	r1, #0
 801e006:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e00a:	f7f5 ffab 	bl	8013f64 <uxr_run_session_timeout>
 801e00e:	6864      	ldr	r4, [r4, #4]
 801e010:	2c00      	cmp	r4, #0
 801e012:	d1f6      	bne.n	801e002 <rmw_wait+0x1f6>
 801e014:	e78c      	b.n	801df30 <rmw_wait+0x124>
 801e016:	e9d9 3200 	ldrd	r3, r2, [r9]
 801e01a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e01e:	3401      	adds	r4, #1
 801e020:	42a3      	cmp	r3, r4
 801e022:	d890      	bhi.n	801df46 <rmw_wait+0x13a>
 801e024:	e79e      	b.n	801df64 <rmw_wait+0x158>
 801e026:	e9d8 3200 	ldrd	r3, r2, [r8]
 801e02a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801e02e:	3401      	adds	r4, #1
 801e030:	429c      	cmp	r4, r3
 801e032:	d39e      	bcc.n	801df72 <rmw_wait+0x166>
 801e034:	e7ac      	b.n	801df90 <rmw_wait+0x184>
 801e036:	2b00      	cmp	r3, #0
 801e038:	f47f aef3 	bne.w	801de22 <rmw_wait+0x16>
 801e03c:	2800      	cmp	r0, #0
 801e03e:	f47f aef0 	bne.w	801de22 <rmw_wait+0x16>
 801e042:	2900      	cmp	r1, #0
 801e044:	f47f aeed 	bne.w	801de22 <rmw_wait+0x16>
 801e048:	e7d7      	b.n	801dffa <rmw_wait+0x1ee>
 801e04a:	4639      	mov	r1, r7
 801e04c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e050:	f7f5 ffa2 	bl	8013f98 <uxr_run_session_until_data>
 801e054:	6864      	ldr	r4, [r4, #4]
 801e056:	2c00      	cmp	r4, #0
 801e058:	f47f af5f 	bne.w	801df1a <rmw_wait+0x10e>
 801e05c:	e768      	b.n	801df30 <rmw_wait+0x124>
 801e05e:	f1b8 0f00 	cmp.w	r8, #0
 801e062:	d032      	beq.n	801e0ca <rmw_wait+0x2be>
 801e064:	f8d8 3000 	ldr.w	r3, [r8]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d181      	bne.n	801df70 <rmw_wait+0x164>
 801e06c:	461f      	mov	r7, r3
 801e06e:	2d00      	cmp	r5, #0
 801e070:	d18f      	bne.n	801df92 <rmw_wait+0x186>
 801e072:	462f      	mov	r7, r5
 801e074:	2e00      	cmp	r6, #0
 801e076:	d1a9      	bne.n	801dfcc <rmw_wait+0x1c0>
 801e078:	2002      	movs	r0, #2
 801e07a:	b009      	add	sp, #36	@ 0x24
 801e07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e080:	2e00      	cmp	r6, #0
 801e082:	d0ba      	beq.n	801dffa <rmw_wait+0x1ee>
 801e084:	6834      	ldr	r4, [r6, #0]
 801e086:	2701      	movs	r7, #1
 801e088:	2c00      	cmp	r4, #0
 801e08a:	d1a1      	bne.n	801dfd0 <rmw_wait+0x1c4>
 801e08c:	e7b5      	b.n	801dffa <rmw_wait+0x1ee>
 801e08e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801e092:	f7fe fca9 	bl	801c9e8 <rmw_time_total_nsec>
 801e096:	2300      	movs	r3, #0
 801e098:	4a13      	ldr	r2, [pc, #76]	@ (801e0e8 <rmw_wait+0x2dc>)
 801e09a:	f7e2 fe0f 	bl	8000cbc <__aeabi_uldivmod>
 801e09e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801e0a2:	f171 0300 	sbcs.w	r3, r1, #0
 801e0a6:	4607      	mov	r7, r0
 801e0a8:	bfa8      	it	ge
 801e0aa:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801e0ae:	e6c9      	b.n	801de44 <rmw_wait+0x38>
 801e0b0:	f1b8 0f00 	cmp.w	r8, #0
 801e0b4:	d009      	beq.n	801e0ca <rmw_wait+0x2be>
 801e0b6:	f8d8 3000 	ldr.w	r3, [r8]
 801e0ba:	464f      	mov	r7, r9
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	f47f af57 	bne.w	801df70 <rmw_wait+0x164>
 801e0c2:	2d00      	cmp	r5, #0
 801e0c4:	f47f af65 	bne.w	801df92 <rmw_wait+0x186>
 801e0c8:	e7d3      	b.n	801e072 <rmw_wait+0x266>
 801e0ca:	b17d      	cbz	r5, 801e0ec <rmw_wait+0x2e0>
 801e0cc:	682b      	ldr	r3, [r5, #0]
 801e0ce:	4647      	mov	r7, r8
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	f47f af60 	bne.w	801df96 <rmw_wait+0x18a>
 801e0d6:	2e00      	cmp	r6, #0
 801e0d8:	f47f af78 	bne.w	801dfcc <rmw_wait+0x1c0>
 801e0dc:	e7cc      	b.n	801e078 <rmw_wait+0x26c>
 801e0de:	bf00      	nop
 801e0e0:	08022918 	.word	0x08022918
 801e0e4:	20016d04 	.word	0x20016d04
 801e0e8:	000f4240 	.word	0x000f4240
 801e0ec:	2e00      	cmp	r6, #0
 801e0ee:	d0c3      	beq.n	801e078 <rmw_wait+0x26c>
 801e0f0:	6834      	ldr	r4, [r6, #0]
 801e0f2:	462f      	mov	r7, r5
 801e0f4:	2c00      	cmp	r4, #0
 801e0f6:	f47f af6b 	bne.w	801dfd0 <rmw_wait+0x1c4>
 801e0fa:	e7bd      	b.n	801e078 <rmw_wait+0x26c>

0801e0fc <rmw_create_wait_set>:
 801e0fc:	b508      	push	{r3, lr}
 801e0fe:	4803      	ldr	r0, [pc, #12]	@ (801e10c <rmw_create_wait_set+0x10>)
 801e100:	f7fe fdea 	bl	801ccd8 <get_memory>
 801e104:	b108      	cbz	r0, 801e10a <rmw_create_wait_set+0xe>
 801e106:	6880      	ldr	r0, [r0, #8]
 801e108:	3010      	adds	r0, #16
 801e10a:	bd08      	pop	{r3, pc}
 801e10c:	20016d44 	.word	0x20016d44

0801e110 <rmw_destroy_wait_set>:
 801e110:	b508      	push	{r3, lr}
 801e112:	4b08      	ldr	r3, [pc, #32]	@ (801e134 <rmw_destroy_wait_set+0x24>)
 801e114:	6819      	ldr	r1, [r3, #0]
 801e116:	b911      	cbnz	r1, 801e11e <rmw_destroy_wait_set+0xe>
 801e118:	e00a      	b.n	801e130 <rmw_destroy_wait_set+0x20>
 801e11a:	6849      	ldr	r1, [r1, #4]
 801e11c:	b141      	cbz	r1, 801e130 <rmw_destroy_wait_set+0x20>
 801e11e:	688b      	ldr	r3, [r1, #8]
 801e120:	3310      	adds	r3, #16
 801e122:	4298      	cmp	r0, r3
 801e124:	d1f9      	bne.n	801e11a <rmw_destroy_wait_set+0xa>
 801e126:	4803      	ldr	r0, [pc, #12]	@ (801e134 <rmw_destroy_wait_set+0x24>)
 801e128:	f7fe fde6 	bl	801ccf8 <put_memory>
 801e12c:	2000      	movs	r0, #0
 801e12e:	bd08      	pop	{r3, pc}
 801e130:	2001      	movs	r0, #1
 801e132:	bd08      	pop	{r3, pc}
 801e134:	20016d44 	.word	0x20016d44

0801e138 <rmw_uros_epoch_nanos>:
 801e138:	4b05      	ldr	r3, [pc, #20]	@ (801e150 <rmw_uros_epoch_nanos+0x18>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	b123      	cbz	r3, 801e148 <rmw_uros_epoch_nanos+0x10>
 801e13e:	6898      	ldr	r0, [r3, #8]
 801e140:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801e144:	f7f5 bb7e 	b.w	8013844 <uxr_epoch_nanos>
 801e148:	2000      	movs	r0, #0
 801e14a:	2100      	movs	r1, #0
 801e14c:	4770      	bx	lr
 801e14e:	bf00      	nop
 801e150:	20016d04 	.word	0x20016d04

0801e154 <sensor_msgs__msg__Imu__init>:
 801e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e158:	4605      	mov	r5, r0
 801e15a:	b3c0      	cbz	r0, 801e1ce <sensor_msgs__msg__Imu__init+0x7a>
 801e15c:	f000 f864 	bl	801e228 <std_msgs__msg__Header__init>
 801e160:	4604      	mov	r4, r0
 801e162:	b310      	cbz	r0, 801e1aa <sensor_msgs__msg__Imu__init+0x56>
 801e164:	f105 0618 	add.w	r6, r5, #24
 801e168:	4630      	mov	r0, r6
 801e16a:	f000 f8b1 	bl	801e2d0 <geometry_msgs__msg__Quaternion__init>
 801e16e:	4604      	mov	r4, r0
 801e170:	2800      	cmp	r0, #0
 801e172:	d040      	beq.n	801e1f6 <sensor_msgs__msg__Imu__init+0xa2>
 801e174:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801e178:	4638      	mov	r0, r7
 801e17a:	f000 f8bf 	bl	801e2fc <geometry_msgs__msg__Vector3__init>
 801e17e:	4604      	mov	r4, r0
 801e180:	b348      	cbz	r0, 801e1d6 <sensor_msgs__msg__Imu__init+0x82>
 801e182:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801e186:	4640      	mov	r0, r8
 801e188:	f000 f8b8 	bl	801e2fc <geometry_msgs__msg__Vector3__init>
 801e18c:	4604      	mov	r4, r0
 801e18e:	b9d8      	cbnz	r0, 801e1c8 <sensor_msgs__msg__Imu__init+0x74>
 801e190:	4628      	mov	r0, r5
 801e192:	f000 f86d 	bl	801e270 <std_msgs__msg__Header__fini>
 801e196:	4630      	mov	r0, r6
 801e198:	f000 f8ae 	bl	801e2f8 <geometry_msgs__msg__Quaternion__fini>
 801e19c:	4638      	mov	r0, r7
 801e19e:	f000 f8b1 	bl	801e304 <geometry_msgs__msg__Vector3__fini>
 801e1a2:	4640      	mov	r0, r8
 801e1a4:	f000 f8ae 	bl	801e304 <geometry_msgs__msg__Vector3__fini>
 801e1a8:	e00e      	b.n	801e1c8 <sensor_msgs__msg__Imu__init+0x74>
 801e1aa:	4628      	mov	r0, r5
 801e1ac:	f000 f860 	bl	801e270 <std_msgs__msg__Header__fini>
 801e1b0:	f105 0018 	add.w	r0, r5, #24
 801e1b4:	f000 f8a0 	bl	801e2f8 <geometry_msgs__msg__Quaternion__fini>
 801e1b8:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 801e1bc:	f000 f8a2 	bl	801e304 <geometry_msgs__msg__Vector3__fini>
 801e1c0:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801e1c4:	f000 f89e 	bl	801e304 <geometry_msgs__msg__Vector3__fini>
 801e1c8:	4620      	mov	r0, r4
 801e1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1ce:	4604      	mov	r4, r0
 801e1d0:	4620      	mov	r0, r4
 801e1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1d6:	4628      	mov	r0, r5
 801e1d8:	f000 f84a 	bl	801e270 <std_msgs__msg__Header__fini>
 801e1dc:	4630      	mov	r0, r6
 801e1de:	f000 f88b 	bl	801e2f8 <geometry_msgs__msg__Quaternion__fini>
 801e1e2:	4638      	mov	r0, r7
 801e1e4:	f000 f88e 	bl	801e304 <geometry_msgs__msg__Vector3__fini>
 801e1e8:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801e1ec:	f000 f88a 	bl	801e304 <geometry_msgs__msg__Vector3__fini>
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1f6:	4628      	mov	r0, r5
 801e1f8:	f000 f83a 	bl	801e270 <std_msgs__msg__Header__fini>
 801e1fc:	4630      	mov	r0, r6
 801e1fe:	e7d9      	b.n	801e1b4 <sensor_msgs__msg__Imu__init+0x60>

0801e200 <sensor_msgs__msg__Imu__fini>:
 801e200:	b188      	cbz	r0, 801e226 <sensor_msgs__msg__Imu__fini+0x26>
 801e202:	b510      	push	{r4, lr}
 801e204:	4604      	mov	r4, r0
 801e206:	f000 f833 	bl	801e270 <std_msgs__msg__Header__fini>
 801e20a:	f104 0018 	add.w	r0, r4, #24
 801e20e:	f000 f873 	bl	801e2f8 <geometry_msgs__msg__Quaternion__fini>
 801e212:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801e216:	f000 f875 	bl	801e304 <geometry_msgs__msg__Vector3__fini>
 801e21a:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801e21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e222:	f000 b86f 	b.w	801e304 <geometry_msgs__msg__Vector3__fini>
 801e226:	4770      	bx	lr

0801e228 <std_msgs__msg__Header__init>:
 801e228:	b570      	push	{r4, r5, r6, lr}
 801e22a:	4605      	mov	r5, r0
 801e22c:	b1a8      	cbz	r0, 801e25a <std_msgs__msg__Header__init+0x32>
 801e22e:	f000 f849 	bl	801e2c4 <builtin_interfaces__msg__Time__init>
 801e232:	4604      	mov	r4, r0
 801e234:	b140      	cbz	r0, 801e248 <std_msgs__msg__Header__init+0x20>
 801e236:	f105 0608 	add.w	r6, r5, #8
 801e23a:	4630      	mov	r0, r6
 801e23c:	f7f1 f9b6 	bl	800f5ac <rosidl_runtime_c__String__init>
 801e240:	4604      	mov	r4, r0
 801e242:	b168      	cbz	r0, 801e260 <std_msgs__msg__Header__init+0x38>
 801e244:	4620      	mov	r0, r4
 801e246:	bd70      	pop	{r4, r5, r6, pc}
 801e248:	4628      	mov	r0, r5
 801e24a:	f000 f83f 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 801e24e:	f105 0008 	add.w	r0, r5, #8
 801e252:	f7f1 f9c1 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801e256:	4620      	mov	r0, r4
 801e258:	bd70      	pop	{r4, r5, r6, pc}
 801e25a:	4604      	mov	r4, r0
 801e25c:	4620      	mov	r0, r4
 801e25e:	bd70      	pop	{r4, r5, r6, pc}
 801e260:	4628      	mov	r0, r5
 801e262:	f000 f833 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 801e266:	4630      	mov	r0, r6
 801e268:	f7f1 f9b6 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801e26c:	e7ea      	b.n	801e244 <std_msgs__msg__Header__init+0x1c>
 801e26e:	bf00      	nop

0801e270 <std_msgs__msg__Header__fini>:
 801e270:	b148      	cbz	r0, 801e286 <std_msgs__msg__Header__fini+0x16>
 801e272:	b510      	push	{r4, lr}
 801e274:	4604      	mov	r4, r0
 801e276:	f000 f829 	bl	801e2cc <builtin_interfaces__msg__Time__fini>
 801e27a:	f104 0008 	add.w	r0, r4, #8
 801e27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e282:	f7f1 b9a9 	b.w	800f5d8 <rosidl_runtime_c__String__fini>
 801e286:	4770      	bx	lr

0801e288 <std_srvs__srv__SetBool_Request__init>:
 801e288:	3800      	subs	r0, #0
 801e28a:	bf18      	it	ne
 801e28c:	2001      	movne	r0, #1
 801e28e:	4770      	bx	lr

0801e290 <std_srvs__srv__SetBool_Request__fini>:
 801e290:	4770      	bx	lr
 801e292:	bf00      	nop

0801e294 <std_srvs__srv__SetBool_Response__init>:
 801e294:	b538      	push	{r3, r4, r5, lr}
 801e296:	b138      	cbz	r0, 801e2a8 <std_srvs__srv__SetBool_Response__init+0x14>
 801e298:	1d05      	adds	r5, r0, #4
 801e29a:	4628      	mov	r0, r5
 801e29c:	f7f1 f986 	bl	800f5ac <rosidl_runtime_c__String__init>
 801e2a0:	4604      	mov	r4, r0
 801e2a2:	b120      	cbz	r0, 801e2ae <std_srvs__srv__SetBool_Response__init+0x1a>
 801e2a4:	4620      	mov	r0, r4
 801e2a6:	bd38      	pop	{r3, r4, r5, pc}
 801e2a8:	4604      	mov	r4, r0
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	bd38      	pop	{r3, r4, r5, pc}
 801e2ae:	4628      	mov	r0, r5
 801e2b0:	f7f1 f992 	bl	800f5d8 <rosidl_runtime_c__String__fini>
 801e2b4:	4620      	mov	r0, r4
 801e2b6:	bd38      	pop	{r3, r4, r5, pc}

0801e2b8 <std_srvs__srv__SetBool_Response__fini>:
 801e2b8:	b110      	cbz	r0, 801e2c0 <std_srvs__srv__SetBool_Response__fini+0x8>
 801e2ba:	3004      	adds	r0, #4
 801e2bc:	f7f1 b98c 	b.w	800f5d8 <rosidl_runtime_c__String__fini>
 801e2c0:	4770      	bx	lr
 801e2c2:	bf00      	nop

0801e2c4 <builtin_interfaces__msg__Time__init>:
 801e2c4:	3800      	subs	r0, #0
 801e2c6:	bf18      	it	ne
 801e2c8:	2001      	movne	r0, #1
 801e2ca:	4770      	bx	lr

0801e2cc <builtin_interfaces__msg__Time__fini>:
 801e2cc:	4770      	bx	lr
 801e2ce:	bf00      	nop

0801e2d0 <geometry_msgs__msg__Quaternion__init>:
 801e2d0:	b160      	cbz	r0, 801e2ec <geometry_msgs__msg__Quaternion__init+0x1c>
 801e2d2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e2f0 <geometry_msgs__msg__Quaternion__init+0x20>
 801e2d6:	2200      	movs	r2, #0
 801e2d8:	2300      	movs	r3, #0
 801e2da:	e9c0 2300 	strd	r2, r3, [r0]
 801e2de:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e2e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e2e6:	ed80 7b06 	vstr	d7, [r0, #24]
 801e2ea:	2001      	movs	r0, #1
 801e2ec:	4770      	bx	lr
 801e2ee:	bf00      	nop
 801e2f0:	00000000 	.word	0x00000000
 801e2f4:	3ff00000 	.word	0x3ff00000

0801e2f8 <geometry_msgs__msg__Quaternion__fini>:
 801e2f8:	4770      	bx	lr
 801e2fa:	bf00      	nop

0801e2fc <geometry_msgs__msg__Vector3__init>:
 801e2fc:	3800      	subs	r0, #0
 801e2fe:	bf18      	it	ne
 801e300:	2001      	movne	r0, #1
 801e302:	4770      	bx	lr

0801e304 <geometry_msgs__msg__Vector3__fini>:
 801e304:	4770      	bx	lr
 801e306:	bf00      	nop

0801e308 <ucdr_serialize_string>:
 801e308:	b510      	push	{r4, lr}
 801e30a:	b082      	sub	sp, #8
 801e30c:	4604      	mov	r4, r0
 801e30e:	4608      	mov	r0, r1
 801e310:	9101      	str	r1, [sp, #4]
 801e312:	f7e1 ff75 	bl	8000200 <strlen>
 801e316:	9901      	ldr	r1, [sp, #4]
 801e318:	1c42      	adds	r2, r0, #1
 801e31a:	4620      	mov	r0, r4
 801e31c:	b002      	add	sp, #8
 801e31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e322:	f7f4 be33 	b.w	8012f8c <ucdr_serialize_sequence_char>
 801e326:	bf00      	nop

0801e328 <ucdr_deserialize_string>:
 801e328:	b500      	push	{lr}
 801e32a:	b083      	sub	sp, #12
 801e32c:	ab01      	add	r3, sp, #4
 801e32e:	f7f4 fe3f 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 801e332:	b003      	add	sp, #12
 801e334:	f85d fb04 	ldr.w	pc, [sp], #4

0801e338 <get_custom_error>:
 801e338:	4b01      	ldr	r3, [pc, #4]	@ (801e340 <get_custom_error+0x8>)
 801e33a:	7818      	ldrb	r0, [r3, #0]
 801e33c:	4770      	bx	lr
 801e33e:	bf00      	nop
 801e340:	20017068 	.word	0x20017068

0801e344 <recv_custom_msg>:
 801e344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e348:	4693      	mov	fp, r2
 801e34a:	b089      	sub	sp, #36	@ 0x24
 801e34c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801e350:	9305      	str	r3, [sp, #20]
 801e352:	468a      	mov	sl, r1
 801e354:	2100      	movs	r1, #0
 801e356:	4604      	mov	r4, r0
 801e358:	f88d 101e 	strb.w	r1, [sp, #30]
 801e35c:	b322      	cbz	r2, 801e3a8 <recv_custom_msg+0x64>
 801e35e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801e362:	f10d 081f 	add.w	r8, sp, #31
 801e366:	af05      	add	r7, sp, #20
 801e368:	f10d 061e 	add.w	r6, sp, #30
 801e36c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801e370:	e002      	b.n	801e378 <recv_custom_msg+0x34>
 801e372:	9b05      	ldr	r3, [sp, #20]
 801e374:	2b00      	cmp	r3, #0
 801e376:	dd0f      	ble.n	801e398 <recv_custom_msg+0x54>
 801e378:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801e37c:	4623      	mov	r3, r4
 801e37e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801e382:	e9cd 5600 	strd	r5, r6, [sp]
 801e386:	4622      	mov	r2, r4
 801e388:	4648      	mov	r0, r9
 801e38a:	f001 f92d 	bl	801f5e8 <uxr_read_framed_msg>
 801e38e:	2800      	cmp	r0, #0
 801e390:	d0ef      	beq.n	801e372 <recv_custom_msg+0x2e>
 801e392:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801e396:	b1b3      	cbz	r3, 801e3c6 <recv_custom_msg+0x82>
 801e398:	4b0f      	ldr	r3, [pc, #60]	@ (801e3d8 <recv_custom_msg+0x94>)
 801e39a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801e39e:	701a      	strb	r2, [r3, #0]
 801e3a0:	2000      	movs	r0, #0
 801e3a2:	b009      	add	sp, #36	@ 0x24
 801e3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3a8:	f10d 021f 	add.w	r2, sp, #31
 801e3ac:	9200      	str	r2, [sp, #0]
 801e3ae:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801e3b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801e3b6:	4601      	mov	r1, r0
 801e3b8:	47a8      	blx	r5
 801e3ba:	2800      	cmp	r0, #0
 801e3bc:	d0ec      	beq.n	801e398 <recv_custom_msg+0x54>
 801e3be:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d1e8      	bne.n	801e398 <recv_custom_msg+0x54>
 801e3c6:	f8cb 0000 	str.w	r0, [fp]
 801e3ca:	2001      	movs	r0, #1
 801e3cc:	f8ca 4000 	str.w	r4, [sl]
 801e3d0:	b009      	add	sp, #36	@ 0x24
 801e3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3d6:	bf00      	nop
 801e3d8:	20017068 	.word	0x20017068

0801e3dc <send_custom_msg>:
 801e3dc:	b530      	push	{r4, r5, lr}
 801e3de:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801e3e2:	b087      	sub	sp, #28
 801e3e4:	4615      	mov	r5, r2
 801e3e6:	b974      	cbnz	r4, 801e406 <send_custom_msg+0x2a>
 801e3e8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801e3ec:	f10d 0317 	add.w	r3, sp, #23
 801e3f0:	47a0      	blx	r4
 801e3f2:	b108      	cbz	r0, 801e3f8 <send_custom_msg+0x1c>
 801e3f4:	42a8      	cmp	r0, r5
 801e3f6:	d015      	beq.n	801e424 <send_custom_msg+0x48>
 801e3f8:	4b0c      	ldr	r3, [pc, #48]	@ (801e42c <send_custom_msg+0x50>)
 801e3fa:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801e3fe:	701a      	strb	r2, [r3, #0]
 801e400:	2000      	movs	r0, #0
 801e402:	b007      	add	sp, #28
 801e404:	bd30      	pop	{r4, r5, pc}
 801e406:	460b      	mov	r3, r1
 801e408:	2200      	movs	r2, #0
 801e40a:	f10d 0117 	add.w	r1, sp, #23
 801e40e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801e412:	4602      	mov	r2, r0
 801e414:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801e418:	9500      	str	r5, [sp, #0]
 801e41a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801e41e:	f000 feeb 	bl	801f1f8 <uxr_write_framed_msg>
 801e422:	e7e6      	b.n	801e3f2 <send_custom_msg+0x16>
 801e424:	2001      	movs	r0, #1
 801e426:	b007      	add	sp, #28
 801e428:	bd30      	pop	{r4, r5, pc}
 801e42a:	bf00      	nop
 801e42c:	20017068 	.word	0x20017068

0801e430 <uxr_set_custom_transport_callbacks>:
 801e430:	b410      	push	{r4}
 801e432:	9c01      	ldr	r4, [sp, #4]
 801e434:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801e438:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801e43c:	9b02      	ldr	r3, [sp, #8]
 801e43e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801e442:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e446:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801e44a:	4770      	bx	lr

0801e44c <uxr_init_custom_transport>:
 801e44c:	b538      	push	{r3, r4, r5, lr}
 801e44e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801e452:	b303      	cbz	r3, 801e496 <uxr_init_custom_transport+0x4a>
 801e454:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801e458:	4604      	mov	r4, r0
 801e45a:	b1e2      	cbz	r2, 801e496 <uxr_init_custom_transport+0x4a>
 801e45c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801e460:	b1ca      	cbz	r2, 801e496 <uxr_init_custom_transport+0x4a>
 801e462:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801e466:	b1b2      	cbz	r2, 801e496 <uxr_init_custom_transport+0x4a>
 801e468:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801e46c:	4798      	blx	r3
 801e46e:	4605      	mov	r5, r0
 801e470:	b188      	cbz	r0, 801e496 <uxr_init_custom_transport+0x4a>
 801e472:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801e476:	b98b      	cbnz	r3, 801e49c <uxr_init_custom_transport+0x50>
 801e478:	490b      	ldr	r1, [pc, #44]	@ (801e4a8 <uxr_init_custom_transport+0x5c>)
 801e47a:	4b0c      	ldr	r3, [pc, #48]	@ (801e4ac <uxr_init_custom_transport+0x60>)
 801e47c:	4a0c      	ldr	r2, [pc, #48]	@ (801e4b0 <uxr_init_custom_transport+0x64>)
 801e47e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801e482:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801e486:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801e48a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801e48e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801e492:	4628      	mov	r0, r5
 801e494:	bd38      	pop	{r3, r4, r5, pc}
 801e496:	2500      	movs	r5, #0
 801e498:	4628      	mov	r0, r5
 801e49a:	bd38      	pop	{r3, r4, r5, pc}
 801e49c:	2100      	movs	r1, #0
 801e49e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801e4a2:	f000 fea3 	bl	801f1ec <uxr_init_framing_io>
 801e4a6:	e7e7      	b.n	801e478 <uxr_init_custom_transport+0x2c>
 801e4a8:	0801e3dd 	.word	0x0801e3dd
 801e4ac:	0801e345 	.word	0x0801e345
 801e4b0:	0801e339 	.word	0x0801e339

0801e4b4 <uxr_close_custom_transport>:
 801e4b4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801e4b8:	4718      	bx	r3
 801e4ba:	bf00      	nop

0801e4bc <uxr_init_input_best_effort_stream>:
 801e4bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e4c0:	8003      	strh	r3, [r0, #0]
 801e4c2:	4770      	bx	lr

0801e4c4 <uxr_reset_input_best_effort_stream>:
 801e4c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e4c8:	8003      	strh	r3, [r0, #0]
 801e4ca:	4770      	bx	lr

0801e4cc <uxr_receive_best_effort_message>:
 801e4cc:	b538      	push	{r3, r4, r5, lr}
 801e4ce:	4604      	mov	r4, r0
 801e4d0:	8800      	ldrh	r0, [r0, #0]
 801e4d2:	460d      	mov	r5, r1
 801e4d4:	f000 fe72 	bl	801f1bc <uxr_seq_num_cmp>
 801e4d8:	4603      	mov	r3, r0
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801e4e0:	bfb8      	it	lt
 801e4e2:	8025      	strhlt	r5, [r4, #0]
 801e4e4:	bd38      	pop	{r3, r4, r5, pc}
 801e4e6:	bf00      	nop

0801e4e8 <on_full_input_buffer>:
 801e4e8:	b570      	push	{r4, r5, r6, lr}
 801e4ea:	4605      	mov	r5, r0
 801e4ec:	460c      	mov	r4, r1
 801e4ee:	682b      	ldr	r3, [r5, #0]
 801e4f0:	6809      	ldr	r1, [r1, #0]
 801e4f2:	8920      	ldrh	r0, [r4, #8]
 801e4f4:	6862      	ldr	r2, [r4, #4]
 801e4f6:	fbb2 f2f0 	udiv	r2, r2, r0
 801e4fa:	eba3 0c01 	sub.w	ip, r3, r1
 801e4fe:	fbbc fcf2 	udiv	ip, ip, r2
 801e502:	f10c 0c01 	add.w	ip, ip, #1
 801e506:	fa1f f38c 	uxth.w	r3, ip
 801e50a:	fbb3 f6f0 	udiv	r6, r3, r0
 801e50e:	fb00 3316 	mls	r3, r0, r6, r3
 801e512:	b29b      	uxth	r3, r3
 801e514:	fb02 f303 	mul.w	r3, r2, r3
 801e518:	1d18      	adds	r0, r3, #4
 801e51a:	4408      	add	r0, r1
 801e51c:	7d26      	ldrb	r6, [r4, #20]
 801e51e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e522:	b116      	cbz	r6, 801e52a <on_full_input_buffer+0x42>
 801e524:	2600      	movs	r6, #0
 801e526:	f840 6c04 	str.w	r6, [r0, #-4]
 801e52a:	2a03      	cmp	r2, #3
 801e52c:	d801      	bhi.n	801e532 <on_full_input_buffer+0x4a>
 801e52e:	2001      	movs	r0, #1
 801e530:	bd70      	pop	{r4, r5, r6, pc}
 801e532:	3308      	adds	r3, #8
 801e534:	4419      	add	r1, r3
 801e536:	4628      	mov	r0, r5
 801e538:	692b      	ldr	r3, [r5, #16]
 801e53a:	3a04      	subs	r2, #4
 801e53c:	f7f4 fcae 	bl	8012e9c <ucdr_init_buffer_origin>
 801e540:	4628      	mov	r0, r5
 801e542:	4903      	ldr	r1, [pc, #12]	@ (801e550 <on_full_input_buffer+0x68>)
 801e544:	4622      	mov	r2, r4
 801e546:	f7f4 fc85 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 801e54a:	2000      	movs	r0, #0
 801e54c:	bd70      	pop	{r4, r5, r6, pc}
 801e54e:	bf00      	nop
 801e550:	0801e4e9 	.word	0x0801e4e9

0801e554 <uxr_init_input_reliable_stream>:
 801e554:	b500      	push	{lr}
 801e556:	e9c0 1200 	strd	r1, r2, [r0]
 801e55a:	f04f 0e00 	mov.w	lr, #0
 801e55e:	9a01      	ldr	r2, [sp, #4]
 801e560:	8103      	strh	r3, [r0, #8]
 801e562:	6102      	str	r2, [r0, #16]
 801e564:	f880 e014 	strb.w	lr, [r0, #20]
 801e568:	b1d3      	cbz	r3, 801e5a0 <uxr_init_input_reliable_stream+0x4c>
 801e56a:	f8c1 e000 	str.w	lr, [r1]
 801e56e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e572:	f1bc 0f01 	cmp.w	ip, #1
 801e576:	d913      	bls.n	801e5a0 <uxr_init_input_reliable_stream+0x4c>
 801e578:	2301      	movs	r3, #1
 801e57a:	fbb3 f1fc 	udiv	r1, r3, ip
 801e57e:	fb0c 3111 	mls	r1, ip, r1, r3
 801e582:	b289      	uxth	r1, r1
 801e584:	6842      	ldr	r2, [r0, #4]
 801e586:	fbb2 f2fc 	udiv	r2, r2, ip
 801e58a:	fb01 f202 	mul.w	r2, r1, r2
 801e58e:	6801      	ldr	r1, [r0, #0]
 801e590:	f841 e002 	str.w	lr, [r1, r2]
 801e594:	3301      	adds	r3, #1
 801e596:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e59a:	b29b      	uxth	r3, r3
 801e59c:	459c      	cmp	ip, r3
 801e59e:	d8ec      	bhi.n	801e57a <uxr_init_input_reliable_stream+0x26>
 801e5a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e5a4:	60c3      	str	r3, [r0, #12]
 801e5a6:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5aa:	bf00      	nop

0801e5ac <uxr_reset_input_reliable_stream>:
 801e5ac:	8901      	ldrh	r1, [r0, #8]
 801e5ae:	b1e9      	cbz	r1, 801e5ec <uxr_reset_input_reliable_stream+0x40>
 801e5b0:	f04f 0c00 	mov.w	ip, #0
 801e5b4:	b500      	push	{lr}
 801e5b6:	4663      	mov	r3, ip
 801e5b8:	46e6      	mov	lr, ip
 801e5ba:	fbb3 f2f1 	udiv	r2, r3, r1
 801e5be:	fb01 3312 	mls	r3, r1, r2, r3
 801e5c2:	b29b      	uxth	r3, r3
 801e5c4:	6842      	ldr	r2, [r0, #4]
 801e5c6:	fbb2 f2f1 	udiv	r2, r2, r1
 801e5ca:	fb02 f303 	mul.w	r3, r2, r3
 801e5ce:	6802      	ldr	r2, [r0, #0]
 801e5d0:	f842 e003 	str.w	lr, [r2, r3]
 801e5d4:	f10c 0c01 	add.w	ip, ip, #1
 801e5d8:	8901      	ldrh	r1, [r0, #8]
 801e5da:	fa1f f38c 	uxth.w	r3, ip
 801e5de:	4299      	cmp	r1, r3
 801e5e0:	d8eb      	bhi.n	801e5ba <uxr_reset_input_reliable_stream+0xe>
 801e5e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e5e6:	60c3      	str	r3, [r0, #12]
 801e5e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e5f0:	60c3      	str	r3, [r0, #12]
 801e5f2:	4770      	bx	lr

0801e5f4 <uxr_receive_reliable_message>:
 801e5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5f8:	4604      	mov	r4, r0
 801e5fa:	460d      	mov	r5, r1
 801e5fc:	8901      	ldrh	r1, [r0, #8]
 801e5fe:	8980      	ldrh	r0, [r0, #12]
 801e600:	4690      	mov	r8, r2
 801e602:	461f      	mov	r7, r3
 801e604:	f000 fdd2 	bl	801f1ac <uxr_seq_num_add>
 801e608:	4629      	mov	r1, r5
 801e60a:	4606      	mov	r6, r0
 801e60c:	89a0      	ldrh	r0, [r4, #12]
 801e60e:	f000 fdd5 	bl	801f1bc <uxr_seq_num_cmp>
 801e612:	2800      	cmp	r0, #0
 801e614:	db0a      	blt.n	801e62c <uxr_receive_reliable_message+0x38>
 801e616:	2600      	movs	r6, #0
 801e618:	89e0      	ldrh	r0, [r4, #14]
 801e61a:	4629      	mov	r1, r5
 801e61c:	f000 fdce 	bl	801f1bc <uxr_seq_num_cmp>
 801e620:	2800      	cmp	r0, #0
 801e622:	da00      	bge.n	801e626 <uxr_receive_reliable_message+0x32>
 801e624:	81e5      	strh	r5, [r4, #14]
 801e626:	4630      	mov	r0, r6
 801e628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e62c:	4630      	mov	r0, r6
 801e62e:	4629      	mov	r1, r5
 801e630:	f000 fdc4 	bl	801f1bc <uxr_seq_num_cmp>
 801e634:	2800      	cmp	r0, #0
 801e636:	dbee      	blt.n	801e616 <uxr_receive_reliable_message+0x22>
 801e638:	6923      	ldr	r3, [r4, #16]
 801e63a:	4640      	mov	r0, r8
 801e63c:	4798      	blx	r3
 801e63e:	2101      	movs	r1, #1
 801e640:	4681      	mov	r9, r0
 801e642:	89a0      	ldrh	r0, [r4, #12]
 801e644:	f000 fdb2 	bl	801f1ac <uxr_seq_num_add>
 801e648:	f1b9 0f00 	cmp.w	r9, #0
 801e64c:	d101      	bne.n	801e652 <uxr_receive_reliable_message+0x5e>
 801e64e:	4285      	cmp	r5, r0
 801e650:	d047      	beq.n	801e6e2 <uxr_receive_reliable_message+0xee>
 801e652:	8922      	ldrh	r2, [r4, #8]
 801e654:	fbb5 f0f2 	udiv	r0, r5, r2
 801e658:	fb02 5010 	mls	r0, r2, r0, r5
 801e65c:	b280      	uxth	r0, r0
 801e65e:	6863      	ldr	r3, [r4, #4]
 801e660:	fbb3 f3f2 	udiv	r3, r3, r2
 801e664:	fb00 f303 	mul.w	r3, r0, r3
 801e668:	6820      	ldr	r0, [r4, #0]
 801e66a:	3304      	adds	r3, #4
 801e66c:	4418      	add	r0, r3
 801e66e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e672:	2b00      	cmp	r3, #0
 801e674:	d1cf      	bne.n	801e616 <uxr_receive_reliable_message+0x22>
 801e676:	4641      	mov	r1, r8
 801e678:	463a      	mov	r2, r7
 801e67a:	f003 f9da 	bl	8021a32 <memcpy>
 801e67e:	8921      	ldrh	r1, [r4, #8]
 801e680:	fbb5 f2f1 	udiv	r2, r5, r1
 801e684:	fb01 5212 	mls	r2, r1, r2, r5
 801e688:	b292      	uxth	r2, r2
 801e68a:	6863      	ldr	r3, [r4, #4]
 801e68c:	fbb3 f3f1 	udiv	r3, r3, r1
 801e690:	fb02 f303 	mul.w	r3, r2, r3
 801e694:	6822      	ldr	r2, [r4, #0]
 801e696:	50d7      	str	r7, [r2, r3]
 801e698:	9a08      	ldr	r2, [sp, #32]
 801e69a:	2301      	movs	r3, #1
 801e69c:	7013      	strb	r3, [r2, #0]
 801e69e:	f1b9 0f00 	cmp.w	r9, #0
 801e6a2:	d0b8      	beq.n	801e616 <uxr_receive_reliable_message+0x22>
 801e6a4:	89a6      	ldrh	r6, [r4, #12]
 801e6a6:	4630      	mov	r0, r6
 801e6a8:	2101      	movs	r1, #1
 801e6aa:	f000 fd7f 	bl	801f1ac <uxr_seq_num_add>
 801e6ae:	8922      	ldrh	r2, [r4, #8]
 801e6b0:	6863      	ldr	r3, [r4, #4]
 801e6b2:	fbb3 f3f2 	udiv	r3, r3, r2
 801e6b6:	4606      	mov	r6, r0
 801e6b8:	fbb0 f0f2 	udiv	r0, r0, r2
 801e6bc:	fb02 6010 	mls	r0, r2, r0, r6
 801e6c0:	b280      	uxth	r0, r0
 801e6c2:	fb00 f303 	mul.w	r3, r0, r3
 801e6c6:	6820      	ldr	r0, [r4, #0]
 801e6c8:	3304      	adds	r3, #4
 801e6ca:	4418      	add	r0, r3
 801e6cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d0a0      	beq.n	801e616 <uxr_receive_reliable_message+0x22>
 801e6d4:	6923      	ldr	r3, [r4, #16]
 801e6d6:	4798      	blx	r3
 801e6d8:	2802      	cmp	r0, #2
 801e6da:	d008      	beq.n	801e6ee <uxr_receive_reliable_message+0xfa>
 801e6dc:	2801      	cmp	r0, #1
 801e6de:	d0e2      	beq.n	801e6a6 <uxr_receive_reliable_message+0xb2>
 801e6e0:	e799      	b.n	801e616 <uxr_receive_reliable_message+0x22>
 801e6e2:	9b08      	ldr	r3, [sp, #32]
 801e6e4:	81a5      	strh	r5, [r4, #12]
 801e6e6:	2601      	movs	r6, #1
 801e6e8:	f883 9000 	strb.w	r9, [r3]
 801e6ec:	e794      	b.n	801e618 <uxr_receive_reliable_message+0x24>
 801e6ee:	2601      	movs	r6, #1
 801e6f0:	e792      	b.n	801e618 <uxr_receive_reliable_message+0x24>
 801e6f2:	bf00      	nop

0801e6f4 <uxr_next_input_reliable_buffer_available>:
 801e6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6f8:	4604      	mov	r4, r0
 801e6fa:	460f      	mov	r7, r1
 801e6fc:	8980      	ldrh	r0, [r0, #12]
 801e6fe:	2101      	movs	r1, #1
 801e700:	4690      	mov	r8, r2
 801e702:	f000 fd53 	bl	801f1ac <uxr_seq_num_add>
 801e706:	8922      	ldrh	r2, [r4, #8]
 801e708:	fbb0 f6f2 	udiv	r6, r0, r2
 801e70c:	fb02 0616 	mls	r6, r2, r6, r0
 801e710:	b2b6      	uxth	r6, r6
 801e712:	6863      	ldr	r3, [r4, #4]
 801e714:	fbb3 f3f2 	udiv	r3, r3, r2
 801e718:	fb06 f303 	mul.w	r3, r6, r3
 801e71c:	6826      	ldr	r6, [r4, #0]
 801e71e:	3304      	adds	r3, #4
 801e720:	441e      	add	r6, r3
 801e722:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801e726:	f1b9 0f00 	cmp.w	r9, #0
 801e72a:	d023      	beq.n	801e774 <uxr_next_input_reliable_buffer_available+0x80>
 801e72c:	6923      	ldr	r3, [r4, #16]
 801e72e:	4605      	mov	r5, r0
 801e730:	4630      	mov	r0, r6
 801e732:	4798      	blx	r3
 801e734:	4682      	mov	sl, r0
 801e736:	b300      	cbz	r0, 801e77a <uxr_next_input_reliable_buffer_available+0x86>
 801e738:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801e73c:	2101      	movs	r1, #1
 801e73e:	4650      	mov	r0, sl
 801e740:	f000 fd34 	bl	801f1ac <uxr_seq_num_add>
 801e744:	8921      	ldrh	r1, [r4, #8]
 801e746:	fbb0 f2f1 	udiv	r2, r0, r1
 801e74a:	4682      	mov	sl, r0
 801e74c:	fb01 0212 	mls	r2, r1, r2, r0
 801e750:	e9d4 0300 	ldrd	r0, r3, [r4]
 801e754:	b292      	uxth	r2, r2
 801e756:	fbb3 f3f1 	udiv	r3, r3, r1
 801e75a:	fb02 f303 	mul.w	r3, r2, r3
 801e75e:	3304      	adds	r3, #4
 801e760:	4418      	add	r0, r3
 801e762:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801e766:	b12b      	cbz	r3, 801e774 <uxr_next_input_reliable_buffer_available+0x80>
 801e768:	6923      	ldr	r3, [r4, #16]
 801e76a:	4798      	blx	r3
 801e76c:	2802      	cmp	r0, #2
 801e76e:	d01b      	beq.n	801e7a8 <uxr_next_input_reliable_buffer_available+0xb4>
 801e770:	2801      	cmp	r0, #1
 801e772:	d0e3      	beq.n	801e73c <uxr_next_input_reliable_buffer_available+0x48>
 801e774:	2000      	movs	r0, #0
 801e776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e77a:	464a      	mov	r2, r9
 801e77c:	4631      	mov	r1, r6
 801e77e:	4638      	mov	r0, r7
 801e780:	f7f4 fb94 	bl	8012eac <ucdr_init_buffer>
 801e784:	8921      	ldrh	r1, [r4, #8]
 801e786:	fbb5 f2f1 	udiv	r2, r5, r1
 801e78a:	fb01 5212 	mls	r2, r1, r2, r5
 801e78e:	b292      	uxth	r2, r2
 801e790:	6863      	ldr	r3, [r4, #4]
 801e792:	fbb3 f3f1 	udiv	r3, r3, r1
 801e796:	fb02 f303 	mul.w	r3, r2, r3
 801e79a:	6822      	ldr	r2, [r4, #0]
 801e79c:	f842 a003 	str.w	sl, [r2, r3]
 801e7a0:	2001      	movs	r0, #1
 801e7a2:	81a5      	strh	r5, [r4, #12]
 801e7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7a8:	8920      	ldrh	r0, [r4, #8]
 801e7aa:	fbb5 f3f0 	udiv	r3, r5, r0
 801e7ae:	fb00 5513 	mls	r5, r0, r3, r5
 801e7b2:	b2ad      	uxth	r5, r5
 801e7b4:	6863      	ldr	r3, [r4, #4]
 801e7b6:	fbb3 f3f0 	udiv	r3, r3, r0
 801e7ba:	fb03 f505 	mul.w	r5, r3, r5
 801e7be:	6823      	ldr	r3, [r4, #0]
 801e7c0:	2000      	movs	r0, #0
 801e7c2:	5158      	str	r0, [r3, r5]
 801e7c4:	eb06 0108 	add.w	r1, r6, r8
 801e7c8:	eba9 0208 	sub.w	r2, r9, r8
 801e7cc:	4638      	mov	r0, r7
 801e7ce:	f7f4 fb6d 	bl	8012eac <ucdr_init_buffer>
 801e7d2:	4638      	mov	r0, r7
 801e7d4:	4903      	ldr	r1, [pc, #12]	@ (801e7e4 <uxr_next_input_reliable_buffer_available+0xf0>)
 801e7d6:	4622      	mov	r2, r4
 801e7d8:	f7f4 fb3c 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 801e7dc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801e7e0:	2001      	movs	r0, #1
 801e7e2:	e7c8      	b.n	801e776 <uxr_next_input_reliable_buffer_available+0x82>
 801e7e4:	0801e4e9 	.word	0x0801e4e9

0801e7e8 <uxr_process_heartbeat>:
 801e7e8:	b538      	push	{r3, r4, r5, lr}
 801e7ea:	4611      	mov	r1, r2
 801e7ec:	4604      	mov	r4, r0
 801e7ee:	89c0      	ldrh	r0, [r0, #14]
 801e7f0:	4615      	mov	r5, r2
 801e7f2:	f000 fce3 	bl	801f1bc <uxr_seq_num_cmp>
 801e7f6:	2800      	cmp	r0, #0
 801e7f8:	bfb8      	it	lt
 801e7fa:	81e5      	strhlt	r5, [r4, #14]
 801e7fc:	bd38      	pop	{r3, r4, r5, pc}
 801e7fe:	bf00      	nop

0801e800 <uxr_compute_acknack>:
 801e800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e804:	8903      	ldrh	r3, [r0, #8]
 801e806:	8985      	ldrh	r5, [r0, #12]
 801e808:	4604      	mov	r4, r0
 801e80a:	460e      	mov	r6, r1
 801e80c:	b1d3      	cbz	r3, 801e844 <uxr_compute_acknack+0x44>
 801e80e:	4628      	mov	r0, r5
 801e810:	2701      	movs	r7, #1
 801e812:	e003      	b.n	801e81c <uxr_compute_acknack+0x1c>
 801e814:	4567      	cmp	r7, ip
 801e816:	d215      	bcs.n	801e844 <uxr_compute_acknack+0x44>
 801e818:	89a0      	ldrh	r0, [r4, #12]
 801e81a:	3701      	adds	r7, #1
 801e81c:	b2b9      	uxth	r1, r7
 801e81e:	f000 fcc5 	bl	801f1ac <uxr_seq_num_add>
 801e822:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e826:	fbb0 f3fc 	udiv	r3, r0, ip
 801e82a:	fb0c 0313 	mls	r3, ip, r3, r0
 801e82e:	b29a      	uxth	r2, r3
 801e830:	e9d4 1300 	ldrd	r1, r3, [r4]
 801e834:	fbb3 f3fc 	udiv	r3, r3, ip
 801e838:	fb02 f303 	mul.w	r3, r2, r3
 801e83c:	58cb      	ldr	r3, [r1, r3]
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d1e8      	bne.n	801e814 <uxr_compute_acknack+0x14>
 801e842:	4605      	mov	r5, r0
 801e844:	8035      	strh	r5, [r6, #0]
 801e846:	2101      	movs	r1, #1
 801e848:	4628      	mov	r0, r5
 801e84a:	89e7      	ldrh	r7, [r4, #14]
 801e84c:	f000 fcb2 	bl	801f1b4 <uxr_seq_num_sub>
 801e850:	4601      	mov	r1, r0
 801e852:	4638      	mov	r0, r7
 801e854:	f000 fcae 	bl	801f1b4 <uxr_seq_num_sub>
 801e858:	4605      	mov	r5, r0
 801e85a:	b318      	cbz	r0, 801e8a4 <uxr_compute_acknack+0xa4>
 801e85c:	f04f 0900 	mov.w	r9, #0
 801e860:	464f      	mov	r7, r9
 801e862:	f04f 0801 	mov.w	r8, #1
 801e866:	fa1f f189 	uxth.w	r1, r9
 801e86a:	8830      	ldrh	r0, [r6, #0]
 801e86c:	f000 fc9e 	bl	801f1ac <uxr_seq_num_add>
 801e870:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e874:	fbb0 f3fc 	udiv	r3, r0, ip
 801e878:	e9d4 1200 	ldrd	r1, r2, [r4]
 801e87c:	fb03 001c 	mls	r0, r3, ip, r0
 801e880:	b283      	uxth	r3, r0
 801e882:	fbb2 f2fc 	udiv	r2, r2, ip
 801e886:	fb02 f303 	mul.w	r3, r2, r3
 801e88a:	fa08 f209 	lsl.w	r2, r8, r9
 801e88e:	58cb      	ldr	r3, [r1, r3]
 801e890:	f109 0901 	add.w	r9, r9, #1
 801e894:	b90b      	cbnz	r3, 801e89a <uxr_compute_acknack+0x9a>
 801e896:	4317      	orrs	r7, r2
 801e898:	b2bf      	uxth	r7, r7
 801e89a:	454d      	cmp	r5, r9
 801e89c:	d1e3      	bne.n	801e866 <uxr_compute_acknack+0x66>
 801e89e:	4638      	mov	r0, r7
 801e8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e8a4:	4607      	mov	r7, r0
 801e8a6:	4638      	mov	r0, r7
 801e8a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801e8ac <uxr_init_output_best_effort_stream>:
 801e8ac:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801e8b0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801e8b4:	6001      	str	r1, [r0, #0]
 801e8b6:	7303      	strb	r3, [r0, #12]
 801e8b8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801e8bc:	4770      	bx	lr
 801e8be:	bf00      	nop

0801e8c0 <uxr_reset_output_best_effort_stream>:
 801e8c0:	7b02      	ldrb	r2, [r0, #12]
 801e8c2:	6042      	str	r2, [r0, #4]
 801e8c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e8c8:	81c3      	strh	r3, [r0, #14]
 801e8ca:	4770      	bx	lr

0801e8cc <uxr_prepare_best_effort_buffer_to_write>:
 801e8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8ce:	4604      	mov	r4, r0
 801e8d0:	b083      	sub	sp, #12
 801e8d2:	6840      	ldr	r0, [r0, #4]
 801e8d4:	460d      	mov	r5, r1
 801e8d6:	4616      	mov	r6, r2
 801e8d8:	f7f6 f8aa 	bl	8014a30 <uxr_submessage_padding>
 801e8dc:	6863      	ldr	r3, [r4, #4]
 801e8de:	4418      	add	r0, r3
 801e8e0:	68a3      	ldr	r3, [r4, #8]
 801e8e2:	1942      	adds	r2, r0, r5
 801e8e4:	4293      	cmp	r3, r2
 801e8e6:	bf2c      	ite	cs
 801e8e8:	2701      	movcs	r7, #1
 801e8ea:	2700      	movcc	r7, #0
 801e8ec:	d202      	bcs.n	801e8f4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801e8ee:	4638      	mov	r0, r7
 801e8f0:	b003      	add	sp, #12
 801e8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8f4:	9000      	str	r0, [sp, #0]
 801e8f6:	6821      	ldr	r1, [r4, #0]
 801e8f8:	4630      	mov	r0, r6
 801e8fa:	2300      	movs	r3, #0
 801e8fc:	f7f4 fac4 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 801e900:	6861      	ldr	r1, [r4, #4]
 801e902:	4638      	mov	r0, r7
 801e904:	4429      	add	r1, r5
 801e906:	6061      	str	r1, [r4, #4]
 801e908:	b003      	add	sp, #12
 801e90a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e90c <uxr_prepare_best_effort_buffer_to_send>:
 801e90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e910:	4604      	mov	r4, r0
 801e912:	461d      	mov	r5, r3
 801e914:	6840      	ldr	r0, [r0, #4]
 801e916:	7b23      	ldrb	r3, [r4, #12]
 801e918:	4298      	cmp	r0, r3
 801e91a:	bf8c      	ite	hi
 801e91c:	2601      	movhi	r6, #1
 801e91e:	2600      	movls	r6, #0
 801e920:	d802      	bhi.n	801e928 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801e922:	4630      	mov	r0, r6
 801e924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e928:	4688      	mov	r8, r1
 801e92a:	89e0      	ldrh	r0, [r4, #14]
 801e92c:	2101      	movs	r1, #1
 801e92e:	4617      	mov	r7, r2
 801e930:	f000 fc3c 	bl	801f1ac <uxr_seq_num_add>
 801e934:	6823      	ldr	r3, [r4, #0]
 801e936:	81e0      	strh	r0, [r4, #14]
 801e938:	8028      	strh	r0, [r5, #0]
 801e93a:	f8c8 3000 	str.w	r3, [r8]
 801e93e:	6863      	ldr	r3, [r4, #4]
 801e940:	603b      	str	r3, [r7, #0]
 801e942:	7b23      	ldrb	r3, [r4, #12]
 801e944:	6063      	str	r3, [r4, #4]
 801e946:	4630      	mov	r0, r6
 801e948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e94c <on_full_output_buffer>:
 801e94c:	b538      	push	{r3, r4, r5, lr}
 801e94e:	6802      	ldr	r2, [r0, #0]
 801e950:	460c      	mov	r4, r1
 801e952:	6809      	ldr	r1, [r1, #0]
 801e954:	8923      	ldrh	r3, [r4, #8]
 801e956:	eba2 0c01 	sub.w	ip, r2, r1
 801e95a:	6862      	ldr	r2, [r4, #4]
 801e95c:	fbb2 f2f3 	udiv	r2, r2, r3
 801e960:	fbbc fcf2 	udiv	ip, ip, r2
 801e964:	f10c 0c01 	add.w	ip, ip, #1
 801e968:	fa1f fc8c 	uxth.w	ip, ip
 801e96c:	fbbc fef3 	udiv	lr, ip, r3
 801e970:	fb03 c31e 	mls	r3, r3, lr, ip
 801e974:	b29b      	uxth	r3, r3
 801e976:	fb02 f303 	mul.w	r3, r2, r3
 801e97a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801e97e:	58ca      	ldr	r2, [r1, r3]
 801e980:	4463      	add	r3, ip
 801e982:	eba2 020c 	sub.w	r2, r2, ip
 801e986:	3308      	adds	r3, #8
 801e988:	4605      	mov	r5, r0
 801e98a:	4419      	add	r1, r3
 801e98c:	3a04      	subs	r2, #4
 801e98e:	6903      	ldr	r3, [r0, #16]
 801e990:	f7f4 fa84 	bl	8012e9c <ucdr_init_buffer_origin>
 801e994:	4628      	mov	r0, r5
 801e996:	4903      	ldr	r1, [pc, #12]	@ (801e9a4 <on_full_output_buffer+0x58>)
 801e998:	4622      	mov	r2, r4
 801e99a:	f7f4 fa5b 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 801e99e:	2000      	movs	r0, #0
 801e9a0:	bd38      	pop	{r3, r4, r5, pc}
 801e9a2:	bf00      	nop
 801e9a4:	0801e94d 	.word	0x0801e94d

0801e9a8 <uxr_init_output_reliable_stream>:
 801e9a8:	b410      	push	{r4}
 801e9aa:	f89d c004 	ldrb.w	ip, [sp, #4]
 801e9ae:	8103      	strh	r3, [r0, #8]
 801e9b0:	e9c0 1200 	strd	r1, r2, [r0]
 801e9b4:	f880 c00c 	strb.w	ip, [r0, #12]
 801e9b8:	b1d3      	cbz	r3, 801e9f0 <uxr_init_output_reliable_stream+0x48>
 801e9ba:	f8c1 c000 	str.w	ip, [r1]
 801e9be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e9c2:	f1bc 0f01 	cmp.w	ip, #1
 801e9c6:	d913      	bls.n	801e9f0 <uxr_init_output_reliable_stream+0x48>
 801e9c8:	2301      	movs	r3, #1
 801e9ca:	fbb3 f1fc 	udiv	r1, r3, ip
 801e9ce:	fb0c 3111 	mls	r1, ip, r1, r3
 801e9d2:	b289      	uxth	r1, r1
 801e9d4:	6842      	ldr	r2, [r0, #4]
 801e9d6:	6804      	ldr	r4, [r0, #0]
 801e9d8:	fbb2 f2fc 	udiv	r2, r2, ip
 801e9dc:	fb01 f202 	mul.w	r2, r1, r2
 801e9e0:	7b01      	ldrb	r1, [r0, #12]
 801e9e2:	50a1      	str	r1, [r4, r2]
 801e9e4:	3301      	adds	r3, #1
 801e9e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e9ea:	b29b      	uxth	r3, r3
 801e9ec:	459c      	cmp	ip, r3
 801e9ee:	d8ec      	bhi.n	801e9ca <uxr_init_output_reliable_stream+0x22>
 801e9f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e9f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e9f8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801e9fc:	4905      	ldr	r1, [pc, #20]	@ (801ea14 <uxr_init_output_reliable_stream+0x6c>)
 801e9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ea02:	f8c0 100e 	str.w	r1, [r0, #14]
 801ea06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	8242      	strh	r2, [r0, #18]
 801ea0e:	8403      	strh	r3, [r0, #32]
 801ea10:	4770      	bx	lr
 801ea12:	bf00      	nop
 801ea14:	ffff0000 	.word	0xffff0000

0801ea18 <uxr_reset_output_reliable_stream>:
 801ea18:	8901      	ldrh	r1, [r0, #8]
 801ea1a:	b1b1      	cbz	r1, 801ea4a <uxr_reset_output_reliable_stream+0x32>
 801ea1c:	f04f 0c00 	mov.w	ip, #0
 801ea20:	4663      	mov	r3, ip
 801ea22:	fbb3 f2f1 	udiv	r2, r3, r1
 801ea26:	fb01 3312 	mls	r3, r1, r2, r3
 801ea2a:	b29b      	uxth	r3, r3
 801ea2c:	6842      	ldr	r2, [r0, #4]
 801ea2e:	fbb2 f2f1 	udiv	r2, r2, r1
 801ea32:	6801      	ldr	r1, [r0, #0]
 801ea34:	fb02 f303 	mul.w	r3, r2, r3
 801ea38:	7b02      	ldrb	r2, [r0, #12]
 801ea3a:	50ca      	str	r2, [r1, r3]
 801ea3c:	f10c 0c01 	add.w	ip, ip, #1
 801ea40:	8901      	ldrh	r1, [r0, #8]
 801ea42:	fa1f f38c 	uxth.w	r3, ip
 801ea46:	4299      	cmp	r1, r3
 801ea48:	d8eb      	bhi.n	801ea22 <uxr_reset_output_reliable_stream+0xa>
 801ea4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ea4e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ea52:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801ea56:	4904      	ldr	r1, [pc, #16]	@ (801ea68 <uxr_reset_output_reliable_stream+0x50>)
 801ea58:	f8c0 100e 	str.w	r1, [r0, #14]
 801ea5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ea60:	2300      	movs	r3, #0
 801ea62:	8242      	strh	r2, [r0, #18]
 801ea64:	8403      	strh	r3, [r0, #32]
 801ea66:	4770      	bx	lr
 801ea68:	ffff0000 	.word	0xffff0000

0801ea6c <uxr_prepare_reliable_buffer_to_write>:
 801ea6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea70:	4604      	mov	r4, r0
 801ea72:	b091      	sub	sp, #68	@ 0x44
 801ea74:	8900      	ldrh	r0, [r0, #8]
 801ea76:	89e6      	ldrh	r6, [r4, #14]
 801ea78:	6823      	ldr	r3, [r4, #0]
 801ea7a:	9204      	str	r2, [sp, #16]
 801ea7c:	fbb6 f2f0 	udiv	r2, r6, r0
 801ea80:	fb00 6212 	mls	r2, r0, r2, r6
 801ea84:	b292      	uxth	r2, r2
 801ea86:	6865      	ldr	r5, [r4, #4]
 801ea88:	fbb5 f5f0 	udiv	r5, r5, r0
 801ea8c:	fb05 3202 	mla	r2, r5, r2, r3
 801ea90:	3204      	adds	r2, #4
 801ea92:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801ea96:	f894 900c 	ldrb.w	r9, [r4, #12]
 801ea9a:	9203      	str	r2, [sp, #12]
 801ea9c:	468b      	mov	fp, r1
 801ea9e:	1f2f      	subs	r7, r5, #4
 801eaa0:	2800      	cmp	r0, #0
 801eaa2:	f000 814c 	beq.w	801ed3e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801eaa6:	f04f 0c00 	mov.w	ip, #0
 801eaaa:	46e2      	mov	sl, ip
 801eaac:	4661      	mov	r1, ip
 801eaae:	fbb1 f2f0 	udiv	r2, r1, r0
 801eab2:	fb00 1212 	mls	r2, r0, r2, r1
 801eab6:	b292      	uxth	r2, r2
 801eab8:	fb05 f202 	mul.w	r2, r5, r2
 801eabc:	f10c 0c01 	add.w	ip, ip, #1
 801eac0:	589a      	ldr	r2, [r3, r2]
 801eac2:	454a      	cmp	r2, r9
 801eac4:	bf08      	it	eq
 801eac6:	f10a 0a01 	addeq.w	sl, sl, #1
 801eaca:	fa1f f18c 	uxth.w	r1, ip
 801eace:	bf08      	it	eq
 801ead0:	fa1f fa8a 	uxtheq.w	sl, sl
 801ead4:	4281      	cmp	r1, r0
 801ead6:	d3ea      	bcc.n	801eaae <uxr_prepare_reliable_buffer_to_write+0x42>
 801ead8:	4640      	mov	r0, r8
 801eada:	2104      	movs	r1, #4
 801eadc:	f8cd a014 	str.w	sl, [sp, #20]
 801eae0:	f7f4 f9e8 	bl	8012eb4 <ucdr_alignment>
 801eae4:	4480      	add	r8, r0
 801eae6:	eb08 020b 	add.w	r2, r8, fp
 801eaea:	42ba      	cmp	r2, r7
 801eaec:	f240 80cd 	bls.w	801ec8a <uxr_prepare_reliable_buffer_to_write+0x21e>
 801eaf0:	7b22      	ldrb	r2, [r4, #12]
 801eaf2:	445a      	add	r2, fp
 801eaf4:	42ba      	cmp	r2, r7
 801eaf6:	f240 80b5 	bls.w	801ec64 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801eafa:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801eafe:	33fc      	adds	r3, #252	@ 0xfc
 801eb00:	b2ba      	uxth	r2, r7
 801eb02:	4413      	add	r3, r2
 801eb04:	b29b      	uxth	r3, r3
 801eb06:	fb0a f903 	mul.w	r9, sl, r3
 801eb0a:	45d9      	cmp	r9, fp
 801eb0c:	9305      	str	r3, [sp, #20]
 801eb0e:	9306      	str	r3, [sp, #24]
 801eb10:	f0c0 80b7 	bcc.w	801ec82 <uxr_prepare_reliable_buffer_to_write+0x216>
 801eb14:	f108 0304 	add.w	r3, r8, #4
 801eb18:	42bb      	cmp	r3, r7
 801eb1a:	f080 80db 	bcs.w	801ecd4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801eb1e:	f1a2 0904 	sub.w	r9, r2, #4
 801eb22:	eba9 0908 	sub.w	r9, r9, r8
 801eb26:	9b05      	ldr	r3, [sp, #20]
 801eb28:	fa1f f989 	uxth.w	r9, r9
 801eb2c:	ebab 0b09 	sub.w	fp, fp, r9
 801eb30:	fbbb f2f3 	udiv	r2, fp, r3
 801eb34:	fb03 b312 	mls	r3, r3, r2, fp
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	f000 80c8 	beq.w	801ecce <uxr_prepare_reliable_buffer_to_write+0x262>
 801eb3e:	3201      	adds	r2, #1
 801eb40:	b292      	uxth	r2, r2
 801eb42:	9306      	str	r3, [sp, #24]
 801eb44:	4552      	cmp	r2, sl
 801eb46:	f200 809c 	bhi.w	801ec82 <uxr_prepare_reliable_buffer_to_write+0x216>
 801eb4a:	f10d 0b20 	add.w	fp, sp, #32
 801eb4e:	2a00      	cmp	r2, #0
 801eb50:	d042      	beq.n	801ebd8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801eb52:	f8cd 801c 	str.w	r8, [sp, #28]
 801eb56:	f04f 0a00 	mov.w	sl, #0
 801eb5a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801eb5e:	9505      	str	r5, [sp, #20]
 801eb60:	f10d 0b20 	add.w	fp, sp, #32
 801eb64:	4615      	mov	r5, r2
 801eb66:	e000      	b.n	801eb6a <uxr_prepare_reliable_buffer_to_write+0xfe>
 801eb68:	46c1      	mov	r9, r8
 801eb6a:	8920      	ldrh	r0, [r4, #8]
 801eb6c:	fbb6 f2f0 	udiv	r2, r6, r0
 801eb70:	fb00 6112 	mls	r1, r0, r2, r6
 801eb74:	b28a      	uxth	r2, r1
 801eb76:	6863      	ldr	r3, [r4, #4]
 801eb78:	fbb3 f1f0 	udiv	r1, r3, r0
 801eb7c:	6823      	ldr	r3, [r4, #0]
 801eb7e:	fb02 f101 	mul.w	r1, r2, r1
 801eb82:	3104      	adds	r1, #4
 801eb84:	4419      	add	r1, r3
 801eb86:	4658      	mov	r0, fp
 801eb88:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801eb8c:	9200      	str	r2, [sp, #0]
 801eb8e:	2300      	movs	r3, #0
 801eb90:	463a      	mov	r2, r7
 801eb92:	f7f4 f979 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 801eb96:	464a      	mov	r2, r9
 801eb98:	2300      	movs	r3, #0
 801eb9a:	210d      	movs	r1, #13
 801eb9c:	4658      	mov	r0, fp
 801eb9e:	f7f5 ff07 	bl	80149b0 <uxr_buffer_submessage_header>
 801eba2:	8921      	ldrh	r1, [r4, #8]
 801eba4:	fbb6 f2f1 	udiv	r2, r6, r1
 801eba8:	fb01 6212 	mls	r2, r1, r2, r6
 801ebac:	b292      	uxth	r2, r2
 801ebae:	6863      	ldr	r3, [r4, #4]
 801ebb0:	fbb3 f3f1 	udiv	r3, r3, r1
 801ebb4:	fb02 f303 	mul.w	r3, r2, r3
 801ebb8:	6822      	ldr	r2, [r4, #0]
 801ebba:	4630      	mov	r0, r6
 801ebbc:	50d7      	str	r7, [r2, r3]
 801ebbe:	2101      	movs	r1, #1
 801ebc0:	f000 faf4 	bl	801f1ac <uxr_seq_num_add>
 801ebc4:	f10a 0a01 	add.w	sl, sl, #1
 801ebc8:	fa1f f38a 	uxth.w	r3, sl
 801ebcc:	429d      	cmp	r5, r3
 801ebce:	4606      	mov	r6, r0
 801ebd0:	d8ca      	bhi.n	801eb68 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801ebd2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ebd6:	9d05      	ldr	r5, [sp, #20]
 801ebd8:	8920      	ldrh	r0, [r4, #8]
 801ebda:	fbb6 f3f0 	udiv	r3, r6, r0
 801ebde:	fb00 6313 	mls	r3, r0, r3, r6
 801ebe2:	b299      	uxth	r1, r3
 801ebe4:	6863      	ldr	r3, [r4, #4]
 801ebe6:	fbb3 f3f0 	udiv	r3, r3, r0
 801ebea:	fb01 f303 	mul.w	r3, r1, r3
 801ebee:	6821      	ldr	r1, [r4, #0]
 801ebf0:	3304      	adds	r3, #4
 801ebf2:	4419      	add	r1, r3
 801ebf4:	463a      	mov	r2, r7
 801ebf6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801ebfa:	9000      	str	r0, [sp, #0]
 801ebfc:	2300      	movs	r3, #0
 801ebfe:	4658      	mov	r0, fp
 801ec00:	f7f4 f942 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 801ec04:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801ec08:	4658      	mov	r0, fp
 801ec0a:	fa1f f289 	uxth.w	r2, r9
 801ec0e:	2302      	movs	r3, #2
 801ec10:	210d      	movs	r1, #13
 801ec12:	f7f5 fecd 	bl	80149b0 <uxr_buffer_submessage_header>
 801ec16:	9b03      	ldr	r3, [sp, #12]
 801ec18:	8927      	ldrh	r7, [r4, #8]
 801ec1a:	7b20      	ldrb	r0, [r4, #12]
 801ec1c:	f108 0104 	add.w	r1, r8, #4
 801ec20:	440b      	add	r3, r1
 801ec22:	4619      	mov	r1, r3
 801ec24:	fbb6 f3f7 	udiv	r3, r6, r7
 801ec28:	fb07 6313 	mls	r3, r7, r3, r6
 801ec2c:	f1a5 0208 	sub.w	r2, r5, #8
 801ec30:	b29d      	uxth	r5, r3
 801ec32:	3004      	adds	r0, #4
 801ec34:	6863      	ldr	r3, [r4, #4]
 801ec36:	fbb3 f3f7 	udiv	r3, r3, r7
 801ec3a:	fb05 f303 	mul.w	r3, r5, r3
 801ec3e:	6825      	ldr	r5, [r4, #0]
 801ec40:	4448      	add	r0, r9
 801ec42:	50e8      	str	r0, [r5, r3]
 801ec44:	9d04      	ldr	r5, [sp, #16]
 801ec46:	eba2 0208 	sub.w	r2, r2, r8
 801ec4a:	4628      	mov	r0, r5
 801ec4c:	f7f4 f92e 	bl	8012eac <ucdr_init_buffer>
 801ec50:	4628      	mov	r0, r5
 801ec52:	493c      	ldr	r1, [pc, #240]	@ (801ed44 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801ec54:	4622      	mov	r2, r4
 801ec56:	f7f4 f8fd 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 801ec5a:	2001      	movs	r0, #1
 801ec5c:	81e6      	strh	r6, [r4, #14]
 801ec5e:	b011      	add	sp, #68	@ 0x44
 801ec60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec64:	2101      	movs	r1, #1
 801ec66:	89e0      	ldrh	r0, [r4, #14]
 801ec68:	f000 faa0 	bl	801f1ac <uxr_seq_num_add>
 801ec6c:	8921      	ldrh	r1, [r4, #8]
 801ec6e:	4605      	mov	r5, r0
 801ec70:	8a60      	ldrh	r0, [r4, #18]
 801ec72:	f000 fa9b 	bl	801f1ac <uxr_seq_num_add>
 801ec76:	4601      	mov	r1, r0
 801ec78:	4628      	mov	r0, r5
 801ec7a:	f000 fa9f 	bl	801f1bc <uxr_seq_num_cmp>
 801ec7e:	2800      	cmp	r0, #0
 801ec80:	dd42      	ble.n	801ed08 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801ec82:	2000      	movs	r0, #0
 801ec84:	b011      	add	sp, #68	@ 0x44
 801ec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec8a:	8921      	ldrh	r1, [r4, #8]
 801ec8c:	8a60      	ldrh	r0, [r4, #18]
 801ec8e:	9205      	str	r2, [sp, #20]
 801ec90:	f000 fa8c 	bl	801f1ac <uxr_seq_num_add>
 801ec94:	4601      	mov	r1, r0
 801ec96:	4630      	mov	r0, r6
 801ec98:	f000 fa90 	bl	801f1bc <uxr_seq_num_cmp>
 801ec9c:	2800      	cmp	r0, #0
 801ec9e:	9a05      	ldr	r2, [sp, #20]
 801eca0:	dcef      	bgt.n	801ec82 <uxr_prepare_reliable_buffer_to_write+0x216>
 801eca2:	8927      	ldrh	r7, [r4, #8]
 801eca4:	fbb6 f3f7 	udiv	r3, r6, r7
 801eca8:	fb07 6313 	mls	r3, r7, r3, r6
 801ecac:	b29d      	uxth	r5, r3
 801ecae:	6863      	ldr	r3, [r4, #4]
 801ecb0:	6824      	ldr	r4, [r4, #0]
 801ecb2:	fbb3 f3f7 	udiv	r3, r3, r7
 801ecb6:	fb05 f303 	mul.w	r3, r5, r3
 801ecba:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801ecbe:	50e2      	str	r2, [r4, r3]
 801ecc0:	2300      	movs	r3, #0
 801ecc2:	f8cd 8000 	str.w	r8, [sp]
 801ecc6:	f7f4 f8df 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 801ecca:	2001      	movs	r0, #1
 801eccc:	e7da      	b.n	801ec84 <uxr_prepare_reliable_buffer_to_write+0x218>
 801ecce:	b293      	uxth	r3, r2
 801ecd0:	461a      	mov	r2, r3
 801ecd2:	e737      	b.n	801eb44 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801ecd4:	4630      	mov	r0, r6
 801ecd6:	2101      	movs	r1, #1
 801ecd8:	9207      	str	r2, [sp, #28]
 801ecda:	f000 fa67 	bl	801f1ac <uxr_seq_num_add>
 801ecde:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ece2:	fbb0 f1fc 	udiv	r1, r0, ip
 801ece6:	fb0c 0111 	mls	r1, ip, r1, r0
 801ecea:	4606      	mov	r6, r0
 801ecec:	b288      	uxth	r0, r1
 801ecee:	6863      	ldr	r3, [r4, #4]
 801ecf0:	fbb3 f1fc 	udiv	r1, r3, ip
 801ecf4:	6823      	ldr	r3, [r4, #0]
 801ecf6:	9a07      	ldr	r2, [sp, #28]
 801ecf8:	fb00 f101 	mul.w	r1, r0, r1
 801ecfc:	3104      	adds	r1, #4
 801ecfe:	440b      	add	r3, r1
 801ed00:	9303      	str	r3, [sp, #12]
 801ed02:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ed06:	e70a      	b.n	801eb1e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ed08:	8921      	ldrh	r1, [r4, #8]
 801ed0a:	fbb5 f3f1 	udiv	r3, r5, r1
 801ed0e:	fb01 5313 	mls	r3, r1, r3, r5
 801ed12:	b29a      	uxth	r2, r3
 801ed14:	6863      	ldr	r3, [r4, #4]
 801ed16:	fbb3 f3f1 	udiv	r3, r3, r1
 801ed1a:	6821      	ldr	r1, [r4, #0]
 801ed1c:	9804      	ldr	r0, [sp, #16]
 801ed1e:	fb02 f303 	mul.w	r3, r2, r3
 801ed22:	3304      	adds	r3, #4
 801ed24:	7b22      	ldrb	r2, [r4, #12]
 801ed26:	4419      	add	r1, r3
 801ed28:	445a      	add	r2, fp
 801ed2a:	f841 2c04 	str.w	r2, [r1, #-4]
 801ed2e:	7b23      	ldrb	r3, [r4, #12]
 801ed30:	9300      	str	r3, [sp, #0]
 801ed32:	2300      	movs	r3, #0
 801ed34:	f7f4 f8a8 	bl	8012e88 <ucdr_init_buffer_origin_offset>
 801ed38:	81e5      	strh	r5, [r4, #14]
 801ed3a:	2001      	movs	r0, #1
 801ed3c:	e7a2      	b.n	801ec84 <uxr_prepare_reliable_buffer_to_write+0x218>
 801ed3e:	4682      	mov	sl, r0
 801ed40:	e6ca      	b.n	801ead8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801ed42:	bf00      	nop
 801ed44:	0801e94d 	.word	0x0801e94d

0801ed48 <uxr_prepare_next_reliable_buffer_to_send>:
 801ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed4a:	4604      	mov	r4, r0
 801ed4c:	460f      	mov	r7, r1
 801ed4e:	8a00      	ldrh	r0, [r0, #16]
 801ed50:	2101      	movs	r1, #1
 801ed52:	4616      	mov	r6, r2
 801ed54:	461d      	mov	r5, r3
 801ed56:	f000 fa29 	bl	801f1ac <uxr_seq_num_add>
 801ed5a:	8028      	strh	r0, [r5, #0]
 801ed5c:	8922      	ldrh	r2, [r4, #8]
 801ed5e:	fbb0 f3f2 	udiv	r3, r0, r2
 801ed62:	fb02 0c13 	mls	ip, r2, r3, r0
 801ed66:	fa1f fc8c 	uxth.w	ip, ip
 801ed6a:	6863      	ldr	r3, [r4, #4]
 801ed6c:	fbb3 f3f2 	udiv	r3, r3, r2
 801ed70:	fb0c fc03 	mul.w	ip, ip, r3
 801ed74:	6823      	ldr	r3, [r4, #0]
 801ed76:	89e1      	ldrh	r1, [r4, #14]
 801ed78:	f10c 0c04 	add.w	ip, ip, #4
 801ed7c:	4463      	add	r3, ip
 801ed7e:	603b      	str	r3, [r7, #0]
 801ed80:	6823      	ldr	r3, [r4, #0]
 801ed82:	449c      	add	ip, r3
 801ed84:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ed88:	6033      	str	r3, [r6, #0]
 801ed8a:	f000 fa17 	bl	801f1bc <uxr_seq_num_cmp>
 801ed8e:	2800      	cmp	r0, #0
 801ed90:	dd01      	ble.n	801ed96 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ed92:	2000      	movs	r0, #0
 801ed94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed96:	7b23      	ldrb	r3, [r4, #12]
 801ed98:	6832      	ldr	r2, [r6, #0]
 801ed9a:	429a      	cmp	r2, r3
 801ed9c:	d9f9      	bls.n	801ed92 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ed9e:	8a61      	ldrh	r1, [r4, #18]
 801eda0:	8a20      	ldrh	r0, [r4, #16]
 801eda2:	f000 fa07 	bl	801f1b4 <uxr_seq_num_sub>
 801eda6:	8923      	ldrh	r3, [r4, #8]
 801eda8:	4283      	cmp	r3, r0
 801edaa:	d0f2      	beq.n	801ed92 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801edac:	8828      	ldrh	r0, [r5, #0]
 801edae:	89e3      	ldrh	r3, [r4, #14]
 801edb0:	8220      	strh	r0, [r4, #16]
 801edb2:	4298      	cmp	r0, r3
 801edb4:	d001      	beq.n	801edba <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801edb6:	2001      	movs	r0, #1
 801edb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edba:	2101      	movs	r1, #1
 801edbc:	f000 f9f6 	bl	801f1ac <uxr_seq_num_add>
 801edc0:	81e0      	strh	r0, [r4, #14]
 801edc2:	2001      	movs	r0, #1
 801edc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edc6:	bf00      	nop

0801edc8 <uxr_update_output_stream_heartbeat_timestamp>:
 801edc8:	b570      	push	{r4, r5, r6, lr}
 801edca:	8a01      	ldrh	r1, [r0, #16]
 801edcc:	4604      	mov	r4, r0
 801edce:	8a40      	ldrh	r0, [r0, #18]
 801edd0:	4615      	mov	r5, r2
 801edd2:	461e      	mov	r6, r3
 801edd4:	f000 f9f2 	bl	801f1bc <uxr_seq_num_cmp>
 801edd8:	2800      	cmp	r0, #0
 801edda:	db07      	blt.n	801edec <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801eddc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ede0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ede4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ede8:	2000      	movs	r0, #0
 801edea:	bd70      	pop	{r4, r5, r6, pc}
 801edec:	f894 0020 	ldrb.w	r0, [r4, #32]
 801edf0:	b940      	cbnz	r0, 801ee04 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801edf2:	2301      	movs	r3, #1
 801edf4:	f884 3020 	strb.w	r3, [r4, #32]
 801edf8:	3564      	adds	r5, #100	@ 0x64
 801edfa:	f146 0600 	adc.w	r6, r6, #0
 801edfe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ee02:	bd70      	pop	{r4, r5, r6, pc}
 801ee04:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ee08:	4295      	cmp	r5, r2
 801ee0a:	eb76 0303 	sbcs.w	r3, r6, r3
 801ee0e:	bfa5      	ittet	ge
 801ee10:	3001      	addge	r0, #1
 801ee12:	f884 0020 	strbge.w	r0, [r4, #32]
 801ee16:	2000      	movlt	r0, #0
 801ee18:	2001      	movge	r0, #1
 801ee1a:	e7ed      	b.n	801edf8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801ee1c <uxr_begin_output_nack_buffer_it>:
 801ee1c:	8a40      	ldrh	r0, [r0, #18]
 801ee1e:	4770      	bx	lr

0801ee20 <uxr_next_reliable_nack_buffer_to_send>:
 801ee20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee24:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801ee28:	b082      	sub	sp, #8
 801ee2a:	f1b8 0f00 	cmp.w	r8, #0
 801ee2e:	d011      	beq.n	801ee54 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801ee30:	4604      	mov	r4, r0
 801ee32:	8818      	ldrh	r0, [r3, #0]
 801ee34:	460e      	mov	r6, r1
 801ee36:	4617      	mov	r7, r2
 801ee38:	461d      	mov	r5, r3
 801ee3a:	2101      	movs	r1, #1
 801ee3c:	f000 f9b6 	bl	801f1ac <uxr_seq_num_add>
 801ee40:	8028      	strh	r0, [r5, #0]
 801ee42:	8a21      	ldrh	r1, [r4, #16]
 801ee44:	f000 f9ba 	bl	801f1bc <uxr_seq_num_cmp>
 801ee48:	2800      	cmp	r0, #0
 801ee4a:	dd07      	ble.n	801ee5c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801ee4c:	f04f 0800 	mov.w	r8, #0
 801ee50:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801ee54:	4640      	mov	r0, r8
 801ee56:	b002      	add	sp, #8
 801ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee5c:	8921      	ldrh	r1, [r4, #8]
 801ee5e:	8828      	ldrh	r0, [r5, #0]
 801ee60:	6823      	ldr	r3, [r4, #0]
 801ee62:	fbb0 f2f1 	udiv	r2, r0, r1
 801ee66:	fb01 0c12 	mls	ip, r1, r2, r0
 801ee6a:	fa1f f28c 	uxth.w	r2, ip
 801ee6e:	9301      	str	r3, [sp, #4]
 801ee70:	6863      	ldr	r3, [r4, #4]
 801ee72:	fbb3 fcf1 	udiv	ip, r3, r1
 801ee76:	9b01      	ldr	r3, [sp, #4]
 801ee78:	fb02 fc0c 	mul.w	ip, r2, ip
 801ee7c:	f10c 0c04 	add.w	ip, ip, #4
 801ee80:	4463      	add	r3, ip
 801ee82:	6033      	str	r3, [r6, #0]
 801ee84:	6823      	ldr	r3, [r4, #0]
 801ee86:	4463      	add	r3, ip
 801ee88:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801ee8c:	603b      	str	r3, [r7, #0]
 801ee8e:	7b22      	ldrb	r2, [r4, #12]
 801ee90:	429a      	cmp	r2, r3
 801ee92:	d0d2      	beq.n	801ee3a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801ee94:	4640      	mov	r0, r8
 801ee96:	b002      	add	sp, #8
 801ee98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ee9c <uxr_process_acknack>:
 801ee9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee9e:	4604      	mov	r4, r0
 801eea0:	460e      	mov	r6, r1
 801eea2:	4610      	mov	r0, r2
 801eea4:	2101      	movs	r1, #1
 801eea6:	f000 f985 	bl	801f1b4 <uxr_seq_num_sub>
 801eeaa:	8a61      	ldrh	r1, [r4, #18]
 801eeac:	f000 f982 	bl	801f1b4 <uxr_seq_num_sub>
 801eeb0:	b1c0      	cbz	r0, 801eee4 <uxr_process_acknack+0x48>
 801eeb2:	4605      	mov	r5, r0
 801eeb4:	2700      	movs	r7, #0
 801eeb6:	2101      	movs	r1, #1
 801eeb8:	8a60      	ldrh	r0, [r4, #18]
 801eeba:	f000 f977 	bl	801f1ac <uxr_seq_num_add>
 801eebe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801eec2:	fbb0 f1fc 	udiv	r1, r0, ip
 801eec6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801eeca:	fb0c 0111 	mls	r1, ip, r1, r0
 801eece:	b289      	uxth	r1, r1
 801eed0:	3701      	adds	r7, #1
 801eed2:	fbb3 f3fc 	udiv	r3, r3, ip
 801eed6:	fb01 f303 	mul.w	r3, r1, r3
 801eeda:	42bd      	cmp	r5, r7
 801eedc:	7b21      	ldrb	r1, [r4, #12]
 801eede:	8260      	strh	r0, [r4, #18]
 801eee0:	50d1      	str	r1, [r2, r3]
 801eee2:	d1e8      	bne.n	801eeb6 <uxr_process_acknack+0x1a>
 801eee4:	3e00      	subs	r6, #0
 801eee6:	f04f 0300 	mov.w	r3, #0
 801eeea:	bf18      	it	ne
 801eeec:	2601      	movne	r6, #1
 801eeee:	f884 3020 	strb.w	r3, [r4, #32]
 801eef2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801eef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801eef8 <uxr_is_output_up_to_date>:
 801eef8:	8a01      	ldrh	r1, [r0, #16]
 801eefa:	8a40      	ldrh	r0, [r0, #18]
 801eefc:	b508      	push	{r3, lr}
 801eefe:	f000 f95d 	bl	801f1bc <uxr_seq_num_cmp>
 801ef02:	fab0 f080 	clz	r0, r0
 801ef06:	0940      	lsrs	r0, r0, #5
 801ef08:	bd08      	pop	{r3, pc}
 801ef0a:	bf00      	nop

0801ef0c <get_available_free_slots>:
 801ef0c:	8902      	ldrh	r2, [r0, #8]
 801ef0e:	b1da      	cbz	r2, 801ef48 <get_available_free_slots+0x3c>
 801ef10:	b530      	push	{r4, r5, lr}
 801ef12:	2100      	movs	r1, #0
 801ef14:	6843      	ldr	r3, [r0, #4]
 801ef16:	6805      	ldr	r5, [r0, #0]
 801ef18:	7b04      	ldrb	r4, [r0, #12]
 801ef1a:	fbb3 fef2 	udiv	lr, r3, r2
 801ef1e:	4608      	mov	r0, r1
 801ef20:	460b      	mov	r3, r1
 801ef22:	fbb3 fcf2 	udiv	ip, r3, r2
 801ef26:	fb02 331c 	mls	r3, r2, ip, r3
 801ef2a:	b29b      	uxth	r3, r3
 801ef2c:	fb0e f303 	mul.w	r3, lr, r3
 801ef30:	3101      	adds	r1, #1
 801ef32:	f855 c003 	ldr.w	ip, [r5, r3]
 801ef36:	4564      	cmp	r4, ip
 801ef38:	bf08      	it	eq
 801ef3a:	3001      	addeq	r0, #1
 801ef3c:	b28b      	uxth	r3, r1
 801ef3e:	bf08      	it	eq
 801ef40:	b280      	uxtheq	r0, r0
 801ef42:	4293      	cmp	r3, r2
 801ef44:	d3ed      	bcc.n	801ef22 <get_available_free_slots+0x16>
 801ef46:	bd30      	pop	{r4, r5, pc}
 801ef48:	4610      	mov	r0, r2
 801ef4a:	4770      	bx	lr

0801ef4c <uxr_buffer_request_data>:
 801ef4c:	b530      	push	{r4, r5, lr}
 801ef4e:	b095      	sub	sp, #84	@ 0x54
 801ef50:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ef54:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801ef56:	9303      	str	r3, [sp, #12]
 801ef58:	2200      	movs	r2, #0
 801ef5a:	2d00      	cmp	r5, #0
 801ef5c:	bf14      	ite	ne
 801ef5e:	2101      	movne	r1, #1
 801ef60:	4611      	moveq	r1, r2
 801ef62:	4604      	mov	r4, r0
 801ef64:	f88d 301c 	strb.w	r3, [sp, #28]
 801ef68:	f88d 201d 	strb.w	r2, [sp, #29]
 801ef6c:	f88d 201e 	strb.w	r2, [sp, #30]
 801ef70:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801ef74:	d021      	beq.n	801efba <uxr_buffer_request_data+0x6e>
 801ef76:	682a      	ldr	r2, [r5, #0]
 801ef78:	686b      	ldr	r3, [r5, #4]
 801ef7a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801ef7e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801ef82:	2210      	movs	r2, #16
 801ef84:	2308      	movs	r3, #8
 801ef86:	2100      	movs	r1, #0
 801ef88:	e9cd 3100 	strd	r3, r1, [sp]
 801ef8c:	4620      	mov	r0, r4
 801ef8e:	9905      	ldr	r1, [sp, #20]
 801ef90:	ab0c      	add	r3, sp, #48	@ 0x30
 801ef92:	f7f5 fa6f 	bl	8014474 <uxr_prepare_stream_to_write_submessage>
 801ef96:	b918      	cbnz	r0, 801efa0 <uxr_buffer_request_data+0x54>
 801ef98:	4604      	mov	r4, r0
 801ef9a:	4620      	mov	r0, r4
 801ef9c:	b015      	add	sp, #84	@ 0x54
 801ef9e:	bd30      	pop	{r4, r5, pc}
 801efa0:	9904      	ldr	r1, [sp, #16]
 801efa2:	aa06      	add	r2, sp, #24
 801efa4:	4620      	mov	r0, r4
 801efa6:	f7f5 fb9b 	bl	80146e0 <uxr_init_base_object_request>
 801efaa:	a906      	add	r1, sp, #24
 801efac:	4604      	mov	r4, r0
 801efae:	a80c      	add	r0, sp, #48	@ 0x30
 801efb0:	f7f6 feca 	bl	8015d48 <uxr_serialize_READ_DATA_Payload>
 801efb4:	4620      	mov	r0, r4
 801efb6:	b015      	add	sp, #84	@ 0x54
 801efb8:	bd30      	pop	{r4, r5, pc}
 801efba:	2208      	movs	r2, #8
 801efbc:	e7e2      	b.n	801ef84 <uxr_buffer_request_data+0x38>
 801efbe:	bf00      	nop

0801efc0 <uxr_buffer_cancel_data>:
 801efc0:	b510      	push	{r4, lr}
 801efc2:	b094      	sub	sp, #80	@ 0x50
 801efc4:	2300      	movs	r3, #0
 801efc6:	9202      	str	r2, [sp, #8]
 801efc8:	9205      	str	r2, [sp, #20]
 801efca:	9301      	str	r3, [sp, #4]
 801efcc:	2201      	movs	r2, #1
 801efce:	f8ad 301c 	strh.w	r3, [sp, #28]
 801efd2:	f88d 301e 	strb.w	r3, [sp, #30]
 801efd6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801efda:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801efde:	2308      	movs	r3, #8
 801efe0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801efe4:	9300      	str	r3, [sp, #0]
 801efe6:	2210      	movs	r2, #16
 801efe8:	ab0c      	add	r3, sp, #48	@ 0x30
 801efea:	4604      	mov	r4, r0
 801efec:	9103      	str	r1, [sp, #12]
 801efee:	f7f5 fa41 	bl	8014474 <uxr_prepare_stream_to_write_submessage>
 801eff2:	b918      	cbnz	r0, 801effc <uxr_buffer_cancel_data+0x3c>
 801eff4:	4604      	mov	r4, r0
 801eff6:	4620      	mov	r0, r4
 801eff8:	b014      	add	sp, #80	@ 0x50
 801effa:	bd10      	pop	{r4, pc}
 801effc:	9905      	ldr	r1, [sp, #20]
 801effe:	aa06      	add	r2, sp, #24
 801f000:	4620      	mov	r0, r4
 801f002:	f7f5 fb6d 	bl	80146e0 <uxr_init_base_object_request>
 801f006:	a906      	add	r1, sp, #24
 801f008:	4604      	mov	r4, r0
 801f00a:	a80c      	add	r0, sp, #48	@ 0x30
 801f00c:	f7f6 fe9c 	bl	8015d48 <uxr_serialize_READ_DATA_Payload>
 801f010:	4620      	mov	r0, r4
 801f012:	b014      	add	sp, #80	@ 0x50
 801f014:	bd10      	pop	{r4, pc}
 801f016:	bf00      	nop

0801f018 <read_submessage_format>:
 801f018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f01c:	b095      	sub	sp, #84	@ 0x54
 801f01e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801f022:	b113      	cbz	r3, 801f02a <read_submessage_format+0x12>
 801f024:	b015      	add	sp, #84	@ 0x54
 801f026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f02a:	460c      	mov	r4, r1
 801f02c:	4615      	mov	r5, r2
 801f02e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801f032:	4607      	mov	r7, r0
 801f034:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801f036:	9004      	str	r0, [sp, #16]
 801f038:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f03a:	9005      	str	r0, [sp, #20]
 801f03c:	1a52      	subs	r2, r2, r1
 801f03e:	a80c      	add	r0, sp, #48	@ 0x30
 801f040:	4699      	mov	r9, r3
 801f042:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801f046:	f7f3 ff31 	bl	8012eac <ucdr_init_buffer>
 801f04a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801f04e:	a80c      	add	r0, sp, #48	@ 0x30
 801f050:	f7f3 ff00 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 801f054:	69e2      	ldr	r2, [r4, #28]
 801f056:	b19a      	cbz	r2, 801f080 <read_submessage_format+0x68>
 801f058:	f1b8 0f07 	cmp.w	r8, #7
 801f05c:	f882 9014 	strb.w	r9, [r2, #20]
 801f060:	d040      	beq.n	801f0e4 <read_submessage_format+0xcc>
 801f062:	f1b8 0f08 	cmp.w	r8, #8
 801f066:	d02e      	beq.n	801f0c6 <read_submessage_format+0xae>
 801f068:	f1b8 0f06 	cmp.w	r8, #6
 801f06c:	d011      	beq.n	801f092 <read_submessage_format+0x7a>
 801f06e:	2301      	movs	r3, #1
 801f070:	7513      	strb	r3, [r2, #20]
 801f072:	4629      	mov	r1, r5
 801f074:	4620      	mov	r0, r4
 801f076:	f7f3 ff69 	bl	8012f4c <ucdr_advance_buffer>
 801f07a:	b015      	add	sp, #84	@ 0x54
 801f07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f080:	f1b8 0f07 	cmp.w	r8, #7
 801f084:	d02e      	beq.n	801f0e4 <read_submessage_format+0xcc>
 801f086:	f1b8 0f08 	cmp.w	r8, #8
 801f08a:	d01c      	beq.n	801f0c6 <read_submessage_format+0xae>
 801f08c:	f1b8 0f06 	cmp.w	r8, #6
 801f090:	d1ef      	bne.n	801f072 <read_submessage_format+0x5a>
 801f092:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801f096:	f1b8 0f00 	cmp.w	r8, #0
 801f09a:	d011      	beq.n	801f0c0 <read_submessage_format+0xa8>
 801f09c:	ab0c      	add	r3, sp, #48	@ 0x30
 801f09e:	e9cd 3500 	strd	r3, r5, [sp]
 801f0a2:	2306      	movs	r3, #6
 801f0a4:	f88d 3016 	strb.w	r3, [sp, #22]
 801f0a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801f0ac:	9302      	str	r3, [sp, #8]
 801f0ae:	4632      	mov	r2, r6
 801f0b0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801f0b4:	4638      	mov	r0, r7
 801f0b6:	47c0      	blx	r8
 801f0b8:	2301      	movs	r3, #1
 801f0ba:	69e2      	ldr	r2, [r4, #28]
 801f0bc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801f0c0:	2a00      	cmp	r2, #0
 801f0c2:	d1d4      	bne.n	801f06e <read_submessage_format+0x56>
 801f0c4:	e7d5      	b.n	801f072 <read_submessage_format+0x5a>
 801f0c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d0f8      	beq.n	801f0c0 <read_submessage_format+0xa8>
 801f0ce:	a906      	add	r1, sp, #24
 801f0d0:	a80c      	add	r0, sp, #48	@ 0x30
 801f0d2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801f0d6:	f7f6 fefd 	bl	8015ed4 <uxr_deserialize_SampleIdentity>
 801f0da:	b9a0      	cbnz	r0, 801f106 <read_submessage_format+0xee>
 801f0dc:	69e2      	ldr	r2, [r4, #28]
 801f0de:	2a00      	cmp	r2, #0
 801f0e0:	d1c5      	bne.n	801f06e <read_submessage_format+0x56>
 801f0e2:	e7c6      	b.n	801f072 <read_submessage_format+0x5a>
 801f0e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801f0e8:	b13b      	cbz	r3, 801f0fa <read_submessage_format+0xe2>
 801f0ea:	a906      	add	r1, sp, #24
 801f0ec:	a80c      	add	r0, sp, #48	@ 0x30
 801f0ee:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801f0f2:	f7f6 fbc3 	bl	801587c <uxr_deserialize_BaseObjectRequest>
 801f0f6:	bb60      	cbnz	r0, 801f152 <read_submessage_format+0x13a>
 801f0f8:	69e2      	ldr	r2, [r4, #28]
 801f0fa:	68a3      	ldr	r3, [r4, #8]
 801f0fc:	442b      	add	r3, r5
 801f0fe:	60a3      	str	r3, [r4, #8]
 801f100:	2a00      	cmp	r2, #0
 801f102:	d1b4      	bne.n	801f06e <read_submessage_format+0x56>
 801f104:	e7b5      	b.n	801f072 <read_submessage_format+0x5a>
 801f106:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801f10a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f10c:	1a52      	subs	r2, r2, r1
 801f10e:	eba8 0803 	sub.w	r8, r8, r3
 801f112:	a80c      	add	r0, sp, #48	@ 0x30
 801f114:	f7f3 feca 	bl	8012eac <ucdr_init_buffer>
 801f118:	44a8      	add	r8, r5
 801f11a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801f11e:	a80c      	add	r0, sp, #48	@ 0x30
 801f120:	f7f3 fe98 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 801f124:	fa1f f888 	uxth.w	r8, r8
 801f128:	ab0c      	add	r3, sp, #48	@ 0x30
 801f12a:	9300      	str	r3, [sp, #0]
 801f12c:	f8cd 8004 	str.w	r8, [sp, #4]
 801f130:	2108      	movs	r1, #8
 801f132:	f88d 1016 	strb.w	r1, [sp, #22]
 801f136:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801f13a:	9102      	str	r1, [sp, #8]
 801f13c:	ab06      	add	r3, sp, #24
 801f13e:	4632      	mov	r2, r6
 801f140:	9905      	ldr	r1, [sp, #20]
 801f142:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801f146:	4638      	mov	r0, r7
 801f148:	47b0      	blx	r6
 801f14a:	2301      	movs	r3, #1
 801f14c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801f150:	e7c4      	b.n	801f0dc <read_submessage_format+0xc4>
 801f152:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801f156:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f158:	1a52      	subs	r2, r2, r1
 801f15a:	a80c      	add	r0, sp, #48	@ 0x30
 801f15c:	eba8 0803 	sub.w	r8, r8, r3
 801f160:	f7f3 fea4 	bl	8012eac <ucdr_init_buffer>
 801f164:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801f168:	a80c      	add	r0, sp, #48	@ 0x30
 801f16a:	f7f3 fe73 	bl	8012e54 <ucdr_set_on_full_buffer_callback>
 801f16e:	ab0c      	add	r3, sp, #48	@ 0x30
 801f170:	9300      	str	r3, [sp, #0]
 801f172:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801f176:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801f17a:	44a8      	add	r8, r5
 801f17c:	fa1f f888 	uxth.w	r8, r8
 801f180:	f8cd 8004 	str.w	r8, [sp, #4]
 801f184:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801f188:	2107      	movs	r1, #7
 801f18a:	f88d 1016 	strb.w	r1, [sp, #22]
 801f18e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801f192:	9102      	str	r1, [sp, #8]
 801f194:	4632      	mov	r2, r6
 801f196:	b29b      	uxth	r3, r3
 801f198:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801f19c:	9905      	ldr	r1, [sp, #20]
 801f19e:	4638      	mov	r0, r7
 801f1a0:	47b0      	blx	r6
 801f1a2:	2301      	movs	r3, #1
 801f1a4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801f1a8:	e7a6      	b.n	801f0f8 <read_submessage_format+0xe0>
 801f1aa:	bf00      	nop

0801f1ac <uxr_seq_num_add>:
 801f1ac:	4408      	add	r0, r1
 801f1ae:	b280      	uxth	r0, r0
 801f1b0:	4770      	bx	lr
 801f1b2:	bf00      	nop

0801f1b4 <uxr_seq_num_sub>:
 801f1b4:	1a40      	subs	r0, r0, r1
 801f1b6:	b280      	uxth	r0, r0
 801f1b8:	4770      	bx	lr
 801f1ba:	bf00      	nop

0801f1bc <uxr_seq_num_cmp>:
 801f1bc:	4288      	cmp	r0, r1
 801f1be:	d011      	beq.n	801f1e4 <uxr_seq_num_cmp+0x28>
 801f1c0:	d309      	bcc.n	801f1d6 <uxr_seq_num_cmp+0x1a>
 801f1c2:	4288      	cmp	r0, r1
 801f1c4:	d910      	bls.n	801f1e8 <uxr_seq_num_cmp+0x2c>
 801f1c6:	1a40      	subs	r0, r0, r1
 801f1c8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801f1cc:	bfd4      	ite	le
 801f1ce:	2001      	movle	r0, #1
 801f1d0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801f1d4:	4770      	bx	lr
 801f1d6:	1a0b      	subs	r3, r1, r0
 801f1d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801f1dc:	daf1      	bge.n	801f1c2 <uxr_seq_num_cmp+0x6>
 801f1de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f1e2:	4770      	bx	lr
 801f1e4:	2000      	movs	r0, #0
 801f1e6:	4770      	bx	lr
 801f1e8:	2001      	movs	r0, #1
 801f1ea:	4770      	bx	lr

0801f1ec <uxr_init_framing_io>:
 801f1ec:	2300      	movs	r3, #0
 801f1ee:	7041      	strb	r1, [r0, #1]
 801f1f0:	7003      	strb	r3, [r0, #0]
 801f1f2:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801f1f4:	4770      	bx	lr
 801f1f6:	bf00      	nop

0801f1f8 <uxr_write_framed_msg>:
 801f1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1fc:	4617      	mov	r7, r2
 801f1fe:	7842      	ldrb	r2, [r0, #1]
 801f200:	b083      	sub	sp, #12
 801f202:	460e      	mov	r6, r1
 801f204:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801f208:	469a      	mov	sl, r3
 801f20a:	2901      	cmp	r1, #1
 801f20c:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801f210:	4604      	mov	r4, r0
 801f212:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801f216:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801f21a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801f21e:	f240 8137 	bls.w	801f490 <uxr_write_framed_msg+0x298>
 801f222:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801f226:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801f22a:	2901      	cmp	r1, #1
 801f22c:	f04f 0202 	mov.w	r2, #2
 801f230:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f234:	f240 808f 	bls.w	801f356 <uxr_write_framed_msg+0x15e>
 801f238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f23a:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801f23e:	b2dd      	uxtb	r5, r3
 801f240:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801f244:	2203      	movs	r2, #3
 801f246:	2901      	cmp	r1, #1
 801f248:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f24c:	f240 809a 	bls.w	801f384 <uxr_write_framed_msg+0x18c>
 801f250:	18a1      	adds	r1, r4, r2
 801f252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f254:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801f258:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f25c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801f260:	3201      	adds	r2, #1
 801f262:	2801      	cmp	r0, #1
 801f264:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f268:	f240 80a0 	bls.w	801f3ac <uxr_write_framed_msg+0x1b4>
 801f26c:	18a0      	adds	r0, r4, r2
 801f26e:	3201      	adds	r2, #1
 801f270:	b2d2      	uxtb	r2, r2
 801f272:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801f276:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	f000 80a9 	beq.w	801f3d2 <uxr_write_framed_msg+0x1da>
 801f280:	f04f 0900 	mov.w	r9, #0
 801f284:	46c8      	mov	r8, r9
 801f286:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801f28a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801f28e:	2901      	cmp	r1, #1
 801f290:	f240 80c3 	bls.w	801f41a <uxr_write_framed_msg+0x222>
 801f294:	2a29      	cmp	r2, #41	@ 0x29
 801f296:	f200 809f 	bhi.w	801f3d8 <uxr_write_framed_msg+0x1e0>
 801f29a:	18a1      	adds	r1, r4, r2
 801f29c:	3201      	adds	r2, #1
 801f29e:	b2d2      	uxtb	r2, r2
 801f2a0:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801f2a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f2a8:	ea89 0303 	eor.w	r3, r9, r3
 801f2ac:	498c      	ldr	r1, [pc, #560]	@ (801f4e0 <uxr_write_framed_msg+0x2e8>)
 801f2ae:	b2db      	uxtb	r3, r3
 801f2b0:	f108 0801 	add.w	r8, r8, #1
 801f2b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801f2b8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801f2bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f2be:	4543      	cmp	r3, r8
 801f2c0:	d8e1      	bhi.n	801f286 <uxr_write_framed_msg+0x8e>
 801f2c2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801f2c6:	fa5f f889 	uxtb.w	r8, r9
 801f2ca:	9301      	str	r3, [sp, #4]
 801f2cc:	f04f 0900 	mov.w	r9, #0
 801f2d0:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801f2d4:	fa5f f18a 	uxtb.w	r1, sl
 801f2d8:	2901      	cmp	r1, #1
 801f2da:	d921      	bls.n	801f320 <uxr_write_framed_msg+0x128>
 801f2dc:	2a29      	cmp	r2, #41	@ 0x29
 801f2de:	f240 80af 	bls.w	801f440 <uxr_write_framed_msg+0x248>
 801f2e2:	2500      	movs	r5, #0
 801f2e4:	e000      	b.n	801f2e8 <uxr_write_framed_msg+0xf0>
 801f2e6:	b160      	cbz	r0, 801f302 <uxr_write_framed_msg+0x10a>
 801f2e8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801f2ec:	1b52      	subs	r2, r2, r5
 801f2ee:	465b      	mov	r3, fp
 801f2f0:	4421      	add	r1, r4
 801f2f2:	4638      	mov	r0, r7
 801f2f4:	47b0      	blx	r6
 801f2f6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801f2fa:	4405      	add	r5, r0
 801f2fc:	4295      	cmp	r5, r2
 801f2fe:	d3f2      	bcc.n	801f2e6 <uxr_write_framed_msg+0xee>
 801f300:	d003      	beq.n	801f30a <uxr_write_framed_msg+0x112>
 801f302:	2000      	movs	r0, #0
 801f304:	b003      	add	sp, #12
 801f306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f30a:	fa5f f18a 	uxtb.w	r1, sl
 801f30e:	f04f 0300 	mov.w	r3, #0
 801f312:	2901      	cmp	r1, #1
 801f314:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801f318:	f04f 0200 	mov.w	r2, #0
 801f31c:	f200 8090 	bhi.w	801f440 <uxr_write_framed_msg+0x248>
 801f320:	1c51      	adds	r1, r2, #1
 801f322:	b2c9      	uxtb	r1, r1
 801f324:	2929      	cmp	r1, #41	@ 0x29
 801f326:	d8dc      	bhi.n	801f2e2 <uxr_write_framed_msg+0xea>
 801f328:	18a5      	adds	r5, r4, r2
 801f32a:	4421      	add	r1, r4
 801f32c:	3202      	adds	r2, #2
 801f32e:	f088 0820 	eor.w	r8, r8, #32
 801f332:	4648      	mov	r0, r9
 801f334:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801f338:	b2d2      	uxtb	r2, r2
 801f33a:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801f33e:	f04f 0901 	mov.w	r9, #1
 801f342:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801f346:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f34a:	2800      	cmp	r0, #0
 801f34c:	f040 8085 	bne.w	801f45a <uxr_write_framed_msg+0x262>
 801f350:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801f354:	e7bc      	b.n	801f2d0 <uxr_write_framed_msg+0xd8>
 801f356:	4611      	mov	r1, r2
 801f358:	f04f 0c03 	mov.w	ip, #3
 801f35c:	2204      	movs	r2, #4
 801f35e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f360:	4421      	add	r1, r4
 801f362:	b2dd      	uxtb	r5, r3
 801f364:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801f368:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 801f36c:	44a4      	add	ip, r4
 801f36e:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801f372:	f080 0020 	eor.w	r0, r0, #32
 801f376:	2901      	cmp	r1, #1
 801f378:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801f37c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f380:	f63f af66 	bhi.w	801f250 <uxr_write_framed_msg+0x58>
 801f384:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f386:	18a0      	adds	r0, r4, r2
 801f388:	f085 0520 	eor.w	r5, r5, #32
 801f38c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801f390:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801f394:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801f398:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801f39c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801f3a0:	3202      	adds	r2, #2
 801f3a2:	2801      	cmp	r0, #1
 801f3a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f3a8:	f63f af60 	bhi.w	801f26c <uxr_write_framed_msg+0x74>
 801f3ac:	1c50      	adds	r0, r2, #1
 801f3ae:	18a5      	adds	r5, r4, r2
 801f3b0:	fa54 f080 	uxtab	r0, r4, r0
 801f3b4:	3202      	adds	r2, #2
 801f3b6:	f081 0120 	eor.w	r1, r1, #32
 801f3ba:	b2d2      	uxtb	r2, r2
 801f3bc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801f3c0:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801f3c4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801f3c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	f47f af57 	bne.w	801f280 <uxr_write_framed_msg+0x88>
 801f3d2:	9301      	str	r3, [sp, #4]
 801f3d4:	4698      	mov	r8, r3
 801f3d6:	e779      	b.n	801f2cc <uxr_write_framed_msg+0xd4>
 801f3d8:	2500      	movs	r5, #0
 801f3da:	e001      	b.n	801f3e0 <uxr_write_framed_msg+0x1e8>
 801f3dc:	2800      	cmp	r0, #0
 801f3de:	d090      	beq.n	801f302 <uxr_write_framed_msg+0x10a>
 801f3e0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801f3e4:	1b52      	subs	r2, r2, r5
 801f3e6:	465b      	mov	r3, fp
 801f3e8:	4421      	add	r1, r4
 801f3ea:	4638      	mov	r0, r7
 801f3ec:	47b0      	blx	r6
 801f3ee:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801f3f2:	4405      	add	r5, r0
 801f3f4:	4295      	cmp	r5, r2
 801f3f6:	d3f1      	bcc.n	801f3dc <uxr_write_framed_msg+0x1e4>
 801f3f8:	d183      	bne.n	801f302 <uxr_write_framed_msg+0x10a>
 801f3fa:	f04f 0300 	mov.w	r3, #0
 801f3fe:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801f402:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f404:	4543      	cmp	r3, r8
 801f406:	d964      	bls.n	801f4d2 <uxr_write_framed_msg+0x2da>
 801f408:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801f40c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801f410:	2901      	cmp	r1, #1
 801f412:	f04f 0200 	mov.w	r2, #0
 801f416:	f63f af3d 	bhi.w	801f294 <uxr_write_framed_msg+0x9c>
 801f41a:	1c51      	adds	r1, r2, #1
 801f41c:	b2c9      	uxtb	r1, r1
 801f41e:	2929      	cmp	r1, #41	@ 0x29
 801f420:	d8da      	bhi.n	801f3d8 <uxr_write_framed_msg+0x1e0>
 801f422:	18a0      	adds	r0, r4, r2
 801f424:	4421      	add	r1, r4
 801f426:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801f42a:	3202      	adds	r2, #2
 801f42c:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801f430:	b2d2      	uxtb	r2, r2
 801f432:	f083 0020 	eor.w	r0, r3, #32
 801f436:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801f43a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f43e:	e733      	b.n	801f2a8 <uxr_write_framed_msg+0xb0>
 801f440:	18a1      	adds	r1, r4, r2
 801f442:	3201      	adds	r2, #1
 801f444:	4648      	mov	r0, r9
 801f446:	b2d2      	uxtb	r2, r2
 801f448:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801f44c:	f04f 0901 	mov.w	r9, #1
 801f450:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f454:	2800      	cmp	r0, #0
 801f456:	f43f af7b 	beq.w	801f350 <uxr_write_framed_msg+0x158>
 801f45a:	2500      	movs	r5, #0
 801f45c:	e002      	b.n	801f464 <uxr_write_framed_msg+0x26c>
 801f45e:	2800      	cmp	r0, #0
 801f460:	f43f af4f 	beq.w	801f302 <uxr_write_framed_msg+0x10a>
 801f464:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801f468:	1b52      	subs	r2, r2, r5
 801f46a:	465b      	mov	r3, fp
 801f46c:	4421      	add	r1, r4
 801f46e:	4638      	mov	r0, r7
 801f470:	47b0      	blx	r6
 801f472:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801f476:	4405      	add	r5, r0
 801f478:	4295      	cmp	r5, r2
 801f47a:	d3f0      	bcc.n	801f45e <uxr_write_framed_msg+0x266>
 801f47c:	f47f af41 	bne.w	801f302 <uxr_write_framed_msg+0x10a>
 801f480:	2300      	movs	r3, #0
 801f482:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801f486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f488:	b298      	uxth	r0, r3
 801f48a:	b003      	add	sp, #12
 801f48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f490:	217d      	movs	r1, #125	@ 0x7d
 801f492:	f082 0220 	eor.w	r2, r2, #32
 801f496:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801f49a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801f49e:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801f4a2:	2901      	cmp	r1, #1
 801f4a4:	f04f 0203 	mov.w	r2, #3
 801f4a8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f4ac:	d804      	bhi.n	801f4b8 <uxr_write_framed_msg+0x2c0>
 801f4ae:	4611      	mov	r1, r2
 801f4b0:	f04f 0c04 	mov.w	ip, #4
 801f4b4:	2205      	movs	r2, #5
 801f4b6:	e752      	b.n	801f35e <uxr_write_framed_msg+0x166>
 801f4b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f4ba:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801f4be:	b2dd      	uxtb	r5, r3
 801f4c0:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801f4c4:	2204      	movs	r2, #4
 801f4c6:	2901      	cmp	r1, #1
 801f4c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801f4cc:	f63f aec0 	bhi.w	801f250 <uxr_write_framed_msg+0x58>
 801f4d0:	e758      	b.n	801f384 <uxr_write_framed_msg+0x18c>
 801f4d2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801f4d6:	fa5f f889 	uxtb.w	r8, r9
 801f4da:	9301      	str	r3, [sp, #4]
 801f4dc:	2200      	movs	r2, #0
 801f4de:	e6f5      	b.n	801f2cc <uxr_write_framed_msg+0xd4>
 801f4e0:	08025758 	.word	0x08025758

0801f4e4 <uxr_framing_read_transport>:
 801f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4e8:	4604      	mov	r4, r0
 801f4ea:	b083      	sub	sp, #12
 801f4ec:	461f      	mov	r7, r3
 801f4ee:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801f4f2:	4689      	mov	r9, r1
 801f4f4:	4692      	mov	sl, r2
 801f4f6:	f7f5 faa1 	bl	8014a3c <uxr_millis>
 801f4fa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801f4fe:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801f502:	42b3      	cmp	r3, r6
 801f504:	4680      	mov	r8, r0
 801f506:	d061      	beq.n	801f5cc <uxr_framing_read_transport+0xe8>
 801f508:	d81c      	bhi.n	801f544 <uxr_framing_read_transport+0x60>
 801f50a:	1e75      	subs	r5, r6, #1
 801f50c:	1aed      	subs	r5, r5, r3
 801f50e:	b2ed      	uxtb	r5, r5
 801f510:	2600      	movs	r6, #0
 801f512:	455d      	cmp	r5, fp
 801f514:	d81f      	bhi.n	801f556 <uxr_framing_read_transport+0x72>
 801f516:	19ab      	adds	r3, r5, r6
 801f518:	455b      	cmp	r3, fp
 801f51a:	bf84      	itt	hi
 801f51c:	ebab 0605 	subhi.w	r6, fp, r5
 801f520:	b2f6      	uxtbhi	r6, r6
 801f522:	b9ed      	cbnz	r5, 801f560 <uxr_framing_read_transport+0x7c>
 801f524:	f04f 0b00 	mov.w	fp, #0
 801f528:	f7f5 fa88 	bl	8014a3c <uxr_millis>
 801f52c:	683b      	ldr	r3, [r7, #0]
 801f52e:	eba0 0808 	sub.w	r8, r0, r8
 801f532:	eba3 0308 	sub.w	r3, r3, r8
 801f536:	4658      	mov	r0, fp
 801f538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f53c:	603b      	str	r3, [r7, #0]
 801f53e:	b003      	add	sp, #12
 801f540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f544:	2e00      	cmp	r6, #0
 801f546:	d049      	beq.n	801f5dc <uxr_framing_read_transport+0xf8>
 801f548:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801f54c:	b2ed      	uxtb	r5, r5
 801f54e:	3e01      	subs	r6, #1
 801f550:	455d      	cmp	r5, fp
 801f552:	b2f6      	uxtb	r6, r6
 801f554:	d9df      	bls.n	801f516 <uxr_framing_read_transport+0x32>
 801f556:	fa5f f58b 	uxtb.w	r5, fp
 801f55a:	2600      	movs	r6, #0
 801f55c:	2d00      	cmp	r5, #0
 801f55e:	d0e1      	beq.n	801f524 <uxr_framing_read_transport+0x40>
 801f560:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f564:	3102      	adds	r1, #2
 801f566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f568:	9300      	str	r3, [sp, #0]
 801f56a:	683b      	ldr	r3, [r7, #0]
 801f56c:	4421      	add	r1, r4
 801f56e:	462a      	mov	r2, r5
 801f570:	4650      	mov	r0, sl
 801f572:	47c8      	blx	r9
 801f574:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801f578:	4a1a      	ldr	r2, [pc, #104]	@ (801f5e4 <uxr_framing_read_transport+0x100>)
 801f57a:	4403      	add	r3, r0
 801f57c:	0859      	lsrs	r1, r3, #1
 801f57e:	fba2 2101 	umull	r2, r1, r2, r1
 801f582:	0889      	lsrs	r1, r1, #2
 801f584:	222a      	movs	r2, #42	@ 0x2a
 801f586:	fb02 3111 	mls	r1, r2, r1, r3
 801f58a:	4683      	mov	fp, r0
 801f58c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801f590:	2800      	cmp	r0, #0
 801f592:	d0c7      	beq.n	801f524 <uxr_framing_read_transport+0x40>
 801f594:	42a8      	cmp	r0, r5
 801f596:	d1c7      	bne.n	801f528 <uxr_framing_read_transport+0x44>
 801f598:	2e00      	cmp	r6, #0
 801f59a:	d0c5      	beq.n	801f528 <uxr_framing_read_transport+0x44>
 801f59c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f59e:	9300      	str	r3, [sp, #0]
 801f5a0:	3102      	adds	r1, #2
 801f5a2:	4632      	mov	r2, r6
 801f5a4:	4421      	add	r1, r4
 801f5a6:	2300      	movs	r3, #0
 801f5a8:	4650      	mov	r0, sl
 801f5aa:	47c8      	blx	r9
 801f5ac:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f5b0:	4a0c      	ldr	r2, [pc, #48]	@ (801f5e4 <uxr_framing_read_transport+0x100>)
 801f5b2:	180b      	adds	r3, r1, r0
 801f5b4:	0859      	lsrs	r1, r3, #1
 801f5b6:	fba2 1201 	umull	r1, r2, r2, r1
 801f5ba:	0892      	lsrs	r2, r2, #2
 801f5bc:	212a      	movs	r1, #42	@ 0x2a
 801f5be:	fb01 3312 	mls	r3, r1, r2, r3
 801f5c2:	eb00 0b05 	add.w	fp, r0, r5
 801f5c6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801f5ca:	e7ad      	b.n	801f528 <uxr_framing_read_transport+0x44>
 801f5cc:	2600      	movs	r6, #0
 801f5ce:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801f5d2:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801f5d4:	d9bf      	bls.n	801f556 <uxr_framing_read_transport+0x72>
 801f5d6:	2102      	movs	r1, #2
 801f5d8:	2529      	movs	r5, #41	@ 0x29
 801f5da:	e7c4      	b.n	801f566 <uxr_framing_read_transport+0x82>
 801f5dc:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801f5e0:	b2ed      	uxtb	r5, r5
 801f5e2:	e796      	b.n	801f512 <uxr_framing_read_transport+0x2e>
 801f5e4:	30c30c31 	.word	0x30c30c31

0801f5e8 <uxr_read_framed_msg>:
 801f5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5ec:	461e      	mov	r6, r3
 801f5ee:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801f5f2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801f5f6:	429d      	cmp	r5, r3
 801f5f8:	b083      	sub	sp, #12
 801f5fa:	4604      	mov	r4, r0
 801f5fc:	4688      	mov	r8, r1
 801f5fe:	4691      	mov	r9, r2
 801f600:	f000 8188 	beq.w	801f914 <uxr_read_framed_msg+0x32c>
 801f604:	7823      	ldrb	r3, [r4, #0]
 801f606:	4dc1      	ldr	r5, [pc, #772]	@ (801f90c <uxr_read_framed_msg+0x324>)
 801f608:	4fc1      	ldr	r7, [pc, #772]	@ (801f910 <uxr_read_framed_msg+0x328>)
 801f60a:	2b07      	cmp	r3, #7
 801f60c:	d8fd      	bhi.n	801f60a <uxr_read_framed_msg+0x22>
 801f60e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f612:	0115      	.short	0x0115
 801f614:	00d600f6 	.word	0x00d600f6
 801f618:	009000b9 	.word	0x009000b9
 801f61c:	0030004d 	.word	0x0030004d
 801f620:	0008      	.short	0x0008
 801f622:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f626:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801f62a:	4299      	cmp	r1, r3
 801f62c:	f000 814a 	beq.w	801f8c4 <uxr_read_framed_msg+0x2dc>
 801f630:	18e2      	adds	r2, r4, r3
 801f632:	7892      	ldrb	r2, [r2, #2]
 801f634:	2a7d      	cmp	r2, #125	@ 0x7d
 801f636:	f000 8199 	beq.w	801f96c <uxr_read_framed_msg+0x384>
 801f63a:	3301      	adds	r3, #1
 801f63c:	0858      	lsrs	r0, r3, #1
 801f63e:	fba5 1000 	umull	r1, r0, r5, r0
 801f642:	0880      	lsrs	r0, r0, #2
 801f644:	212a      	movs	r1, #42	@ 0x2a
 801f646:	fb01 3310 	mls	r3, r1, r0, r3
 801f64a:	2a7e      	cmp	r2, #126	@ 0x7e
 801f64c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f650:	f000 8252 	beq.w	801faf8 <uxr_read_framed_msg+0x510>
 801f654:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801f656:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801f658:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801f65c:	b29b      	uxth	r3, r3
 801f65e:	2200      	movs	r2, #0
 801f660:	4299      	cmp	r1, r3
 801f662:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801f664:	7022      	strb	r2, [r4, #0]
 801f666:	f000 8179 	beq.w	801f95c <uxr_read_framed_msg+0x374>
 801f66a:	2000      	movs	r0, #0
 801f66c:	b003      	add	sp, #12
 801f66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f672:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f676:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801f67a:	4299      	cmp	r1, r3
 801f67c:	f000 8131 	beq.w	801f8e2 <uxr_read_framed_msg+0x2fa>
 801f680:	18e2      	adds	r2, r4, r3
 801f682:	7890      	ldrb	r0, [r2, #2]
 801f684:	287d      	cmp	r0, #125	@ 0x7d
 801f686:	f000 8190 	beq.w	801f9aa <uxr_read_framed_msg+0x3c2>
 801f68a:	3301      	adds	r3, #1
 801f68c:	085a      	lsrs	r2, r3, #1
 801f68e:	fba5 1202 	umull	r1, r2, r5, r2
 801f692:	0892      	lsrs	r2, r2, #2
 801f694:	212a      	movs	r1, #42	@ 0x2a
 801f696:	fb01 3312 	mls	r3, r1, r2, r3
 801f69a:	287e      	cmp	r0, #126	@ 0x7e
 801f69c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f6a0:	f000 821a 	beq.w	801fad8 <uxr_read_framed_msg+0x4f0>
 801f6a4:	2307      	movs	r3, #7
 801f6a6:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801f6a8:	7023      	strb	r3, [r4, #0]
 801f6aa:	e7ae      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f6ac:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801f6ae:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801f6b2:	459e      	cmp	lr, r3
 801f6b4:	d938      	bls.n	801f728 <uxr_read_framed_msg+0x140>
 801f6b6:	ee07 8a90 	vmov	s15, r8
 801f6ba:	212a      	movs	r1, #42	@ 0x2a
 801f6bc:	e020      	b.n	801f700 <uxr_read_framed_msg+0x118>
 801f6be:	f89b c002 	ldrb.w	ip, [fp, #2]
 801f6c2:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801f6c6:	f000 80d4 	beq.w	801f872 <uxr_read_framed_msg+0x28a>
 801f6ca:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801f6ce:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801f6d2:	f000 8219 	beq.w	801fb08 <uxr_read_framed_msg+0x520>
 801f6d6:	f806 c003 	strb.w	ip, [r6, r3]
 801f6da:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801f6de:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801f6e0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801f6e4:	ea8a 000c 	eor.w	r0, sl, ip
 801f6e8:	b2c0      	uxtb	r0, r0
 801f6ea:	3301      	adds	r3, #1
 801f6ec:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801f6f0:	b29b      	uxth	r3, r3
 801f6f2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801f6f6:	4573      	cmp	r3, lr
 801f6f8:	8663      	strh	r3, [r4, #50]	@ 0x32
 801f6fa:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801f6fc:	f080 8120 	bcs.w	801f940 <uxr_read_framed_msg+0x358>
 801f700:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801f704:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801f708:	f100 0c01 	add.w	ip, r0, #1
 801f70c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801f710:	fba5 8202 	umull	r8, r2, r5, r2
 801f714:	0892      	lsrs	r2, r2, #2
 801f716:	4582      	cmp	sl, r0
 801f718:	eb04 0b00 	add.w	fp, r4, r0
 801f71c:	fb01 c212 	mls	r2, r1, r2, ip
 801f720:	d1cd      	bne.n	801f6be <uxr_read_framed_msg+0xd6>
 801f722:	ee17 8a90 	vmov	r8, s15
 801f726:	459e      	cmp	lr, r3
 801f728:	f040 8111 	bne.w	801f94e <uxr_read_framed_msg+0x366>
 801f72c:	2306      	movs	r3, #6
 801f72e:	7023      	strb	r3, [r4, #0]
 801f730:	e76b      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f732:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801f736:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801f73a:	4298      	cmp	r0, r3
 801f73c:	f000 80c2 	beq.w	801f8c4 <uxr_read_framed_msg+0x2dc>
 801f740:	18e2      	adds	r2, r4, r3
 801f742:	7891      	ldrb	r1, [r2, #2]
 801f744:	297d      	cmp	r1, #125	@ 0x7d
 801f746:	f000 814c 	beq.w	801f9e2 <uxr_read_framed_msg+0x3fa>
 801f74a:	3301      	adds	r3, #1
 801f74c:	085a      	lsrs	r2, r3, #1
 801f74e:	fba5 0202 	umull	r0, r2, r5, r2
 801f752:	0892      	lsrs	r2, r2, #2
 801f754:	202a      	movs	r0, #42	@ 0x2a
 801f756:	fb00 3312 	mls	r3, r0, r2, r3
 801f75a:	297e      	cmp	r1, #126	@ 0x7e
 801f75c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f760:	f000 81ca 	beq.w	801faf8 <uxr_read_framed_msg+0x510>
 801f764:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801f766:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801f76a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f76c:	b29b      	uxth	r3, r3
 801f76e:	2000      	movs	r0, #0
 801f770:	428b      	cmp	r3, r1
 801f772:	8623      	strh	r3, [r4, #48]	@ 0x30
 801f774:	8660      	strh	r0, [r4, #50]	@ 0x32
 801f776:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801f778:	f240 80df 	bls.w	801f93a <uxr_read_framed_msg+0x352>
 801f77c:	7020      	strb	r0, [r4, #0]
 801f77e:	b003      	add	sp, #12
 801f780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f784:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f788:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801f78c:	4299      	cmp	r1, r3
 801f78e:	f000 80a8 	beq.w	801f8e2 <uxr_read_framed_msg+0x2fa>
 801f792:	18e2      	adds	r2, r4, r3
 801f794:	7890      	ldrb	r0, [r2, #2]
 801f796:	287d      	cmp	r0, #125	@ 0x7d
 801f798:	f000 8164 	beq.w	801fa64 <uxr_read_framed_msg+0x47c>
 801f79c:	3301      	adds	r3, #1
 801f79e:	085a      	lsrs	r2, r3, #1
 801f7a0:	fba5 1202 	umull	r1, r2, r5, r2
 801f7a4:	0892      	lsrs	r2, r2, #2
 801f7a6:	212a      	movs	r1, #42	@ 0x2a
 801f7a8:	fb01 3312 	mls	r3, r1, r2, r3
 801f7ac:	287e      	cmp	r0, #126	@ 0x7e
 801f7ae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f7b2:	f000 8191 	beq.w	801fad8 <uxr_read_framed_msg+0x4f0>
 801f7b6:	2304      	movs	r3, #4
 801f7b8:	8620      	strh	r0, [r4, #48]	@ 0x30
 801f7ba:	7023      	strb	r3, [r4, #0]
 801f7bc:	e725      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f7be:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801f7c2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801f7c6:	4290      	cmp	r0, r2
 801f7c8:	f000 80b3 	beq.w	801f932 <uxr_read_framed_msg+0x34a>
 801f7cc:	18a3      	adds	r3, r4, r2
 801f7ce:	7899      	ldrb	r1, [r3, #2]
 801f7d0:	297d      	cmp	r1, #125	@ 0x7d
 801f7d2:	f000 8164 	beq.w	801fa9e <uxr_read_framed_msg+0x4b6>
 801f7d6:	3201      	adds	r2, #1
 801f7d8:	0850      	lsrs	r0, r2, #1
 801f7da:	fba5 3000 	umull	r3, r0, r5, r0
 801f7de:	0880      	lsrs	r0, r0, #2
 801f7e0:	232a      	movs	r3, #42	@ 0x2a
 801f7e2:	fb03 2210 	mls	r2, r3, r0, r2
 801f7e6:	297e      	cmp	r1, #126	@ 0x7e
 801f7e8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801f7ec:	f000 8188 	beq.w	801fb00 <uxr_read_framed_msg+0x518>
 801f7f0:	7863      	ldrb	r3, [r4, #1]
 801f7f2:	428b      	cmp	r3, r1
 801f7f4:	bf0c      	ite	eq
 801f7f6:	2303      	moveq	r3, #3
 801f7f8:	2300      	movne	r3, #0
 801f7fa:	7023      	strb	r3, [r4, #0]
 801f7fc:	e705      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f7fe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801f802:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801f806:	2200      	movs	r2, #0
 801f808:	4299      	cmp	r1, r3
 801f80a:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801f80e:	d06c      	beq.n	801f8ea <uxr_read_framed_msg+0x302>
 801f810:	18e2      	adds	r2, r4, r3
 801f812:	7890      	ldrb	r0, [r2, #2]
 801f814:	287d      	cmp	r0, #125	@ 0x7d
 801f816:	f000 8101 	beq.w	801fa1c <uxr_read_framed_msg+0x434>
 801f81a:	3301      	adds	r3, #1
 801f81c:	085a      	lsrs	r2, r3, #1
 801f81e:	fba5 1202 	umull	r1, r2, r5, r2
 801f822:	0892      	lsrs	r2, r2, #2
 801f824:	212a      	movs	r1, #42	@ 0x2a
 801f826:	fb01 3312 	mls	r3, r1, r2, r3
 801f82a:	287e      	cmp	r0, #126	@ 0x7e
 801f82c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801f830:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f834:	d059      	beq.n	801f8ea <uxr_read_framed_msg+0x302>
 801f836:	2302      	movs	r3, #2
 801f838:	7023      	strb	r3, [r4, #0]
 801f83a:	e6e6      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f83c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801f840:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801f844:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801f848:	1c51      	adds	r1, r2, #1
 801f84a:	084b      	lsrs	r3, r1, #1
 801f84c:	fba5 c303 	umull	ip, r3, r5, r3
 801f850:	089b      	lsrs	r3, r3, #2
 801f852:	fb0e 1313 	mls	r3, lr, r3, r1
 801f856:	4592      	cmp	sl, r2
 801f858:	eb04 0002 	add.w	r0, r4, r2
 801f85c:	b2da      	uxtb	r2, r3
 801f85e:	f43f af04 	beq.w	801f66a <uxr_read_framed_msg+0x82>
 801f862:	7883      	ldrb	r3, [r0, #2]
 801f864:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801f868:	2b7e      	cmp	r3, #126	@ 0x7e
 801f86a:	d1ed      	bne.n	801f848 <uxr_read_framed_msg+0x260>
 801f86c:	2301      	movs	r3, #1
 801f86e:	7023      	strb	r3, [r4, #0]
 801f870:	e6cb      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f872:	f100 0c01 	add.w	ip, r0, #1
 801f876:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801f87a:	fba5 8202 	umull	r8, r2, r5, r2
 801f87e:	0892      	lsrs	r2, r2, #2
 801f880:	fb01 c212 	mls	r2, r1, r2, ip
 801f884:	eb04 0c02 	add.w	ip, r4, r2
 801f888:	b2d2      	uxtb	r2, r2
 801f88a:	4592      	cmp	sl, r2
 801f88c:	f100 0002 	add.w	r0, r0, #2
 801f890:	f43f af47 	beq.w	801f722 <uxr_read_framed_msg+0x13a>
 801f894:	0842      	lsrs	r2, r0, #1
 801f896:	f89c a002 	ldrb.w	sl, [ip, #2]
 801f89a:	fba5 8202 	umull	r8, r2, r5, r2
 801f89e:	0892      	lsrs	r2, r2, #2
 801f8a0:	fb01 0012 	mls	r0, r1, r2, r0
 801f8a4:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801f8a8:	f08a 0c20 	eor.w	ip, sl, #32
 801f8ac:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801f8b0:	f47f af11 	bne.w	801f6d6 <uxr_read_framed_msg+0xee>
 801f8b4:	459e      	cmp	lr, r3
 801f8b6:	ee17 8a90 	vmov	r8, s15
 801f8ba:	f43f af37 	beq.w	801f72c <uxr_read_framed_msg+0x144>
 801f8be:	2301      	movs	r3, #1
 801f8c0:	7023      	strb	r3, [r4, #0]
 801f8c2:	e6a2      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8c6:	9300      	str	r3, [sp, #0]
 801f8c8:	2301      	movs	r3, #1
 801f8ca:	9301      	str	r3, [sp, #4]
 801f8cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8ce:	464a      	mov	r2, r9
 801f8d0:	4641      	mov	r1, r8
 801f8d2:	4620      	mov	r0, r4
 801f8d4:	f7ff fe06 	bl	801f4e4 <uxr_framing_read_transport>
 801f8d8:	2800      	cmp	r0, #0
 801f8da:	f43f aec6 	beq.w	801f66a <uxr_read_framed_msg+0x82>
 801f8de:	7823      	ldrb	r3, [r4, #0]
 801f8e0:	e693      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f8e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8e4:	9300      	str	r3, [sp, #0]
 801f8e6:	2302      	movs	r3, #2
 801f8e8:	e7ef      	b.n	801f8ca <uxr_read_framed_msg+0x2e2>
 801f8ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8ec:	9300      	str	r3, [sp, #0]
 801f8ee:	2304      	movs	r3, #4
 801f8f0:	9301      	str	r3, [sp, #4]
 801f8f2:	464a      	mov	r2, r9
 801f8f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8f6:	4641      	mov	r1, r8
 801f8f8:	4620      	mov	r0, r4
 801f8fa:	f7ff fdf3 	bl	801f4e4 <uxr_framing_read_transport>
 801f8fe:	2800      	cmp	r0, #0
 801f900:	d1ed      	bne.n	801f8de <uxr_read_framed_msg+0x2f6>
 801f902:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801f906:	2b7e      	cmp	r3, #126	@ 0x7e
 801f908:	d0e9      	beq.n	801f8de <uxr_read_framed_msg+0x2f6>
 801f90a:	e6ae      	b.n	801f66a <uxr_read_framed_msg+0x82>
 801f90c:	30c30c31 	.word	0x30c30c31
 801f910:	08025758 	.word	0x08025758
 801f914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f916:	9300      	str	r3, [sp, #0]
 801f918:	2305      	movs	r3, #5
 801f91a:	9301      	str	r3, [sp, #4]
 801f91c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f91e:	f7ff fde1 	bl	801f4e4 <uxr_framing_read_transport>
 801f922:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801f926:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801f92a:	429a      	cmp	r2, r3
 801f92c:	f43f ae9d 	beq.w	801f66a <uxr_read_framed_msg+0x82>
 801f930:	e668      	b.n	801f604 <uxr_read_framed_msg+0x1c>
 801f932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f934:	9300      	str	r3, [sp, #0]
 801f936:	2303      	movs	r3, #3
 801f938:	e7c7      	b.n	801f8ca <uxr_read_framed_msg+0x2e2>
 801f93a:	2305      	movs	r3, #5
 801f93c:	7023      	strb	r3, [r4, #0]
 801f93e:	e664      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801f940:	ee17 8a90 	vmov	r8, s15
 801f944:	f43f aef2 	beq.w	801f72c <uxr_read_framed_msg+0x144>
 801f948:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801f94c:	d08e      	beq.n	801f86c <uxr_read_framed_msg+0x284>
 801f94e:	ebae 0303 	sub.w	r3, lr, r3
 801f952:	3302      	adds	r3, #2
 801f954:	9301      	str	r3, [sp, #4]
 801f956:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f958:	9300      	str	r3, [sp, #0]
 801f95a:	e7b7      	b.n	801f8cc <uxr_read_framed_msg+0x2e4>
 801f95c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f95e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801f962:	7013      	strb	r3, [r2, #0]
 801f964:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801f966:	b003      	add	sp, #12
 801f968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f96c:	f103 0c01 	add.w	ip, r3, #1
 801f970:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801f974:	fba5 0202 	umull	r0, r2, r5, r2
 801f978:	0892      	lsrs	r2, r2, #2
 801f97a:	202a      	movs	r0, #42	@ 0x2a
 801f97c:	fb00 c212 	mls	r2, r0, r2, ip
 801f980:	fa5f fc82 	uxtb.w	ip, r2
 801f984:	4561      	cmp	r1, ip
 801f986:	d09d      	beq.n	801f8c4 <uxr_read_framed_msg+0x2dc>
 801f988:	3302      	adds	r3, #2
 801f98a:	4422      	add	r2, r4
 801f98c:	0859      	lsrs	r1, r3, #1
 801f98e:	7892      	ldrb	r2, [r2, #2]
 801f990:	fba5 c101 	umull	ip, r1, r5, r1
 801f994:	0889      	lsrs	r1, r1, #2
 801f996:	fb00 3311 	mls	r3, r0, r1, r3
 801f99a:	2a7e      	cmp	r2, #126	@ 0x7e
 801f99c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f9a0:	f000 80aa 	beq.w	801faf8 <uxr_read_framed_msg+0x510>
 801f9a4:	f082 0220 	eor.w	r2, r2, #32
 801f9a8:	e654      	b.n	801f654 <uxr_read_framed_msg+0x6c>
 801f9aa:	1c58      	adds	r0, r3, #1
 801f9ac:	0842      	lsrs	r2, r0, #1
 801f9ae:	fba5 c202 	umull	ip, r2, r5, r2
 801f9b2:	0892      	lsrs	r2, r2, #2
 801f9b4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801f9b8:	fb0c 0212 	mls	r2, ip, r2, r0
 801f9bc:	b2d0      	uxtb	r0, r2
 801f9be:	4281      	cmp	r1, r0
 801f9c0:	d08f      	beq.n	801f8e2 <uxr_read_framed_msg+0x2fa>
 801f9c2:	4422      	add	r2, r4
 801f9c4:	3302      	adds	r3, #2
 801f9c6:	7890      	ldrb	r0, [r2, #2]
 801f9c8:	085a      	lsrs	r2, r3, #1
 801f9ca:	fba5 1202 	umull	r1, r2, r5, r2
 801f9ce:	0892      	lsrs	r2, r2, #2
 801f9d0:	fb0c 3312 	mls	r3, ip, r2, r3
 801f9d4:	287e      	cmp	r0, #126	@ 0x7e
 801f9d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f9da:	d07d      	beq.n	801fad8 <uxr_read_framed_msg+0x4f0>
 801f9dc:	f080 0020 	eor.w	r0, r0, #32
 801f9e0:	e660      	b.n	801f6a4 <uxr_read_framed_msg+0xbc>
 801f9e2:	1c59      	adds	r1, r3, #1
 801f9e4:	084a      	lsrs	r2, r1, #1
 801f9e6:	fba5 c202 	umull	ip, r2, r5, r2
 801f9ea:	0892      	lsrs	r2, r2, #2
 801f9ec:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801f9f0:	fb0c 1212 	mls	r2, ip, r2, r1
 801f9f4:	b2d1      	uxtb	r1, r2
 801f9f6:	4288      	cmp	r0, r1
 801f9f8:	f43f af64 	beq.w	801f8c4 <uxr_read_framed_msg+0x2dc>
 801f9fc:	4422      	add	r2, r4
 801f9fe:	3302      	adds	r3, #2
 801fa00:	7891      	ldrb	r1, [r2, #2]
 801fa02:	085a      	lsrs	r2, r3, #1
 801fa04:	fba5 0202 	umull	r0, r2, r5, r2
 801fa08:	0892      	lsrs	r2, r2, #2
 801fa0a:	fb0c 3312 	mls	r3, ip, r2, r3
 801fa0e:	297e      	cmp	r1, #126	@ 0x7e
 801fa10:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801fa14:	d070      	beq.n	801faf8 <uxr_read_framed_msg+0x510>
 801fa16:	f081 0120 	eor.w	r1, r1, #32
 801fa1a:	e6a3      	b.n	801f764 <uxr_read_framed_msg+0x17c>
 801fa1c:	f103 0c01 	add.w	ip, r3, #1
 801fa20:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801fa24:	fba5 0202 	umull	r0, r2, r5, r2
 801fa28:	0892      	lsrs	r2, r2, #2
 801fa2a:	202a      	movs	r0, #42	@ 0x2a
 801fa2c:	fb00 c212 	mls	r2, r0, r2, ip
 801fa30:	fa5f fc82 	uxtb.w	ip, r2
 801fa34:	4561      	cmp	r1, ip
 801fa36:	f43f af58 	beq.w	801f8ea <uxr_read_framed_msg+0x302>
 801fa3a:	4422      	add	r2, r4
 801fa3c:	3302      	adds	r3, #2
 801fa3e:	7891      	ldrb	r1, [r2, #2]
 801fa40:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801fa44:	085a      	lsrs	r2, r3, #1
 801fa46:	fba5 c202 	umull	ip, r2, r5, r2
 801fa4a:	0892      	lsrs	r2, r2, #2
 801fa4c:	fb00 3312 	mls	r3, r0, r2, r3
 801fa50:	297e      	cmp	r1, #126	@ 0x7e
 801fa52:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801fa56:	f43f af48 	beq.w	801f8ea <uxr_read_framed_msg+0x302>
 801fa5a:	f081 0120 	eor.w	r1, r1, #32
 801fa5e:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801fa62:	e6e8      	b.n	801f836 <uxr_read_framed_msg+0x24e>
 801fa64:	1c58      	adds	r0, r3, #1
 801fa66:	0842      	lsrs	r2, r0, #1
 801fa68:	fba5 c202 	umull	ip, r2, r5, r2
 801fa6c:	0892      	lsrs	r2, r2, #2
 801fa6e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801fa72:	fb0c 0212 	mls	r2, ip, r2, r0
 801fa76:	b2d0      	uxtb	r0, r2
 801fa78:	4281      	cmp	r1, r0
 801fa7a:	f43f af32 	beq.w	801f8e2 <uxr_read_framed_msg+0x2fa>
 801fa7e:	4422      	add	r2, r4
 801fa80:	3302      	adds	r3, #2
 801fa82:	7890      	ldrb	r0, [r2, #2]
 801fa84:	085a      	lsrs	r2, r3, #1
 801fa86:	fba5 1202 	umull	r1, r2, r5, r2
 801fa8a:	0892      	lsrs	r2, r2, #2
 801fa8c:	fb0c 3312 	mls	r3, ip, r2, r3
 801fa90:	287e      	cmp	r0, #126	@ 0x7e
 801fa92:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801fa96:	d01f      	beq.n	801fad8 <uxr_read_framed_msg+0x4f0>
 801fa98:	f080 0020 	eor.w	r0, r0, #32
 801fa9c:	e68b      	b.n	801f7b6 <uxr_read_framed_msg+0x1ce>
 801fa9e:	1c51      	adds	r1, r2, #1
 801faa0:	084b      	lsrs	r3, r1, #1
 801faa2:	fba5 c303 	umull	ip, r3, r5, r3
 801faa6:	089b      	lsrs	r3, r3, #2
 801faa8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801faac:	fb0c 1313 	mls	r3, ip, r3, r1
 801fab0:	b2d9      	uxtb	r1, r3
 801fab2:	4288      	cmp	r0, r1
 801fab4:	f43f af3d 	beq.w	801f932 <uxr_read_framed_msg+0x34a>
 801fab8:	3202      	adds	r2, #2
 801faba:	4423      	add	r3, r4
 801fabc:	0850      	lsrs	r0, r2, #1
 801fabe:	789b      	ldrb	r3, [r3, #2]
 801fac0:	fba5 1000 	umull	r1, r0, r5, r0
 801fac4:	0880      	lsrs	r0, r0, #2
 801fac6:	fb0c 2210 	mls	r2, ip, r0, r2
 801faca:	2b7e      	cmp	r3, #126	@ 0x7e
 801facc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801fad0:	d016      	beq.n	801fb00 <uxr_read_framed_msg+0x518>
 801fad2:	f083 0120 	eor.w	r1, r3, #32
 801fad6:	e68b      	b.n	801f7f0 <uxr_read_framed_msg+0x208>
 801fad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fada:	9300      	str	r3, [sp, #0]
 801fadc:	2302      	movs	r3, #2
 801fade:	9301      	str	r3, [sp, #4]
 801fae0:	464a      	mov	r2, r9
 801fae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fae4:	4641      	mov	r1, r8
 801fae6:	4620      	mov	r0, r4
 801fae8:	f7ff fcfc 	bl	801f4e4 <uxr_framing_read_transport>
 801faec:	2800      	cmp	r0, #0
 801faee:	f47f aef6 	bne.w	801f8de <uxr_read_framed_msg+0x2f6>
 801faf2:	2301      	movs	r3, #1
 801faf4:	7023      	strb	r3, [r4, #0]
 801faf6:	e588      	b.n	801f60a <uxr_read_framed_msg+0x22>
 801faf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fafa:	9300      	str	r3, [sp, #0]
 801fafc:	2301      	movs	r3, #1
 801fafe:	e7ee      	b.n	801fade <uxr_read_framed_msg+0x4f6>
 801fb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fb02:	9300      	str	r3, [sp, #0]
 801fb04:	2303      	movs	r3, #3
 801fb06:	e7ea      	b.n	801fade <uxr_read_framed_msg+0x4f6>
 801fb08:	ee17 8a90 	vmov	r8, s15
 801fb0c:	e6ae      	b.n	801f86c <uxr_read_framed_msg+0x284>
 801fb0e:	bf00      	nop

0801fb10 <rcl_get_default_domain_id>:
 801fb10:	b530      	push	{r4, r5, lr}
 801fb12:	b083      	sub	sp, #12
 801fb14:	2300      	movs	r3, #0
 801fb16:	9300      	str	r3, [sp, #0]
 801fb18:	b1d0      	cbz	r0, 801fb50 <rcl_get_default_domain_id+0x40>
 801fb1a:	4604      	mov	r4, r0
 801fb1c:	4669      	mov	r1, sp
 801fb1e:	4815      	ldr	r0, [pc, #84]	@ (801fb74 <rcl_get_default_domain_id+0x64>)
 801fb20:	f7fc fc1e 	bl	801c360 <rcutils_get_env>
 801fb24:	4602      	mov	r2, r0
 801fb26:	b110      	cbz	r0, 801fb2e <rcl_get_default_domain_id+0x1e>
 801fb28:	2001      	movs	r0, #1
 801fb2a:	b003      	add	sp, #12
 801fb2c:	bd30      	pop	{r4, r5, pc}
 801fb2e:	9b00      	ldr	r3, [sp, #0]
 801fb30:	b18b      	cbz	r3, 801fb56 <rcl_get_default_domain_id+0x46>
 801fb32:	7818      	ldrb	r0, [r3, #0]
 801fb34:	2800      	cmp	r0, #0
 801fb36:	d0f8      	beq.n	801fb2a <rcl_get_default_domain_id+0x1a>
 801fb38:	a901      	add	r1, sp, #4
 801fb3a:	4618      	mov	r0, r3
 801fb3c:	9201      	str	r2, [sp, #4]
 801fb3e:	f001 fc8f 	bl	8021460 <strtoul>
 801fb42:	4605      	mov	r5, r0
 801fb44:	b150      	cbz	r0, 801fb5c <rcl_get_default_domain_id+0x4c>
 801fb46:	1c43      	adds	r3, r0, #1
 801fb48:	d00d      	beq.n	801fb66 <rcl_get_default_domain_id+0x56>
 801fb4a:	6025      	str	r5, [r4, #0]
 801fb4c:	2000      	movs	r0, #0
 801fb4e:	e7ec      	b.n	801fb2a <rcl_get_default_domain_id+0x1a>
 801fb50:	200b      	movs	r0, #11
 801fb52:	b003      	add	sp, #12
 801fb54:	bd30      	pop	{r4, r5, pc}
 801fb56:	4618      	mov	r0, r3
 801fb58:	b003      	add	sp, #12
 801fb5a:	bd30      	pop	{r4, r5, pc}
 801fb5c:	9b01      	ldr	r3, [sp, #4]
 801fb5e:	781b      	ldrb	r3, [r3, #0]
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d0f2      	beq.n	801fb4a <rcl_get_default_domain_id+0x3a>
 801fb64:	e7e0      	b.n	801fb28 <rcl_get_default_domain_id+0x18>
 801fb66:	f001 ff37 	bl	80219d8 <__errno>
 801fb6a:	6803      	ldr	r3, [r0, #0]
 801fb6c:	2b22      	cmp	r3, #34	@ 0x22
 801fb6e:	d1ec      	bne.n	801fb4a <rcl_get_default_domain_id+0x3a>
 801fb70:	e7da      	b.n	801fb28 <rcl_get_default_domain_id+0x18>
 801fb72:	bf00      	nop
 801fb74:	08025958 	.word	0x08025958

0801fb78 <rcl_expand_topic_name>:
 801fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb7c:	b08b      	sub	sp, #44	@ 0x2c
 801fb7e:	9306      	str	r3, [sp, #24]
 801fb80:	2800      	cmp	r0, #0
 801fb82:	f000 80ad 	beq.w	801fce0 <rcl_expand_topic_name+0x168>
 801fb86:	460e      	mov	r6, r1
 801fb88:	2900      	cmp	r1, #0
 801fb8a:	f000 80a9 	beq.w	801fce0 <rcl_expand_topic_name+0x168>
 801fb8e:	4617      	mov	r7, r2
 801fb90:	2a00      	cmp	r2, #0
 801fb92:	f000 80a5 	beq.w	801fce0 <rcl_expand_topic_name+0x168>
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	f000 80a2 	beq.w	801fce0 <rcl_expand_topic_name+0x168>
 801fb9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fb9e:	2b00      	cmp	r3, #0
 801fba0:	f000 809e 	beq.w	801fce0 <rcl_expand_topic_name+0x168>
 801fba4:	2200      	movs	r2, #0
 801fba6:	a909      	add	r1, sp, #36	@ 0x24
 801fba8:	4680      	mov	r8, r0
 801fbaa:	f000 f9fb 	bl	801ffa4 <rcl_validate_topic_name>
 801fbae:	4604      	mov	r4, r0
 801fbb0:	2800      	cmp	r0, #0
 801fbb2:	f040 8096 	bne.w	801fce2 <rcl_expand_topic_name+0x16a>
 801fbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	f040 809a 	bne.w	801fcf2 <rcl_expand_topic_name+0x17a>
 801fbbe:	4602      	mov	r2, r0
 801fbc0:	a909      	add	r1, sp, #36	@ 0x24
 801fbc2:	4630      	mov	r0, r6
 801fbc4:	f7fd f82a 	bl	801cc1c <rmw_validate_node_name>
 801fbc8:	2800      	cmp	r0, #0
 801fbca:	f040 808e 	bne.w	801fcea <rcl_expand_topic_name+0x172>
 801fbce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fbd0:	2a00      	cmp	r2, #0
 801fbd2:	f040 8093 	bne.w	801fcfc <rcl_expand_topic_name+0x184>
 801fbd6:	a909      	add	r1, sp, #36	@ 0x24
 801fbd8:	4638      	mov	r0, r7
 801fbda:	f7fd f801 	bl	801cbe0 <rmw_validate_namespace>
 801fbde:	2800      	cmp	r0, #0
 801fbe0:	f040 8083 	bne.w	801fcea <rcl_expand_topic_name+0x172>
 801fbe4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801fbe6:	2c00      	cmp	r4, #0
 801fbe8:	f040 80ed 	bne.w	801fdc6 <rcl_expand_topic_name+0x24e>
 801fbec:	217b      	movs	r1, #123	@ 0x7b
 801fbee:	4640      	mov	r0, r8
 801fbf0:	f001 fe58 	bl	80218a4 <strchr>
 801fbf4:	f898 3000 	ldrb.w	r3, [r8]
 801fbf8:	2b2f      	cmp	r3, #47	@ 0x2f
 801fbfa:	4605      	mov	r5, r0
 801fbfc:	f000 809e 	beq.w	801fd3c <rcl_expand_topic_name+0x1c4>
 801fc00:	2b7e      	cmp	r3, #126	@ 0x7e
 801fc02:	f040 80a2 	bne.w	801fd4a <rcl_expand_topic_name+0x1d2>
 801fc06:	4638      	mov	r0, r7
 801fc08:	f7e0 fafa 	bl	8000200 <strlen>
 801fc0c:	4a82      	ldr	r2, [pc, #520]	@ (801fe18 <rcl_expand_topic_name+0x2a0>)
 801fc0e:	4b83      	ldr	r3, [pc, #524]	@ (801fe1c <rcl_expand_topic_name+0x2a4>)
 801fc10:	2801      	cmp	r0, #1
 801fc12:	bf18      	it	ne
 801fc14:	4613      	movne	r3, r2
 801fc16:	9302      	str	r3, [sp, #8]
 801fc18:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fc1a:	9300      	str	r3, [sp, #0]
 801fc1c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801fc20:	f108 0301 	add.w	r3, r8, #1
 801fc24:	9305      	str	r3, [sp, #20]
 801fc26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801fc2a:	9301      	str	r3, [sp, #4]
 801fc2c:	ab14      	add	r3, sp, #80	@ 0x50
 801fc2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fc30:	f7fc fbbe 	bl	801c3b0 <rcutils_format_string_limit>
 801fc34:	4682      	mov	sl, r0
 801fc36:	2800      	cmp	r0, #0
 801fc38:	f000 80c7 	beq.w	801fdca <rcl_expand_topic_name+0x252>
 801fc3c:	2d00      	cmp	r5, #0
 801fc3e:	f000 80a2 	beq.w	801fd86 <rcl_expand_topic_name+0x20e>
 801fc42:	217b      	movs	r1, #123	@ 0x7b
 801fc44:	f001 fe2e 	bl	80218a4 <strchr>
 801fc48:	46d1      	mov	r9, sl
 801fc4a:	4605      	mov	r5, r0
 801fc4c:	9407      	str	r4, [sp, #28]
 801fc4e:	46d3      	mov	fp, sl
 801fc50:	464c      	mov	r4, r9
 801fc52:	2d00      	cmp	r5, #0
 801fc54:	f000 80be 	beq.w	801fdd4 <rcl_expand_topic_name+0x25c>
 801fc58:	217d      	movs	r1, #125	@ 0x7d
 801fc5a:	4620      	mov	r0, r4
 801fc5c:	f001 fe22 	bl	80218a4 <strchr>
 801fc60:	eba0 0905 	sub.w	r9, r0, r5
 801fc64:	f109 0a01 	add.w	sl, r9, #1
 801fc68:	486d      	ldr	r0, [pc, #436]	@ (801fe20 <rcl_expand_topic_name+0x2a8>)
 801fc6a:	4652      	mov	r2, sl
 801fc6c:	4629      	mov	r1, r5
 801fc6e:	f001 fe26 	bl	80218be <strncmp>
 801fc72:	2800      	cmp	r0, #0
 801fc74:	d067      	beq.n	801fd46 <rcl_expand_topic_name+0x1ce>
 801fc76:	486b      	ldr	r0, [pc, #428]	@ (801fe24 <rcl_expand_topic_name+0x2ac>)
 801fc78:	4652      	mov	r2, sl
 801fc7a:	4629      	mov	r1, r5
 801fc7c:	f001 fe1f 	bl	80218be <strncmp>
 801fc80:	b130      	cbz	r0, 801fc90 <rcl_expand_topic_name+0x118>
 801fc82:	4869      	ldr	r0, [pc, #420]	@ (801fe28 <rcl_expand_topic_name+0x2b0>)
 801fc84:	4652      	mov	r2, sl
 801fc86:	4629      	mov	r1, r5
 801fc88:	f001 fe19 	bl	80218be <strncmp>
 801fc8c:	2800      	cmp	r0, #0
 801fc8e:	d137      	bne.n	801fd00 <rcl_expand_topic_name+0x188>
 801fc90:	46b9      	mov	r9, r7
 801fc92:	ab16      	add	r3, sp, #88	@ 0x58
 801fc94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801fc98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801fc9c:	ab14      	add	r3, sp, #80	@ 0x50
 801fc9e:	4628      	mov	r0, r5
 801fca0:	cb0c      	ldmia	r3, {r2, r3}
 801fca2:	4651      	mov	r1, sl
 801fca4:	f7fc fcc0 	bl	801c628 <rcutils_strndup>
 801fca8:	4605      	mov	r5, r0
 801fcaa:	2800      	cmp	r0, #0
 801fcac:	f000 809c 	beq.w	801fde8 <rcl_expand_topic_name+0x270>
 801fcb0:	464a      	mov	r2, r9
 801fcb2:	4620      	mov	r0, r4
 801fcb4:	ab14      	add	r3, sp, #80	@ 0x50
 801fcb6:	4629      	mov	r1, r5
 801fcb8:	f7fc fbb4 	bl	801c424 <rcutils_repl_str>
 801fcbc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801fcbe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fcc0:	4604      	mov	r4, r0
 801fcc2:	4628      	mov	r0, r5
 801fcc4:	4798      	blx	r3
 801fcc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fcc8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801fcca:	4658      	mov	r0, fp
 801fccc:	4798      	blx	r3
 801fcce:	2c00      	cmp	r4, #0
 801fcd0:	d07b      	beq.n	801fdca <rcl_expand_topic_name+0x252>
 801fcd2:	217b      	movs	r1, #123	@ 0x7b
 801fcd4:	4620      	mov	r0, r4
 801fcd6:	f001 fde5 	bl	80218a4 <strchr>
 801fcda:	46a3      	mov	fp, r4
 801fcdc:	4605      	mov	r5, r0
 801fcde:	e7b8      	b.n	801fc52 <rcl_expand_topic_name+0xda>
 801fce0:	240b      	movs	r4, #11
 801fce2:	4620      	mov	r0, r4
 801fce4:	b00b      	add	sp, #44	@ 0x2c
 801fce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcea:	f7f6 f9c3 	bl	8016074 <rcl_convert_rmw_ret_to_rcl_ret>
 801fcee:	4604      	mov	r4, r0
 801fcf0:	e7f7      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fcf2:	2467      	movs	r4, #103	@ 0x67
 801fcf4:	4620      	mov	r0, r4
 801fcf6:	b00b      	add	sp, #44	@ 0x2c
 801fcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcfc:	24c9      	movs	r4, #201	@ 0xc9
 801fcfe:	e7f0      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fd00:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801fd04:	9806      	ldr	r0, [sp, #24]
 801fd06:	1c69      	adds	r1, r5, #1
 801fd08:	f7fc fda8 	bl	801c85c <rcutils_string_map_getn>
 801fd0c:	4681      	mov	r9, r0
 801fd0e:	2800      	cmp	r0, #0
 801fd10:	d1bf      	bne.n	801fc92 <rcl_expand_topic_name+0x11a>
 801fd12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fd14:	aa16      	add	r2, sp, #88	@ 0x58
 801fd16:	6018      	str	r0, [r3, #0]
 801fd18:	ca07      	ldmia	r2, {r0, r1, r2}
 801fd1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801fd1e:	ab14      	add	r3, sp, #80	@ 0x50
 801fd20:	cb0c      	ldmia	r3, {r2, r3}
 801fd22:	4651      	mov	r1, sl
 801fd24:	4628      	mov	r0, r5
 801fd26:	f7fc fc7f 	bl	801c628 <rcutils_strndup>
 801fd2a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801fd2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fd2e:	4798      	blx	r3
 801fd30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fd32:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801fd34:	4658      	mov	r0, fp
 801fd36:	2469      	movs	r4, #105	@ 0x69
 801fd38:	4798      	blx	r3
 801fd3a:	e7d2      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fd3c:	2800      	cmp	r0, #0
 801fd3e:	d05b      	beq.n	801fdf8 <rcl_expand_topic_name+0x280>
 801fd40:	46c1      	mov	r9, r8
 801fd42:	46a2      	mov	sl, r4
 801fd44:	e782      	b.n	801fc4c <rcl_expand_topic_name+0xd4>
 801fd46:	46b1      	mov	r9, r6
 801fd48:	e7a3      	b.n	801fc92 <rcl_expand_topic_name+0x11a>
 801fd4a:	2800      	cmp	r0, #0
 801fd4c:	d1f8      	bne.n	801fd40 <rcl_expand_topic_name+0x1c8>
 801fd4e:	4638      	mov	r0, r7
 801fd50:	f7e0 fa56 	bl	8000200 <strlen>
 801fd54:	4a35      	ldr	r2, [pc, #212]	@ (801fe2c <rcl_expand_topic_name+0x2b4>)
 801fd56:	4b36      	ldr	r3, [pc, #216]	@ (801fe30 <rcl_expand_topic_name+0x2b8>)
 801fd58:	f8cd 8010 	str.w	r8, [sp, #16]
 801fd5c:	2801      	cmp	r0, #1
 801fd5e:	bf18      	it	ne
 801fd60:	4613      	movne	r3, r2
 801fd62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801fd66:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801fd6a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fd6c:	9703      	str	r7, [sp, #12]
 801fd6e:	9200      	str	r2, [sp, #0]
 801fd70:	ab14      	add	r3, sp, #80	@ 0x50
 801fd72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fd74:	f7fc fb1c 	bl	801c3b0 <rcutils_format_string_limit>
 801fd78:	4682      	mov	sl, r0
 801fd7a:	4653      	mov	r3, sl
 801fd7c:	b32b      	cbz	r3, 801fdca <rcl_expand_topic_name+0x252>
 801fd7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fd80:	f8c3 a000 	str.w	sl, [r3]
 801fd84:	e7ad      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fd86:	f89a 3000 	ldrb.w	r3, [sl]
 801fd8a:	2b2f      	cmp	r3, #47	@ 0x2f
 801fd8c:	d0f7      	beq.n	801fd7e <rcl_expand_topic_name+0x206>
 801fd8e:	4638      	mov	r0, r7
 801fd90:	f7e0 fa36 	bl	8000200 <strlen>
 801fd94:	4a25      	ldr	r2, [pc, #148]	@ (801fe2c <rcl_expand_topic_name+0x2b4>)
 801fd96:	4b26      	ldr	r3, [pc, #152]	@ (801fe30 <rcl_expand_topic_name+0x2b8>)
 801fd98:	f8cd a010 	str.w	sl, [sp, #16]
 801fd9c:	2801      	cmp	r0, #1
 801fd9e:	bf18      	it	ne
 801fda0:	4613      	movne	r3, r2
 801fda2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801fda6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801fdaa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fdac:	9703      	str	r7, [sp, #12]
 801fdae:	9200      	str	r2, [sp, #0]
 801fdb0:	ab14      	add	r3, sp, #80	@ 0x50
 801fdb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fdb4:	f7fc fafc 	bl	801c3b0 <rcutils_format_string_limit>
 801fdb8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fdba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801fdbc:	4605      	mov	r5, r0
 801fdbe:	4650      	mov	r0, sl
 801fdc0:	4798      	blx	r3
 801fdc2:	46aa      	mov	sl, r5
 801fdc4:	e7d9      	b.n	801fd7a <rcl_expand_topic_name+0x202>
 801fdc6:	24ca      	movs	r4, #202	@ 0xca
 801fdc8:	e78b      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fdca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fdcc:	2300      	movs	r3, #0
 801fdce:	6013      	str	r3, [r2, #0]
 801fdd0:	240a      	movs	r4, #10
 801fdd2:	e786      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fdd4:	465b      	mov	r3, fp
 801fdd6:	9c07      	ldr	r4, [sp, #28]
 801fdd8:	46da      	mov	sl, fp
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d1d3      	bne.n	801fd86 <rcl_expand_topic_name+0x20e>
 801fdde:	f898 3000 	ldrb.w	r3, [r8]
 801fde2:	2b2f      	cmp	r3, #47	@ 0x2f
 801fde4:	d0cb      	beq.n	801fd7e <rcl_expand_topic_name+0x206>
 801fde6:	e7b2      	b.n	801fd4e <rcl_expand_topic_name+0x1d6>
 801fde8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801fdec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fdee:	6015      	str	r5, [r2, #0]
 801fdf0:	4658      	mov	r0, fp
 801fdf2:	4798      	blx	r3
 801fdf4:	240a      	movs	r4, #10
 801fdf6:	e774      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fdf8:	ab17      	add	r3, sp, #92	@ 0x5c
 801fdfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801fdfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 801fe02:	ab14      	add	r3, sp, #80	@ 0x50
 801fe04:	cb0e      	ldmia	r3, {r1, r2, r3}
 801fe06:	4640      	mov	r0, r8
 801fe08:	f7fc fbec 	bl	801c5e4 <rcutils_strdup>
 801fe0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fe0e:	2800      	cmp	r0, #0
 801fe10:	6018      	str	r0, [r3, #0]
 801fe12:	bf08      	it	eq
 801fe14:	240a      	moveq	r4, #10
 801fe16:	e764      	b.n	801fce2 <rcl_expand_topic_name+0x16a>
 801fe18:	08025968 	.word	0x08025968
 801fe1c:	08023438 	.word	0x08023438
 801fe20:	08025970 	.word	0x08025970
 801fe24:	08025978 	.word	0x08025978
 801fe28:	08025980 	.word	0x08025980
 801fe2c:	08023bbc 	.word	0x08023bbc
 801fe30:	08023448 	.word	0x08023448

0801fe34 <rcl_get_default_topic_name_substitutions>:
 801fe34:	2800      	cmp	r0, #0
 801fe36:	bf0c      	ite	eq
 801fe38:	200b      	moveq	r0, #11
 801fe3a:	2000      	movne	r0, #0
 801fe3c:	4770      	bx	lr
 801fe3e:	bf00      	nop

0801fe40 <rcl_get_zero_initialized_guard_condition>:
 801fe40:	4a03      	ldr	r2, [pc, #12]	@ (801fe50 <rcl_get_zero_initialized_guard_condition+0x10>)
 801fe42:	4603      	mov	r3, r0
 801fe44:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fe48:	e883 0003 	stmia.w	r3, {r0, r1}
 801fe4c:	4618      	mov	r0, r3
 801fe4e:	4770      	bx	lr
 801fe50:	0802598c 	.word	0x0802598c

0801fe54 <rcl_guard_condition_init_from_rmw>:
 801fe54:	b082      	sub	sp, #8
 801fe56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe5a:	b086      	sub	sp, #24
 801fe5c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801fe60:	4604      	mov	r4, r0
 801fe62:	f84c 3f04 	str.w	r3, [ip, #4]!
 801fe66:	460e      	mov	r6, r1
 801fe68:	4617      	mov	r7, r2
 801fe6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801fe6e:	f10d 0e04 	add.w	lr, sp, #4
 801fe72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801fe76:	f8dc 3000 	ldr.w	r3, [ip]
 801fe7a:	f8ce 3000 	str.w	r3, [lr]
 801fe7e:	a801      	add	r0, sp, #4
 801fe80:	f7ee fc52 	bl	800e728 <rcutils_allocator_is_valid>
 801fe84:	b350      	cbz	r0, 801fedc <rcl_guard_condition_init_from_rmw+0x88>
 801fe86:	b34c      	cbz	r4, 801fedc <rcl_guard_condition_init_from_rmw+0x88>
 801fe88:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801fe8c:	f1b8 0f00 	cmp.w	r8, #0
 801fe90:	d11e      	bne.n	801fed0 <rcl_guard_condition_init_from_rmw+0x7c>
 801fe92:	b31f      	cbz	r7, 801fedc <rcl_guard_condition_init_from_rmw+0x88>
 801fe94:	4638      	mov	r0, r7
 801fe96:	f7f6 f90b 	bl	80160b0 <rcl_context_is_valid>
 801fe9a:	b328      	cbz	r0, 801fee8 <rcl_guard_condition_init_from_rmw+0x94>
 801fe9c:	9b01      	ldr	r3, [sp, #4]
 801fe9e:	9905      	ldr	r1, [sp, #20]
 801fea0:	201c      	movs	r0, #28
 801fea2:	4798      	blx	r3
 801fea4:	4605      	mov	r5, r0
 801fea6:	6060      	str	r0, [r4, #4]
 801fea8:	b358      	cbz	r0, 801ff02 <rcl_guard_condition_init_from_rmw+0xae>
 801feaa:	b1fe      	cbz	r6, 801feec <rcl_guard_condition_init_from_rmw+0x98>
 801feac:	6006      	str	r6, [r0, #0]
 801feae:	f880 8004 	strb.w	r8, [r0, #4]
 801feb2:	ac01      	add	r4, sp, #4
 801feb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801feb6:	f105 0c08 	add.w	ip, r5, #8
 801feba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801febe:	6823      	ldr	r3, [r4, #0]
 801fec0:	f8cc 3000 	str.w	r3, [ip]
 801fec4:	2000      	movs	r0, #0
 801fec6:	b006      	add	sp, #24
 801fec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fecc:	b002      	add	sp, #8
 801fece:	4770      	bx	lr
 801fed0:	2064      	movs	r0, #100	@ 0x64
 801fed2:	b006      	add	sp, #24
 801fed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fed8:	b002      	add	sp, #8
 801feda:	4770      	bx	lr
 801fedc:	200b      	movs	r0, #11
 801fede:	b006      	add	sp, #24
 801fee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fee4:	b002      	add	sp, #8
 801fee6:	4770      	bx	lr
 801fee8:	2065      	movs	r0, #101	@ 0x65
 801feea:	e7f2      	b.n	801fed2 <rcl_guard_condition_init_from_rmw+0x7e>
 801feec:	6838      	ldr	r0, [r7, #0]
 801feee:	3028      	adds	r0, #40	@ 0x28
 801fef0:	f000 fbe2 	bl	80206b8 <rmw_create_guard_condition>
 801fef4:	6028      	str	r0, [r5, #0]
 801fef6:	6865      	ldr	r5, [r4, #4]
 801fef8:	682e      	ldr	r6, [r5, #0]
 801fefa:	b126      	cbz	r6, 801ff06 <rcl_guard_condition_init_from_rmw+0xb2>
 801fefc:	2301      	movs	r3, #1
 801fefe:	712b      	strb	r3, [r5, #4]
 801ff00:	e7d7      	b.n	801feb2 <rcl_guard_condition_init_from_rmw+0x5e>
 801ff02:	200a      	movs	r0, #10
 801ff04:	e7e5      	b.n	801fed2 <rcl_guard_condition_init_from_rmw+0x7e>
 801ff06:	4628      	mov	r0, r5
 801ff08:	9b02      	ldr	r3, [sp, #8]
 801ff0a:	9905      	ldr	r1, [sp, #20]
 801ff0c:	4798      	blx	r3
 801ff0e:	6066      	str	r6, [r4, #4]
 801ff10:	2001      	movs	r0, #1
 801ff12:	e7de      	b.n	801fed2 <rcl_guard_condition_init_from_rmw+0x7e>

0801ff14 <rcl_guard_condition_fini>:
 801ff14:	b570      	push	{r4, r5, r6, lr}
 801ff16:	b082      	sub	sp, #8
 801ff18:	b1f0      	cbz	r0, 801ff58 <rcl_guard_condition_fini+0x44>
 801ff1a:	6843      	ldr	r3, [r0, #4]
 801ff1c:	4604      	mov	r4, r0
 801ff1e:	b163      	cbz	r3, 801ff3a <rcl_guard_condition_fini+0x26>
 801ff20:	6818      	ldr	r0, [r3, #0]
 801ff22:	68de      	ldr	r6, [r3, #12]
 801ff24:	6999      	ldr	r1, [r3, #24]
 801ff26:	b160      	cbz	r0, 801ff42 <rcl_guard_condition_fini+0x2e>
 801ff28:	791d      	ldrb	r5, [r3, #4]
 801ff2a:	b965      	cbnz	r5, 801ff46 <rcl_guard_condition_fini+0x32>
 801ff2c:	4618      	mov	r0, r3
 801ff2e:	47b0      	blx	r6
 801ff30:	2300      	movs	r3, #0
 801ff32:	4628      	mov	r0, r5
 801ff34:	6063      	str	r3, [r4, #4]
 801ff36:	b002      	add	sp, #8
 801ff38:	bd70      	pop	{r4, r5, r6, pc}
 801ff3a:	461d      	mov	r5, r3
 801ff3c:	4628      	mov	r0, r5
 801ff3e:	b002      	add	sp, #8
 801ff40:	bd70      	pop	{r4, r5, r6, pc}
 801ff42:	4605      	mov	r5, r0
 801ff44:	e7f2      	b.n	801ff2c <rcl_guard_condition_fini+0x18>
 801ff46:	9101      	str	r1, [sp, #4]
 801ff48:	f000 fbca 	bl	80206e0 <rmw_destroy_guard_condition>
 801ff4c:	1e05      	subs	r5, r0, #0
 801ff4e:	6863      	ldr	r3, [r4, #4]
 801ff50:	9901      	ldr	r1, [sp, #4]
 801ff52:	bf18      	it	ne
 801ff54:	2501      	movne	r5, #1
 801ff56:	e7e9      	b.n	801ff2c <rcl_guard_condition_fini+0x18>
 801ff58:	250b      	movs	r5, #11
 801ff5a:	4628      	mov	r0, r5
 801ff5c:	b002      	add	sp, #8
 801ff5e:	bd70      	pop	{r4, r5, r6, pc}

0801ff60 <rcl_guard_condition_get_default_options>:
 801ff60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff62:	b087      	sub	sp, #28
 801ff64:	4606      	mov	r6, r0
 801ff66:	4668      	mov	r0, sp
 801ff68:	f7ee fbd0 	bl	800e70c <rcutils_get_default_allocator>
 801ff6c:	4b09      	ldr	r3, [pc, #36]	@ (801ff94 <rcl_guard_condition_get_default_options+0x34>)
 801ff6e:	46ee      	mov	lr, sp
 801ff70:	469c      	mov	ip, r3
 801ff72:	461d      	mov	r5, r3
 801ff74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ff78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ff7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ff7e:	4634      	mov	r4, r6
 801ff80:	f8de 7000 	ldr.w	r7, [lr]
 801ff84:	f8cc 7000 	str.w	r7, [ip]
 801ff88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ff8a:	4630      	mov	r0, r6
 801ff8c:	6027      	str	r7, [r4, #0]
 801ff8e:	b007      	add	sp, #28
 801ff90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff92:	bf00      	nop
 801ff94:	2001706c 	.word	0x2001706c

0801ff98 <rcl_guard_condition_get_rmw_handle>:
 801ff98:	b110      	cbz	r0, 801ffa0 <rcl_guard_condition_get_rmw_handle+0x8>
 801ff9a:	6840      	ldr	r0, [r0, #4]
 801ff9c:	b100      	cbz	r0, 801ffa0 <rcl_guard_condition_get_rmw_handle+0x8>
 801ff9e:	6800      	ldr	r0, [r0, #0]
 801ffa0:	4770      	bx	lr
 801ffa2:	bf00      	nop

0801ffa4 <rcl_validate_topic_name>:
 801ffa4:	2800      	cmp	r0, #0
 801ffa6:	d07a      	beq.n	802009e <rcl_validate_topic_name+0xfa>
 801ffa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffac:	460e      	mov	r6, r1
 801ffae:	2900      	cmp	r1, #0
 801ffb0:	d07c      	beq.n	80200ac <rcl_validate_topic_name+0x108>
 801ffb2:	4617      	mov	r7, r2
 801ffb4:	4605      	mov	r5, r0
 801ffb6:	f7e0 f923 	bl	8000200 <strlen>
 801ffba:	b1b0      	cbz	r0, 801ffea <rcl_validate_topic_name+0x46>
 801ffbc:	f895 9000 	ldrb.w	r9, [r5]
 801ffc0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8020144 <rcl_validate_topic_name+0x1a0>
 801ffc4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801ffc8:	f013 0304 	ands.w	r3, r3, #4
 801ffcc:	d169      	bne.n	80200a2 <rcl_validate_topic_name+0xfe>
 801ffce:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801ffd2:	f815 2008 	ldrb.w	r2, [r5, r8]
 801ffd6:	2a2f      	cmp	r2, #47	@ 0x2f
 801ffd8:	d10e      	bne.n	801fff8 <rcl_validate_topic_name+0x54>
 801ffda:	2202      	movs	r2, #2
 801ffdc:	6032      	str	r2, [r6, #0]
 801ffde:	b36f      	cbz	r7, 802003c <rcl_validate_topic_name+0x98>
 801ffe0:	f8c7 8000 	str.w	r8, [r7]
 801ffe4:	4618      	mov	r0, r3
 801ffe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffea:	2301      	movs	r3, #1
 801ffec:	6033      	str	r3, [r6, #0]
 801ffee:	b32f      	cbz	r7, 802003c <rcl_validate_topic_name+0x98>
 801fff0:	2000      	movs	r0, #0
 801fff2:	6038      	str	r0, [r7, #0]
 801fff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fff8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801fffc:	461c      	mov	r4, r3
 801fffe:	4619      	mov	r1, r3
 8020000:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8020004:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8020008:	f1be 0f09 	cmp.w	lr, #9
 802000c:	d919      	bls.n	8020042 <rcl_validate_topic_name+0x9e>
 802000e:	f022 0e20 	bic.w	lr, r2, #32
 8020012:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8020016:	f1be 0f19 	cmp.w	lr, #25
 802001a:	d912      	bls.n	8020042 <rcl_validate_topic_name+0x9e>
 802001c:	2a5f      	cmp	r2, #95	@ 0x5f
 802001e:	d019      	beq.n	8020054 <rcl_validate_topic_name+0xb0>
 8020020:	2a2f      	cmp	r2, #47	@ 0x2f
 8020022:	d051      	beq.n	80200c8 <rcl_validate_topic_name+0x124>
 8020024:	2a7e      	cmp	r2, #126	@ 0x7e
 8020026:	d048      	beq.n	80200ba <rcl_validate_topic_name+0x116>
 8020028:	2a7b      	cmp	r2, #123	@ 0x7b
 802002a:	d054      	beq.n	80200d6 <rcl_validate_topic_name+0x132>
 802002c:	2a7d      	cmp	r2, #125	@ 0x7d
 802002e:	d161      	bne.n	80200f4 <rcl_validate_topic_name+0x150>
 8020030:	2c00      	cmp	r4, #0
 8020032:	d155      	bne.n	80200e0 <rcl_validate_topic_name+0x13c>
 8020034:	2305      	movs	r3, #5
 8020036:	6033      	str	r3, [r6, #0]
 8020038:	b107      	cbz	r7, 802003c <rcl_validate_topic_name+0x98>
 802003a:	6039      	str	r1, [r7, #0]
 802003c:	2000      	movs	r0, #0
 802003e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020042:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020046:	0752      	lsls	r2, r2, #29
 8020048:	d504      	bpl.n	8020054 <rcl_validate_topic_name+0xb0>
 802004a:	b11c      	cbz	r4, 8020054 <rcl_validate_topic_name+0xb0>
 802004c:	b111      	cbz	r1, 8020054 <rcl_validate_topic_name+0xb0>
 802004e:	1e4a      	subs	r2, r1, #1
 8020050:	429a      	cmp	r2, r3
 8020052:	d02d      	beq.n	80200b0 <rcl_validate_topic_name+0x10c>
 8020054:	3101      	adds	r1, #1
 8020056:	4288      	cmp	r0, r1
 8020058:	d1d2      	bne.n	8020000 <rcl_validate_topic_name+0x5c>
 802005a:	2c00      	cmp	r4, #0
 802005c:	d145      	bne.n	80200ea <rcl_validate_topic_name+0x146>
 802005e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8020062:	d04f      	beq.n	8020104 <rcl_validate_topic_name+0x160>
 8020064:	4620      	mov	r0, r4
 8020066:	2301      	movs	r3, #1
 8020068:	e006      	b.n	8020078 <rcl_validate_topic_name+0xd4>
 802006a:	428b      	cmp	r3, r1
 802006c:	f105 0501 	add.w	r5, r5, #1
 8020070:	f103 0201 	add.w	r2, r3, #1
 8020074:	d236      	bcs.n	80200e4 <rcl_validate_topic_name+0x140>
 8020076:	4613      	mov	r3, r2
 8020078:	4580      	cmp	r8, r0
 802007a:	f100 0001 	add.w	r0, r0, #1
 802007e:	d0f4      	beq.n	802006a <rcl_validate_topic_name+0xc6>
 8020080:	782a      	ldrb	r2, [r5, #0]
 8020082:	2a2f      	cmp	r2, #47	@ 0x2f
 8020084:	d1f1      	bne.n	802006a <rcl_validate_topic_name+0xc6>
 8020086:	786a      	ldrb	r2, [r5, #1]
 8020088:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802008c:	0754      	lsls	r4, r2, #29
 802008e:	d5ec      	bpl.n	802006a <rcl_validate_topic_name+0xc6>
 8020090:	2204      	movs	r2, #4
 8020092:	6032      	str	r2, [r6, #0]
 8020094:	2f00      	cmp	r7, #0
 8020096:	d0d1      	beq.n	802003c <rcl_validate_topic_name+0x98>
 8020098:	603b      	str	r3, [r7, #0]
 802009a:	2000      	movs	r0, #0
 802009c:	e7aa      	b.n	801fff4 <rcl_validate_topic_name+0x50>
 802009e:	200b      	movs	r0, #11
 80200a0:	4770      	bx	lr
 80200a2:	2304      	movs	r3, #4
 80200a4:	6033      	str	r3, [r6, #0]
 80200a6:	2f00      	cmp	r7, #0
 80200a8:	d1a2      	bne.n	801fff0 <rcl_validate_topic_name+0x4c>
 80200aa:	e7c7      	b.n	802003c <rcl_validate_topic_name+0x98>
 80200ac:	200b      	movs	r0, #11
 80200ae:	e7a1      	b.n	801fff4 <rcl_validate_topic_name+0x50>
 80200b0:	2309      	movs	r3, #9
 80200b2:	6033      	str	r3, [r6, #0]
 80200b4:	2f00      	cmp	r7, #0
 80200b6:	d1c0      	bne.n	802003a <rcl_validate_topic_name+0x96>
 80200b8:	e7c0      	b.n	802003c <rcl_validate_topic_name+0x98>
 80200ba:	2900      	cmp	r1, #0
 80200bc:	d0ca      	beq.n	8020054 <rcl_validate_topic_name+0xb0>
 80200be:	2306      	movs	r3, #6
 80200c0:	6033      	str	r3, [r6, #0]
 80200c2:	2f00      	cmp	r7, #0
 80200c4:	d1b9      	bne.n	802003a <rcl_validate_topic_name+0x96>
 80200c6:	e7b9      	b.n	802003c <rcl_validate_topic_name+0x98>
 80200c8:	2c00      	cmp	r4, #0
 80200ca:	d0c3      	beq.n	8020054 <rcl_validate_topic_name+0xb0>
 80200cc:	2308      	movs	r3, #8
 80200ce:	6033      	str	r3, [r6, #0]
 80200d0:	2f00      	cmp	r7, #0
 80200d2:	d1b2      	bne.n	802003a <rcl_validate_topic_name+0x96>
 80200d4:	e7b2      	b.n	802003c <rcl_validate_topic_name+0x98>
 80200d6:	2c00      	cmp	r4, #0
 80200d8:	d1f8      	bne.n	80200cc <rcl_validate_topic_name+0x128>
 80200da:	460b      	mov	r3, r1
 80200dc:	2401      	movs	r4, #1
 80200de:	e7b9      	b.n	8020054 <rcl_validate_topic_name+0xb0>
 80200e0:	2400      	movs	r4, #0
 80200e2:	e7b7      	b.n	8020054 <rcl_validate_topic_name+0xb0>
 80200e4:	2000      	movs	r0, #0
 80200e6:	6030      	str	r0, [r6, #0]
 80200e8:	e784      	b.n	801fff4 <rcl_validate_topic_name+0x50>
 80200ea:	2205      	movs	r2, #5
 80200ec:	6032      	str	r2, [r6, #0]
 80200ee:	2f00      	cmp	r7, #0
 80200f0:	d1d2      	bne.n	8020098 <rcl_validate_topic_name+0xf4>
 80200f2:	e7a3      	b.n	802003c <rcl_validate_topic_name+0x98>
 80200f4:	2c00      	cmp	r4, #0
 80200f6:	bf14      	ite	ne
 80200f8:	2308      	movne	r3, #8
 80200fa:	2303      	moveq	r3, #3
 80200fc:	6033      	str	r3, [r6, #0]
 80200fe:	2f00      	cmp	r7, #0
 8020100:	d19b      	bne.n	802003a <rcl_validate_topic_name+0x96>
 8020102:	e79b      	b.n	802003c <rcl_validate_topic_name+0x98>
 8020104:	2301      	movs	r3, #1
 8020106:	e00a      	b.n	802011e <rcl_validate_topic_name+0x17a>
 8020108:	2c01      	cmp	r4, #1
 802010a:	d013      	beq.n	8020134 <rcl_validate_topic_name+0x190>
 802010c:	4299      	cmp	r1, r3
 802010e:	f104 0401 	add.w	r4, r4, #1
 8020112:	f105 0501 	add.w	r5, r5, #1
 8020116:	f103 0201 	add.w	r2, r3, #1
 802011a:	d9e3      	bls.n	80200e4 <rcl_validate_topic_name+0x140>
 802011c:	4613      	mov	r3, r2
 802011e:	45a0      	cmp	r8, r4
 8020120:	d0f4      	beq.n	802010c <rcl_validate_topic_name+0x168>
 8020122:	782a      	ldrb	r2, [r5, #0]
 8020124:	2a2f      	cmp	r2, #47	@ 0x2f
 8020126:	d1ef      	bne.n	8020108 <rcl_validate_topic_name+0x164>
 8020128:	786a      	ldrb	r2, [r5, #1]
 802012a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802012e:	0752      	lsls	r2, r2, #29
 8020130:	d5ec      	bpl.n	802010c <rcl_validate_topic_name+0x168>
 8020132:	e7ad      	b.n	8020090 <rcl_validate_topic_name+0xec>
 8020134:	2307      	movs	r3, #7
 8020136:	6033      	str	r3, [r6, #0]
 8020138:	2f00      	cmp	r7, #0
 802013a:	f43f af7f 	beq.w	802003c <rcl_validate_topic_name+0x98>
 802013e:	603c      	str	r4, [r7, #0]
 8020140:	2000      	movs	r0, #0
 8020142:	e757      	b.n	801fff4 <rcl_validate_topic_name+0x50>
 8020144:	08025b18 	.word	0x08025b18

08020148 <rcl_interfaces__msg__FloatingPointRange__rosidl_typesupport_introspection_c__FloatingPointRange_init_function>:
 8020148:	f7f8 bc38 	b.w	80189bc <rcl_interfaces__msg__FloatingPointRange__init>

0802014c <rcl_interfaces__msg__FloatingPointRange__rosidl_typesupport_introspection_c__FloatingPointRange_fini_function>:
 802014c:	f7f8 bc3a 	b.w	80189c4 <rcl_interfaces__msg__FloatingPointRange__fini>

08020150 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange>:
 8020150:	4b04      	ldr	r3, [pc, #16]	@ (8020164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange+0x14>)
 8020152:	681a      	ldr	r2, [r3, #0]
 8020154:	b10a      	cbz	r2, 802015a <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange+0xa>
 8020156:	4803      	ldr	r0, [pc, #12]	@ (8020164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange+0x14>)
 8020158:	4770      	bx	lr
 802015a:	4a03      	ldr	r2, [pc, #12]	@ (8020168 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange+0x18>)
 802015c:	4801      	ldr	r0, [pc, #4]	@ (8020164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange+0x14>)
 802015e:	6812      	ldr	r2, [r2, #0]
 8020160:	601a      	str	r2, [r3, #0]
 8020162:	4770      	bx	lr
 8020164:	20001968 	.word	0x20001968
 8020168:	20000384 	.word	0x20000384

0802016c <rcl_interfaces__msg__IntegerRange__rosidl_typesupport_introspection_c__IntegerRange_init_function>:
 802016c:	f7f8 bcb0 	b.w	8018ad0 <rcl_interfaces__msg__IntegerRange__init>

08020170 <rcl_interfaces__msg__IntegerRange__rosidl_typesupport_introspection_c__IntegerRange_fini_function>:
 8020170:	f7f8 bcb2 	b.w	8018ad8 <rcl_interfaces__msg__IntegerRange__fini>

08020174 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange>:
 8020174:	4b04      	ldr	r3, [pc, #16]	@ (8020188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange+0x14>)
 8020176:	681a      	ldr	r2, [r3, #0]
 8020178:	b10a      	cbz	r2, 802017e <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange+0xa>
 802017a:	4803      	ldr	r0, [pc, #12]	@ (8020188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange+0x14>)
 802017c:	4770      	bx	lr
 802017e:	4a03      	ldr	r2, [pc, #12]	@ (802018c <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange+0x18>)
 8020180:	4801      	ldr	r0, [pc, #4]	@ (8020188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange+0x14>)
 8020182:	6812      	ldr	r2, [r2, #0]
 8020184:	601a      	str	r2, [r3, #0]
 8020186:	4770      	bx	lr
 8020188:	20001a28 	.word	0x20001a28
 802018c:	20000384 	.word	0x20000384

08020190 <rcl_interfaces__msg__Parameter__rosidl_typesupport_introspection_c__Parameter_init_function>:
 8020190:	f7f8 bd7e 	b.w	8018c90 <rcl_interfaces__msg__Parameter__init>

08020194 <rcl_interfaces__msg__Parameter__rosidl_typesupport_introspection_c__Parameter_fini_function>:
 8020194:	f7f8 bda0 	b.w	8018cd8 <rcl_interfaces__msg__Parameter__fini>

08020198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>:
 8020198:	b508      	push	{r3, lr}
 802019a:	f7fa f895 	bl	801a2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 802019e:	4b06      	ldr	r3, [pc, #24]	@ (80201b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter+0x20>)
 80201a0:	4906      	ldr	r1, [pc, #24]	@ (80201bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter+0x24>)
 80201a2:	681a      	ldr	r2, [r3, #0]
 80201a4:	6488      	str	r0, [r1, #72]	@ 0x48
 80201a6:	b10a      	cbz	r2, 80201ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter+0x14>
 80201a8:	4803      	ldr	r0, [pc, #12]	@ (80201b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter+0x20>)
 80201aa:	bd08      	pop	{r3, pc}
 80201ac:	4a04      	ldr	r2, [pc, #16]	@ (80201c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter+0x28>)
 80201ae:	4802      	ldr	r0, [pc, #8]	@ (80201b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter+0x20>)
 80201b0:	6812      	ldr	r2, [r2, #0]
 80201b2:	601a      	str	r2, [r3, #0]
 80201b4:	bd08      	pop	{r3, pc}
 80201b6:	bf00      	nop
 80201b8:	20001aac 	.word	0x20001aac
 80201bc:	20001a34 	.word	0x20001a34
 80201c0:	20000384 	.word	0x20000384

080201c4 <get_serialized_size_rcl_interfaces__msg__FloatingPointRange>:
 80201c4:	b1b8      	cbz	r0, 80201f6 <get_serialized_size_rcl_interfaces__msg__FloatingPointRange+0x32>
 80201c6:	b538      	push	{r3, r4, r5, lr}
 80201c8:	460d      	mov	r5, r1
 80201ca:	4628      	mov	r0, r5
 80201cc:	2108      	movs	r1, #8
 80201ce:	f7f2 fe71 	bl	8012eb4 <ucdr_alignment>
 80201d2:	f105 0308 	add.w	r3, r5, #8
 80201d6:	181c      	adds	r4, r3, r0
 80201d8:	2108      	movs	r1, #8
 80201da:	4620      	mov	r0, r4
 80201dc:	f7f2 fe6a 	bl	8012eb4 <ucdr_alignment>
 80201e0:	3008      	adds	r0, #8
 80201e2:	4404      	add	r4, r0
 80201e4:	2108      	movs	r1, #8
 80201e6:	4620      	mov	r0, r4
 80201e8:	f7f2 fe64 	bl	8012eb4 <ucdr_alignment>
 80201ec:	f1c5 0508 	rsb	r5, r5, #8
 80201f0:	4428      	add	r0, r5
 80201f2:	4420      	add	r0, r4
 80201f4:	bd38      	pop	{r3, r4, r5, pc}
 80201f6:	4770      	bx	lr

080201f8 <_FloatingPointRange__cdr_deserialize>:
 80201f8:	b538      	push	{r3, r4, r5, lr}
 80201fa:	460c      	mov	r4, r1
 80201fc:	b171      	cbz	r1, 802021c <_FloatingPointRange__cdr_deserialize+0x24>
 80201fe:	4605      	mov	r5, r0
 8020200:	f7f2 fc6c 	bl	8012adc <ucdr_deserialize_double>
 8020204:	f104 0108 	add.w	r1, r4, #8
 8020208:	4628      	mov	r0, r5
 802020a:	f7f2 fc67 	bl	8012adc <ucdr_deserialize_double>
 802020e:	f104 0110 	add.w	r1, r4, #16
 8020212:	4628      	mov	r0, r5
 8020214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020218:	f7f2 bc60 	b.w	8012adc <ucdr_deserialize_double>
 802021c:	4608      	mov	r0, r1
 802021e:	bd38      	pop	{r3, r4, r5, pc}

08020220 <_FloatingPointRange__cdr_serialize>:
 8020220:	b198      	cbz	r0, 802024a <_FloatingPointRange__cdr_serialize+0x2a>
 8020222:	b538      	push	{r3, r4, r5, lr}
 8020224:	ed90 0b00 	vldr	d0, [r0]
 8020228:	460d      	mov	r5, r1
 802022a:	4604      	mov	r4, r0
 802022c:	4608      	mov	r0, r1
 802022e:	f7f2 fab3 	bl	8012798 <ucdr_serialize_double>
 8020232:	ed94 0b02 	vldr	d0, [r4, #8]
 8020236:	4628      	mov	r0, r5
 8020238:	f7f2 faae 	bl	8012798 <ucdr_serialize_double>
 802023c:	ed94 0b04 	vldr	d0, [r4, #16]
 8020240:	4628      	mov	r0, r5
 8020242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020246:	f7f2 baa7 	b.w	8012798 <ucdr_serialize_double>
 802024a:	4770      	bx	lr

0802024c <_FloatingPointRange__get_serialized_size>:
 802024c:	b198      	cbz	r0, 8020276 <_FloatingPointRange__get_serialized_size+0x2a>
 802024e:	b510      	push	{r4, lr}
 8020250:	2108      	movs	r1, #8
 8020252:	2000      	movs	r0, #0
 8020254:	f7f2 fe2e 	bl	8012eb4 <ucdr_alignment>
 8020258:	f100 0408 	add.w	r4, r0, #8
 802025c:	2108      	movs	r1, #8
 802025e:	4620      	mov	r0, r4
 8020260:	f7f2 fe28 	bl	8012eb4 <ucdr_alignment>
 8020264:	3008      	adds	r0, #8
 8020266:	4404      	add	r4, r0
 8020268:	2108      	movs	r1, #8
 802026a:	4620      	mov	r0, r4
 802026c:	f7f2 fe22 	bl	8012eb4 <ucdr_alignment>
 8020270:	3008      	adds	r0, #8
 8020272:	4420      	add	r0, r4
 8020274:	bd10      	pop	{r4, pc}
 8020276:	4770      	bx	lr

08020278 <_FloatingPointRange__max_serialized_size>:
 8020278:	b538      	push	{r3, r4, r5, lr}
 802027a:	2108      	movs	r1, #8
 802027c:	2000      	movs	r0, #0
 802027e:	f7f2 fe19 	bl	8012eb4 <ucdr_alignment>
 8020282:	f100 0508 	add.w	r5, r0, #8
 8020286:	2108      	movs	r1, #8
 8020288:	4628      	mov	r0, r5
 802028a:	f7f2 fe13 	bl	8012eb4 <ucdr_alignment>
 802028e:	f100 0408 	add.w	r4, r0, #8
 8020292:	442c      	add	r4, r5
 8020294:	2108      	movs	r1, #8
 8020296:	4620      	mov	r0, r4
 8020298:	f7f2 fe0c 	bl	8012eb4 <ucdr_alignment>
 802029c:	3008      	adds	r0, #8
 802029e:	4420      	add	r0, r4
 80202a0:	bd38      	pop	{r3, r4, r5, pc}
 80202a2:	bf00      	nop

080202a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange>:
 80202a4:	4800      	ldr	r0, [pc, #0]	@ (80202a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__FloatingPointRange+0x4>)
 80202a6:	4770      	bx	lr
 80202a8:	20001ab8 	.word	0x20001ab8

080202ac <get_serialized_size_rcl_interfaces__msg__IntegerRange>:
 80202ac:	b1b8      	cbz	r0, 80202de <get_serialized_size_rcl_interfaces__msg__IntegerRange+0x32>
 80202ae:	b538      	push	{r3, r4, r5, lr}
 80202b0:	460d      	mov	r5, r1
 80202b2:	4628      	mov	r0, r5
 80202b4:	2108      	movs	r1, #8
 80202b6:	f7f2 fdfd 	bl	8012eb4 <ucdr_alignment>
 80202ba:	f105 0308 	add.w	r3, r5, #8
 80202be:	181c      	adds	r4, r3, r0
 80202c0:	2108      	movs	r1, #8
 80202c2:	4620      	mov	r0, r4
 80202c4:	f7f2 fdf6 	bl	8012eb4 <ucdr_alignment>
 80202c8:	3008      	adds	r0, #8
 80202ca:	4404      	add	r4, r0
 80202cc:	2108      	movs	r1, #8
 80202ce:	4620      	mov	r0, r4
 80202d0:	f7f2 fdf0 	bl	8012eb4 <ucdr_alignment>
 80202d4:	f1c5 0508 	rsb	r5, r5, #8
 80202d8:	4428      	add	r0, r5
 80202da:	4420      	add	r0, r4
 80202dc:	bd38      	pop	{r3, r4, r5, pc}
 80202de:	4770      	bx	lr

080202e0 <_IntegerRange__cdr_deserialize>:
 80202e0:	b538      	push	{r3, r4, r5, lr}
 80202e2:	460c      	mov	r4, r1
 80202e4:	b171      	cbz	r1, 8020304 <_IntegerRange__cdr_deserialize+0x24>
 80202e6:	4605      	mov	r5, r0
 80202e8:	f7f1 ff92 	bl	8012210 <ucdr_deserialize_int64_t>
 80202ec:	f104 0108 	add.w	r1, r4, #8
 80202f0:	4628      	mov	r0, r5
 80202f2:	f7f1 ff8d 	bl	8012210 <ucdr_deserialize_int64_t>
 80202f6:	f104 0110 	add.w	r1, r4, #16
 80202fa:	4628      	mov	r0, r5
 80202fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020300:	f7f1 bb02 	b.w	8011908 <ucdr_deserialize_uint64_t>
 8020304:	4608      	mov	r0, r1
 8020306:	bd38      	pop	{r3, r4, r5, pc}

08020308 <_IntegerRange__cdr_serialize>:
 8020308:	b198      	cbz	r0, 8020332 <_IntegerRange__cdr_serialize+0x2a>
 802030a:	b570      	push	{r4, r5, r6, lr}
 802030c:	e9d0 2300 	ldrd	r2, r3, [r0]
 8020310:	460d      	mov	r5, r1
 8020312:	4604      	mov	r4, r0
 8020314:	4608      	mov	r0, r1
 8020316:	f7f1 fdd9 	bl	8011ecc <ucdr_serialize_int64_t>
 802031a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 802031e:	4628      	mov	r0, r5
 8020320:	f7f1 fdd4 	bl	8011ecc <ucdr_serialize_int64_t>
 8020324:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8020328:	4628      	mov	r0, r5
 802032a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802032e:	f7f1 ba1b 	b.w	8011768 <ucdr_serialize_uint64_t>
 8020332:	4770      	bx	lr

08020334 <_IntegerRange__get_serialized_size>:
 8020334:	b198      	cbz	r0, 802035e <_IntegerRange__get_serialized_size+0x2a>
 8020336:	b510      	push	{r4, lr}
 8020338:	2108      	movs	r1, #8
 802033a:	2000      	movs	r0, #0
 802033c:	f7f2 fdba 	bl	8012eb4 <ucdr_alignment>
 8020340:	f100 0408 	add.w	r4, r0, #8
 8020344:	2108      	movs	r1, #8
 8020346:	4620      	mov	r0, r4
 8020348:	f7f2 fdb4 	bl	8012eb4 <ucdr_alignment>
 802034c:	3008      	adds	r0, #8
 802034e:	4404      	add	r4, r0
 8020350:	2108      	movs	r1, #8
 8020352:	4620      	mov	r0, r4
 8020354:	f7f2 fdae 	bl	8012eb4 <ucdr_alignment>
 8020358:	3008      	adds	r0, #8
 802035a:	4420      	add	r0, r4
 802035c:	bd10      	pop	{r4, pc}
 802035e:	4770      	bx	lr

08020360 <_IntegerRange__max_serialized_size>:
 8020360:	b538      	push	{r3, r4, r5, lr}
 8020362:	2108      	movs	r1, #8
 8020364:	2000      	movs	r0, #0
 8020366:	f7f2 fda5 	bl	8012eb4 <ucdr_alignment>
 802036a:	f100 0508 	add.w	r5, r0, #8
 802036e:	2108      	movs	r1, #8
 8020370:	4628      	mov	r0, r5
 8020372:	f7f2 fd9f 	bl	8012eb4 <ucdr_alignment>
 8020376:	f100 0408 	add.w	r4, r0, #8
 802037a:	442c      	add	r4, r5
 802037c:	2108      	movs	r1, #8
 802037e:	4620      	mov	r0, r4
 8020380:	f7f2 fd98 	bl	8012eb4 <ucdr_alignment>
 8020384:	3008      	adds	r0, #8
 8020386:	4420      	add	r0, r4
 8020388:	bd38      	pop	{r3, r4, r5, pc}
 802038a:	bf00      	nop

0802038c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange>:
 802038c:	4800      	ldr	r0, [pc, #0]	@ (8020390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__IntegerRange+0x4>)
 802038e:	4770      	bx	lr
 8020390:	20001ae0 	.word	0x20001ae0

08020394 <_Parameter__max_serialized_size>:
 8020394:	b500      	push	{lr}
 8020396:	b083      	sub	sp, #12
 8020398:	2100      	movs	r1, #0
 802039a:	f10d 0007 	add.w	r0, sp, #7
 802039e:	f88d 1007 	strb.w	r1, [sp, #7]
 80203a2:	f7fb fbf9 	bl	801bb98 <max_serialized_size_rcl_interfaces__msg__ParameterValue>
 80203a6:	b003      	add	sp, #12
 80203a8:	f85d fb04 	ldr.w	pc, [sp], #4

080203ac <_Parameter__cdr_serialize>:
 80203ac:	b1d0      	cbz	r0, 80203e4 <_Parameter__cdr_serialize+0x38>
 80203ae:	b570      	push	{r4, r5, r6, lr}
 80203b0:	6806      	ldr	r6, [r0, #0]
 80203b2:	460d      	mov	r5, r1
 80203b4:	4604      	mov	r4, r0
 80203b6:	b196      	cbz	r6, 80203de <_Parameter__cdr_serialize+0x32>
 80203b8:	4630      	mov	r0, r6
 80203ba:	f7df ff21 	bl	8000200 <strlen>
 80203be:	1c42      	adds	r2, r0, #1
 80203c0:	4631      	mov	r1, r6
 80203c2:	6060      	str	r0, [r4, #4]
 80203c4:	4628      	mov	r0, r5
 80203c6:	f7f2 fde1 	bl	8012f8c <ucdr_serialize_sequence_char>
 80203ca:	f7fb fc0f 	bl	801bbec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 80203ce:	6843      	ldr	r3, [r0, #4]
 80203d0:	4629      	mov	r1, r5
 80203d2:	f104 0010 	add.w	r0, r4, #16
 80203d6:	689b      	ldr	r3, [r3, #8]
 80203d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80203dc:	4718      	bx	r3
 80203de:	4632      	mov	r2, r6
 80203e0:	4630      	mov	r0, r6
 80203e2:	e7ed      	b.n	80203c0 <_Parameter__cdr_serialize+0x14>
 80203e4:	4770      	bx	lr
 80203e6:	bf00      	nop

080203e8 <get_serialized_size_rcl_interfaces__msg__Parameter>:
 80203e8:	b570      	push	{r4, r5, r6, lr}
 80203ea:	4604      	mov	r4, r0
 80203ec:	b178      	cbz	r0, 802040e <get_serialized_size_rcl_interfaces__msg__Parameter+0x26>
 80203ee:	460d      	mov	r5, r1
 80203f0:	4628      	mov	r0, r5
 80203f2:	2104      	movs	r1, #4
 80203f4:	f7f2 fd5e 	bl	8012eb4 <ucdr_alignment>
 80203f8:	6866      	ldr	r6, [r4, #4]
 80203fa:	1d69      	adds	r1, r5, #5
 80203fc:	4431      	add	r1, r6
 80203fe:	180e      	adds	r6, r1, r0
 8020400:	4631      	mov	r1, r6
 8020402:	f104 0010 	add.w	r0, r4, #16
 8020406:	f7fb fa5f 	bl	801b8c8 <get_serialized_size_rcl_interfaces__msg__ParameterValue>
 802040a:	1b40      	subs	r0, r0, r5
 802040c:	4430      	add	r0, r6
 802040e:	bd70      	pop	{r4, r5, r6, pc}

08020410 <_Parameter__cdr_deserialize>:
 8020410:	b570      	push	{r4, r5, r6, lr}
 8020412:	460c      	mov	r4, r1
 8020414:	b082      	sub	sp, #8
 8020416:	b1c9      	cbz	r1, 802044c <_Parameter__cdr_deserialize+0x3c>
 8020418:	688e      	ldr	r6, [r1, #8]
 802041a:	6809      	ldr	r1, [r1, #0]
 802041c:	ab01      	add	r3, sp, #4
 802041e:	4632      	mov	r2, r6
 8020420:	4605      	mov	r5, r0
 8020422:	f7f2 fdc5 	bl	8012fb0 <ucdr_deserialize_sequence_char>
 8020426:	9b01      	ldr	r3, [sp, #4]
 8020428:	b960      	cbnz	r0, 8020444 <_Parameter__cdr_deserialize+0x34>
 802042a:	429e      	cmp	r6, r3
 802042c:	d311      	bcc.n	8020452 <_Parameter__cdr_deserialize+0x42>
 802042e:	f7fb fbdd 	bl	801bbec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue>
 8020432:	6843      	ldr	r3, [r0, #4]
 8020434:	68db      	ldr	r3, [r3, #12]
 8020436:	f104 0110 	add.w	r1, r4, #16
 802043a:	4628      	mov	r0, r5
 802043c:	b002      	add	sp, #8
 802043e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020442:	4718      	bx	r3
 8020444:	b103      	cbz	r3, 8020448 <_Parameter__cdr_deserialize+0x38>
 8020446:	3b01      	subs	r3, #1
 8020448:	6063      	str	r3, [r4, #4]
 802044a:	e7f0      	b.n	802042e <_Parameter__cdr_deserialize+0x1e>
 802044c:	4608      	mov	r0, r1
 802044e:	b002      	add	sp, #8
 8020450:	bd70      	pop	{r4, r5, r6, pc}
 8020452:	2101      	movs	r1, #1
 8020454:	75a8      	strb	r0, [r5, #22]
 8020456:	7569      	strb	r1, [r5, #21]
 8020458:	6060      	str	r0, [r4, #4]
 802045a:	4628      	mov	r0, r5
 802045c:	f7f2 fd40 	bl	8012ee0 <ucdr_align_to>
 8020460:	9901      	ldr	r1, [sp, #4]
 8020462:	4628      	mov	r0, r5
 8020464:	f7f2 fd72 	bl	8012f4c <ucdr_advance_buffer>
 8020468:	e7e1      	b.n	802042e <_Parameter__cdr_deserialize+0x1e>
 802046a:	bf00      	nop

0802046c <_Parameter__get_serialized_size>:
 802046c:	b510      	push	{r4, lr}
 802046e:	4604      	mov	r4, r0
 8020470:	b168      	cbz	r0, 802048e <_Parameter__get_serialized_size+0x22>
 8020472:	2104      	movs	r1, #4
 8020474:	2000      	movs	r0, #0
 8020476:	f7f2 fd1d 	bl	8012eb4 <ucdr_alignment>
 802047a:	6861      	ldr	r1, [r4, #4]
 802047c:	4603      	mov	r3, r0
 802047e:	3105      	adds	r1, #5
 8020480:	f104 0010 	add.w	r0, r4, #16
 8020484:	18cc      	adds	r4, r1, r3
 8020486:	4621      	mov	r1, r4
 8020488:	f7fb fa1e 	bl	801b8c8 <get_serialized_size_rcl_interfaces__msg__ParameterValue>
 802048c:	4420      	add	r0, r4
 802048e:	bd10      	pop	{r4, pc}

08020490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter>:
 8020490:	4800      	ldr	r0, [pc, #0]	@ (8020494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__rcl_interfaces__msg__Parameter+0x4>)
 8020492:	4770      	bx	lr
 8020494:	20001b08 	.word	0x20001b08

08020498 <rcutils_string_array_fini>:
 8020498:	b320      	cbz	r0, 80204e4 <rcutils_string_array_fini+0x4c>
 802049a:	b570      	push	{r4, r5, r6, lr}
 802049c:	4604      	mov	r4, r0
 802049e:	6840      	ldr	r0, [r0, #4]
 80204a0:	b1d8      	cbz	r0, 80204da <rcutils_string_array_fini+0x42>
 80204a2:	f104 0008 	add.w	r0, r4, #8
 80204a6:	f7ee f93f 	bl	800e728 <rcutils_allocator_is_valid>
 80204aa:	b1b8      	cbz	r0, 80204dc <rcutils_string_array_fini+0x44>
 80204ac:	6823      	ldr	r3, [r4, #0]
 80204ae:	b1bb      	cbz	r3, 80204e0 <rcutils_string_array_fini+0x48>
 80204b0:	2500      	movs	r5, #0
 80204b2:	6860      	ldr	r0, [r4, #4]
 80204b4:	462e      	mov	r6, r5
 80204b6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80204ba:	68e3      	ldr	r3, [r4, #12]
 80204bc:	69a1      	ldr	r1, [r4, #24]
 80204be:	4798      	blx	r3
 80204c0:	e9d4 3000 	ldrd	r3, r0, [r4]
 80204c4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80204c8:	3501      	adds	r5, #1
 80204ca:	429d      	cmp	r5, r3
 80204cc:	d3f3      	bcc.n	80204b6 <rcutils_string_array_fini+0x1e>
 80204ce:	68e3      	ldr	r3, [r4, #12]
 80204d0:	69a1      	ldr	r1, [r4, #24]
 80204d2:	4798      	blx	r3
 80204d4:	2000      	movs	r0, #0
 80204d6:	e9c4 0000 	strd	r0, r0, [r4]
 80204da:	bd70      	pop	{r4, r5, r6, pc}
 80204dc:	200b      	movs	r0, #11
 80204de:	bd70      	pop	{r4, r5, r6, pc}
 80204e0:	6860      	ldr	r0, [r4, #4]
 80204e2:	e7f4      	b.n	80204ce <rcutils_string_array_fini+0x36>
 80204e4:	200b      	movs	r0, #11
 80204e6:	4770      	bx	lr

080204e8 <on_status>:
 80204e8:	b082      	sub	sp, #8
 80204ea:	b002      	add	sp, #8
 80204ec:	4770      	bx	lr
 80204ee:	bf00      	nop

080204f0 <on_topic>:
 80204f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204f4:	4a22      	ldr	r2, [pc, #136]	@ (8020580 <on_topic+0x90>)
 80204f6:	b094      	sub	sp, #80	@ 0x50
 80204f8:	6812      	ldr	r2, [r2, #0]
 80204fa:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80204fc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8020500:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8020504:	b3c2      	cbz	r2, 8020578 <on_topic+0x88>
 8020506:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 802050a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 802050e:	e001      	b.n	8020514 <on_topic+0x24>
 8020510:	6852      	ldr	r2, [r2, #4]
 8020512:	b38a      	cbz	r2, 8020578 <on_topic+0x88>
 8020514:	6894      	ldr	r4, [r2, #8]
 8020516:	8aa3      	ldrh	r3, [r4, #20]
 8020518:	428b      	cmp	r3, r1
 802051a:	d1f9      	bne.n	8020510 <on_topic+0x20>
 802051c:	7da3      	ldrb	r3, [r4, #22]
 802051e:	4283      	cmp	r3, r0
 8020520:	d1f6      	bne.n	8020510 <on_topic+0x20>
 8020522:	2248      	movs	r2, #72	@ 0x48
 8020524:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8020528:	4668      	mov	r0, sp
 802052a:	f001 fa82 	bl	8021a32 <memcpy>
 802052e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8020532:	cb0c      	ldmia	r3, {r2, r3}
 8020534:	4620      	mov	r0, r4
 8020536:	f7ee fd27 	bl	800ef88 <rmw_uxrce_get_static_input_buffer_for_entity>
 802053a:	4607      	mov	r7, r0
 802053c:	b1e0      	cbz	r0, 8020578 <on_topic+0x88>
 802053e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8020542:	4632      	mov	r2, r6
 8020544:	4628      	mov	r0, r5
 8020546:	f108 0110 	add.w	r1, r8, #16
 802054a:	f7f0 f8b9 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 802054e:	b930      	cbnz	r0, 802055e <on_topic+0x6e>
 8020550:	480c      	ldr	r0, [pc, #48]	@ (8020584 <on_topic+0x94>)
 8020552:	4639      	mov	r1, r7
 8020554:	b014      	add	sp, #80	@ 0x50
 8020556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802055a:	f7fc bbcd 	b.w	801ccf8 <put_memory>
 802055e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8020562:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8020566:	f7fd fde7 	bl	801e138 <rmw_uros_epoch_nanos>
 802056a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 802056e:	2305      	movs	r3, #5
 8020570:	e942 0102 	strd	r0, r1, [r2, #-8]
 8020574:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8020578:	b014      	add	sp, #80	@ 0x50
 802057a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802057e:	bf00      	nop
 8020580:	20016d24 	.word	0x20016d24
 8020584:	20016d14 	.word	0x20016d14

08020588 <on_request>:
 8020588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802058c:	4823      	ldr	r0, [pc, #140]	@ (802061c <on_request+0x94>)
 802058e:	b094      	sub	sp, #80	@ 0x50
 8020590:	6800      	ldr	r0, [r0, #0]
 8020592:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020594:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8020598:	9113      	str	r1, [sp, #76]	@ 0x4c
 802059a:	2800      	cmp	r0, #0
 802059c:	d03b      	beq.n	8020616 <on_request+0x8e>
 802059e:	461d      	mov	r5, r3
 80205a0:	e001      	b.n	80205a6 <on_request+0x1e>
 80205a2:	6840      	ldr	r0, [r0, #4]
 80205a4:	b3b8      	cbz	r0, 8020616 <on_request+0x8e>
 80205a6:	6884      	ldr	r4, [r0, #8]
 80205a8:	8b21      	ldrh	r1, [r4, #24]
 80205aa:	4291      	cmp	r1, r2
 80205ac:	d1f9      	bne.n	80205a2 <on_request+0x1a>
 80205ae:	2248      	movs	r2, #72	@ 0x48
 80205b0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80205b4:	4668      	mov	r0, sp
 80205b6:	f001 fa3c 	bl	8021a32 <memcpy>
 80205ba:	f104 0320 	add.w	r3, r4, #32
 80205be:	cb0c      	ldmia	r3, {r2, r3}
 80205c0:	4620      	mov	r0, r4
 80205c2:	f7ee fce1 	bl	800ef88 <rmw_uxrce_get_static_input_buffer_for_entity>
 80205c6:	4680      	mov	r8, r0
 80205c8:	b328      	cbz	r0, 8020616 <on_request+0x8e>
 80205ca:	4638      	mov	r0, r7
 80205cc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80205d0:	4632      	mov	r2, r6
 80205d2:	f107 0110 	add.w	r1, r7, #16
 80205d6:	f7f0 f873 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 80205da:	b930      	cbnz	r0, 80205ea <on_request+0x62>
 80205dc:	4810      	ldr	r0, [pc, #64]	@ (8020620 <on_request+0x98>)
 80205de:	4641      	mov	r1, r8
 80205e0:	b014      	add	sp, #80	@ 0x50
 80205e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80205e6:	f7fc bb87 	b.w	801ccf8 <put_memory>
 80205ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80205ec:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80205f0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80205f4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80205f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80205fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8020600:	e88c 0003 	stmia.w	ip, {r0, r1}
 8020604:	f7fd fd98 	bl	801e138 <rmw_uros_epoch_nanos>
 8020608:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 802060c:	2303      	movs	r3, #3
 802060e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8020612:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8020616:	b014      	add	sp, #80	@ 0x50
 8020618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802061c:	20016cf4 	.word	0x20016cf4
 8020620:	20016d14 	.word	0x20016d14

08020624 <on_reply>:
 8020624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020628:	4821      	ldr	r0, [pc, #132]	@ (80206b0 <on_reply+0x8c>)
 802062a:	b094      	sub	sp, #80	@ 0x50
 802062c:	6800      	ldr	r0, [r0, #0]
 802062e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8020630:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8020634:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020636:	b3b8      	cbz	r0, 80206a8 <on_reply+0x84>
 8020638:	461d      	mov	r5, r3
 802063a:	e001      	b.n	8020640 <on_reply+0x1c>
 802063c:	6840      	ldr	r0, [r0, #4]
 802063e:	b398      	cbz	r0, 80206a8 <on_reply+0x84>
 8020640:	6884      	ldr	r4, [r0, #8]
 8020642:	8b21      	ldrh	r1, [r4, #24]
 8020644:	4291      	cmp	r1, r2
 8020646:	d1f9      	bne.n	802063c <on_reply+0x18>
 8020648:	2248      	movs	r2, #72	@ 0x48
 802064a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 802064e:	4668      	mov	r0, sp
 8020650:	f001 f9ef 	bl	8021a32 <memcpy>
 8020654:	f104 0320 	add.w	r3, r4, #32
 8020658:	cb0c      	ldmia	r3, {r2, r3}
 802065a:	4620      	mov	r0, r4
 802065c:	f7ee fc94 	bl	800ef88 <rmw_uxrce_get_static_input_buffer_for_entity>
 8020660:	4680      	mov	r8, r0
 8020662:	b308      	cbz	r0, 80206a8 <on_reply+0x84>
 8020664:	4638      	mov	r0, r7
 8020666:	f8d8 7008 	ldr.w	r7, [r8, #8]
 802066a:	4632      	mov	r2, r6
 802066c:	f107 0110 	add.w	r1, r7, #16
 8020670:	f7f0 f826 	bl	80106c0 <ucdr_deserialize_array_uint8_t>
 8020674:	b930      	cbnz	r0, 8020684 <on_reply+0x60>
 8020676:	480f      	ldr	r0, [pc, #60]	@ (80206b4 <on_reply+0x90>)
 8020678:	4641      	mov	r1, r8
 802067a:	b014      	add	sp, #80	@ 0x50
 802067c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020680:	f7fc bb3a 	b.w	801ccf8 <put_memory>
 8020684:	2200      	movs	r2, #0
 8020686:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 802068a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 802068e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8020692:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8020696:	f7fd fd4f 	bl	801e138 <rmw_uros_epoch_nanos>
 802069a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 802069e:	2304      	movs	r3, #4
 80206a0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80206a4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80206a8:	b014      	add	sp, #80	@ 0x50
 80206aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206ae:	bf00      	nop
 80206b0:	20011f58 	.word	0x20011f58
 80206b4:	20016d14 	.word	0x20016d14

080206b8 <rmw_create_guard_condition>:
 80206b8:	b538      	push	{r3, r4, r5, lr}
 80206ba:	4605      	mov	r5, r0
 80206bc:	4807      	ldr	r0, [pc, #28]	@ (80206dc <rmw_create_guard_condition+0x24>)
 80206be:	f7fc fb0b 	bl	801ccd8 <get_memory>
 80206c2:	b148      	cbz	r0, 80206d8 <rmw_create_guard_condition+0x20>
 80206c4:	6884      	ldr	r4, [r0, #8]
 80206c6:	2300      	movs	r3, #0
 80206c8:	7423      	strb	r3, [r4, #16]
 80206ca:	61e5      	str	r5, [r4, #28]
 80206cc:	f7fc fb6c 	bl	801cda8 <rmw_get_implementation_identifier>
 80206d0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80206d4:	f104 0014 	add.w	r0, r4, #20
 80206d8:	bd38      	pop	{r3, r4, r5, pc}
 80206da:	bf00      	nop
 80206dc:	20016cb4 	.word	0x20016cb4

080206e0 <rmw_destroy_guard_condition>:
 80206e0:	b508      	push	{r3, lr}
 80206e2:	4b08      	ldr	r3, [pc, #32]	@ (8020704 <rmw_destroy_guard_condition+0x24>)
 80206e4:	6819      	ldr	r1, [r3, #0]
 80206e6:	b911      	cbnz	r1, 80206ee <rmw_destroy_guard_condition+0xe>
 80206e8:	e00a      	b.n	8020700 <rmw_destroy_guard_condition+0x20>
 80206ea:	6849      	ldr	r1, [r1, #4]
 80206ec:	b141      	cbz	r1, 8020700 <rmw_destroy_guard_condition+0x20>
 80206ee:	688b      	ldr	r3, [r1, #8]
 80206f0:	3314      	adds	r3, #20
 80206f2:	4298      	cmp	r0, r3
 80206f4:	d1f9      	bne.n	80206ea <rmw_destroy_guard_condition+0xa>
 80206f6:	4803      	ldr	r0, [pc, #12]	@ (8020704 <rmw_destroy_guard_condition+0x24>)
 80206f8:	f7fc fafe 	bl	801ccf8 <put_memory>
 80206fc:	2000      	movs	r0, #0
 80206fe:	bd08      	pop	{r3, pc}
 8020700:	2001      	movs	r0, #1
 8020702:	bd08      	pop	{r3, pc}
 8020704:	20016cb4 	.word	0x20016cb4

08020708 <asinf>:
 8020708:	b508      	push	{r3, lr}
 802070a:	ed2d 8b02 	vpush	{d8}
 802070e:	eeb0 8a40 	vmov.f32	s16, s0
 8020712:	f000 fa9f 	bl	8020c54 <__ieee754_asinf>
 8020716:	eeb4 8a48 	vcmp.f32	s16, s16
 802071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802071e:	eef0 8a40 	vmov.f32	s17, s0
 8020722:	d615      	bvs.n	8020750 <asinf+0x48>
 8020724:	eeb0 0a48 	vmov.f32	s0, s16
 8020728:	f000 f8e4 	bl	80208f4 <fabsf>
 802072c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020730:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020738:	dd0a      	ble.n	8020750 <asinf+0x48>
 802073a:	f001 f94d 	bl	80219d8 <__errno>
 802073e:	ecbd 8b02 	vpop	{d8}
 8020742:	2321      	movs	r3, #33	@ 0x21
 8020744:	6003      	str	r3, [r0, #0]
 8020746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802074a:	4804      	ldr	r0, [pc, #16]	@ (802075c <asinf+0x54>)
 802074c:	f000 ba7c 	b.w	8020c48 <nanf>
 8020750:	eeb0 0a68 	vmov.f32	s0, s17
 8020754:	ecbd 8b02 	vpop	{d8}
 8020758:	bd08      	pop	{r3, pc}
 802075a:	bf00      	nop
 802075c:	08025c53 	.word	0x08025c53

08020760 <atan2>:
 8020760:	f000 b802 	b.w	8020768 <__ieee754_atan2>
 8020764:	0000      	movs	r0, r0
	...

08020768 <__ieee754_atan2>:
 8020768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802076c:	ec57 6b11 	vmov	r6, r7, d1
 8020770:	4273      	negs	r3, r6
 8020772:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80208f0 <__ieee754_atan2+0x188>
 8020776:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 802077a:	4333      	orrs	r3, r6
 802077c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8020780:	4543      	cmp	r3, r8
 8020782:	ec51 0b10 	vmov	r0, r1, d0
 8020786:	4635      	mov	r5, r6
 8020788:	d809      	bhi.n	802079e <__ieee754_atan2+0x36>
 802078a:	4244      	negs	r4, r0
 802078c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8020790:	4304      	orrs	r4, r0
 8020792:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8020796:	4544      	cmp	r4, r8
 8020798:	468e      	mov	lr, r1
 802079a:	4681      	mov	r9, r0
 802079c:	d907      	bls.n	80207ae <__ieee754_atan2+0x46>
 802079e:	4632      	mov	r2, r6
 80207a0:	463b      	mov	r3, r7
 80207a2:	f7df fd9b 	bl	80002dc <__adddf3>
 80207a6:	ec41 0b10 	vmov	d0, r0, r1
 80207aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207ae:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80207b2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80207b6:	4334      	orrs	r4, r6
 80207b8:	d103      	bne.n	80207c2 <__ieee754_atan2+0x5a>
 80207ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207be:	f000 b8a3 	b.w	8020908 <atan>
 80207c2:	17bc      	asrs	r4, r7, #30
 80207c4:	f004 0402 	and.w	r4, r4, #2
 80207c8:	ea53 0909 	orrs.w	r9, r3, r9
 80207cc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80207d0:	d107      	bne.n	80207e2 <__ieee754_atan2+0x7a>
 80207d2:	2c02      	cmp	r4, #2
 80207d4:	d05f      	beq.n	8020896 <__ieee754_atan2+0x12e>
 80207d6:	2c03      	cmp	r4, #3
 80207d8:	d1e5      	bne.n	80207a6 <__ieee754_atan2+0x3e>
 80207da:	a141      	add	r1, pc, #260	@ (adr r1, 80208e0 <__ieee754_atan2+0x178>)
 80207dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207e0:	e7e1      	b.n	80207a6 <__ieee754_atan2+0x3e>
 80207e2:	4315      	orrs	r5, r2
 80207e4:	d106      	bne.n	80207f4 <__ieee754_atan2+0x8c>
 80207e6:	f1be 0f00 	cmp.w	lr, #0
 80207ea:	da5f      	bge.n	80208ac <__ieee754_atan2+0x144>
 80207ec:	a13e      	add	r1, pc, #248	@ (adr r1, 80208e8 <__ieee754_atan2+0x180>)
 80207ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207f2:	e7d8      	b.n	80207a6 <__ieee754_atan2+0x3e>
 80207f4:	4542      	cmp	r2, r8
 80207f6:	d10f      	bne.n	8020818 <__ieee754_atan2+0xb0>
 80207f8:	4293      	cmp	r3, r2
 80207fa:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80207fe:	d107      	bne.n	8020810 <__ieee754_atan2+0xa8>
 8020800:	2c02      	cmp	r4, #2
 8020802:	d84c      	bhi.n	802089e <__ieee754_atan2+0x136>
 8020804:	4b34      	ldr	r3, [pc, #208]	@ (80208d8 <__ieee754_atan2+0x170>)
 8020806:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802080a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802080e:	e7ca      	b.n	80207a6 <__ieee754_atan2+0x3e>
 8020810:	2c02      	cmp	r4, #2
 8020812:	d848      	bhi.n	80208a6 <__ieee754_atan2+0x13e>
 8020814:	4b31      	ldr	r3, [pc, #196]	@ (80208dc <__ieee754_atan2+0x174>)
 8020816:	e7f6      	b.n	8020806 <__ieee754_atan2+0x9e>
 8020818:	4543      	cmp	r3, r8
 802081a:	d0e4      	beq.n	80207e6 <__ieee754_atan2+0x7e>
 802081c:	1a9b      	subs	r3, r3, r2
 802081e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8020822:	ea4f 5223 	mov.w	r2, r3, asr #20
 8020826:	da1e      	bge.n	8020866 <__ieee754_atan2+0xfe>
 8020828:	2f00      	cmp	r7, #0
 802082a:	da01      	bge.n	8020830 <__ieee754_atan2+0xc8>
 802082c:	323c      	adds	r2, #60	@ 0x3c
 802082e:	db1e      	blt.n	802086e <__ieee754_atan2+0x106>
 8020830:	4632      	mov	r2, r6
 8020832:	463b      	mov	r3, r7
 8020834:	f7e0 f832 	bl	800089c <__aeabi_ddiv>
 8020838:	ec41 0b10 	vmov	d0, r0, r1
 802083c:	f000 f9fc 	bl	8020c38 <fabs>
 8020840:	f000 f862 	bl	8020908 <atan>
 8020844:	ec51 0b10 	vmov	r0, r1, d0
 8020848:	2c01      	cmp	r4, #1
 802084a:	d013      	beq.n	8020874 <__ieee754_atan2+0x10c>
 802084c:	2c02      	cmp	r4, #2
 802084e:	d015      	beq.n	802087c <__ieee754_atan2+0x114>
 8020850:	2c00      	cmp	r4, #0
 8020852:	d0a8      	beq.n	80207a6 <__ieee754_atan2+0x3e>
 8020854:	a318      	add	r3, pc, #96	@ (adr r3, 80208b8 <__ieee754_atan2+0x150>)
 8020856:	e9d3 2300 	ldrd	r2, r3, [r3]
 802085a:	f7df fd3d 	bl	80002d8 <__aeabi_dsub>
 802085e:	a318      	add	r3, pc, #96	@ (adr r3, 80208c0 <__ieee754_atan2+0x158>)
 8020860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020864:	e014      	b.n	8020890 <__ieee754_atan2+0x128>
 8020866:	a118      	add	r1, pc, #96	@ (adr r1, 80208c8 <__ieee754_atan2+0x160>)
 8020868:	e9d1 0100 	ldrd	r0, r1, [r1]
 802086c:	e7ec      	b.n	8020848 <__ieee754_atan2+0xe0>
 802086e:	2000      	movs	r0, #0
 8020870:	2100      	movs	r1, #0
 8020872:	e7e9      	b.n	8020848 <__ieee754_atan2+0xe0>
 8020874:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020878:	4619      	mov	r1, r3
 802087a:	e794      	b.n	80207a6 <__ieee754_atan2+0x3e>
 802087c:	a30e      	add	r3, pc, #56	@ (adr r3, 80208b8 <__ieee754_atan2+0x150>)
 802087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020882:	f7df fd29 	bl	80002d8 <__aeabi_dsub>
 8020886:	4602      	mov	r2, r0
 8020888:	460b      	mov	r3, r1
 802088a:	a10d      	add	r1, pc, #52	@ (adr r1, 80208c0 <__ieee754_atan2+0x158>)
 802088c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020890:	f7df fd22 	bl	80002d8 <__aeabi_dsub>
 8020894:	e787      	b.n	80207a6 <__ieee754_atan2+0x3e>
 8020896:	a10a      	add	r1, pc, #40	@ (adr r1, 80208c0 <__ieee754_atan2+0x158>)
 8020898:	e9d1 0100 	ldrd	r0, r1, [r1]
 802089c:	e783      	b.n	80207a6 <__ieee754_atan2+0x3e>
 802089e:	a10c      	add	r1, pc, #48	@ (adr r1, 80208d0 <__ieee754_atan2+0x168>)
 80208a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80208a4:	e77f      	b.n	80207a6 <__ieee754_atan2+0x3e>
 80208a6:	2000      	movs	r0, #0
 80208a8:	2100      	movs	r1, #0
 80208aa:	e77c      	b.n	80207a6 <__ieee754_atan2+0x3e>
 80208ac:	a106      	add	r1, pc, #24	@ (adr r1, 80208c8 <__ieee754_atan2+0x160>)
 80208ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80208b2:	e778      	b.n	80207a6 <__ieee754_atan2+0x3e>
 80208b4:	f3af 8000 	nop.w
 80208b8:	33145c07 	.word	0x33145c07
 80208bc:	3ca1a626 	.word	0x3ca1a626
 80208c0:	54442d18 	.word	0x54442d18
 80208c4:	400921fb 	.word	0x400921fb
 80208c8:	54442d18 	.word	0x54442d18
 80208cc:	3ff921fb 	.word	0x3ff921fb
 80208d0:	54442d18 	.word	0x54442d18
 80208d4:	3fe921fb 	.word	0x3fe921fb
 80208d8:	08025a50 	.word	0x08025a50
 80208dc:	08025a38 	.word	0x08025a38
 80208e0:	54442d18 	.word	0x54442d18
 80208e4:	c00921fb 	.word	0xc00921fb
 80208e8:	54442d18 	.word	0x54442d18
 80208ec:	bff921fb 	.word	0xbff921fb
 80208f0:	7ff00000 	.word	0x7ff00000

080208f4 <fabsf>:
 80208f4:	ee10 3a10 	vmov	r3, s0
 80208f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80208fc:	ee00 3a10 	vmov	s0, r3
 8020900:	4770      	bx	lr
 8020902:	0000      	movs	r0, r0
 8020904:	0000      	movs	r0, r0
	...

08020908 <atan>:
 8020908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802090c:	ec55 4b10 	vmov	r4, r5, d0
 8020910:	4bbf      	ldr	r3, [pc, #764]	@ (8020c10 <atan+0x308>)
 8020912:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8020916:	429e      	cmp	r6, r3
 8020918:	46ab      	mov	fp, r5
 802091a:	d918      	bls.n	802094e <atan+0x46>
 802091c:	4bbd      	ldr	r3, [pc, #756]	@ (8020c14 <atan+0x30c>)
 802091e:	429e      	cmp	r6, r3
 8020920:	d801      	bhi.n	8020926 <atan+0x1e>
 8020922:	d109      	bne.n	8020938 <atan+0x30>
 8020924:	b144      	cbz	r4, 8020938 <atan+0x30>
 8020926:	4622      	mov	r2, r4
 8020928:	462b      	mov	r3, r5
 802092a:	4620      	mov	r0, r4
 802092c:	4629      	mov	r1, r5
 802092e:	f7df fcd5 	bl	80002dc <__adddf3>
 8020932:	4604      	mov	r4, r0
 8020934:	460d      	mov	r5, r1
 8020936:	e006      	b.n	8020946 <atan+0x3e>
 8020938:	f1bb 0f00 	cmp.w	fp, #0
 802093c:	f340 812b 	ble.w	8020b96 <atan+0x28e>
 8020940:	a597      	add	r5, pc, #604	@ (adr r5, 8020ba0 <atan+0x298>)
 8020942:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020946:	ec45 4b10 	vmov	d0, r4, r5
 802094a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802094e:	4bb2      	ldr	r3, [pc, #712]	@ (8020c18 <atan+0x310>)
 8020950:	429e      	cmp	r6, r3
 8020952:	d813      	bhi.n	802097c <atan+0x74>
 8020954:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8020958:	429e      	cmp	r6, r3
 802095a:	d80c      	bhi.n	8020976 <atan+0x6e>
 802095c:	a392      	add	r3, pc, #584	@ (adr r3, 8020ba8 <atan+0x2a0>)
 802095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020962:	4620      	mov	r0, r4
 8020964:	4629      	mov	r1, r5
 8020966:	f7df fcb9 	bl	80002dc <__adddf3>
 802096a:	4bac      	ldr	r3, [pc, #688]	@ (8020c1c <atan+0x314>)
 802096c:	2200      	movs	r2, #0
 802096e:	f7e0 f8fb 	bl	8000b68 <__aeabi_dcmpgt>
 8020972:	2800      	cmp	r0, #0
 8020974:	d1e7      	bne.n	8020946 <atan+0x3e>
 8020976:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802097a:	e029      	b.n	80209d0 <atan+0xc8>
 802097c:	f000 f95c 	bl	8020c38 <fabs>
 8020980:	4ba7      	ldr	r3, [pc, #668]	@ (8020c20 <atan+0x318>)
 8020982:	429e      	cmp	r6, r3
 8020984:	ec55 4b10 	vmov	r4, r5, d0
 8020988:	f200 80bc 	bhi.w	8020b04 <atan+0x1fc>
 802098c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8020990:	429e      	cmp	r6, r3
 8020992:	f200 809e 	bhi.w	8020ad2 <atan+0x1ca>
 8020996:	4622      	mov	r2, r4
 8020998:	462b      	mov	r3, r5
 802099a:	4620      	mov	r0, r4
 802099c:	4629      	mov	r1, r5
 802099e:	f7df fc9d 	bl	80002dc <__adddf3>
 80209a2:	4b9e      	ldr	r3, [pc, #632]	@ (8020c1c <atan+0x314>)
 80209a4:	2200      	movs	r2, #0
 80209a6:	f7df fc97 	bl	80002d8 <__aeabi_dsub>
 80209aa:	2200      	movs	r2, #0
 80209ac:	4606      	mov	r6, r0
 80209ae:	460f      	mov	r7, r1
 80209b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80209b4:	4620      	mov	r0, r4
 80209b6:	4629      	mov	r1, r5
 80209b8:	f7df fc90 	bl	80002dc <__adddf3>
 80209bc:	4602      	mov	r2, r0
 80209be:	460b      	mov	r3, r1
 80209c0:	4630      	mov	r0, r6
 80209c2:	4639      	mov	r1, r7
 80209c4:	f7df ff6a 	bl	800089c <__aeabi_ddiv>
 80209c8:	f04f 0a00 	mov.w	sl, #0
 80209cc:	4604      	mov	r4, r0
 80209ce:	460d      	mov	r5, r1
 80209d0:	4622      	mov	r2, r4
 80209d2:	462b      	mov	r3, r5
 80209d4:	4620      	mov	r0, r4
 80209d6:	4629      	mov	r1, r5
 80209d8:	f7df fe36 	bl	8000648 <__aeabi_dmul>
 80209dc:	4602      	mov	r2, r0
 80209de:	460b      	mov	r3, r1
 80209e0:	4680      	mov	r8, r0
 80209e2:	4689      	mov	r9, r1
 80209e4:	f7df fe30 	bl	8000648 <__aeabi_dmul>
 80209e8:	a371      	add	r3, pc, #452	@ (adr r3, 8020bb0 <atan+0x2a8>)
 80209ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209ee:	4606      	mov	r6, r0
 80209f0:	460f      	mov	r7, r1
 80209f2:	f7df fe29 	bl	8000648 <__aeabi_dmul>
 80209f6:	a370      	add	r3, pc, #448	@ (adr r3, 8020bb8 <atan+0x2b0>)
 80209f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209fc:	f7df fc6e 	bl	80002dc <__adddf3>
 8020a00:	4632      	mov	r2, r6
 8020a02:	463b      	mov	r3, r7
 8020a04:	f7df fe20 	bl	8000648 <__aeabi_dmul>
 8020a08:	a36d      	add	r3, pc, #436	@ (adr r3, 8020bc0 <atan+0x2b8>)
 8020a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a0e:	f7df fc65 	bl	80002dc <__adddf3>
 8020a12:	4632      	mov	r2, r6
 8020a14:	463b      	mov	r3, r7
 8020a16:	f7df fe17 	bl	8000648 <__aeabi_dmul>
 8020a1a:	a36b      	add	r3, pc, #428	@ (adr r3, 8020bc8 <atan+0x2c0>)
 8020a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a20:	f7df fc5c 	bl	80002dc <__adddf3>
 8020a24:	4632      	mov	r2, r6
 8020a26:	463b      	mov	r3, r7
 8020a28:	f7df fe0e 	bl	8000648 <__aeabi_dmul>
 8020a2c:	a368      	add	r3, pc, #416	@ (adr r3, 8020bd0 <atan+0x2c8>)
 8020a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a32:	f7df fc53 	bl	80002dc <__adddf3>
 8020a36:	4632      	mov	r2, r6
 8020a38:	463b      	mov	r3, r7
 8020a3a:	f7df fe05 	bl	8000648 <__aeabi_dmul>
 8020a3e:	a366      	add	r3, pc, #408	@ (adr r3, 8020bd8 <atan+0x2d0>)
 8020a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a44:	f7df fc4a 	bl	80002dc <__adddf3>
 8020a48:	4642      	mov	r2, r8
 8020a4a:	464b      	mov	r3, r9
 8020a4c:	f7df fdfc 	bl	8000648 <__aeabi_dmul>
 8020a50:	a363      	add	r3, pc, #396	@ (adr r3, 8020be0 <atan+0x2d8>)
 8020a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a56:	4680      	mov	r8, r0
 8020a58:	4689      	mov	r9, r1
 8020a5a:	4630      	mov	r0, r6
 8020a5c:	4639      	mov	r1, r7
 8020a5e:	f7df fdf3 	bl	8000648 <__aeabi_dmul>
 8020a62:	a361      	add	r3, pc, #388	@ (adr r3, 8020be8 <atan+0x2e0>)
 8020a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a68:	f7df fc36 	bl	80002d8 <__aeabi_dsub>
 8020a6c:	4632      	mov	r2, r6
 8020a6e:	463b      	mov	r3, r7
 8020a70:	f7df fdea 	bl	8000648 <__aeabi_dmul>
 8020a74:	a35e      	add	r3, pc, #376	@ (adr r3, 8020bf0 <atan+0x2e8>)
 8020a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a7a:	f7df fc2d 	bl	80002d8 <__aeabi_dsub>
 8020a7e:	4632      	mov	r2, r6
 8020a80:	463b      	mov	r3, r7
 8020a82:	f7df fde1 	bl	8000648 <__aeabi_dmul>
 8020a86:	a35c      	add	r3, pc, #368	@ (adr r3, 8020bf8 <atan+0x2f0>)
 8020a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a8c:	f7df fc24 	bl	80002d8 <__aeabi_dsub>
 8020a90:	4632      	mov	r2, r6
 8020a92:	463b      	mov	r3, r7
 8020a94:	f7df fdd8 	bl	8000648 <__aeabi_dmul>
 8020a98:	a359      	add	r3, pc, #356	@ (adr r3, 8020c00 <atan+0x2f8>)
 8020a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a9e:	f7df fc1b 	bl	80002d8 <__aeabi_dsub>
 8020aa2:	4632      	mov	r2, r6
 8020aa4:	463b      	mov	r3, r7
 8020aa6:	f7df fdcf 	bl	8000648 <__aeabi_dmul>
 8020aaa:	4602      	mov	r2, r0
 8020aac:	460b      	mov	r3, r1
 8020aae:	4640      	mov	r0, r8
 8020ab0:	4649      	mov	r1, r9
 8020ab2:	f7df fc13 	bl	80002dc <__adddf3>
 8020ab6:	4622      	mov	r2, r4
 8020ab8:	462b      	mov	r3, r5
 8020aba:	f7df fdc5 	bl	8000648 <__aeabi_dmul>
 8020abe:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8020ac2:	4602      	mov	r2, r0
 8020ac4:	460b      	mov	r3, r1
 8020ac6:	d148      	bne.n	8020b5a <atan+0x252>
 8020ac8:	4620      	mov	r0, r4
 8020aca:	4629      	mov	r1, r5
 8020acc:	f7df fc04 	bl	80002d8 <__aeabi_dsub>
 8020ad0:	e72f      	b.n	8020932 <atan+0x2a>
 8020ad2:	4b52      	ldr	r3, [pc, #328]	@ (8020c1c <atan+0x314>)
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	4620      	mov	r0, r4
 8020ad8:	4629      	mov	r1, r5
 8020ada:	f7df fbfd 	bl	80002d8 <__aeabi_dsub>
 8020ade:	4b4f      	ldr	r3, [pc, #316]	@ (8020c1c <atan+0x314>)
 8020ae0:	4606      	mov	r6, r0
 8020ae2:	460f      	mov	r7, r1
 8020ae4:	2200      	movs	r2, #0
 8020ae6:	4620      	mov	r0, r4
 8020ae8:	4629      	mov	r1, r5
 8020aea:	f7df fbf7 	bl	80002dc <__adddf3>
 8020aee:	4602      	mov	r2, r0
 8020af0:	460b      	mov	r3, r1
 8020af2:	4630      	mov	r0, r6
 8020af4:	4639      	mov	r1, r7
 8020af6:	f7df fed1 	bl	800089c <__aeabi_ddiv>
 8020afa:	f04f 0a01 	mov.w	sl, #1
 8020afe:	4604      	mov	r4, r0
 8020b00:	460d      	mov	r5, r1
 8020b02:	e765      	b.n	80209d0 <atan+0xc8>
 8020b04:	4b47      	ldr	r3, [pc, #284]	@ (8020c24 <atan+0x31c>)
 8020b06:	429e      	cmp	r6, r3
 8020b08:	d21c      	bcs.n	8020b44 <atan+0x23c>
 8020b0a:	4b47      	ldr	r3, [pc, #284]	@ (8020c28 <atan+0x320>)
 8020b0c:	2200      	movs	r2, #0
 8020b0e:	4620      	mov	r0, r4
 8020b10:	4629      	mov	r1, r5
 8020b12:	f7df fbe1 	bl	80002d8 <__aeabi_dsub>
 8020b16:	4b44      	ldr	r3, [pc, #272]	@ (8020c28 <atan+0x320>)
 8020b18:	4606      	mov	r6, r0
 8020b1a:	460f      	mov	r7, r1
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	4620      	mov	r0, r4
 8020b20:	4629      	mov	r1, r5
 8020b22:	f7df fd91 	bl	8000648 <__aeabi_dmul>
 8020b26:	4b3d      	ldr	r3, [pc, #244]	@ (8020c1c <atan+0x314>)
 8020b28:	2200      	movs	r2, #0
 8020b2a:	f7df fbd7 	bl	80002dc <__adddf3>
 8020b2e:	4602      	mov	r2, r0
 8020b30:	460b      	mov	r3, r1
 8020b32:	4630      	mov	r0, r6
 8020b34:	4639      	mov	r1, r7
 8020b36:	f7df feb1 	bl	800089c <__aeabi_ddiv>
 8020b3a:	f04f 0a02 	mov.w	sl, #2
 8020b3e:	4604      	mov	r4, r0
 8020b40:	460d      	mov	r5, r1
 8020b42:	e745      	b.n	80209d0 <atan+0xc8>
 8020b44:	4622      	mov	r2, r4
 8020b46:	462b      	mov	r3, r5
 8020b48:	4938      	ldr	r1, [pc, #224]	@ (8020c2c <atan+0x324>)
 8020b4a:	2000      	movs	r0, #0
 8020b4c:	f7df fea6 	bl	800089c <__aeabi_ddiv>
 8020b50:	f04f 0a03 	mov.w	sl, #3
 8020b54:	4604      	mov	r4, r0
 8020b56:	460d      	mov	r5, r1
 8020b58:	e73a      	b.n	80209d0 <atan+0xc8>
 8020b5a:	4b35      	ldr	r3, [pc, #212]	@ (8020c30 <atan+0x328>)
 8020b5c:	4e35      	ldr	r6, [pc, #212]	@ (8020c34 <atan+0x32c>)
 8020b5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b66:	f7df fbb7 	bl	80002d8 <__aeabi_dsub>
 8020b6a:	4622      	mov	r2, r4
 8020b6c:	462b      	mov	r3, r5
 8020b6e:	f7df fbb3 	bl	80002d8 <__aeabi_dsub>
 8020b72:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8020b76:	4602      	mov	r2, r0
 8020b78:	460b      	mov	r3, r1
 8020b7a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8020b7e:	f7df fbab 	bl	80002d8 <__aeabi_dsub>
 8020b82:	f1bb 0f00 	cmp.w	fp, #0
 8020b86:	4604      	mov	r4, r0
 8020b88:	460d      	mov	r5, r1
 8020b8a:	f6bf aedc 	bge.w	8020946 <atan+0x3e>
 8020b8e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020b92:	461d      	mov	r5, r3
 8020b94:	e6d7      	b.n	8020946 <atan+0x3e>
 8020b96:	a51c      	add	r5, pc, #112	@ (adr r5, 8020c08 <atan+0x300>)
 8020b98:	e9d5 4500 	ldrd	r4, r5, [r5]
 8020b9c:	e6d3      	b.n	8020946 <atan+0x3e>
 8020b9e:	bf00      	nop
 8020ba0:	54442d18 	.word	0x54442d18
 8020ba4:	3ff921fb 	.word	0x3ff921fb
 8020ba8:	8800759c 	.word	0x8800759c
 8020bac:	7e37e43c 	.word	0x7e37e43c
 8020bb0:	e322da11 	.word	0xe322da11
 8020bb4:	3f90ad3a 	.word	0x3f90ad3a
 8020bb8:	24760deb 	.word	0x24760deb
 8020bbc:	3fa97b4b 	.word	0x3fa97b4b
 8020bc0:	a0d03d51 	.word	0xa0d03d51
 8020bc4:	3fb10d66 	.word	0x3fb10d66
 8020bc8:	c54c206e 	.word	0xc54c206e
 8020bcc:	3fb745cd 	.word	0x3fb745cd
 8020bd0:	920083ff 	.word	0x920083ff
 8020bd4:	3fc24924 	.word	0x3fc24924
 8020bd8:	5555550d 	.word	0x5555550d
 8020bdc:	3fd55555 	.word	0x3fd55555
 8020be0:	2c6a6c2f 	.word	0x2c6a6c2f
 8020be4:	bfa2b444 	.word	0xbfa2b444
 8020be8:	52defd9a 	.word	0x52defd9a
 8020bec:	3fadde2d 	.word	0x3fadde2d
 8020bf0:	af749a6d 	.word	0xaf749a6d
 8020bf4:	3fb3b0f2 	.word	0x3fb3b0f2
 8020bf8:	fe231671 	.word	0xfe231671
 8020bfc:	3fbc71c6 	.word	0x3fbc71c6
 8020c00:	9998ebc4 	.word	0x9998ebc4
 8020c04:	3fc99999 	.word	0x3fc99999
 8020c08:	54442d18 	.word	0x54442d18
 8020c0c:	bff921fb 	.word	0xbff921fb
 8020c10:	440fffff 	.word	0x440fffff
 8020c14:	7ff00000 	.word	0x7ff00000
 8020c18:	3fdbffff 	.word	0x3fdbffff
 8020c1c:	3ff00000 	.word	0x3ff00000
 8020c20:	3ff2ffff 	.word	0x3ff2ffff
 8020c24:	40038000 	.word	0x40038000
 8020c28:	3ff80000 	.word	0x3ff80000
 8020c2c:	bff00000 	.word	0xbff00000
 8020c30:	08025a68 	.word	0x08025a68
 8020c34:	08025a88 	.word	0x08025a88

08020c38 <fabs>:
 8020c38:	ec51 0b10 	vmov	r0, r1, d0
 8020c3c:	4602      	mov	r2, r0
 8020c3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8020c42:	ec43 2b10 	vmov	d0, r2, r3
 8020c46:	4770      	bx	lr

08020c48 <nanf>:
 8020c48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8020c50 <nanf+0x8>
 8020c4c:	4770      	bx	lr
 8020c4e:	bf00      	nop
 8020c50:	7fc00000 	.word	0x7fc00000

08020c54 <__ieee754_asinf>:
 8020c54:	b538      	push	{r3, r4, r5, lr}
 8020c56:	ee10 5a10 	vmov	r5, s0
 8020c5a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8020c5e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8020c62:	ed2d 8b04 	vpush	{d8-d9}
 8020c66:	d10c      	bne.n	8020c82 <__ieee754_asinf+0x2e>
 8020c68:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8020de0 <__ieee754_asinf+0x18c>
 8020c6c:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8020de4 <__ieee754_asinf+0x190>
 8020c70:	ee60 7a27 	vmul.f32	s15, s0, s15
 8020c74:	eee0 7a07 	vfma.f32	s15, s0, s14
 8020c78:	eeb0 0a67 	vmov.f32	s0, s15
 8020c7c:	ecbd 8b04 	vpop	{d8-d9}
 8020c80:	bd38      	pop	{r3, r4, r5, pc}
 8020c82:	d904      	bls.n	8020c8e <__ieee754_asinf+0x3a>
 8020c84:	ee70 7a40 	vsub.f32	s15, s0, s0
 8020c88:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8020c8c:	e7f6      	b.n	8020c7c <__ieee754_asinf+0x28>
 8020c8e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8020c92:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8020c96:	d20b      	bcs.n	8020cb0 <__ieee754_asinf+0x5c>
 8020c98:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8020c9c:	d252      	bcs.n	8020d44 <__ieee754_asinf+0xf0>
 8020c9e:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8020de8 <__ieee754_asinf+0x194>
 8020ca2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8020ca6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8020caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cae:	dce5      	bgt.n	8020c7c <__ieee754_asinf+0x28>
 8020cb0:	f7ff fe20 	bl	80208f4 <fabsf>
 8020cb4:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8020cb8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8020cbc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8020cc0:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8020dec <__ieee754_asinf+0x198>
 8020cc4:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8020df0 <__ieee754_asinf+0x19c>
 8020cc8:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8020df4 <__ieee754_asinf+0x1a0>
 8020ccc:	eea8 7a27 	vfma.f32	s14, s16, s15
 8020cd0:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8020df8 <__ieee754_asinf+0x1a4>
 8020cd4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8020cd8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8020dfc <__ieee754_asinf+0x1a8>
 8020cdc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8020ce0:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8020e00 <__ieee754_asinf+0x1ac>
 8020ce4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8020ce8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8020e04 <__ieee754_asinf+0x1b0>
 8020cec:	eea7 9a88 	vfma.f32	s18, s15, s16
 8020cf0:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8020e08 <__ieee754_asinf+0x1b4>
 8020cf4:	eee8 7a07 	vfma.f32	s15, s16, s14
 8020cf8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8020e0c <__ieee754_asinf+0x1b8>
 8020cfc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8020d00:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8020e10 <__ieee754_asinf+0x1bc>
 8020d04:	eee7 7a08 	vfma.f32	s15, s14, s16
 8020d08:	eeb0 0a48 	vmov.f32	s0, s16
 8020d0c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8020d10:	f000 f886 	bl	8020e20 <__ieee754_sqrtf>
 8020d14:	4b3f      	ldr	r3, [pc, #252]	@ (8020e14 <__ieee754_asinf+0x1c0>)
 8020d16:	ee29 9a08 	vmul.f32	s18, s18, s16
 8020d1a:	429c      	cmp	r4, r3
 8020d1c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8020d20:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8020d24:	d93d      	bls.n	8020da2 <__ieee754_asinf+0x14e>
 8020d26:	eea0 0a06 	vfma.f32	s0, s0, s12
 8020d2a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8020e18 <__ieee754_asinf+0x1c4>
 8020d2e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8020d32:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8020de4 <__ieee754_asinf+0x190>
 8020d36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8020d3a:	2d00      	cmp	r5, #0
 8020d3c:	bfd8      	it	le
 8020d3e:	eeb1 0a40 	vnegle.f32	s0, s0
 8020d42:	e79b      	b.n	8020c7c <__ieee754_asinf+0x28>
 8020d44:	ee60 7a00 	vmul.f32	s15, s0, s0
 8020d48:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8020df0 <__ieee754_asinf+0x19c>
 8020d4c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8020dec <__ieee754_asinf+0x198>
 8020d50:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8020e04 <__ieee754_asinf+0x1b0>
 8020d54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8020d58:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8020df8 <__ieee754_asinf+0x1a4>
 8020d5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8020d60:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8020dfc <__ieee754_asinf+0x1a8>
 8020d64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8020d68:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8020e00 <__ieee754_asinf+0x1ac>
 8020d6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8020d70:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8020df4 <__ieee754_asinf+0x1a0>
 8020d74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8020d78:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8020e08 <__ieee754_asinf+0x1b4>
 8020d7c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8020d80:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8020e0c <__ieee754_asinf+0x1b8>
 8020d84:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8020d88:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8020e10 <__ieee754_asinf+0x1bc>
 8020d8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8020d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8020d94:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8020d98:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8020d9c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8020da0:	e76c      	b.n	8020c7c <__ieee754_asinf+0x28>
 8020da2:	ee10 3a10 	vmov	r3, s0
 8020da6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8020daa:	f023 030f 	bic.w	r3, r3, #15
 8020dae:	ee07 3a10 	vmov	s14, r3
 8020db2:	eea7 8a47 	vfms.f32	s16, s14, s14
 8020db6:	ee70 5a00 	vadd.f32	s11, s0, s0
 8020dba:	ee30 0a07 	vadd.f32	s0, s0, s14
 8020dbe:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8020de0 <__ieee754_asinf+0x18c>
 8020dc2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8020dc6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8020e1c <__ieee754_asinf+0x1c8>
 8020dca:	eee5 7a66 	vfms.f32	s15, s10, s13
 8020dce:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8020dd2:	eeb0 6a40 	vmov.f32	s12, s0
 8020dd6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8020dda:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8020dde:	e7aa      	b.n	8020d36 <__ieee754_asinf+0xe2>
 8020de0:	b33bbd2e 	.word	0xb33bbd2e
 8020de4:	3fc90fdb 	.word	0x3fc90fdb
 8020de8:	7149f2ca 	.word	0x7149f2ca
 8020dec:	3a4f7f04 	.word	0x3a4f7f04
 8020df0:	3811ef08 	.word	0x3811ef08
 8020df4:	3e2aaaab 	.word	0x3e2aaaab
 8020df8:	bd241146 	.word	0xbd241146
 8020dfc:	3e4e0aa8 	.word	0x3e4e0aa8
 8020e00:	bea6b090 	.word	0xbea6b090
 8020e04:	3d9dc62e 	.word	0x3d9dc62e
 8020e08:	bf303361 	.word	0xbf303361
 8020e0c:	4001572d 	.word	0x4001572d
 8020e10:	c019d139 	.word	0xc019d139
 8020e14:	3f799999 	.word	0x3f799999
 8020e18:	333bbd2e 	.word	0x333bbd2e
 8020e1c:	3f490fdb 	.word	0x3f490fdb

08020e20 <__ieee754_sqrtf>:
 8020e20:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8020e24:	4770      	bx	lr
	...

08020e28 <calloc>:
 8020e28:	4b02      	ldr	r3, [pc, #8]	@ (8020e34 <calloc+0xc>)
 8020e2a:	460a      	mov	r2, r1
 8020e2c:	4601      	mov	r1, r0
 8020e2e:	6818      	ldr	r0, [r3, #0]
 8020e30:	f000 b802 	b.w	8020e38 <_calloc_r>
 8020e34:	20001b3c 	.word	0x20001b3c

08020e38 <_calloc_r>:
 8020e38:	b570      	push	{r4, r5, r6, lr}
 8020e3a:	fba1 5402 	umull	r5, r4, r1, r2
 8020e3e:	b93c      	cbnz	r4, 8020e50 <_calloc_r+0x18>
 8020e40:	4629      	mov	r1, r5
 8020e42:	f000 f899 	bl	8020f78 <_malloc_r>
 8020e46:	4606      	mov	r6, r0
 8020e48:	b928      	cbnz	r0, 8020e56 <_calloc_r+0x1e>
 8020e4a:	2600      	movs	r6, #0
 8020e4c:	4630      	mov	r0, r6
 8020e4e:	bd70      	pop	{r4, r5, r6, pc}
 8020e50:	220c      	movs	r2, #12
 8020e52:	6002      	str	r2, [r0, #0]
 8020e54:	e7f9      	b.n	8020e4a <_calloc_r+0x12>
 8020e56:	462a      	mov	r2, r5
 8020e58:	4621      	mov	r1, r4
 8020e5a:	f000 fd82 	bl	8021962 <memset>
 8020e5e:	e7f5      	b.n	8020e4c <_calloc_r+0x14>

08020e60 <exit>:
 8020e60:	b508      	push	{r3, lr}
 8020e62:	4b06      	ldr	r3, [pc, #24]	@ (8020e7c <exit+0x1c>)
 8020e64:	4604      	mov	r4, r0
 8020e66:	b113      	cbz	r3, 8020e6e <exit+0xe>
 8020e68:	2100      	movs	r1, #0
 8020e6a:	f3af 8000 	nop.w
 8020e6e:	4b04      	ldr	r3, [pc, #16]	@ (8020e80 <exit+0x20>)
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	b103      	cbz	r3, 8020e76 <exit+0x16>
 8020e74:	4798      	blx	r3
 8020e76:	4620      	mov	r0, r4
 8020e78:	f7e1 fdde 	bl	8002a38 <_exit>
 8020e7c:	00000000 	.word	0x00000000
 8020e80:	200171c0 	.word	0x200171c0

08020e84 <getenv>:
 8020e84:	b507      	push	{r0, r1, r2, lr}
 8020e86:	4b04      	ldr	r3, [pc, #16]	@ (8020e98 <getenv+0x14>)
 8020e88:	4601      	mov	r1, r0
 8020e8a:	aa01      	add	r2, sp, #4
 8020e8c:	6818      	ldr	r0, [r3, #0]
 8020e8e:	f000 f805 	bl	8020e9c <_findenv_r>
 8020e92:	b003      	add	sp, #12
 8020e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8020e98:	20001b3c 	.word	0x20001b3c

08020e9c <_findenv_r>:
 8020e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ea0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8020f10 <_findenv_r+0x74>
 8020ea4:	4606      	mov	r6, r0
 8020ea6:	4689      	mov	r9, r1
 8020ea8:	4617      	mov	r7, r2
 8020eaa:	f000 fdf7 	bl	8021a9c <__env_lock>
 8020eae:	f8da 4000 	ldr.w	r4, [sl]
 8020eb2:	b134      	cbz	r4, 8020ec2 <_findenv_r+0x26>
 8020eb4:	464b      	mov	r3, r9
 8020eb6:	4698      	mov	r8, r3
 8020eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ebc:	b13a      	cbz	r2, 8020ece <_findenv_r+0x32>
 8020ebe:	2a3d      	cmp	r2, #61	@ 0x3d
 8020ec0:	d1f9      	bne.n	8020eb6 <_findenv_r+0x1a>
 8020ec2:	4630      	mov	r0, r6
 8020ec4:	f000 fdf0 	bl	8021aa8 <__env_unlock>
 8020ec8:	2000      	movs	r0, #0
 8020eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ece:	eba8 0809 	sub.w	r8, r8, r9
 8020ed2:	46a3      	mov	fp, r4
 8020ed4:	f854 0b04 	ldr.w	r0, [r4], #4
 8020ed8:	2800      	cmp	r0, #0
 8020eda:	d0f2      	beq.n	8020ec2 <_findenv_r+0x26>
 8020edc:	4642      	mov	r2, r8
 8020ede:	4649      	mov	r1, r9
 8020ee0:	f000 fced 	bl	80218be <strncmp>
 8020ee4:	2800      	cmp	r0, #0
 8020ee6:	d1f4      	bne.n	8020ed2 <_findenv_r+0x36>
 8020ee8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020eec:	eb03 0508 	add.w	r5, r3, r8
 8020ef0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8020ef4:	2b3d      	cmp	r3, #61	@ 0x3d
 8020ef6:	d1ec      	bne.n	8020ed2 <_findenv_r+0x36>
 8020ef8:	f8da 3000 	ldr.w	r3, [sl]
 8020efc:	ebab 0303 	sub.w	r3, fp, r3
 8020f00:	109b      	asrs	r3, r3, #2
 8020f02:	4630      	mov	r0, r6
 8020f04:	603b      	str	r3, [r7, #0]
 8020f06:	f000 fdcf 	bl	8021aa8 <__env_unlock>
 8020f0a:	1c68      	adds	r0, r5, #1
 8020f0c:	e7dd      	b.n	8020eca <_findenv_r+0x2e>
 8020f0e:	bf00      	nop
 8020f10:	20000000 	.word	0x20000000

08020f14 <malloc>:
 8020f14:	4b02      	ldr	r3, [pc, #8]	@ (8020f20 <malloc+0xc>)
 8020f16:	4601      	mov	r1, r0
 8020f18:	6818      	ldr	r0, [r3, #0]
 8020f1a:	f000 b82d 	b.w	8020f78 <_malloc_r>
 8020f1e:	bf00      	nop
 8020f20:	20001b3c 	.word	0x20001b3c

08020f24 <free>:
 8020f24:	4b02      	ldr	r3, [pc, #8]	@ (8020f30 <free+0xc>)
 8020f26:	4601      	mov	r1, r0
 8020f28:	6818      	ldr	r0, [r3, #0]
 8020f2a:	f000 bdc3 	b.w	8021ab4 <_free_r>
 8020f2e:	bf00      	nop
 8020f30:	20001b3c 	.word	0x20001b3c

08020f34 <sbrk_aligned>:
 8020f34:	b570      	push	{r4, r5, r6, lr}
 8020f36:	4e0f      	ldr	r6, [pc, #60]	@ (8020f74 <sbrk_aligned+0x40>)
 8020f38:	460c      	mov	r4, r1
 8020f3a:	6831      	ldr	r1, [r6, #0]
 8020f3c:	4605      	mov	r5, r0
 8020f3e:	b911      	cbnz	r1, 8020f46 <sbrk_aligned+0x12>
 8020f40:	f000 fd3a 	bl	80219b8 <_sbrk_r>
 8020f44:	6030      	str	r0, [r6, #0]
 8020f46:	4621      	mov	r1, r4
 8020f48:	4628      	mov	r0, r5
 8020f4a:	f000 fd35 	bl	80219b8 <_sbrk_r>
 8020f4e:	1c43      	adds	r3, r0, #1
 8020f50:	d103      	bne.n	8020f5a <sbrk_aligned+0x26>
 8020f52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020f56:	4620      	mov	r0, r4
 8020f58:	bd70      	pop	{r4, r5, r6, pc}
 8020f5a:	1cc4      	adds	r4, r0, #3
 8020f5c:	f024 0403 	bic.w	r4, r4, #3
 8020f60:	42a0      	cmp	r0, r4
 8020f62:	d0f8      	beq.n	8020f56 <sbrk_aligned+0x22>
 8020f64:	1a21      	subs	r1, r4, r0
 8020f66:	4628      	mov	r0, r5
 8020f68:	f000 fd26 	bl	80219b8 <_sbrk_r>
 8020f6c:	3001      	adds	r0, #1
 8020f6e:	d1f2      	bne.n	8020f56 <sbrk_aligned+0x22>
 8020f70:	e7ef      	b.n	8020f52 <sbrk_aligned+0x1e>
 8020f72:	bf00      	nop
 8020f74:	20017080 	.word	0x20017080

08020f78 <_malloc_r>:
 8020f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f7c:	1ccd      	adds	r5, r1, #3
 8020f7e:	f025 0503 	bic.w	r5, r5, #3
 8020f82:	3508      	adds	r5, #8
 8020f84:	2d0c      	cmp	r5, #12
 8020f86:	bf38      	it	cc
 8020f88:	250c      	movcc	r5, #12
 8020f8a:	2d00      	cmp	r5, #0
 8020f8c:	4606      	mov	r6, r0
 8020f8e:	db01      	blt.n	8020f94 <_malloc_r+0x1c>
 8020f90:	42a9      	cmp	r1, r5
 8020f92:	d904      	bls.n	8020f9e <_malloc_r+0x26>
 8020f94:	230c      	movs	r3, #12
 8020f96:	6033      	str	r3, [r6, #0]
 8020f98:	2000      	movs	r0, #0
 8020f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021074 <_malloc_r+0xfc>
 8020fa2:	f000 f89d 	bl	80210e0 <__malloc_lock>
 8020fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8020faa:	461c      	mov	r4, r3
 8020fac:	bb44      	cbnz	r4, 8021000 <_malloc_r+0x88>
 8020fae:	4629      	mov	r1, r5
 8020fb0:	4630      	mov	r0, r6
 8020fb2:	f7ff ffbf 	bl	8020f34 <sbrk_aligned>
 8020fb6:	1c43      	adds	r3, r0, #1
 8020fb8:	4604      	mov	r4, r0
 8020fba:	d158      	bne.n	802106e <_malloc_r+0xf6>
 8020fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8020fc0:	4627      	mov	r7, r4
 8020fc2:	2f00      	cmp	r7, #0
 8020fc4:	d143      	bne.n	802104e <_malloc_r+0xd6>
 8020fc6:	2c00      	cmp	r4, #0
 8020fc8:	d04b      	beq.n	8021062 <_malloc_r+0xea>
 8020fca:	6823      	ldr	r3, [r4, #0]
 8020fcc:	4639      	mov	r1, r7
 8020fce:	4630      	mov	r0, r6
 8020fd0:	eb04 0903 	add.w	r9, r4, r3
 8020fd4:	f000 fcf0 	bl	80219b8 <_sbrk_r>
 8020fd8:	4581      	cmp	r9, r0
 8020fda:	d142      	bne.n	8021062 <_malloc_r+0xea>
 8020fdc:	6821      	ldr	r1, [r4, #0]
 8020fde:	1a6d      	subs	r5, r5, r1
 8020fe0:	4629      	mov	r1, r5
 8020fe2:	4630      	mov	r0, r6
 8020fe4:	f7ff ffa6 	bl	8020f34 <sbrk_aligned>
 8020fe8:	3001      	adds	r0, #1
 8020fea:	d03a      	beq.n	8021062 <_malloc_r+0xea>
 8020fec:	6823      	ldr	r3, [r4, #0]
 8020fee:	442b      	add	r3, r5
 8020ff0:	6023      	str	r3, [r4, #0]
 8020ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8020ff6:	685a      	ldr	r2, [r3, #4]
 8020ff8:	bb62      	cbnz	r2, 8021054 <_malloc_r+0xdc>
 8020ffa:	f8c8 7000 	str.w	r7, [r8]
 8020ffe:	e00f      	b.n	8021020 <_malloc_r+0xa8>
 8021000:	6822      	ldr	r2, [r4, #0]
 8021002:	1b52      	subs	r2, r2, r5
 8021004:	d420      	bmi.n	8021048 <_malloc_r+0xd0>
 8021006:	2a0b      	cmp	r2, #11
 8021008:	d917      	bls.n	802103a <_malloc_r+0xc2>
 802100a:	1961      	adds	r1, r4, r5
 802100c:	42a3      	cmp	r3, r4
 802100e:	6025      	str	r5, [r4, #0]
 8021010:	bf18      	it	ne
 8021012:	6059      	strne	r1, [r3, #4]
 8021014:	6863      	ldr	r3, [r4, #4]
 8021016:	bf08      	it	eq
 8021018:	f8c8 1000 	streq.w	r1, [r8]
 802101c:	5162      	str	r2, [r4, r5]
 802101e:	604b      	str	r3, [r1, #4]
 8021020:	4630      	mov	r0, r6
 8021022:	f000 f863 	bl	80210ec <__malloc_unlock>
 8021026:	f104 000b 	add.w	r0, r4, #11
 802102a:	1d23      	adds	r3, r4, #4
 802102c:	f020 0007 	bic.w	r0, r0, #7
 8021030:	1ac2      	subs	r2, r0, r3
 8021032:	bf1c      	itt	ne
 8021034:	1a1b      	subne	r3, r3, r0
 8021036:	50a3      	strne	r3, [r4, r2]
 8021038:	e7af      	b.n	8020f9a <_malloc_r+0x22>
 802103a:	6862      	ldr	r2, [r4, #4]
 802103c:	42a3      	cmp	r3, r4
 802103e:	bf0c      	ite	eq
 8021040:	f8c8 2000 	streq.w	r2, [r8]
 8021044:	605a      	strne	r2, [r3, #4]
 8021046:	e7eb      	b.n	8021020 <_malloc_r+0xa8>
 8021048:	4623      	mov	r3, r4
 802104a:	6864      	ldr	r4, [r4, #4]
 802104c:	e7ae      	b.n	8020fac <_malloc_r+0x34>
 802104e:	463c      	mov	r4, r7
 8021050:	687f      	ldr	r7, [r7, #4]
 8021052:	e7b6      	b.n	8020fc2 <_malloc_r+0x4a>
 8021054:	461a      	mov	r2, r3
 8021056:	685b      	ldr	r3, [r3, #4]
 8021058:	42a3      	cmp	r3, r4
 802105a:	d1fb      	bne.n	8021054 <_malloc_r+0xdc>
 802105c:	2300      	movs	r3, #0
 802105e:	6053      	str	r3, [r2, #4]
 8021060:	e7de      	b.n	8021020 <_malloc_r+0xa8>
 8021062:	230c      	movs	r3, #12
 8021064:	6033      	str	r3, [r6, #0]
 8021066:	4630      	mov	r0, r6
 8021068:	f000 f840 	bl	80210ec <__malloc_unlock>
 802106c:	e794      	b.n	8020f98 <_malloc_r+0x20>
 802106e:	6005      	str	r5, [r0, #0]
 8021070:	e7d6      	b.n	8021020 <_malloc_r+0xa8>
 8021072:	bf00      	nop
 8021074:	20017084 	.word	0x20017084

08021078 <sniprintf>:
 8021078:	b40c      	push	{r2, r3}
 802107a:	b530      	push	{r4, r5, lr}
 802107c:	4b17      	ldr	r3, [pc, #92]	@ (80210dc <sniprintf+0x64>)
 802107e:	1e0c      	subs	r4, r1, #0
 8021080:	681d      	ldr	r5, [r3, #0]
 8021082:	b09d      	sub	sp, #116	@ 0x74
 8021084:	da08      	bge.n	8021098 <sniprintf+0x20>
 8021086:	238b      	movs	r3, #139	@ 0x8b
 8021088:	602b      	str	r3, [r5, #0]
 802108a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802108e:	b01d      	add	sp, #116	@ 0x74
 8021090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021094:	b002      	add	sp, #8
 8021096:	4770      	bx	lr
 8021098:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802109c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80210a0:	bf14      	ite	ne
 80210a2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80210a6:	4623      	moveq	r3, r4
 80210a8:	9304      	str	r3, [sp, #16]
 80210aa:	9307      	str	r3, [sp, #28]
 80210ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80210b0:	9002      	str	r0, [sp, #8]
 80210b2:	9006      	str	r0, [sp, #24]
 80210b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80210b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80210ba:	ab21      	add	r3, sp, #132	@ 0x84
 80210bc:	a902      	add	r1, sp, #8
 80210be:	4628      	mov	r0, r5
 80210c0:	9301      	str	r3, [sp, #4]
 80210c2:	f000 fd9d 	bl	8021c00 <_svfiprintf_r>
 80210c6:	1c43      	adds	r3, r0, #1
 80210c8:	bfbc      	itt	lt
 80210ca:	238b      	movlt	r3, #139	@ 0x8b
 80210cc:	602b      	strlt	r3, [r5, #0]
 80210ce:	2c00      	cmp	r4, #0
 80210d0:	d0dd      	beq.n	802108e <sniprintf+0x16>
 80210d2:	9b02      	ldr	r3, [sp, #8]
 80210d4:	2200      	movs	r2, #0
 80210d6:	701a      	strb	r2, [r3, #0]
 80210d8:	e7d9      	b.n	802108e <sniprintf+0x16>
 80210da:	bf00      	nop
 80210dc:	20001b3c 	.word	0x20001b3c

080210e0 <__malloc_lock>:
 80210e0:	4801      	ldr	r0, [pc, #4]	@ (80210e8 <__malloc_lock+0x8>)
 80210e2:	f000 bca4 	b.w	8021a2e <__retarget_lock_acquire_recursive>
 80210e6:	bf00      	nop
 80210e8:	200171c5 	.word	0x200171c5

080210ec <__malloc_unlock>:
 80210ec:	4801      	ldr	r0, [pc, #4]	@ (80210f4 <__malloc_unlock+0x8>)
 80210ee:	f000 bc9f 	b.w	8021a30 <__retarget_lock_release_recursive>
 80210f2:	bf00      	nop
 80210f4:	200171c5 	.word	0x200171c5

080210f8 <srand>:
 80210f8:	b538      	push	{r3, r4, r5, lr}
 80210fa:	4b10      	ldr	r3, [pc, #64]	@ (802113c <srand+0x44>)
 80210fc:	681d      	ldr	r5, [r3, #0]
 80210fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021100:	4604      	mov	r4, r0
 8021102:	b9b3      	cbnz	r3, 8021132 <srand+0x3a>
 8021104:	2018      	movs	r0, #24
 8021106:	f7ff ff05 	bl	8020f14 <malloc>
 802110a:	4602      	mov	r2, r0
 802110c:	6328      	str	r0, [r5, #48]	@ 0x30
 802110e:	b920      	cbnz	r0, 802111a <srand+0x22>
 8021110:	4b0b      	ldr	r3, [pc, #44]	@ (8021140 <srand+0x48>)
 8021112:	480c      	ldr	r0, [pc, #48]	@ (8021144 <srand+0x4c>)
 8021114:	2146      	movs	r1, #70	@ 0x46
 8021116:	f000 fca3 	bl	8021a60 <__assert_func>
 802111a:	490b      	ldr	r1, [pc, #44]	@ (8021148 <srand+0x50>)
 802111c:	4b0b      	ldr	r3, [pc, #44]	@ (802114c <srand+0x54>)
 802111e:	e9c0 1300 	strd	r1, r3, [r0]
 8021122:	4b0b      	ldr	r3, [pc, #44]	@ (8021150 <srand+0x58>)
 8021124:	6083      	str	r3, [r0, #8]
 8021126:	230b      	movs	r3, #11
 8021128:	8183      	strh	r3, [r0, #12]
 802112a:	2100      	movs	r1, #0
 802112c:	2001      	movs	r0, #1
 802112e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021132:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021134:	2200      	movs	r2, #0
 8021136:	611c      	str	r4, [r3, #16]
 8021138:	615a      	str	r2, [r3, #20]
 802113a:	bd38      	pop	{r3, r4, r5, pc}
 802113c:	20001b3c 	.word	0x20001b3c
 8021140:	08025aa8 	.word	0x08025aa8
 8021144:	08025abf 	.word	0x08025abf
 8021148:	abcd330e 	.word	0xabcd330e
 802114c:	e66d1234 	.word	0xe66d1234
 8021150:	0005deec 	.word	0x0005deec

08021154 <rand>:
 8021154:	4b16      	ldr	r3, [pc, #88]	@ (80211b0 <rand+0x5c>)
 8021156:	b510      	push	{r4, lr}
 8021158:	681c      	ldr	r4, [r3, #0]
 802115a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802115c:	b9b3      	cbnz	r3, 802118c <rand+0x38>
 802115e:	2018      	movs	r0, #24
 8021160:	f7ff fed8 	bl	8020f14 <malloc>
 8021164:	4602      	mov	r2, r0
 8021166:	6320      	str	r0, [r4, #48]	@ 0x30
 8021168:	b920      	cbnz	r0, 8021174 <rand+0x20>
 802116a:	4b12      	ldr	r3, [pc, #72]	@ (80211b4 <rand+0x60>)
 802116c:	4812      	ldr	r0, [pc, #72]	@ (80211b8 <rand+0x64>)
 802116e:	2152      	movs	r1, #82	@ 0x52
 8021170:	f000 fc76 	bl	8021a60 <__assert_func>
 8021174:	4911      	ldr	r1, [pc, #68]	@ (80211bc <rand+0x68>)
 8021176:	4b12      	ldr	r3, [pc, #72]	@ (80211c0 <rand+0x6c>)
 8021178:	e9c0 1300 	strd	r1, r3, [r0]
 802117c:	4b11      	ldr	r3, [pc, #68]	@ (80211c4 <rand+0x70>)
 802117e:	6083      	str	r3, [r0, #8]
 8021180:	230b      	movs	r3, #11
 8021182:	8183      	strh	r3, [r0, #12]
 8021184:	2100      	movs	r1, #0
 8021186:	2001      	movs	r0, #1
 8021188:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802118c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802118e:	480e      	ldr	r0, [pc, #56]	@ (80211c8 <rand+0x74>)
 8021190:	690b      	ldr	r3, [r1, #16]
 8021192:	694c      	ldr	r4, [r1, #20]
 8021194:	4a0d      	ldr	r2, [pc, #52]	@ (80211cc <rand+0x78>)
 8021196:	4358      	muls	r0, r3
 8021198:	fb02 0004 	mla	r0, r2, r4, r0
 802119c:	fba3 3202 	umull	r3, r2, r3, r2
 80211a0:	3301      	adds	r3, #1
 80211a2:	eb40 0002 	adc.w	r0, r0, r2
 80211a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80211aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80211ae:	bd10      	pop	{r4, pc}
 80211b0:	20001b3c 	.word	0x20001b3c
 80211b4:	08025aa8 	.word	0x08025aa8
 80211b8:	08025abf 	.word	0x08025abf
 80211bc:	abcd330e 	.word	0xabcd330e
 80211c0:	e66d1234 	.word	0xe66d1234
 80211c4:	0005deec 	.word	0x0005deec
 80211c8:	5851f42d 	.word	0x5851f42d
 80211cc:	4c957f2d 	.word	0x4c957f2d

080211d0 <realloc>:
 80211d0:	4b02      	ldr	r3, [pc, #8]	@ (80211dc <realloc+0xc>)
 80211d2:	460a      	mov	r2, r1
 80211d4:	4601      	mov	r1, r0
 80211d6:	6818      	ldr	r0, [r3, #0]
 80211d8:	f000 b8a6 	b.w	8021328 <_realloc_r>
 80211dc:	20001b3c 	.word	0x20001b3c

080211e0 <std>:
 80211e0:	2300      	movs	r3, #0
 80211e2:	b510      	push	{r4, lr}
 80211e4:	4604      	mov	r4, r0
 80211e6:	e9c0 3300 	strd	r3, r3, [r0]
 80211ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80211ee:	6083      	str	r3, [r0, #8]
 80211f0:	8181      	strh	r1, [r0, #12]
 80211f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80211f4:	81c2      	strh	r2, [r0, #14]
 80211f6:	6183      	str	r3, [r0, #24]
 80211f8:	4619      	mov	r1, r3
 80211fa:	2208      	movs	r2, #8
 80211fc:	305c      	adds	r0, #92	@ 0x5c
 80211fe:	f000 fbb0 	bl	8021962 <memset>
 8021202:	4b0d      	ldr	r3, [pc, #52]	@ (8021238 <std+0x58>)
 8021204:	6263      	str	r3, [r4, #36]	@ 0x24
 8021206:	4b0d      	ldr	r3, [pc, #52]	@ (802123c <std+0x5c>)
 8021208:	62a3      	str	r3, [r4, #40]	@ 0x28
 802120a:	4b0d      	ldr	r3, [pc, #52]	@ (8021240 <std+0x60>)
 802120c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802120e:	4b0d      	ldr	r3, [pc, #52]	@ (8021244 <std+0x64>)
 8021210:	6323      	str	r3, [r4, #48]	@ 0x30
 8021212:	4b0d      	ldr	r3, [pc, #52]	@ (8021248 <std+0x68>)
 8021214:	6224      	str	r4, [r4, #32]
 8021216:	429c      	cmp	r4, r3
 8021218:	d006      	beq.n	8021228 <std+0x48>
 802121a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802121e:	4294      	cmp	r4, r2
 8021220:	d002      	beq.n	8021228 <std+0x48>
 8021222:	33d0      	adds	r3, #208	@ 0xd0
 8021224:	429c      	cmp	r4, r3
 8021226:	d105      	bne.n	8021234 <std+0x54>
 8021228:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021230:	f000 bbfc 	b.w	8021a2c <__retarget_lock_init_recursive>
 8021234:	bd10      	pop	{r4, pc}
 8021236:	bf00      	nop
 8021238:	08022501 	.word	0x08022501
 802123c:	08022523 	.word	0x08022523
 8021240:	0802255b 	.word	0x0802255b
 8021244:	0802257f 	.word	0x0802257f
 8021248:	20017088 	.word	0x20017088

0802124c <stdio_exit_handler>:
 802124c:	4a02      	ldr	r2, [pc, #8]	@ (8021258 <stdio_exit_handler+0xc>)
 802124e:	4903      	ldr	r1, [pc, #12]	@ (802125c <stdio_exit_handler+0x10>)
 8021250:	4803      	ldr	r0, [pc, #12]	@ (8021260 <stdio_exit_handler+0x14>)
 8021252:	f000 b90f 	b.w	8021474 <_fwalk_sglue>
 8021256:	bf00      	nop
 8021258:	20001b30 	.word	0x20001b30
 802125c:	080224a1 	.word	0x080224a1
 8021260:	20001b40 	.word	0x20001b40

08021264 <cleanup_stdio>:
 8021264:	6841      	ldr	r1, [r0, #4]
 8021266:	4b0c      	ldr	r3, [pc, #48]	@ (8021298 <cleanup_stdio+0x34>)
 8021268:	4299      	cmp	r1, r3
 802126a:	b510      	push	{r4, lr}
 802126c:	4604      	mov	r4, r0
 802126e:	d001      	beq.n	8021274 <cleanup_stdio+0x10>
 8021270:	f001 f916 	bl	80224a0 <_fflush_r>
 8021274:	68a1      	ldr	r1, [r4, #8]
 8021276:	4b09      	ldr	r3, [pc, #36]	@ (802129c <cleanup_stdio+0x38>)
 8021278:	4299      	cmp	r1, r3
 802127a:	d002      	beq.n	8021282 <cleanup_stdio+0x1e>
 802127c:	4620      	mov	r0, r4
 802127e:	f001 f90f 	bl	80224a0 <_fflush_r>
 8021282:	68e1      	ldr	r1, [r4, #12]
 8021284:	4b06      	ldr	r3, [pc, #24]	@ (80212a0 <cleanup_stdio+0x3c>)
 8021286:	4299      	cmp	r1, r3
 8021288:	d004      	beq.n	8021294 <cleanup_stdio+0x30>
 802128a:	4620      	mov	r0, r4
 802128c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021290:	f001 b906 	b.w	80224a0 <_fflush_r>
 8021294:	bd10      	pop	{r4, pc}
 8021296:	bf00      	nop
 8021298:	20017088 	.word	0x20017088
 802129c:	200170f0 	.word	0x200170f0
 80212a0:	20017158 	.word	0x20017158

080212a4 <global_stdio_init.part.0>:
 80212a4:	b510      	push	{r4, lr}
 80212a6:	4b0b      	ldr	r3, [pc, #44]	@ (80212d4 <global_stdio_init.part.0+0x30>)
 80212a8:	4c0b      	ldr	r4, [pc, #44]	@ (80212d8 <global_stdio_init.part.0+0x34>)
 80212aa:	4a0c      	ldr	r2, [pc, #48]	@ (80212dc <global_stdio_init.part.0+0x38>)
 80212ac:	601a      	str	r2, [r3, #0]
 80212ae:	4620      	mov	r0, r4
 80212b0:	2200      	movs	r2, #0
 80212b2:	2104      	movs	r1, #4
 80212b4:	f7ff ff94 	bl	80211e0 <std>
 80212b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80212bc:	2201      	movs	r2, #1
 80212be:	2109      	movs	r1, #9
 80212c0:	f7ff ff8e 	bl	80211e0 <std>
 80212c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80212c8:	2202      	movs	r2, #2
 80212ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212ce:	2112      	movs	r1, #18
 80212d0:	f7ff bf86 	b.w	80211e0 <std>
 80212d4:	200171c0 	.word	0x200171c0
 80212d8:	20017088 	.word	0x20017088
 80212dc:	0802124d 	.word	0x0802124d

080212e0 <__sfp_lock_acquire>:
 80212e0:	4801      	ldr	r0, [pc, #4]	@ (80212e8 <__sfp_lock_acquire+0x8>)
 80212e2:	f000 bba4 	b.w	8021a2e <__retarget_lock_acquire_recursive>
 80212e6:	bf00      	nop
 80212e8:	200171c6 	.word	0x200171c6

080212ec <__sfp_lock_release>:
 80212ec:	4801      	ldr	r0, [pc, #4]	@ (80212f4 <__sfp_lock_release+0x8>)
 80212ee:	f000 bb9f 	b.w	8021a30 <__retarget_lock_release_recursive>
 80212f2:	bf00      	nop
 80212f4:	200171c6 	.word	0x200171c6

080212f8 <__sinit>:
 80212f8:	b510      	push	{r4, lr}
 80212fa:	4604      	mov	r4, r0
 80212fc:	f7ff fff0 	bl	80212e0 <__sfp_lock_acquire>
 8021300:	6a23      	ldr	r3, [r4, #32]
 8021302:	b11b      	cbz	r3, 802130c <__sinit+0x14>
 8021304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021308:	f7ff bff0 	b.w	80212ec <__sfp_lock_release>
 802130c:	4b04      	ldr	r3, [pc, #16]	@ (8021320 <__sinit+0x28>)
 802130e:	6223      	str	r3, [r4, #32]
 8021310:	4b04      	ldr	r3, [pc, #16]	@ (8021324 <__sinit+0x2c>)
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	2b00      	cmp	r3, #0
 8021316:	d1f5      	bne.n	8021304 <__sinit+0xc>
 8021318:	f7ff ffc4 	bl	80212a4 <global_stdio_init.part.0>
 802131c:	e7f2      	b.n	8021304 <__sinit+0xc>
 802131e:	bf00      	nop
 8021320:	08021265 	.word	0x08021265
 8021324:	200171c0 	.word	0x200171c0

08021328 <_realloc_r>:
 8021328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802132c:	4680      	mov	r8, r0
 802132e:	4615      	mov	r5, r2
 8021330:	460c      	mov	r4, r1
 8021332:	b921      	cbnz	r1, 802133e <_realloc_r+0x16>
 8021334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021338:	4611      	mov	r1, r2
 802133a:	f7ff be1d 	b.w	8020f78 <_malloc_r>
 802133e:	b92a      	cbnz	r2, 802134c <_realloc_r+0x24>
 8021340:	f000 fbb8 	bl	8021ab4 <_free_r>
 8021344:	2400      	movs	r4, #0
 8021346:	4620      	mov	r0, r4
 8021348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802134c:	f001 f8d0 	bl	80224f0 <_malloc_usable_size_r>
 8021350:	4285      	cmp	r5, r0
 8021352:	4606      	mov	r6, r0
 8021354:	d802      	bhi.n	802135c <_realloc_r+0x34>
 8021356:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802135a:	d8f4      	bhi.n	8021346 <_realloc_r+0x1e>
 802135c:	4629      	mov	r1, r5
 802135e:	4640      	mov	r0, r8
 8021360:	f7ff fe0a 	bl	8020f78 <_malloc_r>
 8021364:	4607      	mov	r7, r0
 8021366:	2800      	cmp	r0, #0
 8021368:	d0ec      	beq.n	8021344 <_realloc_r+0x1c>
 802136a:	42b5      	cmp	r5, r6
 802136c:	462a      	mov	r2, r5
 802136e:	4621      	mov	r1, r4
 8021370:	bf28      	it	cs
 8021372:	4632      	movcs	r2, r6
 8021374:	f000 fb5d 	bl	8021a32 <memcpy>
 8021378:	4621      	mov	r1, r4
 802137a:	4640      	mov	r0, r8
 802137c:	f000 fb9a 	bl	8021ab4 <_free_r>
 8021380:	463c      	mov	r4, r7
 8021382:	e7e0      	b.n	8021346 <_realloc_r+0x1e>

08021384 <_strtoul_l.constprop.0>:
 8021384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021388:	4e34      	ldr	r6, [pc, #208]	@ (802145c <_strtoul_l.constprop.0+0xd8>)
 802138a:	4686      	mov	lr, r0
 802138c:	460d      	mov	r5, r1
 802138e:	4628      	mov	r0, r5
 8021390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021394:	5d37      	ldrb	r7, [r6, r4]
 8021396:	f017 0708 	ands.w	r7, r7, #8
 802139a:	d1f8      	bne.n	802138e <_strtoul_l.constprop.0+0xa>
 802139c:	2c2d      	cmp	r4, #45	@ 0x2d
 802139e:	d12f      	bne.n	8021400 <_strtoul_l.constprop.0+0x7c>
 80213a0:	782c      	ldrb	r4, [r5, #0]
 80213a2:	2701      	movs	r7, #1
 80213a4:	1c85      	adds	r5, r0, #2
 80213a6:	f033 0010 	bics.w	r0, r3, #16
 80213aa:	d109      	bne.n	80213c0 <_strtoul_l.constprop.0+0x3c>
 80213ac:	2c30      	cmp	r4, #48	@ 0x30
 80213ae:	d12c      	bne.n	802140a <_strtoul_l.constprop.0+0x86>
 80213b0:	7828      	ldrb	r0, [r5, #0]
 80213b2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80213b6:	2858      	cmp	r0, #88	@ 0x58
 80213b8:	d127      	bne.n	802140a <_strtoul_l.constprop.0+0x86>
 80213ba:	786c      	ldrb	r4, [r5, #1]
 80213bc:	2310      	movs	r3, #16
 80213be:	3502      	adds	r5, #2
 80213c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80213c4:	2600      	movs	r6, #0
 80213c6:	fbb8 f8f3 	udiv	r8, r8, r3
 80213ca:	fb03 f908 	mul.w	r9, r3, r8
 80213ce:	ea6f 0909 	mvn.w	r9, r9
 80213d2:	4630      	mov	r0, r6
 80213d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80213d8:	f1bc 0f09 	cmp.w	ip, #9
 80213dc:	d81c      	bhi.n	8021418 <_strtoul_l.constprop.0+0x94>
 80213de:	4664      	mov	r4, ip
 80213e0:	42a3      	cmp	r3, r4
 80213e2:	dd2a      	ble.n	802143a <_strtoul_l.constprop.0+0xb6>
 80213e4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80213e8:	d007      	beq.n	80213fa <_strtoul_l.constprop.0+0x76>
 80213ea:	4580      	cmp	r8, r0
 80213ec:	d322      	bcc.n	8021434 <_strtoul_l.constprop.0+0xb0>
 80213ee:	d101      	bne.n	80213f4 <_strtoul_l.constprop.0+0x70>
 80213f0:	45a1      	cmp	r9, r4
 80213f2:	db1f      	blt.n	8021434 <_strtoul_l.constprop.0+0xb0>
 80213f4:	fb00 4003 	mla	r0, r0, r3, r4
 80213f8:	2601      	movs	r6, #1
 80213fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80213fe:	e7e9      	b.n	80213d4 <_strtoul_l.constprop.0+0x50>
 8021400:	2c2b      	cmp	r4, #43	@ 0x2b
 8021402:	bf04      	itt	eq
 8021404:	782c      	ldrbeq	r4, [r5, #0]
 8021406:	1c85      	addeq	r5, r0, #2
 8021408:	e7cd      	b.n	80213a6 <_strtoul_l.constprop.0+0x22>
 802140a:	2b00      	cmp	r3, #0
 802140c:	d1d8      	bne.n	80213c0 <_strtoul_l.constprop.0+0x3c>
 802140e:	2c30      	cmp	r4, #48	@ 0x30
 8021410:	bf0c      	ite	eq
 8021412:	2308      	moveq	r3, #8
 8021414:	230a      	movne	r3, #10
 8021416:	e7d3      	b.n	80213c0 <_strtoul_l.constprop.0+0x3c>
 8021418:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802141c:	f1bc 0f19 	cmp.w	ip, #25
 8021420:	d801      	bhi.n	8021426 <_strtoul_l.constprop.0+0xa2>
 8021422:	3c37      	subs	r4, #55	@ 0x37
 8021424:	e7dc      	b.n	80213e0 <_strtoul_l.constprop.0+0x5c>
 8021426:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802142a:	f1bc 0f19 	cmp.w	ip, #25
 802142e:	d804      	bhi.n	802143a <_strtoul_l.constprop.0+0xb6>
 8021430:	3c57      	subs	r4, #87	@ 0x57
 8021432:	e7d5      	b.n	80213e0 <_strtoul_l.constprop.0+0x5c>
 8021434:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8021438:	e7df      	b.n	80213fa <_strtoul_l.constprop.0+0x76>
 802143a:	1c73      	adds	r3, r6, #1
 802143c:	d106      	bne.n	802144c <_strtoul_l.constprop.0+0xc8>
 802143e:	2322      	movs	r3, #34	@ 0x22
 8021440:	f8ce 3000 	str.w	r3, [lr]
 8021444:	4630      	mov	r0, r6
 8021446:	b932      	cbnz	r2, 8021456 <_strtoul_l.constprop.0+0xd2>
 8021448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802144c:	b107      	cbz	r7, 8021450 <_strtoul_l.constprop.0+0xcc>
 802144e:	4240      	negs	r0, r0
 8021450:	2a00      	cmp	r2, #0
 8021452:	d0f9      	beq.n	8021448 <_strtoul_l.constprop.0+0xc4>
 8021454:	b106      	cbz	r6, 8021458 <_strtoul_l.constprop.0+0xd4>
 8021456:	1e69      	subs	r1, r5, #1
 8021458:	6011      	str	r1, [r2, #0]
 802145a:	e7f5      	b.n	8021448 <_strtoul_l.constprop.0+0xc4>
 802145c:	08025b18 	.word	0x08025b18

08021460 <strtoul>:
 8021460:	4613      	mov	r3, r2
 8021462:	460a      	mov	r2, r1
 8021464:	4601      	mov	r1, r0
 8021466:	4802      	ldr	r0, [pc, #8]	@ (8021470 <strtoul+0x10>)
 8021468:	6800      	ldr	r0, [r0, #0]
 802146a:	f7ff bf8b 	b.w	8021384 <_strtoul_l.constprop.0>
 802146e:	bf00      	nop
 8021470:	20001b3c 	.word	0x20001b3c

08021474 <_fwalk_sglue>:
 8021474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021478:	4607      	mov	r7, r0
 802147a:	4688      	mov	r8, r1
 802147c:	4614      	mov	r4, r2
 802147e:	2600      	movs	r6, #0
 8021480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021484:	f1b9 0901 	subs.w	r9, r9, #1
 8021488:	d505      	bpl.n	8021496 <_fwalk_sglue+0x22>
 802148a:	6824      	ldr	r4, [r4, #0]
 802148c:	2c00      	cmp	r4, #0
 802148e:	d1f7      	bne.n	8021480 <_fwalk_sglue+0xc>
 8021490:	4630      	mov	r0, r6
 8021492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021496:	89ab      	ldrh	r3, [r5, #12]
 8021498:	2b01      	cmp	r3, #1
 802149a:	d907      	bls.n	80214ac <_fwalk_sglue+0x38>
 802149c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80214a0:	3301      	adds	r3, #1
 80214a2:	d003      	beq.n	80214ac <_fwalk_sglue+0x38>
 80214a4:	4629      	mov	r1, r5
 80214a6:	4638      	mov	r0, r7
 80214a8:	47c0      	blx	r8
 80214aa:	4306      	orrs	r6, r0
 80214ac:	3568      	adds	r5, #104	@ 0x68
 80214ae:	e7e9      	b.n	8021484 <_fwalk_sglue+0x10>

080214b0 <_vsniprintf_r>:
 80214b0:	b530      	push	{r4, r5, lr}
 80214b2:	4614      	mov	r4, r2
 80214b4:	2c00      	cmp	r4, #0
 80214b6:	b09b      	sub	sp, #108	@ 0x6c
 80214b8:	4605      	mov	r5, r0
 80214ba:	461a      	mov	r2, r3
 80214bc:	da05      	bge.n	80214ca <_vsniprintf_r+0x1a>
 80214be:	238b      	movs	r3, #139	@ 0x8b
 80214c0:	6003      	str	r3, [r0, #0]
 80214c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80214c6:	b01b      	add	sp, #108	@ 0x6c
 80214c8:	bd30      	pop	{r4, r5, pc}
 80214ca:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80214ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80214d2:	bf14      	ite	ne
 80214d4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80214d8:	4623      	moveq	r3, r4
 80214da:	9302      	str	r3, [sp, #8]
 80214dc:	9305      	str	r3, [sp, #20]
 80214de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80214e2:	9100      	str	r1, [sp, #0]
 80214e4:	9104      	str	r1, [sp, #16]
 80214e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80214ea:	4669      	mov	r1, sp
 80214ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80214ee:	f000 fb87 	bl	8021c00 <_svfiprintf_r>
 80214f2:	1c43      	adds	r3, r0, #1
 80214f4:	bfbc      	itt	lt
 80214f6:	238b      	movlt	r3, #139	@ 0x8b
 80214f8:	602b      	strlt	r3, [r5, #0]
 80214fa:	2c00      	cmp	r4, #0
 80214fc:	d0e3      	beq.n	80214c6 <_vsniprintf_r+0x16>
 80214fe:	9b00      	ldr	r3, [sp, #0]
 8021500:	2200      	movs	r2, #0
 8021502:	701a      	strb	r2, [r3, #0]
 8021504:	e7df      	b.n	80214c6 <_vsniprintf_r+0x16>
	...

08021508 <vsniprintf>:
 8021508:	b507      	push	{r0, r1, r2, lr}
 802150a:	9300      	str	r3, [sp, #0]
 802150c:	4613      	mov	r3, r2
 802150e:	460a      	mov	r2, r1
 8021510:	4601      	mov	r1, r0
 8021512:	4803      	ldr	r0, [pc, #12]	@ (8021520 <vsniprintf+0x18>)
 8021514:	6800      	ldr	r0, [r0, #0]
 8021516:	f7ff ffcb 	bl	80214b0 <_vsniprintf_r>
 802151a:	b003      	add	sp, #12
 802151c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021520:	20001b3c 	.word	0x20001b3c

08021524 <_fwrite_r>:
 8021524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021528:	9c08      	ldr	r4, [sp, #32]
 802152a:	468a      	mov	sl, r1
 802152c:	4690      	mov	r8, r2
 802152e:	fb02 f903 	mul.w	r9, r2, r3
 8021532:	4606      	mov	r6, r0
 8021534:	b118      	cbz	r0, 802153e <_fwrite_r+0x1a>
 8021536:	6a03      	ldr	r3, [r0, #32]
 8021538:	b90b      	cbnz	r3, 802153e <_fwrite_r+0x1a>
 802153a:	f7ff fedd 	bl	80212f8 <__sinit>
 802153e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021540:	07dd      	lsls	r5, r3, #31
 8021542:	d405      	bmi.n	8021550 <_fwrite_r+0x2c>
 8021544:	89a3      	ldrh	r3, [r4, #12]
 8021546:	0598      	lsls	r0, r3, #22
 8021548:	d402      	bmi.n	8021550 <_fwrite_r+0x2c>
 802154a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802154c:	f000 fa6f 	bl	8021a2e <__retarget_lock_acquire_recursive>
 8021550:	89a3      	ldrh	r3, [r4, #12]
 8021552:	0719      	lsls	r1, r3, #28
 8021554:	d516      	bpl.n	8021584 <_fwrite_r+0x60>
 8021556:	6923      	ldr	r3, [r4, #16]
 8021558:	b1a3      	cbz	r3, 8021584 <_fwrite_r+0x60>
 802155a:	2500      	movs	r5, #0
 802155c:	454d      	cmp	r5, r9
 802155e:	d01f      	beq.n	80215a0 <_fwrite_r+0x7c>
 8021560:	68a7      	ldr	r7, [r4, #8]
 8021562:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8021566:	3f01      	subs	r7, #1
 8021568:	2f00      	cmp	r7, #0
 802156a:	60a7      	str	r7, [r4, #8]
 802156c:	da04      	bge.n	8021578 <_fwrite_r+0x54>
 802156e:	69a3      	ldr	r3, [r4, #24]
 8021570:	429f      	cmp	r7, r3
 8021572:	db0f      	blt.n	8021594 <_fwrite_r+0x70>
 8021574:	290a      	cmp	r1, #10
 8021576:	d00d      	beq.n	8021594 <_fwrite_r+0x70>
 8021578:	6823      	ldr	r3, [r4, #0]
 802157a:	1c5a      	adds	r2, r3, #1
 802157c:	6022      	str	r2, [r4, #0]
 802157e:	7019      	strb	r1, [r3, #0]
 8021580:	3501      	adds	r5, #1
 8021582:	e7eb      	b.n	802155c <_fwrite_r+0x38>
 8021584:	4621      	mov	r1, r4
 8021586:	4630      	mov	r0, r6
 8021588:	f000 f864 	bl	8021654 <__swsetup_r>
 802158c:	2800      	cmp	r0, #0
 802158e:	d0e4      	beq.n	802155a <_fwrite_r+0x36>
 8021590:	2500      	movs	r5, #0
 8021592:	e005      	b.n	80215a0 <_fwrite_r+0x7c>
 8021594:	4622      	mov	r2, r4
 8021596:	4630      	mov	r0, r6
 8021598:	f000 f81e 	bl	80215d8 <__swbuf_r>
 802159c:	3001      	adds	r0, #1
 802159e:	d1ef      	bne.n	8021580 <_fwrite_r+0x5c>
 80215a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80215a2:	07da      	lsls	r2, r3, #31
 80215a4:	d405      	bmi.n	80215b2 <_fwrite_r+0x8e>
 80215a6:	89a3      	ldrh	r3, [r4, #12]
 80215a8:	059b      	lsls	r3, r3, #22
 80215aa:	d402      	bmi.n	80215b2 <_fwrite_r+0x8e>
 80215ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80215ae:	f000 fa3f 	bl	8021a30 <__retarget_lock_release_recursive>
 80215b2:	fbb5 f0f8 	udiv	r0, r5, r8
 80215b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080215bc <fwrite>:
 80215bc:	b507      	push	{r0, r1, r2, lr}
 80215be:	9300      	str	r3, [sp, #0]
 80215c0:	4613      	mov	r3, r2
 80215c2:	460a      	mov	r2, r1
 80215c4:	4601      	mov	r1, r0
 80215c6:	4803      	ldr	r0, [pc, #12]	@ (80215d4 <fwrite+0x18>)
 80215c8:	6800      	ldr	r0, [r0, #0]
 80215ca:	f7ff ffab 	bl	8021524 <_fwrite_r>
 80215ce:	b003      	add	sp, #12
 80215d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80215d4:	20001b3c 	.word	0x20001b3c

080215d8 <__swbuf_r>:
 80215d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215da:	460e      	mov	r6, r1
 80215dc:	4614      	mov	r4, r2
 80215de:	4605      	mov	r5, r0
 80215e0:	b118      	cbz	r0, 80215ea <__swbuf_r+0x12>
 80215e2:	6a03      	ldr	r3, [r0, #32]
 80215e4:	b90b      	cbnz	r3, 80215ea <__swbuf_r+0x12>
 80215e6:	f7ff fe87 	bl	80212f8 <__sinit>
 80215ea:	69a3      	ldr	r3, [r4, #24]
 80215ec:	60a3      	str	r3, [r4, #8]
 80215ee:	89a3      	ldrh	r3, [r4, #12]
 80215f0:	071a      	lsls	r2, r3, #28
 80215f2:	d501      	bpl.n	80215f8 <__swbuf_r+0x20>
 80215f4:	6923      	ldr	r3, [r4, #16]
 80215f6:	b943      	cbnz	r3, 802160a <__swbuf_r+0x32>
 80215f8:	4621      	mov	r1, r4
 80215fa:	4628      	mov	r0, r5
 80215fc:	f000 f82a 	bl	8021654 <__swsetup_r>
 8021600:	b118      	cbz	r0, 802160a <__swbuf_r+0x32>
 8021602:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021606:	4638      	mov	r0, r7
 8021608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802160a:	6823      	ldr	r3, [r4, #0]
 802160c:	6922      	ldr	r2, [r4, #16]
 802160e:	1a98      	subs	r0, r3, r2
 8021610:	6963      	ldr	r3, [r4, #20]
 8021612:	b2f6      	uxtb	r6, r6
 8021614:	4283      	cmp	r3, r0
 8021616:	4637      	mov	r7, r6
 8021618:	dc05      	bgt.n	8021626 <__swbuf_r+0x4e>
 802161a:	4621      	mov	r1, r4
 802161c:	4628      	mov	r0, r5
 802161e:	f000 ff3f 	bl	80224a0 <_fflush_r>
 8021622:	2800      	cmp	r0, #0
 8021624:	d1ed      	bne.n	8021602 <__swbuf_r+0x2a>
 8021626:	68a3      	ldr	r3, [r4, #8]
 8021628:	3b01      	subs	r3, #1
 802162a:	60a3      	str	r3, [r4, #8]
 802162c:	6823      	ldr	r3, [r4, #0]
 802162e:	1c5a      	adds	r2, r3, #1
 8021630:	6022      	str	r2, [r4, #0]
 8021632:	701e      	strb	r6, [r3, #0]
 8021634:	6962      	ldr	r2, [r4, #20]
 8021636:	1c43      	adds	r3, r0, #1
 8021638:	429a      	cmp	r2, r3
 802163a:	d004      	beq.n	8021646 <__swbuf_r+0x6e>
 802163c:	89a3      	ldrh	r3, [r4, #12]
 802163e:	07db      	lsls	r3, r3, #31
 8021640:	d5e1      	bpl.n	8021606 <__swbuf_r+0x2e>
 8021642:	2e0a      	cmp	r6, #10
 8021644:	d1df      	bne.n	8021606 <__swbuf_r+0x2e>
 8021646:	4621      	mov	r1, r4
 8021648:	4628      	mov	r0, r5
 802164a:	f000 ff29 	bl	80224a0 <_fflush_r>
 802164e:	2800      	cmp	r0, #0
 8021650:	d0d9      	beq.n	8021606 <__swbuf_r+0x2e>
 8021652:	e7d6      	b.n	8021602 <__swbuf_r+0x2a>

08021654 <__swsetup_r>:
 8021654:	b538      	push	{r3, r4, r5, lr}
 8021656:	4b29      	ldr	r3, [pc, #164]	@ (80216fc <__swsetup_r+0xa8>)
 8021658:	4605      	mov	r5, r0
 802165a:	6818      	ldr	r0, [r3, #0]
 802165c:	460c      	mov	r4, r1
 802165e:	b118      	cbz	r0, 8021668 <__swsetup_r+0x14>
 8021660:	6a03      	ldr	r3, [r0, #32]
 8021662:	b90b      	cbnz	r3, 8021668 <__swsetup_r+0x14>
 8021664:	f7ff fe48 	bl	80212f8 <__sinit>
 8021668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802166c:	0719      	lsls	r1, r3, #28
 802166e:	d422      	bmi.n	80216b6 <__swsetup_r+0x62>
 8021670:	06da      	lsls	r2, r3, #27
 8021672:	d407      	bmi.n	8021684 <__swsetup_r+0x30>
 8021674:	2209      	movs	r2, #9
 8021676:	602a      	str	r2, [r5, #0]
 8021678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802167c:	81a3      	strh	r3, [r4, #12]
 802167e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021682:	e033      	b.n	80216ec <__swsetup_r+0x98>
 8021684:	0758      	lsls	r0, r3, #29
 8021686:	d512      	bpl.n	80216ae <__swsetup_r+0x5a>
 8021688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802168a:	b141      	cbz	r1, 802169e <__swsetup_r+0x4a>
 802168c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021690:	4299      	cmp	r1, r3
 8021692:	d002      	beq.n	802169a <__swsetup_r+0x46>
 8021694:	4628      	mov	r0, r5
 8021696:	f000 fa0d 	bl	8021ab4 <_free_r>
 802169a:	2300      	movs	r3, #0
 802169c:	6363      	str	r3, [r4, #52]	@ 0x34
 802169e:	89a3      	ldrh	r3, [r4, #12]
 80216a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80216a4:	81a3      	strh	r3, [r4, #12]
 80216a6:	2300      	movs	r3, #0
 80216a8:	6063      	str	r3, [r4, #4]
 80216aa:	6923      	ldr	r3, [r4, #16]
 80216ac:	6023      	str	r3, [r4, #0]
 80216ae:	89a3      	ldrh	r3, [r4, #12]
 80216b0:	f043 0308 	orr.w	r3, r3, #8
 80216b4:	81a3      	strh	r3, [r4, #12]
 80216b6:	6923      	ldr	r3, [r4, #16]
 80216b8:	b94b      	cbnz	r3, 80216ce <__swsetup_r+0x7a>
 80216ba:	89a3      	ldrh	r3, [r4, #12]
 80216bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80216c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80216c4:	d003      	beq.n	80216ce <__swsetup_r+0x7a>
 80216c6:	4621      	mov	r1, r4
 80216c8:	4628      	mov	r0, r5
 80216ca:	f000 f83f 	bl	802174c <__smakebuf_r>
 80216ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80216d2:	f013 0201 	ands.w	r2, r3, #1
 80216d6:	d00a      	beq.n	80216ee <__swsetup_r+0x9a>
 80216d8:	2200      	movs	r2, #0
 80216da:	60a2      	str	r2, [r4, #8]
 80216dc:	6962      	ldr	r2, [r4, #20]
 80216de:	4252      	negs	r2, r2
 80216e0:	61a2      	str	r2, [r4, #24]
 80216e2:	6922      	ldr	r2, [r4, #16]
 80216e4:	b942      	cbnz	r2, 80216f8 <__swsetup_r+0xa4>
 80216e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80216ea:	d1c5      	bne.n	8021678 <__swsetup_r+0x24>
 80216ec:	bd38      	pop	{r3, r4, r5, pc}
 80216ee:	0799      	lsls	r1, r3, #30
 80216f0:	bf58      	it	pl
 80216f2:	6962      	ldrpl	r2, [r4, #20]
 80216f4:	60a2      	str	r2, [r4, #8]
 80216f6:	e7f4      	b.n	80216e2 <__swsetup_r+0x8e>
 80216f8:	2000      	movs	r0, #0
 80216fa:	e7f7      	b.n	80216ec <__swsetup_r+0x98>
 80216fc:	20001b3c 	.word	0x20001b3c

08021700 <__swhatbuf_r>:
 8021700:	b570      	push	{r4, r5, r6, lr}
 8021702:	460c      	mov	r4, r1
 8021704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021708:	2900      	cmp	r1, #0
 802170a:	b096      	sub	sp, #88	@ 0x58
 802170c:	4615      	mov	r5, r2
 802170e:	461e      	mov	r6, r3
 8021710:	da0d      	bge.n	802172e <__swhatbuf_r+0x2e>
 8021712:	89a3      	ldrh	r3, [r4, #12]
 8021714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021718:	f04f 0100 	mov.w	r1, #0
 802171c:	bf14      	ite	ne
 802171e:	2340      	movne	r3, #64	@ 0x40
 8021720:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021724:	2000      	movs	r0, #0
 8021726:	6031      	str	r1, [r6, #0]
 8021728:	602b      	str	r3, [r5, #0]
 802172a:	b016      	add	sp, #88	@ 0x58
 802172c:	bd70      	pop	{r4, r5, r6, pc}
 802172e:	466a      	mov	r2, sp
 8021730:	f000 f920 	bl	8021974 <_fstat_r>
 8021734:	2800      	cmp	r0, #0
 8021736:	dbec      	blt.n	8021712 <__swhatbuf_r+0x12>
 8021738:	9901      	ldr	r1, [sp, #4]
 802173a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802173e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021742:	4259      	negs	r1, r3
 8021744:	4159      	adcs	r1, r3
 8021746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802174a:	e7eb      	b.n	8021724 <__swhatbuf_r+0x24>

0802174c <__smakebuf_r>:
 802174c:	898b      	ldrh	r3, [r1, #12]
 802174e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021750:	079d      	lsls	r5, r3, #30
 8021752:	4606      	mov	r6, r0
 8021754:	460c      	mov	r4, r1
 8021756:	d507      	bpl.n	8021768 <__smakebuf_r+0x1c>
 8021758:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802175c:	6023      	str	r3, [r4, #0]
 802175e:	6123      	str	r3, [r4, #16]
 8021760:	2301      	movs	r3, #1
 8021762:	6163      	str	r3, [r4, #20]
 8021764:	b003      	add	sp, #12
 8021766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021768:	ab01      	add	r3, sp, #4
 802176a:	466a      	mov	r2, sp
 802176c:	f7ff ffc8 	bl	8021700 <__swhatbuf_r>
 8021770:	9f00      	ldr	r7, [sp, #0]
 8021772:	4605      	mov	r5, r0
 8021774:	4639      	mov	r1, r7
 8021776:	4630      	mov	r0, r6
 8021778:	f7ff fbfe 	bl	8020f78 <_malloc_r>
 802177c:	b948      	cbnz	r0, 8021792 <__smakebuf_r+0x46>
 802177e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021782:	059a      	lsls	r2, r3, #22
 8021784:	d4ee      	bmi.n	8021764 <__smakebuf_r+0x18>
 8021786:	f023 0303 	bic.w	r3, r3, #3
 802178a:	f043 0302 	orr.w	r3, r3, #2
 802178e:	81a3      	strh	r3, [r4, #12]
 8021790:	e7e2      	b.n	8021758 <__smakebuf_r+0xc>
 8021792:	89a3      	ldrh	r3, [r4, #12]
 8021794:	6020      	str	r0, [r4, #0]
 8021796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802179a:	81a3      	strh	r3, [r4, #12]
 802179c:	9b01      	ldr	r3, [sp, #4]
 802179e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80217a2:	b15b      	cbz	r3, 80217bc <__smakebuf_r+0x70>
 80217a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80217a8:	4630      	mov	r0, r6
 80217aa:	f000 f8f5 	bl	8021998 <_isatty_r>
 80217ae:	b128      	cbz	r0, 80217bc <__smakebuf_r+0x70>
 80217b0:	89a3      	ldrh	r3, [r4, #12]
 80217b2:	f023 0303 	bic.w	r3, r3, #3
 80217b6:	f043 0301 	orr.w	r3, r3, #1
 80217ba:	81a3      	strh	r3, [r4, #12]
 80217bc:	89a3      	ldrh	r3, [r4, #12]
 80217be:	431d      	orrs	r5, r3
 80217c0:	81a5      	strh	r5, [r4, #12]
 80217c2:	e7cf      	b.n	8021764 <__smakebuf_r+0x18>

080217c4 <iprintf>:
 80217c4:	b40f      	push	{r0, r1, r2, r3}
 80217c6:	b507      	push	{r0, r1, r2, lr}
 80217c8:	4906      	ldr	r1, [pc, #24]	@ (80217e4 <iprintf+0x20>)
 80217ca:	ab04      	add	r3, sp, #16
 80217cc:	6808      	ldr	r0, [r1, #0]
 80217ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80217d2:	6881      	ldr	r1, [r0, #8]
 80217d4:	9301      	str	r3, [sp, #4]
 80217d6:	f000 fb39 	bl	8021e4c <_vfiprintf_r>
 80217da:	b003      	add	sp, #12
 80217dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80217e0:	b004      	add	sp, #16
 80217e2:	4770      	bx	lr
 80217e4:	20001b3c 	.word	0x20001b3c

080217e8 <_puts_r>:
 80217e8:	6a03      	ldr	r3, [r0, #32]
 80217ea:	b570      	push	{r4, r5, r6, lr}
 80217ec:	6884      	ldr	r4, [r0, #8]
 80217ee:	4605      	mov	r5, r0
 80217f0:	460e      	mov	r6, r1
 80217f2:	b90b      	cbnz	r3, 80217f8 <_puts_r+0x10>
 80217f4:	f7ff fd80 	bl	80212f8 <__sinit>
 80217f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80217fa:	07db      	lsls	r3, r3, #31
 80217fc:	d405      	bmi.n	802180a <_puts_r+0x22>
 80217fe:	89a3      	ldrh	r3, [r4, #12]
 8021800:	0598      	lsls	r0, r3, #22
 8021802:	d402      	bmi.n	802180a <_puts_r+0x22>
 8021804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021806:	f000 f912 	bl	8021a2e <__retarget_lock_acquire_recursive>
 802180a:	89a3      	ldrh	r3, [r4, #12]
 802180c:	0719      	lsls	r1, r3, #28
 802180e:	d502      	bpl.n	8021816 <_puts_r+0x2e>
 8021810:	6923      	ldr	r3, [r4, #16]
 8021812:	2b00      	cmp	r3, #0
 8021814:	d135      	bne.n	8021882 <_puts_r+0x9a>
 8021816:	4621      	mov	r1, r4
 8021818:	4628      	mov	r0, r5
 802181a:	f7ff ff1b 	bl	8021654 <__swsetup_r>
 802181e:	b380      	cbz	r0, 8021882 <_puts_r+0x9a>
 8021820:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8021824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021826:	07da      	lsls	r2, r3, #31
 8021828:	d405      	bmi.n	8021836 <_puts_r+0x4e>
 802182a:	89a3      	ldrh	r3, [r4, #12]
 802182c:	059b      	lsls	r3, r3, #22
 802182e:	d402      	bmi.n	8021836 <_puts_r+0x4e>
 8021830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021832:	f000 f8fd 	bl	8021a30 <__retarget_lock_release_recursive>
 8021836:	4628      	mov	r0, r5
 8021838:	bd70      	pop	{r4, r5, r6, pc}
 802183a:	2b00      	cmp	r3, #0
 802183c:	da04      	bge.n	8021848 <_puts_r+0x60>
 802183e:	69a2      	ldr	r2, [r4, #24]
 8021840:	429a      	cmp	r2, r3
 8021842:	dc17      	bgt.n	8021874 <_puts_r+0x8c>
 8021844:	290a      	cmp	r1, #10
 8021846:	d015      	beq.n	8021874 <_puts_r+0x8c>
 8021848:	6823      	ldr	r3, [r4, #0]
 802184a:	1c5a      	adds	r2, r3, #1
 802184c:	6022      	str	r2, [r4, #0]
 802184e:	7019      	strb	r1, [r3, #0]
 8021850:	68a3      	ldr	r3, [r4, #8]
 8021852:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021856:	3b01      	subs	r3, #1
 8021858:	60a3      	str	r3, [r4, #8]
 802185a:	2900      	cmp	r1, #0
 802185c:	d1ed      	bne.n	802183a <_puts_r+0x52>
 802185e:	2b00      	cmp	r3, #0
 8021860:	da11      	bge.n	8021886 <_puts_r+0x9e>
 8021862:	4622      	mov	r2, r4
 8021864:	210a      	movs	r1, #10
 8021866:	4628      	mov	r0, r5
 8021868:	f7ff feb6 	bl	80215d8 <__swbuf_r>
 802186c:	3001      	adds	r0, #1
 802186e:	d0d7      	beq.n	8021820 <_puts_r+0x38>
 8021870:	250a      	movs	r5, #10
 8021872:	e7d7      	b.n	8021824 <_puts_r+0x3c>
 8021874:	4622      	mov	r2, r4
 8021876:	4628      	mov	r0, r5
 8021878:	f7ff feae 	bl	80215d8 <__swbuf_r>
 802187c:	3001      	adds	r0, #1
 802187e:	d1e7      	bne.n	8021850 <_puts_r+0x68>
 8021880:	e7ce      	b.n	8021820 <_puts_r+0x38>
 8021882:	3e01      	subs	r6, #1
 8021884:	e7e4      	b.n	8021850 <_puts_r+0x68>
 8021886:	6823      	ldr	r3, [r4, #0]
 8021888:	1c5a      	adds	r2, r3, #1
 802188a:	6022      	str	r2, [r4, #0]
 802188c:	220a      	movs	r2, #10
 802188e:	701a      	strb	r2, [r3, #0]
 8021890:	e7ee      	b.n	8021870 <_puts_r+0x88>
	...

08021894 <puts>:
 8021894:	4b02      	ldr	r3, [pc, #8]	@ (80218a0 <puts+0xc>)
 8021896:	4601      	mov	r1, r0
 8021898:	6818      	ldr	r0, [r3, #0]
 802189a:	f7ff bfa5 	b.w	80217e8 <_puts_r>
 802189e:	bf00      	nop
 80218a0:	20001b3c 	.word	0x20001b3c

080218a4 <strchr>:
 80218a4:	b2c9      	uxtb	r1, r1
 80218a6:	4603      	mov	r3, r0
 80218a8:	4618      	mov	r0, r3
 80218aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80218ae:	b112      	cbz	r2, 80218b6 <strchr+0x12>
 80218b0:	428a      	cmp	r2, r1
 80218b2:	d1f9      	bne.n	80218a8 <strchr+0x4>
 80218b4:	4770      	bx	lr
 80218b6:	2900      	cmp	r1, #0
 80218b8:	bf18      	it	ne
 80218ba:	2000      	movne	r0, #0
 80218bc:	4770      	bx	lr

080218be <strncmp>:
 80218be:	b510      	push	{r4, lr}
 80218c0:	b16a      	cbz	r2, 80218de <strncmp+0x20>
 80218c2:	3901      	subs	r1, #1
 80218c4:	1884      	adds	r4, r0, r2
 80218c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80218ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80218ce:	429a      	cmp	r2, r3
 80218d0:	d103      	bne.n	80218da <strncmp+0x1c>
 80218d2:	42a0      	cmp	r0, r4
 80218d4:	d001      	beq.n	80218da <strncmp+0x1c>
 80218d6:	2a00      	cmp	r2, #0
 80218d8:	d1f5      	bne.n	80218c6 <strncmp+0x8>
 80218da:	1ad0      	subs	r0, r2, r3
 80218dc:	bd10      	pop	{r4, pc}
 80218de:	4610      	mov	r0, r2
 80218e0:	e7fc      	b.n	80218dc <strncmp+0x1e>

080218e2 <strstr>:
 80218e2:	780a      	ldrb	r2, [r1, #0]
 80218e4:	b570      	push	{r4, r5, r6, lr}
 80218e6:	b96a      	cbnz	r2, 8021904 <strstr+0x22>
 80218e8:	bd70      	pop	{r4, r5, r6, pc}
 80218ea:	429a      	cmp	r2, r3
 80218ec:	d109      	bne.n	8021902 <strstr+0x20>
 80218ee:	460c      	mov	r4, r1
 80218f0:	4605      	mov	r5, r0
 80218f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	d0f6      	beq.n	80218e8 <strstr+0x6>
 80218fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80218fe:	429e      	cmp	r6, r3
 8021900:	d0f7      	beq.n	80218f2 <strstr+0x10>
 8021902:	3001      	adds	r0, #1
 8021904:	7803      	ldrb	r3, [r0, #0]
 8021906:	2b00      	cmp	r3, #0
 8021908:	d1ef      	bne.n	80218ea <strstr+0x8>
 802190a:	4618      	mov	r0, r3
 802190c:	e7ec      	b.n	80218e8 <strstr+0x6>

0802190e <memcmp>:
 802190e:	b510      	push	{r4, lr}
 8021910:	3901      	subs	r1, #1
 8021912:	4402      	add	r2, r0
 8021914:	4290      	cmp	r0, r2
 8021916:	d101      	bne.n	802191c <memcmp+0xe>
 8021918:	2000      	movs	r0, #0
 802191a:	e005      	b.n	8021928 <memcmp+0x1a>
 802191c:	7803      	ldrb	r3, [r0, #0]
 802191e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021922:	42a3      	cmp	r3, r4
 8021924:	d001      	beq.n	802192a <memcmp+0x1c>
 8021926:	1b18      	subs	r0, r3, r4
 8021928:	bd10      	pop	{r4, pc}
 802192a:	3001      	adds	r0, #1
 802192c:	e7f2      	b.n	8021914 <memcmp+0x6>

0802192e <memmove>:
 802192e:	4288      	cmp	r0, r1
 8021930:	b510      	push	{r4, lr}
 8021932:	eb01 0402 	add.w	r4, r1, r2
 8021936:	d902      	bls.n	802193e <memmove+0x10>
 8021938:	4284      	cmp	r4, r0
 802193a:	4623      	mov	r3, r4
 802193c:	d807      	bhi.n	802194e <memmove+0x20>
 802193e:	1e43      	subs	r3, r0, #1
 8021940:	42a1      	cmp	r1, r4
 8021942:	d008      	beq.n	8021956 <memmove+0x28>
 8021944:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021948:	f803 2f01 	strb.w	r2, [r3, #1]!
 802194c:	e7f8      	b.n	8021940 <memmove+0x12>
 802194e:	4402      	add	r2, r0
 8021950:	4601      	mov	r1, r0
 8021952:	428a      	cmp	r2, r1
 8021954:	d100      	bne.n	8021958 <memmove+0x2a>
 8021956:	bd10      	pop	{r4, pc}
 8021958:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802195c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021960:	e7f7      	b.n	8021952 <memmove+0x24>

08021962 <memset>:
 8021962:	4402      	add	r2, r0
 8021964:	4603      	mov	r3, r0
 8021966:	4293      	cmp	r3, r2
 8021968:	d100      	bne.n	802196c <memset+0xa>
 802196a:	4770      	bx	lr
 802196c:	f803 1b01 	strb.w	r1, [r3], #1
 8021970:	e7f9      	b.n	8021966 <memset+0x4>
	...

08021974 <_fstat_r>:
 8021974:	b538      	push	{r3, r4, r5, lr}
 8021976:	4d07      	ldr	r5, [pc, #28]	@ (8021994 <_fstat_r+0x20>)
 8021978:	2300      	movs	r3, #0
 802197a:	4604      	mov	r4, r0
 802197c:	4608      	mov	r0, r1
 802197e:	4611      	mov	r1, r2
 8021980:	602b      	str	r3, [r5, #0]
 8021982:	f7e1 f88d 	bl	8002aa0 <_fstat>
 8021986:	1c43      	adds	r3, r0, #1
 8021988:	d102      	bne.n	8021990 <_fstat_r+0x1c>
 802198a:	682b      	ldr	r3, [r5, #0]
 802198c:	b103      	cbz	r3, 8021990 <_fstat_r+0x1c>
 802198e:	6023      	str	r3, [r4, #0]
 8021990:	bd38      	pop	{r3, r4, r5, pc}
 8021992:	bf00      	nop
 8021994:	200171c8 	.word	0x200171c8

08021998 <_isatty_r>:
 8021998:	b538      	push	{r3, r4, r5, lr}
 802199a:	4d06      	ldr	r5, [pc, #24]	@ (80219b4 <_isatty_r+0x1c>)
 802199c:	2300      	movs	r3, #0
 802199e:	4604      	mov	r4, r0
 80219a0:	4608      	mov	r0, r1
 80219a2:	602b      	str	r3, [r5, #0]
 80219a4:	f7e1 f88c 	bl	8002ac0 <_isatty>
 80219a8:	1c43      	adds	r3, r0, #1
 80219aa:	d102      	bne.n	80219b2 <_isatty_r+0x1a>
 80219ac:	682b      	ldr	r3, [r5, #0]
 80219ae:	b103      	cbz	r3, 80219b2 <_isatty_r+0x1a>
 80219b0:	6023      	str	r3, [r4, #0]
 80219b2:	bd38      	pop	{r3, r4, r5, pc}
 80219b4:	200171c8 	.word	0x200171c8

080219b8 <_sbrk_r>:
 80219b8:	b538      	push	{r3, r4, r5, lr}
 80219ba:	4d06      	ldr	r5, [pc, #24]	@ (80219d4 <_sbrk_r+0x1c>)
 80219bc:	2300      	movs	r3, #0
 80219be:	4604      	mov	r4, r0
 80219c0:	4608      	mov	r0, r1
 80219c2:	602b      	str	r3, [r5, #0]
 80219c4:	f7e1 f894 	bl	8002af0 <_sbrk>
 80219c8:	1c43      	adds	r3, r0, #1
 80219ca:	d102      	bne.n	80219d2 <_sbrk_r+0x1a>
 80219cc:	682b      	ldr	r3, [r5, #0]
 80219ce:	b103      	cbz	r3, 80219d2 <_sbrk_r+0x1a>
 80219d0:	6023      	str	r3, [r4, #0]
 80219d2:	bd38      	pop	{r3, r4, r5, pc}
 80219d4:	200171c8 	.word	0x200171c8

080219d8 <__errno>:
 80219d8:	4b01      	ldr	r3, [pc, #4]	@ (80219e0 <__errno+0x8>)
 80219da:	6818      	ldr	r0, [r3, #0]
 80219dc:	4770      	bx	lr
 80219de:	bf00      	nop
 80219e0:	20001b3c 	.word	0x20001b3c

080219e4 <__libc_init_array>:
 80219e4:	b570      	push	{r4, r5, r6, lr}
 80219e6:	4d0d      	ldr	r5, [pc, #52]	@ (8021a1c <__libc_init_array+0x38>)
 80219e8:	4c0d      	ldr	r4, [pc, #52]	@ (8021a20 <__libc_init_array+0x3c>)
 80219ea:	1b64      	subs	r4, r4, r5
 80219ec:	10a4      	asrs	r4, r4, #2
 80219ee:	2600      	movs	r6, #0
 80219f0:	42a6      	cmp	r6, r4
 80219f2:	d109      	bne.n	8021a08 <__libc_init_array+0x24>
 80219f4:	4d0b      	ldr	r5, [pc, #44]	@ (8021a24 <__libc_init_array+0x40>)
 80219f6:	4c0c      	ldr	r4, [pc, #48]	@ (8021a28 <__libc_init_array+0x44>)
 80219f8:	f000 fe6a 	bl	80226d0 <_init>
 80219fc:	1b64      	subs	r4, r4, r5
 80219fe:	10a4      	asrs	r4, r4, #2
 8021a00:	2600      	movs	r6, #0
 8021a02:	42a6      	cmp	r6, r4
 8021a04:	d105      	bne.n	8021a12 <__libc_init_array+0x2e>
 8021a06:	bd70      	pop	{r4, r5, r6, pc}
 8021a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a0c:	4798      	blx	r3
 8021a0e:	3601      	adds	r6, #1
 8021a10:	e7ee      	b.n	80219f0 <__libc_init_array+0xc>
 8021a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a16:	4798      	blx	r3
 8021a18:	3601      	adds	r6, #1
 8021a1a:	e7f2      	b.n	8021a02 <__libc_init_array+0x1e>
 8021a1c:	08025c90 	.word	0x08025c90
 8021a20:	08025c90 	.word	0x08025c90
 8021a24:	08025c90 	.word	0x08025c90
 8021a28:	08025cc0 	.word	0x08025cc0

08021a2c <__retarget_lock_init_recursive>:
 8021a2c:	4770      	bx	lr

08021a2e <__retarget_lock_acquire_recursive>:
 8021a2e:	4770      	bx	lr

08021a30 <__retarget_lock_release_recursive>:
 8021a30:	4770      	bx	lr

08021a32 <memcpy>:
 8021a32:	440a      	add	r2, r1
 8021a34:	4291      	cmp	r1, r2
 8021a36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021a3a:	d100      	bne.n	8021a3e <memcpy+0xc>
 8021a3c:	4770      	bx	lr
 8021a3e:	b510      	push	{r4, lr}
 8021a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021a48:	4291      	cmp	r1, r2
 8021a4a:	d1f9      	bne.n	8021a40 <memcpy+0xe>
 8021a4c:	bd10      	pop	{r4, pc}

08021a4e <strcpy>:
 8021a4e:	4603      	mov	r3, r0
 8021a50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021a54:	f803 2b01 	strb.w	r2, [r3], #1
 8021a58:	2a00      	cmp	r2, #0
 8021a5a:	d1f9      	bne.n	8021a50 <strcpy+0x2>
 8021a5c:	4770      	bx	lr
	...

08021a60 <__assert_func>:
 8021a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021a62:	4614      	mov	r4, r2
 8021a64:	461a      	mov	r2, r3
 8021a66:	4b09      	ldr	r3, [pc, #36]	@ (8021a8c <__assert_func+0x2c>)
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	4605      	mov	r5, r0
 8021a6c:	68d8      	ldr	r0, [r3, #12]
 8021a6e:	b954      	cbnz	r4, 8021a86 <__assert_func+0x26>
 8021a70:	4b07      	ldr	r3, [pc, #28]	@ (8021a90 <__assert_func+0x30>)
 8021a72:	461c      	mov	r4, r3
 8021a74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021a78:	9100      	str	r1, [sp, #0]
 8021a7a:	462b      	mov	r3, r5
 8021a7c:	4905      	ldr	r1, [pc, #20]	@ (8021a94 <__assert_func+0x34>)
 8021a7e:	f000 fd83 	bl	8022588 <fiprintf>
 8021a82:	f000 fdd9 	bl	8022638 <abort>
 8021a86:	4b04      	ldr	r3, [pc, #16]	@ (8021a98 <__assert_func+0x38>)
 8021a88:	e7f4      	b.n	8021a74 <__assert_func+0x14>
 8021a8a:	bf00      	nop
 8021a8c:	20001b3c 	.word	0x20001b3c
 8021a90:	08025c53 	.word	0x08025c53
 8021a94:	08025c25 	.word	0x08025c25
 8021a98:	08025c18 	.word	0x08025c18

08021a9c <__env_lock>:
 8021a9c:	4801      	ldr	r0, [pc, #4]	@ (8021aa4 <__env_lock+0x8>)
 8021a9e:	f7ff bfc6 	b.w	8021a2e <__retarget_lock_acquire_recursive>
 8021aa2:	bf00      	nop
 8021aa4:	200171c4 	.word	0x200171c4

08021aa8 <__env_unlock>:
 8021aa8:	4801      	ldr	r0, [pc, #4]	@ (8021ab0 <__env_unlock+0x8>)
 8021aaa:	f7ff bfc1 	b.w	8021a30 <__retarget_lock_release_recursive>
 8021aae:	bf00      	nop
 8021ab0:	200171c4 	.word	0x200171c4

08021ab4 <_free_r>:
 8021ab4:	b538      	push	{r3, r4, r5, lr}
 8021ab6:	4605      	mov	r5, r0
 8021ab8:	2900      	cmp	r1, #0
 8021aba:	d041      	beq.n	8021b40 <_free_r+0x8c>
 8021abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021ac0:	1f0c      	subs	r4, r1, #4
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	bfb8      	it	lt
 8021ac6:	18e4      	addlt	r4, r4, r3
 8021ac8:	f7ff fb0a 	bl	80210e0 <__malloc_lock>
 8021acc:	4a1d      	ldr	r2, [pc, #116]	@ (8021b44 <_free_r+0x90>)
 8021ace:	6813      	ldr	r3, [r2, #0]
 8021ad0:	b933      	cbnz	r3, 8021ae0 <_free_r+0x2c>
 8021ad2:	6063      	str	r3, [r4, #4]
 8021ad4:	6014      	str	r4, [r2, #0]
 8021ad6:	4628      	mov	r0, r5
 8021ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021adc:	f7ff bb06 	b.w	80210ec <__malloc_unlock>
 8021ae0:	42a3      	cmp	r3, r4
 8021ae2:	d908      	bls.n	8021af6 <_free_r+0x42>
 8021ae4:	6820      	ldr	r0, [r4, #0]
 8021ae6:	1821      	adds	r1, r4, r0
 8021ae8:	428b      	cmp	r3, r1
 8021aea:	bf01      	itttt	eq
 8021aec:	6819      	ldreq	r1, [r3, #0]
 8021aee:	685b      	ldreq	r3, [r3, #4]
 8021af0:	1809      	addeq	r1, r1, r0
 8021af2:	6021      	streq	r1, [r4, #0]
 8021af4:	e7ed      	b.n	8021ad2 <_free_r+0x1e>
 8021af6:	461a      	mov	r2, r3
 8021af8:	685b      	ldr	r3, [r3, #4]
 8021afa:	b10b      	cbz	r3, 8021b00 <_free_r+0x4c>
 8021afc:	42a3      	cmp	r3, r4
 8021afe:	d9fa      	bls.n	8021af6 <_free_r+0x42>
 8021b00:	6811      	ldr	r1, [r2, #0]
 8021b02:	1850      	adds	r0, r2, r1
 8021b04:	42a0      	cmp	r0, r4
 8021b06:	d10b      	bne.n	8021b20 <_free_r+0x6c>
 8021b08:	6820      	ldr	r0, [r4, #0]
 8021b0a:	4401      	add	r1, r0
 8021b0c:	1850      	adds	r0, r2, r1
 8021b0e:	4283      	cmp	r3, r0
 8021b10:	6011      	str	r1, [r2, #0]
 8021b12:	d1e0      	bne.n	8021ad6 <_free_r+0x22>
 8021b14:	6818      	ldr	r0, [r3, #0]
 8021b16:	685b      	ldr	r3, [r3, #4]
 8021b18:	6053      	str	r3, [r2, #4]
 8021b1a:	4408      	add	r0, r1
 8021b1c:	6010      	str	r0, [r2, #0]
 8021b1e:	e7da      	b.n	8021ad6 <_free_r+0x22>
 8021b20:	d902      	bls.n	8021b28 <_free_r+0x74>
 8021b22:	230c      	movs	r3, #12
 8021b24:	602b      	str	r3, [r5, #0]
 8021b26:	e7d6      	b.n	8021ad6 <_free_r+0x22>
 8021b28:	6820      	ldr	r0, [r4, #0]
 8021b2a:	1821      	adds	r1, r4, r0
 8021b2c:	428b      	cmp	r3, r1
 8021b2e:	bf04      	itt	eq
 8021b30:	6819      	ldreq	r1, [r3, #0]
 8021b32:	685b      	ldreq	r3, [r3, #4]
 8021b34:	6063      	str	r3, [r4, #4]
 8021b36:	bf04      	itt	eq
 8021b38:	1809      	addeq	r1, r1, r0
 8021b3a:	6021      	streq	r1, [r4, #0]
 8021b3c:	6054      	str	r4, [r2, #4]
 8021b3e:	e7ca      	b.n	8021ad6 <_free_r+0x22>
 8021b40:	bd38      	pop	{r3, r4, r5, pc}
 8021b42:	bf00      	nop
 8021b44:	20017084 	.word	0x20017084

08021b48 <__ssputs_r>:
 8021b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b4c:	688e      	ldr	r6, [r1, #8]
 8021b4e:	461f      	mov	r7, r3
 8021b50:	42be      	cmp	r6, r7
 8021b52:	680b      	ldr	r3, [r1, #0]
 8021b54:	4682      	mov	sl, r0
 8021b56:	460c      	mov	r4, r1
 8021b58:	4690      	mov	r8, r2
 8021b5a:	d82d      	bhi.n	8021bb8 <__ssputs_r+0x70>
 8021b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021b60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021b64:	d026      	beq.n	8021bb4 <__ssputs_r+0x6c>
 8021b66:	6965      	ldr	r5, [r4, #20]
 8021b68:	6909      	ldr	r1, [r1, #16]
 8021b6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021b6e:	eba3 0901 	sub.w	r9, r3, r1
 8021b72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021b76:	1c7b      	adds	r3, r7, #1
 8021b78:	444b      	add	r3, r9
 8021b7a:	106d      	asrs	r5, r5, #1
 8021b7c:	429d      	cmp	r5, r3
 8021b7e:	bf38      	it	cc
 8021b80:	461d      	movcc	r5, r3
 8021b82:	0553      	lsls	r3, r2, #21
 8021b84:	d527      	bpl.n	8021bd6 <__ssputs_r+0x8e>
 8021b86:	4629      	mov	r1, r5
 8021b88:	f7ff f9f6 	bl	8020f78 <_malloc_r>
 8021b8c:	4606      	mov	r6, r0
 8021b8e:	b360      	cbz	r0, 8021bea <__ssputs_r+0xa2>
 8021b90:	6921      	ldr	r1, [r4, #16]
 8021b92:	464a      	mov	r2, r9
 8021b94:	f7ff ff4d 	bl	8021a32 <memcpy>
 8021b98:	89a3      	ldrh	r3, [r4, #12]
 8021b9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021ba2:	81a3      	strh	r3, [r4, #12]
 8021ba4:	6126      	str	r6, [r4, #16]
 8021ba6:	6165      	str	r5, [r4, #20]
 8021ba8:	444e      	add	r6, r9
 8021baa:	eba5 0509 	sub.w	r5, r5, r9
 8021bae:	6026      	str	r6, [r4, #0]
 8021bb0:	60a5      	str	r5, [r4, #8]
 8021bb2:	463e      	mov	r6, r7
 8021bb4:	42be      	cmp	r6, r7
 8021bb6:	d900      	bls.n	8021bba <__ssputs_r+0x72>
 8021bb8:	463e      	mov	r6, r7
 8021bba:	6820      	ldr	r0, [r4, #0]
 8021bbc:	4632      	mov	r2, r6
 8021bbe:	4641      	mov	r1, r8
 8021bc0:	f7ff feb5 	bl	802192e <memmove>
 8021bc4:	68a3      	ldr	r3, [r4, #8]
 8021bc6:	1b9b      	subs	r3, r3, r6
 8021bc8:	60a3      	str	r3, [r4, #8]
 8021bca:	6823      	ldr	r3, [r4, #0]
 8021bcc:	4433      	add	r3, r6
 8021bce:	6023      	str	r3, [r4, #0]
 8021bd0:	2000      	movs	r0, #0
 8021bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021bd6:	462a      	mov	r2, r5
 8021bd8:	f7ff fba6 	bl	8021328 <_realloc_r>
 8021bdc:	4606      	mov	r6, r0
 8021bde:	2800      	cmp	r0, #0
 8021be0:	d1e0      	bne.n	8021ba4 <__ssputs_r+0x5c>
 8021be2:	6921      	ldr	r1, [r4, #16]
 8021be4:	4650      	mov	r0, sl
 8021be6:	f7ff ff65 	bl	8021ab4 <_free_r>
 8021bea:	230c      	movs	r3, #12
 8021bec:	f8ca 3000 	str.w	r3, [sl]
 8021bf0:	89a3      	ldrh	r3, [r4, #12]
 8021bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021bf6:	81a3      	strh	r3, [r4, #12]
 8021bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021bfc:	e7e9      	b.n	8021bd2 <__ssputs_r+0x8a>
	...

08021c00 <_svfiprintf_r>:
 8021c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c04:	4698      	mov	r8, r3
 8021c06:	898b      	ldrh	r3, [r1, #12]
 8021c08:	061b      	lsls	r3, r3, #24
 8021c0a:	b09d      	sub	sp, #116	@ 0x74
 8021c0c:	4607      	mov	r7, r0
 8021c0e:	460d      	mov	r5, r1
 8021c10:	4614      	mov	r4, r2
 8021c12:	d510      	bpl.n	8021c36 <_svfiprintf_r+0x36>
 8021c14:	690b      	ldr	r3, [r1, #16]
 8021c16:	b973      	cbnz	r3, 8021c36 <_svfiprintf_r+0x36>
 8021c18:	2140      	movs	r1, #64	@ 0x40
 8021c1a:	f7ff f9ad 	bl	8020f78 <_malloc_r>
 8021c1e:	6028      	str	r0, [r5, #0]
 8021c20:	6128      	str	r0, [r5, #16]
 8021c22:	b930      	cbnz	r0, 8021c32 <_svfiprintf_r+0x32>
 8021c24:	230c      	movs	r3, #12
 8021c26:	603b      	str	r3, [r7, #0]
 8021c28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021c2c:	b01d      	add	sp, #116	@ 0x74
 8021c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c32:	2340      	movs	r3, #64	@ 0x40
 8021c34:	616b      	str	r3, [r5, #20]
 8021c36:	2300      	movs	r3, #0
 8021c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c3a:	2320      	movs	r3, #32
 8021c3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021c40:	f8cd 800c 	str.w	r8, [sp, #12]
 8021c44:	2330      	movs	r3, #48	@ 0x30
 8021c46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021de4 <_svfiprintf_r+0x1e4>
 8021c4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021c4e:	f04f 0901 	mov.w	r9, #1
 8021c52:	4623      	mov	r3, r4
 8021c54:	469a      	mov	sl, r3
 8021c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021c5a:	b10a      	cbz	r2, 8021c60 <_svfiprintf_r+0x60>
 8021c5c:	2a25      	cmp	r2, #37	@ 0x25
 8021c5e:	d1f9      	bne.n	8021c54 <_svfiprintf_r+0x54>
 8021c60:	ebba 0b04 	subs.w	fp, sl, r4
 8021c64:	d00b      	beq.n	8021c7e <_svfiprintf_r+0x7e>
 8021c66:	465b      	mov	r3, fp
 8021c68:	4622      	mov	r2, r4
 8021c6a:	4629      	mov	r1, r5
 8021c6c:	4638      	mov	r0, r7
 8021c6e:	f7ff ff6b 	bl	8021b48 <__ssputs_r>
 8021c72:	3001      	adds	r0, #1
 8021c74:	f000 80a7 	beq.w	8021dc6 <_svfiprintf_r+0x1c6>
 8021c78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c7a:	445a      	add	r2, fp
 8021c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8021c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	f000 809f 	beq.w	8021dc6 <_svfiprintf_r+0x1c6>
 8021c88:	2300      	movs	r3, #0
 8021c8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021c92:	f10a 0a01 	add.w	sl, sl, #1
 8021c96:	9304      	str	r3, [sp, #16]
 8021c98:	9307      	str	r3, [sp, #28]
 8021c9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021c9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8021ca0:	4654      	mov	r4, sl
 8021ca2:	2205      	movs	r2, #5
 8021ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ca8:	484e      	ldr	r0, [pc, #312]	@ (8021de4 <_svfiprintf_r+0x1e4>)
 8021caa:	f7de fac1 	bl	8000230 <memchr>
 8021cae:	9a04      	ldr	r2, [sp, #16]
 8021cb0:	b9d8      	cbnz	r0, 8021cea <_svfiprintf_r+0xea>
 8021cb2:	06d0      	lsls	r0, r2, #27
 8021cb4:	bf44      	itt	mi
 8021cb6:	2320      	movmi	r3, #32
 8021cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021cbc:	0711      	lsls	r1, r2, #28
 8021cbe:	bf44      	itt	mi
 8021cc0:	232b      	movmi	r3, #43	@ 0x2b
 8021cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8021cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8021ccc:	d015      	beq.n	8021cfa <_svfiprintf_r+0xfa>
 8021cce:	9a07      	ldr	r2, [sp, #28]
 8021cd0:	4654      	mov	r4, sl
 8021cd2:	2000      	movs	r0, #0
 8021cd4:	f04f 0c0a 	mov.w	ip, #10
 8021cd8:	4621      	mov	r1, r4
 8021cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021cde:	3b30      	subs	r3, #48	@ 0x30
 8021ce0:	2b09      	cmp	r3, #9
 8021ce2:	d94b      	bls.n	8021d7c <_svfiprintf_r+0x17c>
 8021ce4:	b1b0      	cbz	r0, 8021d14 <_svfiprintf_r+0x114>
 8021ce6:	9207      	str	r2, [sp, #28]
 8021ce8:	e014      	b.n	8021d14 <_svfiprintf_r+0x114>
 8021cea:	eba0 0308 	sub.w	r3, r0, r8
 8021cee:	fa09 f303 	lsl.w	r3, r9, r3
 8021cf2:	4313      	orrs	r3, r2
 8021cf4:	9304      	str	r3, [sp, #16]
 8021cf6:	46a2      	mov	sl, r4
 8021cf8:	e7d2      	b.n	8021ca0 <_svfiprintf_r+0xa0>
 8021cfa:	9b03      	ldr	r3, [sp, #12]
 8021cfc:	1d19      	adds	r1, r3, #4
 8021cfe:	681b      	ldr	r3, [r3, #0]
 8021d00:	9103      	str	r1, [sp, #12]
 8021d02:	2b00      	cmp	r3, #0
 8021d04:	bfbb      	ittet	lt
 8021d06:	425b      	neglt	r3, r3
 8021d08:	f042 0202 	orrlt.w	r2, r2, #2
 8021d0c:	9307      	strge	r3, [sp, #28]
 8021d0e:	9307      	strlt	r3, [sp, #28]
 8021d10:	bfb8      	it	lt
 8021d12:	9204      	strlt	r2, [sp, #16]
 8021d14:	7823      	ldrb	r3, [r4, #0]
 8021d16:	2b2e      	cmp	r3, #46	@ 0x2e
 8021d18:	d10a      	bne.n	8021d30 <_svfiprintf_r+0x130>
 8021d1a:	7863      	ldrb	r3, [r4, #1]
 8021d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8021d1e:	d132      	bne.n	8021d86 <_svfiprintf_r+0x186>
 8021d20:	9b03      	ldr	r3, [sp, #12]
 8021d22:	1d1a      	adds	r2, r3, #4
 8021d24:	681b      	ldr	r3, [r3, #0]
 8021d26:	9203      	str	r2, [sp, #12]
 8021d28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021d2c:	3402      	adds	r4, #2
 8021d2e:	9305      	str	r3, [sp, #20]
 8021d30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021df4 <_svfiprintf_r+0x1f4>
 8021d34:	7821      	ldrb	r1, [r4, #0]
 8021d36:	2203      	movs	r2, #3
 8021d38:	4650      	mov	r0, sl
 8021d3a:	f7de fa79 	bl	8000230 <memchr>
 8021d3e:	b138      	cbz	r0, 8021d50 <_svfiprintf_r+0x150>
 8021d40:	9b04      	ldr	r3, [sp, #16]
 8021d42:	eba0 000a 	sub.w	r0, r0, sl
 8021d46:	2240      	movs	r2, #64	@ 0x40
 8021d48:	4082      	lsls	r2, r0
 8021d4a:	4313      	orrs	r3, r2
 8021d4c:	3401      	adds	r4, #1
 8021d4e:	9304      	str	r3, [sp, #16]
 8021d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d54:	4824      	ldr	r0, [pc, #144]	@ (8021de8 <_svfiprintf_r+0x1e8>)
 8021d56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021d5a:	2206      	movs	r2, #6
 8021d5c:	f7de fa68 	bl	8000230 <memchr>
 8021d60:	2800      	cmp	r0, #0
 8021d62:	d036      	beq.n	8021dd2 <_svfiprintf_r+0x1d2>
 8021d64:	4b21      	ldr	r3, [pc, #132]	@ (8021dec <_svfiprintf_r+0x1ec>)
 8021d66:	bb1b      	cbnz	r3, 8021db0 <_svfiprintf_r+0x1b0>
 8021d68:	9b03      	ldr	r3, [sp, #12]
 8021d6a:	3307      	adds	r3, #7
 8021d6c:	f023 0307 	bic.w	r3, r3, #7
 8021d70:	3308      	adds	r3, #8
 8021d72:	9303      	str	r3, [sp, #12]
 8021d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021d76:	4433      	add	r3, r6
 8021d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8021d7a:	e76a      	b.n	8021c52 <_svfiprintf_r+0x52>
 8021d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8021d80:	460c      	mov	r4, r1
 8021d82:	2001      	movs	r0, #1
 8021d84:	e7a8      	b.n	8021cd8 <_svfiprintf_r+0xd8>
 8021d86:	2300      	movs	r3, #0
 8021d88:	3401      	adds	r4, #1
 8021d8a:	9305      	str	r3, [sp, #20]
 8021d8c:	4619      	mov	r1, r3
 8021d8e:	f04f 0c0a 	mov.w	ip, #10
 8021d92:	4620      	mov	r0, r4
 8021d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d98:	3a30      	subs	r2, #48	@ 0x30
 8021d9a:	2a09      	cmp	r2, #9
 8021d9c:	d903      	bls.n	8021da6 <_svfiprintf_r+0x1a6>
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d0c6      	beq.n	8021d30 <_svfiprintf_r+0x130>
 8021da2:	9105      	str	r1, [sp, #20]
 8021da4:	e7c4      	b.n	8021d30 <_svfiprintf_r+0x130>
 8021da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8021daa:	4604      	mov	r4, r0
 8021dac:	2301      	movs	r3, #1
 8021dae:	e7f0      	b.n	8021d92 <_svfiprintf_r+0x192>
 8021db0:	ab03      	add	r3, sp, #12
 8021db2:	9300      	str	r3, [sp, #0]
 8021db4:	462a      	mov	r2, r5
 8021db6:	4b0e      	ldr	r3, [pc, #56]	@ (8021df0 <_svfiprintf_r+0x1f0>)
 8021db8:	a904      	add	r1, sp, #16
 8021dba:	4638      	mov	r0, r7
 8021dbc:	f3af 8000 	nop.w
 8021dc0:	1c42      	adds	r2, r0, #1
 8021dc2:	4606      	mov	r6, r0
 8021dc4:	d1d6      	bne.n	8021d74 <_svfiprintf_r+0x174>
 8021dc6:	89ab      	ldrh	r3, [r5, #12]
 8021dc8:	065b      	lsls	r3, r3, #25
 8021dca:	f53f af2d 	bmi.w	8021c28 <_svfiprintf_r+0x28>
 8021dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021dd0:	e72c      	b.n	8021c2c <_svfiprintf_r+0x2c>
 8021dd2:	ab03      	add	r3, sp, #12
 8021dd4:	9300      	str	r3, [sp, #0]
 8021dd6:	462a      	mov	r2, r5
 8021dd8:	4b05      	ldr	r3, [pc, #20]	@ (8021df0 <_svfiprintf_r+0x1f0>)
 8021dda:	a904      	add	r1, sp, #16
 8021ddc:	4638      	mov	r0, r7
 8021dde:	f000 f9bb 	bl	8022158 <_printf_i>
 8021de2:	e7ed      	b.n	8021dc0 <_svfiprintf_r+0x1c0>
 8021de4:	08025c54 	.word	0x08025c54
 8021de8:	08025c5e 	.word	0x08025c5e
 8021dec:	00000000 	.word	0x00000000
 8021df0:	08021b49 	.word	0x08021b49
 8021df4:	08025c5a 	.word	0x08025c5a

08021df8 <__sfputc_r>:
 8021df8:	6893      	ldr	r3, [r2, #8]
 8021dfa:	3b01      	subs	r3, #1
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	b410      	push	{r4}
 8021e00:	6093      	str	r3, [r2, #8]
 8021e02:	da08      	bge.n	8021e16 <__sfputc_r+0x1e>
 8021e04:	6994      	ldr	r4, [r2, #24]
 8021e06:	42a3      	cmp	r3, r4
 8021e08:	db01      	blt.n	8021e0e <__sfputc_r+0x16>
 8021e0a:	290a      	cmp	r1, #10
 8021e0c:	d103      	bne.n	8021e16 <__sfputc_r+0x1e>
 8021e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e12:	f7ff bbe1 	b.w	80215d8 <__swbuf_r>
 8021e16:	6813      	ldr	r3, [r2, #0]
 8021e18:	1c58      	adds	r0, r3, #1
 8021e1a:	6010      	str	r0, [r2, #0]
 8021e1c:	7019      	strb	r1, [r3, #0]
 8021e1e:	4608      	mov	r0, r1
 8021e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e24:	4770      	bx	lr

08021e26 <__sfputs_r>:
 8021e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e28:	4606      	mov	r6, r0
 8021e2a:	460f      	mov	r7, r1
 8021e2c:	4614      	mov	r4, r2
 8021e2e:	18d5      	adds	r5, r2, r3
 8021e30:	42ac      	cmp	r4, r5
 8021e32:	d101      	bne.n	8021e38 <__sfputs_r+0x12>
 8021e34:	2000      	movs	r0, #0
 8021e36:	e007      	b.n	8021e48 <__sfputs_r+0x22>
 8021e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e3c:	463a      	mov	r2, r7
 8021e3e:	4630      	mov	r0, r6
 8021e40:	f7ff ffda 	bl	8021df8 <__sfputc_r>
 8021e44:	1c43      	adds	r3, r0, #1
 8021e46:	d1f3      	bne.n	8021e30 <__sfputs_r+0xa>
 8021e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021e4c <_vfiprintf_r>:
 8021e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e50:	460d      	mov	r5, r1
 8021e52:	b09d      	sub	sp, #116	@ 0x74
 8021e54:	4614      	mov	r4, r2
 8021e56:	4698      	mov	r8, r3
 8021e58:	4606      	mov	r6, r0
 8021e5a:	b118      	cbz	r0, 8021e64 <_vfiprintf_r+0x18>
 8021e5c:	6a03      	ldr	r3, [r0, #32]
 8021e5e:	b90b      	cbnz	r3, 8021e64 <_vfiprintf_r+0x18>
 8021e60:	f7ff fa4a 	bl	80212f8 <__sinit>
 8021e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021e66:	07d9      	lsls	r1, r3, #31
 8021e68:	d405      	bmi.n	8021e76 <_vfiprintf_r+0x2a>
 8021e6a:	89ab      	ldrh	r3, [r5, #12]
 8021e6c:	059a      	lsls	r2, r3, #22
 8021e6e:	d402      	bmi.n	8021e76 <_vfiprintf_r+0x2a>
 8021e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021e72:	f7ff fddc 	bl	8021a2e <__retarget_lock_acquire_recursive>
 8021e76:	89ab      	ldrh	r3, [r5, #12]
 8021e78:	071b      	lsls	r3, r3, #28
 8021e7a:	d501      	bpl.n	8021e80 <_vfiprintf_r+0x34>
 8021e7c:	692b      	ldr	r3, [r5, #16]
 8021e7e:	b99b      	cbnz	r3, 8021ea8 <_vfiprintf_r+0x5c>
 8021e80:	4629      	mov	r1, r5
 8021e82:	4630      	mov	r0, r6
 8021e84:	f7ff fbe6 	bl	8021654 <__swsetup_r>
 8021e88:	b170      	cbz	r0, 8021ea8 <_vfiprintf_r+0x5c>
 8021e8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021e8c:	07dc      	lsls	r4, r3, #31
 8021e8e:	d504      	bpl.n	8021e9a <_vfiprintf_r+0x4e>
 8021e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021e94:	b01d      	add	sp, #116	@ 0x74
 8021e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e9a:	89ab      	ldrh	r3, [r5, #12]
 8021e9c:	0598      	lsls	r0, r3, #22
 8021e9e:	d4f7      	bmi.n	8021e90 <_vfiprintf_r+0x44>
 8021ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021ea2:	f7ff fdc5 	bl	8021a30 <__retarget_lock_release_recursive>
 8021ea6:	e7f3      	b.n	8021e90 <_vfiprintf_r+0x44>
 8021ea8:	2300      	movs	r3, #0
 8021eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8021eac:	2320      	movs	r3, #32
 8021eae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8021eb6:	2330      	movs	r3, #48	@ 0x30
 8021eb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022068 <_vfiprintf_r+0x21c>
 8021ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021ec0:	f04f 0901 	mov.w	r9, #1
 8021ec4:	4623      	mov	r3, r4
 8021ec6:	469a      	mov	sl, r3
 8021ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021ecc:	b10a      	cbz	r2, 8021ed2 <_vfiprintf_r+0x86>
 8021ece:	2a25      	cmp	r2, #37	@ 0x25
 8021ed0:	d1f9      	bne.n	8021ec6 <_vfiprintf_r+0x7a>
 8021ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8021ed6:	d00b      	beq.n	8021ef0 <_vfiprintf_r+0xa4>
 8021ed8:	465b      	mov	r3, fp
 8021eda:	4622      	mov	r2, r4
 8021edc:	4629      	mov	r1, r5
 8021ede:	4630      	mov	r0, r6
 8021ee0:	f7ff ffa1 	bl	8021e26 <__sfputs_r>
 8021ee4:	3001      	adds	r0, #1
 8021ee6:	f000 80a7 	beq.w	8022038 <_vfiprintf_r+0x1ec>
 8021eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021eec:	445a      	add	r2, fp
 8021eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8021ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8021ef4:	2b00      	cmp	r3, #0
 8021ef6:	f000 809f 	beq.w	8022038 <_vfiprintf_r+0x1ec>
 8021efa:	2300      	movs	r3, #0
 8021efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f04:	f10a 0a01 	add.w	sl, sl, #1
 8021f08:	9304      	str	r3, [sp, #16]
 8021f0a:	9307      	str	r3, [sp, #28]
 8021f0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021f10:	931a      	str	r3, [sp, #104]	@ 0x68
 8021f12:	4654      	mov	r4, sl
 8021f14:	2205      	movs	r2, #5
 8021f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f1a:	4853      	ldr	r0, [pc, #332]	@ (8022068 <_vfiprintf_r+0x21c>)
 8021f1c:	f7de f988 	bl	8000230 <memchr>
 8021f20:	9a04      	ldr	r2, [sp, #16]
 8021f22:	b9d8      	cbnz	r0, 8021f5c <_vfiprintf_r+0x110>
 8021f24:	06d1      	lsls	r1, r2, #27
 8021f26:	bf44      	itt	mi
 8021f28:	2320      	movmi	r3, #32
 8021f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021f2e:	0713      	lsls	r3, r2, #28
 8021f30:	bf44      	itt	mi
 8021f32:	232b      	movmi	r3, #43	@ 0x2b
 8021f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021f38:	f89a 3000 	ldrb.w	r3, [sl]
 8021f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8021f3e:	d015      	beq.n	8021f6c <_vfiprintf_r+0x120>
 8021f40:	9a07      	ldr	r2, [sp, #28]
 8021f42:	4654      	mov	r4, sl
 8021f44:	2000      	movs	r0, #0
 8021f46:	f04f 0c0a 	mov.w	ip, #10
 8021f4a:	4621      	mov	r1, r4
 8021f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021f50:	3b30      	subs	r3, #48	@ 0x30
 8021f52:	2b09      	cmp	r3, #9
 8021f54:	d94b      	bls.n	8021fee <_vfiprintf_r+0x1a2>
 8021f56:	b1b0      	cbz	r0, 8021f86 <_vfiprintf_r+0x13a>
 8021f58:	9207      	str	r2, [sp, #28]
 8021f5a:	e014      	b.n	8021f86 <_vfiprintf_r+0x13a>
 8021f5c:	eba0 0308 	sub.w	r3, r0, r8
 8021f60:	fa09 f303 	lsl.w	r3, r9, r3
 8021f64:	4313      	orrs	r3, r2
 8021f66:	9304      	str	r3, [sp, #16]
 8021f68:	46a2      	mov	sl, r4
 8021f6a:	e7d2      	b.n	8021f12 <_vfiprintf_r+0xc6>
 8021f6c:	9b03      	ldr	r3, [sp, #12]
 8021f6e:	1d19      	adds	r1, r3, #4
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	9103      	str	r1, [sp, #12]
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	bfbb      	ittet	lt
 8021f78:	425b      	neglt	r3, r3
 8021f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8021f7e:	9307      	strge	r3, [sp, #28]
 8021f80:	9307      	strlt	r3, [sp, #28]
 8021f82:	bfb8      	it	lt
 8021f84:	9204      	strlt	r2, [sp, #16]
 8021f86:	7823      	ldrb	r3, [r4, #0]
 8021f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8021f8a:	d10a      	bne.n	8021fa2 <_vfiprintf_r+0x156>
 8021f8c:	7863      	ldrb	r3, [r4, #1]
 8021f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021f90:	d132      	bne.n	8021ff8 <_vfiprintf_r+0x1ac>
 8021f92:	9b03      	ldr	r3, [sp, #12]
 8021f94:	1d1a      	adds	r2, r3, #4
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	9203      	str	r2, [sp, #12]
 8021f9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021f9e:	3402      	adds	r4, #2
 8021fa0:	9305      	str	r3, [sp, #20]
 8021fa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022078 <_vfiprintf_r+0x22c>
 8021fa6:	7821      	ldrb	r1, [r4, #0]
 8021fa8:	2203      	movs	r2, #3
 8021faa:	4650      	mov	r0, sl
 8021fac:	f7de f940 	bl	8000230 <memchr>
 8021fb0:	b138      	cbz	r0, 8021fc2 <_vfiprintf_r+0x176>
 8021fb2:	9b04      	ldr	r3, [sp, #16]
 8021fb4:	eba0 000a 	sub.w	r0, r0, sl
 8021fb8:	2240      	movs	r2, #64	@ 0x40
 8021fba:	4082      	lsls	r2, r0
 8021fbc:	4313      	orrs	r3, r2
 8021fbe:	3401      	adds	r4, #1
 8021fc0:	9304      	str	r3, [sp, #16]
 8021fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021fc6:	4829      	ldr	r0, [pc, #164]	@ (802206c <_vfiprintf_r+0x220>)
 8021fc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021fcc:	2206      	movs	r2, #6
 8021fce:	f7de f92f 	bl	8000230 <memchr>
 8021fd2:	2800      	cmp	r0, #0
 8021fd4:	d03f      	beq.n	8022056 <_vfiprintf_r+0x20a>
 8021fd6:	4b26      	ldr	r3, [pc, #152]	@ (8022070 <_vfiprintf_r+0x224>)
 8021fd8:	bb1b      	cbnz	r3, 8022022 <_vfiprintf_r+0x1d6>
 8021fda:	9b03      	ldr	r3, [sp, #12]
 8021fdc:	3307      	adds	r3, #7
 8021fde:	f023 0307 	bic.w	r3, r3, #7
 8021fe2:	3308      	adds	r3, #8
 8021fe4:	9303      	str	r3, [sp, #12]
 8021fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021fe8:	443b      	add	r3, r7
 8021fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8021fec:	e76a      	b.n	8021ec4 <_vfiprintf_r+0x78>
 8021fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8021ff2:	460c      	mov	r4, r1
 8021ff4:	2001      	movs	r0, #1
 8021ff6:	e7a8      	b.n	8021f4a <_vfiprintf_r+0xfe>
 8021ff8:	2300      	movs	r3, #0
 8021ffa:	3401      	adds	r4, #1
 8021ffc:	9305      	str	r3, [sp, #20]
 8021ffe:	4619      	mov	r1, r3
 8022000:	f04f 0c0a 	mov.w	ip, #10
 8022004:	4620      	mov	r0, r4
 8022006:	f810 2b01 	ldrb.w	r2, [r0], #1
 802200a:	3a30      	subs	r2, #48	@ 0x30
 802200c:	2a09      	cmp	r2, #9
 802200e:	d903      	bls.n	8022018 <_vfiprintf_r+0x1cc>
 8022010:	2b00      	cmp	r3, #0
 8022012:	d0c6      	beq.n	8021fa2 <_vfiprintf_r+0x156>
 8022014:	9105      	str	r1, [sp, #20]
 8022016:	e7c4      	b.n	8021fa2 <_vfiprintf_r+0x156>
 8022018:	fb0c 2101 	mla	r1, ip, r1, r2
 802201c:	4604      	mov	r4, r0
 802201e:	2301      	movs	r3, #1
 8022020:	e7f0      	b.n	8022004 <_vfiprintf_r+0x1b8>
 8022022:	ab03      	add	r3, sp, #12
 8022024:	9300      	str	r3, [sp, #0]
 8022026:	462a      	mov	r2, r5
 8022028:	4b12      	ldr	r3, [pc, #72]	@ (8022074 <_vfiprintf_r+0x228>)
 802202a:	a904      	add	r1, sp, #16
 802202c:	4630      	mov	r0, r6
 802202e:	f3af 8000 	nop.w
 8022032:	4607      	mov	r7, r0
 8022034:	1c78      	adds	r0, r7, #1
 8022036:	d1d6      	bne.n	8021fe6 <_vfiprintf_r+0x19a>
 8022038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802203a:	07d9      	lsls	r1, r3, #31
 802203c:	d405      	bmi.n	802204a <_vfiprintf_r+0x1fe>
 802203e:	89ab      	ldrh	r3, [r5, #12]
 8022040:	059a      	lsls	r2, r3, #22
 8022042:	d402      	bmi.n	802204a <_vfiprintf_r+0x1fe>
 8022044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022046:	f7ff fcf3 	bl	8021a30 <__retarget_lock_release_recursive>
 802204a:	89ab      	ldrh	r3, [r5, #12]
 802204c:	065b      	lsls	r3, r3, #25
 802204e:	f53f af1f 	bmi.w	8021e90 <_vfiprintf_r+0x44>
 8022052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022054:	e71e      	b.n	8021e94 <_vfiprintf_r+0x48>
 8022056:	ab03      	add	r3, sp, #12
 8022058:	9300      	str	r3, [sp, #0]
 802205a:	462a      	mov	r2, r5
 802205c:	4b05      	ldr	r3, [pc, #20]	@ (8022074 <_vfiprintf_r+0x228>)
 802205e:	a904      	add	r1, sp, #16
 8022060:	4630      	mov	r0, r6
 8022062:	f000 f879 	bl	8022158 <_printf_i>
 8022066:	e7e4      	b.n	8022032 <_vfiprintf_r+0x1e6>
 8022068:	08025c54 	.word	0x08025c54
 802206c:	08025c5e 	.word	0x08025c5e
 8022070:	00000000 	.word	0x00000000
 8022074:	08021e27 	.word	0x08021e27
 8022078:	08025c5a 	.word	0x08025c5a

0802207c <_printf_common>:
 802207c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022080:	4616      	mov	r6, r2
 8022082:	4698      	mov	r8, r3
 8022084:	688a      	ldr	r2, [r1, #8]
 8022086:	690b      	ldr	r3, [r1, #16]
 8022088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802208c:	4293      	cmp	r3, r2
 802208e:	bfb8      	it	lt
 8022090:	4613      	movlt	r3, r2
 8022092:	6033      	str	r3, [r6, #0]
 8022094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022098:	4607      	mov	r7, r0
 802209a:	460c      	mov	r4, r1
 802209c:	b10a      	cbz	r2, 80220a2 <_printf_common+0x26>
 802209e:	3301      	adds	r3, #1
 80220a0:	6033      	str	r3, [r6, #0]
 80220a2:	6823      	ldr	r3, [r4, #0]
 80220a4:	0699      	lsls	r1, r3, #26
 80220a6:	bf42      	ittt	mi
 80220a8:	6833      	ldrmi	r3, [r6, #0]
 80220aa:	3302      	addmi	r3, #2
 80220ac:	6033      	strmi	r3, [r6, #0]
 80220ae:	6825      	ldr	r5, [r4, #0]
 80220b0:	f015 0506 	ands.w	r5, r5, #6
 80220b4:	d106      	bne.n	80220c4 <_printf_common+0x48>
 80220b6:	f104 0a19 	add.w	sl, r4, #25
 80220ba:	68e3      	ldr	r3, [r4, #12]
 80220bc:	6832      	ldr	r2, [r6, #0]
 80220be:	1a9b      	subs	r3, r3, r2
 80220c0:	42ab      	cmp	r3, r5
 80220c2:	dc26      	bgt.n	8022112 <_printf_common+0x96>
 80220c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80220c8:	6822      	ldr	r2, [r4, #0]
 80220ca:	3b00      	subs	r3, #0
 80220cc:	bf18      	it	ne
 80220ce:	2301      	movne	r3, #1
 80220d0:	0692      	lsls	r2, r2, #26
 80220d2:	d42b      	bmi.n	802212c <_printf_common+0xb0>
 80220d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80220d8:	4641      	mov	r1, r8
 80220da:	4638      	mov	r0, r7
 80220dc:	47c8      	blx	r9
 80220de:	3001      	adds	r0, #1
 80220e0:	d01e      	beq.n	8022120 <_printf_common+0xa4>
 80220e2:	6823      	ldr	r3, [r4, #0]
 80220e4:	6922      	ldr	r2, [r4, #16]
 80220e6:	f003 0306 	and.w	r3, r3, #6
 80220ea:	2b04      	cmp	r3, #4
 80220ec:	bf02      	ittt	eq
 80220ee:	68e5      	ldreq	r5, [r4, #12]
 80220f0:	6833      	ldreq	r3, [r6, #0]
 80220f2:	1aed      	subeq	r5, r5, r3
 80220f4:	68a3      	ldr	r3, [r4, #8]
 80220f6:	bf0c      	ite	eq
 80220f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80220fc:	2500      	movne	r5, #0
 80220fe:	4293      	cmp	r3, r2
 8022100:	bfc4      	itt	gt
 8022102:	1a9b      	subgt	r3, r3, r2
 8022104:	18ed      	addgt	r5, r5, r3
 8022106:	2600      	movs	r6, #0
 8022108:	341a      	adds	r4, #26
 802210a:	42b5      	cmp	r5, r6
 802210c:	d11a      	bne.n	8022144 <_printf_common+0xc8>
 802210e:	2000      	movs	r0, #0
 8022110:	e008      	b.n	8022124 <_printf_common+0xa8>
 8022112:	2301      	movs	r3, #1
 8022114:	4652      	mov	r2, sl
 8022116:	4641      	mov	r1, r8
 8022118:	4638      	mov	r0, r7
 802211a:	47c8      	blx	r9
 802211c:	3001      	adds	r0, #1
 802211e:	d103      	bne.n	8022128 <_printf_common+0xac>
 8022120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022128:	3501      	adds	r5, #1
 802212a:	e7c6      	b.n	80220ba <_printf_common+0x3e>
 802212c:	18e1      	adds	r1, r4, r3
 802212e:	1c5a      	adds	r2, r3, #1
 8022130:	2030      	movs	r0, #48	@ 0x30
 8022132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022136:	4422      	add	r2, r4
 8022138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802213c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022140:	3302      	adds	r3, #2
 8022142:	e7c7      	b.n	80220d4 <_printf_common+0x58>
 8022144:	2301      	movs	r3, #1
 8022146:	4622      	mov	r2, r4
 8022148:	4641      	mov	r1, r8
 802214a:	4638      	mov	r0, r7
 802214c:	47c8      	blx	r9
 802214e:	3001      	adds	r0, #1
 8022150:	d0e6      	beq.n	8022120 <_printf_common+0xa4>
 8022152:	3601      	adds	r6, #1
 8022154:	e7d9      	b.n	802210a <_printf_common+0x8e>
	...

08022158 <_printf_i>:
 8022158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802215c:	7e0f      	ldrb	r7, [r1, #24]
 802215e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022160:	2f78      	cmp	r7, #120	@ 0x78
 8022162:	4691      	mov	r9, r2
 8022164:	4680      	mov	r8, r0
 8022166:	460c      	mov	r4, r1
 8022168:	469a      	mov	sl, r3
 802216a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802216e:	d807      	bhi.n	8022180 <_printf_i+0x28>
 8022170:	2f62      	cmp	r7, #98	@ 0x62
 8022172:	d80a      	bhi.n	802218a <_printf_i+0x32>
 8022174:	2f00      	cmp	r7, #0
 8022176:	f000 80d2 	beq.w	802231e <_printf_i+0x1c6>
 802217a:	2f58      	cmp	r7, #88	@ 0x58
 802217c:	f000 80b9 	beq.w	80222f2 <_printf_i+0x19a>
 8022180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022188:	e03a      	b.n	8022200 <_printf_i+0xa8>
 802218a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802218e:	2b15      	cmp	r3, #21
 8022190:	d8f6      	bhi.n	8022180 <_printf_i+0x28>
 8022192:	a101      	add	r1, pc, #4	@ (adr r1, 8022198 <_printf_i+0x40>)
 8022194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022198:	080221f1 	.word	0x080221f1
 802219c:	08022205 	.word	0x08022205
 80221a0:	08022181 	.word	0x08022181
 80221a4:	08022181 	.word	0x08022181
 80221a8:	08022181 	.word	0x08022181
 80221ac:	08022181 	.word	0x08022181
 80221b0:	08022205 	.word	0x08022205
 80221b4:	08022181 	.word	0x08022181
 80221b8:	08022181 	.word	0x08022181
 80221bc:	08022181 	.word	0x08022181
 80221c0:	08022181 	.word	0x08022181
 80221c4:	08022305 	.word	0x08022305
 80221c8:	0802222f 	.word	0x0802222f
 80221cc:	080222bf 	.word	0x080222bf
 80221d0:	08022181 	.word	0x08022181
 80221d4:	08022181 	.word	0x08022181
 80221d8:	08022327 	.word	0x08022327
 80221dc:	08022181 	.word	0x08022181
 80221e0:	0802222f 	.word	0x0802222f
 80221e4:	08022181 	.word	0x08022181
 80221e8:	08022181 	.word	0x08022181
 80221ec:	080222c7 	.word	0x080222c7
 80221f0:	6833      	ldr	r3, [r6, #0]
 80221f2:	1d1a      	adds	r2, r3, #4
 80221f4:	681b      	ldr	r3, [r3, #0]
 80221f6:	6032      	str	r2, [r6, #0]
 80221f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80221fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022200:	2301      	movs	r3, #1
 8022202:	e09d      	b.n	8022340 <_printf_i+0x1e8>
 8022204:	6833      	ldr	r3, [r6, #0]
 8022206:	6820      	ldr	r0, [r4, #0]
 8022208:	1d19      	adds	r1, r3, #4
 802220a:	6031      	str	r1, [r6, #0]
 802220c:	0606      	lsls	r6, r0, #24
 802220e:	d501      	bpl.n	8022214 <_printf_i+0xbc>
 8022210:	681d      	ldr	r5, [r3, #0]
 8022212:	e003      	b.n	802221c <_printf_i+0xc4>
 8022214:	0645      	lsls	r5, r0, #25
 8022216:	d5fb      	bpl.n	8022210 <_printf_i+0xb8>
 8022218:	f9b3 5000 	ldrsh.w	r5, [r3]
 802221c:	2d00      	cmp	r5, #0
 802221e:	da03      	bge.n	8022228 <_printf_i+0xd0>
 8022220:	232d      	movs	r3, #45	@ 0x2d
 8022222:	426d      	negs	r5, r5
 8022224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022228:	4859      	ldr	r0, [pc, #356]	@ (8022390 <_printf_i+0x238>)
 802222a:	230a      	movs	r3, #10
 802222c:	e011      	b.n	8022252 <_printf_i+0xfa>
 802222e:	6821      	ldr	r1, [r4, #0]
 8022230:	6833      	ldr	r3, [r6, #0]
 8022232:	0608      	lsls	r0, r1, #24
 8022234:	f853 5b04 	ldr.w	r5, [r3], #4
 8022238:	d402      	bmi.n	8022240 <_printf_i+0xe8>
 802223a:	0649      	lsls	r1, r1, #25
 802223c:	bf48      	it	mi
 802223e:	b2ad      	uxthmi	r5, r5
 8022240:	2f6f      	cmp	r7, #111	@ 0x6f
 8022242:	4853      	ldr	r0, [pc, #332]	@ (8022390 <_printf_i+0x238>)
 8022244:	6033      	str	r3, [r6, #0]
 8022246:	bf14      	ite	ne
 8022248:	230a      	movne	r3, #10
 802224a:	2308      	moveq	r3, #8
 802224c:	2100      	movs	r1, #0
 802224e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022252:	6866      	ldr	r6, [r4, #4]
 8022254:	60a6      	str	r6, [r4, #8]
 8022256:	2e00      	cmp	r6, #0
 8022258:	bfa2      	ittt	ge
 802225a:	6821      	ldrge	r1, [r4, #0]
 802225c:	f021 0104 	bicge.w	r1, r1, #4
 8022260:	6021      	strge	r1, [r4, #0]
 8022262:	b90d      	cbnz	r5, 8022268 <_printf_i+0x110>
 8022264:	2e00      	cmp	r6, #0
 8022266:	d04b      	beq.n	8022300 <_printf_i+0x1a8>
 8022268:	4616      	mov	r6, r2
 802226a:	fbb5 f1f3 	udiv	r1, r5, r3
 802226e:	fb03 5711 	mls	r7, r3, r1, r5
 8022272:	5dc7      	ldrb	r7, [r0, r7]
 8022274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022278:	462f      	mov	r7, r5
 802227a:	42bb      	cmp	r3, r7
 802227c:	460d      	mov	r5, r1
 802227e:	d9f4      	bls.n	802226a <_printf_i+0x112>
 8022280:	2b08      	cmp	r3, #8
 8022282:	d10b      	bne.n	802229c <_printf_i+0x144>
 8022284:	6823      	ldr	r3, [r4, #0]
 8022286:	07df      	lsls	r7, r3, #31
 8022288:	d508      	bpl.n	802229c <_printf_i+0x144>
 802228a:	6923      	ldr	r3, [r4, #16]
 802228c:	6861      	ldr	r1, [r4, #4]
 802228e:	4299      	cmp	r1, r3
 8022290:	bfde      	ittt	le
 8022292:	2330      	movle	r3, #48	@ 0x30
 8022294:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022298:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 802229c:	1b92      	subs	r2, r2, r6
 802229e:	6122      	str	r2, [r4, #16]
 80222a0:	f8cd a000 	str.w	sl, [sp]
 80222a4:	464b      	mov	r3, r9
 80222a6:	aa03      	add	r2, sp, #12
 80222a8:	4621      	mov	r1, r4
 80222aa:	4640      	mov	r0, r8
 80222ac:	f7ff fee6 	bl	802207c <_printf_common>
 80222b0:	3001      	adds	r0, #1
 80222b2:	d14a      	bne.n	802234a <_printf_i+0x1f2>
 80222b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80222b8:	b004      	add	sp, #16
 80222ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222be:	6823      	ldr	r3, [r4, #0]
 80222c0:	f043 0320 	orr.w	r3, r3, #32
 80222c4:	6023      	str	r3, [r4, #0]
 80222c6:	4833      	ldr	r0, [pc, #204]	@ (8022394 <_printf_i+0x23c>)
 80222c8:	2778      	movs	r7, #120	@ 0x78
 80222ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80222ce:	6823      	ldr	r3, [r4, #0]
 80222d0:	6831      	ldr	r1, [r6, #0]
 80222d2:	061f      	lsls	r7, r3, #24
 80222d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80222d8:	d402      	bmi.n	80222e0 <_printf_i+0x188>
 80222da:	065f      	lsls	r7, r3, #25
 80222dc:	bf48      	it	mi
 80222de:	b2ad      	uxthmi	r5, r5
 80222e0:	6031      	str	r1, [r6, #0]
 80222e2:	07d9      	lsls	r1, r3, #31
 80222e4:	bf44      	itt	mi
 80222e6:	f043 0320 	orrmi.w	r3, r3, #32
 80222ea:	6023      	strmi	r3, [r4, #0]
 80222ec:	b11d      	cbz	r5, 80222f6 <_printf_i+0x19e>
 80222ee:	2310      	movs	r3, #16
 80222f0:	e7ac      	b.n	802224c <_printf_i+0xf4>
 80222f2:	4827      	ldr	r0, [pc, #156]	@ (8022390 <_printf_i+0x238>)
 80222f4:	e7e9      	b.n	80222ca <_printf_i+0x172>
 80222f6:	6823      	ldr	r3, [r4, #0]
 80222f8:	f023 0320 	bic.w	r3, r3, #32
 80222fc:	6023      	str	r3, [r4, #0]
 80222fe:	e7f6      	b.n	80222ee <_printf_i+0x196>
 8022300:	4616      	mov	r6, r2
 8022302:	e7bd      	b.n	8022280 <_printf_i+0x128>
 8022304:	6833      	ldr	r3, [r6, #0]
 8022306:	6825      	ldr	r5, [r4, #0]
 8022308:	6961      	ldr	r1, [r4, #20]
 802230a:	1d18      	adds	r0, r3, #4
 802230c:	6030      	str	r0, [r6, #0]
 802230e:	062e      	lsls	r6, r5, #24
 8022310:	681b      	ldr	r3, [r3, #0]
 8022312:	d501      	bpl.n	8022318 <_printf_i+0x1c0>
 8022314:	6019      	str	r1, [r3, #0]
 8022316:	e002      	b.n	802231e <_printf_i+0x1c6>
 8022318:	0668      	lsls	r0, r5, #25
 802231a:	d5fb      	bpl.n	8022314 <_printf_i+0x1bc>
 802231c:	8019      	strh	r1, [r3, #0]
 802231e:	2300      	movs	r3, #0
 8022320:	6123      	str	r3, [r4, #16]
 8022322:	4616      	mov	r6, r2
 8022324:	e7bc      	b.n	80222a0 <_printf_i+0x148>
 8022326:	6833      	ldr	r3, [r6, #0]
 8022328:	1d1a      	adds	r2, r3, #4
 802232a:	6032      	str	r2, [r6, #0]
 802232c:	681e      	ldr	r6, [r3, #0]
 802232e:	6862      	ldr	r2, [r4, #4]
 8022330:	2100      	movs	r1, #0
 8022332:	4630      	mov	r0, r6
 8022334:	f7dd ff7c 	bl	8000230 <memchr>
 8022338:	b108      	cbz	r0, 802233e <_printf_i+0x1e6>
 802233a:	1b80      	subs	r0, r0, r6
 802233c:	6060      	str	r0, [r4, #4]
 802233e:	6863      	ldr	r3, [r4, #4]
 8022340:	6123      	str	r3, [r4, #16]
 8022342:	2300      	movs	r3, #0
 8022344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022348:	e7aa      	b.n	80222a0 <_printf_i+0x148>
 802234a:	6923      	ldr	r3, [r4, #16]
 802234c:	4632      	mov	r2, r6
 802234e:	4649      	mov	r1, r9
 8022350:	4640      	mov	r0, r8
 8022352:	47d0      	blx	sl
 8022354:	3001      	adds	r0, #1
 8022356:	d0ad      	beq.n	80222b4 <_printf_i+0x15c>
 8022358:	6823      	ldr	r3, [r4, #0]
 802235a:	079b      	lsls	r3, r3, #30
 802235c:	d413      	bmi.n	8022386 <_printf_i+0x22e>
 802235e:	68e0      	ldr	r0, [r4, #12]
 8022360:	9b03      	ldr	r3, [sp, #12]
 8022362:	4298      	cmp	r0, r3
 8022364:	bfb8      	it	lt
 8022366:	4618      	movlt	r0, r3
 8022368:	e7a6      	b.n	80222b8 <_printf_i+0x160>
 802236a:	2301      	movs	r3, #1
 802236c:	4632      	mov	r2, r6
 802236e:	4649      	mov	r1, r9
 8022370:	4640      	mov	r0, r8
 8022372:	47d0      	blx	sl
 8022374:	3001      	adds	r0, #1
 8022376:	d09d      	beq.n	80222b4 <_printf_i+0x15c>
 8022378:	3501      	adds	r5, #1
 802237a:	68e3      	ldr	r3, [r4, #12]
 802237c:	9903      	ldr	r1, [sp, #12]
 802237e:	1a5b      	subs	r3, r3, r1
 8022380:	42ab      	cmp	r3, r5
 8022382:	dcf2      	bgt.n	802236a <_printf_i+0x212>
 8022384:	e7eb      	b.n	802235e <_printf_i+0x206>
 8022386:	2500      	movs	r5, #0
 8022388:	f104 0619 	add.w	r6, r4, #25
 802238c:	e7f5      	b.n	802237a <_printf_i+0x222>
 802238e:	bf00      	nop
 8022390:	08025c65 	.word	0x08025c65
 8022394:	08025c76 	.word	0x08025c76

08022398 <__sflush_r>:
 8022398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802239c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223a0:	0716      	lsls	r6, r2, #28
 80223a2:	4605      	mov	r5, r0
 80223a4:	460c      	mov	r4, r1
 80223a6:	d454      	bmi.n	8022452 <__sflush_r+0xba>
 80223a8:	684b      	ldr	r3, [r1, #4]
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	dc02      	bgt.n	80223b4 <__sflush_r+0x1c>
 80223ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80223b0:	2b00      	cmp	r3, #0
 80223b2:	dd48      	ble.n	8022446 <__sflush_r+0xae>
 80223b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80223b6:	2e00      	cmp	r6, #0
 80223b8:	d045      	beq.n	8022446 <__sflush_r+0xae>
 80223ba:	2300      	movs	r3, #0
 80223bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80223c0:	682f      	ldr	r7, [r5, #0]
 80223c2:	6a21      	ldr	r1, [r4, #32]
 80223c4:	602b      	str	r3, [r5, #0]
 80223c6:	d030      	beq.n	802242a <__sflush_r+0x92>
 80223c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80223ca:	89a3      	ldrh	r3, [r4, #12]
 80223cc:	0759      	lsls	r1, r3, #29
 80223ce:	d505      	bpl.n	80223dc <__sflush_r+0x44>
 80223d0:	6863      	ldr	r3, [r4, #4]
 80223d2:	1ad2      	subs	r2, r2, r3
 80223d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80223d6:	b10b      	cbz	r3, 80223dc <__sflush_r+0x44>
 80223d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80223da:	1ad2      	subs	r2, r2, r3
 80223dc:	2300      	movs	r3, #0
 80223de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80223e0:	6a21      	ldr	r1, [r4, #32]
 80223e2:	4628      	mov	r0, r5
 80223e4:	47b0      	blx	r6
 80223e6:	1c43      	adds	r3, r0, #1
 80223e8:	89a3      	ldrh	r3, [r4, #12]
 80223ea:	d106      	bne.n	80223fa <__sflush_r+0x62>
 80223ec:	6829      	ldr	r1, [r5, #0]
 80223ee:	291d      	cmp	r1, #29
 80223f0:	d82b      	bhi.n	802244a <__sflush_r+0xb2>
 80223f2:	4a2a      	ldr	r2, [pc, #168]	@ (802249c <__sflush_r+0x104>)
 80223f4:	410a      	asrs	r2, r1
 80223f6:	07d6      	lsls	r6, r2, #31
 80223f8:	d427      	bmi.n	802244a <__sflush_r+0xb2>
 80223fa:	2200      	movs	r2, #0
 80223fc:	6062      	str	r2, [r4, #4]
 80223fe:	04d9      	lsls	r1, r3, #19
 8022400:	6922      	ldr	r2, [r4, #16]
 8022402:	6022      	str	r2, [r4, #0]
 8022404:	d504      	bpl.n	8022410 <__sflush_r+0x78>
 8022406:	1c42      	adds	r2, r0, #1
 8022408:	d101      	bne.n	802240e <__sflush_r+0x76>
 802240a:	682b      	ldr	r3, [r5, #0]
 802240c:	b903      	cbnz	r3, 8022410 <__sflush_r+0x78>
 802240e:	6560      	str	r0, [r4, #84]	@ 0x54
 8022410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022412:	602f      	str	r7, [r5, #0]
 8022414:	b1b9      	cbz	r1, 8022446 <__sflush_r+0xae>
 8022416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802241a:	4299      	cmp	r1, r3
 802241c:	d002      	beq.n	8022424 <__sflush_r+0x8c>
 802241e:	4628      	mov	r0, r5
 8022420:	f7ff fb48 	bl	8021ab4 <_free_r>
 8022424:	2300      	movs	r3, #0
 8022426:	6363      	str	r3, [r4, #52]	@ 0x34
 8022428:	e00d      	b.n	8022446 <__sflush_r+0xae>
 802242a:	2301      	movs	r3, #1
 802242c:	4628      	mov	r0, r5
 802242e:	47b0      	blx	r6
 8022430:	4602      	mov	r2, r0
 8022432:	1c50      	adds	r0, r2, #1
 8022434:	d1c9      	bne.n	80223ca <__sflush_r+0x32>
 8022436:	682b      	ldr	r3, [r5, #0]
 8022438:	2b00      	cmp	r3, #0
 802243a:	d0c6      	beq.n	80223ca <__sflush_r+0x32>
 802243c:	2b1d      	cmp	r3, #29
 802243e:	d001      	beq.n	8022444 <__sflush_r+0xac>
 8022440:	2b16      	cmp	r3, #22
 8022442:	d11e      	bne.n	8022482 <__sflush_r+0xea>
 8022444:	602f      	str	r7, [r5, #0]
 8022446:	2000      	movs	r0, #0
 8022448:	e022      	b.n	8022490 <__sflush_r+0xf8>
 802244a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802244e:	b21b      	sxth	r3, r3
 8022450:	e01b      	b.n	802248a <__sflush_r+0xf2>
 8022452:	690f      	ldr	r7, [r1, #16]
 8022454:	2f00      	cmp	r7, #0
 8022456:	d0f6      	beq.n	8022446 <__sflush_r+0xae>
 8022458:	0793      	lsls	r3, r2, #30
 802245a:	680e      	ldr	r6, [r1, #0]
 802245c:	bf08      	it	eq
 802245e:	694b      	ldreq	r3, [r1, #20]
 8022460:	600f      	str	r7, [r1, #0]
 8022462:	bf18      	it	ne
 8022464:	2300      	movne	r3, #0
 8022466:	eba6 0807 	sub.w	r8, r6, r7
 802246a:	608b      	str	r3, [r1, #8]
 802246c:	f1b8 0f00 	cmp.w	r8, #0
 8022470:	dde9      	ble.n	8022446 <__sflush_r+0xae>
 8022472:	6a21      	ldr	r1, [r4, #32]
 8022474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022476:	4643      	mov	r3, r8
 8022478:	463a      	mov	r2, r7
 802247a:	4628      	mov	r0, r5
 802247c:	47b0      	blx	r6
 802247e:	2800      	cmp	r0, #0
 8022480:	dc08      	bgt.n	8022494 <__sflush_r+0xfc>
 8022482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802248a:	81a3      	strh	r3, [r4, #12]
 802248c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022494:	4407      	add	r7, r0
 8022496:	eba8 0800 	sub.w	r8, r8, r0
 802249a:	e7e7      	b.n	802246c <__sflush_r+0xd4>
 802249c:	dfbffffe 	.word	0xdfbffffe

080224a0 <_fflush_r>:
 80224a0:	b538      	push	{r3, r4, r5, lr}
 80224a2:	690b      	ldr	r3, [r1, #16]
 80224a4:	4605      	mov	r5, r0
 80224a6:	460c      	mov	r4, r1
 80224a8:	b913      	cbnz	r3, 80224b0 <_fflush_r+0x10>
 80224aa:	2500      	movs	r5, #0
 80224ac:	4628      	mov	r0, r5
 80224ae:	bd38      	pop	{r3, r4, r5, pc}
 80224b0:	b118      	cbz	r0, 80224ba <_fflush_r+0x1a>
 80224b2:	6a03      	ldr	r3, [r0, #32]
 80224b4:	b90b      	cbnz	r3, 80224ba <_fflush_r+0x1a>
 80224b6:	f7fe ff1f 	bl	80212f8 <__sinit>
 80224ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d0f3      	beq.n	80224aa <_fflush_r+0xa>
 80224c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80224c4:	07d0      	lsls	r0, r2, #31
 80224c6:	d404      	bmi.n	80224d2 <_fflush_r+0x32>
 80224c8:	0599      	lsls	r1, r3, #22
 80224ca:	d402      	bmi.n	80224d2 <_fflush_r+0x32>
 80224cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80224ce:	f7ff faae 	bl	8021a2e <__retarget_lock_acquire_recursive>
 80224d2:	4628      	mov	r0, r5
 80224d4:	4621      	mov	r1, r4
 80224d6:	f7ff ff5f 	bl	8022398 <__sflush_r>
 80224da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80224dc:	07da      	lsls	r2, r3, #31
 80224de:	4605      	mov	r5, r0
 80224e0:	d4e4      	bmi.n	80224ac <_fflush_r+0xc>
 80224e2:	89a3      	ldrh	r3, [r4, #12]
 80224e4:	059b      	lsls	r3, r3, #22
 80224e6:	d4e1      	bmi.n	80224ac <_fflush_r+0xc>
 80224e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80224ea:	f7ff faa1 	bl	8021a30 <__retarget_lock_release_recursive>
 80224ee:	e7dd      	b.n	80224ac <_fflush_r+0xc>

080224f0 <_malloc_usable_size_r>:
 80224f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80224f4:	1f18      	subs	r0, r3, #4
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	bfbc      	itt	lt
 80224fa:	580b      	ldrlt	r3, [r1, r0]
 80224fc:	18c0      	addlt	r0, r0, r3
 80224fe:	4770      	bx	lr

08022500 <__sread>:
 8022500:	b510      	push	{r4, lr}
 8022502:	460c      	mov	r4, r1
 8022504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022508:	f000 f872 	bl	80225f0 <_read_r>
 802250c:	2800      	cmp	r0, #0
 802250e:	bfab      	itete	ge
 8022510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022512:	89a3      	ldrhlt	r3, [r4, #12]
 8022514:	181b      	addge	r3, r3, r0
 8022516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802251a:	bfac      	ite	ge
 802251c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802251e:	81a3      	strhlt	r3, [r4, #12]
 8022520:	bd10      	pop	{r4, pc}

08022522 <__swrite>:
 8022522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022526:	461f      	mov	r7, r3
 8022528:	898b      	ldrh	r3, [r1, #12]
 802252a:	05db      	lsls	r3, r3, #23
 802252c:	4605      	mov	r5, r0
 802252e:	460c      	mov	r4, r1
 8022530:	4616      	mov	r6, r2
 8022532:	d505      	bpl.n	8022540 <__swrite+0x1e>
 8022534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022538:	2302      	movs	r3, #2
 802253a:	2200      	movs	r2, #0
 802253c:	f000 f846 	bl	80225cc <_lseek_r>
 8022540:	89a3      	ldrh	r3, [r4, #12]
 8022542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802254a:	81a3      	strh	r3, [r4, #12]
 802254c:	4632      	mov	r2, r6
 802254e:	463b      	mov	r3, r7
 8022550:	4628      	mov	r0, r5
 8022552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022556:	f000 b85d 	b.w	8022614 <_write_r>

0802255a <__sseek>:
 802255a:	b510      	push	{r4, lr}
 802255c:	460c      	mov	r4, r1
 802255e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022562:	f000 f833 	bl	80225cc <_lseek_r>
 8022566:	1c43      	adds	r3, r0, #1
 8022568:	89a3      	ldrh	r3, [r4, #12]
 802256a:	bf15      	itete	ne
 802256c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802256e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022576:	81a3      	strheq	r3, [r4, #12]
 8022578:	bf18      	it	ne
 802257a:	81a3      	strhne	r3, [r4, #12]
 802257c:	bd10      	pop	{r4, pc}

0802257e <__sclose>:
 802257e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022582:	f000 b813 	b.w	80225ac <_close_r>
	...

08022588 <fiprintf>:
 8022588:	b40e      	push	{r1, r2, r3}
 802258a:	b503      	push	{r0, r1, lr}
 802258c:	4601      	mov	r1, r0
 802258e:	ab03      	add	r3, sp, #12
 8022590:	4805      	ldr	r0, [pc, #20]	@ (80225a8 <fiprintf+0x20>)
 8022592:	f853 2b04 	ldr.w	r2, [r3], #4
 8022596:	6800      	ldr	r0, [r0, #0]
 8022598:	9301      	str	r3, [sp, #4]
 802259a:	f7ff fc57 	bl	8021e4c <_vfiprintf_r>
 802259e:	b002      	add	sp, #8
 80225a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80225a4:	b003      	add	sp, #12
 80225a6:	4770      	bx	lr
 80225a8:	20001b3c 	.word	0x20001b3c

080225ac <_close_r>:
 80225ac:	b538      	push	{r3, r4, r5, lr}
 80225ae:	4d06      	ldr	r5, [pc, #24]	@ (80225c8 <_close_r+0x1c>)
 80225b0:	2300      	movs	r3, #0
 80225b2:	4604      	mov	r4, r0
 80225b4:	4608      	mov	r0, r1
 80225b6:	602b      	str	r3, [r5, #0]
 80225b8:	f7e0 fa66 	bl	8002a88 <_close>
 80225bc:	1c43      	adds	r3, r0, #1
 80225be:	d102      	bne.n	80225c6 <_close_r+0x1a>
 80225c0:	682b      	ldr	r3, [r5, #0]
 80225c2:	b103      	cbz	r3, 80225c6 <_close_r+0x1a>
 80225c4:	6023      	str	r3, [r4, #0]
 80225c6:	bd38      	pop	{r3, r4, r5, pc}
 80225c8:	200171c8 	.word	0x200171c8

080225cc <_lseek_r>:
 80225cc:	b538      	push	{r3, r4, r5, lr}
 80225ce:	4d07      	ldr	r5, [pc, #28]	@ (80225ec <_lseek_r+0x20>)
 80225d0:	4604      	mov	r4, r0
 80225d2:	4608      	mov	r0, r1
 80225d4:	4611      	mov	r1, r2
 80225d6:	2200      	movs	r2, #0
 80225d8:	602a      	str	r2, [r5, #0]
 80225da:	461a      	mov	r2, r3
 80225dc:	f7e0 fa7b 	bl	8002ad6 <_lseek>
 80225e0:	1c43      	adds	r3, r0, #1
 80225e2:	d102      	bne.n	80225ea <_lseek_r+0x1e>
 80225e4:	682b      	ldr	r3, [r5, #0]
 80225e6:	b103      	cbz	r3, 80225ea <_lseek_r+0x1e>
 80225e8:	6023      	str	r3, [r4, #0]
 80225ea:	bd38      	pop	{r3, r4, r5, pc}
 80225ec:	200171c8 	.word	0x200171c8

080225f0 <_read_r>:
 80225f0:	b538      	push	{r3, r4, r5, lr}
 80225f2:	4d07      	ldr	r5, [pc, #28]	@ (8022610 <_read_r+0x20>)
 80225f4:	4604      	mov	r4, r0
 80225f6:	4608      	mov	r0, r1
 80225f8:	4611      	mov	r1, r2
 80225fa:	2200      	movs	r2, #0
 80225fc:	602a      	str	r2, [r5, #0]
 80225fe:	461a      	mov	r2, r3
 8022600:	f7e0 fa25 	bl	8002a4e <_read>
 8022604:	1c43      	adds	r3, r0, #1
 8022606:	d102      	bne.n	802260e <_read_r+0x1e>
 8022608:	682b      	ldr	r3, [r5, #0]
 802260a:	b103      	cbz	r3, 802260e <_read_r+0x1e>
 802260c:	6023      	str	r3, [r4, #0]
 802260e:	bd38      	pop	{r3, r4, r5, pc}
 8022610:	200171c8 	.word	0x200171c8

08022614 <_write_r>:
 8022614:	b538      	push	{r3, r4, r5, lr}
 8022616:	4d07      	ldr	r5, [pc, #28]	@ (8022634 <_write_r+0x20>)
 8022618:	4604      	mov	r4, r0
 802261a:	4608      	mov	r0, r1
 802261c:	4611      	mov	r1, r2
 802261e:	2200      	movs	r2, #0
 8022620:	602a      	str	r2, [r5, #0]
 8022622:	461a      	mov	r2, r3
 8022624:	f7df ff74 	bl	8002510 <_write>
 8022628:	1c43      	adds	r3, r0, #1
 802262a:	d102      	bne.n	8022632 <_write_r+0x1e>
 802262c:	682b      	ldr	r3, [r5, #0]
 802262e:	b103      	cbz	r3, 8022632 <_write_r+0x1e>
 8022630:	6023      	str	r3, [r4, #0]
 8022632:	bd38      	pop	{r3, r4, r5, pc}
 8022634:	200171c8 	.word	0x200171c8

08022638 <abort>:
 8022638:	b508      	push	{r3, lr}
 802263a:	2006      	movs	r0, #6
 802263c:	f000 f82c 	bl	8022698 <raise>
 8022640:	2001      	movs	r0, #1
 8022642:	f7e0 f9f9 	bl	8002a38 <_exit>

08022646 <_raise_r>:
 8022646:	291f      	cmp	r1, #31
 8022648:	b538      	push	{r3, r4, r5, lr}
 802264a:	4605      	mov	r5, r0
 802264c:	460c      	mov	r4, r1
 802264e:	d904      	bls.n	802265a <_raise_r+0x14>
 8022650:	2316      	movs	r3, #22
 8022652:	6003      	str	r3, [r0, #0]
 8022654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022658:	bd38      	pop	{r3, r4, r5, pc}
 802265a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802265c:	b112      	cbz	r2, 8022664 <_raise_r+0x1e>
 802265e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022662:	b94b      	cbnz	r3, 8022678 <_raise_r+0x32>
 8022664:	4628      	mov	r0, r5
 8022666:	f000 f831 	bl	80226cc <_getpid_r>
 802266a:	4622      	mov	r2, r4
 802266c:	4601      	mov	r1, r0
 802266e:	4628      	mov	r0, r5
 8022670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022674:	f000 b818 	b.w	80226a8 <_kill_r>
 8022678:	2b01      	cmp	r3, #1
 802267a:	d00a      	beq.n	8022692 <_raise_r+0x4c>
 802267c:	1c59      	adds	r1, r3, #1
 802267e:	d103      	bne.n	8022688 <_raise_r+0x42>
 8022680:	2316      	movs	r3, #22
 8022682:	6003      	str	r3, [r0, #0]
 8022684:	2001      	movs	r0, #1
 8022686:	e7e7      	b.n	8022658 <_raise_r+0x12>
 8022688:	2100      	movs	r1, #0
 802268a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802268e:	4620      	mov	r0, r4
 8022690:	4798      	blx	r3
 8022692:	2000      	movs	r0, #0
 8022694:	e7e0      	b.n	8022658 <_raise_r+0x12>
	...

08022698 <raise>:
 8022698:	4b02      	ldr	r3, [pc, #8]	@ (80226a4 <raise+0xc>)
 802269a:	4601      	mov	r1, r0
 802269c:	6818      	ldr	r0, [r3, #0]
 802269e:	f7ff bfd2 	b.w	8022646 <_raise_r>
 80226a2:	bf00      	nop
 80226a4:	20001b3c 	.word	0x20001b3c

080226a8 <_kill_r>:
 80226a8:	b538      	push	{r3, r4, r5, lr}
 80226aa:	4d07      	ldr	r5, [pc, #28]	@ (80226c8 <_kill_r+0x20>)
 80226ac:	2300      	movs	r3, #0
 80226ae:	4604      	mov	r4, r0
 80226b0:	4608      	mov	r0, r1
 80226b2:	4611      	mov	r1, r2
 80226b4:	602b      	str	r3, [r5, #0]
 80226b6:	f7e0 f9af 	bl	8002a18 <_kill>
 80226ba:	1c43      	adds	r3, r0, #1
 80226bc:	d102      	bne.n	80226c4 <_kill_r+0x1c>
 80226be:	682b      	ldr	r3, [r5, #0]
 80226c0:	b103      	cbz	r3, 80226c4 <_kill_r+0x1c>
 80226c2:	6023      	str	r3, [r4, #0]
 80226c4:	bd38      	pop	{r3, r4, r5, pc}
 80226c6:	bf00      	nop
 80226c8:	200171c8 	.word	0x200171c8

080226cc <_getpid_r>:
 80226cc:	f7e0 b99c 	b.w	8002a08 <_getpid>

080226d0 <_init>:
 80226d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226d2:	bf00      	nop
 80226d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226d6:	bc08      	pop	{r3}
 80226d8:	469e      	mov	lr, r3
 80226da:	4770      	bx	lr

080226dc <_fini>:
 80226dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226de:	bf00      	nop
 80226e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226e2:	bc08      	pop	{r3}
 80226e4:	469e      	mov	lr, r3
 80226e6:	4770      	bx	lr
