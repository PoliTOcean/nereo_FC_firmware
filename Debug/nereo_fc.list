
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc40  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d28  0801be00  0801be00  0001ce00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801db28  0801db28  0001fac4  2**0
                  CONTENTS
  4 .ARM          00000008  0801db28  0801db28  0001eb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801db30  0801db30  0001fac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801db30  0801db30  0001eb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801db48  0801db48  0001eb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ac4  20000000  0801db4c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001fac4  2**0
                  CONTENTS
 10 .bss          000155c4  20000ac8  20000ac8  0001fac8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2001608c  2001608c  0001fac8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001fac4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022a41  00000000  00000000  0001faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054f9  00000000  00000000  00042535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  00047a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012eb  00000000  00000000  00049338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033b03  00000000  00000000  0004a623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022c57  00000000  00000000  0007e126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114883  00000000  00000000  000a0d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ef  00000000  00000000  001b5600  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076c0  00000000  00000000  001b56f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001bcdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001bce21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001bd77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000ac8 	.word	0x20000ac8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801bde8 	.word	0x0801bde8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000acc 	.word	0x20000acc
 80001fc:	0801bde8 	.word	0x0801bde8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9b5 	b.w	8000fa8 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fb8:	f007 fcfa 	bl	80089b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fc4:	f000 f986 	bl	80012d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fc8:	4b58      	ldr	r3, [pc, #352]	@ (800112c <pvPortMallocMicroROS+0x180>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8090 	bne.w	80010f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01e      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fdc:	2208      	movs	r2, #8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f023 0307 	bic.w	r3, r3, #7
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d06a      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d865      	bhi.n	80010f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 800102c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001034:	e004      	b.n	8001040 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d903      	bls.n	8001052 <pvPortMallocMicroROS+0xa6>
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f1      	bne.n	8001036 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	d04c      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4413      	add	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	2308      	movs	r3, #8
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	429a      	cmp	r2, r3
 800107c:	d920      	bls.n	80010c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800107e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001094:	f383 8811 	msr	BASEPRI, r3
 8001098:	f3bf 8f6f 	isb	sy
 800109c:	f3bf 8f4f 	dsb	sy
 80010a0:	613b      	str	r3, [r7, #16]
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ba:	69b8      	ldr	r0, [r7, #24]
 80010bc:	f000 f96c 	bl	8001398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d203      	bcs.n	80010e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <pvPortMallocMicroROS+0x180>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010f6:	f007 fc69 	bl	80089cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	60fb      	str	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800111c:	69fb      	ldr	r3, [r7, #28]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000801c 	.word	0x2000801c
 800112c:	20008028 	.word	0x20008028
 8001130:	20008020 	.word	0x20008020
 8001134:	20008014 	.word	0x20008014
 8001138:	20008024 	.word	0x20008024

0800113c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d04a      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800114e:	2308      	movs	r3, #8
 8001150:	425b      	negs	r3, r3
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <vPortFreeMicroROS+0x46>
	__asm volatile
 800116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116e:	f383 8811 	msr	BASEPRI, r3
 8001172:	f3bf 8f6f 	isb	sy
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	60fb      	str	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	60bb      	str	r3, [r7, #8]
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d019      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011c8:	f007 fbf2 	bl	80089b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f000 f8dc 	bl	8001398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011e0:	f007 fbf4 	bl	80089cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20008028 	.word	0x20008028
 80011f0:	20008020 	.word	0x20008020

080011f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001200:	2308      	movs	r3, #8
 8001202:	425b      	negs	r3, r3
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <getBlockSize+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	43db      	mvns	r3, r3
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

	return count;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20008028 	.word	0x20008028

08001230 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800123a:	f007 fbb9 	bl	80089b0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff feb4 	bl	8000fac <pvPortMallocMicroROS>
 8001244:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffce 	bl	80011f4 <getBlockSize>
 8001258:	4603      	mov	r3, r0
 800125a:	2208      	movs	r2, #8
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d201      	bcs.n	800126c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f019 ff6a 	bl	801b14a <memcpy>

		vPortFreeMicroROS(pv);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff60 	bl	800113c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800127c:	f007 fba6 	bl	80089cc <xTaskResumeAll>

	return newmem;
 8001280:	68bb      	ldr	r3, [r7, #8]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001294:	f007 fb8c 	bl	80089b0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff fe82 	bl	8000fac <pvPortMallocMicroROS>
 80012a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ae:	e004      	b.n	80012ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	613a      	str	r2, [r7, #16]
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012c4:	f007 fb82 	bl	80089cc <xTaskResumeAll>
  	return mem;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012da:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <prvHeapInit+0xac>)
 80012e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00c      	beq.n	8001308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3307      	adds	r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <prvHeapInit+0xac>)
 8001304:	4413      	add	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <prvHeapInit+0xb0>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <prvHeapInit+0xb0>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001320:	2208      	movs	r2, #8
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 0307 	bic.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <prvHeapInit+0xb4>)
 8001334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <prvHeapInit+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <prvHeapInit+0xb4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <prvHeapInit+0xb4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <prvHeapInit+0xb8>)
 8001362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <prvHeapInit+0xbc>)
 800136a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <prvHeapInit+0xc0>)
 800136e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000ae4 	.word	0x20000ae4
 8001384:	20008014 	.word	0x20008014
 8001388:	2000801c 	.word	0x2000801c
 800138c:	20008024 	.word	0x20008024
 8001390:	20008020 	.word	0x20008020
 8001394:	20008028 	.word	0x20008028

08001398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <prvInsertBlockIntoFreeList+0xac>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e002      	b.n	80013ac <prvInsertBlockIntoFreeList+0x14>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f7      	bhi.n	80013a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d108      	bne.n	80013da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	441a      	add	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d118      	bne.n	8001420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d00d      	beq.n	8001416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	441a      	add	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d002      	beq.n	8001436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20008014 	.word	0x20008014
 8001448:	2000801c 	.word	0x2000801c

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	203a      	movs	r0, #58	@ 0x3a
 8001474:	f002 fb48 	bl	8003b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001478:	203a      	movs	r0, #58	@ 0x3a
 800147a:	f002 fb61 	bl	8003b40 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2046      	movs	r0, #70	@ 0x46
 8001484:	f002 fb40 	bl	8003b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f002 fb59 	bl	8003b40 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <cubemx_transport_open+0x28>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f004 ff78 	bl	80063a8 <HAL_UART_Receive_DMA>
    return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000802c 	.word	0x2000802c

080014c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f004 ff8a 	bl	80063f2 <HAL_UART_DMAStop>
    return true;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11c      	bne.n	8001544 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f004 fed8 	bl	80062c8 <HAL_UART_Transmit_DMA>
 8001518:	4603      	mov	r3, r0
 800151a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800151c:	e002      	b.n	8001524 <cubemx_transport_write+0x3c>
            osDelay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f006 fa04 	bl	800792c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001524:	7cfb      	ldrb	r3, [r7, #19]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <cubemx_transport_write+0x4e>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d1f3      	bne.n	800151e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001536:	7cfb      	ldrb	r3, [r7, #19]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <cubemx_transport_write+0x58>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e002      	b.n	8001546 <cubemx_transport_write+0x5e>
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001544:	2300      	movs	r3, #0
    }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001564:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <cubemx_transport_read+0x9c>)
 800157c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800157e:	b662      	cpsie	i
}
 8001580:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001588:	2001      	movs	r0, #1
 800158a:	f006 f9cf 	bl	800792c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <cubemx_transport_read+0xa0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <cubemx_transport_read+0x9c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <cubemx_transport_read+0x52>
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe3      	blt.n	800156a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015a6:	e011      	b.n	80015cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	440b      	add	r3, r1
 80015b2:	4910      	ldr	r1, [pc, #64]	@ (80015f4 <cubemx_transport_read+0xa4>)
 80015b4:	5c8a      	ldrb	r2, [r1, r2]
 80015b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <cubemx_transport_read+0x9c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d003      	beq.n	80015e0 <cubemx_transport_read+0x90>
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3e3      	bcc.n	80015a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80015e0:	69bb      	ldr	r3, [r7, #24]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20008830 	.word	0x20008830
 80015f0:	2000882c 	.word	0x2000882c
 80015f4:	2000802c 	.word	0x2000802c

080015f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
extern "C" void MX_FREERTOS_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <MX_FREERTOS_Init+0x18>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_FREERTOS_Init+0x1c>)
 8001602:	f006 f901 	bl	8007808 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <MX_FREERTOS_Init+0x20>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	0801c008 	.word	0x0801c008
 8001614:	0800161d 	.word	0x0800161d
 8001618:	2000883c 	.word	0x2000883c

0800161c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 8001622:	af04      	add	r7, sp, #16
 8001624:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001628:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800162c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rcl_ret_t rc;
	  rmw_uros_set_custom_transport(
 800162e:	4bce      	ldr	r3, [pc, #824]	@ (8001968 <_Z16StartDefaultTaskPv+0x34c>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	4bce      	ldr	r3, [pc, #824]	@ (800196c <_Z16StartDefaultTaskPv+0x350>)
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4bce      	ldr	r3, [pc, #824]	@ (8001970 <_Z16StartDefaultTaskPv+0x354>)
 8001638:	4ace      	ldr	r2, [pc, #824]	@ (8001974 <_Z16StartDefaultTaskPv+0x358>)
 800163a:	49cf      	ldr	r1, [pc, #828]	@ (8001978 <_Z16StartDefaultTaskPv+0x35c>)
 800163c:	2001      	movs	r0, #1
 800163e:	f00b fa7b 	bl	800cb38 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001642:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001646:	4618      	mov	r0, r3
 8001648:	f00b f9a8 	bl	800c99c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800164c:	4bcb      	ldr	r3, [pc, #812]	@ (800197c <_Z16StartDefaultTaskPv+0x360>)
 800164e:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001652:	4bcb      	ldr	r3, [pc, #812]	@ (8001980 <_Z16StartDefaultTaskPv+0x364>)
 8001654:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001658:	4bca      	ldr	r3, [pc, #808]	@ (8001984 <_Z16StartDefaultTaskPv+0x368>)
 800165a:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800165e:	4bca      	ldr	r3, [pc, #808]	@ (8001988 <_Z16StartDefaultTaskPv+0x36c>)
 8001660:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001664:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001668:	4618      	mov	r0, r3
 800166a:	f00b f9a5 	bl	800c9b8 <rcutils_set_default_allocator>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <_Z16StartDefaultTaskPv+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800167a:	2189      	movs	r1, #137	@ 0x89
 800167c:	48c3      	ldr	r0, [pc, #780]	@ (800198c <_Z16StartDefaultTaskPv+0x370>)
 800167e:	f019 fc2d 	bl	801aedc <iprintf>
	  sensor_msgs__msg__Temperature water_temperature;

	  // PARAM SERVER


	  allocator = rcl_get_default_allocator();
 8001682:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001686:	4618      	mov	r0, r3
 8001688:	f00b f9b4 	bl	800c9f4 <rcutils_get_default_allocator>
 800168c:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001690:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001694:	f507 7454 	add.w	r4, r7, #848	@ 0x350
 8001698:	461d      	mov	r5, r3
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016a2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80016a6:	f507 7059 	add.w	r0, r7, #868	@ 0x364
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	f00b f84b 	bl	800c748 <rclc_support_init>
 80016b2:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016b6:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <_Z16StartDefaultTaskPv+0xaa>
 80016be:	21ac      	movs	r1, #172	@ 0xac
 80016c0:	48b3      	ldr	r0, [pc, #716]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 80016c2:	f019 fc0b 	bl	801aedc <iprintf>

	  // create node
	  rc = rclc_node_init_default(&node, "cubemx_node", "", &support);
 80016c6:	f507 7359 	add.w	r3, r7, #868	@ 0x364
 80016ca:	f507 7052 	add.w	r0, r7, #840	@ 0x348
 80016ce:	4ab1      	ldr	r2, [pc, #708]	@ (8001994 <_Z16StartDefaultTaskPv+0x378>)
 80016d0:	49b1      	ldr	r1, [pc, #708]	@ (8001998 <_Z16StartDefaultTaskPv+0x37c>)
 80016d2:	f00b f883 	bl	800c7dc <rclc_node_init_default>
 80016d6:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016da:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <_Z16StartDefaultTaskPv+0xce>
 80016e2:	21b0      	movs	r1, #176	@ 0xb0
 80016e4:	48aa      	ldr	r0, [pc, #680]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 80016e6:	f019 fbf9 	bl	801aedc <iprintf>

	  executor = rclc_executor_get_zero_initialized_executor();
 80016ea:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80016ee:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00a fd17 	bl	800c128 <rclc_executor_get_zero_initialized_executor>
 80016fa:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80016fe:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8001702:	4620      	mov	r0, r4
 8001704:	4619      	mov	r1, r3
 8001706:	2388      	movs	r3, #136	@ 0x88
 8001708:	461a      	mov	r2, r3
 800170a:	f019 fd1e 	bl	801b14a <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS_SRVS + RCLC_EXECUTOR_PARAMETER_SERVER_HANDLES, &allocator);
 800170e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001712:	f507 7159 	add.w	r1, r7, #868	@ 0x364
 8001716:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800171a:	220b      	movs	r2, #11
 800171c:	f00a fd10 	bl	800c140 <rclc_executor_init>
 8001720:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001724:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <_Z16StartDefaultTaskPv+0x118>
 800172c:	21b4      	movs	r1, #180	@ 0xb4
 800172e:	4898      	ldr	r0, [pc, #608]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 8001730:	f019 fbd4 	bl	801aedc <iprintf>

	  // PUBLISHERS
	  rclc_publisher_init_default(
 8001734:	f009 ff06 	bl	800b544 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 8001738:	4602      	mov	r2, r0
 800173a:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 800173e:	f507 702f 	add.w	r0, r7, #700	@ 0x2bc
 8001742:	4b96      	ldr	r3, [pc, #600]	@ (800199c <_Z16StartDefaultTaskPv+0x380>)
 8001744:	f00b f886 	bl	800c854 <rclc_publisher_init_default>

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 8001748:	f00c f824 	bl	800d794 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800174c:	4602      	mov	r2, r0
 800174e:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 8001752:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001756:	4b92      	ldr	r3, [pc, #584]	@ (80019a0 <_Z16StartDefaultTaskPv+0x384>)
 8001758:	f00b f8e4 	bl	800c924 <rclc_subscription_init_default>
 800175c:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001760:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <_Z16StartDefaultTaskPv+0x154>
 8001768:	21c6      	movs	r1, #198	@ 0xc6
 800176a:	4889      	ldr	r0, [pc, #548]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 800176c:	f019 fbb6 	bl	801aedc <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 8001770:	f00c f810 	bl	800d794 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001774:	4684      	mov	ip, r0
 8001776:	4c8b      	ldr	r4, [pc, #556]	@ (80019a4 <_Z16StartDefaultTaskPv+0x388>)
 8001778:	f507 76a0 	add.w	r6, r7, #320	@ 0x140
 800177c:	466d      	mov	r5, sp
 800177e:	f104 0308 	add.w	r3, r4, #8
 8001782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001784:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001788:	e894 000c 	ldmia.w	r4, {r2, r3}
 800178c:	4631      	mov	r1, r6
 800178e:	4660      	mov	r0, ip
 8001790:	f009 fd6e 	bl	800b270 <micro_ros_utilities_create_message_memory>
 8001794:	4603      	mov	r3, r0
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

	  rc = rclc_executor_add_subscription(
 80017a0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80017a4:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80017a8:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	4b7d      	ldr	r3, [pc, #500]	@ (80019a8 <_Z16StartDefaultTaskPv+0x38c>)
 80017b2:	f00a fd35 	bl	800c220 <rclc_executor_add_subscription>
 80017b6:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017ba:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <_Z16StartDefaultTaskPv+0x1ae>
 80017c2:	21cd      	movs	r1, #205	@ 0xcd
 80017c4:	4872      	ldr	r0, [pc, #456]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 80017c6:	f019 fb89 	bl	801aedc <iprintf>

	  // CMD Vel sub
	  rc = rclc_subscription_init_default(
 80017ca:	f009 fe83 	bl	800b4d4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 80017d4:	f507 702a 	add.w	r0, r7, #680	@ 0x2a8
 80017d8:	4b74      	ldr	r3, [pc, #464]	@ (80019ac <_Z16StartDefaultTaskPv+0x390>)
 80017da:	f00b f8a3 	bl	800c924 <rclc_subscription_init_default>
 80017de:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &cmd_vel_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity),
			  "/nereo_cmd_vel");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017e2:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <_Z16StartDefaultTaskPv+0x1d6>
 80017ea:	21d5      	movs	r1, #213	@ 0xd5
 80017ec:	4868      	ldr	r0, [pc, #416]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 80017ee:	f019 fb75 	bl	801aedc <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity), &cmd_vel_msg, default_conf);
 80017f2:	f009 fe6f 	bl	800b4d4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 80017f6:	4684      	mov	ip, r0
 80017f8:	4c6a      	ldr	r4, [pc, #424]	@ (80019a4 <_Z16StartDefaultTaskPv+0x388>)
 80017fa:	f507 7621 	add.w	r6, r7, #644	@ 0x284
 80017fe:	466d      	mov	r5, sp
 8001800:	f104 0308 	add.w	r3, r4, #8
 8001804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001806:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800180a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800180e:	4631      	mov	r1, r6
 8001810:	4660      	mov	r0, ip
 8001812:	f009 fd2d 	bl	800b270 <micro_ros_utilities_create_message_memory>
 8001816:	4603      	mov	r3, r0
 8001818:	f083 0301 	eor.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

	  rc = rclc_executor_add_subscription(
 8001822:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 8001826:	f507 712a 	add.w	r1, r7, #680	@ 0x2a8
 800182a:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4b5f      	ldr	r3, [pc, #380]	@ (80019b0 <_Z16StartDefaultTaskPv+0x394>)
 8001834:	f00a fcf4 	bl	800c220 <rclc_executor_add_subscription>
 8001838:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &cmd_vel_subscriber,
			  &cmd_vel_msg, &cmd_vel_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800183c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <_Z16StartDefaultTaskPv+0x230>
 8001844:	21dc      	movs	r1, #220	@ 0xdc
 8001846:	4852      	ldr	r0, [pc, #328]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 8001848:	f019 fb48 	bl	801aedc <iprintf>

	  // SERVICES
	  rcl_service_t arm_disarm_srv_server;
	  std_srvs__srv__SetBool_Request set_arm_mode_reqin;
	  std_srvs__srv__SetBool_Response set_arm_mode_resout;
	  rc = rclc_service_init_default(
 800184c:	f00c f9c8 	bl	800dbe0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 8001850:	4602      	mov	r2, r0
 8001852:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 8001856:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 800185a:	4b56      	ldr	r3, [pc, #344]	@ (80019b4 <_Z16StartDefaultTaskPv+0x398>)
 800185c:	f00b f82e 	bl	800c8bc <rclc_service_init_default>
 8001860:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &arm_disarm_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool), "/set_rov_arm_mode");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001864:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <_Z16StartDefaultTaskPv+0x258>
 800186c:	21e5      	movs	r1, #229	@ 0xe5
 800186e:	4848      	ldr	r0, [pc, #288]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 8001870:	f019 fb34 	bl	801aedc <iprintf>
	  rc = rclc_executor_add_service(
 8001874:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001878:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800187c:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8001880:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 8001884:	4c4c      	ldr	r4, [pc, #304]	@ (80019b8 <_Z16StartDefaultTaskPv+0x39c>)
 8001886:	9400      	str	r4, [sp, #0]
 8001888:	f00a fcfe 	bl	800c288 <rclc_executor_add_service>
 800188c:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &arm_disarm_srv_server, &set_arm_mode_reqin,
			  &set_arm_mode_resout, &arm_disarm_service_callback);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001890:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <_Z16StartDefaultTaskPv+0x284>
 8001898:	21e9      	movs	r1, #233	@ 0xe9
 800189a:	483d      	ldr	r0, [pc, #244]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 800189c:	f019 fb1e 	bl	801aedc <iprintf>

	  rcl_service_t nav_mode_srv_server;
	  nereo_interfaces__srv__SetNavigationMode_Request set_navigation_mode_reqin;
	  nereo_interfaces__srv__SetNavigationMode_Response set_navigation_mode_resout;
	  rc = rclc_service_init_default(
 80018a0:	f009 fe30 	bl	800b504 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 80018aa:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 80018ae:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <_Z16StartDefaultTaskPv+0x3a0>)
 80018b0:	f00b f804 	bl	800c8bc <rclc_service_init_default>
 80018b4:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &nav_mode_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(nereo_interfaces, srv, SetNavigationMode), "/set_rov_navigation_mode");
	  rc = rclc_executor_add_service(
 80018b8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018bc:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80018c0:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 80018c4:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 80018c8:	4c3d      	ldr	r4, [pc, #244]	@ (80019c0 <_Z16StartDefaultTaskPv+0x3a4>)
 80018ca:	9400      	str	r4, [sp, #0]
 80018cc:	f00a fcdc 	bl	800c288 <rclc_executor_add_service>
 80018d0:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &nav_mode_srv_server, &set_navigation_mode_reqin,
			  &set_navigation_mode_resout, &set_nav_mode_service_callback);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80018d4:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <_Z16StartDefaultTaskPv+0x2c8>
 80018dc:	21f4      	movs	r1, #244	@ 0xf4
 80018de:	482c      	ldr	r0, [pc, #176]	@ (8001990 <_Z16StartDefaultTaskPv+0x374>)
 80018e0:	f019 fafc 	bl	801aedc <iprintf>

	  uint32_t pwm_output[8] = {1500};
 80018e4:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80018e8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80018ec:	4618      	mov	r0, r3
 80018ee:	2320      	movs	r3, #32
 80018f0:	461a      	mov	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f019 fbc1 	bl	801b07a <memset>
 80018f8:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80018fc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001900:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001904:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	  printf("Micro ROS initialization done without errors.\n");
 800190c:	482d      	ldr	r0, [pc, #180]	@ (80019c4 <_Z16StartDefaultTaskPv+0x3a8>)
 800190e:	f019 fb4d 	bl	801afac <puts>
	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 8001912:	f002 f811 	bl	8003938 <HAL_GetTick>
 8001916:	f8c7 03b0 	str.w	r0, [r7, #944]	@ 0x3b0
		//printf("Free heap: %d.\n", xPortGetFreeHeapSize());
		// Spin executor once to receive requests and update messages
		rclc_executor_spin_some(&executor, 1000000);
 800191a:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 800191e:	4a2a      	ldr	r2, [pc, #168]	@ (80019c8 <_Z16StartDefaultTaskPv+0x3ac>)
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	4608      	mov	r0, r1
 8001926:	f00a fed5 	bl	800c6d4 <rclc_executor_spin_some>

	    if (rov_arm_mode == ROV_ARMED)
 800192a:	4b28      	ldr	r3, [pc, #160]	@ (80019cc <_Z16StartDefaultTaskPv+0x3b0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80a2 	beq.w	8001a84 <_Z16StartDefaultTaskPv+0x468>
	    {
	    	switch (navigation_mode) {
 8001940:	4b23      	ldr	r3, [pc, #140]	@ (80019d0 <_Z16StartDefaultTaskPv+0x3b4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <_Z16StartDefaultTaskPv+0x334>
 800194a:	2b01      	cmp	r3, #1
 800194c:	d042      	beq.n	80019d4 <_Z16StartDefaultTaskPv+0x3b8>
 800194e:	e054      	b.n	80019fa <_Z16StartDefaultTaskPv+0x3de>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(cmd_vel_msg.cmd_vel, pwm_output);
 8001950:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001954:	f507 7321 	add.w	r3, r7, #644	@ 0x284
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f001 f9dc 	bl	8002d18 <calculate_pwm>
 8001960:	4603      	mov	r3, r0
 8001962:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	    			break;
 8001966:	e060      	b.n	8001a2a <_Z16StartDefaultTaskPv+0x40e>
 8001968:	08001551 	.word	0x08001551
 800196c:	080014e9 	.word	0x080014e9
 8001970:	080014c9 	.word	0x080014c9
 8001974:	0800149d 	.word	0x0800149d
 8001978:	20008940 	.word	0x20008940
 800197c:	08002125 	.word	0x08002125
 8001980:	08002169 	.word	0x08002169
 8001984:	080021a1 	.word	0x080021a1
 8001988:	0800220d 	.word	0x0800220d
 800198c:	0801be0c 	.word	0x0801be0c
 8001990:	0801be34 	.word	0x0801be34
 8001994:	0801be48 	.word	0x0801be48
 8001998:	0801be4c 	.word	0x0801be4c
 800199c:	0801be58 	.word	0x0801be58
 80019a0:	0801be6c 	.word	0x0801be6c
 80019a4:	20008840 	.word	0x20008840
 80019a8:	08001c47 	.word	0x08001c47
 80019ac:	0801be78 	.word	0x0801be78
 80019b0:	08001c5f 	.word	0x08001c5f
 80019b4:	0801be88 	.word	0x0801be88
 80019b8:	08001c75 	.word	0x08001c75
 80019bc:	0801be9c 	.word	0x0801be9c
 80019c0:	08001cd5 	.word	0x08001cd5
 80019c4:	0801beb8 	.word	0x0801beb8
 80019c8:	000f4240 	.word	0x000f4240
 80019cc:	20008834 	.word	0x20008834
 80019d0:	20008835 	.word	0x20008835
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(cmd_vel_msg.cmd_vel, pwm_output,
 80019d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019d8:	f103 0418 	add.w	r4, r3, #24
 80019dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019e0:	f103 0218 	add.w	r2, r3, #24
 80019e4:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80019e8:	f507 7021 	add.w	r0, r7, #644	@ 0x284
 80019ec:	4623      	mov	r3, r4
 80019ee:	f001 fcdf 	bl	80033b0 <calculate_pwm_with_pid>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 80019f8:	e017      	b.n	8001a2a <_Z16StartDefaultTaskPv+0x40e>
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
 8001a00:	e00e      	b.n	8001a20 <_Z16StartDefaultTaskPv+0x404>
 8001a02:	f897 23bf 	ldrb.w	r2, [r7, #959]	@ 0x3bf
 8001a06:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001a0a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001a0e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a16:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
 8001a20:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 8001a24:	2b07      	cmp	r3, #7
 8001a26:	d9ec      	bls.n	8001a02 <_Z16StartDefaultTaskPv+0x3e6>
	    			break;
 8001a28:	bf00      	nop
	    	}
	    	clamp_pwm_output(pwm_output, 8);
 8001a2a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a2e:	2108      	movs	r1, #8
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f8d1 	bl	8001bd8 <clamp_pwm_output>
	    	// offset to compensate for the optocoupler offset
	    	for(int8_t i = 0; i < 8; i++) pwm_output[i] += OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
 8001a3c:	e018      	b.n	8001a70 <_Z16StartDefaultTaskPv+0x454>
 8001a3e:	f997 23be 	ldrsb.w	r2, [r7, #958]	@ 0x3be
 8001a42:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001a46:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	f997 23be 	ldrsb.w	r2, [r7, #958]	@ 0x3be
 8001a52:	f103 0132 	add.w	r1, r3, #50	@ 0x32
 8001a56:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001a5a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a62:	f997 33be 	ldrsb.w	r3, [r7, #958]	@ 0x3be
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
 8001a70:	f997 33be 	ldrsb.w	r3, [r7, #958]	@ 0x3be
 8001a74:	2b07      	cmp	r3, #7
 8001a76:	dde2      	ble.n	8001a3e <_Z16StartDefaultTaskPv+0x422>
	    	set_pwms(pwm_output);
 8001a78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f84d 	bl	8001b1c <set_pwms>
 8001a82:	e001      	b.n	8001a88 <_Z16StartDefaultTaskPv+0x46c>
	    } else set_pwm_idle();
 8001a84:	f000 f87a 	bl	8001b7c <set_pwm_idle>

	    // do not publish the offset by subtracting 50
	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thruster_pwms[i] = pwm_output[i] - OPTOCOUPLER_INTRODUCED_OFFSET_uS;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 33bd 	strb.w	r3, [r7, #957]	@ 0x3bd
 8001a8e:	e017      	b.n	8001ac0 <_Z16StartDefaultTaskPv+0x4a4>
 8001a90:	f897 23bd 	ldrb.w	r2, [r7, #957]	@ 0x3bd
 8001a94:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001a98:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	f897 23bd 	ldrb.w	r2, [r7, #957]	@ 0x3bd
 8001aa6:	3b32      	subs	r3, #50	@ 0x32
 8001aa8:	b299      	uxth	r1, r3
 8001aaa:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001aae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ab2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001ab6:	f897 33bd 	ldrb.w	r3, [r7, #957]	@ 0x3bd
 8001aba:	3301      	adds	r3, #1
 8001abc:	f887 33bd 	strb.w	r3, [r7, #957]	@ 0x3bd
 8001ac0:	f897 33bd 	ldrb.w	r3, [r7, #957]	@ 0x3bd
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	d9e3      	bls.n	8001a90 <_Z16StartDefaultTaskPv+0x474>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001ac8:	f507 712b 	add.w	r1, r7, #684	@ 0x2ac
 8001acc:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f009 ff9a 	bl	800ba0c <rcl_publish>
 8001ad8:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001adc:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <_Z16StartDefaultTaskPv+0x4d2>
 8001ae4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001ae8:	480b      	ldr	r0, [pc, #44]	@ (8001b18 <_Z16StartDefaultTaskPv+0x4fc>)
 8001aea:	f019 f9f7 	bl	801aedc <iprintf>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001aee:	f001 ff23 	bl	8003938 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001afe:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001b02:	2b09      	cmp	r3, #9
 8001b04:	f63f af05 	bhi.w	8001912 <_Z16StartDefaultTaskPv+0x2f6>
 8001b08:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001b0c:	f1c3 030a 	rsb	r3, r3, #10
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 ff0b 	bl	800792c <osDelay>
	  }
 8001b16:	e6fc      	b.n	8001912 <_Z16StartDefaultTaskPv+0x2f6>
 8001b18:	0801bee8 	.word	0x0801bee8

08001b1c <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	TIM2 -> CCR1 = pwms[0];
 8001b24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2 -> CCR2 = pwms[1];
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR3 = pwms[2];
 8001b38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM2 -> CCR4 = pwms[3];
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	6413      	str	r3, [r2, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = pwms[4];
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <set_pwms+0x5c>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3 -> CCR2 = pwms[5];
 8001b54:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <set_pwms+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3 -> CCR3 = pwms[6];
 8001b5c:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <set_pwms+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[7];
 8001b64:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <set_pwms+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40000400 	.word	0x40000400

08001b7c <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE;
 8001b80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b84:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b88:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE;
 8001b8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b8e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b92:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE;
 8001b94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b98:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE;
 8001b9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ba2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = PWM_IDLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <set_pwm_idle+0x58>)
 8001baa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001bae:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <set_pwm_idle+0x58>)
 8001bb2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001bb6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <set_pwm_idle+0x58>)
 8001bba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001bbe:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <set_pwm_idle+0x58>)
 8001bc2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40000400 	.word	0x40000400

08001bd8 <clamp_pwm_output>:
void clamp_pwm_output(uint32_t pwms[], int N) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	81fb      	strh	r3, [r7, #14]
 8001be6:	e023      	b.n	8001c30 <clamp_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d807      	bhi.n	8001c0a <clamp_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e00f      	b.n	8001c2a <clamp_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001c0a:	89fb      	ldrh	r3, [r7, #14]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d906      	bls.n	8001c2a <clamp_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001c28:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001c2a:	89fb      	ldrh	r3, [r7, #14]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	81fb      	strh	r3, [r7, #14]
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	dcd7      	bgt.n	8001be8 <clamp_pwm_output+0x10>
	}
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <imu_subscription_callback>:

    pid->A0 = Kp + Ki + Kd;
    pid->A1 = -Kp - 2 * Kd;
    pid->A2 = Kd;
}
void imu_subscription_callback(const void * msgin) {
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	const sensor_msgs__msg__Imu * msg = (const sensor_msgs__msg__Imu *)msgin;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <cmd_vel_subscription_callback>:
void cmd_vel_subscription_callback (const void * msgin) {
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]

}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <arm_disarm_service_callback>:
void arm_disarm_service_callback(const void * request_msg, void * response_msg) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
	std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
	std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	60bb      	str	r3, [r7, #8]

	// Handle request message and set the response message values
	rov_arm_mode = req_in->data ? ROV_ARMED : ROV_DISARMED;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <arm_disarm_service_callback+0x1e>
 8001c8e:	2201      	movs	r2, #1
 8001c90:	e000      	b.n	8001c94 <arm_disarm_service_callback+0x20>
 8001c92:	2200      	movs	r2, #0
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <arm_disarm_service_callback+0x54>)
 8001c96:	701a      	strb	r2, [r3, #0]
	printf("%d: arm mode.\n", (int)rov_arm_mode);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <arm_disarm_service_callback+0x54>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480a      	ldr	r0, [pc, #40]	@ (8001ccc <arm_disarm_service_callback+0x58>)
 8001ca2:	f019 f91b 	bl	801aedc <iprintf>
	res_in->success = true;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
	res_in->message.capacity = 2;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	60da      	str	r2, [r3, #12]
	res_in->message.size = strlen(empty_string);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	609a      	str	r2, [r3, #8]
	res_in->message.data = empty_string;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <arm_disarm_service_callback+0x5c>)
 8001cbc:	605a      	str	r2, [r3, #4]
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20008834 	.word	0x20008834
 8001ccc:	0801bf04 	.word	0x0801bf04
 8001cd0:	20008838 	.word	0x20008838

08001cd4 <set_nav_mode_service_callback>:
void set_nav_mode_service_callback(const void * request_msg, void * response_msg) {
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	nereo_interfaces__srv__SetNavigationMode_Request * req_in = (nereo_interfaces__srv__SetNavigationMode_Request *) request_msg;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
	nereo_interfaces__srv__SetNavigationMode_Response * res_in = (nereo_interfaces__srv__SetNavigationMode_Response *) response_msg;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	60bb      	str	r3, [r7, #8]

	navigation_mode = (NavigationModes)req_in->navigation_mode;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <set_nav_mode_service_callback+0x38>)
 8001cec:	701a      	strb	r2, [r3, #0]

	res_in->mode_after_set = navigation_mode;
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <set_nav_mode_service_callback+0x38>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	705a      	strb	r2, [r3, #1]
	res_in->success = true;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20008835 	.word	0x20008835

08001d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b26      	ldr	r3, [pc, #152]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a25      	ldr	r2, [pc, #148]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a17      	ldr	r2, [pc, #92]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	4a10      	ldr	r2, [pc, #64]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_GPIO_Init+0xd0>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2104      	movs	r1, #4
 8001db6:	480b      	ldr	r0, [pc, #44]	@ (8001de4 <MX_GPIO_Init+0xd4>)
 8001db8:	f002 fc7e 	bl	80046b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <MX_GPIO_Init+0xd4>)
 8001dd4:	f002 fac4 	bl	8004360 <HAL_GPIO_Init>

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	@ 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40021000 	.word	0x40021000

08001de8 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	ed87 0a05 	vstr	s0, [r7, #20]
 8001df2:	edc7 0a04 	vstr	s1, [r7, #16]
 8001df6:	ed87 1a03 	vstr	s2, [r7, #12]
 8001dfa:	edc7 1a02 	vstr	s3, [r7, #8]
 8001dfe:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001e02:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e0a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e1e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e26:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e36:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	76fb      	strb	r3, [r7, #27]
 8001e5c:	e017      	b.n	8001e8e <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001e5e:	7efb      	ldrb	r3, [r7, #27]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	eef0 7ae7 	vabs.f32	s15, s15
 8001e6e:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001e72:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e82:	dd01      	ble.n	8001e88 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001e88:	7efb      	ldrb	r3, [r7, #27]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	76fb      	strb	r3, [r7, #27]
 8001e8e:	7efa      	ldrb	r2, [r7, #27]
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3e3      	bcc.n	8001e5e <normalize_vector+0x1a>
        }
    }

	if (max_abs_value > 1)
 8001e96:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	dc00      	bgt.n	8001eaa <normalize_vector+0x66>
		for (uint8_t i = 0; i < size; i++)
		{
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001ea8:	e019      	b.n	8001ede <normalize_vector+0x9a>
		for (uint8_t i = 0; i < size; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	76bb      	strb	r3, [r7, #26]
 8001eae:	e012      	b.n	8001ed6 <normalize_vector+0x92>
			output_array[i] = input_array[i] / max_abs_value;
 8001eb0:	7ebb      	ldrb	r3, [r7, #26]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	edd3 6a00 	vldr	s13, [r3]
 8001ebc:	7ebb      	ldrb	r3, [r7, #26]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++)
 8001ed0:	7ebb      	ldrb	r3, [r7, #26]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	76bb      	strb	r3, [r7, #26]
 8001ed6:	7eba      	ldrb	r2, [r7, #26]
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d3e8      	bcc.n	8001eb0 <normalize_vector+0x6c>
}
 8001ede:	bf00      	nop
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ef2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ef6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d013      	beq.n	8001f2a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f02:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f06:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001f0a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f12:	e000      	b.n	8001f16 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f14:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f16:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f9      	beq.n	8001f14 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f2a:	687b      	ldr	r3, [r7, #4]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f001 fcc6 	bl	80038cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f40:	f000 f84a 	bl	8001fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f44:	f7ff fee4 	bl	8001d10 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f48:	f7ff fa80 	bl	800144c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f4c:	f000 fe02 	bl	8002b54 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001f50:	f000 fc0e 	bl	8002770 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f54:	f000 fc86 	bl	8002864 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Printf debugging is working! Yay!\n");
 8001f58:	481b      	ldr	r0, [pc, #108]	@ (8001fc8 <main+0x90>)
 8001f5a:	f019 f827 	bl	801afac <puts>
  HAL_TIM_Base_Start(&htim2);
 8001f5e:	481b      	ldr	r0, [pc, #108]	@ (8001fcc <main+0x94>)
 8001f60:	f003 f924 	bl	80051ac <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001f64:	2100      	movs	r1, #0
 8001f66:	4819      	ldr	r0, [pc, #100]	@ (8001fcc <main+0x94>)
 8001f68:	f003 fa48 	bl	80053fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4817      	ldr	r0, [pc, #92]	@ (8001fcc <main+0x94>)
 8001f70:	f003 fa44 	bl	80053fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001f74:	2108      	movs	r1, #8
 8001f76:	4815      	ldr	r0, [pc, #84]	@ (8001fcc <main+0x94>)
 8001f78:	f003 fa40 	bl	80053fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001f7c:	210c      	movs	r1, #12
 8001f7e:	4813      	ldr	r0, [pc, #76]	@ (8001fcc <main+0x94>)
 8001f80:	f003 fa3c 	bl	80053fc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 8001f84:	4812      	ldr	r0, [pc, #72]	@ (8001fd0 <main+0x98>)
 8001f86:	f003 f911 	bl	80051ac <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4810      	ldr	r0, [pc, #64]	@ (8001fd0 <main+0x98>)
 8001f8e:	f003 fa35 	bl	80053fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001f92:	2104      	movs	r1, #4
 8001f94:	480e      	ldr	r0, [pc, #56]	@ (8001fd0 <main+0x98>)
 8001f96:	f003 fa31 	bl	80053fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <main+0x98>)
 8001f9e:	f003 fa2d 	bl	80053fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001fa2:	210c      	movs	r1, #12
 8001fa4:	480a      	ldr	r0, [pc, #40]	@ (8001fd0 <main+0x98>)
 8001fa6:	f003 fa29 	bl	80053fc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001faa:	f005 fbe3 	bl	8007774 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001fae:	f7ff fb23 	bl	80015f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fb2:	f005 fc03 	bl	80077bc <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Error starting freeRTOS Scheduler.\n");
 8001fb6:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <main+0x9c>)
 8001fb8:	f018 fff8 	bl	801afac <puts>
	  HAL_Delay(1000);
 8001fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc0:	f001 fcc6 	bl	8003950 <HAL_Delay>
	  printf("Error starting freeRTOS Scheduler.\n");
 8001fc4:	bf00      	nop
 8001fc6:	e7f6      	b.n	8001fb6 <main+0x7e>
 8001fc8:	0801bf14 	.word	0x0801bf14
 8001fcc:	200088b0 	.word	0x200088b0
 8001fd0:	200088f8 	.word	0x200088f8
 8001fd4:	0801bf38 	.word	0x0801bf38

08001fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b094      	sub	sp, #80	@ 0x50
 8001fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	2234      	movs	r2, #52	@ 0x34
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f019 f847 	bl	801b07a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <SystemClock_Config+0xdc>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	4a2b      	ldr	r2, [pc, #172]	@ (80020b4 <SystemClock_Config+0xdc>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200a:	6413      	str	r3, [r2, #64]	@ 0x40
 800200c:	4b29      	ldr	r3, [pc, #164]	@ (80020b4 <SystemClock_Config+0xdc>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002018:	2300      	movs	r3, #0
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	4b26      	ldr	r3, [pc, #152]	@ (80020b8 <SystemClock_Config+0xe0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a25      	ldr	r2, [pc, #148]	@ (80020b8 <SystemClock_Config+0xe0>)
 8002022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <SystemClock_Config+0xe0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002034:	2301      	movs	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800203c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800203e:	2302      	movs	r3, #2
 8002040:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002042:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002046:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002048:	2308      	movs	r3, #8
 800204a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 800204c:	23c3      	movs	r3, #195	@ 0xc3
 800204e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002050:	2302      	movs	r3, #2
 8002052:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002054:	2304      	movs	r3, #4
 8002056:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002058:	2302      	movs	r3, #2
 800205a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4618      	mov	r0, r3
 8002062:	f002 fdcf 	bl	8004c04 <HAL_RCC_OscConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800206c:	f000 f854 	bl	8002118 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002070:	f002 fb3c 	bl	80046ec <HAL_PWREx_EnableOverDrive>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800207a:	f000 f84d 	bl	8002118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207e:	230f      	movs	r3, #15
 8002080:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002082:	2302      	movs	r3, #2
 8002084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800208a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800208e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002094:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2105      	movs	r1, #5
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fb75 	bl	800478c <HAL_RCC_ClockConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80020a8:	f000 f836 	bl	8002118 <Error_Handler>
  }
}
 80020ac:	bf00      	nop
 80020ae:	3750      	adds	r7, #80	@ 0x50
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40007000 	.word	0x40007000

080020bc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e009      	b.n	80020e2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	60ba      	str	r2, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff07 	bl	8001eea <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3301      	adds	r3, #1
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	dbf1      	blt.n	80020ce <_write+0x12>
  }
  return len;
 80020ea:	687b      	ldr	r3, [r7, #4]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002106:	f001 fc03 	bl	8003910 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000

08002118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800211c:	b672      	cpsid	i
}
 800211e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <Error_Handler+0x8>

08002124 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800212e:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <microros_allocate+0x3c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	461a      	mov	r2, r3
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <microros_allocate+0x3c>)
 800213c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <microros_allocate+0x40>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <microros_allocate+0x40>)
 800214c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe ff2c 	bl	8000fac <pvPortMallocMicroROS>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20008858 	.word	0x20008858
 8002164:	2000885c 	.word	0x2000885c

08002168 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00c      	beq.n	8002192 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff f83b 	bl	80011f4 <getBlockSize>
 800217e:	4603      	mov	r3, r0
 8002180:	4a06      	ldr	r2, [pc, #24]	@ (800219c <microros_deallocate+0x34>)
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	461a      	mov	r2, r3
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <microros_deallocate+0x34>)
 800218a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7fe ffd5 	bl	800113c <vPortFreeMicroROS>
  }
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000885c 	.word	0x2000885c

080021a0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <microros_reallocate+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4413      	add	r3, r2
 80021b6:	461a      	mov	r2, r3
 80021b8:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <microros_reallocate+0x64>)
 80021ba:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <microros_reallocate+0x68>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <microros_reallocate+0x68>)
 80021ca:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d104      	bne.n	80021dc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80021d2:	68b8      	ldr	r0, [r7, #8]
 80021d4:	f7fe feea 	bl	8000fac <pvPortMallocMicroROS>
 80021d8:	4603      	mov	r3, r0
 80021da:	e00e      	b.n	80021fa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff f809 	bl	80011f4 <getBlockSize>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a08      	ldr	r2, [pc, #32]	@ (8002208 <microros_reallocate+0x68>)
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <microros_reallocate+0x68>)
 80021ee:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff f81c 	bl	8001230 <pvPortReallocMicroROS>
 80021f8:	4603      	mov	r3, r0
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20008858 	.word	0x20008858
 8002208:	2000885c 	.word	0x2000885c

0800220c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	4a0c      	ldr	r2, [pc, #48]	@ (8002254 <microros_zero_allocate+0x48>)
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	4413      	add	r3, r2
 8002226:	461a      	mov	r2, r3
 8002228:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <microros_zero_allocate+0x48>)
 800222a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	4a08      	ldr	r2, [pc, #32]	@ (8002258 <microros_zero_allocate+0x4c>)
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	4413      	add	r3, r2
 800223a:	461a      	mov	r2, r3
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <microros_zero_allocate+0x4c>)
 800223e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002240:	68b9      	ldr	r1, [r7, #8]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f7ff f821 	bl	800128a <pvPortCallocMicroROS>
 8002248:	4603      	mov	r3, r0
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20008858 	.word	0x20008858
 8002258:	2000885c 	.word	0x2000885c
 800225c:	00000000 	.word	0x00000000

08002260 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002260:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002272:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002276:	a320      	add	r3, pc, #128	@ (adr r3, 80022f8 <UTILS_NanosecondsToTimespec+0x98>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe fcce 	bl	8000c1c <__aeabi_ldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800228a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800228e:	a31a      	add	r3, pc, #104	@ (adr r3, 80022f8 <UTILS_NanosecondsToTimespec+0x98>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe fcc2 	bl	8000c1c <__aeabi_ldivmod>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	da20      	bge.n	80022e6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <UTILS_NanosecondsToTimespec+0x90>)
 80022aa:	fb82 1203 	smull	r1, r2, r2, r3
 80022ae:	1712      	asrs	r2, r2, #28
 80022b0:	17db      	asrs	r3, r3, #31
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	6979      	ldr	r1, [r7, #20]
 80022c0:	17c8      	asrs	r0, r1, #31
 80022c2:	460c      	mov	r4, r1
 80022c4:	4605      	mov	r5, r0
 80022c6:	ebb2 0804 	subs.w	r8, r2, r4
 80022ca:	eb63 0905 	sbc.w	r9, r3, r5
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4906      	ldr	r1, [pc, #24]	@ (80022f4 <UTILS_NanosecondsToTimespec+0x94>)
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	441a      	add	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
    }
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022f0:	44b82fa1 	.word	0x44b82fa1
 80022f4:	3b9aca00 	.word	0x3b9aca00
 80022f8:	3b9aca00 	.word	0x3b9aca00
 80022fc:	00000000 	.word	0x00000000

08002300 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b08e      	sub	sp, #56	@ 0x38
 8002306:	af00      	add	r7, sp, #0
 8002308:	6278      	str	r0, [r7, #36]	@ 0x24
 800230a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800230c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002310:	2300      	movs	r3, #0
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002322:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002326:	4618      	mov	r0, r3
 8002328:	f006 fdcc 	bl	8008ec4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232e:	17da      	asrs	r2, r3, #31
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	61fa      	str	r2, [r7, #28]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	000b      	movs	r3, r1
 8002340:	2200      	movs	r2, #0
 8002342:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002348:	2200      	movs	r2, #0
 800234a:	461c      	mov	r4, r3
 800234c:	4615      	mov	r5, r2
 800234e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002352:	1911      	adds	r1, r2, r4
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	416b      	adcs	r3, r5
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800235e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002362:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	f04f 0400 	mov.w	r4, #0
 800236e:	f04f 0500 	mov.w	r5, #0
 8002372:	015d      	lsls	r5, r3, #5
 8002374:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002378:	0154      	lsls	r4, r2, #5
 800237a:	4622      	mov	r2, r4
 800237c:	462b      	mov	r3, r5
 800237e:	ebb2 0800 	subs.w	r8, r2, r0
 8002382:	eb63 0901 	sbc.w	r9, r3, r1
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002392:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002396:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800239a:	4690      	mov	r8, r2
 800239c:	4699      	mov	r9, r3
 800239e:	eb18 0a00 	adds.w	sl, r8, r0
 80023a2:	eb49 0b01 	adc.w	fp, r9, r1
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023b2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023b6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ba:	ebb2 040a 	subs.w	r4, r2, sl
 80023be:	603c      	str	r4, [r7, #0]
 80023c0:	eb63 030b 	sbc.w	r3, r3, fp
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ca:	4623      	mov	r3, r4
 80023cc:	181b      	adds	r3, r3, r0
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	462b      	mov	r3, r5
 80023d2:	eb41 0303 	adc.w	r3, r1, r3
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	6a3a      	ldr	r2, [r7, #32]
 80023da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023de:	f7ff ff3f 	bl	8002260 <UTILS_NanosecondsToTimespec>

    return 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	3738      	adds	r7, #56	@ 0x38
 80023e8:	46bd      	mov	sp, r7
 80023ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_MspInit+0x54>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <HAL_MspInit+0x54>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002404:	6453      	str	r3, [r2, #68]	@ 0x44
 8002406:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <HAL_MspInit+0x54>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_MspInit+0x54>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <HAL_MspInit+0x54>)
 800241c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_MspInit+0x54>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	210f      	movs	r1, #15
 8002432:	f06f 0001 	mvn.w	r0, #1
 8002436:	f001 fb67 	bl	8003b08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	@ 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <HAL_InitTick+0xd4>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002460:	4a2e      	ldr	r2, [pc, #184]	@ (800251c <HAL_InitTick+0xd4>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6453      	str	r3, [r2, #68]	@ 0x44
 8002468:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <HAL_InitTick+0xd4>)
 800246a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002474:	f107 020c 	add.w	r2, r7, #12
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f002 fb8e 	bl	8004ba0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002484:	f002 fb78 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8002488:	4603      	mov	r3, r0
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800248e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002490:	4a23      	ldr	r2, [pc, #140]	@ (8002520 <HAL_InitTick+0xd8>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9b      	lsrs	r3, r3, #18
 8002498:	3b01      	subs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800249c:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <HAL_InitTick+0xdc>)
 800249e:	4a22      	ldr	r2, [pc, #136]	@ (8002528 <HAL_InitTick+0xe0>)
 80024a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <HAL_InitTick+0xdc>)
 80024a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002524 <HAL_InitTick+0xdc>)
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <HAL_InitTick+0xdc>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_InitTick+0xdc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <HAL_InitTick+0xdc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80024c2:	4818      	ldr	r0, [pc, #96]	@ (8002524 <HAL_InitTick+0xdc>)
 80024c4:	f002 fe22 	bl	800510c <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80024ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11b      	bne.n	800250e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80024d6:	4813      	ldr	r0, [pc, #76]	@ (8002524 <HAL_InitTick+0xdc>)
 80024d8:	f002 fed0 	bl	800527c <HAL_TIM_Base_Start_IT>
 80024dc:	4603      	mov	r3, r0
 80024de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80024e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d111      	bne.n	800250e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024ea:	2019      	movs	r0, #25
 80024ec:	f001 fb28 	bl	8003b40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	d808      	bhi.n	8002508 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80024f6:	2200      	movs	r2, #0
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	2019      	movs	r0, #25
 80024fc:	f001 fb04 	bl	8003b08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002500:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <HAL_InitTick+0xe4>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e002      	b.n	800250e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800250e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002512:	4618      	mov	r0, r3
 8002514:	3730      	adds	r7, #48	@ 0x30
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	431bde83 	.word	0x431bde83
 8002524:	20008860 	.word	0x20008860
 8002528:	40010000 	.word	0x40010000
 800252c:	200000c8 	.word	0x200000c8

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <NMI_Handler+0x4>

08002538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HardFault detected\n");
 800253e:	480c      	ldr	r0, [pc, #48]	@ (8002570 <HardFault_Handler+0x38>)
 8002540:	f018 fd34 	bl	801afac <puts>
  uint32_t bus_fault_address = SCB->BFAR;    // Bus fault address register
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HardFault_Handler+0x3c>)
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	607b      	str	r3, [r7, #4]
  uint32_t cfsr = SCB->CFSR;                // Configurable Fault Status Register
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HardFault_Handler+0x3c>)
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	603b      	str	r3, [r7, #0]

  if (cfsr & (1 << 1)) {                    // If BFARVALID is set
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HardFault_Handler+0x2c>
	printf("Imprecise bus fault at address: 0x%08lx\n", bus_fault_address);
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4806      	ldr	r0, [pc, #24]	@ (8002578 <HardFault_Handler+0x40>)
 800255e:	f018 fcbd 	bl	801aedc <iprintf>
 8002562:	e003      	b.n	800256c <HardFault_Handler+0x34>
  } else {
	printf("Imprecise bus fault occurred, but address is not valid\n");
 8002564:	4805      	ldr	r0, [pc, #20]	@ (800257c <HardFault_Handler+0x44>)
 8002566:	f018 fd21 	bl	801afac <puts>
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <HardFault_Handler+0x34>
 8002570:	0801bf5c 	.word	0x0801bf5c
 8002574:	e000ed00 	.word	0xe000ed00
 8002578:	0801bf70 	.word	0x0801bf70
 800257c:	0801bf9c 	.word	0x0801bf9c

08002580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <MemManage_Handler+0x4>

08002588 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <BusFault_Handler+0x4>

08002590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <UsageFault_Handler+0x4>

08002598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025ae:	f002 ffed 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20008860 	.word	0x20008860

080025bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <USART1_IRQHandler+0x10>)
 80025c2:	f003 ff95 	bl	80064f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20008940 	.word	0x20008940

080025d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <DMA2_Stream2_IRQHandler+0x10>)
 80025d6:	f001 fc59 	bl	8003e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20008988 	.word	0x20008988

080025e4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025e8:	4802      	ldr	r0, [pc, #8]	@ (80025f4 <DMA2_Stream7_IRQHandler+0x10>)
 80025ea:	f001 fc4f 	bl	8003e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200089e8 	.word	0x200089e8

080025f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return 1;
 80025fc:	2301      	movs	r3, #1
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_kill>:

int _kill(int pid, int sig)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002612:	f018 fd6d 	bl	801b0f0 <__errno>
 8002616:	4603      	mov	r3, r0
 8002618:	2216      	movs	r2, #22
 800261a:	601a      	str	r2, [r3, #0]
  return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <_exit>:

void _exit (int status)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002630:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ffe7 	bl	8002608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800263a:	bf00      	nop
 800263c:	e7fd      	b.n	800263a <_exit+0x12>

0800263e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e00a      	b.n	8002666 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002650:	f3af 8000 	nop.w
 8002654:	4601      	mov	r1, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	60ba      	str	r2, [r7, #8]
 800265c:	b2ca      	uxtb	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3301      	adds	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	429a      	cmp	r2, r3
 800266c:	dbf0      	blt.n	8002650 <_read+0x12>
  }

  return len;
 800266e:	687b      	ldr	r3, [r7, #4]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026a0:	605a      	str	r2, [r3, #4]
  return 0;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_isatty>:

int _isatty(int file)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e8:	4a14      	ldr	r2, [pc, #80]	@ (800273c <_sbrk+0x5c>)
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <_sbrk+0x60>)
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f4:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <_sbrk+0x64>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	@ (8002748 <_sbrk+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002702:	4b10      	ldr	r3, [pc, #64]	@ (8002744 <_sbrk+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d207      	bcs.n	8002720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002710:	f018 fcee 	bl	801b0f0 <__errno>
 8002714:	4603      	mov	r3, r0
 8002716:	220c      	movs	r2, #12
 8002718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800271a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800271e:	e009      	b.n	8002734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002720:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002726:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	4a05      	ldr	r2, [pc, #20]	@ (8002744 <_sbrk+0x64>)
 8002730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20050000 	.word	0x20050000
 8002740:	00000400 	.word	0x00000400
 8002744:	200088ac 	.word	0x200088ac
 8002748:	20016090 	.word	0x20016090

0800274c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <SystemInit+0x20>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002756:	4a05      	ldr	r2, [pc, #20]	@ (800276c <SystemInit+0x20>)
 8002758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	@ 0x28
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002776:	f107 0320 	add.w	r3, r7, #32
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	611a      	str	r2, [r3, #16]
 800278e:	615a      	str	r2, [r3, #20]
 8002790:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002792:	4b33      	ldr	r3, [pc, #204]	@ (8002860 <MX_TIM2_Init+0xf0>)
 8002794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800279a:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <MX_TIM2_Init+0xf0>)
 800279c:	2259      	movs	r2, #89	@ 0x59
 800279e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002860 <MX_TIM2_Init+0xf0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80027a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <MX_TIM2_Init+0xf0>)
 80027a8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80027ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <MX_TIM2_Init+0xf0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <MX_TIM2_Init+0xf0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027ba:	4829      	ldr	r0, [pc, #164]	@ (8002860 <MX_TIM2_Init+0xf0>)
 80027bc:	f002 fdce 	bl	800535c <HAL_TIM_PWM_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80027c6:	f7ff fca7 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d2:	f107 0320 	add.w	r3, r7, #32
 80027d6:	4619      	mov	r1, r3
 80027d8:	4821      	ldr	r0, [pc, #132]	@ (8002860 <MX_TIM2_Init+0xf0>)
 80027da:	f003 fc95 	bl	8006108 <HAL_TIMEx_MasterConfigSynchronization>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80027e4:	f7ff fc98 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e8:	2360      	movs	r3, #96	@ 0x60
 80027ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 80027ec:	f240 53db 	movw	r3, #1499	@ 0x5db
 80027f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	4619      	mov	r1, r3
 8002800:	4817      	ldr	r0, [pc, #92]	@ (8002860 <MX_TIM2_Init+0xf0>)
 8002802:	f002 ffb3 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800280c:	f7ff fc84 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2204      	movs	r2, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4812      	ldr	r0, [pc, #72]	@ (8002860 <MX_TIM2_Init+0xf0>)
 8002818:	f002 ffa8 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002822:	f7ff fc79 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2208      	movs	r2, #8
 800282a:	4619      	mov	r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	@ (8002860 <MX_TIM2_Init+0xf0>)
 800282e:	f002 ff9d 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8002838:	f7ff fc6e 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	220c      	movs	r2, #12
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	@ (8002860 <MX_TIM2_Init+0xf0>)
 8002844:	f002 ff92 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800284e:	f7ff fc63 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002852:	4803      	ldr	r0, [pc, #12]	@ (8002860 <MX_TIM2_Init+0xf0>)
 8002854:	f000 f8e0 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	@ 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200088b0 	.word	0x200088b0

08002864 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08e      	sub	sp, #56	@ 0x38
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	f107 0320 	add.w	r3, r7, #32
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
 8002890:	615a      	str	r2, [r3, #20]
 8002892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002894:	4b3d      	ldr	r3, [pc, #244]	@ (800298c <MX_TIM3_Init+0x128>)
 8002896:	4a3e      	ldr	r2, [pc, #248]	@ (8002990 <MX_TIM3_Init+0x12c>)
 8002898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800289a:	4b3c      	ldr	r3, [pc, #240]	@ (800298c <MX_TIM3_Init+0x128>)
 800289c:	2259      	movs	r2, #89	@ 0x59
 800289e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b3a      	ldr	r3, [pc, #232]	@ (800298c <MX_TIM3_Init+0x128>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80028a6:	4b39      	ldr	r3, [pc, #228]	@ (800298c <MX_TIM3_Init+0x128>)
 80028a8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80028ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ae:	4b37      	ldr	r3, [pc, #220]	@ (800298c <MX_TIM3_Init+0x128>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b4:	4b35      	ldr	r3, [pc, #212]	@ (800298c <MX_TIM3_Init+0x128>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028ba:	4834      	ldr	r0, [pc, #208]	@ (800298c <MX_TIM3_Init+0x128>)
 80028bc:	f002 fc26 	bl	800510c <HAL_TIM_Base_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80028c6:	f7ff fc27 	bl	8002118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028d4:	4619      	mov	r1, r3
 80028d6:	482d      	ldr	r0, [pc, #180]	@ (800298c <MX_TIM3_Init+0x128>)
 80028d8:	f003 f80a 	bl	80058f0 <HAL_TIM_ConfigClockSource>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80028e2:	f7ff fc19 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028e6:	4829      	ldr	r0, [pc, #164]	@ (800298c <MX_TIM3_Init+0x128>)
 80028e8:	f002 fd38 	bl	800535c <HAL_TIM_PWM_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80028f2:	f7ff fc11 	bl	8002118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028fe:	f107 0320 	add.w	r3, r7, #32
 8002902:	4619      	mov	r1, r3
 8002904:	4821      	ldr	r0, [pc, #132]	@ (800298c <MX_TIM3_Init+0x128>)
 8002906:	f003 fbff 	bl	8006108 <HAL_TIMEx_MasterConfigSynchronization>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002910:	f7ff fc02 	bl	8002118 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002914:	2360      	movs	r3, #96	@ 0x60
 8002916:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 8002918:	f240 53db 	movw	r3, #1499	@ 0x5db
 800291c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	2200      	movs	r2, #0
 800292a:	4619      	mov	r1, r3
 800292c:	4817      	ldr	r0, [pc, #92]	@ (800298c <MX_TIM3_Init+0x128>)
 800292e:	f002 ff1d 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002938:	f7ff fbee 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2204      	movs	r2, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4812      	ldr	r0, [pc, #72]	@ (800298c <MX_TIM3_Init+0x128>)
 8002944:	f002 ff12 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800294e:	f7ff fbe3 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	2208      	movs	r2, #8
 8002956:	4619      	mov	r1, r3
 8002958:	480c      	ldr	r0, [pc, #48]	@ (800298c <MX_TIM3_Init+0x128>)
 800295a:	f002 ff07 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002964:	f7ff fbd8 	bl	8002118 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	220c      	movs	r2, #12
 800296c:	4619      	mov	r1, r3
 800296e:	4807      	ldr	r0, [pc, #28]	@ (800298c <MX_TIM3_Init+0x128>)
 8002970:	f002 fefc 	bl	800576c <HAL_TIM_PWM_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800297a:	f7ff fbcd 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800297e:	4803      	ldr	r0, [pc, #12]	@ (800298c <MX_TIM3_Init+0x128>)
 8002980:	f000 f84a 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 8002984:	bf00      	nop
 8002986:	3738      	adds	r7, #56	@ 0x38
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	200088f8 	.word	0x200088f8
 8002990:	40000400 	.word	0x40000400

08002994 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a4:	d10d      	bne.n	80029c2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800

080029d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a10 <HAL_TIM_Base_MspInit+0x3c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10d      	bne.n	8002a02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_TIM_Base_MspInit+0x40>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a09      	ldr	r2, [pc, #36]	@ (8002a14 <HAL_TIM_Base_MspInit+0x40>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <HAL_TIM_Base_MspInit+0x40>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	@ 0x30
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 031c 	add.w	r3, r7, #28
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a38:	d11e      	bne.n	8002a78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	4b40      	ldr	r3, [pc, #256]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a3f      	ldr	r2, [pc, #252]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	61bb      	str	r3, [r7, #24]
 8002a54:	69bb      	ldr	r3, [r7, #24]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8002a56:	232e      	movs	r3, #46	@ 0x2e
 8002a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4834      	ldr	r0, [pc, #208]	@ (8002b44 <HAL_TIM_MspPostInit+0x12c>)
 8002a72:	f001 fc75 	bl	8004360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a76:	e05e      	b.n	8002b36 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a32      	ldr	r2, [pc, #200]	@ (8002b48 <HAL_TIM_MspPostInit+0x130>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d159      	bne.n	8002b36 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	4b2e      	ldr	r3, [pc, #184]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a92:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a26      	ldr	r2, [pc, #152]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_TIM_MspPostInit+0x128>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ad6:	2340      	movs	r3, #64	@ 0x40
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	f107 031c 	add.w	r3, r7, #28
 8002aee:	4619      	mov	r1, r3
 8002af0:	4814      	ldr	r0, [pc, #80]	@ (8002b44 <HAL_TIM_MspPostInit+0x12c>)
 8002af2:	f001 fc35 	bl	8004360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002af6:	2303      	movs	r3, #3
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b06:	2302      	movs	r3, #2
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480e      	ldr	r0, [pc, #56]	@ (8002b4c <HAL_TIM_MspPostInit+0x134>)
 8002b12:	f001 fc25 	bl	8004360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b26:	2302      	movs	r3, #2
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4807      	ldr	r0, [pc, #28]	@ (8002b50 <HAL_TIM_MspPostInit+0x138>)
 8002b32:	f001 fc15 	bl	8004360 <HAL_GPIO_Init>
}
 8002b36:	bf00      	nop
 8002b38:	3730      	adds	r7, #48	@ 0x30
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800

08002b54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ba4 <MX_USART1_UART_Init+0x50>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_USART1_UART_Init+0x4c>)
 8002b8c:	f003 fb4c 	bl	8006228 <HAL_UART_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b96:	f7ff fabf 	bl	8002118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20008940 	.word	0x20008940
 8002ba4:	40011000 	.word	0x40011000

08002ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	@ 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cfc <HAL_UART_MspInit+0x154>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	f040 8094 	bne.w	8002cf4 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d00 <HAL_UART_MspInit+0x158>)
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8002d00 <HAL_UART_MspInit+0x158>)
 8002bd6:	f043 0310 	orr.w	r3, r3, #16
 8002bda:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bdc:	4b48      	ldr	r3, [pc, #288]	@ (8002d00 <HAL_UART_MspInit+0x158>)
 8002bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	4b44      	ldr	r3, [pc, #272]	@ (8002d00 <HAL_UART_MspInit+0x158>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	4a43      	ldr	r2, [pc, #268]	@ (8002d00 <HAL_UART_MspInit+0x158>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf8:	4b41      	ldr	r3, [pc, #260]	@ (8002d00 <HAL_UART_MspInit+0x158>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c04:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c16:	2307      	movs	r3, #7
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4838      	ldr	r0, [pc, #224]	@ (8002d04 <HAL_UART_MspInit+0x15c>)
 8002c22:	f001 fb9d 	bl	8004360 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c26:	4b38      	ldr	r3, [pc, #224]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c28:	4a38      	ldr	r2, [pc, #224]	@ (8002d0c <HAL_UART_MspInit+0x164>)
 8002c2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c2c:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3a:	4b33      	ldr	r3, [pc, #204]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c40:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c48:	4b2f      	ldr	r3, [pc, #188]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002c54:	4b2c      	ldr	r3, [pc, #176]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c5a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c5e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c64:	4b28      	ldr	r3, [pc, #160]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c6a:	4827      	ldr	r0, [pc, #156]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c6c:	f000 ff76 	bl	8003b5c <HAL_DMA_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002c76:	f7ff fa4f 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c80:	4a21      	ldr	r2, [pc, #132]	@ (8002d08 <HAL_UART_MspInit+0x160>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c86:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002c88:	4a22      	ldr	r2, [pc, #136]	@ (8002d14 <HAL_UART_MspInit+0x16c>)
 8002c8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c8c:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002c8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c92:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c94:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002c96:	2240      	movs	r2, #64	@ 0x40
 8002c98:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002ca2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cae:	4b18      	ldr	r3, [pc, #96]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002cbc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cc0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc2:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cc8:	4811      	ldr	r0, [pc, #68]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002cca:	f000 ff47 	bl	8003b5c <HAL_DMA_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002cd4:	f7ff fa20 	bl	8002118 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0d      	ldr	r2, [pc, #52]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cde:	4a0c      	ldr	r2, [pc, #48]	@ (8002d10 <HAL_UART_MspInit+0x168>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2105      	movs	r1, #5
 8002ce8:	2025      	movs	r0, #37	@ 0x25
 8002cea:	f000 ff0d 	bl	8003b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cee:	2025      	movs	r0, #37	@ 0x25
 8002cf0:	f000 ff26 	bl	8003b40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3728      	adds	r7, #40	@ 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	20008988 	.word	0x20008988
 8002d0c:	40026440 	.word	0x40026440
 8002d10:	200089e8 	.word	0x200089e8
 8002d14:	400264b8 	.word	0x400264b8

08002d18 <calculate_pwm>:
 * @param pwm_output An array of 8 uint16_t values to store the calculated PWM output.
 * @return OK if the calculation was successful, MAT_MULT_ERROR if the matrix
 * multiplication failed.
 */
arm_status calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8])
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0a0      	sub	sp, #128	@ 0x80
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d28:	e011      	b.n	8002d4e <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 8002d2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	441a      	add	r2, r3
 8002d34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	3380      	adds	r3, #128	@ 0x80
 8002d3e:	443b      	add	r3, r7
 8002d40:	3b1c      	subs	r3, #28
 8002d42:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8002d44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d9e9      	bls.n	8002d2a <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 8002d56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d5a:	2206      	movs	r2, #6
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff f870 	bl	8001e44 <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8][1] = {0};
 8002d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d68:	2220      	movs	r2, #32
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f018 f984 	bl	801b07a <memset>

    arm_matrix_instance_f32 fixed_mixing_matrix_instance;
    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 8002d72:	f107 001c 	add.w	r0, r7, #28
 8002d76:	4b3e      	ldr	r3, [pc, #248]	@ (8002e70 <calculate_pwm+0x158>)
 8002d78:	2206      	movs	r2, #6
 8002d7a:	2108      	movs	r1, #8
 8002d7c:	f007 fbb4 	bl	800a4e8 <arm_mat_init_f32>
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 8002d80:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d84:	f107 0014 	add.w	r0, r7, #20
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2106      	movs	r1, #6
 8002d8c:	f007 fbac 	bl	800a4e8 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 8002d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d94:	f107 000c 	add.w	r0, r7, #12
 8002d98:	2201      	movs	r2, #1
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	f007 fba4 	bl	800a4e8 <arm_mat_init_f32>
    arm_status code = arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance);
 8002da0:	f107 020c 	add.w	r2, r7, #12
 8002da4:	f107 0114 	add.w	r1, r7, #20
 8002da8:	f107 031c 	add.w	r3, r7, #28
 8002dac:	4618      	mov	r0, r3
 8002dae:	f007 fa8b 	bl	800a2c8 <arm_mat_mult_f32>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    if (code != ARM_MATH_SUCCESS) return code;
 8002db8:	f997 307c 	ldrsb.w	r3, [r7, #124]	@ 0x7c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <calculate_pwm+0xae>
 8002dc0:	f997 307c 	ldrsb.w	r3, [r7, #124]	@ 0x7c
 8002dc4:	e04f      	b.n	8002e66 <calculate_pwm+0x14e>

    for (uint8_t i = 0; i < 8; i++) {
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002dcc:	e011      	b.n	8002df2 <calculate_pwm+0xda>
        f_pwm_output[i] = pwm_output_instance.pData[i];
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	441a      	add	r2, r3
 8002dd8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3380      	adds	r3, #128	@ 0x80
 8002de2:	443b      	add	r3, r7
 8002de4:	3b3c      	subs	r3, #60	@ 0x3c
 8002de6:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8002de8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002dec:	3301      	adds	r3, #1
 8002dee:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002df2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002df6:	2b07      	cmp	r3, #7
 8002df8:	d9e9      	bls.n	8002dce <calculate_pwm+0xb6>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 8002dfa:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002dfe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002e02:	2208      	movs	r2, #8
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f81d 	bl	8001e44 <normalize_vector>
    for (uint8_t i = 0; i < 8; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8002e10:	e024      	b.n	8002e5c <calculate_pwm+0x144>
    {
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 8002e12:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	3380      	adds	r3, #128	@ 0x80
 8002e1a:	443b      	add	r3, r7
 8002e1c:	3b3c      	subs	r3, #60	@ 0x3c
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	ed9f 2a14 	vldr	s4, [pc, #80]	@ 8002e74 <calculate_pwm+0x15c>
 8002e26:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8002e78 <calculate_pwm+0x160>
 8002e2a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002e2e:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002e32:	eeb0 0a67 	vmov.f32	s0, s15
 8002e36:	f7fe ffd7 	bl	8001de8 <linear_interpolation>
 8002e3a:	eef0 7a40 	vmov.f32	s15, s0
 8002e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e42:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	ee17 2a90 	vmov	r2, s15
 8002e50:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 8002e52:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002e56:	3301      	adds	r3, #1
 8002e58:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8002e5c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002e60:	2b07      	cmp	r3, #7
 8002e62:	d9d6      	bls.n	8002e12 <calculate_pwm+0xfa>
    }
    return ARM_MATH_SUCCESS;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3780      	adds	r7, #128	@ 0x80
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000008 	.word	0x20000008
 8002e74:	44ed8000 	.word	0x44ed8000
 8002e78:	44898000 	.word	0x44898000

08002e7c <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	ed93 7a00 	vldr	s14, [r3]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	edd3 6a02 	vldr	s13, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed2:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 8002ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	d110      	bne.n	8002f06 <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	601a      	str	r2, [r3, #0]
		return;
 8002f04:	e02d      	b.n	8002f62 <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	edd3 6a00 	vldr	s13, [r3]
 8002f0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f20:	eef1 6a67 	vneg.f32	s13, s15
 8002f24:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f38:	eef1 6a67 	vneg.f32	s13, s15
 8002f3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f50:	eef1 6a67 	vneg.f32	s13, s15
 8002f54:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	ed93 7a00 	vldr	s14, [r3]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	ed93 7a00 	vldr	s14, [r3]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	edd3 6a03 	vldr	s13, [r3, #12]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	edd3 7a02 	vldr	s15, [r3, #8]
 800300e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	edd3 7a02 	vldr	s15, [r3, #8]
 8003028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	edd3 7a03 	vldr	s15, [r3, #12]
 8003038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	edd3 6a02 	vldr	s13, [r3, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	edd3 7a00 	vldr	s15, [r3]
 800304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	edd3 6a03 	vldr	s13, [r3, #12]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	ed93 7a00 	vldr	s14, [r3]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	edd3 7a03 	vldr	s15, [r3, #12]
 800307a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	edd3 6a01 	vldr	s13, [r3, #4]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	edd3 7a02 	vldr	s15, [r3, #8]
 800308a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800308e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	edd3 6a02 	vldr	s13, [r3, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	edd3 7a01 	vldr	s15, [r3, #4]
 800309e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	0000      	movs	r0, r0
	...

080030d0 <calculate_rpy_from_quaternion>:
	if (value < min) return min;
	return value;
}

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 80030d0:	b5b0      	push	{r4, r5, r7, lr}
 80030d2:	b08c      	sub	sp, #48	@ 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	ed93 7a00 	vldr	s14, [r3]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80030e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80030f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003102:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	ed93 7a01 	vldr	s14, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	edd3 6a02 	vldr	s13, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800312e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003136:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 800313a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800313c:	f7fd fa2c 	bl	8000598 <__aeabi_f2d>
 8003140:	4604      	mov	r4, r0
 8003142:	460d      	mov	r5, r1
 8003144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003146:	f7fd fa27 	bl	8000598 <__aeabi_f2d>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	ec43 2b11 	vmov	d1, r2, r3
 8003152:	ec45 4b10 	vmov	d0, r4, r5
 8003156:	f016 ff69 	bl	801a02c <atan2>
 800315a:	ec53 2b10 	vmov	r2, r3, d0
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f7fd fd0b 	bl	8000b7c <__aeabi_d2f>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	arm_sqrt_f32(1 + 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &sinp);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	ed93 7a00 	vldr	s14, [r3]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	edd3 7a02 	vldr	s15, [r3, #8]
 8003178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	edd3 7a03 	vldr	s15, [r3, #12]
 8003188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800318c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003190:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003194:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800319c:	edc7 7a05 	vstr	s15, [r7, #20]
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80031a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b2:	db09      	blt.n	80031c8 <calculate_rpy_from_quaternion+0xf8>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80031b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80031b8:	f017 f800 	bl	801a1bc <sqrtf>
 80031bc:	eef0 7a40 	vmov.f32	s15, s0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80031c6:	e004      	b.n	80031d2 <calculate_rpy_from_quaternion+0x102>
    }
    else
    {
      *pOut = 0.0f;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80031d0:	bf00      	nop
	arm_sqrt_f32(1 - 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &cosp);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	ed93 7a00 	vldr	s14, [r3]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edd3 7a02 	vldr	s15, [r3, #8]
 80031de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80031ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003202:	edc7 7a07 	vstr	s15, [r7, #28]
 8003206:	f107 0308 	add.w	r3, r7, #8
 800320a:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 800320c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003210:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	db09      	blt.n	800322e <calculate_rpy_from_quaternion+0x15e>
      *pOut = sqrtf(in);
 800321a:	ed97 0a07 	vldr	s0, [r7, #28]
 800321e:	f016 ffcd 	bl	801a1bc <sqrtf>
 8003222:	eef0 7a40 	vmov.f32	s15, s0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800322c:	e004      	b.n	8003238 <calculate_rpy_from_quaternion+0x168>
      *pOut = 0.0f;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8003236:	bf00      	nop
	roll_pitch_yaw_radians[1] = 2 * atan2(sinp, cosp) - M_PI / 2;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f9ac 	bl	8000598 <__aeabi_f2d>
 8003240:	4604      	mov	r4, r0
 8003242:	460d      	mov	r5, r1
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f9a6 	bl	8000598 <__aeabi_f2d>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	ec43 2b11 	vmov	d1, r2, r3
 8003254:	ec45 4b10 	vmov	d0, r4, r5
 8003258:	f016 fee8 	bl	801a02c <atan2>
 800325c:	ec51 0b10 	vmov	r0, r1, d0
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	f7fd f83a 	bl	80002dc <__adddf3>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	a32d      	add	r3, pc, #180	@ (adr r3, 8003328 <calculate_rpy_from_quaternion+0x258>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fd f82f 	bl	80002d8 <__aeabi_dsub>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	1d1c      	adds	r4, r3, #4
 8003286:	f7fd fc79 	bl	8000b7c <__aeabi_d2f>
 800328a:	4603      	mov	r3, r0
 800328c:	6023      	str	r3, [r4, #0]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	ed93 7a00 	vldr	s14, [r3]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	edd3 7a03 	vldr	s15, [r3, #12]
 800329a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	edd3 6a01 	vldr	s13, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80032aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80032c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80032d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80032e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ea:	edc7 7a08 	vstr	s15, [r7, #32]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 80032ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032f0:	f7fd f952 	bl	8000598 <__aeabi_f2d>
 80032f4:	4604      	mov	r4, r0
 80032f6:	460d      	mov	r5, r1
 80032f8:	6a38      	ldr	r0, [r7, #32]
 80032fa:	f7fd f94d 	bl	8000598 <__aeabi_f2d>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	ec43 2b11 	vmov	d1, r2, r3
 8003306:	ec45 4b10 	vmov	d0, r4, r5
 800330a:	f016 fe8f 	bl	801a02c <atan2>
 800330e:	ec51 0b10 	vmov	r0, r1, d0
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	f103 0408 	add.w	r4, r3, #8
 8003318:	f7fd fc30 	bl	8000b7c <__aeabi_d2f>
 800331c:	4603      	mov	r3, r0
 800331e:	6023      	str	r3, [r4, #0]
}
 8003320:	bf00      	nop
 8003322:	3730      	adds	r7, #48	@ 0x30
 8003324:	46bd      	mov	sp, r7
 8003326:	bdb0      	pop	{r4, r5, r7, pc}
 8003328:	54442d18 	.word	0x54442d18
 800332c:	3ff921fb 	.word	0x3ff921fb

08003330 <update_setpoints>:

uint8_t update_setpoints(const float input_values[6], const Quaternion *quat, const float *water_pressure)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 8003340:	f107 0310 	add.w	r3, r7, #16
 8003344:	4619      	mov	r1, r3
 8003346:	68b8      	ldr	r0, [r7, #8]
 8003348:	f7ff fec2 	bl	80030d0 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++) {
 800334c:	2300      	movs	r3, #0
 800334e:	77bb      	strb	r3, [r7, #30]
 8003350:	e022      	b.n	8003398 <update_setpoints+0x68>
		if(fabsf(input_values[i+3]) < TOLERANCE)
 8003352:	7fbb      	ldrb	r3, [r7, #30]
 8003354:	3303      	adds	r3, #3
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	eef0 7ae7 	vabs.f32	s15, s15
 8003364:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80033a8 <update_setpoints+0x78>
 8003368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	d50f      	bpl.n	8003392 <update_setpoints+0x62>
		{
			setpoints[i+1] = rpy_rads[i+1];
 8003372:	7fbb      	ldrb	r3, [r7, #30]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	7fbb      	ldrb	r3, [r7, #30]
 8003378:	3301      	adds	r3, #1
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	3220      	adds	r2, #32
 800337e:	443a      	add	r2, r7
 8003380:	3a10      	subs	r2, #16
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	4909      	ldr	r1, [pc, #36]	@ (80033ac <update_setpoints+0x7c>)
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	601a      	str	r2, [r3, #0]
			count++;
 800338c:	7ffb      	ldrb	r3, [r7, #31]
 800338e:	3301      	adds	r3, #1
 8003390:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++) {
 8003392:	7fbb      	ldrb	r3, [r7, #30]
 8003394:	3301      	adds	r3, #1
 8003396:	77bb      	strb	r3, [r7, #30]
 8003398:	7fbb      	ldrb	r3, [r7, #30]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d9d9      	bls.n	8003352 <update_setpoints+0x22>
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */


	return count;
 800339e:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	3d4ccccd 	.word	0x3d4ccccd
 80033ac:	20008a48 	.word	0x20008a48

080033b0 <calculate_pwm_with_pid>:
        arm_pid_init_f32(&pids[i], 0);
    }
}

arm_status calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b0b0      	sub	sp, #192	@ 0xc0
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
	// The order for 4-elements arrays is: z, pitch, roll, yaw
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 80033be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80033c2:	3304      	adds	r3, #4
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fe82 	bl	80030d0 <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	66bb      	str	r3, [r7, #104]	@ 0x68

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff ffaa 	bl	8003330 <update_setpoints>
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 80033e2:	e011      	b.n	8003408 <calculate_pwm_with_pid+0x58>
 80033e4:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	441a      	add	r2, r3
 80033ee:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	33c0      	adds	r3, #192	@ 0xc0
 80033f8:	443b      	add	r3, r7
 80033fa:	3b70      	subs	r3, #112	@ 0x70
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003402:	3301      	adds	r3, #1
 8003404:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003408:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800340c:	2b05      	cmp	r3, #5
 800340e:	d9e9      	bls.n	80033e4 <calculate_pwm_with_pid+0x34>

	float pitch_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 8003410:	4bce      	ldr	r3, [pc, #824]	@ (800374c <calculate_pwm_with_pid+0x39c>)
 8003412:	ed93 7a01 	vldr	s14, [r3, #4]
 8003416:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800341a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341e:	4bcc      	ldr	r3, [pc, #816]	@ (8003750 <calculate_pwm_with_pid+0x3a0>)
 8003420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003424:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    out = (S->A0 * in) +
 8003428:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800342c:	ed93 7a00 	vldr	s14, [r3]
 8003430:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003434:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003438:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800343c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003440:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003444:	edd3 7a03 	vldr	s15, [r3, #12]
 8003448:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800344c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003450:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003454:	edd3 6a02 	vldr	s13, [r3, #8]
 8003458:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800345c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003468:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800346c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    S->state[1] = S->state[0];
 8003478:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003482:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8003484:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003488:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800348a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800348c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003490:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003492:	615a      	str	r2, [r3, #20]
    return (out);
 8003494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003496:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float roll_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 800349a:	4bac      	ldr	r3, [pc, #688]	@ (800374c <calculate_pwm_with_pid+0x39c>)
 800349c:	ed93 7a02 	vldr	s14, [r3, #8]
 80034a0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80034a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a8:	4baa      	ldr	r3, [pc, #680]	@ (8003754 <calculate_pwm_with_pid+0x3a4>)
 80034aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034ae:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    out = (S->A0 * in) +
 80034b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80034be:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80034c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80034ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80034d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80034d6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80034da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034de:	edd3 6a02 	vldr	s13, [r3, #8]
 80034e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80034ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034f6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80034fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fe:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    S->state[1] = S->state[0];
 8003502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800350c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800350e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003512:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003516:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003520:	615a      	str	r2, [r3, #20]
    return (out);
 8003522:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 800352a:	4b88      	ldr	r3, [pc, #544]	@ (800374c <calculate_pwm_with_pid+0x39c>)
 800352c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003530:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003538:	4b87      	ldr	r3, [pc, #540]	@ (8003758 <calculate_pwm_with_pid+0x3a8>)
 800353a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800353e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    out = (S->A0 * in) +
 8003542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003546:	ed93 7a00 	vldr	s14, [r3]
 800354a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800354e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003556:	edd3 6a01 	vldr	s13, [r3, #4]
 800355a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800355e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003562:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003566:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800356a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800356e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003572:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003576:	edd3 7a04 	vldr	s15, [r3, #16]
 800357a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003582:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003586:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800358a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    S->state[1] = S->state[0];
 8003592:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800359c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800359e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035a6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80035a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80035b0:	615a      	str	r2, [r3, #20]
    return (out);
 80035b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	/* **************
	 * Depth
	 * The z axis we can get measures of is in the fixed-body-frame:
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	float z_out = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 80035ba:	4b64      	ldr	r3, [pc, #400]	@ (800374c <calculate_pwm_with_pid+0x39c>)
 80035bc:	ed93 7a00 	vldr	s14, [r3]
 80035c0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80035c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c8:	4b64      	ldr	r3, [pc, #400]	@ (800375c <calculate_pwm_with_pid+0x3ac>)
 80035ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035ce:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    out = (S->A0 * in) +
 80035d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035d6:	ed93 7a00 	vldr	s14, [r3]
 80035da:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80035de:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80035e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80035ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80035f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80035f6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80035fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8003602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003606:	edd3 7a04 	vldr	s15, [r3, #16]
 800360a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800360e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003616:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800361a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    S->state[1] = S->state[0];
 8003622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800362c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800362e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003632:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003636:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003638:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800363c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003640:	615a      	str	r2, [r3, #20]
    return (out);
 8003642:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	// Applies the inverse rotation of the body-frame from the fixed-body-frame ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the body-frame
	Quaternion z_out_q;
	z_out_q.w = 0;
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	643b      	str	r3, [r7, #64]	@ 0x40
	z_out_q.x = 0;
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.y = 0;
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	64bb      	str	r3, [r7, #72]	@ 0x48
	z_out_q.z = z_out;
 800365c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003660:	64fb      	str	r3, [r7, #76]	@ 0x4c
	Quaternion q_inv = {0};
 8003662:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 8003670:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fc00 	bl	8002e7c <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 800367c:	f107 0320 	add.w	r3, r7, #32
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	60da      	str	r2, [r3, #12]
	Quaternion z_out_body_frame = {0};
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	60da      	str	r2, [r3, #12]
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003698:	f107 0220 	add.w	r2, r7, #32
 800369c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80036a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fc61 	bl	8002f6c <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_body_frame);
 80036aa:	f107 0210 	add.w	r2, r7, #16
 80036ae:	f107 0320 	add.w	r3, r7, #32
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fc59 	bl	8002f6c <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t y_condition = fabsf(z_out_body_frame.y) < TOLERANCE || fabsf(input_values[0] < TOLERANCE);
 80036ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80036be:	eef0 7ae7 	vabs.f32	s15, s15
 80036c2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 80036c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ce:	d408      	bmi.n	80036e2 <calculate_pwm_with_pid+0x332>
 80036d0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80036d4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 80036d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e0:	d501      	bpl.n	80036e6 <calculate_pwm_with_pid+0x336>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <calculate_pwm_with_pid+0x338>
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	uint8_t x_condition = fabsf(z_out_body_frame.x) < TOLERANCE || fabsf(input_values[1] < TOLERANCE);
 80036ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f0:	eef0 7ae7 	vabs.f32	s15, s15
 80036f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 80036f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003700:	d408      	bmi.n	8003714 <calculate_pwm_with_pid+0x364>
 8003702:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003706:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 800370a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	d501      	bpl.n	8003718 <calculate_pwm_with_pid+0x368>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <calculate_pwm_with_pid+0x36a>
 8003718:	2300      	movs	r3, #0
 800371a:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
	uint8_t z_condition = fabsf(z_out_body_frame.z) < TOLERANCE || fabsf(input_values[2] < TOLERANCE);
 800371e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003722:	eef0 7ae7 	vabs.f32	s15, s15
 8003726:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 800372a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	d408      	bmi.n	8003746 <calculate_pwm_with_pid+0x396>
 8003734:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003738:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 800373c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	d50e      	bpl.n	8003764 <calculate_pwm_with_pid+0x3b4>
 8003746:	2301      	movs	r3, #1
 8003748:	e00d      	b.n	8003766 <calculate_pwm_with_pid+0x3b6>
 800374a:	bf00      	nop
 800374c:	20008a48 	.word	0x20008a48
 8003750:	20008a7c 	.word	0x20008a7c
 8003754:	20008aa0 	.word	0x20008aa0
 8003758:	20008ac4 	.word	0x20008ac4
 800375c:	20008a58 	.word	0x20008a58
 8003760:	3d4ccccd 	.word	0x3d4ccccd
 8003764:	2300      	movs	r3, #0
 8003766:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9

	if (x_condition && y_condition && z_condition)
 800376a:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01f      	beq.n	80037b2 <calculate_pwm_with_pid+0x402>
 8003772:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01b      	beq.n	80037b2 <calculate_pwm_with_pid+0x402>
 800377a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800377e:	2b00      	cmp	r3, #0
 8003780:	d017      	beq.n	80037b2 <calculate_pwm_with_pid+0x402>
	{
		// watch out for the correct order ?????
		input_values[0] += z_out_body_frame.y;
 8003782:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003786:	edd7 7a06 	vldr	s15, [r7, #24]
 800378a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		input_values[1] += z_out_body_frame.x;
 8003792:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003796:	edd7 7a05 	vldr	s15, [r7, #20]
 800379a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[2] += z_out_body_frame.z;
 80037a2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80037a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80037aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ae:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	}

	// pitch
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3] < TOLERANCE))
 80037b2:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80037b6:	eef0 7ae7 	vabs.f32	s15, s15
 80037ba:	ed1f 7a17 	vldr	s14, [pc, #-92]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 80037be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	d408      	bmi.n	80037da <calculate_pwm_with_pid+0x42a>
 80037c8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80037cc:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 80037d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d8:	d507      	bpl.n	80037ea <calculate_pwm_with_pid+0x43a>
	{
		input_values[3] += pitch_pid_feedback;
 80037da:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80037de:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80037e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}
	// roll
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4] < TOLERANCE))
 80037ea:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80037ee:	eef0 7ae7 	vabs.f32	s15, s15
 80037f2:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 80037f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fe:	d408      	bmi.n	8003812 <calculate_pwm_with_pid+0x462>
 8003800:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003804:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d507      	bpl.n	8003822 <calculate_pwm_with_pid+0x472>
	{
		input_values[4] += roll_pid_feedback;
 8003812:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003816:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800381a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5] < TOLERANCE))
 8003822:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003826:	eef0 7ae7 	vabs.f32	s15, s15
 800382a:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 800382e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003836:	d408      	bmi.n	800384a <calculate_pwm_with_pid+0x49a>
 8003838:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800383c:	ed1f 7a38 	vldr	s14, [pc, #-224]	@ 8003760 <calculate_pwm_with_pid+0x3b0>
 8003840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d507      	bpl.n	800385a <calculate_pwm_with_pid+0x4aa>
	{
		input_values[5] += yaw_pid_feedback;
 800384a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800384e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003856:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}

	arm_status code = calculate_pwm(&input_values, pwm_output);
 800385a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fa59 	bl	8002d18 <calculate_pwm>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	return code;
 800386c:	f997 30a8 	ldrsb.w	r3, [r7, #168]	@ 0xa8
}
 8003870:	4618      	mov	r0, r3
 8003872:	37c0      	adds	r7, #192	@ 0xc0
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800387c:	f7fe ff66 	bl	800274c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003880:	480c      	ldr	r0, [pc, #48]	@ (80038b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003882:	490d      	ldr	r1, [pc, #52]	@ (80038b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003884:	4a0d      	ldr	r2, [pc, #52]	@ (80038bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003898:	4c0a      	ldr	r4, [pc, #40]	@ (80038c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80038a6:	f017 fc29 	bl	801b0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038aa:	f7fe fb45 	bl	8001f38 <main>
  bx  lr    
 80038ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b8:	20000ac4 	.word	0x20000ac4
  ldr r2, =_sidata
 80038bc:	0801db4c 	.word	0x0801db4c
  ldr r2, =_sbss
 80038c0:	20000ac8 	.word	0x20000ac8
  ldr r4, =_ebss
 80038c4:	2001608c 	.word	0x2001608c

080038c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC_IRQHandler>
	...

080038cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038d0:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <HAL_Init+0x40>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <HAL_Init+0x40>)
 80038d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_Init+0x40>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <HAL_Init+0x40>)
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_Init+0x40>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a07      	ldr	r2, [pc, #28]	@ (800390c <HAL_Init+0x40>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f4:	2003      	movs	r0, #3
 80038f6:	f000 f8fc 	bl	8003af2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038fa:	200f      	movs	r0, #15
 80038fc:	f7fe fda4 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003900:	f7fe fd76 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023c00 	.word	0x40023c00

08003910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003914:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_IncTick+0x20>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_IncTick+0x24>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
 8003920:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <HAL_IncTick+0x24>)
 8003922:	6013      	str	r3, [r2, #0]
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	200000cc 	.word	0x200000cc
 8003934:	20008ae8 	.word	0x20008ae8

08003938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return uwTick;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <HAL_GetTick+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20008ae8 	.word	0x20008ae8

08003950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7ff ffee 	bl	8003938 <HAL_GetTick>
 800395c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003968:	d005      	beq.n	8003976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_Delay+0x44>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003976:	bf00      	nop
 8003978:	f7ff ffde 	bl	8003938 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	429a      	cmp	r2, r3
 8003986:	d8f7      	bhi.n	8003978 <HAL_Delay+0x28>
  {
  }
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200000cc 	.word	0x200000cc

08003998 <__NVIC_SetPriorityGrouping>:
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a8:	4b0c      	ldr	r3, [pc, #48]	@ (80039dc <__NVIC_SetPriorityGrouping+0x44>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039b4:	4013      	ands	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ca:	4a04      	ldr	r2, [pc, #16]	@ (80039dc <__NVIC_SetPriorityGrouping+0x44>)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	60d3      	str	r3, [r2, #12]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <__NVIC_GetPriorityGrouping>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e4:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <__NVIC_GetPriorityGrouping+0x18>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	0a1b      	lsrs	r3, r3, #8
 80039ea:	f003 0307 	and.w	r3, r3, #7
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_EnableIRQ>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	db0b      	blt.n	8003a26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	f003 021f 	and.w	r2, r3, #31
 8003a14:	4907      	ldr	r1, [pc, #28]	@ (8003a34 <__NVIC_EnableIRQ+0x38>)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000e100 	.word	0xe000e100

08003a38 <__NVIC_SetPriority>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	6039      	str	r1, [r7, #0]
 8003a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	db0a      	blt.n	8003a62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	490c      	ldr	r1, [pc, #48]	@ (8003a84 <__NVIC_SetPriority+0x4c>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	0112      	lsls	r2, r2, #4
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a60:	e00a      	b.n	8003a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4908      	ldr	r1, [pc, #32]	@ (8003a88 <__NVIC_SetPriority+0x50>)
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	3b04      	subs	r3, #4
 8003a70:	0112      	lsls	r2, r2, #4
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	440b      	add	r3, r1
 8003a76:	761a      	strb	r2, [r3, #24]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000e100 	.word	0xe000e100
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <NVIC_EncodePriority>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b089      	sub	sp, #36	@ 0x24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f1c3 0307 	rsb	r3, r3, #7
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	bf28      	it	cs
 8003aaa:	2304      	movcs	r3, #4
 8003aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d902      	bls.n	8003abc <NVIC_EncodePriority+0x30>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3b03      	subs	r3, #3
 8003aba:	e000      	b.n	8003abe <NVIC_EncodePriority+0x32>
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	401a      	ands	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa01 f303 	lsl.w	r3, r1, r3
 8003ade:	43d9      	mvns	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae4:	4313      	orrs	r3, r2
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3724      	adds	r7, #36	@ 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ff4c 	bl	8003998 <__NVIC_SetPriorityGrouping>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b1a:	f7ff ff61 	bl	80039e0 <__NVIC_GetPriorityGrouping>
 8003b1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	6978      	ldr	r0, [r7, #20]
 8003b26:	f7ff ffb1 	bl	8003a8c <NVIC_EncodePriority>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff80 	bl	8003a38 <__NVIC_SetPriority>
}
 8003b38:	bf00      	nop
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff54 	bl	80039fc <__NVIC_EnableIRQ>
}
 8003b54:	bf00      	nop
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b68:	f7ff fee6 	bl	8003938 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e099      	b.n	8003cac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b98:	e00f      	b.n	8003bba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b9a:	f7ff fecd 	bl	8003938 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d908      	bls.n	8003bba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e078      	b.n	8003cac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e8      	bne.n	8003b9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4b38      	ldr	r3, [pc, #224]	@ (8003cb4 <HAL_DMA_Init+0x158>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d107      	bne.n	8003c24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0307 	bic.w	r3, r3, #7
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d117      	bne.n	8003c7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00e      	beq.n	8003c7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fb01 	bl	8004268 <DMA_CheckFifoParam>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2240      	movs	r2, #64	@ 0x40
 8003c70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e016      	b.n	8003cac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fab8 	bl	80041fc <DMA_CalcBaseAndBitshift>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	223f      	movs	r2, #63	@ 0x3f
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	f010803f 	.word	0xf010803f

08003cb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_DMA_Start_IT+0x26>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e040      	b.n	8003d60 <HAL_DMA_Start_IT+0xa8>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d12f      	bne.n	8003d52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fa4a 	bl	80041a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	223f      	movs	r2, #63	@ 0x3f
 8003d12:	409a      	lsls	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0216 	orr.w	r2, r2, #22
 8003d26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0208 	orr.w	r2, r2, #8
 8003d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e005      	b.n	8003d5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d76:	f7ff fddf 	bl	8003938 <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d008      	beq.n	8003d9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	@ 0x80
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e052      	b.n	8003e40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0216 	bic.w	r2, r2, #22
 8003da8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003db8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_DMA_Abort+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0208 	bic.w	r2, r2, #8
 8003dd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dea:	e013      	b.n	8003e14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dec:	f7ff fda4 	bl	8003938 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d90c      	bls.n	8003e14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2203      	movs	r2, #3
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e015      	b.n	8003e40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e4      	bne.n	8003dec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e26:	223f      	movs	r2, #63	@ 0x3f
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d004      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2280      	movs	r2, #128	@ 0x80
 8003e60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00c      	b.n	8003e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2205      	movs	r2, #5
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e98:	4b8e      	ldr	r3, [pc, #568]	@ (80040d4 <HAL_DMA_IRQHandler+0x248>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a8e      	ldr	r2, [pc, #568]	@ (80040d8 <HAL_DMA_IRQHandler+0x24c>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0a9b      	lsrs	r3, r3, #10
 8003ea4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0204 	bic.w	r2, r2, #4
 8003ede:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d012      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	f043 0202 	orr.w	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	2204      	movs	r2, #4
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d012      	beq.n	8003f64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f50:	2204      	movs	r2, #4
 8003f52:	409a      	lsls	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f68:	2210      	movs	r2, #16
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d043      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03c      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	2210      	movs	r2, #16
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d018      	beq.n	8003fce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d024      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
 8003fba:	e01f      	b.n	8003ffc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4798      	blx	r3
 8003fcc:	e016      	b.n	8003ffc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0208 	bic.w	r2, r2, #8
 8003fea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	2220      	movs	r2, #32
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 808f 	beq.w	800412c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8087 	beq.w	800412c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	2220      	movs	r2, #32
 8004024:	409a      	lsls	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b05      	cmp	r3, #5
 8004034:	d136      	bne.n	80040a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0216 	bic.w	r2, r2, #22
 8004044:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004054:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_DMA_IRQHandler+0x1da>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0208 	bic.w	r2, r2, #8
 8004074:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407a:	223f      	movs	r2, #63	@ 0x3f
 800407c:	409a      	lsls	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004096:	2b00      	cmp	r3, #0
 8004098:	d07e      	beq.n	8004198 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
        }
        return;
 80040a2:	e079      	b.n	8004198 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01d      	beq.n	80040ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d031      	beq.n	800412c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
 80040d0:	e02c      	b.n	800412c <HAL_DMA_IRQHandler+0x2a0>
 80040d2:	bf00      	nop
 80040d4:	20000004 	.word	0x20000004
 80040d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d023      	beq.n	800412c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
 80040ec:	e01e      	b.n	800412c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10f      	bne.n	800411c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0210 	bic.w	r2, r2, #16
 800410a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004130:	2b00      	cmp	r3, #0
 8004132:	d032      	beq.n	800419a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d022      	beq.n	8004186 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2205      	movs	r2, #5
 8004144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	3301      	adds	r3, #1
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	429a      	cmp	r2, r3
 8004162:	d307      	bcc.n	8004174 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f2      	bne.n	8004158 <HAL_DMA_IRQHandler+0x2cc>
 8004172:	e000      	b.n	8004176 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004174:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
 8004196:	e000      	b.n	800419a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004198:	bf00      	nop
    }
  }
}
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b40      	cmp	r3, #64	@ 0x40
 80041cc:	d108      	bne.n	80041e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041de:	e007      	b.n	80041f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	60da      	str	r2, [r3, #12]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	3b10      	subs	r3, #16
 800420c:	4a14      	ldr	r2, [pc, #80]	@ (8004260 <DMA_CalcBaseAndBitshift+0x64>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004216:	4a13      	ldr	r2, [pc, #76]	@ (8004264 <DMA_CalcBaseAndBitshift+0x68>)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4413      	add	r3, r2
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d909      	bls.n	800423e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004232:	f023 0303 	bic.w	r3, r3, #3
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	659a      	str	r2, [r3, #88]	@ 0x58
 800423c:	e007      	b.n	800424e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	aaaaaaab 	.word	0xaaaaaaab
 8004264:	0801c044 	.word	0x0801c044

08004268 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11f      	bne.n	80042c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d856      	bhi.n	8004336 <DMA_CheckFifoParam+0xce>
 8004288:	a201      	add	r2, pc, #4	@ (adr r2, 8004290 <DMA_CheckFifoParam+0x28>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042b3 	.word	0x080042b3
 8004298:	080042a1 	.word	0x080042a1
 800429c:	08004337 	.word	0x08004337
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d046      	beq.n	800433a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b0:	e043      	b.n	800433a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042ba:	d140      	bne.n	800433e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c0:	e03d      	b.n	800433e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ca:	d121      	bne.n	8004310 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d837      	bhi.n	8004342 <DMA_CheckFifoParam+0xda>
 80042d2:	a201      	add	r2, pc, #4	@ (adr r2, 80042d8 <DMA_CheckFifoParam+0x70>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042ef 	.word	0x080042ef
 80042e0:	080042e9 	.word	0x080042e9
 80042e4:	08004301 	.word	0x08004301
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e030      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d025      	beq.n	8004346 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fe:	e022      	b.n	8004346 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004308:	d11f      	bne.n	800434a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800430e:	e01c      	b.n	800434a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d903      	bls.n	800431e <DMA_CheckFifoParam+0xb6>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d003      	beq.n	8004324 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800431c:	e018      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
      break;
 8004322:	e015      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      break;
 8004334:	e00b      	b.n	800434e <DMA_CheckFifoParam+0xe6>
      break;
 8004336:	bf00      	nop
 8004338:	e00a      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      break;
 800433a:	bf00      	nop
 800433c:	e008      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      break;
 800433e:	bf00      	nop
 8004340:	e006      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
 8004344:	e004      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
 8004348:	e002      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      break;   
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <DMA_CheckFifoParam+0xe8>
      break;
 800434e:	bf00      	nop
    }
  } 
  
  return status; 
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop

08004360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004360:	b480      	push	{r7}
 8004362:	b089      	sub	sp, #36	@ 0x24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e177      	b.n	800466c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800437c:	2201      	movs	r2, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	f040 8166 	bne.w	8004666 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d005      	beq.n	80043b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d130      	bne.n	8004414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e8:	2201      	movs	r2, #1
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 0201 	and.w	r2, r3, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b03      	cmp	r3, #3
 800441e:	d017      	beq.n	8004450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d123      	bne.n	80044a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	08da      	lsrs	r2, r3, #3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3208      	adds	r2, #8
 8004464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	220f      	movs	r2, #15
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80c0 	beq.w	8004666 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	4b66      	ldr	r3, [pc, #408]	@ (8004684 <HAL_GPIO_Init+0x324>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ee:	4a65      	ldr	r2, [pc, #404]	@ (8004684 <HAL_GPIO_Init+0x324>)
 80044f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044f6:	4b63      	ldr	r3, [pc, #396]	@ (8004684 <HAL_GPIO_Init+0x324>)
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004502:	4a61      	ldr	r2, [pc, #388]	@ (8004688 <HAL_GPIO_Init+0x328>)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	3302      	adds	r3, #2
 800450a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	220f      	movs	r2, #15
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a58      	ldr	r2, [pc, #352]	@ (800468c <HAL_GPIO_Init+0x32c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d037      	beq.n	800459e <HAL_GPIO_Init+0x23e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a57      	ldr	r2, [pc, #348]	@ (8004690 <HAL_GPIO_Init+0x330>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d031      	beq.n	800459a <HAL_GPIO_Init+0x23a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a56      	ldr	r2, [pc, #344]	@ (8004694 <HAL_GPIO_Init+0x334>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d02b      	beq.n	8004596 <HAL_GPIO_Init+0x236>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a55      	ldr	r2, [pc, #340]	@ (8004698 <HAL_GPIO_Init+0x338>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d025      	beq.n	8004592 <HAL_GPIO_Init+0x232>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a54      	ldr	r2, [pc, #336]	@ (800469c <HAL_GPIO_Init+0x33c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01f      	beq.n	800458e <HAL_GPIO_Init+0x22e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a53      	ldr	r2, [pc, #332]	@ (80046a0 <HAL_GPIO_Init+0x340>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d019      	beq.n	800458a <HAL_GPIO_Init+0x22a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a52      	ldr	r2, [pc, #328]	@ (80046a4 <HAL_GPIO_Init+0x344>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_GPIO_Init+0x226>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a51      	ldr	r2, [pc, #324]	@ (80046a8 <HAL_GPIO_Init+0x348>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00d      	beq.n	8004582 <HAL_GPIO_Init+0x222>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a50      	ldr	r2, [pc, #320]	@ (80046ac <HAL_GPIO_Init+0x34c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <HAL_GPIO_Init+0x21e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a4f      	ldr	r2, [pc, #316]	@ (80046b0 <HAL_GPIO_Init+0x350>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d101      	bne.n	800457a <HAL_GPIO_Init+0x21a>
 8004576:	2309      	movs	r3, #9
 8004578:	e012      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800457a:	230a      	movs	r3, #10
 800457c:	e010      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800457e:	2308      	movs	r3, #8
 8004580:	e00e      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004582:	2307      	movs	r3, #7
 8004584:	e00c      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004586:	2306      	movs	r3, #6
 8004588:	e00a      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800458a:	2305      	movs	r3, #5
 800458c:	e008      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800458e:	2304      	movs	r3, #4
 8004590:	e006      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004592:	2303      	movs	r3, #3
 8004594:	e004      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 8004596:	2302      	movs	r3, #2
 8004598:	e002      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_GPIO_Init+0x240>
 800459e:	2300      	movs	r3, #0
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	f002 0203 	and.w	r2, r2, #3
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	4093      	lsls	r3, r2
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b0:	4935      	ldr	r1, [pc, #212]	@ (8004688 <HAL_GPIO_Init+0x328>)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	3302      	adds	r3, #2
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045be:	4b3d      	ldr	r3, [pc, #244]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045e2:	4a34      	ldr	r2, [pc, #208]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e8:	4b32      	ldr	r3, [pc, #200]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800460c:	4a29      	ldr	r2, [pc, #164]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004612:	4b28      	ldr	r3, [pc, #160]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004636:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800463c:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004660:	4a14      	ldr	r2, [pc, #80]	@ (80046b4 <HAL_GPIO_Init+0x354>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	f67f ae84 	bls.w	800437c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3724      	adds	r7, #36	@ 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	40013800 	.word	0x40013800
 800468c:	40020000 	.word	0x40020000
 8004690:	40020400 	.word	0x40020400
 8004694:	40020800 	.word	0x40020800
 8004698:	40020c00 	.word	0x40020c00
 800469c:	40021000 	.word	0x40021000
 80046a0:	40021400 	.word	0x40021400
 80046a4:	40021800 	.word	0x40021800
 80046a8:	40021c00 	.word	0x40021c00
 80046ac:	40022000 	.word	0x40022000
 80046b0:	40022400 	.word	0x40022400
 80046b4:	40013c00 	.word	0x40013c00

080046b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	807b      	strh	r3, [r7, #2]
 80046c4:	4613      	mov	r3, r2
 80046c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c8:	787b      	ldrb	r3, [r7, #1]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ce:	887a      	ldrh	r2, [r7, #2]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046d4:	e003      	b.n	80046de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046d6:	887b      	ldrh	r3, [r7, #2]
 80046d8:	041a      	lsls	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	619a      	str	r2, [r3, #24]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	4b20      	ldr	r3, [pc, #128]	@ (800477c <HAL_PWREx_EnableOverDrive+0x90>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	4a1f      	ldr	r2, [pc, #124]	@ (800477c <HAL_PWREx_EnableOverDrive+0x90>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	@ 0x40
 8004706:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_PWREx_EnableOverDrive+0x90>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004712:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <HAL_PWREx_EnableOverDrive+0x94>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004718:	f7ff f90e 	bl	8003938 <HAL_GetTick>
 800471c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800471e:	e009      	b.n	8004734 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004720:	f7ff f90a 	bl	8003938 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800472e:	d901      	bls.n	8004734 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e01f      	b.n	8004774 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004734:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <HAL_PWREx_EnableOverDrive+0x98>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d1ee      	bne.n	8004720 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004742:	4b11      	ldr	r3, [pc, #68]	@ (8004788 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004748:	f7ff f8f6 	bl	8003938 <HAL_GetTick>
 800474c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800474e:	e009      	b.n	8004764 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004750:	f7ff f8f2 	bl	8003938 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800475e:	d901      	bls.n	8004764 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e007      	b.n	8004774 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004764:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <HAL_PWREx_EnableOverDrive+0x98>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004770:	d1ee      	bne.n	8004750 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40023800 	.word	0x40023800
 8004780:	420e0040 	.word	0x420e0040
 8004784:	40007000 	.word	0x40007000
 8004788:	420e0044 	.word	0x420e0044

0800478c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0cc      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a0:	4b68      	ldr	r3, [pc, #416]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d90c      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	4b65      	ldr	r3, [pc, #404]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b63      	ldr	r3, [pc, #396]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b8      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e0:	4b59      	ldr	r3, [pc, #356]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a58      	ldr	r2, [pc, #352]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f8:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a52      	ldr	r2, [pc, #328]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b50      	ldr	r3, [pc, #320]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	494d      	ldr	r1, [pc, #308]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d044      	beq.n	80048ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d119      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d003      	beq.n	800484a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	2b03      	cmp	r3, #3
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484a:	4b3f      	ldr	r3, [pc, #252]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e06f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	4b3b      	ldr	r3, [pc, #236]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e067      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486a:	4b37      	ldr	r3, [pc, #220]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 0203 	bic.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4934      	ldr	r1, [pc, #208]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800487c:	f7ff f85c 	bl	8003938 <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	e00a      	b.n	800489a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004884:	f7ff f858 	bl	8003938 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e04f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	4b2b      	ldr	r3, [pc, #172]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 020c 	and.w	r2, r3, #12
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1eb      	bne.n	8004884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048ac:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d20c      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b22      	ldr	r3, [pc, #136]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b20      	ldr	r3, [pc, #128]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e032      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e0:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4916      	ldr	r1, [pc, #88]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048fe:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	490e      	ldr	r1, [pc, #56]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004912:	f000 f821 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	490a      	ldr	r1, [pc, #40]	@ (800494c <HAL_RCC_ClockConfig+0x1c0>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <HAL_RCC_ClockConfig+0x1c8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fd88 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023c00 	.word	0x40023c00
 8004948:	40023800 	.word	0x40023800
 800494c:	0801c02c 	.word	0x0801c02c
 8004950:	20000004 	.word	0x20000004
 8004954:	200000c8 	.word	0x200000c8

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b092      	sub	sp, #72	@ 0x48
 800495e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004970:	4b6f      	ldr	r3, [pc, #444]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d00e      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x42>
 800497c:	2b08      	cmp	r3, #8
 800497e:	f200 80cd 	bhi.w	8004b1c <HAL_RCC_GetSysClockFreq+0x1c4>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x34>
 8004986:	2b04      	cmp	r3, #4
 8004988:	d003      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x3a>
 800498a:	e0c7      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b69      	ldr	r3, [pc, #420]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800498e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004990:	e0c7      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004992:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 8004996:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004998:	e0c3      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800499a:	4b65      	ldr	r3, [pc, #404]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049a4:	4b62      	ldr	r3, [pc, #392]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d04a      	beq.n	8004a46 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	099b      	lsrs	r3, r3, #6
 80049b6:	2200      	movs	r2, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	4611      	mov	r1, r2
 80049bc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049c2:	2300      	movs	r3, #0
 80049c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c6:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80049ca:	4642      	mov	r2, r8
 80049cc:	464b      	mov	r3, r9
 80049ce:	f04f 0000 	mov.w	r0, #0
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	00d9      	lsls	r1, r3, #3
 80049d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049dc:	00d0      	lsls	r0, r2, #3
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4641      	mov	r1, r8
 80049e4:	1a54      	subs	r4, r2, r1
 80049e6:	4649      	mov	r1, r9
 80049e8:	eb63 0501 	sbc.w	r5, r3, r1
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	016b      	lsls	r3, r5, #5
 80049f6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80049fa:	0162      	lsls	r2, r4, #5
 80049fc:	4614      	mov	r4, r2
 80049fe:	461d      	mov	r5, r3
 8004a00:	4643      	mov	r3, r8
 8004a02:	18e3      	adds	r3, r4, r3
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	464b      	mov	r3, r9
 8004a08:	eb45 0303 	adc.w	r3, r5, r3
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	040b      	lsls	r3, r1, #16
 8004a1e:	4621      	mov	r1, r4
 8004a20:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8004a24:	4621      	mov	r1, r4
 8004a26:	040a      	lsls	r2, r1, #16
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2e:	2200      	movs	r2, #0
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a38:	f7fc f940 	bl	8000cbc <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a44:	e05c      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a46:	4b3a      	ldr	r3, [pc, #232]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004a62:	4622      	mov	r2, r4
 8004a64:	462b      	mov	r3, r5
 8004a66:	f04f 0000 	mov.w	r0, #0
 8004a6a:	f04f 0100 	mov.w	r1, #0
 8004a6e:	0159      	lsls	r1, r3, #5
 8004a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a74:	0150      	lsls	r0, r2, #5
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a80:	4629      	mov	r1, r5
 8004a82:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a92:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a96:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a9a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a9e:	eb63 090b 	sbc.w	r9, r3, fp
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab6:	4690      	mov	r8, r2
 8004ab8:	4699      	mov	r9, r3
 8004aba:	4623      	mov	r3, r4
 8004abc:	eb18 0303 	adds.w	r3, r8, r3
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	eb49 0303 	adc.w	r3, r9, r3
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	028b      	lsls	r3, r1, #10
 8004ada:	4621      	mov	r1, r4
 8004adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	028a      	lsls	r2, r1, #10
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aea:	2200      	movs	r2, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	617a      	str	r2, [r7, #20]
 8004af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004af4:	f7fc f8e2 	bl	8000cbc <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4613      	mov	r3, r2
 8004afe:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b00:	4b0b      	ldr	r3, [pc, #44]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 8004b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004b1e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3748      	adds	r7, #72	@ 0x48
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800
 8004b34:	00f42400 	.word	0x00f42400

08004b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	@ (8004b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000004 	.word	0x20000004

08004b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b54:	f7ff fff0 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0a9b      	lsrs	r3, r3, #10
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	@ (8004b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	0801c03c 	.word	0x0801c03c

08004b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b7c:	f7ff ffdc 	bl	8004b38 <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	0b5b      	lsrs	r3, r3, #13
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4903      	ldr	r1, [pc, #12]	@ (8004b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	0801c03c 	.word	0x0801c03c

08004ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	220f      	movs	r2, #15
 8004bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bb0:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0203 	and.w	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004be2:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <HAL_RCC_GetClockConfig+0x60>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 020f 	and.w	r2, r3, #15
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	601a      	str	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40023c00 	.word	0x40023c00

08004c04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e273      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d075      	beq.n	8004d0e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c22:	4b88      	ldr	r3, [pc, #544]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d00c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b85      	ldr	r3, [pc, #532]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d112      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3a:	4b82      	ldr	r3, [pc, #520]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c46:	d10b      	bne.n	8004c60 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	4b7e      	ldr	r3, [pc, #504]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d05b      	beq.n	8004d0c <HAL_RCC_OscConfig+0x108>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d157      	bne.n	8004d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e24e      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c68:	d106      	bne.n	8004c78 <HAL_RCC_OscConfig+0x74>
 8004c6a:	4b76      	ldr	r3, [pc, #472]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a75      	ldr	r2, [pc, #468]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e01d      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x98>
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6f      	ldr	r2, [pc, #444]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a6c      	ldr	r2, [pc, #432]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	4b69      	ldr	r3, [pc, #420]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a68      	ldr	r2, [pc, #416]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a65      	ldr	r2, [pc, #404]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d013      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fe fe3c 	bl	8003938 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe fe38 	bl	8003938 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	@ 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e213      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xc0>
 8004ce2:	e014      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fe28 	bl	8003938 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fe fe24 	bl	8003938 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	@ 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e1ff      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	4b51      	ldr	r3, [pc, #324]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0xe8>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d063      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b47      	ldr	r3, [pc, #284]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d3e:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e1d3      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d56:	4b3b      	ldr	r3, [pc, #236]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4937      	ldr	r1, [pc, #220]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	e03a      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d74:	4b34      	ldr	r3, [pc, #208]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7a:	f7fe fddd 	bl	8003938 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d82:	f7fe fdd9 	bl	8003938 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1b4      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4925      	ldr	r1, [pc, #148]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db6:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <HAL_RCC_OscConfig+0x244>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fdbc 	bl	8003938 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc4:	f7fe fdb8 	bl	8003938 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e193      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d036      	beq.n	8004e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe fd9c 	bl	8003938 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe fd98 	bl	8003938 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e173      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e16:	4b0b      	ldr	r3, [pc, #44]	@ (8004e44 <HAL_RCC_OscConfig+0x240>)
 8004e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x200>
 8004e22:	e01b      	b.n	8004e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e24:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_OscConfig+0x248>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2a:	f7fe fd85 	bl	8003938 <HAL_GetTick>
 8004e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	e00e      	b.n	8004e50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e32:	f7fe fd81 	bl	8003938 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d907      	bls.n	8004e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e15c      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	42470000 	.word	0x42470000
 8004e4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	4b8a      	ldr	r3, [pc, #552]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ea      	bne.n	8004e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8097 	beq.w	8004f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b83      	ldr	r3, [pc, #524]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10f      	bne.n	8004e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60bb      	str	r3, [r7, #8]
 8004e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	4a7e      	ldr	r2, [pc, #504]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9a:	4b79      	ldr	r3, [pc, #484]	@ (8005080 <HAL_RCC_OscConfig+0x47c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d118      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea6:	4b76      	ldr	r3, [pc, #472]	@ (8005080 <HAL_RCC_OscConfig+0x47c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a75      	ldr	r2, [pc, #468]	@ (8005080 <HAL_RCC_OscConfig+0x47c>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe fd41 	bl	8003938 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eba:	f7fe fd3d 	bl	8003938 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e118      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8005080 <HAL_RCC_OscConfig+0x47c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x2ea>
 8004ee0:	4b66      	ldr	r3, [pc, #408]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	4a65      	ldr	r2, [pc, #404]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eec:	e01c      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x30c>
 8004ef6:	4b61      	ldr	r3, [pc, #388]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efa:	4a60      	ldr	r2, [pc, #384]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f02:	4b5e      	ldr	r3, [pc, #376]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f06:	4a5d      	ldr	r2, [pc, #372]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_OscConfig+0x324>
 8004f10:	4b5a      	ldr	r3, [pc, #360]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f14:	4a59      	ldr	r2, [pc, #356]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f1c:	4b57      	ldr	r3, [pc, #348]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	4a56      	ldr	r2, [pc, #344]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f22:	f023 0304 	bic.w	r3, r3, #4
 8004f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fe fd02 	bl	8003938 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fe fcfe 	bl	8003938 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0d7      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4e:	4b4b      	ldr	r3, [pc, #300]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0ee      	beq.n	8004f38 <HAL_RCC_OscConfig+0x334>
 8004f5a:	e014      	b.n	8004f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fe fcec 	bl	8003938 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fe fce8 	bl	8003938 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0c1      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f7a:	4b40      	ldr	r3, [pc, #256]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ee      	bne.n	8004f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f90:	4a3a      	ldr	r2, [pc, #232]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80ad 	beq.w	80050fc <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fa2:	4b36      	ldr	r3, [pc, #216]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d060      	beq.n	8005070 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d145      	bne.n	8005042 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb6:	4b33      	ldr	r3, [pc, #204]	@ (8005084 <HAL_RCC_OscConfig+0x480>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fcbc 	bl	8003938 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fe fcb8 	bl	8003938 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e093      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	4b29      	ldr	r3, [pc, #164]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69da      	ldr	r2, [r3, #28]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	019b      	lsls	r3, r3, #6
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	071b      	lsls	r3, r3, #28
 800500e:	491b      	ldr	r1, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005014:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x480>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fe fc8d 	bl	8003938 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005022:	f7fe fc89 	bl	8003938 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e064      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005034:	4b11      	ldr	r3, [pc, #68]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x41e>
 8005040:	e05c      	b.n	80050fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005042:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <HAL_RCC_OscConfig+0x480>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fe fc76 	bl	8003938 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005050:	f7fe fc72 	bl	8003938 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e04d      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCC_OscConfig+0x478>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x44c>
 800506e:	e045      	b.n	80050fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e040      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
 800507c:	40023800 	.word	0x40023800
 8005080:	40007000 	.word	0x40007000
 8005084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005088:	4b1f      	ldr	r3, [pc, #124]	@ (8005108 <HAL_RCC_OscConfig+0x504>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d030      	beq.n	80050f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d129      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d122      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d119      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	3b01      	subs	r3, #1
 80050d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d10f      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800

0800510c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e041      	b.n	80051a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fd fc4e 	bl	80029d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 fcc0 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e046      	b.n	8005252 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a23      	ldr	r2, [pc, #140]	@ (8005260 <HAL_TIM_Base_Start+0xb4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051de:	d01d      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005264 <HAL_TIM_Base_Start+0xb8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <HAL_TIM_Base_Start+0xbc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	@ (800526c <HAL_TIM_Base_Start+0xc0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_TIM_Base_Start+0xc4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a19      	ldr	r2, [pc, #100]	@ (8005274 <HAL_TIM_Base_Start+0xc8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_TIM_Base_Start+0x70>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <HAL_TIM_Base_Start+0xcc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d111      	bne.n	8005240 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b06      	cmp	r3, #6
 800522c:	d010      	beq.n	8005250 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523e:	e007      	b.n	8005250 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40010000 	.word	0x40010000
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40010400 	.word	0x40010400
 8005274:	40014000 	.word	0x40014000
 8005278:	40001800 	.word	0x40001800

0800527c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d001      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04e      	b.n	8005332 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a23      	ldr	r2, [pc, #140]	@ (8005340 <HAL_TIM_Base_Start_IT+0xc4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d022      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052be:	d01d      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005344 <HAL_TIM_Base_Start_IT+0xc8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d018      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005348 <HAL_TIM_Base_Start_IT+0xcc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	@ (800534c <HAL_TIM_Base_Start_IT+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00e      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005350 <HAL_TIM_Base_Start_IT+0xd4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d009      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a19      	ldr	r2, [pc, #100]	@ (8005354 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <HAL_TIM_Base_Start_IT+0xdc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d111      	bne.n	8005320 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b06      	cmp	r3, #6
 800530c:	d010      	beq.n	8005330 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531e:	e007      	b.n	8005330 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40001800 	.word	0x40001800

0800535c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e041      	b.n	80053f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fd fb06 	bl	8002994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f000 fb98 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <HAL_TIM_PWM_Start+0x24>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e022      	b.n	8005466 <HAL_TIM_PWM_Start+0x6a>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d109      	bne.n	800543a <HAL_TIM_PWM_Start+0x3e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b01      	cmp	r3, #1
 8005430:	bf14      	ite	ne
 8005432:	2301      	movne	r3, #1
 8005434:	2300      	moveq	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	e015      	b.n	8005466 <HAL_TIM_PWM_Start+0x6a>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d109      	bne.n	8005454 <HAL_TIM_PWM_Start+0x58>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	bf14      	ite	ne
 800544c:	2301      	movne	r3, #1
 800544e:	2300      	moveq	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e008      	b.n	8005466 <HAL_TIM_PWM_Start+0x6a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07c      	b.n	8005568 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <HAL_TIM_PWM_Start+0x82>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800547c:	e013      	b.n	80054a6 <HAL_TIM_PWM_Start+0xaa>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d104      	bne.n	800548e <HAL_TIM_PWM_Start+0x92>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800548c:	e00b      	b.n	80054a6 <HAL_TIM_PWM_Start+0xaa>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b08      	cmp	r3, #8
 8005492:	d104      	bne.n	800549e <HAL_TIM_PWM_Start+0xa2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549c:	e003      	b.n	80054a6 <HAL_TIM_PWM_Start+0xaa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fe04 	bl	80060bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2d      	ldr	r2, [pc, #180]	@ (8005570 <HAL_TIM_PWM_Start+0x174>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIM_PWM_Start+0xcc>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005574 <HAL_TIM_PWM_Start+0x178>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d101      	bne.n	80054cc <HAL_TIM_PWM_Start+0xd0>
 80054c8:	2301      	movs	r3, #1
 80054ca:	e000      	b.n	80054ce <HAL_TIM_PWM_Start+0xd2>
 80054cc:	2300      	movs	r3, #0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <HAL_TIM_PWM_Start+0x174>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d022      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f4:	d01d      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005578 <HAL_TIM_PWM_Start+0x17c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d018      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1d      	ldr	r2, [pc, #116]	@ (800557c <HAL_TIM_PWM_Start+0x180>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1c      	ldr	r2, [pc, #112]	@ (8005580 <HAL_TIM_PWM_Start+0x184>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00e      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a16      	ldr	r2, [pc, #88]	@ (8005574 <HAL_TIM_PWM_Start+0x178>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <HAL_TIM_PWM_Start+0x188>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_TIM_PWM_Start+0x136>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a16      	ldr	r2, [pc, #88]	@ (8005588 <HAL_TIM_PWM_Start+0x18c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d111      	bne.n	8005556 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b06      	cmp	r3, #6
 8005542:	d010      	beq.n	8005566 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005554:	e007      	b.n	8005566 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40010000 	.word	0x40010000
 8005574:	40010400 	.word	0x40010400
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40014000 	.word	0x40014000
 8005588:	40001800 	.word	0x40001800

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa5b 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa4d 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa5e 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa35 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa27 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa38 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fa0f 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa01 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 fa12 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9e9 	bl	8005a92 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9db 	bl	8005a7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f9ec 	bl	8005aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc fcfe 	bl	80020f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fd7c 	bl	8006214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9bd 	bl	8005aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0220 	mvn.w	r2, #32
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fd4e 	bl	8006200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005786:	2302      	movs	r3, #2
 8005788:	e0ae      	b.n	80058e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b0c      	cmp	r3, #12
 8005796:	f200 809f 	bhi.w	80058d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800579a:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057d5 	.word	0x080057d5
 80057a4:	080058d9 	.word	0x080058d9
 80057a8:	080058d9 	.word	0x080058d9
 80057ac:	080058d9 	.word	0x080058d9
 80057b0:	08005815 	.word	0x08005815
 80057b4:	080058d9 	.word	0x080058d9
 80057b8:	080058d9 	.word	0x080058d9
 80057bc:	080058d9 	.word	0x080058d9
 80057c0:	08005857 	.word	0x08005857
 80057c4:	080058d9 	.word	0x080058d9
 80057c8:	080058d9 	.word	0x080058d9
 80057cc:	080058d9 	.word	0x080058d9
 80057d0:	08005897 	.word	0x08005897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fa24 	bl	8005c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0208 	orr.w	r2, r2, #8
 80057ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0204 	bic.w	r2, r2, #4
 80057fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6999      	ldr	r1, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	619a      	str	r2, [r3, #24]
      break;
 8005812:	e064      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fa74 	bl	8005d08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800582e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800583e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6999      	ldr	r1, [r3, #24]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	021a      	lsls	r2, r3, #8
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	619a      	str	r2, [r3, #24]
      break;
 8005854:	e043      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fac9 	bl	8005df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0208 	orr.w	r2, r2, #8
 8005870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0204 	bic.w	r2, r2, #4
 8005880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69d9      	ldr	r1, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	61da      	str	r2, [r3, #28]
      break;
 8005894:	e023      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fb1d 	bl	8005edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69d9      	ldr	r1, [r3, #28]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	021a      	lsls	r2, r3, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	61da      	str	r2, [r3, #28]
      break;
 80058d6:	e002      	b.n	80058de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	75fb      	strb	r3, [r7, #23]
      break;
 80058dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIM_ConfigClockSource+0x1c>
 8005908:	2302      	movs	r3, #2
 800590a:	e0b4      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x186>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800592a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005944:	d03e      	beq.n	80059c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594a:	f200 8087 	bhi.w	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800594e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005952:	f000 8086 	beq.w	8005a62 <HAL_TIM_ConfigClockSource+0x172>
 8005956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800595a:	d87f      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800595c:	2b70      	cmp	r3, #112	@ 0x70
 800595e:	d01a      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0xa6>
 8005960:	2b70      	cmp	r3, #112	@ 0x70
 8005962:	d87b      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 8005964:	2b60      	cmp	r3, #96	@ 0x60
 8005966:	d050      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x11a>
 8005968:	2b60      	cmp	r3, #96	@ 0x60
 800596a:	d877      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b50      	cmp	r3, #80	@ 0x50
 800596e:	d03c      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0xfa>
 8005970:	2b50      	cmp	r3, #80	@ 0x50
 8005972:	d873      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	2b40      	cmp	r3, #64	@ 0x40
 8005976:	d058      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x13a>
 8005978:	2b40      	cmp	r3, #64	@ 0x40
 800597a:	d86f      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b30      	cmp	r3, #48	@ 0x30
 800597e:	d064      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005980:	2b30      	cmp	r3, #48	@ 0x30
 8005982:	d86b      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 8005984:	2b20      	cmp	r3, #32
 8005986:	d060      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005988:	2b20      	cmp	r3, #32
 800598a:	d867      	bhi.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d05c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005990:	2b10      	cmp	r3, #16
 8005992:	d05a      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0x15a>
 8005994:	e062      	b.n	8005a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059a6:	f000 fb69 	bl	800607c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	609a      	str	r2, [r3, #8]
      break;
 80059c2:	e04f      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059d4:	f000 fb52 	bl	800607c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059e6:	609a      	str	r2, [r3, #8]
      break;
 80059e8:	e03c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	461a      	mov	r2, r3
 80059f8:	f000 fac6 	bl	8005f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2150      	movs	r1, #80	@ 0x50
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fb1f 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005a08:	e02c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a16:	461a      	mov	r2, r3
 8005a18:	f000 fae5 	bl	8005fe6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2160      	movs	r1, #96	@ 0x60
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fb0f 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005a28:	e01c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	461a      	mov	r2, r3
 8005a38:	f000 faa6 	bl	8005f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2140      	movs	r1, #64	@ 0x40
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 faff 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005a48:	e00c      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f000 faf6 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005a5a:	e003      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a60:	e000      	b.n	8005a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a46      	ldr	r2, [pc, #280]	@ (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aee:	d00f      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a43      	ldr	r2, [pc, #268]	@ (8005c00 <TIM_Base_SetConfig+0x130>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a42      	ldr	r2, [pc, #264]	@ (8005c04 <TIM_Base_SetConfig+0x134>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a41      	ldr	r2, [pc, #260]	@ (8005c08 <TIM_Base_SetConfig+0x138>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a40      	ldr	r2, [pc, #256]	@ (8005c0c <TIM_Base_SetConfig+0x13c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a35      	ldr	r2, [pc, #212]	@ (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d02b      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b30:	d027      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a32      	ldr	r2, [pc, #200]	@ (8005c00 <TIM_Base_SetConfig+0x130>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d023      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a31      	ldr	r2, [pc, #196]	@ (8005c04 <TIM_Base_SetConfig+0x134>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01f      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a30      	ldr	r2, [pc, #192]	@ (8005c08 <TIM_Base_SetConfig+0x138>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01b      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c0c <TIM_Base_SetConfig+0x13c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d017      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2e      	ldr	r2, [pc, #184]	@ (8005c10 <TIM_Base_SetConfig+0x140>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c14 <TIM_Base_SetConfig+0x144>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00f      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	@ (8005c18 <TIM_Base_SetConfig+0x148>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c1c <TIM_Base_SetConfig+0x14c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2a      	ldr	r2, [pc, #168]	@ (8005c20 <TIM_Base_SetConfig+0x150>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a29      	ldr	r2, [pc, #164]	@ (8005c24 <TIM_Base_SetConfig+0x154>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d108      	bne.n	8005b94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a10      	ldr	r2, [pc, #64]	@ (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a12      	ldr	r2, [pc, #72]	@ (8005c0c <TIM_Base_SetConfig+0x13c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d103      	bne.n	8005bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d105      	bne.n	8005bee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f023 0201 	bic.w	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	611a      	str	r2, [r3, #16]
  }
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40000400 	.word	0x40000400
 8005c04:	40000800 	.word	0x40000800
 8005c08:	40000c00 	.word	0x40000c00
 8005c0c:	40010400 	.word	0x40010400
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800
 8005c1c:	40001800 	.word	0x40001800
 8005c20:	40001c00 	.word	0x40001c00
 8005c24:	40002000 	.word	0x40002000

08005c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f023 0201 	bic.w	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 0302 	bic.w	r3, r3, #2
 8005c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a20      	ldr	r2, [pc, #128]	@ (8005d00 <TIM_OC1_SetConfig+0xd8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC1_SetConfig+0x64>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1f      	ldr	r2, [pc, #124]	@ (8005d04 <TIM_OC1_SetConfig+0xdc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d10c      	bne.n	8005ca6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0308 	bic.w	r3, r3, #8
 8005c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f023 0304 	bic.w	r3, r3, #4
 8005ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <TIM_OC1_SetConfig+0xd8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC1_SetConfig+0x8e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a14      	ldr	r2, [pc, #80]	@ (8005d04 <TIM_OC1_SetConfig+0xdc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d111      	bne.n	8005cda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f023 0210 	bic.w	r2, r3, #16
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0320 	bic.w	r3, r3, #32
 8005d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a22      	ldr	r2, [pc, #136]	@ (8005dec <TIM_OC2_SetConfig+0xe4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC2_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a21      	ldr	r2, [pc, #132]	@ (8005df0 <TIM_OC2_SetConfig+0xe8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d10d      	bne.n	8005d8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a17      	ldr	r2, [pc, #92]	@ (8005dec <TIM_OC2_SetConfig+0xe4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC2_SetConfig+0x94>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a16      	ldr	r2, [pc, #88]	@ (8005df0 <TIM_OC2_SetConfig+0xe8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d113      	bne.n	8005dc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400

08005df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a21      	ldr	r2, [pc, #132]	@ (8005ed4 <TIM_OC3_SetConfig+0xe0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_OC3_SetConfig+0x66>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a20      	ldr	r2, [pc, #128]	@ (8005ed8 <TIM_OC3_SetConfig+0xe4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10d      	bne.n	8005e76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a16      	ldr	r2, [pc, #88]	@ (8005ed4 <TIM_OC3_SetConfig+0xe0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_OC3_SetConfig+0x92>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a15      	ldr	r2, [pc, #84]	@ (8005ed8 <TIM_OC3_SetConfig+0xe4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d113      	bne.n	8005eae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40010400 	.word	0x40010400

08005edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <TIM_OC4_SetConfig+0xa4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <TIM_OC4_SetConfig+0x68>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a11      	ldr	r2, [pc, #68]	@ (8005f84 <TIM_OC4_SetConfig+0xa8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d109      	bne.n	8005f58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	019b      	lsls	r3, r3, #6
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40010000 	.word	0x40010000
 8005f84:	40010400 	.word	0x40010400

08005f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f023 0201 	bic.w	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 030a 	bic.w	r3, r3, #10
 8005fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f023 0210 	bic.w	r2, r3, #16
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006022:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	f043 0307 	orr.w	r3, r3, #7
 8006068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	021a      	lsls	r2, r3, #8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	431a      	orrs	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	609a      	str	r2, [r3, #8]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2201      	movs	r2, #1
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	43db      	mvns	r3, r3
 80060de:	401a      	ands	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1a      	ldr	r2, [r3, #32]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f003 031f 	and.w	r3, r3, #31
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	fa01 f303 	lsl.w	r3, r1, r3
 80060f4:	431a      	orrs	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
}
 80060fa:	bf00      	nop
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800611c:	2302      	movs	r3, #2
 800611e:	e05a      	b.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a21      	ldr	r2, [pc, #132]	@ (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616c:	d01d      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1d      	ldr	r2, [pc, #116]	@ (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d018      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1b      	ldr	r2, [pc, #108]	@ (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d013      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1a      	ldr	r2, [pc, #104]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00e      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a18      	ldr	r2, [pc, #96]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d009      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a17      	ldr	r2, [pc, #92]	@ (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10c      	bne.n	80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40000800 	.word	0x40000800
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40001800 	.word	0x40001800

08006200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e042      	b.n	80062c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fc fcaa 	bl	8002ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2224      	movs	r2, #36	@ 0x24
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800626a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 ffc9 	bl	8007204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08c      	sub	sp, #48	@ 0x30
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d156      	bne.n	8006390 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_UART_Transmit_DMA+0x26>
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e04f      	b.n	8006392 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2221      	movs	r2, #33	@ 0x21
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	4a21      	ldr	r2, [pc, #132]	@ (800639c <HAL_UART_Transmit_DMA+0xd4>)
 8006318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	4a20      	ldr	r2, [pc, #128]	@ (80063a0 <HAL_UART_Transmit_DMA+0xd8>)
 8006320:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	4a1f      	ldr	r2, [pc, #124]	@ (80063a4 <HAL_UART_Transmit_DMA+0xdc>)
 8006328:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	2200      	movs	r2, #0
 8006330:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006332:	f107 0308 	add.w	r3, r7, #8
 8006336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	6819      	ldr	r1, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3304      	adds	r3, #4
 8006346:	461a      	mov	r2, r3
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	f7fd fcb5 	bl	8003cb8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006356:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3314      	adds	r3, #20
 800635e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	617b      	str	r3, [r7, #20]
   return(result);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3314      	adds	r3, #20
 8006376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006378:	627a      	str	r2, [r7, #36]	@ 0x24
 800637a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637c:	6a39      	ldr	r1, [r7, #32]
 800637e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006380:	e841 2300 	strex	r3, r2, [r1]
 8006384:	61fb      	str	r3, [r7, #28]
   return(result);
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e5      	bne.n	8006358 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	e000      	b.n	8006392 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006390:	2302      	movs	r3, #2
  }
}
 8006392:	4618      	mov	r0, r3
 8006394:	3730      	adds	r7, #48	@ 0x30
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	08006a91 	.word	0x08006a91
 80063a0:	08006b2b 	.word	0x08006b2b
 80063a4:	08006caf 	.word	0x08006caf

080063a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d112      	bne.n	80063e8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_UART_Receive_DMA+0x26>
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e00b      	b.n	80063ea <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	461a      	mov	r2, r3
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fcb0 	bl	8006d44 <UART_Start_Receive_DMA>
 80063e4:	4603      	mov	r3, r0
 80063e6:	e000      	b.n	80063ea <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b090      	sub	sp, #64	@ 0x40
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006408:	2b80      	cmp	r3, #128	@ 0x80
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b21      	cmp	r3, #33	@ 0x21
 800641e:	d128      	bne.n	8006472 <HAL_UART_DMAStop+0x80>
 8006420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006422:	2b00      	cmp	r3, #0
 8006424:	d025      	beq.n	8006472 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3314      	adds	r3, #20
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	623b      	str	r3, [r7, #32]
   return(result);
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3314      	adds	r3, #20
 8006444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006446:	633a      	str	r2, [r7, #48]	@ 0x30
 8006448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800644c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	4618      	mov	r0, r3
 8006468:	f7fd fc7e 	bl	8003d68 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fd03 	bl	8006e78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647c:	2b40      	cmp	r3, #64	@ 0x40
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b22      	cmp	r3, #34	@ 0x22
 8006492:	d128      	bne.n	80064e6 <HAL_UART_DMAStop+0xf4>
 8006494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d025      	beq.n	80064e6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3314      	adds	r3, #20
 80064a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064ba:	61fa      	str	r2, [r7, #28]
 80064bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	69b9      	ldr	r1, [r7, #24]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	617b      	str	r3, [r7, #20]
   return(result);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e5      	bne.n	800649a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fd fc44 	bl	8003d68 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fcf1 	bl	8006ec8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3740      	adds	r7, #64	@ 0x40
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b0ba      	sub	sp, #232	@ 0xe8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006516:	2300      	movs	r3, #0
 8006518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800651c:	2300      	movs	r3, #0
 800651e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800652e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10f      	bne.n	8006556 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <HAL_UART_IRQHandler+0x66>
 8006542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fd99 	bl	8007086 <UART_Receive_IT>
      return;
 8006554:	e25b      	b.n	8006a0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80de 	beq.w	800671c <HAL_UART_IRQHandler+0x22c>
 8006560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800656c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006570:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80d1 	beq.w	800671c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_UART_IRQHandler+0xae>
 8006586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800658a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d005      	beq.n	800659e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006596:	f043 0201 	orr.w	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <HAL_UART_IRQHandler+0xd2>
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d005      	beq.n	80065c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	f043 0202 	orr.w	r2, r3, #2
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <HAL_UART_IRQHandler+0xf6>
 80065ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065de:	f043 0204 	orr.w	r2, r3, #4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d011      	beq.n	8006616 <HAL_UART_IRQHandler+0x126>
 80065f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d105      	bne.n	800660a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	f043 0208 	orr.w	r2, r3, #8
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 81f2 	beq.w	8006a04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_UART_IRQHandler+0x14e>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fd24 	bl	8007086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006648:	2b40      	cmp	r3, #64	@ 0x40
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d103      	bne.n	800666a <HAL_UART_IRQHandler+0x17a>
 8006662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d04f      	beq.n	800670a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fc2c 	bl	8006ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667a:	2b40      	cmp	r3, #64	@ 0x40
 800667c:	d141      	bne.n	8006702 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3314      	adds	r3, #20
 8006684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006694:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800669c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3314      	adds	r3, #20
 80066a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1d9      	bne.n	800667e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d013      	beq.n	80066fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d6:	4a7e      	ldr	r2, [pc, #504]	@ (80068d0 <HAL_UART_IRQHandler+0x3e0>)
 80066d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fd fbb2 	bl	8003e48 <HAL_DMA_Abort_IT>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d016      	beq.n	8006718 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	e00e      	b.n	8006718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f9b2 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	e00a      	b.n	8006718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9ae 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	e006      	b.n	8006718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9aa 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006716:	e175      	b.n	8006a04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	bf00      	nop
    return;
 800671a:	e173      	b.n	8006a04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006720:	2b01      	cmp	r3, #1
 8006722:	f040 814f 	bne.w	80069c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8148 	beq.w	80069c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 8141 	beq.w	80069c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006762:	2b40      	cmp	r3, #64	@ 0x40
 8006764:	f040 80b6 	bne.w	80068d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8145 	beq.w	8006a08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006786:	429a      	cmp	r2, r3
 8006788:	f080 813e 	bcs.w	8006a08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006792:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800679e:	f000 8088 	beq.w	80068b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	330c      	adds	r3, #12
 80067a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1d9      	bne.n	80067a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3314      	adds	r3, #20
 80067f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006800:	f023 0301 	bic.w	r3, r3, #1
 8006804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3314      	adds	r3, #20
 800680e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006812:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006816:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800681a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e1      	bne.n	80067ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3314      	adds	r3, #20
 8006830:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800683a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800683c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3314      	adds	r3, #20
 800684a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800684e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006850:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006854:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800685c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e3      	bne.n	800682a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006882:	f023 0310 	bic.w	r3, r3, #16
 8006886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006894:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006896:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800689a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e3      	bne.n	8006870 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd fa5b 	bl	8003d68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f8d5 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068ce:	e09b      	b.n	8006a08 <HAL_UART_IRQHandler+0x518>
 80068d0:	08006f8f 	.word	0x08006f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 808e 	beq.w	8006a0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8089 	beq.w	8006a0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006910:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800691e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006920:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800692c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e3      	bne.n	80068fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006956:	633a      	str	r2, [r7, #48]	@ 0x30
 8006958:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e3      	bne.n	8006932 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	60fb      	str	r3, [r7, #12]
   return(result);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0310 	bic.w	r3, r3, #16
 800698e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800699c:	61fa      	str	r2, [r7, #28]
 800699e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	69b9      	ldr	r1, [r7, #24]
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	617b      	str	r3, [r7, #20]
   return(result);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e3      	bne.n	8006978 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f85b 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069c2:	e023      	b.n	8006a0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d009      	beq.n	80069e4 <HAL_UART_IRQHandler+0x4f4>
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 faea 	bl	8006fb6 <UART_Transmit_IT>
    return;
 80069e2:	e014      	b.n	8006a0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00e      	beq.n	8006a0e <HAL_UART_IRQHandler+0x51e>
 80069f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fb2a 	bl	8007056 <UART_EndTransmit_IT>
    return;
 8006a02:	e004      	b.n	8006a0e <HAL_UART_IRQHandler+0x51e>
    return;
 8006a04:	bf00      	nop
 8006a06:	e002      	b.n	8006a0e <HAL_UART_IRQHandler+0x51e>
      return;
 8006a08:	bf00      	nop
 8006a0a:	e000      	b.n	8006a0e <HAL_UART_IRQHandler+0x51e>
      return;
 8006a0c:	bf00      	nop
  }
}
 8006a0e:	37e8      	adds	r7, #232	@ 0xe8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b090      	sub	sp, #64	@ 0x40
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d137      	bne.n	8006b1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aae:	2200      	movs	r2, #0
 8006ab0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ad2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ada:	e841 2300 	strex	r3, r2, [r1]
 8006ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e5      	bne.n	8006ab2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b06:	61fa      	str	r2, [r7, #28]
 8006b08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	69b9      	ldr	r1, [r7, #24]
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	617b      	str	r3, [r7, #20]
   return(result);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e5      	bne.n	8006ae6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b1a:	e002      	b.n	8006b22 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006b1e:	f7ff ff79 	bl	8006a14 <HAL_UART_TxCpltCallback>
}
 8006b22:	bf00      	nop
 8006b24:	3740      	adds	r7, #64	@ 0x40
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff ff75 	bl	8006a28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b09c      	sub	sp, #112	@ 0x70
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d172      	bne.n	8006c48 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b64:	2200      	movs	r2, #0
 8006b66:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	330c      	adds	r3, #12
 8006b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b72:	e853 3f00 	ldrex	r3, [r3]
 8006b76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	330c      	adds	r3, #12
 8006b86:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006b8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e5      	bne.n	8006b68 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3314      	adds	r3, #20
 8006bba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006bbc:	647a      	str	r2, [r7, #68]	@ 0x44
 8006bbe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e5      	bne.n	8006b9c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3314      	adds	r3, #20
 8006bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	623b      	str	r3, [r7, #32]
   return(result);
 8006be0:	6a3b      	ldr	r3, [r7, #32]
 8006be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3314      	adds	r3, #20
 8006bee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bf0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e5      	bne.n	8006bd0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d119      	bne.n	8006c48 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	330c      	adds	r3, #12
 8006c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0310 	bic.w	r3, r3, #16
 8006c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	330c      	adds	r3, #12
 8006c32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c34:	61fa      	str	r2, [r7, #28]
 8006c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69b9      	ldr	r1, [r7, #24]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	617b      	str	r3, [r7, #20]
   return(result);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e5      	bne.n	8006c14 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d106      	bne.n	8006c64 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c5e:	f7ff ff0b 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c62:	e002      	b.n	8006c6a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006c64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c66:	f7ff fee9 	bl	8006a3c <HAL_UART_RxCpltCallback>
}
 8006c6a:	bf00      	nop
 8006c6c:	3770      	adds	r7, #112	@ 0x70
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d108      	bne.n	8006ca0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4619      	mov	r1, r3
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff feed 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c9e:	e002      	b.n	8006ca6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff fed5 	bl	8006a50 <HAL_UART_RxHalfCpltCallback>
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cca:	2b80      	cmp	r3, #128	@ 0x80
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b21      	cmp	r3, #33	@ 0x21
 8006ce0:	d108      	bne.n	8006cf4 <UART_DMAError+0x46>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006cee:	68b8      	ldr	r0, [r7, #8]
 8006cf0:	f000 f8c2 	bl	8006e78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	bf0c      	ite	eq
 8006d02:	2301      	moveq	r3, #1
 8006d04:	2300      	movne	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b22      	cmp	r3, #34	@ 0x22
 8006d14:	d108      	bne.n	8006d28 <UART_DMAError+0x7a>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f000 f8d0 	bl	8006ec8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2c:	f043 0210 	orr.w	r2, r3, #16
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d34:	68b8      	ldr	r0, [r7, #8]
 8006d36:	f7ff fe95 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b098      	sub	sp, #96	@ 0x60
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2222      	movs	r2, #34	@ 0x22
 8006d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d70:	4a3e      	ldr	r2, [pc, #248]	@ (8006e6c <UART_Start_Receive_DMA+0x128>)
 8006d72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	4a3d      	ldr	r2, [pc, #244]	@ (8006e70 <UART_Start_Receive_DMA+0x12c>)
 8006d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	4a3c      	ldr	r2, [pc, #240]	@ (8006e74 <UART_Start_Receive_DMA+0x130>)
 8006d82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	2200      	movs	r2, #0
 8006d8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006d8c:	f107 0308 	add.w	r3, r7, #8
 8006d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	88fb      	ldrh	r3, [r7, #6]
 8006da4:	f7fc ff88 	bl	8003cb8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d019      	beq.n	8006dfa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	330c      	adds	r3, #12
 8006dcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	330c      	adds	r3, #12
 8006de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006de6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e5      	bne.n	8006dc6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3314      	adds	r3, #20
 8006e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	f043 0301 	orr.w	r3, r3, #1
 8006e10:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3314      	adds	r3, #20
 8006e18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e1a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e5      	bne.n	8006dfa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3314      	adds	r3, #20
 8006e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e44:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3314      	adds	r3, #20
 8006e4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6a39      	ldr	r1, [r7, #32]
 8006e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e5      	bne.n	8006e2e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3760      	adds	r7, #96	@ 0x60
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	08006b47 	.word	0x08006b47
 8006e70:	08006c73 	.word	0x08006c73
 8006e74:	08006caf 	.word	0x08006caf

08006e78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b089      	sub	sp, #36	@ 0x24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	61ba      	str	r2, [r7, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea4:	6979      	ldr	r1, [r7, #20]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	e841 2300 	strex	r3, r2, [r1]
 8006eac:	613b      	str	r3, [r7, #16]
   return(result);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e5      	bne.n	8006e80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006ebc:	bf00      	nop
 8006ebe:	3724      	adds	r7, #36	@ 0x24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b095      	sub	sp, #84	@ 0x54
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ef0:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ef6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3314      	adds	r3, #20
 8006f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d119      	bne.n	8006f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f023 0310 	bic.w	r3, r3, #16
 8006f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f60:	61ba      	str	r2, [r7, #24]
 8006f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e5      	bne.n	8006f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f82:	bf00      	nop
 8006f84:	3754      	adds	r7, #84	@ 0x54
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff fd5b 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b21      	cmp	r3, #33	@ 0x21
 8006fc8:	d13e      	bne.n	8007048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd2:	d114      	bne.n	8006ffe <UART_Transmit_IT+0x48>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d110      	bne.n	8006ffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	1c9a      	adds	r2, r3, #2
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	621a      	str	r2, [r3, #32]
 8006ffc:	e008      	b.n	8007010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	1c59      	adds	r1, r3, #1
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6211      	str	r1, [r2, #32]
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29b      	uxth	r3, r3
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4619      	mov	r1, r3
 800701e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10f      	bne.n	8007044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800706c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fccc 	bl	8006a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b08c      	sub	sp, #48	@ 0x30
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b22      	cmp	r3, #34	@ 0x22
 8007098:	f040 80ae 	bne.w	80071f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070a4:	d117      	bne.n	80070d6 <UART_Receive_IT+0x50>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d113      	bne.n	80070d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ce:	1c9a      	adds	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80070d4:	e026      	b.n	8007124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e8:	d007      	beq.n	80070fa <UART_Receive_IT+0x74>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <UART_Receive_IT+0x82>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e008      	b.n	800711a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007114:	b2da      	uxtb	r2, r3
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4619      	mov	r1, r3
 8007132:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007134:	2b00      	cmp	r3, #0
 8007136:	d15d      	bne.n	80071f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0220 	bic.w	r2, r2, #32
 8007146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695a      	ldr	r2, [r3, #20]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717a:	2b01      	cmp	r3, #1
 800717c:	d135      	bne.n	80071ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	613b      	str	r3, [r7, #16]
   return(result);
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f023 0310 	bic.w	r3, r3, #16
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071a4:	623a      	str	r2, [r7, #32]
 80071a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	69f9      	ldr	r1, [r7, #28]
 80071aa:	6a3a      	ldr	r2, [r7, #32]
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e5      	bne.n	8007184 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b10      	cmp	r3, #16
 80071c4:	d10a      	bne.n	80071dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff fc48 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
 80071e8:	e002      	b.n	80071f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fc26 	bl	8006a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e002      	b.n	80071fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	e000      	b.n	80071fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071f8:	2302      	movs	r3, #2
  }
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3730      	adds	r7, #48	@ 0x30
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007208:	b0c0      	sub	sp, #256	@ 0x100
 800720a:	af00      	add	r7, sp, #0
 800720c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	68d9      	ldr	r1, [r3, #12]
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	ea40 0301 	orr.w	r3, r0, r1
 800722c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800722e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	431a      	orrs	r2, r3
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	431a      	orrs	r2, r3
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800725c:	f021 010c 	bic.w	r1, r1, #12
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800726a:	430b      	orrs	r3, r1
 800726c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727e:	6999      	ldr	r1, [r3, #24]
 8007280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	ea40 0301 	orr.w	r3, r0, r1
 800728a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b8f      	ldr	r3, [pc, #572]	@ (80074d0 <UART_SetConfig+0x2cc>)
 8007294:	429a      	cmp	r2, r3
 8007296:	d005      	beq.n	80072a4 <UART_SetConfig+0xa0>
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b8d      	ldr	r3, [pc, #564]	@ (80074d4 <UART_SetConfig+0x2d0>)
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d104      	bne.n	80072ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fd fc68 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 80072a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072ac:	e003      	b.n	80072b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ae:	f7fd fc4f 	bl	8004b50 <HAL_RCC_GetPCLK1Freq>
 80072b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c0:	f040 810c 	bne.w	80074dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072d6:	4622      	mov	r2, r4
 80072d8:	462b      	mov	r3, r5
 80072da:	1891      	adds	r1, r2, r2
 80072dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072de:	415b      	adcs	r3, r3
 80072e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072e6:	4621      	mov	r1, r4
 80072e8:	eb12 0801 	adds.w	r8, r2, r1
 80072ec:	4629      	mov	r1, r5
 80072ee:	eb43 0901 	adc.w	r9, r3, r1
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	f04f 0300 	mov.w	r3, #0
 80072fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007306:	4690      	mov	r8, r2
 8007308:	4699      	mov	r9, r3
 800730a:	4623      	mov	r3, r4
 800730c:	eb18 0303 	adds.w	r3, r8, r3
 8007310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007314:	462b      	mov	r3, r5
 8007316:	eb49 0303 	adc.w	r3, r9, r3
 800731a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800731e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800732a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800732e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007332:	460b      	mov	r3, r1
 8007334:	18db      	adds	r3, r3, r3
 8007336:	653b      	str	r3, [r7, #80]	@ 0x50
 8007338:	4613      	mov	r3, r2
 800733a:	eb42 0303 	adc.w	r3, r2, r3
 800733e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007348:	f7f9 fcb8 	bl	8000cbc <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4b61      	ldr	r3, [pc, #388]	@ (80074d8 <UART_SetConfig+0x2d4>)
 8007352:	fba3 2302 	umull	r2, r3, r3, r2
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	011c      	lsls	r4, r3, #4
 800735a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735e:	2200      	movs	r2, #0
 8007360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007364:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007374:	415b      	adcs	r3, r3
 8007376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800737c:	4641      	mov	r1, r8
 800737e:	eb12 0a01 	adds.w	sl, r2, r1
 8007382:	4649      	mov	r1, r9
 8007384:	eb43 0b01 	adc.w	fp, r3, r1
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800739c:	4692      	mov	sl, r2
 800739e:	469b      	mov	fp, r3
 80073a0:	4643      	mov	r3, r8
 80073a2:	eb1a 0303 	adds.w	r3, sl, r3
 80073a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073aa:	464b      	mov	r3, r9
 80073ac:	eb4b 0303 	adc.w	r3, fp, r3
 80073b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073c8:	460b      	mov	r3, r1
 80073ca:	18db      	adds	r3, r3, r3
 80073cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80073ce:	4613      	mov	r3, r2
 80073d0:	eb42 0303 	adc.w	r3, r2, r3
 80073d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073de:	f7f9 fc6d 	bl	8000cbc <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4611      	mov	r1, r2
 80073e8:	4b3b      	ldr	r3, [pc, #236]	@ (80074d8 <UART_SetConfig+0x2d4>)
 80073ea:	fba3 2301 	umull	r2, r3, r3, r1
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	2264      	movs	r2, #100	@ 0x64
 80073f2:	fb02 f303 	mul.w	r3, r2, r3
 80073f6:	1acb      	subs	r3, r1, r3
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073fe:	4b36      	ldr	r3, [pc, #216]	@ (80074d8 <UART_SetConfig+0x2d4>)
 8007400:	fba3 2302 	umull	r2, r3, r3, r2
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800740c:	441c      	add	r4, r3
 800740e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007412:	2200      	movs	r2, #0
 8007414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007418:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800741c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	1891      	adds	r1, r2, r2
 8007426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007428:	415b      	adcs	r3, r3
 800742a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800742c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007430:	4641      	mov	r1, r8
 8007432:	1851      	adds	r1, r2, r1
 8007434:	6339      	str	r1, [r7, #48]	@ 0x30
 8007436:	4649      	mov	r1, r9
 8007438:	414b      	adcs	r3, r1
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007448:	4659      	mov	r1, fp
 800744a:	00cb      	lsls	r3, r1, #3
 800744c:	4651      	mov	r1, sl
 800744e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007452:	4651      	mov	r1, sl
 8007454:	00ca      	lsls	r2, r1, #3
 8007456:	4610      	mov	r0, r2
 8007458:	4619      	mov	r1, r3
 800745a:	4603      	mov	r3, r0
 800745c:	4642      	mov	r2, r8
 800745e:	189b      	adds	r3, r3, r2
 8007460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007464:	464b      	mov	r3, r9
 8007466:	460a      	mov	r2, r1
 8007468:	eb42 0303 	adc.w	r3, r2, r3
 800746c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800747c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007484:	460b      	mov	r3, r1
 8007486:	18db      	adds	r3, r3, r3
 8007488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800748a:	4613      	mov	r3, r2
 800748c:	eb42 0303 	adc.w	r3, r2, r3
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800749a:	f7f9 fc0f 	bl	8000cbc <__aeabi_uldivmod>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <UART_SetConfig+0x2d4>)
 80074a4:	fba3 1302 	umull	r1, r3, r3, r2
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	2164      	movs	r1, #100	@ 0x64
 80074ac:	fb01 f303 	mul.w	r3, r1, r3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	3332      	adds	r3, #50	@ 0x32
 80074b6:	4a08      	ldr	r2, [pc, #32]	@ (80074d8 <UART_SetConfig+0x2d4>)
 80074b8:	fba2 2303 	umull	r2, r3, r2, r3
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	f003 0207 	and.w	r2, r3, #7
 80074c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4422      	add	r2, r4
 80074ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074cc:	e106      	b.n	80076dc <UART_SetConfig+0x4d8>
 80074ce:	bf00      	nop
 80074d0:	40011000 	.word	0x40011000
 80074d4:	40011400 	.word	0x40011400
 80074d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074ee:	4642      	mov	r2, r8
 80074f0:	464b      	mov	r3, r9
 80074f2:	1891      	adds	r1, r2, r2
 80074f4:	6239      	str	r1, [r7, #32]
 80074f6:	415b      	adcs	r3, r3
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80074fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074fe:	4641      	mov	r1, r8
 8007500:	1854      	adds	r4, r2, r1
 8007502:	4649      	mov	r1, r9
 8007504:	eb43 0501 	adc.w	r5, r3, r1
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	00eb      	lsls	r3, r5, #3
 8007512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007516:	00e2      	lsls	r2, r4, #3
 8007518:	4614      	mov	r4, r2
 800751a:	461d      	mov	r5, r3
 800751c:	4643      	mov	r3, r8
 800751e:	18e3      	adds	r3, r4, r3
 8007520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007524:	464b      	mov	r3, r9
 8007526:	eb45 0303 	adc.w	r3, r5, r3
 800752a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800752e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800753a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800754a:	4629      	mov	r1, r5
 800754c:	008b      	lsls	r3, r1, #2
 800754e:	4621      	mov	r1, r4
 8007550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007554:	4621      	mov	r1, r4
 8007556:	008a      	lsls	r2, r1, #2
 8007558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800755c:	f7f9 fbae 	bl	8000cbc <__aeabi_uldivmod>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4b60      	ldr	r3, [pc, #384]	@ (80076e8 <UART_SetConfig+0x4e4>)
 8007566:	fba3 2302 	umull	r2, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	011c      	lsls	r4, r3, #4
 800756e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007572:	2200      	movs	r2, #0
 8007574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800757c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007580:	4642      	mov	r2, r8
 8007582:	464b      	mov	r3, r9
 8007584:	1891      	adds	r1, r2, r2
 8007586:	61b9      	str	r1, [r7, #24]
 8007588:	415b      	adcs	r3, r3
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007590:	4641      	mov	r1, r8
 8007592:	1851      	adds	r1, r2, r1
 8007594:	6139      	str	r1, [r7, #16]
 8007596:	4649      	mov	r1, r9
 8007598:	414b      	adcs	r3, r1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075a8:	4659      	mov	r1, fp
 80075aa:	00cb      	lsls	r3, r1, #3
 80075ac:	4651      	mov	r1, sl
 80075ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075b2:	4651      	mov	r1, sl
 80075b4:	00ca      	lsls	r2, r1, #3
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	4642      	mov	r2, r8
 80075be:	189b      	adds	r3, r3, r2
 80075c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075c4:	464b      	mov	r3, r9
 80075c6:	460a      	mov	r2, r1
 80075c8:	eb42 0303 	adc.w	r3, r2, r3
 80075cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075e8:	4649      	mov	r1, r9
 80075ea:	008b      	lsls	r3, r1, #2
 80075ec:	4641      	mov	r1, r8
 80075ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075f2:	4641      	mov	r1, r8
 80075f4:	008a      	lsls	r2, r1, #2
 80075f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075fa:	f7f9 fb5f 	bl	8000cbc <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4611      	mov	r1, r2
 8007604:	4b38      	ldr	r3, [pc, #224]	@ (80076e8 <UART_SetConfig+0x4e4>)
 8007606:	fba3 2301 	umull	r2, r3, r3, r1
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2264      	movs	r2, #100	@ 0x64
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	1acb      	subs	r3, r1, r3
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	3332      	adds	r3, #50	@ 0x32
 8007618:	4a33      	ldr	r2, [pc, #204]	@ (80076e8 <UART_SetConfig+0x4e4>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007624:	441c      	add	r4, r3
 8007626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800762a:	2200      	movs	r2, #0
 800762c:	673b      	str	r3, [r7, #112]	@ 0x70
 800762e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007630:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	1891      	adds	r1, r2, r2
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	415b      	adcs	r3, r3
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007644:	4641      	mov	r1, r8
 8007646:	1851      	adds	r1, r2, r1
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	4649      	mov	r1, r9
 800764c:	414b      	adcs	r3, r1
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	f04f 0300 	mov.w	r3, #0
 8007658:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800765c:	4659      	mov	r1, fp
 800765e:	00cb      	lsls	r3, r1, #3
 8007660:	4651      	mov	r1, sl
 8007662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007666:	4651      	mov	r1, sl
 8007668:	00ca      	lsls	r2, r1, #3
 800766a:	4610      	mov	r0, r2
 800766c:	4619      	mov	r1, r3
 800766e:	4603      	mov	r3, r0
 8007670:	4642      	mov	r2, r8
 8007672:	189b      	adds	r3, r3, r2
 8007674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007676:	464b      	mov	r3, r9
 8007678:	460a      	mov	r2, r1
 800767a:	eb42 0303 	adc.w	r3, r2, r3
 800767e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	663b      	str	r3, [r7, #96]	@ 0x60
 800768a:	667a      	str	r2, [r7, #100]	@ 0x64
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007698:	4649      	mov	r1, r9
 800769a:	008b      	lsls	r3, r1, #2
 800769c:	4641      	mov	r1, r8
 800769e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076a2:	4641      	mov	r1, r8
 80076a4:	008a      	lsls	r2, r1, #2
 80076a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076aa:	f7f9 fb07 	bl	8000cbc <__aeabi_uldivmod>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <UART_SetConfig+0x4e4>)
 80076b4:	fba3 1302 	umull	r1, r3, r3, r2
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	2164      	movs	r1, #100	@ 0x64
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	3332      	adds	r3, #50	@ 0x32
 80076c6:	4a08      	ldr	r2, [pc, #32]	@ (80076e8 <UART_SetConfig+0x4e4>)
 80076c8:	fba2 2303 	umull	r2, r3, r2, r3
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	f003 020f 	and.w	r2, r3, #15
 80076d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4422      	add	r2, r4
 80076da:	609a      	str	r2, [r3, #8]
}
 80076dc:	bf00      	nop
 80076de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076e2:	46bd      	mov	sp, r7
 80076e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e8:	51eb851f 	.word	0x51eb851f

080076ec <__NVIC_SetPriority>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	db0a      	blt.n	8007716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	490c      	ldr	r1, [pc, #48]	@ (8007738 <__NVIC_SetPriority+0x4c>)
 8007706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	440b      	add	r3, r1
 8007710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007714:	e00a      	b.n	800772c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4908      	ldr	r1, [pc, #32]	@ (800773c <__NVIC_SetPriority+0x50>)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	3b04      	subs	r3, #4
 8007724:	0112      	lsls	r2, r2, #4
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	440b      	add	r3, r1
 800772a:	761a      	strb	r2, [r3, #24]
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	e000e100 	.word	0xe000e100
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007744:	4b05      	ldr	r3, [pc, #20]	@ (800775c <SysTick_Handler+0x1c>)
 8007746:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007748:	f001 fd40 	bl	80091cc <xTaskGetSchedulerState>
 800774c:	4603      	mov	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d001      	beq.n	8007756 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007752:	f002 fb39 	bl	8009dc8 <xPortSysTickHandler>
  }
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	e000e010 	.word	0xe000e010

08007760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007764:	2100      	movs	r1, #0
 8007766:	f06f 0004 	mvn.w	r0, #4
 800776a:	f7ff ffbf 	bl	80076ec <__NVIC_SetPriority>
#endif
}
 800776e:	bf00      	nop
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800777a:	f3ef 8305 	mrs	r3, IPSR
 800777e:	603b      	str	r3, [r7, #0]
  return(result);
 8007780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007786:	f06f 0305 	mvn.w	r3, #5
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	e00c      	b.n	80077a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800778e:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <osKernelInitialize+0x44>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007796:	4b08      	ldr	r3, [pc, #32]	@ (80077b8 <osKernelInitialize+0x44>)
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800779c:	2300      	movs	r3, #0
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	e002      	b.n	80077a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077a8:	687b      	ldr	r3, [r7, #4]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20008aec 	.word	0x20008aec

080077bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077c2:	f3ef 8305 	mrs	r3, IPSR
 80077c6:	603b      	str	r3, [r7, #0]
  return(result);
 80077c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80077ce:	f06f 0305 	mvn.w	r3, #5
 80077d2:	607b      	str	r3, [r7, #4]
 80077d4:	e010      	b.n	80077f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007804 <osKernelStart+0x48>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d109      	bne.n	80077f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077de:	f7ff ffbf 	bl	8007760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077e2:	4b08      	ldr	r3, [pc, #32]	@ (8007804 <osKernelStart+0x48>)
 80077e4:	2202      	movs	r2, #2
 80077e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077e8:	f001 f87a 	bl	80088e0 <vTaskStartScheduler>
      stat = osOK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	607b      	str	r3, [r7, #4]
 80077f0:	e002      	b.n	80077f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80077f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077f8:	687b      	ldr	r3, [r7, #4]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20008aec 	.word	0x20008aec

08007808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007808:	b580      	push	{r7, lr}
 800780a:	b08e      	sub	sp, #56	@ 0x38
 800780c:	af04      	add	r7, sp, #16
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007818:	f3ef 8305 	mrs	r3, IPSR
 800781c:	617b      	str	r3, [r7, #20]
  return(result);
 800781e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007820:	2b00      	cmp	r3, #0
 8007822:	d17e      	bne.n	8007922 <osThreadNew+0x11a>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d07b      	beq.n	8007922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800782a:	2380      	movs	r3, #128	@ 0x80
 800782c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800782e:	2318      	movs	r3, #24
 8007830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007836:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800783a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d045      	beq.n	80078ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <osThreadNew+0x48>
        name = attr->name;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <osThreadNew+0x6e>
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b38      	cmp	r3, #56	@ 0x38
 8007868:	d805      	bhi.n	8007876 <osThreadNew+0x6e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <osThreadNew+0x72>
        return (NULL);
 8007876:	2300      	movs	r3, #0
 8007878:	e054      	b.n	8007924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	089b      	lsrs	r3, r3, #2
 8007888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00e      	beq.n	80078b0 <osThreadNew+0xa8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	2b5b      	cmp	r3, #91	@ 0x5b
 8007898:	d90a      	bls.n	80078b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d006      	beq.n	80078b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <osThreadNew+0xa8>
        mem = 1;
 80078aa:	2301      	movs	r3, #1
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e010      	b.n	80078d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10c      	bne.n	80078d2 <osThreadNew+0xca>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d108      	bne.n	80078d2 <osThreadNew+0xca>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <osThreadNew+0xca>
          mem = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	e001      	b.n	80078d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d110      	bne.n	80078fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078e0:	9202      	str	r2, [sp, #8]
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fe1a 	bl	8008528 <xTaskCreateStatic>
 80078f4:	4603      	mov	r3, r0
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	e013      	b.n	8007922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d110      	bne.n	8007922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	b29a      	uxth	r2, r3
 8007904:	f107 0310 	add.w	r3, r7, #16
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fe68 	bl	80085e8 <xTaskCreate>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	d001      	beq.n	8007922 <osThreadNew+0x11a>
            hTask = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007922:	693b      	ldr	r3, [r7, #16]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	@ 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007934:	f3ef 8305 	mrs	r3, IPSR
 8007938:	60bb      	str	r3, [r7, #8]
  return(result);
 800793a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <osDelay+0x1c>
    stat = osErrorISR;
 8007940:	f06f 0305 	mvn.w	r3, #5
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	e007      	b.n	8007958 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 ff8e 	bl	8008874 <vTaskDelay>
    }
  }

  return (stat);
 8007958:	68fb      	ldr	r3, [r7, #12]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a07      	ldr	r2, [pc, #28]	@ (8007990 <vApplicationGetIdleTaskMemory+0x2c>)
 8007974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4a06      	ldr	r2, [pc, #24]	@ (8007994 <vApplicationGetIdleTaskMemory+0x30>)
 800797a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2280      	movs	r2, #128	@ 0x80
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20008af0 	.word	0x20008af0
 8007994:	20008b4c 	.word	0x20008b4c

08007998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a07      	ldr	r2, [pc, #28]	@ (80079c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80079a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4a06      	ldr	r2, [pc, #24]	@ (80079c8 <vApplicationGetTimerTaskMemory+0x30>)
 80079ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079b6:	601a      	str	r2, [r3, #0]
}
 80079b8:	bf00      	nop
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	20008d4c 	.word	0x20008d4c
 80079c8:	20008da8 	.word	0x20008da8

080079cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 0208 	add.w	r2, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f103 0208 	add.w	r2, r3, #8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f103 0208 	add.w	r2, r3, #8
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	601a      	str	r2, [r3, #0]
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a84:	d103      	bne.n	8007a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	e00c      	b.n	8007aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	3308      	adds	r3, #8
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	e002      	b.n	8007a9c <vListInsert+0x2e>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d2f6      	bcs.n	8007a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6892      	ldr	r2, [r2, #8]
 8007af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6852      	ldr	r2, [r2, #4]
 8007b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d103      	bne.n	8007b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10b      	bne.n	8007b60 <xQueueGenericReset+0x2c>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	60bb      	str	r3, [r7, #8]
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	e7fd      	b.n	8007b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b60:	f002 f8a2 	bl	8009ca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b70:	fb01 f303 	mul.w	r3, r1, r3
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b90:	3b01      	subs	r3, #1
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007b96:	fb01 f303 	mul.w	r3, r1, r3
 8007b9a:	441a      	add	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	22ff      	movs	r2, #255	@ 0xff
 8007ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	22ff      	movs	r2, #255	@ 0xff
 8007bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d114      	bne.n	8007be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01a      	beq.n	8007bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3310      	adds	r3, #16
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f91a 	bl	8008dfc <xTaskRemoveFromEventList>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d012      	beq.n	8007bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bce:	4b0d      	ldr	r3, [pc, #52]	@ (8007c04 <xQueueGenericReset+0xd0>)
 8007bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	e009      	b.n	8007bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3310      	adds	r3, #16
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fef1 	bl	80079cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3324      	adds	r3, #36	@ 0x24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff feec 	bl	80079cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007bf4:	f002 f88a 	bl	8009d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007bf8:	2301      	movs	r3, #1
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	e000ed04 	.word	0xe000ed04

08007c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	@ 0x38
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10b      	bne.n	8007c34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	e7fd      	b.n	8007c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007c4c:	bf00      	nop
 8007c4e:	bf00      	nop
 8007c50:	e7fd      	b.n	8007c4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <xQueueGenericCreateStatic+0x56>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <xQueueGenericCreateStatic+0x5a>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <xQueueGenericCreateStatic+0x5c>
 8007c62:	2300      	movs	r3, #0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	623b      	str	r3, [r7, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d102      	bne.n	8007c8c <xQueueGenericCreateStatic+0x84>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <xQueueGenericCreateStatic+0x88>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <xQueueGenericCreateStatic+0x8a>
 8007c90:	2300      	movs	r3, #0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10b      	bne.n	8007cae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61fb      	str	r3, [r7, #28]
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	e7fd      	b.n	8007caa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cae:	2350      	movs	r3, #80	@ 0x50
 8007cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b50      	cmp	r3, #80	@ 0x50
 8007cb6:	d00b      	beq.n	8007cd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00d      	beq.n	8007cf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	4613      	mov	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f805 	bl	8007d02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3730      	adds	r7, #48	@ 0x30
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d103      	bne.n	8007d1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e002      	b.n	8007d24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d30:	2101      	movs	r1, #1
 8007d32:	69b8      	ldr	r0, [r7, #24]
 8007d34:	f7ff fefe 	bl	8007b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	@ 0x38
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d56:	2300      	movs	r3, #0
 8007d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <xQueueGenericSend+0x34>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <xQueueGenericSend+0x42>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <xQueueGenericSend+0x46>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <xQueueGenericSend+0x48>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10b      	bne.n	8007dac <xQueueGenericSend+0x64>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	e7fd      	b.n	8007da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d103      	bne.n	8007dba <xQueueGenericSend+0x72>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <xQueueGenericSend+0x76>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <xQueueGenericSend+0x78>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10b      	bne.n	8007ddc <xQueueGenericSend+0x94>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	623b      	str	r3, [r7, #32]
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	e7fd      	b.n	8007dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ddc:	f001 f9f6 	bl	80091cc <xTaskGetSchedulerState>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <xQueueGenericSend+0xa4>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <xQueueGenericSend+0xa8>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <xQueueGenericSend+0xaa>
 8007df0:	2300      	movs	r3, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	61fb      	str	r3, [r7, #28]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e0e:	f001 ff4b 	bl	8009ca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d302      	bcc.n	8007e24 <xQueueGenericSend+0xdc>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d129      	bne.n	8007e78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e2a:	f000 fa0f 	bl	800824c <prvCopyDataToQueue>
 8007e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	3324      	adds	r3, #36	@ 0x24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 ffdd 	bl	8008dfc <xTaskRemoveFromEventList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d013      	beq.n	8007e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e48:	4b3f      	ldr	r3, [pc, #252]	@ (8007f48 <xQueueGenericSend+0x200>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	e00a      	b.n	8007e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e60:	4b39      	ldr	r3, [pc, #228]	@ (8007f48 <xQueueGenericSend+0x200>)
 8007e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e70:	f001 ff4c 	bl	8009d0c <vPortExitCritical>
				return pdPASS;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e063      	b.n	8007f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d103      	bne.n	8007e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e7e:	f001 ff45 	bl	8009d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e05c      	b.n	8007f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d106      	bne.n	8007e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e8c:	f107 0314 	add.w	r3, r7, #20
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 f83f 	bl	8008f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e9a:	f001 ff37 	bl	8009d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e9e:	f000 fd87 	bl	80089b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ea2:	f001 ff01 	bl	8009ca8 <vPortEnterCritical>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eac:	b25b      	sxtb	r3, r3
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eb2:	d103      	bne.n	8007ebc <xQueueGenericSend+0x174>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec8:	d103      	bne.n	8007ed2 <xQueueGenericSend+0x18a>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ed2:	f001 ff1b 	bl	8009d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ed6:	1d3a      	adds	r2, r7, #4
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f001 f82e 	bl	8008f40 <xTaskCheckForTimeOut>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d124      	bne.n	8007f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007eec:	f000 faa6 	bl	800843c <prvIsQueueFull>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	3310      	adds	r3, #16
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 ff2a 	bl	8008d58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f06:	f000 fa31 	bl	800836c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f0a:	f000 fd5f 	bl	80089cc <xTaskResumeAll>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f47f af7c 	bne.w	8007e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007f16:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <xQueueGenericSend+0x200>)
 8007f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	e772      	b.n	8007e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f2a:	f000 fa1f 	bl	800836c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f2e:	f000 fd4d 	bl	80089cc <xTaskResumeAll>
 8007f32:	e76c      	b.n	8007e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f36:	f000 fa19 	bl	800836c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f3a:	f000 fd47 	bl	80089cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3738      	adds	r7, #56	@ 0x38
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	e000ed04 	.word	0xe000ed04

08007f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b090      	sub	sp, #64	@ 0x40
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10b      	bne.n	8007f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f76:	bf00      	nop
 8007f78:	bf00      	nop
 8007f7a:	e7fd      	b.n	8007f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <xQueueGenericSendFromISR+0x3e>
 8007f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <xQueueGenericSendFromISR+0x42>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <xQueueGenericSendFromISR+0x44>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d103      	bne.n	8007fba <xQueueGenericSendFromISR+0x6e>
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <xQueueGenericSendFromISR+0x72>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <xQueueGenericSendFromISR+0x74>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	623b      	str	r3, [r7, #32]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fdc:	f001 ff44 	bl	8009e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	61fa      	str	r2, [r7, #28]
 8007ff6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008004:	429a      	cmp	r2, r3
 8008006:	d302      	bcc.n	800800e <xQueueGenericSendFromISR+0xc2>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d12f      	bne.n	800806e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800800e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008024:	f000 f912 	bl	800824c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008030:	d112      	bne.n	8008058 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	d016      	beq.n	8008068 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	3324      	adds	r3, #36	@ 0x24
 800803e:	4618      	mov	r0, r3
 8008040:	f000 fedc 	bl	8008dfc <xTaskRemoveFromEventList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00e      	beq.n	8008068 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e007      	b.n	8008068 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800805c:	3301      	adds	r3, #1
 800805e:	b2db      	uxtb	r3, r3
 8008060:	b25a      	sxtb	r2, r3
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008068:	2301      	movs	r3, #1
 800806a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800806c:	e001      	b.n	8008072 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800806e:	2300      	movs	r3, #0
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008074:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800807c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800807e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008080:	4618      	mov	r0, r3
 8008082:	3740      	adds	r7, #64	@ 0x40
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	@ 0x30
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008094:	2300      	movs	r3, #0
 8008096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <xQueueReceive+0x32>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	623b      	str	r3, [r7, #32]
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	e7fd      	b.n	80080b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <xQueueReceive+0x40>
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <xQueueReceive+0x44>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <xQueueReceive+0x46>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <xQueueReceive+0x62>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	61fb      	str	r3, [r7, #28]
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ea:	f001 f86f 	bl	80091cc <xTaskGetSchedulerState>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d102      	bne.n	80080fa <xQueueReceive+0x72>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <xQueueReceive+0x76>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <xQueueReceive+0x78>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <xQueueReceive+0x94>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	61bb      	str	r3, [r7, #24]
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800811c:	f001 fdc4 	bl	8009ca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01f      	beq.n	800816c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008130:	f000 f8f6 	bl	8008320 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008136:	1e5a      	subs	r2, r3, #1
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800813c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00f      	beq.n	8008164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008146:	3310      	adds	r3, #16
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fe57 	bl	8008dfc <xTaskRemoveFromEventList>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008154:	4b3c      	ldr	r3, [pc, #240]	@ (8008248 <xQueueReceive+0x1c0>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008164:	f001 fdd2 	bl	8009d0c <vPortExitCritical>
				return pdPASS;
 8008168:	2301      	movs	r3, #1
 800816a:	e069      	b.n	8008240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d103      	bne.n	800817a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008172:	f001 fdcb 	bl	8009d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008176:	2300      	movs	r3, #0
 8008178:	e062      	b.n	8008240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800817a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fec5 	bl	8008f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800818a:	2301      	movs	r3, #1
 800818c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800818e:	f001 fdbd 	bl	8009d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008192:	f000 fc0d 	bl	80089b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008196:	f001 fd87 	bl	8009ca8 <vPortEnterCritical>
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081a0:	b25b      	sxtb	r3, r3
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081a6:	d103      	bne.n	80081b0 <xQueueReceive+0x128>
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081bc:	d103      	bne.n	80081c6 <xQueueReceive+0x13e>
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081c6:	f001 fda1 	bl	8009d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081ca:	1d3a      	adds	r2, r7, #4
 80081cc:	f107 0310 	add.w	r3, r7, #16
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 feb4 	bl	8008f40 <xTaskCheckForTimeOut>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d123      	bne.n	8008226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e0:	f000 f916 	bl	8008410 <prvIsQueueEmpty>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d017      	beq.n	800821a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	3324      	adds	r3, #36	@ 0x24
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4611      	mov	r1, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fdb0 	bl	8008d58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081fa:	f000 f8b7 	bl	800836c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081fe:	f000 fbe5 	bl	80089cc <xTaskResumeAll>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d189      	bne.n	800811c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008208:	4b0f      	ldr	r3, [pc, #60]	@ (8008248 <xQueueReceive+0x1c0>)
 800820a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	e780      	b.n	800811c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800821a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800821c:	f000 f8a6 	bl	800836c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008220:	f000 fbd4 	bl	80089cc <xTaskResumeAll>
 8008224:	e77a      	b.n	800811c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008228:	f000 f8a0 	bl	800836c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800822c:	f000 fbce 	bl	80089cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008232:	f000 f8ed 	bl	8008410 <prvIsQueueEmpty>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	f43f af6f 	beq.w	800811c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800823e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008240:	4618      	mov	r0, r3
 8008242:	3730      	adds	r7, #48	@ 0x30
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	e000ed04 	.word	0xe000ed04

0800824c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10d      	bne.n	8008286 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d14d      	bne.n	800830e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 ffc6 	bl	8009208 <xTaskPriorityDisinherit>
 800827c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	609a      	str	r2, [r3, #8]
 8008284:	e043      	b.n	800830e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d119      	bne.n	80082c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6858      	ldr	r0, [r3, #4]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008294:	461a      	mov	r2, r3
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	f012 ff57 	bl	801b14a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d32b      	bcc.n	800830e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	605a      	str	r2, [r3, #4]
 80082be:	e026      	b.n	800830e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	68d8      	ldr	r0, [r3, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c8:	461a      	mov	r2, r3
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	f012 ff3d 	bl	801b14a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d8:	425b      	negs	r3, r3
 80082da:	441a      	add	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d207      	bcs.n	80082fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f4:	425b      	negs	r3, r3
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d105      	bne.n	800830e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	3b01      	subs	r3, #1
 800830c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008316:	697b      	ldr	r3, [r7, #20]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d018      	beq.n	8008364 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833a:	441a      	add	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	d303      	bcc.n	8008354 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68d9      	ldr	r1, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835c:	461a      	mov	r2, r3
 800835e:	6838      	ldr	r0, [r7, #0]
 8008360:	f012 fef3 	bl	801b14a <memcpy>
	}
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008374:	f001 fc98 	bl	8009ca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800837e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008380:	e011      	b.n	80083a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	d012      	beq.n	80083b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3324      	adds	r3, #36	@ 0x24
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fd34 	bl	8008dfc <xTaskRemoveFromEventList>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800839a:	f000 fe35 	bl	8009008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dce9      	bgt.n	8008382 <prvUnlockQueue+0x16>
 80083ae:	e000      	b.n	80083b2 <prvUnlockQueue+0x46>
					break;
 80083b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	22ff      	movs	r2, #255	@ 0xff
 80083b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80083ba:	f001 fca7 	bl	8009d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083be:	f001 fc73 	bl	8009ca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083ca:	e011      	b.n	80083f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d012      	beq.n	80083fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3310      	adds	r3, #16
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fd0f 	bl	8008dfc <xTaskRemoveFromEventList>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083e4:	f000 fe10 	bl	8009008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dce9      	bgt.n	80083cc <prvUnlockQueue+0x60>
 80083f8:	e000      	b.n	80083fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	22ff      	movs	r2, #255	@ 0xff
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008404:	f001 fc82 	bl	8009d0c <vPortExitCritical>
}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008418:	f001 fc46 	bl	8009ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008424:	2301      	movs	r3, #1
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	e001      	b.n	800842e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800842e:	f001 fc6d 	bl	8009d0c <vPortExitCritical>

	return xReturn;
 8008432:	68fb      	ldr	r3, [r7, #12]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008444:	f001 fc30 	bl	8009ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008450:	429a      	cmp	r2, r3
 8008452:	d102      	bne.n	800845a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e001      	b.n	800845e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800845e:	f001 fc55 	bl	8009d0c <vPortExitCritical>

	return xReturn;
 8008462:	68fb      	ldr	r3, [r7, #12]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e014      	b.n	80084a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800847c:	4a0f      	ldr	r2, [pc, #60]	@ (80084bc <vQueueAddToRegistry+0x50>)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008488:	490c      	ldr	r1, [pc, #48]	@ (80084bc <vQueueAddToRegistry+0x50>)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008492:	4a0a      	ldr	r2, [pc, #40]	@ (80084bc <vQueueAddToRegistry+0x50>)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	4413      	add	r3, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800849e:	e006      	b.n	80084ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	d9e7      	bls.n	800847c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	200091a8 	.word	0x200091a8

080084c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084d0:	f001 fbea 	bl	8009ca8 <vPortEnterCritical>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084e0:	d103      	bne.n	80084ea <vQueueWaitForMessageRestricted+0x2a>
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084f6:	d103      	bne.n	8008500 <vQueueWaitForMessageRestricted+0x40>
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008500:	f001 fc04 	bl	8009d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	d106      	bne.n	800851a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	3324      	adds	r3, #36	@ 0x24
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fc45 	bl	8008da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800851a:	6978      	ldr	r0, [r7, #20]
 800851c:	f7ff ff26 	bl	800836c <prvUnlockQueue>
	}
 8008520:	bf00      	nop
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08e      	sub	sp, #56	@ 0x38
 800852c:	af04      	add	r7, sp, #16
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <xTaskCreateStatic+0x2c>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	623b      	str	r3, [r7, #32]
}
 800854e:	bf00      	nop
 8008550:	bf00      	nop
 8008552:	e7fd      	b.n	8008550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <xTaskCreateStatic+0x4a>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	61fb      	str	r3, [r7, #28]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008572:	235c      	movs	r3, #92	@ 0x5c
 8008574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b5c      	cmp	r3, #92	@ 0x5c
 800857a:	d00b      	beq.n	8008594 <xTaskCreateStatic+0x6c>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008594:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01e      	beq.n	80085da <xTaskCreateStatic+0xb2>
 800859c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01b      	beq.n	80085da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085b4:	2300      	movs	r3, #0
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	9302      	str	r3, [sp, #8]
 80085bc:	f107 0314 	add.w	r3, r7, #20
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f850 	bl	8008672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80085d4:	f000 f8de 	bl	8008794 <prvAddNewTaskToReadyList>
 80085d8:	e001      	b.n	80085de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085de:	697b      	ldr	r3, [r7, #20]
	}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3728      	adds	r7, #40	@ 0x28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08c      	sub	sp, #48	@ 0x30
 80085ec:	af04      	add	r7, sp, #16
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	4613      	mov	r3, r2
 80085f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085f8:	88fb      	ldrh	r3, [r7, #6]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fc75 	bl	8009eec <pvPortMalloc>
 8008602:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00e      	beq.n	8008628 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800860a:	205c      	movs	r0, #92	@ 0x5c
 800860c:	f001 fc6e 	bl	8009eec <pvPortMalloc>
 8008610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d003      	beq.n	8008620 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	631a      	str	r2, [r3, #48]	@ 0x30
 800861e:	e005      	b.n	800862c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	f001 fd31 	bl	800a088 <vPortFree>
 8008626:	e001      	b.n	800862c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008628:	2300      	movs	r3, #0
 800862a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d017      	beq.n	8008662 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800863a:	88fa      	ldrh	r2, [r7, #6]
 800863c:	2300      	movs	r3, #0
 800863e:	9303      	str	r3, [sp, #12]
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	9302      	str	r3, [sp, #8]
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f80e 	bl	8008672 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008656:	69f8      	ldr	r0, [r7, #28]
 8008658:	f000 f89c 	bl	8008794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800865c:	2301      	movs	r3, #1
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	e002      	b.n	8008668 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008668:	69bb      	ldr	r3, [r7, #24]
	}
 800866a:	4618      	mov	r0, r3
 800866c:	3720      	adds	r7, #32
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b088      	sub	sp, #32
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	461a      	mov	r2, r3
 800868a:	21a5      	movs	r1, #165	@ 0xa5
 800868c:	f012 fcf5 	bl	801b07a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800869a:	3b01      	subs	r3, #1
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	f023 0307 	bic.w	r3, r3, #7
 80086a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	617b      	str	r3, [r7, #20]
}
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
 80086ca:	e7fd      	b.n	80086c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086d2:	2300      	movs	r3, #0
 80086d4:	61fb      	str	r3, [r7, #28]
 80086d6:	e012      	b.n	80086fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4413      	add	r3, r2
 80086de:	7819      	ldrb	r1, [r3, #0]
 80086e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	4413      	add	r3, r2
 80086e6:	3334      	adds	r3, #52	@ 0x34
 80086e8:	460a      	mov	r2, r1
 80086ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4413      	add	r3, r2
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d006      	beq.n	8008706 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	3301      	adds	r3, #1
 80086fc:	61fb      	str	r3, [r7, #28]
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	2b0f      	cmp	r3, #15
 8008702:	d9e9      	bls.n	80086d8 <prvInitialiseNewTask+0x66>
 8008704:	e000      	b.n	8008708 <prvInitialiseNewTask+0x96>
			{
				break;
 8008706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008710:	e003      	b.n	800871a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800871a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871c:	2b37      	cmp	r3, #55	@ 0x37
 800871e:	d901      	bls.n	8008724 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008720:	2337      	movs	r3, #55	@ 0x37
 8008722:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008728:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800872a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800872e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008732:	2200      	movs	r2, #0
 8008734:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	3304      	adds	r3, #4
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff f966 	bl	8007a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008742:	3318      	adds	r3, #24
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff f961 	bl	8007a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800874e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008752:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800875e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	2200      	movs	r2, #0
 8008764:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	69b8      	ldr	r0, [r7, #24]
 8008774:	f001 f966 	bl	8009a44 <pxPortInitialiseStack>
 8008778:	4602      	mov	r2, r0
 800877a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800878a:	bf00      	nop
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800879c:	f001 fa84 	bl	8009ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008858 <prvAddNewTaskToReadyList+0xc4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008858 <prvAddNewTaskToReadyList+0xc4>)
 80087a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087aa:	4b2c      	ldr	r3, [pc, #176]	@ (800885c <prvAddNewTaskToReadyList+0xc8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d109      	bne.n	80087c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087b2:	4a2a      	ldr	r2, [pc, #168]	@ (800885c <prvAddNewTaskToReadyList+0xc8>)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087b8:	4b27      	ldr	r3, [pc, #156]	@ (8008858 <prvAddNewTaskToReadyList+0xc4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d110      	bne.n	80087e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087c0:	f000 fc46 	bl	8009050 <prvInitialiseTaskLists>
 80087c4:	e00d      	b.n	80087e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087c6:	4b26      	ldr	r3, [pc, #152]	@ (8008860 <prvAddNewTaskToReadyList+0xcc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087ce:	4b23      	ldr	r3, [pc, #140]	@ (800885c <prvAddNewTaskToReadyList+0xc8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	429a      	cmp	r2, r3
 80087da:	d802      	bhi.n	80087e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087dc:	4a1f      	ldr	r2, [pc, #124]	@ (800885c <prvAddNewTaskToReadyList+0xc8>)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087e2:	4b20      	ldr	r3, [pc, #128]	@ (8008864 <prvAddNewTaskToReadyList+0xd0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008864 <prvAddNewTaskToReadyList+0xd0>)
 80087ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008864 <prvAddNewTaskToReadyList+0xd0>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008868 <prvAddNewTaskToReadyList+0xd4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d903      	bls.n	8008808 <prvAddNewTaskToReadyList+0x74>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	4a18      	ldr	r2, [pc, #96]	@ (8008868 <prvAddNewTaskToReadyList+0xd4>)
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4a15      	ldr	r2, [pc, #84]	@ (800886c <prvAddNewTaskToReadyList+0xd8>)
 8008816:	441a      	add	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	4619      	mov	r1, r3
 800881e:	4610      	mov	r0, r2
 8008820:	f7ff f901 	bl	8007a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008824:	f001 fa72 	bl	8009d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008828:	4b0d      	ldr	r3, [pc, #52]	@ (8008860 <prvAddNewTaskToReadyList+0xcc>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00e      	beq.n	800884e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008830:	4b0a      	ldr	r3, [pc, #40]	@ (800885c <prvAddNewTaskToReadyList+0xc8>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883a:	429a      	cmp	r2, r3
 800883c:	d207      	bcs.n	800884e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800883e:	4b0c      	ldr	r3, [pc, #48]	@ (8008870 <prvAddNewTaskToReadyList+0xdc>)
 8008840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200096bc 	.word	0x200096bc
 800885c:	200091e8 	.word	0x200091e8
 8008860:	200096c8 	.word	0x200096c8
 8008864:	200096d8 	.word	0x200096d8
 8008868:	200096c4 	.word	0x200096c4
 800886c:	200091ec 	.word	0x200091ec
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008886:	4b14      	ldr	r3, [pc, #80]	@ (80088d8 <vTaskDelay+0x64>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <vTaskDelay+0x32>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	60bb      	str	r3, [r7, #8]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088a6:	f000 f883 	bl	80089b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088aa:	2100      	movs	r1, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fd1b 	bl	80092e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088b2:	f000 f88b 	bl	80089cc <xTaskResumeAll>
 80088b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d107      	bne.n	80088ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80088be:	4b07      	ldr	r3, [pc, #28]	@ (80088dc <vTaskDelay+0x68>)
 80088c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	200096e4 	.word	0x200096e4
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	@ 0x28
 80088e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80088ee:	463a      	mov	r2, r7
 80088f0:	1d39      	adds	r1, r7, #4
 80088f2:	f107 0308 	add.w	r3, r7, #8
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff f834 	bl	8007964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	9202      	str	r2, [sp, #8]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	2300      	movs	r3, #0
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	460a      	mov	r2, r1
 800890e:	4922      	ldr	r1, [pc, #136]	@ (8008998 <vTaskStartScheduler+0xb8>)
 8008910:	4822      	ldr	r0, [pc, #136]	@ (800899c <vTaskStartScheduler+0xbc>)
 8008912:	f7ff fe09 	bl	8008528 <xTaskCreateStatic>
 8008916:	4603      	mov	r3, r0
 8008918:	4a21      	ldr	r2, [pc, #132]	@ (80089a0 <vTaskStartScheduler+0xc0>)
 800891a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800891c:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <vTaskStartScheduler+0xc0>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008924:	2301      	movs	r3, #1
 8008926:	617b      	str	r3, [r7, #20]
 8008928:	e001      	b.n	800892e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800892a:	2300      	movs	r3, #0
 800892c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d102      	bne.n	800893a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008934:	f000 fd2c 	bl	8009390 <xTimerCreateTimerTask>
 8008938:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d116      	bne.n	800896e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	613b      	str	r3, [r7, #16]
}
 8008952:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008954:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <vTaskStartScheduler+0xc4>)
 8008956:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800895a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800895c:	4b12      	ldr	r3, [pc, #72]	@ (80089a8 <vTaskStartScheduler+0xc8>)
 800895e:	2201      	movs	r2, #1
 8008960:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008962:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <vTaskStartScheduler+0xcc>)
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008968:	f001 f8fa 	bl	8009b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800896c:	e00f      	b.n	800898e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008974:	d10b      	bne.n	800898e <vTaskStartScheduler+0xae>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60fb      	str	r3, [r7, #12]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <vTaskStartScheduler+0xaa>
}
 800898e:	bf00      	nop
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	0801bfd4 	.word	0x0801bfd4
 800899c:	08009021 	.word	0x08009021
 80089a0:	200096e0 	.word	0x200096e0
 80089a4:	200096dc 	.word	0x200096dc
 80089a8:	200096c8 	.word	0x200096c8
 80089ac:	200096c0 	.word	0x200096c0

080089b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089b4:	4b04      	ldr	r3, [pc, #16]	@ (80089c8 <vTaskSuspendAll+0x18>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	4a03      	ldr	r2, [pc, #12]	@ (80089c8 <vTaskSuspendAll+0x18>)
 80089bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089be:	bf00      	nop
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	200096e4 	.word	0x200096e4

080089cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089da:	4b42      	ldr	r3, [pc, #264]	@ (8008ae4 <xTaskResumeAll+0x118>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <xTaskResumeAll+0x2e>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	603b      	str	r3, [r7, #0]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089fa:	f001 f955 	bl	8009ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089fe:	4b39      	ldr	r3, [pc, #228]	@ (8008ae4 <xTaskResumeAll+0x118>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	4a37      	ldr	r2, [pc, #220]	@ (8008ae4 <xTaskResumeAll+0x118>)
 8008a06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a08:	4b36      	ldr	r3, [pc, #216]	@ (8008ae4 <xTaskResumeAll+0x118>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d162      	bne.n	8008ad6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a10:	4b35      	ldr	r3, [pc, #212]	@ (8008ae8 <xTaskResumeAll+0x11c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d05e      	beq.n	8008ad6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a18:	e02f      	b.n	8008a7a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a1a:	4b34      	ldr	r3, [pc, #208]	@ (8008aec <xTaskResumeAll+0x120>)
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3318      	adds	r3, #24
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff f85a 	bl	8007ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff f855 	bl	8007ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008af0 <xTaskResumeAll+0x124>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d903      	bls.n	8008a4a <xTaskResumeAll+0x7e>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a46:	4a2a      	ldr	r2, [pc, #168]	@ (8008af0 <xTaskResumeAll+0x124>)
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a27      	ldr	r2, [pc, #156]	@ (8008af4 <xTaskResumeAll+0x128>)
 8008a58:	441a      	add	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7fe ffe0 	bl	8007a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a6a:	4b23      	ldr	r3, [pc, #140]	@ (8008af8 <xTaskResumeAll+0x12c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d302      	bcc.n	8008a7a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008a74:	4b21      	ldr	r3, [pc, #132]	@ (8008afc <xTaskResumeAll+0x130>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8008aec <xTaskResumeAll+0x120>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1cb      	bne.n	8008a1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a88:	f000 fb80 	bl	800918c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008b00 <xTaskResumeAll+0x134>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d010      	beq.n	8008aba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a98:	f000 f846 	bl	8008b28 <xTaskIncrementTick>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008aa2:	4b16      	ldr	r3, [pc, #88]	@ (8008afc <xTaskResumeAll+0x130>)
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f1      	bne.n	8008a98 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008ab4:	4b12      	ldr	r3, [pc, #72]	@ (8008b00 <xTaskResumeAll+0x134>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008aba:	4b10      	ldr	r3, [pc, #64]	@ (8008afc <xTaskResumeAll+0x130>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d009      	beq.n	8008ad6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <xTaskResumeAll+0x138>)
 8008ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ad6:	f001 f919 	bl	8009d0c <vPortExitCritical>

	return xAlreadyYielded;
 8008ada:	68bb      	ldr	r3, [r7, #8]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	200096e4 	.word	0x200096e4
 8008ae8:	200096bc 	.word	0x200096bc
 8008aec:	2000967c 	.word	0x2000967c
 8008af0:	200096c4 	.word	0x200096c4
 8008af4:	200091ec 	.word	0x200091ec
 8008af8:	200091e8 	.word	0x200091e8
 8008afc:	200096d0 	.word	0x200096d0
 8008b00:	200096cc 	.word	0x200096cc
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b0e:	4b05      	ldr	r3, [pc, #20]	@ (8008b24 <xTaskGetTickCount+0x1c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b14:	687b      	ldr	r3, [r7, #4]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	370c      	adds	r7, #12
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	200096c0 	.word	0x200096c0

08008b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b32:	4b4f      	ldr	r3, [pc, #316]	@ (8008c70 <xTaskIncrementTick+0x148>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f040 8090 	bne.w	8008c5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008c74 <xTaskIncrementTick+0x14c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b44:	4a4b      	ldr	r2, [pc, #300]	@ (8008c74 <xTaskIncrementTick+0x14c>)
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d121      	bne.n	8008b94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b50:	4b49      	ldr	r3, [pc, #292]	@ (8008c78 <xTaskIncrementTick+0x150>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00b      	beq.n	8008b72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	603b      	str	r3, [r7, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <xTaskIncrementTick+0x46>
 8008b72:	4b41      	ldr	r3, [pc, #260]	@ (8008c78 <xTaskIncrementTick+0x150>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	4b40      	ldr	r3, [pc, #256]	@ (8008c7c <xTaskIncrementTick+0x154>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8008c78 <xTaskIncrementTick+0x150>)
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	4a3e      	ldr	r2, [pc, #248]	@ (8008c7c <xTaskIncrementTick+0x154>)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	4b3e      	ldr	r3, [pc, #248]	@ (8008c80 <xTaskIncrementTick+0x158>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	4a3c      	ldr	r2, [pc, #240]	@ (8008c80 <xTaskIncrementTick+0x158>)
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	f000 fafc 	bl	800918c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b94:	4b3b      	ldr	r3, [pc, #236]	@ (8008c84 <xTaskIncrementTick+0x15c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d349      	bcc.n	8008c32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b9e:	4b36      	ldr	r3, [pc, #216]	@ (8008c78 <xTaskIncrementTick+0x150>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba8:	4b36      	ldr	r3, [pc, #216]	@ (8008c84 <xTaskIncrementTick+0x15c>)
 8008baa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008bae:	601a      	str	r2, [r3, #0]
					break;
 8008bb0:	e03f      	b.n	8008c32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb2:	4b31      	ldr	r3, [pc, #196]	@ (8008c78 <xTaskIncrementTick+0x150>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d203      	bcs.n	8008bd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bca:	4a2e      	ldr	r2, [pc, #184]	@ (8008c84 <xTaskIncrementTick+0x15c>)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008bd0:	e02f      	b.n	8008c32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe ff82 	bl	8007ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d004      	beq.n	8008bee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3318      	adds	r3, #24
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe ff79 	bl	8007ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	4b25      	ldr	r3, [pc, #148]	@ (8008c88 <xTaskIncrementTick+0x160>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d903      	bls.n	8008c02 <xTaskIncrementTick+0xda>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	4a22      	ldr	r2, [pc, #136]	@ (8008c88 <xTaskIncrementTick+0x160>)
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008c8c <xTaskIncrementTick+0x164>)
 8008c10:	441a      	add	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4619      	mov	r1, r3
 8008c18:	4610      	mov	r0, r2
 8008c1a:	f7fe ff04 	bl	8007a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4b1b      	ldr	r3, [pc, #108]	@ (8008c90 <xTaskIncrementTick+0x168>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d3b8      	bcc.n	8008b9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c30:	e7b5      	b.n	8008b9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c32:	4b17      	ldr	r3, [pc, #92]	@ (8008c90 <xTaskIncrementTick+0x168>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c38:	4914      	ldr	r1, [pc, #80]	@ (8008c8c <xTaskIncrementTick+0x164>)
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d901      	bls.n	8008c4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c4e:	4b11      	ldr	r3, [pc, #68]	@ (8008c94 <xTaskIncrementTick+0x16c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008c56:	2301      	movs	r3, #1
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e004      	b.n	8008c66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c98 <xTaskIncrementTick+0x170>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3301      	adds	r3, #1
 8008c62:	4a0d      	ldr	r2, [pc, #52]	@ (8008c98 <xTaskIncrementTick+0x170>)
 8008c64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c66:	697b      	ldr	r3, [r7, #20]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	200096e4 	.word	0x200096e4
 8008c74:	200096c0 	.word	0x200096c0
 8008c78:	20009674 	.word	0x20009674
 8008c7c:	20009678 	.word	0x20009678
 8008c80:	200096d4 	.word	0x200096d4
 8008c84:	200096dc 	.word	0x200096dc
 8008c88:	200096c4 	.word	0x200096c4
 8008c8c:	200091ec 	.word	0x200091ec
 8008c90:	200091e8 	.word	0x200091e8
 8008c94:	200096d0 	.word	0x200096d0
 8008c98:	200096cc 	.word	0x200096cc

08008c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ca2:	4b28      	ldr	r3, [pc, #160]	@ (8008d44 <vTaskSwitchContext+0xa8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008caa:	4b27      	ldr	r3, [pc, #156]	@ (8008d48 <vTaskSwitchContext+0xac>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cb0:	e042      	b.n	8008d38 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008cb2:	4b25      	ldr	r3, [pc, #148]	@ (8008d48 <vTaskSwitchContext+0xac>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb8:	4b24      	ldr	r3, [pc, #144]	@ (8008d4c <vTaskSwitchContext+0xb0>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	e011      	b.n	8008ce4 <vTaskSwitchContext+0x48>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <vTaskSwitchContext+0x42>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	607b      	str	r3, [r7, #4]
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop
 8008cdc:	e7fd      	b.n	8008cda <vTaskSwitchContext+0x3e>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	491a      	ldr	r1, [pc, #104]	@ (8008d50 <vTaskSwitchContext+0xb4>)
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d0e3      	beq.n	8008cc0 <vTaskSwitchContext+0x24>
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4a13      	ldr	r2, [pc, #76]	@ (8008d50 <vTaskSwitchContext+0xb4>)
 8008d04:	4413      	add	r3, r2
 8008d06:	60bb      	str	r3, [r7, #8]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	605a      	str	r2, [r3, #4]
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d104      	bne.n	8008d28 <vTaskSwitchContext+0x8c>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	4a09      	ldr	r2, [pc, #36]	@ (8008d54 <vTaskSwitchContext+0xb8>)
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	4a06      	ldr	r2, [pc, #24]	@ (8008d4c <vTaskSwitchContext+0xb0>)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6013      	str	r3, [r2, #0]
}
 8008d38:	bf00      	nop
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	200096e4 	.word	0x200096e4
 8008d48:	200096d0 	.word	0x200096d0
 8008d4c:	200096c4 	.word	0x200096c4
 8008d50:	200091ec 	.word	0x200091ec
 8008d54:	200091e8 	.word	0x200091e8

08008d58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10b      	bne.n	8008d80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	60fb      	str	r3, [r7, #12]
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d80:	4b07      	ldr	r3, [pc, #28]	@ (8008da0 <vTaskPlaceOnEventList+0x48>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3318      	adds	r3, #24
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7fe fe70 	bl	8007a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6838      	ldr	r0, [r7, #0]
 8008d92:	f000 faa9 	bl	80092e8 <prvAddCurrentTaskToDelayedList>
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200091e8 	.word	0x200091e8

08008da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10b      	bne.n	8008dce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	617b      	str	r3, [r7, #20]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dce:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3318      	adds	r3, #24
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7fe fe25 	bl	8007a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008de6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	68b8      	ldr	r0, [r7, #8]
 8008dec:	f000 fa7c 	bl	80092e8 <prvAddCurrentTaskToDelayedList>
	}
 8008df0:	bf00      	nop
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	200091e8 	.word	0x200091e8

08008dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10b      	bne.n	8008e2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60fb      	str	r3, [r7, #12]
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	e7fd      	b.n	8008e26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3318      	adds	r3, #24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fe56 	bl	8007ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e34:	4b1d      	ldr	r3, [pc, #116]	@ (8008eac <xTaskRemoveFromEventList+0xb0>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11d      	bne.n	8008e78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fe4d 	bl	8007ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4a:	4b19      	ldr	r3, [pc, #100]	@ (8008eb0 <xTaskRemoveFromEventList+0xb4>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d903      	bls.n	8008e5a <xTaskRemoveFromEventList+0x5e>
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e56:	4a16      	ldr	r2, [pc, #88]	@ (8008eb0 <xTaskRemoveFromEventList+0xb4>)
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4a13      	ldr	r2, [pc, #76]	@ (8008eb4 <xTaskRemoveFromEventList+0xb8>)
 8008e68:	441a      	add	r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7fe fdd8 	bl	8007a26 <vListInsertEnd>
 8008e76:	e005      	b.n	8008e84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	3318      	adds	r3, #24
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	480e      	ldr	r0, [pc, #56]	@ (8008eb8 <xTaskRemoveFromEventList+0xbc>)
 8008e80:	f7fe fdd1 	bl	8007a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e88:	4b0c      	ldr	r3, [pc, #48]	@ (8008ebc <xTaskRemoveFromEventList+0xc0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d905      	bls.n	8008e9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e92:	2301      	movs	r3, #1
 8008e94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e96:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <xTaskRemoveFromEventList+0xc4>)
 8008e98:	2201      	movs	r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	e001      	b.n	8008ea2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ea2:	697b      	ldr	r3, [r7, #20]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200096e4 	.word	0x200096e4
 8008eb0:	200096c4 	.word	0x200096c4
 8008eb4:	200091ec 	.word	0x200091ec
 8008eb8:	2000967c 	.word	0x2000967c
 8008ebc:	200091e8 	.word	0x200091e8
 8008ec0:	200096d0 	.word	0x200096d0

08008ec4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10b      	bne.n	8008eea <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60fb      	str	r3, [r7, #12]
}
 8008ee4:	bf00      	nop
 8008ee6:	bf00      	nop
 8008ee8:	e7fd      	b.n	8008ee6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008eea:	f000 fedd 	bl	8009ca8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008eee:	4b07      	ldr	r3, [pc, #28]	@ (8008f0c <vTaskSetTimeOutState+0x48>)
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008ef6:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <vTaskSetTimeOutState+0x4c>)
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008efe:	f000 ff05 	bl	8009d0c <vPortExitCritical>
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200096d4 	.word	0x200096d4
 8008f10:	200096c0 	.word	0x200096c0

08008f14 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <vTaskInternalSetTimeOutState+0x24>)
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f24:	4b05      	ldr	r3, [pc, #20]	@ (8008f3c <vTaskInternalSetTimeOutState+0x28>)
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	605a      	str	r2, [r3, #4]
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	200096d4 	.word	0x200096d4
 8008f3c:	200096c0 	.word	0x200096c0

08008f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	613b      	str	r3, [r7, #16]
}
 8008f62:	bf00      	nop
 8008f64:	bf00      	nop
 8008f66:	e7fd      	b.n	8008f64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10b      	bne.n	8008f86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	e7fd      	b.n	8008f82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008f86:	f000 fe8f 	bl	8009ca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8009000 <xTaskCheckForTimeOut+0xc0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fa2:	d102      	bne.n	8008faa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	e023      	b.n	8008ff2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b15      	ldr	r3, [pc, #84]	@ (8009004 <xTaskCheckForTimeOut+0xc4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d007      	beq.n	8008fc6 <xTaskCheckForTimeOut+0x86>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d302      	bcc.n	8008fc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	61fb      	str	r3, [r7, #28]
 8008fc4:	e015      	b.n	8008ff2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d20b      	bcs.n	8008fe8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff ff99 	bl	8008f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61fb      	str	r3, [r7, #28]
 8008fe6:	e004      	b.n	8008ff2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ff2:	f000 fe8b 	bl	8009d0c <vPortExitCritical>

	return xReturn;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3720      	adds	r7, #32
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	200096c0 	.word	0x200096c0
 8009004:	200096d4 	.word	0x200096d4

08009008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800900c:	4b03      	ldr	r3, [pc, #12]	@ (800901c <vTaskMissedYield+0x14>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	200096d0 	.word	0x200096d0

08009020 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009028:	f000 f852 	bl	80090d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800902c:	4b06      	ldr	r3, [pc, #24]	@ (8009048 <prvIdleTask+0x28>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d9f9      	bls.n	8009028 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <prvIdleTask+0x2c>)
 8009036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009044:	e7f0      	b.n	8009028 <prvIdleTask+0x8>
 8009046:	bf00      	nop
 8009048:	200091ec 	.word	0x200091ec
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009056:	2300      	movs	r3, #0
 8009058:	607b      	str	r3, [r7, #4]
 800905a:	e00c      	b.n	8009076 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4a12      	ldr	r2, [pc, #72]	@ (80090b0 <prvInitialiseTaskLists+0x60>)
 8009068:	4413      	add	r3, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fcae 	bl	80079cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3301      	adds	r3, #1
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b37      	cmp	r3, #55	@ 0x37
 800907a:	d9ef      	bls.n	800905c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800907c:	480d      	ldr	r0, [pc, #52]	@ (80090b4 <prvInitialiseTaskLists+0x64>)
 800907e:	f7fe fca5 	bl	80079cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009082:	480d      	ldr	r0, [pc, #52]	@ (80090b8 <prvInitialiseTaskLists+0x68>)
 8009084:	f7fe fca2 	bl	80079cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009088:	480c      	ldr	r0, [pc, #48]	@ (80090bc <prvInitialiseTaskLists+0x6c>)
 800908a:	f7fe fc9f 	bl	80079cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800908e:	480c      	ldr	r0, [pc, #48]	@ (80090c0 <prvInitialiseTaskLists+0x70>)
 8009090:	f7fe fc9c 	bl	80079cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009094:	480b      	ldr	r0, [pc, #44]	@ (80090c4 <prvInitialiseTaskLists+0x74>)
 8009096:	f7fe fc99 	bl	80079cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800909a:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <prvInitialiseTaskLists+0x78>)
 800909c:	4a05      	ldr	r2, [pc, #20]	@ (80090b4 <prvInitialiseTaskLists+0x64>)
 800909e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <prvInitialiseTaskLists+0x7c>)
 80090a2:	4a05      	ldr	r2, [pc, #20]	@ (80090b8 <prvInitialiseTaskLists+0x68>)
 80090a4:	601a      	str	r2, [r3, #0]
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	200091ec 	.word	0x200091ec
 80090b4:	2000964c 	.word	0x2000964c
 80090b8:	20009660 	.word	0x20009660
 80090bc:	2000967c 	.word	0x2000967c
 80090c0:	20009690 	.word	0x20009690
 80090c4:	200096a8 	.word	0x200096a8
 80090c8:	20009674 	.word	0x20009674
 80090cc:	20009678 	.word	0x20009678

080090d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090d6:	e019      	b.n	800910c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090d8:	f000 fde6 	bl	8009ca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090dc:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <prvCheckTasksWaitingTermination+0x50>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe fcf9 	bl	8007ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <prvCheckTasksWaitingTermination+0x54>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009124 <prvCheckTasksWaitingTermination+0x54>)
 80090f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009128 <prvCheckTasksWaitingTermination+0x58>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009128 <prvCheckTasksWaitingTermination+0x58>)
 8009100:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009102:	f000 fe03 	bl	8009d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f810 	bl	800912c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800910c:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <prvCheckTasksWaitingTermination+0x58>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e1      	bne.n	80090d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20009690 	.word	0x20009690
 8009124:	200096bc 	.word	0x200096bc
 8009128:	200096a4 	.word	0x200096a4

0800912c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800913a:	2b00      	cmp	r3, #0
 800913c:	d108      	bne.n	8009150 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	4618      	mov	r0, r3
 8009144:	f000 ffa0 	bl	800a088 <vPortFree>
				vPortFree( pxTCB );
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 ff9d 	bl	800a088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800914e:	e019      	b.n	8009184 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009156:	2b01      	cmp	r3, #1
 8009158:	d103      	bne.n	8009162 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 ff94 	bl	800a088 <vPortFree>
	}
 8009160:	e010      	b.n	8009184 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009168:	2b02      	cmp	r3, #2
 800916a:	d00b      	beq.n	8009184 <prvDeleteTCB+0x58>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	60fb      	str	r3, [r7, #12]
}
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	e7fd      	b.n	8009180 <prvDeleteTCB+0x54>
	}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009192:	4b0c      	ldr	r3, [pc, #48]	@ (80091c4 <prvResetNextTaskUnblockTime+0x38>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <prvResetNextTaskUnblockTime+0x3c>)
 800919e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091a4:	e008      	b.n	80091b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a6:	4b07      	ldr	r3, [pc, #28]	@ (80091c4 <prvResetNextTaskUnblockTime+0x38>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	4a04      	ldr	r2, [pc, #16]	@ (80091c8 <prvResetNextTaskUnblockTime+0x3c>)
 80091b6:	6013      	str	r3, [r2, #0]
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	20009674 	.word	0x20009674
 80091c8:	200096dc 	.word	0x200096dc

080091cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009200 <xTaskGetSchedulerState+0x34>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091da:	2301      	movs	r3, #1
 80091dc:	607b      	str	r3, [r7, #4]
 80091de:	e008      	b.n	80091f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e0:	4b08      	ldr	r3, [pc, #32]	@ (8009204 <xTaskGetSchedulerState+0x38>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091e8:	2302      	movs	r3, #2
 80091ea:	607b      	str	r3, [r7, #4]
 80091ec:	e001      	b.n	80091f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091ee:	2300      	movs	r3, #0
 80091f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091f2:	687b      	ldr	r3, [r7, #4]
	}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	200096c8 	.word	0x200096c8
 8009204:	200096e4 	.word	0x200096e4

08009208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d058      	beq.n	80092d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800921e:	4b2f      	ldr	r3, [pc, #188]	@ (80092dc <xTaskPriorityDisinherit+0xd4>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	429a      	cmp	r2, r3
 8009226:	d00b      	beq.n	8009240 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	60fb      	str	r3, [r7, #12]
}
 800923a:	bf00      	nop
 800923c:	bf00      	nop
 800923e:	e7fd      	b.n	800923c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10b      	bne.n	8009260 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	60bb      	str	r3, [r7, #8]
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009264:	1e5a      	subs	r2, r3, #1
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009272:	429a      	cmp	r2, r3
 8009274:	d02c      	beq.n	80092d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800927a:	2b00      	cmp	r3, #0
 800927c:	d128      	bne.n	80092d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	3304      	adds	r3, #4
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe fc2c 	bl	8007ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009294:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092a0:	4b0f      	ldr	r3, [pc, #60]	@ (80092e0 <xTaskPriorityDisinherit+0xd8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d903      	bls.n	80092b0 <xTaskPriorityDisinherit+0xa8>
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ac:	4a0c      	ldr	r2, [pc, #48]	@ (80092e0 <xTaskPriorityDisinherit+0xd8>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4a09      	ldr	r2, [pc, #36]	@ (80092e4 <xTaskPriorityDisinherit+0xdc>)
 80092be:	441a      	add	r2, r3
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fe fbad 	bl	8007a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092cc:	2301      	movs	r3, #1
 80092ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092d0:	697b      	ldr	r3, [r7, #20]
	}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	200091e8 	.word	0x200091e8
 80092e0:	200096c4 	.word	0x200096c4
 80092e4:	200091ec 	.word	0x200091ec

080092e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092f2:	4b21      	ldr	r3, [pc, #132]	@ (8009378 <prvAddCurrentTaskToDelayedList+0x90>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f8:	4b20      	ldr	r3, [pc, #128]	@ (800937c <prvAddCurrentTaskToDelayedList+0x94>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fbee 	bl	8007ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800930a:	d10a      	bne.n	8009322 <prvAddCurrentTaskToDelayedList+0x3a>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d007      	beq.n	8009322 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009312:	4b1a      	ldr	r3, [pc, #104]	@ (800937c <prvAddCurrentTaskToDelayedList+0x94>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3304      	adds	r3, #4
 8009318:	4619      	mov	r1, r3
 800931a:	4819      	ldr	r0, [pc, #100]	@ (8009380 <prvAddCurrentTaskToDelayedList+0x98>)
 800931c:	f7fe fb83 	bl	8007a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009320:	e026      	b.n	8009370 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4413      	add	r3, r2
 8009328:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800932a:	4b14      	ldr	r3, [pc, #80]	@ (800937c <prvAddCurrentTaskToDelayedList+0x94>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	429a      	cmp	r2, r3
 8009338:	d209      	bcs.n	800934e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800933a:	4b12      	ldr	r3, [pc, #72]	@ (8009384 <prvAddCurrentTaskToDelayedList+0x9c>)
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	4b0f      	ldr	r3, [pc, #60]	@ (800937c <prvAddCurrentTaskToDelayedList+0x94>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3304      	adds	r3, #4
 8009344:	4619      	mov	r1, r3
 8009346:	4610      	mov	r0, r2
 8009348:	f7fe fb91 	bl	8007a6e <vListInsert>
}
 800934c:	e010      	b.n	8009370 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800934e:	4b0e      	ldr	r3, [pc, #56]	@ (8009388 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4b0a      	ldr	r3, [pc, #40]	@ (800937c <prvAddCurrentTaskToDelayedList+0x94>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3304      	adds	r3, #4
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f7fe fb87 	bl	8007a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009360:	4b0a      	ldr	r3, [pc, #40]	@ (800938c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	429a      	cmp	r2, r3
 8009368:	d202      	bcs.n	8009370 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800936a:	4a08      	ldr	r2, [pc, #32]	@ (800938c <prvAddCurrentTaskToDelayedList+0xa4>)
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	6013      	str	r3, [r2, #0]
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	200096c0 	.word	0x200096c0
 800937c:	200091e8 	.word	0x200091e8
 8009380:	200096a8 	.word	0x200096a8
 8009384:	20009678 	.word	0x20009678
 8009388:	20009674 	.word	0x20009674
 800938c:	200096dc 	.word	0x200096dc

08009390 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08a      	sub	sp, #40	@ 0x28
 8009394:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800939a:	f000 fb13 	bl	80099c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800939e:	4b1d      	ldr	r3, [pc, #116]	@ (8009414 <xTimerCreateTimerTask+0x84>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d021      	beq.n	80093ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093ae:	1d3a      	adds	r2, r7, #4
 80093b0:	f107 0108 	add.w	r1, r7, #8
 80093b4:	f107 030c 	add.w	r3, r7, #12
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe faed 	bl	8007998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	9202      	str	r2, [sp, #8]
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	2302      	movs	r3, #2
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	2300      	movs	r3, #0
 80093ce:	460a      	mov	r2, r1
 80093d0:	4911      	ldr	r1, [pc, #68]	@ (8009418 <xTimerCreateTimerTask+0x88>)
 80093d2:	4812      	ldr	r0, [pc, #72]	@ (800941c <xTimerCreateTimerTask+0x8c>)
 80093d4:	f7ff f8a8 	bl	8008528 <xTaskCreateStatic>
 80093d8:	4603      	mov	r3, r0
 80093da:	4a11      	ldr	r2, [pc, #68]	@ (8009420 <xTimerCreateTimerTask+0x90>)
 80093dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093de:	4b10      	ldr	r3, [pc, #64]	@ (8009420 <xTimerCreateTimerTask+0x90>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093e6:	2301      	movs	r3, #1
 80093e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10b      	bne.n	8009408 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	613b      	str	r3, [r7, #16]
}
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	e7fd      	b.n	8009404 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009408:	697b      	ldr	r3, [r7, #20]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20009718 	.word	0x20009718
 8009418:	0801bfdc 	.word	0x0801bfdc
 800941c:	0800955d 	.word	0x0800955d
 8009420:	2000971c 	.word	0x2000971c

08009424 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	@ 0x28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009432:	2300      	movs	r3, #0
 8009434:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10b      	bne.n	8009454 <xTimerGenericCommand+0x30>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	623b      	str	r3, [r7, #32]
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	e7fd      	b.n	8009450 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009454:	4b19      	ldr	r3, [pc, #100]	@ (80094bc <xTimerGenericCommand+0x98>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d02a      	beq.n	80094b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b05      	cmp	r3, #5
 800946c:	dc18      	bgt.n	80094a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800946e:	f7ff fead 	bl	80091cc <xTaskGetSchedulerState>
 8009472:	4603      	mov	r3, r0
 8009474:	2b02      	cmp	r3, #2
 8009476:	d109      	bne.n	800948c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009478:	4b10      	ldr	r3, [pc, #64]	@ (80094bc <xTimerGenericCommand+0x98>)
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	f107 0110 	add.w	r1, r7, #16
 8009480:	2300      	movs	r3, #0
 8009482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009484:	f7fe fc60 	bl	8007d48 <xQueueGenericSend>
 8009488:	6278      	str	r0, [r7, #36]	@ 0x24
 800948a:	e012      	b.n	80094b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800948c:	4b0b      	ldr	r3, [pc, #44]	@ (80094bc <xTimerGenericCommand+0x98>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	f107 0110 	add.w	r1, r7, #16
 8009494:	2300      	movs	r3, #0
 8009496:	2200      	movs	r2, #0
 8009498:	f7fe fc56 	bl	8007d48 <xQueueGenericSend>
 800949c:	6278      	str	r0, [r7, #36]	@ 0x24
 800949e:	e008      	b.n	80094b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094a0:	4b06      	ldr	r3, [pc, #24]	@ (80094bc <xTimerGenericCommand+0x98>)
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	f107 0110 	add.w	r1, r7, #16
 80094a8:	2300      	movs	r3, #0
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	f7fe fd4e 	bl	8007f4c <xQueueGenericSendFromISR>
 80094b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3728      	adds	r7, #40	@ 0x28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20009718 	.word	0x20009718

080094c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ca:	4b23      	ldr	r3, [pc, #140]	@ (8009558 <prvProcessExpiredTimer+0x98>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fb01 	bl	8007ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d023      	beq.n	8009534 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	699a      	ldr	r2, [r3, #24]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	18d1      	adds	r1, r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	6978      	ldr	r0, [r7, #20]
 80094fa:	f000 f8d5 	bl	80096a8 <prvInsertTimerInActiveList>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d020      	beq.n	8009546 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009504:	2300      	movs	r3, #0
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	2100      	movs	r1, #0
 800950e:	6978      	ldr	r0, [r7, #20]
 8009510:	f7ff ff88 	bl	8009424 <xTimerGenericCommand>
 8009514:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d114      	bne.n	8009546 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	e7fd      	b.n	8009530 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800953a:	f023 0301 	bic.w	r3, r3, #1
 800953e:	b2da      	uxtb	r2, r3
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	6978      	ldr	r0, [r7, #20]
 800954c:	4798      	blx	r3
}
 800954e:	bf00      	nop
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20009710 	.word	0x20009710

0800955c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009564:	f107 0308 	add.w	r3, r7, #8
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f859 	bl	8009620 <prvGetNextExpireTime>
 800956e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4619      	mov	r1, r3
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 f805 	bl	8009584 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800957a:	f000 f8d7 	bl	800972c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800957e:	bf00      	nop
 8009580:	e7f0      	b.n	8009564 <prvTimerTask+0x8>
	...

08009584 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800958e:	f7ff fa0f 	bl	80089b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f866 	bl	8009668 <prvSampleTimeNow>
 800959c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d130      	bne.n	8009606 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <prvProcessTimerOrBlockTask+0x3c>
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d806      	bhi.n	80095c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095b2:	f7ff fa0b 	bl	80089cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095b6:	68f9      	ldr	r1, [r7, #12]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f7ff ff81 	bl	80094c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095be:	e024      	b.n	800960a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d008      	beq.n	80095d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095c6:	4b13      	ldr	r3, [pc, #76]	@ (8009614 <prvProcessTimerOrBlockTask+0x90>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <prvProcessTimerOrBlockTask+0x50>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e000      	b.n	80095d6 <prvProcessTimerOrBlockTask+0x52>
 80095d4:	2300      	movs	r3, #0
 80095d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009618 <prvProcessTimerOrBlockTask+0x94>)
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	4619      	mov	r1, r3
 80095e6:	f7fe ff6b 	bl	80084c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095ea:	f7ff f9ef 	bl	80089cc <xTaskResumeAll>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095f4:	4b09      	ldr	r3, [pc, #36]	@ (800961c <prvProcessTimerOrBlockTask+0x98>)
 80095f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	f3bf 8f6f 	isb	sy
}
 8009604:	e001      	b.n	800960a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009606:	f7ff f9e1 	bl	80089cc <xTaskResumeAll>
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20009714 	.word	0x20009714
 8009618:	20009718 	.word	0x20009718
 800961c:	e000ed04 	.word	0xe000ed04

08009620 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009628:	4b0e      	ldr	r3, [pc, #56]	@ (8009664 <prvGetNextExpireTime+0x44>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <prvGetNextExpireTime+0x16>
 8009632:	2201      	movs	r2, #1
 8009634:	e000      	b.n	8009638 <prvGetNextExpireTime+0x18>
 8009636:	2200      	movs	r2, #0
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d105      	bne.n	8009650 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009644:	4b07      	ldr	r3, [pc, #28]	@ (8009664 <prvGetNextExpireTime+0x44>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	60fb      	str	r3, [r7, #12]
 800964e:	e001      	b.n	8009654 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009654:	68fb      	ldr	r3, [r7, #12]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20009710 	.word	0x20009710

08009668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009670:	f7ff fa4a 	bl	8008b08 <xTaskGetTickCount>
 8009674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009676:	4b0b      	ldr	r3, [pc, #44]	@ (80096a4 <prvSampleTimeNow+0x3c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	429a      	cmp	r2, r3
 800967e:	d205      	bcs.n	800968c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009680:	f000 f93a 	bl	80098f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e002      	b.n	8009692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009692:	4a04      	ldr	r2, [pc, #16]	@ (80096a4 <prvSampleTimeNow+0x3c>)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009698:	68fb      	ldr	r3, [r7, #12]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20009720 	.word	0x20009720

080096a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096b6:	2300      	movs	r3, #0
 80096b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d812      	bhi.n	80096f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	1ad2      	subs	r2, r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d302      	bcc.n	80096e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096dc:	2301      	movs	r3, #1
 80096de:	617b      	str	r3, [r7, #20]
 80096e0:	e01b      	b.n	800971a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096e2:	4b10      	ldr	r3, [pc, #64]	@ (8009724 <prvInsertTimerInActiveList+0x7c>)
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3304      	adds	r3, #4
 80096ea:	4619      	mov	r1, r3
 80096ec:	4610      	mov	r0, r2
 80096ee:	f7fe f9be 	bl	8007a6e <vListInsert>
 80096f2:	e012      	b.n	800971a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d206      	bcs.n	800970a <prvInsertTimerInActiveList+0x62>
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d302      	bcc.n	800970a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009704:	2301      	movs	r3, #1
 8009706:	617b      	str	r3, [r7, #20]
 8009708:	e007      	b.n	800971a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800970a:	4b07      	ldr	r3, [pc, #28]	@ (8009728 <prvInsertTimerInActiveList+0x80>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3304      	adds	r3, #4
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f7fe f9aa 	bl	8007a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800971a:	697b      	ldr	r3, [r7, #20]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20009714 	.word	0x20009714
 8009728:	20009710 	.word	0x20009710

0800972c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08e      	sub	sp, #56	@ 0x38
 8009730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009732:	e0ce      	b.n	80098d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	da19      	bge.n	800976e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800973a:	1d3b      	adds	r3, r7, #4
 800973c:	3304      	adds	r3, #4
 800973e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10b      	bne.n	800975e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974a:	f383 8811 	msr	BASEPRI, r3
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	61fb      	str	r3, [r7, #28]
}
 8009758:	bf00      	nop
 800975a:	bf00      	nop
 800975c:	e7fd      	b.n	800975a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800975e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009764:	6850      	ldr	r0, [r2, #4]
 8009766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009768:	6892      	ldr	r2, [r2, #8]
 800976a:	4611      	mov	r1, r2
 800976c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f2c0 80ae 	blt.w	80098d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800977a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009784:	3304      	adds	r3, #4
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe f9aa 	bl	8007ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800978c:	463b      	mov	r3, r7
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff ff6a 	bl	8009668 <prvSampleTimeNow>
 8009794:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b09      	cmp	r3, #9
 800979a:	f200 8097 	bhi.w	80098cc <prvProcessReceivedCommands+0x1a0>
 800979e:	a201      	add	r2, pc, #4	@ (adr r2, 80097a4 <prvProcessReceivedCommands+0x78>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097cd 	.word	0x080097cd
 80097a8:	080097cd 	.word	0x080097cd
 80097ac:	080097cd 	.word	0x080097cd
 80097b0:	08009843 	.word	0x08009843
 80097b4:	08009857 	.word	0x08009857
 80097b8:	080098a3 	.word	0x080098a3
 80097bc:	080097cd 	.word	0x080097cd
 80097c0:	080097cd 	.word	0x080097cd
 80097c4:	08009843 	.word	0x08009843
 80097c8:	08009857 	.word	0x08009857
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097d2:	f043 0301 	orr.w	r3, r3, #1
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	18d1      	adds	r1, r2, r3
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097ec:	f7ff ff5c 	bl	80096a8 <prvInsertTimerInActiveList>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d06c      	beq.n	80098d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009804:	f003 0304 	and.w	r3, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	d061      	beq.n	80098d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	441a      	add	r2, r3
 8009814:	2300      	movs	r3, #0
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	2300      	movs	r3, #0
 800981a:	2100      	movs	r1, #0
 800981c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800981e:	f7ff fe01 	bl	8009424 <xTimerGenericCommand>
 8009822:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009824:	6a3b      	ldr	r3, [r7, #32]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d152      	bne.n	80098d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	61bb      	str	r3, [r7, #24]
}
 800983c:	bf00      	nop
 800983e:	bf00      	nop
 8009840:	e7fd      	b.n	800983e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	b2da      	uxtb	r2, r3
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009854:	e03d      	b.n	80098d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800985c:	f043 0301 	orr.w	r3, r3, #1
 8009860:	b2da      	uxtb	r2, r3
 8009862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800986e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	617b      	str	r3, [r7, #20]
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	e7fd      	b.n	800988a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800988e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	18d1      	adds	r1, r2, r3
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800989a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800989c:	f7ff ff04 	bl	80096a8 <prvInsertTimerInActiveList>
					break;
 80098a0:	e017      	b.n	80098d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d103      	bne.n	80098b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80098b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098b2:	f000 fbe9 	bl	800a088 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098b6:	e00c      	b.n	80098d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098be:	f023 0301 	bic.w	r3, r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80098ca:	e002      	b.n	80098d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80098cc:	bf00      	nop
 80098ce:	e000      	b.n	80098d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80098d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098d2:	4b08      	ldr	r3, [pc, #32]	@ (80098f4 <prvProcessReceivedCommands+0x1c8>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	1d39      	adds	r1, r7, #4
 80098d8:	2200      	movs	r2, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fbd4 	bl	8008088 <xQueueReceive>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f47f af26 	bne.w	8009734 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80098e8:	bf00      	nop
 80098ea:	bf00      	nop
 80098ec:	3730      	adds	r7, #48	@ 0x30
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	20009718 	.word	0x20009718

080098f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098fe:	e049      	b.n	8009994 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009900:	4b2e      	ldr	r3, [pc, #184]	@ (80099bc <prvSwitchTimerLists+0xc4>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990a:	4b2c      	ldr	r3, [pc, #176]	@ (80099bc <prvSwitchTimerLists+0xc4>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3304      	adds	r3, #4
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe f8e1 	bl	8007ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	d02f      	beq.n	8009994 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	4413      	add	r3, r2
 800993c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	429a      	cmp	r2, r3
 8009944:	d90e      	bls.n	8009964 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009952:	4b1a      	ldr	r3, [pc, #104]	@ (80099bc <prvSwitchTimerLists+0xc4>)
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3304      	adds	r3, #4
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f7fe f886 	bl	8007a6e <vListInsert>
 8009962:	e017      	b.n	8009994 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009964:	2300      	movs	r3, #0
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2300      	movs	r3, #0
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	2100      	movs	r1, #0
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff fd58 	bl	8009424 <xTimerGenericCommand>
 8009974:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10b      	bne.n	8009994 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	603b      	str	r3, [r7, #0]
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	e7fd      	b.n	8009990 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009994:	4b09      	ldr	r3, [pc, #36]	@ (80099bc <prvSwitchTimerLists+0xc4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1b0      	bne.n	8009900 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800999e:	4b07      	ldr	r3, [pc, #28]	@ (80099bc <prvSwitchTimerLists+0xc4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099a4:	4b06      	ldr	r3, [pc, #24]	@ (80099c0 <prvSwitchTimerLists+0xc8>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a04      	ldr	r2, [pc, #16]	@ (80099bc <prvSwitchTimerLists+0xc4>)
 80099aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099ac:	4a04      	ldr	r2, [pc, #16]	@ (80099c0 <prvSwitchTimerLists+0xc8>)
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6013      	str	r3, [r2, #0]
}
 80099b2:	bf00      	nop
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20009710 	.word	0x20009710
 80099c0:	20009714 	.word	0x20009714

080099c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099ca:	f000 f96d 	bl	8009ca8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099ce:	4b15      	ldr	r3, [pc, #84]	@ (8009a24 <prvCheckForValidListAndQueue+0x60>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d120      	bne.n	8009a18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099d6:	4814      	ldr	r0, [pc, #80]	@ (8009a28 <prvCheckForValidListAndQueue+0x64>)
 80099d8:	f7fd fff8 	bl	80079cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099dc:	4813      	ldr	r0, [pc, #76]	@ (8009a2c <prvCheckForValidListAndQueue+0x68>)
 80099de:	f7fd fff5 	bl	80079cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099e2:	4b13      	ldr	r3, [pc, #76]	@ (8009a30 <prvCheckForValidListAndQueue+0x6c>)
 80099e4:	4a10      	ldr	r2, [pc, #64]	@ (8009a28 <prvCheckForValidListAndQueue+0x64>)
 80099e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099e8:	4b12      	ldr	r3, [pc, #72]	@ (8009a34 <prvCheckForValidListAndQueue+0x70>)
 80099ea:	4a10      	ldr	r2, [pc, #64]	@ (8009a2c <prvCheckForValidListAndQueue+0x68>)
 80099ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099ee:	2300      	movs	r3, #0
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	4b11      	ldr	r3, [pc, #68]	@ (8009a38 <prvCheckForValidListAndQueue+0x74>)
 80099f4:	4a11      	ldr	r2, [pc, #68]	@ (8009a3c <prvCheckForValidListAndQueue+0x78>)
 80099f6:	2110      	movs	r1, #16
 80099f8:	200a      	movs	r0, #10
 80099fa:	f7fe f905 	bl	8007c08 <xQueueGenericCreateStatic>
 80099fe:	4603      	mov	r3, r0
 8009a00:	4a08      	ldr	r2, [pc, #32]	@ (8009a24 <prvCheckForValidListAndQueue+0x60>)
 8009a02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a04:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <prvCheckForValidListAndQueue+0x60>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a0c:	4b05      	ldr	r3, [pc, #20]	@ (8009a24 <prvCheckForValidListAndQueue+0x60>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	490b      	ldr	r1, [pc, #44]	@ (8009a40 <prvCheckForValidListAndQueue+0x7c>)
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fd2a 	bl	800846c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a18:	f000 f978 	bl	8009d0c <vPortExitCritical>
}
 8009a1c:	bf00      	nop
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20009718 	.word	0x20009718
 8009a28:	200096e8 	.word	0x200096e8
 8009a2c:	200096fc 	.word	0x200096fc
 8009a30:	20009710 	.word	0x20009710
 8009a34:	20009714 	.word	0x20009714
 8009a38:	200097c4 	.word	0x200097c4
 8009a3c:	20009724 	.word	0x20009724
 8009a40:	0801bfe4 	.word	0x0801bfe4

08009a44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3b04      	subs	r3, #4
 8009a54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3b04      	subs	r3, #4
 8009a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f023 0201 	bic.w	r2, r3, #1
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3b04      	subs	r3, #4
 8009a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a74:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa8 <pxPortInitialiseStack+0x64>)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3b14      	subs	r3, #20
 8009a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3b04      	subs	r3, #4
 8009a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f06f 0202 	mvn.w	r2, #2
 8009a92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3b20      	subs	r3, #32
 8009a98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	08009aad 	.word	0x08009aad

08009aac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ab6:	4b13      	ldr	r3, [pc, #76]	@ (8009b04 <prvTaskExitError+0x58>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009abe:	d00b      	beq.n	8009ad8 <prvTaskExitError+0x2c>
	__asm volatile
 8009ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	60fb      	str	r3, [r7, #12]
}
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	e7fd      	b.n	8009ad4 <prvTaskExitError+0x28>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60bb      	str	r3, [r7, #8]
}
 8009aea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009aec:	bf00      	nop
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0fc      	beq.n	8009aee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	200000d0 	.word	0x200000d0
	...

08009b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b10:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <pxCurrentTCBConst2>)
 8009b12:	6819      	ldr	r1, [r3, #0]
 8009b14:	6808      	ldr	r0, [r1, #0]
 8009b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1a:	f380 8809 	msr	PSP, r0
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8811 	msr	BASEPRI, r0
 8009b2a:	4770      	bx	lr
 8009b2c:	f3af 8000 	nop.w

08009b30 <pxCurrentTCBConst2>:
 8009b30:	200091e8 	.word	0x200091e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop

08009b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b38:	4808      	ldr	r0, [pc, #32]	@ (8009b5c <prvPortStartFirstTask+0x24>)
 8009b3a:	6800      	ldr	r0, [r0, #0]
 8009b3c:	6800      	ldr	r0, [r0, #0]
 8009b3e:	f380 8808 	msr	MSP, r0
 8009b42:	f04f 0000 	mov.w	r0, #0
 8009b46:	f380 8814 	msr	CONTROL, r0
 8009b4a:	b662      	cpsie	i
 8009b4c:	b661      	cpsie	f
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	df00      	svc	0
 8009b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b5a:	bf00      	nop
 8009b5c:	e000ed08 	.word	0xe000ed08

08009b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b66:	4b47      	ldr	r3, [pc, #284]	@ (8009c84 <xPortStartScheduler+0x124>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a47      	ldr	r2, [pc, #284]	@ (8009c88 <xPortStartScheduler+0x128>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10b      	bne.n	8009b88 <xPortStartScheduler+0x28>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
}
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	e7fd      	b.n	8009b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b88:	4b3e      	ldr	r3, [pc, #248]	@ (8009c84 <xPortStartScheduler+0x124>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c8c <xPortStartScheduler+0x12c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d10b      	bne.n	8009baa <xPortStartScheduler+0x4a>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	60fb      	str	r3, [r7, #12]
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	e7fd      	b.n	8009ba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009baa:	4b39      	ldr	r3, [pc, #228]	@ (8009c90 <xPortStartScheduler+0x130>)
 8009bac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	22ff      	movs	r2, #255	@ 0xff
 8009bba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	4b31      	ldr	r3, [pc, #196]	@ (8009c94 <xPortStartScheduler+0x134>)
 8009bd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bd2:	4b31      	ldr	r3, [pc, #196]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009bd4:	2207      	movs	r2, #7
 8009bd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bd8:	e009      	b.n	8009bee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009bda:	4b2f      	ldr	r3, [pc, #188]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	4a2d      	ldr	r2, [pc, #180]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009be2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf6:	2b80      	cmp	r3, #128	@ 0x80
 8009bf8:	d0ef      	beq.n	8009bda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bfa:	4b27      	ldr	r3, [pc, #156]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f1c3 0307 	rsb	r3, r3, #7
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d00b      	beq.n	8009c1e <xPortStartScheduler+0xbe>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60bb      	str	r3, [r7, #8]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	4a1c      	ldr	r2, [pc, #112]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c28:	4b1b      	ldr	r3, [pc, #108]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c30:	4a19      	ldr	r2, [pc, #100]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c3c:	4b17      	ldr	r3, [pc, #92]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a16      	ldr	r2, [pc, #88]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c48:	4b14      	ldr	r3, [pc, #80]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a13      	ldr	r2, [pc, #76]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c54:	f000 f8da 	bl	8009e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <xPortStartScheduler+0x140>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c5e:	f000 f8f9 	bl	8009e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c62:	4b10      	ldr	r3, [pc, #64]	@ (8009ca4 <xPortStartScheduler+0x144>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a0f      	ldr	r2, [pc, #60]	@ (8009ca4 <xPortStartScheduler+0x144>)
 8009c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c6e:	f7ff ff63 	bl	8009b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c72:	f7ff f813 	bl	8008c9c <vTaskSwitchContext>
	prvTaskExitError();
 8009c76:	f7ff ff19 	bl	8009aac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	e000ed00 	.word	0xe000ed00
 8009c88:	410fc271 	.word	0x410fc271
 8009c8c:	410fc270 	.word	0x410fc270
 8009c90:	e000e400 	.word	0xe000e400
 8009c94:	20009814 	.word	0x20009814
 8009c98:	20009818 	.word	0x20009818
 8009c9c:	e000ed20 	.word	0xe000ed20
 8009ca0:	200000d0 	.word	0x200000d0
 8009ca4:	e000ef34 	.word	0xe000ef34

08009ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	607b      	str	r3, [r7, #4]
}
 8009cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cc2:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <vPortEnterCritical+0x5c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8009d04 <vPortEnterCritical+0x5c>)
 8009cca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <vPortEnterCritical+0x5c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d110      	bne.n	8009cf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d08 <vPortEnterCritical+0x60>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	603b      	str	r3, [r7, #0]
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	e7fd      	b.n	8009cf2 <vPortEnterCritical+0x4a>
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	200000d0 	.word	0x200000d0
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d12:	4b12      	ldr	r3, [pc, #72]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10b      	bne.n	8009d32 <vPortExitCritical+0x26>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	607b      	str	r3, [r7, #4]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d32:	4b0a      	ldr	r3, [pc, #40]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4a08      	ldr	r2, [pc, #32]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d3c:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <vPortExitCritical+0x44>
 8009d44:	2300      	movs	r3, #0
 8009d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f383 8811 	msr	BASEPRI, r3
}
 8009d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	200000d0 	.word	0x200000d0

08009d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d60:	f3ef 8009 	mrs	r0, PSP
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4b15      	ldr	r3, [pc, #84]	@ (8009dc0 <pxCurrentTCBConst>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	f01e 0f10 	tst.w	lr, #16
 8009d70:	bf08      	it	eq
 8009d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	6010      	str	r0, [r2, #0]
 8009d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009d84:	f380 8811 	msr	BASEPRI, r0
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f7fe ff84 	bl	8008c9c <vTaskSwitchContext>
 8009d94:	f04f 0000 	mov.w	r0, #0
 8009d98:	f380 8811 	msr	BASEPRI, r0
 8009d9c:	bc09      	pop	{r0, r3}
 8009d9e:	6819      	ldr	r1, [r3, #0]
 8009da0:	6808      	ldr	r0, [r1, #0]
 8009da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da6:	f01e 0f10 	tst.w	lr, #16
 8009daa:	bf08      	it	eq
 8009dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009db0:	f380 8809 	msr	PSP, r0
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	f3af 8000 	nop.w

08009dc0 <pxCurrentTCBConst>:
 8009dc0:	200091e8 	.word	0x200091e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009de2:	f7fe fea1 	bl	8008b28 <xTaskIncrementTick>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dec:	4b06      	ldr	r3, [pc, #24]	@ (8009e08 <xPortSysTickHandler+0x40>)
 8009dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	2300      	movs	r3, #0
 8009df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f383 8811 	msr	BASEPRI, r3
}
 8009dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e10:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <vPortSetupTimerInterrupt+0x34>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e16:	4b0b      	ldr	r3, [pc, #44]	@ (8009e44 <vPortSetupTimerInterrupt+0x38>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e48 <vPortSetupTimerInterrupt+0x3c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0a      	ldr	r2, [pc, #40]	@ (8009e4c <vPortSetupTimerInterrupt+0x40>)
 8009e22:	fba2 2303 	umull	r2, r3, r2, r3
 8009e26:	099b      	lsrs	r3, r3, #6
 8009e28:	4a09      	ldr	r2, [pc, #36]	@ (8009e50 <vPortSetupTimerInterrupt+0x44>)
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e2e:	4b04      	ldr	r3, [pc, #16]	@ (8009e40 <vPortSetupTimerInterrupt+0x34>)
 8009e30:	2207      	movs	r2, #7
 8009e32:	601a      	str	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	e000e010 	.word	0xe000e010
 8009e44:	e000e018 	.word	0xe000e018
 8009e48:	20000004 	.word	0x20000004
 8009e4c:	10624dd3 	.word	0x10624dd3
 8009e50:	e000e014 	.word	0xe000e014

08009e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009e64 <vPortEnableVFP+0x10>
 8009e58:	6801      	ldr	r1, [r0, #0]
 8009e5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009e5e:	6001      	str	r1, [r0, #0]
 8009e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e62:	bf00      	nop
 8009e64:	e000ed88 	.word	0xe000ed88

08009e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e6e:	f3ef 8305 	mrs	r3, IPSR
 8009e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b0f      	cmp	r3, #15
 8009e78:	d915      	bls.n	8009ea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e7a:	4a18      	ldr	r2, [pc, #96]	@ (8009edc <vPortValidateInterruptPriority+0x74>)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e84:	4b16      	ldr	r3, [pc, #88]	@ (8009ee0 <vPortValidateInterruptPriority+0x78>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	7afa      	ldrb	r2, [r7, #11]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d20b      	bcs.n	8009ea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	607b      	str	r3, [r7, #4]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee4 <vPortValidateInterruptPriority+0x7c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009eae:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee8 <vPortValidateInterruptPriority+0x80>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d90b      	bls.n	8009ece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	603b      	str	r3, [r7, #0]
}
 8009ec8:	bf00      	nop
 8009eca:	bf00      	nop
 8009ecc:	e7fd      	b.n	8009eca <vPortValidateInterruptPriority+0x62>
	}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	e000e3f0 	.word	0xe000e3f0
 8009ee0:	20009814 	.word	0x20009814
 8009ee4:	e000ed0c 	.word	0xe000ed0c
 8009ee8:	20009818 	.word	0x20009818

08009eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	@ 0x28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ef8:	f7fe fd5a 	bl	80089b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009efc:	4b5c      	ldr	r3, [pc, #368]	@ (800a070 <pvPortMalloc+0x184>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f04:	f000 f924 	bl	800a150 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f08:	4b5a      	ldr	r3, [pc, #360]	@ (800a074 <pvPortMalloc+0x188>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 8095 	bne.w	800a040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01e      	beq.n	8009f5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d015      	beq.n	8009f5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f023 0307 	bic.w	r3, r3, #7
 8009f34:	3308      	adds	r3, #8
 8009f36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <pvPortMalloc+0x6e>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	617b      	str	r3, [r7, #20]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d06f      	beq.n	800a040 <pvPortMalloc+0x154>
 8009f60:	4b45      	ldr	r3, [pc, #276]	@ (800a078 <pvPortMalloc+0x18c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d86a      	bhi.n	800a040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f6a:	4b44      	ldr	r3, [pc, #272]	@ (800a07c <pvPortMalloc+0x190>)
 8009f6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f6e:	4b43      	ldr	r3, [pc, #268]	@ (800a07c <pvPortMalloc+0x190>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f74:	e004      	b.n	8009f80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d903      	bls.n	8009f92 <pvPortMalloc+0xa6>
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f1      	bne.n	8009f76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f92:	4b37      	ldr	r3, [pc, #220]	@ (800a070 <pvPortMalloc+0x184>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d051      	beq.n	800a040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2208      	movs	r2, #8
 8009fa2:	4413      	add	r3, r2
 8009fa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	1ad2      	subs	r2, r2, r3
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d920      	bls.n	800a000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <pvPortMalloc+0xfc>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	613b      	str	r3, [r7, #16]
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ffa:	69b8      	ldr	r0, [r7, #24]
 8009ffc:	f000 f90a 	bl	800a214 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a000:	4b1d      	ldr	r3, [pc, #116]	@ (800a078 <pvPortMalloc+0x18c>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	4a1b      	ldr	r2, [pc, #108]	@ (800a078 <pvPortMalloc+0x18c>)
 800a00c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a00e:	4b1a      	ldr	r3, [pc, #104]	@ (800a078 <pvPortMalloc+0x18c>)
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	4b1b      	ldr	r3, [pc, #108]	@ (800a080 <pvPortMalloc+0x194>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d203      	bcs.n	800a022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a01a:	4b17      	ldr	r3, [pc, #92]	@ (800a078 <pvPortMalloc+0x18c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a18      	ldr	r2, [pc, #96]	@ (800a080 <pvPortMalloc+0x194>)
 800a020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	4b13      	ldr	r3, [pc, #76]	@ (800a074 <pvPortMalloc+0x188>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	431a      	orrs	r2, r3
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a036:	4b13      	ldr	r3, [pc, #76]	@ (800a084 <pvPortMalloc+0x198>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3301      	adds	r3, #1
 800a03c:	4a11      	ldr	r2, [pc, #68]	@ (800a084 <pvPortMalloc+0x198>)
 800a03e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a040:	f7fe fcc4 	bl	80089cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <pvPortMalloc+0x17a>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60fb      	str	r3, [r7, #12]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <pvPortMalloc+0x176>
	return pvReturn;
 800a066:	69fb      	ldr	r3, [r7, #28]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3728      	adds	r7, #40	@ 0x28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20010d54 	.word	0x20010d54
 800a074:	20010d68 	.word	0x20010d68
 800a078:	20010d58 	.word	0x20010d58
 800a07c:	20010d4c 	.word	0x20010d4c
 800a080:	20010d5c 	.word	0x20010d5c
 800a084:	20010d60 	.word	0x20010d60

0800a088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d04f      	beq.n	800a13a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a09a:	2308      	movs	r3, #8
 800a09c:	425b      	negs	r3, r3
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	4b25      	ldr	r3, [pc, #148]	@ (800a144 <vPortFree+0xbc>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10b      	bne.n	800a0ce <vPortFree+0x46>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	60fb      	str	r3, [r7, #12]
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	e7fd      	b.n	800a0ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00b      	beq.n	800a0ee <vPortFree+0x66>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	60bb      	str	r3, [r7, #8]
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	e7fd      	b.n	800a0ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <vPortFree+0xbc>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01e      	beq.n	800a13a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d11a      	bne.n	800a13a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	4b0e      	ldr	r3, [pc, #56]	@ (800a144 <vPortFree+0xbc>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	43db      	mvns	r3, r3
 800a10e:	401a      	ands	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a114:	f7fe fc4c 	bl	80089b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	4b0a      	ldr	r3, [pc, #40]	@ (800a148 <vPortFree+0xc0>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4413      	add	r3, r2
 800a122:	4a09      	ldr	r2, [pc, #36]	@ (800a148 <vPortFree+0xc0>)
 800a124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a126:	6938      	ldr	r0, [r7, #16]
 800a128:	f000 f874 	bl	800a214 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a12c:	4b07      	ldr	r3, [pc, #28]	@ (800a14c <vPortFree+0xc4>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3301      	adds	r3, #1
 800a132:	4a06      	ldr	r2, [pc, #24]	@ (800a14c <vPortFree+0xc4>)
 800a134:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a136:	f7fe fc49 	bl	80089cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a13a:	bf00      	nop
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20010d68 	.word	0x20010d68
 800a148:	20010d58 	.word	0x20010d58
 800a14c:	20010d64 	.word	0x20010d64

0800a150 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a156:	f247 5330 	movw	r3, #30000	@ 0x7530
 800a15a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a15c:	4b27      	ldr	r3, [pc, #156]	@ (800a1fc <prvHeapInit+0xac>)
 800a15e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00c      	beq.n	800a184 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3307      	adds	r3, #7
 800a16e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0307 	bic.w	r3, r3, #7
 800a176:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	4a1f      	ldr	r2, [pc, #124]	@ (800a1fc <prvHeapInit+0xac>)
 800a180:	4413      	add	r3, r2
 800a182:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a188:	4a1d      	ldr	r2, [pc, #116]	@ (800a200 <prvHeapInit+0xb0>)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a18e:	4b1c      	ldr	r3, [pc, #112]	@ (800a200 <prvHeapInit+0xb0>)
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	4413      	add	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a19c:	2208      	movs	r2, #8
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1a9b      	subs	r3, r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f023 0307 	bic.w	r3, r3, #7
 800a1aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a15      	ldr	r2, [pc, #84]	@ (800a204 <prvHeapInit+0xb4>)
 800a1b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1b2:	4b14      	ldr	r3, [pc, #80]	@ (800a204 <prvHeapInit+0xb4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1ba:	4b12      	ldr	r3, [pc, #72]	@ (800a204 <prvHeapInit+0xb4>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	1ad2      	subs	r2, r2, r3
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <prvHeapInit+0xb4>)
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a208 <prvHeapInit+0xb8>)
 800a1de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	4a09      	ldr	r2, [pc, #36]	@ (800a20c <prvHeapInit+0xbc>)
 800a1e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1e8:	4b09      	ldr	r3, [pc, #36]	@ (800a210 <prvHeapInit+0xc0>)
 800a1ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a1ee:	601a      	str	r2, [r3, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	2000981c 	.word	0x2000981c
 800a200:	20010d4c 	.word	0x20010d4c
 800a204:	20010d54 	.word	0x20010d54
 800a208:	20010d5c 	.word	0x20010d5c
 800a20c:	20010d58 	.word	0x20010d58
 800a210:	20010d68 	.word	0x20010d68

0800a214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a21c:	4b28      	ldr	r3, [pc, #160]	@ (800a2c0 <prvInsertBlockIntoFreeList+0xac>)
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	e002      	b.n	800a228 <prvInsertBlockIntoFreeList+0x14>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d8f7      	bhi.n	800a222 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	4413      	add	r3, r2
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d108      	bne.n	800a256 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	441a      	add	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	441a      	add	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d118      	bne.n	800a29c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b15      	ldr	r3, [pc, #84]	@ (800a2c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d00d      	beq.n	800a292 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	441a      	add	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	e008      	b.n	800a2a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a292:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
 800a29a:	e003      	b.n	800a2a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d002      	beq.n	800a2b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	20010d4c 	.word	0x20010d4c
 800a2c4:	20010d54 	.word	0x20010d54

0800a2c8 <arm_mat_mult_f32>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	b08b      	sub	sp, #44	@ 0x2c
 800a2d0:	8825      	ldrh	r5, [r4, #0]
 800a2d2:	9107      	str	r1, [sp, #28]
 800a2d4:	8841      	ldrh	r1, [r0, #2]
 800a2d6:	8806      	ldrh	r6, [r0, #0]
 800a2d8:	6843      	ldr	r3, [r0, #4]
 800a2da:	6857      	ldr	r7, [r2, #4]
 800a2dc:	6860      	ldr	r0, [r4, #4]
 800a2de:	9602      	str	r6, [sp, #8]
 800a2e0:	428d      	cmp	r5, r1
 800a2e2:	8864      	ldrh	r4, [r4, #2]
 800a2e4:	f040 80f9 	bne.w	800a4da <arm_mat_mult_f32+0x212>
 800a2e8:	8811      	ldrh	r1, [r2, #0]
 800a2ea:	42b1      	cmp	r1, r6
 800a2ec:	f040 80f5 	bne.w	800a4da <arm_mat_mult_f32+0x212>
 800a2f0:	8851      	ldrh	r1, [r2, #2]
 800a2f2:	42a1      	cmp	r1, r4
 800a2f4:	f040 80f1 	bne.w	800a4da <arm_mat_mult_f32+0x212>
 800a2f8:	00aa      	lsls	r2, r5, #2
 800a2fa:	2901      	cmp	r1, #1
 800a2fc:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 800a300:	ea4f 0481 	mov.w	r4, r1, lsl #2
 800a304:	f005 0e03 	and.w	lr, r5, #3
 800a308:	9206      	str	r2, [sp, #24]
 800a30a:	d170      	bne.n	800a3ee <arm_mat_mult_f32+0x126>
 800a30c:	1d01      	adds	r1, r0, #4
 800a30e:	9105      	str	r1, [sp, #20]
 800a310:	ea4f 110c 	mov.w	r1, ip, lsl #4
 800a314:	4602      	mov	r2, r0
 800a316:	f107 0904 	add.w	r9, r7, #4
 800a31a:	9101      	str	r1, [sp, #4]
 800a31c:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 800a320:	f103 0a10 	add.w	sl, r3, #16
 800a324:	f1aa 0310 	sub.w	r3, sl, #16
 800a328:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a32c:	9303      	str	r3, [sp, #12]
 800a32e:	f1a9 0704 	sub.w	r7, r9, #4
 800a332:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 800a4e4 <arm_mat_mult_f32+0x21c>
 800a336:	f1bc 0f00 	cmp.w	ip, #0
 800a33a:	d052      	beq.n	800a3e2 <arm_mat_mult_f32+0x11a>
 800a33c:	f102 0008 	add.w	r0, r2, #8
 800a340:	4653      	mov	r3, sl
 800a342:	4665      	mov	r5, ip
 800a344:	4611      	mov	r1, r2
 800a346:	ed13 6a04 	vldr	s12, [r3, #-16]
 800a34a:	ed91 7a00 	vldr	s14, [r1]
 800a34e:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a352:	edd0 6a00 	vldr	s13, [r0]
 800a356:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a35a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a35e:	190e      	adds	r6, r1, r4
 800a360:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a364:	ed96 6a00 	vldr	s12, [r6]
 800a368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a36c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a370:	1906      	adds	r6, r0, r4
 800a372:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a376:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a37a:	edd6 7a00 	vldr	s15, [r6]
 800a37e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a382:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a386:	3d01      	subs	r5, #1
 800a388:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a38c:	f101 0110 	add.w	r1, r1, #16
 800a390:	f100 0010 	add.w	r0, r0, #16
 800a394:	f103 0310 	add.w	r3, r3, #16
 800a398:	d1d5      	bne.n	800a346 <arm_mat_mult_f32+0x7e>
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	4659      	mov	r1, fp
 800a39e:	441a      	add	r2, r3
 800a3a0:	f1be 0f00 	cmp.w	lr, #0
 800a3a4:	d00b      	beq.n	800a3be <arm_mat_mult_f32+0xf6>
 800a3a6:	4673      	mov	r3, lr
 800a3a8:	ed92 7a00 	vldr	s14, [r2]
 800a3ac:	ecf1 6a01 	vldmia	r1!, {s13}
 800a3b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3ba:	4422      	add	r2, r4
 800a3bc:	d1f4      	bne.n	800a3a8 <arm_mat_mult_f32+0xe0>
 800a3be:	ece7 7a01 	vstmia	r7!, {s15}
 800a3c2:	454f      	cmp	r7, r9
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	f108 0804 	add.w	r8, r8, #4
 800a3ca:	d1b2      	bne.n	800a332 <arm_mat_mult_f32+0x6a>
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	449b      	add	fp, r3
 800a3d0:	449a      	add	sl, r3
 800a3d2:	9b02      	ldr	r3, [sp, #8]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	44a1      	add	r9, r4
 800a3d8:	9302      	str	r3, [sp, #8]
 800a3da:	d004      	beq.n	800a3e6 <arm_mat_mult_f32+0x11e>
 800a3dc:	9b07      	ldr	r3, [sp, #28]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	e7a0      	b.n	800a324 <arm_mat_mult_f32+0x5c>
 800a3e2:	9903      	ldr	r1, [sp, #12]
 800a3e4:	e7dc      	b.n	800a3a0 <arm_mat_mult_f32+0xd8>
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	b00b      	add	sp, #44	@ 0x2c
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	010e      	lsls	r6, r1, #4
 800a3f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3f8:	00ca      	lsls	r2, r1, #3
 800a3fa:	9204      	str	r2, [sp, #16]
 800a3fc:	fb06 f20c 	mul.w	r2, r6, ip
 800a400:	1d05      	adds	r5, r0, #4
 800a402:	9203      	str	r2, [sp, #12]
 800a404:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 800a408:	eb07 0b04 	add.w	fp, r7, r4
 800a40c:	9505      	str	r5, [sp, #20]
 800a40e:	9201      	str	r2, [sp, #4]
 800a410:	f103 0a10 	add.w	sl, r3, #16
 800a414:	f1aa 0310 	sub.w	r3, sl, #16
 800a418:	9308      	str	r3, [sp, #32]
 800a41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a420:	eb0b 0803 	add.w	r8, fp, r3
 800a424:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800a4e4 <arm_mat_mult_f32+0x21c>
 800a428:	f1bc 0f00 	cmp.w	ip, #0
 800a42c:	d053      	beq.n	800a4d6 <arm_mat_mult_f32+0x20e>
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	4665      	mov	r5, ip
 800a432:	18c1      	adds	r1, r0, r3
 800a434:	4602      	mov	r2, r0
 800a436:	4653      	mov	r3, sl
 800a438:	ed92 6a00 	vldr	s12, [r2]
 800a43c:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a440:	ed53 4a03 	vldr	s9, [r3, #-12]
 800a444:	ed53 6a02 	vldr	s13, [r3, #-8]
 800a448:	ed91 5a00 	vldr	s10, [r1]
 800a44c:	ed53 5a01 	vldr	s11, [r3, #-4]
 800a450:	1917      	adds	r7, r2, r4
 800a452:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a456:	ed97 6a00 	vldr	s12, [r7]
 800a45a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a45e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a462:	190f      	adds	r7, r1, r4
 800a464:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a468:	ee26 7a85 	vmul.f32	s14, s13, s10
 800a46c:	edd7 7a00 	vldr	s15, [r7]
 800a470:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a474:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a478:	3d01      	subs	r5, #1
 800a47a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a47e:	4432      	add	r2, r6
 800a480:	4431      	add	r1, r6
 800a482:	f103 0310 	add.w	r3, r3, #16
 800a486:	d1d7      	bne.n	800a438 <arm_mat_mult_f32+0x170>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	9a01      	ldr	r2, [sp, #4]
 800a48c:	4418      	add	r0, r3
 800a48e:	f1be 0f00 	cmp.w	lr, #0
 800a492:	d00b      	beq.n	800a4ac <arm_mat_mult_f32+0x1e4>
 800a494:	4673      	mov	r3, lr
 800a496:	edd0 6a00 	vldr	s13, [r0]
 800a49a:	ecb2 7a01 	vldmia	r2!, {s14}
 800a49e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4a8:	4420      	add	r0, r4
 800a4aa:	d1f4      	bne.n	800a496 <arm_mat_mult_f32+0x1ce>
 800a4ac:	ece8 7a01 	vstmia	r8!, {s15}
 800a4b0:	45d8      	cmp	r8, fp
 800a4b2:	4648      	mov	r0, r9
 800a4b4:	f109 0904 	add.w	r9, r9, #4
 800a4b8:	d1b4      	bne.n	800a424 <arm_mat_mult_f32+0x15c>
 800a4ba:	9a01      	ldr	r2, [sp, #4]
 800a4bc:	9b06      	ldr	r3, [sp, #24]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4419      	add	r1, r3
 800a4c2:	449a      	add	sl, r3
 800a4c4:	9b02      	ldr	r3, [sp, #8]
 800a4c6:	9101      	str	r1, [sp, #4]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	44a3      	add	fp, r4
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	d08a      	beq.n	800a3e6 <arm_mat_mult_f32+0x11e>
 800a4d0:	9b07      	ldr	r3, [sp, #28]
 800a4d2:	6858      	ldr	r0, [r3, #4]
 800a4d4:	e79e      	b.n	800a414 <arm_mat_mult_f32+0x14c>
 800a4d6:	9a08      	ldr	r2, [sp, #32]
 800a4d8:	e7d9      	b.n	800a48e <arm_mat_mult_f32+0x1c6>
 800a4da:	f06f 0002 	mvn.w	r0, #2
 800a4de:	b00b      	add	sp, #44	@ 0x2c
 800a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e4:	00000000 	.word	0x00000000

0800a4e8 <arm_mat_init_f32>:
 800a4e8:	8001      	strh	r1, [r0, #0]
 800a4ea:	8042      	strh	r2, [r0, #2]
 800a4ec:	6043      	str	r3, [r0, #4]
 800a4ee:	4770      	bx	lr

0800a4f0 <handle_message_memory.constprop.4>:
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f6:	b0a7      	sub	sp, #156	@ 0x9c
 800a4f8:	ac30      	add	r4, sp, #192	@ 0xc0
 800a4fa:	e884 000c 	stmia.w	r4, {r2, r3}
 800a4fe:	9213      	str	r2, [sp, #76]	@ 0x4c
 800a500:	e9dd 9236 	ldrd	r9, r2, [sp, #216]	@ 0xd8
 800a504:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800a506:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a508:	e9dd a733 	ldrd	sl, r7, [sp, #204]	@ 0xcc
 800a50c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a50e:	9314      	str	r3, [sp, #80]	@ 0x50
 800a510:	920d      	str	r2, [sp, #52]	@ 0x34
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 81a5 	beq.w	800a862 <handle_message_memory.constprop.4+0x372>
 800a518:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d036      	beq.n	800a590 <handle_message_memory.constprop.4+0xa0>
 800a522:	2300      	movs	r3, #0
 800a524:	930a      	str	r3, [sp, #40]	@ 0x28
 800a526:	469b      	mov	fp, r3
 800a528:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a52a:	691a      	ldr	r2, [r3, #16]
 800a52c:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 800a530:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800a534:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a538:	6899      	ldr	r1, [r3, #8]
 800a53a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a53c:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a53e:	7c1a      	ldrb	r2, [r3, #16]
 800a540:	68d9      	ldr	r1, [r3, #12]
 800a542:	791d      	ldrb	r5, [r3, #4]
 800a544:	7e1c      	ldrb	r4, [r3, #24]
 800a546:	9110      	str	r1, [sp, #64]	@ 0x40
 800a548:	6959      	ldr	r1, [r3, #20]
 800a54a:	69db      	ldr	r3, [r3, #28]
 800a54c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a54e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a550:	2a00      	cmp	r2, #0
 800a552:	d06e      	beq.n	800a632 <handle_message_memory.constprop.4+0x142>
 800a554:	2900      	cmp	r1, #0
 800a556:	f000 80c8 	beq.w	800a6ea <handle_message_memory.constprop.4+0x1fa>
 800a55a:	2c00      	cmp	r4, #0
 800a55c:	f040 80c5 	bne.w	800a6ea <handle_message_memory.constprop.4+0x1fa>
 800a560:	940c      	str	r4, [sp, #48]	@ 0x30
 800a562:	2f00      	cmp	r7, #0
 800a564:	d168      	bne.n	800a638 <handle_message_memory.constprop.4+0x148>
 800a566:	2d10      	cmp	r5, #16
 800a568:	f000 8084 	beq.w	800a674 <handle_message_memory.constprop.4+0x184>
 800a56c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f040 80c0 	bne.w	800a6f4 <handle_message_memory.constprop.4+0x204>
 800a574:	2d12      	cmp	r5, #18
 800a576:	f000 8157 	beq.w	800a828 <handle_message_memory.constprop.4+0x338>
 800a57a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a57c:	2d64      	cmp	r5, #100	@ 0x64
 800a57e:	d00d      	beq.n	800a59c <handle_message_memory.constprop.4+0xac>
 800a580:	2f00      	cmp	r7, #0
 800a582:	d138      	bne.n	800a5f6 <handle_message_memory.constprop.4+0x106>
 800a584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f10b 0b01 	add.w	fp, fp, #1
 800a58c:	459b      	cmp	fp, r3
 800a58e:	d3cb      	bcc.n	800a528 <handle_message_memory.constprop.4+0x38>
 800a590:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a592:	b027      	add	sp, #156	@ 0x9c
 800a594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	b002      	add	sp, #8
 800a59a:	4770      	bx	lr
 800a59c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 814f 	beq.w	800a842 <handle_message_memory.constprop.4+0x352>
 800a5a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a5a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	2a00      	cmp	r2, #0
 800a5ac:	bf08      	it	eq
 800a5ae:	460b      	moveq	r3, r1
 800a5b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5b2:	b1c7      	cbz	r7, 800a5e6 <handle_message_memory.constprop.4+0xf6>
 800a5b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5b6:	2400      	movs	r4, #0
 800a5b8:	1e5d      	subs	r5, r3, #1
 800a5ba:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 800a5be:	462a      	mov	r2, r5
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f010 fd2f 	bl	801b026 <memcmp>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	49a8      	ldr	r1, [pc, #672]	@ (800a86c <handle_message_memory.constprop.4+0x37c>)
 800a5cc:	1970      	adds	r0, r6, r5
 800a5ce:	2205      	movs	r2, #5
 800a5d0:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
 800a5d4:	3401      	adds	r4, #1
 800a5d6:	b923      	cbnz	r3, 800a5e2 <handle_message_memory.constprop.4+0xf2>
 800a5d8:	f010 fd25 	bl	801b026 <memcmp>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f000 8134 	beq.w	800a84a <handle_message_memory.constprop.4+0x35a>
 800a5e2:	42a7      	cmp	r7, r4
 800a5e4:	d1e9      	bne.n	800a5ba <handle_message_memory.constprop.4+0xca>
 800a5e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800a5ea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5ec:	fb01 3302 	mla	r3, r1, r2, r3
 800a5f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	d0c6      	beq.n	800a584 <handle_message_memory.constprop.4+0x94>
 800a5f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a5f8:	f7f5 fe02 	bl	8000200 <strlen>
 800a5fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5fe:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800a602:	3001      	adds	r0, #1
 800a604:	9000      	str	r0, [sp, #0]
 800a606:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a608:	ae36      	add	r6, sp, #216	@ 0xd8
 800a60a:	ac18      	add	r4, sp, #96	@ 0x60
 800a60c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a610:	4620      	mov	r0, r4
 800a612:	f003 fe39 	bl	800e288 <micro_ros_string_utilities_remove_tail_chars>
 800a616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a618:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	910d      	str	r1, [sp, #52]	@ 0x34
 800a620:	f10b 0b01 	add.w	fp, fp, #1
 800a624:	455b      	cmp	r3, fp
 800a626:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a62a:	4681      	mov	r9, r0
 800a62c:	f63f af7c 	bhi.w	800a528 <handle_message_memory.constprop.4+0x38>
 800a630:	e7ae      	b.n	800a590 <handle_message_memory.constprop.4+0xa0>
 800a632:	920c      	str	r2, [sp, #48]	@ 0x30
 800a634:	2f00      	cmp	r7, #0
 800a636:	d096      	beq.n	800a566 <handle_message_memory.constprop.4+0x76>
 800a638:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a63a:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a63c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a63e:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800a642:	ae36      	add	r6, sp, #216	@ 0xd8
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a64a:	4630      	mov	r0, r6
 800a64c:	f003 fdee 	bl	800e22c <micro_ros_string_utilities_append>
 800a650:	4b87      	ldr	r3, [pc, #540]	@ (800a870 <handle_message_memory.constprop.4+0x380>)
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	f10d 0860 	add.w	r8, sp, #96	@ 0x60
 800a658:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a65c:	4640      	mov	r0, r8
 800a65e:	f003 fde5 	bl	800e22c <micro_ros_string_utilities_append>
 800a662:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a666:	2d10      	cmp	r5, #16
 800a668:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a66c:	4681      	mov	r9, r0
 800a66e:	910d      	str	r1, [sp, #52]	@ 0x34
 800a670:	f47f af7c 	bne.w	800a56c <handle_message_memory.constprop.4+0x7c>
 800a674:	2c00      	cmp	r4, #0
 800a676:	f000 80c7 	beq.w	800a808 <handle_message_memory.constprop.4+0x318>
 800a67a:	2301      	movs	r3, #1
 800a67c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a67e:	2f00      	cmp	r7, #0
 800a680:	d144      	bne.n	800a70c <handle_message_memory.constprop.4+0x21c>
 800a682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800a686:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a688:	2d12      	cmp	r5, #18
 800a68a:	fb01 3302 	mla	r3, r1, r2, r3
 800a68e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a690:	f47f af74 	bne.w	800a57c <handle_message_memory.constprop.4+0x8c>
 800a694:	4b77      	ldr	r3, [pc, #476]	@ (800a874 <handle_message_memory.constprop.4+0x384>)
 800a696:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a698:	6819      	ldr	r1, [r3, #0]
 800a69a:	f003 f807 	bl	800d6ac <get_message_typesupport_handle>
 800a69e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6a0:	6845      	ldr	r5, [r0, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80ea 	bne.w	800a87c <handle_message_memory.constprop.4+0x38c>
 800a6a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6aa:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a6ac:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800a6b0:	ae36      	add	r6, sp, #216	@ 0xd8
 800a6b2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a6b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6b8:	9335      	str	r3, [sp, #212]	@ 0xd4
 800a6ba:	f10d 0810 	add.w	r8, sp, #16
 800a6be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6c0:	9330      	str	r3, [sp, #192]	@ 0xc0
 800a6c2:	e9cd a733 	strd	sl, r7, [sp, #204]	@ 0xcc
 800a6c6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800a6ca:	ab32      	add	r3, sp, #200	@ 0xc8
 800a6cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a6ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a6d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a6d6:	4419      	add	r1, r3
 800a6d8:	ab30      	add	r3, sp, #192	@ 0xc0
 800a6da:	cb0c      	ldmia	r3, {r2, r3}
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f7ff ff07 	bl	800a4f0 <handle_message_memory.constprop.4>
 800a6e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6e4:	4403      	add	r3, r0
 800a6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e8:	e74a      	b.n	800a580 <handle_message_memory.constprop.4+0x90>
 800a6ea:	2d10      	cmp	r5, #16
 800a6ec:	d07a      	beq.n	800a7e4 <handle_message_memory.constprop.4+0x2f4>
 800a6ee:	2f00      	cmp	r7, #0
 800a6f0:	f040 8097 	bne.w	800a822 <handle_message_memory.constprop.4+0x332>
 800a6f4:	2d12      	cmp	r5, #18
 800a6f6:	d029      	beq.n	800a74c <handle_message_memory.constprop.4+0x25c>
 800a6f8:	2d64      	cmp	r5, #100	@ 0x64
 800a6fa:	d177      	bne.n	800a7ec <handle_message_memory.constprop.4+0x2fc>
 800a6fc:	230c      	movs	r3, #12
 800a6fe:	9311      	str	r3, [sp, #68]	@ 0x44
 800a700:	2c00      	cmp	r4, #0
 800a702:	d079      	beq.n	800a7f8 <handle_message_memory.constprop.4+0x308>
 800a704:	2301      	movs	r3, #1
 800a706:	930c      	str	r3, [sp, #48]	@ 0x30
 800a708:	2f00      	cmp	r7, #0
 800a70a:	d0ba      	beq.n	800a682 <handle_message_memory.constprop.4+0x192>
 800a70c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a70e:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
 800a712:	2400      	movs	r4, #0
 800a714:	1e5e      	subs	r6, r3, #1
 800a716:	f85a b034 	ldr.w	fp, [sl, r4, lsl #3]
 800a71a:	4658      	mov	r0, fp
 800a71c:	f7f5 fd70 	bl	8000200 <strlen>
 800a720:	4649      	mov	r1, r9
 800a722:	4602      	mov	r2, r0
 800a724:	4658      	mov	r0, fp
 800a726:	f010 fc7e 	bl	801b026 <memcmp>
 800a72a:	4605      	mov	r5, r0
 800a72c:	eb0a 08c4 	add.w	r8, sl, r4, lsl #3
 800a730:	4632      	mov	r2, r6
 800a732:	3401      	adds	r4, #1
 800a734:	4649      	mov	r1, r9
 800a736:	4658      	mov	r0, fp
 800a738:	b91d      	cbnz	r5, 800a742 <handle_message_memory.constprop.4+0x252>
 800a73a:	f010 fc74 	bl	801b026 <memcmp>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d079      	beq.n	800a836 <handle_message_memory.constprop.4+0x346>
 800a742:	42a7      	cmp	r7, r4
 800a744:	d8e7      	bhi.n	800a716 <handle_message_memory.constprop.4+0x226>
 800a746:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 800a74a:	e79a      	b.n	800a682 <handle_message_memory.constprop.4+0x192>
 800a74c:	4b49      	ldr	r3, [pc, #292]	@ (800a874 <handle_message_memory.constprop.4+0x384>)
 800a74e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a750:	6819      	ldr	r1, [r3, #0]
 800a752:	f002 ffab 	bl	800d6ac <get_message_typesupport_handle>
 800a756:	6843      	ldr	r3, [r0, #4]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	9311      	str	r3, [sp, #68]	@ 0x44
 800a75c:	b90c      	cbnz	r4, 800a762 <handle_message_memory.constprop.4+0x272>
 800a75e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a760:	9309      	str	r3, [sp, #36]	@ 0x24
 800a762:	2f00      	cmp	r7, #0
 800a764:	d14d      	bne.n	800a802 <handle_message_memory.constprop.4+0x312>
 800a766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a768:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a76a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a76c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a76e:	fb04 3302 	mla	r3, r4, r2, r3
 800a772:	930a      	str	r3, [sp, #40]	@ 0x28
 800a774:	4b3f      	ldr	r3, [pc, #252]	@ (800a874 <handle_message_memory.constprop.4+0x384>)
 800a776:	6819      	ldr	r1, [r3, #0]
 800a778:	f002 ff98 	bl	800d6ac <get_message_typesupport_handle>
 800a77c:	6845      	ldr	r5, [r0, #4]
 800a77e:	2c00      	cmp	r4, #0
 800a780:	f43f af00 	beq.w	800a584 <handle_message_memory.constprop.4+0x94>
 800a784:	ab32      	add	r3, sp, #200	@ 0xc8
 800a786:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800a78a:	46cb      	mov	fp, r9
 800a78c:	46d1      	mov	r9, sl
 800a78e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a792:	930c      	str	r3, [sp, #48]	@ 0x30
 800a794:	2400      	movs	r4, #0
 800a796:	ae36      	add	r6, sp, #216	@ 0xd8
 800a798:	f10d 0810 	add.w	r8, sp, #16
 800a79c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a79e:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a7a0:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 800a7a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a7a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7aa:	9335      	str	r3, [sp, #212]	@ 0xd4
 800a7ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7ae:	9330      	str	r3, [sp, #192]	@ 0xc0
 800a7b0:	e9cd 9733 	strd	r9, r7, [sp, #204]	@ 0xcc
 800a7b4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800a7b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a7bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a7c0:	ab30      	add	r3, sp, #192	@ 0xc0
 800a7c2:	cb0c      	ldmia	r3, {r2, r3}
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f7ff fe92 	bl	800a4f0 <handle_message_memory.constprop.4>
 800a7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ce:	3401      	adds	r4, #1
 800a7d0:	429c      	cmp	r4, r3
 800a7d2:	4482      	add	sl, r0
 800a7d4:	d1e2      	bne.n	800a79c <handle_message_memory.constprop.4+0x2ac>
 800a7d6:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 800a7da:	46ca      	mov	sl, r9
 800a7dc:	46d9      	mov	r9, fp
 800a7de:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800a7e2:	e6cd      	b.n	800a580 <handle_message_memory.constprop.4+0x90>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7e8:	2564      	movs	r5, #100	@ 0x64
 800a7ea:	e6ba      	b.n	800a562 <handle_message_memory.constprop.4+0x72>
 800a7ec:	4b22      	ldr	r3, [pc, #136]	@ (800a878 <handle_message_memory.constprop.4+0x388>)
 800a7ee:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a7f2:	9311      	str	r3, [sp, #68]	@ 0x44
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d185      	bne.n	800a704 <handle_message_memory.constprop.4+0x214>
 800a7f8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800a7fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800a800:	e73d      	b.n	800a67e <handle_message_memory.constprop.4+0x18e>
 800a802:	2301      	movs	r3, #1
 800a804:	930c      	str	r3, [sp, #48]	@ 0x30
 800a806:	e781      	b.n	800a70c <handle_message_memory.constprop.4+0x21c>
 800a808:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a80a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a80c:	4613      	mov	r3, r2
 800a80e:	2a00      	cmp	r2, #0
 800a810:	bf08      	it	eq
 800a812:	460b      	moveq	r3, r1
 800a814:	9309      	str	r3, [sp, #36]	@ 0x24
 800a816:	bb0f      	cbnz	r7, 800a85c <handle_message_memory.constprop.4+0x36c>
 800a818:	461a      	mov	r2, r3
 800a81a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a81c:	4413      	add	r3, r2
 800a81e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a820:	e6b0      	b.n	800a584 <handle_message_memory.constprop.4+0x94>
 800a822:	2301      	movs	r3, #1
 800a824:	930c      	str	r3, [sp, #48]	@ 0x30
 800a826:	e707      	b.n	800a638 <handle_message_memory.constprop.4+0x148>
 800a828:	4b12      	ldr	r3, [pc, #72]	@ (800a874 <handle_message_memory.constprop.4+0x384>)
 800a82a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a82c:	6819      	ldr	r1, [r3, #0]
 800a82e:	f002 ff3d 	bl	800d6ac <get_message_typesupport_handle>
 800a832:	6845      	ldr	r5, [r0, #4]
 800a834:	e738      	b.n	800a6a8 <handle_message_memory.constprop.4+0x1b8>
 800a836:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a83a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a83c:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 800a840:	e71f      	b.n	800a682 <handle_message_memory.constprop.4+0x192>
 800a842:	a821      	add	r0, sp, #132	@ 0x84
 800a844:	f002 f8d6 	bl	800c9f4 <rcutils_get_default_allocator>
 800a848:	e6ac      	b.n	800a5a4 <handle_message_memory.constprop.4+0xb4>
 800a84a:	6873      	ldr	r3, [r6, #4]
 800a84c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a84e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800a852:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a854:	fb01 3302 	mla	r3, r1, r2, r3
 800a858:	930a      	str	r3, [sp, #40]	@ 0x28
 800a85a:	e6ca      	b.n	800a5f2 <handle_message_memory.constprop.4+0x102>
 800a85c:	2301      	movs	r3, #1
 800a85e:	9311      	str	r3, [sp, #68]	@ 0x44
 800a860:	e754      	b.n	800a70c <handle_message_memory.constprop.4+0x21c>
 800a862:	a81c      	add	r0, sp, #112	@ 0x70
 800a864:	f002 f8c6 	bl	800c9f4 <rcutils_get_default_allocator>
 800a868:	e656      	b.n	800a518 <handle_message_memory.constprop.4+0x28>
 800a86a:	bf00      	nop
 800a86c:	0801c050 	.word	0x0801c050
 800a870:	0801c04c 	.word	0x0801c04c
 800a874:	20000384 	.word	0x20000384
 800a878:	0801c058 	.word	0x0801c058
 800a87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d180      	bne.n	800a784 <handle_message_memory.constprop.4+0x294>
 800a882:	e67d      	b.n	800a580 <handle_message_memory.constprop.4+0x90>

0800a884 <handle_message_memory.constprop.2>:
 800a884:	b082      	sub	sp, #8
 800a886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88a:	ed2d 8b02 	vpush	{d8}
 800a88e:	b0a9      	sub	sp, #164	@ 0xa4
 800a890:	ac34      	add	r4, sp, #208	@ 0xd0
 800a892:	e884 000c 	stmia.w	r4, {r2, r3}
 800a896:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 800a89a:	9216      	str	r2, [sp, #88]	@ 0x58
 800a89c:	e9dd 723a 	ldrd	r7, r2, [sp, #232]	@ 0xe8
 800a8a0:	9308      	str	r3, [sp, #32]
 800a8a2:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800a8a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a8a6:	9112      	str	r1, [sp, #72]	@ 0x48
 800a8a8:	9314      	str	r3, [sp, #80]	@ 0x50
 800a8aa:	920c      	str	r2, [sp, #48]	@ 0x30
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 8210 	beq.w	800acd2 <handle_message_memory.constprop.2+0x44e>
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	9215      	str	r2, [sp, #84]	@ 0x54
 800a8b8:	ee08 3a10 	vmov	s16, r3
 800a8bc:	4603      	mov	r3, r0
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 81c0 	beq.w	800ac46 <handle_message_memory.constprop.2+0x3c2>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 800a8cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8ce:	691a      	ldr	r2, [r3, #16]
 800a8d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800a8d6:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800a8da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a8de:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a8e0:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800a8e4:	7c1a      	ldrb	r2, [r3, #16]
 800a8e6:	791e      	ldrb	r6, [r3, #4]
 800a8e8:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800a8ec:	f893 9018 	ldrb.w	r9, [r3, #24]
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	9110      	str	r1, [sp, #64]	@ 0x40
 800a8f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	d056      	beq.n	800a9a8 <handle_message_memory.constprop.2+0x124>
 800a8fa:	f1b8 0f00 	cmp.w	r8, #0
 800a8fe:	d002      	beq.n	800a906 <handle_message_memory.constprop.2+0x82>
 800a900:	f1b9 0f00 	cmp.w	r9, #0
 800a904:	d050      	beq.n	800a9a8 <handle_message_memory.constprop.2+0x124>
 800a906:	9b08      	ldr	r3, [sp, #32]
 800a908:	2e10      	cmp	r6, #16
 800a90a:	bf08      	it	eq
 800a90c:	2664      	moveq	r6, #100	@ 0x64
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f040 8154 	bne.w	800abbc <handle_message_memory.constprop.2+0x338>
 800a914:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a916:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a918:	2e12      	cmp	r6, #18
 800a91a:	4413      	add	r3, r2
 800a91c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a91e:	f000 80f8 	beq.w	800ab12 <handle_message_memory.constprop.2+0x28e>
 800a922:	2e64      	cmp	r6, #100	@ 0x64
 800a924:	f040 8164 	bne.w	800abf0 <handle_message_memory.constprop.2+0x36c>
 800a928:	f1b9 0f00 	cmp.w	r9, #0
 800a92c:	f040 816b 	bne.w	800ac06 <handle_message_memory.constprop.2+0x382>
 800a930:	230c      	movs	r3, #12
 800a932:	9311      	str	r3, [sp, #68]	@ 0x44
 800a934:	2301      	movs	r3, #1
 800a936:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
 800a93a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a93c:	9b08      	ldr	r3, [sp, #32]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d148      	bne.n	800a9d4 <handle_message_memory.constprop.2+0x150>
 800a942:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a944:	fb03 f208 	mul.w	r2, r3, r8
 800a948:	ee18 1a10 	vmov	r1, s16
 800a94c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a94e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a950:	4610      	mov	r0, r2
 800a952:	4798      	blx	r3
 800a954:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800a956:	6020      	str	r0, [r4, #0]
 800a958:	2800      	cmp	r0, #0
 800a95a:	f000 8174 	beq.w	800ac46 <handle_message_memory.constprop.2+0x3c2>
 800a95e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a960:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a962:	2100      	movs	r1, #0
 800a964:	4413      	add	r3, r2
 800a966:	930a      	str	r3, [sp, #40]	@ 0x28
 800a968:	f010 fb87 	bl	801b07a <memset>
 800a96c:	4623      	mov	r3, r4
 800a96e:	f8c4 8008 	str.w	r8, [r4, #8]
 800a972:	2e12      	cmp	r6, #18
 800a974:	f04f 0400 	mov.w	r4, #0
 800a978:	605c      	str	r4, [r3, #4]
 800a97a:	f000 80f4 	beq.w	800ab66 <handle_message_memory.constprop.2+0x2e2>
 800a97e:	2e64      	cmp	r6, #100	@ 0x64
 800a980:	d054      	beq.n	800aa2c <handle_message_memory.constprop.2+0x1a8>
 800a982:	9b08      	ldr	r3, [sp, #32]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f040 80a6 	bne.w	800aad6 <handle_message_memory.constprop.2+0x252>
 800a98a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	3201      	adds	r2, #1
 800a992:	429a      	cmp	r2, r3
 800a994:	9209      	str	r2, [sp, #36]	@ 0x24
 800a996:	d399      	bcc.n	800a8cc <handle_message_memory.constprop.2+0x48>
 800a998:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a99a:	b029      	add	sp, #164	@ 0xa4
 800a99c:	ecbd 8b02 	vpop	{d8}
 800a9a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	b002      	add	sp, #8
 800a9a6:	4770      	bx	lr
 800a9a8:	9b08      	ldr	r3, [sp, #32]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f040 80c1 	bne.w	800ab32 <handle_message_memory.constprop.2+0x2ae>
 800a9b0:	2e10      	cmp	r6, #16
 800a9b2:	d134      	bne.n	800aa1e <handle_message_memory.constprop.2+0x19a>
 800a9b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a9b8:	4413      	add	r3, r2
 800a9ba:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9bc:	f1b9 0f00 	cmp.w	r9, #0
 800a9c0:	f000 8126 	beq.w	800ac10 <handle_message_memory.constprop.2+0x38c>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9cc:	9b08      	ldr	r3, [sp, #32]
 800a9ce:	2610      	movs	r6, #16
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0b6      	beq.n	800a942 <handle_message_memory.constprop.2+0xbe>
 800a9d4:	469a      	mov	sl, r3
 800a9d6:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 800a9da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9dc:	9617      	str	r6, [sp, #92]	@ 0x5c
 800a9de:	2400      	movs	r4, #0
 800a9e0:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 800a9e4:	f85b 6034 	ldr.w	r6, [fp, r4, lsl #3]
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7f5 fc09 	bl	8000200 <strlen>
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f010 fb17 	bl	801b026 <memcmp>
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	eb0b 08c4 	add.w	r8, fp, r4, lsl #3
 800a9fe:	464a      	mov	r2, r9
 800aa00:	3401      	adds	r4, #1
 800aa02:	4639      	mov	r1, r7
 800aa04:	4630      	mov	r0, r6
 800aa06:	b925      	cbnz	r5, 800aa12 <handle_message_memory.constprop.2+0x18e>
 800aa08:	f010 fb0d 	bl	801b026 <memcmp>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f000 811d 	beq.w	800ac4c <handle_message_memory.constprop.2+0x3c8>
 800aa12:	4554      	cmp	r4, sl
 800aa14:	d1e6      	bne.n	800a9e4 <handle_message_memory.constprop.2+0x160>
 800aa16:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	@ 0x60
 800aa1a:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800aa1c:	e791      	b.n	800a942 <handle_message_memory.constprop.2+0xbe>
 800aa1e:	2e12      	cmp	r6, #18
 800aa20:	f000 80fe 	beq.w	800ac20 <handle_message_memory.constprop.2+0x39c>
 800aa24:	2e64      	cmp	r6, #100	@ 0x64
 800aa26:	f04f 0800 	mov.w	r8, #0
 800aa2a:	d1aa      	bne.n	800a982 <handle_message_memory.constprop.2+0xfe>
 800aa2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 8146 	beq.w	800acc0 <handle_message_memory.constprop.2+0x43c>
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	691e      	ldr	r6, [r3, #16]
 800aa38:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa3a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa3c:	2d00      	cmp	r5, #0
 800aa3e:	bf08      	it	eq
 800aa40:	461d      	moveq	r5, r3
 800aa42:	9b08      	ldr	r3, [sp, #32]
 800aa44:	b1eb      	cbz	r3, 800aa82 <handle_message_memory.constprop.2+0x1fe>
 800aa46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aa48:	9510      	str	r5, [sp, #64]	@ 0x40
 800aa4a:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
 800aa4e:	2400      	movs	r4, #0
 800aa50:	469a      	mov	sl, r3
 800aa52:	f85b 5034 	ldr.w	r5, [fp, r4, lsl #3]
 800aa56:	464a      	mov	r2, r9
 800aa58:	4639      	mov	r1, r7
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f010 fae3 	bl	801b026 <memcmp>
 800aa60:	4603      	mov	r3, r0
 800aa62:	49a1      	ldr	r1, [pc, #644]	@ (800ace8 <handle_message_memory.constprop.2+0x464>)
 800aa64:	eb05 0009 	add.w	r0, r5, r9
 800aa68:	2205      	movs	r2, #5
 800aa6a:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800aa6e:	3401      	adds	r4, #1
 800aa70:	b923      	cbnz	r3, 800aa7c <handle_message_memory.constprop.2+0x1f8>
 800aa72:	f010 fad8 	bl	801b026 <memcmp>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f000 8129 	beq.w	800acce <handle_message_memory.constprop.2+0x44a>
 800aa7c:	4554      	cmp	r4, sl
 800aa7e:	d1e8      	bne.n	800aa52 <handle_message_memory.constprop.2+0x1ce>
 800aa80:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800aa82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa86:	589c      	ldr	r4, [r3, r2]
 800aa88:	fb08 f305 	mul.w	r3, r8, r5
 800aa8c:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa8e:	f1b8 0f00 	cmp.w	r8, #0
 800aa92:	d018      	beq.n	800aac6 <handle_message_memory.constprop.2+0x242>
 800aa94:	f04f 0a00 	mov.w	sl, #0
 800aa98:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800aa9c:	46b3      	mov	fp, r6
 800aa9e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800aaa0:	46d1      	mov	r9, sl
 800aaa2:	4659      	mov	r1, fp
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	47b0      	blx	r6
 800aaa8:	f10a 0a01 	add.w	sl, sl, #1
 800aaac:	e9c4 9501 	strd	r9, r5, [r4, #4]
 800aab0:	6020      	str	r0, [r4, #0]
 800aab2:	462a      	mov	r2, r5
 800aab4:	2100      	movs	r1, #0
 800aab6:	f010 fae0 	bl	801b07a <memset>
 800aaba:	45c2      	cmp	sl, r8
 800aabc:	f104 040c 	add.w	r4, r4, #12
 800aac0:	d1ef      	bne.n	800aaa2 <handle_message_memory.constprop.2+0x21e>
 800aac2:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800aac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aac8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aaca:	4413      	add	r3, r2
 800aacc:	930a      	str	r3, [sp, #40]	@ 0x28
 800aace:	9b08      	ldr	r3, [sp, #32]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f43f af5a 	beq.w	800a98a <handle_message_memory.constprop.2+0x106>
 800aad6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800aad8:	f7f5 fb92 	bl	8000200 <strlen>
 800aadc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aade:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800aae0:	973a      	str	r7, [sp, #232]	@ 0xe8
 800aae2:	3001      	adds	r0, #1
 800aae4:	9000      	str	r0, [sp, #0]
 800aae6:	933b      	str	r3, [sp, #236]	@ 0xec
 800aae8:	ad1a      	add	r5, sp, #104	@ 0x68
 800aaea:	ac3a      	add	r4, sp, #232	@ 0xe8
 800aaec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800aaf0:	3601      	adds	r6, #1
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	9609      	str	r6, [sp, #36]	@ 0x24
 800aaf6:	f003 fbc7 	bl	800e288 <micro_ros_string_utilities_remove_tail_chars>
 800aafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aafc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	910c      	str	r1, [sp, #48]	@ 0x30
 800ab04:	429e      	cmp	r6, r3
 800ab06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab0a:	4607      	mov	r7, r0
 800ab0c:	f4ff aede 	bcc.w	800a8cc <handle_message_memory.constprop.2+0x48>
 800ab10:	e742      	b.n	800a998 <handle_message_memory.constprop.2+0x114>
 800ab12:	4b76      	ldr	r3, [pc, #472]	@ (800acec <handle_message_memory.constprop.2+0x468>)
 800ab14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ab16:	6819      	ldr	r1, [r3, #0]
 800ab18:	f002 fdc8 	bl	800d6ac <get_message_typesupport_handle>
 800ab1c:	6843      	ldr	r3, [r0, #4]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab22:	f1b9 0f00 	cmp.w	r9, #0
 800ab26:	d16b      	bne.n	800ac00 <handle_message_memory.constprop.2+0x37c>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 800ab2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab30:	e704      	b.n	800a93c <handle_message_memory.constprop.2+0xb8>
 800ab32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab34:	933b      	str	r3, [sp, #236]	@ 0xec
 800ab36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab38:	973a      	str	r7, [sp, #232]	@ 0xe8
 800ab3a:	ac3a      	add	r4, sp, #232	@ 0xe8
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ab42:	4620      	mov	r0, r4
 800ab44:	f003 fb72 	bl	800e22c <micro_ros_string_utilities_append>
 800ab48:	4b69      	ldr	r3, [pc, #420]	@ (800acf0 <handle_message_memory.constprop.2+0x46c>)
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	af1a      	add	r7, sp, #104	@ 0x68
 800ab4e:	4638      	mov	r0, r7
 800ab50:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ab54:	f003 fb6a 	bl	800e22c <micro_ros_string_utilities_append>
 800ab58:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ab5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab60:	4607      	mov	r7, r0
 800ab62:	910c      	str	r1, [sp, #48]	@ 0x30
 800ab64:	e724      	b.n	800a9b0 <handle_message_memory.constprop.2+0x12c>
 800ab66:	4b61      	ldr	r3, [pc, #388]	@ (800acec <handle_message_memory.constprop.2+0x468>)
 800ab68:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ab6a:	6819      	ldr	r1, [r3, #0]
 800ab6c:	f002 fd9e 	bl	800d6ac <get_message_typesupport_handle>
 800ab70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab72:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d16d      	bne.n	800ac56 <handle_message_memory.constprop.2+0x3d2>
 800ab7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab7c:	933b      	str	r3, [sp, #236]	@ 0xec
 800ab7e:	973a      	str	r7, [sp, #232]	@ 0xe8
 800ab80:	ac3a      	add	r4, sp, #232	@ 0xe8
 800ab82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ab86:	9b08      	ldr	r3, [sp, #32]
 800ab88:	9338      	str	r3, [sp, #224]	@ 0xe0
 800ab8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab8c:	9339      	str	r3, [sp, #228]	@ 0xe4
 800ab8e:	f10d 0a10 	add.w	sl, sp, #16
 800ab92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab94:	9334      	str	r3, [sp, #208]	@ 0xd0
 800ab96:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
 800ab9a:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800ab9e:	ae36      	add	r6, sp, #216	@ 0xd8
 800aba0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800aba4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aba8:	ab34      	add	r3, sp, #208	@ 0xd0
 800abaa:	cb0c      	ldmia	r3, {r2, r3}
 800abac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800abae:	4648      	mov	r0, r9
 800abb0:	f7ff fe68 	bl	800a884 <handle_message_memory.constprop.2>
 800abb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb6:	4403      	add	r3, r0
 800abb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800abba:	e6e2      	b.n	800a982 <handle_message_memory.constprop.2+0xfe>
 800abbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abbe:	933b      	str	r3, [sp, #236]	@ 0xec
 800abc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abc2:	973a      	str	r7, [sp, #232]	@ 0xe8
 800abc4:	ac3a      	add	r4, sp, #232	@ 0xe8
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800abcc:	4620      	mov	r0, r4
 800abce:	f003 fb2d 	bl	800e22c <micro_ros_string_utilities_append>
 800abd2:	4b47      	ldr	r3, [pc, #284]	@ (800acf0 <handle_message_memory.constprop.2+0x46c>)
 800abd4:	9300      	str	r3, [sp, #0]
 800abd6:	af1a      	add	r7, sp, #104	@ 0x68
 800abd8:	4638      	mov	r0, r7
 800abda:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800abde:	f003 fb25 	bl	800e22c <micro_ros_string_utilities_append>
 800abe2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800abe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800abea:	4607      	mov	r7, r0
 800abec:	910c      	str	r1, [sp, #48]	@ 0x30
 800abee:	e691      	b.n	800a914 <handle_message_memory.constprop.2+0x90>
 800abf0:	4b40      	ldr	r3, [pc, #256]	@ (800acf4 <handle_message_memory.constprop.2+0x470>)
 800abf2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800abf6:	9311      	str	r3, [sp, #68]	@ 0x44
 800abf8:	f1b9 0f00 	cmp.w	r9, #0
 800abfc:	f43f ae9a 	beq.w	800a934 <handle_message_memory.constprop.2+0xb0>
 800ac00:	2301      	movs	r3, #1
 800ac02:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac04:	e69a      	b.n	800a93c <handle_message_memory.constprop.2+0xb8>
 800ac06:	2301      	movs	r3, #1
 800ac08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac0e:	e695      	b.n	800a93c <handle_message_memory.constprop.2+0xb8>
 800ac10:	b195      	cbz	r5, 800ac38 <handle_message_memory.constprop.2+0x3b4>
 800ac12:	2301      	movs	r3, #1
 800ac14:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 800ac18:	46a8      	mov	r8, r5
 800ac1a:	2610      	movs	r6, #16
 800ac1c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac1e:	e68d      	b.n	800a93c <handle_message_memory.constprop.2+0xb8>
 800ac20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ac26:	4413      	add	r3, r2
 800ac28:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac2a:	4b30      	ldr	r3, [pc, #192]	@ (800acec <handle_message_memory.constprop.2+0x468>)
 800ac2c:	6819      	ldr	r1, [r3, #0]
 800ac2e:	f002 fd3d 	bl	800d6ac <get_message_typesupport_handle>
 800ac32:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800ac36:	e7a0      	b.n	800ab7a <handle_message_memory.constprop.2+0x2f6>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac3e:	9513      	str	r5, [sp, #76]	@ 0x4c
 800ac40:	2610      	movs	r6, #16
 800ac42:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac44:	e67a      	b.n	800a93c <handle_message_memory.constprop.2+0xb8>
 800ac46:	2300      	movs	r3, #0
 800ac48:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac4a:	e6a5      	b.n	800a998 <handle_message_memory.constprop.2+0x114>
 800ac4c:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	@ 0x5c
 800ac50:	f8d8 8004 	ldr.w	r8, [r8, #4]
 800ac54:	e675      	b.n	800a942 <handle_message_memory.constprop.2+0xbe>
 800ac56:	f1b8 0f00 	cmp.w	r8, #0
 800ac5a:	f43f ae92 	beq.w	800a982 <handle_message_memory.constprop.2+0xfe>
 800ac5e:	4625      	mov	r5, r4
 800ac60:	ac3a      	add	r4, sp, #232	@ 0xe8
 800ac62:	940d      	str	r4, [sp, #52]	@ 0x34
 800ac64:	465c      	mov	r4, fp
 800ac66:	46bb      	mov	fp, r7
 800ac68:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800ac6a:	f10d 0a10 	add.w	sl, sp, #16
 800ac6e:	ae36      	add	r6, sp, #216	@ 0xd8
 800ac70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac72:	933b      	str	r3, [sp, #236]	@ 0xec
 800ac74:	9b08      	ldr	r3, [sp, #32]
 800ac76:	9338      	str	r3, [sp, #224]	@ 0xe0
 800ac78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac7a:	9339      	str	r3, [sp, #228]	@ 0xe4
 800ac7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac7e:	9334      	str	r3, [sp, #208]	@ 0xd0
 800ac80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac82:	f8cd b0e8 	str.w	fp, [sp, #232]	@ 0xe8
 800ac86:	f8d3 c000 	ldr.w	ip, [r3]
 800ac8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac8c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800ac90:	9437      	str	r4, [sp, #220]	@ 0xdc
 800ac92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac96:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800ac9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800ac9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aca2:	ab34      	add	r3, sp, #208	@ 0xd0
 800aca4:	fb0e c105 	mla	r1, lr, r5, ip
 800aca8:	cb0c      	ldmia	r3, {r2, r3}
 800acaa:	4648      	mov	r0, r9
 800acac:	f7ff fdea 	bl	800a884 <handle_message_memory.constprop.2>
 800acb0:	3501      	adds	r5, #1
 800acb2:	45a8      	cmp	r8, r5
 800acb4:	4407      	add	r7, r0
 800acb6:	d1db      	bne.n	800ac70 <handle_message_memory.constprop.2+0x3ec>
 800acb8:	970a      	str	r7, [sp, #40]	@ 0x28
 800acba:	465f      	mov	r7, fp
 800acbc:	46a3      	mov	fp, r4
 800acbe:	e660      	b.n	800a982 <handle_message_memory.constprop.2+0xfe>
 800acc0:	a823      	add	r0, sp, #140	@ 0x8c
 800acc2:	f001 fe97 	bl	800c9f4 <rcutils_get_default_allocator>
 800acc6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acc8:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 800acca:	930e      	str	r3, [sp, #56]	@ 0x38
 800accc:	e6b5      	b.n	800aa3a <handle_message_memory.constprop.2+0x1b6>
 800acce:	686d      	ldr	r5, [r5, #4]
 800acd0:	e6d7      	b.n	800aa82 <handle_message_memory.constprop.2+0x1fe>
 800acd2:	a81e      	add	r0, sp, #120	@ 0x78
 800acd4:	f001 fe8e 	bl	800c9f4 <rcutils_get_default_allocator>
 800acd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800acda:	9315      	str	r3, [sp, #84]	@ 0x54
 800acdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800acde:	ee08 3a10 	vmov	s16, r3
 800ace2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace4:	e5eb      	b.n	800a8be <handle_message_memory.constprop.2+0x3a>
 800ace6:	bf00      	nop
 800ace8:	0801c050 	.word	0x0801c050
 800acec:	20000384 	.word	0x20000384
 800acf0:	0801c04c 	.word	0x0801c04c
 800acf4:	0801c058 	.word	0x0801c058

0800acf8 <get_longest_member_name>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	ed2d 8b06 	vpush	{d8-d10}
 800ad00:	6885      	ldr	r5, [r0, #8]
 800ad02:	b099      	sub	sp, #100	@ 0x64
 800ad04:	2d00      	cmp	r5, #0
 800ad06:	f000 810f 	beq.w	800af28 <get_longest_member_name+0x230>
 800ad0a:	f04f 0a00 	mov.w	sl, #0
 800ad0e:	46d3      	mov	fp, sl
 800ad10:	f8cd a004 	str.w	sl, [sp, #4]
 800ad14:	9003      	str	r0, [sp, #12]
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	eb03 020a 	add.w	r2, r3, sl
 800ad1e:	f853 700a 	ldr.w	r7, [r3, sl]
 800ad22:	7913      	ldrb	r3, [r2, #4]
 800ad24:	2b12      	cmp	r3, #18
 800ad26:	d018      	beq.n	800ad5a <get_longest_member_name+0x62>
 800ad28:	f04f 0900 	mov.w	r9, #0
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	f7f5 fa67 	bl	8000200 <strlen>
 800ad32:	9b01      	ldr	r3, [sp, #4]
 800ad34:	4448      	add	r0, r9
 800ad36:	3001      	adds	r0, #1
 800ad38:	4283      	cmp	r3, r0
 800ad3a:	f10b 0b01 	add.w	fp, fp, #1
 800ad3e:	bf38      	it	cc
 800ad40:	4603      	movcc	r3, r0
 800ad42:	455d      	cmp	r5, fp
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800ad4a:	d8e4      	bhi.n	800ad16 <get_longest_member_name+0x1e>
 800ad4c:	469b      	mov	fp, r3
 800ad4e:	4658      	mov	r0, fp
 800ad50:	b019      	add	sp, #100	@ 0x64
 800ad52:	ecbd 8b06 	vpop	{d8-d10}
 800ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5a:	4bbc      	ldr	r3, [pc, #752]	@ (800b04c <get_longest_member_name+0x354>)
 800ad5c:	68d0      	ldr	r0, [r2, #12]
 800ad5e:	6819      	ldr	r1, [r3, #0]
 800ad60:	f002 fca4 	bl	800d6ac <get_message_typesupport_handle>
 800ad64:	6843      	ldr	r3, [r0, #4]
 800ad66:	9305      	str	r3, [sp, #20]
 800ad68:	689d      	ldr	r5, [r3, #8]
 800ad6a:	2d00      	cmp	r5, #0
 800ad6c:	f000 811a 	beq.w	800afa4 <get_longest_member_name+0x2ac>
 800ad70:	f04f 0800 	mov.w	r8, #0
 800ad74:	ee08 7a10 	vmov	s16, r7
 800ad78:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800ad7c:	46c1      	mov	r9, r8
 800ad7e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ad82:	f8cd 8008 	str.w	r8, [sp, #8]
 800ad86:	46c2      	mov	sl, r8
 800ad88:	9b05      	ldr	r3, [sp, #20]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	eb03 020a 	add.w	r2, r3, sl
 800ad90:	f853 300a 	ldr.w	r3, [r3, sl]
 800ad94:	ee0a 3a10 	vmov	s20, r3
 800ad98:	7913      	ldrb	r3, [r2, #4]
 800ad9a:	2b12      	cmp	r3, #18
 800ad9c:	d01b      	beq.n	800add6 <get_longest_member_name+0xde>
 800ad9e:	2700      	movs	r7, #0
 800ada0:	ee1a 0a10 	vmov	r0, s20
 800ada4:	f7f5 fa2c 	bl	8000200 <strlen>
 800ada8:	9b02      	ldr	r3, [sp, #8]
 800adaa:	4438      	add	r0, r7
 800adac:	3001      	adds	r0, #1
 800adae:	4283      	cmp	r3, r0
 800adb0:	f109 0901 	add.w	r9, r9, #1
 800adb4:	bf38      	it	cc
 800adb6:	4603      	movcc	r3, r0
 800adb8:	45a9      	cmp	r9, r5
 800adba:	9302      	str	r3, [sp, #8]
 800adbc:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800adc0:	d3e2      	bcc.n	800ad88 <get_longest_member_name+0x90>
 800adc2:	4699      	mov	r9, r3
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800adca:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800adce:	689d      	ldr	r5, [r3, #8]
 800add0:	ee18 7a10 	vmov	r7, s16
 800add4:	e7aa      	b.n	800ad2c <get_longest_member_name+0x34>
 800add6:	4b9d      	ldr	r3, [pc, #628]	@ (800b04c <get_longest_member_name+0x354>)
 800add8:	68d0      	ldr	r0, [r2, #12]
 800adda:	6819      	ldr	r1, [r3, #0]
 800addc:	f002 fc66 	bl	800d6ac <get_message_typesupport_handle>
 800ade0:	6843      	ldr	r3, [r0, #4]
 800ade2:	9307      	str	r3, [sp, #28]
 800ade4:	689d      	ldr	r5, [r3, #8]
 800ade6:	2d00      	cmp	r5, #0
 800ade8:	f000 80a5 	beq.w	800af36 <get_longest_member_name+0x23e>
 800adec:	f04f 0b00 	mov.w	fp, #0
 800adf0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800adf4:	46d8      	mov	r8, fp
 800adf6:	f8cd b010 	str.w	fp, [sp, #16]
 800adfa:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 800adfe:	46d9      	mov	r9, fp
 800ae00:	9b07      	ldr	r3, [sp, #28]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	eb03 0209 	add.w	r2, r3, r9
 800ae08:	f853 7009 	ldr.w	r7, [r3, r9]
 800ae0c:	7913      	ldrb	r3, [r2, #4]
 800ae0e:	2b12      	cmp	r3, #18
 800ae10:	d019      	beq.n	800ae46 <get_longest_member_name+0x14e>
 800ae12:	f04f 0a00 	mov.w	sl, #0
 800ae16:	4638      	mov	r0, r7
 800ae18:	f7f5 f9f2 	bl	8000200 <strlen>
 800ae1c:	9b04      	ldr	r3, [sp, #16]
 800ae1e:	4450      	add	r0, sl
 800ae20:	3001      	adds	r0, #1
 800ae22:	4283      	cmp	r3, r0
 800ae24:	f108 0801 	add.w	r8, r8, #1
 800ae28:	bf38      	it	cc
 800ae2a:	4603      	movcc	r3, r0
 800ae2c:	45a8      	cmp	r8, r5
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800ae34:	d3e4      	bcc.n	800ae00 <get_longest_member_name+0x108>
 800ae36:	461f      	mov	r7, r3
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800ae3e:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800ae42:	689d      	ldr	r5, [r3, #8]
 800ae44:	e7ac      	b.n	800ada0 <get_longest_member_name+0xa8>
 800ae46:	4b81      	ldr	r3, [pc, #516]	@ (800b04c <get_longest_member_name+0x354>)
 800ae48:	68d0      	ldr	r0, [r2, #12]
 800ae4a:	6819      	ldr	r1, [r3, #0]
 800ae4c:	f002 fc2e 	bl	800d6ac <get_message_typesupport_handle>
 800ae50:	6843      	ldr	r3, [r0, #4]
 800ae52:	9308      	str	r3, [sp, #32]
 800ae54:	689d      	ldr	r5, [r3, #8]
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	f000 80f2 	beq.w	800b040 <get_longest_member_name+0x348>
 800ae5c:	f04f 0b00 	mov.w	fp, #0
 800ae60:	ee08 7a90 	vmov	s17, r7
 800ae64:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800ae68:	46da      	mov	sl, fp
 800ae6a:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 800ae6e:	f8cd b018 	str.w	fp, [sp, #24]
 800ae72:	46d9      	mov	r9, fp
 800ae74:	9b08      	ldr	r3, [sp, #32]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	eb03 020a 	add.w	r2, r3, sl
 800ae7c:	f853 700a 	ldr.w	r7, [r3, sl]
 800ae80:	7913      	ldrb	r3, [r2, #4]
 800ae82:	2b12      	cmp	r3, #18
 800ae84:	d01b      	beq.n	800aebe <get_longest_member_name+0x1c6>
 800ae86:	f04f 0b00 	mov.w	fp, #0
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	f7f5 f9b8 	bl	8000200 <strlen>
 800ae90:	9b06      	ldr	r3, [sp, #24]
 800ae92:	4458      	add	r0, fp
 800ae94:	3001      	adds	r0, #1
 800ae96:	4283      	cmp	r3, r0
 800ae98:	f109 0901 	add.w	r9, r9, #1
 800ae9c:	bf38      	it	cc
 800ae9e:	4603      	movcc	r3, r0
 800aea0:	45a9      	cmp	r9, r5
 800aea2:	9306      	str	r3, [sp, #24]
 800aea4:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800aea8:	d3e4      	bcc.n	800ae74 <get_longest_member_name+0x17c>
 800aeaa:	469a      	mov	sl, r3
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800aeb2:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800aeb6:	689d      	ldr	r5, [r3, #8]
 800aeb8:	ee18 7a90 	vmov	r7, s17
 800aebc:	e7ab      	b.n	800ae16 <get_longest_member_name+0x11e>
 800aebe:	4b63      	ldr	r3, [pc, #396]	@ (800b04c <get_longest_member_name+0x354>)
 800aec0:	68d0      	ldr	r0, [r2, #12]
 800aec2:	6819      	ldr	r1, [r3, #0]
 800aec4:	f002 fbf2 	bl	800d6ac <get_message_typesupport_handle>
 800aec8:	6843      	ldr	r3, [r0, #4]
 800aeca:	9309      	str	r3, [sp, #36]	@ 0x24
 800aecc:	689d      	ldr	r5, [r3, #8]
 800aece:	2d00      	cmp	r5, #0
 800aed0:	f000 80b9 	beq.w	800b046 <get_longest_member_name+0x34e>
 800aed4:	f04f 0800 	mov.w	r8, #0
 800aed8:	ee09 7a10 	vmov	s18, r7
 800aedc:	e9cd 9a11 	strd	r9, sl, [sp, #68]	@ 0x44
 800aee0:	46c3      	mov	fp, r8
 800aee2:	46c2      	mov	sl, r8
 800aee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	eb03 0208 	add.w	r2, r3, r8
 800aeec:	f853 9008 	ldr.w	r9, [r3, r8]
 800aef0:	7913      	ldrb	r3, [r2, #4]
 800aef2:	2b12      	cmp	r3, #18
 800aef4:	d022      	beq.n	800af3c <get_longest_member_name+0x244>
 800aef6:	2700      	movs	r7, #0
 800aef8:	4648      	mov	r0, r9
 800aefa:	f7f5 f981 	bl	8000200 <strlen>
 800aefe:	4438      	add	r0, r7
 800af00:	3001      	adds	r0, #1
 800af02:	4582      	cmp	sl, r0
 800af04:	f10b 0b01 	add.w	fp, fp, #1
 800af08:	bf38      	it	cc
 800af0a:	4682      	movcc	sl, r0
 800af0c:	45ab      	cmp	fp, r5
 800af0e:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 800af12:	d3e7      	bcc.n	800aee4 <get_longest_member_name+0x1ec>
 800af14:	9b08      	ldr	r3, [sp, #32]
 800af16:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 800af1a:	689d      	ldr	r5, [r3, #8]
 800af1c:	46d3      	mov	fp, sl
 800af1e:	ee19 7a10 	vmov	r7, s18
 800af22:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 800af26:	e7b0      	b.n	800ae8a <get_longest_member_name+0x192>
 800af28:	46ab      	mov	fp, r5
 800af2a:	4658      	mov	r0, fp
 800af2c:	b019      	add	sp, #100	@ 0x64
 800af2e:	ecbd 8b06 	vpop	{d8-d10}
 800af32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af36:	9b05      	ldr	r3, [sp, #20]
 800af38:	689d      	ldr	r5, [r3, #8]
 800af3a:	e730      	b.n	800ad9e <get_longest_member_name+0xa6>
 800af3c:	4b43      	ldr	r3, [pc, #268]	@ (800b04c <get_longest_member_name+0x354>)
 800af3e:	68d0      	ldr	r0, [r2, #12]
 800af40:	6819      	ldr	r1, [r3, #0]
 800af42:	f002 fbb3 	bl	800d6ac <get_message_typesupport_handle>
 800af46:	6843      	ldr	r3, [r0, #4]
 800af48:	689e      	ldr	r6, [r3, #8]
 800af4a:	461a      	mov	r2, r3
 800af4c:	2e00      	cmp	r6, #0
 800af4e:	d07f      	beq.n	800b050 <get_longest_member_name+0x358>
 800af50:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
 800af54:	2400      	movs	r4, #0
 800af56:	ee09 9a90 	vmov	s19, r9
 800af5a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 800af5e:	4627      	mov	r7, r4
 800af60:	4691      	mov	r9, r2
 800af62:	46a0      	mov	r8, r4
 800af64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af68:	191a      	adds	r2, r3, r4
 800af6a:	f853 b004 	ldr.w	fp, [r3, r4]
 800af6e:	7913      	ldrb	r3, [r2, #4]
 800af70:	2b12      	cmp	r3, #18
 800af72:	d01a      	beq.n	800afaa <get_longest_member_name+0x2b2>
 800af74:	2500      	movs	r5, #0
 800af76:	4658      	mov	r0, fp
 800af78:	f7f5 f942 	bl	8000200 <strlen>
 800af7c:	4405      	add	r5, r0
 800af7e:	3501      	adds	r5, #1
 800af80:	42af      	cmp	r7, r5
 800af82:	f108 0801 	add.w	r8, r8, #1
 800af86:	bf38      	it	cc
 800af88:	462f      	movcc	r7, r5
 800af8a:	45b0      	cmp	r8, r6
 800af8c:	f104 043c 	add.w	r4, r4, #60	@ 0x3c
 800af90:	d3e8      	bcc.n	800af64 <get_longest_member_name+0x26c>
 800af92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af94:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800af98:	689d      	ldr	r5, [r3, #8]
 800af9a:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
 800af9e:	ee19 9a90 	vmov	r9, s19
 800afa2:	e7a9      	b.n	800aef8 <get_longest_member_name+0x200>
 800afa4:	9b03      	ldr	r3, [sp, #12]
 800afa6:	689d      	ldr	r5, [r3, #8]
 800afa8:	e6be      	b.n	800ad28 <get_longest_member_name+0x30>
 800afaa:	4b28      	ldr	r3, [pc, #160]	@ (800b04c <get_longest_member_name+0x354>)
 800afac:	68d0      	ldr	r0, [r2, #12]
 800afae:	6819      	ldr	r1, [r3, #0]
 800afb0:	f002 fb7c 	bl	800d6ac <get_message_typesupport_handle>
 800afb4:	6843      	ldr	r3, [r0, #4]
 800afb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800afb8:	6899      	ldr	r1, [r3, #8]
 800afba:	2900      	cmp	r1, #0
 800afbc:	d04b      	beq.n	800b056 <get_longest_member_name+0x35e>
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	9416      	str	r4, [sp, #88]	@ 0x58
 800afc2:	2600      	movs	r6, #0
 800afc4:	ee0a ba90 	vmov	s21, fp
 800afc8:	46b2      	mov	sl, r6
 800afca:	46b3      	mov	fp, r6
 800afcc:	460c      	mov	r4, r1
 800afce:	461d      	mov	r5, r3
 800afd0:	19aa      	adds	r2, r5, r6
 800afd2:	59ab      	ldr	r3, [r5, r6]
 800afd4:	f892 c004 	ldrb.w	ip, [r2, #4]
 800afd8:	f1bc 0f12 	cmp.w	ip, #18
 800afdc:	4618      	mov	r0, r3
 800afde:	d012      	beq.n	800b006 <get_longest_member_name+0x30e>
 800afe0:	f7f5 f90e 	bl	8000200 <strlen>
 800afe4:	3001      	adds	r0, #1
 800afe6:	4583      	cmp	fp, r0
 800afe8:	f10a 0a01 	add.w	sl, sl, #1
 800afec:	bf38      	it	cc
 800afee:	4683      	movcc	fp, r0
 800aff0:	45a2      	cmp	sl, r4
 800aff2:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 800aff6:	d3eb      	bcc.n	800afd0 <get_longest_member_name+0x2d8>
 800aff8:	465d      	mov	r5, fp
 800affa:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800affc:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b000:	ee1a ba90 	vmov	fp, s21
 800b004:	e7b7      	b.n	800af76 <get_longest_member_name+0x27e>
 800b006:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b008:	4b10      	ldr	r3, [pc, #64]	@ (800b04c <get_longest_member_name+0x354>)
 800b00a:	68d0      	ldr	r0, [r2, #12]
 800b00c:	6819      	ldr	r1, [r3, #0]
 800b00e:	f002 fb4d 	bl	800d6ac <get_message_typesupport_handle>
 800b012:	6840      	ldr	r0, [r0, #4]
 800b014:	f7ff fe70 	bl	800acf8 <get_longest_member_name>
 800b018:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b01a:	4605      	mov	r5, r0
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7f5 f8ef 	bl	8000200 <strlen>
 800b022:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b024:	4405      	add	r5, r0
 800b026:	3501      	adds	r5, #1
 800b028:	689c      	ldr	r4, [r3, #8]
 800b02a:	45ab      	cmp	fp, r5
 800b02c:	f10a 0a01 	add.w	sl, sl, #1
 800b030:	bf38      	it	cc
 800b032:	46ab      	movcc	fp, r5
 800b034:	4554      	cmp	r4, sl
 800b036:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 800b03a:	d9dd      	bls.n	800aff8 <get_longest_member_name+0x300>
 800b03c:	691d      	ldr	r5, [r3, #16]
 800b03e:	e7c7      	b.n	800afd0 <get_longest_member_name+0x2d8>
 800b040:	9b07      	ldr	r3, [sp, #28]
 800b042:	689d      	ldr	r5, [r3, #8]
 800b044:	e6e5      	b.n	800ae12 <get_longest_member_name+0x11a>
 800b046:	9b08      	ldr	r3, [sp, #32]
 800b048:	689d      	ldr	r5, [r3, #8]
 800b04a:	e71c      	b.n	800ae86 <get_longest_member_name+0x18e>
 800b04c:	20000384 	.word	0x20000384
 800b050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b052:	689d      	ldr	r5, [r3, #8]
 800b054:	e74f      	b.n	800aef6 <get_longest_member_name+0x1fe>
 800b056:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800b05a:	e78b      	b.n	800af74 <get_longest_member_name+0x27c>

0800b05c <micro_ros_utilities_get_dynamic_size>:
 800b05c:	b084      	sub	sp, #16
 800b05e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b062:	ed2d 8b02 	vpush	{d8}
 800b066:	b09f      	sub	sp, #124	@ 0x7c
 800b068:	ac2b      	add	r4, sp, #172	@ 0xac
 800b06a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800b06e:	4619      	mov	r1, r3
 800b070:	2900      	cmp	r1, #0
 800b072:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800b074:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 800b076:	941c      	str	r4, [sp, #112]	@ 0x70
 800b078:	bf08      	it	eq
 800b07a:	2105      	moveq	r1, #5
 800b07c:	2a00      	cmp	r2, #0
 800b07e:	bf08      	it	eq
 800b080:	2205      	moveq	r2, #5
 800b082:	2b00      	cmp	r3, #0
 800b084:	bf08      	it	eq
 800b086:	2314      	moveq	r3, #20
 800b088:	9318      	str	r3, [sp, #96]	@ 0x60
 800b08a:	4b78      	ldr	r3, [pc, #480]	@ (800b26c <micro_ros_utilities_get_dynamic_size+0x210>)
 800b08c:	911a      	str	r1, [sp, #104]	@ 0x68
 800b08e:	6819      	ldr	r1, [r3, #0]
 800b090:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b092:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b094:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800b096:	931d      	str	r3, [sp, #116]	@ 0x74
 800b098:	9219      	str	r2, [sp, #100]	@ 0x64
 800b09a:	f002 fb07 	bl	800d6ac <get_message_typesupport_handle>
 800b09e:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b0a8:	9315      	str	r3, [sp, #84]	@ 0x54
 800b0aa:	e9cb 3301 	strd	r3, r3, [fp, #4]
 800b0ae:	b9c4      	cbnz	r4, 800b0e2 <micro_ros_utilities_get_dynamic_size+0x86>
 800b0b0:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800b0b4:	ab04      	add	r3, sp, #16
 800b0b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b0ba:	ab1e      	add	r3, sp, #120	@ 0x78
 800b0bc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b0c0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b0c4:	ab18      	add	r3, sp, #96	@ 0x60
 800b0c6:	4621      	mov	r1, r4
 800b0c8:	cb0c      	ldmia	r3, {r2, r3}
 800b0ca:	4650      	mov	r0, sl
 800b0cc:	f7ff fa10 	bl	800a4f0 <handle_message_memory.constprop.4>
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	b01f      	add	sp, #124	@ 0x7c
 800b0d6:	ecbd 8b02 	vpop	{d8}
 800b0da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0de:	b004      	add	sp, #16
 800b0e0:	4770      	bx	lr
 800b0e2:	f8da 5008 	ldr.w	r5, [sl, #8]
 800b0e6:	9508      	str	r5, [sp, #32]
 800b0e8:	b30d      	cbz	r5, 800b12e <micro_ros_utilities_get_dynamic_size+0xd2>
 800b0ea:	4698      	mov	r8, r3
 800b0ec:	9308      	str	r3, [sp, #32]
 800b0ee:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800b0f2:	461f      	mov	r7, r3
 800b0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	eb03 0208 	add.w	r2, r3, r8
 800b0fc:	f853 6008 	ldr.w	r6, [r3, r8]
 800b100:	7913      	ldrb	r3, [r2, #4]
 800b102:	2b12      	cmp	r3, #18
 800b104:	d030      	beq.n	800b168 <micro_ros_utilities_get_dynamic_size+0x10c>
 800b106:	f04f 0900 	mov.w	r9, #0
 800b10a:	4630      	mov	r0, r6
 800b10c:	f7f5 f878 	bl	8000200 <strlen>
 800b110:	9b08      	ldr	r3, [sp, #32]
 800b112:	4448      	add	r0, r9
 800b114:	3001      	adds	r0, #1
 800b116:	4283      	cmp	r3, r0
 800b118:	f107 0701 	add.w	r7, r7, #1
 800b11c:	bf38      	it	cc
 800b11e:	4603      	movcc	r3, r0
 800b120:	42af      	cmp	r7, r5
 800b122:	9308      	str	r3, [sp, #32]
 800b124:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 800b128:	d3e4      	bcc.n	800b0f4 <micro_ros_utilities_get_dynamic_size+0x98>
 800b12a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800b12e:	9908      	ldr	r1, [sp, #32]
 800b130:	ac10      	add	r4, sp, #64	@ 0x40
 800b132:	4620      	mov	r0, r4
 800b134:	f003 f862 	bl	800e1fc <micro_ros_string_utilities_init_with_size>
 800b138:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b13c:	ab04      	add	r3, sp, #16
 800b13e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800b142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b146:	ab1e      	add	r3, sp, #120	@ 0x78
 800b148:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b14c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b150:	ac18      	add	r4, sp, #96	@ 0x60
 800b152:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b156:	2100      	movs	r1, #0
 800b158:	4650      	mov	r0, sl
 800b15a:	f7ff f9c9 	bl	800a4f0 <handle_message_memory.constprop.4>
 800b15e:	4604      	mov	r4, r0
 800b160:	4658      	mov	r0, fp
 800b162:	f003 f8a9 	bl	800e2b8 <micro_ros_string_utilities_destroy>
 800b166:	e7b4      	b.n	800b0d2 <micro_ros_utilities_get_dynamic_size+0x76>
 800b168:	4b40      	ldr	r3, [pc, #256]	@ (800b26c <micro_ros_utilities_get_dynamic_size+0x210>)
 800b16a:	68d0      	ldr	r0, [r2, #12]
 800b16c:	6819      	ldr	r1, [r3, #0]
 800b16e:	f002 fa9d 	bl	800d6ac <get_message_typesupport_handle>
 800b172:	6843      	ldr	r3, [r0, #4]
 800b174:	930a      	str	r3, [sp, #40]	@ 0x28
 800b176:	689d      	ldr	r5, [r3, #8]
 800b178:	b33d      	cbz	r5, 800b1ca <micro_ros_utilities_get_dynamic_size+0x16e>
 800b17a:	f04f 0a00 	mov.w	sl, #0
 800b17e:	ee08 6a10 	vmov	s16, r6
 800b182:	970c      	str	r7, [sp, #48]	@ 0x30
 800b184:	46d1      	mov	r9, sl
 800b186:	4657      	mov	r7, sl
 800b188:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800b18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	eb03 020a 	add.w	r2, r3, sl
 800b194:	f853 800a 	ldr.w	r8, [r3, sl]
 800b198:	7913      	ldrb	r3, [r2, #4]
 800b19a:	2b12      	cmp	r3, #18
 800b19c:	d018      	beq.n	800b1d0 <micro_ros_utilities_get_dynamic_size+0x174>
 800b19e:	2400      	movs	r4, #0
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	f7f5 f82d 	bl	8000200 <strlen>
 800b1a6:	4404      	add	r4, r0
 800b1a8:	3401      	adds	r4, #1
 800b1aa:	45a1      	cmp	r9, r4
 800b1ac:	f107 0701 	add.w	r7, r7, #1
 800b1b0:	bf38      	it	cc
 800b1b2:	46a1      	movcc	r9, r4
 800b1b4:	42af      	cmp	r7, r5
 800b1b6:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800b1ba:	d3e7      	bcc.n	800b18c <micro_ros_utilities_get_dynamic_size+0x130>
 800b1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1be:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800b1c2:	ee18 6a10 	vmov	r6, s16
 800b1c6:	689d      	ldr	r5, [r3, #8]
 800b1c8:	e79f      	b.n	800b10a <micro_ros_utilities_get_dynamic_size+0xae>
 800b1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1cc:	689d      	ldr	r5, [r3, #8]
 800b1ce:	e79a      	b.n	800b106 <micro_ros_utilities_get_dynamic_size+0xaa>
 800b1d0:	4b26      	ldr	r3, [pc, #152]	@ (800b26c <micro_ros_utilities_get_dynamic_size+0x210>)
 800b1d2:	68d0      	ldr	r0, [r2, #12]
 800b1d4:	6819      	ldr	r1, [r3, #0]
 800b1d6:	f002 fa69 	bl	800d6ac <get_message_typesupport_handle>
 800b1da:	6843      	ldr	r3, [r0, #4]
 800b1dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1de:	6899      	ldr	r1, [r3, #8]
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	d040      	beq.n	800b266 <micro_ros_utilities_get_dynamic_size+0x20a>
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	970e      	str	r7, [sp, #56]	@ 0x38
 800b1e8:	2500      	movs	r5, #0
 800b1ea:	ee08 8a90 	vmov	s17, r8
 800b1ee:	462e      	mov	r6, r5
 800b1f0:	46a8      	mov	r8, r5
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	461c      	mov	r4, r3
 800b1f6:	1962      	adds	r2, r4, r5
 800b1f8:	5963      	ldr	r3, [r4, r5]
 800b1fa:	f892 c004 	ldrb.w	ip, [r2, #4]
 800b1fe:	f1bc 0f12 	cmp.w	ip, #18
 800b202:	4618      	mov	r0, r3
 800b204:	d012      	beq.n	800b22c <micro_ros_utilities_get_dynamic_size+0x1d0>
 800b206:	f7f4 fffb 	bl	8000200 <strlen>
 800b20a:	3001      	adds	r0, #1
 800b20c:	4580      	cmp	r8, r0
 800b20e:	f106 0601 	add.w	r6, r6, #1
 800b212:	bf38      	it	cc
 800b214:	4680      	movcc	r8, r0
 800b216:	42be      	cmp	r6, r7
 800b218:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b21c:	d3eb      	bcc.n	800b1f6 <micro_ros_utilities_get_dynamic_size+0x19a>
 800b21e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b220:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800b222:	689d      	ldr	r5, [r3, #8]
 800b224:	4644      	mov	r4, r8
 800b226:	ee18 8a90 	vmov	r8, s17
 800b22a:	e7b9      	b.n	800b1a0 <micro_ros_utilities_get_dynamic_size+0x144>
 800b22c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b22e:	4b0f      	ldr	r3, [pc, #60]	@ (800b26c <micro_ros_utilities_get_dynamic_size+0x210>)
 800b230:	68d0      	ldr	r0, [r2, #12]
 800b232:	6819      	ldr	r1, [r3, #0]
 800b234:	f002 fa3a 	bl	800d6ac <get_message_typesupport_handle>
 800b238:	6840      	ldr	r0, [r0, #4]
 800b23a:	f7ff fd5d 	bl	800acf8 <get_longest_member_name>
 800b23e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b240:	4604      	mov	r4, r0
 800b242:	4618      	mov	r0, r3
 800b244:	f7f4 ffdc 	bl	8000200 <strlen>
 800b248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b24a:	4404      	add	r4, r0
 800b24c:	3401      	adds	r4, #1
 800b24e:	689f      	ldr	r7, [r3, #8]
 800b250:	45a0      	cmp	r8, r4
 800b252:	f106 0601 	add.w	r6, r6, #1
 800b256:	bf38      	it	cc
 800b258:	46a0      	movcc	r8, r4
 800b25a:	42b7      	cmp	r7, r6
 800b25c:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b260:	d9dd      	bls.n	800b21e <micro_ros_utilities_get_dynamic_size+0x1c2>
 800b262:	691c      	ldr	r4, [r3, #16]
 800b264:	e7c7      	b.n	800b1f6 <micro_ros_utilities_get_dynamic_size+0x19a>
 800b266:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b268:	689d      	ldr	r5, [r3, #8]
 800b26a:	e798      	b.n	800b19e <micro_ros_utilities_get_dynamic_size+0x142>
 800b26c:	20000384 	.word	0x20000384

0800b270 <micro_ros_utilities_create_message_memory>:
 800b270:	b082      	sub	sp, #8
 800b272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b276:	ed2d 8b04 	vpush	{d8-d9}
 800b27a:	b0a1      	sub	sp, #132	@ 0x84
 800b27c:	ac2e      	add	r4, sp, #184	@ 0xb8
 800b27e:	ae31      	add	r6, sp, #196	@ 0xc4
 800b280:	e884 000c 	stmia.w	r4, {r2, r3}
 800b284:	4605      	mov	r5, r0
 800b286:	468b      	mov	fp, r1
 800b288:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800b28c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b290:	ab2e      	add	r3, sp, #184	@ 0xb8
 800b292:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b294:	4628      	mov	r0, r5
 800b296:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800b298:	f7ff fee0 	bl	800b05c <micro_ros_utilities_get_dynamic_size>
 800b29c:	4603      	mov	r3, r0
 800b29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2a0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800b2a2:	941e      	str	r4, [sp, #120]	@ 0x78
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	bf08      	it	eq
 800b2a8:	2305      	moveq	r3, #5
 800b2aa:	931c      	str	r3, [sp, #112]	@ 0x70
 800b2ac:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	bf08      	it	eq
 800b2b2:	2305      	moveq	r3, #5
 800b2b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b2b6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bf08      	it	eq
 800b2bc:	2314      	moveq	r3, #20
 800b2be:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2c0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800b2c2:	931d      	str	r3, [sp, #116]	@ 0x74
 800b2c4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800b2c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b2c8:	4b81      	ldr	r3, [pc, #516]	@ (800b4d0 <micro_ros_utilities_create_message_memory+0x260>)
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	6819      	ldr	r1, [r3, #0]
 800b2ce:	f002 f9ed 	bl	800d6ac <get_message_typesupport_handle>
 800b2d2:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b2dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b2de:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800b2e2:	bb1c      	cbnz	r4, 800b32c <micro_ros_utilities_create_message_memory+0xbc>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b2ea:	4658      	mov	r0, fp
 800b2ec:	f00f fec5 	bl	801b07a <memset>
 800b2f0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b2f4:	ab04      	add	r3, sp, #16
 800b2f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b2fa:	ab20      	add	r3, sp, #128	@ 0x80
 800b2fc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b300:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b304:	ac1a      	add	r4, sp, #104	@ 0x68
 800b306:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b30a:	4659      	mov	r1, fp
 800b30c:	4650      	mov	r0, sl
 800b30e:	f7ff fab9 	bl	800a884 <handle_message_memory.constprop.2>
 800b312:	4604      	mov	r4, r0
 800b314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b316:	1b18      	subs	r0, r3, r4
 800b318:	fab0 f080 	clz	r0, r0
 800b31c:	0940      	lsrs	r0, r0, #5
 800b31e:	b021      	add	sp, #132	@ 0x84
 800b320:	ecbd 8b04 	vpop	{d8-d9}
 800b324:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b328:	b002      	add	sp, #8
 800b32a:	4770      	bx	lr
 800b32c:	f8da 5008 	ldr.w	r5, [sl, #8]
 800b330:	9509      	str	r5, [sp, #36]	@ 0x24
 800b332:	b32d      	cbz	r5, 800b380 <micro_ros_utilities_create_message_memory+0x110>
 800b334:	ee08 ba10 	vmov	s16, fp
 800b338:	4699      	mov	r9, r3
 800b33a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b33c:	461f      	mov	r7, r3
 800b33e:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800b342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	eb03 0209 	add.w	r2, r3, r9
 800b34a:	f853 6009 	ldr.w	r6, [r3, r9]
 800b34e:	7913      	ldrb	r3, [r2, #4]
 800b350:	2b12      	cmp	r3, #18
 800b352:	d03a      	beq.n	800b3ca <micro_ros_utilities_create_message_memory+0x15a>
 800b354:	f04f 0a00 	mov.w	sl, #0
 800b358:	4630      	mov	r0, r6
 800b35a:	f7f4 ff51 	bl	8000200 <strlen>
 800b35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b360:	4450      	add	r0, sl
 800b362:	3001      	adds	r0, #1
 800b364:	4283      	cmp	r3, r0
 800b366:	f107 0701 	add.w	r7, r7, #1
 800b36a:	bf38      	it	cc
 800b36c:	4603      	movcc	r3, r0
 800b36e:	42af      	cmp	r7, r5
 800b370:	9309      	str	r3, [sp, #36]	@ 0x24
 800b372:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800b376:	d3e4      	bcc.n	800b342 <micro_ros_utilities_create_message_memory+0xd2>
 800b378:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800b37c:	ee18 ba10 	vmov	fp, s16
 800b380:	ac12      	add	r4, sp, #72	@ 0x48
 800b382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b384:	4620      	mov	r0, r4
 800b386:	f002 ff39 	bl	800e1fc <micro_ros_string_utilities_init_with_size>
 800b38a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800b38e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800b392:	f8da 200c 	ldr.w	r2, [sl, #12]
 800b396:	2100      	movs	r1, #0
 800b398:	4658      	mov	r0, fp
 800b39a:	f00f fe6e 	bl	801b07a <memset>
 800b39e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800b3a2:	ab04      	add	r3, sp, #16
 800b3a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b3a8:	ab20      	add	r3, sp, #128	@ 0x80
 800b3aa:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800b3ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b3b2:	ac1a      	add	r4, sp, #104	@ 0x68
 800b3b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 800b3b8:	4659      	mov	r1, fp
 800b3ba:	4650      	mov	r0, sl
 800b3bc:	f7ff fa62 	bl	800a884 <handle_message_memory.constprop.2>
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	f002 ff78 	bl	800e2b8 <micro_ros_string_utilities_destroy>
 800b3c8:	e7a4      	b.n	800b314 <micro_ros_utilities_create_message_memory+0xa4>
 800b3ca:	4b41      	ldr	r3, [pc, #260]	@ (800b4d0 <micro_ros_utilities_create_message_memory+0x260>)
 800b3cc:	68d0      	ldr	r0, [r2, #12]
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	f002 f96c 	bl	800d6ac <get_message_typesupport_handle>
 800b3d4:	6843      	ldr	r3, [r0, #4]
 800b3d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3d8:	689d      	ldr	r5, [r3, #8]
 800b3da:	b33d      	cbz	r5, 800b42c <micro_ros_utilities_create_message_memory+0x1bc>
 800b3dc:	f04f 0b00 	mov.w	fp, #0
 800b3e0:	ee08 6a90 	vmov	s17, r6
 800b3e4:	970e      	str	r7, [sp, #56]	@ 0x38
 800b3e6:	46da      	mov	sl, fp
 800b3e8:	465f      	mov	r7, fp
 800b3ea:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800b3ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	eb03 020b 	add.w	r2, r3, fp
 800b3f6:	f853 600b 	ldr.w	r6, [r3, fp]
 800b3fa:	7913      	ldrb	r3, [r2, #4]
 800b3fc:	2b12      	cmp	r3, #18
 800b3fe:	d018      	beq.n	800b432 <micro_ros_utilities_create_message_memory+0x1c2>
 800b400:	2400      	movs	r4, #0
 800b402:	4630      	mov	r0, r6
 800b404:	f7f4 fefc 	bl	8000200 <strlen>
 800b408:	4404      	add	r4, r0
 800b40a:	3401      	adds	r4, #1
 800b40c:	45a2      	cmp	sl, r4
 800b40e:	f107 0701 	add.w	r7, r7, #1
 800b412:	bf38      	it	cc
 800b414:	46a2      	movcc	sl, r4
 800b416:	42af      	cmp	r7, r5
 800b418:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 800b41c:	d3e7      	bcc.n	800b3ee <micro_ros_utilities_create_message_memory+0x17e>
 800b41e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b420:	e9dd 790e 	ldrd	r7, r9, [sp, #56]	@ 0x38
 800b424:	ee18 6a90 	vmov	r6, s17
 800b428:	689d      	ldr	r5, [r3, #8]
 800b42a:	e795      	b.n	800b358 <micro_ros_utilities_create_message_memory+0xe8>
 800b42c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b42e:	689d      	ldr	r5, [r3, #8]
 800b430:	e790      	b.n	800b354 <micro_ros_utilities_create_message_memory+0xe4>
 800b432:	4b27      	ldr	r3, [pc, #156]	@ (800b4d0 <micro_ros_utilities_create_message_memory+0x260>)
 800b434:	68d0      	ldr	r0, [r2, #12]
 800b436:	6819      	ldr	r1, [r3, #0]
 800b438:	f002 f938 	bl	800d6ac <get_message_typesupport_handle>
 800b43c:	6843      	ldr	r3, [r0, #4]
 800b43e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b440:	6899      	ldr	r1, [r3, #8]
 800b442:	2900      	cmp	r1, #0
 800b444:	d040      	beq.n	800b4c8 <micro_ros_utilities_create_message_memory+0x258>
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	9710      	str	r7, [sp, #64]	@ 0x40
 800b44a:	2500      	movs	r5, #0
 800b44c:	ee09 6a10 	vmov	s18, r6
 800b450:	46a9      	mov	r9, r5
 800b452:	462e      	mov	r6, r5
 800b454:	460f      	mov	r7, r1
 800b456:	461c      	mov	r4, r3
 800b458:	1962      	adds	r2, r4, r5
 800b45a:	5963      	ldr	r3, [r4, r5]
 800b45c:	f892 c004 	ldrb.w	ip, [r2, #4]
 800b460:	f1bc 0f12 	cmp.w	ip, #18
 800b464:	4618      	mov	r0, r3
 800b466:	d012      	beq.n	800b48e <micro_ros_utilities_create_message_memory+0x21e>
 800b468:	f7f4 feca 	bl	8000200 <strlen>
 800b46c:	3001      	adds	r0, #1
 800b46e:	4286      	cmp	r6, r0
 800b470:	f109 0901 	add.w	r9, r9, #1
 800b474:	bf38      	it	cc
 800b476:	4606      	movcc	r6, r0
 800b478:	45b9      	cmp	r9, r7
 800b47a:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b47e:	d3eb      	bcc.n	800b458 <micro_ros_utilities_create_message_memory+0x1e8>
 800b480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b482:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b484:	689d      	ldr	r5, [r3, #8]
 800b486:	4634      	mov	r4, r6
 800b488:	ee19 6a10 	vmov	r6, s18
 800b48c:	e7b9      	b.n	800b402 <micro_ros_utilities_create_message_memory+0x192>
 800b48e:	9311      	str	r3, [sp, #68]	@ 0x44
 800b490:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d0 <micro_ros_utilities_create_message_memory+0x260>)
 800b492:	68d0      	ldr	r0, [r2, #12]
 800b494:	6819      	ldr	r1, [r3, #0]
 800b496:	f002 f909 	bl	800d6ac <get_message_typesupport_handle>
 800b49a:	6840      	ldr	r0, [r0, #4]
 800b49c:	f7ff fc2c 	bl	800acf8 <get_longest_member_name>
 800b4a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f4 feab 	bl	8000200 <strlen>
 800b4aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4ac:	4404      	add	r4, r0
 800b4ae:	3401      	adds	r4, #1
 800b4b0:	689f      	ldr	r7, [r3, #8]
 800b4b2:	42a6      	cmp	r6, r4
 800b4b4:	f109 0901 	add.w	r9, r9, #1
 800b4b8:	bf38      	it	cc
 800b4ba:	4626      	movcc	r6, r4
 800b4bc:	454f      	cmp	r7, r9
 800b4be:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800b4c2:	d9dd      	bls.n	800b480 <micro_ros_utilities_create_message_memory+0x210>
 800b4c4:	691c      	ldr	r4, [r3, #16]
 800b4c6:	e7c7      	b.n	800b458 <micro_ros_utilities_create_message_memory+0x1e8>
 800b4c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4ca:	689d      	ldr	r5, [r3, #8]
 800b4cc:	e798      	b.n	800b400 <micro_ros_utilities_create_message_memory+0x190>
 800b4ce:	bf00      	nop
 800b4d0:	20000384 	.word	0x20000384

0800b4d4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800b4d4:	4b04      	ldr	r3, [pc, #16]	@ (800b4e8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	b10a      	cbz	r2, 800b4de <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800b4da:	4803      	ldr	r0, [pc, #12]	@ (800b4e8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b4dc:	4770      	bx	lr
 800b4de:	4a03      	ldr	r2, [pc, #12]	@ (800b4ec <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800b4e0:	4801      	ldr	r0, [pc, #4]	@ (800b4e8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b4e2:	6812      	ldr	r2, [r2, #0]
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	4770      	bx	lr
 800b4e8:	200000dc 	.word	0x200000dc
 800b4ec:	20000380 	.word	0x20000380

0800b4f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800b4f0:	4a02      	ldr	r2, [pc, #8]	@ (800b4fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xc>)
 800b4f2:	4b03      	ldr	r3, [pc, #12]	@ (800b500 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x10>)
 800b4f4:	6812      	ldr	r2, [r2, #0]
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20000380 	.word	0x20000380
 800b500:	200000dc 	.word	0x200000dc

0800b504 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800b504:	4b04      	ldr	r3, [pc, #16]	@ (800b518 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	b10a      	cbz	r2, 800b50e <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa>
 800b50a:	4803      	ldr	r0, [pc, #12]	@ (800b518 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800b50c:	4770      	bx	lr
 800b50e:	4a03      	ldr	r2, [pc, #12]	@ (800b51c <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x18>)
 800b510:	4801      	ldr	r0, [pc, #4]	@ (800b518 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800b512:	6812      	ldr	r2, [r2, #0]
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	4770      	bx	lr
 800b518:	200000f0 	.word	0x200000f0
 800b51c:	20000380 	.word	0x20000380

0800b520 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800b520:	4b04      	ldr	r3, [pc, #16]	@ (800b534 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b522:	4805      	ldr	r0, [pc, #20]	@ (800b538 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800b524:	4905      	ldr	r1, [pc, #20]	@ (800b53c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x1c>)
 800b526:	4a06      	ldr	r2, [pc, #24]	@ (800b540 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x20>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6003      	str	r3, [r0, #0]
 800b52c:	600b      	str	r3, [r1, #0]
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20000380 	.word	0x20000380
 800b538:	2000010c 	.word	0x2000010c
 800b53c:	20000118 	.word	0x20000118
 800b540:	200000f0 	.word	0x200000f0

0800b544 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800b544:	4b04      	ldr	r3, [pc, #16]	@ (800b558 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	b10a      	cbz	r2, 800b54e <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800b54a:	4803      	ldr	r0, [pc, #12]	@ (800b558 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b54c:	4770      	bx	lr
 800b54e:	4a03      	ldr	r2, [pc, #12]	@ (800b55c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800b550:	4801      	ldr	r0, [pc, #4]	@ (800b558 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b552:	6812      	ldr	r2, [r2, #0]
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	4770      	bx	lr
 800b558:	2000012c 	.word	0x2000012c
 800b55c:	20000380 	.word	0x20000380

0800b560 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800b560:	4a02      	ldr	r2, [pc, #8]	@ (800b56c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800b562:	4b03      	ldr	r3, [pc, #12]	@ (800b570 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800b564:	6812      	ldr	r2, [r2, #0]
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	20000380 	.word	0x20000380
 800b570:	2000012c 	.word	0x2000012c

0800b574 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__size_function__CommandVelocity__cmd_vel>:
 800b574:	2006      	movs	r0, #6
 800b576:	4770      	bx	lr

0800b578 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_const_function__CommandVelocity__cmd_vel>:
 800b578:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop

0800b580 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__fetch_function__CommandVelocity__cmd_vel>:
 800b580:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b584:	680b      	ldr	r3, [r1, #0]
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop

0800b58c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__assign_function__CommandVelocity__cmd_vel>:
 800b58c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b590:	6813      	ldr	r3, [r2, #0]
 800b592:	600b      	str	r3, [r1, #0]
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop

0800b598 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_init_function>:
 800b598:	f007 bdc6 	b.w	8013128 <nereo_interfaces__msg__CommandVelocity__init>

0800b59c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_fini_function>:
 800b59c:	f007 bdc8 	b.w	8013130 <nereo_interfaces__msg__CommandVelocity__fini>

0800b5a0 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_function__CommandVelocity__cmd_vel>:
 800b5a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop

0800b5a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800b5a8:	4b04      	ldr	r3, [pc, #16]	@ (800b5bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	b10a      	cbz	r2, 800b5b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800b5ae:	4803      	ldr	r0, [pc, #12]	@ (800b5bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b5b0:	4770      	bx	lr
 800b5b2:	4a03      	ldr	r2, [pc, #12]	@ (800b5c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800b5b4:	4801      	ldr	r0, [pc, #4]	@ (800b5bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800b5b6:	6812      	ldr	r2, [r2, #0]
 800b5b8:	601a      	str	r2, [r3, #0]
 800b5ba:	4770      	bx	lr
 800b5bc:	20000174 	.word	0x20000174
 800b5c0:	20000384 	.word	0x20000384

0800b5c4 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_init_function>:
 800b5c4:	f007 bdb6 	b.w	8013134 <nereo_interfaces__srv__SetNavigationMode_Request__init>

0800b5c8 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_fini_function>:
 800b5c8:	f007 bdb8 	b.w	801313c <nereo_interfaces__srv__SetNavigationMode_Request__fini>

0800b5cc <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_init_function>:
 800b5cc:	f007 bdb8 	b.w	8013140 <nereo_interfaces__srv__SetNavigationMode_Response__init>

0800b5d0 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_fini_function>:
 800b5d0:	f007 bdba 	b.w	8013148 <nereo_interfaces__srv__SetNavigationMode_Response__fini>

0800b5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800b5d4:	4b04      	ldr	r3, [pc, #16]	@ (800b5e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	b10a      	cbz	r2, 800b5de <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0xa>
 800b5da:	4803      	ldr	r0, [pc, #12]	@ (800b5e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b5dc:	4770      	bx	lr
 800b5de:	4a03      	ldr	r2, [pc, #12]	@ (800b5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800b5e0:	4801      	ldr	r0, [pc, #4]	@ (800b5e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800b5e2:	6812      	ldr	r2, [r2, #0]
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	4770      	bx	lr
 800b5e8:	200001bc 	.word	0x200001bc
 800b5ec:	20000384 	.word	0x20000384

0800b5f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800b5f0:	4b04      	ldr	r3, [pc, #16]	@ (800b604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	b10a      	cbz	r2, 800b5fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0xa>
 800b5f6:	4803      	ldr	r0, [pc, #12]	@ (800b604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800b5f8:	4770      	bx	lr
 800b5fa:	4a03      	ldr	r2, [pc, #12]	@ (800b608 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x18>)
 800b5fc:	4801      	ldr	r0, [pc, #4]	@ (800b604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800b5fe:	6812      	ldr	r2, [r2, #0]
 800b600:	601a      	str	r2, [r3, #0]
 800b602:	4770      	bx	lr
 800b604:	20000240 	.word	0x20000240
 800b608:	20000384 	.word	0x20000384

0800b60c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800b60c:	4b13      	ldr	r3, [pc, #76]	@ (800b65c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	b132      	cbz	r2, 800b620 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	689a      	ldr	r2, [r3, #8]
 800b616:	b152      	cbz	r2, 800b62e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x22>
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	b182      	cbz	r2, 800b63e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x32>
 800b61c:	480f      	ldr	r0, [pc, #60]	@ (800b65c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800b61e:	4770      	bx	lr
 800b620:	4a0f      	ldr	r2, [pc, #60]	@ (800b660 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800b622:	6812      	ldr	r2, [r2, #0]
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	689a      	ldr	r2, [r3, #8]
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	d1f4      	bne.n	800b618 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xc>
 800b62e:	4a0d      	ldr	r2, [pc, #52]	@ (800b664 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x58>)
 800b630:	6811      	ldr	r1, [r2, #0]
 800b632:	b179      	cbz	r1, 800b654 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x48>
 800b634:	6852      	ldr	r2, [r2, #4]
 800b636:	609a      	str	r2, [r3, #8]
 800b638:	68da      	ldr	r2, [r3, #12]
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	d1ee      	bne.n	800b61c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x10>
 800b63e:	4a0a      	ldr	r2, [pc, #40]	@ (800b668 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x5c>)
 800b640:	6811      	ldr	r1, [r2, #0]
 800b642:	b119      	cbz	r1, 800b64c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x40>
 800b644:	6852      	ldr	r2, [r2, #4]
 800b646:	4805      	ldr	r0, [pc, #20]	@ (800b65c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800b648:	60da      	str	r2, [r3, #12]
 800b64a:	4770      	bx	lr
 800b64c:	4904      	ldr	r1, [pc, #16]	@ (800b660 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800b64e:	6809      	ldr	r1, [r1, #0]
 800b650:	6011      	str	r1, [r2, #0]
 800b652:	e7f7      	b.n	800b644 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x38>
 800b654:	4902      	ldr	r1, [pc, #8]	@ (800b660 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800b656:	6809      	ldr	r1, [r1, #0]
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	e7eb      	b.n	800b634 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x28>
 800b65c:	2000025c 	.word	0x2000025c
 800b660:	20000384 	.word	0x20000384
 800b664:	200001bc 	.word	0x200001bc
 800b668:	20000240 	.word	0x20000240

0800b66c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thruster_pwms>:
 800b66c:	2008      	movs	r0, #8
 800b66e:	4770      	bx	lr

0800b670 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thruster_pwms>:
 800b670:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop

0800b678 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thruster_pwms>:
 800b678:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800b67c:	8013      	strh	r3, [r2, #0]
 800b67e:	4770      	bx	lr

0800b680 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thruster_pwms>:
 800b680:	8813      	ldrh	r3, [r2, #0]
 800b682:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800b686:	4770      	bx	lr

0800b688 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800b688:	f007 bd60 	b.w	801314c <nereo_interfaces__msg__ThrusterStatuses__init>

0800b68c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800b68c:	f007 bd62 	b.w	8013154 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800b690 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thruster_pwms>:
 800b690:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop

0800b698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800b698:	4b04      	ldr	r3, [pc, #16]	@ (800b6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	b10a      	cbz	r2, 800b6a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800b69e:	4803      	ldr	r0, [pc, #12]	@ (800b6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b6a0:	4770      	bx	lr
 800b6a2:	4a03      	ldr	r2, [pc, #12]	@ (800b6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800b6a4:	4801      	ldr	r0, [pc, #4]	@ (800b6ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	4770      	bx	lr
 800b6ac:	200002a4 	.word	0x200002a4
 800b6b0:	20000384 	.word	0x20000384

0800b6b4 <_CommandVelocity__max_serialized_size>:
 800b6b4:	b508      	push	{r3, lr}
 800b6b6:	2104      	movs	r1, #4
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	f004 fd7d 	bl	80101b8 <ucdr_alignment>
 800b6be:	3018      	adds	r0, #24
 800b6c0:	bd08      	pop	{r3, pc}
 800b6c2:	bf00      	nop

0800b6c4 <get_serialized_size_nereo_interfaces__msg__CommandVelocity>:
 800b6c4:	b138      	cbz	r0, 800b6d6 <get_serialized_size_nereo_interfaces__msg__CommandVelocity+0x12>
 800b6c6:	b508      	push	{r3, lr}
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	2104      	movs	r1, #4
 800b6ce:	f004 fd73 	bl	80101b8 <ucdr_alignment>
 800b6d2:	3018      	adds	r0, #24
 800b6d4:	bd08      	pop	{r3, pc}
 800b6d6:	4770      	bx	lr

0800b6d8 <_CommandVelocity__cdr_deserialize>:
 800b6d8:	b111      	cbz	r1, 800b6e0 <_CommandVelocity__cdr_deserialize+0x8>
 800b6da:	2206      	movs	r2, #6
 800b6dc:	f003 b828 	b.w	800e730 <ucdr_deserialize_array_float>
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	4770      	bx	lr

0800b6e4 <_CommandVelocity__cdr_serialize>:
 800b6e4:	468c      	mov	ip, r1
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	b118      	cbz	r0, 800b6f2 <_CommandVelocity__cdr_serialize+0xe>
 800b6ea:	2206      	movs	r2, #6
 800b6ec:	4660      	mov	r0, ip
 800b6ee:	f002 bfcb 	b.w	800e688 <ucdr_serialize_array_float>
 800b6f2:	4770      	bx	lr

0800b6f4 <_CommandVelocity__get_serialized_size>:
 800b6f4:	b130      	cbz	r0, 800b704 <_CommandVelocity__get_serialized_size+0x10>
 800b6f6:	b508      	push	{r3, lr}
 800b6f8:	2104      	movs	r1, #4
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	f004 fd5c 	bl	80101b8 <ucdr_alignment>
 800b700:	3018      	adds	r0, #24
 800b702:	bd08      	pop	{r3, pc}
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop

0800b708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800b708:	4800      	ldr	r0, [pc, #0]	@ (800b70c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x4>)
 800b70a:	4770      	bx	lr
 800b70c:	200002b0 	.word	0x200002b0

0800b710 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800b710:	4800      	ldr	r0, [pc, #0]	@ (800b714 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x4>)
 800b712:	4770      	bx	lr
 800b714:	200002f4 	.word	0x200002f4

0800b718 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800b718:	4800      	ldr	r0, [pc, #0]	@ (800b71c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x4>)
 800b71a:	4770      	bx	lr
 800b71c:	20000300 	.word	0x20000300

0800b720 <_SetNavigationMode_Request__max_serialized_size>:
 800b720:	b508      	push	{r3, lr}
 800b722:	2101      	movs	r1, #1
 800b724:	2000      	movs	r0, #0
 800b726:	f004 fd47 	bl	80101b8 <ucdr_alignment>
 800b72a:	3001      	adds	r0, #1
 800b72c:	bd08      	pop	{r3, pc}
 800b72e:	bf00      	nop

0800b730 <_SetNavigationMode_Request__cdr_deserialize>:
 800b730:	b109      	cbz	r1, 800b736 <_SetNavigationMode_Request__cdr_deserialize+0x6>
 800b732:	f003 b941 	b.w	800e9b8 <ucdr_deserialize_uint8_t>
 800b736:	4608      	mov	r0, r1
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop

0800b73c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request>:
 800b73c:	b138      	cbz	r0, 800b74e <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request+0x12>
 800b73e:	b508      	push	{r3, lr}
 800b740:	460b      	mov	r3, r1
 800b742:	4618      	mov	r0, r3
 800b744:	2101      	movs	r1, #1
 800b746:	f004 fd37 	bl	80101b8 <ucdr_alignment>
 800b74a:	3001      	adds	r0, #1
 800b74c:	bd08      	pop	{r3, pc}
 800b74e:	4770      	bx	lr

0800b750 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response>:
 800b750:	b180      	cbz	r0, 800b774 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response+0x24>
 800b752:	b538      	push	{r3, r4, r5, lr}
 800b754:	460d      	mov	r5, r1
 800b756:	4628      	mov	r0, r5
 800b758:	2101      	movs	r1, #1
 800b75a:	f004 fd2d 	bl	80101b8 <ucdr_alignment>
 800b75e:	1c6b      	adds	r3, r5, #1
 800b760:	181c      	adds	r4, r3, r0
 800b762:	2101      	movs	r1, #1
 800b764:	4620      	mov	r0, r4
 800b766:	f004 fd27 	bl	80101b8 <ucdr_alignment>
 800b76a:	f1c5 0501 	rsb	r5, r5, #1
 800b76e:	4428      	add	r0, r5
 800b770:	4420      	add	r0, r4
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop

0800b778 <_SetNavigationMode_Request__cdr_serialize>:
 800b778:	460a      	mov	r2, r1
 800b77a:	b118      	cbz	r0, 800b784 <_SetNavigationMode_Request__cdr_serialize+0xc>
 800b77c:	7801      	ldrb	r1, [r0, #0]
 800b77e:	4610      	mov	r0, r2
 800b780:	f003 b904 	b.w	800e98c <ucdr_serialize_uint8_t>
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop

0800b788 <_SetNavigationMode_Response__cdr_deserialize>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	460c      	mov	r4, r1
 800b78c:	b141      	cbz	r1, 800b7a0 <_SetNavigationMode_Response__cdr_deserialize+0x18>
 800b78e:	4605      	mov	r5, r0
 800b790:	f003 f8e4 	bl	800e95c <ucdr_deserialize_bool>
 800b794:	1c61      	adds	r1, r4, #1
 800b796:	4628      	mov	r0, r5
 800b798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b79c:	f003 b90c 	b.w	800e9b8 <ucdr_deserialize_uint8_t>
 800b7a0:	4608      	mov	r0, r1
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}

0800b7a4 <_SetNavigationMode_Response__cdr_serialize>:
 800b7a4:	b160      	cbz	r0, 800b7c0 <_SetNavigationMode_Response__cdr_serialize+0x1c>
 800b7a6:	b538      	push	{r3, r4, r5, lr}
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	7801      	ldrb	r1, [r0, #0]
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f003 f8be 	bl	800e930 <ucdr_serialize_bool>
 800b7b4:	7861      	ldrb	r1, [r4, #1]
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7bc:	f003 b8e6 	b.w	800e98c <ucdr_serialize_uint8_t>
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop

0800b7c4 <_SetNavigationMode_Request__get_serialized_size>:
 800b7c4:	b130      	cbz	r0, 800b7d4 <_SetNavigationMode_Request__get_serialized_size+0x10>
 800b7c6:	b508      	push	{r3, lr}
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	f004 fcf4 	bl	80101b8 <ucdr_alignment>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	bd08      	pop	{r3, pc}
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop

0800b7d8 <_SetNavigationMode_Response__get_serialized_size>:
 800b7d8:	b160      	cbz	r0, 800b7f4 <_SetNavigationMode_Response__get_serialized_size+0x1c>
 800b7da:	b510      	push	{r4, lr}
 800b7dc:	2101      	movs	r1, #1
 800b7de:	2000      	movs	r0, #0
 800b7e0:	f004 fcea 	bl	80101b8 <ucdr_alignment>
 800b7e4:	1c44      	adds	r4, r0, #1
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f004 fce5 	bl	80101b8 <ucdr_alignment>
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	4420      	add	r0, r4
 800b7f2:	bd10      	pop	{r4, pc}
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop

0800b7f8 <_SetNavigationMode_Response__max_serialized_size>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f004 fcdb 	bl	80101b8 <ucdr_alignment>
 800b802:	1c44      	adds	r4, r0, #1
 800b804:	2101      	movs	r1, #1
 800b806:	4620      	mov	r0, r4
 800b808:	f004 fcd6 	bl	80101b8 <ucdr_alignment>
 800b80c:	3001      	adds	r0, #1
 800b80e:	4420      	add	r0, r4
 800b810:	bd10      	pop	{r4, pc}
 800b812:	bf00      	nop

0800b814 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800b814:	4800      	ldr	r0, [pc, #0]	@ (800b818 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x4>)
 800b816:	4770      	bx	lr
 800b818:	200002e8 	.word	0x200002e8

0800b81c <_ThrusterStatuses__max_serialized_size>:
 800b81c:	b508      	push	{r3, lr}
 800b81e:	2102      	movs	r1, #2
 800b820:	2000      	movs	r0, #0
 800b822:	f004 fcc9 	bl	80101b8 <ucdr_alignment>
 800b826:	3010      	adds	r0, #16
 800b828:	bd08      	pop	{r3, pc}
 800b82a:	bf00      	nop

0800b82c <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800b82c:	b138      	cbz	r0, 800b83e <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0x12>
 800b82e:	b508      	push	{r3, lr}
 800b830:	460b      	mov	r3, r1
 800b832:	4618      	mov	r0, r3
 800b834:	2102      	movs	r1, #2
 800b836:	f004 fcbf 	bl	80101b8 <ucdr_alignment>
 800b83a:	3010      	adds	r0, #16
 800b83c:	bd08      	pop	{r3, pc}
 800b83e:	4770      	bx	lr

0800b840 <_ThrusterStatuses__cdr_deserialize>:
 800b840:	b111      	cbz	r1, 800b848 <_ThrusterStatuses__cdr_deserialize+0x8>
 800b842:	2208      	movs	r2, #8
 800b844:	f002 beca 	b.w	800e5dc <ucdr_deserialize_array_uint16_t>
 800b848:	4608      	mov	r0, r1
 800b84a:	4770      	bx	lr

0800b84c <_ThrusterStatuses__cdr_serialize>:
 800b84c:	468c      	mov	ip, r1
 800b84e:	4601      	mov	r1, r0
 800b850:	b118      	cbz	r0, 800b85a <_ThrusterStatuses__cdr_serialize+0xe>
 800b852:	2208      	movs	r2, #8
 800b854:	4660      	mov	r0, ip
 800b856:	f002 be6b 	b.w	800e530 <ucdr_serialize_array_uint16_t>
 800b85a:	4770      	bx	lr

0800b85c <_ThrusterStatuses__get_serialized_size>:
 800b85c:	b130      	cbz	r0, 800b86c <_ThrusterStatuses__get_serialized_size+0x10>
 800b85e:	b508      	push	{r3, lr}
 800b860:	2102      	movs	r1, #2
 800b862:	2000      	movs	r0, #0
 800b864:	f004 fca8 	bl	80101b8 <ucdr_alignment>
 800b868:	3010      	adds	r0, #16
 800b86a:	bd08      	pop	{r3, pc}
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop

0800b870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800b870:	4800      	ldr	r0, [pc, #0]	@ (800b874 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800b872:	4770      	bx	lr
 800b874:	20000344 	.word	0x20000344

0800b878 <rcl_get_zero_initialized_publisher>:
 800b878:	4b01      	ldr	r3, [pc, #4]	@ (800b880 <rcl_get_zero_initialized_publisher+0x8>)
 800b87a:	6818      	ldr	r0, [r3, #0]
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	0801c738 	.word	0x0801c738

0800b884 <rcl_publisher_init>:
 800b884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b888:	b088      	sub	sp, #32
 800b88a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	d069      	beq.n	800b964 <rcl_publisher_init+0xe0>
 800b890:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800b894:	4604      	mov	r4, r0
 800b896:	4648      	mov	r0, r9
 800b898:	460e      	mov	r6, r1
 800b89a:	4690      	mov	r8, r2
 800b89c:	461f      	mov	r7, r3
 800b89e:	f001 f8b7 	bl	800ca10 <rcutils_allocator_is_valid>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d05e      	beq.n	800b964 <rcl_publisher_init+0xe0>
 800b8a6:	2c00      	cmp	r4, #0
 800b8a8:	d05c      	beq.n	800b964 <rcl_publisher_init+0xe0>
 800b8aa:	f8d4 a000 	ldr.w	sl, [r4]
 800b8ae:	f1ba 0f00 	cmp.w	sl, #0
 800b8b2:	d004      	beq.n	800b8be <rcl_publisher_init+0x3a>
 800b8b4:	2764      	movs	r7, #100	@ 0x64
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	b008      	add	sp, #32
 800b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f008 f8d0 	bl	8013a64 <rcl_node_is_valid>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d052      	beq.n	800b96e <rcl_publisher_init+0xea>
 800b8c8:	f1b8 0f00 	cmp.w	r8, #0
 800b8cc:	d04a      	beq.n	800b964 <rcl_publisher_init+0xe0>
 800b8ce:	2f00      	cmp	r7, #0
 800b8d0:	d048      	beq.n	800b964 <rcl_publisher_init+0xe0>
 800b8d2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800b8d6:	aa07      	add	r2, sp, #28
 800b8d8:	9205      	str	r2, [sp, #20]
 800b8da:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800b8de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800b8e6:	f8cd a01c 	str.w	sl, [sp, #28]
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	e899 000c 	ldmia.w	r9, {r2, r3}
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f008 f90b 	bl	8013b0c <rcl_node_resolve_name>
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d14f      	bne.n	800b99c <rcl_publisher_init+0x118>
 800b8fc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b8fe:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b900:	20c8      	movs	r0, #200	@ 0xc8
 800b902:	4798      	blx	r3
 800b904:	6020      	str	r0, [r4, #0]
 800b906:	2800      	cmp	r0, #0
 800b908:	d04e      	beq.n	800b9a8 <rcl_publisher_init+0x124>
 800b90a:	4630      	mov	r0, r6
 800b90c:	f008 f8cc 	bl	8013aa8 <rcl_node_get_rmw_handle>
 800b910:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	9a07      	ldr	r2, [sp, #28]
 800b918:	6827      	ldr	r7, [r4, #0]
 800b91a:	462b      	mov	r3, r5
 800b91c:	4641      	mov	r1, r8
 800b91e:	f001 f985 	bl	800cc2c <rmw_create_publisher>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800b928:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b92c:	b370      	cbz	r0, 800b98c <rcl_publisher_init+0x108>
 800b92e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800b932:	f001 fa59 	bl	800cde8 <rmw_publisher_get_actual_qos>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	4607      	mov	r7, r0
 800b93a:	b9d0      	cbnz	r0, 800b972 <rcl_publisher_init+0xee>
 800b93c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800b940:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800b944:	4629      	mov	r1, r5
 800b946:	2270      	movs	r2, #112	@ 0x70
 800b948:	4618      	mov	r0, r3
 800b94a:	f00f fbfe 	bl	801b14a <memcpy>
 800b94e:	6832      	ldr	r2, [r6, #0]
 800b950:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b954:	9807      	ldr	r0, [sp, #28]
 800b956:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b958:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b95a:	4798      	blx	r3
 800b95c:	4638      	mov	r0, r7
 800b95e:	b008      	add	sp, #32
 800b960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b964:	270b      	movs	r7, #11
 800b966:	4638      	mov	r0, r7
 800b968:	b008      	add	sp, #32
 800b96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96e:	27c8      	movs	r7, #200	@ 0xc8
 800b970:	e7a1      	b.n	800b8b6 <rcl_publisher_init+0x32>
 800b972:	b18b      	cbz	r3, 800b998 <rcl_publisher_init+0x114>
 800b974:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b978:	b142      	cbz	r2, 800b98c <rcl_publisher_init+0x108>
 800b97a:	4630      	mov	r0, r6
 800b97c:	f008 f894 	bl	8013aa8 <rcl_node_get_rmw_handle>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b986:	f001 fa3f 	bl	800ce08 <rmw_destroy_publisher>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b98e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b990:	4618      	mov	r0, r3
 800b992:	4790      	blx	r2
 800b994:	2300      	movs	r3, #0
 800b996:	6023      	str	r3, [r4, #0]
 800b998:	2701      	movs	r7, #1
 800b99a:	e7db      	b.n	800b954 <rcl_publisher_init+0xd0>
 800b99c:	2867      	cmp	r0, #103	@ 0x67
 800b99e:	d0d9      	beq.n	800b954 <rcl_publisher_init+0xd0>
 800b9a0:	2869      	cmp	r0, #105	@ 0x69
 800b9a2:	d003      	beq.n	800b9ac <rcl_publisher_init+0x128>
 800b9a4:	280a      	cmp	r0, #10
 800b9a6:	d1f7      	bne.n	800b998 <rcl_publisher_init+0x114>
 800b9a8:	270a      	movs	r7, #10
 800b9aa:	e7d3      	b.n	800b954 <rcl_publisher_init+0xd0>
 800b9ac:	2767      	movs	r7, #103	@ 0x67
 800b9ae:	e7d1      	b.n	800b954 <rcl_publisher_init+0xd0>

0800b9b0 <rcl_publisher_get_default_options>:
 800b9b0:	b570      	push	{r4, r5, r6, lr}
 800b9b2:	4d14      	ldr	r5, [pc, #80]	@ (800ba04 <rcl_publisher_get_default_options+0x54>)
 800b9b4:	4914      	ldr	r1, [pc, #80]	@ (800ba08 <rcl_publisher_get_default_options+0x58>)
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	2250      	movs	r2, #80	@ 0x50
 800b9bc:	4628      	mov	r0, r5
 800b9be:	f00f fbc4 	bl	801b14a <memcpy>
 800b9c2:	a802      	add	r0, sp, #8
 800b9c4:	f001 f816 	bl	800c9f4 <rcutils_get_default_allocator>
 800b9c8:	f10d 0c08 	add.w	ip, sp, #8
 800b9cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9d0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b9d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9d8:	466e      	mov	r6, sp
 800b9da:	f8dc 3000 	ldr.w	r3, [ip]
 800b9de:	f8ce 3000 	str.w	r3, [lr]
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f001 f8a4 	bl	800cb30 <rmw_get_default_publisher_options>
 800b9e8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b9ec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b9f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800b9f4:	2270      	movs	r2, #112	@ 0x70
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f00f fba6 	bl	801b14a <memcpy>
 800b9fe:	4620      	mov	r0, r4
 800ba00:	b008      	add	sp, #32
 800ba02:	bd70      	pop	{r4, r5, r6, pc}
 800ba04:	20010d70 	.word	0x20010d70
 800ba08:	0801c740 	.word	0x0801c740

0800ba0c <rcl_publish>:
 800ba0c:	b1f8      	cbz	r0, 800ba4e <rcl_publish+0x42>
 800ba0e:	6803      	ldr	r3, [r0, #0]
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	b1b3      	cbz	r3, 800ba44 <rcl_publish+0x38>
 800ba16:	4616      	mov	r6, r2
 800ba18:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ba1c:	b192      	cbz	r2, 800ba44 <rcl_publish+0x38>
 800ba1e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ba22:	460d      	mov	r5, r1
 800ba24:	f007 fc44 	bl	80132b0 <rcl_context_is_valid>
 800ba28:	b160      	cbz	r0, 800ba44 <rcl_publish+0x38>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ba30:	b140      	cbz	r0, 800ba44 <rcl_publish+0x38>
 800ba32:	b155      	cbz	r5, 800ba4a <rcl_publish+0x3e>
 800ba34:	4632      	mov	r2, r6
 800ba36:	4629      	mov	r1, r5
 800ba38:	f001 f898 	bl	800cb6c <rmw_publish>
 800ba3c:	3800      	subs	r0, #0
 800ba3e:	bf18      	it	ne
 800ba40:	2001      	movne	r0, #1
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	200b      	movs	r0, #11
 800ba4c:	bd70      	pop	{r4, r5, r6, pc}
 800ba4e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ba52:	4770      	bx	lr

0800ba54 <rcl_publisher_is_valid>:
 800ba54:	b1a0      	cbz	r0, 800ba80 <rcl_publisher_is_valid+0x2c>
 800ba56:	6803      	ldr	r3, [r0, #0]
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	b173      	cbz	r3, 800ba7c <rcl_publisher_is_valid+0x28>
 800ba5e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ba62:	b15a      	cbz	r2, 800ba7c <rcl_publisher_is_valid+0x28>
 800ba64:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ba68:	f007 fc22 	bl	80132b0 <rcl_context_is_valid>
 800ba6c:	b130      	cbz	r0, 800ba7c <rcl_publisher_is_valid+0x28>
 800ba6e:	6823      	ldr	r3, [r4, #0]
 800ba70:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ba74:	3800      	subs	r0, #0
 800ba76:	bf18      	it	ne
 800ba78:	2001      	movne	r0, #1
 800ba7a:	bd10      	pop	{r4, pc}
 800ba7c:	2000      	movs	r0, #0
 800ba7e:	bd10      	pop	{r4, pc}
 800ba80:	2000      	movs	r0, #0
 800ba82:	4770      	bx	lr

0800ba84 <rcl_publisher_is_valid_except_context>:
 800ba84:	b130      	cbz	r0, 800ba94 <rcl_publisher_is_valid_except_context+0x10>
 800ba86:	6800      	ldr	r0, [r0, #0]
 800ba88:	b120      	cbz	r0, 800ba94 <rcl_publisher_is_valid_except_context+0x10>
 800ba8a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ba8e:	3800      	subs	r0, #0
 800ba90:	bf18      	it	ne
 800ba92:	2001      	movne	r0, #1
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop

0800ba98 <_rclc_check_for_new_data>:
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d046      	beq.n	800bb2a <_rclc_check_for_new_data+0x92>
 800ba9c:	b510      	push	{r4, lr}
 800ba9e:	7802      	ldrb	r2, [r0, #0]
 800baa0:	b084      	sub	sp, #16
 800baa2:	4603      	mov	r3, r0
 800baa4:	2a0a      	cmp	r2, #10
 800baa6:	d842      	bhi.n	800bb2e <_rclc_check_for_new_data+0x96>
 800baa8:	e8df f002 	tbb	[pc, r2]
 800baac:	14181212 	.word	0x14181212
 800bab0:	06060614 	.word	0x06060614
 800bab4:	2e1a      	.short	0x2e1a
 800bab6:	16          	.byte	0x16
 800bab7:	00          	.byte	0x00
 800bab8:	6a0a      	ldr	r2, [r1, #32]
 800baba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800babc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bac0:	2000      	movs	r0, #0
 800bac2:	1a12      	subs	r2, r2, r0
 800bac4:	bf18      	it	ne
 800bac6:	2201      	movne	r2, #1
 800bac8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bacc:	b004      	add	sp, #16
 800bace:	bd10      	pop	{r4, pc}
 800bad0:	680a      	ldr	r2, [r1, #0]
 800bad2:	e7f2      	b.n	800baba <_rclc_check_for_new_data+0x22>
 800bad4:	698a      	ldr	r2, [r1, #24]
 800bad6:	e7f0      	b.n	800baba <_rclc_check_for_new_data+0x22>
 800bad8:	688a      	ldr	r2, [r1, #8]
 800bada:	e7ee      	b.n	800baba <_rclc_check_for_new_data+0x22>
 800badc:	690a      	ldr	r2, [r1, #16]
 800bade:	e7ec      	b.n	800baba <_rclc_check_for_new_data+0x22>
 800bae0:	685c      	ldr	r4, [r3, #4]
 800bae2:	4608      	mov	r0, r1
 800bae4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800bae8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800baec:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800baf0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800bafa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800bafe:	f104 0110 	add.w	r1, r4, #16
 800bb02:	f009 fd81 	bl	8015608 <rcl_action_client_wait_set_get_entities_ready>
 800bb06:	e7e1      	b.n	800bacc <_rclc_check_for_new_data+0x34>
 800bb08:	685c      	ldr	r4, [r3, #4]
 800bb0a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800bb0e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800bb12:	e9cd 3200 	strd	r3, r2, [sp]
 800bb16:	4608      	mov	r0, r1
 800bb18:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800bb1c:	f104 0220 	add.w	r2, r4, #32
 800bb20:	f104 0110 	add.w	r1, r4, #16
 800bb24:	f009 ff88 	bl	8015a38 <rcl_action_server_wait_set_get_entities_ready>
 800bb28:	e7d0      	b.n	800bacc <_rclc_check_for_new_data+0x34>
 800bb2a:	200b      	movs	r0, #11
 800bb2c:	4770      	bx	lr
 800bb2e:	2001      	movs	r0, #1
 800bb30:	e7cc      	b.n	800bacc <_rclc_check_for_new_data+0x34>
 800bb32:	bf00      	nop

0800bb34 <_rclc_take_new_data>:
 800bb34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb36:	b09b      	sub	sp, #108	@ 0x6c
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f000 8088 	beq.w	800bc4e <_rclc_take_new_data+0x11a>
 800bb3e:	7803      	ldrb	r3, [r0, #0]
 800bb40:	4604      	mov	r4, r0
 800bb42:	2b0a      	cmp	r3, #10
 800bb44:	f200 8167 	bhi.w	800be16 <_rclc_take_new_data+0x2e2>
 800bb48:	e8df f003 	tbb	[pc, r3]
 800bb4c:	44152d2d 	.word	0x44152d2d
 800bb50:	19191944 	.word	0x19191944
 800bb54:	065a      	.short	0x065a
 800bb56:	15          	.byte	0x15
 800bb57:	00          	.byte	0x00
 800bb58:	6840      	ldr	r0, [r0, #4]
 800bb5a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f040 80b2 	bne.w	800bcc8 <_rclc_take_new_data+0x194>
 800bb64:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	f040 80e4 	bne.w	800bd36 <_rclc_take_new_data+0x202>
 800bb6e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d16f      	bne.n	800bc56 <_rclc_take_new_data+0x122>
 800bb76:	2500      	movs	r5, #0
 800bb78:	4628      	mov	r0, r5
 800bb7a:	b01b      	add	sp, #108	@ 0x6c
 800bb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb7e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bb80:	6a0b      	ldr	r3, [r1, #32]
 800bb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0f5      	beq.n	800bb76 <_rclc_take_new_data+0x42>
 800bb8a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bb8e:	f104 0110 	add.w	r1, r4, #16
 800bb92:	f008 fa17 	bl	8013fc4 <rcl_take_request>
 800bb96:	4605      	mov	r5, r0
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0ec      	beq.n	800bb76 <_rclc_take_new_data+0x42>
 800bb9c:	f240 2359 	movw	r3, #601	@ 0x259
 800bba0:	4298      	cmp	r0, r3
 800bba2:	d013      	beq.n	800bbcc <_rclc_take_new_data+0x98>
 800bba4:	e029      	b.n	800bbfa <_rclc_take_new_data+0xc6>
 800bba6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bba8:	680b      	ldr	r3, [r1, #0]
 800bbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0e1      	beq.n	800bb76 <_rclc_take_new_data+0x42>
 800bbb2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	aa0a      	add	r2, sp, #40	@ 0x28
 800bbba:	f008 fb41 	bl	8014240 <rcl_take>
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d0d9      	beq.n	800bb78 <_rclc_take_new_data+0x44>
 800bbc4:	f240 1391 	movw	r3, #401	@ 0x191
 800bbc8:	4298      	cmp	r0, r3
 800bbca:	d116      	bne.n	800bbfa <_rclc_take_new_data+0xc6>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800bbd2:	e7d1      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800bbd4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800bbd6:	698b      	ldr	r3, [r1, #24]
 800bbd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d0ca      	beq.n	800bb76 <_rclc_take_new_data+0x42>
 800bbe0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800bbe4:	f104 0110 	add.w	r1, r4, #16
 800bbe8:	f007 faf2 	bl	80131d0 <rcl_take_response>
 800bbec:	4605      	mov	r5, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0c1      	beq.n	800bb76 <_rclc_take_new_data+0x42>
 800bbf2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bbf6:	4298      	cmp	r0, r3
 800bbf8:	d0be      	beq.n	800bb78 <_rclc_take_new_data+0x44>
 800bbfa:	f000 ff2d 	bl	800ca58 <rcutils_reset_error>
 800bbfe:	e7bb      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800bc00:	6840      	ldr	r0, [r0, #4]
 800bc02:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d17d      	bne.n	800bd06 <_rclc_take_new_data+0x1d2>
 800bc0a:	69c3      	ldr	r3, [r0, #28]
 800bc0c:	b11b      	cbz	r3, 800bc16 <_rclc_take_new_data+0xe2>
 800bc0e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d144      	bne.n	800bca0 <_rclc_take_new_data+0x16c>
 800bc16:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f040 80ac 	bne.w	800bd78 <_rclc_take_new_data+0x244>
 800bc20:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0a6      	beq.n	800bb76 <_rclc_take_new_data+0x42>
 800bc28:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800bc2a:	a90a      	add	r1, sp, #40	@ 0x28
 800bc2c:	3010      	adds	r0, #16
 800bc2e:	f009 fbc3 	bl	80153b8 <rcl_action_take_result_response>
 800bc32:	4605      	mov	r5, r0
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d1e0      	bne.n	800bbfa <_rclc_take_new_data+0xc6>
 800bc38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc3c:	6860      	ldr	r0, [r4, #4]
 800bc3e:	f00a f81f 	bl	8015c80 <rclc_action_find_handle_by_result_request_sequence_number>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d098      	beq.n	800bb78 <_rclc_take_new_data+0x44>
 800bc46:	2301      	movs	r3, #1
 800bc48:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800bc4c:	e794      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800bc4e:	250b      	movs	r5, #11
 800bc50:	4628      	mov	r0, r5
 800bc52:	b01b      	add	sp, #108	@ 0x6c
 800bc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc56:	ae04      	add	r6, sp, #16
 800bc58:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc5a:	3010      	adds	r0, #16
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	f009 fe1f 	bl	80158a0 <rcl_action_take_cancel_request>
 800bc62:	4605      	mov	r5, r0
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d1c8      	bne.n	800bbfa <_rclc_take_new_data+0xc6>
 800bc68:	6860      	ldr	r0, [r4, #4]
 800bc6a:	a90a      	add	r1, sp, #40	@ 0x28
 800bc6c:	f009 ffc6 	bl	8015bfc <rclc_action_find_goal_handle_by_uuid>
 800bc70:	4607      	mov	r7, r0
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f000 80bb 	beq.w	800bdee <_rclc_take_new_data+0x2ba>
 800bc78:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	f009 ff47 	bl	8015b10 <rcl_action_transition_goal_state>
 800bc82:	2803      	cmp	r0, #3
 800bc84:	4684      	mov	ip, r0
 800bc86:	f040 80a7 	bne.w	800bdd8 <_rclc_take_new_data+0x2a4>
 800bc8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bc8c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800bc90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc92:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bc96:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc9a:	f887 c008 	strb.w	ip, [r7, #8]
 800bc9e:	e76b      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800bca0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bca2:	3010      	adds	r0, #16
 800bca4:	f009 fc08 	bl	80154b8 <rcl_action_take_feedback>
 800bca8:	4605      	mov	r5, r0
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d1a5      	bne.n	800bbfa <_rclc_take_new_data+0xc6>
 800bcae:	6860      	ldr	r0, [r4, #4]
 800bcb0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bcb2:	f009 ffa3 	bl	8015bfc <rclc_action_find_goal_handle_by_uuid>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	f000 80a3 	beq.w	800be04 <_rclc_take_new_data+0x2d0>
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	6860      	ldr	r0, [r4, #4]
 800bcc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800bcc6:	e7a6      	b.n	800bc16 <_rclc_take_new_data+0xe2>
 800bcc8:	f009 ff72 	bl	8015bb0 <rclc_action_take_goal_handle>
 800bccc:	4606      	mov	r6, r0
 800bcce:	6860      	ldr	r0, [r4, #4]
 800bcd0:	2e00      	cmp	r6, #0
 800bcd2:	f43f af47 	beq.w	800bb64 <_rclc_take_new_data+0x30>
 800bcd6:	6070      	str	r0, [r6, #4]
 800bcd8:	69f2      	ldr	r2, [r6, #28]
 800bcda:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800bcde:	3010      	adds	r0, #16
 800bce0:	f009 fd26 	bl	8015730 <rcl_action_take_goal_request>
 800bce4:	4605      	mov	r5, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f040 808e 	bne.w	800be08 <_rclc_take_new_data+0x2d4>
 800bcec:	69f7      	ldr	r7, [r6, #28]
 800bcee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bcf0:	7235      	strb	r5, [r6, #8]
 800bcf2:	f8c6 0009 	str.w	r0, [r6, #9]
 800bcf6:	f8c6 100d 	str.w	r1, [r6, #13]
 800bcfa:	6860      	ldr	r0, [r4, #4]
 800bcfc:	f8c6 2011 	str.w	r2, [r6, #17]
 800bd00:	f8c6 3015 	str.w	r3, [r6, #21]
 800bd04:	e72e      	b.n	800bb64 <_rclc_take_new_data+0x30>
 800bd06:	aa04      	add	r2, sp, #16
 800bd08:	a90a      	add	r1, sp, #40	@ 0x28
 800bd0a:	3010      	adds	r0, #16
 800bd0c:	f009 fadc 	bl	80152c8 <rcl_action_take_goal_response>
 800bd10:	4605      	mov	r5, r0
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f47f af71 	bne.w	800bbfa <_rclc_take_new_data+0xc6>
 800bd18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd1c:	6860      	ldr	r0, [r4, #4]
 800bd1e:	f009 ff9d 	bl	8015c5c <rclc_action_find_handle_by_goal_request_sequence_number>
 800bd22:	b130      	cbz	r0, 800bd32 <_rclc_take_new_data+0x1fe>
 800bd24:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800bd28:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f880 2020 	strb.w	r2, [r0, #32]
 800bd32:	6860      	ldr	r0, [r4, #4]
 800bd34:	e769      	b.n	800bc0a <_rclc_take_new_data+0xd6>
 800bd36:	aa04      	add	r2, sp, #16
 800bd38:	3010      	adds	r0, #16
 800bd3a:	a90a      	add	r1, sp, #40	@ 0x28
 800bd3c:	f009 fd70 	bl	8015820 <rcl_action_take_result_request>
 800bd40:	4605      	mov	r5, r0
 800bd42:	2800      	cmp	r0, #0
 800bd44:	f47f af59 	bne.w	800bbfa <_rclc_take_new_data+0xc6>
 800bd48:	6860      	ldr	r0, [r4, #4]
 800bd4a:	a904      	add	r1, sp, #16
 800bd4c:	f009 ff56 	bl	8015bfc <rclc_action_find_goal_handle_by_uuid>
 800bd50:	4607      	mov	r7, r0
 800bd52:	b160      	cbz	r0, 800bd6e <_rclc_take_new_data+0x23a>
 800bd54:	ad0a      	add	r5, sp, #40	@ 0x28
 800bd56:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800bd5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bd5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd62:	f04f 0c02 	mov.w	ip, #2
 800bd66:	e886 0003 	stmia.w	r6, {r0, r1}
 800bd6a:	f887 c008 	strb.w	ip, [r7, #8]
 800bd6e:	6860      	ldr	r0, [r4, #4]
 800bd70:	2300      	movs	r3, #0
 800bd72:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800bd76:	e6fa      	b.n	800bb6e <_rclc_take_new_data+0x3a>
 800bd78:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800bd7c:	a90a      	add	r1, sp, #40	@ 0x28
 800bd7e:	3010      	adds	r0, #16
 800bd80:	f009 fb5a 	bl	8015438 <rcl_action_take_cancel_response>
 800bd84:	4605      	mov	r5, r0
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f47f af37 	bne.w	800bbfa <_rclc_take_new_data+0xc6>
 800bd8c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bd90:	6860      	ldr	r0, [r4, #4]
 800bd92:	f009 ff87 	bl	8015ca4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800bd96:	4606      	mov	r6, r0
 800bd98:	6860      	ldr	r0, [r4, #4]
 800bd9a:	2e00      	cmp	r6, #0
 800bd9c:	f43f af40 	beq.w	800bc20 <_rclc_take_new_data+0xec>
 800bda0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bda2:	2701      	movs	r7, #1
 800bda4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f43f af3a 	beq.w	800bc20 <_rclc_take_new_data+0xec>
 800bdac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bdae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800bdb2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800bdb6:	f009 ff21 	bl	8015bfc <rclc_action_find_goal_handle_by_uuid>
 800bdba:	b138      	cbz	r0, 800bdcc <_rclc_take_new_data+0x298>
 800bdbc:	6860      	ldr	r0, [r4, #4]
 800bdbe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bdc0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800bdc4:	3501      	adds	r5, #1
 800bdc6:	42ab      	cmp	r3, r5
 800bdc8:	d8f0      	bhi.n	800bdac <_rclc_take_new_data+0x278>
 800bdca:	e729      	b.n	800bc20 <_rclc_take_new_data+0xec>
 800bdcc:	6860      	ldr	r0, [r4, #4]
 800bdce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	42ab      	cmp	r3, r5
 800bdd4:	d8ea      	bhi.n	800bdac <_rclc_take_new_data+0x278>
 800bdd6:	e723      	b.n	800bc20 <_rclc_take_new_data+0xec>
 800bdd8:	ab06      	add	r3, sp, #24
 800bdda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bddc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bde0:	2103      	movs	r1, #3
 800bde2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bde6:	6860      	ldr	r0, [r4, #4]
 800bde8:	f009 ffd2 	bl	8015d90 <rclc_action_server_goal_cancel_reject>
 800bdec:	e6c4      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800bdee:	ab06      	add	r3, sp, #24
 800bdf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bdf6:	2102      	movs	r1, #2
 800bdf8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800bdfc:	6860      	ldr	r0, [r4, #4]
 800bdfe:	f009 ffc7 	bl	8015d90 <rclc_action_server_goal_cancel_reject>
 800be02:	e6b9      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800be04:	6860      	ldr	r0, [r4, #4]
 800be06:	e706      	b.n	800bc16 <_rclc_take_new_data+0xe2>
 800be08:	6860      	ldr	r0, [r4, #4]
 800be0a:	4631      	mov	r1, r6
 800be0c:	f009 fee0 	bl	8015bd0 <rclc_action_remove_used_goal_handle>
 800be10:	f000 fe22 	bl	800ca58 <rcutils_reset_error>
 800be14:	e6b0      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800be16:	2501      	movs	r5, #1
 800be18:	e6ae      	b.n	800bb78 <_rclc_take_new_data+0x44>
 800be1a:	bf00      	nop

0800be1c <_rclc_execute.part.0>:
 800be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be1e:	7803      	ldrb	r3, [r0, #0]
 800be20:	b087      	sub	sp, #28
 800be22:	4604      	mov	r4, r0
 800be24:	2b0a      	cmp	r3, #10
 800be26:	f200 8136 	bhi.w	800c096 <_rclc_execute.part.0+0x27a>
 800be2a:	e8df f003 	tbb	[pc, r3]
 800be2e:	435e      	.short	0x435e
 800be30:	06a1664f 	.word	0x06a1664f
 800be34:	6c1e0606 	.word	0x6c1e0606
 800be38:	59          	.byte	0x59
 800be39:	00          	.byte	0x00
 800be3a:	2b06      	cmp	r3, #6
 800be3c:	f000 8122 	beq.w	800c084 <_rclc_execute.part.0+0x268>
 800be40:	2b07      	cmp	r3, #7
 800be42:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800be44:	f040 8118 	bne.w	800c078 <_rclc_execute.part.0+0x25c>
 800be48:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800be4c:	6880      	ldr	r0, [r0, #8]
 800be4e:	4798      	blx	r3
 800be50:	f104 0110 	add.w	r1, r4, #16
 800be54:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800be56:	6860      	ldr	r0, [r4, #4]
 800be58:	f008 f8f4 	bl	8014044 <rcl_send_response>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d033      	beq.n	800bec8 <_rclc_execute.part.0+0xac>
 800be60:	9005      	str	r0, [sp, #20]
 800be62:	f000 fdf9 	bl	800ca58 <rcutils_reset_error>
 800be66:	9805      	ldr	r0, [sp, #20]
 800be68:	e02e      	b.n	800bec8 <_rclc_execute.part.0+0xac>
 800be6a:	6840      	ldr	r0, [r0, #4]
 800be6c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 8086 	beq.w	800bf82 <_rclc_execute.part.0+0x166>
 800be76:	2600      	movs	r6, #0
 800be78:	2701      	movs	r7, #1
 800be7a:	e004      	b.n	800be86 <_rclc_execute.part.0+0x6a>
 800be7c:	f009 fe72 	bl	8015b64 <rclc_action_send_result_request>
 800be80:	b998      	cbnz	r0, 800beaa <_rclc_execute.part.0+0x8e>
 800be82:	722f      	strb	r7, [r5, #8]
 800be84:	6860      	ldr	r0, [r4, #4]
 800be86:	f009 ff1f 	bl	8015cc8 <rclc_action_find_first_handle_with_goal_response>
 800be8a:	4605      	mov	r5, r0
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d077      	beq.n	800bf80 <_rclc_execute.part.0+0x164>
 800be90:	6863      	ldr	r3, [r4, #4]
 800be92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800be9a:	f885 6020 	strb.w	r6, [r5, #32]
 800be9e:	4798      	blx	r3
 800bea0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800bea4:	4628      	mov	r0, r5
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1e8      	bne.n	800be7c <_rclc_execute.part.0+0x60>
 800beaa:	6860      	ldr	r0, [r4, #4]
 800beac:	4629      	mov	r1, r5
 800beae:	f009 fe8f 	bl	8015bd0 <rclc_action_remove_used_goal_handle>
 800beb2:	e7e7      	b.n	800be84 <_rclc_execute.part.0+0x68>
 800beb4:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800beb8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	f000 80c9 	beq.w	800c054 <_rclc_execute.part.0+0x238>
 800bec2:	6880      	ldr	r0, [r0, #8]
 800bec4:	4798      	blx	r3
 800bec6:	2000      	movs	r0, #0
 800bec8:	b007      	add	sp, #28
 800beca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800becc:	6840      	ldr	r0, [r0, #4]
 800bece:	f008 fabb 	bl	8014448 <rcl_timer_call>
 800bed2:	f240 3321 	movw	r3, #801	@ 0x321
 800bed6:	4298      	cmp	r0, r3
 800bed8:	d004      	beq.n	800bee4 <_rclc_execute.part.0+0xc8>
 800beda:	2800      	cmp	r0, #0
 800bedc:	d0f4      	beq.n	800bec8 <_rclc_execute.part.0+0xac>
 800bede:	e7bf      	b.n	800be60 <_rclc_execute.part.0+0x44>
 800bee0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bee2:	4798      	blx	r3
 800bee4:	2000      	movs	r0, #0
 800bee6:	b007      	add	sp, #28
 800bee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800beea:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800beee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bef0:	b925      	cbnz	r5, 800befc <_rclc_execute.part.0+0xe0>
 800bef2:	4628      	mov	r0, r5
 800bef4:	4798      	blx	r3
 800bef6:	4628      	mov	r0, r5
 800bef8:	e7e6      	b.n	800bec8 <_rclc_execute.part.0+0xac>
 800befa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800befc:	68a0      	ldr	r0, [r4, #8]
 800befe:	4798      	blx	r3
 800bf00:	2000      	movs	r0, #0
 800bf02:	b007      	add	sp, #28
 800bf04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf06:	6840      	ldr	r0, [r0, #4]
 800bf08:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800bf0c:	bb3b      	cbnz	r3, 800bf5e <_rclc_execute.part.0+0x142>
 800bf0e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d07b      	beq.n	800c00e <_rclc_execute.part.0+0x1f2>
 800bf16:	f640 0634 	movw	r6, #2100	@ 0x834
 800bf1a:	2701      	movs	r7, #1
 800bf1c:	e007      	b.n	800bf2e <_rclc_execute.part.0+0x112>
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f009 feea 	bl	8015cf8 <rclc_action_server_response_goal_request>
 800bf24:	6860      	ldr	r0, [r4, #4]
 800bf26:	4629      	mov	r1, r5
 800bf28:	f009 fe52 	bl	8015bd0 <rclc_action_remove_used_goal_handle>
 800bf2c:	6860      	ldr	r0, [r4, #4]
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f009 fe7c 	bl	8015c2c <rclc_action_find_first_handle_by_status>
 800bf34:	4605      	mov	r5, r0
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d066      	beq.n	800c008 <_rclc_execute.part.0+0x1ec>
 800bf3a:	6863      	ldr	r3, [r4, #4]
 800bf3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	4798      	blx	r3
 800bf42:	42b0      	cmp	r0, r6
 800bf44:	f04f 0100 	mov.w	r1, #0
 800bf48:	d1e9      	bne.n	800bf1e <_rclc_execute.part.0+0x102>
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f009 fed3 	bl	8015cf8 <rclc_action_server_response_goal_request>
 800bf52:	722f      	strb	r7, [r5, #8]
 800bf54:	e7ea      	b.n	800bf2c <_rclc_execute.part.0+0x110>
 800bf56:	6848      	ldr	r0, [r1, #4]
 800bf58:	f009 fe3a 	bl	8015bd0 <rclc_action_remove_used_goal_handle>
 800bf5c:	6860      	ldr	r0, [r4, #4]
 800bf5e:	f009 fe71 	bl	8015c44 <rclc_action_find_first_terminated_handle>
 800bf62:	4601      	mov	r1, r0
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d1f6      	bne.n	800bf56 <_rclc_execute.part.0+0x13a>
 800bf68:	6860      	ldr	r0, [r4, #4]
 800bf6a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800bf6e:	e7ce      	b.n	800bf0e <_rclc_execute.part.0+0xf2>
 800bf70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800bf72:	6880      	ldr	r0, [r0, #8]
 800bf74:	f104 0110 	add.w	r1, r4, #16
 800bf78:	4798      	blx	r3
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	b007      	add	sp, #28
 800bf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf80:	6860      	ldr	r0, [r4, #4]
 800bf82:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800bf86:	b18b      	cbz	r3, 800bfac <_rclc_execute.part.0+0x190>
 800bf88:	68c5      	ldr	r5, [r0, #12]
 800bf8a:	b32d      	cbz	r5, 800bfd8 <_rclc_execute.part.0+0x1bc>
 800bf8c:	2600      	movs	r6, #0
 800bf8e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800bf92:	b143      	cbz	r3, 800bfa6 <_rclc_execute.part.0+0x18a>
 800bf94:	69c3      	ldr	r3, [r0, #28]
 800bf96:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800bf9a:	b123      	cbz	r3, 800bfa6 <_rclc_execute.part.0+0x18a>
 800bf9c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800bf9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	4798      	blx	r3
 800bfa4:	6860      	ldr	r0, [r4, #4]
 800bfa6:	682d      	ldr	r5, [r5, #0]
 800bfa8:	2d00      	cmp	r5, #0
 800bfaa:	d1f0      	bne.n	800bf8e <_rclc_execute.part.0+0x172>
 800bfac:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800bfb0:	b193      	cbz	r3, 800bfd8 <_rclc_execute.part.0+0x1bc>
 800bfb2:	68c5      	ldr	r5, [r0, #12]
 800bfb4:	b185      	cbz	r5, 800bfd8 <_rclc_execute.part.0+0x1bc>
 800bfb6:	2600      	movs	r6, #0
 800bfb8:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800bfbc:	b14b      	cbz	r3, 800bfd2 <_rclc_execute.part.0+0x1b6>
 800bfbe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bfc0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800bfc4:	b12b      	cbz	r3, 800bfd2 <_rclc_execute.part.0+0x1b6>
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800bfcc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bfce:	4798      	blx	r3
 800bfd0:	6860      	ldr	r0, [r4, #4]
 800bfd2:	682d      	ldr	r5, [r5, #0]
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	d1ef      	bne.n	800bfb8 <_rclc_execute.part.0+0x19c>
 800bfd8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d081      	beq.n	800bee4 <_rclc_execute.part.0+0xc8>
 800bfe0:	2700      	movs	r7, #0
 800bfe2:	e00b      	b.n	800bffc <_rclc_execute.part.0+0x1e0>
 800bfe4:	6863      	ldr	r3, [r4, #4]
 800bfe6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800bfe8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bfea:	6a1e      	ldr	r6, [r3, #32]
 800bfec:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800bff0:	47b0      	blx	r6
 800bff2:	6860      	ldr	r0, [r4, #4]
 800bff4:	4629      	mov	r1, r5
 800bff6:	f009 fdeb 	bl	8015bd0 <rclc_action_remove_used_goal_handle>
 800bffa:	6860      	ldr	r0, [r4, #4]
 800bffc:	f009 fe70 	bl	8015ce0 <rclc_action_find_first_handle_with_result_response>
 800c000:	4605      	mov	r5, r0
 800c002:	2800      	cmp	r0, #0
 800c004:	d1ee      	bne.n	800bfe4 <_rclc_execute.part.0+0x1c8>
 800c006:	e76d      	b.n	800bee4 <_rclc_execute.part.0+0xc8>
 800c008:	6860      	ldr	r0, [r4, #4]
 800c00a:	f880 5020 	strb.w	r5, [r0, #32]
 800c00e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c012:	2b00      	cmp	r3, #0
 800c014:	f43f af66 	beq.w	800bee4 <_rclc_execute.part.0+0xc8>
 800c018:	68c5      	ldr	r5, [r0, #12]
 800c01a:	b1b5      	cbz	r5, 800c04a <_rclc_execute.part.0+0x22e>
 800c01c:	2602      	movs	r6, #2
 800c01e:	e001      	b.n	800c024 <_rclc_execute.part.0+0x208>
 800c020:	682d      	ldr	r5, [r5, #0]
 800c022:	b195      	cbz	r5, 800c04a <_rclc_execute.part.0+0x22e>
 800c024:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d1f9      	bne.n	800c020 <_rclc_execute.part.0+0x204>
 800c02c:	69c3      	ldr	r3, [r0, #28]
 800c02e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c030:	4628      	mov	r0, r5
 800c032:	4798      	blx	r3
 800c034:	4603      	mov	r3, r0
 800c036:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c03a:	4628      	mov	r0, r5
 800c03c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c040:	b163      	cbz	r3, 800c05c <_rclc_execute.part.0+0x240>
 800c042:	f009 fe79 	bl	8015d38 <rclc_action_server_goal_cancel_accept>
 800c046:	6860      	ldr	r0, [r4, #4]
 800c048:	e7ea      	b.n	800c020 <_rclc_execute.part.0+0x204>
 800c04a:	2300      	movs	r3, #0
 800c04c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c050:	4618      	mov	r0, r3
 800c052:	e739      	b.n	800bec8 <_rclc_execute.part.0+0xac>
 800c054:	4628      	mov	r0, r5
 800c056:	4798      	blx	r3
 800c058:	4628      	mov	r0, r5
 800c05a:	e735      	b.n	800bec8 <_rclc_execute.part.0+0xac>
 800c05c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c05e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c062:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c06a:	6860      	ldr	r0, [r4, #4]
 800c06c:	2101      	movs	r1, #1
 800c06e:	f009 fe8f 	bl	8015d90 <rclc_action_server_goal_cancel_reject>
 800c072:	722e      	strb	r6, [r5, #8]
 800c074:	6860      	ldr	r0, [r4, #4]
 800c076:	e7d3      	b.n	800c020 <_rclc_execute.part.0+0x204>
 800c078:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c07a:	6880      	ldr	r0, [r0, #8]
 800c07c:	4798      	blx	r3
 800c07e:	f104 0110 	add.w	r1, r4, #16
 800c082:	e6e7      	b.n	800be54 <_rclc_execute.part.0+0x38>
 800c084:	f100 0110 	add.w	r1, r0, #16
 800c088:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c08a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c08c:	6880      	ldr	r0, [r0, #8]
 800c08e:	9105      	str	r1, [sp, #20]
 800c090:	4798      	blx	r3
 800c092:	9905      	ldr	r1, [sp, #20]
 800c094:	e6de      	b.n	800be54 <_rclc_execute.part.0+0x38>
 800c096:	2001      	movs	r0, #1
 800c098:	e716      	b.n	800bec8 <_rclc_execute.part.0+0xac>
 800c09a:	bf00      	nop

0800c09c <rclc_executor_trigger_any>:
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d03f      	beq.n	800c120 <rclc_executor_trigger_any+0x84>
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d03e      	beq.n	800c122 <rclc_executor_trigger_any+0x86>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d037      	beq.n	800c120 <rclc_executor_trigger_any+0x84>
 800c0b0:	b430      	push	{r4, r5}
 800c0b2:	f893 c000 	ldrb.w	ip, [r3]
 800c0b6:	f1bc 0f08 	cmp.w	ip, #8
 800c0ba:	d11e      	bne.n	800c0fa <rclc_executor_trigger_any+0x5e>
 800c0bc:	685c      	ldr	r4, [r3, #4]
 800c0be:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c0c0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c0c4:	d105      	bne.n	800c0d2 <rclc_executor_trigger_any+0x36>
 800c0c6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c0ca:	b910      	cbnz	r0, 800c0d2 <rclc_executor_trigger_any+0x36>
 800c0cc:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c0d0:	b128      	cbz	r0, 800c0de <rclc_executor_trigger_any+0x42>
 800c0d2:	bc30      	pop	{r4, r5}
 800c0d4:	4770      	bx	lr
 800c0d6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d1f9      	bne.n	800c0d2 <rclc_executor_trigger_any+0x36>
 800c0de:	3201      	adds	r2, #1
 800c0e0:	4291      	cmp	r1, r2
 800c0e2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c0e6:	d018      	beq.n	800c11a <rclc_executor_trigger_any+0x7e>
 800c0e8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d0f0      	beq.n	800c0d2 <rclc_executor_trigger_any+0x36>
 800c0f0:	f893 c000 	ldrb.w	ip, [r3]
 800c0f4:	f1bc 0f08 	cmp.w	ip, #8
 800c0f8:	d0e0      	beq.n	800c0bc <rclc_executor_trigger_any+0x20>
 800c0fa:	f1bc 0f09 	cmp.w	ip, #9
 800c0fe:	d1ea      	bne.n	800c0d6 <rclc_executor_trigger_any+0x3a>
 800c100:	685c      	ldr	r4, [r3, #4]
 800c102:	6a25      	ldr	r5, [r4, #32]
 800c104:	2d00      	cmp	r5, #0
 800c106:	d1e4      	bne.n	800c0d2 <rclc_executor_trigger_any+0x36>
 800c108:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d1e0      	bne.n	800c0d2 <rclc_executor_trigger_any+0x36>
 800c110:	3201      	adds	r2, #1
 800c112:	4291      	cmp	r1, r2
 800c114:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c118:	d1e6      	bne.n	800c0e8 <rclc_executor_trigger_any+0x4c>
 800c11a:	2000      	movs	r0, #0
 800c11c:	bc30      	pop	{r4, r5}
 800c11e:	4770      	bx	lr
 800c120:	4770      	bx	lr
 800c122:	4608      	mov	r0, r1
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop

0800c128 <rclc_executor_get_zero_initialized_executor>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	4903      	ldr	r1, [pc, #12]	@ (800c138 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c12c:	4604      	mov	r4, r0
 800c12e:	2288      	movs	r2, #136	@ 0x88
 800c130:	f00f f80b 	bl	801b14a <memcpy>
 800c134:	4620      	mov	r0, r4
 800c136:	bd10      	pop	{r4, pc}
 800c138:	0801c790 	.word	0x0801c790
 800c13c:	00000000 	.word	0x00000000

0800c140 <rclc_executor_init>:
 800c140:	2800      	cmp	r0, #0
 800c142:	d05f      	beq.n	800c204 <rclc_executor_init+0xc4>
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	460c      	mov	r4, r1
 800c14a:	b0b0      	sub	sp, #192	@ 0xc0
 800c14c:	2900      	cmp	r1, #0
 800c14e:	d051      	beq.n	800c1f4 <rclc_executor_init+0xb4>
 800c150:	4605      	mov	r5, r0
 800c152:	4618      	mov	r0, r3
 800c154:	4616      	mov	r6, r2
 800c156:	461f      	mov	r7, r3
 800c158:	f000 fc5a 	bl	800ca10 <rcutils_allocator_is_valid>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d049      	beq.n	800c1f4 <rclc_executor_init+0xb4>
 800c160:	2e00      	cmp	r6, #0
 800c162:	d047      	beq.n	800c1f4 <rclc_executor_init+0xb4>
 800c164:	492c      	ldr	r1, [pc, #176]	@ (800c218 <rclc_executor_init+0xd8>)
 800c166:	2288      	movs	r2, #136	@ 0x88
 800c168:	a80e      	add	r0, sp, #56	@ 0x38
 800c16a:	f00e ffee 	bl	801b14a <memcpy>
 800c16e:	a90e      	add	r1, sp, #56	@ 0x38
 800c170:	2288      	movs	r2, #136	@ 0x88
 800c172:	4628      	mov	r0, r5
 800c174:	f00e ffe9 	bl	801b14a <memcpy>
 800c178:	602c      	str	r4, [r5, #0]
 800c17a:	4668      	mov	r0, sp
 800c17c:	60ae      	str	r6, [r5, #8]
 800c17e:	466c      	mov	r4, sp
 800c180:	f008 fad4 	bl	801472c <rcl_get_zero_initialized_wait_set>
 800c184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c186:	f105 0c14 	add.w	ip, r5, #20
 800c18a:	f8d7 8000 	ldr.w	r8, [r7]
 800c18e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c194:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c19a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c19e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c210 <rclc_executor_init+0xd0>
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	f8cc 3000 	str.w	r3, [ip]
 800c1a8:	6939      	ldr	r1, [r7, #16]
 800c1aa:	612f      	str	r7, [r5, #16]
 800c1ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c1b0:	01b0      	lsls	r0, r6, #6
 800c1b2:	47c0      	blx	r8
 800c1b4:	6068      	str	r0, [r5, #4]
 800c1b6:	b338      	cbz	r0, 800c208 <rclc_executor_init+0xc8>
 800c1b8:	2400      	movs	r4, #0
 800c1ba:	e000      	b.n	800c1be <rclc_executor_init+0x7e>
 800c1bc:	6868      	ldr	r0, [r5, #4]
 800c1be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	3401      	adds	r4, #1
 800c1c6:	f000 faa7 	bl	800c718 <rclc_executor_handle_init>
 800c1ca:	42a6      	cmp	r6, r4
 800c1cc:	d1f6      	bne.n	800c1bc <rclc_executor_init+0x7c>
 800c1ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c1d2:	f000 fa95 	bl	800c700 <rclc_executor_handle_counters_zero_init>
 800c1d6:	4a11      	ldr	r2, [pc, #68]	@ (800c21c <rclc_executor_init+0xdc>)
 800c1d8:	686b      	ldr	r3, [r5, #4]
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c1e0:	b163      	cbz	r3, 800c1fc <rclc_executor_init+0xbc>
 800c1e2:	692b      	ldr	r3, [r5, #16]
 800c1e4:	b153      	cbz	r3, 800c1fc <rclc_executor_init+0xbc>
 800c1e6:	68ab      	ldr	r3, [r5, #8]
 800c1e8:	b143      	cbz	r3, 800c1fc <rclc_executor_init+0xbc>
 800c1ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c1ee:	b030      	add	sp, #192	@ 0xc0
 800c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f4:	200b      	movs	r0, #11
 800c1f6:	b030      	add	sp, #192	@ 0xc0
 800c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	b030      	add	sp, #192	@ 0xc0
 800c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c204:	200b      	movs	r0, #11
 800c206:	4770      	bx	lr
 800c208:	200a      	movs	r0, #10
 800c20a:	e7f4      	b.n	800c1f6 <rclc_executor_init+0xb6>
 800c20c:	f3af 8000 	nop.w
 800c210:	3b9aca00 	.word	0x3b9aca00
 800c214:	00000000 	.word	0x00000000
 800c218:	0801c790 	.word	0x0801c790
 800c21c:	0800c09d 	.word	0x0800c09d

0800c220 <rclc_executor_add_subscription>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c226:	b338      	cbz	r0, 800c278 <rclc_executor_add_subscription+0x58>
 800c228:	b331      	cbz	r1, 800c278 <rclc_executor_add_subscription+0x58>
 800c22a:	b32a      	cbz	r2, 800c278 <rclc_executor_add_subscription+0x58>
 800c22c:	b323      	cbz	r3, 800c278 <rclc_executor_add_subscription+0x58>
 800c22e:	4604      	mov	r4, r0
 800c230:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800c234:	42a8      	cmp	r0, r5
 800c236:	d301      	bcc.n	800c23c <rclc_executor_add_subscription+0x1c>
 800c238:	2001      	movs	r0, #1
 800c23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c23c:	6866      	ldr	r6, [r4, #4]
 800c23e:	0187      	lsls	r7, r0, #6
 800c240:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c244:	2500      	movs	r5, #0
 800c246:	55f5      	strb	r5, [r6, r7]
 800c248:	3001      	adds	r0, #1
 800c24a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c24e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c252:	2301      	movs	r3, #1
 800c254:	f104 0514 	add.w	r5, r4, #20
 800c258:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c25c:	f88c e001 	strb.w	lr, [ip, #1]
 800c260:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c264:	60e0      	str	r0, [r4, #12]
 800c266:	4628      	mov	r0, r5
 800c268:	f008 fa74 	bl	8014754 <rcl_wait_set_is_valid>
 800c26c:	b930      	cbnz	r0, 800c27c <rclc_executor_add_subscription+0x5c>
 800c26e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c270:	3301      	adds	r3, #1
 800c272:	2000      	movs	r0, #0
 800c274:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c278:	200b      	movs	r0, #11
 800c27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c27c:	4628      	mov	r0, r5
 800c27e:	f008 fa6f 	bl	8014760 <rcl_wait_set_fini>
 800c282:	2800      	cmp	r0, #0
 800c284:	d0f3      	beq.n	800c26e <rclc_executor_add_subscription+0x4e>
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c288 <rclc_executor_add_service>:
 800c288:	b370      	cbz	r0, 800c2e8 <rclc_executor_add_service+0x60>
 800c28a:	b369      	cbz	r1, 800c2e8 <rclc_executor_add_service+0x60>
 800c28c:	b362      	cbz	r2, 800c2e8 <rclc_executor_add_service+0x60>
 800c28e:	b35b      	cbz	r3, 800c2e8 <rclc_executor_add_service+0x60>
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4604      	mov	r4, r0
 800c294:	9804      	ldr	r0, [sp, #16]
 800c296:	b378      	cbz	r0, 800c2f8 <rclc_executor_add_service+0x70>
 800c298:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800c29c:	42a8      	cmp	r0, r5
 800c29e:	d301      	bcc.n	800c2a4 <rclc_executor_add_service+0x1c>
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	6865      	ldr	r5, [r4, #4]
 800c2a6:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800c2aa:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800c2ae:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c2b8:	2305      	movs	r3, #5
 800c2ba:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f825 300e 	strh.w	r3, [r5, lr]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f104 0514 	add.w	r5, r4, #20
 800c2cc:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800c2d0:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800c2d4:	60e0      	str	r0, [r4, #12]
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f008 fa3c 	bl	8014754 <rcl_wait_set_is_valid>
 800c2dc:	b930      	cbnz	r0, 800c2ec <rclc_executor_add_service+0x64>
 800c2de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	6563      	str	r3, [r4, #84]	@ 0x54
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	200b      	movs	r0, #11
 800c2ea:	4770      	bx	lr
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	f008 fa37 	bl	8014760 <rcl_wait_set_fini>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d0f3      	beq.n	800c2de <rclc_executor_add_service+0x56>
 800c2f6:	e7d4      	b.n	800c2a2 <rclc_executor_add_service+0x1a>
 800c2f8:	200b      	movs	r0, #11
 800c2fa:	bd38      	pop	{r3, r4, r5, pc}

0800c2fc <rclc_executor_prepare>:
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d044      	beq.n	800c38a <rclc_executor_prepare+0x8e>
 800c300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c302:	f100 0514 	add.w	r5, r0, #20
 800c306:	b09b      	sub	sp, #108	@ 0x6c
 800c308:	4604      	mov	r4, r0
 800c30a:	4628      	mov	r0, r5
 800c30c:	f008 fa22 	bl	8014754 <rcl_wait_set_is_valid>
 800c310:	b110      	cbz	r0, 800c318 <rclc_executor_prepare+0x1c>
 800c312:	2000      	movs	r0, #0
 800c314:	b01b      	add	sp, #108	@ 0x6c
 800c316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c318:	4628      	mov	r0, r5
 800c31a:	f008 fa21 	bl	8014760 <rcl_wait_set_fini>
 800c31e:	2800      	cmp	r0, #0
 800c320:	d130      	bne.n	800c384 <rclc_executor_prepare+0x88>
 800c322:	a80c      	add	r0, sp, #48	@ 0x30
 800c324:	f008 fa02 	bl	801472c <rcl_get_zero_initialized_wait_set>
 800c328:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c32c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c330:	46ae      	mov	lr, r5
 800c332:	6927      	ldr	r7, [r4, #16]
 800c334:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c338:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c33c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c344:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c348:	f8dc 3000 	ldr.w	r3, [ip]
 800c34c:	f8ce 3000 	str.w	r3, [lr]
 800c350:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c352:	ae04      	add	r6, sp, #16
 800c354:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	6822      	ldr	r2, [r4, #0]
 800c35a:	6033      	str	r3, [r6, #0]
 800c35c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c35e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c360:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c364:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c368:	e9cd 2100 	strd	r2, r1, [sp]
 800c36c:	4628      	mov	r0, r5
 800c36e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c370:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c372:	f008 fcf3 	bl	8014d5c <rcl_wait_set_init>
 800c376:	2800      	cmp	r0, #0
 800c378:	d0cc      	beq.n	800c314 <rclc_executor_prepare+0x18>
 800c37a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c37c:	f000 fb6c 	bl	800ca58 <rcutils_reset_error>
 800c380:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c382:	e7c7      	b.n	800c314 <rclc_executor_prepare+0x18>
 800c384:	f000 fb68 	bl	800ca58 <rcutils_reset_error>
 800c388:	e7cb      	b.n	800c322 <rclc_executor_prepare+0x26>
 800c38a:	200b      	movs	r0, #11
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop

0800c390 <rclc_executor_spin_some.part.0>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	f100 0614 	add.w	r6, r0, #20
 800c398:	b083      	sub	sp, #12
 800c39a:	4691      	mov	r9, r2
 800c39c:	4698      	mov	r8, r3
 800c39e:	4605      	mov	r5, r0
 800c3a0:	f7ff ffac 	bl	800c2fc <rclc_executor_prepare>
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f008 faa7 	bl	80148f8 <rcl_wait_set_clear>
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 80ed 	bne.w	800c58c <rclc_executor_spin_some.part.0+0x1fc>
 800c3b2:	68ab      	ldr	r3, [r5, #8]
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	b303      	cbz	r3, 800c3fa <rclc_executor_spin_some.part.0+0x6a>
 800c3b8:	6869      	ldr	r1, [r5, #4]
 800c3ba:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c3be:	01a2      	lsls	r2, r4, #6
 800c3c0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c3c4:	b1cb      	cbz	r3, 800c3fa <rclc_executor_spin_some.part.0+0x6a>
 800c3c6:	5c8b      	ldrb	r3, [r1, r2]
 800c3c8:	2b0a      	cmp	r3, #10
 800c3ca:	f200 80d8 	bhi.w	800c57e <rclc_executor_spin_some.part.0+0x1ee>
 800c3ce:	e8df f003 	tbb	[pc, r3]
 800c3d2:	9c9c      	.short	0x9c9c
 800c3d4:	068c8ca7 	.word	0x068c8ca7
 800c3d8:	bdc90606 	.word	0xbdc90606
 800c3dc:	b2          	.byte	0xb2
 800c3dd:	00          	.byte	0x00
 800c3de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c3e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f008 fdce 	bl	8014f88 <rcl_wait_set_add_service>
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	f040 8086 	bne.w	800c4fe <rclc_executor_spin_some.part.0+0x16e>
 800c3f2:	68ab      	ldr	r3, [r5, #8]
 800c3f4:	3401      	adds	r4, #1
 800c3f6:	429c      	cmp	r4, r3
 800c3f8:	d3de      	bcc.n	800c3b8 <rclc_executor_spin_some.part.0+0x28>
 800c3fa:	4643      	mov	r3, r8
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	4630      	mov	r0, r6
 800c400:	f008 fdee 	bl	8014fe0 <rcl_wait>
 800c404:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 80c7 	beq.w	800c59c <rclc_executor_spin_some.part.0+0x20c>
 800c40e:	2b01      	cmp	r3, #1
 800c410:	f040 80b5 	bne.w	800c57e <rclc_executor_spin_some.part.0+0x1ee>
 800c414:	68ab      	ldr	r3, [r5, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 8159 	beq.w	800c6ce <rclc_executor_spin_some.part.0+0x33e>
 800c41c:	2400      	movs	r4, #0
 800c41e:	46a0      	mov	r8, r4
 800c420:	f240 1991 	movw	r9, #401	@ 0x191
 800c424:	e00a      	b.n	800c43c <rclc_executor_spin_some.part.0+0xac>
 800c426:	f7ff fb37 	bl	800ba98 <_rclc_check_for_new_data>
 800c42a:	4604      	mov	r4, r0
 800c42c:	b110      	cbz	r0, 800c434 <rclc_executor_spin_some.part.0+0xa4>
 800c42e:	4548      	cmp	r0, r9
 800c430:	f040 80b2 	bne.w	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c434:	68ab      	ldr	r3, [r5, #8]
 800c436:	4598      	cmp	r8, r3
 800c438:	f080 8126 	bcs.w	800c688 <rclc_executor_spin_some.part.0+0x2f8>
 800c43c:	686a      	ldr	r2, [r5, #4]
 800c43e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c442:	4631      	mov	r1, r6
 800c444:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c448:	f108 0801 	add.w	r8, r8, #1
 800c44c:	f1bc 0f00 	cmp.w	ip, #0
 800c450:	d1e9      	bne.n	800c426 <rclc_executor_spin_some.part.0+0x96>
 800c452:	4619      	mov	r1, r3
 800c454:	4610      	mov	r0, r2
 800c456:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c45a:	4798      	blx	r3
 800c45c:	2800      	cmp	r0, #0
 800c45e:	f000 809b 	beq.w	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c462:	68ab      	ldr	r3, [r5, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	f000 8097 	beq.w	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c46a:	f04f 0800 	mov.w	r8, #0
 800c46e:	f240 1991 	movw	r9, #401	@ 0x191
 800c472:	e009      	b.n	800c488 <rclc_executor_spin_some.part.0+0xf8>
 800c474:	f7ff fb5e 	bl	800bb34 <_rclc_take_new_data>
 800c478:	4604      	mov	r4, r0
 800c47a:	b110      	cbz	r0, 800c482 <rclc_executor_spin_some.part.0+0xf2>
 800c47c:	4548      	cmp	r0, r9
 800c47e:	f040 808b 	bne.w	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c482:	68ab      	ldr	r3, [r5, #8]
 800c484:	4598      	cmp	r8, r3
 800c486:	d209      	bcs.n	800c49c <rclc_executor_spin_some.part.0+0x10c>
 800c488:	6868      	ldr	r0, [r5, #4]
 800c48a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c48e:	4631      	mov	r1, r6
 800c490:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c494:	f108 0801 	add.w	r8, r8, #1
 800c498:	2a00      	cmp	r2, #0
 800c49a:	d1eb      	bne.n	800c474 <rclc_executor_spin_some.part.0+0xe4>
 800c49c:	2600      	movs	r6, #0
 800c49e:	b97b      	cbnz	r3, 800c4c0 <rclc_executor_spin_some.part.0+0x130>
 800c4a0:	e07a      	b.n	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c4a2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c4a6:	2a08      	cmp	r2, #8
 800c4a8:	f000 80fd 	beq.w	800c6a6 <rclc_executor_spin_some.part.0+0x316>
 800c4ac:	2a09      	cmp	r2, #9
 800c4ae:	f000 80ef 	beq.w	800c690 <rclc_executor_spin_some.part.0+0x300>
 800c4b2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c4b6:	b98a      	cbnz	r2, 800c4dc <rclc_executor_spin_some.part.0+0x14c>
 800c4b8:	3601      	adds	r6, #1
 800c4ba:	429e      	cmp	r6, r3
 800c4bc:	d262      	bcs.n	800c584 <rclc_executor_spin_some.part.0+0x1f4>
 800c4be:	2400      	movs	r4, #0
 800c4c0:	686a      	ldr	r2, [r5, #4]
 800c4c2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c4c6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c4ca:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c4ce:	2900      	cmp	r1, #0
 800c4d0:	d062      	beq.n	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c4d2:	7841      	ldrb	r1, [r0, #1]
 800c4d4:	2900      	cmp	r1, #0
 800c4d6:	d0e4      	beq.n	800c4a2 <rclc_executor_spin_some.part.0+0x112>
 800c4d8:	2901      	cmp	r1, #1
 800c4da:	d1ed      	bne.n	800c4b8 <rclc_executor_spin_some.part.0+0x128>
 800c4dc:	f7ff fc9e 	bl	800be1c <_rclc_execute.part.0>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	f040 80b6 	bne.w	800c652 <rclc_executor_spin_some.part.0+0x2c2>
 800c4e6:	68ab      	ldr	r3, [r5, #8]
 800c4e8:	e7e6      	b.n	800c4b8 <rclc_executor_spin_some.part.0+0x128>
 800c4ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c4ee:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f008 fd1c 	bl	8014f30 <rcl_wait_set_add_client>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	f43f af7a 	beq.w	800c3f2 <rclc_executor_spin_some.part.0+0x62>
 800c4fe:	9001      	str	r0, [sp, #4]
 800c500:	f000 faaa 	bl	800ca58 <rcutils_reset_error>
 800c504:	9801      	ldr	r0, [sp, #4]
 800c506:	4607      	mov	r7, r0
 800c508:	e03c      	b.n	800c584 <rclc_executor_spin_some.part.0+0x1f4>
 800c50a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c50e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c512:	4630      	mov	r0, r6
 800c514:	f008 f9c4 	bl	80148a0 <rcl_wait_set_add_subscription>
 800c518:	2800      	cmp	r0, #0
 800c51a:	f43f af6a 	beq.w	800c3f2 <rclc_executor_spin_some.part.0+0x62>
 800c51e:	e7ee      	b.n	800c4fe <rclc_executor_spin_some.part.0+0x16e>
 800c520:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c524:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c528:	4630      	mov	r0, r6
 800c52a:	f008 fcd1 	bl	8014ed0 <rcl_wait_set_add_timer>
 800c52e:	2800      	cmp	r0, #0
 800c530:	f43f af5f 	beq.w	800c3f2 <rclc_executor_spin_some.part.0+0x62>
 800c534:	e7e3      	b.n	800c4fe <rclc_executor_spin_some.part.0+0x16e>
 800c536:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c53a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c53e:	4630      	mov	r0, r6
 800c540:	f008 fc9a 	bl	8014e78 <rcl_wait_set_add_guard_condition>
 800c544:	2800      	cmp	r0, #0
 800c546:	f43f af54 	beq.w	800c3f2 <rclc_executor_spin_some.part.0+0x62>
 800c54a:	e7d8      	b.n	800c4fe <rclc_executor_spin_some.part.0+0x16e>
 800c54c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c550:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c554:	3110      	adds	r1, #16
 800c556:	4630      	mov	r0, r6
 800c558:	f009 fa1a 	bl	8015990 <rcl_action_wait_set_add_action_server>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f43f af48 	beq.w	800c3f2 <rclc_executor_spin_some.part.0+0x62>
 800c562:	e7cc      	b.n	800c4fe <rclc_executor_spin_some.part.0+0x16e>
 800c564:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c568:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c56c:	3110      	adds	r1, #16
 800c56e:	2300      	movs	r3, #0
 800c570:	4630      	mov	r0, r6
 800c572:	f008 ffe5 	bl	8015540 <rcl_action_wait_set_add_action_client>
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f af3b 	beq.w	800c3f2 <rclc_executor_spin_some.part.0+0x62>
 800c57c:	e7bf      	b.n	800c4fe <rclc_executor_spin_some.part.0+0x16e>
 800c57e:	f000 fa6b 	bl	800ca58 <rcutils_reset_error>
 800c582:	2701      	movs	r7, #1
 800c584:	4638      	mov	r0, r7
 800c586:	b003      	add	sp, #12
 800c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58c:	f000 fa64 	bl	800ca58 <rcutils_reset_error>
 800c590:	4638      	mov	r0, r7
 800c592:	b003      	add	sp, #12
 800c594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c598:	4627      	mov	r7, r4
 800c59a:	e7f3      	b.n	800c584 <rclc_executor_spin_some.part.0+0x1f4>
 800c59c:	68ab      	ldr	r3, [r5, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 8092 	beq.w	800c6c8 <rclc_executor_spin_some.part.0+0x338>
 800c5a4:	2400      	movs	r4, #0
 800c5a6:	46a0      	mov	r8, r4
 800c5a8:	f240 1991 	movw	r9, #401	@ 0x191
 800c5ac:	e008      	b.n	800c5c0 <rclc_executor_spin_some.part.0+0x230>
 800c5ae:	f7ff fa73 	bl	800ba98 <_rclc_check_for_new_data>
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	b108      	cbz	r0, 800c5ba <rclc_executor_spin_some.part.0+0x22a>
 800c5b6:	4548      	cmp	r0, r9
 800c5b8:	d1ee      	bne.n	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c5ba:	68ab      	ldr	r3, [r5, #8]
 800c5bc:	4598      	cmp	r8, r3
 800c5be:	d265      	bcs.n	800c68c <rclc_executor_spin_some.part.0+0x2fc>
 800c5c0:	686a      	ldr	r2, [r5, #4]
 800c5c2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c5cc:	f108 0801 	add.w	r8, r8, #1
 800c5d0:	f1bc 0f00 	cmp.w	ip, #0
 800c5d4:	d1eb      	bne.n	800c5ae <rclc_executor_spin_some.part.0+0x21e>
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c5de:	4798      	blx	r3
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d0d9      	beq.n	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c5e4:	68ab      	ldr	r3, [r5, #8]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0d6      	beq.n	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c5ea:	f04f 0800 	mov.w	r8, #0
 800c5ee:	f240 1991 	movw	r9, #401	@ 0x191
 800c5f2:	f240 2a59 	movw	sl, #601	@ 0x259
 800c5f6:	e00e      	b.n	800c616 <rclc_executor_spin_some.part.0+0x286>
 800c5f8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c5fc:	2b08      	cmp	r3, #8
 800c5fe:	d033      	beq.n	800c668 <rclc_executor_spin_some.part.0+0x2d8>
 800c600:	2b09      	cmp	r3, #9
 800c602:	d028      	beq.n	800c656 <rclc_executor_spin_some.part.0+0x2c6>
 800c604:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800c608:	b9fb      	cbnz	r3, 800c64a <rclc_executor_spin_some.part.0+0x2ba>
 800c60a:	68ab      	ldr	r3, [r5, #8]
 800c60c:	f108 0801 	add.w	r8, r8, #1
 800c610:	4598      	cmp	r8, r3
 800c612:	d2b7      	bcs.n	800c584 <rclc_executor_spin_some.part.0+0x1f4>
 800c614:	2400      	movs	r4, #0
 800c616:	6868      	ldr	r0, [r5, #4]
 800c618:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c61c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800c620:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0b7      	beq.n	800c598 <rclc_executor_spin_some.part.0+0x208>
 800c628:	4631      	mov	r1, r6
 800c62a:	f7ff fa83 	bl	800bb34 <_rclc_take_new_data>
 800c62e:	b118      	cbz	r0, 800c638 <rclc_executor_spin_some.part.0+0x2a8>
 800c630:	4548      	cmp	r0, r9
 800c632:	d001      	beq.n	800c638 <rclc_executor_spin_some.part.0+0x2a8>
 800c634:	4550      	cmp	r0, sl
 800c636:	d10c      	bne.n	800c652 <rclc_executor_spin_some.part.0+0x2c2>
 800c638:	686b      	ldr	r3, [r5, #4]
 800c63a:	eb13 000b 	adds.w	r0, r3, fp
 800c63e:	d021      	beq.n	800c684 <rclc_executor_spin_some.part.0+0x2f4>
 800c640:	7842      	ldrb	r2, [r0, #1]
 800c642:	2a00      	cmp	r2, #0
 800c644:	d0d8      	beq.n	800c5f8 <rclc_executor_spin_some.part.0+0x268>
 800c646:	2a01      	cmp	r2, #1
 800c648:	d1df      	bne.n	800c60a <rclc_executor_spin_some.part.0+0x27a>
 800c64a:	f7ff fbe7 	bl	800be1c <_rclc_execute.part.0>
 800c64e:	2800      	cmp	r0, #0
 800c650:	d0db      	beq.n	800c60a <rclc_executor_spin_some.part.0+0x27a>
 800c652:	4607      	mov	r7, r0
 800c654:	e796      	b.n	800c584 <rclc_executor_spin_some.part.0+0x1f4>
 800c656:	6843      	ldr	r3, [r0, #4]
 800c658:	6a1a      	ldr	r2, [r3, #32]
 800c65a:	2a00      	cmp	r2, #0
 800c65c:	d1f5      	bne.n	800c64a <rclc_executor_spin_some.part.0+0x2ba>
 800c65e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0d1      	beq.n	800c60a <rclc_executor_spin_some.part.0+0x27a>
 800c666:	e7f0      	b.n	800c64a <rclc_executor_spin_some.part.0+0x2ba>
 800c668:	6843      	ldr	r3, [r0, #4]
 800c66a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c66c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c670:	d1eb      	bne.n	800c64a <rclc_executor_spin_some.part.0+0x2ba>
 800c672:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c676:	2a00      	cmp	r2, #0
 800c678:	d1e7      	bne.n	800c64a <rclc_executor_spin_some.part.0+0x2ba>
 800c67a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0c3      	beq.n	800c60a <rclc_executor_spin_some.part.0+0x27a>
 800c682:	e7e2      	b.n	800c64a <rclc_executor_spin_some.part.0+0x2ba>
 800c684:	270b      	movs	r7, #11
 800c686:	e77d      	b.n	800c584 <rclc_executor_spin_some.part.0+0x1f4>
 800c688:	686a      	ldr	r2, [r5, #4]
 800c68a:	e6e2      	b.n	800c452 <rclc_executor_spin_some.part.0+0xc2>
 800c68c:	686a      	ldr	r2, [r5, #4]
 800c68e:	e7a2      	b.n	800c5d6 <rclc_executor_spin_some.part.0+0x246>
 800c690:	6842      	ldr	r2, [r0, #4]
 800c692:	6a11      	ldr	r1, [r2, #32]
 800c694:	2900      	cmp	r1, #0
 800c696:	f47f af21 	bne.w	800c4dc <rclc_executor_spin_some.part.0+0x14c>
 800c69a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	f43f af0a 	beq.w	800c4b8 <rclc_executor_spin_some.part.0+0x128>
 800c6a4:	e71a      	b.n	800c4dc <rclc_executor_spin_some.part.0+0x14c>
 800c6a6:	6842      	ldr	r2, [r0, #4]
 800c6a8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800c6aa:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800c6ae:	f47f af15 	bne.w	800c4dc <rclc_executor_spin_some.part.0+0x14c>
 800c6b2:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800c6b6:	2900      	cmp	r1, #0
 800c6b8:	f47f af10 	bne.w	800c4dc <rclc_executor_spin_some.part.0+0x14c>
 800c6bc:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800c6c0:	2a00      	cmp	r2, #0
 800c6c2:	f43f aef9 	beq.w	800c4b8 <rclc_executor_spin_some.part.0+0x128>
 800c6c6:	e709      	b.n	800c4dc <rclc_executor_spin_some.part.0+0x14c>
 800c6c8:	686a      	ldr	r2, [r5, #4]
 800c6ca:	461c      	mov	r4, r3
 800c6cc:	e783      	b.n	800c5d6 <rclc_executor_spin_some.part.0+0x246>
 800c6ce:	686a      	ldr	r2, [r5, #4]
 800c6d0:	461c      	mov	r4, r3
 800c6d2:	e6be      	b.n	800c452 <rclc_executor_spin_some.part.0+0xc2>

0800c6d4 <rclc_executor_spin_some>:
 800c6d4:	b190      	cbz	r0, 800c6fc <rclc_executor_spin_some+0x28>
 800c6d6:	b570      	push	{r4, r5, r6, lr}
 800c6d8:	4604      	mov	r4, r0
 800c6da:	6800      	ldr	r0, [r0, #0]
 800c6dc:	4616      	mov	r6, r2
 800c6de:	461d      	mov	r5, r3
 800c6e0:	f006 fde6 	bl	80132b0 <rcl_context_is_valid>
 800c6e4:	b130      	cbz	r0, 800c6f4 <rclc_executor_spin_some+0x20>
 800c6e6:	4632      	mov	r2, r6
 800c6e8:	462b      	mov	r3, r5
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6f0:	f7ff be4e 	b.w	800c390 <rclc_executor_spin_some.part.0>
 800c6f4:	f000 f9b0 	bl	800ca58 <rcutils_reset_error>
 800c6f8:	2001      	movs	r0, #1
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	200b      	movs	r0, #11
 800c6fe:	4770      	bx	lr

0800c700 <rclc_executor_handle_counters_zero_init>:
 800c700:	b130      	cbz	r0, 800c710 <rclc_executor_handle_counters_zero_init+0x10>
 800c702:	b508      	push	{r3, lr}
 800c704:	2220      	movs	r2, #32
 800c706:	2100      	movs	r1, #0
 800c708:	f00e fcb7 	bl	801b07a <memset>
 800c70c:	2000      	movs	r0, #0
 800c70e:	bd08      	pop	{r3, pc}
 800c710:	200b      	movs	r0, #11
 800c712:	4770      	bx	lr
 800c714:	0000      	movs	r0, r0
	...

0800c718 <rclc_executor_handle_init>:
 800c718:	b168      	cbz	r0, 800c736 <rclc_executor_handle_init+0x1e>
 800c71a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800c740 <rclc_executor_handle_init+0x28>
 800c71e:	2300      	movs	r3, #0
 800c720:	220b      	movs	r2, #11
 800c722:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800c726:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800c72a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800c72e:	8002      	strh	r2, [r0, #0]
 800c730:	8703      	strh	r3, [r0, #56]	@ 0x38
 800c732:	4618      	mov	r0, r3
 800c734:	4770      	bx	lr
 800c736:	200b      	movs	r0, #11
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	f3af 8000 	nop.w
	...

0800c748 <rclc_support_init>:
 800c748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c74c:	b086      	sub	sp, #24
 800c74e:	b3b8      	cbz	r0, 800c7c0 <rclc_support_init+0x78>
 800c750:	461c      	mov	r4, r3
 800c752:	b3ab      	cbz	r3, 800c7c0 <rclc_support_init+0x78>
 800c754:	460f      	mov	r7, r1
 800c756:	4690      	mov	r8, r2
 800c758:	4606      	mov	r6, r0
 800c75a:	f006 ff13 	bl	8013584 <rcl_get_zero_initialized_init_options>
 800c75e:	f104 030c 	add.w	r3, r4, #12
 800c762:	9005      	str	r0, [sp, #20]
 800c764:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c768:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c76c:	a805      	add	r0, sp, #20
 800c76e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800c772:	f006 ff09 	bl	8013588 <rcl_init_options_init>
 800c776:	4605      	mov	r5, r0
 800c778:	b9e0      	cbnz	r0, 800c7b4 <rclc_support_init+0x6c>
 800c77a:	ad02      	add	r5, sp, #8
 800c77c:	4628      	mov	r0, r5
 800c77e:	f006 fd8d 	bl	801329c <rcl_get_zero_initialized_context>
 800c782:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c786:	4633      	mov	r3, r6
 800c788:	e886 0003 	stmia.w	r6, {r0, r1}
 800c78c:	aa05      	add	r2, sp, #20
 800c78e:	4641      	mov	r1, r8
 800c790:	4638      	mov	r0, r7
 800c792:	f006 fdf3 	bl	801337c <rcl_init>
 800c796:	4605      	mov	r5, r0
 800c798:	b9b8      	cbnz	r0, 800c7ca <rclc_support_init+0x82>
 800c79a:	60b4      	str	r4, [r6, #8]
 800c79c:	4622      	mov	r2, r4
 800c79e:	f106 010c 	add.w	r1, r6, #12
 800c7a2:	2003      	movs	r0, #3
 800c7a4:	f007 fdcc 	bl	8014340 <rcl_clock_init>
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	b970      	cbnz	r0, 800c7ca <rclc_support_init+0x82>
 800c7ac:	a805      	add	r0, sp, #20
 800c7ae:	f006 ff51 	bl	8013654 <rcl_init_options_fini>
 800c7b2:	b108      	cbz	r0, 800c7b8 <rclc_support_init+0x70>
 800c7b4:	f000 f950 	bl	800ca58 <rcutils_reset_error>
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	b006      	add	sp, #24
 800c7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c0:	250b      	movs	r5, #11
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	b006      	add	sp, #24
 800c7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ca:	f000 f945 	bl	800ca58 <rcutils_reset_error>
 800c7ce:	a805      	add	r0, sp, #20
 800c7d0:	f006 ff40 	bl	8013654 <rcl_init_options_fini>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d0ef      	beq.n	800c7b8 <rclc_support_init+0x70>
 800c7d8:	e7ec      	b.n	800c7b4 <rclc_support_init+0x6c>
 800c7da:	bf00      	nop

0800c7dc <rclc_node_init_default>:
 800c7dc:	b3b8      	cbz	r0, 800c84e <rclc_node_init_default+0x72>
 800c7de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7e2:	460d      	mov	r5, r1
 800c7e4:	b0a1      	sub	sp, #132	@ 0x84
 800c7e6:	b329      	cbz	r1, 800c834 <rclc_node_init_default+0x58>
 800c7e8:	4616      	mov	r6, r2
 800c7ea:	b31a      	cbz	r2, 800c834 <rclc_node_init_default+0x58>
 800c7ec:	461f      	mov	r7, r3
 800c7ee:	b30b      	cbz	r3, 800c834 <rclc_node_init_default+0x58>
 800c7f0:	f10d 0810 	add.w	r8, sp, #16
 800c7f4:	4604      	mov	r4, r0
 800c7f6:	4640      	mov	r0, r8
 800c7f8:	f006 ffe4 	bl	80137c4 <rcl_get_zero_initialized_node>
 800c7fc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c800:	f10d 0918 	add.w	r9, sp, #24
 800c804:	e884 0003 	stmia.w	r4, {r0, r1}
 800c808:	4648      	mov	r0, r9
 800c80a:	f007 f953 	bl	8013ab4 <rcl_node_get_default_options>
 800c80e:	4640      	mov	r0, r8
 800c810:	f006 ffd8 	bl	80137c4 <rcl_get_zero_initialized_node>
 800c814:	f8cd 9000 	str.w	r9, [sp]
 800c818:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c81c:	463b      	mov	r3, r7
 800c81e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c822:	4632      	mov	r2, r6
 800c824:	4629      	mov	r1, r5
 800c826:	4620      	mov	r0, r4
 800c828:	f006 ffd6 	bl	80137d8 <rcl_node_init>
 800c82c:	b930      	cbnz	r0, 800c83c <rclc_node_init_default+0x60>
 800c82e:	b021      	add	sp, #132	@ 0x84
 800c830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c834:	200b      	movs	r0, #11
 800c836:	b021      	add	sp, #132	@ 0x84
 800c838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c83c:	9003      	str	r0, [sp, #12]
 800c83e:	f000 f90b 	bl	800ca58 <rcutils_reset_error>
 800c842:	f000 f909 	bl	800ca58 <rcutils_reset_error>
 800c846:	9803      	ldr	r0, [sp, #12]
 800c848:	b021      	add	sp, #132	@ 0x84
 800c84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c84e:	200b      	movs	r0, #11
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop

0800c854 <rclc_publisher_init_default>:
 800c854:	b368      	cbz	r0, 800c8b2 <rclc_publisher_init_default+0x5e>
 800c856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85a:	460d      	mov	r5, r1
 800c85c:	b0a0      	sub	sp, #128	@ 0x80
 800c85e:	b321      	cbz	r1, 800c8aa <rclc_publisher_init_default+0x56>
 800c860:	4616      	mov	r6, r2
 800c862:	b312      	cbz	r2, 800c8aa <rclc_publisher_init_default+0x56>
 800c864:	461f      	mov	r7, r3
 800c866:	b303      	cbz	r3, 800c8aa <rclc_publisher_init_default+0x56>
 800c868:	4604      	mov	r4, r0
 800c86a:	f7ff f805 	bl	800b878 <rcl_get_zero_initialized_publisher>
 800c86e:	f10d 0810 	add.w	r8, sp, #16
 800c872:	6020      	str	r0, [r4, #0]
 800c874:	4640      	mov	r0, r8
 800c876:	f7ff f89b 	bl	800b9b0 <rcl_publisher_get_default_options>
 800c87a:	490f      	ldr	r1, [pc, #60]	@ (800c8b8 <rclc_publisher_init_default+0x64>)
 800c87c:	2250      	movs	r2, #80	@ 0x50
 800c87e:	4640      	mov	r0, r8
 800c880:	f00e fc63 	bl	801b14a <memcpy>
 800c884:	f8cd 8000 	str.w	r8, [sp]
 800c888:	463b      	mov	r3, r7
 800c88a:	4632      	mov	r2, r6
 800c88c:	4629      	mov	r1, r5
 800c88e:	4620      	mov	r0, r4
 800c890:	f7fe fff8 	bl	800b884 <rcl_publisher_init>
 800c894:	b910      	cbnz	r0, 800c89c <rclc_publisher_init_default+0x48>
 800c896:	b020      	add	sp, #128	@ 0x80
 800c898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c89c:	9003      	str	r0, [sp, #12]
 800c89e:	f000 f8db 	bl	800ca58 <rcutils_reset_error>
 800c8a2:	9803      	ldr	r0, [sp, #12]
 800c8a4:	b020      	add	sp, #128	@ 0x80
 800c8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8aa:	200b      	movs	r0, #11
 800c8ac:	b020      	add	sp, #128	@ 0x80
 800c8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b2:	200b      	movs	r0, #11
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	0801c818 	.word	0x0801c818

0800c8bc <rclc_service_init_default>:
 800c8bc:	b368      	cbz	r0, 800c91a <rclc_service_init_default+0x5e>
 800c8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	b09e      	sub	sp, #120	@ 0x78
 800c8c6:	b321      	cbz	r1, 800c912 <rclc_service_init_default+0x56>
 800c8c8:	4616      	mov	r6, r2
 800c8ca:	b312      	cbz	r2, 800c912 <rclc_service_init_default+0x56>
 800c8cc:	461f      	mov	r7, r3
 800c8ce:	b303      	cbz	r3, 800c912 <rclc_service_init_default+0x56>
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	f007 fabf 	bl	8013e54 <rcl_get_zero_initialized_service>
 800c8d6:	f10d 0810 	add.w	r8, sp, #16
 800c8da:	6020      	str	r0, [r4, #0]
 800c8dc:	4640      	mov	r0, r8
 800c8de:	f007 fb47 	bl	8013f70 <rcl_service_get_default_options>
 800c8e2:	490f      	ldr	r1, [pc, #60]	@ (800c920 <rclc_service_init_default+0x64>)
 800c8e4:	2250      	movs	r2, #80	@ 0x50
 800c8e6:	4640      	mov	r0, r8
 800c8e8:	f00e fc2f 	bl	801b14a <memcpy>
 800c8ec:	f8cd 8000 	str.w	r8, [sp]
 800c8f0:	463b      	mov	r3, r7
 800c8f2:	4632      	mov	r2, r6
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f007 fab2 	bl	8013e60 <rcl_service_init>
 800c8fc:	b910      	cbnz	r0, 800c904 <rclc_service_init_default+0x48>
 800c8fe:	b01e      	add	sp, #120	@ 0x78
 800c900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c904:	9003      	str	r0, [sp, #12]
 800c906:	f000 f8a7 	bl	800ca58 <rcutils_reset_error>
 800c90a:	9803      	ldr	r0, [sp, #12]
 800c90c:	b01e      	add	sp, #120	@ 0x78
 800c90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c912:	200b      	movs	r0, #11
 800c914:	b01e      	add	sp, #120	@ 0x78
 800c916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91a:	200b      	movs	r0, #11
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	0801c868 	.word	0x0801c868

0800c924 <rclc_subscription_init_default>:
 800c924:	b368      	cbz	r0, 800c982 <rclc_subscription_init_default+0x5e>
 800c926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92a:	460d      	mov	r5, r1
 800c92c:	b0a0      	sub	sp, #128	@ 0x80
 800c92e:	b321      	cbz	r1, 800c97a <rclc_subscription_init_default+0x56>
 800c930:	4616      	mov	r6, r2
 800c932:	b312      	cbz	r2, 800c97a <rclc_subscription_init_default+0x56>
 800c934:	461f      	mov	r7, r3
 800c936:	b303      	cbz	r3, 800c97a <rclc_subscription_init_default+0x56>
 800c938:	4604      	mov	r4, r0
 800c93a:	f007 fba5 	bl	8014088 <rcl_get_zero_initialized_subscription>
 800c93e:	f10d 0810 	add.w	r8, sp, #16
 800c942:	6020      	str	r0, [r4, #0]
 800c944:	4640      	mov	r0, r8
 800c946:	f007 fc4d 	bl	80141e4 <rcl_subscription_get_default_options>
 800c94a:	490f      	ldr	r1, [pc, #60]	@ (800c988 <rclc_subscription_init_default+0x64>)
 800c94c:	2250      	movs	r2, #80	@ 0x50
 800c94e:	4640      	mov	r0, r8
 800c950:	f00e fbfb 	bl	801b14a <memcpy>
 800c954:	f8cd 8000 	str.w	r8, [sp]
 800c958:	463b      	mov	r3, r7
 800c95a:	4632      	mov	r2, r6
 800c95c:	4629      	mov	r1, r5
 800c95e:	4620      	mov	r0, r4
 800c960:	f007 fb98 	bl	8014094 <rcl_subscription_init>
 800c964:	b910      	cbnz	r0, 800c96c <rclc_subscription_init_default+0x48>
 800c966:	b020      	add	sp, #128	@ 0x80
 800c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96c:	9003      	str	r0, [sp, #12]
 800c96e:	f000 f873 	bl	800ca58 <rcutils_reset_error>
 800c972:	9803      	ldr	r0, [sp, #12]
 800c974:	b020      	add	sp, #128	@ 0x80
 800c976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c97a:	200b      	movs	r0, #11
 800c97c:	b020      	add	sp, #128	@ 0x80
 800c97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c982:	200b      	movs	r0, #11
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	0801c8b8 	.word	0x0801c8b8

0800c98c <__default_zero_allocate>:
 800c98c:	f00d bdd8 	b.w	801a540 <calloc>

0800c990 <__default_reallocate>:
 800c990:	f00d bfaa 	b.w	801a8e8 <realloc>

0800c994 <__default_deallocate>:
 800c994:	f00d be52 	b.w	801a63c <free>

0800c998 <__default_allocate>:
 800c998:	f00d be48 	b.w	801a62c <malloc>

0800c99c <rcutils_get_zero_initialized_allocator>:
 800c99c:	b510      	push	{r4, lr}
 800c99e:	4c05      	ldr	r4, [pc, #20]	@ (800c9b4 <rcutils_get_zero_initialized_allocator+0x18>)
 800c9a0:	4686      	mov	lr, r0
 800c9a2:	4684      	mov	ip, r0
 800c9a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	f8cc 3000 	str.w	r3, [ip]
 800c9b0:	4670      	mov	r0, lr
 800c9b2:	bd10      	pop	{r4, pc}
 800c9b4:	0801c908 	.word	0x0801c908

0800c9b8 <rcutils_set_default_allocator>:
 800c9b8:	b1a8      	cbz	r0, 800c9e6 <rcutils_set_default_allocator+0x2e>
 800c9ba:	6802      	ldr	r2, [r0, #0]
 800c9bc:	b1a2      	cbz	r2, 800c9e8 <rcutils_set_default_allocator+0x30>
 800c9be:	6841      	ldr	r1, [r0, #4]
 800c9c0:	b1a1      	cbz	r1, 800c9ec <rcutils_set_default_allocator+0x34>
 800c9c2:	b410      	push	{r4}
 800c9c4:	68c4      	ldr	r4, [r0, #12]
 800c9c6:	b164      	cbz	r4, 800c9e2 <rcutils_set_default_allocator+0x2a>
 800c9c8:	6880      	ldr	r0, [r0, #8]
 800c9ca:	b138      	cbz	r0, 800c9dc <rcutils_set_default_allocator+0x24>
 800c9cc:	4b08      	ldr	r3, [pc, #32]	@ (800c9f0 <rcutils_set_default_allocator+0x38>)
 800c9ce:	601a      	str	r2, [r3, #0]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c9d6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c9da:	2001      	movs	r0, #1
 800c9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	e7fa      	b.n	800c9dc <rcutils_set_default_allocator+0x24>
 800c9e6:	4770      	bx	lr
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	4770      	bx	lr
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	4770      	bx	lr
 800c9f0:	2000036c 	.word	0x2000036c

0800c9f4 <rcutils_get_default_allocator>:
 800c9f4:	b510      	push	{r4, lr}
 800c9f6:	4c05      	ldr	r4, [pc, #20]	@ (800ca0c <rcutils_get_default_allocator+0x18>)
 800c9f8:	4686      	mov	lr, r0
 800c9fa:	4684      	mov	ip, r0
 800c9fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	f8cc 3000 	str.w	r3, [ip]
 800ca08:	4670      	mov	r0, lr
 800ca0a:	bd10      	pop	{r4, pc}
 800ca0c:	2000036c 	.word	0x2000036c

0800ca10 <rcutils_allocator_is_valid>:
 800ca10:	b158      	cbz	r0, 800ca2a <rcutils_allocator_is_valid+0x1a>
 800ca12:	6803      	ldr	r3, [r0, #0]
 800ca14:	b143      	cbz	r3, 800ca28 <rcutils_allocator_is_valid+0x18>
 800ca16:	6843      	ldr	r3, [r0, #4]
 800ca18:	b133      	cbz	r3, 800ca28 <rcutils_allocator_is_valid+0x18>
 800ca1a:	68c3      	ldr	r3, [r0, #12]
 800ca1c:	b123      	cbz	r3, 800ca28 <rcutils_allocator_is_valid+0x18>
 800ca1e:	6880      	ldr	r0, [r0, #8]
 800ca20:	3800      	subs	r0, #0
 800ca22:	bf18      	it	ne
 800ca24:	2001      	movne	r0, #1
 800ca26:	4770      	bx	lr
 800ca28:	4618      	mov	r0, r3
 800ca2a:	4770      	bx	lr

0800ca2c <rcutils_get_error_string>:
 800ca2c:	4b06      	ldr	r3, [pc, #24]	@ (800ca48 <rcutils_get_error_string+0x1c>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	b13b      	cbz	r3, 800ca42 <rcutils_get_error_string+0x16>
 800ca32:	4b06      	ldr	r3, [pc, #24]	@ (800ca4c <rcutils_get_error_string+0x20>)
 800ca34:	781a      	ldrb	r2, [r3, #0]
 800ca36:	b90a      	cbnz	r2, 800ca3c <rcutils_get_error_string+0x10>
 800ca38:	2201      	movs	r2, #1
 800ca3a:	701a      	strb	r2, [r3, #0]
 800ca3c:	4b04      	ldr	r3, [pc, #16]	@ (800ca50 <rcutils_get_error_string+0x24>)
 800ca3e:	7818      	ldrb	r0, [r3, #0]
 800ca40:	4770      	bx	lr
 800ca42:	4b04      	ldr	r3, [pc, #16]	@ (800ca54 <rcutils_get_error_string+0x28>)
 800ca44:	7818      	ldrb	r0, [r3, #0]
 800ca46:	4770      	bx	lr
 800ca48:	20010de0 	.word	0x20010de0
 800ca4c:	20010df9 	.word	0x20010df9
 800ca50:	20010df8 	.word	0x20010df8
 800ca54:	0801c268 	.word	0x0801c268

0800ca58 <rcutils_reset_error>:
 800ca58:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ca78 <rcutils_reset_error+0x20>
 800ca5c:	4a08      	ldr	r2, [pc, #32]	@ (800ca80 <rcutils_reset_error+0x28>)
 800ca5e:	4809      	ldr	r0, [pc, #36]	@ (800ca84 <rcutils_reset_error+0x2c>)
 800ca60:	4909      	ldr	r1, [pc, #36]	@ (800ca88 <rcutils_reset_error+0x30>)
 800ca62:	2300      	movs	r3, #0
 800ca64:	8013      	strh	r3, [r2, #0]
 800ca66:	ed82 7b02 	vstr	d7, [r2, #8]
 800ca6a:	4a08      	ldr	r2, [pc, #32]	@ (800ca8c <rcutils_reset_error+0x34>)
 800ca6c:	7003      	strb	r3, [r0, #0]
 800ca6e:	700b      	strb	r3, [r1, #0]
 800ca70:	7013      	strb	r3, [r2, #0]
 800ca72:	4770      	bx	lr
 800ca74:	f3af 8000 	nop.w
	...
 800ca80:	20010de8 	.word	0x20010de8
 800ca84:	20010df9 	.word	0x20010df9
 800ca88:	20010df8 	.word	0x20010df8
 800ca8c:	20010de0 	.word	0x20010de0

0800ca90 <rcutils_system_time_now>:
 800ca90:	b308      	cbz	r0, 800cad6 <rcutils_system_time_now+0x46>
 800ca92:	b570      	push	{r4, r5, r6, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	4604      	mov	r4, r0
 800ca98:	4669      	mov	r1, sp
 800ca9a:	2001      	movs	r0, #1
 800ca9c:	f7f5 fc30 	bl	8002300 <clock_gettime>
 800caa0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	db13      	blt.n	800cad0 <rcutils_system_time_now+0x40>
 800caa8:	9902      	ldr	r1, [sp, #8]
 800caaa:	2900      	cmp	r1, #0
 800caac:	db0d      	blt.n	800caca <rcutils_system_time_now+0x3a>
 800caae:	4e0b      	ldr	r6, [pc, #44]	@ (800cadc <rcutils_system_time_now+0x4c>)
 800cab0:	fba3 3206 	umull	r3, r2, r3, r6
 800cab4:	185b      	adds	r3, r3, r1
 800cab6:	fb06 2205 	mla	r2, r6, r5, r2
 800caba:	f04f 0000 	mov.w	r0, #0
 800cabe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cac2:	e9c4 3200 	strd	r3, r2, [r4]
 800cac6:	b004      	add	sp, #16
 800cac8:	bd70      	pop	{r4, r5, r6, pc}
 800caca:	ea53 0205 	orrs.w	r2, r3, r5
 800cace:	d1ee      	bne.n	800caae <rcutils_system_time_now+0x1e>
 800cad0:	2002      	movs	r0, #2
 800cad2:	b004      	add	sp, #16
 800cad4:	bd70      	pop	{r4, r5, r6, pc}
 800cad6:	200b      	movs	r0, #11
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	3b9aca00 	.word	0x3b9aca00

0800cae0 <rcutils_steady_time_now>:
 800cae0:	b308      	cbz	r0, 800cb26 <rcutils_steady_time_now+0x46>
 800cae2:	b570      	push	{r4, r5, r6, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	4604      	mov	r4, r0
 800cae8:	4669      	mov	r1, sp
 800caea:	2000      	movs	r0, #0
 800caec:	f7f5 fc08 	bl	8002300 <clock_gettime>
 800caf0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800caf4:	2d00      	cmp	r5, #0
 800caf6:	db13      	blt.n	800cb20 <rcutils_steady_time_now+0x40>
 800caf8:	9902      	ldr	r1, [sp, #8]
 800cafa:	2900      	cmp	r1, #0
 800cafc:	db0d      	blt.n	800cb1a <rcutils_steady_time_now+0x3a>
 800cafe:	4e0b      	ldr	r6, [pc, #44]	@ (800cb2c <rcutils_steady_time_now+0x4c>)
 800cb00:	fba3 3206 	umull	r3, r2, r3, r6
 800cb04:	185b      	adds	r3, r3, r1
 800cb06:	fb06 2205 	mla	r2, r6, r5, r2
 800cb0a:	f04f 0000 	mov.w	r0, #0
 800cb0e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cb12:	e9c4 3200 	strd	r3, r2, [r4]
 800cb16:	b004      	add	sp, #16
 800cb18:	bd70      	pop	{r4, r5, r6, pc}
 800cb1a:	ea53 0205 	orrs.w	r2, r3, r5
 800cb1e:	d1ee      	bne.n	800cafe <rcutils_steady_time_now+0x1e>
 800cb20:	2002      	movs	r0, #2
 800cb22:	b004      	add	sp, #16
 800cb24:	bd70      	pop	{r4, r5, r6, pc}
 800cb26:	200b      	movs	r0, #11
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	3b9aca00 	.word	0x3b9aca00

0800cb30 <rmw_get_default_publisher_options>:
 800cb30:	2200      	movs	r2, #0
 800cb32:	6002      	str	r2, [r0, #0]
 800cb34:	7102      	strb	r2, [r0, #4]
 800cb36:	4770      	bx	lr

0800cb38 <rmw_uros_set_custom_transport>:
 800cb38:	b470      	push	{r4, r5, r6}
 800cb3a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800cb3e:	b162      	cbz	r2, 800cb5a <rmw_uros_set_custom_transport+0x22>
 800cb40:	b15b      	cbz	r3, 800cb5a <rmw_uros_set_custom_transport+0x22>
 800cb42:	b155      	cbz	r5, 800cb5a <rmw_uros_set_custom_transport+0x22>
 800cb44:	b14e      	cbz	r6, 800cb5a <rmw_uros_set_custom_transport+0x22>
 800cb46:	4c06      	ldr	r4, [pc, #24]	@ (800cb60 <rmw_uros_set_custom_transport+0x28>)
 800cb48:	7020      	strb	r0, [r4, #0]
 800cb4a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cb4e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cb52:	6166      	str	r6, [r4, #20]
 800cb54:	2000      	movs	r0, #0
 800cb56:	bc70      	pop	{r4, r5, r6}
 800cb58:	4770      	bx	lr
 800cb5a:	200b      	movs	r0, #11
 800cb5c:	bc70      	pop	{r4, r5, r6}
 800cb5e:	4770      	bx	lr
 800cb60:	20010dfc 	.word	0x20010dfc

0800cb64 <flush_session>:
 800cb64:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800cb66:	f004 bb37 	b.w	80111d8 <uxr_run_session_until_confirm_delivery>
 800cb6a:	bf00      	nop

0800cb6c <rmw_publish>:
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d053      	beq.n	800cc18 <rmw_publish+0xac>
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	460d      	mov	r5, r1
 800cb74:	b08e      	sub	sp, #56	@ 0x38
 800cb76:	2900      	cmp	r1, #0
 800cb78:	d04b      	beq.n	800cc12 <rmw_publish+0xa6>
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	6800      	ldr	r0, [r0, #0]
 800cb7e:	f000 fd87 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d045      	beq.n	800cc12 <rmw_publish+0xa6>
 800cb86:	6866      	ldr	r6, [r4, #4]
 800cb88:	2e00      	cmp	r6, #0
 800cb8a:	d042      	beq.n	800cc12 <rmw_publish+0xa6>
 800cb8c:	69b4      	ldr	r4, [r6, #24]
 800cb8e:	4628      	mov	r0, r5
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	4798      	blx	r3
 800cb94:	69f3      	ldr	r3, [r6, #28]
 800cb96:	9005      	str	r0, [sp, #20]
 800cb98:	b113      	cbz	r3, 800cba0 <rmw_publish+0x34>
 800cb9a:	a805      	add	r0, sp, #20
 800cb9c:	4798      	blx	r3
 800cb9e:	9805      	ldr	r0, [sp, #20]
 800cba0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	9000      	str	r0, [sp, #0]
 800cba8:	6972      	ldr	r2, [r6, #20]
 800cbaa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cbac:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800cbb0:	ab06      	add	r3, sp, #24
 800cbb2:	f005 f8fd 	bl	8011db0 <uxr_prepare_output_stream>
 800cbb6:	b1d8      	cbz	r0, 800cbf0 <rmw_publish+0x84>
 800cbb8:	68a3      	ldr	r3, [r4, #8]
 800cbba:	a906      	add	r1, sp, #24
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	4798      	blx	r3
 800cbc0:	6a33      	ldr	r3, [r6, #32]
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	b10b      	cbz	r3, 800cbca <rmw_publish+0x5e>
 800cbc6:	a806      	add	r0, sp, #24
 800cbc8:	4798      	blx	r3
 800cbca:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cbd4:	d022      	beq.n	800cc1c <rmw_publish+0xb0>
 800cbd6:	6918      	ldr	r0, [r3, #16]
 800cbd8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800cbda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cbde:	f004 fafb 	bl	80111d8 <uxr_run_session_until_confirm_delivery>
 800cbe2:	4020      	ands	r0, r4
 800cbe4:	b2c4      	uxtb	r4, r0
 800cbe6:	f084 0001 	eor.w	r0, r4, #1
 800cbea:	b2c0      	uxtb	r0, r0
 800cbec:	b00e      	add	sp, #56	@ 0x38
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800cbf4:	6918      	ldr	r0, [r3, #16]
 800cbf6:	9b05      	ldr	r3, [sp, #20]
 800cbf8:	9300      	str	r3, [sp, #0]
 800cbfa:	4b0b      	ldr	r3, [pc, #44]	@ (800cc28 <rmw_publish+0xbc>)
 800cbfc:	9301      	str	r3, [sp, #4]
 800cbfe:	9602      	str	r6, [sp, #8]
 800cc00:	6972      	ldr	r2, [r6, #20]
 800cc02:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800cc04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc08:	ab06      	add	r3, sp, #24
 800cc0a:	f005 f901 	bl	8011e10 <uxr_prepare_output_stream_fragmented>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d1d2      	bne.n	800cbb8 <rmw_publish+0x4c>
 800cc12:	2001      	movs	r0, #1
 800cc14:	b00e      	add	sp, #56	@ 0x38
 800cc16:	bd70      	pop	{r4, r5, r6, pc}
 800cc18:	2001      	movs	r0, #1
 800cc1a:	4770      	bx	lr
 800cc1c:	6918      	ldr	r0, [r3, #16]
 800cc1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cc22:	f003 ff19 	bl	8010a58 <uxr_flash_output_streams>
 800cc26:	e7de      	b.n	800cbe6 <rmw_publish+0x7a>
 800cc28:	0800cb65 	.word	0x0800cb65

0800cc2c <rmw_create_publisher>:
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	b087      	sub	sp, #28
 800cc32:	2800      	cmp	r0, #0
 800cc34:	f000 80cc 	beq.w	800cdd0 <rmw_create_publisher+0x1a4>
 800cc38:	460e      	mov	r6, r1
 800cc3a:	2900      	cmp	r1, #0
 800cc3c:	f000 80c8 	beq.w	800cdd0 <rmw_create_publisher+0x1a4>
 800cc40:	4604      	mov	r4, r0
 800cc42:	6800      	ldr	r0, [r0, #0]
 800cc44:	4615      	mov	r5, r2
 800cc46:	4698      	mov	r8, r3
 800cc48:	f000 fd22 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f000 80bf 	beq.w	800cdd0 <rmw_create_publisher+0x1a4>
 800cc52:	2d00      	cmp	r5, #0
 800cc54:	f000 80bc 	beq.w	800cdd0 <rmw_create_publisher+0x1a4>
 800cc58:	782b      	ldrb	r3, [r5, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80b8 	beq.w	800cdd0 <rmw_create_publisher+0x1a4>
 800cc60:	f1b8 0f00 	cmp.w	r8, #0
 800cc64:	f000 80b4 	beq.w	800cdd0 <rmw_create_publisher+0x1a4>
 800cc68:	485c      	ldr	r0, [pc, #368]	@ (800cddc <rmw_create_publisher+0x1b0>)
 800cc6a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cc6e:	f009 fe0f 	bl	8016890 <get_memory>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	f000 80ac 	beq.w	800cdd0 <rmw_create_publisher+0x1a4>
 800cc78:	6884      	ldr	r4, [r0, #8]
 800cc7a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800cc7e:	f009 fe6f 	bl	8016960 <rmw_get_implementation_identifier>
 800cc82:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800cc86:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800cc8a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800cc8e:	4628      	mov	r0, r5
 800cc90:	f7f3 fab6 	bl	8000200 <strlen>
 800cc94:	3001      	adds	r0, #1
 800cc96:	283c      	cmp	r0, #60	@ 0x3c
 800cc98:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800cc9c:	f200 8091 	bhi.w	800cdc2 <rmw_create_publisher+0x196>
 800cca0:	4a4f      	ldr	r2, [pc, #316]	@ (800cde0 <rmw_create_publisher+0x1b4>)
 800cca2:	462b      	mov	r3, r5
 800cca4:	213c      	movs	r1, #60	@ 0x3c
 800cca6:	4650      	mov	r0, sl
 800cca8:	f00d fd72 	bl	801a790 <sniprintf>
 800ccac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ccb0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ccb2:	4641      	mov	r1, r8
 800ccb4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ccb8:	2250      	movs	r2, #80	@ 0x50
 800ccba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ccbe:	f00e fa44 	bl	801b14a <memcpy>
 800ccc2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ccc6:	4947      	ldr	r1, [pc, #284]	@ (800cde4 <rmw_create_publisher+0x1b8>)
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccce:	bf0c      	ite	eq
 800ccd0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ccd4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ccd8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800cce0:	4630      	mov	r0, r6
 800cce2:	f000 fce3 	bl	800d6ac <get_message_typesupport_handle>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d06b      	beq.n	800cdc2 <rmw_create_publisher+0x196>
 800ccea:	6842      	ldr	r2, [r0, #4]
 800ccec:	61a2      	str	r2, [r4, #24]
 800ccee:	2a00      	cmp	r2, #0
 800ccf0:	d067      	beq.n	800cdc2 <rmw_create_publisher+0x196>
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4643      	mov	r3, r8
 800ccf6:	4648      	mov	r0, r9
 800ccf8:	f00a f898 	bl	8016e2c <create_topic>
 800ccfc:	6260      	str	r0, [r4, #36]	@ 0x24
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d063      	beq.n	800cdca <rmw_create_publisher+0x19e>
 800cd02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd0a:	2103      	movs	r1, #3
 800cd0c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800cd10:	1c42      	adds	r2, r0, #1
 800cd12:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800cd16:	f003 fd4f 	bl	80107b8 <uxr_object_id>
 800cd1a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800cd1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd22:	6120      	str	r0, [r4, #16]
 800cd24:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800cd28:	6910      	ldr	r0, [r2, #16]
 800cd2a:	2506      	movs	r5, #6
 800cd2c:	9500      	str	r5, [sp, #0]
 800cd2e:	6819      	ldr	r1, [r3, #0]
 800cd30:	6922      	ldr	r2, [r4, #16]
 800cd32:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800cd36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cd3a:	f003 fbb5 	bl	80104a8 <uxr_buffer_create_publisher_bin>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cd44:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cd48:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cd4c:	f000 fb86 	bl	800d45c <run_xrce_session>
 800cd50:	b3b8      	cbz	r0, 800cdc2 <rmw_create_publisher+0x196>
 800cd52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cd5a:	2105      	movs	r1, #5
 800cd5c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800cd60:	1c42      	adds	r2, r0, #1
 800cd62:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800cd66:	f003 fd27 	bl	80107b8 <uxr_object_id>
 800cd6a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800cd6e:	6160      	str	r0, [r4, #20]
 800cd70:	691e      	ldr	r6, [r3, #16]
 800cd72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd76:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800cd7a:	f10d 0a10 	add.w	sl, sp, #16
 800cd7e:	4641      	mov	r1, r8
 800cd80:	4650      	mov	r0, sl
 800cd82:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800cd86:	f000 fb85 	bl	800d494 <convert_qos_profile>
 800cd8a:	9503      	str	r5, [sp, #12]
 800cd8c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800cd90:	9001      	str	r0, [sp, #4]
 800cd92:	f8ad 1008 	strh.w	r1, [sp, #8]
 800cd96:	f8db 3010 	ldr.w	r3, [fp, #16]
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800cda0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800cda4:	f8d8 1000 	ldr.w	r1, [r8]
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f003 fbdd 	bl	8010568 <uxr_buffer_create_datawriter_bin>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cdb4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800cdb8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800cdbc:	f000 fb4e 	bl	800d45c <run_xrce_session>
 800cdc0:	b938      	cbnz	r0, 800cdd2 <rmw_create_publisher+0x1a6>
 800cdc2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800cdc4:	b108      	cbz	r0, 800cdca <rmw_create_publisher+0x19e>
 800cdc6:	f000 fa47 	bl	800d258 <rmw_uxrce_fini_topic_memory>
 800cdca:	4638      	mov	r0, r7
 800cdcc:	f000 f9ec 	bl	800d1a8 <rmw_uxrce_fini_publisher_memory>
 800cdd0:	2700      	movs	r7, #0
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	b007      	add	sp, #28
 800cdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdda:	bf00      	nop
 800cddc:	20015ba4 	.word	0x20015ba4
 800cde0:	0801c92c 	.word	0x0801c92c
 800cde4:	0801c1b4 	.word	0x0801c1b4

0800cde8 <rmw_publisher_get_actual_qos>:
 800cde8:	b150      	cbz	r0, 800ce00 <rmw_publisher_get_actual_qos+0x18>
 800cdea:	b508      	push	{r3, lr}
 800cdec:	460b      	mov	r3, r1
 800cdee:	b149      	cbz	r1, 800ce04 <rmw_publisher_get_actual_qos+0x1c>
 800cdf0:	6841      	ldr	r1, [r0, #4]
 800cdf2:	2250      	movs	r2, #80	@ 0x50
 800cdf4:	3128      	adds	r1, #40	@ 0x28
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f00e f9a7 	bl	801b14a <memcpy>
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	bd08      	pop	{r3, pc}
 800ce00:	200b      	movs	r0, #11
 800ce02:	4770      	bx	lr
 800ce04:	200b      	movs	r0, #11
 800ce06:	bd08      	pop	{r3, pc}

0800ce08 <rmw_destroy_publisher>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	b128      	cbz	r0, 800ce18 <rmw_destroy_publisher+0x10>
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	6800      	ldr	r0, [r0, #0]
 800ce10:	460d      	mov	r5, r1
 800ce12:	f000 fc3d 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 800ce16:	b910      	cbnz	r0, 800ce1e <rmw_destroy_publisher+0x16>
 800ce18:	2401      	movs	r4, #1
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce1e:	6863      	ldr	r3, [r4, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d0f9      	beq.n	800ce18 <rmw_destroy_publisher+0x10>
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	d0f7      	beq.n	800ce18 <rmw_destroy_publisher+0x10>
 800ce28:	6828      	ldr	r0, [r5, #0]
 800ce2a:	f000 fc31 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d0f2      	beq.n	800ce18 <rmw_destroy_publisher+0x10>
 800ce32:	686c      	ldr	r4, [r5, #4]
 800ce34:	2c00      	cmp	r4, #0
 800ce36:	d0ef      	beq.n	800ce18 <rmw_destroy_publisher+0x10>
 800ce38:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ce3a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ce3e:	f00a f845 	bl	8016ecc <destroy_topic>
 800ce42:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ce46:	6962      	ldr	r2, [r4, #20]
 800ce48:	6918      	ldr	r0, [r3, #16]
 800ce4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ce4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ce52:	6819      	ldr	r1, [r3, #0]
 800ce54:	f003 fa74 	bl	8010340 <uxr_buffer_delete_entity>
 800ce58:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ce5c:	6922      	ldr	r2, [r4, #16]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ce64:	4604      	mov	r4, r0
 800ce66:	6809      	ldr	r1, [r1, #0]
 800ce68:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ce6c:	f003 fa68 	bl	8010340 <uxr_buffer_delete_entity>
 800ce70:	693e      	ldr	r6, [r7, #16]
 800ce72:	4622      	mov	r2, r4
 800ce74:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ce78:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f000 faec 	bl	800d45c <run_xrce_session>
 800ce84:	693e      	ldr	r6, [r7, #16]
 800ce86:	4622      	mov	r2, r4
 800ce88:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ce8c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ce90:	4604      	mov	r4, r0
 800ce92:	4630      	mov	r0, r6
 800ce94:	f000 fae2 	bl	800d45c <run_xrce_session>
 800ce98:	b12c      	cbz	r4, 800cea6 <rmw_destroy_publisher+0x9e>
 800ce9a:	b120      	cbz	r0, 800cea6 <rmw_destroy_publisher+0x9e>
 800ce9c:	2400      	movs	r4, #0
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f000 f982 	bl	800d1a8 <rmw_uxrce_fini_publisher_memory>
 800cea4:	e7b9      	b.n	800ce1a <rmw_destroy_publisher+0x12>
 800cea6:	2402      	movs	r4, #2
 800cea8:	e7f9      	b.n	800ce9e <rmw_destroy_publisher+0x96>
 800ceaa:	bf00      	nop

0800ceac <rmw_uxrce_init_service_memory>:
 800ceac:	b1e2      	cbz	r2, 800cee8 <rmw_uxrce_init_service_memory+0x3c>
 800ceae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb2:	7b05      	ldrb	r5, [r0, #12]
 800ceb4:	4606      	mov	r6, r0
 800ceb6:	b9ad      	cbnz	r5, 800cee4 <rmw_uxrce_init_service_memory+0x38>
 800ceb8:	23c8      	movs	r3, #200	@ 0xc8
 800ceba:	e9c0 5500 	strd	r5, r5, [r0]
 800cebe:	6083      	str	r3, [r0, #8]
 800cec0:	f240 1301 	movw	r3, #257	@ 0x101
 800cec4:	4617      	mov	r7, r2
 800cec6:	8183      	strh	r3, [r0, #12]
 800cec8:	460c      	mov	r4, r1
 800ceca:	46a8      	mov	r8, r5
 800cecc:	4621      	mov	r1, r4
 800cece:	4630      	mov	r0, r6
 800ced0:	3501      	adds	r5, #1
 800ced2:	f009 fced 	bl	80168b0 <put_memory>
 800ced6:	42af      	cmp	r7, r5
 800ced8:	60a4      	str	r4, [r4, #8]
 800ceda:	f884 800c 	strb.w	r8, [r4, #12]
 800cede:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cee2:	d1f3      	bne.n	800cecc <rmw_uxrce_init_service_memory+0x20>
 800cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop

0800ceec <rmw_uxrce_init_client_memory>:
 800ceec:	b1e2      	cbz	r2, 800cf28 <rmw_uxrce_init_client_memory+0x3c>
 800ceee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cef2:	7b05      	ldrb	r5, [r0, #12]
 800cef4:	4606      	mov	r6, r0
 800cef6:	b9ad      	cbnz	r5, 800cf24 <rmw_uxrce_init_client_memory+0x38>
 800cef8:	23c8      	movs	r3, #200	@ 0xc8
 800cefa:	e9c0 5500 	strd	r5, r5, [r0]
 800cefe:	6083      	str	r3, [r0, #8]
 800cf00:	f240 1301 	movw	r3, #257	@ 0x101
 800cf04:	4617      	mov	r7, r2
 800cf06:	8183      	strh	r3, [r0, #12]
 800cf08:	460c      	mov	r4, r1
 800cf0a:	46a8      	mov	r8, r5
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4630      	mov	r0, r6
 800cf10:	3501      	adds	r5, #1
 800cf12:	f009 fccd 	bl	80168b0 <put_memory>
 800cf16:	42af      	cmp	r7, r5
 800cf18:	60a4      	str	r4, [r4, #8]
 800cf1a:	f884 800c 	strb.w	r8, [r4, #12]
 800cf1e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800cf22:	d1f3      	bne.n	800cf0c <rmw_uxrce_init_client_memory+0x20>
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop

0800cf2c <rmw_uxrce_init_publisher_memory>:
 800cf2c:	b1e2      	cbz	r2, 800cf68 <rmw_uxrce_init_publisher_memory+0x3c>
 800cf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf32:	7b05      	ldrb	r5, [r0, #12]
 800cf34:	4606      	mov	r6, r0
 800cf36:	b9ad      	cbnz	r5, 800cf64 <rmw_uxrce_init_publisher_memory+0x38>
 800cf38:	23d8      	movs	r3, #216	@ 0xd8
 800cf3a:	e9c0 5500 	strd	r5, r5, [r0]
 800cf3e:	6083      	str	r3, [r0, #8]
 800cf40:	f240 1301 	movw	r3, #257	@ 0x101
 800cf44:	4617      	mov	r7, r2
 800cf46:	8183      	strh	r3, [r0, #12]
 800cf48:	460c      	mov	r4, r1
 800cf4a:	46a8      	mov	r8, r5
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4630      	mov	r0, r6
 800cf50:	3501      	adds	r5, #1
 800cf52:	f009 fcad 	bl	80168b0 <put_memory>
 800cf56:	42af      	cmp	r7, r5
 800cf58:	60a4      	str	r4, [r4, #8]
 800cf5a:	f884 800c 	strb.w	r8, [r4, #12]
 800cf5e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cf62:	d1f3      	bne.n	800cf4c <rmw_uxrce_init_publisher_memory+0x20>
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop

0800cf6c <rmw_uxrce_init_subscription_memory>:
 800cf6c:	b1e2      	cbz	r2, 800cfa8 <rmw_uxrce_init_subscription_memory+0x3c>
 800cf6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf72:	7b05      	ldrb	r5, [r0, #12]
 800cf74:	4606      	mov	r6, r0
 800cf76:	b9ad      	cbnz	r5, 800cfa4 <rmw_uxrce_init_subscription_memory+0x38>
 800cf78:	23d8      	movs	r3, #216	@ 0xd8
 800cf7a:	e9c0 5500 	strd	r5, r5, [r0]
 800cf7e:	6083      	str	r3, [r0, #8]
 800cf80:	f240 1301 	movw	r3, #257	@ 0x101
 800cf84:	4617      	mov	r7, r2
 800cf86:	8183      	strh	r3, [r0, #12]
 800cf88:	460c      	mov	r4, r1
 800cf8a:	46a8      	mov	r8, r5
 800cf8c:	4621      	mov	r1, r4
 800cf8e:	4630      	mov	r0, r6
 800cf90:	3501      	adds	r5, #1
 800cf92:	f009 fc8d 	bl	80168b0 <put_memory>
 800cf96:	42af      	cmp	r7, r5
 800cf98:	60a4      	str	r4, [r4, #8]
 800cf9a:	f884 800c 	strb.w	r8, [r4, #12]
 800cf9e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cfa2:	d1f3      	bne.n	800cf8c <rmw_uxrce_init_subscription_memory+0x20>
 800cfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop

0800cfac <rmw_uxrce_init_node_memory>:
 800cfac:	b1e2      	cbz	r2, 800cfe8 <rmw_uxrce_init_node_memory+0x3c>
 800cfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb2:	7b05      	ldrb	r5, [r0, #12]
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	b9ad      	cbnz	r5, 800cfe4 <rmw_uxrce_init_node_memory+0x38>
 800cfb8:	23a4      	movs	r3, #164	@ 0xa4
 800cfba:	e9c0 5500 	strd	r5, r5, [r0]
 800cfbe:	6083      	str	r3, [r0, #8]
 800cfc0:	f240 1301 	movw	r3, #257	@ 0x101
 800cfc4:	4617      	mov	r7, r2
 800cfc6:	8183      	strh	r3, [r0, #12]
 800cfc8:	460c      	mov	r4, r1
 800cfca:	46a8      	mov	r8, r5
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4630      	mov	r0, r6
 800cfd0:	3501      	adds	r5, #1
 800cfd2:	f009 fc6d 	bl	80168b0 <put_memory>
 800cfd6:	42af      	cmp	r7, r5
 800cfd8:	60a4      	str	r4, [r4, #8]
 800cfda:	f884 800c 	strb.w	r8, [r4, #12]
 800cfde:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800cfe2:	d1f3      	bne.n	800cfcc <rmw_uxrce_init_node_memory+0x20>
 800cfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop

0800cfec <rmw_uxrce_init_session_memory>:
 800cfec:	b1ea      	cbz	r2, 800d02a <rmw_uxrce_init_session_memory+0x3e>
 800cfee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cff2:	7b05      	ldrb	r5, [r0, #12]
 800cff4:	4606      	mov	r6, r0
 800cff6:	b9b5      	cbnz	r5, 800d026 <rmw_uxrce_init_session_memory+0x3a>
 800cff8:	e9c0 5500 	strd	r5, r5, [r0]
 800cffc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d000:	f240 1301 	movw	r3, #257	@ 0x101
 800d004:	4617      	mov	r7, r2
 800d006:	f8c0 8008 	str.w	r8, [r0, #8]
 800d00a:	460c      	mov	r4, r1
 800d00c:	8183      	strh	r3, [r0, #12]
 800d00e:	46a9      	mov	r9, r5
 800d010:	4621      	mov	r1, r4
 800d012:	4630      	mov	r0, r6
 800d014:	3501      	adds	r5, #1
 800d016:	f009 fc4b 	bl	80168b0 <put_memory>
 800d01a:	42af      	cmp	r7, r5
 800d01c:	60a4      	str	r4, [r4, #8]
 800d01e:	f884 900c 	strb.w	r9, [r4, #12]
 800d022:	4444      	add	r4, r8
 800d024:	d1f4      	bne.n	800d010 <rmw_uxrce_init_session_memory+0x24>
 800d026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02a:	4770      	bx	lr

0800d02c <rmw_uxrce_init_topic_memory>:
 800d02c:	b1e2      	cbz	r2, 800d068 <rmw_uxrce_init_topic_memory+0x3c>
 800d02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d032:	7b05      	ldrb	r5, [r0, #12]
 800d034:	4606      	mov	r6, r0
 800d036:	b9ad      	cbnz	r5, 800d064 <rmw_uxrce_init_topic_memory+0x38>
 800d038:	231c      	movs	r3, #28
 800d03a:	e9c0 5500 	strd	r5, r5, [r0]
 800d03e:	6083      	str	r3, [r0, #8]
 800d040:	f240 1301 	movw	r3, #257	@ 0x101
 800d044:	4617      	mov	r7, r2
 800d046:	8183      	strh	r3, [r0, #12]
 800d048:	460c      	mov	r4, r1
 800d04a:	46a8      	mov	r8, r5
 800d04c:	4621      	mov	r1, r4
 800d04e:	4630      	mov	r0, r6
 800d050:	3501      	adds	r5, #1
 800d052:	f009 fc2d 	bl	80168b0 <put_memory>
 800d056:	42af      	cmp	r7, r5
 800d058:	60a4      	str	r4, [r4, #8]
 800d05a:	f884 800c 	strb.w	r8, [r4, #12]
 800d05e:	f104 041c 	add.w	r4, r4, #28
 800d062:	d1f3      	bne.n	800d04c <rmw_uxrce_init_topic_memory+0x20>
 800d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d068:	4770      	bx	lr
 800d06a:	bf00      	nop

0800d06c <rmw_uxrce_init_static_input_buffer_memory>:
 800d06c:	b1ea      	cbz	r2, 800d0aa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d072:	7b05      	ldrb	r5, [r0, #12]
 800d074:	4606      	mov	r6, r0
 800d076:	b9b5      	cbnz	r5, 800d0a6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d078:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d07c:	e9c0 5500 	strd	r5, r5, [r0]
 800d080:	6083      	str	r3, [r0, #8]
 800d082:	f240 1301 	movw	r3, #257	@ 0x101
 800d086:	4617      	mov	r7, r2
 800d088:	8183      	strh	r3, [r0, #12]
 800d08a:	460c      	mov	r4, r1
 800d08c:	46a8      	mov	r8, r5
 800d08e:	4621      	mov	r1, r4
 800d090:	4630      	mov	r0, r6
 800d092:	3501      	adds	r5, #1
 800d094:	f009 fc0c 	bl	80168b0 <put_memory>
 800d098:	42af      	cmp	r7, r5
 800d09a:	60a4      	str	r4, [r4, #8]
 800d09c:	f884 800c 	strb.w	r8, [r4, #12]
 800d0a0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d0a4:	d1f3      	bne.n	800d08e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0aa:	4770      	bx	lr

0800d0ac <rmw_uxrce_init_init_options_impl_memory>:
 800d0ac:	b1e2      	cbz	r2, 800d0e8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b2:	7b05      	ldrb	r5, [r0, #12]
 800d0b4:	4606      	mov	r6, r0
 800d0b6:	b9ad      	cbnz	r5, 800d0e4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d0b8:	232c      	movs	r3, #44	@ 0x2c
 800d0ba:	e9c0 5500 	strd	r5, r5, [r0]
 800d0be:	6083      	str	r3, [r0, #8]
 800d0c0:	f240 1301 	movw	r3, #257	@ 0x101
 800d0c4:	4617      	mov	r7, r2
 800d0c6:	8183      	strh	r3, [r0, #12]
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	46a8      	mov	r8, r5
 800d0cc:	4621      	mov	r1, r4
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	3501      	adds	r5, #1
 800d0d2:	f009 fbed 	bl	80168b0 <put_memory>
 800d0d6:	42af      	cmp	r7, r5
 800d0d8:	60a4      	str	r4, [r4, #8]
 800d0da:	f884 800c 	strb.w	r8, [r4, #12]
 800d0de:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d0e2:	d1f3      	bne.n	800d0cc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop

0800d0ec <rmw_uxrce_init_wait_set_memory>:
 800d0ec:	b1e2      	cbz	r2, 800d128 <rmw_uxrce_init_wait_set_memory+0x3c>
 800d0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f2:	7b05      	ldrb	r5, [r0, #12]
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	b9ad      	cbnz	r5, 800d124 <rmw_uxrce_init_wait_set_memory+0x38>
 800d0f8:	231c      	movs	r3, #28
 800d0fa:	e9c0 5500 	strd	r5, r5, [r0]
 800d0fe:	6083      	str	r3, [r0, #8]
 800d100:	f240 1301 	movw	r3, #257	@ 0x101
 800d104:	4617      	mov	r7, r2
 800d106:	8183      	strh	r3, [r0, #12]
 800d108:	460c      	mov	r4, r1
 800d10a:	46a8      	mov	r8, r5
 800d10c:	4621      	mov	r1, r4
 800d10e:	4630      	mov	r0, r6
 800d110:	3501      	adds	r5, #1
 800d112:	f009 fbcd 	bl	80168b0 <put_memory>
 800d116:	42af      	cmp	r7, r5
 800d118:	60a4      	str	r4, [r4, #8]
 800d11a:	f884 800c 	strb.w	r8, [r4, #12]
 800d11e:	f104 041c 	add.w	r4, r4, #28
 800d122:	d1f3      	bne.n	800d10c <rmw_uxrce_init_wait_set_memory+0x20>
 800d124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop

0800d12c <rmw_uxrce_init_guard_condition_memory>:
 800d12c:	b1e2      	cbz	r2, 800d168 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d132:	7b05      	ldrb	r5, [r0, #12]
 800d134:	4606      	mov	r6, r0
 800d136:	b9ad      	cbnz	r5, 800d164 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d138:	2320      	movs	r3, #32
 800d13a:	e9c0 5500 	strd	r5, r5, [r0]
 800d13e:	6083      	str	r3, [r0, #8]
 800d140:	f240 1301 	movw	r3, #257	@ 0x101
 800d144:	4617      	mov	r7, r2
 800d146:	8183      	strh	r3, [r0, #12]
 800d148:	460c      	mov	r4, r1
 800d14a:	46a8      	mov	r8, r5
 800d14c:	4621      	mov	r1, r4
 800d14e:	4630      	mov	r0, r6
 800d150:	3501      	adds	r5, #1
 800d152:	f009 fbad 	bl	80168b0 <put_memory>
 800d156:	42af      	cmp	r7, r5
 800d158:	60a4      	str	r4, [r4, #8]
 800d15a:	f884 800c 	strb.w	r8, [r4, #12]
 800d15e:	f104 0420 	add.w	r4, r4, #32
 800d162:	d1f3      	bne.n	800d14c <rmw_uxrce_init_guard_condition_memory+0x20>
 800d164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop

0800d16c <rmw_uxrce_fini_session_memory>:
 800d16c:	4601      	mov	r1, r0
 800d16e:	4801      	ldr	r0, [pc, #4]	@ (800d174 <rmw_uxrce_fini_session_memory+0x8>)
 800d170:	f009 bb9e 	b.w	80168b0 <put_memory>
 800d174:	20015bc4 	.word	0x20015bc4

0800d178 <rmw_uxrce_fini_node_memory>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4604      	mov	r4, r0
 800d17c:	6800      	ldr	r0, [r0, #0]
 800d17e:	b128      	cbz	r0, 800d18c <rmw_uxrce_fini_node_memory+0x14>
 800d180:	4b07      	ldr	r3, [pc, #28]	@ (800d1a0 <rmw_uxrce_fini_node_memory+0x28>)
 800d182:	6819      	ldr	r1, [r3, #0]
 800d184:	f7f3 f844 	bl	8000210 <strcmp>
 800d188:	b940      	cbnz	r0, 800d19c <rmw_uxrce_fini_node_memory+0x24>
 800d18a:	6020      	str	r0, [r4, #0]
 800d18c:	6861      	ldr	r1, [r4, #4]
 800d18e:	b129      	cbz	r1, 800d19c <rmw_uxrce_fini_node_memory+0x24>
 800d190:	2500      	movs	r5, #0
 800d192:	4804      	ldr	r0, [pc, #16]	@ (800d1a4 <rmw_uxrce_fini_node_memory+0x2c>)
 800d194:	610d      	str	r5, [r1, #16]
 800d196:	f009 fb8b 	bl	80168b0 <put_memory>
 800d19a:	6065      	str	r5, [r4, #4]
 800d19c:	bd38      	pop	{r3, r4, r5, pc}
 800d19e:	bf00      	nop
 800d1a0:	0801d5a4 	.word	0x0801d5a4
 800d1a4:	20015b94 	.word	0x20015b94

0800d1a8 <rmw_uxrce_fini_publisher_memory>:
 800d1a8:	b510      	push	{r4, lr}
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	6800      	ldr	r0, [r0, #0]
 800d1ae:	b128      	cbz	r0, 800d1bc <rmw_uxrce_fini_publisher_memory+0x14>
 800d1b0:	4b06      	ldr	r3, [pc, #24]	@ (800d1cc <rmw_uxrce_fini_publisher_memory+0x24>)
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	f7f3 f82c 	bl	8000210 <strcmp>
 800d1b8:	b938      	cbnz	r0, 800d1ca <rmw_uxrce_fini_publisher_memory+0x22>
 800d1ba:	6020      	str	r0, [r4, #0]
 800d1bc:	6861      	ldr	r1, [r4, #4]
 800d1be:	b121      	cbz	r1, 800d1ca <rmw_uxrce_fini_publisher_memory+0x22>
 800d1c0:	4803      	ldr	r0, [pc, #12]	@ (800d1d0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d1c2:	f009 fb75 	bl	80168b0 <put_memory>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	6063      	str	r3, [r4, #4]
 800d1ca:	bd10      	pop	{r4, pc}
 800d1cc:	0801d5a4 	.word	0x0801d5a4
 800d1d0:	20015ba4 	.word	0x20015ba4

0800d1d4 <rmw_uxrce_fini_subscription_memory>:
 800d1d4:	b510      	push	{r4, lr}
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	6800      	ldr	r0, [r0, #0]
 800d1da:	b128      	cbz	r0, 800d1e8 <rmw_uxrce_fini_subscription_memory+0x14>
 800d1dc:	4b06      	ldr	r3, [pc, #24]	@ (800d1f8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800d1de:	6819      	ldr	r1, [r3, #0]
 800d1e0:	f7f3 f816 	bl	8000210 <strcmp>
 800d1e4:	b938      	cbnz	r0, 800d1f6 <rmw_uxrce_fini_subscription_memory+0x22>
 800d1e6:	6020      	str	r0, [r4, #0]
 800d1e8:	6861      	ldr	r1, [r4, #4]
 800d1ea:	b121      	cbz	r1, 800d1f6 <rmw_uxrce_fini_subscription_memory+0x22>
 800d1ec:	4803      	ldr	r0, [pc, #12]	@ (800d1fc <rmw_uxrce_fini_subscription_memory+0x28>)
 800d1ee:	f009 fb5f 	bl	80168b0 <put_memory>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	6063      	str	r3, [r4, #4]
 800d1f6:	bd10      	pop	{r4, pc}
 800d1f8:	0801d5a4 	.word	0x0801d5a4
 800d1fc:	20015be4 	.word	0x20015be4

0800d200 <rmw_uxrce_fini_service_memory>:
 800d200:	b510      	push	{r4, lr}
 800d202:	4604      	mov	r4, r0
 800d204:	6800      	ldr	r0, [r0, #0]
 800d206:	b128      	cbz	r0, 800d214 <rmw_uxrce_fini_service_memory+0x14>
 800d208:	4b06      	ldr	r3, [pc, #24]	@ (800d224 <rmw_uxrce_fini_service_memory+0x24>)
 800d20a:	6819      	ldr	r1, [r3, #0]
 800d20c:	f7f3 f800 	bl	8000210 <strcmp>
 800d210:	b938      	cbnz	r0, 800d222 <rmw_uxrce_fini_service_memory+0x22>
 800d212:	6020      	str	r0, [r4, #0]
 800d214:	6861      	ldr	r1, [r4, #4]
 800d216:	b121      	cbz	r1, 800d222 <rmw_uxrce_fini_service_memory+0x22>
 800d218:	4803      	ldr	r0, [pc, #12]	@ (800d228 <rmw_uxrce_fini_service_memory+0x28>)
 800d21a:	f009 fb49 	bl	80168b0 <put_memory>
 800d21e:	2300      	movs	r3, #0
 800d220:	6063      	str	r3, [r4, #4]
 800d222:	bd10      	pop	{r4, pc}
 800d224:	0801d5a4 	.word	0x0801d5a4
 800d228:	20015bb4 	.word	0x20015bb4

0800d22c <rmw_uxrce_fini_client_memory>:
 800d22c:	b510      	push	{r4, lr}
 800d22e:	4604      	mov	r4, r0
 800d230:	6800      	ldr	r0, [r0, #0]
 800d232:	b128      	cbz	r0, 800d240 <rmw_uxrce_fini_client_memory+0x14>
 800d234:	4b06      	ldr	r3, [pc, #24]	@ (800d250 <rmw_uxrce_fini_client_memory+0x24>)
 800d236:	6819      	ldr	r1, [r3, #0]
 800d238:	f7f2 ffea 	bl	8000210 <strcmp>
 800d23c:	b938      	cbnz	r0, 800d24e <rmw_uxrce_fini_client_memory+0x22>
 800d23e:	6020      	str	r0, [r4, #0]
 800d240:	6861      	ldr	r1, [r4, #4]
 800d242:	b121      	cbz	r1, 800d24e <rmw_uxrce_fini_client_memory+0x22>
 800d244:	4803      	ldr	r0, [pc, #12]	@ (800d254 <rmw_uxrce_fini_client_memory+0x28>)
 800d246:	f009 fb33 	bl	80168b0 <put_memory>
 800d24a:	2300      	movs	r3, #0
 800d24c:	6063      	str	r3, [r4, #4]
 800d24e:	bd10      	pop	{r4, pc}
 800d250:	0801d5a4 	.word	0x0801d5a4
 800d254:	20010e18 	.word	0x20010e18

0800d258 <rmw_uxrce_fini_topic_memory>:
 800d258:	b510      	push	{r4, lr}
 800d25a:	4604      	mov	r4, r0
 800d25c:	4621      	mov	r1, r4
 800d25e:	4803      	ldr	r0, [pc, #12]	@ (800d26c <rmw_uxrce_fini_topic_memory+0x14>)
 800d260:	f009 fb26 	bl	80168b0 <put_memory>
 800d264:	2300      	movs	r3, #0
 800d266:	61a3      	str	r3, [r4, #24]
 800d268:	bd10      	pop	{r4, pc}
 800d26a:	bf00      	nop
 800d26c:	20015bf4 	.word	0x20015bf4

0800d270 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d270:	b082      	sub	sp, #8
 800d272:	b530      	push	{r4, r5, lr}
 800d274:	4925      	ldr	r1, [pc, #148]	@ (800d30c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d276:	680d      	ldr	r5, [r1, #0]
 800d278:	ac03      	add	r4, sp, #12
 800d27a:	e884 000c 	stmia.w	r4, {r2, r3}
 800d27e:	461c      	mov	r4, r3
 800d280:	2d00      	cmp	r5, #0
 800d282:	d041      	beq.n	800d308 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800d284:	462b      	mov	r3, r5
 800d286:	2100      	movs	r1, #0
 800d288:	689a      	ldr	r2, [r3, #8]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800d290:	4290      	cmp	r0, r2
 800d292:	bf08      	it	eq
 800d294:	3101      	addeq	r1, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1f6      	bne.n	800d288 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800d29a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	d029      	beq.n	800d2f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d2a2:	d907      	bls.n	800d2b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d005      	beq.n	800d2b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2ae:	4608      	mov	r0, r1
 800d2b0:	b002      	add	sp, #8
 800d2b2:	4770      	bx	lr
 800d2b4:	b314      	cbz	r4, 800d2fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d2b6:	428c      	cmp	r4, r1
 800d2b8:	d820      	bhi.n	800d2fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d2ba:	2d00      	cmp	r5, #0
 800d2bc:	d0f4      	beq.n	800d2a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d2be:	2100      	movs	r1, #0
 800d2c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800d2c4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800d2c8:	e002      	b.n	800d2d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800d2ca:	686d      	ldr	r5, [r5, #4]
 800d2cc:	2d00      	cmp	r5, #0
 800d2ce:	d0ec      	beq.n	800d2aa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d2d0:	68ab      	ldr	r3, [r5, #8]
 800d2d2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800d2d6:	4290      	cmp	r0, r2
 800d2d8:	d1f7      	bne.n	800d2ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d2da:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800d2de:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800d2e2:	4562      	cmp	r2, ip
 800d2e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d2e8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800d2ec:	daed      	bge.n	800d2ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d2ee:	4694      	mov	ip, r2
 800d2f0:	461c      	mov	r4, r3
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	e7e9      	b.n	800d2ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800d2f6:	b10c      	cbz	r4, 800d2fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800d2f8:	428c      	cmp	r4, r1
 800d2fa:	d9d5      	bls.n	800d2a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800d2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d300:	4802      	ldr	r0, [pc, #8]	@ (800d30c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800d302:	b002      	add	sp, #8
 800d304:	f009 bac4 	b.w	8016890 <get_memory>
 800d308:	4629      	mov	r1, r5
 800d30a:	e7c6      	b.n	800d29a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800d30c:	20015bd4 	.word	0x20015bd4

0800d310 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800d310:	4b11      	ldr	r3, [pc, #68]	@ (800d358 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	b530      	push	{r4, r5, lr}
 800d316:	b1e3      	cbz	r3, 800d352 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800d318:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800d31c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800d320:	2400      	movs	r4, #0
 800d322:	e001      	b.n	800d328 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	b193      	cbz	r3, 800d34e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800d328:	689a      	ldr	r2, [r3, #8]
 800d32a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800d32e:	4288      	cmp	r0, r1
 800d330:	d1f8      	bne.n	800d324 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d332:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800d336:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800d33a:	4571      	cmp	r1, lr
 800d33c:	eb72 050c 	sbcs.w	r5, r2, ip
 800d340:	daf0      	bge.n	800d324 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800d342:	461c      	mov	r4, r3
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	468e      	mov	lr, r1
 800d348:	4694      	mov	ip, r2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1ec      	bne.n	800d328 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800d34e:	4620      	mov	r0, r4
 800d350:	bd30      	pop	{r4, r5, pc}
 800d352:	461c      	mov	r4, r3
 800d354:	4620      	mov	r0, r4
 800d356:	bd30      	pop	{r4, r5, pc}
 800d358:	20015bd4 	.word	0x20015bd4
 800d35c:	00000000 	.word	0x00000000

0800d360 <rmw_uxrce_clean_expired_static_input_buffer>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	4b3c      	ldr	r3, [pc, #240]	@ (800d458 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d366:	ed2d 8b06 	vpush	{d8-d10}
 800d36a:	681f      	ldr	r7, [r3, #0]
 800d36c:	b08d      	sub	sp, #52	@ 0x34
 800d36e:	f00a fcbf 	bl	8017cf0 <rmw_uros_epoch_nanos>
 800d372:	2f00      	cmp	r7, #0
 800d374:	d05d      	beq.n	800d432 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d376:	46b8      	mov	r8, r7
 800d378:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800d440 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800d37c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d380:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d384:	2b04      	cmp	r3, #4
 800d386:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800d448 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800d38a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800d450 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800d38e:	4681      	mov	r9, r0
 800d390:	468a      	mov	sl, r1
 800d392:	ac04      	add	r4, sp, #16
 800d394:	d03f      	beq.n	800d416 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d396:	2b05      	cmp	r3, #5
 800d398:	d044      	beq.n	800d424 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d03b      	beq.n	800d416 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800d39e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d3a2:	ed8d ab06 	vstr	d10, [sp, #24]
 800d3a6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800d3aa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800d3ae:	ab08      	add	r3, sp, #32
 800d3b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d3b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d3b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d3ba:	f009 f89d 	bl	80164f8 <rmw_time_equal>
 800d3be:	b118      	cbz	r0, 800d3c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800d3c0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800d3c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d3c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d3cc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800d3d0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800d3d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d3d8:	f009 f8e2 	bl	80165a0 <rmw_time_total_nsec>
 800d3dc:	1830      	adds	r0, r6, r0
 800d3de:	eb47 0101 	adc.w	r1, r7, r1
 800d3e2:	4548      	cmp	r0, r9
 800d3e4:	eb71 030a 	sbcs.w	r3, r1, sl
 800d3e8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800d3ec:	db05      	blt.n	800d3fa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800d3ee:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800d3f2:	4591      	cmp	r9, r2
 800d3f4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800d3f8:	da03      	bge.n	800d402 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800d3fa:	4817      	ldr	r0, [pc, #92]	@ (800d458 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800d3fc:	4641      	mov	r1, r8
 800d3fe:	f009 fa57 	bl	80168b0 <put_memory>
 800d402:	f1bb 0f00 	cmp.w	fp, #0
 800d406:	d014      	beq.n	800d432 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800d408:	46d8      	mov	r8, fp
 800d40a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d40e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800d412:	2b04      	cmp	r3, #4
 800d414:	d1bf      	bne.n	800d396 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800d416:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d41a:	3340      	adds	r3, #64	@ 0x40
 800d41c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d41e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d422:	e7c0      	b.n	800d3a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d424:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800d428:	3348      	adds	r3, #72	@ 0x48
 800d42a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d42c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d430:	e7b9      	b.n	800d3a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800d432:	b00d      	add	sp, #52	@ 0x34
 800d434:	ecbd 8b06 	vpop	{d8-d10}
 800d438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43c:	f3af 8000 	nop.w
	...
 800d448:	00000001 	.word	0x00000001
 800d44c:	00000000 	.word	0x00000000
 800d450:	0000001e 	.word	0x0000001e
 800d454:	00000000 	.word	0x00000000
 800d458:	20015bd4 	.word	0x20015bd4

0800d45c <run_xrce_session>:
 800d45c:	b510      	push	{r4, lr}
 800d45e:	788c      	ldrb	r4, [r1, #2]
 800d460:	b086      	sub	sp, #24
 800d462:	2c01      	cmp	r4, #1
 800d464:	f8ad 200e 	strh.w	r2, [sp, #14]
 800d468:	d00c      	beq.n	800d484 <run_xrce_session+0x28>
 800d46a:	4619      	mov	r1, r3
 800d46c:	2301      	movs	r3, #1
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	f10d 020e 	add.w	r2, sp, #14
 800d474:	f10d 0317 	add.w	r3, sp, #23
 800d478:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d47c:	f003 fed2 	bl	8011224 <uxr_run_session_until_all_status>
 800d480:	b006      	add	sp, #24
 800d482:	bd10      	pop	{r4, pc}
 800d484:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d488:	f003 fae6 	bl	8010a58 <uxr_flash_output_streams>
 800d48c:	4620      	mov	r0, r4
 800d48e:	b006      	add	sp, #24
 800d490:	bd10      	pop	{r4, pc}
 800d492:	bf00      	nop

0800d494 <convert_qos_profile>:
 800d494:	7a4a      	ldrb	r2, [r1, #9]
 800d496:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d49a:	2a02      	cmp	r2, #2
 800d49c:	bf18      	it	ne
 800d49e:	2200      	movne	r2, #0
 800d4a0:	7002      	strb	r2, [r0, #0]
 800d4a2:	780a      	ldrb	r2, [r1, #0]
 800d4a4:	8889      	ldrh	r1, [r1, #4]
 800d4a6:	8081      	strh	r1, [r0, #4]
 800d4a8:	f1ac 0c02 	sub.w	ip, ip, #2
 800d4ac:	f1a2 0202 	sub.w	r2, r2, #2
 800d4b0:	fabc fc8c 	clz	ip, ip
 800d4b4:	fab2 f282 	clz	r2, r2
 800d4b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d4bc:	0952      	lsrs	r2, r2, #5
 800d4be:	f880 c001 	strb.w	ip, [r0, #1]
 800d4c2:	7082      	strb	r2, [r0, #2]
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop

0800d4c8 <generate_service_topics>:
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	461c      	mov	r4, r3
 800d4ce:	4b12      	ldr	r3, [pc, #72]	@ (800d518 <generate_service_topics+0x50>)
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	4b11      	ldr	r3, [pc, #68]	@ (800d51c <generate_service_topics+0x54>)
 800d4d6:	9000      	str	r0, [sp, #0]
 800d4d8:	4616      	mov	r6, r2
 800d4da:	4608      	mov	r0, r1
 800d4dc:	4a10      	ldr	r2, [pc, #64]	@ (800d520 <generate_service_topics+0x58>)
 800d4de:	4621      	mov	r1, r4
 800d4e0:	f00d f956 	bl	801a790 <sniprintf>
 800d4e4:	4b0f      	ldr	r3, [pc, #60]	@ (800d524 <generate_service_topics+0x5c>)
 800d4e6:	9301      	str	r3, [sp, #4]
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	9500      	str	r5, [sp, #0]
 800d4ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d528 <generate_service_topics+0x60>)
 800d4ee:	4a0c      	ldr	r2, [pc, #48]	@ (800d520 <generate_service_topics+0x58>)
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	f00d f94b 	bl	801a790 <sniprintf>
 800d4fa:	2d00      	cmp	r5, #0
 800d4fc:	db01      	blt.n	800d502 <generate_service_topics+0x3a>
 800d4fe:	42ac      	cmp	r4, r5
 800d500:	dc02      	bgt.n	800d508 <generate_service_topics+0x40>
 800d502:	2000      	movs	r0, #0
 800d504:	b002      	add	sp, #8
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	2800      	cmp	r0, #0
 800d50a:	dbfa      	blt.n	800d502 <generate_service_topics+0x3a>
 800d50c:	4284      	cmp	r4, r0
 800d50e:	bfd4      	ite	le
 800d510:	2000      	movle	r0, #0
 800d512:	2001      	movgt	r0, #1
 800d514:	b002      	add	sp, #8
 800d516:	bd70      	pop	{r4, r5, r6, pc}
 800d518:	0801c950 	.word	0x0801c950
 800d51c:	0801c94c 	.word	0x0801c94c
 800d520:	0801c928 	.word	0x0801c928
 800d524:	0801c944 	.word	0x0801c944
 800d528:	0801c940 	.word	0x0801c940

0800d52c <generate_service_types>:
 800d52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d530:	4605      	mov	r5, r0
 800d532:	b086      	sub	sp, #24
 800d534:	6880      	ldr	r0, [r0, #8]
 800d536:	460c      	mov	r4, r1
 800d538:	4617      	mov	r7, r2
 800d53a:	461e      	mov	r6, r3
 800d53c:	4780      	blx	r0
 800d53e:	68eb      	ldr	r3, [r5, #12]
 800d540:	4680      	mov	r8, r0
 800d542:	4798      	blx	r3
 800d544:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d548:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800d54c:	2300      	movs	r3, #0
 800d54e:	7023      	strb	r3, [r4, #0]
 800d550:	6813      	ldr	r3, [r2, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d042      	beq.n	800d5dc <generate_service_types+0xb0>
 800d556:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d5f0 <generate_service_types+0xc4>
 800d55a:	4641      	mov	r1, r8
 800d55c:	4620      	mov	r0, r4
 800d55e:	4c22      	ldr	r4, [pc, #136]	@ (800d5e8 <generate_service_types+0xbc>)
 800d560:	9405      	str	r4, [sp, #20]
 800d562:	6852      	ldr	r2, [r2, #4]
 800d564:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800d5f8 <generate_service_types+0xcc>
 800d568:	9204      	str	r2, [sp, #16]
 800d56a:	9100      	str	r1, [sp, #0]
 800d56c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800d570:	4a1e      	ldr	r2, [pc, #120]	@ (800d5ec <generate_service_types+0xc0>)
 800d572:	f8cd a004 	str.w	sl, [sp, #4]
 800d576:	4631      	mov	r1, r6
 800d578:	f00d f90a 	bl	801a790 <sniprintf>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	db1f      	blt.n	800d5c0 <generate_service_types+0x94>
 800d580:	2300      	movs	r3, #0
 800d582:	703b      	strb	r3, [r7, #0]
 800d584:	f8d9 3000 	ldr.w	r3, [r9]
 800d588:	42b0      	cmp	r0, r6
 800d58a:	bfac      	ite	ge
 800d58c:	2500      	movge	r5, #0
 800d58e:	2501      	movlt	r5, #1
 800d590:	b1eb      	cbz	r3, 800d5ce <generate_service_types+0xa2>
 800d592:	4a17      	ldr	r2, [pc, #92]	@ (800d5f0 <generate_service_types+0xc4>)
 800d594:	9405      	str	r4, [sp, #20]
 800d596:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d59a:	9200      	str	r2, [sp, #0]
 800d59c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800d5a0:	e9cd a401 	strd	sl, r4, [sp, #4]
 800d5a4:	4a11      	ldr	r2, [pc, #68]	@ (800d5ec <generate_service_types+0xc0>)
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	4631      	mov	r1, r6
 800d5aa:	f00d f8f1 	bl	801a790 <sniprintf>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	db10      	blt.n	800d5d4 <generate_service_types+0xa8>
 800d5b2:	42b0      	cmp	r0, r6
 800d5b4:	bfb4      	ite	lt
 800d5b6:	4628      	movlt	r0, r5
 800d5b8:	2000      	movge	r0, #0
 800d5ba:	b006      	add	sp, #24
 800d5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	703b      	strb	r3, [r7, #0]
 800d5c4:	f8d9 3000 	ldr.w	r3, [r9]
 800d5c8:	2500      	movs	r5, #0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1e1      	bne.n	800d592 <generate_service_types+0x66>
 800d5ce:	4b09      	ldr	r3, [pc, #36]	@ (800d5f4 <generate_service_types+0xc8>)
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	e7df      	b.n	800d594 <generate_service_types+0x68>
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	b006      	add	sp, #24
 800d5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5dc:	4b05      	ldr	r3, [pc, #20]	@ (800d5f4 <generate_service_types+0xc8>)
 800d5de:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800d5f0 <generate_service_types+0xc4>
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	e7ba      	b.n	800d55c <generate_service_types+0x30>
 800d5e6:	bf00      	nop
 800d5e8:	0801c930 	.word	0x0801c930
 800d5ec:	0801c920 	.word	0x0801c920
 800d5f0:	0801c91c 	.word	0x0801c91c
 800d5f4:	0801d830 	.word	0x0801d830
 800d5f8:	0801c934 	.word	0x0801c934

0800d5fc <generate_type_name>:
 800d5fc:	b530      	push	{r4, r5, lr}
 800d5fe:	2300      	movs	r3, #0
 800d600:	700b      	strb	r3, [r1, #0]
 800d602:	6803      	ldr	r3, [r0, #0]
 800d604:	b087      	sub	sp, #28
 800d606:	4614      	mov	r4, r2
 800d608:	b1d3      	cbz	r3, 800d640 <generate_type_name+0x44>
 800d60a:	4a0f      	ldr	r2, [pc, #60]	@ (800d648 <generate_type_name+0x4c>)
 800d60c:	4615      	mov	r5, r2
 800d60e:	9203      	str	r2, [sp, #12]
 800d610:	9500      	str	r5, [sp, #0]
 800d612:	6842      	ldr	r2, [r0, #4]
 800d614:	480d      	ldr	r0, [pc, #52]	@ (800d64c <generate_type_name+0x50>)
 800d616:	9001      	str	r0, [sp, #4]
 800d618:	4608      	mov	r0, r1
 800d61a:	490d      	ldr	r1, [pc, #52]	@ (800d650 <generate_type_name+0x54>)
 800d61c:	9204      	str	r2, [sp, #16]
 800d61e:	9105      	str	r1, [sp, #20]
 800d620:	9102      	str	r1, [sp, #8]
 800d622:	4a0c      	ldr	r2, [pc, #48]	@ (800d654 <generate_type_name+0x58>)
 800d624:	4621      	mov	r1, r4
 800d626:	f00d f8b3 	bl	801a790 <sniprintf>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	db05      	blt.n	800d63a <generate_type_name+0x3e>
 800d62e:	4284      	cmp	r4, r0
 800d630:	bfd4      	ite	le
 800d632:	2000      	movle	r0, #0
 800d634:	2001      	movgt	r0, #1
 800d636:	b007      	add	sp, #28
 800d638:	bd30      	pop	{r4, r5, pc}
 800d63a:	2000      	movs	r0, #0
 800d63c:	b007      	add	sp, #28
 800d63e:	bd30      	pop	{r4, r5, pc}
 800d640:	4b05      	ldr	r3, [pc, #20]	@ (800d658 <generate_type_name+0x5c>)
 800d642:	4a01      	ldr	r2, [pc, #4]	@ (800d648 <generate_type_name+0x4c>)
 800d644:	461d      	mov	r5, r3
 800d646:	e7e2      	b.n	800d60e <generate_type_name+0x12>
 800d648:	0801c91c 	.word	0x0801c91c
 800d64c:	0801c934 	.word	0x0801c934
 800d650:	0801c930 	.word	0x0801c930
 800d654:	0801c920 	.word	0x0801c920
 800d658:	0801d830 	.word	0x0801d830

0800d65c <generate_topic_name>:
 800d65c:	b510      	push	{r4, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	4614      	mov	r4, r2
 800d662:	9000      	str	r0, [sp, #0]
 800d664:	4b08      	ldr	r3, [pc, #32]	@ (800d688 <generate_topic_name+0x2c>)
 800d666:	4a09      	ldr	r2, [pc, #36]	@ (800d68c <generate_topic_name+0x30>)
 800d668:	4608      	mov	r0, r1
 800d66a:	4621      	mov	r1, r4
 800d66c:	f00d f890 	bl	801a790 <sniprintf>
 800d670:	2800      	cmp	r0, #0
 800d672:	db05      	blt.n	800d680 <generate_topic_name+0x24>
 800d674:	4284      	cmp	r4, r0
 800d676:	bfd4      	ite	le
 800d678:	2000      	movle	r0, #0
 800d67a:	2001      	movgt	r0, #1
 800d67c:	b002      	add	sp, #8
 800d67e:	bd10      	pop	{r4, pc}
 800d680:	2000      	movs	r0, #0
 800d682:	b002      	add	sp, #8
 800d684:	bd10      	pop	{r4, pc}
 800d686:	bf00      	nop
 800d688:	0801c958 	.word	0x0801c958
 800d68c:	0801c938 	.word	0x0801c938

0800d690 <is_uxrce_rmw_identifier_valid>:
 800d690:	b510      	push	{r4, lr}
 800d692:	4604      	mov	r4, r0
 800d694:	b140      	cbz	r0, 800d6a8 <is_uxrce_rmw_identifier_valid+0x18>
 800d696:	f009 f963 	bl	8016960 <rmw_get_implementation_identifier>
 800d69a:	4601      	mov	r1, r0
 800d69c:	4620      	mov	r0, r4
 800d69e:	f7f2 fdb7 	bl	8000210 <strcmp>
 800d6a2:	fab0 f080 	clz	r0, r0
 800d6a6:	0940      	lsrs	r0, r0, #5
 800d6a8:	bd10      	pop	{r4, pc}
 800d6aa:	bf00      	nop

0800d6ac <get_message_typesupport_handle>:
 800d6ac:	6883      	ldr	r3, [r0, #8]
 800d6ae:	4718      	bx	r3

0800d6b0 <get_message_typesupport_handle_function>:
 800d6b0:	b510      	push	{r4, lr}
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	6800      	ldr	r0, [r0, #0]
 800d6b6:	f7f2 fdab 	bl	8000210 <strcmp>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	bf0c      	ite	eq
 800d6be:	4620      	moveq	r0, r4
 800d6c0:	2000      	movne	r0, #0
 800d6c2:	bd10      	pop	{r4, pc}

0800d6c4 <get_service_typesupport_handle>:
 800d6c4:	6883      	ldr	r3, [r0, #8]
 800d6c6:	4718      	bx	r3

0800d6c8 <get_service_typesupport_handle_function>:
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	6800      	ldr	r0, [r0, #0]
 800d6ce:	f7f2 fd9f 	bl	8000210 <strcmp>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	bf0c      	ite	eq
 800d6d6:	4620      	moveq	r0, r4
 800d6d8:	2000      	movne	r0, #0
 800d6da:	bd10      	pop	{r4, pc}

0800d6dc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e0:	6805      	ldr	r5, [r0, #0]
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	460e      	mov	r6, r1
 800d6e8:	f7f2 fd92 	bl	8000210 <strcmp>
 800d6ec:	b1c8      	cbz	r0, 800d722 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800d6ee:	4b11      	ldr	r3, [pc, #68]	@ (800d734 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	429d      	cmp	r5, r3
 800d6f4:	d112      	bne.n	800d71c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d6f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d6fa:	f8d8 4000 	ldr.w	r4, [r8]
 800d6fe:	b16c      	cbz	r4, 800d71c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800d700:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d704:	2700      	movs	r7, #0
 800d706:	3d04      	subs	r5, #4
 800d708:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d70c:	4631      	mov	r1, r6
 800d70e:	f7f2 fd7f 	bl	8000210 <strcmp>
 800d712:	00bb      	lsls	r3, r7, #2
 800d714:	b140      	cbz	r0, 800d728 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800d716:	3701      	adds	r7, #1
 800d718:	42bc      	cmp	r4, r7
 800d71a:	d1f5      	bne.n	800d708 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800d71c:	2000      	movs	r0, #0
 800d71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d722:	4620      	mov	r0, r4
 800d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d728:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d72c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d730:	58d3      	ldr	r3, [r2, r3]
 800d732:	4718      	bx	r3
 800d734:	20000380 	.word	0x20000380

0800d738 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800d738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73c:	6805      	ldr	r5, [r0, #0]
 800d73e:	4604      	mov	r4, r0
 800d740:	4628      	mov	r0, r5
 800d742:	460e      	mov	r6, r1
 800d744:	f7f2 fd64 	bl	8000210 <strcmp>
 800d748:	b1c8      	cbz	r0, 800d77e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800d74a:	4b11      	ldr	r3, [pc, #68]	@ (800d790 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	429d      	cmp	r5, r3
 800d750:	d112      	bne.n	800d778 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800d752:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800d756:	f8d8 4000 	ldr.w	r4, [r8]
 800d75a:	b16c      	cbz	r4, 800d778 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800d75c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800d760:	2700      	movs	r7, #0
 800d762:	3d04      	subs	r5, #4
 800d764:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800d768:	4631      	mov	r1, r6
 800d76a:	f7f2 fd51 	bl	8000210 <strcmp>
 800d76e:	00bb      	lsls	r3, r7, #2
 800d770:	b140      	cbz	r0, 800d784 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800d772:	3701      	adds	r7, #1
 800d774:	42bc      	cmp	r4, r7
 800d776:	d1f5      	bne.n	800d764 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800d778:	2000      	movs	r0, #0
 800d77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d77e:	4620      	mov	r0, r4
 800d780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d784:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	58d3      	ldr	r3, [r2, r3]
 800d78e:	4718      	bx	r3
 800d790:	20000380 	.word	0x20000380

0800d794 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d794:	4b04      	ldr	r3, [pc, #16]	@ (800d7a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	b10a      	cbz	r2, 800d79e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800d79a:	4803      	ldr	r0, [pc, #12]	@ (800d7a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d79c:	4770      	bx	lr
 800d79e:	4a03      	ldr	r2, [pc, #12]	@ (800d7ac <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800d7a0:	4801      	ldr	r0, [pc, #4]	@ (800d7a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800d7a2:	6812      	ldr	r2, [r2, #0]
 800d7a4:	601a      	str	r2, [r3, #0]
 800d7a6:	4770      	bx	lr
 800d7a8:	20000390 	.word	0x20000390
 800d7ac:	20000380 	.word	0x20000380

0800d7b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d7b0:	4a02      	ldr	r2, [pc, #8]	@ (800d7bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800d7b2:	4b03      	ldr	r3, [pc, #12]	@ (800d7c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800d7b4:	6812      	ldr	r2, [r2, #0]
 800d7b6:	601a      	str	r2, [r3, #0]
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	20000380 	.word	0x20000380
 800d7c0:	20000390 	.word	0x20000390

0800d7c4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800d7c4:	2009      	movs	r0, #9
 800d7c6:	4770      	bx	lr

0800d7c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800d7c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop

0800d7d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800d7d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d7d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7d8:	e9c2 0100 	strd	r0, r1, [r2]
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop

0800d7e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800d7e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d7e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d7e8:	e9c1 2300 	strd	r2, r3, [r1]
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop

0800d7f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800d7f0:	f00a ba8c 	b.w	8017d0c <sensor_msgs__msg__Imu__init>

0800d7f4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800d7f4:	f00a bae0 	b.w	8017db8 <sensor_msgs__msg__Imu__fini>

0800d7f8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800d7f8:	2009      	movs	r0, #9
 800d7fa:	4770      	bx	lr

0800d7fc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800d7fc:	2009      	movs	r0, #9
 800d7fe:	4770      	bx	lr

0800d800 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800d800:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop

0800d808 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800d808:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop

0800d810 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800d810:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop

0800d818 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800d818:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop

0800d820 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800d820:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop

0800d828 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800d828:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d830:	e9c2 0100 	strd	r0, r1, [r2]
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop

0800d838 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800d838:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d83c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d840:	e9c1 2300 	strd	r2, r3, [r1]
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop

0800d848 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800d848:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d850:	e9c2 0100 	strd	r0, r1, [r2]
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop

0800d858 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800d858:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d85c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d860:	e9c1 2300 	strd	r2, r3, [r1]
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop

0800d868 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	f000 f90f 	bl	800da8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d86e:	4c0b      	ldr	r4, [pc, #44]	@ (800d89c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800d870:	60e0      	str	r0, [r4, #12]
 800d872:	f000 fb5b 	bl	800df2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d876:	64a0      	str	r0, [r4, #72]	@ 0x48
 800d878:	f000 fb6a 	bl	800df50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d87c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800d880:	f000 fb66 	bl	800df50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d884:	4b06      	ldr	r3, [pc, #24]	@ (800d8a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d886:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	b10a      	cbz	r2, 800d892 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800d88e:	4804      	ldr	r0, [pc, #16]	@ (800d8a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d890:	bd10      	pop	{r4, pc}
 800d892:	4a04      	ldr	r2, [pc, #16]	@ (800d8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800d894:	4802      	ldr	r0, [pc, #8]	@ (800d8a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800d896:	6812      	ldr	r2, [r2, #0]
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	bd10      	pop	{r4, pc}
 800d89c:	2000039c 	.word	0x2000039c
 800d8a0:	20000540 	.word	0x20000540
 800d8a4:	20000384 	.word	0x20000384

0800d8a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800d8a8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800d8ac:	4680      	mov	r8, r0
 800d8ae:	460f      	mov	r7, r1
 800d8b0:	f000 f910 	bl	800dad4 <get_serialized_size_std_msgs__msg__Header>
 800d8b4:	183c      	adds	r4, r7, r0
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	f108 0018 	add.w	r0, r8, #24
 800d8bc:	f000 fb56 	bl	800df6c <get_serialized_size_geometry_msgs__msg__Quaternion>
 800d8c0:	4404      	add	r4, r0
 800d8c2:	2108      	movs	r1, #8
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f002 fc77 	bl	80101b8 <ucdr_alignment>
 800d8ca:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800d8ce:	4425      	add	r5, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800d8d6:	f000 fc01 	bl	800e0dc <get_serialized_size_geometry_msgs__msg__Vector3>
 800d8da:	4405      	add	r5, r0
 800d8dc:	2108      	movs	r1, #8
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f002 fc6a 	bl	80101b8 <ucdr_alignment>
 800d8e4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800d8e8:	4425      	add	r5, r4
 800d8ea:	4629      	mov	r1, r5
 800d8ec:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800d8f0:	f000 fbf4 	bl	800e0dc <get_serialized_size_geometry_msgs__msg__Vector3>
 800d8f4:	4405      	add	r5, r0
 800d8f6:	2108      	movs	r1, #8
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f002 fc5d 	bl	80101b8 <ucdr_alignment>
 800d8fe:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800d902:	4438      	add	r0, r7
 800d904:	4428      	add	r0, r5
 800d906:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800d90a:	bf00      	nop

0800d90c <get_serialized_size_sensor_msgs__msg__Imu>:
 800d90c:	b108      	cbz	r0, 800d912 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800d90e:	f7ff bfcb 	b.w	800d8a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d912:	4770      	bx	lr

0800d914 <_Imu__get_serialized_size>:
 800d914:	b110      	cbz	r0, 800d91c <_Imu__get_serialized_size+0x8>
 800d916:	2100      	movs	r1, #0
 800d918:	f7ff bfc6 	b.w	800d8a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop

0800d920 <_Imu__cdr_deserialize>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	460c      	mov	r4, r1
 800d924:	b399      	cbz	r1, 800d98e <_Imu__cdr_deserialize+0x6e>
 800d926:	4605      	mov	r5, r0
 800d928:	f000 f956 	bl	800dbd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d92c:	6843      	ldr	r3, [r0, #4]
 800d92e:	4621      	mov	r1, r4
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	4628      	mov	r0, r5
 800d934:	4798      	blx	r3
 800d936:	f000 fbcd 	bl	800e0d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d93a:	6843      	ldr	r3, [r0, #4]
 800d93c:	f104 0118 	add.w	r1, r4, #24
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	4628      	mov	r0, r5
 800d944:	4798      	blx	r3
 800d946:	2209      	movs	r2, #9
 800d948:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d94c:	4628      	mov	r0, r5
 800d94e:	f000 ff99 	bl	800e884 <ucdr_deserialize_array_double>
 800d952:	f000 fc4f 	bl	800e1f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d956:	6843      	ldr	r3, [r0, #4]
 800d958:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	4628      	mov	r0, r5
 800d960:	4798      	blx	r3
 800d962:	2209      	movs	r2, #9
 800d964:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d968:	4628      	mov	r0, r5
 800d96a:	f000 ff8b 	bl	800e884 <ucdr_deserialize_array_double>
 800d96e:	f000 fc41 	bl	800e1f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d972:	6843      	ldr	r3, [r0, #4]
 800d974:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	4628      	mov	r0, r5
 800d97c:	4798      	blx	r3
 800d97e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d982:	4628      	mov	r0, r5
 800d984:	2209      	movs	r2, #9
 800d986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d98a:	f000 bf7b 	b.w	800e884 <ucdr_deserialize_array_double>
 800d98e:	4608      	mov	r0, r1
 800d990:	bd38      	pop	{r3, r4, r5, pc}
 800d992:	bf00      	nop

0800d994 <_Imu__cdr_serialize>:
 800d994:	2800      	cmp	r0, #0
 800d996:	d035      	beq.n	800da04 <_Imu__cdr_serialize+0x70>
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	460d      	mov	r5, r1
 800d99c:	4604      	mov	r4, r0
 800d99e:	f000 f91b 	bl	800dbd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d9a2:	6843      	ldr	r3, [r0, #4]
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	4798      	blx	r3
 800d9ac:	f000 fb92 	bl	800e0d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d9b0:	6843      	ldr	r3, [r0, #4]
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	f104 0018 	add.w	r0, r4, #24
 800d9ba:	4798      	blx	r3
 800d9bc:	2209      	movs	r2, #9
 800d9be:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	f000 ff0a 	bl	800e7dc <ucdr_serialize_array_double>
 800d9c8:	f000 fc14 	bl	800e1f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d9cc:	6843      	ldr	r3, [r0, #4]
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	689b      	ldr	r3, [r3, #8]
 800d9d2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800d9d6:	4798      	blx	r3
 800d9d8:	2209      	movs	r2, #9
 800d9da:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f000 fefc 	bl	800e7dc <ucdr_serialize_array_double>
 800d9e4:	f000 fc06 	bl	800e1f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d9e8:	6843      	ldr	r3, [r0, #4]
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800d9f2:	4798      	blx	r3
 800d9f4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	2209      	movs	r2, #9
 800d9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da00:	f000 beec 	b.w	800e7dc <ucdr_serialize_array_double>
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop

0800da08 <max_serialized_size_sensor_msgs__msg__Imu>:
 800da08:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800da0c:	2301      	movs	r3, #1
 800da0e:	7003      	strb	r3, [r0, #0]
 800da10:	4680      	mov	r8, r0
 800da12:	460f      	mov	r7, r1
 800da14:	f000 f8d6 	bl	800dbc4 <max_serialized_size_std_msgs__msg__Header>
 800da18:	183c      	adds	r4, r7, r0
 800da1a:	4621      	mov	r1, r4
 800da1c:	4640      	mov	r0, r8
 800da1e:	f000 fb37 	bl	800e090 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800da22:	4404      	add	r4, r0
 800da24:	2108      	movs	r1, #8
 800da26:	4620      	mov	r0, r4
 800da28:	f002 fbc6 	bl	80101b8 <ucdr_alignment>
 800da2c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800da30:	4425      	add	r5, r4
 800da32:	4629      	mov	r1, r5
 800da34:	4640      	mov	r0, r8
 800da36:	f000 fbc1 	bl	800e1bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800da3a:	4405      	add	r5, r0
 800da3c:	2108      	movs	r1, #8
 800da3e:	4628      	mov	r0, r5
 800da40:	f002 fbba 	bl	80101b8 <ucdr_alignment>
 800da44:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800da48:	4425      	add	r5, r4
 800da4a:	4629      	mov	r1, r5
 800da4c:	4640      	mov	r0, r8
 800da4e:	f000 fbb5 	bl	800e1bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800da52:	4405      	add	r5, r0
 800da54:	2108      	movs	r1, #8
 800da56:	4628      	mov	r0, r5
 800da58:	f002 fbae 	bl	80101b8 <ucdr_alignment>
 800da5c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800da60:	4438      	add	r0, r7
 800da62:	4428      	add	r0, r5
 800da64:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800da68 <_Imu__max_serialized_size>:
 800da68:	b500      	push	{lr}
 800da6a:	b083      	sub	sp, #12
 800da6c:	2100      	movs	r1, #0
 800da6e:	f10d 0007 	add.w	r0, sp, #7
 800da72:	f7ff ffc9 	bl	800da08 <max_serialized_size_sensor_msgs__msg__Imu>
 800da76:	b003      	add	sp, #12
 800da78:	f85d fb04 	ldr.w	pc, [sp], #4

0800da7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800da7c:	4800      	ldr	r0, [pc, #0]	@ (800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800da7e:	4770      	bx	lr
 800da80:	2000054c 	.word	0x2000054c

0800da84 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800da84:	f00a b9ac 	b.w	8017de0 <std_msgs__msg__Header__init>

0800da88 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800da88:	f00a b9ce 	b.w	8017e28 <std_msgs__msg__Header__fini>

0800da8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800da8c:	b508      	push	{r3, lr}
 800da8e:	f000 f9d3 	bl	800de38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800da92:	4b06      	ldr	r3, [pc, #24]	@ (800daac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800da94:	4906      	ldr	r1, [pc, #24]	@ (800dab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	60c8      	str	r0, [r1, #12]
 800da9a:	b10a      	cbz	r2, 800daa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800da9c:	4803      	ldr	r0, [pc, #12]	@ (800daac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800da9e:	bd08      	pop	{r3, pc}
 800daa0:	4a04      	ldr	r2, [pc, #16]	@ (800dab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800daa2:	4802      	ldr	r0, [pc, #8]	@ (800daac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800daa4:	6812      	ldr	r2, [r2, #0]
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	bd08      	pop	{r3, pc}
 800daaa:	bf00      	nop
 800daac:	200005ec 	.word	0x200005ec
 800dab0:	20000574 	.word	0x20000574
 800dab4:	20000384 	.word	0x20000384

0800dab8 <_Header__max_serialized_size>:
 800dab8:	b500      	push	{lr}
 800daba:	b083      	sub	sp, #12
 800dabc:	2301      	movs	r3, #1
 800dabe:	2100      	movs	r1, #0
 800dac0:	f10d 0007 	add.w	r0, sp, #7
 800dac4:	f88d 3007 	strb.w	r3, [sp, #7]
 800dac8:	f000 fa14 	bl	800def4 <max_serialized_size_builtin_interfaces__msg__Time>
 800dacc:	b003      	add	sp, #12
 800dace:	f85d fb04 	ldr.w	pc, [sp], #4
 800dad2:	bf00      	nop

0800dad4 <get_serialized_size_std_msgs__msg__Header>:
 800dad4:	b570      	push	{r4, r5, r6, lr}
 800dad6:	4605      	mov	r5, r0
 800dad8:	b168      	cbz	r0, 800daf6 <get_serialized_size_std_msgs__msg__Header+0x22>
 800dada:	460c      	mov	r4, r1
 800dadc:	f000 f9ba 	bl	800de54 <get_serialized_size_builtin_interfaces__msg__Time>
 800dae0:	1826      	adds	r6, r4, r0
 800dae2:	2104      	movs	r1, #4
 800dae4:	4630      	mov	r0, r6
 800dae6:	f002 fb67 	bl	80101b8 <ucdr_alignment>
 800daea:	68e9      	ldr	r1, [r5, #12]
 800daec:	f1c4 0405 	rsb	r4, r4, #5
 800daf0:	440c      	add	r4, r1
 800daf2:	4404      	add	r4, r0
 800daf4:	19a0      	adds	r0, r4, r6
 800daf6:	bd70      	pop	{r4, r5, r6, pc}

0800daf8 <_Header__cdr_deserialize>:
 800daf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dafa:	460c      	mov	r4, r1
 800dafc:	b083      	sub	sp, #12
 800dafe:	b1e1      	cbz	r1, 800db3a <_Header__cdr_deserialize+0x42>
 800db00:	4606      	mov	r6, r0
 800db02:	f000 fa0b 	bl	800df1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800db06:	6843      	ldr	r3, [r0, #4]
 800db08:	4621      	mov	r1, r4
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	4630      	mov	r0, r6
 800db0e:	4798      	blx	r3
 800db10:	6927      	ldr	r7, [r4, #16]
 800db12:	68a1      	ldr	r1, [r4, #8]
 800db14:	ab01      	add	r3, sp, #4
 800db16:	463a      	mov	r2, r7
 800db18:	4630      	mov	r0, r6
 800db1a:	f002 fbcb 	bl	80102b4 <ucdr_deserialize_sequence_char>
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	4605      	mov	r5, r0
 800db22:	b920      	cbnz	r0, 800db2e <_Header__cdr_deserialize+0x36>
 800db24:	429f      	cmp	r7, r3
 800db26:	d30c      	bcc.n	800db42 <_Header__cdr_deserialize+0x4a>
 800db28:	4628      	mov	r0, r5
 800db2a:	b003      	add	sp, #12
 800db2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db2e:	b103      	cbz	r3, 800db32 <_Header__cdr_deserialize+0x3a>
 800db30:	3b01      	subs	r3, #1
 800db32:	4628      	mov	r0, r5
 800db34:	60e3      	str	r3, [r4, #12]
 800db36:	b003      	add	sp, #12
 800db38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db3a:	460d      	mov	r5, r1
 800db3c:	4628      	mov	r0, r5
 800db3e:	b003      	add	sp, #12
 800db40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db42:	2101      	movs	r1, #1
 800db44:	75b0      	strb	r0, [r6, #22]
 800db46:	7571      	strb	r1, [r6, #21]
 800db48:	4630      	mov	r0, r6
 800db4a:	60e5      	str	r5, [r4, #12]
 800db4c:	f002 fb4a 	bl	80101e4 <ucdr_align_to>
 800db50:	4630      	mov	r0, r6
 800db52:	9901      	ldr	r1, [sp, #4]
 800db54:	f002 fb7c 	bl	8010250 <ucdr_advance_buffer>
 800db58:	4628      	mov	r0, r5
 800db5a:	b003      	add	sp, #12
 800db5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db5e:	bf00      	nop

0800db60 <_Header__cdr_serialize>:
 800db60:	b1f8      	cbz	r0, 800dba2 <_Header__cdr_serialize+0x42>
 800db62:	b570      	push	{r4, r5, r6, lr}
 800db64:	4604      	mov	r4, r0
 800db66:	460d      	mov	r5, r1
 800db68:	f000 f9d8 	bl	800df1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800db6c:	6843      	ldr	r3, [r0, #4]
 800db6e:	4629      	mov	r1, r5
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	4620      	mov	r0, r4
 800db74:	4798      	blx	r3
 800db76:	68a6      	ldr	r6, [r4, #8]
 800db78:	b156      	cbz	r6, 800db90 <_Header__cdr_serialize+0x30>
 800db7a:	4630      	mov	r0, r6
 800db7c:	f7f2 fb40 	bl	8000200 <strlen>
 800db80:	4631      	mov	r1, r6
 800db82:	60e0      	str	r0, [r4, #12]
 800db84:	1c42      	adds	r2, r0, #1
 800db86:	4628      	mov	r0, r5
 800db88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db8c:	f002 bb80 	b.w	8010290 <ucdr_serialize_sequence_char>
 800db90:	4630      	mov	r0, r6
 800db92:	60e0      	str	r0, [r4, #12]
 800db94:	4632      	mov	r2, r6
 800db96:	4631      	mov	r1, r6
 800db98:	4628      	mov	r0, r5
 800db9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db9e:	f002 bb77 	b.w	8010290 <ucdr_serialize_sequence_char>
 800dba2:	4770      	bx	lr

0800dba4 <_Header__get_serialized_size>:
 800dba4:	b538      	push	{r3, r4, r5, lr}
 800dba6:	4604      	mov	r4, r0
 800dba8:	b150      	cbz	r0, 800dbc0 <_Header__get_serialized_size+0x1c>
 800dbaa:	2100      	movs	r1, #0
 800dbac:	f000 f952 	bl	800de54 <get_serialized_size_builtin_interfaces__msg__Time>
 800dbb0:	2104      	movs	r1, #4
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	f002 fb00 	bl	80101b8 <ucdr_alignment>
 800dbb8:	68e2      	ldr	r2, [r4, #12]
 800dbba:	3205      	adds	r2, #5
 800dbbc:	1953      	adds	r3, r2, r5
 800dbbe:	4418      	add	r0, r3
 800dbc0:	bd38      	pop	{r3, r4, r5, pc}
 800dbc2:	bf00      	nop

0800dbc4 <max_serialized_size_std_msgs__msg__Header>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	4604      	mov	r4, r0
 800dbca:	7003      	strb	r3, [r0, #0]
 800dbcc:	f000 f992 	bl	800def4 <max_serialized_size_builtin_interfaces__msg__Time>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	7023      	strb	r3, [r4, #0]
 800dbd4:	bd10      	pop	{r4, pc}
 800dbd6:	bf00      	nop

0800dbd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800dbd8:	4800      	ldr	r0, [pc, #0]	@ (800dbdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800dbda:	4770      	bx	lr
 800dbdc:	200005f8 	.word	0x200005f8

0800dbe0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800dbe0:	4b04      	ldr	r3, [pc, #16]	@ (800dbf4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	b10a      	cbz	r2, 800dbea <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800dbe6:	4803      	ldr	r0, [pc, #12]	@ (800dbf4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800dbe8:	4770      	bx	lr
 800dbea:	4a03      	ldr	r2, [pc, #12]	@ (800dbf8 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800dbec:	4801      	ldr	r0, [pc, #4]	@ (800dbf4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800dbee:	6812      	ldr	r2, [r2, #0]
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	4770      	bx	lr
 800dbf4:	20000628 	.word	0x20000628
 800dbf8:	20000380 	.word	0x20000380

0800dbfc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800dbfc:	4b04      	ldr	r3, [pc, #16]	@ (800dc10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800dbfe:	4805      	ldr	r0, [pc, #20]	@ (800dc14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800dc00:	4905      	ldr	r1, [pc, #20]	@ (800dc18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800dc02:	4a06      	ldr	r2, [pc, #24]	@ (800dc1c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	6003      	str	r3, [r0, #0]
 800dc08:	600b      	str	r3, [r1, #0]
 800dc0a:	6013      	str	r3, [r2, #0]
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	20000380 	.word	0x20000380
 800dc14:	20000644 	.word	0x20000644
 800dc18:	20000650 	.word	0x20000650
 800dc1c:	20000628 	.word	0x20000628

0800dc20 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800dc20:	f00a b90e 	b.w	8017e40 <std_srvs__srv__SetBool_Request__init>

0800dc24 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800dc24:	f00a b910 	b.w	8017e48 <std_srvs__srv__SetBool_Request__fini>

0800dc28 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800dc28:	f00a b910 	b.w	8017e4c <std_srvs__srv__SetBool_Response__init>

0800dc2c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800dc2c:	f00a b920 	b.w	8017e70 <std_srvs__srv__SetBool_Response__fini>

0800dc30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800dc30:	4b04      	ldr	r3, [pc, #16]	@ (800dc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	b10a      	cbz	r2, 800dc3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800dc36:	4803      	ldr	r0, [pc, #12]	@ (800dc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800dc38:	4770      	bx	lr
 800dc3a:	4a03      	ldr	r2, [pc, #12]	@ (800dc48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800dc3c:	4801      	ldr	r0, [pc, #4]	@ (800dc44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800dc3e:	6812      	ldr	r2, [r2, #0]
 800dc40:	601a      	str	r2, [r3, #0]
 800dc42:	4770      	bx	lr
 800dc44:	20000698 	.word	0x20000698
 800dc48:	20000384 	.word	0x20000384

0800dc4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800dc4c:	4b04      	ldr	r3, [pc, #16]	@ (800dc60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	b10a      	cbz	r2, 800dc56 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800dc52:	4803      	ldr	r0, [pc, #12]	@ (800dc60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800dc54:	4770      	bx	lr
 800dc56:	4a03      	ldr	r2, [pc, #12]	@ (800dc64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800dc58:	4801      	ldr	r0, [pc, #4]	@ (800dc60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800dc5a:	6812      	ldr	r2, [r2, #0]
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	4770      	bx	lr
 800dc60:	2000071c 	.word	0x2000071c
 800dc64:	20000384 	.word	0x20000384

0800dc68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800dc68:	4b13      	ldr	r3, [pc, #76]	@ (800dcb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	b132      	cbz	r2, 800dc7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	689a      	ldr	r2, [r3, #8]
 800dc72:	b152      	cbz	r2, 800dc8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 800dc74:	68da      	ldr	r2, [r3, #12]
 800dc76:	b182      	cbz	r2, 800dc9a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 800dc78:	480f      	ldr	r0, [pc, #60]	@ (800dcb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800dc7a:	4770      	bx	lr
 800dc7c:	4a0f      	ldr	r2, [pc, #60]	@ (800dcbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800dc7e:	6812      	ldr	r2, [r2, #0]
 800dc80:	601a      	str	r2, [r3, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	689a      	ldr	r2, [r3, #8]
 800dc86:	2a00      	cmp	r2, #0
 800dc88:	d1f4      	bne.n	800dc74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 800dc8a:	4a0d      	ldr	r2, [pc, #52]	@ (800dcc0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 800dc8c:	6811      	ldr	r1, [r2, #0]
 800dc8e:	b179      	cbz	r1, 800dcb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800dc90:	6852      	ldr	r2, [r2, #4]
 800dc92:	609a      	str	r2, [r3, #8]
 800dc94:	68da      	ldr	r2, [r3, #12]
 800dc96:	2a00      	cmp	r2, #0
 800dc98:	d1ee      	bne.n	800dc78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 800dc9a:	4a0a      	ldr	r2, [pc, #40]	@ (800dcc4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 800dc9c:	6811      	ldr	r1, [r2, #0]
 800dc9e:	b119      	cbz	r1, 800dca8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 800dca0:	6852      	ldr	r2, [r2, #4]
 800dca2:	4805      	ldr	r0, [pc, #20]	@ (800dcb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800dca4:	60da      	str	r2, [r3, #12]
 800dca6:	4770      	bx	lr
 800dca8:	4904      	ldr	r1, [pc, #16]	@ (800dcbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800dcaa:	6809      	ldr	r1, [r1, #0]
 800dcac:	6011      	str	r1, [r2, #0]
 800dcae:	e7f7      	b.n	800dca0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800dcb0:	4902      	ldr	r1, [pc, #8]	@ (800dcbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800dcb2:	6809      	ldr	r1, [r1, #0]
 800dcb4:	6011      	str	r1, [r2, #0]
 800dcb6:	e7eb      	b.n	800dc90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800dcb8:	20000738 	.word	0x20000738
 800dcbc:	20000384 	.word	0x20000384
 800dcc0:	20000698 	.word	0x20000698
 800dcc4:	2000071c 	.word	0x2000071c

0800dcc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800dcc8:	4800      	ldr	r0, [pc, #0]	@ (800dccc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800dcca:	4770      	bx	lr
 800dccc:	20000760 	.word	0x20000760

0800dcd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800dcd0:	4800      	ldr	r0, [pc, #0]	@ (800dcd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800dcd2:	4770      	bx	lr
 800dcd4:	2000076c 	.word	0x2000076c

0800dcd8 <_SetBool_Request__max_serialized_size>:
 800dcd8:	b508      	push	{r3, lr}
 800dcda:	2101      	movs	r1, #1
 800dcdc:	2000      	movs	r0, #0
 800dcde:	f002 fa6b 	bl	80101b8 <ucdr_alignment>
 800dce2:	3001      	adds	r0, #1
 800dce4:	bd08      	pop	{r3, pc}
 800dce6:	bf00      	nop

0800dce8 <_SetBool_Request__cdr_deserialize>:
 800dce8:	b109      	cbz	r1, 800dcee <_SetBool_Request__cdr_deserialize+0x6>
 800dcea:	f000 be37 	b.w	800e95c <ucdr_deserialize_bool>
 800dcee:	4608      	mov	r0, r1
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop

0800dcf4 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800dcf4:	b138      	cbz	r0, 800dd06 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 800dcf6:	b508      	push	{r3, lr}
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	2101      	movs	r1, #1
 800dcfe:	f002 fa5b 	bl	80101b8 <ucdr_alignment>
 800dd02:	3001      	adds	r0, #1
 800dd04:	bd08      	pop	{r3, pc}
 800dd06:	4770      	bx	lr

0800dd08 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800dd08:	b570      	push	{r4, r5, r6, lr}
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	b180      	cbz	r0, 800dd30 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800dd0e:	460c      	mov	r4, r1
 800dd10:	4620      	mov	r0, r4
 800dd12:	2101      	movs	r1, #1
 800dd14:	f002 fa50 	bl	80101b8 <ucdr_alignment>
 800dd18:	1c63      	adds	r3, r4, #1
 800dd1a:	181e      	adds	r6, r3, r0
 800dd1c:	2104      	movs	r1, #4
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f002 fa4a 	bl	80101b8 <ucdr_alignment>
 800dd24:	68a9      	ldr	r1, [r5, #8]
 800dd26:	f1c4 0405 	rsb	r4, r4, #5
 800dd2a:	440c      	add	r4, r1
 800dd2c:	4404      	add	r4, r0
 800dd2e:	19a0      	adds	r0, r4, r6
 800dd30:	bd70      	pop	{r4, r5, r6, pc}
 800dd32:	bf00      	nop

0800dd34 <_SetBool_Request__cdr_serialize>:
 800dd34:	460a      	mov	r2, r1
 800dd36:	b118      	cbz	r0, 800dd40 <_SetBool_Request__cdr_serialize+0xc>
 800dd38:	7801      	ldrb	r1, [r0, #0]
 800dd3a:	4610      	mov	r0, r2
 800dd3c:	f000 bdf8 	b.w	800e930 <ucdr_serialize_bool>
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop

0800dd44 <_SetBool_Response__cdr_deserialize>:
 800dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd46:	460c      	mov	r4, r1
 800dd48:	b083      	sub	sp, #12
 800dd4a:	b1b9      	cbz	r1, 800dd7c <_SetBool_Response__cdr_deserialize+0x38>
 800dd4c:	4606      	mov	r6, r0
 800dd4e:	f000 fe05 	bl	800e95c <ucdr_deserialize_bool>
 800dd52:	68e7      	ldr	r7, [r4, #12]
 800dd54:	6861      	ldr	r1, [r4, #4]
 800dd56:	ab01      	add	r3, sp, #4
 800dd58:	463a      	mov	r2, r7
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f002 faaa 	bl	80102b4 <ucdr_deserialize_sequence_char>
 800dd60:	9b01      	ldr	r3, [sp, #4]
 800dd62:	4605      	mov	r5, r0
 800dd64:	b920      	cbnz	r0, 800dd70 <_SetBool_Response__cdr_deserialize+0x2c>
 800dd66:	429f      	cmp	r7, r3
 800dd68:	d30c      	bcc.n	800dd84 <_SetBool_Response__cdr_deserialize+0x40>
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	b003      	add	sp, #12
 800dd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd70:	b103      	cbz	r3, 800dd74 <_SetBool_Response__cdr_deserialize+0x30>
 800dd72:	3b01      	subs	r3, #1
 800dd74:	4628      	mov	r0, r5
 800dd76:	60a3      	str	r3, [r4, #8]
 800dd78:	b003      	add	sp, #12
 800dd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd7c:	460d      	mov	r5, r1
 800dd7e:	4628      	mov	r0, r5
 800dd80:	b003      	add	sp, #12
 800dd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd84:	2101      	movs	r1, #1
 800dd86:	75b0      	strb	r0, [r6, #22]
 800dd88:	7571      	strb	r1, [r6, #21]
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	60a5      	str	r5, [r4, #8]
 800dd8e:	f002 fa29 	bl	80101e4 <ucdr_align_to>
 800dd92:	4630      	mov	r0, r6
 800dd94:	9901      	ldr	r1, [sp, #4]
 800dd96:	f002 fa5b 	bl	8010250 <ucdr_advance_buffer>
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	b003      	add	sp, #12
 800dd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dda0 <_SetBool_Response__cdr_serialize>:
 800dda0:	b1e0      	cbz	r0, 800dddc <_SetBool_Response__cdr_serialize+0x3c>
 800dda2:	b570      	push	{r4, r5, r6, lr}
 800dda4:	460d      	mov	r5, r1
 800dda6:	4604      	mov	r4, r0
 800dda8:	7801      	ldrb	r1, [r0, #0]
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f000 fdc0 	bl	800e930 <ucdr_serialize_bool>
 800ddb0:	6866      	ldr	r6, [r4, #4]
 800ddb2:	b156      	cbz	r6, 800ddca <_SetBool_Response__cdr_serialize+0x2a>
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	f7f2 fa23 	bl	8000200 <strlen>
 800ddba:	4631      	mov	r1, r6
 800ddbc:	60a0      	str	r0, [r4, #8]
 800ddbe:	1c42      	adds	r2, r0, #1
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddc6:	f002 ba63 	b.w	8010290 <ucdr_serialize_sequence_char>
 800ddca:	4630      	mov	r0, r6
 800ddcc:	60a0      	str	r0, [r4, #8]
 800ddce:	4632      	mov	r2, r6
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddd8:	f002 ba5a 	b.w	8010290 <ucdr_serialize_sequence_char>
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop

0800dde0 <_SetBool_Request__get_serialized_size>:
 800dde0:	b130      	cbz	r0, 800ddf0 <_SetBool_Request__get_serialized_size+0x10>
 800dde2:	b508      	push	{r3, lr}
 800dde4:	2101      	movs	r1, #1
 800dde6:	2000      	movs	r0, #0
 800dde8:	f002 f9e6 	bl	80101b8 <ucdr_alignment>
 800ddec:	3001      	adds	r0, #1
 800ddee:	bd08      	pop	{r3, pc}
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop

0800ddf4 <_SetBool_Response__max_serialized_size>:
 800ddf4:	b508      	push	{r3, lr}
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	f002 f9dd 	bl	80101b8 <ucdr_alignment>
 800ddfe:	3001      	adds	r0, #1
 800de00:	bd08      	pop	{r3, pc}
 800de02:	bf00      	nop

0800de04 <_SetBool_Response__get_serialized_size>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4604      	mov	r4, r0
 800de08:	b160      	cbz	r0, 800de24 <_SetBool_Response__get_serialized_size+0x20>
 800de0a:	2101      	movs	r1, #1
 800de0c:	2000      	movs	r0, #0
 800de0e:	f002 f9d3 	bl	80101b8 <ucdr_alignment>
 800de12:	1c45      	adds	r5, r0, #1
 800de14:	2104      	movs	r1, #4
 800de16:	4628      	mov	r0, r5
 800de18:	f002 f9ce 	bl	80101b8 <ucdr_alignment>
 800de1c:	68a3      	ldr	r3, [r4, #8]
 800de1e:	3305      	adds	r3, #5
 800de20:	4418      	add	r0, r3
 800de22:	4428      	add	r0, r5
 800de24:	bd38      	pop	{r3, r4, r5, pc}
 800de26:	bf00      	nop

0800de28 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800de28:	4800      	ldr	r0, [pc, #0]	@ (800de2c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800de2a:	4770      	bx	lr
 800de2c:	20000754 	.word	0x20000754

0800de30 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800de30:	f00a b824 	b.w	8017e7c <builtin_interfaces__msg__Time__init>

0800de34 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800de34:	f00a b826 	b.w	8017e84 <builtin_interfaces__msg__Time__fini>

0800de38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800de38:	4b04      	ldr	r3, [pc, #16]	@ (800de4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	b10a      	cbz	r2, 800de42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800de3e:	4803      	ldr	r0, [pc, #12]	@ (800de4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800de40:	4770      	bx	lr
 800de42:	4a03      	ldr	r2, [pc, #12]	@ (800de50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800de44:	4801      	ldr	r0, [pc, #4]	@ (800de4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800de46:	6812      	ldr	r2, [r2, #0]
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	4770      	bx	lr
 800de4c:	20000828 	.word	0x20000828
 800de50:	20000384 	.word	0x20000384

0800de54 <get_serialized_size_builtin_interfaces__msg__Time>:
 800de54:	b180      	cbz	r0, 800de78 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800de56:	b538      	push	{r3, r4, r5, lr}
 800de58:	460d      	mov	r5, r1
 800de5a:	4628      	mov	r0, r5
 800de5c:	2104      	movs	r1, #4
 800de5e:	f002 f9ab 	bl	80101b8 <ucdr_alignment>
 800de62:	1d2b      	adds	r3, r5, #4
 800de64:	181c      	adds	r4, r3, r0
 800de66:	2104      	movs	r1, #4
 800de68:	4620      	mov	r0, r4
 800de6a:	f002 f9a5 	bl	80101b8 <ucdr_alignment>
 800de6e:	f1c5 0504 	rsb	r5, r5, #4
 800de72:	4428      	add	r0, r5
 800de74:	4420      	add	r0, r4
 800de76:	bd38      	pop	{r3, r4, r5, pc}
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop

0800de7c <_Time__cdr_deserialize>:
 800de7c:	b538      	push	{r3, r4, r5, lr}
 800de7e:	460c      	mov	r4, r1
 800de80:	b141      	cbz	r1, 800de94 <_Time__cdr_deserialize+0x18>
 800de82:	4605      	mov	r5, r0
 800de84:	f001 fc4a 	bl	800f71c <ucdr_deserialize_int32_t>
 800de88:	1d21      	adds	r1, r4, #4
 800de8a:	4628      	mov	r0, r5
 800de8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de90:	f001 b8c2 	b.w	800f018 <ucdr_deserialize_uint32_t>
 800de94:	4608      	mov	r0, r1
 800de96:	bd38      	pop	{r3, r4, r5, pc}

0800de98 <_Time__cdr_serialize>:
 800de98:	b160      	cbz	r0, 800deb4 <_Time__cdr_serialize+0x1c>
 800de9a:	b538      	push	{r3, r4, r5, lr}
 800de9c:	460d      	mov	r5, r1
 800de9e:	4604      	mov	r4, r0
 800dea0:	6801      	ldr	r1, [r0, #0]
 800dea2:	4628      	mov	r0, r5
 800dea4:	f001 fba2 	bl	800f5ec <ucdr_serialize_int32_t>
 800dea8:	6861      	ldr	r1, [r4, #4]
 800deaa:	4628      	mov	r0, r5
 800deac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deb0:	f000 bf82 	b.w	800edb8 <ucdr_serialize_uint32_t>
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop

0800deb8 <_Time__get_serialized_size>:
 800deb8:	b160      	cbz	r0, 800ded4 <_Time__get_serialized_size+0x1c>
 800deba:	b510      	push	{r4, lr}
 800debc:	2104      	movs	r1, #4
 800debe:	2000      	movs	r0, #0
 800dec0:	f002 f97a 	bl	80101b8 <ucdr_alignment>
 800dec4:	1d04      	adds	r4, r0, #4
 800dec6:	2104      	movs	r1, #4
 800dec8:	4620      	mov	r0, r4
 800deca:	f002 f975 	bl	80101b8 <ucdr_alignment>
 800dece:	3004      	adds	r0, #4
 800ded0:	4420      	add	r0, r4
 800ded2:	bd10      	pop	{r4, pc}
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop

0800ded8 <_Time__max_serialized_size>:
 800ded8:	b510      	push	{r4, lr}
 800deda:	2104      	movs	r1, #4
 800dedc:	2000      	movs	r0, #0
 800dede:	f002 f96b 	bl	80101b8 <ucdr_alignment>
 800dee2:	1d04      	adds	r4, r0, #4
 800dee4:	2104      	movs	r1, #4
 800dee6:	4620      	mov	r0, r4
 800dee8:	f002 f966 	bl	80101b8 <ucdr_alignment>
 800deec:	3004      	adds	r0, #4
 800deee:	4420      	add	r0, r4
 800def0:	bd10      	pop	{r4, pc}
 800def2:	bf00      	nop

0800def4 <max_serialized_size_builtin_interfaces__msg__Time>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	460c      	mov	r4, r1
 800def8:	2301      	movs	r3, #1
 800defa:	7003      	strb	r3, [r0, #0]
 800defc:	2104      	movs	r1, #4
 800defe:	4620      	mov	r0, r4
 800df00:	f002 f95a 	bl	80101b8 <ucdr_alignment>
 800df04:	1d25      	adds	r5, r4, #4
 800df06:	4405      	add	r5, r0
 800df08:	2104      	movs	r1, #4
 800df0a:	4628      	mov	r0, r5
 800df0c:	f002 f954 	bl	80101b8 <ucdr_alignment>
 800df10:	f1c4 0404 	rsb	r4, r4, #4
 800df14:	4420      	add	r0, r4
 800df16:	4428      	add	r0, r5
 800df18:	bd38      	pop	{r3, r4, r5, pc}
 800df1a:	bf00      	nop

0800df1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800df1c:	4800      	ldr	r0, [pc, #0]	@ (800df20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800df1e:	4770      	bx	lr
 800df20:	20000834 	.word	0x20000834

0800df24 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800df24:	f009 bfb0 	b.w	8017e88 <geometry_msgs__msg__Quaternion__init>

0800df28 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800df28:	f009 bfc2 	b.w	8017eb0 <geometry_msgs__msg__Quaternion__fini>

0800df2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800df2c:	4b04      	ldr	r3, [pc, #16]	@ (800df40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	b10a      	cbz	r2, 800df36 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800df32:	4803      	ldr	r0, [pc, #12]	@ (800df40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800df34:	4770      	bx	lr
 800df36:	4a03      	ldr	r2, [pc, #12]	@ (800df44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800df38:	4801      	ldr	r0, [pc, #4]	@ (800df40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800df3a:	6812      	ldr	r2, [r2, #0]
 800df3c:	601a      	str	r2, [r3, #0]
 800df3e:	4770      	bx	lr
 800df40:	2000094c 	.word	0x2000094c
 800df44:	20000384 	.word	0x20000384

0800df48 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800df48:	f009 bfb4 	b.w	8017eb4 <geometry_msgs__msg__Vector3__init>

0800df4c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800df4c:	f009 bfb6 	b.w	8017ebc <geometry_msgs__msg__Vector3__fini>

0800df50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800df50:	4b04      	ldr	r3, [pc, #16]	@ (800df64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	b10a      	cbz	r2, 800df5a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800df56:	4803      	ldr	r0, [pc, #12]	@ (800df64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800df58:	4770      	bx	lr
 800df5a:	4a03      	ldr	r2, [pc, #12]	@ (800df68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800df5c:	4801      	ldr	r0, [pc, #4]	@ (800df64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800df5e:	6812      	ldr	r2, [r2, #0]
 800df60:	601a      	str	r2, [r3, #0]
 800df62:	4770      	bx	lr
 800df64:	20000a0c 	.word	0x20000a0c
 800df68:	20000384 	.word	0x20000384

0800df6c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800df6c:	b1f0      	cbz	r0, 800dfac <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800df6e:	b570      	push	{r4, r5, r6, lr}
 800df70:	460d      	mov	r5, r1
 800df72:	4628      	mov	r0, r5
 800df74:	2108      	movs	r1, #8
 800df76:	f002 f91f 	bl	80101b8 <ucdr_alignment>
 800df7a:	f105 0308 	add.w	r3, r5, #8
 800df7e:	181e      	adds	r6, r3, r0
 800df80:	2108      	movs	r1, #8
 800df82:	4630      	mov	r0, r6
 800df84:	f002 f918 	bl	80101b8 <ucdr_alignment>
 800df88:	f100 0408 	add.w	r4, r0, #8
 800df8c:	4434      	add	r4, r6
 800df8e:	2108      	movs	r1, #8
 800df90:	4620      	mov	r0, r4
 800df92:	f002 f911 	bl	80101b8 <ucdr_alignment>
 800df96:	3008      	adds	r0, #8
 800df98:	4404      	add	r4, r0
 800df9a:	2108      	movs	r1, #8
 800df9c:	4620      	mov	r0, r4
 800df9e:	f002 f90b 	bl	80101b8 <ucdr_alignment>
 800dfa2:	f1c5 0508 	rsb	r5, r5, #8
 800dfa6:	4428      	add	r0, r5
 800dfa8:	4420      	add	r0, r4
 800dfaa:	bd70      	pop	{r4, r5, r6, pc}
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop

0800dfb0 <_Quaternion__cdr_deserialize>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	b199      	cbz	r1, 800dfde <_Quaternion__cdr_deserialize+0x2e>
 800dfb6:	4605      	mov	r5, r0
 800dfb8:	f001 ff12 	bl	800fde0 <ucdr_deserialize_double>
 800dfbc:	f104 0108 	add.w	r1, r4, #8
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f001 ff0d 	bl	800fde0 <ucdr_deserialize_double>
 800dfc6:	f104 0110 	add.w	r1, r4, #16
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f001 ff08 	bl	800fde0 <ucdr_deserialize_double>
 800dfd0:	f104 0118 	add.w	r1, r4, #24
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfda:	f001 bf01 	b.w	800fde0 <ucdr_deserialize_double>
 800dfde:	4608      	mov	r0, r1
 800dfe0:	bd38      	pop	{r3, r4, r5, pc}
 800dfe2:	bf00      	nop

0800dfe4 <_Quaternion__cdr_serialize>:
 800dfe4:	b1c0      	cbz	r0, 800e018 <_Quaternion__cdr_serialize+0x34>
 800dfe6:	b538      	push	{r3, r4, r5, lr}
 800dfe8:	ed90 0b00 	vldr	d0, [r0]
 800dfec:	460d      	mov	r5, r1
 800dfee:	4604      	mov	r4, r0
 800dff0:	4608      	mov	r0, r1
 800dff2:	f001 fd53 	bl	800fa9c <ucdr_serialize_double>
 800dff6:	ed94 0b02 	vldr	d0, [r4, #8]
 800dffa:	4628      	mov	r0, r5
 800dffc:	f001 fd4e 	bl	800fa9c <ucdr_serialize_double>
 800e000:	ed94 0b04 	vldr	d0, [r4, #16]
 800e004:	4628      	mov	r0, r5
 800e006:	f001 fd49 	bl	800fa9c <ucdr_serialize_double>
 800e00a:	ed94 0b06 	vldr	d0, [r4, #24]
 800e00e:	4628      	mov	r0, r5
 800e010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e014:	f001 bd42 	b.w	800fa9c <ucdr_serialize_double>
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop

0800e01c <_Quaternion__get_serialized_size>:
 800e01c:	b1d0      	cbz	r0, 800e054 <_Quaternion__get_serialized_size+0x38>
 800e01e:	b538      	push	{r3, r4, r5, lr}
 800e020:	2108      	movs	r1, #8
 800e022:	2000      	movs	r0, #0
 800e024:	f002 f8c8 	bl	80101b8 <ucdr_alignment>
 800e028:	f100 0508 	add.w	r5, r0, #8
 800e02c:	2108      	movs	r1, #8
 800e02e:	4628      	mov	r0, r5
 800e030:	f002 f8c2 	bl	80101b8 <ucdr_alignment>
 800e034:	f100 0408 	add.w	r4, r0, #8
 800e038:	442c      	add	r4, r5
 800e03a:	2108      	movs	r1, #8
 800e03c:	4620      	mov	r0, r4
 800e03e:	f002 f8bb 	bl	80101b8 <ucdr_alignment>
 800e042:	3008      	adds	r0, #8
 800e044:	4404      	add	r4, r0
 800e046:	2108      	movs	r1, #8
 800e048:	4620      	mov	r0, r4
 800e04a:	f002 f8b5 	bl	80101b8 <ucdr_alignment>
 800e04e:	3008      	adds	r0, #8
 800e050:	4420      	add	r0, r4
 800e052:	bd38      	pop	{r3, r4, r5, pc}
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop

0800e058 <_Quaternion__max_serialized_size>:
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	2108      	movs	r1, #8
 800e05c:	2000      	movs	r0, #0
 800e05e:	f002 f8ab 	bl	80101b8 <ucdr_alignment>
 800e062:	f100 0508 	add.w	r5, r0, #8
 800e066:	2108      	movs	r1, #8
 800e068:	4628      	mov	r0, r5
 800e06a:	f002 f8a5 	bl	80101b8 <ucdr_alignment>
 800e06e:	f100 0408 	add.w	r4, r0, #8
 800e072:	442c      	add	r4, r5
 800e074:	2108      	movs	r1, #8
 800e076:	4620      	mov	r0, r4
 800e078:	f002 f89e 	bl	80101b8 <ucdr_alignment>
 800e07c:	3008      	adds	r0, #8
 800e07e:	4404      	add	r4, r0
 800e080:	2108      	movs	r1, #8
 800e082:	4620      	mov	r0, r4
 800e084:	f002 f898 	bl	80101b8 <ucdr_alignment>
 800e088:	3008      	adds	r0, #8
 800e08a:	4420      	add	r0, r4
 800e08c:	bd38      	pop	{r3, r4, r5, pc}
 800e08e:	bf00      	nop

0800e090 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	2301      	movs	r3, #1
 800e094:	460c      	mov	r4, r1
 800e096:	7003      	strb	r3, [r0, #0]
 800e098:	2108      	movs	r1, #8
 800e09a:	4620      	mov	r0, r4
 800e09c:	f002 f88c 	bl	80101b8 <ucdr_alignment>
 800e0a0:	f104 0508 	add.w	r5, r4, #8
 800e0a4:	1946      	adds	r6, r0, r5
 800e0a6:	2108      	movs	r1, #8
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f002 f885 	bl	80101b8 <ucdr_alignment>
 800e0ae:	f100 0508 	add.w	r5, r0, #8
 800e0b2:	4435      	add	r5, r6
 800e0b4:	2108      	movs	r1, #8
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f002 f87e 	bl	80101b8 <ucdr_alignment>
 800e0bc:	3008      	adds	r0, #8
 800e0be:	4405      	add	r5, r0
 800e0c0:	2108      	movs	r1, #8
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f002 f878 	bl	80101b8 <ucdr_alignment>
 800e0c8:	f1c4 0408 	rsb	r4, r4, #8
 800e0cc:	4420      	add	r0, r4
 800e0ce:	4428      	add	r0, r5
 800e0d0:	bd70      	pop	{r4, r5, r6, pc}
 800e0d2:	bf00      	nop

0800e0d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e0d4:	4800      	ldr	r0, [pc, #0]	@ (800e0d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800e0d6:	4770      	bx	lr
 800e0d8:	20000a18 	.word	0x20000a18

0800e0dc <get_serialized_size_geometry_msgs__msg__Vector3>:
 800e0dc:	b1b8      	cbz	r0, 800e10e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800e0de:	b538      	push	{r3, r4, r5, lr}
 800e0e0:	460d      	mov	r5, r1
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	2108      	movs	r1, #8
 800e0e6:	f002 f867 	bl	80101b8 <ucdr_alignment>
 800e0ea:	f105 0308 	add.w	r3, r5, #8
 800e0ee:	181c      	adds	r4, r3, r0
 800e0f0:	2108      	movs	r1, #8
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f002 f860 	bl	80101b8 <ucdr_alignment>
 800e0f8:	3008      	adds	r0, #8
 800e0fa:	4404      	add	r4, r0
 800e0fc:	2108      	movs	r1, #8
 800e0fe:	4620      	mov	r0, r4
 800e100:	f002 f85a 	bl	80101b8 <ucdr_alignment>
 800e104:	f1c5 0508 	rsb	r5, r5, #8
 800e108:	4428      	add	r0, r5
 800e10a:	4420      	add	r0, r4
 800e10c:	bd38      	pop	{r3, r4, r5, pc}
 800e10e:	4770      	bx	lr

0800e110 <_Vector3__cdr_deserialize>:
 800e110:	b538      	push	{r3, r4, r5, lr}
 800e112:	460c      	mov	r4, r1
 800e114:	b171      	cbz	r1, 800e134 <_Vector3__cdr_deserialize+0x24>
 800e116:	4605      	mov	r5, r0
 800e118:	f001 fe62 	bl	800fde0 <ucdr_deserialize_double>
 800e11c:	f104 0108 	add.w	r1, r4, #8
 800e120:	4628      	mov	r0, r5
 800e122:	f001 fe5d 	bl	800fde0 <ucdr_deserialize_double>
 800e126:	f104 0110 	add.w	r1, r4, #16
 800e12a:	4628      	mov	r0, r5
 800e12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e130:	f001 be56 	b.w	800fde0 <ucdr_deserialize_double>
 800e134:	4608      	mov	r0, r1
 800e136:	bd38      	pop	{r3, r4, r5, pc}

0800e138 <_Vector3__cdr_serialize>:
 800e138:	b198      	cbz	r0, 800e162 <_Vector3__cdr_serialize+0x2a>
 800e13a:	b538      	push	{r3, r4, r5, lr}
 800e13c:	ed90 0b00 	vldr	d0, [r0]
 800e140:	460d      	mov	r5, r1
 800e142:	4604      	mov	r4, r0
 800e144:	4608      	mov	r0, r1
 800e146:	f001 fca9 	bl	800fa9c <ucdr_serialize_double>
 800e14a:	ed94 0b02 	vldr	d0, [r4, #8]
 800e14e:	4628      	mov	r0, r5
 800e150:	f001 fca4 	bl	800fa9c <ucdr_serialize_double>
 800e154:	ed94 0b04 	vldr	d0, [r4, #16]
 800e158:	4628      	mov	r0, r5
 800e15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e15e:	f001 bc9d 	b.w	800fa9c <ucdr_serialize_double>
 800e162:	4770      	bx	lr

0800e164 <_Vector3__get_serialized_size>:
 800e164:	b198      	cbz	r0, 800e18e <_Vector3__get_serialized_size+0x2a>
 800e166:	b510      	push	{r4, lr}
 800e168:	2108      	movs	r1, #8
 800e16a:	2000      	movs	r0, #0
 800e16c:	f002 f824 	bl	80101b8 <ucdr_alignment>
 800e170:	f100 0408 	add.w	r4, r0, #8
 800e174:	2108      	movs	r1, #8
 800e176:	4620      	mov	r0, r4
 800e178:	f002 f81e 	bl	80101b8 <ucdr_alignment>
 800e17c:	3008      	adds	r0, #8
 800e17e:	4404      	add	r4, r0
 800e180:	2108      	movs	r1, #8
 800e182:	4620      	mov	r0, r4
 800e184:	f002 f818 	bl	80101b8 <ucdr_alignment>
 800e188:	3008      	adds	r0, #8
 800e18a:	4420      	add	r0, r4
 800e18c:	bd10      	pop	{r4, pc}
 800e18e:	4770      	bx	lr

0800e190 <_Vector3__max_serialized_size>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	2108      	movs	r1, #8
 800e194:	2000      	movs	r0, #0
 800e196:	f002 f80f 	bl	80101b8 <ucdr_alignment>
 800e19a:	f100 0508 	add.w	r5, r0, #8
 800e19e:	2108      	movs	r1, #8
 800e1a0:	4628      	mov	r0, r5
 800e1a2:	f002 f809 	bl	80101b8 <ucdr_alignment>
 800e1a6:	f100 0408 	add.w	r4, r0, #8
 800e1aa:	442c      	add	r4, r5
 800e1ac:	2108      	movs	r1, #8
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f002 f802 	bl	80101b8 <ucdr_alignment>
 800e1b4:	3008      	adds	r0, #8
 800e1b6:	4420      	add	r0, r4
 800e1b8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ba:	bf00      	nop

0800e1bc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800e1bc:	b570      	push	{r4, r5, r6, lr}
 800e1be:	2301      	movs	r3, #1
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	7003      	strb	r3, [r0, #0]
 800e1c4:	2108      	movs	r1, #8
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f001 fff6 	bl	80101b8 <ucdr_alignment>
 800e1cc:	f104 0508 	add.w	r5, r4, #8
 800e1d0:	1946      	adds	r6, r0, r5
 800e1d2:	2108      	movs	r1, #8
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f001 ffef 	bl	80101b8 <ucdr_alignment>
 800e1da:	f100 0508 	add.w	r5, r0, #8
 800e1de:	4435      	add	r5, r6
 800e1e0:	2108      	movs	r1, #8
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f001 ffe8 	bl	80101b8 <ucdr_alignment>
 800e1e8:	f1c4 0408 	rsb	r4, r4, #8
 800e1ec:	4420      	add	r0, r4
 800e1ee:	4428      	add	r0, r5
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	bf00      	nop

0800e1f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e1f4:	4800      	ldr	r0, [pc, #0]	@ (800e1f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800e1f6:	4770      	bx	lr
 800e1f8:	20000a40 	.word	0x20000a40

0800e1fc <micro_ros_string_utilities_init_with_size>:
 800e1fc:	b570      	push	{r4, r5, r6, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	1c4c      	adds	r4, r1, #1
 800e202:	4605      	mov	r5, r0
 800e204:	a801      	add	r0, sp, #4
 800e206:	f7fe fbf5 	bl	800c9f4 <rcutils_get_default_allocator>
 800e20a:	9b01      	ldr	r3, [sp, #4]
 800e20c:	9905      	ldr	r1, [sp, #20]
 800e20e:	4620      	mov	r0, r4
 800e210:	4798      	blx	r3
 800e212:	4622      	mov	r2, r4
 800e214:	2100      	movs	r1, #0
 800e216:	4606      	mov	r6, r0
 800e218:	f00c ff2f 	bl	801b07a <memset>
 800e21c:	2300      	movs	r3, #0
 800e21e:	4628      	mov	r0, r5
 800e220:	e9c5 6300 	strd	r6, r3, [r5]
 800e224:	60ac      	str	r4, [r5, #8]
 800e226:	b006      	add	sp, #24
 800e228:	bd70      	pop	{r4, r5, r6, pc}
 800e22a:	bf00      	nop

0800e22c <micro_ros_string_utilities_append>:
 800e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	b08a      	sub	sp, #40	@ 0x28
 800e232:	4604      	mov	r4, r0
 800e234:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800e238:	a801      	add	r0, sp, #4
 800e23a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800e23e:	a805      	add	r0, sp, #20
 800e240:	f7fe fbd8 	bl	800c9f4 <rcutils_get_default_allocator>
 800e244:	4640      	mov	r0, r8
 800e246:	f7f1 ffdb 	bl	8000200 <strlen>
 800e24a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e24e:	9f03      	ldr	r7, [sp, #12]
 800e250:	9d01      	ldr	r5, [sp, #4]
 800e252:	eb00 0a09 	add.w	sl, r0, r9
 800e256:	45ba      	cmp	sl, r7
 800e258:	4606      	mov	r6, r0
 800e25a:	d307      	bcc.n	800e26c <micro_ros_string_utilities_append+0x40>
 800e25c:	f10a 0701 	add.w	r7, sl, #1
 800e260:	4628      	mov	r0, r5
 800e262:	9b07      	ldr	r3, [sp, #28]
 800e264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e266:	4639      	mov	r1, r7
 800e268:	4798      	blx	r3
 800e26a:	4605      	mov	r5, r0
 800e26c:	1c72      	adds	r2, r6, #1
 800e26e:	4641      	mov	r1, r8
 800e270:	eb05 0009 	add.w	r0, r5, r9
 800e274:	f00c ff69 	bl	801b14a <memcpy>
 800e278:	4620      	mov	r0, r4
 800e27a:	e9c4 5a00 	strd	r5, sl, [r4]
 800e27e:	60a7      	str	r7, [r4, #8]
 800e280:	b00a      	add	sp, #40	@ 0x28
 800e282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e286:	bf00      	nop

0800e288 <micro_ros_string_utilities_remove_tail_chars>:
 800e288:	b500      	push	{lr}
 800e28a:	b085      	sub	sp, #20
 800e28c:	f10d 0e04 	add.w	lr, sp, #4
 800e290:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800e294:	4684      	mov	ip, r0
 800e296:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800e29a:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800e29e:	460b      	mov	r3, r1
 800e2a0:	9906      	ldr	r1, [sp, #24]
 800e2a2:	1a5b      	subs	r3, r3, r1
 800e2a4:	9901      	ldr	r1, [sp, #4]
 800e2a6:	f8cc 3004 	str.w	r3, [ip, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	4660      	mov	r0, ip
 800e2ae:	54ca      	strb	r2, [r1, r3]
 800e2b0:	b005      	add	sp, #20
 800e2b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2b6:	bf00      	nop

0800e2b8 <micro_ros_string_utilities_destroy>:
 800e2b8:	b510      	push	{r4, lr}
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	b086      	sub	sp, #24
 800e2be:	a801      	add	r0, sp, #4
 800e2c0:	f7fe fb98 	bl	800c9f4 <rcutils_get_default_allocator>
 800e2c4:	9b02      	ldr	r3, [sp, #8]
 800e2c6:	9905      	ldr	r1, [sp, #20]
 800e2c8:	6820      	ldr	r0, [r4, #0]
 800e2ca:	4798      	blx	r3
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	e9c4 3300 	strd	r3, r3, [r4]
 800e2d2:	60a3      	str	r3, [r4, #8]
 800e2d4:	b006      	add	sp, #24
 800e2d6:	bd10      	pop	{r4, pc}

0800e2d8 <ucdr_serialize_endian_array_char>:
 800e2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2dc:	4619      	mov	r1, r3
 800e2de:	461f      	mov	r7, r3
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	4690      	mov	r8, r2
 800e2e4:	f001 ff10 	bl	8010108 <ucdr_check_buffer_available_for>
 800e2e8:	b9e0      	cbnz	r0, 800e324 <ucdr_serialize_endian_array_char+0x4c>
 800e2ea:	463e      	mov	r6, r7
 800e2ec:	e009      	b.n	800e302 <ucdr_serialize_endian_array_char+0x2a>
 800e2ee:	68a8      	ldr	r0, [r5, #8]
 800e2f0:	f00c ff2b 	bl	801b14a <memcpy>
 800e2f4:	68ab      	ldr	r3, [r5, #8]
 800e2f6:	6928      	ldr	r0, [r5, #16]
 800e2f8:	4423      	add	r3, r4
 800e2fa:	4420      	add	r0, r4
 800e2fc:	1b36      	subs	r6, r6, r4
 800e2fe:	60ab      	str	r3, [r5, #8]
 800e300:	6128      	str	r0, [r5, #16]
 800e302:	4631      	mov	r1, r6
 800e304:	2201      	movs	r2, #1
 800e306:	4628      	mov	r0, r5
 800e308:	f001 ff86 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e30c:	1bb9      	subs	r1, r7, r6
 800e30e:	4441      	add	r1, r8
 800e310:	4604      	mov	r4, r0
 800e312:	4602      	mov	r2, r0
 800e314:	2800      	cmp	r0, #0
 800e316:	d1ea      	bne.n	800e2ee <ucdr_serialize_endian_array_char+0x16>
 800e318:	2301      	movs	r3, #1
 800e31a:	7da8      	ldrb	r0, [r5, #22]
 800e31c:	756b      	strb	r3, [r5, #21]
 800e31e:	4058      	eors	r0, r3
 800e320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e324:	463a      	mov	r2, r7
 800e326:	68a8      	ldr	r0, [r5, #8]
 800e328:	4641      	mov	r1, r8
 800e32a:	f00c ff0e 	bl	801b14a <memcpy>
 800e32e:	68aa      	ldr	r2, [r5, #8]
 800e330:	692b      	ldr	r3, [r5, #16]
 800e332:	443a      	add	r2, r7
 800e334:	443b      	add	r3, r7
 800e336:	60aa      	str	r2, [r5, #8]
 800e338:	612b      	str	r3, [r5, #16]
 800e33a:	e7ed      	b.n	800e318 <ucdr_serialize_endian_array_char+0x40>

0800e33c <ucdr_deserialize_endian_array_char>:
 800e33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e340:	4619      	mov	r1, r3
 800e342:	461f      	mov	r7, r3
 800e344:	4605      	mov	r5, r0
 800e346:	4690      	mov	r8, r2
 800e348:	f001 fede 	bl	8010108 <ucdr_check_buffer_available_for>
 800e34c:	b9e0      	cbnz	r0, 800e388 <ucdr_deserialize_endian_array_char+0x4c>
 800e34e:	463e      	mov	r6, r7
 800e350:	e009      	b.n	800e366 <ucdr_deserialize_endian_array_char+0x2a>
 800e352:	68a9      	ldr	r1, [r5, #8]
 800e354:	f00c fef9 	bl	801b14a <memcpy>
 800e358:	68ab      	ldr	r3, [r5, #8]
 800e35a:	6928      	ldr	r0, [r5, #16]
 800e35c:	4423      	add	r3, r4
 800e35e:	4420      	add	r0, r4
 800e360:	1b36      	subs	r6, r6, r4
 800e362:	60ab      	str	r3, [r5, #8]
 800e364:	6128      	str	r0, [r5, #16]
 800e366:	2201      	movs	r2, #1
 800e368:	4631      	mov	r1, r6
 800e36a:	4628      	mov	r0, r5
 800e36c:	f001 ff54 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e370:	4604      	mov	r4, r0
 800e372:	1bb8      	subs	r0, r7, r6
 800e374:	4440      	add	r0, r8
 800e376:	4622      	mov	r2, r4
 800e378:	2c00      	cmp	r4, #0
 800e37a:	d1ea      	bne.n	800e352 <ucdr_deserialize_endian_array_char+0x16>
 800e37c:	2301      	movs	r3, #1
 800e37e:	7da8      	ldrb	r0, [r5, #22]
 800e380:	756b      	strb	r3, [r5, #21]
 800e382:	4058      	eors	r0, r3
 800e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e388:	463a      	mov	r2, r7
 800e38a:	68a9      	ldr	r1, [r5, #8]
 800e38c:	4640      	mov	r0, r8
 800e38e:	f00c fedc 	bl	801b14a <memcpy>
 800e392:	68aa      	ldr	r2, [r5, #8]
 800e394:	692b      	ldr	r3, [r5, #16]
 800e396:	443a      	add	r2, r7
 800e398:	443b      	add	r3, r7
 800e39a:	60aa      	str	r2, [r5, #8]
 800e39c:	612b      	str	r3, [r5, #16]
 800e39e:	e7ed      	b.n	800e37c <ucdr_deserialize_endian_array_char+0x40>

0800e3a0 <ucdr_serialize_array_uint8_t>:
 800e3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a4:	4688      	mov	r8, r1
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	4617      	mov	r7, r2
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	f001 feac 	bl	8010108 <ucdr_check_buffer_available_for>
 800e3b0:	b9e0      	cbnz	r0, 800e3ec <ucdr_serialize_array_uint8_t+0x4c>
 800e3b2:	463e      	mov	r6, r7
 800e3b4:	e009      	b.n	800e3ca <ucdr_serialize_array_uint8_t+0x2a>
 800e3b6:	68a8      	ldr	r0, [r5, #8]
 800e3b8:	f00c fec7 	bl	801b14a <memcpy>
 800e3bc:	68aa      	ldr	r2, [r5, #8]
 800e3be:	692b      	ldr	r3, [r5, #16]
 800e3c0:	4422      	add	r2, r4
 800e3c2:	4423      	add	r3, r4
 800e3c4:	1b36      	subs	r6, r6, r4
 800e3c6:	60aa      	str	r2, [r5, #8]
 800e3c8:	612b      	str	r3, [r5, #16]
 800e3ca:	4631      	mov	r1, r6
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f001 ff22 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e3d4:	1bb9      	subs	r1, r7, r6
 800e3d6:	4441      	add	r1, r8
 800e3d8:	4604      	mov	r4, r0
 800e3da:	4602      	mov	r2, r0
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d1ea      	bne.n	800e3b6 <ucdr_serialize_array_uint8_t+0x16>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	7da8      	ldrb	r0, [r5, #22]
 800e3e4:	756b      	strb	r3, [r5, #21]
 800e3e6:	4058      	eors	r0, r3
 800e3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ec:	463a      	mov	r2, r7
 800e3ee:	68a8      	ldr	r0, [r5, #8]
 800e3f0:	4641      	mov	r1, r8
 800e3f2:	f00c feaa 	bl	801b14a <memcpy>
 800e3f6:	68aa      	ldr	r2, [r5, #8]
 800e3f8:	692b      	ldr	r3, [r5, #16]
 800e3fa:	443a      	add	r2, r7
 800e3fc:	443b      	add	r3, r7
 800e3fe:	60aa      	str	r2, [r5, #8]
 800e400:	612b      	str	r3, [r5, #16]
 800e402:	e7ed      	b.n	800e3e0 <ucdr_serialize_array_uint8_t+0x40>

0800e404 <ucdr_serialize_endian_array_uint8_t>:
 800e404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e408:	4619      	mov	r1, r3
 800e40a:	461f      	mov	r7, r3
 800e40c:	4605      	mov	r5, r0
 800e40e:	4690      	mov	r8, r2
 800e410:	f001 fe7a 	bl	8010108 <ucdr_check_buffer_available_for>
 800e414:	b9e0      	cbnz	r0, 800e450 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e416:	463e      	mov	r6, r7
 800e418:	e009      	b.n	800e42e <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e41a:	68a8      	ldr	r0, [r5, #8]
 800e41c:	f00c fe95 	bl	801b14a <memcpy>
 800e420:	68ab      	ldr	r3, [r5, #8]
 800e422:	6928      	ldr	r0, [r5, #16]
 800e424:	4423      	add	r3, r4
 800e426:	4420      	add	r0, r4
 800e428:	1b36      	subs	r6, r6, r4
 800e42a:	60ab      	str	r3, [r5, #8]
 800e42c:	6128      	str	r0, [r5, #16]
 800e42e:	4631      	mov	r1, r6
 800e430:	2201      	movs	r2, #1
 800e432:	4628      	mov	r0, r5
 800e434:	f001 fef0 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e438:	1bb9      	subs	r1, r7, r6
 800e43a:	4441      	add	r1, r8
 800e43c:	4604      	mov	r4, r0
 800e43e:	4602      	mov	r2, r0
 800e440:	2800      	cmp	r0, #0
 800e442:	d1ea      	bne.n	800e41a <ucdr_serialize_endian_array_uint8_t+0x16>
 800e444:	2301      	movs	r3, #1
 800e446:	7da8      	ldrb	r0, [r5, #22]
 800e448:	756b      	strb	r3, [r5, #21]
 800e44a:	4058      	eors	r0, r3
 800e44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e450:	463a      	mov	r2, r7
 800e452:	68a8      	ldr	r0, [r5, #8]
 800e454:	4641      	mov	r1, r8
 800e456:	f00c fe78 	bl	801b14a <memcpy>
 800e45a:	68aa      	ldr	r2, [r5, #8]
 800e45c:	692b      	ldr	r3, [r5, #16]
 800e45e:	443a      	add	r2, r7
 800e460:	443b      	add	r3, r7
 800e462:	60aa      	str	r2, [r5, #8]
 800e464:	612b      	str	r3, [r5, #16]
 800e466:	e7ed      	b.n	800e444 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e468 <ucdr_deserialize_array_uint8_t>:
 800e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46c:	4688      	mov	r8, r1
 800e46e:	4611      	mov	r1, r2
 800e470:	4617      	mov	r7, r2
 800e472:	4605      	mov	r5, r0
 800e474:	f001 fe48 	bl	8010108 <ucdr_check_buffer_available_for>
 800e478:	b9e0      	cbnz	r0, 800e4b4 <ucdr_deserialize_array_uint8_t+0x4c>
 800e47a:	463e      	mov	r6, r7
 800e47c:	e009      	b.n	800e492 <ucdr_deserialize_array_uint8_t+0x2a>
 800e47e:	68a9      	ldr	r1, [r5, #8]
 800e480:	f00c fe63 	bl	801b14a <memcpy>
 800e484:	68aa      	ldr	r2, [r5, #8]
 800e486:	692b      	ldr	r3, [r5, #16]
 800e488:	4422      	add	r2, r4
 800e48a:	4423      	add	r3, r4
 800e48c:	1b36      	subs	r6, r6, r4
 800e48e:	60aa      	str	r2, [r5, #8]
 800e490:	612b      	str	r3, [r5, #16]
 800e492:	2201      	movs	r2, #1
 800e494:	4631      	mov	r1, r6
 800e496:	4628      	mov	r0, r5
 800e498:	f001 febe 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e49c:	4604      	mov	r4, r0
 800e49e:	1bb8      	subs	r0, r7, r6
 800e4a0:	4440      	add	r0, r8
 800e4a2:	4622      	mov	r2, r4
 800e4a4:	2c00      	cmp	r4, #0
 800e4a6:	d1ea      	bne.n	800e47e <ucdr_deserialize_array_uint8_t+0x16>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	7da8      	ldrb	r0, [r5, #22]
 800e4ac:	756b      	strb	r3, [r5, #21]
 800e4ae:	4058      	eors	r0, r3
 800e4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b4:	463a      	mov	r2, r7
 800e4b6:	68a9      	ldr	r1, [r5, #8]
 800e4b8:	4640      	mov	r0, r8
 800e4ba:	f00c fe46 	bl	801b14a <memcpy>
 800e4be:	68aa      	ldr	r2, [r5, #8]
 800e4c0:	692b      	ldr	r3, [r5, #16]
 800e4c2:	443a      	add	r2, r7
 800e4c4:	443b      	add	r3, r7
 800e4c6:	60aa      	str	r2, [r5, #8]
 800e4c8:	612b      	str	r3, [r5, #16]
 800e4ca:	e7ed      	b.n	800e4a8 <ucdr_deserialize_array_uint8_t+0x40>

0800e4cc <ucdr_deserialize_endian_array_uint8_t>:
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	461f      	mov	r7, r3
 800e4d4:	4605      	mov	r5, r0
 800e4d6:	4690      	mov	r8, r2
 800e4d8:	f001 fe16 	bl	8010108 <ucdr_check_buffer_available_for>
 800e4dc:	b9e0      	cbnz	r0, 800e518 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e4de:	463e      	mov	r6, r7
 800e4e0:	e009      	b.n	800e4f6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e4e2:	68a9      	ldr	r1, [r5, #8]
 800e4e4:	f00c fe31 	bl	801b14a <memcpy>
 800e4e8:	68ab      	ldr	r3, [r5, #8]
 800e4ea:	6928      	ldr	r0, [r5, #16]
 800e4ec:	4423      	add	r3, r4
 800e4ee:	4420      	add	r0, r4
 800e4f0:	1b36      	subs	r6, r6, r4
 800e4f2:	60ab      	str	r3, [r5, #8]
 800e4f4:	6128      	str	r0, [r5, #16]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	f001 fe8c 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e500:	4604      	mov	r4, r0
 800e502:	1bb8      	subs	r0, r7, r6
 800e504:	4440      	add	r0, r8
 800e506:	4622      	mov	r2, r4
 800e508:	2c00      	cmp	r4, #0
 800e50a:	d1ea      	bne.n	800e4e2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e50c:	2301      	movs	r3, #1
 800e50e:	7da8      	ldrb	r0, [r5, #22]
 800e510:	756b      	strb	r3, [r5, #21]
 800e512:	4058      	eors	r0, r3
 800e514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e518:	463a      	mov	r2, r7
 800e51a:	68a9      	ldr	r1, [r5, #8]
 800e51c:	4640      	mov	r0, r8
 800e51e:	f00c fe14 	bl	801b14a <memcpy>
 800e522:	68aa      	ldr	r2, [r5, #8]
 800e524:	692b      	ldr	r3, [r5, #16]
 800e526:	443a      	add	r2, r7
 800e528:	443b      	add	r3, r7
 800e52a:	60aa      	str	r2, [r5, #8]
 800e52c:	612b      	str	r3, [r5, #16]
 800e52e:	e7ed      	b.n	800e50c <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e530 <ucdr_serialize_array_uint16_t>:
 800e530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e534:	460e      	mov	r6, r1
 800e536:	2102      	movs	r1, #2
 800e538:	4604      	mov	r4, r0
 800e53a:	4617      	mov	r7, r2
 800e53c:	f001 fe44 	bl	80101c8 <ucdr_buffer_alignment>
 800e540:	4601      	mov	r1, r0
 800e542:	4620      	mov	r0, r4
 800e544:	7d65      	ldrb	r5, [r4, #21]
 800e546:	f001 fe83 	bl	8010250 <ucdr_advance_buffer>
 800e54a:	7d21      	ldrb	r1, [r4, #20]
 800e54c:	7565      	strb	r5, [r4, #21]
 800e54e:	2901      	cmp	r1, #1
 800e550:	d011      	beq.n	800e576 <ucdr_serialize_array_uint16_t+0x46>
 800e552:	b15f      	cbz	r7, 800e56c <ucdr_serialize_array_uint16_t+0x3c>
 800e554:	3e02      	subs	r6, #2
 800e556:	2500      	movs	r5, #0
 800e558:	e000      	b.n	800e55c <ucdr_serialize_array_uint16_t+0x2c>
 800e55a:	7d21      	ldrb	r1, [r4, #20]
 800e55c:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800e560:	4620      	mov	r0, r4
 800e562:	3501      	adds	r5, #1
 800e564:	f000 fabe 	bl	800eae4 <ucdr_serialize_endian_uint16_t>
 800e568:	42af      	cmp	r7, r5
 800e56a:	d1f6      	bne.n	800e55a <ucdr_serialize_array_uint16_t+0x2a>
 800e56c:	7da0      	ldrb	r0, [r4, #22]
 800e56e:	f080 0001 	eor.w	r0, r0, #1
 800e572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e576:	007f      	lsls	r7, r7, #1
 800e578:	4639      	mov	r1, r7
 800e57a:	4620      	mov	r0, r4
 800e57c:	f001 fdc4 	bl	8010108 <ucdr_check_buffer_available_for>
 800e580:	b9f8      	cbnz	r0, 800e5c2 <ucdr_serialize_array_uint16_t+0x92>
 800e582:	46b8      	mov	r8, r7
 800e584:	e00a      	b.n	800e59c <ucdr_serialize_array_uint16_t+0x6c>
 800e586:	68a0      	ldr	r0, [r4, #8]
 800e588:	f00c fddf 	bl	801b14a <memcpy>
 800e58c:	68a2      	ldr	r2, [r4, #8]
 800e58e:	6923      	ldr	r3, [r4, #16]
 800e590:	442a      	add	r2, r5
 800e592:	442b      	add	r3, r5
 800e594:	eba8 0805 	sub.w	r8, r8, r5
 800e598:	60a2      	str	r2, [r4, #8]
 800e59a:	6123      	str	r3, [r4, #16]
 800e59c:	4641      	mov	r1, r8
 800e59e:	2202      	movs	r2, #2
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f001 fe39 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e5a6:	eba7 0108 	sub.w	r1, r7, r8
 800e5aa:	4431      	add	r1, r6
 800e5ac:	4605      	mov	r5, r0
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d1e8      	bne.n	800e586 <ucdr_serialize_array_uint16_t+0x56>
 800e5b4:	7da0      	ldrb	r0, [r4, #22]
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	7563      	strb	r3, [r4, #21]
 800e5ba:	f080 0001 	eor.w	r0, r0, #1
 800e5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c2:	463a      	mov	r2, r7
 800e5c4:	68a0      	ldr	r0, [r4, #8]
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	f00c fdbf 	bl	801b14a <memcpy>
 800e5cc:	68a2      	ldr	r2, [r4, #8]
 800e5ce:	6923      	ldr	r3, [r4, #16]
 800e5d0:	443a      	add	r2, r7
 800e5d2:	441f      	add	r7, r3
 800e5d4:	60a2      	str	r2, [r4, #8]
 800e5d6:	6127      	str	r7, [r4, #16]
 800e5d8:	e7ec      	b.n	800e5b4 <ucdr_serialize_array_uint16_t+0x84>
 800e5da:	bf00      	nop

0800e5dc <ucdr_deserialize_array_uint16_t>:
 800e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e0:	460e      	mov	r6, r1
 800e5e2:	2102      	movs	r1, #2
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	4617      	mov	r7, r2
 800e5e8:	f001 fdee 	bl	80101c8 <ucdr_buffer_alignment>
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	7d65      	ldrb	r5, [r4, #21]
 800e5f2:	f001 fe2d 	bl	8010250 <ucdr_advance_buffer>
 800e5f6:	7d21      	ldrb	r1, [r4, #20]
 800e5f8:	7565      	strb	r5, [r4, #21]
 800e5fa:	2901      	cmp	r1, #1
 800e5fc:	d011      	beq.n	800e622 <ucdr_deserialize_array_uint16_t+0x46>
 800e5fe:	b15f      	cbz	r7, 800e618 <ucdr_deserialize_array_uint16_t+0x3c>
 800e600:	2500      	movs	r5, #0
 800e602:	e000      	b.n	800e606 <ucdr_deserialize_array_uint16_t+0x2a>
 800e604:	7d21      	ldrb	r1, [r4, #20]
 800e606:	4632      	mov	r2, r6
 800e608:	4620      	mov	r0, r4
 800e60a:	3501      	adds	r5, #1
 800e60c:	f000 fb5e 	bl	800eccc <ucdr_deserialize_endian_uint16_t>
 800e610:	42af      	cmp	r7, r5
 800e612:	f106 0602 	add.w	r6, r6, #2
 800e616:	d1f5      	bne.n	800e604 <ucdr_deserialize_array_uint16_t+0x28>
 800e618:	7da0      	ldrb	r0, [r4, #22]
 800e61a:	f080 0001 	eor.w	r0, r0, #1
 800e61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e622:	007f      	lsls	r7, r7, #1
 800e624:	4639      	mov	r1, r7
 800e626:	4620      	mov	r0, r4
 800e628:	f001 fd6e 	bl	8010108 <ucdr_check_buffer_available_for>
 800e62c:	b9f8      	cbnz	r0, 800e66e <ucdr_deserialize_array_uint16_t+0x92>
 800e62e:	46b8      	mov	r8, r7
 800e630:	e00a      	b.n	800e648 <ucdr_deserialize_array_uint16_t+0x6c>
 800e632:	68a1      	ldr	r1, [r4, #8]
 800e634:	f00c fd89 	bl	801b14a <memcpy>
 800e638:	68a2      	ldr	r2, [r4, #8]
 800e63a:	6923      	ldr	r3, [r4, #16]
 800e63c:	442a      	add	r2, r5
 800e63e:	442b      	add	r3, r5
 800e640:	eba8 0805 	sub.w	r8, r8, r5
 800e644:	60a2      	str	r2, [r4, #8]
 800e646:	6123      	str	r3, [r4, #16]
 800e648:	2202      	movs	r2, #2
 800e64a:	4641      	mov	r1, r8
 800e64c:	4620      	mov	r0, r4
 800e64e:	f001 fde3 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e652:	4605      	mov	r5, r0
 800e654:	eba7 0008 	sub.w	r0, r7, r8
 800e658:	4430      	add	r0, r6
 800e65a:	462a      	mov	r2, r5
 800e65c:	2d00      	cmp	r5, #0
 800e65e:	d1e8      	bne.n	800e632 <ucdr_deserialize_array_uint16_t+0x56>
 800e660:	7da0      	ldrb	r0, [r4, #22]
 800e662:	2302      	movs	r3, #2
 800e664:	7563      	strb	r3, [r4, #21]
 800e666:	f080 0001 	eor.w	r0, r0, #1
 800e66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66e:	463a      	mov	r2, r7
 800e670:	68a1      	ldr	r1, [r4, #8]
 800e672:	4630      	mov	r0, r6
 800e674:	f00c fd69 	bl	801b14a <memcpy>
 800e678:	68a2      	ldr	r2, [r4, #8]
 800e67a:	6923      	ldr	r3, [r4, #16]
 800e67c:	443a      	add	r2, r7
 800e67e:	441f      	add	r7, r3
 800e680:	60a2      	str	r2, [r4, #8]
 800e682:	6127      	str	r7, [r4, #16]
 800e684:	e7ec      	b.n	800e660 <ucdr_deserialize_array_uint16_t+0x84>
 800e686:	bf00      	nop

0800e688 <ucdr_serialize_array_float>:
 800e688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e68c:	460e      	mov	r6, r1
 800e68e:	2104      	movs	r1, #4
 800e690:	4604      	mov	r4, r0
 800e692:	4617      	mov	r7, r2
 800e694:	f001 fd98 	bl	80101c8 <ucdr_buffer_alignment>
 800e698:	4601      	mov	r1, r0
 800e69a:	4620      	mov	r0, r4
 800e69c:	7d65      	ldrb	r5, [r4, #21]
 800e69e:	f001 fdd7 	bl	8010250 <ucdr_advance_buffer>
 800e6a2:	7d21      	ldrb	r1, [r4, #20]
 800e6a4:	7565      	strb	r5, [r4, #21]
 800e6a6:	2901      	cmp	r1, #1
 800e6a8:	d010      	beq.n	800e6cc <ucdr_serialize_array_float+0x44>
 800e6aa:	b157      	cbz	r7, 800e6c2 <ucdr_serialize_array_float+0x3a>
 800e6ac:	2500      	movs	r5, #0
 800e6ae:	e000      	b.n	800e6b2 <ucdr_serialize_array_float+0x2a>
 800e6b0:	7d21      	ldrb	r1, [r4, #20]
 800e6b2:	ecb6 0a01 	vldmia	r6!, {s0}
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	3501      	adds	r5, #1
 800e6ba:	f001 f8bf 	bl	800f83c <ucdr_serialize_endian_float>
 800e6be:	42af      	cmp	r7, r5
 800e6c0:	d1f6      	bne.n	800e6b0 <ucdr_serialize_array_float+0x28>
 800e6c2:	7da0      	ldrb	r0, [r4, #22]
 800e6c4:	f080 0001 	eor.w	r0, r0, #1
 800e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6cc:	00bf      	lsls	r7, r7, #2
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f001 fd19 	bl	8010108 <ucdr_check_buffer_available_for>
 800e6d6:	b9f8      	cbnz	r0, 800e718 <ucdr_serialize_array_float+0x90>
 800e6d8:	46b8      	mov	r8, r7
 800e6da:	e00a      	b.n	800e6f2 <ucdr_serialize_array_float+0x6a>
 800e6dc:	68a0      	ldr	r0, [r4, #8]
 800e6de:	f00c fd34 	bl	801b14a <memcpy>
 800e6e2:	68a2      	ldr	r2, [r4, #8]
 800e6e4:	6923      	ldr	r3, [r4, #16]
 800e6e6:	442a      	add	r2, r5
 800e6e8:	442b      	add	r3, r5
 800e6ea:	eba8 0805 	sub.w	r8, r8, r5
 800e6ee:	60a2      	str	r2, [r4, #8]
 800e6f0:	6123      	str	r3, [r4, #16]
 800e6f2:	4641      	mov	r1, r8
 800e6f4:	2204      	movs	r2, #4
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f001 fd8e 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e6fc:	eba7 0108 	sub.w	r1, r7, r8
 800e700:	4431      	add	r1, r6
 800e702:	4605      	mov	r5, r0
 800e704:	4602      	mov	r2, r0
 800e706:	2800      	cmp	r0, #0
 800e708:	d1e8      	bne.n	800e6dc <ucdr_serialize_array_float+0x54>
 800e70a:	7da0      	ldrb	r0, [r4, #22]
 800e70c:	2304      	movs	r3, #4
 800e70e:	7563      	strb	r3, [r4, #21]
 800e710:	f080 0001 	eor.w	r0, r0, #1
 800e714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e718:	463a      	mov	r2, r7
 800e71a:	68a0      	ldr	r0, [r4, #8]
 800e71c:	4631      	mov	r1, r6
 800e71e:	f00c fd14 	bl	801b14a <memcpy>
 800e722:	68a2      	ldr	r2, [r4, #8]
 800e724:	6923      	ldr	r3, [r4, #16]
 800e726:	443a      	add	r2, r7
 800e728:	441f      	add	r7, r3
 800e72a:	60a2      	str	r2, [r4, #8]
 800e72c:	6127      	str	r7, [r4, #16]
 800e72e:	e7ec      	b.n	800e70a <ucdr_serialize_array_float+0x82>

0800e730 <ucdr_deserialize_array_float>:
 800e730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e734:	460e      	mov	r6, r1
 800e736:	2104      	movs	r1, #4
 800e738:	4604      	mov	r4, r0
 800e73a:	4617      	mov	r7, r2
 800e73c:	f001 fd44 	bl	80101c8 <ucdr_buffer_alignment>
 800e740:	4601      	mov	r1, r0
 800e742:	4620      	mov	r0, r4
 800e744:	7d65      	ldrb	r5, [r4, #21]
 800e746:	f001 fd83 	bl	8010250 <ucdr_advance_buffer>
 800e74a:	7d21      	ldrb	r1, [r4, #20]
 800e74c:	7565      	strb	r5, [r4, #21]
 800e74e:	2901      	cmp	r1, #1
 800e750:	d011      	beq.n	800e776 <ucdr_deserialize_array_float+0x46>
 800e752:	b15f      	cbz	r7, 800e76c <ucdr_deserialize_array_float+0x3c>
 800e754:	2500      	movs	r5, #0
 800e756:	e000      	b.n	800e75a <ucdr_deserialize_array_float+0x2a>
 800e758:	7d21      	ldrb	r1, [r4, #20]
 800e75a:	4632      	mov	r2, r6
 800e75c:	4620      	mov	r0, r4
 800e75e:	3501      	adds	r5, #1
 800e760:	f001 f906 	bl	800f970 <ucdr_deserialize_endian_float>
 800e764:	42af      	cmp	r7, r5
 800e766:	f106 0604 	add.w	r6, r6, #4
 800e76a:	d1f5      	bne.n	800e758 <ucdr_deserialize_array_float+0x28>
 800e76c:	7da0      	ldrb	r0, [r4, #22]
 800e76e:	f080 0001 	eor.w	r0, r0, #1
 800e772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e776:	00bf      	lsls	r7, r7, #2
 800e778:	4639      	mov	r1, r7
 800e77a:	4620      	mov	r0, r4
 800e77c:	f001 fcc4 	bl	8010108 <ucdr_check_buffer_available_for>
 800e780:	b9f8      	cbnz	r0, 800e7c2 <ucdr_deserialize_array_float+0x92>
 800e782:	46b8      	mov	r8, r7
 800e784:	e00a      	b.n	800e79c <ucdr_deserialize_array_float+0x6c>
 800e786:	68a1      	ldr	r1, [r4, #8]
 800e788:	f00c fcdf 	bl	801b14a <memcpy>
 800e78c:	68a2      	ldr	r2, [r4, #8]
 800e78e:	6923      	ldr	r3, [r4, #16]
 800e790:	442a      	add	r2, r5
 800e792:	442b      	add	r3, r5
 800e794:	eba8 0805 	sub.w	r8, r8, r5
 800e798:	60a2      	str	r2, [r4, #8]
 800e79a:	6123      	str	r3, [r4, #16]
 800e79c:	2204      	movs	r2, #4
 800e79e:	4641      	mov	r1, r8
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f001 fd39 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	eba7 0008 	sub.w	r0, r7, r8
 800e7ac:	4430      	add	r0, r6
 800e7ae:	462a      	mov	r2, r5
 800e7b0:	2d00      	cmp	r5, #0
 800e7b2:	d1e8      	bne.n	800e786 <ucdr_deserialize_array_float+0x56>
 800e7b4:	7da0      	ldrb	r0, [r4, #22]
 800e7b6:	2304      	movs	r3, #4
 800e7b8:	7563      	strb	r3, [r4, #21]
 800e7ba:	f080 0001 	eor.w	r0, r0, #1
 800e7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c2:	463a      	mov	r2, r7
 800e7c4:	68a1      	ldr	r1, [r4, #8]
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	f00c fcbf 	bl	801b14a <memcpy>
 800e7cc:	68a2      	ldr	r2, [r4, #8]
 800e7ce:	6923      	ldr	r3, [r4, #16]
 800e7d0:	443a      	add	r2, r7
 800e7d2:	441f      	add	r7, r3
 800e7d4:	60a2      	str	r2, [r4, #8]
 800e7d6:	6127      	str	r7, [r4, #16]
 800e7d8:	e7ec      	b.n	800e7b4 <ucdr_deserialize_array_float+0x84>
 800e7da:	bf00      	nop

0800e7dc <ucdr_serialize_array_double>:
 800e7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e0:	460e      	mov	r6, r1
 800e7e2:	2108      	movs	r1, #8
 800e7e4:	4604      	mov	r4, r0
 800e7e6:	4617      	mov	r7, r2
 800e7e8:	f001 fcee 	bl	80101c8 <ucdr_buffer_alignment>
 800e7ec:	4601      	mov	r1, r0
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	7d65      	ldrb	r5, [r4, #21]
 800e7f2:	f001 fd2d 	bl	8010250 <ucdr_advance_buffer>
 800e7f6:	7d21      	ldrb	r1, [r4, #20]
 800e7f8:	7565      	strb	r5, [r4, #21]
 800e7fa:	2901      	cmp	r1, #1
 800e7fc:	d010      	beq.n	800e820 <ucdr_serialize_array_double+0x44>
 800e7fe:	b157      	cbz	r7, 800e816 <ucdr_serialize_array_double+0x3a>
 800e800:	2500      	movs	r5, #0
 800e802:	e000      	b.n	800e806 <ucdr_serialize_array_double+0x2a>
 800e804:	7d21      	ldrb	r1, [r4, #20]
 800e806:	ecb6 0b02 	vldmia	r6!, {d0}
 800e80a:	4620      	mov	r0, r4
 800e80c:	3501      	adds	r5, #1
 800e80e:	f001 fa15 	bl	800fc3c <ucdr_serialize_endian_double>
 800e812:	42af      	cmp	r7, r5
 800e814:	d1f6      	bne.n	800e804 <ucdr_serialize_array_double+0x28>
 800e816:	7da0      	ldrb	r0, [r4, #22]
 800e818:	f080 0001 	eor.w	r0, r0, #1
 800e81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e820:	00ff      	lsls	r7, r7, #3
 800e822:	4639      	mov	r1, r7
 800e824:	4620      	mov	r0, r4
 800e826:	f001 fc6f 	bl	8010108 <ucdr_check_buffer_available_for>
 800e82a:	b9f8      	cbnz	r0, 800e86c <ucdr_serialize_array_double+0x90>
 800e82c:	46b8      	mov	r8, r7
 800e82e:	e00a      	b.n	800e846 <ucdr_serialize_array_double+0x6a>
 800e830:	68a0      	ldr	r0, [r4, #8]
 800e832:	f00c fc8a 	bl	801b14a <memcpy>
 800e836:	68a2      	ldr	r2, [r4, #8]
 800e838:	6923      	ldr	r3, [r4, #16]
 800e83a:	442a      	add	r2, r5
 800e83c:	442b      	add	r3, r5
 800e83e:	eba8 0805 	sub.w	r8, r8, r5
 800e842:	60a2      	str	r2, [r4, #8]
 800e844:	6123      	str	r3, [r4, #16]
 800e846:	4641      	mov	r1, r8
 800e848:	2208      	movs	r2, #8
 800e84a:	4620      	mov	r0, r4
 800e84c:	f001 fce4 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e850:	eba7 0108 	sub.w	r1, r7, r8
 800e854:	4431      	add	r1, r6
 800e856:	4605      	mov	r5, r0
 800e858:	4602      	mov	r2, r0
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d1e8      	bne.n	800e830 <ucdr_serialize_array_double+0x54>
 800e85e:	7da0      	ldrb	r0, [r4, #22]
 800e860:	2308      	movs	r3, #8
 800e862:	7563      	strb	r3, [r4, #21]
 800e864:	f080 0001 	eor.w	r0, r0, #1
 800e868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e86c:	463a      	mov	r2, r7
 800e86e:	68a0      	ldr	r0, [r4, #8]
 800e870:	4631      	mov	r1, r6
 800e872:	f00c fc6a 	bl	801b14a <memcpy>
 800e876:	68a2      	ldr	r2, [r4, #8]
 800e878:	6923      	ldr	r3, [r4, #16]
 800e87a:	443a      	add	r2, r7
 800e87c:	441f      	add	r7, r3
 800e87e:	60a2      	str	r2, [r4, #8]
 800e880:	6127      	str	r7, [r4, #16]
 800e882:	e7ec      	b.n	800e85e <ucdr_serialize_array_double+0x82>

0800e884 <ucdr_deserialize_array_double>:
 800e884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e888:	460e      	mov	r6, r1
 800e88a:	2108      	movs	r1, #8
 800e88c:	4604      	mov	r4, r0
 800e88e:	4617      	mov	r7, r2
 800e890:	f001 fc9a 	bl	80101c8 <ucdr_buffer_alignment>
 800e894:	4601      	mov	r1, r0
 800e896:	4620      	mov	r0, r4
 800e898:	7d65      	ldrb	r5, [r4, #21]
 800e89a:	f001 fcd9 	bl	8010250 <ucdr_advance_buffer>
 800e89e:	7d21      	ldrb	r1, [r4, #20]
 800e8a0:	7565      	strb	r5, [r4, #21]
 800e8a2:	2901      	cmp	r1, #1
 800e8a4:	d011      	beq.n	800e8ca <ucdr_deserialize_array_double+0x46>
 800e8a6:	b15f      	cbz	r7, 800e8c0 <ucdr_deserialize_array_double+0x3c>
 800e8a8:	2500      	movs	r5, #0
 800e8aa:	e000      	b.n	800e8ae <ucdr_deserialize_array_double+0x2a>
 800e8ac:	7d21      	ldrb	r1, [r4, #20]
 800e8ae:	4632      	mov	r2, r6
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	3501      	adds	r5, #1
 800e8b4:	f001 fb5a 	bl	800ff6c <ucdr_deserialize_endian_double>
 800e8b8:	42af      	cmp	r7, r5
 800e8ba:	f106 0608 	add.w	r6, r6, #8
 800e8be:	d1f5      	bne.n	800e8ac <ucdr_deserialize_array_double+0x28>
 800e8c0:	7da0      	ldrb	r0, [r4, #22]
 800e8c2:	f080 0001 	eor.w	r0, r0, #1
 800e8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ca:	00ff      	lsls	r7, r7, #3
 800e8cc:	4639      	mov	r1, r7
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f001 fc1a 	bl	8010108 <ucdr_check_buffer_available_for>
 800e8d4:	b9f8      	cbnz	r0, 800e916 <ucdr_deserialize_array_double+0x92>
 800e8d6:	46b8      	mov	r8, r7
 800e8d8:	e00a      	b.n	800e8f0 <ucdr_deserialize_array_double+0x6c>
 800e8da:	68a1      	ldr	r1, [r4, #8]
 800e8dc:	f00c fc35 	bl	801b14a <memcpy>
 800e8e0:	68a2      	ldr	r2, [r4, #8]
 800e8e2:	6923      	ldr	r3, [r4, #16]
 800e8e4:	442a      	add	r2, r5
 800e8e6:	442b      	add	r3, r5
 800e8e8:	eba8 0805 	sub.w	r8, r8, r5
 800e8ec:	60a2      	str	r2, [r4, #8]
 800e8ee:	6123      	str	r3, [r4, #16]
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	4641      	mov	r1, r8
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f001 fc8f 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	eba7 0008 	sub.w	r0, r7, r8
 800e900:	4430      	add	r0, r6
 800e902:	462a      	mov	r2, r5
 800e904:	2d00      	cmp	r5, #0
 800e906:	d1e8      	bne.n	800e8da <ucdr_deserialize_array_double+0x56>
 800e908:	7da0      	ldrb	r0, [r4, #22]
 800e90a:	2308      	movs	r3, #8
 800e90c:	7563      	strb	r3, [r4, #21]
 800e90e:	f080 0001 	eor.w	r0, r0, #1
 800e912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e916:	463a      	mov	r2, r7
 800e918:	68a1      	ldr	r1, [r4, #8]
 800e91a:	4630      	mov	r0, r6
 800e91c:	f00c fc15 	bl	801b14a <memcpy>
 800e920:	68a2      	ldr	r2, [r4, #8]
 800e922:	6923      	ldr	r3, [r4, #16]
 800e924:	443a      	add	r2, r7
 800e926:	441f      	add	r7, r3
 800e928:	60a2      	str	r2, [r4, #8]
 800e92a:	6127      	str	r7, [r4, #16]
 800e92c:	e7ec      	b.n	800e908 <ucdr_deserialize_array_double+0x84>
 800e92e:	bf00      	nop

0800e930 <ucdr_serialize_bool>:
 800e930:	b538      	push	{r3, r4, r5, lr}
 800e932:	460d      	mov	r5, r1
 800e934:	2101      	movs	r1, #1
 800e936:	4604      	mov	r4, r0
 800e938:	f001 fbf2 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800e93c:	b148      	cbz	r0, 800e952 <ucdr_serialize_bool+0x22>
 800e93e:	68a3      	ldr	r3, [r4, #8]
 800e940:	701d      	strb	r5, [r3, #0]
 800e942:	68a2      	ldr	r2, [r4, #8]
 800e944:	6923      	ldr	r3, [r4, #16]
 800e946:	2101      	movs	r1, #1
 800e948:	440a      	add	r2, r1
 800e94a:	440b      	add	r3, r1
 800e94c:	60a2      	str	r2, [r4, #8]
 800e94e:	6123      	str	r3, [r4, #16]
 800e950:	7561      	strb	r1, [r4, #21]
 800e952:	7da0      	ldrb	r0, [r4, #22]
 800e954:	f080 0001 	eor.w	r0, r0, #1
 800e958:	bd38      	pop	{r3, r4, r5, pc}
 800e95a:	bf00      	nop

0800e95c <ucdr_deserialize_bool>:
 800e95c:	b538      	push	{r3, r4, r5, lr}
 800e95e:	460d      	mov	r5, r1
 800e960:	2101      	movs	r1, #1
 800e962:	4604      	mov	r4, r0
 800e964:	f001 fbdc 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800e968:	b160      	cbz	r0, 800e984 <ucdr_deserialize_bool+0x28>
 800e96a:	68a2      	ldr	r2, [r4, #8]
 800e96c:	6923      	ldr	r3, [r4, #16]
 800e96e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e972:	3900      	subs	r1, #0
 800e974:	bf18      	it	ne
 800e976:	2101      	movne	r1, #1
 800e978:	7029      	strb	r1, [r5, #0]
 800e97a:	3301      	adds	r3, #1
 800e97c:	2101      	movs	r1, #1
 800e97e:	60a2      	str	r2, [r4, #8]
 800e980:	6123      	str	r3, [r4, #16]
 800e982:	7561      	strb	r1, [r4, #21]
 800e984:	7da0      	ldrb	r0, [r4, #22]
 800e986:	f080 0001 	eor.w	r0, r0, #1
 800e98a:	bd38      	pop	{r3, r4, r5, pc}

0800e98c <ucdr_serialize_uint8_t>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	460d      	mov	r5, r1
 800e990:	2101      	movs	r1, #1
 800e992:	4604      	mov	r4, r0
 800e994:	f001 fbc4 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800e998:	b148      	cbz	r0, 800e9ae <ucdr_serialize_uint8_t+0x22>
 800e99a:	68a3      	ldr	r3, [r4, #8]
 800e99c:	701d      	strb	r5, [r3, #0]
 800e99e:	68a2      	ldr	r2, [r4, #8]
 800e9a0:	6923      	ldr	r3, [r4, #16]
 800e9a2:	2101      	movs	r1, #1
 800e9a4:	440a      	add	r2, r1
 800e9a6:	440b      	add	r3, r1
 800e9a8:	60a2      	str	r2, [r4, #8]
 800e9aa:	6123      	str	r3, [r4, #16]
 800e9ac:	7561      	strb	r1, [r4, #21]
 800e9ae:	7da0      	ldrb	r0, [r4, #22]
 800e9b0:	f080 0001 	eor.w	r0, r0, #1
 800e9b4:	bd38      	pop	{r3, r4, r5, pc}
 800e9b6:	bf00      	nop

0800e9b8 <ucdr_deserialize_uint8_t>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	460d      	mov	r5, r1
 800e9bc:	2101      	movs	r1, #1
 800e9be:	4604      	mov	r4, r0
 800e9c0:	f001 fbae 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800e9c4:	b150      	cbz	r0, 800e9dc <ucdr_deserialize_uint8_t+0x24>
 800e9c6:	68a3      	ldr	r3, [r4, #8]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	702b      	strb	r3, [r5, #0]
 800e9cc:	68a2      	ldr	r2, [r4, #8]
 800e9ce:	6923      	ldr	r3, [r4, #16]
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	440a      	add	r2, r1
 800e9d4:	440b      	add	r3, r1
 800e9d6:	60a2      	str	r2, [r4, #8]
 800e9d8:	6123      	str	r3, [r4, #16]
 800e9da:	7561      	strb	r1, [r4, #21]
 800e9dc:	7da0      	ldrb	r0, [r4, #22]
 800e9de:	f080 0001 	eor.w	r0, r0, #1
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}

0800e9e4 <ucdr_serialize_uint16_t>:
 800e9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	2102      	movs	r1, #2
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e9f4:	f001 fbe8 	bl	80101c8 <ucdr_buffer_alignment>
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	7d67      	ldrb	r7, [r4, #21]
 800e9fe:	f001 fc27 	bl	8010250 <ucdr_advance_buffer>
 800ea02:	2102      	movs	r1, #2
 800ea04:	4620      	mov	r0, r4
 800ea06:	f001 fb7f 	bl	8010108 <ucdr_check_buffer_available_for>
 800ea0a:	bb78      	cbnz	r0, 800ea6c <ucdr_serialize_uint16_t+0x88>
 800ea0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea10:	42ab      	cmp	r3, r5
 800ea12:	d926      	bls.n	800ea62 <ucdr_serialize_uint16_t+0x7e>
 800ea14:	1b5e      	subs	r6, r3, r5
 800ea16:	60a3      	str	r3, [r4, #8]
 800ea18:	6923      	ldr	r3, [r4, #16]
 800ea1a:	f1c6 0802 	rsb	r8, r6, #2
 800ea1e:	4433      	add	r3, r6
 800ea20:	6123      	str	r3, [r4, #16]
 800ea22:	4641      	mov	r1, r8
 800ea24:	4620      	mov	r0, r4
 800ea26:	f001 fb7b 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ea2a:	2800      	cmp	r0, #0
 800ea2c:	d03b      	beq.n	800eaa6 <ucdr_serialize_uint16_t+0xc2>
 800ea2e:	7d23      	ldrb	r3, [r4, #20]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d04a      	beq.n	800eaca <ucdr_serialize_uint16_t+0xe6>
 800ea34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea38:	702b      	strb	r3, [r5, #0]
 800ea3a:	2e00      	cmp	r6, #0
 800ea3c:	d040      	beq.n	800eac0 <ucdr_serialize_uint16_t+0xdc>
 800ea3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea42:	706b      	strb	r3, [r5, #1]
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	68a2      	ldr	r2, [r4, #8]
 800ea48:	7da0      	ldrb	r0, [r4, #22]
 800ea4a:	3302      	adds	r3, #2
 800ea4c:	1b9e      	subs	r6, r3, r6
 800ea4e:	4442      	add	r2, r8
 800ea50:	2302      	movs	r3, #2
 800ea52:	f080 0001 	eor.w	r0, r0, #1
 800ea56:	60a2      	str	r2, [r4, #8]
 800ea58:	6126      	str	r6, [r4, #16]
 800ea5a:	7563      	strb	r3, [r4, #21]
 800ea5c:	b002      	add	sp, #8
 800ea5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea62:	2102      	movs	r1, #2
 800ea64:	4620      	mov	r0, r4
 800ea66:	f001 fb5b 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ea6a:	b190      	cbz	r0, 800ea92 <ucdr_serialize_uint16_t+0xae>
 800ea6c:	7d23      	ldrb	r3, [r4, #20]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	68a3      	ldr	r3, [r4, #8]
 800ea72:	d014      	beq.n	800ea9e <ucdr_serialize_uint16_t+0xba>
 800ea74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea78:	701a      	strb	r2, [r3, #0]
 800ea7a:	68a3      	ldr	r3, [r4, #8]
 800ea7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea80:	705a      	strb	r2, [r3, #1]
 800ea82:	68a2      	ldr	r2, [r4, #8]
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	3202      	adds	r2, #2
 800ea88:	3302      	adds	r3, #2
 800ea8a:	2102      	movs	r1, #2
 800ea8c:	60a2      	str	r2, [r4, #8]
 800ea8e:	6123      	str	r3, [r4, #16]
 800ea90:	7561      	strb	r1, [r4, #21]
 800ea92:	7da0      	ldrb	r0, [r4, #22]
 800ea94:	f080 0001 	eor.w	r0, r0, #1
 800ea98:	b002      	add	sp, #8
 800ea9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eaa2:	801a      	strh	r2, [r3, #0]
 800eaa4:	e7ed      	b.n	800ea82 <ucdr_serialize_uint16_t+0x9e>
 800eaa6:	68a2      	ldr	r2, [r4, #8]
 800eaa8:	6923      	ldr	r3, [r4, #16]
 800eaaa:	7da0      	ldrb	r0, [r4, #22]
 800eaac:	7567      	strb	r7, [r4, #21]
 800eaae:	1b92      	subs	r2, r2, r6
 800eab0:	1b9b      	subs	r3, r3, r6
 800eab2:	f080 0001 	eor.w	r0, r0, #1
 800eab6:	60a2      	str	r2, [r4, #8]
 800eab8:	6123      	str	r3, [r4, #16]
 800eaba:	b002      	add	sp, #8
 800eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac0:	68a3      	ldr	r3, [r4, #8]
 800eac2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eac6:	701a      	strb	r2, [r3, #0]
 800eac8:	e7bc      	b.n	800ea44 <ucdr_serialize_uint16_t+0x60>
 800eaca:	4628      	mov	r0, r5
 800eacc:	f10d 0506 	add.w	r5, sp, #6
 800ead0:	4629      	mov	r1, r5
 800ead2:	4632      	mov	r2, r6
 800ead4:	f00c fb39 	bl	801b14a <memcpy>
 800ead8:	68a0      	ldr	r0, [r4, #8]
 800eada:	4642      	mov	r2, r8
 800eadc:	19a9      	adds	r1, r5, r6
 800eade:	f00c fb34 	bl	801b14a <memcpy>
 800eae2:	e7af      	b.n	800ea44 <ucdr_serialize_uint16_t+0x60>

0800eae4 <ucdr_serialize_endian_uint16_t>:
 800eae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eae8:	b083      	sub	sp, #12
 800eaea:	460d      	mov	r5, r1
 800eaec:	2102      	movs	r1, #2
 800eaee:	4604      	mov	r4, r0
 800eaf0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800eaf4:	f001 fb68 	bl	80101c8 <ucdr_buffer_alignment>
 800eaf8:	4601      	mov	r1, r0
 800eafa:	4620      	mov	r0, r4
 800eafc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb00:	f001 fba6 	bl	8010250 <ucdr_advance_buffer>
 800eb04:	2102      	movs	r1, #2
 800eb06:	4620      	mov	r0, r4
 800eb08:	f001 fafe 	bl	8010108 <ucdr_check_buffer_available_for>
 800eb0c:	bb70      	cbnz	r0, 800eb6c <ucdr_serialize_endian_uint16_t+0x88>
 800eb0e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb12:	42be      	cmp	r6, r7
 800eb14:	d925      	bls.n	800eb62 <ucdr_serialize_endian_uint16_t+0x7e>
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	60a6      	str	r6, [r4, #8]
 800eb1a:	1bf6      	subs	r6, r6, r7
 800eb1c:	4433      	add	r3, r6
 800eb1e:	f1c6 0902 	rsb	r9, r6, #2
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	4649      	mov	r1, r9
 800eb26:	4620      	mov	r0, r4
 800eb28:	f001 fafa 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d039      	beq.n	800eba4 <ucdr_serialize_endian_uint16_t+0xc0>
 800eb30:	2d01      	cmp	r5, #1
 800eb32:	d04a      	beq.n	800ebca <ucdr_serialize_endian_uint16_t+0xe6>
 800eb34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb38:	703b      	strb	r3, [r7, #0]
 800eb3a:	2e00      	cmp	r6, #0
 800eb3c:	d040      	beq.n	800ebc0 <ucdr_serialize_endian_uint16_t+0xdc>
 800eb3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb42:	707b      	strb	r3, [r7, #1]
 800eb44:	6923      	ldr	r3, [r4, #16]
 800eb46:	68a2      	ldr	r2, [r4, #8]
 800eb48:	7da0      	ldrb	r0, [r4, #22]
 800eb4a:	3302      	adds	r3, #2
 800eb4c:	444a      	add	r2, r9
 800eb4e:	1b9b      	subs	r3, r3, r6
 800eb50:	2102      	movs	r1, #2
 800eb52:	f080 0001 	eor.w	r0, r0, #1
 800eb56:	60a2      	str	r2, [r4, #8]
 800eb58:	6123      	str	r3, [r4, #16]
 800eb5a:	7561      	strb	r1, [r4, #21]
 800eb5c:	b003      	add	sp, #12
 800eb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb62:	2102      	movs	r1, #2
 800eb64:	4620      	mov	r0, r4
 800eb66:	f001 fadb 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800eb6a:	b188      	cbz	r0, 800eb90 <ucdr_serialize_endian_uint16_t+0xac>
 800eb6c:	2d01      	cmp	r5, #1
 800eb6e:	68a3      	ldr	r3, [r4, #8]
 800eb70:	d014      	beq.n	800eb9c <ucdr_serialize_endian_uint16_t+0xb8>
 800eb72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eb76:	701a      	strb	r2, [r3, #0]
 800eb78:	68a3      	ldr	r3, [r4, #8]
 800eb7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb7e:	705a      	strb	r2, [r3, #1]
 800eb80:	68a2      	ldr	r2, [r4, #8]
 800eb82:	6923      	ldr	r3, [r4, #16]
 800eb84:	3202      	adds	r2, #2
 800eb86:	3302      	adds	r3, #2
 800eb88:	2102      	movs	r1, #2
 800eb8a:	60a2      	str	r2, [r4, #8]
 800eb8c:	6123      	str	r3, [r4, #16]
 800eb8e:	7561      	strb	r1, [r4, #21]
 800eb90:	7da0      	ldrb	r0, [r4, #22]
 800eb92:	f080 0001 	eor.w	r0, r0, #1
 800eb96:	b003      	add	sp, #12
 800eb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eba0:	801a      	strh	r2, [r3, #0]
 800eba2:	e7ed      	b.n	800eb80 <ucdr_serialize_endian_uint16_t+0x9c>
 800eba4:	68a2      	ldr	r2, [r4, #8]
 800eba6:	6923      	ldr	r3, [r4, #16]
 800eba8:	7da0      	ldrb	r0, [r4, #22]
 800ebaa:	f884 8015 	strb.w	r8, [r4, #21]
 800ebae:	1b92      	subs	r2, r2, r6
 800ebb0:	1b9b      	subs	r3, r3, r6
 800ebb2:	f080 0001 	eor.w	r0, r0, #1
 800ebb6:	60a2      	str	r2, [r4, #8]
 800ebb8:	6123      	str	r3, [r4, #16]
 800ebba:	b003      	add	sp, #12
 800ebbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebc6:	701a      	strb	r2, [r3, #0]
 800ebc8:	e7bc      	b.n	800eb44 <ucdr_serialize_endian_uint16_t+0x60>
 800ebca:	f10d 0506 	add.w	r5, sp, #6
 800ebce:	4629      	mov	r1, r5
 800ebd0:	4632      	mov	r2, r6
 800ebd2:	4638      	mov	r0, r7
 800ebd4:	f00c fab9 	bl	801b14a <memcpy>
 800ebd8:	68a0      	ldr	r0, [r4, #8]
 800ebda:	464a      	mov	r2, r9
 800ebdc:	19a9      	adds	r1, r5, r6
 800ebde:	f00c fab4 	bl	801b14a <memcpy>
 800ebe2:	e7af      	b.n	800eb44 <ucdr_serialize_endian_uint16_t+0x60>

0800ebe4 <ucdr_deserialize_uint16_t>:
 800ebe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebe8:	460d      	mov	r5, r1
 800ebea:	2102      	movs	r1, #2
 800ebec:	4604      	mov	r4, r0
 800ebee:	f001 faeb 	bl	80101c8 <ucdr_buffer_alignment>
 800ebf2:	4601      	mov	r1, r0
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ebfa:	f001 fb29 	bl	8010250 <ucdr_advance_buffer>
 800ebfe:	2102      	movs	r1, #2
 800ec00:	4620      	mov	r0, r4
 800ec02:	f001 fa81 	bl	8010108 <ucdr_check_buffer_available_for>
 800ec06:	bb60      	cbnz	r0, 800ec62 <ucdr_deserialize_uint16_t+0x7e>
 800ec08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec0c:	42be      	cmp	r6, r7
 800ec0e:	d923      	bls.n	800ec58 <ucdr_deserialize_uint16_t+0x74>
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	60a6      	str	r6, [r4, #8]
 800ec14:	1bf6      	subs	r6, r6, r7
 800ec16:	4433      	add	r3, r6
 800ec18:	f1c6 0902 	rsb	r9, r6, #2
 800ec1c:	6123      	str	r3, [r4, #16]
 800ec1e:	4649      	mov	r1, r9
 800ec20:	4620      	mov	r0, r4
 800ec22:	f001 fa7d 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d034      	beq.n	800ec94 <ucdr_deserialize_uint16_t+0xb0>
 800ec2a:	7d23      	ldrb	r3, [r4, #20]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d042      	beq.n	800ecb6 <ucdr_deserialize_uint16_t+0xd2>
 800ec30:	787b      	ldrb	r3, [r7, #1]
 800ec32:	702b      	strb	r3, [r5, #0]
 800ec34:	2e00      	cmp	r6, #0
 800ec36:	d03a      	beq.n	800ecae <ucdr_deserialize_uint16_t+0xca>
 800ec38:	783b      	ldrb	r3, [r7, #0]
 800ec3a:	706b      	strb	r3, [r5, #1]
 800ec3c:	6923      	ldr	r3, [r4, #16]
 800ec3e:	68a2      	ldr	r2, [r4, #8]
 800ec40:	7da0      	ldrb	r0, [r4, #22]
 800ec42:	2102      	movs	r1, #2
 800ec44:	3302      	adds	r3, #2
 800ec46:	444a      	add	r2, r9
 800ec48:	1b9b      	subs	r3, r3, r6
 800ec4a:	7561      	strb	r1, [r4, #21]
 800ec4c:	60a2      	str	r2, [r4, #8]
 800ec4e:	6123      	str	r3, [r4, #16]
 800ec50:	f080 0001 	eor.w	r0, r0, #1
 800ec54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec58:	2102      	movs	r1, #2
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f001 fa60 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ec60:	b180      	cbz	r0, 800ec84 <ucdr_deserialize_uint16_t+0xa0>
 800ec62:	7d23      	ldrb	r3, [r4, #20]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	68a3      	ldr	r3, [r4, #8]
 800ec68:	d011      	beq.n	800ec8e <ucdr_deserialize_uint16_t+0xaa>
 800ec6a:	785b      	ldrb	r3, [r3, #1]
 800ec6c:	702b      	strb	r3, [r5, #0]
 800ec6e:	68a3      	ldr	r3, [r4, #8]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	706b      	strb	r3, [r5, #1]
 800ec74:	68a2      	ldr	r2, [r4, #8]
 800ec76:	6923      	ldr	r3, [r4, #16]
 800ec78:	3202      	adds	r2, #2
 800ec7a:	3302      	adds	r3, #2
 800ec7c:	2102      	movs	r1, #2
 800ec7e:	60a2      	str	r2, [r4, #8]
 800ec80:	6123      	str	r3, [r4, #16]
 800ec82:	7561      	strb	r1, [r4, #21]
 800ec84:	7da0      	ldrb	r0, [r4, #22]
 800ec86:	f080 0001 	eor.w	r0, r0, #1
 800ec8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	802b      	strh	r3, [r5, #0]
 800ec92:	e7ef      	b.n	800ec74 <ucdr_deserialize_uint16_t+0x90>
 800ec94:	68a2      	ldr	r2, [r4, #8]
 800ec96:	6923      	ldr	r3, [r4, #16]
 800ec98:	7da0      	ldrb	r0, [r4, #22]
 800ec9a:	f884 8015 	strb.w	r8, [r4, #21]
 800ec9e:	1b92      	subs	r2, r2, r6
 800eca0:	1b9b      	subs	r3, r3, r6
 800eca2:	60a2      	str	r2, [r4, #8]
 800eca4:	6123      	str	r3, [r4, #16]
 800eca6:	f080 0001 	eor.w	r0, r0, #1
 800ecaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecae:	68a3      	ldr	r3, [r4, #8]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	706b      	strb	r3, [r5, #1]
 800ecb4:	e7c2      	b.n	800ec3c <ucdr_deserialize_uint16_t+0x58>
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	4632      	mov	r2, r6
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f00c fa45 	bl	801b14a <memcpy>
 800ecc0:	68a1      	ldr	r1, [r4, #8]
 800ecc2:	464a      	mov	r2, r9
 800ecc4:	19a8      	adds	r0, r5, r6
 800ecc6:	f00c fa40 	bl	801b14a <memcpy>
 800ecca:	e7b7      	b.n	800ec3c <ucdr_deserialize_uint16_t+0x58>

0800eccc <ucdr_deserialize_endian_uint16_t>:
 800eccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd0:	460e      	mov	r6, r1
 800ecd2:	2102      	movs	r1, #2
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	4615      	mov	r5, r2
 800ecd8:	f001 fa76 	bl	80101c8 <ucdr_buffer_alignment>
 800ecdc:	4601      	mov	r1, r0
 800ecde:	4620      	mov	r0, r4
 800ece0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ece4:	f001 fab4 	bl	8010250 <ucdr_advance_buffer>
 800ece8:	2102      	movs	r1, #2
 800ecea:	4620      	mov	r0, r4
 800ecec:	f001 fa0c 	bl	8010108 <ucdr_check_buffer_available_for>
 800ecf0:	bb70      	cbnz	r0, 800ed50 <ucdr_deserialize_endian_uint16_t+0x84>
 800ecf2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ecf6:	4547      	cmp	r7, r8
 800ecf8:	d925      	bls.n	800ed46 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ecfa:	6923      	ldr	r3, [r4, #16]
 800ecfc:	60a7      	str	r7, [r4, #8]
 800ecfe:	eba7 0708 	sub.w	r7, r7, r8
 800ed02:	443b      	add	r3, r7
 800ed04:	f1c7 0a02 	rsb	sl, r7, #2
 800ed08:	6123      	str	r3, [r4, #16]
 800ed0a:	4651      	mov	r1, sl
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	f001 fa07 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d034      	beq.n	800ed80 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ed16:	2e01      	cmp	r6, #1
 800ed18:	d043      	beq.n	800eda2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ed1a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ed1e:	702b      	strb	r3, [r5, #0]
 800ed20:	2f00      	cmp	r7, #0
 800ed22:	d03a      	beq.n	800ed9a <ucdr_deserialize_endian_uint16_t+0xce>
 800ed24:	f898 3000 	ldrb.w	r3, [r8]
 800ed28:	706b      	strb	r3, [r5, #1]
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	68a2      	ldr	r2, [r4, #8]
 800ed2e:	7da0      	ldrb	r0, [r4, #22]
 800ed30:	2102      	movs	r1, #2
 800ed32:	3302      	adds	r3, #2
 800ed34:	4452      	add	r2, sl
 800ed36:	1bdb      	subs	r3, r3, r7
 800ed38:	7561      	strb	r1, [r4, #21]
 800ed3a:	60a2      	str	r2, [r4, #8]
 800ed3c:	6123      	str	r3, [r4, #16]
 800ed3e:	f080 0001 	eor.w	r0, r0, #1
 800ed42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed46:	2102      	movs	r1, #2
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f001 f9e9 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ed4e:	b178      	cbz	r0, 800ed70 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ed50:	2e01      	cmp	r6, #1
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	d011      	beq.n	800ed7a <ucdr_deserialize_endian_uint16_t+0xae>
 800ed56:	785b      	ldrb	r3, [r3, #1]
 800ed58:	702b      	strb	r3, [r5, #0]
 800ed5a:	68a3      	ldr	r3, [r4, #8]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	706b      	strb	r3, [r5, #1]
 800ed60:	68a2      	ldr	r2, [r4, #8]
 800ed62:	6923      	ldr	r3, [r4, #16]
 800ed64:	3202      	adds	r2, #2
 800ed66:	3302      	adds	r3, #2
 800ed68:	2102      	movs	r1, #2
 800ed6a:	60a2      	str	r2, [r4, #8]
 800ed6c:	6123      	str	r3, [r4, #16]
 800ed6e:	7561      	strb	r1, [r4, #21]
 800ed70:	7da0      	ldrb	r0, [r4, #22]
 800ed72:	f080 0001 	eor.w	r0, r0, #1
 800ed76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7a:	881b      	ldrh	r3, [r3, #0]
 800ed7c:	802b      	strh	r3, [r5, #0]
 800ed7e:	e7ef      	b.n	800ed60 <ucdr_deserialize_endian_uint16_t+0x94>
 800ed80:	68a2      	ldr	r2, [r4, #8]
 800ed82:	6923      	ldr	r3, [r4, #16]
 800ed84:	7da0      	ldrb	r0, [r4, #22]
 800ed86:	f884 9015 	strb.w	r9, [r4, #21]
 800ed8a:	1bd2      	subs	r2, r2, r7
 800ed8c:	1bdb      	subs	r3, r3, r7
 800ed8e:	60a2      	str	r2, [r4, #8]
 800ed90:	6123      	str	r3, [r4, #16]
 800ed92:	f080 0001 	eor.w	r0, r0, #1
 800ed96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed9a:	68a3      	ldr	r3, [r4, #8]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	706b      	strb	r3, [r5, #1]
 800eda0:	e7c3      	b.n	800ed2a <ucdr_deserialize_endian_uint16_t+0x5e>
 800eda2:	4641      	mov	r1, r8
 800eda4:	463a      	mov	r2, r7
 800eda6:	4628      	mov	r0, r5
 800eda8:	f00c f9cf 	bl	801b14a <memcpy>
 800edac:	68a1      	ldr	r1, [r4, #8]
 800edae:	4652      	mov	r2, sl
 800edb0:	19e8      	adds	r0, r5, r7
 800edb2:	f00c f9ca 	bl	801b14a <memcpy>
 800edb6:	e7b8      	b.n	800ed2a <ucdr_deserialize_endian_uint16_t+0x5e>

0800edb8 <ucdr_serialize_uint32_t>:
 800edb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edbc:	b082      	sub	sp, #8
 800edbe:	4604      	mov	r4, r0
 800edc0:	9101      	str	r1, [sp, #4]
 800edc2:	2104      	movs	r1, #4
 800edc4:	f001 fa00 	bl	80101c8 <ucdr_buffer_alignment>
 800edc8:	4601      	mov	r1, r0
 800edca:	4620      	mov	r0, r4
 800edcc:	7d67      	ldrb	r7, [r4, #21]
 800edce:	f001 fa3f 	bl	8010250 <ucdr_advance_buffer>
 800edd2:	2104      	movs	r1, #4
 800edd4:	4620      	mov	r0, r4
 800edd6:	f001 f997 	bl	8010108 <ucdr_check_buffer_available_for>
 800edda:	2800      	cmp	r0, #0
 800eddc:	d139      	bne.n	800ee52 <ucdr_serialize_uint32_t+0x9a>
 800edde:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ede2:	42ab      	cmp	r3, r5
 800ede4:	d930      	bls.n	800ee48 <ucdr_serialize_uint32_t+0x90>
 800ede6:	1b5e      	subs	r6, r3, r5
 800ede8:	60a3      	str	r3, [r4, #8]
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	f1c6 0804 	rsb	r8, r6, #4
 800edf0:	4433      	add	r3, r6
 800edf2:	6123      	str	r3, [r4, #16]
 800edf4:	4641      	mov	r1, r8
 800edf6:	4620      	mov	r0, r4
 800edf8:	f001 f992 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d04c      	beq.n	800ee9a <ucdr_serialize_uint32_t+0xe2>
 800ee00:	7d23      	ldrb	r3, [r4, #20]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d063      	beq.n	800eece <ucdr_serialize_uint32_t+0x116>
 800ee06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ee0a:	702b      	strb	r3, [r5, #0]
 800ee0c:	2e00      	cmp	r6, #0
 800ee0e:	d051      	beq.n	800eeb4 <ucdr_serialize_uint32_t+0xfc>
 800ee10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ee14:	706b      	strb	r3, [r5, #1]
 800ee16:	2e01      	cmp	r6, #1
 800ee18:	d050      	beq.n	800eebc <ucdr_serialize_uint32_t+0x104>
 800ee1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee1e:	70ab      	strb	r3, [r5, #2]
 800ee20:	2e02      	cmp	r6, #2
 800ee22:	d04f      	beq.n	800eec4 <ucdr_serialize_uint32_t+0x10c>
 800ee24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee28:	70eb      	strb	r3, [r5, #3]
 800ee2a:	6923      	ldr	r3, [r4, #16]
 800ee2c:	68a2      	ldr	r2, [r4, #8]
 800ee2e:	7da0      	ldrb	r0, [r4, #22]
 800ee30:	3304      	adds	r3, #4
 800ee32:	1b9e      	subs	r6, r3, r6
 800ee34:	4442      	add	r2, r8
 800ee36:	2304      	movs	r3, #4
 800ee38:	f080 0001 	eor.w	r0, r0, #1
 800ee3c:	60a2      	str	r2, [r4, #8]
 800ee3e:	6126      	str	r6, [r4, #16]
 800ee40:	7563      	strb	r3, [r4, #21]
 800ee42:	b002      	add	sp, #8
 800ee44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee48:	2104      	movs	r1, #4
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f001 f968 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ee50:	b1d0      	cbz	r0, 800ee88 <ucdr_serialize_uint32_t+0xd0>
 800ee52:	7d23      	ldrb	r3, [r4, #20]
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	68a3      	ldr	r3, [r4, #8]
 800ee58:	d01c      	beq.n	800ee94 <ucdr_serialize_uint32_t+0xdc>
 800ee5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ee5e:	701a      	strb	r2, [r3, #0]
 800ee60:	68a3      	ldr	r3, [r4, #8]
 800ee62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee66:	705a      	strb	r2, [r3, #1]
 800ee68:	68a3      	ldr	r3, [r4, #8]
 800ee6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ee6e:	709a      	strb	r2, [r3, #2]
 800ee70:	68a3      	ldr	r3, [r4, #8]
 800ee72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee76:	70da      	strb	r2, [r3, #3]
 800ee78:	68a2      	ldr	r2, [r4, #8]
 800ee7a:	6923      	ldr	r3, [r4, #16]
 800ee7c:	3204      	adds	r2, #4
 800ee7e:	3304      	adds	r3, #4
 800ee80:	2104      	movs	r1, #4
 800ee82:	60a2      	str	r2, [r4, #8]
 800ee84:	6123      	str	r3, [r4, #16]
 800ee86:	7561      	strb	r1, [r4, #21]
 800ee88:	7da0      	ldrb	r0, [r4, #22]
 800ee8a:	f080 0001 	eor.w	r0, r0, #1
 800ee8e:	b002      	add	sp, #8
 800ee90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee94:	9a01      	ldr	r2, [sp, #4]
 800ee96:	601a      	str	r2, [r3, #0]
 800ee98:	e7ee      	b.n	800ee78 <ucdr_serialize_uint32_t+0xc0>
 800ee9a:	68a2      	ldr	r2, [r4, #8]
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	7da0      	ldrb	r0, [r4, #22]
 800eea0:	7567      	strb	r7, [r4, #21]
 800eea2:	1b92      	subs	r2, r2, r6
 800eea4:	1b9b      	subs	r3, r3, r6
 800eea6:	f080 0001 	eor.w	r0, r0, #1
 800eeaa:	60a2      	str	r2, [r4, #8]
 800eeac:	6123      	str	r3, [r4, #16]
 800eeae:	b002      	add	sp, #8
 800eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb4:	68a3      	ldr	r3, [r4, #8]
 800eeb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eeba:	701a      	strb	r2, [r3, #0]
 800eebc:	68a3      	ldr	r3, [r4, #8]
 800eebe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eec2:	701a      	strb	r2, [r3, #0]
 800eec4:	68a3      	ldr	r3, [r4, #8]
 800eec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeca:	701a      	strb	r2, [r3, #0]
 800eecc:	e7ad      	b.n	800ee2a <ucdr_serialize_uint32_t+0x72>
 800eece:	4628      	mov	r0, r5
 800eed0:	ad01      	add	r5, sp, #4
 800eed2:	4629      	mov	r1, r5
 800eed4:	4632      	mov	r2, r6
 800eed6:	f00c f938 	bl	801b14a <memcpy>
 800eeda:	68a0      	ldr	r0, [r4, #8]
 800eedc:	4642      	mov	r2, r8
 800eede:	19a9      	adds	r1, r5, r6
 800eee0:	f00c f933 	bl	801b14a <memcpy>
 800eee4:	e7a1      	b.n	800ee2a <ucdr_serialize_uint32_t+0x72>
 800eee6:	bf00      	nop

0800eee8 <ucdr_serialize_endian_uint32_t>:
 800eee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeec:	b083      	sub	sp, #12
 800eeee:	460d      	mov	r5, r1
 800eef0:	2104      	movs	r1, #4
 800eef2:	4604      	mov	r4, r0
 800eef4:	9201      	str	r2, [sp, #4]
 800eef6:	f001 f967 	bl	80101c8 <ucdr_buffer_alignment>
 800eefa:	4601      	mov	r1, r0
 800eefc:	4620      	mov	r0, r4
 800eefe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ef02:	f001 f9a5 	bl	8010250 <ucdr_advance_buffer>
 800ef06:	2104      	movs	r1, #4
 800ef08:	4620      	mov	r0, r4
 800ef0a:	f001 f8fd 	bl	8010108 <ucdr_check_buffer_available_for>
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	d138      	bne.n	800ef84 <ucdr_serialize_endian_uint32_t+0x9c>
 800ef12:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ef16:	42b7      	cmp	r7, r6
 800ef18:	d92f      	bls.n	800ef7a <ucdr_serialize_endian_uint32_t+0x92>
 800ef1a:	6923      	ldr	r3, [r4, #16]
 800ef1c:	60a7      	str	r7, [r4, #8]
 800ef1e:	1bbf      	subs	r7, r7, r6
 800ef20:	443b      	add	r3, r7
 800ef22:	f1c7 0904 	rsb	r9, r7, #4
 800ef26:	6123      	str	r3, [r4, #16]
 800ef28:	4649      	mov	r1, r9
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f001 f8f8 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	d04a      	beq.n	800efca <ucdr_serialize_endian_uint32_t+0xe2>
 800ef34:	2d01      	cmp	r5, #1
 800ef36:	d063      	beq.n	800f000 <ucdr_serialize_endian_uint32_t+0x118>
 800ef38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef3c:	7033      	strb	r3, [r6, #0]
 800ef3e:	2f00      	cmp	r7, #0
 800ef40:	d051      	beq.n	800efe6 <ucdr_serialize_endian_uint32_t+0xfe>
 800ef42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef46:	7073      	strb	r3, [r6, #1]
 800ef48:	2f01      	cmp	r7, #1
 800ef4a:	d050      	beq.n	800efee <ucdr_serialize_endian_uint32_t+0x106>
 800ef4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef50:	70b3      	strb	r3, [r6, #2]
 800ef52:	2f02      	cmp	r7, #2
 800ef54:	d04f      	beq.n	800eff6 <ucdr_serialize_endian_uint32_t+0x10e>
 800ef56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef5a:	70f3      	strb	r3, [r6, #3]
 800ef5c:	6923      	ldr	r3, [r4, #16]
 800ef5e:	68a2      	ldr	r2, [r4, #8]
 800ef60:	7da0      	ldrb	r0, [r4, #22]
 800ef62:	3304      	adds	r3, #4
 800ef64:	444a      	add	r2, r9
 800ef66:	1bdb      	subs	r3, r3, r7
 800ef68:	2104      	movs	r1, #4
 800ef6a:	f080 0001 	eor.w	r0, r0, #1
 800ef6e:	60a2      	str	r2, [r4, #8]
 800ef70:	6123      	str	r3, [r4, #16]
 800ef72:	7561      	strb	r1, [r4, #21]
 800ef74:	b003      	add	sp, #12
 800ef76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef7a:	2104      	movs	r1, #4
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f001 f8cf 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ef82:	b1c8      	cbz	r0, 800efb8 <ucdr_serialize_endian_uint32_t+0xd0>
 800ef84:	2d01      	cmp	r5, #1
 800ef86:	68a3      	ldr	r3, [r4, #8]
 800ef88:	d01c      	beq.n	800efc4 <ucdr_serialize_endian_uint32_t+0xdc>
 800ef8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef8e:	701a      	strb	r2, [r3, #0]
 800ef90:	68a3      	ldr	r3, [r4, #8]
 800ef92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef96:	705a      	strb	r2, [r3, #1]
 800ef98:	68a3      	ldr	r3, [r4, #8]
 800ef9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef9e:	709a      	strb	r2, [r3, #2]
 800efa0:	68a3      	ldr	r3, [r4, #8]
 800efa2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efa6:	70da      	strb	r2, [r3, #3]
 800efa8:	68a2      	ldr	r2, [r4, #8]
 800efaa:	6923      	ldr	r3, [r4, #16]
 800efac:	3204      	adds	r2, #4
 800efae:	3304      	adds	r3, #4
 800efb0:	2104      	movs	r1, #4
 800efb2:	60a2      	str	r2, [r4, #8]
 800efb4:	6123      	str	r3, [r4, #16]
 800efb6:	7561      	strb	r1, [r4, #21]
 800efb8:	7da0      	ldrb	r0, [r4, #22]
 800efba:	f080 0001 	eor.w	r0, r0, #1
 800efbe:	b003      	add	sp, #12
 800efc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efc4:	9a01      	ldr	r2, [sp, #4]
 800efc6:	601a      	str	r2, [r3, #0]
 800efc8:	e7ee      	b.n	800efa8 <ucdr_serialize_endian_uint32_t+0xc0>
 800efca:	68a2      	ldr	r2, [r4, #8]
 800efcc:	6923      	ldr	r3, [r4, #16]
 800efce:	7da0      	ldrb	r0, [r4, #22]
 800efd0:	f884 8015 	strb.w	r8, [r4, #21]
 800efd4:	1bd2      	subs	r2, r2, r7
 800efd6:	1bdb      	subs	r3, r3, r7
 800efd8:	f080 0001 	eor.w	r0, r0, #1
 800efdc:	60a2      	str	r2, [r4, #8]
 800efde:	6123      	str	r3, [r4, #16]
 800efe0:	b003      	add	sp, #12
 800efe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efe6:	68a3      	ldr	r3, [r4, #8]
 800efe8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efec:	701a      	strb	r2, [r3, #0]
 800efee:	68a3      	ldr	r3, [r4, #8]
 800eff0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eff4:	701a      	strb	r2, [r3, #0]
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800effc:	701a      	strb	r2, [r3, #0]
 800effe:	e7ad      	b.n	800ef5c <ucdr_serialize_endian_uint32_t+0x74>
 800f000:	ad01      	add	r5, sp, #4
 800f002:	4629      	mov	r1, r5
 800f004:	463a      	mov	r2, r7
 800f006:	4630      	mov	r0, r6
 800f008:	f00c f89f 	bl	801b14a <memcpy>
 800f00c:	68a0      	ldr	r0, [r4, #8]
 800f00e:	464a      	mov	r2, r9
 800f010:	19e9      	adds	r1, r5, r7
 800f012:	f00c f89a 	bl	801b14a <memcpy>
 800f016:	e7a1      	b.n	800ef5c <ucdr_serialize_endian_uint32_t+0x74>

0800f018 <ucdr_deserialize_uint32_t>:
 800f018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f01c:	460d      	mov	r5, r1
 800f01e:	2104      	movs	r1, #4
 800f020:	4604      	mov	r4, r0
 800f022:	f001 f8d1 	bl	80101c8 <ucdr_buffer_alignment>
 800f026:	4601      	mov	r1, r0
 800f028:	4620      	mov	r0, r4
 800f02a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f02e:	f001 f90f 	bl	8010250 <ucdr_advance_buffer>
 800f032:	2104      	movs	r1, #4
 800f034:	4620      	mov	r0, r4
 800f036:	f001 f867 	bl	8010108 <ucdr_check_buffer_available_for>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	d138      	bne.n	800f0b0 <ucdr_deserialize_uint32_t+0x98>
 800f03e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f042:	42b7      	cmp	r7, r6
 800f044:	d92f      	bls.n	800f0a6 <ucdr_deserialize_uint32_t+0x8e>
 800f046:	6923      	ldr	r3, [r4, #16]
 800f048:	60a7      	str	r7, [r4, #8]
 800f04a:	1bbf      	subs	r7, r7, r6
 800f04c:	443b      	add	r3, r7
 800f04e:	f1c7 0904 	rsb	r9, r7, #4
 800f052:	6123      	str	r3, [r4, #16]
 800f054:	4649      	mov	r1, r9
 800f056:	4620      	mov	r0, r4
 800f058:	f001 f862 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d046      	beq.n	800f0ee <ucdr_deserialize_uint32_t+0xd6>
 800f060:	7d23      	ldrb	r3, [r4, #20]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d05c      	beq.n	800f120 <ucdr_deserialize_uint32_t+0x108>
 800f066:	78f3      	ldrb	r3, [r6, #3]
 800f068:	702b      	strb	r3, [r5, #0]
 800f06a:	2f00      	cmp	r7, #0
 800f06c:	d04c      	beq.n	800f108 <ucdr_deserialize_uint32_t+0xf0>
 800f06e:	78b3      	ldrb	r3, [r6, #2]
 800f070:	706b      	strb	r3, [r5, #1]
 800f072:	2f01      	cmp	r7, #1
 800f074:	f105 0302 	add.w	r3, r5, #2
 800f078:	d04a      	beq.n	800f110 <ucdr_deserialize_uint32_t+0xf8>
 800f07a:	7873      	ldrb	r3, [r6, #1]
 800f07c:	70ab      	strb	r3, [r5, #2]
 800f07e:	2f02      	cmp	r7, #2
 800f080:	f105 0303 	add.w	r3, r5, #3
 800f084:	d048      	beq.n	800f118 <ucdr_deserialize_uint32_t+0x100>
 800f086:	7833      	ldrb	r3, [r6, #0]
 800f088:	70eb      	strb	r3, [r5, #3]
 800f08a:	6923      	ldr	r3, [r4, #16]
 800f08c:	68a2      	ldr	r2, [r4, #8]
 800f08e:	7da0      	ldrb	r0, [r4, #22]
 800f090:	2104      	movs	r1, #4
 800f092:	3304      	adds	r3, #4
 800f094:	444a      	add	r2, r9
 800f096:	1bdb      	subs	r3, r3, r7
 800f098:	7561      	strb	r1, [r4, #21]
 800f09a:	60a2      	str	r2, [r4, #8]
 800f09c:	6123      	str	r3, [r4, #16]
 800f09e:	f080 0001 	eor.w	r0, r0, #1
 800f0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0a6:	2104      	movs	r1, #4
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f001 f839 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f0ae:	b1b0      	cbz	r0, 800f0de <ucdr_deserialize_uint32_t+0xc6>
 800f0b0:	7d23      	ldrb	r3, [r4, #20]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	68a3      	ldr	r3, [r4, #8]
 800f0b6:	d017      	beq.n	800f0e8 <ucdr_deserialize_uint32_t+0xd0>
 800f0b8:	78db      	ldrb	r3, [r3, #3]
 800f0ba:	702b      	strb	r3, [r5, #0]
 800f0bc:	68a3      	ldr	r3, [r4, #8]
 800f0be:	789b      	ldrb	r3, [r3, #2]
 800f0c0:	706b      	strb	r3, [r5, #1]
 800f0c2:	68a3      	ldr	r3, [r4, #8]
 800f0c4:	785b      	ldrb	r3, [r3, #1]
 800f0c6:	70ab      	strb	r3, [r5, #2]
 800f0c8:	68a3      	ldr	r3, [r4, #8]
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	70eb      	strb	r3, [r5, #3]
 800f0ce:	68a2      	ldr	r2, [r4, #8]
 800f0d0:	6923      	ldr	r3, [r4, #16]
 800f0d2:	3204      	adds	r2, #4
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	2104      	movs	r1, #4
 800f0d8:	60a2      	str	r2, [r4, #8]
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	7561      	strb	r1, [r4, #21]
 800f0de:	7da0      	ldrb	r0, [r4, #22]
 800f0e0:	f080 0001 	eor.w	r0, r0, #1
 800f0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	602b      	str	r3, [r5, #0]
 800f0ec:	e7ef      	b.n	800f0ce <ucdr_deserialize_uint32_t+0xb6>
 800f0ee:	68a2      	ldr	r2, [r4, #8]
 800f0f0:	6923      	ldr	r3, [r4, #16]
 800f0f2:	7da0      	ldrb	r0, [r4, #22]
 800f0f4:	f884 8015 	strb.w	r8, [r4, #21]
 800f0f8:	1bd2      	subs	r2, r2, r7
 800f0fa:	1bdb      	subs	r3, r3, r7
 800f0fc:	60a2      	str	r2, [r4, #8]
 800f0fe:	6123      	str	r3, [r4, #16]
 800f100:	f080 0001 	eor.w	r0, r0, #1
 800f104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f108:	68a3      	ldr	r3, [r4, #8]
 800f10a:	789b      	ldrb	r3, [r3, #2]
 800f10c:	706b      	strb	r3, [r5, #1]
 800f10e:	1cab      	adds	r3, r5, #2
 800f110:	68a2      	ldr	r2, [r4, #8]
 800f112:	7852      	ldrb	r2, [r2, #1]
 800f114:	f803 2b01 	strb.w	r2, [r3], #1
 800f118:	68a2      	ldr	r2, [r4, #8]
 800f11a:	7812      	ldrb	r2, [r2, #0]
 800f11c:	701a      	strb	r2, [r3, #0]
 800f11e:	e7b4      	b.n	800f08a <ucdr_deserialize_uint32_t+0x72>
 800f120:	4631      	mov	r1, r6
 800f122:	463a      	mov	r2, r7
 800f124:	4628      	mov	r0, r5
 800f126:	f00c f810 	bl	801b14a <memcpy>
 800f12a:	68a1      	ldr	r1, [r4, #8]
 800f12c:	464a      	mov	r2, r9
 800f12e:	19e8      	adds	r0, r5, r7
 800f130:	f00c f80b 	bl	801b14a <memcpy>
 800f134:	e7a9      	b.n	800f08a <ucdr_deserialize_uint32_t+0x72>
 800f136:	bf00      	nop

0800f138 <ucdr_deserialize_endian_uint32_t>:
 800f138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f13c:	460e      	mov	r6, r1
 800f13e:	2104      	movs	r1, #4
 800f140:	4604      	mov	r4, r0
 800f142:	4615      	mov	r5, r2
 800f144:	f001 f840 	bl	80101c8 <ucdr_buffer_alignment>
 800f148:	4601      	mov	r1, r0
 800f14a:	4620      	mov	r0, r4
 800f14c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f150:	f001 f87e 	bl	8010250 <ucdr_advance_buffer>
 800f154:	2104      	movs	r1, #4
 800f156:	4620      	mov	r0, r4
 800f158:	f000 ffd6 	bl	8010108 <ucdr_check_buffer_available_for>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d13c      	bne.n	800f1da <ucdr_deserialize_endian_uint32_t+0xa2>
 800f160:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f164:	42bb      	cmp	r3, r7
 800f166:	d933      	bls.n	800f1d0 <ucdr_deserialize_endian_uint32_t+0x98>
 800f168:	eba3 0807 	sub.w	r8, r3, r7
 800f16c:	60a3      	str	r3, [r4, #8]
 800f16e:	6923      	ldr	r3, [r4, #16]
 800f170:	f1c8 0a04 	rsb	sl, r8, #4
 800f174:	4443      	add	r3, r8
 800f176:	6123      	str	r3, [r4, #16]
 800f178:	4651      	mov	r1, sl
 800f17a:	4620      	mov	r0, r4
 800f17c:	f000 ffd0 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f180:	2800      	cmp	r0, #0
 800f182:	d048      	beq.n	800f216 <ucdr_deserialize_endian_uint32_t+0xde>
 800f184:	2e01      	cmp	r6, #1
 800f186:	d061      	beq.n	800f24c <ucdr_deserialize_endian_uint32_t+0x114>
 800f188:	78fb      	ldrb	r3, [r7, #3]
 800f18a:	702b      	strb	r3, [r5, #0]
 800f18c:	f1b8 0f00 	cmp.w	r8, #0
 800f190:	d050      	beq.n	800f234 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f192:	78bb      	ldrb	r3, [r7, #2]
 800f194:	706b      	strb	r3, [r5, #1]
 800f196:	f1b8 0f01 	cmp.w	r8, #1
 800f19a:	f105 0302 	add.w	r3, r5, #2
 800f19e:	d04d      	beq.n	800f23c <ucdr_deserialize_endian_uint32_t+0x104>
 800f1a0:	787b      	ldrb	r3, [r7, #1]
 800f1a2:	70ab      	strb	r3, [r5, #2]
 800f1a4:	f1b8 0f02 	cmp.w	r8, #2
 800f1a8:	f105 0303 	add.w	r3, r5, #3
 800f1ac:	d04a      	beq.n	800f244 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f1ae:	783b      	ldrb	r3, [r7, #0]
 800f1b0:	70eb      	strb	r3, [r5, #3]
 800f1b2:	6923      	ldr	r3, [r4, #16]
 800f1b4:	68a2      	ldr	r2, [r4, #8]
 800f1b6:	7da0      	ldrb	r0, [r4, #22]
 800f1b8:	2104      	movs	r1, #4
 800f1ba:	3304      	adds	r3, #4
 800f1bc:	4452      	add	r2, sl
 800f1be:	eba3 0308 	sub.w	r3, r3, r8
 800f1c2:	7561      	strb	r1, [r4, #21]
 800f1c4:	60a2      	str	r2, [r4, #8]
 800f1c6:	6123      	str	r3, [r4, #16]
 800f1c8:	f080 0001 	eor.w	r0, r0, #1
 800f1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1d0:	2104      	movs	r1, #4
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f000 ffa4 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f1d8:	b1a8      	cbz	r0, 800f206 <ucdr_deserialize_endian_uint32_t+0xce>
 800f1da:	2e01      	cmp	r6, #1
 800f1dc:	68a3      	ldr	r3, [r4, #8]
 800f1de:	d017      	beq.n	800f210 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f1e0:	78db      	ldrb	r3, [r3, #3]
 800f1e2:	702b      	strb	r3, [r5, #0]
 800f1e4:	68a3      	ldr	r3, [r4, #8]
 800f1e6:	789b      	ldrb	r3, [r3, #2]
 800f1e8:	706b      	strb	r3, [r5, #1]
 800f1ea:	68a3      	ldr	r3, [r4, #8]
 800f1ec:	785b      	ldrb	r3, [r3, #1]
 800f1ee:	70ab      	strb	r3, [r5, #2]
 800f1f0:	68a3      	ldr	r3, [r4, #8]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	70eb      	strb	r3, [r5, #3]
 800f1f6:	68a2      	ldr	r2, [r4, #8]
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	3204      	adds	r2, #4
 800f1fc:	3304      	adds	r3, #4
 800f1fe:	2104      	movs	r1, #4
 800f200:	60a2      	str	r2, [r4, #8]
 800f202:	6123      	str	r3, [r4, #16]
 800f204:	7561      	strb	r1, [r4, #21]
 800f206:	7da0      	ldrb	r0, [r4, #22]
 800f208:	f080 0001 	eor.w	r0, r0, #1
 800f20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	602b      	str	r3, [r5, #0]
 800f214:	e7ef      	b.n	800f1f6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f216:	68a2      	ldr	r2, [r4, #8]
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	7da0      	ldrb	r0, [r4, #22]
 800f21c:	f884 9015 	strb.w	r9, [r4, #21]
 800f220:	eba2 0208 	sub.w	r2, r2, r8
 800f224:	eba3 0308 	sub.w	r3, r3, r8
 800f228:	60a2      	str	r2, [r4, #8]
 800f22a:	6123      	str	r3, [r4, #16]
 800f22c:	f080 0001 	eor.w	r0, r0, #1
 800f230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f234:	68a3      	ldr	r3, [r4, #8]
 800f236:	789b      	ldrb	r3, [r3, #2]
 800f238:	706b      	strb	r3, [r5, #1]
 800f23a:	1cab      	adds	r3, r5, #2
 800f23c:	68a2      	ldr	r2, [r4, #8]
 800f23e:	7852      	ldrb	r2, [r2, #1]
 800f240:	f803 2b01 	strb.w	r2, [r3], #1
 800f244:	68a2      	ldr	r2, [r4, #8]
 800f246:	7812      	ldrb	r2, [r2, #0]
 800f248:	701a      	strb	r2, [r3, #0]
 800f24a:	e7b2      	b.n	800f1b2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f24c:	4639      	mov	r1, r7
 800f24e:	4642      	mov	r2, r8
 800f250:	4628      	mov	r0, r5
 800f252:	f00b ff7a 	bl	801b14a <memcpy>
 800f256:	68a1      	ldr	r1, [r4, #8]
 800f258:	4652      	mov	r2, sl
 800f25a:	eb05 0008 	add.w	r0, r5, r8
 800f25e:	f00b ff74 	bl	801b14a <memcpy>
 800f262:	e7a6      	b.n	800f1b2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f264 <ucdr_serialize_uint64_t>:
 800f264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f268:	2108      	movs	r1, #8
 800f26a:	b082      	sub	sp, #8
 800f26c:	4604      	mov	r4, r0
 800f26e:	e9cd 2300 	strd	r2, r3, [sp]
 800f272:	f000 ffa9 	bl	80101c8 <ucdr_buffer_alignment>
 800f276:	4601      	mov	r1, r0
 800f278:	4620      	mov	r0, r4
 800f27a:	7d67      	ldrb	r7, [r4, #21]
 800f27c:	f000 ffe8 	bl	8010250 <ucdr_advance_buffer>
 800f280:	2108      	movs	r1, #8
 800f282:	4620      	mov	r0, r4
 800f284:	f000 ff40 	bl	8010108 <ucdr_check_buffer_available_for>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d14e      	bne.n	800f32a <ucdr_serialize_uint64_t+0xc6>
 800f28c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f290:	42ab      	cmp	r3, r5
 800f292:	d945      	bls.n	800f320 <ucdr_serialize_uint64_t+0xbc>
 800f294:	1b5e      	subs	r6, r3, r5
 800f296:	60a3      	str	r3, [r4, #8]
 800f298:	6923      	ldr	r3, [r4, #16]
 800f29a:	f1c6 0808 	rsb	r8, r6, #8
 800f29e:	4433      	add	r3, r6
 800f2a0:	6123      	str	r3, [r4, #16]
 800f2a2:	4641      	mov	r1, r8
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f000 ff3b 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	d074      	beq.n	800f398 <ucdr_serialize_uint64_t+0x134>
 800f2ae:	7d23      	ldrb	r3, [r4, #20]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	f000 809b 	beq.w	800f3ec <ucdr_serialize_uint64_t+0x188>
 800f2b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2ba:	702b      	strb	r3, [r5, #0]
 800f2bc:	2e00      	cmp	r6, #0
 800f2be:	d078      	beq.n	800f3b2 <ucdr_serialize_uint64_t+0x14e>
 800f2c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2c4:	706b      	strb	r3, [r5, #1]
 800f2c6:	2e01      	cmp	r6, #1
 800f2c8:	d077      	beq.n	800f3ba <ucdr_serialize_uint64_t+0x156>
 800f2ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f2ce:	70ab      	strb	r3, [r5, #2]
 800f2d0:	2e02      	cmp	r6, #2
 800f2d2:	d076      	beq.n	800f3c2 <ucdr_serialize_uint64_t+0x15e>
 800f2d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f2d8:	70eb      	strb	r3, [r5, #3]
 800f2da:	2e03      	cmp	r6, #3
 800f2dc:	d075      	beq.n	800f3ca <ucdr_serialize_uint64_t+0x166>
 800f2de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f2e2:	712b      	strb	r3, [r5, #4]
 800f2e4:	2e04      	cmp	r6, #4
 800f2e6:	d074      	beq.n	800f3d2 <ucdr_serialize_uint64_t+0x16e>
 800f2e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f2ec:	716b      	strb	r3, [r5, #5]
 800f2ee:	2e05      	cmp	r6, #5
 800f2f0:	d073      	beq.n	800f3da <ucdr_serialize_uint64_t+0x176>
 800f2f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f2f6:	71ab      	strb	r3, [r5, #6]
 800f2f8:	2e06      	cmp	r6, #6
 800f2fa:	d072      	beq.n	800f3e2 <ucdr_serialize_uint64_t+0x17e>
 800f2fc:	f89d 3000 	ldrb.w	r3, [sp]
 800f300:	71eb      	strb	r3, [r5, #7]
 800f302:	6923      	ldr	r3, [r4, #16]
 800f304:	68a2      	ldr	r2, [r4, #8]
 800f306:	7da0      	ldrb	r0, [r4, #22]
 800f308:	3308      	adds	r3, #8
 800f30a:	1b9e      	subs	r6, r3, r6
 800f30c:	4442      	add	r2, r8
 800f30e:	2308      	movs	r3, #8
 800f310:	f080 0001 	eor.w	r0, r0, #1
 800f314:	60a2      	str	r2, [r4, #8]
 800f316:	6126      	str	r6, [r4, #16]
 800f318:	7563      	strb	r3, [r4, #21]
 800f31a:	b002      	add	sp, #8
 800f31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f320:	2108      	movs	r1, #8
 800f322:	4620      	mov	r0, r4
 800f324:	f000 fefc 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f328:	b350      	cbz	r0, 800f380 <ucdr_serialize_uint64_t+0x11c>
 800f32a:	7d23      	ldrb	r3, [r4, #20]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d02d      	beq.n	800f38c <ucdr_serialize_uint64_t+0x128>
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f336:	701a      	strb	r2, [r3, #0]
 800f338:	68a3      	ldr	r3, [r4, #8]
 800f33a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f33e:	705a      	strb	r2, [r3, #1]
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f346:	709a      	strb	r2, [r3, #2]
 800f348:	68a3      	ldr	r3, [r4, #8]
 800f34a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f34e:	70da      	strb	r2, [r3, #3]
 800f350:	68a3      	ldr	r3, [r4, #8]
 800f352:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f356:	711a      	strb	r2, [r3, #4]
 800f358:	68a3      	ldr	r3, [r4, #8]
 800f35a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f35e:	715a      	strb	r2, [r3, #5]
 800f360:	68a3      	ldr	r3, [r4, #8]
 800f362:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f366:	719a      	strb	r2, [r3, #6]
 800f368:	68a3      	ldr	r3, [r4, #8]
 800f36a:	f89d 2000 	ldrb.w	r2, [sp]
 800f36e:	71da      	strb	r2, [r3, #7]
 800f370:	68a2      	ldr	r2, [r4, #8]
 800f372:	6923      	ldr	r3, [r4, #16]
 800f374:	3208      	adds	r2, #8
 800f376:	3308      	adds	r3, #8
 800f378:	2108      	movs	r1, #8
 800f37a:	60a2      	str	r2, [r4, #8]
 800f37c:	6123      	str	r3, [r4, #16]
 800f37e:	7561      	strb	r1, [r4, #21]
 800f380:	7da0      	ldrb	r0, [r4, #22]
 800f382:	f080 0001 	eor.w	r0, r0, #1
 800f386:	b002      	add	sp, #8
 800f388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f38c:	466b      	mov	r3, sp
 800f38e:	cb03      	ldmia	r3!, {r0, r1}
 800f390:	68a3      	ldr	r3, [r4, #8]
 800f392:	6018      	str	r0, [r3, #0]
 800f394:	6059      	str	r1, [r3, #4]
 800f396:	e7eb      	b.n	800f370 <ucdr_serialize_uint64_t+0x10c>
 800f398:	68a2      	ldr	r2, [r4, #8]
 800f39a:	6923      	ldr	r3, [r4, #16]
 800f39c:	7da0      	ldrb	r0, [r4, #22]
 800f39e:	7567      	strb	r7, [r4, #21]
 800f3a0:	1b92      	subs	r2, r2, r6
 800f3a2:	1b9b      	subs	r3, r3, r6
 800f3a4:	f080 0001 	eor.w	r0, r0, #1
 800f3a8:	60a2      	str	r2, [r4, #8]
 800f3aa:	6123      	str	r3, [r4, #16]
 800f3ac:	b002      	add	sp, #8
 800f3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b2:	68a3      	ldr	r3, [r4, #8]
 800f3b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3b8:	701a      	strb	r2, [r3, #0]
 800f3ba:	68a3      	ldr	r3, [r4, #8]
 800f3bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	68a3      	ldr	r3, [r4, #8]
 800f3c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	68a3      	ldr	r3, [r4, #8]
 800f3cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f3d0:	701a      	strb	r2, [r3, #0]
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f3d8:	701a      	strb	r2, [r3, #0]
 800f3da:	68a3      	ldr	r3, [r4, #8]
 800f3dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f3e0:	701a      	strb	r2, [r3, #0]
 800f3e2:	68a3      	ldr	r3, [r4, #8]
 800f3e4:	f89d 2000 	ldrb.w	r2, [sp]
 800f3e8:	701a      	strb	r2, [r3, #0]
 800f3ea:	e78a      	b.n	800f302 <ucdr_serialize_uint64_t+0x9e>
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	466d      	mov	r5, sp
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	4632      	mov	r2, r6
 800f3f4:	f00b fea9 	bl	801b14a <memcpy>
 800f3f8:	68a0      	ldr	r0, [r4, #8]
 800f3fa:	4642      	mov	r2, r8
 800f3fc:	19a9      	adds	r1, r5, r6
 800f3fe:	f00b fea4 	bl	801b14a <memcpy>
 800f402:	e77e      	b.n	800f302 <ucdr_serialize_uint64_t+0x9e>

0800f404 <ucdr_serialize_int16_t>:
 800f404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f408:	b082      	sub	sp, #8
 800f40a:	460b      	mov	r3, r1
 800f40c:	2102      	movs	r1, #2
 800f40e:	4604      	mov	r4, r0
 800f410:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f414:	f000 fed8 	bl	80101c8 <ucdr_buffer_alignment>
 800f418:	4601      	mov	r1, r0
 800f41a:	4620      	mov	r0, r4
 800f41c:	7d67      	ldrb	r7, [r4, #21]
 800f41e:	f000 ff17 	bl	8010250 <ucdr_advance_buffer>
 800f422:	2102      	movs	r1, #2
 800f424:	4620      	mov	r0, r4
 800f426:	f000 fe6f 	bl	8010108 <ucdr_check_buffer_available_for>
 800f42a:	bb78      	cbnz	r0, 800f48c <ucdr_serialize_int16_t+0x88>
 800f42c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f430:	42ab      	cmp	r3, r5
 800f432:	d926      	bls.n	800f482 <ucdr_serialize_int16_t+0x7e>
 800f434:	1b5e      	subs	r6, r3, r5
 800f436:	60a3      	str	r3, [r4, #8]
 800f438:	6923      	ldr	r3, [r4, #16]
 800f43a:	f1c6 0802 	rsb	r8, r6, #2
 800f43e:	4433      	add	r3, r6
 800f440:	6123      	str	r3, [r4, #16]
 800f442:	4641      	mov	r1, r8
 800f444:	4620      	mov	r0, r4
 800f446:	f000 fe6b 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d03b      	beq.n	800f4c6 <ucdr_serialize_int16_t+0xc2>
 800f44e:	7d23      	ldrb	r3, [r4, #20]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d04a      	beq.n	800f4ea <ucdr_serialize_int16_t+0xe6>
 800f454:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f458:	702b      	strb	r3, [r5, #0]
 800f45a:	2e00      	cmp	r6, #0
 800f45c:	d040      	beq.n	800f4e0 <ucdr_serialize_int16_t+0xdc>
 800f45e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f462:	706b      	strb	r3, [r5, #1]
 800f464:	6923      	ldr	r3, [r4, #16]
 800f466:	68a2      	ldr	r2, [r4, #8]
 800f468:	7da0      	ldrb	r0, [r4, #22]
 800f46a:	3302      	adds	r3, #2
 800f46c:	1b9e      	subs	r6, r3, r6
 800f46e:	4442      	add	r2, r8
 800f470:	2302      	movs	r3, #2
 800f472:	f080 0001 	eor.w	r0, r0, #1
 800f476:	60a2      	str	r2, [r4, #8]
 800f478:	6126      	str	r6, [r4, #16]
 800f47a:	7563      	strb	r3, [r4, #21]
 800f47c:	b002      	add	sp, #8
 800f47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f482:	2102      	movs	r1, #2
 800f484:	4620      	mov	r0, r4
 800f486:	f000 fe4b 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f48a:	b190      	cbz	r0, 800f4b2 <ucdr_serialize_int16_t+0xae>
 800f48c:	7d23      	ldrb	r3, [r4, #20]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	68a3      	ldr	r3, [r4, #8]
 800f492:	d014      	beq.n	800f4be <ucdr_serialize_int16_t+0xba>
 800f494:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f498:	701a      	strb	r2, [r3, #0]
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4a0:	705a      	strb	r2, [r3, #1]
 800f4a2:	68a2      	ldr	r2, [r4, #8]
 800f4a4:	6923      	ldr	r3, [r4, #16]
 800f4a6:	3202      	adds	r2, #2
 800f4a8:	3302      	adds	r3, #2
 800f4aa:	2102      	movs	r1, #2
 800f4ac:	60a2      	str	r2, [r4, #8]
 800f4ae:	6123      	str	r3, [r4, #16]
 800f4b0:	7561      	strb	r1, [r4, #21]
 800f4b2:	7da0      	ldrb	r0, [r4, #22]
 800f4b4:	f080 0001 	eor.w	r0, r0, #1
 800f4b8:	b002      	add	sp, #8
 800f4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f4c2:	801a      	strh	r2, [r3, #0]
 800f4c4:	e7ed      	b.n	800f4a2 <ucdr_serialize_int16_t+0x9e>
 800f4c6:	68a2      	ldr	r2, [r4, #8]
 800f4c8:	6923      	ldr	r3, [r4, #16]
 800f4ca:	7da0      	ldrb	r0, [r4, #22]
 800f4cc:	7567      	strb	r7, [r4, #21]
 800f4ce:	1b92      	subs	r2, r2, r6
 800f4d0:	1b9b      	subs	r3, r3, r6
 800f4d2:	f080 0001 	eor.w	r0, r0, #1
 800f4d6:	60a2      	str	r2, [r4, #8]
 800f4d8:	6123      	str	r3, [r4, #16]
 800f4da:	b002      	add	sp, #8
 800f4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e0:	68a3      	ldr	r3, [r4, #8]
 800f4e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4e6:	701a      	strb	r2, [r3, #0]
 800f4e8:	e7bc      	b.n	800f464 <ucdr_serialize_int16_t+0x60>
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f10d 0506 	add.w	r5, sp, #6
 800f4f0:	4629      	mov	r1, r5
 800f4f2:	4632      	mov	r2, r6
 800f4f4:	f00b fe29 	bl	801b14a <memcpy>
 800f4f8:	68a0      	ldr	r0, [r4, #8]
 800f4fa:	4642      	mov	r2, r8
 800f4fc:	19a9      	adds	r1, r5, r6
 800f4fe:	f00b fe24 	bl	801b14a <memcpy>
 800f502:	e7af      	b.n	800f464 <ucdr_serialize_int16_t+0x60>

0800f504 <ucdr_deserialize_int16_t>:
 800f504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f508:	460d      	mov	r5, r1
 800f50a:	2102      	movs	r1, #2
 800f50c:	4604      	mov	r4, r0
 800f50e:	f000 fe5b 	bl	80101c8 <ucdr_buffer_alignment>
 800f512:	4601      	mov	r1, r0
 800f514:	4620      	mov	r0, r4
 800f516:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f51a:	f000 fe99 	bl	8010250 <ucdr_advance_buffer>
 800f51e:	2102      	movs	r1, #2
 800f520:	4620      	mov	r0, r4
 800f522:	f000 fdf1 	bl	8010108 <ucdr_check_buffer_available_for>
 800f526:	bb60      	cbnz	r0, 800f582 <ucdr_deserialize_int16_t+0x7e>
 800f528:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f52c:	42be      	cmp	r6, r7
 800f52e:	d923      	bls.n	800f578 <ucdr_deserialize_int16_t+0x74>
 800f530:	6923      	ldr	r3, [r4, #16]
 800f532:	60a6      	str	r6, [r4, #8]
 800f534:	1bf6      	subs	r6, r6, r7
 800f536:	4433      	add	r3, r6
 800f538:	f1c6 0902 	rsb	r9, r6, #2
 800f53c:	6123      	str	r3, [r4, #16]
 800f53e:	4649      	mov	r1, r9
 800f540:	4620      	mov	r0, r4
 800f542:	f000 fded 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f546:	2800      	cmp	r0, #0
 800f548:	d034      	beq.n	800f5b4 <ucdr_deserialize_int16_t+0xb0>
 800f54a:	7d23      	ldrb	r3, [r4, #20]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d042      	beq.n	800f5d6 <ucdr_deserialize_int16_t+0xd2>
 800f550:	787b      	ldrb	r3, [r7, #1]
 800f552:	702b      	strb	r3, [r5, #0]
 800f554:	2e00      	cmp	r6, #0
 800f556:	d03a      	beq.n	800f5ce <ucdr_deserialize_int16_t+0xca>
 800f558:	783b      	ldrb	r3, [r7, #0]
 800f55a:	706b      	strb	r3, [r5, #1]
 800f55c:	6923      	ldr	r3, [r4, #16]
 800f55e:	68a2      	ldr	r2, [r4, #8]
 800f560:	7da0      	ldrb	r0, [r4, #22]
 800f562:	2102      	movs	r1, #2
 800f564:	3302      	adds	r3, #2
 800f566:	444a      	add	r2, r9
 800f568:	1b9b      	subs	r3, r3, r6
 800f56a:	7561      	strb	r1, [r4, #21]
 800f56c:	60a2      	str	r2, [r4, #8]
 800f56e:	6123      	str	r3, [r4, #16]
 800f570:	f080 0001 	eor.w	r0, r0, #1
 800f574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f578:	2102      	movs	r1, #2
 800f57a:	4620      	mov	r0, r4
 800f57c:	f000 fdd0 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f580:	b180      	cbz	r0, 800f5a4 <ucdr_deserialize_int16_t+0xa0>
 800f582:	7d23      	ldrb	r3, [r4, #20]
 800f584:	2b01      	cmp	r3, #1
 800f586:	68a3      	ldr	r3, [r4, #8]
 800f588:	d011      	beq.n	800f5ae <ucdr_deserialize_int16_t+0xaa>
 800f58a:	785b      	ldrb	r3, [r3, #1]
 800f58c:	702b      	strb	r3, [r5, #0]
 800f58e:	68a3      	ldr	r3, [r4, #8]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	706b      	strb	r3, [r5, #1]
 800f594:	68a2      	ldr	r2, [r4, #8]
 800f596:	6923      	ldr	r3, [r4, #16]
 800f598:	3202      	adds	r2, #2
 800f59a:	3302      	adds	r3, #2
 800f59c:	2102      	movs	r1, #2
 800f59e:	60a2      	str	r2, [r4, #8]
 800f5a0:	6123      	str	r3, [r4, #16]
 800f5a2:	7561      	strb	r1, [r4, #21]
 800f5a4:	7da0      	ldrb	r0, [r4, #22]
 800f5a6:	f080 0001 	eor.w	r0, r0, #1
 800f5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	802b      	strh	r3, [r5, #0]
 800f5b2:	e7ef      	b.n	800f594 <ucdr_deserialize_int16_t+0x90>
 800f5b4:	68a2      	ldr	r2, [r4, #8]
 800f5b6:	6923      	ldr	r3, [r4, #16]
 800f5b8:	7da0      	ldrb	r0, [r4, #22]
 800f5ba:	f884 8015 	strb.w	r8, [r4, #21]
 800f5be:	1b92      	subs	r2, r2, r6
 800f5c0:	1b9b      	subs	r3, r3, r6
 800f5c2:	60a2      	str	r2, [r4, #8]
 800f5c4:	6123      	str	r3, [r4, #16]
 800f5c6:	f080 0001 	eor.w	r0, r0, #1
 800f5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ce:	68a3      	ldr	r3, [r4, #8]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	706b      	strb	r3, [r5, #1]
 800f5d4:	e7c2      	b.n	800f55c <ucdr_deserialize_int16_t+0x58>
 800f5d6:	4639      	mov	r1, r7
 800f5d8:	4632      	mov	r2, r6
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f00b fdb5 	bl	801b14a <memcpy>
 800f5e0:	68a1      	ldr	r1, [r4, #8]
 800f5e2:	464a      	mov	r2, r9
 800f5e4:	19a8      	adds	r0, r5, r6
 800f5e6:	f00b fdb0 	bl	801b14a <memcpy>
 800f5ea:	e7b7      	b.n	800f55c <ucdr_deserialize_int16_t+0x58>

0800f5ec <ucdr_serialize_int32_t>:
 800f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f0:	b082      	sub	sp, #8
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	9101      	str	r1, [sp, #4]
 800f5f6:	2104      	movs	r1, #4
 800f5f8:	f000 fde6 	bl	80101c8 <ucdr_buffer_alignment>
 800f5fc:	4601      	mov	r1, r0
 800f5fe:	4620      	mov	r0, r4
 800f600:	7d67      	ldrb	r7, [r4, #21]
 800f602:	f000 fe25 	bl	8010250 <ucdr_advance_buffer>
 800f606:	2104      	movs	r1, #4
 800f608:	4620      	mov	r0, r4
 800f60a:	f000 fd7d 	bl	8010108 <ucdr_check_buffer_available_for>
 800f60e:	2800      	cmp	r0, #0
 800f610:	d139      	bne.n	800f686 <ucdr_serialize_int32_t+0x9a>
 800f612:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f616:	42ab      	cmp	r3, r5
 800f618:	d930      	bls.n	800f67c <ucdr_serialize_int32_t+0x90>
 800f61a:	1b5e      	subs	r6, r3, r5
 800f61c:	60a3      	str	r3, [r4, #8]
 800f61e:	6923      	ldr	r3, [r4, #16]
 800f620:	f1c6 0804 	rsb	r8, r6, #4
 800f624:	4433      	add	r3, r6
 800f626:	6123      	str	r3, [r4, #16]
 800f628:	4641      	mov	r1, r8
 800f62a:	4620      	mov	r0, r4
 800f62c:	f000 fd78 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f630:	2800      	cmp	r0, #0
 800f632:	d04c      	beq.n	800f6ce <ucdr_serialize_int32_t+0xe2>
 800f634:	7d23      	ldrb	r3, [r4, #20]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d063      	beq.n	800f702 <ucdr_serialize_int32_t+0x116>
 800f63a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f63e:	702b      	strb	r3, [r5, #0]
 800f640:	2e00      	cmp	r6, #0
 800f642:	d051      	beq.n	800f6e8 <ucdr_serialize_int32_t+0xfc>
 800f644:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f648:	706b      	strb	r3, [r5, #1]
 800f64a:	2e01      	cmp	r6, #1
 800f64c:	d050      	beq.n	800f6f0 <ucdr_serialize_int32_t+0x104>
 800f64e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f652:	70ab      	strb	r3, [r5, #2]
 800f654:	2e02      	cmp	r6, #2
 800f656:	d04f      	beq.n	800f6f8 <ucdr_serialize_int32_t+0x10c>
 800f658:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f65c:	70eb      	strb	r3, [r5, #3]
 800f65e:	6923      	ldr	r3, [r4, #16]
 800f660:	68a2      	ldr	r2, [r4, #8]
 800f662:	7da0      	ldrb	r0, [r4, #22]
 800f664:	3304      	adds	r3, #4
 800f666:	1b9e      	subs	r6, r3, r6
 800f668:	4442      	add	r2, r8
 800f66a:	2304      	movs	r3, #4
 800f66c:	f080 0001 	eor.w	r0, r0, #1
 800f670:	60a2      	str	r2, [r4, #8]
 800f672:	6126      	str	r6, [r4, #16]
 800f674:	7563      	strb	r3, [r4, #21]
 800f676:	b002      	add	sp, #8
 800f678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f67c:	2104      	movs	r1, #4
 800f67e:	4620      	mov	r0, r4
 800f680:	f000 fd4e 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f684:	b1d0      	cbz	r0, 800f6bc <ucdr_serialize_int32_t+0xd0>
 800f686:	7d23      	ldrb	r3, [r4, #20]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	68a3      	ldr	r3, [r4, #8]
 800f68c:	d01c      	beq.n	800f6c8 <ucdr_serialize_int32_t+0xdc>
 800f68e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f692:	701a      	strb	r2, [r3, #0]
 800f694:	68a3      	ldr	r3, [r4, #8]
 800f696:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f69a:	705a      	strb	r2, [r3, #1]
 800f69c:	68a3      	ldr	r3, [r4, #8]
 800f69e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6a2:	709a      	strb	r2, [r3, #2]
 800f6a4:	68a3      	ldr	r3, [r4, #8]
 800f6a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6aa:	70da      	strb	r2, [r3, #3]
 800f6ac:	68a2      	ldr	r2, [r4, #8]
 800f6ae:	6923      	ldr	r3, [r4, #16]
 800f6b0:	3204      	adds	r2, #4
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	2104      	movs	r1, #4
 800f6b6:	60a2      	str	r2, [r4, #8]
 800f6b8:	6123      	str	r3, [r4, #16]
 800f6ba:	7561      	strb	r1, [r4, #21]
 800f6bc:	7da0      	ldrb	r0, [r4, #22]
 800f6be:	f080 0001 	eor.w	r0, r0, #1
 800f6c2:	b002      	add	sp, #8
 800f6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c8:	9a01      	ldr	r2, [sp, #4]
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	e7ee      	b.n	800f6ac <ucdr_serialize_int32_t+0xc0>
 800f6ce:	68a2      	ldr	r2, [r4, #8]
 800f6d0:	6923      	ldr	r3, [r4, #16]
 800f6d2:	7da0      	ldrb	r0, [r4, #22]
 800f6d4:	7567      	strb	r7, [r4, #21]
 800f6d6:	1b92      	subs	r2, r2, r6
 800f6d8:	1b9b      	subs	r3, r3, r6
 800f6da:	f080 0001 	eor.w	r0, r0, #1
 800f6de:	60a2      	str	r2, [r4, #8]
 800f6e0:	6123      	str	r3, [r4, #16]
 800f6e2:	b002      	add	sp, #8
 800f6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6e8:	68a3      	ldr	r3, [r4, #8]
 800f6ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6ee:	701a      	strb	r2, [r3, #0]
 800f6f0:	68a3      	ldr	r3, [r4, #8]
 800f6f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6f6:	701a      	strb	r2, [r3, #0]
 800f6f8:	68a3      	ldr	r3, [r4, #8]
 800f6fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6fe:	701a      	strb	r2, [r3, #0]
 800f700:	e7ad      	b.n	800f65e <ucdr_serialize_int32_t+0x72>
 800f702:	4628      	mov	r0, r5
 800f704:	ad01      	add	r5, sp, #4
 800f706:	4629      	mov	r1, r5
 800f708:	4632      	mov	r2, r6
 800f70a:	f00b fd1e 	bl	801b14a <memcpy>
 800f70e:	68a0      	ldr	r0, [r4, #8]
 800f710:	4642      	mov	r2, r8
 800f712:	19a9      	adds	r1, r5, r6
 800f714:	f00b fd19 	bl	801b14a <memcpy>
 800f718:	e7a1      	b.n	800f65e <ucdr_serialize_int32_t+0x72>
 800f71a:	bf00      	nop

0800f71c <ucdr_deserialize_int32_t>:
 800f71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f720:	460d      	mov	r5, r1
 800f722:	2104      	movs	r1, #4
 800f724:	4604      	mov	r4, r0
 800f726:	f000 fd4f 	bl	80101c8 <ucdr_buffer_alignment>
 800f72a:	4601      	mov	r1, r0
 800f72c:	4620      	mov	r0, r4
 800f72e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f732:	f000 fd8d 	bl	8010250 <ucdr_advance_buffer>
 800f736:	2104      	movs	r1, #4
 800f738:	4620      	mov	r0, r4
 800f73a:	f000 fce5 	bl	8010108 <ucdr_check_buffer_available_for>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d138      	bne.n	800f7b4 <ucdr_deserialize_int32_t+0x98>
 800f742:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f746:	42b7      	cmp	r7, r6
 800f748:	d92f      	bls.n	800f7aa <ucdr_deserialize_int32_t+0x8e>
 800f74a:	6923      	ldr	r3, [r4, #16]
 800f74c:	60a7      	str	r7, [r4, #8]
 800f74e:	1bbf      	subs	r7, r7, r6
 800f750:	443b      	add	r3, r7
 800f752:	f1c7 0904 	rsb	r9, r7, #4
 800f756:	6123      	str	r3, [r4, #16]
 800f758:	4649      	mov	r1, r9
 800f75a:	4620      	mov	r0, r4
 800f75c:	f000 fce0 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f760:	2800      	cmp	r0, #0
 800f762:	d046      	beq.n	800f7f2 <ucdr_deserialize_int32_t+0xd6>
 800f764:	7d23      	ldrb	r3, [r4, #20]
 800f766:	2b01      	cmp	r3, #1
 800f768:	d05c      	beq.n	800f824 <ucdr_deserialize_int32_t+0x108>
 800f76a:	78f3      	ldrb	r3, [r6, #3]
 800f76c:	702b      	strb	r3, [r5, #0]
 800f76e:	2f00      	cmp	r7, #0
 800f770:	d04c      	beq.n	800f80c <ucdr_deserialize_int32_t+0xf0>
 800f772:	78b3      	ldrb	r3, [r6, #2]
 800f774:	706b      	strb	r3, [r5, #1]
 800f776:	2f01      	cmp	r7, #1
 800f778:	f105 0302 	add.w	r3, r5, #2
 800f77c:	d04a      	beq.n	800f814 <ucdr_deserialize_int32_t+0xf8>
 800f77e:	7873      	ldrb	r3, [r6, #1]
 800f780:	70ab      	strb	r3, [r5, #2]
 800f782:	2f02      	cmp	r7, #2
 800f784:	f105 0303 	add.w	r3, r5, #3
 800f788:	d048      	beq.n	800f81c <ucdr_deserialize_int32_t+0x100>
 800f78a:	7833      	ldrb	r3, [r6, #0]
 800f78c:	70eb      	strb	r3, [r5, #3]
 800f78e:	6923      	ldr	r3, [r4, #16]
 800f790:	68a2      	ldr	r2, [r4, #8]
 800f792:	7da0      	ldrb	r0, [r4, #22]
 800f794:	2104      	movs	r1, #4
 800f796:	3304      	adds	r3, #4
 800f798:	444a      	add	r2, r9
 800f79a:	1bdb      	subs	r3, r3, r7
 800f79c:	7561      	strb	r1, [r4, #21]
 800f79e:	60a2      	str	r2, [r4, #8]
 800f7a0:	6123      	str	r3, [r4, #16]
 800f7a2:	f080 0001 	eor.w	r0, r0, #1
 800f7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7aa:	2104      	movs	r1, #4
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f000 fcb7 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f7b2:	b1b0      	cbz	r0, 800f7e2 <ucdr_deserialize_int32_t+0xc6>
 800f7b4:	7d23      	ldrb	r3, [r4, #20]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	68a3      	ldr	r3, [r4, #8]
 800f7ba:	d017      	beq.n	800f7ec <ucdr_deserialize_int32_t+0xd0>
 800f7bc:	78db      	ldrb	r3, [r3, #3]
 800f7be:	702b      	strb	r3, [r5, #0]
 800f7c0:	68a3      	ldr	r3, [r4, #8]
 800f7c2:	789b      	ldrb	r3, [r3, #2]
 800f7c4:	706b      	strb	r3, [r5, #1]
 800f7c6:	68a3      	ldr	r3, [r4, #8]
 800f7c8:	785b      	ldrb	r3, [r3, #1]
 800f7ca:	70ab      	strb	r3, [r5, #2]
 800f7cc:	68a3      	ldr	r3, [r4, #8]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	70eb      	strb	r3, [r5, #3]
 800f7d2:	68a2      	ldr	r2, [r4, #8]
 800f7d4:	6923      	ldr	r3, [r4, #16]
 800f7d6:	3204      	adds	r2, #4
 800f7d8:	3304      	adds	r3, #4
 800f7da:	2104      	movs	r1, #4
 800f7dc:	60a2      	str	r2, [r4, #8]
 800f7de:	6123      	str	r3, [r4, #16]
 800f7e0:	7561      	strb	r1, [r4, #21]
 800f7e2:	7da0      	ldrb	r0, [r4, #22]
 800f7e4:	f080 0001 	eor.w	r0, r0, #1
 800f7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	602b      	str	r3, [r5, #0]
 800f7f0:	e7ef      	b.n	800f7d2 <ucdr_deserialize_int32_t+0xb6>
 800f7f2:	68a2      	ldr	r2, [r4, #8]
 800f7f4:	6923      	ldr	r3, [r4, #16]
 800f7f6:	7da0      	ldrb	r0, [r4, #22]
 800f7f8:	f884 8015 	strb.w	r8, [r4, #21]
 800f7fc:	1bd2      	subs	r2, r2, r7
 800f7fe:	1bdb      	subs	r3, r3, r7
 800f800:	60a2      	str	r2, [r4, #8]
 800f802:	6123      	str	r3, [r4, #16]
 800f804:	f080 0001 	eor.w	r0, r0, #1
 800f808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f80c:	68a3      	ldr	r3, [r4, #8]
 800f80e:	789b      	ldrb	r3, [r3, #2]
 800f810:	706b      	strb	r3, [r5, #1]
 800f812:	1cab      	adds	r3, r5, #2
 800f814:	68a2      	ldr	r2, [r4, #8]
 800f816:	7852      	ldrb	r2, [r2, #1]
 800f818:	f803 2b01 	strb.w	r2, [r3], #1
 800f81c:	68a2      	ldr	r2, [r4, #8]
 800f81e:	7812      	ldrb	r2, [r2, #0]
 800f820:	701a      	strb	r2, [r3, #0]
 800f822:	e7b4      	b.n	800f78e <ucdr_deserialize_int32_t+0x72>
 800f824:	4631      	mov	r1, r6
 800f826:	463a      	mov	r2, r7
 800f828:	4628      	mov	r0, r5
 800f82a:	f00b fc8e 	bl	801b14a <memcpy>
 800f82e:	68a1      	ldr	r1, [r4, #8]
 800f830:	464a      	mov	r2, r9
 800f832:	19e8      	adds	r0, r5, r7
 800f834:	f00b fc89 	bl	801b14a <memcpy>
 800f838:	e7a9      	b.n	800f78e <ucdr_deserialize_int32_t+0x72>
 800f83a:	bf00      	nop

0800f83c <ucdr_serialize_endian_float>:
 800f83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f840:	460d      	mov	r5, r1
 800f842:	b083      	sub	sp, #12
 800f844:	2104      	movs	r1, #4
 800f846:	4604      	mov	r4, r0
 800f848:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f84c:	f000 fcbc 	bl	80101c8 <ucdr_buffer_alignment>
 800f850:	4601      	mov	r1, r0
 800f852:	4620      	mov	r0, r4
 800f854:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f858:	f000 fcfa 	bl	8010250 <ucdr_advance_buffer>
 800f85c:	2104      	movs	r1, #4
 800f85e:	4620      	mov	r0, r4
 800f860:	f000 fc52 	bl	8010108 <ucdr_check_buffer_available_for>
 800f864:	2800      	cmp	r0, #0
 800f866:	d138      	bne.n	800f8da <ucdr_serialize_endian_float+0x9e>
 800f868:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f86c:	42b7      	cmp	r7, r6
 800f86e:	d92f      	bls.n	800f8d0 <ucdr_serialize_endian_float+0x94>
 800f870:	6923      	ldr	r3, [r4, #16]
 800f872:	60a7      	str	r7, [r4, #8]
 800f874:	1bbf      	subs	r7, r7, r6
 800f876:	443b      	add	r3, r7
 800f878:	f1c7 0904 	rsb	r9, r7, #4
 800f87c:	6123      	str	r3, [r4, #16]
 800f87e:	4649      	mov	r1, r9
 800f880:	4620      	mov	r0, r4
 800f882:	f000 fc4d 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f886:	2800      	cmp	r0, #0
 800f888:	d04a      	beq.n	800f920 <ucdr_serialize_endian_float+0xe4>
 800f88a:	2d01      	cmp	r5, #1
 800f88c:	d063      	beq.n	800f956 <ucdr_serialize_endian_float+0x11a>
 800f88e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f892:	7033      	strb	r3, [r6, #0]
 800f894:	2f00      	cmp	r7, #0
 800f896:	d051      	beq.n	800f93c <ucdr_serialize_endian_float+0x100>
 800f898:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f89c:	7073      	strb	r3, [r6, #1]
 800f89e:	2f01      	cmp	r7, #1
 800f8a0:	d050      	beq.n	800f944 <ucdr_serialize_endian_float+0x108>
 800f8a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f8a6:	70b3      	strb	r3, [r6, #2]
 800f8a8:	2f02      	cmp	r7, #2
 800f8aa:	d04f      	beq.n	800f94c <ucdr_serialize_endian_float+0x110>
 800f8ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8b0:	70f3      	strb	r3, [r6, #3]
 800f8b2:	6923      	ldr	r3, [r4, #16]
 800f8b4:	68a2      	ldr	r2, [r4, #8]
 800f8b6:	7da0      	ldrb	r0, [r4, #22]
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	444a      	add	r2, r9
 800f8bc:	1bdb      	subs	r3, r3, r7
 800f8be:	2104      	movs	r1, #4
 800f8c0:	f080 0001 	eor.w	r0, r0, #1
 800f8c4:	60a2      	str	r2, [r4, #8]
 800f8c6:	6123      	str	r3, [r4, #16]
 800f8c8:	7561      	strb	r1, [r4, #21]
 800f8ca:	b003      	add	sp, #12
 800f8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8d0:	2104      	movs	r1, #4
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f000 fc24 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f8d8:	b1c8      	cbz	r0, 800f90e <ucdr_serialize_endian_float+0xd2>
 800f8da:	2d01      	cmp	r5, #1
 800f8dc:	68a3      	ldr	r3, [r4, #8]
 800f8de:	d01c      	beq.n	800f91a <ucdr_serialize_endian_float+0xde>
 800f8e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f8e4:	701a      	strb	r2, [r3, #0]
 800f8e6:	68a3      	ldr	r3, [r4, #8]
 800f8e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f8ec:	705a      	strb	r2, [r3, #1]
 800f8ee:	68a3      	ldr	r3, [r4, #8]
 800f8f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f8f4:	709a      	strb	r2, [r3, #2]
 800f8f6:	68a3      	ldr	r3, [r4, #8]
 800f8f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f8fc:	70da      	strb	r2, [r3, #3]
 800f8fe:	68a2      	ldr	r2, [r4, #8]
 800f900:	6923      	ldr	r3, [r4, #16]
 800f902:	3204      	adds	r2, #4
 800f904:	3304      	adds	r3, #4
 800f906:	2104      	movs	r1, #4
 800f908:	60a2      	str	r2, [r4, #8]
 800f90a:	6123      	str	r3, [r4, #16]
 800f90c:	7561      	strb	r1, [r4, #21]
 800f90e:	7da0      	ldrb	r0, [r4, #22]
 800f910:	f080 0001 	eor.w	r0, r0, #1
 800f914:	b003      	add	sp, #12
 800f916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f91a:	9a01      	ldr	r2, [sp, #4]
 800f91c:	601a      	str	r2, [r3, #0]
 800f91e:	e7ee      	b.n	800f8fe <ucdr_serialize_endian_float+0xc2>
 800f920:	68a2      	ldr	r2, [r4, #8]
 800f922:	6923      	ldr	r3, [r4, #16]
 800f924:	7da0      	ldrb	r0, [r4, #22]
 800f926:	f884 8015 	strb.w	r8, [r4, #21]
 800f92a:	1bd2      	subs	r2, r2, r7
 800f92c:	1bdb      	subs	r3, r3, r7
 800f92e:	f080 0001 	eor.w	r0, r0, #1
 800f932:	60a2      	str	r2, [r4, #8]
 800f934:	6123      	str	r3, [r4, #16]
 800f936:	b003      	add	sp, #12
 800f938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f93c:	68a3      	ldr	r3, [r4, #8]
 800f93e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f942:	701a      	strb	r2, [r3, #0]
 800f944:	68a3      	ldr	r3, [r4, #8]
 800f946:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f94a:	701a      	strb	r2, [r3, #0]
 800f94c:	68a3      	ldr	r3, [r4, #8]
 800f94e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f952:	701a      	strb	r2, [r3, #0]
 800f954:	e7ad      	b.n	800f8b2 <ucdr_serialize_endian_float+0x76>
 800f956:	ad01      	add	r5, sp, #4
 800f958:	4629      	mov	r1, r5
 800f95a:	463a      	mov	r2, r7
 800f95c:	4630      	mov	r0, r6
 800f95e:	f00b fbf4 	bl	801b14a <memcpy>
 800f962:	68a0      	ldr	r0, [r4, #8]
 800f964:	464a      	mov	r2, r9
 800f966:	19e9      	adds	r1, r5, r7
 800f968:	f00b fbef 	bl	801b14a <memcpy>
 800f96c:	e7a1      	b.n	800f8b2 <ucdr_serialize_endian_float+0x76>
 800f96e:	bf00      	nop

0800f970 <ucdr_deserialize_endian_float>:
 800f970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f974:	460e      	mov	r6, r1
 800f976:	2104      	movs	r1, #4
 800f978:	4604      	mov	r4, r0
 800f97a:	4615      	mov	r5, r2
 800f97c:	f000 fc24 	bl	80101c8 <ucdr_buffer_alignment>
 800f980:	4601      	mov	r1, r0
 800f982:	4620      	mov	r0, r4
 800f984:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f988:	f000 fc62 	bl	8010250 <ucdr_advance_buffer>
 800f98c:	2104      	movs	r1, #4
 800f98e:	4620      	mov	r0, r4
 800f990:	f000 fbba 	bl	8010108 <ucdr_check_buffer_available_for>
 800f994:	2800      	cmp	r0, #0
 800f996:	d13c      	bne.n	800fa12 <ucdr_deserialize_endian_float+0xa2>
 800f998:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f99c:	42bb      	cmp	r3, r7
 800f99e:	d933      	bls.n	800fa08 <ucdr_deserialize_endian_float+0x98>
 800f9a0:	eba3 0807 	sub.w	r8, r3, r7
 800f9a4:	60a3      	str	r3, [r4, #8]
 800f9a6:	6923      	ldr	r3, [r4, #16]
 800f9a8:	f1c8 0a04 	rsb	sl, r8, #4
 800f9ac:	4443      	add	r3, r8
 800f9ae:	6123      	str	r3, [r4, #16]
 800f9b0:	4651      	mov	r1, sl
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 fbb4 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d048      	beq.n	800fa4e <ucdr_deserialize_endian_float+0xde>
 800f9bc:	2e01      	cmp	r6, #1
 800f9be:	d061      	beq.n	800fa84 <ucdr_deserialize_endian_float+0x114>
 800f9c0:	78fb      	ldrb	r3, [r7, #3]
 800f9c2:	702b      	strb	r3, [r5, #0]
 800f9c4:	f1b8 0f00 	cmp.w	r8, #0
 800f9c8:	d050      	beq.n	800fa6c <ucdr_deserialize_endian_float+0xfc>
 800f9ca:	78bb      	ldrb	r3, [r7, #2]
 800f9cc:	706b      	strb	r3, [r5, #1]
 800f9ce:	f1b8 0f01 	cmp.w	r8, #1
 800f9d2:	f105 0302 	add.w	r3, r5, #2
 800f9d6:	d04d      	beq.n	800fa74 <ucdr_deserialize_endian_float+0x104>
 800f9d8:	787b      	ldrb	r3, [r7, #1]
 800f9da:	70ab      	strb	r3, [r5, #2]
 800f9dc:	f1b8 0f02 	cmp.w	r8, #2
 800f9e0:	f105 0303 	add.w	r3, r5, #3
 800f9e4:	d04a      	beq.n	800fa7c <ucdr_deserialize_endian_float+0x10c>
 800f9e6:	783b      	ldrb	r3, [r7, #0]
 800f9e8:	70eb      	strb	r3, [r5, #3]
 800f9ea:	6923      	ldr	r3, [r4, #16]
 800f9ec:	68a2      	ldr	r2, [r4, #8]
 800f9ee:	7da0      	ldrb	r0, [r4, #22]
 800f9f0:	2104      	movs	r1, #4
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	4452      	add	r2, sl
 800f9f6:	eba3 0308 	sub.w	r3, r3, r8
 800f9fa:	7561      	strb	r1, [r4, #21]
 800f9fc:	60a2      	str	r2, [r4, #8]
 800f9fe:	6123      	str	r3, [r4, #16]
 800fa00:	f080 0001 	eor.w	r0, r0, #1
 800fa04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa08:	2104      	movs	r1, #4
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f000 fb88 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800fa10:	b1a8      	cbz	r0, 800fa3e <ucdr_deserialize_endian_float+0xce>
 800fa12:	2e01      	cmp	r6, #1
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	d017      	beq.n	800fa48 <ucdr_deserialize_endian_float+0xd8>
 800fa18:	78db      	ldrb	r3, [r3, #3]
 800fa1a:	702b      	strb	r3, [r5, #0]
 800fa1c:	68a3      	ldr	r3, [r4, #8]
 800fa1e:	789b      	ldrb	r3, [r3, #2]
 800fa20:	706b      	strb	r3, [r5, #1]
 800fa22:	68a3      	ldr	r3, [r4, #8]
 800fa24:	785b      	ldrb	r3, [r3, #1]
 800fa26:	70ab      	strb	r3, [r5, #2]
 800fa28:	68a3      	ldr	r3, [r4, #8]
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	70eb      	strb	r3, [r5, #3]
 800fa2e:	68a2      	ldr	r2, [r4, #8]
 800fa30:	6923      	ldr	r3, [r4, #16]
 800fa32:	3204      	adds	r2, #4
 800fa34:	3304      	adds	r3, #4
 800fa36:	2104      	movs	r1, #4
 800fa38:	60a2      	str	r2, [r4, #8]
 800fa3a:	6123      	str	r3, [r4, #16]
 800fa3c:	7561      	strb	r1, [r4, #21]
 800fa3e:	7da0      	ldrb	r0, [r4, #22]
 800fa40:	f080 0001 	eor.w	r0, r0, #1
 800fa44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	602b      	str	r3, [r5, #0]
 800fa4c:	e7ef      	b.n	800fa2e <ucdr_deserialize_endian_float+0xbe>
 800fa4e:	68a2      	ldr	r2, [r4, #8]
 800fa50:	6923      	ldr	r3, [r4, #16]
 800fa52:	7da0      	ldrb	r0, [r4, #22]
 800fa54:	f884 9015 	strb.w	r9, [r4, #21]
 800fa58:	eba2 0208 	sub.w	r2, r2, r8
 800fa5c:	eba3 0308 	sub.w	r3, r3, r8
 800fa60:	60a2      	str	r2, [r4, #8]
 800fa62:	6123      	str	r3, [r4, #16]
 800fa64:	f080 0001 	eor.w	r0, r0, #1
 800fa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa6c:	68a3      	ldr	r3, [r4, #8]
 800fa6e:	789b      	ldrb	r3, [r3, #2]
 800fa70:	706b      	strb	r3, [r5, #1]
 800fa72:	1cab      	adds	r3, r5, #2
 800fa74:	68a2      	ldr	r2, [r4, #8]
 800fa76:	7852      	ldrb	r2, [r2, #1]
 800fa78:	f803 2b01 	strb.w	r2, [r3], #1
 800fa7c:	68a2      	ldr	r2, [r4, #8]
 800fa7e:	7812      	ldrb	r2, [r2, #0]
 800fa80:	701a      	strb	r2, [r3, #0]
 800fa82:	e7b2      	b.n	800f9ea <ucdr_deserialize_endian_float+0x7a>
 800fa84:	4639      	mov	r1, r7
 800fa86:	4642      	mov	r2, r8
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f00b fb5e 	bl	801b14a <memcpy>
 800fa8e:	68a1      	ldr	r1, [r4, #8]
 800fa90:	4652      	mov	r2, sl
 800fa92:	eb05 0008 	add.w	r0, r5, r8
 800fa96:	f00b fb58 	bl	801b14a <memcpy>
 800fa9a:	e7a6      	b.n	800f9ea <ucdr_deserialize_endian_float+0x7a>

0800fa9c <ucdr_serialize_double>:
 800fa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa0:	2108      	movs	r1, #8
 800faa2:	b082      	sub	sp, #8
 800faa4:	4604      	mov	r4, r0
 800faa6:	ed8d 0b00 	vstr	d0, [sp]
 800faaa:	f000 fb8d 	bl	80101c8 <ucdr_buffer_alignment>
 800faae:	4601      	mov	r1, r0
 800fab0:	4620      	mov	r0, r4
 800fab2:	7d67      	ldrb	r7, [r4, #21]
 800fab4:	f000 fbcc 	bl	8010250 <ucdr_advance_buffer>
 800fab8:	2108      	movs	r1, #8
 800faba:	4620      	mov	r0, r4
 800fabc:	f000 fb24 	bl	8010108 <ucdr_check_buffer_available_for>
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d14e      	bne.n	800fb62 <ucdr_serialize_double+0xc6>
 800fac4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fac8:	42ab      	cmp	r3, r5
 800faca:	d945      	bls.n	800fb58 <ucdr_serialize_double+0xbc>
 800facc:	1b5e      	subs	r6, r3, r5
 800face:	60a3      	str	r3, [r4, #8]
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	f1c6 0808 	rsb	r8, r6, #8
 800fad6:	4433      	add	r3, r6
 800fad8:	6123      	str	r3, [r4, #16]
 800fada:	4641      	mov	r1, r8
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 fb1f 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d074      	beq.n	800fbd0 <ucdr_serialize_double+0x134>
 800fae6:	7d23      	ldrb	r3, [r4, #20]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	f000 809b 	beq.w	800fc24 <ucdr_serialize_double+0x188>
 800faee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800faf2:	702b      	strb	r3, [r5, #0]
 800faf4:	2e00      	cmp	r6, #0
 800faf6:	d078      	beq.n	800fbea <ucdr_serialize_double+0x14e>
 800faf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fafc:	706b      	strb	r3, [r5, #1]
 800fafe:	2e01      	cmp	r6, #1
 800fb00:	d077      	beq.n	800fbf2 <ucdr_serialize_double+0x156>
 800fb02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fb06:	70ab      	strb	r3, [r5, #2]
 800fb08:	2e02      	cmp	r6, #2
 800fb0a:	d076      	beq.n	800fbfa <ucdr_serialize_double+0x15e>
 800fb0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fb10:	70eb      	strb	r3, [r5, #3]
 800fb12:	2e03      	cmp	r6, #3
 800fb14:	d075      	beq.n	800fc02 <ucdr_serialize_double+0x166>
 800fb16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fb1a:	712b      	strb	r3, [r5, #4]
 800fb1c:	2e04      	cmp	r6, #4
 800fb1e:	d074      	beq.n	800fc0a <ucdr_serialize_double+0x16e>
 800fb20:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fb24:	716b      	strb	r3, [r5, #5]
 800fb26:	2e05      	cmp	r6, #5
 800fb28:	d073      	beq.n	800fc12 <ucdr_serialize_double+0x176>
 800fb2a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fb2e:	71ab      	strb	r3, [r5, #6]
 800fb30:	2e06      	cmp	r6, #6
 800fb32:	d072      	beq.n	800fc1a <ucdr_serialize_double+0x17e>
 800fb34:	f89d 3000 	ldrb.w	r3, [sp]
 800fb38:	71eb      	strb	r3, [r5, #7]
 800fb3a:	6923      	ldr	r3, [r4, #16]
 800fb3c:	68a2      	ldr	r2, [r4, #8]
 800fb3e:	7da0      	ldrb	r0, [r4, #22]
 800fb40:	3308      	adds	r3, #8
 800fb42:	1b9e      	subs	r6, r3, r6
 800fb44:	4442      	add	r2, r8
 800fb46:	2308      	movs	r3, #8
 800fb48:	f080 0001 	eor.w	r0, r0, #1
 800fb4c:	60a2      	str	r2, [r4, #8]
 800fb4e:	6126      	str	r6, [r4, #16]
 800fb50:	7563      	strb	r3, [r4, #21]
 800fb52:	b002      	add	sp, #8
 800fb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb58:	2108      	movs	r1, #8
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f000 fae0 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800fb60:	b350      	cbz	r0, 800fbb8 <ucdr_serialize_double+0x11c>
 800fb62:	7d23      	ldrb	r3, [r4, #20]
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d02d      	beq.n	800fbc4 <ucdr_serialize_double+0x128>
 800fb68:	68a3      	ldr	r3, [r4, #8]
 800fb6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb6e:	701a      	strb	r2, [r3, #0]
 800fb70:	68a3      	ldr	r3, [r4, #8]
 800fb72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb76:	705a      	strb	r2, [r3, #1]
 800fb78:	68a3      	ldr	r3, [r4, #8]
 800fb7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb7e:	709a      	strb	r2, [r3, #2]
 800fb80:	68a3      	ldr	r3, [r4, #8]
 800fb82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb86:	70da      	strb	r2, [r3, #3]
 800fb88:	68a3      	ldr	r3, [r4, #8]
 800fb8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb8e:	711a      	strb	r2, [r3, #4]
 800fb90:	68a3      	ldr	r3, [r4, #8]
 800fb92:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb96:	715a      	strb	r2, [r3, #5]
 800fb98:	68a3      	ldr	r3, [r4, #8]
 800fb9a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb9e:	719a      	strb	r2, [r3, #6]
 800fba0:	68a3      	ldr	r3, [r4, #8]
 800fba2:	f89d 2000 	ldrb.w	r2, [sp]
 800fba6:	71da      	strb	r2, [r3, #7]
 800fba8:	68a2      	ldr	r2, [r4, #8]
 800fbaa:	6923      	ldr	r3, [r4, #16]
 800fbac:	3208      	adds	r2, #8
 800fbae:	3308      	adds	r3, #8
 800fbb0:	2108      	movs	r1, #8
 800fbb2:	60a2      	str	r2, [r4, #8]
 800fbb4:	6123      	str	r3, [r4, #16]
 800fbb6:	7561      	strb	r1, [r4, #21]
 800fbb8:	7da0      	ldrb	r0, [r4, #22]
 800fbba:	f080 0001 	eor.w	r0, r0, #1
 800fbbe:	b002      	add	sp, #8
 800fbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc4:	466b      	mov	r3, sp
 800fbc6:	cb03      	ldmia	r3!, {r0, r1}
 800fbc8:	68a3      	ldr	r3, [r4, #8]
 800fbca:	6018      	str	r0, [r3, #0]
 800fbcc:	6059      	str	r1, [r3, #4]
 800fbce:	e7eb      	b.n	800fba8 <ucdr_serialize_double+0x10c>
 800fbd0:	68a2      	ldr	r2, [r4, #8]
 800fbd2:	6923      	ldr	r3, [r4, #16]
 800fbd4:	7da0      	ldrb	r0, [r4, #22]
 800fbd6:	7567      	strb	r7, [r4, #21]
 800fbd8:	1b92      	subs	r2, r2, r6
 800fbda:	1b9b      	subs	r3, r3, r6
 800fbdc:	f080 0001 	eor.w	r0, r0, #1
 800fbe0:	60a2      	str	r2, [r4, #8]
 800fbe2:	6123      	str	r3, [r4, #16]
 800fbe4:	b002      	add	sp, #8
 800fbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbea:	68a3      	ldr	r3, [r4, #8]
 800fbec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbf0:	701a      	strb	r2, [r3, #0]
 800fbf2:	68a3      	ldr	r3, [r4, #8]
 800fbf4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fbf8:	701a      	strb	r2, [r3, #0]
 800fbfa:	68a3      	ldr	r3, [r4, #8]
 800fbfc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc00:	701a      	strb	r2, [r3, #0]
 800fc02:	68a3      	ldr	r3, [r4, #8]
 800fc04:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fc08:	701a      	strb	r2, [r3, #0]
 800fc0a:	68a3      	ldr	r3, [r4, #8]
 800fc0c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fc10:	701a      	strb	r2, [r3, #0]
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fc18:	701a      	strb	r2, [r3, #0]
 800fc1a:	68a3      	ldr	r3, [r4, #8]
 800fc1c:	f89d 2000 	ldrb.w	r2, [sp]
 800fc20:	701a      	strb	r2, [r3, #0]
 800fc22:	e78a      	b.n	800fb3a <ucdr_serialize_double+0x9e>
 800fc24:	4628      	mov	r0, r5
 800fc26:	466d      	mov	r5, sp
 800fc28:	4629      	mov	r1, r5
 800fc2a:	4632      	mov	r2, r6
 800fc2c:	f00b fa8d 	bl	801b14a <memcpy>
 800fc30:	68a0      	ldr	r0, [r4, #8]
 800fc32:	4642      	mov	r2, r8
 800fc34:	19a9      	adds	r1, r5, r6
 800fc36:	f00b fa88 	bl	801b14a <memcpy>
 800fc3a:	e77e      	b.n	800fb3a <ucdr_serialize_double+0x9e>

0800fc3c <ucdr_serialize_endian_double>:
 800fc3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc40:	460e      	mov	r6, r1
 800fc42:	b083      	sub	sp, #12
 800fc44:	2108      	movs	r1, #8
 800fc46:	4604      	mov	r4, r0
 800fc48:	ed8d 0b00 	vstr	d0, [sp]
 800fc4c:	f000 fabc 	bl	80101c8 <ucdr_buffer_alignment>
 800fc50:	4601      	mov	r1, r0
 800fc52:	4620      	mov	r0, r4
 800fc54:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc58:	f000 fafa 	bl	8010250 <ucdr_advance_buffer>
 800fc5c:	2108      	movs	r1, #8
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f000 fa52 	bl	8010108 <ucdr_check_buffer_available_for>
 800fc64:	2800      	cmp	r0, #0
 800fc66:	d14d      	bne.n	800fd04 <ucdr_serialize_endian_double+0xc8>
 800fc68:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800fc6c:	42bd      	cmp	r5, r7
 800fc6e:	d944      	bls.n	800fcfa <ucdr_serialize_endian_double+0xbe>
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	60a5      	str	r5, [r4, #8]
 800fc74:	1bed      	subs	r5, r5, r7
 800fc76:	442b      	add	r3, r5
 800fc78:	f1c5 0908 	rsb	r9, r5, #8
 800fc7c:	6123      	str	r3, [r4, #16]
 800fc7e:	4649      	mov	r1, r9
 800fc80:	4620      	mov	r0, r4
 800fc82:	f000 fa4d 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d072      	beq.n	800fd70 <ucdr_serialize_endian_double+0x134>
 800fc8a:	2e01      	cmp	r6, #1
 800fc8c:	f000 809b 	beq.w	800fdc6 <ucdr_serialize_endian_double+0x18a>
 800fc90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc94:	703b      	strb	r3, [r7, #0]
 800fc96:	2d00      	cmp	r5, #0
 800fc98:	d078      	beq.n	800fd8c <ucdr_serialize_endian_double+0x150>
 800fc9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc9e:	707b      	strb	r3, [r7, #1]
 800fca0:	2d01      	cmp	r5, #1
 800fca2:	d077      	beq.n	800fd94 <ucdr_serialize_endian_double+0x158>
 800fca4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fca8:	70bb      	strb	r3, [r7, #2]
 800fcaa:	2d02      	cmp	r5, #2
 800fcac:	d076      	beq.n	800fd9c <ucdr_serialize_endian_double+0x160>
 800fcae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcb2:	70fb      	strb	r3, [r7, #3]
 800fcb4:	2d03      	cmp	r5, #3
 800fcb6:	d075      	beq.n	800fda4 <ucdr_serialize_endian_double+0x168>
 800fcb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fcbc:	713b      	strb	r3, [r7, #4]
 800fcbe:	2d04      	cmp	r5, #4
 800fcc0:	d074      	beq.n	800fdac <ucdr_serialize_endian_double+0x170>
 800fcc2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fcc6:	717b      	strb	r3, [r7, #5]
 800fcc8:	2d05      	cmp	r5, #5
 800fcca:	d073      	beq.n	800fdb4 <ucdr_serialize_endian_double+0x178>
 800fccc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fcd0:	71bb      	strb	r3, [r7, #6]
 800fcd2:	2d06      	cmp	r5, #6
 800fcd4:	d072      	beq.n	800fdbc <ucdr_serialize_endian_double+0x180>
 800fcd6:	f89d 3000 	ldrb.w	r3, [sp]
 800fcda:	71fb      	strb	r3, [r7, #7]
 800fcdc:	6923      	ldr	r3, [r4, #16]
 800fcde:	68a2      	ldr	r2, [r4, #8]
 800fce0:	7da0      	ldrb	r0, [r4, #22]
 800fce2:	3308      	adds	r3, #8
 800fce4:	1b5d      	subs	r5, r3, r5
 800fce6:	444a      	add	r2, r9
 800fce8:	2308      	movs	r3, #8
 800fcea:	f080 0001 	eor.w	r0, r0, #1
 800fcee:	60a2      	str	r2, [r4, #8]
 800fcf0:	6125      	str	r5, [r4, #16]
 800fcf2:	7563      	strb	r3, [r4, #21]
 800fcf4:	b003      	add	sp, #12
 800fcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcfa:	2108      	movs	r1, #8
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f000 fa0f 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800fd02:	b348      	cbz	r0, 800fd58 <ucdr_serialize_endian_double+0x11c>
 800fd04:	2e01      	cmp	r6, #1
 800fd06:	d02d      	beq.n	800fd64 <ucdr_serialize_endian_double+0x128>
 800fd08:	68a3      	ldr	r3, [r4, #8]
 800fd0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fd0e:	701a      	strb	r2, [r3, #0]
 800fd10:	68a3      	ldr	r3, [r4, #8]
 800fd12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd16:	705a      	strb	r2, [r3, #1]
 800fd18:	68a3      	ldr	r3, [r4, #8]
 800fd1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd1e:	709a      	strb	r2, [r3, #2]
 800fd20:	68a3      	ldr	r3, [r4, #8]
 800fd22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd26:	70da      	strb	r2, [r3, #3]
 800fd28:	68a3      	ldr	r3, [r4, #8]
 800fd2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fd2e:	711a      	strb	r2, [r3, #4]
 800fd30:	68a3      	ldr	r3, [r4, #8]
 800fd32:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fd36:	715a      	strb	r2, [r3, #5]
 800fd38:	68a3      	ldr	r3, [r4, #8]
 800fd3a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fd3e:	719a      	strb	r2, [r3, #6]
 800fd40:	68a3      	ldr	r3, [r4, #8]
 800fd42:	f89d 2000 	ldrb.w	r2, [sp]
 800fd46:	71da      	strb	r2, [r3, #7]
 800fd48:	68a2      	ldr	r2, [r4, #8]
 800fd4a:	6923      	ldr	r3, [r4, #16]
 800fd4c:	3208      	adds	r2, #8
 800fd4e:	3308      	adds	r3, #8
 800fd50:	2108      	movs	r1, #8
 800fd52:	60a2      	str	r2, [r4, #8]
 800fd54:	6123      	str	r3, [r4, #16]
 800fd56:	7561      	strb	r1, [r4, #21]
 800fd58:	7da0      	ldrb	r0, [r4, #22]
 800fd5a:	f080 0001 	eor.w	r0, r0, #1
 800fd5e:	b003      	add	sp, #12
 800fd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd64:	466b      	mov	r3, sp
 800fd66:	cb03      	ldmia	r3!, {r0, r1}
 800fd68:	68a3      	ldr	r3, [r4, #8]
 800fd6a:	6018      	str	r0, [r3, #0]
 800fd6c:	6059      	str	r1, [r3, #4]
 800fd6e:	e7eb      	b.n	800fd48 <ucdr_serialize_endian_double+0x10c>
 800fd70:	68a2      	ldr	r2, [r4, #8]
 800fd72:	6923      	ldr	r3, [r4, #16]
 800fd74:	7da0      	ldrb	r0, [r4, #22]
 800fd76:	f884 8015 	strb.w	r8, [r4, #21]
 800fd7a:	1b52      	subs	r2, r2, r5
 800fd7c:	1b5b      	subs	r3, r3, r5
 800fd7e:	f080 0001 	eor.w	r0, r0, #1
 800fd82:	60a2      	str	r2, [r4, #8]
 800fd84:	6123      	str	r3, [r4, #16]
 800fd86:	b003      	add	sp, #12
 800fd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd8c:	68a3      	ldr	r3, [r4, #8]
 800fd8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd92:	701a      	strb	r2, [r3, #0]
 800fd94:	68a3      	ldr	r3, [r4, #8]
 800fd96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd9a:	701a      	strb	r2, [r3, #0]
 800fd9c:	68a3      	ldr	r3, [r4, #8]
 800fd9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fda2:	701a      	strb	r2, [r3, #0]
 800fda4:	68a3      	ldr	r3, [r4, #8]
 800fda6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fdaa:	701a      	strb	r2, [r3, #0]
 800fdac:	68a3      	ldr	r3, [r4, #8]
 800fdae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fdb2:	701a      	strb	r2, [r3, #0]
 800fdb4:	68a3      	ldr	r3, [r4, #8]
 800fdb6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fdba:	701a      	strb	r2, [r3, #0]
 800fdbc:	68a3      	ldr	r3, [r4, #8]
 800fdbe:	f89d 2000 	ldrb.w	r2, [sp]
 800fdc2:	701a      	strb	r2, [r3, #0]
 800fdc4:	e78a      	b.n	800fcdc <ucdr_serialize_endian_double+0xa0>
 800fdc6:	466e      	mov	r6, sp
 800fdc8:	4631      	mov	r1, r6
 800fdca:	462a      	mov	r2, r5
 800fdcc:	4638      	mov	r0, r7
 800fdce:	f00b f9bc 	bl	801b14a <memcpy>
 800fdd2:	68a0      	ldr	r0, [r4, #8]
 800fdd4:	464a      	mov	r2, r9
 800fdd6:	1971      	adds	r1, r6, r5
 800fdd8:	f00b f9b7 	bl	801b14a <memcpy>
 800fddc:	e77e      	b.n	800fcdc <ucdr_serialize_endian_double+0xa0>
 800fdde:	bf00      	nop

0800fde0 <ucdr_deserialize_double>:
 800fde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fde4:	460d      	mov	r5, r1
 800fde6:	2108      	movs	r1, #8
 800fde8:	4604      	mov	r4, r0
 800fdea:	f000 f9ed 	bl	80101c8 <ucdr_buffer_alignment>
 800fdee:	4601      	mov	r1, r0
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fdf6:	f000 fa2b 	bl	8010250 <ucdr_advance_buffer>
 800fdfa:	2108      	movs	r1, #8
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f000 f983 	bl	8010108 <ucdr_check_buffer_available_for>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d151      	bne.n	800feaa <ucdr_deserialize_double+0xca>
 800fe06:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fe0a:	42be      	cmp	r6, r7
 800fe0c:	d948      	bls.n	800fea0 <ucdr_deserialize_double+0xc0>
 800fe0e:	6923      	ldr	r3, [r4, #16]
 800fe10:	60a6      	str	r6, [r4, #8]
 800fe12:	1bf6      	subs	r6, r6, r7
 800fe14:	4433      	add	r3, r6
 800fe16:	f1c6 0808 	rsb	r8, r6, #8
 800fe1a:	6123      	str	r3, [r4, #16]
 800fe1c:	4641      	mov	r1, r8
 800fe1e:	4620      	mov	r0, r4
 800fe20:	f000 f97e 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d06d      	beq.n	800ff04 <ucdr_deserialize_double+0x124>
 800fe28:	7d23      	ldrb	r3, [r4, #20]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	f000 8093 	beq.w	800ff56 <ucdr_deserialize_double+0x176>
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	702b      	strb	r3, [r5, #0]
 800fe34:	2e00      	cmp	r6, #0
 800fe36:	d072      	beq.n	800ff1e <ucdr_deserialize_double+0x13e>
 800fe38:	79bb      	ldrb	r3, [r7, #6]
 800fe3a:	706b      	strb	r3, [r5, #1]
 800fe3c:	2e01      	cmp	r6, #1
 800fe3e:	f105 0302 	add.w	r3, r5, #2
 800fe42:	d070      	beq.n	800ff26 <ucdr_deserialize_double+0x146>
 800fe44:	797b      	ldrb	r3, [r7, #5]
 800fe46:	70ab      	strb	r3, [r5, #2]
 800fe48:	2e02      	cmp	r6, #2
 800fe4a:	f105 0303 	add.w	r3, r5, #3
 800fe4e:	d06e      	beq.n	800ff2e <ucdr_deserialize_double+0x14e>
 800fe50:	793b      	ldrb	r3, [r7, #4]
 800fe52:	70eb      	strb	r3, [r5, #3]
 800fe54:	2e03      	cmp	r6, #3
 800fe56:	f105 0304 	add.w	r3, r5, #4
 800fe5a:	d06c      	beq.n	800ff36 <ucdr_deserialize_double+0x156>
 800fe5c:	78fb      	ldrb	r3, [r7, #3]
 800fe5e:	712b      	strb	r3, [r5, #4]
 800fe60:	2e04      	cmp	r6, #4
 800fe62:	f105 0305 	add.w	r3, r5, #5
 800fe66:	d06a      	beq.n	800ff3e <ucdr_deserialize_double+0x15e>
 800fe68:	78bb      	ldrb	r3, [r7, #2]
 800fe6a:	716b      	strb	r3, [r5, #5]
 800fe6c:	2e05      	cmp	r6, #5
 800fe6e:	f105 0306 	add.w	r3, r5, #6
 800fe72:	d068      	beq.n	800ff46 <ucdr_deserialize_double+0x166>
 800fe74:	787b      	ldrb	r3, [r7, #1]
 800fe76:	71ab      	strb	r3, [r5, #6]
 800fe78:	2e06      	cmp	r6, #6
 800fe7a:	f105 0307 	add.w	r3, r5, #7
 800fe7e:	d066      	beq.n	800ff4e <ucdr_deserialize_double+0x16e>
 800fe80:	783b      	ldrb	r3, [r7, #0]
 800fe82:	71eb      	strb	r3, [r5, #7]
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	68a2      	ldr	r2, [r4, #8]
 800fe88:	7da0      	ldrb	r0, [r4, #22]
 800fe8a:	3308      	adds	r3, #8
 800fe8c:	1b9e      	subs	r6, r3, r6
 800fe8e:	2308      	movs	r3, #8
 800fe90:	4442      	add	r2, r8
 800fe92:	7563      	strb	r3, [r4, #21]
 800fe94:	60a2      	str	r2, [r4, #8]
 800fe96:	6126      	str	r6, [r4, #16]
 800fe98:	f080 0001 	eor.w	r0, r0, #1
 800fe9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fea0:	2108      	movs	r1, #8
 800fea2:	4620      	mov	r0, r4
 800fea4:	f000 f93c 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800fea8:	b310      	cbz	r0, 800fef0 <ucdr_deserialize_double+0x110>
 800feaa:	7d23      	ldrb	r3, [r4, #20]
 800feac:	2b01      	cmp	r3, #1
 800feae:	68a3      	ldr	r3, [r4, #8]
 800feb0:	d023      	beq.n	800fefa <ucdr_deserialize_double+0x11a>
 800feb2:	79db      	ldrb	r3, [r3, #7]
 800feb4:	702b      	strb	r3, [r5, #0]
 800feb6:	68a3      	ldr	r3, [r4, #8]
 800feb8:	799b      	ldrb	r3, [r3, #6]
 800feba:	706b      	strb	r3, [r5, #1]
 800febc:	68a3      	ldr	r3, [r4, #8]
 800febe:	795b      	ldrb	r3, [r3, #5]
 800fec0:	70ab      	strb	r3, [r5, #2]
 800fec2:	68a3      	ldr	r3, [r4, #8]
 800fec4:	791b      	ldrb	r3, [r3, #4]
 800fec6:	70eb      	strb	r3, [r5, #3]
 800fec8:	68a3      	ldr	r3, [r4, #8]
 800feca:	78db      	ldrb	r3, [r3, #3]
 800fecc:	712b      	strb	r3, [r5, #4]
 800fece:	68a3      	ldr	r3, [r4, #8]
 800fed0:	789b      	ldrb	r3, [r3, #2]
 800fed2:	716b      	strb	r3, [r5, #5]
 800fed4:	68a3      	ldr	r3, [r4, #8]
 800fed6:	785b      	ldrb	r3, [r3, #1]
 800fed8:	71ab      	strb	r3, [r5, #6]
 800feda:	68a3      	ldr	r3, [r4, #8]
 800fedc:	781b      	ldrb	r3, [r3, #0]
 800fede:	71eb      	strb	r3, [r5, #7]
 800fee0:	68a2      	ldr	r2, [r4, #8]
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	3208      	adds	r2, #8
 800fee6:	3308      	adds	r3, #8
 800fee8:	2108      	movs	r1, #8
 800feea:	60a2      	str	r2, [r4, #8]
 800feec:	6123      	str	r3, [r4, #16]
 800feee:	7561      	strb	r1, [r4, #21]
 800fef0:	7da0      	ldrb	r0, [r4, #22]
 800fef2:	f080 0001 	eor.w	r0, r0, #1
 800fef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fefa:	681a      	ldr	r2, [r3, #0]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	606b      	str	r3, [r5, #4]
 800ff00:	602a      	str	r2, [r5, #0]
 800ff02:	e7ed      	b.n	800fee0 <ucdr_deserialize_double+0x100>
 800ff04:	68a2      	ldr	r2, [r4, #8]
 800ff06:	6923      	ldr	r3, [r4, #16]
 800ff08:	7da0      	ldrb	r0, [r4, #22]
 800ff0a:	f884 9015 	strb.w	r9, [r4, #21]
 800ff0e:	1b92      	subs	r2, r2, r6
 800ff10:	1b9b      	subs	r3, r3, r6
 800ff12:	60a2      	str	r2, [r4, #8]
 800ff14:	6123      	str	r3, [r4, #16]
 800ff16:	f080 0001 	eor.w	r0, r0, #1
 800ff1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff1e:	68a3      	ldr	r3, [r4, #8]
 800ff20:	799b      	ldrb	r3, [r3, #6]
 800ff22:	706b      	strb	r3, [r5, #1]
 800ff24:	1cab      	adds	r3, r5, #2
 800ff26:	68a2      	ldr	r2, [r4, #8]
 800ff28:	7952      	ldrb	r2, [r2, #5]
 800ff2a:	f803 2b01 	strb.w	r2, [r3], #1
 800ff2e:	68a2      	ldr	r2, [r4, #8]
 800ff30:	7912      	ldrb	r2, [r2, #4]
 800ff32:	f803 2b01 	strb.w	r2, [r3], #1
 800ff36:	68a2      	ldr	r2, [r4, #8]
 800ff38:	78d2      	ldrb	r2, [r2, #3]
 800ff3a:	f803 2b01 	strb.w	r2, [r3], #1
 800ff3e:	68a2      	ldr	r2, [r4, #8]
 800ff40:	7892      	ldrb	r2, [r2, #2]
 800ff42:	f803 2b01 	strb.w	r2, [r3], #1
 800ff46:	68a2      	ldr	r2, [r4, #8]
 800ff48:	7852      	ldrb	r2, [r2, #1]
 800ff4a:	f803 2b01 	strb.w	r2, [r3], #1
 800ff4e:	68a2      	ldr	r2, [r4, #8]
 800ff50:	7812      	ldrb	r2, [r2, #0]
 800ff52:	701a      	strb	r2, [r3, #0]
 800ff54:	e796      	b.n	800fe84 <ucdr_deserialize_double+0xa4>
 800ff56:	4639      	mov	r1, r7
 800ff58:	4632      	mov	r2, r6
 800ff5a:	4628      	mov	r0, r5
 800ff5c:	f00b f8f5 	bl	801b14a <memcpy>
 800ff60:	68a1      	ldr	r1, [r4, #8]
 800ff62:	4642      	mov	r2, r8
 800ff64:	19a8      	adds	r0, r5, r6
 800ff66:	f00b f8f0 	bl	801b14a <memcpy>
 800ff6a:	e78b      	b.n	800fe84 <ucdr_deserialize_double+0xa4>

0800ff6c <ucdr_deserialize_endian_double>:
 800ff6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff70:	460f      	mov	r7, r1
 800ff72:	2108      	movs	r1, #8
 800ff74:	4604      	mov	r4, r0
 800ff76:	4615      	mov	r5, r2
 800ff78:	f000 f926 	bl	80101c8 <ucdr_buffer_alignment>
 800ff7c:	4601      	mov	r1, r0
 800ff7e:	4620      	mov	r0, r4
 800ff80:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ff84:	f000 f964 	bl	8010250 <ucdr_advance_buffer>
 800ff88:	2108      	movs	r1, #8
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f000 f8bc 	bl	8010108 <ucdr_check_buffer_available_for>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d159      	bne.n	8010048 <ucdr_deserialize_endian_double+0xdc>
 800ff94:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800ff98:	4546      	cmp	r6, r8
 800ff9a:	d950      	bls.n	801003e <ucdr_deserialize_endian_double+0xd2>
 800ff9c:	6923      	ldr	r3, [r4, #16]
 800ff9e:	60a6      	str	r6, [r4, #8]
 800ffa0:	eba6 0608 	sub.w	r6, r6, r8
 800ffa4:	4433      	add	r3, r6
 800ffa6:	f1c6 0a08 	rsb	sl, r6, #8
 800ffaa:	6123      	str	r3, [r4, #16]
 800ffac:	4651      	mov	r1, sl
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 f8b6 	bl	8010120 <ucdr_check_final_buffer_behavior>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d073      	beq.n	80100a0 <ucdr_deserialize_endian_double+0x134>
 800ffb8:	2f01      	cmp	r7, #1
 800ffba:	f000 809a 	beq.w	80100f2 <ucdr_deserialize_endian_double+0x186>
 800ffbe:	f898 3007 	ldrb.w	r3, [r8, #7]
 800ffc2:	702b      	strb	r3, [r5, #0]
 800ffc4:	2e00      	cmp	r6, #0
 800ffc6:	d078      	beq.n	80100ba <ucdr_deserialize_endian_double+0x14e>
 800ffc8:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ffcc:	706b      	strb	r3, [r5, #1]
 800ffce:	2e01      	cmp	r6, #1
 800ffd0:	f105 0302 	add.w	r3, r5, #2
 800ffd4:	d075      	beq.n	80100c2 <ucdr_deserialize_endian_double+0x156>
 800ffd6:	f898 3005 	ldrb.w	r3, [r8, #5]
 800ffda:	70ab      	strb	r3, [r5, #2]
 800ffdc:	2e02      	cmp	r6, #2
 800ffde:	f105 0303 	add.w	r3, r5, #3
 800ffe2:	d072      	beq.n	80100ca <ucdr_deserialize_endian_double+0x15e>
 800ffe4:	f898 3004 	ldrb.w	r3, [r8, #4]
 800ffe8:	70eb      	strb	r3, [r5, #3]
 800ffea:	2e03      	cmp	r6, #3
 800ffec:	f105 0304 	add.w	r3, r5, #4
 800fff0:	d06f      	beq.n	80100d2 <ucdr_deserialize_endian_double+0x166>
 800fff2:	f898 3003 	ldrb.w	r3, [r8, #3]
 800fff6:	712b      	strb	r3, [r5, #4]
 800fff8:	2e04      	cmp	r6, #4
 800fffa:	f105 0305 	add.w	r3, r5, #5
 800fffe:	d06c      	beq.n	80100da <ucdr_deserialize_endian_double+0x16e>
 8010000:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010004:	716b      	strb	r3, [r5, #5]
 8010006:	2e05      	cmp	r6, #5
 8010008:	f105 0306 	add.w	r3, r5, #6
 801000c:	d069      	beq.n	80100e2 <ucdr_deserialize_endian_double+0x176>
 801000e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010012:	71ab      	strb	r3, [r5, #6]
 8010014:	2e06      	cmp	r6, #6
 8010016:	f105 0307 	add.w	r3, r5, #7
 801001a:	d066      	beq.n	80100ea <ucdr_deserialize_endian_double+0x17e>
 801001c:	f898 3000 	ldrb.w	r3, [r8]
 8010020:	71eb      	strb	r3, [r5, #7]
 8010022:	6923      	ldr	r3, [r4, #16]
 8010024:	68a2      	ldr	r2, [r4, #8]
 8010026:	7da0      	ldrb	r0, [r4, #22]
 8010028:	3308      	adds	r3, #8
 801002a:	1b9e      	subs	r6, r3, r6
 801002c:	2308      	movs	r3, #8
 801002e:	4452      	add	r2, sl
 8010030:	7563      	strb	r3, [r4, #21]
 8010032:	60a2      	str	r2, [r4, #8]
 8010034:	6126      	str	r6, [r4, #16]
 8010036:	f080 0001 	eor.w	r0, r0, #1
 801003a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801003e:	2108      	movs	r1, #8
 8010040:	4620      	mov	r0, r4
 8010042:	f000 f86d 	bl	8010120 <ucdr_check_final_buffer_behavior>
 8010046:	b308      	cbz	r0, 801008c <ucdr_deserialize_endian_double+0x120>
 8010048:	2f01      	cmp	r7, #1
 801004a:	68a3      	ldr	r3, [r4, #8]
 801004c:	d023      	beq.n	8010096 <ucdr_deserialize_endian_double+0x12a>
 801004e:	79db      	ldrb	r3, [r3, #7]
 8010050:	702b      	strb	r3, [r5, #0]
 8010052:	68a3      	ldr	r3, [r4, #8]
 8010054:	799b      	ldrb	r3, [r3, #6]
 8010056:	706b      	strb	r3, [r5, #1]
 8010058:	68a3      	ldr	r3, [r4, #8]
 801005a:	795b      	ldrb	r3, [r3, #5]
 801005c:	70ab      	strb	r3, [r5, #2]
 801005e:	68a3      	ldr	r3, [r4, #8]
 8010060:	791b      	ldrb	r3, [r3, #4]
 8010062:	70eb      	strb	r3, [r5, #3]
 8010064:	68a3      	ldr	r3, [r4, #8]
 8010066:	78db      	ldrb	r3, [r3, #3]
 8010068:	712b      	strb	r3, [r5, #4]
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	789b      	ldrb	r3, [r3, #2]
 801006e:	716b      	strb	r3, [r5, #5]
 8010070:	68a3      	ldr	r3, [r4, #8]
 8010072:	785b      	ldrb	r3, [r3, #1]
 8010074:	71ab      	strb	r3, [r5, #6]
 8010076:	68a3      	ldr	r3, [r4, #8]
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	71eb      	strb	r3, [r5, #7]
 801007c:	68a2      	ldr	r2, [r4, #8]
 801007e:	6923      	ldr	r3, [r4, #16]
 8010080:	3208      	adds	r2, #8
 8010082:	3308      	adds	r3, #8
 8010084:	2108      	movs	r1, #8
 8010086:	60a2      	str	r2, [r4, #8]
 8010088:	6123      	str	r3, [r4, #16]
 801008a:	7561      	strb	r1, [r4, #21]
 801008c:	7da0      	ldrb	r0, [r4, #22]
 801008e:	f080 0001 	eor.w	r0, r0, #1
 8010092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	606b      	str	r3, [r5, #4]
 801009c:	602a      	str	r2, [r5, #0]
 801009e:	e7ed      	b.n	801007c <ucdr_deserialize_endian_double+0x110>
 80100a0:	68a2      	ldr	r2, [r4, #8]
 80100a2:	6923      	ldr	r3, [r4, #16]
 80100a4:	7da0      	ldrb	r0, [r4, #22]
 80100a6:	f884 9015 	strb.w	r9, [r4, #21]
 80100aa:	1b92      	subs	r2, r2, r6
 80100ac:	1b9b      	subs	r3, r3, r6
 80100ae:	60a2      	str	r2, [r4, #8]
 80100b0:	6123      	str	r3, [r4, #16]
 80100b2:	f080 0001 	eor.w	r0, r0, #1
 80100b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ba:	68a3      	ldr	r3, [r4, #8]
 80100bc:	799b      	ldrb	r3, [r3, #6]
 80100be:	706b      	strb	r3, [r5, #1]
 80100c0:	1cab      	adds	r3, r5, #2
 80100c2:	68a2      	ldr	r2, [r4, #8]
 80100c4:	7952      	ldrb	r2, [r2, #5]
 80100c6:	f803 2b01 	strb.w	r2, [r3], #1
 80100ca:	68a2      	ldr	r2, [r4, #8]
 80100cc:	7912      	ldrb	r2, [r2, #4]
 80100ce:	f803 2b01 	strb.w	r2, [r3], #1
 80100d2:	68a2      	ldr	r2, [r4, #8]
 80100d4:	78d2      	ldrb	r2, [r2, #3]
 80100d6:	f803 2b01 	strb.w	r2, [r3], #1
 80100da:	68a2      	ldr	r2, [r4, #8]
 80100dc:	7892      	ldrb	r2, [r2, #2]
 80100de:	f803 2b01 	strb.w	r2, [r3], #1
 80100e2:	68a2      	ldr	r2, [r4, #8]
 80100e4:	7852      	ldrb	r2, [r2, #1]
 80100e6:	f803 2b01 	strb.w	r2, [r3], #1
 80100ea:	68a2      	ldr	r2, [r4, #8]
 80100ec:	7812      	ldrb	r2, [r2, #0]
 80100ee:	701a      	strb	r2, [r3, #0]
 80100f0:	e797      	b.n	8010022 <ucdr_deserialize_endian_double+0xb6>
 80100f2:	4641      	mov	r1, r8
 80100f4:	4632      	mov	r2, r6
 80100f6:	4628      	mov	r0, r5
 80100f8:	f00b f827 	bl	801b14a <memcpy>
 80100fc:	68a1      	ldr	r1, [r4, #8]
 80100fe:	4652      	mov	r2, sl
 8010100:	19a8      	adds	r0, r5, r6
 8010102:	f00b f822 	bl	801b14a <memcpy>
 8010106:	e78c      	b.n	8010022 <ucdr_deserialize_endian_double+0xb6>

08010108 <ucdr_check_buffer_available_for>:
 8010108:	7d83      	ldrb	r3, [r0, #22]
 801010a:	b93b      	cbnz	r3, 801011c <ucdr_check_buffer_available_for+0x14>
 801010c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010110:	4419      	add	r1, r3
 8010112:	4288      	cmp	r0, r1
 8010114:	bf34      	ite	cc
 8010116:	2000      	movcc	r0, #0
 8010118:	2001      	movcs	r0, #1
 801011a:	4770      	bx	lr
 801011c:	2000      	movs	r0, #0
 801011e:	4770      	bx	lr

08010120 <ucdr_check_final_buffer_behavior>:
 8010120:	7d83      	ldrb	r3, [r0, #22]
 8010122:	b943      	cbnz	r3, 8010136 <ucdr_check_final_buffer_behavior+0x16>
 8010124:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010128:	4291      	cmp	r1, r2
 801012a:	b510      	push	{r4, lr}
 801012c:	4604      	mov	r4, r0
 801012e:	d205      	bcs.n	801013c <ucdr_check_final_buffer_behavior+0x1c>
 8010130:	2301      	movs	r3, #1
 8010132:	4618      	mov	r0, r3
 8010134:	bd10      	pop	{r4, pc}
 8010136:	2300      	movs	r3, #0
 8010138:	4618      	mov	r0, r3
 801013a:	4770      	bx	lr
 801013c:	6982      	ldr	r2, [r0, #24]
 801013e:	b13a      	cbz	r2, 8010150 <ucdr_check_final_buffer_behavior+0x30>
 8010140:	69c1      	ldr	r1, [r0, #28]
 8010142:	4790      	blx	r2
 8010144:	f080 0301 	eor.w	r3, r0, #1
 8010148:	b2db      	uxtb	r3, r3
 801014a:	75a0      	strb	r0, [r4, #22]
 801014c:	4618      	mov	r0, r3
 801014e:	bd10      	pop	{r4, pc}
 8010150:	2001      	movs	r0, #1
 8010152:	75a0      	strb	r0, [r4, #22]
 8010154:	e7fa      	b.n	801014c <ucdr_check_final_buffer_behavior+0x2c>
 8010156:	bf00      	nop

08010158 <ucdr_set_on_full_buffer_callback>:
 8010158:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop

08010160 <ucdr_init_buffer_origin_offset_endian>:
 8010160:	b410      	push	{r4}
 8010162:	9c01      	ldr	r4, [sp, #4]
 8010164:	6001      	str	r1, [r0, #0]
 8010166:	440a      	add	r2, r1
 8010168:	6042      	str	r2, [r0, #4]
 801016a:	190a      	adds	r2, r1, r4
 801016c:	441c      	add	r4, r3
 801016e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010172:	6082      	str	r2, [r0, #8]
 8010174:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010178:	7503      	strb	r3, [r0, #20]
 801017a:	2200      	movs	r2, #0
 801017c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010184:	7542      	strb	r2, [r0, #21]
 8010186:	7582      	strb	r2, [r0, #22]
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop

0801018c <ucdr_init_buffer_origin_offset>:
 801018c:	b510      	push	{r4, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	9c04      	ldr	r4, [sp, #16]
 8010192:	9400      	str	r4, [sp, #0]
 8010194:	2401      	movs	r4, #1
 8010196:	9401      	str	r4, [sp, #4]
 8010198:	f7ff ffe2 	bl	8010160 <ucdr_init_buffer_origin_offset_endian>
 801019c:	b002      	add	sp, #8
 801019e:	bd10      	pop	{r4, pc}

080101a0 <ucdr_init_buffer_origin>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	2400      	movs	r4, #0
 80101a6:	9400      	str	r4, [sp, #0]
 80101a8:	f7ff fff0 	bl	801018c <ucdr_init_buffer_origin_offset>
 80101ac:	b002      	add	sp, #8
 80101ae:	bd10      	pop	{r4, pc}

080101b0 <ucdr_init_buffer>:
 80101b0:	2300      	movs	r3, #0
 80101b2:	f7ff bff5 	b.w	80101a0 <ucdr_init_buffer_origin>
 80101b6:	bf00      	nop

080101b8 <ucdr_alignment>:
 80101b8:	fbb0 f3f1 	udiv	r3, r0, r1
 80101bc:	fb03 0011 	mls	r0, r3, r1, r0
 80101c0:	1a08      	subs	r0, r1, r0
 80101c2:	3901      	subs	r1, #1
 80101c4:	4008      	ands	r0, r1
 80101c6:	4770      	bx	lr

080101c8 <ucdr_buffer_alignment>:
 80101c8:	7d43      	ldrb	r3, [r0, #21]
 80101ca:	428b      	cmp	r3, r1
 80101cc:	d208      	bcs.n	80101e0 <ucdr_buffer_alignment+0x18>
 80101ce:	6900      	ldr	r0, [r0, #16]
 80101d0:	fbb0 f3f1 	udiv	r3, r0, r1
 80101d4:	fb01 0013 	mls	r0, r1, r3, r0
 80101d8:	1a08      	subs	r0, r1, r0
 80101da:	3901      	subs	r1, #1
 80101dc:	4008      	ands	r0, r1
 80101de:	4770      	bx	lr
 80101e0:	2000      	movs	r0, #0
 80101e2:	4770      	bx	lr

080101e4 <ucdr_align_to>:
 80101e4:	b538      	push	{r3, r4, r5, lr}
 80101e6:	4604      	mov	r4, r0
 80101e8:	460d      	mov	r5, r1
 80101ea:	f7ff ffed 	bl	80101c8 <ucdr_buffer_alignment>
 80101ee:	68a3      	ldr	r3, [r4, #8]
 80101f0:	6921      	ldr	r1, [r4, #16]
 80101f2:	7565      	strb	r5, [r4, #21]
 80101f4:	181a      	adds	r2, r3, r0
 80101f6:	6863      	ldr	r3, [r4, #4]
 80101f8:	4293      	cmp	r3, r2
 80101fa:	4408      	add	r0, r1
 80101fc:	bf28      	it	cs
 80101fe:	4613      	movcs	r3, r2
 8010200:	6120      	str	r0, [r4, #16]
 8010202:	60a3      	str	r3, [r4, #8]
 8010204:	bd38      	pop	{r3, r4, r5, pc}
 8010206:	bf00      	nop

08010208 <ucdr_buffer_length>:
 8010208:	6882      	ldr	r2, [r0, #8]
 801020a:	6800      	ldr	r0, [r0, #0]
 801020c:	1a10      	subs	r0, r2, r0
 801020e:	4770      	bx	lr

08010210 <ucdr_buffer_remaining>:
 8010210:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010214:	1a10      	subs	r0, r2, r0
 8010216:	4770      	bx	lr

08010218 <ucdr_check_final_buffer_behavior_array>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	7d83      	ldrb	r3, [r0, #22]
 801021c:	b963      	cbnz	r3, 8010238 <ucdr_check_final_buffer_behavior_array+0x20>
 801021e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010222:	429a      	cmp	r2, r3
 8010224:	4604      	mov	r4, r0
 8010226:	460d      	mov	r5, r1
 8010228:	d308      	bcc.n	801023c <ucdr_check_final_buffer_behavior_array+0x24>
 801022a:	b139      	cbz	r1, 801023c <ucdr_check_final_buffer_behavior_array+0x24>
 801022c:	6983      	ldr	r3, [r0, #24]
 801022e:	b163      	cbz	r3, 801024a <ucdr_check_final_buffer_behavior_array+0x32>
 8010230:	69c1      	ldr	r1, [r0, #28]
 8010232:	4798      	blx	r3
 8010234:	75a0      	strb	r0, [r4, #22]
 8010236:	b108      	cbz	r0, 801023c <ucdr_check_final_buffer_behavior_array+0x24>
 8010238:	2000      	movs	r0, #0
 801023a:	bd38      	pop	{r3, r4, r5, pc}
 801023c:	4620      	mov	r0, r4
 801023e:	f7ff ffe7 	bl	8010210 <ucdr_buffer_remaining>
 8010242:	42a8      	cmp	r0, r5
 8010244:	bf28      	it	cs
 8010246:	4628      	movcs	r0, r5
 8010248:	bd38      	pop	{r3, r4, r5, pc}
 801024a:	2301      	movs	r3, #1
 801024c:	7583      	strb	r3, [r0, #22]
 801024e:	e7f3      	b.n	8010238 <ucdr_check_final_buffer_behavior_array+0x20>

08010250 <ucdr_advance_buffer>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4604      	mov	r4, r0
 8010254:	460d      	mov	r5, r1
 8010256:	f7ff ff57 	bl	8010108 <ucdr_check_buffer_available_for>
 801025a:	b178      	cbz	r0, 801027c <ucdr_advance_buffer+0x2c>
 801025c:	6923      	ldr	r3, [r4, #16]
 801025e:	68a2      	ldr	r2, [r4, #8]
 8010260:	442b      	add	r3, r5
 8010262:	6123      	str	r3, [r4, #16]
 8010264:	2301      	movs	r3, #1
 8010266:	442a      	add	r2, r5
 8010268:	7563      	strb	r3, [r4, #21]
 801026a:	60a2      	str	r2, [r4, #8]
 801026c:	bd38      	pop	{r3, r4, r5, pc}
 801026e:	68a2      	ldr	r2, [r4, #8]
 8010270:	6923      	ldr	r3, [r4, #16]
 8010272:	4402      	add	r2, r0
 8010274:	4403      	add	r3, r0
 8010276:	1a2d      	subs	r5, r5, r0
 8010278:	60a2      	str	r2, [r4, #8]
 801027a:	6123      	str	r3, [r4, #16]
 801027c:	4629      	mov	r1, r5
 801027e:	2201      	movs	r2, #1
 8010280:	4620      	mov	r0, r4
 8010282:	f7ff ffc9 	bl	8010218 <ucdr_check_final_buffer_behavior_array>
 8010286:	2800      	cmp	r0, #0
 8010288:	d1f1      	bne.n	801026e <ucdr_advance_buffer+0x1e>
 801028a:	2301      	movs	r3, #1
 801028c:	7563      	strb	r3, [r4, #21]
 801028e:	bd38      	pop	{r3, r4, r5, pc}

08010290 <ucdr_serialize_sequence_char>:
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	4615      	mov	r5, r2
 8010294:	460e      	mov	r6, r1
 8010296:	7d01      	ldrb	r1, [r0, #20]
 8010298:	4604      	mov	r4, r0
 801029a:	f7fe fe25 	bl	800eee8 <ucdr_serialize_endian_uint32_t>
 801029e:	b90d      	cbnz	r5, 80102a4 <ucdr_serialize_sequence_char+0x14>
 80102a0:	2001      	movs	r0, #1
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
 80102a4:	7d21      	ldrb	r1, [r4, #20]
 80102a6:	462b      	mov	r3, r5
 80102a8:	4632      	mov	r2, r6
 80102aa:	4620      	mov	r0, r4
 80102ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102b0:	f7fe b812 	b.w	800e2d8 <ucdr_serialize_endian_array_char>

080102b4 <ucdr_deserialize_sequence_char>:
 80102b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102b8:	461d      	mov	r5, r3
 80102ba:	4616      	mov	r6, r2
 80102bc:	460f      	mov	r7, r1
 80102be:	461a      	mov	r2, r3
 80102c0:	7d01      	ldrb	r1, [r0, #20]
 80102c2:	4604      	mov	r4, r0
 80102c4:	f7fe ff38 	bl	800f138 <ucdr_deserialize_endian_uint32_t>
 80102c8:	682b      	ldr	r3, [r5, #0]
 80102ca:	429e      	cmp	r6, r3
 80102cc:	bf3c      	itt	cc
 80102ce:	2201      	movcc	r2, #1
 80102d0:	75a2      	strbcc	r2, [r4, #22]
 80102d2:	b913      	cbnz	r3, 80102da <ucdr_deserialize_sequence_char+0x26>
 80102d4:	2001      	movs	r0, #1
 80102d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102da:	7d21      	ldrb	r1, [r4, #20]
 80102dc:	463a      	mov	r2, r7
 80102de:	4620      	mov	r0, r4
 80102e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102e4:	f7fe b82a 	b.w	800e33c <ucdr_deserialize_endian_array_char>

080102e8 <ucdr_serialize_sequence_uint8_t>:
 80102e8:	b570      	push	{r4, r5, r6, lr}
 80102ea:	4615      	mov	r5, r2
 80102ec:	460e      	mov	r6, r1
 80102ee:	7d01      	ldrb	r1, [r0, #20]
 80102f0:	4604      	mov	r4, r0
 80102f2:	f7fe fdf9 	bl	800eee8 <ucdr_serialize_endian_uint32_t>
 80102f6:	b90d      	cbnz	r5, 80102fc <ucdr_serialize_sequence_uint8_t+0x14>
 80102f8:	2001      	movs	r0, #1
 80102fa:	bd70      	pop	{r4, r5, r6, pc}
 80102fc:	7d21      	ldrb	r1, [r4, #20]
 80102fe:	462b      	mov	r3, r5
 8010300:	4632      	mov	r2, r6
 8010302:	4620      	mov	r0, r4
 8010304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010308:	f7fe b87c 	b.w	800e404 <ucdr_serialize_endian_array_uint8_t>

0801030c <ucdr_deserialize_sequence_uint8_t>:
 801030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010310:	461d      	mov	r5, r3
 8010312:	4616      	mov	r6, r2
 8010314:	460f      	mov	r7, r1
 8010316:	461a      	mov	r2, r3
 8010318:	7d01      	ldrb	r1, [r0, #20]
 801031a:	4604      	mov	r4, r0
 801031c:	f7fe ff0c 	bl	800f138 <ucdr_deserialize_endian_uint32_t>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	429e      	cmp	r6, r3
 8010324:	bf3c      	itt	cc
 8010326:	2201      	movcc	r2, #1
 8010328:	75a2      	strbcc	r2, [r4, #22]
 801032a:	b913      	cbnz	r3, 8010332 <ucdr_deserialize_sequence_uint8_t+0x26>
 801032c:	2001      	movs	r0, #1
 801032e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010332:	7d21      	ldrb	r1, [r4, #20]
 8010334:	463a      	mov	r2, r7
 8010336:	4620      	mov	r0, r4
 8010338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801033c:	f7fe b8c6 	b.w	800e4cc <ucdr_deserialize_endian_array_uint8_t>

08010340 <uxr_buffer_delete_entity>:
 8010340:	b510      	push	{r4, lr}
 8010342:	2300      	movs	r3, #0
 8010344:	b08e      	sub	sp, #56	@ 0x38
 8010346:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801034a:	2303      	movs	r3, #3
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	2204      	movs	r2, #4
 8010350:	ab06      	add	r3, sp, #24
 8010352:	4604      	mov	r4, r0
 8010354:	9103      	str	r1, [sp, #12]
 8010356:	f001 f98d 	bl	8011674 <uxr_prepare_stream_to_write_submessage>
 801035a:	b918      	cbnz	r0, 8010364 <uxr_buffer_delete_entity+0x24>
 801035c:	4604      	mov	r4, r0
 801035e:	4620      	mov	r0, r4
 8010360:	b00e      	add	sp, #56	@ 0x38
 8010362:	bd10      	pop	{r4, pc}
 8010364:	9902      	ldr	r1, [sp, #8]
 8010366:	aa05      	add	r2, sp, #20
 8010368:	4620      	mov	r0, r4
 801036a:	f001 fab9 	bl	80118e0 <uxr_init_base_object_request>
 801036e:	a905      	add	r1, sp, #20
 8010370:	4604      	mov	r4, r0
 8010372:	a806      	add	r0, sp, #24
 8010374:	f002 fd3e 	bl	8012df4 <uxr_serialize_DELETE_Payload>
 8010378:	4620      	mov	r0, r4
 801037a:	b00e      	add	sp, #56	@ 0x38
 801037c:	bd10      	pop	{r4, pc}
 801037e:	bf00      	nop

08010380 <uxr_common_create_entity>:
 8010380:	b510      	push	{r4, lr}
 8010382:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010386:	b08c      	sub	sp, #48	@ 0x30
 8010388:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801038c:	f1bc 0f01 	cmp.w	ip, #1
 8010390:	bf0c      	ite	eq
 8010392:	f003 0201 	andeq.w	r2, r3, #1
 8010396:	2200      	movne	r2, #0
 8010398:	330e      	adds	r3, #14
 801039a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801039e:	9101      	str	r1, [sp, #4]
 80103a0:	441a      	add	r2, r3
 80103a2:	2301      	movs	r3, #1
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	9903      	ldr	r1, [sp, #12]
 80103a8:	ab04      	add	r3, sp, #16
 80103aa:	b292      	uxth	r2, r2
 80103ac:	4604      	mov	r4, r0
 80103ae:	f001 f961 	bl	8011674 <uxr_prepare_stream_to_write_submessage>
 80103b2:	b918      	cbnz	r0, 80103bc <uxr_common_create_entity+0x3c>
 80103b4:	4604      	mov	r4, r0
 80103b6:	4620      	mov	r0, r4
 80103b8:	b00c      	add	sp, #48	@ 0x30
 80103ba:	bd10      	pop	{r4, pc}
 80103bc:	9902      	ldr	r1, [sp, #8]
 80103be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80103c0:	4620      	mov	r0, r4
 80103c2:	f001 fa8d 	bl	80118e0 <uxr_init_base_object_request>
 80103c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80103c8:	4604      	mov	r4, r0
 80103ca:	a804      	add	r0, sp, #16
 80103cc:	f002 fc6e 	bl	8012cac <uxr_serialize_CREATE_Payload>
 80103d0:	4620      	mov	r0, r4
 80103d2:	b00c      	add	sp, #48	@ 0x30
 80103d4:	bd10      	pop	{r4, pc}
 80103d6:	bf00      	nop

080103d8 <uxr_buffer_create_participant_bin>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80103de:	ac11      	add	r4, sp, #68	@ 0x44
 80103e0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80103e4:	2303      	movs	r3, #3
 80103e6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80103ea:	7223      	strb	r3, [r4, #8]
 80103ec:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80103ee:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80103f2:	2201      	movs	r2, #1
 80103f4:	2100      	movs	r1, #0
 80103f6:	4605      	mov	r5, r0
 80103f8:	7122      	strb	r2, [r4, #4]
 80103fa:	f88d 1014 	strb.w	r1, [sp, #20]
 80103fe:	b1cb      	cbz	r3, 8010434 <uxr_buffer_create_participant_bin+0x5c>
 8010400:	f88d 201c 	strb.w	r2, [sp, #28]
 8010404:	9308      	str	r3, [sp, #32]
 8010406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801040a:	a915      	add	r1, sp, #84	@ 0x54
 801040c:	a809      	add	r0, sp, #36	@ 0x24
 801040e:	f7ff fecf 	bl	80101b0 <ucdr_init_buffer>
 8010412:	a905      	add	r1, sp, #20
 8010414:	a809      	add	r0, sp, #36	@ 0x24
 8010416:	f001 fff7 	bl	8012408 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801041a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801041c:	9600      	str	r6, [sp, #0]
 801041e:	9401      	str	r4, [sp, #4]
 8010420:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010424:	60e3      	str	r3, [r4, #12]
 8010426:	4628      	mov	r0, r5
 8010428:	b29b      	uxth	r3, r3
 801042a:	f7ff ffa9 	bl	8010380 <uxr_common_create_entity>
 801042e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010432:	bd70      	pop	{r4, r5, r6, pc}
 8010434:	f88d 301c 	strb.w	r3, [sp, #28]
 8010438:	e7e5      	b.n	8010406 <uxr_buffer_create_participant_bin+0x2e>
 801043a:	bf00      	nop

0801043c <uxr_buffer_create_topic_bin>:
 801043c:	b570      	push	{r4, r5, r6, lr}
 801043e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010442:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010446:	9105      	str	r1, [sp, #20]
 8010448:	4605      	mov	r5, r0
 801044a:	a997      	add	r1, sp, #604	@ 0x25c
 801044c:	4618      	mov	r0, r3
 801044e:	2302      	movs	r3, #2
 8010450:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010454:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010458:	f000 f9d0 	bl	80107fc <uxr_object_id_to_raw>
 801045c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801045e:	9306      	str	r3, [sp, #24]
 8010460:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010462:	930a      	str	r3, [sp, #40]	@ 0x28
 8010464:	2303      	movs	r3, #3
 8010466:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801046a:	2301      	movs	r3, #1
 801046c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010470:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010474:	a917      	add	r1, sp, #92	@ 0x5c
 8010476:	2300      	movs	r3, #0
 8010478:	a80b      	add	r0, sp, #44	@ 0x2c
 801047a:	f88d 301c 	strb.w	r3, [sp, #28]
 801047e:	f7ff fe97 	bl	80101b0 <ucdr_init_buffer>
 8010482:	a906      	add	r1, sp, #24
 8010484:	a80b      	add	r0, sp, #44	@ 0x2c
 8010486:	f001 ffe1 	bl	801244c <uxr_serialize_OBJK_Topic_Binary>
 801048a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801048c:	9316      	str	r3, [sp, #88]	@ 0x58
 801048e:	ac13      	add	r4, sp, #76	@ 0x4c
 8010490:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010494:	9600      	str	r6, [sp, #0]
 8010496:	9401      	str	r4, [sp, #4]
 8010498:	b29b      	uxth	r3, r3
 801049a:	4628      	mov	r0, r5
 801049c:	f7ff ff70 	bl	8010380 <uxr_common_create_entity>
 80104a0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80104a4:	bd70      	pop	{r4, r5, r6, pc}
 80104a6:	bf00      	nop

080104a8 <uxr_buffer_create_publisher_bin>:
 80104a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104aa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80104ae:	4605      	mov	r5, r0
 80104b0:	9105      	str	r1, [sp, #20]
 80104b2:	4618      	mov	r0, r3
 80104b4:	2603      	movs	r6, #3
 80104b6:	a992      	add	r1, sp, #584	@ 0x248
 80104b8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80104bc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80104c0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80104c4:	f000 f99a 	bl	80107fc <uxr_object_id_to_raw>
 80104c8:	2300      	movs	r3, #0
 80104ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104ce:	a912      	add	r1, sp, #72	@ 0x48
 80104d0:	a806      	add	r0, sp, #24
 80104d2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80104d6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80104da:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80104de:	f7ff fe67 	bl	80101b0 <ucdr_init_buffer>
 80104e2:	a993      	add	r1, sp, #588	@ 0x24c
 80104e4:	a806      	add	r0, sp, #24
 80104e6:	f002 f865 	bl	80125b4 <uxr_serialize_OBJK_Publisher_Binary>
 80104ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80104ee:	ac0e      	add	r4, sp, #56	@ 0x38
 80104f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80104f4:	9700      	str	r7, [sp, #0]
 80104f6:	9401      	str	r4, [sp, #4]
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	4628      	mov	r0, r5
 80104fc:	f7ff ff40 	bl	8010380 <uxr_common_create_entity>
 8010500:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010506:	bf00      	nop

08010508 <uxr_buffer_create_subscriber_bin>:
 8010508:	b570      	push	{r4, r5, r6, lr}
 801050a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801050e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010512:	9105      	str	r1, [sp, #20]
 8010514:	4605      	mov	r5, r0
 8010516:	a992      	add	r1, sp, #584	@ 0x248
 8010518:	4618      	mov	r0, r3
 801051a:	2304      	movs	r3, #4
 801051c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8010520:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010524:	f000 f96a 	bl	80107fc <uxr_object_id_to_raw>
 8010528:	2300      	movs	r3, #0
 801052a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801052e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010532:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010536:	a912      	add	r1, sp, #72	@ 0x48
 8010538:	2303      	movs	r3, #3
 801053a:	a806      	add	r0, sp, #24
 801053c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8010540:	f7ff fe36 	bl	80101b0 <ucdr_init_buffer>
 8010544:	a993      	add	r1, sp, #588	@ 0x24c
 8010546:	a806      	add	r0, sp, #24
 8010548:	f002 f8e4 	bl	8012714 <uxr_serialize_OBJK_Subscriber_Binary>
 801054c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801054e:	9311      	str	r3, [sp, #68]	@ 0x44
 8010550:	ac0e      	add	r4, sp, #56	@ 0x38
 8010552:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010556:	9600      	str	r6, [sp, #0]
 8010558:	9401      	str	r4, [sp, #4]
 801055a:	b29b      	uxth	r3, r3
 801055c:	4628      	mov	r0, r5
 801055e:	f7ff ff0f 	bl	8010380 <uxr_common_create_entity>
 8010562:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8010566:	bd70      	pop	{r4, r5, r6, pc}

08010568 <uxr_buffer_create_datawriter_bin>:
 8010568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801056c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010570:	ac1d      	add	r4, sp, #116	@ 0x74
 8010572:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010576:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801057a:	9105      	str	r1, [sp, #20]
 801057c:	4606      	mov	r6, r0
 801057e:	a9a1      	add	r1, sp, #644	@ 0x284
 8010580:	4618      	mov	r0, r3
 8010582:	2305      	movs	r3, #5
 8010584:	7123      	strb	r3, [r4, #4]
 8010586:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801058a:	2703      	movs	r7, #3
 801058c:	f000 f936 	bl	80107fc <uxr_object_id_to_raw>
 8010590:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010592:	7227      	strb	r7, [r4, #8]
 8010594:	a90e      	add	r1, sp, #56	@ 0x38
 8010596:	f000 f931 	bl	80107fc <uxr_object_id_to_raw>
 801059a:	2300      	movs	r3, #0
 801059c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80105a0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80105a4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80105a8:	3d00      	subs	r5, #0
 80105aa:	bf18      	it	ne
 80105ac:	2501      	movne	r5, #1
 80105ae:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80105b2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80105b6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80105ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80105be:	2301      	movs	r3, #1
 80105c0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80105c4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80105c8:	bb8a      	cbnz	r2, 801062e <uxr_buffer_create_datawriter_bin+0xc6>
 80105ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80105ce:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80105d2:	f04f 0c13 	mov.w	ip, #19
 80105d6:	250b      	movs	r5, #11
 80105d8:	2221      	movs	r2, #33	@ 0x21
 80105da:	2111      	movs	r1, #17
 80105dc:	2009      	movs	r0, #9
 80105de:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80105e2:	b923      	cbnz	r3, 80105ee <uxr_buffer_create_datawriter_bin+0x86>
 80105e4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80105e8:	4672      	mov	r2, lr
 80105ea:	4661      	mov	r1, ip
 80105ec:	4628      	mov	r0, r5
 80105ee:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80105f2:	2b01      	cmp	r3, #1
 80105f4:	d025      	beq.n	8010642 <uxr_buffer_create_datawriter_bin+0xda>
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d029      	beq.n	801064e <uxr_buffer_create_datawriter_bin+0xe6>
 80105fa:	b32b      	cbz	r3, 8010648 <uxr_buffer_create_datawriter_bin+0xe0>
 80105fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010600:	a921      	add	r1, sp, #132	@ 0x84
 8010602:	a806      	add	r0, sp, #24
 8010604:	f7ff fdd4 	bl	80101b0 <ucdr_init_buffer>
 8010608:	a90e      	add	r1, sp, #56	@ 0x38
 801060a:	a806      	add	r0, sp, #24
 801060c:	f002 f934 	bl	8012878 <uxr_serialize_OBJK_DataWriter_Binary>
 8010610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010612:	f8cd 8000 	str.w	r8, [sp]
 8010616:	9401      	str	r4, [sp, #4]
 8010618:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801061c:	60e3      	str	r3, [r4, #12]
 801061e:	4630      	mov	r0, r6
 8010620:	b29b      	uxth	r3, r3
 8010622:	f7ff fead 	bl	8010380 <uxr_common_create_entity>
 8010626:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801062a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801062e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010632:	f04f 0c12 	mov.w	ip, #18
 8010636:	250a      	movs	r5, #10
 8010638:	2220      	movs	r2, #32
 801063a:	2110      	movs	r1, #16
 801063c:	2008      	movs	r0, #8
 801063e:	2702      	movs	r7, #2
 8010640:	e7cd      	b.n	80105de <uxr_buffer_create_datawriter_bin+0x76>
 8010642:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010646:	e7d9      	b.n	80105fc <uxr_buffer_create_datawriter_bin+0x94>
 8010648:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801064c:	e7d6      	b.n	80105fc <uxr_buffer_create_datawriter_bin+0x94>
 801064e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010652:	e7d3      	b.n	80105fc <uxr_buffer_create_datawriter_bin+0x94>

08010654 <uxr_buffer_create_datareader_bin>:
 8010654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010658:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801065c:	ac1f      	add	r4, sp, #124	@ 0x7c
 801065e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010662:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010666:	9105      	str	r1, [sp, #20]
 8010668:	4606      	mov	r6, r0
 801066a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801066c:	4618      	mov	r0, r3
 801066e:	2306      	movs	r3, #6
 8010670:	7123      	strb	r3, [r4, #4]
 8010672:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010676:	2703      	movs	r7, #3
 8010678:	f000 f8c0 	bl	80107fc <uxr_object_id_to_raw>
 801067c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801067e:	7227      	strb	r7, [r4, #8]
 8010680:	a90e      	add	r1, sp, #56	@ 0x38
 8010682:	f000 f8bb 	bl	80107fc <uxr_object_id_to_raw>
 8010686:	2300      	movs	r3, #0
 8010688:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801068c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8010690:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010694:	3d00      	subs	r5, #0
 8010696:	bf18      	it	ne
 8010698:	2501      	movne	r5, #1
 801069a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801069e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80106a2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80106a6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80106aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80106ae:	2301      	movs	r3, #1
 80106b0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80106b4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80106b8:	bb8a      	cbnz	r2, 801071e <uxr_buffer_create_datareader_bin+0xca>
 80106ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80106be:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80106c2:	f04f 0c13 	mov.w	ip, #19
 80106c6:	250b      	movs	r5, #11
 80106c8:	2221      	movs	r2, #33	@ 0x21
 80106ca:	2111      	movs	r1, #17
 80106cc:	2009      	movs	r0, #9
 80106ce:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80106d2:	b923      	cbnz	r3, 80106de <uxr_buffer_create_datareader_bin+0x8a>
 80106d4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80106d8:	4672      	mov	r2, lr
 80106da:	4661      	mov	r1, ip
 80106dc:	4628      	mov	r0, r5
 80106de:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d025      	beq.n	8010732 <uxr_buffer_create_datareader_bin+0xde>
 80106e6:	2b03      	cmp	r3, #3
 80106e8:	d029      	beq.n	801073e <uxr_buffer_create_datareader_bin+0xea>
 80106ea:	b32b      	cbz	r3, 8010738 <uxr_buffer_create_datareader_bin+0xe4>
 80106ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106f0:	a923      	add	r1, sp, #140	@ 0x8c
 80106f2:	a806      	add	r0, sp, #24
 80106f4:	f7ff fd5c 	bl	80101b0 <ucdr_init_buffer>
 80106f8:	a90e      	add	r1, sp, #56	@ 0x38
 80106fa:	a806      	add	r0, sp, #24
 80106fc:	f002 f880 	bl	8012800 <uxr_serialize_OBJK_DataReader_Binary>
 8010700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010702:	f8cd 8000 	str.w	r8, [sp]
 8010706:	9401      	str	r4, [sp, #4]
 8010708:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801070c:	60e3      	str	r3, [r4, #12]
 801070e:	4630      	mov	r0, r6
 8010710:	b29b      	uxth	r3, r3
 8010712:	f7ff fe35 	bl	8010380 <uxr_common_create_entity>
 8010716:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801071a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801071e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010722:	f04f 0c12 	mov.w	ip, #18
 8010726:	250a      	movs	r5, #10
 8010728:	2220      	movs	r2, #32
 801072a:	2110      	movs	r1, #16
 801072c:	2008      	movs	r0, #8
 801072e:	2702      	movs	r7, #2
 8010730:	e7cd      	b.n	80106ce <uxr_buffer_create_datareader_bin+0x7a>
 8010732:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010736:	e7d9      	b.n	80106ec <uxr_buffer_create_datareader_bin+0x98>
 8010738:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801073c:	e7d6      	b.n	80106ec <uxr_buffer_create_datareader_bin+0x98>
 801073e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010742:	e7d3      	b.n	80106ec <uxr_buffer_create_datareader_bin+0x98>

08010744 <uxr_buffer_create_replier_bin>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801074a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801074e:	9105      	str	r1, [sp, #20]
 8010750:	4605      	mov	r5, r0
 8010752:	a999      	add	r1, sp, #612	@ 0x264
 8010754:	4618      	mov	r0, r3
 8010756:	2308      	movs	r3, #8
 8010758:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 801075c:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8010760:	f000 f84c 	bl	80107fc <uxr_object_id_to_raw>
 8010764:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8010766:	9306      	str	r3, [sp, #24]
 8010768:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 801076a:	9307      	str	r3, [sp, #28]
 801076c:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 801076e:	9308      	str	r3, [sp, #32]
 8010770:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8010772:	930c      	str	r3, [sp, #48]	@ 0x30
 8010774:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010776:	930a      	str	r3, [sp, #40]	@ 0x28
 8010778:	2301      	movs	r3, #1
 801077a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801077e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010782:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010786:	a919      	add	r1, sp, #100	@ 0x64
 8010788:	2303      	movs	r3, #3
 801078a:	a80d      	add	r0, sp, #52	@ 0x34
 801078c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8010790:	f7ff fd0e 	bl	80101b0 <ucdr_init_buffer>
 8010794:	a906      	add	r1, sp, #24
 8010796:	a80d      	add	r0, sp, #52	@ 0x34
 8010798:	f002 f89a 	bl	80128d0 <uxr_serialize_OBJK_Replier_Binary>
 801079c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801079e:	9318      	str	r3, [sp, #96]	@ 0x60
 80107a0:	ac15      	add	r4, sp, #84	@ 0x54
 80107a2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80107a6:	9600      	str	r6, [sp, #0]
 80107a8:	9401      	str	r4, [sp, #4]
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	4628      	mov	r0, r5
 80107ae:	f7ff fde7 	bl	8010380 <uxr_common_create_entity>
 80107b2:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 80107b6:	bd70      	pop	{r4, r5, r6, pc}

080107b8 <uxr_object_id>:
 80107b8:	b082      	sub	sp, #8
 80107ba:	2300      	movs	r3, #0
 80107bc:	f88d 1006 	strb.w	r1, [sp, #6]
 80107c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80107c4:	f360 030f 	bfi	r3, r0, #0, #16
 80107c8:	f362 431f 	bfi	r3, r2, #16, #16
 80107cc:	4618      	mov	r0, r3
 80107ce:	b002      	add	sp, #8
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop

080107d4 <uxr_object_id_from_raw>:
 80107d4:	7843      	ldrb	r3, [r0, #1]
 80107d6:	7801      	ldrb	r1, [r0, #0]
 80107d8:	b082      	sub	sp, #8
 80107da:	f003 020f 	and.w	r2, r3, #15
 80107de:	f88d 2006 	strb.w	r2, [sp, #6]
 80107e2:	091b      	lsrs	r3, r3, #4
 80107e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80107e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80107ec:	2000      	movs	r0, #0
 80107ee:	f363 000f 	bfi	r0, r3, #0, #16
 80107f2:	f362 401f 	bfi	r0, r2, #16, #16
 80107f6:	b002      	add	sp, #8
 80107f8:	4770      	bx	lr
 80107fa:	bf00      	nop

080107fc <uxr_object_id_to_raw>:
 80107fc:	4602      	mov	r2, r0
 80107fe:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010802:	b082      	sub	sp, #8
 8010804:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010808:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 801080c:	f881 c000 	strb.w	ip, [r1]
 8010810:	7048      	strb	r0, [r1, #1]
 8010812:	b002      	add	sp, #8
 8010814:	4770      	bx	lr
 8010816:	bf00      	nop

08010818 <on_get_fragmentation_info>:
 8010818:	b500      	push	{lr}
 801081a:	b08b      	sub	sp, #44	@ 0x2c
 801081c:	4601      	mov	r1, r0
 801081e:	2204      	movs	r2, #4
 8010820:	a802      	add	r0, sp, #8
 8010822:	f7ff fcc5 	bl	80101b0 <ucdr_init_buffer>
 8010826:	f10d 0305 	add.w	r3, sp, #5
 801082a:	f10d 0206 	add.w	r2, sp, #6
 801082e:	a901      	add	r1, sp, #4
 8010830:	a802      	add	r0, sp, #8
 8010832:	f001 f9d7 	bl	8011be4 <uxr_read_submessage_header>
 8010836:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801083a:	2b0d      	cmp	r3, #13
 801083c:	d003      	beq.n	8010846 <on_get_fragmentation_info+0x2e>
 801083e:	2000      	movs	r0, #0
 8010840:	b00b      	add	sp, #44	@ 0x2c
 8010842:	f85d fb04 	ldr.w	pc, [sp], #4
 8010846:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801084a:	f013 0f02 	tst.w	r3, #2
 801084e:	bf14      	ite	ne
 8010850:	2002      	movne	r0, #2
 8010852:	2001      	moveq	r0, #1
 8010854:	b00b      	add	sp, #44	@ 0x2c
 8010856:	f85d fb04 	ldr.w	pc, [sp], #4
 801085a:	bf00      	nop

0801085c <read_submessage_get_info>:
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	2500      	movs	r5, #0
 8010860:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010864:	4604      	mov	r4, r0
 8010866:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801086a:	460e      	mov	r6, r1
 801086c:	a810      	add	r0, sp, #64	@ 0x40
 801086e:	4629      	mov	r1, r5
 8010870:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010874:	f00a fc01 	bl	801b07a <memset>
 8010878:	a903      	add	r1, sp, #12
 801087a:	4630      	mov	r0, r6
 801087c:	f002 faa6 	bl	8012dcc <uxr_deserialize_GET_INFO_Payload>
 8010880:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010884:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010888:	4620      	mov	r0, r4
 801088a:	f001 f821 	bl	80118d0 <uxr_session_header_offset>
 801088e:	462b      	mov	r3, r5
 8010890:	9000      	str	r0, [sp, #0]
 8010892:	220c      	movs	r2, #12
 8010894:	a905      	add	r1, sp, #20
 8010896:	a808      	add	r0, sp, #32
 8010898:	f7ff fc78 	bl	801018c <ucdr_init_buffer_origin_offset>
 801089c:	a910      	add	r1, sp, #64	@ 0x40
 801089e:	a808      	add	r0, sp, #32
 80108a0:	f002 fb06 	bl	8012eb0 <uxr_serialize_INFO_Payload>
 80108a4:	9b08      	ldr	r3, [sp, #32]
 80108a6:	462a      	mov	r2, r5
 80108a8:	4629      	mov	r1, r5
 80108aa:	4620      	mov	r0, r4
 80108ac:	f000 ffba 	bl	8011824 <uxr_stamp_session_header>
 80108b0:	a808      	add	r0, sp, #32
 80108b2:	f7ff fca9 	bl	8010208 <ucdr_buffer_length>
 80108b6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80108b8:	4602      	mov	r2, r0
 80108ba:	a905      	add	r1, sp, #20
 80108bc:	e9d3 0400 	ldrd	r0, r4, [r3]
 80108c0:	47a0      	blx	r4
 80108c2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80108c6:	bd70      	pop	{r4, r5, r6, pc}

080108c8 <write_submessage_acknack.isra.0>:
 80108c8:	b570      	push	{r4, r5, r6, lr}
 80108ca:	b092      	sub	sp, #72	@ 0x48
 80108cc:	4605      	mov	r5, r0
 80108ce:	460e      	mov	r6, r1
 80108d0:	4614      	mov	r4, r2
 80108d2:	f000 fffd 	bl	80118d0 <uxr_session_header_offset>
 80108d6:	a905      	add	r1, sp, #20
 80108d8:	9000      	str	r0, [sp, #0]
 80108da:	2300      	movs	r3, #0
 80108dc:	a80a      	add	r0, sp, #40	@ 0x28
 80108de:	2211      	movs	r2, #17
 80108e0:	f7ff fc54 	bl	801018c <ucdr_init_buffer_origin_offset>
 80108e4:	2218      	movs	r2, #24
 80108e6:	fb02 5404 	mla	r4, r2, r4, r5
 80108ea:	2300      	movs	r3, #0
 80108ec:	2205      	movs	r2, #5
 80108ee:	3450      	adds	r4, #80	@ 0x50
 80108f0:	210a      	movs	r1, #10
 80108f2:	a80a      	add	r0, sp, #40	@ 0x28
 80108f4:	f001 f95c 	bl	8011bb0 <uxr_buffer_submessage_header>
 80108f8:	a903      	add	r1, sp, #12
 80108fa:	4620      	mov	r0, r4
 80108fc:	f007 fd5c 	bl	80183b8 <uxr_compute_acknack>
 8010900:	ba40      	rev16	r0, r0
 8010902:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010906:	a903      	add	r1, sp, #12
 8010908:	a80a      	add	r0, sp, #40	@ 0x28
 801090a:	f88d 6010 	strb.w	r6, [sp, #16]
 801090e:	f002 fb3f 	bl	8012f90 <uxr_serialize_ACKNACK_Payload>
 8010912:	2200      	movs	r2, #0
 8010914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010916:	4611      	mov	r1, r2
 8010918:	4628      	mov	r0, r5
 801091a:	f000 ff83 	bl	8011824 <uxr_stamp_session_header>
 801091e:	a80a      	add	r0, sp, #40	@ 0x28
 8010920:	f7ff fc72 	bl	8010208 <ucdr_buffer_length>
 8010924:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010926:	4602      	mov	r2, r0
 8010928:	a905      	add	r1, sp, #20
 801092a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801092e:	47a0      	blx	r4
 8010930:	b012      	add	sp, #72	@ 0x48
 8010932:	bd70      	pop	{r4, r5, r6, pc}
 8010934:	0000      	movs	r0, r0
	...

08010938 <uxr_init_session>:
 8010938:	b510      	push	{r4, lr}
 801093a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010970 <uxr_init_session+0x38>
 801093e:	2300      	movs	r3, #0
 8010940:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010944:	4604      	mov	r4, r0
 8010946:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 801094a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 801094e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010952:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010956:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801095a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801095e:	2181      	movs	r1, #129	@ 0x81
 8010960:	f000 fecc 	bl	80116fc <uxr_init_session_info>
 8010964:	f104 0008 	add.w	r0, r4, #8
 8010968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801096c:	f001 b83c 	b.w	80119e8 <uxr_init_stream_storage>
	...

08010978 <uxr_set_status_callback>:
 8010978:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop

08010980 <uxr_set_topic_callback>:
 8010980:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop

08010988 <uxr_set_request_callback>:
 8010988:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801098c:	4770      	bx	lr
 801098e:	bf00      	nop

08010990 <uxr_set_reply_callback>:
 8010990:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop

08010998 <uxr_create_output_best_effort_stream>:
 8010998:	b510      	push	{r4, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	e9cd 2100 	strd	r2, r1, [sp]
 80109a0:	4604      	mov	r4, r0
 80109a2:	f000 ff95 	bl	80118d0 <uxr_session_header_offset>
 80109a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 80109aa:	4603      	mov	r3, r0
 80109ac:	f104 0008 	add.w	r0, r4, #8
 80109b0:	b004      	add	sp, #16
 80109b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b6:	f001 b861 	b.w	8011a7c <uxr_add_output_best_effort_buffer>
 80109ba:	bf00      	nop

080109bc <uxr_create_output_reliable_stream>:
 80109bc:	b510      	push	{r4, lr}
 80109be:	b088      	sub	sp, #32
 80109c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80109c4:	4604      	mov	r4, r0
 80109c6:	9303      	str	r3, [sp, #12]
 80109c8:	f000 ff82 	bl	80118d0 <uxr_session_header_offset>
 80109cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80109d0:	9000      	str	r0, [sp, #0]
 80109d2:	9905      	ldr	r1, [sp, #20]
 80109d4:	f104 0008 	add.w	r0, r4, #8
 80109d8:	f001 f864 	bl	8011aa4 <uxr_add_output_reliable_buffer>
 80109dc:	2200      	movs	r2, #0
 80109de:	b2c3      	uxtb	r3, r0
 80109e0:	f363 0207 	bfi	r2, r3, #0, #8
 80109e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80109e8:	f363 220f 	bfi	r2, r3, #8, #8
 80109ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80109f0:	f363 4217 	bfi	r2, r3, #16, #8
 80109f4:	0e03      	lsrs	r3, r0, #24
 80109f6:	f363 621f 	bfi	r2, r3, #24, #8
 80109fa:	4610      	mov	r0, r2
 80109fc:	b008      	add	sp, #32
 80109fe:	bd10      	pop	{r4, pc}

08010a00 <uxr_create_input_best_effort_stream>:
 8010a00:	b082      	sub	sp, #8
 8010a02:	3008      	adds	r0, #8
 8010a04:	b002      	add	sp, #8
 8010a06:	f001 b867 	b.w	8011ad8 <uxr_add_input_best_effort_buffer>
 8010a0a:	bf00      	nop

08010a0c <uxr_create_input_reliable_stream>:
 8010a0c:	b510      	push	{r4, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	4c0b      	ldr	r4, [pc, #44]	@ (8010a40 <uxr_create_input_reliable_stream+0x34>)
 8010a12:	9400      	str	r4, [sp, #0]
 8010a14:	3008      	adds	r0, #8
 8010a16:	f001 f875 	bl	8011b04 <uxr_add_input_reliable_buffer>
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	b2c3      	uxtb	r3, r0
 8010a1e:	f363 0207 	bfi	r2, r3, #0, #8
 8010a22:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010a26:	f363 220f 	bfi	r2, r3, #8, #8
 8010a2a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010a2e:	f363 4217 	bfi	r2, r3, #16, #8
 8010a32:	0e03      	lsrs	r3, r0, #24
 8010a34:	f363 621f 	bfi	r2, r3, #24, #8
 8010a38:	4610      	mov	r0, r2
 8010a3a:	b004      	add	sp, #16
 8010a3c:	bd10      	pop	{r4, pc}
 8010a3e:	bf00      	nop
 8010a40:	08010819 	.word	0x08010819

08010a44 <uxr_epoch_nanos>:
 8010a44:	b510      	push	{r4, lr}
 8010a46:	4604      	mov	r4, r0
 8010a48:	f001 f912 	bl	8011c70 <uxr_nanos>
 8010a4c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010a50:	1ac0      	subs	r0, r0, r3
 8010a52:	eb61 0102 	sbc.w	r1, r1, r2
 8010a56:	bd10      	pop	{r4, pc}

08010a58 <uxr_flash_output_streams>:
 8010a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a5c:	7e03      	ldrb	r3, [r0, #24]
 8010a5e:	b084      	sub	sp, #16
 8010a60:	4604      	mov	r4, r0
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d035      	beq.n	8010ad2 <uxr_flash_output_streams+0x7a>
 8010a66:	f04f 0900 	mov.w	r9, #0
 8010a6a:	4648      	mov	r0, r9
 8010a6c:	f10d 0802 	add.w	r8, sp, #2
 8010a70:	af03      	add	r7, sp, #12
 8010a72:	ae02      	add	r6, sp, #8
 8010a74:	e006      	b.n	8010a84 <uxr_flash_output_streams+0x2c>
 8010a76:	7e23      	ldrb	r3, [r4, #24]
 8010a78:	f109 0901 	add.w	r9, r9, #1
 8010a7c:	fa5f f089 	uxtb.w	r0, r9
 8010a80:	4283      	cmp	r3, r0
 8010a82:	d926      	bls.n	8010ad2 <uxr_flash_output_streams+0x7a>
 8010a84:	2201      	movs	r2, #1
 8010a86:	4611      	mov	r1, r2
 8010a88:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010a8c:	f000 ff58 	bl	8011940 <uxr_stream_id>
 8010a90:	3508      	adds	r5, #8
 8010a92:	4684      	mov	ip, r0
 8010a94:	4643      	mov	r3, r8
 8010a96:	463a      	mov	r2, r7
 8010a98:	4631      	mov	r1, r6
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f8cd c004 	str.w	ip, [sp, #4]
 8010aa0:	f007 fd10 	bl	80184c4 <uxr_prepare_best_effort_buffer_to_send>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	d0e6      	beq.n	8010a76 <uxr_flash_output_streams+0x1e>
 8010aa8:	9b02      	ldr	r3, [sp, #8]
 8010aaa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010aae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f000 feb6 	bl	8011824 <uxr_stamp_session_header>
 8010ab8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010aba:	9a03      	ldr	r2, [sp, #12]
 8010abc:	685d      	ldr	r5, [r3, #4]
 8010abe:	6818      	ldr	r0, [r3, #0]
 8010ac0:	9902      	ldr	r1, [sp, #8]
 8010ac2:	47a8      	blx	r5
 8010ac4:	f109 0901 	add.w	r9, r9, #1
 8010ac8:	7e23      	ldrb	r3, [r4, #24]
 8010aca:	fa5f f089 	uxtb.w	r0, r9
 8010ace:	4283      	cmp	r3, r0
 8010ad0:	d8d8      	bhi.n	8010a84 <uxr_flash_output_streams+0x2c>
 8010ad2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010ad6:	b38b      	cbz	r3, 8010b3c <uxr_flash_output_streams+0xe4>
 8010ad8:	f04f 0900 	mov.w	r9, #0
 8010adc:	f10d 0802 	add.w	r8, sp, #2
 8010ae0:	af03      	add	r7, sp, #12
 8010ae2:	ae02      	add	r6, sp, #8
 8010ae4:	4648      	mov	r0, r9
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	2102      	movs	r1, #2
 8010aea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010aee:	f000 ff27 	bl	8011940 <uxr_stream_id>
 8010af2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010af6:	3520      	adds	r5, #32
 8010af8:	9001      	str	r0, [sp, #4]
 8010afa:	e00d      	b.n	8010b18 <uxr_flash_output_streams+0xc0>
 8010afc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010b00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010b04:	9b02      	ldr	r3, [sp, #8]
 8010b06:	f000 fe8d 	bl	8011824 <uxr_stamp_session_header>
 8010b0a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010b0c:	9a03      	ldr	r2, [sp, #12]
 8010b0e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010b12:	9902      	ldr	r1, [sp, #8]
 8010b14:	6818      	ldr	r0, [r3, #0]
 8010b16:	47d0      	blx	sl
 8010b18:	4643      	mov	r3, r8
 8010b1a:	463a      	mov	r2, r7
 8010b1c:	4631      	mov	r1, r6
 8010b1e:	4628      	mov	r0, r5
 8010b20:	f007 feee 	bl	8018900 <uxr_prepare_next_reliable_buffer_to_send>
 8010b24:	4603      	mov	r3, r0
 8010b26:	4620      	mov	r0, r4
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d1e7      	bne.n	8010afc <uxr_flash_output_streams+0xa4>
 8010b2c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010b30:	f109 0901 	add.w	r9, r9, #1
 8010b34:	fa5f f089 	uxtb.w	r0, r9
 8010b38:	4283      	cmp	r3, r0
 8010b3a:	d8d4      	bhi.n	8010ae6 <uxr_flash_output_streams+0x8e>
 8010b3c:	b004      	add	sp, #16
 8010b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b42:	bf00      	nop

08010b44 <read_submessage_info>:
 8010b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b48:	460d      	mov	r5, r1
 8010b4a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010b4e:	4669      	mov	r1, sp
 8010b50:	4607      	mov	r7, r0
 8010b52:	4628      	mov	r0, r5
 8010b54:	f002 f848 	bl	8012be8 <uxr_deserialize_BaseObjectReply>
 8010b58:	a902      	add	r1, sp, #8
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010b62:	f7fd fefb 	bl	800e95c <ucdr_deserialize_bool>
 8010b66:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010b6a:	4004      	ands	r4, r0
 8010b6c:	b2e4      	uxtb	r4, r4
 8010b6e:	b95b      	cbnz	r3, 8010b88 <read_submessage_info+0x44>
 8010b70:	a987      	add	r1, sp, #540	@ 0x21c
 8010b72:	4628      	mov	r0, r5
 8010b74:	f7fd fef2 	bl	800e95c <ucdr_deserialize_bool>
 8010b78:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	b94b      	cbnz	r3, 8010b94 <read_submessage_info+0x50>
 8010b80:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b88:	a903      	add	r1, sp, #12
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f001 fed4 	bl	8012938 <uxr_deserialize_ObjectVariant>
 8010b90:	4004      	ands	r4, r0
 8010b92:	e7ed      	b.n	8010b70 <read_submessage_info+0x2c>
 8010b94:	a988      	add	r1, sp, #544	@ 0x220
 8010b96:	4628      	mov	r0, r5
 8010b98:	f7fd ff0e 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8010b9c:	4234      	tst	r4, r6
 8010b9e:	d0ef      	beq.n	8010b80 <read_submessage_info+0x3c>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d0ed      	beq.n	8010b80 <read_submessage_info+0x3c>
 8010ba4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010ba8:	2b0d      	cmp	r3, #13
 8010baa:	d1e9      	bne.n	8010b80 <read_submessage_info+0x3c>
 8010bac:	a98a      	add	r1, sp, #552	@ 0x228
 8010bae:	4628      	mov	r0, r5
 8010bb0:	f7fe fca8 	bl	800f504 <ucdr_deserialize_int16_t>
 8010bb4:	b140      	cbz	r0, 8010bc8 <read_submessage_info+0x84>
 8010bb6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dd07      	ble.n	8010bce <read_submessage_info+0x8a>
 8010bbe:	f1b8 0f00 	cmp.w	r8, #0
 8010bc2:	bf14      	ite	ne
 8010bc4:	2001      	movne	r0, #1
 8010bc6:	2002      	moveq	r0, #2
 8010bc8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010bcc:	e7d8      	b.n	8010b80 <read_submessage_info+0x3c>
 8010bce:	2000      	movs	r0, #0
 8010bd0:	e7fa      	b.n	8010bc8 <read_submessage_info+0x84>
 8010bd2:	bf00      	nop

08010bd4 <read_submessage_list>:
 8010bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd8:	b097      	sub	sp, #92	@ 0x5c
 8010bda:	4ec1      	ldr	r6, [pc, #772]	@ (8010ee0 <read_submessage_list+0x30c>)
 8010bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010bde:	4604      	mov	r4, r0
 8010be0:	460d      	mov	r5, r1
 8010be2:	f04f 0801 	mov.w	r8, #1
 8010be6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010bea:	aa0c      	add	r2, sp, #48	@ 0x30
 8010bec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010bf0:	4628      	mov	r0, r5
 8010bf2:	f000 fff7 	bl	8011be4 <uxr_read_submessage_header>
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	f000 813e 	beq.w	8010e78 <read_submessage_list+0x2a4>
 8010bfc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010c00:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010c04:	3b02      	subs	r3, #2
 8010c06:	2b0d      	cmp	r3, #13
 8010c08:	d8ed      	bhi.n	8010be6 <read_submessage_list+0x12>
 8010c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8010c10 <read_submessage_list+0x3c>)
 8010c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c10:	08010e6f 	.word	0x08010e6f
 8010c14:	08010be7 	.word	0x08010be7
 8010c18:	08010e5f 	.word	0x08010e5f
 8010c1c:	08010dfd 	.word	0x08010dfd
 8010c20:	08010df3 	.word	0x08010df3
 8010c24:	08010be7 	.word	0x08010be7
 8010c28:	08010be7 	.word	0x08010be7
 8010c2c:	08010d53 	.word	0x08010d53
 8010c30:	08010ce3 	.word	0x08010ce3
 8010c34:	08010ca3 	.word	0x08010ca3
 8010c38:	08010be7 	.word	0x08010be7
 8010c3c:	08010be7 	.word	0x08010be7
 8010c40:	08010be7 	.word	0x08010be7
 8010c44:	08010c49 	.word	0x08010c49
 8010c48:	a910      	add	r1, sp, #64	@ 0x40
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f002 f9f0 	bl	8013030 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010c50:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010c54:	f1b9 0f00 	cmp.w	r9, #0
 8010c58:	f000 8116 	beq.w	8010e88 <read_submessage_list+0x2b4>
 8010c5c:	f001 f808 	bl	8011c70 <uxr_nanos>
 8010c60:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010c62:	4602      	mov	r2, r0
 8010c64:	460b      	mov	r3, r1
 8010c66:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010c68:	2100      	movs	r1, #0
 8010c6a:	468c      	mov	ip, r1
 8010c6c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010c70:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010c74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010c76:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010c78:	468c      	mov	ip, r1
 8010c7a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010c7e:	46e2      	mov	sl, ip
 8010c80:	46bc      	mov	ip, r7
 8010c82:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010c86:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010c8a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010c8e:	e9cd 7100 	strd	r7, r1, [sp]
 8010c92:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010c96:	9106      	str	r1, [sp, #24]
 8010c98:	4620      	mov	r0, r4
 8010c9a:	47c8      	blx	r9
 8010c9c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010ca0:	e7a1      	b.n	8010be6 <read_submessage_list+0x12>
 8010ca2:	a910      	add	r1, sp, #64	@ 0x40
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f002 f9b1 	bl	801300c <uxr_deserialize_HEARTBEAT_Payload>
 8010caa:	2100      	movs	r1, #0
 8010cac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010cb0:	f000 fe70 	bl	8011994 <uxr_stream_id_from_raw>
 8010cb4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010cb8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8010cba:	4639      	mov	r1, r7
 8010cbc:	f104 0008 	add.w	r0, r4, #8
 8010cc0:	f000 ff56 	bl	8011b70 <uxr_get_input_reliable_stream>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d08e      	beq.n	8010be6 <read_submessage_list+0x12>
 8010cc8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8010ccc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8010cd0:	f007 fb66 	bl	80183a0 <uxr_process_heartbeat>
 8010cd4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8010cd8:	463a      	mov	r2, r7
 8010cda:	4620      	mov	r0, r4
 8010cdc:	f7ff fdf4 	bl	80108c8 <write_submessage_acknack.isra.0>
 8010ce0:	e781      	b.n	8010be6 <read_submessage_list+0x12>
 8010ce2:	a910      	add	r1, sp, #64	@ 0x40
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	f002 f969 	bl	8012fbc <uxr_deserialize_ACKNACK_Payload>
 8010cea:	2100      	movs	r1, #0
 8010cec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8010cf0:	f000 fe50 	bl	8011994 <uxr_stream_id_from_raw>
 8010cf4:	900d      	str	r0, [sp, #52]	@ 0x34
 8010cf6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010cfa:	f104 0008 	add.w	r0, r4, #8
 8010cfe:	f000 ff23 	bl	8011b48 <uxr_get_output_reliable_stream>
 8010d02:	4607      	mov	r7, r0
 8010d04:	2800      	cmp	r0, #0
 8010d06:	f43f af6e 	beq.w	8010be6 <read_submessage_list+0x12>
 8010d0a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8010d0e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8010d12:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010d16:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010d1a:	b289      	uxth	r1, r1
 8010d1c:	f007 fe9a 	bl	8018a54 <uxr_process_acknack>
 8010d20:	4638      	mov	r0, r7
 8010d22:	f007 fe57 	bl	80189d4 <uxr_begin_output_nack_buffer_it>
 8010d26:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010d2a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8010d2e:	e006      	b.n	8010d3e <read_submessage_list+0x16a>
 8010d30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010d34:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010d38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010d3a:	6818      	ldr	r0, [r3, #0]
 8010d3c:	47c8      	blx	r9
 8010d3e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8010d42:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010d44:	4651      	mov	r1, sl
 8010d46:	4638      	mov	r0, r7
 8010d48:	f007 fe46 	bl	80189d8 <uxr_next_reliable_nack_buffer_to_send>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	d1ef      	bne.n	8010d30 <read_submessage_list+0x15c>
 8010d50:	e749      	b.n	8010be6 <read_submessage_list+0x12>
 8010d52:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010d56:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010d5a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010d5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8010d62:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010d66:	4651      	mov	r1, sl
 8010d68:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010d6c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8010d70:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010d74:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8010d7e:	f001 fe7d 	bl	8012a7c <uxr_deserialize_BaseObjectRequest>
 8010d82:	4650      	mov	r0, sl
 8010d84:	a90f      	add	r1, sp, #60	@ 0x3c
 8010d86:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8010d8a:	f000 fdc7 	bl	801191c <uxr_parse_base_object_request>
 8010d8e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8010d92:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010d94:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8010d98:	9110      	str	r1, [sp, #64]	@ 0x40
 8010d9a:	3f04      	subs	r7, #4
 8010d9c:	f009 090e 	and.w	r9, r9, #14
 8010da0:	b2bf      	uxth	r7, r7
 8010da2:	f1bb 0f00 	cmp.w	fp, #0
 8010da6:	d006      	beq.n	8010db6 <read_submessage_list+0x1e2>
 8010da8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	4652      	mov	r2, sl
 8010db0:	2300      	movs	r3, #0
 8010db2:	4620      	mov	r0, r4
 8010db4:	47d8      	blx	fp
 8010db6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010db8:	b16a      	cbz	r2, 8010dd6 <read_submessage_list+0x202>
 8010dba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	3802      	subs	r0, #2
 8010dc0:	e002      	b.n	8010dc8 <read_submessage_list+0x1f4>
 8010dc2:	3101      	adds	r1, #1
 8010dc4:	4291      	cmp	r1, r2
 8010dc6:	d006      	beq.n	8010dd6 <read_submessage_list+0x202>
 8010dc8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010dcc:	4553      	cmp	r3, sl
 8010dce:	d1f8      	bne.n	8010dc2 <read_submessage_list+0x1ee>
 8010dd0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	545a      	strb	r2, [r3, r1]
 8010dd6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8010dda:	9102      	str	r1, [sp, #8]
 8010ddc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010dde:	9101      	str	r1, [sp, #4]
 8010de0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010de2:	9100      	str	r1, [sp, #0]
 8010de4:	464b      	mov	r3, r9
 8010de6:	463a      	mov	r2, r7
 8010de8:	4629      	mov	r1, r5
 8010dea:	4620      	mov	r0, r4
 8010dec:	f007 fef0 	bl	8018bd0 <read_submessage_format>
 8010df0:	e6f9      	b.n	8010be6 <read_submessage_list+0x12>
 8010df2:	4629      	mov	r1, r5
 8010df4:	4620      	mov	r0, r4
 8010df6:	f7ff fea5 	bl	8010b44 <read_submessage_info>
 8010dfa:	e6f4      	b.n	8010be6 <read_submessage_list+0x12>
 8010dfc:	2a00      	cmp	r2, #0
 8010dfe:	d03e      	beq.n	8010e7e <read_submessage_list+0x2aa>
 8010e00:	a910      	add	r1, sp, #64	@ 0x40
 8010e02:	4628      	mov	r0, r5
 8010e04:	f002 f836 	bl	8012e74 <uxr_deserialize_STATUS_Payload>
 8010e08:	a90e      	add	r1, sp, #56	@ 0x38
 8010e0a:	aa0d      	add	r2, sp, #52	@ 0x34
 8010e0c:	a810      	add	r0, sp, #64	@ 0x40
 8010e0e:	f000 fd85 	bl	801191c <uxr_parse_base_object_request>
 8010e12:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010e16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010e18:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010e1c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8010e20:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010e22:	f1ba 0f00 	cmp.w	sl, #0
 8010e26:	d006      	beq.n	8010e36 <read_submessage_list+0x262>
 8010e28:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	463a      	mov	r2, r7
 8010e30:	464b      	mov	r3, r9
 8010e32:	4620      	mov	r0, r4
 8010e34:	47d0      	blx	sl
 8010e36:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010e38:	2a00      	cmp	r2, #0
 8010e3a:	f43f aed4 	beq.w	8010be6 <read_submessage_list+0x12>
 8010e3e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8010e40:	2100      	movs	r1, #0
 8010e42:	3802      	subs	r0, #2
 8010e44:	e003      	b.n	8010e4e <read_submessage_list+0x27a>
 8010e46:	3101      	adds	r1, #1
 8010e48:	4291      	cmp	r1, r2
 8010e4a:	f43f aecc 	beq.w	8010be6 <read_submessage_list+0x12>
 8010e4e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010e52:	42bb      	cmp	r3, r7
 8010e54:	d1f7      	bne.n	8010e46 <read_submessage_list+0x272>
 8010e56:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010e58:	f803 9001 	strb.w	r9, [r3, r1]
 8010e5c:	e6c3      	b.n	8010be6 <read_submessage_list+0x12>
 8010e5e:	2a00      	cmp	r2, #0
 8010e60:	f47f aec1 	bne.w	8010be6 <read_submessage_list+0x12>
 8010e64:	4629      	mov	r1, r5
 8010e66:	4620      	mov	r0, r4
 8010e68:	f000 fc9e 	bl	80117a8 <uxr_read_create_session_status>
 8010e6c:	e6bb      	b.n	8010be6 <read_submessage_list+0x12>
 8010e6e:	4629      	mov	r1, r5
 8010e70:	4620      	mov	r0, r4
 8010e72:	f7ff fcf3 	bl	801085c <read_submessage_get_info>
 8010e76:	e6b6      	b.n	8010be6 <read_submessage_list+0x12>
 8010e78:	b017      	add	sp, #92	@ 0x5c
 8010e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7e:	4629      	mov	r1, r5
 8010e80:	4620      	mov	r0, r4
 8010e82:	f000 fc9d 	bl	80117c0 <uxr_read_delete_session_status>
 8010e86:	e6ae      	b.n	8010be6 <read_submessage_list+0x12>
 8010e88:	f000 fef2 	bl	8011c70 <uxr_nanos>
 8010e8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010e8e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010e90:	464f      	mov	r7, r9
 8010e92:	fbc3 2706 	smlal	r2, r7, r3, r6
 8010e96:	1812      	adds	r2, r2, r0
 8010e98:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e9a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010e9c:	eb47 0101 	adc.w	r1, r7, r1
 8010ea0:	464f      	mov	r7, r9
 8010ea2:	fbc3 0706 	smlal	r0, r7, r3, r6
 8010ea6:	463b      	mov	r3, r7
 8010ea8:	4684      	mov	ip, r0
 8010eaa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8010eae:	fbc7 0906 	smlal	r0, r9, r7, r6
 8010eb2:	eb1c 0c00 	adds.w	ip, ip, r0
 8010eb6:	464f      	mov	r7, r9
 8010eb8:	eb43 0307 	adc.w	r3, r3, r7
 8010ebc:	ebb2 0c0c 	subs.w	ip, r2, ip
 8010ec0:	eb61 0303 	sbc.w	r3, r1, r3
 8010ec4:	0fda      	lsrs	r2, r3, #31
 8010ec6:	eb12 020c 	adds.w	r2, r2, ip
 8010eca:	f143 0300 	adc.w	r3, r3, #0
 8010ece:	0852      	lsrs	r2, r2, #1
 8010ed0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8010ed4:	105b      	asrs	r3, r3, #1
 8010ed6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8010eda:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8010ede:	e6dd      	b.n	8010c9c <read_submessage_list+0xc8>
 8010ee0:	3b9aca00 	.word	0x3b9aca00

08010ee4 <listen_message_reliably>:
 8010ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	1e0b      	subs	r3, r1, #0
 8010eea:	b09d      	sub	sp, #116	@ 0x74
 8010eec:	bfb8      	it	lt
 8010eee:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8010ef2:	4680      	mov	r8, r0
 8010ef4:	9305      	str	r3, [sp, #20]
 8010ef6:	f000 fea1 	bl	8011c3c <uxr_millis>
 8010efa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8010efe:	4681      	mov	r9, r0
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	f000 80a1 	beq.w	8011048 <listen_message_reliably+0x164>
 8010f06:	2600      	movs	r6, #0
 8010f08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f0c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8010f10:	9303      	str	r3, [sp, #12]
 8010f12:	4630      	mov	r0, r6
 8010f14:	460f      	mov	r7, r1
 8010f16:	e00f      	b.n	8010f38 <listen_message_reliably+0x54>
 8010f18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010f1c:	9903      	ldr	r1, [sp, #12]
 8010f1e:	455a      	cmp	r2, fp
 8010f20:	f106 0601 	add.w	r6, r6, #1
 8010f24:	eb73 0101 	sbcs.w	r1, r3, r1
 8010f28:	b2f0      	uxtb	r0, r6
 8010f2a:	da01      	bge.n	8010f30 <listen_message_reliably+0x4c>
 8010f2c:	4693      	mov	fp, r2
 8010f2e:	9303      	str	r3, [sp, #12]
 8010f30:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010f34:	4283      	cmp	r3, r0
 8010f36:	d960      	bls.n	8010ffa <listen_message_reliably+0x116>
 8010f38:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010f3c:	2102      	movs	r1, #2
 8010f3e:	2201      	movs	r2, #1
 8010f40:	f000 fcfe 	bl	8011940 <uxr_stream_id>
 8010f44:	00e4      	lsls	r4, r4, #3
 8010f46:	f104 0520 	add.w	r5, r4, #32
 8010f4a:	4445      	add	r5, r8
 8010f4c:	4601      	mov	r1, r0
 8010f4e:	463b      	mov	r3, r7
 8010f50:	464a      	mov	r2, r9
 8010f52:	4628      	mov	r0, r5
 8010f54:	9109      	str	r1, [sp, #36]	@ 0x24
 8010f56:	f007 fd13 	bl	8018980 <uxr_update_output_stream_heartbeat_timestamp>
 8010f5a:	eb08 0304 	add.w	r3, r8, r4
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d0da      	beq.n	8010f18 <listen_message_reliably+0x34>
 8010f62:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010f66:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010f6a:	9304      	str	r3, [sp, #16]
 8010f6c:	4640      	mov	r0, r8
 8010f6e:	f000 fcaf 	bl	80118d0 <uxr_session_header_offset>
 8010f72:	3501      	adds	r5, #1
 8010f74:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010f78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010f7c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8010f80:	2300      	movs	r3, #0
 8010f82:	2211      	movs	r2, #17
 8010f84:	9000      	str	r0, [sp, #0]
 8010f86:	a90c      	add	r1, sp, #48	@ 0x30
 8010f88:	4650      	mov	r0, sl
 8010f8a:	f7ff f8ff 	bl	801018c <ucdr_init_buffer_origin_offset>
 8010f8e:	2300      	movs	r3, #0
 8010f90:	2205      	movs	r2, #5
 8010f92:	210b      	movs	r1, #11
 8010f94:	4650      	mov	r0, sl
 8010f96:	f000 fe0b 	bl	8011bb0 <uxr_buffer_submessage_header>
 8010f9a:	8968      	ldrh	r0, [r5, #10]
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	f007 fee1 	bl	8018d64 <uxr_seq_num_add>
 8010fa2:	892b      	ldrh	r3, [r5, #8]
 8010fa4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010fa8:	4602      	mov	r2, r0
 8010faa:	9b04      	ldr	r3, [sp, #16]
 8010fac:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010fb0:	a90a      	add	r1, sp, #40	@ 0x28
 8010fb2:	4650      	mov	r0, sl
 8010fb4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010fb8:	f002 f814 	bl	8012fe4 <uxr_serialize_HEARTBEAT_Payload>
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	4611      	mov	r1, r2
 8010fc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	f000 fc2e 	bl	8011824 <uxr_stamp_session_header>
 8010fc8:	4650      	mov	r0, sl
 8010fca:	f7ff f91d 	bl	8010208 <ucdr_buffer_length>
 8010fce:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8010fd2:	4602      	mov	r2, r0
 8010fd4:	a90c      	add	r1, sp, #48	@ 0x30
 8010fd6:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010fda:	4444      	add	r4, r8
 8010fdc:	47a8      	blx	r5
 8010fde:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8010fe2:	9903      	ldr	r1, [sp, #12]
 8010fe4:	455a      	cmp	r2, fp
 8010fe6:	f106 0601 	add.w	r6, r6, #1
 8010fea:	eb73 0101 	sbcs.w	r1, r3, r1
 8010fee:	b2f0      	uxtb	r0, r6
 8010ff0:	db9c      	blt.n	8010f2c <listen_message_reliably+0x48>
 8010ff2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010ff6:	4283      	cmp	r3, r0
 8010ff8:	d89e      	bhi.n	8010f38 <listen_message_reliably+0x54>
 8010ffa:	9a03      	ldr	r2, [sp, #12]
 8010ffc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011000:	429a      	cmp	r2, r3
 8011002:	bf08      	it	eq
 8011004:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011008:	d01e      	beq.n	8011048 <listen_message_reliably+0x164>
 801100a:	ebab 0309 	sub.w	r3, fp, r9
 801100e:	9905      	ldr	r1, [sp, #20]
 8011010:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011014:	2b00      	cmp	r3, #0
 8011016:	bf08      	it	eq
 8011018:	2301      	moveq	r3, #1
 801101a:	4299      	cmp	r1, r3
 801101c:	bfa8      	it	ge
 801101e:	4619      	movge	r1, r3
 8011020:	6894      	ldr	r4, [r2, #8]
 8011022:	6810      	ldr	r0, [r2, #0]
 8011024:	4689      	mov	r9, r1
 8011026:	460b      	mov	r3, r1
 8011028:	aa08      	add	r2, sp, #32
 801102a:	a907      	add	r1, sp, #28
 801102c:	47a0      	blx	r4
 801102e:	b968      	cbnz	r0, 801104c <listen_message_reliably+0x168>
 8011030:	9b05      	ldr	r3, [sp, #20]
 8011032:	eba3 0309 	sub.w	r3, r3, r9
 8011036:	2b00      	cmp	r3, #0
 8011038:	9305      	str	r3, [sp, #20]
 801103a:	f73f af5c 	bgt.w	8010ef6 <listen_message_reliably+0x12>
 801103e:	4604      	mov	r4, r0
 8011040:	4620      	mov	r0, r4
 8011042:	b01d      	add	sp, #116	@ 0x74
 8011044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011048:	9b05      	ldr	r3, [sp, #20]
 801104a:	e7e0      	b.n	801100e <listen_message_reliably+0x12a>
 801104c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011050:	4604      	mov	r4, r0
 8011052:	a80c      	add	r0, sp, #48	@ 0x30
 8011054:	f7ff f8ac 	bl	80101b0 <ucdr_init_buffer>
 8011058:	2500      	movs	r5, #0
 801105a:	f10d 031a 	add.w	r3, sp, #26
 801105e:	aa06      	add	r2, sp, #24
 8011060:	a90c      	add	r1, sp, #48	@ 0x30
 8011062:	4640      	mov	r0, r8
 8011064:	f88d 5018 	strb.w	r5, [sp, #24]
 8011068:	f000 fbf0 	bl	801184c <uxr_read_session_header>
 801106c:	b918      	cbnz	r0, 8011076 <listen_message_reliably+0x192>
 801106e:	4620      	mov	r0, r4
 8011070:	b01d      	add	sp, #116	@ 0x74
 8011072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011076:	4629      	mov	r1, r5
 8011078:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801107c:	f000 fc8a 	bl	8011994 <uxr_stream_id_from_raw>
 8011080:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011084:	2d01      	cmp	r5, #1
 8011086:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801108a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801108e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011092:	d04b      	beq.n	801112c <listen_message_reliably+0x248>
 8011094:	2d02      	cmp	r5, #2
 8011096:	d00f      	beq.n	80110b8 <listen_message_reliably+0x1d4>
 8011098:	2d00      	cmp	r5, #0
 801109a:	d1e8      	bne.n	801106e <listen_message_reliably+0x18a>
 801109c:	4629      	mov	r1, r5
 801109e:	4628      	mov	r0, r5
 80110a0:	f000 fc78 	bl	8011994 <uxr_stream_id_from_raw>
 80110a4:	a90c      	add	r1, sp, #48	@ 0x30
 80110a6:	4602      	mov	r2, r0
 80110a8:	4640      	mov	r0, r8
 80110aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80110ac:	f7ff fd92 	bl	8010bd4 <read_submessage_list>
 80110b0:	4620      	mov	r0, r4
 80110b2:	b01d      	add	sp, #116	@ 0x74
 80110b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b8:	4631      	mov	r1, r6
 80110ba:	f108 0008 	add.w	r0, r8, #8
 80110be:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80110c2:	f000 fd55 	bl	8011b70 <uxr_get_input_reliable_stream>
 80110c6:	4607      	mov	r7, r0
 80110c8:	b338      	cbz	r0, 801111a <listen_message_reliably+0x236>
 80110ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110cc:	9203      	str	r2, [sp, #12]
 80110ce:	a80c      	add	r0, sp, #48	@ 0x30
 80110d0:	f7ff f89e 	bl	8010210 <ucdr_buffer_remaining>
 80110d4:	4603      	mov	r3, r0
 80110d6:	f10d 0019 	add.w	r0, sp, #25
 80110da:	9000      	str	r0, [sp, #0]
 80110dc:	9a03      	ldr	r2, [sp, #12]
 80110de:	4651      	mov	r1, sl
 80110e0:	4638      	mov	r0, r7
 80110e2:	f007 f863 	bl	80181ac <uxr_receive_reliable_message>
 80110e6:	b1c0      	cbz	r0, 801111a <listen_message_reliably+0x236>
 80110e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80110ec:	b393      	cbz	r3, 8011154 <listen_message_reliably+0x270>
 80110ee:	ad14      	add	r5, sp, #80	@ 0x50
 80110f0:	f04f 0a02 	mov.w	sl, #2
 80110f4:	e00a      	b.n	801110c <listen_message_reliably+0x228>
 80110f6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80110fa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80110fe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011104:	4629      	mov	r1, r5
 8011106:	4640      	mov	r0, r8
 8011108:	f7ff fd64 	bl	8010bd4 <read_submessage_list>
 801110c:	2204      	movs	r2, #4
 801110e:	4629      	mov	r1, r5
 8011110:	4638      	mov	r0, r7
 8011112:	f007 f8cb 	bl	80182ac <uxr_next_input_reliable_buffer_available>
 8011116:	2800      	cmp	r0, #0
 8011118:	d1ed      	bne.n	80110f6 <listen_message_reliably+0x212>
 801111a:	4640      	mov	r0, r8
 801111c:	4632      	mov	r2, r6
 801111e:	4649      	mov	r1, r9
 8011120:	f7ff fbd2 	bl	80108c8 <write_submessage_acknack.isra.0>
 8011124:	4620      	mov	r0, r4
 8011126:	b01d      	add	sp, #116	@ 0x74
 8011128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112c:	4631      	mov	r1, r6
 801112e:	f108 0008 	add.w	r0, r8, #8
 8011132:	f000 fd13 	bl	8011b5c <uxr_get_input_best_effort_stream>
 8011136:	2800      	cmp	r0, #0
 8011138:	d099      	beq.n	801106e <listen_message_reliably+0x18a>
 801113a:	4651      	mov	r1, sl
 801113c:	f006 ffa2 	bl	8018084 <uxr_receive_best_effort_message>
 8011140:	2800      	cmp	r0, #0
 8011142:	d094      	beq.n	801106e <listen_message_reliably+0x18a>
 8011144:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011148:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801114a:	a90c      	add	r1, sp, #48	@ 0x30
 801114c:	4640      	mov	r0, r8
 801114e:	f7ff fd41 	bl	8010bd4 <read_submessage_list>
 8011152:	e78c      	b.n	801106e <listen_message_reliably+0x18a>
 8011154:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011158:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801115a:	a90c      	add	r1, sp, #48	@ 0x30
 801115c:	4640      	mov	r0, r8
 801115e:	f7ff fd39 	bl	8010bd4 <read_submessage_list>
 8011162:	e7c4      	b.n	80110ee <listen_message_reliably+0x20a>

08011164 <uxr_run_session_timeout>:
 8011164:	b570      	push	{r4, r5, r6, lr}
 8011166:	4604      	mov	r4, r0
 8011168:	460d      	mov	r5, r1
 801116a:	f000 fd67 	bl	8011c3c <uxr_millis>
 801116e:	4606      	mov	r6, r0
 8011170:	4620      	mov	r0, r4
 8011172:	f7ff fc71 	bl	8010a58 <uxr_flash_output_streams>
 8011176:	4629      	mov	r1, r5
 8011178:	4620      	mov	r0, r4
 801117a:	f7ff feb3 	bl	8010ee4 <listen_message_reliably>
 801117e:	f000 fd5d 	bl	8011c3c <uxr_millis>
 8011182:	1b83      	subs	r3, r0, r6
 8011184:	1ae9      	subs	r1, r5, r3
 8011186:	2900      	cmp	r1, #0
 8011188:	dcf6      	bgt.n	8011178 <uxr_run_session_timeout+0x14>
 801118a:	f104 0008 	add.w	r0, r4, #8
 801118e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011192:	f000 bcf7 	b.w	8011b84 <uxr_output_streams_confirmed>
 8011196:	bf00      	nop

08011198 <uxr_run_session_until_data>:
 8011198:	b570      	push	{r4, r5, r6, lr}
 801119a:	4604      	mov	r4, r0
 801119c:	460d      	mov	r5, r1
 801119e:	f000 fd4d 	bl	8011c3c <uxr_millis>
 80111a2:	4606      	mov	r6, r0
 80111a4:	4620      	mov	r0, r4
 80111a6:	f7ff fc57 	bl	8010a58 <uxr_flash_output_streams>
 80111aa:	2300      	movs	r3, #0
 80111ac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80111b0:	4629      	mov	r1, r5
 80111b2:	e005      	b.n	80111c0 <uxr_run_session_until_data+0x28>
 80111b4:	f000 fd42 	bl	8011c3c <uxr_millis>
 80111b8:	1b83      	subs	r3, r0, r6
 80111ba:	1ae9      	subs	r1, r5, r3
 80111bc:	2900      	cmp	r1, #0
 80111be:	dd07      	ble.n	80111d0 <uxr_run_session_until_data+0x38>
 80111c0:	4620      	mov	r0, r4
 80111c2:	f7ff fe8f 	bl	8010ee4 <listen_message_reliably>
 80111c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80111ca:	2800      	cmp	r0, #0
 80111cc:	d0f2      	beq.n	80111b4 <uxr_run_session_until_data+0x1c>
 80111ce:	bd70      	pop	{r4, r5, r6, pc}
 80111d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80111d4:	bd70      	pop	{r4, r5, r6, pc}
 80111d6:	bf00      	nop

080111d8 <uxr_run_session_until_confirm_delivery>:
 80111d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111dc:	4606      	mov	r6, r0
 80111de:	460d      	mov	r5, r1
 80111e0:	f000 fd2c 	bl	8011c3c <uxr_millis>
 80111e4:	4607      	mov	r7, r0
 80111e6:	4630      	mov	r0, r6
 80111e8:	f7ff fc36 	bl	8010a58 <uxr_flash_output_streams>
 80111ec:	2d00      	cmp	r5, #0
 80111ee:	f106 0808 	add.w	r8, r6, #8
 80111f2:	bfa8      	it	ge
 80111f4:	462c      	movge	r4, r5
 80111f6:	da07      	bge.n	8011208 <uxr_run_session_until_confirm_delivery+0x30>
 80111f8:	e00e      	b.n	8011218 <uxr_run_session_until_confirm_delivery+0x40>
 80111fa:	f7ff fe73 	bl	8010ee4 <listen_message_reliably>
 80111fe:	f000 fd1d 	bl	8011c3c <uxr_millis>
 8011202:	1bc3      	subs	r3, r0, r7
 8011204:	1aec      	subs	r4, r5, r3
 8011206:	d407      	bmi.n	8011218 <uxr_run_session_until_confirm_delivery+0x40>
 8011208:	4640      	mov	r0, r8
 801120a:	f000 fcbb 	bl	8011b84 <uxr_output_streams_confirmed>
 801120e:	4603      	mov	r3, r0
 8011210:	4621      	mov	r1, r4
 8011212:	4630      	mov	r0, r6
 8011214:	2b00      	cmp	r3, #0
 8011216:	d0f0      	beq.n	80111fa <uxr_run_session_until_confirm_delivery+0x22>
 8011218:	4640      	mov	r0, r8
 801121a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801121e:	f000 bcb1 	b.w	8011b84 <uxr_output_streams_confirmed>
 8011222:	bf00      	nop

08011224 <uxr_run_session_until_all_status>:
 8011224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011228:	9c08      	ldr	r4, [sp, #32]
 801122a:	4606      	mov	r6, r0
 801122c:	460f      	mov	r7, r1
 801122e:	4691      	mov	r9, r2
 8011230:	461d      	mov	r5, r3
 8011232:	f7ff fc11 	bl	8010a58 <uxr_flash_output_streams>
 8011236:	b124      	cbz	r4, 8011242 <uxr_run_session_until_all_status+0x1e>
 8011238:	4622      	mov	r2, r4
 801123a:	21ff      	movs	r1, #255	@ 0xff
 801123c:	4628      	mov	r0, r5
 801123e:	f009 ff1c 	bl	801b07a <memset>
 8011242:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011246:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011248:	f000 fcf8 	bl	8011c3c <uxr_millis>
 801124c:	3d01      	subs	r5, #1
 801124e:	f1a9 0902 	sub.w	r9, r9, #2
 8011252:	4680      	mov	r8, r0
 8011254:	4639      	mov	r1, r7
 8011256:	4630      	mov	r0, r6
 8011258:	f7ff fe44 	bl	8010ee4 <listen_message_reliably>
 801125c:	f000 fcee 	bl	8011c3c <uxr_millis>
 8011260:	eba0 0008 	sub.w	r0, r0, r8
 8011264:	1a39      	subs	r1, r7, r0
 8011266:	b344      	cbz	r4, 80112ba <uxr_run_session_until_all_status+0x96>
 8011268:	4628      	mov	r0, r5
 801126a:	46ac      	mov	ip, r5
 801126c:	2301      	movs	r3, #1
 801126e:	e002      	b.n	8011276 <uxr_run_session_until_all_status+0x52>
 8011270:	42a3      	cmp	r3, r4
 8011272:	d20d      	bcs.n	8011290 <uxr_run_session_until_all_status+0x6c>
 8011274:	3301      	adds	r3, #1
 8011276:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801127a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801127e:	d1f7      	bne.n	8011270 <uxr_run_session_until_all_status+0x4c>
 8011280:	42a3      	cmp	r3, r4
 8011282:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011286:	d213      	bcs.n	80112b0 <uxr_run_session_until_all_status+0x8c>
 8011288:	2a00      	cmp	r2, #0
 801128a:	d0f3      	beq.n	8011274 <uxr_run_session_until_all_status+0x50>
 801128c:	2900      	cmp	r1, #0
 801128e:	dce2      	bgt.n	8011256 <uxr_run_session_until_all_status+0x32>
 8011290:	2300      	movs	r3, #0
 8011292:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011294:	442c      	add	r4, r5
 8011296:	e001      	b.n	801129c <uxr_run_session_until_all_status+0x78>
 8011298:	2b01      	cmp	r3, #1
 801129a:	d812      	bhi.n	80112c2 <uxr_run_session_until_all_status+0x9e>
 801129c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80112a0:	4284      	cmp	r4, r0
 80112a2:	d1f9      	bne.n	8011298 <uxr_run_session_until_all_status+0x74>
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	bf8c      	ite	hi
 80112a8:	2000      	movhi	r0, #0
 80112aa:	2001      	movls	r0, #1
 80112ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112b0:	2900      	cmp	r1, #0
 80112b2:	dded      	ble.n	8011290 <uxr_run_session_until_all_status+0x6c>
 80112b4:	2a00      	cmp	r2, #0
 80112b6:	d1ce      	bne.n	8011256 <uxr_run_session_until_all_status+0x32>
 80112b8:	e7ea      	b.n	8011290 <uxr_run_session_until_all_status+0x6c>
 80112ba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80112bc:	2001      	movs	r0, #1
 80112be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112c2:	2000      	movs	r0, #0
 80112c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080112c8 <wait_session_status>:
 80112c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112cc:	4604      	mov	r4, r0
 80112ce:	b09d      	sub	sp, #116	@ 0x74
 80112d0:	20ff      	movs	r0, #255	@ 0xff
 80112d2:	7160      	strb	r0, [r4, #5]
 80112d4:	9303      	str	r3, [sp, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f000 80b6 	beq.w	8011448 <wait_session_status+0x180>
 80112dc:	468a      	mov	sl, r1
 80112de:	4691      	mov	r9, r2
 80112e0:	f04f 0b00 	mov.w	fp, #0
 80112e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112e6:	464a      	mov	r2, r9
 80112e8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80112ec:	4651      	mov	r1, sl
 80112ee:	47a8      	blx	r5
 80112f0:	f000 fca4 	bl	8011c3c <uxr_millis>
 80112f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80112f8:	4605      	mov	r5, r0
 80112fa:	e009      	b.n	8011310 <wait_session_status+0x48>
 80112fc:	f000 fc9e 	bl	8011c3c <uxr_millis>
 8011300:	1b40      	subs	r0, r0, r5
 8011302:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011306:	2b00      	cmp	r3, #0
 8011308:	dd40      	ble.n	801138c <wait_session_status+0xc4>
 801130a:	7960      	ldrb	r0, [r4, #5]
 801130c:	28ff      	cmp	r0, #255	@ 0xff
 801130e:	d145      	bne.n	801139c <wait_session_status+0xd4>
 8011310:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011312:	a908      	add	r1, sp, #32
 8011314:	6896      	ldr	r6, [r2, #8]
 8011316:	6810      	ldr	r0, [r2, #0]
 8011318:	aa09      	add	r2, sp, #36	@ 0x24
 801131a:	47b0      	blx	r6
 801131c:	2800      	cmp	r0, #0
 801131e:	d0ed      	beq.n	80112fc <wait_session_status+0x34>
 8011320:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011324:	a80c      	add	r0, sp, #48	@ 0x30
 8011326:	f7fe ff43 	bl	80101b0 <ucdr_init_buffer>
 801132a:	2600      	movs	r6, #0
 801132c:	f10d 031e 	add.w	r3, sp, #30
 8011330:	aa07      	add	r2, sp, #28
 8011332:	a90c      	add	r1, sp, #48	@ 0x30
 8011334:	4620      	mov	r0, r4
 8011336:	f88d 601c 	strb.w	r6, [sp, #28]
 801133a:	f000 fa87 	bl	801184c <uxr_read_session_header>
 801133e:	2800      	cmp	r0, #0
 8011340:	d0dc      	beq.n	80112fc <wait_session_status+0x34>
 8011342:	4631      	mov	r1, r6
 8011344:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011348:	f000 fb24 	bl	8011994 <uxr_stream_id_from_raw>
 801134c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011350:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011354:	9302      	str	r3, [sp, #8]
 8011356:	2f01      	cmp	r7, #1
 8011358:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801135c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011360:	d05c      	beq.n	801141c <wait_session_status+0x154>
 8011362:	2f02      	cmp	r7, #2
 8011364:	d020      	beq.n	80113a8 <wait_session_status+0xe0>
 8011366:	2f00      	cmp	r7, #0
 8011368:	d1c8      	bne.n	80112fc <wait_session_status+0x34>
 801136a:	4639      	mov	r1, r7
 801136c:	4638      	mov	r0, r7
 801136e:	f000 fb11 	bl	8011994 <uxr_stream_id_from_raw>
 8011372:	a90c      	add	r1, sp, #48	@ 0x30
 8011374:	4602      	mov	r2, r0
 8011376:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011378:	4620      	mov	r0, r4
 801137a:	f7ff fc2b 	bl	8010bd4 <read_submessage_list>
 801137e:	f000 fc5d 	bl	8011c3c <uxr_millis>
 8011382:	1b40      	subs	r0, r0, r5
 8011384:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011388:	2b00      	cmp	r3, #0
 801138a:	dcbe      	bgt.n	801130a <wait_session_status+0x42>
 801138c:	9b03      	ldr	r3, [sp, #12]
 801138e:	7960      	ldrb	r0, [r4, #5]
 8011390:	f10b 0b01 	add.w	fp, fp, #1
 8011394:	455b      	cmp	r3, fp
 8011396:	d001      	beq.n	801139c <wait_session_status+0xd4>
 8011398:	28ff      	cmp	r0, #255	@ 0xff
 801139a:	d0a3      	beq.n	80112e4 <wait_session_status+0x1c>
 801139c:	38ff      	subs	r0, #255	@ 0xff
 801139e:	bf18      	it	ne
 80113a0:	2001      	movne	r0, #1
 80113a2:	b01d      	add	sp, #116	@ 0x74
 80113a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80113ac:	9304      	str	r3, [sp, #16]
 80113ae:	4631      	mov	r1, r6
 80113b0:	f104 0008 	add.w	r0, r4, #8
 80113b4:	f000 fbdc 	bl	8011b70 <uxr_get_input_reliable_stream>
 80113b8:	4680      	mov	r8, r0
 80113ba:	b348      	cbz	r0, 8011410 <wait_session_status+0x148>
 80113bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80113be:	9205      	str	r2, [sp, #20]
 80113c0:	a80c      	add	r0, sp, #48	@ 0x30
 80113c2:	f7fe ff25 	bl	8010210 <ucdr_buffer_remaining>
 80113c6:	4603      	mov	r3, r0
 80113c8:	f10d 001d 	add.w	r0, sp, #29
 80113cc:	9000      	str	r0, [sp, #0]
 80113ce:	9a05      	ldr	r2, [sp, #20]
 80113d0:	9902      	ldr	r1, [sp, #8]
 80113d2:	4640      	mov	r0, r8
 80113d4:	f006 feea 	bl	80181ac <uxr_receive_reliable_message>
 80113d8:	b1d0      	cbz	r0, 8011410 <wait_session_status+0x148>
 80113da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d03a      	beq.n	8011458 <wait_session_status+0x190>
 80113e2:	9f04      	ldr	r7, [sp, #16]
 80113e4:	e00a      	b.n	80113fc <wait_session_status+0x134>
 80113e6:	f04f 0302 	mov.w	r3, #2
 80113ea:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80113ee:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80113f2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80113f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80113f8:	f7ff fbec 	bl	8010bd4 <read_submessage_list>
 80113fc:	a914      	add	r1, sp, #80	@ 0x50
 80113fe:	2204      	movs	r2, #4
 8011400:	4640      	mov	r0, r8
 8011402:	f006 ff53 	bl	80182ac <uxr_next_input_reliable_buffer_available>
 8011406:	4603      	mov	r3, r0
 8011408:	a914      	add	r1, sp, #80	@ 0x50
 801140a:	4620      	mov	r0, r4
 801140c:	2b00      	cmp	r3, #0
 801140e:	d1ea      	bne.n	80113e6 <wait_session_status+0x11e>
 8011410:	9904      	ldr	r1, [sp, #16]
 8011412:	4632      	mov	r2, r6
 8011414:	4620      	mov	r0, r4
 8011416:	f7ff fa57 	bl	80108c8 <write_submessage_acknack.isra.0>
 801141a:	e76f      	b.n	80112fc <wait_session_status+0x34>
 801141c:	4631      	mov	r1, r6
 801141e:	f104 0008 	add.w	r0, r4, #8
 8011422:	f000 fb9b 	bl	8011b5c <uxr_get_input_best_effort_stream>
 8011426:	2800      	cmp	r0, #0
 8011428:	f43f af68 	beq.w	80112fc <wait_session_status+0x34>
 801142c:	9902      	ldr	r1, [sp, #8]
 801142e:	f006 fe29 	bl	8018084 <uxr_receive_best_effort_message>
 8011432:	2800      	cmp	r0, #0
 8011434:	f43f af62 	beq.w	80112fc <wait_session_status+0x34>
 8011438:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801143c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801143e:	a90c      	add	r1, sp, #48	@ 0x30
 8011440:	4620      	mov	r0, r4
 8011442:	f7ff fbc7 	bl	8010bd4 <read_submessage_list>
 8011446:	e759      	b.n	80112fc <wait_session_status+0x34>
 8011448:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801144a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801144e:	47a0      	blx	r4
 8011450:	2001      	movs	r0, #1
 8011452:	b01d      	add	sp, #116	@ 0x74
 8011454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011458:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801145c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801145e:	a90c      	add	r1, sp, #48	@ 0x30
 8011460:	4620      	mov	r0, r4
 8011462:	f7ff fbb7 	bl	8010bd4 <read_submessage_list>
 8011466:	e7bc      	b.n	80113e2 <wait_session_status+0x11a>

08011468 <uxr_delete_session_retries>:
 8011468:	b530      	push	{r4, r5, lr}
 801146a:	b08f      	sub	sp, #60	@ 0x3c
 801146c:	4604      	mov	r4, r0
 801146e:	460d      	mov	r5, r1
 8011470:	f000 fa2e 	bl	80118d0 <uxr_session_header_offset>
 8011474:	2300      	movs	r3, #0
 8011476:	2210      	movs	r2, #16
 8011478:	9000      	str	r0, [sp, #0]
 801147a:	a902      	add	r1, sp, #8
 801147c:	a806      	add	r0, sp, #24
 801147e:	f7fe fe85 	bl	801018c <ucdr_init_buffer_origin_offset>
 8011482:	a906      	add	r1, sp, #24
 8011484:	4620      	mov	r0, r4
 8011486:	f000 f973 	bl	8011770 <uxr_buffer_delete_session>
 801148a:	2200      	movs	r2, #0
 801148c:	4611      	mov	r1, r2
 801148e:	9b06      	ldr	r3, [sp, #24]
 8011490:	4620      	mov	r0, r4
 8011492:	f000 f9c7 	bl	8011824 <uxr_stamp_session_header>
 8011496:	a806      	add	r0, sp, #24
 8011498:	f7fe feb6 	bl	8010208 <ucdr_buffer_length>
 801149c:	462b      	mov	r3, r5
 801149e:	4602      	mov	r2, r0
 80114a0:	a902      	add	r1, sp, #8
 80114a2:	4620      	mov	r0, r4
 80114a4:	f7ff ff10 	bl	80112c8 <wait_session_status>
 80114a8:	b118      	cbz	r0, 80114b2 <uxr_delete_session_retries+0x4a>
 80114aa:	7960      	ldrb	r0, [r4, #5]
 80114ac:	fab0 f080 	clz	r0, r0
 80114b0:	0940      	lsrs	r0, r0, #5
 80114b2:	b00f      	add	sp, #60	@ 0x3c
 80114b4:	bd30      	pop	{r4, r5, pc}
 80114b6:	bf00      	nop

080114b8 <uxr_create_session>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	f100 0b08 	add.w	fp, r0, #8
 80114c0:	b0ab      	sub	sp, #172	@ 0xac
 80114c2:	4604      	mov	r4, r0
 80114c4:	4658      	mov	r0, fp
 80114c6:	f000 fa99 	bl	80119fc <uxr_reset_stream_storage>
 80114ca:	4620      	mov	r0, r4
 80114cc:	f000 fa00 	bl	80118d0 <uxr_session_header_offset>
 80114d0:	2300      	movs	r3, #0
 80114d2:	9000      	str	r0, [sp, #0]
 80114d4:	221c      	movs	r2, #28
 80114d6:	a90b      	add	r1, sp, #44	@ 0x2c
 80114d8:	a812      	add	r0, sp, #72	@ 0x48
 80114da:	f7fe fe57 	bl	801018c <ucdr_init_buffer_origin_offset>
 80114de:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80114e0:	8a1a      	ldrh	r2, [r3, #16]
 80114e2:	3a04      	subs	r2, #4
 80114e4:	b292      	uxth	r2, r2
 80114e6:	a912      	add	r1, sp, #72	@ 0x48
 80114e8:	4620      	mov	r0, r4
 80114ea:	f000 f917 	bl	801171c <uxr_buffer_create_session>
 80114ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80114f0:	4620      	mov	r0, r4
 80114f2:	f000 f983 	bl	80117fc <uxr_stamp_create_session_header>
 80114f6:	a812      	add	r0, sp, #72	@ 0x48
 80114f8:	f7fe fe86 	bl	8010208 <ucdr_buffer_length>
 80114fc:	23ff      	movs	r3, #255	@ 0xff
 80114fe:	7163      	strb	r3, [r4, #5]
 8011500:	230a      	movs	r3, #10
 8011502:	46da      	mov	sl, fp
 8011504:	9303      	str	r3, [sp, #12]
 8011506:	4683      	mov	fp, r0
 8011508:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801150a:	465a      	mov	r2, fp
 801150c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011510:	a90b      	add	r1, sp, #44	@ 0x2c
 8011512:	47a8      	blx	r5
 8011514:	f000 fb92 	bl	8011c3c <uxr_millis>
 8011518:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801151c:	4605      	mov	r5, r0
 801151e:	e009      	b.n	8011534 <uxr_create_session+0x7c>
 8011520:	f000 fb8c 	bl	8011c3c <uxr_millis>
 8011524:	1b40      	subs	r0, r0, r5
 8011526:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801152a:	2b00      	cmp	r3, #0
 801152c:	7962      	ldrb	r2, [r4, #5]
 801152e:	dd38      	ble.n	80115a2 <uxr_create_session+0xea>
 8011530:	2aff      	cmp	r2, #255	@ 0xff
 8011532:	d13c      	bne.n	80115ae <uxr_create_session+0xf6>
 8011534:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011536:	a907      	add	r1, sp, #28
 8011538:	6896      	ldr	r6, [r2, #8]
 801153a:	6810      	ldr	r0, [r2, #0]
 801153c:	aa08      	add	r2, sp, #32
 801153e:	47b0      	blx	r6
 8011540:	2800      	cmp	r0, #0
 8011542:	d0ed      	beq.n	8011520 <uxr_create_session+0x68>
 8011544:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011548:	a81a      	add	r0, sp, #104	@ 0x68
 801154a:	f7fe fe31 	bl	80101b0 <ucdr_init_buffer>
 801154e:	2600      	movs	r6, #0
 8011550:	f10d 031a 	add.w	r3, sp, #26
 8011554:	aa06      	add	r2, sp, #24
 8011556:	a91a      	add	r1, sp, #104	@ 0x68
 8011558:	4620      	mov	r0, r4
 801155a:	f88d 6018 	strb.w	r6, [sp, #24]
 801155e:	f000 f975 	bl	801184c <uxr_read_session_header>
 8011562:	2800      	cmp	r0, #0
 8011564:	d0dc      	beq.n	8011520 <uxr_create_session+0x68>
 8011566:	4631      	mov	r1, r6
 8011568:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801156c:	f000 fa12 	bl	8011994 <uxr_stream_id_from_raw>
 8011570:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011574:	2e01      	cmp	r6, #1
 8011576:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801157a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801157e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011582:	d053      	beq.n	801162c <uxr_create_session+0x174>
 8011584:	2e02      	cmp	r6, #2
 8011586:	d018      	beq.n	80115ba <uxr_create_session+0x102>
 8011588:	2e00      	cmp	r6, #0
 801158a:	d1c9      	bne.n	8011520 <uxr_create_session+0x68>
 801158c:	4631      	mov	r1, r6
 801158e:	4630      	mov	r0, r6
 8011590:	f000 fa00 	bl	8011994 <uxr_stream_id_from_raw>
 8011594:	a91a      	add	r1, sp, #104	@ 0x68
 8011596:	4602      	mov	r2, r0
 8011598:	900a      	str	r0, [sp, #40]	@ 0x28
 801159a:	4620      	mov	r0, r4
 801159c:	f7ff fb1a 	bl	8010bd4 <read_submessage_list>
 80115a0:	e7be      	b.n	8011520 <uxr_create_session+0x68>
 80115a2:	9b03      	ldr	r3, [sp, #12]
 80115a4:	3b01      	subs	r3, #1
 80115a6:	9303      	str	r3, [sp, #12]
 80115a8:	d001      	beq.n	80115ae <uxr_create_session+0xf6>
 80115aa:	2aff      	cmp	r2, #255	@ 0xff
 80115ac:	d0ac      	beq.n	8011508 <uxr_create_session+0x50>
 80115ae:	2a00      	cmp	r2, #0
 80115b0:	d051      	beq.n	8011656 <uxr_create_session+0x19e>
 80115b2:	2000      	movs	r0, #0
 80115b4:	b02b      	add	sp, #172	@ 0xac
 80115b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80115be:	9304      	str	r3, [sp, #16]
 80115c0:	4639      	mov	r1, r7
 80115c2:	4650      	mov	r0, sl
 80115c4:	f000 fad4 	bl	8011b70 <uxr_get_input_reliable_stream>
 80115c8:	4680      	mov	r8, r0
 80115ca:	b348      	cbz	r0, 8011620 <uxr_create_session+0x168>
 80115cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80115ce:	9205      	str	r2, [sp, #20]
 80115d0:	a81a      	add	r0, sp, #104	@ 0x68
 80115d2:	f7fe fe1d 	bl	8010210 <ucdr_buffer_remaining>
 80115d6:	4603      	mov	r3, r0
 80115d8:	f10d 0019 	add.w	r0, sp, #25
 80115dc:	9000      	str	r0, [sp, #0]
 80115de:	9a05      	ldr	r2, [sp, #20]
 80115e0:	4649      	mov	r1, r9
 80115e2:	4640      	mov	r0, r8
 80115e4:	f006 fde2 	bl	80181ac <uxr_receive_reliable_message>
 80115e8:	b1d0      	cbz	r0, 8011620 <uxr_create_session+0x168>
 80115ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d038      	beq.n	8011664 <uxr_create_session+0x1ac>
 80115f2:	9e04      	ldr	r6, [sp, #16]
 80115f4:	e00a      	b.n	801160c <uxr_create_session+0x154>
 80115f6:	f04f 0302 	mov.w	r3, #2
 80115fa:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80115fe:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011602:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011608:	f7ff fae4 	bl	8010bd4 <read_submessage_list>
 801160c:	a922      	add	r1, sp, #136	@ 0x88
 801160e:	2204      	movs	r2, #4
 8011610:	4640      	mov	r0, r8
 8011612:	f006 fe4b 	bl	80182ac <uxr_next_input_reliable_buffer_available>
 8011616:	4603      	mov	r3, r0
 8011618:	a922      	add	r1, sp, #136	@ 0x88
 801161a:	4620      	mov	r0, r4
 801161c:	2b00      	cmp	r3, #0
 801161e:	d1ea      	bne.n	80115f6 <uxr_create_session+0x13e>
 8011620:	9904      	ldr	r1, [sp, #16]
 8011622:	463a      	mov	r2, r7
 8011624:	4620      	mov	r0, r4
 8011626:	f7ff f94f 	bl	80108c8 <write_submessage_acknack.isra.0>
 801162a:	e779      	b.n	8011520 <uxr_create_session+0x68>
 801162c:	4639      	mov	r1, r7
 801162e:	4650      	mov	r0, sl
 8011630:	f000 fa94 	bl	8011b5c <uxr_get_input_best_effort_stream>
 8011634:	2800      	cmp	r0, #0
 8011636:	f43f af73 	beq.w	8011520 <uxr_create_session+0x68>
 801163a:	4649      	mov	r1, r9
 801163c:	f006 fd22 	bl	8018084 <uxr_receive_best_effort_message>
 8011640:	2800      	cmp	r0, #0
 8011642:	f43f af6d 	beq.w	8011520 <uxr_create_session+0x68>
 8011646:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801164a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801164c:	a91a      	add	r1, sp, #104	@ 0x68
 801164e:	4620      	mov	r0, r4
 8011650:	f7ff fac0 	bl	8010bd4 <read_submessage_list>
 8011654:	e764      	b.n	8011520 <uxr_create_session+0x68>
 8011656:	4650      	mov	r0, sl
 8011658:	f000 f9d0 	bl	80119fc <uxr_reset_stream_storage>
 801165c:	2001      	movs	r0, #1
 801165e:	b02b      	add	sp, #172	@ 0xac
 8011660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011664:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011668:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801166a:	a91a      	add	r1, sp, #104	@ 0x68
 801166c:	4620      	mov	r0, r4
 801166e:	f7ff fab1 	bl	8010bd4 <read_submessage_list>
 8011672:	e7be      	b.n	80115f2 <uxr_create_session+0x13a>

08011674 <uxr_prepare_stream_to_write_submessage>:
 8011674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011678:	b082      	sub	sp, #8
 801167a:	4682      	mov	sl, r0
 801167c:	4610      	mov	r0, r2
 801167e:	4615      	mov	r5, r2
 8011680:	461e      	mov	r6, r3
 8011682:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011686:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801168a:	9101      	str	r1, [sp, #4]
 801168c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011690:	f000 face 	bl	8011c30 <uxr_submessage_padding>
 8011694:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011698:	f105 0904 	add.w	r9, r5, #4
 801169c:	2b01      	cmp	r3, #1
 801169e:	4481      	add	r9, r0
 80116a0:	d01d      	beq.n	80116de <uxr_prepare_stream_to_write_submessage+0x6a>
 80116a2:	2b02      	cmp	r3, #2
 80116a4:	d116      	bne.n	80116d4 <uxr_prepare_stream_to_write_submessage+0x60>
 80116a6:	4621      	mov	r1, r4
 80116a8:	f10a 0008 	add.w	r0, sl, #8
 80116ac:	f000 fa4c 	bl	8011b48 <uxr_get_output_reliable_stream>
 80116b0:	4604      	mov	r4, r0
 80116b2:	b158      	cbz	r0, 80116cc <uxr_prepare_stream_to_write_submessage+0x58>
 80116b4:	4649      	mov	r1, r9
 80116b6:	4632      	mov	r2, r6
 80116b8:	f006 ffb4 	bl	8018624 <uxr_prepare_reliable_buffer_to_write>
 80116bc:	4604      	mov	r4, r0
 80116be:	b12c      	cbz	r4, 80116cc <uxr_prepare_stream_to_write_submessage+0x58>
 80116c0:	4643      	mov	r3, r8
 80116c2:	b2aa      	uxth	r2, r5
 80116c4:	4639      	mov	r1, r7
 80116c6:	4630      	mov	r0, r6
 80116c8:	f000 fa72 	bl	8011bb0 <uxr_buffer_submessage_header>
 80116cc:	4620      	mov	r0, r4
 80116ce:	b002      	add	sp, #8
 80116d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d4:	2400      	movs	r4, #0
 80116d6:	4620      	mov	r0, r4
 80116d8:	b002      	add	sp, #8
 80116da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116de:	4621      	mov	r1, r4
 80116e0:	f10a 0008 	add.w	r0, sl, #8
 80116e4:	f000 fa28 	bl	8011b38 <uxr_get_output_best_effort_stream>
 80116e8:	4604      	mov	r4, r0
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d0ee      	beq.n	80116cc <uxr_prepare_stream_to_write_submessage+0x58>
 80116ee:	4649      	mov	r1, r9
 80116f0:	4632      	mov	r2, r6
 80116f2:	f006 fec7 	bl	8018484 <uxr_prepare_best_effort_buffer_to_write>
 80116f6:	4604      	mov	r4, r0
 80116f8:	e7e1      	b.n	80116be <uxr_prepare_stream_to_write_submessage+0x4a>
 80116fa:	bf00      	nop

080116fc <uxr_init_session_info>:
 80116fc:	0e13      	lsrs	r3, r2, #24
 80116fe:	7043      	strb	r3, [r0, #1]
 8011700:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011704:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011708:	7001      	strb	r1, [r0, #0]
 801170a:	70c3      	strb	r3, [r0, #3]
 801170c:	2109      	movs	r1, #9
 801170e:	23ff      	movs	r3, #255	@ 0xff
 8011710:	f880 c002 	strb.w	ip, [r0, #2]
 8011714:	7102      	strb	r2, [r0, #4]
 8011716:	80c1      	strh	r1, [r0, #6]
 8011718:	7143      	strb	r3, [r0, #5]
 801171a:	4770      	bx	lr

0801171c <uxr_buffer_create_session>:
 801171c:	b530      	push	{r4, r5, lr}
 801171e:	b089      	sub	sp, #36	@ 0x24
 8011720:	2300      	movs	r3, #0
 8011722:	4d12      	ldr	r5, [pc, #72]	@ (801176c <uxr_buffer_create_session+0x50>)
 8011724:	9307      	str	r3, [sp, #28]
 8011726:	f8ad 201c 	strh.w	r2, [sp, #28]
 801172a:	2201      	movs	r2, #1
 801172c:	9301      	str	r3, [sp, #4]
 801172e:	80c2      	strh	r2, [r0, #6]
 8011730:	f88d 2004 	strb.w	r2, [sp, #4]
 8011734:	682a      	ldr	r2, [r5, #0]
 8011736:	9200      	str	r2, [sp, #0]
 8011738:	88aa      	ldrh	r2, [r5, #4]
 801173a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801173e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011742:	9202      	str	r2, [sp, #8]
 8011744:	460c      	mov	r4, r1
 8011746:	7802      	ldrb	r2, [r0, #0]
 8011748:	9303      	str	r3, [sp, #12]
 801174a:	4619      	mov	r1, r3
 801174c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011750:	4620      	mov	r0, r4
 8011752:	2210      	movs	r2, #16
 8011754:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011758:	9306      	str	r3, [sp, #24]
 801175a:	f000 fa29 	bl	8011bb0 <uxr_buffer_submessage_header>
 801175e:	4669      	mov	r1, sp
 8011760:	4620      	mov	r0, r4
 8011762:	f001 faa1 	bl	8012ca8 <uxr_serialize_CREATE_CLIENT_Payload>
 8011766:	b009      	add	sp, #36	@ 0x24
 8011768:	bd30      	pop	{r4, r5, pc}
 801176a:	bf00      	nop
 801176c:	0801bfec 	.word	0x0801bfec

08011770 <uxr_buffer_delete_session>:
 8011770:	b510      	push	{r4, lr}
 8011772:	4b0c      	ldr	r3, [pc, #48]	@ (80117a4 <uxr_buffer_delete_session+0x34>)
 8011774:	b082      	sub	sp, #8
 8011776:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801177a:	f8ad c006 	strh.w	ip, [sp, #6]
 801177e:	460c      	mov	r4, r1
 8011780:	2202      	movs	r2, #2
 8011782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011786:	80c2      	strh	r2, [r0, #6]
 8011788:	f8ad 3004 	strh.w	r3, [sp, #4]
 801178c:	2204      	movs	r2, #4
 801178e:	2300      	movs	r3, #0
 8011790:	2103      	movs	r1, #3
 8011792:	4620      	mov	r0, r4
 8011794:	f000 fa0c 	bl	8011bb0 <uxr_buffer_submessage_header>
 8011798:	a901      	add	r1, sp, #4
 801179a:	4620      	mov	r0, r4
 801179c:	f001 fb2a 	bl	8012df4 <uxr_serialize_DELETE_Payload>
 80117a0:	b002      	add	sp, #8
 80117a2:	bd10      	pop	{r4, pc}
 80117a4:	0801bfec 	.word	0x0801bfec

080117a8 <uxr_read_create_session_status>:
 80117a8:	b510      	push	{r4, lr}
 80117aa:	b088      	sub	sp, #32
 80117ac:	4604      	mov	r4, r0
 80117ae:	4608      	mov	r0, r1
 80117b0:	a901      	add	r1, sp, #4
 80117b2:	f001 fb2f 	bl	8012e14 <uxr_deserialize_STATUS_AGENT_Payload>
 80117b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80117ba:	7163      	strb	r3, [r4, #5]
 80117bc:	b008      	add	sp, #32
 80117be:	bd10      	pop	{r4, pc}

080117c0 <uxr_read_delete_session_status>:
 80117c0:	b510      	push	{r4, lr}
 80117c2:	4604      	mov	r4, r0
 80117c4:	b084      	sub	sp, #16
 80117c6:	4608      	mov	r0, r1
 80117c8:	a902      	add	r1, sp, #8
 80117ca:	f001 fb53 	bl	8012e74 <uxr_deserialize_STATUS_Payload>
 80117ce:	88e3      	ldrh	r3, [r4, #6]
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	d001      	beq.n	80117d8 <uxr_read_delete_session_status+0x18>
 80117d4:	b004      	add	sp, #16
 80117d6:	bd10      	pop	{r4, pc}
 80117d8:	f10d 000a 	add.w	r0, sp, #10
 80117dc:	f7fe fffa 	bl	80107d4 <uxr_object_id_from_raw>
 80117e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80117e4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80117e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	2b02      	cmp	r3, #2
 80117f0:	bf04      	itt	eq
 80117f2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80117f6:	7163      	strbeq	r3, [r4, #5]
 80117f8:	b004      	add	sp, #16
 80117fa:	bd10      	pop	{r4, pc}

080117fc <uxr_stamp_create_session_header>:
 80117fc:	b510      	push	{r4, lr}
 80117fe:	2208      	movs	r2, #8
 8011800:	b08a      	sub	sp, #40	@ 0x28
 8011802:	4604      	mov	r4, r0
 8011804:	eb0d 0002 	add.w	r0, sp, r2
 8011808:	f7fe fcd2 	bl	80101b0 <ucdr_init_buffer>
 801180c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011810:	9400      	str	r4, [sp, #0]
 8011812:	2300      	movs	r3, #0
 8011814:	461a      	mov	r2, r3
 8011816:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801181a:	a802      	add	r0, sp, #8
 801181c:	f000 fbc2 	bl	8011fa4 <uxr_serialize_message_header>
 8011820:	b00a      	add	sp, #40	@ 0x28
 8011822:	bd10      	pop	{r4, pc}

08011824 <uxr_stamp_session_header>:
 8011824:	b530      	push	{r4, r5, lr}
 8011826:	b08d      	sub	sp, #52	@ 0x34
 8011828:	4604      	mov	r4, r0
 801182a:	460d      	mov	r5, r1
 801182c:	9203      	str	r2, [sp, #12]
 801182e:	4619      	mov	r1, r3
 8011830:	a804      	add	r0, sp, #16
 8011832:	2208      	movs	r2, #8
 8011834:	f7fe fcbc 	bl	80101b0 <ucdr_init_buffer>
 8011838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801183c:	9b03      	ldr	r3, [sp, #12]
 801183e:	9400      	str	r4, [sp, #0]
 8011840:	462a      	mov	r2, r5
 8011842:	a804      	add	r0, sp, #16
 8011844:	f000 fbae 	bl	8011fa4 <uxr_serialize_message_header>
 8011848:	b00d      	add	sp, #52	@ 0x34
 801184a:	bd30      	pop	{r4, r5, pc}

0801184c <uxr_read_session_header>:
 801184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011850:	4607      	mov	r7, r0
 8011852:	b084      	sub	sp, #16
 8011854:	4608      	mov	r0, r1
 8011856:	460c      	mov	r4, r1
 8011858:	4615      	mov	r5, r2
 801185a:	461e      	mov	r6, r3
 801185c:	f7fe fcd8 	bl	8010210 <ucdr_buffer_remaining>
 8011860:	2808      	cmp	r0, #8
 8011862:	d803      	bhi.n	801186c <uxr_read_session_header+0x20>
 8011864:	2000      	movs	r0, #0
 8011866:	b004      	add	sp, #16
 8011868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186c:	f10d 080c 	add.w	r8, sp, #12
 8011870:	4633      	mov	r3, r6
 8011872:	462a      	mov	r2, r5
 8011874:	f8cd 8000 	str.w	r8, [sp]
 8011878:	4620      	mov	r0, r4
 801187a:	f10d 010b 	add.w	r1, sp, #11
 801187e:	f000 fbaf 	bl	8011fe0 <uxr_deserialize_message_header>
 8011882:	783a      	ldrb	r2, [r7, #0]
 8011884:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011888:	4293      	cmp	r3, r2
 801188a:	d1eb      	bne.n	8011864 <uxr_read_session_header+0x18>
 801188c:	061b      	lsls	r3, r3, #24
 801188e:	d41c      	bmi.n	80118ca <uxr_read_session_header+0x7e>
 8011890:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011894:	787b      	ldrb	r3, [r7, #1]
 8011896:	429a      	cmp	r2, r3
 8011898:	d003      	beq.n	80118a2 <uxr_read_session_header+0x56>
 801189a:	2001      	movs	r0, #1
 801189c:	f080 0001 	eor.w	r0, r0, #1
 80118a0:	e7e1      	b.n	8011866 <uxr_read_session_header+0x1a>
 80118a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80118a6:	78bb      	ldrb	r3, [r7, #2]
 80118a8:	429a      	cmp	r2, r3
 80118aa:	f107 0102 	add.w	r1, r7, #2
 80118ae:	d1f4      	bne.n	801189a <uxr_read_session_header+0x4e>
 80118b0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80118b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d1ee      	bne.n	801189a <uxr_read_session_header+0x4e>
 80118bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80118c0:	784b      	ldrb	r3, [r1, #1]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d1e9      	bne.n	801189a <uxr_read_session_header+0x4e>
 80118c6:	2000      	movs	r0, #0
 80118c8:	e7e8      	b.n	801189c <uxr_read_session_header+0x50>
 80118ca:	2001      	movs	r0, #1
 80118cc:	e7cb      	b.n	8011866 <uxr_read_session_header+0x1a>
 80118ce:	bf00      	nop

080118d0 <uxr_session_header_offset>:
 80118d0:	f990 3000 	ldrsb.w	r3, [r0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	bfac      	ite	ge
 80118d8:	2008      	movge	r0, #8
 80118da:	2004      	movlt	r0, #4
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop

080118e0 <uxr_init_base_object_request>:
 80118e0:	b510      	push	{r4, lr}
 80118e2:	88c3      	ldrh	r3, [r0, #6]
 80118e4:	b082      	sub	sp, #8
 80118e6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80118ea:	9101      	str	r1, [sp, #4]
 80118ec:	f1a3 010a 	sub.w	r1, r3, #10
 80118f0:	b289      	uxth	r1, r1
 80118f2:	42a1      	cmp	r1, r4
 80118f4:	d80e      	bhi.n	8011914 <uxr_init_base_object_request+0x34>
 80118f6:	3301      	adds	r3, #1
 80118f8:	b29c      	uxth	r4, r3
 80118fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	80c4      	strh	r4, [r0, #6]
 8011902:	9801      	ldr	r0, [sp, #4]
 8011904:	7011      	strb	r1, [r2, #0]
 8011906:	7053      	strb	r3, [r2, #1]
 8011908:	1c91      	adds	r1, r2, #2
 801190a:	f7fe ff77 	bl	80107fc <uxr_object_id_to_raw>
 801190e:	4620      	mov	r0, r4
 8011910:	b002      	add	sp, #8
 8011912:	bd10      	pop	{r4, pc}
 8011914:	230a      	movs	r3, #10
 8011916:	2100      	movs	r1, #0
 8011918:	461c      	mov	r4, r3
 801191a:	e7f1      	b.n	8011900 <uxr_init_base_object_request+0x20>

0801191c <uxr_parse_base_object_request>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	4604      	mov	r4, r0
 8011920:	3002      	adds	r0, #2
 8011922:	460d      	mov	r5, r1
 8011924:	4616      	mov	r6, r2
 8011926:	f7fe ff55 	bl	80107d4 <uxr_object_id_from_raw>
 801192a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801192e:	8028      	strh	r0, [r5, #0]
 8011930:	806b      	strh	r3, [r5, #2]
 8011932:	7822      	ldrb	r2, [r4, #0]
 8011934:	7863      	ldrb	r3, [r4, #1]
 8011936:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801193a:	8033      	strh	r3, [r6, #0]
 801193c:	bd70      	pop	{r4, r5, r6, pc}
 801193e:	bf00      	nop

08011940 <uxr_stream_id>:
 8011940:	2901      	cmp	r1, #1
 8011942:	b082      	sub	sp, #8
 8011944:	d01d      	beq.n	8011982 <uxr_stream_id+0x42>
 8011946:	2902      	cmp	r1, #2
 8011948:	f04f 0c00 	mov.w	ip, #0
 801194c:	d01e      	beq.n	801198c <uxr_stream_id+0x4c>
 801194e:	2300      	movs	r3, #0
 8011950:	f36c 0307 	bfi	r3, ip, #0, #8
 8011954:	f360 230f 	bfi	r3, r0, #8, #8
 8011958:	f361 4317 	bfi	r3, r1, #16, #8
 801195c:	f362 631f 	bfi	r3, r2, #24, #8
 8011960:	b2da      	uxtb	r2, r3
 8011962:	2000      	movs	r0, #0
 8011964:	f362 0007 	bfi	r0, r2, #0, #8
 8011968:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801196c:	f362 200f 	bfi	r0, r2, #8, #8
 8011970:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011974:	f362 4017 	bfi	r0, r2, #16, #8
 8011978:	0e1b      	lsrs	r3, r3, #24
 801197a:	f363 601f 	bfi	r0, r3, #24, #8
 801197e:	b002      	add	sp, #8
 8011980:	4770      	bx	lr
 8011982:	f100 0c01 	add.w	ip, r0, #1
 8011986:	fa5f fc8c 	uxtb.w	ip, ip
 801198a:	e7e0      	b.n	801194e <uxr_stream_id+0xe>
 801198c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011990:	e7dd      	b.n	801194e <uxr_stream_id+0xe>
 8011992:	bf00      	nop

08011994 <uxr_stream_id_from_raw>:
 8011994:	b082      	sub	sp, #8
 8011996:	b130      	cbz	r0, 80119a6 <uxr_stream_id_from_raw+0x12>
 8011998:	0603      	lsls	r3, r0, #24
 801199a:	d420      	bmi.n	80119de <uxr_stream_id_from_raw+0x4a>
 801199c:	1e42      	subs	r2, r0, #1
 801199e:	b2d2      	uxtb	r2, r2
 80119a0:	f04f 0c01 	mov.w	ip, #1
 80119a4:	e001      	b.n	80119aa <uxr_stream_id_from_raw+0x16>
 80119a6:	4684      	mov	ip, r0
 80119a8:	4602      	mov	r2, r0
 80119aa:	2300      	movs	r3, #0
 80119ac:	f360 0307 	bfi	r3, r0, #0, #8
 80119b0:	f362 230f 	bfi	r3, r2, #8, #8
 80119b4:	f36c 4317 	bfi	r3, ip, #16, #8
 80119b8:	f361 631f 	bfi	r3, r1, #24, #8
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	2000      	movs	r0, #0
 80119c0:	f362 0007 	bfi	r0, r2, #0, #8
 80119c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80119c8:	f362 200f 	bfi	r0, r2, #8, #8
 80119cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80119d0:	f362 4017 	bfi	r0, r2, #16, #8
 80119d4:	0e1b      	lsrs	r3, r3, #24
 80119d6:	f363 601f 	bfi	r0, r3, #24, #8
 80119da:	b002      	add	sp, #8
 80119dc:	4770      	bx	lr
 80119de:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80119e2:	f04f 0c02 	mov.w	ip, #2
 80119e6:	e7e0      	b.n	80119aa <uxr_stream_id_from_raw+0x16>

080119e8 <uxr_init_stream_storage>:
 80119e8:	2300      	movs	r3, #0
 80119ea:	7403      	strb	r3, [r0, #16]
 80119ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80119f0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80119f4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop

080119fc <uxr_reset_stream_storage>:
 80119fc:	b570      	push	{r4, r5, r6, lr}
 80119fe:	7c03      	ldrb	r3, [r0, #16]
 8011a00:	4604      	mov	r4, r0
 8011a02:	b153      	cbz	r3, 8011a1a <uxr_reset_stream_storage+0x1e>
 8011a04:	4606      	mov	r6, r0
 8011a06:	2500      	movs	r5, #0
 8011a08:	4630      	mov	r0, r6
 8011a0a:	f006 fd35 	bl	8018478 <uxr_reset_output_best_effort_stream>
 8011a0e:	7c23      	ldrb	r3, [r4, #16]
 8011a10:	3501      	adds	r5, #1
 8011a12:	42ab      	cmp	r3, r5
 8011a14:	f106 0610 	add.w	r6, r6, #16
 8011a18:	d8f6      	bhi.n	8011a08 <uxr_reset_stream_storage+0xc>
 8011a1a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011a1e:	b163      	cbz	r3, 8011a3a <uxr_reset_stream_storage+0x3e>
 8011a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011a24:	2500      	movs	r5, #0
 8011a26:	4630      	mov	r0, r6
 8011a28:	f006 fb28 	bl	801807c <uxr_reset_input_best_effort_stream>
 8011a2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011a30:	3501      	adds	r5, #1
 8011a32:	42ab      	cmp	r3, r5
 8011a34:	f106 0602 	add.w	r6, r6, #2
 8011a38:	d8f5      	bhi.n	8011a26 <uxr_reset_stream_storage+0x2a>
 8011a3a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011a3e:	b163      	cbz	r3, 8011a5a <uxr_reset_stream_storage+0x5e>
 8011a40:	f104 0618 	add.w	r6, r4, #24
 8011a44:	2500      	movs	r5, #0
 8011a46:	4630      	mov	r0, r6
 8011a48:	f006 fdc2 	bl	80185d0 <uxr_reset_output_reliable_stream>
 8011a4c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011a50:	3501      	adds	r5, #1
 8011a52:	42ab      	cmp	r3, r5
 8011a54:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011a58:	d8f5      	bhi.n	8011a46 <uxr_reset_stream_storage+0x4a>
 8011a5a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011a5e:	b163      	cbz	r3, 8011a7a <uxr_reset_stream_storage+0x7e>
 8011a60:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011a64:	2500      	movs	r5, #0
 8011a66:	4630      	mov	r0, r6
 8011a68:	f006 fb7c 	bl	8018164 <uxr_reset_input_reliable_stream>
 8011a6c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011a70:	3501      	adds	r5, #1
 8011a72:	42ab      	cmp	r3, r5
 8011a74:	f106 0618 	add.w	r6, r6, #24
 8011a78:	d8f5      	bhi.n	8011a66 <uxr_reset_stream_storage+0x6a>
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}

08011a7c <uxr_add_output_best_effort_buffer>:
 8011a7c:	b510      	push	{r4, lr}
 8011a7e:	7c04      	ldrb	r4, [r0, #16]
 8011a80:	f104 0c01 	add.w	ip, r4, #1
 8011a84:	b082      	sub	sp, #8
 8011a86:	f880 c010 	strb.w	ip, [r0, #16]
 8011a8a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011a8e:	f006 fce9 	bl	8018464 <uxr_init_output_best_effort_stream>
 8011a92:	2201      	movs	r2, #1
 8011a94:	4611      	mov	r1, r2
 8011a96:	4620      	mov	r0, r4
 8011a98:	b002      	add	sp, #8
 8011a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a9e:	f7ff bf4f 	b.w	8011940 <uxr_stream_id>
 8011aa2:	bf00      	nop

08011aa4 <uxr_add_output_reliable_buffer>:
 8011aa4:	b510      	push	{r4, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	4684      	mov	ip, r0
 8011aaa:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011aae:	9000      	str	r0, [sp, #0]
 8011ab0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011ab4:	2028      	movs	r0, #40	@ 0x28
 8011ab6:	fb00 c004 	mla	r0, r0, r4, ip
 8011aba:	f104 0e01 	add.w	lr, r4, #1
 8011abe:	3018      	adds	r0, #24
 8011ac0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011ac4:	f006 fd4c 	bl	8018560 <uxr_init_output_reliable_stream>
 8011ac8:	2201      	movs	r2, #1
 8011aca:	2102      	movs	r1, #2
 8011acc:	4620      	mov	r0, r4
 8011ace:	b004      	add	sp, #16
 8011ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ad4:	f7ff bf34 	b.w	8011940 <uxr_stream_id>

08011ad8 <uxr_add_input_best_effort_buffer>:
 8011ad8:	b510      	push	{r4, lr}
 8011ada:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011ade:	4603      	mov	r3, r0
 8011ae0:	1c62      	adds	r2, r4, #1
 8011ae2:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011af0:	f006 fac0 	bl	8018074 <uxr_init_input_best_effort_stream>
 8011af4:	2200      	movs	r2, #0
 8011af6:	2101      	movs	r1, #1
 8011af8:	4620      	mov	r0, r4
 8011afa:	b002      	add	sp, #8
 8011afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b00:	f7ff bf1e 	b.w	8011940 <uxr_stream_id>

08011b04 <uxr_add_input_reliable_buffer>:
 8011b04:	b510      	push	{r4, lr}
 8011b06:	b084      	sub	sp, #16
 8011b08:	4684      	mov	ip, r0
 8011b0a:	9806      	ldr	r0, [sp, #24]
 8011b0c:	9000      	str	r0, [sp, #0]
 8011b0e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011b12:	2018      	movs	r0, #24
 8011b14:	fb00 c004 	mla	r0, r0, r4, ip
 8011b18:	f104 0e01 	add.w	lr, r4, #1
 8011b1c:	3048      	adds	r0, #72	@ 0x48
 8011b1e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011b22:	f006 faf3 	bl	801810c <uxr_init_input_reliable_stream>
 8011b26:	2200      	movs	r2, #0
 8011b28:	2102      	movs	r1, #2
 8011b2a:	4620      	mov	r0, r4
 8011b2c:	b004      	add	sp, #16
 8011b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b32:	f7ff bf05 	b.w	8011940 <uxr_stream_id>
 8011b36:	bf00      	nop

08011b38 <uxr_get_output_best_effort_stream>:
 8011b38:	7c03      	ldrb	r3, [r0, #16]
 8011b3a:	428b      	cmp	r3, r1
 8011b3c:	bf8c      	ite	hi
 8011b3e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011b42:	2000      	movls	r0, #0
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop

08011b48 <uxr_get_output_reliable_stream>:
 8011b48:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011b4c:	428b      	cmp	r3, r1
 8011b4e:	bf83      	ittte	hi
 8011b50:	2328      	movhi	r3, #40	@ 0x28
 8011b52:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011b56:	3018      	addhi	r0, #24
 8011b58:	2000      	movls	r0, #0
 8011b5a:	4770      	bx	lr

08011b5c <uxr_get_input_best_effort_stream>:
 8011b5c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011b60:	428b      	cmp	r3, r1
 8011b62:	bf86      	itte	hi
 8011b64:	3121      	addhi	r1, #33	@ 0x21
 8011b66:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011b6a:	2000      	movls	r0, #0
 8011b6c:	4770      	bx	lr
 8011b6e:	bf00      	nop

08011b70 <uxr_get_input_reliable_stream>:
 8011b70:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011b74:	428b      	cmp	r3, r1
 8011b76:	bf83      	ittte	hi
 8011b78:	2318      	movhi	r3, #24
 8011b7a:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011b7e:	3048      	addhi	r0, #72	@ 0x48
 8011b80:	2000      	movls	r0, #0
 8011b82:	4770      	bx	lr

08011b84 <uxr_output_streams_confirmed>:
 8011b84:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011b88:	b183      	cbz	r3, 8011bac <uxr_output_streams_confirmed+0x28>
 8011b8a:	b570      	push	{r4, r5, r6, lr}
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	f100 0518 	add.w	r5, r0, #24
 8011b92:	2400      	movs	r4, #0
 8011b94:	e001      	b.n	8011b9a <uxr_output_streams_confirmed+0x16>
 8011b96:	3528      	adds	r5, #40	@ 0x28
 8011b98:	b138      	cbz	r0, 8011baa <uxr_output_streams_confirmed+0x26>
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	f006 ff88 	bl	8018ab0 <uxr_is_output_up_to_date>
 8011ba0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011ba4:	3401      	adds	r4, #1
 8011ba6:	42a3      	cmp	r3, r4
 8011ba8:	d8f5      	bhi.n	8011b96 <uxr_output_streams_confirmed+0x12>
 8011baa:	bd70      	pop	{r4, r5, r6, pc}
 8011bac:	2001      	movs	r0, #1
 8011bae:	4770      	bx	lr

08011bb0 <uxr_buffer_submessage_header>:
 8011bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	460e      	mov	r6, r1
 8011bb6:	2104      	movs	r1, #4
 8011bb8:	4615      	mov	r5, r2
 8011bba:	461f      	mov	r7, r3
 8011bbc:	f7fe fb12 	bl	80101e4 <ucdr_align_to>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	ea47 0203 	orr.w	r2, r7, r3
 8011bc6:	4631      	mov	r1, r6
 8011bc8:	7523      	strb	r3, [r4, #20]
 8011bca:	4620      	mov	r0, r4
 8011bcc:	462b      	mov	r3, r5
 8011bce:	f000 fa27 	bl	8012020 <uxr_serialize_submessage_header>
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f7fe fb1c 	bl	8010210 <ucdr_buffer_remaining>
 8011bd8:	42a8      	cmp	r0, r5
 8011bda:	bf34      	ite	cc
 8011bdc:	2000      	movcc	r0, #0
 8011bde:	2001      	movcs	r0, #1
 8011be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011be2:	bf00      	nop

08011be4 <uxr_read_submessage_header>:
 8011be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be8:	4604      	mov	r4, r0
 8011bea:	460d      	mov	r5, r1
 8011bec:	2104      	movs	r1, #4
 8011bee:	4616      	mov	r6, r2
 8011bf0:	4698      	mov	r8, r3
 8011bf2:	f7fe faf7 	bl	80101e4 <ucdr_align_to>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f7fe fb0a 	bl	8010210 <ucdr_buffer_remaining>
 8011bfc:	2803      	cmp	r0, #3
 8011bfe:	bf8c      	ite	hi
 8011c00:	2701      	movhi	r7, #1
 8011c02:	2700      	movls	r7, #0
 8011c04:	d802      	bhi.n	8011c0c <uxr_read_submessage_header+0x28>
 8011c06:	4638      	mov	r0, r7
 8011c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c0c:	4633      	mov	r3, r6
 8011c0e:	4642      	mov	r2, r8
 8011c10:	4620      	mov	r0, r4
 8011c12:	4629      	mov	r1, r5
 8011c14:	f000 fa18 	bl	8012048 <uxr_deserialize_submessage_header>
 8011c18:	f898 3000 	ldrb.w	r3, [r8]
 8011c1c:	f003 0201 	and.w	r2, r3, #1
 8011c20:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8011c24:	f888 3000 	strb.w	r3, [r8]
 8011c28:	7522      	strb	r2, [r4, #20]
 8011c2a:	4638      	mov	r0, r7
 8011c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c30 <uxr_submessage_padding>:
 8011c30:	f010 0003 	ands.w	r0, r0, #3
 8011c34:	bf18      	it	ne
 8011c36:	f1c0 0004 	rsbne	r0, r0, #4
 8011c3a:	4770      	bx	lr

08011c3c <uxr_millis>:
 8011c3c:	b510      	push	{r4, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	4669      	mov	r1, sp
 8011c42:	2001      	movs	r0, #1
 8011c44:	f7f0 fb5c 	bl	8002300 <clock_gettime>
 8011c48:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8011c4c:	4906      	ldr	r1, [pc, #24]	@ (8011c68 <uxr_millis+0x2c>)
 8011c4e:	fba0 0301 	umull	r0, r3, r0, r1
 8011c52:	1900      	adds	r0, r0, r4
 8011c54:	fb01 3102 	mla	r1, r1, r2, r3
 8011c58:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8011c5c:	4a03      	ldr	r2, [pc, #12]	@ (8011c6c <uxr_millis+0x30>)
 8011c5e:	2300      	movs	r3, #0
 8011c60:	f7ee ffdc 	bl	8000c1c <__aeabi_ldivmod>
 8011c64:	b004      	add	sp, #16
 8011c66:	bd10      	pop	{r4, pc}
 8011c68:	3b9aca00 	.word	0x3b9aca00
 8011c6c:	000f4240 	.word	0x000f4240

08011c70 <uxr_nanos>:
 8011c70:	b510      	push	{r4, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	4669      	mov	r1, sp
 8011c76:	2001      	movs	r0, #1
 8011c78:	f7f0 fb42 	bl	8002300 <clock_gettime>
 8011c7c:	4a06      	ldr	r2, [pc, #24]	@ (8011c98 <uxr_nanos+0x28>)
 8011c7e:	9800      	ldr	r0, [sp, #0]
 8011c80:	9902      	ldr	r1, [sp, #8]
 8011c82:	9c01      	ldr	r4, [sp, #4]
 8011c84:	fba0 0302 	umull	r0, r3, r0, r2
 8011c88:	1840      	adds	r0, r0, r1
 8011c8a:	fb02 3304 	mla	r3, r2, r4, r3
 8011c8e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8011c92:	b004      	add	sp, #16
 8011c94:	bd10      	pop	{r4, pc}
 8011c96:	bf00      	nop
 8011c98:	3b9aca00 	.word	0x3b9aca00

08011c9c <on_full_output_buffer_fragmented>:
 8011c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	b08a      	sub	sp, #40	@ 0x28
 8011ca4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8011ca8:	4606      	mov	r6, r0
 8011caa:	f104 0008 	add.w	r0, r4, #8
 8011cae:	f7ff ff4b 	bl	8011b48 <uxr_get_output_reliable_stream>
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	f006 ff06 	bl	8018ac4 <get_available_free_slots>
 8011cb8:	b968      	cbnz	r0, 8011cd6 <on_full_output_buffer_fragmented+0x3a>
 8011cba:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8011cbe:	4620      	mov	r0, r4
 8011cc0:	4798      	blx	r3
 8011cc2:	b918      	cbnz	r0, 8011ccc <on_full_output_buffer_fragmented+0x30>
 8011cc4:	2001      	movs	r0, #1
 8011cc6:	b00a      	add	sp, #40	@ 0x28
 8011cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f006 fef9 	bl	8018ac4 <get_available_free_slots>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d0f6      	beq.n	8011cc4 <on_full_output_buffer_fragmented+0x28>
 8011cd6:	8929      	ldrh	r1, [r5, #8]
 8011cd8:	89eb      	ldrh	r3, [r5, #14]
 8011cda:	7b28      	ldrb	r0, [r5, #12]
 8011cdc:	686a      	ldr	r2, [r5, #4]
 8011cde:	fbb2 f8f1 	udiv	r8, r2, r1
 8011ce2:	fbb3 f2f1 	udiv	r2, r3, r1
 8011ce6:	fb01 3112 	mls	r1, r1, r2, r3
 8011cea:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8011cee:	b289      	uxth	r1, r1
 8011cf0:	fb08 f101 	mul.w	r1, r8, r1
 8011cf4:	30fc      	adds	r0, #252	@ 0xfc
 8011cf6:	f1a8 0804 	sub.w	r8, r8, #4
 8011cfa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8011cfe:	4440      	add	r0, r8
 8011d00:	b287      	uxth	r7, r0
 8011d02:	1bdb      	subs	r3, r3, r7
 8011d04:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8011d08:	682b      	ldr	r3, [r5, #0]
 8011d0a:	3104      	adds	r1, #4
 8011d0c:	4419      	add	r1, r3
 8011d0e:	4642      	mov	r2, r8
 8011d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	a802      	add	r0, sp, #8
 8011d18:	2300      	movs	r3, #0
 8011d1a:	f7fe fa37 	bl	801018c <ucdr_init_buffer_origin_offset>
 8011d1e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011d22:	f102 0308 	add.w	r3, r2, #8
 8011d26:	4543      	cmp	r3, r8
 8011d28:	d928      	bls.n	8011d7c <on_full_output_buffer_fragmented+0xe0>
 8011d2a:	463a      	mov	r2, r7
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	210d      	movs	r1, #13
 8011d30:	a802      	add	r0, sp, #8
 8011d32:	f7ff ff3d 	bl	8011bb0 <uxr_buffer_submessage_header>
 8011d36:	8929      	ldrh	r1, [r5, #8]
 8011d38:	89eb      	ldrh	r3, [r5, #14]
 8011d3a:	fbb3 f2f1 	udiv	r2, r3, r1
 8011d3e:	fb01 3312 	mls	r3, r1, r2, r3
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	686a      	ldr	r2, [r5, #4]
 8011d46:	fbb2 f2f1 	udiv	r2, r2, r1
 8011d4a:	fb02 f303 	mul.w	r3, r2, r3
 8011d4e:	682a      	ldr	r2, [r5, #0]
 8011d50:	f842 8003 	str.w	r8, [r2, r3]
 8011d54:	89e8      	ldrh	r0, [r5, #14]
 8011d56:	2101      	movs	r1, #1
 8011d58:	f007 f804 	bl	8018d64 <uxr_seq_num_add>
 8011d5c:	9904      	ldr	r1, [sp, #16]
 8011d5e:	9a03      	ldr	r2, [sp, #12]
 8011d60:	81e8      	strh	r0, [r5, #14]
 8011d62:	1a52      	subs	r2, r2, r1
 8011d64:	4630      	mov	r0, r6
 8011d66:	f7fe fa23 	bl	80101b0 <ucdr_init_buffer>
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	490f      	ldr	r1, [pc, #60]	@ (8011dac <on_full_output_buffer_fragmented+0x110>)
 8011d6e:	4622      	mov	r2, r4
 8011d70:	f7fe f9f2 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8011d74:	2000      	movs	r0, #0
 8011d76:	b00a      	add	sp, #40	@ 0x28
 8011d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d7c:	b292      	uxth	r2, r2
 8011d7e:	2302      	movs	r3, #2
 8011d80:	210d      	movs	r1, #13
 8011d82:	a802      	add	r0, sp, #8
 8011d84:	f7ff ff14 	bl	8011bb0 <uxr_buffer_submessage_header>
 8011d88:	8928      	ldrh	r0, [r5, #8]
 8011d8a:	89eb      	ldrh	r3, [r5, #14]
 8011d8c:	fbb3 f1f0 	udiv	r1, r3, r0
 8011d90:	fb00 3311 	mls	r3, r0, r1, r3
 8011d94:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8011d98:	6869      	ldr	r1, [r5, #4]
 8011d9a:	fbb1 f1f0 	udiv	r1, r1, r0
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	fb01 f303 	mul.w	r3, r1, r3
 8011da4:	6829      	ldr	r1, [r5, #0]
 8011da6:	3208      	adds	r2, #8
 8011da8:	50ca      	str	r2, [r1, r3]
 8011daa:	e7d3      	b.n	8011d54 <on_full_output_buffer_fragmented+0xb8>
 8011dac:	08011c9d 	.word	0x08011c9d

08011db0 <uxr_prepare_output_stream>:
 8011db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011db2:	b087      	sub	sp, #28
 8011db4:	2707      	movs	r7, #7
 8011db6:	9202      	str	r2, [sp, #8]
 8011db8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011dba:	9103      	str	r1, [sp, #12]
 8011dbc:	2500      	movs	r5, #0
 8011dbe:	3204      	adds	r2, #4
 8011dc0:	e9cd 7500 	strd	r7, r5, [sp]
 8011dc4:	461c      	mov	r4, r3
 8011dc6:	4606      	mov	r6, r0
 8011dc8:	f7ff fc54 	bl	8011674 <uxr_prepare_stream_to_write_submessage>
 8011dcc:	f080 0201 	eor.w	r2, r0, #1
 8011dd0:	b2d2      	uxtb	r2, r2
 8011dd2:	75a2      	strb	r2, [r4, #22]
 8011dd4:	b112      	cbz	r2, 8011ddc <uxr_prepare_output_stream+0x2c>
 8011dd6:	4628      	mov	r0, r5
 8011dd8:	b007      	add	sp, #28
 8011dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ddc:	aa05      	add	r2, sp, #20
 8011dde:	9902      	ldr	r1, [sp, #8]
 8011de0:	4630      	mov	r0, r6
 8011de2:	f7ff fd7d 	bl	80118e0 <uxr_init_base_object_request>
 8011de6:	a905      	add	r1, sp, #20
 8011de8:	4605      	mov	r5, r0
 8011dea:	4620      	mov	r0, r4
 8011dec:	f001 f8c0 	bl	8012f70 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011df0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011df4:	69a6      	ldr	r6, [r4, #24]
 8011df6:	69e7      	ldr	r7, [r4, #28]
 8011df8:	1a52      	subs	r2, r2, r1
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f7fe f9d8 	bl	80101b0 <ucdr_init_buffer>
 8011e00:	4620      	mov	r0, r4
 8011e02:	463a      	mov	r2, r7
 8011e04:	4631      	mov	r1, r6
 8011e06:	f7fe f9a7 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8011e0a:	4628      	mov	r0, r5
 8011e0c:	b007      	add	sp, #28
 8011e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e10 <uxr_prepare_output_stream_fragmented>:
 8011e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	b091      	sub	sp, #68	@ 0x44
 8011e16:	4605      	mov	r5, r0
 8011e18:	9105      	str	r1, [sp, #20]
 8011e1a:	3008      	adds	r0, #8
 8011e1c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011e20:	461e      	mov	r6, r3
 8011e22:	9204      	str	r2, [sp, #16]
 8011e24:	f7ff fe90 	bl	8011b48 <uxr_get_output_reliable_stream>
 8011e28:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	f000 8091 	beq.w	8011f54 <uxr_prepare_output_stream_fragmented+0x144>
 8011e32:	4604      	mov	r4, r0
 8011e34:	2800      	cmp	r0, #0
 8011e36:	f000 808d 	beq.w	8011f54 <uxr_prepare_output_stream_fragmented+0x144>
 8011e3a:	f006 fe43 	bl	8018ac4 <get_available_free_slots>
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	f000 8083 	beq.w	8011f4a <uxr_prepare_output_stream_fragmented+0x13a>
 8011e44:	8922      	ldrh	r2, [r4, #8]
 8011e46:	89e7      	ldrh	r7, [r4, #14]
 8011e48:	fbb7 f9f2 	udiv	r9, r7, r2
 8011e4c:	fb02 7919 	mls	r9, r2, r9, r7
 8011e50:	fa1f f989 	uxth.w	r9, r9
 8011e54:	6863      	ldr	r3, [r4, #4]
 8011e56:	fbb3 f2f2 	udiv	r2, r3, r2
 8011e5a:	6823      	ldr	r3, [r4, #0]
 8011e5c:	9203      	str	r2, [sp, #12]
 8011e5e:	fb02 f909 	mul.w	r9, r2, r9
 8011e62:	f109 0904 	add.w	r9, r9, #4
 8011e66:	4499      	add	r9, r3
 8011e68:	7b23      	ldrb	r3, [r4, #12]
 8011e6a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011e6e:	4543      	cmp	r3, r8
 8011e70:	f1a2 0b04 	sub.w	fp, r2, #4
 8011e74:	d37a      	bcc.n	8011f6c <uxr_prepare_output_stream_fragmented+0x15c>
 8011e76:	f1ab 0a04 	sub.w	sl, fp, #4
 8011e7a:	ebaa 0a03 	sub.w	sl, sl, r3
 8011e7e:	465a      	mov	r2, fp
 8011e80:	2300      	movs	r3, #0
 8011e82:	4649      	mov	r1, r9
 8011e84:	a808      	add	r0, sp, #32
 8011e86:	f8cd 8000 	str.w	r8, [sp]
 8011e8a:	f7fe f97f 	bl	801018c <ucdr_init_buffer_origin_offset>
 8011e8e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011e90:	fa1f fa8a 	uxth.w	sl, sl
 8011e94:	4652      	mov	r2, sl
 8011e96:	f103 0a08 	add.w	sl, r3, #8
 8011e9a:	45da      	cmp	sl, fp
 8011e9c:	bf34      	ite	cc
 8011e9e:	2302      	movcc	r3, #2
 8011ea0:	2300      	movcs	r3, #0
 8011ea2:	210d      	movs	r1, #13
 8011ea4:	a808      	add	r0, sp, #32
 8011ea6:	f7ff fe83 	bl	8011bb0 <uxr_buffer_submessage_header>
 8011eaa:	8921      	ldrh	r1, [r4, #8]
 8011eac:	fbb7 f2f1 	udiv	r2, r7, r1
 8011eb0:	fb01 7212 	mls	r2, r1, r2, r7
 8011eb4:	b292      	uxth	r2, r2
 8011eb6:	6863      	ldr	r3, [r4, #4]
 8011eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ebc:	fb02 f303 	mul.w	r3, r2, r3
 8011ec0:	6822      	ldr	r2, [r4, #0]
 8011ec2:	4638      	mov	r0, r7
 8011ec4:	f842 b003 	str.w	fp, [r2, r3]
 8011ec8:	2101      	movs	r1, #1
 8011eca:	f006 ff4b 	bl	8018d64 <uxr_seq_num_add>
 8011ece:	9b03      	ldr	r3, [sp, #12]
 8011ed0:	f108 0104 	add.w	r1, r8, #4
 8011ed4:	f1a3 0208 	sub.w	r2, r3, #8
 8011ed8:	eba2 0208 	sub.w	r2, r2, r8
 8011edc:	4449      	add	r1, r9
 8011ede:	4607      	mov	r7, r0
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	f7fe f965 	bl	80101b0 <ucdr_init_buffer>
 8011ee6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011ee8:	81e7      	strh	r7, [r4, #14]
 8011eea:	1d1a      	adds	r2, r3, #4
 8011eec:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8011ef0:	bf28      	it	cs
 8011ef2:	2200      	movcs	r2, #0
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	b292      	uxth	r2, r2
 8011ef8:	2107      	movs	r1, #7
 8011efa:	4630      	mov	r0, r6
 8011efc:	f7ff fe58 	bl	8011bb0 <uxr_buffer_submessage_header>
 8011f00:	9904      	ldr	r1, [sp, #16]
 8011f02:	aa07      	add	r2, sp, #28
 8011f04:	4628      	mov	r0, r5
 8011f06:	f7ff fceb 	bl	80118e0 <uxr_init_base_object_request>
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	b318      	cbz	r0, 8011f56 <uxr_prepare_output_stream_fragmented+0x146>
 8011f0e:	a907      	add	r1, sp, #28
 8011f10:	4630      	mov	r0, r6
 8011f12:	f001 f82d 	bl	8012f70 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011f16:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	1a52      	subs	r2, r2, r1
 8011f1e:	f7fe f947 	bl	80101b0 <ucdr_init_buffer>
 8011f22:	9b05      	ldr	r3, [sp, #20]
 8011f24:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8011f28:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011f2a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8011f2e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011f30:	491b      	ldr	r1, [pc, #108]	@ (8011fa0 <uxr_prepare_output_stream_fragmented+0x190>)
 8011f32:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8011f36:	4630      	mov	r0, r6
 8011f38:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8011f3c:	462a      	mov	r2, r5
 8011f3e:	f7fe f90b 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8011f42:	4620      	mov	r0, r4
 8011f44:	b011      	add	sp, #68	@ 0x44
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011f4c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011f4e:	4628      	mov	r0, r5
 8011f50:	4798      	blx	r3
 8011f52:	b920      	cbnz	r0, 8011f5e <uxr_prepare_output_stream_fragmented+0x14e>
 8011f54:	2400      	movs	r4, #0
 8011f56:	4620      	mov	r0, r4
 8011f58:	b011      	add	sp, #68	@ 0x44
 8011f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f006 fdb0 	bl	8018ac4 <get_available_free_slots>
 8011f64:	2800      	cmp	r0, #0
 8011f66:	f47f af6d 	bne.w	8011e44 <uxr_prepare_output_stream_fragmented+0x34>
 8011f6a:	e7f3      	b.n	8011f54 <uxr_prepare_output_stream_fragmented+0x144>
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	2101      	movs	r1, #1
 8011f70:	f006 fef8 	bl	8018d64 <uxr_seq_num_add>
 8011f74:	8921      	ldrh	r1, [r4, #8]
 8011f76:	fbb0 f2f1 	udiv	r2, r0, r1
 8011f7a:	fb01 0912 	mls	r9, r1, r2, r0
 8011f7e:	fa1f f289 	uxth.w	r2, r9
 8011f82:	6863      	ldr	r3, [r4, #4]
 8011f84:	fbb3 f9f1 	udiv	r9, r3, r1
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	fb02 f909 	mul.w	r9, r2, r9
 8011f8e:	f109 0904 	add.w	r9, r9, #4
 8011f92:	4499      	add	r9, r3
 8011f94:	4607      	mov	r7, r0
 8011f96:	7b23      	ldrb	r3, [r4, #12]
 8011f98:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011f9c:	e76b      	b.n	8011e76 <uxr_prepare_output_stream_fragmented+0x66>
 8011f9e:	bf00      	nop
 8011fa0:	08011c9d 	.word	0x08011c9d

08011fa4 <uxr_serialize_message_header>:
 8011fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	4616      	mov	r6, r2
 8011faa:	4604      	mov	r4, r0
 8011fac:	9301      	str	r3, [sp, #4]
 8011fae:	460d      	mov	r5, r1
 8011fb0:	9f08      	ldr	r7, [sp, #32]
 8011fb2:	f7fc fceb 	bl	800e98c <ucdr_serialize_uint8_t>
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f7fc fce7 	bl	800e98c <ucdr_serialize_uint8_t>
 8011fbe:	9a01      	ldr	r2, [sp, #4]
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f7fc fd8e 	bl	800eae4 <ucdr_serialize_endian_uint16_t>
 8011fc8:	062b      	lsls	r3, r5, #24
 8011fca:	d501      	bpl.n	8011fd0 <uxr_serialize_message_header+0x2c>
 8011fcc:	b003      	add	sp, #12
 8011fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd0:	2204      	movs	r2, #4
 8011fd2:	4639      	mov	r1, r7
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	b003      	add	sp, #12
 8011fd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011fdc:	f7fc b9e0 	b.w	800e3a0 <ucdr_serialize_array_uint8_t>

08011fe0 <uxr_deserialize_message_header>:
 8011fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	4616      	mov	r6, r2
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	9301      	str	r3, [sp, #4]
 8011fea:	460d      	mov	r5, r1
 8011fec:	9f08      	ldr	r7, [sp, #32]
 8011fee:	f7fc fce3 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8011ff2:	4631      	mov	r1, r6
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	f7fc fcdf 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8011ffa:	9a01      	ldr	r2, [sp, #4]
 8011ffc:	2101      	movs	r1, #1
 8011ffe:	4620      	mov	r0, r4
 8012000:	f7fc fe64 	bl	800eccc <ucdr_deserialize_endian_uint16_t>
 8012004:	f995 3000 	ldrsb.w	r3, [r5]
 8012008:	2b00      	cmp	r3, #0
 801200a:	da01      	bge.n	8012010 <uxr_deserialize_message_header+0x30>
 801200c:	b003      	add	sp, #12
 801200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012010:	2204      	movs	r2, #4
 8012012:	4639      	mov	r1, r7
 8012014:	4620      	mov	r0, r4
 8012016:	b003      	add	sp, #12
 8012018:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801201c:	f7fc ba24 	b.w	800e468 <ucdr_deserialize_array_uint8_t>

08012020 <uxr_serialize_submessage_header>:
 8012020:	b530      	push	{r4, r5, lr}
 8012022:	b083      	sub	sp, #12
 8012024:	4615      	mov	r5, r2
 8012026:	4604      	mov	r4, r0
 8012028:	9301      	str	r3, [sp, #4]
 801202a:	f7fc fcaf 	bl	800e98c <ucdr_serialize_uint8_t>
 801202e:	4629      	mov	r1, r5
 8012030:	4620      	mov	r0, r4
 8012032:	f7fc fcab 	bl	800e98c <ucdr_serialize_uint8_t>
 8012036:	9a01      	ldr	r2, [sp, #4]
 8012038:	2101      	movs	r1, #1
 801203a:	4620      	mov	r0, r4
 801203c:	b003      	add	sp, #12
 801203e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012042:	f7fc bd4f 	b.w	800eae4 <ucdr_serialize_endian_uint16_t>
 8012046:	bf00      	nop

08012048 <uxr_deserialize_submessage_header>:
 8012048:	b530      	push	{r4, r5, lr}
 801204a:	b083      	sub	sp, #12
 801204c:	4615      	mov	r5, r2
 801204e:	4604      	mov	r4, r0
 8012050:	9301      	str	r3, [sp, #4]
 8012052:	f7fc fcb1 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012056:	4629      	mov	r1, r5
 8012058:	4620      	mov	r0, r4
 801205a:	f7fc fcad 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 801205e:	9a01      	ldr	r2, [sp, #4]
 8012060:	2101      	movs	r1, #1
 8012062:	4620      	mov	r0, r4
 8012064:	b003      	add	sp, #12
 8012066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801206a:	f7fc be2f 	b.w	800eccc <ucdr_deserialize_endian_uint16_t>
 801206e:	bf00      	nop

08012070 <uxr_serialize_CLIENT_Representation>:
 8012070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012074:	2204      	movs	r2, #4
 8012076:	460e      	mov	r6, r1
 8012078:	4605      	mov	r5, r0
 801207a:	f7fc f991 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 801207e:	2202      	movs	r2, #2
 8012080:	4607      	mov	r7, r0
 8012082:	1d31      	adds	r1, r6, #4
 8012084:	4628      	mov	r0, r5
 8012086:	f7fc f98b 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 801208a:	4038      	ands	r0, r7
 801208c:	2202      	movs	r2, #2
 801208e:	1db1      	adds	r1, r6, #6
 8012090:	b2c7      	uxtb	r7, r0
 8012092:	4628      	mov	r0, r5
 8012094:	f7fc f984 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012098:	2204      	movs	r2, #4
 801209a:	4007      	ands	r7, r0
 801209c:	f106 0108 	add.w	r1, r6, #8
 80120a0:	4628      	mov	r0, r5
 80120a2:	f7fc f97d 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 80120a6:	7b31      	ldrb	r1, [r6, #12]
 80120a8:	4007      	ands	r7, r0
 80120aa:	4628      	mov	r0, r5
 80120ac:	f7fc fc6e 	bl	800e98c <ucdr_serialize_uint8_t>
 80120b0:	7b71      	ldrb	r1, [r6, #13]
 80120b2:	4007      	ands	r7, r0
 80120b4:	4628      	mov	r0, r5
 80120b6:	f7fc fc3b 	bl	800e930 <ucdr_serialize_bool>
 80120ba:	7b73      	ldrb	r3, [r6, #13]
 80120bc:	ea07 0800 	and.w	r8, r7, r0
 80120c0:	b93b      	cbnz	r3, 80120d2 <uxr_serialize_CLIENT_Representation+0x62>
 80120c2:	8bb1      	ldrh	r1, [r6, #28]
 80120c4:	4628      	mov	r0, r5
 80120c6:	f7fc fc8d 	bl	800e9e4 <ucdr_serialize_uint16_t>
 80120ca:	ea08 0000 	and.w	r0, r8, r0
 80120ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120d2:	6931      	ldr	r1, [r6, #16]
 80120d4:	4628      	mov	r0, r5
 80120d6:	f7fc fe6f 	bl	800edb8 <ucdr_serialize_uint32_t>
 80120da:	6933      	ldr	r3, [r6, #16]
 80120dc:	b1e3      	cbz	r3, 8012118 <uxr_serialize_CLIENT_Representation+0xa8>
 80120de:	b1c0      	cbz	r0, 8012112 <uxr_serialize_CLIENT_Representation+0xa2>
 80120e0:	4637      	mov	r7, r6
 80120e2:	f04f 0900 	mov.w	r9, #0
 80120e6:	e001      	b.n	80120ec <uxr_serialize_CLIENT_Representation+0x7c>
 80120e8:	3708      	adds	r7, #8
 80120ea:	b194      	cbz	r4, 8012112 <uxr_serialize_CLIENT_Representation+0xa2>
 80120ec:	6979      	ldr	r1, [r7, #20]
 80120ee:	4628      	mov	r0, r5
 80120f0:	f005 fee6 	bl	8017ec0 <ucdr_serialize_string>
 80120f4:	69b9      	ldr	r1, [r7, #24]
 80120f6:	4604      	mov	r4, r0
 80120f8:	4628      	mov	r0, r5
 80120fa:	f005 fee1 	bl	8017ec0 <ucdr_serialize_string>
 80120fe:	6933      	ldr	r3, [r6, #16]
 8012100:	f109 0901 	add.w	r9, r9, #1
 8012104:	4004      	ands	r4, r0
 8012106:	4599      	cmp	r9, r3
 8012108:	b2e4      	uxtb	r4, r4
 801210a:	d3ed      	bcc.n	80120e8 <uxr_serialize_CLIENT_Representation+0x78>
 801210c:	ea08 0804 	and.w	r8, r8, r4
 8012110:	e7d7      	b.n	80120c2 <uxr_serialize_CLIENT_Representation+0x52>
 8012112:	f04f 0800 	mov.w	r8, #0
 8012116:	e7d4      	b.n	80120c2 <uxr_serialize_CLIENT_Representation+0x52>
 8012118:	ea08 0800 	and.w	r8, r8, r0
 801211c:	e7d1      	b.n	80120c2 <uxr_serialize_CLIENT_Representation+0x52>
 801211e:	bf00      	nop

08012120 <uxr_deserialize_CLIENT_Representation>:
 8012120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012124:	2204      	movs	r2, #4
 8012126:	460c      	mov	r4, r1
 8012128:	4605      	mov	r5, r0
 801212a:	f7fc f99d 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 801212e:	2202      	movs	r2, #2
 8012130:	4607      	mov	r7, r0
 8012132:	1d21      	adds	r1, r4, #4
 8012134:	4628      	mov	r0, r5
 8012136:	f7fc f997 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 801213a:	4038      	ands	r0, r7
 801213c:	2202      	movs	r2, #2
 801213e:	1da1      	adds	r1, r4, #6
 8012140:	b2c6      	uxtb	r6, r0
 8012142:	4628      	mov	r0, r5
 8012144:	f7fc f990 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012148:	2204      	movs	r2, #4
 801214a:	4006      	ands	r6, r0
 801214c:	f104 0108 	add.w	r1, r4, #8
 8012150:	4628      	mov	r0, r5
 8012152:	f7fc f989 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012156:	f104 010c 	add.w	r1, r4, #12
 801215a:	4006      	ands	r6, r0
 801215c:	4628      	mov	r0, r5
 801215e:	f7fc fc2b 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012162:	f104 010d 	add.w	r1, r4, #13
 8012166:	ea06 0700 	and.w	r7, r6, r0
 801216a:	4628      	mov	r0, r5
 801216c:	f7fc fbf6 	bl	800e95c <ucdr_deserialize_bool>
 8012170:	7b63      	ldrb	r3, [r4, #13]
 8012172:	4007      	ands	r7, r0
 8012174:	b93b      	cbnz	r3, 8012186 <uxr_deserialize_CLIENT_Representation+0x66>
 8012176:	f104 011c 	add.w	r1, r4, #28
 801217a:	4628      	mov	r0, r5
 801217c:	f7fc fd32 	bl	800ebe4 <ucdr_deserialize_uint16_t>
 8012180:	4038      	ands	r0, r7
 8012182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012186:	f104 0110 	add.w	r1, r4, #16
 801218a:	4628      	mov	r0, r5
 801218c:	f7fc ff44 	bl	800f018 <ucdr_deserialize_uint32_t>
 8012190:	6923      	ldr	r3, [r4, #16]
 8012192:	2b01      	cmp	r3, #1
 8012194:	d903      	bls.n	801219e <uxr_deserialize_CLIENT_Representation+0x7e>
 8012196:	2301      	movs	r3, #1
 8012198:	75ab      	strb	r3, [r5, #22]
 801219a:	2700      	movs	r7, #0
 801219c:	e7eb      	b.n	8012176 <uxr_deserialize_CLIENT_Representation+0x56>
 801219e:	b30b      	cbz	r3, 80121e4 <uxr_deserialize_CLIENT_Representation+0xc4>
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d0fa      	beq.n	801219a <uxr_deserialize_CLIENT_Representation+0x7a>
 80121a4:	46a0      	mov	r8, r4
 80121a6:	f04f 0900 	mov.w	r9, #0
 80121aa:	e001      	b.n	80121b0 <uxr_deserialize_CLIENT_Representation+0x90>
 80121ac:	2e00      	cmp	r6, #0
 80121ae:	d0f4      	beq.n	801219a <uxr_deserialize_CLIENT_Representation+0x7a>
 80121b0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80121b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121b8:	4628      	mov	r0, r5
 80121ba:	f005 fe91 	bl	8017ee0 <ucdr_deserialize_string>
 80121be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121c2:	4606      	mov	r6, r0
 80121c4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80121c8:	4628      	mov	r0, r5
 80121ca:	f005 fe89 	bl	8017ee0 <ucdr_deserialize_string>
 80121ce:	6923      	ldr	r3, [r4, #16]
 80121d0:	f109 0901 	add.w	r9, r9, #1
 80121d4:	4006      	ands	r6, r0
 80121d6:	4599      	cmp	r9, r3
 80121d8:	f108 0808 	add.w	r8, r8, #8
 80121dc:	b2f6      	uxtb	r6, r6
 80121de:	d3e5      	bcc.n	80121ac <uxr_deserialize_CLIENT_Representation+0x8c>
 80121e0:	4037      	ands	r7, r6
 80121e2:	e7c8      	b.n	8012176 <uxr_deserialize_CLIENT_Representation+0x56>
 80121e4:	4007      	ands	r7, r0
 80121e6:	e7c6      	b.n	8012176 <uxr_deserialize_CLIENT_Representation+0x56>

080121e8 <uxr_serialize_AGENT_Representation>:
 80121e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121ec:	2204      	movs	r2, #4
 80121ee:	460f      	mov	r7, r1
 80121f0:	4605      	mov	r5, r0
 80121f2:	f7fc f8d5 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 80121f6:	2202      	movs	r2, #2
 80121f8:	4604      	mov	r4, r0
 80121fa:	1d39      	adds	r1, r7, #4
 80121fc:	4628      	mov	r0, r5
 80121fe:	f7fc f8cf 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012202:	4020      	ands	r0, r4
 8012204:	2202      	movs	r2, #2
 8012206:	1db9      	adds	r1, r7, #6
 8012208:	b2c4      	uxtb	r4, r0
 801220a:	4628      	mov	r0, r5
 801220c:	f7fc f8c8 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012210:	7a39      	ldrb	r1, [r7, #8]
 8012212:	4004      	ands	r4, r0
 8012214:	4628      	mov	r0, r5
 8012216:	f7fc fb8b 	bl	800e930 <ucdr_serialize_bool>
 801221a:	7a3b      	ldrb	r3, [r7, #8]
 801221c:	ea00 0804 	and.w	r8, r0, r4
 8012220:	b913      	cbnz	r3, 8012228 <uxr_serialize_AGENT_Representation+0x40>
 8012222:	4640      	mov	r0, r8
 8012224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012228:	68f9      	ldr	r1, [r7, #12]
 801222a:	4628      	mov	r0, r5
 801222c:	f7fc fdc4 	bl	800edb8 <ucdr_serialize_uint32_t>
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	b303      	cbz	r3, 8012276 <uxr_serialize_AGENT_Representation+0x8e>
 8012234:	b1d0      	cbz	r0, 801226c <uxr_serialize_AGENT_Representation+0x84>
 8012236:	463e      	mov	r6, r7
 8012238:	f04f 0900 	mov.w	r9, #0
 801223c:	e001      	b.n	8012242 <uxr_serialize_AGENT_Representation+0x5a>
 801223e:	3608      	adds	r6, #8
 8012240:	b1a4      	cbz	r4, 801226c <uxr_serialize_AGENT_Representation+0x84>
 8012242:	6931      	ldr	r1, [r6, #16]
 8012244:	4628      	mov	r0, r5
 8012246:	f005 fe3b 	bl	8017ec0 <ucdr_serialize_string>
 801224a:	6971      	ldr	r1, [r6, #20]
 801224c:	4604      	mov	r4, r0
 801224e:	4628      	mov	r0, r5
 8012250:	f005 fe36 	bl	8017ec0 <ucdr_serialize_string>
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f109 0901 	add.w	r9, r9, #1
 801225a:	4004      	ands	r4, r0
 801225c:	4599      	cmp	r9, r3
 801225e:	b2e4      	uxtb	r4, r4
 8012260:	d3ed      	bcc.n	801223e <uxr_serialize_AGENT_Representation+0x56>
 8012262:	ea08 0804 	and.w	r8, r8, r4
 8012266:	4640      	mov	r0, r8
 8012268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801226c:	f04f 0800 	mov.w	r8, #0
 8012270:	4640      	mov	r0, r8
 8012272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012276:	ea08 0800 	and.w	r8, r8, r0
 801227a:	e7d2      	b.n	8012222 <uxr_serialize_AGENT_Representation+0x3a>

0801227c <uxr_serialize_DATAWRITER_Representation>:
 801227c:	b570      	push	{r4, r5, r6, lr}
 801227e:	460d      	mov	r5, r1
 8012280:	7809      	ldrb	r1, [r1, #0]
 8012282:	4606      	mov	r6, r0
 8012284:	f7fc fb82 	bl	800e98c <ucdr_serialize_uint8_t>
 8012288:	4604      	mov	r4, r0
 801228a:	b130      	cbz	r0, 801229a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801228c:	782b      	ldrb	r3, [r5, #0]
 801228e:	2b02      	cmp	r3, #2
 8012290:	d00c      	beq.n	80122ac <uxr_serialize_DATAWRITER_Representation+0x30>
 8012292:	2b03      	cmp	r3, #3
 8012294:	d010      	beq.n	80122b8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012296:	2b01      	cmp	r3, #1
 8012298:	d008      	beq.n	80122ac <uxr_serialize_DATAWRITER_Representation+0x30>
 801229a:	2202      	movs	r2, #2
 801229c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80122a0:	4630      	mov	r0, r6
 80122a2:	f7fc f87d 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 80122a6:	4020      	ands	r0, r4
 80122a8:	b2c0      	uxtb	r0, r0
 80122aa:	bd70      	pop	{r4, r5, r6, pc}
 80122ac:	6869      	ldr	r1, [r5, #4]
 80122ae:	4630      	mov	r0, r6
 80122b0:	f005 fe06 	bl	8017ec0 <ucdr_serialize_string>
 80122b4:	4604      	mov	r4, r0
 80122b6:	e7f0      	b.n	801229a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80122b8:	4629      	mov	r1, r5
 80122ba:	4630      	mov	r0, r6
 80122bc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80122c0:	3104      	adds	r1, #4
 80122c2:	f7fe f811 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 80122c6:	4604      	mov	r4, r0
 80122c8:	e7e7      	b.n	801229a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80122ca:	bf00      	nop

080122cc <uxr_serialize_ObjectVariant.part.0>:
 80122cc:	b570      	push	{r4, r5, r6, lr}
 80122ce:	780b      	ldrb	r3, [r1, #0]
 80122d0:	3b01      	subs	r3, #1
 80122d2:	460c      	mov	r4, r1
 80122d4:	4605      	mov	r5, r0
 80122d6:	2b0d      	cmp	r3, #13
 80122d8:	d854      	bhi.n	8012384 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80122da:	e8df f003 	tbb	[pc, r3]
 80122de:	0730      	.short	0x0730
 80122e0:	07071b1b 	.word	0x07071b1b
 80122e4:	0c530707 	.word	0x0c530707
 80122e8:	494e0c0c 	.word	0x494e0c0c
 80122ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122f0:	3104      	adds	r1, #4
 80122f2:	f7ff bfc3 	b.w	801227c <uxr_serialize_DATAWRITER_Representation>
 80122f6:	7909      	ldrb	r1, [r1, #4]
 80122f8:	f7fc fb48 	bl	800e98c <ucdr_serialize_uint8_t>
 80122fc:	b1e8      	cbz	r0, 801233a <uxr_serialize_ObjectVariant.part.0+0x6e>
 80122fe:	7923      	ldrb	r3, [r4, #4]
 8012300:	2b01      	cmp	r3, #1
 8012302:	d001      	beq.n	8012308 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012304:	2b02      	cmp	r3, #2
 8012306:	d13d      	bne.n	8012384 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012308:	68a1      	ldr	r1, [r4, #8]
 801230a:	4628      	mov	r0, r5
 801230c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012310:	f005 bdd6 	b.w	8017ec0 <ucdr_serialize_string>
 8012314:	7909      	ldrb	r1, [r1, #4]
 8012316:	f7fc fb39 	bl	800e98c <ucdr_serialize_uint8_t>
 801231a:	4606      	mov	r6, r0
 801231c:	b120      	cbz	r0, 8012328 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801231e:	7923      	ldrb	r3, [r4, #4]
 8012320:	2b02      	cmp	r3, #2
 8012322:	d039      	beq.n	8012398 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012324:	2b03      	cmp	r3, #3
 8012326:	d02f      	beq.n	8012388 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012328:	2202      	movs	r2, #2
 801232a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801232e:	4628      	mov	r0, r5
 8012330:	f7fc f836 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012334:	4030      	ands	r0, r6
 8012336:	b2c0      	uxtb	r0, r0
 8012338:	bd70      	pop	{r4, r5, r6, pc}
 801233a:	2000      	movs	r0, #0
 801233c:	bd70      	pop	{r4, r5, r6, pc}
 801233e:	7909      	ldrb	r1, [r1, #4]
 8012340:	f7fc fb24 	bl	800e98c <ucdr_serialize_uint8_t>
 8012344:	4606      	mov	r6, r0
 8012346:	b158      	cbz	r0, 8012360 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012348:	7923      	ldrb	r3, [r4, #4]
 801234a:	2b02      	cmp	r3, #2
 801234c:	d003      	beq.n	8012356 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801234e:	2b03      	cmp	r3, #3
 8012350:	d028      	beq.n	80123a4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8012352:	2b01      	cmp	r3, #1
 8012354:	d104      	bne.n	8012360 <uxr_serialize_ObjectVariant.part.0+0x94>
 8012356:	68a1      	ldr	r1, [r4, #8]
 8012358:	4628      	mov	r0, r5
 801235a:	f005 fdb1 	bl	8017ec0 <ucdr_serialize_string>
 801235e:	4606      	mov	r6, r0
 8012360:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012364:	4628      	mov	r0, r5
 8012366:	f7fd f84d 	bl	800f404 <ucdr_serialize_int16_t>
 801236a:	4030      	ands	r0, r6
 801236c:	b2c0      	uxtb	r0, r0
 801236e:	bd70      	pop	{r4, r5, r6, pc}
 8012370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012374:	3104      	adds	r1, #4
 8012376:	f7ff be7b 	b.w	8012070 <uxr_serialize_CLIENT_Representation>
 801237a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801237e:	3104      	adds	r1, #4
 8012380:	f7ff bf32 	b.w	80121e8 <uxr_serialize_AGENT_Representation>
 8012384:	2001      	movs	r0, #1
 8012386:	bd70      	pop	{r4, r5, r6, pc}
 8012388:	68a2      	ldr	r2, [r4, #8]
 801238a:	f104 010c 	add.w	r1, r4, #12
 801238e:	4628      	mov	r0, r5
 8012390:	f7fd ffaa 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 8012394:	4606      	mov	r6, r0
 8012396:	e7c7      	b.n	8012328 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012398:	68a1      	ldr	r1, [r4, #8]
 801239a:	4628      	mov	r0, r5
 801239c:	f005 fd90 	bl	8017ec0 <ucdr_serialize_string>
 80123a0:	4606      	mov	r6, r0
 80123a2:	e7c1      	b.n	8012328 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80123a4:	68a2      	ldr	r2, [r4, #8]
 80123a6:	f104 010c 	add.w	r1, r4, #12
 80123aa:	4628      	mov	r0, r5
 80123ac:	f7fd ff9c 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 80123b0:	4606      	mov	r6, r0
 80123b2:	e7d5      	b.n	8012360 <uxr_serialize_ObjectVariant.part.0+0x94>

080123b4 <uxr_deserialize_DATAWRITER_Representation>:
 80123b4:	b570      	push	{r4, r5, r6, lr}
 80123b6:	4606      	mov	r6, r0
 80123b8:	460d      	mov	r5, r1
 80123ba:	f7fc fafd 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 80123be:	4604      	mov	r4, r0
 80123c0:	b130      	cbz	r0, 80123d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80123c2:	782b      	ldrb	r3, [r5, #0]
 80123c4:	2b02      	cmp	r3, #2
 80123c6:	d00c      	beq.n	80123e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80123c8:	2b03      	cmp	r3, #3
 80123ca:	d012      	beq.n	80123f2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d008      	beq.n	80123e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80123d0:	2202      	movs	r2, #2
 80123d2:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80123d6:	4630      	mov	r0, r6
 80123d8:	f7fc f846 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 80123dc:	4020      	ands	r0, r4
 80123de:	b2c0      	uxtb	r0, r0
 80123e0:	bd70      	pop	{r4, r5, r6, pc}
 80123e2:	6869      	ldr	r1, [r5, #4]
 80123e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123e8:	4630      	mov	r0, r6
 80123ea:	f005 fd79 	bl	8017ee0 <ucdr_deserialize_string>
 80123ee:	4604      	mov	r4, r0
 80123f0:	e7ee      	b.n	80123d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80123f2:	1d2b      	adds	r3, r5, #4
 80123f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123f8:	f105 0108 	add.w	r1, r5, #8
 80123fc:	4630      	mov	r0, r6
 80123fe:	f7fd ff85 	bl	801030c <ucdr_deserialize_sequence_uint8_t>
 8012402:	4604      	mov	r4, r0
 8012404:	e7e4      	b.n	80123d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012406:	bf00      	nop

08012408 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012408:	b570      	push	{r4, r5, r6, lr}
 801240a:	460d      	mov	r5, r1
 801240c:	7809      	ldrb	r1, [r1, #0]
 801240e:	4606      	mov	r6, r0
 8012410:	f7fc fa8e 	bl	800e930 <ucdr_serialize_bool>
 8012414:	782b      	ldrb	r3, [r5, #0]
 8012416:	4604      	mov	r4, r0
 8012418:	b94b      	cbnz	r3, 801242e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801241a:	7a29      	ldrb	r1, [r5, #8]
 801241c:	4630      	mov	r0, r6
 801241e:	f7fc fa87 	bl	800e930 <ucdr_serialize_bool>
 8012422:	7a2b      	ldrb	r3, [r5, #8]
 8012424:	4004      	ands	r4, r0
 8012426:	b2e4      	uxtb	r4, r4
 8012428:	b943      	cbnz	r3, 801243c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801242a:	4620      	mov	r0, r4
 801242c:	bd70      	pop	{r4, r5, r6, pc}
 801242e:	6869      	ldr	r1, [r5, #4]
 8012430:	4630      	mov	r0, r6
 8012432:	f005 fd45 	bl	8017ec0 <ucdr_serialize_string>
 8012436:	4004      	ands	r4, r0
 8012438:	b2e4      	uxtb	r4, r4
 801243a:	e7ee      	b.n	801241a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801243c:	68e9      	ldr	r1, [r5, #12]
 801243e:	4630      	mov	r0, r6
 8012440:	f005 fd3e 	bl	8017ec0 <ucdr_serialize_string>
 8012444:	4004      	ands	r4, r0
 8012446:	4620      	mov	r0, r4
 8012448:	bd70      	pop	{r4, r5, r6, pc}
 801244a:	bf00      	nop

0801244c <uxr_serialize_OBJK_Topic_Binary>:
 801244c:	b570      	push	{r4, r5, r6, lr}
 801244e:	460d      	mov	r5, r1
 8012450:	6809      	ldr	r1, [r1, #0]
 8012452:	4606      	mov	r6, r0
 8012454:	f005 fd34 	bl	8017ec0 <ucdr_serialize_string>
 8012458:	7929      	ldrb	r1, [r5, #4]
 801245a:	4604      	mov	r4, r0
 801245c:	4630      	mov	r0, r6
 801245e:	f7fc fa67 	bl	800e930 <ucdr_serialize_bool>
 8012462:	792b      	ldrb	r3, [r5, #4]
 8012464:	4004      	ands	r4, r0
 8012466:	b2e4      	uxtb	r4, r4
 8012468:	b943      	cbnz	r3, 801247c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801246a:	7b29      	ldrb	r1, [r5, #12]
 801246c:	4630      	mov	r0, r6
 801246e:	f7fc fa5f 	bl	800e930 <ucdr_serialize_bool>
 8012472:	7b2b      	ldrb	r3, [r5, #12]
 8012474:	4004      	ands	r4, r0
 8012476:	b93b      	cbnz	r3, 8012488 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012478:	4620      	mov	r0, r4
 801247a:	bd70      	pop	{r4, r5, r6, pc}
 801247c:	68a9      	ldr	r1, [r5, #8]
 801247e:	4630      	mov	r0, r6
 8012480:	f005 fd1e 	bl	8017ec0 <ucdr_serialize_string>
 8012484:	4004      	ands	r4, r0
 8012486:	e7f0      	b.n	801246a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012488:	6929      	ldr	r1, [r5, #16]
 801248a:	4630      	mov	r0, r6
 801248c:	f005 fd18 	bl	8017ec0 <ucdr_serialize_string>
 8012490:	4004      	ands	r4, r0
 8012492:	b2e4      	uxtb	r4, r4
 8012494:	4620      	mov	r0, r4
 8012496:	bd70      	pop	{r4, r5, r6, pc}

08012498 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801249c:	460c      	mov	r4, r1
 801249e:	7809      	ldrb	r1, [r1, #0]
 80124a0:	4606      	mov	r6, r0
 80124a2:	f7fc fa45 	bl	800e930 <ucdr_serialize_bool>
 80124a6:	7823      	ldrb	r3, [r4, #0]
 80124a8:	4605      	mov	r5, r0
 80124aa:	b96b      	cbnz	r3, 80124c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80124ac:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80124b0:	4630      	mov	r0, r6
 80124b2:	f7fc fa3d 	bl	800e930 <ucdr_serialize_bool>
 80124b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80124ba:	4005      	ands	r5, r0
 80124bc:	b2ed      	uxtb	r5, r5
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d169      	bne.n	8012596 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80124c2:	4628      	mov	r0, r5
 80124c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c8:	6861      	ldr	r1, [r4, #4]
 80124ca:	4630      	mov	r0, r6
 80124cc:	f7fc fc74 	bl	800edb8 <ucdr_serialize_uint32_t>
 80124d0:	6863      	ldr	r3, [r4, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d06b      	beq.n	80125ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80124d6:	2800      	cmp	r0, #0
 80124d8:	d067      	beq.n	80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124da:	68a1      	ldr	r1, [r4, #8]
 80124dc:	4630      	mov	r0, r6
 80124de:	f005 fcef 	bl	8017ec0 <ucdr_serialize_string>
 80124e2:	6863      	ldr	r3, [r4, #4]
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d953      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124e8:	2800      	cmp	r0, #0
 80124ea:	d05e      	beq.n	80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124ec:	68e1      	ldr	r1, [r4, #12]
 80124ee:	4630      	mov	r0, r6
 80124f0:	f005 fce6 	bl	8017ec0 <ucdr_serialize_string>
 80124f4:	6863      	ldr	r3, [r4, #4]
 80124f6:	2b02      	cmp	r3, #2
 80124f8:	d94a      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d055      	beq.n	80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80124fe:	6921      	ldr	r1, [r4, #16]
 8012500:	4630      	mov	r0, r6
 8012502:	f005 fcdd 	bl	8017ec0 <ucdr_serialize_string>
 8012506:	6863      	ldr	r3, [r4, #4]
 8012508:	2b03      	cmp	r3, #3
 801250a:	d941      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801250c:	2800      	cmp	r0, #0
 801250e:	d04c      	beq.n	80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012510:	6961      	ldr	r1, [r4, #20]
 8012512:	4630      	mov	r0, r6
 8012514:	f005 fcd4 	bl	8017ec0 <ucdr_serialize_string>
 8012518:	6863      	ldr	r3, [r4, #4]
 801251a:	2b04      	cmp	r3, #4
 801251c:	d938      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801251e:	2800      	cmp	r0, #0
 8012520:	d043      	beq.n	80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012522:	69a1      	ldr	r1, [r4, #24]
 8012524:	4630      	mov	r0, r6
 8012526:	f005 fccb 	bl	8017ec0 <ucdr_serialize_string>
 801252a:	6863      	ldr	r3, [r4, #4]
 801252c:	2b05      	cmp	r3, #5
 801252e:	d92f      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012530:	2800      	cmp	r0, #0
 8012532:	d03a      	beq.n	80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012534:	69e1      	ldr	r1, [r4, #28]
 8012536:	4630      	mov	r0, r6
 8012538:	f005 fcc2 	bl	8017ec0 <ucdr_serialize_string>
 801253c:	6863      	ldr	r3, [r4, #4]
 801253e:	2b06      	cmp	r3, #6
 8012540:	d926      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012542:	b390      	cbz	r0, 80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012544:	6a21      	ldr	r1, [r4, #32]
 8012546:	4630      	mov	r0, r6
 8012548:	f005 fcba 	bl	8017ec0 <ucdr_serialize_string>
 801254c:	6863      	ldr	r3, [r4, #4]
 801254e:	2b07      	cmp	r3, #7
 8012550:	d91e      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012552:	b350      	cbz	r0, 80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012554:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012556:	4630      	mov	r0, r6
 8012558:	f005 fcb2 	bl	8017ec0 <ucdr_serialize_string>
 801255c:	6863      	ldr	r3, [r4, #4]
 801255e:	2b08      	cmp	r3, #8
 8012560:	d916      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012562:	b310      	cbz	r0, 80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012564:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012566:	4630      	mov	r0, r6
 8012568:	f005 fcaa 	bl	8017ec0 <ucdr_serialize_string>
 801256c:	6863      	ldr	r3, [r4, #4]
 801256e:	2b09      	cmp	r3, #9
 8012570:	d90e      	bls.n	8012590 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012572:	b1d0      	cbz	r0, 80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012574:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012578:	2709      	movs	r7, #9
 801257a:	e000      	b.n	801257e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801257c:	b1a8      	cbz	r0, 80125aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801257e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012582:	4630      	mov	r0, r6
 8012584:	f005 fc9c 	bl	8017ec0 <ucdr_serialize_string>
 8012588:	6862      	ldr	r2, [r4, #4]
 801258a:	3701      	adds	r7, #1
 801258c:	4297      	cmp	r7, r2
 801258e:	d3f5      	bcc.n	801257c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012590:	4005      	ands	r5, r0
 8012592:	b2ed      	uxtb	r5, r5
 8012594:	e78a      	b.n	80124ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012596:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012598:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801259c:	4630      	mov	r0, r6
 801259e:	f7fd fea3 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 80125a2:	4005      	ands	r5, r0
 80125a4:	4628      	mov	r0, r5
 80125a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125aa:	2500      	movs	r5, #0
 80125ac:	e77e      	b.n	80124ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80125ae:	4028      	ands	r0, r5
 80125b0:	b2c5      	uxtb	r5, r0
 80125b2:	e77b      	b.n	80124ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080125b4 <uxr_serialize_OBJK_Publisher_Binary>:
 80125b4:	b570      	push	{r4, r5, r6, lr}
 80125b6:	460d      	mov	r5, r1
 80125b8:	7809      	ldrb	r1, [r1, #0]
 80125ba:	4606      	mov	r6, r0
 80125bc:	f7fc f9b8 	bl	800e930 <ucdr_serialize_bool>
 80125c0:	782b      	ldrb	r3, [r5, #0]
 80125c2:	4604      	mov	r4, r0
 80125c4:	b94b      	cbnz	r3, 80125da <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80125c6:	7a29      	ldrb	r1, [r5, #8]
 80125c8:	4630      	mov	r0, r6
 80125ca:	f7fc f9b1 	bl	800e930 <ucdr_serialize_bool>
 80125ce:	7a2b      	ldrb	r3, [r5, #8]
 80125d0:	4004      	ands	r4, r0
 80125d2:	b2e4      	uxtb	r4, r4
 80125d4:	b943      	cbnz	r3, 80125e8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80125d6:	4620      	mov	r0, r4
 80125d8:	bd70      	pop	{r4, r5, r6, pc}
 80125da:	6869      	ldr	r1, [r5, #4]
 80125dc:	4630      	mov	r0, r6
 80125de:	f005 fc6f 	bl	8017ec0 <ucdr_serialize_string>
 80125e2:	4004      	ands	r4, r0
 80125e4:	b2e4      	uxtb	r4, r4
 80125e6:	e7ee      	b.n	80125c6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80125e8:	f105 010c 	add.w	r1, r5, #12
 80125ec:	4630      	mov	r0, r6
 80125ee:	f7ff ff53 	bl	8012498 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80125f2:	4004      	ands	r4, r0
 80125f4:	4620      	mov	r0, r4
 80125f6:	bd70      	pop	{r4, r5, r6, pc}

080125f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125fc:	460c      	mov	r4, r1
 80125fe:	7809      	ldrb	r1, [r1, #0]
 8012600:	4606      	mov	r6, r0
 8012602:	f7fc f995 	bl	800e930 <ucdr_serialize_bool>
 8012606:	7823      	ldrb	r3, [r4, #0]
 8012608:	4605      	mov	r5, r0
 801260a:	b96b      	cbnz	r3, 8012628 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801260c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8012610:	4630      	mov	r0, r6
 8012612:	f7fc f98d 	bl	800e930 <ucdr_serialize_bool>
 8012616:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801261a:	4005      	ands	r5, r0
 801261c:	b2ed      	uxtb	r5, r5
 801261e:	2b00      	cmp	r3, #0
 8012620:	d169      	bne.n	80126f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012622:	4628      	mov	r0, r5
 8012624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012628:	6861      	ldr	r1, [r4, #4]
 801262a:	4630      	mov	r0, r6
 801262c:	f7fc fbc4 	bl	800edb8 <ucdr_serialize_uint32_t>
 8012630:	6863      	ldr	r3, [r4, #4]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d06b      	beq.n	801270e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012636:	2800      	cmp	r0, #0
 8012638:	d067      	beq.n	801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801263a:	68a1      	ldr	r1, [r4, #8]
 801263c:	4630      	mov	r0, r6
 801263e:	f005 fc3f 	bl	8017ec0 <ucdr_serialize_string>
 8012642:	6863      	ldr	r3, [r4, #4]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d953      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012648:	2800      	cmp	r0, #0
 801264a:	d05e      	beq.n	801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801264c:	68e1      	ldr	r1, [r4, #12]
 801264e:	4630      	mov	r0, r6
 8012650:	f005 fc36 	bl	8017ec0 <ucdr_serialize_string>
 8012654:	6863      	ldr	r3, [r4, #4]
 8012656:	2b02      	cmp	r3, #2
 8012658:	d94a      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801265a:	2800      	cmp	r0, #0
 801265c:	d055      	beq.n	801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801265e:	6921      	ldr	r1, [r4, #16]
 8012660:	4630      	mov	r0, r6
 8012662:	f005 fc2d 	bl	8017ec0 <ucdr_serialize_string>
 8012666:	6863      	ldr	r3, [r4, #4]
 8012668:	2b03      	cmp	r3, #3
 801266a:	d941      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801266c:	2800      	cmp	r0, #0
 801266e:	d04c      	beq.n	801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012670:	6961      	ldr	r1, [r4, #20]
 8012672:	4630      	mov	r0, r6
 8012674:	f005 fc24 	bl	8017ec0 <ucdr_serialize_string>
 8012678:	6863      	ldr	r3, [r4, #4]
 801267a:	2b04      	cmp	r3, #4
 801267c:	d938      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801267e:	2800      	cmp	r0, #0
 8012680:	d043      	beq.n	801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012682:	69a1      	ldr	r1, [r4, #24]
 8012684:	4630      	mov	r0, r6
 8012686:	f005 fc1b 	bl	8017ec0 <ucdr_serialize_string>
 801268a:	6863      	ldr	r3, [r4, #4]
 801268c:	2b05      	cmp	r3, #5
 801268e:	d92f      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012690:	2800      	cmp	r0, #0
 8012692:	d03a      	beq.n	801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012694:	69e1      	ldr	r1, [r4, #28]
 8012696:	4630      	mov	r0, r6
 8012698:	f005 fc12 	bl	8017ec0 <ucdr_serialize_string>
 801269c:	6863      	ldr	r3, [r4, #4]
 801269e:	2b06      	cmp	r3, #6
 80126a0:	d926      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126a2:	b390      	cbz	r0, 801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126a4:	6a21      	ldr	r1, [r4, #32]
 80126a6:	4630      	mov	r0, r6
 80126a8:	f005 fc0a 	bl	8017ec0 <ucdr_serialize_string>
 80126ac:	6863      	ldr	r3, [r4, #4]
 80126ae:	2b07      	cmp	r3, #7
 80126b0:	d91e      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126b2:	b350      	cbz	r0, 801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80126b6:	4630      	mov	r0, r6
 80126b8:	f005 fc02 	bl	8017ec0 <ucdr_serialize_string>
 80126bc:	6863      	ldr	r3, [r4, #4]
 80126be:	2b08      	cmp	r3, #8
 80126c0:	d916      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126c2:	b310      	cbz	r0, 801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80126c6:	4630      	mov	r0, r6
 80126c8:	f005 fbfa 	bl	8017ec0 <ucdr_serialize_string>
 80126cc:	6863      	ldr	r3, [r4, #4]
 80126ce:	2b09      	cmp	r3, #9
 80126d0:	d90e      	bls.n	80126f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80126d2:	b1d0      	cbz	r0, 801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126d4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80126d8:	2709      	movs	r7, #9
 80126da:	e000      	b.n	80126de <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80126dc:	b1a8      	cbz	r0, 801270a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80126de:	f858 1b04 	ldr.w	r1, [r8], #4
 80126e2:	4630      	mov	r0, r6
 80126e4:	f005 fbec 	bl	8017ec0 <ucdr_serialize_string>
 80126e8:	6862      	ldr	r2, [r4, #4]
 80126ea:	3701      	adds	r7, #1
 80126ec:	4297      	cmp	r7, r2
 80126ee:	d3f5      	bcc.n	80126dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80126f0:	4005      	ands	r5, r0
 80126f2:	b2ed      	uxtb	r5, r5
 80126f4:	e78a      	b.n	801260c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80126f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80126f8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80126fc:	4630      	mov	r0, r6
 80126fe:	f7fd fdf3 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 8012702:	4005      	ands	r5, r0
 8012704:	4628      	mov	r0, r5
 8012706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801270a:	2500      	movs	r5, #0
 801270c:	e77e      	b.n	801260c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801270e:	4028      	ands	r0, r5
 8012710:	b2c5      	uxtb	r5, r0
 8012712:	e77b      	b.n	801260c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012714 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012714:	b570      	push	{r4, r5, r6, lr}
 8012716:	460d      	mov	r5, r1
 8012718:	7809      	ldrb	r1, [r1, #0]
 801271a:	4606      	mov	r6, r0
 801271c:	f7fc f908 	bl	800e930 <ucdr_serialize_bool>
 8012720:	782b      	ldrb	r3, [r5, #0]
 8012722:	4604      	mov	r4, r0
 8012724:	b94b      	cbnz	r3, 801273a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012726:	7a29      	ldrb	r1, [r5, #8]
 8012728:	4630      	mov	r0, r6
 801272a:	f7fc f901 	bl	800e930 <ucdr_serialize_bool>
 801272e:	7a2b      	ldrb	r3, [r5, #8]
 8012730:	4004      	ands	r4, r0
 8012732:	b2e4      	uxtb	r4, r4
 8012734:	b943      	cbnz	r3, 8012748 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012736:	4620      	mov	r0, r4
 8012738:	bd70      	pop	{r4, r5, r6, pc}
 801273a:	6869      	ldr	r1, [r5, #4]
 801273c:	4630      	mov	r0, r6
 801273e:	f005 fbbf 	bl	8017ec0 <ucdr_serialize_string>
 8012742:	4004      	ands	r4, r0
 8012744:	b2e4      	uxtb	r4, r4
 8012746:	e7ee      	b.n	8012726 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012748:	f105 010c 	add.w	r1, r5, #12
 801274c:	4630      	mov	r0, r6
 801274e:	f7ff ff53 	bl	80125f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012752:	4004      	ands	r4, r0
 8012754:	4620      	mov	r0, r4
 8012756:	bd70      	pop	{r4, r5, r6, pc}

08012758 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012758:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801275c:	4688      	mov	r8, r1
 801275e:	8809      	ldrh	r1, [r1, #0]
 8012760:	4681      	mov	r9, r0
 8012762:	f7fc f93f 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012766:	f898 1002 	ldrb.w	r1, [r8, #2]
 801276a:	4606      	mov	r6, r0
 801276c:	4648      	mov	r0, r9
 801276e:	f7fc f8df 	bl	800e930 <ucdr_serialize_bool>
 8012772:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012776:	4006      	ands	r6, r0
 8012778:	b2f5      	uxtb	r5, r6
 801277a:	b9eb      	cbnz	r3, 80127b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801277c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012780:	4648      	mov	r0, r9
 8012782:	f7fc f8d5 	bl	800e930 <ucdr_serialize_bool>
 8012786:	f898 3006 	ldrb.w	r3, [r8, #6]
 801278a:	4005      	ands	r5, r0
 801278c:	bb7b      	cbnz	r3, 80127ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801278e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012792:	4648      	mov	r0, r9
 8012794:	f7fc f8cc 	bl	800e930 <ucdr_serialize_bool>
 8012798:	f898 300c 	ldrb.w	r3, [r8, #12]
 801279c:	4005      	ands	r5, r0
 801279e:	b9f3      	cbnz	r3, 80127de <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80127a0:	f898 1014 	ldrb.w	r1, [r8, #20]
 80127a4:	4648      	mov	r0, r9
 80127a6:	f7fc f8c3 	bl	800e930 <ucdr_serialize_bool>
 80127aa:	f898 3014 	ldrb.w	r3, [r8, #20]
 80127ae:	4005      	ands	r5, r0
 80127b0:	b94b      	cbnz	r3, 80127c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80127b2:	4628      	mov	r0, r5
 80127b4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80127b8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80127bc:	4648      	mov	r0, r9
 80127be:	f7fc f911 	bl	800e9e4 <ucdr_serialize_uint16_t>
 80127c2:	4005      	ands	r5, r0
 80127c4:	e7da      	b.n	801277c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80127c6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80127ca:	f108 011c 	add.w	r1, r8, #28
 80127ce:	4648      	mov	r0, r9
 80127d0:	f7fd fd8a 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 80127d4:	4028      	ands	r0, r5
 80127d6:	b2c5      	uxtb	r5, r0
 80127d8:	4628      	mov	r0, r5
 80127da:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80127de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80127e2:	4648      	mov	r0, r9
 80127e4:	f7fc fae8 	bl	800edb8 <ucdr_serialize_uint32_t>
 80127e8:	4028      	ands	r0, r5
 80127ea:	b2c5      	uxtb	r5, r0
 80127ec:	e7d8      	b.n	80127a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80127ee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80127f2:	4648      	mov	r0, r9
 80127f4:	f7fc fae0 	bl	800edb8 <ucdr_serialize_uint32_t>
 80127f8:	4028      	ands	r0, r5
 80127fa:	b2c5      	uxtb	r5, r0
 80127fc:	e7c7      	b.n	801278e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80127fe:	bf00      	nop

08012800 <uxr_serialize_OBJK_DataReader_Binary>:
 8012800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012802:	2202      	movs	r2, #2
 8012804:	460c      	mov	r4, r1
 8012806:	4606      	mov	r6, r0
 8012808:	f7fb fdca 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 801280c:	78a1      	ldrb	r1, [r4, #2]
 801280e:	4605      	mov	r5, r0
 8012810:	4630      	mov	r0, r6
 8012812:	f7fc f88d 	bl	800e930 <ucdr_serialize_bool>
 8012816:	78a3      	ldrb	r3, [r4, #2]
 8012818:	4005      	ands	r5, r0
 801281a:	b2ed      	uxtb	r5, r5
 801281c:	b90b      	cbnz	r3, 8012822 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801281e:	4628      	mov	r0, r5
 8012820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012822:	f104 0108 	add.w	r1, r4, #8
 8012826:	4630      	mov	r0, r6
 8012828:	f7ff ff96 	bl	8012758 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801282c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012830:	4607      	mov	r7, r0
 8012832:	4630      	mov	r0, r6
 8012834:	f7fc f87c 	bl	800e930 <ucdr_serialize_bool>
 8012838:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801283c:	4038      	ands	r0, r7
 801283e:	b2c7      	uxtb	r7, r0
 8012840:	b95b      	cbnz	r3, 801285a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012842:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8012846:	4630      	mov	r0, r6
 8012848:	f7fc f872 	bl	800e930 <ucdr_serialize_bool>
 801284c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012850:	4007      	ands	r7, r0
 8012852:	b94b      	cbnz	r3, 8012868 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012854:	403d      	ands	r5, r7
 8012856:	4628      	mov	r0, r5
 8012858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801285a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801285e:	4630      	mov	r0, r6
 8012860:	f7fc fd00 	bl	800f264 <ucdr_serialize_uint64_t>
 8012864:	4007      	ands	r7, r0
 8012866:	e7ec      	b.n	8012842 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012868:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801286a:	4630      	mov	r0, r6
 801286c:	f005 fb28 	bl	8017ec0 <ucdr_serialize_string>
 8012870:	4007      	ands	r7, r0
 8012872:	b2ff      	uxtb	r7, r7
 8012874:	e7ee      	b.n	8012854 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012876:	bf00      	nop

08012878 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801287a:	2202      	movs	r2, #2
 801287c:	460d      	mov	r5, r1
 801287e:	4606      	mov	r6, r0
 8012880:	f7fb fd8e 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012884:	78a9      	ldrb	r1, [r5, #2]
 8012886:	4604      	mov	r4, r0
 8012888:	4630      	mov	r0, r6
 801288a:	f7fc f851 	bl	800e930 <ucdr_serialize_bool>
 801288e:	78ab      	ldrb	r3, [r5, #2]
 8012890:	4004      	ands	r4, r0
 8012892:	b2e4      	uxtb	r4, r4
 8012894:	b90b      	cbnz	r3, 801289a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012896:	4620      	mov	r0, r4
 8012898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801289a:	f105 0108 	add.w	r1, r5, #8
 801289e:	4630      	mov	r0, r6
 80128a0:	f7ff ff5a 	bl	8012758 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80128a4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80128a8:	4607      	mov	r7, r0
 80128aa:	4630      	mov	r0, r6
 80128ac:	f7fc f840 	bl	800e930 <ucdr_serialize_bool>
 80128b0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80128b4:	4038      	ands	r0, r7
 80128b6:	b2c7      	uxtb	r7, r0
 80128b8:	b913      	cbnz	r3, 80128c0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80128ba:	403c      	ands	r4, r7
 80128bc:	4620      	mov	r0, r4
 80128be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128c0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80128c4:	4630      	mov	r0, r6
 80128c6:	f7fc fccd 	bl	800f264 <ucdr_serialize_uint64_t>
 80128ca:	4007      	ands	r7, r0
 80128cc:	e7f5      	b.n	80128ba <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80128ce:	bf00      	nop

080128d0 <uxr_serialize_OBJK_Replier_Binary>:
 80128d0:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80128d4:	460f      	mov	r7, r1
 80128d6:	6809      	ldr	r1, [r1, #0]
 80128d8:	4680      	mov	r8, r0
 80128da:	f005 faf1 	bl	8017ec0 <ucdr_serialize_string>
 80128de:	6879      	ldr	r1, [r7, #4]
 80128e0:	4605      	mov	r5, r0
 80128e2:	4640      	mov	r0, r8
 80128e4:	f005 faec 	bl	8017ec0 <ucdr_serialize_string>
 80128e8:	68b9      	ldr	r1, [r7, #8]
 80128ea:	4005      	ands	r5, r0
 80128ec:	4640      	mov	r0, r8
 80128ee:	f005 fae7 	bl	8017ec0 <ucdr_serialize_string>
 80128f2:	b2ec      	uxtb	r4, r5
 80128f4:	4004      	ands	r4, r0
 80128f6:	7b39      	ldrb	r1, [r7, #12]
 80128f8:	4640      	mov	r0, r8
 80128fa:	f7fc f819 	bl	800e930 <ucdr_serialize_bool>
 80128fe:	7b3b      	ldrb	r3, [r7, #12]
 8012900:	4004      	ands	r4, r0
 8012902:	b94b      	cbnz	r3, 8012918 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012904:	7d39      	ldrb	r1, [r7, #20]
 8012906:	4640      	mov	r0, r8
 8012908:	f7fc f812 	bl	800e930 <ucdr_serialize_bool>
 801290c:	7d3b      	ldrb	r3, [r7, #20]
 801290e:	4004      	ands	r4, r0
 8012910:	b943      	cbnz	r3, 8012924 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012912:	4620      	mov	r0, r4
 8012914:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012918:	6939      	ldr	r1, [r7, #16]
 801291a:	4640      	mov	r0, r8
 801291c:	f005 fad0 	bl	8017ec0 <ucdr_serialize_string>
 8012920:	4004      	ands	r4, r0
 8012922:	e7ef      	b.n	8012904 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012924:	69b9      	ldr	r1, [r7, #24]
 8012926:	4640      	mov	r0, r8
 8012928:	f005 faca 	bl	8017ec0 <ucdr_serialize_string>
 801292c:	4004      	ands	r4, r0
 801292e:	b2e4      	uxtb	r4, r4
 8012930:	4620      	mov	r0, r4
 8012932:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012936:	bf00      	nop

08012938 <uxr_deserialize_ObjectVariant>:
 8012938:	b570      	push	{r4, r5, r6, lr}
 801293a:	4605      	mov	r5, r0
 801293c:	460e      	mov	r6, r1
 801293e:	f7fc f83b 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012942:	b168      	cbz	r0, 8012960 <uxr_deserialize_ObjectVariant+0x28>
 8012944:	7833      	ldrb	r3, [r6, #0]
 8012946:	3b01      	subs	r3, #1
 8012948:	4604      	mov	r4, r0
 801294a:	2b0d      	cmp	r3, #13
 801294c:	d809      	bhi.n	8012962 <uxr_deserialize_ObjectVariant+0x2a>
 801294e:	e8df f003 	tbb	[pc, r3]
 8012952:	0a41      	.short	0x0a41
 8012954:	0a0a2323 	.word	0x0a0a2323
 8012958:	10080a0a 	.word	0x10080a0a
 801295c:	565c1010 	.word	0x565c1010
 8012960:	2400      	movs	r4, #0
 8012962:	4620      	mov	r0, r4
 8012964:	bd70      	pop	{r4, r5, r6, pc}
 8012966:	1d31      	adds	r1, r6, #4
 8012968:	4628      	mov	r0, r5
 801296a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801296e:	f7ff bd21 	b.w	80123b4 <uxr_deserialize_DATAWRITER_Representation>
 8012972:	1d31      	adds	r1, r6, #4
 8012974:	4628      	mov	r0, r5
 8012976:	f7fc f81f 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 801297a:	2800      	cmp	r0, #0
 801297c:	d0f0      	beq.n	8012960 <uxr_deserialize_ObjectVariant+0x28>
 801297e:	7933      	ldrb	r3, [r6, #4]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d001      	beq.n	8012988 <uxr_deserialize_ObjectVariant+0x50>
 8012984:	2b02      	cmp	r3, #2
 8012986:	d1ec      	bne.n	8012962 <uxr_deserialize_ObjectVariant+0x2a>
 8012988:	68b1      	ldr	r1, [r6, #8]
 801298a:	4628      	mov	r0, r5
 801298c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012994:	f005 baa4 	b.w	8017ee0 <ucdr_deserialize_string>
 8012998:	1d31      	adds	r1, r6, #4
 801299a:	4628      	mov	r0, r5
 801299c:	f7fc f80c 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 80129a0:	4604      	mov	r4, r0
 80129a2:	b170      	cbz	r0, 80129c2 <uxr_deserialize_ObjectVariant+0x8a>
 80129a4:	7933      	ldrb	r3, [r6, #4]
 80129a6:	2b02      	cmp	r3, #2
 80129a8:	d04c      	beq.n	8012a44 <uxr_deserialize_ObjectVariant+0x10c>
 80129aa:	2b03      	cmp	r3, #3
 80129ac:	d109      	bne.n	80129c2 <uxr_deserialize_ObjectVariant+0x8a>
 80129ae:	f106 0308 	add.w	r3, r6, #8
 80129b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80129b6:	f106 010c 	add.w	r1, r6, #12
 80129ba:	4628      	mov	r0, r5
 80129bc:	f7fd fca6 	bl	801030c <ucdr_deserialize_sequence_uint8_t>
 80129c0:	4604      	mov	r4, r0
 80129c2:	2202      	movs	r2, #2
 80129c4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80129c8:	4628      	mov	r0, r5
 80129ca:	f7fb fd4d 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 80129ce:	4020      	ands	r0, r4
 80129d0:	b2c4      	uxtb	r4, r0
 80129d2:	e7c6      	b.n	8012962 <uxr_deserialize_ObjectVariant+0x2a>
 80129d4:	1d31      	adds	r1, r6, #4
 80129d6:	4628      	mov	r0, r5
 80129d8:	f7fb ffee 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 80129dc:	4604      	mov	r4, r0
 80129de:	b130      	cbz	r0, 80129ee <uxr_deserialize_ObjectVariant+0xb6>
 80129e0:	7933      	ldrb	r3, [r6, #4]
 80129e2:	2b02      	cmp	r3, #2
 80129e4:	d036      	beq.n	8012a54 <uxr_deserialize_ObjectVariant+0x11c>
 80129e6:	2b03      	cmp	r3, #3
 80129e8:	d03c      	beq.n	8012a64 <uxr_deserialize_ObjectVariant+0x12c>
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d032      	beq.n	8012a54 <uxr_deserialize_ObjectVariant+0x11c>
 80129ee:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80129f2:	4628      	mov	r0, r5
 80129f4:	f7fc fd86 	bl	800f504 <ucdr_deserialize_int16_t>
 80129f8:	4020      	ands	r0, r4
 80129fa:	b2c4      	uxtb	r4, r0
 80129fc:	e7b1      	b.n	8012962 <uxr_deserialize_ObjectVariant+0x2a>
 80129fe:	1d31      	adds	r1, r6, #4
 8012a00:	4628      	mov	r0, r5
 8012a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a06:	f7ff bb8b 	b.w	8012120 <uxr_deserialize_CLIENT_Representation>
 8012a0a:	2204      	movs	r2, #4
 8012a0c:	18b1      	adds	r1, r6, r2
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f7fb fd2a 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012a14:	2202      	movs	r2, #2
 8012a16:	f106 0108 	add.w	r1, r6, #8
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	f7fb fd23 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012a22:	2202      	movs	r2, #2
 8012a24:	4004      	ands	r4, r0
 8012a26:	f106 010a 	add.w	r1, r6, #10
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	f7fb fd1c 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012a30:	b2e4      	uxtb	r4, r4
 8012a32:	4603      	mov	r3, r0
 8012a34:	f106 010c 	add.w	r1, r6, #12
 8012a38:	4628      	mov	r0, r5
 8012a3a:	401c      	ands	r4, r3
 8012a3c:	f7fb ff8e 	bl	800e95c <ucdr_deserialize_bool>
 8012a40:	4004      	ands	r4, r0
 8012a42:	e78e      	b.n	8012962 <uxr_deserialize_ObjectVariant+0x2a>
 8012a44:	68b1      	ldr	r1, [r6, #8]
 8012a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	f005 fa48 	bl	8017ee0 <ucdr_deserialize_string>
 8012a50:	4604      	mov	r4, r0
 8012a52:	e7b6      	b.n	80129c2 <uxr_deserialize_ObjectVariant+0x8a>
 8012a54:	68b1      	ldr	r1, [r6, #8]
 8012a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f005 fa40 	bl	8017ee0 <ucdr_deserialize_string>
 8012a60:	4604      	mov	r4, r0
 8012a62:	e7c4      	b.n	80129ee <uxr_deserialize_ObjectVariant+0xb6>
 8012a64:	f106 0308 	add.w	r3, r6, #8
 8012a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a6c:	f106 010c 	add.w	r1, r6, #12
 8012a70:	4628      	mov	r0, r5
 8012a72:	f7fd fc4b 	bl	801030c <ucdr_deserialize_sequence_uint8_t>
 8012a76:	4604      	mov	r4, r0
 8012a78:	e7b9      	b.n	80129ee <uxr_deserialize_ObjectVariant+0xb6>
 8012a7a:	bf00      	nop

08012a7c <uxr_deserialize_BaseObjectRequest>:
 8012a7c:	b570      	push	{r4, r5, r6, lr}
 8012a7e:	2202      	movs	r2, #2
 8012a80:	4605      	mov	r5, r0
 8012a82:	460e      	mov	r6, r1
 8012a84:	f7fb fcf0 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012a88:	2202      	movs	r2, #2
 8012a8a:	4604      	mov	r4, r0
 8012a8c:	18b1      	adds	r1, r6, r2
 8012a8e:	4628      	mov	r0, r5
 8012a90:	f7fb fcea 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012a94:	4020      	ands	r0, r4
 8012a96:	b2c0      	uxtb	r0, r0
 8012a98:	bd70      	pop	{r4, r5, r6, pc}
 8012a9a:	bf00      	nop

08012a9c <uxr_serialize_ActivityInfoVariant>:
 8012a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012aa0:	460d      	mov	r5, r1
 8012aa2:	7809      	ldrb	r1, [r1, #0]
 8012aa4:	4607      	mov	r7, r0
 8012aa6:	f7fb ff71 	bl	800e98c <ucdr_serialize_uint8_t>
 8012aaa:	4681      	mov	r9, r0
 8012aac:	b138      	cbz	r0, 8012abe <uxr_serialize_ActivityInfoVariant+0x22>
 8012aae:	782b      	ldrb	r3, [r5, #0]
 8012ab0:	2b06      	cmp	r3, #6
 8012ab2:	f000 8082 	beq.w	8012bba <uxr_serialize_ActivityInfoVariant+0x11e>
 8012ab6:	2b0d      	cmp	r3, #13
 8012ab8:	d016      	beq.n	8012ae8 <uxr_serialize_ActivityInfoVariant+0x4c>
 8012aba:	2b05      	cmp	r3, #5
 8012abc:	d002      	beq.n	8012ac4 <uxr_serialize_ActivityInfoVariant+0x28>
 8012abe:	4648      	mov	r0, r9
 8012ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012ac8:	4638      	mov	r0, r7
 8012aca:	f7fc fc9b 	bl	800f404 <ucdr_serialize_int16_t>
 8012ace:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012ad2:	4681      	mov	r9, r0
 8012ad4:	4638      	mov	r0, r7
 8012ad6:	f7fc fbc5 	bl	800f264 <ucdr_serialize_uint64_t>
 8012ada:	ea09 0000 	and.w	r0, r9, r0
 8012ade:	fa5f f980 	uxtb.w	r9, r0
 8012ae2:	4648      	mov	r0, r9
 8012ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ae8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012aec:	4638      	mov	r0, r7
 8012aee:	f7fc fc89 	bl	800f404 <ucdr_serialize_int16_t>
 8012af2:	68e9      	ldr	r1, [r5, #12]
 8012af4:	4681      	mov	r9, r0
 8012af6:	4638      	mov	r0, r7
 8012af8:	f7fc f95e 	bl	800edb8 <ucdr_serialize_uint32_t>
 8012afc:	68eb      	ldr	r3, [r5, #12]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d0eb      	beq.n	8012ada <uxr_serialize_ActivityInfoVariant+0x3e>
 8012b02:	b320      	cbz	r0, 8012b4e <uxr_serialize_ActivityInfoVariant+0xb2>
 8012b04:	f105 080c 	add.w	r8, r5, #12
 8012b08:	2600      	movs	r6, #0
 8012b0a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012b0e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012b12:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012b16:	4638      	mov	r0, r7
 8012b18:	f7fb ff38 	bl	800e98c <ucdr_serialize_uint8_t>
 8012b1c:	2800      	cmp	r0, #0
 8012b1e:	d053      	beq.n	8012bc8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8012b20:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012b24:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012b28:	0074      	lsls	r4, r6, #1
 8012b2a:	00c9      	lsls	r1, r1, #3
 8012b2c:	2b03      	cmp	r3, #3
 8012b2e:	d854      	bhi.n	8012bda <uxr_serialize_ActivityInfoVariant+0x13e>
 8012b30:	e8df f003 	tbb	[pc, r3]
 8012b34:	02102132 	.word	0x02102132
 8012b38:	4441      	add	r1, r8
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	6889      	ldr	r1, [r1, #8]
 8012b3e:	f005 f9bf 	bl	8017ec0 <ucdr_serialize_string>
 8012b42:	68ea      	ldr	r2, [r5, #12]
 8012b44:	3601      	adds	r6, #1
 8012b46:	4296      	cmp	r6, r2
 8012b48:	d242      	bcs.n	8012bd0 <uxr_serialize_ActivityInfoVariant+0x134>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	d1dd      	bne.n	8012b0a <uxr_serialize_ActivityInfoVariant+0x6e>
 8012b4e:	f04f 0900 	mov.w	r9, #0
 8012b52:	e7b4      	b.n	8012abe <uxr_serialize_ActivityInfoVariant+0x22>
 8012b54:	3108      	adds	r1, #8
 8012b56:	4441      	add	r1, r8
 8012b58:	2210      	movs	r2, #16
 8012b5a:	4638      	mov	r0, r7
 8012b5c:	f7fb fc20 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012b60:	4434      	add	r4, r6
 8012b62:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012b66:	4604      	mov	r4, r0
 8012b68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012b6a:	4638      	mov	r0, r7
 8012b6c:	f7fc f924 	bl	800edb8 <ucdr_serialize_uint32_t>
 8012b70:	4020      	ands	r0, r4
 8012b72:	b2c0      	uxtb	r0, r0
 8012b74:	e7e5      	b.n	8012b42 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012b76:	3108      	adds	r1, #8
 8012b78:	4441      	add	r1, r8
 8012b7a:	2204      	movs	r2, #4
 8012b7c:	4638      	mov	r0, r7
 8012b7e:	f7fb fc0f 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012b82:	4434      	add	r4, r6
 8012b84:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012b88:	4604      	mov	r4, r0
 8012b8a:	8b19      	ldrh	r1, [r3, #24]
 8012b8c:	4638      	mov	r0, r7
 8012b8e:	f7fb ff29 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012b92:	4020      	ands	r0, r4
 8012b94:	b2c0      	uxtb	r0, r0
 8012b96:	e7d4      	b.n	8012b42 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012b98:	3108      	adds	r1, #8
 8012b9a:	4441      	add	r1, r8
 8012b9c:	2202      	movs	r2, #2
 8012b9e:	4638      	mov	r0, r7
 8012ba0:	f7fb fbfe 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012ba4:	4434      	add	r4, r6
 8012ba6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012baa:	4604      	mov	r4, r0
 8012bac:	7d99      	ldrb	r1, [r3, #22]
 8012bae:	4638      	mov	r0, r7
 8012bb0:	f7fb feec 	bl	800e98c <ucdr_serialize_uint8_t>
 8012bb4:	4020      	ands	r0, r4
 8012bb6:	b2c0      	uxtb	r0, r0
 8012bb8:	e7c3      	b.n	8012b42 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012bba:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bc4:	f7fc bc1e 	b.w	800f404 <ucdr_serialize_int16_t>
 8012bc8:	68ea      	ldr	r2, [r5, #12]
 8012bca:	3601      	adds	r6, #1
 8012bcc:	42b2      	cmp	r2, r6
 8012bce:	d8be      	bhi.n	8012b4e <uxr_serialize_ActivityInfoVariant+0xb2>
 8012bd0:	ea09 0900 	and.w	r9, r9, r0
 8012bd4:	fa5f f989 	uxtb.w	r9, r9
 8012bd8:	e771      	b.n	8012abe <uxr_serialize_ActivityInfoVariant+0x22>
 8012bda:	68eb      	ldr	r3, [r5, #12]
 8012bdc:	3601      	adds	r6, #1
 8012bde:	429e      	cmp	r6, r3
 8012be0:	f10a 0a18 	add.w	sl, sl, #24
 8012be4:	d395      	bcc.n	8012b12 <uxr_serialize_ActivityInfoVariant+0x76>
 8012be6:	e76a      	b.n	8012abe <uxr_serialize_ActivityInfoVariant+0x22>

08012be8 <uxr_deserialize_BaseObjectReply>:
 8012be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bec:	2202      	movs	r2, #2
 8012bee:	4606      	mov	r6, r0
 8012bf0:	460f      	mov	r7, r1
 8012bf2:	f7fb fc39 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012bf6:	2202      	movs	r2, #2
 8012bf8:	18b9      	adds	r1, r7, r2
 8012bfa:	4605      	mov	r5, r0
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f7fb fc33 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012c02:	1d39      	adds	r1, r7, #4
 8012c04:	4680      	mov	r8, r0
 8012c06:	4630      	mov	r0, r6
 8012c08:	f7fb fed6 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012c0c:	1d79      	adds	r1, r7, #5
 8012c0e:	4604      	mov	r4, r0
 8012c10:	4630      	mov	r0, r6
 8012c12:	f7fb fed1 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012c16:	ea05 0508 	and.w	r5, r5, r8
 8012c1a:	402c      	ands	r4, r5
 8012c1c:	4020      	ands	r0, r4
 8012c1e:	b2c0      	uxtb	r0, r0
 8012c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c24 <uxr_serialize_ReadSpecification>:
 8012c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c28:	460e      	mov	r6, r1
 8012c2a:	7809      	ldrb	r1, [r1, #0]
 8012c2c:	4607      	mov	r7, r0
 8012c2e:	f7fb fead 	bl	800e98c <ucdr_serialize_uint8_t>
 8012c32:	7871      	ldrb	r1, [r6, #1]
 8012c34:	4604      	mov	r4, r0
 8012c36:	4638      	mov	r0, r7
 8012c38:	f7fb fea8 	bl	800e98c <ucdr_serialize_uint8_t>
 8012c3c:	78b1      	ldrb	r1, [r6, #2]
 8012c3e:	4004      	ands	r4, r0
 8012c40:	4638      	mov	r0, r7
 8012c42:	f7fb fe75 	bl	800e930 <ucdr_serialize_bool>
 8012c46:	78b3      	ldrb	r3, [r6, #2]
 8012c48:	b2e4      	uxtb	r4, r4
 8012c4a:	4004      	ands	r4, r0
 8012c4c:	b94b      	cbnz	r3, 8012c62 <uxr_serialize_ReadSpecification+0x3e>
 8012c4e:	7a31      	ldrb	r1, [r6, #8]
 8012c50:	4638      	mov	r0, r7
 8012c52:	f7fb fe6d 	bl	800e930 <ucdr_serialize_bool>
 8012c56:	7a33      	ldrb	r3, [r6, #8]
 8012c58:	4004      	ands	r4, r0
 8012c5a:	b943      	cbnz	r3, 8012c6e <uxr_serialize_ReadSpecification+0x4a>
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c62:	6871      	ldr	r1, [r6, #4]
 8012c64:	4638      	mov	r0, r7
 8012c66:	f005 f92b 	bl	8017ec0 <ucdr_serialize_string>
 8012c6a:	4004      	ands	r4, r0
 8012c6c:	e7ef      	b.n	8012c4e <uxr_serialize_ReadSpecification+0x2a>
 8012c6e:	8971      	ldrh	r1, [r6, #10]
 8012c70:	4638      	mov	r0, r7
 8012c72:	f7fb feb7 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012c76:	89b1      	ldrh	r1, [r6, #12]
 8012c78:	4605      	mov	r5, r0
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	f7fb feb2 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012c80:	89f1      	ldrh	r1, [r6, #14]
 8012c82:	4005      	ands	r5, r0
 8012c84:	4638      	mov	r0, r7
 8012c86:	f7fb fead 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012c8a:	8a31      	ldrh	r1, [r6, #16]
 8012c8c:	4680      	mov	r8, r0
 8012c8e:	4638      	mov	r0, r7
 8012c90:	f7fb fea8 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012c94:	b2ed      	uxtb	r5, r5
 8012c96:	4025      	ands	r5, r4
 8012c98:	ea08 0505 	and.w	r5, r8, r5
 8012c9c:	ea00 0405 	and.w	r4, r0, r5
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ca6:	bf00      	nop

08012ca8 <uxr_serialize_CREATE_CLIENT_Payload>:
 8012ca8:	f7ff b9e2 	b.w	8012070 <uxr_serialize_CLIENT_Representation>

08012cac <uxr_serialize_CREATE_Payload>:
 8012cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cae:	2202      	movs	r2, #2
 8012cb0:	4607      	mov	r7, r0
 8012cb2:	460e      	mov	r6, r1
 8012cb4:	f7fb fb74 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012cb8:	2202      	movs	r2, #2
 8012cba:	18b1      	adds	r1, r6, r2
 8012cbc:	4605      	mov	r5, r0
 8012cbe:	4638      	mov	r0, r7
 8012cc0:	f7fb fb6e 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012cc4:	7931      	ldrb	r1, [r6, #4]
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	4638      	mov	r0, r7
 8012cca:	f7fb fe5f 	bl	800e98c <ucdr_serialize_uint8_t>
 8012cce:	b170      	cbz	r0, 8012cee <uxr_serialize_CREATE_Payload+0x42>
 8012cd0:	7933      	ldrb	r3, [r6, #4]
 8012cd2:	402c      	ands	r4, r5
 8012cd4:	3b01      	subs	r3, #1
 8012cd6:	b2e4      	uxtb	r4, r4
 8012cd8:	2b0d      	cmp	r3, #13
 8012cda:	d809      	bhi.n	8012cf0 <uxr_serialize_CREATE_Payload+0x44>
 8012cdc:	e8df f003 	tbb	[pc, r3]
 8012ce0:	23230a4c 	.word	0x23230a4c
 8012ce4:	0a0a0a0a 	.word	0x0a0a0a0a
 8012ce8:	12121208 	.word	0x12121208
 8012cec:	3e45      	.short	0x3e45
 8012cee:	2400      	movs	r4, #0
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf4:	f106 0108 	add.w	r1, r6, #8
 8012cf8:	4638      	mov	r0, r7
 8012cfa:	f7ff fabf 	bl	801227c <uxr_serialize_DATAWRITER_Representation>
 8012cfe:	4004      	ands	r4, r0
 8012d00:	4620      	mov	r0, r4
 8012d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d04:	7a31      	ldrb	r1, [r6, #8]
 8012d06:	4638      	mov	r0, r7
 8012d08:	f7fb fe40 	bl	800e98c <ucdr_serialize_uint8_t>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	d0ee      	beq.n	8012cee <uxr_serialize_CREATE_Payload+0x42>
 8012d10:	7a33      	ldrb	r3, [r6, #8]
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d001      	beq.n	8012d1a <uxr_serialize_CREATE_Payload+0x6e>
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	d1ea      	bne.n	8012cf0 <uxr_serialize_CREATE_Payload+0x44>
 8012d1a:	68f1      	ldr	r1, [r6, #12]
 8012d1c:	4638      	mov	r0, r7
 8012d1e:	f005 f8cf 	bl	8017ec0 <ucdr_serialize_string>
 8012d22:	4004      	ands	r4, r0
 8012d24:	e7e4      	b.n	8012cf0 <uxr_serialize_CREATE_Payload+0x44>
 8012d26:	7a31      	ldrb	r1, [r6, #8]
 8012d28:	4638      	mov	r0, r7
 8012d2a:	f7fb fe2f 	bl	800e98c <ucdr_serialize_uint8_t>
 8012d2e:	4605      	mov	r5, r0
 8012d30:	b158      	cbz	r0, 8012d4a <uxr_serialize_CREATE_Payload+0x9e>
 8012d32:	7a33      	ldrb	r3, [r6, #8]
 8012d34:	2b02      	cmp	r3, #2
 8012d36:	d034      	beq.n	8012da2 <uxr_serialize_CREATE_Payload+0xf6>
 8012d38:	2b03      	cmp	r3, #3
 8012d3a:	d106      	bne.n	8012d4a <uxr_serialize_CREATE_Payload+0x9e>
 8012d3c:	68f2      	ldr	r2, [r6, #12]
 8012d3e:	f106 0110 	add.w	r1, r6, #16
 8012d42:	4638      	mov	r0, r7
 8012d44:	f7fd fad0 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 8012d48:	4605      	mov	r5, r0
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012d50:	4638      	mov	r0, r7
 8012d52:	f7fb fb25 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012d56:	4028      	ands	r0, r5
 8012d58:	4004      	ands	r4, r0
 8012d5a:	e7c9      	b.n	8012cf0 <uxr_serialize_CREATE_Payload+0x44>
 8012d5c:	f106 0108 	add.w	r1, r6, #8
 8012d60:	4638      	mov	r0, r7
 8012d62:	f7ff f985 	bl	8012070 <uxr_serialize_CLIENT_Representation>
 8012d66:	4004      	ands	r4, r0
 8012d68:	e7c2      	b.n	8012cf0 <uxr_serialize_CREATE_Payload+0x44>
 8012d6a:	f106 0108 	add.w	r1, r6, #8
 8012d6e:	4638      	mov	r0, r7
 8012d70:	f7ff fa3a 	bl	80121e8 <uxr_serialize_AGENT_Representation>
 8012d74:	4004      	ands	r4, r0
 8012d76:	e7bb      	b.n	8012cf0 <uxr_serialize_CREATE_Payload+0x44>
 8012d78:	7a31      	ldrb	r1, [r6, #8]
 8012d7a:	4638      	mov	r0, r7
 8012d7c:	f7fb fe06 	bl	800e98c <ucdr_serialize_uint8_t>
 8012d80:	4605      	mov	r5, r0
 8012d82:	b130      	cbz	r0, 8012d92 <uxr_serialize_CREATE_Payload+0xe6>
 8012d84:	7a33      	ldrb	r3, [r6, #8]
 8012d86:	2b02      	cmp	r3, #2
 8012d88:	d011      	beq.n	8012dae <uxr_serialize_CREATE_Payload+0x102>
 8012d8a:	2b03      	cmp	r3, #3
 8012d8c:	d015      	beq.n	8012dba <uxr_serialize_CREATE_Payload+0x10e>
 8012d8e:	2b01      	cmp	r3, #1
 8012d90:	d00d      	beq.n	8012dae <uxr_serialize_CREATE_Payload+0x102>
 8012d92:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012d96:	4638      	mov	r0, r7
 8012d98:	f7fc fb34 	bl	800f404 <ucdr_serialize_int16_t>
 8012d9c:	4028      	ands	r0, r5
 8012d9e:	4004      	ands	r4, r0
 8012da0:	e7a6      	b.n	8012cf0 <uxr_serialize_CREATE_Payload+0x44>
 8012da2:	68f1      	ldr	r1, [r6, #12]
 8012da4:	4638      	mov	r0, r7
 8012da6:	f005 f88b 	bl	8017ec0 <ucdr_serialize_string>
 8012daa:	4605      	mov	r5, r0
 8012dac:	e7cd      	b.n	8012d4a <uxr_serialize_CREATE_Payload+0x9e>
 8012dae:	68f1      	ldr	r1, [r6, #12]
 8012db0:	4638      	mov	r0, r7
 8012db2:	f005 f885 	bl	8017ec0 <ucdr_serialize_string>
 8012db6:	4605      	mov	r5, r0
 8012db8:	e7eb      	b.n	8012d92 <uxr_serialize_CREATE_Payload+0xe6>
 8012dba:	68f2      	ldr	r2, [r6, #12]
 8012dbc:	f106 0110 	add.w	r1, r6, #16
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	f7fd fa91 	bl	80102e8 <ucdr_serialize_sequence_uint8_t>
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	e7e3      	b.n	8012d92 <uxr_serialize_CREATE_Payload+0xe6>
 8012dca:	bf00      	nop

08012dcc <uxr_deserialize_GET_INFO_Payload>:
 8012dcc:	b570      	push	{r4, r5, r6, lr}
 8012dce:	2202      	movs	r2, #2
 8012dd0:	4605      	mov	r5, r0
 8012dd2:	460e      	mov	r6, r1
 8012dd4:	f7fb fb48 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012dd8:	2202      	movs	r2, #2
 8012dda:	18b1      	adds	r1, r6, r2
 8012ddc:	4604      	mov	r4, r0
 8012dde:	4628      	mov	r0, r5
 8012de0:	f7fb fb42 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012de4:	1d31      	adds	r1, r6, #4
 8012de6:	4004      	ands	r4, r0
 8012de8:	4628      	mov	r0, r5
 8012dea:	f7fc f915 	bl	800f018 <ucdr_deserialize_uint32_t>
 8012dee:	b2e4      	uxtb	r4, r4
 8012df0:	4020      	ands	r0, r4
 8012df2:	bd70      	pop	{r4, r5, r6, pc}

08012df4 <uxr_serialize_DELETE_Payload>:
 8012df4:	b570      	push	{r4, r5, r6, lr}
 8012df6:	2202      	movs	r2, #2
 8012df8:	4605      	mov	r5, r0
 8012dfa:	460e      	mov	r6, r1
 8012dfc:	f7fb fad0 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012e00:	2202      	movs	r2, #2
 8012e02:	4604      	mov	r4, r0
 8012e04:	18b1      	adds	r1, r6, r2
 8012e06:	4628      	mov	r0, r5
 8012e08:	f7fb faca 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012e0c:	4020      	ands	r0, r4
 8012e0e:	b2c0      	uxtb	r0, r0
 8012e10:	bd70      	pop	{r4, r5, r6, pc}
 8012e12:	bf00      	nop

08012e14 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e18:	4605      	mov	r5, r0
 8012e1a:	460e      	mov	r6, r1
 8012e1c:	f7fb fdcc 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012e20:	1c71      	adds	r1, r6, #1
 8012e22:	4604      	mov	r4, r0
 8012e24:	4628      	mov	r0, r5
 8012e26:	f7fb fdc7 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012e2a:	2204      	movs	r2, #4
 8012e2c:	18b1      	adds	r1, r6, r2
 8012e2e:	4680      	mov	r8, r0
 8012e30:	4628      	mov	r0, r5
 8012e32:	f7fb fb19 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012e36:	f106 0108 	add.w	r1, r6, #8
 8012e3a:	4607      	mov	r7, r0
 8012e3c:	2202      	movs	r2, #2
 8012e3e:	4628      	mov	r0, r5
 8012e40:	f7fb fb12 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012e44:	ea04 0308 	and.w	r3, r4, r8
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	ea03 0407 	and.w	r4, r3, r7
 8012e4e:	2202      	movs	r2, #2
 8012e50:	4607      	mov	r7, r0
 8012e52:	f106 010a 	add.w	r1, r6, #10
 8012e56:	4628      	mov	r0, r5
 8012e58:	f7fb fb06 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012e5c:	f106 010c 	add.w	r1, r6, #12
 8012e60:	4603      	mov	r3, r0
 8012e62:	4628      	mov	r0, r5
 8012e64:	461d      	mov	r5, r3
 8012e66:	f7fb fd79 	bl	800e95c <ucdr_deserialize_bool>
 8012e6a:	403c      	ands	r4, r7
 8012e6c:	4025      	ands	r5, r4
 8012e6e:	4028      	ands	r0, r5
 8012e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e74 <uxr_deserialize_STATUS_Payload>:
 8012e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e78:	2202      	movs	r2, #2
 8012e7a:	4606      	mov	r6, r0
 8012e7c:	460f      	mov	r7, r1
 8012e7e:	f7fb faf3 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012e82:	2202      	movs	r2, #2
 8012e84:	18b9      	adds	r1, r7, r2
 8012e86:	4605      	mov	r5, r0
 8012e88:	4630      	mov	r0, r6
 8012e8a:	f7fb faed 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012e8e:	1d39      	adds	r1, r7, #4
 8012e90:	4680      	mov	r8, r0
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7fb fd90 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012e98:	1d79      	adds	r1, r7, #5
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	4630      	mov	r0, r6
 8012e9e:	f7fb fd8b 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012ea2:	ea05 0508 	and.w	r5, r5, r8
 8012ea6:	402c      	ands	r4, r5
 8012ea8:	4020      	ands	r0, r4
 8012eaa:	b2c0      	uxtb	r0, r0
 8012eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012eb0 <uxr_serialize_INFO_Payload>:
 8012eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	2202      	movs	r2, #2
 8012eb6:	460c      	mov	r4, r1
 8012eb8:	4605      	mov	r5, r0
 8012eba:	f7fb fa71 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012ebe:	2202      	movs	r2, #2
 8012ec0:	18a1      	adds	r1, r4, r2
 8012ec2:	4680      	mov	r8, r0
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	f7fb fa6b 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012eca:	7921      	ldrb	r1, [r4, #4]
 8012ecc:	4607      	mov	r7, r0
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f7fb fd5c 	bl	800e98c <ucdr_serialize_uint8_t>
 8012ed4:	7961      	ldrb	r1, [r4, #5]
 8012ed6:	4606      	mov	r6, r0
 8012ed8:	4628      	mov	r0, r5
 8012eda:	f7fb fd57 	bl	800e98c <ucdr_serialize_uint8_t>
 8012ede:	ea08 0807 	and.w	r8, r8, r7
 8012ee2:	ea06 0608 	and.w	r6, r6, r8
 8012ee6:	4006      	ands	r6, r0
 8012ee8:	7a21      	ldrb	r1, [r4, #8]
 8012eea:	4628      	mov	r0, r5
 8012eec:	f7fb fd20 	bl	800e930 <ucdr_serialize_bool>
 8012ef0:	7a23      	ldrb	r3, [r4, #8]
 8012ef2:	b2f7      	uxtb	r7, r6
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	b96b      	cbnz	r3, 8012f14 <uxr_serialize_INFO_Payload+0x64>
 8012ef8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012efc:	4628      	mov	r0, r5
 8012efe:	f7fb fd17 	bl	800e930 <ucdr_serialize_bool>
 8012f02:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012f06:	4030      	ands	r0, r6
 8012f08:	b2c6      	uxtb	r6, r0
 8012f0a:	b983      	cbnz	r3, 8012f2e <uxr_serialize_INFO_Payload+0x7e>
 8012f0c:	ea06 0007 	and.w	r0, r6, r7
 8012f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f14:	7b21      	ldrb	r1, [r4, #12]
 8012f16:	4628      	mov	r0, r5
 8012f18:	f7fb fd38 	bl	800e98c <ucdr_serialize_uint8_t>
 8012f1c:	b188      	cbz	r0, 8012f42 <uxr_serialize_INFO_Payload+0x92>
 8012f1e:	f104 010c 	add.w	r1, r4, #12
 8012f22:	4628      	mov	r0, r5
 8012f24:	f7ff f9d2 	bl	80122cc <uxr_serialize_ObjectVariant.part.0>
 8012f28:	4030      	ands	r0, r6
 8012f2a:	b2c6      	uxtb	r6, r0
 8012f2c:	e7e4      	b.n	8012ef8 <uxr_serialize_INFO_Payload+0x48>
 8012f2e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8012f32:	4628      	mov	r0, r5
 8012f34:	f7ff fdb2 	bl	8012a9c <uxr_serialize_ActivityInfoVariant>
 8012f38:	4006      	ands	r6, r0
 8012f3a:	ea06 0007 	and.w	r0, r6, r7
 8012f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f42:	4606      	mov	r6, r0
 8012f44:	e7d8      	b.n	8012ef8 <uxr_serialize_INFO_Payload+0x48>
 8012f46:	bf00      	nop

08012f48 <uxr_serialize_READ_DATA_Payload>:
 8012f48:	b570      	push	{r4, r5, r6, lr}
 8012f4a:	2202      	movs	r2, #2
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	460e      	mov	r6, r1
 8012f50:	f7fb fa26 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012f54:	2202      	movs	r2, #2
 8012f56:	18b1      	adds	r1, r6, r2
 8012f58:	4604      	mov	r4, r0
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	f7fb fa20 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012f60:	1d31      	adds	r1, r6, #4
 8012f62:	4004      	ands	r4, r0
 8012f64:	4628      	mov	r0, r5
 8012f66:	f7ff fe5d 	bl	8012c24 <uxr_serialize_ReadSpecification>
 8012f6a:	b2e4      	uxtb	r4, r4
 8012f6c:	4020      	ands	r0, r4
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}

08012f70 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	2202      	movs	r2, #2
 8012f74:	4605      	mov	r5, r0
 8012f76:	460e      	mov	r6, r1
 8012f78:	f7fb fa12 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012f7c:	2202      	movs	r2, #2
 8012f7e:	4604      	mov	r4, r0
 8012f80:	18b1      	adds	r1, r6, r2
 8012f82:	4628      	mov	r0, r5
 8012f84:	f7fb fa0c 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012f88:	4020      	ands	r0, r4
 8012f8a:	b2c0      	uxtb	r0, r0
 8012f8c:	bd70      	pop	{r4, r5, r6, pc}
 8012f8e:	bf00      	nop

08012f90 <uxr_serialize_ACKNACK_Payload>:
 8012f90:	b570      	push	{r4, r5, r6, lr}
 8012f92:	460c      	mov	r4, r1
 8012f94:	460e      	mov	r6, r1
 8012f96:	f834 1b02 	ldrh.w	r1, [r4], #2
 8012f9a:	4605      	mov	r5, r0
 8012f9c:	f7fb fd22 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012fa0:	2202      	movs	r2, #2
 8012fa2:	4621      	mov	r1, r4
 8012fa4:	4604      	mov	r4, r0
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f7fb f9fa 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8012fac:	7931      	ldrb	r1, [r6, #4]
 8012fae:	4004      	ands	r4, r0
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	f7fb fceb 	bl	800e98c <ucdr_serialize_uint8_t>
 8012fb6:	b2e4      	uxtb	r4, r4
 8012fb8:	4020      	ands	r0, r4
 8012fba:	bd70      	pop	{r4, r5, r6, pc}

08012fbc <uxr_deserialize_ACKNACK_Payload>:
 8012fbc:	b570      	push	{r4, r5, r6, lr}
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	460e      	mov	r6, r1
 8012fc2:	f7fb fe0f 	bl	800ebe4 <ucdr_deserialize_uint16_t>
 8012fc6:	2202      	movs	r2, #2
 8012fc8:	18b1      	adds	r1, r6, r2
 8012fca:	4604      	mov	r4, r0
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f7fb fa4b 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8012fd2:	1d31      	adds	r1, r6, #4
 8012fd4:	4004      	ands	r4, r0
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	f7fb fcee 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 8012fdc:	b2e4      	uxtb	r4, r4
 8012fde:	4020      	ands	r0, r4
 8012fe0:	bd70      	pop	{r4, r5, r6, pc}
 8012fe2:	bf00      	nop

08012fe4 <uxr_serialize_HEARTBEAT_Payload>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	460d      	mov	r5, r1
 8012fe8:	8809      	ldrh	r1, [r1, #0]
 8012fea:	4606      	mov	r6, r0
 8012fec:	f7fb fcfa 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012ff0:	8869      	ldrh	r1, [r5, #2]
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	f7fb fcf5 	bl	800e9e4 <ucdr_serialize_uint16_t>
 8012ffa:	7929      	ldrb	r1, [r5, #4]
 8012ffc:	4004      	ands	r4, r0
 8012ffe:	4630      	mov	r0, r6
 8013000:	f7fb fcc4 	bl	800e98c <ucdr_serialize_uint8_t>
 8013004:	b2e4      	uxtb	r4, r4
 8013006:	4020      	ands	r0, r4
 8013008:	bd70      	pop	{r4, r5, r6, pc}
 801300a:	bf00      	nop

0801300c <uxr_deserialize_HEARTBEAT_Payload>:
 801300c:	b570      	push	{r4, r5, r6, lr}
 801300e:	4605      	mov	r5, r0
 8013010:	460e      	mov	r6, r1
 8013012:	f7fb fde7 	bl	800ebe4 <ucdr_deserialize_uint16_t>
 8013016:	1cb1      	adds	r1, r6, #2
 8013018:	4604      	mov	r4, r0
 801301a:	4628      	mov	r0, r5
 801301c:	f7fb fde2 	bl	800ebe4 <ucdr_deserialize_uint16_t>
 8013020:	1d31      	adds	r1, r6, #4
 8013022:	4004      	ands	r4, r0
 8013024:	4628      	mov	r0, r5
 8013026:	f7fb fcc7 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 801302a:	b2e4      	uxtb	r4, r4
 801302c:	4020      	ands	r0, r4
 801302e:	bd70      	pop	{r4, r5, r6, pc}

08013030 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013034:	4605      	mov	r5, r0
 8013036:	460e      	mov	r6, r1
 8013038:	f7fc fb70 	bl	800f71c <ucdr_deserialize_int32_t>
 801303c:	1d31      	adds	r1, r6, #4
 801303e:	4607      	mov	r7, r0
 8013040:	4628      	mov	r0, r5
 8013042:	f7fb ffe9 	bl	800f018 <ucdr_deserialize_uint32_t>
 8013046:	f106 0108 	add.w	r1, r6, #8
 801304a:	4680      	mov	r8, r0
 801304c:	4628      	mov	r0, r5
 801304e:	f7fc fb65 	bl	800f71c <ucdr_deserialize_int32_t>
 8013052:	f106 010c 	add.w	r1, r6, #12
 8013056:	4604      	mov	r4, r0
 8013058:	4628      	mov	r0, r5
 801305a:	f7fb ffdd 	bl	800f018 <ucdr_deserialize_uint32_t>
 801305e:	ea07 0708 	and.w	r7, r7, r8
 8013062:	403c      	ands	r4, r7
 8013064:	f106 0110 	add.w	r1, r6, #16
 8013068:	4004      	ands	r4, r0
 801306a:	4628      	mov	r0, r5
 801306c:	f7fc fb56 	bl	800f71c <ucdr_deserialize_int32_t>
 8013070:	f106 0114 	add.w	r1, r6, #20
 8013074:	4607      	mov	r7, r0
 8013076:	4628      	mov	r0, r5
 8013078:	f7fb ffce 	bl	800f018 <ucdr_deserialize_uint32_t>
 801307c:	b2e4      	uxtb	r4, r4
 801307e:	403c      	ands	r4, r7
 8013080:	4020      	ands	r0, r4
 8013082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013086:	bf00      	nop

08013088 <uxr_serialize_SampleIdentity>:
 8013088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308c:	220c      	movs	r2, #12
 801308e:	4604      	mov	r4, r0
 8013090:	460d      	mov	r5, r1
 8013092:	f7fb f985 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 8013096:	2203      	movs	r2, #3
 8013098:	f105 010c 	add.w	r1, r5, #12
 801309c:	4607      	mov	r7, r0
 801309e:	4620      	mov	r0, r4
 80130a0:	f7fb f97e 	bl	800e3a0 <ucdr_serialize_array_uint8_t>
 80130a4:	7be9      	ldrb	r1, [r5, #15]
 80130a6:	4680      	mov	r8, r0
 80130a8:	4620      	mov	r0, r4
 80130aa:	f7fb fc6f 	bl	800e98c <ucdr_serialize_uint8_t>
 80130ae:	6929      	ldr	r1, [r5, #16]
 80130b0:	4606      	mov	r6, r0
 80130b2:	4620      	mov	r0, r4
 80130b4:	f7fc fa9a 	bl	800f5ec <ucdr_serialize_int32_t>
 80130b8:	6969      	ldr	r1, [r5, #20]
 80130ba:	4603      	mov	r3, r0
 80130bc:	4620      	mov	r0, r4
 80130be:	ea07 0708 	and.w	r7, r7, r8
 80130c2:	461c      	mov	r4, r3
 80130c4:	f7fb fe78 	bl	800edb8 <ucdr_serialize_uint32_t>
 80130c8:	403e      	ands	r6, r7
 80130ca:	4034      	ands	r4, r6
 80130cc:	4020      	ands	r0, r4
 80130ce:	b2c0      	uxtb	r0, r0
 80130d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130d4 <uxr_deserialize_SampleIdentity>:
 80130d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d8:	220c      	movs	r2, #12
 80130da:	4604      	mov	r4, r0
 80130dc:	460d      	mov	r5, r1
 80130de:	f7fb f9c3 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 80130e2:	2203      	movs	r2, #3
 80130e4:	f105 010c 	add.w	r1, r5, #12
 80130e8:	4607      	mov	r7, r0
 80130ea:	4620      	mov	r0, r4
 80130ec:	f7fb f9bc 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 80130f0:	f105 010f 	add.w	r1, r5, #15
 80130f4:	4680      	mov	r8, r0
 80130f6:	4620      	mov	r0, r4
 80130f8:	f7fb fc5e 	bl	800e9b8 <ucdr_deserialize_uint8_t>
 80130fc:	f105 0110 	add.w	r1, r5, #16
 8013100:	4606      	mov	r6, r0
 8013102:	4620      	mov	r0, r4
 8013104:	f7fc fb0a 	bl	800f71c <ucdr_deserialize_int32_t>
 8013108:	f105 0114 	add.w	r1, r5, #20
 801310c:	4603      	mov	r3, r0
 801310e:	4620      	mov	r0, r4
 8013110:	ea07 0708 	and.w	r7, r7, r8
 8013114:	461c      	mov	r4, r3
 8013116:	f7fb ff7f 	bl	800f018 <ucdr_deserialize_uint32_t>
 801311a:	403e      	ands	r6, r7
 801311c:	4034      	ands	r4, r6
 801311e:	4020      	ands	r0, r4
 8013120:	b2c0      	uxtb	r0, r0
 8013122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013126:	bf00      	nop

08013128 <nereo_interfaces__msg__CommandVelocity__init>:
 8013128:	3800      	subs	r0, #0
 801312a:	bf18      	it	ne
 801312c:	2001      	movne	r0, #1
 801312e:	4770      	bx	lr

08013130 <nereo_interfaces__msg__CommandVelocity__fini>:
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop

08013134 <nereo_interfaces__srv__SetNavigationMode_Request__init>:
 8013134:	3800      	subs	r0, #0
 8013136:	bf18      	it	ne
 8013138:	2001      	movne	r0, #1
 801313a:	4770      	bx	lr

0801313c <nereo_interfaces__srv__SetNavigationMode_Request__fini>:
 801313c:	4770      	bx	lr
 801313e:	bf00      	nop

08013140 <nereo_interfaces__srv__SetNavigationMode_Response__init>:
 8013140:	3800      	subs	r0, #0
 8013142:	bf18      	it	ne
 8013144:	2001      	movne	r0, #1
 8013146:	4770      	bx	lr

08013148 <nereo_interfaces__srv__SetNavigationMode_Response__fini>:
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop

0801314c <nereo_interfaces__msg__ThrusterStatuses__init>:
 801314c:	3800      	subs	r0, #0
 801314e:	bf18      	it	ne
 8013150:	2001      	movne	r0, #1
 8013152:	4770      	bx	lr

08013154 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 8013154:	4770      	bx	lr
 8013156:	bf00      	nop

08013158 <rcl_client_get_rmw_handle>:
 8013158:	b118      	cbz	r0, 8013162 <rcl_client_get_rmw_handle+0xa>
 801315a:	6800      	ldr	r0, [r0, #0]
 801315c:	b108      	cbz	r0, 8013162 <rcl_client_get_rmw_handle+0xa>
 801315e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013162:	4770      	bx	lr

08013164 <rcl_send_request>:
 8013164:	b570      	push	{r4, r5, r6, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	b1e8      	cbz	r0, 80131a6 <rcl_send_request+0x42>
 801316a:	4604      	mov	r4, r0
 801316c:	6800      	ldr	r0, [r0, #0]
 801316e:	b1d0      	cbz	r0, 80131a6 <rcl_send_request+0x42>
 8013170:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013174:	b1bb      	cbz	r3, 80131a6 <rcl_send_request+0x42>
 8013176:	460e      	mov	r6, r1
 8013178:	b1d1      	cbz	r1, 80131b0 <rcl_send_request+0x4c>
 801317a:	4615      	mov	r5, r2
 801317c:	b1c2      	cbz	r2, 80131b0 <rcl_send_request+0x4c>
 801317e:	2105      	movs	r1, #5
 8013180:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013184:	f002 fe24 	bl	8015dd0 <__atomic_load_8>
 8013188:	6823      	ldr	r3, [r4, #0]
 801318a:	e9c5 0100 	strd	r0, r1, [r5]
 801318e:	462a      	mov	r2, r5
 8013190:	4631      	mov	r1, r6
 8013192:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013196:	f003 ffcf 	bl	8017138 <rmw_send_request>
 801319a:	4606      	mov	r6, r0
 801319c:	b160      	cbz	r0, 80131b8 <rcl_send_request+0x54>
 801319e:	2601      	movs	r6, #1
 80131a0:	4630      	mov	r0, r6
 80131a2:	b002      	add	sp, #8
 80131a4:	bd70      	pop	{r4, r5, r6, pc}
 80131a6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80131aa:	4630      	mov	r0, r6
 80131ac:	b002      	add	sp, #8
 80131ae:	bd70      	pop	{r4, r5, r6, pc}
 80131b0:	260b      	movs	r6, #11
 80131b2:	4630      	mov	r0, r6
 80131b4:	b002      	add	sp, #8
 80131b6:	bd70      	pop	{r4, r5, r6, pc}
 80131b8:	6820      	ldr	r0, [r4, #0]
 80131ba:	2105      	movs	r1, #5
 80131bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80131c0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80131c4:	9100      	str	r1, [sp, #0]
 80131c6:	f002 fe6f 	bl	8015ea8 <__atomic_exchange_8>
 80131ca:	4630      	mov	r0, r6
 80131cc:	b002      	add	sp, #8
 80131ce:	bd70      	pop	{r4, r5, r6, pc}

080131d0 <rcl_take_response>:
 80131d0:	b570      	push	{r4, r5, r6, lr}
 80131d2:	468e      	mov	lr, r1
 80131d4:	460c      	mov	r4, r1
 80131d6:	4616      	mov	r6, r2
 80131d8:	4605      	mov	r5, r0
 80131da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80131de:	b08c      	sub	sp, #48	@ 0x30
 80131e0:	f10d 0c18 	add.w	ip, sp, #24
 80131e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80131ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80131f0:	b35d      	cbz	r5, 801324a <rcl_take_response+0x7a>
 80131f2:	682b      	ldr	r3, [r5, #0]
 80131f4:	b34b      	cbz	r3, 801324a <rcl_take_response+0x7a>
 80131f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80131fa:	b330      	cbz	r0, 801324a <rcl_take_response+0x7a>
 80131fc:	b346      	cbz	r6, 8013250 <rcl_take_response+0x80>
 80131fe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013258 <rcl_take_response+0x88>
 8013202:	2300      	movs	r3, #0
 8013204:	f88d 3007 	strb.w	r3, [sp, #7]
 8013208:	4632      	mov	r2, r6
 801320a:	f10d 0307 	add.w	r3, sp, #7
 801320e:	a902      	add	r1, sp, #8
 8013210:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013214:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013218:	f004 f896 	bl	8017348 <rmw_take_response>
 801321c:	4605      	mov	r5, r0
 801321e:	b9c8      	cbnz	r0, 8013254 <rcl_take_response+0x84>
 8013220:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013224:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013228:	2a00      	cmp	r2, #0
 801322a:	bf08      	it	eq
 801322c:	461d      	moveq	r5, r3
 801322e:	f10d 0e18 	add.w	lr, sp, #24
 8013232:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013236:	46a4      	mov	ip, r4
 8013238:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801323c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013240:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013244:	4628      	mov	r0, r5
 8013246:	b00c      	add	sp, #48	@ 0x30
 8013248:	bd70      	pop	{r4, r5, r6, pc}
 801324a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801324e:	e7ee      	b.n	801322e <rcl_take_response+0x5e>
 8013250:	250b      	movs	r5, #11
 8013252:	e7ec      	b.n	801322e <rcl_take_response+0x5e>
 8013254:	2501      	movs	r5, #1
 8013256:	e7ea      	b.n	801322e <rcl_take_response+0x5e>
	...

08013260 <rcl_client_is_valid>:
 8013260:	b130      	cbz	r0, 8013270 <rcl_client_is_valid+0x10>
 8013262:	6800      	ldr	r0, [r0, #0]
 8013264:	b120      	cbz	r0, 8013270 <rcl_client_is_valid+0x10>
 8013266:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801326a:	3800      	subs	r0, #0
 801326c:	bf18      	it	ne
 801326e:	2001      	movne	r0, #1
 8013270:	4770      	bx	lr
 8013272:	bf00      	nop

08013274 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013274:	280b      	cmp	r0, #11
 8013276:	dc0d      	bgt.n	8013294 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013278:	2800      	cmp	r0, #0
 801327a:	db09      	blt.n	8013290 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801327c:	280b      	cmp	r0, #11
 801327e:	d807      	bhi.n	8013290 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013280:	e8df f000 	tbb	[pc, r0]
 8013284:	07060607 	.word	0x07060607
 8013288:	06060606 	.word	0x06060606
 801328c:	07070606 	.word	0x07070606
 8013290:	2001      	movs	r0, #1
 8013292:	4770      	bx	lr
 8013294:	28cb      	cmp	r0, #203	@ 0xcb
 8013296:	bf18      	it	ne
 8013298:	2001      	movne	r0, #1
 801329a:	4770      	bx	lr

0801329c <rcl_get_zero_initialized_context>:
 801329c:	4a03      	ldr	r2, [pc, #12]	@ (80132ac <rcl_get_zero_initialized_context+0x10>)
 801329e:	4603      	mov	r3, r0
 80132a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80132a8:	4618      	mov	r0, r3
 80132aa:	4770      	bx	lr
 80132ac:	0801cf98 	.word	0x0801cf98

080132b0 <rcl_context_is_valid>:
 80132b0:	b118      	cbz	r0, 80132ba <rcl_context_is_valid+0xa>
 80132b2:	6840      	ldr	r0, [r0, #4]
 80132b4:	3800      	subs	r0, #0
 80132b6:	bf18      	it	ne
 80132b8:	2001      	movne	r0, #1
 80132ba:	4770      	bx	lr

080132bc <__cleanup_context>:
 80132bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132c0:	4606      	mov	r6, r0
 80132c2:	6800      	ldr	r0, [r0, #0]
 80132c4:	2300      	movs	r3, #0
 80132c6:	6073      	str	r3, [r6, #4]
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d049      	beq.n	8013360 <__cleanup_context+0xa4>
 80132cc:	6947      	ldr	r7, [r0, #20]
 80132ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80132d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80132d6:	b137      	cbz	r7, 80132e6 <__cleanup_context+0x2a>
 80132d8:	3014      	adds	r0, #20
 80132da:	f000 f9bb 	bl	8013654 <rcl_init_options_fini>
 80132de:	4607      	mov	r7, r0
 80132e0:	2800      	cmp	r0, #0
 80132e2:	d144      	bne.n	801336e <__cleanup_context+0xb2>
 80132e4:	6830      	ldr	r0, [r6, #0]
 80132e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80132e8:	b143      	cbz	r3, 80132fc <__cleanup_context+0x40>
 80132ea:	3028      	adds	r0, #40	@ 0x28
 80132ec:	f003 fd6c 	bl	8016dc8 <rmw_context_fini>
 80132f0:	b118      	cbz	r0, 80132fa <__cleanup_context+0x3e>
 80132f2:	2f00      	cmp	r7, #0
 80132f4:	d03e      	beq.n	8013374 <__cleanup_context+0xb8>
 80132f6:	f7f9 fbaf 	bl	800ca58 <rcutils_reset_error>
 80132fa:	6830      	ldr	r0, [r6, #0]
 80132fc:	6a03      	ldr	r3, [r0, #32]
 80132fe:	b1db      	cbz	r3, 8013338 <__cleanup_context+0x7c>
 8013300:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013304:	2a01      	cmp	r2, #1
 8013306:	f17c 0100 	sbcs.w	r1, ip, #0
 801330a:	db11      	blt.n	8013330 <__cleanup_context+0x74>
 801330c:	2400      	movs	r4, #0
 801330e:	4625      	mov	r5, r4
 8013310:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013314:	4649      	mov	r1, r9
 8013316:	b1b8      	cbz	r0, 8013348 <__cleanup_context+0x8c>
 8013318:	47c0      	blx	r8
 801331a:	6833      	ldr	r3, [r6, #0]
 801331c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013320:	3401      	adds	r4, #1
 8013322:	f145 0500 	adc.w	r5, r5, #0
 8013326:	4294      	cmp	r4, r2
 8013328:	eb75 010c 	sbcs.w	r1, r5, ip
 801332c:	6a1b      	ldr	r3, [r3, #32]
 801332e:	dbef      	blt.n	8013310 <__cleanup_context+0x54>
 8013330:	4618      	mov	r0, r3
 8013332:	4649      	mov	r1, r9
 8013334:	47c0      	blx	r8
 8013336:	6830      	ldr	r0, [r6, #0]
 8013338:	4649      	mov	r1, r9
 801333a:	47c0      	blx	r8
 801333c:	2300      	movs	r3, #0
 801333e:	e9c6 3300 	strd	r3, r3, [r6]
 8013342:	4638      	mov	r0, r7
 8013344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013348:	3401      	adds	r4, #1
 801334a:	f145 0500 	adc.w	r5, r5, #0
 801334e:	4294      	cmp	r4, r2
 8013350:	eb75 010c 	sbcs.w	r1, r5, ip
 8013354:	dbdc      	blt.n	8013310 <__cleanup_context+0x54>
 8013356:	4618      	mov	r0, r3
 8013358:	4649      	mov	r1, r9
 801335a:	47c0      	blx	r8
 801335c:	6830      	ldr	r0, [r6, #0]
 801335e:	e7eb      	b.n	8013338 <__cleanup_context+0x7c>
 8013360:	4607      	mov	r7, r0
 8013362:	2300      	movs	r3, #0
 8013364:	e9c6 3300 	strd	r3, r3, [r6]
 8013368:	4638      	mov	r0, r7
 801336a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801336e:	f7f9 fb73 	bl	800ca58 <rcutils_reset_error>
 8013372:	e7b7      	b.n	80132e4 <__cleanup_context+0x28>
 8013374:	f7ff ff7e 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 8013378:	4607      	mov	r7, r0
 801337a:	e7bc      	b.n	80132f6 <__cleanup_context+0x3a>

0801337c <rcl_init>:
 801337c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013380:	1e05      	subs	r5, r0, #0
 8013382:	b09e      	sub	sp, #120	@ 0x78
 8013384:	460e      	mov	r6, r1
 8013386:	4690      	mov	r8, r2
 8013388:	461f      	mov	r7, r3
 801338a:	f340 809c 	ble.w	80134c6 <rcl_init+0x14a>
 801338e:	2900      	cmp	r1, #0
 8013390:	f000 809c 	beq.w	80134cc <rcl_init+0x150>
 8013394:	f1a1 0e04 	sub.w	lr, r1, #4
 8013398:	f04f 0c00 	mov.w	ip, #0
 801339c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80133a0:	f10c 0c01 	add.w	ip, ip, #1
 80133a4:	2c00      	cmp	r4, #0
 80133a6:	f000 8091 	beq.w	80134cc <rcl_init+0x150>
 80133aa:	4565      	cmp	r5, ip
 80133ac:	d1f6      	bne.n	801339c <rcl_init+0x20>
 80133ae:	f1b8 0f00 	cmp.w	r8, #0
 80133b2:	f000 808b 	beq.w	80134cc <rcl_init+0x150>
 80133b6:	f8d8 4000 	ldr.w	r4, [r8]
 80133ba:	2c00      	cmp	r4, #0
 80133bc:	f000 8086 	beq.w	80134cc <rcl_init+0x150>
 80133c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80133c2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80133c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80133ca:	6823      	ldr	r3, [r4, #0]
 80133cc:	f8cc 3000 	str.w	r3, [ip]
 80133d0:	a819      	add	r0, sp, #100	@ 0x64
 80133d2:	f7f9 fb1d 	bl	800ca10 <rcutils_allocator_is_valid>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d078      	beq.n	80134cc <rcl_init+0x150>
 80133da:	2f00      	cmp	r7, #0
 80133dc:	d076      	beq.n	80134cc <rcl_init+0x150>
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d178      	bne.n	80134d6 <rcl_init+0x15a>
 80133e4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80133e8:	2178      	movs	r1, #120	@ 0x78
 80133ea:	2001      	movs	r0, #1
 80133ec:	4798      	blx	r3
 80133ee:	4604      	mov	r4, r0
 80133f0:	6038      	str	r0, [r7, #0]
 80133f2:	2800      	cmp	r0, #0
 80133f4:	f000 80b6 	beq.w	8013564 <rcl_init+0x1e8>
 80133f8:	a802      	add	r0, sp, #8
 80133fa:	f003 f839 	bl	8016470 <rmw_get_zero_initialized_context>
 80133fe:	a902      	add	r1, sp, #8
 8013400:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013404:	2250      	movs	r2, #80	@ 0x50
 8013406:	ac19      	add	r4, sp, #100	@ 0x64
 8013408:	f007 fe9f 	bl	801b14a <memcpy>
 801340c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801340e:	f8d7 e000 	ldr.w	lr, [r7]
 8013412:	46f4      	mov	ip, lr
 8013414:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013418:	6823      	ldr	r3, [r4, #0]
 801341a:	f8cc 3000 	str.w	r3, [ip]
 801341e:	f10e 0114 	add.w	r1, lr, #20
 8013422:	4640      	mov	r0, r8
 8013424:	f000 f940 	bl	80136a8 <rcl_init_options_copy>
 8013428:	4604      	mov	r4, r0
 801342a:	2800      	cmp	r0, #0
 801342c:	d144      	bne.n	80134b8 <rcl_init+0x13c>
 801342e:	f8d7 9000 	ldr.w	r9, [r7]
 8013432:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013436:	f8c9 0020 	str.w	r0, [r9, #32]
 801343a:	f8c9 5018 	str.w	r5, [r9, #24]
 801343e:	f8c9 801c 	str.w	r8, [r9, #28]
 8013442:	2d00      	cmp	r5, #0
 8013444:	d04e      	beq.n	80134e4 <rcl_init+0x168>
 8013446:	2e00      	cmp	r6, #0
 8013448:	d04c      	beq.n	80134e4 <rcl_init+0x168>
 801344a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801344e:	2104      	movs	r1, #4
 8013450:	4628      	mov	r0, r5
 8013452:	4798      	blx	r3
 8013454:	f8c9 0020 	str.w	r0, [r9, #32]
 8013458:	f8d7 9000 	ldr.w	r9, [r7]
 801345c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013460:	46ca      	mov	sl, r9
 8013462:	b343      	cbz	r3, 80134b6 <rcl_init+0x13a>
 8013464:	2d01      	cmp	r5, #1
 8013466:	f178 0300 	sbcs.w	r3, r8, #0
 801346a:	db3b      	blt.n	80134e4 <rcl_init+0x168>
 801346c:	2400      	movs	r4, #0
 801346e:	3e04      	subs	r6, #4
 8013470:	46a1      	mov	r9, r4
 8013472:	e00b      	b.n	801348c <rcl_init+0x110>
 8013474:	6831      	ldr	r1, [r6, #0]
 8013476:	f007 fe68 	bl	801b14a <memcpy>
 801347a:	3401      	adds	r4, #1
 801347c:	f149 0900 	adc.w	r9, r9, #0
 8013480:	45c8      	cmp	r8, r9
 8013482:	bf08      	it	eq
 8013484:	42a5      	cmpeq	r5, r4
 8013486:	d02b      	beq.n	80134e0 <rcl_init+0x164>
 8013488:	f8d7 a000 	ldr.w	sl, [r7]
 801348c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013490:	f7ec feb6 	bl	8000200 <strlen>
 8013494:	1c42      	adds	r2, r0, #1
 8013496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013498:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801349a:	f8da a020 	ldr.w	sl, [sl, #32]
 801349e:	9201      	str	r2, [sp, #4]
 80134a0:	4610      	mov	r0, r2
 80134a2:	4798      	blx	r3
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80134aa:	6a1b      	ldr	r3, [r3, #32]
 80134ac:	9a01      	ldr	r2, [sp, #4]
 80134ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d1de      	bne.n	8013474 <rcl_init+0xf8>
 80134b6:	240a      	movs	r4, #10
 80134b8:	4638      	mov	r0, r7
 80134ba:	f7ff feff 	bl	80132bc <__cleanup_context>
 80134be:	4620      	mov	r0, r4
 80134c0:	b01e      	add	sp, #120	@ 0x78
 80134c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134c6:	2900      	cmp	r1, #0
 80134c8:	f43f af71 	beq.w	80133ae <rcl_init+0x32>
 80134cc:	240b      	movs	r4, #11
 80134ce:	4620      	mov	r0, r4
 80134d0:	b01e      	add	sp, #120	@ 0x78
 80134d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d6:	2464      	movs	r4, #100	@ 0x64
 80134d8:	4620      	mov	r0, r4
 80134da:	b01e      	add	sp, #120	@ 0x78
 80134dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134e0:	f8d7 9000 	ldr.w	r9, [r7]
 80134e4:	4926      	ldr	r1, [pc, #152]	@ (8013580 <rcl_init+0x204>)
 80134e6:	680b      	ldr	r3, [r1, #0]
 80134e8:	3301      	adds	r3, #1
 80134ea:	d036      	beq.n	801355a <rcl_init+0x1de>
 80134ec:	600b      	str	r3, [r1, #0]
 80134ee:	461a      	mov	r2, r3
 80134f0:	2400      	movs	r4, #0
 80134f2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80134f6:	607b      	str	r3, [r7, #4]
 80134f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80134fa:	3301      	adds	r3, #1
 80134fc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013500:	d034      	beq.n	801356c <rcl_init+0x1f0>
 8013502:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013506:	b93b      	cbnz	r3, 8013518 <rcl_init+0x19c>
 8013508:	3030      	adds	r0, #48	@ 0x30
 801350a:	f000 f939 	bl	8013780 <rcl_get_localhost_only>
 801350e:	4604      	mov	r4, r0
 8013510:	2800      	cmp	r0, #0
 8013512:	d1d1      	bne.n	80134b8 <rcl_init+0x13c>
 8013514:	683b      	ldr	r3, [r7, #0]
 8013516:	6958      	ldr	r0, [r3, #20]
 8013518:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801351a:	aa18      	add	r2, sp, #96	@ 0x60
 801351c:	a917      	add	r1, sp, #92	@ 0x5c
 801351e:	f001 f8f3 	bl	8014708 <rcl_validate_enclave_name>
 8013522:	4604      	mov	r4, r0
 8013524:	2800      	cmp	r0, #0
 8013526:	d1c7      	bne.n	80134b8 <rcl_init+0x13c>
 8013528:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801352a:	b9eb      	cbnz	r3, 8013568 <rcl_init+0x1ec>
 801352c:	6839      	ldr	r1, [r7, #0]
 801352e:	694b      	ldr	r3, [r1, #20]
 8013530:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013532:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8013536:	f000 fc3d 	bl	8013db4 <rcl_get_security_options_from_environment>
 801353a:	4604      	mov	r4, r0
 801353c:	2800      	cmp	r0, #0
 801353e:	d1bb      	bne.n	80134b8 <rcl_init+0x13c>
 8013540:	6839      	ldr	r1, [r7, #0]
 8013542:	6948      	ldr	r0, [r1, #20]
 8013544:	3128      	adds	r1, #40	@ 0x28
 8013546:	3018      	adds	r0, #24
 8013548:	f003 fb08 	bl	8016b5c <rmw_init>
 801354c:	4604      	mov	r4, r0
 801354e:	2800      	cmp	r0, #0
 8013550:	d0bd      	beq.n	80134ce <rcl_init+0x152>
 8013552:	f7ff fe8f 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 8013556:	4604      	mov	r4, r0
 8013558:	e7ae      	b.n	80134b8 <rcl_init+0x13c>
 801355a:	2201      	movs	r2, #1
 801355c:	461c      	mov	r4, r3
 801355e:	600a      	str	r2, [r1, #0]
 8013560:	4613      	mov	r3, r2
 8013562:	e7c6      	b.n	80134f2 <rcl_init+0x176>
 8013564:	240a      	movs	r4, #10
 8013566:	e7b2      	b.n	80134ce <rcl_init+0x152>
 8013568:	2401      	movs	r4, #1
 801356a:	e7a5      	b.n	80134b8 <rcl_init+0x13c>
 801356c:	3024      	adds	r0, #36	@ 0x24
 801356e:	f006 f8ab 	bl	80196c8 <rcl_get_default_domain_id>
 8013572:	4604      	mov	r4, r0
 8013574:	2800      	cmp	r0, #0
 8013576:	d19f      	bne.n	80134b8 <rcl_init+0x13c>
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	6958      	ldr	r0, [r3, #20]
 801357c:	e7c1      	b.n	8013502 <rcl_init+0x186>
 801357e:	bf00      	nop
 8013580:	20015c14 	.word	0x20015c14

08013584 <rcl_get_zero_initialized_init_options>:
 8013584:	2000      	movs	r0, #0
 8013586:	4770      	bx	lr

08013588 <rcl_init_options_init>:
 8013588:	b084      	sub	sp, #16
 801358a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801358c:	b097      	sub	sp, #92	@ 0x5c
 801358e:	ae1d      	add	r6, sp, #116	@ 0x74
 8013590:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8013594:	2800      	cmp	r0, #0
 8013596:	d058      	beq.n	801364a <rcl_init_options_init+0xc2>
 8013598:	6803      	ldr	r3, [r0, #0]
 801359a:	4605      	mov	r5, r0
 801359c:	b133      	cbz	r3, 80135ac <rcl_init_options_init+0x24>
 801359e:	2464      	movs	r4, #100	@ 0x64
 80135a0:	4620      	mov	r0, r4
 80135a2:	b017      	add	sp, #92	@ 0x5c
 80135a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80135a8:	b004      	add	sp, #16
 80135aa:	4770      	bx	lr
 80135ac:	4630      	mov	r0, r6
 80135ae:	f7f9 fa2f 	bl	800ca10 <rcutils_allocator_is_valid>
 80135b2:	2800      	cmp	r0, #0
 80135b4:	d049      	beq.n	801364a <rcl_init_options_init+0xc2>
 80135b6:	46b4      	mov	ip, r6
 80135b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135bc:	ac11      	add	r4, sp, #68	@ 0x44
 80135be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80135c0:	f8dc 3000 	ldr.w	r3, [ip]
 80135c4:	6023      	str	r3, [r4, #0]
 80135c6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80135c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80135ca:	2050      	movs	r0, #80	@ 0x50
 80135cc:	4798      	blx	r3
 80135ce:	4604      	mov	r4, r0
 80135d0:	6028      	str	r0, [r5, #0]
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d03b      	beq.n	801364e <rcl_init_options_init+0xc6>
 80135d6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80135da:	4686      	mov	lr, r0
 80135dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135e4:	f8dc 3000 	ldr.w	r3, [ip]
 80135e8:	f8ce 3000 	str.w	r3, [lr]
 80135ec:	a802      	add	r0, sp, #8
 80135ee:	f002 ff4f 	bl	8016490 <rmw_get_zero_initialized_init_options>
 80135f2:	f10d 0e08 	add.w	lr, sp, #8
 80135f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80135fa:	f104 0c18 	add.w	ip, r4, #24
 80135fe:	682f      	ldr	r7, [r5, #0]
 8013600:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013604:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013608:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801360c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013610:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013614:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013618:	ac20      	add	r4, sp, #128	@ 0x80
 801361a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801361e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013622:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013626:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801362a:	f107 0018 	add.w	r0, r7, #24
 801362e:	f003 f99d 	bl	801696c <rmw_init_options_init>
 8013632:	4604      	mov	r4, r0
 8013634:	2800      	cmp	r0, #0
 8013636:	d0b3      	beq.n	80135a0 <rcl_init_options_init+0x18>
 8013638:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801363a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801363c:	6828      	ldr	r0, [r5, #0]
 801363e:	4798      	blx	r3
 8013640:	4620      	mov	r0, r4
 8013642:	f7ff fe17 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 8013646:	4604      	mov	r4, r0
 8013648:	e7aa      	b.n	80135a0 <rcl_init_options_init+0x18>
 801364a:	240b      	movs	r4, #11
 801364c:	e7a8      	b.n	80135a0 <rcl_init_options_init+0x18>
 801364e:	240a      	movs	r4, #10
 8013650:	e7a6      	b.n	80135a0 <rcl_init_options_init+0x18>
 8013652:	bf00      	nop

08013654 <rcl_init_options_fini>:
 8013654:	b530      	push	{r4, r5, lr}
 8013656:	b087      	sub	sp, #28
 8013658:	b1f0      	cbz	r0, 8013698 <rcl_init_options_fini+0x44>
 801365a:	6803      	ldr	r3, [r0, #0]
 801365c:	4604      	mov	r4, r0
 801365e:	b1db      	cbz	r3, 8013698 <rcl_init_options_fini+0x44>
 8013660:	469c      	mov	ip, r3
 8013662:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013666:	f10d 0e04 	add.w	lr, sp, #4
 801366a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801366e:	f8dc 3000 	ldr.w	r3, [ip]
 8013672:	f8ce 3000 	str.w	r3, [lr]
 8013676:	a801      	add	r0, sp, #4
 8013678:	f7f9 f9ca 	bl	800ca10 <rcutils_allocator_is_valid>
 801367c:	b160      	cbz	r0, 8013698 <rcl_init_options_fini+0x44>
 801367e:	6820      	ldr	r0, [r4, #0]
 8013680:	3018      	adds	r0, #24
 8013682:	f003 fa23 	bl	8016acc <rmw_init_options_fini>
 8013686:	4605      	mov	r5, r0
 8013688:	b950      	cbnz	r0, 80136a0 <rcl_init_options_fini+0x4c>
 801368a:	6820      	ldr	r0, [r4, #0]
 801368c:	9b02      	ldr	r3, [sp, #8]
 801368e:	9905      	ldr	r1, [sp, #20]
 8013690:	4798      	blx	r3
 8013692:	4628      	mov	r0, r5
 8013694:	b007      	add	sp, #28
 8013696:	bd30      	pop	{r4, r5, pc}
 8013698:	250b      	movs	r5, #11
 801369a:	4628      	mov	r0, r5
 801369c:	b007      	add	sp, #28
 801369e:	bd30      	pop	{r4, r5, pc}
 80136a0:	f7ff fde8 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 80136a4:	4605      	mov	r5, r0
 80136a6:	e7f8      	b.n	801369a <rcl_init_options_fini+0x46>

080136a8 <rcl_init_options_copy>:
 80136a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ac:	b094      	sub	sp, #80	@ 0x50
 80136ae:	2800      	cmp	r0, #0
 80136b0:	d058      	beq.n	8013764 <rcl_init_options_copy+0xbc>
 80136b2:	4604      	mov	r4, r0
 80136b4:	6800      	ldr	r0, [r0, #0]
 80136b6:	2800      	cmp	r0, #0
 80136b8:	d054      	beq.n	8013764 <rcl_init_options_copy+0xbc>
 80136ba:	460e      	mov	r6, r1
 80136bc:	f7f9 f9a8 	bl	800ca10 <rcutils_allocator_is_valid>
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d04f      	beq.n	8013764 <rcl_init_options_copy+0xbc>
 80136c4:	2e00      	cmp	r6, #0
 80136c6:	d04d      	beq.n	8013764 <rcl_init_options_copy+0xbc>
 80136c8:	6833      	ldr	r3, [r6, #0]
 80136ca:	b123      	cbz	r3, 80136d6 <rcl_init_options_copy+0x2e>
 80136cc:	2464      	movs	r4, #100	@ 0x64
 80136ce:	4620      	mov	r0, r4
 80136d0:	b014      	add	sp, #80	@ 0x50
 80136d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d6:	6827      	ldr	r7, [r4, #0]
 80136d8:	46bc      	mov	ip, r7
 80136da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80136de:	ad0f      	add	r5, sp, #60	@ 0x3c
 80136e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80136e2:	f8dc 3000 	ldr.w	r3, [ip]
 80136e6:	f8d7 8000 	ldr.w	r8, [r7]
 80136ea:	602b      	str	r3, [r5, #0]
 80136ec:	4619      	mov	r1, r3
 80136ee:	2050      	movs	r0, #80	@ 0x50
 80136f0:	47c0      	blx	r8
 80136f2:	4605      	mov	r5, r0
 80136f4:	6030      	str	r0, [r6, #0]
 80136f6:	b3d0      	cbz	r0, 801376e <rcl_init_options_copy+0xc6>
 80136f8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80136fc:	4686      	mov	lr, r0
 80136fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013702:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013706:	f8dc 3000 	ldr.w	r3, [ip]
 801370a:	f8ce 3000 	str.w	r3, [lr]
 801370e:	4668      	mov	r0, sp
 8013710:	f002 febe 	bl	8016490 <rmw_get_zero_initialized_init_options>
 8013714:	46ee      	mov	lr, sp
 8013716:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801371a:	f105 0c18 	add.w	ip, r5, #24
 801371e:	6824      	ldr	r4, [r4, #0]
 8013720:	6835      	ldr	r5, [r6, #0]
 8013722:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013726:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801372a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801372e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013732:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013736:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801373a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801373e:	f104 0018 	add.w	r0, r4, #24
 8013742:	f105 0118 	add.w	r1, r5, #24
 8013746:	f003 f979 	bl	8016a3c <rmw_init_options_copy>
 801374a:	4604      	mov	r4, r0
 801374c:	2800      	cmp	r0, #0
 801374e:	d0be      	beq.n	80136ce <rcl_init_options_copy+0x26>
 8013750:	f7f9 f96c 	bl	800ca2c <rcutils_get_error_string>
 8013754:	f7f9 f980 	bl	800ca58 <rcutils_reset_error>
 8013758:	4630      	mov	r0, r6
 801375a:	f7ff ff7b 	bl	8013654 <rcl_init_options_fini>
 801375e:	b140      	cbz	r0, 8013772 <rcl_init_options_copy+0xca>
 8013760:	4604      	mov	r4, r0
 8013762:	e7b4      	b.n	80136ce <rcl_init_options_copy+0x26>
 8013764:	240b      	movs	r4, #11
 8013766:	4620      	mov	r0, r4
 8013768:	b014      	add	sp, #80	@ 0x50
 801376a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801376e:	240a      	movs	r4, #10
 8013770:	e7ad      	b.n	80136ce <rcl_init_options_copy+0x26>
 8013772:	4620      	mov	r0, r4
 8013774:	b014      	add	sp, #80	@ 0x50
 8013776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801377a:	f7ff bd7b 	b.w	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 801377e:	bf00      	nop

08013780 <rcl_get_localhost_only>:
 8013780:	b510      	push	{r4, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	2300      	movs	r3, #0
 8013786:	9301      	str	r3, [sp, #4]
 8013788:	b1b8      	cbz	r0, 80137ba <rcl_get_localhost_only+0x3a>
 801378a:	4604      	mov	r4, r0
 801378c:	a901      	add	r1, sp, #4
 801378e:	480c      	ldr	r0, [pc, #48]	@ (80137c0 <rcl_get_localhost_only+0x40>)
 8013790:	f002 fbc2 	bl	8015f18 <rcutils_get_env>
 8013794:	b110      	cbz	r0, 801379c <rcl_get_localhost_only+0x1c>
 8013796:	2001      	movs	r0, #1
 8013798:	b002      	add	sp, #8
 801379a:	bd10      	pop	{r4, pc}
 801379c:	9b01      	ldr	r3, [sp, #4]
 801379e:	b113      	cbz	r3, 80137a6 <rcl_get_localhost_only+0x26>
 80137a0:	781a      	ldrb	r2, [r3, #0]
 80137a2:	2a31      	cmp	r2, #49	@ 0x31
 80137a4:	d004      	beq.n	80137b0 <rcl_get_localhost_only+0x30>
 80137a6:	2302      	movs	r3, #2
 80137a8:	2000      	movs	r0, #0
 80137aa:	7023      	strb	r3, [r4, #0]
 80137ac:	b002      	add	sp, #8
 80137ae:	bd10      	pop	{r4, pc}
 80137b0:	785b      	ldrb	r3, [r3, #1]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d1f7      	bne.n	80137a6 <rcl_get_localhost_only+0x26>
 80137b6:	2301      	movs	r3, #1
 80137b8:	e7f6      	b.n	80137a8 <rcl_get_localhost_only+0x28>
 80137ba:	200b      	movs	r0, #11
 80137bc:	b002      	add	sp, #8
 80137be:	bd10      	pop	{r4, pc}
 80137c0:	0801cfa0 	.word	0x0801cfa0

080137c4 <rcl_get_zero_initialized_node>:
 80137c4:	4a03      	ldr	r2, [pc, #12]	@ (80137d4 <rcl_get_zero_initialized_node+0x10>)
 80137c6:	4603      	mov	r3, r0
 80137c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80137d0:	4618      	mov	r0, r3
 80137d2:	4770      	bx	lr
 80137d4:	0801cfc4 	.word	0x0801cfc4

080137d8 <rcl_node_init>:
 80137d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137dc:	b0a9      	sub	sp, #164	@ 0xa4
 80137de:	4604      	mov	r4, r0
 80137e0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80137e4:	a823      	add	r0, sp, #140	@ 0x8c
 80137e6:	460e      	mov	r6, r1
 80137e8:	4615      	mov	r5, r2
 80137ea:	461f      	mov	r7, r3
 80137ec:	f006 f994 	bl	8019b18 <rcl_guard_condition_get_default_options>
 80137f0:	f1b8 0f00 	cmp.w	r8, #0
 80137f4:	f000 80e6 	beq.w	80139c4 <rcl_node_init+0x1ec>
 80137f8:	4640      	mov	r0, r8
 80137fa:	f7f9 f909 	bl	800ca10 <rcutils_allocator_is_valid>
 80137fe:	2800      	cmp	r0, #0
 8013800:	f000 80e0 	beq.w	80139c4 <rcl_node_init+0x1ec>
 8013804:	2e00      	cmp	r6, #0
 8013806:	f000 80dd 	beq.w	80139c4 <rcl_node_init+0x1ec>
 801380a:	2d00      	cmp	r5, #0
 801380c:	f000 80da 	beq.w	80139c4 <rcl_node_init+0x1ec>
 8013810:	2c00      	cmp	r4, #0
 8013812:	f000 80d7 	beq.w	80139c4 <rcl_node_init+0x1ec>
 8013816:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801381a:	f1b9 0f00 	cmp.w	r9, #0
 801381e:	f040 80fd 	bne.w	8013a1c <rcl_node_init+0x244>
 8013822:	2f00      	cmp	r7, #0
 8013824:	f000 80ce 	beq.w	80139c4 <rcl_node_init+0x1ec>
 8013828:	4638      	mov	r0, r7
 801382a:	f7ff fd41 	bl	80132b0 <rcl_context_is_valid>
 801382e:	4682      	mov	sl, r0
 8013830:	2800      	cmp	r0, #0
 8013832:	f000 80cd 	beq.w	80139d0 <rcl_node_init+0x1f8>
 8013836:	464a      	mov	r2, r9
 8013838:	a922      	add	r1, sp, #136	@ 0x88
 801383a:	4630      	mov	r0, r6
 801383c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013840:	f002 ffc8 	bl	80167d4 <rmw_validate_node_name>
 8013844:	4681      	mov	r9, r0
 8013846:	2800      	cmp	r0, #0
 8013848:	f040 80be 	bne.w	80139c8 <rcl_node_init+0x1f0>
 801384c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801384e:	2800      	cmp	r0, #0
 8013850:	f040 80f0 	bne.w	8013a34 <rcl_node_init+0x25c>
 8013854:	4628      	mov	r0, r5
 8013856:	f7ec fcd3 	bl	8000200 <strlen>
 801385a:	2800      	cmp	r0, #0
 801385c:	f040 80bb 	bne.w	80139d6 <rcl_node_init+0x1fe>
 8013860:	4d7c      	ldr	r5, [pc, #496]	@ (8013a54 <rcl_node_init+0x27c>)
 8013862:	a922      	add	r1, sp, #136	@ 0x88
 8013864:	2200      	movs	r2, #0
 8013866:	4628      	mov	r0, r5
 8013868:	f002 ff96 	bl	8016798 <rmw_validate_namespace>
 801386c:	4681      	mov	r9, r0
 801386e:	2800      	cmp	r0, #0
 8013870:	f040 80aa 	bne.w	80139c8 <rcl_node_init+0x1f0>
 8013874:	4682      	mov	sl, r0
 8013876:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013878:	2800      	cmp	r0, #0
 801387a:	f040 80e0 	bne.w	8013a3e <rcl_node_init+0x266>
 801387e:	f8d8 3000 	ldr.w	r3, [r8]
 8013882:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013886:	2078      	movs	r0, #120	@ 0x78
 8013888:	4798      	blx	r3
 801388a:	4681      	mov	r9, r0
 801388c:	6060      	str	r0, [r4, #4]
 801388e:	2800      	cmp	r0, #0
 8013890:	f000 80ca 	beq.w	8013a28 <rcl_node_init+0x250>
 8013894:	2200      	movs	r2, #0
 8013896:	2300      	movs	r3, #0
 8013898:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 801389c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80138a0:	a808      	add	r0, sp, #32
 80138a2:	f000 f907 	bl	8013ab4 <rcl_node_get_default_options>
 80138a6:	a908      	add	r1, sp, #32
 80138a8:	4648      	mov	r0, r9
 80138aa:	2268      	movs	r2, #104	@ 0x68
 80138ac:	f007 fc4d 	bl	801b14a <memcpy>
 80138b0:	6861      	ldr	r1, [r4, #4]
 80138b2:	6027      	str	r7, [r4, #0]
 80138b4:	4640      	mov	r0, r8
 80138b6:	f000 f90b 	bl	8013ad0 <rcl_node_options_copy>
 80138ba:	2800      	cmp	r0, #0
 80138bc:	d158      	bne.n	8013970 <rcl_node_init+0x198>
 80138be:	4628      	mov	r0, r5
 80138c0:	f7ec fc9e 	bl	8000200 <strlen>
 80138c4:	4428      	add	r0, r5
 80138c6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80138ca:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80138ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80138d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	bf0c      	ite	eq
 80138d8:	4b5f      	ldreq	r3, [pc, #380]	@ (8013a58 <rcl_node_init+0x280>)
 80138da:	4b60      	ldrne	r3, [pc, #384]	@ (8013a5c <rcl_node_init+0x284>)
 80138dc:	9302      	str	r3, [sp, #8]
 80138de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80138e2:	9301      	str	r3, [sp, #4]
 80138e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80138e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80138ec:	f002 fb3c 	bl	8015f68 <rcutils_format_string_limit>
 80138f0:	6823      	ldr	r3, [r4, #0]
 80138f2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80138f6:	6818      	ldr	r0, [r3, #0]
 80138f8:	4631      	mov	r1, r6
 80138fa:	3028      	adds	r0, #40	@ 0x28
 80138fc:	462a      	mov	r2, r5
 80138fe:	6866      	ldr	r6, [r4, #4]
 8013900:	f003 fb80 	bl	8017004 <rmw_create_node>
 8013904:	6863      	ldr	r3, [r4, #4]
 8013906:	66b0      	str	r0, [r6, #104]	@ 0x68
 8013908:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801390a:	2800      	cmp	r0, #0
 801390c:	d032      	beq.n	8013974 <rcl_node_init+0x19c>
 801390e:	f003 fc0d 	bl	801712c <rmw_node_get_graph_guard_condition>
 8013912:	4681      	mov	r9, r0
 8013914:	b360      	cbz	r0, 8013970 <rcl_node_init+0x198>
 8013916:	f8d8 3000 	ldr.w	r3, [r8]
 801391a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801391e:	6866      	ldr	r6, [r4, #4]
 8013920:	2008      	movs	r0, #8
 8013922:	4798      	blx	r3
 8013924:	6863      	ldr	r3, [r4, #4]
 8013926:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8013928:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801392c:	f1bb 0f00 	cmp.w	fp, #0
 8013930:	d020      	beq.n	8013974 <rcl_node_init+0x19c>
 8013932:	a806      	add	r0, sp, #24
 8013934:	f006 f860 	bl	80199f8 <rcl_get_zero_initialized_guard_condition>
 8013938:	a806      	add	r0, sp, #24
 801393a:	c803      	ldmia	r0, {r0, r1}
 801393c:	6863      	ldr	r3, [r4, #4]
 801393e:	46c4      	mov	ip, r8
 8013940:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013944:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013948:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801394c:	ae23      	add	r6, sp, #140	@ 0x8c
 801394e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013950:	f8dc 3000 	ldr.w	r3, [ip]
 8013954:	6033      	str	r3, [r6, #0]
 8013956:	ab28      	add	r3, sp, #160	@ 0xa0
 8013958:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801395c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013960:	4649      	mov	r1, r9
 8013962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013964:	463a      	mov	r2, r7
 8013966:	4670      	mov	r0, lr
 8013968:	f006 f850 	bl	8019a0c <rcl_guard_condition_init_from_rmw>
 801396c:	4681      	mov	r9, r0
 801396e:	b328      	cbz	r0, 80139bc <rcl_node_init+0x1e4>
 8013970:	6863      	ldr	r3, [r4, #4]
 8013972:	b1f3      	cbz	r3, 80139b2 <rcl_node_init+0x1da>
 8013974:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8013976:	b128      	cbz	r0, 8013984 <rcl_node_init+0x1ac>
 8013978:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801397c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013980:	4798      	blx	r3
 8013982:	6863      	ldr	r3, [r4, #4]
 8013984:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8013986:	b110      	cbz	r0, 801398e <rcl_node_init+0x1b6>
 8013988:	f003 fb54 	bl	8017034 <rmw_destroy_node>
 801398c:	6863      	ldr	r3, [r4, #4]
 801398e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013990:	b148      	cbz	r0, 80139a6 <rcl_node_init+0x1ce>
 8013992:	f006 f89b 	bl	8019acc <rcl_guard_condition_fini>
 8013996:	6863      	ldr	r3, [r4, #4]
 8013998:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801399c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801399e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80139a2:	4798      	blx	r3
 80139a4:	6863      	ldr	r3, [r4, #4]
 80139a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80139b0:	4798      	blx	r3
 80139b2:	2300      	movs	r3, #0
 80139b4:	e9c4 3300 	strd	r3, r3, [r4]
 80139b8:	f04f 0901 	mov.w	r9, #1
 80139bc:	f1ba 0f00 	cmp.w	sl, #0
 80139c0:	d125      	bne.n	8013a0e <rcl_node_init+0x236>
 80139c2:	e001      	b.n	80139c8 <rcl_node_init+0x1f0>
 80139c4:	f04f 090b 	mov.w	r9, #11
 80139c8:	4648      	mov	r0, r9
 80139ca:	b029      	add	sp, #164	@ 0xa4
 80139cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80139d4:	e7f8      	b.n	80139c8 <rcl_node_init+0x1f0>
 80139d6:	782b      	ldrb	r3, [r5, #0]
 80139d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80139da:	f43f af42 	beq.w	8013862 <rcl_node_init+0x8a>
 80139de:	9503      	str	r5, [sp, #12]
 80139e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80139e4:	9300      	str	r3, [sp, #0]
 80139e6:	4b1e      	ldr	r3, [pc, #120]	@ (8013a60 <rcl_node_init+0x288>)
 80139e8:	9302      	str	r3, [sp, #8]
 80139ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80139ee:	9301      	str	r3, [sp, #4]
 80139f0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80139f4:	f002 fab8 	bl	8015f68 <rcutils_format_string_limit>
 80139f8:	4605      	mov	r5, r0
 80139fa:	b340      	cbz	r0, 8013a4e <rcl_node_init+0x276>
 80139fc:	2200      	movs	r2, #0
 80139fe:	a922      	add	r1, sp, #136	@ 0x88
 8013a00:	9222      	str	r2, [sp, #136]	@ 0x88
 8013a02:	f002 fec9 	bl	8016798 <rmw_validate_namespace>
 8013a06:	4681      	mov	r9, r0
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	f43f af34 	beq.w	8013876 <rcl_node_init+0x9e>
 8013a0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a16:	4628      	mov	r0, r5
 8013a18:	4798      	blx	r3
 8013a1a:	e7d5      	b.n	80139c8 <rcl_node_init+0x1f0>
 8013a1c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013a20:	4648      	mov	r0, r9
 8013a22:	b029      	add	sp, #164	@ 0xa4
 8013a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a28:	f04f 090a 	mov.w	r9, #10
 8013a2c:	f1ba 0f00 	cmp.w	sl, #0
 8013a30:	d1ed      	bne.n	8013a0e <rcl_node_init+0x236>
 8013a32:	e7c9      	b.n	80139c8 <rcl_node_init+0x1f0>
 8013a34:	f002 ff20 	bl	8016878 <rmw_node_name_validation_result_string>
 8013a38:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013a3c:	e7c4      	b.n	80139c8 <rcl_node_init+0x1f0>
 8013a3e:	f002 febd 	bl	80167bc <rmw_namespace_validation_result_string>
 8013a42:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013a46:	f1ba 0f00 	cmp.w	sl, #0
 8013a4a:	d1e0      	bne.n	8013a0e <rcl_node_init+0x236>
 8013a4c:	e7bc      	b.n	80139c8 <rcl_node_init+0x1f0>
 8013a4e:	f04f 090a 	mov.w	r9, #10
 8013a52:	e7b9      	b.n	80139c8 <rcl_node_init+0x1f0>
 8013a54:	0801cfb4 	.word	0x0801cfb4
 8013a58:	0801c938 	.word	0x0801c938
 8013a5c:	0801cfbc 	.word	0x0801cfbc
 8013a60:	0801cfb8 	.word	0x0801cfb8

08013a64 <rcl_node_is_valid>:
 8013a64:	b130      	cbz	r0, 8013a74 <rcl_node_is_valid+0x10>
 8013a66:	6843      	ldr	r3, [r0, #4]
 8013a68:	b123      	cbz	r3, 8013a74 <rcl_node_is_valid+0x10>
 8013a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a6c:	b113      	cbz	r3, 8013a74 <rcl_node_is_valid+0x10>
 8013a6e:	6800      	ldr	r0, [r0, #0]
 8013a70:	f7ff bc1e 	b.w	80132b0 <rcl_context_is_valid>
 8013a74:	2000      	movs	r0, #0
 8013a76:	4770      	bx	lr

08013a78 <rcl_node_get_name>:
 8013a78:	b120      	cbz	r0, 8013a84 <rcl_node_get_name+0xc>
 8013a7a:	6840      	ldr	r0, [r0, #4]
 8013a7c:	b110      	cbz	r0, 8013a84 <rcl_node_get_name+0xc>
 8013a7e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013a80:	b100      	cbz	r0, 8013a84 <rcl_node_get_name+0xc>
 8013a82:	6880      	ldr	r0, [r0, #8]
 8013a84:	4770      	bx	lr
 8013a86:	bf00      	nop

08013a88 <rcl_node_get_namespace>:
 8013a88:	b120      	cbz	r0, 8013a94 <rcl_node_get_namespace+0xc>
 8013a8a:	6840      	ldr	r0, [r0, #4]
 8013a8c:	b110      	cbz	r0, 8013a94 <rcl_node_get_namespace+0xc>
 8013a8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013a90:	b100      	cbz	r0, 8013a94 <rcl_node_get_namespace+0xc>
 8013a92:	68c0      	ldr	r0, [r0, #12]
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop

08013a98 <rcl_node_get_options>:
 8013a98:	b128      	cbz	r0, 8013aa6 <rcl_node_get_options+0xe>
 8013a9a:	6840      	ldr	r0, [r0, #4]
 8013a9c:	b118      	cbz	r0, 8013aa6 <rcl_node_get_options+0xe>
 8013a9e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	bf08      	it	eq
 8013aa4:	2000      	moveq	r0, #0
 8013aa6:	4770      	bx	lr

08013aa8 <rcl_node_get_rmw_handle>:
 8013aa8:	b110      	cbz	r0, 8013ab0 <rcl_node_get_rmw_handle+0x8>
 8013aaa:	6840      	ldr	r0, [r0, #4]
 8013aac:	b100      	cbz	r0, 8013ab0 <rcl_node_get_rmw_handle+0x8>
 8013aae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013ab0:	4770      	bx	lr
 8013ab2:	bf00      	nop

08013ab4 <rcl_node_get_default_options>:
 8013ab4:	b510      	push	{r4, lr}
 8013ab6:	2268      	movs	r2, #104	@ 0x68
 8013ab8:	4604      	mov	r4, r0
 8013aba:	2100      	movs	r1, #0
 8013abc:	f007 fadd 	bl	801b07a <memset>
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f7f8 ff97 	bl	800c9f4 <rcutils_get_default_allocator>
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	7523      	strb	r3, [r4, #20]
 8013aca:	4620      	mov	r0, r4
 8013acc:	bd10      	pop	{r4, pc}
 8013ace:	bf00      	nop

08013ad0 <rcl_node_options_copy>:
 8013ad0:	b1d0      	cbz	r0, 8013b08 <rcl_node_options_copy+0x38>
 8013ad2:	b570      	push	{r4, r5, r6, lr}
 8013ad4:	460c      	mov	r4, r1
 8013ad6:	b1a9      	cbz	r1, 8013b04 <rcl_node_options_copy+0x34>
 8013ad8:	4288      	cmp	r0, r1
 8013ada:	4684      	mov	ip, r0
 8013adc:	d012      	beq.n	8013b04 <rcl_node_options_copy+0x34>
 8013ade:	4605      	mov	r5, r0
 8013ae0:	8a86      	ldrh	r6, [r0, #20]
 8013ae2:	468e      	mov	lr, r1
 8013ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ae6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013aea:	682b      	ldr	r3, [r5, #0]
 8013aec:	f8ce 3000 	str.w	r3, [lr]
 8013af0:	f10c 0118 	add.w	r1, ip, #24
 8013af4:	2250      	movs	r2, #80	@ 0x50
 8013af6:	82a6      	strh	r6, [r4, #20]
 8013af8:	f104 0018 	add.w	r0, r4, #24
 8013afc:	f007 fb25 	bl	801b14a <memcpy>
 8013b00:	2000      	movs	r0, #0
 8013b02:	bd70      	pop	{r4, r5, r6, pc}
 8013b04:	200b      	movs	r0, #11
 8013b06:	bd70      	pop	{r4, r5, r6, pc}
 8013b08:	200b      	movs	r0, #11
 8013b0a:	4770      	bx	lr

08013b0c <rcl_node_resolve_name>:
 8013b0c:	b082      	sub	sp, #8
 8013b0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b12:	b091      	sub	sp, #68	@ 0x44
 8013b14:	ac1a      	add	r4, sp, #104	@ 0x68
 8013b16:	e884 000c 	stmia.w	r4, {r2, r3}
 8013b1a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d03b      	beq.n	8013b9a <rcl_node_resolve_name+0x8e>
 8013b22:	460c      	mov	r4, r1
 8013b24:	4605      	mov	r5, r0
 8013b26:	f7ff ffb7 	bl	8013a98 <rcl_node_get_options>
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	d037      	beq.n	8013b9e <rcl_node_resolve_name+0x92>
 8013b2e:	4628      	mov	r0, r5
 8013b30:	f7ff ffa2 	bl	8013a78 <rcl_node_get_name>
 8013b34:	4606      	mov	r6, r0
 8013b36:	4628      	mov	r0, r5
 8013b38:	f7ff ffa6 	bl	8013a88 <rcl_node_get_namespace>
 8013b3c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013b40:	4681      	mov	r9, r0
 8013b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b46:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013b48:	46ac      	mov	ip, r5
 8013b4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b4e:	f8de 3000 	ldr.w	r3, [lr]
 8013b52:	f8cc 3000 	str.w	r3, [ip]
 8013b56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013b58:	b1fb      	cbz	r3, 8013b9a <rcl_node_resolve_name+0x8e>
 8013b5a:	468a      	mov	sl, r1
 8013b5c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013b60:	f002 fb5a 	bl	8016218 <rcutils_get_zero_initialized_string_map>
 8013b64:	ab10      	add	r3, sp, #64	@ 0x40
 8013b66:	9008      	str	r0, [sp, #32]
 8013b68:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013b6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013b70:	2100      	movs	r1, #0
 8013b72:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013b76:	a808      	add	r0, sp, #32
 8013b78:	f002 fbc6 	bl	8016308 <rcutils_string_map_init>
 8013b7c:	4607      	mov	r7, r0
 8013b7e:	b180      	cbz	r0, 8013ba2 <rcl_node_resolve_name+0x96>
 8013b80:	f7f8 ff54 	bl	800ca2c <rcutils_get_error_string>
 8013b84:	f7f8 ff68 	bl	800ca58 <rcutils_reset_error>
 8013b88:	2f0a      	cmp	r7, #10
 8013b8a:	bf18      	it	ne
 8013b8c:	2701      	movne	r7, #1
 8013b8e:	4638      	mov	r0, r7
 8013b90:	b011      	add	sp, #68	@ 0x44
 8013b92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b96:	b002      	add	sp, #8
 8013b98:	4770      	bx	lr
 8013b9a:	270b      	movs	r7, #11
 8013b9c:	e7f7      	b.n	8013b8e <rcl_node_resolve_name+0x82>
 8013b9e:	2701      	movs	r7, #1
 8013ba0:	e7f5      	b.n	8013b8e <rcl_node_resolve_name+0x82>
 8013ba2:	9009      	str	r0, [sp, #36]	@ 0x24
 8013ba4:	9007      	str	r0, [sp, #28]
 8013ba6:	a808      	add	r0, sp, #32
 8013ba8:	f005 ff20 	bl	80199ec <rcl_get_default_topic_name_substitutions>
 8013bac:	4607      	mov	r7, r0
 8013bae:	b1a8      	cbz	r0, 8013bdc <rcl_node_resolve_name+0xd0>
 8013bb0:	280a      	cmp	r0, #10
 8013bb2:	9c07      	ldr	r4, [sp, #28]
 8013bb4:	d000      	beq.n	8013bb8 <rcl_node_resolve_name+0xac>
 8013bb6:	2701      	movs	r7, #1
 8013bb8:	a808      	add	r0, sp, #32
 8013bba:	f002 fbe5 	bl	8016388 <rcutils_string_map_fini>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	d13d      	bne.n	8013c3e <rcl_node_resolve_name+0x132>
 8013bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013bc4:	4659      	mov	r1, fp
 8013bc6:	47d0      	blx	sl
 8013bc8:	4659      	mov	r1, fp
 8013bca:	4620      	mov	r0, r4
 8013bcc:	47d0      	blx	sl
 8013bce:	f1b8 0f00 	cmp.w	r8, #0
 8013bd2:	d0dc      	beq.n	8013b8e <rcl_node_resolve_name+0x82>
 8013bd4:	2f67      	cmp	r7, #103	@ 0x67
 8013bd6:	bf08      	it	eq
 8013bd8:	2768      	moveq	r7, #104	@ 0x68
 8013bda:	e7d8      	b.n	8013b8e <rcl_node_resolve_name+0x82>
 8013bdc:	ab09      	add	r3, sp, #36	@ 0x24
 8013bde:	9305      	str	r3, [sp, #20]
 8013be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013be2:	46ec      	mov	ip, sp
 8013be4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013be8:	682b      	ldr	r3, [r5, #0]
 8013bea:	f8cc 3000 	str.w	r3, [ip]
 8013bee:	464a      	mov	r2, r9
 8013bf0:	4631      	mov	r1, r6
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	ab08      	add	r3, sp, #32
 8013bf6:	f005 fd9b 	bl	8019730 <rcl_expand_topic_name>
 8013bfa:	4607      	mov	r7, r0
 8013bfc:	b9b8      	cbnz	r0, 8013c2e <rcl_node_resolve_name+0x122>
 8013bfe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013c00:	9009      	str	r0, [sp, #36]	@ 0x24
 8013c02:	4602      	mov	r2, r0
 8013c04:	a90a      	add	r1, sp, #40	@ 0x28
 8013c06:	4620      	mov	r0, r4
 8013c08:	f002 fd02 	bl	8016610 <rmw_validate_full_topic_name>
 8013c0c:	b988      	cbnz	r0, 8013c32 <rcl_node_resolve_name+0x126>
 8013c0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013c10:	b9d5      	cbnz	r5, 8013c48 <rcl_node_resolve_name+0x13c>
 8013c12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013c14:	a808      	add	r0, sp, #32
 8013c16:	601c      	str	r4, [r3, #0]
 8013c18:	f002 fbb6 	bl	8016388 <rcutils_string_map_fini>
 8013c1c:	4607      	mov	r7, r0
 8013c1e:	b1a8      	cbz	r0, 8013c4c <rcl_node_resolve_name+0x140>
 8013c20:	f7f8 ff04 	bl	800ca2c <rcutils_get_error_string>
 8013c24:	462c      	mov	r4, r5
 8013c26:	f7f8 ff17 	bl	800ca58 <rcutils_reset_error>
 8013c2a:	2701      	movs	r7, #1
 8013c2c:	e7c9      	b.n	8013bc2 <rcl_node_resolve_name+0xb6>
 8013c2e:	9c07      	ldr	r4, [sp, #28]
 8013c30:	e7c2      	b.n	8013bb8 <rcl_node_resolve_name+0xac>
 8013c32:	f7f8 fefb 	bl	800ca2c <rcutils_get_error_string>
 8013c36:	2701      	movs	r7, #1
 8013c38:	f7f8 ff0e 	bl	800ca58 <rcutils_reset_error>
 8013c3c:	e7bc      	b.n	8013bb8 <rcl_node_resolve_name+0xac>
 8013c3e:	f7f8 fef5 	bl	800ca2c <rcutils_get_error_string>
 8013c42:	f7f8 ff09 	bl	800ca58 <rcutils_reset_error>
 8013c46:	e7bc      	b.n	8013bc2 <rcl_node_resolve_name+0xb6>
 8013c48:	2767      	movs	r7, #103	@ 0x67
 8013c4a:	e7b5      	b.n	8013bb8 <rcl_node_resolve_name+0xac>
 8013c4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c4e:	4659      	mov	r1, fp
 8013c50:	47d0      	blx	sl
 8013c52:	4659      	mov	r1, fp
 8013c54:	4638      	mov	r0, r7
 8013c56:	47d0      	blx	sl
 8013c58:	e799      	b.n	8013b8e <rcl_node_resolve_name+0x82>
 8013c5a:	bf00      	nop

08013c5c <exact_match_lookup>:
 8013c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c5e:	f102 0708 	add.w	r7, r2, #8
 8013c62:	460b      	mov	r3, r1
 8013c64:	4614      	mov	r4, r2
 8013c66:	4606      	mov	r6, r0
 8013c68:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013c6c:	b085      	sub	sp, #20
 8013c6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c72:	4618      	mov	r0, r3
 8013c74:	4919      	ldr	r1, [pc, #100]	@ (8013cdc <exact_match_lookup+0x80>)
 8013c76:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013c7a:	f002 f967 	bl	8015f4c <rcutils_join_path>
 8013c7e:	7833      	ldrb	r3, [r6, #0]
 8013c80:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c82:	4605      	mov	r5, r0
 8013c84:	d023      	beq.n	8013cce <exact_match_lookup+0x72>
 8013c86:	f104 030c 	add.w	r3, r4, #12
 8013c8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013c92:	1c70      	adds	r0, r6, #1
 8013c94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013c98:	f002 f95e 	bl	8015f58 <rcutils_to_native_path>
 8013c9c:	4606      	mov	r6, r0
 8013c9e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013ca2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013ca6:	4631      	mov	r1, r6
 8013ca8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013cac:	4628      	mov	r0, r5
 8013cae:	f002 f94d 	bl	8015f4c <rcutils_join_path>
 8013cb2:	6862      	ldr	r2, [r4, #4]
 8013cb4:	6921      	ldr	r1, [r4, #16]
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	4630      	mov	r0, r6
 8013cba:	461e      	mov	r6, r3
 8013cbc:	4790      	blx	r2
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	6863      	ldr	r3, [r4, #4]
 8013cc2:	6921      	ldr	r1, [r4, #16]
 8013cc4:	4798      	blx	r3
 8013cc6:	4635      	mov	r5, r6
 8013cc8:	4628      	mov	r0, r5
 8013cca:	b005      	add	sp, #20
 8013ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cce:	7873      	ldrb	r3, [r6, #1]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d1d8      	bne.n	8013c86 <exact_match_lookup+0x2a>
 8013cd4:	4628      	mov	r0, r5
 8013cd6:	b005      	add	sp, #20
 8013cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	0801d008 	.word	0x0801d008

08013ce0 <rcl_get_secure_root>:
 8013ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ce4:	b085      	sub	sp, #20
 8013ce6:	b168      	cbz	r0, 8013d04 <rcl_get_secure_root+0x24>
 8013ce8:	4607      	mov	r7, r0
 8013cea:	4608      	mov	r0, r1
 8013cec:	460c      	mov	r4, r1
 8013cee:	f7f8 fe8f 	bl	800ca10 <rcutils_allocator_is_valid>
 8013cf2:	b138      	cbz	r0, 8013d04 <rcl_get_secure_root+0x24>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	482d      	ldr	r0, [pc, #180]	@ (8013dac <rcl_get_secure_root+0xcc>)
 8013cf8:	9303      	str	r3, [sp, #12]
 8013cfa:	a903      	add	r1, sp, #12
 8013cfc:	f002 f90c 	bl	8015f18 <rcutils_get_env>
 8013d00:	4605      	mov	r5, r0
 8013d02:	b120      	cbz	r0, 8013d0e <rcl_get_secure_root+0x2e>
 8013d04:	2500      	movs	r5, #0
 8013d06:	4628      	mov	r0, r5
 8013d08:	b005      	add	sp, #20
 8013d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d0e:	9b03      	ldr	r3, [sp, #12]
 8013d10:	781a      	ldrb	r2, [r3, #0]
 8013d12:	2a00      	cmp	r2, #0
 8013d14:	d0f6      	beq.n	8013d04 <rcl_get_secure_root+0x24>
 8013d16:	f104 090c 	add.w	r9, r4, #12
 8013d1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013d1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013d22:	4618      	mov	r0, r3
 8013d24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013d28:	f002 fa38 	bl	801619c <rcutils_strdup>
 8013d2c:	4680      	mov	r8, r0
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d0e8      	beq.n	8013d04 <rcl_get_secure_root+0x24>
 8013d32:	481f      	ldr	r0, [pc, #124]	@ (8013db0 <rcl_get_secure_root+0xd0>)
 8013d34:	9503      	str	r5, [sp, #12]
 8013d36:	a903      	add	r1, sp, #12
 8013d38:	f002 f8ee 	bl	8015f18 <rcutils_get_env>
 8013d3c:	b160      	cbz	r0, 8013d58 <rcl_get_secure_root+0x78>
 8013d3e:	2600      	movs	r6, #0
 8013d40:	6863      	ldr	r3, [r4, #4]
 8013d42:	6921      	ldr	r1, [r4, #16]
 8013d44:	4630      	mov	r0, r6
 8013d46:	4798      	blx	r3
 8013d48:	4640      	mov	r0, r8
 8013d4a:	6863      	ldr	r3, [r4, #4]
 8013d4c:	6921      	ldr	r1, [r4, #16]
 8013d4e:	4798      	blx	r3
 8013d50:	4628      	mov	r0, r5
 8013d52:	b005      	add	sp, #20
 8013d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d58:	9b03      	ldr	r3, [sp, #12]
 8013d5a:	781e      	ldrb	r6, [r3, #0]
 8013d5c:	b1f6      	cbz	r6, 8013d9c <rcl_get_secure_root+0xbc>
 8013d5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013d62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013d66:	4618      	mov	r0, r3
 8013d68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013d6c:	f002 fa16 	bl	801619c <rcutils_strdup>
 8013d70:	4606      	mov	r6, r0
 8013d72:	2800      	cmp	r0, #0
 8013d74:	d0e3      	beq.n	8013d3e <rcl_get_secure_root+0x5e>
 8013d76:	4622      	mov	r2, r4
 8013d78:	4641      	mov	r1, r8
 8013d7a:	f7ff ff6f 	bl	8013c5c <exact_match_lookup>
 8013d7e:	4605      	mov	r5, r0
 8013d80:	2d00      	cmp	r5, #0
 8013d82:	d0dd      	beq.n	8013d40 <rcl_get_secure_root+0x60>
 8013d84:	4628      	mov	r0, r5
 8013d86:	f002 f8df 	bl	8015f48 <rcutils_is_directory>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	d1d7      	bne.n	8013d40 <rcl_get_secure_root+0x60>
 8013d90:	4628      	mov	r0, r5
 8013d92:	6921      	ldr	r1, [r4, #16]
 8013d94:	461d      	mov	r5, r3
 8013d96:	6863      	ldr	r3, [r4, #4]
 8013d98:	4798      	blx	r3
 8013d9a:	e7d1      	b.n	8013d40 <rcl_get_secure_root+0x60>
 8013d9c:	4622      	mov	r2, r4
 8013d9e:	4638      	mov	r0, r7
 8013da0:	4641      	mov	r1, r8
 8013da2:	f7ff ff5b 	bl	8013c5c <exact_match_lookup>
 8013da6:	4605      	mov	r5, r0
 8013da8:	e7ea      	b.n	8013d80 <rcl_get_secure_root+0xa0>
 8013daa:	bf00      	nop
 8013dac:	0801d014 	.word	0x0801d014
 8013db0:	0801d02c 	.word	0x0801d02c

08013db4 <rcl_get_security_options_from_environment>:
 8013db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db8:	b082      	sub	sp, #8
 8013dba:	2300      	movs	r3, #0
 8013dbc:	4606      	mov	r6, r0
 8013dbe:	460f      	mov	r7, r1
 8013dc0:	4820      	ldr	r0, [pc, #128]	@ (8013e44 <rcl_get_security_options_from_environment+0x90>)
 8013dc2:	9301      	str	r3, [sp, #4]
 8013dc4:	a901      	add	r1, sp, #4
 8013dc6:	4690      	mov	r8, r2
 8013dc8:	f002 f8a6 	bl	8015f18 <rcutils_get_env>
 8013dcc:	b120      	cbz	r0, 8013dd8 <rcl_get_security_options_from_environment+0x24>
 8013dce:	2501      	movs	r5, #1
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	b002      	add	sp, #8
 8013dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dd8:	491b      	ldr	r1, [pc, #108]	@ (8013e48 <rcl_get_security_options_from_environment+0x94>)
 8013dda:	4604      	mov	r4, r0
 8013ddc:	9801      	ldr	r0, [sp, #4]
 8013dde:	f7ec fa17 	bl	8000210 <strcmp>
 8013de2:	4605      	mov	r5, r0
 8013de4:	b9e8      	cbnz	r0, 8013e22 <rcl_get_security_options_from_environment+0x6e>
 8013de6:	9001      	str	r0, [sp, #4]
 8013de8:	f1b8 0f00 	cmp.w	r8, #0
 8013dec:	d020      	beq.n	8013e30 <rcl_get_security_options_from_environment+0x7c>
 8013dee:	4817      	ldr	r0, [pc, #92]	@ (8013e4c <rcl_get_security_options_from_environment+0x98>)
 8013df0:	a901      	add	r1, sp, #4
 8013df2:	f002 f891 	bl	8015f18 <rcutils_get_env>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d1e9      	bne.n	8013dce <rcl_get_security_options_from_environment+0x1a>
 8013dfa:	4915      	ldr	r1, [pc, #84]	@ (8013e50 <rcl_get_security_options_from_environment+0x9c>)
 8013dfc:	9801      	ldr	r0, [sp, #4]
 8013dfe:	f7ec fa07 	bl	8000210 <strcmp>
 8013e02:	fab0 f080 	clz	r0, r0
 8013e06:	0940      	lsrs	r0, r0, #5
 8013e08:	f888 0000 	strb.w	r0, [r8]
 8013e0c:	4639      	mov	r1, r7
 8013e0e:	4630      	mov	r0, r6
 8013e10:	f7ff ff66 	bl	8013ce0 <rcl_get_secure_root>
 8013e14:	b170      	cbz	r0, 8013e34 <rcl_get_security_options_from_environment+0x80>
 8013e16:	f8c8 0004 	str.w	r0, [r8, #4]
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	b002      	add	sp, #8
 8013e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e22:	4625      	mov	r5, r4
 8013e24:	4628      	mov	r0, r5
 8013e26:	f888 4000 	strb.w	r4, [r8]
 8013e2a:	b002      	add	sp, #8
 8013e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e30:	250b      	movs	r5, #11
 8013e32:	e7cd      	b.n	8013dd0 <rcl_get_security_options_from_environment+0x1c>
 8013e34:	f898 5000 	ldrb.w	r5, [r8]
 8013e38:	f1a5 0501 	sub.w	r5, r5, #1
 8013e3c:	fab5 f585 	clz	r5, r5
 8013e40:	096d      	lsrs	r5, r5, #5
 8013e42:	e7c5      	b.n	8013dd0 <rcl_get_security_options_from_environment+0x1c>
 8013e44:	0801cfcc 	.word	0x0801cfcc
 8013e48:	0801cfe0 	.word	0x0801cfe0
 8013e4c:	0801cfe8 	.word	0x0801cfe8
 8013e50:	0801d000 	.word	0x0801d000

08013e54 <rcl_get_zero_initialized_service>:
 8013e54:	4b01      	ldr	r3, [pc, #4]	@ (8013e5c <rcl_get_zero_initialized_service+0x8>)
 8013e56:	6818      	ldr	r0, [r3, #0]
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop
 8013e5c:	0801d04c 	.word	0x0801d04c

08013e60 <rcl_service_init>:
 8013e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e64:	b089      	sub	sp, #36	@ 0x24
 8013e66:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8013e68:	b1c5      	cbz	r5, 8013e9c <rcl_service_init+0x3c>
 8013e6a:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8013e6e:	4604      	mov	r4, r0
 8013e70:	4648      	mov	r0, r9
 8013e72:	4688      	mov	r8, r1
 8013e74:	4617      	mov	r7, r2
 8013e76:	461e      	mov	r6, r3
 8013e78:	f7f8 fdca 	bl	800ca10 <rcutils_allocator_is_valid>
 8013e7c:	b170      	cbz	r0, 8013e9c <rcl_service_init+0x3c>
 8013e7e:	b16c      	cbz	r4, 8013e9c <rcl_service_init+0x3c>
 8013e80:	4640      	mov	r0, r8
 8013e82:	f7ff fdef 	bl	8013a64 <rcl_node_is_valid>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d058      	beq.n	8013f3c <rcl_service_init+0xdc>
 8013e8a:	b13f      	cbz	r7, 8013e9c <rcl_service_init+0x3c>
 8013e8c:	b136      	cbz	r6, 8013e9c <rcl_service_init+0x3c>
 8013e8e:	6823      	ldr	r3, [r4, #0]
 8013e90:	b14b      	cbz	r3, 8013ea6 <rcl_service_init+0x46>
 8013e92:	2664      	movs	r6, #100	@ 0x64
 8013e94:	4630      	mov	r0, r6
 8013e96:	b009      	add	sp, #36	@ 0x24
 8013e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e9c:	260b      	movs	r6, #11
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	b009      	add	sp, #36	@ 0x24
 8013ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ea6:	aa07      	add	r2, sp, #28
 8013ea8:	9205      	str	r2, [sp, #20]
 8013eaa:	2201      	movs	r2, #1
 8013eac:	9304      	str	r3, [sp, #16]
 8013eae:	9203      	str	r2, [sp, #12]
 8013eb0:	9307      	str	r3, [sp, #28]
 8013eb2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8013eb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013eba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013ebe:	4631      	mov	r1, r6
 8013ec0:	e899 000c 	ldmia.w	r9, {r2, r3}
 8013ec4:	4640      	mov	r0, r8
 8013ec6:	f7ff fe21 	bl	8013b0c <rcl_node_resolve_name>
 8013eca:	2800      	cmp	r0, #0
 8013ecc:	d145      	bne.n	8013f5a <rcl_service_init+0xfa>
 8013ece:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013ed0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013ed2:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8013ed6:	4798      	blx	r3
 8013ed8:	6020      	str	r0, [r4, #0]
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d043      	beq.n	8013f66 <rcl_service_init+0x106>
 8013ede:	4640      	mov	r0, r8
 8013ee0:	f7ff fde2 	bl	8013aa8 <rcl_node_get_rmw_handle>
 8013ee4:	462b      	mov	r3, r5
 8013ee6:	9a07      	ldr	r2, [sp, #28]
 8013ee8:	6826      	ldr	r6, [r4, #0]
 8013eea:	4639      	mov	r1, r7
 8013eec:	f003 fa76 	bl	80173dc <rmw_create_service>
 8013ef0:	6823      	ldr	r3, [r4, #0]
 8013ef2:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8013ef6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013efa:	b330      	cbz	r0, 8013f4a <rcl_service_init+0xea>
 8013efc:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8013f00:	f003 fb92 	bl	8017628 <rmw_service_request_subscription_get_actual_qos>
 8013f04:	b9f8      	cbnz	r0, 8013f46 <rcl_service_init+0xe6>
 8013f06:	6821      	ldr	r1, [r4, #0]
 8013f08:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8013f0c:	31b8      	adds	r1, #184	@ 0xb8
 8013f0e:	f003 fb7b 	bl	8017608 <rmw_service_response_publisher_get_actual_qos>
 8013f12:	4606      	mov	r6, r0
 8013f14:	b9b8      	cbnz	r0, 8013f46 <rcl_service_init+0xe6>
 8013f16:	6820      	ldr	r0, [r4, #0]
 8013f18:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8013f1c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8013f20:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8013f24:	2268      	movs	r2, #104	@ 0x68
 8013f26:	4629      	mov	r1, r5
 8013f28:	f007 f90f 	bl	801b14a <memcpy>
 8013f2c:	9807      	ldr	r0, [sp, #28]
 8013f2e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8013f30:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013f32:	4798      	blx	r3
 8013f34:	4630      	mov	r0, r6
 8013f36:	b009      	add	sp, #36	@ 0x24
 8013f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f3c:	26c8      	movs	r6, #200	@ 0xc8
 8013f3e:	4630      	mov	r0, r6
 8013f40:	b009      	add	sp, #36	@ 0x24
 8013f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f46:	6823      	ldr	r3, [r4, #0]
 8013f48:	b12b      	cbz	r3, 8013f56 <rcl_service_init+0xf6>
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8013f4e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013f50:	4790      	blx	r2
 8013f52:	2300      	movs	r3, #0
 8013f54:	6023      	str	r3, [r4, #0]
 8013f56:	2601      	movs	r6, #1
 8013f58:	e7e8      	b.n	8013f2c <rcl_service_init+0xcc>
 8013f5a:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	d903      	bls.n	8013f6a <rcl_service_init+0x10a>
 8013f62:	280a      	cmp	r0, #10
 8013f64:	d1f7      	bne.n	8013f56 <rcl_service_init+0xf6>
 8013f66:	260a      	movs	r6, #10
 8013f68:	e7e0      	b.n	8013f2c <rcl_service_init+0xcc>
 8013f6a:	2668      	movs	r6, #104	@ 0x68
 8013f6c:	e7de      	b.n	8013f2c <rcl_service_init+0xcc>
 8013f6e:	bf00      	nop

08013f70 <rcl_service_get_default_options>:
 8013f70:	b530      	push	{r4, r5, lr}
 8013f72:	4d0f      	ldr	r5, [pc, #60]	@ (8013fb0 <rcl_service_get_default_options+0x40>)
 8013f74:	490f      	ldr	r1, [pc, #60]	@ (8013fb4 <rcl_service_get_default_options+0x44>)
 8013f76:	b087      	sub	sp, #28
 8013f78:	4604      	mov	r4, r0
 8013f7a:	2250      	movs	r2, #80	@ 0x50
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	f007 f8e4 	bl	801b14a <memcpy>
 8013f82:	4668      	mov	r0, sp
 8013f84:	f7f8 fd36 	bl	800c9f4 <rcutils_get_default_allocator>
 8013f88:	46ec      	mov	ip, sp
 8013f8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f8e:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8013f92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f96:	2268      	movs	r2, #104	@ 0x68
 8013f98:	f8dc 3000 	ldr.w	r3, [ip]
 8013f9c:	f8ce 3000 	str.w	r3, [lr]
 8013fa0:	4629      	mov	r1, r5
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f007 f8d1 	bl	801b14a <memcpy>
 8013fa8:	4620      	mov	r0, r4
 8013faa:	b007      	add	sp, #28
 8013fac:	bd30      	pop	{r4, r5, pc}
 8013fae:	bf00      	nop
 8013fb0:	20015c18 	.word	0x20015c18
 8013fb4:	0801d050 	.word	0x0801d050

08013fb8 <rcl_service_get_rmw_handle>:
 8013fb8:	b118      	cbz	r0, 8013fc2 <rcl_service_get_rmw_handle+0xa>
 8013fba:	6800      	ldr	r0, [r0, #0]
 8013fbc:	b108      	cbz	r0, 8013fc2 <rcl_service_get_rmw_handle+0xa>
 8013fbe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013fc2:	4770      	bx	lr

08013fc4 <rcl_take_request>:
 8013fc4:	b570      	push	{r4, r5, r6, lr}
 8013fc6:	468e      	mov	lr, r1
 8013fc8:	460c      	mov	r4, r1
 8013fca:	4616      	mov	r6, r2
 8013fcc:	4605      	mov	r5, r0
 8013fce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013fd2:	b08c      	sub	sp, #48	@ 0x30
 8013fd4:	f10d 0c18 	add.w	ip, sp, #24
 8013fd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fdc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013fe0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013fe4:	b30d      	cbz	r5, 801402a <rcl_take_request+0x66>
 8013fe6:	682b      	ldr	r3, [r5, #0]
 8013fe8:	b1fb      	cbz	r3, 801402a <rcl_take_request+0x66>
 8013fea:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013fee:	b1e0      	cbz	r0, 801402a <rcl_take_request+0x66>
 8013ff0:	b336      	cbz	r6, 8014040 <rcl_take_request+0x7c>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	f88d 3007 	strb.w	r3, [sp, #7]
 8013ff8:	4632      	mov	r2, r6
 8013ffa:	f10d 0307 	add.w	r3, sp, #7
 8013ffe:	a902      	add	r1, sp, #8
 8014000:	f003 f8e8 	bl	80171d4 <rmw_take_request>
 8014004:	4605      	mov	r5, r0
 8014006:	b198      	cbz	r0, 8014030 <rcl_take_request+0x6c>
 8014008:	280a      	cmp	r0, #10
 801400a:	bf18      	it	ne
 801400c:	2501      	movne	r5, #1
 801400e:	f10d 0e18 	add.w	lr, sp, #24
 8014012:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014016:	46a4      	mov	ip, r4
 8014018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801401c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014020:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014024:	4628      	mov	r0, r5
 8014026:	b00c      	add	sp, #48	@ 0x30
 8014028:	bd70      	pop	{r4, r5, r6, pc}
 801402a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801402e:	e7ee      	b.n	801400e <rcl_take_request+0x4a>
 8014030:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014034:	f240 2359 	movw	r3, #601	@ 0x259
 8014038:	2a00      	cmp	r2, #0
 801403a:	bf08      	it	eq
 801403c:	461d      	moveq	r5, r3
 801403e:	e7e6      	b.n	801400e <rcl_take_request+0x4a>
 8014040:	250b      	movs	r5, #11
 8014042:	e7e4      	b.n	801400e <rcl_take_request+0x4a>

08014044 <rcl_send_response>:
 8014044:	b170      	cbz	r0, 8014064 <rcl_send_response+0x20>
 8014046:	6800      	ldr	r0, [r0, #0]
 8014048:	b160      	cbz	r0, 8014064 <rcl_send_response+0x20>
 801404a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801404e:	b148      	cbz	r0, 8014064 <rcl_send_response+0x20>
 8014050:	b159      	cbz	r1, 801406a <rcl_send_response+0x26>
 8014052:	b510      	push	{r4, lr}
 8014054:	b15a      	cbz	r2, 801406e <rcl_send_response+0x2a>
 8014056:	f003 f91b 	bl	8017290 <rmw_send_response>
 801405a:	b110      	cbz	r0, 8014062 <rcl_send_response+0x1e>
 801405c:	2802      	cmp	r0, #2
 801405e:	bf18      	it	ne
 8014060:	2001      	movne	r0, #1
 8014062:	bd10      	pop	{r4, pc}
 8014064:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014068:	4770      	bx	lr
 801406a:	200b      	movs	r0, #11
 801406c:	4770      	bx	lr
 801406e:	200b      	movs	r0, #11
 8014070:	bd10      	pop	{r4, pc}
 8014072:	bf00      	nop

08014074 <rcl_service_is_valid>:
 8014074:	b130      	cbz	r0, 8014084 <rcl_service_is_valid+0x10>
 8014076:	6800      	ldr	r0, [r0, #0]
 8014078:	b120      	cbz	r0, 8014084 <rcl_service_is_valid+0x10>
 801407a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801407e:	3800      	subs	r0, #0
 8014080:	bf18      	it	ne
 8014082:	2001      	movne	r0, #1
 8014084:	4770      	bx	lr
 8014086:	bf00      	nop

08014088 <rcl_get_zero_initialized_subscription>:
 8014088:	4b01      	ldr	r3, [pc, #4]	@ (8014090 <rcl_get_zero_initialized_subscription+0x8>)
 801408a:	6818      	ldr	r0, [r3, #0]
 801408c:	4770      	bx	lr
 801408e:	bf00      	nop
 8014090:	0801d0a0 	.word	0x0801d0a0

08014094 <rcl_subscription_init>:
 8014094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014098:	b089      	sub	sp, #36	@ 0x24
 801409a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801409c:	b1d6      	cbz	r6, 80140d4 <rcl_subscription_init+0x40>
 801409e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80140a2:	4604      	mov	r4, r0
 80140a4:	4648      	mov	r0, r9
 80140a6:	460d      	mov	r5, r1
 80140a8:	4690      	mov	r8, r2
 80140aa:	461f      	mov	r7, r3
 80140ac:	f7f8 fcb0 	bl	800ca10 <rcutils_allocator_is_valid>
 80140b0:	b180      	cbz	r0, 80140d4 <rcl_subscription_init+0x40>
 80140b2:	b17c      	cbz	r4, 80140d4 <rcl_subscription_init+0x40>
 80140b4:	4628      	mov	r0, r5
 80140b6:	f7ff fcd5 	bl	8013a64 <rcl_node_is_valid>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d054      	beq.n	8014168 <rcl_subscription_init+0xd4>
 80140be:	f1b8 0f00 	cmp.w	r8, #0
 80140c2:	d007      	beq.n	80140d4 <rcl_subscription_init+0x40>
 80140c4:	b137      	cbz	r7, 80140d4 <rcl_subscription_init+0x40>
 80140c6:	6823      	ldr	r3, [r4, #0]
 80140c8:	b14b      	cbz	r3, 80140de <rcl_subscription_init+0x4a>
 80140ca:	2764      	movs	r7, #100	@ 0x64
 80140cc:	4638      	mov	r0, r7
 80140ce:	b009      	add	sp, #36	@ 0x24
 80140d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140d4:	270b      	movs	r7, #11
 80140d6:	4638      	mov	r0, r7
 80140d8:	b009      	add	sp, #36	@ 0x24
 80140da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140de:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80140e2:	aa07      	add	r2, sp, #28
 80140e4:	9205      	str	r2, [sp, #20]
 80140e6:	9307      	str	r3, [sp, #28]
 80140e8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80140ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80140f4:	4639      	mov	r1, r7
 80140f6:	e899 000c 	ldmia.w	r9, {r2, r3}
 80140fa:	4628      	mov	r0, r5
 80140fc:	f7ff fd06 	bl	8013b0c <rcl_node_resolve_name>
 8014100:	4607      	mov	r7, r0
 8014102:	2800      	cmp	r0, #0
 8014104:	d15f      	bne.n	80141c6 <rcl_subscription_init+0x132>
 8014106:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801410a:	21c8      	movs	r1, #200	@ 0xc8
 801410c:	2001      	movs	r0, #1
 801410e:	4798      	blx	r3
 8014110:	6020      	str	r0, [r4, #0]
 8014112:	2800      	cmp	r0, #0
 8014114:	d05d      	beq.n	80141d2 <rcl_subscription_init+0x13e>
 8014116:	4628      	mov	r0, r5
 8014118:	f7ff fcc6 	bl	8013aa8 <rcl_node_get_rmw_handle>
 801411c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	9a07      	ldr	r2, [sp, #28]
 8014124:	6827      	ldr	r7, [r4, #0]
 8014126:	4641      	mov	r1, r8
 8014128:	4633      	mov	r3, r6
 801412a:	f003 fa8d 	bl	8017648 <rmw_create_subscription>
 801412e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8014132:	6827      	ldr	r7, [r4, #0]
 8014134:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8014138:	b348      	cbz	r0, 801418e <rcl_subscription_init+0xfa>
 801413a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801413e:	f003 fb65 	bl	801780c <rmw_subscription_get_actual_qos>
 8014142:	4607      	mov	r7, r0
 8014144:	b9a8      	cbnz	r0, 8014172 <rcl_subscription_init+0xde>
 8014146:	6820      	ldr	r0, [r4, #0]
 8014148:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 801414c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8014150:	2270      	movs	r2, #112	@ 0x70
 8014152:	4631      	mov	r1, r6
 8014154:	f006 fff9 	bl	801b14a <memcpy>
 8014158:	9807      	ldr	r0, [sp, #28]
 801415a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801415c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801415e:	4798      	blx	r3
 8014160:	4638      	mov	r0, r7
 8014162:	b009      	add	sp, #36	@ 0x24
 8014164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014168:	27c8      	movs	r7, #200	@ 0xc8
 801416a:	4638      	mov	r0, r7
 801416c:	b009      	add	sp, #36	@ 0x24
 801416e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014172:	6827      	ldr	r7, [r4, #0]
 8014174:	b32f      	cbz	r7, 80141c2 <rcl_subscription_init+0x12e>
 8014176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801417a:	b14b      	cbz	r3, 8014190 <rcl_subscription_init+0xfc>
 801417c:	4628      	mov	r0, r5
 801417e:	f7ff fc93 	bl	8013aa8 <rcl_node_get_rmw_handle>
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8014188:	f003 fb50 	bl	801782c <rmw_destroy_subscription>
 801418c:	6827      	ldr	r7, [r4, #0]
 801418e:	b197      	cbz	r7, 80141b6 <rcl_subscription_init+0x122>
 8014190:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8014194:	4628      	mov	r0, r5
 8014196:	f7f8 fc3b 	bl	800ca10 <rcutils_allocator_is_valid>
 801419a:	b158      	cbz	r0, 80141b4 <rcl_subscription_init+0x120>
 801419c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801419e:	b148      	cbz	r0, 80141b4 <rcl_subscription_init+0x120>
 80141a0:	4629      	mov	r1, r5
 80141a2:	f002 f989 	bl	80164b8 <rmw_subscription_content_filter_options_fini>
 80141a6:	4605      	mov	r5, r0
 80141a8:	b9b8      	cbnz	r0, 80141da <rcl_subscription_init+0x146>
 80141aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80141ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80141b0:	4798      	blx	r3
 80141b2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80141b4:	6827      	ldr	r7, [r4, #0]
 80141b6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80141b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80141ba:	4638      	mov	r0, r7
 80141bc:	4798      	blx	r3
 80141be:	2300      	movs	r3, #0
 80141c0:	6023      	str	r3, [r4, #0]
 80141c2:	2701      	movs	r7, #1
 80141c4:	e7c8      	b.n	8014158 <rcl_subscription_init+0xc4>
 80141c6:	2867      	cmp	r0, #103	@ 0x67
 80141c8:	d0c6      	beq.n	8014158 <rcl_subscription_init+0xc4>
 80141ca:	2869      	cmp	r0, #105	@ 0x69
 80141cc:	d003      	beq.n	80141d6 <rcl_subscription_init+0x142>
 80141ce:	280a      	cmp	r0, #10
 80141d0:	d1f7      	bne.n	80141c2 <rcl_subscription_init+0x12e>
 80141d2:	270a      	movs	r7, #10
 80141d4:	e7c0      	b.n	8014158 <rcl_subscription_init+0xc4>
 80141d6:	2767      	movs	r7, #103	@ 0x67
 80141d8:	e7be      	b.n	8014158 <rcl_subscription_init+0xc4>
 80141da:	f7ff f84b 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 80141de:	6827      	ldr	r7, [r4, #0]
 80141e0:	e7e9      	b.n	80141b6 <rcl_subscription_init+0x122>
 80141e2:	bf00      	nop

080141e4 <rcl_subscription_get_default_options>:
 80141e4:	b570      	push	{r4, r5, r6, lr}
 80141e6:	4d14      	ldr	r5, [pc, #80]	@ (8014238 <rcl_subscription_get_default_options+0x54>)
 80141e8:	4914      	ldr	r1, [pc, #80]	@ (801423c <rcl_subscription_get_default_options+0x58>)
 80141ea:	b08a      	sub	sp, #40	@ 0x28
 80141ec:	4604      	mov	r4, r0
 80141ee:	2250      	movs	r2, #80	@ 0x50
 80141f0:	4628      	mov	r0, r5
 80141f2:	f006 ffaa 	bl	801b14a <memcpy>
 80141f6:	a804      	add	r0, sp, #16
 80141f8:	f7f8 fbfc 	bl	800c9f4 <rcutils_get_default_allocator>
 80141fc:	f10d 0c10 	add.w	ip, sp, #16
 8014200:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014204:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014208:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801420c:	466e      	mov	r6, sp
 801420e:	f8dc 3000 	ldr.w	r3, [ip]
 8014212:	f8ce 3000 	str.w	r3, [lr]
 8014216:	4630      	mov	r0, r6
 8014218:	f002 f968 	bl	80164ec <rmw_get_default_subscription_options>
 801421c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014220:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8014224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014228:	2270      	movs	r2, #112	@ 0x70
 801422a:	4629      	mov	r1, r5
 801422c:	4620      	mov	r0, r4
 801422e:	f006 ff8c 	bl	801b14a <memcpy>
 8014232:	4620      	mov	r0, r4
 8014234:	b00a      	add	sp, #40	@ 0x28
 8014236:	bd70      	pop	{r4, r5, r6, pc}
 8014238:	20015c80 	.word	0x20015c80
 801423c:	0801d0a8 	.word	0x0801d0a8

08014240 <rcl_take>:
 8014240:	2800      	cmp	r0, #0
 8014242:	d04a      	beq.n	80142da <rcl_take+0x9a>
 8014244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014248:	4604      	mov	r4, r0
 801424a:	6800      	ldr	r0, [r0, #0]
 801424c:	b0a4      	sub	sp, #144	@ 0x90
 801424e:	2800      	cmp	r0, #0
 8014250:	d03b      	beq.n	80142ca <rcl_take+0x8a>
 8014252:	461f      	mov	r7, r3
 8014254:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d036      	beq.n	80142ca <rcl_take+0x8a>
 801425c:	460e      	mov	r6, r1
 801425e:	2900      	cmp	r1, #0
 8014260:	d039      	beq.n	80142d6 <rcl_take+0x96>
 8014262:	4615      	mov	r5, r2
 8014264:	2a00      	cmp	r2, #0
 8014266:	d03c      	beq.n	80142e2 <rcl_take+0xa2>
 8014268:	a802      	add	r0, sp, #8
 801426a:	f002 f9c9 	bl	8016600 <rmw_get_zero_initialized_message_info>
 801426e:	f10d 0c08 	add.w	ip, sp, #8
 8014272:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014276:	46ae      	mov	lr, r5
 8014278:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801427c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014280:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014288:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801428c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014290:	f04f 0800 	mov.w	r8, #0
 8014294:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014298:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801429c:	6822      	ldr	r2, [r4, #0]
 801429e:	462b      	mov	r3, r5
 80142a0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80142a4:	9700      	str	r7, [sp, #0]
 80142a6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80142aa:	4631      	mov	r1, r6
 80142ac:	f003 fb1e 	bl	80178ec <rmw_take_with_info>
 80142b0:	4603      	mov	r3, r0
 80142b2:	b9c0      	cbnz	r0, 80142e6 <rcl_take+0xa6>
 80142b4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80142b8:	f240 1291 	movw	r2, #401	@ 0x191
 80142bc:	2900      	cmp	r1, #0
 80142be:	bf08      	it	eq
 80142c0:	4613      	moveq	r3, r2
 80142c2:	4618      	mov	r0, r3
 80142c4:	b024      	add	sp, #144	@ 0x90
 80142c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142ca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80142ce:	4618      	mov	r0, r3
 80142d0:	b024      	add	sp, #144	@ 0x90
 80142d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d6:	230b      	movs	r3, #11
 80142d8:	e7f3      	b.n	80142c2 <rcl_take+0x82>
 80142da:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80142de:	4618      	mov	r0, r3
 80142e0:	4770      	bx	lr
 80142e2:	ad14      	add	r5, sp, #80	@ 0x50
 80142e4:	e7c0      	b.n	8014268 <rcl_take+0x28>
 80142e6:	f7fe ffc5 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 80142ea:	4603      	mov	r3, r0
 80142ec:	e7e9      	b.n	80142c2 <rcl_take+0x82>
 80142ee:	bf00      	nop

080142f0 <rcl_subscription_get_rmw_handle>:
 80142f0:	b118      	cbz	r0, 80142fa <rcl_subscription_get_rmw_handle+0xa>
 80142f2:	6800      	ldr	r0, [r0, #0]
 80142f4:	b108      	cbz	r0, 80142fa <rcl_subscription_get_rmw_handle+0xa>
 80142f6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80142fa:	4770      	bx	lr

080142fc <rcl_subscription_is_valid>:
 80142fc:	b130      	cbz	r0, 801430c <rcl_subscription_is_valid+0x10>
 80142fe:	6800      	ldr	r0, [r0, #0]
 8014300:	b120      	cbz	r0, 801430c <rcl_subscription_is_valid+0x10>
 8014302:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014306:	3800      	subs	r0, #0
 8014308:	bf18      	it	ne
 801430a:	2001      	movne	r0, #1
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop

08014310 <rcl_get_system_time>:
 8014310:	4608      	mov	r0, r1
 8014312:	f7f8 bbbd 	b.w	800ca90 <rcutils_system_time_now>
 8014316:	bf00      	nop

08014318 <rcl_get_steady_time>:
 8014318:	4608      	mov	r0, r1
 801431a:	f7f8 bbe1 	b.w	800cae0 <rcutils_steady_time_now>
 801431e:	bf00      	nop

08014320 <rcl_get_ros_time>:
 8014320:	7a03      	ldrb	r3, [r0, #8]
 8014322:	b510      	push	{r4, lr}
 8014324:	460c      	mov	r4, r1
 8014326:	b133      	cbz	r3, 8014336 <rcl_get_ros_time+0x16>
 8014328:	2105      	movs	r1, #5
 801432a:	f001 fd51 	bl	8015dd0 <__atomic_load_8>
 801432e:	e9c4 0100 	strd	r0, r1, [r4]
 8014332:	2000      	movs	r0, #0
 8014334:	bd10      	pop	{r4, pc}
 8014336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801433a:	4608      	mov	r0, r1
 801433c:	f7f8 bba8 	b.w	800ca90 <rcutils_system_time_now>

08014340 <rcl_clock_init>:
 8014340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014342:	4605      	mov	r5, r0
 8014344:	4610      	mov	r0, r2
 8014346:	4614      	mov	r4, r2
 8014348:	460e      	mov	r6, r1
 801434a:	f7f8 fb61 	bl	800ca10 <rcutils_allocator_is_valid>
 801434e:	b128      	cbz	r0, 801435c <rcl_clock_init+0x1c>
 8014350:	2d03      	cmp	r5, #3
 8014352:	d803      	bhi.n	801435c <rcl_clock_init+0x1c>
 8014354:	e8df f005 	tbb	[pc, r5]
 8014358:	06532e1d 	.word	0x06532e1d
 801435c:	f04f 0c0b 	mov.w	ip, #11
 8014360:	4660      	mov	r0, ip
 8014362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014364:	2e00      	cmp	r6, #0
 8014366:	d0f9      	beq.n	801435c <rcl_clock_init+0x1c>
 8014368:	2c00      	cmp	r4, #0
 801436a:	d0f7      	beq.n	801435c <rcl_clock_init+0x1c>
 801436c:	2300      	movs	r3, #0
 801436e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014372:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8014428 <rcl_clock_init+0xe8>
 8014376:	6133      	str	r3, [r6, #16]
 8014378:	f106 0514 	add.w	r5, r6, #20
 801437c:	469c      	mov	ip, r3
 801437e:	2703      	movs	r7, #3
 8014380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014384:	6823      	ldr	r3, [r4, #0]
 8014386:	602b      	str	r3, [r5, #0]
 8014388:	7037      	strb	r7, [r6, #0]
 801438a:	f8c6 e00c 	str.w	lr, [r6, #12]
 801438e:	4660      	mov	r0, ip
 8014390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014392:	2e00      	cmp	r6, #0
 8014394:	d0e2      	beq.n	801435c <rcl_clock_init+0x1c>
 8014396:	2300      	movs	r3, #0
 8014398:	7033      	strb	r3, [r6, #0]
 801439a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801439e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80143a2:	469c      	mov	ip, r3
 80143a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80143a6:	f106 0514 	add.w	r5, r6, #20
 80143aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80143ac:	6823      	ldr	r3, [r4, #0]
 80143ae:	602b      	str	r3, [r5, #0]
 80143b0:	4660      	mov	r0, ip
 80143b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b4:	2e00      	cmp	r6, #0
 80143b6:	d0d1      	beq.n	801435c <rcl_clock_init+0x1c>
 80143b8:	2c00      	cmp	r4, #0
 80143ba:	d0cf      	beq.n	801435c <rcl_clock_init+0x1c>
 80143bc:	2700      	movs	r7, #0
 80143be:	7037      	strb	r7, [r6, #0]
 80143c0:	46a4      	mov	ip, r4
 80143c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143c6:	f106 0514 	add.w	r5, r6, #20
 80143ca:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80143ce:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80143d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80143d4:	f8dc 3000 	ldr.w	r3, [ip]
 80143d8:	602b      	str	r3, [r5, #0]
 80143da:	6921      	ldr	r1, [r4, #16]
 80143dc:	6823      	ldr	r3, [r4, #0]
 80143de:	2010      	movs	r0, #16
 80143e0:	4798      	blx	r3
 80143e2:	6130      	str	r0, [r6, #16]
 80143e4:	b1d0      	cbz	r0, 801441c <rcl_clock_init+0xdc>
 80143e6:	2200      	movs	r2, #0
 80143e8:	2300      	movs	r3, #0
 80143ea:	e9c0 2300 	strd	r2, r3, [r0]
 80143ee:	2301      	movs	r3, #1
 80143f0:	7207      	strb	r7, [r0, #8]
 80143f2:	4a0c      	ldr	r2, [pc, #48]	@ (8014424 <rcl_clock_init+0xe4>)
 80143f4:	7033      	strb	r3, [r6, #0]
 80143f6:	46bc      	mov	ip, r7
 80143f8:	60f2      	str	r2, [r6, #12]
 80143fa:	4660      	mov	r0, ip
 80143fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143fe:	2e00      	cmp	r6, #0
 8014400:	d0ac      	beq.n	801435c <rcl_clock_init+0x1c>
 8014402:	2c00      	cmp	r4, #0
 8014404:	d0aa      	beq.n	801435c <rcl_clock_init+0x1c>
 8014406:	2300      	movs	r3, #0
 8014408:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801440c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 801442c <rcl_clock_init+0xec>
 8014410:	6133      	str	r3, [r6, #16]
 8014412:	f106 0514 	add.w	r5, r6, #20
 8014416:	469c      	mov	ip, r3
 8014418:	2702      	movs	r7, #2
 801441a:	e7b1      	b.n	8014380 <rcl_clock_init+0x40>
 801441c:	f04f 0c0a 	mov.w	ip, #10
 8014420:	e79e      	b.n	8014360 <rcl_clock_init+0x20>
 8014422:	bf00      	nop
 8014424:	08014321 	.word	0x08014321
 8014428:	08014319 	.word	0x08014319
 801442c:	08014311 	.word	0x08014311

08014430 <rcl_clock_get_now>:
 8014430:	b140      	cbz	r0, 8014444 <rcl_clock_get_now+0x14>
 8014432:	b139      	cbz	r1, 8014444 <rcl_clock_get_now+0x14>
 8014434:	7803      	ldrb	r3, [r0, #0]
 8014436:	b11b      	cbz	r3, 8014440 <rcl_clock_get_now+0x10>
 8014438:	68c3      	ldr	r3, [r0, #12]
 801443a:	b10b      	cbz	r3, 8014440 <rcl_clock_get_now+0x10>
 801443c:	6900      	ldr	r0, [r0, #16]
 801443e:	4718      	bx	r3
 8014440:	2001      	movs	r0, #1
 8014442:	4770      	bx	lr
 8014444:	200b      	movs	r0, #11
 8014446:	4770      	bx	lr

08014448 <rcl_timer_call>:
 8014448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444c:	b087      	sub	sp, #28
 801444e:	2800      	cmp	r0, #0
 8014450:	d06d      	beq.n	801452e <rcl_timer_call+0xe6>
 8014452:	6803      	ldr	r3, [r0, #0]
 8014454:	4604      	mov	r4, r0
 8014456:	2b00      	cmp	r3, #0
 8014458:	d063      	beq.n	8014522 <rcl_timer_call+0xda>
 801445a:	f3bf 8f5b 	dmb	ish
 801445e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014462:	f3bf 8f5b 	dmb	ish
 8014466:	2b00      	cmp	r3, #0
 8014468:	d150      	bne.n	801450c <rcl_timer_call+0xc4>
 801446a:	6803      	ldr	r3, [r0, #0]
 801446c:	a904      	add	r1, sp, #16
 801446e:	6818      	ldr	r0, [r3, #0]
 8014470:	f7ff ffde 	bl	8014430 <rcl_clock_get_now>
 8014474:	4605      	mov	r5, r0
 8014476:	2800      	cmp	r0, #0
 8014478:	d14a      	bne.n	8014510 <rcl_timer_call+0xc8>
 801447a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801447e:	2b00      	cmp	r3, #0
 8014480:	db4a      	blt.n	8014518 <rcl_timer_call+0xd0>
 8014482:	6820      	ldr	r0, [r4, #0]
 8014484:	f04f 0a05 	mov.w	sl, #5
 8014488:	f8cd a000 	str.w	sl, [sp]
 801448c:	3020      	adds	r0, #32
 801448e:	f001 fd0b 	bl	8015ea8 <__atomic_exchange_8>
 8014492:	6823      	ldr	r3, [r4, #0]
 8014494:	f3bf 8f5b 	dmb	ish
 8014498:	4680      	mov	r8, r0
 801449a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801449e:	f3bf 8f5b 	dmb	ish
 80144a2:	6820      	ldr	r0, [r4, #0]
 80144a4:	4689      	mov	r9, r1
 80144a6:	3028      	adds	r0, #40	@ 0x28
 80144a8:	4651      	mov	r1, sl
 80144aa:	f001 fc91 	bl	8015dd0 <__atomic_load_8>
 80144ae:	4606      	mov	r6, r0
 80144b0:	6820      	ldr	r0, [r4, #0]
 80144b2:	460f      	mov	r7, r1
 80144b4:	3018      	adds	r0, #24
 80144b6:	4651      	mov	r1, sl
 80144b8:	f001 fc8a 	bl	8015dd0 <__atomic_load_8>
 80144bc:	1836      	adds	r6, r6, r0
 80144be:	4602      	mov	r2, r0
 80144c0:	4682      	mov	sl, r0
 80144c2:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80144c6:	eb47 0701 	adc.w	r7, r7, r1
 80144ca:	4286      	cmp	r6, r0
 80144cc:	460b      	mov	r3, r1
 80144ce:	eb77 010c 	sbcs.w	r1, r7, ip
 80144d2:	da04      	bge.n	80144de <rcl_timer_call+0x96>
 80144d4:	ea53 0102 	orrs.w	r1, r3, r2
 80144d8:	d12e      	bne.n	8014538 <rcl_timer_call+0xf0>
 80144da:	4606      	mov	r6, r0
 80144dc:	4667      	mov	r7, ip
 80144de:	6820      	ldr	r0, [r4, #0]
 80144e0:	2105      	movs	r1, #5
 80144e2:	4632      	mov	r2, r6
 80144e4:	463b      	mov	r3, r7
 80144e6:	3028      	adds	r0, #40	@ 0x28
 80144e8:	9100      	str	r1, [sp, #0]
 80144ea:	f001 fca7 	bl	8015e3c <__atomic_store_8>
 80144ee:	f1bb 0f00 	cmp.w	fp, #0
 80144f2:	d00d      	beq.n	8014510 <rcl_timer_call+0xc8>
 80144f4:	9a04      	ldr	r2, [sp, #16]
 80144f6:	9b05      	ldr	r3, [sp, #20]
 80144f8:	ebb2 0208 	subs.w	r2, r2, r8
 80144fc:	4620      	mov	r0, r4
 80144fe:	eb63 0309 	sbc.w	r3, r3, r9
 8014502:	47d8      	blx	fp
 8014504:	4628      	mov	r0, r5
 8014506:	b007      	add	sp, #28
 8014508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801450c:	f240 3521 	movw	r5, #801	@ 0x321
 8014510:	4628      	mov	r0, r5
 8014512:	b007      	add	sp, #28
 8014514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014518:	2501      	movs	r5, #1
 801451a:	4628      	mov	r0, r5
 801451c:	b007      	add	sp, #28
 801451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014522:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8014526:	4628      	mov	r0, r5
 8014528:	b007      	add	sp, #28
 801452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801452e:	250b      	movs	r5, #11
 8014530:	4628      	mov	r0, r5
 8014532:	b007      	add	sp, #28
 8014534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014538:	1b80      	subs	r0, r0, r6
 801453a:	eb6c 0107 	sbc.w	r1, ip, r7
 801453e:	3801      	subs	r0, #1
 8014540:	f161 0100 	sbc.w	r1, r1, #0
 8014544:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014548:	f7ec fb68 	bl	8000c1c <__aeabi_ldivmod>
 801454c:	9b02      	ldr	r3, [sp, #8]
 801454e:	3001      	adds	r0, #1
 8014550:	f141 0100 	adc.w	r1, r1, #0
 8014554:	fb00 f303 	mul.w	r3, r0, r3
 8014558:	fb01 330a 	mla	r3, r1, sl, r3
 801455c:	fba0 0a0a 	umull	r0, sl, r0, sl
 8014560:	1986      	adds	r6, r0, r6
 8014562:	4453      	add	r3, sl
 8014564:	eb43 0707 	adc.w	r7, r3, r7
 8014568:	e7b9      	b.n	80144de <rcl_timer_call+0x96>
 801456a:	bf00      	nop

0801456c <rcl_timer_is_ready>:
 801456c:	b570      	push	{r4, r5, r6, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	b378      	cbz	r0, 80145d2 <rcl_timer_is_ready+0x66>
 8014572:	6803      	ldr	r3, [r0, #0]
 8014574:	4604      	mov	r4, r0
 8014576:	b383      	cbz	r3, 80145da <rcl_timer_is_ready+0x6e>
 8014578:	460d      	mov	r5, r1
 801457a:	b351      	cbz	r1, 80145d2 <rcl_timer_is_ready+0x66>
 801457c:	f3bf 8f5b 	dmb	ish
 8014580:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014584:	f3bf 8f5b 	dmb	ish
 8014588:	b953      	cbnz	r3, 80145a0 <rcl_timer_is_ready+0x34>
 801458a:	6803      	ldr	r3, [r0, #0]
 801458c:	4669      	mov	r1, sp
 801458e:	6818      	ldr	r0, [r3, #0]
 8014590:	f7ff ff4e 	bl	8014430 <rcl_clock_get_now>
 8014594:	4606      	mov	r6, r0
 8014596:	b140      	cbz	r0, 80145aa <rcl_timer_is_ready+0x3e>
 8014598:	f240 3321 	movw	r3, #801	@ 0x321
 801459c:	4298      	cmp	r0, r3
 801459e:	d101      	bne.n	80145a4 <rcl_timer_is_ready+0x38>
 80145a0:	2600      	movs	r6, #0
 80145a2:	702e      	strb	r6, [r5, #0]
 80145a4:	4630      	mov	r0, r6
 80145a6:	b002      	add	sp, #8
 80145a8:	bd70      	pop	{r4, r5, r6, pc}
 80145aa:	6820      	ldr	r0, [r4, #0]
 80145ac:	2105      	movs	r1, #5
 80145ae:	3028      	adds	r0, #40	@ 0x28
 80145b0:	f001 fc0e 	bl	8015dd0 <__atomic_load_8>
 80145b4:	9b00      	ldr	r3, [sp, #0]
 80145b6:	1ac0      	subs	r0, r0, r3
 80145b8:	9b01      	ldr	r3, [sp, #4]
 80145ba:	eb61 0103 	sbc.w	r1, r1, r3
 80145be:	2801      	cmp	r0, #1
 80145c0:	f171 0300 	sbcs.w	r3, r1, #0
 80145c4:	bfb4      	ite	lt
 80145c6:	2301      	movlt	r3, #1
 80145c8:	2300      	movge	r3, #0
 80145ca:	4630      	mov	r0, r6
 80145cc:	702b      	strb	r3, [r5, #0]
 80145ce:	b002      	add	sp, #8
 80145d0:	bd70      	pop	{r4, r5, r6, pc}
 80145d2:	260b      	movs	r6, #11
 80145d4:	4630      	mov	r0, r6
 80145d6:	b002      	add	sp, #8
 80145d8:	bd70      	pop	{r4, r5, r6, pc}
 80145da:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80145de:	e7e1      	b.n	80145a4 <rcl_timer_is_ready+0x38>

080145e0 <rcl_timer_get_time_until_next_call>:
 80145e0:	b570      	push	{r4, r5, r6, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	b330      	cbz	r0, 8014634 <rcl_timer_get_time_until_next_call+0x54>
 80145e6:	6803      	ldr	r3, [r0, #0]
 80145e8:	4604      	mov	r4, r0
 80145ea:	b33b      	cbz	r3, 801463c <rcl_timer_get_time_until_next_call+0x5c>
 80145ec:	460d      	mov	r5, r1
 80145ee:	b309      	cbz	r1, 8014634 <rcl_timer_get_time_until_next_call+0x54>
 80145f0:	f3bf 8f5b 	dmb	ish
 80145f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80145f8:	f3bf 8f5b 	dmb	ish
 80145fc:	b9ab      	cbnz	r3, 801462a <rcl_timer_get_time_until_next_call+0x4a>
 80145fe:	6803      	ldr	r3, [r0, #0]
 8014600:	4669      	mov	r1, sp
 8014602:	6818      	ldr	r0, [r3, #0]
 8014604:	f7ff ff14 	bl	8014430 <rcl_clock_get_now>
 8014608:	4606      	mov	r6, r0
 801460a:	b958      	cbnz	r0, 8014624 <rcl_timer_get_time_until_next_call+0x44>
 801460c:	6820      	ldr	r0, [r4, #0]
 801460e:	2105      	movs	r1, #5
 8014610:	3028      	adds	r0, #40	@ 0x28
 8014612:	f001 fbdd 	bl	8015dd0 <__atomic_load_8>
 8014616:	9b00      	ldr	r3, [sp, #0]
 8014618:	1ac0      	subs	r0, r0, r3
 801461a:	9b01      	ldr	r3, [sp, #4]
 801461c:	6028      	str	r0, [r5, #0]
 801461e:	eb61 0103 	sbc.w	r1, r1, r3
 8014622:	6069      	str	r1, [r5, #4]
 8014624:	4630      	mov	r0, r6
 8014626:	b002      	add	sp, #8
 8014628:	bd70      	pop	{r4, r5, r6, pc}
 801462a:	f240 3621 	movw	r6, #801	@ 0x321
 801462e:	4630      	mov	r0, r6
 8014630:	b002      	add	sp, #8
 8014632:	bd70      	pop	{r4, r5, r6, pc}
 8014634:	260b      	movs	r6, #11
 8014636:	4630      	mov	r0, r6
 8014638:	b002      	add	sp, #8
 801463a:	bd70      	pop	{r4, r5, r6, pc}
 801463c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014640:	e7f0      	b.n	8014624 <rcl_timer_get_time_until_next_call+0x44>
 8014642:	bf00      	nop

08014644 <rcl_timer_get_guard_condition>:
 8014644:	b130      	cbz	r0, 8014654 <rcl_timer_get_guard_condition+0x10>
 8014646:	6800      	ldr	r0, [r0, #0]
 8014648:	b120      	cbz	r0, 8014654 <rcl_timer_get_guard_condition+0x10>
 801464a:	68c3      	ldr	r3, [r0, #12]
 801464c:	b10b      	cbz	r3, 8014652 <rcl_timer_get_guard_condition+0xe>
 801464e:	3008      	adds	r0, #8
 8014650:	4770      	bx	lr
 8014652:	4618      	mov	r0, r3
 8014654:	4770      	bx	lr
 8014656:	bf00      	nop

08014658 <rcl_validate_enclave_name_with_size>:
 8014658:	b378      	cbz	r0, 80146ba <rcl_validate_enclave_name_with_size+0x62>
 801465a:	b570      	push	{r4, r5, r6, lr}
 801465c:	4615      	mov	r5, r2
 801465e:	b0c2      	sub	sp, #264	@ 0x108
 8014660:	b302      	cbz	r2, 80146a4 <rcl_validate_enclave_name_with_size+0x4c>
 8014662:	461e      	mov	r6, r3
 8014664:	466a      	mov	r2, sp
 8014666:	ab01      	add	r3, sp, #4
 8014668:	460c      	mov	r4, r1
 801466a:	f002 f847 	bl	80166fc <rmw_validate_namespace_with_size>
 801466e:	4684      	mov	ip, r0
 8014670:	b9e8      	cbnz	r0, 80146ae <rcl_validate_enclave_name_with_size+0x56>
 8014672:	9b00      	ldr	r3, [sp, #0]
 8014674:	b923      	cbnz	r3, 8014680 <rcl_validate_enclave_name_with_size+0x28>
 8014676:	2300      	movs	r3, #0
 8014678:	602b      	str	r3, [r5, #0]
 801467a:	4660      	mov	r0, ip
 801467c:	b042      	add	sp, #264	@ 0x108
 801467e:	bd70      	pop	{r4, r5, r6, pc}
 8014680:	2b07      	cmp	r3, #7
 8014682:	d007      	beq.n	8014694 <rcl_validate_enclave_name_with_size+0x3c>
 8014684:	1e5a      	subs	r2, r3, #1
 8014686:	2a05      	cmp	r2, #5
 8014688:	d833      	bhi.n	80146f2 <rcl_validate_enclave_name_with_size+0x9a>
 801468a:	e8df f002 	tbb	[pc, r2]
 801468e:	2c2f      	.short	0x2c2f
 8014690:	1a232629 	.word	0x1a232629
 8014694:	2cff      	cmp	r4, #255	@ 0xff
 8014696:	d9ee      	bls.n	8014676 <rcl_validate_enclave_name_with_size+0x1e>
 8014698:	602b      	str	r3, [r5, #0]
 801469a:	2e00      	cmp	r6, #0
 801469c:	d0ed      	beq.n	801467a <rcl_validate_enclave_name_with_size+0x22>
 801469e:	23fe      	movs	r3, #254	@ 0xfe
 80146a0:	6033      	str	r3, [r6, #0]
 80146a2:	e7ea      	b.n	801467a <rcl_validate_enclave_name_with_size+0x22>
 80146a4:	f04f 0c0b 	mov.w	ip, #11
 80146a8:	4660      	mov	r0, ip
 80146aa:	b042      	add	sp, #264	@ 0x108
 80146ac:	bd70      	pop	{r4, r5, r6, pc}
 80146ae:	f7fe fde1 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 80146b2:	4684      	mov	ip, r0
 80146b4:	4660      	mov	r0, ip
 80146b6:	b042      	add	sp, #264	@ 0x108
 80146b8:	bd70      	pop	{r4, r5, r6, pc}
 80146ba:	f04f 0c0b 	mov.w	ip, #11
 80146be:	4660      	mov	r0, ip
 80146c0:	4770      	bx	lr
 80146c2:	2306      	movs	r3, #6
 80146c4:	602b      	str	r3, [r5, #0]
 80146c6:	2e00      	cmp	r6, #0
 80146c8:	d0d7      	beq.n	801467a <rcl_validate_enclave_name_with_size+0x22>
 80146ca:	9b01      	ldr	r3, [sp, #4]
 80146cc:	6033      	str	r3, [r6, #0]
 80146ce:	4660      	mov	r0, ip
 80146d0:	b042      	add	sp, #264	@ 0x108
 80146d2:	bd70      	pop	{r4, r5, r6, pc}
 80146d4:	2305      	movs	r3, #5
 80146d6:	602b      	str	r3, [r5, #0]
 80146d8:	e7f5      	b.n	80146c6 <rcl_validate_enclave_name_with_size+0x6e>
 80146da:	2304      	movs	r3, #4
 80146dc:	602b      	str	r3, [r5, #0]
 80146de:	e7f2      	b.n	80146c6 <rcl_validate_enclave_name_with_size+0x6e>
 80146e0:	2303      	movs	r3, #3
 80146e2:	602b      	str	r3, [r5, #0]
 80146e4:	e7ef      	b.n	80146c6 <rcl_validate_enclave_name_with_size+0x6e>
 80146e6:	2302      	movs	r3, #2
 80146e8:	602b      	str	r3, [r5, #0]
 80146ea:	e7ec      	b.n	80146c6 <rcl_validate_enclave_name_with_size+0x6e>
 80146ec:	2301      	movs	r3, #1
 80146ee:	602b      	str	r3, [r5, #0]
 80146f0:	e7e9      	b.n	80146c6 <rcl_validate_enclave_name_with_size+0x6e>
 80146f2:	4a04      	ldr	r2, [pc, #16]	@ (8014704 <rcl_validate_enclave_name_with_size+0xac>)
 80146f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80146f8:	a802      	add	r0, sp, #8
 80146fa:	f001 fd23 	bl	8016144 <rcutils_snprintf>
 80146fe:	f04f 0c01 	mov.w	ip, #1
 8014702:	e7ba      	b.n	801467a <rcl_validate_enclave_name_with_size+0x22>
 8014704:	0801d0f8 	.word	0x0801d0f8

08014708 <rcl_validate_enclave_name>:
 8014708:	b168      	cbz	r0, 8014726 <rcl_validate_enclave_name+0x1e>
 801470a:	b570      	push	{r4, r5, r6, lr}
 801470c:	460d      	mov	r5, r1
 801470e:	4616      	mov	r6, r2
 8014710:	4604      	mov	r4, r0
 8014712:	f7eb fd75 	bl	8000200 <strlen>
 8014716:	4633      	mov	r3, r6
 8014718:	4601      	mov	r1, r0
 801471a:	462a      	mov	r2, r5
 801471c:	4620      	mov	r0, r4
 801471e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014722:	f7ff bf99 	b.w	8014658 <rcl_validate_enclave_name_with_size>
 8014726:	200b      	movs	r0, #11
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop

0801472c <rcl_get_zero_initialized_wait_set>:
 801472c:	b510      	push	{r4, lr}
 801472e:	4c08      	ldr	r4, [pc, #32]	@ (8014750 <rcl_get_zero_initialized_wait_set+0x24>)
 8014730:	4686      	mov	lr, r0
 8014732:	4684      	mov	ip, r0
 8014734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014736:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801473a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801473c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014746:	6823      	ldr	r3, [r4, #0]
 8014748:	f8cc 3000 	str.w	r3, [ip]
 801474c:	4670      	mov	r0, lr
 801474e:	bd10      	pop	{r4, pc}
 8014750:	0801d158 	.word	0x0801d158

08014754 <rcl_wait_set_is_valid>:
 8014754:	b118      	cbz	r0, 801475e <rcl_wait_set_is_valid+0xa>
 8014756:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8014758:	3800      	subs	r0, #0
 801475a:	bf18      	it	ne
 801475c:	2001      	movne	r0, #1
 801475e:	4770      	bx	lr

08014760 <rcl_wait_set_fini>:
 8014760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014764:	b082      	sub	sp, #8
 8014766:	2800      	cmp	r0, #0
 8014768:	f000 8095 	beq.w	8014896 <rcl_wait_set_fini+0x136>
 801476c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801476e:	4604      	mov	r4, r0
 8014770:	2e00      	cmp	r6, #0
 8014772:	f000 808c 	beq.w	801488e <rcl_wait_set_fini+0x12e>
 8014776:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8014778:	f003 faa6 	bl	8017cc8 <rmw_destroy_wait_set>
 801477c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801477e:	1e06      	subs	r6, r0, #0
 8014780:	bf18      	it	ne
 8014782:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8014786:	2d00      	cmp	r5, #0
 8014788:	f000 8081 	beq.w	801488e <rcl_wait_set_fini+0x12e>
 801478c:	6820      	ldr	r0, [r4, #0]
 801478e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014792:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014794:	2700      	movs	r7, #0
 8014796:	6067      	str	r7, [r4, #4]
 8014798:	602f      	str	r7, [r5, #0]
 801479a:	b120      	cbz	r0, 80147a6 <rcl_wait_set_fini+0x46>
 801479c:	9101      	str	r1, [sp, #4]
 801479e:	47c0      	blx	r8
 80147a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147a2:	9901      	ldr	r1, [sp, #4]
 80147a4:	6027      	str	r7, [r4, #0]
 80147a6:	68a8      	ldr	r0, [r5, #8]
 80147a8:	b120      	cbz	r0, 80147b4 <rcl_wait_set_fini+0x54>
 80147aa:	47c0      	blx	r8
 80147ac:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147ae:	2300      	movs	r3, #0
 80147b0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80147b4:	68a0      	ldr	r0, [r4, #8]
 80147b6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147b8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147ba:	f04f 0800 	mov.w	r8, #0
 80147be:	f8c4 800c 	str.w	r8, [r4, #12]
 80147c2:	f8c5 800c 	str.w	r8, [r5, #12]
 80147c6:	b128      	cbz	r0, 80147d4 <rcl_wait_set_fini+0x74>
 80147c8:	47b8      	blx	r7
 80147ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147cc:	f8c4 8008 	str.w	r8, [r4, #8]
 80147d0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147d4:	6968      	ldr	r0, [r5, #20]
 80147d6:	f04f 0800 	mov.w	r8, #0
 80147da:	f8c5 8010 	str.w	r8, [r5, #16]
 80147de:	b128      	cbz	r0, 80147ec <rcl_wait_set_fini+0x8c>
 80147e0:	47b8      	blx	r7
 80147e2:	f8c5 8014 	str.w	r8, [r5, #20]
 80147e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80147e8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80147ea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80147ec:	6920      	ldr	r0, [r4, #16]
 80147ee:	f04f 0800 	mov.w	r8, #0
 80147f2:	f8c4 8014 	str.w	r8, [r4, #20]
 80147f6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80147fa:	b128      	cbz	r0, 8014808 <rcl_wait_set_fini+0xa8>
 80147fc:	47b8      	blx	r7
 80147fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014800:	f8c4 8010 	str.w	r8, [r4, #16]
 8014804:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014806:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014808:	69a0      	ldr	r0, [r4, #24]
 801480a:	f04f 0800 	mov.w	r8, #0
 801480e:	f8c4 801c 	str.w	r8, [r4, #28]
 8014812:	f8c5 8018 	str.w	r8, [r5, #24]
 8014816:	b128      	cbz	r0, 8014824 <rcl_wait_set_fini+0xc4>
 8014818:	9101      	str	r1, [sp, #4]
 801481a:	47b8      	blx	r7
 801481c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801481e:	9901      	ldr	r1, [sp, #4]
 8014820:	f8c4 8018 	str.w	r8, [r4, #24]
 8014824:	6a28      	ldr	r0, [r5, #32]
 8014826:	b120      	cbz	r0, 8014832 <rcl_wait_set_fini+0xd2>
 8014828:	47b8      	blx	r7
 801482a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801482c:	2300      	movs	r3, #0
 801482e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014832:	6a20      	ldr	r0, [r4, #32]
 8014834:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014838:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801483a:	2700      	movs	r7, #0
 801483c:	6267      	str	r7, [r4, #36]	@ 0x24
 801483e:	626f      	str	r7, [r5, #36]	@ 0x24
 8014840:	b120      	cbz	r0, 801484c <rcl_wait_set_fini+0xec>
 8014842:	9101      	str	r1, [sp, #4]
 8014844:	47c0      	blx	r8
 8014846:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014848:	9901      	ldr	r1, [sp, #4]
 801484a:	6227      	str	r7, [r4, #32]
 801484c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801484e:	b120      	cbz	r0, 801485a <rcl_wait_set_fini+0xfa>
 8014850:	47c0      	blx	r8
 8014852:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014854:	2300      	movs	r3, #0
 8014856:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801485a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801485c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014860:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014862:	2700      	movs	r7, #0
 8014864:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014866:	632f      	str	r7, [r5, #48]	@ 0x30
 8014868:	b120      	cbz	r0, 8014874 <rcl_wait_set_fini+0x114>
 801486a:	9101      	str	r1, [sp, #4]
 801486c:	47c0      	blx	r8
 801486e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014870:	9901      	ldr	r1, [sp, #4]
 8014872:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014874:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014876:	b120      	cbz	r0, 8014882 <rcl_wait_set_fini+0x122>
 8014878:	47c0      	blx	r8
 801487a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801487c:	2300      	movs	r3, #0
 801487e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014882:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014884:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014886:	4628      	mov	r0, r5
 8014888:	4798      	blx	r3
 801488a:	2300      	movs	r3, #0
 801488c:	6323      	str	r3, [r4, #48]	@ 0x30
 801488e:	4630      	mov	r0, r6
 8014890:	b002      	add	sp, #8
 8014892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014896:	260b      	movs	r6, #11
 8014898:	4630      	mov	r0, r6
 801489a:	b002      	add	sp, #8
 801489c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148a0 <rcl_wait_set_add_subscription>:
 80148a0:	b318      	cbz	r0, 80148ea <rcl_wait_set_add_subscription+0x4a>
 80148a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148a4:	b570      	push	{r4, r5, r6, lr}
 80148a6:	4604      	mov	r4, r0
 80148a8:	b30b      	cbz	r3, 80148ee <rcl_wait_set_add_subscription+0x4e>
 80148aa:	b319      	cbz	r1, 80148f4 <rcl_wait_set_add_subscription+0x54>
 80148ac:	681d      	ldr	r5, [r3, #0]
 80148ae:	6840      	ldr	r0, [r0, #4]
 80148b0:	4285      	cmp	r5, r0
 80148b2:	d217      	bcs.n	80148e4 <rcl_wait_set_add_subscription+0x44>
 80148b4:	6820      	ldr	r0, [r4, #0]
 80148b6:	1c6e      	adds	r6, r5, #1
 80148b8:	601e      	str	r6, [r3, #0]
 80148ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80148be:	b102      	cbz	r2, 80148c2 <rcl_wait_set_add_subscription+0x22>
 80148c0:	6015      	str	r5, [r2, #0]
 80148c2:	4608      	mov	r0, r1
 80148c4:	f7ff fd14 	bl	80142f0 <rcl_subscription_get_rmw_handle>
 80148c8:	b150      	cbz	r0, 80148e0 <rcl_wait_set_add_subscription+0x40>
 80148ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80148cc:	6842      	ldr	r2, [r0, #4]
 80148ce:	689b      	ldr	r3, [r3, #8]
 80148d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80148d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80148d6:	6853      	ldr	r3, [r2, #4]
 80148d8:	3301      	adds	r3, #1
 80148da:	2000      	movs	r0, #0
 80148dc:	6053      	str	r3, [r2, #4]
 80148de:	bd70      	pop	{r4, r5, r6, pc}
 80148e0:	2001      	movs	r0, #1
 80148e2:	bd70      	pop	{r4, r5, r6, pc}
 80148e4:	f240 3086 	movw	r0, #902	@ 0x386
 80148e8:	bd70      	pop	{r4, r5, r6, pc}
 80148ea:	200b      	movs	r0, #11
 80148ec:	4770      	bx	lr
 80148ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148f2:	bd70      	pop	{r4, r5, r6, pc}
 80148f4:	200b      	movs	r0, #11
 80148f6:	bd70      	pop	{r4, r5, r6, pc}

080148f8 <rcl_wait_set_clear>:
 80148f8:	2800      	cmp	r0, #0
 80148fa:	d073      	beq.n	80149e4 <rcl_wait_set_clear+0xec>
 80148fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80148fe:	b510      	push	{r4, lr}
 8014900:	4604      	mov	r4, r0
 8014902:	2b00      	cmp	r3, #0
 8014904:	d070      	beq.n	80149e8 <rcl_wait_set_clear+0xf0>
 8014906:	6800      	ldr	r0, [r0, #0]
 8014908:	b138      	cbz	r0, 801491a <rcl_wait_set_clear+0x22>
 801490a:	6862      	ldr	r2, [r4, #4]
 801490c:	2100      	movs	r1, #0
 801490e:	0092      	lsls	r2, r2, #2
 8014910:	f006 fbb3 	bl	801b07a <memset>
 8014914:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014916:	2200      	movs	r2, #0
 8014918:	601a      	str	r2, [r3, #0]
 801491a:	68a0      	ldr	r0, [r4, #8]
 801491c:	b138      	cbz	r0, 801492e <rcl_wait_set_clear+0x36>
 801491e:	68e2      	ldr	r2, [r4, #12]
 8014920:	2100      	movs	r1, #0
 8014922:	0092      	lsls	r2, r2, #2
 8014924:	f006 fba9 	bl	801b07a <memset>
 8014928:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801492a:	2200      	movs	r2, #0
 801492c:	60da      	str	r2, [r3, #12]
 801492e:	69a0      	ldr	r0, [r4, #24]
 8014930:	b138      	cbz	r0, 8014942 <rcl_wait_set_clear+0x4a>
 8014932:	69e2      	ldr	r2, [r4, #28]
 8014934:	2100      	movs	r1, #0
 8014936:	0092      	lsls	r2, r2, #2
 8014938:	f006 fb9f 	bl	801b07a <memset>
 801493c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801493e:	2200      	movs	r2, #0
 8014940:	619a      	str	r2, [r3, #24]
 8014942:	6a20      	ldr	r0, [r4, #32]
 8014944:	b138      	cbz	r0, 8014956 <rcl_wait_set_clear+0x5e>
 8014946:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014948:	2100      	movs	r1, #0
 801494a:	0092      	lsls	r2, r2, #2
 801494c:	f006 fb95 	bl	801b07a <memset>
 8014950:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014952:	2200      	movs	r2, #0
 8014954:	625a      	str	r2, [r3, #36]	@ 0x24
 8014956:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014958:	b138      	cbz	r0, 801496a <rcl_wait_set_clear+0x72>
 801495a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801495c:	2100      	movs	r1, #0
 801495e:	0092      	lsls	r2, r2, #2
 8014960:	f006 fb8b 	bl	801b07a <memset>
 8014964:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014966:	2200      	movs	r2, #0
 8014968:	631a      	str	r2, [r3, #48]	@ 0x30
 801496a:	6920      	ldr	r0, [r4, #16]
 801496c:	b138      	cbz	r0, 801497e <rcl_wait_set_clear+0x86>
 801496e:	6962      	ldr	r2, [r4, #20]
 8014970:	2100      	movs	r1, #0
 8014972:	0092      	lsls	r2, r2, #2
 8014974:	f006 fb81 	bl	801b07a <memset>
 8014978:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801497a:	2200      	movs	r2, #0
 801497c:	641a      	str	r2, [r3, #64]	@ 0x40
 801497e:	6898      	ldr	r0, [r3, #8]
 8014980:	b138      	cbz	r0, 8014992 <rcl_wait_set_clear+0x9a>
 8014982:	685a      	ldr	r2, [r3, #4]
 8014984:	2100      	movs	r1, #0
 8014986:	0092      	lsls	r2, r2, #2
 8014988:	f006 fb77 	bl	801b07a <memset>
 801498c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801498e:	2200      	movs	r2, #0
 8014990:	605a      	str	r2, [r3, #4]
 8014992:	6958      	ldr	r0, [r3, #20]
 8014994:	b138      	cbz	r0, 80149a6 <rcl_wait_set_clear+0xae>
 8014996:	691a      	ldr	r2, [r3, #16]
 8014998:	2100      	movs	r1, #0
 801499a:	0092      	lsls	r2, r2, #2
 801499c:	f006 fb6d 	bl	801b07a <memset>
 80149a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149a2:	2200      	movs	r2, #0
 80149a4:	611a      	str	r2, [r3, #16]
 80149a6:	6a18      	ldr	r0, [r3, #32]
 80149a8:	b138      	cbz	r0, 80149ba <rcl_wait_set_clear+0xc2>
 80149aa:	69da      	ldr	r2, [r3, #28]
 80149ac:	2100      	movs	r1, #0
 80149ae:	0092      	lsls	r2, r2, #2
 80149b0:	f006 fb63 	bl	801b07a <memset>
 80149b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149b6:	2200      	movs	r2, #0
 80149b8:	61da      	str	r2, [r3, #28]
 80149ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80149bc:	b138      	cbz	r0, 80149ce <rcl_wait_set_clear+0xd6>
 80149be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80149c0:	2100      	movs	r1, #0
 80149c2:	0092      	lsls	r2, r2, #2
 80149c4:	f006 fb59 	bl	801b07a <memset>
 80149c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149ca:	2200      	movs	r2, #0
 80149cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80149ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80149d0:	b138      	cbz	r0, 80149e2 <rcl_wait_set_clear+0xea>
 80149d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80149d4:	2100      	movs	r1, #0
 80149d6:	0092      	lsls	r2, r2, #2
 80149d8:	f006 fb4f 	bl	801b07a <memset>
 80149dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80149de:	2000      	movs	r0, #0
 80149e0:	6358      	str	r0, [r3, #52]	@ 0x34
 80149e2:	bd10      	pop	{r4, pc}
 80149e4:	200b      	movs	r0, #11
 80149e6:	4770      	bx	lr
 80149e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80149ec:	bd10      	pop	{r4, pc}
 80149ee:	bf00      	nop

080149f0 <rcl_wait_set_resize>:
 80149f0:	2800      	cmp	r0, #0
 80149f2:	f000 8185 	beq.w	8014d00 <rcl_wait_set_resize+0x310>
 80149f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80149fc:	b083      	sub	sp, #12
 80149fe:	4605      	mov	r5, r0
 8014a00:	2c00      	cmp	r4, #0
 8014a02:	f000 817f 	beq.w	8014d04 <rcl_wait_set_resize+0x314>
 8014a06:	f04f 0900 	mov.w	r9, #0
 8014a0a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014a0e:	461f      	mov	r7, r3
 8014a10:	4688      	mov	r8, r1
 8014a12:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014a16:	4616      	mov	r6, r2
 8014a18:	f8c0 9004 	str.w	r9, [r0, #4]
 8014a1c:	f8c4 9000 	str.w	r9, [r4]
 8014a20:	2900      	cmp	r1, #0
 8014a22:	f000 80bd 	beq.w	8014ba0 <rcl_wait_set_resize+0x1b0>
 8014a26:	008c      	lsls	r4, r1, #2
 8014a28:	6800      	ldr	r0, [r0, #0]
 8014a2a:	9301      	str	r3, [sp, #4]
 8014a2c:	4652      	mov	r2, sl
 8014a2e:	4621      	mov	r1, r4
 8014a30:	4798      	blx	r3
 8014a32:	9b01      	ldr	r3, [sp, #4]
 8014a34:	6028      	str	r0, [r5, #0]
 8014a36:	2800      	cmp	r0, #0
 8014a38:	f000 80cb 	beq.w	8014bd2 <rcl_wait_set_resize+0x1e2>
 8014a3c:	4622      	mov	r2, r4
 8014a3e:	4649      	mov	r1, r9
 8014a40:	9301      	str	r3, [sp, #4]
 8014a42:	f006 fb1a 	bl	801b07a <memset>
 8014a46:	f8c5 8004 	str.w	r8, [r5, #4]
 8014a4a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014a4e:	9b01      	ldr	r3, [sp, #4]
 8014a50:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014a54:	f8c8 9004 	str.w	r9, [r8, #4]
 8014a58:	4652      	mov	r2, sl
 8014a5a:	4621      	mov	r1, r4
 8014a5c:	4798      	blx	r3
 8014a5e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014a60:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a64:	689b      	ldr	r3, [r3, #8]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	f000 80ac 	beq.w	8014bc4 <rcl_wait_set_resize+0x1d4>
 8014a6c:	4622      	mov	r2, r4
 8014a6e:	4649      	mov	r1, r9
 8014a70:	4618      	mov	r0, r3
 8014a72:	f006 fb02 	bl	801b07a <memset>
 8014a76:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a78:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014a7c:	f04f 0800 	mov.w	r8, #0
 8014a80:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014a84:	f8c5 800c 	str.w	r8, [r5, #12]
 8014a88:	f8c4 800c 	str.w	r8, [r4, #12]
 8014a8c:	2e00      	cmp	r6, #0
 8014a8e:	f040 80a4 	bne.w	8014bda <rcl_wait_set_resize+0x1ea>
 8014a92:	68a8      	ldr	r0, [r5, #8]
 8014a94:	b128      	cbz	r0, 8014aa2 <rcl_wait_set_resize+0xb2>
 8014a96:	4649      	mov	r1, r9
 8014a98:	4790      	blx	r2
 8014a9a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014a9c:	60ae      	str	r6, [r5, #8]
 8014a9e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014aa2:	f04f 0800 	mov.w	r8, #0
 8014aa6:	19f6      	adds	r6, r6, r7
 8014aa8:	f8c4 8010 	str.w	r8, [r4, #16]
 8014aac:	f040 80ac 	bne.w	8014c08 <rcl_wait_set_resize+0x218>
 8014ab0:	6960      	ldr	r0, [r4, #20]
 8014ab2:	b130      	cbz	r0, 8014ac2 <rcl_wait_set_resize+0xd2>
 8014ab4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014ab6:	4649      	mov	r1, r9
 8014ab8:	4798      	blx	r3
 8014aba:	6166      	str	r6, [r4, #20]
 8014abc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014abe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014ac2:	2600      	movs	r6, #0
 8014ac4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014ac8:	616e      	str	r6, [r5, #20]
 8014aca:	6426      	str	r6, [r4, #64]	@ 0x40
 8014acc:	2f00      	cmp	r7, #0
 8014ace:	f040 80ad 	bne.w	8014c2c <rcl_wait_set_resize+0x23c>
 8014ad2:	6928      	ldr	r0, [r5, #16]
 8014ad4:	b138      	cbz	r0, 8014ae6 <rcl_wait_set_resize+0xf6>
 8014ad6:	4649      	mov	r1, r9
 8014ad8:	47d0      	blx	sl
 8014ada:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014adc:	612f      	str	r7, [r5, #16]
 8014ade:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014ae2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ae8:	2600      	movs	r6, #0
 8014aea:	61ee      	str	r6, [r5, #28]
 8014aec:	61a6      	str	r6, [r4, #24]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	f040 80af 	bne.w	8014c52 <rcl_wait_set_resize+0x262>
 8014af4:	69a8      	ldr	r0, [r5, #24]
 8014af6:	b120      	cbz	r0, 8014b02 <rcl_wait_set_resize+0x112>
 8014af8:	4649      	mov	r1, r9
 8014afa:	47d0      	blx	sl
 8014afc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014afe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b00:	61ab      	str	r3, [r5, #24]
 8014b02:	6a20      	ldr	r0, [r4, #32]
 8014b04:	b128      	cbz	r0, 8014b12 <rcl_wait_set_resize+0x122>
 8014b06:	4649      	mov	r1, r9
 8014b08:	47d0      	blx	sl
 8014b0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b14:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014b16:	2600      	movs	r6, #0
 8014b18:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014b1c:	626e      	str	r6, [r5, #36]	@ 0x24
 8014b1e:	6266      	str	r6, [r4, #36]	@ 0x24
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	f000 80b6 	beq.w	8014c92 <rcl_wait_set_resize+0x2a2>
 8014b26:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014b2a:	6a28      	ldr	r0, [r5, #32]
 8014b2c:	463a      	mov	r2, r7
 8014b2e:	4651      	mov	r1, sl
 8014b30:	47c8      	blx	r9
 8014b32:	6228      	str	r0, [r5, #32]
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d04c      	beq.n	8014bd2 <rcl_wait_set_resize+0x1e2>
 8014b38:	4652      	mov	r2, sl
 8014b3a:	4631      	mov	r1, r6
 8014b3c:	f006 fa9d 	bl	801b07a <memset>
 8014b40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b44:	626b      	str	r3, [r5, #36]	@ 0x24
 8014b46:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014b48:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014b4a:	463a      	mov	r2, r7
 8014b4c:	4651      	mov	r1, sl
 8014b4e:	47c8      	blx	r9
 8014b50:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014b52:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014b54:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014b56:	2c00      	cmp	r4, #0
 8014b58:	f000 80f0 	beq.w	8014d3c <rcl_wait_set_resize+0x34c>
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	4652      	mov	r2, sl
 8014b60:	4631      	mov	r1, r6
 8014b62:	f006 fa8a 	bl	801b07a <memset>
 8014b66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b6a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014b6c:	2600      	movs	r6, #0
 8014b6e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014b72:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014b74:	6326      	str	r6, [r4, #48]	@ 0x30
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	f040 809d 	bne.w	8014cb6 <rcl_wait_set_resize+0x2c6>
 8014b7c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014b7e:	b120      	cbz	r0, 8014b8a <rcl_wait_set_resize+0x19a>
 8014b80:	4639      	mov	r1, r7
 8014b82:	47c0      	blx	r8
 8014b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014b88:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014b8a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b8c:	b310      	cbz	r0, 8014bd4 <rcl_wait_set_resize+0x1e4>
 8014b8e:	4639      	mov	r1, r7
 8014b90:	47c0      	blx	r8
 8014b92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014b94:	2000      	movs	r0, #0
 8014b96:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014b9a:	b003      	add	sp, #12
 8014b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba0:	6800      	ldr	r0, [r0, #0]
 8014ba2:	b120      	cbz	r0, 8014bae <rcl_wait_set_resize+0x1be>
 8014ba4:	4651      	mov	r1, sl
 8014ba6:	47d8      	blx	fp
 8014ba8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014baa:	f8c5 8000 	str.w	r8, [r5]
 8014bae:	68a0      	ldr	r0, [r4, #8]
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	f43f af61 	beq.w	8014a78 <rcl_wait_set_resize+0x88>
 8014bb6:	4651      	mov	r1, sl
 8014bb8:	47d8      	blx	fp
 8014bba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014bc2:	e759      	b.n	8014a78 <rcl_wait_set_resize+0x88>
 8014bc4:	6828      	ldr	r0, [r5, #0]
 8014bc6:	9301      	str	r3, [sp, #4]
 8014bc8:	4651      	mov	r1, sl
 8014bca:	47d8      	blx	fp
 8014bcc:	9b01      	ldr	r3, [sp, #4]
 8014bce:	e9c5 3300 	strd	r3, r3, [r5]
 8014bd2:	200a      	movs	r0, #10
 8014bd4:	b003      	add	sp, #12
 8014bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bda:	00b4      	lsls	r4, r6, #2
 8014bdc:	68a8      	ldr	r0, [r5, #8]
 8014bde:	464a      	mov	r2, r9
 8014be0:	4621      	mov	r1, r4
 8014be2:	4798      	blx	r3
 8014be4:	60a8      	str	r0, [r5, #8]
 8014be6:	2800      	cmp	r0, #0
 8014be8:	d0f3      	beq.n	8014bd2 <rcl_wait_set_resize+0x1e2>
 8014bea:	4622      	mov	r2, r4
 8014bec:	4641      	mov	r1, r8
 8014bee:	f006 fa44 	bl	801b07a <memset>
 8014bf2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014bf4:	60ee      	str	r6, [r5, #12]
 8014bf6:	f04f 0800 	mov.w	r8, #0
 8014bfa:	19f6      	adds	r6, r6, r7
 8014bfc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c00:	f8c4 8010 	str.w	r8, [r4, #16]
 8014c04:	f43f af54 	beq.w	8014ab0 <rcl_wait_set_resize+0xc0>
 8014c08:	00b6      	lsls	r6, r6, #2
 8014c0a:	464a      	mov	r2, r9
 8014c0c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014c0e:	6960      	ldr	r0, [r4, #20]
 8014c10:	4631      	mov	r1, r6
 8014c12:	4798      	blx	r3
 8014c14:	4681      	mov	r9, r0
 8014c16:	6160      	str	r0, [r4, #20]
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	d076      	beq.n	8014d0a <rcl_wait_set_resize+0x31a>
 8014c1c:	4632      	mov	r2, r6
 8014c1e:	4641      	mov	r1, r8
 8014c20:	f006 fa2b 	bl	801b07a <memset>
 8014c24:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c26:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c2a:	e74a      	b.n	8014ac2 <rcl_wait_set_resize+0xd2>
 8014c2c:	00bc      	lsls	r4, r7, #2
 8014c2e:	6928      	ldr	r0, [r5, #16]
 8014c30:	464a      	mov	r2, r9
 8014c32:	4621      	mov	r1, r4
 8014c34:	47c0      	blx	r8
 8014c36:	6128      	str	r0, [r5, #16]
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	d0ca      	beq.n	8014bd2 <rcl_wait_set_resize+0x1e2>
 8014c3c:	4622      	mov	r2, r4
 8014c3e:	4631      	mov	r1, r6
 8014c40:	f006 fa1b 	bl	801b07a <memset>
 8014c44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c46:	616f      	str	r7, [r5, #20]
 8014c48:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014c4c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014c50:	e749      	b.n	8014ae6 <rcl_wait_set_resize+0xf6>
 8014c52:	009c      	lsls	r4, r3, #2
 8014c54:	69a8      	ldr	r0, [r5, #24]
 8014c56:	464a      	mov	r2, r9
 8014c58:	4621      	mov	r1, r4
 8014c5a:	47c0      	blx	r8
 8014c5c:	61a8      	str	r0, [r5, #24]
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	d0b7      	beq.n	8014bd2 <rcl_wait_set_resize+0x1e2>
 8014c62:	4622      	mov	r2, r4
 8014c64:	4631      	mov	r1, r6
 8014c66:	f006 fa08 	bl	801b07a <memset>
 8014c6a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014c6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c6e:	61eb      	str	r3, [r5, #28]
 8014c70:	6a38      	ldr	r0, [r7, #32]
 8014c72:	61fe      	str	r6, [r7, #28]
 8014c74:	464a      	mov	r2, r9
 8014c76:	4621      	mov	r1, r4
 8014c78:	47c0      	blx	r8
 8014c7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014c7c:	6238      	str	r0, [r7, #32]
 8014c7e:	6a1f      	ldr	r7, [r3, #32]
 8014c80:	2f00      	cmp	r7, #0
 8014c82:	d054      	beq.n	8014d2e <rcl_wait_set_resize+0x33e>
 8014c84:	4622      	mov	r2, r4
 8014c86:	4631      	mov	r1, r6
 8014c88:	4638      	mov	r0, r7
 8014c8a:	f006 f9f6 	bl	801b07a <memset>
 8014c8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c90:	e73f      	b.n	8014b12 <rcl_wait_set_resize+0x122>
 8014c92:	6a28      	ldr	r0, [r5, #32]
 8014c94:	b120      	cbz	r0, 8014ca0 <rcl_wait_set_resize+0x2b0>
 8014c96:	4639      	mov	r1, r7
 8014c98:	47c0      	blx	r8
 8014c9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c9c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014c9e:	622b      	str	r3, [r5, #32]
 8014ca0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	f43f af60 	beq.w	8014b68 <rcl_wait_set_resize+0x178>
 8014ca8:	4639      	mov	r1, r7
 8014caa:	47c0      	blx	r8
 8014cac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014cae:	2300      	movs	r3, #0
 8014cb0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014cb4:	e758      	b.n	8014b68 <rcl_wait_set_resize+0x178>
 8014cb6:	009c      	lsls	r4, r3, #2
 8014cb8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014cba:	463a      	mov	r2, r7
 8014cbc:	4621      	mov	r1, r4
 8014cbe:	47c8      	blx	r9
 8014cc0:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	d085      	beq.n	8014bd2 <rcl_wait_set_resize+0x1e2>
 8014cc6:	4622      	mov	r2, r4
 8014cc8:	4631      	mov	r1, r6
 8014cca:	f006 f9d6 	bl	801b07a <memset>
 8014cce:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cd4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014cd6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014cda:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014cde:	463a      	mov	r2, r7
 8014ce0:	4621      	mov	r1, r4
 8014ce2:	47c8      	blx	r9
 8014ce4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ce6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014cec:	b36b      	cbz	r3, 8014d4a <rcl_wait_set_resize+0x35a>
 8014cee:	4622      	mov	r2, r4
 8014cf0:	4631      	mov	r1, r6
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f006 f9c1 	bl	801b07a <memset>
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	b003      	add	sp, #12
 8014cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d00:	200b      	movs	r0, #11
 8014d02:	4770      	bx	lr
 8014d04:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014d08:	e764      	b.n	8014bd4 <rcl_wait_set_resize+0x1e4>
 8014d0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d0c:	68a8      	ldr	r0, [r5, #8]
 8014d0e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d12:	4798      	blx	r3
 8014d14:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014d16:	6928      	ldr	r0, [r5, #16]
 8014d18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d1a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014d1c:	f8c5 900c 	str.w	r9, [r5, #12]
 8014d20:	f8c5 9008 	str.w	r9, [r5, #8]
 8014d24:	4790      	blx	r2
 8014d26:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014d2a:	200a      	movs	r0, #10
 8014d2c:	e752      	b.n	8014bd4 <rcl_wait_set_resize+0x1e4>
 8014d2e:	69a8      	ldr	r0, [r5, #24]
 8014d30:	4649      	mov	r1, r9
 8014d32:	47d0      	blx	sl
 8014d34:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014d38:	200a      	movs	r0, #10
 8014d3a:	e74b      	b.n	8014bd4 <rcl_wait_set_resize+0x1e4>
 8014d3c:	6a28      	ldr	r0, [r5, #32]
 8014d3e:	4639      	mov	r1, r7
 8014d40:	47c0      	blx	r8
 8014d42:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014d46:	200a      	movs	r0, #10
 8014d48:	e744      	b.n	8014bd4 <rcl_wait_set_resize+0x1e4>
 8014d4a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014d4c:	9301      	str	r3, [sp, #4]
 8014d4e:	4639      	mov	r1, r7
 8014d50:	47c0      	blx	r8
 8014d52:	9b01      	ldr	r3, [sp, #4]
 8014d54:	200a      	movs	r0, #10
 8014d56:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014d5a:	e73b      	b.n	8014bd4 <rcl_wait_set_resize+0x1e4>

08014d5c <rcl_wait_set_init>:
 8014d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d60:	b084      	sub	sp, #16
 8014d62:	4604      	mov	r4, r0
 8014d64:	a810      	add	r0, sp, #64	@ 0x40
 8014d66:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014d6a:	460f      	mov	r7, r1
 8014d6c:	4690      	mov	r8, r2
 8014d6e:	4699      	mov	r9, r3
 8014d70:	f7f7 fe4e 	bl	800ca10 <rcutils_allocator_is_valid>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d06b      	beq.n	8014e50 <rcl_wait_set_init+0xf4>
 8014d78:	2c00      	cmp	r4, #0
 8014d7a:	d069      	beq.n	8014e50 <rcl_wait_set_init+0xf4>
 8014d7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014d7e:	b125      	cbz	r5, 8014d8a <rcl_wait_set_init+0x2e>
 8014d80:	2564      	movs	r5, #100	@ 0x64
 8014d82:	4628      	mov	r0, r5
 8014d84:	b004      	add	sp, #16
 8014d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d8a:	f1ba 0f00 	cmp.w	sl, #0
 8014d8e:	d05f      	beq.n	8014e50 <rcl_wait_set_init+0xf4>
 8014d90:	4650      	mov	r0, sl
 8014d92:	f7fe fa8d 	bl	80132b0 <rcl_context_is_valid>
 8014d96:	2800      	cmp	r0, #0
 8014d98:	d067      	beq.n	8014e6a <rcl_wait_set_init+0x10e>
 8014d9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d9c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8014d9e:	205c      	movs	r0, #92	@ 0x5c
 8014da0:	4798      	blx	r3
 8014da2:	6320      	str	r0, [r4, #48]	@ 0x30
 8014da4:	2800      	cmp	r0, #0
 8014da6:	d062      	beq.n	8014e6e <rcl_wait_set_init+0x112>
 8014da8:	4629      	mov	r1, r5
 8014daa:	225c      	movs	r2, #92	@ 0x5c
 8014dac:	f006 f965 	bl	801b07a <memset>
 8014db0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8014db4:	eb03 0e02 	add.w	lr, r3, r2
 8014db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014dba:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014dbc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014dc0:	449e      	add	lr, r3
 8014dc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014dc6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8014dca:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8014dce:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014dd2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8014dd6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8014dda:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8014dde:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8014de2:	f8da a000 	ldr.w	sl, [sl]
 8014de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014de8:	44c6      	add	lr, r8
 8014dea:	f8dc 3000 	ldr.w	r3, [ip]
 8014dee:	602b      	str	r3, [r5, #0]
 8014df0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8014df4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014df8:	f002 ff5c 	bl	8017cb4 <rmw_create_wait_set>
 8014dfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014dfe:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8014e00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014e02:	b350      	cbz	r0, 8014e5a <rcl_wait_set_init+0xfe>
 8014e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e06:	9302      	str	r3, [sp, #8]
 8014e08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e0a:	9301      	str	r3, [sp, #4]
 8014e0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e0e:	9300      	str	r3, [sp, #0]
 8014e10:	4642      	mov	r2, r8
 8014e12:	464b      	mov	r3, r9
 8014e14:	4639      	mov	r1, r7
 8014e16:	4620      	mov	r0, r4
 8014e18:	f7ff fdea 	bl	80149f0 <rcl_wait_set_resize>
 8014e1c:	4605      	mov	r5, r0
 8014e1e:	2800      	cmp	r0, #0
 8014e20:	d0af      	beq.n	8014d82 <rcl_wait_set_init+0x26>
 8014e22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014e24:	bb2b      	cbnz	r3, 8014e72 <rcl_wait_set_init+0x116>
 8014e26:	2600      	movs	r6, #0
 8014e28:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014e2c:	9600      	str	r6, [sp, #0]
 8014e2e:	4633      	mov	r3, r6
 8014e30:	4632      	mov	r2, r6
 8014e32:	4631      	mov	r1, r6
 8014e34:	4620      	mov	r0, r4
 8014e36:	f7ff fddb 	bl	80149f0 <rcl_wait_set_resize>
 8014e3a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d0a0      	beq.n	8014d82 <rcl_wait_set_init+0x26>
 8014e40:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8014e42:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8014e44:	4798      	blx	r3
 8014e46:	4628      	mov	r0, r5
 8014e48:	6326      	str	r6, [r4, #48]	@ 0x30
 8014e4a:	b004      	add	sp, #16
 8014e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e50:	250b      	movs	r5, #11
 8014e52:	4628      	mov	r0, r5
 8014e54:	b004      	add	sp, #16
 8014e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e5a:	2501      	movs	r5, #1
 8014e5c:	f002 ff34 	bl	8017cc8 <rmw_destroy_wait_set>
 8014e60:	2800      	cmp	r0, #0
 8014e62:	bf18      	it	ne
 8014e64:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8014e68:	e7dd      	b.n	8014e26 <rcl_wait_set_init+0xca>
 8014e6a:	2565      	movs	r5, #101	@ 0x65
 8014e6c:	e789      	b.n	8014d82 <rcl_wait_set_init+0x26>
 8014e6e:	250a      	movs	r5, #10
 8014e70:	e787      	b.n	8014d82 <rcl_wait_set_init+0x26>
 8014e72:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014e74:	e7f2      	b.n	8014e5c <rcl_wait_set_init+0x100>
 8014e76:	bf00      	nop

08014e78 <rcl_wait_set_add_guard_condition>:
 8014e78:	b318      	cbz	r0, 8014ec2 <rcl_wait_set_add_guard_condition+0x4a>
 8014e7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e7c:	b570      	push	{r4, r5, r6, lr}
 8014e7e:	4604      	mov	r4, r0
 8014e80:	b30b      	cbz	r3, 8014ec6 <rcl_wait_set_add_guard_condition+0x4e>
 8014e82:	b319      	cbz	r1, 8014ecc <rcl_wait_set_add_guard_condition+0x54>
 8014e84:	68dd      	ldr	r5, [r3, #12]
 8014e86:	68c0      	ldr	r0, [r0, #12]
 8014e88:	4285      	cmp	r5, r0
 8014e8a:	d217      	bcs.n	8014ebc <rcl_wait_set_add_guard_condition+0x44>
 8014e8c:	68a0      	ldr	r0, [r4, #8]
 8014e8e:	1c6e      	adds	r6, r5, #1
 8014e90:	60de      	str	r6, [r3, #12]
 8014e92:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014e96:	b102      	cbz	r2, 8014e9a <rcl_wait_set_add_guard_condition+0x22>
 8014e98:	6015      	str	r5, [r2, #0]
 8014e9a:	4608      	mov	r0, r1
 8014e9c:	f004 fe58 	bl	8019b50 <rcl_guard_condition_get_rmw_handle>
 8014ea0:	b150      	cbz	r0, 8014eb8 <rcl_wait_set_add_guard_condition+0x40>
 8014ea2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ea4:	6842      	ldr	r2, [r0, #4]
 8014ea6:	695b      	ldr	r3, [r3, #20]
 8014ea8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014eac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014eae:	6913      	ldr	r3, [r2, #16]
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	2000      	movs	r0, #0
 8014eb4:	6113      	str	r3, [r2, #16]
 8014eb6:	bd70      	pop	{r4, r5, r6, pc}
 8014eb8:	2001      	movs	r0, #1
 8014eba:	bd70      	pop	{r4, r5, r6, pc}
 8014ebc:	f240 3086 	movw	r0, #902	@ 0x386
 8014ec0:	bd70      	pop	{r4, r5, r6, pc}
 8014ec2:	200b      	movs	r0, #11
 8014ec4:	4770      	bx	lr
 8014ec6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014eca:	bd70      	pop	{r4, r5, r6, pc}
 8014ecc:	200b      	movs	r0, #11
 8014ece:	bd70      	pop	{r4, r5, r6, pc}

08014ed0 <rcl_wait_set_add_timer>:
 8014ed0:	b328      	cbz	r0, 8014f1e <rcl_wait_set_add_timer+0x4e>
 8014ed2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014ed4:	b570      	push	{r4, r5, r6, lr}
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	b31b      	cbz	r3, 8014f22 <rcl_wait_set_add_timer+0x52>
 8014eda:	b329      	cbz	r1, 8014f28 <rcl_wait_set_add_timer+0x58>
 8014edc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8014ede:	6965      	ldr	r5, [r4, #20]
 8014ee0:	42a8      	cmp	r0, r5
 8014ee2:	d219      	bcs.n	8014f18 <rcl_wait_set_add_timer+0x48>
 8014ee4:	6925      	ldr	r5, [r4, #16]
 8014ee6:	1c46      	adds	r6, r0, #1
 8014ee8:	641e      	str	r6, [r3, #64]	@ 0x40
 8014eea:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014eee:	b102      	cbz	r2, 8014ef2 <rcl_wait_set_add_timer+0x22>
 8014ef0:	6010      	str	r0, [r2, #0]
 8014ef2:	4608      	mov	r0, r1
 8014ef4:	f7ff fba6 	bl	8014644 <rcl_timer_get_guard_condition>
 8014ef8:	b168      	cbz	r0, 8014f16 <rcl_wait_set_add_timer+0x46>
 8014efa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014efc:	68e3      	ldr	r3, [r4, #12]
 8014efe:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8014f00:	3b01      	subs	r3, #1
 8014f02:	441d      	add	r5, r3
 8014f04:	f004 fe24 	bl	8019b50 <rcl_guard_condition_get_rmw_handle>
 8014f08:	b180      	cbz	r0, 8014f2c <rcl_wait_set_add_timer+0x5c>
 8014f0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f0c:	6842      	ldr	r2, [r0, #4]
 8014f0e:	695b      	ldr	r3, [r3, #20]
 8014f10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f14:	2000      	movs	r0, #0
 8014f16:	bd70      	pop	{r4, r5, r6, pc}
 8014f18:	f240 3086 	movw	r0, #902	@ 0x386
 8014f1c:	bd70      	pop	{r4, r5, r6, pc}
 8014f1e:	200b      	movs	r0, #11
 8014f20:	4770      	bx	lr
 8014f22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f26:	bd70      	pop	{r4, r5, r6, pc}
 8014f28:	200b      	movs	r0, #11
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
 8014f2c:	2001      	movs	r0, #1
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}

08014f30 <rcl_wait_set_add_client>:
 8014f30:	b318      	cbz	r0, 8014f7a <rcl_wait_set_add_client+0x4a>
 8014f32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f34:	b570      	push	{r4, r5, r6, lr}
 8014f36:	4604      	mov	r4, r0
 8014f38:	b30b      	cbz	r3, 8014f7e <rcl_wait_set_add_client+0x4e>
 8014f3a:	b319      	cbz	r1, 8014f84 <rcl_wait_set_add_client+0x54>
 8014f3c:	699d      	ldr	r5, [r3, #24]
 8014f3e:	69c0      	ldr	r0, [r0, #28]
 8014f40:	4285      	cmp	r5, r0
 8014f42:	d217      	bcs.n	8014f74 <rcl_wait_set_add_client+0x44>
 8014f44:	69a0      	ldr	r0, [r4, #24]
 8014f46:	1c6e      	adds	r6, r5, #1
 8014f48:	619e      	str	r6, [r3, #24]
 8014f4a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014f4e:	b102      	cbz	r2, 8014f52 <rcl_wait_set_add_client+0x22>
 8014f50:	6015      	str	r5, [r2, #0]
 8014f52:	4608      	mov	r0, r1
 8014f54:	f7fe f900 	bl	8013158 <rcl_client_get_rmw_handle>
 8014f58:	b150      	cbz	r0, 8014f70 <rcl_wait_set_add_client+0x40>
 8014f5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f5c:	6842      	ldr	r2, [r0, #4]
 8014f5e:	6a1b      	ldr	r3, [r3, #32]
 8014f60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014f64:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014f66:	69d3      	ldr	r3, [r2, #28]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	2000      	movs	r0, #0
 8014f6c:	61d3      	str	r3, [r2, #28]
 8014f6e:	bd70      	pop	{r4, r5, r6, pc}
 8014f70:	2001      	movs	r0, #1
 8014f72:	bd70      	pop	{r4, r5, r6, pc}
 8014f74:	f240 3086 	movw	r0, #902	@ 0x386
 8014f78:	bd70      	pop	{r4, r5, r6, pc}
 8014f7a:	200b      	movs	r0, #11
 8014f7c:	4770      	bx	lr
 8014f7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f82:	bd70      	pop	{r4, r5, r6, pc}
 8014f84:	200b      	movs	r0, #11
 8014f86:	bd70      	pop	{r4, r5, r6, pc}

08014f88 <rcl_wait_set_add_service>:
 8014f88:	b318      	cbz	r0, 8014fd2 <rcl_wait_set_add_service+0x4a>
 8014f8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014f8c:	b570      	push	{r4, r5, r6, lr}
 8014f8e:	4604      	mov	r4, r0
 8014f90:	b30b      	cbz	r3, 8014fd6 <rcl_wait_set_add_service+0x4e>
 8014f92:	b319      	cbz	r1, 8014fdc <rcl_wait_set_add_service+0x54>
 8014f94:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014f96:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014f98:	4285      	cmp	r5, r0
 8014f9a:	d217      	bcs.n	8014fcc <rcl_wait_set_add_service+0x44>
 8014f9c:	6a20      	ldr	r0, [r4, #32]
 8014f9e:	1c6e      	adds	r6, r5, #1
 8014fa0:	625e      	str	r6, [r3, #36]	@ 0x24
 8014fa2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014fa6:	b102      	cbz	r2, 8014faa <rcl_wait_set_add_service+0x22>
 8014fa8:	6015      	str	r5, [r2, #0]
 8014faa:	4608      	mov	r0, r1
 8014fac:	f7ff f804 	bl	8013fb8 <rcl_service_get_rmw_handle>
 8014fb0:	b150      	cbz	r0, 8014fc8 <rcl_wait_set_add_service+0x40>
 8014fb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014fb4:	6842      	ldr	r2, [r0, #4]
 8014fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fb8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014fbc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014fbe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	2000      	movs	r0, #0
 8014fc4:	6293      	str	r3, [r2, #40]	@ 0x28
 8014fc6:	bd70      	pop	{r4, r5, r6, pc}
 8014fc8:	2001      	movs	r0, #1
 8014fca:	bd70      	pop	{r4, r5, r6, pc}
 8014fcc:	f240 3086 	movw	r0, #902	@ 0x386
 8014fd0:	bd70      	pop	{r4, r5, r6, pc}
 8014fd2:	200b      	movs	r0, #11
 8014fd4:	4770      	bx	lr
 8014fd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014fda:	bd70      	pop	{r4, r5, r6, pc}
 8014fdc:	200b      	movs	r0, #11
 8014fde:	bd70      	pop	{r4, r5, r6, pc}

08014fe0 <rcl_wait>:
 8014fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe4:	ed2d 8b02 	vpush	{d8}
 8014fe8:	b08d      	sub	sp, #52	@ 0x34
 8014fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014fee:	2800      	cmp	r0, #0
 8014ff0:	f000 8143 	beq.w	801527a <rcl_wait+0x29a>
 8014ff4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8014ff6:	4605      	mov	r5, r0
 8014ff8:	2e00      	cmp	r6, #0
 8014ffa:	f000 8112 	beq.w	8015222 <rcl_wait+0x242>
 8014ffe:	6843      	ldr	r3, [r0, #4]
 8015000:	b983      	cbnz	r3, 8015024 <rcl_wait+0x44>
 8015002:	68eb      	ldr	r3, [r5, #12]
 8015004:	b973      	cbnz	r3, 8015024 <rcl_wait+0x44>
 8015006:	696b      	ldr	r3, [r5, #20]
 8015008:	b963      	cbnz	r3, 8015024 <rcl_wait+0x44>
 801500a:	69eb      	ldr	r3, [r5, #28]
 801500c:	b953      	cbnz	r3, 8015024 <rcl_wait+0x44>
 801500e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015010:	b943      	cbnz	r3, 8015024 <rcl_wait+0x44>
 8015012:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015014:	b933      	cbnz	r3, 8015024 <rcl_wait+0x44>
 8015016:	f240 3085 	movw	r0, #901	@ 0x385
 801501a:	b00d      	add	sp, #52	@ 0x34
 801501c:	ecbd 8b02 	vpop	{d8}
 8015020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015024:	9b04      	ldr	r3, [sp, #16]
 8015026:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015028:	2b01      	cmp	r3, #1
 801502a:	9b05      	ldr	r3, [sp, #20]
 801502c:	f173 0300 	sbcs.w	r3, r3, #0
 8015030:	f2c0 80f0 	blt.w	8015214 <rcl_wait+0x234>
 8015034:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015038:	4643      	mov	r3, r8
 801503a:	2a00      	cmp	r2, #0
 801503c:	f000 8133 	beq.w	80152a6 <rcl_wait+0x2c6>
 8015040:	2400      	movs	r4, #0
 8015042:	4613      	mov	r3, r2
 8015044:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80152b8 <rcl_wait+0x2d8>
 8015048:	46a2      	mov	sl, r4
 801504a:	46a3      	mov	fp, r4
 801504c:	f240 3921 	movw	r9, #801	@ 0x321
 8015050:	4632      	mov	r2, r6
 8015052:	e014      	b.n	801507e <rcl_wait+0x9e>
 8015054:	2800      	cmp	r0, #0
 8015056:	d1e0      	bne.n	801501a <rcl_wait+0x3a>
 8015058:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801505c:	4542      	cmp	r2, r8
 801505e:	eb73 0107 	sbcs.w	r1, r3, r7
 8015062:	da03      	bge.n	801506c <rcl_wait+0x8c>
 8015064:	4690      	mov	r8, r2
 8015066:	461f      	mov	r7, r3
 8015068:	f04f 0b01 	mov.w	fp, #1
 801506c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801506e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015070:	3401      	adds	r4, #1
 8015072:	f14a 0a00 	adc.w	sl, sl, #0
 8015076:	429c      	cmp	r4, r3
 8015078:	f17a 0100 	sbcs.w	r1, sl, #0
 801507c:	d228      	bcs.n	80150d0 <rcl_wait+0xf0>
 801507e:	6928      	ldr	r0, [r5, #16]
 8015080:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015084:	a908      	add	r1, sp, #32
 8015086:	00a6      	lsls	r6, r4, #2
 8015088:	2800      	cmp	r0, #0
 801508a:	d0f1      	beq.n	8015070 <rcl_wait+0x90>
 801508c:	68eb      	ldr	r3, [r5, #12]
 801508e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015092:	4423      	add	r3, r4
 8015094:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015098:	f1be 0f00 	cmp.w	lr, #0
 801509c:	d006      	beq.n	80150ac <rcl_wait+0xcc>
 801509e:	6913      	ldr	r3, [r2, #16]
 80150a0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80150a4:	3301      	adds	r3, #1
 80150a6:	6113      	str	r3, [r2, #16]
 80150a8:	692b      	ldr	r3, [r5, #16]
 80150aa:	5998      	ldr	r0, [r3, r6]
 80150ac:	ed8d 8b08 	vstr	d8, [sp, #32]
 80150b0:	f7ff fa96 	bl	80145e0 <rcl_timer_get_time_until_next_call>
 80150b4:	4548      	cmp	r0, r9
 80150b6:	d1cd      	bne.n	8015054 <rcl_wait+0x74>
 80150b8:	692b      	ldr	r3, [r5, #16]
 80150ba:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80150bc:	2100      	movs	r1, #0
 80150be:	5199      	str	r1, [r3, r6]
 80150c0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80150c2:	3401      	adds	r4, #1
 80150c4:	f14a 0a00 	adc.w	sl, sl, #0
 80150c8:	429c      	cmp	r4, r3
 80150ca:	f17a 0100 	sbcs.w	r1, sl, #0
 80150ce:	d3d6      	bcc.n	801507e <rcl_wait+0x9e>
 80150d0:	4616      	mov	r6, r2
 80150d2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80150d6:	4313      	orrs	r3, r2
 80150d8:	46d9      	mov	r9, fp
 80150da:	f040 80a9 	bne.w	8015230 <rcl_wait+0x250>
 80150de:	2300      	movs	r3, #0
 80150e0:	2200      	movs	r2, #0
 80150e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80150e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80150ea:	ab08      	add	r3, sp, #32
 80150ec:	9302      	str	r3, [sp, #8]
 80150ee:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80150f0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80150f4:	e9cd 3200 	strd	r3, r2, [sp]
 80150f8:	f106 0110 	add.w	r1, r6, #16
 80150fc:	f106 031c 	add.w	r3, r6, #28
 8015100:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015104:	1d30      	adds	r0, r6, #4
 8015106:	f002 fc5d 	bl	80179c4 <rmw_wait>
 801510a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801510c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801510e:	4680      	mov	r8, r0
 8015110:	b1ca      	cbz	r2, 8015146 <rcl_wait+0x166>
 8015112:	2400      	movs	r4, #0
 8015114:	4627      	mov	r7, r4
 8015116:	692a      	ldr	r2, [r5, #16]
 8015118:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801511c:	f10d 011f 	add.w	r1, sp, #31
 8015120:	00a6      	lsls	r6, r4, #2
 8015122:	b160      	cbz	r0, 801513e <rcl_wait+0x15e>
 8015124:	f88d 701f 	strb.w	r7, [sp, #31]
 8015128:	f7ff fa20 	bl	801456c <rcl_timer_is_ready>
 801512c:	2800      	cmp	r0, #0
 801512e:	f47f af74 	bne.w	801501a <rcl_wait+0x3a>
 8015132:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015136:	b90b      	cbnz	r3, 801513c <rcl_wait+0x15c>
 8015138:	692a      	ldr	r2, [r5, #16]
 801513a:	5193      	str	r3, [r2, r6]
 801513c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801513e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015140:	3401      	adds	r4, #1
 8015142:	42a2      	cmp	r2, r4
 8015144:	d8e7      	bhi.n	8015116 <rcl_wait+0x136>
 8015146:	f038 0002 	bics.w	r0, r8, #2
 801514a:	f040 8090 	bne.w	801526e <rcl_wait+0x28e>
 801514e:	686e      	ldr	r6, [r5, #4]
 8015150:	4602      	mov	r2, r0
 8015152:	b91e      	cbnz	r6, 801515c <rcl_wait+0x17c>
 8015154:	e00d      	b.n	8015172 <rcl_wait+0x192>
 8015156:	3201      	adds	r2, #1
 8015158:	42b2      	cmp	r2, r6
 801515a:	d00a      	beq.n	8015172 <rcl_wait+0x192>
 801515c:	6899      	ldr	r1, [r3, #8]
 801515e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015162:	2900      	cmp	r1, #0
 8015164:	d1f7      	bne.n	8015156 <rcl_wait+0x176>
 8015166:	682c      	ldr	r4, [r5, #0]
 8015168:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801516c:	3201      	adds	r2, #1
 801516e:	42b2      	cmp	r2, r6
 8015170:	d1f4      	bne.n	801515c <rcl_wait+0x17c>
 8015172:	68ee      	ldr	r6, [r5, #12]
 8015174:	2200      	movs	r2, #0
 8015176:	b91e      	cbnz	r6, 8015180 <rcl_wait+0x1a0>
 8015178:	e00d      	b.n	8015196 <rcl_wait+0x1b6>
 801517a:	3201      	adds	r2, #1
 801517c:	42b2      	cmp	r2, r6
 801517e:	d00a      	beq.n	8015196 <rcl_wait+0x1b6>
 8015180:	6959      	ldr	r1, [r3, #20]
 8015182:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015186:	2900      	cmp	r1, #0
 8015188:	d1f7      	bne.n	801517a <rcl_wait+0x19a>
 801518a:	68ac      	ldr	r4, [r5, #8]
 801518c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015190:	3201      	adds	r2, #1
 8015192:	42b2      	cmp	r2, r6
 8015194:	d1f4      	bne.n	8015180 <rcl_wait+0x1a0>
 8015196:	69ee      	ldr	r6, [r5, #28]
 8015198:	2200      	movs	r2, #0
 801519a:	b91e      	cbnz	r6, 80151a4 <rcl_wait+0x1c4>
 801519c:	e00d      	b.n	80151ba <rcl_wait+0x1da>
 801519e:	3201      	adds	r2, #1
 80151a0:	42b2      	cmp	r2, r6
 80151a2:	d00a      	beq.n	80151ba <rcl_wait+0x1da>
 80151a4:	6a19      	ldr	r1, [r3, #32]
 80151a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80151aa:	2900      	cmp	r1, #0
 80151ac:	d1f7      	bne.n	801519e <rcl_wait+0x1be>
 80151ae:	69ac      	ldr	r4, [r5, #24]
 80151b0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80151b4:	3201      	adds	r2, #1
 80151b6:	42b2      	cmp	r2, r6
 80151b8:	d1f4      	bne.n	80151a4 <rcl_wait+0x1c4>
 80151ba:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80151bc:	2200      	movs	r2, #0
 80151be:	b91e      	cbnz	r6, 80151c8 <rcl_wait+0x1e8>
 80151c0:	e00d      	b.n	80151de <rcl_wait+0x1fe>
 80151c2:	3201      	adds	r2, #1
 80151c4:	4296      	cmp	r6, r2
 80151c6:	d00a      	beq.n	80151de <rcl_wait+0x1fe>
 80151c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80151ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80151ce:	2900      	cmp	r1, #0
 80151d0:	d1f7      	bne.n	80151c2 <rcl_wait+0x1e2>
 80151d2:	6a2c      	ldr	r4, [r5, #32]
 80151d4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80151d8:	3201      	adds	r2, #1
 80151da:	4296      	cmp	r6, r2
 80151dc:	d1f4      	bne.n	80151c8 <rcl_wait+0x1e8>
 80151de:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80151e0:	2200      	movs	r2, #0
 80151e2:	b91e      	cbnz	r6, 80151ec <rcl_wait+0x20c>
 80151e4:	e00d      	b.n	8015202 <rcl_wait+0x222>
 80151e6:	3201      	adds	r2, #1
 80151e8:	42b2      	cmp	r2, r6
 80151ea:	d00a      	beq.n	8015202 <rcl_wait+0x222>
 80151ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80151ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80151f2:	2900      	cmp	r1, #0
 80151f4:	d1f7      	bne.n	80151e6 <rcl_wait+0x206>
 80151f6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80151f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80151fc:	3201      	adds	r2, #1
 80151fe:	42b2      	cmp	r2, r6
 8015200:	d1f4      	bne.n	80151ec <rcl_wait+0x20c>
 8015202:	f1b8 0f02 	cmp.w	r8, #2
 8015206:	f47f af08 	bne.w	801501a <rcl_wait+0x3a>
 801520a:	464b      	mov	r3, r9
 801520c:	2b00      	cmp	r3, #0
 801520e:	bf08      	it	eq
 8015210:	2002      	moveq	r0, #2
 8015212:	e702      	b.n	801501a <rcl_wait+0x3a>
 8015214:	2a00      	cmp	r2, #0
 8015216:	d03a      	beq.n	801528e <rcl_wait+0x2ae>
 8015218:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801521c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015220:	e70e      	b.n	8015040 <rcl_wait+0x60>
 8015222:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015226:	b00d      	add	sp, #52	@ 0x34
 8015228:	ecbd 8b02 	vpop	{d8}
 801522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015230:	9b04      	ldr	r3, [sp, #16]
 8015232:	2b01      	cmp	r3, #1
 8015234:	9b05      	ldr	r3, [sp, #20]
 8015236:	f173 0300 	sbcs.w	r3, r3, #0
 801523a:	db24      	blt.n	8015286 <rcl_wait+0x2a6>
 801523c:	2f00      	cmp	r7, #0
 801523e:	bfbc      	itt	lt
 8015240:	f04f 0800 	movlt.w	r8, #0
 8015244:	4647      	movlt	r7, r8
 8015246:	a31e      	add	r3, pc, #120	@ (adr r3, 80152c0 <rcl_wait+0x2e0>)
 8015248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801524c:	4640      	mov	r0, r8
 801524e:	4639      	mov	r1, r7
 8015250:	f7eb fce4 	bl	8000c1c <__aeabi_ldivmod>
 8015254:	a31a      	add	r3, pc, #104	@ (adr r3, 80152c0 <rcl_wait+0x2e0>)
 8015256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801525e:	4640      	mov	r0, r8
 8015260:	4639      	mov	r1, r7
 8015262:	f7eb fcdb 	bl	8000c1c <__aeabi_ldivmod>
 8015266:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801526a:	ab08      	add	r3, sp, #32
 801526c:	e73e      	b.n	80150ec <rcl_wait+0x10c>
 801526e:	2001      	movs	r0, #1
 8015270:	b00d      	add	sp, #52	@ 0x34
 8015272:	ecbd 8b02 	vpop	{d8}
 8015276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527a:	200b      	movs	r0, #11
 801527c:	b00d      	add	sp, #52	@ 0x34
 801527e:	ecbd 8b02 	vpop	{d8}
 8015282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015286:	465b      	mov	r3, fp
 8015288:	2b00      	cmp	r3, #0
 801528a:	d1d7      	bne.n	801523c <rcl_wait+0x25c>
 801528c:	e72e      	b.n	80150ec <rcl_wait+0x10c>
 801528e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015292:	430b      	orrs	r3, r1
 8015294:	bf08      	it	eq
 8015296:	4691      	moveq	r9, r2
 8015298:	f43f af21 	beq.w	80150de <rcl_wait+0xfe>
 801529c:	9b04      	ldr	r3, [sp, #16]
 801529e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80152a2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80152a6:	2b01      	cmp	r3, #1
 80152a8:	9b05      	ldr	r3, [sp, #20]
 80152aa:	f173 0300 	sbcs.w	r3, r3, #0
 80152ae:	f04f 0300 	mov.w	r3, #0
 80152b2:	4699      	mov	r9, r3
 80152b4:	dac2      	bge.n	801523c <rcl_wait+0x25c>
 80152b6:	e719      	b.n	80150ec <rcl_wait+0x10c>
 80152b8:	ffffffff 	.word	0xffffffff
 80152bc:	7fffffff 	.word	0x7fffffff
 80152c0:	3b9aca00 	.word	0x3b9aca00
 80152c4:	00000000 	.word	0x00000000

080152c8 <rcl_action_take_goal_response>:
 80152c8:	2800      	cmp	r0, #0
 80152ca:	d039      	beq.n	8015340 <rcl_action_take_goal_response+0x78>
 80152cc:	b570      	push	{r4, r5, r6, lr}
 80152ce:	4604      	mov	r4, r0
 80152d0:	6800      	ldr	r0, [r0, #0]
 80152d2:	b380      	cbz	r0, 8015336 <rcl_action_take_goal_response+0x6e>
 80152d4:	460d      	mov	r5, r1
 80152d6:	4616      	mov	r6, r2
 80152d8:	f7fd ffc2 	bl	8013260 <rcl_client_is_valid>
 80152dc:	b330      	cbz	r0, 801532c <rcl_action_take_goal_response+0x64>
 80152de:	6820      	ldr	r0, [r4, #0]
 80152e0:	3004      	adds	r0, #4
 80152e2:	f7fd ffbd 	bl	8013260 <rcl_client_is_valid>
 80152e6:	b308      	cbz	r0, 801532c <rcl_action_take_goal_response+0x64>
 80152e8:	6820      	ldr	r0, [r4, #0]
 80152ea:	3008      	adds	r0, #8
 80152ec:	f7fd ffb8 	bl	8013260 <rcl_client_is_valid>
 80152f0:	b1e0      	cbz	r0, 801532c <rcl_action_take_goal_response+0x64>
 80152f2:	6820      	ldr	r0, [r4, #0]
 80152f4:	300c      	adds	r0, #12
 80152f6:	f7ff f801 	bl	80142fc <rcl_subscription_is_valid>
 80152fa:	b1b8      	cbz	r0, 801532c <rcl_action_take_goal_response+0x64>
 80152fc:	6820      	ldr	r0, [r4, #0]
 80152fe:	3010      	adds	r0, #16
 8015300:	f7fe fffc 	bl	80142fc <rcl_subscription_is_valid>
 8015304:	b190      	cbz	r0, 801532c <rcl_action_take_goal_response+0x64>
 8015306:	b1cd      	cbz	r5, 801533c <rcl_action_take_goal_response+0x74>
 8015308:	b1c6      	cbz	r6, 801533c <rcl_action_take_goal_response+0x74>
 801530a:	6820      	ldr	r0, [r4, #0]
 801530c:	4632      	mov	r2, r6
 801530e:	4629      	mov	r1, r5
 8015310:	f7fd ff5e 	bl	80131d0 <rcl_take_response>
 8015314:	b148      	cbz	r0, 801532a <rcl_action_take_goal_response+0x62>
 8015316:	280a      	cmp	r0, #10
 8015318:	d007      	beq.n	801532a <rcl_action_take_goal_response+0x62>
 801531a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801531e:	f640 0337 	movw	r3, #2103	@ 0x837
 8015322:	4290      	cmp	r0, r2
 8015324:	bf0c      	ite	eq
 8015326:	4618      	moveq	r0, r3
 8015328:	2001      	movne	r0, #1
 801532a:	bd70      	pop	{r4, r5, r6, pc}
 801532c:	f7f7 fb94 	bl	800ca58 <rcutils_reset_error>
 8015330:	f640 0036 	movw	r0, #2102	@ 0x836
 8015334:	bd70      	pop	{r4, r5, r6, pc}
 8015336:	f640 0036 	movw	r0, #2102	@ 0x836
 801533a:	bd70      	pop	{r4, r5, r6, pc}
 801533c:	200b      	movs	r0, #11
 801533e:	bd70      	pop	{r4, r5, r6, pc}
 8015340:	f640 0036 	movw	r0, #2102	@ 0x836
 8015344:	4770      	bx	lr
 8015346:	bf00      	nop

08015348 <rcl_action_send_result_request>:
 8015348:	b390      	cbz	r0, 80153b0 <rcl_action_send_result_request+0x68>
 801534a:	b570      	push	{r4, r5, r6, lr}
 801534c:	4604      	mov	r4, r0
 801534e:	6800      	ldr	r0, [r0, #0]
 8015350:	b348      	cbz	r0, 80153a6 <rcl_action_send_result_request+0x5e>
 8015352:	460d      	mov	r5, r1
 8015354:	4616      	mov	r6, r2
 8015356:	f7fd ff83 	bl	8013260 <rcl_client_is_valid>
 801535a:	b1f8      	cbz	r0, 801539c <rcl_action_send_result_request+0x54>
 801535c:	6820      	ldr	r0, [r4, #0]
 801535e:	3004      	adds	r0, #4
 8015360:	f7fd ff7e 	bl	8013260 <rcl_client_is_valid>
 8015364:	b1d0      	cbz	r0, 801539c <rcl_action_send_result_request+0x54>
 8015366:	6820      	ldr	r0, [r4, #0]
 8015368:	3008      	adds	r0, #8
 801536a:	f7fd ff79 	bl	8013260 <rcl_client_is_valid>
 801536e:	b1a8      	cbz	r0, 801539c <rcl_action_send_result_request+0x54>
 8015370:	6820      	ldr	r0, [r4, #0]
 8015372:	300c      	adds	r0, #12
 8015374:	f7fe ffc2 	bl	80142fc <rcl_subscription_is_valid>
 8015378:	b180      	cbz	r0, 801539c <rcl_action_send_result_request+0x54>
 801537a:	6820      	ldr	r0, [r4, #0]
 801537c:	3010      	adds	r0, #16
 801537e:	f7fe ffbd 	bl	80142fc <rcl_subscription_is_valid>
 8015382:	b158      	cbz	r0, 801539c <rcl_action_send_result_request+0x54>
 8015384:	b195      	cbz	r5, 80153ac <rcl_action_send_result_request+0x64>
 8015386:	b18e      	cbz	r6, 80153ac <rcl_action_send_result_request+0x64>
 8015388:	6820      	ldr	r0, [r4, #0]
 801538a:	4632      	mov	r2, r6
 801538c:	4629      	mov	r1, r5
 801538e:	3008      	adds	r0, #8
 8015390:	f7fd fee8 	bl	8013164 <rcl_send_request>
 8015394:	3800      	subs	r0, #0
 8015396:	bf18      	it	ne
 8015398:	2001      	movne	r0, #1
 801539a:	bd70      	pop	{r4, r5, r6, pc}
 801539c:	f7f7 fb5c 	bl	800ca58 <rcutils_reset_error>
 80153a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80153a4:	bd70      	pop	{r4, r5, r6, pc}
 80153a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80153aa:	bd70      	pop	{r4, r5, r6, pc}
 80153ac:	200b      	movs	r0, #11
 80153ae:	bd70      	pop	{r4, r5, r6, pc}
 80153b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop

080153b8 <rcl_action_take_result_response>:
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d03a      	beq.n	8015432 <rcl_action_take_result_response+0x7a>
 80153bc:	b570      	push	{r4, r5, r6, lr}
 80153be:	4604      	mov	r4, r0
 80153c0:	6800      	ldr	r0, [r0, #0]
 80153c2:	b388      	cbz	r0, 8015428 <rcl_action_take_result_response+0x70>
 80153c4:	460d      	mov	r5, r1
 80153c6:	4616      	mov	r6, r2
 80153c8:	f7fd ff4a 	bl	8013260 <rcl_client_is_valid>
 80153cc:	b338      	cbz	r0, 801541e <rcl_action_take_result_response+0x66>
 80153ce:	6820      	ldr	r0, [r4, #0]
 80153d0:	3004      	adds	r0, #4
 80153d2:	f7fd ff45 	bl	8013260 <rcl_client_is_valid>
 80153d6:	b310      	cbz	r0, 801541e <rcl_action_take_result_response+0x66>
 80153d8:	6820      	ldr	r0, [r4, #0]
 80153da:	3008      	adds	r0, #8
 80153dc:	f7fd ff40 	bl	8013260 <rcl_client_is_valid>
 80153e0:	b1e8      	cbz	r0, 801541e <rcl_action_take_result_response+0x66>
 80153e2:	6820      	ldr	r0, [r4, #0]
 80153e4:	300c      	adds	r0, #12
 80153e6:	f7fe ff89 	bl	80142fc <rcl_subscription_is_valid>
 80153ea:	b1c0      	cbz	r0, 801541e <rcl_action_take_result_response+0x66>
 80153ec:	6820      	ldr	r0, [r4, #0]
 80153ee:	3010      	adds	r0, #16
 80153f0:	f7fe ff84 	bl	80142fc <rcl_subscription_is_valid>
 80153f4:	b198      	cbz	r0, 801541e <rcl_action_take_result_response+0x66>
 80153f6:	b1d5      	cbz	r5, 801542e <rcl_action_take_result_response+0x76>
 80153f8:	b1ce      	cbz	r6, 801542e <rcl_action_take_result_response+0x76>
 80153fa:	6820      	ldr	r0, [r4, #0]
 80153fc:	4632      	mov	r2, r6
 80153fe:	4629      	mov	r1, r5
 8015400:	3008      	adds	r0, #8
 8015402:	f7fd fee5 	bl	80131d0 <rcl_take_response>
 8015406:	b148      	cbz	r0, 801541c <rcl_action_take_result_response+0x64>
 8015408:	280a      	cmp	r0, #10
 801540a:	d007      	beq.n	801541c <rcl_action_take_result_response+0x64>
 801540c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015410:	f640 0337 	movw	r3, #2103	@ 0x837
 8015414:	4290      	cmp	r0, r2
 8015416:	bf0c      	ite	eq
 8015418:	4618      	moveq	r0, r3
 801541a:	2001      	movne	r0, #1
 801541c:	bd70      	pop	{r4, r5, r6, pc}
 801541e:	f7f7 fb1b 	bl	800ca58 <rcutils_reset_error>
 8015422:	f640 0036 	movw	r0, #2102	@ 0x836
 8015426:	bd70      	pop	{r4, r5, r6, pc}
 8015428:	f640 0036 	movw	r0, #2102	@ 0x836
 801542c:	bd70      	pop	{r4, r5, r6, pc}
 801542e:	200b      	movs	r0, #11
 8015430:	bd70      	pop	{r4, r5, r6, pc}
 8015432:	f640 0036 	movw	r0, #2102	@ 0x836
 8015436:	4770      	bx	lr

08015438 <rcl_action_take_cancel_response>:
 8015438:	2800      	cmp	r0, #0
 801543a:	d03a      	beq.n	80154b2 <rcl_action_take_cancel_response+0x7a>
 801543c:	b570      	push	{r4, r5, r6, lr}
 801543e:	4604      	mov	r4, r0
 8015440:	6800      	ldr	r0, [r0, #0]
 8015442:	b388      	cbz	r0, 80154a8 <rcl_action_take_cancel_response+0x70>
 8015444:	460d      	mov	r5, r1
 8015446:	4616      	mov	r6, r2
 8015448:	f7fd ff0a 	bl	8013260 <rcl_client_is_valid>
 801544c:	b338      	cbz	r0, 801549e <rcl_action_take_cancel_response+0x66>
 801544e:	6820      	ldr	r0, [r4, #0]
 8015450:	3004      	adds	r0, #4
 8015452:	f7fd ff05 	bl	8013260 <rcl_client_is_valid>
 8015456:	b310      	cbz	r0, 801549e <rcl_action_take_cancel_response+0x66>
 8015458:	6820      	ldr	r0, [r4, #0]
 801545a:	3008      	adds	r0, #8
 801545c:	f7fd ff00 	bl	8013260 <rcl_client_is_valid>
 8015460:	b1e8      	cbz	r0, 801549e <rcl_action_take_cancel_response+0x66>
 8015462:	6820      	ldr	r0, [r4, #0]
 8015464:	300c      	adds	r0, #12
 8015466:	f7fe ff49 	bl	80142fc <rcl_subscription_is_valid>
 801546a:	b1c0      	cbz	r0, 801549e <rcl_action_take_cancel_response+0x66>
 801546c:	6820      	ldr	r0, [r4, #0]
 801546e:	3010      	adds	r0, #16
 8015470:	f7fe ff44 	bl	80142fc <rcl_subscription_is_valid>
 8015474:	b198      	cbz	r0, 801549e <rcl_action_take_cancel_response+0x66>
 8015476:	b1d5      	cbz	r5, 80154ae <rcl_action_take_cancel_response+0x76>
 8015478:	b1ce      	cbz	r6, 80154ae <rcl_action_take_cancel_response+0x76>
 801547a:	6820      	ldr	r0, [r4, #0]
 801547c:	4632      	mov	r2, r6
 801547e:	4629      	mov	r1, r5
 8015480:	3004      	adds	r0, #4
 8015482:	f7fd fea5 	bl	80131d0 <rcl_take_response>
 8015486:	b148      	cbz	r0, 801549c <rcl_action_take_cancel_response+0x64>
 8015488:	280a      	cmp	r0, #10
 801548a:	d007      	beq.n	801549c <rcl_action_take_cancel_response+0x64>
 801548c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015490:	f640 0337 	movw	r3, #2103	@ 0x837
 8015494:	4290      	cmp	r0, r2
 8015496:	bf0c      	ite	eq
 8015498:	4618      	moveq	r0, r3
 801549a:	2001      	movne	r0, #1
 801549c:	bd70      	pop	{r4, r5, r6, pc}
 801549e:	f7f7 fadb 	bl	800ca58 <rcutils_reset_error>
 80154a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
 80154a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80154ac:	bd70      	pop	{r4, r5, r6, pc}
 80154ae:	200b      	movs	r0, #11
 80154b0:	bd70      	pop	{r4, r5, r6, pc}
 80154b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80154b6:	4770      	bx	lr

080154b8 <rcl_action_take_feedback>:
 80154b8:	2800      	cmp	r0, #0
 80154ba:	d038      	beq.n	801552e <rcl_action_take_feedback+0x76>
 80154bc:	b530      	push	{r4, r5, lr}
 80154be:	4604      	mov	r4, r0
 80154c0:	6800      	ldr	r0, [r0, #0]
 80154c2:	b091      	sub	sp, #68	@ 0x44
 80154c4:	b378      	cbz	r0, 8015526 <rcl_action_take_feedback+0x6e>
 80154c6:	460d      	mov	r5, r1
 80154c8:	f7fd feca 	bl	8013260 <rcl_client_is_valid>
 80154cc:	b328      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154ce:	6820      	ldr	r0, [r4, #0]
 80154d0:	3004      	adds	r0, #4
 80154d2:	f7fd fec5 	bl	8013260 <rcl_client_is_valid>
 80154d6:	b300      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154d8:	6820      	ldr	r0, [r4, #0]
 80154da:	3008      	adds	r0, #8
 80154dc:	f7fd fec0 	bl	8013260 <rcl_client_is_valid>
 80154e0:	b1d8      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154e2:	6820      	ldr	r0, [r4, #0]
 80154e4:	300c      	adds	r0, #12
 80154e6:	f7fe ff09 	bl	80142fc <rcl_subscription_is_valid>
 80154ea:	b1b0      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154ec:	6820      	ldr	r0, [r4, #0]
 80154ee:	3010      	adds	r0, #16
 80154f0:	f7fe ff04 	bl	80142fc <rcl_subscription_is_valid>
 80154f4:	b188      	cbz	r0, 801551a <rcl_action_take_feedback+0x62>
 80154f6:	b1ed      	cbz	r5, 8015534 <rcl_action_take_feedback+0x7c>
 80154f8:	6820      	ldr	r0, [r4, #0]
 80154fa:	2300      	movs	r3, #0
 80154fc:	466a      	mov	r2, sp
 80154fe:	4629      	mov	r1, r5
 8015500:	300c      	adds	r0, #12
 8015502:	f7fe fe9d 	bl	8014240 <rcl_take>
 8015506:	b160      	cbz	r0, 8015522 <rcl_action_take_feedback+0x6a>
 8015508:	f240 1391 	movw	r3, #401	@ 0x191
 801550c:	4298      	cmp	r0, r3
 801550e:	d014      	beq.n	801553a <rcl_action_take_feedback+0x82>
 8015510:	280a      	cmp	r0, #10
 8015512:	bf18      	it	ne
 8015514:	2001      	movne	r0, #1
 8015516:	b011      	add	sp, #68	@ 0x44
 8015518:	bd30      	pop	{r4, r5, pc}
 801551a:	f7f7 fa9d 	bl	800ca58 <rcutils_reset_error>
 801551e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015522:	b011      	add	sp, #68	@ 0x44
 8015524:	bd30      	pop	{r4, r5, pc}
 8015526:	f640 0036 	movw	r0, #2102	@ 0x836
 801552a:	b011      	add	sp, #68	@ 0x44
 801552c:	bd30      	pop	{r4, r5, pc}
 801552e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015532:	4770      	bx	lr
 8015534:	200b      	movs	r0, #11
 8015536:	b011      	add	sp, #68	@ 0x44
 8015538:	bd30      	pop	{r4, r5, pc}
 801553a:	f640 0037 	movw	r0, #2103	@ 0x837
 801553e:	e7f0      	b.n	8015522 <rcl_action_take_feedback+0x6a>

08015540 <rcl_action_wait_set_add_action_client>:
 8015540:	2800      	cmp	r0, #0
 8015542:	d048      	beq.n	80155d6 <rcl_action_wait_set_add_action_client+0x96>
 8015544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015546:	460c      	mov	r4, r1
 8015548:	2900      	cmp	r1, #0
 801554a:	d03c      	beq.n	80155c6 <rcl_action_wait_set_add_action_client+0x86>
 801554c:	4605      	mov	r5, r0
 801554e:	6808      	ldr	r0, [r1, #0]
 8015550:	2800      	cmp	r0, #0
 8015552:	d038      	beq.n	80155c6 <rcl_action_wait_set_add_action_client+0x86>
 8015554:	4617      	mov	r7, r2
 8015556:	461e      	mov	r6, r3
 8015558:	f7fd fe82 	bl	8013260 <rcl_client_is_valid>
 801555c:	b3b0      	cbz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x8c>
 801555e:	6820      	ldr	r0, [r4, #0]
 8015560:	3004      	adds	r0, #4
 8015562:	f7fd fe7d 	bl	8013260 <rcl_client_is_valid>
 8015566:	b388      	cbz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x8c>
 8015568:	6820      	ldr	r0, [r4, #0]
 801556a:	3008      	adds	r0, #8
 801556c:	f7fd fe78 	bl	8013260 <rcl_client_is_valid>
 8015570:	b360      	cbz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x8c>
 8015572:	6820      	ldr	r0, [r4, #0]
 8015574:	300c      	adds	r0, #12
 8015576:	f7fe fec1 	bl	80142fc <rcl_subscription_is_valid>
 801557a:	b338      	cbz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x8c>
 801557c:	6820      	ldr	r0, [r4, #0]
 801557e:	3010      	adds	r0, #16
 8015580:	f7fe febc 	bl	80142fc <rcl_subscription_is_valid>
 8015584:	b310      	cbz	r0, 80155cc <rcl_action_wait_set_add_action_client+0x8c>
 8015586:	6821      	ldr	r1, [r4, #0]
 8015588:	4628      	mov	r0, r5
 801558a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801558e:	f7ff fccf 	bl	8014f30 <rcl_wait_set_add_client>
 8015592:	b9b8      	cbnz	r0, 80155c4 <rcl_action_wait_set_add_action_client+0x84>
 8015594:	6821      	ldr	r1, [r4, #0]
 8015596:	4628      	mov	r0, r5
 8015598:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801559c:	3104      	adds	r1, #4
 801559e:	f7ff fcc7 	bl	8014f30 <rcl_wait_set_add_client>
 80155a2:	b978      	cbnz	r0, 80155c4 <rcl_action_wait_set_add_action_client+0x84>
 80155a4:	6821      	ldr	r1, [r4, #0]
 80155a6:	4628      	mov	r0, r5
 80155a8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80155ac:	3108      	adds	r1, #8
 80155ae:	f7ff fcbf 	bl	8014f30 <rcl_wait_set_add_client>
 80155b2:	b938      	cbnz	r0, 80155c4 <rcl_action_wait_set_add_action_client+0x84>
 80155b4:	6821      	ldr	r1, [r4, #0]
 80155b6:	4628      	mov	r0, r5
 80155b8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80155bc:	310c      	adds	r1, #12
 80155be:	f7ff f96f 	bl	80148a0 <rcl_wait_set_add_subscription>
 80155c2:	b158      	cbz	r0, 80155dc <rcl_action_wait_set_add_action_client+0x9c>
 80155c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80155ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155cc:	f7f7 fa44 	bl	800ca58 <rcutils_reset_error>
 80155d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80155d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80155da:	4770      	bx	lr
 80155dc:	6821      	ldr	r1, [r4, #0]
 80155de:	4628      	mov	r0, r5
 80155e0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80155e4:	3110      	adds	r1, #16
 80155e6:	f7ff f95b 	bl	80148a0 <rcl_wait_set_add_subscription>
 80155ea:	2800      	cmp	r0, #0
 80155ec:	d1ea      	bne.n	80155c4 <rcl_action_wait_set_add_action_client+0x84>
 80155ee:	b11f      	cbz	r7, 80155f8 <rcl_action_wait_set_add_action_client+0xb8>
 80155f0:	6823      	ldr	r3, [r4, #0]
 80155f2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80155f6:	603b      	str	r3, [r7, #0]
 80155f8:	2e00      	cmp	r6, #0
 80155fa:	d0e3      	beq.n	80155c4 <rcl_action_wait_set_add_action_client+0x84>
 80155fc:	6823      	ldr	r3, [r4, #0]
 80155fe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8015602:	6033      	str	r3, [r6, #0]
 8015604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015606:	bf00      	nop

08015608 <rcl_action_client_wait_set_get_entities_ready>:
 8015608:	2800      	cmp	r0, #0
 801560a:	f000 808d 	beq.w	8015728 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801560e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015612:	460c      	mov	r4, r1
 8015614:	2900      	cmp	r1, #0
 8015616:	d077      	beq.n	8015708 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015618:	4605      	mov	r5, r0
 801561a:	6808      	ldr	r0, [r1, #0]
 801561c:	2800      	cmp	r0, #0
 801561e:	d073      	beq.n	8015708 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015620:	4616      	mov	r6, r2
 8015622:	461f      	mov	r7, r3
 8015624:	f7fd fe1c 	bl	8013260 <rcl_client_is_valid>
 8015628:	2800      	cmp	r0, #0
 801562a:	d071      	beq.n	8015710 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801562c:	6820      	ldr	r0, [r4, #0]
 801562e:	3004      	adds	r0, #4
 8015630:	f7fd fe16 	bl	8013260 <rcl_client_is_valid>
 8015634:	2800      	cmp	r0, #0
 8015636:	d06b      	beq.n	8015710 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015638:	6820      	ldr	r0, [r4, #0]
 801563a:	3008      	adds	r0, #8
 801563c:	f7fd fe10 	bl	8013260 <rcl_client_is_valid>
 8015640:	2800      	cmp	r0, #0
 8015642:	d065      	beq.n	8015710 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015644:	6820      	ldr	r0, [r4, #0]
 8015646:	300c      	adds	r0, #12
 8015648:	f7fe fe58 	bl	80142fc <rcl_subscription_is_valid>
 801564c:	2800      	cmp	r0, #0
 801564e:	d05f      	beq.n	8015710 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015650:	6820      	ldr	r0, [r4, #0]
 8015652:	3010      	adds	r0, #16
 8015654:	f7fe fe52 	bl	80142fc <rcl_subscription_is_valid>
 8015658:	2800      	cmp	r0, #0
 801565a:	d059      	beq.n	8015710 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801565c:	2e00      	cmp	r6, #0
 801565e:	d060      	beq.n	8015722 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015660:	2f00      	cmp	r7, #0
 8015662:	d05e      	beq.n	8015722 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015664:	9b06      	ldr	r3, [sp, #24]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d05b      	beq.n	8015722 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801566a:	9b07      	ldr	r3, [sp, #28]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d058      	beq.n	8015722 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015670:	9b08      	ldr	r3, [sp, #32]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d055      	beq.n	8015722 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8015676:	6823      	ldr	r3, [r4, #0]
 8015678:	686a      	ldr	r2, [r5, #4]
 801567a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801567e:	428a      	cmp	r2, r1
 8015680:	d94c      	bls.n	801571c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015682:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8015686:	4282      	cmp	r2, r0
 8015688:	d948      	bls.n	801571c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801568a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801568e:	69ea      	ldr	r2, [r5, #28]
 8015690:	42a2      	cmp	r2, r4
 8015692:	d943      	bls.n	801571c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015694:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015698:	4562      	cmp	r2, ip
 801569a:	d93f      	bls.n	801571c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801569c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80156a0:	4572      	cmp	r2, lr
 80156a2:	d93b      	bls.n	801571c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80156a4:	69aa      	ldr	r2, [r5, #24]
 80156a6:	682d      	ldr	r5, [r5, #0]
 80156a8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80156ac:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80156b0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80156b4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80156b8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80156bc:	f103 0c0c 	add.w	ip, r3, #12
 80156c0:	eba5 050c 	sub.w	r5, r5, ip
 80156c4:	fab5 f585 	clz	r5, r5
 80156c8:	096d      	lsrs	r5, r5, #5
 80156ca:	7035      	strb	r5, [r6, #0]
 80156cc:	f103 0510 	add.w	r5, r3, #16
 80156d0:	1b64      	subs	r4, r4, r5
 80156d2:	fab4 f484 	clz	r4, r4
 80156d6:	0964      	lsrs	r4, r4, #5
 80156d8:	703c      	strb	r4, [r7, #0]
 80156da:	eba3 0008 	sub.w	r0, r3, r8
 80156de:	1d1c      	adds	r4, r3, #4
 80156e0:	3308      	adds	r3, #8
 80156e2:	1ad3      	subs	r3, r2, r3
 80156e4:	fab0 f080 	clz	r0, r0
 80156e8:	9a06      	ldr	r2, [sp, #24]
 80156ea:	0940      	lsrs	r0, r0, #5
 80156ec:	1b09      	subs	r1, r1, r4
 80156ee:	7010      	strb	r0, [r2, #0]
 80156f0:	fab1 f181 	clz	r1, r1
 80156f4:	9a07      	ldr	r2, [sp, #28]
 80156f6:	0949      	lsrs	r1, r1, #5
 80156f8:	7011      	strb	r1, [r2, #0]
 80156fa:	fab3 f383 	clz	r3, r3
 80156fe:	9a08      	ldr	r2, [sp, #32]
 8015700:	095b      	lsrs	r3, r3, #5
 8015702:	2000      	movs	r0, #0
 8015704:	7013      	strb	r3, [r2, #0]
 8015706:	e001      	b.n	801570c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015708:	f640 0036 	movw	r0, #2102	@ 0x836
 801570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015710:	f7f7 f9a2 	bl	800ca58 <rcutils_reset_error>
 8015714:	f640 0036 	movw	r0, #2102	@ 0x836
 8015718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571c:	2001      	movs	r0, #1
 801571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015722:	200b      	movs	r0, #11
 8015724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015728:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801572c:	4770      	bx	lr
 801572e:	bf00      	nop

08015730 <rcl_action_take_goal_request>:
 8015730:	2800      	cmp	r0, #0
 8015732:	d039      	beq.n	80157a8 <rcl_action_take_goal_request+0x78>
 8015734:	b570      	push	{r4, r5, r6, lr}
 8015736:	4604      	mov	r4, r0
 8015738:	6800      	ldr	r0, [r0, #0]
 801573a:	b380      	cbz	r0, 801579e <rcl_action_take_goal_request+0x6e>
 801573c:	460d      	mov	r5, r1
 801573e:	4616      	mov	r6, r2
 8015740:	f7fe fc98 	bl	8014074 <rcl_service_is_valid>
 8015744:	b330      	cbz	r0, 8015794 <rcl_action_take_goal_request+0x64>
 8015746:	6820      	ldr	r0, [r4, #0]
 8015748:	3004      	adds	r0, #4
 801574a:	f7fe fc93 	bl	8014074 <rcl_service_is_valid>
 801574e:	b308      	cbz	r0, 8015794 <rcl_action_take_goal_request+0x64>
 8015750:	6820      	ldr	r0, [r4, #0]
 8015752:	3008      	adds	r0, #8
 8015754:	f7fe fc8e 	bl	8014074 <rcl_service_is_valid>
 8015758:	b1e0      	cbz	r0, 8015794 <rcl_action_take_goal_request+0x64>
 801575a:	6820      	ldr	r0, [r4, #0]
 801575c:	300c      	adds	r0, #12
 801575e:	f7f6 f979 	bl	800ba54 <rcl_publisher_is_valid>
 8015762:	b1b8      	cbz	r0, 8015794 <rcl_action_take_goal_request+0x64>
 8015764:	6820      	ldr	r0, [r4, #0]
 8015766:	3010      	adds	r0, #16
 8015768:	f7f6 f974 	bl	800ba54 <rcl_publisher_is_valid>
 801576c:	b190      	cbz	r0, 8015794 <rcl_action_take_goal_request+0x64>
 801576e:	b1cd      	cbz	r5, 80157a4 <rcl_action_take_goal_request+0x74>
 8015770:	b1c6      	cbz	r6, 80157a4 <rcl_action_take_goal_request+0x74>
 8015772:	6820      	ldr	r0, [r4, #0]
 8015774:	4632      	mov	r2, r6
 8015776:	4629      	mov	r1, r5
 8015778:	f7fe fc24 	bl	8013fc4 <rcl_take_request>
 801577c:	b148      	cbz	r0, 8015792 <rcl_action_take_goal_request+0x62>
 801577e:	280a      	cmp	r0, #10
 8015780:	d007      	beq.n	8015792 <rcl_action_take_goal_request+0x62>
 8015782:	f240 2259 	movw	r2, #601	@ 0x259
 8015786:	f640 0399 	movw	r3, #2201	@ 0x899
 801578a:	4290      	cmp	r0, r2
 801578c:	bf0c      	ite	eq
 801578e:	4618      	moveq	r0, r3
 8015790:	2001      	movne	r0, #1
 8015792:	bd70      	pop	{r4, r5, r6, pc}
 8015794:	f7f7 f960 	bl	800ca58 <rcutils_reset_error>
 8015798:	f640 0098 	movw	r0, #2200	@ 0x898
 801579c:	bd70      	pop	{r4, r5, r6, pc}
 801579e:	f640 0098 	movw	r0, #2200	@ 0x898
 80157a2:	bd70      	pop	{r4, r5, r6, pc}
 80157a4:	200b      	movs	r0, #11
 80157a6:	bd70      	pop	{r4, r5, r6, pc}
 80157a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop

080157b0 <rcl_action_send_goal_response>:
 80157b0:	b390      	cbz	r0, 8015818 <rcl_action_send_goal_response+0x68>
 80157b2:	b570      	push	{r4, r5, r6, lr}
 80157b4:	4604      	mov	r4, r0
 80157b6:	6800      	ldr	r0, [r0, #0]
 80157b8:	b348      	cbz	r0, 801580e <rcl_action_send_goal_response+0x5e>
 80157ba:	460d      	mov	r5, r1
 80157bc:	4616      	mov	r6, r2
 80157be:	f7fe fc59 	bl	8014074 <rcl_service_is_valid>
 80157c2:	b1f8      	cbz	r0, 8015804 <rcl_action_send_goal_response+0x54>
 80157c4:	6820      	ldr	r0, [r4, #0]
 80157c6:	3004      	adds	r0, #4
 80157c8:	f7fe fc54 	bl	8014074 <rcl_service_is_valid>
 80157cc:	b1d0      	cbz	r0, 8015804 <rcl_action_send_goal_response+0x54>
 80157ce:	6820      	ldr	r0, [r4, #0]
 80157d0:	3008      	adds	r0, #8
 80157d2:	f7fe fc4f 	bl	8014074 <rcl_service_is_valid>
 80157d6:	b1a8      	cbz	r0, 8015804 <rcl_action_send_goal_response+0x54>
 80157d8:	6820      	ldr	r0, [r4, #0]
 80157da:	300c      	adds	r0, #12
 80157dc:	f7f6 f93a 	bl	800ba54 <rcl_publisher_is_valid>
 80157e0:	b180      	cbz	r0, 8015804 <rcl_action_send_goal_response+0x54>
 80157e2:	6820      	ldr	r0, [r4, #0]
 80157e4:	3010      	adds	r0, #16
 80157e6:	f7f6 f935 	bl	800ba54 <rcl_publisher_is_valid>
 80157ea:	b158      	cbz	r0, 8015804 <rcl_action_send_goal_response+0x54>
 80157ec:	b195      	cbz	r5, 8015814 <rcl_action_send_goal_response+0x64>
 80157ee:	b18e      	cbz	r6, 8015814 <rcl_action_send_goal_response+0x64>
 80157f0:	6820      	ldr	r0, [r4, #0]
 80157f2:	4632      	mov	r2, r6
 80157f4:	4629      	mov	r1, r5
 80157f6:	f7fe fc25 	bl	8014044 <rcl_send_response>
 80157fa:	b110      	cbz	r0, 8015802 <rcl_action_send_goal_response+0x52>
 80157fc:	2802      	cmp	r0, #2
 80157fe:	bf18      	it	ne
 8015800:	2001      	movne	r0, #1
 8015802:	bd70      	pop	{r4, r5, r6, pc}
 8015804:	f7f7 f928 	bl	800ca58 <rcutils_reset_error>
 8015808:	f640 0098 	movw	r0, #2200	@ 0x898
 801580c:	bd70      	pop	{r4, r5, r6, pc}
 801580e:	f640 0098 	movw	r0, #2200	@ 0x898
 8015812:	bd70      	pop	{r4, r5, r6, pc}
 8015814:	200b      	movs	r0, #11
 8015816:	bd70      	pop	{r4, r5, r6, pc}
 8015818:	f640 0098 	movw	r0, #2200	@ 0x898
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop

08015820 <rcl_action_take_result_request>:
 8015820:	2800      	cmp	r0, #0
 8015822:	d03a      	beq.n	801589a <rcl_action_take_result_request+0x7a>
 8015824:	b570      	push	{r4, r5, r6, lr}
 8015826:	4604      	mov	r4, r0
 8015828:	6800      	ldr	r0, [r0, #0]
 801582a:	b388      	cbz	r0, 8015890 <rcl_action_take_result_request+0x70>
 801582c:	460d      	mov	r5, r1
 801582e:	4616      	mov	r6, r2
 8015830:	f7fe fc20 	bl	8014074 <rcl_service_is_valid>
 8015834:	b338      	cbz	r0, 8015886 <rcl_action_take_result_request+0x66>
 8015836:	6820      	ldr	r0, [r4, #0]
 8015838:	3004      	adds	r0, #4
 801583a:	f7fe fc1b 	bl	8014074 <rcl_service_is_valid>
 801583e:	b310      	cbz	r0, 8015886 <rcl_action_take_result_request+0x66>
 8015840:	6820      	ldr	r0, [r4, #0]
 8015842:	3008      	adds	r0, #8
 8015844:	f7fe fc16 	bl	8014074 <rcl_service_is_valid>
 8015848:	b1e8      	cbz	r0, 8015886 <rcl_action_take_result_request+0x66>
 801584a:	6820      	ldr	r0, [r4, #0]
 801584c:	300c      	adds	r0, #12
 801584e:	f7f6 f901 	bl	800ba54 <rcl_publisher_is_valid>
 8015852:	b1c0      	cbz	r0, 8015886 <rcl_action_take_result_request+0x66>
 8015854:	6820      	ldr	r0, [r4, #0]
 8015856:	3010      	adds	r0, #16
 8015858:	f7f6 f8fc 	bl	800ba54 <rcl_publisher_is_valid>
 801585c:	b198      	cbz	r0, 8015886 <rcl_action_take_result_request+0x66>
 801585e:	b1d5      	cbz	r5, 8015896 <rcl_action_take_result_request+0x76>
 8015860:	b1ce      	cbz	r6, 8015896 <rcl_action_take_result_request+0x76>
 8015862:	6820      	ldr	r0, [r4, #0]
 8015864:	4632      	mov	r2, r6
 8015866:	4629      	mov	r1, r5
 8015868:	3008      	adds	r0, #8
 801586a:	f7fe fbab 	bl	8013fc4 <rcl_take_request>
 801586e:	b148      	cbz	r0, 8015884 <rcl_action_take_result_request+0x64>
 8015870:	280a      	cmp	r0, #10
 8015872:	d007      	beq.n	8015884 <rcl_action_take_result_request+0x64>
 8015874:	f240 2259 	movw	r2, #601	@ 0x259
 8015878:	f640 0399 	movw	r3, #2201	@ 0x899
 801587c:	4290      	cmp	r0, r2
 801587e:	bf0c      	ite	eq
 8015880:	4618      	moveq	r0, r3
 8015882:	2001      	movne	r0, #1
 8015884:	bd70      	pop	{r4, r5, r6, pc}
 8015886:	f7f7 f8e7 	bl	800ca58 <rcutils_reset_error>
 801588a:	f640 0098 	movw	r0, #2200	@ 0x898
 801588e:	bd70      	pop	{r4, r5, r6, pc}
 8015890:	f640 0098 	movw	r0, #2200	@ 0x898
 8015894:	bd70      	pop	{r4, r5, r6, pc}
 8015896:	200b      	movs	r0, #11
 8015898:	bd70      	pop	{r4, r5, r6, pc}
 801589a:	f640 0098 	movw	r0, #2200	@ 0x898
 801589e:	4770      	bx	lr

080158a0 <rcl_action_take_cancel_request>:
 80158a0:	2800      	cmp	r0, #0
 80158a2:	d03a      	beq.n	801591a <rcl_action_take_cancel_request+0x7a>
 80158a4:	b570      	push	{r4, r5, r6, lr}
 80158a6:	4604      	mov	r4, r0
 80158a8:	6800      	ldr	r0, [r0, #0]
 80158aa:	b388      	cbz	r0, 8015910 <rcl_action_take_cancel_request+0x70>
 80158ac:	460d      	mov	r5, r1
 80158ae:	4616      	mov	r6, r2
 80158b0:	f7fe fbe0 	bl	8014074 <rcl_service_is_valid>
 80158b4:	b338      	cbz	r0, 8015906 <rcl_action_take_cancel_request+0x66>
 80158b6:	6820      	ldr	r0, [r4, #0]
 80158b8:	3004      	adds	r0, #4
 80158ba:	f7fe fbdb 	bl	8014074 <rcl_service_is_valid>
 80158be:	b310      	cbz	r0, 8015906 <rcl_action_take_cancel_request+0x66>
 80158c0:	6820      	ldr	r0, [r4, #0]
 80158c2:	3008      	adds	r0, #8
 80158c4:	f7fe fbd6 	bl	8014074 <rcl_service_is_valid>
 80158c8:	b1e8      	cbz	r0, 8015906 <rcl_action_take_cancel_request+0x66>
 80158ca:	6820      	ldr	r0, [r4, #0]
 80158cc:	300c      	adds	r0, #12
 80158ce:	f7f6 f8c1 	bl	800ba54 <rcl_publisher_is_valid>
 80158d2:	b1c0      	cbz	r0, 8015906 <rcl_action_take_cancel_request+0x66>
 80158d4:	6820      	ldr	r0, [r4, #0]
 80158d6:	3010      	adds	r0, #16
 80158d8:	f7f6 f8bc 	bl	800ba54 <rcl_publisher_is_valid>
 80158dc:	b198      	cbz	r0, 8015906 <rcl_action_take_cancel_request+0x66>
 80158de:	b1d5      	cbz	r5, 8015916 <rcl_action_take_cancel_request+0x76>
 80158e0:	b1ce      	cbz	r6, 8015916 <rcl_action_take_cancel_request+0x76>
 80158e2:	6820      	ldr	r0, [r4, #0]
 80158e4:	4632      	mov	r2, r6
 80158e6:	4629      	mov	r1, r5
 80158e8:	3004      	adds	r0, #4
 80158ea:	f7fe fb6b 	bl	8013fc4 <rcl_take_request>
 80158ee:	b148      	cbz	r0, 8015904 <rcl_action_take_cancel_request+0x64>
 80158f0:	280a      	cmp	r0, #10
 80158f2:	d007      	beq.n	8015904 <rcl_action_take_cancel_request+0x64>
 80158f4:	f240 2259 	movw	r2, #601	@ 0x259
 80158f8:	f640 0399 	movw	r3, #2201	@ 0x899
 80158fc:	4290      	cmp	r0, r2
 80158fe:	bf0c      	ite	eq
 8015900:	4618      	moveq	r0, r3
 8015902:	2001      	movne	r0, #1
 8015904:	bd70      	pop	{r4, r5, r6, pc}
 8015906:	f7f7 f8a7 	bl	800ca58 <rcutils_reset_error>
 801590a:	f640 0098 	movw	r0, #2200	@ 0x898
 801590e:	bd70      	pop	{r4, r5, r6, pc}
 8015910:	f640 0098 	movw	r0, #2200	@ 0x898
 8015914:	bd70      	pop	{r4, r5, r6, pc}
 8015916:	200b      	movs	r0, #11
 8015918:	bd70      	pop	{r4, r5, r6, pc}
 801591a:	f640 0098 	movw	r0, #2200	@ 0x898
 801591e:	4770      	bx	lr

08015920 <rcl_action_send_cancel_response>:
 8015920:	b398      	cbz	r0, 801598a <rcl_action_send_cancel_response+0x6a>
 8015922:	b570      	push	{r4, r5, r6, lr}
 8015924:	4604      	mov	r4, r0
 8015926:	6800      	ldr	r0, [r0, #0]
 8015928:	b350      	cbz	r0, 8015980 <rcl_action_send_cancel_response+0x60>
 801592a:	460d      	mov	r5, r1
 801592c:	4616      	mov	r6, r2
 801592e:	f7fe fba1 	bl	8014074 <rcl_service_is_valid>
 8015932:	b300      	cbz	r0, 8015976 <rcl_action_send_cancel_response+0x56>
 8015934:	6820      	ldr	r0, [r4, #0]
 8015936:	3004      	adds	r0, #4
 8015938:	f7fe fb9c 	bl	8014074 <rcl_service_is_valid>
 801593c:	b1d8      	cbz	r0, 8015976 <rcl_action_send_cancel_response+0x56>
 801593e:	6820      	ldr	r0, [r4, #0]
 8015940:	3008      	adds	r0, #8
 8015942:	f7fe fb97 	bl	8014074 <rcl_service_is_valid>
 8015946:	b1b0      	cbz	r0, 8015976 <rcl_action_send_cancel_response+0x56>
 8015948:	6820      	ldr	r0, [r4, #0]
 801594a:	300c      	adds	r0, #12
 801594c:	f7f6 f882 	bl	800ba54 <rcl_publisher_is_valid>
 8015950:	b188      	cbz	r0, 8015976 <rcl_action_send_cancel_response+0x56>
 8015952:	6820      	ldr	r0, [r4, #0]
 8015954:	3010      	adds	r0, #16
 8015956:	f7f6 f87d 	bl	800ba54 <rcl_publisher_is_valid>
 801595a:	b160      	cbz	r0, 8015976 <rcl_action_send_cancel_response+0x56>
 801595c:	b19d      	cbz	r5, 8015986 <rcl_action_send_cancel_response+0x66>
 801595e:	b196      	cbz	r6, 8015986 <rcl_action_send_cancel_response+0x66>
 8015960:	6820      	ldr	r0, [r4, #0]
 8015962:	4632      	mov	r2, r6
 8015964:	4629      	mov	r1, r5
 8015966:	3004      	adds	r0, #4
 8015968:	f7fe fb6c 	bl	8014044 <rcl_send_response>
 801596c:	b110      	cbz	r0, 8015974 <rcl_action_send_cancel_response+0x54>
 801596e:	2802      	cmp	r0, #2
 8015970:	bf18      	it	ne
 8015972:	2001      	movne	r0, #1
 8015974:	bd70      	pop	{r4, r5, r6, pc}
 8015976:	f7f7 f86f 	bl	800ca58 <rcutils_reset_error>
 801597a:	f640 0098 	movw	r0, #2200	@ 0x898
 801597e:	bd70      	pop	{r4, r5, r6, pc}
 8015980:	f640 0098 	movw	r0, #2200	@ 0x898
 8015984:	bd70      	pop	{r4, r5, r6, pc}
 8015986:	200b      	movs	r0, #11
 8015988:	bd70      	pop	{r4, r5, r6, pc}
 801598a:	f640 0098 	movw	r0, #2200	@ 0x898
 801598e:	4770      	bx	lr

08015990 <rcl_action_wait_set_add_action_server>:
 8015990:	2800      	cmp	r0, #0
 8015992:	d04d      	beq.n	8015a30 <rcl_action_wait_set_add_action_server+0xa0>
 8015994:	b570      	push	{r4, r5, r6, lr}
 8015996:	460c      	mov	r4, r1
 8015998:	b159      	cbz	r1, 80159b2 <rcl_action_wait_set_add_action_server+0x22>
 801599a:	4605      	mov	r5, r0
 801599c:	6808      	ldr	r0, [r1, #0]
 801599e:	b140      	cbz	r0, 80159b2 <rcl_action_wait_set_add_action_server+0x22>
 80159a0:	4616      	mov	r6, r2
 80159a2:	f7fe fb67 	bl	8014074 <rcl_service_is_valid>
 80159a6:	b120      	cbz	r0, 80159b2 <rcl_action_wait_set_add_action_server+0x22>
 80159a8:	6820      	ldr	r0, [r4, #0]
 80159aa:	3004      	adds	r0, #4
 80159ac:	f7fe fb62 	bl	8014074 <rcl_service_is_valid>
 80159b0:	b910      	cbnz	r0, 80159b8 <rcl_action_wait_set_add_action_server+0x28>
 80159b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80159b6:	bd70      	pop	{r4, r5, r6, pc}
 80159b8:	6820      	ldr	r0, [r4, #0]
 80159ba:	3008      	adds	r0, #8
 80159bc:	f7fe fb5a 	bl	8014074 <rcl_service_is_valid>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	d0f6      	beq.n	80159b2 <rcl_action_wait_set_add_action_server+0x22>
 80159c4:	6820      	ldr	r0, [r4, #0]
 80159c6:	300c      	adds	r0, #12
 80159c8:	f7f6 f85c 	bl	800ba84 <rcl_publisher_is_valid_except_context>
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d0f0      	beq.n	80159b2 <rcl_action_wait_set_add_action_server+0x22>
 80159d0:	6820      	ldr	r0, [r4, #0]
 80159d2:	3010      	adds	r0, #16
 80159d4:	f7f6 f856 	bl	800ba84 <rcl_publisher_is_valid_except_context>
 80159d8:	2800      	cmp	r0, #0
 80159da:	d0ea      	beq.n	80159b2 <rcl_action_wait_set_add_action_server+0x22>
 80159dc:	6821      	ldr	r1, [r4, #0]
 80159de:	4628      	mov	r0, r5
 80159e0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80159e4:	f7ff fad0 	bl	8014f88 <rcl_wait_set_add_service>
 80159e8:	2800      	cmp	r0, #0
 80159ea:	d1e4      	bne.n	80159b6 <rcl_action_wait_set_add_action_server+0x26>
 80159ec:	6821      	ldr	r1, [r4, #0]
 80159ee:	4628      	mov	r0, r5
 80159f0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80159f4:	3104      	adds	r1, #4
 80159f6:	f7ff fac7 	bl	8014f88 <rcl_wait_set_add_service>
 80159fa:	2800      	cmp	r0, #0
 80159fc:	d1db      	bne.n	80159b6 <rcl_action_wait_set_add_action_server+0x26>
 80159fe:	6821      	ldr	r1, [r4, #0]
 8015a00:	4628      	mov	r0, r5
 8015a02:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015a06:	3108      	adds	r1, #8
 8015a08:	f7ff fabe 	bl	8014f88 <rcl_wait_set_add_service>
 8015a0c:	2800      	cmp	r0, #0
 8015a0e:	d1d2      	bne.n	80159b6 <rcl_action_wait_set_add_action_server+0x26>
 8015a10:	6821      	ldr	r1, [r4, #0]
 8015a12:	4628      	mov	r0, r5
 8015a14:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015a18:	3114      	adds	r1, #20
 8015a1a:	f7ff fa59 	bl	8014ed0 <rcl_wait_set_add_timer>
 8015a1e:	2800      	cmp	r0, #0
 8015a20:	d1c9      	bne.n	80159b6 <rcl_action_wait_set_add_action_server+0x26>
 8015a22:	2e00      	cmp	r6, #0
 8015a24:	d0c7      	beq.n	80159b6 <rcl_action_wait_set_add_action_server+0x26>
 8015a26:	6823      	ldr	r3, [r4, #0]
 8015a28:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015a2c:	6033      	str	r3, [r6, #0]
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
 8015a30:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a34:	4770      	bx	lr
 8015a36:	bf00      	nop

08015a38 <rcl_action_server_wait_set_get_entities_ready>:
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d05a      	beq.n	8015af2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8015a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a3e:	460c      	mov	r4, r1
 8015a40:	b161      	cbz	r1, 8015a5c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a42:	4605      	mov	r5, r0
 8015a44:	6808      	ldr	r0, [r1, #0]
 8015a46:	b148      	cbz	r0, 8015a5c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a48:	4616      	mov	r6, r2
 8015a4a:	461f      	mov	r7, r3
 8015a4c:	f7fe fb12 	bl	8014074 <rcl_service_is_valid>
 8015a50:	b120      	cbz	r0, 8015a5c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a52:	6820      	ldr	r0, [r4, #0]
 8015a54:	3004      	adds	r0, #4
 8015a56:	f7fe fb0d 	bl	8014074 <rcl_service_is_valid>
 8015a5a:	b910      	cbnz	r0, 8015a62 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015a5c:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a62:	6820      	ldr	r0, [r4, #0]
 8015a64:	3008      	adds	r0, #8
 8015a66:	f7fe fb05 	bl	8014074 <rcl_service_is_valid>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	d0f6      	beq.n	8015a5c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a6e:	6820      	ldr	r0, [r4, #0]
 8015a70:	300c      	adds	r0, #12
 8015a72:	f7f6 f807 	bl	800ba84 <rcl_publisher_is_valid_except_context>
 8015a76:	2800      	cmp	r0, #0
 8015a78:	d0f0      	beq.n	8015a5c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a7a:	6820      	ldr	r0, [r4, #0]
 8015a7c:	3010      	adds	r0, #16
 8015a7e:	f7f6 f801 	bl	800ba84 <rcl_publisher_is_valid_except_context>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d0ea      	beq.n	8015a5c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015a86:	b3be      	cbz	r6, 8015af8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a88:	b3b7      	cbz	r7, 8015af8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a8a:	9b06      	ldr	r3, [sp, #24]
 8015a8c:	b3a3      	cbz	r3, 8015af8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a8e:	9b07      	ldr	r3, [sp, #28]
 8015a90:	b393      	cbz	r3, 8015af8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015a92:	6821      	ldr	r1, [r4, #0]
 8015a94:	692a      	ldr	r2, [r5, #16]
 8015a96:	6a2c      	ldr	r4, [r5, #32]
 8015a98:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015a9c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015aa0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015aa4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015aa8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015aac:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015ab0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015ab4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015ab8:	1a64      	subs	r4, r4, r1
 8015aba:	fab4 f484 	clz	r4, r4
 8015abe:	0964      	lsrs	r4, r4, #5
 8015ac0:	7034      	strb	r4, [r6, #0]
 8015ac2:	1d0c      	adds	r4, r1, #4
 8015ac4:	1b1b      	subs	r3, r3, r4
 8015ac6:	fab3 f383 	clz	r3, r3
 8015aca:	095b      	lsrs	r3, r3, #5
 8015acc:	f101 0408 	add.w	r4, r1, #8
 8015ad0:	703b      	strb	r3, [r7, #0]
 8015ad2:	f101 0314 	add.w	r3, r1, #20
 8015ad6:	1b01      	subs	r1, r0, r4
 8015ad8:	1ad3      	subs	r3, r2, r3
 8015ada:	fab1 f181 	clz	r1, r1
 8015ade:	9a06      	ldr	r2, [sp, #24]
 8015ae0:	0949      	lsrs	r1, r1, #5
 8015ae2:	7011      	strb	r1, [r2, #0]
 8015ae4:	fab3 f383 	clz	r3, r3
 8015ae8:	9a07      	ldr	r2, [sp, #28]
 8015aea:	095b      	lsrs	r3, r3, #5
 8015aec:	2000      	movs	r0, #0
 8015aee:	7013      	strb	r3, [r2, #0]
 8015af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015af2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015af6:	4770      	bx	lr
 8015af8:	200b      	movs	r0, #11
 8015afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015afc <_execute_event_handler>:
 8015afc:	2002      	movs	r0, #2
 8015afe:	4770      	bx	lr

08015b00 <_cancel_goal_event_handler>:
 8015b00:	2003      	movs	r0, #3
 8015b02:	4770      	bx	lr

08015b04 <_succeed_event_handler>:
 8015b04:	2004      	movs	r0, #4
 8015b06:	4770      	bx	lr

08015b08 <_abort_event_handler>:
 8015b08:	2006      	movs	r0, #6
 8015b0a:	4770      	bx	lr

08015b0c <_canceled_event_handler>:
 8015b0c:	2005      	movs	r0, #5
 8015b0e:	4770      	bx	lr

08015b10 <rcl_action_transition_goal_state>:
 8015b10:	b2c2      	uxtb	r2, r0
 8015b12:	2a06      	cmp	r2, #6
 8015b14:	d80c      	bhi.n	8015b30 <rcl_action_transition_goal_state+0x20>
 8015b16:	2904      	cmp	r1, #4
 8015b18:	d80a      	bhi.n	8015b30 <rcl_action_transition_goal_state+0x20>
 8015b1a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015b1e:	b410      	push	{r4}
 8015b20:	1853      	adds	r3, r2, r1
 8015b22:	4c06      	ldr	r4, [pc, #24]	@ (8015b3c <rcl_action_transition_goal_state+0x2c>)
 8015b24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015b28:	b123      	cbz	r3, 8015b34 <rcl_action_transition_goal_state+0x24>
 8015b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b2e:	4718      	bx	r3
 8015b30:	2000      	movs	r0, #0
 8015b32:	4770      	bx	lr
 8015b34:	2000      	movs	r0, #0
 8015b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b3a:	4770      	bx	lr
 8015b3c:	0801d18c 	.word	0x0801d18c

08015b40 <rcl_action_get_zero_initialized_cancel_response>:
 8015b40:	b510      	push	{r4, lr}
 8015b42:	4c07      	ldr	r4, [pc, #28]	@ (8015b60 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015b44:	4686      	mov	lr, r0
 8015b46:	4684      	mov	ip, r0
 8015b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b54:	6823      	ldr	r3, [r4, #0]
 8015b56:	f8cc 3000 	str.w	r3, [ip]
 8015b5a:	4670      	mov	r0, lr
 8015b5c:	bd10      	pop	{r4, pc}
 8015b5e:	bf00      	nop
 8015b60:	0801d218 	.word	0x0801d218

08015b64 <rclc_action_send_result_request>:
 8015b64:	b1d0      	cbz	r0, 8015b9c <rclc_action_send_result_request+0x38>
 8015b66:	b500      	push	{lr}
 8015b68:	4684      	mov	ip, r0
 8015b6a:	b087      	sub	sp, #28
 8015b6c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015b70:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015b74:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015b78:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015b7c:	f10d 0e08 	add.w	lr, sp, #8
 8015b80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b84:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015b88:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015b8c:	a902      	add	r1, sp, #8
 8015b8e:	3010      	adds	r0, #16
 8015b90:	f7ff fbda 	bl	8015348 <rcl_action_send_result_request>
 8015b94:	b920      	cbnz	r0, 8015ba0 <rclc_action_send_result_request+0x3c>
 8015b96:	b007      	add	sp, #28
 8015b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b9c:	200b      	movs	r0, #11
 8015b9e:	4770      	bx	lr
 8015ba0:	9001      	str	r0, [sp, #4]
 8015ba2:	f7f6 ff59 	bl	800ca58 <rcutils_reset_error>
 8015ba6:	9801      	ldr	r0, [sp, #4]
 8015ba8:	b007      	add	sp, #28
 8015baa:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bae:	bf00      	nop

08015bb0 <rclc_action_take_goal_handle>:
 8015bb0:	b160      	cbz	r0, 8015bcc <rclc_action_take_goal_handle+0x1c>
 8015bb2:	6883      	ldr	r3, [r0, #8]
 8015bb4:	b143      	cbz	r3, 8015bc8 <rclc_action_take_goal_handle+0x18>
 8015bb6:	6819      	ldr	r1, [r3, #0]
 8015bb8:	6081      	str	r1, [r0, #8]
 8015bba:	2200      	movs	r2, #0
 8015bbc:	721a      	strb	r2, [r3, #8]
 8015bbe:	68c1      	ldr	r1, [r0, #12]
 8015bc0:	6019      	str	r1, [r3, #0]
 8015bc2:	621a      	str	r2, [r3, #32]
 8015bc4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015bc6:	60c3      	str	r3, [r0, #12]
 8015bc8:	4618      	mov	r0, r3
 8015bca:	4770      	bx	lr
 8015bcc:	4603      	mov	r3, r0
 8015bce:	e7fb      	b.n	8015bc8 <rclc_action_take_goal_handle+0x18>

08015bd0 <rclc_action_remove_used_goal_handle>:
 8015bd0:	b180      	cbz	r0, 8015bf4 <rclc_action_remove_used_goal_handle+0x24>
 8015bd2:	b179      	cbz	r1, 8015bf4 <rclc_action_remove_used_goal_handle+0x24>
 8015bd4:	68c3      	ldr	r3, [r0, #12]
 8015bd6:	4299      	cmp	r1, r3
 8015bd8:	d00d      	beq.n	8015bf6 <rclc_action_remove_used_goal_handle+0x26>
 8015bda:	b12b      	cbz	r3, 8015be8 <rclc_action_remove_used_goal_handle+0x18>
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	4291      	cmp	r1, r2
 8015be0:	d003      	beq.n	8015bea <rclc_action_remove_used_goal_handle+0x1a>
 8015be2:	4613      	mov	r3, r2
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d1f9      	bne.n	8015bdc <rclc_action_remove_used_goal_handle+0xc>
 8015be8:	4770      	bx	lr
 8015bea:	680a      	ldr	r2, [r1, #0]
 8015bec:	601a      	str	r2, [r3, #0]
 8015bee:	6883      	ldr	r3, [r0, #8]
 8015bf0:	600b      	str	r3, [r1, #0]
 8015bf2:	6081      	str	r1, [r0, #8]
 8015bf4:	4770      	bx	lr
 8015bf6:	680b      	ldr	r3, [r1, #0]
 8015bf8:	60c3      	str	r3, [r0, #12]
 8015bfa:	e7f8      	b.n	8015bee <rclc_action_remove_used_goal_handle+0x1e>

08015bfc <rclc_action_find_goal_handle_by_uuid>:
 8015bfc:	b538      	push	{r3, r4, r5, lr}
 8015bfe:	b180      	cbz	r0, 8015c22 <rclc_action_find_goal_handle_by_uuid+0x26>
 8015c00:	460d      	mov	r5, r1
 8015c02:	b181      	cbz	r1, 8015c26 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015c04:	68c4      	ldr	r4, [r0, #12]
 8015c06:	b914      	cbnz	r4, 8015c0e <rclc_action_find_goal_handle_by_uuid+0x12>
 8015c08:	e009      	b.n	8015c1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c0a:	6824      	ldr	r4, [r4, #0]
 8015c0c:	b13c      	cbz	r4, 8015c1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c0e:	f104 0009 	add.w	r0, r4, #9
 8015c12:	2210      	movs	r2, #16
 8015c14:	4629      	mov	r1, r5
 8015c16:	f005 fa06 	bl	801b026 <memcmp>
 8015c1a:	2800      	cmp	r0, #0
 8015c1c:	d1f5      	bne.n	8015c0a <rclc_action_find_goal_handle_by_uuid+0xe>
 8015c1e:	4620      	mov	r0, r4
 8015c20:	bd38      	pop	{r3, r4, r5, pc}
 8015c22:	4604      	mov	r4, r0
 8015c24:	e7fb      	b.n	8015c1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c26:	460c      	mov	r4, r1
 8015c28:	e7f9      	b.n	8015c1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8015c2a:	bf00      	nop

08015c2c <rclc_action_find_first_handle_by_status>:
 8015c2c:	b140      	cbz	r0, 8015c40 <rclc_action_find_first_handle_by_status+0x14>
 8015c2e:	68c0      	ldr	r0, [r0, #12]
 8015c30:	b910      	cbnz	r0, 8015c38 <rclc_action_find_first_handle_by_status+0xc>
 8015c32:	e005      	b.n	8015c40 <rclc_action_find_first_handle_by_status+0x14>
 8015c34:	6800      	ldr	r0, [r0, #0]
 8015c36:	b118      	cbz	r0, 8015c40 <rclc_action_find_first_handle_by_status+0x14>
 8015c38:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015c3c:	428b      	cmp	r3, r1
 8015c3e:	d1f9      	bne.n	8015c34 <rclc_action_find_first_handle_by_status+0x8>
 8015c40:	4770      	bx	lr
 8015c42:	bf00      	nop

08015c44 <rclc_action_find_first_terminated_handle>:
 8015c44:	b140      	cbz	r0, 8015c58 <rclc_action_find_first_terminated_handle+0x14>
 8015c46:	68c0      	ldr	r0, [r0, #12]
 8015c48:	b910      	cbnz	r0, 8015c50 <rclc_action_find_first_terminated_handle+0xc>
 8015c4a:	e005      	b.n	8015c58 <rclc_action_find_first_terminated_handle+0x14>
 8015c4c:	6800      	ldr	r0, [r0, #0]
 8015c4e:	b118      	cbz	r0, 8015c58 <rclc_action_find_first_terminated_handle+0x14>
 8015c50:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015c54:	2b03      	cmp	r3, #3
 8015c56:	ddf9      	ble.n	8015c4c <rclc_action_find_first_terminated_handle+0x8>
 8015c58:	4770      	bx	lr
 8015c5a:	bf00      	nop

08015c5c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015c5c:	b170      	cbz	r0, 8015c7c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c5e:	68c0      	ldr	r0, [r0, #12]
 8015c60:	b160      	cbz	r0, 8015c7c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015c62:	b410      	push	{r4}
 8015c64:	e001      	b.n	8015c6a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015c66:	6800      	ldr	r0, [r0, #0]
 8015c68:	b128      	cbz	r0, 8015c76 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015c6a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015c6e:	4299      	cmp	r1, r3
 8015c70:	bf08      	it	eq
 8015c72:	4294      	cmpeq	r4, r2
 8015c74:	d1f7      	bne.n	8015c66 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c7a:	4770      	bx	lr
 8015c7c:	4770      	bx	lr
 8015c7e:	bf00      	nop

08015c80 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015c80:	b170      	cbz	r0, 8015ca0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c82:	68c0      	ldr	r0, [r0, #12]
 8015c84:	b160      	cbz	r0, 8015ca0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015c86:	b410      	push	{r4}
 8015c88:	e001      	b.n	8015c8e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015c8a:	6800      	ldr	r0, [r0, #0]
 8015c8c:	b128      	cbz	r0, 8015c9a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015c8e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015c92:	4299      	cmp	r1, r3
 8015c94:	bf08      	it	eq
 8015c96:	4294      	cmpeq	r4, r2
 8015c98:	d1f7      	bne.n	8015c8a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c9e:	4770      	bx	lr
 8015ca0:	4770      	bx	lr
 8015ca2:	bf00      	nop

08015ca4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015ca4:	b170      	cbz	r0, 8015cc4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015ca6:	68c0      	ldr	r0, [r0, #12]
 8015ca8:	b160      	cbz	r0, 8015cc4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015caa:	b410      	push	{r4}
 8015cac:	e001      	b.n	8015cb2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015cae:	6800      	ldr	r0, [r0, #0]
 8015cb0:	b128      	cbz	r0, 8015cbe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015cb2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015cb6:	4299      	cmp	r1, r3
 8015cb8:	bf08      	it	eq
 8015cba:	4294      	cmpeq	r4, r2
 8015cbc:	d1f7      	bne.n	8015cae <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cc2:	4770      	bx	lr
 8015cc4:	4770      	bx	lr
 8015cc6:	bf00      	nop

08015cc8 <rclc_action_find_first_handle_with_goal_response>:
 8015cc8:	b140      	cbz	r0, 8015cdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cca:	68c0      	ldr	r0, [r0, #12]
 8015ccc:	b910      	cbnz	r0, 8015cd4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8015cce:	e005      	b.n	8015cdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cd0:	6800      	ldr	r0, [r0, #0]
 8015cd2:	b118      	cbz	r0, 8015cdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8015cd4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d0f9      	beq.n	8015cd0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop

08015ce0 <rclc_action_find_first_handle_with_result_response>:
 8015ce0:	b140      	cbz	r0, 8015cf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015ce2:	68c0      	ldr	r0, [r0, #12]
 8015ce4:	b910      	cbnz	r0, 8015cec <rclc_action_find_first_handle_with_result_response+0xc>
 8015ce6:	e005      	b.n	8015cf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015ce8:	6800      	ldr	r0, [r0, #0]
 8015cea:	b118      	cbz	r0, 8015cf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8015cec:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d0f9      	beq.n	8015ce8 <rclc_action_find_first_handle_with_result_response+0x8>
 8015cf4:	4770      	bx	lr
 8015cf6:	bf00      	nop

08015cf8 <rclc_action_server_response_goal_request>:
 8015cf8:	b198      	cbz	r0, 8015d22 <rclc_action_server_response_goal_request+0x2a>
 8015cfa:	b510      	push	{r4, lr}
 8015cfc:	6844      	ldr	r4, [r0, #4]
 8015cfe:	b086      	sub	sp, #24
 8015d00:	2200      	movs	r2, #0
 8015d02:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015d06:	460b      	mov	r3, r1
 8015d08:	9205      	str	r2, [sp, #20]
 8015d0a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015d0e:	aa03      	add	r2, sp, #12
 8015d10:	f104 0010 	add.w	r0, r4, #16
 8015d14:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d18:	f7ff fd4a 	bl	80157b0 <rcl_action_send_goal_response>
 8015d1c:	b918      	cbnz	r0, 8015d26 <rclc_action_server_response_goal_request+0x2e>
 8015d1e:	b006      	add	sp, #24
 8015d20:	bd10      	pop	{r4, pc}
 8015d22:	200b      	movs	r0, #11
 8015d24:	4770      	bx	lr
 8015d26:	9001      	str	r0, [sp, #4]
 8015d28:	f7f6 fe96 	bl	800ca58 <rcutils_reset_error>
 8015d2c:	9801      	ldr	r0, [sp, #4]
 8015d2e:	b006      	add	sp, #24
 8015d30:	bd10      	pop	{r4, pc}
 8015d32:	bf00      	nop
 8015d34:	0000      	movs	r0, r0
	...

08015d38 <rclc_action_server_goal_cancel_accept>:
 8015d38:	b310      	cbz	r0, 8015d80 <rclc_action_server_goal_cancel_accept+0x48>
 8015d3a:	b510      	push	{r4, lr}
 8015d3c:	b090      	sub	sp, #64	@ 0x40
 8015d3e:	4604      	mov	r4, r0
 8015d40:	a806      	add	r0, sp, #24
 8015d42:	f7ff fefd 	bl	8015b40 <rcl_action_get_zero_initialized_cancel_response>
 8015d46:	2300      	movs	r3, #0
 8015d48:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015d4c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015d50:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015d54:	f88d 3018 	strb.w	r3, [sp, #24]
 8015d58:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015d5c:	f8cd d01c 	str.w	sp, [sp, #28]
 8015d60:	46ec      	mov	ip, sp
 8015d62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d66:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015d88 <rclc_action_server_goal_cancel_accept+0x50>
 8015d6a:	6860      	ldr	r0, [r4, #4]
 8015d6c:	aa06      	add	r2, sp, #24
 8015d6e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015d72:	3010      	adds	r0, #16
 8015d74:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015d78:	f7ff fdd2 	bl	8015920 <rcl_action_send_cancel_response>
 8015d7c:	b010      	add	sp, #64	@ 0x40
 8015d7e:	bd10      	pop	{r4, pc}
 8015d80:	200b      	movs	r0, #11
 8015d82:	4770      	bx	lr
 8015d84:	f3af 8000 	nop.w
 8015d88:	00000001 	.word	0x00000001
 8015d8c:	00000001 	.word	0x00000001

08015d90 <rclc_action_server_goal_cancel_reject>:
 8015d90:	b082      	sub	sp, #8
 8015d92:	b530      	push	{r4, r5, lr}
 8015d94:	b08b      	sub	sp, #44	@ 0x2c
 8015d96:	ac0e      	add	r4, sp, #56	@ 0x38
 8015d98:	e884 000c 	stmia.w	r4, {r2, r3}
 8015d9c:	b188      	cbz	r0, 8015dc2 <rclc_action_server_goal_cancel_reject+0x32>
 8015d9e:	4604      	mov	r4, r0
 8015da0:	a801      	add	r0, sp, #4
 8015da2:	460d      	mov	r5, r1
 8015da4:	f7ff fecc 	bl	8015b40 <rcl_action_get_zero_initialized_cancel_response>
 8015da8:	aa01      	add	r2, sp, #4
 8015daa:	a90e      	add	r1, sp, #56	@ 0x38
 8015dac:	f104 0010 	add.w	r0, r4, #16
 8015db0:	f88d 5004 	strb.w	r5, [sp, #4]
 8015db4:	f7ff fdb4 	bl	8015920 <rcl_action_send_cancel_response>
 8015db8:	b00b      	add	sp, #44	@ 0x2c
 8015dba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015dbe:	b002      	add	sp, #8
 8015dc0:	4770      	bx	lr
 8015dc2:	200b      	movs	r0, #11
 8015dc4:	b00b      	add	sp, #44	@ 0x2c
 8015dc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015dca:	b002      	add	sp, #8
 8015dcc:	4770      	bx	lr
 8015dce:	bf00      	nop

08015dd0 <__atomic_load_8>:
 8015dd0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015dd4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015dd8:	4a15      	ldr	r2, [pc, #84]	@ (8015e30 <__atomic_load_8+0x60>)
 8015dda:	4b16      	ldr	r3, [pc, #88]	@ (8015e34 <__atomic_load_8+0x64>)
 8015ddc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015de0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015de4:	fb02 f101 	mul.w	r1, r2, r1
 8015de8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015dec:	fba3 2301 	umull	r2, r3, r3, r1
 8015df0:	091b      	lsrs	r3, r3, #4
 8015df2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015df6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015dfa:	b4d0      	push	{r4, r6, r7}
 8015dfc:	4c0e      	ldr	r4, [pc, #56]	@ (8015e38 <__atomic_load_8+0x68>)
 8015dfe:	1ac9      	subs	r1, r1, r3
 8015e00:	1862      	adds	r2, r4, r1
 8015e02:	f04f 0c01 	mov.w	ip, #1
 8015e06:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015e0a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8015e0e:	2e00      	cmp	r6, #0
 8015e10:	d1f9      	bne.n	8015e06 <__atomic_load_8+0x36>
 8015e12:	f3bf 8f5b 	dmb	ish
 8015e16:	b2db      	uxtb	r3, r3
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d1f4      	bne.n	8015e06 <__atomic_load_8+0x36>
 8015e1c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015e20:	f3bf 8f5b 	dmb	ish
 8015e24:	5463      	strb	r3, [r4, r1]
 8015e26:	4630      	mov	r0, r6
 8015e28:	4639      	mov	r1, r7
 8015e2a:	bcd0      	pop	{r4, r6, r7}
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop
 8015e30:	27d4eb2d 	.word	0x27d4eb2d
 8015e34:	b21642c9 	.word	0xb21642c9
 8015e38:	20015cf0 	.word	0x20015cf0

08015e3c <__atomic_store_8>:
 8015e3c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015e40:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015e44:	b570      	push	{r4, r5, r6, lr}
 8015e46:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015e4a:	4c14      	ldr	r4, [pc, #80]	@ (8015e9c <__atomic_store_8+0x60>)
 8015e4c:	4d14      	ldr	r5, [pc, #80]	@ (8015ea0 <__atomic_store_8+0x64>)
 8015e4e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015e52:	fb04 f101 	mul.w	r1, r4, r1
 8015e56:	4c13      	ldr	r4, [pc, #76]	@ (8015ea4 <__atomic_store_8+0x68>)
 8015e58:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015e5c:	fba4 4e01 	umull	r4, lr, r4, r1
 8015e60:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8015e64:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8015e68:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8015e6c:	eba1 0e0e 	sub.w	lr, r1, lr
 8015e70:	eb05 0c0e 	add.w	ip, r5, lr
 8015e74:	f04f 0401 	mov.w	r4, #1
 8015e78:	e8dc 1f4f 	ldrexb	r1, [ip]
 8015e7c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8015e80:	2e00      	cmp	r6, #0
 8015e82:	d1f9      	bne.n	8015e78 <__atomic_store_8+0x3c>
 8015e84:	f3bf 8f5b 	dmb	ish
 8015e88:	b2c9      	uxtb	r1, r1
 8015e8a:	2900      	cmp	r1, #0
 8015e8c:	d1f4      	bne.n	8015e78 <__atomic_store_8+0x3c>
 8015e8e:	e9c0 2300 	strd	r2, r3, [r0]
 8015e92:	f3bf 8f5b 	dmb	ish
 8015e96:	f805 100e 	strb.w	r1, [r5, lr]
 8015e9a:	bd70      	pop	{r4, r5, r6, pc}
 8015e9c:	27d4eb2d 	.word	0x27d4eb2d
 8015ea0:	20015cf0 	.word	0x20015cf0
 8015ea4:	b21642c9 	.word	0xb21642c9

08015ea8 <__atomic_exchange_8>:
 8015ea8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8015eac:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8015eb0:	4916      	ldr	r1, [pc, #88]	@ (8015f0c <__atomic_exchange_8+0x64>)
 8015eb2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8015eb6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8015eba:	fb01 fc0c 	mul.w	ip, r1, ip
 8015ebe:	4914      	ldr	r1, [pc, #80]	@ (8015f10 <__atomic_exchange_8+0x68>)
 8015ec0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8015ec4:	b570      	push	{r4, r5, r6, lr}
 8015ec6:	4605      	mov	r5, r0
 8015ec8:	fba1 010c 	umull	r0, r1, r1, ip
 8015ecc:	0909      	lsrs	r1, r1, #4
 8015ece:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8015ed2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015ed6:	4e0f      	ldr	r6, [pc, #60]	@ (8015f14 <__atomic_exchange_8+0x6c>)
 8015ed8:	ebac 0c01 	sub.w	ip, ip, r1
 8015edc:	eb06 010c 	add.w	r1, r6, ip
 8015ee0:	f04f 0e01 	mov.w	lr, #1
 8015ee4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8015ee8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8015eec:	2800      	cmp	r0, #0
 8015eee:	d1f9      	bne.n	8015ee4 <__atomic_exchange_8+0x3c>
 8015ef0:	f3bf 8f5b 	dmb	ish
 8015ef4:	b2e4      	uxtb	r4, r4
 8015ef6:	2c00      	cmp	r4, #0
 8015ef8:	d1f4      	bne.n	8015ee4 <__atomic_exchange_8+0x3c>
 8015efa:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015efe:	e9c5 2300 	strd	r2, r3, [r5]
 8015f02:	f3bf 8f5b 	dmb	ish
 8015f06:	f806 400c 	strb.w	r4, [r6, ip]
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}
 8015f0c:	27d4eb2d 	.word	0x27d4eb2d
 8015f10:	b21642c9 	.word	0xb21642c9
 8015f14:	20015cf0 	.word	0x20015cf0

08015f18 <rcutils_get_env>:
 8015f18:	b168      	cbz	r0, 8015f36 <rcutils_get_env+0x1e>
 8015f1a:	b510      	push	{r4, lr}
 8015f1c:	460c      	mov	r4, r1
 8015f1e:	b129      	cbz	r1, 8015f2c <rcutils_get_env+0x14>
 8015f20:	f004 fb3c 	bl	801a59c <getenv>
 8015f24:	b120      	cbz	r0, 8015f30 <rcutils_get_env+0x18>
 8015f26:	6020      	str	r0, [r4, #0]
 8015f28:	2000      	movs	r0, #0
 8015f2a:	bd10      	pop	{r4, pc}
 8015f2c:	4803      	ldr	r0, [pc, #12]	@ (8015f3c <rcutils_get_env+0x24>)
 8015f2e:	bd10      	pop	{r4, pc}
 8015f30:	4b03      	ldr	r3, [pc, #12]	@ (8015f40 <rcutils_get_env+0x28>)
 8015f32:	6023      	str	r3, [r4, #0]
 8015f34:	bd10      	pop	{r4, pc}
 8015f36:	4803      	ldr	r0, [pc, #12]	@ (8015f44 <rcutils_get_env+0x2c>)
 8015f38:	4770      	bx	lr
 8015f3a:	bf00      	nop
 8015f3c:	0801d258 	.word	0x0801d258
 8015f40:	0801d830 	.word	0x0801d830
 8015f44:	0801d23c 	.word	0x0801d23c

08015f48 <rcutils_is_directory>:
 8015f48:	2000      	movs	r0, #0
 8015f4a:	4770      	bx	lr

08015f4c <rcutils_join_path>:
 8015f4c:	b082      	sub	sp, #8
 8015f4e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015f52:	2000      	movs	r0, #0
 8015f54:	b002      	add	sp, #8
 8015f56:	4770      	bx	lr

08015f58 <rcutils_to_native_path>:
 8015f58:	b084      	sub	sp, #16
 8015f5a:	a801      	add	r0, sp, #4
 8015f5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015f60:	b004      	add	sp, #16
 8015f62:	2000      	movs	r0, #0
 8015f64:	4770      	bx	lr
 8015f66:	bf00      	nop

08015f68 <rcutils_format_string_limit>:
 8015f68:	b40f      	push	{r0, r1, r2, r3}
 8015f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f6c:	b083      	sub	sp, #12
 8015f6e:	ac08      	add	r4, sp, #32
 8015f70:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015f76:	b34e      	cbz	r6, 8015fcc <rcutils_format_string_limit+0x64>
 8015f78:	a808      	add	r0, sp, #32
 8015f7a:	f7f6 fd49 	bl	800ca10 <rcutils_allocator_is_valid>
 8015f7e:	b328      	cbz	r0, 8015fcc <rcutils_format_string_limit+0x64>
 8015f80:	2100      	movs	r1, #0
 8015f82:	ab0f      	add	r3, sp, #60	@ 0x3c
 8015f84:	4632      	mov	r2, r6
 8015f86:	4608      	mov	r0, r1
 8015f88:	e9cd 3300 	strd	r3, r3, [sp]
 8015f8c:	f000 f8f4 	bl	8016178 <rcutils_vsnprintf>
 8015f90:	1c43      	adds	r3, r0, #1
 8015f92:	4605      	mov	r5, r0
 8015f94:	d01a      	beq.n	8015fcc <rcutils_format_string_limit+0x64>
 8015f96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f9a:	1c47      	adds	r7, r0, #1
 8015f9c:	429f      	cmp	r7, r3
 8015f9e:	bf84      	itt	hi
 8015fa0:	461f      	movhi	r7, r3
 8015fa2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8015fa6:	4638      	mov	r0, r7
 8015fa8:	9b08      	ldr	r3, [sp, #32]
 8015faa:	4798      	blx	r3
 8015fac:	4604      	mov	r4, r0
 8015fae:	b168      	cbz	r0, 8015fcc <rcutils_format_string_limit+0x64>
 8015fb0:	9b01      	ldr	r3, [sp, #4]
 8015fb2:	4632      	mov	r2, r6
 8015fb4:	4639      	mov	r1, r7
 8015fb6:	f000 f8df 	bl	8016178 <rcutils_vsnprintf>
 8015fba:	2800      	cmp	r0, #0
 8015fbc:	db02      	blt.n	8015fc4 <rcutils_format_string_limit+0x5c>
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	5563      	strb	r3, [r4, r5]
 8015fc2:	e004      	b.n	8015fce <rcutils_format_string_limit+0x66>
 8015fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015fc6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015fc8:	4620      	mov	r0, r4
 8015fca:	4798      	blx	r3
 8015fcc:	2400      	movs	r4, #0
 8015fce:	4620      	mov	r0, r4
 8015fd0:	b003      	add	sp, #12
 8015fd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015fd6:	b004      	add	sp, #16
 8015fd8:	4770      	bx	lr
 8015fda:	bf00      	nop

08015fdc <rcutils_repl_str>:
 8015fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe0:	ed2d 8b02 	vpush	{d8}
 8015fe4:	b087      	sub	sp, #28
 8015fe6:	4680      	mov	r8, r0
 8015fe8:	4608      	mov	r0, r1
 8015fea:	f8cd 8004 	str.w	r8, [sp, #4]
 8015fee:	ee08 2a10 	vmov	s16, r2
 8015ff2:	468a      	mov	sl, r1
 8015ff4:	4699      	mov	r9, r3
 8015ff6:	f7ea f903 	bl	8000200 <strlen>
 8015ffa:	2600      	movs	r6, #0
 8015ffc:	4647      	mov	r7, r8
 8015ffe:	9002      	str	r0, [sp, #8]
 8016000:	46b3      	mov	fp, r6
 8016002:	2510      	movs	r5, #16
 8016004:	46b0      	mov	r8, r6
 8016006:	e01d      	b.n	8016044 <rcutils_repl_str+0x68>
 8016008:	f10b 0b01 	add.w	fp, fp, #1
 801600c:	455e      	cmp	r6, fp
 801600e:	d211      	bcs.n	8016034 <rcutils_repl_str+0x58>
 8016010:	442e      	add	r6, r5
 8016012:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016016:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801601a:	00b1      	lsls	r1, r6, #2
 801601c:	4798      	blx	r3
 801601e:	2800      	cmp	r0, #0
 8016020:	f000 8088 	beq.w	8016134 <rcutils_repl_str+0x158>
 8016024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016028:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801602c:	4680      	mov	r8, r0
 801602e:	bf28      	it	cs
 8016030:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8016034:	9a01      	ldr	r2, [sp, #4]
 8016036:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801603a:	1aa2      	subs	r2, r4, r2
 801603c:	f843 2c04 	str.w	r2, [r3, #-4]
 8016040:	9b02      	ldr	r3, [sp, #8]
 8016042:	18e7      	adds	r7, r4, r3
 8016044:	4651      	mov	r1, sl
 8016046:	4638      	mov	r0, r7
 8016048:	f004 ffd7 	bl	801affa <strstr>
 801604c:	4604      	mov	r4, r0
 801604e:	4640      	mov	r0, r8
 8016050:	2c00      	cmp	r4, #0
 8016052:	d1d9      	bne.n	8016008 <rcutils_repl_str+0x2c>
 8016054:	46b8      	mov	r8, r7
 8016056:	4607      	mov	r7, r0
 8016058:	4640      	mov	r0, r8
 801605a:	f7ea f8d1 	bl	8000200 <strlen>
 801605e:	9b01      	ldr	r3, [sp, #4]
 8016060:	eba8 0303 	sub.w	r3, r8, r3
 8016064:	181c      	adds	r4, r3, r0
 8016066:	9404      	str	r4, [sp, #16]
 8016068:	f1bb 0f00 	cmp.w	fp, #0
 801606c:	d04a      	beq.n	8016104 <rcutils_repl_str+0x128>
 801606e:	ee18 0a10 	vmov	r0, s16
 8016072:	f7ea f8c5 	bl	8000200 <strlen>
 8016076:	9b02      	ldr	r3, [sp, #8]
 8016078:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801607c:	1ac3      	subs	r3, r0, r3
 801607e:	fb0b 4303 	mla	r3, fp, r3, r4
 8016082:	461a      	mov	r2, r3
 8016084:	9305      	str	r3, [sp, #20]
 8016086:	4606      	mov	r6, r0
 8016088:	f8d9 3000 	ldr.w	r3, [r9]
 801608c:	1c50      	adds	r0, r2, #1
 801608e:	4798      	blx	r3
 8016090:	9003      	str	r0, [sp, #12]
 8016092:	2800      	cmp	r0, #0
 8016094:	d04f      	beq.n	8016136 <rcutils_repl_str+0x15a>
 8016096:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801609a:	683a      	ldr	r2, [r7, #0]
 801609c:	4641      	mov	r1, r8
 801609e:	f005 f854 	bl	801b14a <memcpy>
 80160a2:	683d      	ldr	r5, [r7, #0]
 80160a4:	9b03      	ldr	r3, [sp, #12]
 80160a6:	9701      	str	r7, [sp, #4]
 80160a8:	46ba      	mov	sl, r7
 80160aa:	441d      	add	r5, r3
 80160ac:	9f02      	ldr	r7, [sp, #8]
 80160ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80160b2:	2401      	movs	r4, #1
 80160b4:	46d1      	mov	r9, sl
 80160b6:	ee18 aa10 	vmov	sl, s16
 80160ba:	e00a      	b.n	80160d2 <rcutils_repl_str+0xf6>
 80160bc:	f8d9 5000 	ldr.w	r5, [r9]
 80160c0:	1aaa      	subs	r2, r5, r2
 80160c2:	1885      	adds	r5, r0, r2
 80160c4:	f005 f841 	bl	801b14a <memcpy>
 80160c8:	45a3      	cmp	fp, r4
 80160ca:	f104 0201 	add.w	r2, r4, #1
 80160ce:	d935      	bls.n	801613c <rcutils_repl_str+0x160>
 80160d0:	4614      	mov	r4, r2
 80160d2:	4632      	mov	r2, r6
 80160d4:	4651      	mov	r1, sl
 80160d6:	4628      	mov	r0, r5
 80160d8:	f005 f837 	bl	801b14a <memcpy>
 80160dc:	f859 2b04 	ldr.w	r2, [r9], #4
 80160e0:	45a3      	cmp	fp, r4
 80160e2:	443a      	add	r2, r7
 80160e4:	eb05 0006 	add.w	r0, r5, r6
 80160e8:	eb08 0102 	add.w	r1, r8, r2
 80160ec:	d1e6      	bne.n	80160bc <rcutils_repl_str+0xe0>
 80160ee:	9b04      	ldr	r3, [sp, #16]
 80160f0:	1a9a      	subs	r2, r3, r2
 80160f2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80160f6:	f005 f828 	bl	801b14a <memcpy>
 80160fa:	9a03      	ldr	r2, [sp, #12]
 80160fc:	9905      	ldr	r1, [sp, #20]
 80160fe:	2300      	movs	r3, #0
 8016100:	5453      	strb	r3, [r2, r1]
 8016102:	e00b      	b.n	801611c <rcutils_repl_str+0x140>
 8016104:	4620      	mov	r0, r4
 8016106:	f8d9 3000 	ldr.w	r3, [r9]
 801610a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801610e:	3001      	adds	r0, #1
 8016110:	4798      	blx	r3
 8016112:	9003      	str	r0, [sp, #12]
 8016114:	b110      	cbz	r0, 801611c <rcutils_repl_str+0x140>
 8016116:	9901      	ldr	r1, [sp, #4]
 8016118:	f005 f825 	bl	801b166 <strcpy>
 801611c:	4638      	mov	r0, r7
 801611e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016122:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016126:	4798      	blx	r3
 8016128:	9803      	ldr	r0, [sp, #12]
 801612a:	b007      	add	sp, #28
 801612c:	ecbd 8b02 	vpop	{d8}
 8016130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016134:	4647      	mov	r7, r8
 8016136:	2300      	movs	r3, #0
 8016138:	9303      	str	r3, [sp, #12]
 801613a:	e7ef      	b.n	801611c <rcutils_repl_str+0x140>
 801613c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016140:	e7db      	b.n	80160fa <rcutils_repl_str+0x11e>
 8016142:	bf00      	nop

08016144 <rcutils_snprintf>:
 8016144:	b40c      	push	{r2, r3}
 8016146:	b530      	push	{r4, r5, lr}
 8016148:	b083      	sub	sp, #12
 801614a:	ab06      	add	r3, sp, #24
 801614c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016150:	9301      	str	r3, [sp, #4]
 8016152:	b152      	cbz	r2, 801616a <rcutils_snprintf+0x26>
 8016154:	b138      	cbz	r0, 8016166 <rcutils_snprintf+0x22>
 8016156:	b141      	cbz	r1, 801616a <rcutils_snprintf+0x26>
 8016158:	f004 fd62 	bl	801ac20 <vsniprintf>
 801615c:	b003      	add	sp, #12
 801615e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016162:	b002      	add	sp, #8
 8016164:	4770      	bx	lr
 8016166:	2900      	cmp	r1, #0
 8016168:	d0f6      	beq.n	8016158 <rcutils_snprintf+0x14>
 801616a:	f004 ffc1 	bl	801b0f0 <__errno>
 801616e:	2316      	movs	r3, #22
 8016170:	6003      	str	r3, [r0, #0]
 8016172:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016176:	e7f1      	b.n	801615c <rcutils_snprintf+0x18>

08016178 <rcutils_vsnprintf>:
 8016178:	b570      	push	{r4, r5, r6, lr}
 801617a:	b13a      	cbz	r2, 801618c <rcutils_vsnprintf+0x14>
 801617c:	b120      	cbz	r0, 8016188 <rcutils_vsnprintf+0x10>
 801617e:	b129      	cbz	r1, 801618c <rcutils_vsnprintf+0x14>
 8016180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016184:	f004 bd4c 	b.w	801ac20 <vsniprintf>
 8016188:	2900      	cmp	r1, #0
 801618a:	d0f9      	beq.n	8016180 <rcutils_vsnprintf+0x8>
 801618c:	f004 ffb0 	bl	801b0f0 <__errno>
 8016190:	2316      	movs	r3, #22
 8016192:	6003      	str	r3, [r0, #0]
 8016194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016198:	bd70      	pop	{r4, r5, r6, pc}
 801619a:	bf00      	nop

0801619c <rcutils_strdup>:
 801619c:	b084      	sub	sp, #16
 801619e:	b570      	push	{r4, r5, r6, lr}
 80161a0:	b082      	sub	sp, #8
 80161a2:	ac07      	add	r4, sp, #28
 80161a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80161a8:	4605      	mov	r5, r0
 80161aa:	b1b0      	cbz	r0, 80161da <rcutils_strdup+0x3e>
 80161ac:	f7ea f828 	bl	8000200 <strlen>
 80161b0:	1c42      	adds	r2, r0, #1
 80161b2:	9b07      	ldr	r3, [sp, #28]
 80161b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80161b6:	9201      	str	r2, [sp, #4]
 80161b8:	4606      	mov	r6, r0
 80161ba:	4610      	mov	r0, r2
 80161bc:	4798      	blx	r3
 80161be:	4604      	mov	r4, r0
 80161c0:	b128      	cbz	r0, 80161ce <rcutils_strdup+0x32>
 80161c2:	9a01      	ldr	r2, [sp, #4]
 80161c4:	4629      	mov	r1, r5
 80161c6:	f004 ffc0 	bl	801b14a <memcpy>
 80161ca:	2300      	movs	r3, #0
 80161cc:	55a3      	strb	r3, [r4, r6]
 80161ce:	4620      	mov	r0, r4
 80161d0:	b002      	add	sp, #8
 80161d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161d6:	b004      	add	sp, #16
 80161d8:	4770      	bx	lr
 80161da:	4604      	mov	r4, r0
 80161dc:	e7f7      	b.n	80161ce <rcutils_strdup+0x32>
 80161de:	bf00      	nop

080161e0 <rcutils_strndup>:
 80161e0:	b082      	sub	sp, #8
 80161e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e4:	ac06      	add	r4, sp, #24
 80161e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80161ea:	4605      	mov	r5, r0
 80161ec:	b188      	cbz	r0, 8016212 <rcutils_strndup+0x32>
 80161ee:	1c4f      	adds	r7, r1, #1
 80161f0:	460e      	mov	r6, r1
 80161f2:	4638      	mov	r0, r7
 80161f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161f6:	4790      	blx	r2
 80161f8:	4604      	mov	r4, r0
 80161fa:	b128      	cbz	r0, 8016208 <rcutils_strndup+0x28>
 80161fc:	463a      	mov	r2, r7
 80161fe:	4629      	mov	r1, r5
 8016200:	f004 ffa3 	bl	801b14a <memcpy>
 8016204:	2300      	movs	r3, #0
 8016206:	55a3      	strb	r3, [r4, r6]
 8016208:	4620      	mov	r0, r4
 801620a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801620e:	b002      	add	sp, #8
 8016210:	4770      	bx	lr
 8016212:	4604      	mov	r4, r0
 8016214:	e7f8      	b.n	8016208 <rcutils_strndup+0x28>
 8016216:	bf00      	nop

08016218 <rcutils_get_zero_initialized_string_map>:
 8016218:	4b01      	ldr	r3, [pc, #4]	@ (8016220 <rcutils_get_zero_initialized_string_map+0x8>)
 801621a:	2000      	movs	r0, #0
 801621c:	6018      	str	r0, [r3, #0]
 801621e:	4770      	bx	lr
 8016220:	20015d08 	.word	0x20015d08

08016224 <rcutils_string_map_reserve>:
 8016224:	2800      	cmp	r0, #0
 8016226:	d05f      	beq.n	80162e8 <rcutils_string_map_reserve+0xc4>
 8016228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801622c:	460c      	mov	r4, r1
 801622e:	6801      	ldr	r1, [r0, #0]
 8016230:	b082      	sub	sp, #8
 8016232:	4605      	mov	r5, r0
 8016234:	b129      	cbz	r1, 8016242 <rcutils_string_map_reserve+0x1e>
 8016236:	68cb      	ldr	r3, [r1, #12]
 8016238:	42a3      	cmp	r3, r4
 801623a:	d906      	bls.n	801624a <rcutils_string_map_reserve+0x26>
 801623c:	461c      	mov	r4, r3
 801623e:	2900      	cmp	r1, #0
 8016240:	d1f9      	bne.n	8016236 <rcutils_string_map_reserve+0x12>
 8016242:	201f      	movs	r0, #31
 8016244:	b002      	add	sp, #8
 8016246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801624a:	688b      	ldr	r3, [r1, #8]
 801624c:	42a3      	cmp	r3, r4
 801624e:	d047      	beq.n	80162e0 <rcutils_string_map_reserve+0xbc>
 8016250:	6a0e      	ldr	r6, [r1, #32]
 8016252:	2c00      	cmp	r4, #0
 8016254:	d034      	beq.n	80162c0 <rcutils_string_map_reserve+0x9c>
 8016256:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801625a:	d243      	bcs.n	80162e4 <rcutils_string_map_reserve+0xc0>
 801625c:	00a7      	lsls	r7, r4, #2
 801625e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016262:	6808      	ldr	r0, [r1, #0]
 8016264:	4632      	mov	r2, r6
 8016266:	4639      	mov	r1, r7
 8016268:	47c0      	blx	r8
 801626a:	2800      	cmp	r0, #0
 801626c:	d03a      	beq.n	80162e4 <rcutils_string_map_reserve+0xc0>
 801626e:	682b      	ldr	r3, [r5, #0]
 8016270:	4632      	mov	r2, r6
 8016272:	6018      	str	r0, [r3, #0]
 8016274:	4639      	mov	r1, r7
 8016276:	6858      	ldr	r0, [r3, #4]
 8016278:	47c0      	blx	r8
 801627a:	2800      	cmp	r0, #0
 801627c:	d032      	beq.n	80162e4 <rcutils_string_map_reserve+0xc0>
 801627e:	682d      	ldr	r5, [r5, #0]
 8016280:	68ab      	ldr	r3, [r5, #8]
 8016282:	6068      	str	r0, [r5, #4]
 8016284:	42a3      	cmp	r3, r4
 8016286:	d226      	bcs.n	80162d6 <rcutils_string_map_reserve+0xb2>
 8016288:	682a      	ldr	r2, [r5, #0]
 801628a:	eb00 0c07 	add.w	ip, r0, r7
 801628e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016292:	45e6      	cmp	lr, ip
 8016294:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016298:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801629c:	d203      	bcs.n	80162a6 <rcutils_string_map_reserve+0x82>
 801629e:	eb02 0c07 	add.w	ip, r2, r7
 80162a2:	4566      	cmp	r6, ip
 80162a4:	d322      	bcc.n	80162ec <rcutils_string_map_reserve+0xc8>
 80162a6:	1ae3      	subs	r3, r4, r3
 80162a8:	009a      	lsls	r2, r3, #2
 80162aa:	4670      	mov	r0, lr
 80162ac:	2100      	movs	r1, #0
 80162ae:	9201      	str	r2, [sp, #4]
 80162b0:	f004 fee3 	bl	801b07a <memset>
 80162b4:	9a01      	ldr	r2, [sp, #4]
 80162b6:	2100      	movs	r1, #0
 80162b8:	4630      	mov	r0, r6
 80162ba:	f004 fede 	bl	801b07a <memset>
 80162be:	e00a      	b.n	80162d6 <rcutils_string_map_reserve+0xb2>
 80162c0:	694f      	ldr	r7, [r1, #20]
 80162c2:	6808      	ldr	r0, [r1, #0]
 80162c4:	4631      	mov	r1, r6
 80162c6:	47b8      	blx	r7
 80162c8:	682b      	ldr	r3, [r5, #0]
 80162ca:	4631      	mov	r1, r6
 80162cc:	6858      	ldr	r0, [r3, #4]
 80162ce:	601c      	str	r4, [r3, #0]
 80162d0:	47b8      	blx	r7
 80162d2:	682d      	ldr	r5, [r5, #0]
 80162d4:	606c      	str	r4, [r5, #4]
 80162d6:	2000      	movs	r0, #0
 80162d8:	60ac      	str	r4, [r5, #8]
 80162da:	b002      	add	sp, #8
 80162dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162e0:	2000      	movs	r0, #0
 80162e2:	e7af      	b.n	8016244 <rcutils_string_map_reserve+0x20>
 80162e4:	200a      	movs	r0, #10
 80162e6:	e7ad      	b.n	8016244 <rcutils_string_map_reserve+0x20>
 80162e8:	200b      	movs	r0, #11
 80162ea:	4770      	bx	lr
 80162ec:	1f0b      	subs	r3, r1, #4
 80162ee:	4418      	add	r0, r3
 80162f0:	4413      	add	r3, r2
 80162f2:	3a04      	subs	r2, #4
 80162f4:	4417      	add	r7, r2
 80162f6:	2200      	movs	r2, #0
 80162f8:	f843 2f04 	str.w	r2, [r3, #4]!
 80162fc:	42bb      	cmp	r3, r7
 80162fe:	f840 2f04 	str.w	r2, [r0, #4]!
 8016302:	d1f9      	bne.n	80162f8 <rcutils_string_map_reserve+0xd4>
 8016304:	e7e7      	b.n	80162d6 <rcutils_string_map_reserve+0xb2>
 8016306:	bf00      	nop

08016308 <rcutils_string_map_init>:
 8016308:	b082      	sub	sp, #8
 801630a:	b570      	push	{r4, r5, r6, lr}
 801630c:	ac04      	add	r4, sp, #16
 801630e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016312:	b380      	cbz	r0, 8016376 <rcutils_string_map_init+0x6e>
 8016314:	6806      	ldr	r6, [r0, #0]
 8016316:	4604      	mov	r4, r0
 8016318:	b12e      	cbz	r6, 8016326 <rcutils_string_map_init+0x1e>
 801631a:	251e      	movs	r5, #30
 801631c:	4628      	mov	r0, r5
 801631e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016322:	b002      	add	sp, #8
 8016324:	4770      	bx	lr
 8016326:	a804      	add	r0, sp, #16
 8016328:	460d      	mov	r5, r1
 801632a:	f7f6 fb71 	bl	800ca10 <rcutils_allocator_is_valid>
 801632e:	b310      	cbz	r0, 8016376 <rcutils_string_map_init+0x6e>
 8016330:	9b04      	ldr	r3, [sp, #16]
 8016332:	9908      	ldr	r1, [sp, #32]
 8016334:	2024      	movs	r0, #36	@ 0x24
 8016336:	4798      	blx	r3
 8016338:	6020      	str	r0, [r4, #0]
 801633a:	b310      	cbz	r0, 8016382 <rcutils_string_map_init+0x7a>
 801633c:	f10d 0e10 	add.w	lr, sp, #16
 8016340:	e9c0 6600 	strd	r6, r6, [r0]
 8016344:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016348:	f100 0c10 	add.w	ip, r0, #16
 801634c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016354:	f8de 3000 	ldr.w	r3, [lr]
 8016358:	f8cc 3000 	str.w	r3, [ip]
 801635c:	4629      	mov	r1, r5
 801635e:	4620      	mov	r0, r4
 8016360:	f7ff ff60 	bl	8016224 <rcutils_string_map_reserve>
 8016364:	4605      	mov	r5, r0
 8016366:	2800      	cmp	r0, #0
 8016368:	d0d8      	beq.n	801631c <rcutils_string_map_init+0x14>
 801636a:	9b05      	ldr	r3, [sp, #20]
 801636c:	9908      	ldr	r1, [sp, #32]
 801636e:	6820      	ldr	r0, [r4, #0]
 8016370:	4798      	blx	r3
 8016372:	6026      	str	r6, [r4, #0]
 8016374:	e7d2      	b.n	801631c <rcutils_string_map_init+0x14>
 8016376:	250b      	movs	r5, #11
 8016378:	4628      	mov	r0, r5
 801637a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801637e:	b002      	add	sp, #8
 8016380:	4770      	bx	lr
 8016382:	250a      	movs	r5, #10
 8016384:	e7ca      	b.n	801631c <rcutils_string_map_init+0x14>
 8016386:	bf00      	nop

08016388 <rcutils_string_map_fini>:
 8016388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801638c:	b082      	sub	sp, #8
 801638e:	2800      	cmp	r0, #0
 8016390:	d03a      	beq.n	8016408 <rcutils_string_map_fini+0x80>
 8016392:	6804      	ldr	r4, [r0, #0]
 8016394:	4606      	mov	r6, r0
 8016396:	2c00      	cmp	r4, #0
 8016398:	d032      	beq.n	8016400 <rcutils_string_map_fini+0x78>
 801639a:	68a3      	ldr	r3, [r4, #8]
 801639c:	b32b      	cbz	r3, 80163ea <rcutils_string_map_fini+0x62>
 801639e:	2500      	movs	r5, #0
 80163a0:	6822      	ldr	r2, [r4, #0]
 80163a2:	462f      	mov	r7, r5
 80163a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80163a8:	b1e0      	cbz	r0, 80163e4 <rcutils_string_map_fini+0x5c>
 80163aa:	6a21      	ldr	r1, [r4, #32]
 80163ac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80163b0:	9101      	str	r1, [sp, #4]
 80163b2:	47c0      	blx	r8
 80163b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80163b8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80163bc:	9901      	ldr	r1, [sp, #4]
 80163be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80163c2:	47c0      	blx	r8
 80163c4:	68e3      	ldr	r3, [r4, #12]
 80163c6:	6862      	ldr	r2, [r4, #4]
 80163c8:	3b01      	subs	r3, #1
 80163ca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80163ce:	60e3      	str	r3, [r4, #12]
 80163d0:	6834      	ldr	r4, [r6, #0]
 80163d2:	68a3      	ldr	r3, [r4, #8]
 80163d4:	3501      	adds	r5, #1
 80163d6:	429d      	cmp	r5, r3
 80163d8:	d207      	bcs.n	80163ea <rcutils_string_map_fini+0x62>
 80163da:	6822      	ldr	r2, [r4, #0]
 80163dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80163e0:	2800      	cmp	r0, #0
 80163e2:	d1e2      	bne.n	80163aa <rcutils_string_map_fini+0x22>
 80163e4:	3501      	adds	r5, #1
 80163e6:	429d      	cmp	r5, r3
 80163e8:	d3dc      	bcc.n	80163a4 <rcutils_string_map_fini+0x1c>
 80163ea:	2100      	movs	r1, #0
 80163ec:	4630      	mov	r0, r6
 80163ee:	f7ff ff19 	bl	8016224 <rcutils_string_map_reserve>
 80163f2:	4604      	mov	r4, r0
 80163f4:	b920      	cbnz	r0, 8016400 <rcutils_string_map_fini+0x78>
 80163f6:	6830      	ldr	r0, [r6, #0]
 80163f8:	6943      	ldr	r3, [r0, #20]
 80163fa:	6a01      	ldr	r1, [r0, #32]
 80163fc:	4798      	blx	r3
 80163fe:	6034      	str	r4, [r6, #0]
 8016400:	4620      	mov	r0, r4
 8016402:	b002      	add	sp, #8
 8016404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016408:	240b      	movs	r4, #11
 801640a:	4620      	mov	r0, r4
 801640c:	b002      	add	sp, #8
 801640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016412:	bf00      	nop

08016414 <rcutils_string_map_getn>:
 8016414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016418:	b300      	cbz	r0, 801645c <rcutils_string_map_getn+0x48>
 801641a:	6807      	ldr	r7, [r0, #0]
 801641c:	b1ff      	cbz	r7, 801645e <rcutils_string_map_getn+0x4a>
 801641e:	4688      	mov	r8, r1
 8016420:	b1e1      	cbz	r1, 801645c <rcutils_string_map_getn+0x48>
 8016422:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016426:	683e      	ldr	r6, [r7, #0]
 8016428:	f1ba 0f00 	cmp.w	sl, #0
 801642c:	d016      	beq.n	801645c <rcutils_string_map_getn+0x48>
 801642e:	4691      	mov	r9, r2
 8016430:	3e04      	subs	r6, #4
 8016432:	2400      	movs	r4, #0
 8016434:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801643c:	4628      	mov	r0, r5
 801643e:	3401      	adds	r4, #1
 8016440:	b155      	cbz	r5, 8016458 <rcutils_string_map_getn+0x44>
 8016442:	f7e9 fedd 	bl	8000200 <strlen>
 8016446:	4548      	cmp	r0, r9
 8016448:	4602      	mov	r2, r0
 801644a:	4629      	mov	r1, r5
 801644c:	bf38      	it	cc
 801644e:	464a      	movcc	r2, r9
 8016450:	4640      	mov	r0, r8
 8016452:	f004 fdc0 	bl	801afd6 <strncmp>
 8016456:	b128      	cbz	r0, 8016464 <rcutils_string_map_getn+0x50>
 8016458:	45a2      	cmp	sl, r4
 801645a:	d1eb      	bne.n	8016434 <rcutils_string_map_getn+0x20>
 801645c:	2700      	movs	r7, #0
 801645e:	4638      	mov	r0, r7
 8016460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f853 700b 	ldr.w	r7, [r3, fp]
 801646a:	4638      	mov	r0, r7
 801646c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016470 <rmw_get_zero_initialized_context>:
 8016470:	b510      	push	{r4, lr}
 8016472:	4604      	mov	r4, r0
 8016474:	3010      	adds	r0, #16
 8016476:	f000 f80b 	bl	8016490 <rmw_get_zero_initialized_init_options>
 801647a:	2300      	movs	r3, #0
 801647c:	2000      	movs	r0, #0
 801647e:	2100      	movs	r1, #0
 8016480:	e9c4 0100 	strd	r0, r1, [r4]
 8016484:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8016488:	60a3      	str	r3, [r4, #8]
 801648a:	4620      	mov	r0, r4
 801648c:	bd10      	pop	{r4, pc}
 801648e:	bf00      	nop

08016490 <rmw_get_zero_initialized_init_options>:
 8016490:	b510      	push	{r4, lr}
 8016492:	2238      	movs	r2, #56	@ 0x38
 8016494:	4604      	mov	r4, r0
 8016496:	2100      	movs	r1, #0
 8016498:	f004 fdef 	bl	801b07a <memset>
 801649c:	f104 0010 	add.w	r0, r4, #16
 80164a0:	f000 f806 	bl	80164b0 <rmw_get_default_security_options>
 80164a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164a8:	60e3      	str	r3, [r4, #12]
 80164aa:	4620      	mov	r0, r4
 80164ac:	bd10      	pop	{r4, pc}
 80164ae:	bf00      	nop

080164b0 <rmw_get_default_security_options>:
 80164b0:	2200      	movs	r2, #0
 80164b2:	7002      	strb	r2, [r0, #0]
 80164b4:	6042      	str	r2, [r0, #4]
 80164b6:	4770      	bx	lr

080164b8 <rmw_subscription_content_filter_options_fini>:
 80164b8:	b1b0      	cbz	r0, 80164e8 <rmw_subscription_content_filter_options_fini+0x30>
 80164ba:	b538      	push	{r3, r4, r5, lr}
 80164bc:	4604      	mov	r4, r0
 80164be:	4608      	mov	r0, r1
 80164c0:	460d      	mov	r5, r1
 80164c2:	f7f6 faa5 	bl	800ca10 <rcutils_allocator_is_valid>
 80164c6:	b168      	cbz	r0, 80164e4 <rmw_subscription_content_filter_options_fini+0x2c>
 80164c8:	6820      	ldr	r0, [r4, #0]
 80164ca:	b120      	cbz	r0, 80164d6 <rmw_subscription_content_filter_options_fini+0x1e>
 80164cc:	686b      	ldr	r3, [r5, #4]
 80164ce:	6929      	ldr	r1, [r5, #16]
 80164d0:	4798      	blx	r3
 80164d2:	2300      	movs	r3, #0
 80164d4:	6023      	str	r3, [r4, #0]
 80164d6:	1d20      	adds	r0, r4, #4
 80164d8:	f003 fc12 	bl	8019d00 <rcutils_string_array_fini>
 80164dc:	3800      	subs	r0, #0
 80164de:	bf18      	it	ne
 80164e0:	2001      	movne	r0, #1
 80164e2:	bd38      	pop	{r3, r4, r5, pc}
 80164e4:	200b      	movs	r0, #11
 80164e6:	bd38      	pop	{r3, r4, r5, pc}
 80164e8:	200b      	movs	r0, #11
 80164ea:	4770      	bx	lr

080164ec <rmw_get_default_subscription_options>:
 80164ec:	2200      	movs	r2, #0
 80164ee:	e9c0 2200 	strd	r2, r2, [r0]
 80164f2:	6082      	str	r2, [r0, #8]
 80164f4:	4770      	bx	lr
 80164f6:	bf00      	nop

080164f8 <rmw_time_equal>:
 80164f8:	b4f0      	push	{r4, r5, r6, r7}
 80164fa:	b084      	sub	sp, #16
 80164fc:	ac04      	add	r4, sp, #16
 80164fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016502:	4603      	mov	r3, r0
 8016504:	4924      	ldr	r1, [pc, #144]	@ (8016598 <rmw_time_equal+0xa0>)
 8016506:	9e03      	ldr	r6, [sp, #12]
 8016508:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801650c:	2202      	movs	r2, #2
 801650e:	4299      	cmp	r1, r3
 8016510:	41aa      	sbcs	r2, r5
 8016512:	d330      	bcc.n	8016576 <rmw_time_equal+0x7e>
 8016514:	4c21      	ldr	r4, [pc, #132]	@ (801659c <rmw_time_equal+0xa4>)
 8016516:	fba3 3204 	umull	r3, r2, r3, r4
 801651a:	fb04 2205 	mla	r2, r4, r5, r2
 801651e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016522:	43dd      	mvns	r5, r3
 8016524:	1a8c      	subs	r4, r1, r2
 8016526:	4285      	cmp	r5, r0
 8016528:	41b4      	sbcs	r4, r6
 801652a:	d332      	bcc.n	8016592 <rmw_time_equal+0x9a>
 801652c:	eb10 0c03 	adds.w	ip, r0, r3
 8016530:	eb42 0106 	adc.w	r1, r2, r6
 8016534:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016538:	4817      	ldr	r0, [pc, #92]	@ (8016598 <rmw_time_equal+0xa0>)
 801653a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801653c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801653e:	2202      	movs	r2, #2
 8016540:	4298      	cmp	r0, r3
 8016542:	41b2      	sbcs	r2, r6
 8016544:	d31c      	bcc.n	8016580 <rmw_time_equal+0x88>
 8016546:	4c15      	ldr	r4, [pc, #84]	@ (801659c <rmw_time_equal+0xa4>)
 8016548:	fba3 3204 	umull	r3, r2, r3, r4
 801654c:	fb04 2206 	mla	r2, r4, r6, r2
 8016550:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016554:	43de      	mvns	r6, r3
 8016556:	1a84      	subs	r4, r0, r2
 8016558:	42ae      	cmp	r6, r5
 801655a:	41bc      	sbcs	r4, r7
 801655c:	d315      	bcc.n	801658a <rmw_time_equal+0x92>
 801655e:	195b      	adds	r3, r3, r5
 8016560:	eb42 0207 	adc.w	r2, r2, r7
 8016564:	428a      	cmp	r2, r1
 8016566:	bf08      	it	eq
 8016568:	4563      	cmpeq	r3, ip
 801656a:	bf0c      	ite	eq
 801656c:	2001      	moveq	r0, #1
 801656e:	2000      	movne	r0, #0
 8016570:	b004      	add	sp, #16
 8016572:	bcf0      	pop	{r4, r5, r6, r7}
 8016574:	4770      	bx	lr
 8016576:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801657a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801657e:	e7d9      	b.n	8016534 <rmw_time_equal+0x3c>
 8016580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016584:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016588:	e7ec      	b.n	8016564 <rmw_time_equal+0x6c>
 801658a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801658e:	4602      	mov	r2, r0
 8016590:	e7e8      	b.n	8016564 <rmw_time_equal+0x6c>
 8016592:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016596:	e7cd      	b.n	8016534 <rmw_time_equal+0x3c>
 8016598:	25c17d04 	.word	0x25c17d04
 801659c:	3b9aca00 	.word	0x3b9aca00

080165a0 <rmw_time_total_nsec>:
 80165a0:	b470      	push	{r4, r5, r6}
 80165a2:	b085      	sub	sp, #20
 80165a4:	ac04      	add	r4, sp, #16
 80165a6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80165aa:	4603      	mov	r3, r0
 80165ac:	4912      	ldr	r1, [pc, #72]	@ (80165f8 <rmw_time_total_nsec+0x58>)
 80165ae:	9e03      	ldr	r6, [sp, #12]
 80165b0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80165b4:	2202      	movs	r2, #2
 80165b6:	4299      	cmp	r1, r3
 80165b8:	41aa      	sbcs	r2, r5
 80165ba:	d311      	bcc.n	80165e0 <rmw_time_total_nsec+0x40>
 80165bc:	4c0f      	ldr	r4, [pc, #60]	@ (80165fc <rmw_time_total_nsec+0x5c>)
 80165be:	fba3 3204 	umull	r3, r2, r3, r4
 80165c2:	fb04 2205 	mla	r2, r4, r5, r2
 80165c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80165ca:	43dd      	mvns	r5, r3
 80165cc:	1a8c      	subs	r4, r1, r2
 80165ce:	4285      	cmp	r5, r0
 80165d0:	41b4      	sbcs	r4, r6
 80165d2:	d30c      	bcc.n	80165ee <rmw_time_total_nsec+0x4e>
 80165d4:	1818      	adds	r0, r3, r0
 80165d6:	eb42 0106 	adc.w	r1, r2, r6
 80165da:	b005      	add	sp, #20
 80165dc:	bc70      	pop	{r4, r5, r6}
 80165de:	4770      	bx	lr
 80165e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80165e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80165e8:	b005      	add	sp, #20
 80165ea:	bc70      	pop	{r4, r5, r6}
 80165ec:	4770      	bx	lr
 80165ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80165f2:	b005      	add	sp, #20
 80165f4:	bc70      	pop	{r4, r5, r6}
 80165f6:	4770      	bx	lr
 80165f8:	25c17d04 	.word	0x25c17d04
 80165fc:	3b9aca00 	.word	0x3b9aca00

08016600 <rmw_get_zero_initialized_message_info>:
 8016600:	b510      	push	{r4, lr}
 8016602:	2240      	movs	r2, #64	@ 0x40
 8016604:	4604      	mov	r4, r0
 8016606:	2100      	movs	r1, #0
 8016608:	f004 fd37 	bl	801b07a <memset>
 801660c:	4620      	mov	r0, r4
 801660e:	bd10      	pop	{r4, pc}

08016610 <rmw_validate_full_topic_name>:
 8016610:	2800      	cmp	r0, #0
 8016612:	d057      	beq.n	80166c4 <rmw_validate_full_topic_name+0xb4>
 8016614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016618:	460d      	mov	r5, r1
 801661a:	2900      	cmp	r1, #0
 801661c:	d054      	beq.n	80166c8 <rmw_validate_full_topic_name+0xb8>
 801661e:	4616      	mov	r6, r2
 8016620:	4604      	mov	r4, r0
 8016622:	f7e9 fded 	bl	8000200 <strlen>
 8016626:	b148      	cbz	r0, 801663c <rmw_validate_full_topic_name+0x2c>
 8016628:	7823      	ldrb	r3, [r4, #0]
 801662a:	2b2f      	cmp	r3, #47	@ 0x2f
 801662c:	d00d      	beq.n	801664a <rmw_validate_full_topic_name+0x3a>
 801662e:	2302      	movs	r3, #2
 8016630:	602b      	str	r3, [r5, #0]
 8016632:	b13e      	cbz	r6, 8016644 <rmw_validate_full_topic_name+0x34>
 8016634:	2000      	movs	r0, #0
 8016636:	6030      	str	r0, [r6, #0]
 8016638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801663c:	2301      	movs	r3, #1
 801663e:	602b      	str	r3, [r5, #0]
 8016640:	2e00      	cmp	r6, #0
 8016642:	d1f7      	bne.n	8016634 <rmw_validate_full_topic_name+0x24>
 8016644:	2000      	movs	r0, #0
 8016646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664a:	1e43      	subs	r3, r0, #1
 801664c:	5ce2      	ldrb	r2, [r4, r3]
 801664e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016650:	d03c      	beq.n	80166cc <rmw_validate_full_topic_name+0xbc>
 8016652:	1e63      	subs	r3, r4, #1
 8016654:	eb03 0800 	add.w	r8, r3, r0
 8016658:	f1c4 0e01 	rsb	lr, r4, #1
 801665c:	eb0e 0703 	add.w	r7, lr, r3
 8016660:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8016664:	f021 0220 	bic.w	r2, r1, #32
 8016668:	3a41      	subs	r2, #65	@ 0x41
 801666a:	2a19      	cmp	r2, #25
 801666c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8016670:	d90b      	bls.n	801668a <rmw_validate_full_topic_name+0x7a>
 8016672:	295f      	cmp	r1, #95	@ 0x5f
 8016674:	d009      	beq.n	801668a <rmw_validate_full_topic_name+0x7a>
 8016676:	f1bc 0f0a 	cmp.w	ip, #10
 801667a:	d906      	bls.n	801668a <rmw_validate_full_topic_name+0x7a>
 801667c:	2304      	movs	r3, #4
 801667e:	602b      	str	r3, [r5, #0]
 8016680:	2e00      	cmp	r6, #0
 8016682:	d0df      	beq.n	8016644 <rmw_validate_full_topic_name+0x34>
 8016684:	6037      	str	r7, [r6, #0]
 8016686:	2000      	movs	r0, #0
 8016688:	e7d6      	b.n	8016638 <rmw_validate_full_topic_name+0x28>
 801668a:	4543      	cmp	r3, r8
 801668c:	d1e6      	bne.n	801665c <rmw_validate_full_topic_name+0x4c>
 801668e:	4f1a      	ldr	r7, [pc, #104]	@ (80166f8 <rmw_validate_full_topic_name+0xe8>)
 8016690:	2301      	movs	r3, #1
 8016692:	e004      	b.n	801669e <rmw_validate_full_topic_name+0x8e>
 8016694:	4298      	cmp	r0, r3
 8016696:	f104 0401 	add.w	r4, r4, #1
 801669a:	d91c      	bls.n	80166d6 <rmw_validate_full_topic_name+0xc6>
 801669c:	4613      	mov	r3, r2
 801669e:	4298      	cmp	r0, r3
 80166a0:	f103 0201 	add.w	r2, r3, #1
 80166a4:	d0f6      	beq.n	8016694 <rmw_validate_full_topic_name+0x84>
 80166a6:	7821      	ldrb	r1, [r4, #0]
 80166a8:	292f      	cmp	r1, #47	@ 0x2f
 80166aa:	d1f3      	bne.n	8016694 <rmw_validate_full_topic_name+0x84>
 80166ac:	7861      	ldrb	r1, [r4, #1]
 80166ae:	292f      	cmp	r1, #47	@ 0x2f
 80166b0:	d01c      	beq.n	80166ec <rmw_validate_full_topic_name+0xdc>
 80166b2:	5dc9      	ldrb	r1, [r1, r7]
 80166b4:	0749      	lsls	r1, r1, #29
 80166b6:	d5ed      	bpl.n	8016694 <rmw_validate_full_topic_name+0x84>
 80166b8:	2206      	movs	r2, #6
 80166ba:	602a      	str	r2, [r5, #0]
 80166bc:	2e00      	cmp	r6, #0
 80166be:	d0c1      	beq.n	8016644 <rmw_validate_full_topic_name+0x34>
 80166c0:	6033      	str	r3, [r6, #0]
 80166c2:	e7bf      	b.n	8016644 <rmw_validate_full_topic_name+0x34>
 80166c4:	200b      	movs	r0, #11
 80166c6:	4770      	bx	lr
 80166c8:	200b      	movs	r0, #11
 80166ca:	e7b5      	b.n	8016638 <rmw_validate_full_topic_name+0x28>
 80166cc:	2203      	movs	r2, #3
 80166ce:	602a      	str	r2, [r5, #0]
 80166d0:	2e00      	cmp	r6, #0
 80166d2:	d1f5      	bne.n	80166c0 <rmw_validate_full_topic_name+0xb0>
 80166d4:	e7b6      	b.n	8016644 <rmw_validate_full_topic_name+0x34>
 80166d6:	28f7      	cmp	r0, #247	@ 0xf7
 80166d8:	d802      	bhi.n	80166e0 <rmw_validate_full_topic_name+0xd0>
 80166da:	2000      	movs	r0, #0
 80166dc:	6028      	str	r0, [r5, #0]
 80166de:	e7ab      	b.n	8016638 <rmw_validate_full_topic_name+0x28>
 80166e0:	2307      	movs	r3, #7
 80166e2:	602b      	str	r3, [r5, #0]
 80166e4:	2e00      	cmp	r6, #0
 80166e6:	d0ad      	beq.n	8016644 <rmw_validate_full_topic_name+0x34>
 80166e8:	23f6      	movs	r3, #246	@ 0xf6
 80166ea:	e7e9      	b.n	80166c0 <rmw_validate_full_topic_name+0xb0>
 80166ec:	2205      	movs	r2, #5
 80166ee:	602a      	str	r2, [r5, #0]
 80166f0:	2e00      	cmp	r6, #0
 80166f2:	d1e5      	bne.n	80166c0 <rmw_validate_full_topic_name+0xb0>
 80166f4:	e7a6      	b.n	8016644 <rmw_validate_full_topic_name+0x34>
 80166f6:	bf00      	nop
 80166f8:	0801d9b8 	.word	0x0801d9b8

080166fc <rmw_validate_namespace_with_size>:
 80166fc:	b340      	cbz	r0, 8016750 <rmw_validate_namespace_with_size+0x54>
 80166fe:	b570      	push	{r4, r5, r6, lr}
 8016700:	4614      	mov	r4, r2
 8016702:	b0c2      	sub	sp, #264	@ 0x108
 8016704:	b332      	cbz	r2, 8016754 <rmw_validate_namespace_with_size+0x58>
 8016706:	2901      	cmp	r1, #1
 8016708:	460d      	mov	r5, r1
 801670a:	461e      	mov	r6, r3
 801670c:	d102      	bne.n	8016714 <rmw_validate_namespace_with_size+0x18>
 801670e:	7803      	ldrb	r3, [r0, #0]
 8016710:	2b2f      	cmp	r3, #47	@ 0x2f
 8016712:	d012      	beq.n	801673a <rmw_validate_namespace_with_size+0x3e>
 8016714:	aa01      	add	r2, sp, #4
 8016716:	4669      	mov	r1, sp
 8016718:	f7ff ff7a 	bl	8016610 <rmw_validate_full_topic_name>
 801671c:	b978      	cbnz	r0, 801673e <rmw_validate_namespace_with_size+0x42>
 801671e:	9b00      	ldr	r3, [sp, #0]
 8016720:	b14b      	cbz	r3, 8016736 <rmw_validate_namespace_with_size+0x3a>
 8016722:	2b07      	cmp	r3, #7
 8016724:	d007      	beq.n	8016736 <rmw_validate_namespace_with_size+0x3a>
 8016726:	1e5a      	subs	r2, r3, #1
 8016728:	2a05      	cmp	r2, #5
 801672a:	d82b      	bhi.n	8016784 <rmw_validate_namespace_with_size+0x88>
 801672c:	e8df f002 	tbb	[pc, r2]
 8016730:	1e212427 	.word	0x1e212427
 8016734:	141b      	.short	0x141b
 8016736:	2df5      	cmp	r5, #245	@ 0xf5
 8016738:	d803      	bhi.n	8016742 <rmw_validate_namespace_with_size+0x46>
 801673a:	2000      	movs	r0, #0
 801673c:	6020      	str	r0, [r4, #0]
 801673e:	b042      	add	sp, #264	@ 0x108
 8016740:	bd70      	pop	{r4, r5, r6, pc}
 8016742:	2307      	movs	r3, #7
 8016744:	6023      	str	r3, [r4, #0]
 8016746:	2e00      	cmp	r6, #0
 8016748:	d0f9      	beq.n	801673e <rmw_validate_namespace_with_size+0x42>
 801674a:	23f4      	movs	r3, #244	@ 0xf4
 801674c:	6033      	str	r3, [r6, #0]
 801674e:	e7f6      	b.n	801673e <rmw_validate_namespace_with_size+0x42>
 8016750:	200b      	movs	r0, #11
 8016752:	4770      	bx	lr
 8016754:	200b      	movs	r0, #11
 8016756:	e7f2      	b.n	801673e <rmw_validate_namespace_with_size+0x42>
 8016758:	2306      	movs	r3, #6
 801675a:	6023      	str	r3, [r4, #0]
 801675c:	2e00      	cmp	r6, #0
 801675e:	d0ee      	beq.n	801673e <rmw_validate_namespace_with_size+0x42>
 8016760:	9b01      	ldr	r3, [sp, #4]
 8016762:	6033      	str	r3, [r6, #0]
 8016764:	e7eb      	b.n	801673e <rmw_validate_namespace_with_size+0x42>
 8016766:	2305      	movs	r3, #5
 8016768:	6023      	str	r3, [r4, #0]
 801676a:	e7f7      	b.n	801675c <rmw_validate_namespace_with_size+0x60>
 801676c:	2304      	movs	r3, #4
 801676e:	6023      	str	r3, [r4, #0]
 8016770:	e7f4      	b.n	801675c <rmw_validate_namespace_with_size+0x60>
 8016772:	2303      	movs	r3, #3
 8016774:	6023      	str	r3, [r4, #0]
 8016776:	e7f1      	b.n	801675c <rmw_validate_namespace_with_size+0x60>
 8016778:	2302      	movs	r3, #2
 801677a:	6023      	str	r3, [r4, #0]
 801677c:	e7ee      	b.n	801675c <rmw_validate_namespace_with_size+0x60>
 801677e:	2301      	movs	r3, #1
 8016780:	6023      	str	r3, [r4, #0]
 8016782:	e7eb      	b.n	801675c <rmw_validate_namespace_with_size+0x60>
 8016784:	4a03      	ldr	r2, [pc, #12]	@ (8016794 <rmw_validate_namespace_with_size+0x98>)
 8016786:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801678a:	a802      	add	r0, sp, #8
 801678c:	f7ff fcda 	bl	8016144 <rcutils_snprintf>
 8016790:	2001      	movs	r0, #1
 8016792:	e7d4      	b.n	801673e <rmw_validate_namespace_with_size+0x42>
 8016794:	0801d274 	.word	0x0801d274

08016798 <rmw_validate_namespace>:
 8016798:	b168      	cbz	r0, 80167b6 <rmw_validate_namespace+0x1e>
 801679a:	b570      	push	{r4, r5, r6, lr}
 801679c:	460d      	mov	r5, r1
 801679e:	4616      	mov	r6, r2
 80167a0:	4604      	mov	r4, r0
 80167a2:	f7e9 fd2d 	bl	8000200 <strlen>
 80167a6:	4633      	mov	r3, r6
 80167a8:	4601      	mov	r1, r0
 80167aa:	462a      	mov	r2, r5
 80167ac:	4620      	mov	r0, r4
 80167ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167b2:	f7ff bfa3 	b.w	80166fc <rmw_validate_namespace_with_size>
 80167b6:	200b      	movs	r0, #11
 80167b8:	4770      	bx	lr
 80167ba:	bf00      	nop

080167bc <rmw_namespace_validation_result_string>:
 80167bc:	2807      	cmp	r0, #7
 80167be:	bf9a      	itte	ls
 80167c0:	4b02      	ldrls	r3, [pc, #8]	@ (80167cc <rmw_namespace_validation_result_string+0x10>)
 80167c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80167c6:	4802      	ldrhi	r0, [pc, #8]	@ (80167d0 <rmw_namespace_validation_result_string+0x14>)
 80167c8:	4770      	bx	lr
 80167ca:	bf00      	nop
 80167cc:	0801d46c 	.word	0x0801d46c
 80167d0:	0801d2c4 	.word	0x0801d2c4

080167d4 <rmw_validate_node_name>:
 80167d4:	2800      	cmp	r0, #0
 80167d6:	d03b      	beq.n	8016850 <rmw_validate_node_name+0x7c>
 80167d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167dc:	460d      	mov	r5, r1
 80167de:	2900      	cmp	r1, #0
 80167e0:	d038      	beq.n	8016854 <rmw_validate_node_name+0x80>
 80167e2:	4616      	mov	r6, r2
 80167e4:	4604      	mov	r4, r0
 80167e6:	f7e9 fd0b 	bl	8000200 <strlen>
 80167ea:	b1e0      	cbz	r0, 8016826 <rmw_validate_node_name+0x52>
 80167ec:	1e63      	subs	r3, r4, #1
 80167ee:	eb03 0800 	add.w	r8, r3, r0
 80167f2:	f1c4 0101 	rsb	r1, r4, #1
 80167f6:	18cf      	adds	r7, r1, r3
 80167f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80167fc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016800:	f02e 0c20 	bic.w	ip, lr, #32
 8016804:	2a09      	cmp	r2, #9
 8016806:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801680a:	d914      	bls.n	8016836 <rmw_validate_node_name+0x62>
 801680c:	f1bc 0f19 	cmp.w	ip, #25
 8016810:	d911      	bls.n	8016836 <rmw_validate_node_name+0x62>
 8016812:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016816:	d00e      	beq.n	8016836 <rmw_validate_node_name+0x62>
 8016818:	2302      	movs	r3, #2
 801681a:	602b      	str	r3, [r5, #0]
 801681c:	b106      	cbz	r6, 8016820 <rmw_validate_node_name+0x4c>
 801681e:	6037      	str	r7, [r6, #0]
 8016820:	2000      	movs	r0, #0
 8016822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016826:	2301      	movs	r3, #1
 8016828:	602b      	str	r3, [r5, #0]
 801682a:	2e00      	cmp	r6, #0
 801682c:	d0f8      	beq.n	8016820 <rmw_validate_node_name+0x4c>
 801682e:	2000      	movs	r0, #0
 8016830:	6030      	str	r0, [r6, #0]
 8016832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016836:	4543      	cmp	r3, r8
 8016838:	d1dd      	bne.n	80167f6 <rmw_validate_node_name+0x22>
 801683a:	7822      	ldrb	r2, [r4, #0]
 801683c:	4b0d      	ldr	r3, [pc, #52]	@ (8016874 <rmw_validate_node_name+0xa0>)
 801683e:	5cd3      	ldrb	r3, [r2, r3]
 8016840:	f013 0304 	ands.w	r3, r3, #4
 8016844:	d110      	bne.n	8016868 <rmw_validate_node_name+0x94>
 8016846:	28ff      	cmp	r0, #255	@ 0xff
 8016848:	d806      	bhi.n	8016858 <rmw_validate_node_name+0x84>
 801684a:	602b      	str	r3, [r5, #0]
 801684c:	4618      	mov	r0, r3
 801684e:	e7e8      	b.n	8016822 <rmw_validate_node_name+0x4e>
 8016850:	200b      	movs	r0, #11
 8016852:	4770      	bx	lr
 8016854:	200b      	movs	r0, #11
 8016856:	e7e4      	b.n	8016822 <rmw_validate_node_name+0x4e>
 8016858:	2204      	movs	r2, #4
 801685a:	602a      	str	r2, [r5, #0]
 801685c:	2e00      	cmp	r6, #0
 801685e:	d0df      	beq.n	8016820 <rmw_validate_node_name+0x4c>
 8016860:	22fe      	movs	r2, #254	@ 0xfe
 8016862:	6032      	str	r2, [r6, #0]
 8016864:	4618      	mov	r0, r3
 8016866:	e7dc      	b.n	8016822 <rmw_validate_node_name+0x4e>
 8016868:	2303      	movs	r3, #3
 801686a:	602b      	str	r3, [r5, #0]
 801686c:	2e00      	cmp	r6, #0
 801686e:	d1de      	bne.n	801682e <rmw_validate_node_name+0x5a>
 8016870:	e7d6      	b.n	8016820 <rmw_validate_node_name+0x4c>
 8016872:	bf00      	nop
 8016874:	0801d9b8 	.word	0x0801d9b8

08016878 <rmw_node_name_validation_result_string>:
 8016878:	2804      	cmp	r0, #4
 801687a:	bf9a      	itte	ls
 801687c:	4b02      	ldrls	r3, [pc, #8]	@ (8016888 <rmw_node_name_validation_result_string+0x10>)
 801687e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016882:	4802      	ldrhi	r0, [pc, #8]	@ (801688c <rmw_node_name_validation_result_string+0x14>)
 8016884:	4770      	bx	lr
 8016886:	bf00      	nop
 8016888:	0801d578 	.word	0x0801d578
 801688c:	0801d48c 	.word	0x0801d48c

08016890 <get_memory>:
 8016890:	4603      	mov	r3, r0
 8016892:	6840      	ldr	r0, [r0, #4]
 8016894:	b158      	cbz	r0, 80168ae <get_memory+0x1e>
 8016896:	6842      	ldr	r2, [r0, #4]
 8016898:	605a      	str	r2, [r3, #4]
 801689a:	b10a      	cbz	r2, 80168a0 <get_memory+0x10>
 801689c:	2100      	movs	r1, #0
 801689e:	6011      	str	r1, [r2, #0]
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	6042      	str	r2, [r0, #4]
 80168a4:	b102      	cbz	r2, 80168a8 <get_memory+0x18>
 80168a6:	6010      	str	r0, [r2, #0]
 80168a8:	2200      	movs	r2, #0
 80168aa:	6002      	str	r2, [r0, #0]
 80168ac:	6018      	str	r0, [r3, #0]
 80168ae:	4770      	bx	lr

080168b0 <put_memory>:
 80168b0:	680b      	ldr	r3, [r1, #0]
 80168b2:	b10b      	cbz	r3, 80168b8 <put_memory+0x8>
 80168b4:	684a      	ldr	r2, [r1, #4]
 80168b6:	605a      	str	r2, [r3, #4]
 80168b8:	684a      	ldr	r2, [r1, #4]
 80168ba:	b102      	cbz	r2, 80168be <put_memory+0xe>
 80168bc:	6013      	str	r3, [r2, #0]
 80168be:	6803      	ldr	r3, [r0, #0]
 80168c0:	428b      	cmp	r3, r1
 80168c2:	6843      	ldr	r3, [r0, #4]
 80168c4:	bf08      	it	eq
 80168c6:	6002      	streq	r2, [r0, #0]
 80168c8:	604b      	str	r3, [r1, #4]
 80168ca:	b103      	cbz	r3, 80168ce <put_memory+0x1e>
 80168cc:	6019      	str	r1, [r3, #0]
 80168ce:	2300      	movs	r3, #0
 80168d0:	600b      	str	r3, [r1, #0]
 80168d2:	6041      	str	r1, [r0, #4]
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop

080168d8 <rmw_destroy_client>:
 80168d8:	b570      	push	{r4, r5, r6, lr}
 80168da:	b128      	cbz	r0, 80168e8 <rmw_destroy_client+0x10>
 80168dc:	4604      	mov	r4, r0
 80168de:	6800      	ldr	r0, [r0, #0]
 80168e0:	460d      	mov	r5, r1
 80168e2:	f7f6 fed5 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 80168e6:	b910      	cbnz	r0, 80168ee <rmw_destroy_client+0x16>
 80168e8:	2401      	movs	r4, #1
 80168ea:	4620      	mov	r0, r4
 80168ec:	bd70      	pop	{r4, r5, r6, pc}
 80168ee:	6863      	ldr	r3, [r4, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d0f9      	beq.n	80168e8 <rmw_destroy_client+0x10>
 80168f4:	2d00      	cmp	r5, #0
 80168f6:	d0f7      	beq.n	80168e8 <rmw_destroy_client+0x10>
 80168f8:	6828      	ldr	r0, [r5, #0]
 80168fa:	f7f6 fec9 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 80168fe:	2800      	cmp	r0, #0
 8016900:	d0f2      	beq.n	80168e8 <rmw_destroy_client+0x10>
 8016902:	686e      	ldr	r6, [r5, #4]
 8016904:	2e00      	cmp	r6, #0
 8016906:	d0ef      	beq.n	80168e8 <rmw_destroy_client+0x10>
 8016908:	6864      	ldr	r4, [r4, #4]
 801690a:	6932      	ldr	r2, [r6, #16]
 801690c:	6920      	ldr	r0, [r4, #16]
 801690e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016912:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016916:	6819      	ldr	r1, [r3, #0]
 8016918:	f002 f92e 	bl	8018b78 <uxr_buffer_cancel_data>
 801691c:	4602      	mov	r2, r0
 801691e:	6920      	ldr	r0, [r4, #16]
 8016920:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016924:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016928:	f7f6 fd98 	bl	800d45c <run_xrce_session>
 801692c:	6920      	ldr	r0, [r4, #16]
 801692e:	6932      	ldr	r2, [r6, #16]
 8016930:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016934:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016938:	6819      	ldr	r1, [r3, #0]
 801693a:	f7f9 fd01 	bl	8010340 <uxr_buffer_delete_entity>
 801693e:	4602      	mov	r2, r0
 8016940:	6920      	ldr	r0, [r4, #16]
 8016942:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016946:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801694a:	f7f6 fd87 	bl	800d45c <run_xrce_session>
 801694e:	2800      	cmp	r0, #0
 8016950:	4628      	mov	r0, r5
 8016952:	bf14      	ite	ne
 8016954:	2400      	movne	r4, #0
 8016956:	2402      	moveq	r4, #2
 8016958:	f7f6 fc68 	bl	800d22c <rmw_uxrce_fini_client_memory>
 801695c:	e7c5      	b.n	80168ea <rmw_destroy_client+0x12>
 801695e:	bf00      	nop

08016960 <rmw_get_implementation_identifier>:
 8016960:	4b01      	ldr	r3, [pc, #4]	@ (8016968 <rmw_get_implementation_identifier+0x8>)
 8016962:	6818      	ldr	r0, [r3, #0]
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop
 8016968:	0801d5a4 	.word	0x0801d5a4

0801696c <rmw_init_options_init>:
 801696c:	b084      	sub	sp, #16
 801696e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016970:	b083      	sub	sp, #12
 8016972:	ad09      	add	r5, sp, #36	@ 0x24
 8016974:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8016978:	b130      	cbz	r0, 8016988 <rmw_init_options_init+0x1c>
 801697a:	4604      	mov	r4, r0
 801697c:	4628      	mov	r0, r5
 801697e:	f7f6 f847 	bl	800ca10 <rcutils_allocator_is_valid>
 8016982:	b108      	cbz	r0, 8016988 <rmw_init_options_init+0x1c>
 8016984:	68a6      	ldr	r6, [r4, #8]
 8016986:	b12e      	cbz	r6, 8016994 <rmw_init_options_init+0x28>
 8016988:	200b      	movs	r0, #11
 801698a:	b003      	add	sp, #12
 801698c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016990:	b004      	add	sp, #16
 8016992:	4770      	bx	lr
 8016994:	2200      	movs	r2, #0
 8016996:	2300      	movs	r3, #0
 8016998:	e9c4 2300 	strd	r2, r3, [r4]
 801699c:	4b22      	ldr	r3, [pc, #136]	@ (8016a28 <rmw_init_options_init+0xbc>)
 801699e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8016a38 <rmw_init_options_init+0xcc>
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	60a3      	str	r3, [r4, #8]
 80169a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169a8:	f104 0c20 	add.w	ip, r4, #32
 80169ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80169b0:	466f      	mov	r7, sp
 80169b2:	682b      	ldr	r3, [r5, #0]
 80169b4:	f8cc 3000 	str.w	r3, [ip]
 80169b8:	4638      	mov	r0, r7
 80169ba:	f8c4 e01c 	str.w	lr, [r4, #28]
 80169be:	60e6      	str	r6, [r4, #12]
 80169c0:	f7ff fd76 	bl	80164b0 <rmw_get_default_security_options>
 80169c4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80169c8:	f104 0310 	add.w	r3, r4, #16
 80169cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80169d0:	2203      	movs	r2, #3
 80169d2:	4816      	ldr	r0, [pc, #88]	@ (8016a2c <rmw_init_options_init+0xc0>)
 80169d4:	4916      	ldr	r1, [pc, #88]	@ (8016a30 <rmw_init_options_init+0xc4>)
 80169d6:	7626      	strb	r6, [r4, #24]
 80169d8:	f7f6 fb68 	bl	800d0ac <rmw_uxrce_init_init_options_impl_memory>
 80169dc:	4813      	ldr	r0, [pc, #76]	@ (8016a2c <rmw_init_options_init+0xc0>)
 80169de:	f7ff ff57 	bl	8016890 <get_memory>
 80169e2:	b1f0      	cbz	r0, 8016a22 <rmw_init_options_init+0xb6>
 80169e4:	4a13      	ldr	r2, [pc, #76]	@ (8016a34 <rmw_init_options_init+0xc8>)
 80169e6:	6883      	ldr	r3, [r0, #8]
 80169e8:	6851      	ldr	r1, [r2, #4]
 80169ea:	7810      	ldrb	r0, [r2, #0]
 80169ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80169ee:	7418      	strb	r0, [r3, #16]
 80169f0:	6159      	str	r1, [r3, #20]
 80169f2:	68d1      	ldr	r1, [r2, #12]
 80169f4:	61d9      	str	r1, [r3, #28]
 80169f6:	6911      	ldr	r1, [r2, #16]
 80169f8:	6219      	str	r1, [r3, #32]
 80169fa:	6951      	ldr	r1, [r2, #20]
 80169fc:	6892      	ldr	r2, [r2, #8]
 80169fe:	619a      	str	r2, [r3, #24]
 8016a00:	6259      	str	r1, [r3, #36]	@ 0x24
 8016a02:	f7fb f935 	bl	8011c70 <uxr_nanos>
 8016a06:	f003 ff03 	bl	801a810 <srand>
 8016a0a:	f003 ff2f 	bl	801a86c <rand>
 8016a0e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016a10:	6298      	str	r0, [r3, #40]	@ 0x28
 8016a12:	2800      	cmp	r0, #0
 8016a14:	d0f9      	beq.n	8016a0a <rmw_init_options_init+0x9e>
 8016a16:	2000      	movs	r0, #0
 8016a18:	b003      	add	sp, #12
 8016a1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a1e:	b004      	add	sp, #16
 8016a20:	4770      	bx	lr
 8016a22:	2001      	movs	r0, #1
 8016a24:	e7b1      	b.n	801698a <rmw_init_options_init+0x1e>
 8016a26:	bf00      	nop
 8016a28:	0801d5a4 	.word	0x0801d5a4
 8016a2c:	20015b84 	.word	0x20015b84
 8016a30:	20010f70 	.word	0x20010f70
 8016a34:	20010dfc 	.word	0x20010dfc
 8016a38:	0801cfb4 	.word	0x0801cfb4

08016a3c <rmw_init_options_copy>:
 8016a3c:	b570      	push	{r4, r5, r6, lr}
 8016a3e:	b158      	cbz	r0, 8016a58 <rmw_init_options_copy+0x1c>
 8016a40:	460d      	mov	r5, r1
 8016a42:	b149      	cbz	r1, 8016a58 <rmw_init_options_copy+0x1c>
 8016a44:	4604      	mov	r4, r0
 8016a46:	6880      	ldr	r0, [r0, #8]
 8016a48:	b120      	cbz	r0, 8016a54 <rmw_init_options_copy+0x18>
 8016a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8016ac4 <rmw_init_options_copy+0x88>)
 8016a4c:	6819      	ldr	r1, [r3, #0]
 8016a4e:	f7e9 fbdf 	bl	8000210 <strcmp>
 8016a52:	bb90      	cbnz	r0, 8016aba <rmw_init_options_copy+0x7e>
 8016a54:	68ab      	ldr	r3, [r5, #8]
 8016a56:	b113      	cbz	r3, 8016a5e <rmw_init_options_copy+0x22>
 8016a58:	250b      	movs	r5, #11
 8016a5a:	4628      	mov	r0, r5
 8016a5c:	bd70      	pop	{r4, r5, r6, pc}
 8016a5e:	4623      	mov	r3, r4
 8016a60:	462a      	mov	r2, r5
 8016a62:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8016a66:	f8d3 c000 	ldr.w	ip, [r3]
 8016a6a:	6858      	ldr	r0, [r3, #4]
 8016a6c:	6899      	ldr	r1, [r3, #8]
 8016a6e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8016a72:	f8c2 e00c 	str.w	lr, [r2, #12]
 8016a76:	3310      	adds	r3, #16
 8016a78:	42b3      	cmp	r3, r6
 8016a7a:	f8c2 c000 	str.w	ip, [r2]
 8016a7e:	6050      	str	r0, [r2, #4]
 8016a80:	6091      	str	r1, [r2, #8]
 8016a82:	f102 0210 	add.w	r2, r2, #16
 8016a86:	d1ee      	bne.n	8016a66 <rmw_init_options_copy+0x2a>
 8016a88:	6819      	ldr	r1, [r3, #0]
 8016a8a:	685b      	ldr	r3, [r3, #4]
 8016a8c:	480e      	ldr	r0, [pc, #56]	@ (8016ac8 <rmw_init_options_copy+0x8c>)
 8016a8e:	6053      	str	r3, [r2, #4]
 8016a90:	6011      	str	r1, [r2, #0]
 8016a92:	f7ff fefd 	bl	8016890 <get_memory>
 8016a96:	b198      	cbz	r0, 8016ac0 <rmw_init_options_copy+0x84>
 8016a98:	6883      	ldr	r3, [r0, #8]
 8016a9a:	636b      	str	r3, [r5, #52]	@ 0x34
 8016a9c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016a9e:	f102 0c10 	add.w	ip, r2, #16
 8016aa2:	f103 0410 	add.w	r4, r3, #16
 8016aa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016aac:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8016ab0:	2500      	movs	r5, #0
 8016ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	bd70      	pop	{r4, r5, r6, pc}
 8016aba:	250c      	movs	r5, #12
 8016abc:	4628      	mov	r0, r5
 8016abe:	bd70      	pop	{r4, r5, r6, pc}
 8016ac0:	2501      	movs	r5, #1
 8016ac2:	e7ca      	b.n	8016a5a <rmw_init_options_copy+0x1e>
 8016ac4:	0801d5a4 	.word	0x0801d5a4
 8016ac8:	20015b84 	.word	0x20015b84

08016acc <rmw_init_options_fini>:
 8016acc:	2800      	cmp	r0, #0
 8016ace:	d03d      	beq.n	8016b4c <rmw_init_options_fini+0x80>
 8016ad0:	b510      	push	{r4, lr}
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	b08e      	sub	sp, #56	@ 0x38
 8016ad6:	3020      	adds	r0, #32
 8016ad8:	f7f5 ff9a 	bl	800ca10 <rcutils_allocator_is_valid>
 8016adc:	b360      	cbz	r0, 8016b38 <rmw_init_options_fini+0x6c>
 8016ade:	68a0      	ldr	r0, [r4, #8]
 8016ae0:	b120      	cbz	r0, 8016aec <rmw_init_options_fini+0x20>
 8016ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8016b54 <rmw_init_options_fini+0x88>)
 8016ae4:	6819      	ldr	r1, [r3, #0]
 8016ae6:	f7e9 fb93 	bl	8000210 <strcmp>
 8016aea:	bb68      	cbnz	r0, 8016b48 <rmw_init_options_fini+0x7c>
 8016aec:	4b1a      	ldr	r3, [pc, #104]	@ (8016b58 <rmw_init_options_fini+0x8c>)
 8016aee:	6819      	ldr	r1, [r3, #0]
 8016af0:	b331      	cbz	r1, 8016b40 <rmw_init_options_fini+0x74>
 8016af2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8016af4:	e001      	b.n	8016afa <rmw_init_options_fini+0x2e>
 8016af6:	6849      	ldr	r1, [r1, #4]
 8016af8:	b311      	cbz	r1, 8016b40 <rmw_init_options_fini+0x74>
 8016afa:	688b      	ldr	r3, [r1, #8]
 8016afc:	429a      	cmp	r2, r3
 8016afe:	d1fa      	bne.n	8016af6 <rmw_init_options_fini+0x2a>
 8016b00:	4815      	ldr	r0, [pc, #84]	@ (8016b58 <rmw_init_options_fini+0x8c>)
 8016b02:	f7ff fed5 	bl	80168b0 <put_memory>
 8016b06:	4668      	mov	r0, sp
 8016b08:	f7ff fcc2 	bl	8016490 <rmw_get_zero_initialized_init_options>
 8016b0c:	46ee      	mov	lr, sp
 8016b0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b12:	46a4      	mov	ip, r4
 8016b14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016b2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016b30:	2300      	movs	r3, #0
 8016b32:	4618      	mov	r0, r3
 8016b34:	b00e      	add	sp, #56	@ 0x38
 8016b36:	bd10      	pop	{r4, pc}
 8016b38:	230b      	movs	r3, #11
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	b00e      	add	sp, #56	@ 0x38
 8016b3e:	bd10      	pop	{r4, pc}
 8016b40:	2301      	movs	r3, #1
 8016b42:	4618      	mov	r0, r3
 8016b44:	b00e      	add	sp, #56	@ 0x38
 8016b46:	bd10      	pop	{r4, pc}
 8016b48:	230c      	movs	r3, #12
 8016b4a:	e7f2      	b.n	8016b32 <rmw_init_options_fini+0x66>
 8016b4c:	230b      	movs	r3, #11
 8016b4e:	4618      	mov	r0, r3
 8016b50:	4770      	bx	lr
 8016b52:	bf00      	nop
 8016b54:	0801d5a4 	.word	0x0801d5a4
 8016b58:	20015b84 	.word	0x20015b84

08016b5c <rmw_init>:
 8016b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b60:	b083      	sub	sp, #12
 8016b62:	2800      	cmp	r0, #0
 8016b64:	f000 80d3 	beq.w	8016d0e <rmw_init+0x1b2>
 8016b68:	460e      	mov	r6, r1
 8016b6a:	2900      	cmp	r1, #0
 8016b6c:	f000 80cf 	beq.w	8016d0e <rmw_init+0x1b2>
 8016b70:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8016b72:	4605      	mov	r5, r0
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	f000 80ca 	beq.w	8016d0e <rmw_init+0x1b2>
 8016b7a:	4b78      	ldr	r3, [pc, #480]	@ (8016d5c <rmw_init+0x200>)
 8016b7c:	6880      	ldr	r0, [r0, #8]
 8016b7e:	681f      	ldr	r7, [r3, #0]
 8016b80:	b128      	cbz	r0, 8016b8e <rmw_init+0x32>
 8016b82:	4639      	mov	r1, r7
 8016b84:	f7e9 fb44 	bl	8000210 <strcmp>
 8016b88:	2800      	cmp	r0, #0
 8016b8a:	f040 80ca 	bne.w	8016d22 <rmw_init+0x1c6>
 8016b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b92:	4c73      	ldr	r4, [pc, #460]	@ (8016d60 <rmw_init+0x204>)
 8016b94:	4973      	ldr	r1, [pc, #460]	@ (8016d64 <rmw_init+0x208>)
 8016b96:	4874      	ldr	r0, [pc, #464]	@ (8016d68 <rmw_init+0x20c>)
 8016b98:	60b7      	str	r7, [r6, #8]
 8016b9a:	e9c6 2300 	strd	r2, r3, [r6]
 8016b9e:	68eb      	ldr	r3, [r5, #12]
 8016ba0:	64b3      	str	r3, [r6, #72]	@ 0x48
 8016ba2:	2201      	movs	r2, #1
 8016ba4:	f7f6 fa22 	bl	800cfec <rmw_uxrce_init_session_memory>
 8016ba8:	4620      	mov	r0, r4
 8016baa:	4970      	ldr	r1, [pc, #448]	@ (8016d6c <rmw_init+0x210>)
 8016bac:	2204      	movs	r2, #4
 8016bae:	f7f6 fa5d 	bl	800d06c <rmw_uxrce_init_static_input_buffer_memory>
 8016bb2:	f04f 0800 	mov.w	r8, #0
 8016bb6:	486c      	ldr	r0, [pc, #432]	@ (8016d68 <rmw_init+0x20c>)
 8016bb8:	f884 800d 	strb.w	r8, [r4, #13]
 8016bbc:	f7ff fe68 	bl	8016890 <get_memory>
 8016bc0:	2800      	cmp	r0, #0
 8016bc2:	f000 80a9 	beq.w	8016d18 <rmw_init+0x1bc>
 8016bc6:	6884      	ldr	r4, [r0, #8]
 8016bc8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8016bca:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8016bcc:	f890 c010 	ldrb.w	ip, [r0, #16]
 8016bd0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016bd4:	9101      	str	r1, [sp, #4]
 8016bd6:	6a00      	ldr	r0, [r0, #32]
 8016bd8:	9000      	str	r0, [sp, #0]
 8016bda:	f104 0910 	add.w	r9, r4, #16
 8016bde:	4661      	mov	r1, ip
 8016be0:	4648      	mov	r0, r9
 8016be2:	f001 fa01 	bl	8017fe8 <uxr_set_custom_transport_callbacks>
 8016be6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8016bea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016bee:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8016bf2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8016bf6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8016bfa:	495d      	ldr	r1, [pc, #372]	@ (8016d70 <rmw_init+0x214>)
 8016bfc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8016c00:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8016c04:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8016c08:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8016c0c:	4859      	ldr	r0, [pc, #356]	@ (8016d74 <rmw_init+0x218>)
 8016c0e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8016c12:	2201      	movs	r2, #1
 8016c14:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8016c16:	f7f6 f9c9 	bl	800cfac <rmw_uxrce_init_node_memory>
 8016c1a:	4957      	ldr	r1, [pc, #348]	@ (8016d78 <rmw_init+0x21c>)
 8016c1c:	4857      	ldr	r0, [pc, #348]	@ (8016d7c <rmw_init+0x220>)
 8016c1e:	2205      	movs	r2, #5
 8016c20:	f7f6 f9a4 	bl	800cf6c <rmw_uxrce_init_subscription_memory>
 8016c24:	4956      	ldr	r1, [pc, #344]	@ (8016d80 <rmw_init+0x224>)
 8016c26:	4857      	ldr	r0, [pc, #348]	@ (8016d84 <rmw_init+0x228>)
 8016c28:	220a      	movs	r2, #10
 8016c2a:	f7f6 f97f 	bl	800cf2c <rmw_uxrce_init_publisher_memory>
 8016c2e:	4956      	ldr	r1, [pc, #344]	@ (8016d88 <rmw_init+0x22c>)
 8016c30:	4856      	ldr	r0, [pc, #344]	@ (8016d8c <rmw_init+0x230>)
 8016c32:	2207      	movs	r2, #7
 8016c34:	f7f6 f93a 	bl	800ceac <rmw_uxrce_init_service_memory>
 8016c38:	4955      	ldr	r1, [pc, #340]	@ (8016d90 <rmw_init+0x234>)
 8016c3a:	4856      	ldr	r0, [pc, #344]	@ (8016d94 <rmw_init+0x238>)
 8016c3c:	2201      	movs	r2, #1
 8016c3e:	f7f6 f955 	bl	800ceec <rmw_uxrce_init_client_memory>
 8016c42:	4955      	ldr	r1, [pc, #340]	@ (8016d98 <rmw_init+0x23c>)
 8016c44:	4855      	ldr	r0, [pc, #340]	@ (8016d9c <rmw_init+0x240>)
 8016c46:	220f      	movs	r2, #15
 8016c48:	f7f6 f9f0 	bl	800d02c <rmw_uxrce_init_topic_memory>
 8016c4c:	4954      	ldr	r1, [pc, #336]	@ (8016da0 <rmw_init+0x244>)
 8016c4e:	4855      	ldr	r0, [pc, #340]	@ (8016da4 <rmw_init+0x248>)
 8016c50:	2203      	movs	r2, #3
 8016c52:	f7f6 fa2b 	bl	800d0ac <rmw_uxrce_init_init_options_impl_memory>
 8016c56:	4954      	ldr	r1, [pc, #336]	@ (8016da8 <rmw_init+0x24c>)
 8016c58:	4854      	ldr	r0, [pc, #336]	@ (8016dac <rmw_init+0x250>)
 8016c5a:	2204      	movs	r2, #4
 8016c5c:	f7f6 fa46 	bl	800d0ec <rmw_uxrce_init_wait_set_memory>
 8016c60:	4953      	ldr	r1, [pc, #332]	@ (8016db0 <rmw_init+0x254>)
 8016c62:	4854      	ldr	r0, [pc, #336]	@ (8016db4 <rmw_init+0x258>)
 8016c64:	2204      	movs	r2, #4
 8016c66:	f7f6 fa61 	bl	800d12c <rmw_uxrce_init_guard_condition_memory>
 8016c6a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8016c6c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8016c6e:	4642      	mov	r2, r8
 8016c70:	f000 fe90 	bl	8017994 <rmw_uxrce_transport_init>
 8016c74:	4607      	mov	r7, r0
 8016c76:	2800      	cmp	r0, #0
 8016c78:	d158      	bne.n	8016d2c <rmw_init+0x1d0>
 8016c7a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8016c7c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8016c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016c82:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8016c86:	4628      	mov	r0, r5
 8016c88:	f7f9 fe56 	bl	8010938 <uxr_init_session>
 8016c8c:	494a      	ldr	r1, [pc, #296]	@ (8016db8 <rmw_init+0x25c>)
 8016c8e:	4622      	mov	r2, r4
 8016c90:	4628      	mov	r0, r5
 8016c92:	f7f9 fe75 	bl	8010980 <uxr_set_topic_callback>
 8016c96:	4949      	ldr	r1, [pc, #292]	@ (8016dbc <rmw_init+0x260>)
 8016c98:	463a      	mov	r2, r7
 8016c9a:	4628      	mov	r0, r5
 8016c9c:	f7f9 fe6c 	bl	8010978 <uxr_set_status_callback>
 8016ca0:	4947      	ldr	r1, [pc, #284]	@ (8016dc0 <rmw_init+0x264>)
 8016ca2:	463a      	mov	r2, r7
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	f7f9 fe6f 	bl	8010988 <uxr_set_request_callback>
 8016caa:	4946      	ldr	r1, [pc, #280]	@ (8016dc4 <rmw_init+0x268>)
 8016cac:	463a      	mov	r2, r7
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f7f9 fe6e 	bl	8010990 <uxr_set_reply_callback>
 8016cb4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016cb8:	2304      	movs	r3, #4
 8016cba:	0092      	lsls	r2, r2, #2
 8016cbc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	f7f9 fea3 	bl	8010a0c <uxr_create_input_reliable_stream>
 8016cc6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016cca:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8016cce:	0092      	lsls	r2, r2, #2
 8016cd0:	2304      	movs	r3, #4
 8016cd2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	f7f9 fe70 	bl	80109bc <uxr_create_output_reliable_stream>
 8016cdc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	f7f9 fe8d 	bl	8010a00 <uxr_create_input_best_effort_stream>
 8016ce6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8016cea:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8016cee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016cf2:	3114      	adds	r1, #20
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	f7f9 fe4f 	bl	8010998 <uxr_create_output_best_effort_stream>
 8016cfa:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8016cfe:	4628      	mov	r0, r5
 8016d00:	f7fa fbda 	bl	80114b8 <uxr_create_session>
 8016d04:	b1f8      	cbz	r0, 8016d46 <rmw_init+0x1ea>
 8016d06:	4638      	mov	r0, r7
 8016d08:	b003      	add	sp, #12
 8016d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d0e:	270b      	movs	r7, #11
 8016d10:	4638      	mov	r0, r7
 8016d12:	b003      	add	sp, #12
 8016d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d18:	2701      	movs	r7, #1
 8016d1a:	4638      	mov	r0, r7
 8016d1c:	b003      	add	sp, #12
 8016d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d22:	270c      	movs	r7, #12
 8016d24:	4638      	mov	r0, r7
 8016d26:	b003      	add	sp, #12
 8016d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d2c:	4648      	mov	r0, r9
 8016d2e:	f001 f99d 	bl	801806c <uxr_close_custom_transport>
 8016d32:	480d      	ldr	r0, [pc, #52]	@ (8016d68 <rmw_init+0x20c>)
 8016d34:	4621      	mov	r1, r4
 8016d36:	f7ff fdbb 	bl	80168b0 <put_memory>
 8016d3a:	4638      	mov	r0, r7
 8016d3c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8016d40:	b003      	add	sp, #12
 8016d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d46:	4648      	mov	r0, r9
 8016d48:	f001 f990 	bl	801806c <uxr_close_custom_transport>
 8016d4c:	4806      	ldr	r0, [pc, #24]	@ (8016d68 <rmw_init+0x20c>)
 8016d4e:	4621      	mov	r1, r4
 8016d50:	f7ff fdae 	bl	80168b0 <put_memory>
 8016d54:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8016d56:	2701      	movs	r7, #1
 8016d58:	e7d5      	b.n	8016d06 <rmw_init+0x1aa>
 8016d5a:	bf00      	nop
 8016d5c:	0801d5a4 	.word	0x0801d5a4
 8016d60:	20015bd4 	.word	0x20015bd4
 8016d64:	20011e80 	.word	0x20011e80
 8016d68:	20015bc4 	.word	0x20015bc4
 8016d6c:	20013428 	.word	0x20013428
 8016d70:	20010ff4 	.word	0x20010ff4
 8016d74:	20015b94 	.word	0x20015b94
 8016d78:	20015528 	.word	0x20015528
 8016d7c:	20015be4 	.word	0x20015be4
 8016d80:	20011098 	.word	0x20011098
 8016d84:	20015ba4 	.word	0x20015ba4
 8016d88:	20011908 	.word	0x20011908
 8016d8c:	20015bb4 	.word	0x20015bb4
 8016d90:	20010e28 	.word	0x20010e28
 8016d94:	20010e18 	.word	0x20010e18
 8016d98:	20015960 	.word	0x20015960
 8016d9c:	20015bf4 	.word	0x20015bf4
 8016da0:	20010f70 	.word	0x20010f70
 8016da4:	20015b84 	.word	0x20015b84
 8016da8:	20015b04 	.word	0x20015b04
 8016dac:	20015c04 	.word	0x20015c04
 8016db0:	20010ef0 	.word	0x20010ef0
 8016db4:	20015b74 	.word	0x20015b74
 8016db8:	08019d59 	.word	0x08019d59
 8016dbc:	08019d51 	.word	0x08019d51
 8016dc0:	08019df1 	.word	0x08019df1
 8016dc4:	08019e8d 	.word	0x08019e8d

08016dc8 <rmw_context_fini>:
 8016dc8:	4b17      	ldr	r3, [pc, #92]	@ (8016e28 <rmw_context_fini+0x60>)
 8016dca:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8016dcc:	b570      	push	{r4, r5, r6, lr}
 8016dce:	681c      	ldr	r4, [r3, #0]
 8016dd0:	4605      	mov	r5, r0
 8016dd2:	b334      	cbz	r4, 8016e22 <rmw_context_fini+0x5a>
 8016dd4:	2600      	movs	r6, #0
 8016dd6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8016dda:	6902      	ldr	r2, [r0, #16]
 8016ddc:	428a      	cmp	r2, r1
 8016dde:	d018      	beq.n	8016e12 <rmw_context_fini+0x4a>
 8016de0:	2c00      	cmp	r4, #0
 8016de2:	d1f8      	bne.n	8016dd6 <rmw_context_fini+0xe>
 8016de4:	b189      	cbz	r1, 8016e0a <rmw_context_fini+0x42>
 8016de6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8016dea:	789b      	ldrb	r3, [r3, #2]
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8016df2:	bf14      	ite	ne
 8016df4:	210a      	movne	r1, #10
 8016df6:	2100      	moveq	r1, #0
 8016df8:	f7fa fb36 	bl	8011468 <uxr_delete_session_retries>
 8016dfc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016dfe:	f7f6 f9b5 	bl	800d16c <rmw_uxrce_fini_session_memory>
 8016e02:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8016e04:	3010      	adds	r0, #16
 8016e06:	f001 f931 	bl	801806c <uxr_close_custom_transport>
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016e0e:	4630      	mov	r0, r6
 8016e10:	bd70      	pop	{r4, r5, r6, pc}
 8016e12:	3018      	adds	r0, #24
 8016e14:	f000 f90e 	bl	8017034 <rmw_destroy_node>
 8016e18:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016e1a:	4606      	mov	r6, r0
 8016e1c:	2c00      	cmp	r4, #0
 8016e1e:	d1da      	bne.n	8016dd6 <rmw_context_fini+0xe>
 8016e20:	e7e0      	b.n	8016de4 <rmw_context_fini+0x1c>
 8016e22:	4626      	mov	r6, r4
 8016e24:	e7de      	b.n	8016de4 <rmw_context_fini+0x1c>
 8016e26:	bf00      	nop
 8016e28:	20015b94 	.word	0x20015b94

08016e2c <create_topic>:
 8016e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e30:	4605      	mov	r5, r0
 8016e32:	b084      	sub	sp, #16
 8016e34:	4822      	ldr	r0, [pc, #136]	@ (8016ec0 <create_topic+0x94>)
 8016e36:	460f      	mov	r7, r1
 8016e38:	4616      	mov	r6, r2
 8016e3a:	f7ff fd29 	bl	8016890 <get_memory>
 8016e3e:	4604      	mov	r4, r0
 8016e40:	2800      	cmp	r0, #0
 8016e42:	d039      	beq.n	8016eb8 <create_topic+0x8c>
 8016e44:	692b      	ldr	r3, [r5, #16]
 8016e46:	6884      	ldr	r4, [r0, #8]
 8016e48:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016ec8 <create_topic+0x9c>
 8016e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016e50:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016e54:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016e58:	1c42      	adds	r2, r0, #1
 8016e5a:	2102      	movs	r1, #2
 8016e5c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016e60:	f7f9 fcaa 	bl	80107b8 <uxr_object_id>
 8016e64:	223c      	movs	r2, #60	@ 0x3c
 8016e66:	6120      	str	r0, [r4, #16]
 8016e68:	4641      	mov	r1, r8
 8016e6a:	4638      	mov	r0, r7
 8016e6c:	f7f6 fbf6 	bl	800d65c <generate_topic_name>
 8016e70:	b1f0      	cbz	r0, 8016eb0 <create_topic+0x84>
 8016e72:	4f14      	ldr	r7, [pc, #80]	@ (8016ec4 <create_topic+0x98>)
 8016e74:	4630      	mov	r0, r6
 8016e76:	2264      	movs	r2, #100	@ 0x64
 8016e78:	4639      	mov	r1, r7
 8016e7a:	f7f6 fbbf 	bl	800d5fc <generate_type_name>
 8016e7e:	b1b8      	cbz	r0, 8016eb0 <create_topic+0x84>
 8016e80:	6928      	ldr	r0, [r5, #16]
 8016e82:	2306      	movs	r3, #6
 8016e84:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016e88:	f8cd 8000 	str.w	r8, [sp]
 8016e8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016e90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e94:	6811      	ldr	r1, [r2, #0]
 8016e96:	696b      	ldr	r3, [r5, #20]
 8016e98:	6922      	ldr	r2, [r4, #16]
 8016e9a:	f7f9 facf 	bl	801043c <uxr_buffer_create_topic_bin>
 8016e9e:	4602      	mov	r2, r0
 8016ea0:	6928      	ldr	r0, [r5, #16]
 8016ea2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016ea6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016eaa:	f7f6 fad7 	bl	800d45c <run_xrce_session>
 8016eae:	b918      	cbnz	r0, 8016eb8 <create_topic+0x8c>
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	f7f6 f9d1 	bl	800d258 <rmw_uxrce_fini_topic_memory>
 8016eb6:	2400      	movs	r4, #0
 8016eb8:	4620      	mov	r0, r4
 8016eba:	b004      	add	sp, #16
 8016ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ec0:	20015bf4 	.word	0x20015bf4
 8016ec4:	20015d48 	.word	0x20015d48
 8016ec8:	20015d0c 	.word	0x20015d0c

08016ecc <destroy_topic>:
 8016ecc:	b538      	push	{r3, r4, r5, lr}
 8016ece:	6985      	ldr	r5, [r0, #24]
 8016ed0:	b1d5      	cbz	r5, 8016f08 <destroy_topic+0x3c>
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	6928      	ldr	r0, [r5, #16]
 8016ed6:	6922      	ldr	r2, [r4, #16]
 8016ed8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016edc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ee0:	6819      	ldr	r1, [r3, #0]
 8016ee2:	f7f9 fa2d 	bl	8010340 <uxr_buffer_delete_entity>
 8016ee6:	4602      	mov	r2, r0
 8016ee8:	6928      	ldr	r0, [r5, #16]
 8016eea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016eee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016ef2:	f7f6 fab3 	bl	800d45c <run_xrce_session>
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	4620      	mov	r0, r4
 8016efa:	bf14      	ite	ne
 8016efc:	2400      	movne	r4, #0
 8016efe:	2402      	moveq	r4, #2
 8016f00:	f7f6 f9aa 	bl	800d258 <rmw_uxrce_fini_topic_memory>
 8016f04:	4620      	mov	r0, r4
 8016f06:	bd38      	pop	{r3, r4, r5, pc}
 8016f08:	2401      	movs	r4, #1
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	bd38      	pop	{r3, r4, r5, pc}
 8016f0e:	bf00      	nop

08016f10 <create_node>:
 8016f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f14:	b083      	sub	sp, #12
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d05f      	beq.n	8016fda <create_node+0xca>
 8016f1a:	4606      	mov	r6, r0
 8016f1c:	4835      	ldr	r0, [pc, #212]	@ (8016ff4 <create_node+0xe4>)
 8016f1e:	460f      	mov	r7, r1
 8016f20:	4690      	mov	r8, r2
 8016f22:	461d      	mov	r5, r3
 8016f24:	f7ff fcb4 	bl	8016890 <get_memory>
 8016f28:	2800      	cmp	r0, #0
 8016f2a:	d056      	beq.n	8016fda <create_node+0xca>
 8016f2c:	6884      	ldr	r4, [r0, #8]
 8016f2e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016f30:	6123      	str	r3, [r4, #16]
 8016f32:	f7ff fd15 	bl	8016960 <rmw_get_implementation_identifier>
 8016f36:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8016f3a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8016f3e:	f8c4 9020 	str.w	r9, [r4, #32]
 8016f42:	4630      	mov	r0, r6
 8016f44:	f7e9 f95c 	bl	8000200 <strlen>
 8016f48:	1c42      	adds	r2, r0, #1
 8016f4a:	2a3c      	cmp	r2, #60	@ 0x3c
 8016f4c:	f104 0518 	add.w	r5, r4, #24
 8016f50:	d840      	bhi.n	8016fd4 <create_node+0xc4>
 8016f52:	4648      	mov	r0, r9
 8016f54:	4631      	mov	r1, r6
 8016f56:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8016f5a:	f004 f8f6 	bl	801b14a <memcpy>
 8016f5e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8016f62:	4638      	mov	r0, r7
 8016f64:	f7e9 f94c 	bl	8000200 <strlen>
 8016f68:	1c42      	adds	r2, r0, #1
 8016f6a:	2a3c      	cmp	r2, #60	@ 0x3c
 8016f6c:	d832      	bhi.n	8016fd4 <create_node+0xc4>
 8016f6e:	4639      	mov	r1, r7
 8016f70:	4648      	mov	r0, r9
 8016f72:	f004 f8ea 	bl	801b14a <memcpy>
 8016f76:	6923      	ldr	r3, [r4, #16]
 8016f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016f7c:	2101      	movs	r1, #1
 8016f7e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8016f82:	1842      	adds	r2, r0, r1
 8016f84:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8016f88:	f7f9 fc16 	bl	80107b8 <uxr_object_id>
 8016f8c:	6160      	str	r0, [r4, #20]
 8016f8e:	783b      	ldrb	r3, [r7, #0]
 8016f90:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f92:	d127      	bne.n	8016fe4 <create_node+0xd4>
 8016f94:	787b      	ldrb	r3, [r7, #1]
 8016f96:	bb2b      	cbnz	r3, 8016fe4 <create_node+0xd4>
 8016f98:	4a17      	ldr	r2, [pc, #92]	@ (8016ff8 <create_node+0xe8>)
 8016f9a:	4818      	ldr	r0, [pc, #96]	@ (8016ffc <create_node+0xec>)
 8016f9c:	4633      	mov	r3, r6
 8016f9e:	213c      	movs	r1, #60	@ 0x3c
 8016fa0:	f003 fbf6 	bl	801a790 <sniprintf>
 8016fa4:	6920      	ldr	r0, [r4, #16]
 8016fa6:	4915      	ldr	r1, [pc, #84]	@ (8016ffc <create_node+0xec>)
 8016fa8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016fac:	9100      	str	r1, [sp, #0]
 8016fae:	2106      	movs	r1, #6
 8016fb0:	9101      	str	r1, [sp, #4]
 8016fb2:	6811      	ldr	r1, [r2, #0]
 8016fb4:	6962      	ldr	r2, [r4, #20]
 8016fb6:	fa1f f388 	uxth.w	r3, r8
 8016fba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016fbe:	f7f9 fa0b 	bl	80103d8 <uxr_buffer_create_participant_bin>
 8016fc2:	4602      	mov	r2, r0
 8016fc4:	6920      	ldr	r0, [r4, #16]
 8016fc6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016fca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016fce:	f7f6 fa45 	bl	800d45c <run_xrce_session>
 8016fd2:	b918      	cbnz	r0, 8016fdc <create_node+0xcc>
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f7f6 f8cf 	bl	800d178 <rmw_uxrce_fini_node_memory>
 8016fda:	2500      	movs	r5, #0
 8016fdc:	4628      	mov	r0, r5
 8016fde:	b003      	add	sp, #12
 8016fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fe4:	4a06      	ldr	r2, [pc, #24]	@ (8017000 <create_node+0xf0>)
 8016fe6:	9600      	str	r6, [sp, #0]
 8016fe8:	463b      	mov	r3, r7
 8016fea:	213c      	movs	r1, #60	@ 0x3c
 8016fec:	4803      	ldr	r0, [pc, #12]	@ (8016ffc <create_node+0xec>)
 8016fee:	f003 fbcf 	bl	801a790 <sniprintf>
 8016ff2:	e7d7      	b.n	8016fa4 <create_node+0x94>
 8016ff4:	20015b94 	.word	0x20015b94
 8016ff8:	0801c92c 	.word	0x0801c92c
 8016ffc:	20015dac 	.word	0x20015dac
 8017000:	0801cfbc 	.word	0x0801cfbc

08017004 <rmw_create_node>:
 8017004:	b199      	cbz	r1, 801702e <rmw_create_node+0x2a>
 8017006:	780b      	ldrb	r3, [r1, #0]
 8017008:	468c      	mov	ip, r1
 801700a:	b183      	cbz	r3, 801702e <rmw_create_node+0x2a>
 801700c:	b410      	push	{r4}
 801700e:	4614      	mov	r4, r2
 8017010:	b14a      	cbz	r2, 8017026 <rmw_create_node+0x22>
 8017012:	7813      	ldrb	r3, [r2, #0]
 8017014:	b13b      	cbz	r3, 8017026 <rmw_create_node+0x22>
 8017016:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8017018:	4603      	mov	r3, r0
 801701a:	4621      	mov	r1, r4
 801701c:	4660      	mov	r0, ip
 801701e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017022:	f7ff bf75 	b.w	8016f10 <create_node>
 8017026:	2000      	movs	r0, #0
 8017028:	f85d 4b04 	ldr.w	r4, [sp], #4
 801702c:	4770      	bx	lr
 801702e:	2000      	movs	r0, #0
 8017030:	4770      	bx	lr
 8017032:	bf00      	nop

08017034 <rmw_destroy_node>:
 8017034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017036:	b328      	cbz	r0, 8017084 <rmw_destroy_node+0x50>
 8017038:	4607      	mov	r7, r0
 801703a:	6800      	ldr	r0, [r0, #0]
 801703c:	b120      	cbz	r0, 8017048 <rmw_destroy_node+0x14>
 801703e:	4b36      	ldr	r3, [pc, #216]	@ (8017118 <rmw_destroy_node+0xe4>)
 8017040:	6819      	ldr	r1, [r3, #0]
 8017042:	f7e9 f8e5 	bl	8000210 <strcmp>
 8017046:	b9e8      	cbnz	r0, 8017084 <rmw_destroy_node+0x50>
 8017048:	687d      	ldr	r5, [r7, #4]
 801704a:	b1dd      	cbz	r5, 8017084 <rmw_destroy_node+0x50>
 801704c:	4b33      	ldr	r3, [pc, #204]	@ (801711c <rmw_destroy_node+0xe8>)
 801704e:	681c      	ldr	r4, [r3, #0]
 8017050:	2c00      	cmp	r4, #0
 8017052:	d05f      	beq.n	8017114 <rmw_destroy_node+0xe0>
 8017054:	2600      	movs	r6, #0
 8017056:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801705a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801705e:	429d      	cmp	r5, r3
 8017060:	d013      	beq.n	801708a <rmw_destroy_node+0x56>
 8017062:	2c00      	cmp	r4, #0
 8017064:	d1f7      	bne.n	8017056 <rmw_destroy_node+0x22>
 8017066:	4b2e      	ldr	r3, [pc, #184]	@ (8017120 <rmw_destroy_node+0xec>)
 8017068:	681c      	ldr	r4, [r3, #0]
 801706a:	b1c4      	cbz	r4, 801709e <rmw_destroy_node+0x6a>
 801706c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8017070:	6a0b      	ldr	r3, [r1, #32]
 8017072:	429d      	cmp	r5, r3
 8017074:	d1f9      	bne.n	801706a <rmw_destroy_node+0x36>
 8017076:	317c      	adds	r1, #124	@ 0x7c
 8017078:	4638      	mov	r0, r7
 801707a:	f000 fbd7 	bl	801782c <rmw_destroy_subscription>
 801707e:	2801      	cmp	r0, #1
 8017080:	4606      	mov	r6, r0
 8017082:	d1f2      	bne.n	801706a <rmw_destroy_node+0x36>
 8017084:	2601      	movs	r6, #1
 8017086:	4630      	mov	r0, r6
 8017088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801708a:	3184      	adds	r1, #132	@ 0x84
 801708c:	4638      	mov	r0, r7
 801708e:	f7f5 febb 	bl	800ce08 <rmw_destroy_publisher>
 8017092:	2801      	cmp	r0, #1
 8017094:	4606      	mov	r6, r0
 8017096:	d0f5      	beq.n	8017084 <rmw_destroy_node+0x50>
 8017098:	2c00      	cmp	r4, #0
 801709a:	d1dc      	bne.n	8017056 <rmw_destroy_node+0x22>
 801709c:	e7e3      	b.n	8017066 <rmw_destroy_node+0x32>
 801709e:	4b21      	ldr	r3, [pc, #132]	@ (8017124 <rmw_destroy_node+0xf0>)
 80170a0:	681c      	ldr	r4, [r3, #0]
 80170a2:	b16c      	cbz	r4, 80170c0 <rmw_destroy_node+0x8c>
 80170a4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80170a8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80170aa:	429d      	cmp	r5, r3
 80170ac:	d1f9      	bne.n	80170a2 <rmw_destroy_node+0x6e>
 80170ae:	317c      	adds	r1, #124	@ 0x7c
 80170b0:	4638      	mov	r0, r7
 80170b2:	f000 fa65 	bl	8017580 <rmw_destroy_service>
 80170b6:	2801      	cmp	r0, #1
 80170b8:	4606      	mov	r6, r0
 80170ba:	d0e3      	beq.n	8017084 <rmw_destroy_node+0x50>
 80170bc:	2c00      	cmp	r4, #0
 80170be:	d1f1      	bne.n	80170a4 <rmw_destroy_node+0x70>
 80170c0:	4b19      	ldr	r3, [pc, #100]	@ (8017128 <rmw_destroy_node+0xf4>)
 80170c2:	681c      	ldr	r4, [r3, #0]
 80170c4:	b16c      	cbz	r4, 80170e2 <rmw_destroy_node+0xae>
 80170c6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80170ca:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80170cc:	429d      	cmp	r5, r3
 80170ce:	d1f9      	bne.n	80170c4 <rmw_destroy_node+0x90>
 80170d0:	317c      	adds	r1, #124	@ 0x7c
 80170d2:	4638      	mov	r0, r7
 80170d4:	f7ff fc00 	bl	80168d8 <rmw_destroy_client>
 80170d8:	2801      	cmp	r0, #1
 80170da:	4606      	mov	r6, r0
 80170dc:	d0d2      	beq.n	8017084 <rmw_destroy_node+0x50>
 80170de:	2c00      	cmp	r4, #0
 80170e0:	d1f1      	bne.n	80170c6 <rmw_destroy_node+0x92>
 80170e2:	6928      	ldr	r0, [r5, #16]
 80170e4:	696a      	ldr	r2, [r5, #20]
 80170e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80170ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80170ee:	6819      	ldr	r1, [r3, #0]
 80170f0:	f7f9 f926 	bl	8010340 <uxr_buffer_delete_entity>
 80170f4:	4602      	mov	r2, r0
 80170f6:	6928      	ldr	r0, [r5, #16]
 80170f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80170fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017100:	f7f6 f9ac 	bl	800d45c <run_xrce_session>
 8017104:	2800      	cmp	r0, #0
 8017106:	bf08      	it	eq
 8017108:	2602      	moveq	r6, #2
 801710a:	4638      	mov	r0, r7
 801710c:	f7f6 f834 	bl	800d178 <rmw_uxrce_fini_node_memory>
 8017110:	4630      	mov	r0, r6
 8017112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017114:	4626      	mov	r6, r4
 8017116:	e7a6      	b.n	8017066 <rmw_destroy_node+0x32>
 8017118:	0801d5a4 	.word	0x0801d5a4
 801711c:	20015ba4 	.word	0x20015ba4
 8017120:	20015be4 	.word	0x20015be4
 8017124:	20015bb4 	.word	0x20015bb4
 8017128:	20010e18 	.word	0x20010e18

0801712c <rmw_node_get_graph_guard_condition>:
 801712c:	6843      	ldr	r3, [r0, #4]
 801712e:	6918      	ldr	r0, [r3, #16]
 8017130:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8017134:	4770      	bx	lr
 8017136:	bf00      	nop

08017138 <rmw_send_request>:
 8017138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801713c:	4604      	mov	r4, r0
 801713e:	6800      	ldr	r0, [r0, #0]
 8017140:	b08b      	sub	sp, #44	@ 0x2c
 8017142:	460e      	mov	r6, r1
 8017144:	4615      	mov	r5, r2
 8017146:	b128      	cbz	r0, 8017154 <rmw_send_request+0x1c>
 8017148:	4b21      	ldr	r3, [pc, #132]	@ (80171d0 <rmw_send_request+0x98>)
 801714a:	6819      	ldr	r1, [r3, #0]
 801714c:	f7e9 f860 	bl	8000210 <strcmp>
 8017150:	2800      	cmp	r0, #0
 8017152:	d139      	bne.n	80171c8 <rmw_send_request+0x90>
 8017154:	6864      	ldr	r4, [r4, #4]
 8017156:	6963      	ldr	r3, [r4, #20]
 8017158:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801715c:	689b      	ldr	r3, [r3, #8]
 801715e:	4798      	blx	r3
 8017160:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017164:	4630      	mov	r0, r6
 8017166:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801716a:	4798      	blx	r3
 801716c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017170:	9000      	str	r0, [sp, #0]
 8017172:	6922      	ldr	r2, [r4, #16]
 8017174:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017176:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801717a:	ab02      	add	r3, sp, #8
 801717c:	f7fa fe18 	bl	8011db0 <uxr_prepare_output_stream>
 8017180:	2700      	movs	r7, #0
 8017182:	6028      	str	r0, [r5, #0]
 8017184:	606f      	str	r7, [r5, #4]
 8017186:	b198      	cbz	r0, 80171b0 <rmw_send_request+0x78>
 8017188:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801718c:	a902      	add	r1, sp, #8
 801718e:	4630      	mov	r0, r6
 8017190:	4798      	blx	r3
 8017192:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017196:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801719a:	2b01      	cmp	r3, #1
 801719c:	d00c      	beq.n	80171b8 <rmw_send_request+0x80>
 801719e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80171a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171a4:	f7fa f818 	bl	80111d8 <uxr_run_session_until_confirm_delivery>
 80171a8:	4638      	mov	r0, r7
 80171aa:	b00b      	add	sp, #44	@ 0x2c
 80171ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171b0:	2001      	movs	r0, #1
 80171b2:	b00b      	add	sp, #44	@ 0x2c
 80171b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171bc:	f7f9 fc4c 	bl	8010a58 <uxr_flash_output_streams>
 80171c0:	4638      	mov	r0, r7
 80171c2:	b00b      	add	sp, #44	@ 0x2c
 80171c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171c8:	200c      	movs	r0, #12
 80171ca:	b00b      	add	sp, #44	@ 0x2c
 80171cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171d0:	0801d5a4 	.word	0x0801d5a4

080171d4 <rmw_take_request>:
 80171d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171d8:	4605      	mov	r5, r0
 80171da:	6800      	ldr	r0, [r0, #0]
 80171dc:	b089      	sub	sp, #36	@ 0x24
 80171de:	460c      	mov	r4, r1
 80171e0:	4690      	mov	r8, r2
 80171e2:	461e      	mov	r6, r3
 80171e4:	b128      	cbz	r0, 80171f2 <rmw_take_request+0x1e>
 80171e6:	4b28      	ldr	r3, [pc, #160]	@ (8017288 <rmw_take_request+0xb4>)
 80171e8:	6819      	ldr	r1, [r3, #0]
 80171ea:	f7e9 f811 	bl	8000210 <strcmp>
 80171ee:	2800      	cmp	r0, #0
 80171f0:	d146      	bne.n	8017280 <rmw_take_request+0xac>
 80171f2:	b10e      	cbz	r6, 80171f8 <rmw_take_request+0x24>
 80171f4:	2300      	movs	r3, #0
 80171f6:	7033      	strb	r3, [r6, #0]
 80171f8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80171fc:	f7f6 f8b0 	bl	800d360 <rmw_uxrce_clean_expired_static_input_buffer>
 8017200:	4648      	mov	r0, r9
 8017202:	f7f6 f885 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017206:	4607      	mov	r7, r0
 8017208:	b3b0      	cbz	r0, 8017278 <rmw_take_request+0xa4>
 801720a:	6885      	ldr	r5, [r0, #8]
 801720c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017210:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017214:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017218:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801721c:	7423      	strb	r3, [r4, #16]
 801721e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017222:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017226:	74e2      	strb	r2, [r4, #19]
 8017228:	f8a4 3011 	strh.w	r3, [r4, #17]
 801722c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017230:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017234:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017238:	61e1      	str	r1, [r4, #28]
 801723a:	6162      	str	r2, [r4, #20]
 801723c:	61a3      	str	r3, [r4, #24]
 801723e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017242:	689b      	ldr	r3, [r3, #8]
 8017244:	4798      	blx	r3
 8017246:	6844      	ldr	r4, [r0, #4]
 8017248:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801724c:	f105 0110 	add.w	r1, r5, #16
 8017250:	4668      	mov	r0, sp
 8017252:	f7f8 ffad 	bl	80101b0 <ucdr_init_buffer>
 8017256:	68e3      	ldr	r3, [r4, #12]
 8017258:	4641      	mov	r1, r8
 801725a:	4668      	mov	r0, sp
 801725c:	4798      	blx	r3
 801725e:	4639      	mov	r1, r7
 8017260:	4604      	mov	r4, r0
 8017262:	480a      	ldr	r0, [pc, #40]	@ (801728c <rmw_take_request+0xb8>)
 8017264:	f7ff fb24 	bl	80168b0 <put_memory>
 8017268:	b106      	cbz	r6, 801726c <rmw_take_request+0x98>
 801726a:	7034      	strb	r4, [r6, #0]
 801726c:	f084 0001 	eor.w	r0, r4, #1
 8017270:	b2c0      	uxtb	r0, r0
 8017272:	b009      	add	sp, #36	@ 0x24
 8017274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017278:	2001      	movs	r0, #1
 801727a:	b009      	add	sp, #36	@ 0x24
 801727c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017280:	200c      	movs	r0, #12
 8017282:	b009      	add	sp, #36	@ 0x24
 8017284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017288:	0801d5a4 	.word	0x0801d5a4
 801728c:	20015bd4 	.word	0x20015bd4

08017290 <rmw_send_response>:
 8017290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017292:	4605      	mov	r5, r0
 8017294:	6800      	ldr	r0, [r0, #0]
 8017296:	b091      	sub	sp, #68	@ 0x44
 8017298:	460c      	mov	r4, r1
 801729a:	4616      	mov	r6, r2
 801729c:	b128      	cbz	r0, 80172aa <rmw_send_response+0x1a>
 801729e:	4b29      	ldr	r3, [pc, #164]	@ (8017344 <rmw_send_response+0xb4>)
 80172a0:	6819      	ldr	r1, [r3, #0]
 80172a2:	f7e8 ffb5 	bl	8000210 <strcmp>
 80172a6:	2800      	cmp	r0, #0
 80172a8:	d141      	bne.n	801732e <rmw_send_response+0x9e>
 80172aa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80172ae:	9306      	str	r3, [sp, #24]
 80172b0:	4623      	mov	r3, r4
 80172b2:	9207      	str	r2, [sp, #28]
 80172b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172b8:	686d      	ldr	r5, [r5, #4]
 80172ba:	789b      	ldrb	r3, [r3, #2]
 80172bc:	68a1      	ldr	r1, [r4, #8]
 80172be:	f88d 2017 	strb.w	r2, [sp, #23]
 80172c2:	f88d 3016 	strb.w	r3, [sp, #22]
 80172c6:	68e2      	ldr	r2, [r4, #12]
 80172c8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80172cc:	6860      	ldr	r0, [r4, #4]
 80172ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 80172d2:	ab02      	add	r3, sp, #8
 80172d4:	c307      	stmia	r3!, {r0, r1, r2}
 80172d6:	696b      	ldr	r3, [r5, #20]
 80172d8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80172da:	68db      	ldr	r3, [r3, #12]
 80172dc:	4798      	blx	r3
 80172de:	6844      	ldr	r4, [r0, #4]
 80172e0:	4630      	mov	r0, r6
 80172e2:	6923      	ldr	r3, [r4, #16]
 80172e4:	4798      	blx	r3
 80172e6:	f100 0318 	add.w	r3, r0, #24
 80172ea:	6938      	ldr	r0, [r7, #16]
 80172ec:	9300      	str	r3, [sp, #0]
 80172ee:	692a      	ldr	r2, [r5, #16]
 80172f0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80172f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80172f6:	ab08      	add	r3, sp, #32
 80172f8:	f7fa fd5a 	bl	8011db0 <uxr_prepare_output_stream>
 80172fc:	b910      	cbnz	r0, 8017304 <rmw_send_response+0x74>
 80172fe:	2001      	movs	r0, #1
 8017300:	b011      	add	sp, #68	@ 0x44
 8017302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017304:	a902      	add	r1, sp, #8
 8017306:	a808      	add	r0, sp, #32
 8017308:	f7fb febe 	bl	8013088 <uxr_serialize_SampleIdentity>
 801730c:	68a3      	ldr	r3, [r4, #8]
 801730e:	a908      	add	r1, sp, #32
 8017310:	4630      	mov	r0, r6
 8017312:	4798      	blx	r3
 8017314:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017318:	6938      	ldr	r0, [r7, #16]
 801731a:	2b01      	cmp	r3, #1
 801731c:	d00a      	beq.n	8017334 <rmw_send_response+0xa4>
 801731e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017320:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017324:	f7f9 ff58 	bl	80111d8 <uxr_run_session_until_confirm_delivery>
 8017328:	2000      	movs	r0, #0
 801732a:	b011      	add	sp, #68	@ 0x44
 801732c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801732e:	200c      	movs	r0, #12
 8017330:	b011      	add	sp, #68	@ 0x44
 8017332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017334:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017338:	f7f9 fb8e 	bl	8010a58 <uxr_flash_output_streams>
 801733c:	2000      	movs	r0, #0
 801733e:	b011      	add	sp, #68	@ 0x44
 8017340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017342:	bf00      	nop
 8017344:	0801d5a4 	.word	0x0801d5a4

08017348 <rmw_take_response>:
 8017348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801734c:	4604      	mov	r4, r0
 801734e:	6800      	ldr	r0, [r0, #0]
 8017350:	b088      	sub	sp, #32
 8017352:	4688      	mov	r8, r1
 8017354:	4617      	mov	r7, r2
 8017356:	461d      	mov	r5, r3
 8017358:	b120      	cbz	r0, 8017364 <rmw_take_response+0x1c>
 801735a:	4b1e      	ldr	r3, [pc, #120]	@ (80173d4 <rmw_take_response+0x8c>)
 801735c:	6819      	ldr	r1, [r3, #0]
 801735e:	f7e8 ff57 	bl	8000210 <strcmp>
 8017362:	bb78      	cbnz	r0, 80173c4 <rmw_take_response+0x7c>
 8017364:	b10d      	cbz	r5, 801736a <rmw_take_response+0x22>
 8017366:	2300      	movs	r3, #0
 8017368:	702b      	strb	r3, [r5, #0]
 801736a:	6864      	ldr	r4, [r4, #4]
 801736c:	f7f5 fff8 	bl	800d360 <rmw_uxrce_clean_expired_static_input_buffer>
 8017370:	4620      	mov	r0, r4
 8017372:	f7f5 ffcd 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017376:	4606      	mov	r6, r0
 8017378:	b340      	cbz	r0, 80173cc <rmw_take_response+0x84>
 801737a:	6963      	ldr	r3, [r4, #20]
 801737c:	6884      	ldr	r4, [r0, #8]
 801737e:	68db      	ldr	r3, [r3, #12]
 8017380:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017384:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017388:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801738c:	4798      	blx	r3
 801738e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017392:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017396:	f104 0110 	add.w	r1, r4, #16
 801739a:	4668      	mov	r0, sp
 801739c:	f7f8 ff08 	bl	80101b0 <ucdr_init_buffer>
 80173a0:	4639      	mov	r1, r7
 80173a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80173a6:	4668      	mov	r0, sp
 80173a8:	4798      	blx	r3
 80173aa:	4631      	mov	r1, r6
 80173ac:	4604      	mov	r4, r0
 80173ae:	480a      	ldr	r0, [pc, #40]	@ (80173d8 <rmw_take_response+0x90>)
 80173b0:	f7ff fa7e 	bl	80168b0 <put_memory>
 80173b4:	b105      	cbz	r5, 80173b8 <rmw_take_response+0x70>
 80173b6:	702c      	strb	r4, [r5, #0]
 80173b8:	f084 0001 	eor.w	r0, r4, #1
 80173bc:	b2c0      	uxtb	r0, r0
 80173be:	b008      	add	sp, #32
 80173c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c4:	200c      	movs	r0, #12
 80173c6:	b008      	add	sp, #32
 80173c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173cc:	2001      	movs	r0, #1
 80173ce:	b008      	add	sp, #32
 80173d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173d4:	0801d5a4 	.word	0x0801d5a4
 80173d8:	20015bd4 	.word	0x20015bd4

080173dc <rmw_create_service>:
 80173dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e0:	b091      	sub	sp, #68	@ 0x44
 80173e2:	2800      	cmp	r0, #0
 80173e4:	f000 80ba 	beq.w	801755c <rmw_create_service+0x180>
 80173e8:	4689      	mov	r9, r1
 80173ea:	2900      	cmp	r1, #0
 80173ec:	f000 80b6 	beq.w	801755c <rmw_create_service+0x180>
 80173f0:	4606      	mov	r6, r0
 80173f2:	6800      	ldr	r0, [r0, #0]
 80173f4:	4614      	mov	r4, r2
 80173f6:	461d      	mov	r5, r3
 80173f8:	f7f6 f94a 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 80173fc:	2800      	cmp	r0, #0
 80173fe:	f000 80ad 	beq.w	801755c <rmw_create_service+0x180>
 8017402:	2c00      	cmp	r4, #0
 8017404:	f000 80aa 	beq.w	801755c <rmw_create_service+0x180>
 8017408:	7823      	ldrb	r3, [r4, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	f000 80a6 	beq.w	801755c <rmw_create_service+0x180>
 8017410:	2d00      	cmp	r5, #0
 8017412:	f000 80a3 	beq.w	801755c <rmw_create_service+0x180>
 8017416:	4854      	ldr	r0, [pc, #336]	@ (8017568 <rmw_create_service+0x18c>)
 8017418:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801741c:	f7ff fa38 	bl	8016890 <get_memory>
 8017420:	4606      	mov	r6, r0
 8017422:	2800      	cmp	r0, #0
 8017424:	f000 809b 	beq.w	801755e <rmw_create_service+0x182>
 8017428:	6887      	ldr	r7, [r0, #8]
 801742a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801742e:	f7ff fa97 	bl	8016960 <rmw_get_implementation_identifier>
 8017432:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8017436:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8017438:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801743c:	4620      	mov	r0, r4
 801743e:	f7e8 fedf 	bl	8000200 <strlen>
 8017442:	1c42      	adds	r2, r0, #1
 8017444:	2a3c      	cmp	r2, #60	@ 0x3c
 8017446:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801744a:	f200 8084 	bhi.w	8017556 <rmw_create_service+0x17a>
 801744e:	4621      	mov	r1, r4
 8017450:	4650      	mov	r0, sl
 8017452:	f003 fe7a 	bl	801b14a <memcpy>
 8017456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801745a:	4629      	mov	r1, r5
 801745c:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8017460:	677b      	str	r3, [r7, #116]	@ 0x74
 8017462:	2250      	movs	r2, #80	@ 0x50
 8017464:	f107 0020 	add.w	r0, r7, #32
 8017468:	f003 fe6f 	bl	801b14a <memcpy>
 801746c:	493f      	ldr	r1, [pc, #252]	@ (801756c <rmw_create_service+0x190>)
 801746e:	4648      	mov	r0, r9
 8017470:	f7f6 f928 	bl	800d6c4 <get_service_typesupport_handle>
 8017474:	2800      	cmp	r0, #0
 8017476:	d06e      	beq.n	8017556 <rmw_create_service+0x17a>
 8017478:	6843      	ldr	r3, [r0, #4]
 801747a:	617b      	str	r3, [r7, #20]
 801747c:	2b00      	cmp	r3, #0
 801747e:	d06a      	beq.n	8017556 <rmw_create_service+0x17a>
 8017480:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017484:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8017574 <rmw_create_service+0x198>
 8017488:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8017578 <rmw_create_service+0x19c>
 801748c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017490:	2108      	movs	r1, #8
 8017492:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8017496:	1c42      	adds	r2, r0, #1
 8017498:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801749c:	f7f9 f98c 	bl	80107b8 <uxr_object_id>
 80174a0:	2364      	movs	r3, #100	@ 0x64
 80174a2:	6138      	str	r0, [r7, #16]
 80174a4:	4652      	mov	r2, sl
 80174a6:	6978      	ldr	r0, [r7, #20]
 80174a8:	4649      	mov	r1, r9
 80174aa:	f7f6 f83f 	bl	800d52c <generate_service_types>
 80174ae:	2800      	cmp	r0, #0
 80174b0:	d051      	beq.n	8017556 <rmw_create_service+0x17a>
 80174b2:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 801757c <rmw_create_service+0x1a0>
 80174b6:	4a2e      	ldr	r2, [pc, #184]	@ (8017570 <rmw_create_service+0x194>)
 80174b8:	233c      	movs	r3, #60	@ 0x3c
 80174ba:	4659      	mov	r1, fp
 80174bc:	4620      	mov	r0, r4
 80174be:	f7f6 f803 	bl	800d4c8 <generate_service_topics>
 80174c2:	2800      	cmp	r0, #0
 80174c4:	d047      	beq.n	8017556 <rmw_create_service+0x17a>
 80174c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80174ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80174ce:	a80c      	add	r0, sp, #48	@ 0x30
 80174d0:	4629      	mov	r1, r5
 80174d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80174d6:	f7f5 ffdd 	bl	800d494 <convert_qos_profile>
 80174da:	4a25      	ldr	r2, [pc, #148]	@ (8017570 <rmw_create_service+0x194>)
 80174dc:	9400      	str	r4, [sp, #0]
 80174de:	e9cd b203 	strd	fp, r2, [sp, #12]
 80174e2:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80174e6:	a80c      	add	r0, sp, #48	@ 0x30
 80174e8:	c803      	ldmia	r0, {r0, r1}
 80174ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174ec:	9005      	str	r0, [sp, #20]
 80174ee:	9a08      	ldr	r2, [sp, #32]
 80174f0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80174f4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80174f8:	2306      	movs	r3, #6
 80174fa:	9307      	str	r3, [sp, #28]
 80174fc:	6811      	ldr	r1, [r2, #0]
 80174fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8017502:	693a      	ldr	r2, [r7, #16]
 8017504:	f7f9 f91e 	bl	8010744 <uxr_buffer_create_replier_bin>
 8017508:	4602      	mov	r2, r0
 801750a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801750e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017512:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017516:	f7f5 ffa1 	bl	800d45c <run_xrce_session>
 801751a:	b1e0      	cbz	r0, 8017556 <rmw_create_service+0x17a>
 801751c:	7a2b      	ldrb	r3, [r5, #8]
 801751e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017522:	2200      	movs	r2, #0
 8017524:	2b02      	cmp	r3, #2
 8017526:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801752a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 801752e:	bf0c      	ite	eq
 8017530:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8017534:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8017538:	673a      	str	r2, [r7, #112]	@ 0x70
 801753a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801753c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017540:	ab0e      	add	r3, sp, #56	@ 0x38
 8017542:	9300      	str	r3, [sp, #0]
 8017544:	6811      	ldr	r1, [r2, #0]
 8017546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017548:	693a      	ldr	r2, [r7, #16]
 801754a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801754e:	f001 fad9 	bl	8018b04 <uxr_buffer_request_data>
 8017552:	8338      	strh	r0, [r7, #24]
 8017554:	e003      	b.n	801755e <rmw_create_service+0x182>
 8017556:	4630      	mov	r0, r6
 8017558:	f7f5 fe52 	bl	800d200 <rmw_uxrce_fini_service_memory>
 801755c:	2600      	movs	r6, #0
 801755e:	4630      	mov	r0, r6
 8017560:	b011      	add	sp, #68	@ 0x44
 8017562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017566:	bf00      	nop
 8017568:	20015bb4 	.word	0x20015bb4
 801756c:	0801c1b4 	.word	0x0801c1b4
 8017570:	20015e88 	.word	0x20015e88
 8017574:	20015ec4 	.word	0x20015ec4
 8017578:	20015e24 	.word	0x20015e24
 801757c:	20015de8 	.word	0x20015de8

08017580 <rmw_destroy_service>:
 8017580:	b570      	push	{r4, r5, r6, lr}
 8017582:	b128      	cbz	r0, 8017590 <rmw_destroy_service+0x10>
 8017584:	4604      	mov	r4, r0
 8017586:	6800      	ldr	r0, [r0, #0]
 8017588:	460d      	mov	r5, r1
 801758a:	f7f6 f881 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 801758e:	b910      	cbnz	r0, 8017596 <rmw_destroy_service+0x16>
 8017590:	2401      	movs	r4, #1
 8017592:	4620      	mov	r0, r4
 8017594:	bd70      	pop	{r4, r5, r6, pc}
 8017596:	6863      	ldr	r3, [r4, #4]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d0f9      	beq.n	8017590 <rmw_destroy_service+0x10>
 801759c:	2d00      	cmp	r5, #0
 801759e:	d0f7      	beq.n	8017590 <rmw_destroy_service+0x10>
 80175a0:	6828      	ldr	r0, [r5, #0]
 80175a2:	f7f6 f875 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 80175a6:	2800      	cmp	r0, #0
 80175a8:	d0f2      	beq.n	8017590 <rmw_destroy_service+0x10>
 80175aa:	686e      	ldr	r6, [r5, #4]
 80175ac:	2e00      	cmp	r6, #0
 80175ae:	d0ef      	beq.n	8017590 <rmw_destroy_service+0x10>
 80175b0:	6864      	ldr	r4, [r4, #4]
 80175b2:	6932      	ldr	r2, [r6, #16]
 80175b4:	6920      	ldr	r0, [r4, #16]
 80175b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80175ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80175be:	6819      	ldr	r1, [r3, #0]
 80175c0:	f001 fada 	bl	8018b78 <uxr_buffer_cancel_data>
 80175c4:	4602      	mov	r2, r0
 80175c6:	6920      	ldr	r0, [r4, #16]
 80175c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80175cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80175d0:	f7f5 ff44 	bl	800d45c <run_xrce_session>
 80175d4:	6920      	ldr	r0, [r4, #16]
 80175d6:	6932      	ldr	r2, [r6, #16]
 80175d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80175dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80175e0:	6819      	ldr	r1, [r3, #0]
 80175e2:	f7f8 fead 	bl	8010340 <uxr_buffer_delete_entity>
 80175e6:	4602      	mov	r2, r0
 80175e8:	6920      	ldr	r0, [r4, #16]
 80175ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80175ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80175f2:	f7f5 ff33 	bl	800d45c <run_xrce_session>
 80175f6:	2800      	cmp	r0, #0
 80175f8:	4628      	mov	r0, r5
 80175fa:	bf14      	ite	ne
 80175fc:	2400      	movne	r4, #0
 80175fe:	2402      	moveq	r4, #2
 8017600:	f7f5 fdfe 	bl	800d200 <rmw_uxrce_fini_service_memory>
 8017604:	e7c5      	b.n	8017592 <rmw_destroy_service+0x12>
 8017606:	bf00      	nop

08017608 <rmw_service_response_publisher_get_actual_qos>:
 8017608:	b150      	cbz	r0, 8017620 <rmw_service_response_publisher_get_actual_qos+0x18>
 801760a:	b508      	push	{r3, lr}
 801760c:	460b      	mov	r3, r1
 801760e:	b149      	cbz	r1, 8017624 <rmw_service_response_publisher_get_actual_qos+0x1c>
 8017610:	6841      	ldr	r1, [r0, #4]
 8017612:	2250      	movs	r2, #80	@ 0x50
 8017614:	3120      	adds	r1, #32
 8017616:	4618      	mov	r0, r3
 8017618:	f003 fd97 	bl	801b14a <memcpy>
 801761c:	2000      	movs	r0, #0
 801761e:	bd08      	pop	{r3, pc}
 8017620:	200b      	movs	r0, #11
 8017622:	4770      	bx	lr
 8017624:	200b      	movs	r0, #11
 8017626:	bd08      	pop	{r3, pc}

08017628 <rmw_service_request_subscription_get_actual_qos>:
 8017628:	b150      	cbz	r0, 8017640 <rmw_service_request_subscription_get_actual_qos+0x18>
 801762a:	b508      	push	{r3, lr}
 801762c:	460b      	mov	r3, r1
 801762e:	b149      	cbz	r1, 8017644 <rmw_service_request_subscription_get_actual_qos+0x1c>
 8017630:	6841      	ldr	r1, [r0, #4]
 8017632:	2250      	movs	r2, #80	@ 0x50
 8017634:	3120      	adds	r1, #32
 8017636:	4618      	mov	r0, r3
 8017638:	f003 fd87 	bl	801b14a <memcpy>
 801763c:	2000      	movs	r0, #0
 801763e:	bd08      	pop	{r3, pc}
 8017640:	200b      	movs	r0, #11
 8017642:	4770      	bx	lr
 8017644:	200b      	movs	r0, #11
 8017646:	bd08      	pop	{r3, pc}

08017648 <rmw_create_subscription>:
 8017648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801764c:	b08d      	sub	sp, #52	@ 0x34
 801764e:	2800      	cmp	r0, #0
 8017650:	f000 80d1 	beq.w	80177f6 <rmw_create_subscription+0x1ae>
 8017654:	460e      	mov	r6, r1
 8017656:	2900      	cmp	r1, #0
 8017658:	f000 80cd 	beq.w	80177f6 <rmw_create_subscription+0x1ae>
 801765c:	4604      	mov	r4, r0
 801765e:	6800      	ldr	r0, [r0, #0]
 8017660:	4615      	mov	r5, r2
 8017662:	4698      	mov	r8, r3
 8017664:	f7f6 f814 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 8017668:	2800      	cmp	r0, #0
 801766a:	f000 80c4 	beq.w	80177f6 <rmw_create_subscription+0x1ae>
 801766e:	2d00      	cmp	r5, #0
 8017670:	f000 80c1 	beq.w	80177f6 <rmw_create_subscription+0x1ae>
 8017674:	782b      	ldrb	r3, [r5, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	f000 80bd 	beq.w	80177f6 <rmw_create_subscription+0x1ae>
 801767c:	f1b8 0f00 	cmp.w	r8, #0
 8017680:	f000 80b9 	beq.w	80177f6 <rmw_create_subscription+0x1ae>
 8017684:	485e      	ldr	r0, [pc, #376]	@ (8017800 <rmw_create_subscription+0x1b8>)
 8017686:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801768a:	f7ff f901 	bl	8016890 <get_memory>
 801768e:	4604      	mov	r4, r0
 8017690:	2800      	cmp	r0, #0
 8017692:	f000 80b1 	beq.w	80177f8 <rmw_create_subscription+0x1b0>
 8017696:	6887      	ldr	r7, [r0, #8]
 8017698:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801769c:	f7ff f960 	bl	8016960 <rmw_get_implementation_identifier>
 80176a0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80176a4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80176a6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80176aa:	4628      	mov	r0, r5
 80176ac:	f7e8 fda8 	bl	8000200 <strlen>
 80176b0:	3001      	adds	r0, #1
 80176b2:	283c      	cmp	r0, #60	@ 0x3c
 80176b4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80176b8:	f200 8096 	bhi.w	80177e8 <rmw_create_subscription+0x1a0>
 80176bc:	4a51      	ldr	r2, [pc, #324]	@ (8017804 <rmw_create_subscription+0x1bc>)
 80176be:	462b      	mov	r3, r5
 80176c0:	213c      	movs	r1, #60	@ 0x3c
 80176c2:	4650      	mov	r0, sl
 80176c4:	f003 f864 	bl	801a790 <sniprintf>
 80176c8:	4641      	mov	r1, r8
 80176ca:	f8c7 9020 	str.w	r9, [r7, #32]
 80176ce:	2250      	movs	r2, #80	@ 0x50
 80176d0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80176d4:	f003 fd39 	bl	801b14a <memcpy>
 80176d8:	494b      	ldr	r1, [pc, #300]	@ (8017808 <rmw_create_subscription+0x1c0>)
 80176da:	4630      	mov	r0, r6
 80176dc:	f7f5 ffe6 	bl	800d6ac <get_message_typesupport_handle>
 80176e0:	2800      	cmp	r0, #0
 80176e2:	f000 8081 	beq.w	80177e8 <rmw_create_subscription+0x1a0>
 80176e6:	6842      	ldr	r2, [r0, #4]
 80176e8:	61ba      	str	r2, [r7, #24]
 80176ea:	2a00      	cmp	r2, #0
 80176ec:	d07c      	beq.n	80177e8 <rmw_create_subscription+0x1a0>
 80176ee:	4629      	mov	r1, r5
 80176f0:	4643      	mov	r3, r8
 80176f2:	4648      	mov	r0, r9
 80176f4:	f7ff fb9a 	bl	8016e2c <create_topic>
 80176f8:	61f8      	str	r0, [r7, #28]
 80176fa:	2800      	cmp	r0, #0
 80176fc:	d078      	beq.n	80177f0 <rmw_create_subscription+0x1a8>
 80176fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017706:	2104      	movs	r1, #4
 8017708:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801770c:	1c42      	adds	r2, r0, #1
 801770e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8017712:	f7f9 f851 	bl	80107b8 <uxr_object_id>
 8017716:	6138      	str	r0, [r7, #16]
 8017718:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801771c:	2506      	movs	r5, #6
 801771e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8017722:	9500      	str	r5, [sp, #0]
 8017724:	6819      	ldr	r1, [r3, #0]
 8017726:	693a      	ldr	r2, [r7, #16]
 8017728:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801772c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017730:	f7f8 feea 	bl	8010508 <uxr_buffer_create_subscriber_bin>
 8017734:	4602      	mov	r2, r0
 8017736:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801773a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801773e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017742:	f7f5 fe8b 	bl	800d45c <run_xrce_session>
 8017746:	2800      	cmp	r0, #0
 8017748:	d04e      	beq.n	80177e8 <rmw_create_subscription+0x1a0>
 801774a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801774e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017752:	4629      	mov	r1, r5
 8017754:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8017758:	1c42      	adds	r2, r0, #1
 801775a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801775e:	f7f9 f82b 	bl	80107b8 <uxr_object_id>
 8017762:	ae08      	add	r6, sp, #32
 8017764:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017768:	69fb      	ldr	r3, [r7, #28]
 801776a:	6178      	str	r0, [r7, #20]
 801776c:	4641      	mov	r1, r8
 801776e:	4630      	mov	r0, r6
 8017770:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8017774:	9305      	str	r3, [sp, #20]
 8017776:	f7f5 fe8d 	bl	800d494 <convert_qos_profile>
 801777a:	9503      	str	r5, [sp, #12]
 801777c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017780:	9b05      	ldr	r3, [sp, #20]
 8017782:	9001      	str	r0, [sp, #4]
 8017784:	f8ad 1008 	strh.w	r1, [sp, #8]
 8017788:	691b      	ldr	r3, [r3, #16]
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8017790:	f8db 1000 	ldr.w	r1, [fp]
 8017794:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8017798:	f7f8 ff5c 	bl	8010654 <uxr_buffer_create_datareader_bin>
 801779c:	4602      	mov	r2, r0
 801779e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80177a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80177a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80177aa:	f7f5 fe57 	bl	800d45c <run_xrce_session>
 80177ae:	b1d8      	cbz	r0, 80177e8 <rmw_create_subscription+0x1a0>
 80177b0:	f898 3008 	ldrb.w	r3, [r8, #8]
 80177b4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80177b8:	2b02      	cmp	r3, #2
 80177ba:	bf0c      	ite	eq
 80177bc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80177c0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80177c4:	9307      	str	r3, [sp, #28]
 80177c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80177ca:	2200      	movs	r2, #0
 80177cc:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80177d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80177d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80177d6:	9300      	str	r3, [sp, #0]
 80177d8:	697a      	ldr	r2, [r7, #20]
 80177da:	9b07      	ldr	r3, [sp, #28]
 80177dc:	6809      	ldr	r1, [r1, #0]
 80177de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177e2:	f001 f98f 	bl	8018b04 <uxr_buffer_request_data>
 80177e6:	e007      	b.n	80177f8 <rmw_create_subscription+0x1b0>
 80177e8:	69f8      	ldr	r0, [r7, #28]
 80177ea:	b108      	cbz	r0, 80177f0 <rmw_create_subscription+0x1a8>
 80177ec:	f7f5 fd34 	bl	800d258 <rmw_uxrce_fini_topic_memory>
 80177f0:	4620      	mov	r0, r4
 80177f2:	f7f5 fcef 	bl	800d1d4 <rmw_uxrce_fini_subscription_memory>
 80177f6:	2400      	movs	r4, #0
 80177f8:	4620      	mov	r0, r4
 80177fa:	b00d      	add	sp, #52	@ 0x34
 80177fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017800:	20015be4 	.word	0x20015be4
 8017804:	0801c92c 	.word	0x0801c92c
 8017808:	0801c1b4 	.word	0x0801c1b4

0801780c <rmw_subscription_get_actual_qos>:
 801780c:	b150      	cbz	r0, 8017824 <rmw_subscription_get_actual_qos+0x18>
 801780e:	b508      	push	{r3, lr}
 8017810:	460b      	mov	r3, r1
 8017812:	b149      	cbz	r1, 8017828 <rmw_subscription_get_actual_qos+0x1c>
 8017814:	6841      	ldr	r1, [r0, #4]
 8017816:	2250      	movs	r2, #80	@ 0x50
 8017818:	3128      	adds	r1, #40	@ 0x28
 801781a:	4618      	mov	r0, r3
 801781c:	f003 fc95 	bl	801b14a <memcpy>
 8017820:	2000      	movs	r0, #0
 8017822:	bd08      	pop	{r3, pc}
 8017824:	200b      	movs	r0, #11
 8017826:	4770      	bx	lr
 8017828:	200b      	movs	r0, #11
 801782a:	bd08      	pop	{r3, pc}

0801782c <rmw_destroy_subscription>:
 801782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801782e:	b128      	cbz	r0, 801783c <rmw_destroy_subscription+0x10>
 8017830:	4604      	mov	r4, r0
 8017832:	6800      	ldr	r0, [r0, #0]
 8017834:	460d      	mov	r5, r1
 8017836:	f7f5 ff2b 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 801783a:	b910      	cbnz	r0, 8017842 <rmw_destroy_subscription+0x16>
 801783c:	2401      	movs	r4, #1
 801783e:	4620      	mov	r0, r4
 8017840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017842:	6863      	ldr	r3, [r4, #4]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d0f9      	beq.n	801783c <rmw_destroy_subscription+0x10>
 8017848:	2d00      	cmp	r5, #0
 801784a:	d0f7      	beq.n	801783c <rmw_destroy_subscription+0x10>
 801784c:	6828      	ldr	r0, [r5, #0]
 801784e:	f7f5 ff1f 	bl	800d690 <is_uxrce_rmw_identifier_valid>
 8017852:	2800      	cmp	r0, #0
 8017854:	d0f2      	beq.n	801783c <rmw_destroy_subscription+0x10>
 8017856:	686c      	ldr	r4, [r5, #4]
 8017858:	2c00      	cmp	r4, #0
 801785a:	d0ef      	beq.n	801783c <rmw_destroy_subscription+0x10>
 801785c:	6a26      	ldr	r6, [r4, #32]
 801785e:	6962      	ldr	r2, [r4, #20]
 8017860:	6930      	ldr	r0, [r6, #16]
 8017862:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017866:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801786a:	6819      	ldr	r1, [r3, #0]
 801786c:	f001 f984 	bl	8018b78 <uxr_buffer_cancel_data>
 8017870:	4602      	mov	r2, r0
 8017872:	6930      	ldr	r0, [r6, #16]
 8017874:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017878:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801787c:	f7f5 fdee 	bl	800d45c <run_xrce_session>
 8017880:	69e0      	ldr	r0, [r4, #28]
 8017882:	f7ff fb23 	bl	8016ecc <destroy_topic>
 8017886:	6a23      	ldr	r3, [r4, #32]
 8017888:	6962      	ldr	r2, [r4, #20]
 801788a:	6918      	ldr	r0, [r3, #16]
 801788c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017890:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017894:	6819      	ldr	r1, [r3, #0]
 8017896:	f7f8 fd53 	bl	8010340 <uxr_buffer_delete_entity>
 801789a:	6a23      	ldr	r3, [r4, #32]
 801789c:	6922      	ldr	r2, [r4, #16]
 801789e:	691b      	ldr	r3, [r3, #16]
 80178a0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80178a4:	4604      	mov	r4, r0
 80178a6:	6809      	ldr	r1, [r1, #0]
 80178a8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80178ac:	f7f8 fd48 	bl	8010340 <uxr_buffer_delete_entity>
 80178b0:	6937      	ldr	r7, [r6, #16]
 80178b2:	4622      	mov	r2, r4
 80178b4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80178b8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80178bc:	4604      	mov	r4, r0
 80178be:	4638      	mov	r0, r7
 80178c0:	f7f5 fdcc 	bl	800d45c <run_xrce_session>
 80178c4:	6936      	ldr	r6, [r6, #16]
 80178c6:	4622      	mov	r2, r4
 80178c8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80178cc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80178d0:	4604      	mov	r4, r0
 80178d2:	4630      	mov	r0, r6
 80178d4:	f7f5 fdc2 	bl	800d45c <run_xrce_session>
 80178d8:	b12c      	cbz	r4, 80178e6 <rmw_destroy_subscription+0xba>
 80178da:	b120      	cbz	r0, 80178e6 <rmw_destroy_subscription+0xba>
 80178dc:	2400      	movs	r4, #0
 80178de:	4628      	mov	r0, r5
 80178e0:	f7f5 fc78 	bl	800d1d4 <rmw_uxrce_fini_subscription_memory>
 80178e4:	e7ab      	b.n	801783e <rmw_destroy_subscription+0x12>
 80178e6:	2402      	movs	r4, #2
 80178e8:	e7f9      	b.n	80178de <rmw_destroy_subscription+0xb2>
 80178ea:	bf00      	nop

080178ec <rmw_take_with_info>:
 80178ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ee:	4604      	mov	r4, r0
 80178f0:	6800      	ldr	r0, [r0, #0]
 80178f2:	b089      	sub	sp, #36	@ 0x24
 80178f4:	460f      	mov	r7, r1
 80178f6:	4615      	mov	r5, r2
 80178f8:	b128      	cbz	r0, 8017906 <rmw_take_with_info+0x1a>
 80178fa:	4b24      	ldr	r3, [pc, #144]	@ (801798c <rmw_take_with_info+0xa0>)
 80178fc:	6819      	ldr	r1, [r3, #0]
 80178fe:	f7e8 fc87 	bl	8000210 <strcmp>
 8017902:	2800      	cmp	r0, #0
 8017904:	d13e      	bne.n	8017984 <rmw_take_with_info+0x98>
 8017906:	b305      	cbz	r5, 801794a <rmw_take_with_info+0x5e>
 8017908:	6864      	ldr	r4, [r4, #4]
 801790a:	2300      	movs	r3, #0
 801790c:	702b      	strb	r3, [r5, #0]
 801790e:	f7f5 fd27 	bl	800d360 <rmw_uxrce_clean_expired_static_input_buffer>
 8017912:	4620      	mov	r0, r4
 8017914:	f7f5 fcfc 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017918:	4606      	mov	r6, r0
 801791a:	b1f0      	cbz	r0, 801795a <rmw_take_with_info+0x6e>
 801791c:	6881      	ldr	r1, [r0, #8]
 801791e:	4668      	mov	r0, sp
 8017920:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017924:	3110      	adds	r1, #16
 8017926:	f7f8 fc43 	bl	80101b0 <ucdr_init_buffer>
 801792a:	69a3      	ldr	r3, [r4, #24]
 801792c:	4639      	mov	r1, r7
 801792e:	68db      	ldr	r3, [r3, #12]
 8017930:	4668      	mov	r0, sp
 8017932:	4798      	blx	r3
 8017934:	4631      	mov	r1, r6
 8017936:	4604      	mov	r4, r0
 8017938:	4815      	ldr	r0, [pc, #84]	@ (8017990 <rmw_take_with_info+0xa4>)
 801793a:	f7fe ffb9 	bl	80168b0 <put_memory>
 801793e:	702c      	strb	r4, [r5, #0]
 8017940:	f084 0001 	eor.w	r0, r4, #1
 8017944:	b2c0      	uxtb	r0, r0
 8017946:	b009      	add	sp, #36	@ 0x24
 8017948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801794a:	6864      	ldr	r4, [r4, #4]
 801794c:	f7f5 fd08 	bl	800d360 <rmw_uxrce_clean_expired_static_input_buffer>
 8017950:	4620      	mov	r0, r4
 8017952:	f7f5 fcdd 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017956:	4605      	mov	r5, r0
 8017958:	b910      	cbnz	r0, 8017960 <rmw_take_with_info+0x74>
 801795a:	2001      	movs	r0, #1
 801795c:	b009      	add	sp, #36	@ 0x24
 801795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017960:	68a9      	ldr	r1, [r5, #8]
 8017962:	4668      	mov	r0, sp
 8017964:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017968:	3110      	adds	r1, #16
 801796a:	f7f8 fc21 	bl	80101b0 <ucdr_init_buffer>
 801796e:	69a3      	ldr	r3, [r4, #24]
 8017970:	4639      	mov	r1, r7
 8017972:	68db      	ldr	r3, [r3, #12]
 8017974:	4668      	mov	r0, sp
 8017976:	4798      	blx	r3
 8017978:	4629      	mov	r1, r5
 801797a:	4604      	mov	r4, r0
 801797c:	4804      	ldr	r0, [pc, #16]	@ (8017990 <rmw_take_with_info+0xa4>)
 801797e:	f7fe ff97 	bl	80168b0 <put_memory>
 8017982:	e7dd      	b.n	8017940 <rmw_take_with_info+0x54>
 8017984:	200c      	movs	r0, #12
 8017986:	b009      	add	sp, #36	@ 0x24
 8017988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801798a:	bf00      	nop
 801798c:	0801d5a4 	.word	0x0801d5a4
 8017990:	20015bd4 	.word	0x20015bd4

08017994 <rmw_uxrce_transport_init>:
 8017994:	b508      	push	{r3, lr}
 8017996:	b108      	cbz	r0, 801799c <rmw_uxrce_transport_init+0x8>
 8017998:	f100 0210 	add.w	r2, r0, #16
 801799c:	b139      	cbz	r1, 80179ae <rmw_uxrce_transport_init+0x1a>
 801799e:	6949      	ldr	r1, [r1, #20]
 80179a0:	4610      	mov	r0, r2
 80179a2:	f000 fb2f 	bl	8018004 <uxr_init_custom_transport>
 80179a6:	f080 0001 	eor.w	r0, r0, #1
 80179aa:	b2c0      	uxtb	r0, r0
 80179ac:	bd08      	pop	{r3, pc}
 80179ae:	4b04      	ldr	r3, [pc, #16]	@ (80179c0 <rmw_uxrce_transport_init+0x2c>)
 80179b0:	4610      	mov	r0, r2
 80179b2:	6859      	ldr	r1, [r3, #4]
 80179b4:	f000 fb26 	bl	8018004 <uxr_init_custom_transport>
 80179b8:	f080 0001 	eor.w	r0, r0, #1
 80179bc:	b2c0      	uxtb	r0, r0
 80179be:	bd08      	pop	{r3, pc}
 80179c0:	20010dfc 	.word	0x20010dfc

080179c4 <rmw_wait>:
 80179c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179c8:	b089      	sub	sp, #36	@ 0x24
 80179ca:	4605      	mov	r5, r0
 80179cc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80179ce:	460e      	mov	r6, r1
 80179d0:	4698      	mov	r8, r3
 80179d2:	4691      	mov	r9, r2
 80179d4:	2a00      	cmp	r2, #0
 80179d6:	f000 810a 	beq.w	8017bee <rmw_wait+0x22a>
 80179da:	b16c      	cbz	r4, 80179f8 <rmw_wait+0x34>
 80179dc:	4bae      	ldr	r3, [pc, #696]	@ (8017c98 <rmw_wait+0x2d4>)
 80179de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80179e0:	af04      	add	r7, sp, #16
 80179e2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80179e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80179ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80179ee:	f7fe fd83 	bl	80164f8 <rmw_time_equal>
 80179f2:	2800      	cmp	r0, #0
 80179f4:	f000 8127 	beq.w	8017c46 <rmw_wait+0x282>
 80179f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80179fc:	f7f5 fcb0 	bl	800d360 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a00:	4ba6      	ldr	r3, [pc, #664]	@ (8017c9c <rmw_wait+0x2d8>)
 8017a02:	681c      	ldr	r4, [r3, #0]
 8017a04:	b14c      	cbz	r4, 8017a1a <rmw_wait+0x56>
 8017a06:	4623      	mov	r3, r4
 8017a08:	2100      	movs	r1, #0
 8017a0a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017a0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017a12:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d1f7      	bne.n	8017a0a <rmw_wait+0x46>
 8017a1a:	f1b9 0f00 	cmp.w	r9, #0
 8017a1e:	d011      	beq.n	8017a44 <rmw_wait+0x80>
 8017a20:	f8d9 1000 	ldr.w	r1, [r9]
 8017a24:	b171      	cbz	r1, 8017a44 <rmw_wait+0x80>
 8017a26:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	2001      	movs	r0, #1
 8017a2e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017a32:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017a34:	6912      	ldr	r2, [r2, #16]
 8017a36:	3301      	adds	r3, #1
 8017a38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017a3c:	4299      	cmp	r1, r3
 8017a3e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017a42:	d1f4      	bne.n	8017a2e <rmw_wait+0x6a>
 8017a44:	f1b8 0f00 	cmp.w	r8, #0
 8017a48:	d011      	beq.n	8017a6e <rmw_wait+0xaa>
 8017a4a:	f8d8 1000 	ldr.w	r1, [r8]
 8017a4e:	b171      	cbz	r1, 8017a6e <rmw_wait+0xaa>
 8017a50:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017a54:	2300      	movs	r3, #0
 8017a56:	2001      	movs	r0, #1
 8017a58:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017a5c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017a5e:	6912      	ldr	r2, [r2, #16]
 8017a60:	3301      	adds	r3, #1
 8017a62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017a66:	4299      	cmp	r1, r3
 8017a68:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017a6c:	d1f4      	bne.n	8017a58 <rmw_wait+0x94>
 8017a6e:	b185      	cbz	r5, 8017a92 <rmw_wait+0xce>
 8017a70:	6829      	ldr	r1, [r5, #0]
 8017a72:	b171      	cbz	r1, 8017a92 <rmw_wait+0xce>
 8017a74:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017a78:	2300      	movs	r3, #0
 8017a7a:	2001      	movs	r0, #1
 8017a7c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017a80:	6a12      	ldr	r2, [r2, #32]
 8017a82:	6912      	ldr	r2, [r2, #16]
 8017a84:	3301      	adds	r3, #1
 8017a86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017a8a:	4299      	cmp	r1, r3
 8017a8c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017a90:	d1f4      	bne.n	8017a7c <rmw_wait+0xb8>
 8017a92:	b34c      	cbz	r4, 8017ae8 <rmw_wait+0x124>
 8017a94:	4622      	mov	r2, r4
 8017a96:	2300      	movs	r3, #0
 8017a98:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017a9c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017aa0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017aa4:	440b      	add	r3, r1
 8017aa6:	b2db      	uxtb	r3, r3
 8017aa8:	2a00      	cmp	r2, #0
 8017aaa:	d1f5      	bne.n	8017a98 <rmw_wait+0xd4>
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	f000 8084 	beq.w	8017bba <rmw_wait+0x1f6>
 8017ab2:	1c7a      	adds	r2, r7, #1
 8017ab4:	d00d      	beq.n	8017ad2 <rmw_wait+0x10e>
 8017ab6:	ee07 7a90 	vmov	s15, r7
 8017aba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017abe:	ee07 3a90 	vmov	s15, r3
 8017ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017aca:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017ace:	ee17 7a90 	vmov	r7, s15
 8017ad2:	68a0      	ldr	r0, [r4, #8]
 8017ad4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017ad8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	f040 8090 	bne.w	8017c02 <rmw_wait+0x23e>
 8017ae2:	6864      	ldr	r4, [r4, #4]
 8017ae4:	2c00      	cmp	r4, #0
 8017ae6:	d1f4      	bne.n	8017ad2 <rmw_wait+0x10e>
 8017ae8:	f1b9 0f00 	cmp.w	r9, #0
 8017aec:	f000 80bc 	beq.w	8017c68 <rmw_wait+0x2a4>
 8017af0:	f8d9 7000 	ldr.w	r7, [r9]
 8017af4:	2f00      	cmp	r7, #0
 8017af6:	f000 808e 	beq.w	8017c16 <rmw_wait+0x252>
 8017afa:	2400      	movs	r4, #0
 8017afc:	4627      	mov	r7, r4
 8017afe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017b02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017b06:	f7f5 fc03 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017b0a:	2800      	cmp	r0, #0
 8017b0c:	d05f      	beq.n	8017bce <rmw_wait+0x20a>
 8017b0e:	f8d9 3000 	ldr.w	r3, [r9]
 8017b12:	3401      	adds	r4, #1
 8017b14:	42a3      	cmp	r3, r4
 8017b16:	f04f 0701 	mov.w	r7, #1
 8017b1a:	d8f0      	bhi.n	8017afe <rmw_wait+0x13a>
 8017b1c:	f1b8 0f00 	cmp.w	r8, #0
 8017b20:	d012      	beq.n	8017b48 <rmw_wait+0x184>
 8017b22:	f8d8 3000 	ldr.w	r3, [r8]
 8017b26:	b17b      	cbz	r3, 8017b48 <rmw_wait+0x184>
 8017b28:	2400      	movs	r4, #0
 8017b2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017b2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017b32:	f7f5 fbed 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017b36:	2800      	cmp	r0, #0
 8017b38:	d051      	beq.n	8017bde <rmw_wait+0x21a>
 8017b3a:	f8d8 3000 	ldr.w	r3, [r8]
 8017b3e:	3401      	adds	r4, #1
 8017b40:	42a3      	cmp	r3, r4
 8017b42:	f04f 0701 	mov.w	r7, #1
 8017b46:	d8f0      	bhi.n	8017b2a <rmw_wait+0x166>
 8017b48:	b1dd      	cbz	r5, 8017b82 <rmw_wait+0x1be>
 8017b4a:	682b      	ldr	r3, [r5, #0]
 8017b4c:	b1cb      	cbz	r3, 8017b82 <rmw_wait+0x1be>
 8017b4e:	2400      	movs	r4, #0
 8017b50:	686b      	ldr	r3, [r5, #4]
 8017b52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017b56:	f7f5 fbdb 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017b5a:	b158      	cbz	r0, 8017b74 <rmw_wait+0x1b0>
 8017b5c:	682b      	ldr	r3, [r5, #0]
 8017b5e:	3401      	adds	r4, #1
 8017b60:	42a3      	cmp	r3, r4
 8017b62:	d969      	bls.n	8017c38 <rmw_wait+0x274>
 8017b64:	686b      	ldr	r3, [r5, #4]
 8017b66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017b6a:	2701      	movs	r7, #1
 8017b6c:	f7f5 fbd0 	bl	800d310 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017b70:	2800      	cmp	r0, #0
 8017b72:	d1f3      	bne.n	8017b5c <rmw_wait+0x198>
 8017b74:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017b78:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017b7c:	3401      	adds	r4, #1
 8017b7e:	42a3      	cmp	r3, r4
 8017b80:	d8e6      	bhi.n	8017b50 <rmw_wait+0x18c>
 8017b82:	b1a6      	cbz	r6, 8017bae <rmw_wait+0x1ea>
 8017b84:	6834      	ldr	r4, [r6, #0]
 8017b86:	b194      	cbz	r4, 8017bae <rmw_wait+0x1ea>
 8017b88:	2300      	movs	r3, #0
 8017b8a:	461d      	mov	r5, r3
 8017b8c:	e004      	b.n	8017b98 <rmw_wait+0x1d4>
 8017b8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017b92:	3301      	adds	r3, #1
 8017b94:	42a3      	cmp	r3, r4
 8017b96:	d00a      	beq.n	8017bae <rmw_wait+0x1ea>
 8017b98:	6870      	ldr	r0, [r6, #4]
 8017b9a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017b9e:	7c0a      	ldrb	r2, [r1, #16]
 8017ba0:	2a00      	cmp	r2, #0
 8017ba2:	d0f4      	beq.n	8017b8e <rmw_wait+0x1ca>
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	42a3      	cmp	r3, r4
 8017ba8:	740d      	strb	r5, [r1, #16]
 8017baa:	4617      	mov	r7, r2
 8017bac:	d1f4      	bne.n	8017b98 <rmw_wait+0x1d4>
 8017bae:	2f00      	cmp	r7, #0
 8017bb0:	d03e      	beq.n	8017c30 <rmw_wait+0x26c>
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	b009      	add	sp, #36	@ 0x24
 8017bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bba:	68a0      	ldr	r0, [r4, #8]
 8017bbc:	2100      	movs	r1, #0
 8017bbe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017bc2:	f7f9 facf 	bl	8011164 <uxr_run_session_timeout>
 8017bc6:	6864      	ldr	r4, [r4, #4]
 8017bc8:	2c00      	cmp	r4, #0
 8017bca:	d1f6      	bne.n	8017bba <rmw_wait+0x1f6>
 8017bcc:	e78c      	b.n	8017ae8 <rmw_wait+0x124>
 8017bce:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017bd2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017bd6:	3401      	adds	r4, #1
 8017bd8:	42a3      	cmp	r3, r4
 8017bda:	d890      	bhi.n	8017afe <rmw_wait+0x13a>
 8017bdc:	e79e      	b.n	8017b1c <rmw_wait+0x158>
 8017bde:	e9d8 3200 	ldrd	r3, r2, [r8]
 8017be2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017be6:	3401      	adds	r4, #1
 8017be8:	429c      	cmp	r4, r3
 8017bea:	d39e      	bcc.n	8017b2a <rmw_wait+0x166>
 8017bec:	e7ac      	b.n	8017b48 <rmw_wait+0x184>
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	f47f aef3 	bne.w	80179da <rmw_wait+0x16>
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	f47f aef0 	bne.w	80179da <rmw_wait+0x16>
 8017bfa:	2900      	cmp	r1, #0
 8017bfc:	f47f aeed 	bne.w	80179da <rmw_wait+0x16>
 8017c00:	e7d7      	b.n	8017bb2 <rmw_wait+0x1ee>
 8017c02:	4639      	mov	r1, r7
 8017c04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c08:	f7f9 fac6 	bl	8011198 <uxr_run_session_until_data>
 8017c0c:	6864      	ldr	r4, [r4, #4]
 8017c0e:	2c00      	cmp	r4, #0
 8017c10:	f47f af5f 	bne.w	8017ad2 <rmw_wait+0x10e>
 8017c14:	e768      	b.n	8017ae8 <rmw_wait+0x124>
 8017c16:	f1b8 0f00 	cmp.w	r8, #0
 8017c1a:	d032      	beq.n	8017c82 <rmw_wait+0x2be>
 8017c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d181      	bne.n	8017b28 <rmw_wait+0x164>
 8017c24:	461f      	mov	r7, r3
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	d18f      	bne.n	8017b4a <rmw_wait+0x186>
 8017c2a:	462f      	mov	r7, r5
 8017c2c:	2e00      	cmp	r6, #0
 8017c2e:	d1a9      	bne.n	8017b84 <rmw_wait+0x1c0>
 8017c30:	2002      	movs	r0, #2
 8017c32:	b009      	add	sp, #36	@ 0x24
 8017c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c38:	2e00      	cmp	r6, #0
 8017c3a:	d0ba      	beq.n	8017bb2 <rmw_wait+0x1ee>
 8017c3c:	6834      	ldr	r4, [r6, #0]
 8017c3e:	2701      	movs	r7, #1
 8017c40:	2c00      	cmp	r4, #0
 8017c42:	d1a1      	bne.n	8017b88 <rmw_wait+0x1c4>
 8017c44:	e7b5      	b.n	8017bb2 <rmw_wait+0x1ee>
 8017c46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017c4a:	f7fe fca9 	bl	80165a0 <rmw_time_total_nsec>
 8017c4e:	2300      	movs	r3, #0
 8017c50:	4a13      	ldr	r2, [pc, #76]	@ (8017ca0 <rmw_wait+0x2dc>)
 8017c52:	f7e9 f833 	bl	8000cbc <__aeabi_uldivmod>
 8017c56:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017c5a:	f171 0300 	sbcs.w	r3, r1, #0
 8017c5e:	4607      	mov	r7, r0
 8017c60:	bfa8      	it	ge
 8017c62:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8017c66:	e6c9      	b.n	80179fc <rmw_wait+0x38>
 8017c68:	f1b8 0f00 	cmp.w	r8, #0
 8017c6c:	d009      	beq.n	8017c82 <rmw_wait+0x2be>
 8017c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8017c72:	464f      	mov	r7, r9
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	f47f af57 	bne.w	8017b28 <rmw_wait+0x164>
 8017c7a:	2d00      	cmp	r5, #0
 8017c7c:	f47f af65 	bne.w	8017b4a <rmw_wait+0x186>
 8017c80:	e7d3      	b.n	8017c2a <rmw_wait+0x266>
 8017c82:	b17d      	cbz	r5, 8017ca4 <rmw_wait+0x2e0>
 8017c84:	682b      	ldr	r3, [r5, #0]
 8017c86:	4647      	mov	r7, r8
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	f47f af60 	bne.w	8017b4e <rmw_wait+0x18a>
 8017c8e:	2e00      	cmp	r6, #0
 8017c90:	f47f af78 	bne.w	8017b84 <rmw_wait+0x1c0>
 8017c94:	e7cc      	b.n	8017c30 <rmw_wait+0x26c>
 8017c96:	bf00      	nop
 8017c98:	0801bff8 	.word	0x0801bff8
 8017c9c:	20015bc4 	.word	0x20015bc4
 8017ca0:	000f4240 	.word	0x000f4240
 8017ca4:	2e00      	cmp	r6, #0
 8017ca6:	d0c3      	beq.n	8017c30 <rmw_wait+0x26c>
 8017ca8:	6834      	ldr	r4, [r6, #0]
 8017caa:	462f      	mov	r7, r5
 8017cac:	2c00      	cmp	r4, #0
 8017cae:	f47f af6b 	bne.w	8017b88 <rmw_wait+0x1c4>
 8017cb2:	e7bd      	b.n	8017c30 <rmw_wait+0x26c>

08017cb4 <rmw_create_wait_set>:
 8017cb4:	b508      	push	{r3, lr}
 8017cb6:	4803      	ldr	r0, [pc, #12]	@ (8017cc4 <rmw_create_wait_set+0x10>)
 8017cb8:	f7fe fdea 	bl	8016890 <get_memory>
 8017cbc:	b108      	cbz	r0, 8017cc2 <rmw_create_wait_set+0xe>
 8017cbe:	6880      	ldr	r0, [r0, #8]
 8017cc0:	3010      	adds	r0, #16
 8017cc2:	bd08      	pop	{r3, pc}
 8017cc4:	20015c04 	.word	0x20015c04

08017cc8 <rmw_destroy_wait_set>:
 8017cc8:	b508      	push	{r3, lr}
 8017cca:	4b08      	ldr	r3, [pc, #32]	@ (8017cec <rmw_destroy_wait_set+0x24>)
 8017ccc:	6819      	ldr	r1, [r3, #0]
 8017cce:	b911      	cbnz	r1, 8017cd6 <rmw_destroy_wait_set+0xe>
 8017cd0:	e00a      	b.n	8017ce8 <rmw_destroy_wait_set+0x20>
 8017cd2:	6849      	ldr	r1, [r1, #4]
 8017cd4:	b141      	cbz	r1, 8017ce8 <rmw_destroy_wait_set+0x20>
 8017cd6:	688b      	ldr	r3, [r1, #8]
 8017cd8:	3310      	adds	r3, #16
 8017cda:	4298      	cmp	r0, r3
 8017cdc:	d1f9      	bne.n	8017cd2 <rmw_destroy_wait_set+0xa>
 8017cde:	4803      	ldr	r0, [pc, #12]	@ (8017cec <rmw_destroy_wait_set+0x24>)
 8017ce0:	f7fe fde6 	bl	80168b0 <put_memory>
 8017ce4:	2000      	movs	r0, #0
 8017ce6:	bd08      	pop	{r3, pc}
 8017ce8:	2001      	movs	r0, #1
 8017cea:	bd08      	pop	{r3, pc}
 8017cec:	20015c04 	.word	0x20015c04

08017cf0 <rmw_uros_epoch_nanos>:
 8017cf0:	4b05      	ldr	r3, [pc, #20]	@ (8017d08 <rmw_uros_epoch_nanos+0x18>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	b123      	cbz	r3, 8017d00 <rmw_uros_epoch_nanos+0x10>
 8017cf6:	6898      	ldr	r0, [r3, #8]
 8017cf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cfc:	f7f8 bea2 	b.w	8010a44 <uxr_epoch_nanos>
 8017d00:	2000      	movs	r0, #0
 8017d02:	2100      	movs	r1, #0
 8017d04:	4770      	bx	lr
 8017d06:	bf00      	nop
 8017d08:	20015bc4 	.word	0x20015bc4

08017d0c <sensor_msgs__msg__Imu__init>:
 8017d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d10:	4605      	mov	r5, r0
 8017d12:	b3c0      	cbz	r0, 8017d86 <sensor_msgs__msg__Imu__init+0x7a>
 8017d14:	f000 f864 	bl	8017de0 <std_msgs__msg__Header__init>
 8017d18:	4604      	mov	r4, r0
 8017d1a:	b310      	cbz	r0, 8017d62 <sensor_msgs__msg__Imu__init+0x56>
 8017d1c:	f105 0618 	add.w	r6, r5, #24
 8017d20:	4630      	mov	r0, r6
 8017d22:	f000 f8b1 	bl	8017e88 <geometry_msgs__msg__Quaternion__init>
 8017d26:	4604      	mov	r4, r0
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	d040      	beq.n	8017dae <sensor_msgs__msg__Imu__init+0xa2>
 8017d2c:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8017d30:	4638      	mov	r0, r7
 8017d32:	f000 f8bf 	bl	8017eb4 <geometry_msgs__msg__Vector3__init>
 8017d36:	4604      	mov	r4, r0
 8017d38:	b348      	cbz	r0, 8017d8e <sensor_msgs__msg__Imu__init+0x82>
 8017d3a:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8017d3e:	4640      	mov	r0, r8
 8017d40:	f000 f8b8 	bl	8017eb4 <geometry_msgs__msg__Vector3__init>
 8017d44:	4604      	mov	r4, r0
 8017d46:	b9d8      	cbnz	r0, 8017d80 <sensor_msgs__msg__Imu__init+0x74>
 8017d48:	4628      	mov	r0, r5
 8017d4a:	f000 f86d 	bl	8017e28 <std_msgs__msg__Header__fini>
 8017d4e:	4630      	mov	r0, r6
 8017d50:	f000 f8ae 	bl	8017eb0 <geometry_msgs__msg__Quaternion__fini>
 8017d54:	4638      	mov	r0, r7
 8017d56:	f000 f8b1 	bl	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017d5a:	4640      	mov	r0, r8
 8017d5c:	f000 f8ae 	bl	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017d60:	e00e      	b.n	8017d80 <sensor_msgs__msg__Imu__init+0x74>
 8017d62:	4628      	mov	r0, r5
 8017d64:	f000 f860 	bl	8017e28 <std_msgs__msg__Header__fini>
 8017d68:	f105 0018 	add.w	r0, r5, #24
 8017d6c:	f000 f8a0 	bl	8017eb0 <geometry_msgs__msg__Quaternion__fini>
 8017d70:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8017d74:	f000 f8a2 	bl	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017d78:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017d7c:	f000 f89e 	bl	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017d80:	4620      	mov	r0, r4
 8017d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d86:	4604      	mov	r4, r0
 8017d88:	4620      	mov	r0, r4
 8017d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d8e:	4628      	mov	r0, r5
 8017d90:	f000 f84a 	bl	8017e28 <std_msgs__msg__Header__fini>
 8017d94:	4630      	mov	r0, r6
 8017d96:	f000 f88b 	bl	8017eb0 <geometry_msgs__msg__Quaternion__fini>
 8017d9a:	4638      	mov	r0, r7
 8017d9c:	f000 f88e 	bl	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017da0:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017da4:	f000 f88a 	bl	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017da8:	4620      	mov	r0, r4
 8017daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dae:	4628      	mov	r0, r5
 8017db0:	f000 f83a 	bl	8017e28 <std_msgs__msg__Header__fini>
 8017db4:	4630      	mov	r0, r6
 8017db6:	e7d9      	b.n	8017d6c <sensor_msgs__msg__Imu__init+0x60>

08017db8 <sensor_msgs__msg__Imu__fini>:
 8017db8:	b188      	cbz	r0, 8017dde <sensor_msgs__msg__Imu__fini+0x26>
 8017dba:	b510      	push	{r4, lr}
 8017dbc:	4604      	mov	r4, r0
 8017dbe:	f000 f833 	bl	8017e28 <std_msgs__msg__Header__fini>
 8017dc2:	f104 0018 	add.w	r0, r4, #24
 8017dc6:	f000 f873 	bl	8017eb0 <geometry_msgs__msg__Quaternion__fini>
 8017dca:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8017dce:	f000 f875 	bl	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017dd2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8017dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dda:	f000 b86f 	b.w	8017ebc <geometry_msgs__msg__Vector3__fini>
 8017dde:	4770      	bx	lr

08017de0 <std_msgs__msg__Header__init>:
 8017de0:	b570      	push	{r4, r5, r6, lr}
 8017de2:	4605      	mov	r5, r0
 8017de4:	b1a8      	cbz	r0, 8017e12 <std_msgs__msg__Header__init+0x32>
 8017de6:	f000 f849 	bl	8017e7c <builtin_interfaces__msg__Time__init>
 8017dea:	4604      	mov	r4, r0
 8017dec:	b140      	cbz	r0, 8017e00 <std_msgs__msg__Header__init+0x20>
 8017dee:	f105 0608 	add.w	r6, r5, #8
 8017df2:	4630      	mov	r0, r6
 8017df4:	f002 f8bc 	bl	8019f70 <rosidl_runtime_c__String__init>
 8017df8:	4604      	mov	r4, r0
 8017dfa:	b168      	cbz	r0, 8017e18 <std_msgs__msg__Header__init+0x38>
 8017dfc:	4620      	mov	r0, r4
 8017dfe:	bd70      	pop	{r4, r5, r6, pc}
 8017e00:	4628      	mov	r0, r5
 8017e02:	f000 f83f 	bl	8017e84 <builtin_interfaces__msg__Time__fini>
 8017e06:	f105 0008 	add.w	r0, r5, #8
 8017e0a:	f002 f8c7 	bl	8019f9c <rosidl_runtime_c__String__fini>
 8017e0e:	4620      	mov	r0, r4
 8017e10:	bd70      	pop	{r4, r5, r6, pc}
 8017e12:	4604      	mov	r4, r0
 8017e14:	4620      	mov	r0, r4
 8017e16:	bd70      	pop	{r4, r5, r6, pc}
 8017e18:	4628      	mov	r0, r5
 8017e1a:	f000 f833 	bl	8017e84 <builtin_interfaces__msg__Time__fini>
 8017e1e:	4630      	mov	r0, r6
 8017e20:	f002 f8bc 	bl	8019f9c <rosidl_runtime_c__String__fini>
 8017e24:	e7ea      	b.n	8017dfc <std_msgs__msg__Header__init+0x1c>
 8017e26:	bf00      	nop

08017e28 <std_msgs__msg__Header__fini>:
 8017e28:	b148      	cbz	r0, 8017e3e <std_msgs__msg__Header__fini+0x16>
 8017e2a:	b510      	push	{r4, lr}
 8017e2c:	4604      	mov	r4, r0
 8017e2e:	f000 f829 	bl	8017e84 <builtin_interfaces__msg__Time__fini>
 8017e32:	f104 0008 	add.w	r0, r4, #8
 8017e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e3a:	f002 b8af 	b.w	8019f9c <rosidl_runtime_c__String__fini>
 8017e3e:	4770      	bx	lr

08017e40 <std_srvs__srv__SetBool_Request__init>:
 8017e40:	3800      	subs	r0, #0
 8017e42:	bf18      	it	ne
 8017e44:	2001      	movne	r0, #1
 8017e46:	4770      	bx	lr

08017e48 <std_srvs__srv__SetBool_Request__fini>:
 8017e48:	4770      	bx	lr
 8017e4a:	bf00      	nop

08017e4c <std_srvs__srv__SetBool_Response__init>:
 8017e4c:	b538      	push	{r3, r4, r5, lr}
 8017e4e:	b138      	cbz	r0, 8017e60 <std_srvs__srv__SetBool_Response__init+0x14>
 8017e50:	1d05      	adds	r5, r0, #4
 8017e52:	4628      	mov	r0, r5
 8017e54:	f002 f88c 	bl	8019f70 <rosidl_runtime_c__String__init>
 8017e58:	4604      	mov	r4, r0
 8017e5a:	b120      	cbz	r0, 8017e66 <std_srvs__srv__SetBool_Response__init+0x1a>
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	bd38      	pop	{r3, r4, r5, pc}
 8017e60:	4604      	mov	r4, r0
 8017e62:	4620      	mov	r0, r4
 8017e64:	bd38      	pop	{r3, r4, r5, pc}
 8017e66:	4628      	mov	r0, r5
 8017e68:	f002 f898 	bl	8019f9c <rosidl_runtime_c__String__fini>
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	bd38      	pop	{r3, r4, r5, pc}

08017e70 <std_srvs__srv__SetBool_Response__fini>:
 8017e70:	b110      	cbz	r0, 8017e78 <std_srvs__srv__SetBool_Response__fini+0x8>
 8017e72:	3004      	adds	r0, #4
 8017e74:	f002 b892 	b.w	8019f9c <rosidl_runtime_c__String__fini>
 8017e78:	4770      	bx	lr
 8017e7a:	bf00      	nop

08017e7c <builtin_interfaces__msg__Time__init>:
 8017e7c:	3800      	subs	r0, #0
 8017e7e:	bf18      	it	ne
 8017e80:	2001      	movne	r0, #1
 8017e82:	4770      	bx	lr

08017e84 <builtin_interfaces__msg__Time__fini>:
 8017e84:	4770      	bx	lr
 8017e86:	bf00      	nop

08017e88 <geometry_msgs__msg__Quaternion__init>:
 8017e88:	b160      	cbz	r0, 8017ea4 <geometry_msgs__msg__Quaternion__init+0x1c>
 8017e8a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017ea8 <geometry_msgs__msg__Quaternion__init+0x20>
 8017e8e:	2200      	movs	r2, #0
 8017e90:	2300      	movs	r3, #0
 8017e92:	e9c0 2300 	strd	r2, r3, [r0]
 8017e96:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017e9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017e9e:	ed80 7b06 	vstr	d7, [r0, #24]
 8017ea2:	2001      	movs	r0, #1
 8017ea4:	4770      	bx	lr
 8017ea6:	bf00      	nop
 8017ea8:	00000000 	.word	0x00000000
 8017eac:	3ff00000 	.word	0x3ff00000

08017eb0 <geometry_msgs__msg__Quaternion__fini>:
 8017eb0:	4770      	bx	lr
 8017eb2:	bf00      	nop

08017eb4 <geometry_msgs__msg__Vector3__init>:
 8017eb4:	3800      	subs	r0, #0
 8017eb6:	bf18      	it	ne
 8017eb8:	2001      	movne	r0, #1
 8017eba:	4770      	bx	lr

08017ebc <geometry_msgs__msg__Vector3__fini>:
 8017ebc:	4770      	bx	lr
 8017ebe:	bf00      	nop

08017ec0 <ucdr_serialize_string>:
 8017ec0:	b510      	push	{r4, lr}
 8017ec2:	b082      	sub	sp, #8
 8017ec4:	4604      	mov	r4, r0
 8017ec6:	4608      	mov	r0, r1
 8017ec8:	9101      	str	r1, [sp, #4]
 8017eca:	f7e8 f999 	bl	8000200 <strlen>
 8017ece:	9901      	ldr	r1, [sp, #4]
 8017ed0:	1c42      	adds	r2, r0, #1
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	b002      	add	sp, #8
 8017ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017eda:	f7f8 b9d9 	b.w	8010290 <ucdr_serialize_sequence_char>
 8017ede:	bf00      	nop

08017ee0 <ucdr_deserialize_string>:
 8017ee0:	b500      	push	{lr}
 8017ee2:	b083      	sub	sp, #12
 8017ee4:	ab01      	add	r3, sp, #4
 8017ee6:	f7f8 f9e5 	bl	80102b4 <ucdr_deserialize_sequence_char>
 8017eea:	b003      	add	sp, #12
 8017eec:	f85d fb04 	ldr.w	pc, [sp], #4

08017ef0 <get_custom_error>:
 8017ef0:	4b01      	ldr	r3, [pc, #4]	@ (8017ef8 <get_custom_error+0x8>)
 8017ef2:	7818      	ldrb	r0, [r3, #0]
 8017ef4:	4770      	bx	lr
 8017ef6:	bf00      	nop
 8017ef8:	20015f28 	.word	0x20015f28

08017efc <recv_custom_msg>:
 8017efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f00:	4693      	mov	fp, r2
 8017f02:	b089      	sub	sp, #36	@ 0x24
 8017f04:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8017f08:	9305      	str	r3, [sp, #20]
 8017f0a:	468a      	mov	sl, r1
 8017f0c:	2100      	movs	r1, #0
 8017f0e:	4604      	mov	r4, r0
 8017f10:	f88d 101e 	strb.w	r1, [sp, #30]
 8017f14:	b322      	cbz	r2, 8017f60 <recv_custom_msg+0x64>
 8017f16:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8017f1a:	f10d 081f 	add.w	r8, sp, #31
 8017f1e:	af05      	add	r7, sp, #20
 8017f20:	f10d 061e 	add.w	r6, sp, #30
 8017f24:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8017f28:	e002      	b.n	8017f30 <recv_custom_msg+0x34>
 8017f2a:	9b05      	ldr	r3, [sp, #20]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	dd0f      	ble.n	8017f50 <recv_custom_msg+0x54>
 8017f30:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8017f34:	4623      	mov	r3, r4
 8017f36:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017f3a:	e9cd 5600 	strd	r5, r6, [sp]
 8017f3e:	4622      	mov	r2, r4
 8017f40:	4648      	mov	r0, r9
 8017f42:	f001 f92d 	bl	80191a0 <uxr_read_framed_msg>
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d0ef      	beq.n	8017f2a <recv_custom_msg+0x2e>
 8017f4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017f4e:	b1b3      	cbz	r3, 8017f7e <recv_custom_msg+0x82>
 8017f50:	4b0f      	ldr	r3, [pc, #60]	@ (8017f90 <recv_custom_msg+0x94>)
 8017f52:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017f56:	701a      	strb	r2, [r3, #0]
 8017f58:	2000      	movs	r0, #0
 8017f5a:	b009      	add	sp, #36	@ 0x24
 8017f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f60:	f10d 021f 	add.w	r2, sp, #31
 8017f64:	9200      	str	r2, [sp, #0]
 8017f66:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8017f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017f6e:	4601      	mov	r1, r0
 8017f70:	47a8      	blx	r5
 8017f72:	2800      	cmp	r0, #0
 8017f74:	d0ec      	beq.n	8017f50 <recv_custom_msg+0x54>
 8017f76:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d1e8      	bne.n	8017f50 <recv_custom_msg+0x54>
 8017f7e:	f8cb 0000 	str.w	r0, [fp]
 8017f82:	2001      	movs	r0, #1
 8017f84:	f8ca 4000 	str.w	r4, [sl]
 8017f88:	b009      	add	sp, #36	@ 0x24
 8017f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f8e:	bf00      	nop
 8017f90:	20015f28 	.word	0x20015f28

08017f94 <send_custom_msg>:
 8017f94:	b530      	push	{r4, r5, lr}
 8017f96:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8017f9a:	b087      	sub	sp, #28
 8017f9c:	4615      	mov	r5, r2
 8017f9e:	b974      	cbnz	r4, 8017fbe <send_custom_msg+0x2a>
 8017fa0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8017fa4:	f10d 0317 	add.w	r3, sp, #23
 8017fa8:	47a0      	blx	r4
 8017faa:	b108      	cbz	r0, 8017fb0 <send_custom_msg+0x1c>
 8017fac:	42a8      	cmp	r0, r5
 8017fae:	d015      	beq.n	8017fdc <send_custom_msg+0x48>
 8017fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8017fe4 <send_custom_msg+0x50>)
 8017fb2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8017fb6:	701a      	strb	r2, [r3, #0]
 8017fb8:	2000      	movs	r0, #0
 8017fba:	b007      	add	sp, #28
 8017fbc:	bd30      	pop	{r4, r5, pc}
 8017fbe:	460b      	mov	r3, r1
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	f10d 0117 	add.w	r1, sp, #23
 8017fc6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8017fca:	4602      	mov	r2, r0
 8017fcc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8017fd0:	9500      	str	r5, [sp, #0]
 8017fd2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8017fd6:	f000 feeb 	bl	8018db0 <uxr_write_framed_msg>
 8017fda:	e7e6      	b.n	8017faa <send_custom_msg+0x16>
 8017fdc:	2001      	movs	r0, #1
 8017fde:	b007      	add	sp, #28
 8017fe0:	bd30      	pop	{r4, r5, pc}
 8017fe2:	bf00      	nop
 8017fe4:	20015f28 	.word	0x20015f28

08017fe8 <uxr_set_custom_transport_callbacks>:
 8017fe8:	b410      	push	{r4}
 8017fea:	9c01      	ldr	r4, [sp, #4]
 8017fec:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8017ff0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8017ff4:	9b02      	ldr	r3, [sp, #8]
 8017ff6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8017ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ffe:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8018002:	4770      	bx	lr

08018004 <uxr_init_custom_transport>:
 8018004:	b538      	push	{r3, r4, r5, lr}
 8018006:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801800a:	b303      	cbz	r3, 801804e <uxr_init_custom_transport+0x4a>
 801800c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8018010:	4604      	mov	r4, r0
 8018012:	b1e2      	cbz	r2, 801804e <uxr_init_custom_transport+0x4a>
 8018014:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8018018:	b1ca      	cbz	r2, 801804e <uxr_init_custom_transport+0x4a>
 801801a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801801e:	b1b2      	cbz	r2, 801804e <uxr_init_custom_transport+0x4a>
 8018020:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8018024:	4798      	blx	r3
 8018026:	4605      	mov	r5, r0
 8018028:	b188      	cbz	r0, 801804e <uxr_init_custom_transport+0x4a>
 801802a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801802e:	b98b      	cbnz	r3, 8018054 <uxr_init_custom_transport+0x50>
 8018030:	490b      	ldr	r1, [pc, #44]	@ (8018060 <uxr_init_custom_transport+0x5c>)
 8018032:	4b0c      	ldr	r3, [pc, #48]	@ (8018064 <uxr_init_custom_transport+0x60>)
 8018034:	4a0c      	ldr	r2, [pc, #48]	@ (8018068 <uxr_init_custom_transport+0x64>)
 8018036:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801803a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801803e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8018042:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8018046:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801804a:	4628      	mov	r0, r5
 801804c:	bd38      	pop	{r3, r4, r5, pc}
 801804e:	2500      	movs	r5, #0
 8018050:	4628      	mov	r0, r5
 8018052:	bd38      	pop	{r3, r4, r5, pc}
 8018054:	2100      	movs	r1, #0
 8018056:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801805a:	f000 fea3 	bl	8018da4 <uxr_init_framing_io>
 801805e:	e7e7      	b.n	8018030 <uxr_init_custom_transport+0x2c>
 8018060:	08017f95 	.word	0x08017f95
 8018064:	08017efd 	.word	0x08017efd
 8018068:	08017ef1 	.word	0x08017ef1

0801806c <uxr_close_custom_transport>:
 801806c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8018070:	4718      	bx	r3
 8018072:	bf00      	nop

08018074 <uxr_init_input_best_effort_stream>:
 8018074:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018078:	8003      	strh	r3, [r0, #0]
 801807a:	4770      	bx	lr

0801807c <uxr_reset_input_best_effort_stream>:
 801807c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018080:	8003      	strh	r3, [r0, #0]
 8018082:	4770      	bx	lr

08018084 <uxr_receive_best_effort_message>:
 8018084:	b538      	push	{r3, r4, r5, lr}
 8018086:	4604      	mov	r4, r0
 8018088:	8800      	ldrh	r0, [r0, #0]
 801808a:	460d      	mov	r5, r1
 801808c:	f000 fe72 	bl	8018d74 <uxr_seq_num_cmp>
 8018090:	4603      	mov	r3, r0
 8018092:	2b00      	cmp	r3, #0
 8018094:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018098:	bfb8      	it	lt
 801809a:	8025      	strhlt	r5, [r4, #0]
 801809c:	bd38      	pop	{r3, r4, r5, pc}
 801809e:	bf00      	nop

080180a0 <on_full_input_buffer>:
 80180a0:	b570      	push	{r4, r5, r6, lr}
 80180a2:	4605      	mov	r5, r0
 80180a4:	460c      	mov	r4, r1
 80180a6:	682b      	ldr	r3, [r5, #0]
 80180a8:	6809      	ldr	r1, [r1, #0]
 80180aa:	8920      	ldrh	r0, [r4, #8]
 80180ac:	6862      	ldr	r2, [r4, #4]
 80180ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80180b2:	eba3 0c01 	sub.w	ip, r3, r1
 80180b6:	fbbc fcf2 	udiv	ip, ip, r2
 80180ba:	f10c 0c01 	add.w	ip, ip, #1
 80180be:	fa1f f38c 	uxth.w	r3, ip
 80180c2:	fbb3 f6f0 	udiv	r6, r3, r0
 80180c6:	fb00 3316 	mls	r3, r0, r6, r3
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	fb02 f303 	mul.w	r3, r2, r3
 80180d0:	1d18      	adds	r0, r3, #4
 80180d2:	4408      	add	r0, r1
 80180d4:	7d26      	ldrb	r6, [r4, #20]
 80180d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80180da:	b116      	cbz	r6, 80180e2 <on_full_input_buffer+0x42>
 80180dc:	2600      	movs	r6, #0
 80180de:	f840 6c04 	str.w	r6, [r0, #-4]
 80180e2:	2a03      	cmp	r2, #3
 80180e4:	d801      	bhi.n	80180ea <on_full_input_buffer+0x4a>
 80180e6:	2001      	movs	r0, #1
 80180e8:	bd70      	pop	{r4, r5, r6, pc}
 80180ea:	3308      	adds	r3, #8
 80180ec:	4419      	add	r1, r3
 80180ee:	4628      	mov	r0, r5
 80180f0:	692b      	ldr	r3, [r5, #16]
 80180f2:	3a04      	subs	r2, #4
 80180f4:	f7f8 f854 	bl	80101a0 <ucdr_init_buffer_origin>
 80180f8:	4628      	mov	r0, r5
 80180fa:	4903      	ldr	r1, [pc, #12]	@ (8018108 <on_full_input_buffer+0x68>)
 80180fc:	4622      	mov	r2, r4
 80180fe:	f7f8 f82b 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8018102:	2000      	movs	r0, #0
 8018104:	bd70      	pop	{r4, r5, r6, pc}
 8018106:	bf00      	nop
 8018108:	080180a1 	.word	0x080180a1

0801810c <uxr_init_input_reliable_stream>:
 801810c:	b500      	push	{lr}
 801810e:	e9c0 1200 	strd	r1, r2, [r0]
 8018112:	f04f 0e00 	mov.w	lr, #0
 8018116:	9a01      	ldr	r2, [sp, #4]
 8018118:	8103      	strh	r3, [r0, #8]
 801811a:	6102      	str	r2, [r0, #16]
 801811c:	f880 e014 	strb.w	lr, [r0, #20]
 8018120:	b1d3      	cbz	r3, 8018158 <uxr_init_input_reliable_stream+0x4c>
 8018122:	f8c1 e000 	str.w	lr, [r1]
 8018126:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801812a:	f1bc 0f01 	cmp.w	ip, #1
 801812e:	d913      	bls.n	8018158 <uxr_init_input_reliable_stream+0x4c>
 8018130:	2301      	movs	r3, #1
 8018132:	fbb3 f1fc 	udiv	r1, r3, ip
 8018136:	fb0c 3111 	mls	r1, ip, r1, r3
 801813a:	b289      	uxth	r1, r1
 801813c:	6842      	ldr	r2, [r0, #4]
 801813e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018142:	fb01 f202 	mul.w	r2, r1, r2
 8018146:	6801      	ldr	r1, [r0, #0]
 8018148:	f841 e002 	str.w	lr, [r1, r2]
 801814c:	3301      	adds	r3, #1
 801814e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018152:	b29b      	uxth	r3, r3
 8018154:	459c      	cmp	ip, r3
 8018156:	d8ec      	bhi.n	8018132 <uxr_init_input_reliable_stream+0x26>
 8018158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801815c:	60c3      	str	r3, [r0, #12]
 801815e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018162:	bf00      	nop

08018164 <uxr_reset_input_reliable_stream>:
 8018164:	8901      	ldrh	r1, [r0, #8]
 8018166:	b1e9      	cbz	r1, 80181a4 <uxr_reset_input_reliable_stream+0x40>
 8018168:	f04f 0c00 	mov.w	ip, #0
 801816c:	b500      	push	{lr}
 801816e:	4663      	mov	r3, ip
 8018170:	46e6      	mov	lr, ip
 8018172:	fbb3 f2f1 	udiv	r2, r3, r1
 8018176:	fb01 3312 	mls	r3, r1, r2, r3
 801817a:	b29b      	uxth	r3, r3
 801817c:	6842      	ldr	r2, [r0, #4]
 801817e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018182:	fb02 f303 	mul.w	r3, r2, r3
 8018186:	6802      	ldr	r2, [r0, #0]
 8018188:	f842 e003 	str.w	lr, [r2, r3]
 801818c:	f10c 0c01 	add.w	ip, ip, #1
 8018190:	8901      	ldrh	r1, [r0, #8]
 8018192:	fa1f f38c 	uxth.w	r3, ip
 8018196:	4299      	cmp	r1, r3
 8018198:	d8eb      	bhi.n	8018172 <uxr_reset_input_reliable_stream+0xe>
 801819a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801819e:	60c3      	str	r3, [r0, #12]
 80181a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80181a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80181a8:	60c3      	str	r3, [r0, #12]
 80181aa:	4770      	bx	lr

080181ac <uxr_receive_reliable_message>:
 80181ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181b0:	4604      	mov	r4, r0
 80181b2:	460d      	mov	r5, r1
 80181b4:	8901      	ldrh	r1, [r0, #8]
 80181b6:	8980      	ldrh	r0, [r0, #12]
 80181b8:	4690      	mov	r8, r2
 80181ba:	461f      	mov	r7, r3
 80181bc:	f000 fdd2 	bl	8018d64 <uxr_seq_num_add>
 80181c0:	4629      	mov	r1, r5
 80181c2:	4606      	mov	r6, r0
 80181c4:	89a0      	ldrh	r0, [r4, #12]
 80181c6:	f000 fdd5 	bl	8018d74 <uxr_seq_num_cmp>
 80181ca:	2800      	cmp	r0, #0
 80181cc:	db0a      	blt.n	80181e4 <uxr_receive_reliable_message+0x38>
 80181ce:	2600      	movs	r6, #0
 80181d0:	89e0      	ldrh	r0, [r4, #14]
 80181d2:	4629      	mov	r1, r5
 80181d4:	f000 fdce 	bl	8018d74 <uxr_seq_num_cmp>
 80181d8:	2800      	cmp	r0, #0
 80181da:	da00      	bge.n	80181de <uxr_receive_reliable_message+0x32>
 80181dc:	81e5      	strh	r5, [r4, #14]
 80181de:	4630      	mov	r0, r6
 80181e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181e4:	4630      	mov	r0, r6
 80181e6:	4629      	mov	r1, r5
 80181e8:	f000 fdc4 	bl	8018d74 <uxr_seq_num_cmp>
 80181ec:	2800      	cmp	r0, #0
 80181ee:	dbee      	blt.n	80181ce <uxr_receive_reliable_message+0x22>
 80181f0:	6923      	ldr	r3, [r4, #16]
 80181f2:	4640      	mov	r0, r8
 80181f4:	4798      	blx	r3
 80181f6:	2101      	movs	r1, #1
 80181f8:	4681      	mov	r9, r0
 80181fa:	89a0      	ldrh	r0, [r4, #12]
 80181fc:	f000 fdb2 	bl	8018d64 <uxr_seq_num_add>
 8018200:	f1b9 0f00 	cmp.w	r9, #0
 8018204:	d101      	bne.n	801820a <uxr_receive_reliable_message+0x5e>
 8018206:	4285      	cmp	r5, r0
 8018208:	d047      	beq.n	801829a <uxr_receive_reliable_message+0xee>
 801820a:	8922      	ldrh	r2, [r4, #8]
 801820c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018210:	fb02 5010 	mls	r0, r2, r0, r5
 8018214:	b280      	uxth	r0, r0
 8018216:	6863      	ldr	r3, [r4, #4]
 8018218:	fbb3 f3f2 	udiv	r3, r3, r2
 801821c:	fb00 f303 	mul.w	r3, r0, r3
 8018220:	6820      	ldr	r0, [r4, #0]
 8018222:	3304      	adds	r3, #4
 8018224:	4418      	add	r0, r3
 8018226:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d1cf      	bne.n	80181ce <uxr_receive_reliable_message+0x22>
 801822e:	4641      	mov	r1, r8
 8018230:	463a      	mov	r2, r7
 8018232:	f002 ff8a 	bl	801b14a <memcpy>
 8018236:	8921      	ldrh	r1, [r4, #8]
 8018238:	fbb5 f2f1 	udiv	r2, r5, r1
 801823c:	fb01 5212 	mls	r2, r1, r2, r5
 8018240:	b292      	uxth	r2, r2
 8018242:	6863      	ldr	r3, [r4, #4]
 8018244:	fbb3 f3f1 	udiv	r3, r3, r1
 8018248:	fb02 f303 	mul.w	r3, r2, r3
 801824c:	6822      	ldr	r2, [r4, #0]
 801824e:	50d7      	str	r7, [r2, r3]
 8018250:	9a08      	ldr	r2, [sp, #32]
 8018252:	2301      	movs	r3, #1
 8018254:	7013      	strb	r3, [r2, #0]
 8018256:	f1b9 0f00 	cmp.w	r9, #0
 801825a:	d0b8      	beq.n	80181ce <uxr_receive_reliable_message+0x22>
 801825c:	89a6      	ldrh	r6, [r4, #12]
 801825e:	4630      	mov	r0, r6
 8018260:	2101      	movs	r1, #1
 8018262:	f000 fd7f 	bl	8018d64 <uxr_seq_num_add>
 8018266:	8922      	ldrh	r2, [r4, #8]
 8018268:	6863      	ldr	r3, [r4, #4]
 801826a:	fbb3 f3f2 	udiv	r3, r3, r2
 801826e:	4606      	mov	r6, r0
 8018270:	fbb0 f0f2 	udiv	r0, r0, r2
 8018274:	fb02 6010 	mls	r0, r2, r0, r6
 8018278:	b280      	uxth	r0, r0
 801827a:	fb00 f303 	mul.w	r3, r0, r3
 801827e:	6820      	ldr	r0, [r4, #0]
 8018280:	3304      	adds	r3, #4
 8018282:	4418      	add	r0, r3
 8018284:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d0a0      	beq.n	80181ce <uxr_receive_reliable_message+0x22>
 801828c:	6923      	ldr	r3, [r4, #16]
 801828e:	4798      	blx	r3
 8018290:	2802      	cmp	r0, #2
 8018292:	d008      	beq.n	80182a6 <uxr_receive_reliable_message+0xfa>
 8018294:	2801      	cmp	r0, #1
 8018296:	d0e2      	beq.n	801825e <uxr_receive_reliable_message+0xb2>
 8018298:	e799      	b.n	80181ce <uxr_receive_reliable_message+0x22>
 801829a:	9b08      	ldr	r3, [sp, #32]
 801829c:	81a5      	strh	r5, [r4, #12]
 801829e:	2601      	movs	r6, #1
 80182a0:	f883 9000 	strb.w	r9, [r3]
 80182a4:	e794      	b.n	80181d0 <uxr_receive_reliable_message+0x24>
 80182a6:	2601      	movs	r6, #1
 80182a8:	e792      	b.n	80181d0 <uxr_receive_reliable_message+0x24>
 80182aa:	bf00      	nop

080182ac <uxr_next_input_reliable_buffer_available>:
 80182ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182b0:	4604      	mov	r4, r0
 80182b2:	460f      	mov	r7, r1
 80182b4:	8980      	ldrh	r0, [r0, #12]
 80182b6:	2101      	movs	r1, #1
 80182b8:	4690      	mov	r8, r2
 80182ba:	f000 fd53 	bl	8018d64 <uxr_seq_num_add>
 80182be:	8922      	ldrh	r2, [r4, #8]
 80182c0:	fbb0 f6f2 	udiv	r6, r0, r2
 80182c4:	fb02 0616 	mls	r6, r2, r6, r0
 80182c8:	b2b6      	uxth	r6, r6
 80182ca:	6863      	ldr	r3, [r4, #4]
 80182cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80182d0:	fb06 f303 	mul.w	r3, r6, r3
 80182d4:	6826      	ldr	r6, [r4, #0]
 80182d6:	3304      	adds	r3, #4
 80182d8:	441e      	add	r6, r3
 80182da:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80182de:	f1b9 0f00 	cmp.w	r9, #0
 80182e2:	d023      	beq.n	801832c <uxr_next_input_reliable_buffer_available+0x80>
 80182e4:	6923      	ldr	r3, [r4, #16]
 80182e6:	4605      	mov	r5, r0
 80182e8:	4630      	mov	r0, r6
 80182ea:	4798      	blx	r3
 80182ec:	4682      	mov	sl, r0
 80182ee:	b300      	cbz	r0, 8018332 <uxr_next_input_reliable_buffer_available+0x86>
 80182f0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80182f4:	2101      	movs	r1, #1
 80182f6:	4650      	mov	r0, sl
 80182f8:	f000 fd34 	bl	8018d64 <uxr_seq_num_add>
 80182fc:	8921      	ldrh	r1, [r4, #8]
 80182fe:	fbb0 f2f1 	udiv	r2, r0, r1
 8018302:	4682      	mov	sl, r0
 8018304:	fb01 0212 	mls	r2, r1, r2, r0
 8018308:	e9d4 0300 	ldrd	r0, r3, [r4]
 801830c:	b292      	uxth	r2, r2
 801830e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018312:	fb02 f303 	mul.w	r3, r2, r3
 8018316:	3304      	adds	r3, #4
 8018318:	4418      	add	r0, r3
 801831a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801831e:	b12b      	cbz	r3, 801832c <uxr_next_input_reliable_buffer_available+0x80>
 8018320:	6923      	ldr	r3, [r4, #16]
 8018322:	4798      	blx	r3
 8018324:	2802      	cmp	r0, #2
 8018326:	d01b      	beq.n	8018360 <uxr_next_input_reliable_buffer_available+0xb4>
 8018328:	2801      	cmp	r0, #1
 801832a:	d0e3      	beq.n	80182f4 <uxr_next_input_reliable_buffer_available+0x48>
 801832c:	2000      	movs	r0, #0
 801832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018332:	464a      	mov	r2, r9
 8018334:	4631      	mov	r1, r6
 8018336:	4638      	mov	r0, r7
 8018338:	f7f7 ff3a 	bl	80101b0 <ucdr_init_buffer>
 801833c:	8921      	ldrh	r1, [r4, #8]
 801833e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018342:	fb01 5212 	mls	r2, r1, r2, r5
 8018346:	b292      	uxth	r2, r2
 8018348:	6863      	ldr	r3, [r4, #4]
 801834a:	fbb3 f3f1 	udiv	r3, r3, r1
 801834e:	fb02 f303 	mul.w	r3, r2, r3
 8018352:	6822      	ldr	r2, [r4, #0]
 8018354:	f842 a003 	str.w	sl, [r2, r3]
 8018358:	2001      	movs	r0, #1
 801835a:	81a5      	strh	r5, [r4, #12]
 801835c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018360:	8920      	ldrh	r0, [r4, #8]
 8018362:	fbb5 f3f0 	udiv	r3, r5, r0
 8018366:	fb00 5513 	mls	r5, r0, r3, r5
 801836a:	b2ad      	uxth	r5, r5
 801836c:	6863      	ldr	r3, [r4, #4]
 801836e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018372:	fb03 f505 	mul.w	r5, r3, r5
 8018376:	6823      	ldr	r3, [r4, #0]
 8018378:	2000      	movs	r0, #0
 801837a:	5158      	str	r0, [r3, r5]
 801837c:	eb06 0108 	add.w	r1, r6, r8
 8018380:	eba9 0208 	sub.w	r2, r9, r8
 8018384:	4638      	mov	r0, r7
 8018386:	f7f7 ff13 	bl	80101b0 <ucdr_init_buffer>
 801838a:	4638      	mov	r0, r7
 801838c:	4903      	ldr	r1, [pc, #12]	@ (801839c <uxr_next_input_reliable_buffer_available+0xf0>)
 801838e:	4622      	mov	r2, r4
 8018390:	f7f7 fee2 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8018394:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018398:	2001      	movs	r0, #1
 801839a:	e7c8      	b.n	801832e <uxr_next_input_reliable_buffer_available+0x82>
 801839c:	080180a1 	.word	0x080180a1

080183a0 <uxr_process_heartbeat>:
 80183a0:	b538      	push	{r3, r4, r5, lr}
 80183a2:	4611      	mov	r1, r2
 80183a4:	4604      	mov	r4, r0
 80183a6:	89c0      	ldrh	r0, [r0, #14]
 80183a8:	4615      	mov	r5, r2
 80183aa:	f000 fce3 	bl	8018d74 <uxr_seq_num_cmp>
 80183ae:	2800      	cmp	r0, #0
 80183b0:	bfb8      	it	lt
 80183b2:	81e5      	strhlt	r5, [r4, #14]
 80183b4:	bd38      	pop	{r3, r4, r5, pc}
 80183b6:	bf00      	nop

080183b8 <uxr_compute_acknack>:
 80183b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183bc:	8903      	ldrh	r3, [r0, #8]
 80183be:	8985      	ldrh	r5, [r0, #12]
 80183c0:	4604      	mov	r4, r0
 80183c2:	460e      	mov	r6, r1
 80183c4:	b1d3      	cbz	r3, 80183fc <uxr_compute_acknack+0x44>
 80183c6:	4628      	mov	r0, r5
 80183c8:	2701      	movs	r7, #1
 80183ca:	e003      	b.n	80183d4 <uxr_compute_acknack+0x1c>
 80183cc:	4567      	cmp	r7, ip
 80183ce:	d215      	bcs.n	80183fc <uxr_compute_acknack+0x44>
 80183d0:	89a0      	ldrh	r0, [r4, #12]
 80183d2:	3701      	adds	r7, #1
 80183d4:	b2b9      	uxth	r1, r7
 80183d6:	f000 fcc5 	bl	8018d64 <uxr_seq_num_add>
 80183da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80183de:	fbb0 f3fc 	udiv	r3, r0, ip
 80183e2:	fb0c 0313 	mls	r3, ip, r3, r0
 80183e6:	b29a      	uxth	r2, r3
 80183e8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80183ec:	fbb3 f3fc 	udiv	r3, r3, ip
 80183f0:	fb02 f303 	mul.w	r3, r2, r3
 80183f4:	58cb      	ldr	r3, [r1, r3]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d1e8      	bne.n	80183cc <uxr_compute_acknack+0x14>
 80183fa:	4605      	mov	r5, r0
 80183fc:	8035      	strh	r5, [r6, #0]
 80183fe:	2101      	movs	r1, #1
 8018400:	4628      	mov	r0, r5
 8018402:	89e7      	ldrh	r7, [r4, #14]
 8018404:	f000 fcb2 	bl	8018d6c <uxr_seq_num_sub>
 8018408:	4601      	mov	r1, r0
 801840a:	4638      	mov	r0, r7
 801840c:	f000 fcae 	bl	8018d6c <uxr_seq_num_sub>
 8018410:	4605      	mov	r5, r0
 8018412:	b318      	cbz	r0, 801845c <uxr_compute_acknack+0xa4>
 8018414:	f04f 0900 	mov.w	r9, #0
 8018418:	464f      	mov	r7, r9
 801841a:	f04f 0801 	mov.w	r8, #1
 801841e:	fa1f f189 	uxth.w	r1, r9
 8018422:	8830      	ldrh	r0, [r6, #0]
 8018424:	f000 fc9e 	bl	8018d64 <uxr_seq_num_add>
 8018428:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801842c:	fbb0 f3fc 	udiv	r3, r0, ip
 8018430:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018434:	fb03 001c 	mls	r0, r3, ip, r0
 8018438:	b283      	uxth	r3, r0
 801843a:	fbb2 f2fc 	udiv	r2, r2, ip
 801843e:	fb02 f303 	mul.w	r3, r2, r3
 8018442:	fa08 f209 	lsl.w	r2, r8, r9
 8018446:	58cb      	ldr	r3, [r1, r3]
 8018448:	f109 0901 	add.w	r9, r9, #1
 801844c:	b90b      	cbnz	r3, 8018452 <uxr_compute_acknack+0x9a>
 801844e:	4317      	orrs	r7, r2
 8018450:	b2bf      	uxth	r7, r7
 8018452:	454d      	cmp	r5, r9
 8018454:	d1e3      	bne.n	801841e <uxr_compute_acknack+0x66>
 8018456:	4638      	mov	r0, r7
 8018458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801845c:	4607      	mov	r7, r0
 801845e:	4638      	mov	r0, r7
 8018460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018464 <uxr_init_output_best_effort_stream>:
 8018464:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018468:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801846c:	6001      	str	r1, [r0, #0]
 801846e:	7303      	strb	r3, [r0, #12]
 8018470:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018474:	4770      	bx	lr
 8018476:	bf00      	nop

08018478 <uxr_reset_output_best_effort_stream>:
 8018478:	7b02      	ldrb	r2, [r0, #12]
 801847a:	6042      	str	r2, [r0, #4]
 801847c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018480:	81c3      	strh	r3, [r0, #14]
 8018482:	4770      	bx	lr

08018484 <uxr_prepare_best_effort_buffer_to_write>:
 8018484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018486:	4604      	mov	r4, r0
 8018488:	b083      	sub	sp, #12
 801848a:	6840      	ldr	r0, [r0, #4]
 801848c:	460d      	mov	r5, r1
 801848e:	4616      	mov	r6, r2
 8018490:	f7f9 fbce 	bl	8011c30 <uxr_submessage_padding>
 8018494:	6863      	ldr	r3, [r4, #4]
 8018496:	4418      	add	r0, r3
 8018498:	68a3      	ldr	r3, [r4, #8]
 801849a:	1942      	adds	r2, r0, r5
 801849c:	4293      	cmp	r3, r2
 801849e:	bf2c      	ite	cs
 80184a0:	2701      	movcs	r7, #1
 80184a2:	2700      	movcc	r7, #0
 80184a4:	d202      	bcs.n	80184ac <uxr_prepare_best_effort_buffer_to_write+0x28>
 80184a6:	4638      	mov	r0, r7
 80184a8:	b003      	add	sp, #12
 80184aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184ac:	9000      	str	r0, [sp, #0]
 80184ae:	6821      	ldr	r1, [r4, #0]
 80184b0:	4630      	mov	r0, r6
 80184b2:	2300      	movs	r3, #0
 80184b4:	f7f7 fe6a 	bl	801018c <ucdr_init_buffer_origin_offset>
 80184b8:	6861      	ldr	r1, [r4, #4]
 80184ba:	4638      	mov	r0, r7
 80184bc:	4429      	add	r1, r5
 80184be:	6061      	str	r1, [r4, #4]
 80184c0:	b003      	add	sp, #12
 80184c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080184c4 <uxr_prepare_best_effort_buffer_to_send>:
 80184c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184c8:	4604      	mov	r4, r0
 80184ca:	461d      	mov	r5, r3
 80184cc:	6840      	ldr	r0, [r0, #4]
 80184ce:	7b23      	ldrb	r3, [r4, #12]
 80184d0:	4298      	cmp	r0, r3
 80184d2:	bf8c      	ite	hi
 80184d4:	2601      	movhi	r6, #1
 80184d6:	2600      	movls	r6, #0
 80184d8:	d802      	bhi.n	80184e0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80184da:	4630      	mov	r0, r6
 80184dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184e0:	4688      	mov	r8, r1
 80184e2:	89e0      	ldrh	r0, [r4, #14]
 80184e4:	2101      	movs	r1, #1
 80184e6:	4617      	mov	r7, r2
 80184e8:	f000 fc3c 	bl	8018d64 <uxr_seq_num_add>
 80184ec:	6823      	ldr	r3, [r4, #0]
 80184ee:	81e0      	strh	r0, [r4, #14]
 80184f0:	8028      	strh	r0, [r5, #0]
 80184f2:	f8c8 3000 	str.w	r3, [r8]
 80184f6:	6863      	ldr	r3, [r4, #4]
 80184f8:	603b      	str	r3, [r7, #0]
 80184fa:	7b23      	ldrb	r3, [r4, #12]
 80184fc:	6063      	str	r3, [r4, #4]
 80184fe:	4630      	mov	r0, r6
 8018500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018504 <on_full_output_buffer>:
 8018504:	b538      	push	{r3, r4, r5, lr}
 8018506:	6802      	ldr	r2, [r0, #0]
 8018508:	460c      	mov	r4, r1
 801850a:	6809      	ldr	r1, [r1, #0]
 801850c:	8923      	ldrh	r3, [r4, #8]
 801850e:	eba2 0c01 	sub.w	ip, r2, r1
 8018512:	6862      	ldr	r2, [r4, #4]
 8018514:	fbb2 f2f3 	udiv	r2, r2, r3
 8018518:	fbbc fcf2 	udiv	ip, ip, r2
 801851c:	f10c 0c01 	add.w	ip, ip, #1
 8018520:	fa1f fc8c 	uxth.w	ip, ip
 8018524:	fbbc fef3 	udiv	lr, ip, r3
 8018528:	fb03 c31e 	mls	r3, r3, lr, ip
 801852c:	b29b      	uxth	r3, r3
 801852e:	fb02 f303 	mul.w	r3, r2, r3
 8018532:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018536:	58ca      	ldr	r2, [r1, r3]
 8018538:	4463      	add	r3, ip
 801853a:	eba2 020c 	sub.w	r2, r2, ip
 801853e:	3308      	adds	r3, #8
 8018540:	4605      	mov	r5, r0
 8018542:	4419      	add	r1, r3
 8018544:	3a04      	subs	r2, #4
 8018546:	6903      	ldr	r3, [r0, #16]
 8018548:	f7f7 fe2a 	bl	80101a0 <ucdr_init_buffer_origin>
 801854c:	4628      	mov	r0, r5
 801854e:	4903      	ldr	r1, [pc, #12]	@ (801855c <on_full_output_buffer+0x58>)
 8018550:	4622      	mov	r2, r4
 8018552:	f7f7 fe01 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8018556:	2000      	movs	r0, #0
 8018558:	bd38      	pop	{r3, r4, r5, pc}
 801855a:	bf00      	nop
 801855c:	08018505 	.word	0x08018505

08018560 <uxr_init_output_reliable_stream>:
 8018560:	b410      	push	{r4}
 8018562:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018566:	8103      	strh	r3, [r0, #8]
 8018568:	e9c0 1200 	strd	r1, r2, [r0]
 801856c:	f880 c00c 	strb.w	ip, [r0, #12]
 8018570:	b1d3      	cbz	r3, 80185a8 <uxr_init_output_reliable_stream+0x48>
 8018572:	f8c1 c000 	str.w	ip, [r1]
 8018576:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801857a:	f1bc 0f01 	cmp.w	ip, #1
 801857e:	d913      	bls.n	80185a8 <uxr_init_output_reliable_stream+0x48>
 8018580:	2301      	movs	r3, #1
 8018582:	fbb3 f1fc 	udiv	r1, r3, ip
 8018586:	fb0c 3111 	mls	r1, ip, r1, r3
 801858a:	b289      	uxth	r1, r1
 801858c:	6842      	ldr	r2, [r0, #4]
 801858e:	6804      	ldr	r4, [r0, #0]
 8018590:	fbb2 f2fc 	udiv	r2, r2, ip
 8018594:	fb01 f202 	mul.w	r2, r1, r2
 8018598:	7b01      	ldrb	r1, [r0, #12]
 801859a:	50a1      	str	r1, [r4, r2]
 801859c:	3301      	adds	r3, #1
 801859e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	459c      	cmp	ip, r3
 80185a6:	d8ec      	bhi.n	8018582 <uxr_init_output_reliable_stream+0x22>
 80185a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80185ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80185b0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80185b4:	4905      	ldr	r1, [pc, #20]	@ (80185cc <uxr_init_output_reliable_stream+0x6c>)
 80185b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80185ba:	f8c0 100e 	str.w	r1, [r0, #14]
 80185be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80185c2:	2300      	movs	r3, #0
 80185c4:	8242      	strh	r2, [r0, #18]
 80185c6:	8403      	strh	r3, [r0, #32]
 80185c8:	4770      	bx	lr
 80185ca:	bf00      	nop
 80185cc:	ffff0000 	.word	0xffff0000

080185d0 <uxr_reset_output_reliable_stream>:
 80185d0:	8901      	ldrh	r1, [r0, #8]
 80185d2:	b1b1      	cbz	r1, 8018602 <uxr_reset_output_reliable_stream+0x32>
 80185d4:	f04f 0c00 	mov.w	ip, #0
 80185d8:	4663      	mov	r3, ip
 80185da:	fbb3 f2f1 	udiv	r2, r3, r1
 80185de:	fb01 3312 	mls	r3, r1, r2, r3
 80185e2:	b29b      	uxth	r3, r3
 80185e4:	6842      	ldr	r2, [r0, #4]
 80185e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80185ea:	6801      	ldr	r1, [r0, #0]
 80185ec:	fb02 f303 	mul.w	r3, r2, r3
 80185f0:	7b02      	ldrb	r2, [r0, #12]
 80185f2:	50ca      	str	r2, [r1, r3]
 80185f4:	f10c 0c01 	add.w	ip, ip, #1
 80185f8:	8901      	ldrh	r1, [r0, #8]
 80185fa:	fa1f f38c 	uxth.w	r3, ip
 80185fe:	4299      	cmp	r1, r3
 8018600:	d8eb      	bhi.n	80185da <uxr_reset_output_reliable_stream+0xa>
 8018602:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018606:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801860a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801860e:	4904      	ldr	r1, [pc, #16]	@ (8018620 <uxr_reset_output_reliable_stream+0x50>)
 8018610:	f8c0 100e 	str.w	r1, [r0, #14]
 8018614:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018618:	2300      	movs	r3, #0
 801861a:	8242      	strh	r2, [r0, #18]
 801861c:	8403      	strh	r3, [r0, #32]
 801861e:	4770      	bx	lr
 8018620:	ffff0000 	.word	0xffff0000

08018624 <uxr_prepare_reliable_buffer_to_write>:
 8018624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018628:	4604      	mov	r4, r0
 801862a:	b091      	sub	sp, #68	@ 0x44
 801862c:	8900      	ldrh	r0, [r0, #8]
 801862e:	89e6      	ldrh	r6, [r4, #14]
 8018630:	6823      	ldr	r3, [r4, #0]
 8018632:	9204      	str	r2, [sp, #16]
 8018634:	fbb6 f2f0 	udiv	r2, r6, r0
 8018638:	fb00 6212 	mls	r2, r0, r2, r6
 801863c:	b292      	uxth	r2, r2
 801863e:	6865      	ldr	r5, [r4, #4]
 8018640:	fbb5 f5f0 	udiv	r5, r5, r0
 8018644:	fb05 3202 	mla	r2, r5, r2, r3
 8018648:	3204      	adds	r2, #4
 801864a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801864e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018652:	9203      	str	r2, [sp, #12]
 8018654:	468b      	mov	fp, r1
 8018656:	1f2f      	subs	r7, r5, #4
 8018658:	2800      	cmp	r0, #0
 801865a:	f000 814c 	beq.w	80188f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801865e:	f04f 0c00 	mov.w	ip, #0
 8018662:	46e2      	mov	sl, ip
 8018664:	4661      	mov	r1, ip
 8018666:	fbb1 f2f0 	udiv	r2, r1, r0
 801866a:	fb00 1212 	mls	r2, r0, r2, r1
 801866e:	b292      	uxth	r2, r2
 8018670:	fb05 f202 	mul.w	r2, r5, r2
 8018674:	f10c 0c01 	add.w	ip, ip, #1
 8018678:	589a      	ldr	r2, [r3, r2]
 801867a:	454a      	cmp	r2, r9
 801867c:	bf08      	it	eq
 801867e:	f10a 0a01 	addeq.w	sl, sl, #1
 8018682:	fa1f f18c 	uxth.w	r1, ip
 8018686:	bf08      	it	eq
 8018688:	fa1f fa8a 	uxtheq.w	sl, sl
 801868c:	4281      	cmp	r1, r0
 801868e:	d3ea      	bcc.n	8018666 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018690:	4640      	mov	r0, r8
 8018692:	2104      	movs	r1, #4
 8018694:	f8cd a014 	str.w	sl, [sp, #20]
 8018698:	f7f7 fd8e 	bl	80101b8 <ucdr_alignment>
 801869c:	4480      	add	r8, r0
 801869e:	eb08 020b 	add.w	r2, r8, fp
 80186a2:	42ba      	cmp	r2, r7
 80186a4:	f240 80cd 	bls.w	8018842 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80186a8:	7b22      	ldrb	r2, [r4, #12]
 80186aa:	445a      	add	r2, fp
 80186ac:	42ba      	cmp	r2, r7
 80186ae:	f240 80b5 	bls.w	801881c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80186b2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80186b6:	33fc      	adds	r3, #252	@ 0xfc
 80186b8:	b2ba      	uxth	r2, r7
 80186ba:	4413      	add	r3, r2
 80186bc:	b29b      	uxth	r3, r3
 80186be:	fb0a f903 	mul.w	r9, sl, r3
 80186c2:	45d9      	cmp	r9, fp
 80186c4:	9305      	str	r3, [sp, #20]
 80186c6:	9306      	str	r3, [sp, #24]
 80186c8:	f0c0 80b7 	bcc.w	801883a <uxr_prepare_reliable_buffer_to_write+0x216>
 80186cc:	f108 0304 	add.w	r3, r8, #4
 80186d0:	42bb      	cmp	r3, r7
 80186d2:	f080 80db 	bcs.w	801888c <uxr_prepare_reliable_buffer_to_write+0x268>
 80186d6:	f1a2 0904 	sub.w	r9, r2, #4
 80186da:	eba9 0908 	sub.w	r9, r9, r8
 80186de:	9b05      	ldr	r3, [sp, #20]
 80186e0:	fa1f f989 	uxth.w	r9, r9
 80186e4:	ebab 0b09 	sub.w	fp, fp, r9
 80186e8:	fbbb f2f3 	udiv	r2, fp, r3
 80186ec:	fb03 b312 	mls	r3, r3, r2, fp
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	f000 80c8 	beq.w	8018886 <uxr_prepare_reliable_buffer_to_write+0x262>
 80186f6:	3201      	adds	r2, #1
 80186f8:	b292      	uxth	r2, r2
 80186fa:	9306      	str	r3, [sp, #24]
 80186fc:	4552      	cmp	r2, sl
 80186fe:	f200 809c 	bhi.w	801883a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018702:	f10d 0b20 	add.w	fp, sp, #32
 8018706:	2a00      	cmp	r2, #0
 8018708:	d042      	beq.n	8018790 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801870a:	f8cd 801c 	str.w	r8, [sp, #28]
 801870e:	f04f 0a00 	mov.w	sl, #0
 8018712:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018716:	9505      	str	r5, [sp, #20]
 8018718:	f10d 0b20 	add.w	fp, sp, #32
 801871c:	4615      	mov	r5, r2
 801871e:	e000      	b.n	8018722 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018720:	46c1      	mov	r9, r8
 8018722:	8920      	ldrh	r0, [r4, #8]
 8018724:	fbb6 f2f0 	udiv	r2, r6, r0
 8018728:	fb00 6112 	mls	r1, r0, r2, r6
 801872c:	b28a      	uxth	r2, r1
 801872e:	6863      	ldr	r3, [r4, #4]
 8018730:	fbb3 f1f0 	udiv	r1, r3, r0
 8018734:	6823      	ldr	r3, [r4, #0]
 8018736:	fb02 f101 	mul.w	r1, r2, r1
 801873a:	3104      	adds	r1, #4
 801873c:	4419      	add	r1, r3
 801873e:	4658      	mov	r0, fp
 8018740:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018744:	9200      	str	r2, [sp, #0]
 8018746:	2300      	movs	r3, #0
 8018748:	463a      	mov	r2, r7
 801874a:	f7f7 fd1f 	bl	801018c <ucdr_init_buffer_origin_offset>
 801874e:	464a      	mov	r2, r9
 8018750:	2300      	movs	r3, #0
 8018752:	210d      	movs	r1, #13
 8018754:	4658      	mov	r0, fp
 8018756:	f7f9 fa2b 	bl	8011bb0 <uxr_buffer_submessage_header>
 801875a:	8921      	ldrh	r1, [r4, #8]
 801875c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018760:	fb01 6212 	mls	r2, r1, r2, r6
 8018764:	b292      	uxth	r2, r2
 8018766:	6863      	ldr	r3, [r4, #4]
 8018768:	fbb3 f3f1 	udiv	r3, r3, r1
 801876c:	fb02 f303 	mul.w	r3, r2, r3
 8018770:	6822      	ldr	r2, [r4, #0]
 8018772:	4630      	mov	r0, r6
 8018774:	50d7      	str	r7, [r2, r3]
 8018776:	2101      	movs	r1, #1
 8018778:	f000 faf4 	bl	8018d64 <uxr_seq_num_add>
 801877c:	f10a 0a01 	add.w	sl, sl, #1
 8018780:	fa1f f38a 	uxth.w	r3, sl
 8018784:	429d      	cmp	r5, r3
 8018786:	4606      	mov	r6, r0
 8018788:	d8ca      	bhi.n	8018720 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801878a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801878e:	9d05      	ldr	r5, [sp, #20]
 8018790:	8920      	ldrh	r0, [r4, #8]
 8018792:	fbb6 f3f0 	udiv	r3, r6, r0
 8018796:	fb00 6313 	mls	r3, r0, r3, r6
 801879a:	b299      	uxth	r1, r3
 801879c:	6863      	ldr	r3, [r4, #4]
 801879e:	fbb3 f3f0 	udiv	r3, r3, r0
 80187a2:	fb01 f303 	mul.w	r3, r1, r3
 80187a6:	6821      	ldr	r1, [r4, #0]
 80187a8:	3304      	adds	r3, #4
 80187aa:	4419      	add	r1, r3
 80187ac:	463a      	mov	r2, r7
 80187ae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80187b2:	9000      	str	r0, [sp, #0]
 80187b4:	2300      	movs	r3, #0
 80187b6:	4658      	mov	r0, fp
 80187b8:	f7f7 fce8 	bl	801018c <ucdr_init_buffer_origin_offset>
 80187bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80187c0:	4658      	mov	r0, fp
 80187c2:	fa1f f289 	uxth.w	r2, r9
 80187c6:	2302      	movs	r3, #2
 80187c8:	210d      	movs	r1, #13
 80187ca:	f7f9 f9f1 	bl	8011bb0 <uxr_buffer_submessage_header>
 80187ce:	9b03      	ldr	r3, [sp, #12]
 80187d0:	8927      	ldrh	r7, [r4, #8]
 80187d2:	7b20      	ldrb	r0, [r4, #12]
 80187d4:	f108 0104 	add.w	r1, r8, #4
 80187d8:	440b      	add	r3, r1
 80187da:	4619      	mov	r1, r3
 80187dc:	fbb6 f3f7 	udiv	r3, r6, r7
 80187e0:	fb07 6313 	mls	r3, r7, r3, r6
 80187e4:	f1a5 0208 	sub.w	r2, r5, #8
 80187e8:	b29d      	uxth	r5, r3
 80187ea:	3004      	adds	r0, #4
 80187ec:	6863      	ldr	r3, [r4, #4]
 80187ee:	fbb3 f3f7 	udiv	r3, r3, r7
 80187f2:	fb05 f303 	mul.w	r3, r5, r3
 80187f6:	6825      	ldr	r5, [r4, #0]
 80187f8:	4448      	add	r0, r9
 80187fa:	50e8      	str	r0, [r5, r3]
 80187fc:	9d04      	ldr	r5, [sp, #16]
 80187fe:	eba2 0208 	sub.w	r2, r2, r8
 8018802:	4628      	mov	r0, r5
 8018804:	f7f7 fcd4 	bl	80101b0 <ucdr_init_buffer>
 8018808:	4628      	mov	r0, r5
 801880a:	493c      	ldr	r1, [pc, #240]	@ (80188fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801880c:	4622      	mov	r2, r4
 801880e:	f7f7 fca3 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8018812:	2001      	movs	r0, #1
 8018814:	81e6      	strh	r6, [r4, #14]
 8018816:	b011      	add	sp, #68	@ 0x44
 8018818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801881c:	2101      	movs	r1, #1
 801881e:	89e0      	ldrh	r0, [r4, #14]
 8018820:	f000 faa0 	bl	8018d64 <uxr_seq_num_add>
 8018824:	8921      	ldrh	r1, [r4, #8]
 8018826:	4605      	mov	r5, r0
 8018828:	8a60      	ldrh	r0, [r4, #18]
 801882a:	f000 fa9b 	bl	8018d64 <uxr_seq_num_add>
 801882e:	4601      	mov	r1, r0
 8018830:	4628      	mov	r0, r5
 8018832:	f000 fa9f 	bl	8018d74 <uxr_seq_num_cmp>
 8018836:	2800      	cmp	r0, #0
 8018838:	dd42      	ble.n	80188c0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801883a:	2000      	movs	r0, #0
 801883c:	b011      	add	sp, #68	@ 0x44
 801883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018842:	8921      	ldrh	r1, [r4, #8]
 8018844:	8a60      	ldrh	r0, [r4, #18]
 8018846:	9205      	str	r2, [sp, #20]
 8018848:	f000 fa8c 	bl	8018d64 <uxr_seq_num_add>
 801884c:	4601      	mov	r1, r0
 801884e:	4630      	mov	r0, r6
 8018850:	f000 fa90 	bl	8018d74 <uxr_seq_num_cmp>
 8018854:	2800      	cmp	r0, #0
 8018856:	9a05      	ldr	r2, [sp, #20]
 8018858:	dcef      	bgt.n	801883a <uxr_prepare_reliable_buffer_to_write+0x216>
 801885a:	8927      	ldrh	r7, [r4, #8]
 801885c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018860:	fb07 6313 	mls	r3, r7, r3, r6
 8018864:	b29d      	uxth	r5, r3
 8018866:	6863      	ldr	r3, [r4, #4]
 8018868:	6824      	ldr	r4, [r4, #0]
 801886a:	fbb3 f3f7 	udiv	r3, r3, r7
 801886e:	fb05 f303 	mul.w	r3, r5, r3
 8018872:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018876:	50e2      	str	r2, [r4, r3]
 8018878:	2300      	movs	r3, #0
 801887a:	f8cd 8000 	str.w	r8, [sp]
 801887e:	f7f7 fc85 	bl	801018c <ucdr_init_buffer_origin_offset>
 8018882:	2001      	movs	r0, #1
 8018884:	e7da      	b.n	801883c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018886:	b293      	uxth	r3, r2
 8018888:	461a      	mov	r2, r3
 801888a:	e737      	b.n	80186fc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801888c:	4630      	mov	r0, r6
 801888e:	2101      	movs	r1, #1
 8018890:	9207      	str	r2, [sp, #28]
 8018892:	f000 fa67 	bl	8018d64 <uxr_seq_num_add>
 8018896:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801889a:	fbb0 f1fc 	udiv	r1, r0, ip
 801889e:	fb0c 0111 	mls	r1, ip, r1, r0
 80188a2:	4606      	mov	r6, r0
 80188a4:	b288      	uxth	r0, r1
 80188a6:	6863      	ldr	r3, [r4, #4]
 80188a8:	fbb3 f1fc 	udiv	r1, r3, ip
 80188ac:	6823      	ldr	r3, [r4, #0]
 80188ae:	9a07      	ldr	r2, [sp, #28]
 80188b0:	fb00 f101 	mul.w	r1, r0, r1
 80188b4:	3104      	adds	r1, #4
 80188b6:	440b      	add	r3, r1
 80188b8:	9303      	str	r3, [sp, #12]
 80188ba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80188be:	e70a      	b.n	80186d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80188c0:	8921      	ldrh	r1, [r4, #8]
 80188c2:	fbb5 f3f1 	udiv	r3, r5, r1
 80188c6:	fb01 5313 	mls	r3, r1, r3, r5
 80188ca:	b29a      	uxth	r2, r3
 80188cc:	6863      	ldr	r3, [r4, #4]
 80188ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80188d2:	6821      	ldr	r1, [r4, #0]
 80188d4:	9804      	ldr	r0, [sp, #16]
 80188d6:	fb02 f303 	mul.w	r3, r2, r3
 80188da:	3304      	adds	r3, #4
 80188dc:	7b22      	ldrb	r2, [r4, #12]
 80188de:	4419      	add	r1, r3
 80188e0:	445a      	add	r2, fp
 80188e2:	f841 2c04 	str.w	r2, [r1, #-4]
 80188e6:	7b23      	ldrb	r3, [r4, #12]
 80188e8:	9300      	str	r3, [sp, #0]
 80188ea:	2300      	movs	r3, #0
 80188ec:	f7f7 fc4e 	bl	801018c <ucdr_init_buffer_origin_offset>
 80188f0:	81e5      	strh	r5, [r4, #14]
 80188f2:	2001      	movs	r0, #1
 80188f4:	e7a2      	b.n	801883c <uxr_prepare_reliable_buffer_to_write+0x218>
 80188f6:	4682      	mov	sl, r0
 80188f8:	e6ca      	b.n	8018690 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80188fa:	bf00      	nop
 80188fc:	08018505 	.word	0x08018505

08018900 <uxr_prepare_next_reliable_buffer_to_send>:
 8018900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018902:	4604      	mov	r4, r0
 8018904:	460f      	mov	r7, r1
 8018906:	8a00      	ldrh	r0, [r0, #16]
 8018908:	2101      	movs	r1, #1
 801890a:	4616      	mov	r6, r2
 801890c:	461d      	mov	r5, r3
 801890e:	f000 fa29 	bl	8018d64 <uxr_seq_num_add>
 8018912:	8028      	strh	r0, [r5, #0]
 8018914:	8922      	ldrh	r2, [r4, #8]
 8018916:	fbb0 f3f2 	udiv	r3, r0, r2
 801891a:	fb02 0c13 	mls	ip, r2, r3, r0
 801891e:	fa1f fc8c 	uxth.w	ip, ip
 8018922:	6863      	ldr	r3, [r4, #4]
 8018924:	fbb3 f3f2 	udiv	r3, r3, r2
 8018928:	fb0c fc03 	mul.w	ip, ip, r3
 801892c:	6823      	ldr	r3, [r4, #0]
 801892e:	89e1      	ldrh	r1, [r4, #14]
 8018930:	f10c 0c04 	add.w	ip, ip, #4
 8018934:	4463      	add	r3, ip
 8018936:	603b      	str	r3, [r7, #0]
 8018938:	6823      	ldr	r3, [r4, #0]
 801893a:	449c      	add	ip, r3
 801893c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018940:	6033      	str	r3, [r6, #0]
 8018942:	f000 fa17 	bl	8018d74 <uxr_seq_num_cmp>
 8018946:	2800      	cmp	r0, #0
 8018948:	dd01      	ble.n	801894e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801894a:	2000      	movs	r0, #0
 801894c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801894e:	7b23      	ldrb	r3, [r4, #12]
 8018950:	6832      	ldr	r2, [r6, #0]
 8018952:	429a      	cmp	r2, r3
 8018954:	d9f9      	bls.n	801894a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018956:	8a61      	ldrh	r1, [r4, #18]
 8018958:	8a20      	ldrh	r0, [r4, #16]
 801895a:	f000 fa07 	bl	8018d6c <uxr_seq_num_sub>
 801895e:	8923      	ldrh	r3, [r4, #8]
 8018960:	4283      	cmp	r3, r0
 8018962:	d0f2      	beq.n	801894a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018964:	8828      	ldrh	r0, [r5, #0]
 8018966:	89e3      	ldrh	r3, [r4, #14]
 8018968:	8220      	strh	r0, [r4, #16]
 801896a:	4298      	cmp	r0, r3
 801896c:	d001      	beq.n	8018972 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801896e:	2001      	movs	r0, #1
 8018970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018972:	2101      	movs	r1, #1
 8018974:	f000 f9f6 	bl	8018d64 <uxr_seq_num_add>
 8018978:	81e0      	strh	r0, [r4, #14]
 801897a:	2001      	movs	r0, #1
 801897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801897e:	bf00      	nop

08018980 <uxr_update_output_stream_heartbeat_timestamp>:
 8018980:	b570      	push	{r4, r5, r6, lr}
 8018982:	8a01      	ldrh	r1, [r0, #16]
 8018984:	4604      	mov	r4, r0
 8018986:	8a40      	ldrh	r0, [r0, #18]
 8018988:	4615      	mov	r5, r2
 801898a:	461e      	mov	r6, r3
 801898c:	f000 f9f2 	bl	8018d74 <uxr_seq_num_cmp>
 8018990:	2800      	cmp	r0, #0
 8018992:	db07      	blt.n	80189a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018998:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801899c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80189a0:	2000      	movs	r0, #0
 80189a2:	bd70      	pop	{r4, r5, r6, pc}
 80189a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80189a8:	b940      	cbnz	r0, 80189bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80189aa:	2301      	movs	r3, #1
 80189ac:	f884 3020 	strb.w	r3, [r4, #32]
 80189b0:	3564      	adds	r5, #100	@ 0x64
 80189b2:	f146 0600 	adc.w	r6, r6, #0
 80189b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80189ba:	bd70      	pop	{r4, r5, r6, pc}
 80189bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80189c0:	4295      	cmp	r5, r2
 80189c2:	eb76 0303 	sbcs.w	r3, r6, r3
 80189c6:	bfa5      	ittet	ge
 80189c8:	3001      	addge	r0, #1
 80189ca:	f884 0020 	strbge.w	r0, [r4, #32]
 80189ce:	2000      	movlt	r0, #0
 80189d0:	2001      	movge	r0, #1
 80189d2:	e7ed      	b.n	80189b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080189d4 <uxr_begin_output_nack_buffer_it>:
 80189d4:	8a40      	ldrh	r0, [r0, #18]
 80189d6:	4770      	bx	lr

080189d8 <uxr_next_reliable_nack_buffer_to_send>:
 80189d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189dc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80189e0:	b082      	sub	sp, #8
 80189e2:	f1b8 0f00 	cmp.w	r8, #0
 80189e6:	d011      	beq.n	8018a0c <uxr_next_reliable_nack_buffer_to_send+0x34>
 80189e8:	4604      	mov	r4, r0
 80189ea:	8818      	ldrh	r0, [r3, #0]
 80189ec:	460e      	mov	r6, r1
 80189ee:	4617      	mov	r7, r2
 80189f0:	461d      	mov	r5, r3
 80189f2:	2101      	movs	r1, #1
 80189f4:	f000 f9b6 	bl	8018d64 <uxr_seq_num_add>
 80189f8:	8028      	strh	r0, [r5, #0]
 80189fa:	8a21      	ldrh	r1, [r4, #16]
 80189fc:	f000 f9ba 	bl	8018d74 <uxr_seq_num_cmp>
 8018a00:	2800      	cmp	r0, #0
 8018a02:	dd07      	ble.n	8018a14 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018a04:	f04f 0800 	mov.w	r8, #0
 8018a08:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8018a0c:	4640      	mov	r0, r8
 8018a0e:	b002      	add	sp, #8
 8018a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a14:	8921      	ldrh	r1, [r4, #8]
 8018a16:	8828      	ldrh	r0, [r5, #0]
 8018a18:	6823      	ldr	r3, [r4, #0]
 8018a1a:	fbb0 f2f1 	udiv	r2, r0, r1
 8018a1e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018a22:	fa1f f28c 	uxth.w	r2, ip
 8018a26:	9301      	str	r3, [sp, #4]
 8018a28:	6863      	ldr	r3, [r4, #4]
 8018a2a:	fbb3 fcf1 	udiv	ip, r3, r1
 8018a2e:	9b01      	ldr	r3, [sp, #4]
 8018a30:	fb02 fc0c 	mul.w	ip, r2, ip
 8018a34:	f10c 0c04 	add.w	ip, ip, #4
 8018a38:	4463      	add	r3, ip
 8018a3a:	6033      	str	r3, [r6, #0]
 8018a3c:	6823      	ldr	r3, [r4, #0]
 8018a3e:	4463      	add	r3, ip
 8018a40:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018a44:	603b      	str	r3, [r7, #0]
 8018a46:	7b22      	ldrb	r2, [r4, #12]
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	d0d2      	beq.n	80189f2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018a4c:	4640      	mov	r0, r8
 8018a4e:	b002      	add	sp, #8
 8018a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a54 <uxr_process_acknack>:
 8018a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a56:	4604      	mov	r4, r0
 8018a58:	460e      	mov	r6, r1
 8018a5a:	4610      	mov	r0, r2
 8018a5c:	2101      	movs	r1, #1
 8018a5e:	f000 f985 	bl	8018d6c <uxr_seq_num_sub>
 8018a62:	8a61      	ldrh	r1, [r4, #18]
 8018a64:	f000 f982 	bl	8018d6c <uxr_seq_num_sub>
 8018a68:	b1c0      	cbz	r0, 8018a9c <uxr_process_acknack+0x48>
 8018a6a:	4605      	mov	r5, r0
 8018a6c:	2700      	movs	r7, #0
 8018a6e:	2101      	movs	r1, #1
 8018a70:	8a60      	ldrh	r0, [r4, #18]
 8018a72:	f000 f977 	bl	8018d64 <uxr_seq_num_add>
 8018a76:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a7a:	fbb0 f1fc 	udiv	r1, r0, ip
 8018a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018a82:	fb0c 0111 	mls	r1, ip, r1, r0
 8018a86:	b289      	uxth	r1, r1
 8018a88:	3701      	adds	r7, #1
 8018a8a:	fbb3 f3fc 	udiv	r3, r3, ip
 8018a8e:	fb01 f303 	mul.w	r3, r1, r3
 8018a92:	42bd      	cmp	r5, r7
 8018a94:	7b21      	ldrb	r1, [r4, #12]
 8018a96:	8260      	strh	r0, [r4, #18]
 8018a98:	50d1      	str	r1, [r2, r3]
 8018a9a:	d1e8      	bne.n	8018a6e <uxr_process_acknack+0x1a>
 8018a9c:	3e00      	subs	r6, #0
 8018a9e:	f04f 0300 	mov.w	r3, #0
 8018aa2:	bf18      	it	ne
 8018aa4:	2601      	movne	r6, #1
 8018aa6:	f884 3020 	strb.w	r3, [r4, #32]
 8018aaa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ab0 <uxr_is_output_up_to_date>:
 8018ab0:	8a01      	ldrh	r1, [r0, #16]
 8018ab2:	8a40      	ldrh	r0, [r0, #18]
 8018ab4:	b508      	push	{r3, lr}
 8018ab6:	f000 f95d 	bl	8018d74 <uxr_seq_num_cmp>
 8018aba:	fab0 f080 	clz	r0, r0
 8018abe:	0940      	lsrs	r0, r0, #5
 8018ac0:	bd08      	pop	{r3, pc}
 8018ac2:	bf00      	nop

08018ac4 <get_available_free_slots>:
 8018ac4:	8902      	ldrh	r2, [r0, #8]
 8018ac6:	b1da      	cbz	r2, 8018b00 <get_available_free_slots+0x3c>
 8018ac8:	b530      	push	{r4, r5, lr}
 8018aca:	2100      	movs	r1, #0
 8018acc:	6843      	ldr	r3, [r0, #4]
 8018ace:	6805      	ldr	r5, [r0, #0]
 8018ad0:	7b04      	ldrb	r4, [r0, #12]
 8018ad2:	fbb3 fef2 	udiv	lr, r3, r2
 8018ad6:	4608      	mov	r0, r1
 8018ad8:	460b      	mov	r3, r1
 8018ada:	fbb3 fcf2 	udiv	ip, r3, r2
 8018ade:	fb02 331c 	mls	r3, r2, ip, r3
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	fb0e f303 	mul.w	r3, lr, r3
 8018ae8:	3101      	adds	r1, #1
 8018aea:	f855 c003 	ldr.w	ip, [r5, r3]
 8018aee:	4564      	cmp	r4, ip
 8018af0:	bf08      	it	eq
 8018af2:	3001      	addeq	r0, #1
 8018af4:	b28b      	uxth	r3, r1
 8018af6:	bf08      	it	eq
 8018af8:	b280      	uxtheq	r0, r0
 8018afa:	4293      	cmp	r3, r2
 8018afc:	d3ed      	bcc.n	8018ada <get_available_free_slots+0x16>
 8018afe:	bd30      	pop	{r4, r5, pc}
 8018b00:	4610      	mov	r0, r2
 8018b02:	4770      	bx	lr

08018b04 <uxr_buffer_request_data>:
 8018b04:	b530      	push	{r4, r5, lr}
 8018b06:	b095      	sub	sp, #84	@ 0x54
 8018b08:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018b0c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8018b0e:	9303      	str	r3, [sp, #12]
 8018b10:	2200      	movs	r2, #0
 8018b12:	2d00      	cmp	r5, #0
 8018b14:	bf14      	ite	ne
 8018b16:	2101      	movne	r1, #1
 8018b18:	4611      	moveq	r1, r2
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	f88d 301c 	strb.w	r3, [sp, #28]
 8018b20:	f88d 201d 	strb.w	r2, [sp, #29]
 8018b24:	f88d 201e 	strb.w	r2, [sp, #30]
 8018b28:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018b2c:	d021      	beq.n	8018b72 <uxr_buffer_request_data+0x6e>
 8018b2e:	682a      	ldr	r2, [r5, #0]
 8018b30:	686b      	ldr	r3, [r5, #4]
 8018b32:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8018b36:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018b3a:	2210      	movs	r2, #16
 8018b3c:	2308      	movs	r3, #8
 8018b3e:	2100      	movs	r1, #0
 8018b40:	e9cd 3100 	strd	r3, r1, [sp]
 8018b44:	4620      	mov	r0, r4
 8018b46:	9905      	ldr	r1, [sp, #20]
 8018b48:	ab0c      	add	r3, sp, #48	@ 0x30
 8018b4a:	f7f8 fd93 	bl	8011674 <uxr_prepare_stream_to_write_submessage>
 8018b4e:	b918      	cbnz	r0, 8018b58 <uxr_buffer_request_data+0x54>
 8018b50:	4604      	mov	r4, r0
 8018b52:	4620      	mov	r0, r4
 8018b54:	b015      	add	sp, #84	@ 0x54
 8018b56:	bd30      	pop	{r4, r5, pc}
 8018b58:	9904      	ldr	r1, [sp, #16]
 8018b5a:	aa06      	add	r2, sp, #24
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	f7f8 febf 	bl	80118e0 <uxr_init_base_object_request>
 8018b62:	a906      	add	r1, sp, #24
 8018b64:	4604      	mov	r4, r0
 8018b66:	a80c      	add	r0, sp, #48	@ 0x30
 8018b68:	f7fa f9ee 	bl	8012f48 <uxr_serialize_READ_DATA_Payload>
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	b015      	add	sp, #84	@ 0x54
 8018b70:	bd30      	pop	{r4, r5, pc}
 8018b72:	2208      	movs	r2, #8
 8018b74:	e7e2      	b.n	8018b3c <uxr_buffer_request_data+0x38>
 8018b76:	bf00      	nop

08018b78 <uxr_buffer_cancel_data>:
 8018b78:	b510      	push	{r4, lr}
 8018b7a:	b094      	sub	sp, #80	@ 0x50
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	9202      	str	r2, [sp, #8]
 8018b80:	9205      	str	r2, [sp, #20]
 8018b82:	9301      	str	r3, [sp, #4]
 8018b84:	2201      	movs	r2, #1
 8018b86:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018b8a:	f88d 301e 	strb.w	r3, [sp, #30]
 8018b8e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8018b92:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018b96:	2308      	movs	r3, #8
 8018b98:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	2210      	movs	r2, #16
 8018ba0:	ab0c      	add	r3, sp, #48	@ 0x30
 8018ba2:	4604      	mov	r4, r0
 8018ba4:	9103      	str	r1, [sp, #12]
 8018ba6:	f7f8 fd65 	bl	8011674 <uxr_prepare_stream_to_write_submessage>
 8018baa:	b918      	cbnz	r0, 8018bb4 <uxr_buffer_cancel_data+0x3c>
 8018bac:	4604      	mov	r4, r0
 8018bae:	4620      	mov	r0, r4
 8018bb0:	b014      	add	sp, #80	@ 0x50
 8018bb2:	bd10      	pop	{r4, pc}
 8018bb4:	9905      	ldr	r1, [sp, #20]
 8018bb6:	aa06      	add	r2, sp, #24
 8018bb8:	4620      	mov	r0, r4
 8018bba:	f7f8 fe91 	bl	80118e0 <uxr_init_base_object_request>
 8018bbe:	a906      	add	r1, sp, #24
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	a80c      	add	r0, sp, #48	@ 0x30
 8018bc4:	f7fa f9c0 	bl	8012f48 <uxr_serialize_READ_DATA_Payload>
 8018bc8:	4620      	mov	r0, r4
 8018bca:	b014      	add	sp, #80	@ 0x50
 8018bcc:	bd10      	pop	{r4, pc}
 8018bce:	bf00      	nop

08018bd0 <read_submessage_format>:
 8018bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bd4:	b095      	sub	sp, #84	@ 0x54
 8018bd6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8018bda:	b113      	cbz	r3, 8018be2 <read_submessage_format+0x12>
 8018bdc:	b015      	add	sp, #84	@ 0x54
 8018bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018be2:	460c      	mov	r4, r1
 8018be4:	4615      	mov	r5, r2
 8018be6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8018bea:	4607      	mov	r7, r0
 8018bec:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8018bee:	9004      	str	r0, [sp, #16]
 8018bf0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8018bf2:	9005      	str	r0, [sp, #20]
 8018bf4:	1a52      	subs	r2, r2, r1
 8018bf6:	a80c      	add	r0, sp, #48	@ 0x30
 8018bf8:	4699      	mov	r9, r3
 8018bfa:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8018bfe:	f7f7 fad7 	bl	80101b0 <ucdr_init_buffer>
 8018c02:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018c06:	a80c      	add	r0, sp, #48	@ 0x30
 8018c08:	f7f7 faa6 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8018c0c:	69e2      	ldr	r2, [r4, #28]
 8018c0e:	b19a      	cbz	r2, 8018c38 <read_submessage_format+0x68>
 8018c10:	f1b8 0f07 	cmp.w	r8, #7
 8018c14:	f882 9014 	strb.w	r9, [r2, #20]
 8018c18:	d040      	beq.n	8018c9c <read_submessage_format+0xcc>
 8018c1a:	f1b8 0f08 	cmp.w	r8, #8
 8018c1e:	d02e      	beq.n	8018c7e <read_submessage_format+0xae>
 8018c20:	f1b8 0f06 	cmp.w	r8, #6
 8018c24:	d011      	beq.n	8018c4a <read_submessage_format+0x7a>
 8018c26:	2301      	movs	r3, #1
 8018c28:	7513      	strb	r3, [r2, #20]
 8018c2a:	4629      	mov	r1, r5
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	f7f7 fb0f 	bl	8010250 <ucdr_advance_buffer>
 8018c32:	b015      	add	sp, #84	@ 0x54
 8018c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c38:	f1b8 0f07 	cmp.w	r8, #7
 8018c3c:	d02e      	beq.n	8018c9c <read_submessage_format+0xcc>
 8018c3e:	f1b8 0f08 	cmp.w	r8, #8
 8018c42:	d01c      	beq.n	8018c7e <read_submessage_format+0xae>
 8018c44:	f1b8 0f06 	cmp.w	r8, #6
 8018c48:	d1ef      	bne.n	8018c2a <read_submessage_format+0x5a>
 8018c4a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8018c4e:	f1b8 0f00 	cmp.w	r8, #0
 8018c52:	d011      	beq.n	8018c78 <read_submessage_format+0xa8>
 8018c54:	ab0c      	add	r3, sp, #48	@ 0x30
 8018c56:	e9cd 3500 	strd	r3, r5, [sp]
 8018c5a:	2306      	movs	r3, #6
 8018c5c:	f88d 3016 	strb.w	r3, [sp, #22]
 8018c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8018c64:	9302      	str	r3, [sp, #8]
 8018c66:	4632      	mov	r2, r6
 8018c68:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018c6c:	4638      	mov	r0, r7
 8018c6e:	47c0      	blx	r8
 8018c70:	2301      	movs	r3, #1
 8018c72:	69e2      	ldr	r2, [r4, #28]
 8018c74:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018c78:	2a00      	cmp	r2, #0
 8018c7a:	d1d4      	bne.n	8018c26 <read_submessage_format+0x56>
 8018c7c:	e7d5      	b.n	8018c2a <read_submessage_format+0x5a>
 8018c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8018c82:	2b00      	cmp	r3, #0
 8018c84:	d0f8      	beq.n	8018c78 <read_submessage_format+0xa8>
 8018c86:	a906      	add	r1, sp, #24
 8018c88:	a80c      	add	r0, sp, #48	@ 0x30
 8018c8a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8018c8e:	f7fa fa21 	bl	80130d4 <uxr_deserialize_SampleIdentity>
 8018c92:	b9a0      	cbnz	r0, 8018cbe <read_submessage_format+0xee>
 8018c94:	69e2      	ldr	r2, [r4, #28]
 8018c96:	2a00      	cmp	r2, #0
 8018c98:	d1c5      	bne.n	8018c26 <read_submessage_format+0x56>
 8018c9a:	e7c6      	b.n	8018c2a <read_submessage_format+0x5a>
 8018c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018ca0:	b13b      	cbz	r3, 8018cb2 <read_submessage_format+0xe2>
 8018ca2:	a906      	add	r1, sp, #24
 8018ca4:	a80c      	add	r0, sp, #48	@ 0x30
 8018ca6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8018caa:	f7f9 fee7 	bl	8012a7c <uxr_deserialize_BaseObjectRequest>
 8018cae:	bb60      	cbnz	r0, 8018d0a <read_submessage_format+0x13a>
 8018cb0:	69e2      	ldr	r2, [r4, #28]
 8018cb2:	68a3      	ldr	r3, [r4, #8]
 8018cb4:	442b      	add	r3, r5
 8018cb6:	60a3      	str	r3, [r4, #8]
 8018cb8:	2a00      	cmp	r2, #0
 8018cba:	d1b4      	bne.n	8018c26 <read_submessage_format+0x56>
 8018cbc:	e7b5      	b.n	8018c2a <read_submessage_format+0x5a>
 8018cbe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018cc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018cc4:	1a52      	subs	r2, r2, r1
 8018cc6:	eba8 0803 	sub.w	r8, r8, r3
 8018cca:	a80c      	add	r0, sp, #48	@ 0x30
 8018ccc:	f7f7 fa70 	bl	80101b0 <ucdr_init_buffer>
 8018cd0:	44a8      	add	r8, r5
 8018cd2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018cd6:	a80c      	add	r0, sp, #48	@ 0x30
 8018cd8:	f7f7 fa3e 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8018cdc:	fa1f f888 	uxth.w	r8, r8
 8018ce0:	ab0c      	add	r3, sp, #48	@ 0x30
 8018ce2:	9300      	str	r3, [sp, #0]
 8018ce4:	f8cd 8004 	str.w	r8, [sp, #4]
 8018ce8:	2108      	movs	r1, #8
 8018cea:	f88d 1016 	strb.w	r1, [sp, #22]
 8018cee:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8018cf2:	9102      	str	r1, [sp, #8]
 8018cf4:	ab06      	add	r3, sp, #24
 8018cf6:	4632      	mov	r2, r6
 8018cf8:	9905      	ldr	r1, [sp, #20]
 8018cfa:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8018cfe:	4638      	mov	r0, r7
 8018d00:	47b0      	blx	r6
 8018d02:	2301      	movs	r3, #1
 8018d04:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018d08:	e7c4      	b.n	8018c94 <read_submessage_format+0xc4>
 8018d0a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018d0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018d10:	1a52      	subs	r2, r2, r1
 8018d12:	a80c      	add	r0, sp, #48	@ 0x30
 8018d14:	eba8 0803 	sub.w	r8, r8, r3
 8018d18:	f7f7 fa4a 	bl	80101b0 <ucdr_init_buffer>
 8018d1c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018d20:	a80c      	add	r0, sp, #48	@ 0x30
 8018d22:	f7f7 fa19 	bl	8010158 <ucdr_set_on_full_buffer_callback>
 8018d26:	ab0c      	add	r3, sp, #48	@ 0x30
 8018d28:	9300      	str	r3, [sp, #0]
 8018d2a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018d2e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8018d32:	44a8      	add	r8, r5
 8018d34:	fa1f f888 	uxth.w	r8, r8
 8018d38:	f8cd 8004 	str.w	r8, [sp, #4]
 8018d3c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018d40:	2107      	movs	r1, #7
 8018d42:	f88d 1016 	strb.w	r1, [sp, #22]
 8018d46:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8018d4a:	9102      	str	r1, [sp, #8]
 8018d4c:	4632      	mov	r2, r6
 8018d4e:	b29b      	uxth	r3, r3
 8018d50:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8018d54:	9905      	ldr	r1, [sp, #20]
 8018d56:	4638      	mov	r0, r7
 8018d58:	47b0      	blx	r6
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8018d60:	e7a6      	b.n	8018cb0 <read_submessage_format+0xe0>
 8018d62:	bf00      	nop

08018d64 <uxr_seq_num_add>:
 8018d64:	4408      	add	r0, r1
 8018d66:	b280      	uxth	r0, r0
 8018d68:	4770      	bx	lr
 8018d6a:	bf00      	nop

08018d6c <uxr_seq_num_sub>:
 8018d6c:	1a40      	subs	r0, r0, r1
 8018d6e:	b280      	uxth	r0, r0
 8018d70:	4770      	bx	lr
 8018d72:	bf00      	nop

08018d74 <uxr_seq_num_cmp>:
 8018d74:	4288      	cmp	r0, r1
 8018d76:	d011      	beq.n	8018d9c <uxr_seq_num_cmp+0x28>
 8018d78:	d309      	bcc.n	8018d8e <uxr_seq_num_cmp+0x1a>
 8018d7a:	4288      	cmp	r0, r1
 8018d7c:	d910      	bls.n	8018da0 <uxr_seq_num_cmp+0x2c>
 8018d7e:	1a40      	subs	r0, r0, r1
 8018d80:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018d84:	bfd4      	ite	le
 8018d86:	2001      	movle	r0, #1
 8018d88:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018d8c:	4770      	bx	lr
 8018d8e:	1a0b      	subs	r3, r1, r0
 8018d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018d94:	daf1      	bge.n	8018d7a <uxr_seq_num_cmp+0x6>
 8018d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d9a:	4770      	bx	lr
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	4770      	bx	lr
 8018da0:	2001      	movs	r0, #1
 8018da2:	4770      	bx	lr

08018da4 <uxr_init_framing_io>:
 8018da4:	2300      	movs	r3, #0
 8018da6:	7041      	strb	r1, [r0, #1]
 8018da8:	7003      	strb	r3, [r0, #0]
 8018daa:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8018dac:	4770      	bx	lr
 8018dae:	bf00      	nop

08018db0 <uxr_write_framed_msg>:
 8018db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018db4:	4617      	mov	r7, r2
 8018db6:	7842      	ldrb	r2, [r0, #1]
 8018db8:	b083      	sub	sp, #12
 8018dba:	460e      	mov	r6, r1
 8018dbc:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8018dc0:	469a      	mov	sl, r3
 8018dc2:	2901      	cmp	r1, #1
 8018dc4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8018dc8:	4604      	mov	r4, r0
 8018dca:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8018dce:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8018dd2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8018dd6:	f240 8137 	bls.w	8019048 <uxr_write_framed_msg+0x298>
 8018dda:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8018dde:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8018de2:	2901      	cmp	r1, #1
 8018de4:	f04f 0202 	mov.w	r2, #2
 8018de8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018dec:	f240 808f 	bls.w	8018f0e <uxr_write_framed_msg+0x15e>
 8018df0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018df2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8018df6:	b2dd      	uxtb	r5, r3
 8018df8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8018dfc:	2203      	movs	r2, #3
 8018dfe:	2901      	cmp	r1, #1
 8018e00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018e04:	f240 809a 	bls.w	8018f3c <uxr_write_framed_msg+0x18c>
 8018e08:	18a1      	adds	r1, r4, r2
 8018e0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e0c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8018e10:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018e14:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018e18:	3201      	adds	r2, #1
 8018e1a:	2801      	cmp	r0, #1
 8018e1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018e20:	f240 80a0 	bls.w	8018f64 <uxr_write_framed_msg+0x1b4>
 8018e24:	18a0      	adds	r0, r4, r2
 8018e26:	3201      	adds	r2, #1
 8018e28:	b2d2      	uxtb	r2, r2
 8018e2a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018e2e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	f000 80a9 	beq.w	8018f8a <uxr_write_framed_msg+0x1da>
 8018e38:	f04f 0900 	mov.w	r9, #0
 8018e3c:	46c8      	mov	r8, r9
 8018e3e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8018e42:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8018e46:	2901      	cmp	r1, #1
 8018e48:	f240 80c3 	bls.w	8018fd2 <uxr_write_framed_msg+0x222>
 8018e4c:	2a29      	cmp	r2, #41	@ 0x29
 8018e4e:	f200 809f 	bhi.w	8018f90 <uxr_write_framed_msg+0x1e0>
 8018e52:	18a1      	adds	r1, r4, r2
 8018e54:	3201      	adds	r2, #1
 8018e56:	b2d2      	uxtb	r2, r2
 8018e58:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8018e5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018e60:	ea89 0303 	eor.w	r3, r9, r3
 8018e64:	498c      	ldr	r1, [pc, #560]	@ (8019098 <uxr_write_framed_msg+0x2e8>)
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	f108 0801 	add.w	r8, r8, #1
 8018e6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018e70:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8018e74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e76:	4543      	cmp	r3, r8
 8018e78:	d8e1      	bhi.n	8018e3e <uxr_write_framed_msg+0x8e>
 8018e7a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018e7e:	fa5f f889 	uxtb.w	r8, r9
 8018e82:	9301      	str	r3, [sp, #4]
 8018e84:	f04f 0900 	mov.w	r9, #0
 8018e88:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8018e8c:	fa5f f18a 	uxtb.w	r1, sl
 8018e90:	2901      	cmp	r1, #1
 8018e92:	d921      	bls.n	8018ed8 <uxr_write_framed_msg+0x128>
 8018e94:	2a29      	cmp	r2, #41	@ 0x29
 8018e96:	f240 80af 	bls.w	8018ff8 <uxr_write_framed_msg+0x248>
 8018e9a:	2500      	movs	r5, #0
 8018e9c:	e000      	b.n	8018ea0 <uxr_write_framed_msg+0xf0>
 8018e9e:	b160      	cbz	r0, 8018eba <uxr_write_framed_msg+0x10a>
 8018ea0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018ea4:	1b52      	subs	r2, r2, r5
 8018ea6:	465b      	mov	r3, fp
 8018ea8:	4421      	add	r1, r4
 8018eaa:	4638      	mov	r0, r7
 8018eac:	47b0      	blx	r6
 8018eae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018eb2:	4405      	add	r5, r0
 8018eb4:	4295      	cmp	r5, r2
 8018eb6:	d3f2      	bcc.n	8018e9e <uxr_write_framed_msg+0xee>
 8018eb8:	d003      	beq.n	8018ec2 <uxr_write_framed_msg+0x112>
 8018eba:	2000      	movs	r0, #0
 8018ebc:	b003      	add	sp, #12
 8018ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec2:	fa5f f18a 	uxtb.w	r1, sl
 8018ec6:	f04f 0300 	mov.w	r3, #0
 8018eca:	2901      	cmp	r1, #1
 8018ecc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018ed0:	f04f 0200 	mov.w	r2, #0
 8018ed4:	f200 8090 	bhi.w	8018ff8 <uxr_write_framed_msg+0x248>
 8018ed8:	1c51      	adds	r1, r2, #1
 8018eda:	b2c9      	uxtb	r1, r1
 8018edc:	2929      	cmp	r1, #41	@ 0x29
 8018ede:	d8dc      	bhi.n	8018e9a <uxr_write_framed_msg+0xea>
 8018ee0:	18a5      	adds	r5, r4, r2
 8018ee2:	4421      	add	r1, r4
 8018ee4:	3202      	adds	r2, #2
 8018ee6:	f088 0820 	eor.w	r8, r8, #32
 8018eea:	4648      	mov	r0, r9
 8018eec:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8018ef0:	b2d2      	uxtb	r2, r2
 8018ef2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8018ef6:	f04f 0901 	mov.w	r9, #1
 8018efa:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8018efe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018f02:	2800      	cmp	r0, #0
 8018f04:	f040 8085 	bne.w	8019012 <uxr_write_framed_msg+0x262>
 8018f08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018f0c:	e7bc      	b.n	8018e88 <uxr_write_framed_msg+0xd8>
 8018f0e:	4611      	mov	r1, r2
 8018f10:	f04f 0c03 	mov.w	ip, #3
 8018f14:	2204      	movs	r2, #4
 8018f16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f18:	4421      	add	r1, r4
 8018f1a:	b2dd      	uxtb	r5, r3
 8018f1c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8018f20:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8018f24:	44a4      	add	ip, r4
 8018f26:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8018f2a:	f080 0020 	eor.w	r0, r0, #32
 8018f2e:	2901      	cmp	r1, #1
 8018f30:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8018f34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018f38:	f63f af66 	bhi.w	8018e08 <uxr_write_framed_msg+0x58>
 8018f3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018f3e:	18a0      	adds	r0, r4, r2
 8018f40:	f085 0520 	eor.w	r5, r5, #32
 8018f44:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018f48:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018f4c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8018f50:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8018f54:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8018f58:	3202      	adds	r2, #2
 8018f5a:	2801      	cmp	r0, #1
 8018f5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018f60:	f63f af60 	bhi.w	8018e24 <uxr_write_framed_msg+0x74>
 8018f64:	1c50      	adds	r0, r2, #1
 8018f66:	18a5      	adds	r5, r4, r2
 8018f68:	fa54 f080 	uxtab	r0, r4, r0
 8018f6c:	3202      	adds	r2, #2
 8018f6e:	f081 0120 	eor.w	r1, r1, #32
 8018f72:	b2d2      	uxtb	r2, r2
 8018f74:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8018f78:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8018f7c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8018f80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	f47f af57 	bne.w	8018e38 <uxr_write_framed_msg+0x88>
 8018f8a:	9301      	str	r3, [sp, #4]
 8018f8c:	4698      	mov	r8, r3
 8018f8e:	e779      	b.n	8018e84 <uxr_write_framed_msg+0xd4>
 8018f90:	2500      	movs	r5, #0
 8018f92:	e001      	b.n	8018f98 <uxr_write_framed_msg+0x1e8>
 8018f94:	2800      	cmp	r0, #0
 8018f96:	d090      	beq.n	8018eba <uxr_write_framed_msg+0x10a>
 8018f98:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8018f9c:	1b52      	subs	r2, r2, r5
 8018f9e:	465b      	mov	r3, fp
 8018fa0:	4421      	add	r1, r4
 8018fa2:	4638      	mov	r0, r7
 8018fa4:	47b0      	blx	r6
 8018fa6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8018faa:	4405      	add	r5, r0
 8018fac:	4295      	cmp	r5, r2
 8018fae:	d3f1      	bcc.n	8018f94 <uxr_write_framed_msg+0x1e4>
 8018fb0:	d183      	bne.n	8018eba <uxr_write_framed_msg+0x10a>
 8018fb2:	f04f 0300 	mov.w	r3, #0
 8018fb6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8018fba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018fbc:	4543      	cmp	r3, r8
 8018fbe:	d964      	bls.n	801908a <uxr_write_framed_msg+0x2da>
 8018fc0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8018fc4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8018fc8:	2901      	cmp	r1, #1
 8018fca:	f04f 0200 	mov.w	r2, #0
 8018fce:	f63f af3d 	bhi.w	8018e4c <uxr_write_framed_msg+0x9c>
 8018fd2:	1c51      	adds	r1, r2, #1
 8018fd4:	b2c9      	uxtb	r1, r1
 8018fd6:	2929      	cmp	r1, #41	@ 0x29
 8018fd8:	d8da      	bhi.n	8018f90 <uxr_write_framed_msg+0x1e0>
 8018fda:	18a0      	adds	r0, r4, r2
 8018fdc:	4421      	add	r1, r4
 8018fde:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8018fe2:	3202      	adds	r2, #2
 8018fe4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8018fe8:	b2d2      	uxtb	r2, r2
 8018fea:	f083 0020 	eor.w	r0, r3, #32
 8018fee:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8018ff2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8018ff6:	e733      	b.n	8018e60 <uxr_write_framed_msg+0xb0>
 8018ff8:	18a1      	adds	r1, r4, r2
 8018ffa:	3201      	adds	r2, #1
 8018ffc:	4648      	mov	r0, r9
 8018ffe:	b2d2      	uxtb	r2, r2
 8019000:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8019004:	f04f 0901 	mov.w	r9, #1
 8019008:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801900c:	2800      	cmp	r0, #0
 801900e:	f43f af7b 	beq.w	8018f08 <uxr_write_framed_msg+0x158>
 8019012:	2500      	movs	r5, #0
 8019014:	e002      	b.n	801901c <uxr_write_framed_msg+0x26c>
 8019016:	2800      	cmp	r0, #0
 8019018:	f43f af4f 	beq.w	8018eba <uxr_write_framed_msg+0x10a>
 801901c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8019020:	1b52      	subs	r2, r2, r5
 8019022:	465b      	mov	r3, fp
 8019024:	4421      	add	r1, r4
 8019026:	4638      	mov	r0, r7
 8019028:	47b0      	blx	r6
 801902a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801902e:	4405      	add	r5, r0
 8019030:	4295      	cmp	r5, r2
 8019032:	d3f0      	bcc.n	8019016 <uxr_write_framed_msg+0x266>
 8019034:	f47f af41 	bne.w	8018eba <uxr_write_framed_msg+0x10a>
 8019038:	2300      	movs	r3, #0
 801903a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801903e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019040:	b298      	uxth	r0, r3
 8019042:	b003      	add	sp, #12
 8019044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019048:	217d      	movs	r1, #125	@ 0x7d
 801904a:	f082 0220 	eor.w	r2, r2, #32
 801904e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8019052:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8019056:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801905a:	2901      	cmp	r1, #1
 801905c:	f04f 0203 	mov.w	r2, #3
 8019060:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019064:	d804      	bhi.n	8019070 <uxr_write_framed_msg+0x2c0>
 8019066:	4611      	mov	r1, r2
 8019068:	f04f 0c04 	mov.w	ip, #4
 801906c:	2205      	movs	r2, #5
 801906e:	e752      	b.n	8018f16 <uxr_write_framed_msg+0x166>
 8019070:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019072:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8019076:	b2dd      	uxtb	r5, r3
 8019078:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801907c:	2204      	movs	r2, #4
 801907e:	2901      	cmp	r1, #1
 8019080:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8019084:	f63f aec0 	bhi.w	8018e08 <uxr_write_framed_msg+0x58>
 8019088:	e758      	b.n	8018f3c <uxr_write_framed_msg+0x18c>
 801908a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801908e:	fa5f f889 	uxtb.w	r8, r9
 8019092:	9301      	str	r3, [sp, #4]
 8019094:	2200      	movs	r2, #0
 8019096:	e6f5      	b.n	8018e84 <uxr_write_framed_msg+0xd4>
 8019098:	0801d5a8 	.word	0x0801d5a8

0801909c <uxr_framing_read_transport>:
 801909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a0:	4604      	mov	r4, r0
 80190a2:	b083      	sub	sp, #12
 80190a4:	461f      	mov	r7, r3
 80190a6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80190aa:	4689      	mov	r9, r1
 80190ac:	4692      	mov	sl, r2
 80190ae:	f7f8 fdc5 	bl	8011c3c <uxr_millis>
 80190b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80190b6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80190ba:	42b3      	cmp	r3, r6
 80190bc:	4680      	mov	r8, r0
 80190be:	d061      	beq.n	8019184 <uxr_framing_read_transport+0xe8>
 80190c0:	d81c      	bhi.n	80190fc <uxr_framing_read_transport+0x60>
 80190c2:	1e75      	subs	r5, r6, #1
 80190c4:	1aed      	subs	r5, r5, r3
 80190c6:	b2ed      	uxtb	r5, r5
 80190c8:	2600      	movs	r6, #0
 80190ca:	455d      	cmp	r5, fp
 80190cc:	d81f      	bhi.n	801910e <uxr_framing_read_transport+0x72>
 80190ce:	19ab      	adds	r3, r5, r6
 80190d0:	455b      	cmp	r3, fp
 80190d2:	bf84      	itt	hi
 80190d4:	ebab 0605 	subhi.w	r6, fp, r5
 80190d8:	b2f6      	uxtbhi	r6, r6
 80190da:	b9ed      	cbnz	r5, 8019118 <uxr_framing_read_transport+0x7c>
 80190dc:	f04f 0b00 	mov.w	fp, #0
 80190e0:	f7f8 fdac 	bl	8011c3c <uxr_millis>
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	eba0 0808 	sub.w	r8, r0, r8
 80190ea:	eba3 0308 	sub.w	r3, r3, r8
 80190ee:	4658      	mov	r0, fp
 80190f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190f4:	603b      	str	r3, [r7, #0]
 80190f6:	b003      	add	sp, #12
 80190f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190fc:	2e00      	cmp	r6, #0
 80190fe:	d049      	beq.n	8019194 <uxr_framing_read_transport+0xf8>
 8019100:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8019104:	b2ed      	uxtb	r5, r5
 8019106:	3e01      	subs	r6, #1
 8019108:	455d      	cmp	r5, fp
 801910a:	b2f6      	uxtb	r6, r6
 801910c:	d9df      	bls.n	80190ce <uxr_framing_read_transport+0x32>
 801910e:	fa5f f58b 	uxtb.w	r5, fp
 8019112:	2600      	movs	r6, #0
 8019114:	2d00      	cmp	r5, #0
 8019116:	d0e1      	beq.n	80190dc <uxr_framing_read_transport+0x40>
 8019118:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801911c:	3102      	adds	r1, #2
 801911e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019120:	9300      	str	r3, [sp, #0]
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	4421      	add	r1, r4
 8019126:	462a      	mov	r2, r5
 8019128:	4650      	mov	r0, sl
 801912a:	47c8      	blx	r9
 801912c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8019130:	4a1a      	ldr	r2, [pc, #104]	@ (801919c <uxr_framing_read_transport+0x100>)
 8019132:	4403      	add	r3, r0
 8019134:	0859      	lsrs	r1, r3, #1
 8019136:	fba2 2101 	umull	r2, r1, r2, r1
 801913a:	0889      	lsrs	r1, r1, #2
 801913c:	222a      	movs	r2, #42	@ 0x2a
 801913e:	fb02 3111 	mls	r1, r2, r1, r3
 8019142:	4683      	mov	fp, r0
 8019144:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8019148:	2800      	cmp	r0, #0
 801914a:	d0c7      	beq.n	80190dc <uxr_framing_read_transport+0x40>
 801914c:	42a8      	cmp	r0, r5
 801914e:	d1c7      	bne.n	80190e0 <uxr_framing_read_transport+0x44>
 8019150:	2e00      	cmp	r6, #0
 8019152:	d0c5      	beq.n	80190e0 <uxr_framing_read_transport+0x44>
 8019154:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019156:	9300      	str	r3, [sp, #0]
 8019158:	3102      	adds	r1, #2
 801915a:	4632      	mov	r2, r6
 801915c:	4421      	add	r1, r4
 801915e:	2300      	movs	r3, #0
 8019160:	4650      	mov	r0, sl
 8019162:	47c8      	blx	r9
 8019164:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019168:	4a0c      	ldr	r2, [pc, #48]	@ (801919c <uxr_framing_read_transport+0x100>)
 801916a:	180b      	adds	r3, r1, r0
 801916c:	0859      	lsrs	r1, r3, #1
 801916e:	fba2 1201 	umull	r1, r2, r2, r1
 8019172:	0892      	lsrs	r2, r2, #2
 8019174:	212a      	movs	r1, #42	@ 0x2a
 8019176:	fb01 3312 	mls	r3, r1, r2, r3
 801917a:	eb00 0b05 	add.w	fp, r0, r5
 801917e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8019182:	e7ad      	b.n	80190e0 <uxr_framing_read_transport+0x44>
 8019184:	2600      	movs	r6, #0
 8019186:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801918a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801918c:	d9bf      	bls.n	801910e <uxr_framing_read_transport+0x72>
 801918e:	2102      	movs	r1, #2
 8019190:	2529      	movs	r5, #41	@ 0x29
 8019192:	e7c4      	b.n	801911e <uxr_framing_read_transport+0x82>
 8019194:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8019198:	b2ed      	uxtb	r5, r5
 801919a:	e796      	b.n	80190ca <uxr_framing_read_transport+0x2e>
 801919c:	30c30c31 	.word	0x30c30c31

080191a0 <uxr_read_framed_msg>:
 80191a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a4:	461e      	mov	r6, r3
 80191a6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80191aa:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80191ae:	429d      	cmp	r5, r3
 80191b0:	b083      	sub	sp, #12
 80191b2:	4604      	mov	r4, r0
 80191b4:	4688      	mov	r8, r1
 80191b6:	4691      	mov	r9, r2
 80191b8:	f000 8188 	beq.w	80194cc <uxr_read_framed_msg+0x32c>
 80191bc:	7823      	ldrb	r3, [r4, #0]
 80191be:	4dc1      	ldr	r5, [pc, #772]	@ (80194c4 <uxr_read_framed_msg+0x324>)
 80191c0:	4fc1      	ldr	r7, [pc, #772]	@ (80194c8 <uxr_read_framed_msg+0x328>)
 80191c2:	2b07      	cmp	r3, #7
 80191c4:	d8fd      	bhi.n	80191c2 <uxr_read_framed_msg+0x22>
 80191c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80191ca:	0115      	.short	0x0115
 80191cc:	00d600f6 	.word	0x00d600f6
 80191d0:	009000b9 	.word	0x009000b9
 80191d4:	0030004d 	.word	0x0030004d
 80191d8:	0008      	.short	0x0008
 80191da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80191de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80191e2:	4299      	cmp	r1, r3
 80191e4:	f000 814a 	beq.w	801947c <uxr_read_framed_msg+0x2dc>
 80191e8:	18e2      	adds	r2, r4, r3
 80191ea:	7892      	ldrb	r2, [r2, #2]
 80191ec:	2a7d      	cmp	r2, #125	@ 0x7d
 80191ee:	f000 8199 	beq.w	8019524 <uxr_read_framed_msg+0x384>
 80191f2:	3301      	adds	r3, #1
 80191f4:	0858      	lsrs	r0, r3, #1
 80191f6:	fba5 1000 	umull	r1, r0, r5, r0
 80191fa:	0880      	lsrs	r0, r0, #2
 80191fc:	212a      	movs	r1, #42	@ 0x2a
 80191fe:	fb01 3310 	mls	r3, r1, r0, r3
 8019202:	2a7e      	cmp	r2, #126	@ 0x7e
 8019204:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019208:	f000 8252 	beq.w	80196b0 <uxr_read_framed_msg+0x510>
 801920c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801920e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8019210:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019214:	b29b      	uxth	r3, r3
 8019216:	2200      	movs	r2, #0
 8019218:	4299      	cmp	r1, r3
 801921a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801921c:	7022      	strb	r2, [r4, #0]
 801921e:	f000 8179 	beq.w	8019514 <uxr_read_framed_msg+0x374>
 8019222:	2000      	movs	r0, #0
 8019224:	b003      	add	sp, #12
 8019226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801922e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019232:	4299      	cmp	r1, r3
 8019234:	f000 8131 	beq.w	801949a <uxr_read_framed_msg+0x2fa>
 8019238:	18e2      	adds	r2, r4, r3
 801923a:	7890      	ldrb	r0, [r2, #2]
 801923c:	287d      	cmp	r0, #125	@ 0x7d
 801923e:	f000 8190 	beq.w	8019562 <uxr_read_framed_msg+0x3c2>
 8019242:	3301      	adds	r3, #1
 8019244:	085a      	lsrs	r2, r3, #1
 8019246:	fba5 1202 	umull	r1, r2, r5, r2
 801924a:	0892      	lsrs	r2, r2, #2
 801924c:	212a      	movs	r1, #42	@ 0x2a
 801924e:	fb01 3312 	mls	r3, r1, r2, r3
 8019252:	287e      	cmp	r0, #126	@ 0x7e
 8019254:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019258:	f000 821a 	beq.w	8019690 <uxr_read_framed_msg+0x4f0>
 801925c:	2307      	movs	r3, #7
 801925e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8019260:	7023      	strb	r3, [r4, #0]
 8019262:	e7ae      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 8019264:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019266:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801926a:	459e      	cmp	lr, r3
 801926c:	d938      	bls.n	80192e0 <uxr_read_framed_msg+0x140>
 801926e:	ee07 8a90 	vmov	s15, r8
 8019272:	212a      	movs	r1, #42	@ 0x2a
 8019274:	e020      	b.n	80192b8 <uxr_read_framed_msg+0x118>
 8019276:	f89b c002 	ldrb.w	ip, [fp, #2]
 801927a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801927e:	f000 80d4 	beq.w	801942a <uxr_read_framed_msg+0x28a>
 8019282:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019286:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801928a:	f000 8219 	beq.w	80196c0 <uxr_read_framed_msg+0x520>
 801928e:	f806 c003 	strb.w	ip, [r6, r3]
 8019292:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8019296:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8019298:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801929c:	ea8a 000c 	eor.w	r0, sl, ip
 80192a0:	b2c0      	uxtb	r0, r0
 80192a2:	3301      	adds	r3, #1
 80192a4:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80192a8:	b29b      	uxth	r3, r3
 80192aa:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80192ae:	4573      	cmp	r3, lr
 80192b0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80192b2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80192b4:	f080 8120 	bcs.w	80194f8 <uxr_read_framed_msg+0x358>
 80192b8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80192bc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80192c0:	f100 0c01 	add.w	ip, r0, #1
 80192c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80192c8:	fba5 8202 	umull	r8, r2, r5, r2
 80192cc:	0892      	lsrs	r2, r2, #2
 80192ce:	4582      	cmp	sl, r0
 80192d0:	eb04 0b00 	add.w	fp, r4, r0
 80192d4:	fb01 c212 	mls	r2, r1, r2, ip
 80192d8:	d1cd      	bne.n	8019276 <uxr_read_framed_msg+0xd6>
 80192da:	ee17 8a90 	vmov	r8, s15
 80192de:	459e      	cmp	lr, r3
 80192e0:	f040 8111 	bne.w	8019506 <uxr_read_framed_msg+0x366>
 80192e4:	2306      	movs	r3, #6
 80192e6:	7023      	strb	r3, [r4, #0]
 80192e8:	e76b      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 80192ea:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80192ee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80192f2:	4298      	cmp	r0, r3
 80192f4:	f000 80c2 	beq.w	801947c <uxr_read_framed_msg+0x2dc>
 80192f8:	18e2      	adds	r2, r4, r3
 80192fa:	7891      	ldrb	r1, [r2, #2]
 80192fc:	297d      	cmp	r1, #125	@ 0x7d
 80192fe:	f000 814c 	beq.w	801959a <uxr_read_framed_msg+0x3fa>
 8019302:	3301      	adds	r3, #1
 8019304:	085a      	lsrs	r2, r3, #1
 8019306:	fba5 0202 	umull	r0, r2, r5, r2
 801930a:	0892      	lsrs	r2, r2, #2
 801930c:	202a      	movs	r0, #42	@ 0x2a
 801930e:	fb00 3312 	mls	r3, r0, r2, r3
 8019312:	297e      	cmp	r1, #126	@ 0x7e
 8019314:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019318:	f000 81ca 	beq.w	80196b0 <uxr_read_framed_msg+0x510>
 801931c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801931e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019322:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019324:	b29b      	uxth	r3, r3
 8019326:	2000      	movs	r0, #0
 8019328:	428b      	cmp	r3, r1
 801932a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801932c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801932e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8019330:	f240 80df 	bls.w	80194f2 <uxr_read_framed_msg+0x352>
 8019334:	7020      	strb	r0, [r4, #0]
 8019336:	b003      	add	sp, #12
 8019338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8019340:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8019344:	4299      	cmp	r1, r3
 8019346:	f000 80a8 	beq.w	801949a <uxr_read_framed_msg+0x2fa>
 801934a:	18e2      	adds	r2, r4, r3
 801934c:	7890      	ldrb	r0, [r2, #2]
 801934e:	287d      	cmp	r0, #125	@ 0x7d
 8019350:	f000 8164 	beq.w	801961c <uxr_read_framed_msg+0x47c>
 8019354:	3301      	adds	r3, #1
 8019356:	085a      	lsrs	r2, r3, #1
 8019358:	fba5 1202 	umull	r1, r2, r5, r2
 801935c:	0892      	lsrs	r2, r2, #2
 801935e:	212a      	movs	r1, #42	@ 0x2a
 8019360:	fb01 3312 	mls	r3, r1, r2, r3
 8019364:	287e      	cmp	r0, #126	@ 0x7e
 8019366:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801936a:	f000 8191 	beq.w	8019690 <uxr_read_framed_msg+0x4f0>
 801936e:	2304      	movs	r3, #4
 8019370:	8620      	strh	r0, [r4, #48]	@ 0x30
 8019372:	7023      	strb	r3, [r4, #0]
 8019374:	e725      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 8019376:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801937a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801937e:	4290      	cmp	r0, r2
 8019380:	f000 80b3 	beq.w	80194ea <uxr_read_framed_msg+0x34a>
 8019384:	18a3      	adds	r3, r4, r2
 8019386:	7899      	ldrb	r1, [r3, #2]
 8019388:	297d      	cmp	r1, #125	@ 0x7d
 801938a:	f000 8164 	beq.w	8019656 <uxr_read_framed_msg+0x4b6>
 801938e:	3201      	adds	r2, #1
 8019390:	0850      	lsrs	r0, r2, #1
 8019392:	fba5 3000 	umull	r3, r0, r5, r0
 8019396:	0880      	lsrs	r0, r0, #2
 8019398:	232a      	movs	r3, #42	@ 0x2a
 801939a:	fb03 2210 	mls	r2, r3, r0, r2
 801939e:	297e      	cmp	r1, #126	@ 0x7e
 80193a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80193a4:	f000 8188 	beq.w	80196b8 <uxr_read_framed_msg+0x518>
 80193a8:	7863      	ldrb	r3, [r4, #1]
 80193aa:	428b      	cmp	r3, r1
 80193ac:	bf0c      	ite	eq
 80193ae:	2303      	moveq	r3, #3
 80193b0:	2300      	movne	r3, #0
 80193b2:	7023      	strb	r3, [r4, #0]
 80193b4:	e705      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 80193b6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80193ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80193be:	2200      	movs	r2, #0
 80193c0:	4299      	cmp	r1, r3
 80193c2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80193c6:	d06c      	beq.n	80194a2 <uxr_read_framed_msg+0x302>
 80193c8:	18e2      	adds	r2, r4, r3
 80193ca:	7890      	ldrb	r0, [r2, #2]
 80193cc:	287d      	cmp	r0, #125	@ 0x7d
 80193ce:	f000 8101 	beq.w	80195d4 <uxr_read_framed_msg+0x434>
 80193d2:	3301      	adds	r3, #1
 80193d4:	085a      	lsrs	r2, r3, #1
 80193d6:	fba5 1202 	umull	r1, r2, r5, r2
 80193da:	0892      	lsrs	r2, r2, #2
 80193dc:	212a      	movs	r1, #42	@ 0x2a
 80193de:	fb01 3312 	mls	r3, r1, r2, r3
 80193e2:	287e      	cmp	r0, #126	@ 0x7e
 80193e4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80193e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80193ec:	d059      	beq.n	80194a2 <uxr_read_framed_msg+0x302>
 80193ee:	2302      	movs	r3, #2
 80193f0:	7023      	strb	r3, [r4, #0]
 80193f2:	e6e6      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 80193f4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80193f8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80193fc:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8019400:	1c51      	adds	r1, r2, #1
 8019402:	084b      	lsrs	r3, r1, #1
 8019404:	fba5 c303 	umull	ip, r3, r5, r3
 8019408:	089b      	lsrs	r3, r3, #2
 801940a:	fb0e 1313 	mls	r3, lr, r3, r1
 801940e:	4592      	cmp	sl, r2
 8019410:	eb04 0002 	add.w	r0, r4, r2
 8019414:	b2da      	uxtb	r2, r3
 8019416:	f43f af04 	beq.w	8019222 <uxr_read_framed_msg+0x82>
 801941a:	7883      	ldrb	r3, [r0, #2]
 801941c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019420:	2b7e      	cmp	r3, #126	@ 0x7e
 8019422:	d1ed      	bne.n	8019400 <uxr_read_framed_msg+0x260>
 8019424:	2301      	movs	r3, #1
 8019426:	7023      	strb	r3, [r4, #0]
 8019428:	e6cb      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 801942a:	f100 0c01 	add.w	ip, r0, #1
 801942e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019432:	fba5 8202 	umull	r8, r2, r5, r2
 8019436:	0892      	lsrs	r2, r2, #2
 8019438:	fb01 c212 	mls	r2, r1, r2, ip
 801943c:	eb04 0c02 	add.w	ip, r4, r2
 8019440:	b2d2      	uxtb	r2, r2
 8019442:	4592      	cmp	sl, r2
 8019444:	f100 0002 	add.w	r0, r0, #2
 8019448:	f43f af47 	beq.w	80192da <uxr_read_framed_msg+0x13a>
 801944c:	0842      	lsrs	r2, r0, #1
 801944e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8019452:	fba5 8202 	umull	r8, r2, r5, r2
 8019456:	0892      	lsrs	r2, r2, #2
 8019458:	fb01 0012 	mls	r0, r1, r2, r0
 801945c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8019460:	f08a 0c20 	eor.w	ip, sl, #32
 8019464:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8019468:	f47f af11 	bne.w	801928e <uxr_read_framed_msg+0xee>
 801946c:	459e      	cmp	lr, r3
 801946e:	ee17 8a90 	vmov	r8, s15
 8019472:	f43f af37 	beq.w	80192e4 <uxr_read_framed_msg+0x144>
 8019476:	2301      	movs	r3, #1
 8019478:	7023      	strb	r3, [r4, #0]
 801947a:	e6a2      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 801947c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801947e:	9300      	str	r3, [sp, #0]
 8019480:	2301      	movs	r3, #1
 8019482:	9301      	str	r3, [sp, #4]
 8019484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019486:	464a      	mov	r2, r9
 8019488:	4641      	mov	r1, r8
 801948a:	4620      	mov	r0, r4
 801948c:	f7ff fe06 	bl	801909c <uxr_framing_read_transport>
 8019490:	2800      	cmp	r0, #0
 8019492:	f43f aec6 	beq.w	8019222 <uxr_read_framed_msg+0x82>
 8019496:	7823      	ldrb	r3, [r4, #0]
 8019498:	e693      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 801949a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801949c:	9300      	str	r3, [sp, #0]
 801949e:	2302      	movs	r3, #2
 80194a0:	e7ef      	b.n	8019482 <uxr_read_framed_msg+0x2e2>
 80194a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80194a4:	9300      	str	r3, [sp, #0]
 80194a6:	2304      	movs	r3, #4
 80194a8:	9301      	str	r3, [sp, #4]
 80194aa:	464a      	mov	r2, r9
 80194ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80194ae:	4641      	mov	r1, r8
 80194b0:	4620      	mov	r0, r4
 80194b2:	f7ff fdf3 	bl	801909c <uxr_framing_read_transport>
 80194b6:	2800      	cmp	r0, #0
 80194b8:	d1ed      	bne.n	8019496 <uxr_read_framed_msg+0x2f6>
 80194ba:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80194be:	2b7e      	cmp	r3, #126	@ 0x7e
 80194c0:	d0e9      	beq.n	8019496 <uxr_read_framed_msg+0x2f6>
 80194c2:	e6ae      	b.n	8019222 <uxr_read_framed_msg+0x82>
 80194c4:	30c30c31 	.word	0x30c30c31
 80194c8:	0801d5a8 	.word	0x0801d5a8
 80194cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80194ce:	9300      	str	r3, [sp, #0]
 80194d0:	2305      	movs	r3, #5
 80194d2:	9301      	str	r3, [sp, #4]
 80194d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80194d6:	f7ff fde1 	bl	801909c <uxr_framing_read_transport>
 80194da:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80194de:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80194e2:	429a      	cmp	r2, r3
 80194e4:	f43f ae9d 	beq.w	8019222 <uxr_read_framed_msg+0x82>
 80194e8:	e668      	b.n	80191bc <uxr_read_framed_msg+0x1c>
 80194ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80194ec:	9300      	str	r3, [sp, #0]
 80194ee:	2303      	movs	r3, #3
 80194f0:	e7c7      	b.n	8019482 <uxr_read_framed_msg+0x2e2>
 80194f2:	2305      	movs	r3, #5
 80194f4:	7023      	strb	r3, [r4, #0]
 80194f6:	e664      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 80194f8:	ee17 8a90 	vmov	r8, s15
 80194fc:	f43f aef2 	beq.w	80192e4 <uxr_read_framed_msg+0x144>
 8019500:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8019504:	d08e      	beq.n	8019424 <uxr_read_framed_msg+0x284>
 8019506:	ebae 0303 	sub.w	r3, lr, r3
 801950a:	3302      	adds	r3, #2
 801950c:	9301      	str	r3, [sp, #4]
 801950e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019510:	9300      	str	r3, [sp, #0]
 8019512:	e7b7      	b.n	8019484 <uxr_read_framed_msg+0x2e4>
 8019514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019516:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801951a:	7013      	strb	r3, [r2, #0]
 801951c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801951e:	b003      	add	sp, #12
 8019520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019524:	f103 0c01 	add.w	ip, r3, #1
 8019528:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801952c:	fba5 0202 	umull	r0, r2, r5, r2
 8019530:	0892      	lsrs	r2, r2, #2
 8019532:	202a      	movs	r0, #42	@ 0x2a
 8019534:	fb00 c212 	mls	r2, r0, r2, ip
 8019538:	fa5f fc82 	uxtb.w	ip, r2
 801953c:	4561      	cmp	r1, ip
 801953e:	d09d      	beq.n	801947c <uxr_read_framed_msg+0x2dc>
 8019540:	3302      	adds	r3, #2
 8019542:	4422      	add	r2, r4
 8019544:	0859      	lsrs	r1, r3, #1
 8019546:	7892      	ldrb	r2, [r2, #2]
 8019548:	fba5 c101 	umull	ip, r1, r5, r1
 801954c:	0889      	lsrs	r1, r1, #2
 801954e:	fb00 3311 	mls	r3, r0, r1, r3
 8019552:	2a7e      	cmp	r2, #126	@ 0x7e
 8019554:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019558:	f000 80aa 	beq.w	80196b0 <uxr_read_framed_msg+0x510>
 801955c:	f082 0220 	eor.w	r2, r2, #32
 8019560:	e654      	b.n	801920c <uxr_read_framed_msg+0x6c>
 8019562:	1c58      	adds	r0, r3, #1
 8019564:	0842      	lsrs	r2, r0, #1
 8019566:	fba5 c202 	umull	ip, r2, r5, r2
 801956a:	0892      	lsrs	r2, r2, #2
 801956c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019570:	fb0c 0212 	mls	r2, ip, r2, r0
 8019574:	b2d0      	uxtb	r0, r2
 8019576:	4281      	cmp	r1, r0
 8019578:	d08f      	beq.n	801949a <uxr_read_framed_msg+0x2fa>
 801957a:	4422      	add	r2, r4
 801957c:	3302      	adds	r3, #2
 801957e:	7890      	ldrb	r0, [r2, #2]
 8019580:	085a      	lsrs	r2, r3, #1
 8019582:	fba5 1202 	umull	r1, r2, r5, r2
 8019586:	0892      	lsrs	r2, r2, #2
 8019588:	fb0c 3312 	mls	r3, ip, r2, r3
 801958c:	287e      	cmp	r0, #126	@ 0x7e
 801958e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8019592:	d07d      	beq.n	8019690 <uxr_read_framed_msg+0x4f0>
 8019594:	f080 0020 	eor.w	r0, r0, #32
 8019598:	e660      	b.n	801925c <uxr_read_framed_msg+0xbc>
 801959a:	1c59      	adds	r1, r3, #1
 801959c:	084a      	lsrs	r2, r1, #1
 801959e:	fba5 c202 	umull	ip, r2, r5, r2
 80195a2:	0892      	lsrs	r2, r2, #2
 80195a4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80195a8:	fb0c 1212 	mls	r2, ip, r2, r1
 80195ac:	b2d1      	uxtb	r1, r2
 80195ae:	4288      	cmp	r0, r1
 80195b0:	f43f af64 	beq.w	801947c <uxr_read_framed_msg+0x2dc>
 80195b4:	4422      	add	r2, r4
 80195b6:	3302      	adds	r3, #2
 80195b8:	7891      	ldrb	r1, [r2, #2]
 80195ba:	085a      	lsrs	r2, r3, #1
 80195bc:	fba5 0202 	umull	r0, r2, r5, r2
 80195c0:	0892      	lsrs	r2, r2, #2
 80195c2:	fb0c 3312 	mls	r3, ip, r2, r3
 80195c6:	297e      	cmp	r1, #126	@ 0x7e
 80195c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80195cc:	d070      	beq.n	80196b0 <uxr_read_framed_msg+0x510>
 80195ce:	f081 0120 	eor.w	r1, r1, #32
 80195d2:	e6a3      	b.n	801931c <uxr_read_framed_msg+0x17c>
 80195d4:	f103 0c01 	add.w	ip, r3, #1
 80195d8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80195dc:	fba5 0202 	umull	r0, r2, r5, r2
 80195e0:	0892      	lsrs	r2, r2, #2
 80195e2:	202a      	movs	r0, #42	@ 0x2a
 80195e4:	fb00 c212 	mls	r2, r0, r2, ip
 80195e8:	fa5f fc82 	uxtb.w	ip, r2
 80195ec:	4561      	cmp	r1, ip
 80195ee:	f43f af58 	beq.w	80194a2 <uxr_read_framed_msg+0x302>
 80195f2:	4422      	add	r2, r4
 80195f4:	3302      	adds	r3, #2
 80195f6:	7891      	ldrb	r1, [r2, #2]
 80195f8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80195fc:	085a      	lsrs	r2, r3, #1
 80195fe:	fba5 c202 	umull	ip, r2, r5, r2
 8019602:	0892      	lsrs	r2, r2, #2
 8019604:	fb00 3312 	mls	r3, r0, r2, r3
 8019608:	297e      	cmp	r1, #126	@ 0x7e
 801960a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801960e:	f43f af48 	beq.w	80194a2 <uxr_read_framed_msg+0x302>
 8019612:	f081 0120 	eor.w	r1, r1, #32
 8019616:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801961a:	e6e8      	b.n	80193ee <uxr_read_framed_msg+0x24e>
 801961c:	1c58      	adds	r0, r3, #1
 801961e:	0842      	lsrs	r2, r0, #1
 8019620:	fba5 c202 	umull	ip, r2, r5, r2
 8019624:	0892      	lsrs	r2, r2, #2
 8019626:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801962a:	fb0c 0212 	mls	r2, ip, r2, r0
 801962e:	b2d0      	uxtb	r0, r2
 8019630:	4281      	cmp	r1, r0
 8019632:	f43f af32 	beq.w	801949a <uxr_read_framed_msg+0x2fa>
 8019636:	4422      	add	r2, r4
 8019638:	3302      	adds	r3, #2
 801963a:	7890      	ldrb	r0, [r2, #2]
 801963c:	085a      	lsrs	r2, r3, #1
 801963e:	fba5 1202 	umull	r1, r2, r5, r2
 8019642:	0892      	lsrs	r2, r2, #2
 8019644:	fb0c 3312 	mls	r3, ip, r2, r3
 8019648:	287e      	cmp	r0, #126	@ 0x7e
 801964a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801964e:	d01f      	beq.n	8019690 <uxr_read_framed_msg+0x4f0>
 8019650:	f080 0020 	eor.w	r0, r0, #32
 8019654:	e68b      	b.n	801936e <uxr_read_framed_msg+0x1ce>
 8019656:	1c51      	adds	r1, r2, #1
 8019658:	084b      	lsrs	r3, r1, #1
 801965a:	fba5 c303 	umull	ip, r3, r5, r3
 801965e:	089b      	lsrs	r3, r3, #2
 8019660:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8019664:	fb0c 1313 	mls	r3, ip, r3, r1
 8019668:	b2d9      	uxtb	r1, r3
 801966a:	4288      	cmp	r0, r1
 801966c:	f43f af3d 	beq.w	80194ea <uxr_read_framed_msg+0x34a>
 8019670:	3202      	adds	r2, #2
 8019672:	4423      	add	r3, r4
 8019674:	0850      	lsrs	r0, r2, #1
 8019676:	789b      	ldrb	r3, [r3, #2]
 8019678:	fba5 1000 	umull	r1, r0, r5, r0
 801967c:	0880      	lsrs	r0, r0, #2
 801967e:	fb0c 2210 	mls	r2, ip, r0, r2
 8019682:	2b7e      	cmp	r3, #126	@ 0x7e
 8019684:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8019688:	d016      	beq.n	80196b8 <uxr_read_framed_msg+0x518>
 801968a:	f083 0120 	eor.w	r1, r3, #32
 801968e:	e68b      	b.n	80193a8 <uxr_read_framed_msg+0x208>
 8019690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019692:	9300      	str	r3, [sp, #0]
 8019694:	2302      	movs	r3, #2
 8019696:	9301      	str	r3, [sp, #4]
 8019698:	464a      	mov	r2, r9
 801969a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801969c:	4641      	mov	r1, r8
 801969e:	4620      	mov	r0, r4
 80196a0:	f7ff fcfc 	bl	801909c <uxr_framing_read_transport>
 80196a4:	2800      	cmp	r0, #0
 80196a6:	f47f aef6 	bne.w	8019496 <uxr_read_framed_msg+0x2f6>
 80196aa:	2301      	movs	r3, #1
 80196ac:	7023      	strb	r3, [r4, #0]
 80196ae:	e588      	b.n	80191c2 <uxr_read_framed_msg+0x22>
 80196b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80196b2:	9300      	str	r3, [sp, #0]
 80196b4:	2301      	movs	r3, #1
 80196b6:	e7ee      	b.n	8019696 <uxr_read_framed_msg+0x4f6>
 80196b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80196ba:	9300      	str	r3, [sp, #0]
 80196bc:	2303      	movs	r3, #3
 80196be:	e7ea      	b.n	8019696 <uxr_read_framed_msg+0x4f6>
 80196c0:	ee17 8a90 	vmov	r8, s15
 80196c4:	e6ae      	b.n	8019424 <uxr_read_framed_msg+0x284>
 80196c6:	bf00      	nop

080196c8 <rcl_get_default_domain_id>:
 80196c8:	b530      	push	{r4, r5, lr}
 80196ca:	b083      	sub	sp, #12
 80196cc:	2300      	movs	r3, #0
 80196ce:	9300      	str	r3, [sp, #0]
 80196d0:	b1d0      	cbz	r0, 8019708 <rcl_get_default_domain_id+0x40>
 80196d2:	4604      	mov	r4, r0
 80196d4:	4669      	mov	r1, sp
 80196d6:	4815      	ldr	r0, [pc, #84]	@ (801972c <rcl_get_default_domain_id+0x64>)
 80196d8:	f7fc fc1e 	bl	8015f18 <rcutils_get_env>
 80196dc:	4602      	mov	r2, r0
 80196de:	b110      	cbz	r0, 80196e6 <rcl_get_default_domain_id+0x1e>
 80196e0:	2001      	movs	r0, #1
 80196e2:	b003      	add	sp, #12
 80196e4:	bd30      	pop	{r4, r5, pc}
 80196e6:	9b00      	ldr	r3, [sp, #0]
 80196e8:	b18b      	cbz	r3, 801970e <rcl_get_default_domain_id+0x46>
 80196ea:	7818      	ldrb	r0, [r3, #0]
 80196ec:	2800      	cmp	r0, #0
 80196ee:	d0f8      	beq.n	80196e2 <rcl_get_default_domain_id+0x1a>
 80196f0:	a901      	add	r1, sp, #4
 80196f2:	4618      	mov	r0, r3
 80196f4:	9201      	str	r2, [sp, #4]
 80196f6:	f001 fa3f 	bl	801ab78 <strtoul>
 80196fa:	4605      	mov	r5, r0
 80196fc:	b150      	cbz	r0, 8019714 <rcl_get_default_domain_id+0x4c>
 80196fe:	1c43      	adds	r3, r0, #1
 8019700:	d00d      	beq.n	801971e <rcl_get_default_domain_id+0x56>
 8019702:	6025      	str	r5, [r4, #0]
 8019704:	2000      	movs	r0, #0
 8019706:	e7ec      	b.n	80196e2 <rcl_get_default_domain_id+0x1a>
 8019708:	200b      	movs	r0, #11
 801970a:	b003      	add	sp, #12
 801970c:	bd30      	pop	{r4, r5, pc}
 801970e:	4618      	mov	r0, r3
 8019710:	b003      	add	sp, #12
 8019712:	bd30      	pop	{r4, r5, pc}
 8019714:	9b01      	ldr	r3, [sp, #4]
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d0f2      	beq.n	8019702 <rcl_get_default_domain_id+0x3a>
 801971c:	e7e0      	b.n	80196e0 <rcl_get_default_domain_id+0x18>
 801971e:	f001 fce7 	bl	801b0f0 <__errno>
 8019722:	6803      	ldr	r3, [r0, #0]
 8019724:	2b22      	cmp	r3, #34	@ 0x22
 8019726:	d1ec      	bne.n	8019702 <rcl_get_default_domain_id+0x3a>
 8019728:	e7da      	b.n	80196e0 <rcl_get_default_domain_id+0x18>
 801972a:	bf00      	nop
 801972c:	0801d7a8 	.word	0x0801d7a8

08019730 <rcl_expand_topic_name>:
 8019730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019734:	b08b      	sub	sp, #44	@ 0x2c
 8019736:	9306      	str	r3, [sp, #24]
 8019738:	2800      	cmp	r0, #0
 801973a:	f000 80ad 	beq.w	8019898 <rcl_expand_topic_name+0x168>
 801973e:	460e      	mov	r6, r1
 8019740:	2900      	cmp	r1, #0
 8019742:	f000 80a9 	beq.w	8019898 <rcl_expand_topic_name+0x168>
 8019746:	4617      	mov	r7, r2
 8019748:	2a00      	cmp	r2, #0
 801974a:	f000 80a5 	beq.w	8019898 <rcl_expand_topic_name+0x168>
 801974e:	2b00      	cmp	r3, #0
 8019750:	f000 80a2 	beq.w	8019898 <rcl_expand_topic_name+0x168>
 8019754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019756:	2b00      	cmp	r3, #0
 8019758:	f000 809e 	beq.w	8019898 <rcl_expand_topic_name+0x168>
 801975c:	2200      	movs	r2, #0
 801975e:	a909      	add	r1, sp, #36	@ 0x24
 8019760:	4680      	mov	r8, r0
 8019762:	f000 f9fb 	bl	8019b5c <rcl_validate_topic_name>
 8019766:	4604      	mov	r4, r0
 8019768:	2800      	cmp	r0, #0
 801976a:	f040 8096 	bne.w	801989a <rcl_expand_topic_name+0x16a>
 801976e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019770:	2b00      	cmp	r3, #0
 8019772:	f040 809a 	bne.w	80198aa <rcl_expand_topic_name+0x17a>
 8019776:	4602      	mov	r2, r0
 8019778:	a909      	add	r1, sp, #36	@ 0x24
 801977a:	4630      	mov	r0, r6
 801977c:	f7fd f82a 	bl	80167d4 <rmw_validate_node_name>
 8019780:	2800      	cmp	r0, #0
 8019782:	f040 808e 	bne.w	80198a2 <rcl_expand_topic_name+0x172>
 8019786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019788:	2a00      	cmp	r2, #0
 801978a:	f040 8093 	bne.w	80198b4 <rcl_expand_topic_name+0x184>
 801978e:	a909      	add	r1, sp, #36	@ 0x24
 8019790:	4638      	mov	r0, r7
 8019792:	f7fd f801 	bl	8016798 <rmw_validate_namespace>
 8019796:	2800      	cmp	r0, #0
 8019798:	f040 8083 	bne.w	80198a2 <rcl_expand_topic_name+0x172>
 801979c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801979e:	2c00      	cmp	r4, #0
 80197a0:	f040 80ed 	bne.w	801997e <rcl_expand_topic_name+0x24e>
 80197a4:	217b      	movs	r1, #123	@ 0x7b
 80197a6:	4640      	mov	r0, r8
 80197a8:	f001 fc08 	bl	801afbc <strchr>
 80197ac:	f898 3000 	ldrb.w	r3, [r8]
 80197b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80197b2:	4605      	mov	r5, r0
 80197b4:	f000 809e 	beq.w	80198f4 <rcl_expand_topic_name+0x1c4>
 80197b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80197ba:	f040 80a2 	bne.w	8019902 <rcl_expand_topic_name+0x1d2>
 80197be:	4638      	mov	r0, r7
 80197c0:	f7e6 fd1e 	bl	8000200 <strlen>
 80197c4:	4a82      	ldr	r2, [pc, #520]	@ (80199d0 <rcl_expand_topic_name+0x2a0>)
 80197c6:	4b83      	ldr	r3, [pc, #524]	@ (80199d4 <rcl_expand_topic_name+0x2a4>)
 80197c8:	2801      	cmp	r0, #1
 80197ca:	bf18      	it	ne
 80197cc:	4613      	movne	r3, r2
 80197ce:	9302      	str	r3, [sp, #8]
 80197d0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80197d2:	9300      	str	r3, [sp, #0]
 80197d4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80197d8:	f108 0301 	add.w	r3, r8, #1
 80197dc:	9305      	str	r3, [sp, #20]
 80197de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80197e2:	9301      	str	r3, [sp, #4]
 80197e4:	ab14      	add	r3, sp, #80	@ 0x50
 80197e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80197e8:	f7fc fbbe 	bl	8015f68 <rcutils_format_string_limit>
 80197ec:	4682      	mov	sl, r0
 80197ee:	2800      	cmp	r0, #0
 80197f0:	f000 80c7 	beq.w	8019982 <rcl_expand_topic_name+0x252>
 80197f4:	2d00      	cmp	r5, #0
 80197f6:	f000 80a2 	beq.w	801993e <rcl_expand_topic_name+0x20e>
 80197fa:	217b      	movs	r1, #123	@ 0x7b
 80197fc:	f001 fbde 	bl	801afbc <strchr>
 8019800:	46d1      	mov	r9, sl
 8019802:	4605      	mov	r5, r0
 8019804:	9407      	str	r4, [sp, #28]
 8019806:	46d3      	mov	fp, sl
 8019808:	464c      	mov	r4, r9
 801980a:	2d00      	cmp	r5, #0
 801980c:	f000 80be 	beq.w	801998c <rcl_expand_topic_name+0x25c>
 8019810:	217d      	movs	r1, #125	@ 0x7d
 8019812:	4620      	mov	r0, r4
 8019814:	f001 fbd2 	bl	801afbc <strchr>
 8019818:	eba0 0905 	sub.w	r9, r0, r5
 801981c:	f109 0a01 	add.w	sl, r9, #1
 8019820:	486d      	ldr	r0, [pc, #436]	@ (80199d8 <rcl_expand_topic_name+0x2a8>)
 8019822:	4652      	mov	r2, sl
 8019824:	4629      	mov	r1, r5
 8019826:	f001 fbd6 	bl	801afd6 <strncmp>
 801982a:	2800      	cmp	r0, #0
 801982c:	d067      	beq.n	80198fe <rcl_expand_topic_name+0x1ce>
 801982e:	486b      	ldr	r0, [pc, #428]	@ (80199dc <rcl_expand_topic_name+0x2ac>)
 8019830:	4652      	mov	r2, sl
 8019832:	4629      	mov	r1, r5
 8019834:	f001 fbcf 	bl	801afd6 <strncmp>
 8019838:	b130      	cbz	r0, 8019848 <rcl_expand_topic_name+0x118>
 801983a:	4869      	ldr	r0, [pc, #420]	@ (80199e0 <rcl_expand_topic_name+0x2b0>)
 801983c:	4652      	mov	r2, sl
 801983e:	4629      	mov	r1, r5
 8019840:	f001 fbc9 	bl	801afd6 <strncmp>
 8019844:	2800      	cmp	r0, #0
 8019846:	d137      	bne.n	80198b8 <rcl_expand_topic_name+0x188>
 8019848:	46b9      	mov	r9, r7
 801984a:	ab16      	add	r3, sp, #88	@ 0x58
 801984c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019850:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019854:	ab14      	add	r3, sp, #80	@ 0x50
 8019856:	4628      	mov	r0, r5
 8019858:	cb0c      	ldmia	r3, {r2, r3}
 801985a:	4651      	mov	r1, sl
 801985c:	f7fc fcc0 	bl	80161e0 <rcutils_strndup>
 8019860:	4605      	mov	r5, r0
 8019862:	2800      	cmp	r0, #0
 8019864:	f000 809c 	beq.w	80199a0 <rcl_expand_topic_name+0x270>
 8019868:	464a      	mov	r2, r9
 801986a:	4620      	mov	r0, r4
 801986c:	ab14      	add	r3, sp, #80	@ 0x50
 801986e:	4629      	mov	r1, r5
 8019870:	f7fc fbb4 	bl	8015fdc <rcutils_repl_str>
 8019874:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019876:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019878:	4604      	mov	r4, r0
 801987a:	4628      	mov	r0, r5
 801987c:	4798      	blx	r3
 801987e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019880:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019882:	4658      	mov	r0, fp
 8019884:	4798      	blx	r3
 8019886:	2c00      	cmp	r4, #0
 8019888:	d07b      	beq.n	8019982 <rcl_expand_topic_name+0x252>
 801988a:	217b      	movs	r1, #123	@ 0x7b
 801988c:	4620      	mov	r0, r4
 801988e:	f001 fb95 	bl	801afbc <strchr>
 8019892:	46a3      	mov	fp, r4
 8019894:	4605      	mov	r5, r0
 8019896:	e7b8      	b.n	801980a <rcl_expand_topic_name+0xda>
 8019898:	240b      	movs	r4, #11
 801989a:	4620      	mov	r0, r4
 801989c:	b00b      	add	sp, #44	@ 0x2c
 801989e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198a2:	f7f9 fce7 	bl	8013274 <rcl_convert_rmw_ret_to_rcl_ret>
 80198a6:	4604      	mov	r4, r0
 80198a8:	e7f7      	b.n	801989a <rcl_expand_topic_name+0x16a>
 80198aa:	2467      	movs	r4, #103	@ 0x67
 80198ac:	4620      	mov	r0, r4
 80198ae:	b00b      	add	sp, #44	@ 0x2c
 80198b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198b4:	24c9      	movs	r4, #201	@ 0xc9
 80198b6:	e7f0      	b.n	801989a <rcl_expand_topic_name+0x16a>
 80198b8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80198bc:	9806      	ldr	r0, [sp, #24]
 80198be:	1c69      	adds	r1, r5, #1
 80198c0:	f7fc fda8 	bl	8016414 <rcutils_string_map_getn>
 80198c4:	4681      	mov	r9, r0
 80198c6:	2800      	cmp	r0, #0
 80198c8:	d1bf      	bne.n	801984a <rcl_expand_topic_name+0x11a>
 80198ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80198cc:	aa16      	add	r2, sp, #88	@ 0x58
 80198ce:	6018      	str	r0, [r3, #0]
 80198d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80198d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80198d6:	ab14      	add	r3, sp, #80	@ 0x50
 80198d8:	cb0c      	ldmia	r3, {r2, r3}
 80198da:	4651      	mov	r1, sl
 80198dc:	4628      	mov	r0, r5
 80198de:	f7fc fc7f 	bl	80161e0 <rcutils_strndup>
 80198e2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80198e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80198e6:	4798      	blx	r3
 80198e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80198ea:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80198ec:	4658      	mov	r0, fp
 80198ee:	2469      	movs	r4, #105	@ 0x69
 80198f0:	4798      	blx	r3
 80198f2:	e7d2      	b.n	801989a <rcl_expand_topic_name+0x16a>
 80198f4:	2800      	cmp	r0, #0
 80198f6:	d05b      	beq.n	80199b0 <rcl_expand_topic_name+0x280>
 80198f8:	46c1      	mov	r9, r8
 80198fa:	46a2      	mov	sl, r4
 80198fc:	e782      	b.n	8019804 <rcl_expand_topic_name+0xd4>
 80198fe:	46b1      	mov	r9, r6
 8019900:	e7a3      	b.n	801984a <rcl_expand_topic_name+0x11a>
 8019902:	2800      	cmp	r0, #0
 8019904:	d1f8      	bne.n	80198f8 <rcl_expand_topic_name+0x1c8>
 8019906:	4638      	mov	r0, r7
 8019908:	f7e6 fc7a 	bl	8000200 <strlen>
 801990c:	4a35      	ldr	r2, [pc, #212]	@ (80199e4 <rcl_expand_topic_name+0x2b4>)
 801990e:	4b36      	ldr	r3, [pc, #216]	@ (80199e8 <rcl_expand_topic_name+0x2b8>)
 8019910:	f8cd 8010 	str.w	r8, [sp, #16]
 8019914:	2801      	cmp	r0, #1
 8019916:	bf18      	it	ne
 8019918:	4613      	movne	r3, r2
 801991a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801991e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019922:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019924:	9703      	str	r7, [sp, #12]
 8019926:	9200      	str	r2, [sp, #0]
 8019928:	ab14      	add	r3, sp, #80	@ 0x50
 801992a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801992c:	f7fc fb1c 	bl	8015f68 <rcutils_format_string_limit>
 8019930:	4682      	mov	sl, r0
 8019932:	4653      	mov	r3, sl
 8019934:	b32b      	cbz	r3, 8019982 <rcl_expand_topic_name+0x252>
 8019936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019938:	f8c3 a000 	str.w	sl, [r3]
 801993c:	e7ad      	b.n	801989a <rcl_expand_topic_name+0x16a>
 801993e:	f89a 3000 	ldrb.w	r3, [sl]
 8019942:	2b2f      	cmp	r3, #47	@ 0x2f
 8019944:	d0f7      	beq.n	8019936 <rcl_expand_topic_name+0x206>
 8019946:	4638      	mov	r0, r7
 8019948:	f7e6 fc5a 	bl	8000200 <strlen>
 801994c:	4a25      	ldr	r2, [pc, #148]	@ (80199e4 <rcl_expand_topic_name+0x2b4>)
 801994e:	4b26      	ldr	r3, [pc, #152]	@ (80199e8 <rcl_expand_topic_name+0x2b8>)
 8019950:	f8cd a010 	str.w	sl, [sp, #16]
 8019954:	2801      	cmp	r0, #1
 8019956:	bf18      	it	ne
 8019958:	4613      	movne	r3, r2
 801995a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801995e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019962:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019964:	9703      	str	r7, [sp, #12]
 8019966:	9200      	str	r2, [sp, #0]
 8019968:	ab14      	add	r3, sp, #80	@ 0x50
 801996a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801996c:	f7fc fafc 	bl	8015f68 <rcutils_format_string_limit>
 8019970:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019972:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019974:	4605      	mov	r5, r0
 8019976:	4650      	mov	r0, sl
 8019978:	4798      	blx	r3
 801997a:	46aa      	mov	sl, r5
 801997c:	e7d9      	b.n	8019932 <rcl_expand_topic_name+0x202>
 801997e:	24ca      	movs	r4, #202	@ 0xca
 8019980:	e78b      	b.n	801989a <rcl_expand_topic_name+0x16a>
 8019982:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019984:	2300      	movs	r3, #0
 8019986:	6013      	str	r3, [r2, #0]
 8019988:	240a      	movs	r4, #10
 801998a:	e786      	b.n	801989a <rcl_expand_topic_name+0x16a>
 801998c:	465b      	mov	r3, fp
 801998e:	9c07      	ldr	r4, [sp, #28]
 8019990:	46da      	mov	sl, fp
 8019992:	2b00      	cmp	r3, #0
 8019994:	d1d3      	bne.n	801993e <rcl_expand_topic_name+0x20e>
 8019996:	f898 3000 	ldrb.w	r3, [r8]
 801999a:	2b2f      	cmp	r3, #47	@ 0x2f
 801999c:	d0cb      	beq.n	8019936 <rcl_expand_topic_name+0x206>
 801999e:	e7b2      	b.n	8019906 <rcl_expand_topic_name+0x1d6>
 80199a0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80199a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80199a6:	6015      	str	r5, [r2, #0]
 80199a8:	4658      	mov	r0, fp
 80199aa:	4798      	blx	r3
 80199ac:	240a      	movs	r4, #10
 80199ae:	e774      	b.n	801989a <rcl_expand_topic_name+0x16a>
 80199b0:	ab17      	add	r3, sp, #92	@ 0x5c
 80199b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80199b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80199ba:	ab14      	add	r3, sp, #80	@ 0x50
 80199bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80199be:	4640      	mov	r0, r8
 80199c0:	f7fc fbec 	bl	801619c <rcutils_strdup>
 80199c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80199c6:	2800      	cmp	r0, #0
 80199c8:	6018      	str	r0, [r3, #0]
 80199ca:	bf08      	it	eq
 80199cc:	240a      	moveq	r4, #10
 80199ce:	e764      	b.n	801989a <rcl_expand_topic_name+0x16a>
 80199d0:	0801d7b8 	.word	0x0801d7b8
 80199d4:	0801c928 	.word	0x0801c928
 80199d8:	0801d7c0 	.word	0x0801d7c0
 80199dc:	0801d7c8 	.word	0x0801d7c8
 80199e0:	0801d7d0 	.word	0x0801d7d0
 80199e4:	0801cfbc 	.word	0x0801cfbc
 80199e8:	0801c938 	.word	0x0801c938

080199ec <rcl_get_default_topic_name_substitutions>:
 80199ec:	2800      	cmp	r0, #0
 80199ee:	bf0c      	ite	eq
 80199f0:	200b      	moveq	r0, #11
 80199f2:	2000      	movne	r0, #0
 80199f4:	4770      	bx	lr
 80199f6:	bf00      	nop

080199f8 <rcl_get_zero_initialized_guard_condition>:
 80199f8:	4a03      	ldr	r2, [pc, #12]	@ (8019a08 <rcl_get_zero_initialized_guard_condition+0x10>)
 80199fa:	4603      	mov	r3, r0
 80199fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a00:	e883 0003 	stmia.w	r3, {r0, r1}
 8019a04:	4618      	mov	r0, r3
 8019a06:	4770      	bx	lr
 8019a08:	0801d7dc 	.word	0x0801d7dc

08019a0c <rcl_guard_condition_init_from_rmw>:
 8019a0c:	b082      	sub	sp, #8
 8019a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a12:	b086      	sub	sp, #24
 8019a14:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8019a18:	4604      	mov	r4, r0
 8019a1a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019a1e:	460e      	mov	r6, r1
 8019a20:	4617      	mov	r7, r2
 8019a22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019a26:	f10d 0e04 	add.w	lr, sp, #4
 8019a2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019a2e:	f8dc 3000 	ldr.w	r3, [ip]
 8019a32:	f8ce 3000 	str.w	r3, [lr]
 8019a36:	a801      	add	r0, sp, #4
 8019a38:	f7f2 ffea 	bl	800ca10 <rcutils_allocator_is_valid>
 8019a3c:	b350      	cbz	r0, 8019a94 <rcl_guard_condition_init_from_rmw+0x88>
 8019a3e:	b34c      	cbz	r4, 8019a94 <rcl_guard_condition_init_from_rmw+0x88>
 8019a40:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019a44:	f1b8 0f00 	cmp.w	r8, #0
 8019a48:	d11e      	bne.n	8019a88 <rcl_guard_condition_init_from_rmw+0x7c>
 8019a4a:	b31f      	cbz	r7, 8019a94 <rcl_guard_condition_init_from_rmw+0x88>
 8019a4c:	4638      	mov	r0, r7
 8019a4e:	f7f9 fc2f 	bl	80132b0 <rcl_context_is_valid>
 8019a52:	b328      	cbz	r0, 8019aa0 <rcl_guard_condition_init_from_rmw+0x94>
 8019a54:	9b01      	ldr	r3, [sp, #4]
 8019a56:	9905      	ldr	r1, [sp, #20]
 8019a58:	201c      	movs	r0, #28
 8019a5a:	4798      	blx	r3
 8019a5c:	4605      	mov	r5, r0
 8019a5e:	6060      	str	r0, [r4, #4]
 8019a60:	b358      	cbz	r0, 8019aba <rcl_guard_condition_init_from_rmw+0xae>
 8019a62:	b1fe      	cbz	r6, 8019aa4 <rcl_guard_condition_init_from_rmw+0x98>
 8019a64:	6006      	str	r6, [r0, #0]
 8019a66:	f880 8004 	strb.w	r8, [r0, #4]
 8019a6a:	ac01      	add	r4, sp, #4
 8019a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a6e:	f105 0c08 	add.w	ip, r5, #8
 8019a72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a76:	6823      	ldr	r3, [r4, #0]
 8019a78:	f8cc 3000 	str.w	r3, [ip]
 8019a7c:	2000      	movs	r0, #0
 8019a7e:	b006      	add	sp, #24
 8019a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a84:	b002      	add	sp, #8
 8019a86:	4770      	bx	lr
 8019a88:	2064      	movs	r0, #100	@ 0x64
 8019a8a:	b006      	add	sp, #24
 8019a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a90:	b002      	add	sp, #8
 8019a92:	4770      	bx	lr
 8019a94:	200b      	movs	r0, #11
 8019a96:	b006      	add	sp, #24
 8019a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a9c:	b002      	add	sp, #8
 8019a9e:	4770      	bx	lr
 8019aa0:	2065      	movs	r0, #101	@ 0x65
 8019aa2:	e7f2      	b.n	8019a8a <rcl_guard_condition_init_from_rmw+0x7e>
 8019aa4:	6838      	ldr	r0, [r7, #0]
 8019aa6:	3028      	adds	r0, #40	@ 0x28
 8019aa8:	f000 fa3a 	bl	8019f20 <rmw_create_guard_condition>
 8019aac:	6028      	str	r0, [r5, #0]
 8019aae:	6865      	ldr	r5, [r4, #4]
 8019ab0:	682e      	ldr	r6, [r5, #0]
 8019ab2:	b126      	cbz	r6, 8019abe <rcl_guard_condition_init_from_rmw+0xb2>
 8019ab4:	2301      	movs	r3, #1
 8019ab6:	712b      	strb	r3, [r5, #4]
 8019ab8:	e7d7      	b.n	8019a6a <rcl_guard_condition_init_from_rmw+0x5e>
 8019aba:	200a      	movs	r0, #10
 8019abc:	e7e5      	b.n	8019a8a <rcl_guard_condition_init_from_rmw+0x7e>
 8019abe:	4628      	mov	r0, r5
 8019ac0:	9b02      	ldr	r3, [sp, #8]
 8019ac2:	9905      	ldr	r1, [sp, #20]
 8019ac4:	4798      	blx	r3
 8019ac6:	6066      	str	r6, [r4, #4]
 8019ac8:	2001      	movs	r0, #1
 8019aca:	e7de      	b.n	8019a8a <rcl_guard_condition_init_from_rmw+0x7e>

08019acc <rcl_guard_condition_fini>:
 8019acc:	b570      	push	{r4, r5, r6, lr}
 8019ace:	b082      	sub	sp, #8
 8019ad0:	b1f0      	cbz	r0, 8019b10 <rcl_guard_condition_fini+0x44>
 8019ad2:	6843      	ldr	r3, [r0, #4]
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	b163      	cbz	r3, 8019af2 <rcl_guard_condition_fini+0x26>
 8019ad8:	6818      	ldr	r0, [r3, #0]
 8019ada:	68de      	ldr	r6, [r3, #12]
 8019adc:	6999      	ldr	r1, [r3, #24]
 8019ade:	b160      	cbz	r0, 8019afa <rcl_guard_condition_fini+0x2e>
 8019ae0:	791d      	ldrb	r5, [r3, #4]
 8019ae2:	b965      	cbnz	r5, 8019afe <rcl_guard_condition_fini+0x32>
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	47b0      	blx	r6
 8019ae8:	2300      	movs	r3, #0
 8019aea:	4628      	mov	r0, r5
 8019aec:	6063      	str	r3, [r4, #4]
 8019aee:	b002      	add	sp, #8
 8019af0:	bd70      	pop	{r4, r5, r6, pc}
 8019af2:	461d      	mov	r5, r3
 8019af4:	4628      	mov	r0, r5
 8019af6:	b002      	add	sp, #8
 8019af8:	bd70      	pop	{r4, r5, r6, pc}
 8019afa:	4605      	mov	r5, r0
 8019afc:	e7f2      	b.n	8019ae4 <rcl_guard_condition_fini+0x18>
 8019afe:	9101      	str	r1, [sp, #4]
 8019b00:	f000 fa22 	bl	8019f48 <rmw_destroy_guard_condition>
 8019b04:	1e05      	subs	r5, r0, #0
 8019b06:	6863      	ldr	r3, [r4, #4]
 8019b08:	9901      	ldr	r1, [sp, #4]
 8019b0a:	bf18      	it	ne
 8019b0c:	2501      	movne	r5, #1
 8019b0e:	e7e9      	b.n	8019ae4 <rcl_guard_condition_fini+0x18>
 8019b10:	250b      	movs	r5, #11
 8019b12:	4628      	mov	r0, r5
 8019b14:	b002      	add	sp, #8
 8019b16:	bd70      	pop	{r4, r5, r6, pc}

08019b18 <rcl_guard_condition_get_default_options>:
 8019b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b1a:	b087      	sub	sp, #28
 8019b1c:	4606      	mov	r6, r0
 8019b1e:	4668      	mov	r0, sp
 8019b20:	f7f2 ff68 	bl	800c9f4 <rcutils_get_default_allocator>
 8019b24:	4b09      	ldr	r3, [pc, #36]	@ (8019b4c <rcl_guard_condition_get_default_options+0x34>)
 8019b26:	46ee      	mov	lr, sp
 8019b28:	469c      	mov	ip, r3
 8019b2a:	461d      	mov	r5, r3
 8019b2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019b30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b36:	4634      	mov	r4, r6
 8019b38:	f8de 7000 	ldr.w	r7, [lr]
 8019b3c:	f8cc 7000 	str.w	r7, [ip]
 8019b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b42:	4630      	mov	r0, r6
 8019b44:	6027      	str	r7, [r4, #0]
 8019b46:	b007      	add	sp, #28
 8019b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b4a:	bf00      	nop
 8019b4c:	20015f2c 	.word	0x20015f2c

08019b50 <rcl_guard_condition_get_rmw_handle>:
 8019b50:	b110      	cbz	r0, 8019b58 <rcl_guard_condition_get_rmw_handle+0x8>
 8019b52:	6840      	ldr	r0, [r0, #4]
 8019b54:	b100      	cbz	r0, 8019b58 <rcl_guard_condition_get_rmw_handle+0x8>
 8019b56:	6800      	ldr	r0, [r0, #0]
 8019b58:	4770      	bx	lr
 8019b5a:	bf00      	nop

08019b5c <rcl_validate_topic_name>:
 8019b5c:	2800      	cmp	r0, #0
 8019b5e:	d07a      	beq.n	8019c56 <rcl_validate_topic_name+0xfa>
 8019b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b64:	460e      	mov	r6, r1
 8019b66:	2900      	cmp	r1, #0
 8019b68:	d07c      	beq.n	8019c64 <rcl_validate_topic_name+0x108>
 8019b6a:	4617      	mov	r7, r2
 8019b6c:	4605      	mov	r5, r0
 8019b6e:	f7e6 fb47 	bl	8000200 <strlen>
 8019b72:	b1b0      	cbz	r0, 8019ba2 <rcl_validate_topic_name+0x46>
 8019b74:	f895 9000 	ldrb.w	r9, [r5]
 8019b78:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019cfc <rcl_validate_topic_name+0x1a0>
 8019b7c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8019b80:	f013 0304 	ands.w	r3, r3, #4
 8019b84:	d169      	bne.n	8019c5a <rcl_validate_topic_name+0xfe>
 8019b86:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8019b8a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019b8e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019b90:	d10e      	bne.n	8019bb0 <rcl_validate_topic_name+0x54>
 8019b92:	2202      	movs	r2, #2
 8019b94:	6032      	str	r2, [r6, #0]
 8019b96:	b36f      	cbz	r7, 8019bf4 <rcl_validate_topic_name+0x98>
 8019b98:	f8c7 8000 	str.w	r8, [r7]
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ba2:	2301      	movs	r3, #1
 8019ba4:	6033      	str	r3, [r6, #0]
 8019ba6:	b32f      	cbz	r7, 8019bf4 <rcl_validate_topic_name+0x98>
 8019ba8:	2000      	movs	r0, #0
 8019baa:	6038      	str	r0, [r7, #0]
 8019bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bb0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019bb4:	461c      	mov	r4, r3
 8019bb6:	4619      	mov	r1, r3
 8019bb8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019bbc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019bc0:	f1be 0f09 	cmp.w	lr, #9
 8019bc4:	d919      	bls.n	8019bfa <rcl_validate_topic_name+0x9e>
 8019bc6:	f022 0e20 	bic.w	lr, r2, #32
 8019bca:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019bce:	f1be 0f19 	cmp.w	lr, #25
 8019bd2:	d912      	bls.n	8019bfa <rcl_validate_topic_name+0x9e>
 8019bd4:	2a5f      	cmp	r2, #95	@ 0x5f
 8019bd6:	d019      	beq.n	8019c0c <rcl_validate_topic_name+0xb0>
 8019bd8:	2a2f      	cmp	r2, #47	@ 0x2f
 8019bda:	d051      	beq.n	8019c80 <rcl_validate_topic_name+0x124>
 8019bdc:	2a7e      	cmp	r2, #126	@ 0x7e
 8019bde:	d048      	beq.n	8019c72 <rcl_validate_topic_name+0x116>
 8019be0:	2a7b      	cmp	r2, #123	@ 0x7b
 8019be2:	d054      	beq.n	8019c8e <rcl_validate_topic_name+0x132>
 8019be4:	2a7d      	cmp	r2, #125	@ 0x7d
 8019be6:	d161      	bne.n	8019cac <rcl_validate_topic_name+0x150>
 8019be8:	2c00      	cmp	r4, #0
 8019bea:	d155      	bne.n	8019c98 <rcl_validate_topic_name+0x13c>
 8019bec:	2305      	movs	r3, #5
 8019bee:	6033      	str	r3, [r6, #0]
 8019bf0:	b107      	cbz	r7, 8019bf4 <rcl_validate_topic_name+0x98>
 8019bf2:	6039      	str	r1, [r7, #0]
 8019bf4:	2000      	movs	r0, #0
 8019bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bfa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019bfe:	0752      	lsls	r2, r2, #29
 8019c00:	d504      	bpl.n	8019c0c <rcl_validate_topic_name+0xb0>
 8019c02:	b11c      	cbz	r4, 8019c0c <rcl_validate_topic_name+0xb0>
 8019c04:	b111      	cbz	r1, 8019c0c <rcl_validate_topic_name+0xb0>
 8019c06:	1e4a      	subs	r2, r1, #1
 8019c08:	429a      	cmp	r2, r3
 8019c0a:	d02d      	beq.n	8019c68 <rcl_validate_topic_name+0x10c>
 8019c0c:	3101      	adds	r1, #1
 8019c0e:	4288      	cmp	r0, r1
 8019c10:	d1d2      	bne.n	8019bb8 <rcl_validate_topic_name+0x5c>
 8019c12:	2c00      	cmp	r4, #0
 8019c14:	d145      	bne.n	8019ca2 <rcl_validate_topic_name+0x146>
 8019c16:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8019c1a:	d04f      	beq.n	8019cbc <rcl_validate_topic_name+0x160>
 8019c1c:	4620      	mov	r0, r4
 8019c1e:	2301      	movs	r3, #1
 8019c20:	e006      	b.n	8019c30 <rcl_validate_topic_name+0xd4>
 8019c22:	428b      	cmp	r3, r1
 8019c24:	f105 0501 	add.w	r5, r5, #1
 8019c28:	f103 0201 	add.w	r2, r3, #1
 8019c2c:	d236      	bcs.n	8019c9c <rcl_validate_topic_name+0x140>
 8019c2e:	4613      	mov	r3, r2
 8019c30:	4580      	cmp	r8, r0
 8019c32:	f100 0001 	add.w	r0, r0, #1
 8019c36:	d0f4      	beq.n	8019c22 <rcl_validate_topic_name+0xc6>
 8019c38:	782a      	ldrb	r2, [r5, #0]
 8019c3a:	2a2f      	cmp	r2, #47	@ 0x2f
 8019c3c:	d1f1      	bne.n	8019c22 <rcl_validate_topic_name+0xc6>
 8019c3e:	786a      	ldrb	r2, [r5, #1]
 8019c40:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019c44:	0754      	lsls	r4, r2, #29
 8019c46:	d5ec      	bpl.n	8019c22 <rcl_validate_topic_name+0xc6>
 8019c48:	2204      	movs	r2, #4
 8019c4a:	6032      	str	r2, [r6, #0]
 8019c4c:	2f00      	cmp	r7, #0
 8019c4e:	d0d1      	beq.n	8019bf4 <rcl_validate_topic_name+0x98>
 8019c50:	603b      	str	r3, [r7, #0]
 8019c52:	2000      	movs	r0, #0
 8019c54:	e7aa      	b.n	8019bac <rcl_validate_topic_name+0x50>
 8019c56:	200b      	movs	r0, #11
 8019c58:	4770      	bx	lr
 8019c5a:	2304      	movs	r3, #4
 8019c5c:	6033      	str	r3, [r6, #0]
 8019c5e:	2f00      	cmp	r7, #0
 8019c60:	d1a2      	bne.n	8019ba8 <rcl_validate_topic_name+0x4c>
 8019c62:	e7c7      	b.n	8019bf4 <rcl_validate_topic_name+0x98>
 8019c64:	200b      	movs	r0, #11
 8019c66:	e7a1      	b.n	8019bac <rcl_validate_topic_name+0x50>
 8019c68:	2309      	movs	r3, #9
 8019c6a:	6033      	str	r3, [r6, #0]
 8019c6c:	2f00      	cmp	r7, #0
 8019c6e:	d1c0      	bne.n	8019bf2 <rcl_validate_topic_name+0x96>
 8019c70:	e7c0      	b.n	8019bf4 <rcl_validate_topic_name+0x98>
 8019c72:	2900      	cmp	r1, #0
 8019c74:	d0ca      	beq.n	8019c0c <rcl_validate_topic_name+0xb0>
 8019c76:	2306      	movs	r3, #6
 8019c78:	6033      	str	r3, [r6, #0]
 8019c7a:	2f00      	cmp	r7, #0
 8019c7c:	d1b9      	bne.n	8019bf2 <rcl_validate_topic_name+0x96>
 8019c7e:	e7b9      	b.n	8019bf4 <rcl_validate_topic_name+0x98>
 8019c80:	2c00      	cmp	r4, #0
 8019c82:	d0c3      	beq.n	8019c0c <rcl_validate_topic_name+0xb0>
 8019c84:	2308      	movs	r3, #8
 8019c86:	6033      	str	r3, [r6, #0]
 8019c88:	2f00      	cmp	r7, #0
 8019c8a:	d1b2      	bne.n	8019bf2 <rcl_validate_topic_name+0x96>
 8019c8c:	e7b2      	b.n	8019bf4 <rcl_validate_topic_name+0x98>
 8019c8e:	2c00      	cmp	r4, #0
 8019c90:	d1f8      	bne.n	8019c84 <rcl_validate_topic_name+0x128>
 8019c92:	460b      	mov	r3, r1
 8019c94:	2401      	movs	r4, #1
 8019c96:	e7b9      	b.n	8019c0c <rcl_validate_topic_name+0xb0>
 8019c98:	2400      	movs	r4, #0
 8019c9a:	e7b7      	b.n	8019c0c <rcl_validate_topic_name+0xb0>
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	6030      	str	r0, [r6, #0]
 8019ca0:	e784      	b.n	8019bac <rcl_validate_topic_name+0x50>
 8019ca2:	2205      	movs	r2, #5
 8019ca4:	6032      	str	r2, [r6, #0]
 8019ca6:	2f00      	cmp	r7, #0
 8019ca8:	d1d2      	bne.n	8019c50 <rcl_validate_topic_name+0xf4>
 8019caa:	e7a3      	b.n	8019bf4 <rcl_validate_topic_name+0x98>
 8019cac:	2c00      	cmp	r4, #0
 8019cae:	bf14      	ite	ne
 8019cb0:	2308      	movne	r3, #8
 8019cb2:	2303      	moveq	r3, #3
 8019cb4:	6033      	str	r3, [r6, #0]
 8019cb6:	2f00      	cmp	r7, #0
 8019cb8:	d19b      	bne.n	8019bf2 <rcl_validate_topic_name+0x96>
 8019cba:	e79b      	b.n	8019bf4 <rcl_validate_topic_name+0x98>
 8019cbc:	2301      	movs	r3, #1
 8019cbe:	e00a      	b.n	8019cd6 <rcl_validate_topic_name+0x17a>
 8019cc0:	2c01      	cmp	r4, #1
 8019cc2:	d013      	beq.n	8019cec <rcl_validate_topic_name+0x190>
 8019cc4:	4299      	cmp	r1, r3
 8019cc6:	f104 0401 	add.w	r4, r4, #1
 8019cca:	f105 0501 	add.w	r5, r5, #1
 8019cce:	f103 0201 	add.w	r2, r3, #1
 8019cd2:	d9e3      	bls.n	8019c9c <rcl_validate_topic_name+0x140>
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	45a0      	cmp	r8, r4
 8019cd8:	d0f4      	beq.n	8019cc4 <rcl_validate_topic_name+0x168>
 8019cda:	782a      	ldrb	r2, [r5, #0]
 8019cdc:	2a2f      	cmp	r2, #47	@ 0x2f
 8019cde:	d1ef      	bne.n	8019cc0 <rcl_validate_topic_name+0x164>
 8019ce0:	786a      	ldrb	r2, [r5, #1]
 8019ce2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019ce6:	0752      	lsls	r2, r2, #29
 8019ce8:	d5ec      	bpl.n	8019cc4 <rcl_validate_topic_name+0x168>
 8019cea:	e7ad      	b.n	8019c48 <rcl_validate_topic_name+0xec>
 8019cec:	2307      	movs	r3, #7
 8019cee:	6033      	str	r3, [r6, #0]
 8019cf0:	2f00      	cmp	r7, #0
 8019cf2:	f43f af7f 	beq.w	8019bf4 <rcl_validate_topic_name+0x98>
 8019cf6:	603c      	str	r4, [r7, #0]
 8019cf8:	2000      	movs	r0, #0
 8019cfa:	e757      	b.n	8019bac <rcl_validate_topic_name+0x50>
 8019cfc:	0801d9b8 	.word	0x0801d9b8

08019d00 <rcutils_string_array_fini>:
 8019d00:	b320      	cbz	r0, 8019d4c <rcutils_string_array_fini+0x4c>
 8019d02:	b570      	push	{r4, r5, r6, lr}
 8019d04:	4604      	mov	r4, r0
 8019d06:	6840      	ldr	r0, [r0, #4]
 8019d08:	b1d8      	cbz	r0, 8019d42 <rcutils_string_array_fini+0x42>
 8019d0a:	f104 0008 	add.w	r0, r4, #8
 8019d0e:	f7f2 fe7f 	bl	800ca10 <rcutils_allocator_is_valid>
 8019d12:	b1b8      	cbz	r0, 8019d44 <rcutils_string_array_fini+0x44>
 8019d14:	6823      	ldr	r3, [r4, #0]
 8019d16:	b1bb      	cbz	r3, 8019d48 <rcutils_string_array_fini+0x48>
 8019d18:	2500      	movs	r5, #0
 8019d1a:	6860      	ldr	r0, [r4, #4]
 8019d1c:	462e      	mov	r6, r5
 8019d1e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019d22:	68e3      	ldr	r3, [r4, #12]
 8019d24:	69a1      	ldr	r1, [r4, #24]
 8019d26:	4798      	blx	r3
 8019d28:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019d2c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019d30:	3501      	adds	r5, #1
 8019d32:	429d      	cmp	r5, r3
 8019d34:	d3f3      	bcc.n	8019d1e <rcutils_string_array_fini+0x1e>
 8019d36:	68e3      	ldr	r3, [r4, #12]
 8019d38:	69a1      	ldr	r1, [r4, #24]
 8019d3a:	4798      	blx	r3
 8019d3c:	2000      	movs	r0, #0
 8019d3e:	e9c4 0000 	strd	r0, r0, [r4]
 8019d42:	bd70      	pop	{r4, r5, r6, pc}
 8019d44:	200b      	movs	r0, #11
 8019d46:	bd70      	pop	{r4, r5, r6, pc}
 8019d48:	6860      	ldr	r0, [r4, #4]
 8019d4a:	e7f4      	b.n	8019d36 <rcutils_string_array_fini+0x36>
 8019d4c:	200b      	movs	r0, #11
 8019d4e:	4770      	bx	lr

08019d50 <on_status>:
 8019d50:	b082      	sub	sp, #8
 8019d52:	b002      	add	sp, #8
 8019d54:	4770      	bx	lr
 8019d56:	bf00      	nop

08019d58 <on_topic>:
 8019d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d5c:	4a22      	ldr	r2, [pc, #136]	@ (8019de8 <on_topic+0x90>)
 8019d5e:	b094      	sub	sp, #80	@ 0x50
 8019d60:	6812      	ldr	r2, [r2, #0]
 8019d62:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019d64:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019d68:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019d6c:	b3c2      	cbz	r2, 8019de0 <on_topic+0x88>
 8019d6e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019d72:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8019d76:	e001      	b.n	8019d7c <on_topic+0x24>
 8019d78:	6852      	ldr	r2, [r2, #4]
 8019d7a:	b38a      	cbz	r2, 8019de0 <on_topic+0x88>
 8019d7c:	6894      	ldr	r4, [r2, #8]
 8019d7e:	8aa3      	ldrh	r3, [r4, #20]
 8019d80:	428b      	cmp	r3, r1
 8019d82:	d1f9      	bne.n	8019d78 <on_topic+0x20>
 8019d84:	7da3      	ldrb	r3, [r4, #22]
 8019d86:	4283      	cmp	r3, r0
 8019d88:	d1f6      	bne.n	8019d78 <on_topic+0x20>
 8019d8a:	2248      	movs	r2, #72	@ 0x48
 8019d8c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019d90:	4668      	mov	r0, sp
 8019d92:	f001 f9da 	bl	801b14a <memcpy>
 8019d96:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8019d9a:	cb0c      	ldmia	r3, {r2, r3}
 8019d9c:	4620      	mov	r0, r4
 8019d9e:	f7f3 fa67 	bl	800d270 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019da2:	4607      	mov	r7, r0
 8019da4:	b1e0      	cbz	r0, 8019de0 <on_topic+0x88>
 8019da6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019daa:	4632      	mov	r2, r6
 8019dac:	4628      	mov	r0, r5
 8019dae:	f108 0110 	add.w	r1, r8, #16
 8019db2:	f7f4 fb59 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8019db6:	b930      	cbnz	r0, 8019dc6 <on_topic+0x6e>
 8019db8:	480c      	ldr	r0, [pc, #48]	@ (8019dec <on_topic+0x94>)
 8019dba:	4639      	mov	r1, r7
 8019dbc:	b014      	add	sp, #80	@ 0x50
 8019dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc2:	f7fc bd75 	b.w	80168b0 <put_memory>
 8019dc6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8019dca:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8019dce:	f7fd ff8f 	bl	8017cf0 <rmw_uros_epoch_nanos>
 8019dd2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019dd6:	2305      	movs	r3, #5
 8019dd8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019ddc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019de0:	b014      	add	sp, #80	@ 0x50
 8019de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019de6:	bf00      	nop
 8019de8:	20015be4 	.word	0x20015be4
 8019dec:	20015bd4 	.word	0x20015bd4

08019df0 <on_request>:
 8019df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019df4:	4823      	ldr	r0, [pc, #140]	@ (8019e84 <on_request+0x94>)
 8019df6:	b094      	sub	sp, #80	@ 0x50
 8019df8:	6800      	ldr	r0, [r0, #0]
 8019dfa:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019dfc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019e00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019e02:	2800      	cmp	r0, #0
 8019e04:	d03b      	beq.n	8019e7e <on_request+0x8e>
 8019e06:	461d      	mov	r5, r3
 8019e08:	e001      	b.n	8019e0e <on_request+0x1e>
 8019e0a:	6840      	ldr	r0, [r0, #4]
 8019e0c:	b3b8      	cbz	r0, 8019e7e <on_request+0x8e>
 8019e0e:	6884      	ldr	r4, [r0, #8]
 8019e10:	8b21      	ldrh	r1, [r4, #24]
 8019e12:	4291      	cmp	r1, r2
 8019e14:	d1f9      	bne.n	8019e0a <on_request+0x1a>
 8019e16:	2248      	movs	r2, #72	@ 0x48
 8019e18:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019e1c:	4668      	mov	r0, sp
 8019e1e:	f001 f994 	bl	801b14a <memcpy>
 8019e22:	f104 0320 	add.w	r3, r4, #32
 8019e26:	cb0c      	ldmia	r3, {r2, r3}
 8019e28:	4620      	mov	r0, r4
 8019e2a:	f7f3 fa21 	bl	800d270 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019e2e:	4680      	mov	r8, r0
 8019e30:	b328      	cbz	r0, 8019e7e <on_request+0x8e>
 8019e32:	4638      	mov	r0, r7
 8019e34:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019e38:	4632      	mov	r2, r6
 8019e3a:	f107 0110 	add.w	r1, r7, #16
 8019e3e:	f7f4 fb13 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8019e42:	b930      	cbnz	r0, 8019e52 <on_request+0x62>
 8019e44:	4810      	ldr	r0, [pc, #64]	@ (8019e88 <on_request+0x98>)
 8019e46:	4641      	mov	r1, r8
 8019e48:	b014      	add	sp, #80	@ 0x50
 8019e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e4e:	f7fc bd2f 	b.w	80168b0 <put_memory>
 8019e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e54:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019e58:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019e5c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019e60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019e68:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019e6c:	f7fd ff40 	bl	8017cf0 <rmw_uros_epoch_nanos>
 8019e70:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019e74:	2303      	movs	r3, #3
 8019e76:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019e7a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019e7e:	b014      	add	sp, #80	@ 0x50
 8019e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e84:	20015bb4 	.word	0x20015bb4
 8019e88:	20015bd4 	.word	0x20015bd4

08019e8c <on_reply>:
 8019e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e90:	4821      	ldr	r0, [pc, #132]	@ (8019f18 <on_reply+0x8c>)
 8019e92:	b094      	sub	sp, #80	@ 0x50
 8019e94:	6800      	ldr	r0, [r0, #0]
 8019e96:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019e98:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019e9c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019e9e:	b3b8      	cbz	r0, 8019f10 <on_reply+0x84>
 8019ea0:	461d      	mov	r5, r3
 8019ea2:	e001      	b.n	8019ea8 <on_reply+0x1c>
 8019ea4:	6840      	ldr	r0, [r0, #4]
 8019ea6:	b398      	cbz	r0, 8019f10 <on_reply+0x84>
 8019ea8:	6884      	ldr	r4, [r0, #8]
 8019eaa:	8b21      	ldrh	r1, [r4, #24]
 8019eac:	4291      	cmp	r1, r2
 8019eae:	d1f9      	bne.n	8019ea4 <on_reply+0x18>
 8019eb0:	2248      	movs	r2, #72	@ 0x48
 8019eb2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019eb6:	4668      	mov	r0, sp
 8019eb8:	f001 f947 	bl	801b14a <memcpy>
 8019ebc:	f104 0320 	add.w	r3, r4, #32
 8019ec0:	cb0c      	ldmia	r3, {r2, r3}
 8019ec2:	4620      	mov	r0, r4
 8019ec4:	f7f3 f9d4 	bl	800d270 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019ec8:	4680      	mov	r8, r0
 8019eca:	b308      	cbz	r0, 8019f10 <on_reply+0x84>
 8019ecc:	4638      	mov	r0, r7
 8019ece:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019ed2:	4632      	mov	r2, r6
 8019ed4:	f107 0110 	add.w	r1, r7, #16
 8019ed8:	f7f4 fac6 	bl	800e468 <ucdr_deserialize_array_uint8_t>
 8019edc:	b930      	cbnz	r0, 8019eec <on_reply+0x60>
 8019ede:	480f      	ldr	r0, [pc, #60]	@ (8019f1c <on_reply+0x90>)
 8019ee0:	4641      	mov	r1, r8
 8019ee2:	b014      	add	sp, #80	@ 0x50
 8019ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ee8:	f7fc bce2 	b.w	80168b0 <put_memory>
 8019eec:	2200      	movs	r2, #0
 8019eee:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8019ef2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019ef6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019efa:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8019efe:	f7fd fef7 	bl	8017cf0 <rmw_uros_epoch_nanos>
 8019f02:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019f06:	2304      	movs	r3, #4
 8019f08:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019f0c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019f10:	b014      	add	sp, #80	@ 0x50
 8019f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f16:	bf00      	nop
 8019f18:	20010e18 	.word	0x20010e18
 8019f1c:	20015bd4 	.word	0x20015bd4

08019f20 <rmw_create_guard_condition>:
 8019f20:	b538      	push	{r3, r4, r5, lr}
 8019f22:	4605      	mov	r5, r0
 8019f24:	4807      	ldr	r0, [pc, #28]	@ (8019f44 <rmw_create_guard_condition+0x24>)
 8019f26:	f7fc fcb3 	bl	8016890 <get_memory>
 8019f2a:	b148      	cbz	r0, 8019f40 <rmw_create_guard_condition+0x20>
 8019f2c:	6884      	ldr	r4, [r0, #8]
 8019f2e:	2300      	movs	r3, #0
 8019f30:	7423      	strb	r3, [r4, #16]
 8019f32:	61e5      	str	r5, [r4, #28]
 8019f34:	f7fc fd14 	bl	8016960 <rmw_get_implementation_identifier>
 8019f38:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019f3c:	f104 0014 	add.w	r0, r4, #20
 8019f40:	bd38      	pop	{r3, r4, r5, pc}
 8019f42:	bf00      	nop
 8019f44:	20015b74 	.word	0x20015b74

08019f48 <rmw_destroy_guard_condition>:
 8019f48:	b508      	push	{r3, lr}
 8019f4a:	4b08      	ldr	r3, [pc, #32]	@ (8019f6c <rmw_destroy_guard_condition+0x24>)
 8019f4c:	6819      	ldr	r1, [r3, #0]
 8019f4e:	b911      	cbnz	r1, 8019f56 <rmw_destroy_guard_condition+0xe>
 8019f50:	e00a      	b.n	8019f68 <rmw_destroy_guard_condition+0x20>
 8019f52:	6849      	ldr	r1, [r1, #4]
 8019f54:	b141      	cbz	r1, 8019f68 <rmw_destroy_guard_condition+0x20>
 8019f56:	688b      	ldr	r3, [r1, #8]
 8019f58:	3314      	adds	r3, #20
 8019f5a:	4298      	cmp	r0, r3
 8019f5c:	d1f9      	bne.n	8019f52 <rmw_destroy_guard_condition+0xa>
 8019f5e:	4803      	ldr	r0, [pc, #12]	@ (8019f6c <rmw_destroy_guard_condition+0x24>)
 8019f60:	f7fc fca6 	bl	80168b0 <put_memory>
 8019f64:	2000      	movs	r0, #0
 8019f66:	bd08      	pop	{r3, pc}
 8019f68:	2001      	movs	r0, #1
 8019f6a:	bd08      	pop	{r3, pc}
 8019f6c:	20015b74 	.word	0x20015b74

08019f70 <rosidl_runtime_c__String__init>:
 8019f70:	b510      	push	{r4, lr}
 8019f72:	4604      	mov	r4, r0
 8019f74:	b086      	sub	sp, #24
 8019f76:	b170      	cbz	r0, 8019f96 <rosidl_runtime_c__String__init+0x26>
 8019f78:	a801      	add	r0, sp, #4
 8019f7a:	f7f2 fd3b 	bl	800c9f4 <rcutils_get_default_allocator>
 8019f7e:	9b01      	ldr	r3, [sp, #4]
 8019f80:	9905      	ldr	r1, [sp, #20]
 8019f82:	2001      	movs	r0, #1
 8019f84:	4798      	blx	r3
 8019f86:	6020      	str	r0, [r4, #0]
 8019f88:	b128      	cbz	r0, 8019f96 <rosidl_runtime_c__String__init+0x26>
 8019f8a:	2100      	movs	r1, #0
 8019f8c:	2201      	movs	r2, #1
 8019f8e:	7001      	strb	r1, [r0, #0]
 8019f90:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019f94:	4610      	mov	r0, r2
 8019f96:	b006      	add	sp, #24
 8019f98:	bd10      	pop	{r4, pc}
 8019f9a:	bf00      	nop

08019f9c <rosidl_runtime_c__String__fini>:
 8019f9c:	b320      	cbz	r0, 8019fe8 <rosidl_runtime_c__String__fini+0x4c>
 8019f9e:	b510      	push	{r4, lr}
 8019fa0:	6803      	ldr	r3, [r0, #0]
 8019fa2:	b086      	sub	sp, #24
 8019fa4:	4604      	mov	r4, r0
 8019fa6:	b173      	cbz	r3, 8019fc6 <rosidl_runtime_c__String__fini+0x2a>
 8019fa8:	6883      	ldr	r3, [r0, #8]
 8019faa:	b1f3      	cbz	r3, 8019fea <rosidl_runtime_c__String__fini+0x4e>
 8019fac:	a801      	add	r0, sp, #4
 8019fae:	f7f2 fd21 	bl	800c9f4 <rcutils_get_default_allocator>
 8019fb2:	9b02      	ldr	r3, [sp, #8]
 8019fb4:	9905      	ldr	r1, [sp, #20]
 8019fb6:	6820      	ldr	r0, [r4, #0]
 8019fb8:	4798      	blx	r3
 8019fba:	2300      	movs	r3, #0
 8019fbc:	e9c4 3300 	strd	r3, r3, [r4]
 8019fc0:	60a3      	str	r3, [r4, #8]
 8019fc2:	b006      	add	sp, #24
 8019fc4:	bd10      	pop	{r4, pc}
 8019fc6:	6843      	ldr	r3, [r0, #4]
 8019fc8:	b9db      	cbnz	r3, 801a002 <rosidl_runtime_c__String__fini+0x66>
 8019fca:	6883      	ldr	r3, [r0, #8]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d0f8      	beq.n	8019fc2 <rosidl_runtime_c__String__fini+0x26>
 8019fd0:	4b12      	ldr	r3, [pc, #72]	@ (801a01c <rosidl_runtime_c__String__fini+0x80>)
 8019fd2:	4813      	ldr	r0, [pc, #76]	@ (801a020 <rosidl_runtime_c__String__fini+0x84>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	2251      	movs	r2, #81	@ 0x51
 8019fd8:	68db      	ldr	r3, [r3, #12]
 8019fda:	2101      	movs	r1, #1
 8019fdc:	f000 fe7a 	bl	801acd4 <fwrite>
 8019fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019fe4:	f000 fac8 	bl	801a578 <exit>
 8019fe8:	4770      	bx	lr
 8019fea:	4b0c      	ldr	r3, [pc, #48]	@ (801a01c <rosidl_runtime_c__String__fini+0x80>)
 8019fec:	480d      	ldr	r0, [pc, #52]	@ (801a024 <rosidl_runtime_c__String__fini+0x88>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	224c      	movs	r2, #76	@ 0x4c
 8019ff2:	68db      	ldr	r3, [r3, #12]
 8019ff4:	2101      	movs	r1, #1
 8019ff6:	f000 fe6d 	bl	801acd4 <fwrite>
 8019ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ffe:	f000 fabb 	bl	801a578 <exit>
 801a002:	4b06      	ldr	r3, [pc, #24]	@ (801a01c <rosidl_runtime_c__String__fini+0x80>)
 801a004:	4808      	ldr	r0, [pc, #32]	@ (801a028 <rosidl_runtime_c__String__fini+0x8c>)
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	224e      	movs	r2, #78	@ 0x4e
 801a00a:	68db      	ldr	r3, [r3, #12]
 801a00c:	2101      	movs	r1, #1
 801a00e:	f000 fe61 	bl	801acd4 <fwrite>
 801a012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a016:	f000 faaf 	bl	801a578 <exit>
 801a01a:	bf00      	nop
 801a01c:	20000a74 	.word	0x20000a74
 801a020:	0801d884 	.word	0x0801d884
 801a024:	0801d7e4 	.word	0x0801d7e4
 801a028:	0801d834 	.word	0x0801d834

0801a02c <atan2>:
 801a02c:	f000 b800 	b.w	801a030 <__ieee754_atan2>

0801a030 <__ieee754_atan2>:
 801a030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a034:	ec57 6b11 	vmov	r6, r7, d1
 801a038:	4273      	negs	r3, r6
 801a03a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a1b8 <__ieee754_atan2+0x188>
 801a03e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a042:	4333      	orrs	r3, r6
 801a044:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a048:	4543      	cmp	r3, r8
 801a04a:	ec51 0b10 	vmov	r0, r1, d0
 801a04e:	4635      	mov	r5, r6
 801a050:	d809      	bhi.n	801a066 <__ieee754_atan2+0x36>
 801a052:	4244      	negs	r4, r0
 801a054:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a058:	4304      	orrs	r4, r0
 801a05a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a05e:	4544      	cmp	r4, r8
 801a060:	468e      	mov	lr, r1
 801a062:	4681      	mov	r9, r0
 801a064:	d907      	bls.n	801a076 <__ieee754_atan2+0x46>
 801a066:	4632      	mov	r2, r6
 801a068:	463b      	mov	r3, r7
 801a06a:	f7e6 f937 	bl	80002dc <__adddf3>
 801a06e:	ec41 0b10 	vmov	d0, r0, r1
 801a072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a076:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a07a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a07e:	4334      	orrs	r4, r6
 801a080:	d103      	bne.n	801a08a <__ieee754_atan2+0x5a>
 801a082:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a086:	f000 b8b7 	b.w	801a1f8 <atan>
 801a08a:	17bc      	asrs	r4, r7, #30
 801a08c:	f004 0402 	and.w	r4, r4, #2
 801a090:	ea53 0909 	orrs.w	r9, r3, r9
 801a094:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a098:	d107      	bne.n	801a0aa <__ieee754_atan2+0x7a>
 801a09a:	2c02      	cmp	r4, #2
 801a09c:	d05f      	beq.n	801a15e <__ieee754_atan2+0x12e>
 801a09e:	2c03      	cmp	r4, #3
 801a0a0:	d1e5      	bne.n	801a06e <__ieee754_atan2+0x3e>
 801a0a2:	a141      	add	r1, pc, #260	@ (adr r1, 801a1a8 <__ieee754_atan2+0x178>)
 801a0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0a8:	e7e1      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a0aa:	4315      	orrs	r5, r2
 801a0ac:	d106      	bne.n	801a0bc <__ieee754_atan2+0x8c>
 801a0ae:	f1be 0f00 	cmp.w	lr, #0
 801a0b2:	da5f      	bge.n	801a174 <__ieee754_atan2+0x144>
 801a0b4:	a13e      	add	r1, pc, #248	@ (adr r1, 801a1b0 <__ieee754_atan2+0x180>)
 801a0b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a0ba:	e7d8      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a0bc:	4542      	cmp	r2, r8
 801a0be:	d10f      	bne.n	801a0e0 <__ieee754_atan2+0xb0>
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a0c6:	d107      	bne.n	801a0d8 <__ieee754_atan2+0xa8>
 801a0c8:	2c02      	cmp	r4, #2
 801a0ca:	d84c      	bhi.n	801a166 <__ieee754_atan2+0x136>
 801a0cc:	4b34      	ldr	r3, [pc, #208]	@ (801a1a0 <__ieee754_atan2+0x170>)
 801a0ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a0d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a0d6:	e7ca      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a0d8:	2c02      	cmp	r4, #2
 801a0da:	d848      	bhi.n	801a16e <__ieee754_atan2+0x13e>
 801a0dc:	4b31      	ldr	r3, [pc, #196]	@ (801a1a4 <__ieee754_atan2+0x174>)
 801a0de:	e7f6      	b.n	801a0ce <__ieee754_atan2+0x9e>
 801a0e0:	4543      	cmp	r3, r8
 801a0e2:	d0e4      	beq.n	801a0ae <__ieee754_atan2+0x7e>
 801a0e4:	1a9b      	subs	r3, r3, r2
 801a0e6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a0ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a0ee:	da1e      	bge.n	801a12e <__ieee754_atan2+0xfe>
 801a0f0:	2f00      	cmp	r7, #0
 801a0f2:	da01      	bge.n	801a0f8 <__ieee754_atan2+0xc8>
 801a0f4:	323c      	adds	r2, #60	@ 0x3c
 801a0f6:	db1e      	blt.n	801a136 <__ieee754_atan2+0x106>
 801a0f8:	4632      	mov	r2, r6
 801a0fa:	463b      	mov	r3, r7
 801a0fc:	f7e6 fbce 	bl	800089c <__aeabi_ddiv>
 801a100:	ec41 0b10 	vmov	d0, r0, r1
 801a104:	f000 fa10 	bl	801a528 <fabs>
 801a108:	f000 f876 	bl	801a1f8 <atan>
 801a10c:	ec51 0b10 	vmov	r0, r1, d0
 801a110:	2c01      	cmp	r4, #1
 801a112:	d013      	beq.n	801a13c <__ieee754_atan2+0x10c>
 801a114:	2c02      	cmp	r4, #2
 801a116:	d015      	beq.n	801a144 <__ieee754_atan2+0x114>
 801a118:	2c00      	cmp	r4, #0
 801a11a:	d0a8      	beq.n	801a06e <__ieee754_atan2+0x3e>
 801a11c:	a318      	add	r3, pc, #96	@ (adr r3, 801a180 <__ieee754_atan2+0x150>)
 801a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a122:	f7e6 f8d9 	bl	80002d8 <__aeabi_dsub>
 801a126:	a318      	add	r3, pc, #96	@ (adr r3, 801a188 <__ieee754_atan2+0x158>)
 801a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a12c:	e014      	b.n	801a158 <__ieee754_atan2+0x128>
 801a12e:	a118      	add	r1, pc, #96	@ (adr r1, 801a190 <__ieee754_atan2+0x160>)
 801a130:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a134:	e7ec      	b.n	801a110 <__ieee754_atan2+0xe0>
 801a136:	2000      	movs	r0, #0
 801a138:	2100      	movs	r1, #0
 801a13a:	e7e9      	b.n	801a110 <__ieee754_atan2+0xe0>
 801a13c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a140:	4619      	mov	r1, r3
 801a142:	e794      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a144:	a30e      	add	r3, pc, #56	@ (adr r3, 801a180 <__ieee754_atan2+0x150>)
 801a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a14a:	f7e6 f8c5 	bl	80002d8 <__aeabi_dsub>
 801a14e:	4602      	mov	r2, r0
 801a150:	460b      	mov	r3, r1
 801a152:	a10d      	add	r1, pc, #52	@ (adr r1, 801a188 <__ieee754_atan2+0x158>)
 801a154:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a158:	f7e6 f8be 	bl	80002d8 <__aeabi_dsub>
 801a15c:	e787      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a15e:	a10a      	add	r1, pc, #40	@ (adr r1, 801a188 <__ieee754_atan2+0x158>)
 801a160:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a164:	e783      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a166:	a10c      	add	r1, pc, #48	@ (adr r1, 801a198 <__ieee754_atan2+0x168>)
 801a168:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a16c:	e77f      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a16e:	2000      	movs	r0, #0
 801a170:	2100      	movs	r1, #0
 801a172:	e77c      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a174:	a106      	add	r1, pc, #24	@ (adr r1, 801a190 <__ieee754_atan2+0x160>)
 801a176:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a17a:	e778      	b.n	801a06e <__ieee754_atan2+0x3e>
 801a17c:	f3af 8000 	nop.w
 801a180:	33145c07 	.word	0x33145c07
 801a184:	3ca1a626 	.word	0x3ca1a626
 801a188:	54442d18 	.word	0x54442d18
 801a18c:	400921fb 	.word	0x400921fb
 801a190:	54442d18 	.word	0x54442d18
 801a194:	3ff921fb 	.word	0x3ff921fb
 801a198:	54442d18 	.word	0x54442d18
 801a19c:	3fe921fb 	.word	0x3fe921fb
 801a1a0:	0801d8f0 	.word	0x0801d8f0
 801a1a4:	0801d8d8 	.word	0x0801d8d8
 801a1a8:	54442d18 	.word	0x54442d18
 801a1ac:	c00921fb 	.word	0xc00921fb
 801a1b0:	54442d18 	.word	0x54442d18
 801a1b4:	bff921fb 	.word	0xbff921fb
 801a1b8:	7ff00000 	.word	0x7ff00000

0801a1bc <sqrtf>:
 801a1bc:	b508      	push	{r3, lr}
 801a1be:	ed2d 8b02 	vpush	{d8}
 801a1c2:	eeb0 8a40 	vmov.f32	s16, s0
 801a1c6:	f000 f9b7 	bl	801a538 <__ieee754_sqrtf>
 801a1ca:	eeb4 8a48 	vcmp.f32	s16, s16
 801a1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1d2:	d60c      	bvs.n	801a1ee <sqrtf+0x32>
 801a1d4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801a1f4 <sqrtf+0x38>
 801a1d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1e0:	d505      	bpl.n	801a1ee <sqrtf+0x32>
 801a1e2:	f000 ff85 	bl	801b0f0 <__errno>
 801a1e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a1ea:	2321      	movs	r3, #33	@ 0x21
 801a1ec:	6003      	str	r3, [r0, #0]
 801a1ee:	ecbd 8b02 	vpop	{d8}
 801a1f2:	bd08      	pop	{r3, pc}
 801a1f4:	00000000 	.word	0x00000000

0801a1f8 <atan>:
 801a1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1fc:	ec55 4b10 	vmov	r4, r5, d0
 801a200:	4bbf      	ldr	r3, [pc, #764]	@ (801a500 <atan+0x308>)
 801a202:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a206:	429e      	cmp	r6, r3
 801a208:	46ab      	mov	fp, r5
 801a20a:	d918      	bls.n	801a23e <atan+0x46>
 801a20c:	4bbd      	ldr	r3, [pc, #756]	@ (801a504 <atan+0x30c>)
 801a20e:	429e      	cmp	r6, r3
 801a210:	d801      	bhi.n	801a216 <atan+0x1e>
 801a212:	d109      	bne.n	801a228 <atan+0x30>
 801a214:	b144      	cbz	r4, 801a228 <atan+0x30>
 801a216:	4622      	mov	r2, r4
 801a218:	462b      	mov	r3, r5
 801a21a:	4620      	mov	r0, r4
 801a21c:	4629      	mov	r1, r5
 801a21e:	f7e6 f85d 	bl	80002dc <__adddf3>
 801a222:	4604      	mov	r4, r0
 801a224:	460d      	mov	r5, r1
 801a226:	e006      	b.n	801a236 <atan+0x3e>
 801a228:	f1bb 0f00 	cmp.w	fp, #0
 801a22c:	f340 812b 	ble.w	801a486 <atan+0x28e>
 801a230:	a597      	add	r5, pc, #604	@ (adr r5, 801a490 <atan+0x298>)
 801a232:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a236:	ec45 4b10 	vmov	d0, r4, r5
 801a23a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a23e:	4bb2      	ldr	r3, [pc, #712]	@ (801a508 <atan+0x310>)
 801a240:	429e      	cmp	r6, r3
 801a242:	d813      	bhi.n	801a26c <atan+0x74>
 801a244:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a248:	429e      	cmp	r6, r3
 801a24a:	d80c      	bhi.n	801a266 <atan+0x6e>
 801a24c:	a392      	add	r3, pc, #584	@ (adr r3, 801a498 <atan+0x2a0>)
 801a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a252:	4620      	mov	r0, r4
 801a254:	4629      	mov	r1, r5
 801a256:	f7e6 f841 	bl	80002dc <__adddf3>
 801a25a:	4bac      	ldr	r3, [pc, #688]	@ (801a50c <atan+0x314>)
 801a25c:	2200      	movs	r2, #0
 801a25e:	f7e6 fc83 	bl	8000b68 <__aeabi_dcmpgt>
 801a262:	2800      	cmp	r0, #0
 801a264:	d1e7      	bne.n	801a236 <atan+0x3e>
 801a266:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801a26a:	e029      	b.n	801a2c0 <atan+0xc8>
 801a26c:	f000 f95c 	bl	801a528 <fabs>
 801a270:	4ba7      	ldr	r3, [pc, #668]	@ (801a510 <atan+0x318>)
 801a272:	429e      	cmp	r6, r3
 801a274:	ec55 4b10 	vmov	r4, r5, d0
 801a278:	f200 80bc 	bhi.w	801a3f4 <atan+0x1fc>
 801a27c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a280:	429e      	cmp	r6, r3
 801a282:	f200 809e 	bhi.w	801a3c2 <atan+0x1ca>
 801a286:	4622      	mov	r2, r4
 801a288:	462b      	mov	r3, r5
 801a28a:	4620      	mov	r0, r4
 801a28c:	4629      	mov	r1, r5
 801a28e:	f7e6 f825 	bl	80002dc <__adddf3>
 801a292:	4b9e      	ldr	r3, [pc, #632]	@ (801a50c <atan+0x314>)
 801a294:	2200      	movs	r2, #0
 801a296:	f7e6 f81f 	bl	80002d8 <__aeabi_dsub>
 801a29a:	2200      	movs	r2, #0
 801a29c:	4606      	mov	r6, r0
 801a29e:	460f      	mov	r7, r1
 801a2a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	4629      	mov	r1, r5
 801a2a8:	f7e6 f818 	bl	80002dc <__adddf3>
 801a2ac:	4602      	mov	r2, r0
 801a2ae:	460b      	mov	r3, r1
 801a2b0:	4630      	mov	r0, r6
 801a2b2:	4639      	mov	r1, r7
 801a2b4:	f7e6 faf2 	bl	800089c <__aeabi_ddiv>
 801a2b8:	f04f 0a00 	mov.w	sl, #0
 801a2bc:	4604      	mov	r4, r0
 801a2be:	460d      	mov	r5, r1
 801a2c0:	4622      	mov	r2, r4
 801a2c2:	462b      	mov	r3, r5
 801a2c4:	4620      	mov	r0, r4
 801a2c6:	4629      	mov	r1, r5
 801a2c8:	f7e6 f9be 	bl	8000648 <__aeabi_dmul>
 801a2cc:	4602      	mov	r2, r0
 801a2ce:	460b      	mov	r3, r1
 801a2d0:	4680      	mov	r8, r0
 801a2d2:	4689      	mov	r9, r1
 801a2d4:	f7e6 f9b8 	bl	8000648 <__aeabi_dmul>
 801a2d8:	a371      	add	r3, pc, #452	@ (adr r3, 801a4a0 <atan+0x2a8>)
 801a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2de:	4606      	mov	r6, r0
 801a2e0:	460f      	mov	r7, r1
 801a2e2:	f7e6 f9b1 	bl	8000648 <__aeabi_dmul>
 801a2e6:	a370      	add	r3, pc, #448	@ (adr r3, 801a4a8 <atan+0x2b0>)
 801a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ec:	f7e5 fff6 	bl	80002dc <__adddf3>
 801a2f0:	4632      	mov	r2, r6
 801a2f2:	463b      	mov	r3, r7
 801a2f4:	f7e6 f9a8 	bl	8000648 <__aeabi_dmul>
 801a2f8:	a36d      	add	r3, pc, #436	@ (adr r3, 801a4b0 <atan+0x2b8>)
 801a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2fe:	f7e5 ffed 	bl	80002dc <__adddf3>
 801a302:	4632      	mov	r2, r6
 801a304:	463b      	mov	r3, r7
 801a306:	f7e6 f99f 	bl	8000648 <__aeabi_dmul>
 801a30a:	a36b      	add	r3, pc, #428	@ (adr r3, 801a4b8 <atan+0x2c0>)
 801a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a310:	f7e5 ffe4 	bl	80002dc <__adddf3>
 801a314:	4632      	mov	r2, r6
 801a316:	463b      	mov	r3, r7
 801a318:	f7e6 f996 	bl	8000648 <__aeabi_dmul>
 801a31c:	a368      	add	r3, pc, #416	@ (adr r3, 801a4c0 <atan+0x2c8>)
 801a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a322:	f7e5 ffdb 	bl	80002dc <__adddf3>
 801a326:	4632      	mov	r2, r6
 801a328:	463b      	mov	r3, r7
 801a32a:	f7e6 f98d 	bl	8000648 <__aeabi_dmul>
 801a32e:	a366      	add	r3, pc, #408	@ (adr r3, 801a4c8 <atan+0x2d0>)
 801a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a334:	f7e5 ffd2 	bl	80002dc <__adddf3>
 801a338:	4642      	mov	r2, r8
 801a33a:	464b      	mov	r3, r9
 801a33c:	f7e6 f984 	bl	8000648 <__aeabi_dmul>
 801a340:	a363      	add	r3, pc, #396	@ (adr r3, 801a4d0 <atan+0x2d8>)
 801a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a346:	4680      	mov	r8, r0
 801a348:	4689      	mov	r9, r1
 801a34a:	4630      	mov	r0, r6
 801a34c:	4639      	mov	r1, r7
 801a34e:	f7e6 f97b 	bl	8000648 <__aeabi_dmul>
 801a352:	a361      	add	r3, pc, #388	@ (adr r3, 801a4d8 <atan+0x2e0>)
 801a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a358:	f7e5 ffbe 	bl	80002d8 <__aeabi_dsub>
 801a35c:	4632      	mov	r2, r6
 801a35e:	463b      	mov	r3, r7
 801a360:	f7e6 f972 	bl	8000648 <__aeabi_dmul>
 801a364:	a35e      	add	r3, pc, #376	@ (adr r3, 801a4e0 <atan+0x2e8>)
 801a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a36a:	f7e5 ffb5 	bl	80002d8 <__aeabi_dsub>
 801a36e:	4632      	mov	r2, r6
 801a370:	463b      	mov	r3, r7
 801a372:	f7e6 f969 	bl	8000648 <__aeabi_dmul>
 801a376:	a35c      	add	r3, pc, #368	@ (adr r3, 801a4e8 <atan+0x2f0>)
 801a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a37c:	f7e5 ffac 	bl	80002d8 <__aeabi_dsub>
 801a380:	4632      	mov	r2, r6
 801a382:	463b      	mov	r3, r7
 801a384:	f7e6 f960 	bl	8000648 <__aeabi_dmul>
 801a388:	a359      	add	r3, pc, #356	@ (adr r3, 801a4f0 <atan+0x2f8>)
 801a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38e:	f7e5 ffa3 	bl	80002d8 <__aeabi_dsub>
 801a392:	4632      	mov	r2, r6
 801a394:	463b      	mov	r3, r7
 801a396:	f7e6 f957 	bl	8000648 <__aeabi_dmul>
 801a39a:	4602      	mov	r2, r0
 801a39c:	460b      	mov	r3, r1
 801a39e:	4640      	mov	r0, r8
 801a3a0:	4649      	mov	r1, r9
 801a3a2:	f7e5 ff9b 	bl	80002dc <__adddf3>
 801a3a6:	4622      	mov	r2, r4
 801a3a8:	462b      	mov	r3, r5
 801a3aa:	f7e6 f94d 	bl	8000648 <__aeabi_dmul>
 801a3ae:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a3b2:	4602      	mov	r2, r0
 801a3b4:	460b      	mov	r3, r1
 801a3b6:	d148      	bne.n	801a44a <atan+0x252>
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	4629      	mov	r1, r5
 801a3bc:	f7e5 ff8c 	bl	80002d8 <__aeabi_dsub>
 801a3c0:	e72f      	b.n	801a222 <atan+0x2a>
 801a3c2:	4b52      	ldr	r3, [pc, #328]	@ (801a50c <atan+0x314>)
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	4629      	mov	r1, r5
 801a3ca:	f7e5 ff85 	bl	80002d8 <__aeabi_dsub>
 801a3ce:	4b4f      	ldr	r3, [pc, #316]	@ (801a50c <atan+0x314>)
 801a3d0:	4606      	mov	r6, r0
 801a3d2:	460f      	mov	r7, r1
 801a3d4:	2200      	movs	r2, #0
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	4629      	mov	r1, r5
 801a3da:	f7e5 ff7f 	bl	80002dc <__adddf3>
 801a3de:	4602      	mov	r2, r0
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	4630      	mov	r0, r6
 801a3e4:	4639      	mov	r1, r7
 801a3e6:	f7e6 fa59 	bl	800089c <__aeabi_ddiv>
 801a3ea:	f04f 0a01 	mov.w	sl, #1
 801a3ee:	4604      	mov	r4, r0
 801a3f0:	460d      	mov	r5, r1
 801a3f2:	e765      	b.n	801a2c0 <atan+0xc8>
 801a3f4:	4b47      	ldr	r3, [pc, #284]	@ (801a514 <atan+0x31c>)
 801a3f6:	429e      	cmp	r6, r3
 801a3f8:	d21c      	bcs.n	801a434 <atan+0x23c>
 801a3fa:	4b47      	ldr	r3, [pc, #284]	@ (801a518 <atan+0x320>)
 801a3fc:	2200      	movs	r2, #0
 801a3fe:	4620      	mov	r0, r4
 801a400:	4629      	mov	r1, r5
 801a402:	f7e5 ff69 	bl	80002d8 <__aeabi_dsub>
 801a406:	4b44      	ldr	r3, [pc, #272]	@ (801a518 <atan+0x320>)
 801a408:	4606      	mov	r6, r0
 801a40a:	460f      	mov	r7, r1
 801a40c:	2200      	movs	r2, #0
 801a40e:	4620      	mov	r0, r4
 801a410:	4629      	mov	r1, r5
 801a412:	f7e6 f919 	bl	8000648 <__aeabi_dmul>
 801a416:	4b3d      	ldr	r3, [pc, #244]	@ (801a50c <atan+0x314>)
 801a418:	2200      	movs	r2, #0
 801a41a:	f7e5 ff5f 	bl	80002dc <__adddf3>
 801a41e:	4602      	mov	r2, r0
 801a420:	460b      	mov	r3, r1
 801a422:	4630      	mov	r0, r6
 801a424:	4639      	mov	r1, r7
 801a426:	f7e6 fa39 	bl	800089c <__aeabi_ddiv>
 801a42a:	f04f 0a02 	mov.w	sl, #2
 801a42e:	4604      	mov	r4, r0
 801a430:	460d      	mov	r5, r1
 801a432:	e745      	b.n	801a2c0 <atan+0xc8>
 801a434:	4622      	mov	r2, r4
 801a436:	462b      	mov	r3, r5
 801a438:	4938      	ldr	r1, [pc, #224]	@ (801a51c <atan+0x324>)
 801a43a:	2000      	movs	r0, #0
 801a43c:	f7e6 fa2e 	bl	800089c <__aeabi_ddiv>
 801a440:	f04f 0a03 	mov.w	sl, #3
 801a444:	4604      	mov	r4, r0
 801a446:	460d      	mov	r5, r1
 801a448:	e73a      	b.n	801a2c0 <atan+0xc8>
 801a44a:	4b35      	ldr	r3, [pc, #212]	@ (801a520 <atan+0x328>)
 801a44c:	4e35      	ldr	r6, [pc, #212]	@ (801a524 <atan+0x32c>)
 801a44e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a456:	f7e5 ff3f 	bl	80002d8 <__aeabi_dsub>
 801a45a:	4622      	mov	r2, r4
 801a45c:	462b      	mov	r3, r5
 801a45e:	f7e5 ff3b 	bl	80002d8 <__aeabi_dsub>
 801a462:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a466:	4602      	mov	r2, r0
 801a468:	460b      	mov	r3, r1
 801a46a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a46e:	f7e5 ff33 	bl	80002d8 <__aeabi_dsub>
 801a472:	f1bb 0f00 	cmp.w	fp, #0
 801a476:	4604      	mov	r4, r0
 801a478:	460d      	mov	r5, r1
 801a47a:	f6bf aedc 	bge.w	801a236 <atan+0x3e>
 801a47e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a482:	461d      	mov	r5, r3
 801a484:	e6d7      	b.n	801a236 <atan+0x3e>
 801a486:	a51c      	add	r5, pc, #112	@ (adr r5, 801a4f8 <atan+0x300>)
 801a488:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a48c:	e6d3      	b.n	801a236 <atan+0x3e>
 801a48e:	bf00      	nop
 801a490:	54442d18 	.word	0x54442d18
 801a494:	3ff921fb 	.word	0x3ff921fb
 801a498:	8800759c 	.word	0x8800759c
 801a49c:	7e37e43c 	.word	0x7e37e43c
 801a4a0:	e322da11 	.word	0xe322da11
 801a4a4:	3f90ad3a 	.word	0x3f90ad3a
 801a4a8:	24760deb 	.word	0x24760deb
 801a4ac:	3fa97b4b 	.word	0x3fa97b4b
 801a4b0:	a0d03d51 	.word	0xa0d03d51
 801a4b4:	3fb10d66 	.word	0x3fb10d66
 801a4b8:	c54c206e 	.word	0xc54c206e
 801a4bc:	3fb745cd 	.word	0x3fb745cd
 801a4c0:	920083ff 	.word	0x920083ff
 801a4c4:	3fc24924 	.word	0x3fc24924
 801a4c8:	5555550d 	.word	0x5555550d
 801a4cc:	3fd55555 	.word	0x3fd55555
 801a4d0:	2c6a6c2f 	.word	0x2c6a6c2f
 801a4d4:	bfa2b444 	.word	0xbfa2b444
 801a4d8:	52defd9a 	.word	0x52defd9a
 801a4dc:	3fadde2d 	.word	0x3fadde2d
 801a4e0:	af749a6d 	.word	0xaf749a6d
 801a4e4:	3fb3b0f2 	.word	0x3fb3b0f2
 801a4e8:	fe231671 	.word	0xfe231671
 801a4ec:	3fbc71c6 	.word	0x3fbc71c6
 801a4f0:	9998ebc4 	.word	0x9998ebc4
 801a4f4:	3fc99999 	.word	0x3fc99999
 801a4f8:	54442d18 	.word	0x54442d18
 801a4fc:	bff921fb 	.word	0xbff921fb
 801a500:	440fffff 	.word	0x440fffff
 801a504:	7ff00000 	.word	0x7ff00000
 801a508:	3fdbffff 	.word	0x3fdbffff
 801a50c:	3ff00000 	.word	0x3ff00000
 801a510:	3ff2ffff 	.word	0x3ff2ffff
 801a514:	40038000 	.word	0x40038000
 801a518:	3ff80000 	.word	0x3ff80000
 801a51c:	bff00000 	.word	0xbff00000
 801a520:	0801d908 	.word	0x0801d908
 801a524:	0801d928 	.word	0x0801d928

0801a528 <fabs>:
 801a528:	ec51 0b10 	vmov	r0, r1, d0
 801a52c:	4602      	mov	r2, r0
 801a52e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a532:	ec43 2b10 	vmov	d0, r2, r3
 801a536:	4770      	bx	lr

0801a538 <__ieee754_sqrtf>:
 801a538:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a53c:	4770      	bx	lr
	...

0801a540 <calloc>:
 801a540:	4b02      	ldr	r3, [pc, #8]	@ (801a54c <calloc+0xc>)
 801a542:	460a      	mov	r2, r1
 801a544:	4601      	mov	r1, r0
 801a546:	6818      	ldr	r0, [r3, #0]
 801a548:	f000 b802 	b.w	801a550 <_calloc_r>
 801a54c:	20000a74 	.word	0x20000a74

0801a550 <_calloc_r>:
 801a550:	b570      	push	{r4, r5, r6, lr}
 801a552:	fba1 5402 	umull	r5, r4, r1, r2
 801a556:	b93c      	cbnz	r4, 801a568 <_calloc_r+0x18>
 801a558:	4629      	mov	r1, r5
 801a55a:	f000 f899 	bl	801a690 <_malloc_r>
 801a55e:	4606      	mov	r6, r0
 801a560:	b928      	cbnz	r0, 801a56e <_calloc_r+0x1e>
 801a562:	2600      	movs	r6, #0
 801a564:	4630      	mov	r0, r6
 801a566:	bd70      	pop	{r4, r5, r6, pc}
 801a568:	220c      	movs	r2, #12
 801a56a:	6002      	str	r2, [r0, #0]
 801a56c:	e7f9      	b.n	801a562 <_calloc_r+0x12>
 801a56e:	462a      	mov	r2, r5
 801a570:	4621      	mov	r1, r4
 801a572:	f000 fd82 	bl	801b07a <memset>
 801a576:	e7f5      	b.n	801a564 <_calloc_r+0x14>

0801a578 <exit>:
 801a578:	b508      	push	{r3, lr}
 801a57a:	4b06      	ldr	r3, [pc, #24]	@ (801a594 <exit+0x1c>)
 801a57c:	4604      	mov	r4, r0
 801a57e:	b113      	cbz	r3, 801a586 <exit+0xe>
 801a580:	2100      	movs	r1, #0
 801a582:	f3af 8000 	nop.w
 801a586:	4b04      	ldr	r3, [pc, #16]	@ (801a598 <exit+0x20>)
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	b103      	cbz	r3, 801a58e <exit+0x16>
 801a58c:	4798      	blx	r3
 801a58e:	4620      	mov	r0, r4
 801a590:	f7e8 f84a 	bl	8002628 <_exit>
 801a594:	00000000 	.word	0x00000000
 801a598:	20016080 	.word	0x20016080

0801a59c <getenv>:
 801a59c:	b507      	push	{r0, r1, r2, lr}
 801a59e:	4b04      	ldr	r3, [pc, #16]	@ (801a5b0 <getenv+0x14>)
 801a5a0:	4601      	mov	r1, r0
 801a5a2:	aa01      	add	r2, sp, #4
 801a5a4:	6818      	ldr	r0, [r3, #0]
 801a5a6:	f000 f805 	bl	801a5b4 <_findenv_r>
 801a5aa:	b003      	add	sp, #12
 801a5ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801a5b0:	20000a74 	.word	0x20000a74

0801a5b4 <_findenv_r>:
 801a5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5b8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801a628 <_findenv_r+0x74>
 801a5bc:	4606      	mov	r6, r0
 801a5be:	4689      	mov	r9, r1
 801a5c0:	4617      	mov	r7, r2
 801a5c2:	f000 fdf7 	bl	801b1b4 <__env_lock>
 801a5c6:	f8da 4000 	ldr.w	r4, [sl]
 801a5ca:	b134      	cbz	r4, 801a5da <_findenv_r+0x26>
 801a5cc:	464b      	mov	r3, r9
 801a5ce:	4698      	mov	r8, r3
 801a5d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5d4:	b13a      	cbz	r2, 801a5e6 <_findenv_r+0x32>
 801a5d6:	2a3d      	cmp	r2, #61	@ 0x3d
 801a5d8:	d1f9      	bne.n	801a5ce <_findenv_r+0x1a>
 801a5da:	4630      	mov	r0, r6
 801a5dc:	f000 fdf0 	bl	801b1c0 <__env_unlock>
 801a5e0:	2000      	movs	r0, #0
 801a5e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e6:	eba8 0809 	sub.w	r8, r8, r9
 801a5ea:	46a3      	mov	fp, r4
 801a5ec:	f854 0b04 	ldr.w	r0, [r4], #4
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	d0f2      	beq.n	801a5da <_findenv_r+0x26>
 801a5f4:	4642      	mov	r2, r8
 801a5f6:	4649      	mov	r1, r9
 801a5f8:	f000 fced 	bl	801afd6 <strncmp>
 801a5fc:	2800      	cmp	r0, #0
 801a5fe:	d1f4      	bne.n	801a5ea <_findenv_r+0x36>
 801a600:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a604:	eb03 0508 	add.w	r5, r3, r8
 801a608:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a60c:	2b3d      	cmp	r3, #61	@ 0x3d
 801a60e:	d1ec      	bne.n	801a5ea <_findenv_r+0x36>
 801a610:	f8da 3000 	ldr.w	r3, [sl]
 801a614:	ebab 0303 	sub.w	r3, fp, r3
 801a618:	109b      	asrs	r3, r3, #2
 801a61a:	4630      	mov	r0, r6
 801a61c:	603b      	str	r3, [r7, #0]
 801a61e:	f000 fdcf 	bl	801b1c0 <__env_unlock>
 801a622:	1c68      	adds	r0, r5, #1
 801a624:	e7dd      	b.n	801a5e2 <_findenv_r+0x2e>
 801a626:	bf00      	nop
 801a628:	20000000 	.word	0x20000000

0801a62c <malloc>:
 801a62c:	4b02      	ldr	r3, [pc, #8]	@ (801a638 <malloc+0xc>)
 801a62e:	4601      	mov	r1, r0
 801a630:	6818      	ldr	r0, [r3, #0]
 801a632:	f000 b82d 	b.w	801a690 <_malloc_r>
 801a636:	bf00      	nop
 801a638:	20000a74 	.word	0x20000a74

0801a63c <free>:
 801a63c:	4b02      	ldr	r3, [pc, #8]	@ (801a648 <free+0xc>)
 801a63e:	4601      	mov	r1, r0
 801a640:	6818      	ldr	r0, [r3, #0]
 801a642:	f000 bdc3 	b.w	801b1cc <_free_r>
 801a646:	bf00      	nop
 801a648:	20000a74 	.word	0x20000a74

0801a64c <sbrk_aligned>:
 801a64c:	b570      	push	{r4, r5, r6, lr}
 801a64e:	4e0f      	ldr	r6, [pc, #60]	@ (801a68c <sbrk_aligned+0x40>)
 801a650:	460c      	mov	r4, r1
 801a652:	6831      	ldr	r1, [r6, #0]
 801a654:	4605      	mov	r5, r0
 801a656:	b911      	cbnz	r1, 801a65e <sbrk_aligned+0x12>
 801a658:	f000 fd3a 	bl	801b0d0 <_sbrk_r>
 801a65c:	6030      	str	r0, [r6, #0]
 801a65e:	4621      	mov	r1, r4
 801a660:	4628      	mov	r0, r5
 801a662:	f000 fd35 	bl	801b0d0 <_sbrk_r>
 801a666:	1c43      	adds	r3, r0, #1
 801a668:	d103      	bne.n	801a672 <sbrk_aligned+0x26>
 801a66a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a66e:	4620      	mov	r0, r4
 801a670:	bd70      	pop	{r4, r5, r6, pc}
 801a672:	1cc4      	adds	r4, r0, #3
 801a674:	f024 0403 	bic.w	r4, r4, #3
 801a678:	42a0      	cmp	r0, r4
 801a67a:	d0f8      	beq.n	801a66e <sbrk_aligned+0x22>
 801a67c:	1a21      	subs	r1, r4, r0
 801a67e:	4628      	mov	r0, r5
 801a680:	f000 fd26 	bl	801b0d0 <_sbrk_r>
 801a684:	3001      	adds	r0, #1
 801a686:	d1f2      	bne.n	801a66e <sbrk_aligned+0x22>
 801a688:	e7ef      	b.n	801a66a <sbrk_aligned+0x1e>
 801a68a:	bf00      	nop
 801a68c:	20015f40 	.word	0x20015f40

0801a690 <_malloc_r>:
 801a690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a694:	1ccd      	adds	r5, r1, #3
 801a696:	f025 0503 	bic.w	r5, r5, #3
 801a69a:	3508      	adds	r5, #8
 801a69c:	2d0c      	cmp	r5, #12
 801a69e:	bf38      	it	cc
 801a6a0:	250c      	movcc	r5, #12
 801a6a2:	2d00      	cmp	r5, #0
 801a6a4:	4606      	mov	r6, r0
 801a6a6:	db01      	blt.n	801a6ac <_malloc_r+0x1c>
 801a6a8:	42a9      	cmp	r1, r5
 801a6aa:	d904      	bls.n	801a6b6 <_malloc_r+0x26>
 801a6ac:	230c      	movs	r3, #12
 801a6ae:	6033      	str	r3, [r6, #0]
 801a6b0:	2000      	movs	r0, #0
 801a6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a78c <_malloc_r+0xfc>
 801a6ba:	f000 f89d 	bl	801a7f8 <__malloc_lock>
 801a6be:	f8d8 3000 	ldr.w	r3, [r8]
 801a6c2:	461c      	mov	r4, r3
 801a6c4:	bb44      	cbnz	r4, 801a718 <_malloc_r+0x88>
 801a6c6:	4629      	mov	r1, r5
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	f7ff ffbf 	bl	801a64c <sbrk_aligned>
 801a6ce:	1c43      	adds	r3, r0, #1
 801a6d0:	4604      	mov	r4, r0
 801a6d2:	d158      	bne.n	801a786 <_malloc_r+0xf6>
 801a6d4:	f8d8 4000 	ldr.w	r4, [r8]
 801a6d8:	4627      	mov	r7, r4
 801a6da:	2f00      	cmp	r7, #0
 801a6dc:	d143      	bne.n	801a766 <_malloc_r+0xd6>
 801a6de:	2c00      	cmp	r4, #0
 801a6e0:	d04b      	beq.n	801a77a <_malloc_r+0xea>
 801a6e2:	6823      	ldr	r3, [r4, #0]
 801a6e4:	4639      	mov	r1, r7
 801a6e6:	4630      	mov	r0, r6
 801a6e8:	eb04 0903 	add.w	r9, r4, r3
 801a6ec:	f000 fcf0 	bl	801b0d0 <_sbrk_r>
 801a6f0:	4581      	cmp	r9, r0
 801a6f2:	d142      	bne.n	801a77a <_malloc_r+0xea>
 801a6f4:	6821      	ldr	r1, [r4, #0]
 801a6f6:	1a6d      	subs	r5, r5, r1
 801a6f8:	4629      	mov	r1, r5
 801a6fa:	4630      	mov	r0, r6
 801a6fc:	f7ff ffa6 	bl	801a64c <sbrk_aligned>
 801a700:	3001      	adds	r0, #1
 801a702:	d03a      	beq.n	801a77a <_malloc_r+0xea>
 801a704:	6823      	ldr	r3, [r4, #0]
 801a706:	442b      	add	r3, r5
 801a708:	6023      	str	r3, [r4, #0]
 801a70a:	f8d8 3000 	ldr.w	r3, [r8]
 801a70e:	685a      	ldr	r2, [r3, #4]
 801a710:	bb62      	cbnz	r2, 801a76c <_malloc_r+0xdc>
 801a712:	f8c8 7000 	str.w	r7, [r8]
 801a716:	e00f      	b.n	801a738 <_malloc_r+0xa8>
 801a718:	6822      	ldr	r2, [r4, #0]
 801a71a:	1b52      	subs	r2, r2, r5
 801a71c:	d420      	bmi.n	801a760 <_malloc_r+0xd0>
 801a71e:	2a0b      	cmp	r2, #11
 801a720:	d917      	bls.n	801a752 <_malloc_r+0xc2>
 801a722:	1961      	adds	r1, r4, r5
 801a724:	42a3      	cmp	r3, r4
 801a726:	6025      	str	r5, [r4, #0]
 801a728:	bf18      	it	ne
 801a72a:	6059      	strne	r1, [r3, #4]
 801a72c:	6863      	ldr	r3, [r4, #4]
 801a72e:	bf08      	it	eq
 801a730:	f8c8 1000 	streq.w	r1, [r8]
 801a734:	5162      	str	r2, [r4, r5]
 801a736:	604b      	str	r3, [r1, #4]
 801a738:	4630      	mov	r0, r6
 801a73a:	f000 f863 	bl	801a804 <__malloc_unlock>
 801a73e:	f104 000b 	add.w	r0, r4, #11
 801a742:	1d23      	adds	r3, r4, #4
 801a744:	f020 0007 	bic.w	r0, r0, #7
 801a748:	1ac2      	subs	r2, r0, r3
 801a74a:	bf1c      	itt	ne
 801a74c:	1a1b      	subne	r3, r3, r0
 801a74e:	50a3      	strne	r3, [r4, r2]
 801a750:	e7af      	b.n	801a6b2 <_malloc_r+0x22>
 801a752:	6862      	ldr	r2, [r4, #4]
 801a754:	42a3      	cmp	r3, r4
 801a756:	bf0c      	ite	eq
 801a758:	f8c8 2000 	streq.w	r2, [r8]
 801a75c:	605a      	strne	r2, [r3, #4]
 801a75e:	e7eb      	b.n	801a738 <_malloc_r+0xa8>
 801a760:	4623      	mov	r3, r4
 801a762:	6864      	ldr	r4, [r4, #4]
 801a764:	e7ae      	b.n	801a6c4 <_malloc_r+0x34>
 801a766:	463c      	mov	r4, r7
 801a768:	687f      	ldr	r7, [r7, #4]
 801a76a:	e7b6      	b.n	801a6da <_malloc_r+0x4a>
 801a76c:	461a      	mov	r2, r3
 801a76e:	685b      	ldr	r3, [r3, #4]
 801a770:	42a3      	cmp	r3, r4
 801a772:	d1fb      	bne.n	801a76c <_malloc_r+0xdc>
 801a774:	2300      	movs	r3, #0
 801a776:	6053      	str	r3, [r2, #4]
 801a778:	e7de      	b.n	801a738 <_malloc_r+0xa8>
 801a77a:	230c      	movs	r3, #12
 801a77c:	6033      	str	r3, [r6, #0]
 801a77e:	4630      	mov	r0, r6
 801a780:	f000 f840 	bl	801a804 <__malloc_unlock>
 801a784:	e794      	b.n	801a6b0 <_malloc_r+0x20>
 801a786:	6005      	str	r5, [r0, #0]
 801a788:	e7d6      	b.n	801a738 <_malloc_r+0xa8>
 801a78a:	bf00      	nop
 801a78c:	20015f44 	.word	0x20015f44

0801a790 <sniprintf>:
 801a790:	b40c      	push	{r2, r3}
 801a792:	b530      	push	{r4, r5, lr}
 801a794:	4b17      	ldr	r3, [pc, #92]	@ (801a7f4 <sniprintf+0x64>)
 801a796:	1e0c      	subs	r4, r1, #0
 801a798:	681d      	ldr	r5, [r3, #0]
 801a79a:	b09d      	sub	sp, #116	@ 0x74
 801a79c:	da08      	bge.n	801a7b0 <sniprintf+0x20>
 801a79e:	238b      	movs	r3, #139	@ 0x8b
 801a7a0:	602b      	str	r3, [r5, #0]
 801a7a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a7a6:	b01d      	add	sp, #116	@ 0x74
 801a7a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7ac:	b002      	add	sp, #8
 801a7ae:	4770      	bx	lr
 801a7b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a7b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a7b8:	bf14      	ite	ne
 801a7ba:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a7be:	4623      	moveq	r3, r4
 801a7c0:	9304      	str	r3, [sp, #16]
 801a7c2:	9307      	str	r3, [sp, #28]
 801a7c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a7c8:	9002      	str	r0, [sp, #8]
 801a7ca:	9006      	str	r0, [sp, #24]
 801a7cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a7d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a7d2:	ab21      	add	r3, sp, #132	@ 0x84
 801a7d4:	a902      	add	r1, sp, #8
 801a7d6:	4628      	mov	r0, r5
 801a7d8:	9301      	str	r3, [sp, #4]
 801a7da:	f000 fd9d 	bl	801b318 <_svfiprintf_r>
 801a7de:	1c43      	adds	r3, r0, #1
 801a7e0:	bfbc      	itt	lt
 801a7e2:	238b      	movlt	r3, #139	@ 0x8b
 801a7e4:	602b      	strlt	r3, [r5, #0]
 801a7e6:	2c00      	cmp	r4, #0
 801a7e8:	d0dd      	beq.n	801a7a6 <sniprintf+0x16>
 801a7ea:	9b02      	ldr	r3, [sp, #8]
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	701a      	strb	r2, [r3, #0]
 801a7f0:	e7d9      	b.n	801a7a6 <sniprintf+0x16>
 801a7f2:	bf00      	nop
 801a7f4:	20000a74 	.word	0x20000a74

0801a7f8 <__malloc_lock>:
 801a7f8:	4801      	ldr	r0, [pc, #4]	@ (801a800 <__malloc_lock+0x8>)
 801a7fa:	f000 bca4 	b.w	801b146 <__retarget_lock_acquire_recursive>
 801a7fe:	bf00      	nop
 801a800:	20016085 	.word	0x20016085

0801a804 <__malloc_unlock>:
 801a804:	4801      	ldr	r0, [pc, #4]	@ (801a80c <__malloc_unlock+0x8>)
 801a806:	f000 bc9f 	b.w	801b148 <__retarget_lock_release_recursive>
 801a80a:	bf00      	nop
 801a80c:	20016085 	.word	0x20016085

0801a810 <srand>:
 801a810:	b538      	push	{r3, r4, r5, lr}
 801a812:	4b10      	ldr	r3, [pc, #64]	@ (801a854 <srand+0x44>)
 801a814:	681d      	ldr	r5, [r3, #0]
 801a816:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a818:	4604      	mov	r4, r0
 801a81a:	b9b3      	cbnz	r3, 801a84a <srand+0x3a>
 801a81c:	2018      	movs	r0, #24
 801a81e:	f7ff ff05 	bl	801a62c <malloc>
 801a822:	4602      	mov	r2, r0
 801a824:	6328      	str	r0, [r5, #48]	@ 0x30
 801a826:	b920      	cbnz	r0, 801a832 <srand+0x22>
 801a828:	4b0b      	ldr	r3, [pc, #44]	@ (801a858 <srand+0x48>)
 801a82a:	480c      	ldr	r0, [pc, #48]	@ (801a85c <srand+0x4c>)
 801a82c:	2146      	movs	r1, #70	@ 0x46
 801a82e:	f000 fca3 	bl	801b178 <__assert_func>
 801a832:	490b      	ldr	r1, [pc, #44]	@ (801a860 <srand+0x50>)
 801a834:	4b0b      	ldr	r3, [pc, #44]	@ (801a864 <srand+0x54>)
 801a836:	e9c0 1300 	strd	r1, r3, [r0]
 801a83a:	4b0b      	ldr	r3, [pc, #44]	@ (801a868 <srand+0x58>)
 801a83c:	6083      	str	r3, [r0, #8]
 801a83e:	230b      	movs	r3, #11
 801a840:	8183      	strh	r3, [r0, #12]
 801a842:	2100      	movs	r1, #0
 801a844:	2001      	movs	r0, #1
 801a846:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a84a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a84c:	2200      	movs	r2, #0
 801a84e:	611c      	str	r4, [r3, #16]
 801a850:	615a      	str	r2, [r3, #20]
 801a852:	bd38      	pop	{r3, r4, r5, pc}
 801a854:	20000a74 	.word	0x20000a74
 801a858:	0801d948 	.word	0x0801d948
 801a85c:	0801d95f 	.word	0x0801d95f
 801a860:	abcd330e 	.word	0xabcd330e
 801a864:	e66d1234 	.word	0xe66d1234
 801a868:	0005deec 	.word	0x0005deec

0801a86c <rand>:
 801a86c:	4b16      	ldr	r3, [pc, #88]	@ (801a8c8 <rand+0x5c>)
 801a86e:	b510      	push	{r4, lr}
 801a870:	681c      	ldr	r4, [r3, #0]
 801a872:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a874:	b9b3      	cbnz	r3, 801a8a4 <rand+0x38>
 801a876:	2018      	movs	r0, #24
 801a878:	f7ff fed8 	bl	801a62c <malloc>
 801a87c:	4602      	mov	r2, r0
 801a87e:	6320      	str	r0, [r4, #48]	@ 0x30
 801a880:	b920      	cbnz	r0, 801a88c <rand+0x20>
 801a882:	4b12      	ldr	r3, [pc, #72]	@ (801a8cc <rand+0x60>)
 801a884:	4812      	ldr	r0, [pc, #72]	@ (801a8d0 <rand+0x64>)
 801a886:	2152      	movs	r1, #82	@ 0x52
 801a888:	f000 fc76 	bl	801b178 <__assert_func>
 801a88c:	4911      	ldr	r1, [pc, #68]	@ (801a8d4 <rand+0x68>)
 801a88e:	4b12      	ldr	r3, [pc, #72]	@ (801a8d8 <rand+0x6c>)
 801a890:	e9c0 1300 	strd	r1, r3, [r0]
 801a894:	4b11      	ldr	r3, [pc, #68]	@ (801a8dc <rand+0x70>)
 801a896:	6083      	str	r3, [r0, #8]
 801a898:	230b      	movs	r3, #11
 801a89a:	8183      	strh	r3, [r0, #12]
 801a89c:	2100      	movs	r1, #0
 801a89e:	2001      	movs	r0, #1
 801a8a0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a8a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a8a6:	480e      	ldr	r0, [pc, #56]	@ (801a8e0 <rand+0x74>)
 801a8a8:	690b      	ldr	r3, [r1, #16]
 801a8aa:	694c      	ldr	r4, [r1, #20]
 801a8ac:	4a0d      	ldr	r2, [pc, #52]	@ (801a8e4 <rand+0x78>)
 801a8ae:	4358      	muls	r0, r3
 801a8b0:	fb02 0004 	mla	r0, r2, r4, r0
 801a8b4:	fba3 3202 	umull	r3, r2, r3, r2
 801a8b8:	3301      	adds	r3, #1
 801a8ba:	eb40 0002 	adc.w	r0, r0, r2
 801a8be:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a8c2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a8c6:	bd10      	pop	{r4, pc}
 801a8c8:	20000a74 	.word	0x20000a74
 801a8cc:	0801d948 	.word	0x0801d948
 801a8d0:	0801d95f 	.word	0x0801d95f
 801a8d4:	abcd330e 	.word	0xabcd330e
 801a8d8:	e66d1234 	.word	0xe66d1234
 801a8dc:	0005deec 	.word	0x0005deec
 801a8e0:	5851f42d 	.word	0x5851f42d
 801a8e4:	4c957f2d 	.word	0x4c957f2d

0801a8e8 <realloc>:
 801a8e8:	4b02      	ldr	r3, [pc, #8]	@ (801a8f4 <realloc+0xc>)
 801a8ea:	460a      	mov	r2, r1
 801a8ec:	4601      	mov	r1, r0
 801a8ee:	6818      	ldr	r0, [r3, #0]
 801a8f0:	f000 b8a6 	b.w	801aa40 <_realloc_r>
 801a8f4:	20000a74 	.word	0x20000a74

0801a8f8 <std>:
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	b510      	push	{r4, lr}
 801a8fc:	4604      	mov	r4, r0
 801a8fe:	e9c0 3300 	strd	r3, r3, [r0]
 801a902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a906:	6083      	str	r3, [r0, #8]
 801a908:	8181      	strh	r1, [r0, #12]
 801a90a:	6643      	str	r3, [r0, #100]	@ 0x64
 801a90c:	81c2      	strh	r2, [r0, #14]
 801a90e:	6183      	str	r3, [r0, #24]
 801a910:	4619      	mov	r1, r3
 801a912:	2208      	movs	r2, #8
 801a914:	305c      	adds	r0, #92	@ 0x5c
 801a916:	f000 fbb0 	bl	801b07a <memset>
 801a91a:	4b0d      	ldr	r3, [pc, #52]	@ (801a950 <std+0x58>)
 801a91c:	6263      	str	r3, [r4, #36]	@ 0x24
 801a91e:	4b0d      	ldr	r3, [pc, #52]	@ (801a954 <std+0x5c>)
 801a920:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a922:	4b0d      	ldr	r3, [pc, #52]	@ (801a958 <std+0x60>)
 801a924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a926:	4b0d      	ldr	r3, [pc, #52]	@ (801a95c <std+0x64>)
 801a928:	6323      	str	r3, [r4, #48]	@ 0x30
 801a92a:	4b0d      	ldr	r3, [pc, #52]	@ (801a960 <std+0x68>)
 801a92c:	6224      	str	r4, [r4, #32]
 801a92e:	429c      	cmp	r4, r3
 801a930:	d006      	beq.n	801a940 <std+0x48>
 801a932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a936:	4294      	cmp	r4, r2
 801a938:	d002      	beq.n	801a940 <std+0x48>
 801a93a:	33d0      	adds	r3, #208	@ 0xd0
 801a93c:	429c      	cmp	r4, r3
 801a93e:	d105      	bne.n	801a94c <std+0x54>
 801a940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a948:	f000 bbfc 	b.w	801b144 <__retarget_lock_init_recursive>
 801a94c:	bd10      	pop	{r4, pc}
 801a94e:	bf00      	nop
 801a950:	0801bc19 	.word	0x0801bc19
 801a954:	0801bc3b 	.word	0x0801bc3b
 801a958:	0801bc73 	.word	0x0801bc73
 801a95c:	0801bc97 	.word	0x0801bc97
 801a960:	20015f48 	.word	0x20015f48

0801a964 <stdio_exit_handler>:
 801a964:	4a02      	ldr	r2, [pc, #8]	@ (801a970 <stdio_exit_handler+0xc>)
 801a966:	4903      	ldr	r1, [pc, #12]	@ (801a974 <stdio_exit_handler+0x10>)
 801a968:	4803      	ldr	r0, [pc, #12]	@ (801a978 <stdio_exit_handler+0x14>)
 801a96a:	f000 b90f 	b.w	801ab8c <_fwalk_sglue>
 801a96e:	bf00      	nop
 801a970:	20000a68 	.word	0x20000a68
 801a974:	0801bbb9 	.word	0x0801bbb9
 801a978:	20000a78 	.word	0x20000a78

0801a97c <cleanup_stdio>:
 801a97c:	6841      	ldr	r1, [r0, #4]
 801a97e:	4b0c      	ldr	r3, [pc, #48]	@ (801a9b0 <cleanup_stdio+0x34>)
 801a980:	4299      	cmp	r1, r3
 801a982:	b510      	push	{r4, lr}
 801a984:	4604      	mov	r4, r0
 801a986:	d001      	beq.n	801a98c <cleanup_stdio+0x10>
 801a988:	f001 f916 	bl	801bbb8 <_fflush_r>
 801a98c:	68a1      	ldr	r1, [r4, #8]
 801a98e:	4b09      	ldr	r3, [pc, #36]	@ (801a9b4 <cleanup_stdio+0x38>)
 801a990:	4299      	cmp	r1, r3
 801a992:	d002      	beq.n	801a99a <cleanup_stdio+0x1e>
 801a994:	4620      	mov	r0, r4
 801a996:	f001 f90f 	bl	801bbb8 <_fflush_r>
 801a99a:	68e1      	ldr	r1, [r4, #12]
 801a99c:	4b06      	ldr	r3, [pc, #24]	@ (801a9b8 <cleanup_stdio+0x3c>)
 801a99e:	4299      	cmp	r1, r3
 801a9a0:	d004      	beq.n	801a9ac <cleanup_stdio+0x30>
 801a9a2:	4620      	mov	r0, r4
 801a9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9a8:	f001 b906 	b.w	801bbb8 <_fflush_r>
 801a9ac:	bd10      	pop	{r4, pc}
 801a9ae:	bf00      	nop
 801a9b0:	20015f48 	.word	0x20015f48
 801a9b4:	20015fb0 	.word	0x20015fb0
 801a9b8:	20016018 	.word	0x20016018

0801a9bc <global_stdio_init.part.0>:
 801a9bc:	b510      	push	{r4, lr}
 801a9be:	4b0b      	ldr	r3, [pc, #44]	@ (801a9ec <global_stdio_init.part.0+0x30>)
 801a9c0:	4c0b      	ldr	r4, [pc, #44]	@ (801a9f0 <global_stdio_init.part.0+0x34>)
 801a9c2:	4a0c      	ldr	r2, [pc, #48]	@ (801a9f4 <global_stdio_init.part.0+0x38>)
 801a9c4:	601a      	str	r2, [r3, #0]
 801a9c6:	4620      	mov	r0, r4
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	2104      	movs	r1, #4
 801a9cc:	f7ff ff94 	bl	801a8f8 <std>
 801a9d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a9d4:	2201      	movs	r2, #1
 801a9d6:	2109      	movs	r1, #9
 801a9d8:	f7ff ff8e 	bl	801a8f8 <std>
 801a9dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a9e0:	2202      	movs	r2, #2
 801a9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9e6:	2112      	movs	r1, #18
 801a9e8:	f7ff bf86 	b.w	801a8f8 <std>
 801a9ec:	20016080 	.word	0x20016080
 801a9f0:	20015f48 	.word	0x20015f48
 801a9f4:	0801a965 	.word	0x0801a965

0801a9f8 <__sfp_lock_acquire>:
 801a9f8:	4801      	ldr	r0, [pc, #4]	@ (801aa00 <__sfp_lock_acquire+0x8>)
 801a9fa:	f000 bba4 	b.w	801b146 <__retarget_lock_acquire_recursive>
 801a9fe:	bf00      	nop
 801aa00:	20016086 	.word	0x20016086

0801aa04 <__sfp_lock_release>:
 801aa04:	4801      	ldr	r0, [pc, #4]	@ (801aa0c <__sfp_lock_release+0x8>)
 801aa06:	f000 bb9f 	b.w	801b148 <__retarget_lock_release_recursive>
 801aa0a:	bf00      	nop
 801aa0c:	20016086 	.word	0x20016086

0801aa10 <__sinit>:
 801aa10:	b510      	push	{r4, lr}
 801aa12:	4604      	mov	r4, r0
 801aa14:	f7ff fff0 	bl	801a9f8 <__sfp_lock_acquire>
 801aa18:	6a23      	ldr	r3, [r4, #32]
 801aa1a:	b11b      	cbz	r3, 801aa24 <__sinit+0x14>
 801aa1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa20:	f7ff bff0 	b.w	801aa04 <__sfp_lock_release>
 801aa24:	4b04      	ldr	r3, [pc, #16]	@ (801aa38 <__sinit+0x28>)
 801aa26:	6223      	str	r3, [r4, #32]
 801aa28:	4b04      	ldr	r3, [pc, #16]	@ (801aa3c <__sinit+0x2c>)
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d1f5      	bne.n	801aa1c <__sinit+0xc>
 801aa30:	f7ff ffc4 	bl	801a9bc <global_stdio_init.part.0>
 801aa34:	e7f2      	b.n	801aa1c <__sinit+0xc>
 801aa36:	bf00      	nop
 801aa38:	0801a97d 	.word	0x0801a97d
 801aa3c:	20016080 	.word	0x20016080

0801aa40 <_realloc_r>:
 801aa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa44:	4680      	mov	r8, r0
 801aa46:	4615      	mov	r5, r2
 801aa48:	460c      	mov	r4, r1
 801aa4a:	b921      	cbnz	r1, 801aa56 <_realloc_r+0x16>
 801aa4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa50:	4611      	mov	r1, r2
 801aa52:	f7ff be1d 	b.w	801a690 <_malloc_r>
 801aa56:	b92a      	cbnz	r2, 801aa64 <_realloc_r+0x24>
 801aa58:	f000 fbb8 	bl	801b1cc <_free_r>
 801aa5c:	2400      	movs	r4, #0
 801aa5e:	4620      	mov	r0, r4
 801aa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa64:	f001 f8d0 	bl	801bc08 <_malloc_usable_size_r>
 801aa68:	4285      	cmp	r5, r0
 801aa6a:	4606      	mov	r6, r0
 801aa6c:	d802      	bhi.n	801aa74 <_realloc_r+0x34>
 801aa6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801aa72:	d8f4      	bhi.n	801aa5e <_realloc_r+0x1e>
 801aa74:	4629      	mov	r1, r5
 801aa76:	4640      	mov	r0, r8
 801aa78:	f7ff fe0a 	bl	801a690 <_malloc_r>
 801aa7c:	4607      	mov	r7, r0
 801aa7e:	2800      	cmp	r0, #0
 801aa80:	d0ec      	beq.n	801aa5c <_realloc_r+0x1c>
 801aa82:	42b5      	cmp	r5, r6
 801aa84:	462a      	mov	r2, r5
 801aa86:	4621      	mov	r1, r4
 801aa88:	bf28      	it	cs
 801aa8a:	4632      	movcs	r2, r6
 801aa8c:	f000 fb5d 	bl	801b14a <memcpy>
 801aa90:	4621      	mov	r1, r4
 801aa92:	4640      	mov	r0, r8
 801aa94:	f000 fb9a 	bl	801b1cc <_free_r>
 801aa98:	463c      	mov	r4, r7
 801aa9a:	e7e0      	b.n	801aa5e <_realloc_r+0x1e>

0801aa9c <_strtoul_l.constprop.0>:
 801aa9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aaa0:	4e34      	ldr	r6, [pc, #208]	@ (801ab74 <_strtoul_l.constprop.0+0xd8>)
 801aaa2:	4686      	mov	lr, r0
 801aaa4:	460d      	mov	r5, r1
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aaac:	5d37      	ldrb	r7, [r6, r4]
 801aaae:	f017 0708 	ands.w	r7, r7, #8
 801aab2:	d1f8      	bne.n	801aaa6 <_strtoul_l.constprop.0+0xa>
 801aab4:	2c2d      	cmp	r4, #45	@ 0x2d
 801aab6:	d12f      	bne.n	801ab18 <_strtoul_l.constprop.0+0x7c>
 801aab8:	782c      	ldrb	r4, [r5, #0]
 801aaba:	2701      	movs	r7, #1
 801aabc:	1c85      	adds	r5, r0, #2
 801aabe:	f033 0010 	bics.w	r0, r3, #16
 801aac2:	d109      	bne.n	801aad8 <_strtoul_l.constprop.0+0x3c>
 801aac4:	2c30      	cmp	r4, #48	@ 0x30
 801aac6:	d12c      	bne.n	801ab22 <_strtoul_l.constprop.0+0x86>
 801aac8:	7828      	ldrb	r0, [r5, #0]
 801aaca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801aace:	2858      	cmp	r0, #88	@ 0x58
 801aad0:	d127      	bne.n	801ab22 <_strtoul_l.constprop.0+0x86>
 801aad2:	786c      	ldrb	r4, [r5, #1]
 801aad4:	2310      	movs	r3, #16
 801aad6:	3502      	adds	r5, #2
 801aad8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801aadc:	2600      	movs	r6, #0
 801aade:	fbb8 f8f3 	udiv	r8, r8, r3
 801aae2:	fb03 f908 	mul.w	r9, r3, r8
 801aae6:	ea6f 0909 	mvn.w	r9, r9
 801aaea:	4630      	mov	r0, r6
 801aaec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801aaf0:	f1bc 0f09 	cmp.w	ip, #9
 801aaf4:	d81c      	bhi.n	801ab30 <_strtoul_l.constprop.0+0x94>
 801aaf6:	4664      	mov	r4, ip
 801aaf8:	42a3      	cmp	r3, r4
 801aafa:	dd2a      	ble.n	801ab52 <_strtoul_l.constprop.0+0xb6>
 801aafc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801ab00:	d007      	beq.n	801ab12 <_strtoul_l.constprop.0+0x76>
 801ab02:	4580      	cmp	r8, r0
 801ab04:	d322      	bcc.n	801ab4c <_strtoul_l.constprop.0+0xb0>
 801ab06:	d101      	bne.n	801ab0c <_strtoul_l.constprop.0+0x70>
 801ab08:	45a1      	cmp	r9, r4
 801ab0a:	db1f      	blt.n	801ab4c <_strtoul_l.constprop.0+0xb0>
 801ab0c:	fb00 4003 	mla	r0, r0, r3, r4
 801ab10:	2601      	movs	r6, #1
 801ab12:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ab16:	e7e9      	b.n	801aaec <_strtoul_l.constprop.0+0x50>
 801ab18:	2c2b      	cmp	r4, #43	@ 0x2b
 801ab1a:	bf04      	itt	eq
 801ab1c:	782c      	ldrbeq	r4, [r5, #0]
 801ab1e:	1c85      	addeq	r5, r0, #2
 801ab20:	e7cd      	b.n	801aabe <_strtoul_l.constprop.0+0x22>
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d1d8      	bne.n	801aad8 <_strtoul_l.constprop.0+0x3c>
 801ab26:	2c30      	cmp	r4, #48	@ 0x30
 801ab28:	bf0c      	ite	eq
 801ab2a:	2308      	moveq	r3, #8
 801ab2c:	230a      	movne	r3, #10
 801ab2e:	e7d3      	b.n	801aad8 <_strtoul_l.constprop.0+0x3c>
 801ab30:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801ab34:	f1bc 0f19 	cmp.w	ip, #25
 801ab38:	d801      	bhi.n	801ab3e <_strtoul_l.constprop.0+0xa2>
 801ab3a:	3c37      	subs	r4, #55	@ 0x37
 801ab3c:	e7dc      	b.n	801aaf8 <_strtoul_l.constprop.0+0x5c>
 801ab3e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801ab42:	f1bc 0f19 	cmp.w	ip, #25
 801ab46:	d804      	bhi.n	801ab52 <_strtoul_l.constprop.0+0xb6>
 801ab48:	3c57      	subs	r4, #87	@ 0x57
 801ab4a:	e7d5      	b.n	801aaf8 <_strtoul_l.constprop.0+0x5c>
 801ab4c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ab50:	e7df      	b.n	801ab12 <_strtoul_l.constprop.0+0x76>
 801ab52:	1c73      	adds	r3, r6, #1
 801ab54:	d106      	bne.n	801ab64 <_strtoul_l.constprop.0+0xc8>
 801ab56:	2322      	movs	r3, #34	@ 0x22
 801ab58:	f8ce 3000 	str.w	r3, [lr]
 801ab5c:	4630      	mov	r0, r6
 801ab5e:	b932      	cbnz	r2, 801ab6e <_strtoul_l.constprop.0+0xd2>
 801ab60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab64:	b107      	cbz	r7, 801ab68 <_strtoul_l.constprop.0+0xcc>
 801ab66:	4240      	negs	r0, r0
 801ab68:	2a00      	cmp	r2, #0
 801ab6a:	d0f9      	beq.n	801ab60 <_strtoul_l.constprop.0+0xc4>
 801ab6c:	b106      	cbz	r6, 801ab70 <_strtoul_l.constprop.0+0xd4>
 801ab6e:	1e69      	subs	r1, r5, #1
 801ab70:	6011      	str	r1, [r2, #0]
 801ab72:	e7f5      	b.n	801ab60 <_strtoul_l.constprop.0+0xc4>
 801ab74:	0801d9b8 	.word	0x0801d9b8

0801ab78 <strtoul>:
 801ab78:	4613      	mov	r3, r2
 801ab7a:	460a      	mov	r2, r1
 801ab7c:	4601      	mov	r1, r0
 801ab7e:	4802      	ldr	r0, [pc, #8]	@ (801ab88 <strtoul+0x10>)
 801ab80:	6800      	ldr	r0, [r0, #0]
 801ab82:	f7ff bf8b 	b.w	801aa9c <_strtoul_l.constprop.0>
 801ab86:	bf00      	nop
 801ab88:	20000a74 	.word	0x20000a74

0801ab8c <_fwalk_sglue>:
 801ab8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab90:	4607      	mov	r7, r0
 801ab92:	4688      	mov	r8, r1
 801ab94:	4614      	mov	r4, r2
 801ab96:	2600      	movs	r6, #0
 801ab98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab9c:	f1b9 0901 	subs.w	r9, r9, #1
 801aba0:	d505      	bpl.n	801abae <_fwalk_sglue+0x22>
 801aba2:	6824      	ldr	r4, [r4, #0]
 801aba4:	2c00      	cmp	r4, #0
 801aba6:	d1f7      	bne.n	801ab98 <_fwalk_sglue+0xc>
 801aba8:	4630      	mov	r0, r6
 801abaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801abae:	89ab      	ldrh	r3, [r5, #12]
 801abb0:	2b01      	cmp	r3, #1
 801abb2:	d907      	bls.n	801abc4 <_fwalk_sglue+0x38>
 801abb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801abb8:	3301      	adds	r3, #1
 801abba:	d003      	beq.n	801abc4 <_fwalk_sglue+0x38>
 801abbc:	4629      	mov	r1, r5
 801abbe:	4638      	mov	r0, r7
 801abc0:	47c0      	blx	r8
 801abc2:	4306      	orrs	r6, r0
 801abc4:	3568      	adds	r5, #104	@ 0x68
 801abc6:	e7e9      	b.n	801ab9c <_fwalk_sglue+0x10>

0801abc8 <_vsniprintf_r>:
 801abc8:	b530      	push	{r4, r5, lr}
 801abca:	4614      	mov	r4, r2
 801abcc:	2c00      	cmp	r4, #0
 801abce:	b09b      	sub	sp, #108	@ 0x6c
 801abd0:	4605      	mov	r5, r0
 801abd2:	461a      	mov	r2, r3
 801abd4:	da05      	bge.n	801abe2 <_vsniprintf_r+0x1a>
 801abd6:	238b      	movs	r3, #139	@ 0x8b
 801abd8:	6003      	str	r3, [r0, #0]
 801abda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abde:	b01b      	add	sp, #108	@ 0x6c
 801abe0:	bd30      	pop	{r4, r5, pc}
 801abe2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801abe6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801abea:	bf14      	ite	ne
 801abec:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801abf0:	4623      	moveq	r3, r4
 801abf2:	9302      	str	r3, [sp, #8]
 801abf4:	9305      	str	r3, [sp, #20]
 801abf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801abfa:	9100      	str	r1, [sp, #0]
 801abfc:	9104      	str	r1, [sp, #16]
 801abfe:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ac02:	4669      	mov	r1, sp
 801ac04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ac06:	f000 fb87 	bl	801b318 <_svfiprintf_r>
 801ac0a:	1c43      	adds	r3, r0, #1
 801ac0c:	bfbc      	itt	lt
 801ac0e:	238b      	movlt	r3, #139	@ 0x8b
 801ac10:	602b      	strlt	r3, [r5, #0]
 801ac12:	2c00      	cmp	r4, #0
 801ac14:	d0e3      	beq.n	801abde <_vsniprintf_r+0x16>
 801ac16:	9b00      	ldr	r3, [sp, #0]
 801ac18:	2200      	movs	r2, #0
 801ac1a:	701a      	strb	r2, [r3, #0]
 801ac1c:	e7df      	b.n	801abde <_vsniprintf_r+0x16>
	...

0801ac20 <vsniprintf>:
 801ac20:	b507      	push	{r0, r1, r2, lr}
 801ac22:	9300      	str	r3, [sp, #0]
 801ac24:	4613      	mov	r3, r2
 801ac26:	460a      	mov	r2, r1
 801ac28:	4601      	mov	r1, r0
 801ac2a:	4803      	ldr	r0, [pc, #12]	@ (801ac38 <vsniprintf+0x18>)
 801ac2c:	6800      	ldr	r0, [r0, #0]
 801ac2e:	f7ff ffcb 	bl	801abc8 <_vsniprintf_r>
 801ac32:	b003      	add	sp, #12
 801ac34:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac38:	20000a74 	.word	0x20000a74

0801ac3c <_fwrite_r>:
 801ac3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac40:	9c08      	ldr	r4, [sp, #32]
 801ac42:	468a      	mov	sl, r1
 801ac44:	4690      	mov	r8, r2
 801ac46:	fb02 f903 	mul.w	r9, r2, r3
 801ac4a:	4606      	mov	r6, r0
 801ac4c:	b118      	cbz	r0, 801ac56 <_fwrite_r+0x1a>
 801ac4e:	6a03      	ldr	r3, [r0, #32]
 801ac50:	b90b      	cbnz	r3, 801ac56 <_fwrite_r+0x1a>
 801ac52:	f7ff fedd 	bl	801aa10 <__sinit>
 801ac56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ac58:	07dd      	lsls	r5, r3, #31
 801ac5a:	d405      	bmi.n	801ac68 <_fwrite_r+0x2c>
 801ac5c:	89a3      	ldrh	r3, [r4, #12]
 801ac5e:	0598      	lsls	r0, r3, #22
 801ac60:	d402      	bmi.n	801ac68 <_fwrite_r+0x2c>
 801ac62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ac64:	f000 fa6f 	bl	801b146 <__retarget_lock_acquire_recursive>
 801ac68:	89a3      	ldrh	r3, [r4, #12]
 801ac6a:	0719      	lsls	r1, r3, #28
 801ac6c:	d516      	bpl.n	801ac9c <_fwrite_r+0x60>
 801ac6e:	6923      	ldr	r3, [r4, #16]
 801ac70:	b1a3      	cbz	r3, 801ac9c <_fwrite_r+0x60>
 801ac72:	2500      	movs	r5, #0
 801ac74:	454d      	cmp	r5, r9
 801ac76:	d01f      	beq.n	801acb8 <_fwrite_r+0x7c>
 801ac78:	68a7      	ldr	r7, [r4, #8]
 801ac7a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801ac7e:	3f01      	subs	r7, #1
 801ac80:	2f00      	cmp	r7, #0
 801ac82:	60a7      	str	r7, [r4, #8]
 801ac84:	da04      	bge.n	801ac90 <_fwrite_r+0x54>
 801ac86:	69a3      	ldr	r3, [r4, #24]
 801ac88:	429f      	cmp	r7, r3
 801ac8a:	db0f      	blt.n	801acac <_fwrite_r+0x70>
 801ac8c:	290a      	cmp	r1, #10
 801ac8e:	d00d      	beq.n	801acac <_fwrite_r+0x70>
 801ac90:	6823      	ldr	r3, [r4, #0]
 801ac92:	1c5a      	adds	r2, r3, #1
 801ac94:	6022      	str	r2, [r4, #0]
 801ac96:	7019      	strb	r1, [r3, #0]
 801ac98:	3501      	adds	r5, #1
 801ac9a:	e7eb      	b.n	801ac74 <_fwrite_r+0x38>
 801ac9c:	4621      	mov	r1, r4
 801ac9e:	4630      	mov	r0, r6
 801aca0:	f000 f864 	bl	801ad6c <__swsetup_r>
 801aca4:	2800      	cmp	r0, #0
 801aca6:	d0e4      	beq.n	801ac72 <_fwrite_r+0x36>
 801aca8:	2500      	movs	r5, #0
 801acaa:	e005      	b.n	801acb8 <_fwrite_r+0x7c>
 801acac:	4622      	mov	r2, r4
 801acae:	4630      	mov	r0, r6
 801acb0:	f000 f81e 	bl	801acf0 <__swbuf_r>
 801acb4:	3001      	adds	r0, #1
 801acb6:	d1ef      	bne.n	801ac98 <_fwrite_r+0x5c>
 801acb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801acba:	07da      	lsls	r2, r3, #31
 801acbc:	d405      	bmi.n	801acca <_fwrite_r+0x8e>
 801acbe:	89a3      	ldrh	r3, [r4, #12]
 801acc0:	059b      	lsls	r3, r3, #22
 801acc2:	d402      	bmi.n	801acca <_fwrite_r+0x8e>
 801acc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801acc6:	f000 fa3f 	bl	801b148 <__retarget_lock_release_recursive>
 801acca:	fbb5 f0f8 	udiv	r0, r5, r8
 801acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801acd4 <fwrite>:
 801acd4:	b507      	push	{r0, r1, r2, lr}
 801acd6:	9300      	str	r3, [sp, #0]
 801acd8:	4613      	mov	r3, r2
 801acda:	460a      	mov	r2, r1
 801acdc:	4601      	mov	r1, r0
 801acde:	4803      	ldr	r0, [pc, #12]	@ (801acec <fwrite+0x18>)
 801ace0:	6800      	ldr	r0, [r0, #0]
 801ace2:	f7ff ffab 	bl	801ac3c <_fwrite_r>
 801ace6:	b003      	add	sp, #12
 801ace8:	f85d fb04 	ldr.w	pc, [sp], #4
 801acec:	20000a74 	.word	0x20000a74

0801acf0 <__swbuf_r>:
 801acf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acf2:	460e      	mov	r6, r1
 801acf4:	4614      	mov	r4, r2
 801acf6:	4605      	mov	r5, r0
 801acf8:	b118      	cbz	r0, 801ad02 <__swbuf_r+0x12>
 801acfa:	6a03      	ldr	r3, [r0, #32]
 801acfc:	b90b      	cbnz	r3, 801ad02 <__swbuf_r+0x12>
 801acfe:	f7ff fe87 	bl	801aa10 <__sinit>
 801ad02:	69a3      	ldr	r3, [r4, #24]
 801ad04:	60a3      	str	r3, [r4, #8]
 801ad06:	89a3      	ldrh	r3, [r4, #12]
 801ad08:	071a      	lsls	r2, r3, #28
 801ad0a:	d501      	bpl.n	801ad10 <__swbuf_r+0x20>
 801ad0c:	6923      	ldr	r3, [r4, #16]
 801ad0e:	b943      	cbnz	r3, 801ad22 <__swbuf_r+0x32>
 801ad10:	4621      	mov	r1, r4
 801ad12:	4628      	mov	r0, r5
 801ad14:	f000 f82a 	bl	801ad6c <__swsetup_r>
 801ad18:	b118      	cbz	r0, 801ad22 <__swbuf_r+0x32>
 801ad1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ad1e:	4638      	mov	r0, r7
 801ad20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad22:	6823      	ldr	r3, [r4, #0]
 801ad24:	6922      	ldr	r2, [r4, #16]
 801ad26:	1a98      	subs	r0, r3, r2
 801ad28:	6963      	ldr	r3, [r4, #20]
 801ad2a:	b2f6      	uxtb	r6, r6
 801ad2c:	4283      	cmp	r3, r0
 801ad2e:	4637      	mov	r7, r6
 801ad30:	dc05      	bgt.n	801ad3e <__swbuf_r+0x4e>
 801ad32:	4621      	mov	r1, r4
 801ad34:	4628      	mov	r0, r5
 801ad36:	f000 ff3f 	bl	801bbb8 <_fflush_r>
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	d1ed      	bne.n	801ad1a <__swbuf_r+0x2a>
 801ad3e:	68a3      	ldr	r3, [r4, #8]
 801ad40:	3b01      	subs	r3, #1
 801ad42:	60a3      	str	r3, [r4, #8]
 801ad44:	6823      	ldr	r3, [r4, #0]
 801ad46:	1c5a      	adds	r2, r3, #1
 801ad48:	6022      	str	r2, [r4, #0]
 801ad4a:	701e      	strb	r6, [r3, #0]
 801ad4c:	6962      	ldr	r2, [r4, #20]
 801ad4e:	1c43      	adds	r3, r0, #1
 801ad50:	429a      	cmp	r2, r3
 801ad52:	d004      	beq.n	801ad5e <__swbuf_r+0x6e>
 801ad54:	89a3      	ldrh	r3, [r4, #12]
 801ad56:	07db      	lsls	r3, r3, #31
 801ad58:	d5e1      	bpl.n	801ad1e <__swbuf_r+0x2e>
 801ad5a:	2e0a      	cmp	r6, #10
 801ad5c:	d1df      	bne.n	801ad1e <__swbuf_r+0x2e>
 801ad5e:	4621      	mov	r1, r4
 801ad60:	4628      	mov	r0, r5
 801ad62:	f000 ff29 	bl	801bbb8 <_fflush_r>
 801ad66:	2800      	cmp	r0, #0
 801ad68:	d0d9      	beq.n	801ad1e <__swbuf_r+0x2e>
 801ad6a:	e7d6      	b.n	801ad1a <__swbuf_r+0x2a>

0801ad6c <__swsetup_r>:
 801ad6c:	b538      	push	{r3, r4, r5, lr}
 801ad6e:	4b29      	ldr	r3, [pc, #164]	@ (801ae14 <__swsetup_r+0xa8>)
 801ad70:	4605      	mov	r5, r0
 801ad72:	6818      	ldr	r0, [r3, #0]
 801ad74:	460c      	mov	r4, r1
 801ad76:	b118      	cbz	r0, 801ad80 <__swsetup_r+0x14>
 801ad78:	6a03      	ldr	r3, [r0, #32]
 801ad7a:	b90b      	cbnz	r3, 801ad80 <__swsetup_r+0x14>
 801ad7c:	f7ff fe48 	bl	801aa10 <__sinit>
 801ad80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad84:	0719      	lsls	r1, r3, #28
 801ad86:	d422      	bmi.n	801adce <__swsetup_r+0x62>
 801ad88:	06da      	lsls	r2, r3, #27
 801ad8a:	d407      	bmi.n	801ad9c <__swsetup_r+0x30>
 801ad8c:	2209      	movs	r2, #9
 801ad8e:	602a      	str	r2, [r5, #0]
 801ad90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad94:	81a3      	strh	r3, [r4, #12]
 801ad96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ad9a:	e033      	b.n	801ae04 <__swsetup_r+0x98>
 801ad9c:	0758      	lsls	r0, r3, #29
 801ad9e:	d512      	bpl.n	801adc6 <__swsetup_r+0x5a>
 801ada0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ada2:	b141      	cbz	r1, 801adb6 <__swsetup_r+0x4a>
 801ada4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ada8:	4299      	cmp	r1, r3
 801adaa:	d002      	beq.n	801adb2 <__swsetup_r+0x46>
 801adac:	4628      	mov	r0, r5
 801adae:	f000 fa0d 	bl	801b1cc <_free_r>
 801adb2:	2300      	movs	r3, #0
 801adb4:	6363      	str	r3, [r4, #52]	@ 0x34
 801adb6:	89a3      	ldrh	r3, [r4, #12]
 801adb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801adbc:	81a3      	strh	r3, [r4, #12]
 801adbe:	2300      	movs	r3, #0
 801adc0:	6063      	str	r3, [r4, #4]
 801adc2:	6923      	ldr	r3, [r4, #16]
 801adc4:	6023      	str	r3, [r4, #0]
 801adc6:	89a3      	ldrh	r3, [r4, #12]
 801adc8:	f043 0308 	orr.w	r3, r3, #8
 801adcc:	81a3      	strh	r3, [r4, #12]
 801adce:	6923      	ldr	r3, [r4, #16]
 801add0:	b94b      	cbnz	r3, 801ade6 <__swsetup_r+0x7a>
 801add2:	89a3      	ldrh	r3, [r4, #12]
 801add4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801add8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801addc:	d003      	beq.n	801ade6 <__swsetup_r+0x7a>
 801adde:	4621      	mov	r1, r4
 801ade0:	4628      	mov	r0, r5
 801ade2:	f000 f83f 	bl	801ae64 <__smakebuf_r>
 801ade6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adea:	f013 0201 	ands.w	r2, r3, #1
 801adee:	d00a      	beq.n	801ae06 <__swsetup_r+0x9a>
 801adf0:	2200      	movs	r2, #0
 801adf2:	60a2      	str	r2, [r4, #8]
 801adf4:	6962      	ldr	r2, [r4, #20]
 801adf6:	4252      	negs	r2, r2
 801adf8:	61a2      	str	r2, [r4, #24]
 801adfa:	6922      	ldr	r2, [r4, #16]
 801adfc:	b942      	cbnz	r2, 801ae10 <__swsetup_r+0xa4>
 801adfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ae02:	d1c5      	bne.n	801ad90 <__swsetup_r+0x24>
 801ae04:	bd38      	pop	{r3, r4, r5, pc}
 801ae06:	0799      	lsls	r1, r3, #30
 801ae08:	bf58      	it	pl
 801ae0a:	6962      	ldrpl	r2, [r4, #20]
 801ae0c:	60a2      	str	r2, [r4, #8]
 801ae0e:	e7f4      	b.n	801adfa <__swsetup_r+0x8e>
 801ae10:	2000      	movs	r0, #0
 801ae12:	e7f7      	b.n	801ae04 <__swsetup_r+0x98>
 801ae14:	20000a74 	.word	0x20000a74

0801ae18 <__swhatbuf_r>:
 801ae18:	b570      	push	{r4, r5, r6, lr}
 801ae1a:	460c      	mov	r4, r1
 801ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae20:	2900      	cmp	r1, #0
 801ae22:	b096      	sub	sp, #88	@ 0x58
 801ae24:	4615      	mov	r5, r2
 801ae26:	461e      	mov	r6, r3
 801ae28:	da0d      	bge.n	801ae46 <__swhatbuf_r+0x2e>
 801ae2a:	89a3      	ldrh	r3, [r4, #12]
 801ae2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ae30:	f04f 0100 	mov.w	r1, #0
 801ae34:	bf14      	ite	ne
 801ae36:	2340      	movne	r3, #64	@ 0x40
 801ae38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ae3c:	2000      	movs	r0, #0
 801ae3e:	6031      	str	r1, [r6, #0]
 801ae40:	602b      	str	r3, [r5, #0]
 801ae42:	b016      	add	sp, #88	@ 0x58
 801ae44:	bd70      	pop	{r4, r5, r6, pc}
 801ae46:	466a      	mov	r2, sp
 801ae48:	f000 f920 	bl	801b08c <_fstat_r>
 801ae4c:	2800      	cmp	r0, #0
 801ae4e:	dbec      	blt.n	801ae2a <__swhatbuf_r+0x12>
 801ae50:	9901      	ldr	r1, [sp, #4]
 801ae52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ae56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ae5a:	4259      	negs	r1, r3
 801ae5c:	4159      	adcs	r1, r3
 801ae5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ae62:	e7eb      	b.n	801ae3c <__swhatbuf_r+0x24>

0801ae64 <__smakebuf_r>:
 801ae64:	898b      	ldrh	r3, [r1, #12]
 801ae66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae68:	079d      	lsls	r5, r3, #30
 801ae6a:	4606      	mov	r6, r0
 801ae6c:	460c      	mov	r4, r1
 801ae6e:	d507      	bpl.n	801ae80 <__smakebuf_r+0x1c>
 801ae70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ae74:	6023      	str	r3, [r4, #0]
 801ae76:	6123      	str	r3, [r4, #16]
 801ae78:	2301      	movs	r3, #1
 801ae7a:	6163      	str	r3, [r4, #20]
 801ae7c:	b003      	add	sp, #12
 801ae7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae80:	ab01      	add	r3, sp, #4
 801ae82:	466a      	mov	r2, sp
 801ae84:	f7ff ffc8 	bl	801ae18 <__swhatbuf_r>
 801ae88:	9f00      	ldr	r7, [sp, #0]
 801ae8a:	4605      	mov	r5, r0
 801ae8c:	4639      	mov	r1, r7
 801ae8e:	4630      	mov	r0, r6
 801ae90:	f7ff fbfe 	bl	801a690 <_malloc_r>
 801ae94:	b948      	cbnz	r0, 801aeaa <__smakebuf_r+0x46>
 801ae96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae9a:	059a      	lsls	r2, r3, #22
 801ae9c:	d4ee      	bmi.n	801ae7c <__smakebuf_r+0x18>
 801ae9e:	f023 0303 	bic.w	r3, r3, #3
 801aea2:	f043 0302 	orr.w	r3, r3, #2
 801aea6:	81a3      	strh	r3, [r4, #12]
 801aea8:	e7e2      	b.n	801ae70 <__smakebuf_r+0xc>
 801aeaa:	89a3      	ldrh	r3, [r4, #12]
 801aeac:	6020      	str	r0, [r4, #0]
 801aeae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aeb2:	81a3      	strh	r3, [r4, #12]
 801aeb4:	9b01      	ldr	r3, [sp, #4]
 801aeb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801aeba:	b15b      	cbz	r3, 801aed4 <__smakebuf_r+0x70>
 801aebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aec0:	4630      	mov	r0, r6
 801aec2:	f000 f8f5 	bl	801b0b0 <_isatty_r>
 801aec6:	b128      	cbz	r0, 801aed4 <__smakebuf_r+0x70>
 801aec8:	89a3      	ldrh	r3, [r4, #12]
 801aeca:	f023 0303 	bic.w	r3, r3, #3
 801aece:	f043 0301 	orr.w	r3, r3, #1
 801aed2:	81a3      	strh	r3, [r4, #12]
 801aed4:	89a3      	ldrh	r3, [r4, #12]
 801aed6:	431d      	orrs	r5, r3
 801aed8:	81a5      	strh	r5, [r4, #12]
 801aeda:	e7cf      	b.n	801ae7c <__smakebuf_r+0x18>

0801aedc <iprintf>:
 801aedc:	b40f      	push	{r0, r1, r2, r3}
 801aede:	b507      	push	{r0, r1, r2, lr}
 801aee0:	4906      	ldr	r1, [pc, #24]	@ (801aefc <iprintf+0x20>)
 801aee2:	ab04      	add	r3, sp, #16
 801aee4:	6808      	ldr	r0, [r1, #0]
 801aee6:	f853 2b04 	ldr.w	r2, [r3], #4
 801aeea:	6881      	ldr	r1, [r0, #8]
 801aeec:	9301      	str	r3, [sp, #4]
 801aeee:	f000 fb39 	bl	801b564 <_vfiprintf_r>
 801aef2:	b003      	add	sp, #12
 801aef4:	f85d eb04 	ldr.w	lr, [sp], #4
 801aef8:	b004      	add	sp, #16
 801aefa:	4770      	bx	lr
 801aefc:	20000a74 	.word	0x20000a74

0801af00 <_puts_r>:
 801af00:	6a03      	ldr	r3, [r0, #32]
 801af02:	b570      	push	{r4, r5, r6, lr}
 801af04:	6884      	ldr	r4, [r0, #8]
 801af06:	4605      	mov	r5, r0
 801af08:	460e      	mov	r6, r1
 801af0a:	b90b      	cbnz	r3, 801af10 <_puts_r+0x10>
 801af0c:	f7ff fd80 	bl	801aa10 <__sinit>
 801af10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801af12:	07db      	lsls	r3, r3, #31
 801af14:	d405      	bmi.n	801af22 <_puts_r+0x22>
 801af16:	89a3      	ldrh	r3, [r4, #12]
 801af18:	0598      	lsls	r0, r3, #22
 801af1a:	d402      	bmi.n	801af22 <_puts_r+0x22>
 801af1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801af1e:	f000 f912 	bl	801b146 <__retarget_lock_acquire_recursive>
 801af22:	89a3      	ldrh	r3, [r4, #12]
 801af24:	0719      	lsls	r1, r3, #28
 801af26:	d502      	bpl.n	801af2e <_puts_r+0x2e>
 801af28:	6923      	ldr	r3, [r4, #16]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d135      	bne.n	801af9a <_puts_r+0x9a>
 801af2e:	4621      	mov	r1, r4
 801af30:	4628      	mov	r0, r5
 801af32:	f7ff ff1b 	bl	801ad6c <__swsetup_r>
 801af36:	b380      	cbz	r0, 801af9a <_puts_r+0x9a>
 801af38:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801af3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801af3e:	07da      	lsls	r2, r3, #31
 801af40:	d405      	bmi.n	801af4e <_puts_r+0x4e>
 801af42:	89a3      	ldrh	r3, [r4, #12]
 801af44:	059b      	lsls	r3, r3, #22
 801af46:	d402      	bmi.n	801af4e <_puts_r+0x4e>
 801af48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801af4a:	f000 f8fd 	bl	801b148 <__retarget_lock_release_recursive>
 801af4e:	4628      	mov	r0, r5
 801af50:	bd70      	pop	{r4, r5, r6, pc}
 801af52:	2b00      	cmp	r3, #0
 801af54:	da04      	bge.n	801af60 <_puts_r+0x60>
 801af56:	69a2      	ldr	r2, [r4, #24]
 801af58:	429a      	cmp	r2, r3
 801af5a:	dc17      	bgt.n	801af8c <_puts_r+0x8c>
 801af5c:	290a      	cmp	r1, #10
 801af5e:	d015      	beq.n	801af8c <_puts_r+0x8c>
 801af60:	6823      	ldr	r3, [r4, #0]
 801af62:	1c5a      	adds	r2, r3, #1
 801af64:	6022      	str	r2, [r4, #0]
 801af66:	7019      	strb	r1, [r3, #0]
 801af68:	68a3      	ldr	r3, [r4, #8]
 801af6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801af6e:	3b01      	subs	r3, #1
 801af70:	60a3      	str	r3, [r4, #8]
 801af72:	2900      	cmp	r1, #0
 801af74:	d1ed      	bne.n	801af52 <_puts_r+0x52>
 801af76:	2b00      	cmp	r3, #0
 801af78:	da11      	bge.n	801af9e <_puts_r+0x9e>
 801af7a:	4622      	mov	r2, r4
 801af7c:	210a      	movs	r1, #10
 801af7e:	4628      	mov	r0, r5
 801af80:	f7ff feb6 	bl	801acf0 <__swbuf_r>
 801af84:	3001      	adds	r0, #1
 801af86:	d0d7      	beq.n	801af38 <_puts_r+0x38>
 801af88:	250a      	movs	r5, #10
 801af8a:	e7d7      	b.n	801af3c <_puts_r+0x3c>
 801af8c:	4622      	mov	r2, r4
 801af8e:	4628      	mov	r0, r5
 801af90:	f7ff feae 	bl	801acf0 <__swbuf_r>
 801af94:	3001      	adds	r0, #1
 801af96:	d1e7      	bne.n	801af68 <_puts_r+0x68>
 801af98:	e7ce      	b.n	801af38 <_puts_r+0x38>
 801af9a:	3e01      	subs	r6, #1
 801af9c:	e7e4      	b.n	801af68 <_puts_r+0x68>
 801af9e:	6823      	ldr	r3, [r4, #0]
 801afa0:	1c5a      	adds	r2, r3, #1
 801afa2:	6022      	str	r2, [r4, #0]
 801afa4:	220a      	movs	r2, #10
 801afa6:	701a      	strb	r2, [r3, #0]
 801afa8:	e7ee      	b.n	801af88 <_puts_r+0x88>
	...

0801afac <puts>:
 801afac:	4b02      	ldr	r3, [pc, #8]	@ (801afb8 <puts+0xc>)
 801afae:	4601      	mov	r1, r0
 801afb0:	6818      	ldr	r0, [r3, #0]
 801afb2:	f7ff bfa5 	b.w	801af00 <_puts_r>
 801afb6:	bf00      	nop
 801afb8:	20000a74 	.word	0x20000a74

0801afbc <strchr>:
 801afbc:	b2c9      	uxtb	r1, r1
 801afbe:	4603      	mov	r3, r0
 801afc0:	4618      	mov	r0, r3
 801afc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afc6:	b112      	cbz	r2, 801afce <strchr+0x12>
 801afc8:	428a      	cmp	r2, r1
 801afca:	d1f9      	bne.n	801afc0 <strchr+0x4>
 801afcc:	4770      	bx	lr
 801afce:	2900      	cmp	r1, #0
 801afd0:	bf18      	it	ne
 801afd2:	2000      	movne	r0, #0
 801afd4:	4770      	bx	lr

0801afd6 <strncmp>:
 801afd6:	b510      	push	{r4, lr}
 801afd8:	b16a      	cbz	r2, 801aff6 <strncmp+0x20>
 801afda:	3901      	subs	r1, #1
 801afdc:	1884      	adds	r4, r0, r2
 801afde:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afe2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801afe6:	429a      	cmp	r2, r3
 801afe8:	d103      	bne.n	801aff2 <strncmp+0x1c>
 801afea:	42a0      	cmp	r0, r4
 801afec:	d001      	beq.n	801aff2 <strncmp+0x1c>
 801afee:	2a00      	cmp	r2, #0
 801aff0:	d1f5      	bne.n	801afde <strncmp+0x8>
 801aff2:	1ad0      	subs	r0, r2, r3
 801aff4:	bd10      	pop	{r4, pc}
 801aff6:	4610      	mov	r0, r2
 801aff8:	e7fc      	b.n	801aff4 <strncmp+0x1e>

0801affa <strstr>:
 801affa:	780a      	ldrb	r2, [r1, #0]
 801affc:	b570      	push	{r4, r5, r6, lr}
 801affe:	b96a      	cbnz	r2, 801b01c <strstr+0x22>
 801b000:	bd70      	pop	{r4, r5, r6, pc}
 801b002:	429a      	cmp	r2, r3
 801b004:	d109      	bne.n	801b01a <strstr+0x20>
 801b006:	460c      	mov	r4, r1
 801b008:	4605      	mov	r5, r0
 801b00a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d0f6      	beq.n	801b000 <strstr+0x6>
 801b012:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b016:	429e      	cmp	r6, r3
 801b018:	d0f7      	beq.n	801b00a <strstr+0x10>
 801b01a:	3001      	adds	r0, #1
 801b01c:	7803      	ldrb	r3, [r0, #0]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d1ef      	bne.n	801b002 <strstr+0x8>
 801b022:	4618      	mov	r0, r3
 801b024:	e7ec      	b.n	801b000 <strstr+0x6>

0801b026 <memcmp>:
 801b026:	b510      	push	{r4, lr}
 801b028:	3901      	subs	r1, #1
 801b02a:	4402      	add	r2, r0
 801b02c:	4290      	cmp	r0, r2
 801b02e:	d101      	bne.n	801b034 <memcmp+0xe>
 801b030:	2000      	movs	r0, #0
 801b032:	e005      	b.n	801b040 <memcmp+0x1a>
 801b034:	7803      	ldrb	r3, [r0, #0]
 801b036:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b03a:	42a3      	cmp	r3, r4
 801b03c:	d001      	beq.n	801b042 <memcmp+0x1c>
 801b03e:	1b18      	subs	r0, r3, r4
 801b040:	bd10      	pop	{r4, pc}
 801b042:	3001      	adds	r0, #1
 801b044:	e7f2      	b.n	801b02c <memcmp+0x6>

0801b046 <memmove>:
 801b046:	4288      	cmp	r0, r1
 801b048:	b510      	push	{r4, lr}
 801b04a:	eb01 0402 	add.w	r4, r1, r2
 801b04e:	d902      	bls.n	801b056 <memmove+0x10>
 801b050:	4284      	cmp	r4, r0
 801b052:	4623      	mov	r3, r4
 801b054:	d807      	bhi.n	801b066 <memmove+0x20>
 801b056:	1e43      	subs	r3, r0, #1
 801b058:	42a1      	cmp	r1, r4
 801b05a:	d008      	beq.n	801b06e <memmove+0x28>
 801b05c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b060:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b064:	e7f8      	b.n	801b058 <memmove+0x12>
 801b066:	4402      	add	r2, r0
 801b068:	4601      	mov	r1, r0
 801b06a:	428a      	cmp	r2, r1
 801b06c:	d100      	bne.n	801b070 <memmove+0x2a>
 801b06e:	bd10      	pop	{r4, pc}
 801b070:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b074:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b078:	e7f7      	b.n	801b06a <memmove+0x24>

0801b07a <memset>:
 801b07a:	4402      	add	r2, r0
 801b07c:	4603      	mov	r3, r0
 801b07e:	4293      	cmp	r3, r2
 801b080:	d100      	bne.n	801b084 <memset+0xa>
 801b082:	4770      	bx	lr
 801b084:	f803 1b01 	strb.w	r1, [r3], #1
 801b088:	e7f9      	b.n	801b07e <memset+0x4>
	...

0801b08c <_fstat_r>:
 801b08c:	b538      	push	{r3, r4, r5, lr}
 801b08e:	4d07      	ldr	r5, [pc, #28]	@ (801b0ac <_fstat_r+0x20>)
 801b090:	2300      	movs	r3, #0
 801b092:	4604      	mov	r4, r0
 801b094:	4608      	mov	r0, r1
 801b096:	4611      	mov	r1, r2
 801b098:	602b      	str	r3, [r5, #0]
 801b09a:	f7e7 faf9 	bl	8002690 <_fstat>
 801b09e:	1c43      	adds	r3, r0, #1
 801b0a0:	d102      	bne.n	801b0a8 <_fstat_r+0x1c>
 801b0a2:	682b      	ldr	r3, [r5, #0]
 801b0a4:	b103      	cbz	r3, 801b0a8 <_fstat_r+0x1c>
 801b0a6:	6023      	str	r3, [r4, #0]
 801b0a8:	bd38      	pop	{r3, r4, r5, pc}
 801b0aa:	bf00      	nop
 801b0ac:	20016088 	.word	0x20016088

0801b0b0 <_isatty_r>:
 801b0b0:	b538      	push	{r3, r4, r5, lr}
 801b0b2:	4d06      	ldr	r5, [pc, #24]	@ (801b0cc <_isatty_r+0x1c>)
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	4604      	mov	r4, r0
 801b0b8:	4608      	mov	r0, r1
 801b0ba:	602b      	str	r3, [r5, #0]
 801b0bc:	f7e7 faf8 	bl	80026b0 <_isatty>
 801b0c0:	1c43      	adds	r3, r0, #1
 801b0c2:	d102      	bne.n	801b0ca <_isatty_r+0x1a>
 801b0c4:	682b      	ldr	r3, [r5, #0]
 801b0c6:	b103      	cbz	r3, 801b0ca <_isatty_r+0x1a>
 801b0c8:	6023      	str	r3, [r4, #0]
 801b0ca:	bd38      	pop	{r3, r4, r5, pc}
 801b0cc:	20016088 	.word	0x20016088

0801b0d0 <_sbrk_r>:
 801b0d0:	b538      	push	{r3, r4, r5, lr}
 801b0d2:	4d06      	ldr	r5, [pc, #24]	@ (801b0ec <_sbrk_r+0x1c>)
 801b0d4:	2300      	movs	r3, #0
 801b0d6:	4604      	mov	r4, r0
 801b0d8:	4608      	mov	r0, r1
 801b0da:	602b      	str	r3, [r5, #0]
 801b0dc:	f7e7 fb00 	bl	80026e0 <_sbrk>
 801b0e0:	1c43      	adds	r3, r0, #1
 801b0e2:	d102      	bne.n	801b0ea <_sbrk_r+0x1a>
 801b0e4:	682b      	ldr	r3, [r5, #0]
 801b0e6:	b103      	cbz	r3, 801b0ea <_sbrk_r+0x1a>
 801b0e8:	6023      	str	r3, [r4, #0]
 801b0ea:	bd38      	pop	{r3, r4, r5, pc}
 801b0ec:	20016088 	.word	0x20016088

0801b0f0 <__errno>:
 801b0f0:	4b01      	ldr	r3, [pc, #4]	@ (801b0f8 <__errno+0x8>)
 801b0f2:	6818      	ldr	r0, [r3, #0]
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop
 801b0f8:	20000a74 	.word	0x20000a74

0801b0fc <__libc_init_array>:
 801b0fc:	b570      	push	{r4, r5, r6, lr}
 801b0fe:	4d0d      	ldr	r5, [pc, #52]	@ (801b134 <__libc_init_array+0x38>)
 801b100:	4c0d      	ldr	r4, [pc, #52]	@ (801b138 <__libc_init_array+0x3c>)
 801b102:	1b64      	subs	r4, r4, r5
 801b104:	10a4      	asrs	r4, r4, #2
 801b106:	2600      	movs	r6, #0
 801b108:	42a6      	cmp	r6, r4
 801b10a:	d109      	bne.n	801b120 <__libc_init_array+0x24>
 801b10c:	4d0b      	ldr	r5, [pc, #44]	@ (801b13c <__libc_init_array+0x40>)
 801b10e:	4c0c      	ldr	r4, [pc, #48]	@ (801b140 <__libc_init_array+0x44>)
 801b110:	f000 fe6a 	bl	801bde8 <_init>
 801b114:	1b64      	subs	r4, r4, r5
 801b116:	10a4      	asrs	r4, r4, #2
 801b118:	2600      	movs	r6, #0
 801b11a:	42a6      	cmp	r6, r4
 801b11c:	d105      	bne.n	801b12a <__libc_init_array+0x2e>
 801b11e:	bd70      	pop	{r4, r5, r6, pc}
 801b120:	f855 3b04 	ldr.w	r3, [r5], #4
 801b124:	4798      	blx	r3
 801b126:	3601      	adds	r6, #1
 801b128:	e7ee      	b.n	801b108 <__libc_init_array+0xc>
 801b12a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b12e:	4798      	blx	r3
 801b130:	3601      	adds	r6, #1
 801b132:	e7f2      	b.n	801b11a <__libc_init_array+0x1e>
 801b134:	0801db30 	.word	0x0801db30
 801b138:	0801db30 	.word	0x0801db30
 801b13c:	0801db30 	.word	0x0801db30
 801b140:	0801db48 	.word	0x0801db48

0801b144 <__retarget_lock_init_recursive>:
 801b144:	4770      	bx	lr

0801b146 <__retarget_lock_acquire_recursive>:
 801b146:	4770      	bx	lr

0801b148 <__retarget_lock_release_recursive>:
 801b148:	4770      	bx	lr

0801b14a <memcpy>:
 801b14a:	440a      	add	r2, r1
 801b14c:	4291      	cmp	r1, r2
 801b14e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801b152:	d100      	bne.n	801b156 <memcpy+0xc>
 801b154:	4770      	bx	lr
 801b156:	b510      	push	{r4, lr}
 801b158:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b15c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b160:	4291      	cmp	r1, r2
 801b162:	d1f9      	bne.n	801b158 <memcpy+0xe>
 801b164:	bd10      	pop	{r4, pc}

0801b166 <strcpy>:
 801b166:	4603      	mov	r3, r0
 801b168:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b16c:	f803 2b01 	strb.w	r2, [r3], #1
 801b170:	2a00      	cmp	r2, #0
 801b172:	d1f9      	bne.n	801b168 <strcpy+0x2>
 801b174:	4770      	bx	lr
	...

0801b178 <__assert_func>:
 801b178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b17a:	4614      	mov	r4, r2
 801b17c:	461a      	mov	r2, r3
 801b17e:	4b09      	ldr	r3, [pc, #36]	@ (801b1a4 <__assert_func+0x2c>)
 801b180:	681b      	ldr	r3, [r3, #0]
 801b182:	4605      	mov	r5, r0
 801b184:	68d8      	ldr	r0, [r3, #12]
 801b186:	b954      	cbnz	r4, 801b19e <__assert_func+0x26>
 801b188:	4b07      	ldr	r3, [pc, #28]	@ (801b1a8 <__assert_func+0x30>)
 801b18a:	461c      	mov	r4, r3
 801b18c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b190:	9100      	str	r1, [sp, #0]
 801b192:	462b      	mov	r3, r5
 801b194:	4905      	ldr	r1, [pc, #20]	@ (801b1ac <__assert_func+0x34>)
 801b196:	f000 fd83 	bl	801bca0 <fiprintf>
 801b19a:	f000 fdd9 	bl	801bd50 <abort>
 801b19e:	4b04      	ldr	r3, [pc, #16]	@ (801b1b0 <__assert_func+0x38>)
 801b1a0:	e7f4      	b.n	801b18c <__assert_func+0x14>
 801b1a2:	bf00      	nop
 801b1a4:	20000a74 	.word	0x20000a74
 801b1a8:	0801daf3 	.word	0x0801daf3
 801b1ac:	0801dac5 	.word	0x0801dac5
 801b1b0:	0801dab8 	.word	0x0801dab8

0801b1b4 <__env_lock>:
 801b1b4:	4801      	ldr	r0, [pc, #4]	@ (801b1bc <__env_lock+0x8>)
 801b1b6:	f7ff bfc6 	b.w	801b146 <__retarget_lock_acquire_recursive>
 801b1ba:	bf00      	nop
 801b1bc:	20016084 	.word	0x20016084

0801b1c0 <__env_unlock>:
 801b1c0:	4801      	ldr	r0, [pc, #4]	@ (801b1c8 <__env_unlock+0x8>)
 801b1c2:	f7ff bfc1 	b.w	801b148 <__retarget_lock_release_recursive>
 801b1c6:	bf00      	nop
 801b1c8:	20016084 	.word	0x20016084

0801b1cc <_free_r>:
 801b1cc:	b538      	push	{r3, r4, r5, lr}
 801b1ce:	4605      	mov	r5, r0
 801b1d0:	2900      	cmp	r1, #0
 801b1d2:	d041      	beq.n	801b258 <_free_r+0x8c>
 801b1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1d8:	1f0c      	subs	r4, r1, #4
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	bfb8      	it	lt
 801b1de:	18e4      	addlt	r4, r4, r3
 801b1e0:	f7ff fb0a 	bl	801a7f8 <__malloc_lock>
 801b1e4:	4a1d      	ldr	r2, [pc, #116]	@ (801b25c <_free_r+0x90>)
 801b1e6:	6813      	ldr	r3, [r2, #0]
 801b1e8:	b933      	cbnz	r3, 801b1f8 <_free_r+0x2c>
 801b1ea:	6063      	str	r3, [r4, #4]
 801b1ec:	6014      	str	r4, [r2, #0]
 801b1ee:	4628      	mov	r0, r5
 801b1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1f4:	f7ff bb06 	b.w	801a804 <__malloc_unlock>
 801b1f8:	42a3      	cmp	r3, r4
 801b1fa:	d908      	bls.n	801b20e <_free_r+0x42>
 801b1fc:	6820      	ldr	r0, [r4, #0]
 801b1fe:	1821      	adds	r1, r4, r0
 801b200:	428b      	cmp	r3, r1
 801b202:	bf01      	itttt	eq
 801b204:	6819      	ldreq	r1, [r3, #0]
 801b206:	685b      	ldreq	r3, [r3, #4]
 801b208:	1809      	addeq	r1, r1, r0
 801b20a:	6021      	streq	r1, [r4, #0]
 801b20c:	e7ed      	b.n	801b1ea <_free_r+0x1e>
 801b20e:	461a      	mov	r2, r3
 801b210:	685b      	ldr	r3, [r3, #4]
 801b212:	b10b      	cbz	r3, 801b218 <_free_r+0x4c>
 801b214:	42a3      	cmp	r3, r4
 801b216:	d9fa      	bls.n	801b20e <_free_r+0x42>
 801b218:	6811      	ldr	r1, [r2, #0]
 801b21a:	1850      	adds	r0, r2, r1
 801b21c:	42a0      	cmp	r0, r4
 801b21e:	d10b      	bne.n	801b238 <_free_r+0x6c>
 801b220:	6820      	ldr	r0, [r4, #0]
 801b222:	4401      	add	r1, r0
 801b224:	1850      	adds	r0, r2, r1
 801b226:	4283      	cmp	r3, r0
 801b228:	6011      	str	r1, [r2, #0]
 801b22a:	d1e0      	bne.n	801b1ee <_free_r+0x22>
 801b22c:	6818      	ldr	r0, [r3, #0]
 801b22e:	685b      	ldr	r3, [r3, #4]
 801b230:	6053      	str	r3, [r2, #4]
 801b232:	4408      	add	r0, r1
 801b234:	6010      	str	r0, [r2, #0]
 801b236:	e7da      	b.n	801b1ee <_free_r+0x22>
 801b238:	d902      	bls.n	801b240 <_free_r+0x74>
 801b23a:	230c      	movs	r3, #12
 801b23c:	602b      	str	r3, [r5, #0]
 801b23e:	e7d6      	b.n	801b1ee <_free_r+0x22>
 801b240:	6820      	ldr	r0, [r4, #0]
 801b242:	1821      	adds	r1, r4, r0
 801b244:	428b      	cmp	r3, r1
 801b246:	bf04      	itt	eq
 801b248:	6819      	ldreq	r1, [r3, #0]
 801b24a:	685b      	ldreq	r3, [r3, #4]
 801b24c:	6063      	str	r3, [r4, #4]
 801b24e:	bf04      	itt	eq
 801b250:	1809      	addeq	r1, r1, r0
 801b252:	6021      	streq	r1, [r4, #0]
 801b254:	6054      	str	r4, [r2, #4]
 801b256:	e7ca      	b.n	801b1ee <_free_r+0x22>
 801b258:	bd38      	pop	{r3, r4, r5, pc}
 801b25a:	bf00      	nop
 801b25c:	20015f44 	.word	0x20015f44

0801b260 <__ssputs_r>:
 801b260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b264:	688e      	ldr	r6, [r1, #8]
 801b266:	461f      	mov	r7, r3
 801b268:	42be      	cmp	r6, r7
 801b26a:	680b      	ldr	r3, [r1, #0]
 801b26c:	4682      	mov	sl, r0
 801b26e:	460c      	mov	r4, r1
 801b270:	4690      	mov	r8, r2
 801b272:	d82d      	bhi.n	801b2d0 <__ssputs_r+0x70>
 801b274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b278:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b27c:	d026      	beq.n	801b2cc <__ssputs_r+0x6c>
 801b27e:	6965      	ldr	r5, [r4, #20]
 801b280:	6909      	ldr	r1, [r1, #16]
 801b282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b286:	eba3 0901 	sub.w	r9, r3, r1
 801b28a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b28e:	1c7b      	adds	r3, r7, #1
 801b290:	444b      	add	r3, r9
 801b292:	106d      	asrs	r5, r5, #1
 801b294:	429d      	cmp	r5, r3
 801b296:	bf38      	it	cc
 801b298:	461d      	movcc	r5, r3
 801b29a:	0553      	lsls	r3, r2, #21
 801b29c:	d527      	bpl.n	801b2ee <__ssputs_r+0x8e>
 801b29e:	4629      	mov	r1, r5
 801b2a0:	f7ff f9f6 	bl	801a690 <_malloc_r>
 801b2a4:	4606      	mov	r6, r0
 801b2a6:	b360      	cbz	r0, 801b302 <__ssputs_r+0xa2>
 801b2a8:	6921      	ldr	r1, [r4, #16]
 801b2aa:	464a      	mov	r2, r9
 801b2ac:	f7ff ff4d 	bl	801b14a <memcpy>
 801b2b0:	89a3      	ldrh	r3, [r4, #12]
 801b2b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b2ba:	81a3      	strh	r3, [r4, #12]
 801b2bc:	6126      	str	r6, [r4, #16]
 801b2be:	6165      	str	r5, [r4, #20]
 801b2c0:	444e      	add	r6, r9
 801b2c2:	eba5 0509 	sub.w	r5, r5, r9
 801b2c6:	6026      	str	r6, [r4, #0]
 801b2c8:	60a5      	str	r5, [r4, #8]
 801b2ca:	463e      	mov	r6, r7
 801b2cc:	42be      	cmp	r6, r7
 801b2ce:	d900      	bls.n	801b2d2 <__ssputs_r+0x72>
 801b2d0:	463e      	mov	r6, r7
 801b2d2:	6820      	ldr	r0, [r4, #0]
 801b2d4:	4632      	mov	r2, r6
 801b2d6:	4641      	mov	r1, r8
 801b2d8:	f7ff feb5 	bl	801b046 <memmove>
 801b2dc:	68a3      	ldr	r3, [r4, #8]
 801b2de:	1b9b      	subs	r3, r3, r6
 801b2e0:	60a3      	str	r3, [r4, #8]
 801b2e2:	6823      	ldr	r3, [r4, #0]
 801b2e4:	4433      	add	r3, r6
 801b2e6:	6023      	str	r3, [r4, #0]
 801b2e8:	2000      	movs	r0, #0
 801b2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2ee:	462a      	mov	r2, r5
 801b2f0:	f7ff fba6 	bl	801aa40 <_realloc_r>
 801b2f4:	4606      	mov	r6, r0
 801b2f6:	2800      	cmp	r0, #0
 801b2f8:	d1e0      	bne.n	801b2bc <__ssputs_r+0x5c>
 801b2fa:	6921      	ldr	r1, [r4, #16]
 801b2fc:	4650      	mov	r0, sl
 801b2fe:	f7ff ff65 	bl	801b1cc <_free_r>
 801b302:	230c      	movs	r3, #12
 801b304:	f8ca 3000 	str.w	r3, [sl]
 801b308:	89a3      	ldrh	r3, [r4, #12]
 801b30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b30e:	81a3      	strh	r3, [r4, #12]
 801b310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b314:	e7e9      	b.n	801b2ea <__ssputs_r+0x8a>
	...

0801b318 <_svfiprintf_r>:
 801b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b31c:	4698      	mov	r8, r3
 801b31e:	898b      	ldrh	r3, [r1, #12]
 801b320:	061b      	lsls	r3, r3, #24
 801b322:	b09d      	sub	sp, #116	@ 0x74
 801b324:	4607      	mov	r7, r0
 801b326:	460d      	mov	r5, r1
 801b328:	4614      	mov	r4, r2
 801b32a:	d510      	bpl.n	801b34e <_svfiprintf_r+0x36>
 801b32c:	690b      	ldr	r3, [r1, #16]
 801b32e:	b973      	cbnz	r3, 801b34e <_svfiprintf_r+0x36>
 801b330:	2140      	movs	r1, #64	@ 0x40
 801b332:	f7ff f9ad 	bl	801a690 <_malloc_r>
 801b336:	6028      	str	r0, [r5, #0]
 801b338:	6128      	str	r0, [r5, #16]
 801b33a:	b930      	cbnz	r0, 801b34a <_svfiprintf_r+0x32>
 801b33c:	230c      	movs	r3, #12
 801b33e:	603b      	str	r3, [r7, #0]
 801b340:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b344:	b01d      	add	sp, #116	@ 0x74
 801b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b34a:	2340      	movs	r3, #64	@ 0x40
 801b34c:	616b      	str	r3, [r5, #20]
 801b34e:	2300      	movs	r3, #0
 801b350:	9309      	str	r3, [sp, #36]	@ 0x24
 801b352:	2320      	movs	r3, #32
 801b354:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b358:	f8cd 800c 	str.w	r8, [sp, #12]
 801b35c:	2330      	movs	r3, #48	@ 0x30
 801b35e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b4fc <_svfiprintf_r+0x1e4>
 801b362:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b366:	f04f 0901 	mov.w	r9, #1
 801b36a:	4623      	mov	r3, r4
 801b36c:	469a      	mov	sl, r3
 801b36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b372:	b10a      	cbz	r2, 801b378 <_svfiprintf_r+0x60>
 801b374:	2a25      	cmp	r2, #37	@ 0x25
 801b376:	d1f9      	bne.n	801b36c <_svfiprintf_r+0x54>
 801b378:	ebba 0b04 	subs.w	fp, sl, r4
 801b37c:	d00b      	beq.n	801b396 <_svfiprintf_r+0x7e>
 801b37e:	465b      	mov	r3, fp
 801b380:	4622      	mov	r2, r4
 801b382:	4629      	mov	r1, r5
 801b384:	4638      	mov	r0, r7
 801b386:	f7ff ff6b 	bl	801b260 <__ssputs_r>
 801b38a:	3001      	adds	r0, #1
 801b38c:	f000 80a7 	beq.w	801b4de <_svfiprintf_r+0x1c6>
 801b390:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b392:	445a      	add	r2, fp
 801b394:	9209      	str	r2, [sp, #36]	@ 0x24
 801b396:	f89a 3000 	ldrb.w	r3, [sl]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	f000 809f 	beq.w	801b4de <_svfiprintf_r+0x1c6>
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b3a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b3aa:	f10a 0a01 	add.w	sl, sl, #1
 801b3ae:	9304      	str	r3, [sp, #16]
 801b3b0:	9307      	str	r3, [sp, #28]
 801b3b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b3b6:	931a      	str	r3, [sp, #104]	@ 0x68
 801b3b8:	4654      	mov	r4, sl
 801b3ba:	2205      	movs	r2, #5
 801b3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3c0:	484e      	ldr	r0, [pc, #312]	@ (801b4fc <_svfiprintf_r+0x1e4>)
 801b3c2:	f7e4 ff35 	bl	8000230 <memchr>
 801b3c6:	9a04      	ldr	r2, [sp, #16]
 801b3c8:	b9d8      	cbnz	r0, 801b402 <_svfiprintf_r+0xea>
 801b3ca:	06d0      	lsls	r0, r2, #27
 801b3cc:	bf44      	itt	mi
 801b3ce:	2320      	movmi	r3, #32
 801b3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b3d4:	0711      	lsls	r1, r2, #28
 801b3d6:	bf44      	itt	mi
 801b3d8:	232b      	movmi	r3, #43	@ 0x2b
 801b3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b3de:	f89a 3000 	ldrb.w	r3, [sl]
 801b3e2:	2b2a      	cmp	r3, #42	@ 0x2a
 801b3e4:	d015      	beq.n	801b412 <_svfiprintf_r+0xfa>
 801b3e6:	9a07      	ldr	r2, [sp, #28]
 801b3e8:	4654      	mov	r4, sl
 801b3ea:	2000      	movs	r0, #0
 801b3ec:	f04f 0c0a 	mov.w	ip, #10
 801b3f0:	4621      	mov	r1, r4
 801b3f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3f6:	3b30      	subs	r3, #48	@ 0x30
 801b3f8:	2b09      	cmp	r3, #9
 801b3fa:	d94b      	bls.n	801b494 <_svfiprintf_r+0x17c>
 801b3fc:	b1b0      	cbz	r0, 801b42c <_svfiprintf_r+0x114>
 801b3fe:	9207      	str	r2, [sp, #28]
 801b400:	e014      	b.n	801b42c <_svfiprintf_r+0x114>
 801b402:	eba0 0308 	sub.w	r3, r0, r8
 801b406:	fa09 f303 	lsl.w	r3, r9, r3
 801b40a:	4313      	orrs	r3, r2
 801b40c:	9304      	str	r3, [sp, #16]
 801b40e:	46a2      	mov	sl, r4
 801b410:	e7d2      	b.n	801b3b8 <_svfiprintf_r+0xa0>
 801b412:	9b03      	ldr	r3, [sp, #12]
 801b414:	1d19      	adds	r1, r3, #4
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	9103      	str	r1, [sp, #12]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	bfbb      	ittet	lt
 801b41e:	425b      	neglt	r3, r3
 801b420:	f042 0202 	orrlt.w	r2, r2, #2
 801b424:	9307      	strge	r3, [sp, #28]
 801b426:	9307      	strlt	r3, [sp, #28]
 801b428:	bfb8      	it	lt
 801b42a:	9204      	strlt	r2, [sp, #16]
 801b42c:	7823      	ldrb	r3, [r4, #0]
 801b42e:	2b2e      	cmp	r3, #46	@ 0x2e
 801b430:	d10a      	bne.n	801b448 <_svfiprintf_r+0x130>
 801b432:	7863      	ldrb	r3, [r4, #1]
 801b434:	2b2a      	cmp	r3, #42	@ 0x2a
 801b436:	d132      	bne.n	801b49e <_svfiprintf_r+0x186>
 801b438:	9b03      	ldr	r3, [sp, #12]
 801b43a:	1d1a      	adds	r2, r3, #4
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	9203      	str	r2, [sp, #12]
 801b440:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b444:	3402      	adds	r4, #2
 801b446:	9305      	str	r3, [sp, #20]
 801b448:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b50c <_svfiprintf_r+0x1f4>
 801b44c:	7821      	ldrb	r1, [r4, #0]
 801b44e:	2203      	movs	r2, #3
 801b450:	4650      	mov	r0, sl
 801b452:	f7e4 feed 	bl	8000230 <memchr>
 801b456:	b138      	cbz	r0, 801b468 <_svfiprintf_r+0x150>
 801b458:	9b04      	ldr	r3, [sp, #16]
 801b45a:	eba0 000a 	sub.w	r0, r0, sl
 801b45e:	2240      	movs	r2, #64	@ 0x40
 801b460:	4082      	lsls	r2, r0
 801b462:	4313      	orrs	r3, r2
 801b464:	3401      	adds	r4, #1
 801b466:	9304      	str	r3, [sp, #16]
 801b468:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b46c:	4824      	ldr	r0, [pc, #144]	@ (801b500 <_svfiprintf_r+0x1e8>)
 801b46e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b472:	2206      	movs	r2, #6
 801b474:	f7e4 fedc 	bl	8000230 <memchr>
 801b478:	2800      	cmp	r0, #0
 801b47a:	d036      	beq.n	801b4ea <_svfiprintf_r+0x1d2>
 801b47c:	4b21      	ldr	r3, [pc, #132]	@ (801b504 <_svfiprintf_r+0x1ec>)
 801b47e:	bb1b      	cbnz	r3, 801b4c8 <_svfiprintf_r+0x1b0>
 801b480:	9b03      	ldr	r3, [sp, #12]
 801b482:	3307      	adds	r3, #7
 801b484:	f023 0307 	bic.w	r3, r3, #7
 801b488:	3308      	adds	r3, #8
 801b48a:	9303      	str	r3, [sp, #12]
 801b48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b48e:	4433      	add	r3, r6
 801b490:	9309      	str	r3, [sp, #36]	@ 0x24
 801b492:	e76a      	b.n	801b36a <_svfiprintf_r+0x52>
 801b494:	fb0c 3202 	mla	r2, ip, r2, r3
 801b498:	460c      	mov	r4, r1
 801b49a:	2001      	movs	r0, #1
 801b49c:	e7a8      	b.n	801b3f0 <_svfiprintf_r+0xd8>
 801b49e:	2300      	movs	r3, #0
 801b4a0:	3401      	adds	r4, #1
 801b4a2:	9305      	str	r3, [sp, #20]
 801b4a4:	4619      	mov	r1, r3
 801b4a6:	f04f 0c0a 	mov.w	ip, #10
 801b4aa:	4620      	mov	r0, r4
 801b4ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b4b0:	3a30      	subs	r2, #48	@ 0x30
 801b4b2:	2a09      	cmp	r2, #9
 801b4b4:	d903      	bls.n	801b4be <_svfiprintf_r+0x1a6>
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d0c6      	beq.n	801b448 <_svfiprintf_r+0x130>
 801b4ba:	9105      	str	r1, [sp, #20]
 801b4bc:	e7c4      	b.n	801b448 <_svfiprintf_r+0x130>
 801b4be:	fb0c 2101 	mla	r1, ip, r1, r2
 801b4c2:	4604      	mov	r4, r0
 801b4c4:	2301      	movs	r3, #1
 801b4c6:	e7f0      	b.n	801b4aa <_svfiprintf_r+0x192>
 801b4c8:	ab03      	add	r3, sp, #12
 801b4ca:	9300      	str	r3, [sp, #0]
 801b4cc:	462a      	mov	r2, r5
 801b4ce:	4b0e      	ldr	r3, [pc, #56]	@ (801b508 <_svfiprintf_r+0x1f0>)
 801b4d0:	a904      	add	r1, sp, #16
 801b4d2:	4638      	mov	r0, r7
 801b4d4:	f3af 8000 	nop.w
 801b4d8:	1c42      	adds	r2, r0, #1
 801b4da:	4606      	mov	r6, r0
 801b4dc:	d1d6      	bne.n	801b48c <_svfiprintf_r+0x174>
 801b4de:	89ab      	ldrh	r3, [r5, #12]
 801b4e0:	065b      	lsls	r3, r3, #25
 801b4e2:	f53f af2d 	bmi.w	801b340 <_svfiprintf_r+0x28>
 801b4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b4e8:	e72c      	b.n	801b344 <_svfiprintf_r+0x2c>
 801b4ea:	ab03      	add	r3, sp, #12
 801b4ec:	9300      	str	r3, [sp, #0]
 801b4ee:	462a      	mov	r2, r5
 801b4f0:	4b05      	ldr	r3, [pc, #20]	@ (801b508 <_svfiprintf_r+0x1f0>)
 801b4f2:	a904      	add	r1, sp, #16
 801b4f4:	4638      	mov	r0, r7
 801b4f6:	f000 f9bb 	bl	801b870 <_printf_i>
 801b4fa:	e7ed      	b.n	801b4d8 <_svfiprintf_r+0x1c0>
 801b4fc:	0801daf4 	.word	0x0801daf4
 801b500:	0801dafe 	.word	0x0801dafe
 801b504:	00000000 	.word	0x00000000
 801b508:	0801b261 	.word	0x0801b261
 801b50c:	0801dafa 	.word	0x0801dafa

0801b510 <__sfputc_r>:
 801b510:	6893      	ldr	r3, [r2, #8]
 801b512:	3b01      	subs	r3, #1
 801b514:	2b00      	cmp	r3, #0
 801b516:	b410      	push	{r4}
 801b518:	6093      	str	r3, [r2, #8]
 801b51a:	da08      	bge.n	801b52e <__sfputc_r+0x1e>
 801b51c:	6994      	ldr	r4, [r2, #24]
 801b51e:	42a3      	cmp	r3, r4
 801b520:	db01      	blt.n	801b526 <__sfputc_r+0x16>
 801b522:	290a      	cmp	r1, #10
 801b524:	d103      	bne.n	801b52e <__sfputc_r+0x1e>
 801b526:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b52a:	f7ff bbe1 	b.w	801acf0 <__swbuf_r>
 801b52e:	6813      	ldr	r3, [r2, #0]
 801b530:	1c58      	adds	r0, r3, #1
 801b532:	6010      	str	r0, [r2, #0]
 801b534:	7019      	strb	r1, [r3, #0]
 801b536:	4608      	mov	r0, r1
 801b538:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b53c:	4770      	bx	lr

0801b53e <__sfputs_r>:
 801b53e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b540:	4606      	mov	r6, r0
 801b542:	460f      	mov	r7, r1
 801b544:	4614      	mov	r4, r2
 801b546:	18d5      	adds	r5, r2, r3
 801b548:	42ac      	cmp	r4, r5
 801b54a:	d101      	bne.n	801b550 <__sfputs_r+0x12>
 801b54c:	2000      	movs	r0, #0
 801b54e:	e007      	b.n	801b560 <__sfputs_r+0x22>
 801b550:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b554:	463a      	mov	r2, r7
 801b556:	4630      	mov	r0, r6
 801b558:	f7ff ffda 	bl	801b510 <__sfputc_r>
 801b55c:	1c43      	adds	r3, r0, #1
 801b55e:	d1f3      	bne.n	801b548 <__sfputs_r+0xa>
 801b560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b564 <_vfiprintf_r>:
 801b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b568:	460d      	mov	r5, r1
 801b56a:	b09d      	sub	sp, #116	@ 0x74
 801b56c:	4614      	mov	r4, r2
 801b56e:	4698      	mov	r8, r3
 801b570:	4606      	mov	r6, r0
 801b572:	b118      	cbz	r0, 801b57c <_vfiprintf_r+0x18>
 801b574:	6a03      	ldr	r3, [r0, #32]
 801b576:	b90b      	cbnz	r3, 801b57c <_vfiprintf_r+0x18>
 801b578:	f7ff fa4a 	bl	801aa10 <__sinit>
 801b57c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b57e:	07d9      	lsls	r1, r3, #31
 801b580:	d405      	bmi.n	801b58e <_vfiprintf_r+0x2a>
 801b582:	89ab      	ldrh	r3, [r5, #12]
 801b584:	059a      	lsls	r2, r3, #22
 801b586:	d402      	bmi.n	801b58e <_vfiprintf_r+0x2a>
 801b588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b58a:	f7ff fddc 	bl	801b146 <__retarget_lock_acquire_recursive>
 801b58e:	89ab      	ldrh	r3, [r5, #12]
 801b590:	071b      	lsls	r3, r3, #28
 801b592:	d501      	bpl.n	801b598 <_vfiprintf_r+0x34>
 801b594:	692b      	ldr	r3, [r5, #16]
 801b596:	b99b      	cbnz	r3, 801b5c0 <_vfiprintf_r+0x5c>
 801b598:	4629      	mov	r1, r5
 801b59a:	4630      	mov	r0, r6
 801b59c:	f7ff fbe6 	bl	801ad6c <__swsetup_r>
 801b5a0:	b170      	cbz	r0, 801b5c0 <_vfiprintf_r+0x5c>
 801b5a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b5a4:	07dc      	lsls	r4, r3, #31
 801b5a6:	d504      	bpl.n	801b5b2 <_vfiprintf_r+0x4e>
 801b5a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b5ac:	b01d      	add	sp, #116	@ 0x74
 801b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5b2:	89ab      	ldrh	r3, [r5, #12]
 801b5b4:	0598      	lsls	r0, r3, #22
 801b5b6:	d4f7      	bmi.n	801b5a8 <_vfiprintf_r+0x44>
 801b5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b5ba:	f7ff fdc5 	bl	801b148 <__retarget_lock_release_recursive>
 801b5be:	e7f3      	b.n	801b5a8 <_vfiprintf_r+0x44>
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b5c4:	2320      	movs	r3, #32
 801b5c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 801b5ce:	2330      	movs	r3, #48	@ 0x30
 801b5d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b780 <_vfiprintf_r+0x21c>
 801b5d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b5d8:	f04f 0901 	mov.w	r9, #1
 801b5dc:	4623      	mov	r3, r4
 801b5de:	469a      	mov	sl, r3
 801b5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b5e4:	b10a      	cbz	r2, 801b5ea <_vfiprintf_r+0x86>
 801b5e6:	2a25      	cmp	r2, #37	@ 0x25
 801b5e8:	d1f9      	bne.n	801b5de <_vfiprintf_r+0x7a>
 801b5ea:	ebba 0b04 	subs.w	fp, sl, r4
 801b5ee:	d00b      	beq.n	801b608 <_vfiprintf_r+0xa4>
 801b5f0:	465b      	mov	r3, fp
 801b5f2:	4622      	mov	r2, r4
 801b5f4:	4629      	mov	r1, r5
 801b5f6:	4630      	mov	r0, r6
 801b5f8:	f7ff ffa1 	bl	801b53e <__sfputs_r>
 801b5fc:	3001      	adds	r0, #1
 801b5fe:	f000 80a7 	beq.w	801b750 <_vfiprintf_r+0x1ec>
 801b602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b604:	445a      	add	r2, fp
 801b606:	9209      	str	r2, [sp, #36]	@ 0x24
 801b608:	f89a 3000 	ldrb.w	r3, [sl]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	f000 809f 	beq.w	801b750 <_vfiprintf_r+0x1ec>
 801b612:	2300      	movs	r3, #0
 801b614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801b618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b61c:	f10a 0a01 	add.w	sl, sl, #1
 801b620:	9304      	str	r3, [sp, #16]
 801b622:	9307      	str	r3, [sp, #28]
 801b624:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b628:	931a      	str	r3, [sp, #104]	@ 0x68
 801b62a:	4654      	mov	r4, sl
 801b62c:	2205      	movs	r2, #5
 801b62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b632:	4853      	ldr	r0, [pc, #332]	@ (801b780 <_vfiprintf_r+0x21c>)
 801b634:	f7e4 fdfc 	bl	8000230 <memchr>
 801b638:	9a04      	ldr	r2, [sp, #16]
 801b63a:	b9d8      	cbnz	r0, 801b674 <_vfiprintf_r+0x110>
 801b63c:	06d1      	lsls	r1, r2, #27
 801b63e:	bf44      	itt	mi
 801b640:	2320      	movmi	r3, #32
 801b642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b646:	0713      	lsls	r3, r2, #28
 801b648:	bf44      	itt	mi
 801b64a:	232b      	movmi	r3, #43	@ 0x2b
 801b64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b650:	f89a 3000 	ldrb.w	r3, [sl]
 801b654:	2b2a      	cmp	r3, #42	@ 0x2a
 801b656:	d015      	beq.n	801b684 <_vfiprintf_r+0x120>
 801b658:	9a07      	ldr	r2, [sp, #28]
 801b65a:	4654      	mov	r4, sl
 801b65c:	2000      	movs	r0, #0
 801b65e:	f04f 0c0a 	mov.w	ip, #10
 801b662:	4621      	mov	r1, r4
 801b664:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b668:	3b30      	subs	r3, #48	@ 0x30
 801b66a:	2b09      	cmp	r3, #9
 801b66c:	d94b      	bls.n	801b706 <_vfiprintf_r+0x1a2>
 801b66e:	b1b0      	cbz	r0, 801b69e <_vfiprintf_r+0x13a>
 801b670:	9207      	str	r2, [sp, #28]
 801b672:	e014      	b.n	801b69e <_vfiprintf_r+0x13a>
 801b674:	eba0 0308 	sub.w	r3, r0, r8
 801b678:	fa09 f303 	lsl.w	r3, r9, r3
 801b67c:	4313      	orrs	r3, r2
 801b67e:	9304      	str	r3, [sp, #16]
 801b680:	46a2      	mov	sl, r4
 801b682:	e7d2      	b.n	801b62a <_vfiprintf_r+0xc6>
 801b684:	9b03      	ldr	r3, [sp, #12]
 801b686:	1d19      	adds	r1, r3, #4
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	9103      	str	r1, [sp, #12]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	bfbb      	ittet	lt
 801b690:	425b      	neglt	r3, r3
 801b692:	f042 0202 	orrlt.w	r2, r2, #2
 801b696:	9307      	strge	r3, [sp, #28]
 801b698:	9307      	strlt	r3, [sp, #28]
 801b69a:	bfb8      	it	lt
 801b69c:	9204      	strlt	r2, [sp, #16]
 801b69e:	7823      	ldrb	r3, [r4, #0]
 801b6a0:	2b2e      	cmp	r3, #46	@ 0x2e
 801b6a2:	d10a      	bne.n	801b6ba <_vfiprintf_r+0x156>
 801b6a4:	7863      	ldrb	r3, [r4, #1]
 801b6a6:	2b2a      	cmp	r3, #42	@ 0x2a
 801b6a8:	d132      	bne.n	801b710 <_vfiprintf_r+0x1ac>
 801b6aa:	9b03      	ldr	r3, [sp, #12]
 801b6ac:	1d1a      	adds	r2, r3, #4
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	9203      	str	r2, [sp, #12]
 801b6b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b6b6:	3402      	adds	r4, #2
 801b6b8:	9305      	str	r3, [sp, #20]
 801b6ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b790 <_vfiprintf_r+0x22c>
 801b6be:	7821      	ldrb	r1, [r4, #0]
 801b6c0:	2203      	movs	r2, #3
 801b6c2:	4650      	mov	r0, sl
 801b6c4:	f7e4 fdb4 	bl	8000230 <memchr>
 801b6c8:	b138      	cbz	r0, 801b6da <_vfiprintf_r+0x176>
 801b6ca:	9b04      	ldr	r3, [sp, #16]
 801b6cc:	eba0 000a 	sub.w	r0, r0, sl
 801b6d0:	2240      	movs	r2, #64	@ 0x40
 801b6d2:	4082      	lsls	r2, r0
 801b6d4:	4313      	orrs	r3, r2
 801b6d6:	3401      	adds	r4, #1
 801b6d8:	9304      	str	r3, [sp, #16]
 801b6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6de:	4829      	ldr	r0, [pc, #164]	@ (801b784 <_vfiprintf_r+0x220>)
 801b6e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b6e4:	2206      	movs	r2, #6
 801b6e6:	f7e4 fda3 	bl	8000230 <memchr>
 801b6ea:	2800      	cmp	r0, #0
 801b6ec:	d03f      	beq.n	801b76e <_vfiprintf_r+0x20a>
 801b6ee:	4b26      	ldr	r3, [pc, #152]	@ (801b788 <_vfiprintf_r+0x224>)
 801b6f0:	bb1b      	cbnz	r3, 801b73a <_vfiprintf_r+0x1d6>
 801b6f2:	9b03      	ldr	r3, [sp, #12]
 801b6f4:	3307      	adds	r3, #7
 801b6f6:	f023 0307 	bic.w	r3, r3, #7
 801b6fa:	3308      	adds	r3, #8
 801b6fc:	9303      	str	r3, [sp, #12]
 801b6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b700:	443b      	add	r3, r7
 801b702:	9309      	str	r3, [sp, #36]	@ 0x24
 801b704:	e76a      	b.n	801b5dc <_vfiprintf_r+0x78>
 801b706:	fb0c 3202 	mla	r2, ip, r2, r3
 801b70a:	460c      	mov	r4, r1
 801b70c:	2001      	movs	r0, #1
 801b70e:	e7a8      	b.n	801b662 <_vfiprintf_r+0xfe>
 801b710:	2300      	movs	r3, #0
 801b712:	3401      	adds	r4, #1
 801b714:	9305      	str	r3, [sp, #20]
 801b716:	4619      	mov	r1, r3
 801b718:	f04f 0c0a 	mov.w	ip, #10
 801b71c:	4620      	mov	r0, r4
 801b71e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b722:	3a30      	subs	r2, #48	@ 0x30
 801b724:	2a09      	cmp	r2, #9
 801b726:	d903      	bls.n	801b730 <_vfiprintf_r+0x1cc>
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d0c6      	beq.n	801b6ba <_vfiprintf_r+0x156>
 801b72c:	9105      	str	r1, [sp, #20]
 801b72e:	e7c4      	b.n	801b6ba <_vfiprintf_r+0x156>
 801b730:	fb0c 2101 	mla	r1, ip, r1, r2
 801b734:	4604      	mov	r4, r0
 801b736:	2301      	movs	r3, #1
 801b738:	e7f0      	b.n	801b71c <_vfiprintf_r+0x1b8>
 801b73a:	ab03      	add	r3, sp, #12
 801b73c:	9300      	str	r3, [sp, #0]
 801b73e:	462a      	mov	r2, r5
 801b740:	4b12      	ldr	r3, [pc, #72]	@ (801b78c <_vfiprintf_r+0x228>)
 801b742:	a904      	add	r1, sp, #16
 801b744:	4630      	mov	r0, r6
 801b746:	f3af 8000 	nop.w
 801b74a:	4607      	mov	r7, r0
 801b74c:	1c78      	adds	r0, r7, #1
 801b74e:	d1d6      	bne.n	801b6fe <_vfiprintf_r+0x19a>
 801b750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b752:	07d9      	lsls	r1, r3, #31
 801b754:	d405      	bmi.n	801b762 <_vfiprintf_r+0x1fe>
 801b756:	89ab      	ldrh	r3, [r5, #12]
 801b758:	059a      	lsls	r2, r3, #22
 801b75a:	d402      	bmi.n	801b762 <_vfiprintf_r+0x1fe>
 801b75c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b75e:	f7ff fcf3 	bl	801b148 <__retarget_lock_release_recursive>
 801b762:	89ab      	ldrh	r3, [r5, #12]
 801b764:	065b      	lsls	r3, r3, #25
 801b766:	f53f af1f 	bmi.w	801b5a8 <_vfiprintf_r+0x44>
 801b76a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b76c:	e71e      	b.n	801b5ac <_vfiprintf_r+0x48>
 801b76e:	ab03      	add	r3, sp, #12
 801b770:	9300      	str	r3, [sp, #0]
 801b772:	462a      	mov	r2, r5
 801b774:	4b05      	ldr	r3, [pc, #20]	@ (801b78c <_vfiprintf_r+0x228>)
 801b776:	a904      	add	r1, sp, #16
 801b778:	4630      	mov	r0, r6
 801b77a:	f000 f879 	bl	801b870 <_printf_i>
 801b77e:	e7e4      	b.n	801b74a <_vfiprintf_r+0x1e6>
 801b780:	0801daf4 	.word	0x0801daf4
 801b784:	0801dafe 	.word	0x0801dafe
 801b788:	00000000 	.word	0x00000000
 801b78c:	0801b53f 	.word	0x0801b53f
 801b790:	0801dafa 	.word	0x0801dafa

0801b794 <_printf_common>:
 801b794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b798:	4616      	mov	r6, r2
 801b79a:	4698      	mov	r8, r3
 801b79c:	688a      	ldr	r2, [r1, #8]
 801b79e:	690b      	ldr	r3, [r1, #16]
 801b7a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b7a4:	4293      	cmp	r3, r2
 801b7a6:	bfb8      	it	lt
 801b7a8:	4613      	movlt	r3, r2
 801b7aa:	6033      	str	r3, [r6, #0]
 801b7ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801b7b0:	4607      	mov	r7, r0
 801b7b2:	460c      	mov	r4, r1
 801b7b4:	b10a      	cbz	r2, 801b7ba <_printf_common+0x26>
 801b7b6:	3301      	adds	r3, #1
 801b7b8:	6033      	str	r3, [r6, #0]
 801b7ba:	6823      	ldr	r3, [r4, #0]
 801b7bc:	0699      	lsls	r1, r3, #26
 801b7be:	bf42      	ittt	mi
 801b7c0:	6833      	ldrmi	r3, [r6, #0]
 801b7c2:	3302      	addmi	r3, #2
 801b7c4:	6033      	strmi	r3, [r6, #0]
 801b7c6:	6825      	ldr	r5, [r4, #0]
 801b7c8:	f015 0506 	ands.w	r5, r5, #6
 801b7cc:	d106      	bne.n	801b7dc <_printf_common+0x48>
 801b7ce:	f104 0a19 	add.w	sl, r4, #25
 801b7d2:	68e3      	ldr	r3, [r4, #12]
 801b7d4:	6832      	ldr	r2, [r6, #0]
 801b7d6:	1a9b      	subs	r3, r3, r2
 801b7d8:	42ab      	cmp	r3, r5
 801b7da:	dc26      	bgt.n	801b82a <_printf_common+0x96>
 801b7dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b7e0:	6822      	ldr	r2, [r4, #0]
 801b7e2:	3b00      	subs	r3, #0
 801b7e4:	bf18      	it	ne
 801b7e6:	2301      	movne	r3, #1
 801b7e8:	0692      	lsls	r2, r2, #26
 801b7ea:	d42b      	bmi.n	801b844 <_printf_common+0xb0>
 801b7ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801b7f0:	4641      	mov	r1, r8
 801b7f2:	4638      	mov	r0, r7
 801b7f4:	47c8      	blx	r9
 801b7f6:	3001      	adds	r0, #1
 801b7f8:	d01e      	beq.n	801b838 <_printf_common+0xa4>
 801b7fa:	6823      	ldr	r3, [r4, #0]
 801b7fc:	6922      	ldr	r2, [r4, #16]
 801b7fe:	f003 0306 	and.w	r3, r3, #6
 801b802:	2b04      	cmp	r3, #4
 801b804:	bf02      	ittt	eq
 801b806:	68e5      	ldreq	r5, [r4, #12]
 801b808:	6833      	ldreq	r3, [r6, #0]
 801b80a:	1aed      	subeq	r5, r5, r3
 801b80c:	68a3      	ldr	r3, [r4, #8]
 801b80e:	bf0c      	ite	eq
 801b810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b814:	2500      	movne	r5, #0
 801b816:	4293      	cmp	r3, r2
 801b818:	bfc4      	itt	gt
 801b81a:	1a9b      	subgt	r3, r3, r2
 801b81c:	18ed      	addgt	r5, r5, r3
 801b81e:	2600      	movs	r6, #0
 801b820:	341a      	adds	r4, #26
 801b822:	42b5      	cmp	r5, r6
 801b824:	d11a      	bne.n	801b85c <_printf_common+0xc8>
 801b826:	2000      	movs	r0, #0
 801b828:	e008      	b.n	801b83c <_printf_common+0xa8>
 801b82a:	2301      	movs	r3, #1
 801b82c:	4652      	mov	r2, sl
 801b82e:	4641      	mov	r1, r8
 801b830:	4638      	mov	r0, r7
 801b832:	47c8      	blx	r9
 801b834:	3001      	adds	r0, #1
 801b836:	d103      	bne.n	801b840 <_printf_common+0xac>
 801b838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b840:	3501      	adds	r5, #1
 801b842:	e7c6      	b.n	801b7d2 <_printf_common+0x3e>
 801b844:	18e1      	adds	r1, r4, r3
 801b846:	1c5a      	adds	r2, r3, #1
 801b848:	2030      	movs	r0, #48	@ 0x30
 801b84a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801b84e:	4422      	add	r2, r4
 801b850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801b854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801b858:	3302      	adds	r3, #2
 801b85a:	e7c7      	b.n	801b7ec <_printf_common+0x58>
 801b85c:	2301      	movs	r3, #1
 801b85e:	4622      	mov	r2, r4
 801b860:	4641      	mov	r1, r8
 801b862:	4638      	mov	r0, r7
 801b864:	47c8      	blx	r9
 801b866:	3001      	adds	r0, #1
 801b868:	d0e6      	beq.n	801b838 <_printf_common+0xa4>
 801b86a:	3601      	adds	r6, #1
 801b86c:	e7d9      	b.n	801b822 <_printf_common+0x8e>
	...

0801b870 <_printf_i>:
 801b870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b874:	7e0f      	ldrb	r7, [r1, #24]
 801b876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b878:	2f78      	cmp	r7, #120	@ 0x78
 801b87a:	4691      	mov	r9, r2
 801b87c:	4680      	mov	r8, r0
 801b87e:	460c      	mov	r4, r1
 801b880:	469a      	mov	sl, r3
 801b882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801b886:	d807      	bhi.n	801b898 <_printf_i+0x28>
 801b888:	2f62      	cmp	r7, #98	@ 0x62
 801b88a:	d80a      	bhi.n	801b8a2 <_printf_i+0x32>
 801b88c:	2f00      	cmp	r7, #0
 801b88e:	f000 80d2 	beq.w	801ba36 <_printf_i+0x1c6>
 801b892:	2f58      	cmp	r7, #88	@ 0x58
 801b894:	f000 80b9 	beq.w	801ba0a <_printf_i+0x19a>
 801b898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b89c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801b8a0:	e03a      	b.n	801b918 <_printf_i+0xa8>
 801b8a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801b8a6:	2b15      	cmp	r3, #21
 801b8a8:	d8f6      	bhi.n	801b898 <_printf_i+0x28>
 801b8aa:	a101      	add	r1, pc, #4	@ (adr r1, 801b8b0 <_printf_i+0x40>)
 801b8ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b8b0:	0801b909 	.word	0x0801b909
 801b8b4:	0801b91d 	.word	0x0801b91d
 801b8b8:	0801b899 	.word	0x0801b899
 801b8bc:	0801b899 	.word	0x0801b899
 801b8c0:	0801b899 	.word	0x0801b899
 801b8c4:	0801b899 	.word	0x0801b899
 801b8c8:	0801b91d 	.word	0x0801b91d
 801b8cc:	0801b899 	.word	0x0801b899
 801b8d0:	0801b899 	.word	0x0801b899
 801b8d4:	0801b899 	.word	0x0801b899
 801b8d8:	0801b899 	.word	0x0801b899
 801b8dc:	0801ba1d 	.word	0x0801ba1d
 801b8e0:	0801b947 	.word	0x0801b947
 801b8e4:	0801b9d7 	.word	0x0801b9d7
 801b8e8:	0801b899 	.word	0x0801b899
 801b8ec:	0801b899 	.word	0x0801b899
 801b8f0:	0801ba3f 	.word	0x0801ba3f
 801b8f4:	0801b899 	.word	0x0801b899
 801b8f8:	0801b947 	.word	0x0801b947
 801b8fc:	0801b899 	.word	0x0801b899
 801b900:	0801b899 	.word	0x0801b899
 801b904:	0801b9df 	.word	0x0801b9df
 801b908:	6833      	ldr	r3, [r6, #0]
 801b90a:	1d1a      	adds	r2, r3, #4
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	6032      	str	r2, [r6, #0]
 801b910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b918:	2301      	movs	r3, #1
 801b91a:	e09d      	b.n	801ba58 <_printf_i+0x1e8>
 801b91c:	6833      	ldr	r3, [r6, #0]
 801b91e:	6820      	ldr	r0, [r4, #0]
 801b920:	1d19      	adds	r1, r3, #4
 801b922:	6031      	str	r1, [r6, #0]
 801b924:	0606      	lsls	r6, r0, #24
 801b926:	d501      	bpl.n	801b92c <_printf_i+0xbc>
 801b928:	681d      	ldr	r5, [r3, #0]
 801b92a:	e003      	b.n	801b934 <_printf_i+0xc4>
 801b92c:	0645      	lsls	r5, r0, #25
 801b92e:	d5fb      	bpl.n	801b928 <_printf_i+0xb8>
 801b930:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b934:	2d00      	cmp	r5, #0
 801b936:	da03      	bge.n	801b940 <_printf_i+0xd0>
 801b938:	232d      	movs	r3, #45	@ 0x2d
 801b93a:	426d      	negs	r5, r5
 801b93c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b940:	4859      	ldr	r0, [pc, #356]	@ (801baa8 <_printf_i+0x238>)
 801b942:	230a      	movs	r3, #10
 801b944:	e011      	b.n	801b96a <_printf_i+0xfa>
 801b946:	6821      	ldr	r1, [r4, #0]
 801b948:	6833      	ldr	r3, [r6, #0]
 801b94a:	0608      	lsls	r0, r1, #24
 801b94c:	f853 5b04 	ldr.w	r5, [r3], #4
 801b950:	d402      	bmi.n	801b958 <_printf_i+0xe8>
 801b952:	0649      	lsls	r1, r1, #25
 801b954:	bf48      	it	mi
 801b956:	b2ad      	uxthmi	r5, r5
 801b958:	2f6f      	cmp	r7, #111	@ 0x6f
 801b95a:	4853      	ldr	r0, [pc, #332]	@ (801baa8 <_printf_i+0x238>)
 801b95c:	6033      	str	r3, [r6, #0]
 801b95e:	bf14      	ite	ne
 801b960:	230a      	movne	r3, #10
 801b962:	2308      	moveq	r3, #8
 801b964:	2100      	movs	r1, #0
 801b966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b96a:	6866      	ldr	r6, [r4, #4]
 801b96c:	60a6      	str	r6, [r4, #8]
 801b96e:	2e00      	cmp	r6, #0
 801b970:	bfa2      	ittt	ge
 801b972:	6821      	ldrge	r1, [r4, #0]
 801b974:	f021 0104 	bicge.w	r1, r1, #4
 801b978:	6021      	strge	r1, [r4, #0]
 801b97a:	b90d      	cbnz	r5, 801b980 <_printf_i+0x110>
 801b97c:	2e00      	cmp	r6, #0
 801b97e:	d04b      	beq.n	801ba18 <_printf_i+0x1a8>
 801b980:	4616      	mov	r6, r2
 801b982:	fbb5 f1f3 	udiv	r1, r5, r3
 801b986:	fb03 5711 	mls	r7, r3, r1, r5
 801b98a:	5dc7      	ldrb	r7, [r0, r7]
 801b98c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b990:	462f      	mov	r7, r5
 801b992:	42bb      	cmp	r3, r7
 801b994:	460d      	mov	r5, r1
 801b996:	d9f4      	bls.n	801b982 <_printf_i+0x112>
 801b998:	2b08      	cmp	r3, #8
 801b99a:	d10b      	bne.n	801b9b4 <_printf_i+0x144>
 801b99c:	6823      	ldr	r3, [r4, #0]
 801b99e:	07df      	lsls	r7, r3, #31
 801b9a0:	d508      	bpl.n	801b9b4 <_printf_i+0x144>
 801b9a2:	6923      	ldr	r3, [r4, #16]
 801b9a4:	6861      	ldr	r1, [r4, #4]
 801b9a6:	4299      	cmp	r1, r3
 801b9a8:	bfde      	ittt	le
 801b9aa:	2330      	movle	r3, #48	@ 0x30
 801b9ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b9b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801b9b4:	1b92      	subs	r2, r2, r6
 801b9b6:	6122      	str	r2, [r4, #16]
 801b9b8:	f8cd a000 	str.w	sl, [sp]
 801b9bc:	464b      	mov	r3, r9
 801b9be:	aa03      	add	r2, sp, #12
 801b9c0:	4621      	mov	r1, r4
 801b9c2:	4640      	mov	r0, r8
 801b9c4:	f7ff fee6 	bl	801b794 <_printf_common>
 801b9c8:	3001      	adds	r0, #1
 801b9ca:	d14a      	bne.n	801ba62 <_printf_i+0x1f2>
 801b9cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b9d0:	b004      	add	sp, #16
 801b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9d6:	6823      	ldr	r3, [r4, #0]
 801b9d8:	f043 0320 	orr.w	r3, r3, #32
 801b9dc:	6023      	str	r3, [r4, #0]
 801b9de:	4833      	ldr	r0, [pc, #204]	@ (801baac <_printf_i+0x23c>)
 801b9e0:	2778      	movs	r7, #120	@ 0x78
 801b9e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b9e6:	6823      	ldr	r3, [r4, #0]
 801b9e8:	6831      	ldr	r1, [r6, #0]
 801b9ea:	061f      	lsls	r7, r3, #24
 801b9ec:	f851 5b04 	ldr.w	r5, [r1], #4
 801b9f0:	d402      	bmi.n	801b9f8 <_printf_i+0x188>
 801b9f2:	065f      	lsls	r7, r3, #25
 801b9f4:	bf48      	it	mi
 801b9f6:	b2ad      	uxthmi	r5, r5
 801b9f8:	6031      	str	r1, [r6, #0]
 801b9fa:	07d9      	lsls	r1, r3, #31
 801b9fc:	bf44      	itt	mi
 801b9fe:	f043 0320 	orrmi.w	r3, r3, #32
 801ba02:	6023      	strmi	r3, [r4, #0]
 801ba04:	b11d      	cbz	r5, 801ba0e <_printf_i+0x19e>
 801ba06:	2310      	movs	r3, #16
 801ba08:	e7ac      	b.n	801b964 <_printf_i+0xf4>
 801ba0a:	4827      	ldr	r0, [pc, #156]	@ (801baa8 <_printf_i+0x238>)
 801ba0c:	e7e9      	b.n	801b9e2 <_printf_i+0x172>
 801ba0e:	6823      	ldr	r3, [r4, #0]
 801ba10:	f023 0320 	bic.w	r3, r3, #32
 801ba14:	6023      	str	r3, [r4, #0]
 801ba16:	e7f6      	b.n	801ba06 <_printf_i+0x196>
 801ba18:	4616      	mov	r6, r2
 801ba1a:	e7bd      	b.n	801b998 <_printf_i+0x128>
 801ba1c:	6833      	ldr	r3, [r6, #0]
 801ba1e:	6825      	ldr	r5, [r4, #0]
 801ba20:	6961      	ldr	r1, [r4, #20]
 801ba22:	1d18      	adds	r0, r3, #4
 801ba24:	6030      	str	r0, [r6, #0]
 801ba26:	062e      	lsls	r6, r5, #24
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	d501      	bpl.n	801ba30 <_printf_i+0x1c0>
 801ba2c:	6019      	str	r1, [r3, #0]
 801ba2e:	e002      	b.n	801ba36 <_printf_i+0x1c6>
 801ba30:	0668      	lsls	r0, r5, #25
 801ba32:	d5fb      	bpl.n	801ba2c <_printf_i+0x1bc>
 801ba34:	8019      	strh	r1, [r3, #0]
 801ba36:	2300      	movs	r3, #0
 801ba38:	6123      	str	r3, [r4, #16]
 801ba3a:	4616      	mov	r6, r2
 801ba3c:	e7bc      	b.n	801b9b8 <_printf_i+0x148>
 801ba3e:	6833      	ldr	r3, [r6, #0]
 801ba40:	1d1a      	adds	r2, r3, #4
 801ba42:	6032      	str	r2, [r6, #0]
 801ba44:	681e      	ldr	r6, [r3, #0]
 801ba46:	6862      	ldr	r2, [r4, #4]
 801ba48:	2100      	movs	r1, #0
 801ba4a:	4630      	mov	r0, r6
 801ba4c:	f7e4 fbf0 	bl	8000230 <memchr>
 801ba50:	b108      	cbz	r0, 801ba56 <_printf_i+0x1e6>
 801ba52:	1b80      	subs	r0, r0, r6
 801ba54:	6060      	str	r0, [r4, #4]
 801ba56:	6863      	ldr	r3, [r4, #4]
 801ba58:	6123      	str	r3, [r4, #16]
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ba60:	e7aa      	b.n	801b9b8 <_printf_i+0x148>
 801ba62:	6923      	ldr	r3, [r4, #16]
 801ba64:	4632      	mov	r2, r6
 801ba66:	4649      	mov	r1, r9
 801ba68:	4640      	mov	r0, r8
 801ba6a:	47d0      	blx	sl
 801ba6c:	3001      	adds	r0, #1
 801ba6e:	d0ad      	beq.n	801b9cc <_printf_i+0x15c>
 801ba70:	6823      	ldr	r3, [r4, #0]
 801ba72:	079b      	lsls	r3, r3, #30
 801ba74:	d413      	bmi.n	801ba9e <_printf_i+0x22e>
 801ba76:	68e0      	ldr	r0, [r4, #12]
 801ba78:	9b03      	ldr	r3, [sp, #12]
 801ba7a:	4298      	cmp	r0, r3
 801ba7c:	bfb8      	it	lt
 801ba7e:	4618      	movlt	r0, r3
 801ba80:	e7a6      	b.n	801b9d0 <_printf_i+0x160>
 801ba82:	2301      	movs	r3, #1
 801ba84:	4632      	mov	r2, r6
 801ba86:	4649      	mov	r1, r9
 801ba88:	4640      	mov	r0, r8
 801ba8a:	47d0      	blx	sl
 801ba8c:	3001      	adds	r0, #1
 801ba8e:	d09d      	beq.n	801b9cc <_printf_i+0x15c>
 801ba90:	3501      	adds	r5, #1
 801ba92:	68e3      	ldr	r3, [r4, #12]
 801ba94:	9903      	ldr	r1, [sp, #12]
 801ba96:	1a5b      	subs	r3, r3, r1
 801ba98:	42ab      	cmp	r3, r5
 801ba9a:	dcf2      	bgt.n	801ba82 <_printf_i+0x212>
 801ba9c:	e7eb      	b.n	801ba76 <_printf_i+0x206>
 801ba9e:	2500      	movs	r5, #0
 801baa0:	f104 0619 	add.w	r6, r4, #25
 801baa4:	e7f5      	b.n	801ba92 <_printf_i+0x222>
 801baa6:	bf00      	nop
 801baa8:	0801db05 	.word	0x0801db05
 801baac:	0801db16 	.word	0x0801db16

0801bab0 <__sflush_r>:
 801bab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bab8:	0716      	lsls	r6, r2, #28
 801baba:	4605      	mov	r5, r0
 801babc:	460c      	mov	r4, r1
 801babe:	d454      	bmi.n	801bb6a <__sflush_r+0xba>
 801bac0:	684b      	ldr	r3, [r1, #4]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	dc02      	bgt.n	801bacc <__sflush_r+0x1c>
 801bac6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bac8:	2b00      	cmp	r3, #0
 801baca:	dd48      	ble.n	801bb5e <__sflush_r+0xae>
 801bacc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bace:	2e00      	cmp	r6, #0
 801bad0:	d045      	beq.n	801bb5e <__sflush_r+0xae>
 801bad2:	2300      	movs	r3, #0
 801bad4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bad8:	682f      	ldr	r7, [r5, #0]
 801bada:	6a21      	ldr	r1, [r4, #32]
 801badc:	602b      	str	r3, [r5, #0]
 801bade:	d030      	beq.n	801bb42 <__sflush_r+0x92>
 801bae0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bae2:	89a3      	ldrh	r3, [r4, #12]
 801bae4:	0759      	lsls	r1, r3, #29
 801bae6:	d505      	bpl.n	801baf4 <__sflush_r+0x44>
 801bae8:	6863      	ldr	r3, [r4, #4]
 801baea:	1ad2      	subs	r2, r2, r3
 801baec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801baee:	b10b      	cbz	r3, 801baf4 <__sflush_r+0x44>
 801baf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801baf2:	1ad2      	subs	r2, r2, r3
 801baf4:	2300      	movs	r3, #0
 801baf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801baf8:	6a21      	ldr	r1, [r4, #32]
 801bafa:	4628      	mov	r0, r5
 801bafc:	47b0      	blx	r6
 801bafe:	1c43      	adds	r3, r0, #1
 801bb00:	89a3      	ldrh	r3, [r4, #12]
 801bb02:	d106      	bne.n	801bb12 <__sflush_r+0x62>
 801bb04:	6829      	ldr	r1, [r5, #0]
 801bb06:	291d      	cmp	r1, #29
 801bb08:	d82b      	bhi.n	801bb62 <__sflush_r+0xb2>
 801bb0a:	4a2a      	ldr	r2, [pc, #168]	@ (801bbb4 <__sflush_r+0x104>)
 801bb0c:	410a      	asrs	r2, r1
 801bb0e:	07d6      	lsls	r6, r2, #31
 801bb10:	d427      	bmi.n	801bb62 <__sflush_r+0xb2>
 801bb12:	2200      	movs	r2, #0
 801bb14:	6062      	str	r2, [r4, #4]
 801bb16:	04d9      	lsls	r1, r3, #19
 801bb18:	6922      	ldr	r2, [r4, #16]
 801bb1a:	6022      	str	r2, [r4, #0]
 801bb1c:	d504      	bpl.n	801bb28 <__sflush_r+0x78>
 801bb1e:	1c42      	adds	r2, r0, #1
 801bb20:	d101      	bne.n	801bb26 <__sflush_r+0x76>
 801bb22:	682b      	ldr	r3, [r5, #0]
 801bb24:	b903      	cbnz	r3, 801bb28 <__sflush_r+0x78>
 801bb26:	6560      	str	r0, [r4, #84]	@ 0x54
 801bb28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bb2a:	602f      	str	r7, [r5, #0]
 801bb2c:	b1b9      	cbz	r1, 801bb5e <__sflush_r+0xae>
 801bb2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bb32:	4299      	cmp	r1, r3
 801bb34:	d002      	beq.n	801bb3c <__sflush_r+0x8c>
 801bb36:	4628      	mov	r0, r5
 801bb38:	f7ff fb48 	bl	801b1cc <_free_r>
 801bb3c:	2300      	movs	r3, #0
 801bb3e:	6363      	str	r3, [r4, #52]	@ 0x34
 801bb40:	e00d      	b.n	801bb5e <__sflush_r+0xae>
 801bb42:	2301      	movs	r3, #1
 801bb44:	4628      	mov	r0, r5
 801bb46:	47b0      	blx	r6
 801bb48:	4602      	mov	r2, r0
 801bb4a:	1c50      	adds	r0, r2, #1
 801bb4c:	d1c9      	bne.n	801bae2 <__sflush_r+0x32>
 801bb4e:	682b      	ldr	r3, [r5, #0]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d0c6      	beq.n	801bae2 <__sflush_r+0x32>
 801bb54:	2b1d      	cmp	r3, #29
 801bb56:	d001      	beq.n	801bb5c <__sflush_r+0xac>
 801bb58:	2b16      	cmp	r3, #22
 801bb5a:	d11e      	bne.n	801bb9a <__sflush_r+0xea>
 801bb5c:	602f      	str	r7, [r5, #0]
 801bb5e:	2000      	movs	r0, #0
 801bb60:	e022      	b.n	801bba8 <__sflush_r+0xf8>
 801bb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bb66:	b21b      	sxth	r3, r3
 801bb68:	e01b      	b.n	801bba2 <__sflush_r+0xf2>
 801bb6a:	690f      	ldr	r7, [r1, #16]
 801bb6c:	2f00      	cmp	r7, #0
 801bb6e:	d0f6      	beq.n	801bb5e <__sflush_r+0xae>
 801bb70:	0793      	lsls	r3, r2, #30
 801bb72:	680e      	ldr	r6, [r1, #0]
 801bb74:	bf08      	it	eq
 801bb76:	694b      	ldreq	r3, [r1, #20]
 801bb78:	600f      	str	r7, [r1, #0]
 801bb7a:	bf18      	it	ne
 801bb7c:	2300      	movne	r3, #0
 801bb7e:	eba6 0807 	sub.w	r8, r6, r7
 801bb82:	608b      	str	r3, [r1, #8]
 801bb84:	f1b8 0f00 	cmp.w	r8, #0
 801bb88:	dde9      	ble.n	801bb5e <__sflush_r+0xae>
 801bb8a:	6a21      	ldr	r1, [r4, #32]
 801bb8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801bb8e:	4643      	mov	r3, r8
 801bb90:	463a      	mov	r2, r7
 801bb92:	4628      	mov	r0, r5
 801bb94:	47b0      	blx	r6
 801bb96:	2800      	cmp	r0, #0
 801bb98:	dc08      	bgt.n	801bbac <__sflush_r+0xfc>
 801bb9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bba2:	81a3      	strh	r3, [r4, #12]
 801bba4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbac:	4407      	add	r7, r0
 801bbae:	eba8 0800 	sub.w	r8, r8, r0
 801bbb2:	e7e7      	b.n	801bb84 <__sflush_r+0xd4>
 801bbb4:	dfbffffe 	.word	0xdfbffffe

0801bbb8 <_fflush_r>:
 801bbb8:	b538      	push	{r3, r4, r5, lr}
 801bbba:	690b      	ldr	r3, [r1, #16]
 801bbbc:	4605      	mov	r5, r0
 801bbbe:	460c      	mov	r4, r1
 801bbc0:	b913      	cbnz	r3, 801bbc8 <_fflush_r+0x10>
 801bbc2:	2500      	movs	r5, #0
 801bbc4:	4628      	mov	r0, r5
 801bbc6:	bd38      	pop	{r3, r4, r5, pc}
 801bbc8:	b118      	cbz	r0, 801bbd2 <_fflush_r+0x1a>
 801bbca:	6a03      	ldr	r3, [r0, #32]
 801bbcc:	b90b      	cbnz	r3, 801bbd2 <_fflush_r+0x1a>
 801bbce:	f7fe ff1f 	bl	801aa10 <__sinit>
 801bbd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d0f3      	beq.n	801bbc2 <_fflush_r+0xa>
 801bbda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801bbdc:	07d0      	lsls	r0, r2, #31
 801bbde:	d404      	bmi.n	801bbea <_fflush_r+0x32>
 801bbe0:	0599      	lsls	r1, r3, #22
 801bbe2:	d402      	bmi.n	801bbea <_fflush_r+0x32>
 801bbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bbe6:	f7ff faae 	bl	801b146 <__retarget_lock_acquire_recursive>
 801bbea:	4628      	mov	r0, r5
 801bbec:	4621      	mov	r1, r4
 801bbee:	f7ff ff5f 	bl	801bab0 <__sflush_r>
 801bbf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bbf4:	07da      	lsls	r2, r3, #31
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	d4e4      	bmi.n	801bbc4 <_fflush_r+0xc>
 801bbfa:	89a3      	ldrh	r3, [r4, #12]
 801bbfc:	059b      	lsls	r3, r3, #22
 801bbfe:	d4e1      	bmi.n	801bbc4 <_fflush_r+0xc>
 801bc00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bc02:	f7ff faa1 	bl	801b148 <__retarget_lock_release_recursive>
 801bc06:	e7dd      	b.n	801bbc4 <_fflush_r+0xc>

0801bc08 <_malloc_usable_size_r>:
 801bc08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc0c:	1f18      	subs	r0, r3, #4
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	bfbc      	itt	lt
 801bc12:	580b      	ldrlt	r3, [r1, r0]
 801bc14:	18c0      	addlt	r0, r0, r3
 801bc16:	4770      	bx	lr

0801bc18 <__sread>:
 801bc18:	b510      	push	{r4, lr}
 801bc1a:	460c      	mov	r4, r1
 801bc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc20:	f000 f872 	bl	801bd08 <_read_r>
 801bc24:	2800      	cmp	r0, #0
 801bc26:	bfab      	itete	ge
 801bc28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801bc2a:	89a3      	ldrhlt	r3, [r4, #12]
 801bc2c:	181b      	addge	r3, r3, r0
 801bc2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bc32:	bfac      	ite	ge
 801bc34:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bc36:	81a3      	strhlt	r3, [r4, #12]
 801bc38:	bd10      	pop	{r4, pc}

0801bc3a <__swrite>:
 801bc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc3e:	461f      	mov	r7, r3
 801bc40:	898b      	ldrh	r3, [r1, #12]
 801bc42:	05db      	lsls	r3, r3, #23
 801bc44:	4605      	mov	r5, r0
 801bc46:	460c      	mov	r4, r1
 801bc48:	4616      	mov	r6, r2
 801bc4a:	d505      	bpl.n	801bc58 <__swrite+0x1e>
 801bc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc50:	2302      	movs	r3, #2
 801bc52:	2200      	movs	r2, #0
 801bc54:	f000 f846 	bl	801bce4 <_lseek_r>
 801bc58:	89a3      	ldrh	r3, [r4, #12]
 801bc5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bc62:	81a3      	strh	r3, [r4, #12]
 801bc64:	4632      	mov	r2, r6
 801bc66:	463b      	mov	r3, r7
 801bc68:	4628      	mov	r0, r5
 801bc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc6e:	f000 b85d 	b.w	801bd2c <_write_r>

0801bc72 <__sseek>:
 801bc72:	b510      	push	{r4, lr}
 801bc74:	460c      	mov	r4, r1
 801bc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc7a:	f000 f833 	bl	801bce4 <_lseek_r>
 801bc7e:	1c43      	adds	r3, r0, #1
 801bc80:	89a3      	ldrh	r3, [r4, #12]
 801bc82:	bf15      	itete	ne
 801bc84:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bc86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bc8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bc8e:	81a3      	strheq	r3, [r4, #12]
 801bc90:	bf18      	it	ne
 801bc92:	81a3      	strhne	r3, [r4, #12]
 801bc94:	bd10      	pop	{r4, pc}

0801bc96 <__sclose>:
 801bc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc9a:	f000 b813 	b.w	801bcc4 <_close_r>
	...

0801bca0 <fiprintf>:
 801bca0:	b40e      	push	{r1, r2, r3}
 801bca2:	b503      	push	{r0, r1, lr}
 801bca4:	4601      	mov	r1, r0
 801bca6:	ab03      	add	r3, sp, #12
 801bca8:	4805      	ldr	r0, [pc, #20]	@ (801bcc0 <fiprintf+0x20>)
 801bcaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801bcae:	6800      	ldr	r0, [r0, #0]
 801bcb0:	9301      	str	r3, [sp, #4]
 801bcb2:	f7ff fc57 	bl	801b564 <_vfiprintf_r>
 801bcb6:	b002      	add	sp, #8
 801bcb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bcbc:	b003      	add	sp, #12
 801bcbe:	4770      	bx	lr
 801bcc0:	20000a74 	.word	0x20000a74

0801bcc4 <_close_r>:
 801bcc4:	b538      	push	{r3, r4, r5, lr}
 801bcc6:	4d06      	ldr	r5, [pc, #24]	@ (801bce0 <_close_r+0x1c>)
 801bcc8:	2300      	movs	r3, #0
 801bcca:	4604      	mov	r4, r0
 801bccc:	4608      	mov	r0, r1
 801bcce:	602b      	str	r3, [r5, #0]
 801bcd0:	f7e6 fcd2 	bl	8002678 <_close>
 801bcd4:	1c43      	adds	r3, r0, #1
 801bcd6:	d102      	bne.n	801bcde <_close_r+0x1a>
 801bcd8:	682b      	ldr	r3, [r5, #0]
 801bcda:	b103      	cbz	r3, 801bcde <_close_r+0x1a>
 801bcdc:	6023      	str	r3, [r4, #0]
 801bcde:	bd38      	pop	{r3, r4, r5, pc}
 801bce0:	20016088 	.word	0x20016088

0801bce4 <_lseek_r>:
 801bce4:	b538      	push	{r3, r4, r5, lr}
 801bce6:	4d07      	ldr	r5, [pc, #28]	@ (801bd04 <_lseek_r+0x20>)
 801bce8:	4604      	mov	r4, r0
 801bcea:	4608      	mov	r0, r1
 801bcec:	4611      	mov	r1, r2
 801bcee:	2200      	movs	r2, #0
 801bcf0:	602a      	str	r2, [r5, #0]
 801bcf2:	461a      	mov	r2, r3
 801bcf4:	f7e6 fce7 	bl	80026c6 <_lseek>
 801bcf8:	1c43      	adds	r3, r0, #1
 801bcfa:	d102      	bne.n	801bd02 <_lseek_r+0x1e>
 801bcfc:	682b      	ldr	r3, [r5, #0]
 801bcfe:	b103      	cbz	r3, 801bd02 <_lseek_r+0x1e>
 801bd00:	6023      	str	r3, [r4, #0]
 801bd02:	bd38      	pop	{r3, r4, r5, pc}
 801bd04:	20016088 	.word	0x20016088

0801bd08 <_read_r>:
 801bd08:	b538      	push	{r3, r4, r5, lr}
 801bd0a:	4d07      	ldr	r5, [pc, #28]	@ (801bd28 <_read_r+0x20>)
 801bd0c:	4604      	mov	r4, r0
 801bd0e:	4608      	mov	r0, r1
 801bd10:	4611      	mov	r1, r2
 801bd12:	2200      	movs	r2, #0
 801bd14:	602a      	str	r2, [r5, #0]
 801bd16:	461a      	mov	r2, r3
 801bd18:	f7e6 fc91 	bl	800263e <_read>
 801bd1c:	1c43      	adds	r3, r0, #1
 801bd1e:	d102      	bne.n	801bd26 <_read_r+0x1e>
 801bd20:	682b      	ldr	r3, [r5, #0]
 801bd22:	b103      	cbz	r3, 801bd26 <_read_r+0x1e>
 801bd24:	6023      	str	r3, [r4, #0]
 801bd26:	bd38      	pop	{r3, r4, r5, pc}
 801bd28:	20016088 	.word	0x20016088

0801bd2c <_write_r>:
 801bd2c:	b538      	push	{r3, r4, r5, lr}
 801bd2e:	4d07      	ldr	r5, [pc, #28]	@ (801bd4c <_write_r+0x20>)
 801bd30:	4604      	mov	r4, r0
 801bd32:	4608      	mov	r0, r1
 801bd34:	4611      	mov	r1, r2
 801bd36:	2200      	movs	r2, #0
 801bd38:	602a      	str	r2, [r5, #0]
 801bd3a:	461a      	mov	r2, r3
 801bd3c:	f7e6 f9be 	bl	80020bc <_write>
 801bd40:	1c43      	adds	r3, r0, #1
 801bd42:	d102      	bne.n	801bd4a <_write_r+0x1e>
 801bd44:	682b      	ldr	r3, [r5, #0]
 801bd46:	b103      	cbz	r3, 801bd4a <_write_r+0x1e>
 801bd48:	6023      	str	r3, [r4, #0]
 801bd4a:	bd38      	pop	{r3, r4, r5, pc}
 801bd4c:	20016088 	.word	0x20016088

0801bd50 <abort>:
 801bd50:	b508      	push	{r3, lr}
 801bd52:	2006      	movs	r0, #6
 801bd54:	f000 f82c 	bl	801bdb0 <raise>
 801bd58:	2001      	movs	r0, #1
 801bd5a:	f7e6 fc65 	bl	8002628 <_exit>

0801bd5e <_raise_r>:
 801bd5e:	291f      	cmp	r1, #31
 801bd60:	b538      	push	{r3, r4, r5, lr}
 801bd62:	4605      	mov	r5, r0
 801bd64:	460c      	mov	r4, r1
 801bd66:	d904      	bls.n	801bd72 <_raise_r+0x14>
 801bd68:	2316      	movs	r3, #22
 801bd6a:	6003      	str	r3, [r0, #0]
 801bd6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd70:	bd38      	pop	{r3, r4, r5, pc}
 801bd72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801bd74:	b112      	cbz	r2, 801bd7c <_raise_r+0x1e>
 801bd76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bd7a:	b94b      	cbnz	r3, 801bd90 <_raise_r+0x32>
 801bd7c:	4628      	mov	r0, r5
 801bd7e:	f000 f831 	bl	801bde4 <_getpid_r>
 801bd82:	4622      	mov	r2, r4
 801bd84:	4601      	mov	r1, r0
 801bd86:	4628      	mov	r0, r5
 801bd88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd8c:	f000 b818 	b.w	801bdc0 <_kill_r>
 801bd90:	2b01      	cmp	r3, #1
 801bd92:	d00a      	beq.n	801bdaa <_raise_r+0x4c>
 801bd94:	1c59      	adds	r1, r3, #1
 801bd96:	d103      	bne.n	801bda0 <_raise_r+0x42>
 801bd98:	2316      	movs	r3, #22
 801bd9a:	6003      	str	r3, [r0, #0]
 801bd9c:	2001      	movs	r0, #1
 801bd9e:	e7e7      	b.n	801bd70 <_raise_r+0x12>
 801bda0:	2100      	movs	r1, #0
 801bda2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801bda6:	4620      	mov	r0, r4
 801bda8:	4798      	blx	r3
 801bdaa:	2000      	movs	r0, #0
 801bdac:	e7e0      	b.n	801bd70 <_raise_r+0x12>
	...

0801bdb0 <raise>:
 801bdb0:	4b02      	ldr	r3, [pc, #8]	@ (801bdbc <raise+0xc>)
 801bdb2:	4601      	mov	r1, r0
 801bdb4:	6818      	ldr	r0, [r3, #0]
 801bdb6:	f7ff bfd2 	b.w	801bd5e <_raise_r>
 801bdba:	bf00      	nop
 801bdbc:	20000a74 	.word	0x20000a74

0801bdc0 <_kill_r>:
 801bdc0:	b538      	push	{r3, r4, r5, lr}
 801bdc2:	4d07      	ldr	r5, [pc, #28]	@ (801bde0 <_kill_r+0x20>)
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	4608      	mov	r0, r1
 801bdca:	4611      	mov	r1, r2
 801bdcc:	602b      	str	r3, [r5, #0]
 801bdce:	f7e6 fc1b 	bl	8002608 <_kill>
 801bdd2:	1c43      	adds	r3, r0, #1
 801bdd4:	d102      	bne.n	801bddc <_kill_r+0x1c>
 801bdd6:	682b      	ldr	r3, [r5, #0]
 801bdd8:	b103      	cbz	r3, 801bddc <_kill_r+0x1c>
 801bdda:	6023      	str	r3, [r4, #0]
 801bddc:	bd38      	pop	{r3, r4, r5, pc}
 801bdde:	bf00      	nop
 801bde0:	20016088 	.word	0x20016088

0801bde4 <_getpid_r>:
 801bde4:	f7e6 bc08 	b.w	80025f8 <_getpid>

0801bde8 <_init>:
 801bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdea:	bf00      	nop
 801bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdee:	bc08      	pop	{r3}
 801bdf0:	469e      	mov	lr, r3
 801bdf2:	4770      	bx	lr

0801bdf4 <_fini>:
 801bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdf6:	bf00      	nop
 801bdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdfa:	bc08      	pop	{r3}
 801bdfc:	469e      	mov	lr, r3
 801bdfe:	4770      	bx	lr
