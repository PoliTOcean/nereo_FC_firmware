
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ab40  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cb8  0801ad00  0801ad00  0001bd00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c9b8  0801c9b8  0001eac4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c9b8  0801c9b8  0001d9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c9c0  0801c9c0  0001eac4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801c9c0  0801c9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c9d8  0801c9d8  0001d9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ac4  20000000  0801c9dc  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001eac4  2**0
                  CONTENTS
 10 .bss          00015084  20000ac8  20000ac8  0001eac8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20015b4c  20015b4c  0001eac8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001eac4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fdb4  00000000  00000000  0001eaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005244  00000000  00000000  0003e8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00043af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b1  00000000  00000000  00045398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003037e  00000000  00000000  00046649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000214aa  00000000  00000000  000769c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001105c5  00000000  00000000  00097e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ef  00000000  00000000  001a8436  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007564  00000000  00000000  001a8528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001afa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001afafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001b0456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000ac8 	.word	0x20000ac8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801ace8 	.word	0x0801ace8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000acc 	.word	0x20000acc
 80001fc:	0801ace8 	.word	0x0801ace8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9b5 	b.w	8000fa8 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fb8:	f006 fc7a 	bl	80078b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fc4:	f000 f986 	bl	80012d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fc8:	4b58      	ldr	r3, [pc, #352]	@ (800112c <pvPortMallocMicroROS+0x180>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8090 	bne.w	80010f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01e      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fdc:	2208      	movs	r2, #8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f023 0307 	bic.w	r3, r3, #7
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d06a      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d865      	bhi.n	80010f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 800102c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001034:	e004      	b.n	8001040 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d903      	bls.n	8001052 <pvPortMallocMicroROS+0xa6>
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f1      	bne.n	8001036 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	d04c      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4413      	add	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	2308      	movs	r3, #8
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	429a      	cmp	r2, r3
 800107c:	d920      	bls.n	80010c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800107e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001094:	f383 8811 	msr	BASEPRI, r3
 8001098:	f3bf 8f6f 	isb	sy
 800109c:	f3bf 8f4f 	dsb	sy
 80010a0:	613b      	str	r3, [r7, #16]
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ba:	69b8      	ldr	r0, [r7, #24]
 80010bc:	f000 f96c 	bl	8001398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d203      	bcs.n	80010e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <pvPortMallocMicroROS+0x180>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010f6:	f006 fbe9 	bl	80078cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	60fb      	str	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800111c:	69fb      	ldr	r3, [r7, #28]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000801c 	.word	0x2000801c
 800112c:	20008028 	.word	0x20008028
 8001130:	20008020 	.word	0x20008020
 8001134:	20008014 	.word	0x20008014
 8001138:	20008024 	.word	0x20008024

0800113c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d04a      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800114e:	2308      	movs	r3, #8
 8001150:	425b      	negs	r3, r3
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <vPortFreeMicroROS+0x46>
	__asm volatile
 800116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116e:	f383 8811 	msr	BASEPRI, r3
 8001172:	f3bf 8f6f 	isb	sy
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	60fb      	str	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	60bb      	str	r3, [r7, #8]
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d019      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011c8:	f006 fb72 	bl	80078b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f000 f8dc 	bl	8001398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011e0:	f006 fb74 	bl	80078cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20008028 	.word	0x20008028
 80011f0:	20008020 	.word	0x20008020

080011f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001200:	2308      	movs	r3, #8
 8001202:	425b      	negs	r3, r3
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <getBlockSize+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	43db      	mvns	r3, r3
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

	return count;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20008028 	.word	0x20008028

08001230 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800123a:	f006 fb39 	bl	80078b0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff feb4 	bl	8000fac <pvPortMallocMicroROS>
 8001244:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffce 	bl	80011f4 <getBlockSize>
 8001258:	4603      	mov	r3, r0
 800125a:	2208      	movs	r2, #8
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d201      	bcs.n	800126c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f018 fc60 	bl	8019b36 <memcpy>

		vPortFreeMicroROS(pv);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff60 	bl	800113c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800127c:	f006 fb26 	bl	80078cc <xTaskResumeAll>

	return newmem;
 8001280:	68bb      	ldr	r3, [r7, #8]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001294:	f006 fb0c 	bl	80078b0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff fe82 	bl	8000fac <pvPortMallocMicroROS>
 80012a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ae:	e004      	b.n	80012ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	613a      	str	r2, [r7, #16]
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012c4:	f006 fb02 	bl	80078cc <xTaskResumeAll>
  	return mem;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012da:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <prvHeapInit+0xac>)
 80012e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00c      	beq.n	8001308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3307      	adds	r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <prvHeapInit+0xac>)
 8001304:	4413      	add	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <prvHeapInit+0xb0>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <prvHeapInit+0xb0>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001320:	2208      	movs	r2, #8
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 0307 	bic.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <prvHeapInit+0xb4>)
 8001334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <prvHeapInit+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <prvHeapInit+0xb4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <prvHeapInit+0xb4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <prvHeapInit+0xb8>)
 8001362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <prvHeapInit+0xbc>)
 800136a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <prvHeapInit+0xc0>)
 800136e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000ae4 	.word	0x20000ae4
 8001384:	20008014 	.word	0x20008014
 8001388:	2000801c 	.word	0x2000801c
 800138c:	20008024 	.word	0x20008024
 8001390:	20008020 	.word	0x20008020
 8001394:	20008028 	.word	0x20008028

08001398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <prvInsertBlockIntoFreeList+0xac>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e002      	b.n	80013ac <prvInsertBlockIntoFreeList+0x14>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f7      	bhi.n	80013a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d108      	bne.n	80013da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	441a      	add	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d118      	bne.n	8001420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d00d      	beq.n	8001416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	441a      	add	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d002      	beq.n	8001436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20008014 	.word	0x20008014
 8001448:	2000801c 	.word	0x2000801c

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	203a      	movs	r0, #58	@ 0x3a
 8001474:	f002 f8b4 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001478:	203a      	movs	r0, #58	@ 0x3a
 800147a:	f002 f8cd 	bl	8003618 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2046      	movs	r0, #70	@ 0x46
 8001484:	f002 f8ac 	bl	80035e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f002 f8c5 	bl	8003618 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <cubemx_transport_open+0x28>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f003 fef8 	bl	80052a8 <HAL_UART_Receive_DMA>
    return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000802c 	.word	0x2000802c

080014c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f003 ff0a 	bl	80052f2 <HAL_UART_DMAStop>
    return true;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11c      	bne.n	8001544 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f003 fe58 	bl	80051c8 <HAL_UART_Transmit_DMA>
 8001518:	4603      	mov	r3, r0
 800151a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800151c:	e002      	b.n	8001524 <cubemx_transport_write+0x3c>
            osDelay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f005 f984 	bl	800682c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001524:	7cfb      	ldrb	r3, [r7, #19]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <cubemx_transport_write+0x4e>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d1f3      	bne.n	800151e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001536:	7cfb      	ldrb	r3, [r7, #19]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <cubemx_transport_write+0x58>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e002      	b.n	8001546 <cubemx_transport_write+0x5e>
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001544:	2300      	movs	r3, #0
    }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001564:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <cubemx_transport_read+0x9c>)
 800157c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800157e:	b662      	cpsie	i
}
 8001580:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001588:	2001      	movs	r0, #1
 800158a:	f005 f94f 	bl	800682c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <cubemx_transport_read+0xa0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <cubemx_transport_read+0x9c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <cubemx_transport_read+0x52>
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe3      	blt.n	800156a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015a6:	e011      	b.n	80015cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	440b      	add	r3, r1
 80015b2:	4910      	ldr	r1, [pc, #64]	@ (80015f4 <cubemx_transport_read+0xa4>)
 80015b4:	5c8a      	ldrb	r2, [r1, r2]
 80015b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <cubemx_transport_read+0x9c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d003      	beq.n	80015e0 <cubemx_transport_read+0x90>
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3e3      	bcc.n	80015a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80015e0:	69bb      	ldr	r3, [r7, #24]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20008830 	.word	0x20008830
 80015f0:	2000882c 	.word	0x2000882c
 80015f4:	2000802c 	.word	0x2000802c

080015f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <MX_FREERTOS_Init+0x18>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_FREERTOS_Init+0x1c>)
 8001602:	f005 f881 	bl	8006708 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <MX_FREERTOS_Init+0x20>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	0801ae98 	.word	0x0801ae98
 8001614:	0800161d 	.word	0x0800161d
 8001618:	2000883c 	.word	0x2000883c

0800161c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 8001622:	af04      	add	r7, sp, #16
 8001624:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001628:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800162c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rcl_ret_t rc;
	  rmw_uros_set_custom_transport(
 800162e:	4bcd      	ldr	r3, [pc, #820]	@ (8001964 <StartDefaultTask+0x348>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	4bcd      	ldr	r3, [pc, #820]	@ (8001968 <StartDefaultTask+0x34c>)
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4bcd      	ldr	r3, [pc, #820]	@ (800196c <StartDefaultTask+0x350>)
 8001638:	4acd      	ldr	r2, [pc, #820]	@ (8001970 <StartDefaultTask+0x354>)
 800163a:	49ce      	ldr	r1, [pc, #824]	@ (8001974 <StartDefaultTask+0x358>)
 800163c:	2001      	movs	r0, #1
 800163e:	f00a f9fb 	bl	800ba38 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001642:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001646:	4618      	mov	r0, r3
 8001648:	f00a f928 	bl	800b89c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800164c:	4bca      	ldr	r3, [pc, #808]	@ (8001978 <StartDefaultTask+0x35c>)
 800164e:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001652:	4bca      	ldr	r3, [pc, #808]	@ (800197c <StartDefaultTask+0x360>)
 8001654:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001658:	4bc9      	ldr	r3, [pc, #804]	@ (8001980 <StartDefaultTask+0x364>)
 800165a:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800165e:	4bc9      	ldr	r3, [pc, #804]	@ (8001984 <StartDefaultTask+0x368>)
 8001660:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001664:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001668:	4618      	mov	r0, r3
 800166a:	f00a f925 	bl	800b8b8 <rcutils_set_default_allocator>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800167a:	21ca      	movs	r1, #202	@ 0xca
 800167c:	48c2      	ldr	r0, [pc, #776]	@ (8001988 <StartDefaultTask+0x36c>)
 800167e:	f018 f923 	bl	80198c8 <iprintf>
	  sensor_msgs__msg__Temperature water_temperature;

	  // PARAM SERVER


	  allocator = rcl_get_default_allocator();
 8001682:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001686:	4618      	mov	r0, r3
 8001688:	f00a f934 	bl	800b8f4 <rcutils_get_default_allocator>
 800168c:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001690:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001694:	f507 7454 	add.w	r4, r7, #848	@ 0x350
 8001698:	461d      	mov	r5, r3
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016a2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80016a6:	f507 7059 	add.w	r0, r7, #868	@ 0x364
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	f009 ffcb 	bl	800b648 <rclc_support_init>
 80016b2:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016b6:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <StartDefaultTask+0xaa>
 80016be:	21ed      	movs	r1, #237	@ 0xed
 80016c0:	48b2      	ldr	r0, [pc, #712]	@ (800198c <StartDefaultTask+0x370>)
 80016c2:	f018 f901 	bl	80198c8 <iprintf>

	  // create node
	  rc = rclc_node_init_default(&node, "cubemx_node", "", &support);
 80016c6:	f507 7359 	add.w	r3, r7, #868	@ 0x364
 80016ca:	f507 7052 	add.w	r0, r7, #840	@ 0x348
 80016ce:	4ab0      	ldr	r2, [pc, #704]	@ (8001990 <StartDefaultTask+0x374>)
 80016d0:	49b0      	ldr	r1, [pc, #704]	@ (8001994 <StartDefaultTask+0x378>)
 80016d2:	f00a f803 	bl	800b6dc <rclc_node_init_default>
 80016d6:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016da:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <StartDefaultTask+0xce>
 80016e2:	21f1      	movs	r1, #241	@ 0xf1
 80016e4:	48a9      	ldr	r0, [pc, #676]	@ (800198c <StartDefaultTask+0x370>)
 80016e6:	f018 f8ef 	bl	80198c8 <iprintf>

	  executor = rclc_executor_get_zero_initialized_executor();
 80016ea:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80016ee:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f009 fc97 	bl	800b028 <rclc_executor_get_zero_initialized_executor>
 80016fa:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80016fe:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8001702:	4620      	mov	r0, r4
 8001704:	4619      	mov	r1, r3
 8001706:	2388      	movs	r3, #136	@ 0x88
 8001708:	461a      	mov	r2, r3
 800170a:	f018 fa14 	bl	8019b36 <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS_SRVS, &allocator);
 800170e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001712:	f507 7159 	add.w	r1, r7, #868	@ 0x364
 8001716:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800171a:	2206      	movs	r2, #6
 800171c:	f009 fc90 	bl	800b040 <rclc_executor_init>
 8001720:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001724:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <StartDefaultTask+0x118>
 800172c:	21f5      	movs	r1, #245	@ 0xf5
 800172e:	4897      	ldr	r0, [pc, #604]	@ (800198c <StartDefaultTask+0x370>)
 8001730:	f018 f8ca 	bl	80198c8 <iprintf>

	  // PUBLISHERS
	  rclc_publisher_init_default(
 8001734:	f008 fe86 	bl	800a444 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 8001738:	4602      	mov	r2, r0
 800173a:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 800173e:	f507 702f 	add.w	r0, r7, #700	@ 0x2bc
 8001742:	4b95      	ldr	r3, [pc, #596]	@ (8001998 <StartDefaultTask+0x37c>)
 8001744:	f00a f806 	bl	800b754 <rclc_publisher_init_default>

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 8001748:	f00a ffa4 	bl	800c694 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800174c:	4602      	mov	r2, r0
 800174e:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 8001752:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001756:	4b91      	ldr	r3, [pc, #580]	@ (800199c <StartDefaultTask+0x380>)
 8001758:	f00a f864 	bl	800b824 <rclc_subscription_init_default>
 800175c:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001760:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <StartDefaultTask+0x156>
 8001768:	f240 1107 	movw	r1, #263	@ 0x107
 800176c:	4887      	ldr	r0, [pc, #540]	@ (800198c <StartDefaultTask+0x370>)
 800176e:	f018 f8ab 	bl	80198c8 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 8001772:	f00a ff8f 	bl	800c694 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001776:	4684      	mov	ip, r0
 8001778:	4c89      	ldr	r4, [pc, #548]	@ (80019a0 <StartDefaultTask+0x384>)
 800177a:	f507 76a0 	add.w	r6, r7, #320	@ 0x140
 800177e:	466d      	mov	r5, sp
 8001780:	f104 0308 	add.w	r3, r4, #8
 8001784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001786:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800178a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800178e:	4631      	mov	r1, r6
 8001790:	4660      	mov	r0, ip
 8001792:	f008 fced 	bl	800a170 <micro_ros_utilities_create_message_memory>
 8001796:	4603      	mov	r3, r0
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

	  rc = rclc_executor_add_subscription(
 80017a2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80017a6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80017aa:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4b7c      	ldr	r3, [pc, #496]	@ (80019a4 <StartDefaultTask+0x388>)
 80017b4:	f009 fcb4 	bl	800b120 <rclc_executor_add_subscription>
 80017b8:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017bc:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <StartDefaultTask+0x1b2>
 80017c4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80017c8:	4870      	ldr	r0, [pc, #448]	@ (800198c <StartDefaultTask+0x370>)
 80017ca:	f018 f87d 	bl	80198c8 <iprintf>

	  // CMD Vel sub
	  rc = rclc_subscription_init_default(
 80017ce:	f008 fe01 	bl	800a3d4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 80017d2:	4602      	mov	r2, r0
 80017d4:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 80017d8:	f507 702a 	add.w	r0, r7, #680	@ 0x2a8
 80017dc:	4b72      	ldr	r3, [pc, #456]	@ (80019a8 <StartDefaultTask+0x38c>)
 80017de:	f00a f821 	bl	800b824 <rclc_subscription_init_default>
 80017e2:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &cmd_vel_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity),
			  "/nereo_cmd_vel");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017e6:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d004      	beq.n	80017f8 <StartDefaultTask+0x1dc>
 80017ee:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80017f2:	4866      	ldr	r0, [pc, #408]	@ (800198c <StartDefaultTask+0x370>)
 80017f4:	f018 f868 	bl	80198c8 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, CommandVelocity), &cmd_vel_msg, default_conf);
 80017f8:	f008 fdec 	bl	800a3d4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>
 80017fc:	4684      	mov	ip, r0
 80017fe:	4c68      	ldr	r4, [pc, #416]	@ (80019a0 <StartDefaultTask+0x384>)
 8001800:	f507 7621 	add.w	r6, r7, #644	@ 0x284
 8001804:	466d      	mov	r5, sp
 8001806:	f104 0308 	add.w	r3, r4, #8
 800180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001810:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001814:	4631      	mov	r1, r6
 8001816:	4660      	mov	r0, ip
 8001818:	f008 fcaa 	bl	800a170 <micro_ros_utilities_create_message_memory>
 800181c:	4603      	mov	r3, r0
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

	  rc = rclc_executor_add_subscription(
 8001828:	f507 7221 	add.w	r2, r7, #644	@ 0x284
 800182c:	f507 712a 	add.w	r1, r7, #680	@ 0x2a8
 8001830:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 8001834:	2300      	movs	r3, #0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4b5c      	ldr	r3, [pc, #368]	@ (80019ac <StartDefaultTask+0x390>)
 800183a:	f009 fc71 	bl	800b120 <rclc_executor_add_subscription>
 800183e:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &cmd_vel_subscriber,
			  &cmd_vel_msg, &cmd_vel_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001842:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <StartDefaultTask+0x238>
 800184a:	f240 111d 	movw	r1, #285	@ 0x11d
 800184e:	484f      	ldr	r0, [pc, #316]	@ (800198c <StartDefaultTask+0x370>)
 8001850:	f018 f83a 	bl	80198c8 <iprintf>

	  // SERVICES
	  rcl_service_t arm_disarm_srv_server;
	  std_srvs__srv__SetBool_Request set_arm_mode_reqin;
	  std_srvs__srv__SetBool_Response set_arm_mode_resout;
	  rc = rclc_service_init_default(
 8001854:	f00b f944 	bl	800cae0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>
 8001858:	4602      	mov	r2, r0
 800185a:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 800185e:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 8001862:	4b53      	ldr	r3, [pc, #332]	@ (80019b0 <StartDefaultTask+0x394>)
 8001864:	f009 ffaa 	bl	800b7bc <rclc_service_init_default>
 8001868:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &arm_disarm_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool), "/set_rov_arm_mode");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800186c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <StartDefaultTask+0x262>
 8001874:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001878:	4844      	ldr	r0, [pc, #272]	@ (800198c <StartDefaultTask+0x370>)
 800187a:	f018 f825 	bl	80198c8 <iprintf>
	  rc = rclc_executor_add_service(
 800187e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001882:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 8001886:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800188a:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800188e:	4c49      	ldr	r4, [pc, #292]	@ (80019b4 <StartDefaultTask+0x398>)
 8001890:	9400      	str	r4, [sp, #0]
 8001892:	f009 fc79 	bl	800b188 <rclc_executor_add_service>
 8001896:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &arm_disarm_srv_server, &set_arm_mode_reqin,
			  &set_arm_mode_resout, &arm_disarm_service_callback);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800189a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <StartDefaultTask+0x290>
 80018a2:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 80018a6:	4839      	ldr	r0, [pc, #228]	@ (800198c <StartDefaultTask+0x370>)
 80018a8:	f018 f80e 	bl	80198c8 <iprintf>

	  rcl_service_t nav_mode_srv_server;
	  nereo_interfaces__srv__SetNavigationMode_Request set_navigation_mode_reqin;
	  nereo_interfaces__srv__SetNavigationMode_Response set_navigation_mode_resout;
	  rc = rclc_service_init_default(
 80018ac:	f008 fdaa 	bl	800a404 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 80018b6:	f107 00d4 	add.w	r0, r7, #212	@ 0xd4
 80018ba:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <StartDefaultTask+0x39c>)
 80018bc:	f009 ff7e 	bl	800b7bc <rclc_service_init_default>
 80018c0:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &nav_mode_srv_server, &node,
			  ROSIDL_GET_SRV_TYPE_SUPPORT(nereo_interfaces, srv, SetNavigationMode), "/set_rov_navigation_mode");
	  rc = rclc_executor_add_service(
 80018c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018c8:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80018cc:	f107 01d4 	add.w	r1, r7, #212	@ 0xd4
 80018d0:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 80018d4:	4c39      	ldr	r4, [pc, #228]	@ (80019bc <StartDefaultTask+0x3a0>)
 80018d6:	9400      	str	r4, [sp, #0]
 80018d8:	f009 fc56 	bl	800b188 <rclc_executor_add_service>
 80018dc:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &nav_mode_srv_server, &set_navigation_mode_reqin,
			  &set_navigation_mode_resout, &set_nav_mode_service_callback);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80018e0:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <StartDefaultTask+0x2d6>
 80018e8:	f240 1135 	movw	r1, #309	@ 0x135
 80018ec:	4827      	ldr	r0, [pc, #156]	@ (800198c <StartDefaultTask+0x370>)
 80018ee:	f017 ffeb 	bl	80198c8 <iprintf>

	  uint32_t pwm_output[8] = {1500};
 80018f2:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80018f6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80018fa:	4618      	mov	r0, r3
 80018fc:	2320      	movs	r3, #32
 80018fe:	461a      	mov	r2, r3
 8001900:	2100      	movs	r1, #0
 8001902:	f018 f8b0 	bl	8019a66 <memset>
 8001906:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800190a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 800190e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001912:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 800191a:	f001 fd9d 	bl	8003458 <HAL_GetTick>
 800191e:	f8c7 03b0 	str.w	r0, [r7, #944]	@ 0x3b0
		//printf("Free heap: %d.\n", xPortGetFreeHeapSize());
		// Spin executor once to receive requests and update messages
		rclc_executor_spin_some(&executor, 1000000);
 8001922:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 8001926:	4a26      	ldr	r2, [pc, #152]	@ (80019c0 <StartDefaultTask+0x3a4>)
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	4608      	mov	r0, r1
 800192e:	f009 fe51 	bl	800b5d4 <rclc_executor_spin_some>

	    if (rov_arm_mode == ROV_ARMED)
 8001932:	4b24      	ldr	r3, [pc, #144]	@ (80019c4 <StartDefaultTask+0x3a8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b01      	cmp	r3, #1
 800193a:	d17e      	bne.n	8001a3a <StartDefaultTask+0x41e>
	    {
	    	switch (navigation_mode) {
 800193c:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <StartDefaultTask+0x3ac>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <StartDefaultTask+0x330>
 8001946:	2b01      	cmp	r3, #1
 8001948:	d040      	beq.n	80019cc <StartDefaultTask+0x3b0>
 800194a:	e052      	b.n	80019f2 <StartDefaultTask+0x3d6>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(cmd_vel_msg.cmd_vel, pwm_output);
 800194c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8001950:	f507 7321 	add.w	r3, r7, #644	@ 0x284
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 ff74 	bl	8002844 <calculate_pwm>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	    			break;
 8001962:	e05e      	b.n	8001a22 <StartDefaultTask+0x406>
 8001964:	08001551 	.word	0x08001551
 8001968:	080014e9 	.word	0x080014e9
 800196c:	080014c9 	.word	0x080014c9
 8001970:	0800149d 	.word	0x0800149d
 8001974:	200088b0 	.word	0x200088b0
 8001978:	08002035 	.word	0x08002035
 800197c:	08002079 	.word	0x08002079
 8001980:	080020b1 	.word	0x080020b1
 8001984:	0800211d 	.word	0x0800211d
 8001988:	0801ad0c 	.word	0x0801ad0c
 800198c:	0801ad34 	.word	0x0801ad34
 8001990:	0801ad48 	.word	0x0801ad48
 8001994:	0801ad4c 	.word	0x0801ad4c
 8001998:	0801ad58 	.word	0x0801ad58
 800199c:	0801ad6c 	.word	0x0801ad6c
 80019a0:	20008840 	.word	0x20008840
 80019a4:	08001bfb 	.word	0x08001bfb
 80019a8:	0801ad78 	.word	0x0801ad78
 80019ac:	08001c13 	.word	0x08001c13
 80019b0:	0801ad88 	.word	0x0801ad88
 80019b4:	08001c29 	.word	0x08001c29
 80019b8:	0801ad9c 	.word	0x0801ad9c
 80019bc:	08001c79 	.word	0x08001c79
 80019c0:	000f4240 	.word	0x000f4240
 80019c4:	20008834 	.word	0x20008834
 80019c8:	20008835 	.word	0x20008835
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(cmd_vel_msg.cmd_vel, pwm_output,
 80019cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80019d0:	f103 0418 	add.w	r4, r3, #24
 80019d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019d8:	f103 0218 	add.w	r2, r3, #24
 80019dc:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80019e0:	f507 7021 	add.w	r0, r7, #644	@ 0x284
 80019e4:	4623      	mov	r3, r4
 80019e6:	f001 fa73 	bl	8002ed0 <calculate_pwm_with_pid>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 80019f0:	e017      	b.n	8001a22 <StartDefaultTask+0x406>
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
 80019f8:	e00e      	b.n	8001a18 <StartDefaultTask+0x3fc>
 80019fa:	f897 23bf 	ldrb.w	r2, [r7, #959]	@ 0x3bf
 80019fe:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001a02:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001a06:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001a0e:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 8001a12:	3301      	adds	r3, #1
 8001a14:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
 8001a18:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 8001a1c:	2b07      	cmp	r3, #7
 8001a1e:	d9ec      	bls.n	80019fa <StartDefaultTask+0x3de>
	    			break;
 8001a20:	bf00      	nop
	    	}
	    	constrain_pwm_output(pwm_output, 8);
 8001a22:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a26:	2108      	movs	r1, #8
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f8af 	bl	8001b8c <constrain_pwm_output>
	    	set_pwms(pwm_output);
 8001a2e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f84c 	bl	8001ad0 <set_pwms>
 8001a38:	e001      	b.n	8001a3e <StartDefaultTask+0x422>
	    } else set_pwm_idle();
 8001a3a:	f000 f879 	bl	8001b30 <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thruster_pwms[i] = pwm_output[i];
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
 8001a44:	e015      	b.n	8001a72 <StartDefaultTask+0x456>
 8001a46:	f897 23be 	ldrb.w	r2, [r7, #958]	@ 0x3be
 8001a4a:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001a4e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8001a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a56:	f897 23be 	ldrb.w	r2, [r7, #958]	@ 0x3be
 8001a5a:	b299      	uxth	r1, r3
 8001a5c:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001a60:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a68:	f897 33be 	ldrb.w	r3, [r7, #958]	@ 0x3be
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
 8001a72:	f897 33be 	ldrb.w	r3, [r7, #958]	@ 0x3be
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	d9e5      	bls.n	8001a46 <StartDefaultTask+0x42a>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001a7a:	f507 712b 	add.w	r1, r7, #684	@ 0x2ac
 8001a7e:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8001a82:	2200      	movs	r2, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f008 ff41 	bl	800a90c <rcl_publish>
 8001a8a:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001a8e:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <StartDefaultTask+0x484>
 8001a96:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8001a9a:	480c      	ldr	r0, [pc, #48]	@ (8001acc <StartDefaultTask+0x4b0>)
 8001a9c:	f017 ff14 	bl	80198c8 <iprintf>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001aa0:	f001 fcda 	bl	8003458 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001ab0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001ab4:	2b09      	cmp	r3, #9
 8001ab6:	f63f af30 	bhi.w	800191a <StartDefaultTask+0x2fe>
 8001aba:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001abe:	f1c3 030a 	rsb	r3, r3, #10
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 feb2 	bl	800682c <osDelay>
	  {
 8001ac8:	e727      	b.n	800191a <StartDefaultTask+0x2fe>
 8001aca:	bf00      	nop
 8001acc:	0801adb8 	.word	0x0801adb8

08001ad0 <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	TIM2 -> CCR1 = pwms[0];
 8001ad8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2 -> CCR2 = pwms[1];
 8001ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR3 = pwms[2];
 8001aec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM2 -> CCR4 = pwms[3];
 8001af6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	6413      	str	r3, [r2, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = pwms[4];
 8001b00:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <set_pwms+0x5c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3 -> CCR2 = pwms[5];
 8001b08:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <set_pwms+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3 -> CCR3 = pwms[6];
 8001b10:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <set_pwms+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[7];
 8001b18:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <set_pwms+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40000400 	.word	0x40000400

08001b30 <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE;
 8001b34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b38:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b3c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE;
 8001b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b42:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b46:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE;
 8001b48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b4c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b50:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE;
 8001b52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b56:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b5a:	641a      	str	r2, [r3, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = PWM_IDLE;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <set_pwm_idle+0x58>)
 8001b5e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE;
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <set_pwm_idle+0x58>)
 8001b66:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b6a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <set_pwm_idle+0x58>)
 8001b6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE;
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <set_pwm_idle+0x58>)
 8001b76:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40000400 	.word	0x40000400

08001b8c <constrain_pwm_output>:
void constrain_pwm_output(uint32_t pwms[], int N) {
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	81fb      	strh	r3, [r7, #14]
 8001b9a:	e023      	b.n	8001be4 <constrain_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d807      	bhi.n	8001bbe <constrain_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001bae:	89fb      	ldrh	r3, [r7, #14]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e00f      	b.n	8001bde <constrain_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d906      	bls.n	8001bde <constrain_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001bdc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	3301      	adds	r3, #1
 8001be2:	81fb      	strh	r3, [r7, #14]
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dcd7      	bgt.n	8001b9c <constrain_pwm_output+0x10>
	}
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <imu_subscription_callback>:
void imu_subscription_callback(const void * msgin) {
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	const sensor_msgs__msg__Imu * msg = (const sensor_msgs__msg__Imu *)msgin;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <cmd_vel_subscription_callback>:
void cmd_vel_subscription_callback (const void * msgin) {
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]

}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <arm_disarm_service_callback>:
void arm_disarm_service_callback(const void * request_msg, void * response_msg) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	printf("Inside arm-disarm.\n");
 8001c32:	480e      	ldr	r0, [pc, #56]	@ (8001c6c <arm_disarm_service_callback+0x44>)
 8001c34:	f017 feb0 	bl	8019998 <puts>
	std_srvs__srv__SetBool_Request * req_in = (std_srvs__srv__SetBool_Request *) request_msg;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	60fb      	str	r3, [r7, #12]
	std_srvs__srv__SetBool_Response * res_in = (std_srvs__srv__SetBool_Response *) response_msg;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	60bb      	str	r3, [r7, #8]

	// Handle request message and set the response message values
	rov_arm_mode = req_in->data ? ROV_ARMED : ROV_DISARMED;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <arm_disarm_service_callback+0x48>)
 8001c48:	701a      	strb	r2, [r3, #0]
	res_in->success = true;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
	res_in->message.capacity = 2;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2202      	movs	r2, #2
 8001c54:	60da      	str	r2, [r3, #12]
	res_in->message.size = strlen(empty_string);
 8001c56:	2200      	movs	r2, #0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	609a      	str	r2, [r3, #8]
	res_in->message.data = empty_string;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <arm_disarm_service_callback+0x4c>)
 8001c60:	605a      	str	r2, [r3, #4]
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	0801add4 	.word	0x0801add4
 8001c70:	20008834 	.word	0x20008834
 8001c74:	20008838 	.word	0x20008838

08001c78 <set_nav_mode_service_callback>:
void set_nav_mode_service_callback(const void * request_msg, void * response_msg) {
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
	nereo_interfaces__srv__SetNavigationMode_Request * req_in = (nereo_interfaces__srv__SetNavigationMode_Request *) request_msg;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
	nereo_interfaces__srv__SetNavigationMode_Response * res_in = (nereo_interfaces__srv__SetNavigationMode_Response *) response_msg;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	60bb      	str	r3, [r7, #8]

	navigation_mode = req_in->navigation_mode;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <set_nav_mode_service_callback+0x38>)
 8001c90:	701a      	strb	r2, [r3, #0]

	res_in->mode_after_set = navigation_mode;
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <set_nav_mode_service_callback+0x38>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	705a      	strb	r2, [r3, #1]
	res_in->success = true;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20008835 	.word	0x20008835

08001cb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b26      	ldr	r3, [pc, #152]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a1e      	ldr	r2, [pc, #120]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <MX_GPIO_Init+0xb4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	480b      	ldr	r0, [pc, #44]	@ (8001d6c <MX_GPIO_Init+0xb8>)
 8001d40:	f002 fa26 	bl	8004190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d44:	2304      	movs	r3, #4
 8001d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <MX_GPIO_Init+0xb8>)
 8001d5c:	f002 f86c 	bl	8003e38 <HAL_GPIO_Init>

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40021000 	.word	0x40021000

08001d70 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d7a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d7e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d82:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d86:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001d8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d96:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001da6:	edd7 6a05 	vldr	s13, [r7, #20]
 8001daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dba:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	76fb      	strb	r3, [r7, #27]
 8001de4:	e017      	b.n	8001e16 <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001de6:	7efb      	ldrb	r3, [r7, #27]
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	edd3 7a00 	vldr	s15, [r3]
 8001df2:	eef0 7ae7 	vabs.f32	s15, s15
 8001df6:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001dfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	dd01      	ble.n	8001e10 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001e10:	7efb      	ldrb	r3, [r7, #27]
 8001e12:	3301      	adds	r3, #1
 8001e14:	76fb      	strb	r3, [r7, #27]
 8001e16:	7efa      	ldrb	r2, [r7, #27]
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3e3      	bcc.n	8001de6 <normalize_vector+0x1a>
        }
    }

	if (max_abs_value > 1)
 8001e1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	dc00      	bgt.n	8001e32 <normalize_vector+0x66>
		for (uint8_t i = 0; i < size; i++)
		{
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001e30:	e019      	b.n	8001e66 <normalize_vector+0x9a>
		for (uint8_t i = 0; i < size; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	76bb      	strb	r3, [r7, #26]
 8001e36:	e012      	b.n	8001e5e <normalize_vector+0x92>
			output_array[i] = input_array[i] / max_abs_value;
 8001e38:	7ebb      	ldrb	r3, [r7, #26]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	edd3 6a00 	vldr	s13, [r3]
 8001e44:	7ebb      	ldrb	r3, [r7, #26]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e54:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++)
 8001e58:	7ebb      	ldrb	r3, [r7, #26]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	76bb      	strb	r3, [r7, #26]
 8001e5e:	7eba      	ldrb	r2, [r7, #26]
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d3e8      	bcc.n	8001e38 <normalize_vector+0x6c>
}
 8001e66:	bf00      	nop
 8001e68:	3724      	adds	r7, #36	@ 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e7a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e7e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d013      	beq.n	8001eb2 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001e8a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e8e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001e92:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00b      	beq.n	8001eb2 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001e9a:	e000      	b.n	8001e9e <ITM_SendChar+0x2c>
    {
      __NOP();
 8001e9c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001e9e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f9      	beq.n	8001e9c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ea8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001eb2:	687b      	ldr	r3, [r7, #4]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec4:	f001 fa92 	bl	80033ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec8:	f000 f80e 	bl	8001ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ecc:	f7ff fef2 	bl	8001cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ed0:	f7ff fabc 	bl	800144c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ed4:	f000 fbd4 	bl	8002680 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ed8:	f004 fbcc 	bl	8006674 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001edc:	f7ff fb8c 	bl	80015f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ee0:	f004 fbec 	bl	80066bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <main+0x24>

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b094      	sub	sp, #80	@ 0x50
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	2234      	movs	r2, #52	@ 0x34
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f017 fdb5 	bl	8019a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <SystemClock_Config+0xdc>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4a2b      	ldr	r2, [pc, #172]	@ (8001fc4 <SystemClock_Config+0xdc>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1c:	4b29      	ldr	r3, [pc, #164]	@ (8001fc4 <SystemClock_Config+0xdc>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <SystemClock_Config+0xe0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a25      	ldr	r2, [pc, #148]	@ (8001fc8 <SystemClock_Config+0xe0>)
 8001f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <SystemClock_Config+0xe0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001f5c:	23c3      	movs	r3, #195	@ 0xc3
 8001f5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f60:	2302      	movs	r3, #2
 8001f62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f64:	2304      	movs	r3, #4
 8001f66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fbb3 	bl	80046dc <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f7c:	f000 f854 	bl	8002028 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f80:	f002 f920 	bl	80041c4 <HAL_PWREx_EnableOverDrive>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001f8a:	f000 f84d 	bl	8002028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8e:	230f      	movs	r3, #15
 8001f90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f92:	2302      	movs	r3, #2
 8001f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f9a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	2105      	movs	r1, #5
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 f959 	bl	8004264 <HAL_RCC_ClockConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001fb8:	f000 f836 	bl	8002028 <Error_Handler>
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3750      	adds	r7, #80	@ 0x50
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000

08001fcc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e009      	b.n	8001ff2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff43 	bl	8001e72 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	dbf1      	blt.n	8001fde <_write+0x12>
  }
  return len;
 8001ffa:	687b      	ldr	r3, [r7, #4]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	@ (8002024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002016:	f001 fa0b 	bl	8003430 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000

08002028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800202c:	b672      	cpsid	i
}
 800202e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <Error_Handler+0x8>

08002034 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <microros_allocate+0x3c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <microros_allocate+0x3c>)
 800204c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <microros_allocate+0x40>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <microros_allocate+0x40>)
 800205c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe ffa4 	bl	8000fac <pvPortMallocMicroROS>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20008858 	.word	0x20008858
 8002074:	2000885c 	.word	0x2000885c

08002078 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff f8b3 	bl	80011f4 <getBlockSize>
 800208e:	4603      	mov	r3, r0
 8002090:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <microros_deallocate+0x34>)
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	461a      	mov	r2, r3
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <microros_deallocate+0x34>)
 800209a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff f84d 	bl	800113c <vPortFreeMicroROS>
  }
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000885c 	.word	0x2000885c

080020b0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <microros_reallocate+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4413      	add	r3, r2
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <microros_reallocate+0x64>)
 80020ca:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <microros_reallocate+0x68>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4413      	add	r3, r2
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <microros_reallocate+0x68>)
 80020da:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80020e2:	68b8      	ldr	r0, [r7, #8]
 80020e4:	f7fe ff62 	bl	8000fac <pvPortMallocMicroROS>
 80020e8:	4603      	mov	r3, r0
 80020ea:	e00e      	b.n	800210a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7ff f881 	bl	80011f4 <getBlockSize>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4a08      	ldr	r2, [pc, #32]	@ (8002118 <microros_reallocate+0x68>)
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <microros_reallocate+0x68>)
 80020fe:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7ff f894 	bl	8001230 <pvPortReallocMicroROS>
 8002108:	4603      	mov	r3, r0
  }
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20008858 	.word	0x20008858
 8002118:	2000885c 	.word	0x2000885c

0800211c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	4a0c      	ldr	r2, [pc, #48]	@ (8002164 <microros_zero_allocate+0x48>)
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4413      	add	r3, r2
 8002136:	461a      	mov	r2, r3
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <microros_zero_allocate+0x48>)
 800213a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	4a08      	ldr	r2, [pc, #32]	@ (8002168 <microros_zero_allocate+0x4c>)
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	4413      	add	r3, r2
 800214a:	461a      	mov	r2, r3
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <microros_zero_allocate+0x4c>)
 800214e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff f899 	bl	800128a <pvPortCallocMicroROS>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20008858 	.word	0x20008858
 8002168:	2000885c 	.word	0x2000885c
 800216c:	00000000 	.word	0x00000000

08002170 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002186:	a320      	add	r3, pc, #128	@ (adr r3, 8002208 <UTILS_NanosecondsToTimespec+0x98>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fd46 	bl	8000c1c <__aeabi_ldivmod>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800219a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002208 <UTILS_NanosecondsToTimespec+0x98>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe fd3a 	bl	8000c1c <__aeabi_ldivmod>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da20      	bge.n	80021f6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <UTILS_NanosecondsToTimespec+0x90>)
 80021ba:	fb82 1203 	smull	r1, r2, r2, r3
 80021be:	1712      	asrs	r2, r2, #28
 80021c0:	17db      	asrs	r3, r3, #31
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	6979      	ldr	r1, [r7, #20]
 80021d0:	17c8      	asrs	r0, r1, #31
 80021d2:	460c      	mov	r4, r1
 80021d4:	4605      	mov	r5, r0
 80021d6:	ebb2 0804 	subs.w	r8, r2, r4
 80021da:	eb63 0905 	sbc.w	r9, r3, r5
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4906      	ldr	r1, [pc, #24]	@ (8002204 <UTILS_NanosecondsToTimespec+0x94>)
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	441a      	add	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
    }
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002200:	44b82fa1 	.word	0x44b82fa1
 8002204:	3b9aca00 	.word	0x3b9aca00
 8002208:	3b9aca00 	.word	0x3b9aca00
 800220c:	00000000 	.word	0x00000000

08002210 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002214:	b08e      	sub	sp, #56	@ 0x38
 8002216:	af00      	add	r7, sp, #0
 8002218:	6278      	str	r0, [r7, #36]	@ 0x24
 800221a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800221c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002220:	2300      	movs	r3, #0
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002236:	4618      	mov	r0, r3
 8002238:	f005 fdc4 	bl	8007dc4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223e:	17da      	asrs	r2, r3, #31
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	61fa      	str	r2, [r7, #28]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	000b      	movs	r3, r1
 8002250:	2200      	movs	r2, #0
 8002252:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002258:	2200      	movs	r2, #0
 800225a:	461c      	mov	r4, r3
 800225c:	4615      	mov	r5, r2
 800225e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002262:	1911      	adds	r1, r2, r4
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	416b      	adcs	r3, r5
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800226e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002272:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	f04f 0400 	mov.w	r4, #0
 800227e:	f04f 0500 	mov.w	r5, #0
 8002282:	015d      	lsls	r5, r3, #5
 8002284:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002288:	0154      	lsls	r4, r2, #5
 800228a:	4622      	mov	r2, r4
 800228c:	462b      	mov	r3, r5
 800228e:	ebb2 0800 	subs.w	r8, r2, r0
 8002292:	eb63 0901 	sbc.w	r9, r3, r1
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80022a2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80022a6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80022aa:	4690      	mov	r8, r2
 80022ac:	4699      	mov	r9, r3
 80022ae:	eb18 0a00 	adds.w	sl, r8, r0
 80022b2:	eb49 0b01 	adc.w	fp, r9, r1
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022c2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022c6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ca:	ebb2 040a 	subs.w	r4, r2, sl
 80022ce:	603c      	str	r4, [r7, #0]
 80022d0:	eb63 030b 	sbc.w	r3, r3, fp
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022da:	4623      	mov	r3, r4
 80022dc:	181b      	adds	r3, r3, r0
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	462b      	mov	r3, r5
 80022e2:	eb41 0303 	adc.w	r3, r1, r3
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ee:	f7ff ff3f 	bl	8002170 <UTILS_NanosecondsToTimespec>

    return 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	3738      	adds	r7, #56	@ 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_MspInit+0x54>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <HAL_MspInit+0x54>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_MspInit+0x54>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_MspInit+0x54>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <HAL_MspInit+0x54>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_MspInit+0x54>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	210f      	movs	r1, #15
 8002342:	f06f 0001 	mvn.w	r0, #1
 8002346:	f001 f94b 	bl	80035e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	@ 0x30
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <HAL_InitTick+0xd4>)
 800236e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002370:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <HAL_InitTick+0xd4>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6453      	str	r3, [r2, #68]	@ 0x44
 8002378:	4b2c      	ldr	r3, [pc, #176]	@ (800242c <HAL_InitTick+0xd4>)
 800237a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	f107 0310 	add.w	r3, r7, #16
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f002 f972 	bl	8004678 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002394:	f002 f95c 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 8002398:	4603      	mov	r3, r0
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	4a23      	ldr	r2, [pc, #140]	@ (8002430 <HAL_InitTick+0xd8>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	3b01      	subs	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80023ac:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_InitTick+0xdc>)
 80023ae:	4a22      	ldr	r2, [pc, #136]	@ (8002438 <HAL_InitTick+0xe0>)
 80023b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023b2:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <HAL_InitTick+0xdc>)
 80023b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80023ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002434 <HAL_InitTick+0xdc>)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <HAL_InitTick+0xdc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_InitTick+0xdc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023cc:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <HAL_InitTick+0xdc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80023d2:	4818      	ldr	r0, [pc, #96]	@ (8002434 <HAL_InitTick+0xdc>)
 80023d4:	f002 fc06 	bl	8004be4 <HAL_TIM_Base_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80023de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11b      	bne.n	800241e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023e6:	4813      	ldr	r0, [pc, #76]	@ (8002434 <HAL_InitTick+0xdc>)
 80023e8:	f002 fc56 	bl	8004c98 <HAL_TIM_Base_Start_IT>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80023f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d111      	bne.n	800241e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023fa:	2019      	movs	r0, #25
 80023fc:	f001 f90c 	bl	8003618 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	d808      	bhi.n	8002418 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002406:	2200      	movs	r2, #0
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	2019      	movs	r0, #25
 800240c:	f001 f8e8 	bl	80035e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_InitTick+0xe4>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e002      	b.n	800241e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800241e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002422:	4618      	mov	r0, r3
 8002424:	3730      	adds	r7, #48	@ 0x30
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	431bde83 	.word	0x431bde83
 8002434:	20008860 	.word	0x20008860
 8002438:	40010000 	.word	0x40010000
 800243c:	200000c8 	.word	0x200000c8

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HardFault detected\n");
 800244e:	480c      	ldr	r0, [pc, #48]	@ (8002480 <HardFault_Handler+0x38>)
 8002450:	f017 faa2 	bl	8019998 <puts>
  uint32_t bus_fault_address = SCB->BFAR;    // Bus fault address register
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HardFault_Handler+0x3c>)
 8002456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002458:	607b      	str	r3, [r7, #4]
  uint32_t cfsr = SCB->CFSR;                // Configurable Fault Status Register
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HardFault_Handler+0x3c>)
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	603b      	str	r3, [r7, #0]

  if (cfsr & (1 << 1)) {                    // If BFARVALID is set
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HardFault_Handler+0x2c>
	printf("Imprecise bus fault at address: 0x%08lx\n", bus_fault_address);
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4806      	ldr	r0, [pc, #24]	@ (8002488 <HardFault_Handler+0x40>)
 800246e:	f017 fa2b 	bl	80198c8 <iprintf>
 8002472:	e003      	b.n	800247c <HardFault_Handler+0x34>
  } else {
	printf("Imprecise bus fault occurred, but address is not valid\n");
 8002474:	4805      	ldr	r0, [pc, #20]	@ (800248c <HardFault_Handler+0x44>)
 8002476:	f017 fa8f 	bl	8019998 <puts>
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <HardFault_Handler+0x34>
 8002480:	0801ade8 	.word	0x0801ade8
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	0801adfc 	.word	0x0801adfc
 800248c:	0801ae28 	.word	0x0801ae28

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <MemManage_Handler+0x4>

08002498 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <BusFault_Handler+0x4>

080024a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <UsageFault_Handler+0x4>

080024a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024be:	f002 fc5b 	bl	8004d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20008860 	.word	0x20008860

080024cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <USART1_IRQHandler+0x10>)
 80024d2:	f002 ff8d 	bl	80053f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200088b0 	.word	0x200088b0

080024e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <DMA2_Stream2_IRQHandler+0x10>)
 80024e6:	f001 fa3d 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200088f8 	.word	0x200088f8

080024f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <DMA2_Stream7_IRQHandler+0x10>)
 80024fa:	f001 fa33 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20008958 	.word	0x20008958

08002508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_kill>:

int _kill(int pid, int sig)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002522:	f017 fadb 	bl	8019adc <__errno>
 8002526:	4603      	mov	r3, r0
 8002528:	2216      	movs	r2, #22
 800252a:	601a      	str	r2, [r3, #0]
  return -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_exit>:

void _exit (int status)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002540:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ffe7 	bl	8002518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <_exit+0x12>

0800254e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e00a      	b.n	8002576 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002560:	f3af 8000 	nop.w
 8002564:	4601      	mov	r1, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	60ba      	str	r2, [r7, #8]
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbf0      	blt.n	8002560 <_read+0x12>
  }

  return len;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025b0:	605a      	str	r2, [r3, #4]
  return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_isatty>:

int _isatty(int file)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	@ (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002620:	f017 fa5c 	bl	8019adc <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20050000 	.word	0x20050000
 8002650:	00000400 	.word	0x00000400
 8002654:	200088ac 	.word	0x200088ac
 8002658:	20015b50 	.word	0x20015b50

0800265c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <SystemInit+0x20>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <SystemInit+0x20>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 8002686:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <MX_USART1_UART_Init+0x50>)
 8002688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026b6:	4805      	ldr	r0, [pc, #20]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026b8:	f002 fd36 	bl	8005128 <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026c2:	f7ff fcb1 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200088b0 	.word	0x200088b0
 80026d0:	40011000 	.word	0x40011000

080026d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002828 <HAL_UART_MspInit+0x154>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	f040 8094 	bne.w	8002820 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	4b4b      	ldr	r3, [pc, #300]	@ (800282c <HAL_UART_MspInit+0x158>)
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	4a4a      	ldr	r2, [pc, #296]	@ (800282c <HAL_UART_MspInit+0x158>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	6453      	str	r3, [r2, #68]	@ 0x44
 8002708:	4b48      	ldr	r3, [pc, #288]	@ (800282c <HAL_UART_MspInit+0x158>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	4b44      	ldr	r3, [pc, #272]	@ (800282c <HAL_UART_MspInit+0x158>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271c:	4a43      	ldr	r2, [pc, #268]	@ (800282c <HAL_UART_MspInit+0x158>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6313      	str	r3, [r2, #48]	@ 0x30
 8002724:	4b41      	ldr	r3, [pc, #260]	@ (800282c <HAL_UART_MspInit+0x158>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002730:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273e:	2303      	movs	r3, #3
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002742:	2307      	movs	r3, #7
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4838      	ldr	r0, [pc, #224]	@ (8002830 <HAL_UART_MspInit+0x15c>)
 800274e:	f001 fb73 	bl	8003e38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002752:	4b38      	ldr	r3, [pc, #224]	@ (8002834 <HAL_UART_MspInit+0x160>)
 8002754:	4a38      	ldr	r2, [pc, #224]	@ (8002838 <HAL_UART_MspInit+0x164>)
 8002756:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002758:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <HAL_UART_MspInit+0x160>)
 800275a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800275e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002760:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <HAL_UART_MspInit+0x160>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002766:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <HAL_UART_MspInit+0x160>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800276c:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <HAL_UART_MspInit+0x160>)
 800276e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002772:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002774:	4b2f      	ldr	r3, [pc, #188]	@ (8002834 <HAL_UART_MspInit+0x160>)
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800277a:	4b2e      	ldr	r3, [pc, #184]	@ (8002834 <HAL_UART_MspInit+0x160>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002780:	4b2c      	ldr	r3, [pc, #176]	@ (8002834 <HAL_UART_MspInit+0x160>)
 8002782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002786:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002788:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <HAL_UART_MspInit+0x160>)
 800278a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800278e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002790:	4b28      	ldr	r3, [pc, #160]	@ (8002834 <HAL_UART_MspInit+0x160>)
 8002792:	2200      	movs	r2, #0
 8002794:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002796:	4827      	ldr	r0, [pc, #156]	@ (8002834 <HAL_UART_MspInit+0x160>)
 8002798:	f000 ff4c 	bl	8003634 <HAL_DMA_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80027a2:	f7ff fc41 	bl	8002028 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a22      	ldr	r2, [pc, #136]	@ (8002834 <HAL_UART_MspInit+0x160>)
 80027aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027ac:	4a21      	ldr	r2, [pc, #132]	@ (8002834 <HAL_UART_MspInit+0x160>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027b4:	4a22      	ldr	r2, [pc, #136]	@ (8002840 <HAL_UART_MspInit+0x16c>)
 80027b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80027b8:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027da:	4b18      	ldr	r3, [pc, #96]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027e0:	4b16      	ldr	r3, [pc, #88]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80027ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027f4:	4811      	ldr	r0, [pc, #68]	@ (800283c <HAL_UART_MspInit+0x168>)
 80027f6:	f000 ff1d 	bl	8003634 <HAL_DMA_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002800:	f7ff fc12 	bl	8002028 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <HAL_UART_MspInit+0x168>)
 8002808:	639a      	str	r2, [r3, #56]	@ 0x38
 800280a:	4a0c      	ldr	r2, [pc, #48]	@ (800283c <HAL_UART_MspInit+0x168>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2105      	movs	r1, #5
 8002814:	2025      	movs	r0, #37	@ 0x25
 8002816:	f000 fee3 	bl	80035e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800281a:	2025      	movs	r0, #37	@ 0x25
 800281c:	f000 fefc 	bl	8003618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	@ 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40011000 	.word	0x40011000
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000
 8002834:	200088f8 	.word	0x200088f8
 8002838:	40026440 	.word	0x40026440
 800283c:	20008958 	.word	0x20008958
 8002840:	400264b8 	.word	0x400264b8

08002844 <calculate_pwm>:
 * @param pwm_output An array of 8 uint16_t values to store the calculated PWM output.
 * @return OK if the calculation was successful, MAT_MULT_ERROR if the matrix
 * multiplication failed.
 */
int8_t calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8])
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b0a0      	sub	sp, #128	@ 0x80
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 800284e:	2300      	movs	r3, #0
 8002850:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002854:	e011      	b.n	800287a <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 8002856:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	441a      	add	r2, r3
 8002860:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3380      	adds	r3, #128	@ 0x80
 800286a:	443b      	add	r3, r7
 800286c:	3b1c      	subs	r3, #28
 800286e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 8002870:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002874:	3301      	adds	r3, #1
 8002876:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800287a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800287e:	2b05      	cmp	r3, #5
 8002880:	d9e9      	bls.n	8002856 <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 8002882:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002886:	2206      	movs	r2, #6
 8002888:	4619      	mov	r1, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fa9e 	bl	8001dcc <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8][1] = {0};
 8002890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002894:	2220      	movs	r2, #32
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f017 f8e4 	bl	8019a66 <memset>

    arm_matrix_instance_f32 fixed_mixing_matrix_instance;
    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 800289e:	f107 001c 	add.w	r0, r7, #28
 80028a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002990 <calculate_pwm+0x14c>)
 80028a4:	2206      	movs	r2, #6
 80028a6:	2108      	movs	r1, #8
 80028a8:	f006 fd9e 	bl	80093e8 <arm_mat_init_f32>
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 80028ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028b0:	f107 0014 	add.w	r0, r7, #20
 80028b4:	2201      	movs	r2, #1
 80028b6:	2106      	movs	r1, #6
 80028b8:	f006 fd96 	bl	80093e8 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 80028bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c0:	f107 000c 	add.w	r0, r7, #12
 80028c4:	2201      	movs	r2, #1
 80028c6:	2108      	movs	r1, #8
 80028c8:	f006 fd8e 	bl	80093e8 <arm_mat_init_f32>

    if (arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance) != ARM_MATH_SUCCESS)
 80028cc:	f107 020c 	add.w	r2, r7, #12
 80028d0:	f107 0114 	add.w	r1, r7, #20
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4618      	mov	r0, r3
 80028da:	f006 fc75 	bl	80091c8 <arm_mat_mult_f32>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <calculate_pwm+0xa4>
    {
        return MAT_MULT_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e04f      	b.n	8002988 <calculate_pwm+0x144>
    }

    for (uint8_t i = 0; i < 8; i++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80028ee:	e011      	b.n	8002914 <calculate_pwm+0xd0>
    {
        f_pwm_output[i] = pwm_output_instance.pData[i];
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	441a      	add	r2, r3
 80028fa:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	3380      	adds	r3, #128	@ 0x80
 8002904:	443b      	add	r3, r7
 8002906:	3b3c      	subs	r3, #60	@ 0x3c
 8002908:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 800290a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800290e:	3301      	adds	r3, #1
 8002910:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002914:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002918:	2b07      	cmp	r3, #7
 800291a:	d9e9      	bls.n	80028f0 <calculate_pwm+0xac>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 800291c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002920:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002924:	2208      	movs	r2, #8
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fa50 	bl	8001dcc <normalize_vector>
    for (uint8_t i = 0; i < 8; i++)
 800292c:	2300      	movs	r3, #0
 800292e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8002932:	e024      	b.n	800297e <calculate_pwm+0x13a>
    {
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 8002934:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	3380      	adds	r3, #128	@ 0x80
 800293c:	443b      	add	r3, r7
 800293e:	3b3c      	subs	r3, #60	@ 0x3c
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 8002994 <calculate_pwm+0x150>
 8002948:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002998 <calculate_pwm+0x154>
 800294c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002950:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002954:	eeb0 0a67 	vmov.f32	s0, s15
 8002958:	f7ff fa0a 	bl	8001d70 <linear_interpolation>
 800295c:	eef0 7a40 	vmov.f32	s15, s0
 8002960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002964:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	4413      	add	r3, r2
 800296e:	ee17 2a90 	vmov	r2, s15
 8002972:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 8002974:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002978:	3301      	adds	r3, #1
 800297a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800297e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002982:	2b07      	cmp	r3, #7
 8002984:	d9d6      	bls.n	8002934 <calculate_pwm+0xf0>
    }
    return OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3780      	adds	r7, #128	@ 0x80
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000008 	.word	0x20000008
 8002994:	44ed8000 	.word	0x44ed8000
 8002998:	44898000 	.word	0x44898000

0800299c <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	ed93 7a00 	vldr	s14, [r3]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 80029f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	d110      	bne.n	8002a26 <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	60da      	str	r2, [r3, #12]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	601a      	str	r2, [r3, #0]
		return;
 8002a24:	e02d      	b.n	8002a82 <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edd3 6a00 	vldr	s13, [r3]
 8002a2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a40:	eef1 6a67 	vneg.f32	s13, s15
 8002a44:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a58:	eef1 6a67 	vneg.f32	s13, s15
 8002a5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a70:	eef1 6a67 	vneg.f32	s13, s15
 8002a74:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	ed93 7a00 	vldr	s14, [r3]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	edd3 7a00 	vldr	s15, [r3]
 8002aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	edd3 6a01 	vldr	s13, [r3, #4]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	ed93 7a00 	vldr	s14, [r3]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	ed93 7a00 	vldr	s14, [r3]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	edd3 6a03 	vldr	s13, [r3, #12]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	0000      	movs	r0, r0
	...

08002bf0 <calculate_rpy_from_quaternion>:

// PIDs controllers, respectively for z, pitch, roll, yaw
arm_pid_instance_f32 pids[4] = {0};

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b08c      	sub	sp, #48	@ 0x30
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	ed93 7a00 	vldr	s14, [r3]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c22:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c56:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 8002c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c5c:	f7fd fc9c 	bl	8000598 <__aeabi_f2d>
 8002c60:	4604      	mov	r4, r0
 8002c62:	460d      	mov	r5, r1
 8002c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c66:	f7fd fc97 	bl	8000598 <__aeabi_f2d>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	ec43 2b11 	vmov	d1, r2, r3
 8002c72:	ec45 4b10 	vmov	d0, r4, r5
 8002c76:	f017 fdad 	bl	801a7d4 <atan2>
 8002c7a:	ec53 2b10 	vmov	r2, r3, d0
 8002c7e:	4610      	mov	r0, r2
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fd ff7b 	bl	8000b7c <__aeabi_d2f>
 8002c86:	4602      	mov	r2, r0
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	arm_sqrt_f32(1 + 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &sinp);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	ed93 7a00 	vldr	s14, [r3]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cbc:	edc7 7a05 	vstr	s15, [r7, #20]
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	db09      	blt.n	8002ce8 <calculate_rpy_from_quaternion+0xf8>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002cd4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002cd8:	f017 fe44 	bl	801a964 <sqrtf>
 8002cdc:	eef0 7a40 	vmov.f32	s15, s0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002ce6:	e004      	b.n	8002cf2 <calculate_rpy_from_quaternion+0x102>
    }
    else
    {
      *pOut = 0.0f;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002cf0:	bf00      	nop
	arm_sqrt_f32(1 - 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &cosp);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	ed93 7a00 	vldr	s14, [r3]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d22:	edc7 7a07 	vstr	s15, [r7, #28]
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8002d2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	db09      	blt.n	8002d4e <calculate_rpy_from_quaternion+0x15e>
      *pOut = sqrtf(in);
 8002d3a:	ed97 0a07 	vldr	s0, [r7, #28]
 8002d3e:	f017 fe11 	bl	801a964 <sqrtf>
 8002d42:	eef0 7a40 	vmov.f32	s15, s0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8002d4c:	e004      	b.n	8002d58 <calculate_rpy_from_quaternion+0x168>
      *pOut = 0.0f;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002d56:	bf00      	nop
	roll_pitch_yaw_radians[1] = 2 * atan2(sinp, cosp) - M_PI / 2;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fc1c 	bl	8000598 <__aeabi_f2d>
 8002d60:	4604      	mov	r4, r0
 8002d62:	460d      	mov	r5, r1
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fc16 	bl	8000598 <__aeabi_f2d>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	ec43 2b11 	vmov	d1, r2, r3
 8002d74:	ec45 4b10 	vmov	d0, r4, r5
 8002d78:	f017 fd2c 	bl	801a7d4 <atan2>
 8002d7c:	ec51 0b10 	vmov	r0, r1, d0
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	f7fd faaa 	bl	80002dc <__adddf3>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	a32d      	add	r3, pc, #180	@ (adr r3, 8002e48 <calculate_rpy_from_quaternion+0x258>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fa9f 	bl	80002d8 <__aeabi_dsub>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	1d1c      	adds	r4, r3, #4
 8002da6:	f7fd fee9 	bl	8000b7c <__aeabi_d2f>
 8002daa:	4603      	mov	r3, r0
 8002dac:	6023      	str	r3, [r4, #0]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	ed93 7a00 	vldr	s14, [r3]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002de6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	edd3 6a03 	vldr	s13, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0a:	edc7 7a08 	vstr	s15, [r7, #32]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 8002e0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e10:	f7fd fbc2 	bl	8000598 <__aeabi_f2d>
 8002e14:	4604      	mov	r4, r0
 8002e16:	460d      	mov	r5, r1
 8002e18:	6a38      	ldr	r0, [r7, #32]
 8002e1a:	f7fd fbbd 	bl	8000598 <__aeabi_f2d>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	ec43 2b11 	vmov	d1, r2, r3
 8002e26:	ec45 4b10 	vmov	d0, r4, r5
 8002e2a:	f017 fcd3 	bl	801a7d4 <atan2>
 8002e2e:	ec51 0b10 	vmov	r0, r1, d0
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f103 0408 	add.w	r4, r3, #8
 8002e38:	f7fd fea0 	bl	8000b7c <__aeabi_d2f>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	6023      	str	r3, [r4, #0]
}
 8002e40:	bf00      	nop
 8002e42:	3730      	adds	r7, #48	@ 0x30
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bdb0      	pop	{r4, r5, r7, pc}
 8002e48:	54442d18 	.word	0x54442d18
 8002e4c:	3ff921fb 	.word	0x3ff921fb

08002e50 <update_setpoints>:

uint8_t update_setpoints(const float input_values[6], const Quaternion *quat, const float *water_pressure)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	4619      	mov	r1, r3
 8002e66:	68b8      	ldr	r0, [r7, #8]
 8002e68:	f7ff fec2 	bl	8002bf0 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77bb      	strb	r3, [r7, #30]
 8002e70:	e022      	b.n	8002eb8 <update_setpoints+0x68>
	{
		if(fabsf(input_values[i+3]) < TOLERANCE)
 8002e72:	7fbb      	ldrb	r3, [r7, #30]
 8002e74:	3303      	adds	r3, #3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	eef0 7ae7 	vabs.f32	s15, s15
 8002e84:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002ec8 <update_setpoints+0x78>
 8002e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	d50f      	bpl.n	8002eb2 <update_setpoints+0x62>
		{
			setpoints[i+1] = rpy_rads[i+1];
 8002e92:	7fbb      	ldrb	r3, [r7, #30]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	7fbb      	ldrb	r3, [r7, #30]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	3220      	adds	r2, #32
 8002e9e:	443a      	add	r2, r7
 8002ea0:	3a10      	subs	r2, #16
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4909      	ldr	r1, [pc, #36]	@ (8002ecc <update_setpoints+0x7c>)
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	601a      	str	r2, [r3, #0]
			count++;
 8002eac:	7ffb      	ldrb	r3, [r7, #31]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 8002eb2:	7fbb      	ldrb	r3, [r7, #30]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	77bb      	strb	r3, [r7, #30]
 8002eb8:	7fbb      	ldrb	r3, [r7, #30]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d9d9      	bls.n	8002e72 <update_setpoints+0x22>
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */


	return count;
 8002ebe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	3d4ccccd 	.word	0x3d4ccccd
 8002ecc:	200089b8 	.word	0x200089b8

08002ed0 <calculate_pwm_with_pid>:
    }
}

// The order for 4-elements arrays is: z, pitch, roll, yaw
uint8_t calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b0b0      	sub	sp, #192	@ 0xc0
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 8002ede:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff fe82 	bl	8002bf0 <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	66bb      	str	r3, [r7, #104]	@ 0x68

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ffaa 	bl	8002e50 <update_setpoints>
	// PID in action!
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002f02:	e011      	b.n	8002f28 <calculate_pwm_with_pid+0x58>
 8002f04:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	441a      	add	r2, r3
 8002f0e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	33c0      	adds	r3, #192	@ 0xc0
 8002f18:	443b      	add	r3, r7
 8002f1a:	3b70      	subs	r3, #112	@ 0x70
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002f22:	3301      	adds	r3, #1
 8002f24:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002f28:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d9e9      	bls.n	8002f04 <calculate_pwm_with_pid+0x34>

	float pitch_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 8002f30:	4bce      	ldr	r3, [pc, #824]	@ (800326c <calculate_pwm_with_pid+0x39c>)
 8002f32:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f36:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3e:	4bcc      	ldr	r3, [pc, #816]	@ (8003270 <calculate_pwm_with_pid+0x3a0>)
 8002f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f44:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    out = (S->A0 * in) +
 8002f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f4c:	ed93 7a00 	vldr	s14, [r3]
 8002f50:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002f54:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f64:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f74:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f8c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    S->state[1] = S->state[0];
 8002f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fa2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fa8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002faa:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fb0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002fb2:	615a      	str	r2, [r3, #20]
    return (out);
 8002fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float roll_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 8002fba:	4bac      	ldr	r3, [pc, #688]	@ (800326c <calculate_pwm_with_pid+0x39c>)
 8002fbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fc0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc8:	4baa      	ldr	r3, [pc, #680]	@ (8003274 <calculate_pwm_with_pid+0x3a4>)
 8002fca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fce:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    out = (S->A0 * in) +
 8002fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fd6:	ed93 7a00 	vldr	s14, [r3]
 8002fda:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002fde:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fe6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ffe:	edd3 6a02 	vldr	s13, [r3, #8]
 8003002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003006:	edd3 7a04 	vldr	s15, [r3, #16]
 800300a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003016:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800301a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    S->state[1] = S->state[0];
 8003022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800302c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800302e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003032:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003036:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800303c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003040:	615a      	str	r2, [r3, #20]
    return (out);
 8003042:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 800304a:	4b88      	ldr	r3, [pc, #544]	@ (800326c <calculate_pwm_with_pid+0x39c>)
 800304c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003050:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003058:	4b87      	ldr	r3, [pc, #540]	@ (8003278 <calculate_pwm_with_pid+0x3a8>)
 800305a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800305e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    out = (S->A0 * in) +
 8003062:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003066:	ed93 7a00 	vldr	s14, [r3]
 800306a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800306e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003072:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003076:	edd3 6a01 	vldr	s13, [r3, #4]
 800307a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800307e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003082:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003086:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800308a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800308e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003092:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003096:	edd3 7a04 	vldr	s15, [r3, #16]
 800309a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030a6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80030aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ae:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    S->state[1] = S->state[0];
 80030b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030bc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80030be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030c6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80030c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80030d0:	615a      	str	r2, [r3, #20]
    return (out);
 80030d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	/* **************
	 * Depth
	 * The z axis we can get measures of is in the fixed-body-frame:
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	float z_out = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 80030da:	4b64      	ldr	r3, [pc, #400]	@ (800326c <calculate_pwm_with_pid+0x39c>)
 80030dc:	ed93 7a00 	vldr	s14, [r3]
 80030e0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80030e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e8:	4b64      	ldr	r3, [pc, #400]	@ (800327c <calculate_pwm_with_pid+0x3ac>)
 80030ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030ee:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    out = (S->A0 * in) +
 80030f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80030fe:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003106:	edd3 6a01 	vldr	s13, [r3, #4]
 800310a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800310e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003112:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003116:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800311a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800311e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003126:	edd3 7a04 	vldr	s15, [r3, #16]
 800312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003136:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    S->state[1] = S->state[0];
 8003142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800314c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800314e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003152:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003156:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003158:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800315c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003160:	615a      	str	r2, [r3, #20]
    return (out);
 8003162:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	// Applies the inverse rotation of the body-frame from the fixed-body-frame ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the body-frame
	Quaternion z_out_q;
	z_out_q.w = 0;
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	643b      	str	r3, [r7, #64]	@ 0x40
	z_out_q.x = 0;
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.y = 0;
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	64bb      	str	r3, [r7, #72]	@ 0x48
	z_out_q.z = z_out;
 800317c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003180:	64fb      	str	r3, [r7, #76]	@ 0x4c
	Quaternion q_inv = {0};
 8003182:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 8003190:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003194:	4619      	mov	r1, r3
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fc00 	bl	800299c <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 800319c:	f107 0320 	add.w	r3, r7, #32
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
	Quaternion z_out_body_frame = {0};
 80031aa:	f107 0310 	add.w	r3, r7, #16
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	60da      	str	r2, [r3, #12]
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 80031b8:	f107 0220 	add.w	r2, r7, #32
 80031bc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80031c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fc61 	bl	8002a8c <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_body_frame);
 80031ca:	f107 0210 	add.w	r2, r7, #16
 80031ce:	f107 0320 	add.w	r3, r7, #32
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fc59 	bl	8002a8c <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t y_condition = fabsf(z_out_body_frame.y) < TOLERANCE || fabsf(input_values[0] < TOLERANCE);
 80031da:	edd7 7a06 	vldr	s15, [r7, #24]
 80031de:	eef0 7ae7 	vabs.f32	s15, s15
 80031e2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 80031e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ee:	d408      	bmi.n	8003202 <calculate_pwm_with_pid+0x332>
 80031f0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80031f4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d501      	bpl.n	8003206 <calculate_pwm_with_pid+0x336>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <calculate_pwm_with_pid+0x338>
 8003206:	2300      	movs	r3, #0
 8003208:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	uint8_t x_condition = fabsf(z_out_body_frame.x) < TOLERANCE || fabsf(input_values[1] < TOLERANCE);
 800320c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003210:	eef0 7ae7 	vabs.f32	s15, s15
 8003214:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	d408      	bmi.n	8003234 <calculate_pwm_with_pid+0x364>
 8003222:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003226:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 800322a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003232:	d501      	bpl.n	8003238 <calculate_pwm_with_pid+0x368>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <calculate_pwm_with_pid+0x36a>
 8003238:	2300      	movs	r3, #0
 800323a:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
	uint8_t z_condition = fabsf(z_out_body_frame.z) < TOLERANCE || fabsf(input_values[2] < TOLERANCE);
 800323e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003242:	eef0 7ae7 	vabs.f32	s15, s15
 8003246:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 800324a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003252:	d408      	bmi.n	8003266 <calculate_pwm_with_pid+0x396>
 8003254:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003258:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 800325c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003264:	d50e      	bpl.n	8003284 <calculate_pwm_with_pid+0x3b4>
 8003266:	2301      	movs	r3, #1
 8003268:	e00d      	b.n	8003286 <calculate_pwm_with_pid+0x3b6>
 800326a:	bf00      	nop
 800326c:	200089b8 	.word	0x200089b8
 8003270:	200089ec 	.word	0x200089ec
 8003274:	20008a10 	.word	0x20008a10
 8003278:	20008a34 	.word	0x20008a34
 800327c:	200089c8 	.word	0x200089c8
 8003280:	3d4ccccd 	.word	0x3d4ccccd
 8003284:	2300      	movs	r3, #0
 8003286:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9

	if (x_condition && y_condition && z_condition)
 800328a:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01f      	beq.n	80032d2 <calculate_pwm_with_pid+0x402>
 8003292:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01b      	beq.n	80032d2 <calculate_pwm_with_pid+0x402>
 800329a:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <calculate_pwm_with_pid+0x402>
	{
		input_values[0] += z_out_body_frame.y;
 80032a2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80032a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80032aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ae:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		input_values[1] += z_out_body_frame.x;
 80032b2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80032b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032be:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[2] += z_out_body_frame.z;
 80032c2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80032c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80032ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ce:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	}

	// pitch
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3] < TOLERANCE))
 80032d2:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80032d6:	eef0 7ae7 	vabs.f32	s15, s15
 80032da:	ed1f 7a17 	vldr	s14, [pc, #-92]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 80032de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	d408      	bmi.n	80032fa <calculate_pwm_with_pid+0x42a>
 80032e8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80032ec:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 80032f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f8:	d507      	bpl.n	800330a <calculate_pwm_with_pid+0x43a>
	{
		input_values[3] += pitch_pid_feedback;
 80032fa:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80032fe:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003306:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}
	// roll
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4] < TOLERANCE))
 800330a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800330e:	eef0 7ae7 	vabs.f32	s15, s15
 8003312:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 8003316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	d408      	bmi.n	8003332 <calculate_pwm_with_pid+0x462>
 8003320:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003324:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d507      	bpl.n	8003342 <calculate_pwm_with_pid+0x472>
	{
		input_values[4] += roll_pid_feedback;
 8003332:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003336:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800333a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5] < TOLERANCE))
 8003342:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003346:	eef0 7ae7 	vabs.f32	s15, s15
 800334a:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 800334e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003356:	d408      	bmi.n	800336a <calculate_pwm_with_pid+0x49a>
 8003358:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800335c:	ed1f 7a38 	vldr	s14, [pc, #-224]	@ 8003280 <calculate_pwm_with_pid+0x3b0>
 8003360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d507      	bpl.n	800337a <calculate_pwm_with_pid+0x4aa>
	{
		input_values[5] += yaw_pid_feedback;
 800336a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800336e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003376:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}

	uint8_t code = calculate_pwm(&input_values, pwm_output);
 800337a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fa5f 	bl	8002844 <calculate_pwm>
 8003386:	4603      	mov	r3, r0
 8003388:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	return code;
 800338c:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
}
 8003390:	4618      	mov	r0, r3
 8003392:	37c0      	adds	r7, #192	@ 0xc0
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800339c:	f7ff f95e 	bl	800265c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033a0:	480c      	ldr	r0, [pc, #48]	@ (80033d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033a2:	490d      	ldr	r1, [pc, #52]	@ (80033d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033a4:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a8:	e002      	b.n	80033b0 <LoopCopyDataInit>

080033aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ae:	3304      	adds	r3, #4

080033b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b4:	d3f9      	bcc.n	80033aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033b6:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033b8:	4c0a      	ldr	r4, [pc, #40]	@ (80033e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033bc:	e001      	b.n	80033c2 <LoopFillZerobss>

080033be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c0:	3204      	adds	r2, #4

080033c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c4:	d3fb      	bcc.n	80033be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80033c6:	f016 fb8f 	bl	8019ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ca:	f7fe fd79 	bl	8001ec0 <main>
  bx  lr    
 80033ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80033d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d8:	20000ac4 	.word	0x20000ac4
  ldr r2, =_sidata
 80033dc:	0801c9dc 	.word	0x0801c9dc
  ldr r2, =_sbss
 80033e0:	20000ac8 	.word	0x20000ac8
  ldr r4, =_ebss
 80033e4:	20015b4c 	.word	0x20015b4c

080033e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033e8:	e7fe      	b.n	80033e8 <ADC_IRQHandler>
	...

080033ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033f0:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <HAL_Init+0x40>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a0d      	ldr	r2, [pc, #52]	@ (800342c <HAL_Init+0x40>)
 80033f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_Init+0x40>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <HAL_Init+0x40>)
 8003402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_Init+0x40>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a07      	ldr	r2, [pc, #28]	@ (800342c <HAL_Init+0x40>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003414:	2003      	movs	r0, #3
 8003416:	f000 f8d8 	bl	80035ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800341a:	200f      	movs	r0, #15
 800341c:	f7fe ff9c 	bl	8002358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003420:	f7fe ff6e 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023c00 	.word	0x40023c00

08003430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003434:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <HAL_IncTick+0x20>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_IncTick+0x24>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4413      	add	r3, r2
 8003440:	4a04      	ldr	r2, [pc, #16]	@ (8003454 <HAL_IncTick+0x24>)
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	200000cc 	.word	0x200000cc
 8003454:	20008a58 	.word	0x20008a58

08003458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return uwTick;
 800345c:	4b03      	ldr	r3, [pc, #12]	@ (800346c <HAL_GetTick+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20008a58 	.word	0x20008a58

08003470 <__NVIC_SetPriorityGrouping>:
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003480:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800349c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a2:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <__NVIC_SetPriorityGrouping+0x44>)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60d3      	str	r3, [r2, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_GetPriorityGrouping>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034bc:	4b04      	ldr	r3, [pc, #16]	@ (80034d0 <__NVIC_GetPriorityGrouping+0x18>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 0307 	and.w	r3, r3, #7
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_EnableIRQ>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	db0b      	blt.n	80034fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	4907      	ldr	r1, [pc, #28]	@ (800350c <__NVIC_EnableIRQ+0x38>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	2001      	movs	r0, #1
 80034f6:	fa00 f202 	lsl.w	r2, r0, r2
 80034fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000e100 	.word	0xe000e100

08003510 <__NVIC_SetPriority>:
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	6039      	str	r1, [r7, #0]
 800351a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	db0a      	blt.n	800353a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	490c      	ldr	r1, [pc, #48]	@ (800355c <__NVIC_SetPriority+0x4c>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	440b      	add	r3, r1
 8003534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003538:	e00a      	b.n	8003550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	@ (8003560 <__NVIC_SetPriority+0x50>)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3b04      	subs	r3, #4
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	440b      	add	r3, r1
 800354e:	761a      	strb	r2, [r3, #24]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <NVIC_EncodePriority>:
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	@ 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f1c3 0307 	rsb	r3, r3, #7
 800357e:	2b04      	cmp	r3, #4
 8003580:	bf28      	it	cs
 8003582:	2304      	movcs	r3, #4
 8003584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3304      	adds	r3, #4
 800358a:	2b06      	cmp	r3, #6
 800358c:	d902      	bls.n	8003594 <NVIC_EncodePriority+0x30>
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3b03      	subs	r3, #3
 8003592:	e000      	b.n	8003596 <NVIC_EncodePriority+0x32>
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	401a      	ands	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43d9      	mvns	r1, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	4313      	orrs	r3, r2
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	@ 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff4c 	bl	8003470 <__NVIC_SetPriorityGrouping>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035f2:	f7ff ff61 	bl	80034b8 <__NVIC_GetPriorityGrouping>
 80035f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68b9      	ldr	r1, [r7, #8]
 80035fc:	6978      	ldr	r0, [r7, #20]
 80035fe:	f7ff ffb1 	bl	8003564 <NVIC_EncodePriority>
 8003602:	4602      	mov	r2, r0
 8003604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff80 	bl	8003510 <__NVIC_SetPriority>
}
 8003610:	bf00      	nop
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff54 	bl	80034d4 <__NVIC_EnableIRQ>
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003640:	f7ff ff0a 	bl	8003458 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e099      	b.n	8003784 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003670:	e00f      	b.n	8003692 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003672:	f7ff fef1 	bl	8003458 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b05      	cmp	r3, #5
 800367e:	d908      	bls.n	8003692 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2203      	movs	r2, #3
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e078      	b.n	8003784 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e8      	bne.n	8003672 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4b38      	ldr	r3, [pc, #224]	@ (800378c <HAL_DMA_Init+0x158>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d107      	bne.n	80036fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	4313      	orrs	r3, r2
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0307 	bic.w	r3, r3, #7
 8003712:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	2b04      	cmp	r3, #4
 8003724:	d117      	bne.n	8003756 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fb01 	bl	8003d40 <DMA_CheckFifoParam>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2240      	movs	r2, #64	@ 0x40
 8003748:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003752:	2301      	movs	r3, #1
 8003754:	e016      	b.n	8003784 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fab8 	bl	8003cd4 <DMA_CalcBaseAndBitshift>
 8003764:	4603      	mov	r3, r0
 8003766:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376c:	223f      	movs	r2, #63	@ 0x3f
 800376e:	409a      	lsls	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	f010803f 	.word	0xf010803f

08003790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_DMA_Start_IT+0x26>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e040      	b.n	8003838 <HAL_DMA_Start_IT+0xa8>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d12f      	bne.n	800382a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa4a 	bl	8003c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	223f      	movs	r2, #63	@ 0x3f
 80037ea:	409a      	lsls	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0216 	orr.w	r2, r2, #22
 80037fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0208 	orr.w	r2, r2, #8
 8003816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e005      	b.n	8003836 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800384e:	f7ff fe03 	bl	8003458 <HAL_GetTick>
 8003852:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d008      	beq.n	8003872 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e052      	b.n	8003918 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0216 	bic.w	r2, r2, #22
 8003880:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003890:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <HAL_DMA_Abort+0x62>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0208 	bic.w	r2, r2, #8
 80038b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c2:	e013      	b.n	80038ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038c4:	f7ff fdc8 	bl	8003458 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d90c      	bls.n	80038ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e015      	b.n	8003918 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e4      	bne.n	80038c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fe:	223f      	movs	r2, #63	@ 0x3f
 8003900:	409a      	lsls	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d004      	beq.n	800393e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e00c      	b.n	8003958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2205      	movs	r2, #5
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003970:	4b8e      	ldr	r3, [pc, #568]	@ (8003bac <HAL_DMA_IRQHandler+0x248>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a8e      	ldr	r2, [pc, #568]	@ (8003bb0 <HAL_DMA_IRQHandler+0x24c>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0a9b      	lsrs	r3, r3, #10
 800397c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398e:	2208      	movs	r2, #8
 8003990:	409a      	lsls	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01a      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039bc:	2208      	movs	r2, #8
 80039be:	409a      	lsls	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d4:	2201      	movs	r2, #1
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d012      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	2201      	movs	r2, #1
 80039f4:	409a      	lsls	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fe:	f043 0202 	orr.w	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d012      	beq.n	8003a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	2204      	movs	r2, #4
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	2210      	movs	r2, #16
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d043      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d03c      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	2210      	movs	r2, #16
 8003a60:	409a      	lsls	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d018      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d108      	bne.n	8003a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d024      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
 8003a92:	e01f      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
 8003aa4:	e016      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0208 	bic.w	r2, r2, #8
 8003ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	2220      	movs	r2, #32
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 808f 	beq.w	8003c04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8087 	beq.w	8003c04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afa:	2220      	movs	r2, #32
 8003afc:	409a      	lsls	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	d136      	bne.n	8003b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0216 	bic.w	r2, r2, #22
 8003b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <HAL_DMA_IRQHandler+0x1da>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0208 	bic.w	r2, r2, #8
 8003b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	223f      	movs	r2, #63	@ 0x3f
 8003b54:	409a      	lsls	r2, r3
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d07e      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
        }
        return;
 8003b7a:	e079      	b.n	8003c70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01d      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d031      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
 8003ba8:	e02c      	b.n	8003c04 <HAL_DMA_IRQHandler+0x2a0>
 8003baa:	bf00      	nop
 8003bac:	20000004 	.word	0x20000004
 8003bb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
 8003bc4:	e01e      	b.n	8003c04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0210 	bic.w	r2, r2, #16
 8003be2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d032      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d022      	beq.n	8003c5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d307      	bcc.n	8003c4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f2      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x2cc>
 8003c4a:	e000      	b.n	8003c4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
 8003c6e:	e000      	b.n	8003c72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c70:	bf00      	nop
    }
  }
}
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d108      	bne.n	8003cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cb6:	e007      	b.n	8003cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	3b10      	subs	r3, #16
 8003ce4:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <DMA_CalcBaseAndBitshift+0x64>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cee:	4a13      	ldr	r2, [pc, #76]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x68>)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d909      	bls.n	8003d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d0a:	f023 0303 	bic.w	r3, r3, #3
 8003d0e:	1d1a      	adds	r2, r3, #4
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d14:	e007      	b.n	8003d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	aaaaaaab 	.word	0xaaaaaaab
 8003d3c:	0801aed4 	.word	0x0801aed4

08003d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11f      	bne.n	8003d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d856      	bhi.n	8003e0e <DMA_CheckFifoParam+0xce>
 8003d60:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <DMA_CheckFifoParam+0x28>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d8b 	.word	0x08003d8b
 8003d70:	08003d79 	.word	0x08003d79
 8003d74:	08003e0f 	.word	0x08003e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d046      	beq.n	8003e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d88:	e043      	b.n	8003e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d92:	d140      	bne.n	8003e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d98:	e03d      	b.n	8003e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003da2:	d121      	bne.n	8003de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d837      	bhi.n	8003e1a <DMA_CheckFifoParam+0xda>
 8003daa:	a201      	add	r2, pc, #4	@ (adr r2, 8003db0 <DMA_CheckFifoParam+0x70>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003dc1 	.word	0x08003dc1
 8003db4:	08003dc7 	.word	0x08003dc7
 8003db8:	08003dc1 	.word	0x08003dc1
 8003dbc:	08003dd9 	.word	0x08003dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc4:	e030      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d025      	beq.n	8003e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd6:	e022      	b.n	8003e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003de0:	d11f      	bne.n	8003e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003de6:	e01c      	b.n	8003e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d903      	bls.n	8003df6 <DMA_CheckFifoParam+0xb6>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d003      	beq.n	8003dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003df4:	e018      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfa:	e015      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00e      	beq.n	8003e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0c:	e00b      	b.n	8003e26 <DMA_CheckFifoParam+0xe6>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e00a      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      break;
 8003e12:	bf00      	nop
 8003e14:	e008      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
 8003e18:	e006      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e004      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e002      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
    }
  } 
  
  return status; 
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	@ 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	e177      	b.n	8004144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e54:	2201      	movs	r2, #1
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	f040 8166 	bne.w	800413e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d005      	beq.n	8003e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d130      	bne.n	8003eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	2203      	movs	r2, #3
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 0201 	and.w	r2, r3, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d017      	beq.n	8003f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	2203      	movs	r2, #3
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d123      	bne.n	8003f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	08da      	lsrs	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3208      	adds	r2, #8
 8003f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	08da      	lsrs	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3208      	adds	r2, #8
 8003f76:	69b9      	ldr	r1, [r7, #24]
 8003f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0203 	and.w	r2, r3, #3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80c0 	beq.w	800413e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	4b66      	ldr	r3, [pc, #408]	@ (800415c <HAL_GPIO_Init+0x324>)
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_GPIO_Init+0x324>)
 8003fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fce:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_GPIO_Init+0x324>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fda:	4a61      	ldr	r2, [pc, #388]	@ (8004160 <HAL_GPIO_Init+0x328>)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	220f      	movs	r2, #15
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a58      	ldr	r2, [pc, #352]	@ (8004164 <HAL_GPIO_Init+0x32c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d037      	beq.n	8004076 <HAL_GPIO_Init+0x23e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a57      	ldr	r2, [pc, #348]	@ (8004168 <HAL_GPIO_Init+0x330>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <HAL_GPIO_Init+0x23a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a56      	ldr	r2, [pc, #344]	@ (800416c <HAL_GPIO_Init+0x334>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d02b      	beq.n	800406e <HAL_GPIO_Init+0x236>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a55      	ldr	r2, [pc, #340]	@ (8004170 <HAL_GPIO_Init+0x338>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d025      	beq.n	800406a <HAL_GPIO_Init+0x232>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a54      	ldr	r2, [pc, #336]	@ (8004174 <HAL_GPIO_Init+0x33c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <HAL_GPIO_Init+0x22e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a53      	ldr	r2, [pc, #332]	@ (8004178 <HAL_GPIO_Init+0x340>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d019      	beq.n	8004062 <HAL_GPIO_Init+0x22a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a52      	ldr	r2, [pc, #328]	@ (800417c <HAL_GPIO_Init+0x344>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_GPIO_Init+0x226>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a51      	ldr	r2, [pc, #324]	@ (8004180 <HAL_GPIO_Init+0x348>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00d      	beq.n	800405a <HAL_GPIO_Init+0x222>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a50      	ldr	r2, [pc, #320]	@ (8004184 <HAL_GPIO_Init+0x34c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <HAL_GPIO_Init+0x21e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a4f      	ldr	r2, [pc, #316]	@ (8004188 <HAL_GPIO_Init+0x350>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d101      	bne.n	8004052 <HAL_GPIO_Init+0x21a>
 800404e:	2309      	movs	r3, #9
 8004050:	e012      	b.n	8004078 <HAL_GPIO_Init+0x240>
 8004052:	230a      	movs	r3, #10
 8004054:	e010      	b.n	8004078 <HAL_GPIO_Init+0x240>
 8004056:	2308      	movs	r3, #8
 8004058:	e00e      	b.n	8004078 <HAL_GPIO_Init+0x240>
 800405a:	2307      	movs	r3, #7
 800405c:	e00c      	b.n	8004078 <HAL_GPIO_Init+0x240>
 800405e:	2306      	movs	r3, #6
 8004060:	e00a      	b.n	8004078 <HAL_GPIO_Init+0x240>
 8004062:	2305      	movs	r3, #5
 8004064:	e008      	b.n	8004078 <HAL_GPIO_Init+0x240>
 8004066:	2304      	movs	r3, #4
 8004068:	e006      	b.n	8004078 <HAL_GPIO_Init+0x240>
 800406a:	2303      	movs	r3, #3
 800406c:	e004      	b.n	8004078 <HAL_GPIO_Init+0x240>
 800406e:	2302      	movs	r3, #2
 8004070:	e002      	b.n	8004078 <HAL_GPIO_Init+0x240>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <HAL_GPIO_Init+0x240>
 8004076:	2300      	movs	r3, #0
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f002 0203 	and.w	r2, r2, #3
 800407e:	0092      	lsls	r2, r2, #2
 8004080:	4093      	lsls	r3, r2
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004088:	4935      	ldr	r1, [pc, #212]	@ (8004160 <HAL_GPIO_Init+0x328>)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	089b      	lsrs	r3, r3, #2
 800408e:	3302      	adds	r3, #2
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004096:	4b3d      	ldr	r3, [pc, #244]	@ (800418c <HAL_GPIO_Init+0x354>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ba:	4a34      	ldr	r2, [pc, #208]	@ (800418c <HAL_GPIO_Init+0x354>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c0:	4b32      	ldr	r3, [pc, #200]	@ (800418c <HAL_GPIO_Init+0x354>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e4:	4a29      	ldr	r2, [pc, #164]	@ (800418c <HAL_GPIO_Init+0x354>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ea:	4b28      	ldr	r3, [pc, #160]	@ (800418c <HAL_GPIO_Init+0x354>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800410e:	4a1f      	ldr	r2, [pc, #124]	@ (800418c <HAL_GPIO_Init+0x354>)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004114:	4b1d      	ldr	r3, [pc, #116]	@ (800418c <HAL_GPIO_Init+0x354>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004138:	4a14      	ldr	r2, [pc, #80]	@ (800418c <HAL_GPIO_Init+0x354>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3301      	adds	r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b0f      	cmp	r3, #15
 8004148:	f67f ae84 	bls.w	8003e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3724      	adds	r7, #36	@ 0x24
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	40013800 	.word	0x40013800
 8004164:	40020000 	.word	0x40020000
 8004168:	40020400 	.word	0x40020400
 800416c:	40020800 	.word	0x40020800
 8004170:	40020c00 	.word	0x40020c00
 8004174:	40021000 	.word	0x40021000
 8004178:	40021400 	.word	0x40021400
 800417c:	40021800 	.word	0x40021800
 8004180:	40021c00 	.word	0x40021c00
 8004184:	40022000 	.word	0x40022000
 8004188:	40022400 	.word	0x40022400
 800418c:	40013c00 	.word	0x40013c00

08004190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
 800419c:	4613      	mov	r3, r2
 800419e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a0:	787b      	ldrb	r3, [r7, #1]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041ac:	e003      	b.n	80041b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	041a      	lsls	r2, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	619a      	str	r2, [r3, #24]
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	4b20      	ldr	r3, [pc, #128]	@ (8004254 <HAL_PWREx_EnableOverDrive+0x90>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004254 <HAL_PWREx_EnableOverDrive+0x90>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041de:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_PWREx_EnableOverDrive+0x90>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80041ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004258 <HAL_PWREx_EnableOverDrive+0x94>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041f0:	f7ff f932 	bl	8003458 <HAL_GetTick>
 80041f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80041f6:	e009      	b.n	800420c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80041f8:	f7ff f92e 	bl	8003458 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004206:	d901      	bls.n	800420c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e01f      	b.n	800424c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800420c:	4b13      	ldr	r3, [pc, #76]	@ (800425c <HAL_PWREx_EnableOverDrive+0x98>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004218:	d1ee      	bne.n	80041f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800421a:	4b11      	ldr	r3, [pc, #68]	@ (8004260 <HAL_PWREx_EnableOverDrive+0x9c>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004220:	f7ff f91a 	bl	8003458 <HAL_GetTick>
 8004224:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004226:	e009      	b.n	800423c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004228:	f7ff f916 	bl	8003458 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004236:	d901      	bls.n	800423c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e007      	b.n	800424c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <HAL_PWREx_EnableOverDrive+0x98>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004248:	d1ee      	bne.n	8004228 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	420e0040 	.word	0x420e0040
 800425c:	40007000 	.word	0x40007000
 8004260:	420e0044 	.word	0x420e0044

08004264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0cc      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b68      	ldr	r3, [pc, #416]	@ (800441c <HAL_RCC_ClockConfig+0x1b8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d90c      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b65      	ldr	r3, [pc, #404]	@ (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b63      	ldr	r3, [pc, #396]	@ (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0b8      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b8:	4b59      	ldr	r3, [pc, #356]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a58      	ldr	r2, [pc, #352]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d0:	4b53      	ldr	r3, [pc, #332]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a52      	ldr	r2, [pc, #328]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b50      	ldr	r3, [pc, #320]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	494d      	ldr	r1, [pc, #308]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d044      	beq.n	8004384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d119      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d003      	beq.n	8004322 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	4b3f      	ldr	r3, [pc, #252]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e06f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e067      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004342:	4b37      	ldr	r3, [pc, #220]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f023 0203 	bic.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4934      	ldr	r1, [pc, #208]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004354:	f7ff f880 	bl	8003458 <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	e00a      	b.n	8004372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7ff f87c 	bl	8003458 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e04f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	4b2b      	ldr	r3, [pc, #172]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 020c 	and.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d1eb      	bne.n	800435c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004384:	4b25      	ldr	r3, [pc, #148]	@ (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d20c      	bcs.n	80043ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b22      	ldr	r3, [pc, #136]	@ (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b20      	ldr	r3, [pc, #128]	@ (800441c <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e032      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b8:	4b19      	ldr	r3, [pc, #100]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4916      	ldr	r1, [pc, #88]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d6:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	490e      	ldr	r1, [pc, #56]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ea:	f000 f821 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	490a      	ldr	r1, [pc, #40]	@ (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 80043fc:	5ccb      	ldrb	r3, [r1, r3]
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	4a09      	ldr	r2, [pc, #36]	@ (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004406:	4b09      	ldr	r3, [pc, #36]	@ (800442c <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd ffa4 	bl	8002358 <HAL_InitTick>

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023c00 	.word	0x40023c00
 8004420:	40023800 	.word	0x40023800
 8004424:	0801aebc 	.word	0x0801aebc
 8004428:	20000004 	.word	0x20000004
 800442c:	200000c8 	.word	0x200000c8

08004430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004434:	b092      	sub	sp, #72	@ 0x48
 8004436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004448:	4b6f      	ldr	r3, [pc, #444]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d00e      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x42>
 8004454:	2b08      	cmp	r3, #8
 8004456:	f200 80cd 	bhi.w	80045f4 <HAL_RCC_GetSysClockFreq+0x1c4>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_RCC_GetSysClockFreq+0x34>
 800445e:	2b04      	cmp	r3, #4
 8004460:	d003      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x3a>
 8004462:	e0c7      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b69      	ldr	r3, [pc, #420]	@ (800460c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004466:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004468:	e0c7      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800446a:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 800446e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004470:	e0c3      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004472:	4b65      	ldr	r3, [pc, #404]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800447c:	4b62      	ldr	r3, [pc, #392]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d04a      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004488:	4b5f      	ldr	r3, [pc, #380]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	2200      	movs	r2, #0
 8004490:	4618      	mov	r0, r3
 8004492:	4611      	mov	r1, r2
 8004494:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004498:	633b      	str	r3, [r7, #48]	@ 0x30
 800449a:	2300      	movs	r3, #0
 800449c:	637b      	str	r3, [r7, #52]	@ 0x34
 800449e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80044a2:	4642      	mov	r2, r8
 80044a4:	464b      	mov	r3, r9
 80044a6:	f04f 0000 	mov.w	r0, #0
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	00d9      	lsls	r1, r3, #3
 80044b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b4:	00d0      	lsls	r0, r2, #3
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4641      	mov	r1, r8
 80044bc:	1a54      	subs	r4, r2, r1
 80044be:	4649      	mov	r1, r9
 80044c0:	eb63 0501 	sbc.w	r5, r3, r1
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	016b      	lsls	r3, r5, #5
 80044ce:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80044d2:	0162      	lsls	r2, r4, #5
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	4643      	mov	r3, r8
 80044da:	18e3      	adds	r3, r4, r3
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	464b      	mov	r3, r9
 80044e0:	eb45 0303 	adc.w	r3, r5, r3
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044f2:	4629      	mov	r1, r5
 80044f4:	040b      	lsls	r3, r1, #16
 80044f6:	4621      	mov	r1, r4
 80044f8:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80044fc:	4621      	mov	r1, r4
 80044fe:	040a      	lsls	r2, r1, #16
 8004500:	4610      	mov	r0, r2
 8004502:	4619      	mov	r1, r3
 8004504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004506:	2200      	movs	r2, #0
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800450a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800450c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004510:	f7fc fbd4 	bl	8000cbc <__aeabi_uldivmod>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4613      	mov	r3, r2
 800451a:	647b      	str	r3, [r7, #68]	@ 0x44
 800451c:	e05c      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451e:	4b3a      	ldr	r3, [pc, #232]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	099b      	lsrs	r3, r3, #6
 8004524:	2200      	movs	r2, #0
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	627a      	str	r2, [r7, #36]	@ 0x24
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800453a:	4622      	mov	r2, r4
 800453c:	462b      	mov	r3, r5
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	0159      	lsls	r1, r3, #5
 8004548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454c:	0150      	lsls	r0, r2, #5
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4621      	mov	r1, r4
 8004554:	ebb2 0a01 	subs.w	sl, r2, r1
 8004558:	4629      	mov	r1, r5
 800455a:	eb63 0b01 	sbc.w	fp, r3, r1
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800456a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800456e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004572:	ebb2 080a 	subs.w	r8, r2, sl
 8004576:	eb63 090b 	sbc.w	r9, r3, fp
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004586:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458e:	4690      	mov	r8, r2
 8004590:	4699      	mov	r9, r3
 8004592:	4623      	mov	r3, r4
 8004594:	eb18 0303 	adds.w	r3, r8, r3
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	462b      	mov	r3, r5
 800459c:	eb49 0303 	adc.w	r3, r9, r3
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ae:	4629      	mov	r1, r5
 80045b0:	028b      	lsls	r3, r1, #10
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b8:	4621      	mov	r1, r4
 80045ba:	028a      	lsls	r2, r1, #10
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c2:	2200      	movs	r2, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	617a      	str	r2, [r7, #20]
 80045c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045cc:	f7fc fb76 	bl	8000cbc <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	0c1b      	lsrs	r3, r3, #16
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 80045e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80045f2:	e002      	b.n	80045fa <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80045f6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80045f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3748      	adds	r7, #72	@ 0x48
 8004600:	46bd      	mov	sp, r7
 8004602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	00f42400 	.word	0x00f42400

08004610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_RCC_GetHCLKFreq+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000004 	.word	0x20000004

08004628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800462c:	f7ff fff0 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0a9b      	lsrs	r3, r3, #10
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	@ (800464c <HAL_RCC_GetPCLK1Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	0801aecc 	.word	0x0801aecc

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004654:	f7ff ffdc 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0b5b      	lsrs	r3, r3, #13
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	0801aecc 	.word	0x0801aecc

08004678 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	220f      	movs	r2, #15
 8004686:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004688:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <HAL_RCC_GetClockConfig+0x5c>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0203 	and.w	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004694:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046a0:	4b0c      	ldr	r3, [pc, #48]	@ (80046d4 <HAL_RCC_GetClockConfig+0x5c>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <HAL_RCC_GetClockConfig+0x5c>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	08db      	lsrs	r3, r3, #3
 80046b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046ba:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <HAL_RCC_GetClockConfig+0x60>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	601a      	str	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40023c00 	.word	0x40023c00

080046dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e273      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d075      	beq.n	80047e6 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046fa:	4b88      	ldr	r3, [pc, #544]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b04      	cmp	r3, #4
 8004704:	d00c      	beq.n	8004720 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004706:	4b85      	ldr	r3, [pc, #532]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
        || \
 800470e:	2b08      	cmp	r3, #8
 8004710:	d112      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b82      	ldr	r3, [pc, #520]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b7e      	ldr	r3, [pc, #504]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x108>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d157      	bne.n	80047e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e24e      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x74>
 8004742:	4b76      	ldr	r3, [pc, #472]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a75      	ldr	r2, [pc, #468]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e01d      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x98>
 800475a:	4b70      	ldr	r3, [pc, #448]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6f      	ldr	r2, [pc, #444]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b6d      	ldr	r3, [pc, #436]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6c      	ldr	r2, [pc, #432]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0xb0>
 8004774:	4b69      	ldr	r3, [pc, #420]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a68      	ldr	r2, [pc, #416]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	4b66      	ldr	r3, [pc, #408]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a65      	ldr	r2, [pc, #404]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800478a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe fe60 	bl	8003458 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800479c:	f7fe fe5c 	bl	8003458 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e213      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b5b      	ldr	r3, [pc, #364]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0xc0>
 80047ba:	e014      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe fe4c 	bl	8003458 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe fe48 	bl	8003458 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1ff      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d6:	4b51      	ldr	r3, [pc, #324]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0xe8>
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d063      	beq.n	80048ba <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047f2:	4b4a      	ldr	r3, [pc, #296]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fe:	4b47      	ldr	r3, [pc, #284]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
        || \
 8004806:	2b08      	cmp	r3, #8
 8004808:	d11c      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b44      	ldr	r3, [pc, #272]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	4b41      	ldr	r3, [pc, #260]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e1d3      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b3b      	ldr	r3, [pc, #236]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4937      	ldr	r1, [pc, #220]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	e03a      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484c:	4b34      	ldr	r3, [pc, #208]	@ (8004920 <HAL_RCC_OscConfig+0x244>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004852:	f7fe fe01 	bl	8003458 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485a:	f7fe fdfd 	bl	8003458 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1b4      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486c:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b28      	ldr	r3, [pc, #160]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4925      	ldr	r1, [pc, #148]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	e015      	b.n	80048ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488e:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <HAL_RCC_OscConfig+0x244>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fe fde0 	bl	8003458 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489c:	f7fe fddc 	bl	8003458 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e193      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ae:	4b1b      	ldr	r3, [pc, #108]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d036      	beq.n	8004934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d016      	beq.n	80048fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	4b15      	ldr	r3, [pc, #84]	@ (8004924 <HAL_RCC_OscConfig+0x248>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d4:	f7fe fdc0 	bl	8003458 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fe fdbc 	bl	8003458 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e173      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <HAL_RCC_OscConfig+0x240>)
 80048f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x200>
 80048fa:	e01b      	b.n	8004934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fc:	4b09      	ldr	r3, [pc, #36]	@ (8004924 <HAL_RCC_OscConfig+0x248>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004902:	f7fe fda9 	bl	8003458 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	e00e      	b.n	8004928 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490a:	f7fe fda5 	bl	8003458 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d907      	bls.n	8004928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e15c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
 800491c:	40023800 	.word	0x40023800
 8004920:	42470000 	.word	0x42470000
 8004924:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b8a      	ldr	r3, [pc, #552]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ea      	bne.n	800490a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8097 	beq.w	8004a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004946:	4b83      	ldr	r3, [pc, #524]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	4b7f      	ldr	r3, [pc, #508]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	@ 0x40
 8004962:	4b7c      	ldr	r3, [pc, #496]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b79      	ldr	r3, [pc, #484]	@ (8004b58 <HAL_RCC_OscConfig+0x47c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d118      	bne.n	80049b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497e:	4b76      	ldr	r3, [pc, #472]	@ (8004b58 <HAL_RCC_OscConfig+0x47c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a75      	ldr	r2, [pc, #468]	@ (8004b58 <HAL_RCC_OscConfig+0x47c>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498a:	f7fe fd65 	bl	8003458 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fe fd61 	bl	8003458 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e118      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b58 <HAL_RCC_OscConfig+0x47c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x2ea>
 80049b8:	4b66      	ldr	r3, [pc, #408]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a65      	ldr	r2, [pc, #404]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c4:	e01c      	b.n	8004a00 <HAL_RCC_OscConfig+0x324>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x30c>
 80049ce:	4b61      	ldr	r3, [pc, #388]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d2:	4a60      	ldr	r2, [pc, #384]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049d4:	f043 0304 	orr.w	r3, r3, #4
 80049d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049da:	4b5e      	ldr	r3, [pc, #376]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	4a5d      	ldr	r2, [pc, #372]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e6:	e00b      	b.n	8004a00 <HAL_RCC_OscConfig+0x324>
 80049e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ec:	4a59      	ldr	r2, [pc, #356]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f4:	4b57      	ldr	r3, [pc, #348]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f8:	4a56      	ldr	r2, [pc, #344]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 80049fa:	f023 0304 	bic.w	r3, r3, #4
 80049fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fe fd26 	bl	8003458 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fe fd22 	bl	8003458 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e0d7      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a26:	4b4b      	ldr	r3, [pc, #300]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0ee      	beq.n	8004a10 <HAL_RCC_OscConfig+0x334>
 8004a32:	e014      	b.n	8004a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fe fd10 	bl	8003458 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fe fd0c 	bl	8003458 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e0c1      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	4b40      	ldr	r3, [pc, #256]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d105      	bne.n	8004a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a64:	4b3b      	ldr	r3, [pc, #236]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	4a3a      	ldr	r2, [pc, #232]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80ad 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a7a:	4b36      	ldr	r3, [pc, #216]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d060      	beq.n	8004b48 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d145      	bne.n	8004b1a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8e:	4b33      	ldr	r3, [pc, #204]	@ (8004b5c <HAL_RCC_OscConfig+0x480>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe fce0 	bl	8003458 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fe fcdc 	bl	8003458 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e093      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	4b29      	ldr	r3, [pc, #164]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae4:	071b      	lsls	r3, r3, #28
 8004ae6:	491b      	ldr	r1, [pc, #108]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aec:	4b1b      	ldr	r3, [pc, #108]	@ (8004b5c <HAL_RCC_OscConfig+0x480>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af2:	f7fe fcb1 	bl	8003458 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afa:	f7fe fcad 	bl	8003458 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e064      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b0c:	4b11      	ldr	r3, [pc, #68]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCC_OscConfig+0x41e>
 8004b18:	e05c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1a:	4b10      	ldr	r3, [pc, #64]	@ (8004b5c <HAL_RCC_OscConfig+0x480>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe fc9a 	bl	8003458 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7fe fc96 	bl	8003458 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e04d      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_RCC_OscConfig+0x478>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x44c>
 8004b46:	e045      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e040      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40007000 	.word	0x40007000
 8004b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b60:	4b1f      	ldr	r3, [pc, #124]	@ (8004be0 <HAL_RCC_OscConfig+0x504>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d030      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d129      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d122      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b90:	4013      	ands	r3, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d119      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba6:	085b      	lsrs	r3, r3, #1
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d10f      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800

08004be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e041      	b.n	8004c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f839 	bl	8004c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f000 f9c0 	bl	8004fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d001      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e04e      	b.n	8004d4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a23      	ldr	r2, [pc, #140]	@ (8004d5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cda:	d01d      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1e      	ldr	r2, [pc, #120]	@ (8004d64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a19      	ldr	r2, [pc, #100]	@ (8004d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a18      	ldr	r2, [pc, #96]	@ (8004d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d111      	bne.n	8004d3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d010      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	e007      	b.n	8004d4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40001800 	.word	0x40001800

08004d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d020      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0202 	mvn.w	r2, #2
 8004dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8d2 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8c4 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f8d5 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d020      	beq.n	8004e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0204 	mvn.w	r2, #4
 8004df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8ac 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f89e 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f8af 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0208 	mvn.w	r2, #8
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f886 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f878 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f889 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0210 	mvn.w	r2, #16
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2208      	movs	r2, #8
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f860 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f852 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f863 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00c      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0201 	mvn.w	r2, #1
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fd f890 	bl	8002004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00c      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f906 	bl	8005114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00c      	beq.n	8004f2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f834 	bl	8004f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0220 	mvn.w	r2, #32
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f8d8 	bl	8005100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a46      	ldr	r2, [pc, #280]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a43      	ldr	r2, [pc, #268]	@ (80050d8 <TIM_Base_SetConfig+0x130>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a42      	ldr	r2, [pc, #264]	@ (80050dc <TIM_Base_SetConfig+0x134>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a41      	ldr	r2, [pc, #260]	@ (80050e0 <TIM_Base_SetConfig+0x138>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a40      	ldr	r2, [pc, #256]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a35      	ldr	r2, [pc, #212]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005008:	d027      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a32      	ldr	r2, [pc, #200]	@ (80050d8 <TIM_Base_SetConfig+0x130>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d023      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a31      	ldr	r2, [pc, #196]	@ (80050dc <TIM_Base_SetConfig+0x134>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01f      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a30      	ldr	r2, [pc, #192]	@ (80050e0 <TIM_Base_SetConfig+0x138>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2f      	ldr	r2, [pc, #188]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d017      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2e      	ldr	r2, [pc, #184]	@ (80050e8 <TIM_Base_SetConfig+0x140>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2d      	ldr	r2, [pc, #180]	@ (80050ec <TIM_Base_SetConfig+0x144>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00f      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2c      	ldr	r2, [pc, #176]	@ (80050f0 <TIM_Base_SetConfig+0x148>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2b      	ldr	r2, [pc, #172]	@ (80050f4 <TIM_Base_SetConfig+0x14c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2a      	ldr	r2, [pc, #168]	@ (80050f8 <TIM_Base_SetConfig+0x150>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a29      	ldr	r2, [pc, #164]	@ (80050fc <TIM_Base_SetConfig+0x154>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a10      	ldr	r2, [pc, #64]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a12      	ldr	r2, [pc, #72]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d103      	bne.n	80050a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	611a      	str	r2, [r3, #16]
  }
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40010400 	.word	0x40010400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800
 80050f4:	40001800 	.word	0x40001800
 80050f8:	40001c00 	.word	0x40001c00
 80050fc:	40002000 	.word	0x40002000

08005100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e042      	b.n	80051c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fd fac0 	bl	80026d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2224      	movs	r2, #36	@ 0x24
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800516a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 ffc9 	bl	8006104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08c      	sub	sp, #48	@ 0x30
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d156      	bne.n	8005290 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_UART_Transmit_DMA+0x26>
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e04f      	b.n	8005292 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2221      	movs	r2, #33	@ 0x21
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	4a21      	ldr	r2, [pc, #132]	@ (800529c <HAL_UART_Transmit_DMA+0xd4>)
 8005218:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521e:	4a20      	ldr	r2, [pc, #128]	@ (80052a0 <HAL_UART_Transmit_DMA+0xd8>)
 8005220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005226:	4a1f      	ldr	r2, [pc, #124]	@ (80052a4 <HAL_UART_Transmit_DMA+0xdc>)
 8005228:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	2200      	movs	r2, #0
 8005230:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3304      	adds	r3, #4
 8005246:	461a      	mov	r2, r3
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	f7fe faa1 	bl	8003790 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005256:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	617b      	str	r3, [r7, #20]
   return(result);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005278:	627a      	str	r2, [r7, #36]	@ 0x24
 800527a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6a39      	ldr	r1, [r7, #32]
 800527e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	61fb      	str	r3, [r7, #28]
   return(result);
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3730      	adds	r7, #48	@ 0x30
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	08005991 	.word	0x08005991
 80052a0:	08005a2b 	.word	0x08005a2b
 80052a4:	08005baf 	.word	0x08005baf

080052a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d112      	bne.n	80052e8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_UART_Receive_DMA+0x26>
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00b      	b.n	80052ea <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052d8:	88fb      	ldrh	r3, [r7, #6]
 80052da:	461a      	mov	r2, r3
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fcb0 	bl	8005c44 <UART_Start_Receive_DMA>
 80052e4:	4603      	mov	r3, r0
 80052e6:	e000      	b.n	80052ea <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80052e8:	2302      	movs	r3, #2
  }
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b090      	sub	sp, #64	@ 0x40
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052fa:	2300      	movs	r3, #0
 80052fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005308:	2b80      	cmp	r3, #128	@ 0x80
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b21      	cmp	r3, #33	@ 0x21
 800531e:	d128      	bne.n	8005372 <HAL_UART_DMAStop+0x80>
 8005320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d025      	beq.n	8005372 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	623b      	str	r3, [r7, #32]
   return(result);
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800533c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3314      	adds	r3, #20
 8005344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005346:	633a      	str	r2, [r7, #48]	@ 0x30
 8005348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800534c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e5      	bne.n	8005326 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fa6a 	bl	8003840 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fd03 	bl	8005d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b22      	cmp	r3, #34	@ 0x22
 8005392:	d128      	bne.n	80053e6 <HAL_UART_DMAStop+0xf4>
 8005394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d025      	beq.n	80053e6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3314      	adds	r3, #20
 80053a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053ba:	61fa      	str	r2, [r7, #28]
 80053bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	617b      	str	r3, [r7, #20]
   return(result);
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e5      	bne.n	800539a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fa30 	bl	8003840 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fcf1 	bl	8005dc8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3740      	adds	r7, #64	@ 0x40
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b0ba      	sub	sp, #232	@ 0xe8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005416:	2300      	movs	r3, #0
 8005418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800541c:	2300      	movs	r3, #0
 800541e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800542e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543a:	f003 0320 	and.w	r3, r3, #32
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_UART_IRQHandler+0x66>
 8005442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fd99 	bl	8005f86 <UART_Receive_IT>
      return;
 8005454:	e25b      	b.n	800590e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80de 	beq.w	800561c <HAL_UART_IRQHandler+0x22c>
 8005460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005470:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80d1 	beq.w	800561c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_UART_IRQHandler+0xae>
 8005486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800548a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_UART_IRQHandler+0xd2>
 80054aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ba:	f043 0202 	orr.w	r2, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_UART_IRQHandler+0xf6>
 80054ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	f043 0204 	orr.w	r2, r3, #4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d011      	beq.n	8005516 <HAL_UART_IRQHandler+0x126>
 80054f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d105      	bne.n	800550a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550e:	f043 0208 	orr.w	r2, r3, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 81f2 	beq.w	8005904 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_UART_IRQHandler+0x14e>
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fd24 	bl	8005f86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005548:	2b40      	cmp	r3, #64	@ 0x40
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <HAL_UART_IRQHandler+0x17a>
 8005562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d04f      	beq.n	800560a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fc2c 	bl	8005dc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557a:	2b40      	cmp	r3, #64	@ 0x40
 800557c:	d141      	bne.n	8005602 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3314      	adds	r3, #20
 8005584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800559c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3314      	adds	r3, #20
 80055a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80055aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80055ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80055b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1d9      	bne.n	800557e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d013      	beq.n	80055fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d6:	4a7e      	ldr	r2, [pc, #504]	@ (80057d0 <HAL_UART_IRQHandler+0x3e0>)
 80055d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe f99e 	bl	8003920 <HAL_DMA_Abort_IT>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d016      	beq.n	8005618 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055f4:	4610      	mov	r0, r2
 80055f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f8:	e00e      	b.n	8005618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f9b2 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	e00a      	b.n	8005618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f9ae 	bl	8005964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	e006      	b.n	8005618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9aa 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005616:	e175      	b.n	8005904 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	bf00      	nop
    return;
 800561a:	e173      	b.n	8005904 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	2b01      	cmp	r3, #1
 8005622:	f040 814f 	bne.w	80058c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8148 	beq.w	80058c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8141 	beq.w	80058c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005662:	2b40      	cmp	r3, #64	@ 0x40
 8005664:	f040 80b6 	bne.w	80057d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8145 	beq.w	8005908 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005686:	429a      	cmp	r2, r3
 8005688:	f080 813e 	bcs.w	8005908 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005692:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569e:	f000 8088 	beq.w	80057b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1d9      	bne.n	80056a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005712:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005716:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800571a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e1      	bne.n	80056ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3314      	adds	r3, #20
 8005730:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800573a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800573c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3314      	adds	r3, #20
 800574a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800574e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005750:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005754:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800575c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e3      	bne.n	800572a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005782:	f023 0310 	bic.w	r3, r3, #16
 8005786:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005794:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005796:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800579a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80057a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e3      	bne.n	8005770 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fe f847 	bl	8003840 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f8d5 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ce:	e09b      	b.n	8005908 <HAL_UART_IRQHandler+0x518>
 80057d0:	08005e8f 	.word	0x08005e8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 808e 	beq.w	800590c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 8089 	beq.w	800590c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	330c      	adds	r3, #12
 8005800:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005804:	e853 3f00 	ldrex	r3, [r3]
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800581e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005820:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800582c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e3      	bne.n	80057fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3314      	adds	r3, #20
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	623b      	str	r3, [r7, #32]
   return(result);
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005856:	633a      	str	r2, [r7, #48]	@ 0x30
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800585c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e3      	bne.n	8005832 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	60fb      	str	r3, [r7, #12]
   return(result);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0310 	bic.w	r3, r3, #16
 800588e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800589c:	61fa      	str	r2, [r7, #28]
 800589e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	69b9      	ldr	r1, [r7, #24]
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	617b      	str	r3, [r7, #20]
   return(result);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e3      	bne.n	8005878 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f85b 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058c2:	e023      	b.n	800590c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d009      	beq.n	80058e4 <HAL_UART_IRQHandler+0x4f4>
 80058d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 faea 	bl	8005eb6 <UART_Transmit_IT>
    return;
 80058e2:	e014      	b.n	800590e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00e      	beq.n	800590e <HAL_UART_IRQHandler+0x51e>
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d008      	beq.n	800590e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fb2a 	bl	8005f56 <UART_EndTransmit_IT>
    return;
 8005902:	e004      	b.n	800590e <HAL_UART_IRQHandler+0x51e>
    return;
 8005904:	bf00      	nop
 8005906:	e002      	b.n	800590e <HAL_UART_IRQHandler+0x51e>
      return;
 8005908:	bf00      	nop
 800590a:	e000      	b.n	800590e <HAL_UART_IRQHandler+0x51e>
      return;
 800590c:	bf00      	nop
  }
}
 800590e:	37e8      	adds	r7, #232	@ 0xe8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b090      	sub	sp, #64	@ 0x40
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d137      	bne.n	8005a1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	2200      	movs	r2, #0
 80059b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	623b      	str	r3, [r7, #32]
   return(result);
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3314      	adds	r3, #20
 80059d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80059fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	330c      	adds	r3, #12
 8005a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a06:	61fa      	str	r2, [r7, #28]
 8005a08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	69b9      	ldr	r1, [r7, #24]
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	617b      	str	r3, [r7, #20]
   return(result);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a1a:	e002      	b.n	8005a22 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a1e:	f7ff ff79 	bl	8005914 <HAL_UART_TxCpltCallback>
}
 8005a22:	bf00      	nop
 8005a24:	3740      	adds	r7, #64	@ 0x40
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff ff75 	bl	8005928 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b09c      	sub	sp, #112	@ 0x70
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d172      	bne.n	8005b48 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a64:	2200      	movs	r2, #0
 8005a66:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ab4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3314      	adds	r3, #20
 8005aba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005abc:	647a      	str	r2, [r7, #68]	@ 0x44
 8005abe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005af0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d119      	bne.n	8005b48 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0310 	bic.w	r3, r3, #16
 8005b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	330c      	adds	r3, #12
 8005b32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b34:	61fa      	str	r2, [r7, #28]
 8005b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	69b9      	ldr	r1, [r7, #24]
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	617b      	str	r3, [r7, #20]
   return(result);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e5      	bne.n	8005b14 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d106      	bne.n	8005b64 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b5e:	f7ff ff0b 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b62:	e002      	b.n	8005b6a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b64:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b66:	f7ff fee9 	bl	800593c <HAL_UART_RxCpltCallback>
}
 8005b6a:	bf00      	nop
 8005b6c:	3770      	adds	r7, #112	@ 0x70
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d108      	bne.n	8005ba0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	4619      	mov	r1, r3
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff feed 	bl	8005978 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b9e:	e002      	b.n	8005ba6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fed5 	bl	8005950 <HAL_UART_RxHalfCpltCallback>
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bca:	2b80      	cmp	r3, #128	@ 0x80
 8005bcc:	bf0c      	ite	eq
 8005bce:	2301      	moveq	r3, #1
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b21      	cmp	r3, #33	@ 0x21
 8005be0:	d108      	bne.n	8005bf4 <UART_DMAError+0x46>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2200      	movs	r2, #0
 8005bec:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f000 f8c2 	bl	8005d78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfe:	2b40      	cmp	r3, #64	@ 0x40
 8005c00:	bf0c      	ite	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	2300      	movne	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b22      	cmp	r3, #34	@ 0x22
 8005c14:	d108      	bne.n	8005c28 <UART_DMAError+0x7a>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005c22:	68b8      	ldr	r0, [r7, #8]
 8005c24:	f000 f8d0 	bl	8005dc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2c:	f043 0210 	orr.w	r2, r3, #16
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c34:	68b8      	ldr	r0, [r7, #8]
 8005c36:	f7ff fe95 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b098      	sub	sp, #96	@ 0x60
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2222      	movs	r2, #34	@ 0x22
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c70:	4a3e      	ldr	r2, [pc, #248]	@ (8005d6c <UART_Start_Receive_DMA+0x128>)
 8005c72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c78:	4a3d      	ldr	r2, [pc, #244]	@ (8005d70 <UART_Start_Receive_DMA+0x12c>)
 8005c7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	4a3c      	ldr	r2, [pc, #240]	@ (8005d74 <UART_Start_Receive_DMA+0x130>)
 8005c82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	2200      	movs	r2, #0
 8005c8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	f7fd fd74 	bl	8003790 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d019      	beq.n	8005cfa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ce6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e5      	bne.n	8005cc6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3314      	adds	r3, #20
 8005d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d1a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e5      	bne.n	8005cfa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3314      	adds	r3, #20
 8005d34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d44:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3314      	adds	r3, #20
 8005d4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6a39      	ldr	r1, [r7, #32]
 8005d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e5      	bne.n	8005d2e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3760      	adds	r7, #96	@ 0x60
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08005a47 	.word	0x08005a47
 8005d70:	08005b73 	.word	0x08005b73
 8005d74:	08005baf 	.word	0x08005baf

08005d78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b089      	sub	sp, #36	@ 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	61ba      	str	r2, [r7, #24]
 8005da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	613b      	str	r3, [r7, #16]
   return(result);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e5      	bne.n	8005d80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005dbc:	bf00      	nop
 8005dbe:	3724      	adds	r7, #36	@ 0x24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b095      	sub	sp, #84	@ 0x54
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dda:	e853 3f00 	ldrex	r3, [r3]
 8005dde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005df0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005df6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005df8:	e841 2300 	strex	r3, r2, [r1]
 8005dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1e5      	bne.n	8005dd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3314      	adds	r3, #20
 8005e0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f023 0301 	bic.w	r3, r3, #1
 8005e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3314      	adds	r3, #20
 8005e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e5      	bne.n	8005e04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d119      	bne.n	8005e74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f023 0310 	bic.w	r3, r3, #16
 8005e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e60:	61ba      	str	r2, [r7, #24]
 8005e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6979      	ldr	r1, [r7, #20]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e82:	bf00      	nop
 8005e84:	3754      	adds	r7, #84	@ 0x54
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff fd5b 	bl	8005964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b21      	cmp	r3, #33	@ 0x21
 8005ec8:	d13e      	bne.n	8005f48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	d114      	bne.n	8005efe <UART_Transmit_IT+0x48>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d110      	bne.n	8005efe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ef0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	621a      	str	r2, [r3, #32]
 8005efc:	e008      	b.n	8005f10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6211      	str	r1, [r2, #32]
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10f      	bne.n	8005f44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e000      	b.n	8005f4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f48:	2302      	movs	r3, #2
  }
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fccc 	bl	8005914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b08c      	sub	sp, #48	@ 0x30
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b22      	cmp	r3, #34	@ 0x22
 8005f98:	f040 80ae 	bne.w	80060f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa4:	d117      	bne.n	8005fd6 <UART_Receive_IT+0x50>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d113      	bne.n	8005fd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fce:	1c9a      	adds	r2, r3, #2
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fd4:	e026      	b.n	8006024 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe8:	d007      	beq.n	8005ffa <UART_Receive_IT+0x74>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <UART_Receive_IT+0x82>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e008      	b.n	800601a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006018:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29b      	uxth	r3, r3
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4619      	mov	r1, r3
 8006032:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006034:	2b00      	cmp	r3, #0
 8006036:	d15d      	bne.n	80060f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0220 	bic.w	r2, r2, #32
 8006046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607a:	2b01      	cmp	r3, #1
 800607c:	d135      	bne.n	80060ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	613b      	str	r3, [r7, #16]
   return(result);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f023 0310 	bic.w	r3, r3, #16
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a4:	623a      	str	r2, [r7, #32]
 80060a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	6a3a      	ldr	r2, [r7, #32]
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e5      	bne.n	8006084 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0310 	and.w	r3, r3, #16
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d10a      	bne.n	80060dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff fc48 	bl	8005978 <HAL_UARTEx_RxEventCallback>
 80060e8:	e002      	b.n	80060f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff fc26 	bl	800593c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e002      	b.n	80060fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3730      	adds	r7, #48	@ 0x30
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006108:	b0c0      	sub	sp, #256	@ 0x100
 800610a:	af00      	add	r7, sp, #0
 800610c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	68d9      	ldr	r1, [r3, #12]
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	ea40 0301 	orr.w	r3, r0, r1
 800612c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	431a      	orrs	r2, r3
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	431a      	orrs	r2, r3
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800615c:	f021 010c 	bic.w	r1, r1, #12
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800616a:	430b      	orrs	r3, r1
 800616c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800617a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617e:	6999      	ldr	r1, [r3, #24]
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	ea40 0301 	orr.w	r3, r0, r1
 800618a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b8f      	ldr	r3, [pc, #572]	@ (80063d0 <UART_SetConfig+0x2cc>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d005      	beq.n	80061a4 <UART_SetConfig+0xa0>
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b8d      	ldr	r3, [pc, #564]	@ (80063d4 <UART_SetConfig+0x2d0>)
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d104      	bne.n	80061ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061a4:	f7fe fa54 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 80061a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061ac:	e003      	b.n	80061b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ae:	f7fe fa3b 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 80061b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061c0:	f040 810c 	bne.w	80063dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061d6:	4622      	mov	r2, r4
 80061d8:	462b      	mov	r3, r5
 80061da:	1891      	adds	r1, r2, r2
 80061dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061de:	415b      	adcs	r3, r3
 80061e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061e6:	4621      	mov	r1, r4
 80061e8:	eb12 0801 	adds.w	r8, r2, r1
 80061ec:	4629      	mov	r1, r5
 80061ee:	eb43 0901 	adc.w	r9, r3, r1
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006206:	4690      	mov	r8, r2
 8006208:	4699      	mov	r9, r3
 800620a:	4623      	mov	r3, r4
 800620c:	eb18 0303 	adds.w	r3, r8, r3
 8006210:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006214:	462b      	mov	r3, r5
 8006216:	eb49 0303 	adc.w	r3, r9, r3
 800621a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800622a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800622e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006232:	460b      	mov	r3, r1
 8006234:	18db      	adds	r3, r3, r3
 8006236:	653b      	str	r3, [r7, #80]	@ 0x50
 8006238:	4613      	mov	r3, r2
 800623a:	eb42 0303 	adc.w	r3, r2, r3
 800623e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006248:	f7fa fd38 	bl	8000cbc <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4b61      	ldr	r3, [pc, #388]	@ (80063d8 <UART_SetConfig+0x2d4>)
 8006252:	fba3 2302 	umull	r2, r3, r3, r2
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	011c      	lsls	r4, r3, #4
 800625a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006264:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800626c:	4642      	mov	r2, r8
 800626e:	464b      	mov	r3, r9
 8006270:	1891      	adds	r1, r2, r2
 8006272:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006274:	415b      	adcs	r3, r3
 8006276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800627c:	4641      	mov	r1, r8
 800627e:	eb12 0a01 	adds.w	sl, r2, r1
 8006282:	4649      	mov	r1, r9
 8006284:	eb43 0b01 	adc.w	fp, r3, r1
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800629c:	4692      	mov	sl, r2
 800629e:	469b      	mov	fp, r3
 80062a0:	4643      	mov	r3, r8
 80062a2:	eb1a 0303 	adds.w	r3, sl, r3
 80062a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062aa:	464b      	mov	r3, r9
 80062ac:	eb4b 0303 	adc.w	r3, fp, r3
 80062b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062c8:	460b      	mov	r3, r1
 80062ca:	18db      	adds	r3, r3, r3
 80062cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80062ce:	4613      	mov	r3, r2
 80062d0:	eb42 0303 	adc.w	r3, r2, r3
 80062d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062de:	f7fa fced 	bl	8000cbc <__aeabi_uldivmod>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	4b3b      	ldr	r3, [pc, #236]	@ (80063d8 <UART_SetConfig+0x2d4>)
 80062ea:	fba3 2301 	umull	r2, r3, r3, r1
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	2264      	movs	r2, #100	@ 0x64
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	1acb      	subs	r3, r1, r3
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062fe:	4b36      	ldr	r3, [pc, #216]	@ (80063d8 <UART_SetConfig+0x2d4>)
 8006300:	fba3 2302 	umull	r2, r3, r3, r2
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800630c:	441c      	add	r4, r3
 800630e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006312:	2200      	movs	r2, #0
 8006314:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006318:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800631c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	1891      	adds	r1, r2, r2
 8006326:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006328:	415b      	adcs	r3, r3
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800632c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006330:	4641      	mov	r1, r8
 8006332:	1851      	adds	r1, r2, r1
 8006334:	6339      	str	r1, [r7, #48]	@ 0x30
 8006336:	4649      	mov	r1, r9
 8006338:	414b      	adcs	r3, r1
 800633a:	637b      	str	r3, [r7, #52]	@ 0x34
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006348:	4659      	mov	r1, fp
 800634a:	00cb      	lsls	r3, r1, #3
 800634c:	4651      	mov	r1, sl
 800634e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006352:	4651      	mov	r1, sl
 8006354:	00ca      	lsls	r2, r1, #3
 8006356:	4610      	mov	r0, r2
 8006358:	4619      	mov	r1, r3
 800635a:	4603      	mov	r3, r0
 800635c:	4642      	mov	r2, r8
 800635e:	189b      	adds	r3, r3, r2
 8006360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006364:	464b      	mov	r3, r9
 8006366:	460a      	mov	r2, r1
 8006368:	eb42 0303 	adc.w	r3, r2, r3
 800636c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800637c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006384:	460b      	mov	r3, r1
 8006386:	18db      	adds	r3, r3, r3
 8006388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800638a:	4613      	mov	r3, r2
 800638c:	eb42 0303 	adc.w	r3, r2, r3
 8006390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800639a:	f7fa fc8f 	bl	8000cbc <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <UART_SetConfig+0x2d4>)
 80063a4:	fba3 1302 	umull	r1, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2164      	movs	r1, #100	@ 0x64
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	3332      	adds	r3, #50	@ 0x32
 80063b6:	4a08      	ldr	r2, [pc, #32]	@ (80063d8 <UART_SetConfig+0x2d4>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	f003 0207 	and.w	r2, r3, #7
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4422      	add	r2, r4
 80063ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063cc:	e106      	b.n	80065dc <UART_SetConfig+0x4d8>
 80063ce:	bf00      	nop
 80063d0:	40011000 	.word	0x40011000
 80063d4:	40011400 	.word	0x40011400
 80063d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80063ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80063ee:	4642      	mov	r2, r8
 80063f0:	464b      	mov	r3, r9
 80063f2:	1891      	adds	r1, r2, r2
 80063f4:	6239      	str	r1, [r7, #32]
 80063f6:	415b      	adcs	r3, r3
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063fe:	4641      	mov	r1, r8
 8006400:	1854      	adds	r4, r2, r1
 8006402:	4649      	mov	r1, r9
 8006404:	eb43 0501 	adc.w	r5, r3, r1
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	00eb      	lsls	r3, r5, #3
 8006412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006416:	00e2      	lsls	r2, r4, #3
 8006418:	4614      	mov	r4, r2
 800641a:	461d      	mov	r5, r3
 800641c:	4643      	mov	r3, r8
 800641e:	18e3      	adds	r3, r4, r3
 8006420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006424:	464b      	mov	r3, r9
 8006426:	eb45 0303 	adc.w	r3, r5, r3
 800642a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800643a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800644a:	4629      	mov	r1, r5
 800644c:	008b      	lsls	r3, r1, #2
 800644e:	4621      	mov	r1, r4
 8006450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006454:	4621      	mov	r1, r4
 8006456:	008a      	lsls	r2, r1, #2
 8006458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800645c:	f7fa fc2e 	bl	8000cbc <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4b60      	ldr	r3, [pc, #384]	@ (80065e8 <UART_SetConfig+0x4e4>)
 8006466:	fba3 2302 	umull	r2, r3, r3, r2
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	011c      	lsls	r4, r3, #4
 800646e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006472:	2200      	movs	r2, #0
 8006474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006478:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800647c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006480:	4642      	mov	r2, r8
 8006482:	464b      	mov	r3, r9
 8006484:	1891      	adds	r1, r2, r2
 8006486:	61b9      	str	r1, [r7, #24]
 8006488:	415b      	adcs	r3, r3
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006490:	4641      	mov	r1, r8
 8006492:	1851      	adds	r1, r2, r1
 8006494:	6139      	str	r1, [r7, #16]
 8006496:	4649      	mov	r1, r9
 8006498:	414b      	adcs	r3, r1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a8:	4659      	mov	r1, fp
 80064aa:	00cb      	lsls	r3, r1, #3
 80064ac:	4651      	mov	r1, sl
 80064ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b2:	4651      	mov	r1, sl
 80064b4:	00ca      	lsls	r2, r1, #3
 80064b6:	4610      	mov	r0, r2
 80064b8:	4619      	mov	r1, r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	4642      	mov	r2, r8
 80064be:	189b      	adds	r3, r3, r2
 80064c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064c4:	464b      	mov	r3, r9
 80064c6:	460a      	mov	r2, r1
 80064c8:	eb42 0303 	adc.w	r3, r2, r3
 80064cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80064e8:	4649      	mov	r1, r9
 80064ea:	008b      	lsls	r3, r1, #2
 80064ec:	4641      	mov	r1, r8
 80064ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f2:	4641      	mov	r1, r8
 80064f4:	008a      	lsls	r2, r1, #2
 80064f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064fa:	f7fa fbdf 	bl	8000cbc <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4611      	mov	r1, r2
 8006504:	4b38      	ldr	r3, [pc, #224]	@ (80065e8 <UART_SetConfig+0x4e4>)
 8006506:	fba3 2301 	umull	r2, r3, r3, r1
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	2264      	movs	r2, #100	@ 0x64
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	1acb      	subs	r3, r1, r3
 8006514:	011b      	lsls	r3, r3, #4
 8006516:	3332      	adds	r3, #50	@ 0x32
 8006518:	4a33      	ldr	r2, [pc, #204]	@ (80065e8 <UART_SetConfig+0x4e4>)
 800651a:	fba2 2303 	umull	r2, r3, r2, r3
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006524:	441c      	add	r4, r3
 8006526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800652a:	2200      	movs	r2, #0
 800652c:	673b      	str	r3, [r7, #112]	@ 0x70
 800652e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006530:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006534:	4642      	mov	r2, r8
 8006536:	464b      	mov	r3, r9
 8006538:	1891      	adds	r1, r2, r2
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	415b      	adcs	r3, r3
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006544:	4641      	mov	r1, r8
 8006546:	1851      	adds	r1, r2, r1
 8006548:	6039      	str	r1, [r7, #0]
 800654a:	4649      	mov	r1, r9
 800654c:	414b      	adcs	r3, r1
 800654e:	607b      	str	r3, [r7, #4]
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800655c:	4659      	mov	r1, fp
 800655e:	00cb      	lsls	r3, r1, #3
 8006560:	4651      	mov	r1, sl
 8006562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006566:	4651      	mov	r1, sl
 8006568:	00ca      	lsls	r2, r1, #3
 800656a:	4610      	mov	r0, r2
 800656c:	4619      	mov	r1, r3
 800656e:	4603      	mov	r3, r0
 8006570:	4642      	mov	r2, r8
 8006572:	189b      	adds	r3, r3, r2
 8006574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006576:	464b      	mov	r3, r9
 8006578:	460a      	mov	r2, r1
 800657a:	eb42 0303 	adc.w	r3, r2, r3
 800657e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	663b      	str	r3, [r7, #96]	@ 0x60
 800658a:	667a      	str	r2, [r7, #100]	@ 0x64
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006598:	4649      	mov	r1, r9
 800659a:	008b      	lsls	r3, r1, #2
 800659c:	4641      	mov	r1, r8
 800659e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065a2:	4641      	mov	r1, r8
 80065a4:	008a      	lsls	r2, r1, #2
 80065a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065aa:	f7fa fb87 	bl	8000cbc <__aeabi_uldivmod>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4b0d      	ldr	r3, [pc, #52]	@ (80065e8 <UART_SetConfig+0x4e4>)
 80065b4:	fba3 1302 	umull	r1, r3, r3, r2
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	2164      	movs	r1, #100	@ 0x64
 80065bc:	fb01 f303 	mul.w	r3, r1, r3
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	3332      	adds	r3, #50	@ 0x32
 80065c6:	4a08      	ldr	r2, [pc, #32]	@ (80065e8 <UART_SetConfig+0x4e4>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	f003 020f 	and.w	r2, r3, #15
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4422      	add	r2, r4
 80065da:	609a      	str	r2, [r3, #8]
}
 80065dc:	bf00      	nop
 80065de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065e2:	46bd      	mov	sp, r7
 80065e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e8:	51eb851f 	.word	0x51eb851f

080065ec <__NVIC_SetPriority>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	6039      	str	r1, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	db0a      	blt.n	8006616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	490c      	ldr	r1, [pc, #48]	@ (8006638 <__NVIC_SetPriority+0x4c>)
 8006606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800660a:	0112      	lsls	r2, r2, #4
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	440b      	add	r3, r1
 8006610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006614:	e00a      	b.n	800662c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4908      	ldr	r1, [pc, #32]	@ (800663c <__NVIC_SetPriority+0x50>)
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	3b04      	subs	r3, #4
 8006624:	0112      	lsls	r2, r2, #4
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	440b      	add	r3, r1
 800662a:	761a      	strb	r2, [r3, #24]
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	e000e100 	.word	0xe000e100
 800663c:	e000ed00 	.word	0xe000ed00

08006640 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006644:	4b05      	ldr	r3, [pc, #20]	@ (800665c <SysTick_Handler+0x1c>)
 8006646:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006648:	f001 fd40 	bl	80080cc <xTaskGetSchedulerState>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d001      	beq.n	8006656 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006652:	f002 fb39 	bl	8008cc8 <xPortSysTickHandler>
  }
}
 8006656:	bf00      	nop
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	e000e010 	.word	0xe000e010

08006660 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006664:	2100      	movs	r1, #0
 8006666:	f06f 0004 	mvn.w	r0, #4
 800666a:	f7ff ffbf 	bl	80065ec <__NVIC_SetPriority>
#endif
}
 800666e:	bf00      	nop
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800667a:	f3ef 8305 	mrs	r3, IPSR
 800667e:	603b      	str	r3, [r7, #0]
  return(result);
 8006680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006686:	f06f 0305 	mvn.w	r3, #5
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	e00c      	b.n	80066a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800668e:	4b0a      	ldr	r3, [pc, #40]	@ (80066b8 <osKernelInitialize+0x44>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006696:	4b08      	ldr	r3, [pc, #32]	@ (80066b8 <osKernelInitialize+0x44>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800669c:	2300      	movs	r3, #0
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	e002      	b.n	80066a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066a8:	687b      	ldr	r3, [r7, #4]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20008a5c 	.word	0x20008a5c

080066bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c2:	f3ef 8305 	mrs	r3, IPSR
 80066c6:	603b      	str	r3, [r7, #0]
  return(result);
 80066c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80066ce:	f06f 0305 	mvn.w	r3, #5
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	e010      	b.n	80066f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <osKernelStart+0x48>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d109      	bne.n	80066f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066de:	f7ff ffbf 	bl	8006660 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066e2:	4b08      	ldr	r3, [pc, #32]	@ (8006704 <osKernelStart+0x48>)
 80066e4:	2202      	movs	r2, #2
 80066e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80066e8:	f001 f87a 	bl	80077e0 <vTaskStartScheduler>
      stat = osOK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e002      	b.n	80066f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80066f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066f8:	687b      	ldr	r3, [r7, #4]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20008a5c 	.word	0x20008a5c

08006708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b08e      	sub	sp, #56	@ 0x38
 800670c:	af04      	add	r7, sp, #16
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006718:	f3ef 8305 	mrs	r3, IPSR
 800671c:	617b      	str	r3, [r7, #20]
  return(result);
 800671e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006720:	2b00      	cmp	r3, #0
 8006722:	d17e      	bne.n	8006822 <osThreadNew+0x11a>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d07b      	beq.n	8006822 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800672a:	2380      	movs	r3, #128	@ 0x80
 800672c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800672e:	2318      	movs	r3, #24
 8006730:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800673a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d045      	beq.n	80067ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <osThreadNew+0x48>
        name = attr->name;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <osThreadNew+0x6e>
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b38      	cmp	r3, #56	@ 0x38
 8006768:	d805      	bhi.n	8006776 <osThreadNew+0x6e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <osThreadNew+0x72>
        return (NULL);
 8006776:	2300      	movs	r3, #0
 8006778:	e054      	b.n	8006824 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <osThreadNew+0xa8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b5b      	cmp	r3, #91	@ 0x5b
 8006798:	d90a      	bls.n	80067b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d006      	beq.n	80067b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <osThreadNew+0xa8>
        mem = 1;
 80067aa:	2301      	movs	r3, #1
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	e010      	b.n	80067d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10c      	bne.n	80067d2 <osThreadNew+0xca>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d108      	bne.n	80067d2 <osThreadNew+0xca>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <osThreadNew+0xca>
          mem = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e001      	b.n	80067d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d110      	bne.n	80067fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067e0:	9202      	str	r2, [sp, #8]
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fe1a 	bl	8007428 <xTaskCreateStatic>
 80067f4:	4603      	mov	r3, r0
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	e013      	b.n	8006822 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d110      	bne.n	8006822 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	b29a      	uxth	r2, r3
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fe68 	bl	80074e8 <xTaskCreate>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d001      	beq.n	8006822 <osThreadNew+0x11a>
            hTask = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006822:	693b      	ldr	r3, [r7, #16]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3728      	adds	r7, #40	@ 0x28
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006834:	f3ef 8305 	mrs	r3, IPSR
 8006838:	60bb      	str	r3, [r7, #8]
  return(result);
 800683a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <osDelay+0x1c>
    stat = osErrorISR;
 8006840:	f06f 0305 	mvn.w	r3, #5
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e007      	b.n	8006858 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 ff8e 	bl	8007774 <vTaskDelay>
    }
  }

  return (stat);
 8006858:	68fb      	ldr	r3, [r7, #12]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4a07      	ldr	r2, [pc, #28]	@ (8006890 <vApplicationGetIdleTaskMemory+0x2c>)
 8006874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	4a06      	ldr	r2, [pc, #24]	@ (8006894 <vApplicationGetIdleTaskMemory+0x30>)
 800687a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2280      	movs	r2, #128	@ 0x80
 8006880:	601a      	str	r2, [r3, #0]
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20008a60 	.word	0x20008a60
 8006894:	20008abc 	.word	0x20008abc

08006898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a07      	ldr	r2, [pc, #28]	@ (80068c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80068a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4a06      	ldr	r2, [pc, #24]	@ (80068c8 <vApplicationGetTimerTaskMemory+0x30>)
 80068ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068b6:	601a      	str	r2, [r3, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	20008cbc 	.word	0x20008cbc
 80068c8:	20008d18 	.word	0x20008d18

080068cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f103 0208 	add.w	r2, r3, #8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f103 0208 	add.w	r2, r3, #8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f103 0208 	add.w	r2, r3, #8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	601a      	str	r2, [r3, #0]
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006984:	d103      	bne.n	800698e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e00c      	b.n	80069a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3308      	adds	r3, #8
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e002      	b.n	800699c <vListInsert+0x2e>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d2f6      	bcs.n	8006996 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6892      	ldr	r2, [r2, #8]
 80069f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6852      	ldr	r2, [r2, #4]
 8006a00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d103      	bne.n	8006a14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	1e5a      	subs	r2, r3, #1
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <xQueueGenericReset+0x2c>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60bb      	str	r3, [r7, #8]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a60:	f002 f8a2 	bl	8008ba8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	3b01      	subs	r3, #1
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	441a      	add	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	22ff      	movs	r2, #255	@ 0xff
 8006aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	22ff      	movs	r2, #255	@ 0xff
 8006aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d114      	bne.n	8006ae0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01a      	beq.n	8006af4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3310      	adds	r3, #16
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 f91a 	bl	8007cfc <xTaskRemoveFromEventList>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d012      	beq.n	8006af4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <xQueueGenericReset+0xd0>)
 8006ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	e009      	b.n	8006af4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3310      	adds	r3, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fef1 	bl	80068cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3324      	adds	r3, #36	@ 0x24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff feec 	bl	80068cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006af4:	f002 f88a 	bl	8008c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006af8:	2301      	movs	r3, #1
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08e      	sub	sp, #56	@ 0x38
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <xQueueGenericCreateStatic+0x56>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <xQueueGenericCreateStatic+0x5a>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueGenericCreateStatic+0x5c>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10b      	bne.n	8006b80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	623b      	str	r3, [r7, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	e7fd      	b.n	8006b7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <xQueueGenericCreateStatic+0x84>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <xQueueGenericCreateStatic+0x88>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <xQueueGenericCreateStatic+0x8a>
 8006b90:	2300      	movs	r3, #0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61fb      	str	r3, [r7, #28]
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	e7fd      	b.n	8006baa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bae:	2350      	movs	r3, #80	@ 0x50
 8006bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b50      	cmp	r3, #80	@ 0x50
 8006bb6:	d00b      	beq.n	8006bd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	61bb      	str	r3, [r7, #24]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006be4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	4613      	mov	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f805 	bl	8006c02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3730      	adds	r7, #48	@ 0x30
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e002      	b.n	8006c24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c30:	2101      	movs	r1, #1
 8006c32:	69b8      	ldr	r0, [r7, #24]
 8006c34:	f7ff fefe 	bl	8006a34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c40:	bf00      	nop
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	@ 0x38
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c56:	2300      	movs	r3, #0
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <xQueueGenericSend+0x34>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <xQueueGenericSend+0x42>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <xQueueGenericSend+0x46>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueGenericSend+0x48>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10b      	bne.n	8006cac <xQueueGenericSend+0x64>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d103      	bne.n	8006cba <xQueueGenericSend+0x72>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <xQueueGenericSend+0x76>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <xQueueGenericSend+0x78>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <xQueueGenericSend+0x94>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	623b      	str	r3, [r7, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	bf00      	nop
 8006cda:	e7fd      	b.n	8006cd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cdc:	f001 f9f6 	bl	80080cc <xTaskGetSchedulerState>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <xQueueGenericSend+0xa4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <xQueueGenericSend+0xa8>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <xQueueGenericSend+0xaa>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xQueueGenericSend+0xc6>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	61fb      	str	r3, [r7, #28]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d0e:	f001 ff4b 	bl	8008ba8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <xQueueGenericSend+0xdc>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d129      	bne.n	8006d78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d2a:	f000 fa0f 	bl	800714c <prvCopyDataToQueue>
 8006d2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d010      	beq.n	8006d5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	3324      	adds	r3, #36	@ 0x24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 ffdd 	bl	8007cfc <xTaskRemoveFromEventList>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d013      	beq.n	8006d70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d48:	4b3f      	ldr	r3, [pc, #252]	@ (8006e48 <xQueueGenericSend+0x200>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	e00a      	b.n	8006d70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d60:	4b39      	ldr	r3, [pc, #228]	@ (8006e48 <xQueueGenericSend+0x200>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d70:	f001 ff4c 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e063      	b.n	8006e40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d103      	bne.n	8006d86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d7e:	f001 ff45 	bl	8008c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e05c      	b.n	8006e40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	4618      	mov	r0, r3
 8006d92:	f001 f83f 	bl	8007e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d96:	2301      	movs	r3, #1
 8006d98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d9a:	f001 ff37 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d9e:	f000 fd87 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006da2:	f001 ff01 	bl	8008ba8 <vPortEnterCritical>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006db2:	d103      	bne.n	8006dbc <xQueueGenericSend+0x174>
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dc2:	b25b      	sxtb	r3, r3
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dc8:	d103      	bne.n	8006dd2 <xQueueGenericSend+0x18a>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dd2:	f001 ff1b 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dd6:	1d3a      	adds	r2, r7, #4
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 f82e 	bl	8007e40 <xTaskCheckForTimeOut>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d124      	bne.n	8006e34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006dea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dec:	f000 faa6 	bl	800733c <prvIsQueueFull>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d018      	beq.n	8006e28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	3310      	adds	r3, #16
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 ff2a 	bl	8007c58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e06:	f000 fa31 	bl	800726c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e0a:	f000 fd5f 	bl	80078cc <xTaskResumeAll>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f af7c 	bne.w	8006d0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e16:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <xQueueGenericSend+0x200>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	e772      	b.n	8006d0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e2a:	f000 fa1f 	bl	800726c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e2e:	f000 fd4d 	bl	80078cc <xTaskResumeAll>
 8006e32:	e76c      	b.n	8006d0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e36:	f000 fa19 	bl	800726c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e3a:	f000 fd47 	bl	80078cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3738      	adds	r7, #56	@ 0x38
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b090      	sub	sp, #64	@ 0x40
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10b      	bne.n	8006e7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <xQueueGenericSendFromISR+0x3e>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <xQueueGenericSendFromISR+0x42>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <xQueueGenericSendFromISR+0x44>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10b      	bne.n	8006eac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ea6:	bf00      	nop
 8006ea8:	bf00      	nop
 8006eaa:	e7fd      	b.n	8006ea8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d103      	bne.n	8006eba <xQueueGenericSendFromISR+0x6e>
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <xQueueGenericSendFromISR+0x72>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <xQueueGenericSendFromISR+0x74>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	623b      	str	r3, [r7, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	e7fd      	b.n	8006ed8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006edc:	f001 ff44 	bl	8008d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ee0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	61fa      	str	r2, [r7, #28]
 8006ef6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d302      	bcc.n	8006f0e <xQueueGenericSendFromISR+0xc2>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d12f      	bne.n	8006f6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	68b9      	ldr	r1, [r7, #8]
 8006f22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f24:	f000 f912 	bl	800714c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f30:	d112      	bne.n	8006f58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d016      	beq.n	8006f68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	3324      	adds	r3, #36	@ 0x24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fedc 	bl	8007cfc <xTaskRemoveFromEventList>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00e      	beq.n	8006f68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e007      	b.n	8006f68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	b25a      	sxtb	r2, r3
 8006f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f6c:	e001      	b.n	8006f72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3740      	adds	r7, #64	@ 0x40
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08c      	sub	sp, #48	@ 0x30
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <xQueueReceive+0x32>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	623b      	str	r3, [r7, #32]
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	e7fd      	b.n	8006fb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d103      	bne.n	8006fc8 <xQueueReceive+0x40>
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <xQueueReceive+0x44>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <xQueueReceive+0x46>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10b      	bne.n	8006fea <xQueueReceive+0x62>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	61fb      	str	r3, [r7, #28]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fea:	f001 f86f 	bl	80080cc <xTaskGetSchedulerState>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <xQueueReceive+0x72>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <xQueueReceive+0x76>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <xQueueReceive+0x78>
 8006ffe:	2300      	movs	r3, #0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <xQueueReceive+0x94>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	61bb      	str	r3, [r7, #24]
}
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	e7fd      	b.n	8007018 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800701c:	f001 fdc4 	bl	8008ba8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01f      	beq.n	800706c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007030:	f000 f8f6 	bl	8007220 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	1e5a      	subs	r2, r3, #1
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00f      	beq.n	8007064 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007046:	3310      	adds	r3, #16
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fe57 	bl	8007cfc <xTaskRemoveFromEventList>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007054:	4b3c      	ldr	r3, [pc, #240]	@ (8007148 <xQueueReceive+0x1c0>)
 8007056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007064:	f001 fdd2 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8007068:	2301      	movs	r3, #1
 800706a:	e069      	b.n	8007140 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d103      	bne.n	800707a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007072:	f001 fdcb 	bl	8008c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007076:	2300      	movs	r3, #0
 8007078:	e062      	b.n	8007140 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d106      	bne.n	800708e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007080:	f107 0310 	add.w	r3, r7, #16
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fec5 	bl	8007e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800708a:	2301      	movs	r3, #1
 800708c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800708e:	f001 fdbd 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007092:	f000 fc0d 	bl	80078b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007096:	f001 fd87 	bl	8008ba8 <vPortEnterCritical>
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a6:	d103      	bne.n	80070b0 <xQueueReceive+0x128>
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070b6:	b25b      	sxtb	r3, r3
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070bc:	d103      	bne.n	80070c6 <xQueueReceive+0x13e>
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070c6:	f001 fda1 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070ca:	1d3a      	adds	r2, r7, #4
 80070cc:	f107 0310 	add.w	r3, r7, #16
 80070d0:	4611      	mov	r1, r2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 feb4 	bl	8007e40 <xTaskCheckForTimeOut>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d123      	bne.n	8007126 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070e0:	f000 f916 	bl	8007310 <prvIsQueueEmpty>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d017      	beq.n	800711a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	3324      	adds	r3, #36	@ 0x24
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fdb0 	bl	8007c58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070fa:	f000 f8b7 	bl	800726c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070fe:	f000 fbe5 	bl	80078cc <xTaskResumeAll>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d189      	bne.n	800701c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007108:	4b0f      	ldr	r3, [pc, #60]	@ (8007148 <xQueueReceive+0x1c0>)
 800710a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	e780      	b.n	800701c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800711a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800711c:	f000 f8a6 	bl	800726c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007120:	f000 fbd4 	bl	80078cc <xTaskResumeAll>
 8007124:	e77a      	b.n	800701c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007128:	f000 f8a0 	bl	800726c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800712c:	f000 fbce 	bl	80078cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007132:	f000 f8ed 	bl	8007310 <prvIsQueueEmpty>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	f43f af6f 	beq.w	800701c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800713e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007140:	4618      	mov	r0, r3
 8007142:	3730      	adds	r7, #48	@ 0x30
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	e000ed04 	.word	0xe000ed04

0800714c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d14d      	bne.n	800720e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4618      	mov	r0, r3
 8007178:	f000 ffc6 	bl	8008108 <xTaskPriorityDisinherit>
 800717c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	e043      	b.n	800720e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d119      	bne.n	80071c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6858      	ldr	r0, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007194:	461a      	mov	r2, r3
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	f012 fccd 	bl	8019b36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a4:	441a      	add	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d32b      	bcc.n	800720e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	e026      	b.n	800720e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68d8      	ldr	r0, [r3, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c8:	461a      	mov	r2, r3
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	f012 fcb3 	bl	8019b36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d8:	425b      	negs	r3, r3
 80071da:	441a      	add	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d207      	bcs.n	80071fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f4:	425b      	negs	r3, r3
 80071f6:	441a      	add	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d105      	bne.n	800720e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3b01      	subs	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007216:	697b      	ldr	r3, [r7, #20]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d018      	beq.n	8007264 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	441a      	add	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d303      	bcc.n	8007254 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68d9      	ldr	r1, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725c:	461a      	mov	r2, r3
 800725e:	6838      	ldr	r0, [r7, #0]
 8007260:	f012 fc69 	bl	8019b36 <memcpy>
	}
}
 8007264:	bf00      	nop
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007274:	f001 fc98 	bl	8008ba8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800727e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007280:	e011      	b.n	80072a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d012      	beq.n	80072b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3324      	adds	r3, #36	@ 0x24
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fd34 	bl	8007cfc <xTaskRemoveFromEventList>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800729a:	f000 fe35 	bl	8007f08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	dce9      	bgt.n	8007282 <prvUnlockQueue+0x16>
 80072ae:	e000      	b.n	80072b2 <prvUnlockQueue+0x46>
					break;
 80072b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	22ff      	movs	r2, #255	@ 0xff
 80072b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80072ba:	f001 fca7 	bl	8008c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072be:	f001 fc73 	bl	8008ba8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072ca:	e011      	b.n	80072f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3310      	adds	r3, #16
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fd0f 	bl	8007cfc <xTaskRemoveFromEventList>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072e4:	f000 fe10 	bl	8007f08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dce9      	bgt.n	80072cc <prvUnlockQueue+0x60>
 80072f8:	e000      	b.n	80072fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	22ff      	movs	r2, #255	@ 0xff
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007304:	f001 fc82 	bl	8008c0c <vPortExitCritical>
}
 8007308:	bf00      	nop
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007318:	f001 fc46 	bl	8008ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e001      	b.n	800732e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800732e:	f001 fc6d 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007344:	f001 fc30 	bl	8008ba8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	429a      	cmp	r2, r3
 8007352:	d102      	bne.n	800735a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e001      	b.n	800735e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800735e:	f001 fc55 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007362:	68fb      	ldr	r3, [r7, #12]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	e014      	b.n	80073a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800737c:	4a0f      	ldr	r2, [pc, #60]	@ (80073bc <vQueueAddToRegistry+0x50>)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10b      	bne.n	80073a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007388:	490c      	ldr	r1, [pc, #48]	@ (80073bc <vQueueAddToRegistry+0x50>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007392:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <vQueueAddToRegistry+0x50>)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	4413      	add	r3, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800739e:	e006      	b.n	80073ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b07      	cmp	r3, #7
 80073aa:	d9e7      	bls.n	800737c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20009118 	.word	0x20009118

080073c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073d0:	f001 fbea 	bl	8008ba8 <vPortEnterCritical>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e0:	d103      	bne.n	80073ea <vQueueWaitForMessageRestricted+0x2a>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073f0:	b25b      	sxtb	r3, r3
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073f6:	d103      	bne.n	8007400 <vQueueWaitForMessageRestricted+0x40>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007400:	f001 fc04 	bl	8008c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3324      	adds	r3, #36	@ 0x24
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fc45 	bl	8007ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800741a:	6978      	ldr	r0, [r7, #20]
 800741c:	f7ff ff26 	bl	800726c <prvUnlockQueue>
	}
 8007420:	bf00      	nop
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	@ 0x38
 800742c:	af04      	add	r7, sp, #16
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10b      	bne.n	8007454 <xTaskCreateStatic+0x2c>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	623b      	str	r3, [r7, #32]
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <xTaskCreateStatic+0x4a>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	61fb      	str	r3, [r7, #28]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007472:	235c      	movs	r3, #92	@ 0x5c
 8007474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b5c      	cmp	r3, #92	@ 0x5c
 800747a:	d00b      	beq.n	8007494 <xTaskCreateStatic+0x6c>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	61bb      	str	r3, [r7, #24]
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	e7fd      	b.n	8007490 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007494:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01e      	beq.n	80074da <xTaskCreateStatic+0xb2>
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01b      	beq.n	80074da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074b4:	2300      	movs	r3, #0
 80074b6:	9303      	str	r3, [sp, #12]
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	9302      	str	r3, [sp, #8]
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f850 	bl	8007572 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074d4:	f000 f8de 	bl	8007694 <prvAddNewTaskToReadyList>
 80074d8:	e001      	b.n	80074de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074de:	697b      	ldr	r3, [r7, #20]
	}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3728      	adds	r7, #40	@ 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08c      	sub	sp, #48	@ 0x30
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f001 fc75 	bl	8008dec <pvPortMalloc>
 8007502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800750a:	205c      	movs	r0, #92	@ 0x5c
 800750c:	f001 fc6e 	bl	8008dec <pvPortMalloc>
 8007510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	631a      	str	r2, [r3, #48]	@ 0x30
 800751e:	e005      	b.n	800752c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f001 fd31 	bl	8008f88 <vPortFree>
 8007526:	e001      	b.n	800752c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d017      	beq.n	8007562 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f80e 	bl	8007572 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f000 f89c 	bl	8007694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e002      	b.n	8007568 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007568:	69bb      	ldr	r3, [r7, #24]
	}
 800756a:	4618      	mov	r0, r3
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	461a      	mov	r2, r3
 800758a:	21a5      	movs	r1, #165	@ 0xa5
 800758c:	f012 fa6b 	bl	8019a66 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759a:	3b01      	subs	r3, #1
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	617b      	str	r3, [r7, #20]
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01f      	beq.n	8007612 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	e012      	b.n	80075fe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	7819      	ldrb	r1, [r3, #0]
 80075e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	4413      	add	r3, r2
 80075e6:	3334      	adds	r3, #52	@ 0x34
 80075e8:	460a      	mov	r2, r1
 80075ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	3301      	adds	r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	2b0f      	cmp	r3, #15
 8007602:	d9e9      	bls.n	80075d8 <prvInitialiseNewTask+0x66>
 8007604:	e000      	b.n	8007608 <prvInitialiseNewTask+0x96>
			{
				break;
 8007606:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007610:	e003      	b.n	800761a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800761a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761c:	2b37      	cmp	r3, #55	@ 0x37
 800761e:	d901      	bls.n	8007624 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007620:	2337      	movs	r3, #55	@ 0x37
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007628:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800762e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f966 	bl	800690c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007642:	3318      	adds	r3, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff f961 	bl	800690c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800764e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	2200      	movs	r2, #0
 8007664:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	68f9      	ldr	r1, [r7, #12]
 8007672:	69b8      	ldr	r0, [r7, #24]
 8007674:	f001 f966 	bl	8008944 <pxPortInitialiseStack>
 8007678:	4602      	mov	r2, r0
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800768a:	bf00      	nop
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800769c:	f001 fa84 	bl	8008ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007758 <prvAddNewTaskToReadyList+0xc4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3301      	adds	r3, #1
 80076a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007758 <prvAddNewTaskToReadyList+0xc4>)
 80076a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076aa:	4b2c      	ldr	r3, [pc, #176]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076b2:	4a2a      	ldr	r2, [pc, #168]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076b8:	4b27      	ldr	r3, [pc, #156]	@ (8007758 <prvAddNewTaskToReadyList+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d110      	bne.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076c0:	f000 fc46 	bl	8007f50 <prvInitialiseTaskLists>
 80076c4:	e00d      	b.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076c6:	4b26      	ldr	r3, [pc, #152]	@ (8007760 <prvAddNewTaskToReadyList+0xcc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076ce:	4b23      	ldr	r3, [pc, #140]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	429a      	cmp	r2, r3
 80076da:	d802      	bhi.n	80076e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076dc:	4a1f      	ldr	r2, [pc, #124]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076e2:	4b20      	ldr	r3, [pc, #128]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3301      	adds	r3, #1
 80076e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
 80076ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007768 <prvAddNewTaskToReadyList+0xd4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d903      	bls.n	8007708 <prvAddNewTaskToReadyList+0x74>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	4a18      	ldr	r2, [pc, #96]	@ (8007768 <prvAddNewTaskToReadyList+0xd4>)
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4a15      	ldr	r2, [pc, #84]	@ (800776c <prvAddNewTaskToReadyList+0xd8>)
 8007716:	441a      	add	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3304      	adds	r3, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f7ff f901 	bl	8006926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007724:	f001 fa72 	bl	8008c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007728:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <prvAddNewTaskToReadyList+0xcc>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00e      	beq.n	800774e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007730:	4b0a      	ldr	r3, [pc, #40]	@ (800775c <prvAddNewTaskToReadyList+0xc8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	429a      	cmp	r2, r3
 800773c:	d207      	bcs.n	800774e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800773e:	4b0c      	ldr	r3, [pc, #48]	@ (8007770 <prvAddNewTaskToReadyList+0xdc>)
 8007740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	2000962c 	.word	0x2000962c
 800775c:	20009158 	.word	0x20009158
 8007760:	20009638 	.word	0x20009638
 8007764:	20009648 	.word	0x20009648
 8007768:	20009634 	.word	0x20009634
 800776c:	2000915c 	.word	0x2000915c
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d018      	beq.n	80077b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007786:	4b14      	ldr	r3, [pc, #80]	@ (80077d8 <vTaskDelay+0x64>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <vTaskDelay+0x32>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60bb      	str	r3, [r7, #8]
}
 80077a0:	bf00      	nop
 80077a2:	bf00      	nop
 80077a4:	e7fd      	b.n	80077a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077a6:	f000 f883 	bl	80078b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077aa:	2100      	movs	r1, #0
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fd1b 	bl	80081e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077b2:	f000 f88b 	bl	80078cc <xTaskResumeAll>
 80077b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d107      	bne.n	80077ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077be:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <vTaskDelay+0x68>)
 80077c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	20009654 	.word	0x20009654
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	@ 0x28
 80077e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077ee:	463a      	mov	r2, r7
 80077f0:	1d39      	adds	r1, r7, #4
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff f834 	bl	8006864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	9202      	str	r2, [sp, #8]
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	2300      	movs	r3, #0
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	2300      	movs	r3, #0
 800780c:	460a      	mov	r2, r1
 800780e:	4922      	ldr	r1, [pc, #136]	@ (8007898 <vTaskStartScheduler+0xb8>)
 8007810:	4822      	ldr	r0, [pc, #136]	@ (800789c <vTaskStartScheduler+0xbc>)
 8007812:	f7ff fe09 	bl	8007428 <xTaskCreateStatic>
 8007816:	4603      	mov	r3, r0
 8007818:	4a21      	ldr	r2, [pc, #132]	@ (80078a0 <vTaskStartScheduler+0xc0>)
 800781a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800781c:	4b20      	ldr	r3, [pc, #128]	@ (80078a0 <vTaskStartScheduler+0xc0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007824:	2301      	movs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	e001      	b.n	800782e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800782a:	2300      	movs	r3, #0
 800782c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d102      	bne.n	800783a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007834:	f000 fd2c 	bl	8008290 <xTimerCreateTimerTask>
 8007838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d116      	bne.n	800786e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
}
 8007852:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007854:	4b13      	ldr	r3, [pc, #76]	@ (80078a4 <vTaskStartScheduler+0xc4>)
 8007856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800785a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800785c:	4b12      	ldr	r3, [pc, #72]	@ (80078a8 <vTaskStartScheduler+0xc8>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007862:	4b12      	ldr	r3, [pc, #72]	@ (80078ac <vTaskStartScheduler+0xcc>)
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007868:	f001 f8fa 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800786c:	e00f      	b.n	800788e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007874:	d10b      	bne.n	800788e <vTaskStartScheduler+0xae>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60fb      	str	r3, [r7, #12]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <vTaskStartScheduler+0xaa>
}
 800788e:	bf00      	nop
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	0801ae60 	.word	0x0801ae60
 800789c:	08007f21 	.word	0x08007f21
 80078a0:	20009650 	.word	0x20009650
 80078a4:	2000964c 	.word	0x2000964c
 80078a8:	20009638 	.word	0x20009638
 80078ac:	20009630 	.word	0x20009630

080078b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <vTaskSuspendAll+0x18>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	4a03      	ldr	r2, [pc, #12]	@ (80078c8 <vTaskSuspendAll+0x18>)
 80078bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078be:	bf00      	nop
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	20009654 	.word	0x20009654

080078cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078da:	4b42      	ldr	r3, [pc, #264]	@ (80079e4 <xTaskResumeAll+0x118>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <xTaskResumeAll+0x2e>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	603b      	str	r3, [r7, #0]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078fa:	f001 f955 	bl	8008ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078fe:	4b39      	ldr	r3, [pc, #228]	@ (80079e4 <xTaskResumeAll+0x118>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3b01      	subs	r3, #1
 8007904:	4a37      	ldr	r2, [pc, #220]	@ (80079e4 <xTaskResumeAll+0x118>)
 8007906:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007908:	4b36      	ldr	r3, [pc, #216]	@ (80079e4 <xTaskResumeAll+0x118>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d162      	bne.n	80079d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007910:	4b35      	ldr	r3, [pc, #212]	@ (80079e8 <xTaskResumeAll+0x11c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d05e      	beq.n	80079d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007918:	e02f      	b.n	800797a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	4b34      	ldr	r3, [pc, #208]	@ (80079ec <xTaskResumeAll+0x120>)
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3318      	adds	r3, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff f85a 	bl	80069e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3304      	adds	r3, #4
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff f855 	bl	80069e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793a:	4b2d      	ldr	r3, [pc, #180]	@ (80079f0 <xTaskResumeAll+0x124>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d903      	bls.n	800794a <xTaskResumeAll+0x7e>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	4a2a      	ldr	r2, [pc, #168]	@ (80079f0 <xTaskResumeAll+0x124>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a27      	ldr	r2, [pc, #156]	@ (80079f4 <xTaskResumeAll+0x128>)
 8007958:	441a      	add	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fe ffe0 	bl	8006926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796a:	4b23      	ldr	r3, [pc, #140]	@ (80079f8 <xTaskResumeAll+0x12c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007974:	4b21      	ldr	r3, [pc, #132]	@ (80079fc <xTaskResumeAll+0x130>)
 8007976:	2201      	movs	r2, #1
 8007978:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800797a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ec <xTaskResumeAll+0x120>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1cb      	bne.n	800791a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007988:	f000 fb80 	bl	800808c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800798c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a00 <xTaskResumeAll+0x134>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d010      	beq.n	80079ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007998:	f000 f846 	bl	8007a28 <xTaskIncrementTick>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079a2:	4b16      	ldr	r3, [pc, #88]	@ (80079fc <xTaskResumeAll+0x130>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f1      	bne.n	8007998 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079b4:	4b12      	ldr	r3, [pc, #72]	@ (8007a00 <xTaskResumeAll+0x134>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079ba:	4b10      	ldr	r3, [pc, #64]	@ (80079fc <xTaskResumeAll+0x130>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079c2:	2301      	movs	r3, #1
 80079c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a04 <xTaskResumeAll+0x138>)
 80079c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079d6:	f001 f919 	bl	8008c0c <vPortExitCritical>

	return xAlreadyYielded;
 80079da:	68bb      	ldr	r3, [r7, #8]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20009654 	.word	0x20009654
 80079e8:	2000962c 	.word	0x2000962c
 80079ec:	200095ec 	.word	0x200095ec
 80079f0:	20009634 	.word	0x20009634
 80079f4:	2000915c 	.word	0x2000915c
 80079f8:	20009158 	.word	0x20009158
 80079fc:	20009640 	.word	0x20009640
 8007a00:	2000963c 	.word	0x2000963c
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a0e:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <xTaskGetTickCount+0x1c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a14:	687b      	ldr	r3, [r7, #4]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20009630 	.word	0x20009630

08007a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a32:	4b4f      	ldr	r3, [pc, #316]	@ (8007b70 <xTaskIncrementTick+0x148>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 8090 	bne.w	8007b5c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8007b74 <xTaskIncrementTick+0x14c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a44:	4a4b      	ldr	r2, [pc, #300]	@ (8007b74 <xTaskIncrementTick+0x14c>)
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d121      	bne.n	8007a94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a50:	4b49      	ldr	r3, [pc, #292]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	603b      	str	r3, [r7, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <xTaskIncrementTick+0x46>
 8007a72:	4b41      	ldr	r3, [pc, #260]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	4b40      	ldr	r3, [pc, #256]	@ (8007b7c <xTaskIncrementTick+0x154>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	4a3e      	ldr	r2, [pc, #248]	@ (8007b7c <xTaskIncrementTick+0x154>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	4b3e      	ldr	r3, [pc, #248]	@ (8007b80 <xTaskIncrementTick+0x158>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b80 <xTaskIncrementTick+0x158>)
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	f000 fafc 	bl	800808c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a94:	4b3b      	ldr	r3, [pc, #236]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d349      	bcc.n	8007b32 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a9e:	4b36      	ldr	r3, [pc, #216]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d104      	bne.n	8007ab2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa8:	4b36      	ldr	r3, [pc, #216]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007aae:	601a      	str	r2, [r3, #0]
					break;
 8007ab0:	e03f      	b.n	8007b32 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ab2:	4b31      	ldr	r3, [pc, #196]	@ (8007b78 <xTaskIncrementTick+0x150>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d203      	bcs.n	8007ad2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aca:	4a2e      	ldr	r2, [pc, #184]	@ (8007b84 <xTaskIncrementTick+0x15c>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ad0:	e02f      	b.n	8007b32 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe ff82 	bl	80069e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	3318      	adds	r3, #24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe ff79 	bl	80069e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af2:	4b25      	ldr	r3, [pc, #148]	@ (8007b88 <xTaskIncrementTick+0x160>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d903      	bls.n	8007b02 <xTaskIncrementTick+0xda>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afe:	4a22      	ldr	r2, [pc, #136]	@ (8007b88 <xTaskIncrementTick+0x160>)
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <xTaskIncrementTick+0x164>)
 8007b10:	441a      	add	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7fe ff04 	bl	8006926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b22:	4b1b      	ldr	r3, [pc, #108]	@ (8007b90 <xTaskIncrementTick+0x168>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d3b8      	bcc.n	8007a9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b30:	e7b5      	b.n	8007a9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b32:	4b17      	ldr	r3, [pc, #92]	@ (8007b90 <xTaskIncrementTick+0x168>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	4914      	ldr	r1, [pc, #80]	@ (8007b8c <xTaskIncrementTick+0x164>)
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d901      	bls.n	8007b4e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b4e:	4b11      	ldr	r3, [pc, #68]	@ (8007b94 <xTaskIncrementTick+0x16c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d007      	beq.n	8007b66 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b56:	2301      	movs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e004      	b.n	8007b66 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b98 <xTaskIncrementTick+0x170>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3301      	adds	r3, #1
 8007b62:	4a0d      	ldr	r2, [pc, #52]	@ (8007b98 <xTaskIncrementTick+0x170>)
 8007b64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b66:	697b      	ldr	r3, [r7, #20]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20009654 	.word	0x20009654
 8007b74:	20009630 	.word	0x20009630
 8007b78:	200095e4 	.word	0x200095e4
 8007b7c:	200095e8 	.word	0x200095e8
 8007b80:	20009644 	.word	0x20009644
 8007b84:	2000964c 	.word	0x2000964c
 8007b88:	20009634 	.word	0x20009634
 8007b8c:	2000915c 	.word	0x2000915c
 8007b90:	20009158 	.word	0x20009158
 8007b94:	20009640 	.word	0x20009640
 8007b98:	2000963c 	.word	0x2000963c

08007b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ba2:	4b28      	ldr	r3, [pc, #160]	@ (8007c44 <vTaskSwitchContext+0xa8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007baa:	4b27      	ldr	r3, [pc, #156]	@ (8007c48 <vTaskSwitchContext+0xac>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bb0:	e042      	b.n	8007c38 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bb2:	4b25      	ldr	r3, [pc, #148]	@ (8007c48 <vTaskSwitchContext+0xac>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb8:	4b24      	ldr	r3, [pc, #144]	@ (8007c4c <vTaskSwitchContext+0xb0>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	e011      	b.n	8007be4 <vTaskSwitchContext+0x48>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10b      	bne.n	8007bde <vTaskSwitchContext+0x42>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	607b      	str	r3, [r7, #4]
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	e7fd      	b.n	8007bda <vTaskSwitchContext+0x3e>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	491a      	ldr	r1, [pc, #104]	@ (8007c50 <vTaskSwitchContext+0xb4>)
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0e3      	beq.n	8007bc0 <vTaskSwitchContext+0x24>
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4a13      	ldr	r2, [pc, #76]	@ (8007c50 <vTaskSwitchContext+0xb4>)
 8007c04:	4413      	add	r3, r2
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3308      	adds	r3, #8
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d104      	bne.n	8007c28 <vTaskSwitchContext+0x8c>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	605a      	str	r2, [r3, #4]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	4a09      	ldr	r2, [pc, #36]	@ (8007c54 <vTaskSwitchContext+0xb8>)
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4a06      	ldr	r2, [pc, #24]	@ (8007c4c <vTaskSwitchContext+0xb0>)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6013      	str	r3, [r2, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	20009654 	.word	0x20009654
 8007c48:	20009640 	.word	0x20009640
 8007c4c:	20009634 	.word	0x20009634
 8007c50:	2000915c 	.word	0x2000915c
 8007c54:	20009158 	.word	0x20009158

08007c58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10b      	bne.n	8007c80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	60fb      	str	r3, [r7, #12]
}
 8007c7a:	bf00      	nop
 8007c7c:	bf00      	nop
 8007c7e:	e7fd      	b.n	8007c7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c80:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <vTaskPlaceOnEventList+0x48>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3318      	adds	r3, #24
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fe fe70 	bl	800696e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c8e:	2101      	movs	r1, #1
 8007c90:	6838      	ldr	r0, [r7, #0]
 8007c92:	f000 faa9 	bl	80081e8 <prvAddCurrentTaskToDelayedList>
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20009158 	.word	0x20009158

08007ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	617b      	str	r3, [r7, #20]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cce:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f7fe fe25 	bl	8006926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ce6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	68b8      	ldr	r0, [r7, #8]
 8007cec:	f000 fa7c 	bl	80081e8 <prvAddCurrentTaskToDelayedList>
	}
 8007cf0:	bf00      	nop
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20009158 	.word	0x20009158

08007cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60fb      	str	r3, [r7, #12]
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3318      	adds	r3, #24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fe fe56 	bl	80069e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d34:	4b1d      	ldr	r3, [pc, #116]	@ (8007dac <xTaskRemoveFromEventList+0xb0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d11d      	bne.n	8007d78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fe4d 	bl	80069e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4a:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <xTaskRemoveFromEventList+0xb4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d903      	bls.n	8007d5a <xTaskRemoveFromEventList+0x5e>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	4a16      	ldr	r2, [pc, #88]	@ (8007db0 <xTaskRemoveFromEventList+0xb4>)
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4a13      	ldr	r2, [pc, #76]	@ (8007db4 <xTaskRemoveFromEventList+0xb8>)
 8007d68:	441a      	add	r2, r3
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f7fe fdd8 	bl	8006926 <vListInsertEnd>
 8007d76:	e005      	b.n	8007d84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	3318      	adds	r3, #24
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	480e      	ldr	r0, [pc, #56]	@ (8007db8 <xTaskRemoveFromEventList+0xbc>)
 8007d80:	f7fe fdd1 	bl	8006926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d88:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <xTaskRemoveFromEventList+0xc0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d905      	bls.n	8007d9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d96:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc0 <xTaskRemoveFromEventList+0xc4>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e001      	b.n	8007da2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007da2:	697b      	ldr	r3, [r7, #20]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20009654 	.word	0x20009654
 8007db0:	20009634 	.word	0x20009634
 8007db4:	2000915c 	.word	0x2000915c
 8007db8:	200095ec 	.word	0x200095ec
 8007dbc:	20009158 	.word	0x20009158
 8007dc0:	20009640 	.word	0x20009640

08007dc4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	60fb      	str	r3, [r7, #12]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007dea:	f000 fedd 	bl	8008ba8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dee:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <vTaskSetTimeOutState+0x48>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007df6:	4b06      	ldr	r3, [pc, #24]	@ (8007e10 <vTaskSetTimeOutState+0x4c>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007dfe:	f000 ff05 	bl	8008c0c <vPortExitCritical>
}
 8007e02:	bf00      	nop
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20009644 	.word	0x20009644
 8007e10:	20009630 	.word	0x20009630

08007e14 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e1c:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <vTaskInternalSetTimeOutState+0x24>)
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e24:	4b05      	ldr	r3, [pc, #20]	@ (8007e3c <vTaskInternalSetTimeOutState+0x28>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	605a      	str	r2, [r3, #4]
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	20009644 	.word	0x20009644
 8007e3c:	20009630 	.word	0x20009630

08007e40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	613b      	str	r3, [r7, #16]
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	60fb      	str	r3, [r7, #12]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e86:	f000 fe8f 	bl	8008ba8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f00 <xTaskCheckForTimeOut+0xc0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ea2:	d102      	bne.n	8007eaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	e023      	b.n	8007ef2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4b15      	ldr	r3, [pc, #84]	@ (8007f04 <xTaskCheckForTimeOut+0xc4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d007      	beq.n	8007ec6 <xTaskCheckForTimeOut+0x86>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d302      	bcc.n	8007ec6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e015      	b.n	8007ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d20b      	bcs.n	8007ee8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff ff99 	bl	8007e14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	e004      	b.n	8007ef2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ef2:	f000 fe8b 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20009630 	.word	0x20009630
 8007f04:	20009644 	.word	0x20009644

08007f08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f0c:	4b03      	ldr	r3, [pc, #12]	@ (8007f1c <vTaskMissedYield+0x14>)
 8007f0e:	2201      	movs	r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
}
 8007f12:	bf00      	nop
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20009640 	.word	0x20009640

08007f20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f28:	f000 f852 	bl	8007fd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f2c:	4b06      	ldr	r3, [pc, #24]	@ (8007f48 <prvIdleTask+0x28>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d9f9      	bls.n	8007f28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f34:	4b05      	ldr	r3, [pc, #20]	@ (8007f4c <prvIdleTask+0x2c>)
 8007f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f44:	e7f0      	b.n	8007f28 <prvIdleTask+0x8>
 8007f46:	bf00      	nop
 8007f48:	2000915c 	.word	0x2000915c
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	e00c      	b.n	8007f76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4a12      	ldr	r2, [pc, #72]	@ (8007fb0 <prvInitialiseTaskLists+0x60>)
 8007f68:	4413      	add	r3, r2
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe fcae 	bl	80068cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3301      	adds	r3, #1
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b37      	cmp	r3, #55	@ 0x37
 8007f7a:	d9ef      	bls.n	8007f5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f7c:	480d      	ldr	r0, [pc, #52]	@ (8007fb4 <prvInitialiseTaskLists+0x64>)
 8007f7e:	f7fe fca5 	bl	80068cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f82:	480d      	ldr	r0, [pc, #52]	@ (8007fb8 <prvInitialiseTaskLists+0x68>)
 8007f84:	f7fe fca2 	bl	80068cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f88:	480c      	ldr	r0, [pc, #48]	@ (8007fbc <prvInitialiseTaskLists+0x6c>)
 8007f8a:	f7fe fc9f 	bl	80068cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f8e:	480c      	ldr	r0, [pc, #48]	@ (8007fc0 <prvInitialiseTaskLists+0x70>)
 8007f90:	f7fe fc9c 	bl	80068cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f94:	480b      	ldr	r0, [pc, #44]	@ (8007fc4 <prvInitialiseTaskLists+0x74>)
 8007f96:	f7fe fc99 	bl	80068cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc8 <prvInitialiseTaskLists+0x78>)
 8007f9c:	4a05      	ldr	r2, [pc, #20]	@ (8007fb4 <prvInitialiseTaskLists+0x64>)
 8007f9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fcc <prvInitialiseTaskLists+0x7c>)
 8007fa2:	4a05      	ldr	r2, [pc, #20]	@ (8007fb8 <prvInitialiseTaskLists+0x68>)
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	2000915c 	.word	0x2000915c
 8007fb4:	200095bc 	.word	0x200095bc
 8007fb8:	200095d0 	.word	0x200095d0
 8007fbc:	200095ec 	.word	0x200095ec
 8007fc0:	20009600 	.word	0x20009600
 8007fc4:	20009618 	.word	0x20009618
 8007fc8:	200095e4 	.word	0x200095e4
 8007fcc:	200095e8 	.word	0x200095e8

08007fd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fd6:	e019      	b.n	800800c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fd8:	f000 fde6 	bl	8008ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fdc:	4b10      	ldr	r3, [pc, #64]	@ (8008020 <prvCheckTasksWaitingTermination+0x50>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fcf9 	bl	80069e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fee:	4b0d      	ldr	r3, [pc, #52]	@ (8008024 <prvCheckTasksWaitingTermination+0x54>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8008024 <prvCheckTasksWaitingTermination+0x54>)
 8007ff6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8008028 <prvCheckTasksWaitingTermination+0x58>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8008028 <prvCheckTasksWaitingTermination+0x58>)
 8008000:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008002:	f000 fe03 	bl	8008c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f810 	bl	800802c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800800c:	4b06      	ldr	r3, [pc, #24]	@ (8008028 <prvCheckTasksWaitingTermination+0x58>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e1      	bne.n	8007fd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20009600 	.word	0x20009600
 8008024:	2000962c 	.word	0x2000962c
 8008028:	20009614 	.word	0x20009614

0800802c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800803a:	2b00      	cmp	r3, #0
 800803c:	d108      	bne.n	8008050 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	4618      	mov	r0, r3
 8008044:	f000 ffa0 	bl	8008f88 <vPortFree>
				vPortFree( pxTCB );
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 ff9d 	bl	8008f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800804e:	e019      	b.n	8008084 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008056:	2b01      	cmp	r3, #1
 8008058:	d103      	bne.n	8008062 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 ff94 	bl	8008f88 <vPortFree>
	}
 8008060:	e010      	b.n	8008084 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008068:	2b02      	cmp	r3, #2
 800806a:	d00b      	beq.n	8008084 <prvDeleteTCB+0x58>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60fb      	str	r3, [r7, #12]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <prvDeleteTCB+0x54>
	}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 800809e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080a4:	e008      	b.n	80080b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a6:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4a04      	ldr	r2, [pc, #16]	@ (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 80080b6:	6013      	str	r3, [r2, #0]
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	200095e4 	.word	0x200095e4
 80080c8:	2000964c 	.word	0x2000964c

080080cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008100 <xTaskGetSchedulerState+0x34>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080da:	2301      	movs	r3, #1
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	e008      	b.n	80080f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e0:	4b08      	ldr	r3, [pc, #32]	@ (8008104 <xTaskGetSchedulerState+0x38>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080e8:	2302      	movs	r3, #2
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	e001      	b.n	80080f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080f2:	687b      	ldr	r3, [r7, #4]
	}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	20009638 	.word	0x20009638
 8008104:	20009654 	.word	0x20009654

08008108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d058      	beq.n	80081d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800811e:	4b2f      	ldr	r3, [pc, #188]	@ (80081dc <xTaskPriorityDisinherit+0xd4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	429a      	cmp	r2, r3
 8008126:	d00b      	beq.n	8008140 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	60fb      	str	r3, [r7, #12]
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10b      	bne.n	8008160 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	60bb      	str	r3, [r7, #8]
}
 800815a:	bf00      	nop
 800815c:	bf00      	nop
 800815e:	e7fd      	b.n	800815c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008164:	1e5a      	subs	r2, r3, #1
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008172:	429a      	cmp	r2, r3
 8008174:	d02c      	beq.n	80081d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800817a:	2b00      	cmp	r3, #0
 800817c:	d128      	bne.n	80081d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3304      	adds	r3, #4
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fc2c 	bl	80069e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a0:	4b0f      	ldr	r3, [pc, #60]	@ (80081e0 <xTaskPriorityDisinherit+0xd8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d903      	bls.n	80081b0 <xTaskPriorityDisinherit+0xa8>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	4a0c      	ldr	r2, [pc, #48]	@ (80081e0 <xTaskPriorityDisinherit+0xd8>)
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4a09      	ldr	r2, [pc, #36]	@ (80081e4 <xTaskPriorityDisinherit+0xdc>)
 80081be:	441a      	add	r2, r3
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fe fbad 	bl	8006926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081d0:	697b      	ldr	r3, [r7, #20]
	}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	20009158 	.word	0x20009158
 80081e0:	20009634 	.word	0x20009634
 80081e4:	2000915c 	.word	0x2000915c

080081e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081f2:	4b21      	ldr	r3, [pc, #132]	@ (8008278 <prvAddCurrentTaskToDelayedList+0x90>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f8:	4b20      	ldr	r3, [pc, #128]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fbee 	bl	80069e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800820a:	d10a      	bne.n	8008222 <prvAddCurrentTaskToDelayedList+0x3a>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008212:	4b1a      	ldr	r3, [pc, #104]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3304      	adds	r3, #4
 8008218:	4619      	mov	r1, r3
 800821a:	4819      	ldr	r0, [pc, #100]	@ (8008280 <prvAddCurrentTaskToDelayedList+0x98>)
 800821c:	f7fe fb83 	bl	8006926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008220:	e026      	b.n	8008270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800822a:	4b14      	ldr	r3, [pc, #80]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	429a      	cmp	r2, r3
 8008238:	d209      	bcs.n	800824e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800823a:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <prvAddCurrentTaskToDelayedList+0x9c>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b0f      	ldr	r3, [pc, #60]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f7fe fb91 	bl	800696e <vListInsert>
}
 800824c:	e010      	b.n	8008270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800824e:	4b0e      	ldr	r3, [pc, #56]	@ (8008288 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b0a      	ldr	r3, [pc, #40]	@ (800827c <prvAddCurrentTaskToDelayedList+0x94>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7fe fb87 	bl	800696e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008260:	4b0a      	ldr	r3, [pc, #40]	@ (800828c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	429a      	cmp	r2, r3
 8008268:	d202      	bcs.n	8008270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800826a:	4a08      	ldr	r2, [pc, #32]	@ (800828c <prvAddCurrentTaskToDelayedList+0xa4>)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	6013      	str	r3, [r2, #0]
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20009630 	.word	0x20009630
 800827c:	20009158 	.word	0x20009158
 8008280:	20009618 	.word	0x20009618
 8008284:	200095e8 	.word	0x200095e8
 8008288:	200095e4 	.word	0x200095e4
 800828c:	2000964c 	.word	0x2000964c

08008290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	@ 0x28
 8008294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800829a:	f000 fb13 	bl	80088c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800829e:	4b1d      	ldr	r3, [pc, #116]	@ (8008314 <xTimerCreateTimerTask+0x84>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d021      	beq.n	80082ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082ae:	1d3a      	adds	r2, r7, #4
 80082b0:	f107 0108 	add.w	r1, r7, #8
 80082b4:	f107 030c 	add.w	r3, r7, #12
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe faed 	bl	8006898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	9202      	str	r2, [sp, #8]
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	2302      	movs	r3, #2
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	460a      	mov	r2, r1
 80082d0:	4911      	ldr	r1, [pc, #68]	@ (8008318 <xTimerCreateTimerTask+0x88>)
 80082d2:	4812      	ldr	r0, [pc, #72]	@ (800831c <xTimerCreateTimerTask+0x8c>)
 80082d4:	f7ff f8a8 	bl	8007428 <xTaskCreateStatic>
 80082d8:	4603      	mov	r3, r0
 80082da:	4a11      	ldr	r2, [pc, #68]	@ (8008320 <xTimerCreateTimerTask+0x90>)
 80082dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082de:	4b10      	ldr	r3, [pc, #64]	@ (8008320 <xTimerCreateTimerTask+0x90>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082e6:	2301      	movs	r3, #1
 80082e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	613b      	str	r3, [r7, #16]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008308:	697b      	ldr	r3, [r7, #20]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20009688 	.word	0x20009688
 8008318:	0801ae68 	.word	0x0801ae68
 800831c:	0800845d 	.word	0x0800845d
 8008320:	2000968c 	.word	0x2000968c

08008324 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	@ 0x28
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008332:	2300      	movs	r3, #0
 8008334:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xTimerGenericCommand+0x30>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	623b      	str	r3, [r7, #32]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008354:	4b19      	ldr	r3, [pc, #100]	@ (80083bc <xTimerGenericCommand+0x98>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02a      	beq.n	80083b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b05      	cmp	r3, #5
 800836c:	dc18      	bgt.n	80083a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800836e:	f7ff fead 	bl	80080cc <xTaskGetSchedulerState>
 8008372:	4603      	mov	r3, r0
 8008374:	2b02      	cmp	r3, #2
 8008376:	d109      	bne.n	800838c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008378:	4b10      	ldr	r3, [pc, #64]	@ (80083bc <xTimerGenericCommand+0x98>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	f107 0110 	add.w	r1, r7, #16
 8008380:	2300      	movs	r3, #0
 8008382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008384:	f7fe fc60 	bl	8006c48 <xQueueGenericSend>
 8008388:	6278      	str	r0, [r7, #36]	@ 0x24
 800838a:	e012      	b.n	80083b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800838c:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <xTimerGenericCommand+0x98>)
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	f107 0110 	add.w	r1, r7, #16
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	f7fe fc56 	bl	8006c48 <xQueueGenericSend>
 800839c:	6278      	str	r0, [r7, #36]	@ 0x24
 800839e:	e008      	b.n	80083b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083a0:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <xTimerGenericCommand+0x98>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	f107 0110 	add.w	r1, r7, #16
 80083a8:	2300      	movs	r3, #0
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	f7fe fd4e 	bl	8006e4c <xQueueGenericSendFromISR>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3728      	adds	r7, #40	@ 0x28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20009688 	.word	0x20009688

080083c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ca:	4b23      	ldr	r3, [pc, #140]	@ (8008458 <prvProcessExpiredTimer+0x98>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	3304      	adds	r3, #4
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fb01 	bl	80069e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d023      	beq.n	8008434 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	699a      	ldr	r2, [r3, #24]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	18d1      	adds	r1, r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	6978      	ldr	r0, [r7, #20]
 80083fa:	f000 f8d5 	bl	80085a8 <prvInsertTimerInActiveList>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d020      	beq.n	8008446 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	2300      	movs	r3, #0
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	2100      	movs	r1, #0
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f7ff ff88 	bl	8008324 <xTimerGenericCommand>
 8008414:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d114      	bne.n	8008446 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	60fb      	str	r3, [r7, #12]
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	e7fd      	b.n	8008430 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800843a:	f023 0301 	bic.w	r3, r3, #1
 800843e:	b2da      	uxtb	r2, r3
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	4798      	blx	r3
}
 800844e:	bf00      	nop
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20009680 	.word	0x20009680

0800845c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008464:	f107 0308 	add.w	r3, r7, #8
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f859 	bl	8008520 <prvGetNextExpireTime>
 800846e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f805 	bl	8008484 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800847a:	f000 f8d7 	bl	800862c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800847e:	bf00      	nop
 8008480:	e7f0      	b.n	8008464 <prvTimerTask+0x8>
	...

08008484 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800848e:	f7ff fa0f 	bl	80078b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f866 	bl	8008568 <prvSampleTimeNow>
 800849c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d130      	bne.n	8008506 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <prvProcessTimerOrBlockTask+0x3c>
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d806      	bhi.n	80084c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084b2:	f7ff fa0b 	bl	80078cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084b6:	68f9      	ldr	r1, [r7, #12]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff ff81 	bl	80083c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084be:	e024      	b.n	800850a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d008      	beq.n	80084d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084c6:	4b13      	ldr	r3, [pc, #76]	@ (8008514 <prvProcessTimerOrBlockTask+0x90>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <prvProcessTimerOrBlockTask+0x50>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <prvProcessTimerOrBlockTask+0x52>
 80084d4:	2300      	movs	r3, #0
 80084d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008518 <prvProcessTimerOrBlockTask+0x94>)
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	f7fe ff6b 	bl	80073c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084ea:	f7ff f9ef 	bl	80078cc <xTaskResumeAll>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084f4:	4b09      	ldr	r3, [pc, #36]	@ (800851c <prvProcessTimerOrBlockTask+0x98>)
 80084f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	f3bf 8f6f 	isb	sy
}
 8008504:	e001      	b.n	800850a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008506:	f7ff f9e1 	bl	80078cc <xTaskResumeAll>
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20009684 	.word	0x20009684
 8008518:	20009688 	.word	0x20009688
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008528:	4b0e      	ldr	r3, [pc, #56]	@ (8008564 <prvGetNextExpireTime+0x44>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <prvGetNextExpireTime+0x16>
 8008532:	2201      	movs	r2, #1
 8008534:	e000      	b.n	8008538 <prvGetNextExpireTime+0x18>
 8008536:	2200      	movs	r2, #0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d105      	bne.n	8008550 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008544:	4b07      	ldr	r3, [pc, #28]	@ (8008564 <prvGetNextExpireTime+0x44>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e001      	b.n	8008554 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008554:	68fb      	ldr	r3, [r7, #12]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20009680 	.word	0x20009680

08008568 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008570:	f7ff fa4a 	bl	8007a08 <xTaskGetTickCount>
 8008574:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008576:	4b0b      	ldr	r3, [pc, #44]	@ (80085a4 <prvSampleTimeNow+0x3c>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	429a      	cmp	r2, r3
 800857e:	d205      	bcs.n	800858c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008580:	f000 f93a 	bl	80087f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	e002      	b.n	8008592 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008592:	4a04      	ldr	r2, [pc, #16]	@ (80085a4 <prvSampleTimeNow+0x3c>)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008598:	68fb      	ldr	r3, [r7, #12]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20009690 	.word	0x20009690

080085a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d812      	bhi.n	80085f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	1ad2      	subs	r2, r2, r3
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d302      	bcc.n	80085e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e01b      	b.n	800861a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085e2:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <prvInsertTimerInActiveList+0x7c>)
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f7fe f9be 	bl	800696e <vListInsert>
 80085f2:	e012      	b.n	800861a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d206      	bcs.n	800860a <prvInsertTimerInActiveList+0x62>
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d302      	bcc.n	800860a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e007      	b.n	800861a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800860a:	4b07      	ldr	r3, [pc, #28]	@ (8008628 <prvInsertTimerInActiveList+0x80>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3304      	adds	r3, #4
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f7fe f9aa 	bl	800696e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800861a:	697b      	ldr	r3, [r7, #20]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20009684 	.word	0x20009684
 8008628:	20009680 	.word	0x20009680

0800862c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08e      	sub	sp, #56	@ 0x38
 8008630:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008632:	e0ce      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	da19      	bge.n	800866e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800863a:	1d3b      	adds	r3, r7, #4
 800863c:	3304      	adds	r3, #4
 800863e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	61fb      	str	r3, [r7, #28]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800865e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008664:	6850      	ldr	r0, [r2, #4]
 8008666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008668:	6892      	ldr	r2, [r2, #8]
 800866a:	4611      	mov	r1, r2
 800866c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	f2c0 80ae 	blt.w	80087d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800867a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	3304      	adds	r3, #4
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe f9aa 	bl	80069e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800868c:	463b      	mov	r3, r7
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff ff6a 	bl	8008568 <prvSampleTimeNow>
 8008694:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b09      	cmp	r3, #9
 800869a:	f200 8097 	bhi.w	80087cc <prvProcessReceivedCommands+0x1a0>
 800869e:	a201      	add	r2, pc, #4	@ (adr r2, 80086a4 <prvProcessReceivedCommands+0x78>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	080086cd 	.word	0x080086cd
 80086a8:	080086cd 	.word	0x080086cd
 80086ac:	080086cd 	.word	0x080086cd
 80086b0:	08008743 	.word	0x08008743
 80086b4:	08008757 	.word	0x08008757
 80086b8:	080087a3 	.word	0x080087a3
 80086bc:	080086cd 	.word	0x080086cd
 80086c0:	080086cd 	.word	0x080086cd
 80086c4:	08008743 	.word	0x08008743
 80086c8:	08008757 	.word	0x08008757
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	18d1      	adds	r1, r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ec:	f7ff ff5c 	bl	80085a8 <prvInsertTimerInActiveList>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d06c      	beq.n	80087d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	d061      	beq.n	80087d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	441a      	add	r2, r3
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800871e:	f7ff fe01 	bl	8008324 <xTimerGenericCommand>
 8008722:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d152      	bne.n	80087d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	61bb      	str	r3, [r7, #24]
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	b2da      	uxtb	r2, r3
 800874e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008750:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008754:	e03d      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800875c:	f043 0301 	orr.w	r3, r3, #1
 8008760:	b2da      	uxtb	r2, r3
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	617b      	str	r3, [r7, #20]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	699a      	ldr	r2, [r3, #24]
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	18d1      	adds	r1, r2, r3
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800879a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800879c:	f7ff ff04 	bl	80085a8 <prvInsertTimerInActiveList>
					break;
 80087a0:	e017      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d103      	bne.n	80087b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b2:	f000 fbe9 	bl	8008f88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087b6:	e00c      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087ca:	e002      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087cc:	bf00      	nop
 80087ce:	e000      	b.n	80087d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80087d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087d2:	4b08      	ldr	r3, [pc, #32]	@ (80087f4 <prvProcessReceivedCommands+0x1c8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	1d39      	adds	r1, r7, #4
 80087d8:	2200      	movs	r2, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe fbd4 	bl	8006f88 <xQueueReceive>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f47f af26 	bne.w	8008634 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	3730      	adds	r7, #48	@ 0x30
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20009688 	.word	0x20009688

080087f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087fe:	e049      	b.n	8008894 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008800:	4b2e      	ldr	r3, [pc, #184]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880a:	4b2c      	ldr	r3, [pc, #176]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3304      	adds	r3, #4
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe f8e1 	bl	80069e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d02f      	beq.n	8008894 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4413      	add	r3, r2
 800883c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	429a      	cmp	r2, r3
 8008844:	d90e      	bls.n	8008864 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008852:	4b1a      	ldr	r3, [pc, #104]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	4610      	mov	r0, r2
 800885e:	f7fe f886 	bl	800696e <vListInsert>
 8008862:	e017      	b.n	8008894 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008864:	2300      	movs	r3, #0
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2300      	movs	r3, #0
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff fd58 	bl	8008324 <xTimerGenericCommand>
 8008874:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	603b      	str	r3, [r7, #0]
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008894:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1b0      	bne.n	8008800 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800889e:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088a4:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <prvSwitchTimerLists+0xc8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a04      	ldr	r2, [pc, #16]	@ (80088bc <prvSwitchTimerLists+0xc4>)
 80088aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088ac:	4a04      	ldr	r2, [pc, #16]	@ (80088c0 <prvSwitchTimerLists+0xc8>)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	6013      	str	r3, [r2, #0]
}
 80088b2:	bf00      	nop
 80088b4:	3718      	adds	r7, #24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20009680 	.word	0x20009680
 80088c0:	20009684 	.word	0x20009684

080088c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ca:	f000 f96d 	bl	8008ba8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088ce:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d120      	bne.n	8008918 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088d6:	4814      	ldr	r0, [pc, #80]	@ (8008928 <prvCheckForValidListAndQueue+0x64>)
 80088d8:	f7fd fff8 	bl	80068cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088dc:	4813      	ldr	r0, [pc, #76]	@ (800892c <prvCheckForValidListAndQueue+0x68>)
 80088de:	f7fd fff5 	bl	80068cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088e2:	4b13      	ldr	r3, [pc, #76]	@ (8008930 <prvCheckForValidListAndQueue+0x6c>)
 80088e4:	4a10      	ldr	r2, [pc, #64]	@ (8008928 <prvCheckForValidListAndQueue+0x64>)
 80088e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088e8:	4b12      	ldr	r3, [pc, #72]	@ (8008934 <prvCheckForValidListAndQueue+0x70>)
 80088ea:	4a10      	ldr	r2, [pc, #64]	@ (800892c <prvCheckForValidListAndQueue+0x68>)
 80088ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088ee:	2300      	movs	r3, #0
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	4b11      	ldr	r3, [pc, #68]	@ (8008938 <prvCheckForValidListAndQueue+0x74>)
 80088f4:	4a11      	ldr	r2, [pc, #68]	@ (800893c <prvCheckForValidListAndQueue+0x78>)
 80088f6:	2110      	movs	r1, #16
 80088f8:	200a      	movs	r0, #10
 80088fa:	f7fe f905 	bl	8006b08 <xQueueGenericCreateStatic>
 80088fe:	4603      	mov	r3, r0
 8008900:	4a08      	ldr	r2, [pc, #32]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 8008902:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008904:	4b07      	ldr	r3, [pc, #28]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d005      	beq.n	8008918 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800890c:	4b05      	ldr	r3, [pc, #20]	@ (8008924 <prvCheckForValidListAndQueue+0x60>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	490b      	ldr	r1, [pc, #44]	@ (8008940 <prvCheckForValidListAndQueue+0x7c>)
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fd2a 	bl	800736c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008918:	f000 f978 	bl	8008c0c <vPortExitCritical>
}
 800891c:	bf00      	nop
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20009688 	.word	0x20009688
 8008928:	20009658 	.word	0x20009658
 800892c:	2000966c 	.word	0x2000966c
 8008930:	20009680 	.word	0x20009680
 8008934:	20009684 	.word	0x20009684
 8008938:	20009734 	.word	0x20009734
 800893c:	20009694 	.word	0x20009694
 8008940:	0801ae70 	.word	0x0801ae70

08008944 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b04      	subs	r3, #4
 8008954:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800895c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3b04      	subs	r3, #4
 8008962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f023 0201 	bic.w	r2, r3, #1
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3b04      	subs	r3, #4
 8008972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008974:	4a0c      	ldr	r2, [pc, #48]	@ (80089a8 <pxPortInitialiseStack+0x64>)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3b14      	subs	r3, #20
 800897e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f06f 0202 	mvn.w	r2, #2
 8008992:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3b20      	subs	r3, #32
 8008998:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800899a:	68fb      	ldr	r3, [r7, #12]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	080089ad 	.word	0x080089ad

080089ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089b6:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <prvTaskExitError+0x58>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089be:	d00b      	beq.n	80089d8 <prvTaskExitError+0x2c>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <prvTaskExitError+0x28>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	60bb      	str	r3, [r7, #8]
}
 80089ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ec:	bf00      	nop
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d0fc      	beq.n	80089ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	200000d0 	.word	0x200000d0
	...

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	@ (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	20009158 	.word	0x20009158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	@ (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a66:	4b47      	ldr	r3, [pc, #284]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a47      	ldr	r2, [pc, #284]	@ (8008b88 <xPortStartScheduler+0x128>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10b      	bne.n	8008a88 <xPortStartScheduler+0x28>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	613b      	str	r3, [r7, #16]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a88:	4b3e      	ldr	r3, [pc, #248]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b8c <xPortStartScheduler+0x12c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d10b      	bne.n	8008aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aaa:	4b39      	ldr	r3, [pc, #228]	@ (8008b90 <xPortStartScheduler+0x130>)
 8008aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	22ff      	movs	r2, #255	@ 0xff
 8008aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	4b31      	ldr	r3, [pc, #196]	@ (8008b94 <xPortStartScheduler+0x134>)
 8008ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ad2:	4b31      	ldr	r3, [pc, #196]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad8:	e009      	b.n	8008aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008ada:	4b2f      	ldr	r3, [pc, #188]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af6:	2b80      	cmp	r3, #128	@ 0x80
 8008af8:	d0ef      	beq.n	8008ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008afa:	4b27      	ldr	r3, [pc, #156]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f1c3 0307 	rsb	r3, r3, #7
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d00b      	beq.n	8008b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b28:	4b1b      	ldr	r3, [pc, #108]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b30:	4a19      	ldr	r2, [pc, #100]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b3c:	4b17      	ldr	r3, [pc, #92]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a16      	ldr	r2, [pc, #88]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b48:	4b14      	ldr	r3, [pc, #80]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b54:	f000 f8da 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b58:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <xPortStartScheduler+0x140>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b5e:	f000 f8f9 	bl	8008d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b62:	4b10      	ldr	r3, [pc, #64]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a0f      	ldr	r2, [pc, #60]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b6e:	f7ff ff63 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b72:	f7ff f813 	bl	8007b9c <vTaskSwitchContext>
	prvTaskExitError();
 8008b76:	f7ff ff19 	bl	80089ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	e000ed00 	.word	0xe000ed00
 8008b88:	410fc271 	.word	0x410fc271
 8008b8c:	410fc270 	.word	0x410fc270
 8008b90:	e000e400 	.word	0xe000e400
 8008b94:	20009784 	.word	0x20009784
 8008b98:	20009788 	.word	0x20009788
 8008b9c:	e000ed20 	.word	0xe000ed20
 8008ba0:	200000d0 	.word	0x200000d0
 8008ba4:	e000ef34 	.word	0xe000ef34

08008ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bc2:	4b10      	ldr	r3, [pc, #64]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d110      	bne.n	8008bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c08 <vPortEnterCritical+0x60>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	603b      	str	r3, [r7, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <vPortEnterCritical+0x4a>
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	200000d0 	.word	0x200000d0
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <vPortExitCritical+0x26>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4a08      	ldr	r2, [pc, #32]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <vPortExitCritical+0x44>
 8008c44:	2300      	movs	r3, #0
 8008c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	200000d0 	.word	0x200000d0

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f01e 0f10 	tst.w	lr, #16
 8008c70:	bf08      	it	eq
 8008c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c84:	f380 8811 	msr	BASEPRI, r0
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f7fe ff84 	bl	8007b9c <vTaskSwitchContext>
 8008c94:	f04f 0000 	mov.w	r0, #0
 8008c98:	f380 8811 	msr	BASEPRI, r0
 8008c9c:	bc09      	pop	{r0, r3}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	f01e 0f10 	tst.w	lr, #16
 8008caa:	bf08      	it	eq
 8008cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cb0:	f380 8809 	msr	PSP, r0
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst>:
 8008cc0:	20009158 	.word	0x20009158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce2:	f7fe fea1 	bl	8007a28 <xTaskIncrementTick>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <xPortSysTickHandler+0x40>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	@ (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	@ (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <vPortSetupTimerInterrupt+0x44>)
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2e:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	20000004 	.word	0x20000004
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	e000e014 	.word	0xe000e014

08008d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d64 <vPortEnableVFP+0x10>
 8008d58:	6801      	ldr	r1, [r0, #0]
 8008d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d5e:	6001      	str	r1, [r0, #0]
 8008d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e000ed88 	.word	0xe000ed88

08008d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d6e:	f3ef 8305 	mrs	r3, IPSR
 8008d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d915      	bls.n	8008da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d7a:	4a18      	ldr	r2, [pc, #96]	@ (8008ddc <vPortValidateInterruptPriority+0x74>)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d84:	4b16      	ldr	r3, [pc, #88]	@ (8008de0 <vPortValidateInterruptPriority+0x78>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	7afa      	ldrb	r2, [r7, #11]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d20b      	bcs.n	8008da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008da6:	4b0f      	ldr	r3, [pc, #60]	@ (8008de4 <vPortValidateInterruptPriority+0x7c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <vPortValidateInterruptPriority+0x80>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d90b      	bls.n	8008dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	603b      	str	r3, [r7, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vPortValidateInterruptPriority+0x62>
	}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	e000e3f0 	.word	0xe000e3f0
 8008de0:	20009784 	.word	0x20009784
 8008de4:	e000ed0c 	.word	0xe000ed0c
 8008de8:	20009788 	.word	0x20009788

08008dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008df8:	f7fe fd5a 	bl	80078b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f70 <pvPortMalloc+0x184>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e04:	f000 f924 	bl	8009050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e08:	4b5a      	ldr	r3, [pc, #360]	@ (8008f74 <pvPortMalloc+0x188>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f040 8095 	bne.w	8008f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01e      	beq.n	8008e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d015      	beq.n	8008e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f023 0307 	bic.w	r3, r3, #7
 8008e34:	3308      	adds	r3, #8
 8008e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <pvPortMalloc+0x6e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	617b      	str	r3, [r7, #20]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d06f      	beq.n	8008f40 <pvPortMalloc+0x154>
 8008e60:	4b45      	ldr	r3, [pc, #276]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d86a      	bhi.n	8008f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e6a:	4b44      	ldr	r3, [pc, #272]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e6e:	4b43      	ldr	r3, [pc, #268]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e74:	e004      	b.n	8008e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d903      	bls.n	8008e92 <pvPortMalloc+0xa6>
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f1      	bne.n	8008e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e92:	4b37      	ldr	r3, [pc, #220]	@ (8008f70 <pvPortMalloc+0x184>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d051      	beq.n	8008f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d920      	bls.n	8008f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	613b      	str	r3, [r7, #16]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008efa:	69b8      	ldr	r0, [r7, #24]
 8008efc:	f000 f90a 	bl	8009114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b1b      	ldr	r3, [pc, #108]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d203      	bcs.n	8008f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f1a:	4b17      	ldr	r3, [pc, #92]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a18      	ldr	r2, [pc, #96]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <pvPortMalloc+0x188>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f36:	4b13      	ldr	r3, [pc, #76]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	4a11      	ldr	r2, [pc, #68]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f40:	f7fe fcc4 	bl	80078cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <pvPortMalloc+0x17a>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	60fb      	str	r3, [r7, #12]
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	e7fd      	b.n	8008f62 <pvPortMalloc+0x176>
	return pvReturn;
 8008f66:	69fb      	ldr	r3, [r7, #28]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3728      	adds	r7, #40	@ 0x28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20010cc4 	.word	0x20010cc4
 8008f74:	20010cd8 	.word	0x20010cd8
 8008f78:	20010cc8 	.word	0x20010cc8
 8008f7c:	20010cbc 	.word	0x20010cbc
 8008f80:	20010ccc 	.word	0x20010ccc
 8008f84:	20010cd0 	.word	0x20010cd0

08008f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04f      	beq.n	800903a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f9a:	2308      	movs	r3, #8
 8008f9c:	425b      	negs	r3, r3
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <vPortFree+0xbc>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10b      	bne.n	8008fce <vPortFree+0x46>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60fb      	str	r3, [r7, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <vPortFree+0x66>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60bb      	str	r3, [r7, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	bf00      	nop
 8008fec:	e7fd      	b.n	8008fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	4b14      	ldr	r3, [pc, #80]	@ (8009044 <vPortFree+0xbc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01e      	beq.n	800903a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11a      	bne.n	800903a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	4b0e      	ldr	r3, [pc, #56]	@ (8009044 <vPortFree+0xbc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	43db      	mvns	r3, r3
 800900e:	401a      	ands	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009014:	f7fe fc4c 	bl	80078b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <vPortFree+0xc0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4413      	add	r3, r2
 8009022:	4a09      	ldr	r2, [pc, #36]	@ (8009048 <vPortFree+0xc0>)
 8009024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009026:	6938      	ldr	r0, [r7, #16]
 8009028:	f000 f874 	bl	8009114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800902c:	4b07      	ldr	r3, [pc, #28]	@ (800904c <vPortFree+0xc4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a06      	ldr	r2, [pc, #24]	@ (800904c <vPortFree+0xc4>)
 8009034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009036:	f7fe fc49 	bl	80078cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800903a:	bf00      	nop
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20010cd8 	.word	0x20010cd8
 8009048:	20010cc8 	.word	0x20010cc8
 800904c:	20010cd4 	.word	0x20010cd4

08009050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009056:	f247 5330 	movw	r3, #30000	@ 0x7530
 800905a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800905c:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <prvHeapInit+0xac>)
 800905e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3307      	adds	r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	4a1f      	ldr	r2, [pc, #124]	@ (80090fc <prvHeapInit+0xac>)
 8009080:	4413      	add	r3, r2
 8009082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <prvHeapInit+0xb0>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800908e:	4b1c      	ldr	r3, [pc, #112]	@ (8009100 <prvHeapInit+0xb0>)
 8009090:	2200      	movs	r2, #0
 8009092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800909c:	2208      	movs	r2, #8
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4a15      	ldr	r2, [pc, #84]	@ (8009104 <prvHeapInit+0xb4>)
 80090b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090b2:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <prvHeapInit+0xb4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ba:	4b12      	ldr	r3, [pc, #72]	@ (8009104 <prvHeapInit+0xb4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <prvHeapInit+0xb4>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009108 <prvHeapInit+0xb8>)
 80090de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a09      	ldr	r2, [pc, #36]	@ (800910c <prvHeapInit+0xbc>)
 80090e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090e8:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <prvHeapInit+0xc0>)
 80090ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090ee:	601a      	str	r2, [r3, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	2000978c 	.word	0x2000978c
 8009100:	20010cbc 	.word	0x20010cbc
 8009104:	20010cc4 	.word	0x20010cc4
 8009108:	20010ccc 	.word	0x20010ccc
 800910c:	20010cc8 	.word	0x20010cc8
 8009110:	20010cd8 	.word	0x20010cd8

08009114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800911c:	4b28      	ldr	r3, [pc, #160]	@ (80091c0 <prvInsertBlockIntoFreeList+0xac>)
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e002      	b.n	8009128 <prvInsertBlockIntoFreeList+0x14>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	429a      	cmp	r2, r3
 8009130:	d8f7      	bhi.n	8009122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4413      	add	r3, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d108      	bne.n	8009156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	441a      	add	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d118      	bne.n	800919c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d00d      	beq.n	8009192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e008      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009192:	4b0c      	ldr	r3, [pc, #48]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	e003      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d002      	beq.n	80091b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20010cbc 	.word	0x20010cbc
 80091c4:	20010cc4 	.word	0x20010cc4

080091c8 <arm_mat_mult_f32>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	460c      	mov	r4, r1
 80091ce:	b08b      	sub	sp, #44	@ 0x2c
 80091d0:	8825      	ldrh	r5, [r4, #0]
 80091d2:	9107      	str	r1, [sp, #28]
 80091d4:	8841      	ldrh	r1, [r0, #2]
 80091d6:	8806      	ldrh	r6, [r0, #0]
 80091d8:	6843      	ldr	r3, [r0, #4]
 80091da:	6857      	ldr	r7, [r2, #4]
 80091dc:	6860      	ldr	r0, [r4, #4]
 80091de:	9602      	str	r6, [sp, #8]
 80091e0:	428d      	cmp	r5, r1
 80091e2:	8864      	ldrh	r4, [r4, #2]
 80091e4:	f040 80f9 	bne.w	80093da <arm_mat_mult_f32+0x212>
 80091e8:	8811      	ldrh	r1, [r2, #0]
 80091ea:	42b1      	cmp	r1, r6
 80091ec:	f040 80f5 	bne.w	80093da <arm_mat_mult_f32+0x212>
 80091f0:	8851      	ldrh	r1, [r2, #2]
 80091f2:	42a1      	cmp	r1, r4
 80091f4:	f040 80f1 	bne.w	80093da <arm_mat_mult_f32+0x212>
 80091f8:	00aa      	lsls	r2, r5, #2
 80091fa:	2901      	cmp	r1, #1
 80091fc:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8009200:	ea4f 0481 	mov.w	r4, r1, lsl #2
 8009204:	f005 0e03 	and.w	lr, r5, #3
 8009208:	9206      	str	r2, [sp, #24]
 800920a:	d170      	bne.n	80092ee <arm_mat_mult_f32+0x126>
 800920c:	1d01      	adds	r1, r0, #4
 800920e:	9105      	str	r1, [sp, #20]
 8009210:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8009214:	4602      	mov	r2, r0
 8009216:	f107 0904 	add.w	r9, r7, #4
 800921a:	9101      	str	r1, [sp, #4]
 800921c:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 8009220:	f103 0a10 	add.w	sl, r3, #16
 8009224:	f1aa 0310 	sub.w	r3, sl, #16
 8009228:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800922c:	9303      	str	r3, [sp, #12]
 800922e:	f1a9 0704 	sub.w	r7, r9, #4
 8009232:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 80093e4 <arm_mat_mult_f32+0x21c>
 8009236:	f1bc 0f00 	cmp.w	ip, #0
 800923a:	d052      	beq.n	80092e2 <arm_mat_mult_f32+0x11a>
 800923c:	f102 0008 	add.w	r0, r2, #8
 8009240:	4653      	mov	r3, sl
 8009242:	4665      	mov	r5, ip
 8009244:	4611      	mov	r1, r2
 8009246:	ed13 6a04 	vldr	s12, [r3, #-16]
 800924a:	ed91 7a00 	vldr	s14, [r1]
 800924e:	ed53 4a03 	vldr	s9, [r3, #-12]
 8009252:	edd0 6a00 	vldr	s13, [r0]
 8009256:	ed13 5a02 	vldr	s10, [r3, #-8]
 800925a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800925e:	190e      	adds	r6, r1, r4
 8009260:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009264:	ed96 6a00 	vldr	s12, [r6]
 8009268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800926c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009270:	1906      	adds	r6, r0, r4
 8009272:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009276:	ee26 7a85 	vmul.f32	s14, s13, s10
 800927a:	edd6 7a00 	vldr	s15, [r6]
 800927e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009282:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009286:	3d01      	subs	r5, #1
 8009288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800928c:	f101 0110 	add.w	r1, r1, #16
 8009290:	f100 0010 	add.w	r0, r0, #16
 8009294:	f103 0310 	add.w	r3, r3, #16
 8009298:	d1d5      	bne.n	8009246 <arm_mat_mult_f32+0x7e>
 800929a:	9b01      	ldr	r3, [sp, #4]
 800929c:	4659      	mov	r1, fp
 800929e:	441a      	add	r2, r3
 80092a0:	f1be 0f00 	cmp.w	lr, #0
 80092a4:	d00b      	beq.n	80092be <arm_mat_mult_f32+0xf6>
 80092a6:	4673      	mov	r3, lr
 80092a8:	ed92 7a00 	vldr	s14, [r2]
 80092ac:	ecf1 6a01 	vldmia	r1!, {s13}
 80092b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80092b4:	3b01      	subs	r3, #1
 80092b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092ba:	4422      	add	r2, r4
 80092bc:	d1f4      	bne.n	80092a8 <arm_mat_mult_f32+0xe0>
 80092be:	ece7 7a01 	vstmia	r7!, {s15}
 80092c2:	454f      	cmp	r7, r9
 80092c4:	4642      	mov	r2, r8
 80092c6:	f108 0804 	add.w	r8, r8, #4
 80092ca:	d1b2      	bne.n	8009232 <arm_mat_mult_f32+0x6a>
 80092cc:	9b06      	ldr	r3, [sp, #24]
 80092ce:	449b      	add	fp, r3
 80092d0:	449a      	add	sl, r3
 80092d2:	9b02      	ldr	r3, [sp, #8]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	44a1      	add	r9, r4
 80092d8:	9302      	str	r3, [sp, #8]
 80092da:	d004      	beq.n	80092e6 <arm_mat_mult_f32+0x11e>
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	e7a0      	b.n	8009224 <arm_mat_mult_f32+0x5c>
 80092e2:	9903      	ldr	r1, [sp, #12]
 80092e4:	e7dc      	b.n	80092a0 <arm_mat_mult_f32+0xd8>
 80092e6:	4618      	mov	r0, r3
 80092e8:	b00b      	add	sp, #44	@ 0x2c
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ee:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 80092f2:	0092      	lsls	r2, r2, #2
 80092f4:	010e      	lsls	r6, r1, #4
 80092f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f8:	00ca      	lsls	r2, r1, #3
 80092fa:	9204      	str	r2, [sp, #16]
 80092fc:	fb06 f20c 	mul.w	r2, r6, ip
 8009300:	1d05      	adds	r5, r0, #4
 8009302:	9203      	str	r2, [sp, #12]
 8009304:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8009308:	eb07 0b04 	add.w	fp, r7, r4
 800930c:	9505      	str	r5, [sp, #20]
 800930e:	9201      	str	r2, [sp, #4]
 8009310:	f103 0a10 	add.w	sl, r3, #16
 8009314:	f1aa 0310 	sub.w	r3, sl, #16
 8009318:	9308      	str	r3, [sp, #32]
 800931a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800931c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009320:	eb0b 0803 	add.w	r8, fp, r3
 8009324:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 80093e4 <arm_mat_mult_f32+0x21c>
 8009328:	f1bc 0f00 	cmp.w	ip, #0
 800932c:	d053      	beq.n	80093d6 <arm_mat_mult_f32+0x20e>
 800932e:	9b04      	ldr	r3, [sp, #16]
 8009330:	4665      	mov	r5, ip
 8009332:	18c1      	adds	r1, r0, r3
 8009334:	4602      	mov	r2, r0
 8009336:	4653      	mov	r3, sl
 8009338:	ed92 6a00 	vldr	s12, [r2]
 800933c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8009340:	ed53 4a03 	vldr	s9, [r3, #-12]
 8009344:	ed53 6a02 	vldr	s13, [r3, #-8]
 8009348:	ed91 5a00 	vldr	s10, [r1]
 800934c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8009350:	1917      	adds	r7, r2, r4
 8009352:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009356:	ed97 6a00 	vldr	s12, [r7]
 800935a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800935e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009362:	190f      	adds	r7, r1, r4
 8009364:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009368:	ee26 7a85 	vmul.f32	s14, s13, s10
 800936c:	edd7 7a00 	vldr	s15, [r7]
 8009370:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009374:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009378:	3d01      	subs	r5, #1
 800937a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800937e:	4432      	add	r2, r6
 8009380:	4431      	add	r1, r6
 8009382:	f103 0310 	add.w	r3, r3, #16
 8009386:	d1d7      	bne.n	8009338 <arm_mat_mult_f32+0x170>
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	9a01      	ldr	r2, [sp, #4]
 800938c:	4418      	add	r0, r3
 800938e:	f1be 0f00 	cmp.w	lr, #0
 8009392:	d00b      	beq.n	80093ac <arm_mat_mult_f32+0x1e4>
 8009394:	4673      	mov	r3, lr
 8009396:	edd0 6a00 	vldr	s13, [r0]
 800939a:	ecb2 7a01 	vldmia	r2!, {s14}
 800939e:	ee27 7a26 	vmul.f32	s14, s14, s13
 80093a2:	3b01      	subs	r3, #1
 80093a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093a8:	4420      	add	r0, r4
 80093aa:	d1f4      	bne.n	8009396 <arm_mat_mult_f32+0x1ce>
 80093ac:	ece8 7a01 	vstmia	r8!, {s15}
 80093b0:	45d8      	cmp	r8, fp
 80093b2:	4648      	mov	r0, r9
 80093b4:	f109 0904 	add.w	r9, r9, #4
 80093b8:	d1b4      	bne.n	8009324 <arm_mat_mult_f32+0x15c>
 80093ba:	9a01      	ldr	r2, [sp, #4]
 80093bc:	9b06      	ldr	r3, [sp, #24]
 80093be:	4611      	mov	r1, r2
 80093c0:	4419      	add	r1, r3
 80093c2:	449a      	add	sl, r3
 80093c4:	9b02      	ldr	r3, [sp, #8]
 80093c6:	9101      	str	r1, [sp, #4]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	44a3      	add	fp, r4
 80093cc:	9302      	str	r3, [sp, #8]
 80093ce:	d08a      	beq.n	80092e6 <arm_mat_mult_f32+0x11e>
 80093d0:	9b07      	ldr	r3, [sp, #28]
 80093d2:	6858      	ldr	r0, [r3, #4]
 80093d4:	e79e      	b.n	8009314 <arm_mat_mult_f32+0x14c>
 80093d6:	9a08      	ldr	r2, [sp, #32]
 80093d8:	e7d9      	b.n	800938e <arm_mat_mult_f32+0x1c6>
 80093da:	f06f 0002 	mvn.w	r0, #2
 80093de:	b00b      	add	sp, #44	@ 0x2c
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	00000000 	.word	0x00000000

080093e8 <arm_mat_init_f32>:
 80093e8:	8001      	strh	r1, [r0, #0]
 80093ea:	8042      	strh	r2, [r0, #2]
 80093ec:	6043      	str	r3, [r0, #4]
 80093ee:	4770      	bx	lr

080093f0 <handle_message_memory.constprop.4>:
 80093f0:	b082      	sub	sp, #8
 80093f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f6:	b0a7      	sub	sp, #156	@ 0x9c
 80093f8:	ac30      	add	r4, sp, #192	@ 0xc0
 80093fa:	e884 000c 	stmia.w	r4, {r2, r3}
 80093fe:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009400:	e9dd 9236 	ldrd	r9, r2, [sp, #216]	@ 0xd8
 8009404:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8009406:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009408:	e9dd a733 	ldrd	sl, r7, [sp, #204]	@ 0xcc
 800940c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800940e:	9314      	str	r3, [sp, #80]	@ 0x50
 8009410:	920d      	str	r2, [sp, #52]	@ 0x34
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 81a5 	beq.w	8009762 <handle_message_memory.constprop.4+0x372>
 8009418:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	930a      	str	r3, [sp, #40]	@ 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	d036      	beq.n	8009490 <handle_message_memory.constprop.4+0xa0>
 8009422:	2300      	movs	r3, #0
 8009424:	930a      	str	r3, [sp, #40]	@ 0x28
 8009426:	469b      	mov	fp, r3
 8009428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 8009430:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8009434:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009438:	6899      	ldr	r1, [r3, #8]
 800943a:	920e      	str	r2, [sp, #56]	@ 0x38
 800943c:	910f      	str	r1, [sp, #60]	@ 0x3c
 800943e:	7c1a      	ldrb	r2, [r3, #16]
 8009440:	68d9      	ldr	r1, [r3, #12]
 8009442:	791d      	ldrb	r5, [r3, #4]
 8009444:	7e1c      	ldrb	r4, [r3, #24]
 8009446:	9110      	str	r1, [sp, #64]	@ 0x40
 8009448:	6959      	ldr	r1, [r3, #20]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	9109      	str	r1, [sp, #36]	@ 0x24
 800944e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009450:	2a00      	cmp	r2, #0
 8009452:	d06e      	beq.n	8009532 <handle_message_memory.constprop.4+0x142>
 8009454:	2900      	cmp	r1, #0
 8009456:	f000 80c8 	beq.w	80095ea <handle_message_memory.constprop.4+0x1fa>
 800945a:	2c00      	cmp	r4, #0
 800945c:	f040 80c5 	bne.w	80095ea <handle_message_memory.constprop.4+0x1fa>
 8009460:	940c      	str	r4, [sp, #48]	@ 0x30
 8009462:	2f00      	cmp	r7, #0
 8009464:	d168      	bne.n	8009538 <handle_message_memory.constprop.4+0x148>
 8009466:	2d10      	cmp	r5, #16
 8009468:	f000 8084 	beq.w	8009574 <handle_message_memory.constprop.4+0x184>
 800946c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800946e:	2b00      	cmp	r3, #0
 8009470:	f040 80c0 	bne.w	80095f4 <handle_message_memory.constprop.4+0x204>
 8009474:	2d12      	cmp	r5, #18
 8009476:	f000 8157 	beq.w	8009728 <handle_message_memory.constprop.4+0x338>
 800947a:	9309      	str	r3, [sp, #36]	@ 0x24
 800947c:	2d64      	cmp	r5, #100	@ 0x64
 800947e:	d00d      	beq.n	800949c <handle_message_memory.constprop.4+0xac>
 8009480:	2f00      	cmp	r7, #0
 8009482:	d138      	bne.n	80094f6 <handle_message_memory.constprop.4+0x106>
 8009484:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f10b 0b01 	add.w	fp, fp, #1
 800948c:	459b      	cmp	fp, r3
 800948e:	d3cb      	bcc.n	8009428 <handle_message_memory.constprop.4+0x38>
 8009490:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009492:	b027      	add	sp, #156	@ 0x9c
 8009494:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	b002      	add	sp, #8
 800949a:	4770      	bx	lr
 800949c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 814f 	beq.w	8009742 <handle_message_memory.constprop.4+0x352>
 80094a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80094a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80094a8:	4613      	mov	r3, r2
 80094aa:	2a00      	cmp	r2, #0
 80094ac:	bf08      	it	eq
 80094ae:	460b      	moveq	r3, r1
 80094b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094b2:	b1c7      	cbz	r7, 80094e6 <handle_message_memory.constprop.4+0xf6>
 80094b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094b6:	2400      	movs	r4, #0
 80094b8:	1e5d      	subs	r5, r3, #1
 80094ba:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 80094be:	462a      	mov	r2, r5
 80094c0:	4649      	mov	r1, r9
 80094c2:	4630      	mov	r0, r6
 80094c4:	f010 faa5 	bl	8019a12 <memcmp>
 80094c8:	4603      	mov	r3, r0
 80094ca:	49a8      	ldr	r1, [pc, #672]	@ (800976c <handle_message_memory.constprop.4+0x37c>)
 80094cc:	1970      	adds	r0, r6, r5
 80094ce:	2205      	movs	r2, #5
 80094d0:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
 80094d4:	3401      	adds	r4, #1
 80094d6:	b923      	cbnz	r3, 80094e2 <handle_message_memory.constprop.4+0xf2>
 80094d8:	f010 fa9b 	bl	8019a12 <memcmp>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f000 8134 	beq.w	800974a <handle_message_memory.constprop.4+0x35a>
 80094e2:	42a7      	cmp	r7, r4
 80094e4:	d1e9      	bne.n	80094ba <handle_message_memory.constprop.4+0xca>
 80094e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80094ea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80094ec:	fb01 3302 	mla	r3, r1, r2, r3
 80094f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	d0c6      	beq.n	8009484 <handle_message_memory.constprop.4+0x94>
 80094f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80094f8:	f7f6 fe82 	bl	8000200 <strlen>
 80094fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094fe:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8009502:	3001      	adds	r0, #1
 8009504:	9000      	str	r0, [sp, #0]
 8009506:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009508:	ae36      	add	r6, sp, #216	@ 0xd8
 800950a:	ac18      	add	r4, sp, #96	@ 0x60
 800950c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009510:	4620      	mov	r0, r4
 8009512:	f003 fe39 	bl	800d188 <micro_ros_string_utilities_remove_tail_chars>
 8009516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009518:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	910d      	str	r1, [sp, #52]	@ 0x34
 8009520:	f10b 0b01 	add.w	fp, fp, #1
 8009524:	455b      	cmp	r3, fp
 8009526:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800952a:	4681      	mov	r9, r0
 800952c:	f63f af7c 	bhi.w	8009428 <handle_message_memory.constprop.4+0x38>
 8009530:	e7ae      	b.n	8009490 <handle_message_memory.constprop.4+0xa0>
 8009532:	920c      	str	r2, [sp, #48]	@ 0x30
 8009534:	2f00      	cmp	r7, #0
 8009536:	d096      	beq.n	8009466 <handle_message_memory.constprop.4+0x76>
 8009538:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800953a:	9337      	str	r3, [sp, #220]	@ 0xdc
 800953c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800953e:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8009542:	ae36      	add	r6, sp, #216	@ 0xd8
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800954a:	4630      	mov	r0, r6
 800954c:	f003 fdee 	bl	800d12c <micro_ros_string_utilities_append>
 8009550:	4b87      	ldr	r3, [pc, #540]	@ (8009770 <handle_message_memory.constprop.4+0x380>)
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	f10d 0860 	add.w	r8, sp, #96	@ 0x60
 8009558:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800955c:	4640      	mov	r0, r8
 800955e:	f003 fde5 	bl	800d12c <micro_ros_string_utilities_append>
 8009562:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8009566:	2d10      	cmp	r5, #16
 8009568:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800956c:	4681      	mov	r9, r0
 800956e:	910d      	str	r1, [sp, #52]	@ 0x34
 8009570:	f47f af7c 	bne.w	800946c <handle_message_memory.constprop.4+0x7c>
 8009574:	2c00      	cmp	r4, #0
 8009576:	f000 80c7 	beq.w	8009708 <handle_message_memory.constprop.4+0x318>
 800957a:	2301      	movs	r3, #1
 800957c:	9311      	str	r3, [sp, #68]	@ 0x44
 800957e:	2f00      	cmp	r7, #0
 8009580:	d144      	bne.n	800960c <handle_message_memory.constprop.4+0x21c>
 8009582:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8009586:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009588:	2d12      	cmp	r5, #18
 800958a:	fb01 3302 	mla	r3, r1, r2, r3
 800958e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009590:	f47f af74 	bne.w	800947c <handle_message_memory.constprop.4+0x8c>
 8009594:	4b77      	ldr	r3, [pc, #476]	@ (8009774 <handle_message_memory.constprop.4+0x384>)
 8009596:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009598:	6819      	ldr	r1, [r3, #0]
 800959a:	f003 f807 	bl	800c5ac <get_message_typesupport_handle>
 800959e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095a0:	6845      	ldr	r5, [r0, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 80ea 	bne.w	800977c <handle_message_memory.constprop.4+0x38c>
 80095a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095aa:	9337      	str	r3, [sp, #220]	@ 0xdc
 80095ac:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 80095b0:	ae36      	add	r6, sp, #216	@ 0xd8
 80095b2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80095b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095b8:	9335      	str	r3, [sp, #212]	@ 0xd4
 80095ba:	f10d 0810 	add.w	r8, sp, #16
 80095be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095c0:	9330      	str	r3, [sp, #192]	@ 0xc0
 80095c2:	e9cd a733 	strd	sl, r7, [sp, #204]	@ 0xcc
 80095c6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80095ca:	ab32      	add	r3, sp, #200	@ 0xc8
 80095cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80095d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80095d6:	4419      	add	r1, r3
 80095d8:	ab30      	add	r3, sp, #192	@ 0xc0
 80095da:	cb0c      	ldmia	r3, {r2, r3}
 80095dc:	4628      	mov	r0, r5
 80095de:	f7ff ff07 	bl	80093f0 <handle_message_memory.constprop.4>
 80095e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e4:	4403      	add	r3, r0
 80095e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095e8:	e74a      	b.n	8009480 <handle_message_memory.constprop.4+0x90>
 80095ea:	2d10      	cmp	r5, #16
 80095ec:	d07a      	beq.n	80096e4 <handle_message_memory.constprop.4+0x2f4>
 80095ee:	2f00      	cmp	r7, #0
 80095f0:	f040 8097 	bne.w	8009722 <handle_message_memory.constprop.4+0x332>
 80095f4:	2d12      	cmp	r5, #18
 80095f6:	d029      	beq.n	800964c <handle_message_memory.constprop.4+0x25c>
 80095f8:	2d64      	cmp	r5, #100	@ 0x64
 80095fa:	d177      	bne.n	80096ec <handle_message_memory.constprop.4+0x2fc>
 80095fc:	230c      	movs	r3, #12
 80095fe:	9311      	str	r3, [sp, #68]	@ 0x44
 8009600:	2c00      	cmp	r4, #0
 8009602:	d079      	beq.n	80096f8 <handle_message_memory.constprop.4+0x308>
 8009604:	2301      	movs	r3, #1
 8009606:	930c      	str	r3, [sp, #48]	@ 0x30
 8009608:	2f00      	cmp	r7, #0
 800960a:	d0ba      	beq.n	8009582 <handle_message_memory.constprop.4+0x192>
 800960c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800960e:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
 8009612:	2400      	movs	r4, #0
 8009614:	1e5e      	subs	r6, r3, #1
 8009616:	f85a b034 	ldr.w	fp, [sl, r4, lsl #3]
 800961a:	4658      	mov	r0, fp
 800961c:	f7f6 fdf0 	bl	8000200 <strlen>
 8009620:	4649      	mov	r1, r9
 8009622:	4602      	mov	r2, r0
 8009624:	4658      	mov	r0, fp
 8009626:	f010 f9f4 	bl	8019a12 <memcmp>
 800962a:	4605      	mov	r5, r0
 800962c:	eb0a 08c4 	add.w	r8, sl, r4, lsl #3
 8009630:	4632      	mov	r2, r6
 8009632:	3401      	adds	r4, #1
 8009634:	4649      	mov	r1, r9
 8009636:	4658      	mov	r0, fp
 8009638:	b91d      	cbnz	r5, 8009642 <handle_message_memory.constprop.4+0x252>
 800963a:	f010 f9ea 	bl	8019a12 <memcmp>
 800963e:	2800      	cmp	r0, #0
 8009640:	d079      	beq.n	8009736 <handle_message_memory.constprop.4+0x346>
 8009642:	42a7      	cmp	r7, r4
 8009644:	d8e7      	bhi.n	8009616 <handle_message_memory.constprop.4+0x226>
 8009646:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 800964a:	e79a      	b.n	8009582 <handle_message_memory.constprop.4+0x192>
 800964c:	4b49      	ldr	r3, [pc, #292]	@ (8009774 <handle_message_memory.constprop.4+0x384>)
 800964e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009650:	6819      	ldr	r1, [r3, #0]
 8009652:	f002 ffab 	bl	800c5ac <get_message_typesupport_handle>
 8009656:	6843      	ldr	r3, [r0, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	9311      	str	r3, [sp, #68]	@ 0x44
 800965c:	b90c      	cbnz	r4, 8009662 <handle_message_memory.constprop.4+0x272>
 800965e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009660:	9309      	str	r3, [sp, #36]	@ 0x24
 8009662:	2f00      	cmp	r7, #0
 8009664:	d14d      	bne.n	8009702 <handle_message_memory.constprop.4+0x312>
 8009666:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009668:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800966a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800966c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800966e:	fb04 3302 	mla	r3, r4, r2, r3
 8009672:	930a      	str	r3, [sp, #40]	@ 0x28
 8009674:	4b3f      	ldr	r3, [pc, #252]	@ (8009774 <handle_message_memory.constprop.4+0x384>)
 8009676:	6819      	ldr	r1, [r3, #0]
 8009678:	f002 ff98 	bl	800c5ac <get_message_typesupport_handle>
 800967c:	6845      	ldr	r5, [r0, #4]
 800967e:	2c00      	cmp	r4, #0
 8009680:	f43f af00 	beq.w	8009484 <handle_message_memory.constprop.4+0x94>
 8009684:	ab32      	add	r3, sp, #200	@ 0xc8
 8009686:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 800968a:	46cb      	mov	fp, r9
 800968c:	46d1      	mov	r9, sl
 800968e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009692:	930c      	str	r3, [sp, #48]	@ 0x30
 8009694:	2400      	movs	r4, #0
 8009696:	ae36      	add	r6, sp, #216	@ 0xd8
 8009698:	f10d 0810 	add.w	r8, sp, #16
 800969c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800969e:	9337      	str	r3, [sp, #220]	@ 0xdc
 80096a0:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 80096a4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80096a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096aa:	9335      	str	r3, [sp, #212]	@ 0xd4
 80096ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096ae:	9330      	str	r3, [sp, #192]	@ 0xc0
 80096b0:	e9cd 9733 	strd	r9, r7, [sp, #204]	@ 0xcc
 80096b4:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80096b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096bc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80096c0:	ab30      	add	r3, sp, #192	@ 0xc0
 80096c2:	cb0c      	ldmia	r3, {r2, r3}
 80096c4:	2100      	movs	r1, #0
 80096c6:	4628      	mov	r0, r5
 80096c8:	f7ff fe92 	bl	80093f0 <handle_message_memory.constprop.4>
 80096cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ce:	3401      	adds	r4, #1
 80096d0:	429c      	cmp	r4, r3
 80096d2:	4482      	add	sl, r0
 80096d4:	d1e2      	bne.n	800969c <handle_message_memory.constprop.4+0x2ac>
 80096d6:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 80096da:	46ca      	mov	sl, r9
 80096dc:	46d9      	mov	r9, fp
 80096de:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 80096e2:	e6cd      	b.n	8009480 <handle_message_memory.constprop.4+0x90>
 80096e4:	2301      	movs	r3, #1
 80096e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80096e8:	2564      	movs	r5, #100	@ 0x64
 80096ea:	e6ba      	b.n	8009462 <handle_message_memory.constprop.4+0x72>
 80096ec:	4b22      	ldr	r3, [pc, #136]	@ (8009778 <handle_message_memory.constprop.4+0x388>)
 80096ee:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80096f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80096f4:	2c00      	cmp	r4, #0
 80096f6:	d185      	bne.n	8009604 <handle_message_memory.constprop.4+0x214>
 80096f8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80096fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fc:	2301      	movs	r3, #1
 80096fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8009700:	e73d      	b.n	800957e <handle_message_memory.constprop.4+0x18e>
 8009702:	2301      	movs	r3, #1
 8009704:	930c      	str	r3, [sp, #48]	@ 0x30
 8009706:	e781      	b.n	800960c <handle_message_memory.constprop.4+0x21c>
 8009708:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800970a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800970c:	4613      	mov	r3, r2
 800970e:	2a00      	cmp	r2, #0
 8009710:	bf08      	it	eq
 8009712:	460b      	moveq	r3, r1
 8009714:	9309      	str	r3, [sp, #36]	@ 0x24
 8009716:	bb0f      	cbnz	r7, 800975c <handle_message_memory.constprop.4+0x36c>
 8009718:	461a      	mov	r2, r3
 800971a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800971c:	4413      	add	r3, r2
 800971e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009720:	e6b0      	b.n	8009484 <handle_message_memory.constprop.4+0x94>
 8009722:	2301      	movs	r3, #1
 8009724:	930c      	str	r3, [sp, #48]	@ 0x30
 8009726:	e707      	b.n	8009538 <handle_message_memory.constprop.4+0x148>
 8009728:	4b12      	ldr	r3, [pc, #72]	@ (8009774 <handle_message_memory.constprop.4+0x384>)
 800972a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800972c:	6819      	ldr	r1, [r3, #0]
 800972e:	f002 ff3d 	bl	800c5ac <get_message_typesupport_handle>
 8009732:	6845      	ldr	r5, [r0, #4]
 8009734:	e738      	b.n	80095a8 <handle_message_memory.constprop.4+0x1b8>
 8009736:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800973a:	9309      	str	r3, [sp, #36]	@ 0x24
 800973c:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 8009740:	e71f      	b.n	8009582 <handle_message_memory.constprop.4+0x192>
 8009742:	a821      	add	r0, sp, #132	@ 0x84
 8009744:	f002 f8d6 	bl	800b8f4 <rcutils_get_default_allocator>
 8009748:	e6ac      	b.n	80094a4 <handle_message_memory.constprop.4+0xb4>
 800974a:	6873      	ldr	r3, [r6, #4]
 800974c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800974e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8009752:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009754:	fb01 3302 	mla	r3, r1, r2, r3
 8009758:	930a      	str	r3, [sp, #40]	@ 0x28
 800975a:	e6ca      	b.n	80094f2 <handle_message_memory.constprop.4+0x102>
 800975c:	2301      	movs	r3, #1
 800975e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009760:	e754      	b.n	800960c <handle_message_memory.constprop.4+0x21c>
 8009762:	a81c      	add	r0, sp, #112	@ 0x70
 8009764:	f002 f8c6 	bl	800b8f4 <rcutils_get_default_allocator>
 8009768:	e656      	b.n	8009418 <handle_message_memory.constprop.4+0x28>
 800976a:	bf00      	nop
 800976c:	0801aee0 	.word	0x0801aee0
 8009770:	0801aedc 	.word	0x0801aedc
 8009774:	20000384 	.word	0x20000384
 8009778:	0801aee8 	.word	0x0801aee8
 800977c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d180      	bne.n	8009684 <handle_message_memory.constprop.4+0x294>
 8009782:	e67d      	b.n	8009480 <handle_message_memory.constprop.4+0x90>

08009784 <handle_message_memory.constprop.2>:
 8009784:	b082      	sub	sp, #8
 8009786:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978a:	ed2d 8b02 	vpush	{d8}
 800978e:	b0a9      	sub	sp, #164	@ 0xa4
 8009790:	ac34      	add	r4, sp, #208	@ 0xd0
 8009792:	e884 000c 	stmia.w	r4, {r2, r3}
 8009796:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 800979a:	9216      	str	r2, [sp, #88]	@ 0x58
 800979c:	e9dd 723a 	ldrd	r7, r2, [sp, #232]	@ 0xe8
 80097a0:	9308      	str	r3, [sp, #32]
 80097a2:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80097a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80097a6:	9112      	str	r1, [sp, #72]	@ 0x48
 80097a8:	9314      	str	r3, [sp, #80]	@ 0x50
 80097aa:	920c      	str	r2, [sp, #48]	@ 0x30
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f000 8210 	beq.w	8009bd2 <handle_message_memory.constprop.2+0x44e>
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	9215      	str	r2, [sp, #84]	@ 0x54
 80097b8:	ee08 3a10 	vmov	s16, r3
 80097bc:	4603      	mov	r3, r0
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 81c0 	beq.w	8009b46 <handle_message_memory.constprop.2+0x3c2>
 80097c6:	2300      	movs	r3, #0
 80097c8:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 80097cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 80097d6:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 80097da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80097de:	920f      	str	r2, [sp, #60]	@ 0x3c
 80097e0:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 80097e4:	7c1a      	ldrb	r2, [r3, #16]
 80097e6:	791e      	ldrb	r6, [r3, #4]
 80097e8:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80097ec:	f893 9018 	ldrb.w	r9, [r3, #24]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	9110      	str	r1, [sp, #64]	@ 0x40
 80097f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	d056      	beq.n	80098a8 <handle_message_memory.constprop.2+0x124>
 80097fa:	f1b8 0f00 	cmp.w	r8, #0
 80097fe:	d002      	beq.n	8009806 <handle_message_memory.constprop.2+0x82>
 8009800:	f1b9 0f00 	cmp.w	r9, #0
 8009804:	d050      	beq.n	80098a8 <handle_message_memory.constprop.2+0x124>
 8009806:	9b08      	ldr	r3, [sp, #32]
 8009808:	2e10      	cmp	r6, #16
 800980a:	bf08      	it	eq
 800980c:	2664      	moveq	r6, #100	@ 0x64
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 8154 	bne.w	8009abc <handle_message_memory.constprop.2+0x338>
 8009814:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009816:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009818:	2e12      	cmp	r6, #18
 800981a:	4413      	add	r3, r2
 800981c:	930e      	str	r3, [sp, #56]	@ 0x38
 800981e:	f000 80f8 	beq.w	8009a12 <handle_message_memory.constprop.2+0x28e>
 8009822:	2e64      	cmp	r6, #100	@ 0x64
 8009824:	f040 8164 	bne.w	8009af0 <handle_message_memory.constprop.2+0x36c>
 8009828:	f1b9 0f00 	cmp.w	r9, #0
 800982c:	f040 816b 	bne.w	8009b06 <handle_message_memory.constprop.2+0x382>
 8009830:	230c      	movs	r3, #12
 8009832:	9311      	str	r3, [sp, #68]	@ 0x44
 8009834:	2301      	movs	r3, #1
 8009836:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
 800983a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800983c:	9b08      	ldr	r3, [sp, #32]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d148      	bne.n	80098d4 <handle_message_memory.constprop.2+0x150>
 8009842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009844:	fb03 f208 	mul.w	r2, r3, r8
 8009848:	ee18 1a10 	vmov	r1, s16
 800984c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800984e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
 8009854:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8009856:	6020      	str	r0, [r4, #0]
 8009858:	2800      	cmp	r0, #0
 800985a:	f000 8174 	beq.w	8009b46 <handle_message_memory.constprop.2+0x3c2>
 800985e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009860:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009862:	2100      	movs	r1, #0
 8009864:	4413      	add	r3, r2
 8009866:	930a      	str	r3, [sp, #40]	@ 0x28
 8009868:	f010 f8fd 	bl	8019a66 <memset>
 800986c:	4623      	mov	r3, r4
 800986e:	f8c4 8008 	str.w	r8, [r4, #8]
 8009872:	2e12      	cmp	r6, #18
 8009874:	f04f 0400 	mov.w	r4, #0
 8009878:	605c      	str	r4, [r3, #4]
 800987a:	f000 80f4 	beq.w	8009a66 <handle_message_memory.constprop.2+0x2e2>
 800987e:	2e64      	cmp	r6, #100	@ 0x64
 8009880:	d054      	beq.n	800992c <handle_message_memory.constprop.2+0x1a8>
 8009882:	9b08      	ldr	r3, [sp, #32]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f040 80a6 	bne.w	80099d6 <handle_message_memory.constprop.2+0x252>
 800988a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800988c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	3201      	adds	r2, #1
 8009892:	429a      	cmp	r2, r3
 8009894:	9209      	str	r2, [sp, #36]	@ 0x24
 8009896:	d399      	bcc.n	80097cc <handle_message_memory.constprop.2+0x48>
 8009898:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800989a:	b029      	add	sp, #164	@ 0xa4
 800989c:	ecbd 8b02 	vpop	{d8}
 80098a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	b002      	add	sp, #8
 80098a6:	4770      	bx	lr
 80098a8:	9b08      	ldr	r3, [sp, #32]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f040 80c1 	bne.w	8009a32 <handle_message_memory.constprop.2+0x2ae>
 80098b0:	2e10      	cmp	r6, #16
 80098b2:	d134      	bne.n	800991e <handle_message_memory.constprop.2+0x19a>
 80098b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098b8:	4413      	add	r3, r2
 80098ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80098bc:	f1b9 0f00 	cmp.w	r9, #0
 80098c0:	f000 8126 	beq.w	8009b10 <handle_message_memory.constprop.2+0x38c>
 80098c4:	2300      	movs	r3, #0
 80098c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098c8:	2301      	movs	r3, #1
 80098ca:	9311      	str	r3, [sp, #68]	@ 0x44
 80098cc:	9b08      	ldr	r3, [sp, #32]
 80098ce:	2610      	movs	r6, #16
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0b6      	beq.n	8009842 <handle_message_memory.constprop.2+0xbe>
 80098d4:	469a      	mov	sl, r3
 80098d6:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 80098da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098dc:	9617      	str	r6, [sp, #92]	@ 0x5c
 80098de:	2400      	movs	r4, #0
 80098e0:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 80098e4:	f85b 6034 	ldr.w	r6, [fp, r4, lsl #3]
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7f6 fc89 	bl	8000200 <strlen>
 80098ee:	4639      	mov	r1, r7
 80098f0:	4602      	mov	r2, r0
 80098f2:	4630      	mov	r0, r6
 80098f4:	f010 f88d 	bl	8019a12 <memcmp>
 80098f8:	4605      	mov	r5, r0
 80098fa:	eb0b 08c4 	add.w	r8, fp, r4, lsl #3
 80098fe:	464a      	mov	r2, r9
 8009900:	3401      	adds	r4, #1
 8009902:	4639      	mov	r1, r7
 8009904:	4630      	mov	r0, r6
 8009906:	b925      	cbnz	r5, 8009912 <handle_message_memory.constprop.2+0x18e>
 8009908:	f010 f883 	bl	8019a12 <memcmp>
 800990c:	2800      	cmp	r0, #0
 800990e:	f000 811d 	beq.w	8009b4c <handle_message_memory.constprop.2+0x3c8>
 8009912:	4554      	cmp	r4, sl
 8009914:	d1e6      	bne.n	80098e4 <handle_message_memory.constprop.2+0x160>
 8009916:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	@ 0x60
 800991a:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800991c:	e791      	b.n	8009842 <handle_message_memory.constprop.2+0xbe>
 800991e:	2e12      	cmp	r6, #18
 8009920:	f000 80fe 	beq.w	8009b20 <handle_message_memory.constprop.2+0x39c>
 8009924:	2e64      	cmp	r6, #100	@ 0x64
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	d1aa      	bne.n	8009882 <handle_message_memory.constprop.2+0xfe>
 800992c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800992e:	2b00      	cmp	r3, #0
 8009930:	f000 8146 	beq.w	8009bc0 <handle_message_memory.constprop.2+0x43c>
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	691e      	ldr	r6, [r3, #16]
 8009938:	920e      	str	r2, [sp, #56]	@ 0x38
 800993a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800993c:	2d00      	cmp	r5, #0
 800993e:	bf08      	it	eq
 8009940:	461d      	moveq	r5, r3
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	b1eb      	cbz	r3, 8009982 <handle_message_memory.constprop.2+0x1fe>
 8009946:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009948:	9510      	str	r5, [sp, #64]	@ 0x40
 800994a:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
 800994e:	2400      	movs	r4, #0
 8009950:	469a      	mov	sl, r3
 8009952:	f85b 5034 	ldr.w	r5, [fp, r4, lsl #3]
 8009956:	464a      	mov	r2, r9
 8009958:	4639      	mov	r1, r7
 800995a:	4628      	mov	r0, r5
 800995c:	f010 f859 	bl	8019a12 <memcmp>
 8009960:	4603      	mov	r3, r0
 8009962:	49a1      	ldr	r1, [pc, #644]	@ (8009be8 <handle_message_memory.constprop.2+0x464>)
 8009964:	eb05 0009 	add.w	r0, r5, r9
 8009968:	2205      	movs	r2, #5
 800996a:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800996e:	3401      	adds	r4, #1
 8009970:	b923      	cbnz	r3, 800997c <handle_message_memory.constprop.2+0x1f8>
 8009972:	f010 f84e 	bl	8019a12 <memcmp>
 8009976:	2800      	cmp	r0, #0
 8009978:	f000 8129 	beq.w	8009bce <handle_message_memory.constprop.2+0x44a>
 800997c:	4554      	cmp	r4, sl
 800997e:	d1e8      	bne.n	8009952 <handle_message_memory.constprop.2+0x1ce>
 8009980:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009982:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009984:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009986:	589c      	ldr	r4, [r3, r2]
 8009988:	fb08 f305 	mul.w	r3, r8, r5
 800998c:	930d      	str	r3, [sp, #52]	@ 0x34
 800998e:	f1b8 0f00 	cmp.w	r8, #0
 8009992:	d018      	beq.n	80099c6 <handle_message_memory.constprop.2+0x242>
 8009994:	f04f 0a00 	mov.w	sl, #0
 8009998:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800999c:	46b3      	mov	fp, r6
 800999e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80099a0:	46d1      	mov	r9, sl
 80099a2:	4659      	mov	r1, fp
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b0      	blx	r6
 80099a8:	f10a 0a01 	add.w	sl, sl, #1
 80099ac:	e9c4 9501 	strd	r9, r5, [r4, #4]
 80099b0:	6020      	str	r0, [r4, #0]
 80099b2:	462a      	mov	r2, r5
 80099b4:	2100      	movs	r1, #0
 80099b6:	f010 f856 	bl	8019a66 <memset>
 80099ba:	45c2      	cmp	sl, r8
 80099bc:	f104 040c 	add.w	r4, r4, #12
 80099c0:	d1ef      	bne.n	80099a2 <handle_message_memory.constprop.2+0x21e>
 80099c2:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 80099c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099ca:	4413      	add	r3, r2
 80099cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80099ce:	9b08      	ldr	r3, [sp, #32]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f43f af5a 	beq.w	800988a <handle_message_memory.constprop.2+0x106>
 80099d6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80099d8:	f7f6 fc12 	bl	8000200 <strlen>
 80099dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099de:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80099e0:	973a      	str	r7, [sp, #232]	@ 0xe8
 80099e2:	3001      	adds	r0, #1
 80099e4:	9000      	str	r0, [sp, #0]
 80099e6:	933b      	str	r3, [sp, #236]	@ 0xec
 80099e8:	ad1a      	add	r5, sp, #104	@ 0x68
 80099ea:	ac3a      	add	r4, sp, #232	@ 0xe8
 80099ec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80099f0:	3601      	adds	r6, #1
 80099f2:	4628      	mov	r0, r5
 80099f4:	9609      	str	r6, [sp, #36]	@ 0x24
 80099f6:	f003 fbc7 	bl	800d188 <micro_ros_string_utilities_remove_tail_chars>
 80099fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	910c      	str	r1, [sp, #48]	@ 0x30
 8009a04:	429e      	cmp	r6, r3
 8009a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	f4ff aede 	bcc.w	80097cc <handle_message_memory.constprop.2+0x48>
 8009a10:	e742      	b.n	8009898 <handle_message_memory.constprop.2+0x114>
 8009a12:	4b76      	ldr	r3, [pc, #472]	@ (8009bec <handle_message_memory.constprop.2+0x468>)
 8009a14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	f002 fdc8 	bl	800c5ac <get_message_typesupport_handle>
 8009a1c:	6843      	ldr	r3, [r0, #4]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a22:	f1b9 0f00 	cmp.w	r9, #0
 8009a26:	d16b      	bne.n	8009b00 <handle_message_memory.constprop.2+0x37c>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 8009a2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a30:	e704      	b.n	800983c <handle_message_memory.constprop.2+0xb8>
 8009a32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a34:	933b      	str	r3, [sp, #236]	@ 0xec
 8009a36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a38:	973a      	str	r7, [sp, #232]	@ 0xe8
 8009a3a:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009a42:	4620      	mov	r0, r4
 8009a44:	f003 fb72 	bl	800d12c <micro_ros_string_utilities_append>
 8009a48:	4b69      	ldr	r3, [pc, #420]	@ (8009bf0 <handle_message_memory.constprop.2+0x46c>)
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	af1a      	add	r7, sp, #104	@ 0x68
 8009a4e:	4638      	mov	r0, r7
 8009a50:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009a54:	f003 fb6a 	bl	800d12c <micro_ros_string_utilities_append>
 8009a58:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a60:	4607      	mov	r7, r0
 8009a62:	910c      	str	r1, [sp, #48]	@ 0x30
 8009a64:	e724      	b.n	80098b0 <handle_message_memory.constprop.2+0x12c>
 8009a66:	4b61      	ldr	r3, [pc, #388]	@ (8009bec <handle_message_memory.constprop.2+0x468>)
 8009a68:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009a6a:	6819      	ldr	r1, [r3, #0]
 8009a6c:	f002 fd9e 	bl	800c5ac <get_message_typesupport_handle>
 8009a70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a72:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d16d      	bne.n	8009b56 <handle_message_memory.constprop.2+0x3d2>
 8009a7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a7c:	933b      	str	r3, [sp, #236]	@ 0xec
 8009a7e:	973a      	str	r7, [sp, #232]	@ 0xe8
 8009a80:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009a82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009a86:	9b08      	ldr	r3, [sp, #32]
 8009a88:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a8c:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009a8e:	f10d 0a10 	add.w	sl, sp, #16
 8009a92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a94:	9334      	str	r3, [sp, #208]	@ 0xd0
 8009a96:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
 8009a9a:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009a9e:	ae36      	add	r6, sp, #216	@ 0xd8
 8009aa0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009aa4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009aa8:	ab34      	add	r3, sp, #208	@ 0xd0
 8009aaa:	cb0c      	ldmia	r3, {r2, r3}
 8009aac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009aae:	4648      	mov	r0, r9
 8009ab0:	f7ff fe68 	bl	8009784 <handle_message_memory.constprop.2>
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab6:	4403      	add	r3, r0
 8009ab8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aba:	e6e2      	b.n	8009882 <handle_message_memory.constprop.2+0xfe>
 8009abc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009abe:	933b      	str	r3, [sp, #236]	@ 0xec
 8009ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ac2:	973a      	str	r7, [sp, #232]	@ 0xe8
 8009ac4:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009acc:	4620      	mov	r0, r4
 8009ace:	f003 fb2d 	bl	800d12c <micro_ros_string_utilities_append>
 8009ad2:	4b47      	ldr	r3, [pc, #284]	@ (8009bf0 <handle_message_memory.constprop.2+0x46c>)
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	af1a      	add	r7, sp, #104	@ 0x68
 8009ad8:	4638      	mov	r0, r7
 8009ada:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009ade:	f003 fb25 	bl	800d12c <micro_ros_string_utilities_append>
 8009ae2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009aea:	4607      	mov	r7, r0
 8009aec:	910c      	str	r1, [sp, #48]	@ 0x30
 8009aee:	e691      	b.n	8009814 <handle_message_memory.constprop.2+0x90>
 8009af0:	4b40      	ldr	r3, [pc, #256]	@ (8009bf4 <handle_message_memory.constprop.2+0x470>)
 8009af2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009af6:	9311      	str	r3, [sp, #68]	@ 0x44
 8009af8:	f1b9 0f00 	cmp.w	r9, #0
 8009afc:	f43f ae9a 	beq.w	8009834 <handle_message_memory.constprop.2+0xb0>
 8009b00:	2301      	movs	r3, #1
 8009b02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b04:	e69a      	b.n	800983c <handle_message_memory.constprop.2+0xb8>
 8009b06:	2301      	movs	r3, #1
 8009b08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b0a:	230c      	movs	r3, #12
 8009b0c:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b0e:	e695      	b.n	800983c <handle_message_memory.constprop.2+0xb8>
 8009b10:	b195      	cbz	r5, 8009b38 <handle_message_memory.constprop.2+0x3b4>
 8009b12:	2301      	movs	r3, #1
 8009b14:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8009b18:	46a8      	mov	r8, r5
 8009b1a:	2610      	movs	r6, #16
 8009b1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b1e:	e68d      	b.n	800983c <handle_message_memory.constprop.2+0xb8>
 8009b20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009b26:	4413      	add	r3, r2
 8009b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b2a:	4b30      	ldr	r3, [pc, #192]	@ (8009bec <handle_message_memory.constprop.2+0x468>)
 8009b2c:	6819      	ldr	r1, [r3, #0]
 8009b2e:	f002 fd3d 	bl	800c5ac <get_message_typesupport_handle>
 8009b32:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009b36:	e7a0      	b.n	8009a7a <handle_message_memory.constprop.2+0x2f6>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b3e:	9513      	str	r5, [sp, #76]	@ 0x4c
 8009b40:	2610      	movs	r6, #16
 8009b42:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b44:	e67a      	b.n	800983c <handle_message_memory.constprop.2+0xb8>
 8009b46:	2300      	movs	r3, #0
 8009b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b4a:	e6a5      	b.n	8009898 <handle_message_memory.constprop.2+0x114>
 8009b4c:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	@ 0x5c
 8009b50:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8009b54:	e675      	b.n	8009842 <handle_message_memory.constprop.2+0xbe>
 8009b56:	f1b8 0f00 	cmp.w	r8, #0
 8009b5a:	f43f ae92 	beq.w	8009882 <handle_message_memory.constprop.2+0xfe>
 8009b5e:	4625      	mov	r5, r4
 8009b60:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009b62:	940d      	str	r4, [sp, #52]	@ 0x34
 8009b64:	465c      	mov	r4, fp
 8009b66:	46bb      	mov	fp, r7
 8009b68:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009b6a:	f10d 0a10 	add.w	sl, sp, #16
 8009b6e:	ae36      	add	r6, sp, #216	@ 0xd8
 8009b70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b72:	933b      	str	r3, [sp, #236]	@ 0xec
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009b78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b7a:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009b7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b7e:	9334      	str	r3, [sp, #208]	@ 0xd0
 8009b80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b82:	f8cd b0e8 	str.w	fp, [sp, #232]	@ 0xe8
 8009b86:	f8d3 c000 	ldr.w	ip, [r3]
 8009b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b8c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8009b90:	9437      	str	r4, [sp, #220]	@ 0xdc
 8009b92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b96:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009b9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009b9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009ba2:	ab34      	add	r3, sp, #208	@ 0xd0
 8009ba4:	fb0e c105 	mla	r1, lr, r5, ip
 8009ba8:	cb0c      	ldmia	r3, {r2, r3}
 8009baa:	4648      	mov	r0, r9
 8009bac:	f7ff fdea 	bl	8009784 <handle_message_memory.constprop.2>
 8009bb0:	3501      	adds	r5, #1
 8009bb2:	45a8      	cmp	r8, r5
 8009bb4:	4407      	add	r7, r0
 8009bb6:	d1db      	bne.n	8009b70 <handle_message_memory.constprop.2+0x3ec>
 8009bb8:	970a      	str	r7, [sp, #40]	@ 0x28
 8009bba:	465f      	mov	r7, fp
 8009bbc:	46a3      	mov	fp, r4
 8009bbe:	e660      	b.n	8009882 <handle_message_memory.constprop.2+0xfe>
 8009bc0:	a823      	add	r0, sp, #140	@ 0x8c
 8009bc2:	f001 fe97 	bl	800b8f4 <rcutils_get_default_allocator>
 8009bc6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bc8:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8009bca:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bcc:	e6b5      	b.n	800993a <handle_message_memory.constprop.2+0x1b6>
 8009bce:	686d      	ldr	r5, [r5, #4]
 8009bd0:	e6d7      	b.n	8009982 <handle_message_memory.constprop.2+0x1fe>
 8009bd2:	a81e      	add	r0, sp, #120	@ 0x78
 8009bd4:	f001 fe8e 	bl	800b8f4 <rcutils_get_default_allocator>
 8009bd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009bda:	9315      	str	r3, [sp, #84]	@ 0x54
 8009bdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009bde:	ee08 3a10 	vmov	s16, r3
 8009be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be4:	e5eb      	b.n	80097be <handle_message_memory.constprop.2+0x3a>
 8009be6:	bf00      	nop
 8009be8:	0801aee0 	.word	0x0801aee0
 8009bec:	20000384 	.word	0x20000384
 8009bf0:	0801aedc 	.word	0x0801aedc
 8009bf4:	0801aee8 	.word	0x0801aee8

08009bf8 <get_longest_member_name>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	ed2d 8b06 	vpush	{d8-d10}
 8009c00:	6885      	ldr	r5, [r0, #8]
 8009c02:	b099      	sub	sp, #100	@ 0x64
 8009c04:	2d00      	cmp	r5, #0
 8009c06:	f000 810f 	beq.w	8009e28 <get_longest_member_name+0x230>
 8009c0a:	f04f 0a00 	mov.w	sl, #0
 8009c0e:	46d3      	mov	fp, sl
 8009c10:	f8cd a004 	str.w	sl, [sp, #4]
 8009c14:	9003      	str	r0, [sp, #12]
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	eb03 020a 	add.w	r2, r3, sl
 8009c1e:	f853 700a 	ldr.w	r7, [r3, sl]
 8009c22:	7913      	ldrb	r3, [r2, #4]
 8009c24:	2b12      	cmp	r3, #18
 8009c26:	d018      	beq.n	8009c5a <get_longest_member_name+0x62>
 8009c28:	f04f 0900 	mov.w	r9, #0
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	f7f6 fae7 	bl	8000200 <strlen>
 8009c32:	9b01      	ldr	r3, [sp, #4]
 8009c34:	4448      	add	r0, r9
 8009c36:	3001      	adds	r0, #1
 8009c38:	4283      	cmp	r3, r0
 8009c3a:	f10b 0b01 	add.w	fp, fp, #1
 8009c3e:	bf38      	it	cc
 8009c40:	4603      	movcc	r3, r0
 8009c42:	455d      	cmp	r5, fp
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009c4a:	d8e4      	bhi.n	8009c16 <get_longest_member_name+0x1e>
 8009c4c:	469b      	mov	fp, r3
 8009c4e:	4658      	mov	r0, fp
 8009c50:	b019      	add	sp, #100	@ 0x64
 8009c52:	ecbd 8b06 	vpop	{d8-d10}
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	4bbc      	ldr	r3, [pc, #752]	@ (8009f4c <get_longest_member_name+0x354>)
 8009c5c:	68d0      	ldr	r0, [r2, #12]
 8009c5e:	6819      	ldr	r1, [r3, #0]
 8009c60:	f002 fca4 	bl	800c5ac <get_message_typesupport_handle>
 8009c64:	6843      	ldr	r3, [r0, #4]
 8009c66:	9305      	str	r3, [sp, #20]
 8009c68:	689d      	ldr	r5, [r3, #8]
 8009c6a:	2d00      	cmp	r5, #0
 8009c6c:	f000 811a 	beq.w	8009ea4 <get_longest_member_name+0x2ac>
 8009c70:	f04f 0800 	mov.w	r8, #0
 8009c74:	ee08 7a10 	vmov	s16, r7
 8009c78:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8009c7c:	46c1      	mov	r9, r8
 8009c7e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009c82:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c86:	46c2      	mov	sl, r8
 8009c88:	9b05      	ldr	r3, [sp, #20]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	eb03 020a 	add.w	r2, r3, sl
 8009c90:	f853 300a 	ldr.w	r3, [r3, sl]
 8009c94:	ee0a 3a10 	vmov	s20, r3
 8009c98:	7913      	ldrb	r3, [r2, #4]
 8009c9a:	2b12      	cmp	r3, #18
 8009c9c:	d01b      	beq.n	8009cd6 <get_longest_member_name+0xde>
 8009c9e:	2700      	movs	r7, #0
 8009ca0:	ee1a 0a10 	vmov	r0, s20
 8009ca4:	f7f6 faac 	bl	8000200 <strlen>
 8009ca8:	9b02      	ldr	r3, [sp, #8]
 8009caa:	4438      	add	r0, r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	4283      	cmp	r3, r0
 8009cb0:	f109 0901 	add.w	r9, r9, #1
 8009cb4:	bf38      	it	cc
 8009cb6:	4603      	movcc	r3, r0
 8009cb8:	45a9      	cmp	r9, r5
 8009cba:	9302      	str	r3, [sp, #8]
 8009cbc:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009cc0:	d3e2      	bcc.n	8009c88 <get_longest_member_name+0x90>
 8009cc2:	4699      	mov	r9, r3
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8009cca:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8009cce:	689d      	ldr	r5, [r3, #8]
 8009cd0:	ee18 7a10 	vmov	r7, s16
 8009cd4:	e7aa      	b.n	8009c2c <get_longest_member_name+0x34>
 8009cd6:	4b9d      	ldr	r3, [pc, #628]	@ (8009f4c <get_longest_member_name+0x354>)
 8009cd8:	68d0      	ldr	r0, [r2, #12]
 8009cda:	6819      	ldr	r1, [r3, #0]
 8009cdc:	f002 fc66 	bl	800c5ac <get_message_typesupport_handle>
 8009ce0:	6843      	ldr	r3, [r0, #4]
 8009ce2:	9307      	str	r3, [sp, #28]
 8009ce4:	689d      	ldr	r5, [r3, #8]
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	f000 80a5 	beq.w	8009e36 <get_longest_member_name+0x23e>
 8009cec:	f04f 0b00 	mov.w	fp, #0
 8009cf0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8009cf4:	46d8      	mov	r8, fp
 8009cf6:	f8cd b010 	str.w	fp, [sp, #16]
 8009cfa:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8009cfe:	46d9      	mov	r9, fp
 8009d00:	9b07      	ldr	r3, [sp, #28]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	eb03 0209 	add.w	r2, r3, r9
 8009d08:	f853 7009 	ldr.w	r7, [r3, r9]
 8009d0c:	7913      	ldrb	r3, [r2, #4]
 8009d0e:	2b12      	cmp	r3, #18
 8009d10:	d019      	beq.n	8009d46 <get_longest_member_name+0x14e>
 8009d12:	f04f 0a00 	mov.w	sl, #0
 8009d16:	4638      	mov	r0, r7
 8009d18:	f7f6 fa72 	bl	8000200 <strlen>
 8009d1c:	9b04      	ldr	r3, [sp, #16]
 8009d1e:	4450      	add	r0, sl
 8009d20:	3001      	adds	r0, #1
 8009d22:	4283      	cmp	r3, r0
 8009d24:	f108 0801 	add.w	r8, r8, #1
 8009d28:	bf38      	it	cc
 8009d2a:	4603      	movcc	r3, r0
 8009d2c:	45a8      	cmp	r8, r5
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 8009d34:	d3e4      	bcc.n	8009d00 <get_longest_member_name+0x108>
 8009d36:	461f      	mov	r7, r3
 8009d38:	9b05      	ldr	r3, [sp, #20]
 8009d3a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8009d3e:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8009d42:	689d      	ldr	r5, [r3, #8]
 8009d44:	e7ac      	b.n	8009ca0 <get_longest_member_name+0xa8>
 8009d46:	4b81      	ldr	r3, [pc, #516]	@ (8009f4c <get_longest_member_name+0x354>)
 8009d48:	68d0      	ldr	r0, [r2, #12]
 8009d4a:	6819      	ldr	r1, [r3, #0]
 8009d4c:	f002 fc2e 	bl	800c5ac <get_message_typesupport_handle>
 8009d50:	6843      	ldr	r3, [r0, #4]
 8009d52:	9308      	str	r3, [sp, #32]
 8009d54:	689d      	ldr	r5, [r3, #8]
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	f000 80f2 	beq.w	8009f40 <get_longest_member_name+0x348>
 8009d5c:	f04f 0b00 	mov.w	fp, #0
 8009d60:	ee08 7a90 	vmov	s17, r7
 8009d64:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 8009d68:	46da      	mov	sl, fp
 8009d6a:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8009d6e:	f8cd b018 	str.w	fp, [sp, #24]
 8009d72:	46d9      	mov	r9, fp
 8009d74:	9b08      	ldr	r3, [sp, #32]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	eb03 020a 	add.w	r2, r3, sl
 8009d7c:	f853 700a 	ldr.w	r7, [r3, sl]
 8009d80:	7913      	ldrb	r3, [r2, #4]
 8009d82:	2b12      	cmp	r3, #18
 8009d84:	d01b      	beq.n	8009dbe <get_longest_member_name+0x1c6>
 8009d86:	f04f 0b00 	mov.w	fp, #0
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	f7f6 fa38 	bl	8000200 <strlen>
 8009d90:	9b06      	ldr	r3, [sp, #24]
 8009d92:	4458      	add	r0, fp
 8009d94:	3001      	adds	r0, #1
 8009d96:	4283      	cmp	r3, r0
 8009d98:	f109 0901 	add.w	r9, r9, #1
 8009d9c:	bf38      	it	cc
 8009d9e:	4603      	movcc	r3, r0
 8009da0:	45a9      	cmp	r9, r5
 8009da2:	9306      	str	r3, [sp, #24]
 8009da4:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009da8:	d3e4      	bcc.n	8009d74 <get_longest_member_name+0x17c>
 8009daa:	469a      	mov	sl, r3
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8009db2:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8009db6:	689d      	ldr	r5, [r3, #8]
 8009db8:	ee18 7a90 	vmov	r7, s17
 8009dbc:	e7ab      	b.n	8009d16 <get_longest_member_name+0x11e>
 8009dbe:	4b63      	ldr	r3, [pc, #396]	@ (8009f4c <get_longest_member_name+0x354>)
 8009dc0:	68d0      	ldr	r0, [r2, #12]
 8009dc2:	6819      	ldr	r1, [r3, #0]
 8009dc4:	f002 fbf2 	bl	800c5ac <get_message_typesupport_handle>
 8009dc8:	6843      	ldr	r3, [r0, #4]
 8009dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dcc:	689d      	ldr	r5, [r3, #8]
 8009dce:	2d00      	cmp	r5, #0
 8009dd0:	f000 80b9 	beq.w	8009f46 <get_longest_member_name+0x34e>
 8009dd4:	f04f 0800 	mov.w	r8, #0
 8009dd8:	ee09 7a10 	vmov	s18, r7
 8009ddc:	e9cd 9a11 	strd	r9, sl, [sp, #68]	@ 0x44
 8009de0:	46c3      	mov	fp, r8
 8009de2:	46c2      	mov	sl, r8
 8009de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	eb03 0208 	add.w	r2, r3, r8
 8009dec:	f853 9008 	ldr.w	r9, [r3, r8]
 8009df0:	7913      	ldrb	r3, [r2, #4]
 8009df2:	2b12      	cmp	r3, #18
 8009df4:	d022      	beq.n	8009e3c <get_longest_member_name+0x244>
 8009df6:	2700      	movs	r7, #0
 8009df8:	4648      	mov	r0, r9
 8009dfa:	f7f6 fa01 	bl	8000200 <strlen>
 8009dfe:	4438      	add	r0, r7
 8009e00:	3001      	adds	r0, #1
 8009e02:	4582      	cmp	sl, r0
 8009e04:	f10b 0b01 	add.w	fp, fp, #1
 8009e08:	bf38      	it	cc
 8009e0a:	4682      	movcc	sl, r0
 8009e0c:	45ab      	cmp	fp, r5
 8009e0e:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 8009e12:	d3e7      	bcc.n	8009de4 <get_longest_member_name+0x1ec>
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8009e1a:	689d      	ldr	r5, [r3, #8]
 8009e1c:	46d3      	mov	fp, sl
 8009e1e:	ee19 7a10 	vmov	r7, s18
 8009e22:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8009e26:	e7b0      	b.n	8009d8a <get_longest_member_name+0x192>
 8009e28:	46ab      	mov	fp, r5
 8009e2a:	4658      	mov	r0, fp
 8009e2c:	b019      	add	sp, #100	@ 0x64
 8009e2e:	ecbd 8b06 	vpop	{d8-d10}
 8009e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e36:	9b05      	ldr	r3, [sp, #20]
 8009e38:	689d      	ldr	r5, [r3, #8]
 8009e3a:	e730      	b.n	8009c9e <get_longest_member_name+0xa6>
 8009e3c:	4b43      	ldr	r3, [pc, #268]	@ (8009f4c <get_longest_member_name+0x354>)
 8009e3e:	68d0      	ldr	r0, [r2, #12]
 8009e40:	6819      	ldr	r1, [r3, #0]
 8009e42:	f002 fbb3 	bl	800c5ac <get_message_typesupport_handle>
 8009e46:	6843      	ldr	r3, [r0, #4]
 8009e48:	689e      	ldr	r6, [r3, #8]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2e00      	cmp	r6, #0
 8009e4e:	d07f      	beq.n	8009f50 <get_longest_member_name+0x358>
 8009e50:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
 8009e54:	2400      	movs	r4, #0
 8009e56:	ee09 9a90 	vmov	s19, r9
 8009e5a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 8009e5e:	4627      	mov	r7, r4
 8009e60:	4691      	mov	r9, r2
 8009e62:	46a0      	mov	r8, r4
 8009e64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e68:	191a      	adds	r2, r3, r4
 8009e6a:	f853 b004 	ldr.w	fp, [r3, r4]
 8009e6e:	7913      	ldrb	r3, [r2, #4]
 8009e70:	2b12      	cmp	r3, #18
 8009e72:	d01a      	beq.n	8009eaa <get_longest_member_name+0x2b2>
 8009e74:	2500      	movs	r5, #0
 8009e76:	4658      	mov	r0, fp
 8009e78:	f7f6 f9c2 	bl	8000200 <strlen>
 8009e7c:	4405      	add	r5, r0
 8009e7e:	3501      	adds	r5, #1
 8009e80:	42af      	cmp	r7, r5
 8009e82:	f108 0801 	add.w	r8, r8, #1
 8009e86:	bf38      	it	cc
 8009e88:	462f      	movcc	r7, r5
 8009e8a:	45b0      	cmp	r8, r6
 8009e8c:	f104 043c 	add.w	r4, r4, #60	@ 0x3c
 8009e90:	d3e8      	bcc.n	8009e64 <get_longest_member_name+0x26c>
 8009e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e94:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 8009e98:	689d      	ldr	r5, [r3, #8]
 8009e9a:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
 8009e9e:	ee19 9a90 	vmov	r9, s19
 8009ea2:	e7a9      	b.n	8009df8 <get_longest_member_name+0x200>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	689d      	ldr	r5, [r3, #8]
 8009ea8:	e6be      	b.n	8009c28 <get_longest_member_name+0x30>
 8009eaa:	4b28      	ldr	r3, [pc, #160]	@ (8009f4c <get_longest_member_name+0x354>)
 8009eac:	68d0      	ldr	r0, [r2, #12]
 8009eae:	6819      	ldr	r1, [r3, #0]
 8009eb0:	f002 fb7c 	bl	800c5ac <get_message_typesupport_handle>
 8009eb4:	6843      	ldr	r3, [r0, #4]
 8009eb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009eb8:	6899      	ldr	r1, [r3, #8]
 8009eba:	2900      	cmp	r1, #0
 8009ebc:	d04b      	beq.n	8009f56 <get_longest_member_name+0x35e>
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	9416      	str	r4, [sp, #88]	@ 0x58
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	ee0a ba90 	vmov	s21, fp
 8009ec8:	46b2      	mov	sl, r6
 8009eca:	46b3      	mov	fp, r6
 8009ecc:	460c      	mov	r4, r1
 8009ece:	461d      	mov	r5, r3
 8009ed0:	19aa      	adds	r2, r5, r6
 8009ed2:	59ab      	ldr	r3, [r5, r6]
 8009ed4:	f892 c004 	ldrb.w	ip, [r2, #4]
 8009ed8:	f1bc 0f12 	cmp.w	ip, #18
 8009edc:	4618      	mov	r0, r3
 8009ede:	d012      	beq.n	8009f06 <get_longest_member_name+0x30e>
 8009ee0:	f7f6 f98e 	bl	8000200 <strlen>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	4583      	cmp	fp, r0
 8009ee8:	f10a 0a01 	add.w	sl, sl, #1
 8009eec:	bf38      	it	cc
 8009eee:	4683      	movcc	fp, r0
 8009ef0:	45a2      	cmp	sl, r4
 8009ef2:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009ef6:	d3eb      	bcc.n	8009ed0 <get_longest_member_name+0x2d8>
 8009ef8:	465d      	mov	r5, fp
 8009efa:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8009efc:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009f00:	ee1a ba90 	vmov	fp, s21
 8009f04:	e7b7      	b.n	8009e76 <get_longest_member_name+0x27e>
 8009f06:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009f08:	4b10      	ldr	r3, [pc, #64]	@ (8009f4c <get_longest_member_name+0x354>)
 8009f0a:	68d0      	ldr	r0, [r2, #12]
 8009f0c:	6819      	ldr	r1, [r3, #0]
 8009f0e:	f002 fb4d 	bl	800c5ac <get_message_typesupport_handle>
 8009f12:	6840      	ldr	r0, [r0, #4]
 8009f14:	f7ff fe70 	bl	8009bf8 <get_longest_member_name>
 8009f18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7f6 f96f 	bl	8000200 <strlen>
 8009f22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f24:	4405      	add	r5, r0
 8009f26:	3501      	adds	r5, #1
 8009f28:	689c      	ldr	r4, [r3, #8]
 8009f2a:	45ab      	cmp	fp, r5
 8009f2c:	f10a 0a01 	add.w	sl, sl, #1
 8009f30:	bf38      	it	cc
 8009f32:	46ab      	movcc	fp, r5
 8009f34:	4554      	cmp	r4, sl
 8009f36:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009f3a:	d9dd      	bls.n	8009ef8 <get_longest_member_name+0x300>
 8009f3c:	691d      	ldr	r5, [r3, #16]
 8009f3e:	e7c7      	b.n	8009ed0 <get_longest_member_name+0x2d8>
 8009f40:	9b07      	ldr	r3, [sp, #28]
 8009f42:	689d      	ldr	r5, [r3, #8]
 8009f44:	e6e5      	b.n	8009d12 <get_longest_member_name+0x11a>
 8009f46:	9b08      	ldr	r3, [sp, #32]
 8009f48:	689d      	ldr	r5, [r3, #8]
 8009f4a:	e71c      	b.n	8009d86 <get_longest_member_name+0x18e>
 8009f4c:	20000384 	.word	0x20000384
 8009f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f52:	689d      	ldr	r5, [r3, #8]
 8009f54:	e74f      	b.n	8009df6 <get_longest_member_name+0x1fe>
 8009f56:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009f5a:	e78b      	b.n	8009e74 <get_longest_member_name+0x27c>

08009f5c <micro_ros_utilities_get_dynamic_size>:
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f62:	ed2d 8b02 	vpush	{d8}
 8009f66:	b09f      	sub	sp, #124	@ 0x7c
 8009f68:	ac2b      	add	r4, sp, #172	@ 0xac
 8009f6a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8009f6e:	4619      	mov	r1, r3
 8009f70:	2900      	cmp	r1, #0
 8009f72:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8009f74:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8009f76:	941c      	str	r4, [sp, #112]	@ 0x70
 8009f78:	bf08      	it	eq
 8009f7a:	2105      	moveq	r1, #5
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	bf08      	it	eq
 8009f80:	2205      	moveq	r2, #5
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	bf08      	it	eq
 8009f86:	2314      	moveq	r3, #20
 8009f88:	9318      	str	r3, [sp, #96]	@ 0x60
 8009f8a:	4b78      	ldr	r3, [pc, #480]	@ (800a16c <micro_ros_utilities_get_dynamic_size+0x210>)
 8009f8c:	911a      	str	r1, [sp, #104]	@ 0x68
 8009f8e:	6819      	ldr	r1, [r3, #0]
 8009f90:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8009f92:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009f94:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009f96:	931d      	str	r3, [sp, #116]	@ 0x74
 8009f98:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f9a:	f002 fb07 	bl	800c5ac <get_message_typesupport_handle>
 8009f9e:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009fa8:	9315      	str	r3, [sp, #84]	@ 0x54
 8009faa:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8009fae:	b9c4      	cbnz	r4, 8009fe2 <micro_ros_utilities_get_dynamic_size+0x86>
 8009fb0:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8009fb4:	ab04      	add	r3, sp, #16
 8009fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009fba:	ab1e      	add	r3, sp, #120	@ 0x78
 8009fbc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009fc0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009fc4:	ab18      	add	r3, sp, #96	@ 0x60
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	cb0c      	ldmia	r3, {r2, r3}
 8009fca:	4650      	mov	r0, sl
 8009fcc:	f7ff fa10 	bl	80093f0 <handle_message_memory.constprop.4>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	b01f      	add	sp, #124	@ 0x7c
 8009fd6:	ecbd 8b02 	vpop	{d8}
 8009fda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fde:	b004      	add	sp, #16
 8009fe0:	4770      	bx	lr
 8009fe2:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009fe6:	9508      	str	r5, [sp, #32]
 8009fe8:	b30d      	cbz	r5, 800a02e <micro_ros_utilities_get_dynamic_size+0xd2>
 8009fea:	4698      	mov	r8, r3
 8009fec:	9308      	str	r3, [sp, #32]
 8009fee:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	eb03 0208 	add.w	r2, r3, r8
 8009ffc:	f853 6008 	ldr.w	r6, [r3, r8]
 800a000:	7913      	ldrb	r3, [r2, #4]
 800a002:	2b12      	cmp	r3, #18
 800a004:	d030      	beq.n	800a068 <micro_ros_utilities_get_dynamic_size+0x10c>
 800a006:	f04f 0900 	mov.w	r9, #0
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7f6 f8f8 	bl	8000200 <strlen>
 800a010:	9b08      	ldr	r3, [sp, #32]
 800a012:	4448      	add	r0, r9
 800a014:	3001      	adds	r0, #1
 800a016:	4283      	cmp	r3, r0
 800a018:	f107 0701 	add.w	r7, r7, #1
 800a01c:	bf38      	it	cc
 800a01e:	4603      	movcc	r3, r0
 800a020:	42af      	cmp	r7, r5
 800a022:	9308      	str	r3, [sp, #32]
 800a024:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 800a028:	d3e4      	bcc.n	8009ff4 <micro_ros_utilities_get_dynamic_size+0x98>
 800a02a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800a02e:	9908      	ldr	r1, [sp, #32]
 800a030:	ac10      	add	r4, sp, #64	@ 0x40
 800a032:	4620      	mov	r0, r4
 800a034:	f003 f862 	bl	800d0fc <micro_ros_string_utilities_init_with_size>
 800a038:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a03c:	ab04      	add	r3, sp, #16
 800a03e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800a042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a046:	ab1e      	add	r3, sp, #120	@ 0x78
 800a048:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a04c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a050:	ac18      	add	r4, sp, #96	@ 0x60
 800a052:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a056:	2100      	movs	r1, #0
 800a058:	4650      	mov	r0, sl
 800a05a:	f7ff f9c9 	bl	80093f0 <handle_message_memory.constprop.4>
 800a05e:	4604      	mov	r4, r0
 800a060:	4658      	mov	r0, fp
 800a062:	f003 f8a9 	bl	800d1b8 <micro_ros_string_utilities_destroy>
 800a066:	e7b4      	b.n	8009fd2 <micro_ros_utilities_get_dynamic_size+0x76>
 800a068:	4b40      	ldr	r3, [pc, #256]	@ (800a16c <micro_ros_utilities_get_dynamic_size+0x210>)
 800a06a:	68d0      	ldr	r0, [r2, #12]
 800a06c:	6819      	ldr	r1, [r3, #0]
 800a06e:	f002 fa9d 	bl	800c5ac <get_message_typesupport_handle>
 800a072:	6843      	ldr	r3, [r0, #4]
 800a074:	930a      	str	r3, [sp, #40]	@ 0x28
 800a076:	689d      	ldr	r5, [r3, #8]
 800a078:	b33d      	cbz	r5, 800a0ca <micro_ros_utilities_get_dynamic_size+0x16e>
 800a07a:	f04f 0a00 	mov.w	sl, #0
 800a07e:	ee08 6a10 	vmov	s16, r6
 800a082:	970c      	str	r7, [sp, #48]	@ 0x30
 800a084:	46d1      	mov	r9, sl
 800a086:	4657      	mov	r7, sl
 800a088:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800a08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	eb03 020a 	add.w	r2, r3, sl
 800a094:	f853 800a 	ldr.w	r8, [r3, sl]
 800a098:	7913      	ldrb	r3, [r2, #4]
 800a09a:	2b12      	cmp	r3, #18
 800a09c:	d018      	beq.n	800a0d0 <micro_ros_utilities_get_dynamic_size+0x174>
 800a09e:	2400      	movs	r4, #0
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	f7f6 f8ad 	bl	8000200 <strlen>
 800a0a6:	4404      	add	r4, r0
 800a0a8:	3401      	adds	r4, #1
 800a0aa:	45a1      	cmp	r9, r4
 800a0ac:	f107 0701 	add.w	r7, r7, #1
 800a0b0:	bf38      	it	cc
 800a0b2:	46a1      	movcc	r9, r4
 800a0b4:	42af      	cmp	r7, r5
 800a0b6:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800a0ba:	d3e7      	bcc.n	800a08c <micro_ros_utilities_get_dynamic_size+0x130>
 800a0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0be:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800a0c2:	ee18 6a10 	vmov	r6, s16
 800a0c6:	689d      	ldr	r5, [r3, #8]
 800a0c8:	e79f      	b.n	800a00a <micro_ros_utilities_get_dynamic_size+0xae>
 800a0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0cc:	689d      	ldr	r5, [r3, #8]
 800a0ce:	e79a      	b.n	800a006 <micro_ros_utilities_get_dynamic_size+0xaa>
 800a0d0:	4b26      	ldr	r3, [pc, #152]	@ (800a16c <micro_ros_utilities_get_dynamic_size+0x210>)
 800a0d2:	68d0      	ldr	r0, [r2, #12]
 800a0d4:	6819      	ldr	r1, [r3, #0]
 800a0d6:	f002 fa69 	bl	800c5ac <get_message_typesupport_handle>
 800a0da:	6843      	ldr	r3, [r0, #4]
 800a0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0de:	6899      	ldr	r1, [r3, #8]
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	d040      	beq.n	800a166 <micro_ros_utilities_get_dynamic_size+0x20a>
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	970e      	str	r7, [sp, #56]	@ 0x38
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	ee08 8a90 	vmov	s17, r8
 800a0ee:	462e      	mov	r6, r5
 800a0f0:	46a8      	mov	r8, r5
 800a0f2:	460f      	mov	r7, r1
 800a0f4:	461c      	mov	r4, r3
 800a0f6:	1962      	adds	r2, r4, r5
 800a0f8:	5963      	ldr	r3, [r4, r5]
 800a0fa:	f892 c004 	ldrb.w	ip, [r2, #4]
 800a0fe:	f1bc 0f12 	cmp.w	ip, #18
 800a102:	4618      	mov	r0, r3
 800a104:	d012      	beq.n	800a12c <micro_ros_utilities_get_dynamic_size+0x1d0>
 800a106:	f7f6 f87b 	bl	8000200 <strlen>
 800a10a:	3001      	adds	r0, #1
 800a10c:	4580      	cmp	r8, r0
 800a10e:	f106 0601 	add.w	r6, r6, #1
 800a112:	bf38      	it	cc
 800a114:	4680      	movcc	r8, r0
 800a116:	42be      	cmp	r6, r7
 800a118:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a11c:	d3eb      	bcc.n	800a0f6 <micro_ros_utilities_get_dynamic_size+0x19a>
 800a11e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a120:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800a122:	689d      	ldr	r5, [r3, #8]
 800a124:	4644      	mov	r4, r8
 800a126:	ee18 8a90 	vmov	r8, s17
 800a12a:	e7b9      	b.n	800a0a0 <micro_ros_utilities_get_dynamic_size+0x144>
 800a12c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a12e:	4b0f      	ldr	r3, [pc, #60]	@ (800a16c <micro_ros_utilities_get_dynamic_size+0x210>)
 800a130:	68d0      	ldr	r0, [r2, #12]
 800a132:	6819      	ldr	r1, [r3, #0]
 800a134:	f002 fa3a 	bl	800c5ac <get_message_typesupport_handle>
 800a138:	6840      	ldr	r0, [r0, #4]
 800a13a:	f7ff fd5d 	bl	8009bf8 <get_longest_member_name>
 800a13e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a140:	4604      	mov	r4, r0
 800a142:	4618      	mov	r0, r3
 800a144:	f7f6 f85c 	bl	8000200 <strlen>
 800a148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a14a:	4404      	add	r4, r0
 800a14c:	3401      	adds	r4, #1
 800a14e:	689f      	ldr	r7, [r3, #8]
 800a150:	45a0      	cmp	r8, r4
 800a152:	f106 0601 	add.w	r6, r6, #1
 800a156:	bf38      	it	cc
 800a158:	46a0      	movcc	r8, r4
 800a15a:	42b7      	cmp	r7, r6
 800a15c:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a160:	d9dd      	bls.n	800a11e <micro_ros_utilities_get_dynamic_size+0x1c2>
 800a162:	691c      	ldr	r4, [r3, #16]
 800a164:	e7c7      	b.n	800a0f6 <micro_ros_utilities_get_dynamic_size+0x19a>
 800a166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a168:	689d      	ldr	r5, [r3, #8]
 800a16a:	e798      	b.n	800a09e <micro_ros_utilities_get_dynamic_size+0x142>
 800a16c:	20000384 	.word	0x20000384

0800a170 <micro_ros_utilities_create_message_memory>:
 800a170:	b082      	sub	sp, #8
 800a172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	ed2d 8b04 	vpush	{d8-d9}
 800a17a:	b0a1      	sub	sp, #132	@ 0x84
 800a17c:	ac2e      	add	r4, sp, #184	@ 0xb8
 800a17e:	ae31      	add	r6, sp, #196	@ 0xc4
 800a180:	e884 000c 	stmia.w	r4, {r2, r3}
 800a184:	4605      	mov	r5, r0
 800a186:	468b      	mov	fp, r1
 800a188:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a18c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a190:	ab2e      	add	r3, sp, #184	@ 0xb8
 800a192:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a194:	4628      	mov	r0, r5
 800a196:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800a198:	f7ff fee0 	bl	8009f5c <micro_ros_utilities_get_dynamic_size>
 800a19c:	4603      	mov	r3, r0
 800a19e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1a0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800a1a2:	941e      	str	r4, [sp, #120]	@ 0x78
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bf08      	it	eq
 800a1a8:	2305      	moveq	r3, #5
 800a1aa:	931c      	str	r3, [sp, #112]	@ 0x70
 800a1ac:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	bf08      	it	eq
 800a1b2:	2305      	moveq	r3, #5
 800a1b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a1b6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bf08      	it	eq
 800a1bc:	2314      	moveq	r3, #20
 800a1be:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1c0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a1c2:	931d      	str	r3, [sp, #116]	@ 0x74
 800a1c4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a1c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 800a1c8:	4b81      	ldr	r3, [pc, #516]	@ (800a3d0 <micro_ros_utilities_create_message_memory+0x260>)
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	6819      	ldr	r1, [r3, #0]
 800a1ce:	f002 f9ed 	bl	800c5ac <get_message_typesupport_handle>
 800a1d2:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a1dc:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a1de:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800a1e2:	bb1c      	cbnz	r4, 800a22c <micro_ros_utilities_create_message_memory+0xbc>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a1ea:	4658      	mov	r0, fp
 800a1ec:	f00f fc3b 	bl	8019a66 <memset>
 800a1f0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a1f4:	ab04      	add	r3, sp, #16
 800a1f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a1fa:	ab20      	add	r3, sp, #128	@ 0x80
 800a1fc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a200:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a204:	ac1a      	add	r4, sp, #104	@ 0x68
 800a206:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a20a:	4659      	mov	r1, fp
 800a20c:	4650      	mov	r0, sl
 800a20e:	f7ff fab9 	bl	8009784 <handle_message_memory.constprop.2>
 800a212:	4604      	mov	r4, r0
 800a214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a216:	1b18      	subs	r0, r3, r4
 800a218:	fab0 f080 	clz	r0, r0
 800a21c:	0940      	lsrs	r0, r0, #5
 800a21e:	b021      	add	sp, #132	@ 0x84
 800a220:	ecbd 8b04 	vpop	{d8-d9}
 800a224:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	b002      	add	sp, #8
 800a22a:	4770      	bx	lr
 800a22c:	f8da 5008 	ldr.w	r5, [sl, #8]
 800a230:	9509      	str	r5, [sp, #36]	@ 0x24
 800a232:	b32d      	cbz	r5, 800a280 <micro_ros_utilities_create_message_memory+0x110>
 800a234:	ee08 ba10 	vmov	s16, fp
 800a238:	4699      	mov	r9, r3
 800a23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23c:	461f      	mov	r7, r3
 800a23e:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800a242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	eb03 0209 	add.w	r2, r3, r9
 800a24a:	f853 6009 	ldr.w	r6, [r3, r9]
 800a24e:	7913      	ldrb	r3, [r2, #4]
 800a250:	2b12      	cmp	r3, #18
 800a252:	d03a      	beq.n	800a2ca <micro_ros_utilities_create_message_memory+0x15a>
 800a254:	f04f 0a00 	mov.w	sl, #0
 800a258:	4630      	mov	r0, r6
 800a25a:	f7f5 ffd1 	bl	8000200 <strlen>
 800a25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a260:	4450      	add	r0, sl
 800a262:	3001      	adds	r0, #1
 800a264:	4283      	cmp	r3, r0
 800a266:	f107 0701 	add.w	r7, r7, #1
 800a26a:	bf38      	it	cc
 800a26c:	4603      	movcc	r3, r0
 800a26e:	42af      	cmp	r7, r5
 800a270:	9309      	str	r3, [sp, #36]	@ 0x24
 800a272:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800a276:	d3e4      	bcc.n	800a242 <micro_ros_utilities_create_message_memory+0xd2>
 800a278:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800a27c:	ee18 ba10 	vmov	fp, s16
 800a280:	ac12      	add	r4, sp, #72	@ 0x48
 800a282:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a284:	4620      	mov	r0, r4
 800a286:	f002 ff39 	bl	800d0fc <micro_ros_string_utilities_init_with_size>
 800a28a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a28e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800a292:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a296:	2100      	movs	r1, #0
 800a298:	4658      	mov	r0, fp
 800a29a:	f00f fbe4 	bl	8019a66 <memset>
 800a29e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a2a2:	ab04      	add	r3, sp, #16
 800a2a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a2a8:	ab20      	add	r3, sp, #128	@ 0x80
 800a2aa:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a2ae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a2b2:	ac1a      	add	r4, sp, #104	@ 0x68
 800a2b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	4650      	mov	r0, sl
 800a2bc:	f7ff fa62 	bl	8009784 <handle_message_memory.constprop.2>
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	f002 ff78 	bl	800d1b8 <micro_ros_string_utilities_destroy>
 800a2c8:	e7a4      	b.n	800a214 <micro_ros_utilities_create_message_memory+0xa4>
 800a2ca:	4b41      	ldr	r3, [pc, #260]	@ (800a3d0 <micro_ros_utilities_create_message_memory+0x260>)
 800a2cc:	68d0      	ldr	r0, [r2, #12]
 800a2ce:	6819      	ldr	r1, [r3, #0]
 800a2d0:	f002 f96c 	bl	800c5ac <get_message_typesupport_handle>
 800a2d4:	6843      	ldr	r3, [r0, #4]
 800a2d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2d8:	689d      	ldr	r5, [r3, #8]
 800a2da:	b33d      	cbz	r5, 800a32c <micro_ros_utilities_create_message_memory+0x1bc>
 800a2dc:	f04f 0b00 	mov.w	fp, #0
 800a2e0:	ee08 6a90 	vmov	s17, r6
 800a2e4:	970e      	str	r7, [sp, #56]	@ 0x38
 800a2e6:	46da      	mov	sl, fp
 800a2e8:	465f      	mov	r7, fp
 800a2ea:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800a2ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	eb03 020b 	add.w	r2, r3, fp
 800a2f6:	f853 600b 	ldr.w	r6, [r3, fp]
 800a2fa:	7913      	ldrb	r3, [r2, #4]
 800a2fc:	2b12      	cmp	r3, #18
 800a2fe:	d018      	beq.n	800a332 <micro_ros_utilities_create_message_memory+0x1c2>
 800a300:	2400      	movs	r4, #0
 800a302:	4630      	mov	r0, r6
 800a304:	f7f5 ff7c 	bl	8000200 <strlen>
 800a308:	4404      	add	r4, r0
 800a30a:	3401      	adds	r4, #1
 800a30c:	45a2      	cmp	sl, r4
 800a30e:	f107 0701 	add.w	r7, r7, #1
 800a312:	bf38      	it	cc
 800a314:	46a2      	movcc	sl, r4
 800a316:	42af      	cmp	r7, r5
 800a318:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 800a31c:	d3e7      	bcc.n	800a2ee <micro_ros_utilities_create_message_memory+0x17e>
 800a31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a320:	e9dd 790e 	ldrd	r7, r9, [sp, #56]	@ 0x38
 800a324:	ee18 6a90 	vmov	r6, s17
 800a328:	689d      	ldr	r5, [r3, #8]
 800a32a:	e795      	b.n	800a258 <micro_ros_utilities_create_message_memory+0xe8>
 800a32c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a32e:	689d      	ldr	r5, [r3, #8]
 800a330:	e790      	b.n	800a254 <micro_ros_utilities_create_message_memory+0xe4>
 800a332:	4b27      	ldr	r3, [pc, #156]	@ (800a3d0 <micro_ros_utilities_create_message_memory+0x260>)
 800a334:	68d0      	ldr	r0, [r2, #12]
 800a336:	6819      	ldr	r1, [r3, #0]
 800a338:	f002 f938 	bl	800c5ac <get_message_typesupport_handle>
 800a33c:	6843      	ldr	r3, [r0, #4]
 800a33e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a340:	6899      	ldr	r1, [r3, #8]
 800a342:	2900      	cmp	r1, #0
 800a344:	d040      	beq.n	800a3c8 <micro_ros_utilities_create_message_memory+0x258>
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	9710      	str	r7, [sp, #64]	@ 0x40
 800a34a:	2500      	movs	r5, #0
 800a34c:	ee09 6a10 	vmov	s18, r6
 800a350:	46a9      	mov	r9, r5
 800a352:	462e      	mov	r6, r5
 800a354:	460f      	mov	r7, r1
 800a356:	461c      	mov	r4, r3
 800a358:	1962      	adds	r2, r4, r5
 800a35a:	5963      	ldr	r3, [r4, r5]
 800a35c:	f892 c004 	ldrb.w	ip, [r2, #4]
 800a360:	f1bc 0f12 	cmp.w	ip, #18
 800a364:	4618      	mov	r0, r3
 800a366:	d012      	beq.n	800a38e <micro_ros_utilities_create_message_memory+0x21e>
 800a368:	f7f5 ff4a 	bl	8000200 <strlen>
 800a36c:	3001      	adds	r0, #1
 800a36e:	4286      	cmp	r6, r0
 800a370:	f109 0901 	add.w	r9, r9, #1
 800a374:	bf38      	it	cc
 800a376:	4606      	movcc	r6, r0
 800a378:	45b9      	cmp	r9, r7
 800a37a:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a37e:	d3eb      	bcc.n	800a358 <micro_ros_utilities_create_message_memory+0x1e8>
 800a380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a382:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a384:	689d      	ldr	r5, [r3, #8]
 800a386:	4634      	mov	r4, r6
 800a388:	ee19 6a10 	vmov	r6, s18
 800a38c:	e7b9      	b.n	800a302 <micro_ros_utilities_create_message_memory+0x192>
 800a38e:	9311      	str	r3, [sp, #68]	@ 0x44
 800a390:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d0 <micro_ros_utilities_create_message_memory+0x260>)
 800a392:	68d0      	ldr	r0, [r2, #12]
 800a394:	6819      	ldr	r1, [r3, #0]
 800a396:	f002 f909 	bl	800c5ac <get_message_typesupport_handle>
 800a39a:	6840      	ldr	r0, [r0, #4]
 800a39c:	f7ff fc2c 	bl	8009bf8 <get_longest_member_name>
 800a3a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f5 ff2b 	bl	8000200 <strlen>
 800a3aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3ac:	4404      	add	r4, r0
 800a3ae:	3401      	adds	r4, #1
 800a3b0:	689f      	ldr	r7, [r3, #8]
 800a3b2:	42a6      	cmp	r6, r4
 800a3b4:	f109 0901 	add.w	r9, r9, #1
 800a3b8:	bf38      	it	cc
 800a3ba:	4626      	movcc	r6, r4
 800a3bc:	454f      	cmp	r7, r9
 800a3be:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a3c2:	d9dd      	bls.n	800a380 <micro_ros_utilities_create_message_memory+0x210>
 800a3c4:	691c      	ldr	r4, [r3, #16]
 800a3c6:	e7c7      	b.n	800a358 <micro_ros_utilities_create_message_memory+0x1e8>
 800a3c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ca:	689d      	ldr	r5, [r3, #8]
 800a3cc:	e798      	b.n	800a300 <micro_ros_utilities_create_message_memory+0x190>
 800a3ce:	bf00      	nop
 800a3d0:	20000384 	.word	0x20000384

0800a3d4 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a3d4:	4b04      	ldr	r3, [pc, #16]	@ (800a3e8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	b10a      	cbz	r2, 800a3de <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800a3da:	4803      	ldr	r0, [pc, #12]	@ (800a3e8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a3dc:	4770      	bx	lr
 800a3de:	4a03      	ldr	r2, [pc, #12]	@ (800a3ec <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800a3e0:	4801      	ldr	r0, [pc, #4]	@ (800a3e8 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a3e2:	6812      	ldr	r2, [r2, #0]
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	4770      	bx	lr
 800a3e8:	200000dc 	.word	0x200000dc
 800a3ec:	20000380 	.word	0x20000380

0800a3f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a3f0:	4a02      	ldr	r2, [pc, #8]	@ (800a3fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xc>)
 800a3f2:	4b03      	ldr	r3, [pc, #12]	@ (800a400 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x10>)
 800a3f4:	6812      	ldr	r2, [r2, #0]
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000380 	.word	0x20000380
 800a400:	200000dc 	.word	0x200000dc

0800a404 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800a404:	4b04      	ldr	r3, [pc, #16]	@ (800a418 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	b10a      	cbz	r2, 800a40e <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xa>
 800a40a:	4803      	ldr	r0, [pc, #12]	@ (800a418 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800a40c:	4770      	bx	lr
 800a40e:	4a03      	ldr	r2, [pc, #12]	@ (800a41c <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x18>)
 800a410:	4801      	ldr	r0, [pc, #4]	@ (800a418 <rosidl_typesupport_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>)
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	4770      	bx	lr
 800a418:	200000f0 	.word	0x200000f0
 800a41c:	20000380 	.word	0x20000380

0800a420 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800a420:	4b04      	ldr	r3, [pc, #16]	@ (800a434 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800a422:	4805      	ldr	r0, [pc, #20]	@ (800a438 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800a424:	4905      	ldr	r1, [pc, #20]	@ (800a43c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x1c>)
 800a426:	4a06      	ldr	r2, [pc, #24]	@ (800a440 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x20>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6003      	str	r3, [r0, #0]
 800a42c:	600b      	str	r3, [r1, #0]
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20000380 	.word	0x20000380
 800a438:	2000010c 	.word	0x2000010c
 800a43c:	20000118 	.word	0x20000118
 800a440:	200000f0 	.word	0x200000f0

0800a444 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a444:	4b04      	ldr	r3, [pc, #16]	@ (800a458 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	b10a      	cbz	r2, 800a44e <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a44a:	4803      	ldr	r0, [pc, #12]	@ (800a458 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a44c:	4770      	bx	lr
 800a44e:	4a03      	ldr	r2, [pc, #12]	@ (800a45c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a450:	4801      	ldr	r0, [pc, #4]	@ (800a458 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a452:	6812      	ldr	r2, [r2, #0]
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	4770      	bx	lr
 800a458:	2000012c 	.word	0x2000012c
 800a45c:	20000380 	.word	0x20000380

0800a460 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a460:	4a02      	ldr	r2, [pc, #8]	@ (800a46c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800a462:	4b03      	ldr	r3, [pc, #12]	@ (800a470 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800a464:	6812      	ldr	r2, [r2, #0]
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	20000380 	.word	0x20000380
 800a470:	2000012c 	.word	0x2000012c

0800a474 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__size_function__CommandVelocity__cmd_vel>:
 800a474:	2006      	movs	r0, #6
 800a476:	4770      	bx	lr

0800a478 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_const_function__CommandVelocity__cmd_vel>:
 800a478:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__fetch_function__CommandVelocity__cmd_vel>:
 800a480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a484:	680b      	ldr	r3, [r1, #0]
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop

0800a48c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__assign_function__CommandVelocity__cmd_vel>:
 800a48c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a490:	6813      	ldr	r3, [r2, #0]
 800a492:	600b      	str	r3, [r1, #0]
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop

0800a498 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_init_function>:
 800a498:	f007 bdc6 	b.w	8012028 <nereo_interfaces__msg__CommandVelocity__init>

0800a49c <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__CommandVelocity_fini_function>:
 800a49c:	f007 bdc8 	b.w	8012030 <nereo_interfaces__msg__CommandVelocity__fini>

0800a4a0 <nereo_interfaces__msg__CommandVelocity__rosidl_typesupport_introspection_c__get_function__CommandVelocity__cmd_vel>:
 800a4a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop

0800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a4a8:	4b04      	ldr	r3, [pc, #16]	@ (800a4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	b10a      	cbz	r2, 800a4b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0xa>
 800a4ae:	4803      	ldr	r0, [pc, #12]	@ (800a4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a4b0:	4770      	bx	lr
 800a4b2:	4a03      	ldr	r2, [pc, #12]	@ (800a4c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x18>)
 800a4b4:	4801      	ldr	r0, [pc, #4]	@ (800a4bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x14>)
 800a4b6:	6812      	ldr	r2, [r2, #0]
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	4770      	bx	lr
 800a4bc:	20000174 	.word	0x20000174
 800a4c0:	20000384 	.word	0x20000384

0800a4c4 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_init_function>:
 800a4c4:	f007 bdb6 	b.w	8012034 <nereo_interfaces__srv__SetNavigationMode_Request__init>

0800a4c8 <nereo_interfaces__srv__SetNavigationMode_Request__rosidl_typesupport_introspection_c__SetNavigationMode_Request_fini_function>:
 800a4c8:	f007 bdb8 	b.w	801203c <nereo_interfaces__srv__SetNavigationMode_Request__fini>

0800a4cc <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_init_function>:
 800a4cc:	f007 bdb8 	b.w	8012040 <nereo_interfaces__srv__SetNavigationMode_Response__init>

0800a4d0 <nereo_interfaces__srv__SetNavigationMode_Response__rosidl_typesupport_introspection_c__SetNavigationMode_Response_fini_function>:
 800a4d0:	f007 bdba 	b.w	8012048 <nereo_interfaces__srv__SetNavigationMode_Response__fini>

0800a4d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800a4d4:	4b04      	ldr	r3, [pc, #16]	@ (800a4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	b10a      	cbz	r2, 800a4de <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0xa>
 800a4da:	4803      	ldr	r0, [pc, #12]	@ (800a4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800a4dc:	4770      	bx	lr
 800a4de:	4a03      	ldr	r2, [pc, #12]	@ (800a4ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x18>)
 800a4e0:	4801      	ldr	r0, [pc, #4]	@ (800a4e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x14>)
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	4770      	bx	lr
 800a4e8:	200001bc 	.word	0x200001bc
 800a4ec:	20000384 	.word	0x20000384

0800a4f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800a4f0:	4b04      	ldr	r3, [pc, #16]	@ (800a504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	b10a      	cbz	r2, 800a4fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0xa>
 800a4f6:	4803      	ldr	r0, [pc, #12]	@ (800a504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800a4f8:	4770      	bx	lr
 800a4fa:	4a03      	ldr	r2, [pc, #12]	@ (800a508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x18>)
 800a4fc:	4801      	ldr	r0, [pc, #4]	@ (800a504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x14>)
 800a4fe:	6812      	ldr	r2, [r2, #0]
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	4770      	bx	lr
 800a504:	20000240 	.word	0x20000240
 800a508:	20000384 	.word	0x20000384

0800a50c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800a50c:	4b13      	ldr	r3, [pc, #76]	@ (800a55c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	b132      	cbz	r2, 800a520 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x14>
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	689a      	ldr	r2, [r3, #8]
 800a516:	b152      	cbz	r2, 800a52e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x22>
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	b182      	cbz	r2, 800a53e <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x32>
 800a51c:	480f      	ldr	r0, [pc, #60]	@ (800a55c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800a51e:	4770      	bx	lr
 800a520:	4a0f      	ldr	r2, [pc, #60]	@ (800a560 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800a522:	6812      	ldr	r2, [r2, #0]
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	689a      	ldr	r2, [r3, #8]
 800a52a:	2a00      	cmp	r2, #0
 800a52c:	d1f4      	bne.n	800a518 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0xc>
 800a52e:	4a0d      	ldr	r2, [pc, #52]	@ (800a564 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x58>)
 800a530:	6811      	ldr	r1, [r2, #0]
 800a532:	b179      	cbz	r1, 800a554 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x48>
 800a534:	6852      	ldr	r2, [r2, #4]
 800a536:	609a      	str	r2, [r3, #8]
 800a538:	68da      	ldr	r2, [r3, #12]
 800a53a:	2a00      	cmp	r2, #0
 800a53c:	d1ee      	bne.n	800a51c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x10>
 800a53e:	4a0a      	ldr	r2, [pc, #40]	@ (800a568 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x5c>)
 800a540:	6811      	ldr	r1, [r2, #0]
 800a542:	b119      	cbz	r1, 800a54c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x40>
 800a544:	6852      	ldr	r2, [r2, #4]
 800a546:	4805      	ldr	r0, [pc, #20]	@ (800a55c <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x50>)
 800a548:	60da      	str	r2, [r3, #12]
 800a54a:	4770      	bx	lr
 800a54c:	4904      	ldr	r1, [pc, #16]	@ (800a560 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800a54e:	6809      	ldr	r1, [r1, #0]
 800a550:	6011      	str	r1, [r2, #0]
 800a552:	e7f7      	b.n	800a544 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x38>
 800a554:	4902      	ldr	r1, [pc, #8]	@ (800a560 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x54>)
 800a556:	6809      	ldr	r1, [r1, #0]
 800a558:	6011      	str	r1, [r2, #0]
 800a55a:	e7eb      	b.n	800a534 <rosidl_typesupport_introspection_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x28>
 800a55c:	2000025c 	.word	0x2000025c
 800a560:	20000384 	.word	0x20000384
 800a564:	200001bc 	.word	0x200001bc
 800a568:	20000240 	.word	0x20000240

0800a56c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thruster_pwms>:
 800a56c:	2008      	movs	r0, #8
 800a56e:	4770      	bx	lr

0800a570 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thruster_pwms>:
 800a570:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop

0800a578 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thruster_pwms>:
 800a578:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800a57c:	8013      	strh	r3, [r2, #0]
 800a57e:	4770      	bx	lr

0800a580 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thruster_pwms>:
 800a580:	8813      	ldrh	r3, [r2, #0]
 800a582:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a586:	4770      	bx	lr

0800a588 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800a588:	f007 bd60 	b.w	801204c <nereo_interfaces__msg__ThrusterStatuses__init>

0800a58c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800a58c:	f007 bd62 	b.w	8012054 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800a590 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thruster_pwms>:
 800a590:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop

0800a598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a598:	4b04      	ldr	r3, [pc, #16]	@ (800a5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	b10a      	cbz	r2, 800a5a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a59e:	4803      	ldr	r0, [pc, #12]	@ (800a5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a5a0:	4770      	bx	lr
 800a5a2:	4a03      	ldr	r2, [pc, #12]	@ (800a5b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a5a4:	4801      	ldr	r0, [pc, #4]	@ (800a5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a5a6:	6812      	ldr	r2, [r2, #0]
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	4770      	bx	lr
 800a5ac:	200002a4 	.word	0x200002a4
 800a5b0:	20000384 	.word	0x20000384

0800a5b4 <_CommandVelocity__max_serialized_size>:
 800a5b4:	b508      	push	{r3, lr}
 800a5b6:	2104      	movs	r1, #4
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	f004 fd7d 	bl	800f0b8 <ucdr_alignment>
 800a5be:	3018      	adds	r0, #24
 800a5c0:	bd08      	pop	{r3, pc}
 800a5c2:	bf00      	nop

0800a5c4 <get_serialized_size_nereo_interfaces__msg__CommandVelocity>:
 800a5c4:	b138      	cbz	r0, 800a5d6 <get_serialized_size_nereo_interfaces__msg__CommandVelocity+0x12>
 800a5c6:	b508      	push	{r3, lr}
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	2104      	movs	r1, #4
 800a5ce:	f004 fd73 	bl	800f0b8 <ucdr_alignment>
 800a5d2:	3018      	adds	r0, #24
 800a5d4:	bd08      	pop	{r3, pc}
 800a5d6:	4770      	bx	lr

0800a5d8 <_CommandVelocity__cdr_deserialize>:
 800a5d8:	b111      	cbz	r1, 800a5e0 <_CommandVelocity__cdr_deserialize+0x8>
 800a5da:	2206      	movs	r2, #6
 800a5dc:	f003 b828 	b.w	800d630 <ucdr_deserialize_array_float>
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	4770      	bx	lr

0800a5e4 <_CommandVelocity__cdr_serialize>:
 800a5e4:	468c      	mov	ip, r1
 800a5e6:	4601      	mov	r1, r0
 800a5e8:	b118      	cbz	r0, 800a5f2 <_CommandVelocity__cdr_serialize+0xe>
 800a5ea:	2206      	movs	r2, #6
 800a5ec:	4660      	mov	r0, ip
 800a5ee:	f002 bfcb 	b.w	800d588 <ucdr_serialize_array_float>
 800a5f2:	4770      	bx	lr

0800a5f4 <_CommandVelocity__get_serialized_size>:
 800a5f4:	b130      	cbz	r0, 800a604 <_CommandVelocity__get_serialized_size+0x10>
 800a5f6:	b508      	push	{r3, lr}
 800a5f8:	2104      	movs	r1, #4
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	f004 fd5c 	bl	800f0b8 <ucdr_alignment>
 800a600:	3018      	adds	r0, #24
 800a602:	bd08      	pop	{r3, pc}
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop

0800a608 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity>:
 800a608:	4800      	ldr	r0, [pc, #0]	@ (800a60c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__CommandVelocity+0x4>)
 800a60a:	4770      	bx	lr
 800a60c:	200002b0 	.word	0x200002b0

0800a610 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request>:
 800a610:	4800      	ldr	r0, [pc, #0]	@ (800a614 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Request+0x4>)
 800a612:	4770      	bx	lr
 800a614:	200002f4 	.word	0x200002f4

0800a618 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response>:
 800a618:	4800      	ldr	r0, [pc, #0]	@ (800a61c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__srv__SetNavigationMode_Response+0x4>)
 800a61a:	4770      	bx	lr
 800a61c:	20000300 	.word	0x20000300

0800a620 <_SetNavigationMode_Request__max_serialized_size>:
 800a620:	b508      	push	{r3, lr}
 800a622:	2101      	movs	r1, #1
 800a624:	2000      	movs	r0, #0
 800a626:	f004 fd47 	bl	800f0b8 <ucdr_alignment>
 800a62a:	3001      	adds	r0, #1
 800a62c:	bd08      	pop	{r3, pc}
 800a62e:	bf00      	nop

0800a630 <_SetNavigationMode_Request__cdr_deserialize>:
 800a630:	b109      	cbz	r1, 800a636 <_SetNavigationMode_Request__cdr_deserialize+0x6>
 800a632:	f003 b941 	b.w	800d8b8 <ucdr_deserialize_uint8_t>
 800a636:	4608      	mov	r0, r1
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop

0800a63c <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request>:
 800a63c:	b138      	cbz	r0, 800a64e <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Request+0x12>
 800a63e:	b508      	push	{r3, lr}
 800a640:	460b      	mov	r3, r1
 800a642:	4618      	mov	r0, r3
 800a644:	2101      	movs	r1, #1
 800a646:	f004 fd37 	bl	800f0b8 <ucdr_alignment>
 800a64a:	3001      	adds	r0, #1
 800a64c:	bd08      	pop	{r3, pc}
 800a64e:	4770      	bx	lr

0800a650 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response>:
 800a650:	b180      	cbz	r0, 800a674 <get_serialized_size_nereo_interfaces__srv__SetNavigationMode_Response+0x24>
 800a652:	b538      	push	{r3, r4, r5, lr}
 800a654:	460d      	mov	r5, r1
 800a656:	4628      	mov	r0, r5
 800a658:	2101      	movs	r1, #1
 800a65a:	f004 fd2d 	bl	800f0b8 <ucdr_alignment>
 800a65e:	1c6b      	adds	r3, r5, #1
 800a660:	181c      	adds	r4, r3, r0
 800a662:	2101      	movs	r1, #1
 800a664:	4620      	mov	r0, r4
 800a666:	f004 fd27 	bl	800f0b8 <ucdr_alignment>
 800a66a:	f1c5 0501 	rsb	r5, r5, #1
 800a66e:	4428      	add	r0, r5
 800a670:	4420      	add	r0, r4
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop

0800a678 <_SetNavigationMode_Request__cdr_serialize>:
 800a678:	460a      	mov	r2, r1
 800a67a:	b118      	cbz	r0, 800a684 <_SetNavigationMode_Request__cdr_serialize+0xc>
 800a67c:	7801      	ldrb	r1, [r0, #0]
 800a67e:	4610      	mov	r0, r2
 800a680:	f003 b904 	b.w	800d88c <ucdr_serialize_uint8_t>
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop

0800a688 <_SetNavigationMode_Response__cdr_deserialize>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	b141      	cbz	r1, 800a6a0 <_SetNavigationMode_Response__cdr_deserialize+0x18>
 800a68e:	4605      	mov	r5, r0
 800a690:	f003 f8e4 	bl	800d85c <ucdr_deserialize_bool>
 800a694:	1c61      	adds	r1, r4, #1
 800a696:	4628      	mov	r0, r5
 800a698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a69c:	f003 b90c 	b.w	800d8b8 <ucdr_deserialize_uint8_t>
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}

0800a6a4 <_SetNavigationMode_Response__cdr_serialize>:
 800a6a4:	b160      	cbz	r0, 800a6c0 <_SetNavigationMode_Response__cdr_serialize+0x1c>
 800a6a6:	b538      	push	{r3, r4, r5, lr}
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	7801      	ldrb	r1, [r0, #0]
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f003 f8be 	bl	800d830 <ucdr_serialize_bool>
 800a6b4:	7861      	ldrb	r1, [r4, #1]
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6bc:	f003 b8e6 	b.w	800d88c <ucdr_serialize_uint8_t>
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop

0800a6c4 <_SetNavigationMode_Request__get_serialized_size>:
 800a6c4:	b130      	cbz	r0, 800a6d4 <_SetNavigationMode_Request__get_serialized_size+0x10>
 800a6c6:	b508      	push	{r3, lr}
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f004 fcf4 	bl	800f0b8 <ucdr_alignment>
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	bd08      	pop	{r3, pc}
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop

0800a6d8 <_SetNavigationMode_Response__get_serialized_size>:
 800a6d8:	b160      	cbz	r0, 800a6f4 <_SetNavigationMode_Response__get_serialized_size+0x1c>
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	2101      	movs	r1, #1
 800a6de:	2000      	movs	r0, #0
 800a6e0:	f004 fcea 	bl	800f0b8 <ucdr_alignment>
 800a6e4:	1c44      	adds	r4, r0, #1
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f004 fce5 	bl	800f0b8 <ucdr_alignment>
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	4420      	add	r0, r4
 800a6f2:	bd10      	pop	{r4, pc}
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop

0800a6f8 <_SetNavigationMode_Response__max_serialized_size>:
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f004 fcdb 	bl	800f0b8 <ucdr_alignment>
 800a702:	1c44      	adds	r4, r0, #1
 800a704:	2101      	movs	r1, #1
 800a706:	4620      	mov	r0, r4
 800a708:	f004 fcd6 	bl	800f0b8 <ucdr_alignment>
 800a70c:	3001      	adds	r0, #1
 800a70e:	4420      	add	r0, r4
 800a710:	bd10      	pop	{r4, pc}
 800a712:	bf00      	nop

0800a714 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode>:
 800a714:	4800      	ldr	r0, [pc, #0]	@ (800a718 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__nereo_interfaces__srv__SetNavigationMode+0x4>)
 800a716:	4770      	bx	lr
 800a718:	200002e8 	.word	0x200002e8

0800a71c <_ThrusterStatuses__max_serialized_size>:
 800a71c:	b508      	push	{r3, lr}
 800a71e:	2102      	movs	r1, #2
 800a720:	2000      	movs	r0, #0
 800a722:	f004 fcc9 	bl	800f0b8 <ucdr_alignment>
 800a726:	3010      	adds	r0, #16
 800a728:	bd08      	pop	{r3, pc}
 800a72a:	bf00      	nop

0800a72c <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800a72c:	b138      	cbz	r0, 800a73e <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0x12>
 800a72e:	b508      	push	{r3, lr}
 800a730:	460b      	mov	r3, r1
 800a732:	4618      	mov	r0, r3
 800a734:	2102      	movs	r1, #2
 800a736:	f004 fcbf 	bl	800f0b8 <ucdr_alignment>
 800a73a:	3010      	adds	r0, #16
 800a73c:	bd08      	pop	{r3, pc}
 800a73e:	4770      	bx	lr

0800a740 <_ThrusterStatuses__cdr_deserialize>:
 800a740:	b111      	cbz	r1, 800a748 <_ThrusterStatuses__cdr_deserialize+0x8>
 800a742:	2208      	movs	r2, #8
 800a744:	f002 beca 	b.w	800d4dc <ucdr_deserialize_array_uint16_t>
 800a748:	4608      	mov	r0, r1
 800a74a:	4770      	bx	lr

0800a74c <_ThrusterStatuses__cdr_serialize>:
 800a74c:	468c      	mov	ip, r1
 800a74e:	4601      	mov	r1, r0
 800a750:	b118      	cbz	r0, 800a75a <_ThrusterStatuses__cdr_serialize+0xe>
 800a752:	2208      	movs	r2, #8
 800a754:	4660      	mov	r0, ip
 800a756:	f002 be6b 	b.w	800d430 <ucdr_serialize_array_uint16_t>
 800a75a:	4770      	bx	lr

0800a75c <_ThrusterStatuses__get_serialized_size>:
 800a75c:	b130      	cbz	r0, 800a76c <_ThrusterStatuses__get_serialized_size+0x10>
 800a75e:	b508      	push	{r3, lr}
 800a760:	2102      	movs	r1, #2
 800a762:	2000      	movs	r0, #0
 800a764:	f004 fca8 	bl	800f0b8 <ucdr_alignment>
 800a768:	3010      	adds	r0, #16
 800a76a:	bd08      	pop	{r3, pc}
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop

0800a770 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a770:	4800      	ldr	r0, [pc, #0]	@ (800a774 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800a772:	4770      	bx	lr
 800a774:	20000344 	.word	0x20000344

0800a778 <rcl_get_zero_initialized_publisher>:
 800a778:	4b01      	ldr	r3, [pc, #4]	@ (800a780 <rcl_get_zero_initialized_publisher+0x8>)
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	0801b5c8 	.word	0x0801b5c8

0800a784 <rcl_publisher_init>:
 800a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a788:	b088      	sub	sp, #32
 800a78a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a78c:	2d00      	cmp	r5, #0
 800a78e:	d069      	beq.n	800a864 <rcl_publisher_init+0xe0>
 800a790:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a794:	4604      	mov	r4, r0
 800a796:	4648      	mov	r0, r9
 800a798:	460e      	mov	r6, r1
 800a79a:	4690      	mov	r8, r2
 800a79c:	461f      	mov	r7, r3
 800a79e:	f001 f8b7 	bl	800b910 <rcutils_allocator_is_valid>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d05e      	beq.n	800a864 <rcl_publisher_init+0xe0>
 800a7a6:	2c00      	cmp	r4, #0
 800a7a8:	d05c      	beq.n	800a864 <rcl_publisher_init+0xe0>
 800a7aa:	f8d4 a000 	ldr.w	sl, [r4]
 800a7ae:	f1ba 0f00 	cmp.w	sl, #0
 800a7b2:	d004      	beq.n	800a7be <rcl_publisher_init+0x3a>
 800a7b4:	2764      	movs	r7, #100	@ 0x64
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	b008      	add	sp, #32
 800a7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f008 f8d0 	bl	8012964 <rcl_node_is_valid>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d052      	beq.n	800a86e <rcl_publisher_init+0xea>
 800a7c8:	f1b8 0f00 	cmp.w	r8, #0
 800a7cc:	d04a      	beq.n	800a864 <rcl_publisher_init+0xe0>
 800a7ce:	2f00      	cmp	r7, #0
 800a7d0:	d048      	beq.n	800a864 <rcl_publisher_init+0xe0>
 800a7d2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a7d6:	aa07      	add	r2, sp, #28
 800a7d8:	9205      	str	r2, [sp, #20]
 800a7da:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a7de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a7e6:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f008 f90b 	bl	8012a0c <rcl_node_resolve_name>
 800a7f6:	4607      	mov	r7, r0
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	d14f      	bne.n	800a89c <rcl_publisher_init+0x118>
 800a7fc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a7fe:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a800:	20c8      	movs	r0, #200	@ 0xc8
 800a802:	4798      	blx	r3
 800a804:	6020      	str	r0, [r4, #0]
 800a806:	2800      	cmp	r0, #0
 800a808:	d04e      	beq.n	800a8a8 <rcl_publisher_init+0x124>
 800a80a:	4630      	mov	r0, r6
 800a80c:	f008 f8cc 	bl	80129a8 <rcl_node_get_rmw_handle>
 800a810:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	9a07      	ldr	r2, [sp, #28]
 800a818:	6827      	ldr	r7, [r4, #0]
 800a81a:	462b      	mov	r3, r5
 800a81c:	4641      	mov	r1, r8
 800a81e:	f001 f985 	bl	800bb2c <rmw_create_publisher>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a828:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a82c:	b370      	cbz	r0, 800a88c <rcl_publisher_init+0x108>
 800a82e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a832:	f001 fa59 	bl	800bce8 <rmw_publisher_get_actual_qos>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	4607      	mov	r7, r0
 800a83a:	b9d0      	cbnz	r0, 800a872 <rcl_publisher_init+0xee>
 800a83c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a840:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a844:	4629      	mov	r1, r5
 800a846:	2270      	movs	r2, #112	@ 0x70
 800a848:	4618      	mov	r0, r3
 800a84a:	f00f f974 	bl	8019b36 <memcpy>
 800a84e:	6832      	ldr	r2, [r6, #0]
 800a850:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a854:	9807      	ldr	r0, [sp, #28]
 800a856:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a858:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a85a:	4798      	blx	r3
 800a85c:	4638      	mov	r0, r7
 800a85e:	b008      	add	sp, #32
 800a860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a864:	270b      	movs	r7, #11
 800a866:	4638      	mov	r0, r7
 800a868:	b008      	add	sp, #32
 800a86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86e:	27c8      	movs	r7, #200	@ 0xc8
 800a870:	e7a1      	b.n	800a7b6 <rcl_publisher_init+0x32>
 800a872:	b18b      	cbz	r3, 800a898 <rcl_publisher_init+0x114>
 800a874:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a878:	b142      	cbz	r2, 800a88c <rcl_publisher_init+0x108>
 800a87a:	4630      	mov	r0, r6
 800a87c:	f008 f894 	bl	80129a8 <rcl_node_get_rmw_handle>
 800a880:	6823      	ldr	r3, [r4, #0]
 800a882:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a886:	f001 fa3f 	bl	800bd08 <rmw_destroy_publisher>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a88e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a890:	4618      	mov	r0, r3
 800a892:	4790      	blx	r2
 800a894:	2300      	movs	r3, #0
 800a896:	6023      	str	r3, [r4, #0]
 800a898:	2701      	movs	r7, #1
 800a89a:	e7db      	b.n	800a854 <rcl_publisher_init+0xd0>
 800a89c:	2867      	cmp	r0, #103	@ 0x67
 800a89e:	d0d9      	beq.n	800a854 <rcl_publisher_init+0xd0>
 800a8a0:	2869      	cmp	r0, #105	@ 0x69
 800a8a2:	d003      	beq.n	800a8ac <rcl_publisher_init+0x128>
 800a8a4:	280a      	cmp	r0, #10
 800a8a6:	d1f7      	bne.n	800a898 <rcl_publisher_init+0x114>
 800a8a8:	270a      	movs	r7, #10
 800a8aa:	e7d3      	b.n	800a854 <rcl_publisher_init+0xd0>
 800a8ac:	2767      	movs	r7, #103	@ 0x67
 800a8ae:	e7d1      	b.n	800a854 <rcl_publisher_init+0xd0>

0800a8b0 <rcl_publisher_get_default_options>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	4d14      	ldr	r5, [pc, #80]	@ (800a904 <rcl_publisher_get_default_options+0x54>)
 800a8b4:	4914      	ldr	r1, [pc, #80]	@ (800a908 <rcl_publisher_get_default_options+0x58>)
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	2250      	movs	r2, #80	@ 0x50
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f00f f93a 	bl	8019b36 <memcpy>
 800a8c2:	a802      	add	r0, sp, #8
 800a8c4:	f001 f816 	bl	800b8f4 <rcutils_get_default_allocator>
 800a8c8:	f10d 0c08 	add.w	ip, sp, #8
 800a8cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a8d0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a8d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a8d8:	466e      	mov	r6, sp
 800a8da:	f8dc 3000 	ldr.w	r3, [ip]
 800a8de:	f8ce 3000 	str.w	r3, [lr]
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f001 f8a4 	bl	800ba30 <rmw_get_default_publisher_options>
 800a8e8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a8ec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a8f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800a8f4:	2270      	movs	r2, #112	@ 0x70
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f00f f91c 	bl	8019b36 <memcpy>
 800a8fe:	4620      	mov	r0, r4
 800a900:	b008      	add	sp, #32
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	20010ce0 	.word	0x20010ce0
 800a908:	0801b5d0 	.word	0x0801b5d0

0800a90c <rcl_publish>:
 800a90c:	b1f8      	cbz	r0, 800a94e <rcl_publish+0x42>
 800a90e:	6803      	ldr	r3, [r0, #0]
 800a910:	b570      	push	{r4, r5, r6, lr}
 800a912:	4604      	mov	r4, r0
 800a914:	b1b3      	cbz	r3, 800a944 <rcl_publish+0x38>
 800a916:	4616      	mov	r6, r2
 800a918:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a91c:	b192      	cbz	r2, 800a944 <rcl_publish+0x38>
 800a91e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a922:	460d      	mov	r5, r1
 800a924:	f007 fc44 	bl	80121b0 <rcl_context_is_valid>
 800a928:	b160      	cbz	r0, 800a944 <rcl_publish+0x38>
 800a92a:	6823      	ldr	r3, [r4, #0]
 800a92c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a930:	b140      	cbz	r0, 800a944 <rcl_publish+0x38>
 800a932:	b155      	cbz	r5, 800a94a <rcl_publish+0x3e>
 800a934:	4632      	mov	r2, r6
 800a936:	4629      	mov	r1, r5
 800a938:	f001 f898 	bl	800ba6c <rmw_publish>
 800a93c:	3800      	subs	r0, #0
 800a93e:	bf18      	it	ne
 800a940:	2001      	movne	r0, #1
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a948:	bd70      	pop	{r4, r5, r6, pc}
 800a94a:	200b      	movs	r0, #11
 800a94c:	bd70      	pop	{r4, r5, r6, pc}
 800a94e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a952:	4770      	bx	lr

0800a954 <rcl_publisher_is_valid>:
 800a954:	b1a0      	cbz	r0, 800a980 <rcl_publisher_is_valid+0x2c>
 800a956:	6803      	ldr	r3, [r0, #0]
 800a958:	b510      	push	{r4, lr}
 800a95a:	4604      	mov	r4, r0
 800a95c:	b173      	cbz	r3, 800a97c <rcl_publisher_is_valid+0x28>
 800a95e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a962:	b15a      	cbz	r2, 800a97c <rcl_publisher_is_valid+0x28>
 800a964:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a968:	f007 fc22 	bl	80121b0 <rcl_context_is_valid>
 800a96c:	b130      	cbz	r0, 800a97c <rcl_publisher_is_valid+0x28>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a974:	3800      	subs	r0, #0
 800a976:	bf18      	it	ne
 800a978:	2001      	movne	r0, #1
 800a97a:	bd10      	pop	{r4, pc}
 800a97c:	2000      	movs	r0, #0
 800a97e:	bd10      	pop	{r4, pc}
 800a980:	2000      	movs	r0, #0
 800a982:	4770      	bx	lr

0800a984 <rcl_publisher_is_valid_except_context>:
 800a984:	b130      	cbz	r0, 800a994 <rcl_publisher_is_valid_except_context+0x10>
 800a986:	6800      	ldr	r0, [r0, #0]
 800a988:	b120      	cbz	r0, 800a994 <rcl_publisher_is_valid_except_context+0x10>
 800a98a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a98e:	3800      	subs	r0, #0
 800a990:	bf18      	it	ne
 800a992:	2001      	movne	r0, #1
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop

0800a998 <_rclc_check_for_new_data>:
 800a998:	2800      	cmp	r0, #0
 800a99a:	d046      	beq.n	800aa2a <_rclc_check_for_new_data+0x92>
 800a99c:	b510      	push	{r4, lr}
 800a99e:	7802      	ldrb	r2, [r0, #0]
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2a0a      	cmp	r2, #10
 800a9a6:	d842      	bhi.n	800aa2e <_rclc_check_for_new_data+0x96>
 800a9a8:	e8df f002 	tbb	[pc, r2]
 800a9ac:	14181212 	.word	0x14181212
 800a9b0:	06060614 	.word	0x06060614
 800a9b4:	2e1a      	.short	0x2e1a
 800a9b6:	16          	.byte	0x16
 800a9b7:	00          	.byte	0x00
 800a9b8:	6a0a      	ldr	r2, [r1, #32]
 800a9ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a9bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	1a12      	subs	r2, r2, r0
 800a9c4:	bf18      	it	ne
 800a9c6:	2201      	movne	r2, #1
 800a9c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a9cc:	b004      	add	sp, #16
 800a9ce:	bd10      	pop	{r4, pc}
 800a9d0:	680a      	ldr	r2, [r1, #0]
 800a9d2:	e7f2      	b.n	800a9ba <_rclc_check_for_new_data+0x22>
 800a9d4:	698a      	ldr	r2, [r1, #24]
 800a9d6:	e7f0      	b.n	800a9ba <_rclc_check_for_new_data+0x22>
 800a9d8:	688a      	ldr	r2, [r1, #8]
 800a9da:	e7ee      	b.n	800a9ba <_rclc_check_for_new_data+0x22>
 800a9dc:	690a      	ldr	r2, [r1, #16]
 800a9de:	e7ec      	b.n	800a9ba <_rclc_check_for_new_data+0x22>
 800a9e0:	685c      	ldr	r4, [r3, #4]
 800a9e2:	4608      	mov	r0, r1
 800a9e4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a9e8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a9ec:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a9f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a9fa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a9fe:	f104 0110 	add.w	r1, r4, #16
 800aa02:	f009 fd81 	bl	8014508 <rcl_action_client_wait_set_get_entities_ready>
 800aa06:	e7e1      	b.n	800a9cc <_rclc_check_for_new_data+0x34>
 800aa08:	685c      	ldr	r4, [r3, #4]
 800aa0a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800aa0e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800aa12:	e9cd 3200 	strd	r3, r2, [sp]
 800aa16:	4608      	mov	r0, r1
 800aa18:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800aa1c:	f104 0220 	add.w	r2, r4, #32
 800aa20:	f104 0110 	add.w	r1, r4, #16
 800aa24:	f009 ff88 	bl	8014938 <rcl_action_server_wait_set_get_entities_ready>
 800aa28:	e7d0      	b.n	800a9cc <_rclc_check_for_new_data+0x34>
 800aa2a:	200b      	movs	r0, #11
 800aa2c:	4770      	bx	lr
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e7cc      	b.n	800a9cc <_rclc_check_for_new_data+0x34>
 800aa32:	bf00      	nop

0800aa34 <_rclc_take_new_data>:
 800aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa36:	b09b      	sub	sp, #108	@ 0x6c
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	f000 8088 	beq.w	800ab4e <_rclc_take_new_data+0x11a>
 800aa3e:	7803      	ldrb	r3, [r0, #0]
 800aa40:	4604      	mov	r4, r0
 800aa42:	2b0a      	cmp	r3, #10
 800aa44:	f200 8167 	bhi.w	800ad16 <_rclc_take_new_data+0x2e2>
 800aa48:	e8df f003 	tbb	[pc, r3]
 800aa4c:	44152d2d 	.word	0x44152d2d
 800aa50:	19191944 	.word	0x19191944
 800aa54:	065a      	.short	0x065a
 800aa56:	15          	.byte	0x15
 800aa57:	00          	.byte	0x00
 800aa58:	6840      	ldr	r0, [r0, #4]
 800aa5a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f040 80b2 	bne.w	800abc8 <_rclc_take_new_data+0x194>
 800aa64:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f040 80e4 	bne.w	800ac36 <_rclc_take_new_data+0x202>
 800aa6e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d16f      	bne.n	800ab56 <_rclc_take_new_data+0x122>
 800aa76:	2500      	movs	r5, #0
 800aa78:	4628      	mov	r0, r5
 800aa7a:	b01b      	add	sp, #108	@ 0x6c
 800aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa7e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aa80:	6a0b      	ldr	r3, [r1, #32]
 800aa82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0f5      	beq.n	800aa76 <_rclc_take_new_data+0x42>
 800aa8a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800aa8e:	f104 0110 	add.w	r1, r4, #16
 800aa92:	f008 fa17 	bl	8012ec4 <rcl_take_request>
 800aa96:	4605      	mov	r5, r0
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0ec      	beq.n	800aa76 <_rclc_take_new_data+0x42>
 800aa9c:	f240 2359 	movw	r3, #601	@ 0x259
 800aaa0:	4298      	cmp	r0, r3
 800aaa2:	d013      	beq.n	800aacc <_rclc_take_new_data+0x98>
 800aaa4:	e029      	b.n	800aafa <_rclc_take_new_data+0xc6>
 800aaa6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aaa8:	680b      	ldr	r3, [r1, #0]
 800aaaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d0e1      	beq.n	800aa76 <_rclc_take_new_data+0x42>
 800aab2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800aab6:	2300      	movs	r3, #0
 800aab8:	aa0a      	add	r2, sp, #40	@ 0x28
 800aaba:	f008 fb41 	bl	8013140 <rcl_take>
 800aabe:	4605      	mov	r5, r0
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0d9      	beq.n	800aa78 <_rclc_take_new_data+0x44>
 800aac4:	f240 1391 	movw	r3, #401	@ 0x191
 800aac8:	4298      	cmp	r0, r3
 800aaca:	d116      	bne.n	800aafa <_rclc_take_new_data+0xc6>
 800aacc:	2300      	movs	r3, #0
 800aace:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800aad2:	e7d1      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800aad4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aad6:	698b      	ldr	r3, [r1, #24]
 800aad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0ca      	beq.n	800aa76 <_rclc_take_new_data+0x42>
 800aae0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800aae4:	f104 0110 	add.w	r1, r4, #16
 800aae8:	f007 faf2 	bl	80120d0 <rcl_take_response>
 800aaec:	4605      	mov	r5, r0
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d0c1      	beq.n	800aa76 <_rclc_take_new_data+0x42>
 800aaf2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800aaf6:	4298      	cmp	r0, r3
 800aaf8:	d0be      	beq.n	800aa78 <_rclc_take_new_data+0x44>
 800aafa:	f000 ff2d 	bl	800b958 <rcutils_reset_error>
 800aafe:	e7bb      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800ab00:	6840      	ldr	r0, [r0, #4]
 800ab02:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d17d      	bne.n	800ac06 <_rclc_take_new_data+0x1d2>
 800ab0a:	69c3      	ldr	r3, [r0, #28]
 800ab0c:	b11b      	cbz	r3, 800ab16 <_rclc_take_new_data+0xe2>
 800ab0e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d144      	bne.n	800aba0 <_rclc_take_new_data+0x16c>
 800ab16:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f040 80ac 	bne.w	800ac78 <_rclc_take_new_data+0x244>
 800ab20:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0a6      	beq.n	800aa76 <_rclc_take_new_data+0x42>
 800ab28:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ab2a:	a90a      	add	r1, sp, #40	@ 0x28
 800ab2c:	3010      	adds	r0, #16
 800ab2e:	f009 fbc3 	bl	80142b8 <rcl_action_take_result_response>
 800ab32:	4605      	mov	r5, r0
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d1e0      	bne.n	800aafa <_rclc_take_new_data+0xc6>
 800ab38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab3c:	6860      	ldr	r0, [r4, #4]
 800ab3e:	f00a f81f 	bl	8014b80 <rclc_action_find_handle_by_result_request_sequence_number>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d098      	beq.n	800aa78 <_rclc_take_new_data+0x44>
 800ab46:	2301      	movs	r3, #1
 800ab48:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ab4c:	e794      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800ab4e:	250b      	movs	r5, #11
 800ab50:	4628      	mov	r0, r5
 800ab52:	b01b      	add	sp, #108	@ 0x6c
 800ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab56:	ae04      	add	r6, sp, #16
 800ab58:	aa0a      	add	r2, sp, #40	@ 0x28
 800ab5a:	3010      	adds	r0, #16
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	f009 fe1f 	bl	80147a0 <rcl_action_take_cancel_request>
 800ab62:	4605      	mov	r5, r0
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d1c8      	bne.n	800aafa <_rclc_take_new_data+0xc6>
 800ab68:	6860      	ldr	r0, [r4, #4]
 800ab6a:	a90a      	add	r1, sp, #40	@ 0x28
 800ab6c:	f009 ffc6 	bl	8014afc <rclc_action_find_goal_handle_by_uuid>
 800ab70:	4607      	mov	r7, r0
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f000 80bb 	beq.w	800acee <_rclc_take_new_data+0x2ba>
 800ab78:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	f009 ff47 	bl	8014a10 <rcl_action_transition_goal_state>
 800ab82:	2803      	cmp	r0, #3
 800ab84:	4684      	mov	ip, r0
 800ab86:	f040 80a7 	bne.w	800acd8 <_rclc_take_new_data+0x2a4>
 800ab8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab8c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ab90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab92:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab96:	e884 0003 	stmia.w	r4, {r0, r1}
 800ab9a:	f887 c008 	strb.w	ip, [r7, #8]
 800ab9e:	e76b      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800aba0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aba2:	3010      	adds	r0, #16
 800aba4:	f009 fc08 	bl	80143b8 <rcl_action_take_feedback>
 800aba8:	4605      	mov	r5, r0
 800abaa:	2800      	cmp	r0, #0
 800abac:	d1a5      	bne.n	800aafa <_rclc_take_new_data+0xc6>
 800abae:	6860      	ldr	r0, [r4, #4]
 800abb0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800abb2:	f009 ffa3 	bl	8014afc <rclc_action_find_goal_handle_by_uuid>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2800      	cmp	r0, #0
 800abba:	f000 80a3 	beq.w	800ad04 <_rclc_take_new_data+0x2d0>
 800abbe:	2201      	movs	r2, #1
 800abc0:	6860      	ldr	r0, [r4, #4]
 800abc2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800abc6:	e7a6      	b.n	800ab16 <_rclc_take_new_data+0xe2>
 800abc8:	f009 ff72 	bl	8014ab0 <rclc_action_take_goal_handle>
 800abcc:	4606      	mov	r6, r0
 800abce:	6860      	ldr	r0, [r4, #4]
 800abd0:	2e00      	cmp	r6, #0
 800abd2:	f43f af47 	beq.w	800aa64 <_rclc_take_new_data+0x30>
 800abd6:	6070      	str	r0, [r6, #4]
 800abd8:	69f2      	ldr	r2, [r6, #28]
 800abda:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800abde:	3010      	adds	r0, #16
 800abe0:	f009 fd26 	bl	8014630 <rcl_action_take_goal_request>
 800abe4:	4605      	mov	r5, r0
 800abe6:	2800      	cmp	r0, #0
 800abe8:	f040 808e 	bne.w	800ad08 <_rclc_take_new_data+0x2d4>
 800abec:	69f7      	ldr	r7, [r6, #28]
 800abee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800abf0:	7235      	strb	r5, [r6, #8]
 800abf2:	f8c6 0009 	str.w	r0, [r6, #9]
 800abf6:	f8c6 100d 	str.w	r1, [r6, #13]
 800abfa:	6860      	ldr	r0, [r4, #4]
 800abfc:	f8c6 2011 	str.w	r2, [r6, #17]
 800ac00:	f8c6 3015 	str.w	r3, [r6, #21]
 800ac04:	e72e      	b.n	800aa64 <_rclc_take_new_data+0x30>
 800ac06:	aa04      	add	r2, sp, #16
 800ac08:	a90a      	add	r1, sp, #40	@ 0x28
 800ac0a:	3010      	adds	r0, #16
 800ac0c:	f009 fadc 	bl	80141c8 <rcl_action_take_goal_response>
 800ac10:	4605      	mov	r5, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f47f af71 	bne.w	800aafa <_rclc_take_new_data+0xc6>
 800ac18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac1c:	6860      	ldr	r0, [r4, #4]
 800ac1e:	f009 ff9d 	bl	8014b5c <rclc_action_find_handle_by_goal_request_sequence_number>
 800ac22:	b130      	cbz	r0, 800ac32 <_rclc_take_new_data+0x1fe>
 800ac24:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ac28:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f880 2020 	strb.w	r2, [r0, #32]
 800ac32:	6860      	ldr	r0, [r4, #4]
 800ac34:	e769      	b.n	800ab0a <_rclc_take_new_data+0xd6>
 800ac36:	aa04      	add	r2, sp, #16
 800ac38:	3010      	adds	r0, #16
 800ac3a:	a90a      	add	r1, sp, #40	@ 0x28
 800ac3c:	f009 fd70 	bl	8014720 <rcl_action_take_result_request>
 800ac40:	4605      	mov	r5, r0
 800ac42:	2800      	cmp	r0, #0
 800ac44:	f47f af59 	bne.w	800aafa <_rclc_take_new_data+0xc6>
 800ac48:	6860      	ldr	r0, [r4, #4]
 800ac4a:	a904      	add	r1, sp, #16
 800ac4c:	f009 ff56 	bl	8014afc <rclc_action_find_goal_handle_by_uuid>
 800ac50:	4607      	mov	r7, r0
 800ac52:	b160      	cbz	r0, 800ac6e <_rclc_take_new_data+0x23a>
 800ac54:	ad0a      	add	r5, sp, #40	@ 0x28
 800ac56:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ac5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ac5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac62:	f04f 0c02 	mov.w	ip, #2
 800ac66:	e886 0003 	stmia.w	r6, {r0, r1}
 800ac6a:	f887 c008 	strb.w	ip, [r7, #8]
 800ac6e:	6860      	ldr	r0, [r4, #4]
 800ac70:	2300      	movs	r3, #0
 800ac72:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ac76:	e6fa      	b.n	800aa6e <_rclc_take_new_data+0x3a>
 800ac78:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ac7c:	a90a      	add	r1, sp, #40	@ 0x28
 800ac7e:	3010      	adds	r0, #16
 800ac80:	f009 fb5a 	bl	8014338 <rcl_action_take_cancel_response>
 800ac84:	4605      	mov	r5, r0
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f47f af37 	bne.w	800aafa <_rclc_take_new_data+0xc6>
 800ac8c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac90:	6860      	ldr	r0, [r4, #4]
 800ac92:	f009 ff87 	bl	8014ba4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ac96:	4606      	mov	r6, r0
 800ac98:	6860      	ldr	r0, [r4, #4]
 800ac9a:	2e00      	cmp	r6, #0
 800ac9c:	f43f af40 	beq.w	800ab20 <_rclc_take_new_data+0xec>
 800aca0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800aca2:	2701      	movs	r7, #1
 800aca4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f43f af3a 	beq.w	800ab20 <_rclc_take_new_data+0xec>
 800acac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800acae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800acb2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800acb6:	f009 ff21 	bl	8014afc <rclc_action_find_goal_handle_by_uuid>
 800acba:	b138      	cbz	r0, 800accc <_rclc_take_new_data+0x298>
 800acbc:	6860      	ldr	r0, [r4, #4]
 800acbe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800acc0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800acc4:	3501      	adds	r5, #1
 800acc6:	42ab      	cmp	r3, r5
 800acc8:	d8f0      	bhi.n	800acac <_rclc_take_new_data+0x278>
 800acca:	e729      	b.n	800ab20 <_rclc_take_new_data+0xec>
 800accc:	6860      	ldr	r0, [r4, #4]
 800acce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800acd0:	3501      	adds	r5, #1
 800acd2:	42ab      	cmp	r3, r5
 800acd4:	d8ea      	bhi.n	800acac <_rclc_take_new_data+0x278>
 800acd6:	e723      	b.n	800ab20 <_rclc_take_new_data+0xec>
 800acd8:	ab06      	add	r3, sp, #24
 800acda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800acdc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ace0:	2103      	movs	r1, #3
 800ace2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ace6:	6860      	ldr	r0, [r4, #4]
 800ace8:	f009 ffd2 	bl	8014c90 <rclc_action_server_goal_cancel_reject>
 800acec:	e6c4      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800acee:	ab06      	add	r3, sp, #24
 800acf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800acf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800acf6:	2102      	movs	r1, #2
 800acf8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800acfc:	6860      	ldr	r0, [r4, #4]
 800acfe:	f009 ffc7 	bl	8014c90 <rclc_action_server_goal_cancel_reject>
 800ad02:	e6b9      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800ad04:	6860      	ldr	r0, [r4, #4]
 800ad06:	e706      	b.n	800ab16 <_rclc_take_new_data+0xe2>
 800ad08:	6860      	ldr	r0, [r4, #4]
 800ad0a:	4631      	mov	r1, r6
 800ad0c:	f009 fee0 	bl	8014ad0 <rclc_action_remove_used_goal_handle>
 800ad10:	f000 fe22 	bl	800b958 <rcutils_reset_error>
 800ad14:	e6b0      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800ad16:	2501      	movs	r5, #1
 800ad18:	e6ae      	b.n	800aa78 <_rclc_take_new_data+0x44>
 800ad1a:	bf00      	nop

0800ad1c <_rclc_execute.part.0>:
 800ad1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1e:	7803      	ldrb	r3, [r0, #0]
 800ad20:	b087      	sub	sp, #28
 800ad22:	4604      	mov	r4, r0
 800ad24:	2b0a      	cmp	r3, #10
 800ad26:	f200 8136 	bhi.w	800af96 <_rclc_execute.part.0+0x27a>
 800ad2a:	e8df f003 	tbb	[pc, r3]
 800ad2e:	435e      	.short	0x435e
 800ad30:	06a1664f 	.word	0x06a1664f
 800ad34:	6c1e0606 	.word	0x6c1e0606
 800ad38:	59          	.byte	0x59
 800ad39:	00          	.byte	0x00
 800ad3a:	2b06      	cmp	r3, #6
 800ad3c:	f000 8122 	beq.w	800af84 <_rclc_execute.part.0+0x268>
 800ad40:	2b07      	cmp	r3, #7
 800ad42:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad44:	f040 8118 	bne.w	800af78 <_rclc_execute.part.0+0x25c>
 800ad48:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ad4c:	6880      	ldr	r0, [r0, #8]
 800ad4e:	4798      	blx	r3
 800ad50:	f104 0110 	add.w	r1, r4, #16
 800ad54:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ad56:	6860      	ldr	r0, [r4, #4]
 800ad58:	f008 f8f4 	bl	8012f44 <rcl_send_response>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d033      	beq.n	800adc8 <_rclc_execute.part.0+0xac>
 800ad60:	9005      	str	r0, [sp, #20]
 800ad62:	f000 fdf9 	bl	800b958 <rcutils_reset_error>
 800ad66:	9805      	ldr	r0, [sp, #20]
 800ad68:	e02e      	b.n	800adc8 <_rclc_execute.part.0+0xac>
 800ad6a:	6840      	ldr	r0, [r0, #4]
 800ad6c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 8086 	beq.w	800ae82 <_rclc_execute.part.0+0x166>
 800ad76:	2600      	movs	r6, #0
 800ad78:	2701      	movs	r7, #1
 800ad7a:	e004      	b.n	800ad86 <_rclc_execute.part.0+0x6a>
 800ad7c:	f009 fe72 	bl	8014a64 <rclc_action_send_result_request>
 800ad80:	b998      	cbnz	r0, 800adaa <_rclc_execute.part.0+0x8e>
 800ad82:	722f      	strb	r7, [r5, #8]
 800ad84:	6860      	ldr	r0, [r4, #4]
 800ad86:	f009 ff1f 	bl	8014bc8 <rclc_action_find_first_handle_with_goal_response>
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d077      	beq.n	800ae80 <_rclc_execute.part.0+0x164>
 800ad90:	6863      	ldr	r3, [r4, #4]
 800ad92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ad9a:	f885 6020 	strb.w	r6, [r5, #32]
 800ad9e:	4798      	blx	r3
 800ada0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ada4:	4628      	mov	r0, r5
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e8      	bne.n	800ad7c <_rclc_execute.part.0+0x60>
 800adaa:	6860      	ldr	r0, [r4, #4]
 800adac:	4629      	mov	r1, r5
 800adae:	f009 fe8f 	bl	8014ad0 <rclc_action_remove_used_goal_handle>
 800adb2:	e7e7      	b.n	800ad84 <_rclc_execute.part.0+0x68>
 800adb4:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800adb8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800adbc:	2d00      	cmp	r5, #0
 800adbe:	f000 80c9 	beq.w	800af54 <_rclc_execute.part.0+0x238>
 800adc2:	6880      	ldr	r0, [r0, #8]
 800adc4:	4798      	blx	r3
 800adc6:	2000      	movs	r0, #0
 800adc8:	b007      	add	sp, #28
 800adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adcc:	6840      	ldr	r0, [r0, #4]
 800adce:	f008 fabb 	bl	8013348 <rcl_timer_call>
 800add2:	f240 3321 	movw	r3, #801	@ 0x321
 800add6:	4298      	cmp	r0, r3
 800add8:	d004      	beq.n	800ade4 <_rclc_execute.part.0+0xc8>
 800adda:	2800      	cmp	r0, #0
 800addc:	d0f4      	beq.n	800adc8 <_rclc_execute.part.0+0xac>
 800adde:	e7bf      	b.n	800ad60 <_rclc_execute.part.0+0x44>
 800ade0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ade2:	4798      	blx	r3
 800ade4:	2000      	movs	r0, #0
 800ade6:	b007      	add	sp, #28
 800ade8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adea:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800adee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800adf0:	b925      	cbnz	r5, 800adfc <_rclc_execute.part.0+0xe0>
 800adf2:	4628      	mov	r0, r5
 800adf4:	4798      	blx	r3
 800adf6:	4628      	mov	r0, r5
 800adf8:	e7e6      	b.n	800adc8 <_rclc_execute.part.0+0xac>
 800adfa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800adfc:	68a0      	ldr	r0, [r4, #8]
 800adfe:	4798      	blx	r3
 800ae00:	2000      	movs	r0, #0
 800ae02:	b007      	add	sp, #28
 800ae04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae06:	6840      	ldr	r0, [r0, #4]
 800ae08:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ae0c:	bb3b      	cbnz	r3, 800ae5e <_rclc_execute.part.0+0x142>
 800ae0e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d07b      	beq.n	800af0e <_rclc_execute.part.0+0x1f2>
 800ae16:	f640 0634 	movw	r6, #2100	@ 0x834
 800ae1a:	2701      	movs	r7, #1
 800ae1c:	e007      	b.n	800ae2e <_rclc_execute.part.0+0x112>
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f009 feea 	bl	8014bf8 <rclc_action_server_response_goal_request>
 800ae24:	6860      	ldr	r0, [r4, #4]
 800ae26:	4629      	mov	r1, r5
 800ae28:	f009 fe52 	bl	8014ad0 <rclc_action_remove_used_goal_handle>
 800ae2c:	6860      	ldr	r0, [r4, #4]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	f009 fe7c 	bl	8014b2c <rclc_action_find_first_handle_by_status>
 800ae34:	4605      	mov	r5, r0
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d066      	beq.n	800af08 <_rclc_execute.part.0+0x1ec>
 800ae3a:	6863      	ldr	r3, [r4, #4]
 800ae3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	4798      	blx	r3
 800ae42:	42b0      	cmp	r0, r6
 800ae44:	f04f 0100 	mov.w	r1, #0
 800ae48:	d1e9      	bne.n	800ae1e <_rclc_execute.part.0+0x102>
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f009 fed3 	bl	8014bf8 <rclc_action_server_response_goal_request>
 800ae52:	722f      	strb	r7, [r5, #8]
 800ae54:	e7ea      	b.n	800ae2c <_rclc_execute.part.0+0x110>
 800ae56:	6848      	ldr	r0, [r1, #4]
 800ae58:	f009 fe3a 	bl	8014ad0 <rclc_action_remove_used_goal_handle>
 800ae5c:	6860      	ldr	r0, [r4, #4]
 800ae5e:	f009 fe71 	bl	8014b44 <rclc_action_find_first_terminated_handle>
 800ae62:	4601      	mov	r1, r0
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d1f6      	bne.n	800ae56 <_rclc_execute.part.0+0x13a>
 800ae68:	6860      	ldr	r0, [r4, #4]
 800ae6a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ae6e:	e7ce      	b.n	800ae0e <_rclc_execute.part.0+0xf2>
 800ae70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae72:	6880      	ldr	r0, [r0, #8]
 800ae74:	f104 0110 	add.w	r1, r4, #16
 800ae78:	4798      	blx	r3
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	b007      	add	sp, #28
 800ae7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae80:	6860      	ldr	r0, [r4, #4]
 800ae82:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ae86:	b18b      	cbz	r3, 800aeac <_rclc_execute.part.0+0x190>
 800ae88:	68c5      	ldr	r5, [r0, #12]
 800ae8a:	b32d      	cbz	r5, 800aed8 <_rclc_execute.part.0+0x1bc>
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ae92:	b143      	cbz	r3, 800aea6 <_rclc_execute.part.0+0x18a>
 800ae94:	69c3      	ldr	r3, [r0, #28]
 800ae96:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ae9a:	b123      	cbz	r3, 800aea6 <_rclc_execute.part.0+0x18a>
 800ae9c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ae9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aea0:	4628      	mov	r0, r5
 800aea2:	4798      	blx	r3
 800aea4:	6860      	ldr	r0, [r4, #4]
 800aea6:	682d      	ldr	r5, [r5, #0]
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	d1f0      	bne.n	800ae8e <_rclc_execute.part.0+0x172>
 800aeac:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800aeb0:	b193      	cbz	r3, 800aed8 <_rclc_execute.part.0+0x1bc>
 800aeb2:	68c5      	ldr	r5, [r0, #12]
 800aeb4:	b185      	cbz	r5, 800aed8 <_rclc_execute.part.0+0x1bc>
 800aeb6:	2600      	movs	r6, #0
 800aeb8:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800aebc:	b14b      	cbz	r3, 800aed2 <_rclc_execute.part.0+0x1b6>
 800aebe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800aec0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800aec4:	b12b      	cbz	r3, 800aed2 <_rclc_execute.part.0+0x1b6>
 800aec6:	4628      	mov	r0, r5
 800aec8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800aecc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aece:	4798      	blx	r3
 800aed0:	6860      	ldr	r0, [r4, #4]
 800aed2:	682d      	ldr	r5, [r5, #0]
 800aed4:	2d00      	cmp	r5, #0
 800aed6:	d1ef      	bne.n	800aeb8 <_rclc_execute.part.0+0x19c>
 800aed8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d081      	beq.n	800ade4 <_rclc_execute.part.0+0xc8>
 800aee0:	2700      	movs	r7, #0
 800aee2:	e00b      	b.n	800aefc <_rclc_execute.part.0+0x1e0>
 800aee4:	6863      	ldr	r3, [r4, #4]
 800aee6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aee8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aeea:	6a1e      	ldr	r6, [r3, #32]
 800aeec:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800aef0:	47b0      	blx	r6
 800aef2:	6860      	ldr	r0, [r4, #4]
 800aef4:	4629      	mov	r1, r5
 800aef6:	f009 fdeb 	bl	8014ad0 <rclc_action_remove_used_goal_handle>
 800aefa:	6860      	ldr	r0, [r4, #4]
 800aefc:	f009 fe70 	bl	8014be0 <rclc_action_find_first_handle_with_result_response>
 800af00:	4605      	mov	r5, r0
 800af02:	2800      	cmp	r0, #0
 800af04:	d1ee      	bne.n	800aee4 <_rclc_execute.part.0+0x1c8>
 800af06:	e76d      	b.n	800ade4 <_rclc_execute.part.0+0xc8>
 800af08:	6860      	ldr	r0, [r4, #4]
 800af0a:	f880 5020 	strb.w	r5, [r0, #32]
 800af0e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800af12:	2b00      	cmp	r3, #0
 800af14:	f43f af66 	beq.w	800ade4 <_rclc_execute.part.0+0xc8>
 800af18:	68c5      	ldr	r5, [r0, #12]
 800af1a:	b1b5      	cbz	r5, 800af4a <_rclc_execute.part.0+0x22e>
 800af1c:	2602      	movs	r6, #2
 800af1e:	e001      	b.n	800af24 <_rclc_execute.part.0+0x208>
 800af20:	682d      	ldr	r5, [r5, #0]
 800af22:	b195      	cbz	r5, 800af4a <_rclc_execute.part.0+0x22e>
 800af24:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d1f9      	bne.n	800af20 <_rclc_execute.part.0+0x204>
 800af2c:	69c3      	ldr	r3, [r0, #28]
 800af2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af30:	4628      	mov	r0, r5
 800af32:	4798      	blx	r3
 800af34:	4603      	mov	r3, r0
 800af36:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800af3a:	4628      	mov	r0, r5
 800af3c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800af40:	b163      	cbz	r3, 800af5c <_rclc_execute.part.0+0x240>
 800af42:	f009 fe79 	bl	8014c38 <rclc_action_server_goal_cancel_accept>
 800af46:	6860      	ldr	r0, [r4, #4]
 800af48:	e7ea      	b.n	800af20 <_rclc_execute.part.0+0x204>
 800af4a:	2300      	movs	r3, #0
 800af4c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800af50:	4618      	mov	r0, r3
 800af52:	e739      	b.n	800adc8 <_rclc_execute.part.0+0xac>
 800af54:	4628      	mov	r0, r5
 800af56:	4798      	blx	r3
 800af58:	4628      	mov	r0, r5
 800af5a:	e735      	b.n	800adc8 <_rclc_execute.part.0+0xac>
 800af5c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800af5e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800af62:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800af66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af6a:	6860      	ldr	r0, [r4, #4]
 800af6c:	2101      	movs	r1, #1
 800af6e:	f009 fe8f 	bl	8014c90 <rclc_action_server_goal_cancel_reject>
 800af72:	722e      	strb	r6, [r5, #8]
 800af74:	6860      	ldr	r0, [r4, #4]
 800af76:	e7d3      	b.n	800af20 <_rclc_execute.part.0+0x204>
 800af78:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800af7a:	6880      	ldr	r0, [r0, #8]
 800af7c:	4798      	blx	r3
 800af7e:	f104 0110 	add.w	r1, r4, #16
 800af82:	e6e7      	b.n	800ad54 <_rclc_execute.part.0+0x38>
 800af84:	f100 0110 	add.w	r1, r0, #16
 800af88:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800af8a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800af8c:	6880      	ldr	r0, [r0, #8]
 800af8e:	9105      	str	r1, [sp, #20]
 800af90:	4798      	blx	r3
 800af92:	9905      	ldr	r1, [sp, #20]
 800af94:	e6de      	b.n	800ad54 <_rclc_execute.part.0+0x38>
 800af96:	2001      	movs	r0, #1
 800af98:	e716      	b.n	800adc8 <_rclc_execute.part.0+0xac>
 800af9a:	bf00      	nop

0800af9c <rclc_executor_trigger_any>:
 800af9c:	2800      	cmp	r0, #0
 800af9e:	d03f      	beq.n	800b020 <rclc_executor_trigger_any+0x84>
 800afa0:	2900      	cmp	r1, #0
 800afa2:	d03e      	beq.n	800b022 <rclc_executor_trigger_any+0x86>
 800afa4:	4603      	mov	r3, r0
 800afa6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800afaa:	2200      	movs	r2, #0
 800afac:	2800      	cmp	r0, #0
 800afae:	d037      	beq.n	800b020 <rclc_executor_trigger_any+0x84>
 800afb0:	b430      	push	{r4, r5}
 800afb2:	f893 c000 	ldrb.w	ip, [r3]
 800afb6:	f1bc 0f08 	cmp.w	ip, #8
 800afba:	d11e      	bne.n	800affa <rclc_executor_trigger_any+0x5e>
 800afbc:	685c      	ldr	r4, [r3, #4]
 800afbe:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800afc0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800afc4:	d105      	bne.n	800afd2 <rclc_executor_trigger_any+0x36>
 800afc6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800afca:	b910      	cbnz	r0, 800afd2 <rclc_executor_trigger_any+0x36>
 800afcc:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800afd0:	b128      	cbz	r0, 800afde <rclc_executor_trigger_any+0x42>
 800afd2:	bc30      	pop	{r4, r5}
 800afd4:	4770      	bx	lr
 800afd6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800afda:	2800      	cmp	r0, #0
 800afdc:	d1f9      	bne.n	800afd2 <rclc_executor_trigger_any+0x36>
 800afde:	3201      	adds	r2, #1
 800afe0:	4291      	cmp	r1, r2
 800afe2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800afe6:	d018      	beq.n	800b01a <rclc_executor_trigger_any+0x7e>
 800afe8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800afec:	2800      	cmp	r0, #0
 800afee:	d0f0      	beq.n	800afd2 <rclc_executor_trigger_any+0x36>
 800aff0:	f893 c000 	ldrb.w	ip, [r3]
 800aff4:	f1bc 0f08 	cmp.w	ip, #8
 800aff8:	d0e0      	beq.n	800afbc <rclc_executor_trigger_any+0x20>
 800affa:	f1bc 0f09 	cmp.w	ip, #9
 800affe:	d1ea      	bne.n	800afd6 <rclc_executor_trigger_any+0x3a>
 800b000:	685c      	ldr	r4, [r3, #4]
 800b002:	6a25      	ldr	r5, [r4, #32]
 800b004:	2d00      	cmp	r5, #0
 800b006:	d1e4      	bne.n	800afd2 <rclc_executor_trigger_any+0x36>
 800b008:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d1e0      	bne.n	800afd2 <rclc_executor_trigger_any+0x36>
 800b010:	3201      	adds	r2, #1
 800b012:	4291      	cmp	r1, r2
 800b014:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b018:	d1e6      	bne.n	800afe8 <rclc_executor_trigger_any+0x4c>
 800b01a:	2000      	movs	r0, #0
 800b01c:	bc30      	pop	{r4, r5}
 800b01e:	4770      	bx	lr
 800b020:	4770      	bx	lr
 800b022:	4608      	mov	r0, r1
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop

0800b028 <rclc_executor_get_zero_initialized_executor>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	4903      	ldr	r1, [pc, #12]	@ (800b038 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b02c:	4604      	mov	r4, r0
 800b02e:	2288      	movs	r2, #136	@ 0x88
 800b030:	f00e fd81 	bl	8019b36 <memcpy>
 800b034:	4620      	mov	r0, r4
 800b036:	bd10      	pop	{r4, pc}
 800b038:	0801b620 	.word	0x0801b620
 800b03c:	00000000 	.word	0x00000000

0800b040 <rclc_executor_init>:
 800b040:	2800      	cmp	r0, #0
 800b042:	d05f      	beq.n	800b104 <rclc_executor_init+0xc4>
 800b044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b048:	460c      	mov	r4, r1
 800b04a:	b0b0      	sub	sp, #192	@ 0xc0
 800b04c:	2900      	cmp	r1, #0
 800b04e:	d051      	beq.n	800b0f4 <rclc_executor_init+0xb4>
 800b050:	4605      	mov	r5, r0
 800b052:	4618      	mov	r0, r3
 800b054:	4616      	mov	r6, r2
 800b056:	461f      	mov	r7, r3
 800b058:	f000 fc5a 	bl	800b910 <rcutils_allocator_is_valid>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d049      	beq.n	800b0f4 <rclc_executor_init+0xb4>
 800b060:	2e00      	cmp	r6, #0
 800b062:	d047      	beq.n	800b0f4 <rclc_executor_init+0xb4>
 800b064:	492c      	ldr	r1, [pc, #176]	@ (800b118 <rclc_executor_init+0xd8>)
 800b066:	2288      	movs	r2, #136	@ 0x88
 800b068:	a80e      	add	r0, sp, #56	@ 0x38
 800b06a:	f00e fd64 	bl	8019b36 <memcpy>
 800b06e:	a90e      	add	r1, sp, #56	@ 0x38
 800b070:	2288      	movs	r2, #136	@ 0x88
 800b072:	4628      	mov	r0, r5
 800b074:	f00e fd5f 	bl	8019b36 <memcpy>
 800b078:	602c      	str	r4, [r5, #0]
 800b07a:	4668      	mov	r0, sp
 800b07c:	60ae      	str	r6, [r5, #8]
 800b07e:	466c      	mov	r4, sp
 800b080:	f008 fad4 	bl	801362c <rcl_get_zero_initialized_wait_set>
 800b084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b086:	f105 0c14 	add.w	ip, r5, #20
 800b08a:	f8d7 8000 	ldr.w	r8, [r7]
 800b08e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b09a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b09e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b110 <rclc_executor_init+0xd0>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	f8cc 3000 	str.w	r3, [ip]
 800b0a8:	6939      	ldr	r1, [r7, #16]
 800b0aa:	612f      	str	r7, [r5, #16]
 800b0ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b0b0:	01b0      	lsls	r0, r6, #6
 800b0b2:	47c0      	blx	r8
 800b0b4:	6068      	str	r0, [r5, #4]
 800b0b6:	b338      	cbz	r0, 800b108 <rclc_executor_init+0xc8>
 800b0b8:	2400      	movs	r4, #0
 800b0ba:	e000      	b.n	800b0be <rclc_executor_init+0x7e>
 800b0bc:	6868      	ldr	r0, [r5, #4]
 800b0be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	3401      	adds	r4, #1
 800b0c6:	f000 faa7 	bl	800b618 <rclc_executor_handle_init>
 800b0ca:	42a6      	cmp	r6, r4
 800b0cc:	d1f6      	bne.n	800b0bc <rclc_executor_init+0x7c>
 800b0ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b0d2:	f000 fa95 	bl	800b600 <rclc_executor_handle_counters_zero_init>
 800b0d6:	4a11      	ldr	r2, [pc, #68]	@ (800b11c <rclc_executor_init+0xdc>)
 800b0d8:	686b      	ldr	r3, [r5, #4]
 800b0da:	2000      	movs	r0, #0
 800b0dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b0e0:	b163      	cbz	r3, 800b0fc <rclc_executor_init+0xbc>
 800b0e2:	692b      	ldr	r3, [r5, #16]
 800b0e4:	b153      	cbz	r3, 800b0fc <rclc_executor_init+0xbc>
 800b0e6:	68ab      	ldr	r3, [r5, #8]
 800b0e8:	b143      	cbz	r3, 800b0fc <rclc_executor_init+0xbc>
 800b0ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b0ee:	b030      	add	sp, #192	@ 0xc0
 800b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f4:	200b      	movs	r0, #11
 800b0f6:	b030      	add	sp, #192	@ 0xc0
 800b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	b030      	add	sp, #192	@ 0xc0
 800b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b104:	200b      	movs	r0, #11
 800b106:	4770      	bx	lr
 800b108:	200a      	movs	r0, #10
 800b10a:	e7f4      	b.n	800b0f6 <rclc_executor_init+0xb6>
 800b10c:	f3af 8000 	nop.w
 800b110:	3b9aca00 	.word	0x3b9aca00
 800b114:	00000000 	.word	0x00000000
 800b118:	0801b620 	.word	0x0801b620
 800b11c:	0800af9d 	.word	0x0800af9d

0800b120 <rclc_executor_add_subscription>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b126:	b338      	cbz	r0, 800b178 <rclc_executor_add_subscription+0x58>
 800b128:	b331      	cbz	r1, 800b178 <rclc_executor_add_subscription+0x58>
 800b12a:	b32a      	cbz	r2, 800b178 <rclc_executor_add_subscription+0x58>
 800b12c:	b323      	cbz	r3, 800b178 <rclc_executor_add_subscription+0x58>
 800b12e:	4604      	mov	r4, r0
 800b130:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800b134:	42a8      	cmp	r0, r5
 800b136:	d301      	bcc.n	800b13c <rclc_executor_add_subscription+0x1c>
 800b138:	2001      	movs	r0, #1
 800b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13c:	6866      	ldr	r6, [r4, #4]
 800b13e:	0187      	lsls	r7, r0, #6
 800b140:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b144:	2500      	movs	r5, #0
 800b146:	55f5      	strb	r5, [r6, r7]
 800b148:	3001      	adds	r0, #1
 800b14a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b14e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b152:	2301      	movs	r3, #1
 800b154:	f104 0514 	add.w	r5, r4, #20
 800b158:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b15c:	f88c e001 	strb.w	lr, [ip, #1]
 800b160:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b164:	60e0      	str	r0, [r4, #12]
 800b166:	4628      	mov	r0, r5
 800b168:	f008 fa74 	bl	8013654 <rcl_wait_set_is_valid>
 800b16c:	b930      	cbnz	r0, 800b17c <rclc_executor_add_subscription+0x5c>
 800b16e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b170:	3301      	adds	r3, #1
 800b172:	2000      	movs	r0, #0
 800b174:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b178:	200b      	movs	r0, #11
 800b17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17c:	4628      	mov	r0, r5
 800b17e:	f008 fa6f 	bl	8013660 <rcl_wait_set_fini>
 800b182:	2800      	cmp	r0, #0
 800b184:	d0f3      	beq.n	800b16e <rclc_executor_add_subscription+0x4e>
 800b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b188 <rclc_executor_add_service>:
 800b188:	b370      	cbz	r0, 800b1e8 <rclc_executor_add_service+0x60>
 800b18a:	b369      	cbz	r1, 800b1e8 <rclc_executor_add_service+0x60>
 800b18c:	b362      	cbz	r2, 800b1e8 <rclc_executor_add_service+0x60>
 800b18e:	b35b      	cbz	r3, 800b1e8 <rclc_executor_add_service+0x60>
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4604      	mov	r4, r0
 800b194:	9804      	ldr	r0, [sp, #16]
 800b196:	b378      	cbz	r0, 800b1f8 <rclc_executor_add_service+0x70>
 800b198:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800b19c:	42a8      	cmp	r0, r5
 800b19e:	d301      	bcc.n	800b1a4 <rclc_executor_add_service+0x1c>
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	bd38      	pop	{r3, r4, r5, pc}
 800b1a4:	6865      	ldr	r5, [r4, #4]
 800b1a6:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800b1aa:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800b1ae:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800b1b2:	9b04      	ldr	r3, [sp, #16]
 800b1b4:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b1b8:	2305      	movs	r3, #5
 800b1ba:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b1be:	3001      	adds	r0, #1
 800b1c0:	f825 300e 	strh.w	r3, [r5, lr]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f104 0514 	add.w	r5, r4, #20
 800b1cc:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800b1d0:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800b1d4:	60e0      	str	r0, [r4, #12]
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f008 fa3c 	bl	8013654 <rcl_wait_set_is_valid>
 800b1dc:	b930      	cbnz	r0, 800b1ec <rclc_executor_add_service+0x64>
 800b1de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	6563      	str	r3, [r4, #84]	@ 0x54
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	200b      	movs	r0, #11
 800b1ea:	4770      	bx	lr
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f008 fa37 	bl	8013660 <rcl_wait_set_fini>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d0f3      	beq.n	800b1de <rclc_executor_add_service+0x56>
 800b1f6:	e7d4      	b.n	800b1a2 <rclc_executor_add_service+0x1a>
 800b1f8:	200b      	movs	r0, #11
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}

0800b1fc <rclc_executor_prepare>:
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	d044      	beq.n	800b28a <rclc_executor_prepare+0x8e>
 800b200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b202:	f100 0514 	add.w	r5, r0, #20
 800b206:	b09b      	sub	sp, #108	@ 0x6c
 800b208:	4604      	mov	r4, r0
 800b20a:	4628      	mov	r0, r5
 800b20c:	f008 fa22 	bl	8013654 <rcl_wait_set_is_valid>
 800b210:	b110      	cbz	r0, 800b218 <rclc_executor_prepare+0x1c>
 800b212:	2000      	movs	r0, #0
 800b214:	b01b      	add	sp, #108	@ 0x6c
 800b216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b218:	4628      	mov	r0, r5
 800b21a:	f008 fa21 	bl	8013660 <rcl_wait_set_fini>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d130      	bne.n	800b284 <rclc_executor_prepare+0x88>
 800b222:	a80c      	add	r0, sp, #48	@ 0x30
 800b224:	f008 fa02 	bl	801362c <rcl_get_zero_initialized_wait_set>
 800b228:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b22c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b230:	46ae      	mov	lr, r5
 800b232:	6927      	ldr	r7, [r4, #16]
 800b234:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b23c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b240:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b244:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b248:	f8dc 3000 	ldr.w	r3, [ip]
 800b24c:	f8ce 3000 	str.w	r3, [lr]
 800b250:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b252:	ae04      	add	r6, sp, #16
 800b254:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	6822      	ldr	r2, [r4, #0]
 800b25a:	6033      	str	r3, [r6, #0]
 800b25c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b25e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b260:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b264:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b268:	e9cd 2100 	strd	r2, r1, [sp]
 800b26c:	4628      	mov	r0, r5
 800b26e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b270:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b272:	f008 fcf3 	bl	8013c5c <rcl_wait_set_init>
 800b276:	2800      	cmp	r0, #0
 800b278:	d0cc      	beq.n	800b214 <rclc_executor_prepare+0x18>
 800b27a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b27c:	f000 fb6c 	bl	800b958 <rcutils_reset_error>
 800b280:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b282:	e7c7      	b.n	800b214 <rclc_executor_prepare+0x18>
 800b284:	f000 fb68 	bl	800b958 <rcutils_reset_error>
 800b288:	e7cb      	b.n	800b222 <rclc_executor_prepare+0x26>
 800b28a:	200b      	movs	r0, #11
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop

0800b290 <rclc_executor_spin_some.part.0>:
 800b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	f100 0614 	add.w	r6, r0, #20
 800b298:	b083      	sub	sp, #12
 800b29a:	4691      	mov	r9, r2
 800b29c:	4698      	mov	r8, r3
 800b29e:	4605      	mov	r5, r0
 800b2a0:	f7ff ffac 	bl	800b1fc <rclc_executor_prepare>
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f008 faa7 	bl	80137f8 <rcl_wait_set_clear>
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f040 80ed 	bne.w	800b48c <rclc_executor_spin_some.part.0+0x1fc>
 800b2b2:	68ab      	ldr	r3, [r5, #8]
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	b303      	cbz	r3, 800b2fa <rclc_executor_spin_some.part.0+0x6a>
 800b2b8:	6869      	ldr	r1, [r5, #4]
 800b2ba:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b2be:	01a2      	lsls	r2, r4, #6
 800b2c0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b2c4:	b1cb      	cbz	r3, 800b2fa <rclc_executor_spin_some.part.0+0x6a>
 800b2c6:	5c8b      	ldrb	r3, [r1, r2]
 800b2c8:	2b0a      	cmp	r3, #10
 800b2ca:	f200 80d8 	bhi.w	800b47e <rclc_executor_spin_some.part.0+0x1ee>
 800b2ce:	e8df f003 	tbb	[pc, r3]
 800b2d2:	9c9c      	.short	0x9c9c
 800b2d4:	068c8ca7 	.word	0x068c8ca7
 800b2d8:	bdc90606 	.word	0xbdc90606
 800b2dc:	b2          	.byte	0xb2
 800b2dd:	00          	.byte	0x00
 800b2de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f008 fdce 	bl	8013e88 <rcl_wait_set_add_service>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	f040 8086 	bne.w	800b3fe <rclc_executor_spin_some.part.0+0x16e>
 800b2f2:	68ab      	ldr	r3, [r5, #8]
 800b2f4:	3401      	adds	r4, #1
 800b2f6:	429c      	cmp	r4, r3
 800b2f8:	d3de      	bcc.n	800b2b8 <rclc_executor_spin_some.part.0+0x28>
 800b2fa:	4643      	mov	r3, r8
 800b2fc:	464a      	mov	r2, r9
 800b2fe:	4630      	mov	r0, r6
 800b300:	f008 fdee 	bl	8013ee0 <rcl_wait>
 800b304:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 80c7 	beq.w	800b49c <rclc_executor_spin_some.part.0+0x20c>
 800b30e:	2b01      	cmp	r3, #1
 800b310:	f040 80b5 	bne.w	800b47e <rclc_executor_spin_some.part.0+0x1ee>
 800b314:	68ab      	ldr	r3, [r5, #8]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 8159 	beq.w	800b5ce <rclc_executor_spin_some.part.0+0x33e>
 800b31c:	2400      	movs	r4, #0
 800b31e:	46a0      	mov	r8, r4
 800b320:	f240 1991 	movw	r9, #401	@ 0x191
 800b324:	e00a      	b.n	800b33c <rclc_executor_spin_some.part.0+0xac>
 800b326:	f7ff fb37 	bl	800a998 <_rclc_check_for_new_data>
 800b32a:	4604      	mov	r4, r0
 800b32c:	b110      	cbz	r0, 800b334 <rclc_executor_spin_some.part.0+0xa4>
 800b32e:	4548      	cmp	r0, r9
 800b330:	f040 80b2 	bne.w	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b334:	68ab      	ldr	r3, [r5, #8]
 800b336:	4598      	cmp	r8, r3
 800b338:	f080 8126 	bcs.w	800b588 <rclc_executor_spin_some.part.0+0x2f8>
 800b33c:	686a      	ldr	r2, [r5, #4]
 800b33e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b342:	4631      	mov	r1, r6
 800b344:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b348:	f108 0801 	add.w	r8, r8, #1
 800b34c:	f1bc 0f00 	cmp.w	ip, #0
 800b350:	d1e9      	bne.n	800b326 <rclc_executor_spin_some.part.0+0x96>
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b35a:	4798      	blx	r3
 800b35c:	2800      	cmp	r0, #0
 800b35e:	f000 809b 	beq.w	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b362:	68ab      	ldr	r3, [r5, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8097 	beq.w	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b36a:	f04f 0800 	mov.w	r8, #0
 800b36e:	f240 1991 	movw	r9, #401	@ 0x191
 800b372:	e009      	b.n	800b388 <rclc_executor_spin_some.part.0+0xf8>
 800b374:	f7ff fb5e 	bl	800aa34 <_rclc_take_new_data>
 800b378:	4604      	mov	r4, r0
 800b37a:	b110      	cbz	r0, 800b382 <rclc_executor_spin_some.part.0+0xf2>
 800b37c:	4548      	cmp	r0, r9
 800b37e:	f040 808b 	bne.w	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b382:	68ab      	ldr	r3, [r5, #8]
 800b384:	4598      	cmp	r8, r3
 800b386:	d209      	bcs.n	800b39c <rclc_executor_spin_some.part.0+0x10c>
 800b388:	6868      	ldr	r0, [r5, #4]
 800b38a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b38e:	4631      	mov	r1, r6
 800b390:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b394:	f108 0801 	add.w	r8, r8, #1
 800b398:	2a00      	cmp	r2, #0
 800b39a:	d1eb      	bne.n	800b374 <rclc_executor_spin_some.part.0+0xe4>
 800b39c:	2600      	movs	r6, #0
 800b39e:	b97b      	cbnz	r3, 800b3c0 <rclc_executor_spin_some.part.0+0x130>
 800b3a0:	e07a      	b.n	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b3a2:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b3a6:	2a08      	cmp	r2, #8
 800b3a8:	f000 80fd 	beq.w	800b5a6 <rclc_executor_spin_some.part.0+0x316>
 800b3ac:	2a09      	cmp	r2, #9
 800b3ae:	f000 80ef 	beq.w	800b590 <rclc_executor_spin_some.part.0+0x300>
 800b3b2:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b3b6:	b98a      	cbnz	r2, 800b3dc <rclc_executor_spin_some.part.0+0x14c>
 800b3b8:	3601      	adds	r6, #1
 800b3ba:	429e      	cmp	r6, r3
 800b3bc:	d262      	bcs.n	800b484 <rclc_executor_spin_some.part.0+0x1f4>
 800b3be:	2400      	movs	r4, #0
 800b3c0:	686a      	ldr	r2, [r5, #4]
 800b3c2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b3c6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b3ca:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	d062      	beq.n	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b3d2:	7841      	ldrb	r1, [r0, #1]
 800b3d4:	2900      	cmp	r1, #0
 800b3d6:	d0e4      	beq.n	800b3a2 <rclc_executor_spin_some.part.0+0x112>
 800b3d8:	2901      	cmp	r1, #1
 800b3da:	d1ed      	bne.n	800b3b8 <rclc_executor_spin_some.part.0+0x128>
 800b3dc:	f7ff fc9e 	bl	800ad1c <_rclc_execute.part.0>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f040 80b6 	bne.w	800b552 <rclc_executor_spin_some.part.0+0x2c2>
 800b3e6:	68ab      	ldr	r3, [r5, #8]
 800b3e8:	e7e6      	b.n	800b3b8 <rclc_executor_spin_some.part.0+0x128>
 800b3ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b3ee:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f008 fd1c 	bl	8013e30 <rcl_wait_set_add_client>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	f43f af7a 	beq.w	800b2f2 <rclc_executor_spin_some.part.0+0x62>
 800b3fe:	9001      	str	r0, [sp, #4]
 800b400:	f000 faaa 	bl	800b958 <rcutils_reset_error>
 800b404:	9801      	ldr	r0, [sp, #4]
 800b406:	4607      	mov	r7, r0
 800b408:	e03c      	b.n	800b484 <rclc_executor_spin_some.part.0+0x1f4>
 800b40a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b40e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b412:	4630      	mov	r0, r6
 800b414:	f008 f9c4 	bl	80137a0 <rcl_wait_set_add_subscription>
 800b418:	2800      	cmp	r0, #0
 800b41a:	f43f af6a 	beq.w	800b2f2 <rclc_executor_spin_some.part.0+0x62>
 800b41e:	e7ee      	b.n	800b3fe <rclc_executor_spin_some.part.0+0x16e>
 800b420:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b424:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b428:	4630      	mov	r0, r6
 800b42a:	f008 fcd1 	bl	8013dd0 <rcl_wait_set_add_timer>
 800b42e:	2800      	cmp	r0, #0
 800b430:	f43f af5f 	beq.w	800b2f2 <rclc_executor_spin_some.part.0+0x62>
 800b434:	e7e3      	b.n	800b3fe <rclc_executor_spin_some.part.0+0x16e>
 800b436:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b43a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b43e:	4630      	mov	r0, r6
 800b440:	f008 fc9a 	bl	8013d78 <rcl_wait_set_add_guard_condition>
 800b444:	2800      	cmp	r0, #0
 800b446:	f43f af54 	beq.w	800b2f2 <rclc_executor_spin_some.part.0+0x62>
 800b44a:	e7d8      	b.n	800b3fe <rclc_executor_spin_some.part.0+0x16e>
 800b44c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b450:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b454:	3110      	adds	r1, #16
 800b456:	4630      	mov	r0, r6
 800b458:	f009 fa1a 	bl	8014890 <rcl_action_wait_set_add_action_server>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f43f af48 	beq.w	800b2f2 <rclc_executor_spin_some.part.0+0x62>
 800b462:	e7cc      	b.n	800b3fe <rclc_executor_spin_some.part.0+0x16e>
 800b464:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b468:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b46c:	3110      	adds	r1, #16
 800b46e:	2300      	movs	r3, #0
 800b470:	4630      	mov	r0, r6
 800b472:	f008 ffe5 	bl	8014440 <rcl_action_wait_set_add_action_client>
 800b476:	2800      	cmp	r0, #0
 800b478:	f43f af3b 	beq.w	800b2f2 <rclc_executor_spin_some.part.0+0x62>
 800b47c:	e7bf      	b.n	800b3fe <rclc_executor_spin_some.part.0+0x16e>
 800b47e:	f000 fa6b 	bl	800b958 <rcutils_reset_error>
 800b482:	2701      	movs	r7, #1
 800b484:	4638      	mov	r0, r7
 800b486:	b003      	add	sp, #12
 800b488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48c:	f000 fa64 	bl	800b958 <rcutils_reset_error>
 800b490:	4638      	mov	r0, r7
 800b492:	b003      	add	sp, #12
 800b494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b498:	4627      	mov	r7, r4
 800b49a:	e7f3      	b.n	800b484 <rclc_executor_spin_some.part.0+0x1f4>
 800b49c:	68ab      	ldr	r3, [r5, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f000 8092 	beq.w	800b5c8 <rclc_executor_spin_some.part.0+0x338>
 800b4a4:	2400      	movs	r4, #0
 800b4a6:	46a0      	mov	r8, r4
 800b4a8:	f240 1991 	movw	r9, #401	@ 0x191
 800b4ac:	e008      	b.n	800b4c0 <rclc_executor_spin_some.part.0+0x230>
 800b4ae:	f7ff fa73 	bl	800a998 <_rclc_check_for_new_data>
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	b108      	cbz	r0, 800b4ba <rclc_executor_spin_some.part.0+0x22a>
 800b4b6:	4548      	cmp	r0, r9
 800b4b8:	d1ee      	bne.n	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b4ba:	68ab      	ldr	r3, [r5, #8]
 800b4bc:	4598      	cmp	r8, r3
 800b4be:	d265      	bcs.n	800b58c <rclc_executor_spin_some.part.0+0x2fc>
 800b4c0:	686a      	ldr	r2, [r5, #4]
 800b4c2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b4cc:	f108 0801 	add.w	r8, r8, #1
 800b4d0:	f1bc 0f00 	cmp.w	ip, #0
 800b4d4:	d1eb      	bne.n	800b4ae <rclc_executor_spin_some.part.0+0x21e>
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4610      	mov	r0, r2
 800b4da:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b4de:	4798      	blx	r3
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d0d9      	beq.n	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b4e4:	68ab      	ldr	r3, [r5, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0d6      	beq.n	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b4ea:	f04f 0800 	mov.w	r8, #0
 800b4ee:	f240 1991 	movw	r9, #401	@ 0x191
 800b4f2:	f240 2a59 	movw	sl, #601	@ 0x259
 800b4f6:	e00e      	b.n	800b516 <rclc_executor_spin_some.part.0+0x286>
 800b4f8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b4fc:	2b08      	cmp	r3, #8
 800b4fe:	d033      	beq.n	800b568 <rclc_executor_spin_some.part.0+0x2d8>
 800b500:	2b09      	cmp	r3, #9
 800b502:	d028      	beq.n	800b556 <rclc_executor_spin_some.part.0+0x2c6>
 800b504:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b508:	b9fb      	cbnz	r3, 800b54a <rclc_executor_spin_some.part.0+0x2ba>
 800b50a:	68ab      	ldr	r3, [r5, #8]
 800b50c:	f108 0801 	add.w	r8, r8, #1
 800b510:	4598      	cmp	r8, r3
 800b512:	d2b7      	bcs.n	800b484 <rclc_executor_spin_some.part.0+0x1f4>
 800b514:	2400      	movs	r4, #0
 800b516:	6868      	ldr	r0, [r5, #4]
 800b518:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b51c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b520:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0b7      	beq.n	800b498 <rclc_executor_spin_some.part.0+0x208>
 800b528:	4631      	mov	r1, r6
 800b52a:	f7ff fa83 	bl	800aa34 <_rclc_take_new_data>
 800b52e:	b118      	cbz	r0, 800b538 <rclc_executor_spin_some.part.0+0x2a8>
 800b530:	4548      	cmp	r0, r9
 800b532:	d001      	beq.n	800b538 <rclc_executor_spin_some.part.0+0x2a8>
 800b534:	4550      	cmp	r0, sl
 800b536:	d10c      	bne.n	800b552 <rclc_executor_spin_some.part.0+0x2c2>
 800b538:	686b      	ldr	r3, [r5, #4]
 800b53a:	eb13 000b 	adds.w	r0, r3, fp
 800b53e:	d021      	beq.n	800b584 <rclc_executor_spin_some.part.0+0x2f4>
 800b540:	7842      	ldrb	r2, [r0, #1]
 800b542:	2a00      	cmp	r2, #0
 800b544:	d0d8      	beq.n	800b4f8 <rclc_executor_spin_some.part.0+0x268>
 800b546:	2a01      	cmp	r2, #1
 800b548:	d1df      	bne.n	800b50a <rclc_executor_spin_some.part.0+0x27a>
 800b54a:	f7ff fbe7 	bl	800ad1c <_rclc_execute.part.0>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d0db      	beq.n	800b50a <rclc_executor_spin_some.part.0+0x27a>
 800b552:	4607      	mov	r7, r0
 800b554:	e796      	b.n	800b484 <rclc_executor_spin_some.part.0+0x1f4>
 800b556:	6843      	ldr	r3, [r0, #4]
 800b558:	6a1a      	ldr	r2, [r3, #32]
 800b55a:	2a00      	cmp	r2, #0
 800b55c:	d1f5      	bne.n	800b54a <rclc_executor_spin_some.part.0+0x2ba>
 800b55e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0d1      	beq.n	800b50a <rclc_executor_spin_some.part.0+0x27a>
 800b566:	e7f0      	b.n	800b54a <rclc_executor_spin_some.part.0+0x2ba>
 800b568:	6843      	ldr	r3, [r0, #4]
 800b56a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b56c:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b570:	d1eb      	bne.n	800b54a <rclc_executor_spin_some.part.0+0x2ba>
 800b572:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b576:	2a00      	cmp	r2, #0
 800b578:	d1e7      	bne.n	800b54a <rclc_executor_spin_some.part.0+0x2ba>
 800b57a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d0c3      	beq.n	800b50a <rclc_executor_spin_some.part.0+0x27a>
 800b582:	e7e2      	b.n	800b54a <rclc_executor_spin_some.part.0+0x2ba>
 800b584:	270b      	movs	r7, #11
 800b586:	e77d      	b.n	800b484 <rclc_executor_spin_some.part.0+0x1f4>
 800b588:	686a      	ldr	r2, [r5, #4]
 800b58a:	e6e2      	b.n	800b352 <rclc_executor_spin_some.part.0+0xc2>
 800b58c:	686a      	ldr	r2, [r5, #4]
 800b58e:	e7a2      	b.n	800b4d6 <rclc_executor_spin_some.part.0+0x246>
 800b590:	6842      	ldr	r2, [r0, #4]
 800b592:	6a11      	ldr	r1, [r2, #32]
 800b594:	2900      	cmp	r1, #0
 800b596:	f47f af21 	bne.w	800b3dc <rclc_executor_spin_some.part.0+0x14c>
 800b59a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b59e:	2a00      	cmp	r2, #0
 800b5a0:	f43f af0a 	beq.w	800b3b8 <rclc_executor_spin_some.part.0+0x128>
 800b5a4:	e71a      	b.n	800b3dc <rclc_executor_spin_some.part.0+0x14c>
 800b5a6:	6842      	ldr	r2, [r0, #4]
 800b5a8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b5aa:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b5ae:	f47f af15 	bne.w	800b3dc <rclc_executor_spin_some.part.0+0x14c>
 800b5b2:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b5b6:	2900      	cmp	r1, #0
 800b5b8:	f47f af10 	bne.w	800b3dc <rclc_executor_spin_some.part.0+0x14c>
 800b5bc:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	f43f aef9 	beq.w	800b3b8 <rclc_executor_spin_some.part.0+0x128>
 800b5c6:	e709      	b.n	800b3dc <rclc_executor_spin_some.part.0+0x14c>
 800b5c8:	686a      	ldr	r2, [r5, #4]
 800b5ca:	461c      	mov	r4, r3
 800b5cc:	e783      	b.n	800b4d6 <rclc_executor_spin_some.part.0+0x246>
 800b5ce:	686a      	ldr	r2, [r5, #4]
 800b5d0:	461c      	mov	r4, r3
 800b5d2:	e6be      	b.n	800b352 <rclc_executor_spin_some.part.0+0xc2>

0800b5d4 <rclc_executor_spin_some>:
 800b5d4:	b190      	cbz	r0, 800b5fc <rclc_executor_spin_some+0x28>
 800b5d6:	b570      	push	{r4, r5, r6, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	4616      	mov	r6, r2
 800b5de:	461d      	mov	r5, r3
 800b5e0:	f006 fde6 	bl	80121b0 <rcl_context_is_valid>
 800b5e4:	b130      	cbz	r0, 800b5f4 <rclc_executor_spin_some+0x20>
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5f0:	f7ff be4e 	b.w	800b290 <rclc_executor_spin_some.part.0>
 800b5f4:	f000 f9b0 	bl	800b958 <rcutils_reset_error>
 800b5f8:	2001      	movs	r0, #1
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	200b      	movs	r0, #11
 800b5fe:	4770      	bx	lr

0800b600 <rclc_executor_handle_counters_zero_init>:
 800b600:	b130      	cbz	r0, 800b610 <rclc_executor_handle_counters_zero_init+0x10>
 800b602:	b508      	push	{r3, lr}
 800b604:	2220      	movs	r2, #32
 800b606:	2100      	movs	r1, #0
 800b608:	f00e fa2d 	bl	8019a66 <memset>
 800b60c:	2000      	movs	r0, #0
 800b60e:	bd08      	pop	{r3, pc}
 800b610:	200b      	movs	r0, #11
 800b612:	4770      	bx	lr
 800b614:	0000      	movs	r0, r0
	...

0800b618 <rclc_executor_handle_init>:
 800b618:	b168      	cbz	r0, 800b636 <rclc_executor_handle_init+0x1e>
 800b61a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b640 <rclc_executor_handle_init+0x28>
 800b61e:	2300      	movs	r3, #0
 800b620:	220b      	movs	r2, #11
 800b622:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b626:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b62a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b62e:	8002      	strh	r2, [r0, #0]
 800b630:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b632:	4618      	mov	r0, r3
 800b634:	4770      	bx	lr
 800b636:	200b      	movs	r0, #11
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	f3af 8000 	nop.w
	...

0800b648 <rclc_support_init>:
 800b648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	b3b8      	cbz	r0, 800b6c0 <rclc_support_init+0x78>
 800b650:	461c      	mov	r4, r3
 800b652:	b3ab      	cbz	r3, 800b6c0 <rclc_support_init+0x78>
 800b654:	460f      	mov	r7, r1
 800b656:	4690      	mov	r8, r2
 800b658:	4606      	mov	r6, r0
 800b65a:	f006 ff13 	bl	8012484 <rcl_get_zero_initialized_init_options>
 800b65e:	f104 030c 	add.w	r3, r4, #12
 800b662:	9005      	str	r0, [sp, #20]
 800b664:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b668:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b66c:	a805      	add	r0, sp, #20
 800b66e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b672:	f006 ff09 	bl	8012488 <rcl_init_options_init>
 800b676:	4605      	mov	r5, r0
 800b678:	b9e0      	cbnz	r0, 800b6b4 <rclc_support_init+0x6c>
 800b67a:	ad02      	add	r5, sp, #8
 800b67c:	4628      	mov	r0, r5
 800b67e:	f006 fd8d 	bl	801219c <rcl_get_zero_initialized_context>
 800b682:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b686:	4633      	mov	r3, r6
 800b688:	e886 0003 	stmia.w	r6, {r0, r1}
 800b68c:	aa05      	add	r2, sp, #20
 800b68e:	4641      	mov	r1, r8
 800b690:	4638      	mov	r0, r7
 800b692:	f006 fdf3 	bl	801227c <rcl_init>
 800b696:	4605      	mov	r5, r0
 800b698:	b9b8      	cbnz	r0, 800b6ca <rclc_support_init+0x82>
 800b69a:	60b4      	str	r4, [r6, #8]
 800b69c:	4622      	mov	r2, r4
 800b69e:	f106 010c 	add.w	r1, r6, #12
 800b6a2:	2003      	movs	r0, #3
 800b6a4:	f007 fdcc 	bl	8013240 <rcl_clock_init>
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	b970      	cbnz	r0, 800b6ca <rclc_support_init+0x82>
 800b6ac:	a805      	add	r0, sp, #20
 800b6ae:	f006 ff51 	bl	8012554 <rcl_init_options_fini>
 800b6b2:	b108      	cbz	r0, 800b6b8 <rclc_support_init+0x70>
 800b6b4:	f000 f950 	bl	800b958 <rcutils_reset_error>
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	b006      	add	sp, #24
 800b6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c0:	250b      	movs	r5, #11
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	b006      	add	sp, #24
 800b6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ca:	f000 f945 	bl	800b958 <rcutils_reset_error>
 800b6ce:	a805      	add	r0, sp, #20
 800b6d0:	f006 ff40 	bl	8012554 <rcl_init_options_fini>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d0ef      	beq.n	800b6b8 <rclc_support_init+0x70>
 800b6d8:	e7ec      	b.n	800b6b4 <rclc_support_init+0x6c>
 800b6da:	bf00      	nop

0800b6dc <rclc_node_init_default>:
 800b6dc:	b3b8      	cbz	r0, 800b74e <rclc_node_init_default+0x72>
 800b6de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	b0a1      	sub	sp, #132	@ 0x84
 800b6e6:	b329      	cbz	r1, 800b734 <rclc_node_init_default+0x58>
 800b6e8:	4616      	mov	r6, r2
 800b6ea:	b31a      	cbz	r2, 800b734 <rclc_node_init_default+0x58>
 800b6ec:	461f      	mov	r7, r3
 800b6ee:	b30b      	cbz	r3, 800b734 <rclc_node_init_default+0x58>
 800b6f0:	f10d 0810 	add.w	r8, sp, #16
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	f006 ffe4 	bl	80126c4 <rcl_get_zero_initialized_node>
 800b6fc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b700:	f10d 0918 	add.w	r9, sp, #24
 800b704:	e884 0003 	stmia.w	r4, {r0, r1}
 800b708:	4648      	mov	r0, r9
 800b70a:	f007 f953 	bl	80129b4 <rcl_node_get_default_options>
 800b70e:	4640      	mov	r0, r8
 800b710:	f006 ffd8 	bl	80126c4 <rcl_get_zero_initialized_node>
 800b714:	f8cd 9000 	str.w	r9, [sp]
 800b718:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b71c:	463b      	mov	r3, r7
 800b71e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b722:	4632      	mov	r2, r6
 800b724:	4629      	mov	r1, r5
 800b726:	4620      	mov	r0, r4
 800b728:	f006 ffd6 	bl	80126d8 <rcl_node_init>
 800b72c:	b930      	cbnz	r0, 800b73c <rclc_node_init_default+0x60>
 800b72e:	b021      	add	sp, #132	@ 0x84
 800b730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b734:	200b      	movs	r0, #11
 800b736:	b021      	add	sp, #132	@ 0x84
 800b738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b73c:	9003      	str	r0, [sp, #12]
 800b73e:	f000 f90b 	bl	800b958 <rcutils_reset_error>
 800b742:	f000 f909 	bl	800b958 <rcutils_reset_error>
 800b746:	9803      	ldr	r0, [sp, #12]
 800b748:	b021      	add	sp, #132	@ 0x84
 800b74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b74e:	200b      	movs	r0, #11
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop

0800b754 <rclc_publisher_init_default>:
 800b754:	b368      	cbz	r0, 800b7b2 <rclc_publisher_init_default+0x5e>
 800b756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b75a:	460d      	mov	r5, r1
 800b75c:	b0a0      	sub	sp, #128	@ 0x80
 800b75e:	b321      	cbz	r1, 800b7aa <rclc_publisher_init_default+0x56>
 800b760:	4616      	mov	r6, r2
 800b762:	b312      	cbz	r2, 800b7aa <rclc_publisher_init_default+0x56>
 800b764:	461f      	mov	r7, r3
 800b766:	b303      	cbz	r3, 800b7aa <rclc_publisher_init_default+0x56>
 800b768:	4604      	mov	r4, r0
 800b76a:	f7ff f805 	bl	800a778 <rcl_get_zero_initialized_publisher>
 800b76e:	f10d 0810 	add.w	r8, sp, #16
 800b772:	6020      	str	r0, [r4, #0]
 800b774:	4640      	mov	r0, r8
 800b776:	f7ff f89b 	bl	800a8b0 <rcl_publisher_get_default_options>
 800b77a:	490f      	ldr	r1, [pc, #60]	@ (800b7b8 <rclc_publisher_init_default+0x64>)
 800b77c:	2250      	movs	r2, #80	@ 0x50
 800b77e:	4640      	mov	r0, r8
 800b780:	f00e f9d9 	bl	8019b36 <memcpy>
 800b784:	f8cd 8000 	str.w	r8, [sp]
 800b788:	463b      	mov	r3, r7
 800b78a:	4632      	mov	r2, r6
 800b78c:	4629      	mov	r1, r5
 800b78e:	4620      	mov	r0, r4
 800b790:	f7fe fff8 	bl	800a784 <rcl_publisher_init>
 800b794:	b910      	cbnz	r0, 800b79c <rclc_publisher_init_default+0x48>
 800b796:	b020      	add	sp, #128	@ 0x80
 800b798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b79c:	9003      	str	r0, [sp, #12]
 800b79e:	f000 f8db 	bl	800b958 <rcutils_reset_error>
 800b7a2:	9803      	ldr	r0, [sp, #12]
 800b7a4:	b020      	add	sp, #128	@ 0x80
 800b7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7aa:	200b      	movs	r0, #11
 800b7ac:	b020      	add	sp, #128	@ 0x80
 800b7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b2:	200b      	movs	r0, #11
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	0801b6a8 	.word	0x0801b6a8

0800b7bc <rclc_service_init_default>:
 800b7bc:	b368      	cbz	r0, 800b81a <rclc_service_init_default+0x5e>
 800b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c2:	460d      	mov	r5, r1
 800b7c4:	b09e      	sub	sp, #120	@ 0x78
 800b7c6:	b321      	cbz	r1, 800b812 <rclc_service_init_default+0x56>
 800b7c8:	4616      	mov	r6, r2
 800b7ca:	b312      	cbz	r2, 800b812 <rclc_service_init_default+0x56>
 800b7cc:	461f      	mov	r7, r3
 800b7ce:	b303      	cbz	r3, 800b812 <rclc_service_init_default+0x56>
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	f007 fabf 	bl	8012d54 <rcl_get_zero_initialized_service>
 800b7d6:	f10d 0810 	add.w	r8, sp, #16
 800b7da:	6020      	str	r0, [r4, #0]
 800b7dc:	4640      	mov	r0, r8
 800b7de:	f007 fb47 	bl	8012e70 <rcl_service_get_default_options>
 800b7e2:	490f      	ldr	r1, [pc, #60]	@ (800b820 <rclc_service_init_default+0x64>)
 800b7e4:	2250      	movs	r2, #80	@ 0x50
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	f00e f9a5 	bl	8019b36 <memcpy>
 800b7ec:	f8cd 8000 	str.w	r8, [sp]
 800b7f0:	463b      	mov	r3, r7
 800b7f2:	4632      	mov	r2, r6
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f007 fab2 	bl	8012d60 <rcl_service_init>
 800b7fc:	b910      	cbnz	r0, 800b804 <rclc_service_init_default+0x48>
 800b7fe:	b01e      	add	sp, #120	@ 0x78
 800b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b804:	9003      	str	r0, [sp, #12]
 800b806:	f000 f8a7 	bl	800b958 <rcutils_reset_error>
 800b80a:	9803      	ldr	r0, [sp, #12]
 800b80c:	b01e      	add	sp, #120	@ 0x78
 800b80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b812:	200b      	movs	r0, #11
 800b814:	b01e      	add	sp, #120	@ 0x78
 800b816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81a:	200b      	movs	r0, #11
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	0801b6f8 	.word	0x0801b6f8

0800b824 <rclc_subscription_init_default>:
 800b824:	b368      	cbz	r0, 800b882 <rclc_subscription_init_default+0x5e>
 800b826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82a:	460d      	mov	r5, r1
 800b82c:	b0a0      	sub	sp, #128	@ 0x80
 800b82e:	b321      	cbz	r1, 800b87a <rclc_subscription_init_default+0x56>
 800b830:	4616      	mov	r6, r2
 800b832:	b312      	cbz	r2, 800b87a <rclc_subscription_init_default+0x56>
 800b834:	461f      	mov	r7, r3
 800b836:	b303      	cbz	r3, 800b87a <rclc_subscription_init_default+0x56>
 800b838:	4604      	mov	r4, r0
 800b83a:	f007 fba5 	bl	8012f88 <rcl_get_zero_initialized_subscription>
 800b83e:	f10d 0810 	add.w	r8, sp, #16
 800b842:	6020      	str	r0, [r4, #0]
 800b844:	4640      	mov	r0, r8
 800b846:	f007 fc4d 	bl	80130e4 <rcl_subscription_get_default_options>
 800b84a:	490f      	ldr	r1, [pc, #60]	@ (800b888 <rclc_subscription_init_default+0x64>)
 800b84c:	2250      	movs	r2, #80	@ 0x50
 800b84e:	4640      	mov	r0, r8
 800b850:	f00e f971 	bl	8019b36 <memcpy>
 800b854:	f8cd 8000 	str.w	r8, [sp]
 800b858:	463b      	mov	r3, r7
 800b85a:	4632      	mov	r2, r6
 800b85c:	4629      	mov	r1, r5
 800b85e:	4620      	mov	r0, r4
 800b860:	f007 fb98 	bl	8012f94 <rcl_subscription_init>
 800b864:	b910      	cbnz	r0, 800b86c <rclc_subscription_init_default+0x48>
 800b866:	b020      	add	sp, #128	@ 0x80
 800b868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86c:	9003      	str	r0, [sp, #12]
 800b86e:	f000 f873 	bl	800b958 <rcutils_reset_error>
 800b872:	9803      	ldr	r0, [sp, #12]
 800b874:	b020      	add	sp, #128	@ 0x80
 800b876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87a:	200b      	movs	r0, #11
 800b87c:	b020      	add	sp, #128	@ 0x80
 800b87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b882:	200b      	movs	r0, #11
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	0801b748 	.word	0x0801b748

0800b88c <__default_zero_allocate>:
 800b88c:	f00d bb4e 	b.w	8018f2c <calloc>

0800b890 <__default_reallocate>:
 800b890:	f00d bd20 	b.w	80192d4 <realloc>

0800b894 <__default_deallocate>:
 800b894:	f00d bbc8 	b.w	8019028 <free>

0800b898 <__default_allocate>:
 800b898:	f00d bbbe 	b.w	8019018 <malloc>

0800b89c <rcutils_get_zero_initialized_allocator>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4c05      	ldr	r4, [pc, #20]	@ (800b8b4 <rcutils_get_zero_initialized_allocator+0x18>)
 800b8a0:	4686      	mov	lr, r0
 800b8a2:	4684      	mov	ip, r0
 800b8a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	f8cc 3000 	str.w	r3, [ip]
 800b8b0:	4670      	mov	r0, lr
 800b8b2:	bd10      	pop	{r4, pc}
 800b8b4:	0801b798 	.word	0x0801b798

0800b8b8 <rcutils_set_default_allocator>:
 800b8b8:	b1a8      	cbz	r0, 800b8e6 <rcutils_set_default_allocator+0x2e>
 800b8ba:	6802      	ldr	r2, [r0, #0]
 800b8bc:	b1a2      	cbz	r2, 800b8e8 <rcutils_set_default_allocator+0x30>
 800b8be:	6841      	ldr	r1, [r0, #4]
 800b8c0:	b1a1      	cbz	r1, 800b8ec <rcutils_set_default_allocator+0x34>
 800b8c2:	b410      	push	{r4}
 800b8c4:	68c4      	ldr	r4, [r0, #12]
 800b8c6:	b164      	cbz	r4, 800b8e2 <rcutils_set_default_allocator+0x2a>
 800b8c8:	6880      	ldr	r0, [r0, #8]
 800b8ca:	b138      	cbz	r0, 800b8dc <rcutils_set_default_allocator+0x24>
 800b8cc:	4b08      	ldr	r3, [pc, #32]	@ (800b8f0 <rcutils_set_default_allocator+0x38>)
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b8d6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b8da:	2001      	movs	r0, #1
 800b8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	e7fa      	b.n	800b8dc <rcutils_set_default_allocator+0x24>
 800b8e6:	4770      	bx	lr
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	4770      	bx	lr
 800b8ec:	4608      	mov	r0, r1
 800b8ee:	4770      	bx	lr
 800b8f0:	2000036c 	.word	0x2000036c

0800b8f4 <rcutils_get_default_allocator>:
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	4c05      	ldr	r4, [pc, #20]	@ (800b90c <rcutils_get_default_allocator+0x18>)
 800b8f8:	4686      	mov	lr, r0
 800b8fa:	4684      	mov	ip, r0
 800b8fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	f8cc 3000 	str.w	r3, [ip]
 800b908:	4670      	mov	r0, lr
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	2000036c 	.word	0x2000036c

0800b910 <rcutils_allocator_is_valid>:
 800b910:	b158      	cbz	r0, 800b92a <rcutils_allocator_is_valid+0x1a>
 800b912:	6803      	ldr	r3, [r0, #0]
 800b914:	b143      	cbz	r3, 800b928 <rcutils_allocator_is_valid+0x18>
 800b916:	6843      	ldr	r3, [r0, #4]
 800b918:	b133      	cbz	r3, 800b928 <rcutils_allocator_is_valid+0x18>
 800b91a:	68c3      	ldr	r3, [r0, #12]
 800b91c:	b123      	cbz	r3, 800b928 <rcutils_allocator_is_valid+0x18>
 800b91e:	6880      	ldr	r0, [r0, #8]
 800b920:	3800      	subs	r0, #0
 800b922:	bf18      	it	ne
 800b924:	2001      	movne	r0, #1
 800b926:	4770      	bx	lr
 800b928:	4618      	mov	r0, r3
 800b92a:	4770      	bx	lr

0800b92c <rcutils_get_error_string>:
 800b92c:	4b06      	ldr	r3, [pc, #24]	@ (800b948 <rcutils_get_error_string+0x1c>)
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	b13b      	cbz	r3, 800b942 <rcutils_get_error_string+0x16>
 800b932:	4b06      	ldr	r3, [pc, #24]	@ (800b94c <rcutils_get_error_string+0x20>)
 800b934:	781a      	ldrb	r2, [r3, #0]
 800b936:	b90a      	cbnz	r2, 800b93c <rcutils_get_error_string+0x10>
 800b938:	2201      	movs	r2, #1
 800b93a:	701a      	strb	r2, [r3, #0]
 800b93c:	4b04      	ldr	r3, [pc, #16]	@ (800b950 <rcutils_get_error_string+0x24>)
 800b93e:	7818      	ldrb	r0, [r3, #0]
 800b940:	4770      	bx	lr
 800b942:	4b04      	ldr	r3, [pc, #16]	@ (800b954 <rcutils_get_error_string+0x28>)
 800b944:	7818      	ldrb	r0, [r3, #0]
 800b946:	4770      	bx	lr
 800b948:	20010d50 	.word	0x20010d50
 800b94c:	20010d69 	.word	0x20010d69
 800b950:	20010d68 	.word	0x20010d68
 800b954:	0801b0f8 	.word	0x0801b0f8

0800b958 <rcutils_reset_error>:
 800b958:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b978 <rcutils_reset_error+0x20>
 800b95c:	4a08      	ldr	r2, [pc, #32]	@ (800b980 <rcutils_reset_error+0x28>)
 800b95e:	4809      	ldr	r0, [pc, #36]	@ (800b984 <rcutils_reset_error+0x2c>)
 800b960:	4909      	ldr	r1, [pc, #36]	@ (800b988 <rcutils_reset_error+0x30>)
 800b962:	2300      	movs	r3, #0
 800b964:	8013      	strh	r3, [r2, #0]
 800b966:	ed82 7b02 	vstr	d7, [r2, #8]
 800b96a:	4a08      	ldr	r2, [pc, #32]	@ (800b98c <rcutils_reset_error+0x34>)
 800b96c:	7003      	strb	r3, [r0, #0]
 800b96e:	700b      	strb	r3, [r1, #0]
 800b970:	7013      	strb	r3, [r2, #0]
 800b972:	4770      	bx	lr
 800b974:	f3af 8000 	nop.w
	...
 800b980:	20010d58 	.word	0x20010d58
 800b984:	20010d69 	.word	0x20010d69
 800b988:	20010d68 	.word	0x20010d68
 800b98c:	20010d50 	.word	0x20010d50

0800b990 <rcutils_system_time_now>:
 800b990:	b308      	cbz	r0, 800b9d6 <rcutils_system_time_now+0x46>
 800b992:	b570      	push	{r4, r5, r6, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	4604      	mov	r4, r0
 800b998:	4669      	mov	r1, sp
 800b99a:	2001      	movs	r0, #1
 800b99c:	f7f6 fc38 	bl	8002210 <clock_gettime>
 800b9a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b9a4:	2d00      	cmp	r5, #0
 800b9a6:	db13      	blt.n	800b9d0 <rcutils_system_time_now+0x40>
 800b9a8:	9902      	ldr	r1, [sp, #8]
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	db0d      	blt.n	800b9ca <rcutils_system_time_now+0x3a>
 800b9ae:	4e0b      	ldr	r6, [pc, #44]	@ (800b9dc <rcutils_system_time_now+0x4c>)
 800b9b0:	fba3 3206 	umull	r3, r2, r3, r6
 800b9b4:	185b      	adds	r3, r3, r1
 800b9b6:	fb06 2205 	mla	r2, r6, r5, r2
 800b9ba:	f04f 0000 	mov.w	r0, #0
 800b9be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b9c2:	e9c4 3200 	strd	r3, r2, [r4]
 800b9c6:	b004      	add	sp, #16
 800b9c8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ca:	ea53 0205 	orrs.w	r2, r3, r5
 800b9ce:	d1ee      	bne.n	800b9ae <rcutils_system_time_now+0x1e>
 800b9d0:	2002      	movs	r0, #2
 800b9d2:	b004      	add	sp, #16
 800b9d4:	bd70      	pop	{r4, r5, r6, pc}
 800b9d6:	200b      	movs	r0, #11
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	3b9aca00 	.word	0x3b9aca00

0800b9e0 <rcutils_steady_time_now>:
 800b9e0:	b308      	cbz	r0, 800ba26 <rcutils_steady_time_now+0x46>
 800b9e2:	b570      	push	{r4, r5, r6, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4669      	mov	r1, sp
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	f7f6 fc10 	bl	8002210 <clock_gettime>
 800b9f0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b9f4:	2d00      	cmp	r5, #0
 800b9f6:	db13      	blt.n	800ba20 <rcutils_steady_time_now+0x40>
 800b9f8:	9902      	ldr	r1, [sp, #8]
 800b9fa:	2900      	cmp	r1, #0
 800b9fc:	db0d      	blt.n	800ba1a <rcutils_steady_time_now+0x3a>
 800b9fe:	4e0b      	ldr	r6, [pc, #44]	@ (800ba2c <rcutils_steady_time_now+0x4c>)
 800ba00:	fba3 3206 	umull	r3, r2, r3, r6
 800ba04:	185b      	adds	r3, r3, r1
 800ba06:	fb06 2205 	mla	r2, r6, r5, r2
 800ba0a:	f04f 0000 	mov.w	r0, #0
 800ba0e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ba12:	e9c4 3200 	strd	r3, r2, [r4]
 800ba16:	b004      	add	sp, #16
 800ba18:	bd70      	pop	{r4, r5, r6, pc}
 800ba1a:	ea53 0205 	orrs.w	r2, r3, r5
 800ba1e:	d1ee      	bne.n	800b9fe <rcutils_steady_time_now+0x1e>
 800ba20:	2002      	movs	r0, #2
 800ba22:	b004      	add	sp, #16
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
 800ba26:	200b      	movs	r0, #11
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	3b9aca00 	.word	0x3b9aca00

0800ba30 <rmw_get_default_publisher_options>:
 800ba30:	2200      	movs	r2, #0
 800ba32:	6002      	str	r2, [r0, #0]
 800ba34:	7102      	strb	r2, [r0, #4]
 800ba36:	4770      	bx	lr

0800ba38 <rmw_uros_set_custom_transport>:
 800ba38:	b470      	push	{r4, r5, r6}
 800ba3a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ba3e:	b162      	cbz	r2, 800ba5a <rmw_uros_set_custom_transport+0x22>
 800ba40:	b15b      	cbz	r3, 800ba5a <rmw_uros_set_custom_transport+0x22>
 800ba42:	b155      	cbz	r5, 800ba5a <rmw_uros_set_custom_transport+0x22>
 800ba44:	b14e      	cbz	r6, 800ba5a <rmw_uros_set_custom_transport+0x22>
 800ba46:	4c06      	ldr	r4, [pc, #24]	@ (800ba60 <rmw_uros_set_custom_transport+0x28>)
 800ba48:	7020      	strb	r0, [r4, #0]
 800ba4a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ba4e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ba52:	6166      	str	r6, [r4, #20]
 800ba54:	2000      	movs	r0, #0
 800ba56:	bc70      	pop	{r4, r5, r6}
 800ba58:	4770      	bx	lr
 800ba5a:	200b      	movs	r0, #11
 800ba5c:	bc70      	pop	{r4, r5, r6}
 800ba5e:	4770      	bx	lr
 800ba60:	20010d6c 	.word	0x20010d6c

0800ba64 <flush_session>:
 800ba64:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800ba66:	f004 bb37 	b.w	80100d8 <uxr_run_session_until_confirm_delivery>
 800ba6a:	bf00      	nop

0800ba6c <rmw_publish>:
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d053      	beq.n	800bb18 <rmw_publish+0xac>
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	460d      	mov	r5, r1
 800ba74:	b08e      	sub	sp, #56	@ 0x38
 800ba76:	2900      	cmp	r1, #0
 800ba78:	d04b      	beq.n	800bb12 <rmw_publish+0xa6>
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	6800      	ldr	r0, [r0, #0]
 800ba7e:	f000 fd87 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d045      	beq.n	800bb12 <rmw_publish+0xa6>
 800ba86:	6866      	ldr	r6, [r4, #4]
 800ba88:	2e00      	cmp	r6, #0
 800ba8a:	d042      	beq.n	800bb12 <rmw_publish+0xa6>
 800ba8c:	69b4      	ldr	r4, [r6, #24]
 800ba8e:	4628      	mov	r0, r5
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	4798      	blx	r3
 800ba94:	69f3      	ldr	r3, [r6, #28]
 800ba96:	9005      	str	r0, [sp, #20]
 800ba98:	b113      	cbz	r3, 800baa0 <rmw_publish+0x34>
 800ba9a:	a805      	add	r0, sp, #20
 800ba9c:	4798      	blx	r3
 800ba9e:	9805      	ldr	r0, [sp, #20]
 800baa0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	9000      	str	r0, [sp, #0]
 800baa8:	6972      	ldr	r2, [r6, #20]
 800baaa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800baac:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bab0:	ab06      	add	r3, sp, #24
 800bab2:	f005 f8fd 	bl	8010cb0 <uxr_prepare_output_stream>
 800bab6:	b1d8      	cbz	r0, 800baf0 <rmw_publish+0x84>
 800bab8:	68a3      	ldr	r3, [r4, #8]
 800baba:	a906      	add	r1, sp, #24
 800babc:	4628      	mov	r0, r5
 800babe:	4798      	blx	r3
 800bac0:	6a33      	ldr	r3, [r6, #32]
 800bac2:	4604      	mov	r4, r0
 800bac4:	b10b      	cbz	r3, 800baca <rmw_publish+0x5e>
 800bac6:	a806      	add	r0, sp, #24
 800bac8:	4798      	blx	r3
 800baca:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800bace:	2b01      	cmp	r3, #1
 800bad0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bad4:	d022      	beq.n	800bb1c <rmw_publish+0xb0>
 800bad6:	6918      	ldr	r0, [r3, #16]
 800bad8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800bada:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bade:	f004 fafb 	bl	80100d8 <uxr_run_session_until_confirm_delivery>
 800bae2:	4020      	ands	r0, r4
 800bae4:	b2c4      	uxtb	r4, r0
 800bae6:	f084 0001 	eor.w	r0, r4, #1
 800baea:	b2c0      	uxtb	r0, r0
 800baec:	b00e      	add	sp, #56	@ 0x38
 800baee:	bd70      	pop	{r4, r5, r6, pc}
 800baf0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800baf4:	6918      	ldr	r0, [r3, #16]
 800baf6:	9b05      	ldr	r3, [sp, #20]
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	4b0b      	ldr	r3, [pc, #44]	@ (800bb28 <rmw_publish+0xbc>)
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	9602      	str	r6, [sp, #8]
 800bb00:	6972      	ldr	r2, [r6, #20]
 800bb02:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bb04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb08:	ab06      	add	r3, sp, #24
 800bb0a:	f005 f901 	bl	8010d10 <uxr_prepare_output_stream_fragmented>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d1d2      	bne.n	800bab8 <rmw_publish+0x4c>
 800bb12:	2001      	movs	r0, #1
 800bb14:	b00e      	add	sp, #56	@ 0x38
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	2001      	movs	r0, #1
 800bb1a:	4770      	bx	lr
 800bb1c:	6918      	ldr	r0, [r3, #16]
 800bb1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb22:	f003 ff19 	bl	800f958 <uxr_flash_output_streams>
 800bb26:	e7de      	b.n	800bae6 <rmw_publish+0x7a>
 800bb28:	0800ba65 	.word	0x0800ba65

0800bb2c <rmw_create_publisher>:
 800bb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	b087      	sub	sp, #28
 800bb32:	2800      	cmp	r0, #0
 800bb34:	f000 80cc 	beq.w	800bcd0 <rmw_create_publisher+0x1a4>
 800bb38:	460e      	mov	r6, r1
 800bb3a:	2900      	cmp	r1, #0
 800bb3c:	f000 80c8 	beq.w	800bcd0 <rmw_create_publisher+0x1a4>
 800bb40:	4604      	mov	r4, r0
 800bb42:	6800      	ldr	r0, [r0, #0]
 800bb44:	4615      	mov	r5, r2
 800bb46:	4698      	mov	r8, r3
 800bb48:	f000 fd22 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f000 80bf 	beq.w	800bcd0 <rmw_create_publisher+0x1a4>
 800bb52:	2d00      	cmp	r5, #0
 800bb54:	f000 80bc 	beq.w	800bcd0 <rmw_create_publisher+0x1a4>
 800bb58:	782b      	ldrb	r3, [r5, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f000 80b8 	beq.w	800bcd0 <rmw_create_publisher+0x1a4>
 800bb60:	f1b8 0f00 	cmp.w	r8, #0
 800bb64:	f000 80b4 	beq.w	800bcd0 <rmw_create_publisher+0x1a4>
 800bb68:	485c      	ldr	r0, [pc, #368]	@ (800bcdc <rmw_create_publisher+0x1b0>)
 800bb6a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bb6e:	f009 fe0f 	bl	8015790 <get_memory>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	f000 80ac 	beq.w	800bcd0 <rmw_create_publisher+0x1a4>
 800bb78:	6884      	ldr	r4, [r0, #8]
 800bb7a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800bb7e:	f009 fe6f 	bl	8015860 <rmw_get_implementation_identifier>
 800bb82:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800bb86:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bb8a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f7f4 fb36 	bl	8000200 <strlen>
 800bb94:	3001      	adds	r0, #1
 800bb96:	283c      	cmp	r0, #60	@ 0x3c
 800bb98:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800bb9c:	f200 8091 	bhi.w	800bcc2 <rmw_create_publisher+0x196>
 800bba0:	4a4f      	ldr	r2, [pc, #316]	@ (800bce0 <rmw_create_publisher+0x1b4>)
 800bba2:	462b      	mov	r3, r5
 800bba4:	213c      	movs	r1, #60	@ 0x3c
 800bba6:	4650      	mov	r0, sl
 800bba8:	f00d fae8 	bl	801917c <sniprintf>
 800bbac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbb0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800bbb2:	4641      	mov	r1, r8
 800bbb4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800bbb8:	2250      	movs	r2, #80	@ 0x50
 800bbba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bbbe:	f00d ffba 	bl	8019b36 <memcpy>
 800bbc2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bbc6:	4947      	ldr	r1, [pc, #284]	@ (800bce4 <rmw_create_publisher+0x1b8>)
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbce:	bf0c      	ite	eq
 800bbd0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800bbd4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800bbd8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f000 fce3 	bl	800c5ac <get_message_typesupport_handle>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d06b      	beq.n	800bcc2 <rmw_create_publisher+0x196>
 800bbea:	6842      	ldr	r2, [r0, #4]
 800bbec:	61a2      	str	r2, [r4, #24]
 800bbee:	2a00      	cmp	r2, #0
 800bbf0:	d067      	beq.n	800bcc2 <rmw_create_publisher+0x196>
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	4643      	mov	r3, r8
 800bbf6:	4648      	mov	r0, r9
 800bbf8:	f00a f898 	bl	8015d2c <create_topic>
 800bbfc:	6260      	str	r0, [r4, #36]	@ 0x24
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d063      	beq.n	800bcca <rmw_create_publisher+0x19e>
 800bc02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc0a:	2103      	movs	r1, #3
 800bc0c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800bc10:	1c42      	adds	r2, r0, #1
 800bc12:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800bc16:	f003 fd4f 	bl	800f6b8 <uxr_object_id>
 800bc1a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800bc1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc22:	6120      	str	r0, [r4, #16]
 800bc24:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800bc28:	6910      	ldr	r0, [r2, #16]
 800bc2a:	2506      	movs	r5, #6
 800bc2c:	9500      	str	r5, [sp, #0]
 800bc2e:	6819      	ldr	r1, [r3, #0]
 800bc30:	6922      	ldr	r2, [r4, #16]
 800bc32:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bc36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bc3a:	f003 fbb5 	bl	800f3a8 <uxr_buffer_create_publisher_bin>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bc44:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bc48:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bc4c:	f000 fb86 	bl	800c35c <run_xrce_session>
 800bc50:	b3b8      	cbz	r0, 800bcc2 <rmw_create_publisher+0x196>
 800bc52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc5a:	2105      	movs	r1, #5
 800bc5c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800bc60:	1c42      	adds	r2, r0, #1
 800bc62:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800bc66:	f003 fd27 	bl	800f6b8 <uxr_object_id>
 800bc6a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bc6e:	6160      	str	r0, [r4, #20]
 800bc70:	691e      	ldr	r6, [r3, #16]
 800bc72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc76:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800bc7a:	f10d 0a10 	add.w	sl, sp, #16
 800bc7e:	4641      	mov	r1, r8
 800bc80:	4650      	mov	r0, sl
 800bc82:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800bc86:	f000 fb85 	bl	800c394 <convert_qos_profile>
 800bc8a:	9503      	str	r5, [sp, #12]
 800bc8c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bc90:	9001      	str	r0, [sp, #4]
 800bc92:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bc96:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800bca0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800bca4:	f8d8 1000 	ldr.w	r1, [r8]
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f003 fbdd 	bl	800f468 <uxr_buffer_create_datawriter_bin>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bcb4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bcb8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bcbc:	f000 fb4e 	bl	800c35c <run_xrce_session>
 800bcc0:	b938      	cbnz	r0, 800bcd2 <rmw_create_publisher+0x1a6>
 800bcc2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bcc4:	b108      	cbz	r0, 800bcca <rmw_create_publisher+0x19e>
 800bcc6:	f000 fa47 	bl	800c158 <rmw_uxrce_fini_topic_memory>
 800bcca:	4638      	mov	r0, r7
 800bccc:	f000 f9ec 	bl	800c0a8 <rmw_uxrce_fini_publisher_memory>
 800bcd0:	2700      	movs	r7, #0
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	b007      	add	sp, #28
 800bcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcda:	bf00      	nop
 800bcdc:	20015664 	.word	0x20015664
 800bce0:	0801b7bc 	.word	0x0801b7bc
 800bce4:	0801b044 	.word	0x0801b044

0800bce8 <rmw_publisher_get_actual_qos>:
 800bce8:	b150      	cbz	r0, 800bd00 <rmw_publisher_get_actual_qos+0x18>
 800bcea:	b508      	push	{r3, lr}
 800bcec:	460b      	mov	r3, r1
 800bcee:	b149      	cbz	r1, 800bd04 <rmw_publisher_get_actual_qos+0x1c>
 800bcf0:	6841      	ldr	r1, [r0, #4]
 800bcf2:	2250      	movs	r2, #80	@ 0x50
 800bcf4:	3128      	adds	r1, #40	@ 0x28
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f00d ff1d 	bl	8019b36 <memcpy>
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	bd08      	pop	{r3, pc}
 800bd00:	200b      	movs	r0, #11
 800bd02:	4770      	bx	lr
 800bd04:	200b      	movs	r0, #11
 800bd06:	bd08      	pop	{r3, pc}

0800bd08 <rmw_destroy_publisher>:
 800bd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0a:	b128      	cbz	r0, 800bd18 <rmw_destroy_publisher+0x10>
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	6800      	ldr	r0, [r0, #0]
 800bd10:	460d      	mov	r5, r1
 800bd12:	f000 fc3d 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 800bd16:	b910      	cbnz	r0, 800bd1e <rmw_destroy_publisher+0x16>
 800bd18:	2401      	movs	r4, #1
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd1e:	6863      	ldr	r3, [r4, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0f9      	beq.n	800bd18 <rmw_destroy_publisher+0x10>
 800bd24:	2d00      	cmp	r5, #0
 800bd26:	d0f7      	beq.n	800bd18 <rmw_destroy_publisher+0x10>
 800bd28:	6828      	ldr	r0, [r5, #0]
 800bd2a:	f000 fc31 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d0f2      	beq.n	800bd18 <rmw_destroy_publisher+0x10>
 800bd32:	686c      	ldr	r4, [r5, #4]
 800bd34:	2c00      	cmp	r4, #0
 800bd36:	d0ef      	beq.n	800bd18 <rmw_destroy_publisher+0x10>
 800bd38:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bd3a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800bd3e:	f00a f845 	bl	8015dcc <destroy_topic>
 800bd42:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bd46:	6962      	ldr	r2, [r4, #20]
 800bd48:	6918      	ldr	r0, [r3, #16]
 800bd4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bd4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bd52:	6819      	ldr	r1, [r3, #0]
 800bd54:	f003 fa74 	bl	800f240 <uxr_buffer_delete_entity>
 800bd58:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bd5c:	6922      	ldr	r2, [r4, #16]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bd64:	4604      	mov	r4, r0
 800bd66:	6809      	ldr	r1, [r1, #0]
 800bd68:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bd6c:	f003 fa68 	bl	800f240 <uxr_buffer_delete_entity>
 800bd70:	693e      	ldr	r6, [r7, #16]
 800bd72:	4622      	mov	r2, r4
 800bd74:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bd78:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f000 faec 	bl	800c35c <run_xrce_session>
 800bd84:	693e      	ldr	r6, [r7, #16]
 800bd86:	4622      	mov	r2, r4
 800bd88:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bd8c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bd90:	4604      	mov	r4, r0
 800bd92:	4630      	mov	r0, r6
 800bd94:	f000 fae2 	bl	800c35c <run_xrce_session>
 800bd98:	b12c      	cbz	r4, 800bda6 <rmw_destroy_publisher+0x9e>
 800bd9a:	b120      	cbz	r0, 800bda6 <rmw_destroy_publisher+0x9e>
 800bd9c:	2400      	movs	r4, #0
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 f982 	bl	800c0a8 <rmw_uxrce_fini_publisher_memory>
 800bda4:	e7b9      	b.n	800bd1a <rmw_destroy_publisher+0x12>
 800bda6:	2402      	movs	r4, #2
 800bda8:	e7f9      	b.n	800bd9e <rmw_destroy_publisher+0x96>
 800bdaa:	bf00      	nop

0800bdac <rmw_uxrce_init_service_memory>:
 800bdac:	b1e2      	cbz	r2, 800bde8 <rmw_uxrce_init_service_memory+0x3c>
 800bdae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb2:	7b05      	ldrb	r5, [r0, #12]
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	b9ad      	cbnz	r5, 800bde4 <rmw_uxrce_init_service_memory+0x38>
 800bdb8:	23c8      	movs	r3, #200	@ 0xc8
 800bdba:	e9c0 5500 	strd	r5, r5, [r0]
 800bdbe:	6083      	str	r3, [r0, #8]
 800bdc0:	f240 1301 	movw	r3, #257	@ 0x101
 800bdc4:	4617      	mov	r7, r2
 800bdc6:	8183      	strh	r3, [r0, #12]
 800bdc8:	460c      	mov	r4, r1
 800bdca:	46a8      	mov	r8, r5
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4630      	mov	r0, r6
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	f009 fced 	bl	80157b0 <put_memory>
 800bdd6:	42af      	cmp	r7, r5
 800bdd8:	60a4      	str	r4, [r4, #8]
 800bdda:	f884 800c 	strb.w	r8, [r4, #12]
 800bdde:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800bde2:	d1f3      	bne.n	800bdcc <rmw_uxrce_init_service_memory+0x20>
 800bde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop

0800bdec <rmw_uxrce_init_client_memory>:
 800bdec:	b1e2      	cbz	r2, 800be28 <rmw_uxrce_init_client_memory+0x3c>
 800bdee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf2:	7b05      	ldrb	r5, [r0, #12]
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	b9ad      	cbnz	r5, 800be24 <rmw_uxrce_init_client_memory+0x38>
 800bdf8:	23c8      	movs	r3, #200	@ 0xc8
 800bdfa:	e9c0 5500 	strd	r5, r5, [r0]
 800bdfe:	6083      	str	r3, [r0, #8]
 800be00:	f240 1301 	movw	r3, #257	@ 0x101
 800be04:	4617      	mov	r7, r2
 800be06:	8183      	strh	r3, [r0, #12]
 800be08:	460c      	mov	r4, r1
 800be0a:	46a8      	mov	r8, r5
 800be0c:	4621      	mov	r1, r4
 800be0e:	4630      	mov	r0, r6
 800be10:	3501      	adds	r5, #1
 800be12:	f009 fccd 	bl	80157b0 <put_memory>
 800be16:	42af      	cmp	r7, r5
 800be18:	60a4      	str	r4, [r4, #8]
 800be1a:	f884 800c 	strb.w	r8, [r4, #12]
 800be1e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800be22:	d1f3      	bne.n	800be0c <rmw_uxrce_init_client_memory+0x20>
 800be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop

0800be2c <rmw_uxrce_init_publisher_memory>:
 800be2c:	b1e2      	cbz	r2, 800be68 <rmw_uxrce_init_publisher_memory+0x3c>
 800be2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be32:	7b05      	ldrb	r5, [r0, #12]
 800be34:	4606      	mov	r6, r0
 800be36:	b9ad      	cbnz	r5, 800be64 <rmw_uxrce_init_publisher_memory+0x38>
 800be38:	23d8      	movs	r3, #216	@ 0xd8
 800be3a:	e9c0 5500 	strd	r5, r5, [r0]
 800be3e:	6083      	str	r3, [r0, #8]
 800be40:	f240 1301 	movw	r3, #257	@ 0x101
 800be44:	4617      	mov	r7, r2
 800be46:	8183      	strh	r3, [r0, #12]
 800be48:	460c      	mov	r4, r1
 800be4a:	46a8      	mov	r8, r5
 800be4c:	4621      	mov	r1, r4
 800be4e:	4630      	mov	r0, r6
 800be50:	3501      	adds	r5, #1
 800be52:	f009 fcad 	bl	80157b0 <put_memory>
 800be56:	42af      	cmp	r7, r5
 800be58:	60a4      	str	r4, [r4, #8]
 800be5a:	f884 800c 	strb.w	r8, [r4, #12]
 800be5e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800be62:	d1f3      	bne.n	800be4c <rmw_uxrce_init_publisher_memory+0x20>
 800be64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop

0800be6c <rmw_uxrce_init_subscription_memory>:
 800be6c:	b1e2      	cbz	r2, 800bea8 <rmw_uxrce_init_subscription_memory+0x3c>
 800be6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be72:	7b05      	ldrb	r5, [r0, #12]
 800be74:	4606      	mov	r6, r0
 800be76:	b9ad      	cbnz	r5, 800bea4 <rmw_uxrce_init_subscription_memory+0x38>
 800be78:	23d8      	movs	r3, #216	@ 0xd8
 800be7a:	e9c0 5500 	strd	r5, r5, [r0]
 800be7e:	6083      	str	r3, [r0, #8]
 800be80:	f240 1301 	movw	r3, #257	@ 0x101
 800be84:	4617      	mov	r7, r2
 800be86:	8183      	strh	r3, [r0, #12]
 800be88:	460c      	mov	r4, r1
 800be8a:	46a8      	mov	r8, r5
 800be8c:	4621      	mov	r1, r4
 800be8e:	4630      	mov	r0, r6
 800be90:	3501      	adds	r5, #1
 800be92:	f009 fc8d 	bl	80157b0 <put_memory>
 800be96:	42af      	cmp	r7, r5
 800be98:	60a4      	str	r4, [r4, #8]
 800be9a:	f884 800c 	strb.w	r8, [r4, #12]
 800be9e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800bea2:	d1f3      	bne.n	800be8c <rmw_uxrce_init_subscription_memory+0x20>
 800bea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop

0800beac <rmw_uxrce_init_node_memory>:
 800beac:	b1e2      	cbz	r2, 800bee8 <rmw_uxrce_init_node_memory+0x3c>
 800beae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb2:	7b05      	ldrb	r5, [r0, #12]
 800beb4:	4606      	mov	r6, r0
 800beb6:	b9ad      	cbnz	r5, 800bee4 <rmw_uxrce_init_node_memory+0x38>
 800beb8:	23a4      	movs	r3, #164	@ 0xa4
 800beba:	e9c0 5500 	strd	r5, r5, [r0]
 800bebe:	6083      	str	r3, [r0, #8]
 800bec0:	f240 1301 	movw	r3, #257	@ 0x101
 800bec4:	4617      	mov	r7, r2
 800bec6:	8183      	strh	r3, [r0, #12]
 800bec8:	460c      	mov	r4, r1
 800beca:	46a8      	mov	r8, r5
 800becc:	4621      	mov	r1, r4
 800bece:	4630      	mov	r0, r6
 800bed0:	3501      	adds	r5, #1
 800bed2:	f009 fc6d 	bl	80157b0 <put_memory>
 800bed6:	42af      	cmp	r7, r5
 800bed8:	60a4      	str	r4, [r4, #8]
 800beda:	f884 800c 	strb.w	r8, [r4, #12]
 800bede:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800bee2:	d1f3      	bne.n	800becc <rmw_uxrce_init_node_memory+0x20>
 800bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop

0800beec <rmw_uxrce_init_session_memory>:
 800beec:	b1ea      	cbz	r2, 800bf2a <rmw_uxrce_init_session_memory+0x3e>
 800beee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef2:	7b05      	ldrb	r5, [r0, #12]
 800bef4:	4606      	mov	r6, r0
 800bef6:	b9b5      	cbnz	r5, 800bf26 <rmw_uxrce_init_session_memory+0x3a>
 800bef8:	e9c0 5500 	strd	r5, r5, [r0]
 800befc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800bf00:	f240 1301 	movw	r3, #257	@ 0x101
 800bf04:	4617      	mov	r7, r2
 800bf06:	f8c0 8008 	str.w	r8, [r0, #8]
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	8183      	strh	r3, [r0, #12]
 800bf0e:	46a9      	mov	r9, r5
 800bf10:	4621      	mov	r1, r4
 800bf12:	4630      	mov	r0, r6
 800bf14:	3501      	adds	r5, #1
 800bf16:	f009 fc4b 	bl	80157b0 <put_memory>
 800bf1a:	42af      	cmp	r7, r5
 800bf1c:	60a4      	str	r4, [r4, #8]
 800bf1e:	f884 900c 	strb.w	r9, [r4, #12]
 800bf22:	4444      	add	r4, r8
 800bf24:	d1f4      	bne.n	800bf10 <rmw_uxrce_init_session_memory+0x24>
 800bf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf2a:	4770      	bx	lr

0800bf2c <rmw_uxrce_init_topic_memory>:
 800bf2c:	b1e2      	cbz	r2, 800bf68 <rmw_uxrce_init_topic_memory+0x3c>
 800bf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf32:	7b05      	ldrb	r5, [r0, #12]
 800bf34:	4606      	mov	r6, r0
 800bf36:	b9ad      	cbnz	r5, 800bf64 <rmw_uxrce_init_topic_memory+0x38>
 800bf38:	231c      	movs	r3, #28
 800bf3a:	e9c0 5500 	strd	r5, r5, [r0]
 800bf3e:	6083      	str	r3, [r0, #8]
 800bf40:	f240 1301 	movw	r3, #257	@ 0x101
 800bf44:	4617      	mov	r7, r2
 800bf46:	8183      	strh	r3, [r0, #12]
 800bf48:	460c      	mov	r4, r1
 800bf4a:	46a8      	mov	r8, r5
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	4630      	mov	r0, r6
 800bf50:	3501      	adds	r5, #1
 800bf52:	f009 fc2d 	bl	80157b0 <put_memory>
 800bf56:	42af      	cmp	r7, r5
 800bf58:	60a4      	str	r4, [r4, #8]
 800bf5a:	f884 800c 	strb.w	r8, [r4, #12]
 800bf5e:	f104 041c 	add.w	r4, r4, #28
 800bf62:	d1f3      	bne.n	800bf4c <rmw_uxrce_init_topic_memory+0x20>
 800bf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop

0800bf6c <rmw_uxrce_init_static_input_buffer_memory>:
 800bf6c:	b1ea      	cbz	r2, 800bfaa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bf6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf72:	7b05      	ldrb	r5, [r0, #12]
 800bf74:	4606      	mov	r6, r0
 800bf76:	b9b5      	cbnz	r5, 800bfa6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800bf78:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800bf7c:	e9c0 5500 	strd	r5, r5, [r0]
 800bf80:	6083      	str	r3, [r0, #8]
 800bf82:	f240 1301 	movw	r3, #257	@ 0x101
 800bf86:	4617      	mov	r7, r2
 800bf88:	8183      	strh	r3, [r0, #12]
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	46a8      	mov	r8, r5
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4630      	mov	r0, r6
 800bf92:	3501      	adds	r5, #1
 800bf94:	f009 fc0c 	bl	80157b0 <put_memory>
 800bf98:	42af      	cmp	r7, r5
 800bf9a:	60a4      	str	r4, [r4, #8]
 800bf9c:	f884 800c 	strb.w	r8, [r4, #12]
 800bfa0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800bfa4:	d1f3      	bne.n	800bf8e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800bfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfaa:	4770      	bx	lr

0800bfac <rmw_uxrce_init_init_options_impl_memory>:
 800bfac:	b1e2      	cbz	r2, 800bfe8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	7b05      	ldrb	r5, [r0, #12]
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	b9ad      	cbnz	r5, 800bfe4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bfb8:	232c      	movs	r3, #44	@ 0x2c
 800bfba:	e9c0 5500 	strd	r5, r5, [r0]
 800bfbe:	6083      	str	r3, [r0, #8]
 800bfc0:	f240 1301 	movw	r3, #257	@ 0x101
 800bfc4:	4617      	mov	r7, r2
 800bfc6:	8183      	strh	r3, [r0, #12]
 800bfc8:	460c      	mov	r4, r1
 800bfca:	46a8      	mov	r8, r5
 800bfcc:	4621      	mov	r1, r4
 800bfce:	4630      	mov	r0, r6
 800bfd0:	3501      	adds	r5, #1
 800bfd2:	f009 fbed 	bl	80157b0 <put_memory>
 800bfd6:	42af      	cmp	r7, r5
 800bfd8:	60a4      	str	r4, [r4, #8]
 800bfda:	f884 800c 	strb.w	r8, [r4, #12]
 800bfde:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800bfe2:	d1f3      	bne.n	800bfcc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800bfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop

0800bfec <rmw_uxrce_init_wait_set_memory>:
 800bfec:	b1e2      	cbz	r2, 800c028 <rmw_uxrce_init_wait_set_memory+0x3c>
 800bfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff2:	7b05      	ldrb	r5, [r0, #12]
 800bff4:	4606      	mov	r6, r0
 800bff6:	b9ad      	cbnz	r5, 800c024 <rmw_uxrce_init_wait_set_memory+0x38>
 800bff8:	231c      	movs	r3, #28
 800bffa:	e9c0 5500 	strd	r5, r5, [r0]
 800bffe:	6083      	str	r3, [r0, #8]
 800c000:	f240 1301 	movw	r3, #257	@ 0x101
 800c004:	4617      	mov	r7, r2
 800c006:	8183      	strh	r3, [r0, #12]
 800c008:	460c      	mov	r4, r1
 800c00a:	46a8      	mov	r8, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	4630      	mov	r0, r6
 800c010:	3501      	adds	r5, #1
 800c012:	f009 fbcd 	bl	80157b0 <put_memory>
 800c016:	42af      	cmp	r7, r5
 800c018:	60a4      	str	r4, [r4, #8]
 800c01a:	f884 800c 	strb.w	r8, [r4, #12]
 800c01e:	f104 041c 	add.w	r4, r4, #28
 800c022:	d1f3      	bne.n	800c00c <rmw_uxrce_init_wait_set_memory+0x20>
 800c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop

0800c02c <rmw_uxrce_init_guard_condition_memory>:
 800c02c:	b1e2      	cbz	r2, 800c068 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c032:	7b05      	ldrb	r5, [r0, #12]
 800c034:	4606      	mov	r6, r0
 800c036:	b9ad      	cbnz	r5, 800c064 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c038:	2320      	movs	r3, #32
 800c03a:	e9c0 5500 	strd	r5, r5, [r0]
 800c03e:	6083      	str	r3, [r0, #8]
 800c040:	f240 1301 	movw	r3, #257	@ 0x101
 800c044:	4617      	mov	r7, r2
 800c046:	8183      	strh	r3, [r0, #12]
 800c048:	460c      	mov	r4, r1
 800c04a:	46a8      	mov	r8, r5
 800c04c:	4621      	mov	r1, r4
 800c04e:	4630      	mov	r0, r6
 800c050:	3501      	adds	r5, #1
 800c052:	f009 fbad 	bl	80157b0 <put_memory>
 800c056:	42af      	cmp	r7, r5
 800c058:	60a4      	str	r4, [r4, #8]
 800c05a:	f884 800c 	strb.w	r8, [r4, #12]
 800c05e:	f104 0420 	add.w	r4, r4, #32
 800c062:	d1f3      	bne.n	800c04c <rmw_uxrce_init_guard_condition_memory+0x20>
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop

0800c06c <rmw_uxrce_fini_session_memory>:
 800c06c:	4601      	mov	r1, r0
 800c06e:	4801      	ldr	r0, [pc, #4]	@ (800c074 <rmw_uxrce_fini_session_memory+0x8>)
 800c070:	f009 bb9e 	b.w	80157b0 <put_memory>
 800c074:	20015684 	.word	0x20015684

0800c078 <rmw_uxrce_fini_node_memory>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4604      	mov	r4, r0
 800c07c:	6800      	ldr	r0, [r0, #0]
 800c07e:	b128      	cbz	r0, 800c08c <rmw_uxrce_fini_node_memory+0x14>
 800c080:	4b07      	ldr	r3, [pc, #28]	@ (800c0a0 <rmw_uxrce_fini_node_memory+0x28>)
 800c082:	6819      	ldr	r1, [r3, #0]
 800c084:	f7f4 f8c4 	bl	8000210 <strcmp>
 800c088:	b940      	cbnz	r0, 800c09c <rmw_uxrce_fini_node_memory+0x24>
 800c08a:	6020      	str	r0, [r4, #0]
 800c08c:	6861      	ldr	r1, [r4, #4]
 800c08e:	b129      	cbz	r1, 800c09c <rmw_uxrce_fini_node_memory+0x24>
 800c090:	2500      	movs	r5, #0
 800c092:	4804      	ldr	r0, [pc, #16]	@ (800c0a4 <rmw_uxrce_fini_node_memory+0x2c>)
 800c094:	610d      	str	r5, [r1, #16]
 800c096:	f009 fb8b 	bl	80157b0 <put_memory>
 800c09a:	6065      	str	r5, [r4, #4]
 800c09c:	bd38      	pop	{r3, r4, r5, pc}
 800c09e:	bf00      	nop
 800c0a0:	0801c434 	.word	0x0801c434
 800c0a4:	20015654 	.word	0x20015654

0800c0a8 <rmw_uxrce_fini_publisher_memory>:
 800c0a8:	b510      	push	{r4, lr}
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	6800      	ldr	r0, [r0, #0]
 800c0ae:	b128      	cbz	r0, 800c0bc <rmw_uxrce_fini_publisher_memory+0x14>
 800c0b0:	4b06      	ldr	r3, [pc, #24]	@ (800c0cc <rmw_uxrce_fini_publisher_memory+0x24>)
 800c0b2:	6819      	ldr	r1, [r3, #0]
 800c0b4:	f7f4 f8ac 	bl	8000210 <strcmp>
 800c0b8:	b938      	cbnz	r0, 800c0ca <rmw_uxrce_fini_publisher_memory+0x22>
 800c0ba:	6020      	str	r0, [r4, #0]
 800c0bc:	6861      	ldr	r1, [r4, #4]
 800c0be:	b121      	cbz	r1, 800c0ca <rmw_uxrce_fini_publisher_memory+0x22>
 800c0c0:	4803      	ldr	r0, [pc, #12]	@ (800c0d0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c0c2:	f009 fb75 	bl	80157b0 <put_memory>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	6063      	str	r3, [r4, #4]
 800c0ca:	bd10      	pop	{r4, pc}
 800c0cc:	0801c434 	.word	0x0801c434
 800c0d0:	20015664 	.word	0x20015664

0800c0d4 <rmw_uxrce_fini_subscription_memory>:
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	6800      	ldr	r0, [r0, #0]
 800c0da:	b128      	cbz	r0, 800c0e8 <rmw_uxrce_fini_subscription_memory+0x14>
 800c0dc:	4b06      	ldr	r3, [pc, #24]	@ (800c0f8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c0de:	6819      	ldr	r1, [r3, #0]
 800c0e0:	f7f4 f896 	bl	8000210 <strcmp>
 800c0e4:	b938      	cbnz	r0, 800c0f6 <rmw_uxrce_fini_subscription_memory+0x22>
 800c0e6:	6020      	str	r0, [r4, #0]
 800c0e8:	6861      	ldr	r1, [r4, #4]
 800c0ea:	b121      	cbz	r1, 800c0f6 <rmw_uxrce_fini_subscription_memory+0x22>
 800c0ec:	4803      	ldr	r0, [pc, #12]	@ (800c0fc <rmw_uxrce_fini_subscription_memory+0x28>)
 800c0ee:	f009 fb5f 	bl	80157b0 <put_memory>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	6063      	str	r3, [r4, #4]
 800c0f6:	bd10      	pop	{r4, pc}
 800c0f8:	0801c434 	.word	0x0801c434
 800c0fc:	200156a4 	.word	0x200156a4

0800c100 <rmw_uxrce_fini_service_memory>:
 800c100:	b510      	push	{r4, lr}
 800c102:	4604      	mov	r4, r0
 800c104:	6800      	ldr	r0, [r0, #0]
 800c106:	b128      	cbz	r0, 800c114 <rmw_uxrce_fini_service_memory+0x14>
 800c108:	4b06      	ldr	r3, [pc, #24]	@ (800c124 <rmw_uxrce_fini_service_memory+0x24>)
 800c10a:	6819      	ldr	r1, [r3, #0]
 800c10c:	f7f4 f880 	bl	8000210 <strcmp>
 800c110:	b938      	cbnz	r0, 800c122 <rmw_uxrce_fini_service_memory+0x22>
 800c112:	6020      	str	r0, [r4, #0]
 800c114:	6861      	ldr	r1, [r4, #4]
 800c116:	b121      	cbz	r1, 800c122 <rmw_uxrce_fini_service_memory+0x22>
 800c118:	4803      	ldr	r0, [pc, #12]	@ (800c128 <rmw_uxrce_fini_service_memory+0x28>)
 800c11a:	f009 fb49 	bl	80157b0 <put_memory>
 800c11e:	2300      	movs	r3, #0
 800c120:	6063      	str	r3, [r4, #4]
 800c122:	bd10      	pop	{r4, pc}
 800c124:	0801c434 	.word	0x0801c434
 800c128:	20015674 	.word	0x20015674

0800c12c <rmw_uxrce_fini_client_memory>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	4604      	mov	r4, r0
 800c130:	6800      	ldr	r0, [r0, #0]
 800c132:	b128      	cbz	r0, 800c140 <rmw_uxrce_fini_client_memory+0x14>
 800c134:	4b06      	ldr	r3, [pc, #24]	@ (800c150 <rmw_uxrce_fini_client_memory+0x24>)
 800c136:	6819      	ldr	r1, [r3, #0]
 800c138:	f7f4 f86a 	bl	8000210 <strcmp>
 800c13c:	b938      	cbnz	r0, 800c14e <rmw_uxrce_fini_client_memory+0x22>
 800c13e:	6020      	str	r0, [r4, #0]
 800c140:	6861      	ldr	r1, [r4, #4]
 800c142:	b121      	cbz	r1, 800c14e <rmw_uxrce_fini_client_memory+0x22>
 800c144:	4803      	ldr	r0, [pc, #12]	@ (800c154 <rmw_uxrce_fini_client_memory+0x28>)
 800c146:	f009 fb33 	bl	80157b0 <put_memory>
 800c14a:	2300      	movs	r3, #0
 800c14c:	6063      	str	r3, [r4, #4]
 800c14e:	bd10      	pop	{r4, pc}
 800c150:	0801c434 	.word	0x0801c434
 800c154:	20010d88 	.word	0x20010d88

0800c158 <rmw_uxrce_fini_topic_memory>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	4604      	mov	r4, r0
 800c15c:	4621      	mov	r1, r4
 800c15e:	4803      	ldr	r0, [pc, #12]	@ (800c16c <rmw_uxrce_fini_topic_memory+0x14>)
 800c160:	f009 fb26 	bl	80157b0 <put_memory>
 800c164:	2300      	movs	r3, #0
 800c166:	61a3      	str	r3, [r4, #24]
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	bf00      	nop
 800c16c:	200156b4 	.word	0x200156b4

0800c170 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c170:	b082      	sub	sp, #8
 800c172:	b530      	push	{r4, r5, lr}
 800c174:	4925      	ldr	r1, [pc, #148]	@ (800c20c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c176:	680d      	ldr	r5, [r1, #0]
 800c178:	ac03      	add	r4, sp, #12
 800c17a:	e884 000c 	stmia.w	r4, {r2, r3}
 800c17e:	461c      	mov	r4, r3
 800c180:	2d00      	cmp	r5, #0
 800c182:	d041      	beq.n	800c208 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c184:	462b      	mov	r3, r5
 800c186:	2100      	movs	r1, #0
 800c188:	689a      	ldr	r2, [r3, #8]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c190:	4290      	cmp	r0, r2
 800c192:	bf08      	it	eq
 800c194:	3101      	addeq	r1, #1
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1f6      	bne.n	800c188 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c19a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	d029      	beq.n	800c1f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c1a2:	d907      	bls.n	800c1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c1a4:	2b03      	cmp	r3, #3
 800c1a6:	d005      	beq.n	800c1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1ae:	4608      	mov	r0, r1
 800c1b0:	b002      	add	sp, #8
 800c1b2:	4770      	bx	lr
 800c1b4:	b314      	cbz	r4, 800c1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c1b6:	428c      	cmp	r4, r1
 800c1b8:	d820      	bhi.n	800c1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c1ba:	2d00      	cmp	r5, #0
 800c1bc:	d0f4      	beq.n	800c1a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c1be:	2100      	movs	r1, #0
 800c1c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c1c4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c1c8:	e002      	b.n	800c1d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c1ca:	686d      	ldr	r5, [r5, #4]
 800c1cc:	2d00      	cmp	r5, #0
 800c1ce:	d0ec      	beq.n	800c1aa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c1d0:	68ab      	ldr	r3, [r5, #8]
 800c1d2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c1d6:	4290      	cmp	r0, r2
 800c1d8:	d1f7      	bne.n	800c1ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c1da:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c1de:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c1e2:	4562      	cmp	r2, ip
 800c1e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c1e8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c1ec:	daed      	bge.n	800c1ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c1ee:	4694      	mov	ip, r2
 800c1f0:	461c      	mov	r4, r3
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	e7e9      	b.n	800c1ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c1f6:	b10c      	cbz	r4, 800c1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c1f8:	428c      	cmp	r4, r1
 800c1fa:	d9d5      	bls.n	800c1a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c200:	4802      	ldr	r0, [pc, #8]	@ (800c20c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c202:	b002      	add	sp, #8
 800c204:	f009 bac4 	b.w	8015790 <get_memory>
 800c208:	4629      	mov	r1, r5
 800c20a:	e7c6      	b.n	800c19a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c20c:	20015694 	.word	0x20015694

0800c210 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c210:	4b11      	ldr	r3, [pc, #68]	@ (800c258 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	b530      	push	{r4, r5, lr}
 800c216:	b1e3      	cbz	r3, 800c252 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c218:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c21c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c220:	2400      	movs	r4, #0
 800c222:	e001      	b.n	800c228 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	b193      	cbz	r3, 800c24e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c228:	689a      	ldr	r2, [r3, #8]
 800c22a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c22e:	4288      	cmp	r0, r1
 800c230:	d1f8      	bne.n	800c224 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c232:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c236:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c23a:	4571      	cmp	r1, lr
 800c23c:	eb72 050c 	sbcs.w	r5, r2, ip
 800c240:	daf0      	bge.n	800c224 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c242:	461c      	mov	r4, r3
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	468e      	mov	lr, r1
 800c248:	4694      	mov	ip, r2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1ec      	bne.n	800c228 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c24e:	4620      	mov	r0, r4
 800c250:	bd30      	pop	{r4, r5, pc}
 800c252:	461c      	mov	r4, r3
 800c254:	4620      	mov	r0, r4
 800c256:	bd30      	pop	{r4, r5, pc}
 800c258:	20015694 	.word	0x20015694
 800c25c:	00000000 	.word	0x00000000

0800c260 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	4b3c      	ldr	r3, [pc, #240]	@ (800c358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c266:	ed2d 8b06 	vpush	{d8-d10}
 800c26a:	681f      	ldr	r7, [r3, #0]
 800c26c:	b08d      	sub	sp, #52	@ 0x34
 800c26e:	f00a fcbf 	bl	8016bf0 <rmw_uros_epoch_nanos>
 800c272:	2f00      	cmp	r7, #0
 800c274:	d05d      	beq.n	800c332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c276:	46b8      	mov	r8, r7
 800c278:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c340 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c27c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c280:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c284:	2b04      	cmp	r3, #4
 800c286:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c348 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c28a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c350 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c28e:	4681      	mov	r9, r0
 800c290:	468a      	mov	sl, r1
 800c292:	ac04      	add	r4, sp, #16
 800c294:	d03f      	beq.n	800c316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c296:	2b05      	cmp	r3, #5
 800c298:	d044      	beq.n	800c324 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d03b      	beq.n	800c316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c29e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c2a2:	ed8d ab06 	vstr	d10, [sp, #24]
 800c2a6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c2aa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c2ae:	ab08      	add	r3, sp, #32
 800c2b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c2b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c2ba:	f009 f89d 	bl	80153f8 <rmw_time_equal>
 800c2be:	b118      	cbz	r0, 800c2c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c2c0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c2c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c2c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c2cc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c2d0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c2d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c2d8:	f009 f8e2 	bl	80154a0 <rmw_time_total_nsec>
 800c2dc:	1830      	adds	r0, r6, r0
 800c2de:	eb47 0101 	adc.w	r1, r7, r1
 800c2e2:	4548      	cmp	r0, r9
 800c2e4:	eb71 030a 	sbcs.w	r3, r1, sl
 800c2e8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c2ec:	db05      	blt.n	800c2fa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c2ee:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c2f2:	4591      	cmp	r9, r2
 800c2f4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c2f8:	da03      	bge.n	800c302 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c2fa:	4817      	ldr	r0, [pc, #92]	@ (800c358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	f009 fa57 	bl	80157b0 <put_memory>
 800c302:	f1bb 0f00 	cmp.w	fp, #0
 800c306:	d014      	beq.n	800c332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c308:	46d8      	mov	r8, fp
 800c30a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c30e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c312:	2b04      	cmp	r3, #4
 800c314:	d1bf      	bne.n	800c296 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c316:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c31a:	3340      	adds	r3, #64	@ 0x40
 800c31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c31e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c322:	e7c0      	b.n	800c2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c324:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c328:	3348      	adds	r3, #72	@ 0x48
 800c32a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c32c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c330:	e7b9      	b.n	800c2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c332:	b00d      	add	sp, #52	@ 0x34
 800c334:	ecbd 8b06 	vpop	{d8-d10}
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	f3af 8000 	nop.w
	...
 800c348:	00000001 	.word	0x00000001
 800c34c:	00000000 	.word	0x00000000
 800c350:	0000001e 	.word	0x0000001e
 800c354:	00000000 	.word	0x00000000
 800c358:	20015694 	.word	0x20015694

0800c35c <run_xrce_session>:
 800c35c:	b510      	push	{r4, lr}
 800c35e:	788c      	ldrb	r4, [r1, #2]
 800c360:	b086      	sub	sp, #24
 800c362:	2c01      	cmp	r4, #1
 800c364:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c368:	d00c      	beq.n	800c384 <run_xrce_session+0x28>
 800c36a:	4619      	mov	r1, r3
 800c36c:	2301      	movs	r3, #1
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	f10d 020e 	add.w	r2, sp, #14
 800c374:	f10d 0317 	add.w	r3, sp, #23
 800c378:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c37c:	f003 fed2 	bl	8010124 <uxr_run_session_until_all_status>
 800c380:	b006      	add	sp, #24
 800c382:	bd10      	pop	{r4, pc}
 800c384:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c388:	f003 fae6 	bl	800f958 <uxr_flash_output_streams>
 800c38c:	4620      	mov	r0, r4
 800c38e:	b006      	add	sp, #24
 800c390:	bd10      	pop	{r4, pc}
 800c392:	bf00      	nop

0800c394 <convert_qos_profile>:
 800c394:	7a4a      	ldrb	r2, [r1, #9]
 800c396:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c39a:	2a02      	cmp	r2, #2
 800c39c:	bf18      	it	ne
 800c39e:	2200      	movne	r2, #0
 800c3a0:	7002      	strb	r2, [r0, #0]
 800c3a2:	780a      	ldrb	r2, [r1, #0]
 800c3a4:	8889      	ldrh	r1, [r1, #4]
 800c3a6:	8081      	strh	r1, [r0, #4]
 800c3a8:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3ac:	f1a2 0202 	sub.w	r2, r2, #2
 800c3b0:	fabc fc8c 	clz	ip, ip
 800c3b4:	fab2 f282 	clz	r2, r2
 800c3b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c3bc:	0952      	lsrs	r2, r2, #5
 800c3be:	f880 c001 	strb.w	ip, [r0, #1]
 800c3c2:	7082      	strb	r2, [r0, #2]
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop

0800c3c8 <generate_service_topics>:
 800c3c8:	b570      	push	{r4, r5, r6, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	461c      	mov	r4, r3
 800c3ce:	4b12      	ldr	r3, [pc, #72]	@ (800c418 <generate_service_topics+0x50>)
 800c3d0:	9301      	str	r3, [sp, #4]
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	4b11      	ldr	r3, [pc, #68]	@ (800c41c <generate_service_topics+0x54>)
 800c3d6:	9000      	str	r0, [sp, #0]
 800c3d8:	4616      	mov	r6, r2
 800c3da:	4608      	mov	r0, r1
 800c3dc:	4a10      	ldr	r2, [pc, #64]	@ (800c420 <generate_service_topics+0x58>)
 800c3de:	4621      	mov	r1, r4
 800c3e0:	f00c fecc 	bl	801917c <sniprintf>
 800c3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c424 <generate_service_topics+0x5c>)
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	4601      	mov	r1, r0
 800c3ea:	9500      	str	r5, [sp, #0]
 800c3ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c428 <generate_service_topics+0x60>)
 800c3ee:	4a0c      	ldr	r2, [pc, #48]	@ (800c420 <generate_service_topics+0x58>)
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f00c fec1 	bl	801917c <sniprintf>
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	db01      	blt.n	800c402 <generate_service_topics+0x3a>
 800c3fe:	42ac      	cmp	r4, r5
 800c400:	dc02      	bgt.n	800c408 <generate_service_topics+0x40>
 800c402:	2000      	movs	r0, #0
 800c404:	b002      	add	sp, #8
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	2800      	cmp	r0, #0
 800c40a:	dbfa      	blt.n	800c402 <generate_service_topics+0x3a>
 800c40c:	4284      	cmp	r4, r0
 800c40e:	bfd4      	ite	le
 800c410:	2000      	movle	r0, #0
 800c412:	2001      	movgt	r0, #1
 800c414:	b002      	add	sp, #8
 800c416:	bd70      	pop	{r4, r5, r6, pc}
 800c418:	0801b7e0 	.word	0x0801b7e0
 800c41c:	0801b7dc 	.word	0x0801b7dc
 800c420:	0801b7b8 	.word	0x0801b7b8
 800c424:	0801b7d4 	.word	0x0801b7d4
 800c428:	0801b7d0 	.word	0x0801b7d0

0800c42c <generate_service_types>:
 800c42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c430:	4605      	mov	r5, r0
 800c432:	b086      	sub	sp, #24
 800c434:	6880      	ldr	r0, [r0, #8]
 800c436:	460c      	mov	r4, r1
 800c438:	4617      	mov	r7, r2
 800c43a:	461e      	mov	r6, r3
 800c43c:	4780      	blx	r0
 800c43e:	68eb      	ldr	r3, [r5, #12]
 800c440:	4680      	mov	r8, r0
 800c442:	4798      	blx	r3
 800c444:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c448:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800c44c:	2300      	movs	r3, #0
 800c44e:	7023      	strb	r3, [r4, #0]
 800c450:	6813      	ldr	r3, [r2, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d042      	beq.n	800c4dc <generate_service_types+0xb0>
 800c456:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800c4f0 <generate_service_types+0xc4>
 800c45a:	4641      	mov	r1, r8
 800c45c:	4620      	mov	r0, r4
 800c45e:	4c22      	ldr	r4, [pc, #136]	@ (800c4e8 <generate_service_types+0xbc>)
 800c460:	9405      	str	r4, [sp, #20]
 800c462:	6852      	ldr	r2, [r2, #4]
 800c464:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800c4f8 <generate_service_types+0xcc>
 800c468:	9204      	str	r2, [sp, #16]
 800c46a:	9100      	str	r1, [sp, #0]
 800c46c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800c470:	4a1e      	ldr	r2, [pc, #120]	@ (800c4ec <generate_service_types+0xc0>)
 800c472:	f8cd a004 	str.w	sl, [sp, #4]
 800c476:	4631      	mov	r1, r6
 800c478:	f00c fe80 	bl	801917c <sniprintf>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	db1f      	blt.n	800c4c0 <generate_service_types+0x94>
 800c480:	2300      	movs	r3, #0
 800c482:	703b      	strb	r3, [r7, #0]
 800c484:	f8d9 3000 	ldr.w	r3, [r9]
 800c488:	42b0      	cmp	r0, r6
 800c48a:	bfac      	ite	ge
 800c48c:	2500      	movge	r5, #0
 800c48e:	2501      	movlt	r5, #1
 800c490:	b1eb      	cbz	r3, 800c4ce <generate_service_types+0xa2>
 800c492:	4a17      	ldr	r2, [pc, #92]	@ (800c4f0 <generate_service_types+0xc4>)
 800c494:	9405      	str	r4, [sp, #20]
 800c496:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c49a:	9200      	str	r2, [sp, #0]
 800c49c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800c4a0:	e9cd a401 	strd	sl, r4, [sp, #4]
 800c4a4:	4a11      	ldr	r2, [pc, #68]	@ (800c4ec <generate_service_types+0xc0>)
 800c4a6:	4638      	mov	r0, r7
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	f00c fe67 	bl	801917c <sniprintf>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	db10      	blt.n	800c4d4 <generate_service_types+0xa8>
 800c4b2:	42b0      	cmp	r0, r6
 800c4b4:	bfb4      	ite	lt
 800c4b6:	4628      	movlt	r0, r5
 800c4b8:	2000      	movge	r0, #0
 800c4ba:	b006      	add	sp, #24
 800c4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	703b      	strb	r3, [r7, #0]
 800c4c4:	f8d9 3000 	ldr.w	r3, [r9]
 800c4c8:	2500      	movs	r5, #0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e1      	bne.n	800c492 <generate_service_types+0x66>
 800c4ce:	4b09      	ldr	r3, [pc, #36]	@ (800c4f4 <generate_service_types+0xc8>)
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	e7df      	b.n	800c494 <generate_service_types+0x68>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	b006      	add	sp, #24
 800c4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4dc:	4b05      	ldr	r3, [pc, #20]	@ (800c4f4 <generate_service_types+0xc8>)
 800c4de:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800c4f0 <generate_service_types+0xc4>
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	e7ba      	b.n	800c45c <generate_service_types+0x30>
 800c4e6:	bf00      	nop
 800c4e8:	0801b7c0 	.word	0x0801b7c0
 800c4ec:	0801b7b0 	.word	0x0801b7b0
 800c4f0:	0801b7ac 	.word	0x0801b7ac
 800c4f4:	0801c6c0 	.word	0x0801c6c0
 800c4f8:	0801b7c4 	.word	0x0801b7c4

0800c4fc <generate_type_name>:
 800c4fc:	b530      	push	{r4, r5, lr}
 800c4fe:	2300      	movs	r3, #0
 800c500:	700b      	strb	r3, [r1, #0]
 800c502:	6803      	ldr	r3, [r0, #0]
 800c504:	b087      	sub	sp, #28
 800c506:	4614      	mov	r4, r2
 800c508:	b1d3      	cbz	r3, 800c540 <generate_type_name+0x44>
 800c50a:	4a0f      	ldr	r2, [pc, #60]	@ (800c548 <generate_type_name+0x4c>)
 800c50c:	4615      	mov	r5, r2
 800c50e:	9203      	str	r2, [sp, #12]
 800c510:	9500      	str	r5, [sp, #0]
 800c512:	6842      	ldr	r2, [r0, #4]
 800c514:	480d      	ldr	r0, [pc, #52]	@ (800c54c <generate_type_name+0x50>)
 800c516:	9001      	str	r0, [sp, #4]
 800c518:	4608      	mov	r0, r1
 800c51a:	490d      	ldr	r1, [pc, #52]	@ (800c550 <generate_type_name+0x54>)
 800c51c:	9204      	str	r2, [sp, #16]
 800c51e:	9105      	str	r1, [sp, #20]
 800c520:	9102      	str	r1, [sp, #8]
 800c522:	4a0c      	ldr	r2, [pc, #48]	@ (800c554 <generate_type_name+0x58>)
 800c524:	4621      	mov	r1, r4
 800c526:	f00c fe29 	bl	801917c <sniprintf>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	db05      	blt.n	800c53a <generate_type_name+0x3e>
 800c52e:	4284      	cmp	r4, r0
 800c530:	bfd4      	ite	le
 800c532:	2000      	movle	r0, #0
 800c534:	2001      	movgt	r0, #1
 800c536:	b007      	add	sp, #28
 800c538:	bd30      	pop	{r4, r5, pc}
 800c53a:	2000      	movs	r0, #0
 800c53c:	b007      	add	sp, #28
 800c53e:	bd30      	pop	{r4, r5, pc}
 800c540:	4b05      	ldr	r3, [pc, #20]	@ (800c558 <generate_type_name+0x5c>)
 800c542:	4a01      	ldr	r2, [pc, #4]	@ (800c548 <generate_type_name+0x4c>)
 800c544:	461d      	mov	r5, r3
 800c546:	e7e2      	b.n	800c50e <generate_type_name+0x12>
 800c548:	0801b7ac 	.word	0x0801b7ac
 800c54c:	0801b7c4 	.word	0x0801b7c4
 800c550:	0801b7c0 	.word	0x0801b7c0
 800c554:	0801b7b0 	.word	0x0801b7b0
 800c558:	0801c6c0 	.word	0x0801c6c0

0800c55c <generate_topic_name>:
 800c55c:	b510      	push	{r4, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	4614      	mov	r4, r2
 800c562:	9000      	str	r0, [sp, #0]
 800c564:	4b08      	ldr	r3, [pc, #32]	@ (800c588 <generate_topic_name+0x2c>)
 800c566:	4a09      	ldr	r2, [pc, #36]	@ (800c58c <generate_topic_name+0x30>)
 800c568:	4608      	mov	r0, r1
 800c56a:	4621      	mov	r1, r4
 800c56c:	f00c fe06 	bl	801917c <sniprintf>
 800c570:	2800      	cmp	r0, #0
 800c572:	db05      	blt.n	800c580 <generate_topic_name+0x24>
 800c574:	4284      	cmp	r4, r0
 800c576:	bfd4      	ite	le
 800c578:	2000      	movle	r0, #0
 800c57a:	2001      	movgt	r0, #1
 800c57c:	b002      	add	sp, #8
 800c57e:	bd10      	pop	{r4, pc}
 800c580:	2000      	movs	r0, #0
 800c582:	b002      	add	sp, #8
 800c584:	bd10      	pop	{r4, pc}
 800c586:	bf00      	nop
 800c588:	0801b7e8 	.word	0x0801b7e8
 800c58c:	0801b7c8 	.word	0x0801b7c8

0800c590 <is_uxrce_rmw_identifier_valid>:
 800c590:	b510      	push	{r4, lr}
 800c592:	4604      	mov	r4, r0
 800c594:	b140      	cbz	r0, 800c5a8 <is_uxrce_rmw_identifier_valid+0x18>
 800c596:	f009 f963 	bl	8015860 <rmw_get_implementation_identifier>
 800c59a:	4601      	mov	r1, r0
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7f3 fe37 	bl	8000210 <strcmp>
 800c5a2:	fab0 f080 	clz	r0, r0
 800c5a6:	0940      	lsrs	r0, r0, #5
 800c5a8:	bd10      	pop	{r4, pc}
 800c5aa:	bf00      	nop

0800c5ac <get_message_typesupport_handle>:
 800c5ac:	6883      	ldr	r3, [r0, #8]
 800c5ae:	4718      	bx	r3

0800c5b0 <get_message_typesupport_handle_function>:
 800c5b0:	b510      	push	{r4, lr}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	6800      	ldr	r0, [r0, #0]
 800c5b6:	f7f3 fe2b 	bl	8000210 <strcmp>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	bf0c      	ite	eq
 800c5be:	4620      	moveq	r0, r4
 800c5c0:	2000      	movne	r0, #0
 800c5c2:	bd10      	pop	{r4, pc}

0800c5c4 <get_service_typesupport_handle>:
 800c5c4:	6883      	ldr	r3, [r0, #8]
 800c5c6:	4718      	bx	r3

0800c5c8 <get_service_typesupport_handle_function>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	6800      	ldr	r0, [r0, #0]
 800c5ce:	f7f3 fe1f 	bl	8000210 <strcmp>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	bf0c      	ite	eq
 800c5d6:	4620      	moveq	r0, r4
 800c5d8:	2000      	movne	r0, #0
 800c5da:	bd10      	pop	{r4, pc}

0800c5dc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e0:	6805      	ldr	r5, [r0, #0]
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	460e      	mov	r6, r1
 800c5e8:	f7f3 fe12 	bl	8000210 <strcmp>
 800c5ec:	b1c8      	cbz	r0, 800c622 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c5ee:	4b11      	ldr	r3, [pc, #68]	@ (800c634 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429d      	cmp	r5, r3
 800c5f4:	d112      	bne.n	800c61c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c5f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c5fa:	f8d8 4000 	ldr.w	r4, [r8]
 800c5fe:	b16c      	cbz	r4, 800c61c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c600:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c604:	2700      	movs	r7, #0
 800c606:	3d04      	subs	r5, #4
 800c608:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c60c:	4631      	mov	r1, r6
 800c60e:	f7f3 fdff 	bl	8000210 <strcmp>
 800c612:	00bb      	lsls	r3, r7, #2
 800c614:	b140      	cbz	r0, 800c628 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c616:	3701      	adds	r7, #1
 800c618:	42bc      	cmp	r4, r7
 800c61a:	d1f5      	bne.n	800c608 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c61c:	2000      	movs	r0, #0
 800c61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c622:	4620      	mov	r0, r4
 800c624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c628:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c630:	58d3      	ldr	r3, [r2, r3]
 800c632:	4718      	bx	r3
 800c634:	20000380 	.word	0x20000380

0800c638 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63c:	6805      	ldr	r5, [r0, #0]
 800c63e:	4604      	mov	r4, r0
 800c640:	4628      	mov	r0, r5
 800c642:	460e      	mov	r6, r1
 800c644:	f7f3 fde4 	bl	8000210 <strcmp>
 800c648:	b1c8      	cbz	r0, 800c67e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800c64a:	4b11      	ldr	r3, [pc, #68]	@ (800c690 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	429d      	cmp	r5, r3
 800c650:	d112      	bne.n	800c678 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c652:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c656:	f8d8 4000 	ldr.w	r4, [r8]
 800c65a:	b16c      	cbz	r4, 800c678 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c65c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c660:	2700      	movs	r7, #0
 800c662:	3d04      	subs	r5, #4
 800c664:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c668:	4631      	mov	r1, r6
 800c66a:	f7f3 fdd1 	bl	8000210 <strcmp>
 800c66e:	00bb      	lsls	r3, r7, #2
 800c670:	b140      	cbz	r0, 800c684 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800c672:	3701      	adds	r7, #1
 800c674:	42bc      	cmp	r4, r7
 800c676:	d1f5      	bne.n	800c664 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800c678:	2000      	movs	r0, #0
 800c67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c67e:	4620      	mov	r0, r4
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c684:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c68c:	58d3      	ldr	r3, [r2, r3]
 800c68e:	4718      	bx	r3
 800c690:	20000380 	.word	0x20000380

0800c694 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c694:	4b04      	ldr	r3, [pc, #16]	@ (800c6a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	b10a      	cbz	r2, 800c69e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800c69a:	4803      	ldr	r0, [pc, #12]	@ (800c6a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c69c:	4770      	bx	lr
 800c69e:	4a03      	ldr	r2, [pc, #12]	@ (800c6ac <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800c6a0:	4801      	ldr	r0, [pc, #4]	@ (800c6a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	601a      	str	r2, [r3, #0]
 800c6a6:	4770      	bx	lr
 800c6a8:	20000390 	.word	0x20000390
 800c6ac:	20000380 	.word	0x20000380

0800c6b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c6b0:	4a02      	ldr	r2, [pc, #8]	@ (800c6bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800c6b2:	4b03      	ldr	r3, [pc, #12]	@ (800c6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800c6b4:	6812      	ldr	r2, [r2, #0]
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20000380 	.word	0x20000380
 800c6c0:	20000390 	.word	0x20000390

0800c6c4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800c6c4:	2009      	movs	r0, #9
 800c6c6:	4770      	bx	lr

0800c6c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800c6c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop

0800c6d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800c6d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d8:	e9c2 0100 	strd	r0, r1, [r2]
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop

0800c6e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800c6e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c6e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c6e8:	e9c1 2300 	strd	r2, r3, [r1]
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop

0800c6f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800c6f0:	f00a ba8c 	b.w	8016c0c <sensor_msgs__msg__Imu__init>

0800c6f4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800c6f4:	f00a bae0 	b.w	8016cb8 <sensor_msgs__msg__Imu__fini>

0800c6f8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800c6f8:	2009      	movs	r0, #9
 800c6fa:	4770      	bx	lr

0800c6fc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800c6fc:	2009      	movs	r0, #9
 800c6fe:	4770      	bx	lr

0800c700 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800c700:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop

0800c708 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800c708:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop

0800c710 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800c710:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop

0800c718 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800c718:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop

0800c720 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800c720:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop

0800c728 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800c728:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c730:	e9c2 0100 	strd	r0, r1, [r2]
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop

0800c738 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800c738:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c73c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c740:	e9c1 2300 	strd	r2, r3, [r1]
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop

0800c748 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800c748:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c750:	e9c2 0100 	strd	r0, r1, [r2]
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop

0800c758 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800c758:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c75c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c760:	e9c1 2300 	strd	r2, r3, [r1]
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop

0800c768 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c768:	b510      	push	{r4, lr}
 800c76a:	f000 f90f 	bl	800c98c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c76e:	4c0b      	ldr	r4, [pc, #44]	@ (800c79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800c770:	60e0      	str	r0, [r4, #12]
 800c772:	f000 fb5b 	bl	800ce2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c776:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c778:	f000 fb6a 	bl	800ce50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c77c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c780:	f000 fb66 	bl	800ce50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c784:	4b06      	ldr	r3, [pc, #24]	@ (800c7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c786:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	b10a      	cbz	r2, 800c792 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800c78e:	4804      	ldr	r0, [pc, #16]	@ (800c7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c790:	bd10      	pop	{r4, pc}
 800c792:	4a04      	ldr	r2, [pc, #16]	@ (800c7a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800c794:	4802      	ldr	r0, [pc, #8]	@ (800c7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c796:	6812      	ldr	r2, [r2, #0]
 800c798:	601a      	str	r2, [r3, #0]
 800c79a:	bd10      	pop	{r4, pc}
 800c79c:	2000039c 	.word	0x2000039c
 800c7a0:	20000540 	.word	0x20000540
 800c7a4:	20000384 	.word	0x20000384

0800c7a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800c7a8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	460f      	mov	r7, r1
 800c7b0:	f000 f910 	bl	800c9d4 <get_serialized_size_std_msgs__msg__Header>
 800c7b4:	183c      	adds	r4, r7, r0
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	f108 0018 	add.w	r0, r8, #24
 800c7bc:	f000 fb56 	bl	800ce6c <get_serialized_size_geometry_msgs__msg__Quaternion>
 800c7c0:	4404      	add	r4, r0
 800c7c2:	2108      	movs	r1, #8
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f002 fc77 	bl	800f0b8 <ucdr_alignment>
 800c7ca:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c7ce:	4425      	add	r5, r4
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800c7d6:	f000 fc01 	bl	800cfdc <get_serialized_size_geometry_msgs__msg__Vector3>
 800c7da:	4405      	add	r5, r0
 800c7dc:	2108      	movs	r1, #8
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f002 fc6a 	bl	800f0b8 <ucdr_alignment>
 800c7e4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c7e8:	4425      	add	r5, r4
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800c7f0:	f000 fbf4 	bl	800cfdc <get_serialized_size_geometry_msgs__msg__Vector3>
 800c7f4:	4405      	add	r5, r0
 800c7f6:	2108      	movs	r1, #8
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	f002 fc5d 	bl	800f0b8 <ucdr_alignment>
 800c7fe:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c802:	4438      	add	r0, r7
 800c804:	4428      	add	r0, r5
 800c806:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800c80a:	bf00      	nop

0800c80c <get_serialized_size_sensor_msgs__msg__Imu>:
 800c80c:	b108      	cbz	r0, 800c812 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800c80e:	f7ff bfcb 	b.w	800c7a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c812:	4770      	bx	lr

0800c814 <_Imu__get_serialized_size>:
 800c814:	b110      	cbz	r0, 800c81c <_Imu__get_serialized_size+0x8>
 800c816:	2100      	movs	r1, #0
 800c818:	f7ff bfc6 	b.w	800c7a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop

0800c820 <_Imu__cdr_deserialize>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	460c      	mov	r4, r1
 800c824:	b399      	cbz	r1, 800c88e <_Imu__cdr_deserialize+0x6e>
 800c826:	4605      	mov	r5, r0
 800c828:	f000 f956 	bl	800cad8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c82c:	6843      	ldr	r3, [r0, #4]
 800c82e:	4621      	mov	r1, r4
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	4628      	mov	r0, r5
 800c834:	4798      	blx	r3
 800c836:	f000 fbcd 	bl	800cfd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c83a:	6843      	ldr	r3, [r0, #4]
 800c83c:	f104 0118 	add.w	r1, r4, #24
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	4628      	mov	r0, r5
 800c844:	4798      	blx	r3
 800c846:	2209      	movs	r2, #9
 800c848:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c84c:	4628      	mov	r0, r5
 800c84e:	f000 ff99 	bl	800d784 <ucdr_deserialize_array_double>
 800c852:	f000 fc4f 	bl	800d0f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c856:	6843      	ldr	r3, [r0, #4]
 800c858:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	4628      	mov	r0, r5
 800c860:	4798      	blx	r3
 800c862:	2209      	movs	r2, #9
 800c864:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c868:	4628      	mov	r0, r5
 800c86a:	f000 ff8b 	bl	800d784 <ucdr_deserialize_array_double>
 800c86e:	f000 fc41 	bl	800d0f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c872:	6843      	ldr	r3, [r0, #4]
 800c874:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	4628      	mov	r0, r5
 800c87c:	4798      	blx	r3
 800c87e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c882:	4628      	mov	r0, r5
 800c884:	2209      	movs	r2, #9
 800c886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c88a:	f000 bf7b 	b.w	800d784 <ucdr_deserialize_array_double>
 800c88e:	4608      	mov	r0, r1
 800c890:	bd38      	pop	{r3, r4, r5, pc}
 800c892:	bf00      	nop

0800c894 <_Imu__cdr_serialize>:
 800c894:	2800      	cmp	r0, #0
 800c896:	d035      	beq.n	800c904 <_Imu__cdr_serialize+0x70>
 800c898:	b538      	push	{r3, r4, r5, lr}
 800c89a:	460d      	mov	r5, r1
 800c89c:	4604      	mov	r4, r0
 800c89e:	f000 f91b 	bl	800cad8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c8a2:	6843      	ldr	r3, [r0, #4]
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4798      	blx	r3
 800c8ac:	f000 fb92 	bl	800cfd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c8b0:	6843      	ldr	r3, [r0, #4]
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	f104 0018 	add.w	r0, r4, #24
 800c8ba:	4798      	blx	r3
 800c8bc:	2209      	movs	r2, #9
 800c8be:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f000 ff0a 	bl	800d6dc <ucdr_serialize_array_double>
 800c8c8:	f000 fc14 	bl	800d0f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c8cc:	6843      	ldr	r3, [r0, #4]
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800c8d6:	4798      	blx	r3
 800c8d8:	2209      	movs	r2, #9
 800c8da:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 fefc 	bl	800d6dc <ucdr_serialize_array_double>
 800c8e4:	f000 fc06 	bl	800d0f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c8e8:	6843      	ldr	r3, [r0, #4]
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800c8f2:	4798      	blx	r3
 800c8f4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	2209      	movs	r2, #9
 800c8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c900:	f000 beec 	b.w	800d6dc <ucdr_serialize_array_double>
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop

0800c908 <max_serialized_size_sensor_msgs__msg__Imu>:
 800c908:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c90c:	2301      	movs	r3, #1
 800c90e:	7003      	strb	r3, [r0, #0]
 800c910:	4680      	mov	r8, r0
 800c912:	460f      	mov	r7, r1
 800c914:	f000 f8d6 	bl	800cac4 <max_serialized_size_std_msgs__msg__Header>
 800c918:	183c      	adds	r4, r7, r0
 800c91a:	4621      	mov	r1, r4
 800c91c:	4640      	mov	r0, r8
 800c91e:	f000 fb37 	bl	800cf90 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800c922:	4404      	add	r4, r0
 800c924:	2108      	movs	r1, #8
 800c926:	4620      	mov	r0, r4
 800c928:	f002 fbc6 	bl	800f0b8 <ucdr_alignment>
 800c92c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c930:	4425      	add	r5, r4
 800c932:	4629      	mov	r1, r5
 800c934:	4640      	mov	r0, r8
 800c936:	f000 fbc1 	bl	800d0bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800c93a:	4405      	add	r5, r0
 800c93c:	2108      	movs	r1, #8
 800c93e:	4628      	mov	r0, r5
 800c940:	f002 fbba 	bl	800f0b8 <ucdr_alignment>
 800c944:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c948:	4425      	add	r5, r4
 800c94a:	4629      	mov	r1, r5
 800c94c:	4640      	mov	r0, r8
 800c94e:	f000 fbb5 	bl	800d0bc <max_serialized_size_geometry_msgs__msg__Vector3>
 800c952:	4405      	add	r5, r0
 800c954:	2108      	movs	r1, #8
 800c956:	4628      	mov	r0, r5
 800c958:	f002 fbae 	bl	800f0b8 <ucdr_alignment>
 800c95c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c960:	4438      	add	r0, r7
 800c962:	4428      	add	r0, r5
 800c964:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800c968 <_Imu__max_serialized_size>:
 800c968:	b500      	push	{lr}
 800c96a:	b083      	sub	sp, #12
 800c96c:	2100      	movs	r1, #0
 800c96e:	f10d 0007 	add.w	r0, sp, #7
 800c972:	f7ff ffc9 	bl	800c908 <max_serialized_size_sensor_msgs__msg__Imu>
 800c976:	b003      	add	sp, #12
 800c978:	f85d fb04 	ldr.w	pc, [sp], #4

0800c97c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c97c:	4800      	ldr	r0, [pc, #0]	@ (800c980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800c97e:	4770      	bx	lr
 800c980:	2000054c 	.word	0x2000054c

0800c984 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800c984:	f00a b9ac 	b.w	8016ce0 <std_msgs__msg__Header__init>

0800c988 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800c988:	f00a b9ce 	b.w	8016d28 <std_msgs__msg__Header__fini>

0800c98c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800c98c:	b508      	push	{r3, lr}
 800c98e:	f000 f9d3 	bl	800cd38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c992:	4b06      	ldr	r3, [pc, #24]	@ (800c9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c994:	4906      	ldr	r1, [pc, #24]	@ (800c9b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	60c8      	str	r0, [r1, #12]
 800c99a:	b10a      	cbz	r2, 800c9a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800c99c:	4803      	ldr	r0, [pc, #12]	@ (800c9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c99e:	bd08      	pop	{r3, pc}
 800c9a0:	4a04      	ldr	r2, [pc, #16]	@ (800c9b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800c9a2:	4802      	ldr	r0, [pc, #8]	@ (800c9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	601a      	str	r2, [r3, #0]
 800c9a8:	bd08      	pop	{r3, pc}
 800c9aa:	bf00      	nop
 800c9ac:	200005ec 	.word	0x200005ec
 800c9b0:	20000574 	.word	0x20000574
 800c9b4:	20000384 	.word	0x20000384

0800c9b8 <_Header__max_serialized_size>:
 800c9b8:	b500      	push	{lr}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	2301      	movs	r3, #1
 800c9be:	2100      	movs	r1, #0
 800c9c0:	f10d 0007 	add.w	r0, sp, #7
 800c9c4:	f88d 3007 	strb.w	r3, [sp, #7]
 800c9c8:	f000 fa14 	bl	800cdf4 <max_serialized_size_builtin_interfaces__msg__Time>
 800c9cc:	b003      	add	sp, #12
 800c9ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9d2:	bf00      	nop

0800c9d4 <get_serialized_size_std_msgs__msg__Header>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	4605      	mov	r5, r0
 800c9d8:	b168      	cbz	r0, 800c9f6 <get_serialized_size_std_msgs__msg__Header+0x22>
 800c9da:	460c      	mov	r4, r1
 800c9dc:	f000 f9ba 	bl	800cd54 <get_serialized_size_builtin_interfaces__msg__Time>
 800c9e0:	1826      	adds	r6, r4, r0
 800c9e2:	2104      	movs	r1, #4
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f002 fb67 	bl	800f0b8 <ucdr_alignment>
 800c9ea:	68e9      	ldr	r1, [r5, #12]
 800c9ec:	f1c4 0405 	rsb	r4, r4, #5
 800c9f0:	440c      	add	r4, r1
 800c9f2:	4404      	add	r4, r0
 800c9f4:	19a0      	adds	r0, r4, r6
 800c9f6:	bd70      	pop	{r4, r5, r6, pc}

0800c9f8 <_Header__cdr_deserialize>:
 800c9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	b083      	sub	sp, #12
 800c9fe:	b1e1      	cbz	r1, 800ca3a <_Header__cdr_deserialize+0x42>
 800ca00:	4606      	mov	r6, r0
 800ca02:	f000 fa0b 	bl	800ce1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ca06:	6843      	ldr	r3, [r0, #4]
 800ca08:	4621      	mov	r1, r4
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	4798      	blx	r3
 800ca10:	6927      	ldr	r7, [r4, #16]
 800ca12:	68a1      	ldr	r1, [r4, #8]
 800ca14:	ab01      	add	r3, sp, #4
 800ca16:	463a      	mov	r2, r7
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f002 fbcb 	bl	800f1b4 <ucdr_deserialize_sequence_char>
 800ca1e:	9b01      	ldr	r3, [sp, #4]
 800ca20:	4605      	mov	r5, r0
 800ca22:	b920      	cbnz	r0, 800ca2e <_Header__cdr_deserialize+0x36>
 800ca24:	429f      	cmp	r7, r3
 800ca26:	d30c      	bcc.n	800ca42 <_Header__cdr_deserialize+0x4a>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	b003      	add	sp, #12
 800ca2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca2e:	b103      	cbz	r3, 800ca32 <_Header__cdr_deserialize+0x3a>
 800ca30:	3b01      	subs	r3, #1
 800ca32:	4628      	mov	r0, r5
 800ca34:	60e3      	str	r3, [r4, #12]
 800ca36:	b003      	add	sp, #12
 800ca38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca3a:	460d      	mov	r5, r1
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	b003      	add	sp, #12
 800ca40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca42:	2101      	movs	r1, #1
 800ca44:	75b0      	strb	r0, [r6, #22]
 800ca46:	7571      	strb	r1, [r6, #21]
 800ca48:	4630      	mov	r0, r6
 800ca4a:	60e5      	str	r5, [r4, #12]
 800ca4c:	f002 fb4a 	bl	800f0e4 <ucdr_align_to>
 800ca50:	4630      	mov	r0, r6
 800ca52:	9901      	ldr	r1, [sp, #4]
 800ca54:	f002 fb7c 	bl	800f150 <ucdr_advance_buffer>
 800ca58:	4628      	mov	r0, r5
 800ca5a:	b003      	add	sp, #12
 800ca5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca5e:	bf00      	nop

0800ca60 <_Header__cdr_serialize>:
 800ca60:	b1f8      	cbz	r0, 800caa2 <_Header__cdr_serialize+0x42>
 800ca62:	b570      	push	{r4, r5, r6, lr}
 800ca64:	4604      	mov	r4, r0
 800ca66:	460d      	mov	r5, r1
 800ca68:	f000 f9d8 	bl	800ce1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ca6c:	6843      	ldr	r3, [r0, #4]
 800ca6e:	4629      	mov	r1, r5
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	4620      	mov	r0, r4
 800ca74:	4798      	blx	r3
 800ca76:	68a6      	ldr	r6, [r4, #8]
 800ca78:	b156      	cbz	r6, 800ca90 <_Header__cdr_serialize+0x30>
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f7f3 fbc0 	bl	8000200 <strlen>
 800ca80:	4631      	mov	r1, r6
 800ca82:	60e0      	str	r0, [r4, #12]
 800ca84:	1c42      	adds	r2, r0, #1
 800ca86:	4628      	mov	r0, r5
 800ca88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca8c:	f002 bb80 	b.w	800f190 <ucdr_serialize_sequence_char>
 800ca90:	4630      	mov	r0, r6
 800ca92:	60e0      	str	r0, [r4, #12]
 800ca94:	4632      	mov	r2, r6
 800ca96:	4631      	mov	r1, r6
 800ca98:	4628      	mov	r0, r5
 800ca9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ca9e:	f002 bb77 	b.w	800f190 <ucdr_serialize_sequence_char>
 800caa2:	4770      	bx	lr

0800caa4 <_Header__get_serialized_size>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	4604      	mov	r4, r0
 800caa8:	b150      	cbz	r0, 800cac0 <_Header__get_serialized_size+0x1c>
 800caaa:	2100      	movs	r1, #0
 800caac:	f000 f952 	bl	800cd54 <get_serialized_size_builtin_interfaces__msg__Time>
 800cab0:	2104      	movs	r1, #4
 800cab2:	4605      	mov	r5, r0
 800cab4:	f002 fb00 	bl	800f0b8 <ucdr_alignment>
 800cab8:	68e2      	ldr	r2, [r4, #12]
 800caba:	3205      	adds	r2, #5
 800cabc:	1953      	adds	r3, r2, r5
 800cabe:	4418      	add	r0, r3
 800cac0:	bd38      	pop	{r3, r4, r5, pc}
 800cac2:	bf00      	nop

0800cac4 <max_serialized_size_std_msgs__msg__Header>:
 800cac4:	b510      	push	{r4, lr}
 800cac6:	2301      	movs	r3, #1
 800cac8:	4604      	mov	r4, r0
 800caca:	7003      	strb	r3, [r0, #0]
 800cacc:	f000 f992 	bl	800cdf4 <max_serialized_size_builtin_interfaces__msg__Time>
 800cad0:	2300      	movs	r3, #0
 800cad2:	7023      	strb	r3, [r4, #0]
 800cad4:	bd10      	pop	{r4, pc}
 800cad6:	bf00      	nop

0800cad8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800cad8:	4800      	ldr	r0, [pc, #0]	@ (800cadc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800cada:	4770      	bx	lr
 800cadc:	200005f8 	.word	0x200005f8

0800cae0 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800cae0:	4b04      	ldr	r3, [pc, #16]	@ (800caf4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	b10a      	cbz	r2, 800caea <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xa>
 800cae6:	4803      	ldr	r0, [pc, #12]	@ (800caf4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800cae8:	4770      	bx	lr
 800caea:	4a03      	ldr	r2, [pc, #12]	@ (800caf8 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x18>)
 800caec:	4801      	ldr	r0, [pc, #4]	@ (800caf4 <rosidl_typesupport_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>)
 800caee:	6812      	ldr	r2, [r2, #0]
 800caf0:	601a      	str	r2, [r3, #0]
 800caf2:	4770      	bx	lr
 800caf4:	20000628 	.word	0x20000628
 800caf8:	20000380 	.word	0x20000380

0800cafc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800cafc:	4b04      	ldr	r3, [pc, #16]	@ (800cb10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800cafe:	4805      	ldr	r0, [pc, #20]	@ (800cb14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800cb00:	4905      	ldr	r1, [pc, #20]	@ (800cb18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x1c>)
 800cb02:	4a06      	ldr	r2, [pc, #24]	@ (800cb1c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x20>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6003      	str	r3, [r0, #0]
 800cb08:	600b      	str	r3, [r1, #0]
 800cb0a:	6013      	str	r3, [r2, #0]
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	20000380 	.word	0x20000380
 800cb14:	20000644 	.word	0x20000644
 800cb18:	20000650 	.word	0x20000650
 800cb1c:	20000628 	.word	0x20000628

0800cb20 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_init_function>:
 800cb20:	f00a b90e 	b.w	8016d40 <std_srvs__srv__SetBool_Request__init>

0800cb24 <std_srvs__srv__SetBool_Request__rosidl_typesupport_introspection_c__SetBool_Request_fini_function>:
 800cb24:	f00a b910 	b.w	8016d48 <std_srvs__srv__SetBool_Request__fini>

0800cb28 <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_init_function>:
 800cb28:	f00a b910 	b.w	8016d4c <std_srvs__srv__SetBool_Response__init>

0800cb2c <std_srvs__srv__SetBool_Response__rosidl_typesupport_introspection_c__SetBool_Response_fini_function>:
 800cb2c:	f00a b920 	b.w	8016d70 <std_srvs__srv__SetBool_Response__fini>

0800cb30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800cb30:	4b04      	ldr	r3, [pc, #16]	@ (800cb44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	b10a      	cbz	r2, 800cb3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0xa>
 800cb36:	4803      	ldr	r0, [pc, #12]	@ (800cb44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800cb38:	4770      	bx	lr
 800cb3a:	4a03      	ldr	r2, [pc, #12]	@ (800cb48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x18>)
 800cb3c:	4801      	ldr	r0, [pc, #4]	@ (800cb44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x14>)
 800cb3e:	6812      	ldr	r2, [r2, #0]
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	4770      	bx	lr
 800cb44:	20000698 	.word	0x20000698
 800cb48:	20000384 	.word	0x20000384

0800cb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800cb4c:	4b04      	ldr	r3, [pc, #16]	@ (800cb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	b10a      	cbz	r2, 800cb56 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0xa>
 800cb52:	4803      	ldr	r0, [pc, #12]	@ (800cb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800cb54:	4770      	bx	lr
 800cb56:	4a03      	ldr	r2, [pc, #12]	@ (800cb64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x18>)
 800cb58:	4801      	ldr	r0, [pc, #4]	@ (800cb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x14>)
 800cb5a:	6812      	ldr	r2, [r2, #0]
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	4770      	bx	lr
 800cb60:	2000071c 	.word	0x2000071c
 800cb64:	20000384 	.word	0x20000384

0800cb68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800cb68:	4b13      	ldr	r3, [pc, #76]	@ (800cbb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	b132      	cbz	r2, 800cb7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x14>
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	b152      	cbz	r2, 800cb8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x22>
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	b182      	cbz	r2, 800cb9a <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x32>
 800cb78:	480f      	ldr	r0, [pc, #60]	@ (800cbb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800cb7a:	4770      	bx	lr
 800cb7c:	4a0f      	ldr	r2, [pc, #60]	@ (800cbbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800cb7e:	6812      	ldr	r2, [r2, #0]
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	689a      	ldr	r2, [r3, #8]
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	d1f4      	bne.n	800cb74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0xc>
 800cb8a:	4a0d      	ldr	r2, [pc, #52]	@ (800cbc0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x58>)
 800cb8c:	6811      	ldr	r1, [r2, #0]
 800cb8e:	b179      	cbz	r1, 800cbb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x48>
 800cb90:	6852      	ldr	r2, [r2, #4]
 800cb92:	609a      	str	r2, [r3, #8]
 800cb94:	68da      	ldr	r2, [r3, #12]
 800cb96:	2a00      	cmp	r2, #0
 800cb98:	d1ee      	bne.n	800cb78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x10>
 800cb9a:	4a0a      	ldr	r2, [pc, #40]	@ (800cbc4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x5c>)
 800cb9c:	6811      	ldr	r1, [r2, #0]
 800cb9e:	b119      	cbz	r1, 800cba8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x40>
 800cba0:	6852      	ldr	r2, [r2, #4]
 800cba2:	4805      	ldr	r0, [pc, #20]	@ (800cbb8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x50>)
 800cba4:	60da      	str	r2, [r3, #12]
 800cba6:	4770      	bx	lr
 800cba8:	4904      	ldr	r1, [pc, #16]	@ (800cbbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800cbaa:	6809      	ldr	r1, [r1, #0]
 800cbac:	6011      	str	r1, [r2, #0]
 800cbae:	e7f7      	b.n	800cba0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x38>
 800cbb0:	4902      	ldr	r1, [pc, #8]	@ (800cbbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x54>)
 800cbb2:	6809      	ldr	r1, [r1, #0]
 800cbb4:	6011      	str	r1, [r2, #0]
 800cbb6:	e7eb      	b.n	800cb90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x28>
 800cbb8:	20000738 	.word	0x20000738
 800cbbc:	20000384 	.word	0x20000384
 800cbc0:	20000698 	.word	0x20000698
 800cbc4:	2000071c 	.word	0x2000071c

0800cbc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request>:
 800cbc8:	4800      	ldr	r0, [pc, #0]	@ (800cbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Request+0x4>)
 800cbca:	4770      	bx	lr
 800cbcc:	20000760 	.word	0x20000760

0800cbd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response>:
 800cbd0:	4800      	ldr	r0, [pc, #0]	@ (800cbd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_srvs__srv__SetBool_Response+0x4>)
 800cbd2:	4770      	bx	lr
 800cbd4:	2000076c 	.word	0x2000076c

0800cbd8 <_SetBool_Request__max_serialized_size>:
 800cbd8:	b508      	push	{r3, lr}
 800cbda:	2101      	movs	r1, #1
 800cbdc:	2000      	movs	r0, #0
 800cbde:	f002 fa6b 	bl	800f0b8 <ucdr_alignment>
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	bd08      	pop	{r3, pc}
 800cbe6:	bf00      	nop

0800cbe8 <_SetBool_Request__cdr_deserialize>:
 800cbe8:	b109      	cbz	r1, 800cbee <_SetBool_Request__cdr_deserialize+0x6>
 800cbea:	f000 be37 	b.w	800d85c <ucdr_deserialize_bool>
 800cbee:	4608      	mov	r0, r1
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop

0800cbf4 <get_serialized_size_std_srvs__srv__SetBool_Request>:
 800cbf4:	b138      	cbz	r0, 800cc06 <get_serialized_size_std_srvs__srv__SetBool_Request+0x12>
 800cbf6:	b508      	push	{r3, lr}
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	2101      	movs	r1, #1
 800cbfe:	f002 fa5b 	bl	800f0b8 <ucdr_alignment>
 800cc02:	3001      	adds	r0, #1
 800cc04:	bd08      	pop	{r3, pc}
 800cc06:	4770      	bx	lr

0800cc08 <get_serialized_size_std_srvs__srv__SetBool_Response>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	b180      	cbz	r0, 800cc30 <get_serialized_size_std_srvs__srv__SetBool_Response+0x28>
 800cc0e:	460c      	mov	r4, r1
 800cc10:	4620      	mov	r0, r4
 800cc12:	2101      	movs	r1, #1
 800cc14:	f002 fa50 	bl	800f0b8 <ucdr_alignment>
 800cc18:	1c63      	adds	r3, r4, #1
 800cc1a:	181e      	adds	r6, r3, r0
 800cc1c:	2104      	movs	r1, #4
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f002 fa4a 	bl	800f0b8 <ucdr_alignment>
 800cc24:	68a9      	ldr	r1, [r5, #8]
 800cc26:	f1c4 0405 	rsb	r4, r4, #5
 800cc2a:	440c      	add	r4, r1
 800cc2c:	4404      	add	r4, r0
 800cc2e:	19a0      	adds	r0, r4, r6
 800cc30:	bd70      	pop	{r4, r5, r6, pc}
 800cc32:	bf00      	nop

0800cc34 <_SetBool_Request__cdr_serialize>:
 800cc34:	460a      	mov	r2, r1
 800cc36:	b118      	cbz	r0, 800cc40 <_SetBool_Request__cdr_serialize+0xc>
 800cc38:	7801      	ldrb	r1, [r0, #0]
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	f000 bdf8 	b.w	800d830 <ucdr_serialize_bool>
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop

0800cc44 <_SetBool_Response__cdr_deserialize>:
 800cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc46:	460c      	mov	r4, r1
 800cc48:	b083      	sub	sp, #12
 800cc4a:	b1b9      	cbz	r1, 800cc7c <_SetBool_Response__cdr_deserialize+0x38>
 800cc4c:	4606      	mov	r6, r0
 800cc4e:	f000 fe05 	bl	800d85c <ucdr_deserialize_bool>
 800cc52:	68e7      	ldr	r7, [r4, #12]
 800cc54:	6861      	ldr	r1, [r4, #4]
 800cc56:	ab01      	add	r3, sp, #4
 800cc58:	463a      	mov	r2, r7
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f002 faaa 	bl	800f1b4 <ucdr_deserialize_sequence_char>
 800cc60:	9b01      	ldr	r3, [sp, #4]
 800cc62:	4605      	mov	r5, r0
 800cc64:	b920      	cbnz	r0, 800cc70 <_SetBool_Response__cdr_deserialize+0x2c>
 800cc66:	429f      	cmp	r7, r3
 800cc68:	d30c      	bcc.n	800cc84 <_SetBool_Response__cdr_deserialize+0x40>
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	b003      	add	sp, #12
 800cc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc70:	b103      	cbz	r3, 800cc74 <_SetBool_Response__cdr_deserialize+0x30>
 800cc72:	3b01      	subs	r3, #1
 800cc74:	4628      	mov	r0, r5
 800cc76:	60a3      	str	r3, [r4, #8]
 800cc78:	b003      	add	sp, #12
 800cc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc7c:	460d      	mov	r5, r1
 800cc7e:	4628      	mov	r0, r5
 800cc80:	b003      	add	sp, #12
 800cc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc84:	2101      	movs	r1, #1
 800cc86:	75b0      	strb	r0, [r6, #22]
 800cc88:	7571      	strb	r1, [r6, #21]
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	60a5      	str	r5, [r4, #8]
 800cc8e:	f002 fa29 	bl	800f0e4 <ucdr_align_to>
 800cc92:	4630      	mov	r0, r6
 800cc94:	9901      	ldr	r1, [sp, #4]
 800cc96:	f002 fa5b 	bl	800f150 <ucdr_advance_buffer>
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	b003      	add	sp, #12
 800cc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cca0 <_SetBool_Response__cdr_serialize>:
 800cca0:	b1e0      	cbz	r0, 800ccdc <_SetBool_Response__cdr_serialize+0x3c>
 800cca2:	b570      	push	{r4, r5, r6, lr}
 800cca4:	460d      	mov	r5, r1
 800cca6:	4604      	mov	r4, r0
 800cca8:	7801      	ldrb	r1, [r0, #0]
 800ccaa:	4628      	mov	r0, r5
 800ccac:	f000 fdc0 	bl	800d830 <ucdr_serialize_bool>
 800ccb0:	6866      	ldr	r6, [r4, #4]
 800ccb2:	b156      	cbz	r6, 800ccca <_SetBool_Response__cdr_serialize+0x2a>
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f7f3 faa3 	bl	8000200 <strlen>
 800ccba:	4631      	mov	r1, r6
 800ccbc:	60a0      	str	r0, [r4, #8]
 800ccbe:	1c42      	adds	r2, r0, #1
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccc6:	f002 ba63 	b.w	800f190 <ucdr_serialize_sequence_char>
 800ccca:	4630      	mov	r0, r6
 800cccc:	60a0      	str	r0, [r4, #8]
 800ccce:	4632      	mov	r2, r6
 800ccd0:	4631      	mov	r1, r6
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ccd8:	f002 ba5a 	b.w	800f190 <ucdr_serialize_sequence_char>
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop

0800cce0 <_SetBool_Request__get_serialized_size>:
 800cce0:	b130      	cbz	r0, 800ccf0 <_SetBool_Request__get_serialized_size+0x10>
 800cce2:	b508      	push	{r3, lr}
 800cce4:	2101      	movs	r1, #1
 800cce6:	2000      	movs	r0, #0
 800cce8:	f002 f9e6 	bl	800f0b8 <ucdr_alignment>
 800ccec:	3001      	adds	r0, #1
 800ccee:	bd08      	pop	{r3, pc}
 800ccf0:	4770      	bx	lr
 800ccf2:	bf00      	nop

0800ccf4 <_SetBool_Response__max_serialized_size>:
 800ccf4:	b508      	push	{r3, lr}
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	f002 f9dd 	bl	800f0b8 <ucdr_alignment>
 800ccfe:	3001      	adds	r0, #1
 800cd00:	bd08      	pop	{r3, pc}
 800cd02:	bf00      	nop

0800cd04 <_SetBool_Response__get_serialized_size>:
 800cd04:	b538      	push	{r3, r4, r5, lr}
 800cd06:	4604      	mov	r4, r0
 800cd08:	b160      	cbz	r0, 800cd24 <_SetBool_Response__get_serialized_size+0x20>
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	f002 f9d3 	bl	800f0b8 <ucdr_alignment>
 800cd12:	1c45      	adds	r5, r0, #1
 800cd14:	2104      	movs	r1, #4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f002 f9ce 	bl	800f0b8 <ucdr_alignment>
 800cd1c:	68a3      	ldr	r3, [r4, #8]
 800cd1e:	3305      	adds	r3, #5
 800cd20:	4418      	add	r0, r3
 800cd22:	4428      	add	r0, r5
 800cd24:	bd38      	pop	{r3, r4, r5, pc}
 800cd26:	bf00      	nop

0800cd28 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool>:
 800cd28:	4800      	ldr	r0, [pc, #0]	@ (800cd2c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__std_srvs__srv__SetBool+0x4>)
 800cd2a:	4770      	bx	lr
 800cd2c:	20000754 	.word	0x20000754

0800cd30 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800cd30:	f00a b824 	b.w	8016d7c <builtin_interfaces__msg__Time__init>

0800cd34 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800cd34:	f00a b826 	b.w	8016d84 <builtin_interfaces__msg__Time__fini>

0800cd38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800cd38:	4b04      	ldr	r3, [pc, #16]	@ (800cd4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	b10a      	cbz	r2, 800cd42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800cd3e:	4803      	ldr	r0, [pc, #12]	@ (800cd4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800cd40:	4770      	bx	lr
 800cd42:	4a03      	ldr	r2, [pc, #12]	@ (800cd50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800cd44:	4801      	ldr	r0, [pc, #4]	@ (800cd4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800cd46:	6812      	ldr	r2, [r2, #0]
 800cd48:	601a      	str	r2, [r3, #0]
 800cd4a:	4770      	bx	lr
 800cd4c:	20000828 	.word	0x20000828
 800cd50:	20000384 	.word	0x20000384

0800cd54 <get_serialized_size_builtin_interfaces__msg__Time>:
 800cd54:	b180      	cbz	r0, 800cd78 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800cd56:	b538      	push	{r3, r4, r5, lr}
 800cd58:	460d      	mov	r5, r1
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	2104      	movs	r1, #4
 800cd5e:	f002 f9ab 	bl	800f0b8 <ucdr_alignment>
 800cd62:	1d2b      	adds	r3, r5, #4
 800cd64:	181c      	adds	r4, r3, r0
 800cd66:	2104      	movs	r1, #4
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f002 f9a5 	bl	800f0b8 <ucdr_alignment>
 800cd6e:	f1c5 0504 	rsb	r5, r5, #4
 800cd72:	4428      	add	r0, r5
 800cd74:	4420      	add	r0, r4
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop

0800cd7c <_Time__cdr_deserialize>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	460c      	mov	r4, r1
 800cd80:	b141      	cbz	r1, 800cd94 <_Time__cdr_deserialize+0x18>
 800cd82:	4605      	mov	r5, r0
 800cd84:	f001 fc4a 	bl	800e61c <ucdr_deserialize_int32_t>
 800cd88:	1d21      	adds	r1, r4, #4
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd90:	f001 b8c2 	b.w	800df18 <ucdr_deserialize_uint32_t>
 800cd94:	4608      	mov	r0, r1
 800cd96:	bd38      	pop	{r3, r4, r5, pc}

0800cd98 <_Time__cdr_serialize>:
 800cd98:	b160      	cbz	r0, 800cdb4 <_Time__cdr_serialize+0x1c>
 800cd9a:	b538      	push	{r3, r4, r5, lr}
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	4604      	mov	r4, r0
 800cda0:	6801      	ldr	r1, [r0, #0]
 800cda2:	4628      	mov	r0, r5
 800cda4:	f001 fba2 	bl	800e4ec <ucdr_serialize_int32_t>
 800cda8:	6861      	ldr	r1, [r4, #4]
 800cdaa:	4628      	mov	r0, r5
 800cdac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb0:	f000 bf82 	b.w	800dcb8 <ucdr_serialize_uint32_t>
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop

0800cdb8 <_Time__get_serialized_size>:
 800cdb8:	b160      	cbz	r0, 800cdd4 <_Time__get_serialized_size+0x1c>
 800cdba:	b510      	push	{r4, lr}
 800cdbc:	2104      	movs	r1, #4
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	f002 f97a 	bl	800f0b8 <ucdr_alignment>
 800cdc4:	1d04      	adds	r4, r0, #4
 800cdc6:	2104      	movs	r1, #4
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f002 f975 	bl	800f0b8 <ucdr_alignment>
 800cdce:	3004      	adds	r0, #4
 800cdd0:	4420      	add	r0, r4
 800cdd2:	bd10      	pop	{r4, pc}
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop

0800cdd8 <_Time__max_serialized_size>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	2104      	movs	r1, #4
 800cddc:	2000      	movs	r0, #0
 800cdde:	f002 f96b 	bl	800f0b8 <ucdr_alignment>
 800cde2:	1d04      	adds	r4, r0, #4
 800cde4:	2104      	movs	r1, #4
 800cde6:	4620      	mov	r0, r4
 800cde8:	f002 f966 	bl	800f0b8 <ucdr_alignment>
 800cdec:	3004      	adds	r0, #4
 800cdee:	4420      	add	r0, r4
 800cdf0:	bd10      	pop	{r4, pc}
 800cdf2:	bf00      	nop

0800cdf4 <max_serialized_size_builtin_interfaces__msg__Time>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	7003      	strb	r3, [r0, #0]
 800cdfc:	2104      	movs	r1, #4
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f002 f95a 	bl	800f0b8 <ucdr_alignment>
 800ce04:	1d25      	adds	r5, r4, #4
 800ce06:	4405      	add	r5, r0
 800ce08:	2104      	movs	r1, #4
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f002 f954 	bl	800f0b8 <ucdr_alignment>
 800ce10:	f1c4 0404 	rsb	r4, r4, #4
 800ce14:	4420      	add	r0, r4
 800ce16:	4428      	add	r0, r5
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop

0800ce1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ce1c:	4800      	ldr	r0, [pc, #0]	@ (800ce20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ce1e:	4770      	bx	lr
 800ce20:	20000834 	.word	0x20000834

0800ce24 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800ce24:	f009 bfb0 	b.w	8016d88 <geometry_msgs__msg__Quaternion__init>

0800ce28 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800ce28:	f009 bfc2 	b.w	8016db0 <geometry_msgs__msg__Quaternion__fini>

0800ce2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800ce2c:	4b04      	ldr	r3, [pc, #16]	@ (800ce40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	b10a      	cbz	r2, 800ce36 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800ce32:	4803      	ldr	r0, [pc, #12]	@ (800ce40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ce34:	4770      	bx	lr
 800ce36:	4a03      	ldr	r2, [pc, #12]	@ (800ce44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800ce38:	4801      	ldr	r0, [pc, #4]	@ (800ce40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800ce3a:	6812      	ldr	r2, [r2, #0]
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	4770      	bx	lr
 800ce40:	2000094c 	.word	0x2000094c
 800ce44:	20000384 	.word	0x20000384

0800ce48 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800ce48:	f009 bfb4 	b.w	8016db4 <geometry_msgs__msg__Vector3__init>

0800ce4c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800ce4c:	f009 bfb6 	b.w	8016dbc <geometry_msgs__msg__Vector3__fini>

0800ce50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ce50:	4b04      	ldr	r3, [pc, #16]	@ (800ce64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	b10a      	cbz	r2, 800ce5a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ce56:	4803      	ldr	r0, [pc, #12]	@ (800ce64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ce58:	4770      	bx	lr
 800ce5a:	4a03      	ldr	r2, [pc, #12]	@ (800ce68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ce5c:	4801      	ldr	r0, [pc, #4]	@ (800ce64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ce5e:	6812      	ldr	r2, [r2, #0]
 800ce60:	601a      	str	r2, [r3, #0]
 800ce62:	4770      	bx	lr
 800ce64:	20000a0c 	.word	0x20000a0c
 800ce68:	20000384 	.word	0x20000384

0800ce6c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800ce6c:	b1f0      	cbz	r0, 800ceac <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800ce6e:	b570      	push	{r4, r5, r6, lr}
 800ce70:	460d      	mov	r5, r1
 800ce72:	4628      	mov	r0, r5
 800ce74:	2108      	movs	r1, #8
 800ce76:	f002 f91f 	bl	800f0b8 <ucdr_alignment>
 800ce7a:	f105 0308 	add.w	r3, r5, #8
 800ce7e:	181e      	adds	r6, r3, r0
 800ce80:	2108      	movs	r1, #8
 800ce82:	4630      	mov	r0, r6
 800ce84:	f002 f918 	bl	800f0b8 <ucdr_alignment>
 800ce88:	f100 0408 	add.w	r4, r0, #8
 800ce8c:	4434      	add	r4, r6
 800ce8e:	2108      	movs	r1, #8
 800ce90:	4620      	mov	r0, r4
 800ce92:	f002 f911 	bl	800f0b8 <ucdr_alignment>
 800ce96:	3008      	adds	r0, #8
 800ce98:	4404      	add	r4, r0
 800ce9a:	2108      	movs	r1, #8
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f002 f90b 	bl	800f0b8 <ucdr_alignment>
 800cea2:	f1c5 0508 	rsb	r5, r5, #8
 800cea6:	4428      	add	r0, r5
 800cea8:	4420      	add	r0, r4
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop

0800ceb0 <_Quaternion__cdr_deserialize>:
 800ceb0:	b538      	push	{r3, r4, r5, lr}
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	b199      	cbz	r1, 800cede <_Quaternion__cdr_deserialize+0x2e>
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	f001 ff12 	bl	800ece0 <ucdr_deserialize_double>
 800cebc:	f104 0108 	add.w	r1, r4, #8
 800cec0:	4628      	mov	r0, r5
 800cec2:	f001 ff0d 	bl	800ece0 <ucdr_deserialize_double>
 800cec6:	f104 0110 	add.w	r1, r4, #16
 800ceca:	4628      	mov	r0, r5
 800cecc:	f001 ff08 	bl	800ece0 <ucdr_deserialize_double>
 800ced0:	f104 0118 	add.w	r1, r4, #24
 800ced4:	4628      	mov	r0, r5
 800ced6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceda:	f001 bf01 	b.w	800ece0 <ucdr_deserialize_double>
 800cede:	4608      	mov	r0, r1
 800cee0:	bd38      	pop	{r3, r4, r5, pc}
 800cee2:	bf00      	nop

0800cee4 <_Quaternion__cdr_serialize>:
 800cee4:	b1c0      	cbz	r0, 800cf18 <_Quaternion__cdr_serialize+0x34>
 800cee6:	b538      	push	{r3, r4, r5, lr}
 800cee8:	ed90 0b00 	vldr	d0, [r0]
 800ceec:	460d      	mov	r5, r1
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	f001 fd53 	bl	800e99c <ucdr_serialize_double>
 800cef6:	ed94 0b02 	vldr	d0, [r4, #8]
 800cefa:	4628      	mov	r0, r5
 800cefc:	f001 fd4e 	bl	800e99c <ucdr_serialize_double>
 800cf00:	ed94 0b04 	vldr	d0, [r4, #16]
 800cf04:	4628      	mov	r0, r5
 800cf06:	f001 fd49 	bl	800e99c <ucdr_serialize_double>
 800cf0a:	ed94 0b06 	vldr	d0, [r4, #24]
 800cf0e:	4628      	mov	r0, r5
 800cf10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf14:	f001 bd42 	b.w	800e99c <ucdr_serialize_double>
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop

0800cf1c <_Quaternion__get_serialized_size>:
 800cf1c:	b1d0      	cbz	r0, 800cf54 <_Quaternion__get_serialized_size+0x38>
 800cf1e:	b538      	push	{r3, r4, r5, lr}
 800cf20:	2108      	movs	r1, #8
 800cf22:	2000      	movs	r0, #0
 800cf24:	f002 f8c8 	bl	800f0b8 <ucdr_alignment>
 800cf28:	f100 0508 	add.w	r5, r0, #8
 800cf2c:	2108      	movs	r1, #8
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f002 f8c2 	bl	800f0b8 <ucdr_alignment>
 800cf34:	f100 0408 	add.w	r4, r0, #8
 800cf38:	442c      	add	r4, r5
 800cf3a:	2108      	movs	r1, #8
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f002 f8bb 	bl	800f0b8 <ucdr_alignment>
 800cf42:	3008      	adds	r0, #8
 800cf44:	4404      	add	r4, r0
 800cf46:	2108      	movs	r1, #8
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f002 f8b5 	bl	800f0b8 <ucdr_alignment>
 800cf4e:	3008      	adds	r0, #8
 800cf50:	4420      	add	r0, r4
 800cf52:	bd38      	pop	{r3, r4, r5, pc}
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop

0800cf58 <_Quaternion__max_serialized_size>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	2108      	movs	r1, #8
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	f002 f8ab 	bl	800f0b8 <ucdr_alignment>
 800cf62:	f100 0508 	add.w	r5, r0, #8
 800cf66:	2108      	movs	r1, #8
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f002 f8a5 	bl	800f0b8 <ucdr_alignment>
 800cf6e:	f100 0408 	add.w	r4, r0, #8
 800cf72:	442c      	add	r4, r5
 800cf74:	2108      	movs	r1, #8
 800cf76:	4620      	mov	r0, r4
 800cf78:	f002 f89e 	bl	800f0b8 <ucdr_alignment>
 800cf7c:	3008      	adds	r0, #8
 800cf7e:	4404      	add	r4, r0
 800cf80:	2108      	movs	r1, #8
 800cf82:	4620      	mov	r0, r4
 800cf84:	f002 f898 	bl	800f0b8 <ucdr_alignment>
 800cf88:	3008      	adds	r0, #8
 800cf8a:	4420      	add	r0, r4
 800cf8c:	bd38      	pop	{r3, r4, r5, pc}
 800cf8e:	bf00      	nop

0800cf90 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	2301      	movs	r3, #1
 800cf94:	460c      	mov	r4, r1
 800cf96:	7003      	strb	r3, [r0, #0]
 800cf98:	2108      	movs	r1, #8
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f002 f88c 	bl	800f0b8 <ucdr_alignment>
 800cfa0:	f104 0508 	add.w	r5, r4, #8
 800cfa4:	1946      	adds	r6, r0, r5
 800cfa6:	2108      	movs	r1, #8
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f002 f885 	bl	800f0b8 <ucdr_alignment>
 800cfae:	f100 0508 	add.w	r5, r0, #8
 800cfb2:	4435      	add	r5, r6
 800cfb4:	2108      	movs	r1, #8
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f002 f87e 	bl	800f0b8 <ucdr_alignment>
 800cfbc:	3008      	adds	r0, #8
 800cfbe:	4405      	add	r5, r0
 800cfc0:	2108      	movs	r1, #8
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f002 f878 	bl	800f0b8 <ucdr_alignment>
 800cfc8:	f1c4 0408 	rsb	r4, r4, #8
 800cfcc:	4420      	add	r0, r4
 800cfce:	4428      	add	r0, r5
 800cfd0:	bd70      	pop	{r4, r5, r6, pc}
 800cfd2:	bf00      	nop

0800cfd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800cfd4:	4800      	ldr	r0, [pc, #0]	@ (800cfd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800cfd6:	4770      	bx	lr
 800cfd8:	20000a18 	.word	0x20000a18

0800cfdc <get_serialized_size_geometry_msgs__msg__Vector3>:
 800cfdc:	b1b8      	cbz	r0, 800d00e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800cfde:	b538      	push	{r3, r4, r5, lr}
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	2108      	movs	r1, #8
 800cfe6:	f002 f867 	bl	800f0b8 <ucdr_alignment>
 800cfea:	f105 0308 	add.w	r3, r5, #8
 800cfee:	181c      	adds	r4, r3, r0
 800cff0:	2108      	movs	r1, #8
 800cff2:	4620      	mov	r0, r4
 800cff4:	f002 f860 	bl	800f0b8 <ucdr_alignment>
 800cff8:	3008      	adds	r0, #8
 800cffa:	4404      	add	r4, r0
 800cffc:	2108      	movs	r1, #8
 800cffe:	4620      	mov	r0, r4
 800d000:	f002 f85a 	bl	800f0b8 <ucdr_alignment>
 800d004:	f1c5 0508 	rsb	r5, r5, #8
 800d008:	4428      	add	r0, r5
 800d00a:	4420      	add	r0, r4
 800d00c:	bd38      	pop	{r3, r4, r5, pc}
 800d00e:	4770      	bx	lr

0800d010 <_Vector3__cdr_deserialize>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	460c      	mov	r4, r1
 800d014:	b171      	cbz	r1, 800d034 <_Vector3__cdr_deserialize+0x24>
 800d016:	4605      	mov	r5, r0
 800d018:	f001 fe62 	bl	800ece0 <ucdr_deserialize_double>
 800d01c:	f104 0108 	add.w	r1, r4, #8
 800d020:	4628      	mov	r0, r5
 800d022:	f001 fe5d 	bl	800ece0 <ucdr_deserialize_double>
 800d026:	f104 0110 	add.w	r1, r4, #16
 800d02a:	4628      	mov	r0, r5
 800d02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d030:	f001 be56 	b.w	800ece0 <ucdr_deserialize_double>
 800d034:	4608      	mov	r0, r1
 800d036:	bd38      	pop	{r3, r4, r5, pc}

0800d038 <_Vector3__cdr_serialize>:
 800d038:	b198      	cbz	r0, 800d062 <_Vector3__cdr_serialize+0x2a>
 800d03a:	b538      	push	{r3, r4, r5, lr}
 800d03c:	ed90 0b00 	vldr	d0, [r0]
 800d040:	460d      	mov	r5, r1
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	f001 fca9 	bl	800e99c <ucdr_serialize_double>
 800d04a:	ed94 0b02 	vldr	d0, [r4, #8]
 800d04e:	4628      	mov	r0, r5
 800d050:	f001 fca4 	bl	800e99c <ucdr_serialize_double>
 800d054:	ed94 0b04 	vldr	d0, [r4, #16]
 800d058:	4628      	mov	r0, r5
 800d05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d05e:	f001 bc9d 	b.w	800e99c <ucdr_serialize_double>
 800d062:	4770      	bx	lr

0800d064 <_Vector3__get_serialized_size>:
 800d064:	b198      	cbz	r0, 800d08e <_Vector3__get_serialized_size+0x2a>
 800d066:	b510      	push	{r4, lr}
 800d068:	2108      	movs	r1, #8
 800d06a:	2000      	movs	r0, #0
 800d06c:	f002 f824 	bl	800f0b8 <ucdr_alignment>
 800d070:	f100 0408 	add.w	r4, r0, #8
 800d074:	2108      	movs	r1, #8
 800d076:	4620      	mov	r0, r4
 800d078:	f002 f81e 	bl	800f0b8 <ucdr_alignment>
 800d07c:	3008      	adds	r0, #8
 800d07e:	4404      	add	r4, r0
 800d080:	2108      	movs	r1, #8
 800d082:	4620      	mov	r0, r4
 800d084:	f002 f818 	bl	800f0b8 <ucdr_alignment>
 800d088:	3008      	adds	r0, #8
 800d08a:	4420      	add	r0, r4
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	4770      	bx	lr

0800d090 <_Vector3__max_serialized_size>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	2108      	movs	r1, #8
 800d094:	2000      	movs	r0, #0
 800d096:	f002 f80f 	bl	800f0b8 <ucdr_alignment>
 800d09a:	f100 0508 	add.w	r5, r0, #8
 800d09e:	2108      	movs	r1, #8
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f002 f809 	bl	800f0b8 <ucdr_alignment>
 800d0a6:	f100 0408 	add.w	r4, r0, #8
 800d0aa:	442c      	add	r4, r5
 800d0ac:	2108      	movs	r1, #8
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f002 f802 	bl	800f0b8 <ucdr_alignment>
 800d0b4:	3008      	adds	r0, #8
 800d0b6:	4420      	add	r0, r4
 800d0b8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ba:	bf00      	nop

0800d0bc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	2301      	movs	r3, #1
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	7003      	strb	r3, [r0, #0]
 800d0c4:	2108      	movs	r1, #8
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f001 fff6 	bl	800f0b8 <ucdr_alignment>
 800d0cc:	f104 0508 	add.w	r5, r4, #8
 800d0d0:	1946      	adds	r6, r0, r5
 800d0d2:	2108      	movs	r1, #8
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f001 ffef 	bl	800f0b8 <ucdr_alignment>
 800d0da:	f100 0508 	add.w	r5, r0, #8
 800d0de:	4435      	add	r5, r6
 800d0e0:	2108      	movs	r1, #8
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f001 ffe8 	bl	800f0b8 <ucdr_alignment>
 800d0e8:	f1c4 0408 	rsb	r4, r4, #8
 800d0ec:	4420      	add	r0, r4
 800d0ee:	4428      	add	r0, r5
 800d0f0:	bd70      	pop	{r4, r5, r6, pc}
 800d0f2:	bf00      	nop

0800d0f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d0f4:	4800      	ldr	r0, [pc, #0]	@ (800d0f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800d0f6:	4770      	bx	lr
 800d0f8:	20000a40 	.word	0x20000a40

0800d0fc <micro_ros_string_utilities_init_with_size>:
 800d0fc:	b570      	push	{r4, r5, r6, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	1c4c      	adds	r4, r1, #1
 800d102:	4605      	mov	r5, r0
 800d104:	a801      	add	r0, sp, #4
 800d106:	f7fe fbf5 	bl	800b8f4 <rcutils_get_default_allocator>
 800d10a:	9b01      	ldr	r3, [sp, #4]
 800d10c:	9905      	ldr	r1, [sp, #20]
 800d10e:	4620      	mov	r0, r4
 800d110:	4798      	blx	r3
 800d112:	4622      	mov	r2, r4
 800d114:	2100      	movs	r1, #0
 800d116:	4606      	mov	r6, r0
 800d118:	f00c fca5 	bl	8019a66 <memset>
 800d11c:	2300      	movs	r3, #0
 800d11e:	4628      	mov	r0, r5
 800d120:	e9c5 6300 	strd	r6, r3, [r5]
 800d124:	60ac      	str	r4, [r5, #8]
 800d126:	b006      	add	sp, #24
 800d128:	bd70      	pop	{r4, r5, r6, pc}
 800d12a:	bf00      	nop

0800d12c <micro_ros_string_utilities_append>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	b08a      	sub	sp, #40	@ 0x28
 800d132:	4604      	mov	r4, r0
 800d134:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800d138:	a801      	add	r0, sp, #4
 800d13a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800d13e:	a805      	add	r0, sp, #20
 800d140:	f7fe fbd8 	bl	800b8f4 <rcutils_get_default_allocator>
 800d144:	4640      	mov	r0, r8
 800d146:	f7f3 f85b 	bl	8000200 <strlen>
 800d14a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d14e:	9f03      	ldr	r7, [sp, #12]
 800d150:	9d01      	ldr	r5, [sp, #4]
 800d152:	eb00 0a09 	add.w	sl, r0, r9
 800d156:	45ba      	cmp	sl, r7
 800d158:	4606      	mov	r6, r0
 800d15a:	d307      	bcc.n	800d16c <micro_ros_string_utilities_append+0x40>
 800d15c:	f10a 0701 	add.w	r7, sl, #1
 800d160:	4628      	mov	r0, r5
 800d162:	9b07      	ldr	r3, [sp, #28]
 800d164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d166:	4639      	mov	r1, r7
 800d168:	4798      	blx	r3
 800d16a:	4605      	mov	r5, r0
 800d16c:	1c72      	adds	r2, r6, #1
 800d16e:	4641      	mov	r1, r8
 800d170:	eb05 0009 	add.w	r0, r5, r9
 800d174:	f00c fcdf 	bl	8019b36 <memcpy>
 800d178:	4620      	mov	r0, r4
 800d17a:	e9c4 5a00 	strd	r5, sl, [r4]
 800d17e:	60a7      	str	r7, [r4, #8]
 800d180:	b00a      	add	sp, #40	@ 0x28
 800d182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d186:	bf00      	nop

0800d188 <micro_ros_string_utilities_remove_tail_chars>:
 800d188:	b500      	push	{lr}
 800d18a:	b085      	sub	sp, #20
 800d18c:	f10d 0e04 	add.w	lr, sp, #4
 800d190:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800d194:	4684      	mov	ip, r0
 800d196:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800d19a:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800d19e:	460b      	mov	r3, r1
 800d1a0:	9906      	ldr	r1, [sp, #24]
 800d1a2:	1a5b      	subs	r3, r3, r1
 800d1a4:	9901      	ldr	r1, [sp, #4]
 800d1a6:	f8cc 3004 	str.w	r3, [ip, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	4660      	mov	r0, ip
 800d1ae:	54ca      	strb	r2, [r1, r3]
 800d1b0:	b005      	add	sp, #20
 800d1b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1b6:	bf00      	nop

0800d1b8 <micro_ros_string_utilities_destroy>:
 800d1b8:	b510      	push	{r4, lr}
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	b086      	sub	sp, #24
 800d1be:	a801      	add	r0, sp, #4
 800d1c0:	f7fe fb98 	bl	800b8f4 <rcutils_get_default_allocator>
 800d1c4:	9b02      	ldr	r3, [sp, #8]
 800d1c6:	9905      	ldr	r1, [sp, #20]
 800d1c8:	6820      	ldr	r0, [r4, #0]
 800d1ca:	4798      	blx	r3
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	e9c4 3300 	strd	r3, r3, [r4]
 800d1d2:	60a3      	str	r3, [r4, #8]
 800d1d4:	b006      	add	sp, #24
 800d1d6:	bd10      	pop	{r4, pc}

0800d1d8 <ucdr_serialize_endian_array_char>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	4619      	mov	r1, r3
 800d1de:	461f      	mov	r7, r3
 800d1e0:	4605      	mov	r5, r0
 800d1e2:	4690      	mov	r8, r2
 800d1e4:	f001 ff10 	bl	800f008 <ucdr_check_buffer_available_for>
 800d1e8:	b9e0      	cbnz	r0, 800d224 <ucdr_serialize_endian_array_char+0x4c>
 800d1ea:	463e      	mov	r6, r7
 800d1ec:	e009      	b.n	800d202 <ucdr_serialize_endian_array_char+0x2a>
 800d1ee:	68a8      	ldr	r0, [r5, #8]
 800d1f0:	f00c fca1 	bl	8019b36 <memcpy>
 800d1f4:	68ab      	ldr	r3, [r5, #8]
 800d1f6:	6928      	ldr	r0, [r5, #16]
 800d1f8:	4423      	add	r3, r4
 800d1fa:	4420      	add	r0, r4
 800d1fc:	1b36      	subs	r6, r6, r4
 800d1fe:	60ab      	str	r3, [r5, #8]
 800d200:	6128      	str	r0, [r5, #16]
 800d202:	4631      	mov	r1, r6
 800d204:	2201      	movs	r2, #1
 800d206:	4628      	mov	r0, r5
 800d208:	f001 ff86 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d20c:	1bb9      	subs	r1, r7, r6
 800d20e:	4441      	add	r1, r8
 800d210:	4604      	mov	r4, r0
 800d212:	4602      	mov	r2, r0
 800d214:	2800      	cmp	r0, #0
 800d216:	d1ea      	bne.n	800d1ee <ucdr_serialize_endian_array_char+0x16>
 800d218:	2301      	movs	r3, #1
 800d21a:	7da8      	ldrb	r0, [r5, #22]
 800d21c:	756b      	strb	r3, [r5, #21]
 800d21e:	4058      	eors	r0, r3
 800d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d224:	463a      	mov	r2, r7
 800d226:	68a8      	ldr	r0, [r5, #8]
 800d228:	4641      	mov	r1, r8
 800d22a:	f00c fc84 	bl	8019b36 <memcpy>
 800d22e:	68aa      	ldr	r2, [r5, #8]
 800d230:	692b      	ldr	r3, [r5, #16]
 800d232:	443a      	add	r2, r7
 800d234:	443b      	add	r3, r7
 800d236:	60aa      	str	r2, [r5, #8]
 800d238:	612b      	str	r3, [r5, #16]
 800d23a:	e7ed      	b.n	800d218 <ucdr_serialize_endian_array_char+0x40>

0800d23c <ucdr_deserialize_endian_array_char>:
 800d23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d240:	4619      	mov	r1, r3
 800d242:	461f      	mov	r7, r3
 800d244:	4605      	mov	r5, r0
 800d246:	4690      	mov	r8, r2
 800d248:	f001 fede 	bl	800f008 <ucdr_check_buffer_available_for>
 800d24c:	b9e0      	cbnz	r0, 800d288 <ucdr_deserialize_endian_array_char+0x4c>
 800d24e:	463e      	mov	r6, r7
 800d250:	e009      	b.n	800d266 <ucdr_deserialize_endian_array_char+0x2a>
 800d252:	68a9      	ldr	r1, [r5, #8]
 800d254:	f00c fc6f 	bl	8019b36 <memcpy>
 800d258:	68ab      	ldr	r3, [r5, #8]
 800d25a:	6928      	ldr	r0, [r5, #16]
 800d25c:	4423      	add	r3, r4
 800d25e:	4420      	add	r0, r4
 800d260:	1b36      	subs	r6, r6, r4
 800d262:	60ab      	str	r3, [r5, #8]
 800d264:	6128      	str	r0, [r5, #16]
 800d266:	2201      	movs	r2, #1
 800d268:	4631      	mov	r1, r6
 800d26a:	4628      	mov	r0, r5
 800d26c:	f001 ff54 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d270:	4604      	mov	r4, r0
 800d272:	1bb8      	subs	r0, r7, r6
 800d274:	4440      	add	r0, r8
 800d276:	4622      	mov	r2, r4
 800d278:	2c00      	cmp	r4, #0
 800d27a:	d1ea      	bne.n	800d252 <ucdr_deserialize_endian_array_char+0x16>
 800d27c:	2301      	movs	r3, #1
 800d27e:	7da8      	ldrb	r0, [r5, #22]
 800d280:	756b      	strb	r3, [r5, #21]
 800d282:	4058      	eors	r0, r3
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	463a      	mov	r2, r7
 800d28a:	68a9      	ldr	r1, [r5, #8]
 800d28c:	4640      	mov	r0, r8
 800d28e:	f00c fc52 	bl	8019b36 <memcpy>
 800d292:	68aa      	ldr	r2, [r5, #8]
 800d294:	692b      	ldr	r3, [r5, #16]
 800d296:	443a      	add	r2, r7
 800d298:	443b      	add	r3, r7
 800d29a:	60aa      	str	r2, [r5, #8]
 800d29c:	612b      	str	r3, [r5, #16]
 800d29e:	e7ed      	b.n	800d27c <ucdr_deserialize_endian_array_char+0x40>

0800d2a0 <ucdr_serialize_array_uint8_t>:
 800d2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a4:	4688      	mov	r8, r1
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	4617      	mov	r7, r2
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	f001 feac 	bl	800f008 <ucdr_check_buffer_available_for>
 800d2b0:	b9e0      	cbnz	r0, 800d2ec <ucdr_serialize_array_uint8_t+0x4c>
 800d2b2:	463e      	mov	r6, r7
 800d2b4:	e009      	b.n	800d2ca <ucdr_serialize_array_uint8_t+0x2a>
 800d2b6:	68a8      	ldr	r0, [r5, #8]
 800d2b8:	f00c fc3d 	bl	8019b36 <memcpy>
 800d2bc:	68aa      	ldr	r2, [r5, #8]
 800d2be:	692b      	ldr	r3, [r5, #16]
 800d2c0:	4422      	add	r2, r4
 800d2c2:	4423      	add	r3, r4
 800d2c4:	1b36      	subs	r6, r6, r4
 800d2c6:	60aa      	str	r2, [r5, #8]
 800d2c8:	612b      	str	r3, [r5, #16]
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f001 ff22 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d2d4:	1bb9      	subs	r1, r7, r6
 800d2d6:	4441      	add	r1, r8
 800d2d8:	4604      	mov	r4, r0
 800d2da:	4602      	mov	r2, r0
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d1ea      	bne.n	800d2b6 <ucdr_serialize_array_uint8_t+0x16>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	7da8      	ldrb	r0, [r5, #22]
 800d2e4:	756b      	strb	r3, [r5, #21]
 800d2e6:	4058      	eors	r0, r3
 800d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ec:	463a      	mov	r2, r7
 800d2ee:	68a8      	ldr	r0, [r5, #8]
 800d2f0:	4641      	mov	r1, r8
 800d2f2:	f00c fc20 	bl	8019b36 <memcpy>
 800d2f6:	68aa      	ldr	r2, [r5, #8]
 800d2f8:	692b      	ldr	r3, [r5, #16]
 800d2fa:	443a      	add	r2, r7
 800d2fc:	443b      	add	r3, r7
 800d2fe:	60aa      	str	r2, [r5, #8]
 800d300:	612b      	str	r3, [r5, #16]
 800d302:	e7ed      	b.n	800d2e0 <ucdr_serialize_array_uint8_t+0x40>

0800d304 <ucdr_serialize_endian_array_uint8_t>:
 800d304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d308:	4619      	mov	r1, r3
 800d30a:	461f      	mov	r7, r3
 800d30c:	4605      	mov	r5, r0
 800d30e:	4690      	mov	r8, r2
 800d310:	f001 fe7a 	bl	800f008 <ucdr_check_buffer_available_for>
 800d314:	b9e0      	cbnz	r0, 800d350 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d316:	463e      	mov	r6, r7
 800d318:	e009      	b.n	800d32e <ucdr_serialize_endian_array_uint8_t+0x2a>
 800d31a:	68a8      	ldr	r0, [r5, #8]
 800d31c:	f00c fc0b 	bl	8019b36 <memcpy>
 800d320:	68ab      	ldr	r3, [r5, #8]
 800d322:	6928      	ldr	r0, [r5, #16]
 800d324:	4423      	add	r3, r4
 800d326:	4420      	add	r0, r4
 800d328:	1b36      	subs	r6, r6, r4
 800d32a:	60ab      	str	r3, [r5, #8]
 800d32c:	6128      	str	r0, [r5, #16]
 800d32e:	4631      	mov	r1, r6
 800d330:	2201      	movs	r2, #1
 800d332:	4628      	mov	r0, r5
 800d334:	f001 fef0 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d338:	1bb9      	subs	r1, r7, r6
 800d33a:	4441      	add	r1, r8
 800d33c:	4604      	mov	r4, r0
 800d33e:	4602      	mov	r2, r0
 800d340:	2800      	cmp	r0, #0
 800d342:	d1ea      	bne.n	800d31a <ucdr_serialize_endian_array_uint8_t+0x16>
 800d344:	2301      	movs	r3, #1
 800d346:	7da8      	ldrb	r0, [r5, #22]
 800d348:	756b      	strb	r3, [r5, #21]
 800d34a:	4058      	eors	r0, r3
 800d34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d350:	463a      	mov	r2, r7
 800d352:	68a8      	ldr	r0, [r5, #8]
 800d354:	4641      	mov	r1, r8
 800d356:	f00c fbee 	bl	8019b36 <memcpy>
 800d35a:	68aa      	ldr	r2, [r5, #8]
 800d35c:	692b      	ldr	r3, [r5, #16]
 800d35e:	443a      	add	r2, r7
 800d360:	443b      	add	r3, r7
 800d362:	60aa      	str	r2, [r5, #8]
 800d364:	612b      	str	r3, [r5, #16]
 800d366:	e7ed      	b.n	800d344 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d368 <ucdr_deserialize_array_uint8_t>:
 800d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d36c:	4688      	mov	r8, r1
 800d36e:	4611      	mov	r1, r2
 800d370:	4617      	mov	r7, r2
 800d372:	4605      	mov	r5, r0
 800d374:	f001 fe48 	bl	800f008 <ucdr_check_buffer_available_for>
 800d378:	b9e0      	cbnz	r0, 800d3b4 <ucdr_deserialize_array_uint8_t+0x4c>
 800d37a:	463e      	mov	r6, r7
 800d37c:	e009      	b.n	800d392 <ucdr_deserialize_array_uint8_t+0x2a>
 800d37e:	68a9      	ldr	r1, [r5, #8]
 800d380:	f00c fbd9 	bl	8019b36 <memcpy>
 800d384:	68aa      	ldr	r2, [r5, #8]
 800d386:	692b      	ldr	r3, [r5, #16]
 800d388:	4422      	add	r2, r4
 800d38a:	4423      	add	r3, r4
 800d38c:	1b36      	subs	r6, r6, r4
 800d38e:	60aa      	str	r2, [r5, #8]
 800d390:	612b      	str	r3, [r5, #16]
 800d392:	2201      	movs	r2, #1
 800d394:	4631      	mov	r1, r6
 800d396:	4628      	mov	r0, r5
 800d398:	f001 febe 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d39c:	4604      	mov	r4, r0
 800d39e:	1bb8      	subs	r0, r7, r6
 800d3a0:	4440      	add	r0, r8
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	2c00      	cmp	r4, #0
 800d3a6:	d1ea      	bne.n	800d37e <ucdr_deserialize_array_uint8_t+0x16>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	7da8      	ldrb	r0, [r5, #22]
 800d3ac:	756b      	strb	r3, [r5, #21]
 800d3ae:	4058      	eors	r0, r3
 800d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b4:	463a      	mov	r2, r7
 800d3b6:	68a9      	ldr	r1, [r5, #8]
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	f00c fbbc 	bl	8019b36 <memcpy>
 800d3be:	68aa      	ldr	r2, [r5, #8]
 800d3c0:	692b      	ldr	r3, [r5, #16]
 800d3c2:	443a      	add	r2, r7
 800d3c4:	443b      	add	r3, r7
 800d3c6:	60aa      	str	r2, [r5, #8]
 800d3c8:	612b      	str	r3, [r5, #16]
 800d3ca:	e7ed      	b.n	800d3a8 <ucdr_deserialize_array_uint8_t+0x40>

0800d3cc <ucdr_deserialize_endian_array_uint8_t>:
 800d3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	461f      	mov	r7, r3
 800d3d4:	4605      	mov	r5, r0
 800d3d6:	4690      	mov	r8, r2
 800d3d8:	f001 fe16 	bl	800f008 <ucdr_check_buffer_available_for>
 800d3dc:	b9e0      	cbnz	r0, 800d418 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800d3de:	463e      	mov	r6, r7
 800d3e0:	e009      	b.n	800d3f6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800d3e2:	68a9      	ldr	r1, [r5, #8]
 800d3e4:	f00c fba7 	bl	8019b36 <memcpy>
 800d3e8:	68ab      	ldr	r3, [r5, #8]
 800d3ea:	6928      	ldr	r0, [r5, #16]
 800d3ec:	4423      	add	r3, r4
 800d3ee:	4420      	add	r0, r4
 800d3f0:	1b36      	subs	r6, r6, r4
 800d3f2:	60ab      	str	r3, [r5, #8]
 800d3f4:	6128      	str	r0, [r5, #16]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	4631      	mov	r1, r6
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f001 fe8c 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d400:	4604      	mov	r4, r0
 800d402:	1bb8      	subs	r0, r7, r6
 800d404:	4440      	add	r0, r8
 800d406:	4622      	mov	r2, r4
 800d408:	2c00      	cmp	r4, #0
 800d40a:	d1ea      	bne.n	800d3e2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d40c:	2301      	movs	r3, #1
 800d40e:	7da8      	ldrb	r0, [r5, #22]
 800d410:	756b      	strb	r3, [r5, #21]
 800d412:	4058      	eors	r0, r3
 800d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d418:	463a      	mov	r2, r7
 800d41a:	68a9      	ldr	r1, [r5, #8]
 800d41c:	4640      	mov	r0, r8
 800d41e:	f00c fb8a 	bl	8019b36 <memcpy>
 800d422:	68aa      	ldr	r2, [r5, #8]
 800d424:	692b      	ldr	r3, [r5, #16]
 800d426:	443a      	add	r2, r7
 800d428:	443b      	add	r3, r7
 800d42a:	60aa      	str	r2, [r5, #8]
 800d42c:	612b      	str	r3, [r5, #16]
 800d42e:	e7ed      	b.n	800d40c <ucdr_deserialize_endian_array_uint8_t+0x40>

0800d430 <ucdr_serialize_array_uint16_t>:
 800d430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d434:	460e      	mov	r6, r1
 800d436:	2102      	movs	r1, #2
 800d438:	4604      	mov	r4, r0
 800d43a:	4617      	mov	r7, r2
 800d43c:	f001 fe44 	bl	800f0c8 <ucdr_buffer_alignment>
 800d440:	4601      	mov	r1, r0
 800d442:	4620      	mov	r0, r4
 800d444:	7d65      	ldrb	r5, [r4, #21]
 800d446:	f001 fe83 	bl	800f150 <ucdr_advance_buffer>
 800d44a:	7d21      	ldrb	r1, [r4, #20]
 800d44c:	7565      	strb	r5, [r4, #21]
 800d44e:	2901      	cmp	r1, #1
 800d450:	d011      	beq.n	800d476 <ucdr_serialize_array_uint16_t+0x46>
 800d452:	b15f      	cbz	r7, 800d46c <ucdr_serialize_array_uint16_t+0x3c>
 800d454:	3e02      	subs	r6, #2
 800d456:	2500      	movs	r5, #0
 800d458:	e000      	b.n	800d45c <ucdr_serialize_array_uint16_t+0x2c>
 800d45a:	7d21      	ldrb	r1, [r4, #20]
 800d45c:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800d460:	4620      	mov	r0, r4
 800d462:	3501      	adds	r5, #1
 800d464:	f000 fabe 	bl	800d9e4 <ucdr_serialize_endian_uint16_t>
 800d468:	42af      	cmp	r7, r5
 800d46a:	d1f6      	bne.n	800d45a <ucdr_serialize_array_uint16_t+0x2a>
 800d46c:	7da0      	ldrb	r0, [r4, #22]
 800d46e:	f080 0001 	eor.w	r0, r0, #1
 800d472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d476:	007f      	lsls	r7, r7, #1
 800d478:	4639      	mov	r1, r7
 800d47a:	4620      	mov	r0, r4
 800d47c:	f001 fdc4 	bl	800f008 <ucdr_check_buffer_available_for>
 800d480:	b9f8      	cbnz	r0, 800d4c2 <ucdr_serialize_array_uint16_t+0x92>
 800d482:	46b8      	mov	r8, r7
 800d484:	e00a      	b.n	800d49c <ucdr_serialize_array_uint16_t+0x6c>
 800d486:	68a0      	ldr	r0, [r4, #8]
 800d488:	f00c fb55 	bl	8019b36 <memcpy>
 800d48c:	68a2      	ldr	r2, [r4, #8]
 800d48e:	6923      	ldr	r3, [r4, #16]
 800d490:	442a      	add	r2, r5
 800d492:	442b      	add	r3, r5
 800d494:	eba8 0805 	sub.w	r8, r8, r5
 800d498:	60a2      	str	r2, [r4, #8]
 800d49a:	6123      	str	r3, [r4, #16]
 800d49c:	4641      	mov	r1, r8
 800d49e:	2202      	movs	r2, #2
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f001 fe39 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d4a6:	eba7 0108 	sub.w	r1, r7, r8
 800d4aa:	4431      	add	r1, r6
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d1e8      	bne.n	800d486 <ucdr_serialize_array_uint16_t+0x56>
 800d4b4:	7da0      	ldrb	r0, [r4, #22]
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	7563      	strb	r3, [r4, #21]
 800d4ba:	f080 0001 	eor.w	r0, r0, #1
 800d4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c2:	463a      	mov	r2, r7
 800d4c4:	68a0      	ldr	r0, [r4, #8]
 800d4c6:	4631      	mov	r1, r6
 800d4c8:	f00c fb35 	bl	8019b36 <memcpy>
 800d4cc:	68a2      	ldr	r2, [r4, #8]
 800d4ce:	6923      	ldr	r3, [r4, #16]
 800d4d0:	443a      	add	r2, r7
 800d4d2:	441f      	add	r7, r3
 800d4d4:	60a2      	str	r2, [r4, #8]
 800d4d6:	6127      	str	r7, [r4, #16]
 800d4d8:	e7ec      	b.n	800d4b4 <ucdr_serialize_array_uint16_t+0x84>
 800d4da:	bf00      	nop

0800d4dc <ucdr_deserialize_array_uint16_t>:
 800d4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e0:	460e      	mov	r6, r1
 800d4e2:	2102      	movs	r1, #2
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	4617      	mov	r7, r2
 800d4e8:	f001 fdee 	bl	800f0c8 <ucdr_buffer_alignment>
 800d4ec:	4601      	mov	r1, r0
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	7d65      	ldrb	r5, [r4, #21]
 800d4f2:	f001 fe2d 	bl	800f150 <ucdr_advance_buffer>
 800d4f6:	7d21      	ldrb	r1, [r4, #20]
 800d4f8:	7565      	strb	r5, [r4, #21]
 800d4fa:	2901      	cmp	r1, #1
 800d4fc:	d011      	beq.n	800d522 <ucdr_deserialize_array_uint16_t+0x46>
 800d4fe:	b15f      	cbz	r7, 800d518 <ucdr_deserialize_array_uint16_t+0x3c>
 800d500:	2500      	movs	r5, #0
 800d502:	e000      	b.n	800d506 <ucdr_deserialize_array_uint16_t+0x2a>
 800d504:	7d21      	ldrb	r1, [r4, #20]
 800d506:	4632      	mov	r2, r6
 800d508:	4620      	mov	r0, r4
 800d50a:	3501      	adds	r5, #1
 800d50c:	f000 fb5e 	bl	800dbcc <ucdr_deserialize_endian_uint16_t>
 800d510:	42af      	cmp	r7, r5
 800d512:	f106 0602 	add.w	r6, r6, #2
 800d516:	d1f5      	bne.n	800d504 <ucdr_deserialize_array_uint16_t+0x28>
 800d518:	7da0      	ldrb	r0, [r4, #22]
 800d51a:	f080 0001 	eor.w	r0, r0, #1
 800d51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d522:	007f      	lsls	r7, r7, #1
 800d524:	4639      	mov	r1, r7
 800d526:	4620      	mov	r0, r4
 800d528:	f001 fd6e 	bl	800f008 <ucdr_check_buffer_available_for>
 800d52c:	b9f8      	cbnz	r0, 800d56e <ucdr_deserialize_array_uint16_t+0x92>
 800d52e:	46b8      	mov	r8, r7
 800d530:	e00a      	b.n	800d548 <ucdr_deserialize_array_uint16_t+0x6c>
 800d532:	68a1      	ldr	r1, [r4, #8]
 800d534:	f00c faff 	bl	8019b36 <memcpy>
 800d538:	68a2      	ldr	r2, [r4, #8]
 800d53a:	6923      	ldr	r3, [r4, #16]
 800d53c:	442a      	add	r2, r5
 800d53e:	442b      	add	r3, r5
 800d540:	eba8 0805 	sub.w	r8, r8, r5
 800d544:	60a2      	str	r2, [r4, #8]
 800d546:	6123      	str	r3, [r4, #16]
 800d548:	2202      	movs	r2, #2
 800d54a:	4641      	mov	r1, r8
 800d54c:	4620      	mov	r0, r4
 800d54e:	f001 fde3 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d552:	4605      	mov	r5, r0
 800d554:	eba7 0008 	sub.w	r0, r7, r8
 800d558:	4430      	add	r0, r6
 800d55a:	462a      	mov	r2, r5
 800d55c:	2d00      	cmp	r5, #0
 800d55e:	d1e8      	bne.n	800d532 <ucdr_deserialize_array_uint16_t+0x56>
 800d560:	7da0      	ldrb	r0, [r4, #22]
 800d562:	2302      	movs	r3, #2
 800d564:	7563      	strb	r3, [r4, #21]
 800d566:	f080 0001 	eor.w	r0, r0, #1
 800d56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d56e:	463a      	mov	r2, r7
 800d570:	68a1      	ldr	r1, [r4, #8]
 800d572:	4630      	mov	r0, r6
 800d574:	f00c fadf 	bl	8019b36 <memcpy>
 800d578:	68a2      	ldr	r2, [r4, #8]
 800d57a:	6923      	ldr	r3, [r4, #16]
 800d57c:	443a      	add	r2, r7
 800d57e:	441f      	add	r7, r3
 800d580:	60a2      	str	r2, [r4, #8]
 800d582:	6127      	str	r7, [r4, #16]
 800d584:	e7ec      	b.n	800d560 <ucdr_deserialize_array_uint16_t+0x84>
 800d586:	bf00      	nop

0800d588 <ucdr_serialize_array_float>:
 800d588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d58c:	460e      	mov	r6, r1
 800d58e:	2104      	movs	r1, #4
 800d590:	4604      	mov	r4, r0
 800d592:	4617      	mov	r7, r2
 800d594:	f001 fd98 	bl	800f0c8 <ucdr_buffer_alignment>
 800d598:	4601      	mov	r1, r0
 800d59a:	4620      	mov	r0, r4
 800d59c:	7d65      	ldrb	r5, [r4, #21]
 800d59e:	f001 fdd7 	bl	800f150 <ucdr_advance_buffer>
 800d5a2:	7d21      	ldrb	r1, [r4, #20]
 800d5a4:	7565      	strb	r5, [r4, #21]
 800d5a6:	2901      	cmp	r1, #1
 800d5a8:	d010      	beq.n	800d5cc <ucdr_serialize_array_float+0x44>
 800d5aa:	b157      	cbz	r7, 800d5c2 <ucdr_serialize_array_float+0x3a>
 800d5ac:	2500      	movs	r5, #0
 800d5ae:	e000      	b.n	800d5b2 <ucdr_serialize_array_float+0x2a>
 800d5b0:	7d21      	ldrb	r1, [r4, #20]
 800d5b2:	ecb6 0a01 	vldmia	r6!, {s0}
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	3501      	adds	r5, #1
 800d5ba:	f001 f8bf 	bl	800e73c <ucdr_serialize_endian_float>
 800d5be:	42af      	cmp	r7, r5
 800d5c0:	d1f6      	bne.n	800d5b0 <ucdr_serialize_array_float+0x28>
 800d5c2:	7da0      	ldrb	r0, [r4, #22]
 800d5c4:	f080 0001 	eor.w	r0, r0, #1
 800d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5cc:	00bf      	lsls	r7, r7, #2
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	f001 fd19 	bl	800f008 <ucdr_check_buffer_available_for>
 800d5d6:	b9f8      	cbnz	r0, 800d618 <ucdr_serialize_array_float+0x90>
 800d5d8:	46b8      	mov	r8, r7
 800d5da:	e00a      	b.n	800d5f2 <ucdr_serialize_array_float+0x6a>
 800d5dc:	68a0      	ldr	r0, [r4, #8]
 800d5de:	f00c faaa 	bl	8019b36 <memcpy>
 800d5e2:	68a2      	ldr	r2, [r4, #8]
 800d5e4:	6923      	ldr	r3, [r4, #16]
 800d5e6:	442a      	add	r2, r5
 800d5e8:	442b      	add	r3, r5
 800d5ea:	eba8 0805 	sub.w	r8, r8, r5
 800d5ee:	60a2      	str	r2, [r4, #8]
 800d5f0:	6123      	str	r3, [r4, #16]
 800d5f2:	4641      	mov	r1, r8
 800d5f4:	2204      	movs	r2, #4
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f001 fd8e 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d5fc:	eba7 0108 	sub.w	r1, r7, r8
 800d600:	4431      	add	r1, r6
 800d602:	4605      	mov	r5, r0
 800d604:	4602      	mov	r2, r0
 800d606:	2800      	cmp	r0, #0
 800d608:	d1e8      	bne.n	800d5dc <ucdr_serialize_array_float+0x54>
 800d60a:	7da0      	ldrb	r0, [r4, #22]
 800d60c:	2304      	movs	r3, #4
 800d60e:	7563      	strb	r3, [r4, #21]
 800d610:	f080 0001 	eor.w	r0, r0, #1
 800d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d618:	463a      	mov	r2, r7
 800d61a:	68a0      	ldr	r0, [r4, #8]
 800d61c:	4631      	mov	r1, r6
 800d61e:	f00c fa8a 	bl	8019b36 <memcpy>
 800d622:	68a2      	ldr	r2, [r4, #8]
 800d624:	6923      	ldr	r3, [r4, #16]
 800d626:	443a      	add	r2, r7
 800d628:	441f      	add	r7, r3
 800d62a:	60a2      	str	r2, [r4, #8]
 800d62c:	6127      	str	r7, [r4, #16]
 800d62e:	e7ec      	b.n	800d60a <ucdr_serialize_array_float+0x82>

0800d630 <ucdr_deserialize_array_float>:
 800d630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d634:	460e      	mov	r6, r1
 800d636:	2104      	movs	r1, #4
 800d638:	4604      	mov	r4, r0
 800d63a:	4617      	mov	r7, r2
 800d63c:	f001 fd44 	bl	800f0c8 <ucdr_buffer_alignment>
 800d640:	4601      	mov	r1, r0
 800d642:	4620      	mov	r0, r4
 800d644:	7d65      	ldrb	r5, [r4, #21]
 800d646:	f001 fd83 	bl	800f150 <ucdr_advance_buffer>
 800d64a:	7d21      	ldrb	r1, [r4, #20]
 800d64c:	7565      	strb	r5, [r4, #21]
 800d64e:	2901      	cmp	r1, #1
 800d650:	d011      	beq.n	800d676 <ucdr_deserialize_array_float+0x46>
 800d652:	b15f      	cbz	r7, 800d66c <ucdr_deserialize_array_float+0x3c>
 800d654:	2500      	movs	r5, #0
 800d656:	e000      	b.n	800d65a <ucdr_deserialize_array_float+0x2a>
 800d658:	7d21      	ldrb	r1, [r4, #20]
 800d65a:	4632      	mov	r2, r6
 800d65c:	4620      	mov	r0, r4
 800d65e:	3501      	adds	r5, #1
 800d660:	f001 f906 	bl	800e870 <ucdr_deserialize_endian_float>
 800d664:	42af      	cmp	r7, r5
 800d666:	f106 0604 	add.w	r6, r6, #4
 800d66a:	d1f5      	bne.n	800d658 <ucdr_deserialize_array_float+0x28>
 800d66c:	7da0      	ldrb	r0, [r4, #22]
 800d66e:	f080 0001 	eor.w	r0, r0, #1
 800d672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d676:	00bf      	lsls	r7, r7, #2
 800d678:	4639      	mov	r1, r7
 800d67a:	4620      	mov	r0, r4
 800d67c:	f001 fcc4 	bl	800f008 <ucdr_check_buffer_available_for>
 800d680:	b9f8      	cbnz	r0, 800d6c2 <ucdr_deserialize_array_float+0x92>
 800d682:	46b8      	mov	r8, r7
 800d684:	e00a      	b.n	800d69c <ucdr_deserialize_array_float+0x6c>
 800d686:	68a1      	ldr	r1, [r4, #8]
 800d688:	f00c fa55 	bl	8019b36 <memcpy>
 800d68c:	68a2      	ldr	r2, [r4, #8]
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	442a      	add	r2, r5
 800d692:	442b      	add	r3, r5
 800d694:	eba8 0805 	sub.w	r8, r8, r5
 800d698:	60a2      	str	r2, [r4, #8]
 800d69a:	6123      	str	r3, [r4, #16]
 800d69c:	2204      	movs	r2, #4
 800d69e:	4641      	mov	r1, r8
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f001 fd39 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d6a6:	4605      	mov	r5, r0
 800d6a8:	eba7 0008 	sub.w	r0, r7, r8
 800d6ac:	4430      	add	r0, r6
 800d6ae:	462a      	mov	r2, r5
 800d6b0:	2d00      	cmp	r5, #0
 800d6b2:	d1e8      	bne.n	800d686 <ucdr_deserialize_array_float+0x56>
 800d6b4:	7da0      	ldrb	r0, [r4, #22]
 800d6b6:	2304      	movs	r3, #4
 800d6b8:	7563      	strb	r3, [r4, #21]
 800d6ba:	f080 0001 	eor.w	r0, r0, #1
 800d6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c2:	463a      	mov	r2, r7
 800d6c4:	68a1      	ldr	r1, [r4, #8]
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f00c fa35 	bl	8019b36 <memcpy>
 800d6cc:	68a2      	ldr	r2, [r4, #8]
 800d6ce:	6923      	ldr	r3, [r4, #16]
 800d6d0:	443a      	add	r2, r7
 800d6d2:	441f      	add	r7, r3
 800d6d4:	60a2      	str	r2, [r4, #8]
 800d6d6:	6127      	str	r7, [r4, #16]
 800d6d8:	e7ec      	b.n	800d6b4 <ucdr_deserialize_array_float+0x84>
 800d6da:	bf00      	nop

0800d6dc <ucdr_serialize_array_double>:
 800d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e0:	460e      	mov	r6, r1
 800d6e2:	2108      	movs	r1, #8
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	4617      	mov	r7, r2
 800d6e8:	f001 fcee 	bl	800f0c8 <ucdr_buffer_alignment>
 800d6ec:	4601      	mov	r1, r0
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	7d65      	ldrb	r5, [r4, #21]
 800d6f2:	f001 fd2d 	bl	800f150 <ucdr_advance_buffer>
 800d6f6:	7d21      	ldrb	r1, [r4, #20]
 800d6f8:	7565      	strb	r5, [r4, #21]
 800d6fa:	2901      	cmp	r1, #1
 800d6fc:	d010      	beq.n	800d720 <ucdr_serialize_array_double+0x44>
 800d6fe:	b157      	cbz	r7, 800d716 <ucdr_serialize_array_double+0x3a>
 800d700:	2500      	movs	r5, #0
 800d702:	e000      	b.n	800d706 <ucdr_serialize_array_double+0x2a>
 800d704:	7d21      	ldrb	r1, [r4, #20]
 800d706:	ecb6 0b02 	vldmia	r6!, {d0}
 800d70a:	4620      	mov	r0, r4
 800d70c:	3501      	adds	r5, #1
 800d70e:	f001 fa15 	bl	800eb3c <ucdr_serialize_endian_double>
 800d712:	42af      	cmp	r7, r5
 800d714:	d1f6      	bne.n	800d704 <ucdr_serialize_array_double+0x28>
 800d716:	7da0      	ldrb	r0, [r4, #22]
 800d718:	f080 0001 	eor.w	r0, r0, #1
 800d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d720:	00ff      	lsls	r7, r7, #3
 800d722:	4639      	mov	r1, r7
 800d724:	4620      	mov	r0, r4
 800d726:	f001 fc6f 	bl	800f008 <ucdr_check_buffer_available_for>
 800d72a:	b9f8      	cbnz	r0, 800d76c <ucdr_serialize_array_double+0x90>
 800d72c:	46b8      	mov	r8, r7
 800d72e:	e00a      	b.n	800d746 <ucdr_serialize_array_double+0x6a>
 800d730:	68a0      	ldr	r0, [r4, #8]
 800d732:	f00c fa00 	bl	8019b36 <memcpy>
 800d736:	68a2      	ldr	r2, [r4, #8]
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	442a      	add	r2, r5
 800d73c:	442b      	add	r3, r5
 800d73e:	eba8 0805 	sub.w	r8, r8, r5
 800d742:	60a2      	str	r2, [r4, #8]
 800d744:	6123      	str	r3, [r4, #16]
 800d746:	4641      	mov	r1, r8
 800d748:	2208      	movs	r2, #8
 800d74a:	4620      	mov	r0, r4
 800d74c:	f001 fce4 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d750:	eba7 0108 	sub.w	r1, r7, r8
 800d754:	4431      	add	r1, r6
 800d756:	4605      	mov	r5, r0
 800d758:	4602      	mov	r2, r0
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d1e8      	bne.n	800d730 <ucdr_serialize_array_double+0x54>
 800d75e:	7da0      	ldrb	r0, [r4, #22]
 800d760:	2308      	movs	r3, #8
 800d762:	7563      	strb	r3, [r4, #21]
 800d764:	f080 0001 	eor.w	r0, r0, #1
 800d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76c:	463a      	mov	r2, r7
 800d76e:	68a0      	ldr	r0, [r4, #8]
 800d770:	4631      	mov	r1, r6
 800d772:	f00c f9e0 	bl	8019b36 <memcpy>
 800d776:	68a2      	ldr	r2, [r4, #8]
 800d778:	6923      	ldr	r3, [r4, #16]
 800d77a:	443a      	add	r2, r7
 800d77c:	441f      	add	r7, r3
 800d77e:	60a2      	str	r2, [r4, #8]
 800d780:	6127      	str	r7, [r4, #16]
 800d782:	e7ec      	b.n	800d75e <ucdr_serialize_array_double+0x82>

0800d784 <ucdr_deserialize_array_double>:
 800d784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d788:	460e      	mov	r6, r1
 800d78a:	2108      	movs	r1, #8
 800d78c:	4604      	mov	r4, r0
 800d78e:	4617      	mov	r7, r2
 800d790:	f001 fc9a 	bl	800f0c8 <ucdr_buffer_alignment>
 800d794:	4601      	mov	r1, r0
 800d796:	4620      	mov	r0, r4
 800d798:	7d65      	ldrb	r5, [r4, #21]
 800d79a:	f001 fcd9 	bl	800f150 <ucdr_advance_buffer>
 800d79e:	7d21      	ldrb	r1, [r4, #20]
 800d7a0:	7565      	strb	r5, [r4, #21]
 800d7a2:	2901      	cmp	r1, #1
 800d7a4:	d011      	beq.n	800d7ca <ucdr_deserialize_array_double+0x46>
 800d7a6:	b15f      	cbz	r7, 800d7c0 <ucdr_deserialize_array_double+0x3c>
 800d7a8:	2500      	movs	r5, #0
 800d7aa:	e000      	b.n	800d7ae <ucdr_deserialize_array_double+0x2a>
 800d7ac:	7d21      	ldrb	r1, [r4, #20]
 800d7ae:	4632      	mov	r2, r6
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	3501      	adds	r5, #1
 800d7b4:	f001 fb5a 	bl	800ee6c <ucdr_deserialize_endian_double>
 800d7b8:	42af      	cmp	r7, r5
 800d7ba:	f106 0608 	add.w	r6, r6, #8
 800d7be:	d1f5      	bne.n	800d7ac <ucdr_deserialize_array_double+0x28>
 800d7c0:	7da0      	ldrb	r0, [r4, #22]
 800d7c2:	f080 0001 	eor.w	r0, r0, #1
 800d7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ca:	00ff      	lsls	r7, r7, #3
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f001 fc1a 	bl	800f008 <ucdr_check_buffer_available_for>
 800d7d4:	b9f8      	cbnz	r0, 800d816 <ucdr_deserialize_array_double+0x92>
 800d7d6:	46b8      	mov	r8, r7
 800d7d8:	e00a      	b.n	800d7f0 <ucdr_deserialize_array_double+0x6c>
 800d7da:	68a1      	ldr	r1, [r4, #8]
 800d7dc:	f00c f9ab 	bl	8019b36 <memcpy>
 800d7e0:	68a2      	ldr	r2, [r4, #8]
 800d7e2:	6923      	ldr	r3, [r4, #16]
 800d7e4:	442a      	add	r2, r5
 800d7e6:	442b      	add	r3, r5
 800d7e8:	eba8 0805 	sub.w	r8, r8, r5
 800d7ec:	60a2      	str	r2, [r4, #8]
 800d7ee:	6123      	str	r3, [r4, #16]
 800d7f0:	2208      	movs	r2, #8
 800d7f2:	4641      	mov	r1, r8
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f001 fc8f 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	eba7 0008 	sub.w	r0, r7, r8
 800d800:	4430      	add	r0, r6
 800d802:	462a      	mov	r2, r5
 800d804:	2d00      	cmp	r5, #0
 800d806:	d1e8      	bne.n	800d7da <ucdr_deserialize_array_double+0x56>
 800d808:	7da0      	ldrb	r0, [r4, #22]
 800d80a:	2308      	movs	r3, #8
 800d80c:	7563      	strb	r3, [r4, #21]
 800d80e:	f080 0001 	eor.w	r0, r0, #1
 800d812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d816:	463a      	mov	r2, r7
 800d818:	68a1      	ldr	r1, [r4, #8]
 800d81a:	4630      	mov	r0, r6
 800d81c:	f00c f98b 	bl	8019b36 <memcpy>
 800d820:	68a2      	ldr	r2, [r4, #8]
 800d822:	6923      	ldr	r3, [r4, #16]
 800d824:	443a      	add	r2, r7
 800d826:	441f      	add	r7, r3
 800d828:	60a2      	str	r2, [r4, #8]
 800d82a:	6127      	str	r7, [r4, #16]
 800d82c:	e7ec      	b.n	800d808 <ucdr_deserialize_array_double+0x84>
 800d82e:	bf00      	nop

0800d830 <ucdr_serialize_bool>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	460d      	mov	r5, r1
 800d834:	2101      	movs	r1, #1
 800d836:	4604      	mov	r4, r0
 800d838:	f001 fbf2 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800d83c:	b148      	cbz	r0, 800d852 <ucdr_serialize_bool+0x22>
 800d83e:	68a3      	ldr	r3, [r4, #8]
 800d840:	701d      	strb	r5, [r3, #0]
 800d842:	68a2      	ldr	r2, [r4, #8]
 800d844:	6923      	ldr	r3, [r4, #16]
 800d846:	2101      	movs	r1, #1
 800d848:	440a      	add	r2, r1
 800d84a:	440b      	add	r3, r1
 800d84c:	60a2      	str	r2, [r4, #8]
 800d84e:	6123      	str	r3, [r4, #16]
 800d850:	7561      	strb	r1, [r4, #21]
 800d852:	7da0      	ldrb	r0, [r4, #22]
 800d854:	f080 0001 	eor.w	r0, r0, #1
 800d858:	bd38      	pop	{r3, r4, r5, pc}
 800d85a:	bf00      	nop

0800d85c <ucdr_deserialize_bool>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	460d      	mov	r5, r1
 800d860:	2101      	movs	r1, #1
 800d862:	4604      	mov	r4, r0
 800d864:	f001 fbdc 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800d868:	b160      	cbz	r0, 800d884 <ucdr_deserialize_bool+0x28>
 800d86a:	68a2      	ldr	r2, [r4, #8]
 800d86c:	6923      	ldr	r3, [r4, #16]
 800d86e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d872:	3900      	subs	r1, #0
 800d874:	bf18      	it	ne
 800d876:	2101      	movne	r1, #1
 800d878:	7029      	strb	r1, [r5, #0]
 800d87a:	3301      	adds	r3, #1
 800d87c:	2101      	movs	r1, #1
 800d87e:	60a2      	str	r2, [r4, #8]
 800d880:	6123      	str	r3, [r4, #16]
 800d882:	7561      	strb	r1, [r4, #21]
 800d884:	7da0      	ldrb	r0, [r4, #22]
 800d886:	f080 0001 	eor.w	r0, r0, #1
 800d88a:	bd38      	pop	{r3, r4, r5, pc}

0800d88c <ucdr_serialize_uint8_t>:
 800d88c:	b538      	push	{r3, r4, r5, lr}
 800d88e:	460d      	mov	r5, r1
 800d890:	2101      	movs	r1, #1
 800d892:	4604      	mov	r4, r0
 800d894:	f001 fbc4 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800d898:	b148      	cbz	r0, 800d8ae <ucdr_serialize_uint8_t+0x22>
 800d89a:	68a3      	ldr	r3, [r4, #8]
 800d89c:	701d      	strb	r5, [r3, #0]
 800d89e:	68a2      	ldr	r2, [r4, #8]
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	2101      	movs	r1, #1
 800d8a4:	440a      	add	r2, r1
 800d8a6:	440b      	add	r3, r1
 800d8a8:	60a2      	str	r2, [r4, #8]
 800d8aa:	6123      	str	r3, [r4, #16]
 800d8ac:	7561      	strb	r1, [r4, #21]
 800d8ae:	7da0      	ldrb	r0, [r4, #22]
 800d8b0:	f080 0001 	eor.w	r0, r0, #1
 800d8b4:	bd38      	pop	{r3, r4, r5, pc}
 800d8b6:	bf00      	nop

0800d8b8 <ucdr_deserialize_uint8_t>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	2101      	movs	r1, #1
 800d8be:	4604      	mov	r4, r0
 800d8c0:	f001 fbae 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800d8c4:	b150      	cbz	r0, 800d8dc <ucdr_deserialize_uint8_t+0x24>
 800d8c6:	68a3      	ldr	r3, [r4, #8]
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	702b      	strb	r3, [r5, #0]
 800d8cc:	68a2      	ldr	r2, [r4, #8]
 800d8ce:	6923      	ldr	r3, [r4, #16]
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	440a      	add	r2, r1
 800d8d4:	440b      	add	r3, r1
 800d8d6:	60a2      	str	r2, [r4, #8]
 800d8d8:	6123      	str	r3, [r4, #16]
 800d8da:	7561      	strb	r1, [r4, #21]
 800d8dc:	7da0      	ldrb	r0, [r4, #22]
 800d8de:	f080 0001 	eor.w	r0, r0, #1
 800d8e2:	bd38      	pop	{r3, r4, r5, pc}

0800d8e4 <ucdr_serialize_uint16_t>:
 800d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e8:	b082      	sub	sp, #8
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	2102      	movs	r1, #2
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d8f4:	f001 fbe8 	bl	800f0c8 <ucdr_buffer_alignment>
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	7d67      	ldrb	r7, [r4, #21]
 800d8fe:	f001 fc27 	bl	800f150 <ucdr_advance_buffer>
 800d902:	2102      	movs	r1, #2
 800d904:	4620      	mov	r0, r4
 800d906:	f001 fb7f 	bl	800f008 <ucdr_check_buffer_available_for>
 800d90a:	bb78      	cbnz	r0, 800d96c <ucdr_serialize_uint16_t+0x88>
 800d90c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d910:	42ab      	cmp	r3, r5
 800d912:	d926      	bls.n	800d962 <ucdr_serialize_uint16_t+0x7e>
 800d914:	1b5e      	subs	r6, r3, r5
 800d916:	60a3      	str	r3, [r4, #8]
 800d918:	6923      	ldr	r3, [r4, #16]
 800d91a:	f1c6 0802 	rsb	r8, r6, #2
 800d91e:	4433      	add	r3, r6
 800d920:	6123      	str	r3, [r4, #16]
 800d922:	4641      	mov	r1, r8
 800d924:	4620      	mov	r0, r4
 800d926:	f001 fb7b 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d03b      	beq.n	800d9a6 <ucdr_serialize_uint16_t+0xc2>
 800d92e:	7d23      	ldrb	r3, [r4, #20]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d04a      	beq.n	800d9ca <ucdr_serialize_uint16_t+0xe6>
 800d934:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d938:	702b      	strb	r3, [r5, #0]
 800d93a:	2e00      	cmp	r6, #0
 800d93c:	d040      	beq.n	800d9c0 <ucdr_serialize_uint16_t+0xdc>
 800d93e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d942:	706b      	strb	r3, [r5, #1]
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	68a2      	ldr	r2, [r4, #8]
 800d948:	7da0      	ldrb	r0, [r4, #22]
 800d94a:	3302      	adds	r3, #2
 800d94c:	1b9e      	subs	r6, r3, r6
 800d94e:	4442      	add	r2, r8
 800d950:	2302      	movs	r3, #2
 800d952:	f080 0001 	eor.w	r0, r0, #1
 800d956:	60a2      	str	r2, [r4, #8]
 800d958:	6126      	str	r6, [r4, #16]
 800d95a:	7563      	strb	r3, [r4, #21]
 800d95c:	b002      	add	sp, #8
 800d95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d962:	2102      	movs	r1, #2
 800d964:	4620      	mov	r0, r4
 800d966:	f001 fb5b 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800d96a:	b190      	cbz	r0, 800d992 <ucdr_serialize_uint16_t+0xae>
 800d96c:	7d23      	ldrb	r3, [r4, #20]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	68a3      	ldr	r3, [r4, #8]
 800d972:	d014      	beq.n	800d99e <ucdr_serialize_uint16_t+0xba>
 800d974:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d978:	701a      	strb	r2, [r3, #0]
 800d97a:	68a3      	ldr	r3, [r4, #8]
 800d97c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d980:	705a      	strb	r2, [r3, #1]
 800d982:	68a2      	ldr	r2, [r4, #8]
 800d984:	6923      	ldr	r3, [r4, #16]
 800d986:	3202      	adds	r2, #2
 800d988:	3302      	adds	r3, #2
 800d98a:	2102      	movs	r1, #2
 800d98c:	60a2      	str	r2, [r4, #8]
 800d98e:	6123      	str	r3, [r4, #16]
 800d990:	7561      	strb	r1, [r4, #21]
 800d992:	7da0      	ldrb	r0, [r4, #22]
 800d994:	f080 0001 	eor.w	r0, r0, #1
 800d998:	b002      	add	sp, #8
 800d99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d99e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d9a2:	801a      	strh	r2, [r3, #0]
 800d9a4:	e7ed      	b.n	800d982 <ucdr_serialize_uint16_t+0x9e>
 800d9a6:	68a2      	ldr	r2, [r4, #8]
 800d9a8:	6923      	ldr	r3, [r4, #16]
 800d9aa:	7da0      	ldrb	r0, [r4, #22]
 800d9ac:	7567      	strb	r7, [r4, #21]
 800d9ae:	1b92      	subs	r2, r2, r6
 800d9b0:	1b9b      	subs	r3, r3, r6
 800d9b2:	f080 0001 	eor.w	r0, r0, #1
 800d9b6:	60a2      	str	r2, [r4, #8]
 800d9b8:	6123      	str	r3, [r4, #16]
 800d9ba:	b002      	add	sp, #8
 800d9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c0:	68a3      	ldr	r3, [r4, #8]
 800d9c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9c6:	701a      	strb	r2, [r3, #0]
 800d9c8:	e7bc      	b.n	800d944 <ucdr_serialize_uint16_t+0x60>
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f10d 0506 	add.w	r5, sp, #6
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	f00c f8af 	bl	8019b36 <memcpy>
 800d9d8:	68a0      	ldr	r0, [r4, #8]
 800d9da:	4642      	mov	r2, r8
 800d9dc:	19a9      	adds	r1, r5, r6
 800d9de:	f00c f8aa 	bl	8019b36 <memcpy>
 800d9e2:	e7af      	b.n	800d944 <ucdr_serialize_uint16_t+0x60>

0800d9e4 <ucdr_serialize_endian_uint16_t>:
 800d9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9e8:	b083      	sub	sp, #12
 800d9ea:	460d      	mov	r5, r1
 800d9ec:	2102      	movs	r1, #2
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d9f4:	f001 fb68 	bl	800f0c8 <ucdr_buffer_alignment>
 800d9f8:	4601      	mov	r1, r0
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da00:	f001 fba6 	bl	800f150 <ucdr_advance_buffer>
 800da04:	2102      	movs	r1, #2
 800da06:	4620      	mov	r0, r4
 800da08:	f001 fafe 	bl	800f008 <ucdr_check_buffer_available_for>
 800da0c:	bb70      	cbnz	r0, 800da6c <ucdr_serialize_endian_uint16_t+0x88>
 800da0e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800da12:	42be      	cmp	r6, r7
 800da14:	d925      	bls.n	800da62 <ucdr_serialize_endian_uint16_t+0x7e>
 800da16:	6923      	ldr	r3, [r4, #16]
 800da18:	60a6      	str	r6, [r4, #8]
 800da1a:	1bf6      	subs	r6, r6, r7
 800da1c:	4433      	add	r3, r6
 800da1e:	f1c6 0902 	rsb	r9, r6, #2
 800da22:	6123      	str	r3, [r4, #16]
 800da24:	4649      	mov	r1, r9
 800da26:	4620      	mov	r0, r4
 800da28:	f001 fafa 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d039      	beq.n	800daa4 <ucdr_serialize_endian_uint16_t+0xc0>
 800da30:	2d01      	cmp	r5, #1
 800da32:	d04a      	beq.n	800daca <ucdr_serialize_endian_uint16_t+0xe6>
 800da34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da38:	703b      	strb	r3, [r7, #0]
 800da3a:	2e00      	cmp	r6, #0
 800da3c:	d040      	beq.n	800dac0 <ucdr_serialize_endian_uint16_t+0xdc>
 800da3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da42:	707b      	strb	r3, [r7, #1]
 800da44:	6923      	ldr	r3, [r4, #16]
 800da46:	68a2      	ldr	r2, [r4, #8]
 800da48:	7da0      	ldrb	r0, [r4, #22]
 800da4a:	3302      	adds	r3, #2
 800da4c:	444a      	add	r2, r9
 800da4e:	1b9b      	subs	r3, r3, r6
 800da50:	2102      	movs	r1, #2
 800da52:	f080 0001 	eor.w	r0, r0, #1
 800da56:	60a2      	str	r2, [r4, #8]
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	7561      	strb	r1, [r4, #21]
 800da5c:	b003      	add	sp, #12
 800da5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da62:	2102      	movs	r1, #2
 800da64:	4620      	mov	r0, r4
 800da66:	f001 fadb 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800da6a:	b188      	cbz	r0, 800da90 <ucdr_serialize_endian_uint16_t+0xac>
 800da6c:	2d01      	cmp	r5, #1
 800da6e:	68a3      	ldr	r3, [r4, #8]
 800da70:	d014      	beq.n	800da9c <ucdr_serialize_endian_uint16_t+0xb8>
 800da72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da76:	701a      	strb	r2, [r3, #0]
 800da78:	68a3      	ldr	r3, [r4, #8]
 800da7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da7e:	705a      	strb	r2, [r3, #1]
 800da80:	68a2      	ldr	r2, [r4, #8]
 800da82:	6923      	ldr	r3, [r4, #16]
 800da84:	3202      	adds	r2, #2
 800da86:	3302      	adds	r3, #2
 800da88:	2102      	movs	r1, #2
 800da8a:	60a2      	str	r2, [r4, #8]
 800da8c:	6123      	str	r3, [r4, #16]
 800da8e:	7561      	strb	r1, [r4, #21]
 800da90:	7da0      	ldrb	r0, [r4, #22]
 800da92:	f080 0001 	eor.w	r0, r0, #1
 800da96:	b003      	add	sp, #12
 800da98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800daa0:	801a      	strh	r2, [r3, #0]
 800daa2:	e7ed      	b.n	800da80 <ucdr_serialize_endian_uint16_t+0x9c>
 800daa4:	68a2      	ldr	r2, [r4, #8]
 800daa6:	6923      	ldr	r3, [r4, #16]
 800daa8:	7da0      	ldrb	r0, [r4, #22]
 800daaa:	f884 8015 	strb.w	r8, [r4, #21]
 800daae:	1b92      	subs	r2, r2, r6
 800dab0:	1b9b      	subs	r3, r3, r6
 800dab2:	f080 0001 	eor.w	r0, r0, #1
 800dab6:	60a2      	str	r2, [r4, #8]
 800dab8:	6123      	str	r3, [r4, #16]
 800daba:	b003      	add	sp, #12
 800dabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dac0:	68a3      	ldr	r3, [r4, #8]
 800dac2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dac6:	701a      	strb	r2, [r3, #0]
 800dac8:	e7bc      	b.n	800da44 <ucdr_serialize_endian_uint16_t+0x60>
 800daca:	f10d 0506 	add.w	r5, sp, #6
 800dace:	4629      	mov	r1, r5
 800dad0:	4632      	mov	r2, r6
 800dad2:	4638      	mov	r0, r7
 800dad4:	f00c f82f 	bl	8019b36 <memcpy>
 800dad8:	68a0      	ldr	r0, [r4, #8]
 800dada:	464a      	mov	r2, r9
 800dadc:	19a9      	adds	r1, r5, r6
 800dade:	f00c f82a 	bl	8019b36 <memcpy>
 800dae2:	e7af      	b.n	800da44 <ucdr_serialize_endian_uint16_t+0x60>

0800dae4 <ucdr_deserialize_uint16_t>:
 800dae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae8:	460d      	mov	r5, r1
 800daea:	2102      	movs	r1, #2
 800daec:	4604      	mov	r4, r0
 800daee:	f001 faeb 	bl	800f0c8 <ucdr_buffer_alignment>
 800daf2:	4601      	mov	r1, r0
 800daf4:	4620      	mov	r0, r4
 800daf6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dafa:	f001 fb29 	bl	800f150 <ucdr_advance_buffer>
 800dafe:	2102      	movs	r1, #2
 800db00:	4620      	mov	r0, r4
 800db02:	f001 fa81 	bl	800f008 <ucdr_check_buffer_available_for>
 800db06:	bb60      	cbnz	r0, 800db62 <ucdr_deserialize_uint16_t+0x7e>
 800db08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800db0c:	42be      	cmp	r6, r7
 800db0e:	d923      	bls.n	800db58 <ucdr_deserialize_uint16_t+0x74>
 800db10:	6923      	ldr	r3, [r4, #16]
 800db12:	60a6      	str	r6, [r4, #8]
 800db14:	1bf6      	subs	r6, r6, r7
 800db16:	4433      	add	r3, r6
 800db18:	f1c6 0902 	rsb	r9, r6, #2
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	4649      	mov	r1, r9
 800db20:	4620      	mov	r0, r4
 800db22:	f001 fa7d 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800db26:	2800      	cmp	r0, #0
 800db28:	d034      	beq.n	800db94 <ucdr_deserialize_uint16_t+0xb0>
 800db2a:	7d23      	ldrb	r3, [r4, #20]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d042      	beq.n	800dbb6 <ucdr_deserialize_uint16_t+0xd2>
 800db30:	787b      	ldrb	r3, [r7, #1]
 800db32:	702b      	strb	r3, [r5, #0]
 800db34:	2e00      	cmp	r6, #0
 800db36:	d03a      	beq.n	800dbae <ucdr_deserialize_uint16_t+0xca>
 800db38:	783b      	ldrb	r3, [r7, #0]
 800db3a:	706b      	strb	r3, [r5, #1]
 800db3c:	6923      	ldr	r3, [r4, #16]
 800db3e:	68a2      	ldr	r2, [r4, #8]
 800db40:	7da0      	ldrb	r0, [r4, #22]
 800db42:	2102      	movs	r1, #2
 800db44:	3302      	adds	r3, #2
 800db46:	444a      	add	r2, r9
 800db48:	1b9b      	subs	r3, r3, r6
 800db4a:	7561      	strb	r1, [r4, #21]
 800db4c:	60a2      	str	r2, [r4, #8]
 800db4e:	6123      	str	r3, [r4, #16]
 800db50:	f080 0001 	eor.w	r0, r0, #1
 800db54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db58:	2102      	movs	r1, #2
 800db5a:	4620      	mov	r0, r4
 800db5c:	f001 fa60 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800db60:	b180      	cbz	r0, 800db84 <ucdr_deserialize_uint16_t+0xa0>
 800db62:	7d23      	ldrb	r3, [r4, #20]
 800db64:	2b01      	cmp	r3, #1
 800db66:	68a3      	ldr	r3, [r4, #8]
 800db68:	d011      	beq.n	800db8e <ucdr_deserialize_uint16_t+0xaa>
 800db6a:	785b      	ldrb	r3, [r3, #1]
 800db6c:	702b      	strb	r3, [r5, #0]
 800db6e:	68a3      	ldr	r3, [r4, #8]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	706b      	strb	r3, [r5, #1]
 800db74:	68a2      	ldr	r2, [r4, #8]
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	3202      	adds	r2, #2
 800db7a:	3302      	adds	r3, #2
 800db7c:	2102      	movs	r1, #2
 800db7e:	60a2      	str	r2, [r4, #8]
 800db80:	6123      	str	r3, [r4, #16]
 800db82:	7561      	strb	r1, [r4, #21]
 800db84:	7da0      	ldrb	r0, [r4, #22]
 800db86:	f080 0001 	eor.w	r0, r0, #1
 800db8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	802b      	strh	r3, [r5, #0]
 800db92:	e7ef      	b.n	800db74 <ucdr_deserialize_uint16_t+0x90>
 800db94:	68a2      	ldr	r2, [r4, #8]
 800db96:	6923      	ldr	r3, [r4, #16]
 800db98:	7da0      	ldrb	r0, [r4, #22]
 800db9a:	f884 8015 	strb.w	r8, [r4, #21]
 800db9e:	1b92      	subs	r2, r2, r6
 800dba0:	1b9b      	subs	r3, r3, r6
 800dba2:	60a2      	str	r2, [r4, #8]
 800dba4:	6123      	str	r3, [r4, #16]
 800dba6:	f080 0001 	eor.w	r0, r0, #1
 800dbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	706b      	strb	r3, [r5, #1]
 800dbb4:	e7c2      	b.n	800db3c <ucdr_deserialize_uint16_t+0x58>
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	4632      	mov	r2, r6
 800dbba:	4628      	mov	r0, r5
 800dbbc:	f00b ffbb 	bl	8019b36 <memcpy>
 800dbc0:	68a1      	ldr	r1, [r4, #8]
 800dbc2:	464a      	mov	r2, r9
 800dbc4:	19a8      	adds	r0, r5, r6
 800dbc6:	f00b ffb6 	bl	8019b36 <memcpy>
 800dbca:	e7b7      	b.n	800db3c <ucdr_deserialize_uint16_t+0x58>

0800dbcc <ucdr_deserialize_endian_uint16_t>:
 800dbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd0:	460e      	mov	r6, r1
 800dbd2:	2102      	movs	r1, #2
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	4615      	mov	r5, r2
 800dbd8:	f001 fa76 	bl	800f0c8 <ucdr_buffer_alignment>
 800dbdc:	4601      	mov	r1, r0
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dbe4:	f001 fab4 	bl	800f150 <ucdr_advance_buffer>
 800dbe8:	2102      	movs	r1, #2
 800dbea:	4620      	mov	r0, r4
 800dbec:	f001 fa0c 	bl	800f008 <ucdr_check_buffer_available_for>
 800dbf0:	bb70      	cbnz	r0, 800dc50 <ucdr_deserialize_endian_uint16_t+0x84>
 800dbf2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800dbf6:	4547      	cmp	r7, r8
 800dbf8:	d925      	bls.n	800dc46 <ucdr_deserialize_endian_uint16_t+0x7a>
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	60a7      	str	r7, [r4, #8]
 800dbfe:	eba7 0708 	sub.w	r7, r7, r8
 800dc02:	443b      	add	r3, r7
 800dc04:	f1c7 0a02 	rsb	sl, r7, #2
 800dc08:	6123      	str	r3, [r4, #16]
 800dc0a:	4651      	mov	r1, sl
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	f001 fa07 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d034      	beq.n	800dc80 <ucdr_deserialize_endian_uint16_t+0xb4>
 800dc16:	2e01      	cmp	r6, #1
 800dc18:	d043      	beq.n	800dca2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800dc1a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dc1e:	702b      	strb	r3, [r5, #0]
 800dc20:	2f00      	cmp	r7, #0
 800dc22:	d03a      	beq.n	800dc9a <ucdr_deserialize_endian_uint16_t+0xce>
 800dc24:	f898 3000 	ldrb.w	r3, [r8]
 800dc28:	706b      	strb	r3, [r5, #1]
 800dc2a:	6923      	ldr	r3, [r4, #16]
 800dc2c:	68a2      	ldr	r2, [r4, #8]
 800dc2e:	7da0      	ldrb	r0, [r4, #22]
 800dc30:	2102      	movs	r1, #2
 800dc32:	3302      	adds	r3, #2
 800dc34:	4452      	add	r2, sl
 800dc36:	1bdb      	subs	r3, r3, r7
 800dc38:	7561      	strb	r1, [r4, #21]
 800dc3a:	60a2      	str	r2, [r4, #8]
 800dc3c:	6123      	str	r3, [r4, #16]
 800dc3e:	f080 0001 	eor.w	r0, r0, #1
 800dc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc46:	2102      	movs	r1, #2
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f001 f9e9 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800dc4e:	b178      	cbz	r0, 800dc70 <ucdr_deserialize_endian_uint16_t+0xa4>
 800dc50:	2e01      	cmp	r6, #1
 800dc52:	68a3      	ldr	r3, [r4, #8]
 800dc54:	d011      	beq.n	800dc7a <ucdr_deserialize_endian_uint16_t+0xae>
 800dc56:	785b      	ldrb	r3, [r3, #1]
 800dc58:	702b      	strb	r3, [r5, #0]
 800dc5a:	68a3      	ldr	r3, [r4, #8]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	706b      	strb	r3, [r5, #1]
 800dc60:	68a2      	ldr	r2, [r4, #8]
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	3202      	adds	r2, #2
 800dc66:	3302      	adds	r3, #2
 800dc68:	2102      	movs	r1, #2
 800dc6a:	60a2      	str	r2, [r4, #8]
 800dc6c:	6123      	str	r3, [r4, #16]
 800dc6e:	7561      	strb	r1, [r4, #21]
 800dc70:	7da0      	ldrb	r0, [r4, #22]
 800dc72:	f080 0001 	eor.w	r0, r0, #1
 800dc76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7a:	881b      	ldrh	r3, [r3, #0]
 800dc7c:	802b      	strh	r3, [r5, #0]
 800dc7e:	e7ef      	b.n	800dc60 <ucdr_deserialize_endian_uint16_t+0x94>
 800dc80:	68a2      	ldr	r2, [r4, #8]
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	7da0      	ldrb	r0, [r4, #22]
 800dc86:	f884 9015 	strb.w	r9, [r4, #21]
 800dc8a:	1bd2      	subs	r2, r2, r7
 800dc8c:	1bdb      	subs	r3, r3, r7
 800dc8e:	60a2      	str	r2, [r4, #8]
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	f080 0001 	eor.w	r0, r0, #1
 800dc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc9a:	68a3      	ldr	r3, [r4, #8]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	706b      	strb	r3, [r5, #1]
 800dca0:	e7c3      	b.n	800dc2a <ucdr_deserialize_endian_uint16_t+0x5e>
 800dca2:	4641      	mov	r1, r8
 800dca4:	463a      	mov	r2, r7
 800dca6:	4628      	mov	r0, r5
 800dca8:	f00b ff45 	bl	8019b36 <memcpy>
 800dcac:	68a1      	ldr	r1, [r4, #8]
 800dcae:	4652      	mov	r2, sl
 800dcb0:	19e8      	adds	r0, r5, r7
 800dcb2:	f00b ff40 	bl	8019b36 <memcpy>
 800dcb6:	e7b8      	b.n	800dc2a <ucdr_deserialize_endian_uint16_t+0x5e>

0800dcb8 <ucdr_serialize_uint32_t>:
 800dcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcbc:	b082      	sub	sp, #8
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	9101      	str	r1, [sp, #4]
 800dcc2:	2104      	movs	r1, #4
 800dcc4:	f001 fa00 	bl	800f0c8 <ucdr_buffer_alignment>
 800dcc8:	4601      	mov	r1, r0
 800dcca:	4620      	mov	r0, r4
 800dccc:	7d67      	ldrb	r7, [r4, #21]
 800dcce:	f001 fa3f 	bl	800f150 <ucdr_advance_buffer>
 800dcd2:	2104      	movs	r1, #4
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f001 f997 	bl	800f008 <ucdr_check_buffer_available_for>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d139      	bne.n	800dd52 <ucdr_serialize_uint32_t+0x9a>
 800dcde:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dce2:	42ab      	cmp	r3, r5
 800dce4:	d930      	bls.n	800dd48 <ucdr_serialize_uint32_t+0x90>
 800dce6:	1b5e      	subs	r6, r3, r5
 800dce8:	60a3      	str	r3, [r4, #8]
 800dcea:	6923      	ldr	r3, [r4, #16]
 800dcec:	f1c6 0804 	rsb	r8, r6, #4
 800dcf0:	4433      	add	r3, r6
 800dcf2:	6123      	str	r3, [r4, #16]
 800dcf4:	4641      	mov	r1, r8
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f001 f992 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d04c      	beq.n	800dd9a <ucdr_serialize_uint32_t+0xe2>
 800dd00:	7d23      	ldrb	r3, [r4, #20]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d063      	beq.n	800ddce <ucdr_serialize_uint32_t+0x116>
 800dd06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd0a:	702b      	strb	r3, [r5, #0]
 800dd0c:	2e00      	cmp	r6, #0
 800dd0e:	d051      	beq.n	800ddb4 <ucdr_serialize_uint32_t+0xfc>
 800dd10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd14:	706b      	strb	r3, [r5, #1]
 800dd16:	2e01      	cmp	r6, #1
 800dd18:	d050      	beq.n	800ddbc <ucdr_serialize_uint32_t+0x104>
 800dd1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dd1e:	70ab      	strb	r3, [r5, #2]
 800dd20:	2e02      	cmp	r6, #2
 800dd22:	d04f      	beq.n	800ddc4 <ucdr_serialize_uint32_t+0x10c>
 800dd24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd28:	70eb      	strb	r3, [r5, #3]
 800dd2a:	6923      	ldr	r3, [r4, #16]
 800dd2c:	68a2      	ldr	r2, [r4, #8]
 800dd2e:	7da0      	ldrb	r0, [r4, #22]
 800dd30:	3304      	adds	r3, #4
 800dd32:	1b9e      	subs	r6, r3, r6
 800dd34:	4442      	add	r2, r8
 800dd36:	2304      	movs	r3, #4
 800dd38:	f080 0001 	eor.w	r0, r0, #1
 800dd3c:	60a2      	str	r2, [r4, #8]
 800dd3e:	6126      	str	r6, [r4, #16]
 800dd40:	7563      	strb	r3, [r4, #21]
 800dd42:	b002      	add	sp, #8
 800dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd48:	2104      	movs	r1, #4
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f001 f968 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800dd50:	b1d0      	cbz	r0, 800dd88 <ucdr_serialize_uint32_t+0xd0>
 800dd52:	7d23      	ldrb	r3, [r4, #20]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	68a3      	ldr	r3, [r4, #8]
 800dd58:	d01c      	beq.n	800dd94 <ucdr_serialize_uint32_t+0xdc>
 800dd5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd5e:	701a      	strb	r2, [r3, #0]
 800dd60:	68a3      	ldr	r3, [r4, #8]
 800dd62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd66:	705a      	strb	r2, [r3, #1]
 800dd68:	68a3      	ldr	r3, [r4, #8]
 800dd6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd6e:	709a      	strb	r2, [r3, #2]
 800dd70:	68a3      	ldr	r3, [r4, #8]
 800dd72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd76:	70da      	strb	r2, [r3, #3]
 800dd78:	68a2      	ldr	r2, [r4, #8]
 800dd7a:	6923      	ldr	r3, [r4, #16]
 800dd7c:	3204      	adds	r2, #4
 800dd7e:	3304      	adds	r3, #4
 800dd80:	2104      	movs	r1, #4
 800dd82:	60a2      	str	r2, [r4, #8]
 800dd84:	6123      	str	r3, [r4, #16]
 800dd86:	7561      	strb	r1, [r4, #21]
 800dd88:	7da0      	ldrb	r0, [r4, #22]
 800dd8a:	f080 0001 	eor.w	r0, r0, #1
 800dd8e:	b002      	add	sp, #8
 800dd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd94:	9a01      	ldr	r2, [sp, #4]
 800dd96:	601a      	str	r2, [r3, #0]
 800dd98:	e7ee      	b.n	800dd78 <ucdr_serialize_uint32_t+0xc0>
 800dd9a:	68a2      	ldr	r2, [r4, #8]
 800dd9c:	6923      	ldr	r3, [r4, #16]
 800dd9e:	7da0      	ldrb	r0, [r4, #22]
 800dda0:	7567      	strb	r7, [r4, #21]
 800dda2:	1b92      	subs	r2, r2, r6
 800dda4:	1b9b      	subs	r3, r3, r6
 800dda6:	f080 0001 	eor.w	r0, r0, #1
 800ddaa:	60a2      	str	r2, [r4, #8]
 800ddac:	6123      	str	r3, [r4, #16]
 800ddae:	b002      	add	sp, #8
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb4:	68a3      	ldr	r3, [r4, #8]
 800ddb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	68a3      	ldr	r3, [r4, #8]
 800ddbe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddc2:	701a      	strb	r2, [r3, #0]
 800ddc4:	68a3      	ldr	r3, [r4, #8]
 800ddc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddca:	701a      	strb	r2, [r3, #0]
 800ddcc:	e7ad      	b.n	800dd2a <ucdr_serialize_uint32_t+0x72>
 800ddce:	4628      	mov	r0, r5
 800ddd0:	ad01      	add	r5, sp, #4
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	4632      	mov	r2, r6
 800ddd6:	f00b feae 	bl	8019b36 <memcpy>
 800ddda:	68a0      	ldr	r0, [r4, #8]
 800dddc:	4642      	mov	r2, r8
 800ddde:	19a9      	adds	r1, r5, r6
 800dde0:	f00b fea9 	bl	8019b36 <memcpy>
 800dde4:	e7a1      	b.n	800dd2a <ucdr_serialize_uint32_t+0x72>
 800dde6:	bf00      	nop

0800dde8 <ucdr_serialize_endian_uint32_t>:
 800dde8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddec:	b083      	sub	sp, #12
 800ddee:	460d      	mov	r5, r1
 800ddf0:	2104      	movs	r1, #4
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	9201      	str	r2, [sp, #4]
 800ddf6:	f001 f967 	bl	800f0c8 <ucdr_buffer_alignment>
 800ddfa:	4601      	mov	r1, r0
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de02:	f001 f9a5 	bl	800f150 <ucdr_advance_buffer>
 800de06:	2104      	movs	r1, #4
 800de08:	4620      	mov	r0, r4
 800de0a:	f001 f8fd 	bl	800f008 <ucdr_check_buffer_available_for>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d138      	bne.n	800de84 <ucdr_serialize_endian_uint32_t+0x9c>
 800de12:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800de16:	42b7      	cmp	r7, r6
 800de18:	d92f      	bls.n	800de7a <ucdr_serialize_endian_uint32_t+0x92>
 800de1a:	6923      	ldr	r3, [r4, #16]
 800de1c:	60a7      	str	r7, [r4, #8]
 800de1e:	1bbf      	subs	r7, r7, r6
 800de20:	443b      	add	r3, r7
 800de22:	f1c7 0904 	rsb	r9, r7, #4
 800de26:	6123      	str	r3, [r4, #16]
 800de28:	4649      	mov	r1, r9
 800de2a:	4620      	mov	r0, r4
 800de2c:	f001 f8f8 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800de30:	2800      	cmp	r0, #0
 800de32:	d04a      	beq.n	800deca <ucdr_serialize_endian_uint32_t+0xe2>
 800de34:	2d01      	cmp	r5, #1
 800de36:	d063      	beq.n	800df00 <ucdr_serialize_endian_uint32_t+0x118>
 800de38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de3c:	7033      	strb	r3, [r6, #0]
 800de3e:	2f00      	cmp	r7, #0
 800de40:	d051      	beq.n	800dee6 <ucdr_serialize_endian_uint32_t+0xfe>
 800de42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de46:	7073      	strb	r3, [r6, #1]
 800de48:	2f01      	cmp	r7, #1
 800de4a:	d050      	beq.n	800deee <ucdr_serialize_endian_uint32_t+0x106>
 800de4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800de50:	70b3      	strb	r3, [r6, #2]
 800de52:	2f02      	cmp	r7, #2
 800de54:	d04f      	beq.n	800def6 <ucdr_serialize_endian_uint32_t+0x10e>
 800de56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800de5a:	70f3      	strb	r3, [r6, #3]
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	68a2      	ldr	r2, [r4, #8]
 800de60:	7da0      	ldrb	r0, [r4, #22]
 800de62:	3304      	adds	r3, #4
 800de64:	444a      	add	r2, r9
 800de66:	1bdb      	subs	r3, r3, r7
 800de68:	2104      	movs	r1, #4
 800de6a:	f080 0001 	eor.w	r0, r0, #1
 800de6e:	60a2      	str	r2, [r4, #8]
 800de70:	6123      	str	r3, [r4, #16]
 800de72:	7561      	strb	r1, [r4, #21]
 800de74:	b003      	add	sp, #12
 800de76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de7a:	2104      	movs	r1, #4
 800de7c:	4620      	mov	r0, r4
 800de7e:	f001 f8cf 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800de82:	b1c8      	cbz	r0, 800deb8 <ucdr_serialize_endian_uint32_t+0xd0>
 800de84:	2d01      	cmp	r5, #1
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	d01c      	beq.n	800dec4 <ucdr_serialize_endian_uint32_t+0xdc>
 800de8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800de8e:	701a      	strb	r2, [r3, #0]
 800de90:	68a3      	ldr	r3, [r4, #8]
 800de92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de96:	705a      	strb	r2, [r3, #1]
 800de98:	68a3      	ldr	r3, [r4, #8]
 800de9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800de9e:	709a      	strb	r2, [r3, #2]
 800dea0:	68a3      	ldr	r3, [r4, #8]
 800dea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dea6:	70da      	strb	r2, [r3, #3]
 800dea8:	68a2      	ldr	r2, [r4, #8]
 800deaa:	6923      	ldr	r3, [r4, #16]
 800deac:	3204      	adds	r2, #4
 800deae:	3304      	adds	r3, #4
 800deb0:	2104      	movs	r1, #4
 800deb2:	60a2      	str	r2, [r4, #8]
 800deb4:	6123      	str	r3, [r4, #16]
 800deb6:	7561      	strb	r1, [r4, #21]
 800deb8:	7da0      	ldrb	r0, [r4, #22]
 800deba:	f080 0001 	eor.w	r0, r0, #1
 800debe:	b003      	add	sp, #12
 800dec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dec4:	9a01      	ldr	r2, [sp, #4]
 800dec6:	601a      	str	r2, [r3, #0]
 800dec8:	e7ee      	b.n	800dea8 <ucdr_serialize_endian_uint32_t+0xc0>
 800deca:	68a2      	ldr	r2, [r4, #8]
 800decc:	6923      	ldr	r3, [r4, #16]
 800dece:	7da0      	ldrb	r0, [r4, #22]
 800ded0:	f884 8015 	strb.w	r8, [r4, #21]
 800ded4:	1bd2      	subs	r2, r2, r7
 800ded6:	1bdb      	subs	r3, r3, r7
 800ded8:	f080 0001 	eor.w	r0, r0, #1
 800dedc:	60a2      	str	r2, [r4, #8]
 800dede:	6123      	str	r3, [r4, #16]
 800dee0:	b003      	add	sp, #12
 800dee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dee6:	68a3      	ldr	r3, [r4, #8]
 800dee8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800deec:	701a      	strb	r2, [r3, #0]
 800deee:	68a3      	ldr	r3, [r4, #8]
 800def0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800def4:	701a      	strb	r2, [r3, #0]
 800def6:	68a3      	ldr	r3, [r4, #8]
 800def8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800defc:	701a      	strb	r2, [r3, #0]
 800defe:	e7ad      	b.n	800de5c <ucdr_serialize_endian_uint32_t+0x74>
 800df00:	ad01      	add	r5, sp, #4
 800df02:	4629      	mov	r1, r5
 800df04:	463a      	mov	r2, r7
 800df06:	4630      	mov	r0, r6
 800df08:	f00b fe15 	bl	8019b36 <memcpy>
 800df0c:	68a0      	ldr	r0, [r4, #8]
 800df0e:	464a      	mov	r2, r9
 800df10:	19e9      	adds	r1, r5, r7
 800df12:	f00b fe10 	bl	8019b36 <memcpy>
 800df16:	e7a1      	b.n	800de5c <ucdr_serialize_endian_uint32_t+0x74>

0800df18 <ucdr_deserialize_uint32_t>:
 800df18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df1c:	460d      	mov	r5, r1
 800df1e:	2104      	movs	r1, #4
 800df20:	4604      	mov	r4, r0
 800df22:	f001 f8d1 	bl	800f0c8 <ucdr_buffer_alignment>
 800df26:	4601      	mov	r1, r0
 800df28:	4620      	mov	r0, r4
 800df2a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df2e:	f001 f90f 	bl	800f150 <ucdr_advance_buffer>
 800df32:	2104      	movs	r1, #4
 800df34:	4620      	mov	r0, r4
 800df36:	f001 f867 	bl	800f008 <ucdr_check_buffer_available_for>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d138      	bne.n	800dfb0 <ucdr_deserialize_uint32_t+0x98>
 800df3e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800df42:	42b7      	cmp	r7, r6
 800df44:	d92f      	bls.n	800dfa6 <ucdr_deserialize_uint32_t+0x8e>
 800df46:	6923      	ldr	r3, [r4, #16]
 800df48:	60a7      	str	r7, [r4, #8]
 800df4a:	1bbf      	subs	r7, r7, r6
 800df4c:	443b      	add	r3, r7
 800df4e:	f1c7 0904 	rsb	r9, r7, #4
 800df52:	6123      	str	r3, [r4, #16]
 800df54:	4649      	mov	r1, r9
 800df56:	4620      	mov	r0, r4
 800df58:	f001 f862 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d046      	beq.n	800dfee <ucdr_deserialize_uint32_t+0xd6>
 800df60:	7d23      	ldrb	r3, [r4, #20]
 800df62:	2b01      	cmp	r3, #1
 800df64:	d05c      	beq.n	800e020 <ucdr_deserialize_uint32_t+0x108>
 800df66:	78f3      	ldrb	r3, [r6, #3]
 800df68:	702b      	strb	r3, [r5, #0]
 800df6a:	2f00      	cmp	r7, #0
 800df6c:	d04c      	beq.n	800e008 <ucdr_deserialize_uint32_t+0xf0>
 800df6e:	78b3      	ldrb	r3, [r6, #2]
 800df70:	706b      	strb	r3, [r5, #1]
 800df72:	2f01      	cmp	r7, #1
 800df74:	f105 0302 	add.w	r3, r5, #2
 800df78:	d04a      	beq.n	800e010 <ucdr_deserialize_uint32_t+0xf8>
 800df7a:	7873      	ldrb	r3, [r6, #1]
 800df7c:	70ab      	strb	r3, [r5, #2]
 800df7e:	2f02      	cmp	r7, #2
 800df80:	f105 0303 	add.w	r3, r5, #3
 800df84:	d048      	beq.n	800e018 <ucdr_deserialize_uint32_t+0x100>
 800df86:	7833      	ldrb	r3, [r6, #0]
 800df88:	70eb      	strb	r3, [r5, #3]
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	68a2      	ldr	r2, [r4, #8]
 800df8e:	7da0      	ldrb	r0, [r4, #22]
 800df90:	2104      	movs	r1, #4
 800df92:	3304      	adds	r3, #4
 800df94:	444a      	add	r2, r9
 800df96:	1bdb      	subs	r3, r3, r7
 800df98:	7561      	strb	r1, [r4, #21]
 800df9a:	60a2      	str	r2, [r4, #8]
 800df9c:	6123      	str	r3, [r4, #16]
 800df9e:	f080 0001 	eor.w	r0, r0, #1
 800dfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfa6:	2104      	movs	r1, #4
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f001 f839 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800dfae:	b1b0      	cbz	r0, 800dfde <ucdr_deserialize_uint32_t+0xc6>
 800dfb0:	7d23      	ldrb	r3, [r4, #20]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	68a3      	ldr	r3, [r4, #8]
 800dfb6:	d017      	beq.n	800dfe8 <ucdr_deserialize_uint32_t+0xd0>
 800dfb8:	78db      	ldrb	r3, [r3, #3]
 800dfba:	702b      	strb	r3, [r5, #0]
 800dfbc:	68a3      	ldr	r3, [r4, #8]
 800dfbe:	789b      	ldrb	r3, [r3, #2]
 800dfc0:	706b      	strb	r3, [r5, #1]
 800dfc2:	68a3      	ldr	r3, [r4, #8]
 800dfc4:	785b      	ldrb	r3, [r3, #1]
 800dfc6:	70ab      	strb	r3, [r5, #2]
 800dfc8:	68a3      	ldr	r3, [r4, #8]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	70eb      	strb	r3, [r5, #3]
 800dfce:	68a2      	ldr	r2, [r4, #8]
 800dfd0:	6923      	ldr	r3, [r4, #16]
 800dfd2:	3204      	adds	r2, #4
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	2104      	movs	r1, #4
 800dfd8:	60a2      	str	r2, [r4, #8]
 800dfda:	6123      	str	r3, [r4, #16]
 800dfdc:	7561      	strb	r1, [r4, #21]
 800dfde:	7da0      	ldrb	r0, [r4, #22]
 800dfe0:	f080 0001 	eor.w	r0, r0, #1
 800dfe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	602b      	str	r3, [r5, #0]
 800dfec:	e7ef      	b.n	800dfce <ucdr_deserialize_uint32_t+0xb6>
 800dfee:	68a2      	ldr	r2, [r4, #8]
 800dff0:	6923      	ldr	r3, [r4, #16]
 800dff2:	7da0      	ldrb	r0, [r4, #22]
 800dff4:	f884 8015 	strb.w	r8, [r4, #21]
 800dff8:	1bd2      	subs	r2, r2, r7
 800dffa:	1bdb      	subs	r3, r3, r7
 800dffc:	60a2      	str	r2, [r4, #8]
 800dffe:	6123      	str	r3, [r4, #16]
 800e000:	f080 0001 	eor.w	r0, r0, #1
 800e004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e008:	68a3      	ldr	r3, [r4, #8]
 800e00a:	789b      	ldrb	r3, [r3, #2]
 800e00c:	706b      	strb	r3, [r5, #1]
 800e00e:	1cab      	adds	r3, r5, #2
 800e010:	68a2      	ldr	r2, [r4, #8]
 800e012:	7852      	ldrb	r2, [r2, #1]
 800e014:	f803 2b01 	strb.w	r2, [r3], #1
 800e018:	68a2      	ldr	r2, [r4, #8]
 800e01a:	7812      	ldrb	r2, [r2, #0]
 800e01c:	701a      	strb	r2, [r3, #0]
 800e01e:	e7b4      	b.n	800df8a <ucdr_deserialize_uint32_t+0x72>
 800e020:	4631      	mov	r1, r6
 800e022:	463a      	mov	r2, r7
 800e024:	4628      	mov	r0, r5
 800e026:	f00b fd86 	bl	8019b36 <memcpy>
 800e02a:	68a1      	ldr	r1, [r4, #8]
 800e02c:	464a      	mov	r2, r9
 800e02e:	19e8      	adds	r0, r5, r7
 800e030:	f00b fd81 	bl	8019b36 <memcpy>
 800e034:	e7a9      	b.n	800df8a <ucdr_deserialize_uint32_t+0x72>
 800e036:	bf00      	nop

0800e038 <ucdr_deserialize_endian_uint32_t>:
 800e038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e03c:	460e      	mov	r6, r1
 800e03e:	2104      	movs	r1, #4
 800e040:	4604      	mov	r4, r0
 800e042:	4615      	mov	r5, r2
 800e044:	f001 f840 	bl	800f0c8 <ucdr_buffer_alignment>
 800e048:	4601      	mov	r1, r0
 800e04a:	4620      	mov	r0, r4
 800e04c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e050:	f001 f87e 	bl	800f150 <ucdr_advance_buffer>
 800e054:	2104      	movs	r1, #4
 800e056:	4620      	mov	r0, r4
 800e058:	f000 ffd6 	bl	800f008 <ucdr_check_buffer_available_for>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d13c      	bne.n	800e0da <ucdr_deserialize_endian_uint32_t+0xa2>
 800e060:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e064:	42bb      	cmp	r3, r7
 800e066:	d933      	bls.n	800e0d0 <ucdr_deserialize_endian_uint32_t+0x98>
 800e068:	eba3 0807 	sub.w	r8, r3, r7
 800e06c:	60a3      	str	r3, [r4, #8]
 800e06e:	6923      	ldr	r3, [r4, #16]
 800e070:	f1c8 0a04 	rsb	sl, r8, #4
 800e074:	4443      	add	r3, r8
 800e076:	6123      	str	r3, [r4, #16]
 800e078:	4651      	mov	r1, sl
 800e07a:	4620      	mov	r0, r4
 800e07c:	f000 ffd0 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e080:	2800      	cmp	r0, #0
 800e082:	d048      	beq.n	800e116 <ucdr_deserialize_endian_uint32_t+0xde>
 800e084:	2e01      	cmp	r6, #1
 800e086:	d061      	beq.n	800e14c <ucdr_deserialize_endian_uint32_t+0x114>
 800e088:	78fb      	ldrb	r3, [r7, #3]
 800e08a:	702b      	strb	r3, [r5, #0]
 800e08c:	f1b8 0f00 	cmp.w	r8, #0
 800e090:	d050      	beq.n	800e134 <ucdr_deserialize_endian_uint32_t+0xfc>
 800e092:	78bb      	ldrb	r3, [r7, #2]
 800e094:	706b      	strb	r3, [r5, #1]
 800e096:	f1b8 0f01 	cmp.w	r8, #1
 800e09a:	f105 0302 	add.w	r3, r5, #2
 800e09e:	d04d      	beq.n	800e13c <ucdr_deserialize_endian_uint32_t+0x104>
 800e0a0:	787b      	ldrb	r3, [r7, #1]
 800e0a2:	70ab      	strb	r3, [r5, #2]
 800e0a4:	f1b8 0f02 	cmp.w	r8, #2
 800e0a8:	f105 0303 	add.w	r3, r5, #3
 800e0ac:	d04a      	beq.n	800e144 <ucdr_deserialize_endian_uint32_t+0x10c>
 800e0ae:	783b      	ldrb	r3, [r7, #0]
 800e0b0:	70eb      	strb	r3, [r5, #3]
 800e0b2:	6923      	ldr	r3, [r4, #16]
 800e0b4:	68a2      	ldr	r2, [r4, #8]
 800e0b6:	7da0      	ldrb	r0, [r4, #22]
 800e0b8:	2104      	movs	r1, #4
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4452      	add	r2, sl
 800e0be:	eba3 0308 	sub.w	r3, r3, r8
 800e0c2:	7561      	strb	r1, [r4, #21]
 800e0c4:	60a2      	str	r2, [r4, #8]
 800e0c6:	6123      	str	r3, [r4, #16]
 800e0c8:	f080 0001 	eor.w	r0, r0, #1
 800e0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d0:	2104      	movs	r1, #4
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f000 ffa4 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e0d8:	b1a8      	cbz	r0, 800e106 <ucdr_deserialize_endian_uint32_t+0xce>
 800e0da:	2e01      	cmp	r6, #1
 800e0dc:	68a3      	ldr	r3, [r4, #8]
 800e0de:	d017      	beq.n	800e110 <ucdr_deserialize_endian_uint32_t+0xd8>
 800e0e0:	78db      	ldrb	r3, [r3, #3]
 800e0e2:	702b      	strb	r3, [r5, #0]
 800e0e4:	68a3      	ldr	r3, [r4, #8]
 800e0e6:	789b      	ldrb	r3, [r3, #2]
 800e0e8:	706b      	strb	r3, [r5, #1]
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	785b      	ldrb	r3, [r3, #1]
 800e0ee:	70ab      	strb	r3, [r5, #2]
 800e0f0:	68a3      	ldr	r3, [r4, #8]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	70eb      	strb	r3, [r5, #3]
 800e0f6:	68a2      	ldr	r2, [r4, #8]
 800e0f8:	6923      	ldr	r3, [r4, #16]
 800e0fa:	3204      	adds	r2, #4
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	2104      	movs	r1, #4
 800e100:	60a2      	str	r2, [r4, #8]
 800e102:	6123      	str	r3, [r4, #16]
 800e104:	7561      	strb	r1, [r4, #21]
 800e106:	7da0      	ldrb	r0, [r4, #22]
 800e108:	f080 0001 	eor.w	r0, r0, #1
 800e10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	602b      	str	r3, [r5, #0]
 800e114:	e7ef      	b.n	800e0f6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800e116:	68a2      	ldr	r2, [r4, #8]
 800e118:	6923      	ldr	r3, [r4, #16]
 800e11a:	7da0      	ldrb	r0, [r4, #22]
 800e11c:	f884 9015 	strb.w	r9, [r4, #21]
 800e120:	eba2 0208 	sub.w	r2, r2, r8
 800e124:	eba3 0308 	sub.w	r3, r3, r8
 800e128:	60a2      	str	r2, [r4, #8]
 800e12a:	6123      	str	r3, [r4, #16]
 800e12c:	f080 0001 	eor.w	r0, r0, #1
 800e130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e134:	68a3      	ldr	r3, [r4, #8]
 800e136:	789b      	ldrb	r3, [r3, #2]
 800e138:	706b      	strb	r3, [r5, #1]
 800e13a:	1cab      	adds	r3, r5, #2
 800e13c:	68a2      	ldr	r2, [r4, #8]
 800e13e:	7852      	ldrb	r2, [r2, #1]
 800e140:	f803 2b01 	strb.w	r2, [r3], #1
 800e144:	68a2      	ldr	r2, [r4, #8]
 800e146:	7812      	ldrb	r2, [r2, #0]
 800e148:	701a      	strb	r2, [r3, #0]
 800e14a:	e7b2      	b.n	800e0b2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800e14c:	4639      	mov	r1, r7
 800e14e:	4642      	mov	r2, r8
 800e150:	4628      	mov	r0, r5
 800e152:	f00b fcf0 	bl	8019b36 <memcpy>
 800e156:	68a1      	ldr	r1, [r4, #8]
 800e158:	4652      	mov	r2, sl
 800e15a:	eb05 0008 	add.w	r0, r5, r8
 800e15e:	f00b fcea 	bl	8019b36 <memcpy>
 800e162:	e7a6      	b.n	800e0b2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800e164 <ucdr_serialize_uint64_t>:
 800e164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e168:	2108      	movs	r1, #8
 800e16a:	b082      	sub	sp, #8
 800e16c:	4604      	mov	r4, r0
 800e16e:	e9cd 2300 	strd	r2, r3, [sp]
 800e172:	f000 ffa9 	bl	800f0c8 <ucdr_buffer_alignment>
 800e176:	4601      	mov	r1, r0
 800e178:	4620      	mov	r0, r4
 800e17a:	7d67      	ldrb	r7, [r4, #21]
 800e17c:	f000 ffe8 	bl	800f150 <ucdr_advance_buffer>
 800e180:	2108      	movs	r1, #8
 800e182:	4620      	mov	r0, r4
 800e184:	f000 ff40 	bl	800f008 <ucdr_check_buffer_available_for>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d14e      	bne.n	800e22a <ucdr_serialize_uint64_t+0xc6>
 800e18c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e190:	42ab      	cmp	r3, r5
 800e192:	d945      	bls.n	800e220 <ucdr_serialize_uint64_t+0xbc>
 800e194:	1b5e      	subs	r6, r3, r5
 800e196:	60a3      	str	r3, [r4, #8]
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	f1c6 0808 	rsb	r8, r6, #8
 800e19e:	4433      	add	r3, r6
 800e1a0:	6123      	str	r3, [r4, #16]
 800e1a2:	4641      	mov	r1, r8
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f000 ff3b 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d074      	beq.n	800e298 <ucdr_serialize_uint64_t+0x134>
 800e1ae:	7d23      	ldrb	r3, [r4, #20]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	f000 809b 	beq.w	800e2ec <ucdr_serialize_uint64_t+0x188>
 800e1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1ba:	702b      	strb	r3, [r5, #0]
 800e1bc:	2e00      	cmp	r6, #0
 800e1be:	d078      	beq.n	800e2b2 <ucdr_serialize_uint64_t+0x14e>
 800e1c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e1c4:	706b      	strb	r3, [r5, #1]
 800e1c6:	2e01      	cmp	r6, #1
 800e1c8:	d077      	beq.n	800e2ba <ucdr_serialize_uint64_t+0x156>
 800e1ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e1ce:	70ab      	strb	r3, [r5, #2]
 800e1d0:	2e02      	cmp	r6, #2
 800e1d2:	d076      	beq.n	800e2c2 <ucdr_serialize_uint64_t+0x15e>
 800e1d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e1d8:	70eb      	strb	r3, [r5, #3]
 800e1da:	2e03      	cmp	r6, #3
 800e1dc:	d075      	beq.n	800e2ca <ucdr_serialize_uint64_t+0x166>
 800e1de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e1e2:	712b      	strb	r3, [r5, #4]
 800e1e4:	2e04      	cmp	r6, #4
 800e1e6:	d074      	beq.n	800e2d2 <ucdr_serialize_uint64_t+0x16e>
 800e1e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e1ec:	716b      	strb	r3, [r5, #5]
 800e1ee:	2e05      	cmp	r6, #5
 800e1f0:	d073      	beq.n	800e2da <ucdr_serialize_uint64_t+0x176>
 800e1f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e1f6:	71ab      	strb	r3, [r5, #6]
 800e1f8:	2e06      	cmp	r6, #6
 800e1fa:	d072      	beq.n	800e2e2 <ucdr_serialize_uint64_t+0x17e>
 800e1fc:	f89d 3000 	ldrb.w	r3, [sp]
 800e200:	71eb      	strb	r3, [r5, #7]
 800e202:	6923      	ldr	r3, [r4, #16]
 800e204:	68a2      	ldr	r2, [r4, #8]
 800e206:	7da0      	ldrb	r0, [r4, #22]
 800e208:	3308      	adds	r3, #8
 800e20a:	1b9e      	subs	r6, r3, r6
 800e20c:	4442      	add	r2, r8
 800e20e:	2308      	movs	r3, #8
 800e210:	f080 0001 	eor.w	r0, r0, #1
 800e214:	60a2      	str	r2, [r4, #8]
 800e216:	6126      	str	r6, [r4, #16]
 800e218:	7563      	strb	r3, [r4, #21]
 800e21a:	b002      	add	sp, #8
 800e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e220:	2108      	movs	r1, #8
 800e222:	4620      	mov	r0, r4
 800e224:	f000 fefc 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e228:	b350      	cbz	r0, 800e280 <ucdr_serialize_uint64_t+0x11c>
 800e22a:	7d23      	ldrb	r3, [r4, #20]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d02d      	beq.n	800e28c <ucdr_serialize_uint64_t+0x128>
 800e230:	68a3      	ldr	r3, [r4, #8]
 800e232:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e236:	701a      	strb	r2, [r3, #0]
 800e238:	68a3      	ldr	r3, [r4, #8]
 800e23a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e23e:	705a      	strb	r2, [r3, #1]
 800e240:	68a3      	ldr	r3, [r4, #8]
 800e242:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e246:	709a      	strb	r2, [r3, #2]
 800e248:	68a3      	ldr	r3, [r4, #8]
 800e24a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e24e:	70da      	strb	r2, [r3, #3]
 800e250:	68a3      	ldr	r3, [r4, #8]
 800e252:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e256:	711a      	strb	r2, [r3, #4]
 800e258:	68a3      	ldr	r3, [r4, #8]
 800e25a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e25e:	715a      	strb	r2, [r3, #5]
 800e260:	68a3      	ldr	r3, [r4, #8]
 800e262:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e266:	719a      	strb	r2, [r3, #6]
 800e268:	68a3      	ldr	r3, [r4, #8]
 800e26a:	f89d 2000 	ldrb.w	r2, [sp]
 800e26e:	71da      	strb	r2, [r3, #7]
 800e270:	68a2      	ldr	r2, [r4, #8]
 800e272:	6923      	ldr	r3, [r4, #16]
 800e274:	3208      	adds	r2, #8
 800e276:	3308      	adds	r3, #8
 800e278:	2108      	movs	r1, #8
 800e27a:	60a2      	str	r2, [r4, #8]
 800e27c:	6123      	str	r3, [r4, #16]
 800e27e:	7561      	strb	r1, [r4, #21]
 800e280:	7da0      	ldrb	r0, [r4, #22]
 800e282:	f080 0001 	eor.w	r0, r0, #1
 800e286:	b002      	add	sp, #8
 800e288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e28c:	466b      	mov	r3, sp
 800e28e:	cb03      	ldmia	r3!, {r0, r1}
 800e290:	68a3      	ldr	r3, [r4, #8]
 800e292:	6018      	str	r0, [r3, #0]
 800e294:	6059      	str	r1, [r3, #4]
 800e296:	e7eb      	b.n	800e270 <ucdr_serialize_uint64_t+0x10c>
 800e298:	68a2      	ldr	r2, [r4, #8]
 800e29a:	6923      	ldr	r3, [r4, #16]
 800e29c:	7da0      	ldrb	r0, [r4, #22]
 800e29e:	7567      	strb	r7, [r4, #21]
 800e2a0:	1b92      	subs	r2, r2, r6
 800e2a2:	1b9b      	subs	r3, r3, r6
 800e2a4:	f080 0001 	eor.w	r0, r0, #1
 800e2a8:	60a2      	str	r2, [r4, #8]
 800e2aa:	6123      	str	r3, [r4, #16]
 800e2ac:	b002      	add	sp, #8
 800e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b2:	68a3      	ldr	r3, [r4, #8]
 800e2b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2b8:	701a      	strb	r2, [r3, #0]
 800e2ba:	68a3      	ldr	r3, [r4, #8]
 800e2bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e2c0:	701a      	strb	r2, [r3, #0]
 800e2c2:	68a3      	ldr	r3, [r4, #8]
 800e2c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e2c8:	701a      	strb	r2, [r3, #0]
 800e2ca:	68a3      	ldr	r3, [r4, #8]
 800e2cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	68a3      	ldr	r3, [r4, #8]
 800e2d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e2d8:	701a      	strb	r2, [r3, #0]
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e2e0:	701a      	strb	r2, [r3, #0]
 800e2e2:	68a3      	ldr	r3, [r4, #8]
 800e2e4:	f89d 2000 	ldrb.w	r2, [sp]
 800e2e8:	701a      	strb	r2, [r3, #0]
 800e2ea:	e78a      	b.n	800e202 <ucdr_serialize_uint64_t+0x9e>
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	466d      	mov	r5, sp
 800e2f0:	4629      	mov	r1, r5
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	f00b fc1f 	bl	8019b36 <memcpy>
 800e2f8:	68a0      	ldr	r0, [r4, #8]
 800e2fa:	4642      	mov	r2, r8
 800e2fc:	19a9      	adds	r1, r5, r6
 800e2fe:	f00b fc1a 	bl	8019b36 <memcpy>
 800e302:	e77e      	b.n	800e202 <ucdr_serialize_uint64_t+0x9e>

0800e304 <ucdr_serialize_int16_t>:
 800e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	460b      	mov	r3, r1
 800e30c:	2102      	movs	r1, #2
 800e30e:	4604      	mov	r4, r0
 800e310:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e314:	f000 fed8 	bl	800f0c8 <ucdr_buffer_alignment>
 800e318:	4601      	mov	r1, r0
 800e31a:	4620      	mov	r0, r4
 800e31c:	7d67      	ldrb	r7, [r4, #21]
 800e31e:	f000 ff17 	bl	800f150 <ucdr_advance_buffer>
 800e322:	2102      	movs	r1, #2
 800e324:	4620      	mov	r0, r4
 800e326:	f000 fe6f 	bl	800f008 <ucdr_check_buffer_available_for>
 800e32a:	bb78      	cbnz	r0, 800e38c <ucdr_serialize_int16_t+0x88>
 800e32c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e330:	42ab      	cmp	r3, r5
 800e332:	d926      	bls.n	800e382 <ucdr_serialize_int16_t+0x7e>
 800e334:	1b5e      	subs	r6, r3, r5
 800e336:	60a3      	str	r3, [r4, #8]
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	f1c6 0802 	rsb	r8, r6, #2
 800e33e:	4433      	add	r3, r6
 800e340:	6123      	str	r3, [r4, #16]
 800e342:	4641      	mov	r1, r8
 800e344:	4620      	mov	r0, r4
 800e346:	f000 fe6b 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d03b      	beq.n	800e3c6 <ucdr_serialize_int16_t+0xc2>
 800e34e:	7d23      	ldrb	r3, [r4, #20]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d04a      	beq.n	800e3ea <ucdr_serialize_int16_t+0xe6>
 800e354:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e358:	702b      	strb	r3, [r5, #0]
 800e35a:	2e00      	cmp	r6, #0
 800e35c:	d040      	beq.n	800e3e0 <ucdr_serialize_int16_t+0xdc>
 800e35e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e362:	706b      	strb	r3, [r5, #1]
 800e364:	6923      	ldr	r3, [r4, #16]
 800e366:	68a2      	ldr	r2, [r4, #8]
 800e368:	7da0      	ldrb	r0, [r4, #22]
 800e36a:	3302      	adds	r3, #2
 800e36c:	1b9e      	subs	r6, r3, r6
 800e36e:	4442      	add	r2, r8
 800e370:	2302      	movs	r3, #2
 800e372:	f080 0001 	eor.w	r0, r0, #1
 800e376:	60a2      	str	r2, [r4, #8]
 800e378:	6126      	str	r6, [r4, #16]
 800e37a:	7563      	strb	r3, [r4, #21]
 800e37c:	b002      	add	sp, #8
 800e37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e382:	2102      	movs	r1, #2
 800e384:	4620      	mov	r0, r4
 800e386:	f000 fe4b 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e38a:	b190      	cbz	r0, 800e3b2 <ucdr_serialize_int16_t+0xae>
 800e38c:	7d23      	ldrb	r3, [r4, #20]
 800e38e:	2b01      	cmp	r3, #1
 800e390:	68a3      	ldr	r3, [r4, #8]
 800e392:	d014      	beq.n	800e3be <ucdr_serialize_int16_t+0xba>
 800e394:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e398:	701a      	strb	r2, [r3, #0]
 800e39a:	68a3      	ldr	r3, [r4, #8]
 800e39c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e3a0:	705a      	strb	r2, [r3, #1]
 800e3a2:	68a2      	ldr	r2, [r4, #8]
 800e3a4:	6923      	ldr	r3, [r4, #16]
 800e3a6:	3202      	adds	r2, #2
 800e3a8:	3302      	adds	r3, #2
 800e3aa:	2102      	movs	r1, #2
 800e3ac:	60a2      	str	r2, [r4, #8]
 800e3ae:	6123      	str	r3, [r4, #16]
 800e3b0:	7561      	strb	r1, [r4, #21]
 800e3b2:	7da0      	ldrb	r0, [r4, #22]
 800e3b4:	f080 0001 	eor.w	r0, r0, #1
 800e3b8:	b002      	add	sp, #8
 800e3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e3c2:	801a      	strh	r2, [r3, #0]
 800e3c4:	e7ed      	b.n	800e3a2 <ucdr_serialize_int16_t+0x9e>
 800e3c6:	68a2      	ldr	r2, [r4, #8]
 800e3c8:	6923      	ldr	r3, [r4, #16]
 800e3ca:	7da0      	ldrb	r0, [r4, #22]
 800e3cc:	7567      	strb	r7, [r4, #21]
 800e3ce:	1b92      	subs	r2, r2, r6
 800e3d0:	1b9b      	subs	r3, r3, r6
 800e3d2:	f080 0001 	eor.w	r0, r0, #1
 800e3d6:	60a2      	str	r2, [r4, #8]
 800e3d8:	6123      	str	r3, [r4, #16]
 800e3da:	b002      	add	sp, #8
 800e3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e0:	68a3      	ldr	r3, [r4, #8]
 800e3e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e3e6:	701a      	strb	r2, [r3, #0]
 800e3e8:	e7bc      	b.n	800e364 <ucdr_serialize_int16_t+0x60>
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	f10d 0506 	add.w	r5, sp, #6
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	4632      	mov	r2, r6
 800e3f4:	f00b fb9f 	bl	8019b36 <memcpy>
 800e3f8:	68a0      	ldr	r0, [r4, #8]
 800e3fa:	4642      	mov	r2, r8
 800e3fc:	19a9      	adds	r1, r5, r6
 800e3fe:	f00b fb9a 	bl	8019b36 <memcpy>
 800e402:	e7af      	b.n	800e364 <ucdr_serialize_int16_t+0x60>

0800e404 <ucdr_deserialize_int16_t>:
 800e404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e408:	460d      	mov	r5, r1
 800e40a:	2102      	movs	r1, #2
 800e40c:	4604      	mov	r4, r0
 800e40e:	f000 fe5b 	bl	800f0c8 <ucdr_buffer_alignment>
 800e412:	4601      	mov	r1, r0
 800e414:	4620      	mov	r0, r4
 800e416:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e41a:	f000 fe99 	bl	800f150 <ucdr_advance_buffer>
 800e41e:	2102      	movs	r1, #2
 800e420:	4620      	mov	r0, r4
 800e422:	f000 fdf1 	bl	800f008 <ucdr_check_buffer_available_for>
 800e426:	bb60      	cbnz	r0, 800e482 <ucdr_deserialize_int16_t+0x7e>
 800e428:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e42c:	42be      	cmp	r6, r7
 800e42e:	d923      	bls.n	800e478 <ucdr_deserialize_int16_t+0x74>
 800e430:	6923      	ldr	r3, [r4, #16]
 800e432:	60a6      	str	r6, [r4, #8]
 800e434:	1bf6      	subs	r6, r6, r7
 800e436:	4433      	add	r3, r6
 800e438:	f1c6 0902 	rsb	r9, r6, #2
 800e43c:	6123      	str	r3, [r4, #16]
 800e43e:	4649      	mov	r1, r9
 800e440:	4620      	mov	r0, r4
 800e442:	f000 fded 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e446:	2800      	cmp	r0, #0
 800e448:	d034      	beq.n	800e4b4 <ucdr_deserialize_int16_t+0xb0>
 800e44a:	7d23      	ldrb	r3, [r4, #20]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d042      	beq.n	800e4d6 <ucdr_deserialize_int16_t+0xd2>
 800e450:	787b      	ldrb	r3, [r7, #1]
 800e452:	702b      	strb	r3, [r5, #0]
 800e454:	2e00      	cmp	r6, #0
 800e456:	d03a      	beq.n	800e4ce <ucdr_deserialize_int16_t+0xca>
 800e458:	783b      	ldrb	r3, [r7, #0]
 800e45a:	706b      	strb	r3, [r5, #1]
 800e45c:	6923      	ldr	r3, [r4, #16]
 800e45e:	68a2      	ldr	r2, [r4, #8]
 800e460:	7da0      	ldrb	r0, [r4, #22]
 800e462:	2102      	movs	r1, #2
 800e464:	3302      	adds	r3, #2
 800e466:	444a      	add	r2, r9
 800e468:	1b9b      	subs	r3, r3, r6
 800e46a:	7561      	strb	r1, [r4, #21]
 800e46c:	60a2      	str	r2, [r4, #8]
 800e46e:	6123      	str	r3, [r4, #16]
 800e470:	f080 0001 	eor.w	r0, r0, #1
 800e474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e478:	2102      	movs	r1, #2
 800e47a:	4620      	mov	r0, r4
 800e47c:	f000 fdd0 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e480:	b180      	cbz	r0, 800e4a4 <ucdr_deserialize_int16_t+0xa0>
 800e482:	7d23      	ldrb	r3, [r4, #20]
 800e484:	2b01      	cmp	r3, #1
 800e486:	68a3      	ldr	r3, [r4, #8]
 800e488:	d011      	beq.n	800e4ae <ucdr_deserialize_int16_t+0xaa>
 800e48a:	785b      	ldrb	r3, [r3, #1]
 800e48c:	702b      	strb	r3, [r5, #0]
 800e48e:	68a3      	ldr	r3, [r4, #8]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	706b      	strb	r3, [r5, #1]
 800e494:	68a2      	ldr	r2, [r4, #8]
 800e496:	6923      	ldr	r3, [r4, #16]
 800e498:	3202      	adds	r2, #2
 800e49a:	3302      	adds	r3, #2
 800e49c:	2102      	movs	r1, #2
 800e49e:	60a2      	str	r2, [r4, #8]
 800e4a0:	6123      	str	r3, [r4, #16]
 800e4a2:	7561      	strb	r1, [r4, #21]
 800e4a4:	7da0      	ldrb	r0, [r4, #22]
 800e4a6:	f080 0001 	eor.w	r0, r0, #1
 800e4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ae:	881b      	ldrh	r3, [r3, #0]
 800e4b0:	802b      	strh	r3, [r5, #0]
 800e4b2:	e7ef      	b.n	800e494 <ucdr_deserialize_int16_t+0x90>
 800e4b4:	68a2      	ldr	r2, [r4, #8]
 800e4b6:	6923      	ldr	r3, [r4, #16]
 800e4b8:	7da0      	ldrb	r0, [r4, #22]
 800e4ba:	f884 8015 	strb.w	r8, [r4, #21]
 800e4be:	1b92      	subs	r2, r2, r6
 800e4c0:	1b9b      	subs	r3, r3, r6
 800e4c2:	60a2      	str	r2, [r4, #8]
 800e4c4:	6123      	str	r3, [r4, #16]
 800e4c6:	f080 0001 	eor.w	r0, r0, #1
 800e4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ce:	68a3      	ldr	r3, [r4, #8]
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	706b      	strb	r3, [r5, #1]
 800e4d4:	e7c2      	b.n	800e45c <ucdr_deserialize_int16_t+0x58>
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	4632      	mov	r2, r6
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f00b fb2b 	bl	8019b36 <memcpy>
 800e4e0:	68a1      	ldr	r1, [r4, #8]
 800e4e2:	464a      	mov	r2, r9
 800e4e4:	19a8      	adds	r0, r5, r6
 800e4e6:	f00b fb26 	bl	8019b36 <memcpy>
 800e4ea:	e7b7      	b.n	800e45c <ucdr_deserialize_int16_t+0x58>

0800e4ec <ucdr_serialize_int32_t>:
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	9101      	str	r1, [sp, #4]
 800e4f6:	2104      	movs	r1, #4
 800e4f8:	f000 fde6 	bl	800f0c8 <ucdr_buffer_alignment>
 800e4fc:	4601      	mov	r1, r0
 800e4fe:	4620      	mov	r0, r4
 800e500:	7d67      	ldrb	r7, [r4, #21]
 800e502:	f000 fe25 	bl	800f150 <ucdr_advance_buffer>
 800e506:	2104      	movs	r1, #4
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 fd7d 	bl	800f008 <ucdr_check_buffer_available_for>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d139      	bne.n	800e586 <ucdr_serialize_int32_t+0x9a>
 800e512:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e516:	42ab      	cmp	r3, r5
 800e518:	d930      	bls.n	800e57c <ucdr_serialize_int32_t+0x90>
 800e51a:	1b5e      	subs	r6, r3, r5
 800e51c:	60a3      	str	r3, [r4, #8]
 800e51e:	6923      	ldr	r3, [r4, #16]
 800e520:	f1c6 0804 	rsb	r8, r6, #4
 800e524:	4433      	add	r3, r6
 800e526:	6123      	str	r3, [r4, #16]
 800e528:	4641      	mov	r1, r8
 800e52a:	4620      	mov	r0, r4
 800e52c:	f000 fd78 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e530:	2800      	cmp	r0, #0
 800e532:	d04c      	beq.n	800e5ce <ucdr_serialize_int32_t+0xe2>
 800e534:	7d23      	ldrb	r3, [r4, #20]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d063      	beq.n	800e602 <ucdr_serialize_int32_t+0x116>
 800e53a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e53e:	702b      	strb	r3, [r5, #0]
 800e540:	2e00      	cmp	r6, #0
 800e542:	d051      	beq.n	800e5e8 <ucdr_serialize_int32_t+0xfc>
 800e544:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e548:	706b      	strb	r3, [r5, #1]
 800e54a:	2e01      	cmp	r6, #1
 800e54c:	d050      	beq.n	800e5f0 <ucdr_serialize_int32_t+0x104>
 800e54e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e552:	70ab      	strb	r3, [r5, #2]
 800e554:	2e02      	cmp	r6, #2
 800e556:	d04f      	beq.n	800e5f8 <ucdr_serialize_int32_t+0x10c>
 800e558:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e55c:	70eb      	strb	r3, [r5, #3]
 800e55e:	6923      	ldr	r3, [r4, #16]
 800e560:	68a2      	ldr	r2, [r4, #8]
 800e562:	7da0      	ldrb	r0, [r4, #22]
 800e564:	3304      	adds	r3, #4
 800e566:	1b9e      	subs	r6, r3, r6
 800e568:	4442      	add	r2, r8
 800e56a:	2304      	movs	r3, #4
 800e56c:	f080 0001 	eor.w	r0, r0, #1
 800e570:	60a2      	str	r2, [r4, #8]
 800e572:	6126      	str	r6, [r4, #16]
 800e574:	7563      	strb	r3, [r4, #21]
 800e576:	b002      	add	sp, #8
 800e578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e57c:	2104      	movs	r1, #4
 800e57e:	4620      	mov	r0, r4
 800e580:	f000 fd4e 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e584:	b1d0      	cbz	r0, 800e5bc <ucdr_serialize_int32_t+0xd0>
 800e586:	7d23      	ldrb	r3, [r4, #20]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	68a3      	ldr	r3, [r4, #8]
 800e58c:	d01c      	beq.n	800e5c8 <ucdr_serialize_int32_t+0xdc>
 800e58e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e592:	701a      	strb	r2, [r3, #0]
 800e594:	68a3      	ldr	r3, [r4, #8]
 800e596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e59a:	705a      	strb	r2, [r3, #1]
 800e59c:	68a3      	ldr	r3, [r4, #8]
 800e59e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5a2:	709a      	strb	r2, [r3, #2]
 800e5a4:	68a3      	ldr	r3, [r4, #8]
 800e5a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5aa:	70da      	strb	r2, [r3, #3]
 800e5ac:	68a2      	ldr	r2, [r4, #8]
 800e5ae:	6923      	ldr	r3, [r4, #16]
 800e5b0:	3204      	adds	r2, #4
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	2104      	movs	r1, #4
 800e5b6:	60a2      	str	r2, [r4, #8]
 800e5b8:	6123      	str	r3, [r4, #16]
 800e5ba:	7561      	strb	r1, [r4, #21]
 800e5bc:	7da0      	ldrb	r0, [r4, #22]
 800e5be:	f080 0001 	eor.w	r0, r0, #1
 800e5c2:	b002      	add	sp, #8
 800e5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c8:	9a01      	ldr	r2, [sp, #4]
 800e5ca:	601a      	str	r2, [r3, #0]
 800e5cc:	e7ee      	b.n	800e5ac <ucdr_serialize_int32_t+0xc0>
 800e5ce:	68a2      	ldr	r2, [r4, #8]
 800e5d0:	6923      	ldr	r3, [r4, #16]
 800e5d2:	7da0      	ldrb	r0, [r4, #22]
 800e5d4:	7567      	strb	r7, [r4, #21]
 800e5d6:	1b92      	subs	r2, r2, r6
 800e5d8:	1b9b      	subs	r3, r3, r6
 800e5da:	f080 0001 	eor.w	r0, r0, #1
 800e5de:	60a2      	str	r2, [r4, #8]
 800e5e0:	6123      	str	r3, [r4, #16]
 800e5e2:	b002      	add	sp, #8
 800e5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e8:	68a3      	ldr	r3, [r4, #8]
 800e5ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e5ee:	701a      	strb	r2, [r3, #0]
 800e5f0:	68a3      	ldr	r3, [r4, #8]
 800e5f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5f6:	701a      	strb	r2, [r3, #0]
 800e5f8:	68a3      	ldr	r3, [r4, #8]
 800e5fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e5fe:	701a      	strb	r2, [r3, #0]
 800e600:	e7ad      	b.n	800e55e <ucdr_serialize_int32_t+0x72>
 800e602:	4628      	mov	r0, r5
 800e604:	ad01      	add	r5, sp, #4
 800e606:	4629      	mov	r1, r5
 800e608:	4632      	mov	r2, r6
 800e60a:	f00b fa94 	bl	8019b36 <memcpy>
 800e60e:	68a0      	ldr	r0, [r4, #8]
 800e610:	4642      	mov	r2, r8
 800e612:	19a9      	adds	r1, r5, r6
 800e614:	f00b fa8f 	bl	8019b36 <memcpy>
 800e618:	e7a1      	b.n	800e55e <ucdr_serialize_int32_t+0x72>
 800e61a:	bf00      	nop

0800e61c <ucdr_deserialize_int32_t>:
 800e61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e620:	460d      	mov	r5, r1
 800e622:	2104      	movs	r1, #4
 800e624:	4604      	mov	r4, r0
 800e626:	f000 fd4f 	bl	800f0c8 <ucdr_buffer_alignment>
 800e62a:	4601      	mov	r1, r0
 800e62c:	4620      	mov	r0, r4
 800e62e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e632:	f000 fd8d 	bl	800f150 <ucdr_advance_buffer>
 800e636:	2104      	movs	r1, #4
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 fce5 	bl	800f008 <ucdr_check_buffer_available_for>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d138      	bne.n	800e6b4 <ucdr_deserialize_int32_t+0x98>
 800e642:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e646:	42b7      	cmp	r7, r6
 800e648:	d92f      	bls.n	800e6aa <ucdr_deserialize_int32_t+0x8e>
 800e64a:	6923      	ldr	r3, [r4, #16]
 800e64c:	60a7      	str	r7, [r4, #8]
 800e64e:	1bbf      	subs	r7, r7, r6
 800e650:	443b      	add	r3, r7
 800e652:	f1c7 0904 	rsb	r9, r7, #4
 800e656:	6123      	str	r3, [r4, #16]
 800e658:	4649      	mov	r1, r9
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 fce0 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e660:	2800      	cmp	r0, #0
 800e662:	d046      	beq.n	800e6f2 <ucdr_deserialize_int32_t+0xd6>
 800e664:	7d23      	ldrb	r3, [r4, #20]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d05c      	beq.n	800e724 <ucdr_deserialize_int32_t+0x108>
 800e66a:	78f3      	ldrb	r3, [r6, #3]
 800e66c:	702b      	strb	r3, [r5, #0]
 800e66e:	2f00      	cmp	r7, #0
 800e670:	d04c      	beq.n	800e70c <ucdr_deserialize_int32_t+0xf0>
 800e672:	78b3      	ldrb	r3, [r6, #2]
 800e674:	706b      	strb	r3, [r5, #1]
 800e676:	2f01      	cmp	r7, #1
 800e678:	f105 0302 	add.w	r3, r5, #2
 800e67c:	d04a      	beq.n	800e714 <ucdr_deserialize_int32_t+0xf8>
 800e67e:	7873      	ldrb	r3, [r6, #1]
 800e680:	70ab      	strb	r3, [r5, #2]
 800e682:	2f02      	cmp	r7, #2
 800e684:	f105 0303 	add.w	r3, r5, #3
 800e688:	d048      	beq.n	800e71c <ucdr_deserialize_int32_t+0x100>
 800e68a:	7833      	ldrb	r3, [r6, #0]
 800e68c:	70eb      	strb	r3, [r5, #3]
 800e68e:	6923      	ldr	r3, [r4, #16]
 800e690:	68a2      	ldr	r2, [r4, #8]
 800e692:	7da0      	ldrb	r0, [r4, #22]
 800e694:	2104      	movs	r1, #4
 800e696:	3304      	adds	r3, #4
 800e698:	444a      	add	r2, r9
 800e69a:	1bdb      	subs	r3, r3, r7
 800e69c:	7561      	strb	r1, [r4, #21]
 800e69e:	60a2      	str	r2, [r4, #8]
 800e6a0:	6123      	str	r3, [r4, #16]
 800e6a2:	f080 0001 	eor.w	r0, r0, #1
 800e6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6aa:	2104      	movs	r1, #4
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f000 fcb7 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e6b2:	b1b0      	cbz	r0, 800e6e2 <ucdr_deserialize_int32_t+0xc6>
 800e6b4:	7d23      	ldrb	r3, [r4, #20]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	68a3      	ldr	r3, [r4, #8]
 800e6ba:	d017      	beq.n	800e6ec <ucdr_deserialize_int32_t+0xd0>
 800e6bc:	78db      	ldrb	r3, [r3, #3]
 800e6be:	702b      	strb	r3, [r5, #0]
 800e6c0:	68a3      	ldr	r3, [r4, #8]
 800e6c2:	789b      	ldrb	r3, [r3, #2]
 800e6c4:	706b      	strb	r3, [r5, #1]
 800e6c6:	68a3      	ldr	r3, [r4, #8]
 800e6c8:	785b      	ldrb	r3, [r3, #1]
 800e6ca:	70ab      	strb	r3, [r5, #2]
 800e6cc:	68a3      	ldr	r3, [r4, #8]
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	70eb      	strb	r3, [r5, #3]
 800e6d2:	68a2      	ldr	r2, [r4, #8]
 800e6d4:	6923      	ldr	r3, [r4, #16]
 800e6d6:	3204      	adds	r2, #4
 800e6d8:	3304      	adds	r3, #4
 800e6da:	2104      	movs	r1, #4
 800e6dc:	60a2      	str	r2, [r4, #8]
 800e6de:	6123      	str	r3, [r4, #16]
 800e6e0:	7561      	strb	r1, [r4, #21]
 800e6e2:	7da0      	ldrb	r0, [r4, #22]
 800e6e4:	f080 0001 	eor.w	r0, r0, #1
 800e6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	602b      	str	r3, [r5, #0]
 800e6f0:	e7ef      	b.n	800e6d2 <ucdr_deserialize_int32_t+0xb6>
 800e6f2:	68a2      	ldr	r2, [r4, #8]
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	7da0      	ldrb	r0, [r4, #22]
 800e6f8:	f884 8015 	strb.w	r8, [r4, #21]
 800e6fc:	1bd2      	subs	r2, r2, r7
 800e6fe:	1bdb      	subs	r3, r3, r7
 800e700:	60a2      	str	r2, [r4, #8]
 800e702:	6123      	str	r3, [r4, #16]
 800e704:	f080 0001 	eor.w	r0, r0, #1
 800e708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e70c:	68a3      	ldr	r3, [r4, #8]
 800e70e:	789b      	ldrb	r3, [r3, #2]
 800e710:	706b      	strb	r3, [r5, #1]
 800e712:	1cab      	adds	r3, r5, #2
 800e714:	68a2      	ldr	r2, [r4, #8]
 800e716:	7852      	ldrb	r2, [r2, #1]
 800e718:	f803 2b01 	strb.w	r2, [r3], #1
 800e71c:	68a2      	ldr	r2, [r4, #8]
 800e71e:	7812      	ldrb	r2, [r2, #0]
 800e720:	701a      	strb	r2, [r3, #0]
 800e722:	e7b4      	b.n	800e68e <ucdr_deserialize_int32_t+0x72>
 800e724:	4631      	mov	r1, r6
 800e726:	463a      	mov	r2, r7
 800e728:	4628      	mov	r0, r5
 800e72a:	f00b fa04 	bl	8019b36 <memcpy>
 800e72e:	68a1      	ldr	r1, [r4, #8]
 800e730:	464a      	mov	r2, r9
 800e732:	19e8      	adds	r0, r5, r7
 800e734:	f00b f9ff 	bl	8019b36 <memcpy>
 800e738:	e7a9      	b.n	800e68e <ucdr_deserialize_int32_t+0x72>
 800e73a:	bf00      	nop

0800e73c <ucdr_serialize_endian_float>:
 800e73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e740:	460d      	mov	r5, r1
 800e742:	b083      	sub	sp, #12
 800e744:	2104      	movs	r1, #4
 800e746:	4604      	mov	r4, r0
 800e748:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e74c:	f000 fcbc 	bl	800f0c8 <ucdr_buffer_alignment>
 800e750:	4601      	mov	r1, r0
 800e752:	4620      	mov	r0, r4
 800e754:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e758:	f000 fcfa 	bl	800f150 <ucdr_advance_buffer>
 800e75c:	2104      	movs	r1, #4
 800e75e:	4620      	mov	r0, r4
 800e760:	f000 fc52 	bl	800f008 <ucdr_check_buffer_available_for>
 800e764:	2800      	cmp	r0, #0
 800e766:	d138      	bne.n	800e7da <ucdr_serialize_endian_float+0x9e>
 800e768:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e76c:	42b7      	cmp	r7, r6
 800e76e:	d92f      	bls.n	800e7d0 <ucdr_serialize_endian_float+0x94>
 800e770:	6923      	ldr	r3, [r4, #16]
 800e772:	60a7      	str	r7, [r4, #8]
 800e774:	1bbf      	subs	r7, r7, r6
 800e776:	443b      	add	r3, r7
 800e778:	f1c7 0904 	rsb	r9, r7, #4
 800e77c:	6123      	str	r3, [r4, #16]
 800e77e:	4649      	mov	r1, r9
 800e780:	4620      	mov	r0, r4
 800e782:	f000 fc4d 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e786:	2800      	cmp	r0, #0
 800e788:	d04a      	beq.n	800e820 <ucdr_serialize_endian_float+0xe4>
 800e78a:	2d01      	cmp	r5, #1
 800e78c:	d063      	beq.n	800e856 <ucdr_serialize_endian_float+0x11a>
 800e78e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e792:	7033      	strb	r3, [r6, #0]
 800e794:	2f00      	cmp	r7, #0
 800e796:	d051      	beq.n	800e83c <ucdr_serialize_endian_float+0x100>
 800e798:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e79c:	7073      	strb	r3, [r6, #1]
 800e79e:	2f01      	cmp	r7, #1
 800e7a0:	d050      	beq.n	800e844 <ucdr_serialize_endian_float+0x108>
 800e7a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e7a6:	70b3      	strb	r3, [r6, #2]
 800e7a8:	2f02      	cmp	r7, #2
 800e7aa:	d04f      	beq.n	800e84c <ucdr_serialize_endian_float+0x110>
 800e7ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e7b0:	70f3      	strb	r3, [r6, #3]
 800e7b2:	6923      	ldr	r3, [r4, #16]
 800e7b4:	68a2      	ldr	r2, [r4, #8]
 800e7b6:	7da0      	ldrb	r0, [r4, #22]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	444a      	add	r2, r9
 800e7bc:	1bdb      	subs	r3, r3, r7
 800e7be:	2104      	movs	r1, #4
 800e7c0:	f080 0001 	eor.w	r0, r0, #1
 800e7c4:	60a2      	str	r2, [r4, #8]
 800e7c6:	6123      	str	r3, [r4, #16]
 800e7c8:	7561      	strb	r1, [r4, #21]
 800e7ca:	b003      	add	sp, #12
 800e7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7d0:	2104      	movs	r1, #4
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	f000 fc24 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e7d8:	b1c8      	cbz	r0, 800e80e <ucdr_serialize_endian_float+0xd2>
 800e7da:	2d01      	cmp	r5, #1
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	d01c      	beq.n	800e81a <ucdr_serialize_endian_float+0xde>
 800e7e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e7e4:	701a      	strb	r2, [r3, #0]
 800e7e6:	68a3      	ldr	r3, [r4, #8]
 800e7e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e7ec:	705a      	strb	r2, [r3, #1]
 800e7ee:	68a3      	ldr	r3, [r4, #8]
 800e7f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e7f4:	709a      	strb	r2, [r3, #2]
 800e7f6:	68a3      	ldr	r3, [r4, #8]
 800e7f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e7fc:	70da      	strb	r2, [r3, #3]
 800e7fe:	68a2      	ldr	r2, [r4, #8]
 800e800:	6923      	ldr	r3, [r4, #16]
 800e802:	3204      	adds	r2, #4
 800e804:	3304      	adds	r3, #4
 800e806:	2104      	movs	r1, #4
 800e808:	60a2      	str	r2, [r4, #8]
 800e80a:	6123      	str	r3, [r4, #16]
 800e80c:	7561      	strb	r1, [r4, #21]
 800e80e:	7da0      	ldrb	r0, [r4, #22]
 800e810:	f080 0001 	eor.w	r0, r0, #1
 800e814:	b003      	add	sp, #12
 800e816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e81a:	9a01      	ldr	r2, [sp, #4]
 800e81c:	601a      	str	r2, [r3, #0]
 800e81e:	e7ee      	b.n	800e7fe <ucdr_serialize_endian_float+0xc2>
 800e820:	68a2      	ldr	r2, [r4, #8]
 800e822:	6923      	ldr	r3, [r4, #16]
 800e824:	7da0      	ldrb	r0, [r4, #22]
 800e826:	f884 8015 	strb.w	r8, [r4, #21]
 800e82a:	1bd2      	subs	r2, r2, r7
 800e82c:	1bdb      	subs	r3, r3, r7
 800e82e:	f080 0001 	eor.w	r0, r0, #1
 800e832:	60a2      	str	r2, [r4, #8]
 800e834:	6123      	str	r3, [r4, #16]
 800e836:	b003      	add	sp, #12
 800e838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e83c:	68a3      	ldr	r3, [r4, #8]
 800e83e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e842:	701a      	strb	r2, [r3, #0]
 800e844:	68a3      	ldr	r3, [r4, #8]
 800e846:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e84a:	701a      	strb	r2, [r3, #0]
 800e84c:	68a3      	ldr	r3, [r4, #8]
 800e84e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e852:	701a      	strb	r2, [r3, #0]
 800e854:	e7ad      	b.n	800e7b2 <ucdr_serialize_endian_float+0x76>
 800e856:	ad01      	add	r5, sp, #4
 800e858:	4629      	mov	r1, r5
 800e85a:	463a      	mov	r2, r7
 800e85c:	4630      	mov	r0, r6
 800e85e:	f00b f96a 	bl	8019b36 <memcpy>
 800e862:	68a0      	ldr	r0, [r4, #8]
 800e864:	464a      	mov	r2, r9
 800e866:	19e9      	adds	r1, r5, r7
 800e868:	f00b f965 	bl	8019b36 <memcpy>
 800e86c:	e7a1      	b.n	800e7b2 <ucdr_serialize_endian_float+0x76>
 800e86e:	bf00      	nop

0800e870 <ucdr_deserialize_endian_float>:
 800e870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e874:	460e      	mov	r6, r1
 800e876:	2104      	movs	r1, #4
 800e878:	4604      	mov	r4, r0
 800e87a:	4615      	mov	r5, r2
 800e87c:	f000 fc24 	bl	800f0c8 <ucdr_buffer_alignment>
 800e880:	4601      	mov	r1, r0
 800e882:	4620      	mov	r0, r4
 800e884:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e888:	f000 fc62 	bl	800f150 <ucdr_advance_buffer>
 800e88c:	2104      	movs	r1, #4
 800e88e:	4620      	mov	r0, r4
 800e890:	f000 fbba 	bl	800f008 <ucdr_check_buffer_available_for>
 800e894:	2800      	cmp	r0, #0
 800e896:	d13c      	bne.n	800e912 <ucdr_deserialize_endian_float+0xa2>
 800e898:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e89c:	42bb      	cmp	r3, r7
 800e89e:	d933      	bls.n	800e908 <ucdr_deserialize_endian_float+0x98>
 800e8a0:	eba3 0807 	sub.w	r8, r3, r7
 800e8a4:	60a3      	str	r3, [r4, #8]
 800e8a6:	6923      	ldr	r3, [r4, #16]
 800e8a8:	f1c8 0a04 	rsb	sl, r8, #4
 800e8ac:	4443      	add	r3, r8
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	4651      	mov	r1, sl
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 fbb4 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d048      	beq.n	800e94e <ucdr_deserialize_endian_float+0xde>
 800e8bc:	2e01      	cmp	r6, #1
 800e8be:	d061      	beq.n	800e984 <ucdr_deserialize_endian_float+0x114>
 800e8c0:	78fb      	ldrb	r3, [r7, #3]
 800e8c2:	702b      	strb	r3, [r5, #0]
 800e8c4:	f1b8 0f00 	cmp.w	r8, #0
 800e8c8:	d050      	beq.n	800e96c <ucdr_deserialize_endian_float+0xfc>
 800e8ca:	78bb      	ldrb	r3, [r7, #2]
 800e8cc:	706b      	strb	r3, [r5, #1]
 800e8ce:	f1b8 0f01 	cmp.w	r8, #1
 800e8d2:	f105 0302 	add.w	r3, r5, #2
 800e8d6:	d04d      	beq.n	800e974 <ucdr_deserialize_endian_float+0x104>
 800e8d8:	787b      	ldrb	r3, [r7, #1]
 800e8da:	70ab      	strb	r3, [r5, #2]
 800e8dc:	f1b8 0f02 	cmp.w	r8, #2
 800e8e0:	f105 0303 	add.w	r3, r5, #3
 800e8e4:	d04a      	beq.n	800e97c <ucdr_deserialize_endian_float+0x10c>
 800e8e6:	783b      	ldrb	r3, [r7, #0]
 800e8e8:	70eb      	strb	r3, [r5, #3]
 800e8ea:	6923      	ldr	r3, [r4, #16]
 800e8ec:	68a2      	ldr	r2, [r4, #8]
 800e8ee:	7da0      	ldrb	r0, [r4, #22]
 800e8f0:	2104      	movs	r1, #4
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4452      	add	r2, sl
 800e8f6:	eba3 0308 	sub.w	r3, r3, r8
 800e8fa:	7561      	strb	r1, [r4, #21]
 800e8fc:	60a2      	str	r2, [r4, #8]
 800e8fe:	6123      	str	r3, [r4, #16]
 800e900:	f080 0001 	eor.w	r0, r0, #1
 800e904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e908:	2104      	movs	r1, #4
 800e90a:	4620      	mov	r0, r4
 800e90c:	f000 fb88 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e910:	b1a8      	cbz	r0, 800e93e <ucdr_deserialize_endian_float+0xce>
 800e912:	2e01      	cmp	r6, #1
 800e914:	68a3      	ldr	r3, [r4, #8]
 800e916:	d017      	beq.n	800e948 <ucdr_deserialize_endian_float+0xd8>
 800e918:	78db      	ldrb	r3, [r3, #3]
 800e91a:	702b      	strb	r3, [r5, #0]
 800e91c:	68a3      	ldr	r3, [r4, #8]
 800e91e:	789b      	ldrb	r3, [r3, #2]
 800e920:	706b      	strb	r3, [r5, #1]
 800e922:	68a3      	ldr	r3, [r4, #8]
 800e924:	785b      	ldrb	r3, [r3, #1]
 800e926:	70ab      	strb	r3, [r5, #2]
 800e928:	68a3      	ldr	r3, [r4, #8]
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	70eb      	strb	r3, [r5, #3]
 800e92e:	68a2      	ldr	r2, [r4, #8]
 800e930:	6923      	ldr	r3, [r4, #16]
 800e932:	3204      	adds	r2, #4
 800e934:	3304      	adds	r3, #4
 800e936:	2104      	movs	r1, #4
 800e938:	60a2      	str	r2, [r4, #8]
 800e93a:	6123      	str	r3, [r4, #16]
 800e93c:	7561      	strb	r1, [r4, #21]
 800e93e:	7da0      	ldrb	r0, [r4, #22]
 800e940:	f080 0001 	eor.w	r0, r0, #1
 800e944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	602b      	str	r3, [r5, #0]
 800e94c:	e7ef      	b.n	800e92e <ucdr_deserialize_endian_float+0xbe>
 800e94e:	68a2      	ldr	r2, [r4, #8]
 800e950:	6923      	ldr	r3, [r4, #16]
 800e952:	7da0      	ldrb	r0, [r4, #22]
 800e954:	f884 9015 	strb.w	r9, [r4, #21]
 800e958:	eba2 0208 	sub.w	r2, r2, r8
 800e95c:	eba3 0308 	sub.w	r3, r3, r8
 800e960:	60a2      	str	r2, [r4, #8]
 800e962:	6123      	str	r3, [r4, #16]
 800e964:	f080 0001 	eor.w	r0, r0, #1
 800e968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e96c:	68a3      	ldr	r3, [r4, #8]
 800e96e:	789b      	ldrb	r3, [r3, #2]
 800e970:	706b      	strb	r3, [r5, #1]
 800e972:	1cab      	adds	r3, r5, #2
 800e974:	68a2      	ldr	r2, [r4, #8]
 800e976:	7852      	ldrb	r2, [r2, #1]
 800e978:	f803 2b01 	strb.w	r2, [r3], #1
 800e97c:	68a2      	ldr	r2, [r4, #8]
 800e97e:	7812      	ldrb	r2, [r2, #0]
 800e980:	701a      	strb	r2, [r3, #0]
 800e982:	e7b2      	b.n	800e8ea <ucdr_deserialize_endian_float+0x7a>
 800e984:	4639      	mov	r1, r7
 800e986:	4642      	mov	r2, r8
 800e988:	4628      	mov	r0, r5
 800e98a:	f00b f8d4 	bl	8019b36 <memcpy>
 800e98e:	68a1      	ldr	r1, [r4, #8]
 800e990:	4652      	mov	r2, sl
 800e992:	eb05 0008 	add.w	r0, r5, r8
 800e996:	f00b f8ce 	bl	8019b36 <memcpy>
 800e99a:	e7a6      	b.n	800e8ea <ucdr_deserialize_endian_float+0x7a>

0800e99c <ucdr_serialize_double>:
 800e99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a0:	2108      	movs	r1, #8
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	ed8d 0b00 	vstr	d0, [sp]
 800e9aa:	f000 fb8d 	bl	800f0c8 <ucdr_buffer_alignment>
 800e9ae:	4601      	mov	r1, r0
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	7d67      	ldrb	r7, [r4, #21]
 800e9b4:	f000 fbcc 	bl	800f150 <ucdr_advance_buffer>
 800e9b8:	2108      	movs	r1, #8
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	f000 fb24 	bl	800f008 <ucdr_check_buffer_available_for>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	d14e      	bne.n	800ea62 <ucdr_serialize_double+0xc6>
 800e9c4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e9c8:	42ab      	cmp	r3, r5
 800e9ca:	d945      	bls.n	800ea58 <ucdr_serialize_double+0xbc>
 800e9cc:	1b5e      	subs	r6, r3, r5
 800e9ce:	60a3      	str	r3, [r4, #8]
 800e9d0:	6923      	ldr	r3, [r4, #16]
 800e9d2:	f1c6 0808 	rsb	r8, r6, #8
 800e9d6:	4433      	add	r3, r6
 800e9d8:	6123      	str	r3, [r4, #16]
 800e9da:	4641      	mov	r1, r8
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f000 fb1f 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d074      	beq.n	800ead0 <ucdr_serialize_double+0x134>
 800e9e6:	7d23      	ldrb	r3, [r4, #20]
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	f000 809b 	beq.w	800eb24 <ucdr_serialize_double+0x188>
 800e9ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e9f2:	702b      	strb	r3, [r5, #0]
 800e9f4:	2e00      	cmp	r6, #0
 800e9f6:	d078      	beq.n	800eaea <ucdr_serialize_double+0x14e>
 800e9f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e9fc:	706b      	strb	r3, [r5, #1]
 800e9fe:	2e01      	cmp	r6, #1
 800ea00:	d077      	beq.n	800eaf2 <ucdr_serialize_double+0x156>
 800ea02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ea06:	70ab      	strb	r3, [r5, #2]
 800ea08:	2e02      	cmp	r6, #2
 800ea0a:	d076      	beq.n	800eafa <ucdr_serialize_double+0x15e>
 800ea0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ea10:	70eb      	strb	r3, [r5, #3]
 800ea12:	2e03      	cmp	r6, #3
 800ea14:	d075      	beq.n	800eb02 <ucdr_serialize_double+0x166>
 800ea16:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ea1a:	712b      	strb	r3, [r5, #4]
 800ea1c:	2e04      	cmp	r6, #4
 800ea1e:	d074      	beq.n	800eb0a <ucdr_serialize_double+0x16e>
 800ea20:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ea24:	716b      	strb	r3, [r5, #5]
 800ea26:	2e05      	cmp	r6, #5
 800ea28:	d073      	beq.n	800eb12 <ucdr_serialize_double+0x176>
 800ea2a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ea2e:	71ab      	strb	r3, [r5, #6]
 800ea30:	2e06      	cmp	r6, #6
 800ea32:	d072      	beq.n	800eb1a <ucdr_serialize_double+0x17e>
 800ea34:	f89d 3000 	ldrb.w	r3, [sp]
 800ea38:	71eb      	strb	r3, [r5, #7]
 800ea3a:	6923      	ldr	r3, [r4, #16]
 800ea3c:	68a2      	ldr	r2, [r4, #8]
 800ea3e:	7da0      	ldrb	r0, [r4, #22]
 800ea40:	3308      	adds	r3, #8
 800ea42:	1b9e      	subs	r6, r3, r6
 800ea44:	4442      	add	r2, r8
 800ea46:	2308      	movs	r3, #8
 800ea48:	f080 0001 	eor.w	r0, r0, #1
 800ea4c:	60a2      	str	r2, [r4, #8]
 800ea4e:	6126      	str	r6, [r4, #16]
 800ea50:	7563      	strb	r3, [r4, #21]
 800ea52:	b002      	add	sp, #8
 800ea54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea58:	2108      	movs	r1, #8
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f000 fae0 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800ea60:	b350      	cbz	r0, 800eab8 <ucdr_serialize_double+0x11c>
 800ea62:	7d23      	ldrb	r3, [r4, #20]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d02d      	beq.n	800eac4 <ucdr_serialize_double+0x128>
 800ea68:	68a3      	ldr	r3, [r4, #8]
 800ea6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea6e:	701a      	strb	r2, [r3, #0]
 800ea70:	68a3      	ldr	r3, [r4, #8]
 800ea72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea76:	705a      	strb	r2, [r3, #1]
 800ea78:	68a3      	ldr	r3, [r4, #8]
 800ea7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ea7e:	709a      	strb	r2, [r3, #2]
 800ea80:	68a3      	ldr	r3, [r4, #8]
 800ea82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ea86:	70da      	strb	r2, [r3, #3]
 800ea88:	68a3      	ldr	r3, [r4, #8]
 800ea8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ea8e:	711a      	strb	r2, [r3, #4]
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ea96:	715a      	strb	r2, [r3, #5]
 800ea98:	68a3      	ldr	r3, [r4, #8]
 800ea9a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ea9e:	719a      	strb	r2, [r3, #6]
 800eaa0:	68a3      	ldr	r3, [r4, #8]
 800eaa2:	f89d 2000 	ldrb.w	r2, [sp]
 800eaa6:	71da      	strb	r2, [r3, #7]
 800eaa8:	68a2      	ldr	r2, [r4, #8]
 800eaaa:	6923      	ldr	r3, [r4, #16]
 800eaac:	3208      	adds	r2, #8
 800eaae:	3308      	adds	r3, #8
 800eab0:	2108      	movs	r1, #8
 800eab2:	60a2      	str	r2, [r4, #8]
 800eab4:	6123      	str	r3, [r4, #16]
 800eab6:	7561      	strb	r1, [r4, #21]
 800eab8:	7da0      	ldrb	r0, [r4, #22]
 800eaba:	f080 0001 	eor.w	r0, r0, #1
 800eabe:	b002      	add	sp, #8
 800eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac4:	466b      	mov	r3, sp
 800eac6:	cb03      	ldmia	r3!, {r0, r1}
 800eac8:	68a3      	ldr	r3, [r4, #8]
 800eaca:	6018      	str	r0, [r3, #0]
 800eacc:	6059      	str	r1, [r3, #4]
 800eace:	e7eb      	b.n	800eaa8 <ucdr_serialize_double+0x10c>
 800ead0:	68a2      	ldr	r2, [r4, #8]
 800ead2:	6923      	ldr	r3, [r4, #16]
 800ead4:	7da0      	ldrb	r0, [r4, #22]
 800ead6:	7567      	strb	r7, [r4, #21]
 800ead8:	1b92      	subs	r2, r2, r6
 800eada:	1b9b      	subs	r3, r3, r6
 800eadc:	f080 0001 	eor.w	r0, r0, #1
 800eae0:	60a2      	str	r2, [r4, #8]
 800eae2:	6123      	str	r3, [r4, #16]
 800eae4:	b002      	add	sp, #8
 800eae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaea:	68a3      	ldr	r3, [r4, #8]
 800eaec:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eaf0:	701a      	strb	r2, [r3, #0]
 800eaf2:	68a3      	ldr	r3, [r4, #8]
 800eaf4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	68a3      	ldr	r3, [r4, #8]
 800eafc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eb00:	701a      	strb	r2, [r3, #0]
 800eb02:	68a3      	ldr	r3, [r4, #8]
 800eb04:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eb08:	701a      	strb	r2, [r3, #0]
 800eb0a:	68a3      	ldr	r3, [r4, #8]
 800eb0c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eb10:	701a      	strb	r2, [r3, #0]
 800eb12:	68a3      	ldr	r3, [r4, #8]
 800eb14:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800eb18:	701a      	strb	r2, [r3, #0]
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	f89d 2000 	ldrb.w	r2, [sp]
 800eb20:	701a      	strb	r2, [r3, #0]
 800eb22:	e78a      	b.n	800ea3a <ucdr_serialize_double+0x9e>
 800eb24:	4628      	mov	r0, r5
 800eb26:	466d      	mov	r5, sp
 800eb28:	4629      	mov	r1, r5
 800eb2a:	4632      	mov	r2, r6
 800eb2c:	f00b f803 	bl	8019b36 <memcpy>
 800eb30:	68a0      	ldr	r0, [r4, #8]
 800eb32:	4642      	mov	r2, r8
 800eb34:	19a9      	adds	r1, r5, r6
 800eb36:	f00a fffe 	bl	8019b36 <memcpy>
 800eb3a:	e77e      	b.n	800ea3a <ucdr_serialize_double+0x9e>

0800eb3c <ucdr_serialize_endian_double>:
 800eb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb40:	460e      	mov	r6, r1
 800eb42:	b083      	sub	sp, #12
 800eb44:	2108      	movs	r1, #8
 800eb46:	4604      	mov	r4, r0
 800eb48:	ed8d 0b00 	vstr	d0, [sp]
 800eb4c:	f000 fabc 	bl	800f0c8 <ucdr_buffer_alignment>
 800eb50:	4601      	mov	r1, r0
 800eb52:	4620      	mov	r0, r4
 800eb54:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb58:	f000 fafa 	bl	800f150 <ucdr_advance_buffer>
 800eb5c:	2108      	movs	r1, #8
 800eb5e:	4620      	mov	r0, r4
 800eb60:	f000 fa52 	bl	800f008 <ucdr_check_buffer_available_for>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d14d      	bne.n	800ec04 <ucdr_serialize_endian_double+0xc8>
 800eb68:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800eb6c:	42bd      	cmp	r5, r7
 800eb6e:	d944      	bls.n	800ebfa <ucdr_serialize_endian_double+0xbe>
 800eb70:	6923      	ldr	r3, [r4, #16]
 800eb72:	60a5      	str	r5, [r4, #8]
 800eb74:	1bed      	subs	r5, r5, r7
 800eb76:	442b      	add	r3, r5
 800eb78:	f1c5 0908 	rsb	r9, r5, #8
 800eb7c:	6123      	str	r3, [r4, #16]
 800eb7e:	4649      	mov	r1, r9
 800eb80:	4620      	mov	r0, r4
 800eb82:	f000 fa4d 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d072      	beq.n	800ec70 <ucdr_serialize_endian_double+0x134>
 800eb8a:	2e01      	cmp	r6, #1
 800eb8c:	f000 809b 	beq.w	800ecc6 <ucdr_serialize_endian_double+0x18a>
 800eb90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb94:	703b      	strb	r3, [r7, #0]
 800eb96:	2d00      	cmp	r5, #0
 800eb98:	d078      	beq.n	800ec8c <ucdr_serialize_endian_double+0x150>
 800eb9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb9e:	707b      	strb	r3, [r7, #1]
 800eba0:	2d01      	cmp	r5, #1
 800eba2:	d077      	beq.n	800ec94 <ucdr_serialize_endian_double+0x158>
 800eba4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eba8:	70bb      	strb	r3, [r7, #2]
 800ebaa:	2d02      	cmp	r5, #2
 800ebac:	d076      	beq.n	800ec9c <ucdr_serialize_endian_double+0x160>
 800ebae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ebb2:	70fb      	strb	r3, [r7, #3]
 800ebb4:	2d03      	cmp	r5, #3
 800ebb6:	d075      	beq.n	800eca4 <ucdr_serialize_endian_double+0x168>
 800ebb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ebbc:	713b      	strb	r3, [r7, #4]
 800ebbe:	2d04      	cmp	r5, #4
 800ebc0:	d074      	beq.n	800ecac <ucdr_serialize_endian_double+0x170>
 800ebc2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ebc6:	717b      	strb	r3, [r7, #5]
 800ebc8:	2d05      	cmp	r5, #5
 800ebca:	d073      	beq.n	800ecb4 <ucdr_serialize_endian_double+0x178>
 800ebcc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ebd0:	71bb      	strb	r3, [r7, #6]
 800ebd2:	2d06      	cmp	r5, #6
 800ebd4:	d072      	beq.n	800ecbc <ucdr_serialize_endian_double+0x180>
 800ebd6:	f89d 3000 	ldrb.w	r3, [sp]
 800ebda:	71fb      	strb	r3, [r7, #7]
 800ebdc:	6923      	ldr	r3, [r4, #16]
 800ebde:	68a2      	ldr	r2, [r4, #8]
 800ebe0:	7da0      	ldrb	r0, [r4, #22]
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	1b5d      	subs	r5, r3, r5
 800ebe6:	444a      	add	r2, r9
 800ebe8:	2308      	movs	r3, #8
 800ebea:	f080 0001 	eor.w	r0, r0, #1
 800ebee:	60a2      	str	r2, [r4, #8]
 800ebf0:	6125      	str	r5, [r4, #16]
 800ebf2:	7563      	strb	r3, [r4, #21]
 800ebf4:	b003      	add	sp, #12
 800ebf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebfa:	2108      	movs	r1, #8
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f000 fa0f 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800ec02:	b348      	cbz	r0, 800ec58 <ucdr_serialize_endian_double+0x11c>
 800ec04:	2e01      	cmp	r6, #1
 800ec06:	d02d      	beq.n	800ec64 <ucdr_serialize_endian_double+0x128>
 800ec08:	68a3      	ldr	r3, [r4, #8]
 800ec0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ec0e:	701a      	strb	r2, [r3, #0]
 800ec10:	68a3      	ldr	r3, [r4, #8]
 800ec12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec16:	705a      	strb	r2, [r3, #1]
 800ec18:	68a3      	ldr	r3, [r4, #8]
 800ec1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ec1e:	709a      	strb	r2, [r3, #2]
 800ec20:	68a3      	ldr	r3, [r4, #8]
 800ec22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ec26:	70da      	strb	r2, [r3, #3]
 800ec28:	68a3      	ldr	r3, [r4, #8]
 800ec2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ec2e:	711a      	strb	r2, [r3, #4]
 800ec30:	68a3      	ldr	r3, [r4, #8]
 800ec32:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ec36:	715a      	strb	r2, [r3, #5]
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ec3e:	719a      	strb	r2, [r3, #6]
 800ec40:	68a3      	ldr	r3, [r4, #8]
 800ec42:	f89d 2000 	ldrb.w	r2, [sp]
 800ec46:	71da      	strb	r2, [r3, #7]
 800ec48:	68a2      	ldr	r2, [r4, #8]
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	3208      	adds	r2, #8
 800ec4e:	3308      	adds	r3, #8
 800ec50:	2108      	movs	r1, #8
 800ec52:	60a2      	str	r2, [r4, #8]
 800ec54:	6123      	str	r3, [r4, #16]
 800ec56:	7561      	strb	r1, [r4, #21]
 800ec58:	7da0      	ldrb	r0, [r4, #22]
 800ec5a:	f080 0001 	eor.w	r0, r0, #1
 800ec5e:	b003      	add	sp, #12
 800ec60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec64:	466b      	mov	r3, sp
 800ec66:	cb03      	ldmia	r3!, {r0, r1}
 800ec68:	68a3      	ldr	r3, [r4, #8]
 800ec6a:	6018      	str	r0, [r3, #0]
 800ec6c:	6059      	str	r1, [r3, #4]
 800ec6e:	e7eb      	b.n	800ec48 <ucdr_serialize_endian_double+0x10c>
 800ec70:	68a2      	ldr	r2, [r4, #8]
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	7da0      	ldrb	r0, [r4, #22]
 800ec76:	f884 8015 	strb.w	r8, [r4, #21]
 800ec7a:	1b52      	subs	r2, r2, r5
 800ec7c:	1b5b      	subs	r3, r3, r5
 800ec7e:	f080 0001 	eor.w	r0, r0, #1
 800ec82:	60a2      	str	r2, [r4, #8]
 800ec84:	6123      	str	r3, [r4, #16]
 800ec86:	b003      	add	sp, #12
 800ec88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec8c:	68a3      	ldr	r3, [r4, #8]
 800ec8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec92:	701a      	strb	r2, [r3, #0]
 800ec94:	68a3      	ldr	r3, [r4, #8]
 800ec96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ec9a:	701a      	strb	r2, [r3, #0]
 800ec9c:	68a3      	ldr	r3, [r4, #8]
 800ec9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eca2:	701a      	strb	r2, [r3, #0]
 800eca4:	68a3      	ldr	r3, [r4, #8]
 800eca6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ecaa:	701a      	strb	r2, [r3, #0]
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ecb2:	701a      	strb	r2, [r3, #0]
 800ecb4:	68a3      	ldr	r3, [r4, #8]
 800ecb6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ecba:	701a      	strb	r2, [r3, #0]
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	f89d 2000 	ldrb.w	r2, [sp]
 800ecc2:	701a      	strb	r2, [r3, #0]
 800ecc4:	e78a      	b.n	800ebdc <ucdr_serialize_endian_double+0xa0>
 800ecc6:	466e      	mov	r6, sp
 800ecc8:	4631      	mov	r1, r6
 800ecca:	462a      	mov	r2, r5
 800eccc:	4638      	mov	r0, r7
 800ecce:	f00a ff32 	bl	8019b36 <memcpy>
 800ecd2:	68a0      	ldr	r0, [r4, #8]
 800ecd4:	464a      	mov	r2, r9
 800ecd6:	1971      	adds	r1, r6, r5
 800ecd8:	f00a ff2d 	bl	8019b36 <memcpy>
 800ecdc:	e77e      	b.n	800ebdc <ucdr_serialize_endian_double+0xa0>
 800ecde:	bf00      	nop

0800ece0 <ucdr_deserialize_double>:
 800ece0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece4:	460d      	mov	r5, r1
 800ece6:	2108      	movs	r1, #8
 800ece8:	4604      	mov	r4, r0
 800ecea:	f000 f9ed 	bl	800f0c8 <ucdr_buffer_alignment>
 800ecee:	4601      	mov	r1, r0
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ecf6:	f000 fa2b 	bl	800f150 <ucdr_advance_buffer>
 800ecfa:	2108      	movs	r1, #8
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f000 f983 	bl	800f008 <ucdr_check_buffer_available_for>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d151      	bne.n	800edaa <ucdr_deserialize_double+0xca>
 800ed06:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ed0a:	42be      	cmp	r6, r7
 800ed0c:	d948      	bls.n	800eda0 <ucdr_deserialize_double+0xc0>
 800ed0e:	6923      	ldr	r3, [r4, #16]
 800ed10:	60a6      	str	r6, [r4, #8]
 800ed12:	1bf6      	subs	r6, r6, r7
 800ed14:	4433      	add	r3, r6
 800ed16:	f1c6 0808 	rsb	r8, r6, #8
 800ed1a:	6123      	str	r3, [r4, #16]
 800ed1c:	4641      	mov	r1, r8
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 f97e 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d06d      	beq.n	800ee04 <ucdr_deserialize_double+0x124>
 800ed28:	7d23      	ldrb	r3, [r4, #20]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	f000 8093 	beq.w	800ee56 <ucdr_deserialize_double+0x176>
 800ed30:	79fb      	ldrb	r3, [r7, #7]
 800ed32:	702b      	strb	r3, [r5, #0]
 800ed34:	2e00      	cmp	r6, #0
 800ed36:	d072      	beq.n	800ee1e <ucdr_deserialize_double+0x13e>
 800ed38:	79bb      	ldrb	r3, [r7, #6]
 800ed3a:	706b      	strb	r3, [r5, #1]
 800ed3c:	2e01      	cmp	r6, #1
 800ed3e:	f105 0302 	add.w	r3, r5, #2
 800ed42:	d070      	beq.n	800ee26 <ucdr_deserialize_double+0x146>
 800ed44:	797b      	ldrb	r3, [r7, #5]
 800ed46:	70ab      	strb	r3, [r5, #2]
 800ed48:	2e02      	cmp	r6, #2
 800ed4a:	f105 0303 	add.w	r3, r5, #3
 800ed4e:	d06e      	beq.n	800ee2e <ucdr_deserialize_double+0x14e>
 800ed50:	793b      	ldrb	r3, [r7, #4]
 800ed52:	70eb      	strb	r3, [r5, #3]
 800ed54:	2e03      	cmp	r6, #3
 800ed56:	f105 0304 	add.w	r3, r5, #4
 800ed5a:	d06c      	beq.n	800ee36 <ucdr_deserialize_double+0x156>
 800ed5c:	78fb      	ldrb	r3, [r7, #3]
 800ed5e:	712b      	strb	r3, [r5, #4]
 800ed60:	2e04      	cmp	r6, #4
 800ed62:	f105 0305 	add.w	r3, r5, #5
 800ed66:	d06a      	beq.n	800ee3e <ucdr_deserialize_double+0x15e>
 800ed68:	78bb      	ldrb	r3, [r7, #2]
 800ed6a:	716b      	strb	r3, [r5, #5]
 800ed6c:	2e05      	cmp	r6, #5
 800ed6e:	f105 0306 	add.w	r3, r5, #6
 800ed72:	d068      	beq.n	800ee46 <ucdr_deserialize_double+0x166>
 800ed74:	787b      	ldrb	r3, [r7, #1]
 800ed76:	71ab      	strb	r3, [r5, #6]
 800ed78:	2e06      	cmp	r6, #6
 800ed7a:	f105 0307 	add.w	r3, r5, #7
 800ed7e:	d066      	beq.n	800ee4e <ucdr_deserialize_double+0x16e>
 800ed80:	783b      	ldrb	r3, [r7, #0]
 800ed82:	71eb      	strb	r3, [r5, #7]
 800ed84:	6923      	ldr	r3, [r4, #16]
 800ed86:	68a2      	ldr	r2, [r4, #8]
 800ed88:	7da0      	ldrb	r0, [r4, #22]
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	1b9e      	subs	r6, r3, r6
 800ed8e:	2308      	movs	r3, #8
 800ed90:	4442      	add	r2, r8
 800ed92:	7563      	strb	r3, [r4, #21]
 800ed94:	60a2      	str	r2, [r4, #8]
 800ed96:	6126      	str	r6, [r4, #16]
 800ed98:	f080 0001 	eor.w	r0, r0, #1
 800ed9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda0:	2108      	movs	r1, #8
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 f93c 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800eda8:	b310      	cbz	r0, 800edf0 <ucdr_deserialize_double+0x110>
 800edaa:	7d23      	ldrb	r3, [r4, #20]
 800edac:	2b01      	cmp	r3, #1
 800edae:	68a3      	ldr	r3, [r4, #8]
 800edb0:	d023      	beq.n	800edfa <ucdr_deserialize_double+0x11a>
 800edb2:	79db      	ldrb	r3, [r3, #7]
 800edb4:	702b      	strb	r3, [r5, #0]
 800edb6:	68a3      	ldr	r3, [r4, #8]
 800edb8:	799b      	ldrb	r3, [r3, #6]
 800edba:	706b      	strb	r3, [r5, #1]
 800edbc:	68a3      	ldr	r3, [r4, #8]
 800edbe:	795b      	ldrb	r3, [r3, #5]
 800edc0:	70ab      	strb	r3, [r5, #2]
 800edc2:	68a3      	ldr	r3, [r4, #8]
 800edc4:	791b      	ldrb	r3, [r3, #4]
 800edc6:	70eb      	strb	r3, [r5, #3]
 800edc8:	68a3      	ldr	r3, [r4, #8]
 800edca:	78db      	ldrb	r3, [r3, #3]
 800edcc:	712b      	strb	r3, [r5, #4]
 800edce:	68a3      	ldr	r3, [r4, #8]
 800edd0:	789b      	ldrb	r3, [r3, #2]
 800edd2:	716b      	strb	r3, [r5, #5]
 800edd4:	68a3      	ldr	r3, [r4, #8]
 800edd6:	785b      	ldrb	r3, [r3, #1]
 800edd8:	71ab      	strb	r3, [r5, #6]
 800edda:	68a3      	ldr	r3, [r4, #8]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	71eb      	strb	r3, [r5, #7]
 800ede0:	68a2      	ldr	r2, [r4, #8]
 800ede2:	6923      	ldr	r3, [r4, #16]
 800ede4:	3208      	adds	r2, #8
 800ede6:	3308      	adds	r3, #8
 800ede8:	2108      	movs	r1, #8
 800edea:	60a2      	str	r2, [r4, #8]
 800edec:	6123      	str	r3, [r4, #16]
 800edee:	7561      	strb	r1, [r4, #21]
 800edf0:	7da0      	ldrb	r0, [r4, #22]
 800edf2:	f080 0001 	eor.w	r0, r0, #1
 800edf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	606b      	str	r3, [r5, #4]
 800ee00:	602a      	str	r2, [r5, #0]
 800ee02:	e7ed      	b.n	800ede0 <ucdr_deserialize_double+0x100>
 800ee04:	68a2      	ldr	r2, [r4, #8]
 800ee06:	6923      	ldr	r3, [r4, #16]
 800ee08:	7da0      	ldrb	r0, [r4, #22]
 800ee0a:	f884 9015 	strb.w	r9, [r4, #21]
 800ee0e:	1b92      	subs	r2, r2, r6
 800ee10:	1b9b      	subs	r3, r3, r6
 800ee12:	60a2      	str	r2, [r4, #8]
 800ee14:	6123      	str	r3, [r4, #16]
 800ee16:	f080 0001 	eor.w	r0, r0, #1
 800ee1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee1e:	68a3      	ldr	r3, [r4, #8]
 800ee20:	799b      	ldrb	r3, [r3, #6]
 800ee22:	706b      	strb	r3, [r5, #1]
 800ee24:	1cab      	adds	r3, r5, #2
 800ee26:	68a2      	ldr	r2, [r4, #8]
 800ee28:	7952      	ldrb	r2, [r2, #5]
 800ee2a:	f803 2b01 	strb.w	r2, [r3], #1
 800ee2e:	68a2      	ldr	r2, [r4, #8]
 800ee30:	7912      	ldrb	r2, [r2, #4]
 800ee32:	f803 2b01 	strb.w	r2, [r3], #1
 800ee36:	68a2      	ldr	r2, [r4, #8]
 800ee38:	78d2      	ldrb	r2, [r2, #3]
 800ee3a:	f803 2b01 	strb.w	r2, [r3], #1
 800ee3e:	68a2      	ldr	r2, [r4, #8]
 800ee40:	7892      	ldrb	r2, [r2, #2]
 800ee42:	f803 2b01 	strb.w	r2, [r3], #1
 800ee46:	68a2      	ldr	r2, [r4, #8]
 800ee48:	7852      	ldrb	r2, [r2, #1]
 800ee4a:	f803 2b01 	strb.w	r2, [r3], #1
 800ee4e:	68a2      	ldr	r2, [r4, #8]
 800ee50:	7812      	ldrb	r2, [r2, #0]
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	e796      	b.n	800ed84 <ucdr_deserialize_double+0xa4>
 800ee56:	4639      	mov	r1, r7
 800ee58:	4632      	mov	r2, r6
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f00a fe6b 	bl	8019b36 <memcpy>
 800ee60:	68a1      	ldr	r1, [r4, #8]
 800ee62:	4642      	mov	r2, r8
 800ee64:	19a8      	adds	r0, r5, r6
 800ee66:	f00a fe66 	bl	8019b36 <memcpy>
 800ee6a:	e78b      	b.n	800ed84 <ucdr_deserialize_double+0xa4>

0800ee6c <ucdr_deserialize_endian_double>:
 800ee6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee70:	460f      	mov	r7, r1
 800ee72:	2108      	movs	r1, #8
 800ee74:	4604      	mov	r4, r0
 800ee76:	4615      	mov	r5, r2
 800ee78:	f000 f926 	bl	800f0c8 <ucdr_buffer_alignment>
 800ee7c:	4601      	mov	r1, r0
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ee84:	f000 f964 	bl	800f150 <ucdr_advance_buffer>
 800ee88:	2108      	movs	r1, #8
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f000 f8bc 	bl	800f008 <ucdr_check_buffer_available_for>
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d159      	bne.n	800ef48 <ucdr_deserialize_endian_double+0xdc>
 800ee94:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800ee98:	4546      	cmp	r6, r8
 800ee9a:	d950      	bls.n	800ef3e <ucdr_deserialize_endian_double+0xd2>
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	60a6      	str	r6, [r4, #8]
 800eea0:	eba6 0608 	sub.w	r6, r6, r8
 800eea4:	4433      	add	r3, r6
 800eea6:	f1c6 0a08 	rsb	sl, r6, #8
 800eeaa:	6123      	str	r3, [r4, #16]
 800eeac:	4651      	mov	r1, sl
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f000 f8b6 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	d073      	beq.n	800efa0 <ucdr_deserialize_endian_double+0x134>
 800eeb8:	2f01      	cmp	r7, #1
 800eeba:	f000 809a 	beq.w	800eff2 <ucdr_deserialize_endian_double+0x186>
 800eebe:	f898 3007 	ldrb.w	r3, [r8, #7]
 800eec2:	702b      	strb	r3, [r5, #0]
 800eec4:	2e00      	cmp	r6, #0
 800eec6:	d078      	beq.n	800efba <ucdr_deserialize_endian_double+0x14e>
 800eec8:	f898 3006 	ldrb.w	r3, [r8, #6]
 800eecc:	706b      	strb	r3, [r5, #1]
 800eece:	2e01      	cmp	r6, #1
 800eed0:	f105 0302 	add.w	r3, r5, #2
 800eed4:	d075      	beq.n	800efc2 <ucdr_deserialize_endian_double+0x156>
 800eed6:	f898 3005 	ldrb.w	r3, [r8, #5]
 800eeda:	70ab      	strb	r3, [r5, #2]
 800eedc:	2e02      	cmp	r6, #2
 800eede:	f105 0303 	add.w	r3, r5, #3
 800eee2:	d072      	beq.n	800efca <ucdr_deserialize_endian_double+0x15e>
 800eee4:	f898 3004 	ldrb.w	r3, [r8, #4]
 800eee8:	70eb      	strb	r3, [r5, #3]
 800eeea:	2e03      	cmp	r6, #3
 800eeec:	f105 0304 	add.w	r3, r5, #4
 800eef0:	d06f      	beq.n	800efd2 <ucdr_deserialize_endian_double+0x166>
 800eef2:	f898 3003 	ldrb.w	r3, [r8, #3]
 800eef6:	712b      	strb	r3, [r5, #4]
 800eef8:	2e04      	cmp	r6, #4
 800eefa:	f105 0305 	add.w	r3, r5, #5
 800eefe:	d06c      	beq.n	800efda <ucdr_deserialize_endian_double+0x16e>
 800ef00:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ef04:	716b      	strb	r3, [r5, #5]
 800ef06:	2e05      	cmp	r6, #5
 800ef08:	f105 0306 	add.w	r3, r5, #6
 800ef0c:	d069      	beq.n	800efe2 <ucdr_deserialize_endian_double+0x176>
 800ef0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ef12:	71ab      	strb	r3, [r5, #6]
 800ef14:	2e06      	cmp	r6, #6
 800ef16:	f105 0307 	add.w	r3, r5, #7
 800ef1a:	d066      	beq.n	800efea <ucdr_deserialize_endian_double+0x17e>
 800ef1c:	f898 3000 	ldrb.w	r3, [r8]
 800ef20:	71eb      	strb	r3, [r5, #7]
 800ef22:	6923      	ldr	r3, [r4, #16]
 800ef24:	68a2      	ldr	r2, [r4, #8]
 800ef26:	7da0      	ldrb	r0, [r4, #22]
 800ef28:	3308      	adds	r3, #8
 800ef2a:	1b9e      	subs	r6, r3, r6
 800ef2c:	2308      	movs	r3, #8
 800ef2e:	4452      	add	r2, sl
 800ef30:	7563      	strb	r3, [r4, #21]
 800ef32:	60a2      	str	r2, [r4, #8]
 800ef34:	6126      	str	r6, [r4, #16]
 800ef36:	f080 0001 	eor.w	r0, r0, #1
 800ef3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef3e:	2108      	movs	r1, #8
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 f86d 	bl	800f020 <ucdr_check_final_buffer_behavior>
 800ef46:	b308      	cbz	r0, 800ef8c <ucdr_deserialize_endian_double+0x120>
 800ef48:	2f01      	cmp	r7, #1
 800ef4a:	68a3      	ldr	r3, [r4, #8]
 800ef4c:	d023      	beq.n	800ef96 <ucdr_deserialize_endian_double+0x12a>
 800ef4e:	79db      	ldrb	r3, [r3, #7]
 800ef50:	702b      	strb	r3, [r5, #0]
 800ef52:	68a3      	ldr	r3, [r4, #8]
 800ef54:	799b      	ldrb	r3, [r3, #6]
 800ef56:	706b      	strb	r3, [r5, #1]
 800ef58:	68a3      	ldr	r3, [r4, #8]
 800ef5a:	795b      	ldrb	r3, [r3, #5]
 800ef5c:	70ab      	strb	r3, [r5, #2]
 800ef5e:	68a3      	ldr	r3, [r4, #8]
 800ef60:	791b      	ldrb	r3, [r3, #4]
 800ef62:	70eb      	strb	r3, [r5, #3]
 800ef64:	68a3      	ldr	r3, [r4, #8]
 800ef66:	78db      	ldrb	r3, [r3, #3]
 800ef68:	712b      	strb	r3, [r5, #4]
 800ef6a:	68a3      	ldr	r3, [r4, #8]
 800ef6c:	789b      	ldrb	r3, [r3, #2]
 800ef6e:	716b      	strb	r3, [r5, #5]
 800ef70:	68a3      	ldr	r3, [r4, #8]
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	71ab      	strb	r3, [r5, #6]
 800ef76:	68a3      	ldr	r3, [r4, #8]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	71eb      	strb	r3, [r5, #7]
 800ef7c:	68a2      	ldr	r2, [r4, #8]
 800ef7e:	6923      	ldr	r3, [r4, #16]
 800ef80:	3208      	adds	r2, #8
 800ef82:	3308      	adds	r3, #8
 800ef84:	2108      	movs	r1, #8
 800ef86:	60a2      	str	r2, [r4, #8]
 800ef88:	6123      	str	r3, [r4, #16]
 800ef8a:	7561      	strb	r1, [r4, #21]
 800ef8c:	7da0      	ldrb	r0, [r4, #22]
 800ef8e:	f080 0001 	eor.w	r0, r0, #1
 800ef92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	606b      	str	r3, [r5, #4]
 800ef9c:	602a      	str	r2, [r5, #0]
 800ef9e:	e7ed      	b.n	800ef7c <ucdr_deserialize_endian_double+0x110>
 800efa0:	68a2      	ldr	r2, [r4, #8]
 800efa2:	6923      	ldr	r3, [r4, #16]
 800efa4:	7da0      	ldrb	r0, [r4, #22]
 800efa6:	f884 9015 	strb.w	r9, [r4, #21]
 800efaa:	1b92      	subs	r2, r2, r6
 800efac:	1b9b      	subs	r3, r3, r6
 800efae:	60a2      	str	r2, [r4, #8]
 800efb0:	6123      	str	r3, [r4, #16]
 800efb2:	f080 0001 	eor.w	r0, r0, #1
 800efb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efba:	68a3      	ldr	r3, [r4, #8]
 800efbc:	799b      	ldrb	r3, [r3, #6]
 800efbe:	706b      	strb	r3, [r5, #1]
 800efc0:	1cab      	adds	r3, r5, #2
 800efc2:	68a2      	ldr	r2, [r4, #8]
 800efc4:	7952      	ldrb	r2, [r2, #5]
 800efc6:	f803 2b01 	strb.w	r2, [r3], #1
 800efca:	68a2      	ldr	r2, [r4, #8]
 800efcc:	7912      	ldrb	r2, [r2, #4]
 800efce:	f803 2b01 	strb.w	r2, [r3], #1
 800efd2:	68a2      	ldr	r2, [r4, #8]
 800efd4:	78d2      	ldrb	r2, [r2, #3]
 800efd6:	f803 2b01 	strb.w	r2, [r3], #1
 800efda:	68a2      	ldr	r2, [r4, #8]
 800efdc:	7892      	ldrb	r2, [r2, #2]
 800efde:	f803 2b01 	strb.w	r2, [r3], #1
 800efe2:	68a2      	ldr	r2, [r4, #8]
 800efe4:	7852      	ldrb	r2, [r2, #1]
 800efe6:	f803 2b01 	strb.w	r2, [r3], #1
 800efea:	68a2      	ldr	r2, [r4, #8]
 800efec:	7812      	ldrb	r2, [r2, #0]
 800efee:	701a      	strb	r2, [r3, #0]
 800eff0:	e797      	b.n	800ef22 <ucdr_deserialize_endian_double+0xb6>
 800eff2:	4641      	mov	r1, r8
 800eff4:	4632      	mov	r2, r6
 800eff6:	4628      	mov	r0, r5
 800eff8:	f00a fd9d 	bl	8019b36 <memcpy>
 800effc:	68a1      	ldr	r1, [r4, #8]
 800effe:	4652      	mov	r2, sl
 800f000:	19a8      	adds	r0, r5, r6
 800f002:	f00a fd98 	bl	8019b36 <memcpy>
 800f006:	e78c      	b.n	800ef22 <ucdr_deserialize_endian_double+0xb6>

0800f008 <ucdr_check_buffer_available_for>:
 800f008:	7d83      	ldrb	r3, [r0, #22]
 800f00a:	b93b      	cbnz	r3, 800f01c <ucdr_check_buffer_available_for+0x14>
 800f00c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f010:	4419      	add	r1, r3
 800f012:	4288      	cmp	r0, r1
 800f014:	bf34      	ite	cc
 800f016:	2000      	movcc	r0, #0
 800f018:	2001      	movcs	r0, #1
 800f01a:	4770      	bx	lr
 800f01c:	2000      	movs	r0, #0
 800f01e:	4770      	bx	lr

0800f020 <ucdr_check_final_buffer_behavior>:
 800f020:	7d83      	ldrb	r3, [r0, #22]
 800f022:	b943      	cbnz	r3, 800f036 <ucdr_check_final_buffer_behavior+0x16>
 800f024:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f028:	4291      	cmp	r1, r2
 800f02a:	b510      	push	{r4, lr}
 800f02c:	4604      	mov	r4, r0
 800f02e:	d205      	bcs.n	800f03c <ucdr_check_final_buffer_behavior+0x1c>
 800f030:	2301      	movs	r3, #1
 800f032:	4618      	mov	r0, r3
 800f034:	bd10      	pop	{r4, pc}
 800f036:	2300      	movs	r3, #0
 800f038:	4618      	mov	r0, r3
 800f03a:	4770      	bx	lr
 800f03c:	6982      	ldr	r2, [r0, #24]
 800f03e:	b13a      	cbz	r2, 800f050 <ucdr_check_final_buffer_behavior+0x30>
 800f040:	69c1      	ldr	r1, [r0, #28]
 800f042:	4790      	blx	r2
 800f044:	f080 0301 	eor.w	r3, r0, #1
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	75a0      	strb	r0, [r4, #22]
 800f04c:	4618      	mov	r0, r3
 800f04e:	bd10      	pop	{r4, pc}
 800f050:	2001      	movs	r0, #1
 800f052:	75a0      	strb	r0, [r4, #22]
 800f054:	e7fa      	b.n	800f04c <ucdr_check_final_buffer_behavior+0x2c>
 800f056:	bf00      	nop

0800f058 <ucdr_set_on_full_buffer_callback>:
 800f058:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop

0800f060 <ucdr_init_buffer_origin_offset_endian>:
 800f060:	b410      	push	{r4}
 800f062:	9c01      	ldr	r4, [sp, #4]
 800f064:	6001      	str	r1, [r0, #0]
 800f066:	440a      	add	r2, r1
 800f068:	6042      	str	r2, [r0, #4]
 800f06a:	190a      	adds	r2, r1, r4
 800f06c:	441c      	add	r4, r3
 800f06e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f072:	6082      	str	r2, [r0, #8]
 800f074:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f078:	7503      	strb	r3, [r0, #20]
 800f07a:	2200      	movs	r2, #0
 800f07c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f084:	7542      	strb	r2, [r0, #21]
 800f086:	7582      	strb	r2, [r0, #22]
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop

0800f08c <ucdr_init_buffer_origin_offset>:
 800f08c:	b510      	push	{r4, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	9c04      	ldr	r4, [sp, #16]
 800f092:	9400      	str	r4, [sp, #0]
 800f094:	2401      	movs	r4, #1
 800f096:	9401      	str	r4, [sp, #4]
 800f098:	f7ff ffe2 	bl	800f060 <ucdr_init_buffer_origin_offset_endian>
 800f09c:	b002      	add	sp, #8
 800f09e:	bd10      	pop	{r4, pc}

0800f0a0 <ucdr_init_buffer_origin>:
 800f0a0:	b510      	push	{r4, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	2400      	movs	r4, #0
 800f0a6:	9400      	str	r4, [sp, #0]
 800f0a8:	f7ff fff0 	bl	800f08c <ucdr_init_buffer_origin_offset>
 800f0ac:	b002      	add	sp, #8
 800f0ae:	bd10      	pop	{r4, pc}

0800f0b0 <ucdr_init_buffer>:
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	f7ff bff5 	b.w	800f0a0 <ucdr_init_buffer_origin>
 800f0b6:	bf00      	nop

0800f0b8 <ucdr_alignment>:
 800f0b8:	fbb0 f3f1 	udiv	r3, r0, r1
 800f0bc:	fb03 0011 	mls	r0, r3, r1, r0
 800f0c0:	1a08      	subs	r0, r1, r0
 800f0c2:	3901      	subs	r1, #1
 800f0c4:	4008      	ands	r0, r1
 800f0c6:	4770      	bx	lr

0800f0c8 <ucdr_buffer_alignment>:
 800f0c8:	7d43      	ldrb	r3, [r0, #21]
 800f0ca:	428b      	cmp	r3, r1
 800f0cc:	d208      	bcs.n	800f0e0 <ucdr_buffer_alignment+0x18>
 800f0ce:	6900      	ldr	r0, [r0, #16]
 800f0d0:	fbb0 f3f1 	udiv	r3, r0, r1
 800f0d4:	fb01 0013 	mls	r0, r1, r3, r0
 800f0d8:	1a08      	subs	r0, r1, r0
 800f0da:	3901      	subs	r1, #1
 800f0dc:	4008      	ands	r0, r1
 800f0de:	4770      	bx	lr
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	4770      	bx	lr

0800f0e4 <ucdr_align_to>:
 800f0e4:	b538      	push	{r3, r4, r5, lr}
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	f7ff ffed 	bl	800f0c8 <ucdr_buffer_alignment>
 800f0ee:	68a3      	ldr	r3, [r4, #8]
 800f0f0:	6921      	ldr	r1, [r4, #16]
 800f0f2:	7565      	strb	r5, [r4, #21]
 800f0f4:	181a      	adds	r2, r3, r0
 800f0f6:	6863      	ldr	r3, [r4, #4]
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	4408      	add	r0, r1
 800f0fc:	bf28      	it	cs
 800f0fe:	4613      	movcs	r3, r2
 800f100:	6120      	str	r0, [r4, #16]
 800f102:	60a3      	str	r3, [r4, #8]
 800f104:	bd38      	pop	{r3, r4, r5, pc}
 800f106:	bf00      	nop

0800f108 <ucdr_buffer_length>:
 800f108:	6882      	ldr	r2, [r0, #8]
 800f10a:	6800      	ldr	r0, [r0, #0]
 800f10c:	1a10      	subs	r0, r2, r0
 800f10e:	4770      	bx	lr

0800f110 <ucdr_buffer_remaining>:
 800f110:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f114:	1a10      	subs	r0, r2, r0
 800f116:	4770      	bx	lr

0800f118 <ucdr_check_final_buffer_behavior_array>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	7d83      	ldrb	r3, [r0, #22]
 800f11c:	b963      	cbnz	r3, 800f138 <ucdr_check_final_buffer_behavior_array+0x20>
 800f11e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f122:	429a      	cmp	r2, r3
 800f124:	4604      	mov	r4, r0
 800f126:	460d      	mov	r5, r1
 800f128:	d308      	bcc.n	800f13c <ucdr_check_final_buffer_behavior_array+0x24>
 800f12a:	b139      	cbz	r1, 800f13c <ucdr_check_final_buffer_behavior_array+0x24>
 800f12c:	6983      	ldr	r3, [r0, #24]
 800f12e:	b163      	cbz	r3, 800f14a <ucdr_check_final_buffer_behavior_array+0x32>
 800f130:	69c1      	ldr	r1, [r0, #28]
 800f132:	4798      	blx	r3
 800f134:	75a0      	strb	r0, [r4, #22]
 800f136:	b108      	cbz	r0, 800f13c <ucdr_check_final_buffer_behavior_array+0x24>
 800f138:	2000      	movs	r0, #0
 800f13a:	bd38      	pop	{r3, r4, r5, pc}
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7ff ffe7 	bl	800f110 <ucdr_buffer_remaining>
 800f142:	42a8      	cmp	r0, r5
 800f144:	bf28      	it	cs
 800f146:	4628      	movcs	r0, r5
 800f148:	bd38      	pop	{r3, r4, r5, pc}
 800f14a:	2301      	movs	r3, #1
 800f14c:	7583      	strb	r3, [r0, #22]
 800f14e:	e7f3      	b.n	800f138 <ucdr_check_final_buffer_behavior_array+0x20>

0800f150 <ucdr_advance_buffer>:
 800f150:	b538      	push	{r3, r4, r5, lr}
 800f152:	4604      	mov	r4, r0
 800f154:	460d      	mov	r5, r1
 800f156:	f7ff ff57 	bl	800f008 <ucdr_check_buffer_available_for>
 800f15a:	b178      	cbz	r0, 800f17c <ucdr_advance_buffer+0x2c>
 800f15c:	6923      	ldr	r3, [r4, #16]
 800f15e:	68a2      	ldr	r2, [r4, #8]
 800f160:	442b      	add	r3, r5
 800f162:	6123      	str	r3, [r4, #16]
 800f164:	2301      	movs	r3, #1
 800f166:	442a      	add	r2, r5
 800f168:	7563      	strb	r3, [r4, #21]
 800f16a:	60a2      	str	r2, [r4, #8]
 800f16c:	bd38      	pop	{r3, r4, r5, pc}
 800f16e:	68a2      	ldr	r2, [r4, #8]
 800f170:	6923      	ldr	r3, [r4, #16]
 800f172:	4402      	add	r2, r0
 800f174:	4403      	add	r3, r0
 800f176:	1a2d      	subs	r5, r5, r0
 800f178:	60a2      	str	r2, [r4, #8]
 800f17a:	6123      	str	r3, [r4, #16]
 800f17c:	4629      	mov	r1, r5
 800f17e:	2201      	movs	r2, #1
 800f180:	4620      	mov	r0, r4
 800f182:	f7ff ffc9 	bl	800f118 <ucdr_check_final_buffer_behavior_array>
 800f186:	2800      	cmp	r0, #0
 800f188:	d1f1      	bne.n	800f16e <ucdr_advance_buffer+0x1e>
 800f18a:	2301      	movs	r3, #1
 800f18c:	7563      	strb	r3, [r4, #21]
 800f18e:	bd38      	pop	{r3, r4, r5, pc}

0800f190 <ucdr_serialize_sequence_char>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	4615      	mov	r5, r2
 800f194:	460e      	mov	r6, r1
 800f196:	7d01      	ldrb	r1, [r0, #20]
 800f198:	4604      	mov	r4, r0
 800f19a:	f7fe fe25 	bl	800dde8 <ucdr_serialize_endian_uint32_t>
 800f19e:	b90d      	cbnz	r5, 800f1a4 <ucdr_serialize_sequence_char+0x14>
 800f1a0:	2001      	movs	r0, #1
 800f1a2:	bd70      	pop	{r4, r5, r6, pc}
 800f1a4:	7d21      	ldrb	r1, [r4, #20]
 800f1a6:	462b      	mov	r3, r5
 800f1a8:	4632      	mov	r2, r6
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1b0:	f7fe b812 	b.w	800d1d8 <ucdr_serialize_endian_array_char>

0800f1b4 <ucdr_deserialize_sequence_char>:
 800f1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b8:	461d      	mov	r5, r3
 800f1ba:	4616      	mov	r6, r2
 800f1bc:	460f      	mov	r7, r1
 800f1be:	461a      	mov	r2, r3
 800f1c0:	7d01      	ldrb	r1, [r0, #20]
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	f7fe ff38 	bl	800e038 <ucdr_deserialize_endian_uint32_t>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	429e      	cmp	r6, r3
 800f1cc:	bf3c      	itt	cc
 800f1ce:	2201      	movcc	r2, #1
 800f1d0:	75a2      	strbcc	r2, [r4, #22]
 800f1d2:	b913      	cbnz	r3, 800f1da <ucdr_deserialize_sequence_char+0x26>
 800f1d4:	2001      	movs	r0, #1
 800f1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1da:	7d21      	ldrb	r1, [r4, #20]
 800f1dc:	463a      	mov	r2, r7
 800f1de:	4620      	mov	r0, r4
 800f1e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e4:	f7fe b82a 	b.w	800d23c <ucdr_deserialize_endian_array_char>

0800f1e8 <ucdr_serialize_sequence_uint8_t>:
 800f1e8:	b570      	push	{r4, r5, r6, lr}
 800f1ea:	4615      	mov	r5, r2
 800f1ec:	460e      	mov	r6, r1
 800f1ee:	7d01      	ldrb	r1, [r0, #20]
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	f7fe fdf9 	bl	800dde8 <ucdr_serialize_endian_uint32_t>
 800f1f6:	b90d      	cbnz	r5, 800f1fc <ucdr_serialize_sequence_uint8_t+0x14>
 800f1f8:	2001      	movs	r0, #1
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	7d21      	ldrb	r1, [r4, #20]
 800f1fe:	462b      	mov	r3, r5
 800f200:	4632      	mov	r2, r6
 800f202:	4620      	mov	r0, r4
 800f204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f208:	f7fe b87c 	b.w	800d304 <ucdr_serialize_endian_array_uint8_t>

0800f20c <ucdr_deserialize_sequence_uint8_t>:
 800f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f210:	461d      	mov	r5, r3
 800f212:	4616      	mov	r6, r2
 800f214:	460f      	mov	r7, r1
 800f216:	461a      	mov	r2, r3
 800f218:	7d01      	ldrb	r1, [r0, #20]
 800f21a:	4604      	mov	r4, r0
 800f21c:	f7fe ff0c 	bl	800e038 <ucdr_deserialize_endian_uint32_t>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	429e      	cmp	r6, r3
 800f224:	bf3c      	itt	cc
 800f226:	2201      	movcc	r2, #1
 800f228:	75a2      	strbcc	r2, [r4, #22]
 800f22a:	b913      	cbnz	r3, 800f232 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f22c:	2001      	movs	r0, #1
 800f22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f232:	7d21      	ldrb	r1, [r4, #20]
 800f234:	463a      	mov	r2, r7
 800f236:	4620      	mov	r0, r4
 800f238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f23c:	f7fe b8c6 	b.w	800d3cc <ucdr_deserialize_endian_array_uint8_t>

0800f240 <uxr_buffer_delete_entity>:
 800f240:	b510      	push	{r4, lr}
 800f242:	2300      	movs	r3, #0
 800f244:	b08e      	sub	sp, #56	@ 0x38
 800f246:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f24a:	2303      	movs	r3, #3
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	2204      	movs	r2, #4
 800f250:	ab06      	add	r3, sp, #24
 800f252:	4604      	mov	r4, r0
 800f254:	9103      	str	r1, [sp, #12]
 800f256:	f001 f98d 	bl	8010574 <uxr_prepare_stream_to_write_submessage>
 800f25a:	b918      	cbnz	r0, 800f264 <uxr_buffer_delete_entity+0x24>
 800f25c:	4604      	mov	r4, r0
 800f25e:	4620      	mov	r0, r4
 800f260:	b00e      	add	sp, #56	@ 0x38
 800f262:	bd10      	pop	{r4, pc}
 800f264:	9902      	ldr	r1, [sp, #8]
 800f266:	aa05      	add	r2, sp, #20
 800f268:	4620      	mov	r0, r4
 800f26a:	f001 fab9 	bl	80107e0 <uxr_init_base_object_request>
 800f26e:	a905      	add	r1, sp, #20
 800f270:	4604      	mov	r4, r0
 800f272:	a806      	add	r0, sp, #24
 800f274:	f002 fd3e 	bl	8011cf4 <uxr_serialize_DELETE_Payload>
 800f278:	4620      	mov	r0, r4
 800f27a:	b00e      	add	sp, #56	@ 0x38
 800f27c:	bd10      	pop	{r4, pc}
 800f27e:	bf00      	nop

0800f280 <uxr_common_create_entity>:
 800f280:	b510      	push	{r4, lr}
 800f282:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f286:	b08c      	sub	sp, #48	@ 0x30
 800f288:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f28c:	f1bc 0f01 	cmp.w	ip, #1
 800f290:	bf0c      	ite	eq
 800f292:	f003 0201 	andeq.w	r2, r3, #1
 800f296:	2200      	movne	r2, #0
 800f298:	330e      	adds	r3, #14
 800f29a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f29e:	9101      	str	r1, [sp, #4]
 800f2a0:	441a      	add	r2, r3
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	9903      	ldr	r1, [sp, #12]
 800f2a8:	ab04      	add	r3, sp, #16
 800f2aa:	b292      	uxth	r2, r2
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	f001 f961 	bl	8010574 <uxr_prepare_stream_to_write_submessage>
 800f2b2:	b918      	cbnz	r0, 800f2bc <uxr_common_create_entity+0x3c>
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	b00c      	add	sp, #48	@ 0x30
 800f2ba:	bd10      	pop	{r4, pc}
 800f2bc:	9902      	ldr	r1, [sp, #8]
 800f2be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f001 fa8d 	bl	80107e0 <uxr_init_base_object_request>
 800f2c6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	a804      	add	r0, sp, #16
 800f2cc:	f002 fc6e 	bl	8011bac <uxr_serialize_CREATE_Payload>
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	b00c      	add	sp, #48	@ 0x30
 800f2d4:	bd10      	pop	{r4, pc}
 800f2d6:	bf00      	nop

0800f2d8 <uxr_buffer_create_participant_bin>:
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f2de:	ac11      	add	r4, sp, #68	@ 0x44
 800f2e0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f2ea:	7223      	strb	r3, [r4, #8]
 800f2ec:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f2ee:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	4605      	mov	r5, r0
 800f2f8:	7122      	strb	r2, [r4, #4]
 800f2fa:	f88d 1014 	strb.w	r1, [sp, #20]
 800f2fe:	b1cb      	cbz	r3, 800f334 <uxr_buffer_create_participant_bin+0x5c>
 800f300:	f88d 201c 	strb.w	r2, [sp, #28]
 800f304:	9308      	str	r3, [sp, #32]
 800f306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f30a:	a915      	add	r1, sp, #84	@ 0x54
 800f30c:	a809      	add	r0, sp, #36	@ 0x24
 800f30e:	f7ff fecf 	bl	800f0b0 <ucdr_init_buffer>
 800f312:	a905      	add	r1, sp, #20
 800f314:	a809      	add	r0, sp, #36	@ 0x24
 800f316:	f001 fff7 	bl	8011308 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f31a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f31c:	9600      	str	r6, [sp, #0]
 800f31e:	9401      	str	r4, [sp, #4]
 800f320:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f324:	60e3      	str	r3, [r4, #12]
 800f326:	4628      	mov	r0, r5
 800f328:	b29b      	uxth	r3, r3
 800f32a:	f7ff ffa9 	bl	800f280 <uxr_common_create_entity>
 800f32e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f332:	bd70      	pop	{r4, r5, r6, pc}
 800f334:	f88d 301c 	strb.w	r3, [sp, #28]
 800f338:	e7e5      	b.n	800f306 <uxr_buffer_create_participant_bin+0x2e>
 800f33a:	bf00      	nop

0800f33c <uxr_buffer_create_topic_bin>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f342:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f346:	9105      	str	r1, [sp, #20]
 800f348:	4605      	mov	r5, r0
 800f34a:	a997      	add	r1, sp, #604	@ 0x25c
 800f34c:	4618      	mov	r0, r3
 800f34e:	2302      	movs	r3, #2
 800f350:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f354:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f358:	f000 f9d0 	bl	800f6fc <uxr_object_id_to_raw>
 800f35c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f35e:	9306      	str	r3, [sp, #24]
 800f360:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f362:	930a      	str	r3, [sp, #40]	@ 0x28
 800f364:	2303      	movs	r3, #3
 800f366:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f36a:	2301      	movs	r3, #1
 800f36c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f370:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f374:	a917      	add	r1, sp, #92	@ 0x5c
 800f376:	2300      	movs	r3, #0
 800f378:	a80b      	add	r0, sp, #44	@ 0x2c
 800f37a:	f88d 301c 	strb.w	r3, [sp, #28]
 800f37e:	f7ff fe97 	bl	800f0b0 <ucdr_init_buffer>
 800f382:	a906      	add	r1, sp, #24
 800f384:	a80b      	add	r0, sp, #44	@ 0x2c
 800f386:	f001 ffe1 	bl	801134c <uxr_serialize_OBJK_Topic_Binary>
 800f38a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f38c:	9316      	str	r3, [sp, #88]	@ 0x58
 800f38e:	ac13      	add	r4, sp, #76	@ 0x4c
 800f390:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f394:	9600      	str	r6, [sp, #0]
 800f396:	9401      	str	r4, [sp, #4]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	4628      	mov	r0, r5
 800f39c:	f7ff ff70 	bl	800f280 <uxr_common_create_entity>
 800f3a0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f3a4:	bd70      	pop	{r4, r5, r6, pc}
 800f3a6:	bf00      	nop

0800f3a8 <uxr_buffer_create_publisher_bin>:
 800f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3aa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	9105      	str	r1, [sp, #20]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	2603      	movs	r6, #3
 800f3b6:	a992      	add	r1, sp, #584	@ 0x248
 800f3b8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f3bc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f3c0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f3c4:	f000 f99a 	bl	800f6fc <uxr_object_id_to_raw>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3ce:	a912      	add	r1, sp, #72	@ 0x48
 800f3d0:	a806      	add	r0, sp, #24
 800f3d2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f3d6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f3da:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f3de:	f7ff fe67 	bl	800f0b0 <ucdr_init_buffer>
 800f3e2:	a993      	add	r1, sp, #588	@ 0x24c
 800f3e4:	a806      	add	r0, sp, #24
 800f3e6:	f002 f865 	bl	80114b4 <uxr_serialize_OBJK_Publisher_Binary>
 800f3ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800f3ee:	ac0e      	add	r4, sp, #56	@ 0x38
 800f3f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f3f4:	9700      	str	r7, [sp, #0]
 800f3f6:	9401      	str	r4, [sp, #4]
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	f7ff ff40 	bl	800f280 <uxr_common_create_entity>
 800f400:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f406:	bf00      	nop

0800f408 <uxr_buffer_create_subscriber_bin>:
 800f408:	b570      	push	{r4, r5, r6, lr}
 800f40a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800f40e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f412:	9105      	str	r1, [sp, #20]
 800f414:	4605      	mov	r5, r0
 800f416:	a992      	add	r1, sp, #584	@ 0x248
 800f418:	4618      	mov	r0, r3
 800f41a:	2304      	movs	r3, #4
 800f41c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800f420:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800f424:	f000 f96a 	bl	800f6fc <uxr_object_id_to_raw>
 800f428:	2300      	movs	r3, #0
 800f42a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f42e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f432:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f436:	a912      	add	r1, sp, #72	@ 0x48
 800f438:	2303      	movs	r3, #3
 800f43a:	a806      	add	r0, sp, #24
 800f43c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f440:	f7ff fe36 	bl	800f0b0 <ucdr_init_buffer>
 800f444:	a993      	add	r1, sp, #588	@ 0x24c
 800f446:	a806      	add	r0, sp, #24
 800f448:	f002 f8e4 	bl	8011614 <uxr_serialize_OBJK_Subscriber_Binary>
 800f44c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f44e:	9311      	str	r3, [sp, #68]	@ 0x44
 800f450:	ac0e      	add	r4, sp, #56	@ 0x38
 800f452:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f456:	9600      	str	r6, [sp, #0]
 800f458:	9401      	str	r4, [sp, #4]
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	4628      	mov	r0, r5
 800f45e:	f7ff ff0f 	bl	800f280 <uxr_common_create_entity>
 800f462:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800f466:	bd70      	pop	{r4, r5, r6, pc}

0800f468 <uxr_buffer_create_datawriter_bin>:
 800f468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f46c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f470:	ac1d      	add	r4, sp, #116	@ 0x74
 800f472:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f476:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f47a:	9105      	str	r1, [sp, #20]
 800f47c:	4606      	mov	r6, r0
 800f47e:	a9a1      	add	r1, sp, #644	@ 0x284
 800f480:	4618      	mov	r0, r3
 800f482:	2305      	movs	r3, #5
 800f484:	7123      	strb	r3, [r4, #4]
 800f486:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f48a:	2703      	movs	r7, #3
 800f48c:	f000 f936 	bl	800f6fc <uxr_object_id_to_raw>
 800f490:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f492:	7227      	strb	r7, [r4, #8]
 800f494:	a90e      	add	r1, sp, #56	@ 0x38
 800f496:	f000 f931 	bl	800f6fc <uxr_object_id_to_raw>
 800f49a:	2300      	movs	r3, #0
 800f49c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f4a0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f4a4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f4a8:	3d00      	subs	r5, #0
 800f4aa:	bf18      	it	ne
 800f4ac:	2501      	movne	r5, #1
 800f4ae:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f4b2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f4b6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f4ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f4be:	2301      	movs	r3, #1
 800f4c0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f4c4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f4c8:	bb8a      	cbnz	r2, 800f52e <uxr_buffer_create_datawriter_bin+0xc6>
 800f4ca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f4ce:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f4d2:	f04f 0c13 	mov.w	ip, #19
 800f4d6:	250b      	movs	r5, #11
 800f4d8:	2221      	movs	r2, #33	@ 0x21
 800f4da:	2111      	movs	r1, #17
 800f4dc:	2009      	movs	r0, #9
 800f4de:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f4e2:	b923      	cbnz	r3, 800f4ee <uxr_buffer_create_datawriter_bin+0x86>
 800f4e4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f4e8:	4672      	mov	r2, lr
 800f4ea:	4661      	mov	r1, ip
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d025      	beq.n	800f542 <uxr_buffer_create_datawriter_bin+0xda>
 800f4f6:	2b03      	cmp	r3, #3
 800f4f8:	d029      	beq.n	800f54e <uxr_buffer_create_datawriter_bin+0xe6>
 800f4fa:	b32b      	cbz	r3, 800f548 <uxr_buffer_create_datawriter_bin+0xe0>
 800f4fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f500:	a921      	add	r1, sp, #132	@ 0x84
 800f502:	a806      	add	r0, sp, #24
 800f504:	f7ff fdd4 	bl	800f0b0 <ucdr_init_buffer>
 800f508:	a90e      	add	r1, sp, #56	@ 0x38
 800f50a:	a806      	add	r0, sp, #24
 800f50c:	f002 f934 	bl	8011778 <uxr_serialize_OBJK_DataWriter_Binary>
 800f510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f512:	f8cd 8000 	str.w	r8, [sp]
 800f516:	9401      	str	r4, [sp, #4]
 800f518:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f51c:	60e3      	str	r3, [r4, #12]
 800f51e:	4630      	mov	r0, r6
 800f520:	b29b      	uxth	r3, r3
 800f522:	f7ff fead 	bl	800f280 <uxr_common_create_entity>
 800f526:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f52e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f532:	f04f 0c12 	mov.w	ip, #18
 800f536:	250a      	movs	r5, #10
 800f538:	2220      	movs	r2, #32
 800f53a:	2110      	movs	r1, #16
 800f53c:	2008      	movs	r0, #8
 800f53e:	2702      	movs	r7, #2
 800f540:	e7cd      	b.n	800f4de <uxr_buffer_create_datawriter_bin+0x76>
 800f542:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f546:	e7d9      	b.n	800f4fc <uxr_buffer_create_datawriter_bin+0x94>
 800f548:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f54c:	e7d6      	b.n	800f4fc <uxr_buffer_create_datawriter_bin+0x94>
 800f54e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f552:	e7d3      	b.n	800f4fc <uxr_buffer_create_datawriter_bin+0x94>

0800f554 <uxr_buffer_create_datareader_bin>:
 800f554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f558:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f55c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f55e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f562:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800f566:	9105      	str	r1, [sp, #20]
 800f568:	4606      	mov	r6, r0
 800f56a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800f56c:	4618      	mov	r0, r3
 800f56e:	2306      	movs	r3, #6
 800f570:	7123      	strb	r3, [r4, #4]
 800f572:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800f576:	2703      	movs	r7, #3
 800f578:	f000 f8c0 	bl	800f6fc <uxr_object_id_to_raw>
 800f57c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800f57e:	7227      	strb	r7, [r4, #8]
 800f580:	a90e      	add	r1, sp, #56	@ 0x38
 800f582:	f000 f8bb 	bl	800f6fc <uxr_object_id_to_raw>
 800f586:	2300      	movs	r3, #0
 800f588:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f58c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800f590:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800f594:	3d00      	subs	r5, #0
 800f596:	bf18      	it	ne
 800f598:	2501      	movne	r5, #1
 800f59a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f59e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f5a2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f5a6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f5aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f5b4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f5b8:	bb8a      	cbnz	r2, 800f61e <uxr_buffer_create_datareader_bin+0xca>
 800f5ba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f5be:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f5c2:	f04f 0c13 	mov.w	ip, #19
 800f5c6:	250b      	movs	r5, #11
 800f5c8:	2221      	movs	r2, #33	@ 0x21
 800f5ca:	2111      	movs	r1, #17
 800f5cc:	2009      	movs	r0, #9
 800f5ce:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800f5d2:	b923      	cbnz	r3, 800f5de <uxr_buffer_create_datareader_bin+0x8a>
 800f5d4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f5d8:	4672      	mov	r2, lr
 800f5da:	4661      	mov	r1, ip
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d025      	beq.n	800f632 <uxr_buffer_create_datareader_bin+0xde>
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d029      	beq.n	800f63e <uxr_buffer_create_datareader_bin+0xea>
 800f5ea:	b32b      	cbz	r3, 800f638 <uxr_buffer_create_datareader_bin+0xe4>
 800f5ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5f0:	a923      	add	r1, sp, #140	@ 0x8c
 800f5f2:	a806      	add	r0, sp, #24
 800f5f4:	f7ff fd5c 	bl	800f0b0 <ucdr_init_buffer>
 800f5f8:	a90e      	add	r1, sp, #56	@ 0x38
 800f5fa:	a806      	add	r0, sp, #24
 800f5fc:	f002 f880 	bl	8011700 <uxr_serialize_OBJK_DataReader_Binary>
 800f600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f602:	f8cd 8000 	str.w	r8, [sp]
 800f606:	9401      	str	r4, [sp, #4]
 800f608:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f60c:	60e3      	str	r3, [r4, #12]
 800f60e:	4630      	mov	r0, r6
 800f610:	b29b      	uxth	r3, r3
 800f612:	f7ff fe35 	bl	800f280 <uxr_common_create_entity>
 800f616:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f61e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f622:	f04f 0c12 	mov.w	ip, #18
 800f626:	250a      	movs	r5, #10
 800f628:	2220      	movs	r2, #32
 800f62a:	2110      	movs	r1, #16
 800f62c:	2008      	movs	r0, #8
 800f62e:	2702      	movs	r7, #2
 800f630:	e7cd      	b.n	800f5ce <uxr_buffer_create_datareader_bin+0x7a>
 800f632:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f636:	e7d9      	b.n	800f5ec <uxr_buffer_create_datareader_bin+0x98>
 800f638:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f63c:	e7d6      	b.n	800f5ec <uxr_buffer_create_datareader_bin+0x98>
 800f63e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f642:	e7d3      	b.n	800f5ec <uxr_buffer_create_datareader_bin+0x98>

0800f644 <uxr_buffer_create_replier_bin>:
 800f644:	b570      	push	{r4, r5, r6, lr}
 800f646:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800f64a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f64e:	9105      	str	r1, [sp, #20]
 800f650:	4605      	mov	r5, r0
 800f652:	a999      	add	r1, sp, #612	@ 0x264
 800f654:	4618      	mov	r0, r3
 800f656:	2308      	movs	r3, #8
 800f658:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 800f65c:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 800f660:	f000 f84c 	bl	800f6fc <uxr_object_id_to_raw>
 800f664:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800f666:	9306      	str	r3, [sp, #24]
 800f668:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 800f66a:	9307      	str	r3, [sp, #28]
 800f66c:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 800f66e:	9308      	str	r3, [sp, #32]
 800f670:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800f672:	930c      	str	r3, [sp, #48]	@ 0x30
 800f674:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f676:	930a      	str	r3, [sp, #40]	@ 0x28
 800f678:	2301      	movs	r3, #1
 800f67a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f67e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f682:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f686:	a919      	add	r1, sp, #100	@ 0x64
 800f688:	2303      	movs	r3, #3
 800f68a:	a80d      	add	r0, sp, #52	@ 0x34
 800f68c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800f690:	f7ff fd0e 	bl	800f0b0 <ucdr_init_buffer>
 800f694:	a906      	add	r1, sp, #24
 800f696:	a80d      	add	r0, sp, #52	@ 0x34
 800f698:	f002 f89a 	bl	80117d0 <uxr_serialize_OBJK_Replier_Binary>
 800f69c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f69e:	9318      	str	r3, [sp, #96]	@ 0x60
 800f6a0:	ac15      	add	r4, sp, #84	@ 0x54
 800f6a2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f6a6:	9600      	str	r6, [sp, #0]
 800f6a8:	9401      	str	r4, [sp, #4]
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f7ff fde7 	bl	800f280 <uxr_common_create_entity>
 800f6b2:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}

0800f6b8 <uxr_object_id>:
 800f6b8:	b082      	sub	sp, #8
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	f88d 1006 	strb.w	r1, [sp, #6]
 800f6c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f6c4:	f360 030f 	bfi	r3, r0, #0, #16
 800f6c8:	f362 431f 	bfi	r3, r2, #16, #16
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	b002      	add	sp, #8
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop

0800f6d4 <uxr_object_id_from_raw>:
 800f6d4:	7843      	ldrb	r3, [r0, #1]
 800f6d6:	7801      	ldrb	r1, [r0, #0]
 800f6d8:	b082      	sub	sp, #8
 800f6da:	f003 020f 	and.w	r2, r3, #15
 800f6de:	f88d 2006 	strb.w	r2, [sp, #6]
 800f6e2:	091b      	lsrs	r3, r3, #4
 800f6e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f6e8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	f363 000f 	bfi	r0, r3, #0, #16
 800f6f2:	f362 401f 	bfi	r0, r2, #16, #16
 800f6f6:	b002      	add	sp, #8
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop

0800f6fc <uxr_object_id_to_raw>:
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f702:	b082      	sub	sp, #8
 800f704:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f708:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f70c:	f881 c000 	strb.w	ip, [r1]
 800f710:	7048      	strb	r0, [r1, #1]
 800f712:	b002      	add	sp, #8
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop

0800f718 <on_get_fragmentation_info>:
 800f718:	b500      	push	{lr}
 800f71a:	b08b      	sub	sp, #44	@ 0x2c
 800f71c:	4601      	mov	r1, r0
 800f71e:	2204      	movs	r2, #4
 800f720:	a802      	add	r0, sp, #8
 800f722:	f7ff fcc5 	bl	800f0b0 <ucdr_init_buffer>
 800f726:	f10d 0305 	add.w	r3, sp, #5
 800f72a:	f10d 0206 	add.w	r2, sp, #6
 800f72e:	a901      	add	r1, sp, #4
 800f730:	a802      	add	r0, sp, #8
 800f732:	f001 f9d7 	bl	8010ae4 <uxr_read_submessage_header>
 800f736:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f73a:	2b0d      	cmp	r3, #13
 800f73c:	d003      	beq.n	800f746 <on_get_fragmentation_info+0x2e>
 800f73e:	2000      	movs	r0, #0
 800f740:	b00b      	add	sp, #44	@ 0x2c
 800f742:	f85d fb04 	ldr.w	pc, [sp], #4
 800f746:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f74a:	f013 0f02 	tst.w	r3, #2
 800f74e:	bf14      	ite	ne
 800f750:	2002      	movne	r0, #2
 800f752:	2001      	moveq	r0, #1
 800f754:	b00b      	add	sp, #44	@ 0x2c
 800f756:	f85d fb04 	ldr.w	pc, [sp], #4
 800f75a:	bf00      	nop

0800f75c <read_submessage_get_info>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	2500      	movs	r5, #0
 800f760:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f764:	4604      	mov	r4, r0
 800f766:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f76a:	460e      	mov	r6, r1
 800f76c:	a810      	add	r0, sp, #64	@ 0x40
 800f76e:	4629      	mov	r1, r5
 800f770:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f774:	f00a f977 	bl	8019a66 <memset>
 800f778:	a903      	add	r1, sp, #12
 800f77a:	4630      	mov	r0, r6
 800f77c:	f002 faa6 	bl	8011ccc <uxr_deserialize_GET_INFO_Payload>
 800f780:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f784:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f788:	4620      	mov	r0, r4
 800f78a:	f001 f821 	bl	80107d0 <uxr_session_header_offset>
 800f78e:	462b      	mov	r3, r5
 800f790:	9000      	str	r0, [sp, #0]
 800f792:	220c      	movs	r2, #12
 800f794:	a905      	add	r1, sp, #20
 800f796:	a808      	add	r0, sp, #32
 800f798:	f7ff fc78 	bl	800f08c <ucdr_init_buffer_origin_offset>
 800f79c:	a910      	add	r1, sp, #64	@ 0x40
 800f79e:	a808      	add	r0, sp, #32
 800f7a0:	f002 fb06 	bl	8011db0 <uxr_serialize_INFO_Payload>
 800f7a4:	9b08      	ldr	r3, [sp, #32]
 800f7a6:	462a      	mov	r2, r5
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f000 ffba 	bl	8010724 <uxr_stamp_session_header>
 800f7b0:	a808      	add	r0, sp, #32
 800f7b2:	f7ff fca9 	bl	800f108 <ucdr_buffer_length>
 800f7b6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	a905      	add	r1, sp, #20
 800f7bc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f7c0:	47a0      	blx	r4
 800f7c2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f7c6:	bd70      	pop	{r4, r5, r6, pc}

0800f7c8 <write_submessage_acknack.isra.0>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	b092      	sub	sp, #72	@ 0x48
 800f7cc:	4605      	mov	r5, r0
 800f7ce:	460e      	mov	r6, r1
 800f7d0:	4614      	mov	r4, r2
 800f7d2:	f000 fffd 	bl	80107d0 <uxr_session_header_offset>
 800f7d6:	a905      	add	r1, sp, #20
 800f7d8:	9000      	str	r0, [sp, #0]
 800f7da:	2300      	movs	r3, #0
 800f7dc:	a80a      	add	r0, sp, #40	@ 0x28
 800f7de:	2211      	movs	r2, #17
 800f7e0:	f7ff fc54 	bl	800f08c <ucdr_init_buffer_origin_offset>
 800f7e4:	2218      	movs	r2, #24
 800f7e6:	fb02 5404 	mla	r4, r2, r4, r5
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	2205      	movs	r2, #5
 800f7ee:	3450      	adds	r4, #80	@ 0x50
 800f7f0:	210a      	movs	r1, #10
 800f7f2:	a80a      	add	r0, sp, #40	@ 0x28
 800f7f4:	f001 f95c 	bl	8010ab0 <uxr_buffer_submessage_header>
 800f7f8:	a903      	add	r1, sp, #12
 800f7fa:	4620      	mov	r0, r4
 800f7fc:	f007 fd5c 	bl	80172b8 <uxr_compute_acknack>
 800f800:	ba40      	rev16	r0, r0
 800f802:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f806:	a903      	add	r1, sp, #12
 800f808:	a80a      	add	r0, sp, #40	@ 0x28
 800f80a:	f88d 6010 	strb.w	r6, [sp, #16]
 800f80e:	f002 fb3f 	bl	8011e90 <uxr_serialize_ACKNACK_Payload>
 800f812:	2200      	movs	r2, #0
 800f814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f816:	4611      	mov	r1, r2
 800f818:	4628      	mov	r0, r5
 800f81a:	f000 ff83 	bl	8010724 <uxr_stamp_session_header>
 800f81e:	a80a      	add	r0, sp, #40	@ 0x28
 800f820:	f7ff fc72 	bl	800f108 <ucdr_buffer_length>
 800f824:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f826:	4602      	mov	r2, r0
 800f828:	a905      	add	r1, sp, #20
 800f82a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f82e:	47a0      	blx	r4
 800f830:	b012      	add	sp, #72	@ 0x48
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	0000      	movs	r0, r0
	...

0800f838 <uxr_init_session>:
 800f838:	b510      	push	{r4, lr}
 800f83a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f870 <uxr_init_session+0x38>
 800f83e:	2300      	movs	r3, #0
 800f840:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f844:	4604      	mov	r4, r0
 800f846:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f84a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f84e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f852:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f856:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f85a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f85e:	2181      	movs	r1, #129	@ 0x81
 800f860:	f000 fecc 	bl	80105fc <uxr_init_session_info>
 800f864:	f104 0008 	add.w	r0, r4, #8
 800f868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f86c:	f001 b83c 	b.w	80108e8 <uxr_init_stream_storage>
	...

0800f878 <uxr_set_status_callback>:
 800f878:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop

0800f880 <uxr_set_topic_callback>:
 800f880:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop

0800f888 <uxr_set_request_callback>:
 800f888:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f88c:	4770      	bx	lr
 800f88e:	bf00      	nop

0800f890 <uxr_set_reply_callback>:
 800f890:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop

0800f898 <uxr_create_output_best_effort_stream>:
 800f898:	b510      	push	{r4, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	e9cd 2100 	strd	r2, r1, [sp]
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	f000 ff95 	bl	80107d0 <uxr_session_header_offset>
 800f8a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	f104 0008 	add.w	r0, r4, #8
 800f8b0:	b004      	add	sp, #16
 800f8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8b6:	f001 b861 	b.w	801097c <uxr_add_output_best_effort_buffer>
 800f8ba:	bf00      	nop

0800f8bc <uxr_create_output_reliable_stream>:
 800f8bc:	b510      	push	{r4, lr}
 800f8be:	b088      	sub	sp, #32
 800f8c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	9303      	str	r3, [sp, #12]
 800f8c8:	f000 ff82 	bl	80107d0 <uxr_session_header_offset>
 800f8cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f8d0:	9000      	str	r0, [sp, #0]
 800f8d2:	9905      	ldr	r1, [sp, #20]
 800f8d4:	f104 0008 	add.w	r0, r4, #8
 800f8d8:	f001 f864 	bl	80109a4 <uxr_add_output_reliable_buffer>
 800f8dc:	2200      	movs	r2, #0
 800f8de:	b2c3      	uxtb	r3, r0
 800f8e0:	f363 0207 	bfi	r2, r3, #0, #8
 800f8e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f8e8:	f363 220f 	bfi	r2, r3, #8, #8
 800f8ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f8f0:	f363 4217 	bfi	r2, r3, #16, #8
 800f8f4:	0e03      	lsrs	r3, r0, #24
 800f8f6:	f363 621f 	bfi	r2, r3, #24, #8
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	b008      	add	sp, #32
 800f8fe:	bd10      	pop	{r4, pc}

0800f900 <uxr_create_input_best_effort_stream>:
 800f900:	b082      	sub	sp, #8
 800f902:	3008      	adds	r0, #8
 800f904:	b002      	add	sp, #8
 800f906:	f001 b867 	b.w	80109d8 <uxr_add_input_best_effort_buffer>
 800f90a:	bf00      	nop

0800f90c <uxr_create_input_reliable_stream>:
 800f90c:	b510      	push	{r4, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	4c0b      	ldr	r4, [pc, #44]	@ (800f940 <uxr_create_input_reliable_stream+0x34>)
 800f912:	9400      	str	r4, [sp, #0]
 800f914:	3008      	adds	r0, #8
 800f916:	f001 f875 	bl	8010a04 <uxr_add_input_reliable_buffer>
 800f91a:	2200      	movs	r2, #0
 800f91c:	b2c3      	uxtb	r3, r0
 800f91e:	f363 0207 	bfi	r2, r3, #0, #8
 800f922:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f926:	f363 220f 	bfi	r2, r3, #8, #8
 800f92a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f92e:	f363 4217 	bfi	r2, r3, #16, #8
 800f932:	0e03      	lsrs	r3, r0, #24
 800f934:	f363 621f 	bfi	r2, r3, #24, #8
 800f938:	4610      	mov	r0, r2
 800f93a:	b004      	add	sp, #16
 800f93c:	bd10      	pop	{r4, pc}
 800f93e:	bf00      	nop
 800f940:	0800f719 	.word	0x0800f719

0800f944 <uxr_epoch_nanos>:
 800f944:	b510      	push	{r4, lr}
 800f946:	4604      	mov	r4, r0
 800f948:	f001 f912 	bl	8010b70 <uxr_nanos>
 800f94c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f950:	1ac0      	subs	r0, r0, r3
 800f952:	eb61 0102 	sbc.w	r1, r1, r2
 800f956:	bd10      	pop	{r4, pc}

0800f958 <uxr_flash_output_streams>:
 800f958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f95c:	7e03      	ldrb	r3, [r0, #24]
 800f95e:	b084      	sub	sp, #16
 800f960:	4604      	mov	r4, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d035      	beq.n	800f9d2 <uxr_flash_output_streams+0x7a>
 800f966:	f04f 0900 	mov.w	r9, #0
 800f96a:	4648      	mov	r0, r9
 800f96c:	f10d 0802 	add.w	r8, sp, #2
 800f970:	af03      	add	r7, sp, #12
 800f972:	ae02      	add	r6, sp, #8
 800f974:	e006      	b.n	800f984 <uxr_flash_output_streams+0x2c>
 800f976:	7e23      	ldrb	r3, [r4, #24]
 800f978:	f109 0901 	add.w	r9, r9, #1
 800f97c:	fa5f f089 	uxtb.w	r0, r9
 800f980:	4283      	cmp	r3, r0
 800f982:	d926      	bls.n	800f9d2 <uxr_flash_output_streams+0x7a>
 800f984:	2201      	movs	r2, #1
 800f986:	4611      	mov	r1, r2
 800f988:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f98c:	f000 ff58 	bl	8010840 <uxr_stream_id>
 800f990:	3508      	adds	r5, #8
 800f992:	4684      	mov	ip, r0
 800f994:	4643      	mov	r3, r8
 800f996:	463a      	mov	r2, r7
 800f998:	4631      	mov	r1, r6
 800f99a:	4628      	mov	r0, r5
 800f99c:	f8cd c004 	str.w	ip, [sp, #4]
 800f9a0:	f007 fd10 	bl	80173c4 <uxr_prepare_best_effort_buffer_to_send>
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	d0e6      	beq.n	800f976 <uxr_flash_output_streams+0x1e>
 800f9a8:	9b02      	ldr	r3, [sp, #8]
 800f9aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f9ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f000 feb6 	bl	8010724 <uxr_stamp_session_header>
 800f9b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f9ba:	9a03      	ldr	r2, [sp, #12]
 800f9bc:	685d      	ldr	r5, [r3, #4]
 800f9be:	6818      	ldr	r0, [r3, #0]
 800f9c0:	9902      	ldr	r1, [sp, #8]
 800f9c2:	47a8      	blx	r5
 800f9c4:	f109 0901 	add.w	r9, r9, #1
 800f9c8:	7e23      	ldrb	r3, [r4, #24]
 800f9ca:	fa5f f089 	uxtb.w	r0, r9
 800f9ce:	4283      	cmp	r3, r0
 800f9d0:	d8d8      	bhi.n	800f984 <uxr_flash_output_streams+0x2c>
 800f9d2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f9d6:	b38b      	cbz	r3, 800fa3c <uxr_flash_output_streams+0xe4>
 800f9d8:	f04f 0900 	mov.w	r9, #0
 800f9dc:	f10d 0802 	add.w	r8, sp, #2
 800f9e0:	af03      	add	r7, sp, #12
 800f9e2:	ae02      	add	r6, sp, #8
 800f9e4:	4648      	mov	r0, r9
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	2102      	movs	r1, #2
 800f9ea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f9ee:	f000 ff27 	bl	8010840 <uxr_stream_id>
 800f9f2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f9f6:	3520      	adds	r5, #32
 800f9f8:	9001      	str	r0, [sp, #4]
 800f9fa:	e00d      	b.n	800fa18 <uxr_flash_output_streams+0xc0>
 800f9fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fa00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fa04:	9b02      	ldr	r3, [sp, #8]
 800fa06:	f000 fe8d 	bl	8010724 <uxr_stamp_session_header>
 800fa0a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa0c:	9a03      	ldr	r2, [sp, #12]
 800fa0e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800fa12:	9902      	ldr	r1, [sp, #8]
 800fa14:	6818      	ldr	r0, [r3, #0]
 800fa16:	47d0      	blx	sl
 800fa18:	4643      	mov	r3, r8
 800fa1a:	463a      	mov	r2, r7
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f007 feee 	bl	8017800 <uxr_prepare_next_reliable_buffer_to_send>
 800fa24:	4603      	mov	r3, r0
 800fa26:	4620      	mov	r0, r4
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d1e7      	bne.n	800f9fc <uxr_flash_output_streams+0xa4>
 800fa2c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800fa30:	f109 0901 	add.w	r9, r9, #1
 800fa34:	fa5f f089 	uxtb.w	r0, r9
 800fa38:	4283      	cmp	r3, r0
 800fa3a:	d8d4      	bhi.n	800f9e6 <uxr_flash_output_streams+0x8e>
 800fa3c:	b004      	add	sp, #16
 800fa3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa42:	bf00      	nop

0800fa44 <read_submessage_info>:
 800fa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa48:	460d      	mov	r5, r1
 800fa4a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800fa4e:	4669      	mov	r1, sp
 800fa50:	4607      	mov	r7, r0
 800fa52:	4628      	mov	r0, r5
 800fa54:	f002 f848 	bl	8011ae8 <uxr_deserialize_BaseObjectReply>
 800fa58:	a902      	add	r1, sp, #8
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800fa62:	f7fd fefb 	bl	800d85c <ucdr_deserialize_bool>
 800fa66:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fa6a:	4004      	ands	r4, r0
 800fa6c:	b2e4      	uxtb	r4, r4
 800fa6e:	b95b      	cbnz	r3, 800fa88 <read_submessage_info+0x44>
 800fa70:	a987      	add	r1, sp, #540	@ 0x21c
 800fa72:	4628      	mov	r0, r5
 800fa74:	f7fd fef2 	bl	800d85c <ucdr_deserialize_bool>
 800fa78:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800fa7c:	4606      	mov	r6, r0
 800fa7e:	b94b      	cbnz	r3, 800fa94 <read_submessage_info+0x50>
 800fa80:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800fa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa88:	a903      	add	r1, sp, #12
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	f001 fed4 	bl	8011838 <uxr_deserialize_ObjectVariant>
 800fa90:	4004      	ands	r4, r0
 800fa92:	e7ed      	b.n	800fa70 <read_submessage_info+0x2c>
 800fa94:	a988      	add	r1, sp, #544	@ 0x220
 800fa96:	4628      	mov	r0, r5
 800fa98:	f7fd ff0e 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 800fa9c:	4234      	tst	r4, r6
 800fa9e:	d0ef      	beq.n	800fa80 <read_submessage_info+0x3c>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d0ed      	beq.n	800fa80 <read_submessage_info+0x3c>
 800faa4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800faa8:	2b0d      	cmp	r3, #13
 800faaa:	d1e9      	bne.n	800fa80 <read_submessage_info+0x3c>
 800faac:	a98a      	add	r1, sp, #552	@ 0x228
 800faae:	4628      	mov	r0, r5
 800fab0:	f7fe fca8 	bl	800e404 <ucdr_deserialize_int16_t>
 800fab4:	b140      	cbz	r0, 800fac8 <read_submessage_info+0x84>
 800fab6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800faba:	2b00      	cmp	r3, #0
 800fabc:	dd07      	ble.n	800face <read_submessage_info+0x8a>
 800fabe:	f1b8 0f00 	cmp.w	r8, #0
 800fac2:	bf14      	ite	ne
 800fac4:	2001      	movne	r0, #1
 800fac6:	2002      	moveq	r0, #2
 800fac8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800facc:	e7d8      	b.n	800fa80 <read_submessage_info+0x3c>
 800face:	2000      	movs	r0, #0
 800fad0:	e7fa      	b.n	800fac8 <read_submessage_info+0x84>
 800fad2:	bf00      	nop

0800fad4 <read_submessage_list>:
 800fad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad8:	b097      	sub	sp, #92	@ 0x5c
 800fada:	4ec1      	ldr	r6, [pc, #772]	@ (800fde0 <read_submessage_list+0x30c>)
 800fadc:	9209      	str	r2, [sp, #36]	@ 0x24
 800fade:	4604      	mov	r4, r0
 800fae0:	460d      	mov	r5, r1
 800fae2:	f04f 0801 	mov.w	r8, #1
 800fae6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800faea:	aa0c      	add	r2, sp, #48	@ 0x30
 800faec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800faf0:	4628      	mov	r0, r5
 800faf2:	f000 fff7 	bl	8010ae4 <uxr_read_submessage_header>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	f000 813e 	beq.w	800fd78 <read_submessage_list+0x2a4>
 800fafc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800fb00:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800fb04:	3b02      	subs	r3, #2
 800fb06:	2b0d      	cmp	r3, #13
 800fb08:	d8ed      	bhi.n	800fae6 <read_submessage_list+0x12>
 800fb0a:	a101      	add	r1, pc, #4	@ (adr r1, 800fb10 <read_submessage_list+0x3c>)
 800fb0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb10:	0800fd6f 	.word	0x0800fd6f
 800fb14:	0800fae7 	.word	0x0800fae7
 800fb18:	0800fd5f 	.word	0x0800fd5f
 800fb1c:	0800fcfd 	.word	0x0800fcfd
 800fb20:	0800fcf3 	.word	0x0800fcf3
 800fb24:	0800fae7 	.word	0x0800fae7
 800fb28:	0800fae7 	.word	0x0800fae7
 800fb2c:	0800fc53 	.word	0x0800fc53
 800fb30:	0800fbe3 	.word	0x0800fbe3
 800fb34:	0800fba3 	.word	0x0800fba3
 800fb38:	0800fae7 	.word	0x0800fae7
 800fb3c:	0800fae7 	.word	0x0800fae7
 800fb40:	0800fae7 	.word	0x0800fae7
 800fb44:	0800fb49 	.word	0x0800fb49
 800fb48:	a910      	add	r1, sp, #64	@ 0x40
 800fb4a:	4628      	mov	r0, r5
 800fb4c:	f002 f9f0 	bl	8011f30 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800fb50:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800fb54:	f1b9 0f00 	cmp.w	r9, #0
 800fb58:	f000 8116 	beq.w	800fd88 <read_submessage_list+0x2b4>
 800fb5c:	f001 f808 	bl	8010b70 <uxr_nanos>
 800fb60:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800fb62:	4602      	mov	r2, r0
 800fb64:	460b      	mov	r3, r1
 800fb66:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800fb68:	2100      	movs	r1, #0
 800fb6a:	468c      	mov	ip, r1
 800fb6c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800fb70:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800fb74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fb76:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800fb78:	468c      	mov	ip, r1
 800fb7a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800fb7e:	46e2      	mov	sl, ip
 800fb80:	46bc      	mov	ip, r7
 800fb82:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800fb86:	fbc0 7106 	smlal	r7, r1, r0, r6
 800fb8a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800fb8e:	e9cd 7100 	strd	r7, r1, [sp]
 800fb92:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800fb96:	9106      	str	r1, [sp, #24]
 800fb98:	4620      	mov	r0, r4
 800fb9a:	47c8      	blx	r9
 800fb9c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800fba0:	e7a1      	b.n	800fae6 <read_submessage_list+0x12>
 800fba2:	a910      	add	r1, sp, #64	@ 0x40
 800fba4:	4628      	mov	r0, r5
 800fba6:	f002 f9b1 	bl	8011f0c <uxr_deserialize_HEARTBEAT_Payload>
 800fbaa:	2100      	movs	r1, #0
 800fbac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fbb0:	f000 fe70 	bl	8010894 <uxr_stream_id_from_raw>
 800fbb4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fbb8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800fbba:	4639      	mov	r1, r7
 800fbbc:	f104 0008 	add.w	r0, r4, #8
 800fbc0:	f000 ff56 	bl	8010a70 <uxr_get_input_reliable_stream>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d08e      	beq.n	800fae6 <read_submessage_list+0x12>
 800fbc8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800fbcc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800fbd0:	f007 fb66 	bl	80172a0 <uxr_process_heartbeat>
 800fbd4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800fbd8:	463a      	mov	r2, r7
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f7ff fdf4 	bl	800f7c8 <write_submessage_acknack.isra.0>
 800fbe0:	e781      	b.n	800fae6 <read_submessage_list+0x12>
 800fbe2:	a910      	add	r1, sp, #64	@ 0x40
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	f002 f969 	bl	8011ebc <uxr_deserialize_ACKNACK_Payload>
 800fbea:	2100      	movs	r1, #0
 800fbec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fbf0:	f000 fe50 	bl	8010894 <uxr_stream_id_from_raw>
 800fbf4:	900d      	str	r0, [sp, #52]	@ 0x34
 800fbf6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fbfa:	f104 0008 	add.w	r0, r4, #8
 800fbfe:	f000 ff23 	bl	8010a48 <uxr_get_output_reliable_stream>
 800fc02:	4607      	mov	r7, r0
 800fc04:	2800      	cmp	r0, #0
 800fc06:	f43f af6e 	beq.w	800fae6 <read_submessage_list+0x12>
 800fc0a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800fc0e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800fc12:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800fc16:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fc1a:	b289      	uxth	r1, r1
 800fc1c:	f007 fe9a 	bl	8017954 <uxr_process_acknack>
 800fc20:	4638      	mov	r0, r7
 800fc22:	f007 fe57 	bl	80178d4 <uxr_begin_output_nack_buffer_it>
 800fc26:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fc2a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800fc2e:	e006      	b.n	800fc3e <read_submessage_list+0x16a>
 800fc30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fc32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fc34:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fc38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fc3a:	6818      	ldr	r0, [r3, #0]
 800fc3c:	47c8      	blx	r9
 800fc3e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800fc42:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fc44:	4651      	mov	r1, sl
 800fc46:	4638      	mov	r0, r7
 800fc48:	f007 fe46 	bl	80178d8 <uxr_next_reliable_nack_buffer_to_send>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d1ef      	bne.n	800fc30 <read_submessage_list+0x15c>
 800fc50:	e749      	b.n	800fae6 <read_submessage_list+0x12>
 800fc52:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800fc56:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800fc5a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fc5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800fc62:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800fc66:	4651      	mov	r1, sl
 800fc68:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fc6c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800fc70:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800fc74:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800fc7e:	f001 fe7d 	bl	801197c <uxr_deserialize_BaseObjectRequest>
 800fc82:	4650      	mov	r0, sl
 800fc84:	a90f      	add	r1, sp, #60	@ 0x3c
 800fc86:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800fc8a:	f000 fdc7 	bl	801081c <uxr_parse_base_object_request>
 800fc8e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800fc92:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fc94:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800fc98:	9110      	str	r1, [sp, #64]	@ 0x40
 800fc9a:	3f04      	subs	r7, #4
 800fc9c:	f009 090e 	and.w	r9, r9, #14
 800fca0:	b2bf      	uxth	r7, r7
 800fca2:	f1bb 0f00 	cmp.w	fp, #0
 800fca6:	d006      	beq.n	800fcb6 <read_submessage_list+0x1e2>
 800fca8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	4652      	mov	r2, sl
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	47d8      	blx	fp
 800fcb6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fcb8:	b16a      	cbz	r2, 800fcd6 <read_submessage_list+0x202>
 800fcba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	3802      	subs	r0, #2
 800fcc0:	e002      	b.n	800fcc8 <read_submessage_list+0x1f4>
 800fcc2:	3101      	adds	r1, #1
 800fcc4:	4291      	cmp	r1, r2
 800fcc6:	d006      	beq.n	800fcd6 <read_submessage_list+0x202>
 800fcc8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fccc:	4553      	cmp	r3, sl
 800fcce:	d1f8      	bne.n	800fcc2 <read_submessage_list+0x1ee>
 800fcd0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	545a      	strb	r2, [r3, r1]
 800fcd6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fcda:	9102      	str	r1, [sp, #8]
 800fcdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fcde:	9101      	str	r1, [sp, #4]
 800fce0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fce2:	9100      	str	r1, [sp, #0]
 800fce4:	464b      	mov	r3, r9
 800fce6:	463a      	mov	r2, r7
 800fce8:	4629      	mov	r1, r5
 800fcea:	4620      	mov	r0, r4
 800fcec:	f007 fef0 	bl	8017ad0 <read_submessage_format>
 800fcf0:	e6f9      	b.n	800fae6 <read_submessage_list+0x12>
 800fcf2:	4629      	mov	r1, r5
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f7ff fea5 	bl	800fa44 <read_submessage_info>
 800fcfa:	e6f4      	b.n	800fae6 <read_submessage_list+0x12>
 800fcfc:	2a00      	cmp	r2, #0
 800fcfe:	d03e      	beq.n	800fd7e <read_submessage_list+0x2aa>
 800fd00:	a910      	add	r1, sp, #64	@ 0x40
 800fd02:	4628      	mov	r0, r5
 800fd04:	f002 f836 	bl	8011d74 <uxr_deserialize_STATUS_Payload>
 800fd08:	a90e      	add	r1, sp, #56	@ 0x38
 800fd0a:	aa0d      	add	r2, sp, #52	@ 0x34
 800fd0c:	a810      	add	r0, sp, #64	@ 0x40
 800fd0e:	f000 fd85 	bl	801081c <uxr_parse_base_object_request>
 800fd12:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800fd16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fd18:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800fd1c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800fd20:	910f      	str	r1, [sp, #60]	@ 0x3c
 800fd22:	f1ba 0f00 	cmp.w	sl, #0
 800fd26:	d006      	beq.n	800fd36 <read_submessage_list+0x262>
 800fd28:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	463a      	mov	r2, r7
 800fd30:	464b      	mov	r3, r9
 800fd32:	4620      	mov	r0, r4
 800fd34:	47d0      	blx	sl
 800fd36:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fd38:	2a00      	cmp	r2, #0
 800fd3a:	f43f aed4 	beq.w	800fae6 <read_submessage_list+0x12>
 800fd3e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fd40:	2100      	movs	r1, #0
 800fd42:	3802      	subs	r0, #2
 800fd44:	e003      	b.n	800fd4e <read_submessage_list+0x27a>
 800fd46:	3101      	adds	r1, #1
 800fd48:	4291      	cmp	r1, r2
 800fd4a:	f43f aecc 	beq.w	800fae6 <read_submessage_list+0x12>
 800fd4e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fd52:	42bb      	cmp	r3, r7
 800fd54:	d1f7      	bne.n	800fd46 <read_submessage_list+0x272>
 800fd56:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fd58:	f803 9001 	strb.w	r9, [r3, r1]
 800fd5c:	e6c3      	b.n	800fae6 <read_submessage_list+0x12>
 800fd5e:	2a00      	cmp	r2, #0
 800fd60:	f47f aec1 	bne.w	800fae6 <read_submessage_list+0x12>
 800fd64:	4629      	mov	r1, r5
 800fd66:	4620      	mov	r0, r4
 800fd68:	f000 fc9e 	bl	80106a8 <uxr_read_create_session_status>
 800fd6c:	e6bb      	b.n	800fae6 <read_submessage_list+0x12>
 800fd6e:	4629      	mov	r1, r5
 800fd70:	4620      	mov	r0, r4
 800fd72:	f7ff fcf3 	bl	800f75c <read_submessage_get_info>
 800fd76:	e6b6      	b.n	800fae6 <read_submessage_list+0x12>
 800fd78:	b017      	add	sp, #92	@ 0x5c
 800fd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7e:	4629      	mov	r1, r5
 800fd80:	4620      	mov	r0, r4
 800fd82:	f000 fc9d 	bl	80106c0 <uxr_read_delete_session_status>
 800fd86:	e6ae      	b.n	800fae6 <read_submessage_list+0x12>
 800fd88:	f000 fef2 	bl	8010b70 <uxr_nanos>
 800fd8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fd8e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fd90:	464f      	mov	r7, r9
 800fd92:	fbc3 2706 	smlal	r2, r7, r3, r6
 800fd96:	1812      	adds	r2, r2, r0
 800fd98:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd9a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fd9c:	eb47 0101 	adc.w	r1, r7, r1
 800fda0:	464f      	mov	r7, r9
 800fda2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800fda6:	463b      	mov	r3, r7
 800fda8:	4684      	mov	ip, r0
 800fdaa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800fdae:	fbc7 0906 	smlal	r0, r9, r7, r6
 800fdb2:	eb1c 0c00 	adds.w	ip, ip, r0
 800fdb6:	464f      	mov	r7, r9
 800fdb8:	eb43 0307 	adc.w	r3, r3, r7
 800fdbc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800fdc0:	eb61 0303 	sbc.w	r3, r1, r3
 800fdc4:	0fda      	lsrs	r2, r3, #31
 800fdc6:	eb12 020c 	adds.w	r2, r2, ip
 800fdca:	f143 0300 	adc.w	r3, r3, #0
 800fdce:	0852      	lsrs	r2, r2, #1
 800fdd0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800fdd4:	105b      	asrs	r3, r3, #1
 800fdd6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800fdda:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800fdde:	e6dd      	b.n	800fb9c <read_submessage_list+0xc8>
 800fde0:	3b9aca00 	.word	0x3b9aca00

0800fde4 <listen_message_reliably>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	1e0b      	subs	r3, r1, #0
 800fdea:	b09d      	sub	sp, #116	@ 0x74
 800fdec:	bfb8      	it	lt
 800fdee:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800fdf2:	4680      	mov	r8, r0
 800fdf4:	9305      	str	r3, [sp, #20]
 800fdf6:	f000 fea1 	bl	8010b3c <uxr_millis>
 800fdfa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800fdfe:	4681      	mov	r9, r0
 800fe00:	2a00      	cmp	r2, #0
 800fe02:	f000 80a1 	beq.w	800ff48 <listen_message_reliably+0x164>
 800fe06:	2600      	movs	r6, #0
 800fe08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fe0c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fe10:	9303      	str	r3, [sp, #12]
 800fe12:	4630      	mov	r0, r6
 800fe14:	460f      	mov	r7, r1
 800fe16:	e00f      	b.n	800fe38 <listen_message_reliably+0x54>
 800fe18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fe1c:	9903      	ldr	r1, [sp, #12]
 800fe1e:	455a      	cmp	r2, fp
 800fe20:	f106 0601 	add.w	r6, r6, #1
 800fe24:	eb73 0101 	sbcs.w	r1, r3, r1
 800fe28:	b2f0      	uxtb	r0, r6
 800fe2a:	da01      	bge.n	800fe30 <listen_message_reliably+0x4c>
 800fe2c:	4693      	mov	fp, r2
 800fe2e:	9303      	str	r3, [sp, #12]
 800fe30:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fe34:	4283      	cmp	r3, r0
 800fe36:	d960      	bls.n	800fefa <listen_message_reliably+0x116>
 800fe38:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800fe3c:	2102      	movs	r1, #2
 800fe3e:	2201      	movs	r2, #1
 800fe40:	f000 fcfe 	bl	8010840 <uxr_stream_id>
 800fe44:	00e4      	lsls	r4, r4, #3
 800fe46:	f104 0520 	add.w	r5, r4, #32
 800fe4a:	4445      	add	r5, r8
 800fe4c:	4601      	mov	r1, r0
 800fe4e:	463b      	mov	r3, r7
 800fe50:	464a      	mov	r2, r9
 800fe52:	4628      	mov	r0, r5
 800fe54:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe56:	f007 fd13 	bl	8017880 <uxr_update_output_stream_heartbeat_timestamp>
 800fe5a:	eb08 0304 	add.w	r3, r8, r4
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d0da      	beq.n	800fe18 <listen_message_reliably+0x34>
 800fe62:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fe66:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800fe6a:	9304      	str	r3, [sp, #16]
 800fe6c:	4640      	mov	r0, r8
 800fe6e:	f000 fcaf 	bl	80107d0 <uxr_session_header_offset>
 800fe72:	3501      	adds	r5, #1
 800fe74:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800fe78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fe7c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800fe80:	2300      	movs	r3, #0
 800fe82:	2211      	movs	r2, #17
 800fe84:	9000      	str	r0, [sp, #0]
 800fe86:	a90c      	add	r1, sp, #48	@ 0x30
 800fe88:	4650      	mov	r0, sl
 800fe8a:	f7ff f8ff 	bl	800f08c <ucdr_init_buffer_origin_offset>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	2205      	movs	r2, #5
 800fe92:	210b      	movs	r1, #11
 800fe94:	4650      	mov	r0, sl
 800fe96:	f000 fe0b 	bl	8010ab0 <uxr_buffer_submessage_header>
 800fe9a:	8968      	ldrh	r0, [r5, #10]
 800fe9c:	2101      	movs	r1, #1
 800fe9e:	f007 fee1 	bl	8017c64 <uxr_seq_num_add>
 800fea2:	892b      	ldrh	r3, [r5, #8]
 800fea4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fea8:	4602      	mov	r2, r0
 800feaa:	9b04      	ldr	r3, [sp, #16]
 800feac:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800feb0:	a90a      	add	r1, sp, #40	@ 0x28
 800feb2:	4650      	mov	r0, sl
 800feb4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800feb8:	f002 f814 	bl	8011ee4 <uxr_serialize_HEARTBEAT_Payload>
 800febc:	2200      	movs	r2, #0
 800febe:	4611      	mov	r1, r2
 800fec0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fec2:	4640      	mov	r0, r8
 800fec4:	f000 fc2e 	bl	8010724 <uxr_stamp_session_header>
 800fec8:	4650      	mov	r0, sl
 800feca:	f7ff f91d 	bl	800f108 <ucdr_buffer_length>
 800fece:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800fed2:	4602      	mov	r2, r0
 800fed4:	a90c      	add	r1, sp, #48	@ 0x30
 800fed6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800feda:	4444      	add	r4, r8
 800fedc:	47a8      	blx	r5
 800fede:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800fee2:	9903      	ldr	r1, [sp, #12]
 800fee4:	455a      	cmp	r2, fp
 800fee6:	f106 0601 	add.w	r6, r6, #1
 800feea:	eb73 0101 	sbcs.w	r1, r3, r1
 800feee:	b2f0      	uxtb	r0, r6
 800fef0:	db9c      	blt.n	800fe2c <listen_message_reliably+0x48>
 800fef2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fef6:	4283      	cmp	r3, r0
 800fef8:	d89e      	bhi.n	800fe38 <listen_message_reliably+0x54>
 800fefa:	9a03      	ldr	r2, [sp, #12]
 800fefc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ff00:	429a      	cmp	r2, r3
 800ff02:	bf08      	it	eq
 800ff04:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800ff08:	d01e      	beq.n	800ff48 <listen_message_reliably+0x164>
 800ff0a:	ebab 0309 	sub.w	r3, fp, r9
 800ff0e:	9905      	ldr	r1, [sp, #20]
 800ff10:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	bf08      	it	eq
 800ff18:	2301      	moveq	r3, #1
 800ff1a:	4299      	cmp	r1, r3
 800ff1c:	bfa8      	it	ge
 800ff1e:	4619      	movge	r1, r3
 800ff20:	6894      	ldr	r4, [r2, #8]
 800ff22:	6810      	ldr	r0, [r2, #0]
 800ff24:	4689      	mov	r9, r1
 800ff26:	460b      	mov	r3, r1
 800ff28:	aa08      	add	r2, sp, #32
 800ff2a:	a907      	add	r1, sp, #28
 800ff2c:	47a0      	blx	r4
 800ff2e:	b968      	cbnz	r0, 800ff4c <listen_message_reliably+0x168>
 800ff30:	9b05      	ldr	r3, [sp, #20]
 800ff32:	eba3 0309 	sub.w	r3, r3, r9
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	9305      	str	r3, [sp, #20]
 800ff3a:	f73f af5c 	bgt.w	800fdf6 <listen_message_reliably+0x12>
 800ff3e:	4604      	mov	r4, r0
 800ff40:	4620      	mov	r0, r4
 800ff42:	b01d      	add	sp, #116	@ 0x74
 800ff44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff48:	9b05      	ldr	r3, [sp, #20]
 800ff4a:	e7e0      	b.n	800ff0e <listen_message_reliably+0x12a>
 800ff4c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ff50:	4604      	mov	r4, r0
 800ff52:	a80c      	add	r0, sp, #48	@ 0x30
 800ff54:	f7ff f8ac 	bl	800f0b0 <ucdr_init_buffer>
 800ff58:	2500      	movs	r5, #0
 800ff5a:	f10d 031a 	add.w	r3, sp, #26
 800ff5e:	aa06      	add	r2, sp, #24
 800ff60:	a90c      	add	r1, sp, #48	@ 0x30
 800ff62:	4640      	mov	r0, r8
 800ff64:	f88d 5018 	strb.w	r5, [sp, #24]
 800ff68:	f000 fbf0 	bl	801074c <uxr_read_session_header>
 800ff6c:	b918      	cbnz	r0, 800ff76 <listen_message_reliably+0x192>
 800ff6e:	4620      	mov	r0, r4
 800ff70:	b01d      	add	sp, #116	@ 0x74
 800ff72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff76:	4629      	mov	r1, r5
 800ff78:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ff7c:	f000 fc8a 	bl	8010894 <uxr_stream_id_from_raw>
 800ff80:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800ff84:	2d01      	cmp	r5, #1
 800ff86:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800ff8a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800ff8e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ff92:	d04b      	beq.n	801002c <listen_message_reliably+0x248>
 800ff94:	2d02      	cmp	r5, #2
 800ff96:	d00f      	beq.n	800ffb8 <listen_message_reliably+0x1d4>
 800ff98:	2d00      	cmp	r5, #0
 800ff9a:	d1e8      	bne.n	800ff6e <listen_message_reliably+0x18a>
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f000 fc78 	bl	8010894 <uxr_stream_id_from_raw>
 800ffa4:	a90c      	add	r1, sp, #48	@ 0x30
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	4640      	mov	r0, r8
 800ffaa:	920a      	str	r2, [sp, #40]	@ 0x28
 800ffac:	f7ff fd92 	bl	800fad4 <read_submessage_list>
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	b01d      	add	sp, #116	@ 0x74
 800ffb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb8:	4631      	mov	r1, r6
 800ffba:	f108 0008 	add.w	r0, r8, #8
 800ffbe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800ffc2:	f000 fd55 	bl	8010a70 <uxr_get_input_reliable_stream>
 800ffc6:	4607      	mov	r7, r0
 800ffc8:	b338      	cbz	r0, 801001a <listen_message_reliably+0x236>
 800ffca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ffcc:	9203      	str	r2, [sp, #12]
 800ffce:	a80c      	add	r0, sp, #48	@ 0x30
 800ffd0:	f7ff f89e 	bl	800f110 <ucdr_buffer_remaining>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	f10d 0019 	add.w	r0, sp, #25
 800ffda:	9000      	str	r0, [sp, #0]
 800ffdc:	9a03      	ldr	r2, [sp, #12]
 800ffde:	4651      	mov	r1, sl
 800ffe0:	4638      	mov	r0, r7
 800ffe2:	f007 f863 	bl	80170ac <uxr_receive_reliable_message>
 800ffe6:	b1c0      	cbz	r0, 801001a <listen_message_reliably+0x236>
 800ffe8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ffec:	b393      	cbz	r3, 8010054 <listen_message_reliably+0x270>
 800ffee:	ad14      	add	r5, sp, #80	@ 0x50
 800fff0:	f04f 0a02 	mov.w	sl, #2
 800fff4:	e00a      	b.n	801000c <listen_message_reliably+0x228>
 800fff6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800fffa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800fffe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010002:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010004:	4629      	mov	r1, r5
 8010006:	4640      	mov	r0, r8
 8010008:	f7ff fd64 	bl	800fad4 <read_submessage_list>
 801000c:	2204      	movs	r2, #4
 801000e:	4629      	mov	r1, r5
 8010010:	4638      	mov	r0, r7
 8010012:	f007 f8cb 	bl	80171ac <uxr_next_input_reliable_buffer_available>
 8010016:	2800      	cmp	r0, #0
 8010018:	d1ed      	bne.n	800fff6 <listen_message_reliably+0x212>
 801001a:	4640      	mov	r0, r8
 801001c:	4632      	mov	r2, r6
 801001e:	4649      	mov	r1, r9
 8010020:	f7ff fbd2 	bl	800f7c8 <write_submessage_acknack.isra.0>
 8010024:	4620      	mov	r0, r4
 8010026:	b01d      	add	sp, #116	@ 0x74
 8010028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002c:	4631      	mov	r1, r6
 801002e:	f108 0008 	add.w	r0, r8, #8
 8010032:	f000 fd13 	bl	8010a5c <uxr_get_input_best_effort_stream>
 8010036:	2800      	cmp	r0, #0
 8010038:	d099      	beq.n	800ff6e <listen_message_reliably+0x18a>
 801003a:	4651      	mov	r1, sl
 801003c:	f006 ffa2 	bl	8016f84 <uxr_receive_best_effort_message>
 8010040:	2800      	cmp	r0, #0
 8010042:	d094      	beq.n	800ff6e <listen_message_reliably+0x18a>
 8010044:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010048:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801004a:	a90c      	add	r1, sp, #48	@ 0x30
 801004c:	4640      	mov	r0, r8
 801004e:	f7ff fd41 	bl	800fad4 <read_submessage_list>
 8010052:	e78c      	b.n	800ff6e <listen_message_reliably+0x18a>
 8010054:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010058:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801005a:	a90c      	add	r1, sp, #48	@ 0x30
 801005c:	4640      	mov	r0, r8
 801005e:	f7ff fd39 	bl	800fad4 <read_submessage_list>
 8010062:	e7c4      	b.n	800ffee <listen_message_reliably+0x20a>

08010064 <uxr_run_session_timeout>:
 8010064:	b570      	push	{r4, r5, r6, lr}
 8010066:	4604      	mov	r4, r0
 8010068:	460d      	mov	r5, r1
 801006a:	f000 fd67 	bl	8010b3c <uxr_millis>
 801006e:	4606      	mov	r6, r0
 8010070:	4620      	mov	r0, r4
 8010072:	f7ff fc71 	bl	800f958 <uxr_flash_output_streams>
 8010076:	4629      	mov	r1, r5
 8010078:	4620      	mov	r0, r4
 801007a:	f7ff feb3 	bl	800fde4 <listen_message_reliably>
 801007e:	f000 fd5d 	bl	8010b3c <uxr_millis>
 8010082:	1b83      	subs	r3, r0, r6
 8010084:	1ae9      	subs	r1, r5, r3
 8010086:	2900      	cmp	r1, #0
 8010088:	dcf6      	bgt.n	8010078 <uxr_run_session_timeout+0x14>
 801008a:	f104 0008 	add.w	r0, r4, #8
 801008e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010092:	f000 bcf7 	b.w	8010a84 <uxr_output_streams_confirmed>
 8010096:	bf00      	nop

08010098 <uxr_run_session_until_data>:
 8010098:	b570      	push	{r4, r5, r6, lr}
 801009a:	4604      	mov	r4, r0
 801009c:	460d      	mov	r5, r1
 801009e:	f000 fd4d 	bl	8010b3c <uxr_millis>
 80100a2:	4606      	mov	r6, r0
 80100a4:	4620      	mov	r0, r4
 80100a6:	f7ff fc57 	bl	800f958 <uxr_flash_output_streams>
 80100aa:	2300      	movs	r3, #0
 80100ac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80100b0:	4629      	mov	r1, r5
 80100b2:	e005      	b.n	80100c0 <uxr_run_session_until_data+0x28>
 80100b4:	f000 fd42 	bl	8010b3c <uxr_millis>
 80100b8:	1b83      	subs	r3, r0, r6
 80100ba:	1ae9      	subs	r1, r5, r3
 80100bc:	2900      	cmp	r1, #0
 80100be:	dd07      	ble.n	80100d0 <uxr_run_session_until_data+0x38>
 80100c0:	4620      	mov	r0, r4
 80100c2:	f7ff fe8f 	bl	800fde4 <listen_message_reliably>
 80100c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d0f2      	beq.n	80100b4 <uxr_run_session_until_data+0x1c>
 80100ce:	bd70      	pop	{r4, r5, r6, pc}
 80100d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80100d4:	bd70      	pop	{r4, r5, r6, pc}
 80100d6:	bf00      	nop

080100d8 <uxr_run_session_until_confirm_delivery>:
 80100d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100dc:	4606      	mov	r6, r0
 80100de:	460d      	mov	r5, r1
 80100e0:	f000 fd2c 	bl	8010b3c <uxr_millis>
 80100e4:	4607      	mov	r7, r0
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7ff fc36 	bl	800f958 <uxr_flash_output_streams>
 80100ec:	2d00      	cmp	r5, #0
 80100ee:	f106 0808 	add.w	r8, r6, #8
 80100f2:	bfa8      	it	ge
 80100f4:	462c      	movge	r4, r5
 80100f6:	da07      	bge.n	8010108 <uxr_run_session_until_confirm_delivery+0x30>
 80100f8:	e00e      	b.n	8010118 <uxr_run_session_until_confirm_delivery+0x40>
 80100fa:	f7ff fe73 	bl	800fde4 <listen_message_reliably>
 80100fe:	f000 fd1d 	bl	8010b3c <uxr_millis>
 8010102:	1bc3      	subs	r3, r0, r7
 8010104:	1aec      	subs	r4, r5, r3
 8010106:	d407      	bmi.n	8010118 <uxr_run_session_until_confirm_delivery+0x40>
 8010108:	4640      	mov	r0, r8
 801010a:	f000 fcbb 	bl	8010a84 <uxr_output_streams_confirmed>
 801010e:	4603      	mov	r3, r0
 8010110:	4621      	mov	r1, r4
 8010112:	4630      	mov	r0, r6
 8010114:	2b00      	cmp	r3, #0
 8010116:	d0f0      	beq.n	80100fa <uxr_run_session_until_confirm_delivery+0x22>
 8010118:	4640      	mov	r0, r8
 801011a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801011e:	f000 bcb1 	b.w	8010a84 <uxr_output_streams_confirmed>
 8010122:	bf00      	nop

08010124 <uxr_run_session_until_all_status>:
 8010124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010128:	9c08      	ldr	r4, [sp, #32]
 801012a:	4606      	mov	r6, r0
 801012c:	460f      	mov	r7, r1
 801012e:	4691      	mov	r9, r2
 8010130:	461d      	mov	r5, r3
 8010132:	f7ff fc11 	bl	800f958 <uxr_flash_output_streams>
 8010136:	b124      	cbz	r4, 8010142 <uxr_run_session_until_all_status+0x1e>
 8010138:	4622      	mov	r2, r4
 801013a:	21ff      	movs	r1, #255	@ 0xff
 801013c:	4628      	mov	r0, r5
 801013e:	f009 fc92 	bl	8019a66 <memset>
 8010142:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010146:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010148:	f000 fcf8 	bl	8010b3c <uxr_millis>
 801014c:	3d01      	subs	r5, #1
 801014e:	f1a9 0902 	sub.w	r9, r9, #2
 8010152:	4680      	mov	r8, r0
 8010154:	4639      	mov	r1, r7
 8010156:	4630      	mov	r0, r6
 8010158:	f7ff fe44 	bl	800fde4 <listen_message_reliably>
 801015c:	f000 fcee 	bl	8010b3c <uxr_millis>
 8010160:	eba0 0008 	sub.w	r0, r0, r8
 8010164:	1a39      	subs	r1, r7, r0
 8010166:	b344      	cbz	r4, 80101ba <uxr_run_session_until_all_status+0x96>
 8010168:	4628      	mov	r0, r5
 801016a:	46ac      	mov	ip, r5
 801016c:	2301      	movs	r3, #1
 801016e:	e002      	b.n	8010176 <uxr_run_session_until_all_status+0x52>
 8010170:	42a3      	cmp	r3, r4
 8010172:	d20d      	bcs.n	8010190 <uxr_run_session_until_all_status+0x6c>
 8010174:	3301      	adds	r3, #1
 8010176:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801017a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801017e:	d1f7      	bne.n	8010170 <uxr_run_session_until_all_status+0x4c>
 8010180:	42a3      	cmp	r3, r4
 8010182:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010186:	d213      	bcs.n	80101b0 <uxr_run_session_until_all_status+0x8c>
 8010188:	2a00      	cmp	r2, #0
 801018a:	d0f3      	beq.n	8010174 <uxr_run_session_until_all_status+0x50>
 801018c:	2900      	cmp	r1, #0
 801018e:	dce2      	bgt.n	8010156 <uxr_run_session_until_all_status+0x32>
 8010190:	2300      	movs	r3, #0
 8010192:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010194:	442c      	add	r4, r5
 8010196:	e001      	b.n	801019c <uxr_run_session_until_all_status+0x78>
 8010198:	2b01      	cmp	r3, #1
 801019a:	d812      	bhi.n	80101c2 <uxr_run_session_until_all_status+0x9e>
 801019c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80101a0:	4284      	cmp	r4, r0
 80101a2:	d1f9      	bne.n	8010198 <uxr_run_session_until_all_status+0x74>
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	bf8c      	ite	hi
 80101a8:	2000      	movhi	r0, #0
 80101aa:	2001      	movls	r0, #1
 80101ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101b0:	2900      	cmp	r1, #0
 80101b2:	dded      	ble.n	8010190 <uxr_run_session_until_all_status+0x6c>
 80101b4:	2a00      	cmp	r2, #0
 80101b6:	d1ce      	bne.n	8010156 <uxr_run_session_until_all_status+0x32>
 80101b8:	e7ea      	b.n	8010190 <uxr_run_session_until_all_status+0x6c>
 80101ba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80101bc:	2001      	movs	r0, #1
 80101be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c2:	2000      	movs	r0, #0
 80101c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080101c8 <wait_session_status>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	4604      	mov	r4, r0
 80101ce:	b09d      	sub	sp, #116	@ 0x74
 80101d0:	20ff      	movs	r0, #255	@ 0xff
 80101d2:	7160      	strb	r0, [r4, #5]
 80101d4:	9303      	str	r3, [sp, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f000 80b6 	beq.w	8010348 <wait_session_status+0x180>
 80101dc:	468a      	mov	sl, r1
 80101de:	4691      	mov	r9, r2
 80101e0:	f04f 0b00 	mov.w	fp, #0
 80101e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80101e6:	464a      	mov	r2, r9
 80101e8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80101ec:	4651      	mov	r1, sl
 80101ee:	47a8      	blx	r5
 80101f0:	f000 fca4 	bl	8010b3c <uxr_millis>
 80101f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80101f8:	4605      	mov	r5, r0
 80101fa:	e009      	b.n	8010210 <wait_session_status+0x48>
 80101fc:	f000 fc9e 	bl	8010b3c <uxr_millis>
 8010200:	1b40      	subs	r0, r0, r5
 8010202:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010206:	2b00      	cmp	r3, #0
 8010208:	dd40      	ble.n	801028c <wait_session_status+0xc4>
 801020a:	7960      	ldrb	r0, [r4, #5]
 801020c:	28ff      	cmp	r0, #255	@ 0xff
 801020e:	d145      	bne.n	801029c <wait_session_status+0xd4>
 8010210:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010212:	a908      	add	r1, sp, #32
 8010214:	6896      	ldr	r6, [r2, #8]
 8010216:	6810      	ldr	r0, [r2, #0]
 8010218:	aa09      	add	r2, sp, #36	@ 0x24
 801021a:	47b0      	blx	r6
 801021c:	2800      	cmp	r0, #0
 801021e:	d0ed      	beq.n	80101fc <wait_session_status+0x34>
 8010220:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010224:	a80c      	add	r0, sp, #48	@ 0x30
 8010226:	f7fe ff43 	bl	800f0b0 <ucdr_init_buffer>
 801022a:	2600      	movs	r6, #0
 801022c:	f10d 031e 	add.w	r3, sp, #30
 8010230:	aa07      	add	r2, sp, #28
 8010232:	a90c      	add	r1, sp, #48	@ 0x30
 8010234:	4620      	mov	r0, r4
 8010236:	f88d 601c 	strb.w	r6, [sp, #28]
 801023a:	f000 fa87 	bl	801074c <uxr_read_session_header>
 801023e:	2800      	cmp	r0, #0
 8010240:	d0dc      	beq.n	80101fc <wait_session_status+0x34>
 8010242:	4631      	mov	r1, r6
 8010244:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010248:	f000 fb24 	bl	8010894 <uxr_stream_id_from_raw>
 801024c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010250:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010254:	9302      	str	r3, [sp, #8]
 8010256:	2f01      	cmp	r7, #1
 8010258:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801025c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010260:	d05c      	beq.n	801031c <wait_session_status+0x154>
 8010262:	2f02      	cmp	r7, #2
 8010264:	d020      	beq.n	80102a8 <wait_session_status+0xe0>
 8010266:	2f00      	cmp	r7, #0
 8010268:	d1c8      	bne.n	80101fc <wait_session_status+0x34>
 801026a:	4639      	mov	r1, r7
 801026c:	4638      	mov	r0, r7
 801026e:	f000 fb11 	bl	8010894 <uxr_stream_id_from_raw>
 8010272:	a90c      	add	r1, sp, #48	@ 0x30
 8010274:	4602      	mov	r2, r0
 8010276:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010278:	4620      	mov	r0, r4
 801027a:	f7ff fc2b 	bl	800fad4 <read_submessage_list>
 801027e:	f000 fc5d 	bl	8010b3c <uxr_millis>
 8010282:	1b40      	subs	r0, r0, r5
 8010284:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010288:	2b00      	cmp	r3, #0
 801028a:	dcbe      	bgt.n	801020a <wait_session_status+0x42>
 801028c:	9b03      	ldr	r3, [sp, #12]
 801028e:	7960      	ldrb	r0, [r4, #5]
 8010290:	f10b 0b01 	add.w	fp, fp, #1
 8010294:	455b      	cmp	r3, fp
 8010296:	d001      	beq.n	801029c <wait_session_status+0xd4>
 8010298:	28ff      	cmp	r0, #255	@ 0xff
 801029a:	d0a3      	beq.n	80101e4 <wait_session_status+0x1c>
 801029c:	38ff      	subs	r0, #255	@ 0xff
 801029e:	bf18      	it	ne
 80102a0:	2001      	movne	r0, #1
 80102a2:	b01d      	add	sp, #116	@ 0x74
 80102a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80102ac:	9304      	str	r3, [sp, #16]
 80102ae:	4631      	mov	r1, r6
 80102b0:	f104 0008 	add.w	r0, r4, #8
 80102b4:	f000 fbdc 	bl	8010a70 <uxr_get_input_reliable_stream>
 80102b8:	4680      	mov	r8, r0
 80102ba:	b348      	cbz	r0, 8010310 <wait_session_status+0x148>
 80102bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80102be:	9205      	str	r2, [sp, #20]
 80102c0:	a80c      	add	r0, sp, #48	@ 0x30
 80102c2:	f7fe ff25 	bl	800f110 <ucdr_buffer_remaining>
 80102c6:	4603      	mov	r3, r0
 80102c8:	f10d 001d 	add.w	r0, sp, #29
 80102cc:	9000      	str	r0, [sp, #0]
 80102ce:	9a05      	ldr	r2, [sp, #20]
 80102d0:	9902      	ldr	r1, [sp, #8]
 80102d2:	4640      	mov	r0, r8
 80102d4:	f006 feea 	bl	80170ac <uxr_receive_reliable_message>
 80102d8:	b1d0      	cbz	r0, 8010310 <wait_session_status+0x148>
 80102da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d03a      	beq.n	8010358 <wait_session_status+0x190>
 80102e2:	9f04      	ldr	r7, [sp, #16]
 80102e4:	e00a      	b.n	80102fc <wait_session_status+0x134>
 80102e6:	f04f 0302 	mov.w	r3, #2
 80102ea:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80102ee:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80102f2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80102f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80102f8:	f7ff fbec 	bl	800fad4 <read_submessage_list>
 80102fc:	a914      	add	r1, sp, #80	@ 0x50
 80102fe:	2204      	movs	r2, #4
 8010300:	4640      	mov	r0, r8
 8010302:	f006 ff53 	bl	80171ac <uxr_next_input_reliable_buffer_available>
 8010306:	4603      	mov	r3, r0
 8010308:	a914      	add	r1, sp, #80	@ 0x50
 801030a:	4620      	mov	r0, r4
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1ea      	bne.n	80102e6 <wait_session_status+0x11e>
 8010310:	9904      	ldr	r1, [sp, #16]
 8010312:	4632      	mov	r2, r6
 8010314:	4620      	mov	r0, r4
 8010316:	f7ff fa57 	bl	800f7c8 <write_submessage_acknack.isra.0>
 801031a:	e76f      	b.n	80101fc <wait_session_status+0x34>
 801031c:	4631      	mov	r1, r6
 801031e:	f104 0008 	add.w	r0, r4, #8
 8010322:	f000 fb9b 	bl	8010a5c <uxr_get_input_best_effort_stream>
 8010326:	2800      	cmp	r0, #0
 8010328:	f43f af68 	beq.w	80101fc <wait_session_status+0x34>
 801032c:	9902      	ldr	r1, [sp, #8]
 801032e:	f006 fe29 	bl	8016f84 <uxr_receive_best_effort_message>
 8010332:	2800      	cmp	r0, #0
 8010334:	f43f af62 	beq.w	80101fc <wait_session_status+0x34>
 8010338:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801033c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801033e:	a90c      	add	r1, sp, #48	@ 0x30
 8010340:	4620      	mov	r0, r4
 8010342:	f7ff fbc7 	bl	800fad4 <read_submessage_list>
 8010346:	e759      	b.n	80101fc <wait_session_status+0x34>
 8010348:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801034a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801034e:	47a0      	blx	r4
 8010350:	2001      	movs	r0, #1
 8010352:	b01d      	add	sp, #116	@ 0x74
 8010354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010358:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801035c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801035e:	a90c      	add	r1, sp, #48	@ 0x30
 8010360:	4620      	mov	r0, r4
 8010362:	f7ff fbb7 	bl	800fad4 <read_submessage_list>
 8010366:	e7bc      	b.n	80102e2 <wait_session_status+0x11a>

08010368 <uxr_delete_session_retries>:
 8010368:	b530      	push	{r4, r5, lr}
 801036a:	b08f      	sub	sp, #60	@ 0x3c
 801036c:	4604      	mov	r4, r0
 801036e:	460d      	mov	r5, r1
 8010370:	f000 fa2e 	bl	80107d0 <uxr_session_header_offset>
 8010374:	2300      	movs	r3, #0
 8010376:	2210      	movs	r2, #16
 8010378:	9000      	str	r0, [sp, #0]
 801037a:	a902      	add	r1, sp, #8
 801037c:	a806      	add	r0, sp, #24
 801037e:	f7fe fe85 	bl	800f08c <ucdr_init_buffer_origin_offset>
 8010382:	a906      	add	r1, sp, #24
 8010384:	4620      	mov	r0, r4
 8010386:	f000 f973 	bl	8010670 <uxr_buffer_delete_session>
 801038a:	2200      	movs	r2, #0
 801038c:	4611      	mov	r1, r2
 801038e:	9b06      	ldr	r3, [sp, #24]
 8010390:	4620      	mov	r0, r4
 8010392:	f000 f9c7 	bl	8010724 <uxr_stamp_session_header>
 8010396:	a806      	add	r0, sp, #24
 8010398:	f7fe feb6 	bl	800f108 <ucdr_buffer_length>
 801039c:	462b      	mov	r3, r5
 801039e:	4602      	mov	r2, r0
 80103a0:	a902      	add	r1, sp, #8
 80103a2:	4620      	mov	r0, r4
 80103a4:	f7ff ff10 	bl	80101c8 <wait_session_status>
 80103a8:	b118      	cbz	r0, 80103b2 <uxr_delete_session_retries+0x4a>
 80103aa:	7960      	ldrb	r0, [r4, #5]
 80103ac:	fab0 f080 	clz	r0, r0
 80103b0:	0940      	lsrs	r0, r0, #5
 80103b2:	b00f      	add	sp, #60	@ 0x3c
 80103b4:	bd30      	pop	{r4, r5, pc}
 80103b6:	bf00      	nop

080103b8 <uxr_create_session>:
 80103b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103bc:	f100 0b08 	add.w	fp, r0, #8
 80103c0:	b0ab      	sub	sp, #172	@ 0xac
 80103c2:	4604      	mov	r4, r0
 80103c4:	4658      	mov	r0, fp
 80103c6:	f000 fa99 	bl	80108fc <uxr_reset_stream_storage>
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 fa00 	bl	80107d0 <uxr_session_header_offset>
 80103d0:	2300      	movs	r3, #0
 80103d2:	9000      	str	r0, [sp, #0]
 80103d4:	221c      	movs	r2, #28
 80103d6:	a90b      	add	r1, sp, #44	@ 0x2c
 80103d8:	a812      	add	r0, sp, #72	@ 0x48
 80103da:	f7fe fe57 	bl	800f08c <ucdr_init_buffer_origin_offset>
 80103de:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80103e0:	8a1a      	ldrh	r2, [r3, #16]
 80103e2:	3a04      	subs	r2, #4
 80103e4:	b292      	uxth	r2, r2
 80103e6:	a912      	add	r1, sp, #72	@ 0x48
 80103e8:	4620      	mov	r0, r4
 80103ea:	f000 f917 	bl	801061c <uxr_buffer_create_session>
 80103ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 f983 	bl	80106fc <uxr_stamp_create_session_header>
 80103f6:	a812      	add	r0, sp, #72	@ 0x48
 80103f8:	f7fe fe86 	bl	800f108 <ucdr_buffer_length>
 80103fc:	23ff      	movs	r3, #255	@ 0xff
 80103fe:	7163      	strb	r3, [r4, #5]
 8010400:	230a      	movs	r3, #10
 8010402:	46da      	mov	sl, fp
 8010404:	9303      	str	r3, [sp, #12]
 8010406:	4683      	mov	fp, r0
 8010408:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801040a:	465a      	mov	r2, fp
 801040c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010410:	a90b      	add	r1, sp, #44	@ 0x2c
 8010412:	47a8      	blx	r5
 8010414:	f000 fb92 	bl	8010b3c <uxr_millis>
 8010418:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801041c:	4605      	mov	r5, r0
 801041e:	e009      	b.n	8010434 <uxr_create_session+0x7c>
 8010420:	f000 fb8c 	bl	8010b3c <uxr_millis>
 8010424:	1b40      	subs	r0, r0, r5
 8010426:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801042a:	2b00      	cmp	r3, #0
 801042c:	7962      	ldrb	r2, [r4, #5]
 801042e:	dd38      	ble.n	80104a2 <uxr_create_session+0xea>
 8010430:	2aff      	cmp	r2, #255	@ 0xff
 8010432:	d13c      	bne.n	80104ae <uxr_create_session+0xf6>
 8010434:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010436:	a907      	add	r1, sp, #28
 8010438:	6896      	ldr	r6, [r2, #8]
 801043a:	6810      	ldr	r0, [r2, #0]
 801043c:	aa08      	add	r2, sp, #32
 801043e:	47b0      	blx	r6
 8010440:	2800      	cmp	r0, #0
 8010442:	d0ed      	beq.n	8010420 <uxr_create_session+0x68>
 8010444:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010448:	a81a      	add	r0, sp, #104	@ 0x68
 801044a:	f7fe fe31 	bl	800f0b0 <ucdr_init_buffer>
 801044e:	2600      	movs	r6, #0
 8010450:	f10d 031a 	add.w	r3, sp, #26
 8010454:	aa06      	add	r2, sp, #24
 8010456:	a91a      	add	r1, sp, #104	@ 0x68
 8010458:	4620      	mov	r0, r4
 801045a:	f88d 6018 	strb.w	r6, [sp, #24]
 801045e:	f000 f975 	bl	801074c <uxr_read_session_header>
 8010462:	2800      	cmp	r0, #0
 8010464:	d0dc      	beq.n	8010420 <uxr_create_session+0x68>
 8010466:	4631      	mov	r1, r6
 8010468:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801046c:	f000 fa12 	bl	8010894 <uxr_stream_id_from_raw>
 8010470:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010474:	2e01      	cmp	r6, #1
 8010476:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801047a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801047e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8010482:	d053      	beq.n	801052c <uxr_create_session+0x174>
 8010484:	2e02      	cmp	r6, #2
 8010486:	d018      	beq.n	80104ba <uxr_create_session+0x102>
 8010488:	2e00      	cmp	r6, #0
 801048a:	d1c9      	bne.n	8010420 <uxr_create_session+0x68>
 801048c:	4631      	mov	r1, r6
 801048e:	4630      	mov	r0, r6
 8010490:	f000 fa00 	bl	8010894 <uxr_stream_id_from_raw>
 8010494:	a91a      	add	r1, sp, #104	@ 0x68
 8010496:	4602      	mov	r2, r0
 8010498:	900a      	str	r0, [sp, #40]	@ 0x28
 801049a:	4620      	mov	r0, r4
 801049c:	f7ff fb1a 	bl	800fad4 <read_submessage_list>
 80104a0:	e7be      	b.n	8010420 <uxr_create_session+0x68>
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	3b01      	subs	r3, #1
 80104a6:	9303      	str	r3, [sp, #12]
 80104a8:	d001      	beq.n	80104ae <uxr_create_session+0xf6>
 80104aa:	2aff      	cmp	r2, #255	@ 0xff
 80104ac:	d0ac      	beq.n	8010408 <uxr_create_session+0x50>
 80104ae:	2a00      	cmp	r2, #0
 80104b0:	d051      	beq.n	8010556 <uxr_create_session+0x19e>
 80104b2:	2000      	movs	r0, #0
 80104b4:	b02b      	add	sp, #172	@ 0xac
 80104b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80104be:	9304      	str	r3, [sp, #16]
 80104c0:	4639      	mov	r1, r7
 80104c2:	4650      	mov	r0, sl
 80104c4:	f000 fad4 	bl	8010a70 <uxr_get_input_reliable_stream>
 80104c8:	4680      	mov	r8, r0
 80104ca:	b348      	cbz	r0, 8010520 <uxr_create_session+0x168>
 80104cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80104ce:	9205      	str	r2, [sp, #20]
 80104d0:	a81a      	add	r0, sp, #104	@ 0x68
 80104d2:	f7fe fe1d 	bl	800f110 <ucdr_buffer_remaining>
 80104d6:	4603      	mov	r3, r0
 80104d8:	f10d 0019 	add.w	r0, sp, #25
 80104dc:	9000      	str	r0, [sp, #0]
 80104de:	9a05      	ldr	r2, [sp, #20]
 80104e0:	4649      	mov	r1, r9
 80104e2:	4640      	mov	r0, r8
 80104e4:	f006 fde2 	bl	80170ac <uxr_receive_reliable_message>
 80104e8:	b1d0      	cbz	r0, 8010520 <uxr_create_session+0x168>
 80104ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d038      	beq.n	8010564 <uxr_create_session+0x1ac>
 80104f2:	9e04      	ldr	r6, [sp, #16]
 80104f4:	e00a      	b.n	801050c <uxr_create_session+0x154>
 80104f6:	f04f 0302 	mov.w	r3, #2
 80104fa:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80104fe:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8010502:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010508:	f7ff fae4 	bl	800fad4 <read_submessage_list>
 801050c:	a922      	add	r1, sp, #136	@ 0x88
 801050e:	2204      	movs	r2, #4
 8010510:	4640      	mov	r0, r8
 8010512:	f006 fe4b 	bl	80171ac <uxr_next_input_reliable_buffer_available>
 8010516:	4603      	mov	r3, r0
 8010518:	a922      	add	r1, sp, #136	@ 0x88
 801051a:	4620      	mov	r0, r4
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1ea      	bne.n	80104f6 <uxr_create_session+0x13e>
 8010520:	9904      	ldr	r1, [sp, #16]
 8010522:	463a      	mov	r2, r7
 8010524:	4620      	mov	r0, r4
 8010526:	f7ff f94f 	bl	800f7c8 <write_submessage_acknack.isra.0>
 801052a:	e779      	b.n	8010420 <uxr_create_session+0x68>
 801052c:	4639      	mov	r1, r7
 801052e:	4650      	mov	r0, sl
 8010530:	f000 fa94 	bl	8010a5c <uxr_get_input_best_effort_stream>
 8010534:	2800      	cmp	r0, #0
 8010536:	f43f af73 	beq.w	8010420 <uxr_create_session+0x68>
 801053a:	4649      	mov	r1, r9
 801053c:	f006 fd22 	bl	8016f84 <uxr_receive_best_effort_message>
 8010540:	2800      	cmp	r0, #0
 8010542:	f43f af6d 	beq.w	8010420 <uxr_create_session+0x68>
 8010546:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801054a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801054c:	a91a      	add	r1, sp, #104	@ 0x68
 801054e:	4620      	mov	r0, r4
 8010550:	f7ff fac0 	bl	800fad4 <read_submessage_list>
 8010554:	e764      	b.n	8010420 <uxr_create_session+0x68>
 8010556:	4650      	mov	r0, sl
 8010558:	f000 f9d0 	bl	80108fc <uxr_reset_stream_storage>
 801055c:	2001      	movs	r0, #1
 801055e:	b02b      	add	sp, #172	@ 0xac
 8010560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010564:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8010568:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801056a:	a91a      	add	r1, sp, #104	@ 0x68
 801056c:	4620      	mov	r0, r4
 801056e:	f7ff fab1 	bl	800fad4 <read_submessage_list>
 8010572:	e7be      	b.n	80104f2 <uxr_create_session+0x13a>

08010574 <uxr_prepare_stream_to_write_submessage>:
 8010574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010578:	b082      	sub	sp, #8
 801057a:	4682      	mov	sl, r0
 801057c:	4610      	mov	r0, r2
 801057e:	4615      	mov	r5, r2
 8010580:	461e      	mov	r6, r3
 8010582:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8010586:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801058a:	9101      	str	r1, [sp, #4]
 801058c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010590:	f000 face 	bl	8010b30 <uxr_submessage_padding>
 8010594:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010598:	f105 0904 	add.w	r9, r5, #4
 801059c:	2b01      	cmp	r3, #1
 801059e:	4481      	add	r9, r0
 80105a0:	d01d      	beq.n	80105de <uxr_prepare_stream_to_write_submessage+0x6a>
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	d116      	bne.n	80105d4 <uxr_prepare_stream_to_write_submessage+0x60>
 80105a6:	4621      	mov	r1, r4
 80105a8:	f10a 0008 	add.w	r0, sl, #8
 80105ac:	f000 fa4c 	bl	8010a48 <uxr_get_output_reliable_stream>
 80105b0:	4604      	mov	r4, r0
 80105b2:	b158      	cbz	r0, 80105cc <uxr_prepare_stream_to_write_submessage+0x58>
 80105b4:	4649      	mov	r1, r9
 80105b6:	4632      	mov	r2, r6
 80105b8:	f006 ffb4 	bl	8017524 <uxr_prepare_reliable_buffer_to_write>
 80105bc:	4604      	mov	r4, r0
 80105be:	b12c      	cbz	r4, 80105cc <uxr_prepare_stream_to_write_submessage+0x58>
 80105c0:	4643      	mov	r3, r8
 80105c2:	b2aa      	uxth	r2, r5
 80105c4:	4639      	mov	r1, r7
 80105c6:	4630      	mov	r0, r6
 80105c8:	f000 fa72 	bl	8010ab0 <uxr_buffer_submessage_header>
 80105cc:	4620      	mov	r0, r4
 80105ce:	b002      	add	sp, #8
 80105d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105d4:	2400      	movs	r4, #0
 80105d6:	4620      	mov	r0, r4
 80105d8:	b002      	add	sp, #8
 80105da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105de:	4621      	mov	r1, r4
 80105e0:	f10a 0008 	add.w	r0, sl, #8
 80105e4:	f000 fa28 	bl	8010a38 <uxr_get_output_best_effort_stream>
 80105e8:	4604      	mov	r4, r0
 80105ea:	2800      	cmp	r0, #0
 80105ec:	d0ee      	beq.n	80105cc <uxr_prepare_stream_to_write_submessage+0x58>
 80105ee:	4649      	mov	r1, r9
 80105f0:	4632      	mov	r2, r6
 80105f2:	f006 fec7 	bl	8017384 <uxr_prepare_best_effort_buffer_to_write>
 80105f6:	4604      	mov	r4, r0
 80105f8:	e7e1      	b.n	80105be <uxr_prepare_stream_to_write_submessage+0x4a>
 80105fa:	bf00      	nop

080105fc <uxr_init_session_info>:
 80105fc:	0e13      	lsrs	r3, r2, #24
 80105fe:	7043      	strb	r3, [r0, #1]
 8010600:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010604:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010608:	7001      	strb	r1, [r0, #0]
 801060a:	70c3      	strb	r3, [r0, #3]
 801060c:	2109      	movs	r1, #9
 801060e:	23ff      	movs	r3, #255	@ 0xff
 8010610:	f880 c002 	strb.w	ip, [r0, #2]
 8010614:	7102      	strb	r2, [r0, #4]
 8010616:	80c1      	strh	r1, [r0, #6]
 8010618:	7143      	strb	r3, [r0, #5]
 801061a:	4770      	bx	lr

0801061c <uxr_buffer_create_session>:
 801061c:	b530      	push	{r4, r5, lr}
 801061e:	b089      	sub	sp, #36	@ 0x24
 8010620:	2300      	movs	r3, #0
 8010622:	4d12      	ldr	r5, [pc, #72]	@ (801066c <uxr_buffer_create_session+0x50>)
 8010624:	9307      	str	r3, [sp, #28]
 8010626:	f8ad 201c 	strh.w	r2, [sp, #28]
 801062a:	2201      	movs	r2, #1
 801062c:	9301      	str	r3, [sp, #4]
 801062e:	80c2      	strh	r2, [r0, #6]
 8010630:	f88d 2004 	strb.w	r2, [sp, #4]
 8010634:	682a      	ldr	r2, [r5, #0]
 8010636:	9200      	str	r2, [sp, #0]
 8010638:	88aa      	ldrh	r2, [r5, #4]
 801063a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801063e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010642:	9202      	str	r2, [sp, #8]
 8010644:	460c      	mov	r4, r1
 8010646:	7802      	ldrb	r2, [r0, #0]
 8010648:	9303      	str	r3, [sp, #12]
 801064a:	4619      	mov	r1, r3
 801064c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010650:	4620      	mov	r0, r4
 8010652:	2210      	movs	r2, #16
 8010654:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010658:	9306      	str	r3, [sp, #24]
 801065a:	f000 fa29 	bl	8010ab0 <uxr_buffer_submessage_header>
 801065e:	4669      	mov	r1, sp
 8010660:	4620      	mov	r0, r4
 8010662:	f001 faa1 	bl	8011ba8 <uxr_serialize_CREATE_CLIENT_Payload>
 8010666:	b009      	add	sp, #36	@ 0x24
 8010668:	bd30      	pop	{r4, r5, pc}
 801066a:	bf00      	nop
 801066c:	0801ae78 	.word	0x0801ae78

08010670 <uxr_buffer_delete_session>:
 8010670:	b510      	push	{r4, lr}
 8010672:	4b0c      	ldr	r3, [pc, #48]	@ (80106a4 <uxr_buffer_delete_session+0x34>)
 8010674:	b082      	sub	sp, #8
 8010676:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801067a:	f8ad c006 	strh.w	ip, [sp, #6]
 801067e:	460c      	mov	r4, r1
 8010680:	2202      	movs	r2, #2
 8010682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010686:	80c2      	strh	r2, [r0, #6]
 8010688:	f8ad 3004 	strh.w	r3, [sp, #4]
 801068c:	2204      	movs	r2, #4
 801068e:	2300      	movs	r3, #0
 8010690:	2103      	movs	r1, #3
 8010692:	4620      	mov	r0, r4
 8010694:	f000 fa0c 	bl	8010ab0 <uxr_buffer_submessage_header>
 8010698:	a901      	add	r1, sp, #4
 801069a:	4620      	mov	r0, r4
 801069c:	f001 fb2a 	bl	8011cf4 <uxr_serialize_DELETE_Payload>
 80106a0:	b002      	add	sp, #8
 80106a2:	bd10      	pop	{r4, pc}
 80106a4:	0801ae78 	.word	0x0801ae78

080106a8 <uxr_read_create_session_status>:
 80106a8:	b510      	push	{r4, lr}
 80106aa:	b088      	sub	sp, #32
 80106ac:	4604      	mov	r4, r0
 80106ae:	4608      	mov	r0, r1
 80106b0:	a901      	add	r1, sp, #4
 80106b2:	f001 fb2f 	bl	8011d14 <uxr_deserialize_STATUS_AGENT_Payload>
 80106b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80106ba:	7163      	strb	r3, [r4, #5]
 80106bc:	b008      	add	sp, #32
 80106be:	bd10      	pop	{r4, pc}

080106c0 <uxr_read_delete_session_status>:
 80106c0:	b510      	push	{r4, lr}
 80106c2:	4604      	mov	r4, r0
 80106c4:	b084      	sub	sp, #16
 80106c6:	4608      	mov	r0, r1
 80106c8:	a902      	add	r1, sp, #8
 80106ca:	f001 fb53 	bl	8011d74 <uxr_deserialize_STATUS_Payload>
 80106ce:	88e3      	ldrh	r3, [r4, #6]
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	d001      	beq.n	80106d8 <uxr_read_delete_session_status+0x18>
 80106d4:	b004      	add	sp, #16
 80106d6:	bd10      	pop	{r4, pc}
 80106d8:	f10d 000a 	add.w	r0, sp, #10
 80106dc:	f7fe fffa 	bl	800f6d4 <uxr_object_id_from_raw>
 80106e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80106e4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80106e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80106ec:	b29b      	uxth	r3, r3
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	bf04      	itt	eq
 80106f2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80106f6:	7163      	strbeq	r3, [r4, #5]
 80106f8:	b004      	add	sp, #16
 80106fa:	bd10      	pop	{r4, pc}

080106fc <uxr_stamp_create_session_header>:
 80106fc:	b510      	push	{r4, lr}
 80106fe:	2208      	movs	r2, #8
 8010700:	b08a      	sub	sp, #40	@ 0x28
 8010702:	4604      	mov	r4, r0
 8010704:	eb0d 0002 	add.w	r0, sp, r2
 8010708:	f7fe fcd2 	bl	800f0b0 <ucdr_init_buffer>
 801070c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010710:	9400      	str	r4, [sp, #0]
 8010712:	2300      	movs	r3, #0
 8010714:	461a      	mov	r2, r3
 8010716:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801071a:	a802      	add	r0, sp, #8
 801071c:	f000 fbc2 	bl	8010ea4 <uxr_serialize_message_header>
 8010720:	b00a      	add	sp, #40	@ 0x28
 8010722:	bd10      	pop	{r4, pc}

08010724 <uxr_stamp_session_header>:
 8010724:	b530      	push	{r4, r5, lr}
 8010726:	b08d      	sub	sp, #52	@ 0x34
 8010728:	4604      	mov	r4, r0
 801072a:	460d      	mov	r5, r1
 801072c:	9203      	str	r2, [sp, #12]
 801072e:	4619      	mov	r1, r3
 8010730:	a804      	add	r0, sp, #16
 8010732:	2208      	movs	r2, #8
 8010734:	f7fe fcbc 	bl	800f0b0 <ucdr_init_buffer>
 8010738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073c:	9b03      	ldr	r3, [sp, #12]
 801073e:	9400      	str	r4, [sp, #0]
 8010740:	462a      	mov	r2, r5
 8010742:	a804      	add	r0, sp, #16
 8010744:	f000 fbae 	bl	8010ea4 <uxr_serialize_message_header>
 8010748:	b00d      	add	sp, #52	@ 0x34
 801074a:	bd30      	pop	{r4, r5, pc}

0801074c <uxr_read_session_header>:
 801074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010750:	4607      	mov	r7, r0
 8010752:	b084      	sub	sp, #16
 8010754:	4608      	mov	r0, r1
 8010756:	460c      	mov	r4, r1
 8010758:	4615      	mov	r5, r2
 801075a:	461e      	mov	r6, r3
 801075c:	f7fe fcd8 	bl	800f110 <ucdr_buffer_remaining>
 8010760:	2808      	cmp	r0, #8
 8010762:	d803      	bhi.n	801076c <uxr_read_session_header+0x20>
 8010764:	2000      	movs	r0, #0
 8010766:	b004      	add	sp, #16
 8010768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076c:	f10d 080c 	add.w	r8, sp, #12
 8010770:	4633      	mov	r3, r6
 8010772:	462a      	mov	r2, r5
 8010774:	f8cd 8000 	str.w	r8, [sp]
 8010778:	4620      	mov	r0, r4
 801077a:	f10d 010b 	add.w	r1, sp, #11
 801077e:	f000 fbaf 	bl	8010ee0 <uxr_deserialize_message_header>
 8010782:	783a      	ldrb	r2, [r7, #0]
 8010784:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010788:	4293      	cmp	r3, r2
 801078a:	d1eb      	bne.n	8010764 <uxr_read_session_header+0x18>
 801078c:	061b      	lsls	r3, r3, #24
 801078e:	d41c      	bmi.n	80107ca <uxr_read_session_header+0x7e>
 8010790:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010794:	787b      	ldrb	r3, [r7, #1]
 8010796:	429a      	cmp	r2, r3
 8010798:	d003      	beq.n	80107a2 <uxr_read_session_header+0x56>
 801079a:	2001      	movs	r0, #1
 801079c:	f080 0001 	eor.w	r0, r0, #1
 80107a0:	e7e1      	b.n	8010766 <uxr_read_session_header+0x1a>
 80107a2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80107a6:	78bb      	ldrb	r3, [r7, #2]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	f107 0102 	add.w	r1, r7, #2
 80107ae:	d1f4      	bne.n	801079a <uxr_read_session_header+0x4e>
 80107b0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80107b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d1ee      	bne.n	801079a <uxr_read_session_header+0x4e>
 80107bc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80107c0:	784b      	ldrb	r3, [r1, #1]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d1e9      	bne.n	801079a <uxr_read_session_header+0x4e>
 80107c6:	2000      	movs	r0, #0
 80107c8:	e7e8      	b.n	801079c <uxr_read_session_header+0x50>
 80107ca:	2001      	movs	r0, #1
 80107cc:	e7cb      	b.n	8010766 <uxr_read_session_header+0x1a>
 80107ce:	bf00      	nop

080107d0 <uxr_session_header_offset>:
 80107d0:	f990 3000 	ldrsb.w	r3, [r0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	bfac      	ite	ge
 80107d8:	2008      	movge	r0, #8
 80107da:	2004      	movlt	r0, #4
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop

080107e0 <uxr_init_base_object_request>:
 80107e0:	b510      	push	{r4, lr}
 80107e2:	88c3      	ldrh	r3, [r0, #6]
 80107e4:	b082      	sub	sp, #8
 80107e6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80107ea:	9101      	str	r1, [sp, #4]
 80107ec:	f1a3 010a 	sub.w	r1, r3, #10
 80107f0:	b289      	uxth	r1, r1
 80107f2:	42a1      	cmp	r1, r4
 80107f4:	d80e      	bhi.n	8010814 <uxr_init_base_object_request+0x34>
 80107f6:	3301      	adds	r3, #1
 80107f8:	b29c      	uxth	r4, r3
 80107fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	80c4      	strh	r4, [r0, #6]
 8010802:	9801      	ldr	r0, [sp, #4]
 8010804:	7011      	strb	r1, [r2, #0]
 8010806:	7053      	strb	r3, [r2, #1]
 8010808:	1c91      	adds	r1, r2, #2
 801080a:	f7fe ff77 	bl	800f6fc <uxr_object_id_to_raw>
 801080e:	4620      	mov	r0, r4
 8010810:	b002      	add	sp, #8
 8010812:	bd10      	pop	{r4, pc}
 8010814:	230a      	movs	r3, #10
 8010816:	2100      	movs	r1, #0
 8010818:	461c      	mov	r4, r3
 801081a:	e7f1      	b.n	8010800 <uxr_init_base_object_request+0x20>

0801081c <uxr_parse_base_object_request>:
 801081c:	b570      	push	{r4, r5, r6, lr}
 801081e:	4604      	mov	r4, r0
 8010820:	3002      	adds	r0, #2
 8010822:	460d      	mov	r5, r1
 8010824:	4616      	mov	r6, r2
 8010826:	f7fe ff55 	bl	800f6d4 <uxr_object_id_from_raw>
 801082a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801082e:	8028      	strh	r0, [r5, #0]
 8010830:	806b      	strh	r3, [r5, #2]
 8010832:	7822      	ldrb	r2, [r4, #0]
 8010834:	7863      	ldrb	r3, [r4, #1]
 8010836:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801083a:	8033      	strh	r3, [r6, #0]
 801083c:	bd70      	pop	{r4, r5, r6, pc}
 801083e:	bf00      	nop

08010840 <uxr_stream_id>:
 8010840:	2901      	cmp	r1, #1
 8010842:	b082      	sub	sp, #8
 8010844:	d01d      	beq.n	8010882 <uxr_stream_id+0x42>
 8010846:	2902      	cmp	r1, #2
 8010848:	f04f 0c00 	mov.w	ip, #0
 801084c:	d01e      	beq.n	801088c <uxr_stream_id+0x4c>
 801084e:	2300      	movs	r3, #0
 8010850:	f36c 0307 	bfi	r3, ip, #0, #8
 8010854:	f360 230f 	bfi	r3, r0, #8, #8
 8010858:	f361 4317 	bfi	r3, r1, #16, #8
 801085c:	f362 631f 	bfi	r3, r2, #24, #8
 8010860:	b2da      	uxtb	r2, r3
 8010862:	2000      	movs	r0, #0
 8010864:	f362 0007 	bfi	r0, r2, #0, #8
 8010868:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801086c:	f362 200f 	bfi	r0, r2, #8, #8
 8010870:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010874:	f362 4017 	bfi	r0, r2, #16, #8
 8010878:	0e1b      	lsrs	r3, r3, #24
 801087a:	f363 601f 	bfi	r0, r3, #24, #8
 801087e:	b002      	add	sp, #8
 8010880:	4770      	bx	lr
 8010882:	f100 0c01 	add.w	ip, r0, #1
 8010886:	fa5f fc8c 	uxtb.w	ip, ip
 801088a:	e7e0      	b.n	801084e <uxr_stream_id+0xe>
 801088c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010890:	e7dd      	b.n	801084e <uxr_stream_id+0xe>
 8010892:	bf00      	nop

08010894 <uxr_stream_id_from_raw>:
 8010894:	b082      	sub	sp, #8
 8010896:	b130      	cbz	r0, 80108a6 <uxr_stream_id_from_raw+0x12>
 8010898:	0603      	lsls	r3, r0, #24
 801089a:	d420      	bmi.n	80108de <uxr_stream_id_from_raw+0x4a>
 801089c:	1e42      	subs	r2, r0, #1
 801089e:	b2d2      	uxtb	r2, r2
 80108a0:	f04f 0c01 	mov.w	ip, #1
 80108a4:	e001      	b.n	80108aa <uxr_stream_id_from_raw+0x16>
 80108a6:	4684      	mov	ip, r0
 80108a8:	4602      	mov	r2, r0
 80108aa:	2300      	movs	r3, #0
 80108ac:	f360 0307 	bfi	r3, r0, #0, #8
 80108b0:	f362 230f 	bfi	r3, r2, #8, #8
 80108b4:	f36c 4317 	bfi	r3, ip, #16, #8
 80108b8:	f361 631f 	bfi	r3, r1, #24, #8
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	2000      	movs	r0, #0
 80108c0:	f362 0007 	bfi	r0, r2, #0, #8
 80108c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80108c8:	f362 200f 	bfi	r0, r2, #8, #8
 80108cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80108d0:	f362 4017 	bfi	r0, r2, #16, #8
 80108d4:	0e1b      	lsrs	r3, r3, #24
 80108d6:	f363 601f 	bfi	r0, r3, #24, #8
 80108da:	b002      	add	sp, #8
 80108dc:	4770      	bx	lr
 80108de:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80108e2:	f04f 0c02 	mov.w	ip, #2
 80108e6:	e7e0      	b.n	80108aa <uxr_stream_id_from_raw+0x16>

080108e8 <uxr_init_stream_storage>:
 80108e8:	2300      	movs	r3, #0
 80108ea:	7403      	strb	r3, [r0, #16]
 80108ec:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80108f0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80108f4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop

080108fc <uxr_reset_stream_storage>:
 80108fc:	b570      	push	{r4, r5, r6, lr}
 80108fe:	7c03      	ldrb	r3, [r0, #16]
 8010900:	4604      	mov	r4, r0
 8010902:	b153      	cbz	r3, 801091a <uxr_reset_stream_storage+0x1e>
 8010904:	4606      	mov	r6, r0
 8010906:	2500      	movs	r5, #0
 8010908:	4630      	mov	r0, r6
 801090a:	f006 fd35 	bl	8017378 <uxr_reset_output_best_effort_stream>
 801090e:	7c23      	ldrb	r3, [r4, #16]
 8010910:	3501      	adds	r5, #1
 8010912:	42ab      	cmp	r3, r5
 8010914:	f106 0610 	add.w	r6, r6, #16
 8010918:	d8f6      	bhi.n	8010908 <uxr_reset_stream_storage+0xc>
 801091a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801091e:	b163      	cbz	r3, 801093a <uxr_reset_stream_storage+0x3e>
 8010920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010924:	2500      	movs	r5, #0
 8010926:	4630      	mov	r0, r6
 8010928:	f006 fb28 	bl	8016f7c <uxr_reset_input_best_effort_stream>
 801092c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010930:	3501      	adds	r5, #1
 8010932:	42ab      	cmp	r3, r5
 8010934:	f106 0602 	add.w	r6, r6, #2
 8010938:	d8f5      	bhi.n	8010926 <uxr_reset_stream_storage+0x2a>
 801093a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801093e:	b163      	cbz	r3, 801095a <uxr_reset_stream_storage+0x5e>
 8010940:	f104 0618 	add.w	r6, r4, #24
 8010944:	2500      	movs	r5, #0
 8010946:	4630      	mov	r0, r6
 8010948:	f006 fdc2 	bl	80174d0 <uxr_reset_output_reliable_stream>
 801094c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010950:	3501      	adds	r5, #1
 8010952:	42ab      	cmp	r3, r5
 8010954:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010958:	d8f5      	bhi.n	8010946 <uxr_reset_stream_storage+0x4a>
 801095a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801095e:	b163      	cbz	r3, 801097a <uxr_reset_stream_storage+0x7e>
 8010960:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010964:	2500      	movs	r5, #0
 8010966:	4630      	mov	r0, r6
 8010968:	f006 fb7c 	bl	8017064 <uxr_reset_input_reliable_stream>
 801096c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010970:	3501      	adds	r5, #1
 8010972:	42ab      	cmp	r3, r5
 8010974:	f106 0618 	add.w	r6, r6, #24
 8010978:	d8f5      	bhi.n	8010966 <uxr_reset_stream_storage+0x6a>
 801097a:	bd70      	pop	{r4, r5, r6, pc}

0801097c <uxr_add_output_best_effort_buffer>:
 801097c:	b510      	push	{r4, lr}
 801097e:	7c04      	ldrb	r4, [r0, #16]
 8010980:	f104 0c01 	add.w	ip, r4, #1
 8010984:	b082      	sub	sp, #8
 8010986:	f880 c010 	strb.w	ip, [r0, #16]
 801098a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801098e:	f006 fce9 	bl	8017364 <uxr_init_output_best_effort_stream>
 8010992:	2201      	movs	r2, #1
 8010994:	4611      	mov	r1, r2
 8010996:	4620      	mov	r0, r4
 8010998:	b002      	add	sp, #8
 801099a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801099e:	f7ff bf4f 	b.w	8010840 <uxr_stream_id>
 80109a2:	bf00      	nop

080109a4 <uxr_add_output_reliable_buffer>:
 80109a4:	b510      	push	{r4, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	4684      	mov	ip, r0
 80109aa:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80109ae:	9000      	str	r0, [sp, #0]
 80109b0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80109b4:	2028      	movs	r0, #40	@ 0x28
 80109b6:	fb00 c004 	mla	r0, r0, r4, ip
 80109ba:	f104 0e01 	add.w	lr, r4, #1
 80109be:	3018      	adds	r0, #24
 80109c0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80109c4:	f006 fd4c 	bl	8017460 <uxr_init_output_reliable_stream>
 80109c8:	2201      	movs	r2, #1
 80109ca:	2102      	movs	r1, #2
 80109cc:	4620      	mov	r0, r4
 80109ce:	b004      	add	sp, #16
 80109d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109d4:	f7ff bf34 	b.w	8010840 <uxr_stream_id>

080109d8 <uxr_add_input_best_effort_buffer>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80109de:	4603      	mov	r3, r0
 80109e0:	1c62      	adds	r2, r4, #1
 80109e2:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80109e6:	b082      	sub	sp, #8
 80109e8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80109ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80109f0:	f006 fac0 	bl	8016f74 <uxr_init_input_best_effort_stream>
 80109f4:	2200      	movs	r2, #0
 80109f6:	2101      	movs	r1, #1
 80109f8:	4620      	mov	r0, r4
 80109fa:	b002      	add	sp, #8
 80109fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a00:	f7ff bf1e 	b.w	8010840 <uxr_stream_id>

08010a04 <uxr_add_input_reliable_buffer>:
 8010a04:	b510      	push	{r4, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	4684      	mov	ip, r0
 8010a0a:	9806      	ldr	r0, [sp, #24]
 8010a0c:	9000      	str	r0, [sp, #0]
 8010a0e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010a12:	2018      	movs	r0, #24
 8010a14:	fb00 c004 	mla	r0, r0, r4, ip
 8010a18:	f104 0e01 	add.w	lr, r4, #1
 8010a1c:	3048      	adds	r0, #72	@ 0x48
 8010a1e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010a22:	f006 faf3 	bl	801700c <uxr_init_input_reliable_stream>
 8010a26:	2200      	movs	r2, #0
 8010a28:	2102      	movs	r1, #2
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	b004      	add	sp, #16
 8010a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a32:	f7ff bf05 	b.w	8010840 <uxr_stream_id>
 8010a36:	bf00      	nop

08010a38 <uxr_get_output_best_effort_stream>:
 8010a38:	7c03      	ldrb	r3, [r0, #16]
 8010a3a:	428b      	cmp	r3, r1
 8010a3c:	bf8c      	ite	hi
 8010a3e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010a42:	2000      	movls	r0, #0
 8010a44:	4770      	bx	lr
 8010a46:	bf00      	nop

08010a48 <uxr_get_output_reliable_stream>:
 8010a48:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010a4c:	428b      	cmp	r3, r1
 8010a4e:	bf83      	ittte	hi
 8010a50:	2328      	movhi	r3, #40	@ 0x28
 8010a52:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010a56:	3018      	addhi	r0, #24
 8010a58:	2000      	movls	r0, #0
 8010a5a:	4770      	bx	lr

08010a5c <uxr_get_input_best_effort_stream>:
 8010a5c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010a60:	428b      	cmp	r3, r1
 8010a62:	bf86      	itte	hi
 8010a64:	3121      	addhi	r1, #33	@ 0x21
 8010a66:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010a6a:	2000      	movls	r0, #0
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop

08010a70 <uxr_get_input_reliable_stream>:
 8010a70:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010a74:	428b      	cmp	r3, r1
 8010a76:	bf83      	ittte	hi
 8010a78:	2318      	movhi	r3, #24
 8010a7a:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010a7e:	3048      	addhi	r0, #72	@ 0x48
 8010a80:	2000      	movls	r0, #0
 8010a82:	4770      	bx	lr

08010a84 <uxr_output_streams_confirmed>:
 8010a84:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010a88:	b183      	cbz	r3, 8010aac <uxr_output_streams_confirmed+0x28>
 8010a8a:	b570      	push	{r4, r5, r6, lr}
 8010a8c:	4606      	mov	r6, r0
 8010a8e:	f100 0518 	add.w	r5, r0, #24
 8010a92:	2400      	movs	r4, #0
 8010a94:	e001      	b.n	8010a9a <uxr_output_streams_confirmed+0x16>
 8010a96:	3528      	adds	r5, #40	@ 0x28
 8010a98:	b138      	cbz	r0, 8010aaa <uxr_output_streams_confirmed+0x26>
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f006 ff88 	bl	80179b0 <uxr_is_output_up_to_date>
 8010aa0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010aa4:	3401      	adds	r4, #1
 8010aa6:	42a3      	cmp	r3, r4
 8010aa8:	d8f5      	bhi.n	8010a96 <uxr_output_streams_confirmed+0x12>
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}
 8010aac:	2001      	movs	r0, #1
 8010aae:	4770      	bx	lr

08010ab0 <uxr_buffer_submessage_header>:
 8010ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	460e      	mov	r6, r1
 8010ab6:	2104      	movs	r1, #4
 8010ab8:	4615      	mov	r5, r2
 8010aba:	461f      	mov	r7, r3
 8010abc:	f7fe fb12 	bl	800f0e4 <ucdr_align_to>
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	ea47 0203 	orr.w	r2, r7, r3
 8010ac6:	4631      	mov	r1, r6
 8010ac8:	7523      	strb	r3, [r4, #20]
 8010aca:	4620      	mov	r0, r4
 8010acc:	462b      	mov	r3, r5
 8010ace:	f000 fa27 	bl	8010f20 <uxr_serialize_submessage_header>
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f7fe fb1c 	bl	800f110 <ucdr_buffer_remaining>
 8010ad8:	42a8      	cmp	r0, r5
 8010ada:	bf34      	ite	cc
 8010adc:	2000      	movcc	r0, #0
 8010ade:	2001      	movcs	r0, #1
 8010ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae2:	bf00      	nop

08010ae4 <uxr_read_submessage_header>:
 8010ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae8:	4604      	mov	r4, r0
 8010aea:	460d      	mov	r5, r1
 8010aec:	2104      	movs	r1, #4
 8010aee:	4616      	mov	r6, r2
 8010af0:	4698      	mov	r8, r3
 8010af2:	f7fe faf7 	bl	800f0e4 <ucdr_align_to>
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7fe fb0a 	bl	800f110 <ucdr_buffer_remaining>
 8010afc:	2803      	cmp	r0, #3
 8010afe:	bf8c      	ite	hi
 8010b00:	2701      	movhi	r7, #1
 8010b02:	2700      	movls	r7, #0
 8010b04:	d802      	bhi.n	8010b0c <uxr_read_submessage_header+0x28>
 8010b06:	4638      	mov	r0, r7
 8010b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0c:	4633      	mov	r3, r6
 8010b0e:	4642      	mov	r2, r8
 8010b10:	4620      	mov	r0, r4
 8010b12:	4629      	mov	r1, r5
 8010b14:	f000 fa18 	bl	8010f48 <uxr_deserialize_submessage_header>
 8010b18:	f898 3000 	ldrb.w	r3, [r8]
 8010b1c:	f003 0201 	and.w	r2, r3, #1
 8010b20:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010b24:	f888 3000 	strb.w	r3, [r8]
 8010b28:	7522      	strb	r2, [r4, #20]
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b30 <uxr_submessage_padding>:
 8010b30:	f010 0003 	ands.w	r0, r0, #3
 8010b34:	bf18      	it	ne
 8010b36:	f1c0 0004 	rsbne	r0, r0, #4
 8010b3a:	4770      	bx	lr

08010b3c <uxr_millis>:
 8010b3c:	b510      	push	{r4, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	4669      	mov	r1, sp
 8010b42:	2001      	movs	r0, #1
 8010b44:	f7f1 fb64 	bl	8002210 <clock_gettime>
 8010b48:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010b4c:	4906      	ldr	r1, [pc, #24]	@ (8010b68 <uxr_millis+0x2c>)
 8010b4e:	fba0 0301 	umull	r0, r3, r0, r1
 8010b52:	1900      	adds	r0, r0, r4
 8010b54:	fb01 3102 	mla	r1, r1, r2, r3
 8010b58:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010b5c:	4a03      	ldr	r2, [pc, #12]	@ (8010b6c <uxr_millis+0x30>)
 8010b5e:	2300      	movs	r3, #0
 8010b60:	f7f0 f85c 	bl	8000c1c <__aeabi_ldivmod>
 8010b64:	b004      	add	sp, #16
 8010b66:	bd10      	pop	{r4, pc}
 8010b68:	3b9aca00 	.word	0x3b9aca00
 8010b6c:	000f4240 	.word	0x000f4240

08010b70 <uxr_nanos>:
 8010b70:	b510      	push	{r4, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	4669      	mov	r1, sp
 8010b76:	2001      	movs	r0, #1
 8010b78:	f7f1 fb4a 	bl	8002210 <clock_gettime>
 8010b7c:	4a06      	ldr	r2, [pc, #24]	@ (8010b98 <uxr_nanos+0x28>)
 8010b7e:	9800      	ldr	r0, [sp, #0]
 8010b80:	9902      	ldr	r1, [sp, #8]
 8010b82:	9c01      	ldr	r4, [sp, #4]
 8010b84:	fba0 0302 	umull	r0, r3, r0, r2
 8010b88:	1840      	adds	r0, r0, r1
 8010b8a:	fb02 3304 	mla	r3, r2, r4, r3
 8010b8e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010b92:	b004      	add	sp, #16
 8010b94:	bd10      	pop	{r4, pc}
 8010b96:	bf00      	nop
 8010b98:	3b9aca00 	.word	0x3b9aca00

08010b9c <on_full_output_buffer_fragmented>:
 8010b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	b08a      	sub	sp, #40	@ 0x28
 8010ba4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010ba8:	4606      	mov	r6, r0
 8010baa:	f104 0008 	add.w	r0, r4, #8
 8010bae:	f7ff ff4b 	bl	8010a48 <uxr_get_output_reliable_stream>
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	f006 ff06 	bl	80179c4 <get_available_free_slots>
 8010bb8:	b968      	cbnz	r0, 8010bd6 <on_full_output_buffer_fragmented+0x3a>
 8010bba:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	4798      	blx	r3
 8010bc2:	b918      	cbnz	r0, 8010bcc <on_full_output_buffer_fragmented+0x30>
 8010bc4:	2001      	movs	r0, #1
 8010bc6:	b00a      	add	sp, #40	@ 0x28
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bcc:	4628      	mov	r0, r5
 8010bce:	f006 fef9 	bl	80179c4 <get_available_free_slots>
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	d0f6      	beq.n	8010bc4 <on_full_output_buffer_fragmented+0x28>
 8010bd6:	8929      	ldrh	r1, [r5, #8]
 8010bd8:	89eb      	ldrh	r3, [r5, #14]
 8010bda:	7b28      	ldrb	r0, [r5, #12]
 8010bdc:	686a      	ldr	r2, [r5, #4]
 8010bde:	fbb2 f8f1 	udiv	r8, r2, r1
 8010be2:	fbb3 f2f1 	udiv	r2, r3, r1
 8010be6:	fb01 3112 	mls	r1, r1, r2, r3
 8010bea:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010bee:	b289      	uxth	r1, r1
 8010bf0:	fb08 f101 	mul.w	r1, r8, r1
 8010bf4:	30fc      	adds	r0, #252	@ 0xfc
 8010bf6:	f1a8 0804 	sub.w	r8, r8, #4
 8010bfa:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010bfe:	4440      	add	r0, r8
 8010c00:	b287      	uxth	r7, r0
 8010c02:	1bdb      	subs	r3, r3, r7
 8010c04:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010c08:	682b      	ldr	r3, [r5, #0]
 8010c0a:	3104      	adds	r1, #4
 8010c0c:	4419      	add	r1, r3
 8010c0e:	4642      	mov	r2, r8
 8010c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c14:	9300      	str	r3, [sp, #0]
 8010c16:	a802      	add	r0, sp, #8
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f7fe fa37 	bl	800f08c <ucdr_init_buffer_origin_offset>
 8010c1e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010c22:	f102 0308 	add.w	r3, r2, #8
 8010c26:	4543      	cmp	r3, r8
 8010c28:	d928      	bls.n	8010c7c <on_full_output_buffer_fragmented+0xe0>
 8010c2a:	463a      	mov	r2, r7
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	210d      	movs	r1, #13
 8010c30:	a802      	add	r0, sp, #8
 8010c32:	f7ff ff3d 	bl	8010ab0 <uxr_buffer_submessage_header>
 8010c36:	8929      	ldrh	r1, [r5, #8]
 8010c38:	89eb      	ldrh	r3, [r5, #14]
 8010c3a:	fbb3 f2f1 	udiv	r2, r3, r1
 8010c3e:	fb01 3312 	mls	r3, r1, r2, r3
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	686a      	ldr	r2, [r5, #4]
 8010c46:	fbb2 f2f1 	udiv	r2, r2, r1
 8010c4a:	fb02 f303 	mul.w	r3, r2, r3
 8010c4e:	682a      	ldr	r2, [r5, #0]
 8010c50:	f842 8003 	str.w	r8, [r2, r3]
 8010c54:	89e8      	ldrh	r0, [r5, #14]
 8010c56:	2101      	movs	r1, #1
 8010c58:	f007 f804 	bl	8017c64 <uxr_seq_num_add>
 8010c5c:	9904      	ldr	r1, [sp, #16]
 8010c5e:	9a03      	ldr	r2, [sp, #12]
 8010c60:	81e8      	strh	r0, [r5, #14]
 8010c62:	1a52      	subs	r2, r2, r1
 8010c64:	4630      	mov	r0, r6
 8010c66:	f7fe fa23 	bl	800f0b0 <ucdr_init_buffer>
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	490f      	ldr	r1, [pc, #60]	@ (8010cac <on_full_output_buffer_fragmented+0x110>)
 8010c6e:	4622      	mov	r2, r4
 8010c70:	f7fe f9f2 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8010c74:	2000      	movs	r0, #0
 8010c76:	b00a      	add	sp, #40	@ 0x28
 8010c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c7c:	b292      	uxth	r2, r2
 8010c7e:	2302      	movs	r3, #2
 8010c80:	210d      	movs	r1, #13
 8010c82:	a802      	add	r0, sp, #8
 8010c84:	f7ff ff14 	bl	8010ab0 <uxr_buffer_submessage_header>
 8010c88:	8928      	ldrh	r0, [r5, #8]
 8010c8a:	89eb      	ldrh	r3, [r5, #14]
 8010c8c:	fbb3 f1f0 	udiv	r1, r3, r0
 8010c90:	fb00 3311 	mls	r3, r0, r1, r3
 8010c94:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010c98:	6869      	ldr	r1, [r5, #4]
 8010c9a:	fbb1 f1f0 	udiv	r1, r1, r0
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	fb01 f303 	mul.w	r3, r1, r3
 8010ca4:	6829      	ldr	r1, [r5, #0]
 8010ca6:	3208      	adds	r2, #8
 8010ca8:	50ca      	str	r2, [r1, r3]
 8010caa:	e7d3      	b.n	8010c54 <on_full_output_buffer_fragmented+0xb8>
 8010cac:	08010b9d 	.word	0x08010b9d

08010cb0 <uxr_prepare_output_stream>:
 8010cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cb2:	b087      	sub	sp, #28
 8010cb4:	2707      	movs	r7, #7
 8010cb6:	9202      	str	r2, [sp, #8]
 8010cb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010cba:	9103      	str	r1, [sp, #12]
 8010cbc:	2500      	movs	r5, #0
 8010cbe:	3204      	adds	r2, #4
 8010cc0:	e9cd 7500 	strd	r7, r5, [sp]
 8010cc4:	461c      	mov	r4, r3
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	f7ff fc54 	bl	8010574 <uxr_prepare_stream_to_write_submessage>
 8010ccc:	f080 0201 	eor.w	r2, r0, #1
 8010cd0:	b2d2      	uxtb	r2, r2
 8010cd2:	75a2      	strb	r2, [r4, #22]
 8010cd4:	b112      	cbz	r2, 8010cdc <uxr_prepare_output_stream+0x2c>
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	b007      	add	sp, #28
 8010cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cdc:	aa05      	add	r2, sp, #20
 8010cde:	9902      	ldr	r1, [sp, #8]
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f7ff fd7d 	bl	80107e0 <uxr_init_base_object_request>
 8010ce6:	a905      	add	r1, sp, #20
 8010ce8:	4605      	mov	r5, r0
 8010cea:	4620      	mov	r0, r4
 8010cec:	f001 f8c0 	bl	8011e70 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010cf0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010cf4:	69a6      	ldr	r6, [r4, #24]
 8010cf6:	69e7      	ldr	r7, [r4, #28]
 8010cf8:	1a52      	subs	r2, r2, r1
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f7fe f9d8 	bl	800f0b0 <ucdr_init_buffer>
 8010d00:	4620      	mov	r0, r4
 8010d02:	463a      	mov	r2, r7
 8010d04:	4631      	mov	r1, r6
 8010d06:	f7fe f9a7 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	b007      	add	sp, #28
 8010d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d10 <uxr_prepare_output_stream_fragmented>:
 8010d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d14:	b091      	sub	sp, #68	@ 0x44
 8010d16:	4605      	mov	r5, r0
 8010d18:	9105      	str	r1, [sp, #20]
 8010d1a:	3008      	adds	r0, #8
 8010d1c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010d20:	461e      	mov	r6, r3
 8010d22:	9204      	str	r2, [sp, #16]
 8010d24:	f7ff fe90 	bl	8010a48 <uxr_get_output_reliable_stream>
 8010d28:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	f000 8091 	beq.w	8010e54 <uxr_prepare_output_stream_fragmented+0x144>
 8010d32:	4604      	mov	r4, r0
 8010d34:	2800      	cmp	r0, #0
 8010d36:	f000 808d 	beq.w	8010e54 <uxr_prepare_output_stream_fragmented+0x144>
 8010d3a:	f006 fe43 	bl	80179c4 <get_available_free_slots>
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	f000 8083 	beq.w	8010e4a <uxr_prepare_output_stream_fragmented+0x13a>
 8010d44:	8922      	ldrh	r2, [r4, #8]
 8010d46:	89e7      	ldrh	r7, [r4, #14]
 8010d48:	fbb7 f9f2 	udiv	r9, r7, r2
 8010d4c:	fb02 7919 	mls	r9, r2, r9, r7
 8010d50:	fa1f f989 	uxth.w	r9, r9
 8010d54:	6863      	ldr	r3, [r4, #4]
 8010d56:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	9203      	str	r2, [sp, #12]
 8010d5e:	fb02 f909 	mul.w	r9, r2, r9
 8010d62:	f109 0904 	add.w	r9, r9, #4
 8010d66:	4499      	add	r9, r3
 8010d68:	7b23      	ldrb	r3, [r4, #12]
 8010d6a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010d6e:	4543      	cmp	r3, r8
 8010d70:	f1a2 0b04 	sub.w	fp, r2, #4
 8010d74:	d37a      	bcc.n	8010e6c <uxr_prepare_output_stream_fragmented+0x15c>
 8010d76:	f1ab 0a04 	sub.w	sl, fp, #4
 8010d7a:	ebaa 0a03 	sub.w	sl, sl, r3
 8010d7e:	465a      	mov	r2, fp
 8010d80:	2300      	movs	r3, #0
 8010d82:	4649      	mov	r1, r9
 8010d84:	a808      	add	r0, sp, #32
 8010d86:	f8cd 8000 	str.w	r8, [sp]
 8010d8a:	f7fe f97f 	bl	800f08c <ucdr_init_buffer_origin_offset>
 8010d8e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010d90:	fa1f fa8a 	uxth.w	sl, sl
 8010d94:	4652      	mov	r2, sl
 8010d96:	f103 0a08 	add.w	sl, r3, #8
 8010d9a:	45da      	cmp	sl, fp
 8010d9c:	bf34      	ite	cc
 8010d9e:	2302      	movcc	r3, #2
 8010da0:	2300      	movcs	r3, #0
 8010da2:	210d      	movs	r1, #13
 8010da4:	a808      	add	r0, sp, #32
 8010da6:	f7ff fe83 	bl	8010ab0 <uxr_buffer_submessage_header>
 8010daa:	8921      	ldrh	r1, [r4, #8]
 8010dac:	fbb7 f2f1 	udiv	r2, r7, r1
 8010db0:	fb01 7212 	mls	r2, r1, r2, r7
 8010db4:	b292      	uxth	r2, r2
 8010db6:	6863      	ldr	r3, [r4, #4]
 8010db8:	fbb3 f3f1 	udiv	r3, r3, r1
 8010dbc:	fb02 f303 	mul.w	r3, r2, r3
 8010dc0:	6822      	ldr	r2, [r4, #0]
 8010dc2:	4638      	mov	r0, r7
 8010dc4:	f842 b003 	str.w	fp, [r2, r3]
 8010dc8:	2101      	movs	r1, #1
 8010dca:	f006 ff4b 	bl	8017c64 <uxr_seq_num_add>
 8010dce:	9b03      	ldr	r3, [sp, #12]
 8010dd0:	f108 0104 	add.w	r1, r8, #4
 8010dd4:	f1a3 0208 	sub.w	r2, r3, #8
 8010dd8:	eba2 0208 	sub.w	r2, r2, r8
 8010ddc:	4449      	add	r1, r9
 8010dde:	4607      	mov	r7, r0
 8010de0:	4630      	mov	r0, r6
 8010de2:	f7fe f965 	bl	800f0b0 <ucdr_init_buffer>
 8010de6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010de8:	81e7      	strh	r7, [r4, #14]
 8010dea:	1d1a      	adds	r2, r3, #4
 8010dec:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010df0:	bf28      	it	cs
 8010df2:	2200      	movcs	r2, #0
 8010df4:	2300      	movs	r3, #0
 8010df6:	b292      	uxth	r2, r2
 8010df8:	2107      	movs	r1, #7
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f7ff fe58 	bl	8010ab0 <uxr_buffer_submessage_header>
 8010e00:	9904      	ldr	r1, [sp, #16]
 8010e02:	aa07      	add	r2, sp, #28
 8010e04:	4628      	mov	r0, r5
 8010e06:	f7ff fceb 	bl	80107e0 <uxr_init_base_object_request>
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	b318      	cbz	r0, 8010e56 <uxr_prepare_output_stream_fragmented+0x146>
 8010e0e:	a907      	add	r1, sp, #28
 8010e10:	4630      	mov	r0, r6
 8010e12:	f001 f82d 	bl	8011e70 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010e16:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	1a52      	subs	r2, r2, r1
 8010e1e:	f7fe f947 	bl	800f0b0 <ucdr_init_buffer>
 8010e22:	9b05      	ldr	r3, [sp, #20]
 8010e24:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010e28:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010e2a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010e2e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010e30:	491b      	ldr	r1, [pc, #108]	@ (8010ea0 <uxr_prepare_output_stream_fragmented+0x190>)
 8010e32:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010e36:	4630      	mov	r0, r6
 8010e38:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010e3c:	462a      	mov	r2, r5
 8010e3e:	f7fe f90b 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8010e42:	4620      	mov	r0, r4
 8010e44:	b011      	add	sp, #68	@ 0x44
 8010e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e4a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010e4c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010e4e:	4628      	mov	r0, r5
 8010e50:	4798      	blx	r3
 8010e52:	b920      	cbnz	r0, 8010e5e <uxr_prepare_output_stream_fragmented+0x14e>
 8010e54:	2400      	movs	r4, #0
 8010e56:	4620      	mov	r0, r4
 8010e58:	b011      	add	sp, #68	@ 0x44
 8010e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f006 fdb0 	bl	80179c4 <get_available_free_slots>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	f47f af6d 	bne.w	8010d44 <uxr_prepare_output_stream_fragmented+0x34>
 8010e6a:	e7f3      	b.n	8010e54 <uxr_prepare_output_stream_fragmented+0x144>
 8010e6c:	4638      	mov	r0, r7
 8010e6e:	2101      	movs	r1, #1
 8010e70:	f006 fef8 	bl	8017c64 <uxr_seq_num_add>
 8010e74:	8921      	ldrh	r1, [r4, #8]
 8010e76:	fbb0 f2f1 	udiv	r2, r0, r1
 8010e7a:	fb01 0912 	mls	r9, r1, r2, r0
 8010e7e:	fa1f f289 	uxth.w	r2, r9
 8010e82:	6863      	ldr	r3, [r4, #4]
 8010e84:	fbb3 f9f1 	udiv	r9, r3, r1
 8010e88:	6823      	ldr	r3, [r4, #0]
 8010e8a:	fb02 f909 	mul.w	r9, r2, r9
 8010e8e:	f109 0904 	add.w	r9, r9, #4
 8010e92:	4499      	add	r9, r3
 8010e94:	4607      	mov	r7, r0
 8010e96:	7b23      	ldrb	r3, [r4, #12]
 8010e98:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010e9c:	e76b      	b.n	8010d76 <uxr_prepare_output_stream_fragmented+0x66>
 8010e9e:	bf00      	nop
 8010ea0:	08010b9d 	.word	0x08010b9d

08010ea4 <uxr_serialize_message_header>:
 8010ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	4616      	mov	r6, r2
 8010eaa:	4604      	mov	r4, r0
 8010eac:	9301      	str	r3, [sp, #4]
 8010eae:	460d      	mov	r5, r1
 8010eb0:	9f08      	ldr	r7, [sp, #32]
 8010eb2:	f7fc fceb 	bl	800d88c <ucdr_serialize_uint8_t>
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f7fc fce7 	bl	800d88c <ucdr_serialize_uint8_t>
 8010ebe:	9a01      	ldr	r2, [sp, #4]
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f7fc fd8e 	bl	800d9e4 <ucdr_serialize_endian_uint16_t>
 8010ec8:	062b      	lsls	r3, r5, #24
 8010eca:	d501      	bpl.n	8010ed0 <uxr_serialize_message_header+0x2c>
 8010ecc:	b003      	add	sp, #12
 8010ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ed0:	2204      	movs	r2, #4
 8010ed2:	4639      	mov	r1, r7
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	b003      	add	sp, #12
 8010ed8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010edc:	f7fc b9e0 	b.w	800d2a0 <ucdr_serialize_array_uint8_t>

08010ee0 <uxr_deserialize_message_header>:
 8010ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	4616      	mov	r6, r2
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	9301      	str	r3, [sp, #4]
 8010eea:	460d      	mov	r5, r1
 8010eec:	9f08      	ldr	r7, [sp, #32]
 8010eee:	f7fc fce3 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8010ef2:	4631      	mov	r1, r6
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f7fc fcdf 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8010efa:	9a01      	ldr	r2, [sp, #4]
 8010efc:	2101      	movs	r1, #1
 8010efe:	4620      	mov	r0, r4
 8010f00:	f7fc fe64 	bl	800dbcc <ucdr_deserialize_endian_uint16_t>
 8010f04:	f995 3000 	ldrsb.w	r3, [r5]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	da01      	bge.n	8010f10 <uxr_deserialize_message_header+0x30>
 8010f0c:	b003      	add	sp, #12
 8010f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f10:	2204      	movs	r2, #4
 8010f12:	4639      	mov	r1, r7
 8010f14:	4620      	mov	r0, r4
 8010f16:	b003      	add	sp, #12
 8010f18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f1c:	f7fc ba24 	b.w	800d368 <ucdr_deserialize_array_uint8_t>

08010f20 <uxr_serialize_submessage_header>:
 8010f20:	b530      	push	{r4, r5, lr}
 8010f22:	b083      	sub	sp, #12
 8010f24:	4615      	mov	r5, r2
 8010f26:	4604      	mov	r4, r0
 8010f28:	9301      	str	r3, [sp, #4]
 8010f2a:	f7fc fcaf 	bl	800d88c <ucdr_serialize_uint8_t>
 8010f2e:	4629      	mov	r1, r5
 8010f30:	4620      	mov	r0, r4
 8010f32:	f7fc fcab 	bl	800d88c <ucdr_serialize_uint8_t>
 8010f36:	9a01      	ldr	r2, [sp, #4]
 8010f38:	2101      	movs	r1, #1
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	b003      	add	sp, #12
 8010f3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f42:	f7fc bd4f 	b.w	800d9e4 <ucdr_serialize_endian_uint16_t>
 8010f46:	bf00      	nop

08010f48 <uxr_deserialize_submessage_header>:
 8010f48:	b530      	push	{r4, r5, lr}
 8010f4a:	b083      	sub	sp, #12
 8010f4c:	4615      	mov	r5, r2
 8010f4e:	4604      	mov	r4, r0
 8010f50:	9301      	str	r3, [sp, #4]
 8010f52:	f7fc fcb1 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8010f56:	4629      	mov	r1, r5
 8010f58:	4620      	mov	r0, r4
 8010f5a:	f7fc fcad 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8010f5e:	9a01      	ldr	r2, [sp, #4]
 8010f60:	2101      	movs	r1, #1
 8010f62:	4620      	mov	r0, r4
 8010f64:	b003      	add	sp, #12
 8010f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f6a:	f7fc be2f 	b.w	800dbcc <ucdr_deserialize_endian_uint16_t>
 8010f6e:	bf00      	nop

08010f70 <uxr_serialize_CLIENT_Representation>:
 8010f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f74:	2204      	movs	r2, #4
 8010f76:	460e      	mov	r6, r1
 8010f78:	4605      	mov	r5, r0
 8010f7a:	f7fc f991 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8010f7e:	2202      	movs	r2, #2
 8010f80:	4607      	mov	r7, r0
 8010f82:	1d31      	adds	r1, r6, #4
 8010f84:	4628      	mov	r0, r5
 8010f86:	f7fc f98b 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8010f8a:	4038      	ands	r0, r7
 8010f8c:	2202      	movs	r2, #2
 8010f8e:	1db1      	adds	r1, r6, #6
 8010f90:	b2c7      	uxtb	r7, r0
 8010f92:	4628      	mov	r0, r5
 8010f94:	f7fc f984 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8010f98:	2204      	movs	r2, #4
 8010f9a:	4007      	ands	r7, r0
 8010f9c:	f106 0108 	add.w	r1, r6, #8
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	f7fc f97d 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8010fa6:	7b31      	ldrb	r1, [r6, #12]
 8010fa8:	4007      	ands	r7, r0
 8010faa:	4628      	mov	r0, r5
 8010fac:	f7fc fc6e 	bl	800d88c <ucdr_serialize_uint8_t>
 8010fb0:	7b71      	ldrb	r1, [r6, #13]
 8010fb2:	4007      	ands	r7, r0
 8010fb4:	4628      	mov	r0, r5
 8010fb6:	f7fc fc3b 	bl	800d830 <ucdr_serialize_bool>
 8010fba:	7b73      	ldrb	r3, [r6, #13]
 8010fbc:	ea07 0800 	and.w	r8, r7, r0
 8010fc0:	b93b      	cbnz	r3, 8010fd2 <uxr_serialize_CLIENT_Representation+0x62>
 8010fc2:	8bb1      	ldrh	r1, [r6, #28]
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	f7fc fc8d 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8010fca:	ea08 0000 	and.w	r0, r8, r0
 8010fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fd2:	6931      	ldr	r1, [r6, #16]
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	f7fc fe6f 	bl	800dcb8 <ucdr_serialize_uint32_t>
 8010fda:	6933      	ldr	r3, [r6, #16]
 8010fdc:	b1e3      	cbz	r3, 8011018 <uxr_serialize_CLIENT_Representation+0xa8>
 8010fde:	b1c0      	cbz	r0, 8011012 <uxr_serialize_CLIENT_Representation+0xa2>
 8010fe0:	4637      	mov	r7, r6
 8010fe2:	f04f 0900 	mov.w	r9, #0
 8010fe6:	e001      	b.n	8010fec <uxr_serialize_CLIENT_Representation+0x7c>
 8010fe8:	3708      	adds	r7, #8
 8010fea:	b194      	cbz	r4, 8011012 <uxr_serialize_CLIENT_Representation+0xa2>
 8010fec:	6979      	ldr	r1, [r7, #20]
 8010fee:	4628      	mov	r0, r5
 8010ff0:	f005 fee6 	bl	8016dc0 <ucdr_serialize_string>
 8010ff4:	69b9      	ldr	r1, [r7, #24]
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	f005 fee1 	bl	8016dc0 <ucdr_serialize_string>
 8010ffe:	6933      	ldr	r3, [r6, #16]
 8011000:	f109 0901 	add.w	r9, r9, #1
 8011004:	4004      	ands	r4, r0
 8011006:	4599      	cmp	r9, r3
 8011008:	b2e4      	uxtb	r4, r4
 801100a:	d3ed      	bcc.n	8010fe8 <uxr_serialize_CLIENT_Representation+0x78>
 801100c:	ea08 0804 	and.w	r8, r8, r4
 8011010:	e7d7      	b.n	8010fc2 <uxr_serialize_CLIENT_Representation+0x52>
 8011012:	f04f 0800 	mov.w	r8, #0
 8011016:	e7d4      	b.n	8010fc2 <uxr_serialize_CLIENT_Representation+0x52>
 8011018:	ea08 0800 	and.w	r8, r8, r0
 801101c:	e7d1      	b.n	8010fc2 <uxr_serialize_CLIENT_Representation+0x52>
 801101e:	bf00      	nop

08011020 <uxr_deserialize_CLIENT_Representation>:
 8011020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011024:	2204      	movs	r2, #4
 8011026:	460c      	mov	r4, r1
 8011028:	4605      	mov	r5, r0
 801102a:	f7fc f99d 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 801102e:	2202      	movs	r2, #2
 8011030:	4607      	mov	r7, r0
 8011032:	1d21      	adds	r1, r4, #4
 8011034:	4628      	mov	r0, r5
 8011036:	f7fc f997 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 801103a:	4038      	ands	r0, r7
 801103c:	2202      	movs	r2, #2
 801103e:	1da1      	adds	r1, r4, #6
 8011040:	b2c6      	uxtb	r6, r0
 8011042:	4628      	mov	r0, r5
 8011044:	f7fc f990 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011048:	2204      	movs	r2, #4
 801104a:	4006      	ands	r6, r0
 801104c:	f104 0108 	add.w	r1, r4, #8
 8011050:	4628      	mov	r0, r5
 8011052:	f7fc f989 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011056:	f104 010c 	add.w	r1, r4, #12
 801105a:	4006      	ands	r6, r0
 801105c:	4628      	mov	r0, r5
 801105e:	f7fc fc2b 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011062:	f104 010d 	add.w	r1, r4, #13
 8011066:	ea06 0700 	and.w	r7, r6, r0
 801106a:	4628      	mov	r0, r5
 801106c:	f7fc fbf6 	bl	800d85c <ucdr_deserialize_bool>
 8011070:	7b63      	ldrb	r3, [r4, #13]
 8011072:	4007      	ands	r7, r0
 8011074:	b93b      	cbnz	r3, 8011086 <uxr_deserialize_CLIENT_Representation+0x66>
 8011076:	f104 011c 	add.w	r1, r4, #28
 801107a:	4628      	mov	r0, r5
 801107c:	f7fc fd32 	bl	800dae4 <ucdr_deserialize_uint16_t>
 8011080:	4038      	ands	r0, r7
 8011082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011086:	f104 0110 	add.w	r1, r4, #16
 801108a:	4628      	mov	r0, r5
 801108c:	f7fc ff44 	bl	800df18 <ucdr_deserialize_uint32_t>
 8011090:	6923      	ldr	r3, [r4, #16]
 8011092:	2b01      	cmp	r3, #1
 8011094:	d903      	bls.n	801109e <uxr_deserialize_CLIENT_Representation+0x7e>
 8011096:	2301      	movs	r3, #1
 8011098:	75ab      	strb	r3, [r5, #22]
 801109a:	2700      	movs	r7, #0
 801109c:	e7eb      	b.n	8011076 <uxr_deserialize_CLIENT_Representation+0x56>
 801109e:	b30b      	cbz	r3, 80110e4 <uxr_deserialize_CLIENT_Representation+0xc4>
 80110a0:	2800      	cmp	r0, #0
 80110a2:	d0fa      	beq.n	801109a <uxr_deserialize_CLIENT_Representation+0x7a>
 80110a4:	46a0      	mov	r8, r4
 80110a6:	f04f 0900 	mov.w	r9, #0
 80110aa:	e001      	b.n	80110b0 <uxr_deserialize_CLIENT_Representation+0x90>
 80110ac:	2e00      	cmp	r6, #0
 80110ae:	d0f4      	beq.n	801109a <uxr_deserialize_CLIENT_Representation+0x7a>
 80110b0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80110b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110b8:	4628      	mov	r0, r5
 80110ba:	f005 fe91 	bl	8016de0 <ucdr_deserialize_string>
 80110be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80110c2:	4606      	mov	r6, r0
 80110c4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80110c8:	4628      	mov	r0, r5
 80110ca:	f005 fe89 	bl	8016de0 <ucdr_deserialize_string>
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	f109 0901 	add.w	r9, r9, #1
 80110d4:	4006      	ands	r6, r0
 80110d6:	4599      	cmp	r9, r3
 80110d8:	f108 0808 	add.w	r8, r8, #8
 80110dc:	b2f6      	uxtb	r6, r6
 80110de:	d3e5      	bcc.n	80110ac <uxr_deserialize_CLIENT_Representation+0x8c>
 80110e0:	4037      	ands	r7, r6
 80110e2:	e7c8      	b.n	8011076 <uxr_deserialize_CLIENT_Representation+0x56>
 80110e4:	4007      	ands	r7, r0
 80110e6:	e7c6      	b.n	8011076 <uxr_deserialize_CLIENT_Representation+0x56>

080110e8 <uxr_serialize_AGENT_Representation>:
 80110e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110ec:	2204      	movs	r2, #4
 80110ee:	460f      	mov	r7, r1
 80110f0:	4605      	mov	r5, r0
 80110f2:	f7fc f8d5 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 80110f6:	2202      	movs	r2, #2
 80110f8:	4604      	mov	r4, r0
 80110fa:	1d39      	adds	r1, r7, #4
 80110fc:	4628      	mov	r0, r5
 80110fe:	f7fc f8cf 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011102:	4020      	ands	r0, r4
 8011104:	2202      	movs	r2, #2
 8011106:	1db9      	adds	r1, r7, #6
 8011108:	b2c4      	uxtb	r4, r0
 801110a:	4628      	mov	r0, r5
 801110c:	f7fc f8c8 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011110:	7a39      	ldrb	r1, [r7, #8]
 8011112:	4004      	ands	r4, r0
 8011114:	4628      	mov	r0, r5
 8011116:	f7fc fb8b 	bl	800d830 <ucdr_serialize_bool>
 801111a:	7a3b      	ldrb	r3, [r7, #8]
 801111c:	ea00 0804 	and.w	r8, r0, r4
 8011120:	b913      	cbnz	r3, 8011128 <uxr_serialize_AGENT_Representation+0x40>
 8011122:	4640      	mov	r0, r8
 8011124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011128:	68f9      	ldr	r1, [r7, #12]
 801112a:	4628      	mov	r0, r5
 801112c:	f7fc fdc4 	bl	800dcb8 <ucdr_serialize_uint32_t>
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	b303      	cbz	r3, 8011176 <uxr_serialize_AGENT_Representation+0x8e>
 8011134:	b1d0      	cbz	r0, 801116c <uxr_serialize_AGENT_Representation+0x84>
 8011136:	463e      	mov	r6, r7
 8011138:	f04f 0900 	mov.w	r9, #0
 801113c:	e001      	b.n	8011142 <uxr_serialize_AGENT_Representation+0x5a>
 801113e:	3608      	adds	r6, #8
 8011140:	b1a4      	cbz	r4, 801116c <uxr_serialize_AGENT_Representation+0x84>
 8011142:	6931      	ldr	r1, [r6, #16]
 8011144:	4628      	mov	r0, r5
 8011146:	f005 fe3b 	bl	8016dc0 <ucdr_serialize_string>
 801114a:	6971      	ldr	r1, [r6, #20]
 801114c:	4604      	mov	r4, r0
 801114e:	4628      	mov	r0, r5
 8011150:	f005 fe36 	bl	8016dc0 <ucdr_serialize_string>
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f109 0901 	add.w	r9, r9, #1
 801115a:	4004      	ands	r4, r0
 801115c:	4599      	cmp	r9, r3
 801115e:	b2e4      	uxtb	r4, r4
 8011160:	d3ed      	bcc.n	801113e <uxr_serialize_AGENT_Representation+0x56>
 8011162:	ea08 0804 	and.w	r8, r8, r4
 8011166:	4640      	mov	r0, r8
 8011168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801116c:	f04f 0800 	mov.w	r8, #0
 8011170:	4640      	mov	r0, r8
 8011172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011176:	ea08 0800 	and.w	r8, r8, r0
 801117a:	e7d2      	b.n	8011122 <uxr_serialize_AGENT_Representation+0x3a>

0801117c <uxr_serialize_DATAWRITER_Representation>:
 801117c:	b570      	push	{r4, r5, r6, lr}
 801117e:	460d      	mov	r5, r1
 8011180:	7809      	ldrb	r1, [r1, #0]
 8011182:	4606      	mov	r6, r0
 8011184:	f7fc fb82 	bl	800d88c <ucdr_serialize_uint8_t>
 8011188:	4604      	mov	r4, r0
 801118a:	b130      	cbz	r0, 801119a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801118c:	782b      	ldrb	r3, [r5, #0]
 801118e:	2b02      	cmp	r3, #2
 8011190:	d00c      	beq.n	80111ac <uxr_serialize_DATAWRITER_Representation+0x30>
 8011192:	2b03      	cmp	r3, #3
 8011194:	d010      	beq.n	80111b8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8011196:	2b01      	cmp	r3, #1
 8011198:	d008      	beq.n	80111ac <uxr_serialize_DATAWRITER_Representation+0x30>
 801119a:	2202      	movs	r2, #2
 801119c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80111a0:	4630      	mov	r0, r6
 80111a2:	f7fc f87d 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 80111a6:	4020      	ands	r0, r4
 80111a8:	b2c0      	uxtb	r0, r0
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	6869      	ldr	r1, [r5, #4]
 80111ae:	4630      	mov	r0, r6
 80111b0:	f005 fe06 	bl	8016dc0 <ucdr_serialize_string>
 80111b4:	4604      	mov	r4, r0
 80111b6:	e7f0      	b.n	801119a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80111b8:	4629      	mov	r1, r5
 80111ba:	4630      	mov	r0, r6
 80111bc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80111c0:	3104      	adds	r1, #4
 80111c2:	f7fe f811 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 80111c6:	4604      	mov	r4, r0
 80111c8:	e7e7      	b.n	801119a <uxr_serialize_DATAWRITER_Representation+0x1e>
 80111ca:	bf00      	nop

080111cc <uxr_serialize_ObjectVariant.part.0>:
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	780b      	ldrb	r3, [r1, #0]
 80111d0:	3b01      	subs	r3, #1
 80111d2:	460c      	mov	r4, r1
 80111d4:	4605      	mov	r5, r0
 80111d6:	2b0d      	cmp	r3, #13
 80111d8:	d854      	bhi.n	8011284 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80111da:	e8df f003 	tbb	[pc, r3]
 80111de:	0730      	.short	0x0730
 80111e0:	07071b1b 	.word	0x07071b1b
 80111e4:	0c530707 	.word	0x0c530707
 80111e8:	494e0c0c 	.word	0x494e0c0c
 80111ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111f0:	3104      	adds	r1, #4
 80111f2:	f7ff bfc3 	b.w	801117c <uxr_serialize_DATAWRITER_Representation>
 80111f6:	7909      	ldrb	r1, [r1, #4]
 80111f8:	f7fc fb48 	bl	800d88c <ucdr_serialize_uint8_t>
 80111fc:	b1e8      	cbz	r0, 801123a <uxr_serialize_ObjectVariant.part.0+0x6e>
 80111fe:	7923      	ldrb	r3, [r4, #4]
 8011200:	2b01      	cmp	r3, #1
 8011202:	d001      	beq.n	8011208 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011204:	2b02      	cmp	r3, #2
 8011206:	d13d      	bne.n	8011284 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011208:	68a1      	ldr	r1, [r4, #8]
 801120a:	4628      	mov	r0, r5
 801120c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011210:	f005 bdd6 	b.w	8016dc0 <ucdr_serialize_string>
 8011214:	7909      	ldrb	r1, [r1, #4]
 8011216:	f7fc fb39 	bl	800d88c <ucdr_serialize_uint8_t>
 801121a:	4606      	mov	r6, r0
 801121c:	b120      	cbz	r0, 8011228 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801121e:	7923      	ldrb	r3, [r4, #4]
 8011220:	2b02      	cmp	r3, #2
 8011222:	d039      	beq.n	8011298 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011224:	2b03      	cmp	r3, #3
 8011226:	d02f      	beq.n	8011288 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011228:	2202      	movs	r2, #2
 801122a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801122e:	4628      	mov	r0, r5
 8011230:	f7fc f836 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011234:	4030      	ands	r0, r6
 8011236:	b2c0      	uxtb	r0, r0
 8011238:	bd70      	pop	{r4, r5, r6, pc}
 801123a:	2000      	movs	r0, #0
 801123c:	bd70      	pop	{r4, r5, r6, pc}
 801123e:	7909      	ldrb	r1, [r1, #4]
 8011240:	f7fc fb24 	bl	800d88c <ucdr_serialize_uint8_t>
 8011244:	4606      	mov	r6, r0
 8011246:	b158      	cbz	r0, 8011260 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011248:	7923      	ldrb	r3, [r4, #4]
 801124a:	2b02      	cmp	r3, #2
 801124c:	d003      	beq.n	8011256 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801124e:	2b03      	cmp	r3, #3
 8011250:	d028      	beq.n	80112a4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8011252:	2b01      	cmp	r3, #1
 8011254:	d104      	bne.n	8011260 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011256:	68a1      	ldr	r1, [r4, #8]
 8011258:	4628      	mov	r0, r5
 801125a:	f005 fdb1 	bl	8016dc0 <ucdr_serialize_string>
 801125e:	4606      	mov	r6, r0
 8011260:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011264:	4628      	mov	r0, r5
 8011266:	f7fd f84d 	bl	800e304 <ucdr_serialize_int16_t>
 801126a:	4030      	ands	r0, r6
 801126c:	b2c0      	uxtb	r0, r0
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011274:	3104      	adds	r1, #4
 8011276:	f7ff be7b 	b.w	8010f70 <uxr_serialize_CLIENT_Representation>
 801127a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801127e:	3104      	adds	r1, #4
 8011280:	f7ff bf32 	b.w	80110e8 <uxr_serialize_AGENT_Representation>
 8011284:	2001      	movs	r0, #1
 8011286:	bd70      	pop	{r4, r5, r6, pc}
 8011288:	68a2      	ldr	r2, [r4, #8]
 801128a:	f104 010c 	add.w	r1, r4, #12
 801128e:	4628      	mov	r0, r5
 8011290:	f7fd ffaa 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 8011294:	4606      	mov	r6, r0
 8011296:	e7c7      	b.n	8011228 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011298:	68a1      	ldr	r1, [r4, #8]
 801129a:	4628      	mov	r0, r5
 801129c:	f005 fd90 	bl	8016dc0 <ucdr_serialize_string>
 80112a0:	4606      	mov	r6, r0
 80112a2:	e7c1      	b.n	8011228 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80112a4:	68a2      	ldr	r2, [r4, #8]
 80112a6:	f104 010c 	add.w	r1, r4, #12
 80112aa:	4628      	mov	r0, r5
 80112ac:	f7fd ff9c 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 80112b0:	4606      	mov	r6, r0
 80112b2:	e7d5      	b.n	8011260 <uxr_serialize_ObjectVariant.part.0+0x94>

080112b4 <uxr_deserialize_DATAWRITER_Representation>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	4606      	mov	r6, r0
 80112b8:	460d      	mov	r5, r1
 80112ba:	f7fc fafd 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 80112be:	4604      	mov	r4, r0
 80112c0:	b130      	cbz	r0, 80112d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80112c2:	782b      	ldrb	r3, [r5, #0]
 80112c4:	2b02      	cmp	r3, #2
 80112c6:	d00c      	beq.n	80112e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80112c8:	2b03      	cmp	r3, #3
 80112ca:	d012      	beq.n	80112f2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d008      	beq.n	80112e2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80112d0:	2202      	movs	r2, #2
 80112d2:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80112d6:	4630      	mov	r0, r6
 80112d8:	f7fc f846 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 80112dc:	4020      	ands	r0, r4
 80112de:	b2c0      	uxtb	r0, r0
 80112e0:	bd70      	pop	{r4, r5, r6, pc}
 80112e2:	6869      	ldr	r1, [r5, #4]
 80112e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112e8:	4630      	mov	r0, r6
 80112ea:	f005 fd79 	bl	8016de0 <ucdr_deserialize_string>
 80112ee:	4604      	mov	r4, r0
 80112f0:	e7ee      	b.n	80112d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80112f2:	1d2b      	adds	r3, r5, #4
 80112f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112f8:	f105 0108 	add.w	r1, r5, #8
 80112fc:	4630      	mov	r0, r6
 80112fe:	f7fd ff85 	bl	800f20c <ucdr_deserialize_sequence_uint8_t>
 8011302:	4604      	mov	r4, r0
 8011304:	e7e4      	b.n	80112d0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011306:	bf00      	nop

08011308 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011308:	b570      	push	{r4, r5, r6, lr}
 801130a:	460d      	mov	r5, r1
 801130c:	7809      	ldrb	r1, [r1, #0]
 801130e:	4606      	mov	r6, r0
 8011310:	f7fc fa8e 	bl	800d830 <ucdr_serialize_bool>
 8011314:	782b      	ldrb	r3, [r5, #0]
 8011316:	4604      	mov	r4, r0
 8011318:	b94b      	cbnz	r3, 801132e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801131a:	7a29      	ldrb	r1, [r5, #8]
 801131c:	4630      	mov	r0, r6
 801131e:	f7fc fa87 	bl	800d830 <ucdr_serialize_bool>
 8011322:	7a2b      	ldrb	r3, [r5, #8]
 8011324:	4004      	ands	r4, r0
 8011326:	b2e4      	uxtb	r4, r4
 8011328:	b943      	cbnz	r3, 801133c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801132a:	4620      	mov	r0, r4
 801132c:	bd70      	pop	{r4, r5, r6, pc}
 801132e:	6869      	ldr	r1, [r5, #4]
 8011330:	4630      	mov	r0, r6
 8011332:	f005 fd45 	bl	8016dc0 <ucdr_serialize_string>
 8011336:	4004      	ands	r4, r0
 8011338:	b2e4      	uxtb	r4, r4
 801133a:	e7ee      	b.n	801131a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801133c:	68e9      	ldr	r1, [r5, #12]
 801133e:	4630      	mov	r0, r6
 8011340:	f005 fd3e 	bl	8016dc0 <ucdr_serialize_string>
 8011344:	4004      	ands	r4, r0
 8011346:	4620      	mov	r0, r4
 8011348:	bd70      	pop	{r4, r5, r6, pc}
 801134a:	bf00      	nop

0801134c <uxr_serialize_OBJK_Topic_Binary>:
 801134c:	b570      	push	{r4, r5, r6, lr}
 801134e:	460d      	mov	r5, r1
 8011350:	6809      	ldr	r1, [r1, #0]
 8011352:	4606      	mov	r6, r0
 8011354:	f005 fd34 	bl	8016dc0 <ucdr_serialize_string>
 8011358:	7929      	ldrb	r1, [r5, #4]
 801135a:	4604      	mov	r4, r0
 801135c:	4630      	mov	r0, r6
 801135e:	f7fc fa67 	bl	800d830 <ucdr_serialize_bool>
 8011362:	792b      	ldrb	r3, [r5, #4]
 8011364:	4004      	ands	r4, r0
 8011366:	b2e4      	uxtb	r4, r4
 8011368:	b943      	cbnz	r3, 801137c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801136a:	7b29      	ldrb	r1, [r5, #12]
 801136c:	4630      	mov	r0, r6
 801136e:	f7fc fa5f 	bl	800d830 <ucdr_serialize_bool>
 8011372:	7b2b      	ldrb	r3, [r5, #12]
 8011374:	4004      	ands	r4, r0
 8011376:	b93b      	cbnz	r3, 8011388 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011378:	4620      	mov	r0, r4
 801137a:	bd70      	pop	{r4, r5, r6, pc}
 801137c:	68a9      	ldr	r1, [r5, #8]
 801137e:	4630      	mov	r0, r6
 8011380:	f005 fd1e 	bl	8016dc0 <ucdr_serialize_string>
 8011384:	4004      	ands	r4, r0
 8011386:	e7f0      	b.n	801136a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011388:	6929      	ldr	r1, [r5, #16]
 801138a:	4630      	mov	r0, r6
 801138c:	f005 fd18 	bl	8016dc0 <ucdr_serialize_string>
 8011390:	4004      	ands	r4, r0
 8011392:	b2e4      	uxtb	r4, r4
 8011394:	4620      	mov	r0, r4
 8011396:	bd70      	pop	{r4, r5, r6, pc}

08011398 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801139c:	460c      	mov	r4, r1
 801139e:	7809      	ldrb	r1, [r1, #0]
 80113a0:	4606      	mov	r6, r0
 80113a2:	f7fc fa45 	bl	800d830 <ucdr_serialize_bool>
 80113a6:	7823      	ldrb	r3, [r4, #0]
 80113a8:	4605      	mov	r5, r0
 80113aa:	b96b      	cbnz	r3, 80113c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80113ac:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80113b0:	4630      	mov	r0, r6
 80113b2:	f7fc fa3d 	bl	800d830 <ucdr_serialize_bool>
 80113b6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80113ba:	4005      	ands	r5, r0
 80113bc:	b2ed      	uxtb	r5, r5
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d169      	bne.n	8011496 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80113c2:	4628      	mov	r0, r5
 80113c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c8:	6861      	ldr	r1, [r4, #4]
 80113ca:	4630      	mov	r0, r6
 80113cc:	f7fc fc74 	bl	800dcb8 <ucdr_serialize_uint32_t>
 80113d0:	6863      	ldr	r3, [r4, #4]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d06b      	beq.n	80114ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d067      	beq.n	80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80113da:	68a1      	ldr	r1, [r4, #8]
 80113dc:	4630      	mov	r0, r6
 80113de:	f005 fcef 	bl	8016dc0 <ucdr_serialize_string>
 80113e2:	6863      	ldr	r3, [r4, #4]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d953      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d05e      	beq.n	80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80113ec:	68e1      	ldr	r1, [r4, #12]
 80113ee:	4630      	mov	r0, r6
 80113f0:	f005 fce6 	bl	8016dc0 <ucdr_serialize_string>
 80113f4:	6863      	ldr	r3, [r4, #4]
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d94a      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d055      	beq.n	80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80113fe:	6921      	ldr	r1, [r4, #16]
 8011400:	4630      	mov	r0, r6
 8011402:	f005 fcdd 	bl	8016dc0 <ucdr_serialize_string>
 8011406:	6863      	ldr	r3, [r4, #4]
 8011408:	2b03      	cmp	r3, #3
 801140a:	d941      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801140c:	2800      	cmp	r0, #0
 801140e:	d04c      	beq.n	80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011410:	6961      	ldr	r1, [r4, #20]
 8011412:	4630      	mov	r0, r6
 8011414:	f005 fcd4 	bl	8016dc0 <ucdr_serialize_string>
 8011418:	6863      	ldr	r3, [r4, #4]
 801141a:	2b04      	cmp	r3, #4
 801141c:	d938      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801141e:	2800      	cmp	r0, #0
 8011420:	d043      	beq.n	80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011422:	69a1      	ldr	r1, [r4, #24]
 8011424:	4630      	mov	r0, r6
 8011426:	f005 fccb 	bl	8016dc0 <ucdr_serialize_string>
 801142a:	6863      	ldr	r3, [r4, #4]
 801142c:	2b05      	cmp	r3, #5
 801142e:	d92f      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011430:	2800      	cmp	r0, #0
 8011432:	d03a      	beq.n	80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011434:	69e1      	ldr	r1, [r4, #28]
 8011436:	4630      	mov	r0, r6
 8011438:	f005 fcc2 	bl	8016dc0 <ucdr_serialize_string>
 801143c:	6863      	ldr	r3, [r4, #4]
 801143e:	2b06      	cmp	r3, #6
 8011440:	d926      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011442:	b390      	cbz	r0, 80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011444:	6a21      	ldr	r1, [r4, #32]
 8011446:	4630      	mov	r0, r6
 8011448:	f005 fcba 	bl	8016dc0 <ucdr_serialize_string>
 801144c:	6863      	ldr	r3, [r4, #4]
 801144e:	2b07      	cmp	r3, #7
 8011450:	d91e      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011452:	b350      	cbz	r0, 80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011454:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011456:	4630      	mov	r0, r6
 8011458:	f005 fcb2 	bl	8016dc0 <ucdr_serialize_string>
 801145c:	6863      	ldr	r3, [r4, #4]
 801145e:	2b08      	cmp	r3, #8
 8011460:	d916      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011462:	b310      	cbz	r0, 80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011464:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011466:	4630      	mov	r0, r6
 8011468:	f005 fcaa 	bl	8016dc0 <ucdr_serialize_string>
 801146c:	6863      	ldr	r3, [r4, #4]
 801146e:	2b09      	cmp	r3, #9
 8011470:	d90e      	bls.n	8011490 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011472:	b1d0      	cbz	r0, 80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011474:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011478:	2709      	movs	r7, #9
 801147a:	e000      	b.n	801147e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801147c:	b1a8      	cbz	r0, 80114aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801147e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011482:	4630      	mov	r0, r6
 8011484:	f005 fc9c 	bl	8016dc0 <ucdr_serialize_string>
 8011488:	6862      	ldr	r2, [r4, #4]
 801148a:	3701      	adds	r7, #1
 801148c:	4297      	cmp	r7, r2
 801148e:	d3f5      	bcc.n	801147c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011490:	4005      	ands	r5, r0
 8011492:	b2ed      	uxtb	r5, r5
 8011494:	e78a      	b.n	80113ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011496:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011498:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801149c:	4630      	mov	r0, r6
 801149e:	f7fd fea3 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 80114a2:	4005      	ands	r5, r0
 80114a4:	4628      	mov	r0, r5
 80114a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114aa:	2500      	movs	r5, #0
 80114ac:	e77e      	b.n	80113ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80114ae:	4028      	ands	r0, r5
 80114b0:	b2c5      	uxtb	r5, r0
 80114b2:	e77b      	b.n	80113ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080114b4 <uxr_serialize_OBJK_Publisher_Binary>:
 80114b4:	b570      	push	{r4, r5, r6, lr}
 80114b6:	460d      	mov	r5, r1
 80114b8:	7809      	ldrb	r1, [r1, #0]
 80114ba:	4606      	mov	r6, r0
 80114bc:	f7fc f9b8 	bl	800d830 <ucdr_serialize_bool>
 80114c0:	782b      	ldrb	r3, [r5, #0]
 80114c2:	4604      	mov	r4, r0
 80114c4:	b94b      	cbnz	r3, 80114da <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80114c6:	7a29      	ldrb	r1, [r5, #8]
 80114c8:	4630      	mov	r0, r6
 80114ca:	f7fc f9b1 	bl	800d830 <ucdr_serialize_bool>
 80114ce:	7a2b      	ldrb	r3, [r5, #8]
 80114d0:	4004      	ands	r4, r0
 80114d2:	b2e4      	uxtb	r4, r4
 80114d4:	b943      	cbnz	r3, 80114e8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80114d6:	4620      	mov	r0, r4
 80114d8:	bd70      	pop	{r4, r5, r6, pc}
 80114da:	6869      	ldr	r1, [r5, #4]
 80114dc:	4630      	mov	r0, r6
 80114de:	f005 fc6f 	bl	8016dc0 <ucdr_serialize_string>
 80114e2:	4004      	ands	r4, r0
 80114e4:	b2e4      	uxtb	r4, r4
 80114e6:	e7ee      	b.n	80114c6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80114e8:	f105 010c 	add.w	r1, r5, #12
 80114ec:	4630      	mov	r0, r6
 80114ee:	f7ff ff53 	bl	8011398 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80114f2:	4004      	ands	r4, r0
 80114f4:	4620      	mov	r0, r4
 80114f6:	bd70      	pop	{r4, r5, r6, pc}

080114f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80114f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114fc:	460c      	mov	r4, r1
 80114fe:	7809      	ldrb	r1, [r1, #0]
 8011500:	4606      	mov	r6, r0
 8011502:	f7fc f995 	bl	800d830 <ucdr_serialize_bool>
 8011506:	7823      	ldrb	r3, [r4, #0]
 8011508:	4605      	mov	r5, r0
 801150a:	b96b      	cbnz	r3, 8011528 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801150c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011510:	4630      	mov	r0, r6
 8011512:	f7fc f98d 	bl	800d830 <ucdr_serialize_bool>
 8011516:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801151a:	4005      	ands	r5, r0
 801151c:	b2ed      	uxtb	r5, r5
 801151e:	2b00      	cmp	r3, #0
 8011520:	d169      	bne.n	80115f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011522:	4628      	mov	r0, r5
 8011524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011528:	6861      	ldr	r1, [r4, #4]
 801152a:	4630      	mov	r0, r6
 801152c:	f7fc fbc4 	bl	800dcb8 <ucdr_serialize_uint32_t>
 8011530:	6863      	ldr	r3, [r4, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d06b      	beq.n	801160e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8011536:	2800      	cmp	r0, #0
 8011538:	d067      	beq.n	801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801153a:	68a1      	ldr	r1, [r4, #8]
 801153c:	4630      	mov	r0, r6
 801153e:	f005 fc3f 	bl	8016dc0 <ucdr_serialize_string>
 8011542:	6863      	ldr	r3, [r4, #4]
 8011544:	2b01      	cmp	r3, #1
 8011546:	d953      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011548:	2800      	cmp	r0, #0
 801154a:	d05e      	beq.n	801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801154c:	68e1      	ldr	r1, [r4, #12]
 801154e:	4630      	mov	r0, r6
 8011550:	f005 fc36 	bl	8016dc0 <ucdr_serialize_string>
 8011554:	6863      	ldr	r3, [r4, #4]
 8011556:	2b02      	cmp	r3, #2
 8011558:	d94a      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801155a:	2800      	cmp	r0, #0
 801155c:	d055      	beq.n	801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801155e:	6921      	ldr	r1, [r4, #16]
 8011560:	4630      	mov	r0, r6
 8011562:	f005 fc2d 	bl	8016dc0 <ucdr_serialize_string>
 8011566:	6863      	ldr	r3, [r4, #4]
 8011568:	2b03      	cmp	r3, #3
 801156a:	d941      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801156c:	2800      	cmp	r0, #0
 801156e:	d04c      	beq.n	801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011570:	6961      	ldr	r1, [r4, #20]
 8011572:	4630      	mov	r0, r6
 8011574:	f005 fc24 	bl	8016dc0 <ucdr_serialize_string>
 8011578:	6863      	ldr	r3, [r4, #4]
 801157a:	2b04      	cmp	r3, #4
 801157c:	d938      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801157e:	2800      	cmp	r0, #0
 8011580:	d043      	beq.n	801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011582:	69a1      	ldr	r1, [r4, #24]
 8011584:	4630      	mov	r0, r6
 8011586:	f005 fc1b 	bl	8016dc0 <ucdr_serialize_string>
 801158a:	6863      	ldr	r3, [r4, #4]
 801158c:	2b05      	cmp	r3, #5
 801158e:	d92f      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011590:	2800      	cmp	r0, #0
 8011592:	d03a      	beq.n	801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011594:	69e1      	ldr	r1, [r4, #28]
 8011596:	4630      	mov	r0, r6
 8011598:	f005 fc12 	bl	8016dc0 <ucdr_serialize_string>
 801159c:	6863      	ldr	r3, [r4, #4]
 801159e:	2b06      	cmp	r3, #6
 80115a0:	d926      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80115a2:	b390      	cbz	r0, 801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115a4:	6a21      	ldr	r1, [r4, #32]
 80115a6:	4630      	mov	r0, r6
 80115a8:	f005 fc0a 	bl	8016dc0 <ucdr_serialize_string>
 80115ac:	6863      	ldr	r3, [r4, #4]
 80115ae:	2b07      	cmp	r3, #7
 80115b0:	d91e      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80115b2:	b350      	cbz	r0, 801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80115b6:	4630      	mov	r0, r6
 80115b8:	f005 fc02 	bl	8016dc0 <ucdr_serialize_string>
 80115bc:	6863      	ldr	r3, [r4, #4]
 80115be:	2b08      	cmp	r3, #8
 80115c0:	d916      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80115c2:	b310      	cbz	r0, 801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115c4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80115c6:	4630      	mov	r0, r6
 80115c8:	f005 fbfa 	bl	8016dc0 <ucdr_serialize_string>
 80115cc:	6863      	ldr	r3, [r4, #4]
 80115ce:	2b09      	cmp	r3, #9
 80115d0:	d90e      	bls.n	80115f0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80115d2:	b1d0      	cbz	r0, 801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115d4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80115d8:	2709      	movs	r7, #9
 80115da:	e000      	b.n	80115de <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80115dc:	b1a8      	cbz	r0, 801160a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80115de:	f858 1b04 	ldr.w	r1, [r8], #4
 80115e2:	4630      	mov	r0, r6
 80115e4:	f005 fbec 	bl	8016dc0 <ucdr_serialize_string>
 80115e8:	6862      	ldr	r2, [r4, #4]
 80115ea:	3701      	adds	r7, #1
 80115ec:	4297      	cmp	r7, r2
 80115ee:	d3f5      	bcc.n	80115dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80115f0:	4005      	ands	r5, r0
 80115f2:	b2ed      	uxtb	r5, r5
 80115f4:	e78a      	b.n	801150c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80115f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80115f8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80115fc:	4630      	mov	r0, r6
 80115fe:	f7fd fdf3 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 8011602:	4005      	ands	r5, r0
 8011604:	4628      	mov	r0, r5
 8011606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801160a:	2500      	movs	r5, #0
 801160c:	e77e      	b.n	801150c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801160e:	4028      	ands	r0, r5
 8011610:	b2c5      	uxtb	r5, r0
 8011612:	e77b      	b.n	801150c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08011614 <uxr_serialize_OBJK_Subscriber_Binary>:
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	460d      	mov	r5, r1
 8011618:	7809      	ldrb	r1, [r1, #0]
 801161a:	4606      	mov	r6, r0
 801161c:	f7fc f908 	bl	800d830 <ucdr_serialize_bool>
 8011620:	782b      	ldrb	r3, [r5, #0]
 8011622:	4604      	mov	r4, r0
 8011624:	b94b      	cbnz	r3, 801163a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8011626:	7a29      	ldrb	r1, [r5, #8]
 8011628:	4630      	mov	r0, r6
 801162a:	f7fc f901 	bl	800d830 <ucdr_serialize_bool>
 801162e:	7a2b      	ldrb	r3, [r5, #8]
 8011630:	4004      	ands	r4, r0
 8011632:	b2e4      	uxtb	r4, r4
 8011634:	b943      	cbnz	r3, 8011648 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8011636:	4620      	mov	r0, r4
 8011638:	bd70      	pop	{r4, r5, r6, pc}
 801163a:	6869      	ldr	r1, [r5, #4]
 801163c:	4630      	mov	r0, r6
 801163e:	f005 fbbf 	bl	8016dc0 <ucdr_serialize_string>
 8011642:	4004      	ands	r4, r0
 8011644:	b2e4      	uxtb	r4, r4
 8011646:	e7ee      	b.n	8011626 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8011648:	f105 010c 	add.w	r1, r5, #12
 801164c:	4630      	mov	r0, r6
 801164e:	f7ff ff53 	bl	80114f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8011652:	4004      	ands	r4, r0
 8011654:	4620      	mov	r0, r4
 8011656:	bd70      	pop	{r4, r5, r6, pc}

08011658 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011658:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801165c:	4688      	mov	r8, r1
 801165e:	8809      	ldrh	r1, [r1, #0]
 8011660:	4681      	mov	r9, r0
 8011662:	f7fc f93f 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011666:	f898 1002 	ldrb.w	r1, [r8, #2]
 801166a:	4606      	mov	r6, r0
 801166c:	4648      	mov	r0, r9
 801166e:	f7fc f8df 	bl	800d830 <ucdr_serialize_bool>
 8011672:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011676:	4006      	ands	r6, r0
 8011678:	b2f5      	uxtb	r5, r6
 801167a:	b9eb      	cbnz	r3, 80116b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801167c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011680:	4648      	mov	r0, r9
 8011682:	f7fc f8d5 	bl	800d830 <ucdr_serialize_bool>
 8011686:	f898 3006 	ldrb.w	r3, [r8, #6]
 801168a:	4005      	ands	r5, r0
 801168c:	bb7b      	cbnz	r3, 80116ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801168e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011692:	4648      	mov	r0, r9
 8011694:	f7fc f8cc 	bl	800d830 <ucdr_serialize_bool>
 8011698:	f898 300c 	ldrb.w	r3, [r8, #12]
 801169c:	4005      	ands	r5, r0
 801169e:	b9f3      	cbnz	r3, 80116de <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80116a0:	f898 1014 	ldrb.w	r1, [r8, #20]
 80116a4:	4648      	mov	r0, r9
 80116a6:	f7fc f8c3 	bl	800d830 <ucdr_serialize_bool>
 80116aa:	f898 3014 	ldrb.w	r3, [r8, #20]
 80116ae:	4005      	ands	r5, r0
 80116b0:	b94b      	cbnz	r3, 80116c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80116b2:	4628      	mov	r0, r5
 80116b4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80116b8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80116bc:	4648      	mov	r0, r9
 80116be:	f7fc f911 	bl	800d8e4 <ucdr_serialize_uint16_t>
 80116c2:	4005      	ands	r5, r0
 80116c4:	e7da      	b.n	801167c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80116c6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80116ca:	f108 011c 	add.w	r1, r8, #28
 80116ce:	4648      	mov	r0, r9
 80116d0:	f7fd fd8a 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 80116d4:	4028      	ands	r0, r5
 80116d6:	b2c5      	uxtb	r5, r0
 80116d8:	4628      	mov	r0, r5
 80116da:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80116de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80116e2:	4648      	mov	r0, r9
 80116e4:	f7fc fae8 	bl	800dcb8 <ucdr_serialize_uint32_t>
 80116e8:	4028      	ands	r0, r5
 80116ea:	b2c5      	uxtb	r5, r0
 80116ec:	e7d8      	b.n	80116a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80116ee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80116f2:	4648      	mov	r0, r9
 80116f4:	f7fc fae0 	bl	800dcb8 <ucdr_serialize_uint32_t>
 80116f8:	4028      	ands	r0, r5
 80116fa:	b2c5      	uxtb	r5, r0
 80116fc:	e7c7      	b.n	801168e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80116fe:	bf00      	nop

08011700 <uxr_serialize_OBJK_DataReader_Binary>:
 8011700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011702:	2202      	movs	r2, #2
 8011704:	460c      	mov	r4, r1
 8011706:	4606      	mov	r6, r0
 8011708:	f7fb fdca 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 801170c:	78a1      	ldrb	r1, [r4, #2]
 801170e:	4605      	mov	r5, r0
 8011710:	4630      	mov	r0, r6
 8011712:	f7fc f88d 	bl	800d830 <ucdr_serialize_bool>
 8011716:	78a3      	ldrb	r3, [r4, #2]
 8011718:	4005      	ands	r5, r0
 801171a:	b2ed      	uxtb	r5, r5
 801171c:	b90b      	cbnz	r3, 8011722 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801171e:	4628      	mov	r0, r5
 8011720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011722:	f104 0108 	add.w	r1, r4, #8
 8011726:	4630      	mov	r0, r6
 8011728:	f7ff ff96 	bl	8011658 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801172c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011730:	4607      	mov	r7, r0
 8011732:	4630      	mov	r0, r6
 8011734:	f7fc f87c 	bl	800d830 <ucdr_serialize_bool>
 8011738:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801173c:	4038      	ands	r0, r7
 801173e:	b2c7      	uxtb	r7, r0
 8011740:	b95b      	cbnz	r3, 801175a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8011742:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8011746:	4630      	mov	r0, r6
 8011748:	f7fc f872 	bl	800d830 <ucdr_serialize_bool>
 801174c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8011750:	4007      	ands	r7, r0
 8011752:	b94b      	cbnz	r3, 8011768 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8011754:	403d      	ands	r5, r7
 8011756:	4628      	mov	r0, r5
 8011758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801175a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801175e:	4630      	mov	r0, r6
 8011760:	f7fc fd00 	bl	800e164 <ucdr_serialize_uint64_t>
 8011764:	4007      	ands	r7, r0
 8011766:	e7ec      	b.n	8011742 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8011768:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801176a:	4630      	mov	r0, r6
 801176c:	f005 fb28 	bl	8016dc0 <ucdr_serialize_string>
 8011770:	4007      	ands	r7, r0
 8011772:	b2ff      	uxtb	r7, r7
 8011774:	e7ee      	b.n	8011754 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8011776:	bf00      	nop

08011778 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177a:	2202      	movs	r2, #2
 801177c:	460d      	mov	r5, r1
 801177e:	4606      	mov	r6, r0
 8011780:	f7fb fd8e 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011784:	78a9      	ldrb	r1, [r5, #2]
 8011786:	4604      	mov	r4, r0
 8011788:	4630      	mov	r0, r6
 801178a:	f7fc f851 	bl	800d830 <ucdr_serialize_bool>
 801178e:	78ab      	ldrb	r3, [r5, #2]
 8011790:	4004      	ands	r4, r0
 8011792:	b2e4      	uxtb	r4, r4
 8011794:	b90b      	cbnz	r3, 801179a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011796:	4620      	mov	r0, r4
 8011798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801179a:	f105 0108 	add.w	r1, r5, #8
 801179e:	4630      	mov	r0, r6
 80117a0:	f7ff ff5a 	bl	8011658 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80117a4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80117a8:	4607      	mov	r7, r0
 80117aa:	4630      	mov	r0, r6
 80117ac:	f7fc f840 	bl	800d830 <ucdr_serialize_bool>
 80117b0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80117b4:	4038      	ands	r0, r7
 80117b6:	b2c7      	uxtb	r7, r0
 80117b8:	b913      	cbnz	r3, 80117c0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80117ba:	403c      	ands	r4, r7
 80117bc:	4620      	mov	r0, r4
 80117be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117c0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80117c4:	4630      	mov	r0, r6
 80117c6:	f7fc fccd 	bl	800e164 <ucdr_serialize_uint64_t>
 80117ca:	4007      	ands	r7, r0
 80117cc:	e7f5      	b.n	80117ba <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80117ce:	bf00      	nop

080117d0 <uxr_serialize_OBJK_Replier_Binary>:
 80117d0:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80117d4:	460f      	mov	r7, r1
 80117d6:	6809      	ldr	r1, [r1, #0]
 80117d8:	4680      	mov	r8, r0
 80117da:	f005 faf1 	bl	8016dc0 <ucdr_serialize_string>
 80117de:	6879      	ldr	r1, [r7, #4]
 80117e0:	4605      	mov	r5, r0
 80117e2:	4640      	mov	r0, r8
 80117e4:	f005 faec 	bl	8016dc0 <ucdr_serialize_string>
 80117e8:	68b9      	ldr	r1, [r7, #8]
 80117ea:	4005      	ands	r5, r0
 80117ec:	4640      	mov	r0, r8
 80117ee:	f005 fae7 	bl	8016dc0 <ucdr_serialize_string>
 80117f2:	b2ec      	uxtb	r4, r5
 80117f4:	4004      	ands	r4, r0
 80117f6:	7b39      	ldrb	r1, [r7, #12]
 80117f8:	4640      	mov	r0, r8
 80117fa:	f7fc f819 	bl	800d830 <ucdr_serialize_bool>
 80117fe:	7b3b      	ldrb	r3, [r7, #12]
 8011800:	4004      	ands	r4, r0
 8011802:	b94b      	cbnz	r3, 8011818 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8011804:	7d39      	ldrb	r1, [r7, #20]
 8011806:	4640      	mov	r0, r8
 8011808:	f7fc f812 	bl	800d830 <ucdr_serialize_bool>
 801180c:	7d3b      	ldrb	r3, [r7, #20]
 801180e:	4004      	ands	r4, r0
 8011810:	b943      	cbnz	r3, 8011824 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8011812:	4620      	mov	r0, r4
 8011814:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8011818:	6939      	ldr	r1, [r7, #16]
 801181a:	4640      	mov	r0, r8
 801181c:	f005 fad0 	bl	8016dc0 <ucdr_serialize_string>
 8011820:	4004      	ands	r4, r0
 8011822:	e7ef      	b.n	8011804 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8011824:	69b9      	ldr	r1, [r7, #24]
 8011826:	4640      	mov	r0, r8
 8011828:	f005 faca 	bl	8016dc0 <ucdr_serialize_string>
 801182c:	4004      	ands	r4, r0
 801182e:	b2e4      	uxtb	r4, r4
 8011830:	4620      	mov	r0, r4
 8011832:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8011836:	bf00      	nop

08011838 <uxr_deserialize_ObjectVariant>:
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	4605      	mov	r5, r0
 801183c:	460e      	mov	r6, r1
 801183e:	f7fc f83b 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011842:	b168      	cbz	r0, 8011860 <uxr_deserialize_ObjectVariant+0x28>
 8011844:	7833      	ldrb	r3, [r6, #0]
 8011846:	3b01      	subs	r3, #1
 8011848:	4604      	mov	r4, r0
 801184a:	2b0d      	cmp	r3, #13
 801184c:	d809      	bhi.n	8011862 <uxr_deserialize_ObjectVariant+0x2a>
 801184e:	e8df f003 	tbb	[pc, r3]
 8011852:	0a41      	.short	0x0a41
 8011854:	0a0a2323 	.word	0x0a0a2323
 8011858:	10080a0a 	.word	0x10080a0a
 801185c:	565c1010 	.word	0x565c1010
 8011860:	2400      	movs	r4, #0
 8011862:	4620      	mov	r0, r4
 8011864:	bd70      	pop	{r4, r5, r6, pc}
 8011866:	1d31      	adds	r1, r6, #4
 8011868:	4628      	mov	r0, r5
 801186a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801186e:	f7ff bd21 	b.w	80112b4 <uxr_deserialize_DATAWRITER_Representation>
 8011872:	1d31      	adds	r1, r6, #4
 8011874:	4628      	mov	r0, r5
 8011876:	f7fc f81f 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 801187a:	2800      	cmp	r0, #0
 801187c:	d0f0      	beq.n	8011860 <uxr_deserialize_ObjectVariant+0x28>
 801187e:	7933      	ldrb	r3, [r6, #4]
 8011880:	2b01      	cmp	r3, #1
 8011882:	d001      	beq.n	8011888 <uxr_deserialize_ObjectVariant+0x50>
 8011884:	2b02      	cmp	r3, #2
 8011886:	d1ec      	bne.n	8011862 <uxr_deserialize_ObjectVariant+0x2a>
 8011888:	68b1      	ldr	r1, [r6, #8]
 801188a:	4628      	mov	r0, r5
 801188c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011894:	f005 baa4 	b.w	8016de0 <ucdr_deserialize_string>
 8011898:	1d31      	adds	r1, r6, #4
 801189a:	4628      	mov	r0, r5
 801189c:	f7fc f80c 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 80118a0:	4604      	mov	r4, r0
 80118a2:	b170      	cbz	r0, 80118c2 <uxr_deserialize_ObjectVariant+0x8a>
 80118a4:	7933      	ldrb	r3, [r6, #4]
 80118a6:	2b02      	cmp	r3, #2
 80118a8:	d04c      	beq.n	8011944 <uxr_deserialize_ObjectVariant+0x10c>
 80118aa:	2b03      	cmp	r3, #3
 80118ac:	d109      	bne.n	80118c2 <uxr_deserialize_ObjectVariant+0x8a>
 80118ae:	f106 0308 	add.w	r3, r6, #8
 80118b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80118b6:	f106 010c 	add.w	r1, r6, #12
 80118ba:	4628      	mov	r0, r5
 80118bc:	f7fd fca6 	bl	800f20c <ucdr_deserialize_sequence_uint8_t>
 80118c0:	4604      	mov	r4, r0
 80118c2:	2202      	movs	r2, #2
 80118c4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80118c8:	4628      	mov	r0, r5
 80118ca:	f7fb fd4d 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 80118ce:	4020      	ands	r0, r4
 80118d0:	b2c4      	uxtb	r4, r0
 80118d2:	e7c6      	b.n	8011862 <uxr_deserialize_ObjectVariant+0x2a>
 80118d4:	1d31      	adds	r1, r6, #4
 80118d6:	4628      	mov	r0, r5
 80118d8:	f7fb ffee 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 80118dc:	4604      	mov	r4, r0
 80118de:	b130      	cbz	r0, 80118ee <uxr_deserialize_ObjectVariant+0xb6>
 80118e0:	7933      	ldrb	r3, [r6, #4]
 80118e2:	2b02      	cmp	r3, #2
 80118e4:	d036      	beq.n	8011954 <uxr_deserialize_ObjectVariant+0x11c>
 80118e6:	2b03      	cmp	r3, #3
 80118e8:	d03c      	beq.n	8011964 <uxr_deserialize_ObjectVariant+0x12c>
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d032      	beq.n	8011954 <uxr_deserialize_ObjectVariant+0x11c>
 80118ee:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80118f2:	4628      	mov	r0, r5
 80118f4:	f7fc fd86 	bl	800e404 <ucdr_deserialize_int16_t>
 80118f8:	4020      	ands	r0, r4
 80118fa:	b2c4      	uxtb	r4, r0
 80118fc:	e7b1      	b.n	8011862 <uxr_deserialize_ObjectVariant+0x2a>
 80118fe:	1d31      	adds	r1, r6, #4
 8011900:	4628      	mov	r0, r5
 8011902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011906:	f7ff bb8b 	b.w	8011020 <uxr_deserialize_CLIENT_Representation>
 801190a:	2204      	movs	r2, #4
 801190c:	18b1      	adds	r1, r6, r2
 801190e:	4628      	mov	r0, r5
 8011910:	f7fb fd2a 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011914:	2202      	movs	r2, #2
 8011916:	f106 0108 	add.w	r1, r6, #8
 801191a:	4604      	mov	r4, r0
 801191c:	4628      	mov	r0, r5
 801191e:	f7fb fd23 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011922:	2202      	movs	r2, #2
 8011924:	4004      	ands	r4, r0
 8011926:	f106 010a 	add.w	r1, r6, #10
 801192a:	4628      	mov	r0, r5
 801192c:	f7fb fd1c 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011930:	b2e4      	uxtb	r4, r4
 8011932:	4603      	mov	r3, r0
 8011934:	f106 010c 	add.w	r1, r6, #12
 8011938:	4628      	mov	r0, r5
 801193a:	401c      	ands	r4, r3
 801193c:	f7fb ff8e 	bl	800d85c <ucdr_deserialize_bool>
 8011940:	4004      	ands	r4, r0
 8011942:	e78e      	b.n	8011862 <uxr_deserialize_ObjectVariant+0x2a>
 8011944:	68b1      	ldr	r1, [r6, #8]
 8011946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801194a:	4628      	mov	r0, r5
 801194c:	f005 fa48 	bl	8016de0 <ucdr_deserialize_string>
 8011950:	4604      	mov	r4, r0
 8011952:	e7b6      	b.n	80118c2 <uxr_deserialize_ObjectVariant+0x8a>
 8011954:	68b1      	ldr	r1, [r6, #8]
 8011956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801195a:	4628      	mov	r0, r5
 801195c:	f005 fa40 	bl	8016de0 <ucdr_deserialize_string>
 8011960:	4604      	mov	r4, r0
 8011962:	e7c4      	b.n	80118ee <uxr_deserialize_ObjectVariant+0xb6>
 8011964:	f106 0308 	add.w	r3, r6, #8
 8011968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801196c:	f106 010c 	add.w	r1, r6, #12
 8011970:	4628      	mov	r0, r5
 8011972:	f7fd fc4b 	bl	800f20c <ucdr_deserialize_sequence_uint8_t>
 8011976:	4604      	mov	r4, r0
 8011978:	e7b9      	b.n	80118ee <uxr_deserialize_ObjectVariant+0xb6>
 801197a:	bf00      	nop

0801197c <uxr_deserialize_BaseObjectRequest>:
 801197c:	b570      	push	{r4, r5, r6, lr}
 801197e:	2202      	movs	r2, #2
 8011980:	4605      	mov	r5, r0
 8011982:	460e      	mov	r6, r1
 8011984:	f7fb fcf0 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011988:	2202      	movs	r2, #2
 801198a:	4604      	mov	r4, r0
 801198c:	18b1      	adds	r1, r6, r2
 801198e:	4628      	mov	r0, r5
 8011990:	f7fb fcea 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011994:	4020      	ands	r0, r4
 8011996:	b2c0      	uxtb	r0, r0
 8011998:	bd70      	pop	{r4, r5, r6, pc}
 801199a:	bf00      	nop

0801199c <uxr_serialize_ActivityInfoVariant>:
 801199c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a0:	460d      	mov	r5, r1
 80119a2:	7809      	ldrb	r1, [r1, #0]
 80119a4:	4607      	mov	r7, r0
 80119a6:	f7fb ff71 	bl	800d88c <ucdr_serialize_uint8_t>
 80119aa:	4681      	mov	r9, r0
 80119ac:	b138      	cbz	r0, 80119be <uxr_serialize_ActivityInfoVariant+0x22>
 80119ae:	782b      	ldrb	r3, [r5, #0]
 80119b0:	2b06      	cmp	r3, #6
 80119b2:	f000 8082 	beq.w	8011aba <uxr_serialize_ActivityInfoVariant+0x11e>
 80119b6:	2b0d      	cmp	r3, #13
 80119b8:	d016      	beq.n	80119e8 <uxr_serialize_ActivityInfoVariant+0x4c>
 80119ba:	2b05      	cmp	r3, #5
 80119bc:	d002      	beq.n	80119c4 <uxr_serialize_ActivityInfoVariant+0x28>
 80119be:	4648      	mov	r0, r9
 80119c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80119c8:	4638      	mov	r0, r7
 80119ca:	f7fc fc9b 	bl	800e304 <ucdr_serialize_int16_t>
 80119ce:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80119d2:	4681      	mov	r9, r0
 80119d4:	4638      	mov	r0, r7
 80119d6:	f7fc fbc5 	bl	800e164 <ucdr_serialize_uint64_t>
 80119da:	ea09 0000 	and.w	r0, r9, r0
 80119de:	fa5f f980 	uxtb.w	r9, r0
 80119e2:	4648      	mov	r0, r9
 80119e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80119ec:	4638      	mov	r0, r7
 80119ee:	f7fc fc89 	bl	800e304 <ucdr_serialize_int16_t>
 80119f2:	68e9      	ldr	r1, [r5, #12]
 80119f4:	4681      	mov	r9, r0
 80119f6:	4638      	mov	r0, r7
 80119f8:	f7fc f95e 	bl	800dcb8 <ucdr_serialize_uint32_t>
 80119fc:	68eb      	ldr	r3, [r5, #12]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d0eb      	beq.n	80119da <uxr_serialize_ActivityInfoVariant+0x3e>
 8011a02:	b320      	cbz	r0, 8011a4e <uxr_serialize_ActivityInfoVariant+0xb2>
 8011a04:	f105 080c 	add.w	r8, r5, #12
 8011a08:	2600      	movs	r6, #0
 8011a0a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011a0e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8011a12:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011a16:	4638      	mov	r0, r7
 8011a18:	f7fb ff38 	bl	800d88c <ucdr_serialize_uint8_t>
 8011a1c:	2800      	cmp	r0, #0
 8011a1e:	d053      	beq.n	8011ac8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8011a20:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011a24:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011a28:	0074      	lsls	r4, r6, #1
 8011a2a:	00c9      	lsls	r1, r1, #3
 8011a2c:	2b03      	cmp	r3, #3
 8011a2e:	d854      	bhi.n	8011ada <uxr_serialize_ActivityInfoVariant+0x13e>
 8011a30:	e8df f003 	tbb	[pc, r3]
 8011a34:	02102132 	.word	0x02102132
 8011a38:	4441      	add	r1, r8
 8011a3a:	4638      	mov	r0, r7
 8011a3c:	6889      	ldr	r1, [r1, #8]
 8011a3e:	f005 f9bf 	bl	8016dc0 <ucdr_serialize_string>
 8011a42:	68ea      	ldr	r2, [r5, #12]
 8011a44:	3601      	adds	r6, #1
 8011a46:	4296      	cmp	r6, r2
 8011a48:	d242      	bcs.n	8011ad0 <uxr_serialize_ActivityInfoVariant+0x134>
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	d1dd      	bne.n	8011a0a <uxr_serialize_ActivityInfoVariant+0x6e>
 8011a4e:	f04f 0900 	mov.w	r9, #0
 8011a52:	e7b4      	b.n	80119be <uxr_serialize_ActivityInfoVariant+0x22>
 8011a54:	3108      	adds	r1, #8
 8011a56:	4441      	add	r1, r8
 8011a58:	2210      	movs	r2, #16
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	f7fb fc20 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011a60:	4434      	add	r4, r6
 8011a62:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011a66:	4604      	mov	r4, r0
 8011a68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	f7fc f924 	bl	800dcb8 <ucdr_serialize_uint32_t>
 8011a70:	4020      	ands	r0, r4
 8011a72:	b2c0      	uxtb	r0, r0
 8011a74:	e7e5      	b.n	8011a42 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011a76:	3108      	adds	r1, #8
 8011a78:	4441      	add	r1, r8
 8011a7a:	2204      	movs	r2, #4
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f7fb fc0f 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011a82:	4434      	add	r4, r6
 8011a84:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011a88:	4604      	mov	r4, r0
 8011a8a:	8b19      	ldrh	r1, [r3, #24]
 8011a8c:	4638      	mov	r0, r7
 8011a8e:	f7fb ff29 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011a92:	4020      	ands	r0, r4
 8011a94:	b2c0      	uxtb	r0, r0
 8011a96:	e7d4      	b.n	8011a42 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011a98:	3108      	adds	r1, #8
 8011a9a:	4441      	add	r1, r8
 8011a9c:	2202      	movs	r2, #2
 8011a9e:	4638      	mov	r0, r7
 8011aa0:	f7fb fbfe 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011aa4:	4434      	add	r4, r6
 8011aa6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011aaa:	4604      	mov	r4, r0
 8011aac:	7d99      	ldrb	r1, [r3, #22]
 8011aae:	4638      	mov	r0, r7
 8011ab0:	f7fb feec 	bl	800d88c <ucdr_serialize_uint8_t>
 8011ab4:	4020      	ands	r0, r4
 8011ab6:	b2c0      	uxtb	r0, r0
 8011ab8:	e7c3      	b.n	8011a42 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011aba:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011abe:	4638      	mov	r0, r7
 8011ac0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac4:	f7fc bc1e 	b.w	800e304 <ucdr_serialize_int16_t>
 8011ac8:	68ea      	ldr	r2, [r5, #12]
 8011aca:	3601      	adds	r6, #1
 8011acc:	42b2      	cmp	r2, r6
 8011ace:	d8be      	bhi.n	8011a4e <uxr_serialize_ActivityInfoVariant+0xb2>
 8011ad0:	ea09 0900 	and.w	r9, r9, r0
 8011ad4:	fa5f f989 	uxtb.w	r9, r9
 8011ad8:	e771      	b.n	80119be <uxr_serialize_ActivityInfoVariant+0x22>
 8011ada:	68eb      	ldr	r3, [r5, #12]
 8011adc:	3601      	adds	r6, #1
 8011ade:	429e      	cmp	r6, r3
 8011ae0:	f10a 0a18 	add.w	sl, sl, #24
 8011ae4:	d395      	bcc.n	8011a12 <uxr_serialize_ActivityInfoVariant+0x76>
 8011ae6:	e76a      	b.n	80119be <uxr_serialize_ActivityInfoVariant+0x22>

08011ae8 <uxr_deserialize_BaseObjectReply>:
 8011ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aec:	2202      	movs	r2, #2
 8011aee:	4606      	mov	r6, r0
 8011af0:	460f      	mov	r7, r1
 8011af2:	f7fb fc39 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011af6:	2202      	movs	r2, #2
 8011af8:	18b9      	adds	r1, r7, r2
 8011afa:	4605      	mov	r5, r0
 8011afc:	4630      	mov	r0, r6
 8011afe:	f7fb fc33 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011b02:	1d39      	adds	r1, r7, #4
 8011b04:	4680      	mov	r8, r0
 8011b06:	4630      	mov	r0, r6
 8011b08:	f7fb fed6 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011b0c:	1d79      	adds	r1, r7, #5
 8011b0e:	4604      	mov	r4, r0
 8011b10:	4630      	mov	r0, r6
 8011b12:	f7fb fed1 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011b16:	ea05 0508 	and.w	r5, r5, r8
 8011b1a:	402c      	ands	r4, r5
 8011b1c:	4020      	ands	r0, r4
 8011b1e:	b2c0      	uxtb	r0, r0
 8011b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b24 <uxr_serialize_ReadSpecification>:
 8011b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b28:	460e      	mov	r6, r1
 8011b2a:	7809      	ldrb	r1, [r1, #0]
 8011b2c:	4607      	mov	r7, r0
 8011b2e:	f7fb fead 	bl	800d88c <ucdr_serialize_uint8_t>
 8011b32:	7871      	ldrb	r1, [r6, #1]
 8011b34:	4604      	mov	r4, r0
 8011b36:	4638      	mov	r0, r7
 8011b38:	f7fb fea8 	bl	800d88c <ucdr_serialize_uint8_t>
 8011b3c:	78b1      	ldrb	r1, [r6, #2]
 8011b3e:	4004      	ands	r4, r0
 8011b40:	4638      	mov	r0, r7
 8011b42:	f7fb fe75 	bl	800d830 <ucdr_serialize_bool>
 8011b46:	78b3      	ldrb	r3, [r6, #2]
 8011b48:	b2e4      	uxtb	r4, r4
 8011b4a:	4004      	ands	r4, r0
 8011b4c:	b94b      	cbnz	r3, 8011b62 <uxr_serialize_ReadSpecification+0x3e>
 8011b4e:	7a31      	ldrb	r1, [r6, #8]
 8011b50:	4638      	mov	r0, r7
 8011b52:	f7fb fe6d 	bl	800d830 <ucdr_serialize_bool>
 8011b56:	7a33      	ldrb	r3, [r6, #8]
 8011b58:	4004      	ands	r4, r0
 8011b5a:	b943      	cbnz	r3, 8011b6e <uxr_serialize_ReadSpecification+0x4a>
 8011b5c:	4620      	mov	r0, r4
 8011b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b62:	6871      	ldr	r1, [r6, #4]
 8011b64:	4638      	mov	r0, r7
 8011b66:	f005 f92b 	bl	8016dc0 <ucdr_serialize_string>
 8011b6a:	4004      	ands	r4, r0
 8011b6c:	e7ef      	b.n	8011b4e <uxr_serialize_ReadSpecification+0x2a>
 8011b6e:	8971      	ldrh	r1, [r6, #10]
 8011b70:	4638      	mov	r0, r7
 8011b72:	f7fb feb7 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011b76:	89b1      	ldrh	r1, [r6, #12]
 8011b78:	4605      	mov	r5, r0
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	f7fb feb2 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011b80:	89f1      	ldrh	r1, [r6, #14]
 8011b82:	4005      	ands	r5, r0
 8011b84:	4638      	mov	r0, r7
 8011b86:	f7fb fead 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011b8a:	8a31      	ldrh	r1, [r6, #16]
 8011b8c:	4680      	mov	r8, r0
 8011b8e:	4638      	mov	r0, r7
 8011b90:	f7fb fea8 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011b94:	b2ed      	uxtb	r5, r5
 8011b96:	4025      	ands	r5, r4
 8011b98:	ea08 0505 	and.w	r5, r8, r5
 8011b9c:	ea00 0405 	and.w	r4, r0, r5
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ba6:	bf00      	nop

08011ba8 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011ba8:	f7ff b9e2 	b.w	8010f70 <uxr_serialize_CLIENT_Representation>

08011bac <uxr_serialize_CREATE_Payload>:
 8011bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bae:	2202      	movs	r2, #2
 8011bb0:	4607      	mov	r7, r0
 8011bb2:	460e      	mov	r6, r1
 8011bb4:	f7fb fb74 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011bb8:	2202      	movs	r2, #2
 8011bba:	18b1      	adds	r1, r6, r2
 8011bbc:	4605      	mov	r5, r0
 8011bbe:	4638      	mov	r0, r7
 8011bc0:	f7fb fb6e 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011bc4:	7931      	ldrb	r1, [r6, #4]
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	4638      	mov	r0, r7
 8011bca:	f7fb fe5f 	bl	800d88c <ucdr_serialize_uint8_t>
 8011bce:	b170      	cbz	r0, 8011bee <uxr_serialize_CREATE_Payload+0x42>
 8011bd0:	7933      	ldrb	r3, [r6, #4]
 8011bd2:	402c      	ands	r4, r5
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	b2e4      	uxtb	r4, r4
 8011bd8:	2b0d      	cmp	r3, #13
 8011bda:	d809      	bhi.n	8011bf0 <uxr_serialize_CREATE_Payload+0x44>
 8011bdc:	e8df f003 	tbb	[pc, r3]
 8011be0:	23230a4c 	.word	0x23230a4c
 8011be4:	0a0a0a0a 	.word	0x0a0a0a0a
 8011be8:	12121208 	.word	0x12121208
 8011bec:	3e45      	.short	0x3e45
 8011bee:	2400      	movs	r4, #0
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bf4:	f106 0108 	add.w	r1, r6, #8
 8011bf8:	4638      	mov	r0, r7
 8011bfa:	f7ff fabf 	bl	801117c <uxr_serialize_DATAWRITER_Representation>
 8011bfe:	4004      	ands	r4, r0
 8011c00:	4620      	mov	r0, r4
 8011c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c04:	7a31      	ldrb	r1, [r6, #8]
 8011c06:	4638      	mov	r0, r7
 8011c08:	f7fb fe40 	bl	800d88c <ucdr_serialize_uint8_t>
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	d0ee      	beq.n	8011bee <uxr_serialize_CREATE_Payload+0x42>
 8011c10:	7a33      	ldrb	r3, [r6, #8]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d001      	beq.n	8011c1a <uxr_serialize_CREATE_Payload+0x6e>
 8011c16:	2b02      	cmp	r3, #2
 8011c18:	d1ea      	bne.n	8011bf0 <uxr_serialize_CREATE_Payload+0x44>
 8011c1a:	68f1      	ldr	r1, [r6, #12]
 8011c1c:	4638      	mov	r0, r7
 8011c1e:	f005 f8cf 	bl	8016dc0 <ucdr_serialize_string>
 8011c22:	4004      	ands	r4, r0
 8011c24:	e7e4      	b.n	8011bf0 <uxr_serialize_CREATE_Payload+0x44>
 8011c26:	7a31      	ldrb	r1, [r6, #8]
 8011c28:	4638      	mov	r0, r7
 8011c2a:	f7fb fe2f 	bl	800d88c <ucdr_serialize_uint8_t>
 8011c2e:	4605      	mov	r5, r0
 8011c30:	b158      	cbz	r0, 8011c4a <uxr_serialize_CREATE_Payload+0x9e>
 8011c32:	7a33      	ldrb	r3, [r6, #8]
 8011c34:	2b02      	cmp	r3, #2
 8011c36:	d034      	beq.n	8011ca2 <uxr_serialize_CREATE_Payload+0xf6>
 8011c38:	2b03      	cmp	r3, #3
 8011c3a:	d106      	bne.n	8011c4a <uxr_serialize_CREATE_Payload+0x9e>
 8011c3c:	68f2      	ldr	r2, [r6, #12]
 8011c3e:	f106 0110 	add.w	r1, r6, #16
 8011c42:	4638      	mov	r0, r7
 8011c44:	f7fd fad0 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 8011c48:	4605      	mov	r5, r0
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011c50:	4638      	mov	r0, r7
 8011c52:	f7fb fb25 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011c56:	4028      	ands	r0, r5
 8011c58:	4004      	ands	r4, r0
 8011c5a:	e7c9      	b.n	8011bf0 <uxr_serialize_CREATE_Payload+0x44>
 8011c5c:	f106 0108 	add.w	r1, r6, #8
 8011c60:	4638      	mov	r0, r7
 8011c62:	f7ff f985 	bl	8010f70 <uxr_serialize_CLIENT_Representation>
 8011c66:	4004      	ands	r4, r0
 8011c68:	e7c2      	b.n	8011bf0 <uxr_serialize_CREATE_Payload+0x44>
 8011c6a:	f106 0108 	add.w	r1, r6, #8
 8011c6e:	4638      	mov	r0, r7
 8011c70:	f7ff fa3a 	bl	80110e8 <uxr_serialize_AGENT_Representation>
 8011c74:	4004      	ands	r4, r0
 8011c76:	e7bb      	b.n	8011bf0 <uxr_serialize_CREATE_Payload+0x44>
 8011c78:	7a31      	ldrb	r1, [r6, #8]
 8011c7a:	4638      	mov	r0, r7
 8011c7c:	f7fb fe06 	bl	800d88c <ucdr_serialize_uint8_t>
 8011c80:	4605      	mov	r5, r0
 8011c82:	b130      	cbz	r0, 8011c92 <uxr_serialize_CREATE_Payload+0xe6>
 8011c84:	7a33      	ldrb	r3, [r6, #8]
 8011c86:	2b02      	cmp	r3, #2
 8011c88:	d011      	beq.n	8011cae <uxr_serialize_CREATE_Payload+0x102>
 8011c8a:	2b03      	cmp	r3, #3
 8011c8c:	d015      	beq.n	8011cba <uxr_serialize_CREATE_Payload+0x10e>
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d00d      	beq.n	8011cae <uxr_serialize_CREATE_Payload+0x102>
 8011c92:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011c96:	4638      	mov	r0, r7
 8011c98:	f7fc fb34 	bl	800e304 <ucdr_serialize_int16_t>
 8011c9c:	4028      	ands	r0, r5
 8011c9e:	4004      	ands	r4, r0
 8011ca0:	e7a6      	b.n	8011bf0 <uxr_serialize_CREATE_Payload+0x44>
 8011ca2:	68f1      	ldr	r1, [r6, #12]
 8011ca4:	4638      	mov	r0, r7
 8011ca6:	f005 f88b 	bl	8016dc0 <ucdr_serialize_string>
 8011caa:	4605      	mov	r5, r0
 8011cac:	e7cd      	b.n	8011c4a <uxr_serialize_CREATE_Payload+0x9e>
 8011cae:	68f1      	ldr	r1, [r6, #12]
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	f005 f885 	bl	8016dc0 <ucdr_serialize_string>
 8011cb6:	4605      	mov	r5, r0
 8011cb8:	e7eb      	b.n	8011c92 <uxr_serialize_CREATE_Payload+0xe6>
 8011cba:	68f2      	ldr	r2, [r6, #12]
 8011cbc:	f106 0110 	add.w	r1, r6, #16
 8011cc0:	4638      	mov	r0, r7
 8011cc2:	f7fd fa91 	bl	800f1e8 <ucdr_serialize_sequence_uint8_t>
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	e7e3      	b.n	8011c92 <uxr_serialize_CREATE_Payload+0xe6>
 8011cca:	bf00      	nop

08011ccc <uxr_deserialize_GET_INFO_Payload>:
 8011ccc:	b570      	push	{r4, r5, r6, lr}
 8011cce:	2202      	movs	r2, #2
 8011cd0:	4605      	mov	r5, r0
 8011cd2:	460e      	mov	r6, r1
 8011cd4:	f7fb fb48 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011cd8:	2202      	movs	r2, #2
 8011cda:	18b1      	adds	r1, r6, r2
 8011cdc:	4604      	mov	r4, r0
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f7fb fb42 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011ce4:	1d31      	adds	r1, r6, #4
 8011ce6:	4004      	ands	r4, r0
 8011ce8:	4628      	mov	r0, r5
 8011cea:	f7fc f915 	bl	800df18 <ucdr_deserialize_uint32_t>
 8011cee:	b2e4      	uxtb	r4, r4
 8011cf0:	4020      	ands	r0, r4
 8011cf2:	bd70      	pop	{r4, r5, r6, pc}

08011cf4 <uxr_serialize_DELETE_Payload>:
 8011cf4:	b570      	push	{r4, r5, r6, lr}
 8011cf6:	2202      	movs	r2, #2
 8011cf8:	4605      	mov	r5, r0
 8011cfa:	460e      	mov	r6, r1
 8011cfc:	f7fb fad0 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011d00:	2202      	movs	r2, #2
 8011d02:	4604      	mov	r4, r0
 8011d04:	18b1      	adds	r1, r6, r2
 8011d06:	4628      	mov	r0, r5
 8011d08:	f7fb faca 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011d0c:	4020      	ands	r0, r4
 8011d0e:	b2c0      	uxtb	r0, r0
 8011d10:	bd70      	pop	{r4, r5, r6, pc}
 8011d12:	bf00      	nop

08011d14 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d18:	4605      	mov	r5, r0
 8011d1a:	460e      	mov	r6, r1
 8011d1c:	f7fb fdcc 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011d20:	1c71      	adds	r1, r6, #1
 8011d22:	4604      	mov	r4, r0
 8011d24:	4628      	mov	r0, r5
 8011d26:	f7fb fdc7 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011d2a:	2204      	movs	r2, #4
 8011d2c:	18b1      	adds	r1, r6, r2
 8011d2e:	4680      	mov	r8, r0
 8011d30:	4628      	mov	r0, r5
 8011d32:	f7fb fb19 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011d36:	f106 0108 	add.w	r1, r6, #8
 8011d3a:	4607      	mov	r7, r0
 8011d3c:	2202      	movs	r2, #2
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f7fb fb12 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011d44:	ea04 0308 	and.w	r3, r4, r8
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	ea03 0407 	and.w	r4, r3, r7
 8011d4e:	2202      	movs	r2, #2
 8011d50:	4607      	mov	r7, r0
 8011d52:	f106 010a 	add.w	r1, r6, #10
 8011d56:	4628      	mov	r0, r5
 8011d58:	f7fb fb06 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011d5c:	f106 010c 	add.w	r1, r6, #12
 8011d60:	4603      	mov	r3, r0
 8011d62:	4628      	mov	r0, r5
 8011d64:	461d      	mov	r5, r3
 8011d66:	f7fb fd79 	bl	800d85c <ucdr_deserialize_bool>
 8011d6a:	403c      	ands	r4, r7
 8011d6c:	4025      	ands	r5, r4
 8011d6e:	4028      	ands	r0, r5
 8011d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d74 <uxr_deserialize_STATUS_Payload>:
 8011d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d78:	2202      	movs	r2, #2
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	460f      	mov	r7, r1
 8011d7e:	f7fb faf3 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011d82:	2202      	movs	r2, #2
 8011d84:	18b9      	adds	r1, r7, r2
 8011d86:	4605      	mov	r5, r0
 8011d88:	4630      	mov	r0, r6
 8011d8a:	f7fb faed 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011d8e:	1d39      	adds	r1, r7, #4
 8011d90:	4680      	mov	r8, r0
 8011d92:	4630      	mov	r0, r6
 8011d94:	f7fb fd90 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011d98:	1d79      	adds	r1, r7, #5
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	f7fb fd8b 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011da2:	ea05 0508 	and.w	r5, r5, r8
 8011da6:	402c      	ands	r4, r5
 8011da8:	4020      	ands	r0, r4
 8011daa:	b2c0      	uxtb	r0, r0
 8011dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011db0 <uxr_serialize_INFO_Payload>:
 8011db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db4:	2202      	movs	r2, #2
 8011db6:	460c      	mov	r4, r1
 8011db8:	4605      	mov	r5, r0
 8011dba:	f7fb fa71 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011dbe:	2202      	movs	r2, #2
 8011dc0:	18a1      	adds	r1, r4, r2
 8011dc2:	4680      	mov	r8, r0
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	f7fb fa6b 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011dca:	7921      	ldrb	r1, [r4, #4]
 8011dcc:	4607      	mov	r7, r0
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f7fb fd5c 	bl	800d88c <ucdr_serialize_uint8_t>
 8011dd4:	7961      	ldrb	r1, [r4, #5]
 8011dd6:	4606      	mov	r6, r0
 8011dd8:	4628      	mov	r0, r5
 8011dda:	f7fb fd57 	bl	800d88c <ucdr_serialize_uint8_t>
 8011dde:	ea08 0807 	and.w	r8, r8, r7
 8011de2:	ea06 0608 	and.w	r6, r6, r8
 8011de6:	4006      	ands	r6, r0
 8011de8:	7a21      	ldrb	r1, [r4, #8]
 8011dea:	4628      	mov	r0, r5
 8011dec:	f7fb fd20 	bl	800d830 <ucdr_serialize_bool>
 8011df0:	7a23      	ldrb	r3, [r4, #8]
 8011df2:	b2f7      	uxtb	r7, r6
 8011df4:	4606      	mov	r6, r0
 8011df6:	b96b      	cbnz	r3, 8011e14 <uxr_serialize_INFO_Payload+0x64>
 8011df8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	f7fb fd17 	bl	800d830 <ucdr_serialize_bool>
 8011e02:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011e06:	4030      	ands	r0, r6
 8011e08:	b2c6      	uxtb	r6, r0
 8011e0a:	b983      	cbnz	r3, 8011e2e <uxr_serialize_INFO_Payload+0x7e>
 8011e0c:	ea06 0007 	and.w	r0, r6, r7
 8011e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e14:	7b21      	ldrb	r1, [r4, #12]
 8011e16:	4628      	mov	r0, r5
 8011e18:	f7fb fd38 	bl	800d88c <ucdr_serialize_uint8_t>
 8011e1c:	b188      	cbz	r0, 8011e42 <uxr_serialize_INFO_Payload+0x92>
 8011e1e:	f104 010c 	add.w	r1, r4, #12
 8011e22:	4628      	mov	r0, r5
 8011e24:	f7ff f9d2 	bl	80111cc <uxr_serialize_ObjectVariant.part.0>
 8011e28:	4030      	ands	r0, r6
 8011e2a:	b2c6      	uxtb	r6, r0
 8011e2c:	e7e4      	b.n	8011df8 <uxr_serialize_INFO_Payload+0x48>
 8011e2e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011e32:	4628      	mov	r0, r5
 8011e34:	f7ff fdb2 	bl	801199c <uxr_serialize_ActivityInfoVariant>
 8011e38:	4006      	ands	r6, r0
 8011e3a:	ea06 0007 	and.w	r0, r6, r7
 8011e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e42:	4606      	mov	r6, r0
 8011e44:	e7d8      	b.n	8011df8 <uxr_serialize_INFO_Payload+0x48>
 8011e46:	bf00      	nop

08011e48 <uxr_serialize_READ_DATA_Payload>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	2202      	movs	r2, #2
 8011e4c:	4605      	mov	r5, r0
 8011e4e:	460e      	mov	r6, r1
 8011e50:	f7fb fa26 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011e54:	2202      	movs	r2, #2
 8011e56:	18b1      	adds	r1, r6, r2
 8011e58:	4604      	mov	r4, r0
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	f7fb fa20 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011e60:	1d31      	adds	r1, r6, #4
 8011e62:	4004      	ands	r4, r0
 8011e64:	4628      	mov	r0, r5
 8011e66:	f7ff fe5d 	bl	8011b24 <uxr_serialize_ReadSpecification>
 8011e6a:	b2e4      	uxtb	r4, r4
 8011e6c:	4020      	ands	r0, r4
 8011e6e:	bd70      	pop	{r4, r5, r6, pc}

08011e70 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011e70:	b570      	push	{r4, r5, r6, lr}
 8011e72:	2202      	movs	r2, #2
 8011e74:	4605      	mov	r5, r0
 8011e76:	460e      	mov	r6, r1
 8011e78:	f7fb fa12 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	4604      	mov	r4, r0
 8011e80:	18b1      	adds	r1, r6, r2
 8011e82:	4628      	mov	r0, r5
 8011e84:	f7fb fa0c 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011e88:	4020      	ands	r0, r4
 8011e8a:	b2c0      	uxtb	r0, r0
 8011e8c:	bd70      	pop	{r4, r5, r6, pc}
 8011e8e:	bf00      	nop

08011e90 <uxr_serialize_ACKNACK_Payload>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	460c      	mov	r4, r1
 8011e94:	460e      	mov	r6, r1
 8011e96:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	f7fb fd22 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011ea0:	2202      	movs	r2, #2
 8011ea2:	4621      	mov	r1, r4
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7fb f9fa 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011eac:	7931      	ldrb	r1, [r6, #4]
 8011eae:	4004      	ands	r4, r0
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	f7fb fceb 	bl	800d88c <ucdr_serialize_uint8_t>
 8011eb6:	b2e4      	uxtb	r4, r4
 8011eb8:	4020      	ands	r0, r4
 8011eba:	bd70      	pop	{r4, r5, r6, pc}

08011ebc <uxr_deserialize_ACKNACK_Payload>:
 8011ebc:	b570      	push	{r4, r5, r6, lr}
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	460e      	mov	r6, r1
 8011ec2:	f7fb fe0f 	bl	800dae4 <ucdr_deserialize_uint16_t>
 8011ec6:	2202      	movs	r2, #2
 8011ec8:	18b1      	adds	r1, r6, r2
 8011eca:	4604      	mov	r4, r0
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f7fb fa4b 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011ed2:	1d31      	adds	r1, r6, #4
 8011ed4:	4004      	ands	r4, r0
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	f7fb fcee 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011edc:	b2e4      	uxtb	r4, r4
 8011ede:	4020      	ands	r0, r4
 8011ee0:	bd70      	pop	{r4, r5, r6, pc}
 8011ee2:	bf00      	nop

08011ee4 <uxr_serialize_HEARTBEAT_Payload>:
 8011ee4:	b570      	push	{r4, r5, r6, lr}
 8011ee6:	460d      	mov	r5, r1
 8011ee8:	8809      	ldrh	r1, [r1, #0]
 8011eea:	4606      	mov	r6, r0
 8011eec:	f7fb fcfa 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011ef0:	8869      	ldrh	r1, [r5, #2]
 8011ef2:	4604      	mov	r4, r0
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	f7fb fcf5 	bl	800d8e4 <ucdr_serialize_uint16_t>
 8011efa:	7929      	ldrb	r1, [r5, #4]
 8011efc:	4004      	ands	r4, r0
 8011efe:	4630      	mov	r0, r6
 8011f00:	f7fb fcc4 	bl	800d88c <ucdr_serialize_uint8_t>
 8011f04:	b2e4      	uxtb	r4, r4
 8011f06:	4020      	ands	r0, r4
 8011f08:	bd70      	pop	{r4, r5, r6, pc}
 8011f0a:	bf00      	nop

08011f0c <uxr_deserialize_HEARTBEAT_Payload>:
 8011f0c:	b570      	push	{r4, r5, r6, lr}
 8011f0e:	4605      	mov	r5, r0
 8011f10:	460e      	mov	r6, r1
 8011f12:	f7fb fde7 	bl	800dae4 <ucdr_deserialize_uint16_t>
 8011f16:	1cb1      	adds	r1, r6, #2
 8011f18:	4604      	mov	r4, r0
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	f7fb fde2 	bl	800dae4 <ucdr_deserialize_uint16_t>
 8011f20:	1d31      	adds	r1, r6, #4
 8011f22:	4004      	ands	r4, r0
 8011f24:	4628      	mov	r0, r5
 8011f26:	f7fb fcc7 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011f2a:	b2e4      	uxtb	r4, r4
 8011f2c:	4020      	ands	r0, r4
 8011f2e:	bd70      	pop	{r4, r5, r6, pc}

08011f30 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f34:	4605      	mov	r5, r0
 8011f36:	460e      	mov	r6, r1
 8011f38:	f7fc fb70 	bl	800e61c <ucdr_deserialize_int32_t>
 8011f3c:	1d31      	adds	r1, r6, #4
 8011f3e:	4607      	mov	r7, r0
 8011f40:	4628      	mov	r0, r5
 8011f42:	f7fb ffe9 	bl	800df18 <ucdr_deserialize_uint32_t>
 8011f46:	f106 0108 	add.w	r1, r6, #8
 8011f4a:	4680      	mov	r8, r0
 8011f4c:	4628      	mov	r0, r5
 8011f4e:	f7fc fb65 	bl	800e61c <ucdr_deserialize_int32_t>
 8011f52:	f106 010c 	add.w	r1, r6, #12
 8011f56:	4604      	mov	r4, r0
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f7fb ffdd 	bl	800df18 <ucdr_deserialize_uint32_t>
 8011f5e:	ea07 0708 	and.w	r7, r7, r8
 8011f62:	403c      	ands	r4, r7
 8011f64:	f106 0110 	add.w	r1, r6, #16
 8011f68:	4004      	ands	r4, r0
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	f7fc fb56 	bl	800e61c <ucdr_deserialize_int32_t>
 8011f70:	f106 0114 	add.w	r1, r6, #20
 8011f74:	4607      	mov	r7, r0
 8011f76:	4628      	mov	r0, r5
 8011f78:	f7fb ffce 	bl	800df18 <ucdr_deserialize_uint32_t>
 8011f7c:	b2e4      	uxtb	r4, r4
 8011f7e:	403c      	ands	r4, r7
 8011f80:	4020      	ands	r0, r4
 8011f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f86:	bf00      	nop

08011f88 <uxr_serialize_SampleIdentity>:
 8011f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8c:	220c      	movs	r2, #12
 8011f8e:	4604      	mov	r4, r0
 8011f90:	460d      	mov	r5, r1
 8011f92:	f7fb f985 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011f96:	2203      	movs	r2, #3
 8011f98:	f105 010c 	add.w	r1, r5, #12
 8011f9c:	4607      	mov	r7, r0
 8011f9e:	4620      	mov	r0, r4
 8011fa0:	f7fb f97e 	bl	800d2a0 <ucdr_serialize_array_uint8_t>
 8011fa4:	7be9      	ldrb	r1, [r5, #15]
 8011fa6:	4680      	mov	r8, r0
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f7fb fc6f 	bl	800d88c <ucdr_serialize_uint8_t>
 8011fae:	6929      	ldr	r1, [r5, #16]
 8011fb0:	4606      	mov	r6, r0
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	f7fc fa9a 	bl	800e4ec <ucdr_serialize_int32_t>
 8011fb8:	6969      	ldr	r1, [r5, #20]
 8011fba:	4603      	mov	r3, r0
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	ea07 0708 	and.w	r7, r7, r8
 8011fc2:	461c      	mov	r4, r3
 8011fc4:	f7fb fe78 	bl	800dcb8 <ucdr_serialize_uint32_t>
 8011fc8:	403e      	ands	r6, r7
 8011fca:	4034      	ands	r4, r6
 8011fcc:	4020      	ands	r0, r4
 8011fce:	b2c0      	uxtb	r0, r0
 8011fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011fd4 <uxr_deserialize_SampleIdentity>:
 8011fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd8:	220c      	movs	r2, #12
 8011fda:	4604      	mov	r4, r0
 8011fdc:	460d      	mov	r5, r1
 8011fde:	f7fb f9c3 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011fe2:	2203      	movs	r2, #3
 8011fe4:	f105 010c 	add.w	r1, r5, #12
 8011fe8:	4607      	mov	r7, r0
 8011fea:	4620      	mov	r0, r4
 8011fec:	f7fb f9bc 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8011ff0:	f105 010f 	add.w	r1, r5, #15
 8011ff4:	4680      	mov	r8, r0
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	f7fb fc5e 	bl	800d8b8 <ucdr_deserialize_uint8_t>
 8011ffc:	f105 0110 	add.w	r1, r5, #16
 8012000:	4606      	mov	r6, r0
 8012002:	4620      	mov	r0, r4
 8012004:	f7fc fb0a 	bl	800e61c <ucdr_deserialize_int32_t>
 8012008:	f105 0114 	add.w	r1, r5, #20
 801200c:	4603      	mov	r3, r0
 801200e:	4620      	mov	r0, r4
 8012010:	ea07 0708 	and.w	r7, r7, r8
 8012014:	461c      	mov	r4, r3
 8012016:	f7fb ff7f 	bl	800df18 <ucdr_deserialize_uint32_t>
 801201a:	403e      	ands	r6, r7
 801201c:	4034      	ands	r4, r6
 801201e:	4020      	ands	r0, r4
 8012020:	b2c0      	uxtb	r0, r0
 8012022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012026:	bf00      	nop

08012028 <nereo_interfaces__msg__CommandVelocity__init>:
 8012028:	3800      	subs	r0, #0
 801202a:	bf18      	it	ne
 801202c:	2001      	movne	r0, #1
 801202e:	4770      	bx	lr

08012030 <nereo_interfaces__msg__CommandVelocity__fini>:
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop

08012034 <nereo_interfaces__srv__SetNavigationMode_Request__init>:
 8012034:	3800      	subs	r0, #0
 8012036:	bf18      	it	ne
 8012038:	2001      	movne	r0, #1
 801203a:	4770      	bx	lr

0801203c <nereo_interfaces__srv__SetNavigationMode_Request__fini>:
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop

08012040 <nereo_interfaces__srv__SetNavigationMode_Response__init>:
 8012040:	3800      	subs	r0, #0
 8012042:	bf18      	it	ne
 8012044:	2001      	movne	r0, #1
 8012046:	4770      	bx	lr

08012048 <nereo_interfaces__srv__SetNavigationMode_Response__fini>:
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop

0801204c <nereo_interfaces__msg__ThrusterStatuses__init>:
 801204c:	3800      	subs	r0, #0
 801204e:	bf18      	it	ne
 8012050:	2001      	movne	r0, #1
 8012052:	4770      	bx	lr

08012054 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <rcl_client_get_rmw_handle>:
 8012058:	b118      	cbz	r0, 8012062 <rcl_client_get_rmw_handle+0xa>
 801205a:	6800      	ldr	r0, [r0, #0]
 801205c:	b108      	cbz	r0, 8012062 <rcl_client_get_rmw_handle+0xa>
 801205e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012062:	4770      	bx	lr

08012064 <rcl_send_request>:
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	b1e8      	cbz	r0, 80120a6 <rcl_send_request+0x42>
 801206a:	4604      	mov	r4, r0
 801206c:	6800      	ldr	r0, [r0, #0]
 801206e:	b1d0      	cbz	r0, 80120a6 <rcl_send_request+0x42>
 8012070:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8012074:	b1bb      	cbz	r3, 80120a6 <rcl_send_request+0x42>
 8012076:	460e      	mov	r6, r1
 8012078:	b1d1      	cbz	r1, 80120b0 <rcl_send_request+0x4c>
 801207a:	4615      	mov	r5, r2
 801207c:	b1c2      	cbz	r2, 80120b0 <rcl_send_request+0x4c>
 801207e:	2105      	movs	r1, #5
 8012080:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012084:	f002 fe24 	bl	8014cd0 <__atomic_load_8>
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	e9c5 0100 	strd	r0, r1, [r5]
 801208e:	462a      	mov	r2, r5
 8012090:	4631      	mov	r1, r6
 8012092:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012096:	f003 ffcf 	bl	8016038 <rmw_send_request>
 801209a:	4606      	mov	r6, r0
 801209c:	b160      	cbz	r0, 80120b8 <rcl_send_request+0x54>
 801209e:	2601      	movs	r6, #1
 80120a0:	4630      	mov	r0, r6
 80120a2:	b002      	add	sp, #8
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
 80120a6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80120aa:	4630      	mov	r0, r6
 80120ac:	b002      	add	sp, #8
 80120ae:	bd70      	pop	{r4, r5, r6, pc}
 80120b0:	260b      	movs	r6, #11
 80120b2:	4630      	mov	r0, r6
 80120b4:	b002      	add	sp, #8
 80120b6:	bd70      	pop	{r4, r5, r6, pc}
 80120b8:	6820      	ldr	r0, [r4, #0]
 80120ba:	2105      	movs	r1, #5
 80120bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120c0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80120c4:	9100      	str	r1, [sp, #0]
 80120c6:	f002 fe6f 	bl	8014da8 <__atomic_exchange_8>
 80120ca:	4630      	mov	r0, r6
 80120cc:	b002      	add	sp, #8
 80120ce:	bd70      	pop	{r4, r5, r6, pc}

080120d0 <rcl_take_response>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	468e      	mov	lr, r1
 80120d4:	460c      	mov	r4, r1
 80120d6:	4616      	mov	r6, r2
 80120d8:	4605      	mov	r5, r0
 80120da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80120de:	b08c      	sub	sp, #48	@ 0x30
 80120e0:	f10d 0c18 	add.w	ip, sp, #24
 80120e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80120ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80120f0:	b35d      	cbz	r5, 801214a <rcl_take_response+0x7a>
 80120f2:	682b      	ldr	r3, [r5, #0]
 80120f4:	b34b      	cbz	r3, 801214a <rcl_take_response+0x7a>
 80120f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80120fa:	b330      	cbz	r0, 801214a <rcl_take_response+0x7a>
 80120fc:	b346      	cbz	r6, 8012150 <rcl_take_response+0x80>
 80120fe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012158 <rcl_take_response+0x88>
 8012102:	2300      	movs	r3, #0
 8012104:	f88d 3007 	strb.w	r3, [sp, #7]
 8012108:	4632      	mov	r2, r6
 801210a:	f10d 0307 	add.w	r3, sp, #7
 801210e:	a902      	add	r1, sp, #8
 8012110:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012114:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012118:	f004 f896 	bl	8016248 <rmw_take_response>
 801211c:	4605      	mov	r5, r0
 801211e:	b9c8      	cbnz	r0, 8012154 <rcl_take_response+0x84>
 8012120:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012124:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8012128:	2a00      	cmp	r2, #0
 801212a:	bf08      	it	eq
 801212c:	461d      	moveq	r5, r3
 801212e:	f10d 0e18 	add.w	lr, sp, #24
 8012132:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012136:	46a4      	mov	ip, r4
 8012138:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801213c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012140:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012144:	4628      	mov	r0, r5
 8012146:	b00c      	add	sp, #48	@ 0x30
 8012148:	bd70      	pop	{r4, r5, r6, pc}
 801214a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801214e:	e7ee      	b.n	801212e <rcl_take_response+0x5e>
 8012150:	250b      	movs	r5, #11
 8012152:	e7ec      	b.n	801212e <rcl_take_response+0x5e>
 8012154:	2501      	movs	r5, #1
 8012156:	e7ea      	b.n	801212e <rcl_take_response+0x5e>
	...

08012160 <rcl_client_is_valid>:
 8012160:	b130      	cbz	r0, 8012170 <rcl_client_is_valid+0x10>
 8012162:	6800      	ldr	r0, [r0, #0]
 8012164:	b120      	cbz	r0, 8012170 <rcl_client_is_valid+0x10>
 8012166:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801216a:	3800      	subs	r0, #0
 801216c:	bf18      	it	ne
 801216e:	2001      	movne	r0, #1
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop

08012174 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012174:	280b      	cmp	r0, #11
 8012176:	dc0d      	bgt.n	8012194 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012178:	2800      	cmp	r0, #0
 801217a:	db09      	blt.n	8012190 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801217c:	280b      	cmp	r0, #11
 801217e:	d807      	bhi.n	8012190 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012180:	e8df f000 	tbb	[pc, r0]
 8012184:	07060607 	.word	0x07060607
 8012188:	06060606 	.word	0x06060606
 801218c:	07070606 	.word	0x07070606
 8012190:	2001      	movs	r0, #1
 8012192:	4770      	bx	lr
 8012194:	28cb      	cmp	r0, #203	@ 0xcb
 8012196:	bf18      	it	ne
 8012198:	2001      	movne	r0, #1
 801219a:	4770      	bx	lr

0801219c <rcl_get_zero_initialized_context>:
 801219c:	4a03      	ldr	r2, [pc, #12]	@ (80121ac <rcl_get_zero_initialized_context+0x10>)
 801219e:	4603      	mov	r3, r0
 80121a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80121a8:	4618      	mov	r0, r3
 80121aa:	4770      	bx	lr
 80121ac:	0801be28 	.word	0x0801be28

080121b0 <rcl_context_is_valid>:
 80121b0:	b118      	cbz	r0, 80121ba <rcl_context_is_valid+0xa>
 80121b2:	6840      	ldr	r0, [r0, #4]
 80121b4:	3800      	subs	r0, #0
 80121b6:	bf18      	it	ne
 80121b8:	2001      	movne	r0, #1
 80121ba:	4770      	bx	lr

080121bc <__cleanup_context>:
 80121bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c0:	4606      	mov	r6, r0
 80121c2:	6800      	ldr	r0, [r0, #0]
 80121c4:	2300      	movs	r3, #0
 80121c6:	6073      	str	r3, [r6, #4]
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d049      	beq.n	8012260 <__cleanup_context+0xa4>
 80121cc:	6947      	ldr	r7, [r0, #20]
 80121ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80121d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80121d6:	b137      	cbz	r7, 80121e6 <__cleanup_context+0x2a>
 80121d8:	3014      	adds	r0, #20
 80121da:	f000 f9bb 	bl	8012554 <rcl_init_options_fini>
 80121de:	4607      	mov	r7, r0
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d144      	bne.n	801226e <__cleanup_context+0xb2>
 80121e4:	6830      	ldr	r0, [r6, #0]
 80121e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80121e8:	b143      	cbz	r3, 80121fc <__cleanup_context+0x40>
 80121ea:	3028      	adds	r0, #40	@ 0x28
 80121ec:	f003 fd6c 	bl	8015cc8 <rmw_context_fini>
 80121f0:	b118      	cbz	r0, 80121fa <__cleanup_context+0x3e>
 80121f2:	2f00      	cmp	r7, #0
 80121f4:	d03e      	beq.n	8012274 <__cleanup_context+0xb8>
 80121f6:	f7f9 fbaf 	bl	800b958 <rcutils_reset_error>
 80121fa:	6830      	ldr	r0, [r6, #0]
 80121fc:	6a03      	ldr	r3, [r0, #32]
 80121fe:	b1db      	cbz	r3, 8012238 <__cleanup_context+0x7c>
 8012200:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012204:	2a01      	cmp	r2, #1
 8012206:	f17c 0100 	sbcs.w	r1, ip, #0
 801220a:	db11      	blt.n	8012230 <__cleanup_context+0x74>
 801220c:	2400      	movs	r4, #0
 801220e:	4625      	mov	r5, r4
 8012210:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012214:	4649      	mov	r1, r9
 8012216:	b1b8      	cbz	r0, 8012248 <__cleanup_context+0x8c>
 8012218:	47c0      	blx	r8
 801221a:	6833      	ldr	r3, [r6, #0]
 801221c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012220:	3401      	adds	r4, #1
 8012222:	f145 0500 	adc.w	r5, r5, #0
 8012226:	4294      	cmp	r4, r2
 8012228:	eb75 010c 	sbcs.w	r1, r5, ip
 801222c:	6a1b      	ldr	r3, [r3, #32]
 801222e:	dbef      	blt.n	8012210 <__cleanup_context+0x54>
 8012230:	4618      	mov	r0, r3
 8012232:	4649      	mov	r1, r9
 8012234:	47c0      	blx	r8
 8012236:	6830      	ldr	r0, [r6, #0]
 8012238:	4649      	mov	r1, r9
 801223a:	47c0      	blx	r8
 801223c:	2300      	movs	r3, #0
 801223e:	e9c6 3300 	strd	r3, r3, [r6]
 8012242:	4638      	mov	r0, r7
 8012244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012248:	3401      	adds	r4, #1
 801224a:	f145 0500 	adc.w	r5, r5, #0
 801224e:	4294      	cmp	r4, r2
 8012250:	eb75 010c 	sbcs.w	r1, r5, ip
 8012254:	dbdc      	blt.n	8012210 <__cleanup_context+0x54>
 8012256:	4618      	mov	r0, r3
 8012258:	4649      	mov	r1, r9
 801225a:	47c0      	blx	r8
 801225c:	6830      	ldr	r0, [r6, #0]
 801225e:	e7eb      	b.n	8012238 <__cleanup_context+0x7c>
 8012260:	4607      	mov	r7, r0
 8012262:	2300      	movs	r3, #0
 8012264:	e9c6 3300 	strd	r3, r3, [r6]
 8012268:	4638      	mov	r0, r7
 801226a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801226e:	f7f9 fb73 	bl	800b958 <rcutils_reset_error>
 8012272:	e7b7      	b.n	80121e4 <__cleanup_context+0x28>
 8012274:	f7ff ff7e 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 8012278:	4607      	mov	r7, r0
 801227a:	e7bc      	b.n	80121f6 <__cleanup_context+0x3a>

0801227c <rcl_init>:
 801227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012280:	1e05      	subs	r5, r0, #0
 8012282:	b09e      	sub	sp, #120	@ 0x78
 8012284:	460e      	mov	r6, r1
 8012286:	4690      	mov	r8, r2
 8012288:	461f      	mov	r7, r3
 801228a:	f340 809c 	ble.w	80123c6 <rcl_init+0x14a>
 801228e:	2900      	cmp	r1, #0
 8012290:	f000 809c 	beq.w	80123cc <rcl_init+0x150>
 8012294:	f1a1 0e04 	sub.w	lr, r1, #4
 8012298:	f04f 0c00 	mov.w	ip, #0
 801229c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80122a0:	f10c 0c01 	add.w	ip, ip, #1
 80122a4:	2c00      	cmp	r4, #0
 80122a6:	f000 8091 	beq.w	80123cc <rcl_init+0x150>
 80122aa:	4565      	cmp	r5, ip
 80122ac:	d1f6      	bne.n	801229c <rcl_init+0x20>
 80122ae:	f1b8 0f00 	cmp.w	r8, #0
 80122b2:	f000 808b 	beq.w	80123cc <rcl_init+0x150>
 80122b6:	f8d8 4000 	ldr.w	r4, [r8]
 80122ba:	2c00      	cmp	r4, #0
 80122bc:	f000 8086 	beq.w	80123cc <rcl_init+0x150>
 80122c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80122c2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80122c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122ca:	6823      	ldr	r3, [r4, #0]
 80122cc:	f8cc 3000 	str.w	r3, [ip]
 80122d0:	a819      	add	r0, sp, #100	@ 0x64
 80122d2:	f7f9 fb1d 	bl	800b910 <rcutils_allocator_is_valid>
 80122d6:	2800      	cmp	r0, #0
 80122d8:	d078      	beq.n	80123cc <rcl_init+0x150>
 80122da:	2f00      	cmp	r7, #0
 80122dc:	d076      	beq.n	80123cc <rcl_init+0x150>
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d178      	bne.n	80123d6 <rcl_init+0x15a>
 80122e4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80122e8:	2178      	movs	r1, #120	@ 0x78
 80122ea:	2001      	movs	r0, #1
 80122ec:	4798      	blx	r3
 80122ee:	4604      	mov	r4, r0
 80122f0:	6038      	str	r0, [r7, #0]
 80122f2:	2800      	cmp	r0, #0
 80122f4:	f000 80b6 	beq.w	8012464 <rcl_init+0x1e8>
 80122f8:	a802      	add	r0, sp, #8
 80122fa:	f003 f839 	bl	8015370 <rmw_get_zero_initialized_context>
 80122fe:	a902      	add	r1, sp, #8
 8012300:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8012304:	2250      	movs	r2, #80	@ 0x50
 8012306:	ac19      	add	r4, sp, #100	@ 0x64
 8012308:	f007 fc15 	bl	8019b36 <memcpy>
 801230c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801230e:	f8d7 e000 	ldr.w	lr, [r7]
 8012312:	46f4      	mov	ip, lr
 8012314:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012318:	6823      	ldr	r3, [r4, #0]
 801231a:	f8cc 3000 	str.w	r3, [ip]
 801231e:	f10e 0114 	add.w	r1, lr, #20
 8012322:	4640      	mov	r0, r8
 8012324:	f000 f940 	bl	80125a8 <rcl_init_options_copy>
 8012328:	4604      	mov	r4, r0
 801232a:	2800      	cmp	r0, #0
 801232c:	d144      	bne.n	80123b8 <rcl_init+0x13c>
 801232e:	f8d7 9000 	ldr.w	r9, [r7]
 8012332:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012336:	f8c9 0020 	str.w	r0, [r9, #32]
 801233a:	f8c9 5018 	str.w	r5, [r9, #24]
 801233e:	f8c9 801c 	str.w	r8, [r9, #28]
 8012342:	2d00      	cmp	r5, #0
 8012344:	d04e      	beq.n	80123e4 <rcl_init+0x168>
 8012346:	2e00      	cmp	r6, #0
 8012348:	d04c      	beq.n	80123e4 <rcl_init+0x168>
 801234a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801234e:	2104      	movs	r1, #4
 8012350:	4628      	mov	r0, r5
 8012352:	4798      	blx	r3
 8012354:	f8c9 0020 	str.w	r0, [r9, #32]
 8012358:	f8d7 9000 	ldr.w	r9, [r7]
 801235c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012360:	46ca      	mov	sl, r9
 8012362:	b343      	cbz	r3, 80123b6 <rcl_init+0x13a>
 8012364:	2d01      	cmp	r5, #1
 8012366:	f178 0300 	sbcs.w	r3, r8, #0
 801236a:	db3b      	blt.n	80123e4 <rcl_init+0x168>
 801236c:	2400      	movs	r4, #0
 801236e:	3e04      	subs	r6, #4
 8012370:	46a1      	mov	r9, r4
 8012372:	e00b      	b.n	801238c <rcl_init+0x110>
 8012374:	6831      	ldr	r1, [r6, #0]
 8012376:	f007 fbde 	bl	8019b36 <memcpy>
 801237a:	3401      	adds	r4, #1
 801237c:	f149 0900 	adc.w	r9, r9, #0
 8012380:	45c8      	cmp	r8, r9
 8012382:	bf08      	it	eq
 8012384:	42a5      	cmpeq	r5, r4
 8012386:	d02b      	beq.n	80123e0 <rcl_init+0x164>
 8012388:	f8d7 a000 	ldr.w	sl, [r7]
 801238c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012390:	f7ed ff36 	bl	8000200 <strlen>
 8012394:	1c42      	adds	r2, r0, #1
 8012396:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012398:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801239a:	f8da a020 	ldr.w	sl, [sl, #32]
 801239e:	9201      	str	r2, [sp, #4]
 80123a0:	4610      	mov	r0, r2
 80123a2:	4798      	blx	r3
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80123aa:	6a1b      	ldr	r3, [r3, #32]
 80123ac:	9a01      	ldr	r2, [sp, #4]
 80123ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80123b2:	2800      	cmp	r0, #0
 80123b4:	d1de      	bne.n	8012374 <rcl_init+0xf8>
 80123b6:	240a      	movs	r4, #10
 80123b8:	4638      	mov	r0, r7
 80123ba:	f7ff feff 	bl	80121bc <__cleanup_context>
 80123be:	4620      	mov	r0, r4
 80123c0:	b01e      	add	sp, #120	@ 0x78
 80123c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c6:	2900      	cmp	r1, #0
 80123c8:	f43f af71 	beq.w	80122ae <rcl_init+0x32>
 80123cc:	240b      	movs	r4, #11
 80123ce:	4620      	mov	r0, r4
 80123d0:	b01e      	add	sp, #120	@ 0x78
 80123d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123d6:	2464      	movs	r4, #100	@ 0x64
 80123d8:	4620      	mov	r0, r4
 80123da:	b01e      	add	sp, #120	@ 0x78
 80123dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e0:	f8d7 9000 	ldr.w	r9, [r7]
 80123e4:	4926      	ldr	r1, [pc, #152]	@ (8012480 <rcl_init+0x204>)
 80123e6:	680b      	ldr	r3, [r1, #0]
 80123e8:	3301      	adds	r3, #1
 80123ea:	d036      	beq.n	801245a <rcl_init+0x1de>
 80123ec:	600b      	str	r3, [r1, #0]
 80123ee:	461a      	mov	r2, r3
 80123f0:	2400      	movs	r4, #0
 80123f2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80123f6:	607b      	str	r3, [r7, #4]
 80123f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80123fa:	3301      	adds	r3, #1
 80123fc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8012400:	d034      	beq.n	801246c <rcl_init+0x1f0>
 8012402:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8012406:	b93b      	cbnz	r3, 8012418 <rcl_init+0x19c>
 8012408:	3030      	adds	r0, #48	@ 0x30
 801240a:	f000 f939 	bl	8012680 <rcl_get_localhost_only>
 801240e:	4604      	mov	r4, r0
 8012410:	2800      	cmp	r0, #0
 8012412:	d1d1      	bne.n	80123b8 <rcl_init+0x13c>
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	6958      	ldr	r0, [r3, #20]
 8012418:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801241a:	aa18      	add	r2, sp, #96	@ 0x60
 801241c:	a917      	add	r1, sp, #92	@ 0x5c
 801241e:	f001 f8f3 	bl	8013608 <rcl_validate_enclave_name>
 8012422:	4604      	mov	r4, r0
 8012424:	2800      	cmp	r0, #0
 8012426:	d1c7      	bne.n	80123b8 <rcl_init+0x13c>
 8012428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801242a:	b9eb      	cbnz	r3, 8012468 <rcl_init+0x1ec>
 801242c:	6839      	ldr	r1, [r7, #0]
 801242e:	694b      	ldr	r3, [r1, #20]
 8012430:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012432:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012436:	f000 fc3d 	bl	8012cb4 <rcl_get_security_options_from_environment>
 801243a:	4604      	mov	r4, r0
 801243c:	2800      	cmp	r0, #0
 801243e:	d1bb      	bne.n	80123b8 <rcl_init+0x13c>
 8012440:	6839      	ldr	r1, [r7, #0]
 8012442:	6948      	ldr	r0, [r1, #20]
 8012444:	3128      	adds	r1, #40	@ 0x28
 8012446:	3018      	adds	r0, #24
 8012448:	f003 fb08 	bl	8015a5c <rmw_init>
 801244c:	4604      	mov	r4, r0
 801244e:	2800      	cmp	r0, #0
 8012450:	d0bd      	beq.n	80123ce <rcl_init+0x152>
 8012452:	f7ff fe8f 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 8012456:	4604      	mov	r4, r0
 8012458:	e7ae      	b.n	80123b8 <rcl_init+0x13c>
 801245a:	2201      	movs	r2, #1
 801245c:	461c      	mov	r4, r3
 801245e:	600a      	str	r2, [r1, #0]
 8012460:	4613      	mov	r3, r2
 8012462:	e7c6      	b.n	80123f2 <rcl_init+0x176>
 8012464:	240a      	movs	r4, #10
 8012466:	e7b2      	b.n	80123ce <rcl_init+0x152>
 8012468:	2401      	movs	r4, #1
 801246a:	e7a5      	b.n	80123b8 <rcl_init+0x13c>
 801246c:	3024      	adds	r0, #36	@ 0x24
 801246e:	f006 f8ab 	bl	80185c8 <rcl_get_default_domain_id>
 8012472:	4604      	mov	r4, r0
 8012474:	2800      	cmp	r0, #0
 8012476:	d19f      	bne.n	80123b8 <rcl_init+0x13c>
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	6958      	ldr	r0, [r3, #20]
 801247c:	e7c1      	b.n	8012402 <rcl_init+0x186>
 801247e:	bf00      	nop
 8012480:	200156d4 	.word	0x200156d4

08012484 <rcl_get_zero_initialized_init_options>:
 8012484:	2000      	movs	r0, #0
 8012486:	4770      	bx	lr

08012488 <rcl_init_options_init>:
 8012488:	b084      	sub	sp, #16
 801248a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801248c:	b097      	sub	sp, #92	@ 0x5c
 801248e:	ae1d      	add	r6, sp, #116	@ 0x74
 8012490:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8012494:	2800      	cmp	r0, #0
 8012496:	d058      	beq.n	801254a <rcl_init_options_init+0xc2>
 8012498:	6803      	ldr	r3, [r0, #0]
 801249a:	4605      	mov	r5, r0
 801249c:	b133      	cbz	r3, 80124ac <rcl_init_options_init+0x24>
 801249e:	2464      	movs	r4, #100	@ 0x64
 80124a0:	4620      	mov	r0, r4
 80124a2:	b017      	add	sp, #92	@ 0x5c
 80124a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80124a8:	b004      	add	sp, #16
 80124aa:	4770      	bx	lr
 80124ac:	4630      	mov	r0, r6
 80124ae:	f7f9 fa2f 	bl	800b910 <rcutils_allocator_is_valid>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	d049      	beq.n	801254a <rcl_init_options_init+0xc2>
 80124b6:	46b4      	mov	ip, r6
 80124b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124bc:	ac11      	add	r4, sp, #68	@ 0x44
 80124be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124c0:	f8dc 3000 	ldr.w	r3, [ip]
 80124c4:	6023      	str	r3, [r4, #0]
 80124c6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80124c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80124ca:	2050      	movs	r0, #80	@ 0x50
 80124cc:	4798      	blx	r3
 80124ce:	4604      	mov	r4, r0
 80124d0:	6028      	str	r0, [r5, #0]
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d03b      	beq.n	801254e <rcl_init_options_init+0xc6>
 80124d6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80124da:	4686      	mov	lr, r0
 80124dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80124e4:	f8dc 3000 	ldr.w	r3, [ip]
 80124e8:	f8ce 3000 	str.w	r3, [lr]
 80124ec:	a802      	add	r0, sp, #8
 80124ee:	f002 ff4f 	bl	8015390 <rmw_get_zero_initialized_init_options>
 80124f2:	f10d 0e08 	add.w	lr, sp, #8
 80124f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124fa:	f104 0c18 	add.w	ip, r4, #24
 80124fe:	682f      	ldr	r7, [r5, #0]
 8012500:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012504:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801250c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012510:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012514:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012518:	ac20      	add	r4, sp, #128	@ 0x80
 801251a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801251e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012522:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012526:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801252a:	f107 0018 	add.w	r0, r7, #24
 801252e:	f003 f99d 	bl	801586c <rmw_init_options_init>
 8012532:	4604      	mov	r4, r0
 8012534:	2800      	cmp	r0, #0
 8012536:	d0b3      	beq.n	80124a0 <rcl_init_options_init+0x18>
 8012538:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801253a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801253c:	6828      	ldr	r0, [r5, #0]
 801253e:	4798      	blx	r3
 8012540:	4620      	mov	r0, r4
 8012542:	f7ff fe17 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 8012546:	4604      	mov	r4, r0
 8012548:	e7aa      	b.n	80124a0 <rcl_init_options_init+0x18>
 801254a:	240b      	movs	r4, #11
 801254c:	e7a8      	b.n	80124a0 <rcl_init_options_init+0x18>
 801254e:	240a      	movs	r4, #10
 8012550:	e7a6      	b.n	80124a0 <rcl_init_options_init+0x18>
 8012552:	bf00      	nop

08012554 <rcl_init_options_fini>:
 8012554:	b530      	push	{r4, r5, lr}
 8012556:	b087      	sub	sp, #28
 8012558:	b1f0      	cbz	r0, 8012598 <rcl_init_options_fini+0x44>
 801255a:	6803      	ldr	r3, [r0, #0]
 801255c:	4604      	mov	r4, r0
 801255e:	b1db      	cbz	r3, 8012598 <rcl_init_options_fini+0x44>
 8012560:	469c      	mov	ip, r3
 8012562:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012566:	f10d 0e04 	add.w	lr, sp, #4
 801256a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801256e:	f8dc 3000 	ldr.w	r3, [ip]
 8012572:	f8ce 3000 	str.w	r3, [lr]
 8012576:	a801      	add	r0, sp, #4
 8012578:	f7f9 f9ca 	bl	800b910 <rcutils_allocator_is_valid>
 801257c:	b160      	cbz	r0, 8012598 <rcl_init_options_fini+0x44>
 801257e:	6820      	ldr	r0, [r4, #0]
 8012580:	3018      	adds	r0, #24
 8012582:	f003 fa23 	bl	80159cc <rmw_init_options_fini>
 8012586:	4605      	mov	r5, r0
 8012588:	b950      	cbnz	r0, 80125a0 <rcl_init_options_fini+0x4c>
 801258a:	6820      	ldr	r0, [r4, #0]
 801258c:	9b02      	ldr	r3, [sp, #8]
 801258e:	9905      	ldr	r1, [sp, #20]
 8012590:	4798      	blx	r3
 8012592:	4628      	mov	r0, r5
 8012594:	b007      	add	sp, #28
 8012596:	bd30      	pop	{r4, r5, pc}
 8012598:	250b      	movs	r5, #11
 801259a:	4628      	mov	r0, r5
 801259c:	b007      	add	sp, #28
 801259e:	bd30      	pop	{r4, r5, pc}
 80125a0:	f7ff fde8 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 80125a4:	4605      	mov	r5, r0
 80125a6:	e7f8      	b.n	801259a <rcl_init_options_fini+0x46>

080125a8 <rcl_init_options_copy>:
 80125a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ac:	b094      	sub	sp, #80	@ 0x50
 80125ae:	2800      	cmp	r0, #0
 80125b0:	d058      	beq.n	8012664 <rcl_init_options_copy+0xbc>
 80125b2:	4604      	mov	r4, r0
 80125b4:	6800      	ldr	r0, [r0, #0]
 80125b6:	2800      	cmp	r0, #0
 80125b8:	d054      	beq.n	8012664 <rcl_init_options_copy+0xbc>
 80125ba:	460e      	mov	r6, r1
 80125bc:	f7f9 f9a8 	bl	800b910 <rcutils_allocator_is_valid>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	d04f      	beq.n	8012664 <rcl_init_options_copy+0xbc>
 80125c4:	2e00      	cmp	r6, #0
 80125c6:	d04d      	beq.n	8012664 <rcl_init_options_copy+0xbc>
 80125c8:	6833      	ldr	r3, [r6, #0]
 80125ca:	b123      	cbz	r3, 80125d6 <rcl_init_options_copy+0x2e>
 80125cc:	2464      	movs	r4, #100	@ 0x64
 80125ce:	4620      	mov	r0, r4
 80125d0:	b014      	add	sp, #80	@ 0x50
 80125d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d6:	6827      	ldr	r7, [r4, #0]
 80125d8:	46bc      	mov	ip, r7
 80125da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80125de:	ad0f      	add	r5, sp, #60	@ 0x3c
 80125e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80125e2:	f8dc 3000 	ldr.w	r3, [ip]
 80125e6:	f8d7 8000 	ldr.w	r8, [r7]
 80125ea:	602b      	str	r3, [r5, #0]
 80125ec:	4619      	mov	r1, r3
 80125ee:	2050      	movs	r0, #80	@ 0x50
 80125f0:	47c0      	blx	r8
 80125f2:	4605      	mov	r5, r0
 80125f4:	6030      	str	r0, [r6, #0]
 80125f6:	b3d0      	cbz	r0, 801266e <rcl_init_options_copy+0xc6>
 80125f8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80125fc:	4686      	mov	lr, r0
 80125fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012602:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012606:	f8dc 3000 	ldr.w	r3, [ip]
 801260a:	f8ce 3000 	str.w	r3, [lr]
 801260e:	4668      	mov	r0, sp
 8012610:	f002 febe 	bl	8015390 <rmw_get_zero_initialized_init_options>
 8012614:	46ee      	mov	lr, sp
 8012616:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801261a:	f105 0c18 	add.w	ip, r5, #24
 801261e:	6824      	ldr	r4, [r4, #0]
 8012620:	6835      	ldr	r5, [r6, #0]
 8012622:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012626:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801262a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801262e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012632:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012636:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801263a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801263e:	f104 0018 	add.w	r0, r4, #24
 8012642:	f105 0118 	add.w	r1, r5, #24
 8012646:	f003 f979 	bl	801593c <rmw_init_options_copy>
 801264a:	4604      	mov	r4, r0
 801264c:	2800      	cmp	r0, #0
 801264e:	d0be      	beq.n	80125ce <rcl_init_options_copy+0x26>
 8012650:	f7f9 f96c 	bl	800b92c <rcutils_get_error_string>
 8012654:	f7f9 f980 	bl	800b958 <rcutils_reset_error>
 8012658:	4630      	mov	r0, r6
 801265a:	f7ff ff7b 	bl	8012554 <rcl_init_options_fini>
 801265e:	b140      	cbz	r0, 8012672 <rcl_init_options_copy+0xca>
 8012660:	4604      	mov	r4, r0
 8012662:	e7b4      	b.n	80125ce <rcl_init_options_copy+0x26>
 8012664:	240b      	movs	r4, #11
 8012666:	4620      	mov	r0, r4
 8012668:	b014      	add	sp, #80	@ 0x50
 801266a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801266e:	240a      	movs	r4, #10
 8012670:	e7ad      	b.n	80125ce <rcl_init_options_copy+0x26>
 8012672:	4620      	mov	r0, r4
 8012674:	b014      	add	sp, #80	@ 0x50
 8012676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801267a:	f7ff bd7b 	b.w	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 801267e:	bf00      	nop

08012680 <rcl_get_localhost_only>:
 8012680:	b510      	push	{r4, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	2300      	movs	r3, #0
 8012686:	9301      	str	r3, [sp, #4]
 8012688:	b1b8      	cbz	r0, 80126ba <rcl_get_localhost_only+0x3a>
 801268a:	4604      	mov	r4, r0
 801268c:	a901      	add	r1, sp, #4
 801268e:	480c      	ldr	r0, [pc, #48]	@ (80126c0 <rcl_get_localhost_only+0x40>)
 8012690:	f002 fbc2 	bl	8014e18 <rcutils_get_env>
 8012694:	b110      	cbz	r0, 801269c <rcl_get_localhost_only+0x1c>
 8012696:	2001      	movs	r0, #1
 8012698:	b002      	add	sp, #8
 801269a:	bd10      	pop	{r4, pc}
 801269c:	9b01      	ldr	r3, [sp, #4]
 801269e:	b113      	cbz	r3, 80126a6 <rcl_get_localhost_only+0x26>
 80126a0:	781a      	ldrb	r2, [r3, #0]
 80126a2:	2a31      	cmp	r2, #49	@ 0x31
 80126a4:	d004      	beq.n	80126b0 <rcl_get_localhost_only+0x30>
 80126a6:	2302      	movs	r3, #2
 80126a8:	2000      	movs	r0, #0
 80126aa:	7023      	strb	r3, [r4, #0]
 80126ac:	b002      	add	sp, #8
 80126ae:	bd10      	pop	{r4, pc}
 80126b0:	785b      	ldrb	r3, [r3, #1]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d1f7      	bne.n	80126a6 <rcl_get_localhost_only+0x26>
 80126b6:	2301      	movs	r3, #1
 80126b8:	e7f6      	b.n	80126a8 <rcl_get_localhost_only+0x28>
 80126ba:	200b      	movs	r0, #11
 80126bc:	b002      	add	sp, #8
 80126be:	bd10      	pop	{r4, pc}
 80126c0:	0801be30 	.word	0x0801be30

080126c4 <rcl_get_zero_initialized_node>:
 80126c4:	4a03      	ldr	r2, [pc, #12]	@ (80126d4 <rcl_get_zero_initialized_node+0x10>)
 80126c6:	4603      	mov	r3, r0
 80126c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80126cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80126d0:	4618      	mov	r0, r3
 80126d2:	4770      	bx	lr
 80126d4:	0801be54 	.word	0x0801be54

080126d8 <rcl_node_init>:
 80126d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126dc:	b0a9      	sub	sp, #164	@ 0xa4
 80126de:	4604      	mov	r4, r0
 80126e0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80126e4:	a823      	add	r0, sp, #140	@ 0x8c
 80126e6:	460e      	mov	r6, r1
 80126e8:	4615      	mov	r5, r2
 80126ea:	461f      	mov	r7, r3
 80126ec:	f006 f994 	bl	8018a18 <rcl_guard_condition_get_default_options>
 80126f0:	f1b8 0f00 	cmp.w	r8, #0
 80126f4:	f000 80e6 	beq.w	80128c4 <rcl_node_init+0x1ec>
 80126f8:	4640      	mov	r0, r8
 80126fa:	f7f9 f909 	bl	800b910 <rcutils_allocator_is_valid>
 80126fe:	2800      	cmp	r0, #0
 8012700:	f000 80e0 	beq.w	80128c4 <rcl_node_init+0x1ec>
 8012704:	2e00      	cmp	r6, #0
 8012706:	f000 80dd 	beq.w	80128c4 <rcl_node_init+0x1ec>
 801270a:	2d00      	cmp	r5, #0
 801270c:	f000 80da 	beq.w	80128c4 <rcl_node_init+0x1ec>
 8012710:	2c00      	cmp	r4, #0
 8012712:	f000 80d7 	beq.w	80128c4 <rcl_node_init+0x1ec>
 8012716:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801271a:	f1b9 0f00 	cmp.w	r9, #0
 801271e:	f040 80fd 	bne.w	801291c <rcl_node_init+0x244>
 8012722:	2f00      	cmp	r7, #0
 8012724:	f000 80ce 	beq.w	80128c4 <rcl_node_init+0x1ec>
 8012728:	4638      	mov	r0, r7
 801272a:	f7ff fd41 	bl	80121b0 <rcl_context_is_valid>
 801272e:	4682      	mov	sl, r0
 8012730:	2800      	cmp	r0, #0
 8012732:	f000 80cd 	beq.w	80128d0 <rcl_node_init+0x1f8>
 8012736:	464a      	mov	r2, r9
 8012738:	a922      	add	r1, sp, #136	@ 0x88
 801273a:	4630      	mov	r0, r6
 801273c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8012740:	f002 ffc8 	bl	80156d4 <rmw_validate_node_name>
 8012744:	4681      	mov	r9, r0
 8012746:	2800      	cmp	r0, #0
 8012748:	f040 80be 	bne.w	80128c8 <rcl_node_init+0x1f0>
 801274c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801274e:	2800      	cmp	r0, #0
 8012750:	f040 80f0 	bne.w	8012934 <rcl_node_init+0x25c>
 8012754:	4628      	mov	r0, r5
 8012756:	f7ed fd53 	bl	8000200 <strlen>
 801275a:	2800      	cmp	r0, #0
 801275c:	f040 80bb 	bne.w	80128d6 <rcl_node_init+0x1fe>
 8012760:	4d7c      	ldr	r5, [pc, #496]	@ (8012954 <rcl_node_init+0x27c>)
 8012762:	a922      	add	r1, sp, #136	@ 0x88
 8012764:	2200      	movs	r2, #0
 8012766:	4628      	mov	r0, r5
 8012768:	f002 ff96 	bl	8015698 <rmw_validate_namespace>
 801276c:	4681      	mov	r9, r0
 801276e:	2800      	cmp	r0, #0
 8012770:	f040 80aa 	bne.w	80128c8 <rcl_node_init+0x1f0>
 8012774:	4682      	mov	sl, r0
 8012776:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012778:	2800      	cmp	r0, #0
 801277a:	f040 80e0 	bne.w	801293e <rcl_node_init+0x266>
 801277e:	f8d8 3000 	ldr.w	r3, [r8]
 8012782:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012786:	2078      	movs	r0, #120	@ 0x78
 8012788:	4798      	blx	r3
 801278a:	4681      	mov	r9, r0
 801278c:	6060      	str	r0, [r4, #4]
 801278e:	2800      	cmp	r0, #0
 8012790:	f000 80ca 	beq.w	8012928 <rcl_node_init+0x250>
 8012794:	2200      	movs	r2, #0
 8012796:	2300      	movs	r3, #0
 8012798:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 801279c:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80127a0:	a808      	add	r0, sp, #32
 80127a2:	f000 f907 	bl	80129b4 <rcl_node_get_default_options>
 80127a6:	a908      	add	r1, sp, #32
 80127a8:	4648      	mov	r0, r9
 80127aa:	2268      	movs	r2, #104	@ 0x68
 80127ac:	f007 f9c3 	bl	8019b36 <memcpy>
 80127b0:	6861      	ldr	r1, [r4, #4]
 80127b2:	6027      	str	r7, [r4, #0]
 80127b4:	4640      	mov	r0, r8
 80127b6:	f000 f90b 	bl	80129d0 <rcl_node_options_copy>
 80127ba:	2800      	cmp	r0, #0
 80127bc:	d158      	bne.n	8012870 <rcl_node_init+0x198>
 80127be:	4628      	mov	r0, r5
 80127c0:	f7ed fd1e 	bl	8000200 <strlen>
 80127c4:	4428      	add	r0, r5
 80127c6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80127ca:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80127ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80127d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80127d4:	9300      	str	r3, [sp, #0]
 80127d6:	bf0c      	ite	eq
 80127d8:	4b5f      	ldreq	r3, [pc, #380]	@ (8012958 <rcl_node_init+0x280>)
 80127da:	4b60      	ldrne	r3, [pc, #384]	@ (801295c <rcl_node_init+0x284>)
 80127dc:	9302      	str	r3, [sp, #8]
 80127de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80127e2:	9301      	str	r3, [sp, #4]
 80127e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80127e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80127ec:	f002 fb3c 	bl	8014e68 <rcutils_format_string_limit>
 80127f0:	6823      	ldr	r3, [r4, #0]
 80127f2:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80127f6:	6818      	ldr	r0, [r3, #0]
 80127f8:	4631      	mov	r1, r6
 80127fa:	3028      	adds	r0, #40	@ 0x28
 80127fc:	462a      	mov	r2, r5
 80127fe:	6866      	ldr	r6, [r4, #4]
 8012800:	f003 fb80 	bl	8015f04 <rmw_create_node>
 8012804:	6863      	ldr	r3, [r4, #4]
 8012806:	66b0      	str	r0, [r6, #104]	@ 0x68
 8012808:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801280a:	2800      	cmp	r0, #0
 801280c:	d032      	beq.n	8012874 <rcl_node_init+0x19c>
 801280e:	f003 fc0d 	bl	801602c <rmw_node_get_graph_guard_condition>
 8012812:	4681      	mov	r9, r0
 8012814:	b360      	cbz	r0, 8012870 <rcl_node_init+0x198>
 8012816:	f8d8 3000 	ldr.w	r3, [r8]
 801281a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801281e:	6866      	ldr	r6, [r4, #4]
 8012820:	2008      	movs	r0, #8
 8012822:	4798      	blx	r3
 8012824:	6863      	ldr	r3, [r4, #4]
 8012826:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8012828:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801282c:	f1bb 0f00 	cmp.w	fp, #0
 8012830:	d020      	beq.n	8012874 <rcl_node_init+0x19c>
 8012832:	a806      	add	r0, sp, #24
 8012834:	f006 f860 	bl	80188f8 <rcl_get_zero_initialized_guard_condition>
 8012838:	a806      	add	r0, sp, #24
 801283a:	c803      	ldmia	r0, {r0, r1}
 801283c:	6863      	ldr	r3, [r4, #4]
 801283e:	46c4      	mov	ip, r8
 8012840:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012844:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012848:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801284c:	ae23      	add	r6, sp, #140	@ 0x8c
 801284e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012850:	f8dc 3000 	ldr.w	r3, [ip]
 8012854:	6033      	str	r3, [r6, #0]
 8012856:	ab28      	add	r3, sp, #160	@ 0xa0
 8012858:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801285c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012860:	4649      	mov	r1, r9
 8012862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012864:	463a      	mov	r2, r7
 8012866:	4670      	mov	r0, lr
 8012868:	f006 f850 	bl	801890c <rcl_guard_condition_init_from_rmw>
 801286c:	4681      	mov	r9, r0
 801286e:	b328      	cbz	r0, 80128bc <rcl_node_init+0x1e4>
 8012870:	6863      	ldr	r3, [r4, #4]
 8012872:	b1f3      	cbz	r3, 80128b2 <rcl_node_init+0x1da>
 8012874:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012876:	b128      	cbz	r0, 8012884 <rcl_node_init+0x1ac>
 8012878:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801287c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012880:	4798      	blx	r3
 8012882:	6863      	ldr	r3, [r4, #4]
 8012884:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012886:	b110      	cbz	r0, 801288e <rcl_node_init+0x1b6>
 8012888:	f003 fb54 	bl	8015f34 <rmw_destroy_node>
 801288c:	6863      	ldr	r3, [r4, #4]
 801288e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012890:	b148      	cbz	r0, 80128a6 <rcl_node_init+0x1ce>
 8012892:	f006 f89b 	bl	80189cc <rcl_guard_condition_fini>
 8012896:	6863      	ldr	r3, [r4, #4]
 8012898:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801289c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801289e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80128a2:	4798      	blx	r3
 80128a4:	6863      	ldr	r3, [r4, #4]
 80128a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80128b0:	4798      	blx	r3
 80128b2:	2300      	movs	r3, #0
 80128b4:	e9c4 3300 	strd	r3, r3, [r4]
 80128b8:	f04f 0901 	mov.w	r9, #1
 80128bc:	f1ba 0f00 	cmp.w	sl, #0
 80128c0:	d125      	bne.n	801290e <rcl_node_init+0x236>
 80128c2:	e001      	b.n	80128c8 <rcl_node_init+0x1f0>
 80128c4:	f04f 090b 	mov.w	r9, #11
 80128c8:	4648      	mov	r0, r9
 80128ca:	b029      	add	sp, #164	@ 0xa4
 80128cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d0:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80128d4:	e7f8      	b.n	80128c8 <rcl_node_init+0x1f0>
 80128d6:	782b      	ldrb	r3, [r5, #0]
 80128d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80128da:	f43f af42 	beq.w	8012762 <rcl_node_init+0x8a>
 80128de:	9503      	str	r5, [sp, #12]
 80128e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	4b1e      	ldr	r3, [pc, #120]	@ (8012960 <rcl_node_init+0x288>)
 80128e8:	9302      	str	r3, [sp, #8]
 80128ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80128ee:	9301      	str	r3, [sp, #4]
 80128f0:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80128f4:	f002 fab8 	bl	8014e68 <rcutils_format_string_limit>
 80128f8:	4605      	mov	r5, r0
 80128fa:	b340      	cbz	r0, 801294e <rcl_node_init+0x276>
 80128fc:	2200      	movs	r2, #0
 80128fe:	a922      	add	r1, sp, #136	@ 0x88
 8012900:	9222      	str	r2, [sp, #136]	@ 0x88
 8012902:	f002 fec9 	bl	8015698 <rmw_validate_namespace>
 8012906:	4681      	mov	r9, r0
 8012908:	2800      	cmp	r0, #0
 801290a:	f43f af34 	beq.w	8012776 <rcl_node_init+0x9e>
 801290e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012912:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012916:	4628      	mov	r0, r5
 8012918:	4798      	blx	r3
 801291a:	e7d5      	b.n	80128c8 <rcl_node_init+0x1f0>
 801291c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012920:	4648      	mov	r0, r9
 8012922:	b029      	add	sp, #164	@ 0xa4
 8012924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012928:	f04f 090a 	mov.w	r9, #10
 801292c:	f1ba 0f00 	cmp.w	sl, #0
 8012930:	d1ed      	bne.n	801290e <rcl_node_init+0x236>
 8012932:	e7c9      	b.n	80128c8 <rcl_node_init+0x1f0>
 8012934:	f002 ff20 	bl	8015778 <rmw_node_name_validation_result_string>
 8012938:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 801293c:	e7c4      	b.n	80128c8 <rcl_node_init+0x1f0>
 801293e:	f002 febd 	bl	80156bc <rmw_namespace_validation_result_string>
 8012942:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8012946:	f1ba 0f00 	cmp.w	sl, #0
 801294a:	d1e0      	bne.n	801290e <rcl_node_init+0x236>
 801294c:	e7bc      	b.n	80128c8 <rcl_node_init+0x1f0>
 801294e:	f04f 090a 	mov.w	r9, #10
 8012952:	e7b9      	b.n	80128c8 <rcl_node_init+0x1f0>
 8012954:	0801be44 	.word	0x0801be44
 8012958:	0801b7c8 	.word	0x0801b7c8
 801295c:	0801be4c 	.word	0x0801be4c
 8012960:	0801be48 	.word	0x0801be48

08012964 <rcl_node_is_valid>:
 8012964:	b130      	cbz	r0, 8012974 <rcl_node_is_valid+0x10>
 8012966:	6843      	ldr	r3, [r0, #4]
 8012968:	b123      	cbz	r3, 8012974 <rcl_node_is_valid+0x10>
 801296a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801296c:	b113      	cbz	r3, 8012974 <rcl_node_is_valid+0x10>
 801296e:	6800      	ldr	r0, [r0, #0]
 8012970:	f7ff bc1e 	b.w	80121b0 <rcl_context_is_valid>
 8012974:	2000      	movs	r0, #0
 8012976:	4770      	bx	lr

08012978 <rcl_node_get_name>:
 8012978:	b120      	cbz	r0, 8012984 <rcl_node_get_name+0xc>
 801297a:	6840      	ldr	r0, [r0, #4]
 801297c:	b110      	cbz	r0, 8012984 <rcl_node_get_name+0xc>
 801297e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012980:	b100      	cbz	r0, 8012984 <rcl_node_get_name+0xc>
 8012982:	6880      	ldr	r0, [r0, #8]
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop

08012988 <rcl_node_get_namespace>:
 8012988:	b120      	cbz	r0, 8012994 <rcl_node_get_namespace+0xc>
 801298a:	6840      	ldr	r0, [r0, #4]
 801298c:	b110      	cbz	r0, 8012994 <rcl_node_get_namespace+0xc>
 801298e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012990:	b100      	cbz	r0, 8012994 <rcl_node_get_namespace+0xc>
 8012992:	68c0      	ldr	r0, [r0, #12]
 8012994:	4770      	bx	lr
 8012996:	bf00      	nop

08012998 <rcl_node_get_options>:
 8012998:	b128      	cbz	r0, 80129a6 <rcl_node_get_options+0xe>
 801299a:	6840      	ldr	r0, [r0, #4]
 801299c:	b118      	cbz	r0, 80129a6 <rcl_node_get_options+0xe>
 801299e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	bf08      	it	eq
 80129a4:	2000      	moveq	r0, #0
 80129a6:	4770      	bx	lr

080129a8 <rcl_node_get_rmw_handle>:
 80129a8:	b110      	cbz	r0, 80129b0 <rcl_node_get_rmw_handle+0x8>
 80129aa:	6840      	ldr	r0, [r0, #4]
 80129ac:	b100      	cbz	r0, 80129b0 <rcl_node_get_rmw_handle+0x8>
 80129ae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop

080129b4 <rcl_node_get_default_options>:
 80129b4:	b510      	push	{r4, lr}
 80129b6:	2268      	movs	r2, #104	@ 0x68
 80129b8:	4604      	mov	r4, r0
 80129ba:	2100      	movs	r1, #0
 80129bc:	f007 f853 	bl	8019a66 <memset>
 80129c0:	4620      	mov	r0, r4
 80129c2:	f7f8 ff97 	bl	800b8f4 <rcutils_get_default_allocator>
 80129c6:	2301      	movs	r3, #1
 80129c8:	7523      	strb	r3, [r4, #20]
 80129ca:	4620      	mov	r0, r4
 80129cc:	bd10      	pop	{r4, pc}
 80129ce:	bf00      	nop

080129d0 <rcl_node_options_copy>:
 80129d0:	b1d0      	cbz	r0, 8012a08 <rcl_node_options_copy+0x38>
 80129d2:	b570      	push	{r4, r5, r6, lr}
 80129d4:	460c      	mov	r4, r1
 80129d6:	b1a9      	cbz	r1, 8012a04 <rcl_node_options_copy+0x34>
 80129d8:	4288      	cmp	r0, r1
 80129da:	4684      	mov	ip, r0
 80129dc:	d012      	beq.n	8012a04 <rcl_node_options_copy+0x34>
 80129de:	4605      	mov	r5, r0
 80129e0:	8a86      	ldrh	r6, [r0, #20]
 80129e2:	468e      	mov	lr, r1
 80129e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80129e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80129ea:	682b      	ldr	r3, [r5, #0]
 80129ec:	f8ce 3000 	str.w	r3, [lr]
 80129f0:	f10c 0118 	add.w	r1, ip, #24
 80129f4:	2250      	movs	r2, #80	@ 0x50
 80129f6:	82a6      	strh	r6, [r4, #20]
 80129f8:	f104 0018 	add.w	r0, r4, #24
 80129fc:	f007 f89b 	bl	8019b36 <memcpy>
 8012a00:	2000      	movs	r0, #0
 8012a02:	bd70      	pop	{r4, r5, r6, pc}
 8012a04:	200b      	movs	r0, #11
 8012a06:	bd70      	pop	{r4, r5, r6, pc}
 8012a08:	200b      	movs	r0, #11
 8012a0a:	4770      	bx	lr

08012a0c <rcl_node_resolve_name>:
 8012a0c:	b082      	sub	sp, #8
 8012a0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a12:	b091      	sub	sp, #68	@ 0x44
 8012a14:	ac1a      	add	r4, sp, #104	@ 0x68
 8012a16:	e884 000c 	stmia.w	r4, {r2, r3}
 8012a1a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	d03b      	beq.n	8012a9a <rcl_node_resolve_name+0x8e>
 8012a22:	460c      	mov	r4, r1
 8012a24:	4605      	mov	r5, r0
 8012a26:	f7ff ffb7 	bl	8012998 <rcl_node_get_options>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	d037      	beq.n	8012a9e <rcl_node_resolve_name+0x92>
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f7ff ffa2 	bl	8012978 <rcl_node_get_name>
 8012a34:	4606      	mov	r6, r0
 8012a36:	4628      	mov	r0, r5
 8012a38:	f7ff ffa6 	bl	8012988 <rcl_node_get_namespace>
 8012a3c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012a40:	4681      	mov	r9, r0
 8012a42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a46:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012a48:	46ac      	mov	ip, r5
 8012a4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a4e:	f8de 3000 	ldr.w	r3, [lr]
 8012a52:	f8cc 3000 	str.w	r3, [ip]
 8012a56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012a58:	b1fb      	cbz	r3, 8012a9a <rcl_node_resolve_name+0x8e>
 8012a5a:	468a      	mov	sl, r1
 8012a5c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012a60:	f002 fb5a 	bl	8015118 <rcutils_get_zero_initialized_string_map>
 8012a64:	ab10      	add	r3, sp, #64	@ 0x40
 8012a66:	9008      	str	r0, [sp, #32]
 8012a68:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012a6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012a70:	2100      	movs	r1, #0
 8012a72:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012a76:	a808      	add	r0, sp, #32
 8012a78:	f002 fbc6 	bl	8015208 <rcutils_string_map_init>
 8012a7c:	4607      	mov	r7, r0
 8012a7e:	b180      	cbz	r0, 8012aa2 <rcl_node_resolve_name+0x96>
 8012a80:	f7f8 ff54 	bl	800b92c <rcutils_get_error_string>
 8012a84:	f7f8 ff68 	bl	800b958 <rcutils_reset_error>
 8012a88:	2f0a      	cmp	r7, #10
 8012a8a:	bf18      	it	ne
 8012a8c:	2701      	movne	r7, #1
 8012a8e:	4638      	mov	r0, r7
 8012a90:	b011      	add	sp, #68	@ 0x44
 8012a92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a96:	b002      	add	sp, #8
 8012a98:	4770      	bx	lr
 8012a9a:	270b      	movs	r7, #11
 8012a9c:	e7f7      	b.n	8012a8e <rcl_node_resolve_name+0x82>
 8012a9e:	2701      	movs	r7, #1
 8012aa0:	e7f5      	b.n	8012a8e <rcl_node_resolve_name+0x82>
 8012aa2:	9009      	str	r0, [sp, #36]	@ 0x24
 8012aa4:	9007      	str	r0, [sp, #28]
 8012aa6:	a808      	add	r0, sp, #32
 8012aa8:	f005 ff20 	bl	80188ec <rcl_get_default_topic_name_substitutions>
 8012aac:	4607      	mov	r7, r0
 8012aae:	b1a8      	cbz	r0, 8012adc <rcl_node_resolve_name+0xd0>
 8012ab0:	280a      	cmp	r0, #10
 8012ab2:	9c07      	ldr	r4, [sp, #28]
 8012ab4:	d000      	beq.n	8012ab8 <rcl_node_resolve_name+0xac>
 8012ab6:	2701      	movs	r7, #1
 8012ab8:	a808      	add	r0, sp, #32
 8012aba:	f002 fbe5 	bl	8015288 <rcutils_string_map_fini>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d13d      	bne.n	8012b3e <rcl_node_resolve_name+0x132>
 8012ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ac4:	4659      	mov	r1, fp
 8012ac6:	47d0      	blx	sl
 8012ac8:	4659      	mov	r1, fp
 8012aca:	4620      	mov	r0, r4
 8012acc:	47d0      	blx	sl
 8012ace:	f1b8 0f00 	cmp.w	r8, #0
 8012ad2:	d0dc      	beq.n	8012a8e <rcl_node_resolve_name+0x82>
 8012ad4:	2f67      	cmp	r7, #103	@ 0x67
 8012ad6:	bf08      	it	eq
 8012ad8:	2768      	moveq	r7, #104	@ 0x68
 8012ada:	e7d8      	b.n	8012a8e <rcl_node_resolve_name+0x82>
 8012adc:	ab09      	add	r3, sp, #36	@ 0x24
 8012ade:	9305      	str	r3, [sp, #20]
 8012ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ae2:	46ec      	mov	ip, sp
 8012ae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ae8:	682b      	ldr	r3, [r5, #0]
 8012aea:	f8cc 3000 	str.w	r3, [ip]
 8012aee:	464a      	mov	r2, r9
 8012af0:	4631      	mov	r1, r6
 8012af2:	4620      	mov	r0, r4
 8012af4:	ab08      	add	r3, sp, #32
 8012af6:	f005 fd9b 	bl	8018630 <rcl_expand_topic_name>
 8012afa:	4607      	mov	r7, r0
 8012afc:	b9b8      	cbnz	r0, 8012b2e <rcl_node_resolve_name+0x122>
 8012afe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012b00:	9009      	str	r0, [sp, #36]	@ 0x24
 8012b02:	4602      	mov	r2, r0
 8012b04:	a90a      	add	r1, sp, #40	@ 0x28
 8012b06:	4620      	mov	r0, r4
 8012b08:	f002 fd02 	bl	8015510 <rmw_validate_full_topic_name>
 8012b0c:	b988      	cbnz	r0, 8012b32 <rcl_node_resolve_name+0x126>
 8012b0e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012b10:	b9d5      	cbnz	r5, 8012b48 <rcl_node_resolve_name+0x13c>
 8012b12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012b14:	a808      	add	r0, sp, #32
 8012b16:	601c      	str	r4, [r3, #0]
 8012b18:	f002 fbb6 	bl	8015288 <rcutils_string_map_fini>
 8012b1c:	4607      	mov	r7, r0
 8012b1e:	b1a8      	cbz	r0, 8012b4c <rcl_node_resolve_name+0x140>
 8012b20:	f7f8 ff04 	bl	800b92c <rcutils_get_error_string>
 8012b24:	462c      	mov	r4, r5
 8012b26:	f7f8 ff17 	bl	800b958 <rcutils_reset_error>
 8012b2a:	2701      	movs	r7, #1
 8012b2c:	e7c9      	b.n	8012ac2 <rcl_node_resolve_name+0xb6>
 8012b2e:	9c07      	ldr	r4, [sp, #28]
 8012b30:	e7c2      	b.n	8012ab8 <rcl_node_resolve_name+0xac>
 8012b32:	f7f8 fefb 	bl	800b92c <rcutils_get_error_string>
 8012b36:	2701      	movs	r7, #1
 8012b38:	f7f8 ff0e 	bl	800b958 <rcutils_reset_error>
 8012b3c:	e7bc      	b.n	8012ab8 <rcl_node_resolve_name+0xac>
 8012b3e:	f7f8 fef5 	bl	800b92c <rcutils_get_error_string>
 8012b42:	f7f8 ff09 	bl	800b958 <rcutils_reset_error>
 8012b46:	e7bc      	b.n	8012ac2 <rcl_node_resolve_name+0xb6>
 8012b48:	2767      	movs	r7, #103	@ 0x67
 8012b4a:	e7b5      	b.n	8012ab8 <rcl_node_resolve_name+0xac>
 8012b4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b4e:	4659      	mov	r1, fp
 8012b50:	47d0      	blx	sl
 8012b52:	4659      	mov	r1, fp
 8012b54:	4638      	mov	r0, r7
 8012b56:	47d0      	blx	sl
 8012b58:	e799      	b.n	8012a8e <rcl_node_resolve_name+0x82>
 8012b5a:	bf00      	nop

08012b5c <exact_match_lookup>:
 8012b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b5e:	f102 0708 	add.w	r7, r2, #8
 8012b62:	460b      	mov	r3, r1
 8012b64:	4614      	mov	r4, r2
 8012b66:	4606      	mov	r6, r0
 8012b68:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012b6c:	b085      	sub	sp, #20
 8012b6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b72:	4618      	mov	r0, r3
 8012b74:	4919      	ldr	r1, [pc, #100]	@ (8012bdc <exact_match_lookup+0x80>)
 8012b76:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012b7a:	f002 f967 	bl	8014e4c <rcutils_join_path>
 8012b7e:	7833      	ldrb	r3, [r6, #0]
 8012b80:	2b2f      	cmp	r3, #47	@ 0x2f
 8012b82:	4605      	mov	r5, r0
 8012b84:	d023      	beq.n	8012bce <exact_match_lookup+0x72>
 8012b86:	f104 030c 	add.w	r3, r4, #12
 8012b8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012b8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012b92:	1c70      	adds	r0, r6, #1
 8012b94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012b98:	f002 f95e 	bl	8014e58 <rcutils_to_native_path>
 8012b9c:	4606      	mov	r6, r0
 8012b9e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012ba2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012ba6:	4631      	mov	r1, r6
 8012ba8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012bac:	4628      	mov	r0, r5
 8012bae:	f002 f94d 	bl	8014e4c <rcutils_join_path>
 8012bb2:	6862      	ldr	r2, [r4, #4]
 8012bb4:	6921      	ldr	r1, [r4, #16]
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	4630      	mov	r0, r6
 8012bba:	461e      	mov	r6, r3
 8012bbc:	4790      	blx	r2
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	6863      	ldr	r3, [r4, #4]
 8012bc2:	6921      	ldr	r1, [r4, #16]
 8012bc4:	4798      	blx	r3
 8012bc6:	4635      	mov	r5, r6
 8012bc8:	4628      	mov	r0, r5
 8012bca:	b005      	add	sp, #20
 8012bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bce:	7873      	ldrb	r3, [r6, #1]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d1d8      	bne.n	8012b86 <exact_match_lookup+0x2a>
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	b005      	add	sp, #20
 8012bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	0801be98 	.word	0x0801be98

08012be0 <rcl_get_secure_root>:
 8012be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012be4:	b085      	sub	sp, #20
 8012be6:	b168      	cbz	r0, 8012c04 <rcl_get_secure_root+0x24>
 8012be8:	4607      	mov	r7, r0
 8012bea:	4608      	mov	r0, r1
 8012bec:	460c      	mov	r4, r1
 8012bee:	f7f8 fe8f 	bl	800b910 <rcutils_allocator_is_valid>
 8012bf2:	b138      	cbz	r0, 8012c04 <rcl_get_secure_root+0x24>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	482d      	ldr	r0, [pc, #180]	@ (8012cac <rcl_get_secure_root+0xcc>)
 8012bf8:	9303      	str	r3, [sp, #12]
 8012bfa:	a903      	add	r1, sp, #12
 8012bfc:	f002 f90c 	bl	8014e18 <rcutils_get_env>
 8012c00:	4605      	mov	r5, r0
 8012c02:	b120      	cbz	r0, 8012c0e <rcl_get_secure_root+0x2e>
 8012c04:	2500      	movs	r5, #0
 8012c06:	4628      	mov	r0, r5
 8012c08:	b005      	add	sp, #20
 8012c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c0e:	9b03      	ldr	r3, [sp, #12]
 8012c10:	781a      	ldrb	r2, [r3, #0]
 8012c12:	2a00      	cmp	r2, #0
 8012c14:	d0f6      	beq.n	8012c04 <rcl_get_secure_root+0x24>
 8012c16:	f104 090c 	add.w	r9, r4, #12
 8012c1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012c1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012c22:	4618      	mov	r0, r3
 8012c24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012c28:	f002 fa38 	bl	801509c <rcutils_strdup>
 8012c2c:	4680      	mov	r8, r0
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d0e8      	beq.n	8012c04 <rcl_get_secure_root+0x24>
 8012c32:	481f      	ldr	r0, [pc, #124]	@ (8012cb0 <rcl_get_secure_root+0xd0>)
 8012c34:	9503      	str	r5, [sp, #12]
 8012c36:	a903      	add	r1, sp, #12
 8012c38:	f002 f8ee 	bl	8014e18 <rcutils_get_env>
 8012c3c:	b160      	cbz	r0, 8012c58 <rcl_get_secure_root+0x78>
 8012c3e:	2600      	movs	r6, #0
 8012c40:	6863      	ldr	r3, [r4, #4]
 8012c42:	6921      	ldr	r1, [r4, #16]
 8012c44:	4630      	mov	r0, r6
 8012c46:	4798      	blx	r3
 8012c48:	4640      	mov	r0, r8
 8012c4a:	6863      	ldr	r3, [r4, #4]
 8012c4c:	6921      	ldr	r1, [r4, #16]
 8012c4e:	4798      	blx	r3
 8012c50:	4628      	mov	r0, r5
 8012c52:	b005      	add	sp, #20
 8012c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c58:	9b03      	ldr	r3, [sp, #12]
 8012c5a:	781e      	ldrb	r6, [r3, #0]
 8012c5c:	b1f6      	cbz	r6, 8012c9c <rcl_get_secure_root+0xbc>
 8012c5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012c62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012c66:	4618      	mov	r0, r3
 8012c68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012c6c:	f002 fa16 	bl	801509c <rcutils_strdup>
 8012c70:	4606      	mov	r6, r0
 8012c72:	2800      	cmp	r0, #0
 8012c74:	d0e3      	beq.n	8012c3e <rcl_get_secure_root+0x5e>
 8012c76:	4622      	mov	r2, r4
 8012c78:	4641      	mov	r1, r8
 8012c7a:	f7ff ff6f 	bl	8012b5c <exact_match_lookup>
 8012c7e:	4605      	mov	r5, r0
 8012c80:	2d00      	cmp	r5, #0
 8012c82:	d0dd      	beq.n	8012c40 <rcl_get_secure_root+0x60>
 8012c84:	4628      	mov	r0, r5
 8012c86:	f002 f8df 	bl	8014e48 <rcutils_is_directory>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	d1d7      	bne.n	8012c40 <rcl_get_secure_root+0x60>
 8012c90:	4628      	mov	r0, r5
 8012c92:	6921      	ldr	r1, [r4, #16]
 8012c94:	461d      	mov	r5, r3
 8012c96:	6863      	ldr	r3, [r4, #4]
 8012c98:	4798      	blx	r3
 8012c9a:	e7d1      	b.n	8012c40 <rcl_get_secure_root+0x60>
 8012c9c:	4622      	mov	r2, r4
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	4641      	mov	r1, r8
 8012ca2:	f7ff ff5b 	bl	8012b5c <exact_match_lookup>
 8012ca6:	4605      	mov	r5, r0
 8012ca8:	e7ea      	b.n	8012c80 <rcl_get_secure_root+0xa0>
 8012caa:	bf00      	nop
 8012cac:	0801bea4 	.word	0x0801bea4
 8012cb0:	0801bebc 	.word	0x0801bebc

08012cb4 <rcl_get_security_options_from_environment>:
 8012cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb8:	b082      	sub	sp, #8
 8012cba:	2300      	movs	r3, #0
 8012cbc:	4606      	mov	r6, r0
 8012cbe:	460f      	mov	r7, r1
 8012cc0:	4820      	ldr	r0, [pc, #128]	@ (8012d44 <rcl_get_security_options_from_environment+0x90>)
 8012cc2:	9301      	str	r3, [sp, #4]
 8012cc4:	a901      	add	r1, sp, #4
 8012cc6:	4690      	mov	r8, r2
 8012cc8:	f002 f8a6 	bl	8014e18 <rcutils_get_env>
 8012ccc:	b120      	cbz	r0, 8012cd8 <rcl_get_security_options_from_environment+0x24>
 8012cce:	2501      	movs	r5, #1
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	b002      	add	sp, #8
 8012cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd8:	491b      	ldr	r1, [pc, #108]	@ (8012d48 <rcl_get_security_options_from_environment+0x94>)
 8012cda:	4604      	mov	r4, r0
 8012cdc:	9801      	ldr	r0, [sp, #4]
 8012cde:	f7ed fa97 	bl	8000210 <strcmp>
 8012ce2:	4605      	mov	r5, r0
 8012ce4:	b9e8      	cbnz	r0, 8012d22 <rcl_get_security_options_from_environment+0x6e>
 8012ce6:	9001      	str	r0, [sp, #4]
 8012ce8:	f1b8 0f00 	cmp.w	r8, #0
 8012cec:	d020      	beq.n	8012d30 <rcl_get_security_options_from_environment+0x7c>
 8012cee:	4817      	ldr	r0, [pc, #92]	@ (8012d4c <rcl_get_security_options_from_environment+0x98>)
 8012cf0:	a901      	add	r1, sp, #4
 8012cf2:	f002 f891 	bl	8014e18 <rcutils_get_env>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d1e9      	bne.n	8012cce <rcl_get_security_options_from_environment+0x1a>
 8012cfa:	4915      	ldr	r1, [pc, #84]	@ (8012d50 <rcl_get_security_options_from_environment+0x9c>)
 8012cfc:	9801      	ldr	r0, [sp, #4]
 8012cfe:	f7ed fa87 	bl	8000210 <strcmp>
 8012d02:	fab0 f080 	clz	r0, r0
 8012d06:	0940      	lsrs	r0, r0, #5
 8012d08:	f888 0000 	strb.w	r0, [r8]
 8012d0c:	4639      	mov	r1, r7
 8012d0e:	4630      	mov	r0, r6
 8012d10:	f7ff ff66 	bl	8012be0 <rcl_get_secure_root>
 8012d14:	b170      	cbz	r0, 8012d34 <rcl_get_security_options_from_environment+0x80>
 8012d16:	f8c8 0004 	str.w	r0, [r8, #4]
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	b002      	add	sp, #8
 8012d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d22:	4625      	mov	r5, r4
 8012d24:	4628      	mov	r0, r5
 8012d26:	f888 4000 	strb.w	r4, [r8]
 8012d2a:	b002      	add	sp, #8
 8012d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d30:	250b      	movs	r5, #11
 8012d32:	e7cd      	b.n	8012cd0 <rcl_get_security_options_from_environment+0x1c>
 8012d34:	f898 5000 	ldrb.w	r5, [r8]
 8012d38:	f1a5 0501 	sub.w	r5, r5, #1
 8012d3c:	fab5 f585 	clz	r5, r5
 8012d40:	096d      	lsrs	r5, r5, #5
 8012d42:	e7c5      	b.n	8012cd0 <rcl_get_security_options_from_environment+0x1c>
 8012d44:	0801be5c 	.word	0x0801be5c
 8012d48:	0801be70 	.word	0x0801be70
 8012d4c:	0801be78 	.word	0x0801be78
 8012d50:	0801be90 	.word	0x0801be90

08012d54 <rcl_get_zero_initialized_service>:
 8012d54:	4b01      	ldr	r3, [pc, #4]	@ (8012d5c <rcl_get_zero_initialized_service+0x8>)
 8012d56:	6818      	ldr	r0, [r3, #0]
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop
 8012d5c:	0801bedc 	.word	0x0801bedc

08012d60 <rcl_service_init>:
 8012d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d64:	b089      	sub	sp, #36	@ 0x24
 8012d66:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8012d68:	b1c5      	cbz	r5, 8012d9c <rcl_service_init+0x3c>
 8012d6a:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8012d6e:	4604      	mov	r4, r0
 8012d70:	4648      	mov	r0, r9
 8012d72:	4688      	mov	r8, r1
 8012d74:	4617      	mov	r7, r2
 8012d76:	461e      	mov	r6, r3
 8012d78:	f7f8 fdca 	bl	800b910 <rcutils_allocator_is_valid>
 8012d7c:	b170      	cbz	r0, 8012d9c <rcl_service_init+0x3c>
 8012d7e:	b16c      	cbz	r4, 8012d9c <rcl_service_init+0x3c>
 8012d80:	4640      	mov	r0, r8
 8012d82:	f7ff fdef 	bl	8012964 <rcl_node_is_valid>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	d058      	beq.n	8012e3c <rcl_service_init+0xdc>
 8012d8a:	b13f      	cbz	r7, 8012d9c <rcl_service_init+0x3c>
 8012d8c:	b136      	cbz	r6, 8012d9c <rcl_service_init+0x3c>
 8012d8e:	6823      	ldr	r3, [r4, #0]
 8012d90:	b14b      	cbz	r3, 8012da6 <rcl_service_init+0x46>
 8012d92:	2664      	movs	r6, #100	@ 0x64
 8012d94:	4630      	mov	r0, r6
 8012d96:	b009      	add	sp, #36	@ 0x24
 8012d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d9c:	260b      	movs	r6, #11
 8012d9e:	4630      	mov	r0, r6
 8012da0:	b009      	add	sp, #36	@ 0x24
 8012da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012da6:	aa07      	add	r2, sp, #28
 8012da8:	9205      	str	r2, [sp, #20]
 8012daa:	2201      	movs	r2, #1
 8012dac:	9304      	str	r3, [sp, #16]
 8012dae:	9203      	str	r2, [sp, #12]
 8012db0:	9307      	str	r3, [sp, #28]
 8012db2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8012db6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012dba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012dbe:	4631      	mov	r1, r6
 8012dc0:	e899 000c 	ldmia.w	r9, {r2, r3}
 8012dc4:	4640      	mov	r0, r8
 8012dc6:	f7ff fe21 	bl	8012a0c <rcl_node_resolve_name>
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d145      	bne.n	8012e5a <rcl_service_init+0xfa>
 8012dce:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8012dd0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8012dd2:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8012dd6:	4798      	blx	r3
 8012dd8:	6020      	str	r0, [r4, #0]
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d043      	beq.n	8012e66 <rcl_service_init+0x106>
 8012dde:	4640      	mov	r0, r8
 8012de0:	f7ff fde2 	bl	80129a8 <rcl_node_get_rmw_handle>
 8012de4:	462b      	mov	r3, r5
 8012de6:	9a07      	ldr	r2, [sp, #28]
 8012de8:	6826      	ldr	r6, [r4, #0]
 8012dea:	4639      	mov	r1, r7
 8012dec:	f003 fa76 	bl	80162dc <rmw_create_service>
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8012df6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012dfa:	b330      	cbz	r0, 8012e4a <rcl_service_init+0xea>
 8012dfc:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8012e00:	f003 fb92 	bl	8016528 <rmw_service_request_subscription_get_actual_qos>
 8012e04:	b9f8      	cbnz	r0, 8012e46 <rcl_service_init+0xe6>
 8012e06:	6821      	ldr	r1, [r4, #0]
 8012e08:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8012e0c:	31b8      	adds	r1, #184	@ 0xb8
 8012e0e:	f003 fb7b 	bl	8016508 <rmw_service_response_publisher_get_actual_qos>
 8012e12:	4606      	mov	r6, r0
 8012e14:	b9b8      	cbnz	r0, 8012e46 <rcl_service_init+0xe6>
 8012e16:	6820      	ldr	r0, [r4, #0]
 8012e18:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8012e1c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8012e20:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8012e24:	2268      	movs	r2, #104	@ 0x68
 8012e26:	4629      	mov	r1, r5
 8012e28:	f006 fe85 	bl	8019b36 <memcpy>
 8012e2c:	9807      	ldr	r0, [sp, #28]
 8012e2e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8012e30:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8012e32:	4798      	blx	r3
 8012e34:	4630      	mov	r0, r6
 8012e36:	b009      	add	sp, #36	@ 0x24
 8012e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e3c:	26c8      	movs	r6, #200	@ 0xc8
 8012e3e:	4630      	mov	r0, r6
 8012e40:	b009      	add	sp, #36	@ 0x24
 8012e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e46:	6823      	ldr	r3, [r4, #0]
 8012e48:	b12b      	cbz	r3, 8012e56 <rcl_service_init+0xf6>
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8012e4e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8012e50:	4790      	blx	r2
 8012e52:	2300      	movs	r3, #0
 8012e54:	6023      	str	r3, [r4, #0]
 8012e56:	2601      	movs	r6, #1
 8012e58:	e7e8      	b.n	8012e2c <rcl_service_init+0xcc>
 8012e5a:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8012e5e:	2b01      	cmp	r3, #1
 8012e60:	d903      	bls.n	8012e6a <rcl_service_init+0x10a>
 8012e62:	280a      	cmp	r0, #10
 8012e64:	d1f7      	bne.n	8012e56 <rcl_service_init+0xf6>
 8012e66:	260a      	movs	r6, #10
 8012e68:	e7e0      	b.n	8012e2c <rcl_service_init+0xcc>
 8012e6a:	2668      	movs	r6, #104	@ 0x68
 8012e6c:	e7de      	b.n	8012e2c <rcl_service_init+0xcc>
 8012e6e:	bf00      	nop

08012e70 <rcl_service_get_default_options>:
 8012e70:	b530      	push	{r4, r5, lr}
 8012e72:	4d0f      	ldr	r5, [pc, #60]	@ (8012eb0 <rcl_service_get_default_options+0x40>)
 8012e74:	490f      	ldr	r1, [pc, #60]	@ (8012eb4 <rcl_service_get_default_options+0x44>)
 8012e76:	b087      	sub	sp, #28
 8012e78:	4604      	mov	r4, r0
 8012e7a:	2250      	movs	r2, #80	@ 0x50
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f006 fe5a 	bl	8019b36 <memcpy>
 8012e82:	4668      	mov	r0, sp
 8012e84:	f7f8 fd36 	bl	800b8f4 <rcutils_get_default_allocator>
 8012e88:	46ec      	mov	ip, sp
 8012e8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012e8e:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012e92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012e96:	2268      	movs	r2, #104	@ 0x68
 8012e98:	f8dc 3000 	ldr.w	r3, [ip]
 8012e9c:	f8ce 3000 	str.w	r3, [lr]
 8012ea0:	4629      	mov	r1, r5
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f006 fe47 	bl	8019b36 <memcpy>
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	b007      	add	sp, #28
 8012eac:	bd30      	pop	{r4, r5, pc}
 8012eae:	bf00      	nop
 8012eb0:	200156d8 	.word	0x200156d8
 8012eb4:	0801bee0 	.word	0x0801bee0

08012eb8 <rcl_service_get_rmw_handle>:
 8012eb8:	b118      	cbz	r0, 8012ec2 <rcl_service_get_rmw_handle+0xa>
 8012eba:	6800      	ldr	r0, [r0, #0]
 8012ebc:	b108      	cbz	r0, 8012ec2 <rcl_service_get_rmw_handle+0xa>
 8012ebe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012ec2:	4770      	bx	lr

08012ec4 <rcl_take_request>:
 8012ec4:	b570      	push	{r4, r5, r6, lr}
 8012ec6:	468e      	mov	lr, r1
 8012ec8:	460c      	mov	r4, r1
 8012eca:	4616      	mov	r6, r2
 8012ecc:	4605      	mov	r5, r0
 8012ece:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ed2:	b08c      	sub	sp, #48	@ 0x30
 8012ed4:	f10d 0c18 	add.w	ip, sp, #24
 8012ed8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012edc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012ee0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012ee4:	b30d      	cbz	r5, 8012f2a <rcl_take_request+0x66>
 8012ee6:	682b      	ldr	r3, [r5, #0]
 8012ee8:	b1fb      	cbz	r3, 8012f2a <rcl_take_request+0x66>
 8012eea:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012eee:	b1e0      	cbz	r0, 8012f2a <rcl_take_request+0x66>
 8012ef0:	b336      	cbz	r6, 8012f40 <rcl_take_request+0x7c>
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	f88d 3007 	strb.w	r3, [sp, #7]
 8012ef8:	4632      	mov	r2, r6
 8012efa:	f10d 0307 	add.w	r3, sp, #7
 8012efe:	a902      	add	r1, sp, #8
 8012f00:	f003 f8e8 	bl	80160d4 <rmw_take_request>
 8012f04:	4605      	mov	r5, r0
 8012f06:	b198      	cbz	r0, 8012f30 <rcl_take_request+0x6c>
 8012f08:	280a      	cmp	r0, #10
 8012f0a:	bf18      	it	ne
 8012f0c:	2501      	movne	r5, #1
 8012f0e:	f10d 0e18 	add.w	lr, sp, #24
 8012f12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f16:	46a4      	mov	ip, r4
 8012f18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012f20:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012f24:	4628      	mov	r0, r5
 8012f26:	b00c      	add	sp, #48	@ 0x30
 8012f28:	bd70      	pop	{r4, r5, r6, pc}
 8012f2a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012f2e:	e7ee      	b.n	8012f0e <rcl_take_request+0x4a>
 8012f30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012f34:	f240 2359 	movw	r3, #601	@ 0x259
 8012f38:	2a00      	cmp	r2, #0
 8012f3a:	bf08      	it	eq
 8012f3c:	461d      	moveq	r5, r3
 8012f3e:	e7e6      	b.n	8012f0e <rcl_take_request+0x4a>
 8012f40:	250b      	movs	r5, #11
 8012f42:	e7e4      	b.n	8012f0e <rcl_take_request+0x4a>

08012f44 <rcl_send_response>:
 8012f44:	b170      	cbz	r0, 8012f64 <rcl_send_response+0x20>
 8012f46:	6800      	ldr	r0, [r0, #0]
 8012f48:	b160      	cbz	r0, 8012f64 <rcl_send_response+0x20>
 8012f4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012f4e:	b148      	cbz	r0, 8012f64 <rcl_send_response+0x20>
 8012f50:	b159      	cbz	r1, 8012f6a <rcl_send_response+0x26>
 8012f52:	b510      	push	{r4, lr}
 8012f54:	b15a      	cbz	r2, 8012f6e <rcl_send_response+0x2a>
 8012f56:	f003 f91b 	bl	8016190 <rmw_send_response>
 8012f5a:	b110      	cbz	r0, 8012f62 <rcl_send_response+0x1e>
 8012f5c:	2802      	cmp	r0, #2
 8012f5e:	bf18      	it	ne
 8012f60:	2001      	movne	r0, #1
 8012f62:	bd10      	pop	{r4, pc}
 8012f64:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012f68:	4770      	bx	lr
 8012f6a:	200b      	movs	r0, #11
 8012f6c:	4770      	bx	lr
 8012f6e:	200b      	movs	r0, #11
 8012f70:	bd10      	pop	{r4, pc}
 8012f72:	bf00      	nop

08012f74 <rcl_service_is_valid>:
 8012f74:	b130      	cbz	r0, 8012f84 <rcl_service_is_valid+0x10>
 8012f76:	6800      	ldr	r0, [r0, #0]
 8012f78:	b120      	cbz	r0, 8012f84 <rcl_service_is_valid+0x10>
 8012f7a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012f7e:	3800      	subs	r0, #0
 8012f80:	bf18      	it	ne
 8012f82:	2001      	movne	r0, #1
 8012f84:	4770      	bx	lr
 8012f86:	bf00      	nop

08012f88 <rcl_get_zero_initialized_subscription>:
 8012f88:	4b01      	ldr	r3, [pc, #4]	@ (8012f90 <rcl_get_zero_initialized_subscription+0x8>)
 8012f8a:	6818      	ldr	r0, [r3, #0]
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop
 8012f90:	0801bf30 	.word	0x0801bf30

08012f94 <rcl_subscription_init>:
 8012f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f98:	b089      	sub	sp, #36	@ 0x24
 8012f9a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012f9c:	b1d6      	cbz	r6, 8012fd4 <rcl_subscription_init+0x40>
 8012f9e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	4648      	mov	r0, r9
 8012fa6:	460d      	mov	r5, r1
 8012fa8:	4690      	mov	r8, r2
 8012faa:	461f      	mov	r7, r3
 8012fac:	f7f8 fcb0 	bl	800b910 <rcutils_allocator_is_valid>
 8012fb0:	b180      	cbz	r0, 8012fd4 <rcl_subscription_init+0x40>
 8012fb2:	b17c      	cbz	r4, 8012fd4 <rcl_subscription_init+0x40>
 8012fb4:	4628      	mov	r0, r5
 8012fb6:	f7ff fcd5 	bl	8012964 <rcl_node_is_valid>
 8012fba:	2800      	cmp	r0, #0
 8012fbc:	d054      	beq.n	8013068 <rcl_subscription_init+0xd4>
 8012fbe:	f1b8 0f00 	cmp.w	r8, #0
 8012fc2:	d007      	beq.n	8012fd4 <rcl_subscription_init+0x40>
 8012fc4:	b137      	cbz	r7, 8012fd4 <rcl_subscription_init+0x40>
 8012fc6:	6823      	ldr	r3, [r4, #0]
 8012fc8:	b14b      	cbz	r3, 8012fde <rcl_subscription_init+0x4a>
 8012fca:	2764      	movs	r7, #100	@ 0x64
 8012fcc:	4638      	mov	r0, r7
 8012fce:	b009      	add	sp, #36	@ 0x24
 8012fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fd4:	270b      	movs	r7, #11
 8012fd6:	4638      	mov	r0, r7
 8012fd8:	b009      	add	sp, #36	@ 0x24
 8012fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fde:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012fe2:	aa07      	add	r2, sp, #28
 8012fe4:	9205      	str	r2, [sp, #20]
 8012fe6:	9307      	str	r3, [sp, #28]
 8012fe8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8012fec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ff0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012ff4:	4639      	mov	r1, r7
 8012ff6:	e899 000c 	ldmia.w	r9, {r2, r3}
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	f7ff fd06 	bl	8012a0c <rcl_node_resolve_name>
 8013000:	4607      	mov	r7, r0
 8013002:	2800      	cmp	r0, #0
 8013004:	d15f      	bne.n	80130c6 <rcl_subscription_init+0x132>
 8013006:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801300a:	21c8      	movs	r1, #200	@ 0xc8
 801300c:	2001      	movs	r0, #1
 801300e:	4798      	blx	r3
 8013010:	6020      	str	r0, [r4, #0]
 8013012:	2800      	cmp	r0, #0
 8013014:	d05d      	beq.n	80130d2 <rcl_subscription_init+0x13e>
 8013016:	4628      	mov	r0, r5
 8013018:	f7ff fcc6 	bl	80129a8 <rcl_node_get_rmw_handle>
 801301c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8013020:	9300      	str	r3, [sp, #0]
 8013022:	9a07      	ldr	r2, [sp, #28]
 8013024:	6827      	ldr	r7, [r4, #0]
 8013026:	4641      	mov	r1, r8
 8013028:	4633      	mov	r3, r6
 801302a:	f003 fa8d 	bl	8016548 <rmw_create_subscription>
 801302e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8013032:	6827      	ldr	r7, [r4, #0]
 8013034:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8013038:	b348      	cbz	r0, 801308e <rcl_subscription_init+0xfa>
 801303a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801303e:	f003 fb65 	bl	801670c <rmw_subscription_get_actual_qos>
 8013042:	4607      	mov	r7, r0
 8013044:	b9a8      	cbnz	r0, 8013072 <rcl_subscription_init+0xde>
 8013046:	6820      	ldr	r0, [r4, #0]
 8013048:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 801304c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8013050:	2270      	movs	r2, #112	@ 0x70
 8013052:	4631      	mov	r1, r6
 8013054:	f006 fd6f 	bl	8019b36 <memcpy>
 8013058:	9807      	ldr	r0, [sp, #28]
 801305a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801305c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801305e:	4798      	blx	r3
 8013060:	4638      	mov	r0, r7
 8013062:	b009      	add	sp, #36	@ 0x24
 8013064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013068:	27c8      	movs	r7, #200	@ 0xc8
 801306a:	4638      	mov	r0, r7
 801306c:	b009      	add	sp, #36	@ 0x24
 801306e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013072:	6827      	ldr	r7, [r4, #0]
 8013074:	b32f      	cbz	r7, 80130c2 <rcl_subscription_init+0x12e>
 8013076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801307a:	b14b      	cbz	r3, 8013090 <rcl_subscription_init+0xfc>
 801307c:	4628      	mov	r0, r5
 801307e:	f7ff fc93 	bl	80129a8 <rcl_node_get_rmw_handle>
 8013082:	6823      	ldr	r3, [r4, #0]
 8013084:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8013088:	f003 fb50 	bl	801672c <rmw_destroy_subscription>
 801308c:	6827      	ldr	r7, [r4, #0]
 801308e:	b197      	cbz	r7, 80130b6 <rcl_subscription_init+0x122>
 8013090:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8013094:	4628      	mov	r0, r5
 8013096:	f7f8 fc3b 	bl	800b910 <rcutils_allocator_is_valid>
 801309a:	b158      	cbz	r0, 80130b4 <rcl_subscription_init+0x120>
 801309c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801309e:	b148      	cbz	r0, 80130b4 <rcl_subscription_init+0x120>
 80130a0:	4629      	mov	r1, r5
 80130a2:	f002 f989 	bl	80153b8 <rmw_subscription_content_filter_options_fini>
 80130a6:	4605      	mov	r5, r0
 80130a8:	b9b8      	cbnz	r0, 80130da <rcl_subscription_init+0x146>
 80130aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80130ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80130b0:	4798      	blx	r3
 80130b2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80130b4:	6827      	ldr	r7, [r4, #0]
 80130b6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80130b8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80130ba:	4638      	mov	r0, r7
 80130bc:	4798      	blx	r3
 80130be:	2300      	movs	r3, #0
 80130c0:	6023      	str	r3, [r4, #0]
 80130c2:	2701      	movs	r7, #1
 80130c4:	e7c8      	b.n	8013058 <rcl_subscription_init+0xc4>
 80130c6:	2867      	cmp	r0, #103	@ 0x67
 80130c8:	d0c6      	beq.n	8013058 <rcl_subscription_init+0xc4>
 80130ca:	2869      	cmp	r0, #105	@ 0x69
 80130cc:	d003      	beq.n	80130d6 <rcl_subscription_init+0x142>
 80130ce:	280a      	cmp	r0, #10
 80130d0:	d1f7      	bne.n	80130c2 <rcl_subscription_init+0x12e>
 80130d2:	270a      	movs	r7, #10
 80130d4:	e7c0      	b.n	8013058 <rcl_subscription_init+0xc4>
 80130d6:	2767      	movs	r7, #103	@ 0x67
 80130d8:	e7be      	b.n	8013058 <rcl_subscription_init+0xc4>
 80130da:	f7ff f84b 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 80130de:	6827      	ldr	r7, [r4, #0]
 80130e0:	e7e9      	b.n	80130b6 <rcl_subscription_init+0x122>
 80130e2:	bf00      	nop

080130e4 <rcl_subscription_get_default_options>:
 80130e4:	b570      	push	{r4, r5, r6, lr}
 80130e6:	4d14      	ldr	r5, [pc, #80]	@ (8013138 <rcl_subscription_get_default_options+0x54>)
 80130e8:	4914      	ldr	r1, [pc, #80]	@ (801313c <rcl_subscription_get_default_options+0x58>)
 80130ea:	b08a      	sub	sp, #40	@ 0x28
 80130ec:	4604      	mov	r4, r0
 80130ee:	2250      	movs	r2, #80	@ 0x50
 80130f0:	4628      	mov	r0, r5
 80130f2:	f006 fd20 	bl	8019b36 <memcpy>
 80130f6:	a804      	add	r0, sp, #16
 80130f8:	f7f8 fbfc 	bl	800b8f4 <rcutils_get_default_allocator>
 80130fc:	f10d 0c10 	add.w	ip, sp, #16
 8013100:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013104:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8013108:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801310c:	466e      	mov	r6, sp
 801310e:	f8dc 3000 	ldr.w	r3, [ip]
 8013112:	f8ce 3000 	str.w	r3, [lr]
 8013116:	4630      	mov	r0, r6
 8013118:	f002 f968 	bl	80153ec <rmw_get_default_subscription_options>
 801311c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013120:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8013124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013128:	2270      	movs	r2, #112	@ 0x70
 801312a:	4629      	mov	r1, r5
 801312c:	4620      	mov	r0, r4
 801312e:	f006 fd02 	bl	8019b36 <memcpy>
 8013132:	4620      	mov	r0, r4
 8013134:	b00a      	add	sp, #40	@ 0x28
 8013136:	bd70      	pop	{r4, r5, r6, pc}
 8013138:	20015740 	.word	0x20015740
 801313c:	0801bf38 	.word	0x0801bf38

08013140 <rcl_take>:
 8013140:	2800      	cmp	r0, #0
 8013142:	d04a      	beq.n	80131da <rcl_take+0x9a>
 8013144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013148:	4604      	mov	r4, r0
 801314a:	6800      	ldr	r0, [r0, #0]
 801314c:	b0a4      	sub	sp, #144	@ 0x90
 801314e:	2800      	cmp	r0, #0
 8013150:	d03b      	beq.n	80131ca <rcl_take+0x8a>
 8013152:	461f      	mov	r7, r3
 8013154:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8013158:	2b00      	cmp	r3, #0
 801315a:	d036      	beq.n	80131ca <rcl_take+0x8a>
 801315c:	460e      	mov	r6, r1
 801315e:	2900      	cmp	r1, #0
 8013160:	d039      	beq.n	80131d6 <rcl_take+0x96>
 8013162:	4615      	mov	r5, r2
 8013164:	2a00      	cmp	r2, #0
 8013166:	d03c      	beq.n	80131e2 <rcl_take+0xa2>
 8013168:	a802      	add	r0, sp, #8
 801316a:	f002 f9c9 	bl	8015500 <rmw_get_zero_initialized_message_info>
 801316e:	f10d 0c08 	add.w	ip, sp, #8
 8013172:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013176:	46ae      	mov	lr, r5
 8013178:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801317c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013180:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013184:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013188:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801318c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8013190:	f04f 0800 	mov.w	r8, #0
 8013194:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8013198:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801319c:	6822      	ldr	r2, [r4, #0]
 801319e:	462b      	mov	r3, r5
 80131a0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80131a4:	9700      	str	r7, [sp, #0]
 80131a6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80131aa:	4631      	mov	r1, r6
 80131ac:	f003 fb1e 	bl	80167ec <rmw_take_with_info>
 80131b0:	4603      	mov	r3, r0
 80131b2:	b9c0      	cbnz	r0, 80131e6 <rcl_take+0xa6>
 80131b4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80131b8:	f240 1291 	movw	r2, #401	@ 0x191
 80131bc:	2900      	cmp	r1, #0
 80131be:	bf08      	it	eq
 80131c0:	4613      	moveq	r3, r2
 80131c2:	4618      	mov	r0, r3
 80131c4:	b024      	add	sp, #144	@ 0x90
 80131c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80131ce:	4618      	mov	r0, r3
 80131d0:	b024      	add	sp, #144	@ 0x90
 80131d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d6:	230b      	movs	r3, #11
 80131d8:	e7f3      	b.n	80131c2 <rcl_take+0x82>
 80131da:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80131de:	4618      	mov	r0, r3
 80131e0:	4770      	bx	lr
 80131e2:	ad14      	add	r5, sp, #80	@ 0x50
 80131e4:	e7c0      	b.n	8013168 <rcl_take+0x28>
 80131e6:	f7fe ffc5 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 80131ea:	4603      	mov	r3, r0
 80131ec:	e7e9      	b.n	80131c2 <rcl_take+0x82>
 80131ee:	bf00      	nop

080131f0 <rcl_subscription_get_rmw_handle>:
 80131f0:	b118      	cbz	r0, 80131fa <rcl_subscription_get_rmw_handle+0xa>
 80131f2:	6800      	ldr	r0, [r0, #0]
 80131f4:	b108      	cbz	r0, 80131fa <rcl_subscription_get_rmw_handle+0xa>
 80131f6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80131fa:	4770      	bx	lr

080131fc <rcl_subscription_is_valid>:
 80131fc:	b130      	cbz	r0, 801320c <rcl_subscription_is_valid+0x10>
 80131fe:	6800      	ldr	r0, [r0, #0]
 8013200:	b120      	cbz	r0, 801320c <rcl_subscription_is_valid+0x10>
 8013202:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8013206:	3800      	subs	r0, #0
 8013208:	bf18      	it	ne
 801320a:	2001      	movne	r0, #1
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop

08013210 <rcl_get_system_time>:
 8013210:	4608      	mov	r0, r1
 8013212:	f7f8 bbbd 	b.w	800b990 <rcutils_system_time_now>
 8013216:	bf00      	nop

08013218 <rcl_get_steady_time>:
 8013218:	4608      	mov	r0, r1
 801321a:	f7f8 bbe1 	b.w	800b9e0 <rcutils_steady_time_now>
 801321e:	bf00      	nop

08013220 <rcl_get_ros_time>:
 8013220:	7a03      	ldrb	r3, [r0, #8]
 8013222:	b510      	push	{r4, lr}
 8013224:	460c      	mov	r4, r1
 8013226:	b133      	cbz	r3, 8013236 <rcl_get_ros_time+0x16>
 8013228:	2105      	movs	r1, #5
 801322a:	f001 fd51 	bl	8014cd0 <__atomic_load_8>
 801322e:	e9c4 0100 	strd	r0, r1, [r4]
 8013232:	2000      	movs	r0, #0
 8013234:	bd10      	pop	{r4, pc}
 8013236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801323a:	4608      	mov	r0, r1
 801323c:	f7f8 bba8 	b.w	800b990 <rcutils_system_time_now>

08013240 <rcl_clock_init>:
 8013240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013242:	4605      	mov	r5, r0
 8013244:	4610      	mov	r0, r2
 8013246:	4614      	mov	r4, r2
 8013248:	460e      	mov	r6, r1
 801324a:	f7f8 fb61 	bl	800b910 <rcutils_allocator_is_valid>
 801324e:	b128      	cbz	r0, 801325c <rcl_clock_init+0x1c>
 8013250:	2d03      	cmp	r5, #3
 8013252:	d803      	bhi.n	801325c <rcl_clock_init+0x1c>
 8013254:	e8df f005 	tbb	[pc, r5]
 8013258:	06532e1d 	.word	0x06532e1d
 801325c:	f04f 0c0b 	mov.w	ip, #11
 8013260:	4660      	mov	r0, ip
 8013262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013264:	2e00      	cmp	r6, #0
 8013266:	d0f9      	beq.n	801325c <rcl_clock_init+0x1c>
 8013268:	2c00      	cmp	r4, #0
 801326a:	d0f7      	beq.n	801325c <rcl_clock_init+0x1c>
 801326c:	2300      	movs	r3, #0
 801326e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8013272:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8013328 <rcl_clock_init+0xe8>
 8013276:	6133      	str	r3, [r6, #16]
 8013278:	f106 0514 	add.w	r5, r6, #20
 801327c:	469c      	mov	ip, r3
 801327e:	2703      	movs	r7, #3
 8013280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013284:	6823      	ldr	r3, [r4, #0]
 8013286:	602b      	str	r3, [r5, #0]
 8013288:	7037      	strb	r7, [r6, #0]
 801328a:	f8c6 e00c 	str.w	lr, [r6, #12]
 801328e:	4660      	mov	r0, ip
 8013290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013292:	2e00      	cmp	r6, #0
 8013294:	d0e2      	beq.n	801325c <rcl_clock_init+0x1c>
 8013296:	2300      	movs	r3, #0
 8013298:	7033      	strb	r3, [r6, #0]
 801329a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801329e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80132a2:	469c      	mov	ip, r3
 80132a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80132a6:	f106 0514 	add.w	r5, r6, #20
 80132aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132ac:	6823      	ldr	r3, [r4, #0]
 80132ae:	602b      	str	r3, [r5, #0]
 80132b0:	4660      	mov	r0, ip
 80132b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b4:	2e00      	cmp	r6, #0
 80132b6:	d0d1      	beq.n	801325c <rcl_clock_init+0x1c>
 80132b8:	2c00      	cmp	r4, #0
 80132ba:	d0cf      	beq.n	801325c <rcl_clock_init+0x1c>
 80132bc:	2700      	movs	r7, #0
 80132be:	7037      	strb	r7, [r6, #0]
 80132c0:	46a4      	mov	ip, r4
 80132c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80132c6:	f106 0514 	add.w	r5, r6, #20
 80132ca:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80132ce:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80132d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80132d4:	f8dc 3000 	ldr.w	r3, [ip]
 80132d8:	602b      	str	r3, [r5, #0]
 80132da:	6921      	ldr	r1, [r4, #16]
 80132dc:	6823      	ldr	r3, [r4, #0]
 80132de:	2010      	movs	r0, #16
 80132e0:	4798      	blx	r3
 80132e2:	6130      	str	r0, [r6, #16]
 80132e4:	b1d0      	cbz	r0, 801331c <rcl_clock_init+0xdc>
 80132e6:	2200      	movs	r2, #0
 80132e8:	2300      	movs	r3, #0
 80132ea:	e9c0 2300 	strd	r2, r3, [r0]
 80132ee:	2301      	movs	r3, #1
 80132f0:	7207      	strb	r7, [r0, #8]
 80132f2:	4a0c      	ldr	r2, [pc, #48]	@ (8013324 <rcl_clock_init+0xe4>)
 80132f4:	7033      	strb	r3, [r6, #0]
 80132f6:	46bc      	mov	ip, r7
 80132f8:	60f2      	str	r2, [r6, #12]
 80132fa:	4660      	mov	r0, ip
 80132fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132fe:	2e00      	cmp	r6, #0
 8013300:	d0ac      	beq.n	801325c <rcl_clock_init+0x1c>
 8013302:	2c00      	cmp	r4, #0
 8013304:	d0aa      	beq.n	801325c <rcl_clock_init+0x1c>
 8013306:	2300      	movs	r3, #0
 8013308:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801330c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 801332c <rcl_clock_init+0xec>
 8013310:	6133      	str	r3, [r6, #16]
 8013312:	f106 0514 	add.w	r5, r6, #20
 8013316:	469c      	mov	ip, r3
 8013318:	2702      	movs	r7, #2
 801331a:	e7b1      	b.n	8013280 <rcl_clock_init+0x40>
 801331c:	f04f 0c0a 	mov.w	ip, #10
 8013320:	e79e      	b.n	8013260 <rcl_clock_init+0x20>
 8013322:	bf00      	nop
 8013324:	08013221 	.word	0x08013221
 8013328:	08013219 	.word	0x08013219
 801332c:	08013211 	.word	0x08013211

08013330 <rcl_clock_get_now>:
 8013330:	b140      	cbz	r0, 8013344 <rcl_clock_get_now+0x14>
 8013332:	b139      	cbz	r1, 8013344 <rcl_clock_get_now+0x14>
 8013334:	7803      	ldrb	r3, [r0, #0]
 8013336:	b11b      	cbz	r3, 8013340 <rcl_clock_get_now+0x10>
 8013338:	68c3      	ldr	r3, [r0, #12]
 801333a:	b10b      	cbz	r3, 8013340 <rcl_clock_get_now+0x10>
 801333c:	6900      	ldr	r0, [r0, #16]
 801333e:	4718      	bx	r3
 8013340:	2001      	movs	r0, #1
 8013342:	4770      	bx	lr
 8013344:	200b      	movs	r0, #11
 8013346:	4770      	bx	lr

08013348 <rcl_timer_call>:
 8013348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334c:	b087      	sub	sp, #28
 801334e:	2800      	cmp	r0, #0
 8013350:	d06d      	beq.n	801342e <rcl_timer_call+0xe6>
 8013352:	6803      	ldr	r3, [r0, #0]
 8013354:	4604      	mov	r4, r0
 8013356:	2b00      	cmp	r3, #0
 8013358:	d063      	beq.n	8013422 <rcl_timer_call+0xda>
 801335a:	f3bf 8f5b 	dmb	ish
 801335e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013362:	f3bf 8f5b 	dmb	ish
 8013366:	2b00      	cmp	r3, #0
 8013368:	d150      	bne.n	801340c <rcl_timer_call+0xc4>
 801336a:	6803      	ldr	r3, [r0, #0]
 801336c:	a904      	add	r1, sp, #16
 801336e:	6818      	ldr	r0, [r3, #0]
 8013370:	f7ff ffde 	bl	8013330 <rcl_clock_get_now>
 8013374:	4605      	mov	r5, r0
 8013376:	2800      	cmp	r0, #0
 8013378:	d14a      	bne.n	8013410 <rcl_timer_call+0xc8>
 801337a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801337e:	2b00      	cmp	r3, #0
 8013380:	db4a      	blt.n	8013418 <rcl_timer_call+0xd0>
 8013382:	6820      	ldr	r0, [r4, #0]
 8013384:	f04f 0a05 	mov.w	sl, #5
 8013388:	f8cd a000 	str.w	sl, [sp]
 801338c:	3020      	adds	r0, #32
 801338e:	f001 fd0b 	bl	8014da8 <__atomic_exchange_8>
 8013392:	6823      	ldr	r3, [r4, #0]
 8013394:	f3bf 8f5b 	dmb	ish
 8013398:	4680      	mov	r8, r0
 801339a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801339e:	f3bf 8f5b 	dmb	ish
 80133a2:	6820      	ldr	r0, [r4, #0]
 80133a4:	4689      	mov	r9, r1
 80133a6:	3028      	adds	r0, #40	@ 0x28
 80133a8:	4651      	mov	r1, sl
 80133aa:	f001 fc91 	bl	8014cd0 <__atomic_load_8>
 80133ae:	4606      	mov	r6, r0
 80133b0:	6820      	ldr	r0, [r4, #0]
 80133b2:	460f      	mov	r7, r1
 80133b4:	3018      	adds	r0, #24
 80133b6:	4651      	mov	r1, sl
 80133b8:	f001 fc8a 	bl	8014cd0 <__atomic_load_8>
 80133bc:	1836      	adds	r6, r6, r0
 80133be:	4602      	mov	r2, r0
 80133c0:	4682      	mov	sl, r0
 80133c2:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80133c6:	eb47 0701 	adc.w	r7, r7, r1
 80133ca:	4286      	cmp	r6, r0
 80133cc:	460b      	mov	r3, r1
 80133ce:	eb77 010c 	sbcs.w	r1, r7, ip
 80133d2:	da04      	bge.n	80133de <rcl_timer_call+0x96>
 80133d4:	ea53 0102 	orrs.w	r1, r3, r2
 80133d8:	d12e      	bne.n	8013438 <rcl_timer_call+0xf0>
 80133da:	4606      	mov	r6, r0
 80133dc:	4667      	mov	r7, ip
 80133de:	6820      	ldr	r0, [r4, #0]
 80133e0:	2105      	movs	r1, #5
 80133e2:	4632      	mov	r2, r6
 80133e4:	463b      	mov	r3, r7
 80133e6:	3028      	adds	r0, #40	@ 0x28
 80133e8:	9100      	str	r1, [sp, #0]
 80133ea:	f001 fca7 	bl	8014d3c <__atomic_store_8>
 80133ee:	f1bb 0f00 	cmp.w	fp, #0
 80133f2:	d00d      	beq.n	8013410 <rcl_timer_call+0xc8>
 80133f4:	9a04      	ldr	r2, [sp, #16]
 80133f6:	9b05      	ldr	r3, [sp, #20]
 80133f8:	ebb2 0208 	subs.w	r2, r2, r8
 80133fc:	4620      	mov	r0, r4
 80133fe:	eb63 0309 	sbc.w	r3, r3, r9
 8013402:	47d8      	blx	fp
 8013404:	4628      	mov	r0, r5
 8013406:	b007      	add	sp, #28
 8013408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801340c:	f240 3521 	movw	r5, #801	@ 0x321
 8013410:	4628      	mov	r0, r5
 8013412:	b007      	add	sp, #28
 8013414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013418:	2501      	movs	r5, #1
 801341a:	4628      	mov	r0, r5
 801341c:	b007      	add	sp, #28
 801341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013422:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013426:	4628      	mov	r0, r5
 8013428:	b007      	add	sp, #28
 801342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801342e:	250b      	movs	r5, #11
 8013430:	4628      	mov	r0, r5
 8013432:	b007      	add	sp, #28
 8013434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013438:	1b80      	subs	r0, r0, r6
 801343a:	eb6c 0107 	sbc.w	r1, ip, r7
 801343e:	3801      	subs	r0, #1
 8013440:	f161 0100 	sbc.w	r1, r1, #0
 8013444:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013448:	f7ed fbe8 	bl	8000c1c <__aeabi_ldivmod>
 801344c:	9b02      	ldr	r3, [sp, #8]
 801344e:	3001      	adds	r0, #1
 8013450:	f141 0100 	adc.w	r1, r1, #0
 8013454:	fb00 f303 	mul.w	r3, r0, r3
 8013458:	fb01 330a 	mla	r3, r1, sl, r3
 801345c:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013460:	1986      	adds	r6, r0, r6
 8013462:	4453      	add	r3, sl
 8013464:	eb43 0707 	adc.w	r7, r3, r7
 8013468:	e7b9      	b.n	80133de <rcl_timer_call+0x96>
 801346a:	bf00      	nop

0801346c <rcl_timer_is_ready>:
 801346c:	b570      	push	{r4, r5, r6, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	b378      	cbz	r0, 80134d2 <rcl_timer_is_ready+0x66>
 8013472:	6803      	ldr	r3, [r0, #0]
 8013474:	4604      	mov	r4, r0
 8013476:	b383      	cbz	r3, 80134da <rcl_timer_is_ready+0x6e>
 8013478:	460d      	mov	r5, r1
 801347a:	b351      	cbz	r1, 80134d2 <rcl_timer_is_ready+0x66>
 801347c:	f3bf 8f5b 	dmb	ish
 8013480:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013484:	f3bf 8f5b 	dmb	ish
 8013488:	b953      	cbnz	r3, 80134a0 <rcl_timer_is_ready+0x34>
 801348a:	6803      	ldr	r3, [r0, #0]
 801348c:	4669      	mov	r1, sp
 801348e:	6818      	ldr	r0, [r3, #0]
 8013490:	f7ff ff4e 	bl	8013330 <rcl_clock_get_now>
 8013494:	4606      	mov	r6, r0
 8013496:	b140      	cbz	r0, 80134aa <rcl_timer_is_ready+0x3e>
 8013498:	f240 3321 	movw	r3, #801	@ 0x321
 801349c:	4298      	cmp	r0, r3
 801349e:	d101      	bne.n	80134a4 <rcl_timer_is_ready+0x38>
 80134a0:	2600      	movs	r6, #0
 80134a2:	702e      	strb	r6, [r5, #0]
 80134a4:	4630      	mov	r0, r6
 80134a6:	b002      	add	sp, #8
 80134a8:	bd70      	pop	{r4, r5, r6, pc}
 80134aa:	6820      	ldr	r0, [r4, #0]
 80134ac:	2105      	movs	r1, #5
 80134ae:	3028      	adds	r0, #40	@ 0x28
 80134b0:	f001 fc0e 	bl	8014cd0 <__atomic_load_8>
 80134b4:	9b00      	ldr	r3, [sp, #0]
 80134b6:	1ac0      	subs	r0, r0, r3
 80134b8:	9b01      	ldr	r3, [sp, #4]
 80134ba:	eb61 0103 	sbc.w	r1, r1, r3
 80134be:	2801      	cmp	r0, #1
 80134c0:	f171 0300 	sbcs.w	r3, r1, #0
 80134c4:	bfb4      	ite	lt
 80134c6:	2301      	movlt	r3, #1
 80134c8:	2300      	movge	r3, #0
 80134ca:	4630      	mov	r0, r6
 80134cc:	702b      	strb	r3, [r5, #0]
 80134ce:	b002      	add	sp, #8
 80134d0:	bd70      	pop	{r4, r5, r6, pc}
 80134d2:	260b      	movs	r6, #11
 80134d4:	4630      	mov	r0, r6
 80134d6:	b002      	add	sp, #8
 80134d8:	bd70      	pop	{r4, r5, r6, pc}
 80134da:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80134de:	e7e1      	b.n	80134a4 <rcl_timer_is_ready+0x38>

080134e0 <rcl_timer_get_time_until_next_call>:
 80134e0:	b570      	push	{r4, r5, r6, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	b330      	cbz	r0, 8013534 <rcl_timer_get_time_until_next_call+0x54>
 80134e6:	6803      	ldr	r3, [r0, #0]
 80134e8:	4604      	mov	r4, r0
 80134ea:	b33b      	cbz	r3, 801353c <rcl_timer_get_time_until_next_call+0x5c>
 80134ec:	460d      	mov	r5, r1
 80134ee:	b309      	cbz	r1, 8013534 <rcl_timer_get_time_until_next_call+0x54>
 80134f0:	f3bf 8f5b 	dmb	ish
 80134f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80134f8:	f3bf 8f5b 	dmb	ish
 80134fc:	b9ab      	cbnz	r3, 801352a <rcl_timer_get_time_until_next_call+0x4a>
 80134fe:	6803      	ldr	r3, [r0, #0]
 8013500:	4669      	mov	r1, sp
 8013502:	6818      	ldr	r0, [r3, #0]
 8013504:	f7ff ff14 	bl	8013330 <rcl_clock_get_now>
 8013508:	4606      	mov	r6, r0
 801350a:	b958      	cbnz	r0, 8013524 <rcl_timer_get_time_until_next_call+0x44>
 801350c:	6820      	ldr	r0, [r4, #0]
 801350e:	2105      	movs	r1, #5
 8013510:	3028      	adds	r0, #40	@ 0x28
 8013512:	f001 fbdd 	bl	8014cd0 <__atomic_load_8>
 8013516:	9b00      	ldr	r3, [sp, #0]
 8013518:	1ac0      	subs	r0, r0, r3
 801351a:	9b01      	ldr	r3, [sp, #4]
 801351c:	6028      	str	r0, [r5, #0]
 801351e:	eb61 0103 	sbc.w	r1, r1, r3
 8013522:	6069      	str	r1, [r5, #4]
 8013524:	4630      	mov	r0, r6
 8013526:	b002      	add	sp, #8
 8013528:	bd70      	pop	{r4, r5, r6, pc}
 801352a:	f240 3621 	movw	r6, #801	@ 0x321
 801352e:	4630      	mov	r0, r6
 8013530:	b002      	add	sp, #8
 8013532:	bd70      	pop	{r4, r5, r6, pc}
 8013534:	260b      	movs	r6, #11
 8013536:	4630      	mov	r0, r6
 8013538:	b002      	add	sp, #8
 801353a:	bd70      	pop	{r4, r5, r6, pc}
 801353c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013540:	e7f0      	b.n	8013524 <rcl_timer_get_time_until_next_call+0x44>
 8013542:	bf00      	nop

08013544 <rcl_timer_get_guard_condition>:
 8013544:	b130      	cbz	r0, 8013554 <rcl_timer_get_guard_condition+0x10>
 8013546:	6800      	ldr	r0, [r0, #0]
 8013548:	b120      	cbz	r0, 8013554 <rcl_timer_get_guard_condition+0x10>
 801354a:	68c3      	ldr	r3, [r0, #12]
 801354c:	b10b      	cbz	r3, 8013552 <rcl_timer_get_guard_condition+0xe>
 801354e:	3008      	adds	r0, #8
 8013550:	4770      	bx	lr
 8013552:	4618      	mov	r0, r3
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop

08013558 <rcl_validate_enclave_name_with_size>:
 8013558:	b378      	cbz	r0, 80135ba <rcl_validate_enclave_name_with_size+0x62>
 801355a:	b570      	push	{r4, r5, r6, lr}
 801355c:	4615      	mov	r5, r2
 801355e:	b0c2      	sub	sp, #264	@ 0x108
 8013560:	b302      	cbz	r2, 80135a4 <rcl_validate_enclave_name_with_size+0x4c>
 8013562:	461e      	mov	r6, r3
 8013564:	466a      	mov	r2, sp
 8013566:	ab01      	add	r3, sp, #4
 8013568:	460c      	mov	r4, r1
 801356a:	f002 f847 	bl	80155fc <rmw_validate_namespace_with_size>
 801356e:	4684      	mov	ip, r0
 8013570:	b9e8      	cbnz	r0, 80135ae <rcl_validate_enclave_name_with_size+0x56>
 8013572:	9b00      	ldr	r3, [sp, #0]
 8013574:	b923      	cbnz	r3, 8013580 <rcl_validate_enclave_name_with_size+0x28>
 8013576:	2300      	movs	r3, #0
 8013578:	602b      	str	r3, [r5, #0]
 801357a:	4660      	mov	r0, ip
 801357c:	b042      	add	sp, #264	@ 0x108
 801357e:	bd70      	pop	{r4, r5, r6, pc}
 8013580:	2b07      	cmp	r3, #7
 8013582:	d007      	beq.n	8013594 <rcl_validate_enclave_name_with_size+0x3c>
 8013584:	1e5a      	subs	r2, r3, #1
 8013586:	2a05      	cmp	r2, #5
 8013588:	d833      	bhi.n	80135f2 <rcl_validate_enclave_name_with_size+0x9a>
 801358a:	e8df f002 	tbb	[pc, r2]
 801358e:	2c2f      	.short	0x2c2f
 8013590:	1a232629 	.word	0x1a232629
 8013594:	2cff      	cmp	r4, #255	@ 0xff
 8013596:	d9ee      	bls.n	8013576 <rcl_validate_enclave_name_with_size+0x1e>
 8013598:	602b      	str	r3, [r5, #0]
 801359a:	2e00      	cmp	r6, #0
 801359c:	d0ed      	beq.n	801357a <rcl_validate_enclave_name_with_size+0x22>
 801359e:	23fe      	movs	r3, #254	@ 0xfe
 80135a0:	6033      	str	r3, [r6, #0]
 80135a2:	e7ea      	b.n	801357a <rcl_validate_enclave_name_with_size+0x22>
 80135a4:	f04f 0c0b 	mov.w	ip, #11
 80135a8:	4660      	mov	r0, ip
 80135aa:	b042      	add	sp, #264	@ 0x108
 80135ac:	bd70      	pop	{r4, r5, r6, pc}
 80135ae:	f7fe fde1 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 80135b2:	4684      	mov	ip, r0
 80135b4:	4660      	mov	r0, ip
 80135b6:	b042      	add	sp, #264	@ 0x108
 80135b8:	bd70      	pop	{r4, r5, r6, pc}
 80135ba:	f04f 0c0b 	mov.w	ip, #11
 80135be:	4660      	mov	r0, ip
 80135c0:	4770      	bx	lr
 80135c2:	2306      	movs	r3, #6
 80135c4:	602b      	str	r3, [r5, #0]
 80135c6:	2e00      	cmp	r6, #0
 80135c8:	d0d7      	beq.n	801357a <rcl_validate_enclave_name_with_size+0x22>
 80135ca:	9b01      	ldr	r3, [sp, #4]
 80135cc:	6033      	str	r3, [r6, #0]
 80135ce:	4660      	mov	r0, ip
 80135d0:	b042      	add	sp, #264	@ 0x108
 80135d2:	bd70      	pop	{r4, r5, r6, pc}
 80135d4:	2305      	movs	r3, #5
 80135d6:	602b      	str	r3, [r5, #0]
 80135d8:	e7f5      	b.n	80135c6 <rcl_validate_enclave_name_with_size+0x6e>
 80135da:	2304      	movs	r3, #4
 80135dc:	602b      	str	r3, [r5, #0]
 80135de:	e7f2      	b.n	80135c6 <rcl_validate_enclave_name_with_size+0x6e>
 80135e0:	2303      	movs	r3, #3
 80135e2:	602b      	str	r3, [r5, #0]
 80135e4:	e7ef      	b.n	80135c6 <rcl_validate_enclave_name_with_size+0x6e>
 80135e6:	2302      	movs	r3, #2
 80135e8:	602b      	str	r3, [r5, #0]
 80135ea:	e7ec      	b.n	80135c6 <rcl_validate_enclave_name_with_size+0x6e>
 80135ec:	2301      	movs	r3, #1
 80135ee:	602b      	str	r3, [r5, #0]
 80135f0:	e7e9      	b.n	80135c6 <rcl_validate_enclave_name_with_size+0x6e>
 80135f2:	4a04      	ldr	r2, [pc, #16]	@ (8013604 <rcl_validate_enclave_name_with_size+0xac>)
 80135f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80135f8:	a802      	add	r0, sp, #8
 80135fa:	f001 fd23 	bl	8015044 <rcutils_snprintf>
 80135fe:	f04f 0c01 	mov.w	ip, #1
 8013602:	e7ba      	b.n	801357a <rcl_validate_enclave_name_with_size+0x22>
 8013604:	0801bf88 	.word	0x0801bf88

08013608 <rcl_validate_enclave_name>:
 8013608:	b168      	cbz	r0, 8013626 <rcl_validate_enclave_name+0x1e>
 801360a:	b570      	push	{r4, r5, r6, lr}
 801360c:	460d      	mov	r5, r1
 801360e:	4616      	mov	r6, r2
 8013610:	4604      	mov	r4, r0
 8013612:	f7ec fdf5 	bl	8000200 <strlen>
 8013616:	4633      	mov	r3, r6
 8013618:	4601      	mov	r1, r0
 801361a:	462a      	mov	r2, r5
 801361c:	4620      	mov	r0, r4
 801361e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013622:	f7ff bf99 	b.w	8013558 <rcl_validate_enclave_name_with_size>
 8013626:	200b      	movs	r0, #11
 8013628:	4770      	bx	lr
 801362a:	bf00      	nop

0801362c <rcl_get_zero_initialized_wait_set>:
 801362c:	b510      	push	{r4, lr}
 801362e:	4c08      	ldr	r4, [pc, #32]	@ (8013650 <rcl_get_zero_initialized_wait_set+0x24>)
 8013630:	4686      	mov	lr, r0
 8013632:	4684      	mov	ip, r0
 8013634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013636:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801363a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801363c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013642:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013646:	6823      	ldr	r3, [r4, #0]
 8013648:	f8cc 3000 	str.w	r3, [ip]
 801364c:	4670      	mov	r0, lr
 801364e:	bd10      	pop	{r4, pc}
 8013650:	0801bfe8 	.word	0x0801bfe8

08013654 <rcl_wait_set_is_valid>:
 8013654:	b118      	cbz	r0, 801365e <rcl_wait_set_is_valid+0xa>
 8013656:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013658:	3800      	subs	r0, #0
 801365a:	bf18      	it	ne
 801365c:	2001      	movne	r0, #1
 801365e:	4770      	bx	lr

08013660 <rcl_wait_set_fini>:
 8013660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013664:	b082      	sub	sp, #8
 8013666:	2800      	cmp	r0, #0
 8013668:	f000 8095 	beq.w	8013796 <rcl_wait_set_fini+0x136>
 801366c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801366e:	4604      	mov	r4, r0
 8013670:	2e00      	cmp	r6, #0
 8013672:	f000 808c 	beq.w	801378e <rcl_wait_set_fini+0x12e>
 8013676:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8013678:	f003 faa6 	bl	8016bc8 <rmw_destroy_wait_set>
 801367c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801367e:	1e06      	subs	r6, r0, #0
 8013680:	bf18      	it	ne
 8013682:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8013686:	2d00      	cmp	r5, #0
 8013688:	f000 8081 	beq.w	801378e <rcl_wait_set_fini+0x12e>
 801368c:	6820      	ldr	r0, [r4, #0]
 801368e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013692:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013694:	2700      	movs	r7, #0
 8013696:	6067      	str	r7, [r4, #4]
 8013698:	602f      	str	r7, [r5, #0]
 801369a:	b120      	cbz	r0, 80136a6 <rcl_wait_set_fini+0x46>
 801369c:	9101      	str	r1, [sp, #4]
 801369e:	47c0      	blx	r8
 80136a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136a2:	9901      	ldr	r1, [sp, #4]
 80136a4:	6027      	str	r7, [r4, #0]
 80136a6:	68a8      	ldr	r0, [r5, #8]
 80136a8:	b120      	cbz	r0, 80136b4 <rcl_wait_set_fini+0x54>
 80136aa:	47c0      	blx	r8
 80136ac:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136ae:	2300      	movs	r3, #0
 80136b0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80136b4:	68a0      	ldr	r0, [r4, #8]
 80136b6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80136b8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80136ba:	f04f 0800 	mov.w	r8, #0
 80136be:	f8c4 800c 	str.w	r8, [r4, #12]
 80136c2:	f8c5 800c 	str.w	r8, [r5, #12]
 80136c6:	b128      	cbz	r0, 80136d4 <rcl_wait_set_fini+0x74>
 80136c8:	47b8      	blx	r7
 80136ca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136cc:	f8c4 8008 	str.w	r8, [r4, #8]
 80136d0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80136d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80136d4:	6968      	ldr	r0, [r5, #20]
 80136d6:	f04f 0800 	mov.w	r8, #0
 80136da:	f8c5 8010 	str.w	r8, [r5, #16]
 80136de:	b128      	cbz	r0, 80136ec <rcl_wait_set_fini+0x8c>
 80136e0:	47b8      	blx	r7
 80136e2:	f8c5 8014 	str.w	r8, [r5, #20]
 80136e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80136e8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80136ea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80136ec:	6920      	ldr	r0, [r4, #16]
 80136ee:	f04f 0800 	mov.w	r8, #0
 80136f2:	f8c4 8014 	str.w	r8, [r4, #20]
 80136f6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80136fa:	b128      	cbz	r0, 8013708 <rcl_wait_set_fini+0xa8>
 80136fc:	47b8      	blx	r7
 80136fe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013700:	f8c4 8010 	str.w	r8, [r4, #16]
 8013704:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013706:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013708:	69a0      	ldr	r0, [r4, #24]
 801370a:	f04f 0800 	mov.w	r8, #0
 801370e:	f8c4 801c 	str.w	r8, [r4, #28]
 8013712:	f8c5 8018 	str.w	r8, [r5, #24]
 8013716:	b128      	cbz	r0, 8013724 <rcl_wait_set_fini+0xc4>
 8013718:	9101      	str	r1, [sp, #4]
 801371a:	47b8      	blx	r7
 801371c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801371e:	9901      	ldr	r1, [sp, #4]
 8013720:	f8c4 8018 	str.w	r8, [r4, #24]
 8013724:	6a28      	ldr	r0, [r5, #32]
 8013726:	b120      	cbz	r0, 8013732 <rcl_wait_set_fini+0xd2>
 8013728:	47b8      	blx	r7
 801372a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801372c:	2300      	movs	r3, #0
 801372e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8013732:	6a20      	ldr	r0, [r4, #32]
 8013734:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013738:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801373a:	2700      	movs	r7, #0
 801373c:	6267      	str	r7, [r4, #36]	@ 0x24
 801373e:	626f      	str	r7, [r5, #36]	@ 0x24
 8013740:	b120      	cbz	r0, 801374c <rcl_wait_set_fini+0xec>
 8013742:	9101      	str	r1, [sp, #4]
 8013744:	47c0      	blx	r8
 8013746:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013748:	9901      	ldr	r1, [sp, #4]
 801374a:	6227      	str	r7, [r4, #32]
 801374c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801374e:	b120      	cbz	r0, 801375a <rcl_wait_set_fini+0xfa>
 8013750:	47c0      	blx	r8
 8013752:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013754:	2300      	movs	r3, #0
 8013756:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801375a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801375c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013760:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013762:	2700      	movs	r7, #0
 8013764:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013766:	632f      	str	r7, [r5, #48]	@ 0x30
 8013768:	b120      	cbz	r0, 8013774 <rcl_wait_set_fini+0x114>
 801376a:	9101      	str	r1, [sp, #4]
 801376c:	47c0      	blx	r8
 801376e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013770:	9901      	ldr	r1, [sp, #4]
 8013772:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013774:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013776:	b120      	cbz	r0, 8013782 <rcl_wait_set_fini+0x122>
 8013778:	47c0      	blx	r8
 801377a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801377c:	2300      	movs	r3, #0
 801377e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013782:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013784:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013786:	4628      	mov	r0, r5
 8013788:	4798      	blx	r3
 801378a:	2300      	movs	r3, #0
 801378c:	6323      	str	r3, [r4, #48]	@ 0x30
 801378e:	4630      	mov	r0, r6
 8013790:	b002      	add	sp, #8
 8013792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013796:	260b      	movs	r6, #11
 8013798:	4630      	mov	r0, r6
 801379a:	b002      	add	sp, #8
 801379c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137a0 <rcl_wait_set_add_subscription>:
 80137a0:	b318      	cbz	r0, 80137ea <rcl_wait_set_add_subscription+0x4a>
 80137a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80137a4:	b570      	push	{r4, r5, r6, lr}
 80137a6:	4604      	mov	r4, r0
 80137a8:	b30b      	cbz	r3, 80137ee <rcl_wait_set_add_subscription+0x4e>
 80137aa:	b319      	cbz	r1, 80137f4 <rcl_wait_set_add_subscription+0x54>
 80137ac:	681d      	ldr	r5, [r3, #0]
 80137ae:	6840      	ldr	r0, [r0, #4]
 80137b0:	4285      	cmp	r5, r0
 80137b2:	d217      	bcs.n	80137e4 <rcl_wait_set_add_subscription+0x44>
 80137b4:	6820      	ldr	r0, [r4, #0]
 80137b6:	1c6e      	adds	r6, r5, #1
 80137b8:	601e      	str	r6, [r3, #0]
 80137ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80137be:	b102      	cbz	r2, 80137c2 <rcl_wait_set_add_subscription+0x22>
 80137c0:	6015      	str	r5, [r2, #0]
 80137c2:	4608      	mov	r0, r1
 80137c4:	f7ff fd14 	bl	80131f0 <rcl_subscription_get_rmw_handle>
 80137c8:	b150      	cbz	r0, 80137e0 <rcl_wait_set_add_subscription+0x40>
 80137ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137cc:	6842      	ldr	r2, [r0, #4]
 80137ce:	689b      	ldr	r3, [r3, #8]
 80137d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80137d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80137d6:	6853      	ldr	r3, [r2, #4]
 80137d8:	3301      	adds	r3, #1
 80137da:	2000      	movs	r0, #0
 80137dc:	6053      	str	r3, [r2, #4]
 80137de:	bd70      	pop	{r4, r5, r6, pc}
 80137e0:	2001      	movs	r0, #1
 80137e2:	bd70      	pop	{r4, r5, r6, pc}
 80137e4:	f240 3086 	movw	r0, #902	@ 0x386
 80137e8:	bd70      	pop	{r4, r5, r6, pc}
 80137ea:	200b      	movs	r0, #11
 80137ec:	4770      	bx	lr
 80137ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80137f2:	bd70      	pop	{r4, r5, r6, pc}
 80137f4:	200b      	movs	r0, #11
 80137f6:	bd70      	pop	{r4, r5, r6, pc}

080137f8 <rcl_wait_set_clear>:
 80137f8:	2800      	cmp	r0, #0
 80137fa:	d073      	beq.n	80138e4 <rcl_wait_set_clear+0xec>
 80137fc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80137fe:	b510      	push	{r4, lr}
 8013800:	4604      	mov	r4, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d070      	beq.n	80138e8 <rcl_wait_set_clear+0xf0>
 8013806:	6800      	ldr	r0, [r0, #0]
 8013808:	b138      	cbz	r0, 801381a <rcl_wait_set_clear+0x22>
 801380a:	6862      	ldr	r2, [r4, #4]
 801380c:	2100      	movs	r1, #0
 801380e:	0092      	lsls	r2, r2, #2
 8013810:	f006 f929 	bl	8019a66 <memset>
 8013814:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013816:	2200      	movs	r2, #0
 8013818:	601a      	str	r2, [r3, #0]
 801381a:	68a0      	ldr	r0, [r4, #8]
 801381c:	b138      	cbz	r0, 801382e <rcl_wait_set_clear+0x36>
 801381e:	68e2      	ldr	r2, [r4, #12]
 8013820:	2100      	movs	r1, #0
 8013822:	0092      	lsls	r2, r2, #2
 8013824:	f006 f91f 	bl	8019a66 <memset>
 8013828:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801382a:	2200      	movs	r2, #0
 801382c:	60da      	str	r2, [r3, #12]
 801382e:	69a0      	ldr	r0, [r4, #24]
 8013830:	b138      	cbz	r0, 8013842 <rcl_wait_set_clear+0x4a>
 8013832:	69e2      	ldr	r2, [r4, #28]
 8013834:	2100      	movs	r1, #0
 8013836:	0092      	lsls	r2, r2, #2
 8013838:	f006 f915 	bl	8019a66 <memset>
 801383c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801383e:	2200      	movs	r2, #0
 8013840:	619a      	str	r2, [r3, #24]
 8013842:	6a20      	ldr	r0, [r4, #32]
 8013844:	b138      	cbz	r0, 8013856 <rcl_wait_set_clear+0x5e>
 8013846:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013848:	2100      	movs	r1, #0
 801384a:	0092      	lsls	r2, r2, #2
 801384c:	f006 f90b 	bl	8019a66 <memset>
 8013850:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013852:	2200      	movs	r2, #0
 8013854:	625a      	str	r2, [r3, #36]	@ 0x24
 8013856:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013858:	b138      	cbz	r0, 801386a <rcl_wait_set_clear+0x72>
 801385a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801385c:	2100      	movs	r1, #0
 801385e:	0092      	lsls	r2, r2, #2
 8013860:	f006 f901 	bl	8019a66 <memset>
 8013864:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013866:	2200      	movs	r2, #0
 8013868:	631a      	str	r2, [r3, #48]	@ 0x30
 801386a:	6920      	ldr	r0, [r4, #16]
 801386c:	b138      	cbz	r0, 801387e <rcl_wait_set_clear+0x86>
 801386e:	6962      	ldr	r2, [r4, #20]
 8013870:	2100      	movs	r1, #0
 8013872:	0092      	lsls	r2, r2, #2
 8013874:	f006 f8f7 	bl	8019a66 <memset>
 8013878:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801387a:	2200      	movs	r2, #0
 801387c:	641a      	str	r2, [r3, #64]	@ 0x40
 801387e:	6898      	ldr	r0, [r3, #8]
 8013880:	b138      	cbz	r0, 8013892 <rcl_wait_set_clear+0x9a>
 8013882:	685a      	ldr	r2, [r3, #4]
 8013884:	2100      	movs	r1, #0
 8013886:	0092      	lsls	r2, r2, #2
 8013888:	f006 f8ed 	bl	8019a66 <memset>
 801388c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801388e:	2200      	movs	r2, #0
 8013890:	605a      	str	r2, [r3, #4]
 8013892:	6958      	ldr	r0, [r3, #20]
 8013894:	b138      	cbz	r0, 80138a6 <rcl_wait_set_clear+0xae>
 8013896:	691a      	ldr	r2, [r3, #16]
 8013898:	2100      	movs	r1, #0
 801389a:	0092      	lsls	r2, r2, #2
 801389c:	f006 f8e3 	bl	8019a66 <memset>
 80138a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138a2:	2200      	movs	r2, #0
 80138a4:	611a      	str	r2, [r3, #16]
 80138a6:	6a18      	ldr	r0, [r3, #32]
 80138a8:	b138      	cbz	r0, 80138ba <rcl_wait_set_clear+0xc2>
 80138aa:	69da      	ldr	r2, [r3, #28]
 80138ac:	2100      	movs	r1, #0
 80138ae:	0092      	lsls	r2, r2, #2
 80138b0:	f006 f8d9 	bl	8019a66 <memset>
 80138b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138b6:	2200      	movs	r2, #0
 80138b8:	61da      	str	r2, [r3, #28]
 80138ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80138bc:	b138      	cbz	r0, 80138ce <rcl_wait_set_clear+0xd6>
 80138be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80138c0:	2100      	movs	r1, #0
 80138c2:	0092      	lsls	r2, r2, #2
 80138c4:	f006 f8cf 	bl	8019a66 <memset>
 80138c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138ca:	2200      	movs	r2, #0
 80138cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80138ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80138d0:	b138      	cbz	r0, 80138e2 <rcl_wait_set_clear+0xea>
 80138d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80138d4:	2100      	movs	r1, #0
 80138d6:	0092      	lsls	r2, r2, #2
 80138d8:	f006 f8c5 	bl	8019a66 <memset>
 80138dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138de:	2000      	movs	r0, #0
 80138e0:	6358      	str	r0, [r3, #52]	@ 0x34
 80138e2:	bd10      	pop	{r4, pc}
 80138e4:	200b      	movs	r0, #11
 80138e6:	4770      	bx	lr
 80138e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80138ec:	bd10      	pop	{r4, pc}
 80138ee:	bf00      	nop

080138f0 <rcl_wait_set_resize>:
 80138f0:	2800      	cmp	r0, #0
 80138f2:	f000 8185 	beq.w	8013c00 <rcl_wait_set_resize+0x310>
 80138f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138fa:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80138fc:	b083      	sub	sp, #12
 80138fe:	4605      	mov	r5, r0
 8013900:	2c00      	cmp	r4, #0
 8013902:	f000 817f 	beq.w	8013c04 <rcl_wait_set_resize+0x314>
 8013906:	f04f 0900 	mov.w	r9, #0
 801390a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801390e:	461f      	mov	r7, r3
 8013910:	4688      	mov	r8, r1
 8013912:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013916:	4616      	mov	r6, r2
 8013918:	f8c0 9004 	str.w	r9, [r0, #4]
 801391c:	f8c4 9000 	str.w	r9, [r4]
 8013920:	2900      	cmp	r1, #0
 8013922:	f000 80bd 	beq.w	8013aa0 <rcl_wait_set_resize+0x1b0>
 8013926:	008c      	lsls	r4, r1, #2
 8013928:	6800      	ldr	r0, [r0, #0]
 801392a:	9301      	str	r3, [sp, #4]
 801392c:	4652      	mov	r2, sl
 801392e:	4621      	mov	r1, r4
 8013930:	4798      	blx	r3
 8013932:	9b01      	ldr	r3, [sp, #4]
 8013934:	6028      	str	r0, [r5, #0]
 8013936:	2800      	cmp	r0, #0
 8013938:	f000 80cb 	beq.w	8013ad2 <rcl_wait_set_resize+0x1e2>
 801393c:	4622      	mov	r2, r4
 801393e:	4649      	mov	r1, r9
 8013940:	9301      	str	r3, [sp, #4]
 8013942:	f006 f890 	bl	8019a66 <memset>
 8013946:	f8c5 8004 	str.w	r8, [r5, #4]
 801394a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801394e:	9b01      	ldr	r3, [sp, #4]
 8013950:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013954:	f8c8 9004 	str.w	r9, [r8, #4]
 8013958:	4652      	mov	r2, sl
 801395a:	4621      	mov	r1, r4
 801395c:	4798      	blx	r3
 801395e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013960:	f8c8 0008 	str.w	r0, [r8, #8]
 8013964:	689b      	ldr	r3, [r3, #8]
 8013966:	2b00      	cmp	r3, #0
 8013968:	f000 80ac 	beq.w	8013ac4 <rcl_wait_set_resize+0x1d4>
 801396c:	4622      	mov	r2, r4
 801396e:	4649      	mov	r1, r9
 8013970:	4618      	mov	r0, r3
 8013972:	f006 f878 	bl	8019a66 <memset>
 8013976:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013978:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801397c:	f04f 0800 	mov.w	r8, #0
 8013980:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013984:	f8c5 800c 	str.w	r8, [r5, #12]
 8013988:	f8c4 800c 	str.w	r8, [r4, #12]
 801398c:	2e00      	cmp	r6, #0
 801398e:	f040 80a4 	bne.w	8013ada <rcl_wait_set_resize+0x1ea>
 8013992:	68a8      	ldr	r0, [r5, #8]
 8013994:	b128      	cbz	r0, 80139a2 <rcl_wait_set_resize+0xb2>
 8013996:	4649      	mov	r1, r9
 8013998:	4790      	blx	r2
 801399a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801399c:	60ae      	str	r6, [r5, #8]
 801399e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80139a2:	f04f 0800 	mov.w	r8, #0
 80139a6:	19f6      	adds	r6, r6, r7
 80139a8:	f8c4 8010 	str.w	r8, [r4, #16]
 80139ac:	f040 80ac 	bne.w	8013b08 <rcl_wait_set_resize+0x218>
 80139b0:	6960      	ldr	r0, [r4, #20]
 80139b2:	b130      	cbz	r0, 80139c2 <rcl_wait_set_resize+0xd2>
 80139b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80139b6:	4649      	mov	r1, r9
 80139b8:	4798      	blx	r3
 80139ba:	6166      	str	r6, [r4, #20]
 80139bc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139be:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80139c2:	2600      	movs	r6, #0
 80139c4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80139c8:	616e      	str	r6, [r5, #20]
 80139ca:	6426      	str	r6, [r4, #64]	@ 0x40
 80139cc:	2f00      	cmp	r7, #0
 80139ce:	f040 80ad 	bne.w	8013b2c <rcl_wait_set_resize+0x23c>
 80139d2:	6928      	ldr	r0, [r5, #16]
 80139d4:	b138      	cbz	r0, 80139e6 <rcl_wait_set_resize+0xf6>
 80139d6:	4649      	mov	r1, r9
 80139d8:	47d0      	blx	sl
 80139da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80139dc:	612f      	str	r7, [r5, #16]
 80139de:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80139e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80139e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139e8:	2600      	movs	r6, #0
 80139ea:	61ee      	str	r6, [r5, #28]
 80139ec:	61a6      	str	r6, [r4, #24]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f040 80af 	bne.w	8013b52 <rcl_wait_set_resize+0x262>
 80139f4:	69a8      	ldr	r0, [r5, #24]
 80139f6:	b120      	cbz	r0, 8013a02 <rcl_wait_set_resize+0x112>
 80139f8:	4649      	mov	r1, r9
 80139fa:	47d0      	blx	sl
 80139fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a00:	61ab      	str	r3, [r5, #24]
 8013a02:	6a20      	ldr	r0, [r4, #32]
 8013a04:	b128      	cbz	r0, 8013a12 <rcl_wait_set_resize+0x122>
 8013a06:	4649      	mov	r1, r9
 8013a08:	47d0      	blx	sl
 8013a0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013a12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a14:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013a16:	2600      	movs	r6, #0
 8013a18:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013a1c:	626e      	str	r6, [r5, #36]	@ 0x24
 8013a1e:	6266      	str	r6, [r4, #36]	@ 0x24
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	f000 80b6 	beq.w	8013b92 <rcl_wait_set_resize+0x2a2>
 8013a26:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013a2a:	6a28      	ldr	r0, [r5, #32]
 8013a2c:	463a      	mov	r2, r7
 8013a2e:	4651      	mov	r1, sl
 8013a30:	47c8      	blx	r9
 8013a32:	6228      	str	r0, [r5, #32]
 8013a34:	2800      	cmp	r0, #0
 8013a36:	d04c      	beq.n	8013ad2 <rcl_wait_set_resize+0x1e2>
 8013a38:	4652      	mov	r2, sl
 8013a3a:	4631      	mov	r1, r6
 8013a3c:	f006 f813 	bl	8019a66 <memset>
 8013a40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a44:	626b      	str	r3, [r5, #36]	@ 0x24
 8013a46:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013a48:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013a4a:	463a      	mov	r2, r7
 8013a4c:	4651      	mov	r1, sl
 8013a4e:	47c8      	blx	r9
 8013a50:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013a52:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013a54:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013a56:	2c00      	cmp	r4, #0
 8013a58:	f000 80f0 	beq.w	8013c3c <rcl_wait_set_resize+0x34c>
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	4652      	mov	r2, sl
 8013a60:	4631      	mov	r1, r6
 8013a62:	f006 f800 	bl	8019a66 <memset>
 8013a66:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a6a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013a6c:	2600      	movs	r6, #0
 8013a6e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013a72:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013a74:	6326      	str	r6, [r4, #48]	@ 0x30
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f040 809d 	bne.w	8013bb6 <rcl_wait_set_resize+0x2c6>
 8013a7c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013a7e:	b120      	cbz	r0, 8013a8a <rcl_wait_set_resize+0x19a>
 8013a80:	4639      	mov	r1, r7
 8013a82:	47c0      	blx	r8
 8013a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013a88:	62ab      	str	r3, [r5, #40]	@ 0x28
 8013a8a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013a8c:	b310      	cbz	r0, 8013ad4 <rcl_wait_set_resize+0x1e4>
 8013a8e:	4639      	mov	r1, r7
 8013a90:	47c0      	blx	r8
 8013a92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013a94:	2000      	movs	r0, #0
 8013a96:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013a9a:	b003      	add	sp, #12
 8013a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa0:	6800      	ldr	r0, [r0, #0]
 8013aa2:	b120      	cbz	r0, 8013aae <rcl_wait_set_resize+0x1be>
 8013aa4:	4651      	mov	r1, sl
 8013aa6:	47d8      	blx	fp
 8013aa8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013aaa:	f8c5 8000 	str.w	r8, [r5]
 8013aae:	68a0      	ldr	r0, [r4, #8]
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	f43f af61 	beq.w	8013978 <rcl_wait_set_resize+0x88>
 8013ab6:	4651      	mov	r1, sl
 8013ab8:	47d8      	blx	fp
 8013aba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013abc:	2300      	movs	r3, #0
 8013abe:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013ac2:	e759      	b.n	8013978 <rcl_wait_set_resize+0x88>
 8013ac4:	6828      	ldr	r0, [r5, #0]
 8013ac6:	9301      	str	r3, [sp, #4]
 8013ac8:	4651      	mov	r1, sl
 8013aca:	47d8      	blx	fp
 8013acc:	9b01      	ldr	r3, [sp, #4]
 8013ace:	e9c5 3300 	strd	r3, r3, [r5]
 8013ad2:	200a      	movs	r0, #10
 8013ad4:	b003      	add	sp, #12
 8013ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ada:	00b4      	lsls	r4, r6, #2
 8013adc:	68a8      	ldr	r0, [r5, #8]
 8013ade:	464a      	mov	r2, r9
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	4798      	blx	r3
 8013ae4:	60a8      	str	r0, [r5, #8]
 8013ae6:	2800      	cmp	r0, #0
 8013ae8:	d0f3      	beq.n	8013ad2 <rcl_wait_set_resize+0x1e2>
 8013aea:	4622      	mov	r2, r4
 8013aec:	4641      	mov	r1, r8
 8013aee:	f005 ffba 	bl	8019a66 <memset>
 8013af2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013af4:	60ee      	str	r6, [r5, #12]
 8013af6:	f04f 0800 	mov.w	r8, #0
 8013afa:	19f6      	adds	r6, r6, r7
 8013afc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013b00:	f8c4 8010 	str.w	r8, [r4, #16]
 8013b04:	f43f af54 	beq.w	80139b0 <rcl_wait_set_resize+0xc0>
 8013b08:	00b6      	lsls	r6, r6, #2
 8013b0a:	464a      	mov	r2, r9
 8013b0c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013b0e:	6960      	ldr	r0, [r4, #20]
 8013b10:	4631      	mov	r1, r6
 8013b12:	4798      	blx	r3
 8013b14:	4681      	mov	r9, r0
 8013b16:	6160      	str	r0, [r4, #20]
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	d076      	beq.n	8013c0a <rcl_wait_set_resize+0x31a>
 8013b1c:	4632      	mov	r2, r6
 8013b1e:	4641      	mov	r1, r8
 8013b20:	f005 ffa1 	bl	8019a66 <memset>
 8013b24:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013b26:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013b2a:	e74a      	b.n	80139c2 <rcl_wait_set_resize+0xd2>
 8013b2c:	00bc      	lsls	r4, r7, #2
 8013b2e:	6928      	ldr	r0, [r5, #16]
 8013b30:	464a      	mov	r2, r9
 8013b32:	4621      	mov	r1, r4
 8013b34:	47c0      	blx	r8
 8013b36:	6128      	str	r0, [r5, #16]
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	d0ca      	beq.n	8013ad2 <rcl_wait_set_resize+0x1e2>
 8013b3c:	4622      	mov	r2, r4
 8013b3e:	4631      	mov	r1, r6
 8013b40:	f005 ff91 	bl	8019a66 <memset>
 8013b44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013b46:	616f      	str	r7, [r5, #20]
 8013b48:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013b4c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013b50:	e749      	b.n	80139e6 <rcl_wait_set_resize+0xf6>
 8013b52:	009c      	lsls	r4, r3, #2
 8013b54:	69a8      	ldr	r0, [r5, #24]
 8013b56:	464a      	mov	r2, r9
 8013b58:	4621      	mov	r1, r4
 8013b5a:	47c0      	blx	r8
 8013b5c:	61a8      	str	r0, [r5, #24]
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	d0b7      	beq.n	8013ad2 <rcl_wait_set_resize+0x1e2>
 8013b62:	4622      	mov	r2, r4
 8013b64:	4631      	mov	r1, r6
 8013b66:	f005 ff7e 	bl	8019a66 <memset>
 8013b6a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b6e:	61eb      	str	r3, [r5, #28]
 8013b70:	6a38      	ldr	r0, [r7, #32]
 8013b72:	61fe      	str	r6, [r7, #28]
 8013b74:	464a      	mov	r2, r9
 8013b76:	4621      	mov	r1, r4
 8013b78:	47c0      	blx	r8
 8013b7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013b7c:	6238      	str	r0, [r7, #32]
 8013b7e:	6a1f      	ldr	r7, [r3, #32]
 8013b80:	2f00      	cmp	r7, #0
 8013b82:	d054      	beq.n	8013c2e <rcl_wait_set_resize+0x33e>
 8013b84:	4622      	mov	r2, r4
 8013b86:	4631      	mov	r1, r6
 8013b88:	4638      	mov	r0, r7
 8013b8a:	f005 ff6c 	bl	8019a66 <memset>
 8013b8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013b90:	e73f      	b.n	8013a12 <rcl_wait_set_resize+0x122>
 8013b92:	6a28      	ldr	r0, [r5, #32]
 8013b94:	b120      	cbz	r0, 8013ba0 <rcl_wait_set_resize+0x2b0>
 8013b96:	4639      	mov	r1, r7
 8013b98:	47c0      	blx	r8
 8013b9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b9c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013b9e:	622b      	str	r3, [r5, #32]
 8013ba0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013ba2:	2800      	cmp	r0, #0
 8013ba4:	f43f af60 	beq.w	8013a68 <rcl_wait_set_resize+0x178>
 8013ba8:	4639      	mov	r1, r7
 8013baa:	47c0      	blx	r8
 8013bac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013bae:	2300      	movs	r3, #0
 8013bb0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013bb4:	e758      	b.n	8013a68 <rcl_wait_set_resize+0x178>
 8013bb6:	009c      	lsls	r4, r3, #2
 8013bb8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013bba:	463a      	mov	r2, r7
 8013bbc:	4621      	mov	r1, r4
 8013bbe:	47c8      	blx	r9
 8013bc0:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d085      	beq.n	8013ad2 <rcl_wait_set_resize+0x1e2>
 8013bc6:	4622      	mov	r2, r4
 8013bc8:	4631      	mov	r1, r6
 8013bca:	f005 ff4c 	bl	8019a66 <memset>
 8013bce:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bd4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013bd6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013bda:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013bde:	463a      	mov	r2, r7
 8013be0:	4621      	mov	r1, r4
 8013be2:	47c8      	blx	r9
 8013be4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013be6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bec:	b36b      	cbz	r3, 8013c4a <rcl_wait_set_resize+0x35a>
 8013bee:	4622      	mov	r2, r4
 8013bf0:	4631      	mov	r1, r6
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f005 ff37 	bl	8019a66 <memset>
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	b003      	add	sp, #12
 8013bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c00:	200b      	movs	r0, #11
 8013c02:	4770      	bx	lr
 8013c04:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013c08:	e764      	b.n	8013ad4 <rcl_wait_set_resize+0x1e4>
 8013c0a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c0c:	68a8      	ldr	r0, [r5, #8]
 8013c0e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c12:	4798      	blx	r3
 8013c14:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c16:	6928      	ldr	r0, [r5, #16]
 8013c18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013c1a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013c1c:	f8c5 900c 	str.w	r9, [r5, #12]
 8013c20:	f8c5 9008 	str.w	r9, [r5, #8]
 8013c24:	4790      	blx	r2
 8013c26:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013c2a:	200a      	movs	r0, #10
 8013c2c:	e752      	b.n	8013ad4 <rcl_wait_set_resize+0x1e4>
 8013c2e:	69a8      	ldr	r0, [r5, #24]
 8013c30:	4649      	mov	r1, r9
 8013c32:	47d0      	blx	sl
 8013c34:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013c38:	200a      	movs	r0, #10
 8013c3a:	e74b      	b.n	8013ad4 <rcl_wait_set_resize+0x1e4>
 8013c3c:	6a28      	ldr	r0, [r5, #32]
 8013c3e:	4639      	mov	r1, r7
 8013c40:	47c0      	blx	r8
 8013c42:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013c46:	200a      	movs	r0, #10
 8013c48:	e744      	b.n	8013ad4 <rcl_wait_set_resize+0x1e4>
 8013c4a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013c4c:	9301      	str	r3, [sp, #4]
 8013c4e:	4639      	mov	r1, r7
 8013c50:	47c0      	blx	r8
 8013c52:	9b01      	ldr	r3, [sp, #4]
 8013c54:	200a      	movs	r0, #10
 8013c56:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013c5a:	e73b      	b.n	8013ad4 <rcl_wait_set_resize+0x1e4>

08013c5c <rcl_wait_set_init>:
 8013c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c60:	b084      	sub	sp, #16
 8013c62:	4604      	mov	r4, r0
 8013c64:	a810      	add	r0, sp, #64	@ 0x40
 8013c66:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013c6a:	460f      	mov	r7, r1
 8013c6c:	4690      	mov	r8, r2
 8013c6e:	4699      	mov	r9, r3
 8013c70:	f7f7 fe4e 	bl	800b910 <rcutils_allocator_is_valid>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d06b      	beq.n	8013d50 <rcl_wait_set_init+0xf4>
 8013c78:	2c00      	cmp	r4, #0
 8013c7a:	d069      	beq.n	8013d50 <rcl_wait_set_init+0xf4>
 8013c7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013c7e:	b125      	cbz	r5, 8013c8a <rcl_wait_set_init+0x2e>
 8013c80:	2564      	movs	r5, #100	@ 0x64
 8013c82:	4628      	mov	r0, r5
 8013c84:	b004      	add	sp, #16
 8013c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c8a:	f1ba 0f00 	cmp.w	sl, #0
 8013c8e:	d05f      	beq.n	8013d50 <rcl_wait_set_init+0xf4>
 8013c90:	4650      	mov	r0, sl
 8013c92:	f7fe fa8d 	bl	80121b0 <rcl_context_is_valid>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d067      	beq.n	8013d6a <rcl_wait_set_init+0x10e>
 8013c9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013c9c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8013c9e:	205c      	movs	r0, #92	@ 0x5c
 8013ca0:	4798      	blx	r3
 8013ca2:	6320      	str	r0, [r4, #48]	@ 0x30
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	d062      	beq.n	8013d6e <rcl_wait_set_init+0x112>
 8013ca8:	4629      	mov	r1, r5
 8013caa:	225c      	movs	r2, #92	@ 0x5c
 8013cac:	f005 fedb 	bl	8019a66 <memset>
 8013cb0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013cb4:	eb03 0e02 	add.w	lr, r3, r2
 8013cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013cba:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013cbc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013cc0:	449e      	add	lr, r3
 8013cc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013cc6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013cca:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013cce:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013cd2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013cd6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013cda:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013cde:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013ce2:	f8da a000 	ldr.w	sl, [sl]
 8013ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013ce8:	44c6      	add	lr, r8
 8013cea:	f8dc 3000 	ldr.w	r3, [ip]
 8013cee:	602b      	str	r3, [r5, #0]
 8013cf0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013cf4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013cf8:	f002 ff5c 	bl	8016bb4 <rmw_create_wait_set>
 8013cfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013cfe:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8013d00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013d02:	b350      	cbz	r0, 8013d5a <rcl_wait_set_init+0xfe>
 8013d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d06:	9302      	str	r3, [sp, #8]
 8013d08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d0a:	9301      	str	r3, [sp, #4]
 8013d0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d0e:	9300      	str	r3, [sp, #0]
 8013d10:	4642      	mov	r2, r8
 8013d12:	464b      	mov	r3, r9
 8013d14:	4639      	mov	r1, r7
 8013d16:	4620      	mov	r0, r4
 8013d18:	f7ff fdea 	bl	80138f0 <rcl_wait_set_resize>
 8013d1c:	4605      	mov	r5, r0
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d0af      	beq.n	8013c82 <rcl_wait_set_init+0x26>
 8013d22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013d24:	bb2b      	cbnz	r3, 8013d72 <rcl_wait_set_init+0x116>
 8013d26:	2600      	movs	r6, #0
 8013d28:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013d2c:	9600      	str	r6, [sp, #0]
 8013d2e:	4633      	mov	r3, r6
 8013d30:	4632      	mov	r2, r6
 8013d32:	4631      	mov	r1, r6
 8013d34:	4620      	mov	r0, r4
 8013d36:	f7ff fddb 	bl	80138f0 <rcl_wait_set_resize>
 8013d3a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	d0a0      	beq.n	8013c82 <rcl_wait_set_init+0x26>
 8013d40:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013d42:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013d44:	4798      	blx	r3
 8013d46:	4628      	mov	r0, r5
 8013d48:	6326      	str	r6, [r4, #48]	@ 0x30
 8013d4a:	b004      	add	sp, #16
 8013d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d50:	250b      	movs	r5, #11
 8013d52:	4628      	mov	r0, r5
 8013d54:	b004      	add	sp, #16
 8013d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d5a:	2501      	movs	r5, #1
 8013d5c:	f002 ff34 	bl	8016bc8 <rmw_destroy_wait_set>
 8013d60:	2800      	cmp	r0, #0
 8013d62:	bf18      	it	ne
 8013d64:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013d68:	e7dd      	b.n	8013d26 <rcl_wait_set_init+0xca>
 8013d6a:	2565      	movs	r5, #101	@ 0x65
 8013d6c:	e789      	b.n	8013c82 <rcl_wait_set_init+0x26>
 8013d6e:	250a      	movs	r5, #10
 8013d70:	e787      	b.n	8013c82 <rcl_wait_set_init+0x26>
 8013d72:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013d74:	e7f2      	b.n	8013d5c <rcl_wait_set_init+0x100>
 8013d76:	bf00      	nop

08013d78 <rcl_wait_set_add_guard_condition>:
 8013d78:	b318      	cbz	r0, 8013dc2 <rcl_wait_set_add_guard_condition+0x4a>
 8013d7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013d7c:	b570      	push	{r4, r5, r6, lr}
 8013d7e:	4604      	mov	r4, r0
 8013d80:	b30b      	cbz	r3, 8013dc6 <rcl_wait_set_add_guard_condition+0x4e>
 8013d82:	b319      	cbz	r1, 8013dcc <rcl_wait_set_add_guard_condition+0x54>
 8013d84:	68dd      	ldr	r5, [r3, #12]
 8013d86:	68c0      	ldr	r0, [r0, #12]
 8013d88:	4285      	cmp	r5, r0
 8013d8a:	d217      	bcs.n	8013dbc <rcl_wait_set_add_guard_condition+0x44>
 8013d8c:	68a0      	ldr	r0, [r4, #8]
 8013d8e:	1c6e      	adds	r6, r5, #1
 8013d90:	60de      	str	r6, [r3, #12]
 8013d92:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013d96:	b102      	cbz	r2, 8013d9a <rcl_wait_set_add_guard_condition+0x22>
 8013d98:	6015      	str	r5, [r2, #0]
 8013d9a:	4608      	mov	r0, r1
 8013d9c:	f004 fe58 	bl	8018a50 <rcl_guard_condition_get_rmw_handle>
 8013da0:	b150      	cbz	r0, 8013db8 <rcl_wait_set_add_guard_condition+0x40>
 8013da2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013da4:	6842      	ldr	r2, [r0, #4]
 8013da6:	695b      	ldr	r3, [r3, #20]
 8013da8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013dac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013dae:	6913      	ldr	r3, [r2, #16]
 8013db0:	3301      	adds	r3, #1
 8013db2:	2000      	movs	r0, #0
 8013db4:	6113      	str	r3, [r2, #16]
 8013db6:	bd70      	pop	{r4, r5, r6, pc}
 8013db8:	2001      	movs	r0, #1
 8013dba:	bd70      	pop	{r4, r5, r6, pc}
 8013dbc:	f240 3086 	movw	r0, #902	@ 0x386
 8013dc0:	bd70      	pop	{r4, r5, r6, pc}
 8013dc2:	200b      	movs	r0, #11
 8013dc4:	4770      	bx	lr
 8013dc6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013dca:	bd70      	pop	{r4, r5, r6, pc}
 8013dcc:	200b      	movs	r0, #11
 8013dce:	bd70      	pop	{r4, r5, r6, pc}

08013dd0 <rcl_wait_set_add_timer>:
 8013dd0:	b328      	cbz	r0, 8013e1e <rcl_wait_set_add_timer+0x4e>
 8013dd2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013dd4:	b570      	push	{r4, r5, r6, lr}
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	b31b      	cbz	r3, 8013e22 <rcl_wait_set_add_timer+0x52>
 8013dda:	b329      	cbz	r1, 8013e28 <rcl_wait_set_add_timer+0x58>
 8013ddc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013dde:	6965      	ldr	r5, [r4, #20]
 8013de0:	42a8      	cmp	r0, r5
 8013de2:	d219      	bcs.n	8013e18 <rcl_wait_set_add_timer+0x48>
 8013de4:	6925      	ldr	r5, [r4, #16]
 8013de6:	1c46      	adds	r6, r0, #1
 8013de8:	641e      	str	r6, [r3, #64]	@ 0x40
 8013dea:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013dee:	b102      	cbz	r2, 8013df2 <rcl_wait_set_add_timer+0x22>
 8013df0:	6010      	str	r0, [r2, #0]
 8013df2:	4608      	mov	r0, r1
 8013df4:	f7ff fba6 	bl	8013544 <rcl_timer_get_guard_condition>
 8013df8:	b168      	cbz	r0, 8013e16 <rcl_wait_set_add_timer+0x46>
 8013dfa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013dfc:	68e3      	ldr	r3, [r4, #12]
 8013dfe:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013e00:	3b01      	subs	r3, #1
 8013e02:	441d      	add	r5, r3
 8013e04:	f004 fe24 	bl	8018a50 <rcl_guard_condition_get_rmw_handle>
 8013e08:	b180      	cbz	r0, 8013e2c <rcl_wait_set_add_timer+0x5c>
 8013e0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e0c:	6842      	ldr	r2, [r0, #4]
 8013e0e:	695b      	ldr	r3, [r3, #20]
 8013e10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e14:	2000      	movs	r0, #0
 8013e16:	bd70      	pop	{r4, r5, r6, pc}
 8013e18:	f240 3086 	movw	r0, #902	@ 0x386
 8013e1c:	bd70      	pop	{r4, r5, r6, pc}
 8013e1e:	200b      	movs	r0, #11
 8013e20:	4770      	bx	lr
 8013e22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e26:	bd70      	pop	{r4, r5, r6, pc}
 8013e28:	200b      	movs	r0, #11
 8013e2a:	bd70      	pop	{r4, r5, r6, pc}
 8013e2c:	2001      	movs	r0, #1
 8013e2e:	bd70      	pop	{r4, r5, r6, pc}

08013e30 <rcl_wait_set_add_client>:
 8013e30:	b318      	cbz	r0, 8013e7a <rcl_wait_set_add_client+0x4a>
 8013e32:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013e34:	b570      	push	{r4, r5, r6, lr}
 8013e36:	4604      	mov	r4, r0
 8013e38:	b30b      	cbz	r3, 8013e7e <rcl_wait_set_add_client+0x4e>
 8013e3a:	b319      	cbz	r1, 8013e84 <rcl_wait_set_add_client+0x54>
 8013e3c:	699d      	ldr	r5, [r3, #24]
 8013e3e:	69c0      	ldr	r0, [r0, #28]
 8013e40:	4285      	cmp	r5, r0
 8013e42:	d217      	bcs.n	8013e74 <rcl_wait_set_add_client+0x44>
 8013e44:	69a0      	ldr	r0, [r4, #24]
 8013e46:	1c6e      	adds	r6, r5, #1
 8013e48:	619e      	str	r6, [r3, #24]
 8013e4a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013e4e:	b102      	cbz	r2, 8013e52 <rcl_wait_set_add_client+0x22>
 8013e50:	6015      	str	r5, [r2, #0]
 8013e52:	4608      	mov	r0, r1
 8013e54:	f7fe f900 	bl	8012058 <rcl_client_get_rmw_handle>
 8013e58:	b150      	cbz	r0, 8013e70 <rcl_wait_set_add_client+0x40>
 8013e5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013e5c:	6842      	ldr	r2, [r0, #4]
 8013e5e:	6a1b      	ldr	r3, [r3, #32]
 8013e60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e64:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013e66:	69d3      	ldr	r3, [r2, #28]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	2000      	movs	r0, #0
 8013e6c:	61d3      	str	r3, [r2, #28]
 8013e6e:	bd70      	pop	{r4, r5, r6, pc}
 8013e70:	2001      	movs	r0, #1
 8013e72:	bd70      	pop	{r4, r5, r6, pc}
 8013e74:	f240 3086 	movw	r0, #902	@ 0x386
 8013e78:	bd70      	pop	{r4, r5, r6, pc}
 8013e7a:	200b      	movs	r0, #11
 8013e7c:	4770      	bx	lr
 8013e7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e82:	bd70      	pop	{r4, r5, r6, pc}
 8013e84:	200b      	movs	r0, #11
 8013e86:	bd70      	pop	{r4, r5, r6, pc}

08013e88 <rcl_wait_set_add_service>:
 8013e88:	b318      	cbz	r0, 8013ed2 <rcl_wait_set_add_service+0x4a>
 8013e8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	4604      	mov	r4, r0
 8013e90:	b30b      	cbz	r3, 8013ed6 <rcl_wait_set_add_service+0x4e>
 8013e92:	b319      	cbz	r1, 8013edc <rcl_wait_set_add_service+0x54>
 8013e94:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013e96:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013e98:	4285      	cmp	r5, r0
 8013e9a:	d217      	bcs.n	8013ecc <rcl_wait_set_add_service+0x44>
 8013e9c:	6a20      	ldr	r0, [r4, #32]
 8013e9e:	1c6e      	adds	r6, r5, #1
 8013ea0:	625e      	str	r6, [r3, #36]	@ 0x24
 8013ea2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013ea6:	b102      	cbz	r2, 8013eaa <rcl_wait_set_add_service+0x22>
 8013ea8:	6015      	str	r5, [r2, #0]
 8013eaa:	4608      	mov	r0, r1
 8013eac:	f7ff f804 	bl	8012eb8 <rcl_service_get_rmw_handle>
 8013eb0:	b150      	cbz	r0, 8013ec8 <rcl_wait_set_add_service+0x40>
 8013eb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013eb4:	6842      	ldr	r2, [r0, #4]
 8013eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013eb8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ebc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013ebe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	2000      	movs	r0, #0
 8013ec4:	6293      	str	r3, [r2, #40]	@ 0x28
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}
 8013ec8:	2001      	movs	r0, #1
 8013eca:	bd70      	pop	{r4, r5, r6, pc}
 8013ecc:	f240 3086 	movw	r0, #902	@ 0x386
 8013ed0:	bd70      	pop	{r4, r5, r6, pc}
 8013ed2:	200b      	movs	r0, #11
 8013ed4:	4770      	bx	lr
 8013ed6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013eda:	bd70      	pop	{r4, r5, r6, pc}
 8013edc:	200b      	movs	r0, #11
 8013ede:	bd70      	pop	{r4, r5, r6, pc}

08013ee0 <rcl_wait>:
 8013ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee4:	ed2d 8b02 	vpush	{d8}
 8013ee8:	b08d      	sub	sp, #52	@ 0x34
 8013eea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	f000 8143 	beq.w	801417a <rcl_wait+0x29a>
 8013ef4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013ef6:	4605      	mov	r5, r0
 8013ef8:	2e00      	cmp	r6, #0
 8013efa:	f000 8112 	beq.w	8014122 <rcl_wait+0x242>
 8013efe:	6843      	ldr	r3, [r0, #4]
 8013f00:	b983      	cbnz	r3, 8013f24 <rcl_wait+0x44>
 8013f02:	68eb      	ldr	r3, [r5, #12]
 8013f04:	b973      	cbnz	r3, 8013f24 <rcl_wait+0x44>
 8013f06:	696b      	ldr	r3, [r5, #20]
 8013f08:	b963      	cbnz	r3, 8013f24 <rcl_wait+0x44>
 8013f0a:	69eb      	ldr	r3, [r5, #28]
 8013f0c:	b953      	cbnz	r3, 8013f24 <rcl_wait+0x44>
 8013f0e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013f10:	b943      	cbnz	r3, 8013f24 <rcl_wait+0x44>
 8013f12:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013f14:	b933      	cbnz	r3, 8013f24 <rcl_wait+0x44>
 8013f16:	f240 3085 	movw	r0, #901	@ 0x385
 8013f1a:	b00d      	add	sp, #52	@ 0x34
 8013f1c:	ecbd 8b02 	vpop	{d8}
 8013f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f24:	9b04      	ldr	r3, [sp, #16]
 8013f26:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	9b05      	ldr	r3, [sp, #20]
 8013f2c:	f173 0300 	sbcs.w	r3, r3, #0
 8013f30:	f2c0 80f0 	blt.w	8014114 <rcl_wait+0x234>
 8013f34:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013f38:	4643      	mov	r3, r8
 8013f3a:	2a00      	cmp	r2, #0
 8013f3c:	f000 8133 	beq.w	80141a6 <rcl_wait+0x2c6>
 8013f40:	2400      	movs	r4, #0
 8013f42:	4613      	mov	r3, r2
 8013f44:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80141b8 <rcl_wait+0x2d8>
 8013f48:	46a2      	mov	sl, r4
 8013f4a:	46a3      	mov	fp, r4
 8013f4c:	f240 3921 	movw	r9, #801	@ 0x321
 8013f50:	4632      	mov	r2, r6
 8013f52:	e014      	b.n	8013f7e <rcl_wait+0x9e>
 8013f54:	2800      	cmp	r0, #0
 8013f56:	d1e0      	bne.n	8013f1a <rcl_wait+0x3a>
 8013f58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f5c:	4542      	cmp	r2, r8
 8013f5e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013f62:	da03      	bge.n	8013f6c <rcl_wait+0x8c>
 8013f64:	4690      	mov	r8, r2
 8013f66:	461f      	mov	r7, r3
 8013f68:	f04f 0b01 	mov.w	fp, #1
 8013f6c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013f6e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013f70:	3401      	adds	r4, #1
 8013f72:	f14a 0a00 	adc.w	sl, sl, #0
 8013f76:	429c      	cmp	r4, r3
 8013f78:	f17a 0100 	sbcs.w	r1, sl, #0
 8013f7c:	d228      	bcs.n	8013fd0 <rcl_wait+0xf0>
 8013f7e:	6928      	ldr	r0, [r5, #16]
 8013f80:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013f84:	a908      	add	r1, sp, #32
 8013f86:	00a6      	lsls	r6, r4, #2
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d0f1      	beq.n	8013f70 <rcl_wait+0x90>
 8013f8c:	68eb      	ldr	r3, [r5, #12]
 8013f8e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013f92:	4423      	add	r3, r4
 8013f94:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013f98:	f1be 0f00 	cmp.w	lr, #0
 8013f9c:	d006      	beq.n	8013fac <rcl_wait+0xcc>
 8013f9e:	6913      	ldr	r3, [r2, #16]
 8013fa0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	6113      	str	r3, [r2, #16]
 8013fa8:	692b      	ldr	r3, [r5, #16]
 8013faa:	5998      	ldr	r0, [r3, r6]
 8013fac:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013fb0:	f7ff fa96 	bl	80134e0 <rcl_timer_get_time_until_next_call>
 8013fb4:	4548      	cmp	r0, r9
 8013fb6:	d1cd      	bne.n	8013f54 <rcl_wait+0x74>
 8013fb8:	692b      	ldr	r3, [r5, #16]
 8013fba:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	5199      	str	r1, [r3, r6]
 8013fc0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013fc2:	3401      	adds	r4, #1
 8013fc4:	f14a 0a00 	adc.w	sl, sl, #0
 8013fc8:	429c      	cmp	r4, r3
 8013fca:	f17a 0100 	sbcs.w	r1, sl, #0
 8013fce:	d3d6      	bcc.n	8013f7e <rcl_wait+0x9e>
 8013fd0:	4616      	mov	r6, r2
 8013fd2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013fd6:	4313      	orrs	r3, r2
 8013fd8:	46d9      	mov	r9, fp
 8013fda:	f040 80a9 	bne.w	8014130 <rcl_wait+0x250>
 8013fde:	2300      	movs	r3, #0
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013fe6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013fea:	ab08      	add	r3, sp, #32
 8013fec:	9302      	str	r3, [sp, #8]
 8013fee:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013ff0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013ff4:	e9cd 3200 	strd	r3, r2, [sp]
 8013ff8:	f106 0110 	add.w	r1, r6, #16
 8013ffc:	f106 031c 	add.w	r3, r6, #28
 8014000:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8014004:	1d30      	adds	r0, r6, #4
 8014006:	f002 fc5d 	bl	80168c4 <rmw_wait>
 801400a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801400c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801400e:	4680      	mov	r8, r0
 8014010:	b1ca      	cbz	r2, 8014046 <rcl_wait+0x166>
 8014012:	2400      	movs	r4, #0
 8014014:	4627      	mov	r7, r4
 8014016:	692a      	ldr	r2, [r5, #16]
 8014018:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801401c:	f10d 011f 	add.w	r1, sp, #31
 8014020:	00a6      	lsls	r6, r4, #2
 8014022:	b160      	cbz	r0, 801403e <rcl_wait+0x15e>
 8014024:	f88d 701f 	strb.w	r7, [sp, #31]
 8014028:	f7ff fa20 	bl	801346c <rcl_timer_is_ready>
 801402c:	2800      	cmp	r0, #0
 801402e:	f47f af74 	bne.w	8013f1a <rcl_wait+0x3a>
 8014032:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8014036:	b90b      	cbnz	r3, 801403c <rcl_wait+0x15c>
 8014038:	692a      	ldr	r2, [r5, #16]
 801403a:	5193      	str	r3, [r2, r6]
 801403c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801403e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014040:	3401      	adds	r4, #1
 8014042:	42a2      	cmp	r2, r4
 8014044:	d8e7      	bhi.n	8014016 <rcl_wait+0x136>
 8014046:	f038 0002 	bics.w	r0, r8, #2
 801404a:	f040 8090 	bne.w	801416e <rcl_wait+0x28e>
 801404e:	686e      	ldr	r6, [r5, #4]
 8014050:	4602      	mov	r2, r0
 8014052:	b91e      	cbnz	r6, 801405c <rcl_wait+0x17c>
 8014054:	e00d      	b.n	8014072 <rcl_wait+0x192>
 8014056:	3201      	adds	r2, #1
 8014058:	42b2      	cmp	r2, r6
 801405a:	d00a      	beq.n	8014072 <rcl_wait+0x192>
 801405c:	6899      	ldr	r1, [r3, #8]
 801405e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014062:	2900      	cmp	r1, #0
 8014064:	d1f7      	bne.n	8014056 <rcl_wait+0x176>
 8014066:	682c      	ldr	r4, [r5, #0]
 8014068:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801406c:	3201      	adds	r2, #1
 801406e:	42b2      	cmp	r2, r6
 8014070:	d1f4      	bne.n	801405c <rcl_wait+0x17c>
 8014072:	68ee      	ldr	r6, [r5, #12]
 8014074:	2200      	movs	r2, #0
 8014076:	b91e      	cbnz	r6, 8014080 <rcl_wait+0x1a0>
 8014078:	e00d      	b.n	8014096 <rcl_wait+0x1b6>
 801407a:	3201      	adds	r2, #1
 801407c:	42b2      	cmp	r2, r6
 801407e:	d00a      	beq.n	8014096 <rcl_wait+0x1b6>
 8014080:	6959      	ldr	r1, [r3, #20]
 8014082:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014086:	2900      	cmp	r1, #0
 8014088:	d1f7      	bne.n	801407a <rcl_wait+0x19a>
 801408a:	68ac      	ldr	r4, [r5, #8]
 801408c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8014090:	3201      	adds	r2, #1
 8014092:	42b2      	cmp	r2, r6
 8014094:	d1f4      	bne.n	8014080 <rcl_wait+0x1a0>
 8014096:	69ee      	ldr	r6, [r5, #28]
 8014098:	2200      	movs	r2, #0
 801409a:	b91e      	cbnz	r6, 80140a4 <rcl_wait+0x1c4>
 801409c:	e00d      	b.n	80140ba <rcl_wait+0x1da>
 801409e:	3201      	adds	r2, #1
 80140a0:	42b2      	cmp	r2, r6
 80140a2:	d00a      	beq.n	80140ba <rcl_wait+0x1da>
 80140a4:	6a19      	ldr	r1, [r3, #32]
 80140a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80140aa:	2900      	cmp	r1, #0
 80140ac:	d1f7      	bne.n	801409e <rcl_wait+0x1be>
 80140ae:	69ac      	ldr	r4, [r5, #24]
 80140b0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80140b4:	3201      	adds	r2, #1
 80140b6:	42b2      	cmp	r2, r6
 80140b8:	d1f4      	bne.n	80140a4 <rcl_wait+0x1c4>
 80140ba:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80140bc:	2200      	movs	r2, #0
 80140be:	b91e      	cbnz	r6, 80140c8 <rcl_wait+0x1e8>
 80140c0:	e00d      	b.n	80140de <rcl_wait+0x1fe>
 80140c2:	3201      	adds	r2, #1
 80140c4:	4296      	cmp	r6, r2
 80140c6:	d00a      	beq.n	80140de <rcl_wait+0x1fe>
 80140c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80140ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80140ce:	2900      	cmp	r1, #0
 80140d0:	d1f7      	bne.n	80140c2 <rcl_wait+0x1e2>
 80140d2:	6a2c      	ldr	r4, [r5, #32]
 80140d4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80140d8:	3201      	adds	r2, #1
 80140da:	4296      	cmp	r6, r2
 80140dc:	d1f4      	bne.n	80140c8 <rcl_wait+0x1e8>
 80140de:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80140e0:	2200      	movs	r2, #0
 80140e2:	b91e      	cbnz	r6, 80140ec <rcl_wait+0x20c>
 80140e4:	e00d      	b.n	8014102 <rcl_wait+0x222>
 80140e6:	3201      	adds	r2, #1
 80140e8:	42b2      	cmp	r2, r6
 80140ea:	d00a      	beq.n	8014102 <rcl_wait+0x222>
 80140ec:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80140ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80140f2:	2900      	cmp	r1, #0
 80140f4:	d1f7      	bne.n	80140e6 <rcl_wait+0x206>
 80140f6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80140f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80140fc:	3201      	adds	r2, #1
 80140fe:	42b2      	cmp	r2, r6
 8014100:	d1f4      	bne.n	80140ec <rcl_wait+0x20c>
 8014102:	f1b8 0f02 	cmp.w	r8, #2
 8014106:	f47f af08 	bne.w	8013f1a <rcl_wait+0x3a>
 801410a:	464b      	mov	r3, r9
 801410c:	2b00      	cmp	r3, #0
 801410e:	bf08      	it	eq
 8014110:	2002      	moveq	r0, #2
 8014112:	e702      	b.n	8013f1a <rcl_wait+0x3a>
 8014114:	2a00      	cmp	r2, #0
 8014116:	d03a      	beq.n	801418e <rcl_wait+0x2ae>
 8014118:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801411c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014120:	e70e      	b.n	8013f40 <rcl_wait+0x60>
 8014122:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014126:	b00d      	add	sp, #52	@ 0x34
 8014128:	ecbd 8b02 	vpop	{d8}
 801412c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014130:	9b04      	ldr	r3, [sp, #16]
 8014132:	2b01      	cmp	r3, #1
 8014134:	9b05      	ldr	r3, [sp, #20]
 8014136:	f173 0300 	sbcs.w	r3, r3, #0
 801413a:	db24      	blt.n	8014186 <rcl_wait+0x2a6>
 801413c:	2f00      	cmp	r7, #0
 801413e:	bfbc      	itt	lt
 8014140:	f04f 0800 	movlt.w	r8, #0
 8014144:	4647      	movlt	r7, r8
 8014146:	a31e      	add	r3, pc, #120	@ (adr r3, 80141c0 <rcl_wait+0x2e0>)
 8014148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801414c:	4640      	mov	r0, r8
 801414e:	4639      	mov	r1, r7
 8014150:	f7ec fd64 	bl	8000c1c <__aeabi_ldivmod>
 8014154:	a31a      	add	r3, pc, #104	@ (adr r3, 80141c0 <rcl_wait+0x2e0>)
 8014156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801415e:	4640      	mov	r0, r8
 8014160:	4639      	mov	r1, r7
 8014162:	f7ec fd5b 	bl	8000c1c <__aeabi_ldivmod>
 8014166:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801416a:	ab08      	add	r3, sp, #32
 801416c:	e73e      	b.n	8013fec <rcl_wait+0x10c>
 801416e:	2001      	movs	r0, #1
 8014170:	b00d      	add	sp, #52	@ 0x34
 8014172:	ecbd 8b02 	vpop	{d8}
 8014176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801417a:	200b      	movs	r0, #11
 801417c:	b00d      	add	sp, #52	@ 0x34
 801417e:	ecbd 8b02 	vpop	{d8}
 8014182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014186:	465b      	mov	r3, fp
 8014188:	2b00      	cmp	r3, #0
 801418a:	d1d7      	bne.n	801413c <rcl_wait+0x25c>
 801418c:	e72e      	b.n	8013fec <rcl_wait+0x10c>
 801418e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8014192:	430b      	orrs	r3, r1
 8014194:	bf08      	it	eq
 8014196:	4691      	moveq	r9, r2
 8014198:	f43f af21 	beq.w	8013fde <rcl_wait+0xfe>
 801419c:	9b04      	ldr	r3, [sp, #16]
 801419e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80141a2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	9b05      	ldr	r3, [sp, #20]
 80141aa:	f173 0300 	sbcs.w	r3, r3, #0
 80141ae:	f04f 0300 	mov.w	r3, #0
 80141b2:	4699      	mov	r9, r3
 80141b4:	dac2      	bge.n	801413c <rcl_wait+0x25c>
 80141b6:	e719      	b.n	8013fec <rcl_wait+0x10c>
 80141b8:	ffffffff 	.word	0xffffffff
 80141bc:	7fffffff 	.word	0x7fffffff
 80141c0:	3b9aca00 	.word	0x3b9aca00
 80141c4:	00000000 	.word	0x00000000

080141c8 <rcl_action_take_goal_response>:
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d039      	beq.n	8014240 <rcl_action_take_goal_response+0x78>
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	4604      	mov	r4, r0
 80141d0:	6800      	ldr	r0, [r0, #0]
 80141d2:	b380      	cbz	r0, 8014236 <rcl_action_take_goal_response+0x6e>
 80141d4:	460d      	mov	r5, r1
 80141d6:	4616      	mov	r6, r2
 80141d8:	f7fd ffc2 	bl	8012160 <rcl_client_is_valid>
 80141dc:	b330      	cbz	r0, 801422c <rcl_action_take_goal_response+0x64>
 80141de:	6820      	ldr	r0, [r4, #0]
 80141e0:	3004      	adds	r0, #4
 80141e2:	f7fd ffbd 	bl	8012160 <rcl_client_is_valid>
 80141e6:	b308      	cbz	r0, 801422c <rcl_action_take_goal_response+0x64>
 80141e8:	6820      	ldr	r0, [r4, #0]
 80141ea:	3008      	adds	r0, #8
 80141ec:	f7fd ffb8 	bl	8012160 <rcl_client_is_valid>
 80141f0:	b1e0      	cbz	r0, 801422c <rcl_action_take_goal_response+0x64>
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	300c      	adds	r0, #12
 80141f6:	f7ff f801 	bl	80131fc <rcl_subscription_is_valid>
 80141fa:	b1b8      	cbz	r0, 801422c <rcl_action_take_goal_response+0x64>
 80141fc:	6820      	ldr	r0, [r4, #0]
 80141fe:	3010      	adds	r0, #16
 8014200:	f7fe fffc 	bl	80131fc <rcl_subscription_is_valid>
 8014204:	b190      	cbz	r0, 801422c <rcl_action_take_goal_response+0x64>
 8014206:	b1cd      	cbz	r5, 801423c <rcl_action_take_goal_response+0x74>
 8014208:	b1c6      	cbz	r6, 801423c <rcl_action_take_goal_response+0x74>
 801420a:	6820      	ldr	r0, [r4, #0]
 801420c:	4632      	mov	r2, r6
 801420e:	4629      	mov	r1, r5
 8014210:	f7fd ff5e 	bl	80120d0 <rcl_take_response>
 8014214:	b148      	cbz	r0, 801422a <rcl_action_take_goal_response+0x62>
 8014216:	280a      	cmp	r0, #10
 8014218:	d007      	beq.n	801422a <rcl_action_take_goal_response+0x62>
 801421a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801421e:	f640 0337 	movw	r3, #2103	@ 0x837
 8014222:	4290      	cmp	r0, r2
 8014224:	bf0c      	ite	eq
 8014226:	4618      	moveq	r0, r3
 8014228:	2001      	movne	r0, #1
 801422a:	bd70      	pop	{r4, r5, r6, pc}
 801422c:	f7f7 fb94 	bl	800b958 <rcutils_reset_error>
 8014230:	f640 0036 	movw	r0, #2102	@ 0x836
 8014234:	bd70      	pop	{r4, r5, r6, pc}
 8014236:	f640 0036 	movw	r0, #2102	@ 0x836
 801423a:	bd70      	pop	{r4, r5, r6, pc}
 801423c:	200b      	movs	r0, #11
 801423e:	bd70      	pop	{r4, r5, r6, pc}
 8014240:	f640 0036 	movw	r0, #2102	@ 0x836
 8014244:	4770      	bx	lr
 8014246:	bf00      	nop

08014248 <rcl_action_send_result_request>:
 8014248:	b390      	cbz	r0, 80142b0 <rcl_action_send_result_request+0x68>
 801424a:	b570      	push	{r4, r5, r6, lr}
 801424c:	4604      	mov	r4, r0
 801424e:	6800      	ldr	r0, [r0, #0]
 8014250:	b348      	cbz	r0, 80142a6 <rcl_action_send_result_request+0x5e>
 8014252:	460d      	mov	r5, r1
 8014254:	4616      	mov	r6, r2
 8014256:	f7fd ff83 	bl	8012160 <rcl_client_is_valid>
 801425a:	b1f8      	cbz	r0, 801429c <rcl_action_send_result_request+0x54>
 801425c:	6820      	ldr	r0, [r4, #0]
 801425e:	3004      	adds	r0, #4
 8014260:	f7fd ff7e 	bl	8012160 <rcl_client_is_valid>
 8014264:	b1d0      	cbz	r0, 801429c <rcl_action_send_result_request+0x54>
 8014266:	6820      	ldr	r0, [r4, #0]
 8014268:	3008      	adds	r0, #8
 801426a:	f7fd ff79 	bl	8012160 <rcl_client_is_valid>
 801426e:	b1a8      	cbz	r0, 801429c <rcl_action_send_result_request+0x54>
 8014270:	6820      	ldr	r0, [r4, #0]
 8014272:	300c      	adds	r0, #12
 8014274:	f7fe ffc2 	bl	80131fc <rcl_subscription_is_valid>
 8014278:	b180      	cbz	r0, 801429c <rcl_action_send_result_request+0x54>
 801427a:	6820      	ldr	r0, [r4, #0]
 801427c:	3010      	adds	r0, #16
 801427e:	f7fe ffbd 	bl	80131fc <rcl_subscription_is_valid>
 8014282:	b158      	cbz	r0, 801429c <rcl_action_send_result_request+0x54>
 8014284:	b195      	cbz	r5, 80142ac <rcl_action_send_result_request+0x64>
 8014286:	b18e      	cbz	r6, 80142ac <rcl_action_send_result_request+0x64>
 8014288:	6820      	ldr	r0, [r4, #0]
 801428a:	4632      	mov	r2, r6
 801428c:	4629      	mov	r1, r5
 801428e:	3008      	adds	r0, #8
 8014290:	f7fd fee8 	bl	8012064 <rcl_send_request>
 8014294:	3800      	subs	r0, #0
 8014296:	bf18      	it	ne
 8014298:	2001      	movne	r0, #1
 801429a:	bd70      	pop	{r4, r5, r6, pc}
 801429c:	f7f7 fb5c 	bl	800b958 <rcutils_reset_error>
 80142a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80142a4:	bd70      	pop	{r4, r5, r6, pc}
 80142a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80142aa:	bd70      	pop	{r4, r5, r6, pc}
 80142ac:	200b      	movs	r0, #11
 80142ae:	bd70      	pop	{r4, r5, r6, pc}
 80142b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80142b4:	4770      	bx	lr
 80142b6:	bf00      	nop

080142b8 <rcl_action_take_result_response>:
 80142b8:	2800      	cmp	r0, #0
 80142ba:	d03a      	beq.n	8014332 <rcl_action_take_result_response+0x7a>
 80142bc:	b570      	push	{r4, r5, r6, lr}
 80142be:	4604      	mov	r4, r0
 80142c0:	6800      	ldr	r0, [r0, #0]
 80142c2:	b388      	cbz	r0, 8014328 <rcl_action_take_result_response+0x70>
 80142c4:	460d      	mov	r5, r1
 80142c6:	4616      	mov	r6, r2
 80142c8:	f7fd ff4a 	bl	8012160 <rcl_client_is_valid>
 80142cc:	b338      	cbz	r0, 801431e <rcl_action_take_result_response+0x66>
 80142ce:	6820      	ldr	r0, [r4, #0]
 80142d0:	3004      	adds	r0, #4
 80142d2:	f7fd ff45 	bl	8012160 <rcl_client_is_valid>
 80142d6:	b310      	cbz	r0, 801431e <rcl_action_take_result_response+0x66>
 80142d8:	6820      	ldr	r0, [r4, #0]
 80142da:	3008      	adds	r0, #8
 80142dc:	f7fd ff40 	bl	8012160 <rcl_client_is_valid>
 80142e0:	b1e8      	cbz	r0, 801431e <rcl_action_take_result_response+0x66>
 80142e2:	6820      	ldr	r0, [r4, #0]
 80142e4:	300c      	adds	r0, #12
 80142e6:	f7fe ff89 	bl	80131fc <rcl_subscription_is_valid>
 80142ea:	b1c0      	cbz	r0, 801431e <rcl_action_take_result_response+0x66>
 80142ec:	6820      	ldr	r0, [r4, #0]
 80142ee:	3010      	adds	r0, #16
 80142f0:	f7fe ff84 	bl	80131fc <rcl_subscription_is_valid>
 80142f4:	b198      	cbz	r0, 801431e <rcl_action_take_result_response+0x66>
 80142f6:	b1d5      	cbz	r5, 801432e <rcl_action_take_result_response+0x76>
 80142f8:	b1ce      	cbz	r6, 801432e <rcl_action_take_result_response+0x76>
 80142fa:	6820      	ldr	r0, [r4, #0]
 80142fc:	4632      	mov	r2, r6
 80142fe:	4629      	mov	r1, r5
 8014300:	3008      	adds	r0, #8
 8014302:	f7fd fee5 	bl	80120d0 <rcl_take_response>
 8014306:	b148      	cbz	r0, 801431c <rcl_action_take_result_response+0x64>
 8014308:	280a      	cmp	r0, #10
 801430a:	d007      	beq.n	801431c <rcl_action_take_result_response+0x64>
 801430c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014310:	f640 0337 	movw	r3, #2103	@ 0x837
 8014314:	4290      	cmp	r0, r2
 8014316:	bf0c      	ite	eq
 8014318:	4618      	moveq	r0, r3
 801431a:	2001      	movne	r0, #1
 801431c:	bd70      	pop	{r4, r5, r6, pc}
 801431e:	f7f7 fb1b 	bl	800b958 <rcutils_reset_error>
 8014322:	f640 0036 	movw	r0, #2102	@ 0x836
 8014326:	bd70      	pop	{r4, r5, r6, pc}
 8014328:	f640 0036 	movw	r0, #2102	@ 0x836
 801432c:	bd70      	pop	{r4, r5, r6, pc}
 801432e:	200b      	movs	r0, #11
 8014330:	bd70      	pop	{r4, r5, r6, pc}
 8014332:	f640 0036 	movw	r0, #2102	@ 0x836
 8014336:	4770      	bx	lr

08014338 <rcl_action_take_cancel_response>:
 8014338:	2800      	cmp	r0, #0
 801433a:	d03a      	beq.n	80143b2 <rcl_action_take_cancel_response+0x7a>
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	4604      	mov	r4, r0
 8014340:	6800      	ldr	r0, [r0, #0]
 8014342:	b388      	cbz	r0, 80143a8 <rcl_action_take_cancel_response+0x70>
 8014344:	460d      	mov	r5, r1
 8014346:	4616      	mov	r6, r2
 8014348:	f7fd ff0a 	bl	8012160 <rcl_client_is_valid>
 801434c:	b338      	cbz	r0, 801439e <rcl_action_take_cancel_response+0x66>
 801434e:	6820      	ldr	r0, [r4, #0]
 8014350:	3004      	adds	r0, #4
 8014352:	f7fd ff05 	bl	8012160 <rcl_client_is_valid>
 8014356:	b310      	cbz	r0, 801439e <rcl_action_take_cancel_response+0x66>
 8014358:	6820      	ldr	r0, [r4, #0]
 801435a:	3008      	adds	r0, #8
 801435c:	f7fd ff00 	bl	8012160 <rcl_client_is_valid>
 8014360:	b1e8      	cbz	r0, 801439e <rcl_action_take_cancel_response+0x66>
 8014362:	6820      	ldr	r0, [r4, #0]
 8014364:	300c      	adds	r0, #12
 8014366:	f7fe ff49 	bl	80131fc <rcl_subscription_is_valid>
 801436a:	b1c0      	cbz	r0, 801439e <rcl_action_take_cancel_response+0x66>
 801436c:	6820      	ldr	r0, [r4, #0]
 801436e:	3010      	adds	r0, #16
 8014370:	f7fe ff44 	bl	80131fc <rcl_subscription_is_valid>
 8014374:	b198      	cbz	r0, 801439e <rcl_action_take_cancel_response+0x66>
 8014376:	b1d5      	cbz	r5, 80143ae <rcl_action_take_cancel_response+0x76>
 8014378:	b1ce      	cbz	r6, 80143ae <rcl_action_take_cancel_response+0x76>
 801437a:	6820      	ldr	r0, [r4, #0]
 801437c:	4632      	mov	r2, r6
 801437e:	4629      	mov	r1, r5
 8014380:	3004      	adds	r0, #4
 8014382:	f7fd fea5 	bl	80120d0 <rcl_take_response>
 8014386:	b148      	cbz	r0, 801439c <rcl_action_take_cancel_response+0x64>
 8014388:	280a      	cmp	r0, #10
 801438a:	d007      	beq.n	801439c <rcl_action_take_cancel_response+0x64>
 801438c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014390:	f640 0337 	movw	r3, #2103	@ 0x837
 8014394:	4290      	cmp	r0, r2
 8014396:	bf0c      	ite	eq
 8014398:	4618      	moveq	r0, r3
 801439a:	2001      	movne	r0, #1
 801439c:	bd70      	pop	{r4, r5, r6, pc}
 801439e:	f7f7 fadb 	bl	800b958 <rcutils_reset_error>
 80143a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80143a6:	bd70      	pop	{r4, r5, r6, pc}
 80143a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80143ac:	bd70      	pop	{r4, r5, r6, pc}
 80143ae:	200b      	movs	r0, #11
 80143b0:	bd70      	pop	{r4, r5, r6, pc}
 80143b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80143b6:	4770      	bx	lr

080143b8 <rcl_action_take_feedback>:
 80143b8:	2800      	cmp	r0, #0
 80143ba:	d038      	beq.n	801442e <rcl_action_take_feedback+0x76>
 80143bc:	b530      	push	{r4, r5, lr}
 80143be:	4604      	mov	r4, r0
 80143c0:	6800      	ldr	r0, [r0, #0]
 80143c2:	b091      	sub	sp, #68	@ 0x44
 80143c4:	b378      	cbz	r0, 8014426 <rcl_action_take_feedback+0x6e>
 80143c6:	460d      	mov	r5, r1
 80143c8:	f7fd feca 	bl	8012160 <rcl_client_is_valid>
 80143cc:	b328      	cbz	r0, 801441a <rcl_action_take_feedback+0x62>
 80143ce:	6820      	ldr	r0, [r4, #0]
 80143d0:	3004      	adds	r0, #4
 80143d2:	f7fd fec5 	bl	8012160 <rcl_client_is_valid>
 80143d6:	b300      	cbz	r0, 801441a <rcl_action_take_feedback+0x62>
 80143d8:	6820      	ldr	r0, [r4, #0]
 80143da:	3008      	adds	r0, #8
 80143dc:	f7fd fec0 	bl	8012160 <rcl_client_is_valid>
 80143e0:	b1d8      	cbz	r0, 801441a <rcl_action_take_feedback+0x62>
 80143e2:	6820      	ldr	r0, [r4, #0]
 80143e4:	300c      	adds	r0, #12
 80143e6:	f7fe ff09 	bl	80131fc <rcl_subscription_is_valid>
 80143ea:	b1b0      	cbz	r0, 801441a <rcl_action_take_feedback+0x62>
 80143ec:	6820      	ldr	r0, [r4, #0]
 80143ee:	3010      	adds	r0, #16
 80143f0:	f7fe ff04 	bl	80131fc <rcl_subscription_is_valid>
 80143f4:	b188      	cbz	r0, 801441a <rcl_action_take_feedback+0x62>
 80143f6:	b1ed      	cbz	r5, 8014434 <rcl_action_take_feedback+0x7c>
 80143f8:	6820      	ldr	r0, [r4, #0]
 80143fa:	2300      	movs	r3, #0
 80143fc:	466a      	mov	r2, sp
 80143fe:	4629      	mov	r1, r5
 8014400:	300c      	adds	r0, #12
 8014402:	f7fe fe9d 	bl	8013140 <rcl_take>
 8014406:	b160      	cbz	r0, 8014422 <rcl_action_take_feedback+0x6a>
 8014408:	f240 1391 	movw	r3, #401	@ 0x191
 801440c:	4298      	cmp	r0, r3
 801440e:	d014      	beq.n	801443a <rcl_action_take_feedback+0x82>
 8014410:	280a      	cmp	r0, #10
 8014412:	bf18      	it	ne
 8014414:	2001      	movne	r0, #1
 8014416:	b011      	add	sp, #68	@ 0x44
 8014418:	bd30      	pop	{r4, r5, pc}
 801441a:	f7f7 fa9d 	bl	800b958 <rcutils_reset_error>
 801441e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014422:	b011      	add	sp, #68	@ 0x44
 8014424:	bd30      	pop	{r4, r5, pc}
 8014426:	f640 0036 	movw	r0, #2102	@ 0x836
 801442a:	b011      	add	sp, #68	@ 0x44
 801442c:	bd30      	pop	{r4, r5, pc}
 801442e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014432:	4770      	bx	lr
 8014434:	200b      	movs	r0, #11
 8014436:	b011      	add	sp, #68	@ 0x44
 8014438:	bd30      	pop	{r4, r5, pc}
 801443a:	f640 0037 	movw	r0, #2103	@ 0x837
 801443e:	e7f0      	b.n	8014422 <rcl_action_take_feedback+0x6a>

08014440 <rcl_action_wait_set_add_action_client>:
 8014440:	2800      	cmp	r0, #0
 8014442:	d048      	beq.n	80144d6 <rcl_action_wait_set_add_action_client+0x96>
 8014444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014446:	460c      	mov	r4, r1
 8014448:	2900      	cmp	r1, #0
 801444a:	d03c      	beq.n	80144c6 <rcl_action_wait_set_add_action_client+0x86>
 801444c:	4605      	mov	r5, r0
 801444e:	6808      	ldr	r0, [r1, #0]
 8014450:	2800      	cmp	r0, #0
 8014452:	d038      	beq.n	80144c6 <rcl_action_wait_set_add_action_client+0x86>
 8014454:	4617      	mov	r7, r2
 8014456:	461e      	mov	r6, r3
 8014458:	f7fd fe82 	bl	8012160 <rcl_client_is_valid>
 801445c:	b3b0      	cbz	r0, 80144cc <rcl_action_wait_set_add_action_client+0x8c>
 801445e:	6820      	ldr	r0, [r4, #0]
 8014460:	3004      	adds	r0, #4
 8014462:	f7fd fe7d 	bl	8012160 <rcl_client_is_valid>
 8014466:	b388      	cbz	r0, 80144cc <rcl_action_wait_set_add_action_client+0x8c>
 8014468:	6820      	ldr	r0, [r4, #0]
 801446a:	3008      	adds	r0, #8
 801446c:	f7fd fe78 	bl	8012160 <rcl_client_is_valid>
 8014470:	b360      	cbz	r0, 80144cc <rcl_action_wait_set_add_action_client+0x8c>
 8014472:	6820      	ldr	r0, [r4, #0]
 8014474:	300c      	adds	r0, #12
 8014476:	f7fe fec1 	bl	80131fc <rcl_subscription_is_valid>
 801447a:	b338      	cbz	r0, 80144cc <rcl_action_wait_set_add_action_client+0x8c>
 801447c:	6820      	ldr	r0, [r4, #0]
 801447e:	3010      	adds	r0, #16
 8014480:	f7fe febc 	bl	80131fc <rcl_subscription_is_valid>
 8014484:	b310      	cbz	r0, 80144cc <rcl_action_wait_set_add_action_client+0x8c>
 8014486:	6821      	ldr	r1, [r4, #0]
 8014488:	4628      	mov	r0, r5
 801448a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801448e:	f7ff fccf 	bl	8013e30 <rcl_wait_set_add_client>
 8014492:	b9b8      	cbnz	r0, 80144c4 <rcl_action_wait_set_add_action_client+0x84>
 8014494:	6821      	ldr	r1, [r4, #0]
 8014496:	4628      	mov	r0, r5
 8014498:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801449c:	3104      	adds	r1, #4
 801449e:	f7ff fcc7 	bl	8013e30 <rcl_wait_set_add_client>
 80144a2:	b978      	cbnz	r0, 80144c4 <rcl_action_wait_set_add_action_client+0x84>
 80144a4:	6821      	ldr	r1, [r4, #0]
 80144a6:	4628      	mov	r0, r5
 80144a8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80144ac:	3108      	adds	r1, #8
 80144ae:	f7ff fcbf 	bl	8013e30 <rcl_wait_set_add_client>
 80144b2:	b938      	cbnz	r0, 80144c4 <rcl_action_wait_set_add_action_client+0x84>
 80144b4:	6821      	ldr	r1, [r4, #0]
 80144b6:	4628      	mov	r0, r5
 80144b8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80144bc:	310c      	adds	r1, #12
 80144be:	f7ff f96f 	bl	80137a0 <rcl_wait_set_add_subscription>
 80144c2:	b158      	cbz	r0, 80144dc <rcl_action_wait_set_add_action_client+0x9c>
 80144c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80144ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144cc:	f7f7 fa44 	bl	800b958 <rcutils_reset_error>
 80144d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80144d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80144da:	4770      	bx	lr
 80144dc:	6821      	ldr	r1, [r4, #0]
 80144de:	4628      	mov	r0, r5
 80144e0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80144e4:	3110      	adds	r1, #16
 80144e6:	f7ff f95b 	bl	80137a0 <rcl_wait_set_add_subscription>
 80144ea:	2800      	cmp	r0, #0
 80144ec:	d1ea      	bne.n	80144c4 <rcl_action_wait_set_add_action_client+0x84>
 80144ee:	b11f      	cbz	r7, 80144f8 <rcl_action_wait_set_add_action_client+0xb8>
 80144f0:	6823      	ldr	r3, [r4, #0]
 80144f2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80144f6:	603b      	str	r3, [r7, #0]
 80144f8:	2e00      	cmp	r6, #0
 80144fa:	d0e3      	beq.n	80144c4 <rcl_action_wait_set_add_action_client+0x84>
 80144fc:	6823      	ldr	r3, [r4, #0]
 80144fe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014502:	6033      	str	r3, [r6, #0]
 8014504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014506:	bf00      	nop

08014508 <rcl_action_client_wait_set_get_entities_ready>:
 8014508:	2800      	cmp	r0, #0
 801450a:	f000 808d 	beq.w	8014628 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801450e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014512:	460c      	mov	r4, r1
 8014514:	2900      	cmp	r1, #0
 8014516:	d077      	beq.n	8014608 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014518:	4605      	mov	r5, r0
 801451a:	6808      	ldr	r0, [r1, #0]
 801451c:	2800      	cmp	r0, #0
 801451e:	d073      	beq.n	8014608 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014520:	4616      	mov	r6, r2
 8014522:	461f      	mov	r7, r3
 8014524:	f7fd fe1c 	bl	8012160 <rcl_client_is_valid>
 8014528:	2800      	cmp	r0, #0
 801452a:	d071      	beq.n	8014610 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801452c:	6820      	ldr	r0, [r4, #0]
 801452e:	3004      	adds	r0, #4
 8014530:	f7fd fe16 	bl	8012160 <rcl_client_is_valid>
 8014534:	2800      	cmp	r0, #0
 8014536:	d06b      	beq.n	8014610 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014538:	6820      	ldr	r0, [r4, #0]
 801453a:	3008      	adds	r0, #8
 801453c:	f7fd fe10 	bl	8012160 <rcl_client_is_valid>
 8014540:	2800      	cmp	r0, #0
 8014542:	d065      	beq.n	8014610 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014544:	6820      	ldr	r0, [r4, #0]
 8014546:	300c      	adds	r0, #12
 8014548:	f7fe fe58 	bl	80131fc <rcl_subscription_is_valid>
 801454c:	2800      	cmp	r0, #0
 801454e:	d05f      	beq.n	8014610 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014550:	6820      	ldr	r0, [r4, #0]
 8014552:	3010      	adds	r0, #16
 8014554:	f7fe fe52 	bl	80131fc <rcl_subscription_is_valid>
 8014558:	2800      	cmp	r0, #0
 801455a:	d059      	beq.n	8014610 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801455c:	2e00      	cmp	r6, #0
 801455e:	d060      	beq.n	8014622 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014560:	2f00      	cmp	r7, #0
 8014562:	d05e      	beq.n	8014622 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014564:	9b06      	ldr	r3, [sp, #24]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d05b      	beq.n	8014622 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801456a:	9b07      	ldr	r3, [sp, #28]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d058      	beq.n	8014622 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014570:	9b08      	ldr	r3, [sp, #32]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d055      	beq.n	8014622 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014576:	6823      	ldr	r3, [r4, #0]
 8014578:	686a      	ldr	r2, [r5, #4]
 801457a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801457e:	428a      	cmp	r2, r1
 8014580:	d94c      	bls.n	801461c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014582:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8014586:	4282      	cmp	r2, r0
 8014588:	d948      	bls.n	801461c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801458a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801458e:	69ea      	ldr	r2, [r5, #28]
 8014590:	42a2      	cmp	r2, r4
 8014592:	d943      	bls.n	801461c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014594:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014598:	4562      	cmp	r2, ip
 801459a:	d93f      	bls.n	801461c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801459c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80145a0:	4572      	cmp	r2, lr
 80145a2:	d93b      	bls.n	801461c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80145a4:	69aa      	ldr	r2, [r5, #24]
 80145a6:	682d      	ldr	r5, [r5, #0]
 80145a8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80145ac:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80145b0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80145b4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80145b8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80145bc:	f103 0c0c 	add.w	ip, r3, #12
 80145c0:	eba5 050c 	sub.w	r5, r5, ip
 80145c4:	fab5 f585 	clz	r5, r5
 80145c8:	096d      	lsrs	r5, r5, #5
 80145ca:	7035      	strb	r5, [r6, #0]
 80145cc:	f103 0510 	add.w	r5, r3, #16
 80145d0:	1b64      	subs	r4, r4, r5
 80145d2:	fab4 f484 	clz	r4, r4
 80145d6:	0964      	lsrs	r4, r4, #5
 80145d8:	703c      	strb	r4, [r7, #0]
 80145da:	eba3 0008 	sub.w	r0, r3, r8
 80145de:	1d1c      	adds	r4, r3, #4
 80145e0:	3308      	adds	r3, #8
 80145e2:	1ad3      	subs	r3, r2, r3
 80145e4:	fab0 f080 	clz	r0, r0
 80145e8:	9a06      	ldr	r2, [sp, #24]
 80145ea:	0940      	lsrs	r0, r0, #5
 80145ec:	1b09      	subs	r1, r1, r4
 80145ee:	7010      	strb	r0, [r2, #0]
 80145f0:	fab1 f181 	clz	r1, r1
 80145f4:	9a07      	ldr	r2, [sp, #28]
 80145f6:	0949      	lsrs	r1, r1, #5
 80145f8:	7011      	strb	r1, [r2, #0]
 80145fa:	fab3 f383 	clz	r3, r3
 80145fe:	9a08      	ldr	r2, [sp, #32]
 8014600:	095b      	lsrs	r3, r3, #5
 8014602:	2000      	movs	r0, #0
 8014604:	7013      	strb	r3, [r2, #0]
 8014606:	e001      	b.n	801460c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014608:	f640 0036 	movw	r0, #2102	@ 0x836
 801460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014610:	f7f7 f9a2 	bl	800b958 <rcutils_reset_error>
 8014614:	f640 0036 	movw	r0, #2102	@ 0x836
 8014618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801461c:	2001      	movs	r0, #1
 801461e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014622:	200b      	movs	r0, #11
 8014624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014628:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801462c:	4770      	bx	lr
 801462e:	bf00      	nop

08014630 <rcl_action_take_goal_request>:
 8014630:	2800      	cmp	r0, #0
 8014632:	d039      	beq.n	80146a8 <rcl_action_take_goal_request+0x78>
 8014634:	b570      	push	{r4, r5, r6, lr}
 8014636:	4604      	mov	r4, r0
 8014638:	6800      	ldr	r0, [r0, #0]
 801463a:	b380      	cbz	r0, 801469e <rcl_action_take_goal_request+0x6e>
 801463c:	460d      	mov	r5, r1
 801463e:	4616      	mov	r6, r2
 8014640:	f7fe fc98 	bl	8012f74 <rcl_service_is_valid>
 8014644:	b330      	cbz	r0, 8014694 <rcl_action_take_goal_request+0x64>
 8014646:	6820      	ldr	r0, [r4, #0]
 8014648:	3004      	adds	r0, #4
 801464a:	f7fe fc93 	bl	8012f74 <rcl_service_is_valid>
 801464e:	b308      	cbz	r0, 8014694 <rcl_action_take_goal_request+0x64>
 8014650:	6820      	ldr	r0, [r4, #0]
 8014652:	3008      	adds	r0, #8
 8014654:	f7fe fc8e 	bl	8012f74 <rcl_service_is_valid>
 8014658:	b1e0      	cbz	r0, 8014694 <rcl_action_take_goal_request+0x64>
 801465a:	6820      	ldr	r0, [r4, #0]
 801465c:	300c      	adds	r0, #12
 801465e:	f7f6 f979 	bl	800a954 <rcl_publisher_is_valid>
 8014662:	b1b8      	cbz	r0, 8014694 <rcl_action_take_goal_request+0x64>
 8014664:	6820      	ldr	r0, [r4, #0]
 8014666:	3010      	adds	r0, #16
 8014668:	f7f6 f974 	bl	800a954 <rcl_publisher_is_valid>
 801466c:	b190      	cbz	r0, 8014694 <rcl_action_take_goal_request+0x64>
 801466e:	b1cd      	cbz	r5, 80146a4 <rcl_action_take_goal_request+0x74>
 8014670:	b1c6      	cbz	r6, 80146a4 <rcl_action_take_goal_request+0x74>
 8014672:	6820      	ldr	r0, [r4, #0]
 8014674:	4632      	mov	r2, r6
 8014676:	4629      	mov	r1, r5
 8014678:	f7fe fc24 	bl	8012ec4 <rcl_take_request>
 801467c:	b148      	cbz	r0, 8014692 <rcl_action_take_goal_request+0x62>
 801467e:	280a      	cmp	r0, #10
 8014680:	d007      	beq.n	8014692 <rcl_action_take_goal_request+0x62>
 8014682:	f240 2259 	movw	r2, #601	@ 0x259
 8014686:	f640 0399 	movw	r3, #2201	@ 0x899
 801468a:	4290      	cmp	r0, r2
 801468c:	bf0c      	ite	eq
 801468e:	4618      	moveq	r0, r3
 8014690:	2001      	movne	r0, #1
 8014692:	bd70      	pop	{r4, r5, r6, pc}
 8014694:	f7f7 f960 	bl	800b958 <rcutils_reset_error>
 8014698:	f640 0098 	movw	r0, #2200	@ 0x898
 801469c:	bd70      	pop	{r4, r5, r6, pc}
 801469e:	f640 0098 	movw	r0, #2200	@ 0x898
 80146a2:	bd70      	pop	{r4, r5, r6, pc}
 80146a4:	200b      	movs	r0, #11
 80146a6:	bd70      	pop	{r4, r5, r6, pc}
 80146a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80146ac:	4770      	bx	lr
 80146ae:	bf00      	nop

080146b0 <rcl_action_send_goal_response>:
 80146b0:	b390      	cbz	r0, 8014718 <rcl_action_send_goal_response+0x68>
 80146b2:	b570      	push	{r4, r5, r6, lr}
 80146b4:	4604      	mov	r4, r0
 80146b6:	6800      	ldr	r0, [r0, #0]
 80146b8:	b348      	cbz	r0, 801470e <rcl_action_send_goal_response+0x5e>
 80146ba:	460d      	mov	r5, r1
 80146bc:	4616      	mov	r6, r2
 80146be:	f7fe fc59 	bl	8012f74 <rcl_service_is_valid>
 80146c2:	b1f8      	cbz	r0, 8014704 <rcl_action_send_goal_response+0x54>
 80146c4:	6820      	ldr	r0, [r4, #0]
 80146c6:	3004      	adds	r0, #4
 80146c8:	f7fe fc54 	bl	8012f74 <rcl_service_is_valid>
 80146cc:	b1d0      	cbz	r0, 8014704 <rcl_action_send_goal_response+0x54>
 80146ce:	6820      	ldr	r0, [r4, #0]
 80146d0:	3008      	adds	r0, #8
 80146d2:	f7fe fc4f 	bl	8012f74 <rcl_service_is_valid>
 80146d6:	b1a8      	cbz	r0, 8014704 <rcl_action_send_goal_response+0x54>
 80146d8:	6820      	ldr	r0, [r4, #0]
 80146da:	300c      	adds	r0, #12
 80146dc:	f7f6 f93a 	bl	800a954 <rcl_publisher_is_valid>
 80146e0:	b180      	cbz	r0, 8014704 <rcl_action_send_goal_response+0x54>
 80146e2:	6820      	ldr	r0, [r4, #0]
 80146e4:	3010      	adds	r0, #16
 80146e6:	f7f6 f935 	bl	800a954 <rcl_publisher_is_valid>
 80146ea:	b158      	cbz	r0, 8014704 <rcl_action_send_goal_response+0x54>
 80146ec:	b195      	cbz	r5, 8014714 <rcl_action_send_goal_response+0x64>
 80146ee:	b18e      	cbz	r6, 8014714 <rcl_action_send_goal_response+0x64>
 80146f0:	6820      	ldr	r0, [r4, #0]
 80146f2:	4632      	mov	r2, r6
 80146f4:	4629      	mov	r1, r5
 80146f6:	f7fe fc25 	bl	8012f44 <rcl_send_response>
 80146fa:	b110      	cbz	r0, 8014702 <rcl_action_send_goal_response+0x52>
 80146fc:	2802      	cmp	r0, #2
 80146fe:	bf18      	it	ne
 8014700:	2001      	movne	r0, #1
 8014702:	bd70      	pop	{r4, r5, r6, pc}
 8014704:	f7f7 f928 	bl	800b958 <rcutils_reset_error>
 8014708:	f640 0098 	movw	r0, #2200	@ 0x898
 801470c:	bd70      	pop	{r4, r5, r6, pc}
 801470e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014712:	bd70      	pop	{r4, r5, r6, pc}
 8014714:	200b      	movs	r0, #11
 8014716:	bd70      	pop	{r4, r5, r6, pc}
 8014718:	f640 0098 	movw	r0, #2200	@ 0x898
 801471c:	4770      	bx	lr
 801471e:	bf00      	nop

08014720 <rcl_action_take_result_request>:
 8014720:	2800      	cmp	r0, #0
 8014722:	d03a      	beq.n	801479a <rcl_action_take_result_request+0x7a>
 8014724:	b570      	push	{r4, r5, r6, lr}
 8014726:	4604      	mov	r4, r0
 8014728:	6800      	ldr	r0, [r0, #0]
 801472a:	b388      	cbz	r0, 8014790 <rcl_action_take_result_request+0x70>
 801472c:	460d      	mov	r5, r1
 801472e:	4616      	mov	r6, r2
 8014730:	f7fe fc20 	bl	8012f74 <rcl_service_is_valid>
 8014734:	b338      	cbz	r0, 8014786 <rcl_action_take_result_request+0x66>
 8014736:	6820      	ldr	r0, [r4, #0]
 8014738:	3004      	adds	r0, #4
 801473a:	f7fe fc1b 	bl	8012f74 <rcl_service_is_valid>
 801473e:	b310      	cbz	r0, 8014786 <rcl_action_take_result_request+0x66>
 8014740:	6820      	ldr	r0, [r4, #0]
 8014742:	3008      	adds	r0, #8
 8014744:	f7fe fc16 	bl	8012f74 <rcl_service_is_valid>
 8014748:	b1e8      	cbz	r0, 8014786 <rcl_action_take_result_request+0x66>
 801474a:	6820      	ldr	r0, [r4, #0]
 801474c:	300c      	adds	r0, #12
 801474e:	f7f6 f901 	bl	800a954 <rcl_publisher_is_valid>
 8014752:	b1c0      	cbz	r0, 8014786 <rcl_action_take_result_request+0x66>
 8014754:	6820      	ldr	r0, [r4, #0]
 8014756:	3010      	adds	r0, #16
 8014758:	f7f6 f8fc 	bl	800a954 <rcl_publisher_is_valid>
 801475c:	b198      	cbz	r0, 8014786 <rcl_action_take_result_request+0x66>
 801475e:	b1d5      	cbz	r5, 8014796 <rcl_action_take_result_request+0x76>
 8014760:	b1ce      	cbz	r6, 8014796 <rcl_action_take_result_request+0x76>
 8014762:	6820      	ldr	r0, [r4, #0]
 8014764:	4632      	mov	r2, r6
 8014766:	4629      	mov	r1, r5
 8014768:	3008      	adds	r0, #8
 801476a:	f7fe fbab 	bl	8012ec4 <rcl_take_request>
 801476e:	b148      	cbz	r0, 8014784 <rcl_action_take_result_request+0x64>
 8014770:	280a      	cmp	r0, #10
 8014772:	d007      	beq.n	8014784 <rcl_action_take_result_request+0x64>
 8014774:	f240 2259 	movw	r2, #601	@ 0x259
 8014778:	f640 0399 	movw	r3, #2201	@ 0x899
 801477c:	4290      	cmp	r0, r2
 801477e:	bf0c      	ite	eq
 8014780:	4618      	moveq	r0, r3
 8014782:	2001      	movne	r0, #1
 8014784:	bd70      	pop	{r4, r5, r6, pc}
 8014786:	f7f7 f8e7 	bl	800b958 <rcutils_reset_error>
 801478a:	f640 0098 	movw	r0, #2200	@ 0x898
 801478e:	bd70      	pop	{r4, r5, r6, pc}
 8014790:	f640 0098 	movw	r0, #2200	@ 0x898
 8014794:	bd70      	pop	{r4, r5, r6, pc}
 8014796:	200b      	movs	r0, #11
 8014798:	bd70      	pop	{r4, r5, r6, pc}
 801479a:	f640 0098 	movw	r0, #2200	@ 0x898
 801479e:	4770      	bx	lr

080147a0 <rcl_action_take_cancel_request>:
 80147a0:	2800      	cmp	r0, #0
 80147a2:	d03a      	beq.n	801481a <rcl_action_take_cancel_request+0x7a>
 80147a4:	b570      	push	{r4, r5, r6, lr}
 80147a6:	4604      	mov	r4, r0
 80147a8:	6800      	ldr	r0, [r0, #0]
 80147aa:	b388      	cbz	r0, 8014810 <rcl_action_take_cancel_request+0x70>
 80147ac:	460d      	mov	r5, r1
 80147ae:	4616      	mov	r6, r2
 80147b0:	f7fe fbe0 	bl	8012f74 <rcl_service_is_valid>
 80147b4:	b338      	cbz	r0, 8014806 <rcl_action_take_cancel_request+0x66>
 80147b6:	6820      	ldr	r0, [r4, #0]
 80147b8:	3004      	adds	r0, #4
 80147ba:	f7fe fbdb 	bl	8012f74 <rcl_service_is_valid>
 80147be:	b310      	cbz	r0, 8014806 <rcl_action_take_cancel_request+0x66>
 80147c0:	6820      	ldr	r0, [r4, #0]
 80147c2:	3008      	adds	r0, #8
 80147c4:	f7fe fbd6 	bl	8012f74 <rcl_service_is_valid>
 80147c8:	b1e8      	cbz	r0, 8014806 <rcl_action_take_cancel_request+0x66>
 80147ca:	6820      	ldr	r0, [r4, #0]
 80147cc:	300c      	adds	r0, #12
 80147ce:	f7f6 f8c1 	bl	800a954 <rcl_publisher_is_valid>
 80147d2:	b1c0      	cbz	r0, 8014806 <rcl_action_take_cancel_request+0x66>
 80147d4:	6820      	ldr	r0, [r4, #0]
 80147d6:	3010      	adds	r0, #16
 80147d8:	f7f6 f8bc 	bl	800a954 <rcl_publisher_is_valid>
 80147dc:	b198      	cbz	r0, 8014806 <rcl_action_take_cancel_request+0x66>
 80147de:	b1d5      	cbz	r5, 8014816 <rcl_action_take_cancel_request+0x76>
 80147e0:	b1ce      	cbz	r6, 8014816 <rcl_action_take_cancel_request+0x76>
 80147e2:	6820      	ldr	r0, [r4, #0]
 80147e4:	4632      	mov	r2, r6
 80147e6:	4629      	mov	r1, r5
 80147e8:	3004      	adds	r0, #4
 80147ea:	f7fe fb6b 	bl	8012ec4 <rcl_take_request>
 80147ee:	b148      	cbz	r0, 8014804 <rcl_action_take_cancel_request+0x64>
 80147f0:	280a      	cmp	r0, #10
 80147f2:	d007      	beq.n	8014804 <rcl_action_take_cancel_request+0x64>
 80147f4:	f240 2259 	movw	r2, #601	@ 0x259
 80147f8:	f640 0399 	movw	r3, #2201	@ 0x899
 80147fc:	4290      	cmp	r0, r2
 80147fe:	bf0c      	ite	eq
 8014800:	4618      	moveq	r0, r3
 8014802:	2001      	movne	r0, #1
 8014804:	bd70      	pop	{r4, r5, r6, pc}
 8014806:	f7f7 f8a7 	bl	800b958 <rcutils_reset_error>
 801480a:	f640 0098 	movw	r0, #2200	@ 0x898
 801480e:	bd70      	pop	{r4, r5, r6, pc}
 8014810:	f640 0098 	movw	r0, #2200	@ 0x898
 8014814:	bd70      	pop	{r4, r5, r6, pc}
 8014816:	200b      	movs	r0, #11
 8014818:	bd70      	pop	{r4, r5, r6, pc}
 801481a:	f640 0098 	movw	r0, #2200	@ 0x898
 801481e:	4770      	bx	lr

08014820 <rcl_action_send_cancel_response>:
 8014820:	b398      	cbz	r0, 801488a <rcl_action_send_cancel_response+0x6a>
 8014822:	b570      	push	{r4, r5, r6, lr}
 8014824:	4604      	mov	r4, r0
 8014826:	6800      	ldr	r0, [r0, #0]
 8014828:	b350      	cbz	r0, 8014880 <rcl_action_send_cancel_response+0x60>
 801482a:	460d      	mov	r5, r1
 801482c:	4616      	mov	r6, r2
 801482e:	f7fe fba1 	bl	8012f74 <rcl_service_is_valid>
 8014832:	b300      	cbz	r0, 8014876 <rcl_action_send_cancel_response+0x56>
 8014834:	6820      	ldr	r0, [r4, #0]
 8014836:	3004      	adds	r0, #4
 8014838:	f7fe fb9c 	bl	8012f74 <rcl_service_is_valid>
 801483c:	b1d8      	cbz	r0, 8014876 <rcl_action_send_cancel_response+0x56>
 801483e:	6820      	ldr	r0, [r4, #0]
 8014840:	3008      	adds	r0, #8
 8014842:	f7fe fb97 	bl	8012f74 <rcl_service_is_valid>
 8014846:	b1b0      	cbz	r0, 8014876 <rcl_action_send_cancel_response+0x56>
 8014848:	6820      	ldr	r0, [r4, #0]
 801484a:	300c      	adds	r0, #12
 801484c:	f7f6 f882 	bl	800a954 <rcl_publisher_is_valid>
 8014850:	b188      	cbz	r0, 8014876 <rcl_action_send_cancel_response+0x56>
 8014852:	6820      	ldr	r0, [r4, #0]
 8014854:	3010      	adds	r0, #16
 8014856:	f7f6 f87d 	bl	800a954 <rcl_publisher_is_valid>
 801485a:	b160      	cbz	r0, 8014876 <rcl_action_send_cancel_response+0x56>
 801485c:	b19d      	cbz	r5, 8014886 <rcl_action_send_cancel_response+0x66>
 801485e:	b196      	cbz	r6, 8014886 <rcl_action_send_cancel_response+0x66>
 8014860:	6820      	ldr	r0, [r4, #0]
 8014862:	4632      	mov	r2, r6
 8014864:	4629      	mov	r1, r5
 8014866:	3004      	adds	r0, #4
 8014868:	f7fe fb6c 	bl	8012f44 <rcl_send_response>
 801486c:	b110      	cbz	r0, 8014874 <rcl_action_send_cancel_response+0x54>
 801486e:	2802      	cmp	r0, #2
 8014870:	bf18      	it	ne
 8014872:	2001      	movne	r0, #1
 8014874:	bd70      	pop	{r4, r5, r6, pc}
 8014876:	f7f7 f86f 	bl	800b958 <rcutils_reset_error>
 801487a:	f640 0098 	movw	r0, #2200	@ 0x898
 801487e:	bd70      	pop	{r4, r5, r6, pc}
 8014880:	f640 0098 	movw	r0, #2200	@ 0x898
 8014884:	bd70      	pop	{r4, r5, r6, pc}
 8014886:	200b      	movs	r0, #11
 8014888:	bd70      	pop	{r4, r5, r6, pc}
 801488a:	f640 0098 	movw	r0, #2200	@ 0x898
 801488e:	4770      	bx	lr

08014890 <rcl_action_wait_set_add_action_server>:
 8014890:	2800      	cmp	r0, #0
 8014892:	d04d      	beq.n	8014930 <rcl_action_wait_set_add_action_server+0xa0>
 8014894:	b570      	push	{r4, r5, r6, lr}
 8014896:	460c      	mov	r4, r1
 8014898:	b159      	cbz	r1, 80148b2 <rcl_action_wait_set_add_action_server+0x22>
 801489a:	4605      	mov	r5, r0
 801489c:	6808      	ldr	r0, [r1, #0]
 801489e:	b140      	cbz	r0, 80148b2 <rcl_action_wait_set_add_action_server+0x22>
 80148a0:	4616      	mov	r6, r2
 80148a2:	f7fe fb67 	bl	8012f74 <rcl_service_is_valid>
 80148a6:	b120      	cbz	r0, 80148b2 <rcl_action_wait_set_add_action_server+0x22>
 80148a8:	6820      	ldr	r0, [r4, #0]
 80148aa:	3004      	adds	r0, #4
 80148ac:	f7fe fb62 	bl	8012f74 <rcl_service_is_valid>
 80148b0:	b910      	cbnz	r0, 80148b8 <rcl_action_wait_set_add_action_server+0x28>
 80148b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80148b6:	bd70      	pop	{r4, r5, r6, pc}
 80148b8:	6820      	ldr	r0, [r4, #0]
 80148ba:	3008      	adds	r0, #8
 80148bc:	f7fe fb5a 	bl	8012f74 <rcl_service_is_valid>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	d0f6      	beq.n	80148b2 <rcl_action_wait_set_add_action_server+0x22>
 80148c4:	6820      	ldr	r0, [r4, #0]
 80148c6:	300c      	adds	r0, #12
 80148c8:	f7f6 f85c 	bl	800a984 <rcl_publisher_is_valid_except_context>
 80148cc:	2800      	cmp	r0, #0
 80148ce:	d0f0      	beq.n	80148b2 <rcl_action_wait_set_add_action_server+0x22>
 80148d0:	6820      	ldr	r0, [r4, #0]
 80148d2:	3010      	adds	r0, #16
 80148d4:	f7f6 f856 	bl	800a984 <rcl_publisher_is_valid_except_context>
 80148d8:	2800      	cmp	r0, #0
 80148da:	d0ea      	beq.n	80148b2 <rcl_action_wait_set_add_action_server+0x22>
 80148dc:	6821      	ldr	r1, [r4, #0]
 80148de:	4628      	mov	r0, r5
 80148e0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80148e4:	f7ff fad0 	bl	8013e88 <rcl_wait_set_add_service>
 80148e8:	2800      	cmp	r0, #0
 80148ea:	d1e4      	bne.n	80148b6 <rcl_action_wait_set_add_action_server+0x26>
 80148ec:	6821      	ldr	r1, [r4, #0]
 80148ee:	4628      	mov	r0, r5
 80148f0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80148f4:	3104      	adds	r1, #4
 80148f6:	f7ff fac7 	bl	8013e88 <rcl_wait_set_add_service>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d1db      	bne.n	80148b6 <rcl_action_wait_set_add_action_server+0x26>
 80148fe:	6821      	ldr	r1, [r4, #0]
 8014900:	4628      	mov	r0, r5
 8014902:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8014906:	3108      	adds	r1, #8
 8014908:	f7ff fabe 	bl	8013e88 <rcl_wait_set_add_service>
 801490c:	2800      	cmp	r0, #0
 801490e:	d1d2      	bne.n	80148b6 <rcl_action_wait_set_add_action_server+0x26>
 8014910:	6821      	ldr	r1, [r4, #0]
 8014912:	4628      	mov	r0, r5
 8014914:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014918:	3114      	adds	r1, #20
 801491a:	f7ff fa59 	bl	8013dd0 <rcl_wait_set_add_timer>
 801491e:	2800      	cmp	r0, #0
 8014920:	d1c9      	bne.n	80148b6 <rcl_action_wait_set_add_action_server+0x26>
 8014922:	2e00      	cmp	r6, #0
 8014924:	d0c7      	beq.n	80148b6 <rcl_action_wait_set_add_action_server+0x26>
 8014926:	6823      	ldr	r3, [r4, #0]
 8014928:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801492c:	6033      	str	r3, [r6, #0]
 801492e:	bd70      	pop	{r4, r5, r6, pc}
 8014930:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014934:	4770      	bx	lr
 8014936:	bf00      	nop

08014938 <rcl_action_server_wait_set_get_entities_ready>:
 8014938:	2800      	cmp	r0, #0
 801493a:	d05a      	beq.n	80149f2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801493e:	460c      	mov	r4, r1
 8014940:	b161      	cbz	r1, 801495c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014942:	4605      	mov	r5, r0
 8014944:	6808      	ldr	r0, [r1, #0]
 8014946:	b148      	cbz	r0, 801495c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014948:	4616      	mov	r6, r2
 801494a:	461f      	mov	r7, r3
 801494c:	f7fe fb12 	bl	8012f74 <rcl_service_is_valid>
 8014950:	b120      	cbz	r0, 801495c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014952:	6820      	ldr	r0, [r4, #0]
 8014954:	3004      	adds	r0, #4
 8014956:	f7fe fb0d 	bl	8012f74 <rcl_service_is_valid>
 801495a:	b910      	cbnz	r0, 8014962 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801495c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014962:	6820      	ldr	r0, [r4, #0]
 8014964:	3008      	adds	r0, #8
 8014966:	f7fe fb05 	bl	8012f74 <rcl_service_is_valid>
 801496a:	2800      	cmp	r0, #0
 801496c:	d0f6      	beq.n	801495c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801496e:	6820      	ldr	r0, [r4, #0]
 8014970:	300c      	adds	r0, #12
 8014972:	f7f6 f807 	bl	800a984 <rcl_publisher_is_valid_except_context>
 8014976:	2800      	cmp	r0, #0
 8014978:	d0f0      	beq.n	801495c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801497a:	6820      	ldr	r0, [r4, #0]
 801497c:	3010      	adds	r0, #16
 801497e:	f7f6 f801 	bl	800a984 <rcl_publisher_is_valid_except_context>
 8014982:	2800      	cmp	r0, #0
 8014984:	d0ea      	beq.n	801495c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014986:	b3be      	cbz	r6, 80149f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014988:	b3b7      	cbz	r7, 80149f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801498a:	9b06      	ldr	r3, [sp, #24]
 801498c:	b3a3      	cbz	r3, 80149f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801498e:	9b07      	ldr	r3, [sp, #28]
 8014990:	b393      	cbz	r3, 80149f8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014992:	6821      	ldr	r1, [r4, #0]
 8014994:	692a      	ldr	r2, [r5, #16]
 8014996:	6a2c      	ldr	r4, [r5, #32]
 8014998:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801499c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80149a0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80149a4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80149a8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80149ac:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80149b0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80149b4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80149b8:	1a64      	subs	r4, r4, r1
 80149ba:	fab4 f484 	clz	r4, r4
 80149be:	0964      	lsrs	r4, r4, #5
 80149c0:	7034      	strb	r4, [r6, #0]
 80149c2:	1d0c      	adds	r4, r1, #4
 80149c4:	1b1b      	subs	r3, r3, r4
 80149c6:	fab3 f383 	clz	r3, r3
 80149ca:	095b      	lsrs	r3, r3, #5
 80149cc:	f101 0408 	add.w	r4, r1, #8
 80149d0:	703b      	strb	r3, [r7, #0]
 80149d2:	f101 0314 	add.w	r3, r1, #20
 80149d6:	1b01      	subs	r1, r0, r4
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	fab1 f181 	clz	r1, r1
 80149de:	9a06      	ldr	r2, [sp, #24]
 80149e0:	0949      	lsrs	r1, r1, #5
 80149e2:	7011      	strb	r1, [r2, #0]
 80149e4:	fab3 f383 	clz	r3, r3
 80149e8:	9a07      	ldr	r2, [sp, #28]
 80149ea:	095b      	lsrs	r3, r3, #5
 80149ec:	2000      	movs	r0, #0
 80149ee:	7013      	strb	r3, [r2, #0]
 80149f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80149f6:	4770      	bx	lr
 80149f8:	200b      	movs	r0, #11
 80149fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080149fc <_execute_event_handler>:
 80149fc:	2002      	movs	r0, #2
 80149fe:	4770      	bx	lr

08014a00 <_cancel_goal_event_handler>:
 8014a00:	2003      	movs	r0, #3
 8014a02:	4770      	bx	lr

08014a04 <_succeed_event_handler>:
 8014a04:	2004      	movs	r0, #4
 8014a06:	4770      	bx	lr

08014a08 <_abort_event_handler>:
 8014a08:	2006      	movs	r0, #6
 8014a0a:	4770      	bx	lr

08014a0c <_canceled_event_handler>:
 8014a0c:	2005      	movs	r0, #5
 8014a0e:	4770      	bx	lr

08014a10 <rcl_action_transition_goal_state>:
 8014a10:	b2c2      	uxtb	r2, r0
 8014a12:	2a06      	cmp	r2, #6
 8014a14:	d80c      	bhi.n	8014a30 <rcl_action_transition_goal_state+0x20>
 8014a16:	2904      	cmp	r1, #4
 8014a18:	d80a      	bhi.n	8014a30 <rcl_action_transition_goal_state+0x20>
 8014a1a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8014a1e:	b410      	push	{r4}
 8014a20:	1853      	adds	r3, r2, r1
 8014a22:	4c06      	ldr	r4, [pc, #24]	@ (8014a3c <rcl_action_transition_goal_state+0x2c>)
 8014a24:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014a28:	b123      	cbz	r3, 8014a34 <rcl_action_transition_goal_state+0x24>
 8014a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a2e:	4718      	bx	r3
 8014a30:	2000      	movs	r0, #0
 8014a32:	4770      	bx	lr
 8014a34:	2000      	movs	r0, #0
 8014a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014a3a:	4770      	bx	lr
 8014a3c:	0801c01c 	.word	0x0801c01c

08014a40 <rcl_action_get_zero_initialized_cancel_response>:
 8014a40:	b510      	push	{r4, lr}
 8014a42:	4c07      	ldr	r4, [pc, #28]	@ (8014a60 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014a44:	4686      	mov	lr, r0
 8014a46:	4684      	mov	ip, r0
 8014a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a54:	6823      	ldr	r3, [r4, #0]
 8014a56:	f8cc 3000 	str.w	r3, [ip]
 8014a5a:	4670      	mov	r0, lr
 8014a5c:	bd10      	pop	{r4, pc}
 8014a5e:	bf00      	nop
 8014a60:	0801c0a8 	.word	0x0801c0a8

08014a64 <rclc_action_send_result_request>:
 8014a64:	b1d0      	cbz	r0, 8014a9c <rclc_action_send_result_request+0x38>
 8014a66:	b500      	push	{lr}
 8014a68:	4684      	mov	ip, r0
 8014a6a:	b087      	sub	sp, #28
 8014a6c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014a70:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014a74:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014a78:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8014a7c:	f10d 0e08 	add.w	lr, sp, #8
 8014a80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a84:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014a88:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8014a8c:	a902      	add	r1, sp, #8
 8014a8e:	3010      	adds	r0, #16
 8014a90:	f7ff fbda 	bl	8014248 <rcl_action_send_result_request>
 8014a94:	b920      	cbnz	r0, 8014aa0 <rclc_action_send_result_request+0x3c>
 8014a96:	b007      	add	sp, #28
 8014a98:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a9c:	200b      	movs	r0, #11
 8014a9e:	4770      	bx	lr
 8014aa0:	9001      	str	r0, [sp, #4]
 8014aa2:	f7f6 ff59 	bl	800b958 <rcutils_reset_error>
 8014aa6:	9801      	ldr	r0, [sp, #4]
 8014aa8:	b007      	add	sp, #28
 8014aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8014aae:	bf00      	nop

08014ab0 <rclc_action_take_goal_handle>:
 8014ab0:	b160      	cbz	r0, 8014acc <rclc_action_take_goal_handle+0x1c>
 8014ab2:	6883      	ldr	r3, [r0, #8]
 8014ab4:	b143      	cbz	r3, 8014ac8 <rclc_action_take_goal_handle+0x18>
 8014ab6:	6819      	ldr	r1, [r3, #0]
 8014ab8:	6081      	str	r1, [r0, #8]
 8014aba:	2200      	movs	r2, #0
 8014abc:	721a      	strb	r2, [r3, #8]
 8014abe:	68c1      	ldr	r1, [r0, #12]
 8014ac0:	6019      	str	r1, [r3, #0]
 8014ac2:	621a      	str	r2, [r3, #32]
 8014ac4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8014ac6:	60c3      	str	r3, [r0, #12]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	4770      	bx	lr
 8014acc:	4603      	mov	r3, r0
 8014ace:	e7fb      	b.n	8014ac8 <rclc_action_take_goal_handle+0x18>

08014ad0 <rclc_action_remove_used_goal_handle>:
 8014ad0:	b180      	cbz	r0, 8014af4 <rclc_action_remove_used_goal_handle+0x24>
 8014ad2:	b179      	cbz	r1, 8014af4 <rclc_action_remove_used_goal_handle+0x24>
 8014ad4:	68c3      	ldr	r3, [r0, #12]
 8014ad6:	4299      	cmp	r1, r3
 8014ad8:	d00d      	beq.n	8014af6 <rclc_action_remove_used_goal_handle+0x26>
 8014ada:	b12b      	cbz	r3, 8014ae8 <rclc_action_remove_used_goal_handle+0x18>
 8014adc:	681a      	ldr	r2, [r3, #0]
 8014ade:	4291      	cmp	r1, r2
 8014ae0:	d003      	beq.n	8014aea <rclc_action_remove_used_goal_handle+0x1a>
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d1f9      	bne.n	8014adc <rclc_action_remove_used_goal_handle+0xc>
 8014ae8:	4770      	bx	lr
 8014aea:	680a      	ldr	r2, [r1, #0]
 8014aec:	601a      	str	r2, [r3, #0]
 8014aee:	6883      	ldr	r3, [r0, #8]
 8014af0:	600b      	str	r3, [r1, #0]
 8014af2:	6081      	str	r1, [r0, #8]
 8014af4:	4770      	bx	lr
 8014af6:	680b      	ldr	r3, [r1, #0]
 8014af8:	60c3      	str	r3, [r0, #12]
 8014afa:	e7f8      	b.n	8014aee <rclc_action_remove_used_goal_handle+0x1e>

08014afc <rclc_action_find_goal_handle_by_uuid>:
 8014afc:	b538      	push	{r3, r4, r5, lr}
 8014afe:	b180      	cbz	r0, 8014b22 <rclc_action_find_goal_handle_by_uuid+0x26>
 8014b00:	460d      	mov	r5, r1
 8014b02:	b181      	cbz	r1, 8014b26 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8014b04:	68c4      	ldr	r4, [r0, #12]
 8014b06:	b914      	cbnz	r4, 8014b0e <rclc_action_find_goal_handle_by_uuid+0x12>
 8014b08:	e009      	b.n	8014b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014b0a:	6824      	ldr	r4, [r4, #0]
 8014b0c:	b13c      	cbz	r4, 8014b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014b0e:	f104 0009 	add.w	r0, r4, #9
 8014b12:	2210      	movs	r2, #16
 8014b14:	4629      	mov	r1, r5
 8014b16:	f004 ff7c 	bl	8019a12 <memcmp>
 8014b1a:	2800      	cmp	r0, #0
 8014b1c:	d1f5      	bne.n	8014b0a <rclc_action_find_goal_handle_by_uuid+0xe>
 8014b1e:	4620      	mov	r0, r4
 8014b20:	bd38      	pop	{r3, r4, r5, pc}
 8014b22:	4604      	mov	r4, r0
 8014b24:	e7fb      	b.n	8014b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014b26:	460c      	mov	r4, r1
 8014b28:	e7f9      	b.n	8014b1e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014b2a:	bf00      	nop

08014b2c <rclc_action_find_first_handle_by_status>:
 8014b2c:	b140      	cbz	r0, 8014b40 <rclc_action_find_first_handle_by_status+0x14>
 8014b2e:	68c0      	ldr	r0, [r0, #12]
 8014b30:	b910      	cbnz	r0, 8014b38 <rclc_action_find_first_handle_by_status+0xc>
 8014b32:	e005      	b.n	8014b40 <rclc_action_find_first_handle_by_status+0x14>
 8014b34:	6800      	ldr	r0, [r0, #0]
 8014b36:	b118      	cbz	r0, 8014b40 <rclc_action_find_first_handle_by_status+0x14>
 8014b38:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014b3c:	428b      	cmp	r3, r1
 8014b3e:	d1f9      	bne.n	8014b34 <rclc_action_find_first_handle_by_status+0x8>
 8014b40:	4770      	bx	lr
 8014b42:	bf00      	nop

08014b44 <rclc_action_find_first_terminated_handle>:
 8014b44:	b140      	cbz	r0, 8014b58 <rclc_action_find_first_terminated_handle+0x14>
 8014b46:	68c0      	ldr	r0, [r0, #12]
 8014b48:	b910      	cbnz	r0, 8014b50 <rclc_action_find_first_terminated_handle+0xc>
 8014b4a:	e005      	b.n	8014b58 <rclc_action_find_first_terminated_handle+0x14>
 8014b4c:	6800      	ldr	r0, [r0, #0]
 8014b4e:	b118      	cbz	r0, 8014b58 <rclc_action_find_first_terminated_handle+0x14>
 8014b50:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014b54:	2b03      	cmp	r3, #3
 8014b56:	ddf9      	ble.n	8014b4c <rclc_action_find_first_terminated_handle+0x8>
 8014b58:	4770      	bx	lr
 8014b5a:	bf00      	nop

08014b5c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014b5c:	b170      	cbz	r0, 8014b7c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014b5e:	68c0      	ldr	r0, [r0, #12]
 8014b60:	b160      	cbz	r0, 8014b7c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014b62:	b410      	push	{r4}
 8014b64:	e001      	b.n	8014b6a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014b66:	6800      	ldr	r0, [r0, #0]
 8014b68:	b128      	cbz	r0, 8014b76 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014b6a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014b6e:	4299      	cmp	r1, r3
 8014b70:	bf08      	it	eq
 8014b72:	4294      	cmpeq	r4, r2
 8014b74:	d1f7      	bne.n	8014b66 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b7a:	4770      	bx	lr
 8014b7c:	4770      	bx	lr
 8014b7e:	bf00      	nop

08014b80 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014b80:	b170      	cbz	r0, 8014ba0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014b82:	68c0      	ldr	r0, [r0, #12]
 8014b84:	b160      	cbz	r0, 8014ba0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014b86:	b410      	push	{r4}
 8014b88:	e001      	b.n	8014b8e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014b8a:	6800      	ldr	r0, [r0, #0]
 8014b8c:	b128      	cbz	r0, 8014b9a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014b8e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014b92:	4299      	cmp	r1, r3
 8014b94:	bf08      	it	eq
 8014b96:	4294      	cmpeq	r4, r2
 8014b98:	d1f7      	bne.n	8014b8a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b9e:	4770      	bx	lr
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop

08014ba4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014ba4:	b170      	cbz	r0, 8014bc4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014ba6:	68c0      	ldr	r0, [r0, #12]
 8014ba8:	b160      	cbz	r0, 8014bc4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014baa:	b410      	push	{r4}
 8014bac:	e001      	b.n	8014bb2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014bae:	6800      	ldr	r0, [r0, #0]
 8014bb0:	b128      	cbz	r0, 8014bbe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014bb2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014bb6:	4299      	cmp	r1, r3
 8014bb8:	bf08      	it	eq
 8014bba:	4294      	cmpeq	r4, r2
 8014bbc:	d1f7      	bne.n	8014bae <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bc2:	4770      	bx	lr
 8014bc4:	4770      	bx	lr
 8014bc6:	bf00      	nop

08014bc8 <rclc_action_find_first_handle_with_goal_response>:
 8014bc8:	b140      	cbz	r0, 8014bdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8014bca:	68c0      	ldr	r0, [r0, #12]
 8014bcc:	b910      	cbnz	r0, 8014bd4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8014bce:	e005      	b.n	8014bdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8014bd0:	6800      	ldr	r0, [r0, #0]
 8014bd2:	b118      	cbz	r0, 8014bdc <rclc_action_find_first_handle_with_goal_response+0x14>
 8014bd4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d0f9      	beq.n	8014bd0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop

08014be0 <rclc_action_find_first_handle_with_result_response>:
 8014be0:	b140      	cbz	r0, 8014bf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8014be2:	68c0      	ldr	r0, [r0, #12]
 8014be4:	b910      	cbnz	r0, 8014bec <rclc_action_find_first_handle_with_result_response+0xc>
 8014be6:	e005      	b.n	8014bf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8014be8:	6800      	ldr	r0, [r0, #0]
 8014bea:	b118      	cbz	r0, 8014bf4 <rclc_action_find_first_handle_with_result_response+0x14>
 8014bec:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d0f9      	beq.n	8014be8 <rclc_action_find_first_handle_with_result_response+0x8>
 8014bf4:	4770      	bx	lr
 8014bf6:	bf00      	nop

08014bf8 <rclc_action_server_response_goal_request>:
 8014bf8:	b198      	cbz	r0, 8014c22 <rclc_action_server_response_goal_request+0x2a>
 8014bfa:	b510      	push	{r4, lr}
 8014bfc:	6844      	ldr	r4, [r0, #4]
 8014bfe:	b086      	sub	sp, #24
 8014c00:	2200      	movs	r2, #0
 8014c02:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014c06:	460b      	mov	r3, r1
 8014c08:	9205      	str	r2, [sp, #20]
 8014c0a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8014c0e:	aa03      	add	r2, sp, #12
 8014c10:	f104 0010 	add.w	r0, r4, #16
 8014c14:	f88d 300c 	strb.w	r3, [sp, #12]
 8014c18:	f7ff fd4a 	bl	80146b0 <rcl_action_send_goal_response>
 8014c1c:	b918      	cbnz	r0, 8014c26 <rclc_action_server_response_goal_request+0x2e>
 8014c1e:	b006      	add	sp, #24
 8014c20:	bd10      	pop	{r4, pc}
 8014c22:	200b      	movs	r0, #11
 8014c24:	4770      	bx	lr
 8014c26:	9001      	str	r0, [sp, #4]
 8014c28:	f7f6 fe96 	bl	800b958 <rcutils_reset_error>
 8014c2c:	9801      	ldr	r0, [sp, #4]
 8014c2e:	b006      	add	sp, #24
 8014c30:	bd10      	pop	{r4, pc}
 8014c32:	bf00      	nop
 8014c34:	0000      	movs	r0, r0
	...

08014c38 <rclc_action_server_goal_cancel_accept>:
 8014c38:	b310      	cbz	r0, 8014c80 <rclc_action_server_goal_cancel_accept+0x48>
 8014c3a:	b510      	push	{r4, lr}
 8014c3c:	b090      	sub	sp, #64	@ 0x40
 8014c3e:	4604      	mov	r4, r0
 8014c40:	a806      	add	r0, sp, #24
 8014c42:	f7ff fefd 	bl	8014a40 <rcl_action_get_zero_initialized_cancel_response>
 8014c46:	2300      	movs	r3, #0
 8014c48:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014c4c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014c50:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014c54:	f88d 3018 	strb.w	r3, [sp, #24]
 8014c58:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014c5c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014c60:	46ec      	mov	ip, sp
 8014c62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c66:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014c88 <rclc_action_server_goal_cancel_accept+0x50>
 8014c6a:	6860      	ldr	r0, [r4, #4]
 8014c6c:	aa06      	add	r2, sp, #24
 8014c6e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014c72:	3010      	adds	r0, #16
 8014c74:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014c78:	f7ff fdd2 	bl	8014820 <rcl_action_send_cancel_response>
 8014c7c:	b010      	add	sp, #64	@ 0x40
 8014c7e:	bd10      	pop	{r4, pc}
 8014c80:	200b      	movs	r0, #11
 8014c82:	4770      	bx	lr
 8014c84:	f3af 8000 	nop.w
 8014c88:	00000001 	.word	0x00000001
 8014c8c:	00000001 	.word	0x00000001

08014c90 <rclc_action_server_goal_cancel_reject>:
 8014c90:	b082      	sub	sp, #8
 8014c92:	b530      	push	{r4, r5, lr}
 8014c94:	b08b      	sub	sp, #44	@ 0x2c
 8014c96:	ac0e      	add	r4, sp, #56	@ 0x38
 8014c98:	e884 000c 	stmia.w	r4, {r2, r3}
 8014c9c:	b188      	cbz	r0, 8014cc2 <rclc_action_server_goal_cancel_reject+0x32>
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	a801      	add	r0, sp, #4
 8014ca2:	460d      	mov	r5, r1
 8014ca4:	f7ff fecc 	bl	8014a40 <rcl_action_get_zero_initialized_cancel_response>
 8014ca8:	aa01      	add	r2, sp, #4
 8014caa:	a90e      	add	r1, sp, #56	@ 0x38
 8014cac:	f104 0010 	add.w	r0, r4, #16
 8014cb0:	f88d 5004 	strb.w	r5, [sp, #4]
 8014cb4:	f7ff fdb4 	bl	8014820 <rcl_action_send_cancel_response>
 8014cb8:	b00b      	add	sp, #44	@ 0x2c
 8014cba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014cbe:	b002      	add	sp, #8
 8014cc0:	4770      	bx	lr
 8014cc2:	200b      	movs	r0, #11
 8014cc4:	b00b      	add	sp, #44	@ 0x2c
 8014cc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014cca:	b002      	add	sp, #8
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop

08014cd0 <__atomic_load_8>:
 8014cd0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014cd4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014cd8:	4a15      	ldr	r2, [pc, #84]	@ (8014d30 <__atomic_load_8+0x60>)
 8014cda:	4b16      	ldr	r3, [pc, #88]	@ (8014d34 <__atomic_load_8+0x64>)
 8014cdc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014ce0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014ce4:	fb02 f101 	mul.w	r1, r2, r1
 8014ce8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014cec:	fba3 2301 	umull	r2, r3, r3, r1
 8014cf0:	091b      	lsrs	r3, r3, #4
 8014cf2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014cf6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014cfa:	b4d0      	push	{r4, r6, r7}
 8014cfc:	4c0e      	ldr	r4, [pc, #56]	@ (8014d38 <__atomic_load_8+0x68>)
 8014cfe:	1ac9      	subs	r1, r1, r3
 8014d00:	1862      	adds	r2, r4, r1
 8014d02:	f04f 0c01 	mov.w	ip, #1
 8014d06:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014d0a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014d0e:	2e00      	cmp	r6, #0
 8014d10:	d1f9      	bne.n	8014d06 <__atomic_load_8+0x36>
 8014d12:	f3bf 8f5b 	dmb	ish
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d1f4      	bne.n	8014d06 <__atomic_load_8+0x36>
 8014d1c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014d20:	f3bf 8f5b 	dmb	ish
 8014d24:	5463      	strb	r3, [r4, r1]
 8014d26:	4630      	mov	r0, r6
 8014d28:	4639      	mov	r1, r7
 8014d2a:	bcd0      	pop	{r4, r6, r7}
 8014d2c:	4770      	bx	lr
 8014d2e:	bf00      	nop
 8014d30:	27d4eb2d 	.word	0x27d4eb2d
 8014d34:	b21642c9 	.word	0xb21642c9
 8014d38:	200157b0 	.word	0x200157b0

08014d3c <__atomic_store_8>:
 8014d3c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014d40:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014d44:	b570      	push	{r4, r5, r6, lr}
 8014d46:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014d4a:	4c14      	ldr	r4, [pc, #80]	@ (8014d9c <__atomic_store_8+0x60>)
 8014d4c:	4d14      	ldr	r5, [pc, #80]	@ (8014da0 <__atomic_store_8+0x64>)
 8014d4e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014d52:	fb04 f101 	mul.w	r1, r4, r1
 8014d56:	4c13      	ldr	r4, [pc, #76]	@ (8014da4 <__atomic_store_8+0x68>)
 8014d58:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014d5c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014d60:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014d64:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014d68:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014d6c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014d70:	eb05 0c0e 	add.w	ip, r5, lr
 8014d74:	f04f 0401 	mov.w	r4, #1
 8014d78:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014d7c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014d80:	2e00      	cmp	r6, #0
 8014d82:	d1f9      	bne.n	8014d78 <__atomic_store_8+0x3c>
 8014d84:	f3bf 8f5b 	dmb	ish
 8014d88:	b2c9      	uxtb	r1, r1
 8014d8a:	2900      	cmp	r1, #0
 8014d8c:	d1f4      	bne.n	8014d78 <__atomic_store_8+0x3c>
 8014d8e:	e9c0 2300 	strd	r2, r3, [r0]
 8014d92:	f3bf 8f5b 	dmb	ish
 8014d96:	f805 100e 	strb.w	r1, [r5, lr]
 8014d9a:	bd70      	pop	{r4, r5, r6, pc}
 8014d9c:	27d4eb2d 	.word	0x27d4eb2d
 8014da0:	200157b0 	.word	0x200157b0
 8014da4:	b21642c9 	.word	0xb21642c9

08014da8 <__atomic_exchange_8>:
 8014da8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014dac:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014db0:	4916      	ldr	r1, [pc, #88]	@ (8014e0c <__atomic_exchange_8+0x64>)
 8014db2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014db6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014dba:	fb01 fc0c 	mul.w	ip, r1, ip
 8014dbe:	4914      	ldr	r1, [pc, #80]	@ (8014e10 <__atomic_exchange_8+0x68>)
 8014dc0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014dc4:	b570      	push	{r4, r5, r6, lr}
 8014dc6:	4605      	mov	r5, r0
 8014dc8:	fba1 010c 	umull	r0, r1, r1, ip
 8014dcc:	0909      	lsrs	r1, r1, #4
 8014dce:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014dd2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8014e14 <__atomic_exchange_8+0x6c>)
 8014dd8:	ebac 0c01 	sub.w	ip, ip, r1
 8014ddc:	eb06 010c 	add.w	r1, r6, ip
 8014de0:	f04f 0e01 	mov.w	lr, #1
 8014de4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014de8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d1f9      	bne.n	8014de4 <__atomic_exchange_8+0x3c>
 8014df0:	f3bf 8f5b 	dmb	ish
 8014df4:	b2e4      	uxtb	r4, r4
 8014df6:	2c00      	cmp	r4, #0
 8014df8:	d1f4      	bne.n	8014de4 <__atomic_exchange_8+0x3c>
 8014dfa:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014dfe:	e9c5 2300 	strd	r2, r3, [r5]
 8014e02:	f3bf 8f5b 	dmb	ish
 8014e06:	f806 400c 	strb.w	r4, [r6, ip]
 8014e0a:	bd70      	pop	{r4, r5, r6, pc}
 8014e0c:	27d4eb2d 	.word	0x27d4eb2d
 8014e10:	b21642c9 	.word	0xb21642c9
 8014e14:	200157b0 	.word	0x200157b0

08014e18 <rcutils_get_env>:
 8014e18:	b168      	cbz	r0, 8014e36 <rcutils_get_env+0x1e>
 8014e1a:	b510      	push	{r4, lr}
 8014e1c:	460c      	mov	r4, r1
 8014e1e:	b129      	cbz	r1, 8014e2c <rcutils_get_env+0x14>
 8014e20:	f004 f8b2 	bl	8018f88 <getenv>
 8014e24:	b120      	cbz	r0, 8014e30 <rcutils_get_env+0x18>
 8014e26:	6020      	str	r0, [r4, #0]
 8014e28:	2000      	movs	r0, #0
 8014e2a:	bd10      	pop	{r4, pc}
 8014e2c:	4803      	ldr	r0, [pc, #12]	@ (8014e3c <rcutils_get_env+0x24>)
 8014e2e:	bd10      	pop	{r4, pc}
 8014e30:	4b03      	ldr	r3, [pc, #12]	@ (8014e40 <rcutils_get_env+0x28>)
 8014e32:	6023      	str	r3, [r4, #0]
 8014e34:	bd10      	pop	{r4, pc}
 8014e36:	4803      	ldr	r0, [pc, #12]	@ (8014e44 <rcutils_get_env+0x2c>)
 8014e38:	4770      	bx	lr
 8014e3a:	bf00      	nop
 8014e3c:	0801c0e8 	.word	0x0801c0e8
 8014e40:	0801c6c0 	.word	0x0801c6c0
 8014e44:	0801c0cc 	.word	0x0801c0cc

08014e48 <rcutils_is_directory>:
 8014e48:	2000      	movs	r0, #0
 8014e4a:	4770      	bx	lr

08014e4c <rcutils_join_path>:
 8014e4c:	b082      	sub	sp, #8
 8014e4e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014e52:	2000      	movs	r0, #0
 8014e54:	b002      	add	sp, #8
 8014e56:	4770      	bx	lr

08014e58 <rcutils_to_native_path>:
 8014e58:	b084      	sub	sp, #16
 8014e5a:	a801      	add	r0, sp, #4
 8014e5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014e60:	b004      	add	sp, #16
 8014e62:	2000      	movs	r0, #0
 8014e64:	4770      	bx	lr
 8014e66:	bf00      	nop

08014e68 <rcutils_format_string_limit>:
 8014e68:	b40f      	push	{r0, r1, r2, r3}
 8014e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e6c:	b083      	sub	sp, #12
 8014e6e:	ac08      	add	r4, sp, #32
 8014e70:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014e72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014e76:	b34e      	cbz	r6, 8014ecc <rcutils_format_string_limit+0x64>
 8014e78:	a808      	add	r0, sp, #32
 8014e7a:	f7f6 fd49 	bl	800b910 <rcutils_allocator_is_valid>
 8014e7e:	b328      	cbz	r0, 8014ecc <rcutils_format_string_limit+0x64>
 8014e80:	2100      	movs	r1, #0
 8014e82:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014e84:	4632      	mov	r2, r6
 8014e86:	4608      	mov	r0, r1
 8014e88:	e9cd 3300 	strd	r3, r3, [sp]
 8014e8c:	f000 f8f4 	bl	8015078 <rcutils_vsnprintf>
 8014e90:	1c43      	adds	r3, r0, #1
 8014e92:	4605      	mov	r5, r0
 8014e94:	d01a      	beq.n	8014ecc <rcutils_format_string_limit+0x64>
 8014e96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014e9a:	1c47      	adds	r7, r0, #1
 8014e9c:	429f      	cmp	r7, r3
 8014e9e:	bf84      	itt	hi
 8014ea0:	461f      	movhi	r7, r3
 8014ea2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014ea6:	4638      	mov	r0, r7
 8014ea8:	9b08      	ldr	r3, [sp, #32]
 8014eaa:	4798      	blx	r3
 8014eac:	4604      	mov	r4, r0
 8014eae:	b168      	cbz	r0, 8014ecc <rcutils_format_string_limit+0x64>
 8014eb0:	9b01      	ldr	r3, [sp, #4]
 8014eb2:	4632      	mov	r2, r6
 8014eb4:	4639      	mov	r1, r7
 8014eb6:	f000 f8df 	bl	8015078 <rcutils_vsnprintf>
 8014eba:	2800      	cmp	r0, #0
 8014ebc:	db02      	blt.n	8014ec4 <rcutils_format_string_limit+0x5c>
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	5563      	strb	r3, [r4, r5]
 8014ec2:	e004      	b.n	8014ece <rcutils_format_string_limit+0x66>
 8014ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ec6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4798      	blx	r3
 8014ecc:	2400      	movs	r4, #0
 8014ece:	4620      	mov	r0, r4
 8014ed0:	b003      	add	sp, #12
 8014ed2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ed6:	b004      	add	sp, #16
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop

08014edc <rcutils_repl_str>:
 8014edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee0:	ed2d 8b02 	vpush	{d8}
 8014ee4:	b087      	sub	sp, #28
 8014ee6:	4680      	mov	r8, r0
 8014ee8:	4608      	mov	r0, r1
 8014eea:	f8cd 8004 	str.w	r8, [sp, #4]
 8014eee:	ee08 2a10 	vmov	s16, r2
 8014ef2:	468a      	mov	sl, r1
 8014ef4:	4699      	mov	r9, r3
 8014ef6:	f7eb f983 	bl	8000200 <strlen>
 8014efa:	2600      	movs	r6, #0
 8014efc:	4647      	mov	r7, r8
 8014efe:	9002      	str	r0, [sp, #8]
 8014f00:	46b3      	mov	fp, r6
 8014f02:	2510      	movs	r5, #16
 8014f04:	46b0      	mov	r8, r6
 8014f06:	e01d      	b.n	8014f44 <rcutils_repl_str+0x68>
 8014f08:	f10b 0b01 	add.w	fp, fp, #1
 8014f0c:	455e      	cmp	r6, fp
 8014f0e:	d211      	bcs.n	8014f34 <rcutils_repl_str+0x58>
 8014f10:	442e      	add	r6, r5
 8014f12:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014f16:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014f1a:	00b1      	lsls	r1, r6, #2
 8014f1c:	4798      	blx	r3
 8014f1e:	2800      	cmp	r0, #0
 8014f20:	f000 8088 	beq.w	8015034 <rcutils_repl_str+0x158>
 8014f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014f28:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014f2c:	4680      	mov	r8, r0
 8014f2e:	bf28      	it	cs
 8014f30:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014f34:	9a01      	ldr	r2, [sp, #4]
 8014f36:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014f3a:	1aa2      	subs	r2, r4, r2
 8014f3c:	f843 2c04 	str.w	r2, [r3, #-4]
 8014f40:	9b02      	ldr	r3, [sp, #8]
 8014f42:	18e7      	adds	r7, r4, r3
 8014f44:	4651      	mov	r1, sl
 8014f46:	4638      	mov	r0, r7
 8014f48:	f004 fd4d 	bl	80199e6 <strstr>
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	4640      	mov	r0, r8
 8014f50:	2c00      	cmp	r4, #0
 8014f52:	d1d9      	bne.n	8014f08 <rcutils_repl_str+0x2c>
 8014f54:	46b8      	mov	r8, r7
 8014f56:	4607      	mov	r7, r0
 8014f58:	4640      	mov	r0, r8
 8014f5a:	f7eb f951 	bl	8000200 <strlen>
 8014f5e:	9b01      	ldr	r3, [sp, #4]
 8014f60:	eba8 0303 	sub.w	r3, r8, r3
 8014f64:	181c      	adds	r4, r3, r0
 8014f66:	9404      	str	r4, [sp, #16]
 8014f68:	f1bb 0f00 	cmp.w	fp, #0
 8014f6c:	d04a      	beq.n	8015004 <rcutils_repl_str+0x128>
 8014f6e:	ee18 0a10 	vmov	r0, s16
 8014f72:	f7eb f945 	bl	8000200 <strlen>
 8014f76:	9b02      	ldr	r3, [sp, #8]
 8014f78:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014f7c:	1ac3      	subs	r3, r0, r3
 8014f7e:	fb0b 4303 	mla	r3, fp, r3, r4
 8014f82:	461a      	mov	r2, r3
 8014f84:	9305      	str	r3, [sp, #20]
 8014f86:	4606      	mov	r6, r0
 8014f88:	f8d9 3000 	ldr.w	r3, [r9]
 8014f8c:	1c50      	adds	r0, r2, #1
 8014f8e:	4798      	blx	r3
 8014f90:	9003      	str	r0, [sp, #12]
 8014f92:	2800      	cmp	r0, #0
 8014f94:	d04f      	beq.n	8015036 <rcutils_repl_str+0x15a>
 8014f96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014f9a:	683a      	ldr	r2, [r7, #0]
 8014f9c:	4641      	mov	r1, r8
 8014f9e:	f004 fdca 	bl	8019b36 <memcpy>
 8014fa2:	683d      	ldr	r5, [r7, #0]
 8014fa4:	9b03      	ldr	r3, [sp, #12]
 8014fa6:	9701      	str	r7, [sp, #4]
 8014fa8:	46ba      	mov	sl, r7
 8014faa:	441d      	add	r5, r3
 8014fac:	9f02      	ldr	r7, [sp, #8]
 8014fae:	f8cd 9008 	str.w	r9, [sp, #8]
 8014fb2:	2401      	movs	r4, #1
 8014fb4:	46d1      	mov	r9, sl
 8014fb6:	ee18 aa10 	vmov	sl, s16
 8014fba:	e00a      	b.n	8014fd2 <rcutils_repl_str+0xf6>
 8014fbc:	f8d9 5000 	ldr.w	r5, [r9]
 8014fc0:	1aaa      	subs	r2, r5, r2
 8014fc2:	1885      	adds	r5, r0, r2
 8014fc4:	f004 fdb7 	bl	8019b36 <memcpy>
 8014fc8:	45a3      	cmp	fp, r4
 8014fca:	f104 0201 	add.w	r2, r4, #1
 8014fce:	d935      	bls.n	801503c <rcutils_repl_str+0x160>
 8014fd0:	4614      	mov	r4, r2
 8014fd2:	4632      	mov	r2, r6
 8014fd4:	4651      	mov	r1, sl
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	f004 fdad 	bl	8019b36 <memcpy>
 8014fdc:	f859 2b04 	ldr.w	r2, [r9], #4
 8014fe0:	45a3      	cmp	fp, r4
 8014fe2:	443a      	add	r2, r7
 8014fe4:	eb05 0006 	add.w	r0, r5, r6
 8014fe8:	eb08 0102 	add.w	r1, r8, r2
 8014fec:	d1e6      	bne.n	8014fbc <rcutils_repl_str+0xe0>
 8014fee:	9b04      	ldr	r3, [sp, #16]
 8014ff0:	1a9a      	subs	r2, r3, r2
 8014ff2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014ff6:	f004 fd9e 	bl	8019b36 <memcpy>
 8014ffa:	9a03      	ldr	r2, [sp, #12]
 8014ffc:	9905      	ldr	r1, [sp, #20]
 8014ffe:	2300      	movs	r3, #0
 8015000:	5453      	strb	r3, [r2, r1]
 8015002:	e00b      	b.n	801501c <rcutils_repl_str+0x140>
 8015004:	4620      	mov	r0, r4
 8015006:	f8d9 3000 	ldr.w	r3, [r9]
 801500a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801500e:	3001      	adds	r0, #1
 8015010:	4798      	blx	r3
 8015012:	9003      	str	r0, [sp, #12]
 8015014:	b110      	cbz	r0, 801501c <rcutils_repl_str+0x140>
 8015016:	9901      	ldr	r1, [sp, #4]
 8015018:	f004 fd9b 	bl	8019b52 <strcpy>
 801501c:	4638      	mov	r0, r7
 801501e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015022:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015026:	4798      	blx	r3
 8015028:	9803      	ldr	r0, [sp, #12]
 801502a:	b007      	add	sp, #28
 801502c:	ecbd 8b02 	vpop	{d8}
 8015030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015034:	4647      	mov	r7, r8
 8015036:	2300      	movs	r3, #0
 8015038:	9303      	str	r3, [sp, #12]
 801503a:	e7ef      	b.n	801501c <rcutils_repl_str+0x140>
 801503c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8015040:	e7db      	b.n	8014ffa <rcutils_repl_str+0x11e>
 8015042:	bf00      	nop

08015044 <rcutils_snprintf>:
 8015044:	b40c      	push	{r2, r3}
 8015046:	b530      	push	{r4, r5, lr}
 8015048:	b083      	sub	sp, #12
 801504a:	ab06      	add	r3, sp, #24
 801504c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015050:	9301      	str	r3, [sp, #4]
 8015052:	b152      	cbz	r2, 801506a <rcutils_snprintf+0x26>
 8015054:	b138      	cbz	r0, 8015066 <rcutils_snprintf+0x22>
 8015056:	b141      	cbz	r1, 801506a <rcutils_snprintf+0x26>
 8015058:	f004 fad8 	bl	801960c <vsniprintf>
 801505c:	b003      	add	sp, #12
 801505e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015062:	b002      	add	sp, #8
 8015064:	4770      	bx	lr
 8015066:	2900      	cmp	r1, #0
 8015068:	d0f6      	beq.n	8015058 <rcutils_snprintf+0x14>
 801506a:	f004 fd37 	bl	8019adc <__errno>
 801506e:	2316      	movs	r3, #22
 8015070:	6003      	str	r3, [r0, #0]
 8015072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015076:	e7f1      	b.n	801505c <rcutils_snprintf+0x18>

08015078 <rcutils_vsnprintf>:
 8015078:	b570      	push	{r4, r5, r6, lr}
 801507a:	b13a      	cbz	r2, 801508c <rcutils_vsnprintf+0x14>
 801507c:	b120      	cbz	r0, 8015088 <rcutils_vsnprintf+0x10>
 801507e:	b129      	cbz	r1, 801508c <rcutils_vsnprintf+0x14>
 8015080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015084:	f004 bac2 	b.w	801960c <vsniprintf>
 8015088:	2900      	cmp	r1, #0
 801508a:	d0f9      	beq.n	8015080 <rcutils_vsnprintf+0x8>
 801508c:	f004 fd26 	bl	8019adc <__errno>
 8015090:	2316      	movs	r3, #22
 8015092:	6003      	str	r3, [r0, #0]
 8015094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015098:	bd70      	pop	{r4, r5, r6, pc}
 801509a:	bf00      	nop

0801509c <rcutils_strdup>:
 801509c:	b084      	sub	sp, #16
 801509e:	b570      	push	{r4, r5, r6, lr}
 80150a0:	b082      	sub	sp, #8
 80150a2:	ac07      	add	r4, sp, #28
 80150a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80150a8:	4605      	mov	r5, r0
 80150aa:	b1b0      	cbz	r0, 80150da <rcutils_strdup+0x3e>
 80150ac:	f7eb f8a8 	bl	8000200 <strlen>
 80150b0:	1c42      	adds	r2, r0, #1
 80150b2:	9b07      	ldr	r3, [sp, #28]
 80150b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80150b6:	9201      	str	r2, [sp, #4]
 80150b8:	4606      	mov	r6, r0
 80150ba:	4610      	mov	r0, r2
 80150bc:	4798      	blx	r3
 80150be:	4604      	mov	r4, r0
 80150c0:	b128      	cbz	r0, 80150ce <rcutils_strdup+0x32>
 80150c2:	9a01      	ldr	r2, [sp, #4]
 80150c4:	4629      	mov	r1, r5
 80150c6:	f004 fd36 	bl	8019b36 <memcpy>
 80150ca:	2300      	movs	r3, #0
 80150cc:	55a3      	strb	r3, [r4, r6]
 80150ce:	4620      	mov	r0, r4
 80150d0:	b002      	add	sp, #8
 80150d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150d6:	b004      	add	sp, #16
 80150d8:	4770      	bx	lr
 80150da:	4604      	mov	r4, r0
 80150dc:	e7f7      	b.n	80150ce <rcutils_strdup+0x32>
 80150de:	bf00      	nop

080150e0 <rcutils_strndup>:
 80150e0:	b082      	sub	sp, #8
 80150e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150e4:	ac06      	add	r4, sp, #24
 80150e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80150ea:	4605      	mov	r5, r0
 80150ec:	b188      	cbz	r0, 8015112 <rcutils_strndup+0x32>
 80150ee:	1c4f      	adds	r7, r1, #1
 80150f0:	460e      	mov	r6, r1
 80150f2:	4638      	mov	r0, r7
 80150f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80150f6:	4790      	blx	r2
 80150f8:	4604      	mov	r4, r0
 80150fa:	b128      	cbz	r0, 8015108 <rcutils_strndup+0x28>
 80150fc:	463a      	mov	r2, r7
 80150fe:	4629      	mov	r1, r5
 8015100:	f004 fd19 	bl	8019b36 <memcpy>
 8015104:	2300      	movs	r3, #0
 8015106:	55a3      	strb	r3, [r4, r6]
 8015108:	4620      	mov	r0, r4
 801510a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801510e:	b002      	add	sp, #8
 8015110:	4770      	bx	lr
 8015112:	4604      	mov	r4, r0
 8015114:	e7f8      	b.n	8015108 <rcutils_strndup+0x28>
 8015116:	bf00      	nop

08015118 <rcutils_get_zero_initialized_string_map>:
 8015118:	4b01      	ldr	r3, [pc, #4]	@ (8015120 <rcutils_get_zero_initialized_string_map+0x8>)
 801511a:	2000      	movs	r0, #0
 801511c:	6018      	str	r0, [r3, #0]
 801511e:	4770      	bx	lr
 8015120:	200157c8 	.word	0x200157c8

08015124 <rcutils_string_map_reserve>:
 8015124:	2800      	cmp	r0, #0
 8015126:	d05f      	beq.n	80151e8 <rcutils_string_map_reserve+0xc4>
 8015128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801512c:	460c      	mov	r4, r1
 801512e:	6801      	ldr	r1, [r0, #0]
 8015130:	b082      	sub	sp, #8
 8015132:	4605      	mov	r5, r0
 8015134:	b129      	cbz	r1, 8015142 <rcutils_string_map_reserve+0x1e>
 8015136:	68cb      	ldr	r3, [r1, #12]
 8015138:	42a3      	cmp	r3, r4
 801513a:	d906      	bls.n	801514a <rcutils_string_map_reserve+0x26>
 801513c:	461c      	mov	r4, r3
 801513e:	2900      	cmp	r1, #0
 8015140:	d1f9      	bne.n	8015136 <rcutils_string_map_reserve+0x12>
 8015142:	201f      	movs	r0, #31
 8015144:	b002      	add	sp, #8
 8015146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801514a:	688b      	ldr	r3, [r1, #8]
 801514c:	42a3      	cmp	r3, r4
 801514e:	d047      	beq.n	80151e0 <rcutils_string_map_reserve+0xbc>
 8015150:	6a0e      	ldr	r6, [r1, #32]
 8015152:	2c00      	cmp	r4, #0
 8015154:	d034      	beq.n	80151c0 <rcutils_string_map_reserve+0x9c>
 8015156:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801515a:	d243      	bcs.n	80151e4 <rcutils_string_map_reserve+0xc0>
 801515c:	00a7      	lsls	r7, r4, #2
 801515e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015162:	6808      	ldr	r0, [r1, #0]
 8015164:	4632      	mov	r2, r6
 8015166:	4639      	mov	r1, r7
 8015168:	47c0      	blx	r8
 801516a:	2800      	cmp	r0, #0
 801516c:	d03a      	beq.n	80151e4 <rcutils_string_map_reserve+0xc0>
 801516e:	682b      	ldr	r3, [r5, #0]
 8015170:	4632      	mov	r2, r6
 8015172:	6018      	str	r0, [r3, #0]
 8015174:	4639      	mov	r1, r7
 8015176:	6858      	ldr	r0, [r3, #4]
 8015178:	47c0      	blx	r8
 801517a:	2800      	cmp	r0, #0
 801517c:	d032      	beq.n	80151e4 <rcutils_string_map_reserve+0xc0>
 801517e:	682d      	ldr	r5, [r5, #0]
 8015180:	68ab      	ldr	r3, [r5, #8]
 8015182:	6068      	str	r0, [r5, #4]
 8015184:	42a3      	cmp	r3, r4
 8015186:	d226      	bcs.n	80151d6 <rcutils_string_map_reserve+0xb2>
 8015188:	682a      	ldr	r2, [r5, #0]
 801518a:	eb00 0c07 	add.w	ip, r0, r7
 801518e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015192:	45e6      	cmp	lr, ip
 8015194:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015198:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801519c:	d203      	bcs.n	80151a6 <rcutils_string_map_reserve+0x82>
 801519e:	eb02 0c07 	add.w	ip, r2, r7
 80151a2:	4566      	cmp	r6, ip
 80151a4:	d322      	bcc.n	80151ec <rcutils_string_map_reserve+0xc8>
 80151a6:	1ae3      	subs	r3, r4, r3
 80151a8:	009a      	lsls	r2, r3, #2
 80151aa:	4670      	mov	r0, lr
 80151ac:	2100      	movs	r1, #0
 80151ae:	9201      	str	r2, [sp, #4]
 80151b0:	f004 fc59 	bl	8019a66 <memset>
 80151b4:	9a01      	ldr	r2, [sp, #4]
 80151b6:	2100      	movs	r1, #0
 80151b8:	4630      	mov	r0, r6
 80151ba:	f004 fc54 	bl	8019a66 <memset>
 80151be:	e00a      	b.n	80151d6 <rcutils_string_map_reserve+0xb2>
 80151c0:	694f      	ldr	r7, [r1, #20]
 80151c2:	6808      	ldr	r0, [r1, #0]
 80151c4:	4631      	mov	r1, r6
 80151c6:	47b8      	blx	r7
 80151c8:	682b      	ldr	r3, [r5, #0]
 80151ca:	4631      	mov	r1, r6
 80151cc:	6858      	ldr	r0, [r3, #4]
 80151ce:	601c      	str	r4, [r3, #0]
 80151d0:	47b8      	blx	r7
 80151d2:	682d      	ldr	r5, [r5, #0]
 80151d4:	606c      	str	r4, [r5, #4]
 80151d6:	2000      	movs	r0, #0
 80151d8:	60ac      	str	r4, [r5, #8]
 80151da:	b002      	add	sp, #8
 80151dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e0:	2000      	movs	r0, #0
 80151e2:	e7af      	b.n	8015144 <rcutils_string_map_reserve+0x20>
 80151e4:	200a      	movs	r0, #10
 80151e6:	e7ad      	b.n	8015144 <rcutils_string_map_reserve+0x20>
 80151e8:	200b      	movs	r0, #11
 80151ea:	4770      	bx	lr
 80151ec:	1f0b      	subs	r3, r1, #4
 80151ee:	4418      	add	r0, r3
 80151f0:	4413      	add	r3, r2
 80151f2:	3a04      	subs	r2, #4
 80151f4:	4417      	add	r7, r2
 80151f6:	2200      	movs	r2, #0
 80151f8:	f843 2f04 	str.w	r2, [r3, #4]!
 80151fc:	42bb      	cmp	r3, r7
 80151fe:	f840 2f04 	str.w	r2, [r0, #4]!
 8015202:	d1f9      	bne.n	80151f8 <rcutils_string_map_reserve+0xd4>
 8015204:	e7e7      	b.n	80151d6 <rcutils_string_map_reserve+0xb2>
 8015206:	bf00      	nop

08015208 <rcutils_string_map_init>:
 8015208:	b082      	sub	sp, #8
 801520a:	b570      	push	{r4, r5, r6, lr}
 801520c:	ac04      	add	r4, sp, #16
 801520e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015212:	b380      	cbz	r0, 8015276 <rcutils_string_map_init+0x6e>
 8015214:	6806      	ldr	r6, [r0, #0]
 8015216:	4604      	mov	r4, r0
 8015218:	b12e      	cbz	r6, 8015226 <rcutils_string_map_init+0x1e>
 801521a:	251e      	movs	r5, #30
 801521c:	4628      	mov	r0, r5
 801521e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015222:	b002      	add	sp, #8
 8015224:	4770      	bx	lr
 8015226:	a804      	add	r0, sp, #16
 8015228:	460d      	mov	r5, r1
 801522a:	f7f6 fb71 	bl	800b910 <rcutils_allocator_is_valid>
 801522e:	b310      	cbz	r0, 8015276 <rcutils_string_map_init+0x6e>
 8015230:	9b04      	ldr	r3, [sp, #16]
 8015232:	9908      	ldr	r1, [sp, #32]
 8015234:	2024      	movs	r0, #36	@ 0x24
 8015236:	4798      	blx	r3
 8015238:	6020      	str	r0, [r4, #0]
 801523a:	b310      	cbz	r0, 8015282 <rcutils_string_map_init+0x7a>
 801523c:	f10d 0e10 	add.w	lr, sp, #16
 8015240:	e9c0 6600 	strd	r6, r6, [r0]
 8015244:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015248:	f100 0c10 	add.w	ip, r0, #16
 801524c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015254:	f8de 3000 	ldr.w	r3, [lr]
 8015258:	f8cc 3000 	str.w	r3, [ip]
 801525c:	4629      	mov	r1, r5
 801525e:	4620      	mov	r0, r4
 8015260:	f7ff ff60 	bl	8015124 <rcutils_string_map_reserve>
 8015264:	4605      	mov	r5, r0
 8015266:	2800      	cmp	r0, #0
 8015268:	d0d8      	beq.n	801521c <rcutils_string_map_init+0x14>
 801526a:	9b05      	ldr	r3, [sp, #20]
 801526c:	9908      	ldr	r1, [sp, #32]
 801526e:	6820      	ldr	r0, [r4, #0]
 8015270:	4798      	blx	r3
 8015272:	6026      	str	r6, [r4, #0]
 8015274:	e7d2      	b.n	801521c <rcutils_string_map_init+0x14>
 8015276:	250b      	movs	r5, #11
 8015278:	4628      	mov	r0, r5
 801527a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801527e:	b002      	add	sp, #8
 8015280:	4770      	bx	lr
 8015282:	250a      	movs	r5, #10
 8015284:	e7ca      	b.n	801521c <rcutils_string_map_init+0x14>
 8015286:	bf00      	nop

08015288 <rcutils_string_map_fini>:
 8015288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801528c:	b082      	sub	sp, #8
 801528e:	2800      	cmp	r0, #0
 8015290:	d03a      	beq.n	8015308 <rcutils_string_map_fini+0x80>
 8015292:	6804      	ldr	r4, [r0, #0]
 8015294:	4606      	mov	r6, r0
 8015296:	2c00      	cmp	r4, #0
 8015298:	d032      	beq.n	8015300 <rcutils_string_map_fini+0x78>
 801529a:	68a3      	ldr	r3, [r4, #8]
 801529c:	b32b      	cbz	r3, 80152ea <rcutils_string_map_fini+0x62>
 801529e:	2500      	movs	r5, #0
 80152a0:	6822      	ldr	r2, [r4, #0]
 80152a2:	462f      	mov	r7, r5
 80152a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80152a8:	b1e0      	cbz	r0, 80152e4 <rcutils_string_map_fini+0x5c>
 80152aa:	6a21      	ldr	r1, [r4, #32]
 80152ac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80152b0:	9101      	str	r1, [sp, #4]
 80152b2:	47c0      	blx	r8
 80152b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80152b8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80152bc:	9901      	ldr	r1, [sp, #4]
 80152be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80152c2:	47c0      	blx	r8
 80152c4:	68e3      	ldr	r3, [r4, #12]
 80152c6:	6862      	ldr	r2, [r4, #4]
 80152c8:	3b01      	subs	r3, #1
 80152ca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80152ce:	60e3      	str	r3, [r4, #12]
 80152d0:	6834      	ldr	r4, [r6, #0]
 80152d2:	68a3      	ldr	r3, [r4, #8]
 80152d4:	3501      	adds	r5, #1
 80152d6:	429d      	cmp	r5, r3
 80152d8:	d207      	bcs.n	80152ea <rcutils_string_map_fini+0x62>
 80152da:	6822      	ldr	r2, [r4, #0]
 80152dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80152e0:	2800      	cmp	r0, #0
 80152e2:	d1e2      	bne.n	80152aa <rcutils_string_map_fini+0x22>
 80152e4:	3501      	adds	r5, #1
 80152e6:	429d      	cmp	r5, r3
 80152e8:	d3dc      	bcc.n	80152a4 <rcutils_string_map_fini+0x1c>
 80152ea:	2100      	movs	r1, #0
 80152ec:	4630      	mov	r0, r6
 80152ee:	f7ff ff19 	bl	8015124 <rcutils_string_map_reserve>
 80152f2:	4604      	mov	r4, r0
 80152f4:	b920      	cbnz	r0, 8015300 <rcutils_string_map_fini+0x78>
 80152f6:	6830      	ldr	r0, [r6, #0]
 80152f8:	6943      	ldr	r3, [r0, #20]
 80152fa:	6a01      	ldr	r1, [r0, #32]
 80152fc:	4798      	blx	r3
 80152fe:	6034      	str	r4, [r6, #0]
 8015300:	4620      	mov	r0, r4
 8015302:	b002      	add	sp, #8
 8015304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015308:	240b      	movs	r4, #11
 801530a:	4620      	mov	r0, r4
 801530c:	b002      	add	sp, #8
 801530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015312:	bf00      	nop

08015314 <rcutils_string_map_getn>:
 8015314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015318:	b300      	cbz	r0, 801535c <rcutils_string_map_getn+0x48>
 801531a:	6807      	ldr	r7, [r0, #0]
 801531c:	b1ff      	cbz	r7, 801535e <rcutils_string_map_getn+0x4a>
 801531e:	4688      	mov	r8, r1
 8015320:	b1e1      	cbz	r1, 801535c <rcutils_string_map_getn+0x48>
 8015322:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015326:	683e      	ldr	r6, [r7, #0]
 8015328:	f1ba 0f00 	cmp.w	sl, #0
 801532c:	d016      	beq.n	801535c <rcutils_string_map_getn+0x48>
 801532e:	4691      	mov	r9, r2
 8015330:	3e04      	subs	r6, #4
 8015332:	2400      	movs	r4, #0
 8015334:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015338:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801533c:	4628      	mov	r0, r5
 801533e:	3401      	adds	r4, #1
 8015340:	b155      	cbz	r5, 8015358 <rcutils_string_map_getn+0x44>
 8015342:	f7ea ff5d 	bl	8000200 <strlen>
 8015346:	4548      	cmp	r0, r9
 8015348:	4602      	mov	r2, r0
 801534a:	4629      	mov	r1, r5
 801534c:	bf38      	it	cc
 801534e:	464a      	movcc	r2, r9
 8015350:	4640      	mov	r0, r8
 8015352:	f004 fb36 	bl	80199c2 <strncmp>
 8015356:	b128      	cbz	r0, 8015364 <rcutils_string_map_getn+0x50>
 8015358:	45a2      	cmp	sl, r4
 801535a:	d1eb      	bne.n	8015334 <rcutils_string_map_getn+0x20>
 801535c:	2700      	movs	r7, #0
 801535e:	4638      	mov	r0, r7
 8015360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f853 700b 	ldr.w	r7, [r3, fp]
 801536a:	4638      	mov	r0, r7
 801536c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015370 <rmw_get_zero_initialized_context>:
 8015370:	b510      	push	{r4, lr}
 8015372:	4604      	mov	r4, r0
 8015374:	3010      	adds	r0, #16
 8015376:	f000 f80b 	bl	8015390 <rmw_get_zero_initialized_init_options>
 801537a:	2300      	movs	r3, #0
 801537c:	2000      	movs	r0, #0
 801537e:	2100      	movs	r1, #0
 8015380:	e9c4 0100 	strd	r0, r1, [r4]
 8015384:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015388:	60a3      	str	r3, [r4, #8]
 801538a:	4620      	mov	r0, r4
 801538c:	bd10      	pop	{r4, pc}
 801538e:	bf00      	nop

08015390 <rmw_get_zero_initialized_init_options>:
 8015390:	b510      	push	{r4, lr}
 8015392:	2238      	movs	r2, #56	@ 0x38
 8015394:	4604      	mov	r4, r0
 8015396:	2100      	movs	r1, #0
 8015398:	f004 fb65 	bl	8019a66 <memset>
 801539c:	f104 0010 	add.w	r0, r4, #16
 80153a0:	f000 f806 	bl	80153b0 <rmw_get_default_security_options>
 80153a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80153a8:	60e3      	str	r3, [r4, #12]
 80153aa:	4620      	mov	r0, r4
 80153ac:	bd10      	pop	{r4, pc}
 80153ae:	bf00      	nop

080153b0 <rmw_get_default_security_options>:
 80153b0:	2200      	movs	r2, #0
 80153b2:	7002      	strb	r2, [r0, #0]
 80153b4:	6042      	str	r2, [r0, #4]
 80153b6:	4770      	bx	lr

080153b8 <rmw_subscription_content_filter_options_fini>:
 80153b8:	b1b0      	cbz	r0, 80153e8 <rmw_subscription_content_filter_options_fini+0x30>
 80153ba:	b538      	push	{r3, r4, r5, lr}
 80153bc:	4604      	mov	r4, r0
 80153be:	4608      	mov	r0, r1
 80153c0:	460d      	mov	r5, r1
 80153c2:	f7f6 faa5 	bl	800b910 <rcutils_allocator_is_valid>
 80153c6:	b168      	cbz	r0, 80153e4 <rmw_subscription_content_filter_options_fini+0x2c>
 80153c8:	6820      	ldr	r0, [r4, #0]
 80153ca:	b120      	cbz	r0, 80153d6 <rmw_subscription_content_filter_options_fini+0x1e>
 80153cc:	686b      	ldr	r3, [r5, #4]
 80153ce:	6929      	ldr	r1, [r5, #16]
 80153d0:	4798      	blx	r3
 80153d2:	2300      	movs	r3, #0
 80153d4:	6023      	str	r3, [r4, #0]
 80153d6:	1d20      	adds	r0, r4, #4
 80153d8:	f003 fc12 	bl	8018c00 <rcutils_string_array_fini>
 80153dc:	3800      	subs	r0, #0
 80153de:	bf18      	it	ne
 80153e0:	2001      	movne	r0, #1
 80153e2:	bd38      	pop	{r3, r4, r5, pc}
 80153e4:	200b      	movs	r0, #11
 80153e6:	bd38      	pop	{r3, r4, r5, pc}
 80153e8:	200b      	movs	r0, #11
 80153ea:	4770      	bx	lr

080153ec <rmw_get_default_subscription_options>:
 80153ec:	2200      	movs	r2, #0
 80153ee:	e9c0 2200 	strd	r2, r2, [r0]
 80153f2:	6082      	str	r2, [r0, #8]
 80153f4:	4770      	bx	lr
 80153f6:	bf00      	nop

080153f8 <rmw_time_equal>:
 80153f8:	b4f0      	push	{r4, r5, r6, r7}
 80153fa:	b084      	sub	sp, #16
 80153fc:	ac04      	add	r4, sp, #16
 80153fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015402:	4603      	mov	r3, r0
 8015404:	4924      	ldr	r1, [pc, #144]	@ (8015498 <rmw_time_equal+0xa0>)
 8015406:	9e03      	ldr	r6, [sp, #12]
 8015408:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801540c:	2202      	movs	r2, #2
 801540e:	4299      	cmp	r1, r3
 8015410:	41aa      	sbcs	r2, r5
 8015412:	d330      	bcc.n	8015476 <rmw_time_equal+0x7e>
 8015414:	4c21      	ldr	r4, [pc, #132]	@ (801549c <rmw_time_equal+0xa4>)
 8015416:	fba3 3204 	umull	r3, r2, r3, r4
 801541a:	fb04 2205 	mla	r2, r4, r5, r2
 801541e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015422:	43dd      	mvns	r5, r3
 8015424:	1a8c      	subs	r4, r1, r2
 8015426:	4285      	cmp	r5, r0
 8015428:	41b4      	sbcs	r4, r6
 801542a:	d332      	bcc.n	8015492 <rmw_time_equal+0x9a>
 801542c:	eb10 0c03 	adds.w	ip, r0, r3
 8015430:	eb42 0106 	adc.w	r1, r2, r6
 8015434:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015438:	4817      	ldr	r0, [pc, #92]	@ (8015498 <rmw_time_equal+0xa0>)
 801543a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801543c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801543e:	2202      	movs	r2, #2
 8015440:	4298      	cmp	r0, r3
 8015442:	41b2      	sbcs	r2, r6
 8015444:	d31c      	bcc.n	8015480 <rmw_time_equal+0x88>
 8015446:	4c15      	ldr	r4, [pc, #84]	@ (801549c <rmw_time_equal+0xa4>)
 8015448:	fba3 3204 	umull	r3, r2, r3, r4
 801544c:	fb04 2206 	mla	r2, r4, r6, r2
 8015450:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015454:	43de      	mvns	r6, r3
 8015456:	1a84      	subs	r4, r0, r2
 8015458:	42ae      	cmp	r6, r5
 801545a:	41bc      	sbcs	r4, r7
 801545c:	d315      	bcc.n	801548a <rmw_time_equal+0x92>
 801545e:	195b      	adds	r3, r3, r5
 8015460:	eb42 0207 	adc.w	r2, r2, r7
 8015464:	428a      	cmp	r2, r1
 8015466:	bf08      	it	eq
 8015468:	4563      	cmpeq	r3, ip
 801546a:	bf0c      	ite	eq
 801546c:	2001      	moveq	r0, #1
 801546e:	2000      	movne	r0, #0
 8015470:	b004      	add	sp, #16
 8015472:	bcf0      	pop	{r4, r5, r6, r7}
 8015474:	4770      	bx	lr
 8015476:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801547a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801547e:	e7d9      	b.n	8015434 <rmw_time_equal+0x3c>
 8015480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015484:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015488:	e7ec      	b.n	8015464 <rmw_time_equal+0x6c>
 801548a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801548e:	4602      	mov	r2, r0
 8015490:	e7e8      	b.n	8015464 <rmw_time_equal+0x6c>
 8015492:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015496:	e7cd      	b.n	8015434 <rmw_time_equal+0x3c>
 8015498:	25c17d04 	.word	0x25c17d04
 801549c:	3b9aca00 	.word	0x3b9aca00

080154a0 <rmw_time_total_nsec>:
 80154a0:	b470      	push	{r4, r5, r6}
 80154a2:	b085      	sub	sp, #20
 80154a4:	ac04      	add	r4, sp, #16
 80154a6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80154aa:	4603      	mov	r3, r0
 80154ac:	4912      	ldr	r1, [pc, #72]	@ (80154f8 <rmw_time_total_nsec+0x58>)
 80154ae:	9e03      	ldr	r6, [sp, #12]
 80154b0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80154b4:	2202      	movs	r2, #2
 80154b6:	4299      	cmp	r1, r3
 80154b8:	41aa      	sbcs	r2, r5
 80154ba:	d311      	bcc.n	80154e0 <rmw_time_total_nsec+0x40>
 80154bc:	4c0f      	ldr	r4, [pc, #60]	@ (80154fc <rmw_time_total_nsec+0x5c>)
 80154be:	fba3 3204 	umull	r3, r2, r3, r4
 80154c2:	fb04 2205 	mla	r2, r4, r5, r2
 80154c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80154ca:	43dd      	mvns	r5, r3
 80154cc:	1a8c      	subs	r4, r1, r2
 80154ce:	4285      	cmp	r5, r0
 80154d0:	41b4      	sbcs	r4, r6
 80154d2:	d30c      	bcc.n	80154ee <rmw_time_total_nsec+0x4e>
 80154d4:	1818      	adds	r0, r3, r0
 80154d6:	eb42 0106 	adc.w	r1, r2, r6
 80154da:	b005      	add	sp, #20
 80154dc:	bc70      	pop	{r4, r5, r6}
 80154de:	4770      	bx	lr
 80154e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80154e8:	b005      	add	sp, #20
 80154ea:	bc70      	pop	{r4, r5, r6}
 80154ec:	4770      	bx	lr
 80154ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80154f2:	b005      	add	sp, #20
 80154f4:	bc70      	pop	{r4, r5, r6}
 80154f6:	4770      	bx	lr
 80154f8:	25c17d04 	.word	0x25c17d04
 80154fc:	3b9aca00 	.word	0x3b9aca00

08015500 <rmw_get_zero_initialized_message_info>:
 8015500:	b510      	push	{r4, lr}
 8015502:	2240      	movs	r2, #64	@ 0x40
 8015504:	4604      	mov	r4, r0
 8015506:	2100      	movs	r1, #0
 8015508:	f004 faad 	bl	8019a66 <memset>
 801550c:	4620      	mov	r0, r4
 801550e:	bd10      	pop	{r4, pc}

08015510 <rmw_validate_full_topic_name>:
 8015510:	2800      	cmp	r0, #0
 8015512:	d057      	beq.n	80155c4 <rmw_validate_full_topic_name+0xb4>
 8015514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015518:	460d      	mov	r5, r1
 801551a:	2900      	cmp	r1, #0
 801551c:	d054      	beq.n	80155c8 <rmw_validate_full_topic_name+0xb8>
 801551e:	4616      	mov	r6, r2
 8015520:	4604      	mov	r4, r0
 8015522:	f7ea fe6d 	bl	8000200 <strlen>
 8015526:	b148      	cbz	r0, 801553c <rmw_validate_full_topic_name+0x2c>
 8015528:	7823      	ldrb	r3, [r4, #0]
 801552a:	2b2f      	cmp	r3, #47	@ 0x2f
 801552c:	d00d      	beq.n	801554a <rmw_validate_full_topic_name+0x3a>
 801552e:	2302      	movs	r3, #2
 8015530:	602b      	str	r3, [r5, #0]
 8015532:	b13e      	cbz	r6, 8015544 <rmw_validate_full_topic_name+0x34>
 8015534:	2000      	movs	r0, #0
 8015536:	6030      	str	r0, [r6, #0]
 8015538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801553c:	2301      	movs	r3, #1
 801553e:	602b      	str	r3, [r5, #0]
 8015540:	2e00      	cmp	r6, #0
 8015542:	d1f7      	bne.n	8015534 <rmw_validate_full_topic_name+0x24>
 8015544:	2000      	movs	r0, #0
 8015546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801554a:	1e43      	subs	r3, r0, #1
 801554c:	5ce2      	ldrb	r2, [r4, r3]
 801554e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015550:	d03c      	beq.n	80155cc <rmw_validate_full_topic_name+0xbc>
 8015552:	1e63      	subs	r3, r4, #1
 8015554:	eb03 0800 	add.w	r8, r3, r0
 8015558:	f1c4 0e01 	rsb	lr, r4, #1
 801555c:	eb0e 0703 	add.w	r7, lr, r3
 8015560:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015564:	f021 0220 	bic.w	r2, r1, #32
 8015568:	3a41      	subs	r2, #65	@ 0x41
 801556a:	2a19      	cmp	r2, #25
 801556c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015570:	d90b      	bls.n	801558a <rmw_validate_full_topic_name+0x7a>
 8015572:	295f      	cmp	r1, #95	@ 0x5f
 8015574:	d009      	beq.n	801558a <rmw_validate_full_topic_name+0x7a>
 8015576:	f1bc 0f0a 	cmp.w	ip, #10
 801557a:	d906      	bls.n	801558a <rmw_validate_full_topic_name+0x7a>
 801557c:	2304      	movs	r3, #4
 801557e:	602b      	str	r3, [r5, #0]
 8015580:	2e00      	cmp	r6, #0
 8015582:	d0df      	beq.n	8015544 <rmw_validate_full_topic_name+0x34>
 8015584:	6037      	str	r7, [r6, #0]
 8015586:	2000      	movs	r0, #0
 8015588:	e7d6      	b.n	8015538 <rmw_validate_full_topic_name+0x28>
 801558a:	4543      	cmp	r3, r8
 801558c:	d1e6      	bne.n	801555c <rmw_validate_full_topic_name+0x4c>
 801558e:	4f1a      	ldr	r7, [pc, #104]	@ (80155f8 <rmw_validate_full_topic_name+0xe8>)
 8015590:	2301      	movs	r3, #1
 8015592:	e004      	b.n	801559e <rmw_validate_full_topic_name+0x8e>
 8015594:	4298      	cmp	r0, r3
 8015596:	f104 0401 	add.w	r4, r4, #1
 801559a:	d91c      	bls.n	80155d6 <rmw_validate_full_topic_name+0xc6>
 801559c:	4613      	mov	r3, r2
 801559e:	4298      	cmp	r0, r3
 80155a0:	f103 0201 	add.w	r2, r3, #1
 80155a4:	d0f6      	beq.n	8015594 <rmw_validate_full_topic_name+0x84>
 80155a6:	7821      	ldrb	r1, [r4, #0]
 80155a8:	292f      	cmp	r1, #47	@ 0x2f
 80155aa:	d1f3      	bne.n	8015594 <rmw_validate_full_topic_name+0x84>
 80155ac:	7861      	ldrb	r1, [r4, #1]
 80155ae:	292f      	cmp	r1, #47	@ 0x2f
 80155b0:	d01c      	beq.n	80155ec <rmw_validate_full_topic_name+0xdc>
 80155b2:	5dc9      	ldrb	r1, [r1, r7]
 80155b4:	0749      	lsls	r1, r1, #29
 80155b6:	d5ed      	bpl.n	8015594 <rmw_validate_full_topic_name+0x84>
 80155b8:	2206      	movs	r2, #6
 80155ba:	602a      	str	r2, [r5, #0]
 80155bc:	2e00      	cmp	r6, #0
 80155be:	d0c1      	beq.n	8015544 <rmw_validate_full_topic_name+0x34>
 80155c0:	6033      	str	r3, [r6, #0]
 80155c2:	e7bf      	b.n	8015544 <rmw_validate_full_topic_name+0x34>
 80155c4:	200b      	movs	r0, #11
 80155c6:	4770      	bx	lr
 80155c8:	200b      	movs	r0, #11
 80155ca:	e7b5      	b.n	8015538 <rmw_validate_full_topic_name+0x28>
 80155cc:	2203      	movs	r2, #3
 80155ce:	602a      	str	r2, [r5, #0]
 80155d0:	2e00      	cmp	r6, #0
 80155d2:	d1f5      	bne.n	80155c0 <rmw_validate_full_topic_name+0xb0>
 80155d4:	e7b6      	b.n	8015544 <rmw_validate_full_topic_name+0x34>
 80155d6:	28f7      	cmp	r0, #247	@ 0xf7
 80155d8:	d802      	bhi.n	80155e0 <rmw_validate_full_topic_name+0xd0>
 80155da:	2000      	movs	r0, #0
 80155dc:	6028      	str	r0, [r5, #0]
 80155de:	e7ab      	b.n	8015538 <rmw_validate_full_topic_name+0x28>
 80155e0:	2307      	movs	r3, #7
 80155e2:	602b      	str	r3, [r5, #0]
 80155e4:	2e00      	cmp	r6, #0
 80155e6:	d0ad      	beq.n	8015544 <rmw_validate_full_topic_name+0x34>
 80155e8:	23f6      	movs	r3, #246	@ 0xf6
 80155ea:	e7e9      	b.n	80155c0 <rmw_validate_full_topic_name+0xb0>
 80155ec:	2205      	movs	r2, #5
 80155ee:	602a      	str	r2, [r5, #0]
 80155f0:	2e00      	cmp	r6, #0
 80155f2:	d1e5      	bne.n	80155c0 <rmw_validate_full_topic_name+0xb0>
 80155f4:	e7a6      	b.n	8015544 <rmw_validate_full_topic_name+0x34>
 80155f6:	bf00      	nop
 80155f8:	0801c7d6 	.word	0x0801c7d6

080155fc <rmw_validate_namespace_with_size>:
 80155fc:	b340      	cbz	r0, 8015650 <rmw_validate_namespace_with_size+0x54>
 80155fe:	b570      	push	{r4, r5, r6, lr}
 8015600:	4614      	mov	r4, r2
 8015602:	b0c2      	sub	sp, #264	@ 0x108
 8015604:	b332      	cbz	r2, 8015654 <rmw_validate_namespace_with_size+0x58>
 8015606:	2901      	cmp	r1, #1
 8015608:	460d      	mov	r5, r1
 801560a:	461e      	mov	r6, r3
 801560c:	d102      	bne.n	8015614 <rmw_validate_namespace_with_size+0x18>
 801560e:	7803      	ldrb	r3, [r0, #0]
 8015610:	2b2f      	cmp	r3, #47	@ 0x2f
 8015612:	d012      	beq.n	801563a <rmw_validate_namespace_with_size+0x3e>
 8015614:	aa01      	add	r2, sp, #4
 8015616:	4669      	mov	r1, sp
 8015618:	f7ff ff7a 	bl	8015510 <rmw_validate_full_topic_name>
 801561c:	b978      	cbnz	r0, 801563e <rmw_validate_namespace_with_size+0x42>
 801561e:	9b00      	ldr	r3, [sp, #0]
 8015620:	b14b      	cbz	r3, 8015636 <rmw_validate_namespace_with_size+0x3a>
 8015622:	2b07      	cmp	r3, #7
 8015624:	d007      	beq.n	8015636 <rmw_validate_namespace_with_size+0x3a>
 8015626:	1e5a      	subs	r2, r3, #1
 8015628:	2a05      	cmp	r2, #5
 801562a:	d82b      	bhi.n	8015684 <rmw_validate_namespace_with_size+0x88>
 801562c:	e8df f002 	tbb	[pc, r2]
 8015630:	1e212427 	.word	0x1e212427
 8015634:	141b      	.short	0x141b
 8015636:	2df5      	cmp	r5, #245	@ 0xf5
 8015638:	d803      	bhi.n	8015642 <rmw_validate_namespace_with_size+0x46>
 801563a:	2000      	movs	r0, #0
 801563c:	6020      	str	r0, [r4, #0]
 801563e:	b042      	add	sp, #264	@ 0x108
 8015640:	bd70      	pop	{r4, r5, r6, pc}
 8015642:	2307      	movs	r3, #7
 8015644:	6023      	str	r3, [r4, #0]
 8015646:	2e00      	cmp	r6, #0
 8015648:	d0f9      	beq.n	801563e <rmw_validate_namespace_with_size+0x42>
 801564a:	23f4      	movs	r3, #244	@ 0xf4
 801564c:	6033      	str	r3, [r6, #0]
 801564e:	e7f6      	b.n	801563e <rmw_validate_namespace_with_size+0x42>
 8015650:	200b      	movs	r0, #11
 8015652:	4770      	bx	lr
 8015654:	200b      	movs	r0, #11
 8015656:	e7f2      	b.n	801563e <rmw_validate_namespace_with_size+0x42>
 8015658:	2306      	movs	r3, #6
 801565a:	6023      	str	r3, [r4, #0]
 801565c:	2e00      	cmp	r6, #0
 801565e:	d0ee      	beq.n	801563e <rmw_validate_namespace_with_size+0x42>
 8015660:	9b01      	ldr	r3, [sp, #4]
 8015662:	6033      	str	r3, [r6, #0]
 8015664:	e7eb      	b.n	801563e <rmw_validate_namespace_with_size+0x42>
 8015666:	2305      	movs	r3, #5
 8015668:	6023      	str	r3, [r4, #0]
 801566a:	e7f7      	b.n	801565c <rmw_validate_namespace_with_size+0x60>
 801566c:	2304      	movs	r3, #4
 801566e:	6023      	str	r3, [r4, #0]
 8015670:	e7f4      	b.n	801565c <rmw_validate_namespace_with_size+0x60>
 8015672:	2303      	movs	r3, #3
 8015674:	6023      	str	r3, [r4, #0]
 8015676:	e7f1      	b.n	801565c <rmw_validate_namespace_with_size+0x60>
 8015678:	2302      	movs	r3, #2
 801567a:	6023      	str	r3, [r4, #0]
 801567c:	e7ee      	b.n	801565c <rmw_validate_namespace_with_size+0x60>
 801567e:	2301      	movs	r3, #1
 8015680:	6023      	str	r3, [r4, #0]
 8015682:	e7eb      	b.n	801565c <rmw_validate_namespace_with_size+0x60>
 8015684:	4a03      	ldr	r2, [pc, #12]	@ (8015694 <rmw_validate_namespace_with_size+0x98>)
 8015686:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801568a:	a802      	add	r0, sp, #8
 801568c:	f7ff fcda 	bl	8015044 <rcutils_snprintf>
 8015690:	2001      	movs	r0, #1
 8015692:	e7d4      	b.n	801563e <rmw_validate_namespace_with_size+0x42>
 8015694:	0801c104 	.word	0x0801c104

08015698 <rmw_validate_namespace>:
 8015698:	b168      	cbz	r0, 80156b6 <rmw_validate_namespace+0x1e>
 801569a:	b570      	push	{r4, r5, r6, lr}
 801569c:	460d      	mov	r5, r1
 801569e:	4616      	mov	r6, r2
 80156a0:	4604      	mov	r4, r0
 80156a2:	f7ea fdad 	bl	8000200 <strlen>
 80156a6:	4633      	mov	r3, r6
 80156a8:	4601      	mov	r1, r0
 80156aa:	462a      	mov	r2, r5
 80156ac:	4620      	mov	r0, r4
 80156ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156b2:	f7ff bfa3 	b.w	80155fc <rmw_validate_namespace_with_size>
 80156b6:	200b      	movs	r0, #11
 80156b8:	4770      	bx	lr
 80156ba:	bf00      	nop

080156bc <rmw_namespace_validation_result_string>:
 80156bc:	2807      	cmp	r0, #7
 80156be:	bf9a      	itte	ls
 80156c0:	4b02      	ldrls	r3, [pc, #8]	@ (80156cc <rmw_namespace_validation_result_string+0x10>)
 80156c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80156c6:	4802      	ldrhi	r0, [pc, #8]	@ (80156d0 <rmw_namespace_validation_result_string+0x14>)
 80156c8:	4770      	bx	lr
 80156ca:	bf00      	nop
 80156cc:	0801c2fc 	.word	0x0801c2fc
 80156d0:	0801c154 	.word	0x0801c154

080156d4 <rmw_validate_node_name>:
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d03b      	beq.n	8015750 <rmw_validate_node_name+0x7c>
 80156d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156dc:	460d      	mov	r5, r1
 80156de:	2900      	cmp	r1, #0
 80156e0:	d038      	beq.n	8015754 <rmw_validate_node_name+0x80>
 80156e2:	4616      	mov	r6, r2
 80156e4:	4604      	mov	r4, r0
 80156e6:	f7ea fd8b 	bl	8000200 <strlen>
 80156ea:	b1e0      	cbz	r0, 8015726 <rmw_validate_node_name+0x52>
 80156ec:	1e63      	subs	r3, r4, #1
 80156ee:	eb03 0800 	add.w	r8, r3, r0
 80156f2:	f1c4 0101 	rsb	r1, r4, #1
 80156f6:	18cf      	adds	r7, r1, r3
 80156f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80156fc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015700:	f02e 0c20 	bic.w	ip, lr, #32
 8015704:	2a09      	cmp	r2, #9
 8015706:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801570a:	d914      	bls.n	8015736 <rmw_validate_node_name+0x62>
 801570c:	f1bc 0f19 	cmp.w	ip, #25
 8015710:	d911      	bls.n	8015736 <rmw_validate_node_name+0x62>
 8015712:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015716:	d00e      	beq.n	8015736 <rmw_validate_node_name+0x62>
 8015718:	2302      	movs	r3, #2
 801571a:	602b      	str	r3, [r5, #0]
 801571c:	b106      	cbz	r6, 8015720 <rmw_validate_node_name+0x4c>
 801571e:	6037      	str	r7, [r6, #0]
 8015720:	2000      	movs	r0, #0
 8015722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015726:	2301      	movs	r3, #1
 8015728:	602b      	str	r3, [r5, #0]
 801572a:	2e00      	cmp	r6, #0
 801572c:	d0f8      	beq.n	8015720 <rmw_validate_node_name+0x4c>
 801572e:	2000      	movs	r0, #0
 8015730:	6030      	str	r0, [r6, #0]
 8015732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015736:	4543      	cmp	r3, r8
 8015738:	d1dd      	bne.n	80156f6 <rmw_validate_node_name+0x22>
 801573a:	7822      	ldrb	r2, [r4, #0]
 801573c:	4b0d      	ldr	r3, [pc, #52]	@ (8015774 <rmw_validate_node_name+0xa0>)
 801573e:	5cd3      	ldrb	r3, [r2, r3]
 8015740:	f013 0304 	ands.w	r3, r3, #4
 8015744:	d110      	bne.n	8015768 <rmw_validate_node_name+0x94>
 8015746:	28ff      	cmp	r0, #255	@ 0xff
 8015748:	d806      	bhi.n	8015758 <rmw_validate_node_name+0x84>
 801574a:	602b      	str	r3, [r5, #0]
 801574c:	4618      	mov	r0, r3
 801574e:	e7e8      	b.n	8015722 <rmw_validate_node_name+0x4e>
 8015750:	200b      	movs	r0, #11
 8015752:	4770      	bx	lr
 8015754:	200b      	movs	r0, #11
 8015756:	e7e4      	b.n	8015722 <rmw_validate_node_name+0x4e>
 8015758:	2204      	movs	r2, #4
 801575a:	602a      	str	r2, [r5, #0]
 801575c:	2e00      	cmp	r6, #0
 801575e:	d0df      	beq.n	8015720 <rmw_validate_node_name+0x4c>
 8015760:	22fe      	movs	r2, #254	@ 0xfe
 8015762:	6032      	str	r2, [r6, #0]
 8015764:	4618      	mov	r0, r3
 8015766:	e7dc      	b.n	8015722 <rmw_validate_node_name+0x4e>
 8015768:	2303      	movs	r3, #3
 801576a:	602b      	str	r3, [r5, #0]
 801576c:	2e00      	cmp	r6, #0
 801576e:	d1de      	bne.n	801572e <rmw_validate_node_name+0x5a>
 8015770:	e7d6      	b.n	8015720 <rmw_validate_node_name+0x4c>
 8015772:	bf00      	nop
 8015774:	0801c7d6 	.word	0x0801c7d6

08015778 <rmw_node_name_validation_result_string>:
 8015778:	2804      	cmp	r0, #4
 801577a:	bf9a      	itte	ls
 801577c:	4b02      	ldrls	r3, [pc, #8]	@ (8015788 <rmw_node_name_validation_result_string+0x10>)
 801577e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015782:	4802      	ldrhi	r0, [pc, #8]	@ (801578c <rmw_node_name_validation_result_string+0x14>)
 8015784:	4770      	bx	lr
 8015786:	bf00      	nop
 8015788:	0801c408 	.word	0x0801c408
 801578c:	0801c31c 	.word	0x0801c31c

08015790 <get_memory>:
 8015790:	4603      	mov	r3, r0
 8015792:	6840      	ldr	r0, [r0, #4]
 8015794:	b158      	cbz	r0, 80157ae <get_memory+0x1e>
 8015796:	6842      	ldr	r2, [r0, #4]
 8015798:	605a      	str	r2, [r3, #4]
 801579a:	b10a      	cbz	r2, 80157a0 <get_memory+0x10>
 801579c:	2100      	movs	r1, #0
 801579e:	6011      	str	r1, [r2, #0]
 80157a0:	681a      	ldr	r2, [r3, #0]
 80157a2:	6042      	str	r2, [r0, #4]
 80157a4:	b102      	cbz	r2, 80157a8 <get_memory+0x18>
 80157a6:	6010      	str	r0, [r2, #0]
 80157a8:	2200      	movs	r2, #0
 80157aa:	6002      	str	r2, [r0, #0]
 80157ac:	6018      	str	r0, [r3, #0]
 80157ae:	4770      	bx	lr

080157b0 <put_memory>:
 80157b0:	680b      	ldr	r3, [r1, #0]
 80157b2:	b10b      	cbz	r3, 80157b8 <put_memory+0x8>
 80157b4:	684a      	ldr	r2, [r1, #4]
 80157b6:	605a      	str	r2, [r3, #4]
 80157b8:	684a      	ldr	r2, [r1, #4]
 80157ba:	b102      	cbz	r2, 80157be <put_memory+0xe>
 80157bc:	6013      	str	r3, [r2, #0]
 80157be:	6803      	ldr	r3, [r0, #0]
 80157c0:	428b      	cmp	r3, r1
 80157c2:	6843      	ldr	r3, [r0, #4]
 80157c4:	bf08      	it	eq
 80157c6:	6002      	streq	r2, [r0, #0]
 80157c8:	604b      	str	r3, [r1, #4]
 80157ca:	b103      	cbz	r3, 80157ce <put_memory+0x1e>
 80157cc:	6019      	str	r1, [r3, #0]
 80157ce:	2300      	movs	r3, #0
 80157d0:	600b      	str	r3, [r1, #0]
 80157d2:	6041      	str	r1, [r0, #4]
 80157d4:	4770      	bx	lr
 80157d6:	bf00      	nop

080157d8 <rmw_destroy_client>:
 80157d8:	b570      	push	{r4, r5, r6, lr}
 80157da:	b128      	cbz	r0, 80157e8 <rmw_destroy_client+0x10>
 80157dc:	4604      	mov	r4, r0
 80157de:	6800      	ldr	r0, [r0, #0]
 80157e0:	460d      	mov	r5, r1
 80157e2:	f7f6 fed5 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 80157e6:	b910      	cbnz	r0, 80157ee <rmw_destroy_client+0x16>
 80157e8:	2401      	movs	r4, #1
 80157ea:	4620      	mov	r0, r4
 80157ec:	bd70      	pop	{r4, r5, r6, pc}
 80157ee:	6863      	ldr	r3, [r4, #4]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d0f9      	beq.n	80157e8 <rmw_destroy_client+0x10>
 80157f4:	2d00      	cmp	r5, #0
 80157f6:	d0f7      	beq.n	80157e8 <rmw_destroy_client+0x10>
 80157f8:	6828      	ldr	r0, [r5, #0]
 80157fa:	f7f6 fec9 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 80157fe:	2800      	cmp	r0, #0
 8015800:	d0f2      	beq.n	80157e8 <rmw_destroy_client+0x10>
 8015802:	686e      	ldr	r6, [r5, #4]
 8015804:	2e00      	cmp	r6, #0
 8015806:	d0ef      	beq.n	80157e8 <rmw_destroy_client+0x10>
 8015808:	6864      	ldr	r4, [r4, #4]
 801580a:	6932      	ldr	r2, [r6, #16]
 801580c:	6920      	ldr	r0, [r4, #16]
 801580e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015812:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015816:	6819      	ldr	r1, [r3, #0]
 8015818:	f002 f92e 	bl	8017a78 <uxr_buffer_cancel_data>
 801581c:	4602      	mov	r2, r0
 801581e:	6920      	ldr	r0, [r4, #16]
 8015820:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015824:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015828:	f7f6 fd98 	bl	800c35c <run_xrce_session>
 801582c:	6920      	ldr	r0, [r4, #16]
 801582e:	6932      	ldr	r2, [r6, #16]
 8015830:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015834:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015838:	6819      	ldr	r1, [r3, #0]
 801583a:	f7f9 fd01 	bl	800f240 <uxr_buffer_delete_entity>
 801583e:	4602      	mov	r2, r0
 8015840:	6920      	ldr	r0, [r4, #16]
 8015842:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015846:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801584a:	f7f6 fd87 	bl	800c35c <run_xrce_session>
 801584e:	2800      	cmp	r0, #0
 8015850:	4628      	mov	r0, r5
 8015852:	bf14      	ite	ne
 8015854:	2400      	movne	r4, #0
 8015856:	2402      	moveq	r4, #2
 8015858:	f7f6 fc68 	bl	800c12c <rmw_uxrce_fini_client_memory>
 801585c:	e7c5      	b.n	80157ea <rmw_destroy_client+0x12>
 801585e:	bf00      	nop

08015860 <rmw_get_implementation_identifier>:
 8015860:	4b01      	ldr	r3, [pc, #4]	@ (8015868 <rmw_get_implementation_identifier+0x8>)
 8015862:	6818      	ldr	r0, [r3, #0]
 8015864:	4770      	bx	lr
 8015866:	bf00      	nop
 8015868:	0801c434 	.word	0x0801c434

0801586c <rmw_init_options_init>:
 801586c:	b084      	sub	sp, #16
 801586e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015870:	b083      	sub	sp, #12
 8015872:	ad09      	add	r5, sp, #36	@ 0x24
 8015874:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015878:	b130      	cbz	r0, 8015888 <rmw_init_options_init+0x1c>
 801587a:	4604      	mov	r4, r0
 801587c:	4628      	mov	r0, r5
 801587e:	f7f6 f847 	bl	800b910 <rcutils_allocator_is_valid>
 8015882:	b108      	cbz	r0, 8015888 <rmw_init_options_init+0x1c>
 8015884:	68a6      	ldr	r6, [r4, #8]
 8015886:	b12e      	cbz	r6, 8015894 <rmw_init_options_init+0x28>
 8015888:	200b      	movs	r0, #11
 801588a:	b003      	add	sp, #12
 801588c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015890:	b004      	add	sp, #16
 8015892:	4770      	bx	lr
 8015894:	2200      	movs	r2, #0
 8015896:	2300      	movs	r3, #0
 8015898:	e9c4 2300 	strd	r2, r3, [r4]
 801589c:	4b22      	ldr	r3, [pc, #136]	@ (8015928 <rmw_init_options_init+0xbc>)
 801589e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8015938 <rmw_init_options_init+0xcc>
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	60a3      	str	r3, [r4, #8]
 80158a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158a8:	f104 0c20 	add.w	ip, r4, #32
 80158ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158b0:	466f      	mov	r7, sp
 80158b2:	682b      	ldr	r3, [r5, #0]
 80158b4:	f8cc 3000 	str.w	r3, [ip]
 80158b8:	4638      	mov	r0, r7
 80158ba:	f8c4 e01c 	str.w	lr, [r4, #28]
 80158be:	60e6      	str	r6, [r4, #12]
 80158c0:	f7ff fd76 	bl	80153b0 <rmw_get_default_security_options>
 80158c4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80158c8:	f104 0310 	add.w	r3, r4, #16
 80158cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80158d0:	2203      	movs	r2, #3
 80158d2:	4816      	ldr	r0, [pc, #88]	@ (801592c <rmw_init_options_init+0xc0>)
 80158d4:	4916      	ldr	r1, [pc, #88]	@ (8015930 <rmw_init_options_init+0xc4>)
 80158d6:	7626      	strb	r6, [r4, #24]
 80158d8:	f7f6 fb68 	bl	800bfac <rmw_uxrce_init_init_options_impl_memory>
 80158dc:	4813      	ldr	r0, [pc, #76]	@ (801592c <rmw_init_options_init+0xc0>)
 80158de:	f7ff ff57 	bl	8015790 <get_memory>
 80158e2:	b1f0      	cbz	r0, 8015922 <rmw_init_options_init+0xb6>
 80158e4:	4a13      	ldr	r2, [pc, #76]	@ (8015934 <rmw_init_options_init+0xc8>)
 80158e6:	6883      	ldr	r3, [r0, #8]
 80158e8:	6851      	ldr	r1, [r2, #4]
 80158ea:	7810      	ldrb	r0, [r2, #0]
 80158ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80158ee:	7418      	strb	r0, [r3, #16]
 80158f0:	6159      	str	r1, [r3, #20]
 80158f2:	68d1      	ldr	r1, [r2, #12]
 80158f4:	61d9      	str	r1, [r3, #28]
 80158f6:	6911      	ldr	r1, [r2, #16]
 80158f8:	6219      	str	r1, [r3, #32]
 80158fa:	6951      	ldr	r1, [r2, #20]
 80158fc:	6892      	ldr	r2, [r2, #8]
 80158fe:	619a      	str	r2, [r3, #24]
 8015900:	6259      	str	r1, [r3, #36]	@ 0x24
 8015902:	f7fb f935 	bl	8010b70 <uxr_nanos>
 8015906:	f003 fc79 	bl	80191fc <srand>
 801590a:	f003 fca5 	bl	8019258 <rand>
 801590e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015910:	6298      	str	r0, [r3, #40]	@ 0x28
 8015912:	2800      	cmp	r0, #0
 8015914:	d0f9      	beq.n	801590a <rmw_init_options_init+0x9e>
 8015916:	2000      	movs	r0, #0
 8015918:	b003      	add	sp, #12
 801591a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801591e:	b004      	add	sp, #16
 8015920:	4770      	bx	lr
 8015922:	2001      	movs	r0, #1
 8015924:	e7b1      	b.n	801588a <rmw_init_options_init+0x1e>
 8015926:	bf00      	nop
 8015928:	0801c434 	.word	0x0801c434
 801592c:	20015644 	.word	0x20015644
 8015930:	20010ee0 	.word	0x20010ee0
 8015934:	20010d6c 	.word	0x20010d6c
 8015938:	0801be44 	.word	0x0801be44

0801593c <rmw_init_options_copy>:
 801593c:	b570      	push	{r4, r5, r6, lr}
 801593e:	b158      	cbz	r0, 8015958 <rmw_init_options_copy+0x1c>
 8015940:	460d      	mov	r5, r1
 8015942:	b149      	cbz	r1, 8015958 <rmw_init_options_copy+0x1c>
 8015944:	4604      	mov	r4, r0
 8015946:	6880      	ldr	r0, [r0, #8]
 8015948:	b120      	cbz	r0, 8015954 <rmw_init_options_copy+0x18>
 801594a:	4b1e      	ldr	r3, [pc, #120]	@ (80159c4 <rmw_init_options_copy+0x88>)
 801594c:	6819      	ldr	r1, [r3, #0]
 801594e:	f7ea fc5f 	bl	8000210 <strcmp>
 8015952:	bb90      	cbnz	r0, 80159ba <rmw_init_options_copy+0x7e>
 8015954:	68ab      	ldr	r3, [r5, #8]
 8015956:	b113      	cbz	r3, 801595e <rmw_init_options_copy+0x22>
 8015958:	250b      	movs	r5, #11
 801595a:	4628      	mov	r0, r5
 801595c:	bd70      	pop	{r4, r5, r6, pc}
 801595e:	4623      	mov	r3, r4
 8015960:	462a      	mov	r2, r5
 8015962:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8015966:	f8d3 c000 	ldr.w	ip, [r3]
 801596a:	6858      	ldr	r0, [r3, #4]
 801596c:	6899      	ldr	r1, [r3, #8]
 801596e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8015972:	f8c2 e00c 	str.w	lr, [r2, #12]
 8015976:	3310      	adds	r3, #16
 8015978:	42b3      	cmp	r3, r6
 801597a:	f8c2 c000 	str.w	ip, [r2]
 801597e:	6050      	str	r0, [r2, #4]
 8015980:	6091      	str	r1, [r2, #8]
 8015982:	f102 0210 	add.w	r2, r2, #16
 8015986:	d1ee      	bne.n	8015966 <rmw_init_options_copy+0x2a>
 8015988:	6819      	ldr	r1, [r3, #0]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	480e      	ldr	r0, [pc, #56]	@ (80159c8 <rmw_init_options_copy+0x8c>)
 801598e:	6053      	str	r3, [r2, #4]
 8015990:	6011      	str	r1, [r2, #0]
 8015992:	f7ff fefd 	bl	8015790 <get_memory>
 8015996:	b198      	cbz	r0, 80159c0 <rmw_init_options_copy+0x84>
 8015998:	6883      	ldr	r3, [r0, #8]
 801599a:	636b      	str	r3, [r5, #52]	@ 0x34
 801599c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801599e:	f102 0c10 	add.w	ip, r2, #16
 80159a2:	f103 0410 	add.w	r4, r3, #16
 80159a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159ac:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80159b0:	2500      	movs	r5, #0
 80159b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80159b6:	4628      	mov	r0, r5
 80159b8:	bd70      	pop	{r4, r5, r6, pc}
 80159ba:	250c      	movs	r5, #12
 80159bc:	4628      	mov	r0, r5
 80159be:	bd70      	pop	{r4, r5, r6, pc}
 80159c0:	2501      	movs	r5, #1
 80159c2:	e7ca      	b.n	801595a <rmw_init_options_copy+0x1e>
 80159c4:	0801c434 	.word	0x0801c434
 80159c8:	20015644 	.word	0x20015644

080159cc <rmw_init_options_fini>:
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d03d      	beq.n	8015a4c <rmw_init_options_fini+0x80>
 80159d0:	b510      	push	{r4, lr}
 80159d2:	4604      	mov	r4, r0
 80159d4:	b08e      	sub	sp, #56	@ 0x38
 80159d6:	3020      	adds	r0, #32
 80159d8:	f7f5 ff9a 	bl	800b910 <rcutils_allocator_is_valid>
 80159dc:	b360      	cbz	r0, 8015a38 <rmw_init_options_fini+0x6c>
 80159de:	68a0      	ldr	r0, [r4, #8]
 80159e0:	b120      	cbz	r0, 80159ec <rmw_init_options_fini+0x20>
 80159e2:	4b1c      	ldr	r3, [pc, #112]	@ (8015a54 <rmw_init_options_fini+0x88>)
 80159e4:	6819      	ldr	r1, [r3, #0]
 80159e6:	f7ea fc13 	bl	8000210 <strcmp>
 80159ea:	bb68      	cbnz	r0, 8015a48 <rmw_init_options_fini+0x7c>
 80159ec:	4b1a      	ldr	r3, [pc, #104]	@ (8015a58 <rmw_init_options_fini+0x8c>)
 80159ee:	6819      	ldr	r1, [r3, #0]
 80159f0:	b331      	cbz	r1, 8015a40 <rmw_init_options_fini+0x74>
 80159f2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80159f4:	e001      	b.n	80159fa <rmw_init_options_fini+0x2e>
 80159f6:	6849      	ldr	r1, [r1, #4]
 80159f8:	b311      	cbz	r1, 8015a40 <rmw_init_options_fini+0x74>
 80159fa:	688b      	ldr	r3, [r1, #8]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d1fa      	bne.n	80159f6 <rmw_init_options_fini+0x2a>
 8015a00:	4815      	ldr	r0, [pc, #84]	@ (8015a58 <rmw_init_options_fini+0x8c>)
 8015a02:	f7ff fed5 	bl	80157b0 <put_memory>
 8015a06:	4668      	mov	r0, sp
 8015a08:	f7ff fcc2 	bl	8015390 <rmw_get_zero_initialized_init_options>
 8015a0c:	46ee      	mov	lr, sp
 8015a0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a12:	46a4      	mov	ip, r4
 8015a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015a2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015a30:	2300      	movs	r3, #0
 8015a32:	4618      	mov	r0, r3
 8015a34:	b00e      	add	sp, #56	@ 0x38
 8015a36:	bd10      	pop	{r4, pc}
 8015a38:	230b      	movs	r3, #11
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	b00e      	add	sp, #56	@ 0x38
 8015a3e:	bd10      	pop	{r4, pc}
 8015a40:	2301      	movs	r3, #1
 8015a42:	4618      	mov	r0, r3
 8015a44:	b00e      	add	sp, #56	@ 0x38
 8015a46:	bd10      	pop	{r4, pc}
 8015a48:	230c      	movs	r3, #12
 8015a4a:	e7f2      	b.n	8015a32 <rmw_init_options_fini+0x66>
 8015a4c:	230b      	movs	r3, #11
 8015a4e:	4618      	mov	r0, r3
 8015a50:	4770      	bx	lr
 8015a52:	bf00      	nop
 8015a54:	0801c434 	.word	0x0801c434
 8015a58:	20015644 	.word	0x20015644

08015a5c <rmw_init>:
 8015a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a60:	b083      	sub	sp, #12
 8015a62:	2800      	cmp	r0, #0
 8015a64:	f000 80d3 	beq.w	8015c0e <rmw_init+0x1b2>
 8015a68:	460e      	mov	r6, r1
 8015a6a:	2900      	cmp	r1, #0
 8015a6c:	f000 80cf 	beq.w	8015c0e <rmw_init+0x1b2>
 8015a70:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015a72:	4605      	mov	r5, r0
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	f000 80ca 	beq.w	8015c0e <rmw_init+0x1b2>
 8015a7a:	4b78      	ldr	r3, [pc, #480]	@ (8015c5c <rmw_init+0x200>)
 8015a7c:	6880      	ldr	r0, [r0, #8]
 8015a7e:	681f      	ldr	r7, [r3, #0]
 8015a80:	b128      	cbz	r0, 8015a8e <rmw_init+0x32>
 8015a82:	4639      	mov	r1, r7
 8015a84:	f7ea fbc4 	bl	8000210 <strcmp>
 8015a88:	2800      	cmp	r0, #0
 8015a8a:	f040 80ca 	bne.w	8015c22 <rmw_init+0x1c6>
 8015a8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a92:	4c73      	ldr	r4, [pc, #460]	@ (8015c60 <rmw_init+0x204>)
 8015a94:	4973      	ldr	r1, [pc, #460]	@ (8015c64 <rmw_init+0x208>)
 8015a96:	4874      	ldr	r0, [pc, #464]	@ (8015c68 <rmw_init+0x20c>)
 8015a98:	60b7      	str	r7, [r6, #8]
 8015a9a:	e9c6 2300 	strd	r2, r3, [r6]
 8015a9e:	68eb      	ldr	r3, [r5, #12]
 8015aa0:	64b3      	str	r3, [r6, #72]	@ 0x48
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	f7f6 fa22 	bl	800beec <rmw_uxrce_init_session_memory>
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	4970      	ldr	r1, [pc, #448]	@ (8015c6c <rmw_init+0x210>)
 8015aac:	2204      	movs	r2, #4
 8015aae:	f7f6 fa5d 	bl	800bf6c <rmw_uxrce_init_static_input_buffer_memory>
 8015ab2:	f04f 0800 	mov.w	r8, #0
 8015ab6:	486c      	ldr	r0, [pc, #432]	@ (8015c68 <rmw_init+0x20c>)
 8015ab8:	f884 800d 	strb.w	r8, [r4, #13]
 8015abc:	f7ff fe68 	bl	8015790 <get_memory>
 8015ac0:	2800      	cmp	r0, #0
 8015ac2:	f000 80a9 	beq.w	8015c18 <rmw_init+0x1bc>
 8015ac6:	6884      	ldr	r4, [r0, #8]
 8015ac8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8015aca:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8015acc:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015ad0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015ad4:	9101      	str	r1, [sp, #4]
 8015ad6:	6a00      	ldr	r0, [r0, #32]
 8015ad8:	9000      	str	r0, [sp, #0]
 8015ada:	f104 0910 	add.w	r9, r4, #16
 8015ade:	4661      	mov	r1, ip
 8015ae0:	4648      	mov	r0, r9
 8015ae2:	f001 fa01 	bl	8016ee8 <uxr_set_custom_transport_callbacks>
 8015ae6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8015aea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015aee:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8015af2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8015af6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8015afa:	495d      	ldr	r1, [pc, #372]	@ (8015c70 <rmw_init+0x214>)
 8015afc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8015b00:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8015b04:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8015b08:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8015b0c:	4859      	ldr	r0, [pc, #356]	@ (8015c74 <rmw_init+0x218>)
 8015b0e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8015b12:	2201      	movs	r2, #1
 8015b14:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8015b16:	f7f6 f9c9 	bl	800beac <rmw_uxrce_init_node_memory>
 8015b1a:	4957      	ldr	r1, [pc, #348]	@ (8015c78 <rmw_init+0x21c>)
 8015b1c:	4857      	ldr	r0, [pc, #348]	@ (8015c7c <rmw_init+0x220>)
 8015b1e:	2205      	movs	r2, #5
 8015b20:	f7f6 f9a4 	bl	800be6c <rmw_uxrce_init_subscription_memory>
 8015b24:	4956      	ldr	r1, [pc, #344]	@ (8015c80 <rmw_init+0x224>)
 8015b26:	4857      	ldr	r0, [pc, #348]	@ (8015c84 <rmw_init+0x228>)
 8015b28:	220a      	movs	r2, #10
 8015b2a:	f7f6 f97f 	bl	800be2c <rmw_uxrce_init_publisher_memory>
 8015b2e:	4956      	ldr	r1, [pc, #344]	@ (8015c88 <rmw_init+0x22c>)
 8015b30:	4856      	ldr	r0, [pc, #344]	@ (8015c8c <rmw_init+0x230>)
 8015b32:	2201      	movs	r2, #1
 8015b34:	f7f6 f93a 	bl	800bdac <rmw_uxrce_init_service_memory>
 8015b38:	4955      	ldr	r1, [pc, #340]	@ (8015c90 <rmw_init+0x234>)
 8015b3a:	4856      	ldr	r0, [pc, #344]	@ (8015c94 <rmw_init+0x238>)
 8015b3c:	2201      	movs	r2, #1
 8015b3e:	f7f6 f955 	bl	800bdec <rmw_uxrce_init_client_memory>
 8015b42:	4955      	ldr	r1, [pc, #340]	@ (8015c98 <rmw_init+0x23c>)
 8015b44:	4855      	ldr	r0, [pc, #340]	@ (8015c9c <rmw_init+0x240>)
 8015b46:	220f      	movs	r2, #15
 8015b48:	f7f6 f9f0 	bl	800bf2c <rmw_uxrce_init_topic_memory>
 8015b4c:	4954      	ldr	r1, [pc, #336]	@ (8015ca0 <rmw_init+0x244>)
 8015b4e:	4855      	ldr	r0, [pc, #340]	@ (8015ca4 <rmw_init+0x248>)
 8015b50:	2203      	movs	r2, #3
 8015b52:	f7f6 fa2b 	bl	800bfac <rmw_uxrce_init_init_options_impl_memory>
 8015b56:	4954      	ldr	r1, [pc, #336]	@ (8015ca8 <rmw_init+0x24c>)
 8015b58:	4854      	ldr	r0, [pc, #336]	@ (8015cac <rmw_init+0x250>)
 8015b5a:	2204      	movs	r2, #4
 8015b5c:	f7f6 fa46 	bl	800bfec <rmw_uxrce_init_wait_set_memory>
 8015b60:	4953      	ldr	r1, [pc, #332]	@ (8015cb0 <rmw_init+0x254>)
 8015b62:	4854      	ldr	r0, [pc, #336]	@ (8015cb4 <rmw_init+0x258>)
 8015b64:	2204      	movs	r2, #4
 8015b66:	f7f6 fa61 	bl	800c02c <rmw_uxrce_init_guard_condition_memory>
 8015b6a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8015b6c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8015b6e:	4642      	mov	r2, r8
 8015b70:	f000 fe90 	bl	8016894 <rmw_uxrce_transport_init>
 8015b74:	4607      	mov	r7, r0
 8015b76:	2800      	cmp	r0, #0
 8015b78:	d158      	bne.n	8015c2c <rmw_init+0x1d0>
 8015b7a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8015b7c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8015b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015b82:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8015b86:	4628      	mov	r0, r5
 8015b88:	f7f9 fe56 	bl	800f838 <uxr_init_session>
 8015b8c:	494a      	ldr	r1, [pc, #296]	@ (8015cb8 <rmw_init+0x25c>)
 8015b8e:	4622      	mov	r2, r4
 8015b90:	4628      	mov	r0, r5
 8015b92:	f7f9 fe75 	bl	800f880 <uxr_set_topic_callback>
 8015b96:	4949      	ldr	r1, [pc, #292]	@ (8015cbc <rmw_init+0x260>)
 8015b98:	463a      	mov	r2, r7
 8015b9a:	4628      	mov	r0, r5
 8015b9c:	f7f9 fe6c 	bl	800f878 <uxr_set_status_callback>
 8015ba0:	4947      	ldr	r1, [pc, #284]	@ (8015cc0 <rmw_init+0x264>)
 8015ba2:	463a      	mov	r2, r7
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	f7f9 fe6f 	bl	800f888 <uxr_set_request_callback>
 8015baa:	4946      	ldr	r1, [pc, #280]	@ (8015cc4 <rmw_init+0x268>)
 8015bac:	463a      	mov	r2, r7
 8015bae:	4628      	mov	r0, r5
 8015bb0:	f7f9 fe6e 	bl	800f890 <uxr_set_reply_callback>
 8015bb4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015bb8:	2304      	movs	r3, #4
 8015bba:	0092      	lsls	r2, r2, #2
 8015bbc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	f7f9 fea3 	bl	800f90c <uxr_create_input_reliable_stream>
 8015bc6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015bca:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8015bce:	0092      	lsls	r2, r2, #2
 8015bd0:	2304      	movs	r3, #4
 8015bd2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	f7f9 fe70 	bl	800f8bc <uxr_create_output_reliable_stream>
 8015bdc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8015be0:	4628      	mov	r0, r5
 8015be2:	f7f9 fe8d 	bl	800f900 <uxr_create_input_best_effort_stream>
 8015be6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8015bea:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8015bee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015bf2:	3114      	adds	r1, #20
 8015bf4:	4628      	mov	r0, r5
 8015bf6:	f7f9 fe4f 	bl	800f898 <uxr_create_output_best_effort_stream>
 8015bfa:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8015bfe:	4628      	mov	r0, r5
 8015c00:	f7fa fbda 	bl	80103b8 <uxr_create_session>
 8015c04:	b1f8      	cbz	r0, 8015c46 <rmw_init+0x1ea>
 8015c06:	4638      	mov	r0, r7
 8015c08:	b003      	add	sp, #12
 8015c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c0e:	270b      	movs	r7, #11
 8015c10:	4638      	mov	r0, r7
 8015c12:	b003      	add	sp, #12
 8015c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c18:	2701      	movs	r7, #1
 8015c1a:	4638      	mov	r0, r7
 8015c1c:	b003      	add	sp, #12
 8015c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c22:	270c      	movs	r7, #12
 8015c24:	4638      	mov	r0, r7
 8015c26:	b003      	add	sp, #12
 8015c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c2c:	4648      	mov	r0, r9
 8015c2e:	f001 f99d 	bl	8016f6c <uxr_close_custom_transport>
 8015c32:	480d      	ldr	r0, [pc, #52]	@ (8015c68 <rmw_init+0x20c>)
 8015c34:	4621      	mov	r1, r4
 8015c36:	f7ff fdbb 	bl	80157b0 <put_memory>
 8015c3a:	4638      	mov	r0, r7
 8015c3c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8015c40:	b003      	add	sp, #12
 8015c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c46:	4648      	mov	r0, r9
 8015c48:	f001 f990 	bl	8016f6c <uxr_close_custom_transport>
 8015c4c:	4806      	ldr	r0, [pc, #24]	@ (8015c68 <rmw_init+0x20c>)
 8015c4e:	4621      	mov	r1, r4
 8015c50:	f7ff fdae 	bl	80157b0 <put_memory>
 8015c54:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8015c56:	2701      	movs	r7, #1
 8015c58:	e7d5      	b.n	8015c06 <rmw_init+0x1aa>
 8015c5a:	bf00      	nop
 8015c5c:	0801c434 	.word	0x0801c434
 8015c60:	20015694 	.word	0x20015694
 8015c64:	20011940 	.word	0x20011940
 8015c68:	20015684 	.word	0x20015684
 8015c6c:	20012ee8 	.word	0x20012ee8
 8015c70:	20010f64 	.word	0x20010f64
 8015c74:	20015654 	.word	0x20015654
 8015c78:	20014fe8 	.word	0x20014fe8
 8015c7c:	200156a4 	.word	0x200156a4
 8015c80:	20011008 	.word	0x20011008
 8015c84:	20015664 	.word	0x20015664
 8015c88:	20011878 	.word	0x20011878
 8015c8c:	20015674 	.word	0x20015674
 8015c90:	20010d98 	.word	0x20010d98
 8015c94:	20010d88 	.word	0x20010d88
 8015c98:	20015420 	.word	0x20015420
 8015c9c:	200156b4 	.word	0x200156b4
 8015ca0:	20010ee0 	.word	0x20010ee0
 8015ca4:	20015644 	.word	0x20015644
 8015ca8:	200155c4 	.word	0x200155c4
 8015cac:	200156c4 	.word	0x200156c4
 8015cb0:	20010e60 	.word	0x20010e60
 8015cb4:	20015634 	.word	0x20015634
 8015cb8:	08018c59 	.word	0x08018c59
 8015cbc:	08018c51 	.word	0x08018c51
 8015cc0:	08018cf1 	.word	0x08018cf1
 8015cc4:	08018d8d 	.word	0x08018d8d

08015cc8 <rmw_context_fini>:
 8015cc8:	4b17      	ldr	r3, [pc, #92]	@ (8015d28 <rmw_context_fini+0x60>)
 8015cca:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8015ccc:	b570      	push	{r4, r5, r6, lr}
 8015cce:	681c      	ldr	r4, [r3, #0]
 8015cd0:	4605      	mov	r5, r0
 8015cd2:	b334      	cbz	r4, 8015d22 <rmw_context_fini+0x5a>
 8015cd4:	2600      	movs	r6, #0
 8015cd6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015cda:	6902      	ldr	r2, [r0, #16]
 8015cdc:	428a      	cmp	r2, r1
 8015cde:	d018      	beq.n	8015d12 <rmw_context_fini+0x4a>
 8015ce0:	2c00      	cmp	r4, #0
 8015ce2:	d1f8      	bne.n	8015cd6 <rmw_context_fini+0xe>
 8015ce4:	b189      	cbz	r1, 8015d0a <rmw_context_fini+0x42>
 8015ce6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8015cea:	789b      	ldrb	r3, [r3, #2]
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8015cf2:	bf14      	ite	ne
 8015cf4:	210a      	movne	r1, #10
 8015cf6:	2100      	moveq	r1, #0
 8015cf8:	f7fa fb36 	bl	8010368 <uxr_delete_session_retries>
 8015cfc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015cfe:	f7f6 f9b5 	bl	800c06c <rmw_uxrce_fini_session_memory>
 8015d02:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015d04:	3010      	adds	r0, #16
 8015d06:	f001 f931 	bl	8016f6c <uxr_close_custom_transport>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8015d0e:	4630      	mov	r0, r6
 8015d10:	bd70      	pop	{r4, r5, r6, pc}
 8015d12:	3018      	adds	r0, #24
 8015d14:	f000 f90e 	bl	8015f34 <rmw_destroy_node>
 8015d18:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8015d1a:	4606      	mov	r6, r0
 8015d1c:	2c00      	cmp	r4, #0
 8015d1e:	d1da      	bne.n	8015cd6 <rmw_context_fini+0xe>
 8015d20:	e7e0      	b.n	8015ce4 <rmw_context_fini+0x1c>
 8015d22:	4626      	mov	r6, r4
 8015d24:	e7de      	b.n	8015ce4 <rmw_context_fini+0x1c>
 8015d26:	bf00      	nop
 8015d28:	20015654 	.word	0x20015654

08015d2c <create_topic>:
 8015d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d30:	4605      	mov	r5, r0
 8015d32:	b084      	sub	sp, #16
 8015d34:	4822      	ldr	r0, [pc, #136]	@ (8015dc0 <create_topic+0x94>)
 8015d36:	460f      	mov	r7, r1
 8015d38:	4616      	mov	r6, r2
 8015d3a:	f7ff fd29 	bl	8015790 <get_memory>
 8015d3e:	4604      	mov	r4, r0
 8015d40:	2800      	cmp	r0, #0
 8015d42:	d039      	beq.n	8015db8 <create_topic+0x8c>
 8015d44:	692b      	ldr	r3, [r5, #16]
 8015d46:	6884      	ldr	r4, [r0, #8]
 8015d48:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015dc8 <create_topic+0x9c>
 8015d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015d50:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015d54:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015d58:	1c42      	adds	r2, r0, #1
 8015d5a:	2102      	movs	r1, #2
 8015d5c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015d60:	f7f9 fcaa 	bl	800f6b8 <uxr_object_id>
 8015d64:	223c      	movs	r2, #60	@ 0x3c
 8015d66:	6120      	str	r0, [r4, #16]
 8015d68:	4641      	mov	r1, r8
 8015d6a:	4638      	mov	r0, r7
 8015d6c:	f7f6 fbf6 	bl	800c55c <generate_topic_name>
 8015d70:	b1f0      	cbz	r0, 8015db0 <create_topic+0x84>
 8015d72:	4f14      	ldr	r7, [pc, #80]	@ (8015dc4 <create_topic+0x98>)
 8015d74:	4630      	mov	r0, r6
 8015d76:	2264      	movs	r2, #100	@ 0x64
 8015d78:	4639      	mov	r1, r7
 8015d7a:	f7f6 fbbf 	bl	800c4fc <generate_type_name>
 8015d7e:	b1b8      	cbz	r0, 8015db0 <create_topic+0x84>
 8015d80:	6928      	ldr	r0, [r5, #16]
 8015d82:	2306      	movs	r3, #6
 8015d84:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015d88:	f8cd 8000 	str.w	r8, [sp]
 8015d8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015d90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d94:	6811      	ldr	r1, [r2, #0]
 8015d96:	696b      	ldr	r3, [r5, #20]
 8015d98:	6922      	ldr	r2, [r4, #16]
 8015d9a:	f7f9 facf 	bl	800f33c <uxr_buffer_create_topic_bin>
 8015d9e:	4602      	mov	r2, r0
 8015da0:	6928      	ldr	r0, [r5, #16]
 8015da2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015da6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015daa:	f7f6 fad7 	bl	800c35c <run_xrce_session>
 8015dae:	b918      	cbnz	r0, 8015db8 <create_topic+0x8c>
 8015db0:	4620      	mov	r0, r4
 8015db2:	f7f6 f9d1 	bl	800c158 <rmw_uxrce_fini_topic_memory>
 8015db6:	2400      	movs	r4, #0
 8015db8:	4620      	mov	r0, r4
 8015dba:	b004      	add	sp, #16
 8015dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dc0:	200156b4 	.word	0x200156b4
 8015dc4:	20015808 	.word	0x20015808
 8015dc8:	200157cc 	.word	0x200157cc

08015dcc <destroy_topic>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	6985      	ldr	r5, [r0, #24]
 8015dd0:	b1d5      	cbz	r5, 8015e08 <destroy_topic+0x3c>
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	6928      	ldr	r0, [r5, #16]
 8015dd6:	6922      	ldr	r2, [r4, #16]
 8015dd8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015ddc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015de0:	6819      	ldr	r1, [r3, #0]
 8015de2:	f7f9 fa2d 	bl	800f240 <uxr_buffer_delete_entity>
 8015de6:	4602      	mov	r2, r0
 8015de8:	6928      	ldr	r0, [r5, #16]
 8015dea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015dee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015df2:	f7f6 fab3 	bl	800c35c <run_xrce_session>
 8015df6:	2800      	cmp	r0, #0
 8015df8:	4620      	mov	r0, r4
 8015dfa:	bf14      	ite	ne
 8015dfc:	2400      	movne	r4, #0
 8015dfe:	2402      	moveq	r4, #2
 8015e00:	f7f6 f9aa 	bl	800c158 <rmw_uxrce_fini_topic_memory>
 8015e04:	4620      	mov	r0, r4
 8015e06:	bd38      	pop	{r3, r4, r5, pc}
 8015e08:	2401      	movs	r4, #1
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	bd38      	pop	{r3, r4, r5, pc}
 8015e0e:	bf00      	nop

08015e10 <create_node>:
 8015e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e14:	b083      	sub	sp, #12
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d05f      	beq.n	8015eda <create_node+0xca>
 8015e1a:	4606      	mov	r6, r0
 8015e1c:	4835      	ldr	r0, [pc, #212]	@ (8015ef4 <create_node+0xe4>)
 8015e1e:	460f      	mov	r7, r1
 8015e20:	4690      	mov	r8, r2
 8015e22:	461d      	mov	r5, r3
 8015e24:	f7ff fcb4 	bl	8015790 <get_memory>
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d056      	beq.n	8015eda <create_node+0xca>
 8015e2c:	6884      	ldr	r4, [r0, #8]
 8015e2e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015e30:	6123      	str	r3, [r4, #16]
 8015e32:	f7ff fd15 	bl	8015860 <rmw_get_implementation_identifier>
 8015e36:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8015e3a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015e3e:	f8c4 9020 	str.w	r9, [r4, #32]
 8015e42:	4630      	mov	r0, r6
 8015e44:	f7ea f9dc 	bl	8000200 <strlen>
 8015e48:	1c42      	adds	r2, r0, #1
 8015e4a:	2a3c      	cmp	r2, #60	@ 0x3c
 8015e4c:	f104 0518 	add.w	r5, r4, #24
 8015e50:	d840      	bhi.n	8015ed4 <create_node+0xc4>
 8015e52:	4648      	mov	r0, r9
 8015e54:	4631      	mov	r1, r6
 8015e56:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8015e5a:	f003 fe6c 	bl	8019b36 <memcpy>
 8015e5e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8015e62:	4638      	mov	r0, r7
 8015e64:	f7ea f9cc 	bl	8000200 <strlen>
 8015e68:	1c42      	adds	r2, r0, #1
 8015e6a:	2a3c      	cmp	r2, #60	@ 0x3c
 8015e6c:	d832      	bhi.n	8015ed4 <create_node+0xc4>
 8015e6e:	4639      	mov	r1, r7
 8015e70:	4648      	mov	r0, r9
 8015e72:	f003 fe60 	bl	8019b36 <memcpy>
 8015e76:	6923      	ldr	r3, [r4, #16]
 8015e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8015e82:	1842      	adds	r2, r0, r1
 8015e84:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8015e88:	f7f9 fc16 	bl	800f6b8 <uxr_object_id>
 8015e8c:	6160      	str	r0, [r4, #20]
 8015e8e:	783b      	ldrb	r3, [r7, #0]
 8015e90:	2b2f      	cmp	r3, #47	@ 0x2f
 8015e92:	d127      	bne.n	8015ee4 <create_node+0xd4>
 8015e94:	787b      	ldrb	r3, [r7, #1]
 8015e96:	bb2b      	cbnz	r3, 8015ee4 <create_node+0xd4>
 8015e98:	4a17      	ldr	r2, [pc, #92]	@ (8015ef8 <create_node+0xe8>)
 8015e9a:	4818      	ldr	r0, [pc, #96]	@ (8015efc <create_node+0xec>)
 8015e9c:	4633      	mov	r3, r6
 8015e9e:	213c      	movs	r1, #60	@ 0x3c
 8015ea0:	f003 f96c 	bl	801917c <sniprintf>
 8015ea4:	6920      	ldr	r0, [r4, #16]
 8015ea6:	4915      	ldr	r1, [pc, #84]	@ (8015efc <create_node+0xec>)
 8015ea8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015eac:	9100      	str	r1, [sp, #0]
 8015eae:	2106      	movs	r1, #6
 8015eb0:	9101      	str	r1, [sp, #4]
 8015eb2:	6811      	ldr	r1, [r2, #0]
 8015eb4:	6962      	ldr	r2, [r4, #20]
 8015eb6:	fa1f f388 	uxth.w	r3, r8
 8015eba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ebe:	f7f9 fa0b 	bl	800f2d8 <uxr_buffer_create_participant_bin>
 8015ec2:	4602      	mov	r2, r0
 8015ec4:	6920      	ldr	r0, [r4, #16]
 8015ec6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015eca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015ece:	f7f6 fa45 	bl	800c35c <run_xrce_session>
 8015ed2:	b918      	cbnz	r0, 8015edc <create_node+0xcc>
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	f7f6 f8cf 	bl	800c078 <rmw_uxrce_fini_node_memory>
 8015eda:	2500      	movs	r5, #0
 8015edc:	4628      	mov	r0, r5
 8015ede:	b003      	add	sp, #12
 8015ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ee4:	4a06      	ldr	r2, [pc, #24]	@ (8015f00 <create_node+0xf0>)
 8015ee6:	9600      	str	r6, [sp, #0]
 8015ee8:	463b      	mov	r3, r7
 8015eea:	213c      	movs	r1, #60	@ 0x3c
 8015eec:	4803      	ldr	r0, [pc, #12]	@ (8015efc <create_node+0xec>)
 8015eee:	f003 f945 	bl	801917c <sniprintf>
 8015ef2:	e7d7      	b.n	8015ea4 <create_node+0x94>
 8015ef4:	20015654 	.word	0x20015654
 8015ef8:	0801b7bc 	.word	0x0801b7bc
 8015efc:	2001586c 	.word	0x2001586c
 8015f00:	0801be4c 	.word	0x0801be4c

08015f04 <rmw_create_node>:
 8015f04:	b199      	cbz	r1, 8015f2e <rmw_create_node+0x2a>
 8015f06:	780b      	ldrb	r3, [r1, #0]
 8015f08:	468c      	mov	ip, r1
 8015f0a:	b183      	cbz	r3, 8015f2e <rmw_create_node+0x2a>
 8015f0c:	b410      	push	{r4}
 8015f0e:	4614      	mov	r4, r2
 8015f10:	b14a      	cbz	r2, 8015f26 <rmw_create_node+0x22>
 8015f12:	7813      	ldrb	r3, [r2, #0]
 8015f14:	b13b      	cbz	r3, 8015f26 <rmw_create_node+0x22>
 8015f16:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015f18:	4603      	mov	r3, r0
 8015f1a:	4621      	mov	r1, r4
 8015f1c:	4660      	mov	r0, ip
 8015f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f22:	f7ff bf75 	b.w	8015e10 <create_node>
 8015f26:	2000      	movs	r0, #0
 8015f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f2c:	4770      	bx	lr
 8015f2e:	2000      	movs	r0, #0
 8015f30:	4770      	bx	lr
 8015f32:	bf00      	nop

08015f34 <rmw_destroy_node>:
 8015f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f36:	b328      	cbz	r0, 8015f84 <rmw_destroy_node+0x50>
 8015f38:	4607      	mov	r7, r0
 8015f3a:	6800      	ldr	r0, [r0, #0]
 8015f3c:	b120      	cbz	r0, 8015f48 <rmw_destroy_node+0x14>
 8015f3e:	4b36      	ldr	r3, [pc, #216]	@ (8016018 <rmw_destroy_node+0xe4>)
 8015f40:	6819      	ldr	r1, [r3, #0]
 8015f42:	f7ea f965 	bl	8000210 <strcmp>
 8015f46:	b9e8      	cbnz	r0, 8015f84 <rmw_destroy_node+0x50>
 8015f48:	687d      	ldr	r5, [r7, #4]
 8015f4a:	b1dd      	cbz	r5, 8015f84 <rmw_destroy_node+0x50>
 8015f4c:	4b33      	ldr	r3, [pc, #204]	@ (801601c <rmw_destroy_node+0xe8>)
 8015f4e:	681c      	ldr	r4, [r3, #0]
 8015f50:	2c00      	cmp	r4, #0
 8015f52:	d05f      	beq.n	8016014 <rmw_destroy_node+0xe0>
 8015f54:	2600      	movs	r6, #0
 8015f56:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015f5a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8015f5e:	429d      	cmp	r5, r3
 8015f60:	d013      	beq.n	8015f8a <rmw_destroy_node+0x56>
 8015f62:	2c00      	cmp	r4, #0
 8015f64:	d1f7      	bne.n	8015f56 <rmw_destroy_node+0x22>
 8015f66:	4b2e      	ldr	r3, [pc, #184]	@ (8016020 <rmw_destroy_node+0xec>)
 8015f68:	681c      	ldr	r4, [r3, #0]
 8015f6a:	b1c4      	cbz	r4, 8015f9e <rmw_destroy_node+0x6a>
 8015f6c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015f70:	6a0b      	ldr	r3, [r1, #32]
 8015f72:	429d      	cmp	r5, r3
 8015f74:	d1f9      	bne.n	8015f6a <rmw_destroy_node+0x36>
 8015f76:	317c      	adds	r1, #124	@ 0x7c
 8015f78:	4638      	mov	r0, r7
 8015f7a:	f000 fbd7 	bl	801672c <rmw_destroy_subscription>
 8015f7e:	2801      	cmp	r0, #1
 8015f80:	4606      	mov	r6, r0
 8015f82:	d1f2      	bne.n	8015f6a <rmw_destroy_node+0x36>
 8015f84:	2601      	movs	r6, #1
 8015f86:	4630      	mov	r0, r6
 8015f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f8a:	3184      	adds	r1, #132	@ 0x84
 8015f8c:	4638      	mov	r0, r7
 8015f8e:	f7f5 febb 	bl	800bd08 <rmw_destroy_publisher>
 8015f92:	2801      	cmp	r0, #1
 8015f94:	4606      	mov	r6, r0
 8015f96:	d0f5      	beq.n	8015f84 <rmw_destroy_node+0x50>
 8015f98:	2c00      	cmp	r4, #0
 8015f9a:	d1dc      	bne.n	8015f56 <rmw_destroy_node+0x22>
 8015f9c:	e7e3      	b.n	8015f66 <rmw_destroy_node+0x32>
 8015f9e:	4b21      	ldr	r3, [pc, #132]	@ (8016024 <rmw_destroy_node+0xf0>)
 8015fa0:	681c      	ldr	r4, [r3, #0]
 8015fa2:	b16c      	cbz	r4, 8015fc0 <rmw_destroy_node+0x8c>
 8015fa4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015fa8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015faa:	429d      	cmp	r5, r3
 8015fac:	d1f9      	bne.n	8015fa2 <rmw_destroy_node+0x6e>
 8015fae:	317c      	adds	r1, #124	@ 0x7c
 8015fb0:	4638      	mov	r0, r7
 8015fb2:	f000 fa65 	bl	8016480 <rmw_destroy_service>
 8015fb6:	2801      	cmp	r0, #1
 8015fb8:	4606      	mov	r6, r0
 8015fba:	d0e3      	beq.n	8015f84 <rmw_destroy_node+0x50>
 8015fbc:	2c00      	cmp	r4, #0
 8015fbe:	d1f1      	bne.n	8015fa4 <rmw_destroy_node+0x70>
 8015fc0:	4b19      	ldr	r3, [pc, #100]	@ (8016028 <rmw_destroy_node+0xf4>)
 8015fc2:	681c      	ldr	r4, [r3, #0]
 8015fc4:	b16c      	cbz	r4, 8015fe2 <rmw_destroy_node+0xae>
 8015fc6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015fca:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015fcc:	429d      	cmp	r5, r3
 8015fce:	d1f9      	bne.n	8015fc4 <rmw_destroy_node+0x90>
 8015fd0:	317c      	adds	r1, #124	@ 0x7c
 8015fd2:	4638      	mov	r0, r7
 8015fd4:	f7ff fc00 	bl	80157d8 <rmw_destroy_client>
 8015fd8:	2801      	cmp	r0, #1
 8015fda:	4606      	mov	r6, r0
 8015fdc:	d0d2      	beq.n	8015f84 <rmw_destroy_node+0x50>
 8015fde:	2c00      	cmp	r4, #0
 8015fe0:	d1f1      	bne.n	8015fc6 <rmw_destroy_node+0x92>
 8015fe2:	6928      	ldr	r0, [r5, #16]
 8015fe4:	696a      	ldr	r2, [r5, #20]
 8015fe6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015fea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fee:	6819      	ldr	r1, [r3, #0]
 8015ff0:	f7f9 f926 	bl	800f240 <uxr_buffer_delete_entity>
 8015ff4:	4602      	mov	r2, r0
 8015ff6:	6928      	ldr	r0, [r5, #16]
 8015ff8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015ffc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016000:	f7f6 f9ac 	bl	800c35c <run_xrce_session>
 8016004:	2800      	cmp	r0, #0
 8016006:	bf08      	it	eq
 8016008:	2602      	moveq	r6, #2
 801600a:	4638      	mov	r0, r7
 801600c:	f7f6 f834 	bl	800c078 <rmw_uxrce_fini_node_memory>
 8016010:	4630      	mov	r0, r6
 8016012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016014:	4626      	mov	r6, r4
 8016016:	e7a6      	b.n	8015f66 <rmw_destroy_node+0x32>
 8016018:	0801c434 	.word	0x0801c434
 801601c:	20015664 	.word	0x20015664
 8016020:	200156a4 	.word	0x200156a4
 8016024:	20015674 	.word	0x20015674
 8016028:	20010d88 	.word	0x20010d88

0801602c <rmw_node_get_graph_guard_condition>:
 801602c:	6843      	ldr	r3, [r0, #4]
 801602e:	6918      	ldr	r0, [r3, #16]
 8016030:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8016034:	4770      	bx	lr
 8016036:	bf00      	nop

08016038 <rmw_send_request>:
 8016038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801603c:	4604      	mov	r4, r0
 801603e:	6800      	ldr	r0, [r0, #0]
 8016040:	b08b      	sub	sp, #44	@ 0x2c
 8016042:	460e      	mov	r6, r1
 8016044:	4615      	mov	r5, r2
 8016046:	b128      	cbz	r0, 8016054 <rmw_send_request+0x1c>
 8016048:	4b21      	ldr	r3, [pc, #132]	@ (80160d0 <rmw_send_request+0x98>)
 801604a:	6819      	ldr	r1, [r3, #0]
 801604c:	f7ea f8e0 	bl	8000210 <strcmp>
 8016050:	2800      	cmp	r0, #0
 8016052:	d139      	bne.n	80160c8 <rmw_send_request+0x90>
 8016054:	6864      	ldr	r4, [r4, #4]
 8016056:	6963      	ldr	r3, [r4, #20]
 8016058:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801605c:	689b      	ldr	r3, [r3, #8]
 801605e:	4798      	blx	r3
 8016060:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016064:	4630      	mov	r0, r6
 8016066:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801606a:	4798      	blx	r3
 801606c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016070:	9000      	str	r0, [sp, #0]
 8016072:	6922      	ldr	r2, [r4, #16]
 8016074:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016076:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801607a:	ab02      	add	r3, sp, #8
 801607c:	f7fa fe18 	bl	8010cb0 <uxr_prepare_output_stream>
 8016080:	2700      	movs	r7, #0
 8016082:	6028      	str	r0, [r5, #0]
 8016084:	606f      	str	r7, [r5, #4]
 8016086:	b198      	cbz	r0, 80160b0 <rmw_send_request+0x78>
 8016088:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801608c:	a902      	add	r1, sp, #8
 801608e:	4630      	mov	r0, r6
 8016090:	4798      	blx	r3
 8016092:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016096:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801609a:	2b01      	cmp	r3, #1
 801609c:	d00c      	beq.n	80160b8 <rmw_send_request+0x80>
 801609e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80160a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160a4:	f7fa f818 	bl	80100d8 <uxr_run_session_until_confirm_delivery>
 80160a8:	4638      	mov	r0, r7
 80160aa:	b00b      	add	sp, #44	@ 0x2c
 80160ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160b0:	2001      	movs	r0, #1
 80160b2:	b00b      	add	sp, #44	@ 0x2c
 80160b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160bc:	f7f9 fc4c 	bl	800f958 <uxr_flash_output_streams>
 80160c0:	4638      	mov	r0, r7
 80160c2:	b00b      	add	sp, #44	@ 0x2c
 80160c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160c8:	200c      	movs	r0, #12
 80160ca:	b00b      	add	sp, #44	@ 0x2c
 80160cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160d0:	0801c434 	.word	0x0801c434

080160d4 <rmw_take_request>:
 80160d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160d8:	4605      	mov	r5, r0
 80160da:	6800      	ldr	r0, [r0, #0]
 80160dc:	b089      	sub	sp, #36	@ 0x24
 80160de:	460c      	mov	r4, r1
 80160e0:	4690      	mov	r8, r2
 80160e2:	461e      	mov	r6, r3
 80160e4:	b128      	cbz	r0, 80160f2 <rmw_take_request+0x1e>
 80160e6:	4b28      	ldr	r3, [pc, #160]	@ (8016188 <rmw_take_request+0xb4>)
 80160e8:	6819      	ldr	r1, [r3, #0]
 80160ea:	f7ea f891 	bl	8000210 <strcmp>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	d146      	bne.n	8016180 <rmw_take_request+0xac>
 80160f2:	b10e      	cbz	r6, 80160f8 <rmw_take_request+0x24>
 80160f4:	2300      	movs	r3, #0
 80160f6:	7033      	strb	r3, [r6, #0]
 80160f8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80160fc:	f7f6 f8b0 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 8016100:	4648      	mov	r0, r9
 8016102:	f7f6 f885 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016106:	4607      	mov	r7, r0
 8016108:	b3b0      	cbz	r0, 8016178 <rmw_take_request+0xa4>
 801610a:	6885      	ldr	r5, [r0, #8]
 801610c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016110:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016114:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016118:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801611c:	7423      	strb	r3, [r4, #16]
 801611e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016122:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016126:	74e2      	strb	r2, [r4, #19]
 8016128:	f8a4 3011 	strh.w	r3, [r4, #17]
 801612c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016130:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016134:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016138:	61e1      	str	r1, [r4, #28]
 801613a:	6162      	str	r2, [r4, #20]
 801613c:	61a3      	str	r3, [r4, #24]
 801613e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016142:	689b      	ldr	r3, [r3, #8]
 8016144:	4798      	blx	r3
 8016146:	6844      	ldr	r4, [r0, #4]
 8016148:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801614c:	f105 0110 	add.w	r1, r5, #16
 8016150:	4668      	mov	r0, sp
 8016152:	f7f8 ffad 	bl	800f0b0 <ucdr_init_buffer>
 8016156:	68e3      	ldr	r3, [r4, #12]
 8016158:	4641      	mov	r1, r8
 801615a:	4668      	mov	r0, sp
 801615c:	4798      	blx	r3
 801615e:	4639      	mov	r1, r7
 8016160:	4604      	mov	r4, r0
 8016162:	480a      	ldr	r0, [pc, #40]	@ (801618c <rmw_take_request+0xb8>)
 8016164:	f7ff fb24 	bl	80157b0 <put_memory>
 8016168:	b106      	cbz	r6, 801616c <rmw_take_request+0x98>
 801616a:	7034      	strb	r4, [r6, #0]
 801616c:	f084 0001 	eor.w	r0, r4, #1
 8016170:	b2c0      	uxtb	r0, r0
 8016172:	b009      	add	sp, #36	@ 0x24
 8016174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016178:	2001      	movs	r0, #1
 801617a:	b009      	add	sp, #36	@ 0x24
 801617c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016180:	200c      	movs	r0, #12
 8016182:	b009      	add	sp, #36	@ 0x24
 8016184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016188:	0801c434 	.word	0x0801c434
 801618c:	20015694 	.word	0x20015694

08016190 <rmw_send_response>:
 8016190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016192:	4605      	mov	r5, r0
 8016194:	6800      	ldr	r0, [r0, #0]
 8016196:	b091      	sub	sp, #68	@ 0x44
 8016198:	460c      	mov	r4, r1
 801619a:	4616      	mov	r6, r2
 801619c:	b128      	cbz	r0, 80161aa <rmw_send_response+0x1a>
 801619e:	4b29      	ldr	r3, [pc, #164]	@ (8016244 <rmw_send_response+0xb4>)
 80161a0:	6819      	ldr	r1, [r3, #0]
 80161a2:	f7ea f835 	bl	8000210 <strcmp>
 80161a6:	2800      	cmp	r0, #0
 80161a8:	d141      	bne.n	801622e <rmw_send_response+0x9e>
 80161aa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80161ae:	9306      	str	r3, [sp, #24]
 80161b0:	4623      	mov	r3, r4
 80161b2:	9207      	str	r2, [sp, #28]
 80161b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161b8:	686d      	ldr	r5, [r5, #4]
 80161ba:	789b      	ldrb	r3, [r3, #2]
 80161bc:	68a1      	ldr	r1, [r4, #8]
 80161be:	f88d 2017 	strb.w	r2, [sp, #23]
 80161c2:	f88d 3016 	strb.w	r3, [sp, #22]
 80161c6:	68e2      	ldr	r2, [r4, #12]
 80161c8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80161cc:	6860      	ldr	r0, [r4, #4]
 80161ce:	f8ad 3014 	strh.w	r3, [sp, #20]
 80161d2:	ab02      	add	r3, sp, #8
 80161d4:	c307      	stmia	r3!, {r0, r1, r2}
 80161d6:	696b      	ldr	r3, [r5, #20]
 80161d8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	4798      	blx	r3
 80161de:	6844      	ldr	r4, [r0, #4]
 80161e0:	4630      	mov	r0, r6
 80161e2:	6923      	ldr	r3, [r4, #16]
 80161e4:	4798      	blx	r3
 80161e6:	f100 0318 	add.w	r3, r0, #24
 80161ea:	6938      	ldr	r0, [r7, #16]
 80161ec:	9300      	str	r3, [sp, #0]
 80161ee:	692a      	ldr	r2, [r5, #16]
 80161f0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80161f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161f6:	ab08      	add	r3, sp, #32
 80161f8:	f7fa fd5a 	bl	8010cb0 <uxr_prepare_output_stream>
 80161fc:	b910      	cbnz	r0, 8016204 <rmw_send_response+0x74>
 80161fe:	2001      	movs	r0, #1
 8016200:	b011      	add	sp, #68	@ 0x44
 8016202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016204:	a902      	add	r1, sp, #8
 8016206:	a808      	add	r0, sp, #32
 8016208:	f7fb febe 	bl	8011f88 <uxr_serialize_SampleIdentity>
 801620c:	68a3      	ldr	r3, [r4, #8]
 801620e:	a908      	add	r1, sp, #32
 8016210:	4630      	mov	r0, r6
 8016212:	4798      	blx	r3
 8016214:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016218:	6938      	ldr	r0, [r7, #16]
 801621a:	2b01      	cmp	r3, #1
 801621c:	d00a      	beq.n	8016234 <rmw_send_response+0xa4>
 801621e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016224:	f7f9 ff58 	bl	80100d8 <uxr_run_session_until_confirm_delivery>
 8016228:	2000      	movs	r0, #0
 801622a:	b011      	add	sp, #68	@ 0x44
 801622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801622e:	200c      	movs	r0, #12
 8016230:	b011      	add	sp, #68	@ 0x44
 8016232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016234:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016238:	f7f9 fb8e 	bl	800f958 <uxr_flash_output_streams>
 801623c:	2000      	movs	r0, #0
 801623e:	b011      	add	sp, #68	@ 0x44
 8016240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016242:	bf00      	nop
 8016244:	0801c434 	.word	0x0801c434

08016248 <rmw_take_response>:
 8016248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801624c:	4604      	mov	r4, r0
 801624e:	6800      	ldr	r0, [r0, #0]
 8016250:	b088      	sub	sp, #32
 8016252:	4688      	mov	r8, r1
 8016254:	4617      	mov	r7, r2
 8016256:	461d      	mov	r5, r3
 8016258:	b120      	cbz	r0, 8016264 <rmw_take_response+0x1c>
 801625a:	4b1e      	ldr	r3, [pc, #120]	@ (80162d4 <rmw_take_response+0x8c>)
 801625c:	6819      	ldr	r1, [r3, #0]
 801625e:	f7e9 ffd7 	bl	8000210 <strcmp>
 8016262:	bb78      	cbnz	r0, 80162c4 <rmw_take_response+0x7c>
 8016264:	b10d      	cbz	r5, 801626a <rmw_take_response+0x22>
 8016266:	2300      	movs	r3, #0
 8016268:	702b      	strb	r3, [r5, #0]
 801626a:	6864      	ldr	r4, [r4, #4]
 801626c:	f7f5 fff8 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 8016270:	4620      	mov	r0, r4
 8016272:	f7f5 ffcd 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016276:	4606      	mov	r6, r0
 8016278:	b340      	cbz	r0, 80162cc <rmw_take_response+0x84>
 801627a:	6963      	ldr	r3, [r4, #20]
 801627c:	6884      	ldr	r4, [r0, #8]
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016284:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016288:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801628c:	4798      	blx	r3
 801628e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016292:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016296:	f104 0110 	add.w	r1, r4, #16
 801629a:	4668      	mov	r0, sp
 801629c:	f7f8 ff08 	bl	800f0b0 <ucdr_init_buffer>
 80162a0:	4639      	mov	r1, r7
 80162a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80162a6:	4668      	mov	r0, sp
 80162a8:	4798      	blx	r3
 80162aa:	4631      	mov	r1, r6
 80162ac:	4604      	mov	r4, r0
 80162ae:	480a      	ldr	r0, [pc, #40]	@ (80162d8 <rmw_take_response+0x90>)
 80162b0:	f7ff fa7e 	bl	80157b0 <put_memory>
 80162b4:	b105      	cbz	r5, 80162b8 <rmw_take_response+0x70>
 80162b6:	702c      	strb	r4, [r5, #0]
 80162b8:	f084 0001 	eor.w	r0, r4, #1
 80162bc:	b2c0      	uxtb	r0, r0
 80162be:	b008      	add	sp, #32
 80162c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c4:	200c      	movs	r0, #12
 80162c6:	b008      	add	sp, #32
 80162c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162cc:	2001      	movs	r0, #1
 80162ce:	b008      	add	sp, #32
 80162d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162d4:	0801c434 	.word	0x0801c434
 80162d8:	20015694 	.word	0x20015694

080162dc <rmw_create_service>:
 80162dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e0:	b091      	sub	sp, #68	@ 0x44
 80162e2:	2800      	cmp	r0, #0
 80162e4:	f000 80ba 	beq.w	801645c <rmw_create_service+0x180>
 80162e8:	4689      	mov	r9, r1
 80162ea:	2900      	cmp	r1, #0
 80162ec:	f000 80b6 	beq.w	801645c <rmw_create_service+0x180>
 80162f0:	4606      	mov	r6, r0
 80162f2:	6800      	ldr	r0, [r0, #0]
 80162f4:	4614      	mov	r4, r2
 80162f6:	461d      	mov	r5, r3
 80162f8:	f7f6 f94a 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 80162fc:	2800      	cmp	r0, #0
 80162fe:	f000 80ad 	beq.w	801645c <rmw_create_service+0x180>
 8016302:	2c00      	cmp	r4, #0
 8016304:	f000 80aa 	beq.w	801645c <rmw_create_service+0x180>
 8016308:	7823      	ldrb	r3, [r4, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	f000 80a6 	beq.w	801645c <rmw_create_service+0x180>
 8016310:	2d00      	cmp	r5, #0
 8016312:	f000 80a3 	beq.w	801645c <rmw_create_service+0x180>
 8016316:	4854      	ldr	r0, [pc, #336]	@ (8016468 <rmw_create_service+0x18c>)
 8016318:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801631c:	f7ff fa38 	bl	8015790 <get_memory>
 8016320:	4606      	mov	r6, r0
 8016322:	2800      	cmp	r0, #0
 8016324:	f000 809b 	beq.w	801645e <rmw_create_service+0x182>
 8016328:	6887      	ldr	r7, [r0, #8]
 801632a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801632e:	f7ff fa97 	bl	8015860 <rmw_get_implementation_identifier>
 8016332:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 8016336:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8016338:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801633c:	4620      	mov	r0, r4
 801633e:	f7e9 ff5f 	bl	8000200 <strlen>
 8016342:	1c42      	adds	r2, r0, #1
 8016344:	2a3c      	cmp	r2, #60	@ 0x3c
 8016346:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 801634a:	f200 8084 	bhi.w	8016456 <rmw_create_service+0x17a>
 801634e:	4621      	mov	r1, r4
 8016350:	4650      	mov	r0, sl
 8016352:	f003 fbf0 	bl	8019b36 <memcpy>
 8016356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801635a:	4629      	mov	r1, r5
 801635c:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 8016360:	677b      	str	r3, [r7, #116]	@ 0x74
 8016362:	2250      	movs	r2, #80	@ 0x50
 8016364:	f107 0020 	add.w	r0, r7, #32
 8016368:	f003 fbe5 	bl	8019b36 <memcpy>
 801636c:	493f      	ldr	r1, [pc, #252]	@ (801646c <rmw_create_service+0x190>)
 801636e:	4648      	mov	r0, r9
 8016370:	f7f6 f928 	bl	800c5c4 <get_service_typesupport_handle>
 8016374:	2800      	cmp	r0, #0
 8016376:	d06e      	beq.n	8016456 <rmw_create_service+0x17a>
 8016378:	6843      	ldr	r3, [r0, #4]
 801637a:	617b      	str	r3, [r7, #20]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d06a      	beq.n	8016456 <rmw_create_service+0x17a>
 8016380:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016384:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 8016474 <rmw_create_service+0x198>
 8016388:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8016478 <rmw_create_service+0x19c>
 801638c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016390:	2108      	movs	r1, #8
 8016392:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 8016396:	1c42      	adds	r2, r0, #1
 8016398:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 801639c:	f7f9 f98c 	bl	800f6b8 <uxr_object_id>
 80163a0:	2364      	movs	r3, #100	@ 0x64
 80163a2:	6138      	str	r0, [r7, #16]
 80163a4:	4652      	mov	r2, sl
 80163a6:	6978      	ldr	r0, [r7, #20]
 80163a8:	4649      	mov	r1, r9
 80163aa:	f7f6 f83f 	bl	800c42c <generate_service_types>
 80163ae:	2800      	cmp	r0, #0
 80163b0:	d051      	beq.n	8016456 <rmw_create_service+0x17a>
 80163b2:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 801647c <rmw_create_service+0x1a0>
 80163b6:	4a2e      	ldr	r2, [pc, #184]	@ (8016470 <rmw_create_service+0x194>)
 80163b8:	233c      	movs	r3, #60	@ 0x3c
 80163ba:	4659      	mov	r1, fp
 80163bc:	4620      	mov	r0, r4
 80163be:	f7f6 f803 	bl	800c3c8 <generate_service_topics>
 80163c2:	2800      	cmp	r0, #0
 80163c4:	d047      	beq.n	8016456 <rmw_create_service+0x17a>
 80163c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80163ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80163ce:	a80c      	add	r0, sp, #48	@ 0x30
 80163d0:	4629      	mov	r1, r5
 80163d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80163d6:	f7f5 ffdd 	bl	800c394 <convert_qos_profile>
 80163da:	4a25      	ldr	r2, [pc, #148]	@ (8016470 <rmw_create_service+0x194>)
 80163dc:	9400      	str	r4, [sp, #0]
 80163de:	e9cd b203 	strd	fp, r2, [sp, #12]
 80163e2:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80163e6:	a80c      	add	r0, sp, #48	@ 0x30
 80163e8:	c803      	ldmia	r0, {r0, r1}
 80163ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80163ec:	9005      	str	r0, [sp, #20]
 80163ee:	9a08      	ldr	r2, [sp, #32]
 80163f0:	f8ad 1018 	strh.w	r1, [sp, #24]
 80163f4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80163f8:	2306      	movs	r3, #6
 80163fa:	9307      	str	r3, [sp, #28]
 80163fc:	6811      	ldr	r1, [r2, #0]
 80163fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8016402:	693a      	ldr	r2, [r7, #16]
 8016404:	f7f9 f91e 	bl	800f644 <uxr_buffer_create_replier_bin>
 8016408:	4602      	mov	r2, r0
 801640a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801640e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016412:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016416:	f7f5 ffa1 	bl	800c35c <run_xrce_session>
 801641a:	b1e0      	cbz	r0, 8016456 <rmw_create_service+0x17a>
 801641c:	7a2b      	ldrb	r3, [r5, #8]
 801641e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016422:	2200      	movs	r2, #0
 8016424:	2b02      	cmp	r3, #2
 8016426:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801642a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 801642e:	bf0c      	ite	eq
 8016430:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 8016434:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 8016438:	673a      	str	r2, [r7, #112]	@ 0x70
 801643a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801643c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016440:	ab0e      	add	r3, sp, #56	@ 0x38
 8016442:	9300      	str	r3, [sp, #0]
 8016444:	6811      	ldr	r1, [r2, #0]
 8016446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016448:	693a      	ldr	r2, [r7, #16]
 801644a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801644e:	f001 fad9 	bl	8017a04 <uxr_buffer_request_data>
 8016452:	8338      	strh	r0, [r7, #24]
 8016454:	e003      	b.n	801645e <rmw_create_service+0x182>
 8016456:	4630      	mov	r0, r6
 8016458:	f7f5 fe52 	bl	800c100 <rmw_uxrce_fini_service_memory>
 801645c:	2600      	movs	r6, #0
 801645e:	4630      	mov	r0, r6
 8016460:	b011      	add	sp, #68	@ 0x44
 8016462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016466:	bf00      	nop
 8016468:	20015674 	.word	0x20015674
 801646c:	0801b044 	.word	0x0801b044
 8016470:	20015948 	.word	0x20015948
 8016474:	20015984 	.word	0x20015984
 8016478:	200158e4 	.word	0x200158e4
 801647c:	200158a8 	.word	0x200158a8

08016480 <rmw_destroy_service>:
 8016480:	b570      	push	{r4, r5, r6, lr}
 8016482:	b128      	cbz	r0, 8016490 <rmw_destroy_service+0x10>
 8016484:	4604      	mov	r4, r0
 8016486:	6800      	ldr	r0, [r0, #0]
 8016488:	460d      	mov	r5, r1
 801648a:	f7f6 f881 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 801648e:	b910      	cbnz	r0, 8016496 <rmw_destroy_service+0x16>
 8016490:	2401      	movs	r4, #1
 8016492:	4620      	mov	r0, r4
 8016494:	bd70      	pop	{r4, r5, r6, pc}
 8016496:	6863      	ldr	r3, [r4, #4]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d0f9      	beq.n	8016490 <rmw_destroy_service+0x10>
 801649c:	2d00      	cmp	r5, #0
 801649e:	d0f7      	beq.n	8016490 <rmw_destroy_service+0x10>
 80164a0:	6828      	ldr	r0, [r5, #0]
 80164a2:	f7f6 f875 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 80164a6:	2800      	cmp	r0, #0
 80164a8:	d0f2      	beq.n	8016490 <rmw_destroy_service+0x10>
 80164aa:	686e      	ldr	r6, [r5, #4]
 80164ac:	2e00      	cmp	r6, #0
 80164ae:	d0ef      	beq.n	8016490 <rmw_destroy_service+0x10>
 80164b0:	6864      	ldr	r4, [r4, #4]
 80164b2:	6932      	ldr	r2, [r6, #16]
 80164b4:	6920      	ldr	r0, [r4, #16]
 80164b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80164ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164be:	6819      	ldr	r1, [r3, #0]
 80164c0:	f001 fada 	bl	8017a78 <uxr_buffer_cancel_data>
 80164c4:	4602      	mov	r2, r0
 80164c6:	6920      	ldr	r0, [r4, #16]
 80164c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80164cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80164d0:	f7f5 ff44 	bl	800c35c <run_xrce_session>
 80164d4:	6920      	ldr	r0, [r4, #16]
 80164d6:	6932      	ldr	r2, [r6, #16]
 80164d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80164dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80164e0:	6819      	ldr	r1, [r3, #0]
 80164e2:	f7f8 fead 	bl	800f240 <uxr_buffer_delete_entity>
 80164e6:	4602      	mov	r2, r0
 80164e8:	6920      	ldr	r0, [r4, #16]
 80164ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80164ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80164f2:	f7f5 ff33 	bl	800c35c <run_xrce_session>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	4628      	mov	r0, r5
 80164fa:	bf14      	ite	ne
 80164fc:	2400      	movne	r4, #0
 80164fe:	2402      	moveq	r4, #2
 8016500:	f7f5 fdfe 	bl	800c100 <rmw_uxrce_fini_service_memory>
 8016504:	e7c5      	b.n	8016492 <rmw_destroy_service+0x12>
 8016506:	bf00      	nop

08016508 <rmw_service_response_publisher_get_actual_qos>:
 8016508:	b150      	cbz	r0, 8016520 <rmw_service_response_publisher_get_actual_qos+0x18>
 801650a:	b508      	push	{r3, lr}
 801650c:	460b      	mov	r3, r1
 801650e:	b149      	cbz	r1, 8016524 <rmw_service_response_publisher_get_actual_qos+0x1c>
 8016510:	6841      	ldr	r1, [r0, #4]
 8016512:	2250      	movs	r2, #80	@ 0x50
 8016514:	3120      	adds	r1, #32
 8016516:	4618      	mov	r0, r3
 8016518:	f003 fb0d 	bl	8019b36 <memcpy>
 801651c:	2000      	movs	r0, #0
 801651e:	bd08      	pop	{r3, pc}
 8016520:	200b      	movs	r0, #11
 8016522:	4770      	bx	lr
 8016524:	200b      	movs	r0, #11
 8016526:	bd08      	pop	{r3, pc}

08016528 <rmw_service_request_subscription_get_actual_qos>:
 8016528:	b150      	cbz	r0, 8016540 <rmw_service_request_subscription_get_actual_qos+0x18>
 801652a:	b508      	push	{r3, lr}
 801652c:	460b      	mov	r3, r1
 801652e:	b149      	cbz	r1, 8016544 <rmw_service_request_subscription_get_actual_qos+0x1c>
 8016530:	6841      	ldr	r1, [r0, #4]
 8016532:	2250      	movs	r2, #80	@ 0x50
 8016534:	3120      	adds	r1, #32
 8016536:	4618      	mov	r0, r3
 8016538:	f003 fafd 	bl	8019b36 <memcpy>
 801653c:	2000      	movs	r0, #0
 801653e:	bd08      	pop	{r3, pc}
 8016540:	200b      	movs	r0, #11
 8016542:	4770      	bx	lr
 8016544:	200b      	movs	r0, #11
 8016546:	bd08      	pop	{r3, pc}

08016548 <rmw_create_subscription>:
 8016548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654c:	b08d      	sub	sp, #52	@ 0x34
 801654e:	2800      	cmp	r0, #0
 8016550:	f000 80d1 	beq.w	80166f6 <rmw_create_subscription+0x1ae>
 8016554:	460e      	mov	r6, r1
 8016556:	2900      	cmp	r1, #0
 8016558:	f000 80cd 	beq.w	80166f6 <rmw_create_subscription+0x1ae>
 801655c:	4604      	mov	r4, r0
 801655e:	6800      	ldr	r0, [r0, #0]
 8016560:	4615      	mov	r5, r2
 8016562:	4698      	mov	r8, r3
 8016564:	f7f6 f814 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 8016568:	2800      	cmp	r0, #0
 801656a:	f000 80c4 	beq.w	80166f6 <rmw_create_subscription+0x1ae>
 801656e:	2d00      	cmp	r5, #0
 8016570:	f000 80c1 	beq.w	80166f6 <rmw_create_subscription+0x1ae>
 8016574:	782b      	ldrb	r3, [r5, #0]
 8016576:	2b00      	cmp	r3, #0
 8016578:	f000 80bd 	beq.w	80166f6 <rmw_create_subscription+0x1ae>
 801657c:	f1b8 0f00 	cmp.w	r8, #0
 8016580:	f000 80b9 	beq.w	80166f6 <rmw_create_subscription+0x1ae>
 8016584:	485e      	ldr	r0, [pc, #376]	@ (8016700 <rmw_create_subscription+0x1b8>)
 8016586:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801658a:	f7ff f901 	bl	8015790 <get_memory>
 801658e:	4604      	mov	r4, r0
 8016590:	2800      	cmp	r0, #0
 8016592:	f000 80b1 	beq.w	80166f8 <rmw_create_subscription+0x1b0>
 8016596:	6887      	ldr	r7, [r0, #8]
 8016598:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801659c:	f7ff f960 	bl	8015860 <rmw_get_implementation_identifier>
 80165a0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80165a4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80165a6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80165aa:	4628      	mov	r0, r5
 80165ac:	f7e9 fe28 	bl	8000200 <strlen>
 80165b0:	3001      	adds	r0, #1
 80165b2:	283c      	cmp	r0, #60	@ 0x3c
 80165b4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80165b8:	f200 8096 	bhi.w	80166e8 <rmw_create_subscription+0x1a0>
 80165bc:	4a51      	ldr	r2, [pc, #324]	@ (8016704 <rmw_create_subscription+0x1bc>)
 80165be:	462b      	mov	r3, r5
 80165c0:	213c      	movs	r1, #60	@ 0x3c
 80165c2:	4650      	mov	r0, sl
 80165c4:	f002 fdda 	bl	801917c <sniprintf>
 80165c8:	4641      	mov	r1, r8
 80165ca:	f8c7 9020 	str.w	r9, [r7, #32]
 80165ce:	2250      	movs	r2, #80	@ 0x50
 80165d0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80165d4:	f003 faaf 	bl	8019b36 <memcpy>
 80165d8:	494b      	ldr	r1, [pc, #300]	@ (8016708 <rmw_create_subscription+0x1c0>)
 80165da:	4630      	mov	r0, r6
 80165dc:	f7f5 ffe6 	bl	800c5ac <get_message_typesupport_handle>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	f000 8081 	beq.w	80166e8 <rmw_create_subscription+0x1a0>
 80165e6:	6842      	ldr	r2, [r0, #4]
 80165e8:	61ba      	str	r2, [r7, #24]
 80165ea:	2a00      	cmp	r2, #0
 80165ec:	d07c      	beq.n	80166e8 <rmw_create_subscription+0x1a0>
 80165ee:	4629      	mov	r1, r5
 80165f0:	4643      	mov	r3, r8
 80165f2:	4648      	mov	r0, r9
 80165f4:	f7ff fb9a 	bl	8015d2c <create_topic>
 80165f8:	61f8      	str	r0, [r7, #28]
 80165fa:	2800      	cmp	r0, #0
 80165fc:	d078      	beq.n	80166f0 <rmw_create_subscription+0x1a8>
 80165fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016606:	2104      	movs	r1, #4
 8016608:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801660c:	1c42      	adds	r2, r0, #1
 801660e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8016612:	f7f9 f851 	bl	800f6b8 <uxr_object_id>
 8016616:	6138      	str	r0, [r7, #16]
 8016618:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801661c:	2506      	movs	r5, #6
 801661e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8016622:	9500      	str	r5, [sp, #0]
 8016624:	6819      	ldr	r1, [r3, #0]
 8016626:	693a      	ldr	r2, [r7, #16]
 8016628:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801662c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016630:	f7f8 feea 	bl	800f408 <uxr_buffer_create_subscriber_bin>
 8016634:	4602      	mov	r2, r0
 8016636:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801663a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801663e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016642:	f7f5 fe8b 	bl	800c35c <run_xrce_session>
 8016646:	2800      	cmp	r0, #0
 8016648:	d04e      	beq.n	80166e8 <rmw_create_subscription+0x1a0>
 801664a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801664e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016652:	4629      	mov	r1, r5
 8016654:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8016658:	1c42      	adds	r2, r0, #1
 801665a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801665e:	f7f9 f82b 	bl	800f6b8 <uxr_object_id>
 8016662:	ae08      	add	r6, sp, #32
 8016664:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016668:	69fb      	ldr	r3, [r7, #28]
 801666a:	6178      	str	r0, [r7, #20]
 801666c:	4641      	mov	r1, r8
 801666e:	4630      	mov	r0, r6
 8016670:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016674:	9305      	str	r3, [sp, #20]
 8016676:	f7f5 fe8d 	bl	800c394 <convert_qos_profile>
 801667a:	9503      	str	r5, [sp, #12]
 801667c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016680:	9b05      	ldr	r3, [sp, #20]
 8016682:	9001      	str	r0, [sp, #4]
 8016684:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016688:	691b      	ldr	r3, [r3, #16]
 801668a:	9300      	str	r3, [sp, #0]
 801668c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8016690:	f8db 1000 	ldr.w	r1, [fp]
 8016694:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8016698:	f7f8 ff5c 	bl	800f554 <uxr_buffer_create_datareader_bin>
 801669c:	4602      	mov	r2, r0
 801669e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80166a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80166a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80166aa:	f7f5 fe57 	bl	800c35c <run_xrce_session>
 80166ae:	b1d8      	cbz	r0, 80166e8 <rmw_create_subscription+0x1a0>
 80166b0:	f898 3008 	ldrb.w	r3, [r8, #8]
 80166b4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80166b8:	2b02      	cmp	r3, #2
 80166ba:	bf0c      	ite	eq
 80166bc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80166c0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80166c4:	9307      	str	r3, [sp, #28]
 80166c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80166ca:	2200      	movs	r2, #0
 80166cc:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80166d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80166d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80166d6:	9300      	str	r3, [sp, #0]
 80166d8:	697a      	ldr	r2, [r7, #20]
 80166da:	9b07      	ldr	r3, [sp, #28]
 80166dc:	6809      	ldr	r1, [r1, #0]
 80166de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80166e2:	f001 f98f 	bl	8017a04 <uxr_buffer_request_data>
 80166e6:	e007      	b.n	80166f8 <rmw_create_subscription+0x1b0>
 80166e8:	69f8      	ldr	r0, [r7, #28]
 80166ea:	b108      	cbz	r0, 80166f0 <rmw_create_subscription+0x1a8>
 80166ec:	f7f5 fd34 	bl	800c158 <rmw_uxrce_fini_topic_memory>
 80166f0:	4620      	mov	r0, r4
 80166f2:	f7f5 fcef 	bl	800c0d4 <rmw_uxrce_fini_subscription_memory>
 80166f6:	2400      	movs	r4, #0
 80166f8:	4620      	mov	r0, r4
 80166fa:	b00d      	add	sp, #52	@ 0x34
 80166fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016700:	200156a4 	.word	0x200156a4
 8016704:	0801b7bc 	.word	0x0801b7bc
 8016708:	0801b044 	.word	0x0801b044

0801670c <rmw_subscription_get_actual_qos>:
 801670c:	b150      	cbz	r0, 8016724 <rmw_subscription_get_actual_qos+0x18>
 801670e:	b508      	push	{r3, lr}
 8016710:	460b      	mov	r3, r1
 8016712:	b149      	cbz	r1, 8016728 <rmw_subscription_get_actual_qos+0x1c>
 8016714:	6841      	ldr	r1, [r0, #4]
 8016716:	2250      	movs	r2, #80	@ 0x50
 8016718:	3128      	adds	r1, #40	@ 0x28
 801671a:	4618      	mov	r0, r3
 801671c:	f003 fa0b 	bl	8019b36 <memcpy>
 8016720:	2000      	movs	r0, #0
 8016722:	bd08      	pop	{r3, pc}
 8016724:	200b      	movs	r0, #11
 8016726:	4770      	bx	lr
 8016728:	200b      	movs	r0, #11
 801672a:	bd08      	pop	{r3, pc}

0801672c <rmw_destroy_subscription>:
 801672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801672e:	b128      	cbz	r0, 801673c <rmw_destroy_subscription+0x10>
 8016730:	4604      	mov	r4, r0
 8016732:	6800      	ldr	r0, [r0, #0]
 8016734:	460d      	mov	r5, r1
 8016736:	f7f5 ff2b 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 801673a:	b910      	cbnz	r0, 8016742 <rmw_destroy_subscription+0x16>
 801673c:	2401      	movs	r4, #1
 801673e:	4620      	mov	r0, r4
 8016740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016742:	6863      	ldr	r3, [r4, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d0f9      	beq.n	801673c <rmw_destroy_subscription+0x10>
 8016748:	2d00      	cmp	r5, #0
 801674a:	d0f7      	beq.n	801673c <rmw_destroy_subscription+0x10>
 801674c:	6828      	ldr	r0, [r5, #0]
 801674e:	f7f5 ff1f 	bl	800c590 <is_uxrce_rmw_identifier_valid>
 8016752:	2800      	cmp	r0, #0
 8016754:	d0f2      	beq.n	801673c <rmw_destroy_subscription+0x10>
 8016756:	686c      	ldr	r4, [r5, #4]
 8016758:	2c00      	cmp	r4, #0
 801675a:	d0ef      	beq.n	801673c <rmw_destroy_subscription+0x10>
 801675c:	6a26      	ldr	r6, [r4, #32]
 801675e:	6962      	ldr	r2, [r4, #20]
 8016760:	6930      	ldr	r0, [r6, #16]
 8016762:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016766:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801676a:	6819      	ldr	r1, [r3, #0]
 801676c:	f001 f984 	bl	8017a78 <uxr_buffer_cancel_data>
 8016770:	4602      	mov	r2, r0
 8016772:	6930      	ldr	r0, [r6, #16]
 8016774:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016778:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801677c:	f7f5 fdee 	bl	800c35c <run_xrce_session>
 8016780:	69e0      	ldr	r0, [r4, #28]
 8016782:	f7ff fb23 	bl	8015dcc <destroy_topic>
 8016786:	6a23      	ldr	r3, [r4, #32]
 8016788:	6962      	ldr	r2, [r4, #20]
 801678a:	6918      	ldr	r0, [r3, #16]
 801678c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016790:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016794:	6819      	ldr	r1, [r3, #0]
 8016796:	f7f8 fd53 	bl	800f240 <uxr_buffer_delete_entity>
 801679a:	6a23      	ldr	r3, [r4, #32]
 801679c:	6922      	ldr	r2, [r4, #16]
 801679e:	691b      	ldr	r3, [r3, #16]
 80167a0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80167a4:	4604      	mov	r4, r0
 80167a6:	6809      	ldr	r1, [r1, #0]
 80167a8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80167ac:	f7f8 fd48 	bl	800f240 <uxr_buffer_delete_entity>
 80167b0:	6937      	ldr	r7, [r6, #16]
 80167b2:	4622      	mov	r2, r4
 80167b4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80167b8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80167bc:	4604      	mov	r4, r0
 80167be:	4638      	mov	r0, r7
 80167c0:	f7f5 fdcc 	bl	800c35c <run_xrce_session>
 80167c4:	6936      	ldr	r6, [r6, #16]
 80167c6:	4622      	mov	r2, r4
 80167c8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80167cc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80167d0:	4604      	mov	r4, r0
 80167d2:	4630      	mov	r0, r6
 80167d4:	f7f5 fdc2 	bl	800c35c <run_xrce_session>
 80167d8:	b12c      	cbz	r4, 80167e6 <rmw_destroy_subscription+0xba>
 80167da:	b120      	cbz	r0, 80167e6 <rmw_destroy_subscription+0xba>
 80167dc:	2400      	movs	r4, #0
 80167de:	4628      	mov	r0, r5
 80167e0:	f7f5 fc78 	bl	800c0d4 <rmw_uxrce_fini_subscription_memory>
 80167e4:	e7ab      	b.n	801673e <rmw_destroy_subscription+0x12>
 80167e6:	2402      	movs	r4, #2
 80167e8:	e7f9      	b.n	80167de <rmw_destroy_subscription+0xb2>
 80167ea:	bf00      	nop

080167ec <rmw_take_with_info>:
 80167ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ee:	4604      	mov	r4, r0
 80167f0:	6800      	ldr	r0, [r0, #0]
 80167f2:	b089      	sub	sp, #36	@ 0x24
 80167f4:	460f      	mov	r7, r1
 80167f6:	4615      	mov	r5, r2
 80167f8:	b128      	cbz	r0, 8016806 <rmw_take_with_info+0x1a>
 80167fa:	4b24      	ldr	r3, [pc, #144]	@ (801688c <rmw_take_with_info+0xa0>)
 80167fc:	6819      	ldr	r1, [r3, #0]
 80167fe:	f7e9 fd07 	bl	8000210 <strcmp>
 8016802:	2800      	cmp	r0, #0
 8016804:	d13e      	bne.n	8016884 <rmw_take_with_info+0x98>
 8016806:	b305      	cbz	r5, 801684a <rmw_take_with_info+0x5e>
 8016808:	6864      	ldr	r4, [r4, #4]
 801680a:	2300      	movs	r3, #0
 801680c:	702b      	strb	r3, [r5, #0]
 801680e:	f7f5 fd27 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 8016812:	4620      	mov	r0, r4
 8016814:	f7f5 fcfc 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016818:	4606      	mov	r6, r0
 801681a:	b1f0      	cbz	r0, 801685a <rmw_take_with_info+0x6e>
 801681c:	6881      	ldr	r1, [r0, #8]
 801681e:	4668      	mov	r0, sp
 8016820:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016824:	3110      	adds	r1, #16
 8016826:	f7f8 fc43 	bl	800f0b0 <ucdr_init_buffer>
 801682a:	69a3      	ldr	r3, [r4, #24]
 801682c:	4639      	mov	r1, r7
 801682e:	68db      	ldr	r3, [r3, #12]
 8016830:	4668      	mov	r0, sp
 8016832:	4798      	blx	r3
 8016834:	4631      	mov	r1, r6
 8016836:	4604      	mov	r4, r0
 8016838:	4815      	ldr	r0, [pc, #84]	@ (8016890 <rmw_take_with_info+0xa4>)
 801683a:	f7fe ffb9 	bl	80157b0 <put_memory>
 801683e:	702c      	strb	r4, [r5, #0]
 8016840:	f084 0001 	eor.w	r0, r4, #1
 8016844:	b2c0      	uxtb	r0, r0
 8016846:	b009      	add	sp, #36	@ 0x24
 8016848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801684a:	6864      	ldr	r4, [r4, #4]
 801684c:	f7f5 fd08 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 8016850:	4620      	mov	r0, r4
 8016852:	f7f5 fcdd 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016856:	4605      	mov	r5, r0
 8016858:	b910      	cbnz	r0, 8016860 <rmw_take_with_info+0x74>
 801685a:	2001      	movs	r0, #1
 801685c:	b009      	add	sp, #36	@ 0x24
 801685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016860:	68a9      	ldr	r1, [r5, #8]
 8016862:	4668      	mov	r0, sp
 8016864:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016868:	3110      	adds	r1, #16
 801686a:	f7f8 fc21 	bl	800f0b0 <ucdr_init_buffer>
 801686e:	69a3      	ldr	r3, [r4, #24]
 8016870:	4639      	mov	r1, r7
 8016872:	68db      	ldr	r3, [r3, #12]
 8016874:	4668      	mov	r0, sp
 8016876:	4798      	blx	r3
 8016878:	4629      	mov	r1, r5
 801687a:	4604      	mov	r4, r0
 801687c:	4804      	ldr	r0, [pc, #16]	@ (8016890 <rmw_take_with_info+0xa4>)
 801687e:	f7fe ff97 	bl	80157b0 <put_memory>
 8016882:	e7dd      	b.n	8016840 <rmw_take_with_info+0x54>
 8016884:	200c      	movs	r0, #12
 8016886:	b009      	add	sp, #36	@ 0x24
 8016888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801688a:	bf00      	nop
 801688c:	0801c434 	.word	0x0801c434
 8016890:	20015694 	.word	0x20015694

08016894 <rmw_uxrce_transport_init>:
 8016894:	b508      	push	{r3, lr}
 8016896:	b108      	cbz	r0, 801689c <rmw_uxrce_transport_init+0x8>
 8016898:	f100 0210 	add.w	r2, r0, #16
 801689c:	b139      	cbz	r1, 80168ae <rmw_uxrce_transport_init+0x1a>
 801689e:	6949      	ldr	r1, [r1, #20]
 80168a0:	4610      	mov	r0, r2
 80168a2:	f000 fb2f 	bl	8016f04 <uxr_init_custom_transport>
 80168a6:	f080 0001 	eor.w	r0, r0, #1
 80168aa:	b2c0      	uxtb	r0, r0
 80168ac:	bd08      	pop	{r3, pc}
 80168ae:	4b04      	ldr	r3, [pc, #16]	@ (80168c0 <rmw_uxrce_transport_init+0x2c>)
 80168b0:	4610      	mov	r0, r2
 80168b2:	6859      	ldr	r1, [r3, #4]
 80168b4:	f000 fb26 	bl	8016f04 <uxr_init_custom_transport>
 80168b8:	f080 0001 	eor.w	r0, r0, #1
 80168bc:	b2c0      	uxtb	r0, r0
 80168be:	bd08      	pop	{r3, pc}
 80168c0:	20010d6c 	.word	0x20010d6c

080168c4 <rmw_wait>:
 80168c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168c8:	b089      	sub	sp, #36	@ 0x24
 80168ca:	4605      	mov	r5, r0
 80168cc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80168ce:	460e      	mov	r6, r1
 80168d0:	4698      	mov	r8, r3
 80168d2:	4691      	mov	r9, r2
 80168d4:	2a00      	cmp	r2, #0
 80168d6:	f000 810a 	beq.w	8016aee <rmw_wait+0x22a>
 80168da:	b16c      	cbz	r4, 80168f8 <rmw_wait+0x34>
 80168dc:	4bae      	ldr	r3, [pc, #696]	@ (8016b98 <rmw_wait+0x2d4>)
 80168de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80168e0:	af04      	add	r7, sp, #16
 80168e2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80168e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80168ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80168ee:	f7fe fd83 	bl	80153f8 <rmw_time_equal>
 80168f2:	2800      	cmp	r0, #0
 80168f4:	f000 8127 	beq.w	8016b46 <rmw_wait+0x282>
 80168f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80168fc:	f7f5 fcb0 	bl	800c260 <rmw_uxrce_clean_expired_static_input_buffer>
 8016900:	4ba6      	ldr	r3, [pc, #664]	@ (8016b9c <rmw_wait+0x2d8>)
 8016902:	681c      	ldr	r4, [r3, #0]
 8016904:	b14c      	cbz	r4, 801691a <rmw_wait+0x56>
 8016906:	4623      	mov	r3, r4
 8016908:	2100      	movs	r1, #0
 801690a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801690e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016912:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016916:	2b00      	cmp	r3, #0
 8016918:	d1f7      	bne.n	801690a <rmw_wait+0x46>
 801691a:	f1b9 0f00 	cmp.w	r9, #0
 801691e:	d011      	beq.n	8016944 <rmw_wait+0x80>
 8016920:	f8d9 1000 	ldr.w	r1, [r9]
 8016924:	b171      	cbz	r1, 8016944 <rmw_wait+0x80>
 8016926:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801692a:	2300      	movs	r3, #0
 801692c:	2001      	movs	r0, #1
 801692e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016932:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016934:	6912      	ldr	r2, [r2, #16]
 8016936:	3301      	adds	r3, #1
 8016938:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801693c:	4299      	cmp	r1, r3
 801693e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016942:	d1f4      	bne.n	801692e <rmw_wait+0x6a>
 8016944:	f1b8 0f00 	cmp.w	r8, #0
 8016948:	d011      	beq.n	801696e <rmw_wait+0xaa>
 801694a:	f8d8 1000 	ldr.w	r1, [r8]
 801694e:	b171      	cbz	r1, 801696e <rmw_wait+0xaa>
 8016950:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016954:	2300      	movs	r3, #0
 8016956:	2001      	movs	r0, #1
 8016958:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801695c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801695e:	6912      	ldr	r2, [r2, #16]
 8016960:	3301      	adds	r3, #1
 8016962:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016966:	4299      	cmp	r1, r3
 8016968:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801696c:	d1f4      	bne.n	8016958 <rmw_wait+0x94>
 801696e:	b185      	cbz	r5, 8016992 <rmw_wait+0xce>
 8016970:	6829      	ldr	r1, [r5, #0]
 8016972:	b171      	cbz	r1, 8016992 <rmw_wait+0xce>
 8016974:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016978:	2300      	movs	r3, #0
 801697a:	2001      	movs	r0, #1
 801697c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016980:	6a12      	ldr	r2, [r2, #32]
 8016982:	6912      	ldr	r2, [r2, #16]
 8016984:	3301      	adds	r3, #1
 8016986:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801698a:	4299      	cmp	r1, r3
 801698c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016990:	d1f4      	bne.n	801697c <rmw_wait+0xb8>
 8016992:	b34c      	cbz	r4, 80169e8 <rmw_wait+0x124>
 8016994:	4622      	mov	r2, r4
 8016996:	2300      	movs	r3, #0
 8016998:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801699c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80169a0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80169a4:	440b      	add	r3, r1
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	2a00      	cmp	r2, #0
 80169aa:	d1f5      	bne.n	8016998 <rmw_wait+0xd4>
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	f000 8084 	beq.w	8016aba <rmw_wait+0x1f6>
 80169b2:	1c7a      	adds	r2, r7, #1
 80169b4:	d00d      	beq.n	80169d2 <rmw_wait+0x10e>
 80169b6:	ee07 7a90 	vmov	s15, r7
 80169ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80169be:	ee07 3a90 	vmov	s15, r3
 80169c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80169ca:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80169ce:	ee17 7a90 	vmov	r7, s15
 80169d2:	68a0      	ldr	r0, [r4, #8]
 80169d4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80169d8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80169dc:	2b00      	cmp	r3, #0
 80169de:	f040 8090 	bne.w	8016b02 <rmw_wait+0x23e>
 80169e2:	6864      	ldr	r4, [r4, #4]
 80169e4:	2c00      	cmp	r4, #0
 80169e6:	d1f4      	bne.n	80169d2 <rmw_wait+0x10e>
 80169e8:	f1b9 0f00 	cmp.w	r9, #0
 80169ec:	f000 80bc 	beq.w	8016b68 <rmw_wait+0x2a4>
 80169f0:	f8d9 7000 	ldr.w	r7, [r9]
 80169f4:	2f00      	cmp	r7, #0
 80169f6:	f000 808e 	beq.w	8016b16 <rmw_wait+0x252>
 80169fa:	2400      	movs	r4, #0
 80169fc:	4627      	mov	r7, r4
 80169fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016a02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016a06:	f7f5 fc03 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d05f      	beq.n	8016ace <rmw_wait+0x20a>
 8016a0e:	f8d9 3000 	ldr.w	r3, [r9]
 8016a12:	3401      	adds	r4, #1
 8016a14:	42a3      	cmp	r3, r4
 8016a16:	f04f 0701 	mov.w	r7, #1
 8016a1a:	d8f0      	bhi.n	80169fe <rmw_wait+0x13a>
 8016a1c:	f1b8 0f00 	cmp.w	r8, #0
 8016a20:	d012      	beq.n	8016a48 <rmw_wait+0x184>
 8016a22:	f8d8 3000 	ldr.w	r3, [r8]
 8016a26:	b17b      	cbz	r3, 8016a48 <rmw_wait+0x184>
 8016a28:	2400      	movs	r4, #0
 8016a2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016a2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016a32:	f7f5 fbed 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d051      	beq.n	8016ade <rmw_wait+0x21a>
 8016a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8016a3e:	3401      	adds	r4, #1
 8016a40:	42a3      	cmp	r3, r4
 8016a42:	f04f 0701 	mov.w	r7, #1
 8016a46:	d8f0      	bhi.n	8016a2a <rmw_wait+0x166>
 8016a48:	b1dd      	cbz	r5, 8016a82 <rmw_wait+0x1be>
 8016a4a:	682b      	ldr	r3, [r5, #0]
 8016a4c:	b1cb      	cbz	r3, 8016a82 <rmw_wait+0x1be>
 8016a4e:	2400      	movs	r4, #0
 8016a50:	686b      	ldr	r3, [r5, #4]
 8016a52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016a56:	f7f5 fbdb 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a5a:	b158      	cbz	r0, 8016a74 <rmw_wait+0x1b0>
 8016a5c:	682b      	ldr	r3, [r5, #0]
 8016a5e:	3401      	adds	r4, #1
 8016a60:	42a3      	cmp	r3, r4
 8016a62:	d969      	bls.n	8016b38 <rmw_wait+0x274>
 8016a64:	686b      	ldr	r3, [r5, #4]
 8016a66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016a6a:	2701      	movs	r7, #1
 8016a6c:	f7f5 fbd0 	bl	800c210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d1f3      	bne.n	8016a5c <rmw_wait+0x198>
 8016a74:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016a78:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016a7c:	3401      	adds	r4, #1
 8016a7e:	42a3      	cmp	r3, r4
 8016a80:	d8e6      	bhi.n	8016a50 <rmw_wait+0x18c>
 8016a82:	b1a6      	cbz	r6, 8016aae <rmw_wait+0x1ea>
 8016a84:	6834      	ldr	r4, [r6, #0]
 8016a86:	b194      	cbz	r4, 8016aae <rmw_wait+0x1ea>
 8016a88:	2300      	movs	r3, #0
 8016a8a:	461d      	mov	r5, r3
 8016a8c:	e004      	b.n	8016a98 <rmw_wait+0x1d4>
 8016a8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016a92:	3301      	adds	r3, #1
 8016a94:	42a3      	cmp	r3, r4
 8016a96:	d00a      	beq.n	8016aae <rmw_wait+0x1ea>
 8016a98:	6870      	ldr	r0, [r6, #4]
 8016a9a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016a9e:	7c0a      	ldrb	r2, [r1, #16]
 8016aa0:	2a00      	cmp	r2, #0
 8016aa2:	d0f4      	beq.n	8016a8e <rmw_wait+0x1ca>
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	42a3      	cmp	r3, r4
 8016aa8:	740d      	strb	r5, [r1, #16]
 8016aaa:	4617      	mov	r7, r2
 8016aac:	d1f4      	bne.n	8016a98 <rmw_wait+0x1d4>
 8016aae:	2f00      	cmp	r7, #0
 8016ab0:	d03e      	beq.n	8016b30 <rmw_wait+0x26c>
 8016ab2:	2000      	movs	r0, #0
 8016ab4:	b009      	add	sp, #36	@ 0x24
 8016ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aba:	68a0      	ldr	r0, [r4, #8]
 8016abc:	2100      	movs	r1, #0
 8016abe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ac2:	f7f9 facf 	bl	8010064 <uxr_run_session_timeout>
 8016ac6:	6864      	ldr	r4, [r4, #4]
 8016ac8:	2c00      	cmp	r4, #0
 8016aca:	d1f6      	bne.n	8016aba <rmw_wait+0x1f6>
 8016acc:	e78c      	b.n	80169e8 <rmw_wait+0x124>
 8016ace:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016ad2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016ad6:	3401      	adds	r4, #1
 8016ad8:	42a3      	cmp	r3, r4
 8016ada:	d890      	bhi.n	80169fe <rmw_wait+0x13a>
 8016adc:	e79e      	b.n	8016a1c <rmw_wait+0x158>
 8016ade:	e9d8 3200 	ldrd	r3, r2, [r8]
 8016ae2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016ae6:	3401      	adds	r4, #1
 8016ae8:	429c      	cmp	r4, r3
 8016aea:	d39e      	bcc.n	8016a2a <rmw_wait+0x166>
 8016aec:	e7ac      	b.n	8016a48 <rmw_wait+0x184>
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	f47f aef3 	bne.w	80168da <rmw_wait+0x16>
 8016af4:	2800      	cmp	r0, #0
 8016af6:	f47f aef0 	bne.w	80168da <rmw_wait+0x16>
 8016afa:	2900      	cmp	r1, #0
 8016afc:	f47f aeed 	bne.w	80168da <rmw_wait+0x16>
 8016b00:	e7d7      	b.n	8016ab2 <rmw_wait+0x1ee>
 8016b02:	4639      	mov	r1, r7
 8016b04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b08:	f7f9 fac6 	bl	8010098 <uxr_run_session_until_data>
 8016b0c:	6864      	ldr	r4, [r4, #4]
 8016b0e:	2c00      	cmp	r4, #0
 8016b10:	f47f af5f 	bne.w	80169d2 <rmw_wait+0x10e>
 8016b14:	e768      	b.n	80169e8 <rmw_wait+0x124>
 8016b16:	f1b8 0f00 	cmp.w	r8, #0
 8016b1a:	d032      	beq.n	8016b82 <rmw_wait+0x2be>
 8016b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d181      	bne.n	8016a28 <rmw_wait+0x164>
 8016b24:	461f      	mov	r7, r3
 8016b26:	2d00      	cmp	r5, #0
 8016b28:	d18f      	bne.n	8016a4a <rmw_wait+0x186>
 8016b2a:	462f      	mov	r7, r5
 8016b2c:	2e00      	cmp	r6, #0
 8016b2e:	d1a9      	bne.n	8016a84 <rmw_wait+0x1c0>
 8016b30:	2002      	movs	r0, #2
 8016b32:	b009      	add	sp, #36	@ 0x24
 8016b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b38:	2e00      	cmp	r6, #0
 8016b3a:	d0ba      	beq.n	8016ab2 <rmw_wait+0x1ee>
 8016b3c:	6834      	ldr	r4, [r6, #0]
 8016b3e:	2701      	movs	r7, #1
 8016b40:	2c00      	cmp	r4, #0
 8016b42:	d1a1      	bne.n	8016a88 <rmw_wait+0x1c4>
 8016b44:	e7b5      	b.n	8016ab2 <rmw_wait+0x1ee>
 8016b46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016b4a:	f7fe fca9 	bl	80154a0 <rmw_time_total_nsec>
 8016b4e:	2300      	movs	r3, #0
 8016b50:	4a13      	ldr	r2, [pc, #76]	@ (8016ba0 <rmw_wait+0x2dc>)
 8016b52:	f7ea f8b3 	bl	8000cbc <__aeabi_uldivmod>
 8016b56:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8016b5a:	f171 0300 	sbcs.w	r3, r1, #0
 8016b5e:	4607      	mov	r7, r0
 8016b60:	bfa8      	it	ge
 8016b62:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8016b66:	e6c9      	b.n	80168fc <rmw_wait+0x38>
 8016b68:	f1b8 0f00 	cmp.w	r8, #0
 8016b6c:	d009      	beq.n	8016b82 <rmw_wait+0x2be>
 8016b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8016b72:	464f      	mov	r7, r9
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	f47f af57 	bne.w	8016a28 <rmw_wait+0x164>
 8016b7a:	2d00      	cmp	r5, #0
 8016b7c:	f47f af65 	bne.w	8016a4a <rmw_wait+0x186>
 8016b80:	e7d3      	b.n	8016b2a <rmw_wait+0x266>
 8016b82:	b17d      	cbz	r5, 8016ba4 <rmw_wait+0x2e0>
 8016b84:	682b      	ldr	r3, [r5, #0]
 8016b86:	4647      	mov	r7, r8
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	f47f af60 	bne.w	8016a4e <rmw_wait+0x18a>
 8016b8e:	2e00      	cmp	r6, #0
 8016b90:	f47f af78 	bne.w	8016a84 <rmw_wait+0x1c0>
 8016b94:	e7cc      	b.n	8016b30 <rmw_wait+0x26c>
 8016b96:	bf00      	nop
 8016b98:	0801ae88 	.word	0x0801ae88
 8016b9c:	20015684 	.word	0x20015684
 8016ba0:	000f4240 	.word	0x000f4240
 8016ba4:	2e00      	cmp	r6, #0
 8016ba6:	d0c3      	beq.n	8016b30 <rmw_wait+0x26c>
 8016ba8:	6834      	ldr	r4, [r6, #0]
 8016baa:	462f      	mov	r7, r5
 8016bac:	2c00      	cmp	r4, #0
 8016bae:	f47f af6b 	bne.w	8016a88 <rmw_wait+0x1c4>
 8016bb2:	e7bd      	b.n	8016b30 <rmw_wait+0x26c>

08016bb4 <rmw_create_wait_set>:
 8016bb4:	b508      	push	{r3, lr}
 8016bb6:	4803      	ldr	r0, [pc, #12]	@ (8016bc4 <rmw_create_wait_set+0x10>)
 8016bb8:	f7fe fdea 	bl	8015790 <get_memory>
 8016bbc:	b108      	cbz	r0, 8016bc2 <rmw_create_wait_set+0xe>
 8016bbe:	6880      	ldr	r0, [r0, #8]
 8016bc0:	3010      	adds	r0, #16
 8016bc2:	bd08      	pop	{r3, pc}
 8016bc4:	200156c4 	.word	0x200156c4

08016bc8 <rmw_destroy_wait_set>:
 8016bc8:	b508      	push	{r3, lr}
 8016bca:	4b08      	ldr	r3, [pc, #32]	@ (8016bec <rmw_destroy_wait_set+0x24>)
 8016bcc:	6819      	ldr	r1, [r3, #0]
 8016bce:	b911      	cbnz	r1, 8016bd6 <rmw_destroy_wait_set+0xe>
 8016bd0:	e00a      	b.n	8016be8 <rmw_destroy_wait_set+0x20>
 8016bd2:	6849      	ldr	r1, [r1, #4]
 8016bd4:	b141      	cbz	r1, 8016be8 <rmw_destroy_wait_set+0x20>
 8016bd6:	688b      	ldr	r3, [r1, #8]
 8016bd8:	3310      	adds	r3, #16
 8016bda:	4298      	cmp	r0, r3
 8016bdc:	d1f9      	bne.n	8016bd2 <rmw_destroy_wait_set+0xa>
 8016bde:	4803      	ldr	r0, [pc, #12]	@ (8016bec <rmw_destroy_wait_set+0x24>)
 8016be0:	f7fe fde6 	bl	80157b0 <put_memory>
 8016be4:	2000      	movs	r0, #0
 8016be6:	bd08      	pop	{r3, pc}
 8016be8:	2001      	movs	r0, #1
 8016bea:	bd08      	pop	{r3, pc}
 8016bec:	200156c4 	.word	0x200156c4

08016bf0 <rmw_uros_epoch_nanos>:
 8016bf0:	4b05      	ldr	r3, [pc, #20]	@ (8016c08 <rmw_uros_epoch_nanos+0x18>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	b123      	cbz	r3, 8016c00 <rmw_uros_epoch_nanos+0x10>
 8016bf6:	6898      	ldr	r0, [r3, #8]
 8016bf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bfc:	f7f8 bea2 	b.w	800f944 <uxr_epoch_nanos>
 8016c00:	2000      	movs	r0, #0
 8016c02:	2100      	movs	r1, #0
 8016c04:	4770      	bx	lr
 8016c06:	bf00      	nop
 8016c08:	20015684 	.word	0x20015684

08016c0c <sensor_msgs__msg__Imu__init>:
 8016c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c10:	4605      	mov	r5, r0
 8016c12:	b3c0      	cbz	r0, 8016c86 <sensor_msgs__msg__Imu__init+0x7a>
 8016c14:	f000 f864 	bl	8016ce0 <std_msgs__msg__Header__init>
 8016c18:	4604      	mov	r4, r0
 8016c1a:	b310      	cbz	r0, 8016c62 <sensor_msgs__msg__Imu__init+0x56>
 8016c1c:	f105 0618 	add.w	r6, r5, #24
 8016c20:	4630      	mov	r0, r6
 8016c22:	f000 f8b1 	bl	8016d88 <geometry_msgs__msg__Quaternion__init>
 8016c26:	4604      	mov	r4, r0
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	d040      	beq.n	8016cae <sensor_msgs__msg__Imu__init+0xa2>
 8016c2c:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8016c30:	4638      	mov	r0, r7
 8016c32:	f000 f8bf 	bl	8016db4 <geometry_msgs__msg__Vector3__init>
 8016c36:	4604      	mov	r4, r0
 8016c38:	b348      	cbz	r0, 8016c8e <sensor_msgs__msg__Imu__init+0x82>
 8016c3a:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8016c3e:	4640      	mov	r0, r8
 8016c40:	f000 f8b8 	bl	8016db4 <geometry_msgs__msg__Vector3__init>
 8016c44:	4604      	mov	r4, r0
 8016c46:	b9d8      	cbnz	r0, 8016c80 <sensor_msgs__msg__Imu__init+0x74>
 8016c48:	4628      	mov	r0, r5
 8016c4a:	f000 f86d 	bl	8016d28 <std_msgs__msg__Header__fini>
 8016c4e:	4630      	mov	r0, r6
 8016c50:	f000 f8ae 	bl	8016db0 <geometry_msgs__msg__Quaternion__fini>
 8016c54:	4638      	mov	r0, r7
 8016c56:	f000 f8b1 	bl	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016c5a:	4640      	mov	r0, r8
 8016c5c:	f000 f8ae 	bl	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016c60:	e00e      	b.n	8016c80 <sensor_msgs__msg__Imu__init+0x74>
 8016c62:	4628      	mov	r0, r5
 8016c64:	f000 f860 	bl	8016d28 <std_msgs__msg__Header__fini>
 8016c68:	f105 0018 	add.w	r0, r5, #24
 8016c6c:	f000 f8a0 	bl	8016db0 <geometry_msgs__msg__Quaternion__fini>
 8016c70:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8016c74:	f000 f8a2 	bl	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016c78:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8016c7c:	f000 f89e 	bl	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016c80:	4620      	mov	r0, r4
 8016c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c86:	4604      	mov	r4, r0
 8016c88:	4620      	mov	r0, r4
 8016c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c8e:	4628      	mov	r0, r5
 8016c90:	f000 f84a 	bl	8016d28 <std_msgs__msg__Header__fini>
 8016c94:	4630      	mov	r0, r6
 8016c96:	f000 f88b 	bl	8016db0 <geometry_msgs__msg__Quaternion__fini>
 8016c9a:	4638      	mov	r0, r7
 8016c9c:	f000 f88e 	bl	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016ca0:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8016ca4:	f000 f88a 	bl	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016ca8:	4620      	mov	r0, r4
 8016caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f000 f83a 	bl	8016d28 <std_msgs__msg__Header__fini>
 8016cb4:	4630      	mov	r0, r6
 8016cb6:	e7d9      	b.n	8016c6c <sensor_msgs__msg__Imu__init+0x60>

08016cb8 <sensor_msgs__msg__Imu__fini>:
 8016cb8:	b188      	cbz	r0, 8016cde <sensor_msgs__msg__Imu__fini+0x26>
 8016cba:	b510      	push	{r4, lr}
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	f000 f833 	bl	8016d28 <std_msgs__msg__Header__fini>
 8016cc2:	f104 0018 	add.w	r0, r4, #24
 8016cc6:	f000 f873 	bl	8016db0 <geometry_msgs__msg__Quaternion__fini>
 8016cca:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8016cce:	f000 f875 	bl	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016cd2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8016cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cda:	f000 b86f 	b.w	8016dbc <geometry_msgs__msg__Vector3__fini>
 8016cde:	4770      	bx	lr

08016ce0 <std_msgs__msg__Header__init>:
 8016ce0:	b570      	push	{r4, r5, r6, lr}
 8016ce2:	4605      	mov	r5, r0
 8016ce4:	b1a8      	cbz	r0, 8016d12 <std_msgs__msg__Header__init+0x32>
 8016ce6:	f000 f849 	bl	8016d7c <builtin_interfaces__msg__Time__init>
 8016cea:	4604      	mov	r4, r0
 8016cec:	b140      	cbz	r0, 8016d00 <std_msgs__msg__Header__init+0x20>
 8016cee:	f105 0608 	add.w	r6, r5, #8
 8016cf2:	4630      	mov	r0, r6
 8016cf4:	f002 f8bc 	bl	8018e70 <rosidl_runtime_c__String__init>
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	b168      	cbz	r0, 8016d18 <std_msgs__msg__Header__init+0x38>
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}
 8016d00:	4628      	mov	r0, r5
 8016d02:	f000 f83f 	bl	8016d84 <builtin_interfaces__msg__Time__fini>
 8016d06:	f105 0008 	add.w	r0, r5, #8
 8016d0a:	f002 f8c7 	bl	8018e9c <rosidl_runtime_c__String__fini>
 8016d0e:	4620      	mov	r0, r4
 8016d10:	bd70      	pop	{r4, r5, r6, pc}
 8016d12:	4604      	mov	r4, r0
 8016d14:	4620      	mov	r0, r4
 8016d16:	bd70      	pop	{r4, r5, r6, pc}
 8016d18:	4628      	mov	r0, r5
 8016d1a:	f000 f833 	bl	8016d84 <builtin_interfaces__msg__Time__fini>
 8016d1e:	4630      	mov	r0, r6
 8016d20:	f002 f8bc 	bl	8018e9c <rosidl_runtime_c__String__fini>
 8016d24:	e7ea      	b.n	8016cfc <std_msgs__msg__Header__init+0x1c>
 8016d26:	bf00      	nop

08016d28 <std_msgs__msg__Header__fini>:
 8016d28:	b148      	cbz	r0, 8016d3e <std_msgs__msg__Header__fini+0x16>
 8016d2a:	b510      	push	{r4, lr}
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	f000 f829 	bl	8016d84 <builtin_interfaces__msg__Time__fini>
 8016d32:	f104 0008 	add.w	r0, r4, #8
 8016d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d3a:	f002 b8af 	b.w	8018e9c <rosidl_runtime_c__String__fini>
 8016d3e:	4770      	bx	lr

08016d40 <std_srvs__srv__SetBool_Request__init>:
 8016d40:	3800      	subs	r0, #0
 8016d42:	bf18      	it	ne
 8016d44:	2001      	movne	r0, #1
 8016d46:	4770      	bx	lr

08016d48 <std_srvs__srv__SetBool_Request__fini>:
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop

08016d4c <std_srvs__srv__SetBool_Response__init>:
 8016d4c:	b538      	push	{r3, r4, r5, lr}
 8016d4e:	b138      	cbz	r0, 8016d60 <std_srvs__srv__SetBool_Response__init+0x14>
 8016d50:	1d05      	adds	r5, r0, #4
 8016d52:	4628      	mov	r0, r5
 8016d54:	f002 f88c 	bl	8018e70 <rosidl_runtime_c__String__init>
 8016d58:	4604      	mov	r4, r0
 8016d5a:	b120      	cbz	r0, 8016d66 <std_srvs__srv__SetBool_Response__init+0x1a>
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	bd38      	pop	{r3, r4, r5, pc}
 8016d60:	4604      	mov	r4, r0
 8016d62:	4620      	mov	r0, r4
 8016d64:	bd38      	pop	{r3, r4, r5, pc}
 8016d66:	4628      	mov	r0, r5
 8016d68:	f002 f898 	bl	8018e9c <rosidl_runtime_c__String__fini>
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	bd38      	pop	{r3, r4, r5, pc}

08016d70 <std_srvs__srv__SetBool_Response__fini>:
 8016d70:	b110      	cbz	r0, 8016d78 <std_srvs__srv__SetBool_Response__fini+0x8>
 8016d72:	3004      	adds	r0, #4
 8016d74:	f002 b892 	b.w	8018e9c <rosidl_runtime_c__String__fini>
 8016d78:	4770      	bx	lr
 8016d7a:	bf00      	nop

08016d7c <builtin_interfaces__msg__Time__init>:
 8016d7c:	3800      	subs	r0, #0
 8016d7e:	bf18      	it	ne
 8016d80:	2001      	movne	r0, #1
 8016d82:	4770      	bx	lr

08016d84 <builtin_interfaces__msg__Time__fini>:
 8016d84:	4770      	bx	lr
 8016d86:	bf00      	nop

08016d88 <geometry_msgs__msg__Quaternion__init>:
 8016d88:	b160      	cbz	r0, 8016da4 <geometry_msgs__msg__Quaternion__init+0x1c>
 8016d8a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8016da8 <geometry_msgs__msg__Quaternion__init+0x20>
 8016d8e:	2200      	movs	r2, #0
 8016d90:	2300      	movs	r3, #0
 8016d92:	e9c0 2300 	strd	r2, r3, [r0]
 8016d96:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016d9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016d9e:	ed80 7b06 	vstr	d7, [r0, #24]
 8016da2:	2001      	movs	r0, #1
 8016da4:	4770      	bx	lr
 8016da6:	bf00      	nop
 8016da8:	00000000 	.word	0x00000000
 8016dac:	3ff00000 	.word	0x3ff00000

08016db0 <geometry_msgs__msg__Quaternion__fini>:
 8016db0:	4770      	bx	lr
 8016db2:	bf00      	nop

08016db4 <geometry_msgs__msg__Vector3__init>:
 8016db4:	3800      	subs	r0, #0
 8016db6:	bf18      	it	ne
 8016db8:	2001      	movne	r0, #1
 8016dba:	4770      	bx	lr

08016dbc <geometry_msgs__msg__Vector3__fini>:
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop

08016dc0 <ucdr_serialize_string>:
 8016dc0:	b510      	push	{r4, lr}
 8016dc2:	b082      	sub	sp, #8
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	4608      	mov	r0, r1
 8016dc8:	9101      	str	r1, [sp, #4]
 8016dca:	f7e9 fa19 	bl	8000200 <strlen>
 8016dce:	9901      	ldr	r1, [sp, #4]
 8016dd0:	1c42      	adds	r2, r0, #1
 8016dd2:	4620      	mov	r0, r4
 8016dd4:	b002      	add	sp, #8
 8016dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dda:	f7f8 b9d9 	b.w	800f190 <ucdr_serialize_sequence_char>
 8016dde:	bf00      	nop

08016de0 <ucdr_deserialize_string>:
 8016de0:	b500      	push	{lr}
 8016de2:	b083      	sub	sp, #12
 8016de4:	ab01      	add	r3, sp, #4
 8016de6:	f7f8 f9e5 	bl	800f1b4 <ucdr_deserialize_sequence_char>
 8016dea:	b003      	add	sp, #12
 8016dec:	f85d fb04 	ldr.w	pc, [sp], #4

08016df0 <get_custom_error>:
 8016df0:	4b01      	ldr	r3, [pc, #4]	@ (8016df8 <get_custom_error+0x8>)
 8016df2:	7818      	ldrb	r0, [r3, #0]
 8016df4:	4770      	bx	lr
 8016df6:	bf00      	nop
 8016df8:	200159e8 	.word	0x200159e8

08016dfc <recv_custom_msg>:
 8016dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e00:	4693      	mov	fp, r2
 8016e02:	b089      	sub	sp, #36	@ 0x24
 8016e04:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8016e08:	9305      	str	r3, [sp, #20]
 8016e0a:	468a      	mov	sl, r1
 8016e0c:	2100      	movs	r1, #0
 8016e0e:	4604      	mov	r4, r0
 8016e10:	f88d 101e 	strb.w	r1, [sp, #30]
 8016e14:	b322      	cbz	r2, 8016e60 <recv_custom_msg+0x64>
 8016e16:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8016e1a:	f10d 081f 	add.w	r8, sp, #31
 8016e1e:	af05      	add	r7, sp, #20
 8016e20:	f10d 061e 	add.w	r6, sp, #30
 8016e24:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8016e28:	e002      	b.n	8016e30 <recv_custom_msg+0x34>
 8016e2a:	9b05      	ldr	r3, [sp, #20]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	dd0f      	ble.n	8016e50 <recv_custom_msg+0x54>
 8016e30:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8016e34:	4623      	mov	r3, r4
 8016e36:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016e3a:	e9cd 5600 	strd	r5, r6, [sp]
 8016e3e:	4622      	mov	r2, r4
 8016e40:	4648      	mov	r0, r9
 8016e42:	f001 f92d 	bl	80180a0 <uxr_read_framed_msg>
 8016e46:	2800      	cmp	r0, #0
 8016e48:	d0ef      	beq.n	8016e2a <recv_custom_msg+0x2e>
 8016e4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016e4e:	b1b3      	cbz	r3, 8016e7e <recv_custom_msg+0x82>
 8016e50:	4b0f      	ldr	r3, [pc, #60]	@ (8016e90 <recv_custom_msg+0x94>)
 8016e52:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8016e56:	701a      	strb	r2, [r3, #0]
 8016e58:	2000      	movs	r0, #0
 8016e5a:	b009      	add	sp, #36	@ 0x24
 8016e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e60:	f10d 021f 	add.w	r2, sp, #31
 8016e64:	9200      	str	r2, [sp, #0]
 8016e66:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8016e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016e6e:	4601      	mov	r1, r0
 8016e70:	47a8      	blx	r5
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d0ec      	beq.n	8016e50 <recv_custom_msg+0x54>
 8016e76:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d1e8      	bne.n	8016e50 <recv_custom_msg+0x54>
 8016e7e:	f8cb 0000 	str.w	r0, [fp]
 8016e82:	2001      	movs	r0, #1
 8016e84:	f8ca 4000 	str.w	r4, [sl]
 8016e88:	b009      	add	sp, #36	@ 0x24
 8016e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e8e:	bf00      	nop
 8016e90:	200159e8 	.word	0x200159e8

08016e94 <send_custom_msg>:
 8016e94:	b530      	push	{r4, r5, lr}
 8016e96:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8016e9a:	b087      	sub	sp, #28
 8016e9c:	4615      	mov	r5, r2
 8016e9e:	b974      	cbnz	r4, 8016ebe <send_custom_msg+0x2a>
 8016ea0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8016ea4:	f10d 0317 	add.w	r3, sp, #23
 8016ea8:	47a0      	blx	r4
 8016eaa:	b108      	cbz	r0, 8016eb0 <send_custom_msg+0x1c>
 8016eac:	42a8      	cmp	r0, r5
 8016eae:	d015      	beq.n	8016edc <send_custom_msg+0x48>
 8016eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8016ee4 <send_custom_msg+0x50>)
 8016eb2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8016eb6:	701a      	strb	r2, [r3, #0]
 8016eb8:	2000      	movs	r0, #0
 8016eba:	b007      	add	sp, #28
 8016ebc:	bd30      	pop	{r4, r5, pc}
 8016ebe:	460b      	mov	r3, r1
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	f10d 0117 	add.w	r1, sp, #23
 8016ec6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016eca:	4602      	mov	r2, r0
 8016ecc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8016ed0:	9500      	str	r5, [sp, #0]
 8016ed2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8016ed6:	f000 feeb 	bl	8017cb0 <uxr_write_framed_msg>
 8016eda:	e7e6      	b.n	8016eaa <send_custom_msg+0x16>
 8016edc:	2001      	movs	r0, #1
 8016ede:	b007      	add	sp, #28
 8016ee0:	bd30      	pop	{r4, r5, pc}
 8016ee2:	bf00      	nop
 8016ee4:	200159e8 	.word	0x200159e8

08016ee8 <uxr_set_custom_transport_callbacks>:
 8016ee8:	b410      	push	{r4}
 8016eea:	9c01      	ldr	r4, [sp, #4]
 8016eec:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8016ef0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8016ef4:	9b02      	ldr	r3, [sp, #8]
 8016ef6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8016efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016efe:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8016f02:	4770      	bx	lr

08016f04 <uxr_init_custom_transport>:
 8016f04:	b538      	push	{r3, r4, r5, lr}
 8016f06:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8016f0a:	b303      	cbz	r3, 8016f4e <uxr_init_custom_transport+0x4a>
 8016f0c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8016f10:	4604      	mov	r4, r0
 8016f12:	b1e2      	cbz	r2, 8016f4e <uxr_init_custom_transport+0x4a>
 8016f14:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8016f18:	b1ca      	cbz	r2, 8016f4e <uxr_init_custom_transport+0x4a>
 8016f1a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8016f1e:	b1b2      	cbz	r2, 8016f4e <uxr_init_custom_transport+0x4a>
 8016f20:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8016f24:	4798      	blx	r3
 8016f26:	4605      	mov	r5, r0
 8016f28:	b188      	cbz	r0, 8016f4e <uxr_init_custom_transport+0x4a>
 8016f2a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8016f2e:	b98b      	cbnz	r3, 8016f54 <uxr_init_custom_transport+0x50>
 8016f30:	490b      	ldr	r1, [pc, #44]	@ (8016f60 <uxr_init_custom_transport+0x5c>)
 8016f32:	4b0c      	ldr	r3, [pc, #48]	@ (8016f64 <uxr_init_custom_transport+0x60>)
 8016f34:	4a0c      	ldr	r2, [pc, #48]	@ (8016f68 <uxr_init_custom_transport+0x64>)
 8016f36:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8016f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016f3e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8016f42:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8016f46:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8016f4a:	4628      	mov	r0, r5
 8016f4c:	bd38      	pop	{r3, r4, r5, pc}
 8016f4e:	2500      	movs	r5, #0
 8016f50:	4628      	mov	r0, r5
 8016f52:	bd38      	pop	{r3, r4, r5, pc}
 8016f54:	2100      	movs	r1, #0
 8016f56:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8016f5a:	f000 fea3 	bl	8017ca4 <uxr_init_framing_io>
 8016f5e:	e7e7      	b.n	8016f30 <uxr_init_custom_transport+0x2c>
 8016f60:	08016e95 	.word	0x08016e95
 8016f64:	08016dfd 	.word	0x08016dfd
 8016f68:	08016df1 	.word	0x08016df1

08016f6c <uxr_close_custom_transport>:
 8016f6c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8016f70:	4718      	bx	r3
 8016f72:	bf00      	nop

08016f74 <uxr_init_input_best_effort_stream>:
 8016f74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f78:	8003      	strh	r3, [r0, #0]
 8016f7a:	4770      	bx	lr

08016f7c <uxr_reset_input_best_effort_stream>:
 8016f7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f80:	8003      	strh	r3, [r0, #0]
 8016f82:	4770      	bx	lr

08016f84 <uxr_receive_best_effort_message>:
 8016f84:	b538      	push	{r3, r4, r5, lr}
 8016f86:	4604      	mov	r4, r0
 8016f88:	8800      	ldrh	r0, [r0, #0]
 8016f8a:	460d      	mov	r5, r1
 8016f8c:	f000 fe72 	bl	8017c74 <uxr_seq_num_cmp>
 8016f90:	4603      	mov	r3, r0
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016f98:	bfb8      	it	lt
 8016f9a:	8025      	strhlt	r5, [r4, #0]
 8016f9c:	bd38      	pop	{r3, r4, r5, pc}
 8016f9e:	bf00      	nop

08016fa0 <on_full_input_buffer>:
 8016fa0:	b570      	push	{r4, r5, r6, lr}
 8016fa2:	4605      	mov	r5, r0
 8016fa4:	460c      	mov	r4, r1
 8016fa6:	682b      	ldr	r3, [r5, #0]
 8016fa8:	6809      	ldr	r1, [r1, #0]
 8016faa:	8920      	ldrh	r0, [r4, #8]
 8016fac:	6862      	ldr	r2, [r4, #4]
 8016fae:	fbb2 f2f0 	udiv	r2, r2, r0
 8016fb2:	eba3 0c01 	sub.w	ip, r3, r1
 8016fb6:	fbbc fcf2 	udiv	ip, ip, r2
 8016fba:	f10c 0c01 	add.w	ip, ip, #1
 8016fbe:	fa1f f38c 	uxth.w	r3, ip
 8016fc2:	fbb3 f6f0 	udiv	r6, r3, r0
 8016fc6:	fb00 3316 	mls	r3, r0, r6, r3
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	fb02 f303 	mul.w	r3, r2, r3
 8016fd0:	1d18      	adds	r0, r3, #4
 8016fd2:	4408      	add	r0, r1
 8016fd4:	7d26      	ldrb	r6, [r4, #20]
 8016fd6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016fda:	b116      	cbz	r6, 8016fe2 <on_full_input_buffer+0x42>
 8016fdc:	2600      	movs	r6, #0
 8016fde:	f840 6c04 	str.w	r6, [r0, #-4]
 8016fe2:	2a03      	cmp	r2, #3
 8016fe4:	d801      	bhi.n	8016fea <on_full_input_buffer+0x4a>
 8016fe6:	2001      	movs	r0, #1
 8016fe8:	bd70      	pop	{r4, r5, r6, pc}
 8016fea:	3308      	adds	r3, #8
 8016fec:	4419      	add	r1, r3
 8016fee:	4628      	mov	r0, r5
 8016ff0:	692b      	ldr	r3, [r5, #16]
 8016ff2:	3a04      	subs	r2, #4
 8016ff4:	f7f8 f854 	bl	800f0a0 <ucdr_init_buffer_origin>
 8016ff8:	4628      	mov	r0, r5
 8016ffa:	4903      	ldr	r1, [pc, #12]	@ (8017008 <on_full_input_buffer+0x68>)
 8016ffc:	4622      	mov	r2, r4
 8016ffe:	f7f8 f82b 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8017002:	2000      	movs	r0, #0
 8017004:	bd70      	pop	{r4, r5, r6, pc}
 8017006:	bf00      	nop
 8017008:	08016fa1 	.word	0x08016fa1

0801700c <uxr_init_input_reliable_stream>:
 801700c:	b500      	push	{lr}
 801700e:	e9c0 1200 	strd	r1, r2, [r0]
 8017012:	f04f 0e00 	mov.w	lr, #0
 8017016:	9a01      	ldr	r2, [sp, #4]
 8017018:	8103      	strh	r3, [r0, #8]
 801701a:	6102      	str	r2, [r0, #16]
 801701c:	f880 e014 	strb.w	lr, [r0, #20]
 8017020:	b1d3      	cbz	r3, 8017058 <uxr_init_input_reliable_stream+0x4c>
 8017022:	f8c1 e000 	str.w	lr, [r1]
 8017026:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801702a:	f1bc 0f01 	cmp.w	ip, #1
 801702e:	d913      	bls.n	8017058 <uxr_init_input_reliable_stream+0x4c>
 8017030:	2301      	movs	r3, #1
 8017032:	fbb3 f1fc 	udiv	r1, r3, ip
 8017036:	fb0c 3111 	mls	r1, ip, r1, r3
 801703a:	b289      	uxth	r1, r1
 801703c:	6842      	ldr	r2, [r0, #4]
 801703e:	fbb2 f2fc 	udiv	r2, r2, ip
 8017042:	fb01 f202 	mul.w	r2, r1, r2
 8017046:	6801      	ldr	r1, [r0, #0]
 8017048:	f841 e002 	str.w	lr, [r1, r2]
 801704c:	3301      	adds	r3, #1
 801704e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017052:	b29b      	uxth	r3, r3
 8017054:	459c      	cmp	ip, r3
 8017056:	d8ec      	bhi.n	8017032 <uxr_init_input_reliable_stream+0x26>
 8017058:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801705c:	60c3      	str	r3, [r0, #12]
 801705e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017062:	bf00      	nop

08017064 <uxr_reset_input_reliable_stream>:
 8017064:	8901      	ldrh	r1, [r0, #8]
 8017066:	b1e9      	cbz	r1, 80170a4 <uxr_reset_input_reliable_stream+0x40>
 8017068:	f04f 0c00 	mov.w	ip, #0
 801706c:	b500      	push	{lr}
 801706e:	4663      	mov	r3, ip
 8017070:	46e6      	mov	lr, ip
 8017072:	fbb3 f2f1 	udiv	r2, r3, r1
 8017076:	fb01 3312 	mls	r3, r1, r2, r3
 801707a:	b29b      	uxth	r3, r3
 801707c:	6842      	ldr	r2, [r0, #4]
 801707e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017082:	fb02 f303 	mul.w	r3, r2, r3
 8017086:	6802      	ldr	r2, [r0, #0]
 8017088:	f842 e003 	str.w	lr, [r2, r3]
 801708c:	f10c 0c01 	add.w	ip, ip, #1
 8017090:	8901      	ldrh	r1, [r0, #8]
 8017092:	fa1f f38c 	uxth.w	r3, ip
 8017096:	4299      	cmp	r1, r3
 8017098:	d8eb      	bhi.n	8017072 <uxr_reset_input_reliable_stream+0xe>
 801709a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801709e:	60c3      	str	r3, [r0, #12]
 80170a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80170a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80170a8:	60c3      	str	r3, [r0, #12]
 80170aa:	4770      	bx	lr

080170ac <uxr_receive_reliable_message>:
 80170ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170b0:	4604      	mov	r4, r0
 80170b2:	460d      	mov	r5, r1
 80170b4:	8901      	ldrh	r1, [r0, #8]
 80170b6:	8980      	ldrh	r0, [r0, #12]
 80170b8:	4690      	mov	r8, r2
 80170ba:	461f      	mov	r7, r3
 80170bc:	f000 fdd2 	bl	8017c64 <uxr_seq_num_add>
 80170c0:	4629      	mov	r1, r5
 80170c2:	4606      	mov	r6, r0
 80170c4:	89a0      	ldrh	r0, [r4, #12]
 80170c6:	f000 fdd5 	bl	8017c74 <uxr_seq_num_cmp>
 80170ca:	2800      	cmp	r0, #0
 80170cc:	db0a      	blt.n	80170e4 <uxr_receive_reliable_message+0x38>
 80170ce:	2600      	movs	r6, #0
 80170d0:	89e0      	ldrh	r0, [r4, #14]
 80170d2:	4629      	mov	r1, r5
 80170d4:	f000 fdce 	bl	8017c74 <uxr_seq_num_cmp>
 80170d8:	2800      	cmp	r0, #0
 80170da:	da00      	bge.n	80170de <uxr_receive_reliable_message+0x32>
 80170dc:	81e5      	strh	r5, [r4, #14]
 80170de:	4630      	mov	r0, r6
 80170e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170e4:	4630      	mov	r0, r6
 80170e6:	4629      	mov	r1, r5
 80170e8:	f000 fdc4 	bl	8017c74 <uxr_seq_num_cmp>
 80170ec:	2800      	cmp	r0, #0
 80170ee:	dbee      	blt.n	80170ce <uxr_receive_reliable_message+0x22>
 80170f0:	6923      	ldr	r3, [r4, #16]
 80170f2:	4640      	mov	r0, r8
 80170f4:	4798      	blx	r3
 80170f6:	2101      	movs	r1, #1
 80170f8:	4681      	mov	r9, r0
 80170fa:	89a0      	ldrh	r0, [r4, #12]
 80170fc:	f000 fdb2 	bl	8017c64 <uxr_seq_num_add>
 8017100:	f1b9 0f00 	cmp.w	r9, #0
 8017104:	d101      	bne.n	801710a <uxr_receive_reliable_message+0x5e>
 8017106:	4285      	cmp	r5, r0
 8017108:	d047      	beq.n	801719a <uxr_receive_reliable_message+0xee>
 801710a:	8922      	ldrh	r2, [r4, #8]
 801710c:	fbb5 f0f2 	udiv	r0, r5, r2
 8017110:	fb02 5010 	mls	r0, r2, r0, r5
 8017114:	b280      	uxth	r0, r0
 8017116:	6863      	ldr	r3, [r4, #4]
 8017118:	fbb3 f3f2 	udiv	r3, r3, r2
 801711c:	fb00 f303 	mul.w	r3, r0, r3
 8017120:	6820      	ldr	r0, [r4, #0]
 8017122:	3304      	adds	r3, #4
 8017124:	4418      	add	r0, r3
 8017126:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d1cf      	bne.n	80170ce <uxr_receive_reliable_message+0x22>
 801712e:	4641      	mov	r1, r8
 8017130:	463a      	mov	r2, r7
 8017132:	f002 fd00 	bl	8019b36 <memcpy>
 8017136:	8921      	ldrh	r1, [r4, #8]
 8017138:	fbb5 f2f1 	udiv	r2, r5, r1
 801713c:	fb01 5212 	mls	r2, r1, r2, r5
 8017140:	b292      	uxth	r2, r2
 8017142:	6863      	ldr	r3, [r4, #4]
 8017144:	fbb3 f3f1 	udiv	r3, r3, r1
 8017148:	fb02 f303 	mul.w	r3, r2, r3
 801714c:	6822      	ldr	r2, [r4, #0]
 801714e:	50d7      	str	r7, [r2, r3]
 8017150:	9a08      	ldr	r2, [sp, #32]
 8017152:	2301      	movs	r3, #1
 8017154:	7013      	strb	r3, [r2, #0]
 8017156:	f1b9 0f00 	cmp.w	r9, #0
 801715a:	d0b8      	beq.n	80170ce <uxr_receive_reliable_message+0x22>
 801715c:	89a6      	ldrh	r6, [r4, #12]
 801715e:	4630      	mov	r0, r6
 8017160:	2101      	movs	r1, #1
 8017162:	f000 fd7f 	bl	8017c64 <uxr_seq_num_add>
 8017166:	8922      	ldrh	r2, [r4, #8]
 8017168:	6863      	ldr	r3, [r4, #4]
 801716a:	fbb3 f3f2 	udiv	r3, r3, r2
 801716e:	4606      	mov	r6, r0
 8017170:	fbb0 f0f2 	udiv	r0, r0, r2
 8017174:	fb02 6010 	mls	r0, r2, r0, r6
 8017178:	b280      	uxth	r0, r0
 801717a:	fb00 f303 	mul.w	r3, r0, r3
 801717e:	6820      	ldr	r0, [r4, #0]
 8017180:	3304      	adds	r3, #4
 8017182:	4418      	add	r0, r3
 8017184:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d0a0      	beq.n	80170ce <uxr_receive_reliable_message+0x22>
 801718c:	6923      	ldr	r3, [r4, #16]
 801718e:	4798      	blx	r3
 8017190:	2802      	cmp	r0, #2
 8017192:	d008      	beq.n	80171a6 <uxr_receive_reliable_message+0xfa>
 8017194:	2801      	cmp	r0, #1
 8017196:	d0e2      	beq.n	801715e <uxr_receive_reliable_message+0xb2>
 8017198:	e799      	b.n	80170ce <uxr_receive_reliable_message+0x22>
 801719a:	9b08      	ldr	r3, [sp, #32]
 801719c:	81a5      	strh	r5, [r4, #12]
 801719e:	2601      	movs	r6, #1
 80171a0:	f883 9000 	strb.w	r9, [r3]
 80171a4:	e794      	b.n	80170d0 <uxr_receive_reliable_message+0x24>
 80171a6:	2601      	movs	r6, #1
 80171a8:	e792      	b.n	80170d0 <uxr_receive_reliable_message+0x24>
 80171aa:	bf00      	nop

080171ac <uxr_next_input_reliable_buffer_available>:
 80171ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171b0:	4604      	mov	r4, r0
 80171b2:	460f      	mov	r7, r1
 80171b4:	8980      	ldrh	r0, [r0, #12]
 80171b6:	2101      	movs	r1, #1
 80171b8:	4690      	mov	r8, r2
 80171ba:	f000 fd53 	bl	8017c64 <uxr_seq_num_add>
 80171be:	8922      	ldrh	r2, [r4, #8]
 80171c0:	fbb0 f6f2 	udiv	r6, r0, r2
 80171c4:	fb02 0616 	mls	r6, r2, r6, r0
 80171c8:	b2b6      	uxth	r6, r6
 80171ca:	6863      	ldr	r3, [r4, #4]
 80171cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80171d0:	fb06 f303 	mul.w	r3, r6, r3
 80171d4:	6826      	ldr	r6, [r4, #0]
 80171d6:	3304      	adds	r3, #4
 80171d8:	441e      	add	r6, r3
 80171da:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80171de:	f1b9 0f00 	cmp.w	r9, #0
 80171e2:	d023      	beq.n	801722c <uxr_next_input_reliable_buffer_available+0x80>
 80171e4:	6923      	ldr	r3, [r4, #16]
 80171e6:	4605      	mov	r5, r0
 80171e8:	4630      	mov	r0, r6
 80171ea:	4798      	blx	r3
 80171ec:	4682      	mov	sl, r0
 80171ee:	b300      	cbz	r0, 8017232 <uxr_next_input_reliable_buffer_available+0x86>
 80171f0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80171f4:	2101      	movs	r1, #1
 80171f6:	4650      	mov	r0, sl
 80171f8:	f000 fd34 	bl	8017c64 <uxr_seq_num_add>
 80171fc:	8921      	ldrh	r1, [r4, #8]
 80171fe:	fbb0 f2f1 	udiv	r2, r0, r1
 8017202:	4682      	mov	sl, r0
 8017204:	fb01 0212 	mls	r2, r1, r2, r0
 8017208:	e9d4 0300 	ldrd	r0, r3, [r4]
 801720c:	b292      	uxth	r2, r2
 801720e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017212:	fb02 f303 	mul.w	r3, r2, r3
 8017216:	3304      	adds	r3, #4
 8017218:	4418      	add	r0, r3
 801721a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801721e:	b12b      	cbz	r3, 801722c <uxr_next_input_reliable_buffer_available+0x80>
 8017220:	6923      	ldr	r3, [r4, #16]
 8017222:	4798      	blx	r3
 8017224:	2802      	cmp	r0, #2
 8017226:	d01b      	beq.n	8017260 <uxr_next_input_reliable_buffer_available+0xb4>
 8017228:	2801      	cmp	r0, #1
 801722a:	d0e3      	beq.n	80171f4 <uxr_next_input_reliable_buffer_available+0x48>
 801722c:	2000      	movs	r0, #0
 801722e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017232:	464a      	mov	r2, r9
 8017234:	4631      	mov	r1, r6
 8017236:	4638      	mov	r0, r7
 8017238:	f7f7 ff3a 	bl	800f0b0 <ucdr_init_buffer>
 801723c:	8921      	ldrh	r1, [r4, #8]
 801723e:	fbb5 f2f1 	udiv	r2, r5, r1
 8017242:	fb01 5212 	mls	r2, r1, r2, r5
 8017246:	b292      	uxth	r2, r2
 8017248:	6863      	ldr	r3, [r4, #4]
 801724a:	fbb3 f3f1 	udiv	r3, r3, r1
 801724e:	fb02 f303 	mul.w	r3, r2, r3
 8017252:	6822      	ldr	r2, [r4, #0]
 8017254:	f842 a003 	str.w	sl, [r2, r3]
 8017258:	2001      	movs	r0, #1
 801725a:	81a5      	strh	r5, [r4, #12]
 801725c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017260:	8920      	ldrh	r0, [r4, #8]
 8017262:	fbb5 f3f0 	udiv	r3, r5, r0
 8017266:	fb00 5513 	mls	r5, r0, r3, r5
 801726a:	b2ad      	uxth	r5, r5
 801726c:	6863      	ldr	r3, [r4, #4]
 801726e:	fbb3 f3f0 	udiv	r3, r3, r0
 8017272:	fb03 f505 	mul.w	r5, r3, r5
 8017276:	6823      	ldr	r3, [r4, #0]
 8017278:	2000      	movs	r0, #0
 801727a:	5158      	str	r0, [r3, r5]
 801727c:	eb06 0108 	add.w	r1, r6, r8
 8017280:	eba9 0208 	sub.w	r2, r9, r8
 8017284:	4638      	mov	r0, r7
 8017286:	f7f7 ff13 	bl	800f0b0 <ucdr_init_buffer>
 801728a:	4638      	mov	r0, r7
 801728c:	4903      	ldr	r1, [pc, #12]	@ (801729c <uxr_next_input_reliable_buffer_available+0xf0>)
 801728e:	4622      	mov	r2, r4
 8017290:	f7f7 fee2 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8017294:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017298:	2001      	movs	r0, #1
 801729a:	e7c8      	b.n	801722e <uxr_next_input_reliable_buffer_available+0x82>
 801729c:	08016fa1 	.word	0x08016fa1

080172a0 <uxr_process_heartbeat>:
 80172a0:	b538      	push	{r3, r4, r5, lr}
 80172a2:	4611      	mov	r1, r2
 80172a4:	4604      	mov	r4, r0
 80172a6:	89c0      	ldrh	r0, [r0, #14]
 80172a8:	4615      	mov	r5, r2
 80172aa:	f000 fce3 	bl	8017c74 <uxr_seq_num_cmp>
 80172ae:	2800      	cmp	r0, #0
 80172b0:	bfb8      	it	lt
 80172b2:	81e5      	strhlt	r5, [r4, #14]
 80172b4:	bd38      	pop	{r3, r4, r5, pc}
 80172b6:	bf00      	nop

080172b8 <uxr_compute_acknack>:
 80172b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172bc:	8903      	ldrh	r3, [r0, #8]
 80172be:	8985      	ldrh	r5, [r0, #12]
 80172c0:	4604      	mov	r4, r0
 80172c2:	460e      	mov	r6, r1
 80172c4:	b1d3      	cbz	r3, 80172fc <uxr_compute_acknack+0x44>
 80172c6:	4628      	mov	r0, r5
 80172c8:	2701      	movs	r7, #1
 80172ca:	e003      	b.n	80172d4 <uxr_compute_acknack+0x1c>
 80172cc:	4567      	cmp	r7, ip
 80172ce:	d215      	bcs.n	80172fc <uxr_compute_acknack+0x44>
 80172d0:	89a0      	ldrh	r0, [r4, #12]
 80172d2:	3701      	adds	r7, #1
 80172d4:	b2b9      	uxth	r1, r7
 80172d6:	f000 fcc5 	bl	8017c64 <uxr_seq_num_add>
 80172da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80172de:	fbb0 f3fc 	udiv	r3, r0, ip
 80172e2:	fb0c 0313 	mls	r3, ip, r3, r0
 80172e6:	b29a      	uxth	r2, r3
 80172e8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80172ec:	fbb3 f3fc 	udiv	r3, r3, ip
 80172f0:	fb02 f303 	mul.w	r3, r2, r3
 80172f4:	58cb      	ldr	r3, [r1, r3]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d1e8      	bne.n	80172cc <uxr_compute_acknack+0x14>
 80172fa:	4605      	mov	r5, r0
 80172fc:	8035      	strh	r5, [r6, #0]
 80172fe:	2101      	movs	r1, #1
 8017300:	4628      	mov	r0, r5
 8017302:	89e7      	ldrh	r7, [r4, #14]
 8017304:	f000 fcb2 	bl	8017c6c <uxr_seq_num_sub>
 8017308:	4601      	mov	r1, r0
 801730a:	4638      	mov	r0, r7
 801730c:	f000 fcae 	bl	8017c6c <uxr_seq_num_sub>
 8017310:	4605      	mov	r5, r0
 8017312:	b318      	cbz	r0, 801735c <uxr_compute_acknack+0xa4>
 8017314:	f04f 0900 	mov.w	r9, #0
 8017318:	464f      	mov	r7, r9
 801731a:	f04f 0801 	mov.w	r8, #1
 801731e:	fa1f f189 	uxth.w	r1, r9
 8017322:	8830      	ldrh	r0, [r6, #0]
 8017324:	f000 fc9e 	bl	8017c64 <uxr_seq_num_add>
 8017328:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801732c:	fbb0 f3fc 	udiv	r3, r0, ip
 8017330:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017334:	fb03 001c 	mls	r0, r3, ip, r0
 8017338:	b283      	uxth	r3, r0
 801733a:	fbb2 f2fc 	udiv	r2, r2, ip
 801733e:	fb02 f303 	mul.w	r3, r2, r3
 8017342:	fa08 f209 	lsl.w	r2, r8, r9
 8017346:	58cb      	ldr	r3, [r1, r3]
 8017348:	f109 0901 	add.w	r9, r9, #1
 801734c:	b90b      	cbnz	r3, 8017352 <uxr_compute_acknack+0x9a>
 801734e:	4317      	orrs	r7, r2
 8017350:	b2bf      	uxth	r7, r7
 8017352:	454d      	cmp	r5, r9
 8017354:	d1e3      	bne.n	801731e <uxr_compute_acknack+0x66>
 8017356:	4638      	mov	r0, r7
 8017358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801735c:	4607      	mov	r7, r0
 801735e:	4638      	mov	r0, r7
 8017360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017364 <uxr_init_output_best_effort_stream>:
 8017364:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017368:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801736c:	6001      	str	r1, [r0, #0]
 801736e:	7303      	strb	r3, [r0, #12]
 8017370:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017374:	4770      	bx	lr
 8017376:	bf00      	nop

08017378 <uxr_reset_output_best_effort_stream>:
 8017378:	7b02      	ldrb	r2, [r0, #12]
 801737a:	6042      	str	r2, [r0, #4]
 801737c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017380:	81c3      	strh	r3, [r0, #14]
 8017382:	4770      	bx	lr

08017384 <uxr_prepare_best_effort_buffer_to_write>:
 8017384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017386:	4604      	mov	r4, r0
 8017388:	b083      	sub	sp, #12
 801738a:	6840      	ldr	r0, [r0, #4]
 801738c:	460d      	mov	r5, r1
 801738e:	4616      	mov	r6, r2
 8017390:	f7f9 fbce 	bl	8010b30 <uxr_submessage_padding>
 8017394:	6863      	ldr	r3, [r4, #4]
 8017396:	4418      	add	r0, r3
 8017398:	68a3      	ldr	r3, [r4, #8]
 801739a:	1942      	adds	r2, r0, r5
 801739c:	4293      	cmp	r3, r2
 801739e:	bf2c      	ite	cs
 80173a0:	2701      	movcs	r7, #1
 80173a2:	2700      	movcc	r7, #0
 80173a4:	d202      	bcs.n	80173ac <uxr_prepare_best_effort_buffer_to_write+0x28>
 80173a6:	4638      	mov	r0, r7
 80173a8:	b003      	add	sp, #12
 80173aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173ac:	9000      	str	r0, [sp, #0]
 80173ae:	6821      	ldr	r1, [r4, #0]
 80173b0:	4630      	mov	r0, r6
 80173b2:	2300      	movs	r3, #0
 80173b4:	f7f7 fe6a 	bl	800f08c <ucdr_init_buffer_origin_offset>
 80173b8:	6861      	ldr	r1, [r4, #4]
 80173ba:	4638      	mov	r0, r7
 80173bc:	4429      	add	r1, r5
 80173be:	6061      	str	r1, [r4, #4]
 80173c0:	b003      	add	sp, #12
 80173c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080173c4 <uxr_prepare_best_effort_buffer_to_send>:
 80173c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c8:	4604      	mov	r4, r0
 80173ca:	461d      	mov	r5, r3
 80173cc:	6840      	ldr	r0, [r0, #4]
 80173ce:	7b23      	ldrb	r3, [r4, #12]
 80173d0:	4298      	cmp	r0, r3
 80173d2:	bf8c      	ite	hi
 80173d4:	2601      	movhi	r6, #1
 80173d6:	2600      	movls	r6, #0
 80173d8:	d802      	bhi.n	80173e0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80173da:	4630      	mov	r0, r6
 80173dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e0:	4688      	mov	r8, r1
 80173e2:	89e0      	ldrh	r0, [r4, #14]
 80173e4:	2101      	movs	r1, #1
 80173e6:	4617      	mov	r7, r2
 80173e8:	f000 fc3c 	bl	8017c64 <uxr_seq_num_add>
 80173ec:	6823      	ldr	r3, [r4, #0]
 80173ee:	81e0      	strh	r0, [r4, #14]
 80173f0:	8028      	strh	r0, [r5, #0]
 80173f2:	f8c8 3000 	str.w	r3, [r8]
 80173f6:	6863      	ldr	r3, [r4, #4]
 80173f8:	603b      	str	r3, [r7, #0]
 80173fa:	7b23      	ldrb	r3, [r4, #12]
 80173fc:	6063      	str	r3, [r4, #4]
 80173fe:	4630      	mov	r0, r6
 8017400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017404 <on_full_output_buffer>:
 8017404:	b538      	push	{r3, r4, r5, lr}
 8017406:	6802      	ldr	r2, [r0, #0]
 8017408:	460c      	mov	r4, r1
 801740a:	6809      	ldr	r1, [r1, #0]
 801740c:	8923      	ldrh	r3, [r4, #8]
 801740e:	eba2 0c01 	sub.w	ip, r2, r1
 8017412:	6862      	ldr	r2, [r4, #4]
 8017414:	fbb2 f2f3 	udiv	r2, r2, r3
 8017418:	fbbc fcf2 	udiv	ip, ip, r2
 801741c:	f10c 0c01 	add.w	ip, ip, #1
 8017420:	fa1f fc8c 	uxth.w	ip, ip
 8017424:	fbbc fef3 	udiv	lr, ip, r3
 8017428:	fb03 c31e 	mls	r3, r3, lr, ip
 801742c:	b29b      	uxth	r3, r3
 801742e:	fb02 f303 	mul.w	r3, r2, r3
 8017432:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017436:	58ca      	ldr	r2, [r1, r3]
 8017438:	4463      	add	r3, ip
 801743a:	eba2 020c 	sub.w	r2, r2, ip
 801743e:	3308      	adds	r3, #8
 8017440:	4605      	mov	r5, r0
 8017442:	4419      	add	r1, r3
 8017444:	3a04      	subs	r2, #4
 8017446:	6903      	ldr	r3, [r0, #16]
 8017448:	f7f7 fe2a 	bl	800f0a0 <ucdr_init_buffer_origin>
 801744c:	4628      	mov	r0, r5
 801744e:	4903      	ldr	r1, [pc, #12]	@ (801745c <on_full_output_buffer+0x58>)
 8017450:	4622      	mov	r2, r4
 8017452:	f7f7 fe01 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8017456:	2000      	movs	r0, #0
 8017458:	bd38      	pop	{r3, r4, r5, pc}
 801745a:	bf00      	nop
 801745c:	08017405 	.word	0x08017405

08017460 <uxr_init_output_reliable_stream>:
 8017460:	b410      	push	{r4}
 8017462:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017466:	8103      	strh	r3, [r0, #8]
 8017468:	e9c0 1200 	strd	r1, r2, [r0]
 801746c:	f880 c00c 	strb.w	ip, [r0, #12]
 8017470:	b1d3      	cbz	r3, 80174a8 <uxr_init_output_reliable_stream+0x48>
 8017472:	f8c1 c000 	str.w	ip, [r1]
 8017476:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801747a:	f1bc 0f01 	cmp.w	ip, #1
 801747e:	d913      	bls.n	80174a8 <uxr_init_output_reliable_stream+0x48>
 8017480:	2301      	movs	r3, #1
 8017482:	fbb3 f1fc 	udiv	r1, r3, ip
 8017486:	fb0c 3111 	mls	r1, ip, r1, r3
 801748a:	b289      	uxth	r1, r1
 801748c:	6842      	ldr	r2, [r0, #4]
 801748e:	6804      	ldr	r4, [r0, #0]
 8017490:	fbb2 f2fc 	udiv	r2, r2, ip
 8017494:	fb01 f202 	mul.w	r2, r1, r2
 8017498:	7b01      	ldrb	r1, [r0, #12]
 801749a:	50a1      	str	r1, [r4, r2]
 801749c:	3301      	adds	r3, #1
 801749e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	459c      	cmp	ip, r3
 80174a6:	d8ec      	bhi.n	8017482 <uxr_init_output_reliable_stream+0x22>
 80174a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80174ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80174b0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80174b4:	4905      	ldr	r1, [pc, #20]	@ (80174cc <uxr_init_output_reliable_stream+0x6c>)
 80174b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174ba:	f8c0 100e 	str.w	r1, [r0, #14]
 80174be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80174c2:	2300      	movs	r3, #0
 80174c4:	8242      	strh	r2, [r0, #18]
 80174c6:	8403      	strh	r3, [r0, #32]
 80174c8:	4770      	bx	lr
 80174ca:	bf00      	nop
 80174cc:	ffff0000 	.word	0xffff0000

080174d0 <uxr_reset_output_reliable_stream>:
 80174d0:	8901      	ldrh	r1, [r0, #8]
 80174d2:	b1b1      	cbz	r1, 8017502 <uxr_reset_output_reliable_stream+0x32>
 80174d4:	f04f 0c00 	mov.w	ip, #0
 80174d8:	4663      	mov	r3, ip
 80174da:	fbb3 f2f1 	udiv	r2, r3, r1
 80174de:	fb01 3312 	mls	r3, r1, r2, r3
 80174e2:	b29b      	uxth	r3, r3
 80174e4:	6842      	ldr	r2, [r0, #4]
 80174e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80174ea:	6801      	ldr	r1, [r0, #0]
 80174ec:	fb02 f303 	mul.w	r3, r2, r3
 80174f0:	7b02      	ldrb	r2, [r0, #12]
 80174f2:	50ca      	str	r2, [r1, r3]
 80174f4:	f10c 0c01 	add.w	ip, ip, #1
 80174f8:	8901      	ldrh	r1, [r0, #8]
 80174fa:	fa1f f38c 	uxth.w	r3, ip
 80174fe:	4299      	cmp	r1, r3
 8017500:	d8eb      	bhi.n	80174da <uxr_reset_output_reliable_stream+0xa>
 8017502:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017506:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801750a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801750e:	4904      	ldr	r1, [pc, #16]	@ (8017520 <uxr_reset_output_reliable_stream+0x50>)
 8017510:	f8c0 100e 	str.w	r1, [r0, #14]
 8017514:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017518:	2300      	movs	r3, #0
 801751a:	8242      	strh	r2, [r0, #18]
 801751c:	8403      	strh	r3, [r0, #32]
 801751e:	4770      	bx	lr
 8017520:	ffff0000 	.word	0xffff0000

08017524 <uxr_prepare_reliable_buffer_to_write>:
 8017524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017528:	4604      	mov	r4, r0
 801752a:	b091      	sub	sp, #68	@ 0x44
 801752c:	8900      	ldrh	r0, [r0, #8]
 801752e:	89e6      	ldrh	r6, [r4, #14]
 8017530:	6823      	ldr	r3, [r4, #0]
 8017532:	9204      	str	r2, [sp, #16]
 8017534:	fbb6 f2f0 	udiv	r2, r6, r0
 8017538:	fb00 6212 	mls	r2, r0, r2, r6
 801753c:	b292      	uxth	r2, r2
 801753e:	6865      	ldr	r5, [r4, #4]
 8017540:	fbb5 f5f0 	udiv	r5, r5, r0
 8017544:	fb05 3202 	mla	r2, r5, r2, r3
 8017548:	3204      	adds	r2, #4
 801754a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801754e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017552:	9203      	str	r2, [sp, #12]
 8017554:	468b      	mov	fp, r1
 8017556:	1f2f      	subs	r7, r5, #4
 8017558:	2800      	cmp	r0, #0
 801755a:	f000 814c 	beq.w	80177f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801755e:	f04f 0c00 	mov.w	ip, #0
 8017562:	46e2      	mov	sl, ip
 8017564:	4661      	mov	r1, ip
 8017566:	fbb1 f2f0 	udiv	r2, r1, r0
 801756a:	fb00 1212 	mls	r2, r0, r2, r1
 801756e:	b292      	uxth	r2, r2
 8017570:	fb05 f202 	mul.w	r2, r5, r2
 8017574:	f10c 0c01 	add.w	ip, ip, #1
 8017578:	589a      	ldr	r2, [r3, r2]
 801757a:	454a      	cmp	r2, r9
 801757c:	bf08      	it	eq
 801757e:	f10a 0a01 	addeq.w	sl, sl, #1
 8017582:	fa1f f18c 	uxth.w	r1, ip
 8017586:	bf08      	it	eq
 8017588:	fa1f fa8a 	uxtheq.w	sl, sl
 801758c:	4281      	cmp	r1, r0
 801758e:	d3ea      	bcc.n	8017566 <uxr_prepare_reliable_buffer_to_write+0x42>
 8017590:	4640      	mov	r0, r8
 8017592:	2104      	movs	r1, #4
 8017594:	f8cd a014 	str.w	sl, [sp, #20]
 8017598:	f7f7 fd8e 	bl	800f0b8 <ucdr_alignment>
 801759c:	4480      	add	r8, r0
 801759e:	eb08 020b 	add.w	r2, r8, fp
 80175a2:	42ba      	cmp	r2, r7
 80175a4:	f240 80cd 	bls.w	8017742 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80175a8:	7b22      	ldrb	r2, [r4, #12]
 80175aa:	445a      	add	r2, fp
 80175ac:	42ba      	cmp	r2, r7
 80175ae:	f240 80b5 	bls.w	801771c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80175b2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80175b6:	33fc      	adds	r3, #252	@ 0xfc
 80175b8:	b2ba      	uxth	r2, r7
 80175ba:	4413      	add	r3, r2
 80175bc:	b29b      	uxth	r3, r3
 80175be:	fb0a f903 	mul.w	r9, sl, r3
 80175c2:	45d9      	cmp	r9, fp
 80175c4:	9305      	str	r3, [sp, #20]
 80175c6:	9306      	str	r3, [sp, #24]
 80175c8:	f0c0 80b7 	bcc.w	801773a <uxr_prepare_reliable_buffer_to_write+0x216>
 80175cc:	f108 0304 	add.w	r3, r8, #4
 80175d0:	42bb      	cmp	r3, r7
 80175d2:	f080 80db 	bcs.w	801778c <uxr_prepare_reliable_buffer_to_write+0x268>
 80175d6:	f1a2 0904 	sub.w	r9, r2, #4
 80175da:	eba9 0908 	sub.w	r9, r9, r8
 80175de:	9b05      	ldr	r3, [sp, #20]
 80175e0:	fa1f f989 	uxth.w	r9, r9
 80175e4:	ebab 0b09 	sub.w	fp, fp, r9
 80175e8:	fbbb f2f3 	udiv	r2, fp, r3
 80175ec:	fb03 b312 	mls	r3, r3, r2, fp
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	f000 80c8 	beq.w	8017786 <uxr_prepare_reliable_buffer_to_write+0x262>
 80175f6:	3201      	adds	r2, #1
 80175f8:	b292      	uxth	r2, r2
 80175fa:	9306      	str	r3, [sp, #24]
 80175fc:	4552      	cmp	r2, sl
 80175fe:	f200 809c 	bhi.w	801773a <uxr_prepare_reliable_buffer_to_write+0x216>
 8017602:	f10d 0b20 	add.w	fp, sp, #32
 8017606:	2a00      	cmp	r2, #0
 8017608:	d042      	beq.n	8017690 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801760a:	f8cd 801c 	str.w	r8, [sp, #28]
 801760e:	f04f 0a00 	mov.w	sl, #0
 8017612:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017616:	9505      	str	r5, [sp, #20]
 8017618:	f10d 0b20 	add.w	fp, sp, #32
 801761c:	4615      	mov	r5, r2
 801761e:	e000      	b.n	8017622 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017620:	46c1      	mov	r9, r8
 8017622:	8920      	ldrh	r0, [r4, #8]
 8017624:	fbb6 f2f0 	udiv	r2, r6, r0
 8017628:	fb00 6112 	mls	r1, r0, r2, r6
 801762c:	b28a      	uxth	r2, r1
 801762e:	6863      	ldr	r3, [r4, #4]
 8017630:	fbb3 f1f0 	udiv	r1, r3, r0
 8017634:	6823      	ldr	r3, [r4, #0]
 8017636:	fb02 f101 	mul.w	r1, r2, r1
 801763a:	3104      	adds	r1, #4
 801763c:	4419      	add	r1, r3
 801763e:	4658      	mov	r0, fp
 8017640:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017644:	9200      	str	r2, [sp, #0]
 8017646:	2300      	movs	r3, #0
 8017648:	463a      	mov	r2, r7
 801764a:	f7f7 fd1f 	bl	800f08c <ucdr_init_buffer_origin_offset>
 801764e:	464a      	mov	r2, r9
 8017650:	2300      	movs	r3, #0
 8017652:	210d      	movs	r1, #13
 8017654:	4658      	mov	r0, fp
 8017656:	f7f9 fa2b 	bl	8010ab0 <uxr_buffer_submessage_header>
 801765a:	8921      	ldrh	r1, [r4, #8]
 801765c:	fbb6 f2f1 	udiv	r2, r6, r1
 8017660:	fb01 6212 	mls	r2, r1, r2, r6
 8017664:	b292      	uxth	r2, r2
 8017666:	6863      	ldr	r3, [r4, #4]
 8017668:	fbb3 f3f1 	udiv	r3, r3, r1
 801766c:	fb02 f303 	mul.w	r3, r2, r3
 8017670:	6822      	ldr	r2, [r4, #0]
 8017672:	4630      	mov	r0, r6
 8017674:	50d7      	str	r7, [r2, r3]
 8017676:	2101      	movs	r1, #1
 8017678:	f000 faf4 	bl	8017c64 <uxr_seq_num_add>
 801767c:	f10a 0a01 	add.w	sl, sl, #1
 8017680:	fa1f f38a 	uxth.w	r3, sl
 8017684:	429d      	cmp	r5, r3
 8017686:	4606      	mov	r6, r0
 8017688:	d8ca      	bhi.n	8017620 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801768a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801768e:	9d05      	ldr	r5, [sp, #20]
 8017690:	8920      	ldrh	r0, [r4, #8]
 8017692:	fbb6 f3f0 	udiv	r3, r6, r0
 8017696:	fb00 6313 	mls	r3, r0, r3, r6
 801769a:	b299      	uxth	r1, r3
 801769c:	6863      	ldr	r3, [r4, #4]
 801769e:	fbb3 f3f0 	udiv	r3, r3, r0
 80176a2:	fb01 f303 	mul.w	r3, r1, r3
 80176a6:	6821      	ldr	r1, [r4, #0]
 80176a8:	3304      	adds	r3, #4
 80176aa:	4419      	add	r1, r3
 80176ac:	463a      	mov	r2, r7
 80176ae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80176b2:	9000      	str	r0, [sp, #0]
 80176b4:	2300      	movs	r3, #0
 80176b6:	4658      	mov	r0, fp
 80176b8:	f7f7 fce8 	bl	800f08c <ucdr_init_buffer_origin_offset>
 80176bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80176c0:	4658      	mov	r0, fp
 80176c2:	fa1f f289 	uxth.w	r2, r9
 80176c6:	2302      	movs	r3, #2
 80176c8:	210d      	movs	r1, #13
 80176ca:	f7f9 f9f1 	bl	8010ab0 <uxr_buffer_submessage_header>
 80176ce:	9b03      	ldr	r3, [sp, #12]
 80176d0:	8927      	ldrh	r7, [r4, #8]
 80176d2:	7b20      	ldrb	r0, [r4, #12]
 80176d4:	f108 0104 	add.w	r1, r8, #4
 80176d8:	440b      	add	r3, r1
 80176da:	4619      	mov	r1, r3
 80176dc:	fbb6 f3f7 	udiv	r3, r6, r7
 80176e0:	fb07 6313 	mls	r3, r7, r3, r6
 80176e4:	f1a5 0208 	sub.w	r2, r5, #8
 80176e8:	b29d      	uxth	r5, r3
 80176ea:	3004      	adds	r0, #4
 80176ec:	6863      	ldr	r3, [r4, #4]
 80176ee:	fbb3 f3f7 	udiv	r3, r3, r7
 80176f2:	fb05 f303 	mul.w	r3, r5, r3
 80176f6:	6825      	ldr	r5, [r4, #0]
 80176f8:	4448      	add	r0, r9
 80176fa:	50e8      	str	r0, [r5, r3]
 80176fc:	9d04      	ldr	r5, [sp, #16]
 80176fe:	eba2 0208 	sub.w	r2, r2, r8
 8017702:	4628      	mov	r0, r5
 8017704:	f7f7 fcd4 	bl	800f0b0 <ucdr_init_buffer>
 8017708:	4628      	mov	r0, r5
 801770a:	493c      	ldr	r1, [pc, #240]	@ (80177fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801770c:	4622      	mov	r2, r4
 801770e:	f7f7 fca3 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8017712:	2001      	movs	r0, #1
 8017714:	81e6      	strh	r6, [r4, #14]
 8017716:	b011      	add	sp, #68	@ 0x44
 8017718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801771c:	2101      	movs	r1, #1
 801771e:	89e0      	ldrh	r0, [r4, #14]
 8017720:	f000 faa0 	bl	8017c64 <uxr_seq_num_add>
 8017724:	8921      	ldrh	r1, [r4, #8]
 8017726:	4605      	mov	r5, r0
 8017728:	8a60      	ldrh	r0, [r4, #18]
 801772a:	f000 fa9b 	bl	8017c64 <uxr_seq_num_add>
 801772e:	4601      	mov	r1, r0
 8017730:	4628      	mov	r0, r5
 8017732:	f000 fa9f 	bl	8017c74 <uxr_seq_num_cmp>
 8017736:	2800      	cmp	r0, #0
 8017738:	dd42      	ble.n	80177c0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801773a:	2000      	movs	r0, #0
 801773c:	b011      	add	sp, #68	@ 0x44
 801773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017742:	8921      	ldrh	r1, [r4, #8]
 8017744:	8a60      	ldrh	r0, [r4, #18]
 8017746:	9205      	str	r2, [sp, #20]
 8017748:	f000 fa8c 	bl	8017c64 <uxr_seq_num_add>
 801774c:	4601      	mov	r1, r0
 801774e:	4630      	mov	r0, r6
 8017750:	f000 fa90 	bl	8017c74 <uxr_seq_num_cmp>
 8017754:	2800      	cmp	r0, #0
 8017756:	9a05      	ldr	r2, [sp, #20]
 8017758:	dcef      	bgt.n	801773a <uxr_prepare_reliable_buffer_to_write+0x216>
 801775a:	8927      	ldrh	r7, [r4, #8]
 801775c:	fbb6 f3f7 	udiv	r3, r6, r7
 8017760:	fb07 6313 	mls	r3, r7, r3, r6
 8017764:	b29d      	uxth	r5, r3
 8017766:	6863      	ldr	r3, [r4, #4]
 8017768:	6824      	ldr	r4, [r4, #0]
 801776a:	fbb3 f3f7 	udiv	r3, r3, r7
 801776e:	fb05 f303 	mul.w	r3, r5, r3
 8017772:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017776:	50e2      	str	r2, [r4, r3]
 8017778:	2300      	movs	r3, #0
 801777a:	f8cd 8000 	str.w	r8, [sp]
 801777e:	f7f7 fc85 	bl	800f08c <ucdr_init_buffer_origin_offset>
 8017782:	2001      	movs	r0, #1
 8017784:	e7da      	b.n	801773c <uxr_prepare_reliable_buffer_to_write+0x218>
 8017786:	b293      	uxth	r3, r2
 8017788:	461a      	mov	r2, r3
 801778a:	e737      	b.n	80175fc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801778c:	4630      	mov	r0, r6
 801778e:	2101      	movs	r1, #1
 8017790:	9207      	str	r2, [sp, #28]
 8017792:	f000 fa67 	bl	8017c64 <uxr_seq_num_add>
 8017796:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801779a:	fbb0 f1fc 	udiv	r1, r0, ip
 801779e:	fb0c 0111 	mls	r1, ip, r1, r0
 80177a2:	4606      	mov	r6, r0
 80177a4:	b288      	uxth	r0, r1
 80177a6:	6863      	ldr	r3, [r4, #4]
 80177a8:	fbb3 f1fc 	udiv	r1, r3, ip
 80177ac:	6823      	ldr	r3, [r4, #0]
 80177ae:	9a07      	ldr	r2, [sp, #28]
 80177b0:	fb00 f101 	mul.w	r1, r0, r1
 80177b4:	3104      	adds	r1, #4
 80177b6:	440b      	add	r3, r1
 80177b8:	9303      	str	r3, [sp, #12]
 80177ba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80177be:	e70a      	b.n	80175d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80177c0:	8921      	ldrh	r1, [r4, #8]
 80177c2:	fbb5 f3f1 	udiv	r3, r5, r1
 80177c6:	fb01 5313 	mls	r3, r1, r3, r5
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	6863      	ldr	r3, [r4, #4]
 80177ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80177d2:	6821      	ldr	r1, [r4, #0]
 80177d4:	9804      	ldr	r0, [sp, #16]
 80177d6:	fb02 f303 	mul.w	r3, r2, r3
 80177da:	3304      	adds	r3, #4
 80177dc:	7b22      	ldrb	r2, [r4, #12]
 80177de:	4419      	add	r1, r3
 80177e0:	445a      	add	r2, fp
 80177e2:	f841 2c04 	str.w	r2, [r1, #-4]
 80177e6:	7b23      	ldrb	r3, [r4, #12]
 80177e8:	9300      	str	r3, [sp, #0]
 80177ea:	2300      	movs	r3, #0
 80177ec:	f7f7 fc4e 	bl	800f08c <ucdr_init_buffer_origin_offset>
 80177f0:	81e5      	strh	r5, [r4, #14]
 80177f2:	2001      	movs	r0, #1
 80177f4:	e7a2      	b.n	801773c <uxr_prepare_reliable_buffer_to_write+0x218>
 80177f6:	4682      	mov	sl, r0
 80177f8:	e6ca      	b.n	8017590 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80177fa:	bf00      	nop
 80177fc:	08017405 	.word	0x08017405

08017800 <uxr_prepare_next_reliable_buffer_to_send>:
 8017800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017802:	4604      	mov	r4, r0
 8017804:	460f      	mov	r7, r1
 8017806:	8a00      	ldrh	r0, [r0, #16]
 8017808:	2101      	movs	r1, #1
 801780a:	4616      	mov	r6, r2
 801780c:	461d      	mov	r5, r3
 801780e:	f000 fa29 	bl	8017c64 <uxr_seq_num_add>
 8017812:	8028      	strh	r0, [r5, #0]
 8017814:	8922      	ldrh	r2, [r4, #8]
 8017816:	fbb0 f3f2 	udiv	r3, r0, r2
 801781a:	fb02 0c13 	mls	ip, r2, r3, r0
 801781e:	fa1f fc8c 	uxth.w	ip, ip
 8017822:	6863      	ldr	r3, [r4, #4]
 8017824:	fbb3 f3f2 	udiv	r3, r3, r2
 8017828:	fb0c fc03 	mul.w	ip, ip, r3
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	89e1      	ldrh	r1, [r4, #14]
 8017830:	f10c 0c04 	add.w	ip, ip, #4
 8017834:	4463      	add	r3, ip
 8017836:	603b      	str	r3, [r7, #0]
 8017838:	6823      	ldr	r3, [r4, #0]
 801783a:	449c      	add	ip, r3
 801783c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017840:	6033      	str	r3, [r6, #0]
 8017842:	f000 fa17 	bl	8017c74 <uxr_seq_num_cmp>
 8017846:	2800      	cmp	r0, #0
 8017848:	dd01      	ble.n	801784e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801784a:	2000      	movs	r0, #0
 801784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801784e:	7b23      	ldrb	r3, [r4, #12]
 8017850:	6832      	ldr	r2, [r6, #0]
 8017852:	429a      	cmp	r2, r3
 8017854:	d9f9      	bls.n	801784a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017856:	8a61      	ldrh	r1, [r4, #18]
 8017858:	8a20      	ldrh	r0, [r4, #16]
 801785a:	f000 fa07 	bl	8017c6c <uxr_seq_num_sub>
 801785e:	8923      	ldrh	r3, [r4, #8]
 8017860:	4283      	cmp	r3, r0
 8017862:	d0f2      	beq.n	801784a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017864:	8828      	ldrh	r0, [r5, #0]
 8017866:	89e3      	ldrh	r3, [r4, #14]
 8017868:	8220      	strh	r0, [r4, #16]
 801786a:	4298      	cmp	r0, r3
 801786c:	d001      	beq.n	8017872 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801786e:	2001      	movs	r0, #1
 8017870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017872:	2101      	movs	r1, #1
 8017874:	f000 f9f6 	bl	8017c64 <uxr_seq_num_add>
 8017878:	81e0      	strh	r0, [r4, #14]
 801787a:	2001      	movs	r0, #1
 801787c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801787e:	bf00      	nop

08017880 <uxr_update_output_stream_heartbeat_timestamp>:
 8017880:	b570      	push	{r4, r5, r6, lr}
 8017882:	8a01      	ldrh	r1, [r0, #16]
 8017884:	4604      	mov	r4, r0
 8017886:	8a40      	ldrh	r0, [r0, #18]
 8017888:	4615      	mov	r5, r2
 801788a:	461e      	mov	r6, r3
 801788c:	f000 f9f2 	bl	8017c74 <uxr_seq_num_cmp>
 8017890:	2800      	cmp	r0, #0
 8017892:	db07      	blt.n	80178a4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017894:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017898:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801789c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80178a0:	2000      	movs	r0, #0
 80178a2:	bd70      	pop	{r4, r5, r6, pc}
 80178a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80178a8:	b940      	cbnz	r0, 80178bc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80178aa:	2301      	movs	r3, #1
 80178ac:	f884 3020 	strb.w	r3, [r4, #32]
 80178b0:	3564      	adds	r5, #100	@ 0x64
 80178b2:	f146 0600 	adc.w	r6, r6, #0
 80178b6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80178ba:	bd70      	pop	{r4, r5, r6, pc}
 80178bc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80178c0:	4295      	cmp	r5, r2
 80178c2:	eb76 0303 	sbcs.w	r3, r6, r3
 80178c6:	bfa5      	ittet	ge
 80178c8:	3001      	addge	r0, #1
 80178ca:	f884 0020 	strbge.w	r0, [r4, #32]
 80178ce:	2000      	movlt	r0, #0
 80178d0:	2001      	movge	r0, #1
 80178d2:	e7ed      	b.n	80178b0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080178d4 <uxr_begin_output_nack_buffer_it>:
 80178d4:	8a40      	ldrh	r0, [r0, #18]
 80178d6:	4770      	bx	lr

080178d8 <uxr_next_reliable_nack_buffer_to_send>:
 80178d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178dc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80178e0:	b082      	sub	sp, #8
 80178e2:	f1b8 0f00 	cmp.w	r8, #0
 80178e6:	d011      	beq.n	801790c <uxr_next_reliable_nack_buffer_to_send+0x34>
 80178e8:	4604      	mov	r4, r0
 80178ea:	8818      	ldrh	r0, [r3, #0]
 80178ec:	460e      	mov	r6, r1
 80178ee:	4617      	mov	r7, r2
 80178f0:	461d      	mov	r5, r3
 80178f2:	2101      	movs	r1, #1
 80178f4:	f000 f9b6 	bl	8017c64 <uxr_seq_num_add>
 80178f8:	8028      	strh	r0, [r5, #0]
 80178fa:	8a21      	ldrh	r1, [r4, #16]
 80178fc:	f000 f9ba 	bl	8017c74 <uxr_seq_num_cmp>
 8017900:	2800      	cmp	r0, #0
 8017902:	dd07      	ble.n	8017914 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017904:	f04f 0800 	mov.w	r8, #0
 8017908:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801790c:	4640      	mov	r0, r8
 801790e:	b002      	add	sp, #8
 8017910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017914:	8921      	ldrh	r1, [r4, #8]
 8017916:	8828      	ldrh	r0, [r5, #0]
 8017918:	6823      	ldr	r3, [r4, #0]
 801791a:	fbb0 f2f1 	udiv	r2, r0, r1
 801791e:	fb01 0c12 	mls	ip, r1, r2, r0
 8017922:	fa1f f28c 	uxth.w	r2, ip
 8017926:	9301      	str	r3, [sp, #4]
 8017928:	6863      	ldr	r3, [r4, #4]
 801792a:	fbb3 fcf1 	udiv	ip, r3, r1
 801792e:	9b01      	ldr	r3, [sp, #4]
 8017930:	fb02 fc0c 	mul.w	ip, r2, ip
 8017934:	f10c 0c04 	add.w	ip, ip, #4
 8017938:	4463      	add	r3, ip
 801793a:	6033      	str	r3, [r6, #0]
 801793c:	6823      	ldr	r3, [r4, #0]
 801793e:	4463      	add	r3, ip
 8017940:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017944:	603b      	str	r3, [r7, #0]
 8017946:	7b22      	ldrb	r2, [r4, #12]
 8017948:	429a      	cmp	r2, r3
 801794a:	d0d2      	beq.n	80178f2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801794c:	4640      	mov	r0, r8
 801794e:	b002      	add	sp, #8
 8017950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017954 <uxr_process_acknack>:
 8017954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017956:	4604      	mov	r4, r0
 8017958:	460e      	mov	r6, r1
 801795a:	4610      	mov	r0, r2
 801795c:	2101      	movs	r1, #1
 801795e:	f000 f985 	bl	8017c6c <uxr_seq_num_sub>
 8017962:	8a61      	ldrh	r1, [r4, #18]
 8017964:	f000 f982 	bl	8017c6c <uxr_seq_num_sub>
 8017968:	b1c0      	cbz	r0, 801799c <uxr_process_acknack+0x48>
 801796a:	4605      	mov	r5, r0
 801796c:	2700      	movs	r7, #0
 801796e:	2101      	movs	r1, #1
 8017970:	8a60      	ldrh	r0, [r4, #18]
 8017972:	f000 f977 	bl	8017c64 <uxr_seq_num_add>
 8017976:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801797a:	fbb0 f1fc 	udiv	r1, r0, ip
 801797e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017982:	fb0c 0111 	mls	r1, ip, r1, r0
 8017986:	b289      	uxth	r1, r1
 8017988:	3701      	adds	r7, #1
 801798a:	fbb3 f3fc 	udiv	r3, r3, ip
 801798e:	fb01 f303 	mul.w	r3, r1, r3
 8017992:	42bd      	cmp	r5, r7
 8017994:	7b21      	ldrb	r1, [r4, #12]
 8017996:	8260      	strh	r0, [r4, #18]
 8017998:	50d1      	str	r1, [r2, r3]
 801799a:	d1e8      	bne.n	801796e <uxr_process_acknack+0x1a>
 801799c:	3e00      	subs	r6, #0
 801799e:	f04f 0300 	mov.w	r3, #0
 80179a2:	bf18      	it	ne
 80179a4:	2601      	movne	r6, #1
 80179a6:	f884 3020 	strb.w	r3, [r4, #32]
 80179aa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80179ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080179b0 <uxr_is_output_up_to_date>:
 80179b0:	8a01      	ldrh	r1, [r0, #16]
 80179b2:	8a40      	ldrh	r0, [r0, #18]
 80179b4:	b508      	push	{r3, lr}
 80179b6:	f000 f95d 	bl	8017c74 <uxr_seq_num_cmp>
 80179ba:	fab0 f080 	clz	r0, r0
 80179be:	0940      	lsrs	r0, r0, #5
 80179c0:	bd08      	pop	{r3, pc}
 80179c2:	bf00      	nop

080179c4 <get_available_free_slots>:
 80179c4:	8902      	ldrh	r2, [r0, #8]
 80179c6:	b1da      	cbz	r2, 8017a00 <get_available_free_slots+0x3c>
 80179c8:	b530      	push	{r4, r5, lr}
 80179ca:	2100      	movs	r1, #0
 80179cc:	6843      	ldr	r3, [r0, #4]
 80179ce:	6805      	ldr	r5, [r0, #0]
 80179d0:	7b04      	ldrb	r4, [r0, #12]
 80179d2:	fbb3 fef2 	udiv	lr, r3, r2
 80179d6:	4608      	mov	r0, r1
 80179d8:	460b      	mov	r3, r1
 80179da:	fbb3 fcf2 	udiv	ip, r3, r2
 80179de:	fb02 331c 	mls	r3, r2, ip, r3
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	fb0e f303 	mul.w	r3, lr, r3
 80179e8:	3101      	adds	r1, #1
 80179ea:	f855 c003 	ldr.w	ip, [r5, r3]
 80179ee:	4564      	cmp	r4, ip
 80179f0:	bf08      	it	eq
 80179f2:	3001      	addeq	r0, #1
 80179f4:	b28b      	uxth	r3, r1
 80179f6:	bf08      	it	eq
 80179f8:	b280      	uxtheq	r0, r0
 80179fa:	4293      	cmp	r3, r2
 80179fc:	d3ed      	bcc.n	80179da <get_available_free_slots+0x16>
 80179fe:	bd30      	pop	{r4, r5, pc}
 8017a00:	4610      	mov	r0, r2
 8017a02:	4770      	bx	lr

08017a04 <uxr_buffer_request_data>:
 8017a04:	b530      	push	{r4, r5, lr}
 8017a06:	b095      	sub	sp, #84	@ 0x54
 8017a08:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017a0c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8017a0e:	9303      	str	r3, [sp, #12]
 8017a10:	2200      	movs	r2, #0
 8017a12:	2d00      	cmp	r5, #0
 8017a14:	bf14      	ite	ne
 8017a16:	2101      	movne	r1, #1
 8017a18:	4611      	moveq	r1, r2
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	f88d 301c 	strb.w	r3, [sp, #28]
 8017a20:	f88d 201d 	strb.w	r2, [sp, #29]
 8017a24:	f88d 201e 	strb.w	r2, [sp, #30]
 8017a28:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8017a2c:	d021      	beq.n	8017a72 <uxr_buffer_request_data+0x6e>
 8017a2e:	682a      	ldr	r2, [r5, #0]
 8017a30:	686b      	ldr	r3, [r5, #4]
 8017a32:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8017a36:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8017a3a:	2210      	movs	r2, #16
 8017a3c:	2308      	movs	r3, #8
 8017a3e:	2100      	movs	r1, #0
 8017a40:	e9cd 3100 	strd	r3, r1, [sp]
 8017a44:	4620      	mov	r0, r4
 8017a46:	9905      	ldr	r1, [sp, #20]
 8017a48:	ab0c      	add	r3, sp, #48	@ 0x30
 8017a4a:	f7f8 fd93 	bl	8010574 <uxr_prepare_stream_to_write_submessage>
 8017a4e:	b918      	cbnz	r0, 8017a58 <uxr_buffer_request_data+0x54>
 8017a50:	4604      	mov	r4, r0
 8017a52:	4620      	mov	r0, r4
 8017a54:	b015      	add	sp, #84	@ 0x54
 8017a56:	bd30      	pop	{r4, r5, pc}
 8017a58:	9904      	ldr	r1, [sp, #16]
 8017a5a:	aa06      	add	r2, sp, #24
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	f7f8 febf 	bl	80107e0 <uxr_init_base_object_request>
 8017a62:	a906      	add	r1, sp, #24
 8017a64:	4604      	mov	r4, r0
 8017a66:	a80c      	add	r0, sp, #48	@ 0x30
 8017a68:	f7fa f9ee 	bl	8011e48 <uxr_serialize_READ_DATA_Payload>
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	b015      	add	sp, #84	@ 0x54
 8017a70:	bd30      	pop	{r4, r5, pc}
 8017a72:	2208      	movs	r2, #8
 8017a74:	e7e2      	b.n	8017a3c <uxr_buffer_request_data+0x38>
 8017a76:	bf00      	nop

08017a78 <uxr_buffer_cancel_data>:
 8017a78:	b510      	push	{r4, lr}
 8017a7a:	b094      	sub	sp, #80	@ 0x50
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	9202      	str	r2, [sp, #8]
 8017a80:	9205      	str	r2, [sp, #20]
 8017a82:	9301      	str	r3, [sp, #4]
 8017a84:	2201      	movs	r2, #1
 8017a86:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017a8a:	f88d 301e 	strb.w	r3, [sp, #30]
 8017a8e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8017a92:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8017a96:	2308      	movs	r3, #8
 8017a98:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8017a9c:	9300      	str	r3, [sp, #0]
 8017a9e:	2210      	movs	r2, #16
 8017aa0:	ab0c      	add	r3, sp, #48	@ 0x30
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	9103      	str	r1, [sp, #12]
 8017aa6:	f7f8 fd65 	bl	8010574 <uxr_prepare_stream_to_write_submessage>
 8017aaa:	b918      	cbnz	r0, 8017ab4 <uxr_buffer_cancel_data+0x3c>
 8017aac:	4604      	mov	r4, r0
 8017aae:	4620      	mov	r0, r4
 8017ab0:	b014      	add	sp, #80	@ 0x50
 8017ab2:	bd10      	pop	{r4, pc}
 8017ab4:	9905      	ldr	r1, [sp, #20]
 8017ab6:	aa06      	add	r2, sp, #24
 8017ab8:	4620      	mov	r0, r4
 8017aba:	f7f8 fe91 	bl	80107e0 <uxr_init_base_object_request>
 8017abe:	a906      	add	r1, sp, #24
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	a80c      	add	r0, sp, #48	@ 0x30
 8017ac4:	f7fa f9c0 	bl	8011e48 <uxr_serialize_READ_DATA_Payload>
 8017ac8:	4620      	mov	r0, r4
 8017aca:	b014      	add	sp, #80	@ 0x50
 8017acc:	bd10      	pop	{r4, pc}
 8017ace:	bf00      	nop

08017ad0 <read_submessage_format>:
 8017ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ad4:	b095      	sub	sp, #84	@ 0x54
 8017ad6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8017ada:	b113      	cbz	r3, 8017ae2 <read_submessage_format+0x12>
 8017adc:	b015      	add	sp, #84	@ 0x54
 8017ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ae2:	460c      	mov	r4, r1
 8017ae4:	4615      	mov	r5, r2
 8017ae6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017aea:	4607      	mov	r7, r0
 8017aec:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017aee:	9004      	str	r0, [sp, #16]
 8017af0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8017af2:	9005      	str	r0, [sp, #20]
 8017af4:	1a52      	subs	r2, r2, r1
 8017af6:	a80c      	add	r0, sp, #48	@ 0x30
 8017af8:	4699      	mov	r9, r3
 8017afa:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8017afe:	f7f7 fad7 	bl	800f0b0 <ucdr_init_buffer>
 8017b02:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017b06:	a80c      	add	r0, sp, #48	@ 0x30
 8017b08:	f7f7 faa6 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8017b0c:	69e2      	ldr	r2, [r4, #28]
 8017b0e:	b19a      	cbz	r2, 8017b38 <read_submessage_format+0x68>
 8017b10:	f1b8 0f07 	cmp.w	r8, #7
 8017b14:	f882 9014 	strb.w	r9, [r2, #20]
 8017b18:	d040      	beq.n	8017b9c <read_submessage_format+0xcc>
 8017b1a:	f1b8 0f08 	cmp.w	r8, #8
 8017b1e:	d02e      	beq.n	8017b7e <read_submessage_format+0xae>
 8017b20:	f1b8 0f06 	cmp.w	r8, #6
 8017b24:	d011      	beq.n	8017b4a <read_submessage_format+0x7a>
 8017b26:	2301      	movs	r3, #1
 8017b28:	7513      	strb	r3, [r2, #20]
 8017b2a:	4629      	mov	r1, r5
 8017b2c:	4620      	mov	r0, r4
 8017b2e:	f7f7 fb0f 	bl	800f150 <ucdr_advance_buffer>
 8017b32:	b015      	add	sp, #84	@ 0x54
 8017b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b38:	f1b8 0f07 	cmp.w	r8, #7
 8017b3c:	d02e      	beq.n	8017b9c <read_submessage_format+0xcc>
 8017b3e:	f1b8 0f08 	cmp.w	r8, #8
 8017b42:	d01c      	beq.n	8017b7e <read_submessage_format+0xae>
 8017b44:	f1b8 0f06 	cmp.w	r8, #6
 8017b48:	d1ef      	bne.n	8017b2a <read_submessage_format+0x5a>
 8017b4a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8017b4e:	f1b8 0f00 	cmp.w	r8, #0
 8017b52:	d011      	beq.n	8017b78 <read_submessage_format+0xa8>
 8017b54:	ab0c      	add	r3, sp, #48	@ 0x30
 8017b56:	e9cd 3500 	strd	r3, r5, [sp]
 8017b5a:	2306      	movs	r3, #6
 8017b5c:	f88d 3016 	strb.w	r3, [sp, #22]
 8017b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017b64:	9302      	str	r3, [sp, #8]
 8017b66:	4632      	mov	r2, r6
 8017b68:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017b6c:	4638      	mov	r0, r7
 8017b6e:	47c0      	blx	r8
 8017b70:	2301      	movs	r3, #1
 8017b72:	69e2      	ldr	r2, [r4, #28]
 8017b74:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017b78:	2a00      	cmp	r2, #0
 8017b7a:	d1d4      	bne.n	8017b26 <read_submessage_format+0x56>
 8017b7c:	e7d5      	b.n	8017b2a <read_submessage_format+0x5a>
 8017b7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d0f8      	beq.n	8017b78 <read_submessage_format+0xa8>
 8017b86:	a906      	add	r1, sp, #24
 8017b88:	a80c      	add	r0, sp, #48	@ 0x30
 8017b8a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017b8e:	f7fa fa21 	bl	8011fd4 <uxr_deserialize_SampleIdentity>
 8017b92:	b9a0      	cbnz	r0, 8017bbe <read_submessage_format+0xee>
 8017b94:	69e2      	ldr	r2, [r4, #28]
 8017b96:	2a00      	cmp	r2, #0
 8017b98:	d1c5      	bne.n	8017b26 <read_submessage_format+0x56>
 8017b9a:	e7c6      	b.n	8017b2a <read_submessage_format+0x5a>
 8017b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017ba0:	b13b      	cbz	r3, 8017bb2 <read_submessage_format+0xe2>
 8017ba2:	a906      	add	r1, sp, #24
 8017ba4:	a80c      	add	r0, sp, #48	@ 0x30
 8017ba6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017baa:	f7f9 fee7 	bl	801197c <uxr_deserialize_BaseObjectRequest>
 8017bae:	bb60      	cbnz	r0, 8017c0a <read_submessage_format+0x13a>
 8017bb0:	69e2      	ldr	r2, [r4, #28]
 8017bb2:	68a3      	ldr	r3, [r4, #8]
 8017bb4:	442b      	add	r3, r5
 8017bb6:	60a3      	str	r3, [r4, #8]
 8017bb8:	2a00      	cmp	r2, #0
 8017bba:	d1b4      	bne.n	8017b26 <read_submessage_format+0x56>
 8017bbc:	e7b5      	b.n	8017b2a <read_submessage_format+0x5a>
 8017bbe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8017bc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017bc4:	1a52      	subs	r2, r2, r1
 8017bc6:	eba8 0803 	sub.w	r8, r8, r3
 8017bca:	a80c      	add	r0, sp, #48	@ 0x30
 8017bcc:	f7f7 fa70 	bl	800f0b0 <ucdr_init_buffer>
 8017bd0:	44a8      	add	r8, r5
 8017bd2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017bd6:	a80c      	add	r0, sp, #48	@ 0x30
 8017bd8:	f7f7 fa3e 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8017bdc:	fa1f f888 	uxth.w	r8, r8
 8017be0:	ab0c      	add	r3, sp, #48	@ 0x30
 8017be2:	9300      	str	r3, [sp, #0]
 8017be4:	f8cd 8004 	str.w	r8, [sp, #4]
 8017be8:	2108      	movs	r1, #8
 8017bea:	f88d 1016 	strb.w	r1, [sp, #22]
 8017bee:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8017bf2:	9102      	str	r1, [sp, #8]
 8017bf4:	ab06      	add	r3, sp, #24
 8017bf6:	4632      	mov	r2, r6
 8017bf8:	9905      	ldr	r1, [sp, #20]
 8017bfa:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8017bfe:	4638      	mov	r0, r7
 8017c00:	47b0      	blx	r6
 8017c02:	2301      	movs	r3, #1
 8017c04:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017c08:	e7c4      	b.n	8017b94 <read_submessage_format+0xc4>
 8017c0a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8017c0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017c10:	1a52      	subs	r2, r2, r1
 8017c12:	a80c      	add	r0, sp, #48	@ 0x30
 8017c14:	eba8 0803 	sub.w	r8, r8, r3
 8017c18:	f7f7 fa4a 	bl	800f0b0 <ucdr_init_buffer>
 8017c1c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8017c20:	a80c      	add	r0, sp, #48	@ 0x30
 8017c22:	f7f7 fa19 	bl	800f058 <ucdr_set_on_full_buffer_callback>
 8017c26:	ab0c      	add	r3, sp, #48	@ 0x30
 8017c28:	9300      	str	r3, [sp, #0]
 8017c2a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8017c2e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017c32:	44a8      	add	r8, r5
 8017c34:	fa1f f888 	uxth.w	r8, r8
 8017c38:	f8cd 8004 	str.w	r8, [sp, #4]
 8017c3c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017c40:	2107      	movs	r1, #7
 8017c42:	f88d 1016 	strb.w	r1, [sp, #22]
 8017c46:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8017c4a:	9102      	str	r1, [sp, #8]
 8017c4c:	4632      	mov	r2, r6
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8017c54:	9905      	ldr	r1, [sp, #20]
 8017c56:	4638      	mov	r0, r7
 8017c58:	47b0      	blx	r6
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017c60:	e7a6      	b.n	8017bb0 <read_submessage_format+0xe0>
 8017c62:	bf00      	nop

08017c64 <uxr_seq_num_add>:
 8017c64:	4408      	add	r0, r1
 8017c66:	b280      	uxth	r0, r0
 8017c68:	4770      	bx	lr
 8017c6a:	bf00      	nop

08017c6c <uxr_seq_num_sub>:
 8017c6c:	1a40      	subs	r0, r0, r1
 8017c6e:	b280      	uxth	r0, r0
 8017c70:	4770      	bx	lr
 8017c72:	bf00      	nop

08017c74 <uxr_seq_num_cmp>:
 8017c74:	4288      	cmp	r0, r1
 8017c76:	d011      	beq.n	8017c9c <uxr_seq_num_cmp+0x28>
 8017c78:	d309      	bcc.n	8017c8e <uxr_seq_num_cmp+0x1a>
 8017c7a:	4288      	cmp	r0, r1
 8017c7c:	d910      	bls.n	8017ca0 <uxr_seq_num_cmp+0x2c>
 8017c7e:	1a40      	subs	r0, r0, r1
 8017c80:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8017c84:	bfd4      	ite	le
 8017c86:	2001      	movle	r0, #1
 8017c88:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017c8c:	4770      	bx	lr
 8017c8e:	1a0b      	subs	r3, r1, r0
 8017c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017c94:	daf1      	bge.n	8017c7a <uxr_seq_num_cmp+0x6>
 8017c96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c9a:	4770      	bx	lr
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	4770      	bx	lr
 8017ca0:	2001      	movs	r0, #1
 8017ca2:	4770      	bx	lr

08017ca4 <uxr_init_framing_io>:
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	7041      	strb	r1, [r0, #1]
 8017ca8:	7003      	strb	r3, [r0, #0]
 8017caa:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop

08017cb0 <uxr_write_framed_msg>:
 8017cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb4:	4617      	mov	r7, r2
 8017cb6:	7842      	ldrb	r2, [r0, #1]
 8017cb8:	b083      	sub	sp, #12
 8017cba:	460e      	mov	r6, r1
 8017cbc:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8017cc0:	469a      	mov	sl, r3
 8017cc2:	2901      	cmp	r1, #1
 8017cc4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8017cc8:	4604      	mov	r4, r0
 8017cca:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8017cce:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8017cd2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8017cd6:	f240 8137 	bls.w	8017f48 <uxr_write_framed_msg+0x298>
 8017cda:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017cde:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8017ce2:	2901      	cmp	r1, #1
 8017ce4:	f04f 0202 	mov.w	r2, #2
 8017ce8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017cec:	f240 808f 	bls.w	8017e0e <uxr_write_framed_msg+0x15e>
 8017cf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cf2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8017cf6:	b2dd      	uxtb	r5, r3
 8017cf8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017cfc:	2203      	movs	r2, #3
 8017cfe:	2901      	cmp	r1, #1
 8017d00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017d04:	f240 809a 	bls.w	8017e3c <uxr_write_framed_msg+0x18c>
 8017d08:	18a1      	adds	r1, r4, r2
 8017d0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d0c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8017d10:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017d14:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017d18:	3201      	adds	r2, #1
 8017d1a:	2801      	cmp	r0, #1
 8017d1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017d20:	f240 80a0 	bls.w	8017e64 <uxr_write_framed_msg+0x1b4>
 8017d24:	18a0      	adds	r0, r4, r2
 8017d26:	3201      	adds	r2, #1
 8017d28:	b2d2      	uxtb	r2, r2
 8017d2a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017d2e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	f000 80a9 	beq.w	8017e8a <uxr_write_framed_msg+0x1da>
 8017d38:	f04f 0900 	mov.w	r9, #0
 8017d3c:	46c8      	mov	r8, r9
 8017d3e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017d42:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017d46:	2901      	cmp	r1, #1
 8017d48:	f240 80c3 	bls.w	8017ed2 <uxr_write_framed_msg+0x222>
 8017d4c:	2a29      	cmp	r2, #41	@ 0x29
 8017d4e:	f200 809f 	bhi.w	8017e90 <uxr_write_framed_msg+0x1e0>
 8017d52:	18a1      	adds	r1, r4, r2
 8017d54:	3201      	adds	r2, #1
 8017d56:	b2d2      	uxtb	r2, r2
 8017d58:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8017d5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017d60:	ea89 0303 	eor.w	r3, r9, r3
 8017d64:	498c      	ldr	r1, [pc, #560]	@ (8017f98 <uxr_write_framed_msg+0x2e8>)
 8017d66:	b2db      	uxtb	r3, r3
 8017d68:	f108 0801 	add.w	r8, r8, #1
 8017d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017d70:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8017d74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d76:	4543      	cmp	r3, r8
 8017d78:	d8e1      	bhi.n	8017d3e <uxr_write_framed_msg+0x8e>
 8017d7a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017d7e:	fa5f f889 	uxtb.w	r8, r9
 8017d82:	9301      	str	r3, [sp, #4]
 8017d84:	f04f 0900 	mov.w	r9, #0
 8017d88:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8017d8c:	fa5f f18a 	uxtb.w	r1, sl
 8017d90:	2901      	cmp	r1, #1
 8017d92:	d921      	bls.n	8017dd8 <uxr_write_framed_msg+0x128>
 8017d94:	2a29      	cmp	r2, #41	@ 0x29
 8017d96:	f240 80af 	bls.w	8017ef8 <uxr_write_framed_msg+0x248>
 8017d9a:	2500      	movs	r5, #0
 8017d9c:	e000      	b.n	8017da0 <uxr_write_framed_msg+0xf0>
 8017d9e:	b160      	cbz	r0, 8017dba <uxr_write_framed_msg+0x10a>
 8017da0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017da4:	1b52      	subs	r2, r2, r5
 8017da6:	465b      	mov	r3, fp
 8017da8:	4421      	add	r1, r4
 8017daa:	4638      	mov	r0, r7
 8017dac:	47b0      	blx	r6
 8017dae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017db2:	4405      	add	r5, r0
 8017db4:	4295      	cmp	r5, r2
 8017db6:	d3f2      	bcc.n	8017d9e <uxr_write_framed_msg+0xee>
 8017db8:	d003      	beq.n	8017dc2 <uxr_write_framed_msg+0x112>
 8017dba:	2000      	movs	r0, #0
 8017dbc:	b003      	add	sp, #12
 8017dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc2:	fa5f f18a 	uxtb.w	r1, sl
 8017dc6:	f04f 0300 	mov.w	r3, #0
 8017dca:	2901      	cmp	r1, #1
 8017dcc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017dd0:	f04f 0200 	mov.w	r2, #0
 8017dd4:	f200 8090 	bhi.w	8017ef8 <uxr_write_framed_msg+0x248>
 8017dd8:	1c51      	adds	r1, r2, #1
 8017dda:	b2c9      	uxtb	r1, r1
 8017ddc:	2929      	cmp	r1, #41	@ 0x29
 8017dde:	d8dc      	bhi.n	8017d9a <uxr_write_framed_msg+0xea>
 8017de0:	18a5      	adds	r5, r4, r2
 8017de2:	4421      	add	r1, r4
 8017de4:	3202      	adds	r2, #2
 8017de6:	f088 0820 	eor.w	r8, r8, #32
 8017dea:	4648      	mov	r0, r9
 8017dec:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8017df0:	b2d2      	uxtb	r2, r2
 8017df2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8017df6:	f04f 0901 	mov.w	r9, #1
 8017dfa:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017dfe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017e02:	2800      	cmp	r0, #0
 8017e04:	f040 8085 	bne.w	8017f12 <uxr_write_framed_msg+0x262>
 8017e08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017e0c:	e7bc      	b.n	8017d88 <uxr_write_framed_msg+0xd8>
 8017e0e:	4611      	mov	r1, r2
 8017e10:	f04f 0c03 	mov.w	ip, #3
 8017e14:	2204      	movs	r2, #4
 8017e16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e18:	4421      	add	r1, r4
 8017e1a:	b2dd      	uxtb	r5, r3
 8017e1c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8017e20:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8017e24:	44a4      	add	ip, r4
 8017e26:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017e2a:	f080 0020 	eor.w	r0, r0, #32
 8017e2e:	2901      	cmp	r1, #1
 8017e30:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8017e34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017e38:	f63f af66 	bhi.w	8017d08 <uxr_write_framed_msg+0x58>
 8017e3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e3e:	18a0      	adds	r0, r4, r2
 8017e40:	f085 0520 	eor.w	r5, r5, #32
 8017e44:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017e48:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017e4c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8017e50:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8017e54:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8017e58:	3202      	adds	r2, #2
 8017e5a:	2801      	cmp	r0, #1
 8017e5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017e60:	f63f af60 	bhi.w	8017d24 <uxr_write_framed_msg+0x74>
 8017e64:	1c50      	adds	r0, r2, #1
 8017e66:	18a5      	adds	r5, r4, r2
 8017e68:	fa54 f080 	uxtab	r0, r4, r0
 8017e6c:	3202      	adds	r2, #2
 8017e6e:	f081 0120 	eor.w	r1, r1, #32
 8017e72:	b2d2      	uxtb	r2, r2
 8017e74:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017e78:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8017e7c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017e80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	f47f af57 	bne.w	8017d38 <uxr_write_framed_msg+0x88>
 8017e8a:	9301      	str	r3, [sp, #4]
 8017e8c:	4698      	mov	r8, r3
 8017e8e:	e779      	b.n	8017d84 <uxr_write_framed_msg+0xd4>
 8017e90:	2500      	movs	r5, #0
 8017e92:	e001      	b.n	8017e98 <uxr_write_framed_msg+0x1e8>
 8017e94:	2800      	cmp	r0, #0
 8017e96:	d090      	beq.n	8017dba <uxr_write_framed_msg+0x10a>
 8017e98:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017e9c:	1b52      	subs	r2, r2, r5
 8017e9e:	465b      	mov	r3, fp
 8017ea0:	4421      	add	r1, r4
 8017ea2:	4638      	mov	r0, r7
 8017ea4:	47b0      	blx	r6
 8017ea6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017eaa:	4405      	add	r5, r0
 8017eac:	4295      	cmp	r5, r2
 8017eae:	d3f1      	bcc.n	8017e94 <uxr_write_framed_msg+0x1e4>
 8017eb0:	d183      	bne.n	8017dba <uxr_write_framed_msg+0x10a>
 8017eb2:	f04f 0300 	mov.w	r3, #0
 8017eb6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017eba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ebc:	4543      	cmp	r3, r8
 8017ebe:	d964      	bls.n	8017f8a <uxr_write_framed_msg+0x2da>
 8017ec0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017ec4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017ec8:	2901      	cmp	r1, #1
 8017eca:	f04f 0200 	mov.w	r2, #0
 8017ece:	f63f af3d 	bhi.w	8017d4c <uxr_write_framed_msg+0x9c>
 8017ed2:	1c51      	adds	r1, r2, #1
 8017ed4:	b2c9      	uxtb	r1, r1
 8017ed6:	2929      	cmp	r1, #41	@ 0x29
 8017ed8:	d8da      	bhi.n	8017e90 <uxr_write_framed_msg+0x1e0>
 8017eda:	18a0      	adds	r0, r4, r2
 8017edc:	4421      	add	r1, r4
 8017ede:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8017ee2:	3202      	adds	r2, #2
 8017ee4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8017ee8:	b2d2      	uxtb	r2, r2
 8017eea:	f083 0020 	eor.w	r0, r3, #32
 8017eee:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8017ef2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017ef6:	e733      	b.n	8017d60 <uxr_write_framed_msg+0xb0>
 8017ef8:	18a1      	adds	r1, r4, r2
 8017efa:	3201      	adds	r2, #1
 8017efc:	4648      	mov	r0, r9
 8017efe:	b2d2      	uxtb	r2, r2
 8017f00:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017f04:	f04f 0901 	mov.w	r9, #1
 8017f08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	f43f af7b 	beq.w	8017e08 <uxr_write_framed_msg+0x158>
 8017f12:	2500      	movs	r5, #0
 8017f14:	e002      	b.n	8017f1c <uxr_write_framed_msg+0x26c>
 8017f16:	2800      	cmp	r0, #0
 8017f18:	f43f af4f 	beq.w	8017dba <uxr_write_framed_msg+0x10a>
 8017f1c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017f20:	1b52      	subs	r2, r2, r5
 8017f22:	465b      	mov	r3, fp
 8017f24:	4421      	add	r1, r4
 8017f26:	4638      	mov	r0, r7
 8017f28:	47b0      	blx	r6
 8017f2a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017f2e:	4405      	add	r5, r0
 8017f30:	4295      	cmp	r5, r2
 8017f32:	d3f0      	bcc.n	8017f16 <uxr_write_framed_msg+0x266>
 8017f34:	f47f af41 	bne.w	8017dba <uxr_write_framed_msg+0x10a>
 8017f38:	2300      	movs	r3, #0
 8017f3a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f40:	b298      	uxth	r0, r3
 8017f42:	b003      	add	sp, #12
 8017f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f48:	217d      	movs	r1, #125	@ 0x7d
 8017f4a:	f082 0220 	eor.w	r2, r2, #32
 8017f4e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8017f52:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017f56:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8017f5a:	2901      	cmp	r1, #1
 8017f5c:	f04f 0203 	mov.w	r2, #3
 8017f60:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017f64:	d804      	bhi.n	8017f70 <uxr_write_framed_msg+0x2c0>
 8017f66:	4611      	mov	r1, r2
 8017f68:	f04f 0c04 	mov.w	ip, #4
 8017f6c:	2205      	movs	r2, #5
 8017f6e:	e752      	b.n	8017e16 <uxr_write_framed_msg+0x166>
 8017f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017f72:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8017f76:	b2dd      	uxtb	r5, r3
 8017f78:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017f7c:	2204      	movs	r2, #4
 8017f7e:	2901      	cmp	r1, #1
 8017f80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017f84:	f63f aec0 	bhi.w	8017d08 <uxr_write_framed_msg+0x58>
 8017f88:	e758      	b.n	8017e3c <uxr_write_framed_msg+0x18c>
 8017f8a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017f8e:	fa5f f889 	uxtb.w	r8, r9
 8017f92:	9301      	str	r3, [sp, #4]
 8017f94:	2200      	movs	r2, #0
 8017f96:	e6f5      	b.n	8017d84 <uxr_write_framed_msg+0xd4>
 8017f98:	0801c438 	.word	0x0801c438

08017f9c <uxr_framing_read_transport>:
 8017f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fa0:	4604      	mov	r4, r0
 8017fa2:	b083      	sub	sp, #12
 8017fa4:	461f      	mov	r7, r3
 8017fa6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017faa:	4689      	mov	r9, r1
 8017fac:	4692      	mov	sl, r2
 8017fae:	f7f8 fdc5 	bl	8010b3c <uxr_millis>
 8017fb2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017fb6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8017fba:	42b3      	cmp	r3, r6
 8017fbc:	4680      	mov	r8, r0
 8017fbe:	d061      	beq.n	8018084 <uxr_framing_read_transport+0xe8>
 8017fc0:	d81c      	bhi.n	8017ffc <uxr_framing_read_transport+0x60>
 8017fc2:	1e75      	subs	r5, r6, #1
 8017fc4:	1aed      	subs	r5, r5, r3
 8017fc6:	b2ed      	uxtb	r5, r5
 8017fc8:	2600      	movs	r6, #0
 8017fca:	455d      	cmp	r5, fp
 8017fcc:	d81f      	bhi.n	801800e <uxr_framing_read_transport+0x72>
 8017fce:	19ab      	adds	r3, r5, r6
 8017fd0:	455b      	cmp	r3, fp
 8017fd2:	bf84      	itt	hi
 8017fd4:	ebab 0605 	subhi.w	r6, fp, r5
 8017fd8:	b2f6      	uxtbhi	r6, r6
 8017fda:	b9ed      	cbnz	r5, 8018018 <uxr_framing_read_transport+0x7c>
 8017fdc:	f04f 0b00 	mov.w	fp, #0
 8017fe0:	f7f8 fdac 	bl	8010b3c <uxr_millis>
 8017fe4:	683b      	ldr	r3, [r7, #0]
 8017fe6:	eba0 0808 	sub.w	r8, r0, r8
 8017fea:	eba3 0308 	sub.w	r3, r3, r8
 8017fee:	4658      	mov	r0, fp
 8017ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ff4:	603b      	str	r3, [r7, #0]
 8017ff6:	b003      	add	sp, #12
 8017ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ffc:	2e00      	cmp	r6, #0
 8017ffe:	d049      	beq.n	8018094 <uxr_framing_read_transport+0xf8>
 8018000:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8018004:	b2ed      	uxtb	r5, r5
 8018006:	3e01      	subs	r6, #1
 8018008:	455d      	cmp	r5, fp
 801800a:	b2f6      	uxtb	r6, r6
 801800c:	d9df      	bls.n	8017fce <uxr_framing_read_transport+0x32>
 801800e:	fa5f f58b 	uxtb.w	r5, fp
 8018012:	2600      	movs	r6, #0
 8018014:	2d00      	cmp	r5, #0
 8018016:	d0e1      	beq.n	8017fdc <uxr_framing_read_transport+0x40>
 8018018:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801801c:	3102      	adds	r1, #2
 801801e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018020:	9300      	str	r3, [sp, #0]
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	4421      	add	r1, r4
 8018026:	462a      	mov	r2, r5
 8018028:	4650      	mov	r0, sl
 801802a:	47c8      	blx	r9
 801802c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018030:	4a1a      	ldr	r2, [pc, #104]	@ (801809c <uxr_framing_read_transport+0x100>)
 8018032:	4403      	add	r3, r0
 8018034:	0859      	lsrs	r1, r3, #1
 8018036:	fba2 2101 	umull	r2, r1, r2, r1
 801803a:	0889      	lsrs	r1, r1, #2
 801803c:	222a      	movs	r2, #42	@ 0x2a
 801803e:	fb02 3111 	mls	r1, r2, r1, r3
 8018042:	4683      	mov	fp, r0
 8018044:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8018048:	2800      	cmp	r0, #0
 801804a:	d0c7      	beq.n	8017fdc <uxr_framing_read_transport+0x40>
 801804c:	42a8      	cmp	r0, r5
 801804e:	d1c7      	bne.n	8017fe0 <uxr_framing_read_transport+0x44>
 8018050:	2e00      	cmp	r6, #0
 8018052:	d0c5      	beq.n	8017fe0 <uxr_framing_read_transport+0x44>
 8018054:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018056:	9300      	str	r3, [sp, #0]
 8018058:	3102      	adds	r1, #2
 801805a:	4632      	mov	r2, r6
 801805c:	4421      	add	r1, r4
 801805e:	2300      	movs	r3, #0
 8018060:	4650      	mov	r0, sl
 8018062:	47c8      	blx	r9
 8018064:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018068:	4a0c      	ldr	r2, [pc, #48]	@ (801809c <uxr_framing_read_transport+0x100>)
 801806a:	180b      	adds	r3, r1, r0
 801806c:	0859      	lsrs	r1, r3, #1
 801806e:	fba2 1201 	umull	r1, r2, r2, r1
 8018072:	0892      	lsrs	r2, r2, #2
 8018074:	212a      	movs	r1, #42	@ 0x2a
 8018076:	fb01 3312 	mls	r3, r1, r2, r3
 801807a:	eb00 0b05 	add.w	fp, r0, r5
 801807e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8018082:	e7ad      	b.n	8017fe0 <uxr_framing_read_transport+0x44>
 8018084:	2600      	movs	r6, #0
 8018086:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801808a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801808c:	d9bf      	bls.n	801800e <uxr_framing_read_transport+0x72>
 801808e:	2102      	movs	r1, #2
 8018090:	2529      	movs	r5, #41	@ 0x29
 8018092:	e7c4      	b.n	801801e <uxr_framing_read_transport+0x82>
 8018094:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8018098:	b2ed      	uxtb	r5, r5
 801809a:	e796      	b.n	8017fca <uxr_framing_read_transport+0x2e>
 801809c:	30c30c31 	.word	0x30c30c31

080180a0 <uxr_read_framed_msg>:
 80180a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180a4:	461e      	mov	r6, r3
 80180a6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80180aa:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80180ae:	429d      	cmp	r5, r3
 80180b0:	b083      	sub	sp, #12
 80180b2:	4604      	mov	r4, r0
 80180b4:	4688      	mov	r8, r1
 80180b6:	4691      	mov	r9, r2
 80180b8:	f000 8188 	beq.w	80183cc <uxr_read_framed_msg+0x32c>
 80180bc:	7823      	ldrb	r3, [r4, #0]
 80180be:	4dc1      	ldr	r5, [pc, #772]	@ (80183c4 <uxr_read_framed_msg+0x324>)
 80180c0:	4fc1      	ldr	r7, [pc, #772]	@ (80183c8 <uxr_read_framed_msg+0x328>)
 80180c2:	2b07      	cmp	r3, #7
 80180c4:	d8fd      	bhi.n	80180c2 <uxr_read_framed_msg+0x22>
 80180c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80180ca:	0115      	.short	0x0115
 80180cc:	00d600f6 	.word	0x00d600f6
 80180d0:	009000b9 	.word	0x009000b9
 80180d4:	0030004d 	.word	0x0030004d
 80180d8:	0008      	.short	0x0008
 80180da:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80180de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80180e2:	4299      	cmp	r1, r3
 80180e4:	f000 814a 	beq.w	801837c <uxr_read_framed_msg+0x2dc>
 80180e8:	18e2      	adds	r2, r4, r3
 80180ea:	7892      	ldrb	r2, [r2, #2]
 80180ec:	2a7d      	cmp	r2, #125	@ 0x7d
 80180ee:	f000 8199 	beq.w	8018424 <uxr_read_framed_msg+0x384>
 80180f2:	3301      	adds	r3, #1
 80180f4:	0858      	lsrs	r0, r3, #1
 80180f6:	fba5 1000 	umull	r1, r0, r5, r0
 80180fa:	0880      	lsrs	r0, r0, #2
 80180fc:	212a      	movs	r1, #42	@ 0x2a
 80180fe:	fb01 3310 	mls	r3, r1, r0, r3
 8018102:	2a7e      	cmp	r2, #126	@ 0x7e
 8018104:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018108:	f000 8252 	beq.w	80185b0 <uxr_read_framed_msg+0x510>
 801810c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801810e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8018110:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8018114:	b29b      	uxth	r3, r3
 8018116:	2200      	movs	r2, #0
 8018118:	4299      	cmp	r1, r3
 801811a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801811c:	7022      	strb	r2, [r4, #0]
 801811e:	f000 8179 	beq.w	8018414 <uxr_read_framed_msg+0x374>
 8018122:	2000      	movs	r0, #0
 8018124:	b003      	add	sp, #12
 8018126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801812a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801812e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018132:	4299      	cmp	r1, r3
 8018134:	f000 8131 	beq.w	801839a <uxr_read_framed_msg+0x2fa>
 8018138:	18e2      	adds	r2, r4, r3
 801813a:	7890      	ldrb	r0, [r2, #2]
 801813c:	287d      	cmp	r0, #125	@ 0x7d
 801813e:	f000 8190 	beq.w	8018462 <uxr_read_framed_msg+0x3c2>
 8018142:	3301      	adds	r3, #1
 8018144:	085a      	lsrs	r2, r3, #1
 8018146:	fba5 1202 	umull	r1, r2, r5, r2
 801814a:	0892      	lsrs	r2, r2, #2
 801814c:	212a      	movs	r1, #42	@ 0x2a
 801814e:	fb01 3312 	mls	r3, r1, r2, r3
 8018152:	287e      	cmp	r0, #126	@ 0x7e
 8018154:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018158:	f000 821a 	beq.w	8018590 <uxr_read_framed_msg+0x4f0>
 801815c:	2307      	movs	r3, #7
 801815e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8018160:	7023      	strb	r3, [r4, #0]
 8018162:	e7ae      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 8018164:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018166:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801816a:	459e      	cmp	lr, r3
 801816c:	d938      	bls.n	80181e0 <uxr_read_framed_msg+0x140>
 801816e:	ee07 8a90 	vmov	s15, r8
 8018172:	212a      	movs	r1, #42	@ 0x2a
 8018174:	e020      	b.n	80181b8 <uxr_read_framed_msg+0x118>
 8018176:	f89b c002 	ldrb.w	ip, [fp, #2]
 801817a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801817e:	f000 80d4 	beq.w	801832a <uxr_read_framed_msg+0x28a>
 8018182:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018186:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801818a:	f000 8219 	beq.w	80185c0 <uxr_read_framed_msg+0x520>
 801818e:	f806 c003 	strb.w	ip, [r6, r3]
 8018192:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8018196:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8018198:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801819c:	ea8a 000c 	eor.w	r0, sl, ip
 80181a0:	b2c0      	uxtb	r0, r0
 80181a2:	3301      	adds	r3, #1
 80181a4:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80181a8:	b29b      	uxth	r3, r3
 80181aa:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80181ae:	4573      	cmp	r3, lr
 80181b0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80181b2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80181b4:	f080 8120 	bcs.w	80183f8 <uxr_read_framed_msg+0x358>
 80181b8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80181bc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80181c0:	f100 0c01 	add.w	ip, r0, #1
 80181c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80181c8:	fba5 8202 	umull	r8, r2, r5, r2
 80181cc:	0892      	lsrs	r2, r2, #2
 80181ce:	4582      	cmp	sl, r0
 80181d0:	eb04 0b00 	add.w	fp, r4, r0
 80181d4:	fb01 c212 	mls	r2, r1, r2, ip
 80181d8:	d1cd      	bne.n	8018176 <uxr_read_framed_msg+0xd6>
 80181da:	ee17 8a90 	vmov	r8, s15
 80181de:	459e      	cmp	lr, r3
 80181e0:	f040 8111 	bne.w	8018406 <uxr_read_framed_msg+0x366>
 80181e4:	2306      	movs	r3, #6
 80181e6:	7023      	strb	r3, [r4, #0]
 80181e8:	e76b      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 80181ea:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80181ee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80181f2:	4298      	cmp	r0, r3
 80181f4:	f000 80c2 	beq.w	801837c <uxr_read_framed_msg+0x2dc>
 80181f8:	18e2      	adds	r2, r4, r3
 80181fa:	7891      	ldrb	r1, [r2, #2]
 80181fc:	297d      	cmp	r1, #125	@ 0x7d
 80181fe:	f000 814c 	beq.w	801849a <uxr_read_framed_msg+0x3fa>
 8018202:	3301      	adds	r3, #1
 8018204:	085a      	lsrs	r2, r3, #1
 8018206:	fba5 0202 	umull	r0, r2, r5, r2
 801820a:	0892      	lsrs	r2, r2, #2
 801820c:	202a      	movs	r0, #42	@ 0x2a
 801820e:	fb00 3312 	mls	r3, r0, r2, r3
 8018212:	297e      	cmp	r1, #126	@ 0x7e
 8018214:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018218:	f000 81ca 	beq.w	80185b0 <uxr_read_framed_msg+0x510>
 801821c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801821e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018222:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018224:	b29b      	uxth	r3, r3
 8018226:	2000      	movs	r0, #0
 8018228:	428b      	cmp	r3, r1
 801822a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801822c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801822e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8018230:	f240 80df 	bls.w	80183f2 <uxr_read_framed_msg+0x352>
 8018234:	7020      	strb	r0, [r4, #0]
 8018236:	b003      	add	sp, #12
 8018238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018240:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018244:	4299      	cmp	r1, r3
 8018246:	f000 80a8 	beq.w	801839a <uxr_read_framed_msg+0x2fa>
 801824a:	18e2      	adds	r2, r4, r3
 801824c:	7890      	ldrb	r0, [r2, #2]
 801824e:	287d      	cmp	r0, #125	@ 0x7d
 8018250:	f000 8164 	beq.w	801851c <uxr_read_framed_msg+0x47c>
 8018254:	3301      	adds	r3, #1
 8018256:	085a      	lsrs	r2, r3, #1
 8018258:	fba5 1202 	umull	r1, r2, r5, r2
 801825c:	0892      	lsrs	r2, r2, #2
 801825e:	212a      	movs	r1, #42	@ 0x2a
 8018260:	fb01 3312 	mls	r3, r1, r2, r3
 8018264:	287e      	cmp	r0, #126	@ 0x7e
 8018266:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801826a:	f000 8191 	beq.w	8018590 <uxr_read_framed_msg+0x4f0>
 801826e:	2304      	movs	r3, #4
 8018270:	8620      	strh	r0, [r4, #48]	@ 0x30
 8018272:	7023      	strb	r3, [r4, #0]
 8018274:	e725      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 8018276:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801827a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801827e:	4290      	cmp	r0, r2
 8018280:	f000 80b3 	beq.w	80183ea <uxr_read_framed_msg+0x34a>
 8018284:	18a3      	adds	r3, r4, r2
 8018286:	7899      	ldrb	r1, [r3, #2]
 8018288:	297d      	cmp	r1, #125	@ 0x7d
 801828a:	f000 8164 	beq.w	8018556 <uxr_read_framed_msg+0x4b6>
 801828e:	3201      	adds	r2, #1
 8018290:	0850      	lsrs	r0, r2, #1
 8018292:	fba5 3000 	umull	r3, r0, r5, r0
 8018296:	0880      	lsrs	r0, r0, #2
 8018298:	232a      	movs	r3, #42	@ 0x2a
 801829a:	fb03 2210 	mls	r2, r3, r0, r2
 801829e:	297e      	cmp	r1, #126	@ 0x7e
 80182a0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80182a4:	f000 8188 	beq.w	80185b8 <uxr_read_framed_msg+0x518>
 80182a8:	7863      	ldrb	r3, [r4, #1]
 80182aa:	428b      	cmp	r3, r1
 80182ac:	bf0c      	ite	eq
 80182ae:	2303      	moveq	r3, #3
 80182b0:	2300      	movne	r3, #0
 80182b2:	7023      	strb	r3, [r4, #0]
 80182b4:	e705      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 80182b6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80182ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80182be:	2200      	movs	r2, #0
 80182c0:	4299      	cmp	r1, r3
 80182c2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80182c6:	d06c      	beq.n	80183a2 <uxr_read_framed_msg+0x302>
 80182c8:	18e2      	adds	r2, r4, r3
 80182ca:	7890      	ldrb	r0, [r2, #2]
 80182cc:	287d      	cmp	r0, #125	@ 0x7d
 80182ce:	f000 8101 	beq.w	80184d4 <uxr_read_framed_msg+0x434>
 80182d2:	3301      	adds	r3, #1
 80182d4:	085a      	lsrs	r2, r3, #1
 80182d6:	fba5 1202 	umull	r1, r2, r5, r2
 80182da:	0892      	lsrs	r2, r2, #2
 80182dc:	212a      	movs	r1, #42	@ 0x2a
 80182de:	fb01 3312 	mls	r3, r1, r2, r3
 80182e2:	287e      	cmp	r0, #126	@ 0x7e
 80182e4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80182e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80182ec:	d059      	beq.n	80183a2 <uxr_read_framed_msg+0x302>
 80182ee:	2302      	movs	r3, #2
 80182f0:	7023      	strb	r3, [r4, #0]
 80182f2:	e6e6      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 80182f4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80182f8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80182fc:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8018300:	1c51      	adds	r1, r2, #1
 8018302:	084b      	lsrs	r3, r1, #1
 8018304:	fba5 c303 	umull	ip, r3, r5, r3
 8018308:	089b      	lsrs	r3, r3, #2
 801830a:	fb0e 1313 	mls	r3, lr, r3, r1
 801830e:	4592      	cmp	sl, r2
 8018310:	eb04 0002 	add.w	r0, r4, r2
 8018314:	b2da      	uxtb	r2, r3
 8018316:	f43f af04 	beq.w	8018122 <uxr_read_framed_msg+0x82>
 801831a:	7883      	ldrb	r3, [r0, #2]
 801831c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018320:	2b7e      	cmp	r3, #126	@ 0x7e
 8018322:	d1ed      	bne.n	8018300 <uxr_read_framed_msg+0x260>
 8018324:	2301      	movs	r3, #1
 8018326:	7023      	strb	r3, [r4, #0]
 8018328:	e6cb      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 801832a:	f100 0c01 	add.w	ip, r0, #1
 801832e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018332:	fba5 8202 	umull	r8, r2, r5, r2
 8018336:	0892      	lsrs	r2, r2, #2
 8018338:	fb01 c212 	mls	r2, r1, r2, ip
 801833c:	eb04 0c02 	add.w	ip, r4, r2
 8018340:	b2d2      	uxtb	r2, r2
 8018342:	4592      	cmp	sl, r2
 8018344:	f100 0002 	add.w	r0, r0, #2
 8018348:	f43f af47 	beq.w	80181da <uxr_read_framed_msg+0x13a>
 801834c:	0842      	lsrs	r2, r0, #1
 801834e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8018352:	fba5 8202 	umull	r8, r2, r5, r2
 8018356:	0892      	lsrs	r2, r2, #2
 8018358:	fb01 0012 	mls	r0, r1, r2, r0
 801835c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8018360:	f08a 0c20 	eor.w	ip, sl, #32
 8018364:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8018368:	f47f af11 	bne.w	801818e <uxr_read_framed_msg+0xee>
 801836c:	459e      	cmp	lr, r3
 801836e:	ee17 8a90 	vmov	r8, s15
 8018372:	f43f af37 	beq.w	80181e4 <uxr_read_framed_msg+0x144>
 8018376:	2301      	movs	r3, #1
 8018378:	7023      	strb	r3, [r4, #0]
 801837a:	e6a2      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 801837c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801837e:	9300      	str	r3, [sp, #0]
 8018380:	2301      	movs	r3, #1
 8018382:	9301      	str	r3, [sp, #4]
 8018384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018386:	464a      	mov	r2, r9
 8018388:	4641      	mov	r1, r8
 801838a:	4620      	mov	r0, r4
 801838c:	f7ff fe06 	bl	8017f9c <uxr_framing_read_transport>
 8018390:	2800      	cmp	r0, #0
 8018392:	f43f aec6 	beq.w	8018122 <uxr_read_framed_msg+0x82>
 8018396:	7823      	ldrb	r3, [r4, #0]
 8018398:	e693      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 801839a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801839c:	9300      	str	r3, [sp, #0]
 801839e:	2302      	movs	r3, #2
 80183a0:	e7ef      	b.n	8018382 <uxr_read_framed_msg+0x2e2>
 80183a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183a4:	9300      	str	r3, [sp, #0]
 80183a6:	2304      	movs	r3, #4
 80183a8:	9301      	str	r3, [sp, #4]
 80183aa:	464a      	mov	r2, r9
 80183ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183ae:	4641      	mov	r1, r8
 80183b0:	4620      	mov	r0, r4
 80183b2:	f7ff fdf3 	bl	8017f9c <uxr_framing_read_transport>
 80183b6:	2800      	cmp	r0, #0
 80183b8:	d1ed      	bne.n	8018396 <uxr_read_framed_msg+0x2f6>
 80183ba:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80183be:	2b7e      	cmp	r3, #126	@ 0x7e
 80183c0:	d0e9      	beq.n	8018396 <uxr_read_framed_msg+0x2f6>
 80183c2:	e6ae      	b.n	8018122 <uxr_read_framed_msg+0x82>
 80183c4:	30c30c31 	.word	0x30c30c31
 80183c8:	0801c438 	.word	0x0801c438
 80183cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183ce:	9300      	str	r3, [sp, #0]
 80183d0:	2305      	movs	r3, #5
 80183d2:	9301      	str	r3, [sp, #4]
 80183d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183d6:	f7ff fde1 	bl	8017f9c <uxr_framing_read_transport>
 80183da:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80183de:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80183e2:	429a      	cmp	r2, r3
 80183e4:	f43f ae9d 	beq.w	8018122 <uxr_read_framed_msg+0x82>
 80183e8:	e668      	b.n	80180bc <uxr_read_framed_msg+0x1c>
 80183ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80183ec:	9300      	str	r3, [sp, #0]
 80183ee:	2303      	movs	r3, #3
 80183f0:	e7c7      	b.n	8018382 <uxr_read_framed_msg+0x2e2>
 80183f2:	2305      	movs	r3, #5
 80183f4:	7023      	strb	r3, [r4, #0]
 80183f6:	e664      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 80183f8:	ee17 8a90 	vmov	r8, s15
 80183fc:	f43f aef2 	beq.w	80181e4 <uxr_read_framed_msg+0x144>
 8018400:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8018404:	d08e      	beq.n	8018324 <uxr_read_framed_msg+0x284>
 8018406:	ebae 0303 	sub.w	r3, lr, r3
 801840a:	3302      	adds	r3, #2
 801840c:	9301      	str	r3, [sp, #4]
 801840e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018410:	9300      	str	r3, [sp, #0]
 8018412:	e7b7      	b.n	8018384 <uxr_read_framed_msg+0x2e4>
 8018414:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018416:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801841a:	7013      	strb	r3, [r2, #0]
 801841c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801841e:	b003      	add	sp, #12
 8018420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018424:	f103 0c01 	add.w	ip, r3, #1
 8018428:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801842c:	fba5 0202 	umull	r0, r2, r5, r2
 8018430:	0892      	lsrs	r2, r2, #2
 8018432:	202a      	movs	r0, #42	@ 0x2a
 8018434:	fb00 c212 	mls	r2, r0, r2, ip
 8018438:	fa5f fc82 	uxtb.w	ip, r2
 801843c:	4561      	cmp	r1, ip
 801843e:	d09d      	beq.n	801837c <uxr_read_framed_msg+0x2dc>
 8018440:	3302      	adds	r3, #2
 8018442:	4422      	add	r2, r4
 8018444:	0859      	lsrs	r1, r3, #1
 8018446:	7892      	ldrb	r2, [r2, #2]
 8018448:	fba5 c101 	umull	ip, r1, r5, r1
 801844c:	0889      	lsrs	r1, r1, #2
 801844e:	fb00 3311 	mls	r3, r0, r1, r3
 8018452:	2a7e      	cmp	r2, #126	@ 0x7e
 8018454:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018458:	f000 80aa 	beq.w	80185b0 <uxr_read_framed_msg+0x510>
 801845c:	f082 0220 	eor.w	r2, r2, #32
 8018460:	e654      	b.n	801810c <uxr_read_framed_msg+0x6c>
 8018462:	1c58      	adds	r0, r3, #1
 8018464:	0842      	lsrs	r2, r0, #1
 8018466:	fba5 c202 	umull	ip, r2, r5, r2
 801846a:	0892      	lsrs	r2, r2, #2
 801846c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018470:	fb0c 0212 	mls	r2, ip, r2, r0
 8018474:	b2d0      	uxtb	r0, r2
 8018476:	4281      	cmp	r1, r0
 8018478:	d08f      	beq.n	801839a <uxr_read_framed_msg+0x2fa>
 801847a:	4422      	add	r2, r4
 801847c:	3302      	adds	r3, #2
 801847e:	7890      	ldrb	r0, [r2, #2]
 8018480:	085a      	lsrs	r2, r3, #1
 8018482:	fba5 1202 	umull	r1, r2, r5, r2
 8018486:	0892      	lsrs	r2, r2, #2
 8018488:	fb0c 3312 	mls	r3, ip, r2, r3
 801848c:	287e      	cmp	r0, #126	@ 0x7e
 801848e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018492:	d07d      	beq.n	8018590 <uxr_read_framed_msg+0x4f0>
 8018494:	f080 0020 	eor.w	r0, r0, #32
 8018498:	e660      	b.n	801815c <uxr_read_framed_msg+0xbc>
 801849a:	1c59      	adds	r1, r3, #1
 801849c:	084a      	lsrs	r2, r1, #1
 801849e:	fba5 c202 	umull	ip, r2, r5, r2
 80184a2:	0892      	lsrs	r2, r2, #2
 80184a4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80184a8:	fb0c 1212 	mls	r2, ip, r2, r1
 80184ac:	b2d1      	uxtb	r1, r2
 80184ae:	4288      	cmp	r0, r1
 80184b0:	f43f af64 	beq.w	801837c <uxr_read_framed_msg+0x2dc>
 80184b4:	4422      	add	r2, r4
 80184b6:	3302      	adds	r3, #2
 80184b8:	7891      	ldrb	r1, [r2, #2]
 80184ba:	085a      	lsrs	r2, r3, #1
 80184bc:	fba5 0202 	umull	r0, r2, r5, r2
 80184c0:	0892      	lsrs	r2, r2, #2
 80184c2:	fb0c 3312 	mls	r3, ip, r2, r3
 80184c6:	297e      	cmp	r1, #126	@ 0x7e
 80184c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80184cc:	d070      	beq.n	80185b0 <uxr_read_framed_msg+0x510>
 80184ce:	f081 0120 	eor.w	r1, r1, #32
 80184d2:	e6a3      	b.n	801821c <uxr_read_framed_msg+0x17c>
 80184d4:	f103 0c01 	add.w	ip, r3, #1
 80184d8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80184dc:	fba5 0202 	umull	r0, r2, r5, r2
 80184e0:	0892      	lsrs	r2, r2, #2
 80184e2:	202a      	movs	r0, #42	@ 0x2a
 80184e4:	fb00 c212 	mls	r2, r0, r2, ip
 80184e8:	fa5f fc82 	uxtb.w	ip, r2
 80184ec:	4561      	cmp	r1, ip
 80184ee:	f43f af58 	beq.w	80183a2 <uxr_read_framed_msg+0x302>
 80184f2:	4422      	add	r2, r4
 80184f4:	3302      	adds	r3, #2
 80184f6:	7891      	ldrb	r1, [r2, #2]
 80184f8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80184fc:	085a      	lsrs	r2, r3, #1
 80184fe:	fba5 c202 	umull	ip, r2, r5, r2
 8018502:	0892      	lsrs	r2, r2, #2
 8018504:	fb00 3312 	mls	r3, r0, r2, r3
 8018508:	297e      	cmp	r1, #126	@ 0x7e
 801850a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801850e:	f43f af48 	beq.w	80183a2 <uxr_read_framed_msg+0x302>
 8018512:	f081 0120 	eor.w	r1, r1, #32
 8018516:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801851a:	e6e8      	b.n	80182ee <uxr_read_framed_msg+0x24e>
 801851c:	1c58      	adds	r0, r3, #1
 801851e:	0842      	lsrs	r2, r0, #1
 8018520:	fba5 c202 	umull	ip, r2, r5, r2
 8018524:	0892      	lsrs	r2, r2, #2
 8018526:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801852a:	fb0c 0212 	mls	r2, ip, r2, r0
 801852e:	b2d0      	uxtb	r0, r2
 8018530:	4281      	cmp	r1, r0
 8018532:	f43f af32 	beq.w	801839a <uxr_read_framed_msg+0x2fa>
 8018536:	4422      	add	r2, r4
 8018538:	3302      	adds	r3, #2
 801853a:	7890      	ldrb	r0, [r2, #2]
 801853c:	085a      	lsrs	r2, r3, #1
 801853e:	fba5 1202 	umull	r1, r2, r5, r2
 8018542:	0892      	lsrs	r2, r2, #2
 8018544:	fb0c 3312 	mls	r3, ip, r2, r3
 8018548:	287e      	cmp	r0, #126	@ 0x7e
 801854a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801854e:	d01f      	beq.n	8018590 <uxr_read_framed_msg+0x4f0>
 8018550:	f080 0020 	eor.w	r0, r0, #32
 8018554:	e68b      	b.n	801826e <uxr_read_framed_msg+0x1ce>
 8018556:	1c51      	adds	r1, r2, #1
 8018558:	084b      	lsrs	r3, r1, #1
 801855a:	fba5 c303 	umull	ip, r3, r5, r3
 801855e:	089b      	lsrs	r3, r3, #2
 8018560:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018564:	fb0c 1313 	mls	r3, ip, r3, r1
 8018568:	b2d9      	uxtb	r1, r3
 801856a:	4288      	cmp	r0, r1
 801856c:	f43f af3d 	beq.w	80183ea <uxr_read_framed_msg+0x34a>
 8018570:	3202      	adds	r2, #2
 8018572:	4423      	add	r3, r4
 8018574:	0850      	lsrs	r0, r2, #1
 8018576:	789b      	ldrb	r3, [r3, #2]
 8018578:	fba5 1000 	umull	r1, r0, r5, r0
 801857c:	0880      	lsrs	r0, r0, #2
 801857e:	fb0c 2210 	mls	r2, ip, r0, r2
 8018582:	2b7e      	cmp	r3, #126	@ 0x7e
 8018584:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018588:	d016      	beq.n	80185b8 <uxr_read_framed_msg+0x518>
 801858a:	f083 0120 	eor.w	r1, r3, #32
 801858e:	e68b      	b.n	80182a8 <uxr_read_framed_msg+0x208>
 8018590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018592:	9300      	str	r3, [sp, #0]
 8018594:	2302      	movs	r3, #2
 8018596:	9301      	str	r3, [sp, #4]
 8018598:	464a      	mov	r2, r9
 801859a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801859c:	4641      	mov	r1, r8
 801859e:	4620      	mov	r0, r4
 80185a0:	f7ff fcfc 	bl	8017f9c <uxr_framing_read_transport>
 80185a4:	2800      	cmp	r0, #0
 80185a6:	f47f aef6 	bne.w	8018396 <uxr_read_framed_msg+0x2f6>
 80185aa:	2301      	movs	r3, #1
 80185ac:	7023      	strb	r3, [r4, #0]
 80185ae:	e588      	b.n	80180c2 <uxr_read_framed_msg+0x22>
 80185b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80185b2:	9300      	str	r3, [sp, #0]
 80185b4:	2301      	movs	r3, #1
 80185b6:	e7ee      	b.n	8018596 <uxr_read_framed_msg+0x4f6>
 80185b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80185ba:	9300      	str	r3, [sp, #0]
 80185bc:	2303      	movs	r3, #3
 80185be:	e7ea      	b.n	8018596 <uxr_read_framed_msg+0x4f6>
 80185c0:	ee17 8a90 	vmov	r8, s15
 80185c4:	e6ae      	b.n	8018324 <uxr_read_framed_msg+0x284>
 80185c6:	bf00      	nop

080185c8 <rcl_get_default_domain_id>:
 80185c8:	b530      	push	{r4, r5, lr}
 80185ca:	b083      	sub	sp, #12
 80185cc:	2300      	movs	r3, #0
 80185ce:	9300      	str	r3, [sp, #0]
 80185d0:	b1d0      	cbz	r0, 8018608 <rcl_get_default_domain_id+0x40>
 80185d2:	4604      	mov	r4, r0
 80185d4:	4669      	mov	r1, sp
 80185d6:	4815      	ldr	r0, [pc, #84]	@ (801862c <rcl_get_default_domain_id+0x64>)
 80185d8:	f7fc fc1e 	bl	8014e18 <rcutils_get_env>
 80185dc:	4602      	mov	r2, r0
 80185de:	b110      	cbz	r0, 80185e6 <rcl_get_default_domain_id+0x1e>
 80185e0:	2001      	movs	r0, #1
 80185e2:	b003      	add	sp, #12
 80185e4:	bd30      	pop	{r4, r5, pc}
 80185e6:	9b00      	ldr	r3, [sp, #0]
 80185e8:	b18b      	cbz	r3, 801860e <rcl_get_default_domain_id+0x46>
 80185ea:	7818      	ldrb	r0, [r3, #0]
 80185ec:	2800      	cmp	r0, #0
 80185ee:	d0f8      	beq.n	80185e2 <rcl_get_default_domain_id+0x1a>
 80185f0:	a901      	add	r1, sp, #4
 80185f2:	4618      	mov	r0, r3
 80185f4:	9201      	str	r2, [sp, #4]
 80185f6:	f000 ffb5 	bl	8019564 <strtoul>
 80185fa:	4605      	mov	r5, r0
 80185fc:	b150      	cbz	r0, 8018614 <rcl_get_default_domain_id+0x4c>
 80185fe:	1c43      	adds	r3, r0, #1
 8018600:	d00d      	beq.n	801861e <rcl_get_default_domain_id+0x56>
 8018602:	6025      	str	r5, [r4, #0]
 8018604:	2000      	movs	r0, #0
 8018606:	e7ec      	b.n	80185e2 <rcl_get_default_domain_id+0x1a>
 8018608:	200b      	movs	r0, #11
 801860a:	b003      	add	sp, #12
 801860c:	bd30      	pop	{r4, r5, pc}
 801860e:	4618      	mov	r0, r3
 8018610:	b003      	add	sp, #12
 8018612:	bd30      	pop	{r4, r5, pc}
 8018614:	9b01      	ldr	r3, [sp, #4]
 8018616:	781b      	ldrb	r3, [r3, #0]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d0f2      	beq.n	8018602 <rcl_get_default_domain_id+0x3a>
 801861c:	e7e0      	b.n	80185e0 <rcl_get_default_domain_id+0x18>
 801861e:	f001 fa5d 	bl	8019adc <__errno>
 8018622:	6803      	ldr	r3, [r0, #0]
 8018624:	2b22      	cmp	r3, #34	@ 0x22
 8018626:	d1ec      	bne.n	8018602 <rcl_get_default_domain_id+0x3a>
 8018628:	e7da      	b.n	80185e0 <rcl_get_default_domain_id+0x18>
 801862a:	bf00      	nop
 801862c:	0801c638 	.word	0x0801c638

08018630 <rcl_expand_topic_name>:
 8018630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018634:	b08b      	sub	sp, #44	@ 0x2c
 8018636:	9306      	str	r3, [sp, #24]
 8018638:	2800      	cmp	r0, #0
 801863a:	f000 80ad 	beq.w	8018798 <rcl_expand_topic_name+0x168>
 801863e:	460e      	mov	r6, r1
 8018640:	2900      	cmp	r1, #0
 8018642:	f000 80a9 	beq.w	8018798 <rcl_expand_topic_name+0x168>
 8018646:	4617      	mov	r7, r2
 8018648:	2a00      	cmp	r2, #0
 801864a:	f000 80a5 	beq.w	8018798 <rcl_expand_topic_name+0x168>
 801864e:	2b00      	cmp	r3, #0
 8018650:	f000 80a2 	beq.w	8018798 <rcl_expand_topic_name+0x168>
 8018654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018656:	2b00      	cmp	r3, #0
 8018658:	f000 809e 	beq.w	8018798 <rcl_expand_topic_name+0x168>
 801865c:	2200      	movs	r2, #0
 801865e:	a909      	add	r1, sp, #36	@ 0x24
 8018660:	4680      	mov	r8, r0
 8018662:	f000 f9fb 	bl	8018a5c <rcl_validate_topic_name>
 8018666:	4604      	mov	r4, r0
 8018668:	2800      	cmp	r0, #0
 801866a:	f040 8096 	bne.w	801879a <rcl_expand_topic_name+0x16a>
 801866e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018670:	2b00      	cmp	r3, #0
 8018672:	f040 809a 	bne.w	80187aa <rcl_expand_topic_name+0x17a>
 8018676:	4602      	mov	r2, r0
 8018678:	a909      	add	r1, sp, #36	@ 0x24
 801867a:	4630      	mov	r0, r6
 801867c:	f7fd f82a 	bl	80156d4 <rmw_validate_node_name>
 8018680:	2800      	cmp	r0, #0
 8018682:	f040 808e 	bne.w	80187a2 <rcl_expand_topic_name+0x172>
 8018686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018688:	2a00      	cmp	r2, #0
 801868a:	f040 8093 	bne.w	80187b4 <rcl_expand_topic_name+0x184>
 801868e:	a909      	add	r1, sp, #36	@ 0x24
 8018690:	4638      	mov	r0, r7
 8018692:	f7fd f801 	bl	8015698 <rmw_validate_namespace>
 8018696:	2800      	cmp	r0, #0
 8018698:	f040 8083 	bne.w	80187a2 <rcl_expand_topic_name+0x172>
 801869c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801869e:	2c00      	cmp	r4, #0
 80186a0:	f040 80ed 	bne.w	801887e <rcl_expand_topic_name+0x24e>
 80186a4:	217b      	movs	r1, #123	@ 0x7b
 80186a6:	4640      	mov	r0, r8
 80186a8:	f001 f97e 	bl	80199a8 <strchr>
 80186ac:	f898 3000 	ldrb.w	r3, [r8]
 80186b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80186b2:	4605      	mov	r5, r0
 80186b4:	f000 809e 	beq.w	80187f4 <rcl_expand_topic_name+0x1c4>
 80186b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80186ba:	f040 80a2 	bne.w	8018802 <rcl_expand_topic_name+0x1d2>
 80186be:	4638      	mov	r0, r7
 80186c0:	f7e7 fd9e 	bl	8000200 <strlen>
 80186c4:	4a82      	ldr	r2, [pc, #520]	@ (80188d0 <rcl_expand_topic_name+0x2a0>)
 80186c6:	4b83      	ldr	r3, [pc, #524]	@ (80188d4 <rcl_expand_topic_name+0x2a4>)
 80186c8:	2801      	cmp	r0, #1
 80186ca:	bf18      	it	ne
 80186cc:	4613      	movne	r3, r2
 80186ce:	9302      	str	r3, [sp, #8]
 80186d0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80186d2:	9300      	str	r3, [sp, #0]
 80186d4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80186d8:	f108 0301 	add.w	r3, r8, #1
 80186dc:	9305      	str	r3, [sp, #20]
 80186de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80186e2:	9301      	str	r3, [sp, #4]
 80186e4:	ab14      	add	r3, sp, #80	@ 0x50
 80186e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80186e8:	f7fc fbbe 	bl	8014e68 <rcutils_format_string_limit>
 80186ec:	4682      	mov	sl, r0
 80186ee:	2800      	cmp	r0, #0
 80186f0:	f000 80c7 	beq.w	8018882 <rcl_expand_topic_name+0x252>
 80186f4:	2d00      	cmp	r5, #0
 80186f6:	f000 80a2 	beq.w	801883e <rcl_expand_topic_name+0x20e>
 80186fa:	217b      	movs	r1, #123	@ 0x7b
 80186fc:	f001 f954 	bl	80199a8 <strchr>
 8018700:	46d1      	mov	r9, sl
 8018702:	4605      	mov	r5, r0
 8018704:	9407      	str	r4, [sp, #28]
 8018706:	46d3      	mov	fp, sl
 8018708:	464c      	mov	r4, r9
 801870a:	2d00      	cmp	r5, #0
 801870c:	f000 80be 	beq.w	801888c <rcl_expand_topic_name+0x25c>
 8018710:	217d      	movs	r1, #125	@ 0x7d
 8018712:	4620      	mov	r0, r4
 8018714:	f001 f948 	bl	80199a8 <strchr>
 8018718:	eba0 0905 	sub.w	r9, r0, r5
 801871c:	f109 0a01 	add.w	sl, r9, #1
 8018720:	486d      	ldr	r0, [pc, #436]	@ (80188d8 <rcl_expand_topic_name+0x2a8>)
 8018722:	4652      	mov	r2, sl
 8018724:	4629      	mov	r1, r5
 8018726:	f001 f94c 	bl	80199c2 <strncmp>
 801872a:	2800      	cmp	r0, #0
 801872c:	d067      	beq.n	80187fe <rcl_expand_topic_name+0x1ce>
 801872e:	486b      	ldr	r0, [pc, #428]	@ (80188dc <rcl_expand_topic_name+0x2ac>)
 8018730:	4652      	mov	r2, sl
 8018732:	4629      	mov	r1, r5
 8018734:	f001 f945 	bl	80199c2 <strncmp>
 8018738:	b130      	cbz	r0, 8018748 <rcl_expand_topic_name+0x118>
 801873a:	4869      	ldr	r0, [pc, #420]	@ (80188e0 <rcl_expand_topic_name+0x2b0>)
 801873c:	4652      	mov	r2, sl
 801873e:	4629      	mov	r1, r5
 8018740:	f001 f93f 	bl	80199c2 <strncmp>
 8018744:	2800      	cmp	r0, #0
 8018746:	d137      	bne.n	80187b8 <rcl_expand_topic_name+0x188>
 8018748:	46b9      	mov	r9, r7
 801874a:	ab16      	add	r3, sp, #88	@ 0x58
 801874c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018750:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018754:	ab14      	add	r3, sp, #80	@ 0x50
 8018756:	4628      	mov	r0, r5
 8018758:	cb0c      	ldmia	r3, {r2, r3}
 801875a:	4651      	mov	r1, sl
 801875c:	f7fc fcc0 	bl	80150e0 <rcutils_strndup>
 8018760:	4605      	mov	r5, r0
 8018762:	2800      	cmp	r0, #0
 8018764:	f000 809c 	beq.w	80188a0 <rcl_expand_topic_name+0x270>
 8018768:	464a      	mov	r2, r9
 801876a:	4620      	mov	r0, r4
 801876c:	ab14      	add	r3, sp, #80	@ 0x50
 801876e:	4629      	mov	r1, r5
 8018770:	f7fc fbb4 	bl	8014edc <rcutils_repl_str>
 8018774:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018776:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018778:	4604      	mov	r4, r0
 801877a:	4628      	mov	r0, r5
 801877c:	4798      	blx	r3
 801877e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018780:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018782:	4658      	mov	r0, fp
 8018784:	4798      	blx	r3
 8018786:	2c00      	cmp	r4, #0
 8018788:	d07b      	beq.n	8018882 <rcl_expand_topic_name+0x252>
 801878a:	217b      	movs	r1, #123	@ 0x7b
 801878c:	4620      	mov	r0, r4
 801878e:	f001 f90b 	bl	80199a8 <strchr>
 8018792:	46a3      	mov	fp, r4
 8018794:	4605      	mov	r5, r0
 8018796:	e7b8      	b.n	801870a <rcl_expand_topic_name+0xda>
 8018798:	240b      	movs	r4, #11
 801879a:	4620      	mov	r0, r4
 801879c:	b00b      	add	sp, #44	@ 0x2c
 801879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187a2:	f7f9 fce7 	bl	8012174 <rcl_convert_rmw_ret_to_rcl_ret>
 80187a6:	4604      	mov	r4, r0
 80187a8:	e7f7      	b.n	801879a <rcl_expand_topic_name+0x16a>
 80187aa:	2467      	movs	r4, #103	@ 0x67
 80187ac:	4620      	mov	r0, r4
 80187ae:	b00b      	add	sp, #44	@ 0x2c
 80187b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b4:	24c9      	movs	r4, #201	@ 0xc9
 80187b6:	e7f0      	b.n	801879a <rcl_expand_topic_name+0x16a>
 80187b8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80187bc:	9806      	ldr	r0, [sp, #24]
 80187be:	1c69      	adds	r1, r5, #1
 80187c0:	f7fc fda8 	bl	8015314 <rcutils_string_map_getn>
 80187c4:	4681      	mov	r9, r0
 80187c6:	2800      	cmp	r0, #0
 80187c8:	d1bf      	bne.n	801874a <rcl_expand_topic_name+0x11a>
 80187ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80187cc:	aa16      	add	r2, sp, #88	@ 0x58
 80187ce:	6018      	str	r0, [r3, #0]
 80187d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80187d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80187d6:	ab14      	add	r3, sp, #80	@ 0x50
 80187d8:	cb0c      	ldmia	r3, {r2, r3}
 80187da:	4651      	mov	r1, sl
 80187dc:	4628      	mov	r0, r5
 80187de:	f7fc fc7f 	bl	80150e0 <rcutils_strndup>
 80187e2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80187e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80187e6:	4798      	blx	r3
 80187e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80187ea:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80187ec:	4658      	mov	r0, fp
 80187ee:	2469      	movs	r4, #105	@ 0x69
 80187f0:	4798      	blx	r3
 80187f2:	e7d2      	b.n	801879a <rcl_expand_topic_name+0x16a>
 80187f4:	2800      	cmp	r0, #0
 80187f6:	d05b      	beq.n	80188b0 <rcl_expand_topic_name+0x280>
 80187f8:	46c1      	mov	r9, r8
 80187fa:	46a2      	mov	sl, r4
 80187fc:	e782      	b.n	8018704 <rcl_expand_topic_name+0xd4>
 80187fe:	46b1      	mov	r9, r6
 8018800:	e7a3      	b.n	801874a <rcl_expand_topic_name+0x11a>
 8018802:	2800      	cmp	r0, #0
 8018804:	d1f8      	bne.n	80187f8 <rcl_expand_topic_name+0x1c8>
 8018806:	4638      	mov	r0, r7
 8018808:	f7e7 fcfa 	bl	8000200 <strlen>
 801880c:	4a35      	ldr	r2, [pc, #212]	@ (80188e4 <rcl_expand_topic_name+0x2b4>)
 801880e:	4b36      	ldr	r3, [pc, #216]	@ (80188e8 <rcl_expand_topic_name+0x2b8>)
 8018810:	f8cd 8010 	str.w	r8, [sp, #16]
 8018814:	2801      	cmp	r0, #1
 8018816:	bf18      	it	ne
 8018818:	4613      	movne	r3, r2
 801881a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801881e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018822:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018824:	9703      	str	r7, [sp, #12]
 8018826:	9200      	str	r2, [sp, #0]
 8018828:	ab14      	add	r3, sp, #80	@ 0x50
 801882a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801882c:	f7fc fb1c 	bl	8014e68 <rcutils_format_string_limit>
 8018830:	4682      	mov	sl, r0
 8018832:	4653      	mov	r3, sl
 8018834:	b32b      	cbz	r3, 8018882 <rcl_expand_topic_name+0x252>
 8018836:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018838:	f8c3 a000 	str.w	sl, [r3]
 801883c:	e7ad      	b.n	801879a <rcl_expand_topic_name+0x16a>
 801883e:	f89a 3000 	ldrb.w	r3, [sl]
 8018842:	2b2f      	cmp	r3, #47	@ 0x2f
 8018844:	d0f7      	beq.n	8018836 <rcl_expand_topic_name+0x206>
 8018846:	4638      	mov	r0, r7
 8018848:	f7e7 fcda 	bl	8000200 <strlen>
 801884c:	4a25      	ldr	r2, [pc, #148]	@ (80188e4 <rcl_expand_topic_name+0x2b4>)
 801884e:	4b26      	ldr	r3, [pc, #152]	@ (80188e8 <rcl_expand_topic_name+0x2b8>)
 8018850:	f8cd a010 	str.w	sl, [sp, #16]
 8018854:	2801      	cmp	r0, #1
 8018856:	bf18      	it	ne
 8018858:	4613      	movne	r3, r2
 801885a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801885e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018862:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018864:	9703      	str	r7, [sp, #12]
 8018866:	9200      	str	r2, [sp, #0]
 8018868:	ab14      	add	r3, sp, #80	@ 0x50
 801886a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801886c:	f7fc fafc 	bl	8014e68 <rcutils_format_string_limit>
 8018870:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018872:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018874:	4605      	mov	r5, r0
 8018876:	4650      	mov	r0, sl
 8018878:	4798      	blx	r3
 801887a:	46aa      	mov	sl, r5
 801887c:	e7d9      	b.n	8018832 <rcl_expand_topic_name+0x202>
 801887e:	24ca      	movs	r4, #202	@ 0xca
 8018880:	e78b      	b.n	801879a <rcl_expand_topic_name+0x16a>
 8018882:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018884:	2300      	movs	r3, #0
 8018886:	6013      	str	r3, [r2, #0]
 8018888:	240a      	movs	r4, #10
 801888a:	e786      	b.n	801879a <rcl_expand_topic_name+0x16a>
 801888c:	465b      	mov	r3, fp
 801888e:	9c07      	ldr	r4, [sp, #28]
 8018890:	46da      	mov	sl, fp
 8018892:	2b00      	cmp	r3, #0
 8018894:	d1d3      	bne.n	801883e <rcl_expand_topic_name+0x20e>
 8018896:	f898 3000 	ldrb.w	r3, [r8]
 801889a:	2b2f      	cmp	r3, #47	@ 0x2f
 801889c:	d0cb      	beq.n	8018836 <rcl_expand_topic_name+0x206>
 801889e:	e7b2      	b.n	8018806 <rcl_expand_topic_name+0x1d6>
 80188a0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80188a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80188a6:	6015      	str	r5, [r2, #0]
 80188a8:	4658      	mov	r0, fp
 80188aa:	4798      	blx	r3
 80188ac:	240a      	movs	r4, #10
 80188ae:	e774      	b.n	801879a <rcl_expand_topic_name+0x16a>
 80188b0:	ab17      	add	r3, sp, #92	@ 0x5c
 80188b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80188b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80188ba:	ab14      	add	r3, sp, #80	@ 0x50
 80188bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80188be:	4640      	mov	r0, r8
 80188c0:	f7fc fbec 	bl	801509c <rcutils_strdup>
 80188c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80188c6:	2800      	cmp	r0, #0
 80188c8:	6018      	str	r0, [r3, #0]
 80188ca:	bf08      	it	eq
 80188cc:	240a      	moveq	r4, #10
 80188ce:	e764      	b.n	801879a <rcl_expand_topic_name+0x16a>
 80188d0:	0801c648 	.word	0x0801c648
 80188d4:	0801b7b8 	.word	0x0801b7b8
 80188d8:	0801c650 	.word	0x0801c650
 80188dc:	0801c658 	.word	0x0801c658
 80188e0:	0801c660 	.word	0x0801c660
 80188e4:	0801be4c 	.word	0x0801be4c
 80188e8:	0801b7c8 	.word	0x0801b7c8

080188ec <rcl_get_default_topic_name_substitutions>:
 80188ec:	2800      	cmp	r0, #0
 80188ee:	bf0c      	ite	eq
 80188f0:	200b      	moveq	r0, #11
 80188f2:	2000      	movne	r0, #0
 80188f4:	4770      	bx	lr
 80188f6:	bf00      	nop

080188f8 <rcl_get_zero_initialized_guard_condition>:
 80188f8:	4a03      	ldr	r2, [pc, #12]	@ (8018908 <rcl_get_zero_initialized_guard_condition+0x10>)
 80188fa:	4603      	mov	r3, r0
 80188fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018900:	e883 0003 	stmia.w	r3, {r0, r1}
 8018904:	4618      	mov	r0, r3
 8018906:	4770      	bx	lr
 8018908:	0801c66c 	.word	0x0801c66c

0801890c <rcl_guard_condition_init_from_rmw>:
 801890c:	b082      	sub	sp, #8
 801890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018912:	b086      	sub	sp, #24
 8018914:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018918:	4604      	mov	r4, r0
 801891a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801891e:	460e      	mov	r6, r1
 8018920:	4617      	mov	r7, r2
 8018922:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018926:	f10d 0e04 	add.w	lr, sp, #4
 801892a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801892e:	f8dc 3000 	ldr.w	r3, [ip]
 8018932:	f8ce 3000 	str.w	r3, [lr]
 8018936:	a801      	add	r0, sp, #4
 8018938:	f7f2 ffea 	bl	800b910 <rcutils_allocator_is_valid>
 801893c:	b350      	cbz	r0, 8018994 <rcl_guard_condition_init_from_rmw+0x88>
 801893e:	b34c      	cbz	r4, 8018994 <rcl_guard_condition_init_from_rmw+0x88>
 8018940:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018944:	f1b8 0f00 	cmp.w	r8, #0
 8018948:	d11e      	bne.n	8018988 <rcl_guard_condition_init_from_rmw+0x7c>
 801894a:	b31f      	cbz	r7, 8018994 <rcl_guard_condition_init_from_rmw+0x88>
 801894c:	4638      	mov	r0, r7
 801894e:	f7f9 fc2f 	bl	80121b0 <rcl_context_is_valid>
 8018952:	b328      	cbz	r0, 80189a0 <rcl_guard_condition_init_from_rmw+0x94>
 8018954:	9b01      	ldr	r3, [sp, #4]
 8018956:	9905      	ldr	r1, [sp, #20]
 8018958:	201c      	movs	r0, #28
 801895a:	4798      	blx	r3
 801895c:	4605      	mov	r5, r0
 801895e:	6060      	str	r0, [r4, #4]
 8018960:	b358      	cbz	r0, 80189ba <rcl_guard_condition_init_from_rmw+0xae>
 8018962:	b1fe      	cbz	r6, 80189a4 <rcl_guard_condition_init_from_rmw+0x98>
 8018964:	6006      	str	r6, [r0, #0]
 8018966:	f880 8004 	strb.w	r8, [r0, #4]
 801896a:	ac01      	add	r4, sp, #4
 801896c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801896e:	f105 0c08 	add.w	ip, r5, #8
 8018972:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018976:	6823      	ldr	r3, [r4, #0]
 8018978:	f8cc 3000 	str.w	r3, [ip]
 801897c:	2000      	movs	r0, #0
 801897e:	b006      	add	sp, #24
 8018980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018984:	b002      	add	sp, #8
 8018986:	4770      	bx	lr
 8018988:	2064      	movs	r0, #100	@ 0x64
 801898a:	b006      	add	sp, #24
 801898c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018990:	b002      	add	sp, #8
 8018992:	4770      	bx	lr
 8018994:	200b      	movs	r0, #11
 8018996:	b006      	add	sp, #24
 8018998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801899c:	b002      	add	sp, #8
 801899e:	4770      	bx	lr
 80189a0:	2065      	movs	r0, #101	@ 0x65
 80189a2:	e7f2      	b.n	801898a <rcl_guard_condition_init_from_rmw+0x7e>
 80189a4:	6838      	ldr	r0, [r7, #0]
 80189a6:	3028      	adds	r0, #40	@ 0x28
 80189a8:	f000 fa3a 	bl	8018e20 <rmw_create_guard_condition>
 80189ac:	6028      	str	r0, [r5, #0]
 80189ae:	6865      	ldr	r5, [r4, #4]
 80189b0:	682e      	ldr	r6, [r5, #0]
 80189b2:	b126      	cbz	r6, 80189be <rcl_guard_condition_init_from_rmw+0xb2>
 80189b4:	2301      	movs	r3, #1
 80189b6:	712b      	strb	r3, [r5, #4]
 80189b8:	e7d7      	b.n	801896a <rcl_guard_condition_init_from_rmw+0x5e>
 80189ba:	200a      	movs	r0, #10
 80189bc:	e7e5      	b.n	801898a <rcl_guard_condition_init_from_rmw+0x7e>
 80189be:	4628      	mov	r0, r5
 80189c0:	9b02      	ldr	r3, [sp, #8]
 80189c2:	9905      	ldr	r1, [sp, #20]
 80189c4:	4798      	blx	r3
 80189c6:	6066      	str	r6, [r4, #4]
 80189c8:	2001      	movs	r0, #1
 80189ca:	e7de      	b.n	801898a <rcl_guard_condition_init_from_rmw+0x7e>

080189cc <rcl_guard_condition_fini>:
 80189cc:	b570      	push	{r4, r5, r6, lr}
 80189ce:	b082      	sub	sp, #8
 80189d0:	b1f0      	cbz	r0, 8018a10 <rcl_guard_condition_fini+0x44>
 80189d2:	6843      	ldr	r3, [r0, #4]
 80189d4:	4604      	mov	r4, r0
 80189d6:	b163      	cbz	r3, 80189f2 <rcl_guard_condition_fini+0x26>
 80189d8:	6818      	ldr	r0, [r3, #0]
 80189da:	68de      	ldr	r6, [r3, #12]
 80189dc:	6999      	ldr	r1, [r3, #24]
 80189de:	b160      	cbz	r0, 80189fa <rcl_guard_condition_fini+0x2e>
 80189e0:	791d      	ldrb	r5, [r3, #4]
 80189e2:	b965      	cbnz	r5, 80189fe <rcl_guard_condition_fini+0x32>
 80189e4:	4618      	mov	r0, r3
 80189e6:	47b0      	blx	r6
 80189e8:	2300      	movs	r3, #0
 80189ea:	4628      	mov	r0, r5
 80189ec:	6063      	str	r3, [r4, #4]
 80189ee:	b002      	add	sp, #8
 80189f0:	bd70      	pop	{r4, r5, r6, pc}
 80189f2:	461d      	mov	r5, r3
 80189f4:	4628      	mov	r0, r5
 80189f6:	b002      	add	sp, #8
 80189f8:	bd70      	pop	{r4, r5, r6, pc}
 80189fa:	4605      	mov	r5, r0
 80189fc:	e7f2      	b.n	80189e4 <rcl_guard_condition_fini+0x18>
 80189fe:	9101      	str	r1, [sp, #4]
 8018a00:	f000 fa22 	bl	8018e48 <rmw_destroy_guard_condition>
 8018a04:	1e05      	subs	r5, r0, #0
 8018a06:	6863      	ldr	r3, [r4, #4]
 8018a08:	9901      	ldr	r1, [sp, #4]
 8018a0a:	bf18      	it	ne
 8018a0c:	2501      	movne	r5, #1
 8018a0e:	e7e9      	b.n	80189e4 <rcl_guard_condition_fini+0x18>
 8018a10:	250b      	movs	r5, #11
 8018a12:	4628      	mov	r0, r5
 8018a14:	b002      	add	sp, #8
 8018a16:	bd70      	pop	{r4, r5, r6, pc}

08018a18 <rcl_guard_condition_get_default_options>:
 8018a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a1a:	b087      	sub	sp, #28
 8018a1c:	4606      	mov	r6, r0
 8018a1e:	4668      	mov	r0, sp
 8018a20:	f7f2 ff68 	bl	800b8f4 <rcutils_get_default_allocator>
 8018a24:	4b09      	ldr	r3, [pc, #36]	@ (8018a4c <rcl_guard_condition_get_default_options+0x34>)
 8018a26:	46ee      	mov	lr, sp
 8018a28:	469c      	mov	ip, r3
 8018a2a:	461d      	mov	r5, r3
 8018a2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018a30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a36:	4634      	mov	r4, r6
 8018a38:	f8de 7000 	ldr.w	r7, [lr]
 8018a3c:	f8cc 7000 	str.w	r7, [ip]
 8018a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a42:	4630      	mov	r0, r6
 8018a44:	6027      	str	r7, [r4, #0]
 8018a46:	b007      	add	sp, #28
 8018a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a4a:	bf00      	nop
 8018a4c:	200159ec 	.word	0x200159ec

08018a50 <rcl_guard_condition_get_rmw_handle>:
 8018a50:	b110      	cbz	r0, 8018a58 <rcl_guard_condition_get_rmw_handle+0x8>
 8018a52:	6840      	ldr	r0, [r0, #4]
 8018a54:	b100      	cbz	r0, 8018a58 <rcl_guard_condition_get_rmw_handle+0x8>
 8018a56:	6800      	ldr	r0, [r0, #0]
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop

08018a5c <rcl_validate_topic_name>:
 8018a5c:	2800      	cmp	r0, #0
 8018a5e:	d07a      	beq.n	8018b56 <rcl_validate_topic_name+0xfa>
 8018a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a64:	460e      	mov	r6, r1
 8018a66:	2900      	cmp	r1, #0
 8018a68:	d07c      	beq.n	8018b64 <rcl_validate_topic_name+0x108>
 8018a6a:	4617      	mov	r7, r2
 8018a6c:	4605      	mov	r5, r0
 8018a6e:	f7e7 fbc7 	bl	8000200 <strlen>
 8018a72:	b1b0      	cbz	r0, 8018aa2 <rcl_validate_topic_name+0x46>
 8018a74:	f895 9000 	ldrb.w	r9, [r5]
 8018a78:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018bfc <rcl_validate_topic_name+0x1a0>
 8018a7c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018a80:	f013 0304 	ands.w	r3, r3, #4
 8018a84:	d169      	bne.n	8018b5a <rcl_validate_topic_name+0xfe>
 8018a86:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018a8a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018a8e:	2a2f      	cmp	r2, #47	@ 0x2f
 8018a90:	d10e      	bne.n	8018ab0 <rcl_validate_topic_name+0x54>
 8018a92:	2202      	movs	r2, #2
 8018a94:	6032      	str	r2, [r6, #0]
 8018a96:	b36f      	cbz	r7, 8018af4 <rcl_validate_topic_name+0x98>
 8018a98:	f8c7 8000 	str.w	r8, [r7]
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	6033      	str	r3, [r6, #0]
 8018aa6:	b32f      	cbz	r7, 8018af4 <rcl_validate_topic_name+0x98>
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	6038      	str	r0, [r7, #0]
 8018aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ab0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018ab4:	461c      	mov	r4, r3
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018abc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018ac0:	f1be 0f09 	cmp.w	lr, #9
 8018ac4:	d919      	bls.n	8018afa <rcl_validate_topic_name+0x9e>
 8018ac6:	f022 0e20 	bic.w	lr, r2, #32
 8018aca:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018ace:	f1be 0f19 	cmp.w	lr, #25
 8018ad2:	d912      	bls.n	8018afa <rcl_validate_topic_name+0x9e>
 8018ad4:	2a5f      	cmp	r2, #95	@ 0x5f
 8018ad6:	d019      	beq.n	8018b0c <rcl_validate_topic_name+0xb0>
 8018ad8:	2a2f      	cmp	r2, #47	@ 0x2f
 8018ada:	d051      	beq.n	8018b80 <rcl_validate_topic_name+0x124>
 8018adc:	2a7e      	cmp	r2, #126	@ 0x7e
 8018ade:	d048      	beq.n	8018b72 <rcl_validate_topic_name+0x116>
 8018ae0:	2a7b      	cmp	r2, #123	@ 0x7b
 8018ae2:	d054      	beq.n	8018b8e <rcl_validate_topic_name+0x132>
 8018ae4:	2a7d      	cmp	r2, #125	@ 0x7d
 8018ae6:	d161      	bne.n	8018bac <rcl_validate_topic_name+0x150>
 8018ae8:	2c00      	cmp	r4, #0
 8018aea:	d155      	bne.n	8018b98 <rcl_validate_topic_name+0x13c>
 8018aec:	2305      	movs	r3, #5
 8018aee:	6033      	str	r3, [r6, #0]
 8018af0:	b107      	cbz	r7, 8018af4 <rcl_validate_topic_name+0x98>
 8018af2:	6039      	str	r1, [r7, #0]
 8018af4:	2000      	movs	r0, #0
 8018af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018afa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018afe:	0752      	lsls	r2, r2, #29
 8018b00:	d504      	bpl.n	8018b0c <rcl_validate_topic_name+0xb0>
 8018b02:	b11c      	cbz	r4, 8018b0c <rcl_validate_topic_name+0xb0>
 8018b04:	b111      	cbz	r1, 8018b0c <rcl_validate_topic_name+0xb0>
 8018b06:	1e4a      	subs	r2, r1, #1
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	d02d      	beq.n	8018b68 <rcl_validate_topic_name+0x10c>
 8018b0c:	3101      	adds	r1, #1
 8018b0e:	4288      	cmp	r0, r1
 8018b10:	d1d2      	bne.n	8018ab8 <rcl_validate_topic_name+0x5c>
 8018b12:	2c00      	cmp	r4, #0
 8018b14:	d145      	bne.n	8018ba2 <rcl_validate_topic_name+0x146>
 8018b16:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8018b1a:	d04f      	beq.n	8018bbc <rcl_validate_topic_name+0x160>
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	2301      	movs	r3, #1
 8018b20:	e006      	b.n	8018b30 <rcl_validate_topic_name+0xd4>
 8018b22:	428b      	cmp	r3, r1
 8018b24:	f105 0501 	add.w	r5, r5, #1
 8018b28:	f103 0201 	add.w	r2, r3, #1
 8018b2c:	d236      	bcs.n	8018b9c <rcl_validate_topic_name+0x140>
 8018b2e:	4613      	mov	r3, r2
 8018b30:	4580      	cmp	r8, r0
 8018b32:	f100 0001 	add.w	r0, r0, #1
 8018b36:	d0f4      	beq.n	8018b22 <rcl_validate_topic_name+0xc6>
 8018b38:	782a      	ldrb	r2, [r5, #0]
 8018b3a:	2a2f      	cmp	r2, #47	@ 0x2f
 8018b3c:	d1f1      	bne.n	8018b22 <rcl_validate_topic_name+0xc6>
 8018b3e:	786a      	ldrb	r2, [r5, #1]
 8018b40:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018b44:	0754      	lsls	r4, r2, #29
 8018b46:	d5ec      	bpl.n	8018b22 <rcl_validate_topic_name+0xc6>
 8018b48:	2204      	movs	r2, #4
 8018b4a:	6032      	str	r2, [r6, #0]
 8018b4c:	2f00      	cmp	r7, #0
 8018b4e:	d0d1      	beq.n	8018af4 <rcl_validate_topic_name+0x98>
 8018b50:	603b      	str	r3, [r7, #0]
 8018b52:	2000      	movs	r0, #0
 8018b54:	e7aa      	b.n	8018aac <rcl_validate_topic_name+0x50>
 8018b56:	200b      	movs	r0, #11
 8018b58:	4770      	bx	lr
 8018b5a:	2304      	movs	r3, #4
 8018b5c:	6033      	str	r3, [r6, #0]
 8018b5e:	2f00      	cmp	r7, #0
 8018b60:	d1a2      	bne.n	8018aa8 <rcl_validate_topic_name+0x4c>
 8018b62:	e7c7      	b.n	8018af4 <rcl_validate_topic_name+0x98>
 8018b64:	200b      	movs	r0, #11
 8018b66:	e7a1      	b.n	8018aac <rcl_validate_topic_name+0x50>
 8018b68:	2309      	movs	r3, #9
 8018b6a:	6033      	str	r3, [r6, #0]
 8018b6c:	2f00      	cmp	r7, #0
 8018b6e:	d1c0      	bne.n	8018af2 <rcl_validate_topic_name+0x96>
 8018b70:	e7c0      	b.n	8018af4 <rcl_validate_topic_name+0x98>
 8018b72:	2900      	cmp	r1, #0
 8018b74:	d0ca      	beq.n	8018b0c <rcl_validate_topic_name+0xb0>
 8018b76:	2306      	movs	r3, #6
 8018b78:	6033      	str	r3, [r6, #0]
 8018b7a:	2f00      	cmp	r7, #0
 8018b7c:	d1b9      	bne.n	8018af2 <rcl_validate_topic_name+0x96>
 8018b7e:	e7b9      	b.n	8018af4 <rcl_validate_topic_name+0x98>
 8018b80:	2c00      	cmp	r4, #0
 8018b82:	d0c3      	beq.n	8018b0c <rcl_validate_topic_name+0xb0>
 8018b84:	2308      	movs	r3, #8
 8018b86:	6033      	str	r3, [r6, #0]
 8018b88:	2f00      	cmp	r7, #0
 8018b8a:	d1b2      	bne.n	8018af2 <rcl_validate_topic_name+0x96>
 8018b8c:	e7b2      	b.n	8018af4 <rcl_validate_topic_name+0x98>
 8018b8e:	2c00      	cmp	r4, #0
 8018b90:	d1f8      	bne.n	8018b84 <rcl_validate_topic_name+0x128>
 8018b92:	460b      	mov	r3, r1
 8018b94:	2401      	movs	r4, #1
 8018b96:	e7b9      	b.n	8018b0c <rcl_validate_topic_name+0xb0>
 8018b98:	2400      	movs	r4, #0
 8018b9a:	e7b7      	b.n	8018b0c <rcl_validate_topic_name+0xb0>
 8018b9c:	2000      	movs	r0, #0
 8018b9e:	6030      	str	r0, [r6, #0]
 8018ba0:	e784      	b.n	8018aac <rcl_validate_topic_name+0x50>
 8018ba2:	2205      	movs	r2, #5
 8018ba4:	6032      	str	r2, [r6, #0]
 8018ba6:	2f00      	cmp	r7, #0
 8018ba8:	d1d2      	bne.n	8018b50 <rcl_validate_topic_name+0xf4>
 8018baa:	e7a3      	b.n	8018af4 <rcl_validate_topic_name+0x98>
 8018bac:	2c00      	cmp	r4, #0
 8018bae:	bf14      	ite	ne
 8018bb0:	2308      	movne	r3, #8
 8018bb2:	2303      	moveq	r3, #3
 8018bb4:	6033      	str	r3, [r6, #0]
 8018bb6:	2f00      	cmp	r7, #0
 8018bb8:	d19b      	bne.n	8018af2 <rcl_validate_topic_name+0x96>
 8018bba:	e79b      	b.n	8018af4 <rcl_validate_topic_name+0x98>
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	e00a      	b.n	8018bd6 <rcl_validate_topic_name+0x17a>
 8018bc0:	2c01      	cmp	r4, #1
 8018bc2:	d013      	beq.n	8018bec <rcl_validate_topic_name+0x190>
 8018bc4:	4299      	cmp	r1, r3
 8018bc6:	f104 0401 	add.w	r4, r4, #1
 8018bca:	f105 0501 	add.w	r5, r5, #1
 8018bce:	f103 0201 	add.w	r2, r3, #1
 8018bd2:	d9e3      	bls.n	8018b9c <rcl_validate_topic_name+0x140>
 8018bd4:	4613      	mov	r3, r2
 8018bd6:	45a0      	cmp	r8, r4
 8018bd8:	d0f4      	beq.n	8018bc4 <rcl_validate_topic_name+0x168>
 8018bda:	782a      	ldrb	r2, [r5, #0]
 8018bdc:	2a2f      	cmp	r2, #47	@ 0x2f
 8018bde:	d1ef      	bne.n	8018bc0 <rcl_validate_topic_name+0x164>
 8018be0:	786a      	ldrb	r2, [r5, #1]
 8018be2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018be6:	0752      	lsls	r2, r2, #29
 8018be8:	d5ec      	bpl.n	8018bc4 <rcl_validate_topic_name+0x168>
 8018bea:	e7ad      	b.n	8018b48 <rcl_validate_topic_name+0xec>
 8018bec:	2307      	movs	r3, #7
 8018bee:	6033      	str	r3, [r6, #0]
 8018bf0:	2f00      	cmp	r7, #0
 8018bf2:	f43f af7f 	beq.w	8018af4 <rcl_validate_topic_name+0x98>
 8018bf6:	603c      	str	r4, [r7, #0]
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	e757      	b.n	8018aac <rcl_validate_topic_name+0x50>
 8018bfc:	0801c7d6 	.word	0x0801c7d6

08018c00 <rcutils_string_array_fini>:
 8018c00:	b320      	cbz	r0, 8018c4c <rcutils_string_array_fini+0x4c>
 8018c02:	b570      	push	{r4, r5, r6, lr}
 8018c04:	4604      	mov	r4, r0
 8018c06:	6840      	ldr	r0, [r0, #4]
 8018c08:	b1d8      	cbz	r0, 8018c42 <rcutils_string_array_fini+0x42>
 8018c0a:	f104 0008 	add.w	r0, r4, #8
 8018c0e:	f7f2 fe7f 	bl	800b910 <rcutils_allocator_is_valid>
 8018c12:	b1b8      	cbz	r0, 8018c44 <rcutils_string_array_fini+0x44>
 8018c14:	6823      	ldr	r3, [r4, #0]
 8018c16:	b1bb      	cbz	r3, 8018c48 <rcutils_string_array_fini+0x48>
 8018c18:	2500      	movs	r5, #0
 8018c1a:	6860      	ldr	r0, [r4, #4]
 8018c1c:	462e      	mov	r6, r5
 8018c1e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018c22:	68e3      	ldr	r3, [r4, #12]
 8018c24:	69a1      	ldr	r1, [r4, #24]
 8018c26:	4798      	blx	r3
 8018c28:	e9d4 3000 	ldrd	r3, r0, [r4]
 8018c2c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8018c30:	3501      	adds	r5, #1
 8018c32:	429d      	cmp	r5, r3
 8018c34:	d3f3      	bcc.n	8018c1e <rcutils_string_array_fini+0x1e>
 8018c36:	68e3      	ldr	r3, [r4, #12]
 8018c38:	69a1      	ldr	r1, [r4, #24]
 8018c3a:	4798      	blx	r3
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	e9c4 0000 	strd	r0, r0, [r4]
 8018c42:	bd70      	pop	{r4, r5, r6, pc}
 8018c44:	200b      	movs	r0, #11
 8018c46:	bd70      	pop	{r4, r5, r6, pc}
 8018c48:	6860      	ldr	r0, [r4, #4]
 8018c4a:	e7f4      	b.n	8018c36 <rcutils_string_array_fini+0x36>
 8018c4c:	200b      	movs	r0, #11
 8018c4e:	4770      	bx	lr

08018c50 <on_status>:
 8018c50:	b082      	sub	sp, #8
 8018c52:	b002      	add	sp, #8
 8018c54:	4770      	bx	lr
 8018c56:	bf00      	nop

08018c58 <on_topic>:
 8018c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5c:	4a22      	ldr	r2, [pc, #136]	@ (8018ce8 <on_topic+0x90>)
 8018c5e:	b094      	sub	sp, #80	@ 0x50
 8018c60:	6812      	ldr	r2, [r2, #0]
 8018c62:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8018c64:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018c68:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8018c6c:	b3c2      	cbz	r2, 8018ce0 <on_topic+0x88>
 8018c6e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8018c72:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8018c76:	e001      	b.n	8018c7c <on_topic+0x24>
 8018c78:	6852      	ldr	r2, [r2, #4]
 8018c7a:	b38a      	cbz	r2, 8018ce0 <on_topic+0x88>
 8018c7c:	6894      	ldr	r4, [r2, #8]
 8018c7e:	8aa3      	ldrh	r3, [r4, #20]
 8018c80:	428b      	cmp	r3, r1
 8018c82:	d1f9      	bne.n	8018c78 <on_topic+0x20>
 8018c84:	7da3      	ldrb	r3, [r4, #22]
 8018c86:	4283      	cmp	r3, r0
 8018c88:	d1f6      	bne.n	8018c78 <on_topic+0x20>
 8018c8a:	2248      	movs	r2, #72	@ 0x48
 8018c8c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018c90:	4668      	mov	r0, sp
 8018c92:	f000 ff50 	bl	8019b36 <memcpy>
 8018c96:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018c9a:	cb0c      	ldmia	r3, {r2, r3}
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	f7f3 fa67 	bl	800c170 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018ca2:	4607      	mov	r7, r0
 8018ca4:	b1e0      	cbz	r0, 8018ce0 <on_topic+0x88>
 8018ca6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018caa:	4632      	mov	r2, r6
 8018cac:	4628      	mov	r0, r5
 8018cae:	f108 0110 	add.w	r1, r8, #16
 8018cb2:	f7f4 fb59 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8018cb6:	b930      	cbnz	r0, 8018cc6 <on_topic+0x6e>
 8018cb8:	480c      	ldr	r0, [pc, #48]	@ (8018cec <on_topic+0x94>)
 8018cba:	4639      	mov	r1, r7
 8018cbc:	b014      	add	sp, #80	@ 0x50
 8018cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc2:	f7fc bd75 	b.w	80157b0 <put_memory>
 8018cc6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8018cca:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8018cce:	f7fd ff8f 	bl	8016bf0 <rmw_uros_epoch_nanos>
 8018cd2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8018cd6:	2305      	movs	r3, #5
 8018cd8:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018cdc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018ce0:	b014      	add	sp, #80	@ 0x50
 8018ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ce6:	bf00      	nop
 8018ce8:	200156a4 	.word	0x200156a4
 8018cec:	20015694 	.word	0x20015694

08018cf0 <on_request>:
 8018cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cf4:	4823      	ldr	r0, [pc, #140]	@ (8018d84 <on_request+0x94>)
 8018cf6:	b094      	sub	sp, #80	@ 0x50
 8018cf8:	6800      	ldr	r0, [r0, #0]
 8018cfa:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018cfc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018d00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018d02:	2800      	cmp	r0, #0
 8018d04:	d03b      	beq.n	8018d7e <on_request+0x8e>
 8018d06:	461d      	mov	r5, r3
 8018d08:	e001      	b.n	8018d0e <on_request+0x1e>
 8018d0a:	6840      	ldr	r0, [r0, #4]
 8018d0c:	b3b8      	cbz	r0, 8018d7e <on_request+0x8e>
 8018d0e:	6884      	ldr	r4, [r0, #8]
 8018d10:	8b21      	ldrh	r1, [r4, #24]
 8018d12:	4291      	cmp	r1, r2
 8018d14:	d1f9      	bne.n	8018d0a <on_request+0x1a>
 8018d16:	2248      	movs	r2, #72	@ 0x48
 8018d18:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018d1c:	4668      	mov	r0, sp
 8018d1e:	f000 ff0a 	bl	8019b36 <memcpy>
 8018d22:	f104 0320 	add.w	r3, r4, #32
 8018d26:	cb0c      	ldmia	r3, {r2, r3}
 8018d28:	4620      	mov	r0, r4
 8018d2a:	f7f3 fa21 	bl	800c170 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018d2e:	4680      	mov	r8, r0
 8018d30:	b328      	cbz	r0, 8018d7e <on_request+0x8e>
 8018d32:	4638      	mov	r0, r7
 8018d34:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018d38:	4632      	mov	r2, r6
 8018d3a:	f107 0110 	add.w	r1, r7, #16
 8018d3e:	f7f4 fb13 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8018d42:	b930      	cbnz	r0, 8018d52 <on_request+0x62>
 8018d44:	4810      	ldr	r0, [pc, #64]	@ (8018d88 <on_request+0x98>)
 8018d46:	4641      	mov	r1, r8
 8018d48:	b014      	add	sp, #80	@ 0x50
 8018d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d4e:	f7fc bd2f 	b.w	80157b0 <put_memory>
 8018d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d54:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8018d58:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018d5c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018d60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018d68:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018d6c:	f7fd ff40 	bl	8016bf0 <rmw_uros_epoch_nanos>
 8018d70:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8018d74:	2303      	movs	r3, #3
 8018d76:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018d7a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018d7e:	b014      	add	sp, #80	@ 0x50
 8018d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d84:	20015674 	.word	0x20015674
 8018d88:	20015694 	.word	0x20015694

08018d8c <on_reply>:
 8018d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d90:	4821      	ldr	r0, [pc, #132]	@ (8018e18 <on_reply+0x8c>)
 8018d92:	b094      	sub	sp, #80	@ 0x50
 8018d94:	6800      	ldr	r0, [r0, #0]
 8018d96:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018d98:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018d9c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018d9e:	b3b8      	cbz	r0, 8018e10 <on_reply+0x84>
 8018da0:	461d      	mov	r5, r3
 8018da2:	e001      	b.n	8018da8 <on_reply+0x1c>
 8018da4:	6840      	ldr	r0, [r0, #4]
 8018da6:	b398      	cbz	r0, 8018e10 <on_reply+0x84>
 8018da8:	6884      	ldr	r4, [r0, #8]
 8018daa:	8b21      	ldrh	r1, [r4, #24]
 8018dac:	4291      	cmp	r1, r2
 8018dae:	d1f9      	bne.n	8018da4 <on_reply+0x18>
 8018db0:	2248      	movs	r2, #72	@ 0x48
 8018db2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8018db6:	4668      	mov	r0, sp
 8018db8:	f000 febd 	bl	8019b36 <memcpy>
 8018dbc:	f104 0320 	add.w	r3, r4, #32
 8018dc0:	cb0c      	ldmia	r3, {r2, r3}
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f7f3 f9d4 	bl	800c170 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018dc8:	4680      	mov	r8, r0
 8018dca:	b308      	cbz	r0, 8018e10 <on_reply+0x84>
 8018dcc:	4638      	mov	r0, r7
 8018dce:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018dd2:	4632      	mov	r2, r6
 8018dd4:	f107 0110 	add.w	r1, r7, #16
 8018dd8:	f7f4 fac6 	bl	800d368 <ucdr_deserialize_array_uint8_t>
 8018ddc:	b930      	cbnz	r0, 8018dec <on_reply+0x60>
 8018dde:	480f      	ldr	r0, [pc, #60]	@ (8018e1c <on_reply+0x90>)
 8018de0:	4641      	mov	r1, r8
 8018de2:	b014      	add	sp, #80	@ 0x50
 8018de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018de8:	f7fc bce2 	b.w	80157b0 <put_memory>
 8018dec:	2200      	movs	r2, #0
 8018dee:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8018df2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8018df6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018dfa:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8018dfe:	f7fd fef7 	bl	8016bf0 <rmw_uros_epoch_nanos>
 8018e02:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8018e06:	2304      	movs	r3, #4
 8018e08:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018e0c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018e10:	b014      	add	sp, #80	@ 0x50
 8018e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e16:	bf00      	nop
 8018e18:	20010d88 	.word	0x20010d88
 8018e1c:	20015694 	.word	0x20015694

08018e20 <rmw_create_guard_condition>:
 8018e20:	b538      	push	{r3, r4, r5, lr}
 8018e22:	4605      	mov	r5, r0
 8018e24:	4807      	ldr	r0, [pc, #28]	@ (8018e44 <rmw_create_guard_condition+0x24>)
 8018e26:	f7fc fcb3 	bl	8015790 <get_memory>
 8018e2a:	b148      	cbz	r0, 8018e40 <rmw_create_guard_condition+0x20>
 8018e2c:	6884      	ldr	r4, [r0, #8]
 8018e2e:	2300      	movs	r3, #0
 8018e30:	7423      	strb	r3, [r4, #16]
 8018e32:	61e5      	str	r5, [r4, #28]
 8018e34:	f7fc fd14 	bl	8015860 <rmw_get_implementation_identifier>
 8018e38:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018e3c:	f104 0014 	add.w	r0, r4, #20
 8018e40:	bd38      	pop	{r3, r4, r5, pc}
 8018e42:	bf00      	nop
 8018e44:	20015634 	.word	0x20015634

08018e48 <rmw_destroy_guard_condition>:
 8018e48:	b508      	push	{r3, lr}
 8018e4a:	4b08      	ldr	r3, [pc, #32]	@ (8018e6c <rmw_destroy_guard_condition+0x24>)
 8018e4c:	6819      	ldr	r1, [r3, #0]
 8018e4e:	b911      	cbnz	r1, 8018e56 <rmw_destroy_guard_condition+0xe>
 8018e50:	e00a      	b.n	8018e68 <rmw_destroy_guard_condition+0x20>
 8018e52:	6849      	ldr	r1, [r1, #4]
 8018e54:	b141      	cbz	r1, 8018e68 <rmw_destroy_guard_condition+0x20>
 8018e56:	688b      	ldr	r3, [r1, #8]
 8018e58:	3314      	adds	r3, #20
 8018e5a:	4298      	cmp	r0, r3
 8018e5c:	d1f9      	bne.n	8018e52 <rmw_destroy_guard_condition+0xa>
 8018e5e:	4803      	ldr	r0, [pc, #12]	@ (8018e6c <rmw_destroy_guard_condition+0x24>)
 8018e60:	f7fc fca6 	bl	80157b0 <put_memory>
 8018e64:	2000      	movs	r0, #0
 8018e66:	bd08      	pop	{r3, pc}
 8018e68:	2001      	movs	r0, #1
 8018e6a:	bd08      	pop	{r3, pc}
 8018e6c:	20015634 	.word	0x20015634

08018e70 <rosidl_runtime_c__String__init>:
 8018e70:	b510      	push	{r4, lr}
 8018e72:	4604      	mov	r4, r0
 8018e74:	b086      	sub	sp, #24
 8018e76:	b170      	cbz	r0, 8018e96 <rosidl_runtime_c__String__init+0x26>
 8018e78:	a801      	add	r0, sp, #4
 8018e7a:	f7f2 fd3b 	bl	800b8f4 <rcutils_get_default_allocator>
 8018e7e:	9b01      	ldr	r3, [sp, #4]
 8018e80:	9905      	ldr	r1, [sp, #20]
 8018e82:	2001      	movs	r0, #1
 8018e84:	4798      	blx	r3
 8018e86:	6020      	str	r0, [r4, #0]
 8018e88:	b128      	cbz	r0, 8018e96 <rosidl_runtime_c__String__init+0x26>
 8018e8a:	2100      	movs	r1, #0
 8018e8c:	2201      	movs	r2, #1
 8018e8e:	7001      	strb	r1, [r0, #0]
 8018e90:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8018e94:	4610      	mov	r0, r2
 8018e96:	b006      	add	sp, #24
 8018e98:	bd10      	pop	{r4, pc}
 8018e9a:	bf00      	nop

08018e9c <rosidl_runtime_c__String__fini>:
 8018e9c:	b320      	cbz	r0, 8018ee8 <rosidl_runtime_c__String__fini+0x4c>
 8018e9e:	b510      	push	{r4, lr}
 8018ea0:	6803      	ldr	r3, [r0, #0]
 8018ea2:	b086      	sub	sp, #24
 8018ea4:	4604      	mov	r4, r0
 8018ea6:	b173      	cbz	r3, 8018ec6 <rosidl_runtime_c__String__fini+0x2a>
 8018ea8:	6883      	ldr	r3, [r0, #8]
 8018eaa:	b1f3      	cbz	r3, 8018eea <rosidl_runtime_c__String__fini+0x4e>
 8018eac:	a801      	add	r0, sp, #4
 8018eae:	f7f2 fd21 	bl	800b8f4 <rcutils_get_default_allocator>
 8018eb2:	9b02      	ldr	r3, [sp, #8]
 8018eb4:	9905      	ldr	r1, [sp, #20]
 8018eb6:	6820      	ldr	r0, [r4, #0]
 8018eb8:	4798      	blx	r3
 8018eba:	2300      	movs	r3, #0
 8018ebc:	e9c4 3300 	strd	r3, r3, [r4]
 8018ec0:	60a3      	str	r3, [r4, #8]
 8018ec2:	b006      	add	sp, #24
 8018ec4:	bd10      	pop	{r4, pc}
 8018ec6:	6843      	ldr	r3, [r0, #4]
 8018ec8:	b9db      	cbnz	r3, 8018f02 <rosidl_runtime_c__String__fini+0x66>
 8018eca:	6883      	ldr	r3, [r0, #8]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d0f8      	beq.n	8018ec2 <rosidl_runtime_c__String__fini+0x26>
 8018ed0:	4b12      	ldr	r3, [pc, #72]	@ (8018f1c <rosidl_runtime_c__String__fini+0x80>)
 8018ed2:	4813      	ldr	r0, [pc, #76]	@ (8018f20 <rosidl_runtime_c__String__fini+0x84>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	2251      	movs	r2, #81	@ 0x51
 8018ed8:	68db      	ldr	r3, [r3, #12]
 8018eda:	2101      	movs	r1, #1
 8018edc:	f000 fbf0 	bl	80196c0 <fwrite>
 8018ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018ee4:	f000 f83e 	bl	8018f64 <exit>
 8018ee8:	4770      	bx	lr
 8018eea:	4b0c      	ldr	r3, [pc, #48]	@ (8018f1c <rosidl_runtime_c__String__fini+0x80>)
 8018eec:	480d      	ldr	r0, [pc, #52]	@ (8018f24 <rosidl_runtime_c__String__fini+0x88>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	224c      	movs	r2, #76	@ 0x4c
 8018ef2:	68db      	ldr	r3, [r3, #12]
 8018ef4:	2101      	movs	r1, #1
 8018ef6:	f000 fbe3 	bl	80196c0 <fwrite>
 8018efa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018efe:	f000 f831 	bl	8018f64 <exit>
 8018f02:	4b06      	ldr	r3, [pc, #24]	@ (8018f1c <rosidl_runtime_c__String__fini+0x80>)
 8018f04:	4808      	ldr	r0, [pc, #32]	@ (8018f28 <rosidl_runtime_c__String__fini+0x8c>)
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	224e      	movs	r2, #78	@ 0x4e
 8018f0a:	68db      	ldr	r3, [r3, #12]
 8018f0c:	2101      	movs	r1, #1
 8018f0e:	f000 fbd7 	bl	80196c0 <fwrite>
 8018f12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f16:	f000 f825 	bl	8018f64 <exit>
 8018f1a:	bf00      	nop
 8018f1c:	20000a74 	.word	0x20000a74
 8018f20:	0801c714 	.word	0x0801c714
 8018f24:	0801c674 	.word	0x0801c674
 8018f28:	0801c6c4 	.word	0x0801c6c4

08018f2c <calloc>:
 8018f2c:	4b02      	ldr	r3, [pc, #8]	@ (8018f38 <calloc+0xc>)
 8018f2e:	460a      	mov	r2, r1
 8018f30:	4601      	mov	r1, r0
 8018f32:	6818      	ldr	r0, [r3, #0]
 8018f34:	f000 b802 	b.w	8018f3c <_calloc_r>
 8018f38:	20000a74 	.word	0x20000a74

08018f3c <_calloc_r>:
 8018f3c:	b570      	push	{r4, r5, r6, lr}
 8018f3e:	fba1 5402 	umull	r5, r4, r1, r2
 8018f42:	b93c      	cbnz	r4, 8018f54 <_calloc_r+0x18>
 8018f44:	4629      	mov	r1, r5
 8018f46:	f000 f899 	bl	801907c <_malloc_r>
 8018f4a:	4606      	mov	r6, r0
 8018f4c:	b928      	cbnz	r0, 8018f5a <_calloc_r+0x1e>
 8018f4e:	2600      	movs	r6, #0
 8018f50:	4630      	mov	r0, r6
 8018f52:	bd70      	pop	{r4, r5, r6, pc}
 8018f54:	220c      	movs	r2, #12
 8018f56:	6002      	str	r2, [r0, #0]
 8018f58:	e7f9      	b.n	8018f4e <_calloc_r+0x12>
 8018f5a:	462a      	mov	r2, r5
 8018f5c:	4621      	mov	r1, r4
 8018f5e:	f000 fd82 	bl	8019a66 <memset>
 8018f62:	e7f5      	b.n	8018f50 <_calloc_r+0x14>

08018f64 <exit>:
 8018f64:	b508      	push	{r3, lr}
 8018f66:	4b06      	ldr	r3, [pc, #24]	@ (8018f80 <exit+0x1c>)
 8018f68:	4604      	mov	r4, r0
 8018f6a:	b113      	cbz	r3, 8018f72 <exit+0xe>
 8018f6c:	2100      	movs	r1, #0
 8018f6e:	f3af 8000 	nop.w
 8018f72:	4b04      	ldr	r3, [pc, #16]	@ (8018f84 <exit+0x20>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	b103      	cbz	r3, 8018f7a <exit+0x16>
 8018f78:	4798      	blx	r3
 8018f7a:	4620      	mov	r0, r4
 8018f7c:	f7e9 fadc 	bl	8002538 <_exit>
 8018f80:	00000000 	.word	0x00000000
 8018f84:	20015b40 	.word	0x20015b40

08018f88 <getenv>:
 8018f88:	b507      	push	{r0, r1, r2, lr}
 8018f8a:	4b04      	ldr	r3, [pc, #16]	@ (8018f9c <getenv+0x14>)
 8018f8c:	4601      	mov	r1, r0
 8018f8e:	aa01      	add	r2, sp, #4
 8018f90:	6818      	ldr	r0, [r3, #0]
 8018f92:	f000 f805 	bl	8018fa0 <_findenv_r>
 8018f96:	b003      	add	sp, #12
 8018f98:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f9c:	20000a74 	.word	0x20000a74

08018fa0 <_findenv_r>:
 8018fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019014 <_findenv_r+0x74>
 8018fa8:	4606      	mov	r6, r0
 8018faa:	4689      	mov	r9, r1
 8018fac:	4617      	mov	r7, r2
 8018fae:	f000 fdf7 	bl	8019ba0 <__env_lock>
 8018fb2:	f8da 4000 	ldr.w	r4, [sl]
 8018fb6:	b134      	cbz	r4, 8018fc6 <_findenv_r+0x26>
 8018fb8:	464b      	mov	r3, r9
 8018fba:	4698      	mov	r8, r3
 8018fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fc0:	b13a      	cbz	r2, 8018fd2 <_findenv_r+0x32>
 8018fc2:	2a3d      	cmp	r2, #61	@ 0x3d
 8018fc4:	d1f9      	bne.n	8018fba <_findenv_r+0x1a>
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	f000 fdf0 	bl	8019bac <__env_unlock>
 8018fcc:	2000      	movs	r0, #0
 8018fce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd2:	eba8 0809 	sub.w	r8, r8, r9
 8018fd6:	46a3      	mov	fp, r4
 8018fd8:	f854 0b04 	ldr.w	r0, [r4], #4
 8018fdc:	2800      	cmp	r0, #0
 8018fde:	d0f2      	beq.n	8018fc6 <_findenv_r+0x26>
 8018fe0:	4642      	mov	r2, r8
 8018fe2:	4649      	mov	r1, r9
 8018fe4:	f000 fced 	bl	80199c2 <strncmp>
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	d1f4      	bne.n	8018fd6 <_findenv_r+0x36>
 8018fec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018ff0:	eb03 0508 	add.w	r5, r3, r8
 8018ff4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018ff8:	2b3d      	cmp	r3, #61	@ 0x3d
 8018ffa:	d1ec      	bne.n	8018fd6 <_findenv_r+0x36>
 8018ffc:	f8da 3000 	ldr.w	r3, [sl]
 8019000:	ebab 0303 	sub.w	r3, fp, r3
 8019004:	109b      	asrs	r3, r3, #2
 8019006:	4630      	mov	r0, r6
 8019008:	603b      	str	r3, [r7, #0]
 801900a:	f000 fdcf 	bl	8019bac <__env_unlock>
 801900e:	1c68      	adds	r0, r5, #1
 8019010:	e7dd      	b.n	8018fce <_findenv_r+0x2e>
 8019012:	bf00      	nop
 8019014:	20000000 	.word	0x20000000

08019018 <malloc>:
 8019018:	4b02      	ldr	r3, [pc, #8]	@ (8019024 <malloc+0xc>)
 801901a:	4601      	mov	r1, r0
 801901c:	6818      	ldr	r0, [r3, #0]
 801901e:	f000 b82d 	b.w	801907c <_malloc_r>
 8019022:	bf00      	nop
 8019024:	20000a74 	.word	0x20000a74

08019028 <free>:
 8019028:	4b02      	ldr	r3, [pc, #8]	@ (8019034 <free+0xc>)
 801902a:	4601      	mov	r1, r0
 801902c:	6818      	ldr	r0, [r3, #0]
 801902e:	f000 bdc3 	b.w	8019bb8 <_free_r>
 8019032:	bf00      	nop
 8019034:	20000a74 	.word	0x20000a74

08019038 <sbrk_aligned>:
 8019038:	b570      	push	{r4, r5, r6, lr}
 801903a:	4e0f      	ldr	r6, [pc, #60]	@ (8019078 <sbrk_aligned+0x40>)
 801903c:	460c      	mov	r4, r1
 801903e:	6831      	ldr	r1, [r6, #0]
 8019040:	4605      	mov	r5, r0
 8019042:	b911      	cbnz	r1, 801904a <sbrk_aligned+0x12>
 8019044:	f000 fd3a 	bl	8019abc <_sbrk_r>
 8019048:	6030      	str	r0, [r6, #0]
 801904a:	4621      	mov	r1, r4
 801904c:	4628      	mov	r0, r5
 801904e:	f000 fd35 	bl	8019abc <_sbrk_r>
 8019052:	1c43      	adds	r3, r0, #1
 8019054:	d103      	bne.n	801905e <sbrk_aligned+0x26>
 8019056:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801905a:	4620      	mov	r0, r4
 801905c:	bd70      	pop	{r4, r5, r6, pc}
 801905e:	1cc4      	adds	r4, r0, #3
 8019060:	f024 0403 	bic.w	r4, r4, #3
 8019064:	42a0      	cmp	r0, r4
 8019066:	d0f8      	beq.n	801905a <sbrk_aligned+0x22>
 8019068:	1a21      	subs	r1, r4, r0
 801906a:	4628      	mov	r0, r5
 801906c:	f000 fd26 	bl	8019abc <_sbrk_r>
 8019070:	3001      	adds	r0, #1
 8019072:	d1f2      	bne.n	801905a <sbrk_aligned+0x22>
 8019074:	e7ef      	b.n	8019056 <sbrk_aligned+0x1e>
 8019076:	bf00      	nop
 8019078:	20015a00 	.word	0x20015a00

0801907c <_malloc_r>:
 801907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019080:	1ccd      	adds	r5, r1, #3
 8019082:	f025 0503 	bic.w	r5, r5, #3
 8019086:	3508      	adds	r5, #8
 8019088:	2d0c      	cmp	r5, #12
 801908a:	bf38      	it	cc
 801908c:	250c      	movcc	r5, #12
 801908e:	2d00      	cmp	r5, #0
 8019090:	4606      	mov	r6, r0
 8019092:	db01      	blt.n	8019098 <_malloc_r+0x1c>
 8019094:	42a9      	cmp	r1, r5
 8019096:	d904      	bls.n	80190a2 <_malloc_r+0x26>
 8019098:	230c      	movs	r3, #12
 801909a:	6033      	str	r3, [r6, #0]
 801909c:	2000      	movs	r0, #0
 801909e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80190a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019178 <_malloc_r+0xfc>
 80190a6:	f000 f89d 	bl	80191e4 <__malloc_lock>
 80190aa:	f8d8 3000 	ldr.w	r3, [r8]
 80190ae:	461c      	mov	r4, r3
 80190b0:	bb44      	cbnz	r4, 8019104 <_malloc_r+0x88>
 80190b2:	4629      	mov	r1, r5
 80190b4:	4630      	mov	r0, r6
 80190b6:	f7ff ffbf 	bl	8019038 <sbrk_aligned>
 80190ba:	1c43      	adds	r3, r0, #1
 80190bc:	4604      	mov	r4, r0
 80190be:	d158      	bne.n	8019172 <_malloc_r+0xf6>
 80190c0:	f8d8 4000 	ldr.w	r4, [r8]
 80190c4:	4627      	mov	r7, r4
 80190c6:	2f00      	cmp	r7, #0
 80190c8:	d143      	bne.n	8019152 <_malloc_r+0xd6>
 80190ca:	2c00      	cmp	r4, #0
 80190cc:	d04b      	beq.n	8019166 <_malloc_r+0xea>
 80190ce:	6823      	ldr	r3, [r4, #0]
 80190d0:	4639      	mov	r1, r7
 80190d2:	4630      	mov	r0, r6
 80190d4:	eb04 0903 	add.w	r9, r4, r3
 80190d8:	f000 fcf0 	bl	8019abc <_sbrk_r>
 80190dc:	4581      	cmp	r9, r0
 80190de:	d142      	bne.n	8019166 <_malloc_r+0xea>
 80190e0:	6821      	ldr	r1, [r4, #0]
 80190e2:	1a6d      	subs	r5, r5, r1
 80190e4:	4629      	mov	r1, r5
 80190e6:	4630      	mov	r0, r6
 80190e8:	f7ff ffa6 	bl	8019038 <sbrk_aligned>
 80190ec:	3001      	adds	r0, #1
 80190ee:	d03a      	beq.n	8019166 <_malloc_r+0xea>
 80190f0:	6823      	ldr	r3, [r4, #0]
 80190f2:	442b      	add	r3, r5
 80190f4:	6023      	str	r3, [r4, #0]
 80190f6:	f8d8 3000 	ldr.w	r3, [r8]
 80190fa:	685a      	ldr	r2, [r3, #4]
 80190fc:	bb62      	cbnz	r2, 8019158 <_malloc_r+0xdc>
 80190fe:	f8c8 7000 	str.w	r7, [r8]
 8019102:	e00f      	b.n	8019124 <_malloc_r+0xa8>
 8019104:	6822      	ldr	r2, [r4, #0]
 8019106:	1b52      	subs	r2, r2, r5
 8019108:	d420      	bmi.n	801914c <_malloc_r+0xd0>
 801910a:	2a0b      	cmp	r2, #11
 801910c:	d917      	bls.n	801913e <_malloc_r+0xc2>
 801910e:	1961      	adds	r1, r4, r5
 8019110:	42a3      	cmp	r3, r4
 8019112:	6025      	str	r5, [r4, #0]
 8019114:	bf18      	it	ne
 8019116:	6059      	strne	r1, [r3, #4]
 8019118:	6863      	ldr	r3, [r4, #4]
 801911a:	bf08      	it	eq
 801911c:	f8c8 1000 	streq.w	r1, [r8]
 8019120:	5162      	str	r2, [r4, r5]
 8019122:	604b      	str	r3, [r1, #4]
 8019124:	4630      	mov	r0, r6
 8019126:	f000 f863 	bl	80191f0 <__malloc_unlock>
 801912a:	f104 000b 	add.w	r0, r4, #11
 801912e:	1d23      	adds	r3, r4, #4
 8019130:	f020 0007 	bic.w	r0, r0, #7
 8019134:	1ac2      	subs	r2, r0, r3
 8019136:	bf1c      	itt	ne
 8019138:	1a1b      	subne	r3, r3, r0
 801913a:	50a3      	strne	r3, [r4, r2]
 801913c:	e7af      	b.n	801909e <_malloc_r+0x22>
 801913e:	6862      	ldr	r2, [r4, #4]
 8019140:	42a3      	cmp	r3, r4
 8019142:	bf0c      	ite	eq
 8019144:	f8c8 2000 	streq.w	r2, [r8]
 8019148:	605a      	strne	r2, [r3, #4]
 801914a:	e7eb      	b.n	8019124 <_malloc_r+0xa8>
 801914c:	4623      	mov	r3, r4
 801914e:	6864      	ldr	r4, [r4, #4]
 8019150:	e7ae      	b.n	80190b0 <_malloc_r+0x34>
 8019152:	463c      	mov	r4, r7
 8019154:	687f      	ldr	r7, [r7, #4]
 8019156:	e7b6      	b.n	80190c6 <_malloc_r+0x4a>
 8019158:	461a      	mov	r2, r3
 801915a:	685b      	ldr	r3, [r3, #4]
 801915c:	42a3      	cmp	r3, r4
 801915e:	d1fb      	bne.n	8019158 <_malloc_r+0xdc>
 8019160:	2300      	movs	r3, #0
 8019162:	6053      	str	r3, [r2, #4]
 8019164:	e7de      	b.n	8019124 <_malloc_r+0xa8>
 8019166:	230c      	movs	r3, #12
 8019168:	6033      	str	r3, [r6, #0]
 801916a:	4630      	mov	r0, r6
 801916c:	f000 f840 	bl	80191f0 <__malloc_unlock>
 8019170:	e794      	b.n	801909c <_malloc_r+0x20>
 8019172:	6005      	str	r5, [r0, #0]
 8019174:	e7d6      	b.n	8019124 <_malloc_r+0xa8>
 8019176:	bf00      	nop
 8019178:	20015a04 	.word	0x20015a04

0801917c <sniprintf>:
 801917c:	b40c      	push	{r2, r3}
 801917e:	b530      	push	{r4, r5, lr}
 8019180:	4b17      	ldr	r3, [pc, #92]	@ (80191e0 <sniprintf+0x64>)
 8019182:	1e0c      	subs	r4, r1, #0
 8019184:	681d      	ldr	r5, [r3, #0]
 8019186:	b09d      	sub	sp, #116	@ 0x74
 8019188:	da08      	bge.n	801919c <sniprintf+0x20>
 801918a:	238b      	movs	r3, #139	@ 0x8b
 801918c:	602b      	str	r3, [r5, #0]
 801918e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019192:	b01d      	add	sp, #116	@ 0x74
 8019194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019198:	b002      	add	sp, #8
 801919a:	4770      	bx	lr
 801919c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80191a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80191a4:	bf14      	ite	ne
 80191a6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80191aa:	4623      	moveq	r3, r4
 80191ac:	9304      	str	r3, [sp, #16]
 80191ae:	9307      	str	r3, [sp, #28]
 80191b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80191b4:	9002      	str	r0, [sp, #8]
 80191b6:	9006      	str	r0, [sp, #24]
 80191b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80191bc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80191be:	ab21      	add	r3, sp, #132	@ 0x84
 80191c0:	a902      	add	r1, sp, #8
 80191c2:	4628      	mov	r0, r5
 80191c4:	9301      	str	r3, [sp, #4]
 80191c6:	f000 fd9d 	bl	8019d04 <_svfiprintf_r>
 80191ca:	1c43      	adds	r3, r0, #1
 80191cc:	bfbc      	itt	lt
 80191ce:	238b      	movlt	r3, #139	@ 0x8b
 80191d0:	602b      	strlt	r3, [r5, #0]
 80191d2:	2c00      	cmp	r4, #0
 80191d4:	d0dd      	beq.n	8019192 <sniprintf+0x16>
 80191d6:	9b02      	ldr	r3, [sp, #8]
 80191d8:	2200      	movs	r2, #0
 80191da:	701a      	strb	r2, [r3, #0]
 80191dc:	e7d9      	b.n	8019192 <sniprintf+0x16>
 80191de:	bf00      	nop
 80191e0:	20000a74 	.word	0x20000a74

080191e4 <__malloc_lock>:
 80191e4:	4801      	ldr	r0, [pc, #4]	@ (80191ec <__malloc_lock+0x8>)
 80191e6:	f000 bca4 	b.w	8019b32 <__retarget_lock_acquire_recursive>
 80191ea:	bf00      	nop
 80191ec:	20015b45 	.word	0x20015b45

080191f0 <__malloc_unlock>:
 80191f0:	4801      	ldr	r0, [pc, #4]	@ (80191f8 <__malloc_unlock+0x8>)
 80191f2:	f000 bc9f 	b.w	8019b34 <__retarget_lock_release_recursive>
 80191f6:	bf00      	nop
 80191f8:	20015b45 	.word	0x20015b45

080191fc <srand>:
 80191fc:	b538      	push	{r3, r4, r5, lr}
 80191fe:	4b10      	ldr	r3, [pc, #64]	@ (8019240 <srand+0x44>)
 8019200:	681d      	ldr	r5, [r3, #0]
 8019202:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019204:	4604      	mov	r4, r0
 8019206:	b9b3      	cbnz	r3, 8019236 <srand+0x3a>
 8019208:	2018      	movs	r0, #24
 801920a:	f7ff ff05 	bl	8019018 <malloc>
 801920e:	4602      	mov	r2, r0
 8019210:	6328      	str	r0, [r5, #48]	@ 0x30
 8019212:	b920      	cbnz	r0, 801921e <srand+0x22>
 8019214:	4b0b      	ldr	r3, [pc, #44]	@ (8019244 <srand+0x48>)
 8019216:	480c      	ldr	r0, [pc, #48]	@ (8019248 <srand+0x4c>)
 8019218:	2146      	movs	r1, #70	@ 0x46
 801921a:	f000 fca3 	bl	8019b64 <__assert_func>
 801921e:	490b      	ldr	r1, [pc, #44]	@ (801924c <srand+0x50>)
 8019220:	4b0b      	ldr	r3, [pc, #44]	@ (8019250 <srand+0x54>)
 8019222:	e9c0 1300 	strd	r1, r3, [r0]
 8019226:	4b0b      	ldr	r3, [pc, #44]	@ (8019254 <srand+0x58>)
 8019228:	6083      	str	r3, [r0, #8]
 801922a:	230b      	movs	r3, #11
 801922c:	8183      	strh	r3, [r0, #12]
 801922e:	2100      	movs	r1, #0
 8019230:	2001      	movs	r0, #1
 8019232:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019236:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019238:	2200      	movs	r2, #0
 801923a:	611c      	str	r4, [r3, #16]
 801923c:	615a      	str	r2, [r3, #20]
 801923e:	bd38      	pop	{r3, r4, r5, pc}
 8019240:	20000a74 	.word	0x20000a74
 8019244:	0801c766 	.word	0x0801c766
 8019248:	0801c77d 	.word	0x0801c77d
 801924c:	abcd330e 	.word	0xabcd330e
 8019250:	e66d1234 	.word	0xe66d1234
 8019254:	0005deec 	.word	0x0005deec

08019258 <rand>:
 8019258:	4b16      	ldr	r3, [pc, #88]	@ (80192b4 <rand+0x5c>)
 801925a:	b510      	push	{r4, lr}
 801925c:	681c      	ldr	r4, [r3, #0]
 801925e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019260:	b9b3      	cbnz	r3, 8019290 <rand+0x38>
 8019262:	2018      	movs	r0, #24
 8019264:	f7ff fed8 	bl	8019018 <malloc>
 8019268:	4602      	mov	r2, r0
 801926a:	6320      	str	r0, [r4, #48]	@ 0x30
 801926c:	b920      	cbnz	r0, 8019278 <rand+0x20>
 801926e:	4b12      	ldr	r3, [pc, #72]	@ (80192b8 <rand+0x60>)
 8019270:	4812      	ldr	r0, [pc, #72]	@ (80192bc <rand+0x64>)
 8019272:	2152      	movs	r1, #82	@ 0x52
 8019274:	f000 fc76 	bl	8019b64 <__assert_func>
 8019278:	4911      	ldr	r1, [pc, #68]	@ (80192c0 <rand+0x68>)
 801927a:	4b12      	ldr	r3, [pc, #72]	@ (80192c4 <rand+0x6c>)
 801927c:	e9c0 1300 	strd	r1, r3, [r0]
 8019280:	4b11      	ldr	r3, [pc, #68]	@ (80192c8 <rand+0x70>)
 8019282:	6083      	str	r3, [r0, #8]
 8019284:	230b      	movs	r3, #11
 8019286:	8183      	strh	r3, [r0, #12]
 8019288:	2100      	movs	r1, #0
 801928a:	2001      	movs	r0, #1
 801928c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019290:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019292:	480e      	ldr	r0, [pc, #56]	@ (80192cc <rand+0x74>)
 8019294:	690b      	ldr	r3, [r1, #16]
 8019296:	694c      	ldr	r4, [r1, #20]
 8019298:	4a0d      	ldr	r2, [pc, #52]	@ (80192d0 <rand+0x78>)
 801929a:	4358      	muls	r0, r3
 801929c:	fb02 0004 	mla	r0, r2, r4, r0
 80192a0:	fba3 3202 	umull	r3, r2, r3, r2
 80192a4:	3301      	adds	r3, #1
 80192a6:	eb40 0002 	adc.w	r0, r0, r2
 80192aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80192ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80192b2:	bd10      	pop	{r4, pc}
 80192b4:	20000a74 	.word	0x20000a74
 80192b8:	0801c766 	.word	0x0801c766
 80192bc:	0801c77d 	.word	0x0801c77d
 80192c0:	abcd330e 	.word	0xabcd330e
 80192c4:	e66d1234 	.word	0xe66d1234
 80192c8:	0005deec 	.word	0x0005deec
 80192cc:	5851f42d 	.word	0x5851f42d
 80192d0:	4c957f2d 	.word	0x4c957f2d

080192d4 <realloc>:
 80192d4:	4b02      	ldr	r3, [pc, #8]	@ (80192e0 <realloc+0xc>)
 80192d6:	460a      	mov	r2, r1
 80192d8:	4601      	mov	r1, r0
 80192da:	6818      	ldr	r0, [r3, #0]
 80192dc:	f000 b8a6 	b.w	801942c <_realloc_r>
 80192e0:	20000a74 	.word	0x20000a74

080192e4 <std>:
 80192e4:	2300      	movs	r3, #0
 80192e6:	b510      	push	{r4, lr}
 80192e8:	4604      	mov	r4, r0
 80192ea:	e9c0 3300 	strd	r3, r3, [r0]
 80192ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80192f2:	6083      	str	r3, [r0, #8]
 80192f4:	8181      	strh	r1, [r0, #12]
 80192f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80192f8:	81c2      	strh	r2, [r0, #14]
 80192fa:	6183      	str	r3, [r0, #24]
 80192fc:	4619      	mov	r1, r3
 80192fe:	2208      	movs	r2, #8
 8019300:	305c      	adds	r0, #92	@ 0x5c
 8019302:	f000 fbb0 	bl	8019a66 <memset>
 8019306:	4b0d      	ldr	r3, [pc, #52]	@ (801933c <std+0x58>)
 8019308:	6263      	str	r3, [r4, #36]	@ 0x24
 801930a:	4b0d      	ldr	r3, [pc, #52]	@ (8019340 <std+0x5c>)
 801930c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801930e:	4b0d      	ldr	r3, [pc, #52]	@ (8019344 <std+0x60>)
 8019310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019312:	4b0d      	ldr	r3, [pc, #52]	@ (8019348 <std+0x64>)
 8019314:	6323      	str	r3, [r4, #48]	@ 0x30
 8019316:	4b0d      	ldr	r3, [pc, #52]	@ (801934c <std+0x68>)
 8019318:	6224      	str	r4, [r4, #32]
 801931a:	429c      	cmp	r4, r3
 801931c:	d006      	beq.n	801932c <std+0x48>
 801931e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019322:	4294      	cmp	r4, r2
 8019324:	d002      	beq.n	801932c <std+0x48>
 8019326:	33d0      	adds	r3, #208	@ 0xd0
 8019328:	429c      	cmp	r4, r3
 801932a:	d105      	bne.n	8019338 <std+0x54>
 801932c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019334:	f000 bbfc 	b.w	8019b30 <__retarget_lock_init_recursive>
 8019338:	bd10      	pop	{r4, pc}
 801933a:	bf00      	nop
 801933c:	0801a605 	.word	0x0801a605
 8019340:	0801a627 	.word	0x0801a627
 8019344:	0801a65f 	.word	0x0801a65f
 8019348:	0801a683 	.word	0x0801a683
 801934c:	20015a08 	.word	0x20015a08

08019350 <stdio_exit_handler>:
 8019350:	4a02      	ldr	r2, [pc, #8]	@ (801935c <stdio_exit_handler+0xc>)
 8019352:	4903      	ldr	r1, [pc, #12]	@ (8019360 <stdio_exit_handler+0x10>)
 8019354:	4803      	ldr	r0, [pc, #12]	@ (8019364 <stdio_exit_handler+0x14>)
 8019356:	f000 b90f 	b.w	8019578 <_fwalk_sglue>
 801935a:	bf00      	nop
 801935c:	20000a68 	.word	0x20000a68
 8019360:	0801a5a5 	.word	0x0801a5a5
 8019364:	20000a78 	.word	0x20000a78

08019368 <cleanup_stdio>:
 8019368:	6841      	ldr	r1, [r0, #4]
 801936a:	4b0c      	ldr	r3, [pc, #48]	@ (801939c <cleanup_stdio+0x34>)
 801936c:	4299      	cmp	r1, r3
 801936e:	b510      	push	{r4, lr}
 8019370:	4604      	mov	r4, r0
 8019372:	d001      	beq.n	8019378 <cleanup_stdio+0x10>
 8019374:	f001 f916 	bl	801a5a4 <_fflush_r>
 8019378:	68a1      	ldr	r1, [r4, #8]
 801937a:	4b09      	ldr	r3, [pc, #36]	@ (80193a0 <cleanup_stdio+0x38>)
 801937c:	4299      	cmp	r1, r3
 801937e:	d002      	beq.n	8019386 <cleanup_stdio+0x1e>
 8019380:	4620      	mov	r0, r4
 8019382:	f001 f90f 	bl	801a5a4 <_fflush_r>
 8019386:	68e1      	ldr	r1, [r4, #12]
 8019388:	4b06      	ldr	r3, [pc, #24]	@ (80193a4 <cleanup_stdio+0x3c>)
 801938a:	4299      	cmp	r1, r3
 801938c:	d004      	beq.n	8019398 <cleanup_stdio+0x30>
 801938e:	4620      	mov	r0, r4
 8019390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019394:	f001 b906 	b.w	801a5a4 <_fflush_r>
 8019398:	bd10      	pop	{r4, pc}
 801939a:	bf00      	nop
 801939c:	20015a08 	.word	0x20015a08
 80193a0:	20015a70 	.word	0x20015a70
 80193a4:	20015ad8 	.word	0x20015ad8

080193a8 <global_stdio_init.part.0>:
 80193a8:	b510      	push	{r4, lr}
 80193aa:	4b0b      	ldr	r3, [pc, #44]	@ (80193d8 <global_stdio_init.part.0+0x30>)
 80193ac:	4c0b      	ldr	r4, [pc, #44]	@ (80193dc <global_stdio_init.part.0+0x34>)
 80193ae:	4a0c      	ldr	r2, [pc, #48]	@ (80193e0 <global_stdio_init.part.0+0x38>)
 80193b0:	601a      	str	r2, [r3, #0]
 80193b2:	4620      	mov	r0, r4
 80193b4:	2200      	movs	r2, #0
 80193b6:	2104      	movs	r1, #4
 80193b8:	f7ff ff94 	bl	80192e4 <std>
 80193bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80193c0:	2201      	movs	r2, #1
 80193c2:	2109      	movs	r1, #9
 80193c4:	f7ff ff8e 	bl	80192e4 <std>
 80193c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80193cc:	2202      	movs	r2, #2
 80193ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193d2:	2112      	movs	r1, #18
 80193d4:	f7ff bf86 	b.w	80192e4 <std>
 80193d8:	20015b40 	.word	0x20015b40
 80193dc:	20015a08 	.word	0x20015a08
 80193e0:	08019351 	.word	0x08019351

080193e4 <__sfp_lock_acquire>:
 80193e4:	4801      	ldr	r0, [pc, #4]	@ (80193ec <__sfp_lock_acquire+0x8>)
 80193e6:	f000 bba4 	b.w	8019b32 <__retarget_lock_acquire_recursive>
 80193ea:	bf00      	nop
 80193ec:	20015b46 	.word	0x20015b46

080193f0 <__sfp_lock_release>:
 80193f0:	4801      	ldr	r0, [pc, #4]	@ (80193f8 <__sfp_lock_release+0x8>)
 80193f2:	f000 bb9f 	b.w	8019b34 <__retarget_lock_release_recursive>
 80193f6:	bf00      	nop
 80193f8:	20015b46 	.word	0x20015b46

080193fc <__sinit>:
 80193fc:	b510      	push	{r4, lr}
 80193fe:	4604      	mov	r4, r0
 8019400:	f7ff fff0 	bl	80193e4 <__sfp_lock_acquire>
 8019404:	6a23      	ldr	r3, [r4, #32]
 8019406:	b11b      	cbz	r3, 8019410 <__sinit+0x14>
 8019408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801940c:	f7ff bff0 	b.w	80193f0 <__sfp_lock_release>
 8019410:	4b04      	ldr	r3, [pc, #16]	@ (8019424 <__sinit+0x28>)
 8019412:	6223      	str	r3, [r4, #32]
 8019414:	4b04      	ldr	r3, [pc, #16]	@ (8019428 <__sinit+0x2c>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d1f5      	bne.n	8019408 <__sinit+0xc>
 801941c:	f7ff ffc4 	bl	80193a8 <global_stdio_init.part.0>
 8019420:	e7f2      	b.n	8019408 <__sinit+0xc>
 8019422:	bf00      	nop
 8019424:	08019369 	.word	0x08019369
 8019428:	20015b40 	.word	0x20015b40

0801942c <_realloc_r>:
 801942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019430:	4680      	mov	r8, r0
 8019432:	4615      	mov	r5, r2
 8019434:	460c      	mov	r4, r1
 8019436:	b921      	cbnz	r1, 8019442 <_realloc_r+0x16>
 8019438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801943c:	4611      	mov	r1, r2
 801943e:	f7ff be1d 	b.w	801907c <_malloc_r>
 8019442:	b92a      	cbnz	r2, 8019450 <_realloc_r+0x24>
 8019444:	f000 fbb8 	bl	8019bb8 <_free_r>
 8019448:	2400      	movs	r4, #0
 801944a:	4620      	mov	r0, r4
 801944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019450:	f001 f8d0 	bl	801a5f4 <_malloc_usable_size_r>
 8019454:	4285      	cmp	r5, r0
 8019456:	4606      	mov	r6, r0
 8019458:	d802      	bhi.n	8019460 <_realloc_r+0x34>
 801945a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801945e:	d8f4      	bhi.n	801944a <_realloc_r+0x1e>
 8019460:	4629      	mov	r1, r5
 8019462:	4640      	mov	r0, r8
 8019464:	f7ff fe0a 	bl	801907c <_malloc_r>
 8019468:	4607      	mov	r7, r0
 801946a:	2800      	cmp	r0, #0
 801946c:	d0ec      	beq.n	8019448 <_realloc_r+0x1c>
 801946e:	42b5      	cmp	r5, r6
 8019470:	462a      	mov	r2, r5
 8019472:	4621      	mov	r1, r4
 8019474:	bf28      	it	cs
 8019476:	4632      	movcs	r2, r6
 8019478:	f000 fb5d 	bl	8019b36 <memcpy>
 801947c:	4621      	mov	r1, r4
 801947e:	4640      	mov	r0, r8
 8019480:	f000 fb9a 	bl	8019bb8 <_free_r>
 8019484:	463c      	mov	r4, r7
 8019486:	e7e0      	b.n	801944a <_realloc_r+0x1e>

08019488 <_strtoul_l.constprop.0>:
 8019488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801948c:	4e34      	ldr	r6, [pc, #208]	@ (8019560 <_strtoul_l.constprop.0+0xd8>)
 801948e:	4686      	mov	lr, r0
 8019490:	460d      	mov	r5, r1
 8019492:	4628      	mov	r0, r5
 8019494:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019498:	5d37      	ldrb	r7, [r6, r4]
 801949a:	f017 0708 	ands.w	r7, r7, #8
 801949e:	d1f8      	bne.n	8019492 <_strtoul_l.constprop.0+0xa>
 80194a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80194a2:	d12f      	bne.n	8019504 <_strtoul_l.constprop.0+0x7c>
 80194a4:	782c      	ldrb	r4, [r5, #0]
 80194a6:	2701      	movs	r7, #1
 80194a8:	1c85      	adds	r5, r0, #2
 80194aa:	f033 0010 	bics.w	r0, r3, #16
 80194ae:	d109      	bne.n	80194c4 <_strtoul_l.constprop.0+0x3c>
 80194b0:	2c30      	cmp	r4, #48	@ 0x30
 80194b2:	d12c      	bne.n	801950e <_strtoul_l.constprop.0+0x86>
 80194b4:	7828      	ldrb	r0, [r5, #0]
 80194b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80194ba:	2858      	cmp	r0, #88	@ 0x58
 80194bc:	d127      	bne.n	801950e <_strtoul_l.constprop.0+0x86>
 80194be:	786c      	ldrb	r4, [r5, #1]
 80194c0:	2310      	movs	r3, #16
 80194c2:	3502      	adds	r5, #2
 80194c4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80194c8:	2600      	movs	r6, #0
 80194ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80194ce:	fb03 f908 	mul.w	r9, r3, r8
 80194d2:	ea6f 0909 	mvn.w	r9, r9
 80194d6:	4630      	mov	r0, r6
 80194d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80194dc:	f1bc 0f09 	cmp.w	ip, #9
 80194e0:	d81c      	bhi.n	801951c <_strtoul_l.constprop.0+0x94>
 80194e2:	4664      	mov	r4, ip
 80194e4:	42a3      	cmp	r3, r4
 80194e6:	dd2a      	ble.n	801953e <_strtoul_l.constprop.0+0xb6>
 80194e8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80194ec:	d007      	beq.n	80194fe <_strtoul_l.constprop.0+0x76>
 80194ee:	4580      	cmp	r8, r0
 80194f0:	d322      	bcc.n	8019538 <_strtoul_l.constprop.0+0xb0>
 80194f2:	d101      	bne.n	80194f8 <_strtoul_l.constprop.0+0x70>
 80194f4:	45a1      	cmp	r9, r4
 80194f6:	db1f      	blt.n	8019538 <_strtoul_l.constprop.0+0xb0>
 80194f8:	fb00 4003 	mla	r0, r0, r3, r4
 80194fc:	2601      	movs	r6, #1
 80194fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019502:	e7e9      	b.n	80194d8 <_strtoul_l.constprop.0+0x50>
 8019504:	2c2b      	cmp	r4, #43	@ 0x2b
 8019506:	bf04      	itt	eq
 8019508:	782c      	ldrbeq	r4, [r5, #0]
 801950a:	1c85      	addeq	r5, r0, #2
 801950c:	e7cd      	b.n	80194aa <_strtoul_l.constprop.0+0x22>
 801950e:	2b00      	cmp	r3, #0
 8019510:	d1d8      	bne.n	80194c4 <_strtoul_l.constprop.0+0x3c>
 8019512:	2c30      	cmp	r4, #48	@ 0x30
 8019514:	bf0c      	ite	eq
 8019516:	2308      	moveq	r3, #8
 8019518:	230a      	movne	r3, #10
 801951a:	e7d3      	b.n	80194c4 <_strtoul_l.constprop.0+0x3c>
 801951c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019520:	f1bc 0f19 	cmp.w	ip, #25
 8019524:	d801      	bhi.n	801952a <_strtoul_l.constprop.0+0xa2>
 8019526:	3c37      	subs	r4, #55	@ 0x37
 8019528:	e7dc      	b.n	80194e4 <_strtoul_l.constprop.0+0x5c>
 801952a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801952e:	f1bc 0f19 	cmp.w	ip, #25
 8019532:	d804      	bhi.n	801953e <_strtoul_l.constprop.0+0xb6>
 8019534:	3c57      	subs	r4, #87	@ 0x57
 8019536:	e7d5      	b.n	80194e4 <_strtoul_l.constprop.0+0x5c>
 8019538:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801953c:	e7df      	b.n	80194fe <_strtoul_l.constprop.0+0x76>
 801953e:	1c73      	adds	r3, r6, #1
 8019540:	d106      	bne.n	8019550 <_strtoul_l.constprop.0+0xc8>
 8019542:	2322      	movs	r3, #34	@ 0x22
 8019544:	f8ce 3000 	str.w	r3, [lr]
 8019548:	4630      	mov	r0, r6
 801954a:	b932      	cbnz	r2, 801955a <_strtoul_l.constprop.0+0xd2>
 801954c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019550:	b107      	cbz	r7, 8019554 <_strtoul_l.constprop.0+0xcc>
 8019552:	4240      	negs	r0, r0
 8019554:	2a00      	cmp	r2, #0
 8019556:	d0f9      	beq.n	801954c <_strtoul_l.constprop.0+0xc4>
 8019558:	b106      	cbz	r6, 801955c <_strtoul_l.constprop.0+0xd4>
 801955a:	1e69      	subs	r1, r5, #1
 801955c:	6011      	str	r1, [r2, #0]
 801955e:	e7f5      	b.n	801954c <_strtoul_l.constprop.0+0xc4>
 8019560:	0801c7d6 	.word	0x0801c7d6

08019564 <strtoul>:
 8019564:	4613      	mov	r3, r2
 8019566:	460a      	mov	r2, r1
 8019568:	4601      	mov	r1, r0
 801956a:	4802      	ldr	r0, [pc, #8]	@ (8019574 <strtoul+0x10>)
 801956c:	6800      	ldr	r0, [r0, #0]
 801956e:	f7ff bf8b 	b.w	8019488 <_strtoul_l.constprop.0>
 8019572:	bf00      	nop
 8019574:	20000a74 	.word	0x20000a74

08019578 <_fwalk_sglue>:
 8019578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801957c:	4607      	mov	r7, r0
 801957e:	4688      	mov	r8, r1
 8019580:	4614      	mov	r4, r2
 8019582:	2600      	movs	r6, #0
 8019584:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019588:	f1b9 0901 	subs.w	r9, r9, #1
 801958c:	d505      	bpl.n	801959a <_fwalk_sglue+0x22>
 801958e:	6824      	ldr	r4, [r4, #0]
 8019590:	2c00      	cmp	r4, #0
 8019592:	d1f7      	bne.n	8019584 <_fwalk_sglue+0xc>
 8019594:	4630      	mov	r0, r6
 8019596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801959a:	89ab      	ldrh	r3, [r5, #12]
 801959c:	2b01      	cmp	r3, #1
 801959e:	d907      	bls.n	80195b0 <_fwalk_sglue+0x38>
 80195a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80195a4:	3301      	adds	r3, #1
 80195a6:	d003      	beq.n	80195b0 <_fwalk_sglue+0x38>
 80195a8:	4629      	mov	r1, r5
 80195aa:	4638      	mov	r0, r7
 80195ac:	47c0      	blx	r8
 80195ae:	4306      	orrs	r6, r0
 80195b0:	3568      	adds	r5, #104	@ 0x68
 80195b2:	e7e9      	b.n	8019588 <_fwalk_sglue+0x10>

080195b4 <_vsniprintf_r>:
 80195b4:	b530      	push	{r4, r5, lr}
 80195b6:	4614      	mov	r4, r2
 80195b8:	2c00      	cmp	r4, #0
 80195ba:	b09b      	sub	sp, #108	@ 0x6c
 80195bc:	4605      	mov	r5, r0
 80195be:	461a      	mov	r2, r3
 80195c0:	da05      	bge.n	80195ce <_vsniprintf_r+0x1a>
 80195c2:	238b      	movs	r3, #139	@ 0x8b
 80195c4:	6003      	str	r3, [r0, #0]
 80195c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195ca:	b01b      	add	sp, #108	@ 0x6c
 80195cc:	bd30      	pop	{r4, r5, pc}
 80195ce:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80195d2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80195d6:	bf14      	ite	ne
 80195d8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80195dc:	4623      	moveq	r3, r4
 80195de:	9302      	str	r3, [sp, #8]
 80195e0:	9305      	str	r3, [sp, #20]
 80195e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80195e6:	9100      	str	r1, [sp, #0]
 80195e8:	9104      	str	r1, [sp, #16]
 80195ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80195ee:	4669      	mov	r1, sp
 80195f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80195f2:	f000 fb87 	bl	8019d04 <_svfiprintf_r>
 80195f6:	1c43      	adds	r3, r0, #1
 80195f8:	bfbc      	itt	lt
 80195fa:	238b      	movlt	r3, #139	@ 0x8b
 80195fc:	602b      	strlt	r3, [r5, #0]
 80195fe:	2c00      	cmp	r4, #0
 8019600:	d0e3      	beq.n	80195ca <_vsniprintf_r+0x16>
 8019602:	9b00      	ldr	r3, [sp, #0]
 8019604:	2200      	movs	r2, #0
 8019606:	701a      	strb	r2, [r3, #0]
 8019608:	e7df      	b.n	80195ca <_vsniprintf_r+0x16>
	...

0801960c <vsniprintf>:
 801960c:	b507      	push	{r0, r1, r2, lr}
 801960e:	9300      	str	r3, [sp, #0]
 8019610:	4613      	mov	r3, r2
 8019612:	460a      	mov	r2, r1
 8019614:	4601      	mov	r1, r0
 8019616:	4803      	ldr	r0, [pc, #12]	@ (8019624 <vsniprintf+0x18>)
 8019618:	6800      	ldr	r0, [r0, #0]
 801961a:	f7ff ffcb 	bl	80195b4 <_vsniprintf_r>
 801961e:	b003      	add	sp, #12
 8019620:	f85d fb04 	ldr.w	pc, [sp], #4
 8019624:	20000a74 	.word	0x20000a74

08019628 <_fwrite_r>:
 8019628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801962c:	9c08      	ldr	r4, [sp, #32]
 801962e:	468a      	mov	sl, r1
 8019630:	4690      	mov	r8, r2
 8019632:	fb02 f903 	mul.w	r9, r2, r3
 8019636:	4606      	mov	r6, r0
 8019638:	b118      	cbz	r0, 8019642 <_fwrite_r+0x1a>
 801963a:	6a03      	ldr	r3, [r0, #32]
 801963c:	b90b      	cbnz	r3, 8019642 <_fwrite_r+0x1a>
 801963e:	f7ff fedd 	bl	80193fc <__sinit>
 8019642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019644:	07dd      	lsls	r5, r3, #31
 8019646:	d405      	bmi.n	8019654 <_fwrite_r+0x2c>
 8019648:	89a3      	ldrh	r3, [r4, #12]
 801964a:	0598      	lsls	r0, r3, #22
 801964c:	d402      	bmi.n	8019654 <_fwrite_r+0x2c>
 801964e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019650:	f000 fa6f 	bl	8019b32 <__retarget_lock_acquire_recursive>
 8019654:	89a3      	ldrh	r3, [r4, #12]
 8019656:	0719      	lsls	r1, r3, #28
 8019658:	d516      	bpl.n	8019688 <_fwrite_r+0x60>
 801965a:	6923      	ldr	r3, [r4, #16]
 801965c:	b1a3      	cbz	r3, 8019688 <_fwrite_r+0x60>
 801965e:	2500      	movs	r5, #0
 8019660:	454d      	cmp	r5, r9
 8019662:	d01f      	beq.n	80196a4 <_fwrite_r+0x7c>
 8019664:	68a7      	ldr	r7, [r4, #8]
 8019666:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801966a:	3f01      	subs	r7, #1
 801966c:	2f00      	cmp	r7, #0
 801966e:	60a7      	str	r7, [r4, #8]
 8019670:	da04      	bge.n	801967c <_fwrite_r+0x54>
 8019672:	69a3      	ldr	r3, [r4, #24]
 8019674:	429f      	cmp	r7, r3
 8019676:	db0f      	blt.n	8019698 <_fwrite_r+0x70>
 8019678:	290a      	cmp	r1, #10
 801967a:	d00d      	beq.n	8019698 <_fwrite_r+0x70>
 801967c:	6823      	ldr	r3, [r4, #0]
 801967e:	1c5a      	adds	r2, r3, #1
 8019680:	6022      	str	r2, [r4, #0]
 8019682:	7019      	strb	r1, [r3, #0]
 8019684:	3501      	adds	r5, #1
 8019686:	e7eb      	b.n	8019660 <_fwrite_r+0x38>
 8019688:	4621      	mov	r1, r4
 801968a:	4630      	mov	r0, r6
 801968c:	f000 f864 	bl	8019758 <__swsetup_r>
 8019690:	2800      	cmp	r0, #0
 8019692:	d0e4      	beq.n	801965e <_fwrite_r+0x36>
 8019694:	2500      	movs	r5, #0
 8019696:	e005      	b.n	80196a4 <_fwrite_r+0x7c>
 8019698:	4622      	mov	r2, r4
 801969a:	4630      	mov	r0, r6
 801969c:	f000 f81e 	bl	80196dc <__swbuf_r>
 80196a0:	3001      	adds	r0, #1
 80196a2:	d1ef      	bne.n	8019684 <_fwrite_r+0x5c>
 80196a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196a6:	07da      	lsls	r2, r3, #31
 80196a8:	d405      	bmi.n	80196b6 <_fwrite_r+0x8e>
 80196aa:	89a3      	ldrh	r3, [r4, #12]
 80196ac:	059b      	lsls	r3, r3, #22
 80196ae:	d402      	bmi.n	80196b6 <_fwrite_r+0x8e>
 80196b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196b2:	f000 fa3f 	bl	8019b34 <__retarget_lock_release_recursive>
 80196b6:	fbb5 f0f8 	udiv	r0, r5, r8
 80196ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080196c0 <fwrite>:
 80196c0:	b507      	push	{r0, r1, r2, lr}
 80196c2:	9300      	str	r3, [sp, #0]
 80196c4:	4613      	mov	r3, r2
 80196c6:	460a      	mov	r2, r1
 80196c8:	4601      	mov	r1, r0
 80196ca:	4803      	ldr	r0, [pc, #12]	@ (80196d8 <fwrite+0x18>)
 80196cc:	6800      	ldr	r0, [r0, #0]
 80196ce:	f7ff ffab 	bl	8019628 <_fwrite_r>
 80196d2:	b003      	add	sp, #12
 80196d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80196d8:	20000a74 	.word	0x20000a74

080196dc <__swbuf_r>:
 80196dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196de:	460e      	mov	r6, r1
 80196e0:	4614      	mov	r4, r2
 80196e2:	4605      	mov	r5, r0
 80196e4:	b118      	cbz	r0, 80196ee <__swbuf_r+0x12>
 80196e6:	6a03      	ldr	r3, [r0, #32]
 80196e8:	b90b      	cbnz	r3, 80196ee <__swbuf_r+0x12>
 80196ea:	f7ff fe87 	bl	80193fc <__sinit>
 80196ee:	69a3      	ldr	r3, [r4, #24]
 80196f0:	60a3      	str	r3, [r4, #8]
 80196f2:	89a3      	ldrh	r3, [r4, #12]
 80196f4:	071a      	lsls	r2, r3, #28
 80196f6:	d501      	bpl.n	80196fc <__swbuf_r+0x20>
 80196f8:	6923      	ldr	r3, [r4, #16]
 80196fa:	b943      	cbnz	r3, 801970e <__swbuf_r+0x32>
 80196fc:	4621      	mov	r1, r4
 80196fe:	4628      	mov	r0, r5
 8019700:	f000 f82a 	bl	8019758 <__swsetup_r>
 8019704:	b118      	cbz	r0, 801970e <__swbuf_r+0x32>
 8019706:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801970a:	4638      	mov	r0, r7
 801970c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801970e:	6823      	ldr	r3, [r4, #0]
 8019710:	6922      	ldr	r2, [r4, #16]
 8019712:	1a98      	subs	r0, r3, r2
 8019714:	6963      	ldr	r3, [r4, #20]
 8019716:	b2f6      	uxtb	r6, r6
 8019718:	4283      	cmp	r3, r0
 801971a:	4637      	mov	r7, r6
 801971c:	dc05      	bgt.n	801972a <__swbuf_r+0x4e>
 801971e:	4621      	mov	r1, r4
 8019720:	4628      	mov	r0, r5
 8019722:	f000 ff3f 	bl	801a5a4 <_fflush_r>
 8019726:	2800      	cmp	r0, #0
 8019728:	d1ed      	bne.n	8019706 <__swbuf_r+0x2a>
 801972a:	68a3      	ldr	r3, [r4, #8]
 801972c:	3b01      	subs	r3, #1
 801972e:	60a3      	str	r3, [r4, #8]
 8019730:	6823      	ldr	r3, [r4, #0]
 8019732:	1c5a      	adds	r2, r3, #1
 8019734:	6022      	str	r2, [r4, #0]
 8019736:	701e      	strb	r6, [r3, #0]
 8019738:	6962      	ldr	r2, [r4, #20]
 801973a:	1c43      	adds	r3, r0, #1
 801973c:	429a      	cmp	r2, r3
 801973e:	d004      	beq.n	801974a <__swbuf_r+0x6e>
 8019740:	89a3      	ldrh	r3, [r4, #12]
 8019742:	07db      	lsls	r3, r3, #31
 8019744:	d5e1      	bpl.n	801970a <__swbuf_r+0x2e>
 8019746:	2e0a      	cmp	r6, #10
 8019748:	d1df      	bne.n	801970a <__swbuf_r+0x2e>
 801974a:	4621      	mov	r1, r4
 801974c:	4628      	mov	r0, r5
 801974e:	f000 ff29 	bl	801a5a4 <_fflush_r>
 8019752:	2800      	cmp	r0, #0
 8019754:	d0d9      	beq.n	801970a <__swbuf_r+0x2e>
 8019756:	e7d6      	b.n	8019706 <__swbuf_r+0x2a>

08019758 <__swsetup_r>:
 8019758:	b538      	push	{r3, r4, r5, lr}
 801975a:	4b29      	ldr	r3, [pc, #164]	@ (8019800 <__swsetup_r+0xa8>)
 801975c:	4605      	mov	r5, r0
 801975e:	6818      	ldr	r0, [r3, #0]
 8019760:	460c      	mov	r4, r1
 8019762:	b118      	cbz	r0, 801976c <__swsetup_r+0x14>
 8019764:	6a03      	ldr	r3, [r0, #32]
 8019766:	b90b      	cbnz	r3, 801976c <__swsetup_r+0x14>
 8019768:	f7ff fe48 	bl	80193fc <__sinit>
 801976c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019770:	0719      	lsls	r1, r3, #28
 8019772:	d422      	bmi.n	80197ba <__swsetup_r+0x62>
 8019774:	06da      	lsls	r2, r3, #27
 8019776:	d407      	bmi.n	8019788 <__swsetup_r+0x30>
 8019778:	2209      	movs	r2, #9
 801977a:	602a      	str	r2, [r5, #0]
 801977c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019780:	81a3      	strh	r3, [r4, #12]
 8019782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019786:	e033      	b.n	80197f0 <__swsetup_r+0x98>
 8019788:	0758      	lsls	r0, r3, #29
 801978a:	d512      	bpl.n	80197b2 <__swsetup_r+0x5a>
 801978c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801978e:	b141      	cbz	r1, 80197a2 <__swsetup_r+0x4a>
 8019790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019794:	4299      	cmp	r1, r3
 8019796:	d002      	beq.n	801979e <__swsetup_r+0x46>
 8019798:	4628      	mov	r0, r5
 801979a:	f000 fa0d 	bl	8019bb8 <_free_r>
 801979e:	2300      	movs	r3, #0
 80197a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80197a2:	89a3      	ldrh	r3, [r4, #12]
 80197a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80197a8:	81a3      	strh	r3, [r4, #12]
 80197aa:	2300      	movs	r3, #0
 80197ac:	6063      	str	r3, [r4, #4]
 80197ae:	6923      	ldr	r3, [r4, #16]
 80197b0:	6023      	str	r3, [r4, #0]
 80197b2:	89a3      	ldrh	r3, [r4, #12]
 80197b4:	f043 0308 	orr.w	r3, r3, #8
 80197b8:	81a3      	strh	r3, [r4, #12]
 80197ba:	6923      	ldr	r3, [r4, #16]
 80197bc:	b94b      	cbnz	r3, 80197d2 <__swsetup_r+0x7a>
 80197be:	89a3      	ldrh	r3, [r4, #12]
 80197c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80197c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80197c8:	d003      	beq.n	80197d2 <__swsetup_r+0x7a>
 80197ca:	4621      	mov	r1, r4
 80197cc:	4628      	mov	r0, r5
 80197ce:	f000 f83f 	bl	8019850 <__smakebuf_r>
 80197d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197d6:	f013 0201 	ands.w	r2, r3, #1
 80197da:	d00a      	beq.n	80197f2 <__swsetup_r+0x9a>
 80197dc:	2200      	movs	r2, #0
 80197de:	60a2      	str	r2, [r4, #8]
 80197e0:	6962      	ldr	r2, [r4, #20]
 80197e2:	4252      	negs	r2, r2
 80197e4:	61a2      	str	r2, [r4, #24]
 80197e6:	6922      	ldr	r2, [r4, #16]
 80197e8:	b942      	cbnz	r2, 80197fc <__swsetup_r+0xa4>
 80197ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80197ee:	d1c5      	bne.n	801977c <__swsetup_r+0x24>
 80197f0:	bd38      	pop	{r3, r4, r5, pc}
 80197f2:	0799      	lsls	r1, r3, #30
 80197f4:	bf58      	it	pl
 80197f6:	6962      	ldrpl	r2, [r4, #20]
 80197f8:	60a2      	str	r2, [r4, #8]
 80197fa:	e7f4      	b.n	80197e6 <__swsetup_r+0x8e>
 80197fc:	2000      	movs	r0, #0
 80197fe:	e7f7      	b.n	80197f0 <__swsetup_r+0x98>
 8019800:	20000a74 	.word	0x20000a74

08019804 <__swhatbuf_r>:
 8019804:	b570      	push	{r4, r5, r6, lr}
 8019806:	460c      	mov	r4, r1
 8019808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801980c:	2900      	cmp	r1, #0
 801980e:	b096      	sub	sp, #88	@ 0x58
 8019810:	4615      	mov	r5, r2
 8019812:	461e      	mov	r6, r3
 8019814:	da0d      	bge.n	8019832 <__swhatbuf_r+0x2e>
 8019816:	89a3      	ldrh	r3, [r4, #12]
 8019818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801981c:	f04f 0100 	mov.w	r1, #0
 8019820:	bf14      	ite	ne
 8019822:	2340      	movne	r3, #64	@ 0x40
 8019824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019828:	2000      	movs	r0, #0
 801982a:	6031      	str	r1, [r6, #0]
 801982c:	602b      	str	r3, [r5, #0]
 801982e:	b016      	add	sp, #88	@ 0x58
 8019830:	bd70      	pop	{r4, r5, r6, pc}
 8019832:	466a      	mov	r2, sp
 8019834:	f000 f920 	bl	8019a78 <_fstat_r>
 8019838:	2800      	cmp	r0, #0
 801983a:	dbec      	blt.n	8019816 <__swhatbuf_r+0x12>
 801983c:	9901      	ldr	r1, [sp, #4]
 801983e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019846:	4259      	negs	r1, r3
 8019848:	4159      	adcs	r1, r3
 801984a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801984e:	e7eb      	b.n	8019828 <__swhatbuf_r+0x24>

08019850 <__smakebuf_r>:
 8019850:	898b      	ldrh	r3, [r1, #12]
 8019852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019854:	079d      	lsls	r5, r3, #30
 8019856:	4606      	mov	r6, r0
 8019858:	460c      	mov	r4, r1
 801985a:	d507      	bpl.n	801986c <__smakebuf_r+0x1c>
 801985c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019860:	6023      	str	r3, [r4, #0]
 8019862:	6123      	str	r3, [r4, #16]
 8019864:	2301      	movs	r3, #1
 8019866:	6163      	str	r3, [r4, #20]
 8019868:	b003      	add	sp, #12
 801986a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801986c:	ab01      	add	r3, sp, #4
 801986e:	466a      	mov	r2, sp
 8019870:	f7ff ffc8 	bl	8019804 <__swhatbuf_r>
 8019874:	9f00      	ldr	r7, [sp, #0]
 8019876:	4605      	mov	r5, r0
 8019878:	4639      	mov	r1, r7
 801987a:	4630      	mov	r0, r6
 801987c:	f7ff fbfe 	bl	801907c <_malloc_r>
 8019880:	b948      	cbnz	r0, 8019896 <__smakebuf_r+0x46>
 8019882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019886:	059a      	lsls	r2, r3, #22
 8019888:	d4ee      	bmi.n	8019868 <__smakebuf_r+0x18>
 801988a:	f023 0303 	bic.w	r3, r3, #3
 801988e:	f043 0302 	orr.w	r3, r3, #2
 8019892:	81a3      	strh	r3, [r4, #12]
 8019894:	e7e2      	b.n	801985c <__smakebuf_r+0xc>
 8019896:	89a3      	ldrh	r3, [r4, #12]
 8019898:	6020      	str	r0, [r4, #0]
 801989a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801989e:	81a3      	strh	r3, [r4, #12]
 80198a0:	9b01      	ldr	r3, [sp, #4]
 80198a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80198a6:	b15b      	cbz	r3, 80198c0 <__smakebuf_r+0x70>
 80198a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80198ac:	4630      	mov	r0, r6
 80198ae:	f000 f8f5 	bl	8019a9c <_isatty_r>
 80198b2:	b128      	cbz	r0, 80198c0 <__smakebuf_r+0x70>
 80198b4:	89a3      	ldrh	r3, [r4, #12]
 80198b6:	f023 0303 	bic.w	r3, r3, #3
 80198ba:	f043 0301 	orr.w	r3, r3, #1
 80198be:	81a3      	strh	r3, [r4, #12]
 80198c0:	89a3      	ldrh	r3, [r4, #12]
 80198c2:	431d      	orrs	r5, r3
 80198c4:	81a5      	strh	r5, [r4, #12]
 80198c6:	e7cf      	b.n	8019868 <__smakebuf_r+0x18>

080198c8 <iprintf>:
 80198c8:	b40f      	push	{r0, r1, r2, r3}
 80198ca:	b507      	push	{r0, r1, r2, lr}
 80198cc:	4906      	ldr	r1, [pc, #24]	@ (80198e8 <iprintf+0x20>)
 80198ce:	ab04      	add	r3, sp, #16
 80198d0:	6808      	ldr	r0, [r1, #0]
 80198d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80198d6:	6881      	ldr	r1, [r0, #8]
 80198d8:	9301      	str	r3, [sp, #4]
 80198da:	f000 fb39 	bl	8019f50 <_vfiprintf_r>
 80198de:	b003      	add	sp, #12
 80198e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80198e4:	b004      	add	sp, #16
 80198e6:	4770      	bx	lr
 80198e8:	20000a74 	.word	0x20000a74

080198ec <_puts_r>:
 80198ec:	6a03      	ldr	r3, [r0, #32]
 80198ee:	b570      	push	{r4, r5, r6, lr}
 80198f0:	6884      	ldr	r4, [r0, #8]
 80198f2:	4605      	mov	r5, r0
 80198f4:	460e      	mov	r6, r1
 80198f6:	b90b      	cbnz	r3, 80198fc <_puts_r+0x10>
 80198f8:	f7ff fd80 	bl	80193fc <__sinit>
 80198fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80198fe:	07db      	lsls	r3, r3, #31
 8019900:	d405      	bmi.n	801990e <_puts_r+0x22>
 8019902:	89a3      	ldrh	r3, [r4, #12]
 8019904:	0598      	lsls	r0, r3, #22
 8019906:	d402      	bmi.n	801990e <_puts_r+0x22>
 8019908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801990a:	f000 f912 	bl	8019b32 <__retarget_lock_acquire_recursive>
 801990e:	89a3      	ldrh	r3, [r4, #12]
 8019910:	0719      	lsls	r1, r3, #28
 8019912:	d502      	bpl.n	801991a <_puts_r+0x2e>
 8019914:	6923      	ldr	r3, [r4, #16]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d135      	bne.n	8019986 <_puts_r+0x9a>
 801991a:	4621      	mov	r1, r4
 801991c:	4628      	mov	r0, r5
 801991e:	f7ff ff1b 	bl	8019758 <__swsetup_r>
 8019922:	b380      	cbz	r0, 8019986 <_puts_r+0x9a>
 8019924:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8019928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801992a:	07da      	lsls	r2, r3, #31
 801992c:	d405      	bmi.n	801993a <_puts_r+0x4e>
 801992e:	89a3      	ldrh	r3, [r4, #12]
 8019930:	059b      	lsls	r3, r3, #22
 8019932:	d402      	bmi.n	801993a <_puts_r+0x4e>
 8019934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019936:	f000 f8fd 	bl	8019b34 <__retarget_lock_release_recursive>
 801993a:	4628      	mov	r0, r5
 801993c:	bd70      	pop	{r4, r5, r6, pc}
 801993e:	2b00      	cmp	r3, #0
 8019940:	da04      	bge.n	801994c <_puts_r+0x60>
 8019942:	69a2      	ldr	r2, [r4, #24]
 8019944:	429a      	cmp	r2, r3
 8019946:	dc17      	bgt.n	8019978 <_puts_r+0x8c>
 8019948:	290a      	cmp	r1, #10
 801994a:	d015      	beq.n	8019978 <_puts_r+0x8c>
 801994c:	6823      	ldr	r3, [r4, #0]
 801994e:	1c5a      	adds	r2, r3, #1
 8019950:	6022      	str	r2, [r4, #0]
 8019952:	7019      	strb	r1, [r3, #0]
 8019954:	68a3      	ldr	r3, [r4, #8]
 8019956:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801995a:	3b01      	subs	r3, #1
 801995c:	60a3      	str	r3, [r4, #8]
 801995e:	2900      	cmp	r1, #0
 8019960:	d1ed      	bne.n	801993e <_puts_r+0x52>
 8019962:	2b00      	cmp	r3, #0
 8019964:	da11      	bge.n	801998a <_puts_r+0x9e>
 8019966:	4622      	mov	r2, r4
 8019968:	210a      	movs	r1, #10
 801996a:	4628      	mov	r0, r5
 801996c:	f7ff feb6 	bl	80196dc <__swbuf_r>
 8019970:	3001      	adds	r0, #1
 8019972:	d0d7      	beq.n	8019924 <_puts_r+0x38>
 8019974:	250a      	movs	r5, #10
 8019976:	e7d7      	b.n	8019928 <_puts_r+0x3c>
 8019978:	4622      	mov	r2, r4
 801997a:	4628      	mov	r0, r5
 801997c:	f7ff feae 	bl	80196dc <__swbuf_r>
 8019980:	3001      	adds	r0, #1
 8019982:	d1e7      	bne.n	8019954 <_puts_r+0x68>
 8019984:	e7ce      	b.n	8019924 <_puts_r+0x38>
 8019986:	3e01      	subs	r6, #1
 8019988:	e7e4      	b.n	8019954 <_puts_r+0x68>
 801998a:	6823      	ldr	r3, [r4, #0]
 801998c:	1c5a      	adds	r2, r3, #1
 801998e:	6022      	str	r2, [r4, #0]
 8019990:	220a      	movs	r2, #10
 8019992:	701a      	strb	r2, [r3, #0]
 8019994:	e7ee      	b.n	8019974 <_puts_r+0x88>
	...

08019998 <puts>:
 8019998:	4b02      	ldr	r3, [pc, #8]	@ (80199a4 <puts+0xc>)
 801999a:	4601      	mov	r1, r0
 801999c:	6818      	ldr	r0, [r3, #0]
 801999e:	f7ff bfa5 	b.w	80198ec <_puts_r>
 80199a2:	bf00      	nop
 80199a4:	20000a74 	.word	0x20000a74

080199a8 <strchr>:
 80199a8:	b2c9      	uxtb	r1, r1
 80199aa:	4603      	mov	r3, r0
 80199ac:	4618      	mov	r0, r3
 80199ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199b2:	b112      	cbz	r2, 80199ba <strchr+0x12>
 80199b4:	428a      	cmp	r2, r1
 80199b6:	d1f9      	bne.n	80199ac <strchr+0x4>
 80199b8:	4770      	bx	lr
 80199ba:	2900      	cmp	r1, #0
 80199bc:	bf18      	it	ne
 80199be:	2000      	movne	r0, #0
 80199c0:	4770      	bx	lr

080199c2 <strncmp>:
 80199c2:	b510      	push	{r4, lr}
 80199c4:	b16a      	cbz	r2, 80199e2 <strncmp+0x20>
 80199c6:	3901      	subs	r1, #1
 80199c8:	1884      	adds	r4, r0, r2
 80199ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80199d2:	429a      	cmp	r2, r3
 80199d4:	d103      	bne.n	80199de <strncmp+0x1c>
 80199d6:	42a0      	cmp	r0, r4
 80199d8:	d001      	beq.n	80199de <strncmp+0x1c>
 80199da:	2a00      	cmp	r2, #0
 80199dc:	d1f5      	bne.n	80199ca <strncmp+0x8>
 80199de:	1ad0      	subs	r0, r2, r3
 80199e0:	bd10      	pop	{r4, pc}
 80199e2:	4610      	mov	r0, r2
 80199e4:	e7fc      	b.n	80199e0 <strncmp+0x1e>

080199e6 <strstr>:
 80199e6:	780a      	ldrb	r2, [r1, #0]
 80199e8:	b570      	push	{r4, r5, r6, lr}
 80199ea:	b96a      	cbnz	r2, 8019a08 <strstr+0x22>
 80199ec:	bd70      	pop	{r4, r5, r6, pc}
 80199ee:	429a      	cmp	r2, r3
 80199f0:	d109      	bne.n	8019a06 <strstr+0x20>
 80199f2:	460c      	mov	r4, r1
 80199f4:	4605      	mov	r5, r0
 80199f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d0f6      	beq.n	80199ec <strstr+0x6>
 80199fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019a02:	429e      	cmp	r6, r3
 8019a04:	d0f7      	beq.n	80199f6 <strstr+0x10>
 8019a06:	3001      	adds	r0, #1
 8019a08:	7803      	ldrb	r3, [r0, #0]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d1ef      	bne.n	80199ee <strstr+0x8>
 8019a0e:	4618      	mov	r0, r3
 8019a10:	e7ec      	b.n	80199ec <strstr+0x6>

08019a12 <memcmp>:
 8019a12:	b510      	push	{r4, lr}
 8019a14:	3901      	subs	r1, #1
 8019a16:	4402      	add	r2, r0
 8019a18:	4290      	cmp	r0, r2
 8019a1a:	d101      	bne.n	8019a20 <memcmp+0xe>
 8019a1c:	2000      	movs	r0, #0
 8019a1e:	e005      	b.n	8019a2c <memcmp+0x1a>
 8019a20:	7803      	ldrb	r3, [r0, #0]
 8019a22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019a26:	42a3      	cmp	r3, r4
 8019a28:	d001      	beq.n	8019a2e <memcmp+0x1c>
 8019a2a:	1b18      	subs	r0, r3, r4
 8019a2c:	bd10      	pop	{r4, pc}
 8019a2e:	3001      	adds	r0, #1
 8019a30:	e7f2      	b.n	8019a18 <memcmp+0x6>

08019a32 <memmove>:
 8019a32:	4288      	cmp	r0, r1
 8019a34:	b510      	push	{r4, lr}
 8019a36:	eb01 0402 	add.w	r4, r1, r2
 8019a3a:	d902      	bls.n	8019a42 <memmove+0x10>
 8019a3c:	4284      	cmp	r4, r0
 8019a3e:	4623      	mov	r3, r4
 8019a40:	d807      	bhi.n	8019a52 <memmove+0x20>
 8019a42:	1e43      	subs	r3, r0, #1
 8019a44:	42a1      	cmp	r1, r4
 8019a46:	d008      	beq.n	8019a5a <memmove+0x28>
 8019a48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a50:	e7f8      	b.n	8019a44 <memmove+0x12>
 8019a52:	4402      	add	r2, r0
 8019a54:	4601      	mov	r1, r0
 8019a56:	428a      	cmp	r2, r1
 8019a58:	d100      	bne.n	8019a5c <memmove+0x2a>
 8019a5a:	bd10      	pop	{r4, pc}
 8019a5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a64:	e7f7      	b.n	8019a56 <memmove+0x24>

08019a66 <memset>:
 8019a66:	4402      	add	r2, r0
 8019a68:	4603      	mov	r3, r0
 8019a6a:	4293      	cmp	r3, r2
 8019a6c:	d100      	bne.n	8019a70 <memset+0xa>
 8019a6e:	4770      	bx	lr
 8019a70:	f803 1b01 	strb.w	r1, [r3], #1
 8019a74:	e7f9      	b.n	8019a6a <memset+0x4>
	...

08019a78 <_fstat_r>:
 8019a78:	b538      	push	{r3, r4, r5, lr}
 8019a7a:	4d07      	ldr	r5, [pc, #28]	@ (8019a98 <_fstat_r+0x20>)
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	4604      	mov	r4, r0
 8019a80:	4608      	mov	r0, r1
 8019a82:	4611      	mov	r1, r2
 8019a84:	602b      	str	r3, [r5, #0]
 8019a86:	f7e8 fd8b 	bl	80025a0 <_fstat>
 8019a8a:	1c43      	adds	r3, r0, #1
 8019a8c:	d102      	bne.n	8019a94 <_fstat_r+0x1c>
 8019a8e:	682b      	ldr	r3, [r5, #0]
 8019a90:	b103      	cbz	r3, 8019a94 <_fstat_r+0x1c>
 8019a92:	6023      	str	r3, [r4, #0]
 8019a94:	bd38      	pop	{r3, r4, r5, pc}
 8019a96:	bf00      	nop
 8019a98:	20015b48 	.word	0x20015b48

08019a9c <_isatty_r>:
 8019a9c:	b538      	push	{r3, r4, r5, lr}
 8019a9e:	4d06      	ldr	r5, [pc, #24]	@ (8019ab8 <_isatty_r+0x1c>)
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	4604      	mov	r4, r0
 8019aa4:	4608      	mov	r0, r1
 8019aa6:	602b      	str	r3, [r5, #0]
 8019aa8:	f7e8 fd8a 	bl	80025c0 <_isatty>
 8019aac:	1c43      	adds	r3, r0, #1
 8019aae:	d102      	bne.n	8019ab6 <_isatty_r+0x1a>
 8019ab0:	682b      	ldr	r3, [r5, #0]
 8019ab2:	b103      	cbz	r3, 8019ab6 <_isatty_r+0x1a>
 8019ab4:	6023      	str	r3, [r4, #0]
 8019ab6:	bd38      	pop	{r3, r4, r5, pc}
 8019ab8:	20015b48 	.word	0x20015b48

08019abc <_sbrk_r>:
 8019abc:	b538      	push	{r3, r4, r5, lr}
 8019abe:	4d06      	ldr	r5, [pc, #24]	@ (8019ad8 <_sbrk_r+0x1c>)
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	4604      	mov	r4, r0
 8019ac4:	4608      	mov	r0, r1
 8019ac6:	602b      	str	r3, [r5, #0]
 8019ac8:	f7e8 fd92 	bl	80025f0 <_sbrk>
 8019acc:	1c43      	adds	r3, r0, #1
 8019ace:	d102      	bne.n	8019ad6 <_sbrk_r+0x1a>
 8019ad0:	682b      	ldr	r3, [r5, #0]
 8019ad2:	b103      	cbz	r3, 8019ad6 <_sbrk_r+0x1a>
 8019ad4:	6023      	str	r3, [r4, #0]
 8019ad6:	bd38      	pop	{r3, r4, r5, pc}
 8019ad8:	20015b48 	.word	0x20015b48

08019adc <__errno>:
 8019adc:	4b01      	ldr	r3, [pc, #4]	@ (8019ae4 <__errno+0x8>)
 8019ade:	6818      	ldr	r0, [r3, #0]
 8019ae0:	4770      	bx	lr
 8019ae2:	bf00      	nop
 8019ae4:	20000a74 	.word	0x20000a74

08019ae8 <__libc_init_array>:
 8019ae8:	b570      	push	{r4, r5, r6, lr}
 8019aea:	4d0d      	ldr	r5, [pc, #52]	@ (8019b20 <__libc_init_array+0x38>)
 8019aec:	4c0d      	ldr	r4, [pc, #52]	@ (8019b24 <__libc_init_array+0x3c>)
 8019aee:	1b64      	subs	r4, r4, r5
 8019af0:	10a4      	asrs	r4, r4, #2
 8019af2:	2600      	movs	r6, #0
 8019af4:	42a6      	cmp	r6, r4
 8019af6:	d109      	bne.n	8019b0c <__libc_init_array+0x24>
 8019af8:	4d0b      	ldr	r5, [pc, #44]	@ (8019b28 <__libc_init_array+0x40>)
 8019afa:	4c0c      	ldr	r4, [pc, #48]	@ (8019b2c <__libc_init_array+0x44>)
 8019afc:	f001 f8f4 	bl	801ace8 <_init>
 8019b00:	1b64      	subs	r4, r4, r5
 8019b02:	10a4      	asrs	r4, r4, #2
 8019b04:	2600      	movs	r6, #0
 8019b06:	42a6      	cmp	r6, r4
 8019b08:	d105      	bne.n	8019b16 <__libc_init_array+0x2e>
 8019b0a:	bd70      	pop	{r4, r5, r6, pc}
 8019b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b10:	4798      	blx	r3
 8019b12:	3601      	adds	r6, #1
 8019b14:	e7ee      	b.n	8019af4 <__libc_init_array+0xc>
 8019b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b1a:	4798      	blx	r3
 8019b1c:	3601      	adds	r6, #1
 8019b1e:	e7f2      	b.n	8019b06 <__libc_init_array+0x1e>
 8019b20:	0801c9c0 	.word	0x0801c9c0
 8019b24:	0801c9c0 	.word	0x0801c9c0
 8019b28:	0801c9c0 	.word	0x0801c9c0
 8019b2c:	0801c9d8 	.word	0x0801c9d8

08019b30 <__retarget_lock_init_recursive>:
 8019b30:	4770      	bx	lr

08019b32 <__retarget_lock_acquire_recursive>:
 8019b32:	4770      	bx	lr

08019b34 <__retarget_lock_release_recursive>:
 8019b34:	4770      	bx	lr

08019b36 <memcpy>:
 8019b36:	440a      	add	r2, r1
 8019b38:	4291      	cmp	r1, r2
 8019b3a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019b3e:	d100      	bne.n	8019b42 <memcpy+0xc>
 8019b40:	4770      	bx	lr
 8019b42:	b510      	push	{r4, lr}
 8019b44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019b4c:	4291      	cmp	r1, r2
 8019b4e:	d1f9      	bne.n	8019b44 <memcpy+0xe>
 8019b50:	bd10      	pop	{r4, pc}

08019b52 <strcpy>:
 8019b52:	4603      	mov	r3, r0
 8019b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b58:	f803 2b01 	strb.w	r2, [r3], #1
 8019b5c:	2a00      	cmp	r2, #0
 8019b5e:	d1f9      	bne.n	8019b54 <strcpy+0x2>
 8019b60:	4770      	bx	lr
	...

08019b64 <__assert_func>:
 8019b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b66:	4614      	mov	r4, r2
 8019b68:	461a      	mov	r2, r3
 8019b6a:	4b09      	ldr	r3, [pc, #36]	@ (8019b90 <__assert_func+0x2c>)
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	4605      	mov	r5, r0
 8019b70:	68d8      	ldr	r0, [r3, #12]
 8019b72:	b954      	cbnz	r4, 8019b8a <__assert_func+0x26>
 8019b74:	4b07      	ldr	r3, [pc, #28]	@ (8019b94 <__assert_func+0x30>)
 8019b76:	461c      	mov	r4, r3
 8019b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b7c:	9100      	str	r1, [sp, #0]
 8019b7e:	462b      	mov	r3, r5
 8019b80:	4905      	ldr	r1, [pc, #20]	@ (8019b98 <__assert_func+0x34>)
 8019b82:	f000 fd83 	bl	801a68c <fiprintf>
 8019b86:	f000 fdd9 	bl	801a73c <abort>
 8019b8a:	4b04      	ldr	r3, [pc, #16]	@ (8019b9c <__assert_func+0x38>)
 8019b8c:	e7f4      	b.n	8019b78 <__assert_func+0x14>
 8019b8e:	bf00      	nop
 8019b90:	20000a74 	.word	0x20000a74
 8019b94:	0801c911 	.word	0x0801c911
 8019b98:	0801c8e3 	.word	0x0801c8e3
 8019b9c:	0801c8d6 	.word	0x0801c8d6

08019ba0 <__env_lock>:
 8019ba0:	4801      	ldr	r0, [pc, #4]	@ (8019ba8 <__env_lock+0x8>)
 8019ba2:	f7ff bfc6 	b.w	8019b32 <__retarget_lock_acquire_recursive>
 8019ba6:	bf00      	nop
 8019ba8:	20015b44 	.word	0x20015b44

08019bac <__env_unlock>:
 8019bac:	4801      	ldr	r0, [pc, #4]	@ (8019bb4 <__env_unlock+0x8>)
 8019bae:	f7ff bfc1 	b.w	8019b34 <__retarget_lock_release_recursive>
 8019bb2:	bf00      	nop
 8019bb4:	20015b44 	.word	0x20015b44

08019bb8 <_free_r>:
 8019bb8:	b538      	push	{r3, r4, r5, lr}
 8019bba:	4605      	mov	r5, r0
 8019bbc:	2900      	cmp	r1, #0
 8019bbe:	d041      	beq.n	8019c44 <_free_r+0x8c>
 8019bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bc4:	1f0c      	subs	r4, r1, #4
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	bfb8      	it	lt
 8019bca:	18e4      	addlt	r4, r4, r3
 8019bcc:	f7ff fb0a 	bl	80191e4 <__malloc_lock>
 8019bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8019c48 <_free_r+0x90>)
 8019bd2:	6813      	ldr	r3, [r2, #0]
 8019bd4:	b933      	cbnz	r3, 8019be4 <_free_r+0x2c>
 8019bd6:	6063      	str	r3, [r4, #4]
 8019bd8:	6014      	str	r4, [r2, #0]
 8019bda:	4628      	mov	r0, r5
 8019bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019be0:	f7ff bb06 	b.w	80191f0 <__malloc_unlock>
 8019be4:	42a3      	cmp	r3, r4
 8019be6:	d908      	bls.n	8019bfa <_free_r+0x42>
 8019be8:	6820      	ldr	r0, [r4, #0]
 8019bea:	1821      	adds	r1, r4, r0
 8019bec:	428b      	cmp	r3, r1
 8019bee:	bf01      	itttt	eq
 8019bf0:	6819      	ldreq	r1, [r3, #0]
 8019bf2:	685b      	ldreq	r3, [r3, #4]
 8019bf4:	1809      	addeq	r1, r1, r0
 8019bf6:	6021      	streq	r1, [r4, #0]
 8019bf8:	e7ed      	b.n	8019bd6 <_free_r+0x1e>
 8019bfa:	461a      	mov	r2, r3
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	b10b      	cbz	r3, 8019c04 <_free_r+0x4c>
 8019c00:	42a3      	cmp	r3, r4
 8019c02:	d9fa      	bls.n	8019bfa <_free_r+0x42>
 8019c04:	6811      	ldr	r1, [r2, #0]
 8019c06:	1850      	adds	r0, r2, r1
 8019c08:	42a0      	cmp	r0, r4
 8019c0a:	d10b      	bne.n	8019c24 <_free_r+0x6c>
 8019c0c:	6820      	ldr	r0, [r4, #0]
 8019c0e:	4401      	add	r1, r0
 8019c10:	1850      	adds	r0, r2, r1
 8019c12:	4283      	cmp	r3, r0
 8019c14:	6011      	str	r1, [r2, #0]
 8019c16:	d1e0      	bne.n	8019bda <_free_r+0x22>
 8019c18:	6818      	ldr	r0, [r3, #0]
 8019c1a:	685b      	ldr	r3, [r3, #4]
 8019c1c:	6053      	str	r3, [r2, #4]
 8019c1e:	4408      	add	r0, r1
 8019c20:	6010      	str	r0, [r2, #0]
 8019c22:	e7da      	b.n	8019bda <_free_r+0x22>
 8019c24:	d902      	bls.n	8019c2c <_free_r+0x74>
 8019c26:	230c      	movs	r3, #12
 8019c28:	602b      	str	r3, [r5, #0]
 8019c2a:	e7d6      	b.n	8019bda <_free_r+0x22>
 8019c2c:	6820      	ldr	r0, [r4, #0]
 8019c2e:	1821      	adds	r1, r4, r0
 8019c30:	428b      	cmp	r3, r1
 8019c32:	bf04      	itt	eq
 8019c34:	6819      	ldreq	r1, [r3, #0]
 8019c36:	685b      	ldreq	r3, [r3, #4]
 8019c38:	6063      	str	r3, [r4, #4]
 8019c3a:	bf04      	itt	eq
 8019c3c:	1809      	addeq	r1, r1, r0
 8019c3e:	6021      	streq	r1, [r4, #0]
 8019c40:	6054      	str	r4, [r2, #4]
 8019c42:	e7ca      	b.n	8019bda <_free_r+0x22>
 8019c44:	bd38      	pop	{r3, r4, r5, pc}
 8019c46:	bf00      	nop
 8019c48:	20015a04 	.word	0x20015a04

08019c4c <__ssputs_r>:
 8019c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c50:	688e      	ldr	r6, [r1, #8]
 8019c52:	461f      	mov	r7, r3
 8019c54:	42be      	cmp	r6, r7
 8019c56:	680b      	ldr	r3, [r1, #0]
 8019c58:	4682      	mov	sl, r0
 8019c5a:	460c      	mov	r4, r1
 8019c5c:	4690      	mov	r8, r2
 8019c5e:	d82d      	bhi.n	8019cbc <__ssputs_r+0x70>
 8019c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019c64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019c68:	d026      	beq.n	8019cb8 <__ssputs_r+0x6c>
 8019c6a:	6965      	ldr	r5, [r4, #20]
 8019c6c:	6909      	ldr	r1, [r1, #16]
 8019c6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c72:	eba3 0901 	sub.w	r9, r3, r1
 8019c76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c7a:	1c7b      	adds	r3, r7, #1
 8019c7c:	444b      	add	r3, r9
 8019c7e:	106d      	asrs	r5, r5, #1
 8019c80:	429d      	cmp	r5, r3
 8019c82:	bf38      	it	cc
 8019c84:	461d      	movcc	r5, r3
 8019c86:	0553      	lsls	r3, r2, #21
 8019c88:	d527      	bpl.n	8019cda <__ssputs_r+0x8e>
 8019c8a:	4629      	mov	r1, r5
 8019c8c:	f7ff f9f6 	bl	801907c <_malloc_r>
 8019c90:	4606      	mov	r6, r0
 8019c92:	b360      	cbz	r0, 8019cee <__ssputs_r+0xa2>
 8019c94:	6921      	ldr	r1, [r4, #16]
 8019c96:	464a      	mov	r2, r9
 8019c98:	f7ff ff4d 	bl	8019b36 <memcpy>
 8019c9c:	89a3      	ldrh	r3, [r4, #12]
 8019c9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019ca6:	81a3      	strh	r3, [r4, #12]
 8019ca8:	6126      	str	r6, [r4, #16]
 8019caa:	6165      	str	r5, [r4, #20]
 8019cac:	444e      	add	r6, r9
 8019cae:	eba5 0509 	sub.w	r5, r5, r9
 8019cb2:	6026      	str	r6, [r4, #0]
 8019cb4:	60a5      	str	r5, [r4, #8]
 8019cb6:	463e      	mov	r6, r7
 8019cb8:	42be      	cmp	r6, r7
 8019cba:	d900      	bls.n	8019cbe <__ssputs_r+0x72>
 8019cbc:	463e      	mov	r6, r7
 8019cbe:	6820      	ldr	r0, [r4, #0]
 8019cc0:	4632      	mov	r2, r6
 8019cc2:	4641      	mov	r1, r8
 8019cc4:	f7ff feb5 	bl	8019a32 <memmove>
 8019cc8:	68a3      	ldr	r3, [r4, #8]
 8019cca:	1b9b      	subs	r3, r3, r6
 8019ccc:	60a3      	str	r3, [r4, #8]
 8019cce:	6823      	ldr	r3, [r4, #0]
 8019cd0:	4433      	add	r3, r6
 8019cd2:	6023      	str	r3, [r4, #0]
 8019cd4:	2000      	movs	r0, #0
 8019cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cda:	462a      	mov	r2, r5
 8019cdc:	f7ff fba6 	bl	801942c <_realloc_r>
 8019ce0:	4606      	mov	r6, r0
 8019ce2:	2800      	cmp	r0, #0
 8019ce4:	d1e0      	bne.n	8019ca8 <__ssputs_r+0x5c>
 8019ce6:	6921      	ldr	r1, [r4, #16]
 8019ce8:	4650      	mov	r0, sl
 8019cea:	f7ff ff65 	bl	8019bb8 <_free_r>
 8019cee:	230c      	movs	r3, #12
 8019cf0:	f8ca 3000 	str.w	r3, [sl]
 8019cf4:	89a3      	ldrh	r3, [r4, #12]
 8019cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019cfa:	81a3      	strh	r3, [r4, #12]
 8019cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019d00:	e7e9      	b.n	8019cd6 <__ssputs_r+0x8a>
	...

08019d04 <_svfiprintf_r>:
 8019d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d08:	4698      	mov	r8, r3
 8019d0a:	898b      	ldrh	r3, [r1, #12]
 8019d0c:	061b      	lsls	r3, r3, #24
 8019d0e:	b09d      	sub	sp, #116	@ 0x74
 8019d10:	4607      	mov	r7, r0
 8019d12:	460d      	mov	r5, r1
 8019d14:	4614      	mov	r4, r2
 8019d16:	d510      	bpl.n	8019d3a <_svfiprintf_r+0x36>
 8019d18:	690b      	ldr	r3, [r1, #16]
 8019d1a:	b973      	cbnz	r3, 8019d3a <_svfiprintf_r+0x36>
 8019d1c:	2140      	movs	r1, #64	@ 0x40
 8019d1e:	f7ff f9ad 	bl	801907c <_malloc_r>
 8019d22:	6028      	str	r0, [r5, #0]
 8019d24:	6128      	str	r0, [r5, #16]
 8019d26:	b930      	cbnz	r0, 8019d36 <_svfiprintf_r+0x32>
 8019d28:	230c      	movs	r3, #12
 8019d2a:	603b      	str	r3, [r7, #0]
 8019d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019d30:	b01d      	add	sp, #116	@ 0x74
 8019d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d36:	2340      	movs	r3, #64	@ 0x40
 8019d38:	616b      	str	r3, [r5, #20]
 8019d3a:	2300      	movs	r3, #0
 8019d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d3e:	2320      	movs	r3, #32
 8019d40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d48:	2330      	movs	r3, #48	@ 0x30
 8019d4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019ee8 <_svfiprintf_r+0x1e4>
 8019d4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019d52:	f04f 0901 	mov.w	r9, #1
 8019d56:	4623      	mov	r3, r4
 8019d58:	469a      	mov	sl, r3
 8019d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d5e:	b10a      	cbz	r2, 8019d64 <_svfiprintf_r+0x60>
 8019d60:	2a25      	cmp	r2, #37	@ 0x25
 8019d62:	d1f9      	bne.n	8019d58 <_svfiprintf_r+0x54>
 8019d64:	ebba 0b04 	subs.w	fp, sl, r4
 8019d68:	d00b      	beq.n	8019d82 <_svfiprintf_r+0x7e>
 8019d6a:	465b      	mov	r3, fp
 8019d6c:	4622      	mov	r2, r4
 8019d6e:	4629      	mov	r1, r5
 8019d70:	4638      	mov	r0, r7
 8019d72:	f7ff ff6b 	bl	8019c4c <__ssputs_r>
 8019d76:	3001      	adds	r0, #1
 8019d78:	f000 80a7 	beq.w	8019eca <_svfiprintf_r+0x1c6>
 8019d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d7e:	445a      	add	r2, fp
 8019d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8019d82:	f89a 3000 	ldrb.w	r3, [sl]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	f000 809f 	beq.w	8019eca <_svfiprintf_r+0x1c6>
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d96:	f10a 0a01 	add.w	sl, sl, #1
 8019d9a:	9304      	str	r3, [sp, #16]
 8019d9c:	9307      	str	r3, [sp, #28]
 8019d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019da2:	931a      	str	r3, [sp, #104]	@ 0x68
 8019da4:	4654      	mov	r4, sl
 8019da6:	2205      	movs	r2, #5
 8019da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dac:	484e      	ldr	r0, [pc, #312]	@ (8019ee8 <_svfiprintf_r+0x1e4>)
 8019dae:	f7e6 fa3f 	bl	8000230 <memchr>
 8019db2:	9a04      	ldr	r2, [sp, #16]
 8019db4:	b9d8      	cbnz	r0, 8019dee <_svfiprintf_r+0xea>
 8019db6:	06d0      	lsls	r0, r2, #27
 8019db8:	bf44      	itt	mi
 8019dba:	2320      	movmi	r3, #32
 8019dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019dc0:	0711      	lsls	r1, r2, #28
 8019dc2:	bf44      	itt	mi
 8019dc4:	232b      	movmi	r3, #43	@ 0x2b
 8019dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019dca:	f89a 3000 	ldrb.w	r3, [sl]
 8019dce:	2b2a      	cmp	r3, #42	@ 0x2a
 8019dd0:	d015      	beq.n	8019dfe <_svfiprintf_r+0xfa>
 8019dd2:	9a07      	ldr	r2, [sp, #28]
 8019dd4:	4654      	mov	r4, sl
 8019dd6:	2000      	movs	r0, #0
 8019dd8:	f04f 0c0a 	mov.w	ip, #10
 8019ddc:	4621      	mov	r1, r4
 8019dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019de2:	3b30      	subs	r3, #48	@ 0x30
 8019de4:	2b09      	cmp	r3, #9
 8019de6:	d94b      	bls.n	8019e80 <_svfiprintf_r+0x17c>
 8019de8:	b1b0      	cbz	r0, 8019e18 <_svfiprintf_r+0x114>
 8019dea:	9207      	str	r2, [sp, #28]
 8019dec:	e014      	b.n	8019e18 <_svfiprintf_r+0x114>
 8019dee:	eba0 0308 	sub.w	r3, r0, r8
 8019df2:	fa09 f303 	lsl.w	r3, r9, r3
 8019df6:	4313      	orrs	r3, r2
 8019df8:	9304      	str	r3, [sp, #16]
 8019dfa:	46a2      	mov	sl, r4
 8019dfc:	e7d2      	b.n	8019da4 <_svfiprintf_r+0xa0>
 8019dfe:	9b03      	ldr	r3, [sp, #12]
 8019e00:	1d19      	adds	r1, r3, #4
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	9103      	str	r1, [sp, #12]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	bfbb      	ittet	lt
 8019e0a:	425b      	neglt	r3, r3
 8019e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8019e10:	9307      	strge	r3, [sp, #28]
 8019e12:	9307      	strlt	r3, [sp, #28]
 8019e14:	bfb8      	it	lt
 8019e16:	9204      	strlt	r2, [sp, #16]
 8019e18:	7823      	ldrb	r3, [r4, #0]
 8019e1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8019e1c:	d10a      	bne.n	8019e34 <_svfiprintf_r+0x130>
 8019e1e:	7863      	ldrb	r3, [r4, #1]
 8019e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e22:	d132      	bne.n	8019e8a <_svfiprintf_r+0x186>
 8019e24:	9b03      	ldr	r3, [sp, #12]
 8019e26:	1d1a      	adds	r2, r3, #4
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	9203      	str	r2, [sp, #12]
 8019e2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019e30:	3402      	adds	r4, #2
 8019e32:	9305      	str	r3, [sp, #20]
 8019e34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019ef8 <_svfiprintf_r+0x1f4>
 8019e38:	7821      	ldrb	r1, [r4, #0]
 8019e3a:	2203      	movs	r2, #3
 8019e3c:	4650      	mov	r0, sl
 8019e3e:	f7e6 f9f7 	bl	8000230 <memchr>
 8019e42:	b138      	cbz	r0, 8019e54 <_svfiprintf_r+0x150>
 8019e44:	9b04      	ldr	r3, [sp, #16]
 8019e46:	eba0 000a 	sub.w	r0, r0, sl
 8019e4a:	2240      	movs	r2, #64	@ 0x40
 8019e4c:	4082      	lsls	r2, r0
 8019e4e:	4313      	orrs	r3, r2
 8019e50:	3401      	adds	r4, #1
 8019e52:	9304      	str	r3, [sp, #16]
 8019e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e58:	4824      	ldr	r0, [pc, #144]	@ (8019eec <_svfiprintf_r+0x1e8>)
 8019e5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019e5e:	2206      	movs	r2, #6
 8019e60:	f7e6 f9e6 	bl	8000230 <memchr>
 8019e64:	2800      	cmp	r0, #0
 8019e66:	d036      	beq.n	8019ed6 <_svfiprintf_r+0x1d2>
 8019e68:	4b21      	ldr	r3, [pc, #132]	@ (8019ef0 <_svfiprintf_r+0x1ec>)
 8019e6a:	bb1b      	cbnz	r3, 8019eb4 <_svfiprintf_r+0x1b0>
 8019e6c:	9b03      	ldr	r3, [sp, #12]
 8019e6e:	3307      	adds	r3, #7
 8019e70:	f023 0307 	bic.w	r3, r3, #7
 8019e74:	3308      	adds	r3, #8
 8019e76:	9303      	str	r3, [sp, #12]
 8019e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e7a:	4433      	add	r3, r6
 8019e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e7e:	e76a      	b.n	8019d56 <_svfiprintf_r+0x52>
 8019e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e84:	460c      	mov	r4, r1
 8019e86:	2001      	movs	r0, #1
 8019e88:	e7a8      	b.n	8019ddc <_svfiprintf_r+0xd8>
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	3401      	adds	r4, #1
 8019e8e:	9305      	str	r3, [sp, #20]
 8019e90:	4619      	mov	r1, r3
 8019e92:	f04f 0c0a 	mov.w	ip, #10
 8019e96:	4620      	mov	r0, r4
 8019e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e9c:	3a30      	subs	r2, #48	@ 0x30
 8019e9e:	2a09      	cmp	r2, #9
 8019ea0:	d903      	bls.n	8019eaa <_svfiprintf_r+0x1a6>
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d0c6      	beq.n	8019e34 <_svfiprintf_r+0x130>
 8019ea6:	9105      	str	r1, [sp, #20]
 8019ea8:	e7c4      	b.n	8019e34 <_svfiprintf_r+0x130>
 8019eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8019eae:	4604      	mov	r4, r0
 8019eb0:	2301      	movs	r3, #1
 8019eb2:	e7f0      	b.n	8019e96 <_svfiprintf_r+0x192>
 8019eb4:	ab03      	add	r3, sp, #12
 8019eb6:	9300      	str	r3, [sp, #0]
 8019eb8:	462a      	mov	r2, r5
 8019eba:	4b0e      	ldr	r3, [pc, #56]	@ (8019ef4 <_svfiprintf_r+0x1f0>)
 8019ebc:	a904      	add	r1, sp, #16
 8019ebe:	4638      	mov	r0, r7
 8019ec0:	f3af 8000 	nop.w
 8019ec4:	1c42      	adds	r2, r0, #1
 8019ec6:	4606      	mov	r6, r0
 8019ec8:	d1d6      	bne.n	8019e78 <_svfiprintf_r+0x174>
 8019eca:	89ab      	ldrh	r3, [r5, #12]
 8019ecc:	065b      	lsls	r3, r3, #25
 8019ece:	f53f af2d 	bmi.w	8019d2c <_svfiprintf_r+0x28>
 8019ed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ed4:	e72c      	b.n	8019d30 <_svfiprintf_r+0x2c>
 8019ed6:	ab03      	add	r3, sp, #12
 8019ed8:	9300      	str	r3, [sp, #0]
 8019eda:	462a      	mov	r2, r5
 8019edc:	4b05      	ldr	r3, [pc, #20]	@ (8019ef4 <_svfiprintf_r+0x1f0>)
 8019ede:	a904      	add	r1, sp, #16
 8019ee0:	4638      	mov	r0, r7
 8019ee2:	f000 f9bb 	bl	801a25c <_printf_i>
 8019ee6:	e7ed      	b.n	8019ec4 <_svfiprintf_r+0x1c0>
 8019ee8:	0801c912 	.word	0x0801c912
 8019eec:	0801c91c 	.word	0x0801c91c
 8019ef0:	00000000 	.word	0x00000000
 8019ef4:	08019c4d 	.word	0x08019c4d
 8019ef8:	0801c918 	.word	0x0801c918

08019efc <__sfputc_r>:
 8019efc:	6893      	ldr	r3, [r2, #8]
 8019efe:	3b01      	subs	r3, #1
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	b410      	push	{r4}
 8019f04:	6093      	str	r3, [r2, #8]
 8019f06:	da08      	bge.n	8019f1a <__sfputc_r+0x1e>
 8019f08:	6994      	ldr	r4, [r2, #24]
 8019f0a:	42a3      	cmp	r3, r4
 8019f0c:	db01      	blt.n	8019f12 <__sfputc_r+0x16>
 8019f0e:	290a      	cmp	r1, #10
 8019f10:	d103      	bne.n	8019f1a <__sfputc_r+0x1e>
 8019f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f16:	f7ff bbe1 	b.w	80196dc <__swbuf_r>
 8019f1a:	6813      	ldr	r3, [r2, #0]
 8019f1c:	1c58      	adds	r0, r3, #1
 8019f1e:	6010      	str	r0, [r2, #0]
 8019f20:	7019      	strb	r1, [r3, #0]
 8019f22:	4608      	mov	r0, r1
 8019f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f28:	4770      	bx	lr

08019f2a <__sfputs_r>:
 8019f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2c:	4606      	mov	r6, r0
 8019f2e:	460f      	mov	r7, r1
 8019f30:	4614      	mov	r4, r2
 8019f32:	18d5      	adds	r5, r2, r3
 8019f34:	42ac      	cmp	r4, r5
 8019f36:	d101      	bne.n	8019f3c <__sfputs_r+0x12>
 8019f38:	2000      	movs	r0, #0
 8019f3a:	e007      	b.n	8019f4c <__sfputs_r+0x22>
 8019f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f40:	463a      	mov	r2, r7
 8019f42:	4630      	mov	r0, r6
 8019f44:	f7ff ffda 	bl	8019efc <__sfputc_r>
 8019f48:	1c43      	adds	r3, r0, #1
 8019f4a:	d1f3      	bne.n	8019f34 <__sfputs_r+0xa>
 8019f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f50 <_vfiprintf_r>:
 8019f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f54:	460d      	mov	r5, r1
 8019f56:	b09d      	sub	sp, #116	@ 0x74
 8019f58:	4614      	mov	r4, r2
 8019f5a:	4698      	mov	r8, r3
 8019f5c:	4606      	mov	r6, r0
 8019f5e:	b118      	cbz	r0, 8019f68 <_vfiprintf_r+0x18>
 8019f60:	6a03      	ldr	r3, [r0, #32]
 8019f62:	b90b      	cbnz	r3, 8019f68 <_vfiprintf_r+0x18>
 8019f64:	f7ff fa4a 	bl	80193fc <__sinit>
 8019f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019f6a:	07d9      	lsls	r1, r3, #31
 8019f6c:	d405      	bmi.n	8019f7a <_vfiprintf_r+0x2a>
 8019f6e:	89ab      	ldrh	r3, [r5, #12]
 8019f70:	059a      	lsls	r2, r3, #22
 8019f72:	d402      	bmi.n	8019f7a <_vfiprintf_r+0x2a>
 8019f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019f76:	f7ff fddc 	bl	8019b32 <__retarget_lock_acquire_recursive>
 8019f7a:	89ab      	ldrh	r3, [r5, #12]
 8019f7c:	071b      	lsls	r3, r3, #28
 8019f7e:	d501      	bpl.n	8019f84 <_vfiprintf_r+0x34>
 8019f80:	692b      	ldr	r3, [r5, #16]
 8019f82:	b99b      	cbnz	r3, 8019fac <_vfiprintf_r+0x5c>
 8019f84:	4629      	mov	r1, r5
 8019f86:	4630      	mov	r0, r6
 8019f88:	f7ff fbe6 	bl	8019758 <__swsetup_r>
 8019f8c:	b170      	cbz	r0, 8019fac <_vfiprintf_r+0x5c>
 8019f8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019f90:	07dc      	lsls	r4, r3, #31
 8019f92:	d504      	bpl.n	8019f9e <_vfiprintf_r+0x4e>
 8019f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f98:	b01d      	add	sp, #116	@ 0x74
 8019f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f9e:	89ab      	ldrh	r3, [r5, #12]
 8019fa0:	0598      	lsls	r0, r3, #22
 8019fa2:	d4f7      	bmi.n	8019f94 <_vfiprintf_r+0x44>
 8019fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019fa6:	f7ff fdc5 	bl	8019b34 <__retarget_lock_release_recursive>
 8019faa:	e7f3      	b.n	8019f94 <_vfiprintf_r+0x44>
 8019fac:	2300      	movs	r3, #0
 8019fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fb0:	2320      	movs	r3, #32
 8019fb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fba:	2330      	movs	r3, #48	@ 0x30
 8019fbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a16c <_vfiprintf_r+0x21c>
 8019fc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019fc4:	f04f 0901 	mov.w	r9, #1
 8019fc8:	4623      	mov	r3, r4
 8019fca:	469a      	mov	sl, r3
 8019fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019fd0:	b10a      	cbz	r2, 8019fd6 <_vfiprintf_r+0x86>
 8019fd2:	2a25      	cmp	r2, #37	@ 0x25
 8019fd4:	d1f9      	bne.n	8019fca <_vfiprintf_r+0x7a>
 8019fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8019fda:	d00b      	beq.n	8019ff4 <_vfiprintf_r+0xa4>
 8019fdc:	465b      	mov	r3, fp
 8019fde:	4622      	mov	r2, r4
 8019fe0:	4629      	mov	r1, r5
 8019fe2:	4630      	mov	r0, r6
 8019fe4:	f7ff ffa1 	bl	8019f2a <__sfputs_r>
 8019fe8:	3001      	adds	r0, #1
 8019fea:	f000 80a7 	beq.w	801a13c <_vfiprintf_r+0x1ec>
 8019fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ff0:	445a      	add	r2, fp
 8019ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8019ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	f000 809f 	beq.w	801a13c <_vfiprintf_r+0x1ec>
 8019ffe:	2300      	movs	r3, #0
 801a000:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a008:	f10a 0a01 	add.w	sl, sl, #1
 801a00c:	9304      	str	r3, [sp, #16]
 801a00e:	9307      	str	r3, [sp, #28]
 801a010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a014:	931a      	str	r3, [sp, #104]	@ 0x68
 801a016:	4654      	mov	r4, sl
 801a018:	2205      	movs	r2, #5
 801a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a01e:	4853      	ldr	r0, [pc, #332]	@ (801a16c <_vfiprintf_r+0x21c>)
 801a020:	f7e6 f906 	bl	8000230 <memchr>
 801a024:	9a04      	ldr	r2, [sp, #16]
 801a026:	b9d8      	cbnz	r0, 801a060 <_vfiprintf_r+0x110>
 801a028:	06d1      	lsls	r1, r2, #27
 801a02a:	bf44      	itt	mi
 801a02c:	2320      	movmi	r3, #32
 801a02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a032:	0713      	lsls	r3, r2, #28
 801a034:	bf44      	itt	mi
 801a036:	232b      	movmi	r3, #43	@ 0x2b
 801a038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a03c:	f89a 3000 	ldrb.w	r3, [sl]
 801a040:	2b2a      	cmp	r3, #42	@ 0x2a
 801a042:	d015      	beq.n	801a070 <_vfiprintf_r+0x120>
 801a044:	9a07      	ldr	r2, [sp, #28]
 801a046:	4654      	mov	r4, sl
 801a048:	2000      	movs	r0, #0
 801a04a:	f04f 0c0a 	mov.w	ip, #10
 801a04e:	4621      	mov	r1, r4
 801a050:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a054:	3b30      	subs	r3, #48	@ 0x30
 801a056:	2b09      	cmp	r3, #9
 801a058:	d94b      	bls.n	801a0f2 <_vfiprintf_r+0x1a2>
 801a05a:	b1b0      	cbz	r0, 801a08a <_vfiprintf_r+0x13a>
 801a05c:	9207      	str	r2, [sp, #28]
 801a05e:	e014      	b.n	801a08a <_vfiprintf_r+0x13a>
 801a060:	eba0 0308 	sub.w	r3, r0, r8
 801a064:	fa09 f303 	lsl.w	r3, r9, r3
 801a068:	4313      	orrs	r3, r2
 801a06a:	9304      	str	r3, [sp, #16]
 801a06c:	46a2      	mov	sl, r4
 801a06e:	e7d2      	b.n	801a016 <_vfiprintf_r+0xc6>
 801a070:	9b03      	ldr	r3, [sp, #12]
 801a072:	1d19      	adds	r1, r3, #4
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	9103      	str	r1, [sp, #12]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	bfbb      	ittet	lt
 801a07c:	425b      	neglt	r3, r3
 801a07e:	f042 0202 	orrlt.w	r2, r2, #2
 801a082:	9307      	strge	r3, [sp, #28]
 801a084:	9307      	strlt	r3, [sp, #28]
 801a086:	bfb8      	it	lt
 801a088:	9204      	strlt	r2, [sp, #16]
 801a08a:	7823      	ldrb	r3, [r4, #0]
 801a08c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a08e:	d10a      	bne.n	801a0a6 <_vfiprintf_r+0x156>
 801a090:	7863      	ldrb	r3, [r4, #1]
 801a092:	2b2a      	cmp	r3, #42	@ 0x2a
 801a094:	d132      	bne.n	801a0fc <_vfiprintf_r+0x1ac>
 801a096:	9b03      	ldr	r3, [sp, #12]
 801a098:	1d1a      	adds	r2, r3, #4
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	9203      	str	r2, [sp, #12]
 801a09e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a0a2:	3402      	adds	r4, #2
 801a0a4:	9305      	str	r3, [sp, #20]
 801a0a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a17c <_vfiprintf_r+0x22c>
 801a0aa:	7821      	ldrb	r1, [r4, #0]
 801a0ac:	2203      	movs	r2, #3
 801a0ae:	4650      	mov	r0, sl
 801a0b0:	f7e6 f8be 	bl	8000230 <memchr>
 801a0b4:	b138      	cbz	r0, 801a0c6 <_vfiprintf_r+0x176>
 801a0b6:	9b04      	ldr	r3, [sp, #16]
 801a0b8:	eba0 000a 	sub.w	r0, r0, sl
 801a0bc:	2240      	movs	r2, #64	@ 0x40
 801a0be:	4082      	lsls	r2, r0
 801a0c0:	4313      	orrs	r3, r2
 801a0c2:	3401      	adds	r4, #1
 801a0c4:	9304      	str	r3, [sp, #16]
 801a0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0ca:	4829      	ldr	r0, [pc, #164]	@ (801a170 <_vfiprintf_r+0x220>)
 801a0cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a0d0:	2206      	movs	r2, #6
 801a0d2:	f7e6 f8ad 	bl	8000230 <memchr>
 801a0d6:	2800      	cmp	r0, #0
 801a0d8:	d03f      	beq.n	801a15a <_vfiprintf_r+0x20a>
 801a0da:	4b26      	ldr	r3, [pc, #152]	@ (801a174 <_vfiprintf_r+0x224>)
 801a0dc:	bb1b      	cbnz	r3, 801a126 <_vfiprintf_r+0x1d6>
 801a0de:	9b03      	ldr	r3, [sp, #12]
 801a0e0:	3307      	adds	r3, #7
 801a0e2:	f023 0307 	bic.w	r3, r3, #7
 801a0e6:	3308      	adds	r3, #8
 801a0e8:	9303      	str	r3, [sp, #12]
 801a0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0ec:	443b      	add	r3, r7
 801a0ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801a0f0:	e76a      	b.n	8019fc8 <_vfiprintf_r+0x78>
 801a0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a0f6:	460c      	mov	r4, r1
 801a0f8:	2001      	movs	r0, #1
 801a0fa:	e7a8      	b.n	801a04e <_vfiprintf_r+0xfe>
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	3401      	adds	r4, #1
 801a100:	9305      	str	r3, [sp, #20]
 801a102:	4619      	mov	r1, r3
 801a104:	f04f 0c0a 	mov.w	ip, #10
 801a108:	4620      	mov	r0, r4
 801a10a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a10e:	3a30      	subs	r2, #48	@ 0x30
 801a110:	2a09      	cmp	r2, #9
 801a112:	d903      	bls.n	801a11c <_vfiprintf_r+0x1cc>
 801a114:	2b00      	cmp	r3, #0
 801a116:	d0c6      	beq.n	801a0a6 <_vfiprintf_r+0x156>
 801a118:	9105      	str	r1, [sp, #20]
 801a11a:	e7c4      	b.n	801a0a6 <_vfiprintf_r+0x156>
 801a11c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a120:	4604      	mov	r4, r0
 801a122:	2301      	movs	r3, #1
 801a124:	e7f0      	b.n	801a108 <_vfiprintf_r+0x1b8>
 801a126:	ab03      	add	r3, sp, #12
 801a128:	9300      	str	r3, [sp, #0]
 801a12a:	462a      	mov	r2, r5
 801a12c:	4b12      	ldr	r3, [pc, #72]	@ (801a178 <_vfiprintf_r+0x228>)
 801a12e:	a904      	add	r1, sp, #16
 801a130:	4630      	mov	r0, r6
 801a132:	f3af 8000 	nop.w
 801a136:	4607      	mov	r7, r0
 801a138:	1c78      	adds	r0, r7, #1
 801a13a:	d1d6      	bne.n	801a0ea <_vfiprintf_r+0x19a>
 801a13c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a13e:	07d9      	lsls	r1, r3, #31
 801a140:	d405      	bmi.n	801a14e <_vfiprintf_r+0x1fe>
 801a142:	89ab      	ldrh	r3, [r5, #12]
 801a144:	059a      	lsls	r2, r3, #22
 801a146:	d402      	bmi.n	801a14e <_vfiprintf_r+0x1fe>
 801a148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a14a:	f7ff fcf3 	bl	8019b34 <__retarget_lock_release_recursive>
 801a14e:	89ab      	ldrh	r3, [r5, #12]
 801a150:	065b      	lsls	r3, r3, #25
 801a152:	f53f af1f 	bmi.w	8019f94 <_vfiprintf_r+0x44>
 801a156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a158:	e71e      	b.n	8019f98 <_vfiprintf_r+0x48>
 801a15a:	ab03      	add	r3, sp, #12
 801a15c:	9300      	str	r3, [sp, #0]
 801a15e:	462a      	mov	r2, r5
 801a160:	4b05      	ldr	r3, [pc, #20]	@ (801a178 <_vfiprintf_r+0x228>)
 801a162:	a904      	add	r1, sp, #16
 801a164:	4630      	mov	r0, r6
 801a166:	f000 f879 	bl	801a25c <_printf_i>
 801a16a:	e7e4      	b.n	801a136 <_vfiprintf_r+0x1e6>
 801a16c:	0801c912 	.word	0x0801c912
 801a170:	0801c91c 	.word	0x0801c91c
 801a174:	00000000 	.word	0x00000000
 801a178:	08019f2b 	.word	0x08019f2b
 801a17c:	0801c918 	.word	0x0801c918

0801a180 <_printf_common>:
 801a180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a184:	4616      	mov	r6, r2
 801a186:	4698      	mov	r8, r3
 801a188:	688a      	ldr	r2, [r1, #8]
 801a18a:	690b      	ldr	r3, [r1, #16]
 801a18c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a190:	4293      	cmp	r3, r2
 801a192:	bfb8      	it	lt
 801a194:	4613      	movlt	r3, r2
 801a196:	6033      	str	r3, [r6, #0]
 801a198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a19c:	4607      	mov	r7, r0
 801a19e:	460c      	mov	r4, r1
 801a1a0:	b10a      	cbz	r2, 801a1a6 <_printf_common+0x26>
 801a1a2:	3301      	adds	r3, #1
 801a1a4:	6033      	str	r3, [r6, #0]
 801a1a6:	6823      	ldr	r3, [r4, #0]
 801a1a8:	0699      	lsls	r1, r3, #26
 801a1aa:	bf42      	ittt	mi
 801a1ac:	6833      	ldrmi	r3, [r6, #0]
 801a1ae:	3302      	addmi	r3, #2
 801a1b0:	6033      	strmi	r3, [r6, #0]
 801a1b2:	6825      	ldr	r5, [r4, #0]
 801a1b4:	f015 0506 	ands.w	r5, r5, #6
 801a1b8:	d106      	bne.n	801a1c8 <_printf_common+0x48>
 801a1ba:	f104 0a19 	add.w	sl, r4, #25
 801a1be:	68e3      	ldr	r3, [r4, #12]
 801a1c0:	6832      	ldr	r2, [r6, #0]
 801a1c2:	1a9b      	subs	r3, r3, r2
 801a1c4:	42ab      	cmp	r3, r5
 801a1c6:	dc26      	bgt.n	801a216 <_printf_common+0x96>
 801a1c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a1cc:	6822      	ldr	r2, [r4, #0]
 801a1ce:	3b00      	subs	r3, #0
 801a1d0:	bf18      	it	ne
 801a1d2:	2301      	movne	r3, #1
 801a1d4:	0692      	lsls	r2, r2, #26
 801a1d6:	d42b      	bmi.n	801a230 <_printf_common+0xb0>
 801a1d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a1dc:	4641      	mov	r1, r8
 801a1de:	4638      	mov	r0, r7
 801a1e0:	47c8      	blx	r9
 801a1e2:	3001      	adds	r0, #1
 801a1e4:	d01e      	beq.n	801a224 <_printf_common+0xa4>
 801a1e6:	6823      	ldr	r3, [r4, #0]
 801a1e8:	6922      	ldr	r2, [r4, #16]
 801a1ea:	f003 0306 	and.w	r3, r3, #6
 801a1ee:	2b04      	cmp	r3, #4
 801a1f0:	bf02      	ittt	eq
 801a1f2:	68e5      	ldreq	r5, [r4, #12]
 801a1f4:	6833      	ldreq	r3, [r6, #0]
 801a1f6:	1aed      	subeq	r5, r5, r3
 801a1f8:	68a3      	ldr	r3, [r4, #8]
 801a1fa:	bf0c      	ite	eq
 801a1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a200:	2500      	movne	r5, #0
 801a202:	4293      	cmp	r3, r2
 801a204:	bfc4      	itt	gt
 801a206:	1a9b      	subgt	r3, r3, r2
 801a208:	18ed      	addgt	r5, r5, r3
 801a20a:	2600      	movs	r6, #0
 801a20c:	341a      	adds	r4, #26
 801a20e:	42b5      	cmp	r5, r6
 801a210:	d11a      	bne.n	801a248 <_printf_common+0xc8>
 801a212:	2000      	movs	r0, #0
 801a214:	e008      	b.n	801a228 <_printf_common+0xa8>
 801a216:	2301      	movs	r3, #1
 801a218:	4652      	mov	r2, sl
 801a21a:	4641      	mov	r1, r8
 801a21c:	4638      	mov	r0, r7
 801a21e:	47c8      	blx	r9
 801a220:	3001      	adds	r0, #1
 801a222:	d103      	bne.n	801a22c <_printf_common+0xac>
 801a224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a22c:	3501      	adds	r5, #1
 801a22e:	e7c6      	b.n	801a1be <_printf_common+0x3e>
 801a230:	18e1      	adds	r1, r4, r3
 801a232:	1c5a      	adds	r2, r3, #1
 801a234:	2030      	movs	r0, #48	@ 0x30
 801a236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a23a:	4422      	add	r2, r4
 801a23c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a244:	3302      	adds	r3, #2
 801a246:	e7c7      	b.n	801a1d8 <_printf_common+0x58>
 801a248:	2301      	movs	r3, #1
 801a24a:	4622      	mov	r2, r4
 801a24c:	4641      	mov	r1, r8
 801a24e:	4638      	mov	r0, r7
 801a250:	47c8      	blx	r9
 801a252:	3001      	adds	r0, #1
 801a254:	d0e6      	beq.n	801a224 <_printf_common+0xa4>
 801a256:	3601      	adds	r6, #1
 801a258:	e7d9      	b.n	801a20e <_printf_common+0x8e>
	...

0801a25c <_printf_i>:
 801a25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a260:	7e0f      	ldrb	r7, [r1, #24]
 801a262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a264:	2f78      	cmp	r7, #120	@ 0x78
 801a266:	4691      	mov	r9, r2
 801a268:	4680      	mov	r8, r0
 801a26a:	460c      	mov	r4, r1
 801a26c:	469a      	mov	sl, r3
 801a26e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a272:	d807      	bhi.n	801a284 <_printf_i+0x28>
 801a274:	2f62      	cmp	r7, #98	@ 0x62
 801a276:	d80a      	bhi.n	801a28e <_printf_i+0x32>
 801a278:	2f00      	cmp	r7, #0
 801a27a:	f000 80d2 	beq.w	801a422 <_printf_i+0x1c6>
 801a27e:	2f58      	cmp	r7, #88	@ 0x58
 801a280:	f000 80b9 	beq.w	801a3f6 <_printf_i+0x19a>
 801a284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a28c:	e03a      	b.n	801a304 <_printf_i+0xa8>
 801a28e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a292:	2b15      	cmp	r3, #21
 801a294:	d8f6      	bhi.n	801a284 <_printf_i+0x28>
 801a296:	a101      	add	r1, pc, #4	@ (adr r1, 801a29c <_printf_i+0x40>)
 801a298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a29c:	0801a2f5 	.word	0x0801a2f5
 801a2a0:	0801a309 	.word	0x0801a309
 801a2a4:	0801a285 	.word	0x0801a285
 801a2a8:	0801a285 	.word	0x0801a285
 801a2ac:	0801a285 	.word	0x0801a285
 801a2b0:	0801a285 	.word	0x0801a285
 801a2b4:	0801a309 	.word	0x0801a309
 801a2b8:	0801a285 	.word	0x0801a285
 801a2bc:	0801a285 	.word	0x0801a285
 801a2c0:	0801a285 	.word	0x0801a285
 801a2c4:	0801a285 	.word	0x0801a285
 801a2c8:	0801a409 	.word	0x0801a409
 801a2cc:	0801a333 	.word	0x0801a333
 801a2d0:	0801a3c3 	.word	0x0801a3c3
 801a2d4:	0801a285 	.word	0x0801a285
 801a2d8:	0801a285 	.word	0x0801a285
 801a2dc:	0801a42b 	.word	0x0801a42b
 801a2e0:	0801a285 	.word	0x0801a285
 801a2e4:	0801a333 	.word	0x0801a333
 801a2e8:	0801a285 	.word	0x0801a285
 801a2ec:	0801a285 	.word	0x0801a285
 801a2f0:	0801a3cb 	.word	0x0801a3cb
 801a2f4:	6833      	ldr	r3, [r6, #0]
 801a2f6:	1d1a      	adds	r2, r3, #4
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	6032      	str	r2, [r6, #0]
 801a2fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a304:	2301      	movs	r3, #1
 801a306:	e09d      	b.n	801a444 <_printf_i+0x1e8>
 801a308:	6833      	ldr	r3, [r6, #0]
 801a30a:	6820      	ldr	r0, [r4, #0]
 801a30c:	1d19      	adds	r1, r3, #4
 801a30e:	6031      	str	r1, [r6, #0]
 801a310:	0606      	lsls	r6, r0, #24
 801a312:	d501      	bpl.n	801a318 <_printf_i+0xbc>
 801a314:	681d      	ldr	r5, [r3, #0]
 801a316:	e003      	b.n	801a320 <_printf_i+0xc4>
 801a318:	0645      	lsls	r5, r0, #25
 801a31a:	d5fb      	bpl.n	801a314 <_printf_i+0xb8>
 801a31c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a320:	2d00      	cmp	r5, #0
 801a322:	da03      	bge.n	801a32c <_printf_i+0xd0>
 801a324:	232d      	movs	r3, #45	@ 0x2d
 801a326:	426d      	negs	r5, r5
 801a328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a32c:	4859      	ldr	r0, [pc, #356]	@ (801a494 <_printf_i+0x238>)
 801a32e:	230a      	movs	r3, #10
 801a330:	e011      	b.n	801a356 <_printf_i+0xfa>
 801a332:	6821      	ldr	r1, [r4, #0]
 801a334:	6833      	ldr	r3, [r6, #0]
 801a336:	0608      	lsls	r0, r1, #24
 801a338:	f853 5b04 	ldr.w	r5, [r3], #4
 801a33c:	d402      	bmi.n	801a344 <_printf_i+0xe8>
 801a33e:	0649      	lsls	r1, r1, #25
 801a340:	bf48      	it	mi
 801a342:	b2ad      	uxthmi	r5, r5
 801a344:	2f6f      	cmp	r7, #111	@ 0x6f
 801a346:	4853      	ldr	r0, [pc, #332]	@ (801a494 <_printf_i+0x238>)
 801a348:	6033      	str	r3, [r6, #0]
 801a34a:	bf14      	ite	ne
 801a34c:	230a      	movne	r3, #10
 801a34e:	2308      	moveq	r3, #8
 801a350:	2100      	movs	r1, #0
 801a352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a356:	6866      	ldr	r6, [r4, #4]
 801a358:	60a6      	str	r6, [r4, #8]
 801a35a:	2e00      	cmp	r6, #0
 801a35c:	bfa2      	ittt	ge
 801a35e:	6821      	ldrge	r1, [r4, #0]
 801a360:	f021 0104 	bicge.w	r1, r1, #4
 801a364:	6021      	strge	r1, [r4, #0]
 801a366:	b90d      	cbnz	r5, 801a36c <_printf_i+0x110>
 801a368:	2e00      	cmp	r6, #0
 801a36a:	d04b      	beq.n	801a404 <_printf_i+0x1a8>
 801a36c:	4616      	mov	r6, r2
 801a36e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a372:	fb03 5711 	mls	r7, r3, r1, r5
 801a376:	5dc7      	ldrb	r7, [r0, r7]
 801a378:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a37c:	462f      	mov	r7, r5
 801a37e:	42bb      	cmp	r3, r7
 801a380:	460d      	mov	r5, r1
 801a382:	d9f4      	bls.n	801a36e <_printf_i+0x112>
 801a384:	2b08      	cmp	r3, #8
 801a386:	d10b      	bne.n	801a3a0 <_printf_i+0x144>
 801a388:	6823      	ldr	r3, [r4, #0]
 801a38a:	07df      	lsls	r7, r3, #31
 801a38c:	d508      	bpl.n	801a3a0 <_printf_i+0x144>
 801a38e:	6923      	ldr	r3, [r4, #16]
 801a390:	6861      	ldr	r1, [r4, #4]
 801a392:	4299      	cmp	r1, r3
 801a394:	bfde      	ittt	le
 801a396:	2330      	movle	r3, #48	@ 0x30
 801a398:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a39c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a3a0:	1b92      	subs	r2, r2, r6
 801a3a2:	6122      	str	r2, [r4, #16]
 801a3a4:	f8cd a000 	str.w	sl, [sp]
 801a3a8:	464b      	mov	r3, r9
 801a3aa:	aa03      	add	r2, sp, #12
 801a3ac:	4621      	mov	r1, r4
 801a3ae:	4640      	mov	r0, r8
 801a3b0:	f7ff fee6 	bl	801a180 <_printf_common>
 801a3b4:	3001      	adds	r0, #1
 801a3b6:	d14a      	bne.n	801a44e <_printf_i+0x1f2>
 801a3b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a3bc:	b004      	add	sp, #16
 801a3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3c2:	6823      	ldr	r3, [r4, #0]
 801a3c4:	f043 0320 	orr.w	r3, r3, #32
 801a3c8:	6023      	str	r3, [r4, #0]
 801a3ca:	4833      	ldr	r0, [pc, #204]	@ (801a498 <_printf_i+0x23c>)
 801a3cc:	2778      	movs	r7, #120	@ 0x78
 801a3ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a3d2:	6823      	ldr	r3, [r4, #0]
 801a3d4:	6831      	ldr	r1, [r6, #0]
 801a3d6:	061f      	lsls	r7, r3, #24
 801a3d8:	f851 5b04 	ldr.w	r5, [r1], #4
 801a3dc:	d402      	bmi.n	801a3e4 <_printf_i+0x188>
 801a3de:	065f      	lsls	r7, r3, #25
 801a3e0:	bf48      	it	mi
 801a3e2:	b2ad      	uxthmi	r5, r5
 801a3e4:	6031      	str	r1, [r6, #0]
 801a3e6:	07d9      	lsls	r1, r3, #31
 801a3e8:	bf44      	itt	mi
 801a3ea:	f043 0320 	orrmi.w	r3, r3, #32
 801a3ee:	6023      	strmi	r3, [r4, #0]
 801a3f0:	b11d      	cbz	r5, 801a3fa <_printf_i+0x19e>
 801a3f2:	2310      	movs	r3, #16
 801a3f4:	e7ac      	b.n	801a350 <_printf_i+0xf4>
 801a3f6:	4827      	ldr	r0, [pc, #156]	@ (801a494 <_printf_i+0x238>)
 801a3f8:	e7e9      	b.n	801a3ce <_printf_i+0x172>
 801a3fa:	6823      	ldr	r3, [r4, #0]
 801a3fc:	f023 0320 	bic.w	r3, r3, #32
 801a400:	6023      	str	r3, [r4, #0]
 801a402:	e7f6      	b.n	801a3f2 <_printf_i+0x196>
 801a404:	4616      	mov	r6, r2
 801a406:	e7bd      	b.n	801a384 <_printf_i+0x128>
 801a408:	6833      	ldr	r3, [r6, #0]
 801a40a:	6825      	ldr	r5, [r4, #0]
 801a40c:	6961      	ldr	r1, [r4, #20]
 801a40e:	1d18      	adds	r0, r3, #4
 801a410:	6030      	str	r0, [r6, #0]
 801a412:	062e      	lsls	r6, r5, #24
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	d501      	bpl.n	801a41c <_printf_i+0x1c0>
 801a418:	6019      	str	r1, [r3, #0]
 801a41a:	e002      	b.n	801a422 <_printf_i+0x1c6>
 801a41c:	0668      	lsls	r0, r5, #25
 801a41e:	d5fb      	bpl.n	801a418 <_printf_i+0x1bc>
 801a420:	8019      	strh	r1, [r3, #0]
 801a422:	2300      	movs	r3, #0
 801a424:	6123      	str	r3, [r4, #16]
 801a426:	4616      	mov	r6, r2
 801a428:	e7bc      	b.n	801a3a4 <_printf_i+0x148>
 801a42a:	6833      	ldr	r3, [r6, #0]
 801a42c:	1d1a      	adds	r2, r3, #4
 801a42e:	6032      	str	r2, [r6, #0]
 801a430:	681e      	ldr	r6, [r3, #0]
 801a432:	6862      	ldr	r2, [r4, #4]
 801a434:	2100      	movs	r1, #0
 801a436:	4630      	mov	r0, r6
 801a438:	f7e5 fefa 	bl	8000230 <memchr>
 801a43c:	b108      	cbz	r0, 801a442 <_printf_i+0x1e6>
 801a43e:	1b80      	subs	r0, r0, r6
 801a440:	6060      	str	r0, [r4, #4]
 801a442:	6863      	ldr	r3, [r4, #4]
 801a444:	6123      	str	r3, [r4, #16]
 801a446:	2300      	movs	r3, #0
 801a448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a44c:	e7aa      	b.n	801a3a4 <_printf_i+0x148>
 801a44e:	6923      	ldr	r3, [r4, #16]
 801a450:	4632      	mov	r2, r6
 801a452:	4649      	mov	r1, r9
 801a454:	4640      	mov	r0, r8
 801a456:	47d0      	blx	sl
 801a458:	3001      	adds	r0, #1
 801a45a:	d0ad      	beq.n	801a3b8 <_printf_i+0x15c>
 801a45c:	6823      	ldr	r3, [r4, #0]
 801a45e:	079b      	lsls	r3, r3, #30
 801a460:	d413      	bmi.n	801a48a <_printf_i+0x22e>
 801a462:	68e0      	ldr	r0, [r4, #12]
 801a464:	9b03      	ldr	r3, [sp, #12]
 801a466:	4298      	cmp	r0, r3
 801a468:	bfb8      	it	lt
 801a46a:	4618      	movlt	r0, r3
 801a46c:	e7a6      	b.n	801a3bc <_printf_i+0x160>
 801a46e:	2301      	movs	r3, #1
 801a470:	4632      	mov	r2, r6
 801a472:	4649      	mov	r1, r9
 801a474:	4640      	mov	r0, r8
 801a476:	47d0      	blx	sl
 801a478:	3001      	adds	r0, #1
 801a47a:	d09d      	beq.n	801a3b8 <_printf_i+0x15c>
 801a47c:	3501      	adds	r5, #1
 801a47e:	68e3      	ldr	r3, [r4, #12]
 801a480:	9903      	ldr	r1, [sp, #12]
 801a482:	1a5b      	subs	r3, r3, r1
 801a484:	42ab      	cmp	r3, r5
 801a486:	dcf2      	bgt.n	801a46e <_printf_i+0x212>
 801a488:	e7eb      	b.n	801a462 <_printf_i+0x206>
 801a48a:	2500      	movs	r5, #0
 801a48c:	f104 0619 	add.w	r6, r4, #25
 801a490:	e7f5      	b.n	801a47e <_printf_i+0x222>
 801a492:	bf00      	nop
 801a494:	0801c923 	.word	0x0801c923
 801a498:	0801c934 	.word	0x0801c934

0801a49c <__sflush_r>:
 801a49c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a4:	0716      	lsls	r6, r2, #28
 801a4a6:	4605      	mov	r5, r0
 801a4a8:	460c      	mov	r4, r1
 801a4aa:	d454      	bmi.n	801a556 <__sflush_r+0xba>
 801a4ac:	684b      	ldr	r3, [r1, #4]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	dc02      	bgt.n	801a4b8 <__sflush_r+0x1c>
 801a4b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	dd48      	ble.n	801a54a <__sflush_r+0xae>
 801a4b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a4ba:	2e00      	cmp	r6, #0
 801a4bc:	d045      	beq.n	801a54a <__sflush_r+0xae>
 801a4be:	2300      	movs	r3, #0
 801a4c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a4c4:	682f      	ldr	r7, [r5, #0]
 801a4c6:	6a21      	ldr	r1, [r4, #32]
 801a4c8:	602b      	str	r3, [r5, #0]
 801a4ca:	d030      	beq.n	801a52e <__sflush_r+0x92>
 801a4cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a4ce:	89a3      	ldrh	r3, [r4, #12]
 801a4d0:	0759      	lsls	r1, r3, #29
 801a4d2:	d505      	bpl.n	801a4e0 <__sflush_r+0x44>
 801a4d4:	6863      	ldr	r3, [r4, #4]
 801a4d6:	1ad2      	subs	r2, r2, r3
 801a4d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a4da:	b10b      	cbz	r3, 801a4e0 <__sflush_r+0x44>
 801a4dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a4de:	1ad2      	subs	r2, r2, r3
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a4e4:	6a21      	ldr	r1, [r4, #32]
 801a4e6:	4628      	mov	r0, r5
 801a4e8:	47b0      	blx	r6
 801a4ea:	1c43      	adds	r3, r0, #1
 801a4ec:	89a3      	ldrh	r3, [r4, #12]
 801a4ee:	d106      	bne.n	801a4fe <__sflush_r+0x62>
 801a4f0:	6829      	ldr	r1, [r5, #0]
 801a4f2:	291d      	cmp	r1, #29
 801a4f4:	d82b      	bhi.n	801a54e <__sflush_r+0xb2>
 801a4f6:	4a2a      	ldr	r2, [pc, #168]	@ (801a5a0 <__sflush_r+0x104>)
 801a4f8:	410a      	asrs	r2, r1
 801a4fa:	07d6      	lsls	r6, r2, #31
 801a4fc:	d427      	bmi.n	801a54e <__sflush_r+0xb2>
 801a4fe:	2200      	movs	r2, #0
 801a500:	6062      	str	r2, [r4, #4]
 801a502:	04d9      	lsls	r1, r3, #19
 801a504:	6922      	ldr	r2, [r4, #16]
 801a506:	6022      	str	r2, [r4, #0]
 801a508:	d504      	bpl.n	801a514 <__sflush_r+0x78>
 801a50a:	1c42      	adds	r2, r0, #1
 801a50c:	d101      	bne.n	801a512 <__sflush_r+0x76>
 801a50e:	682b      	ldr	r3, [r5, #0]
 801a510:	b903      	cbnz	r3, 801a514 <__sflush_r+0x78>
 801a512:	6560      	str	r0, [r4, #84]	@ 0x54
 801a514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a516:	602f      	str	r7, [r5, #0]
 801a518:	b1b9      	cbz	r1, 801a54a <__sflush_r+0xae>
 801a51a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a51e:	4299      	cmp	r1, r3
 801a520:	d002      	beq.n	801a528 <__sflush_r+0x8c>
 801a522:	4628      	mov	r0, r5
 801a524:	f7ff fb48 	bl	8019bb8 <_free_r>
 801a528:	2300      	movs	r3, #0
 801a52a:	6363      	str	r3, [r4, #52]	@ 0x34
 801a52c:	e00d      	b.n	801a54a <__sflush_r+0xae>
 801a52e:	2301      	movs	r3, #1
 801a530:	4628      	mov	r0, r5
 801a532:	47b0      	blx	r6
 801a534:	4602      	mov	r2, r0
 801a536:	1c50      	adds	r0, r2, #1
 801a538:	d1c9      	bne.n	801a4ce <__sflush_r+0x32>
 801a53a:	682b      	ldr	r3, [r5, #0]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d0c6      	beq.n	801a4ce <__sflush_r+0x32>
 801a540:	2b1d      	cmp	r3, #29
 801a542:	d001      	beq.n	801a548 <__sflush_r+0xac>
 801a544:	2b16      	cmp	r3, #22
 801a546:	d11e      	bne.n	801a586 <__sflush_r+0xea>
 801a548:	602f      	str	r7, [r5, #0]
 801a54a:	2000      	movs	r0, #0
 801a54c:	e022      	b.n	801a594 <__sflush_r+0xf8>
 801a54e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a552:	b21b      	sxth	r3, r3
 801a554:	e01b      	b.n	801a58e <__sflush_r+0xf2>
 801a556:	690f      	ldr	r7, [r1, #16]
 801a558:	2f00      	cmp	r7, #0
 801a55a:	d0f6      	beq.n	801a54a <__sflush_r+0xae>
 801a55c:	0793      	lsls	r3, r2, #30
 801a55e:	680e      	ldr	r6, [r1, #0]
 801a560:	bf08      	it	eq
 801a562:	694b      	ldreq	r3, [r1, #20]
 801a564:	600f      	str	r7, [r1, #0]
 801a566:	bf18      	it	ne
 801a568:	2300      	movne	r3, #0
 801a56a:	eba6 0807 	sub.w	r8, r6, r7
 801a56e:	608b      	str	r3, [r1, #8]
 801a570:	f1b8 0f00 	cmp.w	r8, #0
 801a574:	dde9      	ble.n	801a54a <__sflush_r+0xae>
 801a576:	6a21      	ldr	r1, [r4, #32]
 801a578:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a57a:	4643      	mov	r3, r8
 801a57c:	463a      	mov	r2, r7
 801a57e:	4628      	mov	r0, r5
 801a580:	47b0      	blx	r6
 801a582:	2800      	cmp	r0, #0
 801a584:	dc08      	bgt.n	801a598 <__sflush_r+0xfc>
 801a586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a58a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a58e:	81a3      	strh	r3, [r4, #12]
 801a590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a598:	4407      	add	r7, r0
 801a59a:	eba8 0800 	sub.w	r8, r8, r0
 801a59e:	e7e7      	b.n	801a570 <__sflush_r+0xd4>
 801a5a0:	dfbffffe 	.word	0xdfbffffe

0801a5a4 <_fflush_r>:
 801a5a4:	b538      	push	{r3, r4, r5, lr}
 801a5a6:	690b      	ldr	r3, [r1, #16]
 801a5a8:	4605      	mov	r5, r0
 801a5aa:	460c      	mov	r4, r1
 801a5ac:	b913      	cbnz	r3, 801a5b4 <_fflush_r+0x10>
 801a5ae:	2500      	movs	r5, #0
 801a5b0:	4628      	mov	r0, r5
 801a5b2:	bd38      	pop	{r3, r4, r5, pc}
 801a5b4:	b118      	cbz	r0, 801a5be <_fflush_r+0x1a>
 801a5b6:	6a03      	ldr	r3, [r0, #32]
 801a5b8:	b90b      	cbnz	r3, 801a5be <_fflush_r+0x1a>
 801a5ba:	f7fe ff1f 	bl	80193fc <__sinit>
 801a5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d0f3      	beq.n	801a5ae <_fflush_r+0xa>
 801a5c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a5c8:	07d0      	lsls	r0, r2, #31
 801a5ca:	d404      	bmi.n	801a5d6 <_fflush_r+0x32>
 801a5cc:	0599      	lsls	r1, r3, #22
 801a5ce:	d402      	bmi.n	801a5d6 <_fflush_r+0x32>
 801a5d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a5d2:	f7ff faae 	bl	8019b32 <__retarget_lock_acquire_recursive>
 801a5d6:	4628      	mov	r0, r5
 801a5d8:	4621      	mov	r1, r4
 801a5da:	f7ff ff5f 	bl	801a49c <__sflush_r>
 801a5de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a5e0:	07da      	lsls	r2, r3, #31
 801a5e2:	4605      	mov	r5, r0
 801a5e4:	d4e4      	bmi.n	801a5b0 <_fflush_r+0xc>
 801a5e6:	89a3      	ldrh	r3, [r4, #12]
 801a5e8:	059b      	lsls	r3, r3, #22
 801a5ea:	d4e1      	bmi.n	801a5b0 <_fflush_r+0xc>
 801a5ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a5ee:	f7ff faa1 	bl	8019b34 <__retarget_lock_release_recursive>
 801a5f2:	e7dd      	b.n	801a5b0 <_fflush_r+0xc>

0801a5f4 <_malloc_usable_size_r>:
 801a5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5f8:	1f18      	subs	r0, r3, #4
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	bfbc      	itt	lt
 801a5fe:	580b      	ldrlt	r3, [r1, r0]
 801a600:	18c0      	addlt	r0, r0, r3
 801a602:	4770      	bx	lr

0801a604 <__sread>:
 801a604:	b510      	push	{r4, lr}
 801a606:	460c      	mov	r4, r1
 801a608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a60c:	f000 f872 	bl	801a6f4 <_read_r>
 801a610:	2800      	cmp	r0, #0
 801a612:	bfab      	itete	ge
 801a614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a616:	89a3      	ldrhlt	r3, [r4, #12]
 801a618:	181b      	addge	r3, r3, r0
 801a61a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a61e:	bfac      	ite	ge
 801a620:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a622:	81a3      	strhlt	r3, [r4, #12]
 801a624:	bd10      	pop	{r4, pc}

0801a626 <__swrite>:
 801a626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a62a:	461f      	mov	r7, r3
 801a62c:	898b      	ldrh	r3, [r1, #12]
 801a62e:	05db      	lsls	r3, r3, #23
 801a630:	4605      	mov	r5, r0
 801a632:	460c      	mov	r4, r1
 801a634:	4616      	mov	r6, r2
 801a636:	d505      	bpl.n	801a644 <__swrite+0x1e>
 801a638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a63c:	2302      	movs	r3, #2
 801a63e:	2200      	movs	r2, #0
 801a640:	f000 f846 	bl	801a6d0 <_lseek_r>
 801a644:	89a3      	ldrh	r3, [r4, #12]
 801a646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a64a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a64e:	81a3      	strh	r3, [r4, #12]
 801a650:	4632      	mov	r2, r6
 801a652:	463b      	mov	r3, r7
 801a654:	4628      	mov	r0, r5
 801a656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a65a:	f000 b85d 	b.w	801a718 <_write_r>

0801a65e <__sseek>:
 801a65e:	b510      	push	{r4, lr}
 801a660:	460c      	mov	r4, r1
 801a662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a666:	f000 f833 	bl	801a6d0 <_lseek_r>
 801a66a:	1c43      	adds	r3, r0, #1
 801a66c:	89a3      	ldrh	r3, [r4, #12]
 801a66e:	bf15      	itete	ne
 801a670:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a67a:	81a3      	strheq	r3, [r4, #12]
 801a67c:	bf18      	it	ne
 801a67e:	81a3      	strhne	r3, [r4, #12]
 801a680:	bd10      	pop	{r4, pc}

0801a682 <__sclose>:
 801a682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a686:	f000 b813 	b.w	801a6b0 <_close_r>
	...

0801a68c <fiprintf>:
 801a68c:	b40e      	push	{r1, r2, r3}
 801a68e:	b503      	push	{r0, r1, lr}
 801a690:	4601      	mov	r1, r0
 801a692:	ab03      	add	r3, sp, #12
 801a694:	4805      	ldr	r0, [pc, #20]	@ (801a6ac <fiprintf+0x20>)
 801a696:	f853 2b04 	ldr.w	r2, [r3], #4
 801a69a:	6800      	ldr	r0, [r0, #0]
 801a69c:	9301      	str	r3, [sp, #4]
 801a69e:	f7ff fc57 	bl	8019f50 <_vfiprintf_r>
 801a6a2:	b002      	add	sp, #8
 801a6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6a8:	b003      	add	sp, #12
 801a6aa:	4770      	bx	lr
 801a6ac:	20000a74 	.word	0x20000a74

0801a6b0 <_close_r>:
 801a6b0:	b538      	push	{r3, r4, r5, lr}
 801a6b2:	4d06      	ldr	r5, [pc, #24]	@ (801a6cc <_close_r+0x1c>)
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	4604      	mov	r4, r0
 801a6b8:	4608      	mov	r0, r1
 801a6ba:	602b      	str	r3, [r5, #0]
 801a6bc:	f7e7 ff64 	bl	8002588 <_close>
 801a6c0:	1c43      	adds	r3, r0, #1
 801a6c2:	d102      	bne.n	801a6ca <_close_r+0x1a>
 801a6c4:	682b      	ldr	r3, [r5, #0]
 801a6c6:	b103      	cbz	r3, 801a6ca <_close_r+0x1a>
 801a6c8:	6023      	str	r3, [r4, #0]
 801a6ca:	bd38      	pop	{r3, r4, r5, pc}
 801a6cc:	20015b48 	.word	0x20015b48

0801a6d0 <_lseek_r>:
 801a6d0:	b538      	push	{r3, r4, r5, lr}
 801a6d2:	4d07      	ldr	r5, [pc, #28]	@ (801a6f0 <_lseek_r+0x20>)
 801a6d4:	4604      	mov	r4, r0
 801a6d6:	4608      	mov	r0, r1
 801a6d8:	4611      	mov	r1, r2
 801a6da:	2200      	movs	r2, #0
 801a6dc:	602a      	str	r2, [r5, #0]
 801a6de:	461a      	mov	r2, r3
 801a6e0:	f7e7 ff79 	bl	80025d6 <_lseek>
 801a6e4:	1c43      	adds	r3, r0, #1
 801a6e6:	d102      	bne.n	801a6ee <_lseek_r+0x1e>
 801a6e8:	682b      	ldr	r3, [r5, #0]
 801a6ea:	b103      	cbz	r3, 801a6ee <_lseek_r+0x1e>
 801a6ec:	6023      	str	r3, [r4, #0]
 801a6ee:	bd38      	pop	{r3, r4, r5, pc}
 801a6f0:	20015b48 	.word	0x20015b48

0801a6f4 <_read_r>:
 801a6f4:	b538      	push	{r3, r4, r5, lr}
 801a6f6:	4d07      	ldr	r5, [pc, #28]	@ (801a714 <_read_r+0x20>)
 801a6f8:	4604      	mov	r4, r0
 801a6fa:	4608      	mov	r0, r1
 801a6fc:	4611      	mov	r1, r2
 801a6fe:	2200      	movs	r2, #0
 801a700:	602a      	str	r2, [r5, #0]
 801a702:	461a      	mov	r2, r3
 801a704:	f7e7 ff23 	bl	800254e <_read>
 801a708:	1c43      	adds	r3, r0, #1
 801a70a:	d102      	bne.n	801a712 <_read_r+0x1e>
 801a70c:	682b      	ldr	r3, [r5, #0]
 801a70e:	b103      	cbz	r3, 801a712 <_read_r+0x1e>
 801a710:	6023      	str	r3, [r4, #0]
 801a712:	bd38      	pop	{r3, r4, r5, pc}
 801a714:	20015b48 	.word	0x20015b48

0801a718 <_write_r>:
 801a718:	b538      	push	{r3, r4, r5, lr}
 801a71a:	4d07      	ldr	r5, [pc, #28]	@ (801a738 <_write_r+0x20>)
 801a71c:	4604      	mov	r4, r0
 801a71e:	4608      	mov	r0, r1
 801a720:	4611      	mov	r1, r2
 801a722:	2200      	movs	r2, #0
 801a724:	602a      	str	r2, [r5, #0]
 801a726:	461a      	mov	r2, r3
 801a728:	f7e7 fc50 	bl	8001fcc <_write>
 801a72c:	1c43      	adds	r3, r0, #1
 801a72e:	d102      	bne.n	801a736 <_write_r+0x1e>
 801a730:	682b      	ldr	r3, [r5, #0]
 801a732:	b103      	cbz	r3, 801a736 <_write_r+0x1e>
 801a734:	6023      	str	r3, [r4, #0]
 801a736:	bd38      	pop	{r3, r4, r5, pc}
 801a738:	20015b48 	.word	0x20015b48

0801a73c <abort>:
 801a73c:	b508      	push	{r3, lr}
 801a73e:	2006      	movs	r0, #6
 801a740:	f000 f82c 	bl	801a79c <raise>
 801a744:	2001      	movs	r0, #1
 801a746:	f7e7 fef7 	bl	8002538 <_exit>

0801a74a <_raise_r>:
 801a74a:	291f      	cmp	r1, #31
 801a74c:	b538      	push	{r3, r4, r5, lr}
 801a74e:	4605      	mov	r5, r0
 801a750:	460c      	mov	r4, r1
 801a752:	d904      	bls.n	801a75e <_raise_r+0x14>
 801a754:	2316      	movs	r3, #22
 801a756:	6003      	str	r3, [r0, #0]
 801a758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a75c:	bd38      	pop	{r3, r4, r5, pc}
 801a75e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a760:	b112      	cbz	r2, 801a768 <_raise_r+0x1e>
 801a762:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a766:	b94b      	cbnz	r3, 801a77c <_raise_r+0x32>
 801a768:	4628      	mov	r0, r5
 801a76a:	f000 f831 	bl	801a7d0 <_getpid_r>
 801a76e:	4622      	mov	r2, r4
 801a770:	4601      	mov	r1, r0
 801a772:	4628      	mov	r0, r5
 801a774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a778:	f000 b818 	b.w	801a7ac <_kill_r>
 801a77c:	2b01      	cmp	r3, #1
 801a77e:	d00a      	beq.n	801a796 <_raise_r+0x4c>
 801a780:	1c59      	adds	r1, r3, #1
 801a782:	d103      	bne.n	801a78c <_raise_r+0x42>
 801a784:	2316      	movs	r3, #22
 801a786:	6003      	str	r3, [r0, #0]
 801a788:	2001      	movs	r0, #1
 801a78a:	e7e7      	b.n	801a75c <_raise_r+0x12>
 801a78c:	2100      	movs	r1, #0
 801a78e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a792:	4620      	mov	r0, r4
 801a794:	4798      	blx	r3
 801a796:	2000      	movs	r0, #0
 801a798:	e7e0      	b.n	801a75c <_raise_r+0x12>
	...

0801a79c <raise>:
 801a79c:	4b02      	ldr	r3, [pc, #8]	@ (801a7a8 <raise+0xc>)
 801a79e:	4601      	mov	r1, r0
 801a7a0:	6818      	ldr	r0, [r3, #0]
 801a7a2:	f7ff bfd2 	b.w	801a74a <_raise_r>
 801a7a6:	bf00      	nop
 801a7a8:	20000a74 	.word	0x20000a74

0801a7ac <_kill_r>:
 801a7ac:	b538      	push	{r3, r4, r5, lr}
 801a7ae:	4d07      	ldr	r5, [pc, #28]	@ (801a7cc <_kill_r+0x20>)
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	4604      	mov	r4, r0
 801a7b4:	4608      	mov	r0, r1
 801a7b6:	4611      	mov	r1, r2
 801a7b8:	602b      	str	r3, [r5, #0]
 801a7ba:	f7e7 fead 	bl	8002518 <_kill>
 801a7be:	1c43      	adds	r3, r0, #1
 801a7c0:	d102      	bne.n	801a7c8 <_kill_r+0x1c>
 801a7c2:	682b      	ldr	r3, [r5, #0]
 801a7c4:	b103      	cbz	r3, 801a7c8 <_kill_r+0x1c>
 801a7c6:	6023      	str	r3, [r4, #0]
 801a7c8:	bd38      	pop	{r3, r4, r5, pc}
 801a7ca:	bf00      	nop
 801a7cc:	20015b48 	.word	0x20015b48

0801a7d0 <_getpid_r>:
 801a7d0:	f7e7 be9a 	b.w	8002508 <_getpid>

0801a7d4 <atan2>:
 801a7d4:	f000 b800 	b.w	801a7d8 <__ieee754_atan2>

0801a7d8 <__ieee754_atan2>:
 801a7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a7dc:	ec57 6b11 	vmov	r6, r7, d1
 801a7e0:	4273      	negs	r3, r6
 801a7e2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a960 <__ieee754_atan2+0x188>
 801a7e6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a7ea:	4333      	orrs	r3, r6
 801a7ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a7f0:	4543      	cmp	r3, r8
 801a7f2:	ec51 0b10 	vmov	r0, r1, d0
 801a7f6:	4635      	mov	r5, r6
 801a7f8:	d809      	bhi.n	801a80e <__ieee754_atan2+0x36>
 801a7fa:	4244      	negs	r4, r0
 801a7fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a800:	4304      	orrs	r4, r0
 801a802:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a806:	4544      	cmp	r4, r8
 801a808:	468e      	mov	lr, r1
 801a80a:	4681      	mov	r9, r0
 801a80c:	d907      	bls.n	801a81e <__ieee754_atan2+0x46>
 801a80e:	4632      	mov	r2, r6
 801a810:	463b      	mov	r3, r7
 801a812:	f7e5 fd63 	bl	80002dc <__adddf3>
 801a816:	ec41 0b10 	vmov	d0, r0, r1
 801a81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a81e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a822:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a826:	4334      	orrs	r4, r6
 801a828:	d103      	bne.n	801a832 <__ieee754_atan2+0x5a>
 801a82a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a82e:	f000 b8b7 	b.w	801a9a0 <atan>
 801a832:	17bc      	asrs	r4, r7, #30
 801a834:	f004 0402 	and.w	r4, r4, #2
 801a838:	ea53 0909 	orrs.w	r9, r3, r9
 801a83c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a840:	d107      	bne.n	801a852 <__ieee754_atan2+0x7a>
 801a842:	2c02      	cmp	r4, #2
 801a844:	d05f      	beq.n	801a906 <__ieee754_atan2+0x12e>
 801a846:	2c03      	cmp	r4, #3
 801a848:	d1e5      	bne.n	801a816 <__ieee754_atan2+0x3e>
 801a84a:	a141      	add	r1, pc, #260	@ (adr r1, 801a950 <__ieee754_atan2+0x178>)
 801a84c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a850:	e7e1      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a852:	4315      	orrs	r5, r2
 801a854:	d106      	bne.n	801a864 <__ieee754_atan2+0x8c>
 801a856:	f1be 0f00 	cmp.w	lr, #0
 801a85a:	da5f      	bge.n	801a91c <__ieee754_atan2+0x144>
 801a85c:	a13e      	add	r1, pc, #248	@ (adr r1, 801a958 <__ieee754_atan2+0x180>)
 801a85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a862:	e7d8      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a864:	4542      	cmp	r2, r8
 801a866:	d10f      	bne.n	801a888 <__ieee754_atan2+0xb0>
 801a868:	4293      	cmp	r3, r2
 801a86a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a86e:	d107      	bne.n	801a880 <__ieee754_atan2+0xa8>
 801a870:	2c02      	cmp	r4, #2
 801a872:	d84c      	bhi.n	801a90e <__ieee754_atan2+0x136>
 801a874:	4b34      	ldr	r3, [pc, #208]	@ (801a948 <__ieee754_atan2+0x170>)
 801a876:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a87a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a87e:	e7ca      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a880:	2c02      	cmp	r4, #2
 801a882:	d848      	bhi.n	801a916 <__ieee754_atan2+0x13e>
 801a884:	4b31      	ldr	r3, [pc, #196]	@ (801a94c <__ieee754_atan2+0x174>)
 801a886:	e7f6      	b.n	801a876 <__ieee754_atan2+0x9e>
 801a888:	4543      	cmp	r3, r8
 801a88a:	d0e4      	beq.n	801a856 <__ieee754_atan2+0x7e>
 801a88c:	1a9b      	subs	r3, r3, r2
 801a88e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a892:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a896:	da1e      	bge.n	801a8d6 <__ieee754_atan2+0xfe>
 801a898:	2f00      	cmp	r7, #0
 801a89a:	da01      	bge.n	801a8a0 <__ieee754_atan2+0xc8>
 801a89c:	323c      	adds	r2, #60	@ 0x3c
 801a89e:	db1e      	blt.n	801a8de <__ieee754_atan2+0x106>
 801a8a0:	4632      	mov	r2, r6
 801a8a2:	463b      	mov	r3, r7
 801a8a4:	f7e5 fffa 	bl	800089c <__aeabi_ddiv>
 801a8a8:	ec41 0b10 	vmov	d0, r0, r1
 801a8ac:	f000 fa10 	bl	801acd0 <fabs>
 801a8b0:	f000 f876 	bl	801a9a0 <atan>
 801a8b4:	ec51 0b10 	vmov	r0, r1, d0
 801a8b8:	2c01      	cmp	r4, #1
 801a8ba:	d013      	beq.n	801a8e4 <__ieee754_atan2+0x10c>
 801a8bc:	2c02      	cmp	r4, #2
 801a8be:	d015      	beq.n	801a8ec <__ieee754_atan2+0x114>
 801a8c0:	2c00      	cmp	r4, #0
 801a8c2:	d0a8      	beq.n	801a816 <__ieee754_atan2+0x3e>
 801a8c4:	a318      	add	r3, pc, #96	@ (adr r3, 801a928 <__ieee754_atan2+0x150>)
 801a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ca:	f7e5 fd05 	bl	80002d8 <__aeabi_dsub>
 801a8ce:	a318      	add	r3, pc, #96	@ (adr r3, 801a930 <__ieee754_atan2+0x158>)
 801a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8d4:	e014      	b.n	801a900 <__ieee754_atan2+0x128>
 801a8d6:	a118      	add	r1, pc, #96	@ (adr r1, 801a938 <__ieee754_atan2+0x160>)
 801a8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8dc:	e7ec      	b.n	801a8b8 <__ieee754_atan2+0xe0>
 801a8de:	2000      	movs	r0, #0
 801a8e0:	2100      	movs	r1, #0
 801a8e2:	e7e9      	b.n	801a8b8 <__ieee754_atan2+0xe0>
 801a8e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a8e8:	4619      	mov	r1, r3
 801a8ea:	e794      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a8ec:	a30e      	add	r3, pc, #56	@ (adr r3, 801a928 <__ieee754_atan2+0x150>)
 801a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8f2:	f7e5 fcf1 	bl	80002d8 <__aeabi_dsub>
 801a8f6:	4602      	mov	r2, r0
 801a8f8:	460b      	mov	r3, r1
 801a8fa:	a10d      	add	r1, pc, #52	@ (adr r1, 801a930 <__ieee754_atan2+0x158>)
 801a8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a900:	f7e5 fcea 	bl	80002d8 <__aeabi_dsub>
 801a904:	e787      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a906:	a10a      	add	r1, pc, #40	@ (adr r1, 801a930 <__ieee754_atan2+0x158>)
 801a908:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a90c:	e783      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a90e:	a10c      	add	r1, pc, #48	@ (adr r1, 801a940 <__ieee754_atan2+0x168>)
 801a910:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a914:	e77f      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a916:	2000      	movs	r0, #0
 801a918:	2100      	movs	r1, #0
 801a91a:	e77c      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a91c:	a106      	add	r1, pc, #24	@ (adr r1, 801a938 <__ieee754_atan2+0x160>)
 801a91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a922:	e778      	b.n	801a816 <__ieee754_atan2+0x3e>
 801a924:	f3af 8000 	nop.w
 801a928:	33145c07 	.word	0x33145c07
 801a92c:	3ca1a626 	.word	0x3ca1a626
 801a930:	54442d18 	.word	0x54442d18
 801a934:	400921fb 	.word	0x400921fb
 801a938:	54442d18 	.word	0x54442d18
 801a93c:	3ff921fb 	.word	0x3ff921fb
 801a940:	54442d18 	.word	0x54442d18
 801a944:	3fe921fb 	.word	0x3fe921fb
 801a948:	0801c960 	.word	0x0801c960
 801a94c:	0801c948 	.word	0x0801c948
 801a950:	54442d18 	.word	0x54442d18
 801a954:	c00921fb 	.word	0xc00921fb
 801a958:	54442d18 	.word	0x54442d18
 801a95c:	bff921fb 	.word	0xbff921fb
 801a960:	7ff00000 	.word	0x7ff00000

0801a964 <sqrtf>:
 801a964:	b508      	push	{r3, lr}
 801a966:	ed2d 8b02 	vpush	{d8}
 801a96a:	eeb0 8a40 	vmov.f32	s16, s0
 801a96e:	f000 f9b7 	bl	801ace0 <__ieee754_sqrtf>
 801a972:	eeb4 8a48 	vcmp.f32	s16, s16
 801a976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a97a:	d60c      	bvs.n	801a996 <sqrtf+0x32>
 801a97c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801a99c <sqrtf+0x38>
 801a980:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a988:	d505      	bpl.n	801a996 <sqrtf+0x32>
 801a98a:	f7ff f8a7 	bl	8019adc <__errno>
 801a98e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a992:	2321      	movs	r3, #33	@ 0x21
 801a994:	6003      	str	r3, [r0, #0]
 801a996:	ecbd 8b02 	vpop	{d8}
 801a99a:	bd08      	pop	{r3, pc}
 801a99c:	00000000 	.word	0x00000000

0801a9a0 <atan>:
 801a9a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a4:	ec55 4b10 	vmov	r4, r5, d0
 801a9a8:	4bbf      	ldr	r3, [pc, #764]	@ (801aca8 <atan+0x308>)
 801a9aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a9ae:	429e      	cmp	r6, r3
 801a9b0:	46ab      	mov	fp, r5
 801a9b2:	d918      	bls.n	801a9e6 <atan+0x46>
 801a9b4:	4bbd      	ldr	r3, [pc, #756]	@ (801acac <atan+0x30c>)
 801a9b6:	429e      	cmp	r6, r3
 801a9b8:	d801      	bhi.n	801a9be <atan+0x1e>
 801a9ba:	d109      	bne.n	801a9d0 <atan+0x30>
 801a9bc:	b144      	cbz	r4, 801a9d0 <atan+0x30>
 801a9be:	4622      	mov	r2, r4
 801a9c0:	462b      	mov	r3, r5
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	4629      	mov	r1, r5
 801a9c6:	f7e5 fc89 	bl	80002dc <__adddf3>
 801a9ca:	4604      	mov	r4, r0
 801a9cc:	460d      	mov	r5, r1
 801a9ce:	e006      	b.n	801a9de <atan+0x3e>
 801a9d0:	f1bb 0f00 	cmp.w	fp, #0
 801a9d4:	f340 812b 	ble.w	801ac2e <atan+0x28e>
 801a9d8:	a597      	add	r5, pc, #604	@ (adr r5, 801ac38 <atan+0x298>)
 801a9da:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a9de:	ec45 4b10 	vmov	d0, r4, r5
 801a9e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9e6:	4bb2      	ldr	r3, [pc, #712]	@ (801acb0 <atan+0x310>)
 801a9e8:	429e      	cmp	r6, r3
 801a9ea:	d813      	bhi.n	801aa14 <atan+0x74>
 801a9ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a9f0:	429e      	cmp	r6, r3
 801a9f2:	d80c      	bhi.n	801aa0e <atan+0x6e>
 801a9f4:	a392      	add	r3, pc, #584	@ (adr r3, 801ac40 <atan+0x2a0>)
 801a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	4629      	mov	r1, r5
 801a9fe:	f7e5 fc6d 	bl	80002dc <__adddf3>
 801aa02:	4bac      	ldr	r3, [pc, #688]	@ (801acb4 <atan+0x314>)
 801aa04:	2200      	movs	r2, #0
 801aa06:	f7e6 f8af 	bl	8000b68 <__aeabi_dcmpgt>
 801aa0a:	2800      	cmp	r0, #0
 801aa0c:	d1e7      	bne.n	801a9de <atan+0x3e>
 801aa0e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801aa12:	e029      	b.n	801aa68 <atan+0xc8>
 801aa14:	f000 f95c 	bl	801acd0 <fabs>
 801aa18:	4ba7      	ldr	r3, [pc, #668]	@ (801acb8 <atan+0x318>)
 801aa1a:	429e      	cmp	r6, r3
 801aa1c:	ec55 4b10 	vmov	r4, r5, d0
 801aa20:	f200 80bc 	bhi.w	801ab9c <atan+0x1fc>
 801aa24:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801aa28:	429e      	cmp	r6, r3
 801aa2a:	f200 809e 	bhi.w	801ab6a <atan+0x1ca>
 801aa2e:	4622      	mov	r2, r4
 801aa30:	462b      	mov	r3, r5
 801aa32:	4620      	mov	r0, r4
 801aa34:	4629      	mov	r1, r5
 801aa36:	f7e5 fc51 	bl	80002dc <__adddf3>
 801aa3a:	4b9e      	ldr	r3, [pc, #632]	@ (801acb4 <atan+0x314>)
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	f7e5 fc4b 	bl	80002d8 <__aeabi_dsub>
 801aa42:	2200      	movs	r2, #0
 801aa44:	4606      	mov	r6, r0
 801aa46:	460f      	mov	r7, r1
 801aa48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801aa4c:	4620      	mov	r0, r4
 801aa4e:	4629      	mov	r1, r5
 801aa50:	f7e5 fc44 	bl	80002dc <__adddf3>
 801aa54:	4602      	mov	r2, r0
 801aa56:	460b      	mov	r3, r1
 801aa58:	4630      	mov	r0, r6
 801aa5a:	4639      	mov	r1, r7
 801aa5c:	f7e5 ff1e 	bl	800089c <__aeabi_ddiv>
 801aa60:	f04f 0a00 	mov.w	sl, #0
 801aa64:	4604      	mov	r4, r0
 801aa66:	460d      	mov	r5, r1
 801aa68:	4622      	mov	r2, r4
 801aa6a:	462b      	mov	r3, r5
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	4629      	mov	r1, r5
 801aa70:	f7e5 fdea 	bl	8000648 <__aeabi_dmul>
 801aa74:	4602      	mov	r2, r0
 801aa76:	460b      	mov	r3, r1
 801aa78:	4680      	mov	r8, r0
 801aa7a:	4689      	mov	r9, r1
 801aa7c:	f7e5 fde4 	bl	8000648 <__aeabi_dmul>
 801aa80:	a371      	add	r3, pc, #452	@ (adr r3, 801ac48 <atan+0x2a8>)
 801aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa86:	4606      	mov	r6, r0
 801aa88:	460f      	mov	r7, r1
 801aa8a:	f7e5 fddd 	bl	8000648 <__aeabi_dmul>
 801aa8e:	a370      	add	r3, pc, #448	@ (adr r3, 801ac50 <atan+0x2b0>)
 801aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa94:	f7e5 fc22 	bl	80002dc <__adddf3>
 801aa98:	4632      	mov	r2, r6
 801aa9a:	463b      	mov	r3, r7
 801aa9c:	f7e5 fdd4 	bl	8000648 <__aeabi_dmul>
 801aaa0:	a36d      	add	r3, pc, #436	@ (adr r3, 801ac58 <atan+0x2b8>)
 801aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa6:	f7e5 fc19 	bl	80002dc <__adddf3>
 801aaaa:	4632      	mov	r2, r6
 801aaac:	463b      	mov	r3, r7
 801aaae:	f7e5 fdcb 	bl	8000648 <__aeabi_dmul>
 801aab2:	a36b      	add	r3, pc, #428	@ (adr r3, 801ac60 <atan+0x2c0>)
 801aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab8:	f7e5 fc10 	bl	80002dc <__adddf3>
 801aabc:	4632      	mov	r2, r6
 801aabe:	463b      	mov	r3, r7
 801aac0:	f7e5 fdc2 	bl	8000648 <__aeabi_dmul>
 801aac4:	a368      	add	r3, pc, #416	@ (adr r3, 801ac68 <atan+0x2c8>)
 801aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaca:	f7e5 fc07 	bl	80002dc <__adddf3>
 801aace:	4632      	mov	r2, r6
 801aad0:	463b      	mov	r3, r7
 801aad2:	f7e5 fdb9 	bl	8000648 <__aeabi_dmul>
 801aad6:	a366      	add	r3, pc, #408	@ (adr r3, 801ac70 <atan+0x2d0>)
 801aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aadc:	f7e5 fbfe 	bl	80002dc <__adddf3>
 801aae0:	4642      	mov	r2, r8
 801aae2:	464b      	mov	r3, r9
 801aae4:	f7e5 fdb0 	bl	8000648 <__aeabi_dmul>
 801aae8:	a363      	add	r3, pc, #396	@ (adr r3, 801ac78 <atan+0x2d8>)
 801aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaee:	4680      	mov	r8, r0
 801aaf0:	4689      	mov	r9, r1
 801aaf2:	4630      	mov	r0, r6
 801aaf4:	4639      	mov	r1, r7
 801aaf6:	f7e5 fda7 	bl	8000648 <__aeabi_dmul>
 801aafa:	a361      	add	r3, pc, #388	@ (adr r3, 801ac80 <atan+0x2e0>)
 801aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab00:	f7e5 fbea 	bl	80002d8 <__aeabi_dsub>
 801ab04:	4632      	mov	r2, r6
 801ab06:	463b      	mov	r3, r7
 801ab08:	f7e5 fd9e 	bl	8000648 <__aeabi_dmul>
 801ab0c:	a35e      	add	r3, pc, #376	@ (adr r3, 801ac88 <atan+0x2e8>)
 801ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab12:	f7e5 fbe1 	bl	80002d8 <__aeabi_dsub>
 801ab16:	4632      	mov	r2, r6
 801ab18:	463b      	mov	r3, r7
 801ab1a:	f7e5 fd95 	bl	8000648 <__aeabi_dmul>
 801ab1e:	a35c      	add	r3, pc, #368	@ (adr r3, 801ac90 <atan+0x2f0>)
 801ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab24:	f7e5 fbd8 	bl	80002d8 <__aeabi_dsub>
 801ab28:	4632      	mov	r2, r6
 801ab2a:	463b      	mov	r3, r7
 801ab2c:	f7e5 fd8c 	bl	8000648 <__aeabi_dmul>
 801ab30:	a359      	add	r3, pc, #356	@ (adr r3, 801ac98 <atan+0x2f8>)
 801ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab36:	f7e5 fbcf 	bl	80002d8 <__aeabi_dsub>
 801ab3a:	4632      	mov	r2, r6
 801ab3c:	463b      	mov	r3, r7
 801ab3e:	f7e5 fd83 	bl	8000648 <__aeabi_dmul>
 801ab42:	4602      	mov	r2, r0
 801ab44:	460b      	mov	r3, r1
 801ab46:	4640      	mov	r0, r8
 801ab48:	4649      	mov	r1, r9
 801ab4a:	f7e5 fbc7 	bl	80002dc <__adddf3>
 801ab4e:	4622      	mov	r2, r4
 801ab50:	462b      	mov	r3, r5
 801ab52:	f7e5 fd79 	bl	8000648 <__aeabi_dmul>
 801ab56:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801ab5a:	4602      	mov	r2, r0
 801ab5c:	460b      	mov	r3, r1
 801ab5e:	d148      	bne.n	801abf2 <atan+0x252>
 801ab60:	4620      	mov	r0, r4
 801ab62:	4629      	mov	r1, r5
 801ab64:	f7e5 fbb8 	bl	80002d8 <__aeabi_dsub>
 801ab68:	e72f      	b.n	801a9ca <atan+0x2a>
 801ab6a:	4b52      	ldr	r3, [pc, #328]	@ (801acb4 <atan+0x314>)
 801ab6c:	2200      	movs	r2, #0
 801ab6e:	4620      	mov	r0, r4
 801ab70:	4629      	mov	r1, r5
 801ab72:	f7e5 fbb1 	bl	80002d8 <__aeabi_dsub>
 801ab76:	4b4f      	ldr	r3, [pc, #316]	@ (801acb4 <atan+0x314>)
 801ab78:	4606      	mov	r6, r0
 801ab7a:	460f      	mov	r7, r1
 801ab7c:	2200      	movs	r2, #0
 801ab7e:	4620      	mov	r0, r4
 801ab80:	4629      	mov	r1, r5
 801ab82:	f7e5 fbab 	bl	80002dc <__adddf3>
 801ab86:	4602      	mov	r2, r0
 801ab88:	460b      	mov	r3, r1
 801ab8a:	4630      	mov	r0, r6
 801ab8c:	4639      	mov	r1, r7
 801ab8e:	f7e5 fe85 	bl	800089c <__aeabi_ddiv>
 801ab92:	f04f 0a01 	mov.w	sl, #1
 801ab96:	4604      	mov	r4, r0
 801ab98:	460d      	mov	r5, r1
 801ab9a:	e765      	b.n	801aa68 <atan+0xc8>
 801ab9c:	4b47      	ldr	r3, [pc, #284]	@ (801acbc <atan+0x31c>)
 801ab9e:	429e      	cmp	r6, r3
 801aba0:	d21c      	bcs.n	801abdc <atan+0x23c>
 801aba2:	4b47      	ldr	r3, [pc, #284]	@ (801acc0 <atan+0x320>)
 801aba4:	2200      	movs	r2, #0
 801aba6:	4620      	mov	r0, r4
 801aba8:	4629      	mov	r1, r5
 801abaa:	f7e5 fb95 	bl	80002d8 <__aeabi_dsub>
 801abae:	4b44      	ldr	r3, [pc, #272]	@ (801acc0 <atan+0x320>)
 801abb0:	4606      	mov	r6, r0
 801abb2:	460f      	mov	r7, r1
 801abb4:	2200      	movs	r2, #0
 801abb6:	4620      	mov	r0, r4
 801abb8:	4629      	mov	r1, r5
 801abba:	f7e5 fd45 	bl	8000648 <__aeabi_dmul>
 801abbe:	4b3d      	ldr	r3, [pc, #244]	@ (801acb4 <atan+0x314>)
 801abc0:	2200      	movs	r2, #0
 801abc2:	f7e5 fb8b 	bl	80002dc <__adddf3>
 801abc6:	4602      	mov	r2, r0
 801abc8:	460b      	mov	r3, r1
 801abca:	4630      	mov	r0, r6
 801abcc:	4639      	mov	r1, r7
 801abce:	f7e5 fe65 	bl	800089c <__aeabi_ddiv>
 801abd2:	f04f 0a02 	mov.w	sl, #2
 801abd6:	4604      	mov	r4, r0
 801abd8:	460d      	mov	r5, r1
 801abda:	e745      	b.n	801aa68 <atan+0xc8>
 801abdc:	4622      	mov	r2, r4
 801abde:	462b      	mov	r3, r5
 801abe0:	4938      	ldr	r1, [pc, #224]	@ (801acc4 <atan+0x324>)
 801abe2:	2000      	movs	r0, #0
 801abe4:	f7e5 fe5a 	bl	800089c <__aeabi_ddiv>
 801abe8:	f04f 0a03 	mov.w	sl, #3
 801abec:	4604      	mov	r4, r0
 801abee:	460d      	mov	r5, r1
 801abf0:	e73a      	b.n	801aa68 <atan+0xc8>
 801abf2:	4b35      	ldr	r3, [pc, #212]	@ (801acc8 <atan+0x328>)
 801abf4:	4e35      	ldr	r6, [pc, #212]	@ (801accc <atan+0x32c>)
 801abf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfe:	f7e5 fb6b 	bl	80002d8 <__aeabi_dsub>
 801ac02:	4622      	mov	r2, r4
 801ac04:	462b      	mov	r3, r5
 801ac06:	f7e5 fb67 	bl	80002d8 <__aeabi_dsub>
 801ac0a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801ac0e:	4602      	mov	r2, r0
 801ac10:	460b      	mov	r3, r1
 801ac12:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ac16:	f7e5 fb5f 	bl	80002d8 <__aeabi_dsub>
 801ac1a:	f1bb 0f00 	cmp.w	fp, #0
 801ac1e:	4604      	mov	r4, r0
 801ac20:	460d      	mov	r5, r1
 801ac22:	f6bf aedc 	bge.w	801a9de <atan+0x3e>
 801ac26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ac2a:	461d      	mov	r5, r3
 801ac2c:	e6d7      	b.n	801a9de <atan+0x3e>
 801ac2e:	a51c      	add	r5, pc, #112	@ (adr r5, 801aca0 <atan+0x300>)
 801ac30:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ac34:	e6d3      	b.n	801a9de <atan+0x3e>
 801ac36:	bf00      	nop
 801ac38:	54442d18 	.word	0x54442d18
 801ac3c:	3ff921fb 	.word	0x3ff921fb
 801ac40:	8800759c 	.word	0x8800759c
 801ac44:	7e37e43c 	.word	0x7e37e43c
 801ac48:	e322da11 	.word	0xe322da11
 801ac4c:	3f90ad3a 	.word	0x3f90ad3a
 801ac50:	24760deb 	.word	0x24760deb
 801ac54:	3fa97b4b 	.word	0x3fa97b4b
 801ac58:	a0d03d51 	.word	0xa0d03d51
 801ac5c:	3fb10d66 	.word	0x3fb10d66
 801ac60:	c54c206e 	.word	0xc54c206e
 801ac64:	3fb745cd 	.word	0x3fb745cd
 801ac68:	920083ff 	.word	0x920083ff
 801ac6c:	3fc24924 	.word	0x3fc24924
 801ac70:	5555550d 	.word	0x5555550d
 801ac74:	3fd55555 	.word	0x3fd55555
 801ac78:	2c6a6c2f 	.word	0x2c6a6c2f
 801ac7c:	bfa2b444 	.word	0xbfa2b444
 801ac80:	52defd9a 	.word	0x52defd9a
 801ac84:	3fadde2d 	.word	0x3fadde2d
 801ac88:	af749a6d 	.word	0xaf749a6d
 801ac8c:	3fb3b0f2 	.word	0x3fb3b0f2
 801ac90:	fe231671 	.word	0xfe231671
 801ac94:	3fbc71c6 	.word	0x3fbc71c6
 801ac98:	9998ebc4 	.word	0x9998ebc4
 801ac9c:	3fc99999 	.word	0x3fc99999
 801aca0:	54442d18 	.word	0x54442d18
 801aca4:	bff921fb 	.word	0xbff921fb
 801aca8:	440fffff 	.word	0x440fffff
 801acac:	7ff00000 	.word	0x7ff00000
 801acb0:	3fdbffff 	.word	0x3fdbffff
 801acb4:	3ff00000 	.word	0x3ff00000
 801acb8:	3ff2ffff 	.word	0x3ff2ffff
 801acbc:	40038000 	.word	0x40038000
 801acc0:	3ff80000 	.word	0x3ff80000
 801acc4:	bff00000 	.word	0xbff00000
 801acc8:	0801c978 	.word	0x0801c978
 801accc:	0801c998 	.word	0x0801c998

0801acd0 <fabs>:
 801acd0:	ec51 0b10 	vmov	r0, r1, d0
 801acd4:	4602      	mov	r2, r0
 801acd6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801acda:	ec43 2b10 	vmov	d0, r2, r3
 801acde:	4770      	bx	lr

0801ace0 <__ieee754_sqrtf>:
 801ace0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801ace4:	4770      	bx	lr
	...

0801ace8 <_init>:
 801ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acea:	bf00      	nop
 801acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acee:	bc08      	pop	{r3}
 801acf0:	469e      	mov	lr, r3
 801acf2:	4770      	bx	lr

0801acf4 <_fini>:
 801acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acf6:	bf00      	nop
 801acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acfa:	bc08      	pop	{r3}
 801acfc:	469e      	mov	lr, r3
 801acfe:	4770      	bx	lr
