
nereo_fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6c8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  0801a888  0801a888  0001b888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd40  0801bd40  0001d81c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd40  0801bd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd48  0801bd48  0001d81c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801bd48  0801bd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bd58  0801bd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000081c  20000000  0801bd5c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d81c  2**0
                  CONTENTS
 10 .bss          00014ed4  20000820  20000820  0001d820  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200156f4  200156f4  0001d820  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d81c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd8b  00000000  00000000  0001d84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000522a  00000000  00000000  0003d5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  00042808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b7  00000000  00000000  000440b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000303a4  00000000  00000000  0004536f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021527  00000000  00000000  00075713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011052d  00000000  00000000  00096c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000ef  00000000  00000000  001a7167  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007590  00000000  00000000  001a7258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  001ae7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000959  00000000  00000000  001ae859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  001af1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000820 	.word	0x20000820
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a870 	.word	0x0801a870

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000824 	.word	0x20000824
 80001fc:	0801a870 	.word	0x0801a870

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_ldivmod>:
 8000c1c:	b97b      	cbnz	r3, 8000c3e <__aeabi_ldivmod+0x22>
 8000c1e:	b972      	cbnz	r2, 8000c3e <__aeabi_ldivmod+0x22>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bfbe      	ittt	lt
 8000c24:	2000      	movlt	r0, #0
 8000c26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c2a:	e006      	blt.n	8000c3a <__aeabi_ldivmod+0x1e>
 8000c2c:	bf08      	it	eq
 8000c2e:	2800      	cmpeq	r0, #0
 8000c30:	bf1c      	itt	ne
 8000c32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c3a:	f000 b9b5 	b.w	8000fa8 <__aeabi_idiv0>
 8000c3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c46:	2900      	cmp	r1, #0
 8000c48:	db09      	blt.n	8000c5e <__aeabi_ldivmod+0x42>
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db1a      	blt.n	8000c84 <__aeabi_ldivmod+0x68>
 8000c4e:	f000 f84d 	bl	8000cec <__udivmoddi4>
 8000c52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5a:	b004      	add	sp, #16
 8000c5c:	4770      	bx	lr
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db1b      	blt.n	8000ca0 <__aeabi_ldivmod+0x84>
 8000c68:	f000 f840 	bl	8000cec <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	4770      	bx	lr
 8000c84:	4252      	negs	r2, r2
 8000c86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8a:	f000 f82f 	bl	8000cec <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4240      	negs	r0, r0
 8000c9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f821 	bl	8000cec <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_uldivmod>:
 8000cbc:	b953      	cbnz	r3, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cbe:	b94a      	cbnz	r2, 8000cd4 <__aeabi_uldivmod+0x18>
 8000cc0:	2900      	cmp	r1, #0
 8000cc2:	bf08      	it	eq
 8000cc4:	2800      	cmpeq	r0, #0
 8000cc6:	bf1c      	itt	ne
 8000cc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ccc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd0:	f000 b96a 	b.w	8000fa8 <__aeabi_idiv0>
 8000cd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cdc:	f000 f806 	bl	8000cec <__udivmoddi4>
 8000ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce8:	b004      	add	sp, #16
 8000cea:	4770      	bx	lr

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14e      	bne.n	8000d96 <__udivmoddi4+0xaa>
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	458c      	cmp	ip, r1
 8000cfc:	4686      	mov	lr, r0
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	d962      	bls.n	8000dca <__udivmoddi4+0xde>
 8000d04:	b14a      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	4091      	lsls	r1, r2
 8000d0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d14:	4319      	orrs	r1, r3
 8000d16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f f68c 	uxth.w	r6, ip
 8000d22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d32:	fb04 f106 	mul.w	r1, r4, r6
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x64>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d42:	f080 8112 	bcs.w	8000f6a <__udivmoddi4+0x27e>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 810f 	bls.w	8000f6a <__udivmoddi4+0x27e>
 8000d4c:	3c02      	subs	r4, #2
 8000d4e:	4463      	add	r3, ip
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	fa1f f38e 	uxth.w	r3, lr
 8000d56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f606 	mul.w	r6, r0, r6
 8000d66:	429e      	cmp	r6, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x94>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d72:	f080 80fc 	bcs.w	8000f6e <__udivmoddi4+0x282>
 8000d76:	429e      	cmp	r6, r3
 8000d78:	f240 80f9 	bls.w	8000f6e <__udivmoddi4+0x282>
 8000d7c:	4463      	add	r3, ip
 8000d7e:	3802      	subs	r0, #2
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d86:	2100      	movs	r1, #0
 8000d88:	b11d      	cbz	r5, 8000d92 <__udivmoddi4+0xa6>
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d905      	bls.n	8000da6 <__udivmoddi4+0xba>
 8000d9a:	b10d      	cbz	r5, 8000da0 <__udivmoddi4+0xb4>
 8000d9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000da0:	2100      	movs	r1, #0
 8000da2:	4608      	mov	r0, r1
 8000da4:	e7f5      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000da6:	fab3 f183 	clz	r1, r3
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d146      	bne.n	8000e3c <__udivmoddi4+0x150>
 8000dae:	42a3      	cmp	r3, r4
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xcc>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f0c0 80f0 	bcc.w	8000f98 <__udivmoddi4+0x2ac>
 8000db8:	1a86      	subs	r6, r0, r2
 8000dba:	eb64 0303 	sbc.w	r3, r4, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d0e6      	beq.n	8000d92 <__udivmoddi4+0xa6>
 8000dc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc8:	e7e3      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000dca:	2a00      	cmp	r2, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__udivmoddi4+0x204>
 8000dd0:	eba1 040c 	sub.w	r4, r1, ip
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dee:	fb07 f006 	mul.w	r0, r7, r6
 8000df2:	4298      	cmp	r0, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x11c>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0x11a>
 8000e00:	4298      	cmp	r0, r3
 8000e02:	f200 80cd 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e06:	4626      	mov	r6, r4
 8000e08:	1a1c      	subs	r4, r3, r0
 8000e0a:	fa1f f38e 	uxth.w	r3, lr
 8000e0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e12:	fb08 4410 	mls	r4, r8, r0, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb00 f707 	mul.w	r7, r0, r7
 8000e1e:	429f      	cmp	r7, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x148>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x146>
 8000e2c:	429f      	cmp	r7, r3
 8000e2e:	f200 80b0 	bhi.w	8000f92 <__udivmoddi4+0x2a6>
 8000e32:	4620      	mov	r0, r4
 8000e34:	1bdb      	subs	r3, r3, r7
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0x9c>
 8000e3c:	f1c1 0620 	rsb	r6, r1, #32
 8000e40:	408b      	lsls	r3, r1
 8000e42:	fa22 f706 	lsr.w	r7, r2, r6
 8000e46:	431f      	orrs	r7, r3
 8000e48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e50:	ea43 030c 	orr.w	r3, r3, ip
 8000e54:	40f4      	lsrs	r4, r6
 8000e56:	fa00 f801 	lsl.w	r8, r0, r1
 8000e5a:	0c38      	lsrs	r0, r7, #16
 8000e5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e60:	fbb4 fef0 	udiv	lr, r4, r0
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	fb00 441e 	mls	r4, r0, lr, r4
 8000e6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e70:	fb0e f90c 	mul.w	r9, lr, ip
 8000e74:	45a1      	cmp	r9, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	d90a      	bls.n	8000e92 <__udivmoddi4+0x1a6>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e82:	f080 8084 	bcs.w	8000f8e <__udivmoddi4+0x2a2>
 8000e86:	45a1      	cmp	r9, r4
 8000e88:	f240 8081 	bls.w	8000f8e <__udivmoddi4+0x2a2>
 8000e8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e90:	443c      	add	r4, r7
 8000e92:	eba4 0409 	sub.w	r4, r4, r9
 8000e96:	fa1f f983 	uxth.w	r9, r3
 8000e9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ea2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x1d2>
 8000eae:	193c      	adds	r4, r7, r4
 8000eb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb4:	d267      	bcs.n	8000f86 <__udivmoddi4+0x29a>
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d965      	bls.n	8000f86 <__udivmoddi4+0x29a>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ec2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec6:	eba4 040c 	sub.w	r4, r4, ip
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	46ce      	mov	lr, r9
 8000ece:	469c      	mov	ip, r3
 8000ed0:	d351      	bcc.n	8000f76 <__udivmoddi4+0x28a>
 8000ed2:	d04e      	beq.n	8000f72 <__udivmoddi4+0x286>
 8000ed4:	b155      	cbz	r5, 8000eec <__udivmoddi4+0x200>
 8000ed6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eda:	eb64 040c 	sbc.w	r4, r4, ip
 8000ede:	fa04 f606 	lsl.w	r6, r4, r6
 8000ee2:	40cb      	lsrs	r3, r1
 8000ee4:	431e      	orrs	r6, r3
 8000ee6:	40cc      	lsrs	r4, r1
 8000ee8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eec:	2100      	movs	r1, #0
 8000eee:	e750      	b.n	8000d92 <__udivmoddi4+0xa6>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa24 f303 	lsr.w	r3, r4, r3
 8000f00:	4094      	lsls	r4, r2
 8000f02:	430c      	orrs	r4, r1
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3110 	mls	r1, r8, r0, r3
 8000f18:	0c23      	lsrs	r3, r4, #16
 8000f1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1e:	fb00 f107 	mul.w	r1, r0, r7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x24c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2e:	d22c      	bcs.n	8000f8a <__udivmoddi4+0x29e>
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d92a      	bls.n	8000f8a <__udivmoddi4+0x29e>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f40:	fb08 3311 	mls	r3, r8, r1, r3
 8000f44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f48:	fb01 f307 	mul.w	r3, r1, r7
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x276>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f58:	d213      	bcs.n	8000f82 <__udivmoddi4+0x296>
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	d911      	bls.n	8000f82 <__udivmoddi4+0x296>
 8000f5e:	3902      	subs	r1, #2
 8000f60:	4464      	add	r4, ip
 8000f62:	1ae4      	subs	r4, r4, r3
 8000f64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f68:	e739      	b.n	8000dde <__udivmoddi4+0xf2>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	e6f0      	b.n	8000d50 <__udivmoddi4+0x64>
 8000f6e:	4608      	mov	r0, r1
 8000f70:	e706      	b.n	8000d80 <__udivmoddi4+0x94>
 8000f72:	45c8      	cmp	r8, r9
 8000f74:	d2ae      	bcs.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7a8      	b.n	8000ed4 <__udivmoddi4+0x1e8>
 8000f82:	4631      	mov	r1, r6
 8000f84:	e7ed      	b.n	8000f62 <__udivmoddi4+0x276>
 8000f86:	4603      	mov	r3, r0
 8000f88:	e799      	b.n	8000ebe <__udivmoddi4+0x1d2>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	e7d4      	b.n	8000f38 <__udivmoddi4+0x24c>
 8000f8e:	46d6      	mov	lr, sl
 8000f90:	e77f      	b.n	8000e92 <__udivmoddi4+0x1a6>
 8000f92:	4463      	add	r3, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e74d      	b.n	8000e34 <__udivmoddi4+0x148>
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e70f      	b.n	8000dc0 <__udivmoddi4+0xd4>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	e730      	b.n	8000e08 <__udivmoddi4+0x11c>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	@ 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fb8:	f006 fc22 	bl	8007800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fc4:	f000 f986 	bl	80012d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fc8:	4b58      	ldr	r3, [pc, #352]	@ (800112c <pvPortMallocMicroROS+0x180>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 8090 	bne.w	80010f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d01e      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fdc:	2208      	movs	r2, #8
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f023 0307 	bic.w	r3, r3, #7
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	e7fd      	b.n	8001016 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d06a      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
 8001020:	4b43      	ldr	r3, [pc, #268]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	d865      	bhi.n	80010f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800102a:	4b42      	ldr	r3, [pc, #264]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 800102c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <pvPortMallocMicroROS+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001034:	e004      	b.n	8001040 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d903      	bls.n	8001052 <pvPortMallocMicroROS+0xa6>
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f1      	bne.n	8001036 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001052:	4b35      	ldr	r3, [pc, #212]	@ (8001128 <pvPortMallocMicroROS+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001058:	429a      	cmp	r2, r3
 800105a:	d04c      	beq.n	80010f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2208      	movs	r2, #8
 8001062:	4413      	add	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	6a3b      	ldr	r3, [r7, #32]
 800106c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	2308      	movs	r3, #8
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	429a      	cmp	r2, r3
 800107c:	d920      	bls.n	80010c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800107e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001094:	f383 8811 	msr	BASEPRI, r3
 8001098:	f3bf 8f6f 	isb	sy
 800109c:	f3bf 8f4f 	dsb	sy
 80010a0:	613b      	str	r3, [r7, #16]
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010ba:	69b8      	ldr	r0, [r7, #24]
 80010bc:	f000 f96c 	bl	8001398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d203      	bcs.n	80010e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <pvPortMallocMicroROS+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a16      	ldr	r2, [pc, #88]	@ (8001138 <pvPortMallocMicroROS+0x18c>)
 80010e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <pvPortMallocMicroROS+0x180>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010f6:	f006 fb91 	bl	800781c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	60fb      	str	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800111c:	69fb      	ldr	r3, [r7, #28]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3728      	adds	r7, #40	@ 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20007d74 	.word	0x20007d74
 800112c:	20007d80 	.word	0x20007d80
 8001130:	20007d78 	.word	0x20007d78
 8001134:	20007d6c 	.word	0x20007d6c
 8001138:	20007d7c 	.word	0x20007d7c

0800113c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d04a      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800114e:	2308      	movs	r3, #8
 8001150:	425b      	negs	r3, r3
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10b      	bne.n	8001182 <vPortFreeMicroROS+0x46>
	__asm volatile
 800116a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116e:	f383 8811 	msr	BASEPRI, r3
 8001172:	f3bf 8f6f 	isb	sy
 8001176:	f3bf 8f4f 	dsb	sy
 800117a:	60fb      	str	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800118e:	f383 8811 	msr	BASEPRI, r3
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f3bf 8f4f 	dsb	sy
 800119a:	60bb      	str	r3, [r7, #8]
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d019      	beq.n	80011e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d115      	bne.n	80011e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <vPortFreeMicroROS+0xb0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011c8:	f006 fb1a 	bl	8007800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <vPortFreeMicroROS+0xb4>)
 80011d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011da:	6938      	ldr	r0, [r7, #16]
 80011dc:	f000 f8dc 	bl	8001398 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011e0:	f006 fb1c 	bl	800781c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20007d80 	.word	0x20007d80
 80011f0:	20007d78 	.word	0x20007d78

080011f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001200:	2308      	movs	r3, #8
 8001202:	425b      	negs	r3, r3
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	4413      	add	r3, r2
 8001208:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <getBlockSize+0x38>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	43db      	mvns	r3, r3
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

	return count;
 800121c:	68fb      	ldr	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20007d80 	.word	0x20007d80

08001230 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800123a:	f006 fae1 	bl	8007800 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff feb4 	bl	8000fac <pvPortMallocMicroROS>
 8001244:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d014      	beq.n	800127c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffce 	bl	80011f4 <getBlockSize>
 8001258:	4603      	mov	r3, r0
 800125a:	2208      	movs	r2, #8
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d201      	bcs.n	800126c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f018 fa24 	bl	80196be <memcpy>

		vPortFreeMicroROS(pv);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff60 	bl	800113c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800127c:	f006 face 	bl	800781c <xTaskResumeAll>

	return newmem;
 8001280:	68bb      	ldr	r3, [r7, #8]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001294:	f006 fab4 	bl	8007800 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff fe82 	bl	8000fac <pvPortMallocMicroROS>
 80012a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012ae:	e004      	b.n	80012ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	613a      	str	r2, [r7, #16]
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	1e5a      	subs	r2, r3, #1
 80012be:	617a      	str	r2, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f5      	bne.n	80012b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012c4:	f006 faaa 	bl	800781c <xTaskResumeAll>
  	return mem;
 80012c8:	68fb      	ldr	r3, [r7, #12]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012da:	f247 5330 	movw	r3, #30000	@ 0x7530
 80012de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012e0:	4b27      	ldr	r3, [pc, #156]	@ (8001380 <prvHeapInit+0xac>)
 80012e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00c      	beq.n	8001308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3307      	adds	r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 0307 	bic.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	4a1f      	ldr	r2, [pc, #124]	@ (8001380 <prvHeapInit+0xac>)
 8001304:	4413      	add	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <prvHeapInit+0xb0>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <prvHeapInit+0xb0>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001320:	2208      	movs	r2, #8
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 0307 	bic.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a15      	ldr	r2, [pc, #84]	@ (8001388 <prvHeapInit+0xb4>)
 8001334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <prvHeapInit+0xb4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <prvHeapInit+0xb4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	1ad2      	subs	r2, r2, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <prvHeapInit+0xb4>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <prvHeapInit+0xb8>)
 8001362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a09      	ldr	r2, [pc, #36]	@ (8001390 <prvHeapInit+0xbc>)
 800136a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <prvHeapInit+0xc0>)
 800136e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	2000083c 	.word	0x2000083c
 8001384:	20007d6c 	.word	0x20007d6c
 8001388:	20007d74 	.word	0x20007d74
 800138c:	20007d7c 	.word	0x20007d7c
 8001390:	20007d78 	.word	0x20007d78
 8001394:	20007d80 	.word	0x20007d80

08001398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <prvInsertBlockIntoFreeList+0xac>)
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e002      	b.n	80013ac <prvInsertBlockIntoFreeList+0x14>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8f7      	bhi.n	80013a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d108      	bne.n	80013da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	441a      	add	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d118      	bne.n	8001420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d00d      	beq.n	8001416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	441a      	add	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e008      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <prvInsertBlockIntoFreeList+0xb0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e003      	b.n	8001428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d002      	beq.n	8001436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20007d6c 	.word	0x20007d6c
 8001448:	20007d74 	.word	0x20007d74

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <MX_DMA_Init+0x4c>)
 800145c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <MX_DMA_Init+0x4c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2105      	movs	r1, #5
 8001472:	203a      	movs	r0, #58	@ 0x3a
 8001474:	f002 f85c 	bl	8003530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001478:	203a      	movs	r0, #58	@ 0x3a
 800147a:	f002 f875 	bl	8003568 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2105      	movs	r1, #5
 8001482:	2046      	movs	r0, #70	@ 0x46
 8001484:	f002 f854 	bl	8003530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001488:	2046      	movs	r0, #70	@ 0x46
 800148a:	f002 f86d 	bl	8003568 <HAL_NVIC_EnableIRQ>

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <cubemx_transport_open+0x28>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f003 fea0 	bl	80051f8 <HAL_UART_Receive_DMA>
    return true;
 80014b8:	2301      	movs	r3, #1
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20007d84 	.word	0x20007d84

080014c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f003 feb2 	bl	8005242 <HAL_UART_DMAStop>
    return true;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b20      	cmp	r3, #32
 8001508:	d11c      	bne.n	8001544 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	b29b      	uxth	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f003 fe00 	bl	8005118 <HAL_UART_Transmit_DMA>
 8001518:	4603      	mov	r3, r0
 800151a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800151c:	e002      	b.n	8001524 <cubemx_transport_write+0x3c>
            osDelay(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f005 f92c 	bl	800677c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001524:	7cfb      	ldrb	r3, [r7, #19]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <cubemx_transport_write+0x4e>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d1f3      	bne.n	800151e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001536:	7cfb      	ldrb	r3, [r7, #19]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <cubemx_transport_write+0x58>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e002      	b.n	8001546 <cubemx_transport_write+0x5e>
 8001540:	2300      	movs	r3, #0
 8001542:	e000      	b.n	8001546 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001544:	2300      	movs	r3, #0
    }
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001564:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156a:	b672      	cpsid	i
}
 800156c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <cubemx_transport_read+0x9c>)
 800157c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800157e:	b662      	cpsie	i
}
 8001580:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001588:	2001      	movs	r0, #1
 800158a:	f005 f8f7 	bl	800677c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <cubemx_transport_read+0xa0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <cubemx_transport_read+0x9c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d103      	bne.n	80015a2 <cubemx_transport_read+0x52>
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe3      	blt.n	800156a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015a6:	e011      	b.n	80015cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	440b      	add	r3, r1
 80015b2:	4910      	ldr	r1, [pc, #64]	@ (80015f4 <cubemx_transport_read+0xa4>)
 80015b4:	5c8a      	ldrb	r2, [r1, r2]
 80015b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	3301      	adds	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015cc:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <cubemx_transport_read+0xa0>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <cubemx_transport_read+0x9c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d003      	beq.n	80015e0 <cubemx_transport_read+0x90>
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3e3      	bcc.n	80015a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80015e0:	69bb      	ldr	r3, [r7, #24]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20008588 	.word	0x20008588
 80015f0:	20008584 	.word	0x20008584
 80015f4:	20007d84 	.word	0x20007d84

080015f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <MX_FREERTOS_Init+0x18>)
 80015fe:	2100      	movs	r1, #0
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_FREERTOS_Init+0x1c>)
 8001602:	f005 f829 	bl	8006658 <osThreadNew>
 8001606:	4603      	mov	r3, r0
 8001608:	4a03      	ldr	r2, [pc, #12]	@ (8001618 <MX_FREERTOS_Init+0x20>)
 800160a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	0801a9e0 	.word	0x0801a9e0
 8001614:	0800161d 	.word	0x0800161d
 8001618:	20008590 	.word	0x20008590

0800161c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 8001622:	af04      	add	r7, sp, #16
 8001624:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001628:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800162c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 800162e:	4bd2      	ldr	r3, [pc, #840]	@ (8001978 <StartDefaultTask+0x35c>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	4bd2      	ldr	r3, [pc, #840]	@ (800197c <StartDefaultTask+0x360>)
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4bd2      	ldr	r3, [pc, #840]	@ (8001980 <StartDefaultTask+0x364>)
 8001638:	4ad2      	ldr	r2, [pc, #840]	@ (8001984 <StartDefaultTask+0x368>)
 800163a:	49d3      	ldr	r1, [pc, #844]	@ (8001988 <StartDefaultTask+0x36c>)
 800163c:	2001      	movs	r0, #1
 800163e:	f009 ffd7 	bl	800b5f0 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001642:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001646:	4618      	mov	r0, r3
 8001648:	f009 ff04 	bl	800b454 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800164c:	4bcf      	ldr	r3, [pc, #828]	@ (800198c <StartDefaultTask+0x370>)
 800164e:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001652:	4bcf      	ldr	r3, [pc, #828]	@ (8001990 <StartDefaultTask+0x374>)
 8001654:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001658:	4bce      	ldr	r3, [pc, #824]	@ (8001994 <StartDefaultTask+0x378>)
 800165a:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800165e:	4bce      	ldr	r3, [pc, #824]	@ (8001998 <StartDefaultTask+0x37c>)
 8001660:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001664:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001668:	4618      	mov	r0, r3
 800166a:	f009 ff01 	bl	800b470 <rcutils_set_default_allocator>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 0301 	eor.w	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <StartDefaultTask+0x66>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 800167a:	21c9      	movs	r1, #201	@ 0xc9
 800167c:	48c7      	ldr	r0, [pc, #796]	@ (800199c <StartDefaultTask+0x380>)
 800167e:	f017 fee7 	bl	8019450 <iprintf>

	  // PARAM SERVER

	  rcl_ret_t rc;

	  allocator = rcl_get_default_allocator();
 8001682:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001686:	4618      	mov	r0, r3
 8001688:	f009 ff10 	bl	800b4ac <rcutils_get_default_allocator>
 800168c:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001690:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8001694:	f507 7454 	add.w	r4, r7, #848	@ 0x350
 8001698:	461d      	mov	r5, r3
 800169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rc = rclc_support_init(&support, 0, NULL, &allocator);
 80016a2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80016a6:	f507 7059 	add.w	r0, r7, #868	@ 0x364
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	f009 fddb 	bl	800b268 <rclc_support_init>
 80016b2:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016b6:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <StartDefaultTask+0xaa>
 80016be:	21ef      	movs	r1, #239	@ 0xef
 80016c0:	48b7      	ldr	r0, [pc, #732]	@ (80019a0 <StartDefaultTask+0x384>)
 80016c2:	f017 fec5 	bl	8019450 <iprintf>

	  // create node
	  rc = rclc_node_init_default(&node, "cubemx_node", "", &support);
 80016c6:	f507 7359 	add.w	r3, r7, #868	@ 0x364
 80016ca:	f507 7052 	add.w	r0, r7, #840	@ 0x348
 80016ce:	4ab5      	ldr	r2, [pc, #724]	@ (80019a4 <StartDefaultTask+0x388>)
 80016d0:	49b5      	ldr	r1, [pc, #724]	@ (80019a8 <StartDefaultTask+0x38c>)
 80016d2:	f009 fe13 	bl	800b2fc <rclc_node_init_default>
 80016d6:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80016da:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <StartDefaultTask+0xce>
 80016e2:	21f3      	movs	r1, #243	@ 0xf3
 80016e4:	48ae      	ldr	r0, [pc, #696]	@ (80019a0 <StartDefaultTask+0x384>)
 80016e6:	f017 feb3 	bl	8019450 <iprintf>

	  executor = rclc_executor_get_zero_initialized_executor();
 80016ea:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80016ee:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f009 fae3 	bl	800acc0 <rclc_executor_get_zero_initialized_executor>
 80016fa:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80016fe:	f5a3 7370 	sub.w	r3, r3, #960	@ 0x3c0
 8001702:	4620      	mov	r0, r4
 8001704:	4619      	mov	r1, r3
 8001706:	2388      	movs	r3, #136	@ 0x88
 8001708:	461a      	mov	r2, r3
 800170a:	f017 ffd8 	bl	80196be <memcpy>
	  rc = rclc_executor_init(&executor, &support.context, NUMBER_SUBS_TIMS, &allocator);
 800170e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001712:	f507 7159 	add.w	r1, r7, #868	@ 0x364
 8001716:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800171a:	2204      	movs	r2, #4
 800171c:	f009 fadc 	bl	800acd8 <rclc_executor_init>
 8001720:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 8001724:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <StartDefaultTask+0x118>
 800172c:	21f7      	movs	r1, #247	@ 0xf7
 800172e:	489c      	ldr	r0, [pc, #624]	@ (80019a0 <StartDefaultTask+0x384>)
 8001730:	f017 fe8e 	bl	8019450 <iprintf>

	  // PUBLISHERS
	  rclc_publisher_init_default(
 8001734:	f008 fe02 	bl	800a33c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>
 8001738:	4602      	mov	r2, r0
 800173a:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 800173e:	f507 702f 	add.w	r0, r7, #700	@ 0x2bc
 8001742:	4b9a      	ldr	r3, [pc, #616]	@ (80019ac <StartDefaultTask+0x390>)
 8001744:	f009 fe16 	bl	800b374 <rclc_publisher_init_default>
	    &thruster_status_publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(nereo_interfaces, msg, ThrusterStatuses),
	    "/thruster_status");
	  thruster_status_msg.thrusters_pwms[0] = 0;
 8001748:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800174c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001750:	2200      	movs	r2, #0
 8001752:	801a      	strh	r2, [r3, #0]

	  // SUBSCRIBERS
	  static micro_ros_utilities_memory_conf_t default_conf = {0};

	  // IMU sub
	  rc = rclc_subscription_init_default(
 8001754:	f00a fca6 	bl	800c0a4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001758:	4602      	mov	r2, r0
 800175a:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 800175e:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001762:	4b93      	ldr	r3, [pc, #588]	@ (80019b0 <StartDefaultTask+0x394>)
 8001764:	f009 fe3a 	bl	800b3dc <rclc_subscription_init_default>
 8001768:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &imu_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/imu_data");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800176c:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <StartDefaultTask+0x162>
 8001774:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001778:	4889      	ldr	r0, [pc, #548]	@ (80019a0 <StartDefaultTask+0x384>)
 800177a:	f017 fe69 	bl	8019450 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu), &imu_data_msg, default_conf);
 800177e:	f00a fc91 	bl	800c0a4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001782:	4684      	mov	ip, r0
 8001784:	4c8b      	ldr	r4, [pc, #556]	@ (80019b4 <StartDefaultTask+0x398>)
 8001786:	f507 7698 	add.w	r6, r7, #304	@ 0x130
 800178a:	466d      	mov	r5, sp
 800178c:	f104 0308 	add.w	r3, r4, #8
 8001790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001792:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001796:	e894 000c 	ldmia.w	r4, {r2, r3}
 800179a:	4631      	mov	r1, r6
 800179c:	4660      	mov	r0, ip
 800179e:	f008 fc9b 	bl	800a0d8 <micro_ros_utilities_create_message_memory>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

	  rc = rclc_executor_add_subscription(
 80017ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80017b2:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80017b6:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4b7e      	ldr	r3, [pc, #504]	@ (80019b8 <StartDefaultTask+0x39c>)
 80017c0:	f009 fafa 	bl	800adb8 <rclc_executor_add_subscription>
 80017c4:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &imu_subscriber,
			  &imu_data_msg, &imu_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017c8:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <StartDefaultTask+0x1be>
 80017d0:	f240 1111 	movw	r1, #273	@ 0x111
 80017d4:	4872      	ldr	r0, [pc, #456]	@ (80019a0 <StartDefaultTask+0x384>)
 80017d6:	f017 fe3b 	bl	8019450 <iprintf>

	  // JOY sub
	  rc = rclc_subscription_init_default(
 80017da:	f00a fc7b 	bl	800c0d4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>
 80017de:	4602      	mov	r2, r0
 80017e0:	f507 7152 	add.w	r1, r7, #840	@ 0x348
 80017e4:	f507 702a 	add.w	r0, r7, #680	@ 0x2a8
 80017e8:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <StartDefaultTask+0x3a0>)
 80017ea:	f009 fdf7 	bl	800b3dc <rclc_subscription_init_default>
 80017ee:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &joystick_subscriber,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Joy),
			  "/joy");
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 80017f2:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d004      	beq.n	8001804 <StartDefaultTask+0x1e8>
 80017fa:	f240 1119 	movw	r1, #281	@ 0x119
 80017fe:	4868      	ldr	r0, [pc, #416]	@ (80019a0 <StartDefaultTask+0x384>)
 8001800:	f017 fe26 	bl	8019450 <iprintf>
	  // initialize message memory
	  rc = !micro_ros_utilities_create_message_memory(ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Joy), &joystick_input_msg, default_conf);
 8001804:	f00a fc66 	bl	800c0d4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>
 8001808:	4684      	mov	ip, r0
 800180a:	4c6a      	ldr	r4, [pc, #424]	@ (80019b4 <StartDefaultTask+0x398>)
 800180c:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 8001810:	466d      	mov	r5, sp
 8001812:	f104 0308 	add.w	r3, r4, #8
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800181c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001820:	4631      	mov	r1, r6
 8001822:	4660      	mov	r0, ip
 8001824:	f008 fc58 	bl	800a0d8 <micro_ros_utilities_create_message_memory>
 8001828:	4603      	mov	r3, r0
 800182a:	f083 0301 	eor.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8

	  rc = rclc_executor_add_subscription(
 8001834:	f507 721c 	add.w	r2, r7, #624	@ 0x270
 8001838:	f507 712a 	add.w	r1, r7, #680	@ 0x2a8
 800183c:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 8001840:	2300      	movs	r3, #0
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4b5e      	ldr	r3, [pc, #376]	@ (80019c0 <StartDefaultTask+0x3a4>)
 8001846:	f009 fab7 	bl	800adb8 <rclc_executor_add_subscription>
 800184a:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
			  &executor, &joystick_subscriber,
			  &joystick_input_msg, &joystick_subscription_callback, ON_NEW_DATA);
	  if (rc != RCL_RET_OK) printf("Error (line %d)\n", __LINE__);
 800184e:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <StartDefaultTask+0x244>
 8001856:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800185a:	4851      	ldr	r0, [pc, #324]	@ (80019a0 <StartDefaultTask+0x384>)
 800185c:	f017 fdf8 	bl	8019450 <iprintf>

	  uint32_t pwm_output[8] = {1500};
 8001860:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001864:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8001868:	4618      	mov	r0, r3
 800186a:	2320      	movs	r3, #32
 800186c:	461a      	mov	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	f017 febd 	bl	80195ee <memset>
 8001874:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001878:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800187c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001880:	601a      	str	r2, [r3, #0]
	  arm_status pwm_computation_error = ARM_MATH_SUCCESS;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	  float joy_input[6] = {0};
 8001888:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800188c:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001890:	461a      	mov	r2, r3
 8001892:	2300      	movs	r3, #0
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	6053      	str	r3, [r2, #4]
 8001898:	6093      	str	r3, [r2, #8]
 800189a:	60d3      	str	r3, [r2, #12]
 800189c:	6113      	str	r3, [r2, #16]
 800189e:	6153      	str	r3, [r2, #20]

	  while(1)
	  {
		uint32_t time_ms = HAL_GetTick();
 80018a0:	f001 fd82 	bl	80033a8 <HAL_GetTick>
 80018a4:	f8c7 03b0 	str.w	r0, [r7, #944]	@ 0x3b0
		printf("Free heap: %d.\n", xPortGetFreeHeapSize());
 80018a8:	f007 fb7a 	bl	8008fa0 <xPortGetFreeHeapSize>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4619      	mov	r1, r3
 80018b0:	4844      	ldr	r0, [pc, #272]	@ (80019c4 <StartDefaultTask+0x3a8>)
 80018b2:	f017 fdcd 	bl	8019450 <iprintf>
		// Spin executor once to receive requests and update messages
		rclc_executor_spin_some(&executor, 1000000);
 80018b6:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 80018ba:	4a43      	ldr	r2, [pc, #268]	@ (80019c8 <StartDefaultTask+0x3ac>)
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	4608      	mov	r0, r1
 80018c2:	f009 fc99 	bl	800b1f8 <rclc_executor_spin_some>

	    if (rov_arm_mode == ROV_ARMED)
 80018c6:	4b41      	ldr	r3, [pc, #260]	@ (80019cc <StartDefaultTask+0x3b0>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	f040 8081 	bne.w	80019d4 <StartDefaultTask+0x3b8>
	    {
	    	joystick_msg_to_cmd_vel_array(&joystick_input_msg, joy_input);
 80018d2:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80018d6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f958 	bl	8001b92 <joystick_msg_to_cmd_vel_array>
	    	switch (navigation_mode) {
 80018e2:	4b3b      	ldr	r3, [pc, #236]	@ (80019d0 <StartDefaultTask+0x3b4>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <StartDefaultTask+0x2d6>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d00c      	beq.n	800190a <StartDefaultTask+0x2ee>
 80018f0:	e01e      	b.n	8001930 <StartDefaultTask+0x314>
	    		case NAVIGATION_MODE_MANUAL:
	    			pwm_computation_error = calculate_pwm(joy_input, pwm_output);
 80018f2:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 80018f6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 ff49 	bl	8002794 <calculate_pwm>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	    			break;
 8001908:	e02a      	b.n	8001960 <StartDefaultTask+0x344>
	    		case NAVIGATION_MODE_STABILIZE_FULL:
	    			pwm_computation_error = calculate_pwm_with_pid(joy_input, pwm_output,
 800190a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800190e:	f103 0418 	add.w	r4, r3, #24
 8001912:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001916:	f103 0218 	add.w	r2, r3, #24
 800191a:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 800191e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001922:	4623      	mov	r3, r4
 8001924:	f001 fa7c 	bl	8002e20 <calculate_pwm_with_pid>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7
	    					(Quaternion *)&imu_data_msg.orientation,
							(float *)&fluid_pressure.fluid_pressure);
	    			break;
 800192e:	e017      	b.n	8001960 <StartDefaultTask+0x344>
	    		default:
	    			for(uint8_t i = 0; i < 8; i++) pwm_output[i] = 1500;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
 8001936:	e00e      	b.n	8001956 <StartDefaultTask+0x33a>
 8001938:	f897 23bf 	ldrb.w	r2, [r7, #959]	@ 0x3bf
 800193c:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001940:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8001944:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800194c:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 8001950:	3301      	adds	r3, #1
 8001952:	f887 33bf 	strb.w	r3, [r7, #959]	@ 0x3bf
 8001956:	f897 33bf 	ldrb.w	r3, [r7, #959]	@ 0x3bf
 800195a:	2b07      	cmp	r3, #7
 800195c:	d9ec      	bls.n	8001938 <StartDefaultTask+0x31c>
	    			break;
 800195e:	bf00      	nop
	    	}
	    	constrain_pwm_output(pwm_output, 8);
 8001960:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001964:	2108      	movs	r1, #8
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f8dc 	bl	8001b24 <constrain_pwm_output>
	    	set_pwms(pwm_output);
 800196c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f879 	bl	8001a68 <set_pwms>
 8001976:	e02f      	b.n	80019d8 <StartDefaultTask+0x3bc>
 8001978:	08001551 	.word	0x08001551
 800197c:	080014e9 	.word	0x080014e9
 8001980:	080014c9 	.word	0x080014c9
 8001984:	0800149d 	.word	0x0800149d
 8001988:	20008604 	.word	0x20008604
 800198c:	08001f89 	.word	0x08001f89
 8001990:	08001fcd 	.word	0x08001fcd
 8001994:	08002005 	.word	0x08002005
 8001998:	08002071 	.word	0x08002071
 800199c:	0801a894 	.word	0x0801a894
 80019a0:	0801a8bc 	.word	0x0801a8bc
 80019a4:	0801a8d0 	.word	0x0801a8d0
 80019a8:	0801a8d4 	.word	0x0801a8d4
 80019ac:	0801a8e0 	.word	0x0801a8e0
 80019b0:	0801a8f4 	.word	0x0801a8f4
 80019b4:	20008594 	.word	0x20008594
 80019b8:	08001bd7 	.word	0x08001bd7
 80019bc:	0801a900 	.word	0x0801a900
 80019c0:	08001bef 	.word	0x08001bef
 80019c4:	0801a908 	.word	0x0801a908
 80019c8:	000f4240 	.word	0x000f4240
 80019cc:	2000858c 	.word	0x2000858c
 80019d0:	2000858d 	.word	0x2000858d
	    } else set_pwm_idle();
 80019d4:	f000 f878 	bl	8001ac8 <set_pwm_idle>

	    for(uint8_t i = 0; i < 8; i++) thruster_status_msg.thrusters_pwms[i] = pwm_output[i];
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
 80019de:	e015      	b.n	8001a0c <StartDefaultTask+0x3f0>
 80019e0:	f897 23be 	ldrb.w	r2, [r7, #958]	@ 0x3be
 80019e4:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80019e8:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	f897 23be 	ldrb.w	r2, [r7, #958]	@ 0x3be
 80019f4:	b299      	uxth	r1, r3
 80019f6:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 80019fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80019fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a02:	f897 33be 	ldrb.w	r3, [r7, #958]	@ 0x3be
 8001a06:	3301      	adds	r3, #1
 8001a08:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
 8001a0c:	f897 33be 	ldrb.w	r3, [r7, #958]	@ 0x3be
 8001a10:	2b07      	cmp	r3, #7
 8001a12:	d9e5      	bls.n	80019e0 <StartDefaultTask+0x3c4>
	    rc = rcl_publish(&thruster_status_publisher, &thruster_status_msg, NULL);
 8001a14:	f507 712b 	add.w	r1, r7, #684	@ 0x2ac
 8001a18:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f008 fdc0 	bl	800a5a4 <rcl_publish>
 8001a24:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
	    if(rc!=RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 8001a28:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <StartDefaultTask+0x41e>
 8001a30:	f240 1143 	movw	r1, #323	@ 0x143
 8001a34:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <StartDefaultTask+0x448>)
 8001a36:	f017 fd0b 	bl	8019450 <iprintf>

	    uint32_t elapsed_time = HAL_GetTick() - time_ms;
 8001a3a:	f001 fcb5 	bl	80033a8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
	    if (elapsed_time < TS_DEFAULT_TASK_MS) osDelay(TS_DEFAULT_TASK_MS - elapsed_time);
 8001a4a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	f63f af26 	bhi.w	80018a0 <StartDefaultTask+0x284>
 8001a54:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001a58:	f1c3 030a 	rsb	r3, r3, #10
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 fe8d 	bl	800677c <osDelay>
	  {
 8001a62:	e71d      	b.n	80018a0 <StartDefaultTask+0x284>
 8001a64:	0801a918 	.word	0x0801a918

08001a68 <set_pwms>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void inline set_pwms(uint32_t pwms[8])
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	TIM2 -> CCR1 = pwms[0];
 8001a70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2 -> CCR2 = pwms[1];
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM2 -> CCR3 = pwms[2];
 8001a84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM2 -> CCR4 = pwms[3];
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	6413      	str	r3, [r2, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = pwms[4];
 8001a98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <set_pwms+0x5c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3 -> CCR2 = pwms[5];
 8001aa0:	4a08      	ldr	r2, [pc, #32]	@ (8001ac4 <set_pwms+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3 -> CCR3 = pwms[6];
 8001aa8:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <set_pwms+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3 -> CCR4 = pwms[7];
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <set_pwms+0x5c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40000400 	.word	0x40000400

08001ac8 <set_pwm_idle>:
void inline set_pwm_idle()
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	TIM2 -> CCR1 = PWM_IDLE;
 8001acc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ad0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ad4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> CCR2 = PWM_IDLE;
 8001ad6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ada:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ade:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2 -> CCR3 = PWM_IDLE;
 8001ae0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ae4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2 -> CCR4 = PWM_IDLE;
 8001aea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001aee:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40

	// vertical thrusters
	TIM3 -> CCR1 = PWM_IDLE;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <set_pwm_idle+0x58>)
 8001af6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001afa:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3 -> CCR2 = PWM_IDLE;
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <set_pwm_idle+0x58>)
 8001afe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b02:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3 -> CCR3 = PWM_IDLE;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <set_pwm_idle+0x58>)
 8001b06:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3 -> CCR4 = PWM_IDLE;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <set_pwm_idle+0x58>)
 8001b0e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001b12:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40000400 	.word	0x40000400

08001b24 <constrain_pwm_output>:
void constrain_pwm_output(uint32_t pwms[], int N) {
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	81fb      	strh	r3, [r7, #14]
 8001b32:	e023      	b.n	8001b7c <constrain_pwm_output+0x58>
		if (pwms[i] < PWM_MIN)
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d807      	bhi.n	8001b56 <constrain_pwm_output+0x32>
			pwms[i] = PWM_MIN;
 8001b46:	89fb      	ldrh	r3, [r7, #14]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f240 424c 	movw	r2, #1100	@ 0x44c
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e00f      	b.n	8001b76 <constrain_pwm_output+0x52>
		else if (pwms[i] > PWM_MAX)
 8001b56:	89fb      	ldrh	r3, [r7, #14]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d906      	bls.n	8001b76 <constrain_pwm_output+0x52>
			pwms[i] = PWM_MAX;
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f240 726c 	movw	r2, #1900	@ 0x76c
 8001b74:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < N; i++) {
 8001b76:	89fb      	ldrh	r3, [r7, #14]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	81fb      	strh	r3, [r7, #14]
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dcd7      	bgt.n	8001b34 <constrain_pwm_output+0x10>
	}
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <joystick_msg_to_cmd_vel_array>:
void joystick_msg_to_cmd_vel_array(const sensor_msgs__msg__Joy * joystick_input_msg, float joy_input_array[6]) {
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	joy_input_array[0] = joystick_input_msg->axes.data[0]; // sway
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
	joy_input_array[1] =joystick_input_msg->axes.data[1]; // forward
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3304      	adds	r3, #4
 8001bae:	6852      	ldr	r2, [r2, #4]
 8001bb0:	601a      	str	r2, [r3, #0]
	joy_input_array[2] =joystick_input_msg->axes.data[3]; // heave
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3308      	adds	r3, #8
 8001bba:	68d2      	ldr	r2, [r2, #12]
 8001bbc:	601a      	str	r2, [r3, #0]
	joy_input_array[6] =joystick_input_msg->axes.data[2]; // yaw
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	3318      	adds	r3, #24
 8001bc6:	6892      	ldr	r2, [r2, #8]
 8001bc8:	601a      	str	r2, [r3, #0]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <imu_subscription_callback>:
void imu_subscription_callback(const void * msgin) {
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  const sensor_msgs__msg__Imu * msg = (const sensor_msgs__msg__Imu *)msgin;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <joystick_subscription_callback>:
void joystick_subscription_callback (const void * msgin) {
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	const sensor_msgs__msg__Joy * msg = (const sensor_msgs__msg__Joy *)msgin;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a25      	ldr	r2, [pc, #148]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c28:	f043 0310 	orr.w	r3, r3, #16
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a1e      	ldr	r2, [pc, #120]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a10      	ldr	r2, [pc, #64]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_GPIO_Init+0xb4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2104      	movs	r1, #4
 8001c92:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <MX_GPIO_Init+0xb8>)
 8001c94:	f002 fa24 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	4804      	ldr	r0, [pc, #16]	@ (8001cc0 <MX_GPIO_Init+0xb8>)
 8001cb0:	f002 f86a 	bl	8003d88 <HAL_GPIO_Init>

}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	@ 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <linear_interpolation>:
 * @param output_min The minimum value of the output range.
 * @param output_max The maximum value of the output range.
 * @return The interpolated output value.
 */
float linear_interpolation(float input_value, float input_min, float input_max, float output_min, float output_max)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cce:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cd2:	ed87 1a03 	vstr	s2, [r7, #12]
 8001cd6:	edc7 1a02 	vstr	s3, [r7, #8]
 8001cda:	ed87 2a01 	vstr	s4, [r7, #4]
    return ((output_max - output_min) / (input_max - input_min)) * (input_value - input_min) + output_min;
 8001cde:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ce2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cea:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cfa:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <normalize_vector>:
 * @param input_array The input array of floating-point values to be normalized.
 * @param output_array The output array where the normalized values will be stored.
 * @param size The number of elements in the input and output arrays.
 */
void normalize_vector(const float *input_array, float *output_array, uint8_t size)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71fb      	strb	r3, [r7, #7]
    float max_abs_value = 0.0f;
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	76fb      	strb	r3, [r7, #27]
 8001d38:	e017      	b.n	8001d6a <normalize_vector+0x4a>
    {
        float abs_value = fabsf(input_array[i]);
 8001d3a:	7efb      	ldrb	r3, [r7, #27]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4413      	add	r3, r2
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	eef0 7ae7 	vabs.f32	s15, s15
 8001d4a:	edc7 7a05 	vstr	s15, [r7, #20]
        if (abs_value > max_abs_value)
 8001d4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5e:	dd01      	ble.n	8001d64 <normalize_vector+0x44>
        {
            max_abs_value = abs_value;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < size; i++)
 8001d64:	7efb      	ldrb	r3, [r7, #27]
 8001d66:	3301      	adds	r3, #1
 8001d68:	76fb      	strb	r3, [r7, #27]
 8001d6a:	7efa      	ldrb	r2, [r7, #27]
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d3e3      	bcc.n	8001d3a <normalize_vector+0x1a>
        }
    }

	if (max_abs_value > 1)
 8001d72:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	dc00      	bgt.n	8001d86 <normalize_vector+0x66>
		for (uint8_t i = 0; i < size; i++)
		{
			output_array[i] = input_array[i] / max_abs_value;
		}
	}
}
 8001d84:	e019      	b.n	8001dba <normalize_vector+0x9a>
		for (uint8_t i = 0; i < size; i++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	76bb      	strb	r3, [r7, #26]
 8001d8a:	e012      	b.n	8001db2 <normalize_vector+0x92>
			output_array[i] = input_array[i] / max_abs_value;
 8001d8c:	7ebb      	ldrb	r3, [r7, #26]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	edd3 6a00 	vldr	s13, [r3]
 8001d98:	7ebb      	ldrb	r3, [r7, #26]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da8:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < size; i++)
 8001dac:	7ebb      	ldrb	r3, [r7, #26]
 8001dae:	3301      	adds	r3, #1
 8001db0:	76bb      	strb	r3, [r7, #26]
 8001db2:	7eba      	ldrb	r2, [r7, #26]
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3e8      	bcc.n	8001d8c <normalize_vector+0x6c>
}
 8001dba:	bf00      	nop
 8001dbc:	3724      	adds	r7, #36	@ 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dce:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001dd2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d013      	beq.n	8001e06 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001dde:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001de2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001de6:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001dee:	e000      	b.n	8001df2 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001df0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001df2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f9      	beq.n	8001df0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001dfc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e06:	687b      	ldr	r3, [r7, #4]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e18:	f001 fa90 	bl	800333c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e1c:	f000 f80e 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e20:	f7ff fef2 	bl	8001c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e24:	f7ff fb12 	bl	800144c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e28:	f000 fbd2 	bl	80025d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e2c:	f004 fbca 	bl	80065c4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001e30:	f7ff fbe2 	bl	80015f8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e34:	f004 fbea 	bl	800660c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <main+0x24>

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b094      	sub	sp, #80	@ 0x50
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	2234      	movs	r2, #52	@ 0x34
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f017 fbcf 	bl	80195ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <SystemClock_Config+0xdc>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	4a2b      	ldr	r2, [pc, #172]	@ (8001f18 <SystemClock_Config+0xdc>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <SystemClock_Config+0xdc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <SystemClock_Config+0xe0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a25      	ldr	r2, [pc, #148]	@ (8001f1c <SystemClock_Config+0xe0>)
 8001e86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b23      	ldr	r3, [pc, #140]	@ (8001f1c <SystemClock_Config+0xe0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ea0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eac:	2308      	movs	r3, #8
 8001eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001eb0:	23c3      	movs	r3, #195	@ 0xc3
 8001eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fbb1 	bl	800462c <HAL_RCC_OscConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ed0:	f000 f854 	bl	8001f7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ed4:	f002 f91e 	bl	8004114 <HAL_PWREx_EnableOverDrive>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ede:	f000 f84d 	bl	8001f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee2:	230f      	movs	r3, #15
 8001ee4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	2105      	movs	r1, #5
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 f957 	bl	80041b4 <HAL_RCC_ClockConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f0c:	f000 f836 	bl	8001f7c <Error_Handler>
  }
}
 8001f10:	bf00      	nop
 8001f12:	3750      	adds	r7, #80	@ 0x50
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000

08001f20 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e009      	b.n	8001f46 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	60ba      	str	r2, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff43 	bl	8001dc6 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dbf1      	blt.n	8001f32 <_write+0x12>
  }
  return len;
 8001f4e:	687b      	ldr	r3, [r7, #4]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f6a:	f001 fa09 	bl	8003380 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <Error_Handler+0x8>

08001f88 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <microros_allocate+0x3c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <microros_allocate+0x3c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	@ (8001fc8 <microros_allocate+0x40>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <microros_allocate+0x40>)
 8001fb0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fffa 	bl	8000fac <pvPortMallocMicroROS>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200085ac 	.word	0x200085ac
 8001fc8:	200085b0 	.word	0x200085b0

08001fcc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00c      	beq.n	8001ff6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff f909 	bl	80011f4 <getBlockSize>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <microros_deallocate+0x34>)
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <microros_deallocate+0x34>)
 8001fee:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff f8a3 	bl	800113c <vPortFreeMicroROS>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200085b0 	.word	0x200085b0

08002004 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <microros_reallocate+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	461a      	mov	r2, r3
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <microros_reallocate+0x64>)
 800201e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <microros_reallocate+0x68>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4413      	add	r3, r2
 800202a:	461a      	mov	r2, r3
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <microros_reallocate+0x68>)
 800202e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d104      	bne.n	8002040 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002036:	68b8      	ldr	r0, [r7, #8]
 8002038:	f7fe ffb8 	bl	8000fac <pvPortMallocMicroROS>
 800203c:	4603      	mov	r3, r0
 800203e:	e00e      	b.n	800205e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7ff f8d7 	bl	80011f4 <getBlockSize>
 8002046:	4603      	mov	r3, r0
 8002048:	4a08      	ldr	r2, [pc, #32]	@ (800206c <microros_reallocate+0x68>)
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	461a      	mov	r2, r3
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <microros_reallocate+0x68>)
 8002052:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f7ff f8ea 	bl	8001230 <pvPortReallocMicroROS>
 800205c:	4603      	mov	r3, r0
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200085ac 	.word	0x200085ac
 800206c:	200085b0 	.word	0x200085b0

08002070 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <microros_zero_allocate+0x48>)
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	4413      	add	r3, r2
 800208a:	461a      	mov	r2, r3
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <microros_zero_allocate+0x48>)
 800208e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	4a08      	ldr	r2, [pc, #32]	@ (80020bc <microros_zero_allocate+0x4c>)
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4413      	add	r3, r2
 800209e:	461a      	mov	r2, r3
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <microros_zero_allocate+0x4c>)
 80020a2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff f8ef 	bl	800128a <pvPortCallocMicroROS>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200085ac 	.word	0x200085ac
 80020bc:	200085b0 	.word	0x200085b0

080020c0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80020c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80020d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020d6:	a320      	add	r3, pc, #128	@ (adr r3, 8002158 <UTILS_NanosecondsToTimespec+0x98>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe fd9e 	bl	8000c1c <__aeabi_ldivmod>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80020ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8002158 <UTILS_NanosecondsToTimespec+0x98>)
 80020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f4:	f7fe fd92 	bl	8000c1c <__aeabi_ldivmod>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	da20      	bge.n	8002146 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <UTILS_NanosecondsToTimespec+0x90>)
 800210a:	fb82 1203 	smull	r1, r2, r2, r3
 800210e:	1712      	asrs	r2, r2, #28
 8002110:	17db      	asrs	r3, r3, #31
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	6979      	ldr	r1, [r7, #20]
 8002120:	17c8      	asrs	r0, r1, #31
 8002122:	460c      	mov	r4, r1
 8002124:	4605      	mov	r5, r0
 8002126:	ebb2 0804 	subs.w	r8, r2, r4
 800212a:	eb63 0905 	sbc.w	r9, r3, r5
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4906      	ldr	r1, [pc, #24]	@ (8002154 <UTILS_NanosecondsToTimespec+0x94>)
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	441a      	add	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]
    }
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002150:	44b82fa1 	.word	0x44b82fa1
 8002154:	3b9aca00 	.word	0x3b9aca00
 8002158:	3b9aca00 	.word	0x3b9aca00
 800215c:	00000000 	.word	0x00000000

08002160 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002164:	b08e      	sub	sp, #56	@ 0x38
 8002166:	af00      	add	r7, sp, #0
 8002168:	6278      	str	r0, [r7, #36]	@ 0x24
 800216a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800216c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002170:	2300      	movs	r3, #0
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002186:	4618      	mov	r0, r3
 8002188:	f005 fdc4 	bl	8007d14 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218e:	17da      	asrs	r2, r3, #31
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	61fa      	str	r2, [r7, #28]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	69b9      	ldr	r1, [r7, #24]
 800219e:	000b      	movs	r3, r1
 80021a0:	2200      	movs	r2, #0
 80021a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80021a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a8:	2200      	movs	r2, #0
 80021aa:	461c      	mov	r4, r3
 80021ac:	4615      	mov	r5, r2
 80021ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021b2:	1911      	adds	r1, r2, r4
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	416b      	adcs	r3, r5
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80021be:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80021c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	f04f 0400 	mov.w	r4, #0
 80021ce:	f04f 0500 	mov.w	r5, #0
 80021d2:	015d      	lsls	r5, r3, #5
 80021d4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80021d8:	0154      	lsls	r4, r2, #5
 80021da:	4622      	mov	r2, r4
 80021dc:	462b      	mov	r3, r5
 80021de:	ebb2 0800 	subs.w	r8, r2, r0
 80021e2:	eb63 0901 	sbc.w	r9, r3, r1
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80021f2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80021f6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80021fa:	4690      	mov	r8, r2
 80021fc:	4699      	mov	r9, r3
 80021fe:	eb18 0a00 	adds.w	sl, r8, r0
 8002202:	eb49 0b01 	adc.w	fp, r9, r1
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002212:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002216:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800221a:	ebb2 040a 	subs.w	r4, r2, sl
 800221e:	603c      	str	r4, [r7, #0]
 8002220:	eb63 030b 	sbc.w	r3, r3, fp
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800222a:	4623      	mov	r3, r4
 800222c:	181b      	adds	r3, r3, r0
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	462b      	mov	r3, r5
 8002232:	eb41 0303 	adc.w	r3, r1, r3
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800223e:	f7ff ff3f 	bl	80020c0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002242:	2300      	movs	r3, #0
 8002244:	4618      	mov	r0, r3
 8002246:	3738      	adds	r7, #56	@ 0x38
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_MspInit+0x54>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <HAL_MspInit+0x54>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_MspInit+0x54>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_MspInit+0x54>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <HAL_MspInit+0x54>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_MspInit+0x54>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	210f      	movs	r1, #15
 8002292:	f06f 0001 	mvn.w	r0, #1
 8002296:	f001 f94b 	bl	8003530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_InitTick+0xd4>)
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	4a2e      	ldr	r2, [pc, #184]	@ (800237c <HAL_InitTick+0xd4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c8:	4b2c      	ldr	r3, [pc, #176]	@ (800237c <HAL_InitTick+0xd4>)
 80022ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022d4:	f107 020c 	add.w	r2, r7, #12
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 f972 	bl	80045c8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80022e4:	f002 f95c 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 80022e8:	4603      	mov	r3, r0
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	4a23      	ldr	r2, [pc, #140]	@ (8002380 <HAL_InitTick+0xd8>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0c9b      	lsrs	r3, r3, #18
 80022f8:	3b01      	subs	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022fc:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <HAL_InitTick+0xdc>)
 80022fe:	4a22      	ldr	r2, [pc, #136]	@ (8002388 <HAL_InitTick+0xe0>)
 8002300:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002302:	4b20      	ldr	r3, [pc, #128]	@ (8002384 <HAL_InitTick+0xdc>)
 8002304:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002308:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800230a:	4a1e      	ldr	r2, [pc, #120]	@ (8002384 <HAL_InitTick+0xdc>)
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002310:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <HAL_InitTick+0xdc>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002316:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_InitTick+0xdc>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_InitTick+0xdc>)
 800231e:	2200      	movs	r2, #0
 8002320:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002322:	4818      	ldr	r0, [pc, #96]	@ (8002384 <HAL_InitTick+0xdc>)
 8002324:	f002 fc06 	bl	8004b34 <HAL_TIM_Base_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800232e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11b      	bne.n	800236e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002336:	4813      	ldr	r0, [pc, #76]	@ (8002384 <HAL_InitTick+0xdc>)
 8002338:	f002 fc56 	bl	8004be8 <HAL_TIM_Base_Start_IT>
 800233c:	4603      	mov	r3, r0
 800233e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002346:	2b00      	cmp	r3, #0
 8002348:	d111      	bne.n	800236e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800234a:	2019      	movs	r0, #25
 800234c:	f001 f90c 	bl	8003568 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	d808      	bhi.n	8002368 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002356:	2200      	movs	r2, #0
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	2019      	movs	r0, #25
 800235c:	f001 f8e8 	bl	8003530 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_InitTick+0xe4>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e002      	b.n	800236e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800236e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002372:	4618      	mov	r0, r3
 8002374:	3730      	adds	r7, #48	@ 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	431bde83 	.word	0x431bde83
 8002384:	200085b4 	.word	0x200085b4
 8002388:	40010000 	.word	0x40010000
 800238c:	200000c8 	.word	0x200000c8

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <NMI_Handler+0x4>

08002398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  printf("HardFault detected\n");
 800239e:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <HardFault_Handler+0x38>)
 80023a0:	f017 f8be 	bl	8019520 <puts>
  uint32_t bus_fault_address = SCB->BFAR;    // Bus fault address register
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HardFault_Handler+0x3c>)
 80023a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a8:	607b      	str	r3, [r7, #4]
  uint32_t cfsr = SCB->CFSR;                // Configurable Fault Status Register
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HardFault_Handler+0x3c>)
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	603b      	str	r3, [r7, #0]

  if (cfsr & (1 << 1)) {                    // If BFARVALID is set
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <HardFault_Handler+0x2c>
	printf("Imprecise bus fault at address: 0x%08lx\n", bus_fault_address);
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4806      	ldr	r0, [pc, #24]	@ (80023d8 <HardFault_Handler+0x40>)
 80023be:	f017 f847 	bl	8019450 <iprintf>
 80023c2:	e003      	b.n	80023cc <HardFault_Handler+0x34>
  } else {
	printf("Imprecise bus fault occurred, but address is not valid\n");
 80023c4:	4805      	ldr	r0, [pc, #20]	@ (80023dc <HardFault_Handler+0x44>)
 80023c6:	f017 f8ab 	bl	8019520 <puts>
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <HardFault_Handler+0x34>
 80023d0:	0801a934 	.word	0x0801a934
 80023d4:	e000ed00 	.word	0xe000ed00
 80023d8:	0801a948 	.word	0x0801a948
 80023dc:	0801a974 	.word	0x0801a974

080023e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <MemManage_Handler+0x4>

080023e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <BusFault_Handler+0x4>

080023f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <UsageFault_Handler+0x4>

080023f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800240c:	4802      	ldr	r0, [pc, #8]	@ (8002418 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800240e:	f002 fc5b 	bl	8004cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200085b4 	.word	0x200085b4

0800241c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002420:	4802      	ldr	r0, [pc, #8]	@ (800242c <USART1_IRQHandler+0x10>)
 8002422:	f002 ff8d 	bl	8005340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20008604 	.word	0x20008604

08002430 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <DMA2_Stream2_IRQHandler+0x10>)
 8002436:	f001 fa3d 	bl	80038b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000864c 	.word	0x2000864c

08002444 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <DMA2_Stream7_IRQHandler+0x10>)
 800244a:	f001 fa33 	bl	80038b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200086ac 	.word	0x200086ac

08002458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_kill>:

int _kill(int pid, int sig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002472:	f017 f8f7 	bl	8019664 <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2216      	movs	r2, #22
 800247a:	601a      	str	r2, [r3, #0]
  return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_exit>:

void _exit (int status)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe7 	bl	8002468 <_kill>
  while (1) {}    /* Make sure we hang here */
 800249a:	bf00      	nop
 800249c:	e7fd      	b.n	800249a <_exit+0x12>

0800249e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e00a      	b.n	80024c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024b0:	f3af 8000 	nop.w
 80024b4:	4601      	mov	r1, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	60ba      	str	r2, [r7, #8]
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3301      	adds	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	dbf0      	blt.n	80024b0 <_read+0x12>
  }

  return len;
 80024ce:	687b      	ldr	r3, [r7, #4]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002500:	605a      	str	r2, [r3, #4]
  return 0;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_isatty>:

int _isatty(int file)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002518:	2301      	movs	r3, #1
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002548:	4a14      	ldr	r2, [pc, #80]	@ (800259c <_sbrk+0x5c>)
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <_sbrk+0x60>)
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <_sbrk+0x64>)
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002562:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d207      	bcs.n	8002580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002570:	f017 f878 	bl	8019664 <__errno>
 8002574:	4603      	mov	r3, r0
 8002576:	220c      	movs	r2, #12
 8002578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800257e:	e009      	b.n	8002594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002580:	4b08      	ldr	r3, [pc, #32]	@ (80025a4 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002586:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	4a05      	ldr	r2, [pc, #20]	@ (80025a4 <_sbrk+0x64>)
 8002590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20050000 	.word	0x20050000
 80025a0:	00000400 	.word	0x00000400
 80025a4:	20008600 	.word	0x20008600
 80025a8:	200156f8 	.word	0x200156f8

080025ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <SystemInit+0x20>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <SystemInit+0x20>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 80025d6:	4a12      	ldr	r2, [pc, #72]	@ (8002620 <MX_USART1_UART_Init+0x50>)
 80025d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025da:	4b10      	ldr	r3, [pc, #64]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 80025dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 80025f6:	220c      	movs	r2, #12
 80025f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002606:	4805      	ldr	r0, [pc, #20]	@ (800261c <MX_USART1_UART_Init+0x4c>)
 8002608:	f002 fd36 	bl	8005078 <HAL_UART_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002612:	f7ff fcb3 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20008604 	.word	0x20008604
 8002620:	40011000 	.word	0x40011000

08002624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a4d      	ldr	r2, [pc, #308]	@ (8002778 <HAL_UART_MspInit+0x154>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f040 8094 	bne.w	8002770 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b4b      	ldr	r3, [pc, #300]	@ (800277c <HAL_UART_MspInit+0x158>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	4a4a      	ldr	r2, [pc, #296]	@ (800277c <HAL_UART_MspInit+0x158>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	6453      	str	r3, [r2, #68]	@ 0x44
 8002658:	4b48      	ldr	r3, [pc, #288]	@ (800277c <HAL_UART_MspInit+0x158>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b44      	ldr	r3, [pc, #272]	@ (800277c <HAL_UART_MspInit+0x158>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	4a43      	ldr	r2, [pc, #268]	@ (800277c <HAL_UART_MspInit+0x158>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6313      	str	r3, [r2, #48]	@ 0x30
 8002674:	4b41      	ldr	r3, [pc, #260]	@ (800277c <HAL_UART_MspInit+0x158>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002680:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268e:	2303      	movs	r3, #3
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002692:	2307      	movs	r3, #7
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4838      	ldr	r0, [pc, #224]	@ (8002780 <HAL_UART_MspInit+0x15c>)
 800269e:	f001 fb73 	bl	8003d88 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80026a2:	4b38      	ldr	r3, [pc, #224]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026a4:	4a38      	ldr	r2, [pc, #224]	@ (8002788 <HAL_UART_MspInit+0x164>)
 80026a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80026a8:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b0:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026b6:	4b33      	ldr	r3, [pc, #204]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026bc:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80026d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026de:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e0:	4b28      	ldr	r3, [pc, #160]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80026e6:	4827      	ldr	r0, [pc, #156]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026e8:	f000 ff4c 	bl	8003584 <HAL_DMA_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80026f2:	f7ff fc43 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a22      	ldr	r2, [pc, #136]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026fc:	4a21      	ldr	r2, [pc, #132]	@ (8002784 <HAL_UART_MspInit+0x160>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002702:	4b22      	ldr	r3, [pc, #136]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002704:	4a22      	ldr	r2, [pc, #136]	@ (8002790 <HAL_UART_MspInit+0x16c>)
 8002706:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002708:	4b20      	ldr	r3, [pc, #128]	@ (800278c <HAL_UART_MspInit+0x168>)
 800270a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800270e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002710:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002712:	2240      	movs	r2, #64	@ 0x40
 8002714:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002716:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_UART_MspInit+0x168>)
 800271e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002722:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <HAL_UART_MspInit+0x168>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002738:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800273c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002744:	4811      	ldr	r0, [pc, #68]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002746:	f000 ff1d 	bl	8003584 <HAL_DMA_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8002750:	f7ff fc14 	bl	8001f7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <HAL_UART_MspInit+0x168>)
 8002758:	639a      	str	r2, [r3, #56]	@ 0x38
 800275a:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <HAL_UART_MspInit+0x168>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2105      	movs	r1, #5
 8002764:	2025      	movs	r0, #37	@ 0x25
 8002766:	f000 fee3 	bl	8003530 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800276a:	2025      	movs	r0, #37	@ 0x25
 800276c:	f000 fefc 	bl	8003568 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	@ 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40011000 	.word	0x40011000
 800277c:	40023800 	.word	0x40023800
 8002780:	40020000 	.word	0x40020000
 8002784:	2000864c 	.word	0x2000864c
 8002788:	40026440 	.word	0x40026440
 800278c:	200086ac 	.word	0x200086ac
 8002790:	400264b8 	.word	0x400264b8

08002794 <calculate_pwm>:
 * @param pwm_output An array of 8 uint16_t values to store the calculated PWM output.
 * @return OK if the calculation was successful, MAT_MULT_ERROR if the matrix
 * multiplication failed.
 */
int8_t calculate_pwm(const float in_joystick_input[6], uint32_t pwm_output[8])
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0a0      	sub	sp, #128	@ 0x80
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
	float joystick_input[6];
	for(uint8_t i = 0; i < 6; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027a4:	e011      	b.n	80027ca <calculate_pwm+0x36>
	{
		joystick_input[i] = in_joystick_input[i];
 80027a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	441a      	add	r2, r3
 80027b0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	3380      	adds	r3, #128	@ 0x80
 80027ba:	443b      	add	r3, r7
 80027bc:	3b1c      	subs	r3, #28
 80027be:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++)
 80027c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027c4:	3301      	adds	r3, #1
 80027c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027ce:	2b05      	cmp	r3, #5
 80027d0:	d9e9      	bls.n	80027a6 <calculate_pwm+0x12>
	}

    normalize_vector(in_joystick_input, joystick_input, 6);
 80027d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027d6:	2206      	movs	r2, #6
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff faa0 	bl	8001d20 <normalize_vector>

    float f_pwm_output[8];

    __attribute__((aligned(4))) float pwm_output_8_1[8][1] = {0};
 80027e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e4:	2220      	movs	r2, #32
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f016 ff00 	bl	80195ee <memset>

    arm_matrix_instance_f32 fixed_mixing_matrix_instance;
    arm_matrix_instance_f32 joystick_input_instance;
    arm_matrix_instance_f32 pwm_output_instance;

    arm_mat_init_f32(&fixed_mixing_matrix_instance, 8, 6, (float *)FIXED_MIXING_MATRIX);
 80027ee:	f107 001c 	add.w	r0, r7, #28
 80027f2:	4b3b      	ldr	r3, [pc, #236]	@ (80028e0 <calculate_pwm+0x14c>)
 80027f4:	2206      	movs	r2, #6
 80027f6:	2108      	movs	r1, #8
 80027f8:	f006 fdaa 	bl	8009350 <arm_mat_init_f32>
    arm_mat_init_f32(&joystick_input_instance, 6, 1, (float *)joystick_input);
 80027fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002800:	f107 0014 	add.w	r0, r7, #20
 8002804:	2201      	movs	r2, #1
 8002806:	2106      	movs	r1, #6
 8002808:	f006 fda2 	bl	8009350 <arm_mat_init_f32>
    arm_mat_init_f32(&pwm_output_instance, 8, 1, (float *)pwm_output_8_1);
 800280c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002810:	f107 000c 	add.w	r0, r7, #12
 8002814:	2201      	movs	r2, #1
 8002816:	2108      	movs	r1, #8
 8002818:	f006 fd9a 	bl	8009350 <arm_mat_init_f32>

    if (arm_mat_mult_f32(&fixed_mixing_matrix_instance, &joystick_input_instance, &pwm_output_instance) != ARM_MATH_SUCCESS)
 800281c:	f107 020c 	add.w	r2, r7, #12
 8002820:	f107 0114 	add.w	r1, r7, #20
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4618      	mov	r0, r3
 800282a:	f006 fc81 	bl	8009130 <arm_mat_mult_f32>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <calculate_pwm+0xa4>
    {
        return MAT_MULT_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e04f      	b.n	80028d8 <calculate_pwm+0x144>
    }

    for (uint8_t i = 0; i < 8; i++)
 8002838:	2300      	movs	r3, #0
 800283a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800283e:	e011      	b.n	8002864 <calculate_pwm+0xd0>
    {
        f_pwm_output[i] = pwm_output_instance.pData[i];
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	441a      	add	r2, r3
 800284a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	3380      	adds	r3, #128	@ 0x80
 8002854:	443b      	add	r3, r7
 8002856:	3b3c      	subs	r3, #60	@ 0x3c
 8002858:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 800285a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800285e:	3301      	adds	r3, #1
 8002860:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8002864:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002868:	2b07      	cmp	r3, #7
 800286a:	d9e9      	bls.n	8002840 <calculate_pwm+0xac>
    }

    // normalize pwm_output and map to 1100 ~ 1900
    normalize_vector(f_pwm_output, f_pwm_output, 8);
 800286c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002870:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002874:	2208      	movs	r2, #8
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fa52 	bl	8001d20 <normalize_vector>
    for (uint8_t i = 0; i < 8; i++)
 800287c:	2300      	movs	r3, #0
 800287e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8002882:	e024      	b.n	80028ce <calculate_pwm+0x13a>
    {
        // pwm_output[i][0] = symmetric_quadratic_interpolation(pwm_output[i][0], 1, PWM_MAX);
        pwm_output[i] = (int)linear_interpolation(f_pwm_output[i], -1, 1, PWM_MIN, PWM_MAX);
 8002884:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	3380      	adds	r3, #128	@ 0x80
 800288c:	443b      	add	r3, r7
 800288e:	3b3c      	subs	r3, #60	@ 0x3c
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ed9f 2a13 	vldr	s4, [pc, #76]	@ 80028e4 <calculate_pwm+0x150>
 8002898:	eddf 1a13 	vldr	s3, [pc, #76]	@ 80028e8 <calculate_pwm+0x154>
 800289c:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80028a0:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80028a4:	eeb0 0a67 	vmov.f32	s0, s15
 80028a8:	f7ff fa0c 	bl	8001cc4 <linear_interpolation>
 80028ac:	eef0 7a40 	vmov.f32	s15, s0
 80028b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	ee17 2a90 	vmov	r2, s15
 80028c2:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 80028c4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80028c8:	3301      	adds	r3, #1
 80028ca:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80028ce:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80028d2:	2b07      	cmp	r3, #7
 80028d4:	d9d6      	bls.n	8002884 <calculate_pwm+0xf0>
    }
    return OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3780      	adds	r7, #128	@ 0x80
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000008 	.word	0x20000008
 80028e4:	44ed8000 	.word	0x44ed8000
 80028e8:	44898000 	.word	0x44898000

080028ec <invert_quaternion>:

void invert_quaternion(const Quaternion * q, Quaternion * q_inv) {
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	float norm_squared = q->w * q->w + q->x * q->x + q->y * q->y + q->z * q->z;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	edd3 6a01 	vldr	s13, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	edd3 7a02 	vldr	s15, [r3, #8]
 8002926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	edd3 6a03 	vldr	s13, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	edd3 7a03 	vldr	s15, [r3, #12]
 800293a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800293e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002942:	edc7 7a03 	vstr	s15, [r7, #12]

	if (norm_squared == 0.0f) {
 8002946:	edd7 7a03 	vldr	s15, [r7, #12]
 800294a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d110      	bne.n	8002976 <invert_quaternion+0x8a>
		// Handle the case of zero norm if needed (for example, return a specific error)
		q_inv->w = q_inv->x = q_inv->y = q_inv->z = 0.0f;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	601a      	str	r2, [r3, #0]
		return;
 8002974:	e02d      	b.n	80029d2 <invert_quaternion+0xe6>
	}
	// Compute the inverse as the conjugate divided by the norm squared
	q_inv->w = q->w / norm_squared;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	edd3 6a00 	vldr	s13, [r3]
 800297c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	edc3 7a00 	vstr	s15, [r3]
	q_inv->x = -q->x / norm_squared;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002990:	eef1 6a67 	vneg.f32	s13, s15
 8002994:	ed97 7a03 	vldr	s14, [r7, #12]
 8002998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	edc3 7a01 	vstr	s15, [r3, #4]
	q_inv->y = -q->y / norm_squared;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80029a8:	eef1 6a67 	vneg.f32	s13, s15
 80029ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80029b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	edc3 7a02 	vstr	s15, [r3, #8]
	q_inv->z = -q->z / norm_squared;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80029c0:	eef1 6a67 	vneg.f32	s13, s15
 80029c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80029c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <multiply_quaternions>:

void multiply_quaternions(const Quaternion* q1, const Quaternion* q2, Quaternion* qResult) {
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
	qResult->w = q1->w * q2->w - q1->x * q2->x - q1->y * q2->y - q1->z * q2->z;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	edc3 7a00 	vstr	s15, [r3]
	qResult->x = q1->w * q2->x + q1->x * q2->w + q1->y * q2->z - q1->z * q2->y;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	ed93 7a00 	vldr	s14, [r3]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	edd3 6a03 	vldr	s13, [r3, #12]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	edc3 7a01 	vstr	s15, [r3, #4]
	qResult->y = q1->w * q2->y - q1->x * q2->z + q1->y * q2->w + q1->z * q2->x;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	ed93 7a00 	vldr	s14, [r3]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	edc3 7a02 	vstr	s15, [r3, #8]
	qResult->z = q1->w * q2->z + q1->x * q2->y - q1->y * q2->x + q1->z * q2->w;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	0000      	movs	r0, r0
	...

08002b40 <calculate_rpy_from_quaternion>:

// PIDs controllers, respectively for z, pitch, roll, yaw
arm_pid_instance_f32 pids[4] = {0};

void calculate_rpy_from_quaternion(const Quaternion *quaternion, float roll_pitch_yaw_radians[3])
{
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b08c      	sub	sp, #48	@ 0x30
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	// roll (x-axis rotation)
	float sinr_cosp = 2 * (quaternion->w * quaternion->x + quaternion->y * quaternion->z);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	ed93 7a00 	vldr	s14, [r3]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b72:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float cosr_cosp = 1 - 2 * (quaternion->x * quaternion->x + quaternion->y * quaternion->y);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	roll_pitch_yaw_radians[0] = atan2(sinr_cosp, cosr_cosp);
 8002baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bac:	f7fd fcf4 	bl	8000598 <__aeabi_f2d>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	460d      	mov	r5, r1
 8002bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb6:	f7fd fcef 	bl	8000598 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	ec43 2b11 	vmov	d1, r2, r3
 8002bc2:	ec45 4b10 	vmov	d0, r4, r5
 8002bc6:	f017 fbc9 	bl	801a35c <atan2>
 8002bca:	ec53 2b10 	vmov	r2, r3, d0
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f7fd ffd3 	bl	8000b7c <__aeabi_d2f>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	601a      	str	r2, [r3, #0]

	// pitch (y-axis rotation)
	float sinp, cosp;
	arm_sqrt_f32(1 + 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &sinp);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	ed93 7a00 	vldr	s14, [r3]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	edd3 6a01 	vldr	s13, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c0c:	edc7 7a05 	vstr	s15, [r7, #20]
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8002c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	db09      	blt.n	8002c38 <calculate_rpy_from_quaternion+0xf8>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8002c24:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c28:	f017 fc60 	bl	801a4ec <sqrtf>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8002c36:	e004      	b.n	8002c42 <calculate_rpy_from_quaternion+0x102>
    }
    else
    {
      *pOut = 0.0f;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002c40:	bf00      	nop
	arm_sqrt_f32(1 - 2 * (quaternion->w * quaternion->y - quaternion->x * quaternion->z), &cosp);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	edc7 7a07 	vstr	s15, [r7, #28]
 8002c76:	f107 0308 	add.w	r3, r7, #8
 8002c7a:	61bb      	str	r3, [r7, #24]
    if (in >= 0.0f)
 8002c7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	db09      	blt.n	8002c9e <calculate_rpy_from_quaternion+0x15e>
      *pOut = sqrtf(in);
 8002c8a:	ed97 0a07 	vldr	s0, [r7, #28]
 8002c8e:	f017 fc2d 	bl	801a4ec <sqrtf>
 8002c92:	eef0 7a40 	vmov.f32	s15, s0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8002c9c:	e004      	b.n	8002ca8 <calculate_rpy_from_quaternion+0x168>
      *pOut = 0.0f;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002ca6:	bf00      	nop
	roll_pitch_yaw_radians[1] = 2 * atan2(sinp, cosp) - M_PI / 2;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc74 	bl	8000598 <__aeabi_f2d>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc6e 	bl	8000598 <__aeabi_f2d>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	ec43 2b11 	vmov	d1, r2, r3
 8002cc4:	ec45 4b10 	vmov	d0, r4, r5
 8002cc8:	f017 fb48 	bl	801a35c <atan2>
 8002ccc:	ec51 0b10 	vmov	r0, r1, d0
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	f7fd fb02 	bl	80002dc <__adddf3>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	a32d      	add	r3, pc, #180	@ (adr r3, 8002d98 <calculate_rpy_from_quaternion+0x258>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd faf7 	bl	80002d8 <__aeabi_dsub>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	1d1c      	adds	r4, r3, #4
 8002cf6:	f7fd ff41 	bl	8000b7c <__aeabi_d2f>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6023      	str	r3, [r4, #0]

	// yaw (z-axis rotation)
	float siny_cosp = 2 * (quaternion->w * quaternion->z + quaternion->x * quaternion->y);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	ed93 7a00 	vldr	s14, [r3]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float cosy_cosp = 1 - 2 * (quaternion->y * quaternion->y + quaternion->z * quaternion->z);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	edc7 7a08 	vstr	s15, [r7, #32]
	roll_pitch_yaw_radians[2] = atan2(siny_cosp, cosy_cosp);
 8002d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d60:	f7fd fc1a 	bl	8000598 <__aeabi_f2d>
 8002d64:	4604      	mov	r4, r0
 8002d66:	460d      	mov	r5, r1
 8002d68:	6a38      	ldr	r0, [r7, #32]
 8002d6a:	f7fd fc15 	bl	8000598 <__aeabi_f2d>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	ec43 2b11 	vmov	d1, r2, r3
 8002d76:	ec45 4b10 	vmov	d0, r4, r5
 8002d7a:	f017 faef 	bl	801a35c <atan2>
 8002d7e:	ec51 0b10 	vmov	r0, r1, d0
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f103 0408 	add.w	r4, r3, #8
 8002d88:	f7fd fef8 	bl	8000b7c <__aeabi_d2f>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	6023      	str	r3, [r4, #0]
}
 8002d90:	bf00      	nop
 8002d92:	3730      	adds	r7, #48	@ 0x30
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bdb0      	pop	{r4, r5, r7, pc}
 8002d98:	54442d18 	.word	0x54442d18
 8002d9c:	3ff921fb 	.word	0x3ff921fb

08002da0 <update_setpoints>:

uint8_t update_setpoints(const float input_values[6], const Quaternion *quat, const float *water_pressure)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
	uint8_t count = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
	float rpy_rads[3];
	calculate_rpy_from_quaternion(quat, rpy_rads);
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	4619      	mov	r1, r3
 8002db6:	68b8      	ldr	r0, [r7, #8]
 8002db8:	f7ff fec2 	bl	8002b40 <calculate_rpy_from_quaternion>
	// updates setpoints for angles
	for(uint8_t i = 0; i < 3; i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77bb      	strb	r3, [r7, #30]
 8002dc0:	e022      	b.n	8002e08 <update_setpoints+0x68>
	{
		if(fabsf(input_values[i+3]) < TOLERANCE)
 8002dc2:	7fbb      	ldrb	r3, [r7, #30]
 8002dc4:	3303      	adds	r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	eef0 7ae7 	vabs.f32	s15, s15
 8002dd4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002e18 <update_setpoints+0x78>
 8002dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de0:	d50f      	bpl.n	8002e02 <update_setpoints+0x62>
		{
			setpoints[i+1] = rpy_rads[i+1];
 8002de2:	7fbb      	ldrb	r3, [r7, #30]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	7fbb      	ldrb	r3, [r7, #30]
 8002de8:	3301      	adds	r3, #1
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	3220      	adds	r2, #32
 8002dee:	443a      	add	r2, r7
 8002df0:	3a10      	subs	r2, #16
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	4909      	ldr	r1, [pc, #36]	@ (8002e1c <update_setpoints+0x7c>)
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	601a      	str	r2, [r3, #0]
			count++;
 8002dfc:	7ffb      	ldrb	r3, [r7, #31]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < 3; i++)
 8002e02:	7fbb      	ldrb	r3, [r7, #30]
 8002e04:	3301      	adds	r3, #1
 8002e06:	77bb      	strb	r3, [r7, #30]
 8002e08:	7fbb      	ldrb	r3, [r7, #30]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d9d9      	bls.n	8002dc2 <update_setpoints+0x22>
	 * In order for the setpoint to be update, I have to check the role each axis plays in changing the depth,
	 * and updating the setpoint only if all of the corresponding input values are 0
	 */


	return count;
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	3d4ccccd 	.word	0x3d4ccccd
 8002e1c:	2000870c 	.word	0x2000870c

08002e20 <calculate_pwm_with_pid>:
    }
}

// The order for 4-elements arrays is: z, pitch, roll, yaw
uint8_t calculate_pwm_with_pid(const float joystick_input[6], uint32_t pwm_output[8], const Quaternion *orientation_quaternion,
		const float *water_pressure) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b0b0      	sub	sp, #192	@ 0xc0
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
	// calculate current values
	float current_values[4];
	calculate_rpy_from_quaternion(orientation_quaternion, &current_values[1]);
 8002e2e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e32:	3304      	adds	r3, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fe82 	bl	8002b40 <calculate_rpy_from_quaternion>

	// TODO conversion from water pressure to depth
	current_values[0] = *water_pressure;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	66bb      	str	r3, [r7, #104]	@ 0x68

	update_setpoints(joystick_input, orientation_quaternion, water_pressure);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff ffaa 	bl	8002da0 <update_setpoints>
	// PID in action!
	float input_values[6];
	for(uint8_t i = 0; i < 6; i++) input_values[i] = joystick_input[i];
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002e52:	e011      	b.n	8002e78 <calculate_pwm_with_pid+0x58>
 8002e54:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	441a      	add	r2, r3
 8002e5e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	33c0      	adds	r3, #192	@ 0xc0
 8002e68:	443b      	add	r3, r7
 8002e6a:	3b70      	subs	r3, #112	@ 0x70
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002e72:	3301      	adds	r3, #1
 8002e74:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002e78:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d9e9      	bls.n	8002e54 <calculate_pwm_with_pid+0x34>

	float pitch_pid_feedback = arm_pid_f32(&pids[1], setpoints[1] - current_values[1]);
 8002e80:	4bce      	ldr	r3, [pc, #824]	@ (80031bc <calculate_pwm_with_pid+0x39c>)
 8002e82:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e86:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8e:	4bcc      	ldr	r3, [pc, #816]	@ (80031c0 <calculate_pwm_with_pid+0x3a0>)
 8002e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e94:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    out = (S->A0 * in) +
 8002e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e9c:	ed93 7a00 	vldr	s14, [r3]
 8002ea0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eac:	edd3 6a01 	vldr	s13, [r3, #4]
 8002eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ec4:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ec8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ecc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002edc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    S->state[1] = S->state[0];
 8002ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ef2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ef8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002efa:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f00:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002f02:	615a      	str	r2, [r3, #20]
    return (out);
 8002f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float roll_pid_feedback = arm_pid_f32(&pids[2], setpoints[2] - current_values[2]);
 8002f0a:	4bac      	ldr	r3, [pc, #688]	@ (80031bc <calculate_pwm_with_pid+0x39c>)
 8002f0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f10:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f18:	4baa      	ldr	r3, [pc, #680]	@ (80031c4 <calculate_pwm_with_pid+0x3a4>)
 8002f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f1e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
    out = (S->A0 * in) +
 8002f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f26:	ed93 7a00 	vldr	s14, [r3]
 8002f2a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f36:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002f46:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f4e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f56:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f66:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    S->state[1] = S->state[0];
 8002f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f7c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f82:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002f86:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002f90:	615a      	str	r2, [r3, #20]
    return (out);
 8002f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float yaw_pid_feedback = arm_pid_f32(&pids[3], setpoints[3] - current_values[3]);
 8002f9a:	4b88      	ldr	r3, [pc, #544]	@ (80031bc <calculate_pwm_with_pid+0x39c>)
 8002f9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fa0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8002fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa8:	4b87      	ldr	r3, [pc, #540]	@ (80031c8 <calculate_pwm_with_pid+0x3a8>)
 8002faa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fae:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    out = (S->A0 * in) +
 8002fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fb6:	ed93 7a00 	vldr	s14, [r3]
 8002fba:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8002fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fce:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002fd6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002fda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fde:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fe6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ff6:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffe:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    S->state[1] = S->state[0];
 8003002:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800300c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800300e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003012:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003016:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8003018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800301c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003020:	615a      	str	r2, [r3, #20]
    return (out);
 8003022:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	/* **************
	 * Depth
	 * The z axis we can get measures of is in the fixed-body-frame:
	 * we need to convert the output of the PID to the body frame in order to modify the input, in order to achieve the desired depth hold.
	*/
	float z_out = arm_pid_f32(&pids[0], setpoints[0] - current_values[0]);
 800302a:	4b64      	ldr	r3, [pc, #400]	@ (80031bc <calculate_pwm_with_pid+0x39c>)
 800302c:	ed93 7a00 	vldr	s14, [r3]
 8003030:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8003034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003038:	4b64      	ldr	r3, [pc, #400]	@ (80031cc <calculate_pwm_with_pid+0x3ac>)
 800303a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800303e:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
    out = (S->A0 * in) +
 8003042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003046:	ed93 7a00 	vldr	s14, [r3]
 800304a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800304e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8003052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003056:	edd3 6a01 	vldr	s13, [r3, #4]
 800305a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800305e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003062:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8003066:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800306a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800306e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003076:	edd3 7a04 	vldr	s15, [r3, #16]
 800307a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800307e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003082:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003086:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800308a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    S->state[1] = S->state[0];
 8003092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800309c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800309e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80030a6:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80030a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ac:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80030b0:	615a      	str	r2, [r3, #20]
    return (out);
 80030b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

	// Applies the inverse rotation of the body-frame from the fixed-body-frame ( described by the orientation quaternion ),
	// in order to compute the coordinates of the z_out vector with respect to the body-frame
	Quaternion z_out_q;
	z_out_q.w = 0;
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	643b      	str	r3, [r7, #64]	@ 0x40
	z_out_q.x = 0;
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	647b      	str	r3, [r7, #68]	@ 0x44
	z_out_q.y = 0;
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	z_out_q.z = z_out;
 80030cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	Quaternion q_inv = {0};
 80030d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	60da      	str	r2, [r3, #12]
	invert_quaternion(orientation_quaternion, &q_inv);
 80030e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fc00 	bl	80028ec <invert_quaternion>
	
	// applies the inverse rotation to the z_out_q vector
	Quaternion intermediate_result = {0};
 80030ec:	f107 0320 	add.w	r3, r7, #32
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
	Quaternion z_out_body_frame = {0};
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
	multiply_quaternions(&q_inv, &z_out_q, &intermediate_result);
 8003108:	f107 0220 	add.w	r2, r7, #32
 800310c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003110:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fc61 	bl	80029dc <multiply_quaternions>
	multiply_quaternions(&intermediate_result, orientation_quaternion, &z_out_body_frame);
 800311a:	f107 0210 	add.w	r2, r7, #16
 800311e:	f107 0320 	add.w	r3, r7, #32
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fc59 	bl	80029dc <multiply_quaternions>

	// apply the feedback on x y z axis if and only if either the feedback is approx 0, or the input value by the user is approx 0.
	// This condition must be met for every axis value
	uint8_t y_condition = fabsf(z_out_body_frame.y) < TOLERANCE || fabsf(input_values[0] < TOLERANCE);
 800312a:	edd7 7a06 	vldr	s15, [r7, #24]
 800312e:	eef0 7ae7 	vabs.f32	s15, s15
 8003132:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	d408      	bmi.n	8003152 <calculate_pwm_with_pid+0x332>
 8003140:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003144:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 8003148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	d501      	bpl.n	8003156 <calculate_pwm_with_pid+0x336>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <calculate_pwm_with_pid+0x338>
 8003156:	2300      	movs	r3, #0
 8003158:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	uint8_t x_condition = fabsf(z_out_body_frame.x) < TOLERANCE || fabsf(input_values[1] < TOLERANCE);
 800315c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003160:	eef0 7ae7 	vabs.f32	s15, s15
 8003164:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 8003168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	d408      	bmi.n	8003184 <calculate_pwm_with_pid+0x364>
 8003172:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003176:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 800317a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003182:	d501      	bpl.n	8003188 <calculate_pwm_with_pid+0x368>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <calculate_pwm_with_pid+0x36a>
 8003188:	2300      	movs	r3, #0
 800318a:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
	uint8_t z_condition = fabsf(z_out_body_frame.z) < TOLERANCE || fabsf(input_values[2] < TOLERANCE);
 800318e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003192:	eef0 7ae7 	vabs.f32	s15, s15
 8003196:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 800319a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a2:	d408      	bmi.n	80031b6 <calculate_pwm_with_pid+0x396>
 80031a4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80031a8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 80031ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	d50e      	bpl.n	80031d4 <calculate_pwm_with_pid+0x3b4>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00d      	b.n	80031d6 <calculate_pwm_with_pid+0x3b6>
 80031ba:	bf00      	nop
 80031bc:	2000870c 	.word	0x2000870c
 80031c0:	20008740 	.word	0x20008740
 80031c4:	20008764 	.word	0x20008764
 80031c8:	20008788 	.word	0x20008788
 80031cc:	2000871c 	.word	0x2000871c
 80031d0:	3d4ccccd 	.word	0x3d4ccccd
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9

	if (x_condition && y_condition && z_condition)
 80031da:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01f      	beq.n	8003222 <calculate_pwm_with_pid+0x402>
 80031e2:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01b      	beq.n	8003222 <calculate_pwm_with_pid+0x402>
 80031ea:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d017      	beq.n	8003222 <calculate_pwm_with_pid+0x402>
	{
		input_values[0] += z_out_body_frame.y;
 80031f2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80031f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		input_values[1] += z_out_body_frame.x;
 8003202:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003206:	edd7 7a05 	vldr	s15, [r7, #20]
 800320a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		input_values[2] += z_out_body_frame.z;
 8003212:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003216:	edd7 7a07 	vldr	s15, [r7, #28]
 800321a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	}

	// pitch
	if (fabsf(pitch_pid_feedback) < TOLERANCE || fabsf(input_values[3] < TOLERANCE))
 8003222:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003226:	eef0 7ae7 	vabs.f32	s15, s15
 800322a:	ed1f 7a17 	vldr	s14, [pc, #-92]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 800322e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003236:	d408      	bmi.n	800324a <calculate_pwm_with_pid+0x42a>
 8003238:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800323c:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 8003240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	d507      	bpl.n	800325a <calculate_pwm_with_pid+0x43a>
	{
		input_values[3] += pitch_pid_feedback;
 800324a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800324e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003256:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	}
	// roll
	if (fabsf(roll_pid_feedback) < TOLERANCE || fabsf(input_values[4] < TOLERANCE))
 800325a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800325e:	eef0 7ae7 	vabs.f32	s15, s15
 8003262:	ed1f 7a25 	vldr	s14, [pc, #-148]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 8003266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d408      	bmi.n	8003282 <calculate_pwm_with_pid+0x462>
 8003270:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003274:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 8003278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	d507      	bpl.n	8003292 <calculate_pwm_with_pid+0x472>
	{
		input_values[4] += roll_pid_feedback;
 8003282:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003286:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800328a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}
	// yaw
	if (fabsf(yaw_pid_feedback) < TOLERANCE || fabsf(input_values[5] < TOLERANCE))
 8003292:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003296:	eef0 7ae7 	vabs.f32	s15, s15
 800329a:	ed1f 7a33 	vldr	s14, [pc, #-204]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 800329e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d408      	bmi.n	80032ba <calculate_pwm_with_pid+0x49a>
 80032a8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80032ac:	ed1f 7a38 	vldr	s14, [pc, #-224]	@ 80031d0 <calculate_pwm_with_pid+0x3b0>
 80032b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	d507      	bpl.n	80032ca <calculate_pwm_with_pid+0x4aa>
	{
		input_values[5] += yaw_pid_feedback;
 80032ba:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80032be:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	}

	uint8_t code = calculate_pwm(&input_values, pwm_output);
 80032ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fa5f 	bl	8002794 <calculate_pwm>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
	return code;
 80032dc:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	37c0      	adds	r7, #192	@ 0xc0
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003320 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032ec:	f7ff f95e 	bl	80025ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032f0:	480c      	ldr	r0, [pc, #48]	@ (8003324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032f2:	490d      	ldr	r1, [pc, #52]	@ (8003328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032f4:	4a0d      	ldr	r2, [pc, #52]	@ (800332c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032f8:	e002      	b.n	8003300 <LoopCopyDataInit>

080032fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032fe:	3304      	adds	r3, #4

08003300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003304:	d3f9      	bcc.n	80032fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003306:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003308:	4c0a      	ldr	r4, [pc, #40]	@ (8003334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800330a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800330c:	e001      	b.n	8003312 <LoopFillZerobss>

0800330e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800330e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003310:	3204      	adds	r2, #4

08003312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003314:	d3fb      	bcc.n	800330e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003316:	f016 f9ab 	bl	8019670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800331a:	f7fe fd7b 	bl	8001e14 <main>
  bx  lr    
 800331e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003320:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003328:	2000081c 	.word	0x2000081c
  ldr r2, =_sidata
 800332c:	0801bd5c 	.word	0x0801bd5c
  ldr r2, =_sbss
 8003330:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 8003334:	200156f4 	.word	0x200156f4

08003338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003338:	e7fe      	b.n	8003338 <ADC_IRQHandler>
	...

0800333c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003340:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <HAL_Init+0x40>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0d      	ldr	r2, [pc, #52]	@ (800337c <HAL_Init+0x40>)
 8003346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800334a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <HAL_Init+0x40>)
 8003352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003358:	4b08      	ldr	r3, [pc, #32]	@ (800337c <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a07      	ldr	r2, [pc, #28]	@ (800337c <HAL_Init+0x40>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003364:	2003      	movs	r0, #3
 8003366:	f000 f8d8 	bl	800351a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800336a:	200f      	movs	r0, #15
 800336c:	f7fe ff9c 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003370:	f7fe ff6e 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023c00 	.word	0x40023c00

08003380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_IncTick+0x20>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_IncTick+0x24>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <HAL_IncTick+0x24>)
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	200000cc 	.word	0x200000cc
 80033a4:	200087ac 	.word	0x200087ac

080033a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return uwTick;
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <HAL_GetTick+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	200087ac 	.word	0x200087ac

080033c0 <__NVIC_SetPriorityGrouping>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033dc:	4013      	ands	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f2:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <__NVIC_SetPriorityGrouping+0x44>)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	60d3      	str	r3, [r2, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_GetPriorityGrouping>:
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800340c:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <__NVIC_GetPriorityGrouping+0x18>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	f003 0307 	and.w	r3, r3, #7
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_EnableIRQ>:
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0b      	blt.n	800344e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	@ (800345c <__NVIC_EnableIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_SetPriority>:
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	@ (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	@ (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	@ 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff4c 	bl	80033c0 <__NVIC_SetPriorityGrouping>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003542:	f7ff ff61 	bl	8003408 <__NVIC_GetPriorityGrouping>
 8003546:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	6978      	ldr	r0, [r7, #20]
 800354e:	f7ff ffb1 	bl	80034b4 <NVIC_EncodePriority>
 8003552:	4602      	mov	r2, r0
 8003554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ff80 	bl	8003460 <__NVIC_SetPriority>
}
 8003560:	bf00      	nop
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff54 	bl	8003424 <__NVIC_EnableIRQ>
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003590:	f7ff ff0a 	bl	80033a8 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e099      	b.n	80036d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c0:	e00f      	b.n	80035e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c2:	f7ff fef1 	bl	80033a8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d908      	bls.n	80035e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e078      	b.n	80036d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e8      	bne.n	80035c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <HAL_DMA_Init+0x158>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800360e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	2b04      	cmp	r3, #4
 800363a:	d107      	bne.n	800364c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	4313      	orrs	r3, r2
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	2b04      	cmp	r3, #4
 8003674:	d117      	bne.n	80036a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fb01 	bl	8003c90 <DMA_CheckFifoParam>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2240      	movs	r2, #64	@ 0x40
 8003698:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036a2:	2301      	movs	r3, #1
 80036a4:	e016      	b.n	80036d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fab8 	bl	8003c24 <DMA_CalcBaseAndBitshift>
 80036b4:	4603      	mov	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	223f      	movs	r2, #63	@ 0x3f
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	f010803f 	.word	0xf010803f

080036e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_DMA_Start_IT+0x26>
 8003702:	2302      	movs	r3, #2
 8003704:	e040      	b.n	8003788 <HAL_DMA_Start_IT+0xa8>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d12f      	bne.n	800377a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa4a 	bl	8003bc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003738:	223f      	movs	r2, #63	@ 0x3f
 800373a:	409a      	lsls	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0216 	orr.w	r2, r2, #22
 800374e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0208 	orr.w	r2, r2, #8
 8003766:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e005      	b.n	8003786 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800379e:	f7ff fe03 	bl	80033a8 <HAL_GetTick>
 80037a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d008      	beq.n	80037c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2280      	movs	r2, #128	@ 0x80
 80037b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e052      	b.n	8003868 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0216 	bic.w	r2, r2, #22
 80037d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <HAL_DMA_Abort+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0208 	bic.w	r2, r2, #8
 8003800:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003812:	e013      	b.n	800383c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003814:	f7ff fdc8 	bl	80033a8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b05      	cmp	r3, #5
 8003820:	d90c      	bls.n	800383c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2203      	movs	r2, #3
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e015      	b.n	8003868 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e4      	bne.n	8003814 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384e:	223f      	movs	r2, #63	@ 0x3f
 8003850:	409a      	lsls	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d004      	beq.n	800388e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2280      	movs	r2, #128	@ 0x80
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e00c      	b.n	80038a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2205      	movs	r2, #5
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038c0:	4b8e      	ldr	r3, [pc, #568]	@ (8003afc <HAL_DMA_IRQHandler+0x248>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003b00 <HAL_DMA_IRQHandler+0x24c>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	0a9b      	lsrs	r3, r3, #10
 80038cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038de:	2208      	movs	r2, #8
 80038e0:	409a      	lsls	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01a      	beq.n	8003920 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d013      	beq.n	8003920 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0204 	bic.w	r2, r2, #4
 8003906:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390c:	2208      	movs	r2, #8
 800390e:	409a      	lsls	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003918:	f043 0201 	orr.w	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003924:	2201      	movs	r2, #1
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d012      	beq.n	8003956 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394e:	f043 0202 	orr.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395a:	2204      	movs	r2, #4
 800395c:	409a      	lsls	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003978:	2204      	movs	r2, #4
 800397a:	409a      	lsls	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003990:	2210      	movs	r2, #16
 8003992:	409a      	lsls	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d043      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d03c      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ae:	2210      	movs	r2, #16
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d018      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d108      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d024      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
 80039e2:	e01f      	b.n	8003a24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
 80039f4:	e016      	b.n	8003a24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d107      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0208 	bic.w	r2, r2, #8
 8003a12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	2220      	movs	r2, #32
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 808f 	beq.w	8003b54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8087 	beq.w	8003b54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d136      	bne.n	8003acc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0216 	bic.w	r2, r2, #22
 8003a6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x1da>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0208 	bic.w	r2, r2, #8
 8003a9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	223f      	movs	r2, #63	@ 0x3f
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d07e      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
        }
        return;
 8003aca:	e079      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01d      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10d      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d031      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e02c      	b.n	8003b54 <HAL_DMA_IRQHandler+0x2a0>
 8003afa:	bf00      	nop
 8003afc:	20000004 	.word	0x20000004
 8003b00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d023      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
 8003b14:	e01e      	b.n	8003b54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10f      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0210 	bic.w	r2, r2, #16
 8003b32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d032      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d022      	beq.n	8003bae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d307      	bcc.n	8003b9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f2      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x2cc>
 8003b9a:	e000      	b.n	8003b9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bc0:	bf00      	nop
    }
  }
}
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003be4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d108      	bne.n	8003c08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c06:	e007      	b.n	8003c18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	3b10      	subs	r3, #16
 8003c34:	4a14      	ldr	r2, [pc, #80]	@ (8003c88 <DMA_CalcBaseAndBitshift+0x64>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c3e:	4a13      	ldr	r2, [pc, #76]	@ (8003c8c <DMA_CalcBaseAndBitshift+0x68>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d909      	bls.n	8003c66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c5a:	f023 0303 	bic.w	r3, r3, #3
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c64:	e007      	b.n	8003c76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	aaaaaaab 	.word	0xaaaaaaab
 8003c8c:	0801aa1c 	.word	0x0801aa1c

08003c90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d11f      	bne.n	8003cea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d856      	bhi.n	8003d5e <DMA_CheckFifoParam+0xce>
 8003cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <DMA_CheckFifoParam+0x28>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003cdb 	.word	0x08003cdb
 8003cc0:	08003cc9 	.word	0x08003cc9
 8003cc4:	08003d5f 	.word	0x08003d5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d046      	beq.n	8003d62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd8:	e043      	b.n	8003d62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ce2:	d140      	bne.n	8003d66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce8:	e03d      	b.n	8003d66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf2:	d121      	bne.n	8003d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d837      	bhi.n	8003d6a <DMA_CheckFifoParam+0xda>
 8003cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <DMA_CheckFifoParam+0x70>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d17 	.word	0x08003d17
 8003d08:	08003d11 	.word	0x08003d11
 8003d0c:	08003d29 	.word	0x08003d29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e030      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d025      	beq.n	8003d6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d26:	e022      	b.n	8003d6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d30:	d11f      	bne.n	8003d72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d36:	e01c      	b.n	8003d72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d903      	bls.n	8003d46 <DMA_CheckFifoParam+0xb6>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d003      	beq.n	8003d4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d44:	e018      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4a:	e015      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	e00b      	b.n	8003d76 <DMA_CheckFifoParam+0xe6>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e00a      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e008      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d66:	bf00      	nop
 8003d68:	e006      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e004      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e002      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
    }
  } 
  
  return status; 
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop

08003d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	@ 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e177      	b.n	8004094 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003da4:	2201      	movs	r2, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	f040 8166 	bne.w	800408e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d005      	beq.n	8003dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d130      	bne.n	8003e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e10:	2201      	movs	r2, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 0201 	and.w	r2, r3, #1
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d017      	beq.n	8003e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d123      	bne.n	8003ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	08da      	lsrs	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	220f      	movs	r2, #15
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	08da      	lsrs	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	69b9      	ldr	r1, [r7, #24]
 8003ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0203 	and.w	r2, r3, #3
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80c0 	beq.w	800408e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b66      	ldr	r3, [pc, #408]	@ (80040ac <HAL_GPIO_Init+0x324>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	4a65      	ldr	r2, [pc, #404]	@ (80040ac <HAL_GPIO_Init+0x324>)
 8003f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f1e:	4b63      	ldr	r3, [pc, #396]	@ (80040ac <HAL_GPIO_Init+0x324>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f2a:	4a61      	ldr	r2, [pc, #388]	@ (80040b0 <HAL_GPIO_Init+0x328>)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	3302      	adds	r3, #2
 8003f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	220f      	movs	r2, #15
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a58      	ldr	r2, [pc, #352]	@ (80040b4 <HAL_GPIO_Init+0x32c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d037      	beq.n	8003fc6 <HAL_GPIO_Init+0x23e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a57      	ldr	r2, [pc, #348]	@ (80040b8 <HAL_GPIO_Init+0x330>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d031      	beq.n	8003fc2 <HAL_GPIO_Init+0x23a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a56      	ldr	r2, [pc, #344]	@ (80040bc <HAL_GPIO_Init+0x334>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d02b      	beq.n	8003fbe <HAL_GPIO_Init+0x236>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a55      	ldr	r2, [pc, #340]	@ (80040c0 <HAL_GPIO_Init+0x338>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d025      	beq.n	8003fba <HAL_GPIO_Init+0x232>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a54      	ldr	r2, [pc, #336]	@ (80040c4 <HAL_GPIO_Init+0x33c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01f      	beq.n	8003fb6 <HAL_GPIO_Init+0x22e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a53      	ldr	r2, [pc, #332]	@ (80040c8 <HAL_GPIO_Init+0x340>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d019      	beq.n	8003fb2 <HAL_GPIO_Init+0x22a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a52      	ldr	r2, [pc, #328]	@ (80040cc <HAL_GPIO_Init+0x344>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <HAL_GPIO_Init+0x226>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a51      	ldr	r2, [pc, #324]	@ (80040d0 <HAL_GPIO_Init+0x348>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00d      	beq.n	8003faa <HAL_GPIO_Init+0x222>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a50      	ldr	r2, [pc, #320]	@ (80040d4 <HAL_GPIO_Init+0x34c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d007      	beq.n	8003fa6 <HAL_GPIO_Init+0x21e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4f      	ldr	r2, [pc, #316]	@ (80040d8 <HAL_GPIO_Init+0x350>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_GPIO_Init+0x21a>
 8003f9e:	2309      	movs	r3, #9
 8003fa0:	e012      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fa2:	230a      	movs	r3, #10
 8003fa4:	e010      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	e00e      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003faa:	2307      	movs	r3, #7
 8003fac:	e00c      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fae:	2306      	movs	r3, #6
 8003fb0:	e00a      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fb2:	2305      	movs	r3, #5
 8003fb4:	e008      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	e006      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e004      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e002      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_GPIO_Init+0x240>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f002 0203 	and.w	r2, r2, #3
 8003fce:	0092      	lsls	r2, r2, #2
 8003fd0:	4093      	lsls	r3, r2
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd8:	4935      	ldr	r1, [pc, #212]	@ (80040b0 <HAL_GPIO_Init+0x328>)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	3302      	adds	r3, #2
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80040dc <HAL_GPIO_Init+0x354>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800400a:	4a34      	ldr	r2, [pc, #208]	@ (80040dc <HAL_GPIO_Init+0x354>)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004010:	4b32      	ldr	r3, [pc, #200]	@ (80040dc <HAL_GPIO_Init+0x354>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004034:	4a29      	ldr	r2, [pc, #164]	@ (80040dc <HAL_GPIO_Init+0x354>)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800403a:	4b28      	ldr	r3, [pc, #160]	@ (80040dc <HAL_GPIO_Init+0x354>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800405e:	4a1f      	ldr	r2, [pc, #124]	@ (80040dc <HAL_GPIO_Init+0x354>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004064:	4b1d      	ldr	r3, [pc, #116]	@ (80040dc <HAL_GPIO_Init+0x354>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004088:	4a14      	ldr	r2, [pc, #80]	@ (80040dc <HAL_GPIO_Init+0x354>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3301      	adds	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b0f      	cmp	r3, #15
 8004098:	f67f ae84 	bls.w	8003da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3724      	adds	r7, #36	@ 0x24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40013800 	.word	0x40013800
 80040b4:	40020000 	.word	0x40020000
 80040b8:	40020400 	.word	0x40020400
 80040bc:	40020800 	.word	0x40020800
 80040c0:	40020c00 	.word	0x40020c00
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40021400 	.word	0x40021400
 80040cc:	40021800 	.word	0x40021800
 80040d0:	40021c00 	.word	0x40021c00
 80040d4:	40022000 	.word	0x40022000
 80040d8:	40022400 	.word	0x40022400
 80040dc:	40013c00 	.word	0x40013c00

080040e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
 80040ec:	4613      	mov	r3, r2
 80040ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040fc:	e003      	b.n	8004106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040fe:	887b      	ldrh	r3, [r7, #2]
 8004100:	041a      	lsls	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	@ 0x40
 800412e:	4b1d      	ldr	r3, [pc, #116]	@ (80041a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800413a:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004140:	f7ff f932 	bl	80033a8 <HAL_GetTick>
 8004144:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004146:	e009      	b.n	800415c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004148:	f7ff f92e 	bl	80033a8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004156:	d901      	bls.n	800415c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e01f      	b.n	800419c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800415c:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <HAL_PWREx_EnableOverDrive+0x98>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004168:	d1ee      	bne.n	8004148 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800416a:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004170:	f7ff f91a 	bl	80033a8 <HAL_GetTick>
 8004174:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004176:	e009      	b.n	800418c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004178:	f7ff f916 	bl	80033a8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004186:	d901      	bls.n	800418c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e007      	b.n	800419c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <HAL_PWREx_EnableOverDrive+0x98>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004198:	d1ee      	bne.n	8004178 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40023800 	.word	0x40023800
 80041a8:	420e0040 	.word	0x420e0040
 80041ac:	40007000 	.word	0x40007000
 80041b0:	420e0044 	.word	0x420e0044

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0cc      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b68      	ldr	r3, [pc, #416]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d90c      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b65      	ldr	r3, [pc, #404]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b63      	ldr	r3, [pc, #396]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b8      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004208:	4b59      	ldr	r3, [pc, #356]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a58      	ldr	r2, [pc, #352]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004220:	4b53      	ldr	r3, [pc, #332]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800422a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	494d      	ldr	r1, [pc, #308]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d044      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b47      	ldr	r3, [pc, #284]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d119      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d003      	beq.n	8004272 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b3f      	ldr	r3, [pc, #252]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b3b      	ldr	r3, [pc, #236]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e067      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004292:	4b37      	ldr	r3, [pc, #220]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4934      	ldr	r1, [pc, #208]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7ff f880 	bl	80033a8 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ac:	f7ff f87c 	bl	80033a8 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 020c 	and.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1eb      	bne.n	80042ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b25      	ldr	r3, [pc, #148]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d20c      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b22      	ldr	r3, [pc, #136]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b20      	ldr	r3, [pc, #128]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e032      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4916      	ldr	r1, [pc, #88]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	490e      	ldr	r1, [pc, #56]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800433a:	f000 f821 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800433e:	4602      	mov	r2, r0
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	490a      	ldr	r1, [pc, #40]	@ (8004374 <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fd ffa4 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00
 8004370:	40023800 	.word	0x40023800
 8004374:	0801aa04 	.word	0x0801aa04
 8004378:	20000004 	.word	0x20000004
 800437c:	200000c8 	.word	0x200000c8

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b092      	sub	sp, #72	@ 0x48
 8004386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllvco = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllp = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t sysclockfreq = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004398:	4b6f      	ldr	r3, [pc, #444]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d00e      	beq.n	80043c2 <HAL_RCC_GetSysClockFreq+0x42>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	f200 80cd 	bhi.w	8004544 <HAL_RCC_GetSysClockFreq+0x1c4>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x3a>
 80043b2:	e0c7      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x1c4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b69      	ldr	r3, [pc, #420]	@ (800455c <HAL_RCC_GetSysClockFreq+0x1dc>)
 80043b6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80043b8:	e0c7      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ba:	f44f 0361 	mov.w	r3, #14745600	@ 0xe10000
 80043be:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80043c0:	e0c3      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c2:	4b65      	ldr	r3, [pc, #404]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043cc:	4b62      	ldr	r3, [pc, #392]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d04a      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d8:	4b5f      	ldr	r3, [pc, #380]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	099b      	lsrs	r3, r3, #6
 80043de:	2200      	movs	r2, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	4611      	mov	r1, r2
 80043e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ee:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80043f2:	4642      	mov	r2, r8
 80043f4:	464b      	mov	r3, r9
 80043f6:	f04f 0000 	mov.w	r0, #0
 80043fa:	f04f 0100 	mov.w	r1, #0
 80043fe:	00d9      	lsls	r1, r3, #3
 8004400:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004404:	00d0      	lsls	r0, r2, #3
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4641      	mov	r1, r8
 800440c:	1a54      	subs	r4, r2, r1
 800440e:	4649      	mov	r1, r9
 8004410:	eb63 0501 	sbc.w	r5, r3, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	016b      	lsls	r3, r5, #5
 800441e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8004422:	0162      	lsls	r2, r4, #5
 8004424:	4614      	mov	r4, r2
 8004426:	461d      	mov	r5, r3
 8004428:	4643      	mov	r3, r8
 800442a:	18e3      	adds	r3, r4, r3
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	464b      	mov	r3, r9
 8004430:	eb45 0303 	adc.w	r3, r5, r3
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004442:	4629      	mov	r1, r5
 8004444:	040b      	lsls	r3, r1, #16
 8004446:	4621      	mov	r1, r4
 8004448:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800444c:	4621      	mov	r1, r4
 800444e:	040a      	lsls	r2, r1, #16
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004456:	2200      	movs	r2, #0
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800445a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800445c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004460:	f7fc fc2c 	bl	8000cbc <__aeabi_uldivmod>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4613      	mov	r3, r2
 800446a:	647b      	str	r3, [r7, #68]	@ 0x44
 800446c:	e05c      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x1a8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446e:	4b3a      	ldr	r3, [pc, #232]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	2200      	movs	r2, #0
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	627a      	str	r2, [r7, #36]	@ 0x24
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800448a:	4622      	mov	r2, r4
 800448c:	462b      	mov	r3, r5
 800448e:	f04f 0000 	mov.w	r0, #0
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	0159      	lsls	r1, r3, #5
 8004498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800449c:	0150      	lsls	r0, r2, #5
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4621      	mov	r1, r4
 80044a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80044a8:	4629      	mov	r1, r5
 80044aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044c2:	ebb2 080a 	subs.w	r8, r2, sl
 80044c6:	eb63 090b 	sbc.w	r9, r3, fp
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044de:	4690      	mov	r8, r2
 80044e0:	4699      	mov	r9, r3
 80044e2:	4623      	mov	r3, r4
 80044e4:	eb18 0303 	adds.w	r3, r8, r3
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	462b      	mov	r3, r5
 80044ec:	eb49 0303 	adc.w	r3, r9, r3
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fe:	4629      	mov	r1, r5
 8004500:	028b      	lsls	r3, r1, #10
 8004502:	4621      	mov	r1, r4
 8004504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004508:	4621      	mov	r1, r4
 800450a:	028a      	lsls	r2, r1, #10
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004512:	2200      	movs	r2, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	617a      	str	r2, [r7, #20]
 8004518:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800451c:	f7fc fbce 	bl	8000cbc <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	63bb      	str	r3, [r7, #56]	@ 0x38

      sysclockfreq = pllvco / pllp;
 8004538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800453a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004542:	e002      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x1ca>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b05      	ldr	r3, [pc, #20]	@ (800455c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004546:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800454c:	4618      	mov	r0, r3
 800454e:	3748      	adds	r7, #72	@ 0x48
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	00f42400 	.word	0x00f42400

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_RCC_GetHCLKFreq+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000004 	.word	0x20000004

08004578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800457c:	f7ff fff0 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0a9b      	lsrs	r3, r3, #10
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	@ (800459c <HAL_RCC_GetPCLK1Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	0801aa14 	.word	0x0801aa14

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a4:	f7ff ffdc 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0b5b      	lsrs	r3, r3, #13
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	0801aa14 	.word	0x0801aa14

080045c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	220f      	movs	r2, #15
 80045d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045d8:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0203 	and.w	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_GetClockConfig+0x5c>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800460a:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <HAL_RCC_GetClockConfig+0x60>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	40023c00 	.word	0x40023c00

0800462c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e273      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800464a:	4b88      	ldr	r3, [pc, #544]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00c      	beq.n	8004670 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004656:	4b85      	ldr	r3, [pc, #532]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
        || \
 800465e:	2b08      	cmp	r3, #8
 8004660:	d112      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004662:	4b82      	ldr	r3, [pc, #520]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800466e:	d10b      	bne.n	8004688 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	4b7e      	ldr	r3, [pc, #504]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05b      	beq.n	8004734 <HAL_RCC_OscConfig+0x108>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d157      	bne.n	8004734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e24e      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x74>
 8004692:	4b76      	ldr	r3, [pc, #472]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a75      	ldr	r2, [pc, #468]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0x98>
 80046aa:	4b70      	ldr	r3, [pc, #448]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6f      	ldr	r2, [pc, #444]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b6d      	ldr	r3, [pc, #436]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6c      	ldr	r2, [pc, #432]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xb0>
 80046c4:	4b69      	ldr	r3, [pc, #420]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a68      	ldr	r2, [pc, #416]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b66      	ldr	r3, [pc, #408]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a65      	ldr	r2, [pc, #404]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fe fe60 	bl	80033a8 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fe fe5c 	bl	80033a8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	@ 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e213      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b5b      	ldr	r3, [pc, #364]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xc0>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fe fe4c 	bl	80033a8 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004714:	f7fe fe48 	bl	80033a8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	@ 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1ff      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	4b51      	ldr	r3, [pc, #324]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0xe8>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d063      	beq.n	800480a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004742:	4b4a      	ldr	r3, [pc, #296]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474e:	4b47      	ldr	r3, [pc, #284]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
        || \
 8004756:	2b08      	cmp	r3, #8
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475a:	4b44      	ldr	r3, [pc, #272]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	4b41      	ldr	r3, [pc, #260]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1d3      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4937      	ldr	r1, [pc, #220]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	e03a      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	4b34      	ldr	r3, [pc, #208]	@ (8004870 <HAL_RCC_OscConfig+0x244>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fe fe01 	bl	80033a8 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047aa:	f7fe fdfd 	bl	80033a8 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e1b4      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	4b2b      	ldr	r3, [pc, #172]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c8:	4b28      	ldr	r3, [pc, #160]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4925      	ldr	r1, [pc, #148]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	e015      	b.n	800480a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047de:	4b24      	ldr	r3, [pc, #144]	@ (8004870 <HAL_RCC_OscConfig+0x244>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fe fde0 	bl	80033a8 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ec:	f7fe fddc 	bl	80033a8 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e193      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fe:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d036      	beq.n	8004884 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <HAL_RCC_OscConfig+0x248>)
 8004820:	2201      	movs	r2, #1
 8004822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fe fdc0 	bl	80033a8 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800482c:	f7fe fdbc 	bl	80033a8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e173      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483e:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <HAL_RCC_OscConfig+0x240>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x200>
 800484a:	e01b      	b.n	8004884 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484c:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_RCC_OscConfig+0x248>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fe fda9 	bl	80033a8 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	e00e      	b.n	8004878 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485a:	f7fe fda5 	bl	80033a8 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d907      	bls.n	8004878 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e15c      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
 800486c:	40023800 	.word	0x40023800
 8004870:	42470000 	.word	0x42470000
 8004874:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	4b8a      	ldr	r3, [pc, #552]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 800487a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1ea      	bne.n	800485a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8097 	beq.w	80049c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004896:	4b83      	ldr	r3, [pc, #524]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10f      	bne.n	80048c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	4b7f      	ldr	r3, [pc, #508]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	4a7e      	ldr	r2, [pc, #504]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048b2:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b79      	ldr	r3, [pc, #484]	@ (8004aa8 <HAL_RCC_OscConfig+0x47c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d118      	bne.n	8004900 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ce:	4b76      	ldr	r3, [pc, #472]	@ (8004aa8 <HAL_RCC_OscConfig+0x47c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a75      	ldr	r2, [pc, #468]	@ (8004aa8 <HAL_RCC_OscConfig+0x47c>)
 80048d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048da:	f7fe fd65 	bl	80033a8 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e2:	f7fe fd61 	bl	80033a8 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e118      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	4b6c      	ldr	r3, [pc, #432]	@ (8004aa8 <HAL_RCC_OscConfig+0x47c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d106      	bne.n	8004916 <HAL_RCC_OscConfig+0x2ea>
 8004908:	4b66      	ldr	r3, [pc, #408]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490c:	4a65      	ldr	r2, [pc, #404]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	@ 0x70
 8004914:	e01c      	b.n	8004950 <HAL_RCC_OscConfig+0x324>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b05      	cmp	r3, #5
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0x30c>
 800491e:	4b61      	ldr	r3, [pc, #388]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	4a60      	ldr	r2, [pc, #384]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	6713      	str	r3, [r2, #112]	@ 0x70
 800492a:	4b5e      	ldr	r3, [pc, #376]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 800492c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492e:	4a5d      	ldr	r2, [pc, #372]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6713      	str	r3, [r2, #112]	@ 0x70
 8004936:	e00b      	b.n	8004950 <HAL_RCC_OscConfig+0x324>
 8004938:	4b5a      	ldr	r3, [pc, #360]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493c:	4a59      	ldr	r2, [pc, #356]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 800493e:	f023 0301 	bic.w	r3, r3, #1
 8004942:	6713      	str	r3, [r2, #112]	@ 0x70
 8004944:	4b57      	ldr	r3, [pc, #348]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	4a56      	ldr	r2, [pc, #344]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 800494a:	f023 0304 	bic.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fe fd26 	bl	80033a8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fe fd22 	bl	80033a8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0d7      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ee      	beq.n	8004960 <HAL_RCC_OscConfig+0x334>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fe fd10 	bl	80033a8 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fe fd0c 	bl	80033a8 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e0c1      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a2:	4b40      	ldr	r3, [pc, #256]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ee      	bne.n	800498c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d105      	bne.n	80049c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b4:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	4a3a      	ldr	r2, [pc, #232]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80049ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80ad 	beq.w	8004b24 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ca:	4b36      	ldr	r3, [pc, #216]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d060      	beq.n	8004a98 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d145      	bne.n	8004a6a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b33      	ldr	r3, [pc, #204]	@ (8004aac <HAL_RCC_OscConfig+0x480>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fe fce0 	bl	80033a8 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fe fcdc 	bl	80033a8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e093      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	4b29      	ldr	r3, [pc, #164]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	3b01      	subs	r3, #1
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	491b      	ldr	r1, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <HAL_RCC_OscConfig+0x480>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fe fcb1 	bl	80033a8 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fe fcad 	bl	80033a8 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e064      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x41e>
 8004a68:	e05c      	b.n	8004b24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6a:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <HAL_RCC_OscConfig+0x480>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fe fc9a 	bl	80033a8 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fe fc96 	bl	80033a8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e04d      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_RCC_OscConfig+0x478>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x44c>
 8004a96:	e045      	b.n	8004b24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e040      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8004b30 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d030      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d129      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d122      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d119      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	3b01      	subs	r3, #1
 8004afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d10f      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e041      	b.n	8004bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f839 	bl	8004bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 f9c0 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d001      	beq.n	8004c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e04e      	b.n	8004c9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a23      	ldr	r2, [pc, #140]	@ (8004cac <HAL_TIM_Base_Start_IT+0xc4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c2a:	d01d      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a19      	ldr	r2, [pc, #100]	@ (8004cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x80>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d111      	bne.n	8004c8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d010      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8a:	e007      	b.n	8004c9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40010400 	.word	0x40010400
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40001800 	.word	0x40001800

08004cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0202 	mvn.w	r2, #2
 8004cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8d2 	bl	8004ebc <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f8c4 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8d5 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d020      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01b      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0204 	mvn.w	r2, #4
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8ac 	bl	8004ebc <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f89e 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f8af 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d020      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0208 	mvn.w	r2, #8
 8004d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f886 	bl	8004ebc <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f878 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f889 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d020      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01b      	beq.n	8004e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0210 	mvn.w	r2, #16
 8004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2208      	movs	r2, #8
 8004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f860 	bl	8004ebc <HAL_TIM_IC_CaptureCallback>
 8004dfc:	e005      	b.n	8004e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f852 	bl	8004ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f863 	bl	8004ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d007      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0201 	mvn.w	r2, #1
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fd f892 	bl	8001f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f906 	bl	8005064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f834 	bl	8004ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0220 	mvn.w	r2, #32
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f8d8 	bl	8005050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a46      	ldr	r2, [pc, #280]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f16:	d00f      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a43      	ldr	r2, [pc, #268]	@ (8005028 <TIM_Base_SetConfig+0x130>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a42      	ldr	r2, [pc, #264]	@ (800502c <TIM_Base_SetConfig+0x134>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a41      	ldr	r2, [pc, #260]	@ (8005030 <TIM_Base_SetConfig+0x138>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a40      	ldr	r2, [pc, #256]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d108      	bne.n	8004f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f58:	d027      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <TIM_Base_SetConfig+0x130>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d023      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a31      	ldr	r2, [pc, #196]	@ (800502c <TIM_Base_SetConfig+0x134>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01f      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	@ (8005030 <TIM_Base_SetConfig+0x138>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2f      	ldr	r2, [pc, #188]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d017      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005038 <TIM_Base_SetConfig+0x140>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2d      	ldr	r2, [pc, #180]	@ (800503c <TIM_Base_SetConfig+0x144>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00f      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005040 <TIM_Base_SetConfig+0x148>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2b      	ldr	r2, [pc, #172]	@ (8005044 <TIM_Base_SetConfig+0x14c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d007      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <TIM_Base_SetConfig+0x150>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a29      	ldr	r2, [pc, #164]	@ (800504c <TIM_Base_SetConfig+0x154>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d108      	bne.n	8004fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a10      	ldr	r2, [pc, #64]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a12      	ldr	r2, [pc, #72]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d103      	bne.n	8004ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]
  }
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40010400 	.word	0x40010400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800
 8005044:	40001800 	.word	0x40001800
 8005048:	40001c00 	.word	0x40001c00
 800504c:	40002000 	.word	0x40002000

08005050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e042      	b.n	8005110 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fd fac0 	bl	8002624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	@ 0x24
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 ffc9 	bl	8006054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	@ 0x30
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b20      	cmp	r3, #32
 8005130:	d156      	bne.n	80051e0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_UART_Transmit_DMA+0x26>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e04f      	b.n	80051e2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2221      	movs	r2, #33	@ 0x21
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <HAL_UART_Transmit_DMA+0xd4>)
 8005168:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	4a20      	ldr	r2, [pc, #128]	@ (80051f0 <HAL_UART_Transmit_DMA+0xd8>)
 8005170:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005176:	4a1f      	ldr	r2, [pc, #124]	@ (80051f4 <HAL_UART_Transmit_DMA+0xdc>)
 8005178:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517e:	2200      	movs	r2, #0
 8005180:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800518c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3304      	adds	r3, #4
 8005196:	461a      	mov	r2, r3
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	f7fe faa1 	bl	80036e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3314      	adds	r3, #20
 80051ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	617b      	str	r3, [r7, #20]
   return(result);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3314      	adds	r3, #20
 80051c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80051ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6a39      	ldr	r1, [r7, #32]
 80051ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	e000      	b.n	80051e2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3730      	adds	r7, #48	@ 0x30
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	080058e1 	.word	0x080058e1
 80051f0:	0800597b 	.word	0x0800597b
 80051f4:	08005aff 	.word	0x08005aff

080051f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	d112      	bne.n	8005238 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_Receive_DMA+0x26>
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e00b      	b.n	800523a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	461a      	mov	r2, r3
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fcb0 	bl	8005b94 <UART_Start_Receive_DMA>
 8005234:	4603      	mov	r3, r0
 8005236:	e000      	b.n	800523a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005238:	2302      	movs	r3, #2
  }
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b090      	sub	sp, #64	@ 0x40
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b80      	cmp	r3, #128	@ 0x80
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b21      	cmp	r3, #33	@ 0x21
 800526e:	d128      	bne.n	80052c2 <HAL_UART_DMAStop+0x80>
 8005270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d025      	beq.n	80052c2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3314      	adds	r3, #20
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	623b      	str	r3, [r7, #32]
   return(result);
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005296:	633a      	str	r2, [r7, #48]	@ 0x30
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800529c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fe fa6a 	bl	8003790 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fd03 	bl	8005cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052cc:	2b40      	cmp	r3, #64	@ 0x40
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b22      	cmp	r3, #34	@ 0x22
 80052e2:	d128      	bne.n	8005336 <HAL_UART_DMAStop+0xf4>
 80052e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d025      	beq.n	8005336 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3314      	adds	r3, #20
 80052f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005300:	637b      	str	r3, [r7, #52]	@ 0x34
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800530a:	61fa      	str	r2, [r7, #28]
 800530c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	69b9      	ldr	r1, [r7, #24]
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	617b      	str	r3, [r7, #20]
   return(result);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe fa30 	bl	8003790 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fcf1 	bl	8005d18 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3740      	adds	r7, #64	@ 0x40
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b0ba      	sub	sp, #232	@ 0xe8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005366:	2300      	movs	r3, #0
 8005368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800537e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_UART_IRQHandler+0x66>
 8005392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fd99 	bl	8005ed6 <UART_Receive_IT>
      return;
 80053a4:	e25b      	b.n	800585e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80de 	beq.w	800556c <HAL_UART_IRQHandler+0x22c>
 80053b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80d1 	beq.w	800556c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00b      	beq.n	80053ee <HAL_UART_IRQHandler+0xae>
 80053d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e6:	f043 0201 	orr.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <HAL_UART_IRQHandler+0xd2>
 80053fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	f043 0202 	orr.w	r2, r3, #2
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_UART_IRQHandler+0xf6>
 800541e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	f043 0204 	orr.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d011      	beq.n	8005466 <HAL_UART_IRQHandler+0x126>
 8005442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800544e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800545e:	f043 0208 	orr.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 81f2 	beq.w	8005854 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_UART_IRQHandler+0x14e>
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fd24 	bl	8005ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <HAL_UART_IRQHandler+0x17a>
 80054b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d04f      	beq.n	800555a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc2c 	bl	8005d18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ca:	2b40      	cmp	r3, #64	@ 0x40
 80054cc:	d141      	bne.n	8005552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80054e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3314      	adds	r3, #20
 80054f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80054fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80054fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1d9      	bne.n	80054ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005526:	4a7e      	ldr	r2, [pc, #504]	@ (8005720 <HAL_UART_IRQHandler+0x3e0>)
 8005528:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe f99e 	bl	8003870 <HAL_DMA_Abort_IT>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d016      	beq.n	8005568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005544:	4610      	mov	r0, r2
 8005546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	e00e      	b.n	8005568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f9b2 	bl	80058b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005550:	e00a      	b.n	8005568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f9ae 	bl	80058b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	e006      	b.n	8005568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9aa 	bl	80058b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005566:	e175      	b.n	8005854 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	bf00      	nop
    return;
 800556a:	e173      	b.n	8005854 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005570:	2b01      	cmp	r3, #1
 8005572:	f040 814f 	bne.w	8005814 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8148 	beq.w	8005814 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8141 	beq.w	8005814 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b2:	2b40      	cmp	r3, #64	@ 0x40
 80055b4:	f040 80b6 	bne.w	8005724 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8145 	beq.w	8005858 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055d6:	429a      	cmp	r2, r3
 80055d8:	f080 813e 	bcs.w	8005858 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ee:	f000 8088 	beq.w	8005702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800560c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800561e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800562a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1d9      	bne.n	80055f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800564e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3314      	adds	r3, #20
 800565e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005662:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005666:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800566a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800566e:	e841 2300 	strex	r3, r2, [r1]
 8005672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1e1      	bne.n	800563e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800568a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800568c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800569e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e3      	bne.n	800567a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80056d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d2:	f023 0310 	bic.w	r3, r3, #16
 80056d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80056e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80056e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e3      	bne.n	80056c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe f847 	bl	8003790 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005710:	b29b      	uxth	r3, r3
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	b29b      	uxth	r3, r3
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f8d5 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800571e:	e09b      	b.n	8005858 <HAL_UART_IRQHandler+0x518>
 8005720:	08005ddf 	.word	0x08005ddf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800572c:	b29b      	uxth	r3, r3
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 808e 	beq.w	800585c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8089 	beq.w	800585c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800576e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005770:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800577c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e3      	bne.n	800574a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	623b      	str	r3, [r7, #32]
   return(result);
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3314      	adds	r3, #20
 80057a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ae:	e841 2300 	strex	r3, r2, [r1]
 80057b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1e3      	bne.n	8005782 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	330c      	adds	r3, #12
 80057ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0310 	bic.w	r3, r3, #16
 80057de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80057ec:	61fa      	str	r2, [r7, #28]
 80057ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	69b9      	ldr	r1, [r7, #24]
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	617b      	str	r3, [r7, #20]
   return(result);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e3      	bne.n	80057c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f85b 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005812:	e023      	b.n	800585c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581c:	2b00      	cmp	r3, #0
 800581e:	d009      	beq.n	8005834 <HAL_UART_IRQHandler+0x4f4>
 8005820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 faea 	bl	8005e06 <UART_Transmit_IT>
    return;
 8005832:	e014      	b.n	800585e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <HAL_UART_IRQHandler+0x51e>
 8005840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fb2a 	bl	8005ea6 <UART_EndTransmit_IT>
    return;
 8005852:	e004      	b.n	800585e <HAL_UART_IRQHandler+0x51e>
    return;
 8005854:	bf00      	nop
 8005856:	e002      	b.n	800585e <HAL_UART_IRQHandler+0x51e>
      return;
 8005858:	bf00      	nop
 800585a:	e000      	b.n	800585e <HAL_UART_IRQHandler+0x51e>
      return;
 800585c:	bf00      	nop
  }
}
 800585e:	37e8      	adds	r7, #232	@ 0xe8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b090      	sub	sp, #64	@ 0x40
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d137      	bne.n	800596c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80058fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fe:	2200      	movs	r2, #0
 8005900:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3314      	adds	r3, #20
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	623b      	str	r3, [r7, #32]
   return(result);
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005918:	63bb      	str	r3, [r7, #56]	@ 0x38
 800591a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005922:	633a      	str	r2, [r7, #48]	@ 0x30
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e5      	bne.n	8005902 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	60fb      	str	r3, [r7, #12]
   return(result);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800594c:	637b      	str	r3, [r7, #52]	@ 0x34
 800594e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005956:	61fa      	str	r2, [r7, #28]
 8005958:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	69b9      	ldr	r1, [r7, #24]
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	617b      	str	r3, [r7, #20]
   return(result);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e5      	bne.n	8005936 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800596a:	e002      	b.n	8005972 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800596c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800596e:	f7ff ff79 	bl	8005864 <HAL_UART_TxCpltCallback>
}
 8005972:	bf00      	nop
 8005974:	3740      	adds	r7, #64	@ 0x40
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff ff75 	bl	8005878 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b09c      	sub	sp, #112	@ 0x70
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d172      	bne.n	8005a98 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059b4:	2200      	movs	r2, #0
 80059b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80059d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e5      	bne.n	80059b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3314      	adds	r3, #20
 80059f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a0c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a0e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e5      	bne.n	80059ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3314      	adds	r3, #20
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a36:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a40:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e5      	bne.n	8005a20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d119      	bne.n	8005a98 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0310 	bic.w	r3, r3, #16
 8005a7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a84:	61fa      	str	r2, [r7, #28]
 8005a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	617b      	str	r3, [r7, #20]
   return(result);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e5      	bne.n	8005a64 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d106      	bne.n	8005ab4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005aae:	f7ff ff0b 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ab2:	e002      	b.n	8005aba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005ab4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ab6:	f7ff fee9 	bl	800588c <HAL_UART_RxCpltCallback>
}
 8005aba:	bf00      	nop
 8005abc:	3770      	adds	r7, #112	@ 0x70
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d108      	bne.n	8005af0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff feed 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005aee:	e002      	b.n	8005af6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff fed5 	bl	80058a0 <HAL_UART_RxHalfCpltCallback>
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	2b80      	cmp	r3, #128	@ 0x80
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b21      	cmp	r3, #33	@ 0x21
 8005b30:	d108      	bne.n	8005b44 <UART_DMAError+0x46>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005b3e:	68b8      	ldr	r0, [r7, #8]
 8005b40:	f000 f8c2 	bl	8005cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4e:	2b40      	cmp	r3, #64	@ 0x40
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b22      	cmp	r3, #34	@ 0x22
 8005b64:	d108      	bne.n	8005b78 <UART_DMAError+0x7a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005b72:	68b8      	ldr	r0, [r7, #8]
 8005b74:	f000 f8d0 	bl	8005d18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7c:	f043 0210 	orr.w	r2, r3, #16
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b84:	68b8      	ldr	r0, [r7, #8]
 8005b86:	f7ff fe95 	bl	80058b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b098      	sub	sp, #96	@ 0x60
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2222      	movs	r2, #34	@ 0x22
 8005bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8005cbc <UART_Start_Receive_DMA+0x128>)
 8005bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc0 <UART_Start_Receive_DMA+0x12c>)
 8005bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8005cc4 <UART_Start_Receive_DMA+0x130>)
 8005bd2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd8:	2200      	movs	r2, #0
 8005bda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005bdc:	f107 0308 	add.w	r3, r7, #8
 8005be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	f7fd fd74 	bl	80036e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d019      	beq.n	8005c4a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005c3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e5      	bne.n	8005c16 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c6a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e5      	bne.n	8005c4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3314      	adds	r3, #20
 8005c84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c94:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca2:	6a39      	ldr	r1, [r7, #32]
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca6:	e841 2300 	strex	r3, r2, [r1]
 8005caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e5      	bne.n	8005c7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3760      	adds	r7, #96	@ 0x60
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	08005997 	.word	0x08005997
 8005cc0:	08005ac3 	.word	0x08005ac3
 8005cc4:	08005aff 	.word	0x08005aff

08005cc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b089      	sub	sp, #36	@ 0x24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	61ba      	str	r2, [r7, #24]
 8005cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005d0c:	bf00      	nop
 8005d0e:	3724      	adds	r7, #36	@ 0x24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b095      	sub	sp, #84	@ 0x54
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d40:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d119      	bne.n	8005dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005db0:	61ba      	str	r2, [r7, #24]
 8005db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db4:	6979      	ldr	r1, [r7, #20]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	e841 2300 	strex	r3, r2, [r1]
 8005dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1e5      	bne.n	8005d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005dd2:	bf00      	nop
 8005dd4:	3754      	adds	r7, #84	@ 0x54
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7ff fd5b 	bl	80058b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b21      	cmp	r3, #33	@ 0x21
 8005e18:	d13e      	bne.n	8005e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e22:	d114      	bne.n	8005e4e <UART_Transmit_IT+0x48>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d110      	bne.n	8005e4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	621a      	str	r2, [r3, #32]
 8005e4c:	e008      	b.n	8005e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	1c59      	adds	r1, r3, #1
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6211      	str	r1, [r2, #32]
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10f      	bne.n	8005e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e000      	b.n	8005e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
  }
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff fccc 	bl	8005864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b08c      	sub	sp, #48	@ 0x30
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b22      	cmp	r3, #34	@ 0x22
 8005ee8:	f040 80ae 	bne.w	8006048 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef4:	d117      	bne.n	8005f26 <UART_Receive_IT+0x50>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d113      	bne.n	8005f26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1e:	1c9a      	adds	r2, r3, #2
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f24:	e026      	b.n	8005f74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f38:	d007      	beq.n	8005f4a <UART_Receive_IT+0x74>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <UART_Receive_IT+0x82>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	e008      	b.n	8005f6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4619      	mov	r1, r3
 8005f82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d15d      	bne.n	8006044 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0220 	bic.w	r2, r2, #32
 8005f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d135      	bne.n	800603a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f023 0310 	bic.w	r3, r3, #16
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff4:	623a      	str	r2, [r7, #32]
 8005ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	69f9      	ldr	r1, [r7, #28]
 8005ffa:	6a3a      	ldr	r2, [r7, #32]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	61bb      	str	r3, [r7, #24]
   return(result);
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b10      	cmp	r3, #16
 8006014:	d10a      	bne.n	800602c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff fc48 	bl	80058c8 <HAL_UARTEx_RxEventCallback>
 8006038:	e002      	b.n	8006040 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fc26 	bl	800588c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e002      	b.n	800604a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3730      	adds	r7, #48	@ 0x30
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006058:	b0c0      	sub	sp, #256	@ 0x100
 800605a:	af00      	add	r7, sp, #0
 800605c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	68d9      	ldr	r1, [r3, #12]
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	ea40 0301 	orr.w	r3, r0, r1
 800607c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	431a      	orrs	r2, r3
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	431a      	orrs	r2, r3
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060ac:	f021 010c 	bic.w	r1, r1, #12
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060ba:	430b      	orrs	r3, r1
 80060bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ce:	6999      	ldr	r1, [r3, #24]
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	ea40 0301 	orr.w	r3, r0, r1
 80060da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006320 <UART_SetConfig+0x2cc>)
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d005      	beq.n	80060f4 <UART_SetConfig+0xa0>
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006324 <UART_SetConfig+0x2d0>)
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d104      	bne.n	80060fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fe fa54 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 80060f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060fc:	e003      	b.n	8006106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060fe:	f7fe fa3b 	bl	8004578 <HAL_RCC_GetPCLK1Freq>
 8006102:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006110:	f040 810c 	bne.w	800632c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006118:	2200      	movs	r2, #0
 800611a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800611e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006126:	4622      	mov	r2, r4
 8006128:	462b      	mov	r3, r5
 800612a:	1891      	adds	r1, r2, r2
 800612c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800612e:	415b      	adcs	r3, r3
 8006130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006136:	4621      	mov	r1, r4
 8006138:	eb12 0801 	adds.w	r8, r2, r1
 800613c:	4629      	mov	r1, r5
 800613e:	eb43 0901 	adc.w	r9, r3, r1
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800614e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006156:	4690      	mov	r8, r2
 8006158:	4699      	mov	r9, r3
 800615a:	4623      	mov	r3, r4
 800615c:	eb18 0303 	adds.w	r3, r8, r3
 8006160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006164:	462b      	mov	r3, r5
 8006166:	eb49 0303 	adc.w	r3, r9, r3
 800616a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800617a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800617e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006182:	460b      	mov	r3, r1
 8006184:	18db      	adds	r3, r3, r3
 8006186:	653b      	str	r3, [r7, #80]	@ 0x50
 8006188:	4613      	mov	r3, r2
 800618a:	eb42 0303 	adc.w	r3, r2, r3
 800618e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006198:	f7fa fd90 	bl	8000cbc <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4b61      	ldr	r3, [pc, #388]	@ (8006328 <UART_SetConfig+0x2d4>)
 80061a2:	fba3 2302 	umull	r2, r3, r3, r2
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	011c      	lsls	r4, r3, #4
 80061aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	1891      	adds	r1, r2, r2
 80061c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061c4:	415b      	adcs	r3, r3
 80061c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061cc:	4641      	mov	r1, r8
 80061ce:	eb12 0a01 	adds.w	sl, r2, r1
 80061d2:	4649      	mov	r1, r9
 80061d4:	eb43 0b01 	adc.w	fp, r3, r1
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ec:	4692      	mov	sl, r2
 80061ee:	469b      	mov	fp, r3
 80061f0:	4643      	mov	r3, r8
 80061f2:	eb1a 0303 	adds.w	r3, sl, r3
 80061f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061fa:	464b      	mov	r3, r9
 80061fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006200:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006210:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006218:	460b      	mov	r3, r1
 800621a:	18db      	adds	r3, r3, r3
 800621c:	643b      	str	r3, [r7, #64]	@ 0x40
 800621e:	4613      	mov	r3, r2
 8006220:	eb42 0303 	adc.w	r3, r2, r3
 8006224:	647b      	str	r3, [r7, #68]	@ 0x44
 8006226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800622a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800622e:	f7fa fd45 	bl	8000cbc <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4611      	mov	r1, r2
 8006238:	4b3b      	ldr	r3, [pc, #236]	@ (8006328 <UART_SetConfig+0x2d4>)
 800623a:	fba3 2301 	umull	r2, r3, r3, r1
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2264      	movs	r2, #100	@ 0x64
 8006242:	fb02 f303 	mul.w	r3, r2, r3
 8006246:	1acb      	subs	r3, r1, r3
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800624e:	4b36      	ldr	r3, [pc, #216]	@ (8006328 <UART_SetConfig+0x2d4>)
 8006250:	fba3 2302 	umull	r2, r3, r3, r2
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800625c:	441c      	add	r4, r3
 800625e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006268:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800626c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006270:	4642      	mov	r2, r8
 8006272:	464b      	mov	r3, r9
 8006274:	1891      	adds	r1, r2, r2
 8006276:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006278:	415b      	adcs	r3, r3
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800627c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006280:	4641      	mov	r1, r8
 8006282:	1851      	adds	r1, r2, r1
 8006284:	6339      	str	r1, [r7, #48]	@ 0x30
 8006286:	4649      	mov	r1, r9
 8006288:	414b      	adcs	r3, r1
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006298:	4659      	mov	r1, fp
 800629a:	00cb      	lsls	r3, r1, #3
 800629c:	4651      	mov	r1, sl
 800629e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a2:	4651      	mov	r1, sl
 80062a4:	00ca      	lsls	r2, r1, #3
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	4642      	mov	r2, r8
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062b4:	464b      	mov	r3, r9
 80062b6:	460a      	mov	r2, r1
 80062b8:	eb42 0303 	adc.w	r3, r2, r3
 80062bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062d4:	460b      	mov	r3, r1
 80062d6:	18db      	adds	r3, r3, r3
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062da:	4613      	mov	r3, r2
 80062dc:	eb42 0303 	adc.w	r3, r2, r3
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062ea:	f7fa fce7 	bl	8000cbc <__aeabi_uldivmod>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006328 <UART_SetConfig+0x2d4>)
 80062f4:	fba3 1302 	umull	r1, r3, r3, r2
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	2164      	movs	r1, #100	@ 0x64
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	3332      	adds	r3, #50	@ 0x32
 8006306:	4a08      	ldr	r2, [pc, #32]	@ (8006328 <UART_SetConfig+0x2d4>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	f003 0207 	and.w	r2, r3, #7
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4422      	add	r2, r4
 800631a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800631c:	e106      	b.n	800652c <UART_SetConfig+0x4d8>
 800631e:	bf00      	nop
 8006320:	40011000 	.word	0x40011000
 8006324:	40011400 	.word	0x40011400
 8006328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800632c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006330:	2200      	movs	r2, #0
 8006332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006336:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800633a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800633e:	4642      	mov	r2, r8
 8006340:	464b      	mov	r3, r9
 8006342:	1891      	adds	r1, r2, r2
 8006344:	6239      	str	r1, [r7, #32]
 8006346:	415b      	adcs	r3, r3
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24
 800634a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800634e:	4641      	mov	r1, r8
 8006350:	1854      	adds	r4, r2, r1
 8006352:	4649      	mov	r1, r9
 8006354:	eb43 0501 	adc.w	r5, r3, r1
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	00eb      	lsls	r3, r5, #3
 8006362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006366:	00e2      	lsls	r2, r4, #3
 8006368:	4614      	mov	r4, r2
 800636a:	461d      	mov	r5, r3
 800636c:	4643      	mov	r3, r8
 800636e:	18e3      	adds	r3, r4, r3
 8006370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006374:	464b      	mov	r3, r9
 8006376:	eb45 0303 	adc.w	r3, r5, r3
 800637a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800638a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800639a:	4629      	mov	r1, r5
 800639c:	008b      	lsls	r3, r1, #2
 800639e:	4621      	mov	r1, r4
 80063a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a4:	4621      	mov	r1, r4
 80063a6:	008a      	lsls	r2, r1, #2
 80063a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063ac:	f7fa fc86 	bl	8000cbc <__aeabi_uldivmod>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4b60      	ldr	r3, [pc, #384]	@ (8006538 <UART_SetConfig+0x4e4>)
 80063b6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	011c      	lsls	r4, r3, #4
 80063be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063d0:	4642      	mov	r2, r8
 80063d2:	464b      	mov	r3, r9
 80063d4:	1891      	adds	r1, r2, r2
 80063d6:	61b9      	str	r1, [r7, #24]
 80063d8:	415b      	adcs	r3, r3
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e0:	4641      	mov	r1, r8
 80063e2:	1851      	adds	r1, r2, r1
 80063e4:	6139      	str	r1, [r7, #16]
 80063e6:	4649      	mov	r1, r9
 80063e8:	414b      	adcs	r3, r1
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f8:	4659      	mov	r1, fp
 80063fa:	00cb      	lsls	r3, r1, #3
 80063fc:	4651      	mov	r1, sl
 80063fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006402:	4651      	mov	r1, sl
 8006404:	00ca      	lsls	r2, r1, #3
 8006406:	4610      	mov	r0, r2
 8006408:	4619      	mov	r1, r3
 800640a:	4603      	mov	r3, r0
 800640c:	4642      	mov	r2, r8
 800640e:	189b      	adds	r3, r3, r2
 8006410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006414:	464b      	mov	r3, r9
 8006416:	460a      	mov	r2, r1
 8006418:	eb42 0303 	adc.w	r3, r2, r3
 800641c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	67bb      	str	r3, [r7, #120]	@ 0x78
 800642a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006438:	4649      	mov	r1, r9
 800643a:	008b      	lsls	r3, r1, #2
 800643c:	4641      	mov	r1, r8
 800643e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006442:	4641      	mov	r1, r8
 8006444:	008a      	lsls	r2, r1, #2
 8006446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800644a:	f7fa fc37 	bl	8000cbc <__aeabi_uldivmod>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4611      	mov	r1, r2
 8006454:	4b38      	ldr	r3, [pc, #224]	@ (8006538 <UART_SetConfig+0x4e4>)
 8006456:	fba3 2301 	umull	r2, r3, r3, r1
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	2264      	movs	r2, #100	@ 0x64
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	1acb      	subs	r3, r1, r3
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	3332      	adds	r3, #50	@ 0x32
 8006468:	4a33      	ldr	r2, [pc, #204]	@ (8006538 <UART_SetConfig+0x4e4>)
 800646a:	fba2 2303 	umull	r2, r3, r2, r3
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006474:	441c      	add	r4, r3
 8006476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647a:	2200      	movs	r2, #0
 800647c:	673b      	str	r3, [r7, #112]	@ 0x70
 800647e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006480:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	1891      	adds	r1, r2, r2
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	415b      	adcs	r3, r3
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006494:	4641      	mov	r1, r8
 8006496:	1851      	adds	r1, r2, r1
 8006498:	6039      	str	r1, [r7, #0]
 800649a:	4649      	mov	r1, r9
 800649c:	414b      	adcs	r3, r1
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064ac:	4659      	mov	r1, fp
 80064ae:	00cb      	lsls	r3, r1, #3
 80064b0:	4651      	mov	r1, sl
 80064b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b6:	4651      	mov	r1, sl
 80064b8:	00ca      	lsls	r2, r1, #3
 80064ba:	4610      	mov	r0, r2
 80064bc:	4619      	mov	r1, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	4642      	mov	r2, r8
 80064c2:	189b      	adds	r3, r3, r2
 80064c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064c6:	464b      	mov	r3, r9
 80064c8:	460a      	mov	r2, r1
 80064ca:	eb42 0303 	adc.w	r3, r2, r3
 80064ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80064da:	667a      	str	r2, [r7, #100]	@ 0x64
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064e8:	4649      	mov	r1, r9
 80064ea:	008b      	lsls	r3, r1, #2
 80064ec:	4641      	mov	r1, r8
 80064ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064f2:	4641      	mov	r1, r8
 80064f4:	008a      	lsls	r2, r1, #2
 80064f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064fa:	f7fa fbdf 	bl	8000cbc <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <UART_SetConfig+0x4e4>)
 8006504:	fba3 1302 	umull	r1, r3, r3, r2
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	2164      	movs	r1, #100	@ 0x64
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	3332      	adds	r3, #50	@ 0x32
 8006516:	4a08      	ldr	r2, [pc, #32]	@ (8006538 <UART_SetConfig+0x4e4>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f003 020f 	and.w	r2, r3, #15
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4422      	add	r2, r4
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	bf00      	nop
 800652e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006532:	46bd      	mov	sp, r7
 8006534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006538:	51eb851f 	.word	0x51eb851f

0800653c <__NVIC_SetPriority>:
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	6039      	str	r1, [r7, #0]
 8006546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654c:	2b00      	cmp	r3, #0
 800654e:	db0a      	blt.n	8006566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	490c      	ldr	r1, [pc, #48]	@ (8006588 <__NVIC_SetPriority+0x4c>)
 8006556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655a:	0112      	lsls	r2, r2, #4
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	440b      	add	r3, r1
 8006560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006564:	e00a      	b.n	800657c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4908      	ldr	r1, [pc, #32]	@ (800658c <__NVIC_SetPriority+0x50>)
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	3b04      	subs	r3, #4
 8006574:	0112      	lsls	r2, r2, #4
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	440b      	add	r3, r1
 800657a:	761a      	strb	r2, [r3, #24]
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	e000e100 	.word	0xe000e100
 800658c:	e000ed00 	.word	0xe000ed00

08006590 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <SysTick_Handler+0x1c>)
 8006596:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006598:	f001 fd40 	bl	800801c <xTaskGetSchedulerState>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d001      	beq.n	80065a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80065a2:	f002 fb39 	bl	8008c18 <xPortSysTickHandler>
  }
}
 80065a6:	bf00      	nop
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	e000e010 	.word	0xe000e010

080065b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80065b4:	2100      	movs	r1, #0
 80065b6:	f06f 0004 	mvn.w	r0, #4
 80065ba:	f7ff ffbf 	bl	800653c <__NVIC_SetPriority>
#endif
}
 80065be:	bf00      	nop
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ca:	f3ef 8305 	mrs	r3, IPSR
 80065ce:	603b      	str	r3, [r7, #0]
  return(result);
 80065d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80065d6:	f06f 0305 	mvn.w	r3, #5
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	e00c      	b.n	80065f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065de:	4b0a      	ldr	r3, [pc, #40]	@ (8006608 <osKernelInitialize+0x44>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80065e6:	4b08      	ldr	r3, [pc, #32]	@ (8006608 <osKernelInitialize+0x44>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	607b      	str	r3, [r7, #4]
 80065f0:	e002      	b.n	80065f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065f8:	687b      	ldr	r3, [r7, #4]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	370c      	adds	r7, #12
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	200087b0 	.word	0x200087b0

0800660c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006612:	f3ef 8305 	mrs	r3, IPSR
 8006616:	603b      	str	r3, [r7, #0]
  return(result);
 8006618:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <osKernelStart+0x1a>
    stat = osErrorISR;
 800661e:	f06f 0305 	mvn.w	r3, #5
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	e010      	b.n	8006648 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006626:	4b0b      	ldr	r3, [pc, #44]	@ (8006654 <osKernelStart+0x48>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d109      	bne.n	8006642 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800662e:	f7ff ffbf 	bl	80065b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006632:	4b08      	ldr	r3, [pc, #32]	@ (8006654 <osKernelStart+0x48>)
 8006634:	2202      	movs	r2, #2
 8006636:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006638:	f001 f87a 	bl	8007730 <vTaskStartScheduler>
      stat = osOK;
 800663c:	2300      	movs	r3, #0
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	e002      	b.n	8006648 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006648:	687b      	ldr	r3, [r7, #4]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	200087b0 	.word	0x200087b0

08006658 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	@ 0x38
 800665c:	af04      	add	r7, sp, #16
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006668:	f3ef 8305 	mrs	r3, IPSR
 800666c:	617b      	str	r3, [r7, #20]
  return(result);
 800666e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006670:	2b00      	cmp	r3, #0
 8006672:	d17e      	bne.n	8006772 <osThreadNew+0x11a>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d07b      	beq.n	8006772 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800667a:	2380      	movs	r3, #128	@ 0x80
 800667c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800667e:	2318      	movs	r3, #24
 8006680:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800668a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d045      	beq.n	800671e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <osThreadNew+0x48>
        name = attr->name;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <osThreadNew+0x6e>
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b38      	cmp	r3, #56	@ 0x38
 80066b8:	d805      	bhi.n	80066c6 <osThreadNew+0x6e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <osThreadNew+0x72>
        return (NULL);
 80066c6:	2300      	movs	r3, #0
 80066c8:	e054      	b.n	8006774 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	089b      	lsrs	r3, r3, #2
 80066d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <osThreadNew+0xa8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	2b5b      	cmp	r3, #91	@ 0x5b
 80066e8:	d90a      	bls.n	8006700 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d006      	beq.n	8006700 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <osThreadNew+0xa8>
        mem = 1;
 80066fa:	2301      	movs	r3, #1
 80066fc:	61bb      	str	r3, [r7, #24]
 80066fe:	e010      	b.n	8006722 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10c      	bne.n	8006722 <osThreadNew+0xca>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d108      	bne.n	8006722 <osThreadNew+0xca>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <osThreadNew+0xca>
          mem = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	e001      	b.n	8006722 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d110      	bne.n	800674a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006730:	9202      	str	r2, [sp, #8]
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6a3a      	ldr	r2, [r7, #32]
 800673c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fe1a 	bl	8007378 <xTaskCreateStatic>
 8006744:	4603      	mov	r3, r0
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	e013      	b.n	8006772 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d110      	bne.n	8006772 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	b29a      	uxth	r2, r3
 8006754:	f107 0310 	add.w	r3, r7, #16
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fe68 	bl	8007438 <xTaskCreate>
 8006768:	4603      	mov	r3, r0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d001      	beq.n	8006772 <osThreadNew+0x11a>
            hTask = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006772:	693b      	ldr	r3, [r7, #16]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3728      	adds	r7, #40	@ 0x28
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006784:	f3ef 8305 	mrs	r3, IPSR
 8006788:	60bb      	str	r3, [r7, #8]
  return(result);
 800678a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <osDelay+0x1c>
    stat = osErrorISR;
 8006790:	f06f 0305 	mvn.w	r3, #5
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e007      	b.n	80067a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 ff8e 	bl	80076c4 <vTaskDelay>
    }
  }

  return (stat);
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a07      	ldr	r2, [pc, #28]	@ (80067e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80067c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4a06      	ldr	r2, [pc, #24]	@ (80067e4 <vApplicationGetIdleTaskMemory+0x30>)
 80067ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2280      	movs	r2, #128	@ 0x80
 80067d0:	601a      	str	r2, [r3, #0]
}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	200087b4 	.word	0x200087b4
 80067e4:	20008810 	.word	0x20008810

080067e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4a07      	ldr	r2, [pc, #28]	@ (8006814 <vApplicationGetTimerTaskMemory+0x2c>)
 80067f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4a06      	ldr	r2, [pc, #24]	@ (8006818 <vApplicationGetTimerTaskMemory+0x30>)
 80067fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006806:	601a      	str	r2, [r3, #0]
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20008a10 	.word	0x20008a10
 8006818:	20008a6c 	.word	0x20008a6c

0800681c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f103 0208 	add.w	r2, r3, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f103 0208 	add.w	r2, r3, #8
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f103 0208 	add.w	r2, r3, #8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068d4:	d103      	bne.n	80068de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e00c      	b.n	80068f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3308      	adds	r3, #8
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e002      	b.n	80068ec <vListInsert+0x2e>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d2f6      	bcs.n	80068e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6892      	ldr	r2, [r2, #8]
 8006946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6852      	ldr	r2, [r2, #4]
 8006950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d103      	bne.n	8006964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	1e5a      	subs	r2, r3, #1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10b      	bne.n	80069b0 <xQueueGenericReset+0x2c>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60bb      	str	r3, [r7, #8]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069b0:	f002 f8a2 	bl	8008af8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	441a      	add	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e0:	3b01      	subs	r3, #1
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069e6:	fb01 f303 	mul.w	r3, r1, r3
 80069ea:	441a      	add	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	22ff      	movs	r2, #255	@ 0xff
 80069f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	22ff      	movs	r2, #255	@ 0xff
 80069fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d114      	bne.n	8006a30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01a      	beq.n	8006a44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3310      	adds	r3, #16
 8006a12:	4618      	mov	r0, r3
 8006a14:	f001 f91a 	bl	8007c4c <xTaskRemoveFromEventList>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d012      	beq.n	8006a44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <xQueueGenericReset+0xd0>)
 8006a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	e009      	b.n	8006a44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3310      	adds	r3, #16
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff fef1 	bl	800681c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3324      	adds	r3, #36	@ 0x24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff feec 	bl	800681c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a44:	f002 f88a 	bl	8008b5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a48:	2301      	movs	r3, #1
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	e000ed04 	.word	0xe000ed04

08006a58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08e      	sub	sp, #56	@ 0x38
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10b      	bne.n	8006a84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <xQueueGenericCreateStatic+0x56>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <xQueueGenericCreateStatic+0x5a>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <xQueueGenericCreateStatic+0x5c>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10b      	bne.n	8006ad0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	623b      	str	r3, [r7, #32]
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	e7fd      	b.n	8006acc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d102      	bne.n	8006adc <xQueueGenericCreateStatic+0x84>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <xQueueGenericCreateStatic+0x88>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <xQueueGenericCreateStatic+0x8a>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	61fb      	str	r3, [r7, #28]
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	e7fd      	b.n	8006afa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006afe:	2350      	movs	r3, #80	@ 0x50
 8006b00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b50      	cmp	r3, #80	@ 0x50
 8006b06:	d00b      	beq.n	8006b20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	61bb      	str	r3, [r7, #24]
}
 8006b1a:	bf00      	nop
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00d      	beq.n	8006b48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f805 	bl	8006b52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3730      	adds	r7, #48	@ 0x30
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d103      	bne.n	8006b6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e002      	b.n	8006b74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b80:	2101      	movs	r1, #1
 8006b82:	69b8      	ldr	r0, [r7, #24]
 8006b84:	f7ff fefe 	bl	8006984 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	78fa      	ldrb	r2, [r7, #3]
 8006b8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08e      	sub	sp, #56	@ 0x38
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10b      	bne.n	8006bcc <xQueueGenericSend+0x34>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bc6:	bf00      	nop
 8006bc8:	bf00      	nop
 8006bca:	e7fd      	b.n	8006bc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <xQueueGenericSend+0x42>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <xQueueGenericSend+0x46>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <xQueueGenericSend+0x48>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <xQueueGenericSend+0x64>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d103      	bne.n	8006c0a <xQueueGenericSend+0x72>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <xQueueGenericSend+0x76>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <xQueueGenericSend+0x78>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <xQueueGenericSend+0x94>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	623b      	str	r3, [r7, #32]
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	e7fd      	b.n	8006c28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c2c:	f001 f9f6 	bl	800801c <xTaskGetSchedulerState>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <xQueueGenericSend+0xa4>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <xQueueGenericSend+0xa8>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <xQueueGenericSend+0xaa>
 8006c40:	2300      	movs	r3, #0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10b      	bne.n	8006c5e <xQueueGenericSend+0xc6>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	61fb      	str	r3, [r7, #28]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c5e:	f001 ff4b 	bl	8008af8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d302      	bcc.n	8006c74 <xQueueGenericSend+0xdc>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d129      	bne.n	8006cc8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c7a:	f000 fa0f 	bl	800709c <prvCopyDataToQueue>
 8006c7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d010      	beq.n	8006caa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	3324      	adds	r3, #36	@ 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 ffdd 	bl	8007c4c <xTaskRemoveFromEventList>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d013      	beq.n	8006cc0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c98:	4b3f      	ldr	r3, [pc, #252]	@ (8006d98 <xQueueGenericSend+0x200>)
 8006c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	e00a      	b.n	8006cc0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cb0:	4b39      	ldr	r3, [pc, #228]	@ (8006d98 <xQueueGenericSend+0x200>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006cc0:	f001 ff4c 	bl	8008b5c <vPortExitCritical>
				return pdPASS;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e063      	b.n	8006d90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cce:	f001 ff45 	bl	8008b5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e05c      	b.n	8006d90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d106      	bne.n	8006cea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cdc:	f107 0314 	add.w	r3, r7, #20
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f001 f83f 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cea:	f001 ff37 	bl	8008b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cee:	f000 fd87 	bl	8007800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cf2:	f001 ff01 	bl	8008af8 <vPortEnterCritical>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d02:	d103      	bne.n	8006d0c <xQueueGenericSend+0x174>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSend+0x18a>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d22:	f001 ff1b 	bl	8008b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d26:	1d3a      	adds	r2, r7, #4
 8006d28:	f107 0314 	add.w	r3, r7, #20
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 f82e 	bl	8007d90 <xTaskCheckForTimeOut>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d124      	bne.n	8006d84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d3c:	f000 faa6 	bl	800728c <prvIsQueueFull>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d018      	beq.n	8006d78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	3310      	adds	r3, #16
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 ff2a 	bl	8007ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d56:	f000 fa31 	bl	80071bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d5a:	f000 fd5f 	bl	800781c <xTaskResumeAll>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f af7c 	bne.w	8006c5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006d66:	4b0c      	ldr	r3, [pc, #48]	@ (8006d98 <xQueueGenericSend+0x200>)
 8006d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	e772      	b.n	8006c5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d7a:	f000 fa1f 	bl	80071bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d7e:	f000 fd4d 	bl	800781c <xTaskResumeAll>
 8006d82:	e76c      	b.n	8006c5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d86:	f000 fa19 	bl	80071bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d8a:	f000 fd47 	bl	800781c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3738      	adds	r7, #56	@ 0x38
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b090      	sub	sp, #64	@ 0x40
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006dc6:	bf00      	nop
 8006dc8:	bf00      	nop
 8006dca:	e7fd      	b.n	8006dc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <xQueueGenericSendFromISR+0x3e>
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <xQueueGenericSendFromISR+0x42>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <xQueueGenericSendFromISR+0x44>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
 8006dfa:	e7fd      	b.n	8006df8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d103      	bne.n	8006e0a <xQueueGenericSendFromISR+0x6e>
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d101      	bne.n	8006e0e <xQueueGenericSendFromISR+0x72>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <xQueueGenericSendFromISR+0x74>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10b      	bne.n	8006e2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	623b      	str	r3, [r7, #32]
}
 8006e26:	bf00      	nop
 8006e28:	bf00      	nop
 8006e2a:	e7fd      	b.n	8006e28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e2c:	f001 ff44 	bl	8008cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e30:	f3ef 8211 	mrs	r2, BASEPRI
 8006e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d302      	bcc.n	8006e5e <xQueueGenericSendFromISR+0xc2>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d12f      	bne.n	8006ebe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e74:	f000 f912 	bl	800709c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e80:	d112      	bne.n	8006ea8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d016      	beq.n	8006eb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	3324      	adds	r3, #36	@ 0x24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fedc 	bl	8007c4c <xTaskRemoveFromEventList>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00e      	beq.n	8006eb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	e007      	b.n	8006eb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ea8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006eac:	3301      	adds	r3, #1
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	b25a      	sxtb	r2, r3
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006ebc:	e001      	b.n	8006ec2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ecc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3740      	adds	r7, #64	@ 0x40
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08c      	sub	sp, #48	@ 0x30
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <xQueueReceive+0x32>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	623b      	str	r3, [r7, #32]
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	e7fd      	b.n	8006f06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d103      	bne.n	8006f18 <xQueueReceive+0x40>
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <xQueueReceive+0x44>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <xQueueReceive+0x46>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10b      	bne.n	8006f3a <xQueueReceive+0x62>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	61fb      	str	r3, [r7, #28]
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	e7fd      	b.n	8006f36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f3a:	f001 f86f 	bl	800801c <xTaskGetSchedulerState>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <xQueueReceive+0x72>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <xQueueReceive+0x76>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <xQueueReceive+0x78>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <xQueueReceive+0x94>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	61bb      	str	r3, [r7, #24]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f6c:	f001 fdc4 	bl	8008af8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01f      	beq.n	8006fbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f80:	f000 f8f6 	bl	8007170 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	1e5a      	subs	r2, r3, #1
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00f      	beq.n	8006fb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f96:	3310      	adds	r3, #16
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fe57 	bl	8007c4c <xTaskRemoveFromEventList>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8007098 <xQueueReceive+0x1c0>)
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fb4:	f001 fdd2 	bl	8008b5c <vPortExitCritical>
				return pdPASS;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e069      	b.n	8007090 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d103      	bne.n	8006fca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fc2:	f001 fdcb 	bl	8008b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e062      	b.n	8007090 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd0:	f107 0310 	add.w	r3, r7, #16
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fec5 	bl	8007d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fde:	f001 fdbd 	bl	8008b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fe2:	f000 fc0d 	bl	8007800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fe6:	f001 fd87 	bl	8008af8 <vPortEnterCritical>
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ff0:	b25b      	sxtb	r3, r3
 8006ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ff6:	d103      	bne.n	8007000 <xQueueReceive+0x128>
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007006:	b25b      	sxtb	r3, r3
 8007008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800700c:	d103      	bne.n	8007016 <xQueueReceive+0x13e>
 800700e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007016:	f001 fda1 	bl	8008b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800701a:	1d3a      	adds	r2, r7, #4
 800701c:	f107 0310 	add.w	r3, r7, #16
 8007020:	4611      	mov	r1, r2
 8007022:	4618      	mov	r0, r3
 8007024:	f000 feb4 	bl	8007d90 <xTaskCheckForTimeOut>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d123      	bne.n	8007076 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800702e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007030:	f000 f916 	bl	8007260 <prvIsQueueEmpty>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d017      	beq.n	800706a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800703a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703c:	3324      	adds	r3, #36	@ 0x24
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	4611      	mov	r1, r2
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fdb0 	bl	8007ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800704a:	f000 f8b7 	bl	80071bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800704e:	f000 fbe5 	bl	800781c <xTaskResumeAll>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d189      	bne.n	8006f6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007058:	4b0f      	ldr	r3, [pc, #60]	@ (8007098 <xQueueReceive+0x1c0>)
 800705a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	e780      	b.n	8006f6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800706a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800706c:	f000 f8a6 	bl	80071bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007070:	f000 fbd4 	bl	800781c <xTaskResumeAll>
 8007074:	e77a      	b.n	8006f6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007078:	f000 f8a0 	bl	80071bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800707c:	f000 fbce 	bl	800781c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007082:	f000 f8ed 	bl	8007260 <prvIsQueueEmpty>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	f43f af6f 	beq.w	8006f6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800708e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007090:	4618      	mov	r0, r3
 8007092:	3730      	adds	r7, #48	@ 0x30
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10d      	bne.n	80070d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d14d      	bne.n	800715e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 ffc6 	bl	8008058 <xTaskPriorityDisinherit>
 80070cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	609a      	str	r2, [r3, #8]
 80070d4:	e043      	b.n	800715e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d119      	bne.n	8007110 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6858      	ldr	r0, [r3, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e4:	461a      	mov	r2, r3
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	f012 fae9 	bl	80196be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f4:	441a      	add	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	429a      	cmp	r2, r3
 8007104:	d32b      	bcc.n	800715e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	e026      	b.n	800715e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68d8      	ldr	r0, [r3, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	461a      	mov	r2, r3
 800711a:	68b9      	ldr	r1, [r7, #8]
 800711c:	f012 facf 	bl	80196be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007128:	425b      	negs	r3, r3
 800712a:	441a      	add	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d207      	bcs.n	800714c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007144:	425b      	negs	r3, r3
 8007146:	441a      	add	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d105      	bne.n	800715e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	3b01      	subs	r3, #1
 800715c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007166:	697b      	ldr	r3, [r7, #20]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d018      	beq.n	80071b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	441a      	add	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	d303      	bcc.n	80071a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68d9      	ldr	r1, [r3, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ac:	461a      	mov	r2, r3
 80071ae:	6838      	ldr	r0, [r7, #0]
 80071b0:	f012 fa85 	bl	80196be <memcpy>
	}
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071c4:	f001 fc98 	bl	8008af8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d0:	e011      	b.n	80071f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d012      	beq.n	8007200 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3324      	adds	r3, #36	@ 0x24
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fd34 	bl	8007c4c <xTaskRemoveFromEventList>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071ea:	f000 fe35 	bl	8007e58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dce9      	bgt.n	80071d2 <prvUnlockQueue+0x16>
 80071fe:	e000      	b.n	8007202 <prvUnlockQueue+0x46>
					break;
 8007200:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	22ff      	movs	r2, #255	@ 0xff
 8007206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800720a:	f001 fca7 	bl	8008b5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800720e:	f001 fc73 	bl	8008af8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007218:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800721a:	e011      	b.n	8007240 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d012      	beq.n	800724a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3310      	adds	r3, #16
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fd0f 	bl	8007c4c <xTaskRemoveFromEventList>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007234:	f000 fe10 	bl	8007e58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	3b01      	subs	r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dce9      	bgt.n	800721c <prvUnlockQueue+0x60>
 8007248:	e000      	b.n	800724c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800724a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	22ff      	movs	r2, #255	@ 0xff
 8007250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007254:	f001 fc82 	bl	8008b5c <vPortExitCritical>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007268:	f001 fc46 	bl	8008af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007270:	2b00      	cmp	r3, #0
 8007272:	d102      	bne.n	800727a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007274:	2301      	movs	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e001      	b.n	800727e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800727e:	f001 fc6d 	bl	8008b5c <vPortExitCritical>

	return xReturn;
 8007282:	68fb      	ldr	r3, [r7, #12]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007294:	f001 fc30 	bl	8008af8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d102      	bne.n	80072aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e001      	b.n	80072ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072ae:	f001 fc55 	bl	8008b5c <vPortExitCritical>

	return xReturn;
 80072b2:	68fb      	ldr	r3, [r7, #12]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e014      	b.n	80072f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072cc:	4a0f      	ldr	r2, [pc, #60]	@ (800730c <vQueueAddToRegistry+0x50>)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10b      	bne.n	80072f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072d8:	490c      	ldr	r1, [pc, #48]	@ (800730c <vQueueAddToRegistry+0x50>)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072e2:	4a0a      	ldr	r2, [pc, #40]	@ (800730c <vQueueAddToRegistry+0x50>)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	4413      	add	r3, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072ee:	e006      	b.n	80072fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b07      	cmp	r3, #7
 80072fa:	d9e7      	bls.n	80072cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20008e6c 	.word	0x20008e6c

08007310 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007320:	f001 fbea 	bl	8008af8 <vPortEnterCritical>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800732a:	b25b      	sxtb	r3, r3
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007330:	d103      	bne.n	800733a <vQueueWaitForMessageRestricted+0x2a>
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007340:	b25b      	sxtb	r3, r3
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007346:	d103      	bne.n	8007350 <vQueueWaitForMessageRestricted+0x40>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007350:	f001 fc04 	bl	8008b5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	3324      	adds	r3, #36	@ 0x24
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fc45 	bl	8007bf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800736a:	6978      	ldr	r0, [r7, #20]
 800736c:	f7ff ff26 	bl	80071bc <prvUnlockQueue>
	}
 8007370:	bf00      	nop
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08e      	sub	sp, #56	@ 0x38
 800737c:	af04      	add	r7, sp, #16
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10b      	bne.n	80073a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	623b      	str	r3, [r7, #32]
}
 800739e:	bf00      	nop
 80073a0:	bf00      	nop
 80073a2:	e7fd      	b.n	80073a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10b      	bne.n	80073c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	61fb      	str	r3, [r7, #28]
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	e7fd      	b.n	80073be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073c2:	235c      	movs	r3, #92	@ 0x5c
 80073c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80073ca:	d00b      	beq.n	80073e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	61bb      	str	r3, [r7, #24]
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	e7fd      	b.n	80073e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01e      	beq.n	800742a <xTaskCreateStatic+0xb2>
 80073ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01b      	beq.n	800742a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007404:	2300      	movs	r3, #0
 8007406:	9303      	str	r3, [sp, #12]
 8007408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740a:	9302      	str	r3, [sp, #8]
 800740c:	f107 0314 	add.w	r3, r7, #20
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f850 	bl	80074c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007422:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007424:	f000 f8de 	bl	80075e4 <prvAddNewTaskToReadyList>
 8007428:	e001      	b.n	800742e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800742e:	697b      	ldr	r3, [r7, #20]
	}
 8007430:	4618      	mov	r0, r3
 8007432:	3728      	adds	r7, #40	@ 0x28
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08c      	sub	sp, #48	@ 0x30
 800743c:	af04      	add	r7, sp, #16
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	4613      	mov	r3, r2
 8007446:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fc75 	bl	8008d3c <pvPortMalloc>
 8007452:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00e      	beq.n	8007478 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800745a:	205c      	movs	r0, #92	@ 0x5c
 800745c:	f001 fc6e 	bl	8008d3c <pvPortMalloc>
 8007460:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	631a      	str	r2, [r3, #48]	@ 0x30
 800746e:	e005      	b.n	800747c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007470:	6978      	ldr	r0, [r7, #20]
 8007472:	f001 fd31 	bl	8008ed8 <vPortFree>
 8007476:	e001      	b.n	800747c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d017      	beq.n	80074b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	2300      	movs	r3, #0
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 f80e 	bl	80074c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074a6:	69f8      	ldr	r0, [r7, #28]
 80074a8:	f000 f89c 	bl	80075e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074ac:	2301      	movs	r3, #1
 80074ae:	61bb      	str	r3, [r7, #24]
 80074b0:	e002      	b.n	80074b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074b8:	69bb      	ldr	r3, [r7, #24]
	}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b088      	sub	sp, #32
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	461a      	mov	r2, r3
 80074da:	21a5      	movs	r1, #165	@ 0xa5
 80074dc:	f012 f887 	bl	80195ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074ea:	3b01      	subs	r3, #1
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	f023 0307 	bic.w	r3, r3, #7
 80074f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	617b      	str	r3, [r7, #20]
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01f      	beq.n	8007562 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	e012      	b.n	800754e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4413      	add	r3, r2
 800752e:	7819      	ldrb	r1, [r3, #0]
 8007530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	4413      	add	r3, r2
 8007536:	3334      	adds	r3, #52	@ 0x34
 8007538:	460a      	mov	r2, r1
 800753a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d006      	beq.n	8007556 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2b0f      	cmp	r3, #15
 8007552:	d9e9      	bls.n	8007528 <prvInitialiseNewTask+0x66>
 8007554:	e000      	b.n	8007558 <prvInitialiseNewTask+0x96>
			{
				break;
 8007556:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007560:	e003      	b.n	800756a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756c:	2b37      	cmp	r3, #55	@ 0x37
 800756e:	d901      	bls.n	8007574 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007570:	2337      	movs	r3, #55	@ 0x37
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007578:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800757e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	2200      	movs	r2, #0
 8007584:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff f966 	bl	800685c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	3318      	adds	r3, #24
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff f961 	bl	800685c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	69b8      	ldr	r0, [r7, #24]
 80075c4:	f001 f966 	bl	8008894 <pxPortInitialiseStack>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075da:	bf00      	nop
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075ec:	f001 fa84 	bl	8008af8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075f0:	4b2d      	ldr	r3, [pc, #180]	@ (80076a8 <prvAddNewTaskToReadyList+0xc4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a2c      	ldr	r2, [pc, #176]	@ (80076a8 <prvAddNewTaskToReadyList+0xc4>)
 80075f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075fa:	4b2c      	ldr	r3, [pc, #176]	@ (80076ac <prvAddNewTaskToReadyList+0xc8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007602:	4a2a      	ldr	r2, [pc, #168]	@ (80076ac <prvAddNewTaskToReadyList+0xc8>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007608:	4b27      	ldr	r3, [pc, #156]	@ (80076a8 <prvAddNewTaskToReadyList+0xc4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d110      	bne.n	8007632 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007610:	f000 fc46 	bl	8007ea0 <prvInitialiseTaskLists>
 8007614:	e00d      	b.n	8007632 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007616:	4b26      	ldr	r3, [pc, #152]	@ (80076b0 <prvAddNewTaskToReadyList+0xcc>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800761e:	4b23      	ldr	r3, [pc, #140]	@ (80076ac <prvAddNewTaskToReadyList+0xc8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	429a      	cmp	r2, r3
 800762a:	d802      	bhi.n	8007632 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800762c:	4a1f      	ldr	r2, [pc, #124]	@ (80076ac <prvAddNewTaskToReadyList+0xc8>)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007632:	4b20      	ldr	r3, [pc, #128]	@ (80076b4 <prvAddNewTaskToReadyList+0xd0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3301      	adds	r3, #1
 8007638:	4a1e      	ldr	r2, [pc, #120]	@ (80076b4 <prvAddNewTaskToReadyList+0xd0>)
 800763a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800763c:	4b1d      	ldr	r3, [pc, #116]	@ (80076b4 <prvAddNewTaskToReadyList+0xd0>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007648:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <prvAddNewTaskToReadyList+0xd4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d903      	bls.n	8007658 <prvAddNewTaskToReadyList+0x74>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007654:	4a18      	ldr	r2, [pc, #96]	@ (80076b8 <prvAddNewTaskToReadyList+0xd4>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4a15      	ldr	r2, [pc, #84]	@ (80076bc <prvAddNewTaskToReadyList+0xd8>)
 8007666:	441a      	add	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7ff f901 	bl	8006876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007674:	f001 fa72 	bl	8008b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007678:	4b0d      	ldr	r3, [pc, #52]	@ (80076b0 <prvAddNewTaskToReadyList+0xcc>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00e      	beq.n	800769e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007680:	4b0a      	ldr	r3, [pc, #40]	@ (80076ac <prvAddNewTaskToReadyList+0xc8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768a:	429a      	cmp	r2, r3
 800768c:	d207      	bcs.n	800769e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800768e:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <prvAddNewTaskToReadyList+0xdc>)
 8007690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20009380 	.word	0x20009380
 80076ac:	20008eac 	.word	0x20008eac
 80076b0:	2000938c 	.word	0x2000938c
 80076b4:	2000939c 	.word	0x2000939c
 80076b8:	20009388 	.word	0x20009388
 80076bc:	20008eb0 	.word	0x20008eb0
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d018      	beq.n	8007708 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076d6:	4b14      	ldr	r3, [pc, #80]	@ (8007728 <vTaskDelay+0x64>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00b      	beq.n	80076f6 <vTaskDelay+0x32>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	60bb      	str	r3, [r7, #8]
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076f6:	f000 f883 	bl	8007800 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076fa:	2100      	movs	r1, #0
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fd1b 	bl	8008138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007702:	f000 f88b 	bl	800781c <xTaskResumeAll>
 8007706:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d107      	bne.n	800771e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800770e:	4b07      	ldr	r3, [pc, #28]	@ (800772c <vTaskDelay+0x68>)
 8007710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200093a8 	.word	0x200093a8
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	@ 0x28
 8007734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800773e:	463a      	mov	r2, r7
 8007740:	1d39      	adds	r1, r7, #4
 8007742:	f107 0308 	add.w	r3, r7, #8
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f834 	bl	80067b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	9202      	str	r2, [sp, #8]
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	2300      	movs	r3, #0
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	2300      	movs	r3, #0
 800775c:	460a      	mov	r2, r1
 800775e:	4922      	ldr	r1, [pc, #136]	@ (80077e8 <vTaskStartScheduler+0xb8>)
 8007760:	4822      	ldr	r0, [pc, #136]	@ (80077ec <vTaskStartScheduler+0xbc>)
 8007762:	f7ff fe09 	bl	8007378 <xTaskCreateStatic>
 8007766:	4603      	mov	r3, r0
 8007768:	4a21      	ldr	r2, [pc, #132]	@ (80077f0 <vTaskStartScheduler+0xc0>)
 800776a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800776c:	4b20      	ldr	r3, [pc, #128]	@ (80077f0 <vTaskStartScheduler+0xc0>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007774:	2301      	movs	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	e001      	b.n	800777e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800777a:	2300      	movs	r3, #0
 800777c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d102      	bne.n	800778a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007784:	f000 fd2c 	bl	80081e0 <xTimerCreateTimerTask>
 8007788:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d116      	bne.n	80077be <vTaskStartScheduler+0x8e>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	613b      	str	r3, [r7, #16]
}
 80077a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077a4:	4b13      	ldr	r3, [pc, #76]	@ (80077f4 <vTaskStartScheduler+0xc4>)
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077ac:	4b12      	ldr	r3, [pc, #72]	@ (80077f8 <vTaskStartScheduler+0xc8>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077b2:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <vTaskStartScheduler+0xcc>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077b8:	f001 f8fa 	bl	80089b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077bc:	e00f      	b.n	80077de <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077c4:	d10b      	bne.n	80077de <vTaskStartScheduler+0xae>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60fb      	str	r3, [r7, #12]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <vTaskStartScheduler+0xaa>
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	0801a9ac 	.word	0x0801a9ac
 80077ec:	08007e71 	.word	0x08007e71
 80077f0:	200093a4 	.word	0x200093a4
 80077f4:	200093a0 	.word	0x200093a0
 80077f8:	2000938c 	.word	0x2000938c
 80077fc:	20009384 	.word	0x20009384

08007800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007804:	4b04      	ldr	r3, [pc, #16]	@ (8007818 <vTaskSuspendAll+0x18>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	4a03      	ldr	r2, [pc, #12]	@ (8007818 <vTaskSuspendAll+0x18>)
 800780c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800780e:	bf00      	nop
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	200093a8 	.word	0x200093a8

0800781c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007826:	2300      	movs	r3, #0
 8007828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800782a:	4b42      	ldr	r3, [pc, #264]	@ (8007934 <xTaskResumeAll+0x118>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10b      	bne.n	800784a <xTaskResumeAll+0x2e>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	603b      	str	r3, [r7, #0]
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	e7fd      	b.n	8007846 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800784a:	f001 f955 	bl	8008af8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800784e:	4b39      	ldr	r3, [pc, #228]	@ (8007934 <xTaskResumeAll+0x118>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3b01      	subs	r3, #1
 8007854:	4a37      	ldr	r2, [pc, #220]	@ (8007934 <xTaskResumeAll+0x118>)
 8007856:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007858:	4b36      	ldr	r3, [pc, #216]	@ (8007934 <xTaskResumeAll+0x118>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d162      	bne.n	8007926 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007860:	4b35      	ldr	r3, [pc, #212]	@ (8007938 <xTaskResumeAll+0x11c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d05e      	beq.n	8007926 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007868:	e02f      	b.n	80078ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800786a:	4b34      	ldr	r3, [pc, #208]	@ (800793c <xTaskResumeAll+0x120>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3318      	adds	r3, #24
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff f85a 	bl	8006930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3304      	adds	r3, #4
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff f855 	bl	8006930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788a:	4b2d      	ldr	r3, [pc, #180]	@ (8007940 <xTaskResumeAll+0x124>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d903      	bls.n	800789a <xTaskResumeAll+0x7e>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	4a2a      	ldr	r2, [pc, #168]	@ (8007940 <xTaskResumeAll+0x124>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4a27      	ldr	r2, [pc, #156]	@ (8007944 <xTaskResumeAll+0x128>)
 80078a8:	441a      	add	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7fe ffe0 	bl	8006876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078ba:	4b23      	ldr	r3, [pc, #140]	@ (8007948 <xTaskResumeAll+0x12c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d302      	bcc.n	80078ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80078c4:	4b21      	ldr	r3, [pc, #132]	@ (800794c <xTaskResumeAll+0x130>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ca:	4b1c      	ldr	r3, [pc, #112]	@ (800793c <xTaskResumeAll+0x120>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1cb      	bne.n	800786a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078d8:	f000 fb80 	bl	8007fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007950 <xTaskResumeAll+0x134>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d010      	beq.n	800790a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078e8:	f000 f846 	bl	8007978 <xTaskIncrementTick>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80078f2:	4b16      	ldr	r3, [pc, #88]	@ (800794c <xTaskResumeAll+0x130>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f1      	bne.n	80078e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007904:	4b12      	ldr	r3, [pc, #72]	@ (8007950 <xTaskResumeAll+0x134>)
 8007906:	2200      	movs	r2, #0
 8007908:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800790a:	4b10      	ldr	r3, [pc, #64]	@ (800794c <xTaskResumeAll+0x130>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007912:	2301      	movs	r3, #1
 8007914:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007916:	4b0f      	ldr	r3, [pc, #60]	@ (8007954 <xTaskResumeAll+0x138>)
 8007918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007926:	f001 f919 	bl	8008b5c <vPortExitCritical>

	return xAlreadyYielded;
 800792a:	68bb      	ldr	r3, [r7, #8]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	200093a8 	.word	0x200093a8
 8007938:	20009380 	.word	0x20009380
 800793c:	20009340 	.word	0x20009340
 8007940:	20009388 	.word	0x20009388
 8007944:	20008eb0 	.word	0x20008eb0
 8007948:	20008eac 	.word	0x20008eac
 800794c:	20009394 	.word	0x20009394
 8007950:	20009390 	.word	0x20009390
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800795e:	4b05      	ldr	r3, [pc, #20]	@ (8007974 <xTaskGetTickCount+0x1c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007964:	687b      	ldr	r3, [r7, #4]
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20009384 	.word	0x20009384

08007978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007982:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac0 <xTaskIncrementTick+0x148>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f040 8090 	bne.w	8007aac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800798c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac4 <xTaskIncrementTick+0x14c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007994:	4a4b      	ldr	r2, [pc, #300]	@ (8007ac4 <xTaskIncrementTick+0x14c>)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d121      	bne.n	80079e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079a0:	4b49      	ldr	r3, [pc, #292]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <xTaskIncrementTick+0x46>
 80079c2:	4b41      	ldr	r3, [pc, #260]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	4b40      	ldr	r3, [pc, #256]	@ (8007acc <xTaskIncrementTick+0x154>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a3e      	ldr	r2, [pc, #248]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	4a3e      	ldr	r2, [pc, #248]	@ (8007acc <xTaskIncrementTick+0x154>)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ad0 <xTaskIncrementTick+0x158>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	4a3c      	ldr	r2, [pc, #240]	@ (8007ad0 <xTaskIncrementTick+0x158>)
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	f000 fafc 	bl	8007fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079e4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ad4 <xTaskIncrementTick+0x15c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d349      	bcc.n	8007a82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ee:	4b36      	ldr	r3, [pc, #216]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f8:	4b36      	ldr	r3, [pc, #216]	@ (8007ad4 <xTaskIncrementTick+0x15c>)
 80079fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079fe:	601a      	str	r2, [r3, #0]
					break;
 8007a00:	e03f      	b.n	8007a82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a02:	4b31      	ldr	r3, [pc, #196]	@ (8007ac8 <xTaskIncrementTick+0x150>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d203      	bcs.n	8007a22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a1a:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad4 <xTaskIncrementTick+0x15c>)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a20:	e02f      	b.n	8007a82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	3304      	adds	r3, #4
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe ff82 	bl	8006930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	3318      	adds	r3, #24
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe ff79 	bl	8006930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a42:	4b25      	ldr	r3, [pc, #148]	@ (8007ad8 <xTaskIncrementTick+0x160>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d903      	bls.n	8007a52 <xTaskIncrementTick+0xda>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	4a22      	ldr	r2, [pc, #136]	@ (8007ad8 <xTaskIncrementTick+0x160>)
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007adc <xTaskIncrementTick+0x164>)
 8007a60:	441a      	add	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fe ff04 	bl	8006876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <xTaskIncrementTick+0x168>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3b8      	bcc.n	80079ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a80:	e7b5      	b.n	80079ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a82:	4b17      	ldr	r3, [pc, #92]	@ (8007ae0 <xTaskIncrementTick+0x168>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	4914      	ldr	r1, [pc, #80]	@ (8007adc <xTaskIncrementTick+0x164>)
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d901      	bls.n	8007a9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a9e:	4b11      	ldr	r3, [pc, #68]	@ (8007ae4 <xTaskIncrementTick+0x16c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e004      	b.n	8007ab6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007aac:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae8 <xTaskIncrementTick+0x170>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ae8 <xTaskIncrementTick+0x170>)
 8007ab4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ab6:	697b      	ldr	r3, [r7, #20]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3718      	adds	r7, #24
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	200093a8 	.word	0x200093a8
 8007ac4:	20009384 	.word	0x20009384
 8007ac8:	20009338 	.word	0x20009338
 8007acc:	2000933c 	.word	0x2000933c
 8007ad0:	20009398 	.word	0x20009398
 8007ad4:	200093a0 	.word	0x200093a0
 8007ad8:	20009388 	.word	0x20009388
 8007adc:	20008eb0 	.word	0x20008eb0
 8007ae0:	20008eac 	.word	0x20008eac
 8007ae4:	20009394 	.word	0x20009394
 8007ae8:	20009390 	.word	0x20009390

08007aec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007af2:	4b28      	ldr	r3, [pc, #160]	@ (8007b94 <vTaskSwitchContext+0xa8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007afa:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <vTaskSwitchContext+0xac>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b00:	e042      	b.n	8007b88 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007b02:	4b25      	ldr	r3, [pc, #148]	@ (8007b98 <vTaskSwitchContext+0xac>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b08:	4b24      	ldr	r3, [pc, #144]	@ (8007b9c <vTaskSwitchContext+0xb0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	e011      	b.n	8007b34 <vTaskSwitchContext+0x48>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <vTaskSwitchContext+0x42>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	607b      	str	r3, [r7, #4]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <vTaskSwitchContext+0x3e>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	491a      	ldr	r1, [pc, #104]	@ (8007ba0 <vTaskSwitchContext+0xb4>)
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0e3      	beq.n	8007b10 <vTaskSwitchContext+0x24>
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a13      	ldr	r2, [pc, #76]	@ (8007ba0 <vTaskSwitchContext+0xb4>)
 8007b54:	4413      	add	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d104      	bne.n	8007b78 <vTaskSwitchContext+0x8c>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	4a09      	ldr	r2, [pc, #36]	@ (8007ba4 <vTaskSwitchContext+0xb8>)
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4a06      	ldr	r2, [pc, #24]	@ (8007b9c <vTaskSwitchContext+0xb0>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6013      	str	r3, [r2, #0]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	200093a8 	.word	0x200093a8
 8007b98:	20009394 	.word	0x20009394
 8007b9c:	20009388 	.word	0x20009388
 8007ba0:	20008eb0 	.word	0x20008eb0
 8007ba4:	20008eac 	.word	0x20008eac

08007ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60fb      	str	r3, [r7, #12]
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bd0:	4b07      	ldr	r3, [pc, #28]	@ (8007bf0 <vTaskPlaceOnEventList+0x48>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7fe fe70 	bl	80068be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bde:	2101      	movs	r1, #1
 8007be0:	6838      	ldr	r0, [r7, #0]
 8007be2:	f000 faa9 	bl	8008138 <prvAddCurrentTaskToDelayedList>
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20008eac 	.word	0x20008eac

08007bf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10b      	bne.n	8007c1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	617b      	str	r3, [r7, #20]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3318      	adds	r3, #24
 8007c24:	4619      	mov	r1, r3
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7fe fe25 	bl	8006876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	68b8      	ldr	r0, [r7, #8]
 8007c3c:	f000 fa7c 	bl	8008138 <prvAddCurrentTaskToDelayedList>
	}
 8007c40:	bf00      	nop
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20008eac 	.word	0x20008eac

08007c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60fb      	str	r3, [r7, #12]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	3318      	adds	r3, #24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fe56 	bl	8006930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c84:	4b1d      	ldr	r3, [pc, #116]	@ (8007cfc <xTaskRemoveFromEventList+0xb0>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d11d      	bne.n	8007cc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fe fe4d 	bl	8006930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	4b19      	ldr	r3, [pc, #100]	@ (8007d00 <xTaskRemoveFromEventList+0xb4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d903      	bls.n	8007caa <xTaskRemoveFromEventList+0x5e>
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca6:	4a16      	ldr	r2, [pc, #88]	@ (8007d00 <xTaskRemoveFromEventList+0xb4>)
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4a13      	ldr	r2, [pc, #76]	@ (8007d04 <xTaskRemoveFromEventList+0xb8>)
 8007cb8:	441a      	add	r2, r3
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	f7fe fdd8 	bl	8006876 <vListInsertEnd>
 8007cc6:	e005      	b.n	8007cd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	3318      	adds	r3, #24
 8007ccc:	4619      	mov	r1, r3
 8007cce:	480e      	ldr	r0, [pc, #56]	@ (8007d08 <xTaskRemoveFromEventList+0xbc>)
 8007cd0:	f7fe fdd1 	bl	8006876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <xTaskRemoveFromEventList+0xc0>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d905      	bls.n	8007cee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <xTaskRemoveFromEventList+0xc4>)
 8007ce8:	2201      	movs	r2, #1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	e001      	b.n	8007cf2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cf2:	697b      	ldr	r3, [r7, #20]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	200093a8 	.word	0x200093a8
 8007d00:	20009388 	.word	0x20009388
 8007d04:	20008eb0 	.word	0x20008eb0
 8007d08:	20009340 	.word	0x20009340
 8007d0c:	20008eac 	.word	0x20008eac
 8007d10:	20009394 	.word	0x20009394

08007d14 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10b      	bne.n	8007d3a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	60fb      	str	r3, [r7, #12]
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007d3a:	f000 fedd 	bl	8008af8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d3e:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <vTaskSetTimeOutState+0x48>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007d46:	4b06      	ldr	r3, [pc, #24]	@ (8007d60 <vTaskSetTimeOutState+0x4c>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007d4e:	f000 ff05 	bl	8008b5c <vPortExitCritical>
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20009398 	.word	0x20009398
 8007d60:	20009384 	.word	0x20009384

08007d64 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <vTaskInternalSetTimeOutState+0x24>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d74:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <vTaskInternalSetTimeOutState+0x28>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	20009398 	.word	0x20009398
 8007d8c:	20009384 	.word	0x20009384

08007d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	613b      	str	r3, [r7, #16]
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10b      	bne.n	8007dd6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	60fb      	str	r3, [r7, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	e7fd      	b.n	8007dd2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007dd6:	f000 fe8f 	bl	8008af8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dda:	4b1d      	ldr	r3, [pc, #116]	@ (8007e50 <xTaskCheckForTimeOut+0xc0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007df2:	d102      	bne.n	8007dfa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	e023      	b.n	8007e42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4b15      	ldr	r3, [pc, #84]	@ (8007e54 <xTaskCheckForTimeOut+0xc4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d007      	beq.n	8007e16 <xTaskCheckForTimeOut+0x86>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d302      	bcc.n	8007e16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e10:	2301      	movs	r3, #1
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	e015      	b.n	8007e42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d20b      	bcs.n	8007e38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	1ad2      	subs	r2, r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7ff ff99 	bl	8007d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
 8007e36:	e004      	b.n	8007e42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e42:	f000 fe8b 	bl	8008b5c <vPortExitCritical>

	return xReturn;
 8007e46:	69fb      	ldr	r3, [r7, #28]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3720      	adds	r7, #32
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20009384 	.word	0x20009384
 8007e54:	20009398 	.word	0x20009398

08007e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e5c:	4b03      	ldr	r3, [pc, #12]	@ (8007e6c <vTaskMissedYield+0x14>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	601a      	str	r2, [r3, #0]
}
 8007e62:	bf00      	nop
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	20009394 	.word	0x20009394

08007e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e78:	f000 f852 	bl	8007f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e7c:	4b06      	ldr	r3, [pc, #24]	@ (8007e98 <prvIdleTask+0x28>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d9f9      	bls.n	8007e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e84:	4b05      	ldr	r3, [pc, #20]	@ (8007e9c <prvIdleTask+0x2c>)
 8007e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e94:	e7f0      	b.n	8007e78 <prvIdleTask+0x8>
 8007e96:	bf00      	nop
 8007e98:	20008eb0 	.word	0x20008eb0
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
 8007eaa:	e00c      	b.n	8007ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4a12      	ldr	r2, [pc, #72]	@ (8007f00 <prvInitialiseTaskLists+0x60>)
 8007eb8:	4413      	add	r3, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fcae 	bl	800681c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b37      	cmp	r3, #55	@ 0x37
 8007eca:	d9ef      	bls.n	8007eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ecc:	480d      	ldr	r0, [pc, #52]	@ (8007f04 <prvInitialiseTaskLists+0x64>)
 8007ece:	f7fe fca5 	bl	800681c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ed2:	480d      	ldr	r0, [pc, #52]	@ (8007f08 <prvInitialiseTaskLists+0x68>)
 8007ed4:	f7fe fca2 	bl	800681c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ed8:	480c      	ldr	r0, [pc, #48]	@ (8007f0c <prvInitialiseTaskLists+0x6c>)
 8007eda:	f7fe fc9f 	bl	800681c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ede:	480c      	ldr	r0, [pc, #48]	@ (8007f10 <prvInitialiseTaskLists+0x70>)
 8007ee0:	f7fe fc9c 	bl	800681c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ee4:	480b      	ldr	r0, [pc, #44]	@ (8007f14 <prvInitialiseTaskLists+0x74>)
 8007ee6:	f7fe fc99 	bl	800681c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eea:	4b0b      	ldr	r3, [pc, #44]	@ (8007f18 <prvInitialiseTaskLists+0x78>)
 8007eec:	4a05      	ldr	r2, [pc, #20]	@ (8007f04 <prvInitialiseTaskLists+0x64>)
 8007eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8007f1c <prvInitialiseTaskLists+0x7c>)
 8007ef2:	4a05      	ldr	r2, [pc, #20]	@ (8007f08 <prvInitialiseTaskLists+0x68>)
 8007ef4:	601a      	str	r2, [r3, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20008eb0 	.word	0x20008eb0
 8007f04:	20009310 	.word	0x20009310
 8007f08:	20009324 	.word	0x20009324
 8007f0c:	20009340 	.word	0x20009340
 8007f10:	20009354 	.word	0x20009354
 8007f14:	2000936c 	.word	0x2000936c
 8007f18:	20009338 	.word	0x20009338
 8007f1c:	2000933c 	.word	0x2000933c

08007f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f26:	e019      	b.n	8007f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f28:	f000 fde6 	bl	8008af8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	4b10      	ldr	r3, [pc, #64]	@ (8007f70 <prvCheckTasksWaitingTermination+0x50>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe fcf9 	bl	8006930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f74 <prvCheckTasksWaitingTermination+0x54>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	4a0b      	ldr	r2, [pc, #44]	@ (8007f74 <prvCheckTasksWaitingTermination+0x54>)
 8007f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f48:	4b0b      	ldr	r3, [pc, #44]	@ (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f52:	f000 fe03 	bl	8008b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f810 	bl	8007f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f5c:	4b06      	ldr	r3, [pc, #24]	@ (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e1      	bne.n	8007f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20009354 	.word	0x20009354
 8007f74:	20009380 	.word	0x20009380
 8007f78:	20009368 	.word	0x20009368

08007f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d108      	bne.n	8007fa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 ffa0 	bl	8008ed8 <vPortFree>
				vPortFree( pxTCB );
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 ff9d 	bl	8008ed8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f9e:	e019      	b.n	8007fd4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d103      	bne.n	8007fb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 ff94 	bl	8008ed8 <vPortFree>
	}
 8007fb0:	e010      	b.n	8007fd4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d00b      	beq.n	8007fd4 <prvDeleteTCB+0x58>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	60fb      	str	r3, [r7, #12]
}
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	e7fd      	b.n	8007fd0 <prvDeleteTCB+0x54>
	}
 8007fd4:	bf00      	nop
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <prvResetNextTaskUnblockTime+0x38>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d104      	bne.n	8007ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <prvResetNextTaskUnblockTime+0x3c>)
 8007fee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ff4:	e008      	b.n	8008008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff6:	4b07      	ldr	r3, [pc, #28]	@ (8008014 <prvResetNextTaskUnblockTime+0x38>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	4a04      	ldr	r2, [pc, #16]	@ (8008018 <prvResetNextTaskUnblockTime+0x3c>)
 8008006:	6013      	str	r3, [r2, #0]
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	20009338 	.word	0x20009338
 8008018:	200093a0 	.word	0x200093a0

0800801c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008022:	4b0b      	ldr	r3, [pc, #44]	@ (8008050 <xTaskGetSchedulerState+0x34>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800802a:	2301      	movs	r3, #1
 800802c:	607b      	str	r3, [r7, #4]
 800802e:	e008      	b.n	8008042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008030:	4b08      	ldr	r3, [pc, #32]	@ (8008054 <xTaskGetSchedulerState+0x38>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d102      	bne.n	800803e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008038:	2302      	movs	r3, #2
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	e001      	b.n	8008042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008042:	687b      	ldr	r3, [r7, #4]
	}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	2000938c 	.word	0x2000938c
 8008054:	200093a8 	.word	0x200093a8

08008058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d058      	beq.n	8008120 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800806e:	4b2f      	ldr	r3, [pc, #188]	@ (800812c <xTaskPriorityDisinherit+0xd4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	429a      	cmp	r2, r3
 8008076:	d00b      	beq.n	8008090 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	60fb      	str	r3, [r7, #12]
}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	e7fd      	b.n	800808c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	60bb      	str	r3, [r7, #8]
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d02c      	beq.n	8008120 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d128      	bne.n	8008120 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fc2c 	bl	8006930 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008130 <xTaskPriorityDisinherit+0xd8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d903      	bls.n	8008100 <xTaskPriorityDisinherit+0xa8>
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008130 <xTaskPriorityDisinherit+0xd8>)
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4a09      	ldr	r2, [pc, #36]	@ (8008134 <xTaskPriorityDisinherit+0xdc>)
 800810e:	441a      	add	r2, r3
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3304      	adds	r3, #4
 8008114:	4619      	mov	r1, r3
 8008116:	4610      	mov	r0, r2
 8008118:	f7fe fbad 	bl	8006876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008120:	697b      	ldr	r3, [r7, #20]
	}
 8008122:	4618      	mov	r0, r3
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20008eac 	.word	0x20008eac
 8008130:	20009388 	.word	0x20009388
 8008134:	20008eb0 	.word	0x20008eb0

08008138 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008142:	4b21      	ldr	r3, [pc, #132]	@ (80081c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008148:	4b20      	ldr	r3, [pc, #128]	@ (80081cc <prvAddCurrentTaskToDelayedList+0x94>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3304      	adds	r3, #4
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fbee 	bl	8006930 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800815a:	d10a      	bne.n	8008172 <prvAddCurrentTaskToDelayedList+0x3a>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008162:	4b1a      	ldr	r3, [pc, #104]	@ (80081cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4819      	ldr	r0, [pc, #100]	@ (80081d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800816c:	f7fe fb83 	bl	8006876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008170:	e026      	b.n	80081c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4413      	add	r3, r2
 8008178:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800817a:	4b14      	ldr	r3, [pc, #80]	@ (80081cc <prvAddCurrentTaskToDelayedList+0x94>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	429a      	cmp	r2, r3
 8008188:	d209      	bcs.n	800819e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800818a:	4b12      	ldr	r3, [pc, #72]	@ (80081d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b0f      	ldr	r3, [pc, #60]	@ (80081cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3304      	adds	r3, #4
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f7fe fb91 	bl	80068be <vListInsert>
}
 800819c:	e010      	b.n	80081c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800819e:	4b0e      	ldr	r3, [pc, #56]	@ (80081d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <prvAddCurrentTaskToDelayedList+0x94>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fe fb87 	bl	80068be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081b0:	4b0a      	ldr	r3, [pc, #40]	@ (80081dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d202      	bcs.n	80081c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081ba:	4a08      	ldr	r2, [pc, #32]	@ (80081dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	6013      	str	r3, [r2, #0]
}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20009384 	.word	0x20009384
 80081cc:	20008eac 	.word	0x20008eac
 80081d0:	2000936c 	.word	0x2000936c
 80081d4:	2000933c 	.word	0x2000933c
 80081d8:	20009338 	.word	0x20009338
 80081dc:	200093a0 	.word	0x200093a0

080081e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	@ 0x28
 80081e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081ea:	f000 fb13 	bl	8008814 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008264 <xTimerCreateTimerTask+0x84>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d021      	beq.n	800823a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081fe:	1d3a      	adds	r2, r7, #4
 8008200:	f107 0108 	add.w	r1, r7, #8
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe faed 	bl	80067e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	9202      	str	r2, [sp, #8]
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	2302      	movs	r3, #2
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	2300      	movs	r3, #0
 800821e:	460a      	mov	r2, r1
 8008220:	4911      	ldr	r1, [pc, #68]	@ (8008268 <xTimerCreateTimerTask+0x88>)
 8008222:	4812      	ldr	r0, [pc, #72]	@ (800826c <xTimerCreateTimerTask+0x8c>)
 8008224:	f7ff f8a8 	bl	8007378 <xTaskCreateStatic>
 8008228:	4603      	mov	r3, r0
 800822a:	4a11      	ldr	r2, [pc, #68]	@ (8008270 <xTimerCreateTimerTask+0x90>)
 800822c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800822e:	4b10      	ldr	r3, [pc, #64]	@ (8008270 <xTimerCreateTimerTask+0x90>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008236:	2301      	movs	r3, #1
 8008238:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10b      	bne.n	8008258 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	613b      	str	r3, [r7, #16]
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008258:	697b      	ldr	r3, [r7, #20]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	200093dc 	.word	0x200093dc
 8008268:	0801a9b4 	.word	0x0801a9b4
 800826c:	080083ad 	.word	0x080083ad
 8008270:	200093e0 	.word	0x200093e0

08008274 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	@ 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008282:	2300      	movs	r3, #0
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10b      	bne.n	80082a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	623b      	str	r3, [r7, #32]
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	e7fd      	b.n	80082a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082a4:	4b19      	ldr	r3, [pc, #100]	@ (800830c <xTimerGenericCommand+0x98>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d02a      	beq.n	8008302 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b05      	cmp	r3, #5
 80082bc:	dc18      	bgt.n	80082f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082be:	f7ff fead 	bl	800801c <xTaskGetSchedulerState>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d109      	bne.n	80082dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082c8:	4b10      	ldr	r3, [pc, #64]	@ (800830c <xTimerGenericCommand+0x98>)
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	f107 0110 	add.w	r1, r7, #16
 80082d0:	2300      	movs	r3, #0
 80082d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d4:	f7fe fc60 	bl	8006b98 <xQueueGenericSend>
 80082d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80082da:	e012      	b.n	8008302 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082dc:	4b0b      	ldr	r3, [pc, #44]	@ (800830c <xTimerGenericCommand+0x98>)
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	f107 0110 	add.w	r1, r7, #16
 80082e4:	2300      	movs	r3, #0
 80082e6:	2200      	movs	r2, #0
 80082e8:	f7fe fc56 	bl	8006b98 <xQueueGenericSend>
 80082ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80082ee:	e008      	b.n	8008302 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082f0:	4b06      	ldr	r3, [pc, #24]	@ (800830c <xTimerGenericCommand+0x98>)
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	f107 0110 	add.w	r1, r7, #16
 80082f8:	2300      	movs	r3, #0
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	f7fe fd4e 	bl	8006d9c <xQueueGenericSendFromISR>
 8008300:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008304:	4618      	mov	r0, r3
 8008306:	3728      	adds	r7, #40	@ 0x28
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	200093dc 	.word	0x200093dc

08008310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af02      	add	r7, sp, #8
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800831a:	4b23      	ldr	r3, [pc, #140]	@ (80083a8 <prvProcessExpiredTimer+0x98>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	3304      	adds	r3, #4
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fb01 	bl	8006930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d023      	beq.n	8008384 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	18d1      	adds	r1, r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	6978      	ldr	r0, [r7, #20]
 800834a:	f000 f8d5 	bl	80084f8 <prvInsertTimerInActiveList>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d020      	beq.n	8008396 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008354:	2300      	movs	r3, #0
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	2300      	movs	r3, #0
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	2100      	movs	r1, #0
 800835e:	6978      	ldr	r0, [r7, #20]
 8008360:	f7ff ff88 	bl	8008274 <xTimerGenericCommand>
 8008364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d114      	bne.n	8008396 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	60fb      	str	r3, [r7, #12]
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	b2da      	uxtb	r2, r3
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	6978      	ldr	r0, [r7, #20]
 800839c:	4798      	blx	r3
}
 800839e:	bf00      	nop
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200093d4 	.word	0x200093d4

080083ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083b4:	f107 0308 	add.w	r3, r7, #8
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 f859 	bl	8008470 <prvGetNextExpireTime>
 80083be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4619      	mov	r1, r3
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f805 	bl	80083d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083ca:	f000 f8d7 	bl	800857c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083ce:	bf00      	nop
 80083d0:	e7f0      	b.n	80083b4 <prvTimerTask+0x8>
	...

080083d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083de:	f7ff fa0f 	bl	8007800 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083e2:	f107 0308 	add.w	r3, r7, #8
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f866 	bl	80084b8 <prvSampleTimeNow>
 80083ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d130      	bne.n	8008456 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10a      	bne.n	8008410 <prvProcessTimerOrBlockTask+0x3c>
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d806      	bhi.n	8008410 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008402:	f7ff fa0b 	bl	800781c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ff81 	bl	8008310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800840e:	e024      	b.n	800845a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008416:	4b13      	ldr	r3, [pc, #76]	@ (8008464 <prvProcessTimerOrBlockTask+0x90>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <prvProcessTimerOrBlockTask+0x50>
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <prvProcessTimerOrBlockTask+0x52>
 8008424:	2300      	movs	r3, #0
 8008426:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008428:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <prvProcessTimerOrBlockTask+0x94>)
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4619      	mov	r1, r3
 8008436:	f7fe ff6b 	bl	8007310 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800843a:	f7ff f9ef 	bl	800781c <xTaskResumeAll>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008444:	4b09      	ldr	r3, [pc, #36]	@ (800846c <prvProcessTimerOrBlockTask+0x98>)
 8008446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	f3bf 8f6f 	isb	sy
}
 8008454:	e001      	b.n	800845a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008456:	f7ff f9e1 	bl	800781c <xTaskResumeAll>
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	200093d8 	.word	0x200093d8
 8008468:	200093dc 	.word	0x200093dc
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008478:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <prvGetNextExpireTime+0x44>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <prvGetNextExpireTime+0x16>
 8008482:	2201      	movs	r2, #1
 8008484:	e000      	b.n	8008488 <prvGetNextExpireTime+0x18>
 8008486:	2200      	movs	r2, #0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008494:	4b07      	ldr	r3, [pc, #28]	@ (80084b4 <prvGetNextExpireTime+0x44>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e001      	b.n	80084a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084a4:	68fb      	ldr	r3, [r7, #12]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	200093d4 	.word	0x200093d4

080084b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084c0:	f7ff fa4a 	bl	8007958 <xTaskGetTickCount>
 80084c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084c6:	4b0b      	ldr	r3, [pc, #44]	@ (80084f4 <prvSampleTimeNow+0x3c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d205      	bcs.n	80084dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084d0:	f000 f93a 	bl	8008748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	e002      	b.n	80084e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084e2:	4a04      	ldr	r2, [pc, #16]	@ (80084f4 <prvSampleTimeNow+0x3c>)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	200093e4 	.word	0x200093e4

080084f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008506:	2300      	movs	r3, #0
 8008508:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	429a      	cmp	r2, r3
 800851c:	d812      	bhi.n	8008544 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	1ad2      	subs	r2, r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	429a      	cmp	r2, r3
 800852a:	d302      	bcc.n	8008532 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800852c:	2301      	movs	r3, #1
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	e01b      	b.n	800856a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008532:	4b10      	ldr	r3, [pc, #64]	@ (8008574 <prvInsertTimerInActiveList+0x7c>)
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f7fe f9be 	bl	80068be <vListInsert>
 8008542:	e012      	b.n	800856a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d206      	bcs.n	800855a <prvInsertTimerInActiveList+0x62>
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d302      	bcc.n	800855a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008554:	2301      	movs	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e007      	b.n	800856a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800855a:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <prvInsertTimerInActiveList+0x80>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3304      	adds	r3, #4
 8008562:	4619      	mov	r1, r3
 8008564:	4610      	mov	r0, r2
 8008566:	f7fe f9aa 	bl	80068be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800856a:	697b      	ldr	r3, [r7, #20]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	200093d8 	.word	0x200093d8
 8008578:	200093d4 	.word	0x200093d4

0800857c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08e      	sub	sp, #56	@ 0x38
 8008580:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008582:	e0ce      	b.n	8008722 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	da19      	bge.n	80085be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800858a:	1d3b      	adds	r3, r7, #4
 800858c:	3304      	adds	r3, #4
 800858e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10b      	bne.n	80085ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	61fb      	str	r3, [r7, #28]
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	e7fd      	b.n	80085aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085b4:	6850      	ldr	r0, [r2, #4]
 80085b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085b8:	6892      	ldr	r2, [r2, #8]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f2c0 80ae 	blt.w	8008722 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d004      	beq.n	80085dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d4:	3304      	adds	r3, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe f9aa 	bl	8006930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085dc:	463b      	mov	r3, r7
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff ff6a 	bl	80084b8 <prvSampleTimeNow>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b09      	cmp	r3, #9
 80085ea:	f200 8097 	bhi.w	800871c <prvProcessReceivedCommands+0x1a0>
 80085ee:	a201      	add	r2, pc, #4	@ (adr r2, 80085f4 <prvProcessReceivedCommands+0x78>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	0800861d 	.word	0x0800861d
 8008600:	08008693 	.word	0x08008693
 8008604:	080086a7 	.word	0x080086a7
 8008608:	080086f3 	.word	0x080086f3
 800860c:	0800861d 	.word	0x0800861d
 8008610:	0800861d 	.word	0x0800861d
 8008614:	08008693 	.word	0x08008693
 8008618:	080086a7 	.word	0x080086a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	18d1      	adds	r1, r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800863a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800863c:	f7ff ff5c 	bl	80084f8 <prvInsertTimerInActiveList>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d06c      	beq.n	8008720 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800864c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800864e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d061      	beq.n	8008720 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	441a      	add	r2, r3
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	2300      	movs	r3, #0
 800866a:	2100      	movs	r1, #0
 800866c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800866e:	f7ff fe01 	bl	8008274 <xTimerGenericCommand>
 8008672:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d152      	bne.n	8008720 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61bb      	str	r3, [r7, #24]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008694:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	b2da      	uxtb	r2, r3
 800869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086a4:	e03d      	b.n	8008722 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086ac:	f043 0301 	orr.w	r3, r3, #1
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <prvProcessReceivedCommands+0x162>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	617b      	str	r3, [r7, #20]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	18d1      	adds	r1, r2, r3
 80086e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ec:	f7ff ff04 	bl	80084f8 <prvInsertTimerInActiveList>
					break;
 80086f0:	e017      	b.n	8008722 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d103      	bne.n	8008708 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008700:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008702:	f000 fbe9 	bl	8008ed8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008706:	e00c      	b.n	8008722 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	b2da      	uxtb	r2, r3
 8008714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008716:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800871a:	e002      	b.n	8008722 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800871c:	bf00      	nop
 800871e:	e000      	b.n	8008722 <prvProcessReceivedCommands+0x1a6>
					break;
 8008720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008722:	4b08      	ldr	r3, [pc, #32]	@ (8008744 <prvProcessReceivedCommands+0x1c8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	1d39      	adds	r1, r7, #4
 8008728:	2200      	movs	r2, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fbd4 	bl	8006ed8 <xQueueReceive>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	f47f af26 	bne.w	8008584 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	3730      	adds	r7, #48	@ 0x30
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	200093dc 	.word	0x200093dc

08008748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800874e:	e049      	b.n	80087e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008750:	4b2e      	ldr	r3, [pc, #184]	@ (800880c <prvSwitchTimerLists+0xc4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875a:	4b2c      	ldr	r3, [pc, #176]	@ (800880c <prvSwitchTimerLists+0xc4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3304      	adds	r3, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe f8e1 	bl	8006930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d02f      	beq.n	80087e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4413      	add	r3, r2
 800878c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	429a      	cmp	r2, r3
 8008794:	d90e      	bls.n	80087b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087a2:	4b1a      	ldr	r3, [pc, #104]	@ (800880c <prvSwitchTimerLists+0xc4>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3304      	adds	r3, #4
 80087aa:	4619      	mov	r1, r3
 80087ac:	4610      	mov	r0, r2
 80087ae:	f7fe f886 	bl	80068be <vListInsert>
 80087b2:	e017      	b.n	80087e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087b4:	2300      	movs	r3, #0
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	2300      	movs	r3, #0
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	2100      	movs	r1, #0
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fd58 	bl	8008274 <xTimerGenericCommand>
 80087c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10b      	bne.n	80087e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	603b      	str	r3, [r7, #0]
}
 80087de:	bf00      	nop
 80087e0:	bf00      	nop
 80087e2:	e7fd      	b.n	80087e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087e4:	4b09      	ldr	r3, [pc, #36]	@ (800880c <prvSwitchTimerLists+0xc4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1b0      	bne.n	8008750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087ee:	4b07      	ldr	r3, [pc, #28]	@ (800880c <prvSwitchTimerLists+0xc4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087f4:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <prvSwitchTimerLists+0xc8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a04      	ldr	r2, [pc, #16]	@ (800880c <prvSwitchTimerLists+0xc4>)
 80087fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087fc:	4a04      	ldr	r2, [pc, #16]	@ (8008810 <prvSwitchTimerLists+0xc8>)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	6013      	str	r3, [r2, #0]
}
 8008802:	bf00      	nop
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	200093d4 	.word	0x200093d4
 8008810:	200093d8 	.word	0x200093d8

08008814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800881a:	f000 f96d 	bl	8008af8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800881e:	4b15      	ldr	r3, [pc, #84]	@ (8008874 <prvCheckForValidListAndQueue+0x60>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d120      	bne.n	8008868 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008826:	4814      	ldr	r0, [pc, #80]	@ (8008878 <prvCheckForValidListAndQueue+0x64>)
 8008828:	f7fd fff8 	bl	800681c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800882c:	4813      	ldr	r0, [pc, #76]	@ (800887c <prvCheckForValidListAndQueue+0x68>)
 800882e:	f7fd fff5 	bl	800681c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008832:	4b13      	ldr	r3, [pc, #76]	@ (8008880 <prvCheckForValidListAndQueue+0x6c>)
 8008834:	4a10      	ldr	r2, [pc, #64]	@ (8008878 <prvCheckForValidListAndQueue+0x64>)
 8008836:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008838:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <prvCheckForValidListAndQueue+0x70>)
 800883a:	4a10      	ldr	r2, [pc, #64]	@ (800887c <prvCheckForValidListAndQueue+0x68>)
 800883c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800883e:	2300      	movs	r3, #0
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	4b11      	ldr	r3, [pc, #68]	@ (8008888 <prvCheckForValidListAndQueue+0x74>)
 8008844:	4a11      	ldr	r2, [pc, #68]	@ (800888c <prvCheckForValidListAndQueue+0x78>)
 8008846:	2110      	movs	r1, #16
 8008848:	200a      	movs	r0, #10
 800884a:	f7fe f905 	bl	8006a58 <xQueueGenericCreateStatic>
 800884e:	4603      	mov	r3, r0
 8008850:	4a08      	ldr	r2, [pc, #32]	@ (8008874 <prvCheckForValidListAndQueue+0x60>)
 8008852:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008854:	4b07      	ldr	r3, [pc, #28]	@ (8008874 <prvCheckForValidListAndQueue+0x60>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <prvCheckForValidListAndQueue+0x60>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	490b      	ldr	r1, [pc, #44]	@ (8008890 <prvCheckForValidListAndQueue+0x7c>)
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fd2a 	bl	80072bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008868:	f000 f978 	bl	8008b5c <vPortExitCritical>
}
 800886c:	bf00      	nop
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	200093dc 	.word	0x200093dc
 8008878:	200093ac 	.word	0x200093ac
 800887c:	200093c0 	.word	0x200093c0
 8008880:	200093d4 	.word	0x200093d4
 8008884:	200093d8 	.word	0x200093d8
 8008888:	20009488 	.word	0x20009488
 800888c:	200093e8 	.word	0x200093e8
 8008890:	0801a9bc 	.word	0x0801a9bc

08008894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	3b04      	subs	r3, #4
 80088a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80088ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f023 0201 	bic.w	r2, r3, #1
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3b04      	subs	r3, #4
 80088c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088c4:	4a0c      	ldr	r2, [pc, #48]	@ (80088f8 <pxPortInitialiseStack+0x64>)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3b14      	subs	r3, #20
 80088ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3b04      	subs	r3, #4
 80088da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f06f 0202 	mvn.w	r2, #2
 80088e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3b20      	subs	r3, #32
 80088e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088ea:	68fb      	ldr	r3, [r7, #12]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	080088fd 	.word	0x080088fd

080088fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008906:	4b13      	ldr	r3, [pc, #76]	@ (8008954 <prvTaskExitError+0x58>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800890e:	d00b      	beq.n	8008928 <prvTaskExitError+0x2c>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	e7fd      	b.n	8008924 <prvTaskExitError+0x28>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	60bb      	str	r3, [r7, #8]
}
 800893a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800893c:	bf00      	nop
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0fc      	beq.n	800893e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	200000d0 	.word	0x200000d0
	...

08008960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008960:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <pxCurrentTCBConst2>)
 8008962:	6819      	ldr	r1, [r3, #0]
 8008964:	6808      	ldr	r0, [r1, #0]
 8008966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896a:	f380 8809 	msr	PSP, r0
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f04f 0000 	mov.w	r0, #0
 8008976:	f380 8811 	msr	BASEPRI, r0
 800897a:	4770      	bx	lr
 800897c:	f3af 8000 	nop.w

08008980 <pxCurrentTCBConst2>:
 8008980:	20008eac 	.word	0x20008eac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop

08008988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008988:	4808      	ldr	r0, [pc, #32]	@ (80089ac <prvPortStartFirstTask+0x24>)
 800898a:	6800      	ldr	r0, [r0, #0]
 800898c:	6800      	ldr	r0, [r0, #0]
 800898e:	f380 8808 	msr	MSP, r0
 8008992:	f04f 0000 	mov.w	r0, #0
 8008996:	f380 8814 	msr	CONTROL, r0
 800899a:	b662      	cpsie	i
 800899c:	b661      	cpsie	f
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	df00      	svc	0
 80089a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089aa:	bf00      	nop
 80089ac:	e000ed08 	.word	0xe000ed08

080089b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089b6:	4b47      	ldr	r3, [pc, #284]	@ (8008ad4 <xPortStartScheduler+0x124>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a47      	ldr	r2, [pc, #284]	@ (8008ad8 <xPortStartScheduler+0x128>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d10b      	bne.n	80089d8 <xPortStartScheduler+0x28>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	613b      	str	r3, [r7, #16]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089d8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ad4 <xPortStartScheduler+0x124>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a3f      	ldr	r2, [pc, #252]	@ (8008adc <xPortStartScheduler+0x12c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d10b      	bne.n	80089fa <xPortStartScheduler+0x4a>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60fb      	str	r3, [r7, #12]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089fa:	4b39      	ldr	r3, [pc, #228]	@ (8008ae0 <xPortStartScheduler+0x130>)
 80089fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	22ff      	movs	r2, #255	@ 0xff
 8008a0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ae4 <xPortStartScheduler+0x134>)
 8008a20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a22:	4b31      	ldr	r3, [pc, #196]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a24:	2207      	movs	r2, #7
 8008a26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a28:	e009      	b.n	8008a3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	4a2d      	ldr	r2, [pc, #180]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a46:	2b80      	cmp	r3, #128	@ 0x80
 8008a48:	d0ef      	beq.n	8008a2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f1c3 0307 	rsb	r3, r3, #7
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d00b      	beq.n	8008a6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60bb      	str	r3, [r7, #8]
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	021b      	lsls	r3, r3, #8
 8008a74:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a78:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a80:	4a19      	ldr	r2, [pc, #100]	@ (8008ae8 <xPortStartScheduler+0x138>)
 8008a82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a8c:	4b17      	ldr	r3, [pc, #92]	@ (8008aec <xPortStartScheduler+0x13c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a16      	ldr	r2, [pc, #88]	@ (8008aec <xPortStartScheduler+0x13c>)
 8008a92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a98:	4b14      	ldr	r3, [pc, #80]	@ (8008aec <xPortStartScheduler+0x13c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a13      	ldr	r2, [pc, #76]	@ (8008aec <xPortStartScheduler+0x13c>)
 8008a9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008aa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008aa4:	f000 f8da 	bl	8008c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008aa8:	4b11      	ldr	r3, [pc, #68]	@ (8008af0 <xPortStartScheduler+0x140>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008aae:	f000 f8f9 	bl	8008ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ab2:	4b10      	ldr	r3, [pc, #64]	@ (8008af4 <xPortStartScheduler+0x144>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8008af4 <xPortStartScheduler+0x144>)
 8008ab8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008abc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008abe:	f7ff ff63 	bl	8008988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ac2:	f7ff f813 	bl	8007aec <vTaskSwitchContext>
	prvTaskExitError();
 8008ac6:	f7ff ff19 	bl	80088fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	e000ed00 	.word	0xe000ed00
 8008ad8:	410fc271 	.word	0x410fc271
 8008adc:	410fc270 	.word	0x410fc270
 8008ae0:	e000e400 	.word	0xe000e400
 8008ae4:	200094d8 	.word	0x200094d8
 8008ae8:	200094dc 	.word	0x200094dc
 8008aec:	e000ed20 	.word	0xe000ed20
 8008af0:	200000d0 	.word	0x200000d0
 8008af4:	e000ef34 	.word	0xe000ef34

08008af8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	607b      	str	r3, [r7, #4]
}
 8008b10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b12:	4b10      	ldr	r3, [pc, #64]	@ (8008b54 <vPortEnterCritical+0x5c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3301      	adds	r3, #1
 8008b18:	4a0e      	ldr	r2, [pc, #56]	@ (8008b54 <vPortEnterCritical+0x5c>)
 8008b1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b54 <vPortEnterCritical+0x5c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d110      	bne.n	8008b46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b24:	4b0c      	ldr	r3, [pc, #48]	@ (8008b58 <vPortEnterCritical+0x60>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	603b      	str	r3, [r7, #0]
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	e7fd      	b.n	8008b42 <vPortEnterCritical+0x4a>
	}
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	200000d0 	.word	0x200000d0
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b62:	4b12      	ldr	r3, [pc, #72]	@ (8008bac <vPortExitCritical+0x50>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <vPortExitCritical+0x26>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	607b      	str	r3, [r7, #4]
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	e7fd      	b.n	8008b7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b82:	4b0a      	ldr	r3, [pc, #40]	@ (8008bac <vPortExitCritical+0x50>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	4a08      	ldr	r2, [pc, #32]	@ (8008bac <vPortExitCritical+0x50>)
 8008b8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b8c:	4b07      	ldr	r3, [pc, #28]	@ (8008bac <vPortExitCritical+0x50>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d105      	bne.n	8008ba0 <vPortExitCritical+0x44>
 8008b94:	2300      	movs	r3, #0
 8008b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f383 8811 	msr	BASEPRI, r3
}
 8008b9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	200000d0 	.word	0x200000d0

08008bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bb0:	f3ef 8009 	mrs	r0, PSP
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	4b15      	ldr	r3, [pc, #84]	@ (8008c10 <pxCurrentTCBConst>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	f01e 0f10 	tst.w	lr, #16
 8008bc0:	bf08      	it	eq
 8008bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008bd4:	f380 8811 	msr	BASEPRI, r0
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f7fe ff84 	bl	8007aec <vTaskSwitchContext>
 8008be4:	f04f 0000 	mov.w	r0, #0
 8008be8:	f380 8811 	msr	BASEPRI, r0
 8008bec:	bc09      	pop	{r0, r3}
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	6808      	ldr	r0, [r1, #0]
 8008bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf6:	f01e 0f10 	tst.w	lr, #16
 8008bfa:	bf08      	it	eq
 8008bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c00:	f380 8809 	msr	PSP, r0
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	f3af 8000 	nop.w

08008c10 <pxCurrentTCBConst>:
 8008c10:	20008eac 	.word	0x20008eac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop

08008c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
}
 8008c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c32:	f7fe fea1 	bl	8007978 <xTaskIncrementTick>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <xPortSysTickHandler+0x40>)
 8008c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	2300      	movs	r3, #0
 8008c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	e000ed04 	.word	0xe000ed04

08008c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c60:	4b0b      	ldr	r3, [pc, #44]	@ (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <vPortSetupTimerInterrupt+0x38>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c98 <vPortSetupTimerInterrupt+0x3c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a0a      	ldr	r2, [pc, #40]	@ (8008c9c <vPortSetupTimerInterrupt+0x40>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	4a09      	ldr	r2, [pc, #36]	@ (8008ca0 <vPortSetupTimerInterrupt+0x44>)
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c7e:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <vPortSetupTimerInterrupt+0x34>)
 8008c80:	2207      	movs	r2, #7
 8008c82:	601a      	str	r2, [r3, #0]
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	e000e010 	.word	0xe000e010
 8008c94:	e000e018 	.word	0xe000e018
 8008c98:	20000004 	.word	0x20000004
 8008c9c:	10624dd3 	.word	0x10624dd3
 8008ca0:	e000e014 	.word	0xe000e014

08008ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008cb4 <vPortEnableVFP+0x10>
 8008ca8:	6801      	ldr	r1, [r0, #0]
 8008caa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008cae:	6001      	str	r1, [r0, #0]
 8008cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cb2:	bf00      	nop
 8008cb4:	e000ed88 	.word	0xe000ed88

08008cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cbe:	f3ef 8305 	mrs	r3, IPSR
 8008cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b0f      	cmp	r3, #15
 8008cc8:	d915      	bls.n	8008cf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cca:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <vPortValidateInterruptPriority+0x74>)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008cd4:	4b16      	ldr	r3, [pc, #88]	@ (8008d30 <vPortValidateInterruptPriority+0x78>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	7afa      	ldrb	r2, [r7, #11]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d20b      	bcs.n	8008cf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	607b      	str	r3, [r7, #4]
}
 8008cf0:	bf00      	nop
 8008cf2:	bf00      	nop
 8008cf4:	e7fd      	b.n	8008cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d34 <vPortValidateInterruptPriority+0x7c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8008d38 <vPortValidateInterruptPriority+0x80>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d90b      	bls.n	8008d1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	603b      	str	r3, [r7, #0]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <vPortValidateInterruptPriority+0x62>
	}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	e000e3f0 	.word	0xe000e3f0
 8008d30:	200094d8 	.word	0x200094d8
 8008d34:	e000ed0c 	.word	0xe000ed0c
 8008d38:	200094dc 	.word	0x200094dc

08008d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	@ 0x28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d48:	f7fe fd5a 	bl	8007800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ec0 <pvPortMalloc+0x184>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d54:	f000 f930 	bl	8008fb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d58:	4b5a      	ldr	r3, [pc, #360]	@ (8008ec4 <pvPortMalloc+0x188>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4013      	ands	r3, r2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f040 8095 	bne.w	8008e90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01e      	beq.n	8008daa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008d6c:	2208      	movs	r2, #8
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4413      	add	r3, r2
 8008d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d015      	beq.n	8008daa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f023 0307 	bic.w	r3, r3, #7
 8008d84:	3308      	adds	r3, #8
 8008d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <pvPortMalloc+0x6e>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	617b      	str	r3, [r7, #20]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d06f      	beq.n	8008e90 <pvPortMalloc+0x154>
 8008db0:	4b45      	ldr	r3, [pc, #276]	@ (8008ec8 <pvPortMalloc+0x18c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d86a      	bhi.n	8008e90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dba:	4b44      	ldr	r3, [pc, #272]	@ (8008ecc <pvPortMalloc+0x190>)
 8008dbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dbe:	4b43      	ldr	r3, [pc, #268]	@ (8008ecc <pvPortMalloc+0x190>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dc4:	e004      	b.n	8008dd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d903      	bls.n	8008de2 <pvPortMalloc+0xa6>
 8008dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f1      	bne.n	8008dc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008de2:	4b37      	ldr	r3, [pc, #220]	@ (8008ec0 <pvPortMalloc+0x184>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d051      	beq.n	8008e90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2208      	movs	r2, #8
 8008df2:	4413      	add	r3, r2
 8008df4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	1ad2      	subs	r2, r2, r3
 8008e06:	2308      	movs	r3, #8
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d920      	bls.n	8008e50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <pvPortMalloc+0xfc>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	613b      	str	r3, [r7, #16]
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	e7fd      	b.n	8008e34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	1ad2      	subs	r2, r2, r3
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e4a:	69b8      	ldr	r0, [r7, #24]
 8008e4c:	f000 f916 	bl	800907c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e50:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec8 <pvPortMalloc+0x18c>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec8 <pvPortMalloc+0x18c>)
 8008e5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ec8 <pvPortMalloc+0x18c>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b1b      	ldr	r3, [pc, #108]	@ (8008ed0 <pvPortMalloc+0x194>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d203      	bcs.n	8008e72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e6a:	4b17      	ldr	r3, [pc, #92]	@ (8008ec8 <pvPortMalloc+0x18c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a18      	ldr	r2, [pc, #96]	@ (8008ed0 <pvPortMalloc+0x194>)
 8008e70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	4b13      	ldr	r3, [pc, #76]	@ (8008ec4 <pvPortMalloc+0x188>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e86:	4b13      	ldr	r3, [pc, #76]	@ (8008ed4 <pvPortMalloc+0x198>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	4a11      	ldr	r2, [pc, #68]	@ (8008ed4 <pvPortMalloc+0x198>)
 8008e8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e90:	f7fe fcc4 	bl	800781c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <pvPortMalloc+0x17a>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	60fb      	str	r3, [r7, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <pvPortMalloc+0x176>
	return pvReturn;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3728      	adds	r7, #40	@ 0x28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20010a18 	.word	0x20010a18
 8008ec4:	20010a2c 	.word	0x20010a2c
 8008ec8:	20010a1c 	.word	0x20010a1c
 8008ecc:	20010a10 	.word	0x20010a10
 8008ed0:	20010a20 	.word	0x20010a20
 8008ed4:	20010a24 	.word	0x20010a24

08008ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d04f      	beq.n	8008f8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008eea:	2308      	movs	r3, #8
 8008eec:	425b      	negs	r3, r3
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	4b25      	ldr	r3, [pc, #148]	@ (8008f94 <vPortFree+0xbc>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4013      	ands	r3, r2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10b      	bne.n	8008f1e <vPortFree+0x46>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60fb      	str	r3, [r7, #12]
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <vPortFree+0x66>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	60bb      	str	r3, [r7, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	e7fd      	b.n	8008f3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	4b14      	ldr	r3, [pc, #80]	@ (8008f94 <vPortFree+0xbc>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4013      	ands	r3, r2
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01e      	beq.n	8008f8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d11a      	bne.n	8008f8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	4b0e      	ldr	r3, [pc, #56]	@ (8008f94 <vPortFree+0xbc>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	43db      	mvns	r3, r3
 8008f5e:	401a      	ands	r2, r3
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f64:	f7fe fc4c 	bl	8007800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f98 <vPortFree+0xc0>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	4a09      	ldr	r2, [pc, #36]	@ (8008f98 <vPortFree+0xc0>)
 8008f74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f76:	6938      	ldr	r0, [r7, #16]
 8008f78:	f000 f880 	bl	800907c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f7c:	4b07      	ldr	r3, [pc, #28]	@ (8008f9c <vPortFree+0xc4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3301      	adds	r3, #1
 8008f82:	4a06      	ldr	r2, [pc, #24]	@ (8008f9c <vPortFree+0xc4>)
 8008f84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f86:	f7fe fc49 	bl	800781c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f8a:	bf00      	nop
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20010a2c 	.word	0x20010a2c
 8008f98:	20010a1c 	.word	0x20010a1c
 8008f9c:	20010a28 	.word	0x20010a28

08008fa0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8008fa4:	4b03      	ldr	r3, [pc, #12]	@ (8008fb4 <xPortGetFreeHeapSize+0x14>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	20010a1c 	.word	0x20010a1c

08008fb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fbe:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008fc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fc4:	4b27      	ldr	r3, [pc, #156]	@ (8009064 <prvHeapInit+0xac>)
 8008fc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3307      	adds	r3, #7
 8008fd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0307 	bic.w	r3, r3, #7
 8008fde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8009064 <prvHeapInit+0xac>)
 8008fe8:	4413      	add	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8009068 <prvHeapInit+0xb0>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8009068 <prvHeapInit+0xb0>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	4413      	add	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009004:	2208      	movs	r2, #8
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	1a9b      	subs	r3, r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0307 	bic.w	r3, r3, #7
 8009012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4a15      	ldr	r2, [pc, #84]	@ (800906c <prvHeapInit+0xb4>)
 8009018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800901a:	4b14      	ldr	r3, [pc, #80]	@ (800906c <prvHeapInit+0xb4>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009022:	4b12      	ldr	r3, [pc, #72]	@ (800906c <prvHeapInit+0xb4>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	1ad2      	subs	r2, r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009038:	4b0c      	ldr	r3, [pc, #48]	@ (800906c <prvHeapInit+0xb4>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	4a0a      	ldr	r2, [pc, #40]	@ (8009070 <prvHeapInit+0xb8>)
 8009046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	4a09      	ldr	r2, [pc, #36]	@ (8009074 <prvHeapInit+0xbc>)
 800904e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009050:	4b09      	ldr	r3, [pc, #36]	@ (8009078 <prvHeapInit+0xc0>)
 8009052:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009056:	601a      	str	r2, [r3, #0]
}
 8009058:	bf00      	nop
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	200094e0 	.word	0x200094e0
 8009068:	20010a10 	.word	0x20010a10
 800906c:	20010a18 	.word	0x20010a18
 8009070:	20010a20 	.word	0x20010a20
 8009074:	20010a1c 	.word	0x20010a1c
 8009078:	20010a2c 	.word	0x20010a2c

0800907c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009084:	4b28      	ldr	r3, [pc, #160]	@ (8009128 <prvInsertBlockIntoFreeList+0xac>)
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e002      	b.n	8009090 <prvInsertBlockIntoFreeList+0x14>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d8f7      	bhi.n	800908a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	4413      	add	r3, r2
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d108      	bne.n	80090be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	441a      	add	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	441a      	add	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d118      	bne.n	8009104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	4b15      	ldr	r3, [pc, #84]	@ (800912c <prvInsertBlockIntoFreeList+0xb0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d00d      	beq.n	80090fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	441a      	add	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	e008      	b.n	800910c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090fa:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <prvInsertBlockIntoFreeList+0xb0>)
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	e003      	b.n	800910c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	429a      	cmp	r2, r3
 8009112:	d002      	beq.n	800911a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20010a10 	.word	0x20010a10
 800912c:	20010a18 	.word	0x20010a18

08009130 <arm_mat_mult_f32>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	460c      	mov	r4, r1
 8009136:	b08b      	sub	sp, #44	@ 0x2c
 8009138:	8825      	ldrh	r5, [r4, #0]
 800913a:	9107      	str	r1, [sp, #28]
 800913c:	8841      	ldrh	r1, [r0, #2]
 800913e:	8806      	ldrh	r6, [r0, #0]
 8009140:	6843      	ldr	r3, [r0, #4]
 8009142:	6857      	ldr	r7, [r2, #4]
 8009144:	6860      	ldr	r0, [r4, #4]
 8009146:	9602      	str	r6, [sp, #8]
 8009148:	428d      	cmp	r5, r1
 800914a:	8864      	ldrh	r4, [r4, #2]
 800914c:	f040 80f9 	bne.w	8009342 <arm_mat_mult_f32+0x212>
 8009150:	8811      	ldrh	r1, [r2, #0]
 8009152:	42b1      	cmp	r1, r6
 8009154:	f040 80f5 	bne.w	8009342 <arm_mat_mult_f32+0x212>
 8009158:	8851      	ldrh	r1, [r2, #2]
 800915a:	42a1      	cmp	r1, r4
 800915c:	f040 80f1 	bne.w	8009342 <arm_mat_mult_f32+0x212>
 8009160:	00aa      	lsls	r2, r5, #2
 8009162:	2901      	cmp	r1, #1
 8009164:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8009168:	ea4f 0481 	mov.w	r4, r1, lsl #2
 800916c:	f005 0e03 	and.w	lr, r5, #3
 8009170:	9206      	str	r2, [sp, #24]
 8009172:	d170      	bne.n	8009256 <arm_mat_mult_f32+0x126>
 8009174:	1d01      	adds	r1, r0, #4
 8009176:	9105      	str	r1, [sp, #20]
 8009178:	ea4f 110c 	mov.w	r1, ip, lsl #4
 800917c:	4602      	mov	r2, r0
 800917e:	f107 0904 	add.w	r9, r7, #4
 8009182:	9101      	str	r1, [sp, #4]
 8009184:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 8009188:	f103 0a10 	add.w	sl, r3, #16
 800918c:	f1aa 0310 	sub.w	r3, sl, #16
 8009190:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	f1a9 0704 	sub.w	r7, r9, #4
 800919a:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 800934c <arm_mat_mult_f32+0x21c>
 800919e:	f1bc 0f00 	cmp.w	ip, #0
 80091a2:	d052      	beq.n	800924a <arm_mat_mult_f32+0x11a>
 80091a4:	f102 0008 	add.w	r0, r2, #8
 80091a8:	4653      	mov	r3, sl
 80091aa:	4665      	mov	r5, ip
 80091ac:	4611      	mov	r1, r2
 80091ae:	ed13 6a04 	vldr	s12, [r3, #-16]
 80091b2:	ed91 7a00 	vldr	s14, [r1]
 80091b6:	ed53 4a03 	vldr	s9, [r3, #-12]
 80091ba:	edd0 6a00 	vldr	s13, [r0]
 80091be:	ed13 5a02 	vldr	s10, [r3, #-8]
 80091c2:	ed53 5a01 	vldr	s11, [r3, #-4]
 80091c6:	190e      	adds	r6, r1, r4
 80091c8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80091cc:	ed96 6a00 	vldr	s12, [r6]
 80091d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091d4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80091d8:	1906      	adds	r6, r0, r4
 80091da:	ee36 6a27 	vadd.f32	s12, s12, s15
 80091de:	ee26 7a85 	vmul.f32	s14, s13, s10
 80091e2:	edd6 7a00 	vldr	s15, [r6]
 80091e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80091ea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80091ee:	3d01      	subs	r5, #1
 80091f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091f4:	f101 0110 	add.w	r1, r1, #16
 80091f8:	f100 0010 	add.w	r0, r0, #16
 80091fc:	f103 0310 	add.w	r3, r3, #16
 8009200:	d1d5      	bne.n	80091ae <arm_mat_mult_f32+0x7e>
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	4659      	mov	r1, fp
 8009206:	441a      	add	r2, r3
 8009208:	f1be 0f00 	cmp.w	lr, #0
 800920c:	d00b      	beq.n	8009226 <arm_mat_mult_f32+0xf6>
 800920e:	4673      	mov	r3, lr
 8009210:	ed92 7a00 	vldr	s14, [r2]
 8009214:	ecf1 6a01 	vldmia	r1!, {s13}
 8009218:	ee27 7a26 	vmul.f32	s14, s14, s13
 800921c:	3b01      	subs	r3, #1
 800921e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009222:	4422      	add	r2, r4
 8009224:	d1f4      	bne.n	8009210 <arm_mat_mult_f32+0xe0>
 8009226:	ece7 7a01 	vstmia	r7!, {s15}
 800922a:	454f      	cmp	r7, r9
 800922c:	4642      	mov	r2, r8
 800922e:	f108 0804 	add.w	r8, r8, #4
 8009232:	d1b2      	bne.n	800919a <arm_mat_mult_f32+0x6a>
 8009234:	9b06      	ldr	r3, [sp, #24]
 8009236:	449b      	add	fp, r3
 8009238:	449a      	add	sl, r3
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	3b01      	subs	r3, #1
 800923e:	44a1      	add	r9, r4
 8009240:	9302      	str	r3, [sp, #8]
 8009242:	d004      	beq.n	800924e <arm_mat_mult_f32+0x11e>
 8009244:	9b07      	ldr	r3, [sp, #28]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	e7a0      	b.n	800918c <arm_mat_mult_f32+0x5c>
 800924a:	9903      	ldr	r1, [sp, #12]
 800924c:	e7dc      	b.n	8009208 <arm_mat_mult_f32+0xd8>
 800924e:	4618      	mov	r0, r3
 8009250:	b00b      	add	sp, #44	@ 0x2c
 8009252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009256:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 800925a:	0092      	lsls	r2, r2, #2
 800925c:	010e      	lsls	r6, r1, #4
 800925e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009260:	00ca      	lsls	r2, r1, #3
 8009262:	9204      	str	r2, [sp, #16]
 8009264:	fb06 f20c 	mul.w	r2, r6, ip
 8009268:	1d05      	adds	r5, r0, #4
 800926a:	9203      	str	r2, [sp, #12]
 800926c:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8009270:	eb07 0b04 	add.w	fp, r7, r4
 8009274:	9505      	str	r5, [sp, #20]
 8009276:	9201      	str	r2, [sp, #4]
 8009278:	f103 0a10 	add.w	sl, r3, #16
 800927c:	f1aa 0310 	sub.w	r3, sl, #16
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009284:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009288:	eb0b 0803 	add.w	r8, fp, r3
 800928c:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800934c <arm_mat_mult_f32+0x21c>
 8009290:	f1bc 0f00 	cmp.w	ip, #0
 8009294:	d053      	beq.n	800933e <arm_mat_mult_f32+0x20e>
 8009296:	9b04      	ldr	r3, [sp, #16]
 8009298:	4665      	mov	r5, ip
 800929a:	18c1      	adds	r1, r0, r3
 800929c:	4602      	mov	r2, r0
 800929e:	4653      	mov	r3, sl
 80092a0:	ed92 6a00 	vldr	s12, [r2]
 80092a4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80092a8:	ed53 4a03 	vldr	s9, [r3, #-12]
 80092ac:	ed53 6a02 	vldr	s13, [r3, #-8]
 80092b0:	ed91 5a00 	vldr	s10, [r1]
 80092b4:	ed53 5a01 	vldr	s11, [r3, #-4]
 80092b8:	1917      	adds	r7, r2, r4
 80092ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80092be:	ed97 6a00 	vldr	s12, [r7]
 80092c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092c6:	ee26 6a24 	vmul.f32	s12, s12, s9
 80092ca:	190f      	adds	r7, r1, r4
 80092cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80092d0:	ee26 7a85 	vmul.f32	s14, s13, s10
 80092d4:	edd7 7a00 	vldr	s15, [r7]
 80092d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80092dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80092e0:	3d01      	subs	r5, #1
 80092e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092e6:	4432      	add	r2, r6
 80092e8:	4431      	add	r1, r6
 80092ea:	f103 0310 	add.w	r3, r3, #16
 80092ee:	d1d7      	bne.n	80092a0 <arm_mat_mult_f32+0x170>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	9a01      	ldr	r2, [sp, #4]
 80092f4:	4418      	add	r0, r3
 80092f6:	f1be 0f00 	cmp.w	lr, #0
 80092fa:	d00b      	beq.n	8009314 <arm_mat_mult_f32+0x1e4>
 80092fc:	4673      	mov	r3, lr
 80092fe:	edd0 6a00 	vldr	s13, [r0]
 8009302:	ecb2 7a01 	vldmia	r2!, {s14}
 8009306:	ee27 7a26 	vmul.f32	s14, s14, s13
 800930a:	3b01      	subs	r3, #1
 800930c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009310:	4420      	add	r0, r4
 8009312:	d1f4      	bne.n	80092fe <arm_mat_mult_f32+0x1ce>
 8009314:	ece8 7a01 	vstmia	r8!, {s15}
 8009318:	45d8      	cmp	r8, fp
 800931a:	4648      	mov	r0, r9
 800931c:	f109 0904 	add.w	r9, r9, #4
 8009320:	d1b4      	bne.n	800928c <arm_mat_mult_f32+0x15c>
 8009322:	9a01      	ldr	r2, [sp, #4]
 8009324:	9b06      	ldr	r3, [sp, #24]
 8009326:	4611      	mov	r1, r2
 8009328:	4419      	add	r1, r3
 800932a:	449a      	add	sl, r3
 800932c:	9b02      	ldr	r3, [sp, #8]
 800932e:	9101      	str	r1, [sp, #4]
 8009330:	3b01      	subs	r3, #1
 8009332:	44a3      	add	fp, r4
 8009334:	9302      	str	r3, [sp, #8]
 8009336:	d08a      	beq.n	800924e <arm_mat_mult_f32+0x11e>
 8009338:	9b07      	ldr	r3, [sp, #28]
 800933a:	6858      	ldr	r0, [r3, #4]
 800933c:	e79e      	b.n	800927c <arm_mat_mult_f32+0x14c>
 800933e:	9a08      	ldr	r2, [sp, #32]
 8009340:	e7d9      	b.n	80092f6 <arm_mat_mult_f32+0x1c6>
 8009342:	f06f 0002 	mvn.w	r0, #2
 8009346:	b00b      	add	sp, #44	@ 0x2c
 8009348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934c:	00000000 	.word	0x00000000

08009350 <arm_mat_init_f32>:
 8009350:	8001      	strh	r1, [r0, #0]
 8009352:	8042      	strh	r2, [r0, #2]
 8009354:	6043      	str	r3, [r0, #4]
 8009356:	4770      	bx	lr

08009358 <handle_message_memory.constprop.4>:
 8009358:	b082      	sub	sp, #8
 800935a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935e:	b0a7      	sub	sp, #156	@ 0x9c
 8009360:	ac30      	add	r4, sp, #192	@ 0xc0
 8009362:	e884 000c 	stmia.w	r4, {r2, r3}
 8009366:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009368:	e9dd 9236 	ldrd	r9, r2, [sp, #216]	@ 0xd8
 800936c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800936e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009370:	e9dd a733 	ldrd	sl, r7, [sp, #204]	@ 0xcc
 8009374:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009376:	9314      	str	r3, [sp, #80]	@ 0x50
 8009378:	920d      	str	r2, [sp, #52]	@ 0x34
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 81a5 	beq.w	80096ca <handle_message_memory.constprop.4+0x372>
 8009380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	930a      	str	r3, [sp, #40]	@ 0x28
 8009386:	2b00      	cmp	r3, #0
 8009388:	d036      	beq.n	80093f8 <handle_message_memory.constprop.4+0xa0>
 800938a:	2300      	movs	r3, #0
 800938c:	930a      	str	r3, [sp, #40]	@ 0x28
 800938e:	469b      	mov	fp, r3
 8009390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009392:	691a      	ldr	r2, [r3, #16]
 8009394:	ebcb 110b 	rsb	r1, fp, fp, lsl #4
 8009398:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800939c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80093a0:	6899      	ldr	r1, [r3, #8]
 80093a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80093a4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80093a6:	7c1a      	ldrb	r2, [r3, #16]
 80093a8:	68d9      	ldr	r1, [r3, #12]
 80093aa:	791d      	ldrb	r5, [r3, #4]
 80093ac:	7e1c      	ldrb	r4, [r3, #24]
 80093ae:	9110      	str	r1, [sp, #64]	@ 0x40
 80093b0:	6959      	ldr	r1, [r3, #20]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80093b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80093b8:	2a00      	cmp	r2, #0
 80093ba:	d06e      	beq.n	800949a <handle_message_memory.constprop.4+0x142>
 80093bc:	2900      	cmp	r1, #0
 80093be:	f000 80c8 	beq.w	8009552 <handle_message_memory.constprop.4+0x1fa>
 80093c2:	2c00      	cmp	r4, #0
 80093c4:	f040 80c5 	bne.w	8009552 <handle_message_memory.constprop.4+0x1fa>
 80093c8:	940c      	str	r4, [sp, #48]	@ 0x30
 80093ca:	2f00      	cmp	r7, #0
 80093cc:	d168      	bne.n	80094a0 <handle_message_memory.constprop.4+0x148>
 80093ce:	2d10      	cmp	r5, #16
 80093d0:	f000 8084 	beq.w	80094dc <handle_message_memory.constprop.4+0x184>
 80093d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 80c0 	bne.w	800955c <handle_message_memory.constprop.4+0x204>
 80093dc:	2d12      	cmp	r5, #18
 80093de:	f000 8157 	beq.w	8009690 <handle_message_memory.constprop.4+0x338>
 80093e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e4:	2d64      	cmp	r5, #100	@ 0x64
 80093e6:	d00d      	beq.n	8009404 <handle_message_memory.constprop.4+0xac>
 80093e8:	2f00      	cmp	r7, #0
 80093ea:	d138      	bne.n	800945e <handle_message_memory.constprop.4+0x106>
 80093ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f10b 0b01 	add.w	fp, fp, #1
 80093f4:	459b      	cmp	fp, r3
 80093f6:	d3cb      	bcc.n	8009390 <handle_message_memory.constprop.4+0x38>
 80093f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093fa:	b027      	add	sp, #156	@ 0x9c
 80093fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	b002      	add	sp, #8
 8009402:	4770      	bx	lr
 8009404:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 814f 	beq.w	80096aa <handle_message_memory.constprop.4+0x352>
 800940c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800940e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009410:	4613      	mov	r3, r2
 8009412:	2a00      	cmp	r2, #0
 8009414:	bf08      	it	eq
 8009416:	460b      	moveq	r3, r1
 8009418:	930f      	str	r3, [sp, #60]	@ 0x3c
 800941a:	b1c7      	cbz	r7, 800944e <handle_message_memory.constprop.4+0xf6>
 800941c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800941e:	2400      	movs	r4, #0
 8009420:	1e5d      	subs	r5, r3, #1
 8009422:	f85a 6034 	ldr.w	r6, [sl, r4, lsl #3]
 8009426:	462a      	mov	r2, r5
 8009428:	4649      	mov	r1, r9
 800942a:	4630      	mov	r0, r6
 800942c:	f010 f8b5 	bl	801959a <memcmp>
 8009430:	4603      	mov	r3, r0
 8009432:	49a8      	ldr	r1, [pc, #672]	@ (80096d4 <handle_message_memory.constprop.4+0x37c>)
 8009434:	1970      	adds	r0, r6, r5
 8009436:	2205      	movs	r2, #5
 8009438:	eb0a 06c4 	add.w	r6, sl, r4, lsl #3
 800943c:	3401      	adds	r4, #1
 800943e:	b923      	cbnz	r3, 800944a <handle_message_memory.constprop.4+0xf2>
 8009440:	f010 f8ab 	bl	801959a <memcmp>
 8009444:	2800      	cmp	r0, #0
 8009446:	f000 8134 	beq.w	80096b2 <handle_message_memory.constprop.4+0x35a>
 800944a:	42a7      	cmp	r7, r4
 800944c:	d1e9      	bne.n	8009422 <handle_message_memory.constprop.4+0xca>
 800944e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 8009452:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009454:	fb01 3302 	mla	r3, r1, r2, r3
 8009458:	930a      	str	r3, [sp, #40]	@ 0x28
 800945a:	2f00      	cmp	r7, #0
 800945c:	d0c6      	beq.n	80093ec <handle_message_memory.constprop.4+0x94>
 800945e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009460:	f7f6 fece 	bl	8000200 <strlen>
 8009464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009466:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 800946a:	3001      	adds	r0, #1
 800946c:	9000      	str	r0, [sp, #0]
 800946e:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009470:	ae36      	add	r6, sp, #216	@ 0xd8
 8009472:	ac18      	add	r4, sp, #96	@ 0x60
 8009474:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009478:	4620      	mov	r0, r4
 800947a:	f003 fbaf 	bl	800cbdc <micro_ros_string_utilities_remove_tail_chars>
 800947e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009480:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	910d      	str	r1, [sp, #52]	@ 0x34
 8009488:	f10b 0b01 	add.w	fp, fp, #1
 800948c:	455b      	cmp	r3, fp
 800948e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8009492:	4681      	mov	r9, r0
 8009494:	f63f af7c 	bhi.w	8009390 <handle_message_memory.constprop.4+0x38>
 8009498:	e7ae      	b.n	80093f8 <handle_message_memory.constprop.4+0xa0>
 800949a:	920c      	str	r2, [sp, #48]	@ 0x30
 800949c:	2f00      	cmp	r7, #0
 800949e:	d096      	beq.n	80093ce <handle_message_memory.constprop.4+0x76>
 80094a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094a2:	9337      	str	r3, [sp, #220]	@ 0xdc
 80094a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094a6:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 80094aa:	ae36      	add	r6, sp, #216	@ 0xd8
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80094b2:	4630      	mov	r0, r6
 80094b4:	f003 fb64 	bl	800cb80 <micro_ros_string_utilities_append>
 80094b8:	4b87      	ldr	r3, [pc, #540]	@ (80096d8 <handle_message_memory.constprop.4+0x380>)
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	f10d 0860 	add.w	r8, sp, #96	@ 0x60
 80094c0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80094c4:	4640      	mov	r0, r8
 80094c6:	f003 fb5b 	bl	800cb80 <micro_ros_string_utilities_append>
 80094ca:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80094ce:	2d10      	cmp	r5, #16
 80094d0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80094d4:	4681      	mov	r9, r0
 80094d6:	910d      	str	r1, [sp, #52]	@ 0x34
 80094d8:	f47f af7c 	bne.w	80093d4 <handle_message_memory.constprop.4+0x7c>
 80094dc:	2c00      	cmp	r4, #0
 80094de:	f000 80c7 	beq.w	8009670 <handle_message_memory.constprop.4+0x318>
 80094e2:	2301      	movs	r3, #1
 80094e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80094e6:	2f00      	cmp	r7, #0
 80094e8:	d144      	bne.n	8009574 <handle_message_memory.constprop.4+0x21c>
 80094ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80094ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80094f0:	2d12      	cmp	r5, #18
 80094f2:	fb01 3302 	mla	r3, r1, r2, r3
 80094f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094f8:	f47f af74 	bne.w	80093e4 <handle_message_memory.constprop.4+0x8c>
 80094fc:	4b77      	ldr	r3, [pc, #476]	@ (80096dc <handle_message_memory.constprop.4+0x384>)
 80094fe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	f002 fd95 	bl	800c030 <get_message_typesupport_handle>
 8009506:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009508:	6845      	ldr	r5, [r0, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f040 80ea 	bne.w	80096e4 <handle_message_memory.constprop.4+0x38c>
 8009510:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009512:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009514:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
 8009518:	ae36      	add	r6, sp, #216	@ 0xd8
 800951a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800951e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009520:	9335      	str	r3, [sp, #212]	@ 0xd4
 8009522:	f10d 0810 	add.w	r8, sp, #16
 8009526:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009528:	9330      	str	r3, [sp, #192]	@ 0xc0
 800952a:	e9cd a733 	strd	sl, r7, [sp, #204]	@ 0xcc
 800952e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8009532:	ab32      	add	r3, sp, #200	@ 0xc8
 8009534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009536:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800953a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800953c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800953e:	4419      	add	r1, r3
 8009540:	ab30      	add	r3, sp, #192	@ 0xc0
 8009542:	cb0c      	ldmia	r3, {r2, r3}
 8009544:	4628      	mov	r0, r5
 8009546:	f7ff ff07 	bl	8009358 <handle_message_memory.constprop.4>
 800954a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800954c:	4403      	add	r3, r0
 800954e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009550:	e74a      	b.n	80093e8 <handle_message_memory.constprop.4+0x90>
 8009552:	2d10      	cmp	r5, #16
 8009554:	d07a      	beq.n	800964c <handle_message_memory.constprop.4+0x2f4>
 8009556:	2f00      	cmp	r7, #0
 8009558:	f040 8097 	bne.w	800968a <handle_message_memory.constprop.4+0x332>
 800955c:	2d12      	cmp	r5, #18
 800955e:	d029      	beq.n	80095b4 <handle_message_memory.constprop.4+0x25c>
 8009560:	2d64      	cmp	r5, #100	@ 0x64
 8009562:	d177      	bne.n	8009654 <handle_message_memory.constprop.4+0x2fc>
 8009564:	230c      	movs	r3, #12
 8009566:	9311      	str	r3, [sp, #68]	@ 0x44
 8009568:	2c00      	cmp	r4, #0
 800956a:	d079      	beq.n	8009660 <handle_message_memory.constprop.4+0x308>
 800956c:	2301      	movs	r3, #1
 800956e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009570:	2f00      	cmp	r7, #0
 8009572:	d0ba      	beq.n	80094ea <handle_message_memory.constprop.4+0x192>
 8009574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009576:	e9cd b515 	strd	fp, r5, [sp, #84]	@ 0x54
 800957a:	2400      	movs	r4, #0
 800957c:	1e5e      	subs	r6, r3, #1
 800957e:	f85a b034 	ldr.w	fp, [sl, r4, lsl #3]
 8009582:	4658      	mov	r0, fp
 8009584:	f7f6 fe3c 	bl	8000200 <strlen>
 8009588:	4649      	mov	r1, r9
 800958a:	4602      	mov	r2, r0
 800958c:	4658      	mov	r0, fp
 800958e:	f010 f804 	bl	801959a <memcmp>
 8009592:	4605      	mov	r5, r0
 8009594:	eb0a 08c4 	add.w	r8, sl, r4, lsl #3
 8009598:	4632      	mov	r2, r6
 800959a:	3401      	adds	r4, #1
 800959c:	4649      	mov	r1, r9
 800959e:	4658      	mov	r0, fp
 80095a0:	b91d      	cbnz	r5, 80095aa <handle_message_memory.constprop.4+0x252>
 80095a2:	f00f fffa 	bl	801959a <memcmp>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d079      	beq.n	800969e <handle_message_memory.constprop.4+0x346>
 80095aa:	42a7      	cmp	r7, r4
 80095ac:	d8e7      	bhi.n	800957e <handle_message_memory.constprop.4+0x226>
 80095ae:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 80095b2:	e79a      	b.n	80094ea <handle_message_memory.constprop.4+0x192>
 80095b4:	4b49      	ldr	r3, [pc, #292]	@ (80096dc <handle_message_memory.constprop.4+0x384>)
 80095b6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80095b8:	6819      	ldr	r1, [r3, #0]
 80095ba:	f002 fd39 	bl	800c030 <get_message_typesupport_handle>
 80095be:	6843      	ldr	r3, [r0, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	9311      	str	r3, [sp, #68]	@ 0x44
 80095c4:	b90c      	cbnz	r4, 80095ca <handle_message_memory.constprop.4+0x272>
 80095c6:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80095c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ca:	2f00      	cmp	r7, #0
 80095cc:	d14d      	bne.n	800966a <handle_message_memory.constprop.4+0x312>
 80095ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80095d4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80095d6:	fb04 3302 	mla	r3, r4, r2, r3
 80095da:	930a      	str	r3, [sp, #40]	@ 0x28
 80095dc:	4b3f      	ldr	r3, [pc, #252]	@ (80096dc <handle_message_memory.constprop.4+0x384>)
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	f002 fd26 	bl	800c030 <get_message_typesupport_handle>
 80095e4:	6845      	ldr	r5, [r0, #4]
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	f43f af00 	beq.w	80093ec <handle_message_memory.constprop.4+0x94>
 80095ec:	ab32      	add	r3, sp, #200	@ 0xc8
 80095ee:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 80095f2:	46cb      	mov	fp, r9
 80095f4:	46d1      	mov	r9, sl
 80095f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80095fc:	2400      	movs	r4, #0
 80095fe:	ae36      	add	r6, sp, #216	@ 0xd8
 8009600:	f10d 0810 	add.w	r8, sp, #16
 8009604:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009606:	9337      	str	r3, [sp, #220]	@ 0xdc
 8009608:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 800960c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009610:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009612:	9335      	str	r3, [sp, #212]	@ 0xd4
 8009614:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009616:	9330      	str	r3, [sp, #192]	@ 0xc0
 8009618:	e9cd 9733 	strd	r9, r7, [sp, #204]	@ 0xcc
 800961c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8009620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009624:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009628:	ab30      	add	r3, sp, #192	@ 0xc0
 800962a:	cb0c      	ldmia	r3, {r2, r3}
 800962c:	2100      	movs	r1, #0
 800962e:	4628      	mov	r0, r5
 8009630:	f7ff fe92 	bl	8009358 <handle_message_memory.constprop.4>
 8009634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009636:	3401      	adds	r4, #1
 8009638:	429c      	cmp	r4, r3
 800963a:	4482      	add	sl, r0
 800963c:	d1e2      	bne.n	8009604 <handle_message_memory.constprop.4+0x2ac>
 800963e:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8009642:	46ca      	mov	sl, r9
 8009644:	46d9      	mov	r9, fp
 8009646:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800964a:	e6cd      	b.n	80093e8 <handle_message_memory.constprop.4+0x90>
 800964c:	2301      	movs	r3, #1
 800964e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009650:	2564      	movs	r5, #100	@ 0x64
 8009652:	e6ba      	b.n	80093ca <handle_message_memory.constprop.4+0x72>
 8009654:	4b22      	ldr	r3, [pc, #136]	@ (80096e0 <handle_message_memory.constprop.4+0x388>)
 8009656:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800965a:	9311      	str	r3, [sp, #68]	@ 0x44
 800965c:	2c00      	cmp	r4, #0
 800965e:	d185      	bne.n	800956c <handle_message_memory.constprop.4+0x214>
 8009660:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8009662:	9309      	str	r3, [sp, #36]	@ 0x24
 8009664:	2301      	movs	r3, #1
 8009666:	930c      	str	r3, [sp, #48]	@ 0x30
 8009668:	e73d      	b.n	80094e6 <handle_message_memory.constprop.4+0x18e>
 800966a:	2301      	movs	r3, #1
 800966c:	930c      	str	r3, [sp, #48]	@ 0x30
 800966e:	e781      	b.n	8009574 <handle_message_memory.constprop.4+0x21c>
 8009670:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009672:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009674:	4613      	mov	r3, r2
 8009676:	2a00      	cmp	r2, #0
 8009678:	bf08      	it	eq
 800967a:	460b      	moveq	r3, r1
 800967c:	9309      	str	r3, [sp, #36]	@ 0x24
 800967e:	bb0f      	cbnz	r7, 80096c4 <handle_message_memory.constprop.4+0x36c>
 8009680:	461a      	mov	r2, r3
 8009682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009684:	4413      	add	r3, r2
 8009686:	930a      	str	r3, [sp, #40]	@ 0x28
 8009688:	e6b0      	b.n	80093ec <handle_message_memory.constprop.4+0x94>
 800968a:	2301      	movs	r3, #1
 800968c:	930c      	str	r3, [sp, #48]	@ 0x30
 800968e:	e707      	b.n	80094a0 <handle_message_memory.constprop.4+0x148>
 8009690:	4b12      	ldr	r3, [pc, #72]	@ (80096dc <handle_message_memory.constprop.4+0x384>)
 8009692:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009694:	6819      	ldr	r1, [r3, #0]
 8009696:	f002 fccb 	bl	800c030 <get_message_typesupport_handle>
 800969a:	6845      	ldr	r5, [r0, #4]
 800969c:	e738      	b.n	8009510 <handle_message_memory.constprop.4+0x1b8>
 800969e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096a4:	e9dd b515 	ldrd	fp, r5, [sp, #84]	@ 0x54
 80096a8:	e71f      	b.n	80094ea <handle_message_memory.constprop.4+0x192>
 80096aa:	a821      	add	r0, sp, #132	@ 0x84
 80096ac:	f001 fefe 	bl	800b4ac <rcutils_get_default_allocator>
 80096b0:	e6ac      	b.n	800940c <handle_message_memory.constprop.4+0xb4>
 80096b2:	6873      	ldr	r3, [r6, #4]
 80096b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 80096ba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096bc:	fb01 3302 	mla	r3, r1, r2, r3
 80096c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80096c2:	e6ca      	b.n	800945a <handle_message_memory.constprop.4+0x102>
 80096c4:	2301      	movs	r3, #1
 80096c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80096c8:	e754      	b.n	8009574 <handle_message_memory.constprop.4+0x21c>
 80096ca:	a81c      	add	r0, sp, #112	@ 0x70
 80096cc:	f001 feee 	bl	800b4ac <rcutils_get_default_allocator>
 80096d0:	e656      	b.n	8009380 <handle_message_memory.constprop.4+0x28>
 80096d2:	bf00      	nop
 80096d4:	0801aa28 	.word	0x0801aa28
 80096d8:	0801aa24 	.word	0x0801aa24
 80096dc:	20000170 	.word	0x20000170
 80096e0:	0801aa30 	.word	0x0801aa30
 80096e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d180      	bne.n	80095ec <handle_message_memory.constprop.4+0x294>
 80096ea:	e67d      	b.n	80093e8 <handle_message_memory.constprop.4+0x90>

080096ec <handle_message_memory.constprop.2>:
 80096ec:	b082      	sub	sp, #8
 80096ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f2:	ed2d 8b02 	vpush	{d8}
 80096f6:	b0a9      	sub	sp, #164	@ 0xa4
 80096f8:	ac34      	add	r4, sp, #208	@ 0xd0
 80096fa:	e884 000c 	stmia.w	r4, {r2, r3}
 80096fe:	e9dd b337 	ldrd	fp, r3, [sp, #220]	@ 0xdc
 8009702:	9216      	str	r2, [sp, #88]	@ 0x58
 8009704:	e9dd 723a 	ldrd	r7, r2, [sp, #232]	@ 0xe8
 8009708:	9308      	str	r3, [sp, #32]
 800970a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800970c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800970e:	9112      	str	r1, [sp, #72]	@ 0x48
 8009710:	9314      	str	r3, [sp, #80]	@ 0x50
 8009712:	920c      	str	r2, [sp, #48]	@ 0x30
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8210 	beq.w	8009b3a <handle_message_memory.constprop.2+0x44e>
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	9215      	str	r2, [sp, #84]	@ 0x54
 8009720:	ee08 3a10 	vmov	s16, r3
 8009724:	4603      	mov	r3, r0
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 81c0 	beq.w	8009aae <handle_message_memory.constprop.2+0x3c2>
 800972e:	2300      	movs	r3, #0
 8009730:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 8009734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009736:	691a      	ldr	r2, [r3, #16]
 8009738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 800973e:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 8009742:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009746:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009748:	e9d3 5102 	ldrd	r5, r1, [r3, #8]
 800974c:	7c1a      	ldrb	r2, [r3, #16]
 800974e:	791e      	ldrb	r6, [r3, #4]
 8009750:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8009754:	f893 9018 	ldrb.w	r9, [r3, #24]
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	9110      	str	r1, [sp, #64]	@ 0x40
 800975c:	930d      	str	r3, [sp, #52]	@ 0x34
 800975e:	2a00      	cmp	r2, #0
 8009760:	d056      	beq.n	8009810 <handle_message_memory.constprop.2+0x124>
 8009762:	f1b8 0f00 	cmp.w	r8, #0
 8009766:	d002      	beq.n	800976e <handle_message_memory.constprop.2+0x82>
 8009768:	f1b9 0f00 	cmp.w	r9, #0
 800976c:	d050      	beq.n	8009810 <handle_message_memory.constprop.2+0x124>
 800976e:	9b08      	ldr	r3, [sp, #32]
 8009770:	2e10      	cmp	r6, #16
 8009772:	bf08      	it	eq
 8009774:	2664      	moveq	r6, #100	@ 0x64
 8009776:	2b00      	cmp	r3, #0
 8009778:	f040 8154 	bne.w	8009a24 <handle_message_memory.constprop.2+0x338>
 800977c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800977e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009780:	2e12      	cmp	r6, #18
 8009782:	4413      	add	r3, r2
 8009784:	930e      	str	r3, [sp, #56]	@ 0x38
 8009786:	f000 80f8 	beq.w	800997a <handle_message_memory.constprop.2+0x28e>
 800978a:	2e64      	cmp	r6, #100	@ 0x64
 800978c:	f040 8164 	bne.w	8009a58 <handle_message_memory.constprop.2+0x36c>
 8009790:	f1b9 0f00 	cmp.w	r9, #0
 8009794:	f040 816b 	bne.w	8009a6e <handle_message_memory.constprop.2+0x382>
 8009798:	230c      	movs	r3, #12
 800979a:	9311      	str	r3, [sp, #68]	@ 0x44
 800979c:	2301      	movs	r3, #1
 800979e:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
 80097a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097a4:	9b08      	ldr	r3, [sp, #32]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d148      	bne.n	800983c <handle_message_memory.constprop.2+0x150>
 80097aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097ac:	fb03 f208 	mul.w	r2, r3, r8
 80097b0:	ee18 1a10 	vmov	r1, s16
 80097b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097b6:	9211      	str	r2, [sp, #68]	@ 0x44
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80097be:	6020      	str	r0, [r4, #0]
 80097c0:	2800      	cmp	r0, #0
 80097c2:	f000 8174 	beq.w	8009aae <handle_message_memory.constprop.2+0x3c2>
 80097c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80097ca:	2100      	movs	r1, #0
 80097cc:	4413      	add	r3, r2
 80097ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80097d0:	f00f ff0d 	bl	80195ee <memset>
 80097d4:	4623      	mov	r3, r4
 80097d6:	f8c4 8008 	str.w	r8, [r4, #8]
 80097da:	2e12      	cmp	r6, #18
 80097dc:	f04f 0400 	mov.w	r4, #0
 80097e0:	605c      	str	r4, [r3, #4]
 80097e2:	f000 80f4 	beq.w	80099ce <handle_message_memory.constprop.2+0x2e2>
 80097e6:	2e64      	cmp	r6, #100	@ 0x64
 80097e8:	d054      	beq.n	8009894 <handle_message_memory.constprop.2+0x1a8>
 80097ea:	9b08      	ldr	r3, [sp, #32]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f040 80a6 	bne.w	800993e <handle_message_memory.constprop.2+0x252>
 80097f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	3201      	adds	r2, #1
 80097fa:	429a      	cmp	r2, r3
 80097fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80097fe:	d399      	bcc.n	8009734 <handle_message_memory.constprop.2+0x48>
 8009800:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009802:	b029      	add	sp, #164	@ 0xa4
 8009804:	ecbd 8b02 	vpop	{d8}
 8009808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	b002      	add	sp, #8
 800980e:	4770      	bx	lr
 8009810:	9b08      	ldr	r3, [sp, #32]
 8009812:	2b00      	cmp	r3, #0
 8009814:	f040 80c1 	bne.w	800999a <handle_message_memory.constprop.2+0x2ae>
 8009818:	2e10      	cmp	r6, #16
 800981a:	d134      	bne.n	8009886 <handle_message_memory.constprop.2+0x19a>
 800981c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800981e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009820:	4413      	add	r3, r2
 8009822:	930e      	str	r3, [sp, #56]	@ 0x38
 8009824:	f1b9 0f00 	cmp.w	r9, #0
 8009828:	f000 8126 	beq.w	8009a78 <handle_message_memory.constprop.2+0x38c>
 800982c:	2300      	movs	r3, #0
 800982e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009830:	2301      	movs	r3, #1
 8009832:	9311      	str	r3, [sp, #68]	@ 0x44
 8009834:	9b08      	ldr	r3, [sp, #32]
 8009836:	2610      	movs	r6, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d0b6      	beq.n	80097aa <handle_message_memory.constprop.2+0xbe>
 800983c:	469a      	mov	sl, r3
 800983e:	e9cd 5818 	strd	r5, r8, [sp, #96]	@ 0x60
 8009842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009844:	9617      	str	r6, [sp, #92]	@ 0x5c
 8009846:	2400      	movs	r4, #0
 8009848:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 800984c:	f85b 6034 	ldr.w	r6, [fp, r4, lsl #3]
 8009850:	4630      	mov	r0, r6
 8009852:	f7f6 fcd5 	bl	8000200 <strlen>
 8009856:	4639      	mov	r1, r7
 8009858:	4602      	mov	r2, r0
 800985a:	4630      	mov	r0, r6
 800985c:	f00f fe9d 	bl	801959a <memcmp>
 8009860:	4605      	mov	r5, r0
 8009862:	eb0b 08c4 	add.w	r8, fp, r4, lsl #3
 8009866:	464a      	mov	r2, r9
 8009868:	3401      	adds	r4, #1
 800986a:	4639      	mov	r1, r7
 800986c:	4630      	mov	r0, r6
 800986e:	b925      	cbnz	r5, 800987a <handle_message_memory.constprop.2+0x18e>
 8009870:	f00f fe93 	bl	801959a <memcmp>
 8009874:	2800      	cmp	r0, #0
 8009876:	f000 811d 	beq.w	8009ab4 <handle_message_memory.constprop.2+0x3c8>
 800987a:	4554      	cmp	r4, sl
 800987c:	d1e6      	bne.n	800984c <handle_message_memory.constprop.2+0x160>
 800987e:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	@ 0x60
 8009882:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8009884:	e791      	b.n	80097aa <handle_message_memory.constprop.2+0xbe>
 8009886:	2e12      	cmp	r6, #18
 8009888:	f000 80fe 	beq.w	8009a88 <handle_message_memory.constprop.2+0x39c>
 800988c:	2e64      	cmp	r6, #100	@ 0x64
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	d1aa      	bne.n	80097ea <handle_message_memory.constprop.2+0xfe>
 8009894:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8146 	beq.w	8009b28 <handle_message_memory.constprop.2+0x43c>
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	691e      	ldr	r6, [r3, #16]
 80098a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80098a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	bf08      	it	eq
 80098a8:	461d      	moveq	r5, r3
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	b1eb      	cbz	r3, 80098ea <handle_message_memory.constprop.2+0x1fe>
 80098ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80098b0:	9510      	str	r5, [sp, #64]	@ 0x40
 80098b2:	f102 39ff 	add.w	r9, r2, #4294967295	@ 0xffffffff
 80098b6:	2400      	movs	r4, #0
 80098b8:	469a      	mov	sl, r3
 80098ba:	f85b 5034 	ldr.w	r5, [fp, r4, lsl #3]
 80098be:	464a      	mov	r2, r9
 80098c0:	4639      	mov	r1, r7
 80098c2:	4628      	mov	r0, r5
 80098c4:	f00f fe69 	bl	801959a <memcmp>
 80098c8:	4603      	mov	r3, r0
 80098ca:	49a1      	ldr	r1, [pc, #644]	@ (8009b50 <handle_message_memory.constprop.2+0x464>)
 80098cc:	eb05 0009 	add.w	r0, r5, r9
 80098d0:	2205      	movs	r2, #5
 80098d2:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80098d6:	3401      	adds	r4, #1
 80098d8:	b923      	cbnz	r3, 80098e4 <handle_message_memory.constprop.2+0x1f8>
 80098da:	f00f fe5e 	bl	801959a <memcmp>
 80098de:	2800      	cmp	r0, #0
 80098e0:	f000 8129 	beq.w	8009b36 <handle_message_memory.constprop.2+0x44a>
 80098e4:	4554      	cmp	r4, sl
 80098e6:	d1e8      	bne.n	80098ba <handle_message_memory.constprop.2+0x1ce>
 80098e8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80098ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098ee:	589c      	ldr	r4, [r3, r2]
 80098f0:	fb08 f305 	mul.w	r3, r8, r5
 80098f4:	930d      	str	r3, [sp, #52]	@ 0x34
 80098f6:	f1b8 0f00 	cmp.w	r8, #0
 80098fa:	d018      	beq.n	800992e <handle_message_memory.constprop.2+0x242>
 80098fc:	f04f 0a00 	mov.w	sl, #0
 8009900:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8009904:	46b3      	mov	fp, r6
 8009906:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8009908:	46d1      	mov	r9, sl
 800990a:	4659      	mov	r1, fp
 800990c:	4628      	mov	r0, r5
 800990e:	47b0      	blx	r6
 8009910:	f10a 0a01 	add.w	sl, sl, #1
 8009914:	e9c4 9501 	strd	r9, r5, [r4, #4]
 8009918:	6020      	str	r0, [r4, #0]
 800991a:	462a      	mov	r2, r5
 800991c:	2100      	movs	r1, #0
 800991e:	f00f fe66 	bl	80195ee <memset>
 8009922:	45c2      	cmp	sl, r8
 8009924:	f104 040c 	add.w	r4, r4, #12
 8009928:	d1ef      	bne.n	800990a <handle_message_memory.constprop.2+0x21e>
 800992a:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800992e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009932:	4413      	add	r3, r2
 8009934:	930a      	str	r3, [sp, #40]	@ 0x28
 8009936:	9b08      	ldr	r3, [sp, #32]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f43f af5a 	beq.w	80097f2 <handle_message_memory.constprop.2+0x106>
 800993e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8009940:	f7f6 fc5e 	bl	8000200 <strlen>
 8009944:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009946:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009948:	973a      	str	r7, [sp, #232]	@ 0xe8
 800994a:	3001      	adds	r0, #1
 800994c:	9000      	str	r0, [sp, #0]
 800994e:	933b      	str	r3, [sp, #236]	@ 0xec
 8009950:	ad1a      	add	r5, sp, #104	@ 0x68
 8009952:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009954:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009958:	3601      	adds	r6, #1
 800995a:	4628      	mov	r0, r5
 800995c:	9609      	str	r6, [sp, #36]	@ 0x24
 800995e:	f003 f93d 	bl	800cbdc <micro_ros_string_utilities_remove_tail_chars>
 8009962:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	910c      	str	r1, [sp, #48]	@ 0x30
 800996c:	429e      	cmp	r6, r3
 800996e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009972:	4607      	mov	r7, r0
 8009974:	f4ff aede 	bcc.w	8009734 <handle_message_memory.constprop.2+0x48>
 8009978:	e742      	b.n	8009800 <handle_message_memory.constprop.2+0x114>
 800997a:	4b76      	ldr	r3, [pc, #472]	@ (8009b54 <handle_message_memory.constprop.2+0x468>)
 800997c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	f002 fb56 	bl	800c030 <get_message_typesupport_handle>
 8009984:	6843      	ldr	r3, [r0, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	9311      	str	r3, [sp, #68]	@ 0x44
 800998a:	f1b9 0f00 	cmp.w	r9, #0
 800998e:	d16b      	bne.n	8009a68 <handle_message_memory.constprop.2+0x37c>
 8009990:	2301      	movs	r3, #1
 8009992:	f8dd 80d4 	ldr.w	r8, [sp, #212]	@ 0xd4
 8009996:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009998:	e704      	b.n	80097a4 <handle_message_memory.constprop.2+0xb8>
 800999a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800999c:	933b      	str	r3, [sp, #236]	@ 0xec
 800999e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a0:	973a      	str	r7, [sp, #232]	@ 0xe8
 80099a2:	ac3a      	add	r4, sp, #232	@ 0xe8
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80099aa:	4620      	mov	r0, r4
 80099ac:	f003 f8e8 	bl	800cb80 <micro_ros_string_utilities_append>
 80099b0:	4b69      	ldr	r3, [pc, #420]	@ (8009b58 <handle_message_memory.constprop.2+0x46c>)
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	af1a      	add	r7, sp, #104	@ 0x68
 80099b6:	4638      	mov	r0, r7
 80099b8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80099bc:	f003 f8e0 	bl	800cb80 <micro_ros_string_utilities_append>
 80099c0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80099c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099c8:	4607      	mov	r7, r0
 80099ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80099cc:	e724      	b.n	8009818 <handle_message_memory.constprop.2+0x12c>
 80099ce:	4b61      	ldr	r3, [pc, #388]	@ (8009b54 <handle_message_memory.constprop.2+0x468>)
 80099d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	f002 fb2c 	bl	800c030 <get_message_typesupport_handle>
 80099d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099da:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d16d      	bne.n	8009abe <handle_message_memory.constprop.2+0x3d2>
 80099e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099e4:	933b      	str	r3, [sp, #236]	@ 0xec
 80099e6:	973a      	str	r7, [sp, #232]	@ 0xe8
 80099e8:	ac3a      	add	r4, sp, #232	@ 0xe8
 80099ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80099ee:	9b08      	ldr	r3, [sp, #32]
 80099f0:	9338      	str	r3, [sp, #224]	@ 0xe0
 80099f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099f4:	9339      	str	r3, [sp, #228]	@ 0xe4
 80099f6:	f10d 0a10 	add.w	sl, sp, #16
 80099fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099fc:	9334      	str	r3, [sp, #208]	@ 0xd0
 80099fe:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
 8009a02:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009a06:	ae36      	add	r6, sp, #216	@ 0xd8
 8009a08:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009a0c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009a10:	ab34      	add	r3, sp, #208	@ 0xd0
 8009a12:	cb0c      	ldmia	r3, {r2, r3}
 8009a14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009a16:	4648      	mov	r0, r9
 8009a18:	f7ff fe68 	bl	80096ec <handle_message_memory.constprop.2>
 8009a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a1e:	4403      	add	r3, r0
 8009a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a22:	e6e2      	b.n	80097ea <handle_message_memory.constprop.2+0xfe>
 8009a24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a26:	933b      	str	r3, [sp, #236]	@ 0xec
 8009a28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a2a:	973a      	str	r7, [sp, #232]	@ 0xe8
 8009a2c:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009a34:	4620      	mov	r0, r4
 8009a36:	f003 f8a3 	bl	800cb80 <micro_ros_string_utilities_append>
 8009a3a:	4b47      	ldr	r3, [pc, #284]	@ (8009b58 <handle_message_memory.constprop.2+0x46c>)
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	af1a      	add	r7, sp, #104	@ 0x68
 8009a40:	4638      	mov	r0, r7
 8009a42:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009a46:	f003 f89b 	bl	800cb80 <micro_ros_string_utilities_append>
 8009a4a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009a52:	4607      	mov	r7, r0
 8009a54:	910c      	str	r1, [sp, #48]	@ 0x30
 8009a56:	e691      	b.n	800977c <handle_message_memory.constprop.2+0x90>
 8009a58:	4b40      	ldr	r3, [pc, #256]	@ (8009b5c <handle_message_memory.constprop.2+0x470>)
 8009a5a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009a5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a60:	f1b9 0f00 	cmp.w	r9, #0
 8009a64:	f43f ae9a 	beq.w	800979c <handle_message_memory.constprop.2+0xb0>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a6c:	e69a      	b.n	80097a4 <handle_message_memory.constprop.2+0xb8>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a72:	230c      	movs	r3, #12
 8009a74:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a76:	e695      	b.n	80097a4 <handle_message_memory.constprop.2+0xb8>
 8009a78:	b195      	cbz	r5, 8009aa0 <handle_message_memory.constprop.2+0x3b4>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8009a80:	46a8      	mov	r8, r5
 8009a82:	2610      	movs	r6, #16
 8009a84:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a86:	e68d      	b.n	80097a4 <handle_message_memory.constprop.2+0xb8>
 8009a88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a8c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009a8e:	4413      	add	r3, r2
 8009a90:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a92:	4b30      	ldr	r3, [pc, #192]	@ (8009b54 <handle_message_memory.constprop.2+0x468>)
 8009a94:	6819      	ldr	r1, [r3, #0]
 8009a96:	f002 facb 	bl	800c030 <get_message_typesupport_handle>
 8009a9a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8009a9e:	e7a0      	b.n	80099e2 <handle_message_memory.constprop.2+0x2f6>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009aa6:	9513      	str	r5, [sp, #76]	@ 0x4c
 8009aa8:	2610      	movs	r6, #16
 8009aaa:	9311      	str	r3, [sp, #68]	@ 0x44
 8009aac:	e67a      	b.n	80097a4 <handle_message_memory.constprop.2+0xb8>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ab2:	e6a5      	b.n	8009800 <handle_message_memory.constprop.2+0x114>
 8009ab4:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	@ 0x5c
 8009ab8:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8009abc:	e675      	b.n	80097aa <handle_message_memory.constprop.2+0xbe>
 8009abe:	f1b8 0f00 	cmp.w	r8, #0
 8009ac2:	f43f ae92 	beq.w	80097ea <handle_message_memory.constprop.2+0xfe>
 8009ac6:	4625      	mov	r5, r4
 8009ac8:	ac3a      	add	r4, sp, #232	@ 0xe8
 8009aca:	940d      	str	r4, [sp, #52]	@ 0x34
 8009acc:	465c      	mov	r4, fp
 8009ace:	46bb      	mov	fp, r7
 8009ad0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8009ad2:	f10d 0a10 	add.w	sl, sp, #16
 8009ad6:	ae36      	add	r6, sp, #216	@ 0xd8
 8009ad8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ada:	933b      	str	r3, [sp, #236]	@ 0xec
 8009adc:	9b08      	ldr	r3, [sp, #32]
 8009ade:	9338      	str	r3, [sp, #224]	@ 0xe0
 8009ae0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ae2:	9339      	str	r3, [sp, #228]	@ 0xe4
 8009ae4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ae6:	9334      	str	r3, [sp, #208]	@ 0xd0
 8009ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aea:	f8cd b0e8 	str.w	fp, [sp, #232]	@ 0xe8
 8009aee:	f8d3 c000 	ldr.w	ip, [r3]
 8009af2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009af4:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8009af8:	9437      	str	r4, [sp, #220]	@ 0xdc
 8009afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009afe:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8009b02:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8009b06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b0a:	ab34      	add	r3, sp, #208	@ 0xd0
 8009b0c:	fb0e c105 	mla	r1, lr, r5, ip
 8009b10:	cb0c      	ldmia	r3, {r2, r3}
 8009b12:	4648      	mov	r0, r9
 8009b14:	f7ff fdea 	bl	80096ec <handle_message_memory.constprop.2>
 8009b18:	3501      	adds	r5, #1
 8009b1a:	45a8      	cmp	r8, r5
 8009b1c:	4407      	add	r7, r0
 8009b1e:	d1db      	bne.n	8009ad8 <handle_message_memory.constprop.2+0x3ec>
 8009b20:	970a      	str	r7, [sp, #40]	@ 0x28
 8009b22:	465f      	mov	r7, fp
 8009b24:	46a3      	mov	fp, r4
 8009b26:	e660      	b.n	80097ea <handle_message_memory.constprop.2+0xfe>
 8009b28:	a823      	add	r0, sp, #140	@ 0x8c
 8009b2a:	f001 fcbf 	bl	800b4ac <rcutils_get_default_allocator>
 8009b2e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b30:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8009b32:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b34:	e6b5      	b.n	80098a2 <handle_message_memory.constprop.2+0x1b6>
 8009b36:	686d      	ldr	r5, [r5, #4]
 8009b38:	e6d7      	b.n	80098ea <handle_message_memory.constprop.2+0x1fe>
 8009b3a:	a81e      	add	r0, sp, #120	@ 0x78
 8009b3c:	f001 fcb6 	bl	800b4ac <rcutils_get_default_allocator>
 8009b40:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009b42:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009b46:	ee08 3a10 	vmov	s16, r3
 8009b4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b4c:	e5eb      	b.n	8009726 <handle_message_memory.constprop.2+0x3a>
 8009b4e:	bf00      	nop
 8009b50:	0801aa28 	.word	0x0801aa28
 8009b54:	20000170 	.word	0x20000170
 8009b58:	0801aa24 	.word	0x0801aa24
 8009b5c:	0801aa30 	.word	0x0801aa30

08009b60 <get_longest_member_name>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	ed2d 8b06 	vpush	{d8-d10}
 8009b68:	6885      	ldr	r5, [r0, #8]
 8009b6a:	b099      	sub	sp, #100	@ 0x64
 8009b6c:	2d00      	cmp	r5, #0
 8009b6e:	f000 810f 	beq.w	8009d90 <get_longest_member_name+0x230>
 8009b72:	f04f 0a00 	mov.w	sl, #0
 8009b76:	46d3      	mov	fp, sl
 8009b78:	f8cd a004 	str.w	sl, [sp, #4]
 8009b7c:	9003      	str	r0, [sp, #12]
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	eb03 020a 	add.w	r2, r3, sl
 8009b86:	f853 700a 	ldr.w	r7, [r3, sl]
 8009b8a:	7913      	ldrb	r3, [r2, #4]
 8009b8c:	2b12      	cmp	r3, #18
 8009b8e:	d018      	beq.n	8009bc2 <get_longest_member_name+0x62>
 8009b90:	f04f 0900 	mov.w	r9, #0
 8009b94:	4638      	mov	r0, r7
 8009b96:	f7f6 fb33 	bl	8000200 <strlen>
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	4448      	add	r0, r9
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	4283      	cmp	r3, r0
 8009ba2:	f10b 0b01 	add.w	fp, fp, #1
 8009ba6:	bf38      	it	cc
 8009ba8:	4603      	movcc	r3, r0
 8009baa:	455d      	cmp	r5, fp
 8009bac:	9301      	str	r3, [sp, #4]
 8009bae:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009bb2:	d8e4      	bhi.n	8009b7e <get_longest_member_name+0x1e>
 8009bb4:	469b      	mov	fp, r3
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	b019      	add	sp, #100	@ 0x64
 8009bba:	ecbd 8b06 	vpop	{d8-d10}
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc2:	4bbc      	ldr	r3, [pc, #752]	@ (8009eb4 <get_longest_member_name+0x354>)
 8009bc4:	68d0      	ldr	r0, [r2, #12]
 8009bc6:	6819      	ldr	r1, [r3, #0]
 8009bc8:	f002 fa32 	bl	800c030 <get_message_typesupport_handle>
 8009bcc:	6843      	ldr	r3, [r0, #4]
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	689d      	ldr	r5, [r3, #8]
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	f000 811a 	beq.w	8009e0c <get_longest_member_name+0x2ac>
 8009bd8:	f04f 0800 	mov.w	r8, #0
 8009bdc:	ee08 7a10 	vmov	s16, r7
 8009be0:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8009be4:	46c1      	mov	r9, r8
 8009be6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009bea:	f8cd 8008 	str.w	r8, [sp, #8]
 8009bee:	46c2      	mov	sl, r8
 8009bf0:	9b05      	ldr	r3, [sp, #20]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	eb03 020a 	add.w	r2, r3, sl
 8009bf8:	f853 300a 	ldr.w	r3, [r3, sl]
 8009bfc:	ee0a 3a10 	vmov	s20, r3
 8009c00:	7913      	ldrb	r3, [r2, #4]
 8009c02:	2b12      	cmp	r3, #18
 8009c04:	d01b      	beq.n	8009c3e <get_longest_member_name+0xde>
 8009c06:	2700      	movs	r7, #0
 8009c08:	ee1a 0a10 	vmov	r0, s20
 8009c0c:	f7f6 faf8 	bl	8000200 <strlen>
 8009c10:	9b02      	ldr	r3, [sp, #8]
 8009c12:	4438      	add	r0, r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	4283      	cmp	r3, r0
 8009c18:	f109 0901 	add.w	r9, r9, #1
 8009c1c:	bf38      	it	cc
 8009c1e:	4603      	movcc	r3, r0
 8009c20:	45a9      	cmp	r9, r5
 8009c22:	9302      	str	r3, [sp, #8]
 8009c24:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009c28:	d3e2      	bcc.n	8009bf0 <get_longest_member_name+0x90>
 8009c2a:	4699      	mov	r9, r3
 8009c2c:	9b03      	ldr	r3, [sp, #12]
 8009c2e:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8009c32:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 8009c36:	689d      	ldr	r5, [r3, #8]
 8009c38:	ee18 7a10 	vmov	r7, s16
 8009c3c:	e7aa      	b.n	8009b94 <get_longest_member_name+0x34>
 8009c3e:	4b9d      	ldr	r3, [pc, #628]	@ (8009eb4 <get_longest_member_name+0x354>)
 8009c40:	68d0      	ldr	r0, [r2, #12]
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	f002 f9f4 	bl	800c030 <get_message_typesupport_handle>
 8009c48:	6843      	ldr	r3, [r0, #4]
 8009c4a:	9307      	str	r3, [sp, #28]
 8009c4c:	689d      	ldr	r5, [r3, #8]
 8009c4e:	2d00      	cmp	r5, #0
 8009c50:	f000 80a5 	beq.w	8009d9e <get_longest_member_name+0x23e>
 8009c54:	f04f 0b00 	mov.w	fp, #0
 8009c58:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8009c5c:	46d8      	mov	r8, fp
 8009c5e:	f8cd b010 	str.w	fp, [sp, #16]
 8009c62:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8009c66:	46d9      	mov	r9, fp
 8009c68:	9b07      	ldr	r3, [sp, #28]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	eb03 0209 	add.w	r2, r3, r9
 8009c70:	f853 7009 	ldr.w	r7, [r3, r9]
 8009c74:	7913      	ldrb	r3, [r2, #4]
 8009c76:	2b12      	cmp	r3, #18
 8009c78:	d019      	beq.n	8009cae <get_longest_member_name+0x14e>
 8009c7a:	f04f 0a00 	mov.w	sl, #0
 8009c7e:	4638      	mov	r0, r7
 8009c80:	f7f6 fabe 	bl	8000200 <strlen>
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	4450      	add	r0, sl
 8009c88:	3001      	adds	r0, #1
 8009c8a:	4283      	cmp	r3, r0
 8009c8c:	f108 0801 	add.w	r8, r8, #1
 8009c90:	bf38      	it	cc
 8009c92:	4603      	movcc	r3, r0
 8009c94:	45a8      	cmp	r8, r5
 8009c96:	9304      	str	r3, [sp, #16]
 8009c98:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 8009c9c:	d3e4      	bcc.n	8009c68 <get_longest_member_name+0x108>
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8009ca6:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8009caa:	689d      	ldr	r5, [r3, #8]
 8009cac:	e7ac      	b.n	8009c08 <get_longest_member_name+0xa8>
 8009cae:	4b81      	ldr	r3, [pc, #516]	@ (8009eb4 <get_longest_member_name+0x354>)
 8009cb0:	68d0      	ldr	r0, [r2, #12]
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	f002 f9bc 	bl	800c030 <get_message_typesupport_handle>
 8009cb8:	6843      	ldr	r3, [r0, #4]
 8009cba:	9308      	str	r3, [sp, #32]
 8009cbc:	689d      	ldr	r5, [r3, #8]
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	f000 80f2 	beq.w	8009ea8 <get_longest_member_name+0x348>
 8009cc4:	f04f 0b00 	mov.w	fp, #0
 8009cc8:	ee08 7a90 	vmov	s17, r7
 8009ccc:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 8009cd0:	46da      	mov	sl, fp
 8009cd2:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8009cd6:	f8cd b018 	str.w	fp, [sp, #24]
 8009cda:	46d9      	mov	r9, fp
 8009cdc:	9b08      	ldr	r3, [sp, #32]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	eb03 020a 	add.w	r2, r3, sl
 8009ce4:	f853 700a 	ldr.w	r7, [r3, sl]
 8009ce8:	7913      	ldrb	r3, [r2, #4]
 8009cea:	2b12      	cmp	r3, #18
 8009cec:	d01b      	beq.n	8009d26 <get_longest_member_name+0x1c6>
 8009cee:	f04f 0b00 	mov.w	fp, #0
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	f7f6 fa84 	bl	8000200 <strlen>
 8009cf8:	9b06      	ldr	r3, [sp, #24]
 8009cfa:	4458      	add	r0, fp
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	4283      	cmp	r3, r0
 8009d00:	f109 0901 	add.w	r9, r9, #1
 8009d04:	bf38      	it	cc
 8009d06:	4603      	movcc	r3, r0
 8009d08:	45a9      	cmp	r9, r5
 8009d0a:	9306      	str	r3, [sp, #24]
 8009d0c:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 8009d10:	d3e4      	bcc.n	8009cdc <get_longest_member_name+0x17c>
 8009d12:	469a      	mov	sl, r3
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8009d1a:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8009d1e:	689d      	ldr	r5, [r3, #8]
 8009d20:	ee18 7a90 	vmov	r7, s17
 8009d24:	e7ab      	b.n	8009c7e <get_longest_member_name+0x11e>
 8009d26:	4b63      	ldr	r3, [pc, #396]	@ (8009eb4 <get_longest_member_name+0x354>)
 8009d28:	68d0      	ldr	r0, [r2, #12]
 8009d2a:	6819      	ldr	r1, [r3, #0]
 8009d2c:	f002 f980 	bl	800c030 <get_message_typesupport_handle>
 8009d30:	6843      	ldr	r3, [r0, #4]
 8009d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d34:	689d      	ldr	r5, [r3, #8]
 8009d36:	2d00      	cmp	r5, #0
 8009d38:	f000 80b9 	beq.w	8009eae <get_longest_member_name+0x34e>
 8009d3c:	f04f 0800 	mov.w	r8, #0
 8009d40:	ee09 7a10 	vmov	s18, r7
 8009d44:	e9cd 9a11 	strd	r9, sl, [sp, #68]	@ 0x44
 8009d48:	46c3      	mov	fp, r8
 8009d4a:	46c2      	mov	sl, r8
 8009d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	eb03 0208 	add.w	r2, r3, r8
 8009d54:	f853 9008 	ldr.w	r9, [r3, r8]
 8009d58:	7913      	ldrb	r3, [r2, #4]
 8009d5a:	2b12      	cmp	r3, #18
 8009d5c:	d022      	beq.n	8009da4 <get_longest_member_name+0x244>
 8009d5e:	2700      	movs	r7, #0
 8009d60:	4648      	mov	r0, r9
 8009d62:	f7f6 fa4d 	bl	8000200 <strlen>
 8009d66:	4438      	add	r0, r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	4582      	cmp	sl, r0
 8009d6c:	f10b 0b01 	add.w	fp, fp, #1
 8009d70:	bf38      	it	cc
 8009d72:	4682      	movcc	sl, r0
 8009d74:	45ab      	cmp	fp, r5
 8009d76:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 8009d7a:	d3e7      	bcc.n	8009d4c <get_longest_member_name+0x1ec>
 8009d7c:	9b08      	ldr	r3, [sp, #32]
 8009d7e:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8009d82:	689d      	ldr	r5, [r3, #8]
 8009d84:	46d3      	mov	fp, sl
 8009d86:	ee19 7a10 	vmov	r7, s18
 8009d8a:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8009d8e:	e7b0      	b.n	8009cf2 <get_longest_member_name+0x192>
 8009d90:	46ab      	mov	fp, r5
 8009d92:	4658      	mov	r0, fp
 8009d94:	b019      	add	sp, #100	@ 0x64
 8009d96:	ecbd 8b06 	vpop	{d8-d10}
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	9b05      	ldr	r3, [sp, #20]
 8009da0:	689d      	ldr	r5, [r3, #8]
 8009da2:	e730      	b.n	8009c06 <get_longest_member_name+0xa6>
 8009da4:	4b43      	ldr	r3, [pc, #268]	@ (8009eb4 <get_longest_member_name+0x354>)
 8009da6:	68d0      	ldr	r0, [r2, #12]
 8009da8:	6819      	ldr	r1, [r3, #0]
 8009daa:	f002 f941 	bl	800c030 <get_message_typesupport_handle>
 8009dae:	6843      	ldr	r3, [r0, #4]
 8009db0:	689e      	ldr	r6, [r3, #8]
 8009db2:	461a      	mov	r2, r3
 8009db4:	2e00      	cmp	r6, #0
 8009db6:	d07f      	beq.n	8009eb8 <get_longest_member_name+0x358>
 8009db8:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
 8009dbc:	2400      	movs	r4, #0
 8009dbe:	ee09 9a90 	vmov	s19, r9
 8009dc2:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 8009dc6:	4627      	mov	r7, r4
 8009dc8:	4691      	mov	r9, r2
 8009dca:	46a0      	mov	r8, r4
 8009dcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009dd0:	191a      	adds	r2, r3, r4
 8009dd2:	f853 b004 	ldr.w	fp, [r3, r4]
 8009dd6:	7913      	ldrb	r3, [r2, #4]
 8009dd8:	2b12      	cmp	r3, #18
 8009dda:	d01a      	beq.n	8009e12 <get_longest_member_name+0x2b2>
 8009ddc:	2500      	movs	r5, #0
 8009dde:	4658      	mov	r0, fp
 8009de0:	f7f6 fa0e 	bl	8000200 <strlen>
 8009de4:	4405      	add	r5, r0
 8009de6:	3501      	adds	r5, #1
 8009de8:	42af      	cmp	r7, r5
 8009dea:	f108 0801 	add.w	r8, r8, #1
 8009dee:	bf38      	it	cc
 8009df0:	462f      	movcc	r7, r5
 8009df2:	45b0      	cmp	r8, r6
 8009df4:	f104 043c 	add.w	r4, r4, #60	@ 0x3c
 8009df8:	d3e8      	bcc.n	8009dcc <get_longest_member_name+0x26c>
 8009dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfc:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 8009e00:	689d      	ldr	r5, [r3, #8]
 8009e02:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
 8009e06:	ee19 9a90 	vmov	r9, s19
 8009e0a:	e7a9      	b.n	8009d60 <get_longest_member_name+0x200>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	689d      	ldr	r5, [r3, #8]
 8009e10:	e6be      	b.n	8009b90 <get_longest_member_name+0x30>
 8009e12:	4b28      	ldr	r3, [pc, #160]	@ (8009eb4 <get_longest_member_name+0x354>)
 8009e14:	68d0      	ldr	r0, [r2, #12]
 8009e16:	6819      	ldr	r1, [r3, #0]
 8009e18:	f002 f90a 	bl	800c030 <get_message_typesupport_handle>
 8009e1c:	6843      	ldr	r3, [r0, #4]
 8009e1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e20:	6899      	ldr	r1, [r3, #8]
 8009e22:	2900      	cmp	r1, #0
 8009e24:	d04b      	beq.n	8009ebe <get_longest_member_name+0x35e>
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	9416      	str	r4, [sp, #88]	@ 0x58
 8009e2a:	2600      	movs	r6, #0
 8009e2c:	ee0a ba90 	vmov	s21, fp
 8009e30:	46b2      	mov	sl, r6
 8009e32:	46b3      	mov	fp, r6
 8009e34:	460c      	mov	r4, r1
 8009e36:	461d      	mov	r5, r3
 8009e38:	19aa      	adds	r2, r5, r6
 8009e3a:	59ab      	ldr	r3, [r5, r6]
 8009e3c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8009e40:	f1bc 0f12 	cmp.w	ip, #18
 8009e44:	4618      	mov	r0, r3
 8009e46:	d012      	beq.n	8009e6e <get_longest_member_name+0x30e>
 8009e48:	f7f6 f9da 	bl	8000200 <strlen>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	4583      	cmp	fp, r0
 8009e50:	f10a 0a01 	add.w	sl, sl, #1
 8009e54:	bf38      	it	cc
 8009e56:	4683      	movcc	fp, r0
 8009e58:	45a2      	cmp	sl, r4
 8009e5a:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009e5e:	d3eb      	bcc.n	8009e38 <get_longest_member_name+0x2d8>
 8009e60:	465d      	mov	r5, fp
 8009e62:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8009e64:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009e68:	ee1a ba90 	vmov	fp, s21
 8009e6c:	e7b7      	b.n	8009dde <get_longest_member_name+0x27e>
 8009e6e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009e70:	4b10      	ldr	r3, [pc, #64]	@ (8009eb4 <get_longest_member_name+0x354>)
 8009e72:	68d0      	ldr	r0, [r2, #12]
 8009e74:	6819      	ldr	r1, [r3, #0]
 8009e76:	f002 f8db 	bl	800c030 <get_message_typesupport_handle>
 8009e7a:	6840      	ldr	r0, [r0, #4]
 8009e7c:	f7ff fe70 	bl	8009b60 <get_longest_member_name>
 8009e80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e82:	4605      	mov	r5, r0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f6 f9bb 	bl	8000200 <strlen>
 8009e8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e8c:	4405      	add	r5, r0
 8009e8e:	3501      	adds	r5, #1
 8009e90:	689c      	ldr	r4, [r3, #8]
 8009e92:	45ab      	cmp	fp, r5
 8009e94:	f10a 0a01 	add.w	sl, sl, #1
 8009e98:	bf38      	it	cc
 8009e9a:	46ab      	movcc	fp, r5
 8009e9c:	4554      	cmp	r4, sl
 8009e9e:	f106 063c 	add.w	r6, r6, #60	@ 0x3c
 8009ea2:	d9dd      	bls.n	8009e60 <get_longest_member_name+0x300>
 8009ea4:	691d      	ldr	r5, [r3, #16]
 8009ea6:	e7c7      	b.n	8009e38 <get_longest_member_name+0x2d8>
 8009ea8:	9b07      	ldr	r3, [sp, #28]
 8009eaa:	689d      	ldr	r5, [r3, #8]
 8009eac:	e6e5      	b.n	8009c7a <get_longest_member_name+0x11a>
 8009eae:	9b08      	ldr	r3, [sp, #32]
 8009eb0:	689d      	ldr	r5, [r3, #8]
 8009eb2:	e71c      	b.n	8009cee <get_longest_member_name+0x18e>
 8009eb4:	20000170 	.word	0x20000170
 8009eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eba:	689d      	ldr	r5, [r3, #8]
 8009ebc:	e74f      	b.n	8009d5e <get_longest_member_name+0x1fe>
 8009ebe:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8009ec2:	e78b      	b.n	8009ddc <get_longest_member_name+0x27c>

08009ec4 <micro_ros_utilities_get_dynamic_size>:
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eca:	ed2d 8b02 	vpush	{d8}
 8009ece:	b09f      	sub	sp, #124	@ 0x7c
 8009ed0:	ac2b      	add	r4, sp, #172	@ 0xac
 8009ed2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8009edc:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 8009ede:	941c      	str	r4, [sp, #112]	@ 0x70
 8009ee0:	bf08      	it	eq
 8009ee2:	2105      	moveq	r1, #5
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	bf08      	it	eq
 8009ee8:	2205      	moveq	r2, #5
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bf08      	it	eq
 8009eee:	2314      	moveq	r3, #20
 8009ef0:	9318      	str	r3, [sp, #96]	@ 0x60
 8009ef2:	4b78      	ldr	r3, [pc, #480]	@ (800a0d4 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009ef4:	911a      	str	r1, [sp, #104]	@ 0x68
 8009ef6:	6819      	ldr	r1, [r3, #0]
 8009ef8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8009efa:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009efc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009efe:	931d      	str	r3, [sp, #116]	@ 0x74
 8009f00:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f02:	f002 f895 	bl	800c030 <get_message_typesupport_handle>
 8009f06:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8009f10:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f12:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8009f16:	b9c4      	cbnz	r4, 8009f4a <micro_ros_utilities_get_dynamic_size+0x86>
 8009f18:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8009f1c:	ab04      	add	r3, sp, #16
 8009f1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f22:	ab1e      	add	r3, sp, #120	@ 0x78
 8009f24:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009f28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009f2c:	ab18      	add	r3, sp, #96	@ 0x60
 8009f2e:	4621      	mov	r1, r4
 8009f30:	cb0c      	ldmia	r3, {r2, r3}
 8009f32:	4650      	mov	r0, sl
 8009f34:	f7ff fa10 	bl	8009358 <handle_message_memory.constprop.4>
 8009f38:	4604      	mov	r4, r0
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	b01f      	add	sp, #124	@ 0x7c
 8009f3e:	ecbd 8b02 	vpop	{d8}
 8009f42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f46:	b004      	add	sp, #16
 8009f48:	4770      	bx	lr
 8009f4a:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009f4e:	9508      	str	r5, [sp, #32]
 8009f50:	b30d      	cbz	r5, 8009f96 <micro_ros_utilities_get_dynamic_size+0xd2>
 8009f52:	4698      	mov	r8, r3
 8009f54:	9308      	str	r3, [sp, #32]
 8009f56:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8009f5a:	461f      	mov	r7, r3
 8009f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	eb03 0208 	add.w	r2, r3, r8
 8009f64:	f853 6008 	ldr.w	r6, [r3, r8]
 8009f68:	7913      	ldrb	r3, [r2, #4]
 8009f6a:	2b12      	cmp	r3, #18
 8009f6c:	d030      	beq.n	8009fd0 <micro_ros_utilities_get_dynamic_size+0x10c>
 8009f6e:	f04f 0900 	mov.w	r9, #0
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7f6 f944 	bl	8000200 <strlen>
 8009f78:	9b08      	ldr	r3, [sp, #32]
 8009f7a:	4448      	add	r0, r9
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	4283      	cmp	r3, r0
 8009f80:	f107 0701 	add.w	r7, r7, #1
 8009f84:	bf38      	it	cc
 8009f86:	4603      	movcc	r3, r0
 8009f88:	42af      	cmp	r7, r5
 8009f8a:	9308      	str	r3, [sp, #32]
 8009f8c:	f108 083c 	add.w	r8, r8, #60	@ 0x3c
 8009f90:	d3e4      	bcc.n	8009f5c <micro_ros_utilities_get_dynamic_size+0x98>
 8009f92:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8009f96:	9908      	ldr	r1, [sp, #32]
 8009f98:	ac10      	add	r4, sp, #64	@ 0x40
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f002 fdd8 	bl	800cb50 <micro_ros_string_utilities_init_with_size>
 8009fa0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009fa4:	ab04      	add	r3, sp, #16
 8009fa6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 8009faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009fae:	ab1e      	add	r3, sp, #120	@ 0x78
 8009fb0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009fb4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009fb8:	ac18      	add	r4, sp, #96	@ 0x60
 8009fba:	e894 000c 	ldmia.w	r4, {r2, r3}
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	f7ff f9c9 	bl	8009358 <handle_message_memory.constprop.4>
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4658      	mov	r0, fp
 8009fca:	f002 fe1f 	bl	800cc0c <micro_ros_string_utilities_destroy>
 8009fce:	e7b4      	b.n	8009f3a <micro_ros_utilities_get_dynamic_size+0x76>
 8009fd0:	4b40      	ldr	r3, [pc, #256]	@ (800a0d4 <micro_ros_utilities_get_dynamic_size+0x210>)
 8009fd2:	68d0      	ldr	r0, [r2, #12]
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	f002 f82b 	bl	800c030 <get_message_typesupport_handle>
 8009fda:	6843      	ldr	r3, [r0, #4]
 8009fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fde:	689d      	ldr	r5, [r3, #8]
 8009fe0:	b33d      	cbz	r5, 800a032 <micro_ros_utilities_get_dynamic_size+0x16e>
 8009fe2:	f04f 0a00 	mov.w	sl, #0
 8009fe6:	ee08 6a10 	vmov	s16, r6
 8009fea:	970c      	str	r7, [sp, #48]	@ 0x30
 8009fec:	46d1      	mov	r9, sl
 8009fee:	4657      	mov	r7, sl
 8009ff0:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8009ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	eb03 020a 	add.w	r2, r3, sl
 8009ffc:	f853 800a 	ldr.w	r8, [r3, sl]
 800a000:	7913      	ldrb	r3, [r2, #4]
 800a002:	2b12      	cmp	r3, #18
 800a004:	d018      	beq.n	800a038 <micro_ros_utilities_get_dynamic_size+0x174>
 800a006:	2400      	movs	r4, #0
 800a008:	4640      	mov	r0, r8
 800a00a:	f7f6 f8f9 	bl	8000200 <strlen>
 800a00e:	4404      	add	r4, r0
 800a010:	3401      	adds	r4, #1
 800a012:	45a1      	cmp	r9, r4
 800a014:	f107 0701 	add.w	r7, r7, #1
 800a018:	bf38      	it	cc
 800a01a:	46a1      	movcc	r9, r4
 800a01c:	42af      	cmp	r7, r5
 800a01e:	f10a 0a3c 	add.w	sl, sl, #60	@ 0x3c
 800a022:	d3e7      	bcc.n	8009ff4 <micro_ros_utilities_get_dynamic_size+0x130>
 800a024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a026:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 800a02a:	ee18 6a10 	vmov	r6, s16
 800a02e:	689d      	ldr	r5, [r3, #8]
 800a030:	e79f      	b.n	8009f72 <micro_ros_utilities_get_dynamic_size+0xae>
 800a032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a034:	689d      	ldr	r5, [r3, #8]
 800a036:	e79a      	b.n	8009f6e <micro_ros_utilities_get_dynamic_size+0xaa>
 800a038:	4b26      	ldr	r3, [pc, #152]	@ (800a0d4 <micro_ros_utilities_get_dynamic_size+0x210>)
 800a03a:	68d0      	ldr	r0, [r2, #12]
 800a03c:	6819      	ldr	r1, [r3, #0]
 800a03e:	f001 fff7 	bl	800c030 <get_message_typesupport_handle>
 800a042:	6843      	ldr	r3, [r0, #4]
 800a044:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a046:	6899      	ldr	r1, [r3, #8]
 800a048:	2900      	cmp	r1, #0
 800a04a:	d040      	beq.n	800a0ce <micro_ros_utilities_get_dynamic_size+0x20a>
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	970e      	str	r7, [sp, #56]	@ 0x38
 800a050:	2500      	movs	r5, #0
 800a052:	ee08 8a90 	vmov	s17, r8
 800a056:	462e      	mov	r6, r5
 800a058:	46a8      	mov	r8, r5
 800a05a:	460f      	mov	r7, r1
 800a05c:	461c      	mov	r4, r3
 800a05e:	1962      	adds	r2, r4, r5
 800a060:	5963      	ldr	r3, [r4, r5]
 800a062:	f892 c004 	ldrb.w	ip, [r2, #4]
 800a066:	f1bc 0f12 	cmp.w	ip, #18
 800a06a:	4618      	mov	r0, r3
 800a06c:	d012      	beq.n	800a094 <micro_ros_utilities_get_dynamic_size+0x1d0>
 800a06e:	f7f6 f8c7 	bl	8000200 <strlen>
 800a072:	3001      	adds	r0, #1
 800a074:	4580      	cmp	r8, r0
 800a076:	f106 0601 	add.w	r6, r6, #1
 800a07a:	bf38      	it	cc
 800a07c:	4680      	movcc	r8, r0
 800a07e:	42be      	cmp	r6, r7
 800a080:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a084:	d3eb      	bcc.n	800a05e <micro_ros_utilities_get_dynamic_size+0x19a>
 800a086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a088:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800a08a:	689d      	ldr	r5, [r3, #8]
 800a08c:	4644      	mov	r4, r8
 800a08e:	ee18 8a90 	vmov	r8, s17
 800a092:	e7b9      	b.n	800a008 <micro_ros_utilities_get_dynamic_size+0x144>
 800a094:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a096:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d4 <micro_ros_utilities_get_dynamic_size+0x210>)
 800a098:	68d0      	ldr	r0, [r2, #12]
 800a09a:	6819      	ldr	r1, [r3, #0]
 800a09c:	f001 ffc8 	bl	800c030 <get_message_typesupport_handle>
 800a0a0:	6840      	ldr	r0, [r0, #4]
 800a0a2:	f7ff fd5d 	bl	8009b60 <get_longest_member_name>
 800a0a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7f6 f8a8 	bl	8000200 <strlen>
 800a0b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0b2:	4404      	add	r4, r0
 800a0b4:	3401      	adds	r4, #1
 800a0b6:	689f      	ldr	r7, [r3, #8]
 800a0b8:	45a0      	cmp	r8, r4
 800a0ba:	f106 0601 	add.w	r6, r6, #1
 800a0be:	bf38      	it	cc
 800a0c0:	46a0      	movcc	r8, r4
 800a0c2:	42b7      	cmp	r7, r6
 800a0c4:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a0c8:	d9dd      	bls.n	800a086 <micro_ros_utilities_get_dynamic_size+0x1c2>
 800a0ca:	691c      	ldr	r4, [r3, #16]
 800a0cc:	e7c7      	b.n	800a05e <micro_ros_utilities_get_dynamic_size+0x19a>
 800a0ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d0:	689d      	ldr	r5, [r3, #8]
 800a0d2:	e798      	b.n	800a006 <micro_ros_utilities_get_dynamic_size+0x142>
 800a0d4:	20000170 	.word	0x20000170

0800a0d8 <micro_ros_utilities_create_message_memory>:
 800a0d8:	b082      	sub	sp, #8
 800a0da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0de:	ed2d 8b04 	vpush	{d8-d9}
 800a0e2:	b0a1      	sub	sp, #132	@ 0x84
 800a0e4:	ac2e      	add	r4, sp, #184	@ 0xb8
 800a0e6:	ae31      	add	r6, sp, #196	@ 0xc4
 800a0e8:	e884 000c 	stmia.w	r4, {r2, r3}
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	468b      	mov	fp, r1
 800a0f0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a0f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a0f8:	ab2e      	add	r3, sp, #184	@ 0xb8
 800a0fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800a100:	f7ff fee0 	bl	8009ec4 <micro_ros_utilities_get_dynamic_size>
 800a104:	4603      	mov	r3, r0
 800a106:	930a      	str	r3, [sp, #40]	@ 0x28
 800a108:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800a10a:	941e      	str	r4, [sp, #120]	@ 0x78
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bf08      	it	eq
 800a110:	2305      	moveq	r3, #5
 800a112:	931c      	str	r3, [sp, #112]	@ 0x70
 800a114:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800a116:	2b00      	cmp	r3, #0
 800a118:	bf08      	it	eq
 800a11a:	2305      	moveq	r3, #5
 800a11c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a11e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800a120:	2b00      	cmp	r3, #0
 800a122:	bf08      	it	eq
 800a124:	2314      	moveq	r3, #20
 800a126:	931a      	str	r3, [sp, #104]	@ 0x68
 800a128:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a12a:	931d      	str	r3, [sp, #116]	@ 0x74
 800a12c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a12e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800a130:	4b81      	ldr	r3, [pc, #516]	@ (800a338 <micro_ros_utilities_create_message_memory+0x260>)
 800a132:	4628      	mov	r0, r5
 800a134:	6819      	ldr	r1, [r3, #0]
 800a136:	f001 ff7b 	bl	800c030 <get_message_typesupport_handle>
 800a13a:	f10d 085c 	add.w	r8, sp, #92	@ 0x5c
 800a13e:	2300      	movs	r3, #0
 800a140:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800a144:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a146:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800a14a:	bb1c      	cbnz	r4, 800a194 <micro_ros_utilities_create_message_memory+0xbc>
 800a14c:	4621      	mov	r1, r4
 800a14e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a152:	4658      	mov	r0, fp
 800a154:	f00f fa4b 	bl	80195ee <memset>
 800a158:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a15c:	ab04      	add	r3, sp, #16
 800a15e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a162:	ab20      	add	r3, sp, #128	@ 0x80
 800a164:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a168:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a16c:	ac1a      	add	r4, sp, #104	@ 0x68
 800a16e:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a172:	4659      	mov	r1, fp
 800a174:	4650      	mov	r0, sl
 800a176:	f7ff fab9 	bl	80096ec <handle_message_memory.constprop.2>
 800a17a:	4604      	mov	r4, r0
 800a17c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a17e:	1b18      	subs	r0, r3, r4
 800a180:	fab0 f080 	clz	r0, r0
 800a184:	0940      	lsrs	r0, r0, #5
 800a186:	b021      	add	sp, #132	@ 0x84
 800a188:	ecbd 8b04 	vpop	{d8-d9}
 800a18c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a190:	b002      	add	sp, #8
 800a192:	4770      	bx	lr
 800a194:	f8da 5008 	ldr.w	r5, [sl, #8]
 800a198:	9509      	str	r5, [sp, #36]	@ 0x24
 800a19a:	b32d      	cbz	r5, 800a1e8 <micro_ros_utilities_create_message_memory+0x110>
 800a19c:	ee08 ba10 	vmov	s16, fp
 800a1a0:	4699      	mov	r9, r3
 800a1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a4:	461f      	mov	r7, r3
 800a1a6:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800a1aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	eb03 0209 	add.w	r2, r3, r9
 800a1b2:	f853 6009 	ldr.w	r6, [r3, r9]
 800a1b6:	7913      	ldrb	r3, [r2, #4]
 800a1b8:	2b12      	cmp	r3, #18
 800a1ba:	d03a      	beq.n	800a232 <micro_ros_utilities_create_message_memory+0x15a>
 800a1bc:	f04f 0a00 	mov.w	sl, #0
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7f6 f81d 	bl	8000200 <strlen>
 800a1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1c8:	4450      	add	r0, sl
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	4283      	cmp	r3, r0
 800a1ce:	f107 0701 	add.w	r7, r7, #1
 800a1d2:	bf38      	it	cc
 800a1d4:	4603      	movcc	r3, r0
 800a1d6:	42af      	cmp	r7, r5
 800a1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1da:	f109 093c 	add.w	r9, r9, #60	@ 0x3c
 800a1de:	d3e4      	bcc.n	800a1aa <micro_ros_utilities_create_message_memory+0xd2>
 800a1e0:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800a1e4:	ee18 ba10 	vmov	fp, s16
 800a1e8:	ac12      	add	r4, sp, #72	@ 0x48
 800a1ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f002 fcaf 	bl	800cb50 <micro_ros_string_utilities_init_with_size>
 800a1f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a1f6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 800a1fa:	f8da 200c 	ldr.w	r2, [sl, #12]
 800a1fe:	2100      	movs	r1, #0
 800a200:	4658      	mov	r0, fp
 800a202:	f00f f9f4 	bl	80195ee <memset>
 800a206:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a20a:	ab04      	add	r3, sp, #16
 800a20c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a210:	ab20      	add	r3, sp, #128	@ 0x80
 800a212:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800a216:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a21a:	ac1a      	add	r4, sp, #104	@ 0x68
 800a21c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a220:	4659      	mov	r1, fp
 800a222:	4650      	mov	r0, sl
 800a224:	f7ff fa62 	bl	80096ec <handle_message_memory.constprop.2>
 800a228:	4604      	mov	r4, r0
 800a22a:	4640      	mov	r0, r8
 800a22c:	f002 fcee 	bl	800cc0c <micro_ros_string_utilities_destroy>
 800a230:	e7a4      	b.n	800a17c <micro_ros_utilities_create_message_memory+0xa4>
 800a232:	4b41      	ldr	r3, [pc, #260]	@ (800a338 <micro_ros_utilities_create_message_memory+0x260>)
 800a234:	68d0      	ldr	r0, [r2, #12]
 800a236:	6819      	ldr	r1, [r3, #0]
 800a238:	f001 fefa 	bl	800c030 <get_message_typesupport_handle>
 800a23c:	6843      	ldr	r3, [r0, #4]
 800a23e:	930c      	str	r3, [sp, #48]	@ 0x30
 800a240:	689d      	ldr	r5, [r3, #8]
 800a242:	b33d      	cbz	r5, 800a294 <micro_ros_utilities_create_message_memory+0x1bc>
 800a244:	f04f 0b00 	mov.w	fp, #0
 800a248:	ee08 6a90 	vmov	s17, r6
 800a24c:	970e      	str	r7, [sp, #56]	@ 0x38
 800a24e:	46da      	mov	sl, fp
 800a250:	465f      	mov	r7, fp
 800a252:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
 800a256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	eb03 020b 	add.w	r2, r3, fp
 800a25e:	f853 600b 	ldr.w	r6, [r3, fp]
 800a262:	7913      	ldrb	r3, [r2, #4]
 800a264:	2b12      	cmp	r3, #18
 800a266:	d018      	beq.n	800a29a <micro_ros_utilities_create_message_memory+0x1c2>
 800a268:	2400      	movs	r4, #0
 800a26a:	4630      	mov	r0, r6
 800a26c:	f7f5 ffc8 	bl	8000200 <strlen>
 800a270:	4404      	add	r4, r0
 800a272:	3401      	adds	r4, #1
 800a274:	45a2      	cmp	sl, r4
 800a276:	f107 0701 	add.w	r7, r7, #1
 800a27a:	bf38      	it	cc
 800a27c:	46a2      	movcc	sl, r4
 800a27e:	42af      	cmp	r7, r5
 800a280:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 800a284:	d3e7      	bcc.n	800a256 <micro_ros_utilities_create_message_memory+0x17e>
 800a286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a288:	e9dd 790e 	ldrd	r7, r9, [sp, #56]	@ 0x38
 800a28c:	ee18 6a90 	vmov	r6, s17
 800a290:	689d      	ldr	r5, [r3, #8]
 800a292:	e795      	b.n	800a1c0 <micro_ros_utilities_create_message_memory+0xe8>
 800a294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a296:	689d      	ldr	r5, [r3, #8]
 800a298:	e790      	b.n	800a1bc <micro_ros_utilities_create_message_memory+0xe4>
 800a29a:	4b27      	ldr	r3, [pc, #156]	@ (800a338 <micro_ros_utilities_create_message_memory+0x260>)
 800a29c:	68d0      	ldr	r0, [r2, #12]
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	f001 fec6 	bl	800c030 <get_message_typesupport_handle>
 800a2a4:	6843      	ldr	r3, [r0, #4]
 800a2a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a2a8:	6899      	ldr	r1, [r3, #8]
 800a2aa:	2900      	cmp	r1, #0
 800a2ac:	d040      	beq.n	800a330 <micro_ros_utilities_create_message_memory+0x258>
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	9710      	str	r7, [sp, #64]	@ 0x40
 800a2b2:	2500      	movs	r5, #0
 800a2b4:	ee09 6a10 	vmov	s18, r6
 800a2b8:	46a9      	mov	r9, r5
 800a2ba:	462e      	mov	r6, r5
 800a2bc:	460f      	mov	r7, r1
 800a2be:	461c      	mov	r4, r3
 800a2c0:	1962      	adds	r2, r4, r5
 800a2c2:	5963      	ldr	r3, [r4, r5]
 800a2c4:	f892 c004 	ldrb.w	ip, [r2, #4]
 800a2c8:	f1bc 0f12 	cmp.w	ip, #18
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	d012      	beq.n	800a2f6 <micro_ros_utilities_create_message_memory+0x21e>
 800a2d0:	f7f5 ff96 	bl	8000200 <strlen>
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	4286      	cmp	r6, r0
 800a2d8:	f109 0901 	add.w	r9, r9, #1
 800a2dc:	bf38      	it	cc
 800a2de:	4606      	movcc	r6, r0
 800a2e0:	45b9      	cmp	r9, r7
 800a2e2:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a2e6:	d3eb      	bcc.n	800a2c0 <micro_ros_utilities_create_message_memory+0x1e8>
 800a2e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2ea:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a2ec:	689d      	ldr	r5, [r3, #8]
 800a2ee:	4634      	mov	r4, r6
 800a2f0:	ee19 6a10 	vmov	r6, s18
 800a2f4:	e7b9      	b.n	800a26a <micro_ros_utilities_create_message_memory+0x192>
 800a2f6:	9311      	str	r3, [sp, #68]	@ 0x44
 800a2f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a338 <micro_ros_utilities_create_message_memory+0x260>)
 800a2fa:	68d0      	ldr	r0, [r2, #12]
 800a2fc:	6819      	ldr	r1, [r3, #0]
 800a2fe:	f001 fe97 	bl	800c030 <get_message_typesupport_handle>
 800a302:	6840      	ldr	r0, [r0, #4]
 800a304:	f7ff fc2c 	bl	8009b60 <get_longest_member_name>
 800a308:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a30a:	4604      	mov	r4, r0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f5 ff77 	bl	8000200 <strlen>
 800a312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a314:	4404      	add	r4, r0
 800a316:	3401      	adds	r4, #1
 800a318:	689f      	ldr	r7, [r3, #8]
 800a31a:	42a6      	cmp	r6, r4
 800a31c:	f109 0901 	add.w	r9, r9, #1
 800a320:	bf38      	it	cc
 800a322:	4626      	movcc	r6, r4
 800a324:	454f      	cmp	r7, r9
 800a326:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 800a32a:	d9dd      	bls.n	800a2e8 <micro_ros_utilities_create_message_memory+0x210>
 800a32c:	691c      	ldr	r4, [r3, #16]
 800a32e:	e7c7      	b.n	800a2c0 <micro_ros_utilities_create_message_memory+0x1e8>
 800a330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a332:	689d      	ldr	r5, [r3, #8]
 800a334:	e798      	b.n	800a268 <micro_ros_utilities_create_message_memory+0x190>
 800a336:	bf00      	nop
 800a338:	20000170 	.word	0x20000170

0800a33c <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a33c:	4b04      	ldr	r3, [pc, #16]	@ (800a350 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	b10a      	cbz	r2, 800a346 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a342:	4803      	ldr	r0, [pc, #12]	@ (800a350 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a344:	4770      	bx	lr
 800a346:	4a03      	ldr	r2, [pc, #12]	@ (800a354 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a348:	4801      	ldr	r0, [pc, #4]	@ (800a350 <rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a34a:	6812      	ldr	r2, [r2, #0]
 800a34c:	601a      	str	r2, [r3, #0]
 800a34e:	4770      	bx	lr
 800a350:	200000dc 	.word	0x200000dc
 800a354:	2000016c 	.word	0x2000016c

0800a358 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a358:	4a02      	ldr	r2, [pc, #8]	@ (800a364 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xc>)
 800a35a:	4b03      	ldr	r3, [pc, #12]	@ (800a368 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x10>)
 800a35c:	6812      	ldr	r2, [r2, #0]
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop
 800a364:	2000016c 	.word	0x2000016c
 800a368:	200000dc 	.word	0x200000dc

0800a36c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__size_function__ThrusterStatuses__thrusters_pwms>:
 800a36c:	2008      	movs	r0, #8
 800a36e:	4770      	bx	lr

0800a370 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_const_function__ThrusterStatuses__thrusters_pwms>:
 800a370:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop

0800a378 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__fetch_function__ThrusterStatuses__thrusters_pwms>:
 800a378:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 800a37c:	8013      	strh	r3, [r2, #0]
 800a37e:	4770      	bx	lr

0800a380 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__assign_function__ThrusterStatuses__thrusters_pwms>:
 800a380:	8813      	ldrh	r3, [r2, #0]
 800a382:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800a386:	4770      	bx	lr

0800a388 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_init_function>:
 800a388:	f007 bd3a 	b.w	8011e00 <nereo_interfaces__msg__ThrusterStatuses__init>

0800a38c <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__ThrusterStatuses_fini_function>:
 800a38c:	f007 bd3c 	b.w	8011e08 <nereo_interfaces__msg__ThrusterStatuses__fini>

0800a390 <nereo_interfaces__msg__ThrusterStatuses__rosidl_typesupport_introspection_c__get_function__ThrusterStatuses__thrusters_pwms>:
 800a390:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop

0800a398 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a398:	4b04      	ldr	r3, [pc, #16]	@ (800a3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	b10a      	cbz	r2, 800a3a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0xa>
 800a39e:	4803      	ldr	r0, [pc, #12]	@ (800a3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a3a0:	4770      	bx	lr
 800a3a2:	4a03      	ldr	r2, [pc, #12]	@ (800a3b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x18>)
 800a3a4:	4801      	ldr	r0, [pc, #4]	@ (800a3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x14>)
 800a3a6:	6812      	ldr	r2, [r2, #0]
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	4770      	bx	lr
 800a3ac:	20000124 	.word	0x20000124
 800a3b0:	20000170 	.word	0x20000170

0800a3b4 <_ThrusterStatuses__max_serialized_size>:
 800a3b4:	b508      	push	{r3, lr}
 800a3b6:	2102      	movs	r1, #2
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f004 fd81 	bl	800eec0 <ucdr_alignment>
 800a3be:	3010      	adds	r0, #16
 800a3c0:	bd08      	pop	{r3, pc}
 800a3c2:	bf00      	nop

0800a3c4 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses>:
 800a3c4:	b138      	cbz	r0, 800a3d6 <get_serialized_size_nereo_interfaces__msg__ThrusterStatuses+0x12>
 800a3c6:	b508      	push	{r3, lr}
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	2102      	movs	r1, #2
 800a3ce:	f004 fd77 	bl	800eec0 <ucdr_alignment>
 800a3d2:	3010      	adds	r0, #16
 800a3d4:	bd08      	pop	{r3, pc}
 800a3d6:	4770      	bx	lr

0800a3d8 <_ThrusterStatuses__cdr_deserialize>:
 800a3d8:	b111      	cbz	r1, 800a3e0 <_ThrusterStatuses__cdr_deserialize+0x8>
 800a3da:	2208      	movs	r2, #8
 800a3dc:	f002 bda8 	b.w	800cf30 <ucdr_deserialize_array_uint16_t>
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	4770      	bx	lr

0800a3e4 <_ThrusterStatuses__cdr_serialize>:
 800a3e4:	468c      	mov	ip, r1
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	b118      	cbz	r0, 800a3f2 <_ThrusterStatuses__cdr_serialize+0xe>
 800a3ea:	2208      	movs	r2, #8
 800a3ec:	4660      	mov	r0, ip
 800a3ee:	f002 bd49 	b.w	800ce84 <ucdr_serialize_array_uint16_t>
 800a3f2:	4770      	bx	lr

0800a3f4 <_ThrusterStatuses__get_serialized_size>:
 800a3f4:	b130      	cbz	r0, 800a404 <_ThrusterStatuses__get_serialized_size+0x10>
 800a3f6:	b508      	push	{r3, lr}
 800a3f8:	2102      	movs	r1, #2
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	f004 fd60 	bl	800eec0 <ucdr_alignment>
 800a400:	3010      	adds	r0, #16
 800a402:	bd08      	pop	{r3, pc}
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop

0800a408 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses>:
 800a408:	4800      	ldr	r0, [pc, #0]	@ (800a40c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nereo_interfaces__msg__ThrusterStatuses+0x4>)
 800a40a:	4770      	bx	lr
 800a40c:	20000130 	.word	0x20000130

0800a410 <rcl_get_zero_initialized_publisher>:
 800a410:	4b01      	ldr	r3, [pc, #4]	@ (800a418 <rcl_get_zero_initialized_publisher+0x8>)
 800a412:	6818      	ldr	r0, [r3, #0]
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	0801ac34 	.word	0x0801ac34

0800a41c <rcl_publisher_init>:
 800a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	b088      	sub	sp, #32
 800a422:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a424:	2d00      	cmp	r5, #0
 800a426:	d069      	beq.n	800a4fc <rcl_publisher_init+0xe0>
 800a428:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a42c:	4604      	mov	r4, r0
 800a42e:	4648      	mov	r0, r9
 800a430:	460e      	mov	r6, r1
 800a432:	4690      	mov	r8, r2
 800a434:	461f      	mov	r7, r3
 800a436:	f001 f847 	bl	800b4c8 <rcutils_allocator_is_valid>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d05e      	beq.n	800a4fc <rcl_publisher_init+0xe0>
 800a43e:	2c00      	cmp	r4, #0
 800a440:	d05c      	beq.n	800a4fc <rcl_publisher_init+0xe0>
 800a442:	f8d4 a000 	ldr.w	sl, [r4]
 800a446:	f1ba 0f00 	cmp.w	sl, #0
 800a44a:	d004      	beq.n	800a456 <rcl_publisher_init+0x3a>
 800a44c:	2764      	movs	r7, #100	@ 0x64
 800a44e:	4638      	mov	r0, r7
 800a450:	b008      	add	sp, #32
 800a452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a456:	4630      	mov	r0, r6
 800a458:	f008 f960 	bl	801271c <rcl_node_is_valid>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d052      	beq.n	800a506 <rcl_publisher_init+0xea>
 800a460:	f1b8 0f00 	cmp.w	r8, #0
 800a464:	d04a      	beq.n	800a4fc <rcl_publisher_init+0xe0>
 800a466:	2f00      	cmp	r7, #0
 800a468:	d048      	beq.n	800a4fc <rcl_publisher_init+0xe0>
 800a46a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a46e:	aa07      	add	r2, sp, #28
 800a470:	9205      	str	r2, [sp, #20]
 800a472:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a47a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a47e:	f8cd a01c 	str.w	sl, [sp, #28]
 800a482:	4639      	mov	r1, r7
 800a484:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a488:	4630      	mov	r0, r6
 800a48a:	f008 f99b 	bl	80127c4 <rcl_node_resolve_name>
 800a48e:	4607      	mov	r7, r0
 800a490:	2800      	cmp	r0, #0
 800a492:	d14f      	bne.n	800a534 <rcl_publisher_init+0x118>
 800a494:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a496:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a498:	20c8      	movs	r0, #200	@ 0xc8
 800a49a:	4798      	blx	r3
 800a49c:	6020      	str	r0, [r4, #0]
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d04e      	beq.n	800a540 <rcl_publisher_init+0x124>
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f008 f95c 	bl	8012760 <rcl_node_get_rmw_handle>
 800a4a8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	9a07      	ldr	r2, [sp, #28]
 800a4b0:	6827      	ldr	r7, [r4, #0]
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	4641      	mov	r1, r8
 800a4b6:	f001 f915 	bl	800b6e4 <rmw_create_publisher>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a4c0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a4c4:	b370      	cbz	r0, 800a524 <rcl_publisher_init+0x108>
 800a4c6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a4ca:	f001 f9e9 	bl	800b8a0 <rmw_publisher_get_actual_qos>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	b9d0      	cbnz	r0, 800a50a <rcl_publisher_init+0xee>
 800a4d4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a4d8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a4dc:	4629      	mov	r1, r5
 800a4de:	2270      	movs	r2, #112	@ 0x70
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f00f f8ec 	bl	80196be <memcpy>
 800a4e6:	6832      	ldr	r2, [r6, #0]
 800a4e8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a4ec:	9807      	ldr	r0, [sp, #28]
 800a4ee:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a4f0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a4f2:	4798      	blx	r3
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	b008      	add	sp, #32
 800a4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fc:	270b      	movs	r7, #11
 800a4fe:	4638      	mov	r0, r7
 800a500:	b008      	add	sp, #32
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	27c8      	movs	r7, #200	@ 0xc8
 800a508:	e7a1      	b.n	800a44e <rcl_publisher_init+0x32>
 800a50a:	b18b      	cbz	r3, 800a530 <rcl_publisher_init+0x114>
 800a50c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a510:	b142      	cbz	r2, 800a524 <rcl_publisher_init+0x108>
 800a512:	4630      	mov	r0, r6
 800a514:	f008 f924 	bl	8012760 <rcl_node_get_rmw_handle>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a51e:	f001 f9cf 	bl	800b8c0 <rmw_destroy_publisher>
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a526:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a528:	4618      	mov	r0, r3
 800a52a:	4790      	blx	r2
 800a52c:	2300      	movs	r3, #0
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	2701      	movs	r7, #1
 800a532:	e7db      	b.n	800a4ec <rcl_publisher_init+0xd0>
 800a534:	2867      	cmp	r0, #103	@ 0x67
 800a536:	d0d9      	beq.n	800a4ec <rcl_publisher_init+0xd0>
 800a538:	2869      	cmp	r0, #105	@ 0x69
 800a53a:	d003      	beq.n	800a544 <rcl_publisher_init+0x128>
 800a53c:	280a      	cmp	r0, #10
 800a53e:	d1f7      	bne.n	800a530 <rcl_publisher_init+0x114>
 800a540:	270a      	movs	r7, #10
 800a542:	e7d3      	b.n	800a4ec <rcl_publisher_init+0xd0>
 800a544:	2767      	movs	r7, #103	@ 0x67
 800a546:	e7d1      	b.n	800a4ec <rcl_publisher_init+0xd0>

0800a548 <rcl_publisher_get_default_options>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	4d14      	ldr	r5, [pc, #80]	@ (800a59c <rcl_publisher_get_default_options+0x54>)
 800a54c:	4914      	ldr	r1, [pc, #80]	@ (800a5a0 <rcl_publisher_get_default_options+0x58>)
 800a54e:	b088      	sub	sp, #32
 800a550:	4604      	mov	r4, r0
 800a552:	2250      	movs	r2, #80	@ 0x50
 800a554:	4628      	mov	r0, r5
 800a556:	f00f f8b2 	bl	80196be <memcpy>
 800a55a:	a802      	add	r0, sp, #8
 800a55c:	f000 ffa6 	bl	800b4ac <rcutils_get_default_allocator>
 800a560:	f10d 0c08 	add.w	ip, sp, #8
 800a564:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a568:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a56c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a570:	466e      	mov	r6, sp
 800a572:	f8dc 3000 	ldr.w	r3, [ip]
 800a576:	f8ce 3000 	str.w	r3, [lr]
 800a57a:	4630      	mov	r0, r6
 800a57c:	f001 f834 	bl	800b5e8 <rmw_get_default_publisher_options>
 800a580:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a584:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a588:	e883 0003 	stmia.w	r3, {r0, r1}
 800a58c:	2270      	movs	r2, #112	@ 0x70
 800a58e:	4629      	mov	r1, r5
 800a590:	4620      	mov	r0, r4
 800a592:	f00f f894 	bl	80196be <memcpy>
 800a596:	4620      	mov	r0, r4
 800a598:	b008      	add	sp, #32
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	20010a30 	.word	0x20010a30
 800a5a0:	0801ac38 	.word	0x0801ac38

0800a5a4 <rcl_publish>:
 800a5a4:	b1f8      	cbz	r0, 800a5e6 <rcl_publish+0x42>
 800a5a6:	6803      	ldr	r3, [r0, #0]
 800a5a8:	b570      	push	{r4, r5, r6, lr}
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	b1b3      	cbz	r3, 800a5dc <rcl_publish+0x38>
 800a5ae:	4616      	mov	r6, r2
 800a5b0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a5b4:	b192      	cbz	r2, 800a5dc <rcl_publish+0x38>
 800a5b6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a5ba:	460d      	mov	r5, r1
 800a5bc:	f007 fcd4 	bl	8011f68 <rcl_context_is_valid>
 800a5c0:	b160      	cbz	r0, 800a5dc <rcl_publish+0x38>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a5c8:	b140      	cbz	r0, 800a5dc <rcl_publish+0x38>
 800a5ca:	b155      	cbz	r5, 800a5e2 <rcl_publish+0x3e>
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f001 f828 	bl	800b624 <rmw_publish>
 800a5d4:	3800      	subs	r0, #0
 800a5d6:	bf18      	it	ne
 800a5d8:	2001      	movne	r0, #1
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a5e0:	bd70      	pop	{r4, r5, r6, pc}
 800a5e2:	200b      	movs	r0, #11
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a5ea:	4770      	bx	lr

0800a5ec <rcl_publisher_is_valid>:
 800a5ec:	b1a0      	cbz	r0, 800a618 <rcl_publisher_is_valid+0x2c>
 800a5ee:	6803      	ldr	r3, [r0, #0]
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	b173      	cbz	r3, 800a614 <rcl_publisher_is_valid+0x28>
 800a5f6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a5fa:	b15a      	cbz	r2, 800a614 <rcl_publisher_is_valid+0x28>
 800a5fc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a600:	f007 fcb2 	bl	8011f68 <rcl_context_is_valid>
 800a604:	b130      	cbz	r0, 800a614 <rcl_publisher_is_valid+0x28>
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a60c:	3800      	subs	r0, #0
 800a60e:	bf18      	it	ne
 800a610:	2001      	movne	r0, #1
 800a612:	bd10      	pop	{r4, pc}
 800a614:	2000      	movs	r0, #0
 800a616:	bd10      	pop	{r4, pc}
 800a618:	2000      	movs	r0, #0
 800a61a:	4770      	bx	lr

0800a61c <rcl_publisher_is_valid_except_context>:
 800a61c:	b130      	cbz	r0, 800a62c <rcl_publisher_is_valid_except_context+0x10>
 800a61e:	6800      	ldr	r0, [r0, #0]
 800a620:	b120      	cbz	r0, 800a62c <rcl_publisher_is_valid_except_context+0x10>
 800a622:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a626:	3800      	subs	r0, #0
 800a628:	bf18      	it	ne
 800a62a:	2001      	movne	r0, #1
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop

0800a630 <_rclc_check_for_new_data>:
 800a630:	2800      	cmp	r0, #0
 800a632:	d046      	beq.n	800a6c2 <_rclc_check_for_new_data+0x92>
 800a634:	b510      	push	{r4, lr}
 800a636:	7802      	ldrb	r2, [r0, #0]
 800a638:	b084      	sub	sp, #16
 800a63a:	4603      	mov	r3, r0
 800a63c:	2a0a      	cmp	r2, #10
 800a63e:	d842      	bhi.n	800a6c6 <_rclc_check_for_new_data+0x96>
 800a640:	e8df f002 	tbb	[pc, r2]
 800a644:	14181212 	.word	0x14181212
 800a648:	06060614 	.word	0x06060614
 800a64c:	2e1a      	.short	0x2e1a
 800a64e:	16          	.byte	0x16
 800a64f:	00          	.byte	0x00
 800a650:	6a0a      	ldr	r2, [r1, #32]
 800a652:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a654:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a658:	2000      	movs	r0, #0
 800a65a:	1a12      	subs	r2, r2, r0
 800a65c:	bf18      	it	ne
 800a65e:	2201      	movne	r2, #1
 800a660:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a664:	b004      	add	sp, #16
 800a666:	bd10      	pop	{r4, pc}
 800a668:	680a      	ldr	r2, [r1, #0]
 800a66a:	e7f2      	b.n	800a652 <_rclc_check_for_new_data+0x22>
 800a66c:	698a      	ldr	r2, [r1, #24]
 800a66e:	e7f0      	b.n	800a652 <_rclc_check_for_new_data+0x22>
 800a670:	688a      	ldr	r2, [r1, #8]
 800a672:	e7ee      	b.n	800a652 <_rclc_check_for_new_data+0x22>
 800a674:	690a      	ldr	r2, [r1, #16]
 800a676:	e7ec      	b.n	800a652 <_rclc_check_for_new_data+0x22>
 800a678:	685c      	ldr	r4, [r3, #4]
 800a67a:	4608      	mov	r0, r1
 800a67c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a680:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a684:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a688:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a692:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a696:	f104 0110 	add.w	r1, r4, #16
 800a69a:	f009 fd61 	bl	8014160 <rcl_action_client_wait_set_get_entities_ready>
 800a69e:	e7e1      	b.n	800a664 <_rclc_check_for_new_data+0x34>
 800a6a0:	685c      	ldr	r4, [r3, #4]
 800a6a2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a6a6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a6aa:	e9cd 3200 	strd	r3, r2, [sp]
 800a6ae:	4608      	mov	r0, r1
 800a6b0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a6b4:	f104 0220 	add.w	r2, r4, #32
 800a6b8:	f104 0110 	add.w	r1, r4, #16
 800a6bc:	f009 ff68 	bl	8014590 <rcl_action_server_wait_set_get_entities_ready>
 800a6c0:	e7d0      	b.n	800a664 <_rclc_check_for_new_data+0x34>
 800a6c2:	200b      	movs	r0, #11
 800a6c4:	4770      	bx	lr
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e7cc      	b.n	800a664 <_rclc_check_for_new_data+0x34>
 800a6ca:	bf00      	nop

0800a6cc <_rclc_take_new_data>:
 800a6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ce:	b09b      	sub	sp, #108	@ 0x6c
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	f000 8088 	beq.w	800a7e6 <_rclc_take_new_data+0x11a>
 800a6d6:	7803      	ldrb	r3, [r0, #0]
 800a6d8:	4604      	mov	r4, r0
 800a6da:	2b0a      	cmp	r3, #10
 800a6dc:	f200 8167 	bhi.w	800a9ae <_rclc_take_new_data+0x2e2>
 800a6e0:	e8df f003 	tbb	[pc, r3]
 800a6e4:	44152d2d 	.word	0x44152d2d
 800a6e8:	19191944 	.word	0x19191944
 800a6ec:	065a      	.short	0x065a
 800a6ee:	15          	.byte	0x15
 800a6ef:	00          	.byte	0x00
 800a6f0:	6840      	ldr	r0, [r0, #4]
 800a6f2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f040 80b2 	bne.w	800a860 <_rclc_take_new_data+0x194>
 800a6fc:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a700:	2b00      	cmp	r3, #0
 800a702:	f040 80e4 	bne.w	800a8ce <_rclc_take_new_data+0x202>
 800a706:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d16f      	bne.n	800a7ee <_rclc_take_new_data+0x122>
 800a70e:	2500      	movs	r5, #0
 800a710:	4628      	mov	r0, r5
 800a712:	b01b      	add	sp, #108	@ 0x6c
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a716:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a718:	6a0b      	ldr	r3, [r1, #32]
 800a71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0f5      	beq.n	800a70e <_rclc_take_new_data+0x42>
 800a722:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a726:	f104 0110 	add.w	r1, r4, #16
 800a72a:	f008 f9f5 	bl	8012b18 <rcl_take_request>
 800a72e:	4605      	mov	r5, r0
 800a730:	2800      	cmp	r0, #0
 800a732:	d0ec      	beq.n	800a70e <_rclc_take_new_data+0x42>
 800a734:	f240 2359 	movw	r3, #601	@ 0x259
 800a738:	4298      	cmp	r0, r3
 800a73a:	d013      	beq.n	800a764 <_rclc_take_new_data+0x98>
 800a73c:	e029      	b.n	800a792 <_rclc_take_new_data+0xc6>
 800a73e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a740:	680b      	ldr	r3, [r1, #0]
 800a742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0e1      	beq.n	800a70e <_rclc_take_new_data+0x42>
 800a74a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a74e:	2300      	movs	r3, #0
 800a750:	aa0a      	add	r2, sp, #40	@ 0x28
 800a752:	f008 fb1f 	bl	8012d94 <rcl_take>
 800a756:	4605      	mov	r5, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	d0d9      	beq.n	800a710 <_rclc_take_new_data+0x44>
 800a75c:	f240 1391 	movw	r3, #401	@ 0x191
 800a760:	4298      	cmp	r0, r3
 800a762:	d116      	bne.n	800a792 <_rclc_take_new_data+0xc6>
 800a764:	2300      	movs	r3, #0
 800a766:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a76a:	e7d1      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a76c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a76e:	698b      	ldr	r3, [r1, #24]
 800a770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0ca      	beq.n	800a70e <_rclc_take_new_data+0x42>
 800a778:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a77c:	f104 0110 	add.w	r1, r4, #16
 800a780:	f007 fb82 	bl	8011e88 <rcl_take_response>
 800a784:	4605      	mov	r5, r0
 800a786:	2800      	cmp	r0, #0
 800a788:	d0c1      	beq.n	800a70e <_rclc_take_new_data+0x42>
 800a78a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a78e:	4298      	cmp	r0, r3
 800a790:	d0be      	beq.n	800a710 <_rclc_take_new_data+0x44>
 800a792:	f000 febd 	bl	800b510 <rcutils_reset_error>
 800a796:	e7bb      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a798:	6840      	ldr	r0, [r0, #4]
 800a79a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d17d      	bne.n	800a89e <_rclc_take_new_data+0x1d2>
 800a7a2:	69c3      	ldr	r3, [r0, #28]
 800a7a4:	b11b      	cbz	r3, 800a7ae <_rclc_take_new_data+0xe2>
 800a7a6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d144      	bne.n	800a838 <_rclc_take_new_data+0x16c>
 800a7ae:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 80ac 	bne.w	800a910 <_rclc_take_new_data+0x244>
 800a7b8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0a6      	beq.n	800a70e <_rclc_take_new_data+0x42>
 800a7c0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a7c2:	a90a      	add	r1, sp, #40	@ 0x28
 800a7c4:	3010      	adds	r0, #16
 800a7c6:	f009 fba3 	bl	8013f10 <rcl_action_take_result_response>
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d1e0      	bne.n	800a792 <_rclc_take_new_data+0xc6>
 800a7d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a7d4:	6860      	ldr	r0, [r4, #4]
 800a7d6:	f009 ffff 	bl	80147d8 <rclc_action_find_handle_by_result_request_sequence_number>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d098      	beq.n	800a710 <_rclc_take_new_data+0x44>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a7e4:	e794      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a7e6:	250b      	movs	r5, #11
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	b01b      	add	sp, #108	@ 0x6c
 800a7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ee:	ae04      	add	r6, sp, #16
 800a7f0:	aa0a      	add	r2, sp, #40	@ 0x28
 800a7f2:	3010      	adds	r0, #16
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	f009 fdff 	bl	80143f8 <rcl_action_take_cancel_request>
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d1c8      	bne.n	800a792 <_rclc_take_new_data+0xc6>
 800a800:	6860      	ldr	r0, [r4, #4]
 800a802:	a90a      	add	r1, sp, #40	@ 0x28
 800a804:	f009 ffa6 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800a808:	4607      	mov	r7, r0
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f000 80bb 	beq.w	800a986 <_rclc_take_new_data+0x2ba>
 800a810:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a814:	2101      	movs	r1, #1
 800a816:	f009 ff27 	bl	8014668 <rcl_action_transition_goal_state>
 800a81a:	2803      	cmp	r0, #3
 800a81c:	4684      	mov	ip, r0
 800a81e:	f040 80a7 	bne.w	800a970 <_rclc_take_new_data+0x2a4>
 800a822:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a824:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a82a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a82e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a832:	f887 c008 	strb.w	ip, [r7, #8]
 800a836:	e76b      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a838:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a83a:	3010      	adds	r0, #16
 800a83c:	f009 fbe8 	bl	8014010 <rcl_action_take_feedback>
 800a840:	4605      	mov	r5, r0
 800a842:	2800      	cmp	r0, #0
 800a844:	d1a5      	bne.n	800a792 <_rclc_take_new_data+0xc6>
 800a846:	6860      	ldr	r0, [r4, #4]
 800a848:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a84a:	f009 ff83 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800a84e:	4603      	mov	r3, r0
 800a850:	2800      	cmp	r0, #0
 800a852:	f000 80a3 	beq.w	800a99c <_rclc_take_new_data+0x2d0>
 800a856:	2201      	movs	r2, #1
 800a858:	6860      	ldr	r0, [r4, #4]
 800a85a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a85e:	e7a6      	b.n	800a7ae <_rclc_take_new_data+0xe2>
 800a860:	f009 ff52 	bl	8014708 <rclc_action_take_goal_handle>
 800a864:	4606      	mov	r6, r0
 800a866:	6860      	ldr	r0, [r4, #4]
 800a868:	2e00      	cmp	r6, #0
 800a86a:	f43f af47 	beq.w	800a6fc <_rclc_take_new_data+0x30>
 800a86e:	6070      	str	r0, [r6, #4]
 800a870:	69f2      	ldr	r2, [r6, #28]
 800a872:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a876:	3010      	adds	r0, #16
 800a878:	f009 fd06 	bl	8014288 <rcl_action_take_goal_request>
 800a87c:	4605      	mov	r5, r0
 800a87e:	2800      	cmp	r0, #0
 800a880:	f040 808e 	bne.w	800a9a0 <_rclc_take_new_data+0x2d4>
 800a884:	69f7      	ldr	r7, [r6, #28]
 800a886:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a888:	7235      	strb	r5, [r6, #8]
 800a88a:	f8c6 0009 	str.w	r0, [r6, #9]
 800a88e:	f8c6 100d 	str.w	r1, [r6, #13]
 800a892:	6860      	ldr	r0, [r4, #4]
 800a894:	f8c6 2011 	str.w	r2, [r6, #17]
 800a898:	f8c6 3015 	str.w	r3, [r6, #21]
 800a89c:	e72e      	b.n	800a6fc <_rclc_take_new_data+0x30>
 800a89e:	aa04      	add	r2, sp, #16
 800a8a0:	a90a      	add	r1, sp, #40	@ 0x28
 800a8a2:	3010      	adds	r0, #16
 800a8a4:	f009 fabc 	bl	8013e20 <rcl_action_take_goal_response>
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	f47f af71 	bne.w	800a792 <_rclc_take_new_data+0xc6>
 800a8b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a8b4:	6860      	ldr	r0, [r4, #4]
 800a8b6:	f009 ff7d 	bl	80147b4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a8ba:	b130      	cbz	r0, 800a8ca <_rclc_take_new_data+0x1fe>
 800a8bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a8c0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f880 2020 	strb.w	r2, [r0, #32]
 800a8ca:	6860      	ldr	r0, [r4, #4]
 800a8cc:	e769      	b.n	800a7a2 <_rclc_take_new_data+0xd6>
 800a8ce:	aa04      	add	r2, sp, #16
 800a8d0:	3010      	adds	r0, #16
 800a8d2:	a90a      	add	r1, sp, #40	@ 0x28
 800a8d4:	f009 fd50 	bl	8014378 <rcl_action_take_result_request>
 800a8d8:	4605      	mov	r5, r0
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f47f af59 	bne.w	800a792 <_rclc_take_new_data+0xc6>
 800a8e0:	6860      	ldr	r0, [r4, #4]
 800a8e2:	a904      	add	r1, sp, #16
 800a8e4:	f009 ff36 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	b160      	cbz	r0, 800a906 <_rclc_take_new_data+0x23a>
 800a8ec:	ad0a      	add	r5, sp, #40	@ 0x28
 800a8ee:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a8f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a8f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a8fa:	f04f 0c02 	mov.w	ip, #2
 800a8fe:	e886 0003 	stmia.w	r6, {r0, r1}
 800a902:	f887 c008 	strb.w	ip, [r7, #8]
 800a906:	6860      	ldr	r0, [r4, #4]
 800a908:	2300      	movs	r3, #0
 800a90a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a90e:	e6fa      	b.n	800a706 <_rclc_take_new_data+0x3a>
 800a910:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a914:	a90a      	add	r1, sp, #40	@ 0x28
 800a916:	3010      	adds	r0, #16
 800a918:	f009 fb3a 	bl	8013f90 <rcl_action_take_cancel_response>
 800a91c:	4605      	mov	r5, r0
 800a91e:	2800      	cmp	r0, #0
 800a920:	f47f af37 	bne.w	800a792 <_rclc_take_new_data+0xc6>
 800a924:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a928:	6860      	ldr	r0, [r4, #4]
 800a92a:	f009 ff67 	bl	80147fc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a92e:	4606      	mov	r6, r0
 800a930:	6860      	ldr	r0, [r4, #4]
 800a932:	2e00      	cmp	r6, #0
 800a934:	f43f af40 	beq.w	800a7b8 <_rclc_take_new_data+0xec>
 800a938:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a93a:	2701      	movs	r7, #1
 800a93c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f43f af3a 	beq.w	800a7b8 <_rclc_take_new_data+0xec>
 800a944:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a946:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a94a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a94e:	f009 ff01 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800a952:	b138      	cbz	r0, 800a964 <_rclc_take_new_data+0x298>
 800a954:	6860      	ldr	r0, [r4, #4]
 800a956:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a958:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a95c:	3501      	adds	r5, #1
 800a95e:	42ab      	cmp	r3, r5
 800a960:	d8f0      	bhi.n	800a944 <_rclc_take_new_data+0x278>
 800a962:	e729      	b.n	800a7b8 <_rclc_take_new_data+0xec>
 800a964:	6860      	ldr	r0, [r4, #4]
 800a966:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a968:	3501      	adds	r5, #1
 800a96a:	42ab      	cmp	r3, r5
 800a96c:	d8ea      	bhi.n	800a944 <_rclc_take_new_data+0x278>
 800a96e:	e723      	b.n	800a7b8 <_rclc_take_new_data+0xec>
 800a970:	ab06      	add	r3, sp, #24
 800a972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a974:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a978:	2103      	movs	r1, #3
 800a97a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a97e:	6860      	ldr	r0, [r4, #4]
 800a980:	f009 ffb2 	bl	80148e8 <rclc_action_server_goal_cancel_reject>
 800a984:	e6c4      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a986:	ab06      	add	r3, sp, #24
 800a988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a98a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a98e:	2102      	movs	r1, #2
 800a990:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a994:	6860      	ldr	r0, [r4, #4]
 800a996:	f009 ffa7 	bl	80148e8 <rclc_action_server_goal_cancel_reject>
 800a99a:	e6b9      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a99c:	6860      	ldr	r0, [r4, #4]
 800a99e:	e706      	b.n	800a7ae <_rclc_take_new_data+0xe2>
 800a9a0:	6860      	ldr	r0, [r4, #4]
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	f009 fec0 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800a9a8:	f000 fdb2 	bl	800b510 <rcutils_reset_error>
 800a9ac:	e6b0      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a9ae:	2501      	movs	r5, #1
 800a9b0:	e6ae      	b.n	800a710 <_rclc_take_new_data+0x44>
 800a9b2:	bf00      	nop

0800a9b4 <_rclc_execute.part.0>:
 800a9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9b6:	7803      	ldrb	r3, [r0, #0]
 800a9b8:	b087      	sub	sp, #28
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	2b0a      	cmp	r3, #10
 800a9be:	f200 8136 	bhi.w	800ac2e <_rclc_execute.part.0+0x27a>
 800a9c2:	e8df f003 	tbb	[pc, r3]
 800a9c6:	435e      	.short	0x435e
 800a9c8:	06a1664f 	.word	0x06a1664f
 800a9cc:	6c1e0606 	.word	0x6c1e0606
 800a9d0:	59          	.byte	0x59
 800a9d1:	00          	.byte	0x00
 800a9d2:	2b06      	cmp	r3, #6
 800a9d4:	f000 8122 	beq.w	800ac1c <_rclc_execute.part.0+0x268>
 800a9d8:	2b07      	cmp	r3, #7
 800a9da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a9dc:	f040 8118 	bne.w	800ac10 <_rclc_execute.part.0+0x25c>
 800a9e0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800a9e4:	6880      	ldr	r0, [r0, #8]
 800a9e6:	4798      	blx	r3
 800a9e8:	f104 0110 	add.w	r1, r4, #16
 800a9ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a9ee:	6860      	ldr	r0, [r4, #4]
 800a9f0:	f008 f8d2 	bl	8012b98 <rcl_send_response>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d033      	beq.n	800aa60 <_rclc_execute.part.0+0xac>
 800a9f8:	9005      	str	r0, [sp, #20]
 800a9fa:	f000 fd89 	bl	800b510 <rcutils_reset_error>
 800a9fe:	9805      	ldr	r0, [sp, #20]
 800aa00:	e02e      	b.n	800aa60 <_rclc_execute.part.0+0xac>
 800aa02:	6840      	ldr	r0, [r0, #4]
 800aa04:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8086 	beq.w	800ab1a <_rclc_execute.part.0+0x166>
 800aa0e:	2600      	movs	r6, #0
 800aa10:	2701      	movs	r7, #1
 800aa12:	e004      	b.n	800aa1e <_rclc_execute.part.0+0x6a>
 800aa14:	f009 fe52 	bl	80146bc <rclc_action_send_result_request>
 800aa18:	b998      	cbnz	r0, 800aa42 <_rclc_execute.part.0+0x8e>
 800aa1a:	722f      	strb	r7, [r5, #8]
 800aa1c:	6860      	ldr	r0, [r4, #4]
 800aa1e:	f009 feff 	bl	8014820 <rclc_action_find_first_handle_with_goal_response>
 800aa22:	4605      	mov	r5, r0
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d077      	beq.n	800ab18 <_rclc_execute.part.0+0x164>
 800aa28:	6863      	ldr	r3, [r4, #4]
 800aa2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800aa32:	f885 6020 	strb.w	r6, [r5, #32]
 800aa36:	4798      	blx	r3
 800aa38:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e8      	bne.n	800aa14 <_rclc_execute.part.0+0x60>
 800aa42:	6860      	ldr	r0, [r4, #4]
 800aa44:	4629      	mov	r1, r5
 800aa46:	f009 fe6f 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800aa4a:	e7e7      	b.n	800aa1c <_rclc_execute.part.0+0x68>
 800aa4c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aa50:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800aa54:	2d00      	cmp	r5, #0
 800aa56:	f000 80c9 	beq.w	800abec <_rclc_execute.part.0+0x238>
 800aa5a:	6880      	ldr	r0, [r0, #8]
 800aa5c:	4798      	blx	r3
 800aa5e:	2000      	movs	r0, #0
 800aa60:	b007      	add	sp, #28
 800aa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa64:	6840      	ldr	r0, [r0, #4]
 800aa66:	f008 fa99 	bl	8012f9c <rcl_timer_call>
 800aa6a:	f240 3321 	movw	r3, #801	@ 0x321
 800aa6e:	4298      	cmp	r0, r3
 800aa70:	d004      	beq.n	800aa7c <_rclc_execute.part.0+0xc8>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d0f4      	beq.n	800aa60 <_rclc_execute.part.0+0xac>
 800aa76:	e7bf      	b.n	800a9f8 <_rclc_execute.part.0+0x44>
 800aa78:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa7a:	4798      	blx	r3
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	b007      	add	sp, #28
 800aa80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa82:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800aa86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa88:	b925      	cbnz	r5, 800aa94 <_rclc_execute.part.0+0xe0>
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	4798      	blx	r3
 800aa8e:	4628      	mov	r0, r5
 800aa90:	e7e6      	b.n	800aa60 <_rclc_execute.part.0+0xac>
 800aa92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aa94:	68a0      	ldr	r0, [r4, #8]
 800aa96:	4798      	blx	r3
 800aa98:	2000      	movs	r0, #0
 800aa9a:	b007      	add	sp, #28
 800aa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa9e:	6840      	ldr	r0, [r0, #4]
 800aaa0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800aaa4:	bb3b      	cbnz	r3, 800aaf6 <_rclc_execute.part.0+0x142>
 800aaa6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d07b      	beq.n	800aba6 <_rclc_execute.part.0+0x1f2>
 800aaae:	f640 0634 	movw	r6, #2100	@ 0x834
 800aab2:	2701      	movs	r7, #1
 800aab4:	e007      	b.n	800aac6 <_rclc_execute.part.0+0x112>
 800aab6:	4628      	mov	r0, r5
 800aab8:	f009 feca 	bl	8014850 <rclc_action_server_response_goal_request>
 800aabc:	6860      	ldr	r0, [r4, #4]
 800aabe:	4629      	mov	r1, r5
 800aac0:	f009 fe32 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800aac4:	6860      	ldr	r0, [r4, #4]
 800aac6:	2100      	movs	r1, #0
 800aac8:	f009 fe5c 	bl	8014784 <rclc_action_find_first_handle_by_status>
 800aacc:	4605      	mov	r5, r0
 800aace:	2800      	cmp	r0, #0
 800aad0:	d066      	beq.n	800aba0 <_rclc_execute.part.0+0x1ec>
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	4798      	blx	r3
 800aada:	42b0      	cmp	r0, r6
 800aadc:	f04f 0100 	mov.w	r1, #0
 800aae0:	d1e9      	bne.n	800aab6 <_rclc_execute.part.0+0x102>
 800aae2:	2101      	movs	r1, #1
 800aae4:	4628      	mov	r0, r5
 800aae6:	f009 feb3 	bl	8014850 <rclc_action_server_response_goal_request>
 800aaea:	722f      	strb	r7, [r5, #8]
 800aaec:	e7ea      	b.n	800aac4 <_rclc_execute.part.0+0x110>
 800aaee:	6848      	ldr	r0, [r1, #4]
 800aaf0:	f009 fe1a 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800aaf4:	6860      	ldr	r0, [r4, #4]
 800aaf6:	f009 fe51 	bl	801479c <rclc_action_find_first_terminated_handle>
 800aafa:	4601      	mov	r1, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d1f6      	bne.n	800aaee <_rclc_execute.part.0+0x13a>
 800ab00:	6860      	ldr	r0, [r4, #4]
 800ab02:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ab06:	e7ce      	b.n	800aaa6 <_rclc_execute.part.0+0xf2>
 800ab08:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ab0a:	6880      	ldr	r0, [r0, #8]
 800ab0c:	f104 0110 	add.w	r1, r4, #16
 800ab10:	4798      	blx	r3
 800ab12:	2000      	movs	r0, #0
 800ab14:	b007      	add	sp, #28
 800ab16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab18:	6860      	ldr	r0, [r4, #4]
 800ab1a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ab1e:	b18b      	cbz	r3, 800ab44 <_rclc_execute.part.0+0x190>
 800ab20:	68c5      	ldr	r5, [r0, #12]
 800ab22:	b32d      	cbz	r5, 800ab70 <_rclc_execute.part.0+0x1bc>
 800ab24:	2600      	movs	r6, #0
 800ab26:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ab2a:	b143      	cbz	r3, 800ab3e <_rclc_execute.part.0+0x18a>
 800ab2c:	69c3      	ldr	r3, [r0, #28]
 800ab2e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ab32:	b123      	cbz	r3, 800ab3e <_rclc_execute.part.0+0x18a>
 800ab34:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ab36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ab38:	4628      	mov	r0, r5
 800ab3a:	4798      	blx	r3
 800ab3c:	6860      	ldr	r0, [r4, #4]
 800ab3e:	682d      	ldr	r5, [r5, #0]
 800ab40:	2d00      	cmp	r5, #0
 800ab42:	d1f0      	bne.n	800ab26 <_rclc_execute.part.0+0x172>
 800ab44:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ab48:	b193      	cbz	r3, 800ab70 <_rclc_execute.part.0+0x1bc>
 800ab4a:	68c5      	ldr	r5, [r0, #12]
 800ab4c:	b185      	cbz	r5, 800ab70 <_rclc_execute.part.0+0x1bc>
 800ab4e:	2600      	movs	r6, #0
 800ab50:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ab54:	b14b      	cbz	r3, 800ab6a <_rclc_execute.part.0+0x1b6>
 800ab56:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ab58:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ab5c:	b12b      	cbz	r3, 800ab6a <_rclc_execute.part.0+0x1b6>
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ab64:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ab66:	4798      	blx	r3
 800ab68:	6860      	ldr	r0, [r4, #4]
 800ab6a:	682d      	ldr	r5, [r5, #0]
 800ab6c:	2d00      	cmp	r5, #0
 800ab6e:	d1ef      	bne.n	800ab50 <_rclc_execute.part.0+0x19c>
 800ab70:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d081      	beq.n	800aa7c <_rclc_execute.part.0+0xc8>
 800ab78:	2700      	movs	r7, #0
 800ab7a:	e00b      	b.n	800ab94 <_rclc_execute.part.0+0x1e0>
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ab80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ab82:	6a1e      	ldr	r6, [r3, #32]
 800ab84:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ab88:	47b0      	blx	r6
 800ab8a:	6860      	ldr	r0, [r4, #4]
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	f009 fdcb 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800ab92:	6860      	ldr	r0, [r4, #4]
 800ab94:	f009 fe50 	bl	8014838 <rclc_action_find_first_handle_with_result_response>
 800ab98:	4605      	mov	r5, r0
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d1ee      	bne.n	800ab7c <_rclc_execute.part.0+0x1c8>
 800ab9e:	e76d      	b.n	800aa7c <_rclc_execute.part.0+0xc8>
 800aba0:	6860      	ldr	r0, [r4, #4]
 800aba2:	f880 5020 	strb.w	r5, [r0, #32]
 800aba6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f43f af66 	beq.w	800aa7c <_rclc_execute.part.0+0xc8>
 800abb0:	68c5      	ldr	r5, [r0, #12]
 800abb2:	b1b5      	cbz	r5, 800abe2 <_rclc_execute.part.0+0x22e>
 800abb4:	2602      	movs	r6, #2
 800abb6:	e001      	b.n	800abbc <_rclc_execute.part.0+0x208>
 800abb8:	682d      	ldr	r5, [r5, #0]
 800abba:	b195      	cbz	r5, 800abe2 <_rclc_execute.part.0+0x22e>
 800abbc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d1f9      	bne.n	800abb8 <_rclc_execute.part.0+0x204>
 800abc4:	69c3      	ldr	r3, [r0, #28]
 800abc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800abc8:	4628      	mov	r0, r5
 800abca:	4798      	blx	r3
 800abcc:	4603      	mov	r3, r0
 800abce:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800abd2:	4628      	mov	r0, r5
 800abd4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800abd8:	b163      	cbz	r3, 800abf4 <_rclc_execute.part.0+0x240>
 800abda:	f009 fe59 	bl	8014890 <rclc_action_server_goal_cancel_accept>
 800abde:	6860      	ldr	r0, [r4, #4]
 800abe0:	e7ea      	b.n	800abb8 <_rclc_execute.part.0+0x204>
 800abe2:	2300      	movs	r3, #0
 800abe4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800abe8:	4618      	mov	r0, r3
 800abea:	e739      	b.n	800aa60 <_rclc_execute.part.0+0xac>
 800abec:	4628      	mov	r0, r5
 800abee:	4798      	blx	r3
 800abf0:	4628      	mov	r0, r5
 800abf2:	e735      	b.n	800aa60 <_rclc_execute.part.0+0xac>
 800abf4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800abf6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800abfa:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800abfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac02:	6860      	ldr	r0, [r4, #4]
 800ac04:	2101      	movs	r1, #1
 800ac06:	f009 fe6f 	bl	80148e8 <rclc_action_server_goal_cancel_reject>
 800ac0a:	722e      	strb	r6, [r5, #8]
 800ac0c:	6860      	ldr	r0, [r4, #4]
 800ac0e:	e7d3      	b.n	800abb8 <_rclc_execute.part.0+0x204>
 800ac10:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ac12:	6880      	ldr	r0, [r0, #8]
 800ac14:	4798      	blx	r3
 800ac16:	f104 0110 	add.w	r1, r4, #16
 800ac1a:	e6e7      	b.n	800a9ec <_rclc_execute.part.0+0x38>
 800ac1c:	f100 0110 	add.w	r1, r0, #16
 800ac20:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ac22:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ac24:	6880      	ldr	r0, [r0, #8]
 800ac26:	9105      	str	r1, [sp, #20]
 800ac28:	4798      	blx	r3
 800ac2a:	9905      	ldr	r1, [sp, #20]
 800ac2c:	e6de      	b.n	800a9ec <_rclc_execute.part.0+0x38>
 800ac2e:	2001      	movs	r0, #1
 800ac30:	e716      	b.n	800aa60 <_rclc_execute.part.0+0xac>
 800ac32:	bf00      	nop

0800ac34 <rclc_executor_trigger_any>:
 800ac34:	2800      	cmp	r0, #0
 800ac36:	d03f      	beq.n	800acb8 <rclc_executor_trigger_any+0x84>
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d03e      	beq.n	800acba <rclc_executor_trigger_any+0x86>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ac42:	2200      	movs	r2, #0
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d037      	beq.n	800acb8 <rclc_executor_trigger_any+0x84>
 800ac48:	b430      	push	{r4, r5}
 800ac4a:	f893 c000 	ldrb.w	ip, [r3]
 800ac4e:	f1bc 0f08 	cmp.w	ip, #8
 800ac52:	d11e      	bne.n	800ac92 <rclc_executor_trigger_any+0x5e>
 800ac54:	685c      	ldr	r4, [r3, #4]
 800ac56:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ac58:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ac5c:	d105      	bne.n	800ac6a <rclc_executor_trigger_any+0x36>
 800ac5e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ac62:	b910      	cbnz	r0, 800ac6a <rclc_executor_trigger_any+0x36>
 800ac64:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ac68:	b128      	cbz	r0, 800ac76 <rclc_executor_trigger_any+0x42>
 800ac6a:	bc30      	pop	{r4, r5}
 800ac6c:	4770      	bx	lr
 800ac6e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d1f9      	bne.n	800ac6a <rclc_executor_trigger_any+0x36>
 800ac76:	3201      	adds	r2, #1
 800ac78:	4291      	cmp	r1, r2
 800ac7a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ac7e:	d018      	beq.n	800acb2 <rclc_executor_trigger_any+0x7e>
 800ac80:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d0f0      	beq.n	800ac6a <rclc_executor_trigger_any+0x36>
 800ac88:	f893 c000 	ldrb.w	ip, [r3]
 800ac8c:	f1bc 0f08 	cmp.w	ip, #8
 800ac90:	d0e0      	beq.n	800ac54 <rclc_executor_trigger_any+0x20>
 800ac92:	f1bc 0f09 	cmp.w	ip, #9
 800ac96:	d1ea      	bne.n	800ac6e <rclc_executor_trigger_any+0x3a>
 800ac98:	685c      	ldr	r4, [r3, #4]
 800ac9a:	6a25      	ldr	r5, [r4, #32]
 800ac9c:	2d00      	cmp	r5, #0
 800ac9e:	d1e4      	bne.n	800ac6a <rclc_executor_trigger_any+0x36>
 800aca0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d1e0      	bne.n	800ac6a <rclc_executor_trigger_any+0x36>
 800aca8:	3201      	adds	r2, #1
 800acaa:	4291      	cmp	r1, r2
 800acac:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800acb0:	d1e6      	bne.n	800ac80 <rclc_executor_trigger_any+0x4c>
 800acb2:	2000      	movs	r0, #0
 800acb4:	bc30      	pop	{r4, r5}
 800acb6:	4770      	bx	lr
 800acb8:	4770      	bx	lr
 800acba:	4608      	mov	r0, r1
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop

0800acc0 <rclc_executor_get_zero_initialized_executor>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	4903      	ldr	r1, [pc, #12]	@ (800acd0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800acc4:	4604      	mov	r4, r0
 800acc6:	2288      	movs	r2, #136	@ 0x88
 800acc8:	f00e fcf9 	bl	80196be <memcpy>
 800accc:	4620      	mov	r0, r4
 800acce:	bd10      	pop	{r4, pc}
 800acd0:	0801ac88 	.word	0x0801ac88
 800acd4:	00000000 	.word	0x00000000

0800acd8 <rclc_executor_init>:
 800acd8:	2800      	cmp	r0, #0
 800acda:	d05f      	beq.n	800ad9c <rclc_executor_init+0xc4>
 800acdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace0:	460c      	mov	r4, r1
 800ace2:	b0b0      	sub	sp, #192	@ 0xc0
 800ace4:	2900      	cmp	r1, #0
 800ace6:	d051      	beq.n	800ad8c <rclc_executor_init+0xb4>
 800ace8:	4605      	mov	r5, r0
 800acea:	4618      	mov	r0, r3
 800acec:	4616      	mov	r6, r2
 800acee:	461f      	mov	r7, r3
 800acf0:	f000 fbea 	bl	800b4c8 <rcutils_allocator_is_valid>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d049      	beq.n	800ad8c <rclc_executor_init+0xb4>
 800acf8:	2e00      	cmp	r6, #0
 800acfa:	d047      	beq.n	800ad8c <rclc_executor_init+0xb4>
 800acfc:	492c      	ldr	r1, [pc, #176]	@ (800adb0 <rclc_executor_init+0xd8>)
 800acfe:	2288      	movs	r2, #136	@ 0x88
 800ad00:	a80e      	add	r0, sp, #56	@ 0x38
 800ad02:	f00e fcdc 	bl	80196be <memcpy>
 800ad06:	a90e      	add	r1, sp, #56	@ 0x38
 800ad08:	2288      	movs	r2, #136	@ 0x88
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f00e fcd7 	bl	80196be <memcpy>
 800ad10:	602c      	str	r4, [r5, #0]
 800ad12:	4668      	mov	r0, sp
 800ad14:	60ae      	str	r6, [r5, #8]
 800ad16:	466c      	mov	r4, sp
 800ad18:	f008 fab2 	bl	8013280 <rcl_get_zero_initialized_wait_set>
 800ad1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad1e:	f105 0c14 	add.w	ip, r5, #20
 800ad22:	f8d7 8000 	ldr.w	r8, [r7]
 800ad26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad36:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ada8 <rclc_executor_init+0xd0>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	f8cc 3000 	str.w	r3, [ip]
 800ad40:	6939      	ldr	r1, [r7, #16]
 800ad42:	612f      	str	r7, [r5, #16]
 800ad44:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ad48:	01b0      	lsls	r0, r6, #6
 800ad4a:	47c0      	blx	r8
 800ad4c:	6068      	str	r0, [r5, #4]
 800ad4e:	b338      	cbz	r0, 800ada0 <rclc_executor_init+0xc8>
 800ad50:	2400      	movs	r4, #0
 800ad52:	e000      	b.n	800ad56 <rclc_executor_init+0x7e>
 800ad54:	6868      	ldr	r0, [r5, #4]
 800ad56:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	3401      	adds	r4, #1
 800ad5e:	f000 fa6b 	bl	800b238 <rclc_executor_handle_init>
 800ad62:	42a6      	cmp	r6, r4
 800ad64:	d1f6      	bne.n	800ad54 <rclc_executor_init+0x7c>
 800ad66:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800ad6a:	f000 fa5b 	bl	800b224 <rclc_executor_handle_counters_zero_init>
 800ad6e:	4a11      	ldr	r2, [pc, #68]	@ (800adb4 <rclc_executor_init+0xdc>)
 800ad70:	686b      	ldr	r3, [r5, #4]
 800ad72:	2000      	movs	r0, #0
 800ad74:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800ad78:	b163      	cbz	r3, 800ad94 <rclc_executor_init+0xbc>
 800ad7a:	692b      	ldr	r3, [r5, #16]
 800ad7c:	b153      	cbz	r3, 800ad94 <rclc_executor_init+0xbc>
 800ad7e:	68ab      	ldr	r3, [r5, #8]
 800ad80:	b143      	cbz	r3, 800ad94 <rclc_executor_init+0xbc>
 800ad82:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800ad86:	b030      	add	sp, #192	@ 0xc0
 800ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad8c:	200b      	movs	r0, #11
 800ad8e:	b030      	add	sp, #192	@ 0xc0
 800ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad94:	4618      	mov	r0, r3
 800ad96:	b030      	add	sp, #192	@ 0xc0
 800ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9c:	200b      	movs	r0, #11
 800ad9e:	4770      	bx	lr
 800ada0:	200a      	movs	r0, #10
 800ada2:	e7f4      	b.n	800ad8e <rclc_executor_init+0xb6>
 800ada4:	f3af 8000 	nop.w
 800ada8:	3b9aca00 	.word	0x3b9aca00
 800adac:	00000000 	.word	0x00000000
 800adb0:	0801ac88 	.word	0x0801ac88
 800adb4:	0800ac35 	.word	0x0800ac35

0800adb8 <rclc_executor_add_subscription>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	f89d e018 	ldrb.w	lr, [sp, #24]
 800adbe:	b338      	cbz	r0, 800ae10 <rclc_executor_add_subscription+0x58>
 800adc0:	b331      	cbz	r1, 800ae10 <rclc_executor_add_subscription+0x58>
 800adc2:	b32a      	cbz	r2, 800ae10 <rclc_executor_add_subscription+0x58>
 800adc4:	b323      	cbz	r3, 800ae10 <rclc_executor_add_subscription+0x58>
 800adc6:	4604      	mov	r4, r0
 800adc8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800adcc:	42a8      	cmp	r0, r5
 800adce:	d301      	bcc.n	800add4 <rclc_executor_add_subscription+0x1c>
 800add0:	2001      	movs	r0, #1
 800add2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add4:	6866      	ldr	r6, [r4, #4]
 800add6:	0187      	lsls	r7, r0, #6
 800add8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800addc:	2500      	movs	r5, #0
 800adde:	55f5      	strb	r5, [r6, r7]
 800ade0:	3001      	adds	r0, #1
 800ade2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800ade6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800adea:	2301      	movs	r3, #1
 800adec:	f104 0514 	add.w	r5, r4, #20
 800adf0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800adf4:	f88c e001 	strb.w	lr, [ip, #1]
 800adf8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800adfc:	60e0      	str	r0, [r4, #12]
 800adfe:	4628      	mov	r0, r5
 800ae00:	f008 fa52 	bl	80132a8 <rcl_wait_set_is_valid>
 800ae04:	b930      	cbnz	r0, 800ae14 <rclc_executor_add_subscription+0x5c>
 800ae06:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ae08:	3301      	adds	r3, #1
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae10:	200b      	movs	r0, #11
 800ae12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae14:	4628      	mov	r0, r5
 800ae16:	f008 fa4d 	bl	80132b4 <rcl_wait_set_fini>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d0f3      	beq.n	800ae06 <rclc_executor_add_subscription+0x4e>
 800ae1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae20 <rclc_executor_prepare>:
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d044      	beq.n	800aeae <rclc_executor_prepare+0x8e>
 800ae24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae26:	f100 0514 	add.w	r5, r0, #20
 800ae2a:	b09b      	sub	sp, #108	@ 0x6c
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f008 fa3a 	bl	80132a8 <rcl_wait_set_is_valid>
 800ae34:	b110      	cbz	r0, 800ae3c <rclc_executor_prepare+0x1c>
 800ae36:	2000      	movs	r0, #0
 800ae38:	b01b      	add	sp, #108	@ 0x6c
 800ae3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	f008 fa39 	bl	80132b4 <rcl_wait_set_fini>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d130      	bne.n	800aea8 <rclc_executor_prepare+0x88>
 800ae46:	a80c      	add	r0, sp, #48	@ 0x30
 800ae48:	f008 fa1a 	bl	8013280 <rcl_get_zero_initialized_wait_set>
 800ae4c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ae50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ae54:	46ae      	mov	lr, r5
 800ae56:	6927      	ldr	r7, [r4, #16]
 800ae58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ae5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ae60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ae64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ae68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ae6c:	f8dc 3000 	ldr.w	r3, [ip]
 800ae70:	f8ce 3000 	str.w	r3, [lr]
 800ae74:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ae76:	ae04      	add	r6, sp, #16
 800ae78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	6822      	ldr	r2, [r4, #0]
 800ae7e:	6033      	str	r3, [r6, #0]
 800ae80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae82:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ae84:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ae88:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ae8c:	e9cd 2100 	strd	r2, r1, [sp]
 800ae90:	4628      	mov	r0, r5
 800ae92:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ae94:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae96:	f008 fd0b 	bl	80138b0 <rcl_wait_set_init>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d0cc      	beq.n	800ae38 <rclc_executor_prepare+0x18>
 800ae9e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800aea0:	f000 fb36 	bl	800b510 <rcutils_reset_error>
 800aea4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aea6:	e7c7      	b.n	800ae38 <rclc_executor_prepare+0x18>
 800aea8:	f000 fb32 	bl	800b510 <rcutils_reset_error>
 800aeac:	e7cb      	b.n	800ae46 <rclc_executor_prepare+0x26>
 800aeae:	200b      	movs	r0, #11
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <rclc_executor_spin_some.part.0>:
 800aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	f100 0614 	add.w	r6, r0, #20
 800aebc:	b083      	sub	sp, #12
 800aebe:	4691      	mov	r9, r2
 800aec0:	4698      	mov	r8, r3
 800aec2:	4605      	mov	r5, r0
 800aec4:	f7ff ffac 	bl	800ae20 <rclc_executor_prepare>
 800aec8:	4630      	mov	r0, r6
 800aeca:	f008 fabf 	bl	801344c <rcl_wait_set_clear>
 800aece:	4607      	mov	r7, r0
 800aed0:	2800      	cmp	r0, #0
 800aed2:	f040 80ed 	bne.w	800b0b0 <rclc_executor_spin_some.part.0+0x1fc>
 800aed6:	68ab      	ldr	r3, [r5, #8]
 800aed8:	4604      	mov	r4, r0
 800aeda:	b303      	cbz	r3, 800af1e <rclc_executor_spin_some.part.0+0x6a>
 800aedc:	6869      	ldr	r1, [r5, #4]
 800aede:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800aee2:	01a2      	lsls	r2, r4, #6
 800aee4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800aee8:	b1cb      	cbz	r3, 800af1e <rclc_executor_spin_some.part.0+0x6a>
 800aeea:	5c8b      	ldrb	r3, [r1, r2]
 800aeec:	2b0a      	cmp	r3, #10
 800aeee:	f200 80d8 	bhi.w	800b0a2 <rclc_executor_spin_some.part.0+0x1ee>
 800aef2:	e8df f003 	tbb	[pc, r3]
 800aef6:	9c9c      	.short	0x9c9c
 800aef8:	068c8ca7 	.word	0x068c8ca7
 800aefc:	bdc90606 	.word	0xbdc90606
 800af00:	b2          	.byte	0xb2
 800af01:	00          	.byte	0x00
 800af02:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800af06:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800af0a:	4630      	mov	r0, r6
 800af0c:	f008 fde6 	bl	8013adc <rcl_wait_set_add_service>
 800af10:	2800      	cmp	r0, #0
 800af12:	f040 8086 	bne.w	800b022 <rclc_executor_spin_some.part.0+0x16e>
 800af16:	68ab      	ldr	r3, [r5, #8]
 800af18:	3401      	adds	r4, #1
 800af1a:	429c      	cmp	r4, r3
 800af1c:	d3de      	bcc.n	800aedc <rclc_executor_spin_some.part.0+0x28>
 800af1e:	4643      	mov	r3, r8
 800af20:	464a      	mov	r2, r9
 800af22:	4630      	mov	r0, r6
 800af24:	f008 fe08 	bl	8013b38 <rcl_wait>
 800af28:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80c7 	beq.w	800b0c0 <rclc_executor_spin_some.part.0+0x20c>
 800af32:	2b01      	cmp	r3, #1
 800af34:	f040 80b5 	bne.w	800b0a2 <rclc_executor_spin_some.part.0+0x1ee>
 800af38:	68ab      	ldr	r3, [r5, #8]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 8159 	beq.w	800b1f2 <rclc_executor_spin_some.part.0+0x33e>
 800af40:	2400      	movs	r4, #0
 800af42:	46a0      	mov	r8, r4
 800af44:	f240 1991 	movw	r9, #401	@ 0x191
 800af48:	e00a      	b.n	800af60 <rclc_executor_spin_some.part.0+0xac>
 800af4a:	f7ff fb71 	bl	800a630 <_rclc_check_for_new_data>
 800af4e:	4604      	mov	r4, r0
 800af50:	b110      	cbz	r0, 800af58 <rclc_executor_spin_some.part.0+0xa4>
 800af52:	4548      	cmp	r0, r9
 800af54:	f040 80b2 	bne.w	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800af58:	68ab      	ldr	r3, [r5, #8]
 800af5a:	4598      	cmp	r8, r3
 800af5c:	f080 8126 	bcs.w	800b1ac <rclc_executor_spin_some.part.0+0x2f8>
 800af60:	686a      	ldr	r2, [r5, #4]
 800af62:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800af66:	4631      	mov	r1, r6
 800af68:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800af6c:	f108 0801 	add.w	r8, r8, #1
 800af70:	f1bc 0f00 	cmp.w	ip, #0
 800af74:	d1e9      	bne.n	800af4a <rclc_executor_spin_some.part.0+0x96>
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800af7e:	4798      	blx	r3
 800af80:	2800      	cmp	r0, #0
 800af82:	f000 809b 	beq.w	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800af86:	68ab      	ldr	r3, [r5, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 8097 	beq.w	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800af8e:	f04f 0800 	mov.w	r8, #0
 800af92:	f240 1991 	movw	r9, #401	@ 0x191
 800af96:	e009      	b.n	800afac <rclc_executor_spin_some.part.0+0xf8>
 800af98:	f7ff fb98 	bl	800a6cc <_rclc_take_new_data>
 800af9c:	4604      	mov	r4, r0
 800af9e:	b110      	cbz	r0, 800afa6 <rclc_executor_spin_some.part.0+0xf2>
 800afa0:	4548      	cmp	r0, r9
 800afa2:	f040 808b 	bne.w	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800afa6:	68ab      	ldr	r3, [r5, #8]
 800afa8:	4598      	cmp	r8, r3
 800afaa:	d209      	bcs.n	800afc0 <rclc_executor_spin_some.part.0+0x10c>
 800afac:	6868      	ldr	r0, [r5, #4]
 800afae:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800afb2:	4631      	mov	r1, r6
 800afb4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800afb8:	f108 0801 	add.w	r8, r8, #1
 800afbc:	2a00      	cmp	r2, #0
 800afbe:	d1eb      	bne.n	800af98 <rclc_executor_spin_some.part.0+0xe4>
 800afc0:	2600      	movs	r6, #0
 800afc2:	b97b      	cbnz	r3, 800afe4 <rclc_executor_spin_some.part.0+0x130>
 800afc4:	e07a      	b.n	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800afc6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800afca:	2a08      	cmp	r2, #8
 800afcc:	f000 80fd 	beq.w	800b1ca <rclc_executor_spin_some.part.0+0x316>
 800afd0:	2a09      	cmp	r2, #9
 800afd2:	f000 80ef 	beq.w	800b1b4 <rclc_executor_spin_some.part.0+0x300>
 800afd6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800afda:	b98a      	cbnz	r2, 800b000 <rclc_executor_spin_some.part.0+0x14c>
 800afdc:	3601      	adds	r6, #1
 800afde:	429e      	cmp	r6, r3
 800afe0:	d262      	bcs.n	800b0a8 <rclc_executor_spin_some.part.0+0x1f4>
 800afe2:	2400      	movs	r4, #0
 800afe4:	686a      	ldr	r2, [r5, #4]
 800afe6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800afea:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800afee:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800aff2:	2900      	cmp	r1, #0
 800aff4:	d062      	beq.n	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800aff6:	7841      	ldrb	r1, [r0, #1]
 800aff8:	2900      	cmp	r1, #0
 800affa:	d0e4      	beq.n	800afc6 <rclc_executor_spin_some.part.0+0x112>
 800affc:	2901      	cmp	r1, #1
 800affe:	d1ed      	bne.n	800afdc <rclc_executor_spin_some.part.0+0x128>
 800b000:	f7ff fcd8 	bl	800a9b4 <_rclc_execute.part.0>
 800b004:	2800      	cmp	r0, #0
 800b006:	f040 80b6 	bne.w	800b176 <rclc_executor_spin_some.part.0+0x2c2>
 800b00a:	68ab      	ldr	r3, [r5, #8]
 800b00c:	e7e6      	b.n	800afdc <rclc_executor_spin_some.part.0+0x128>
 800b00e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b012:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b016:	4630      	mov	r0, r6
 800b018:	f008 fd34 	bl	8013a84 <rcl_wait_set_add_client>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	f43f af7a 	beq.w	800af16 <rclc_executor_spin_some.part.0+0x62>
 800b022:	9001      	str	r0, [sp, #4]
 800b024:	f000 fa74 	bl	800b510 <rcutils_reset_error>
 800b028:	9801      	ldr	r0, [sp, #4]
 800b02a:	4607      	mov	r7, r0
 800b02c:	e03c      	b.n	800b0a8 <rclc_executor_spin_some.part.0+0x1f4>
 800b02e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b032:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b036:	4630      	mov	r0, r6
 800b038:	f008 f9dc 	bl	80133f4 <rcl_wait_set_add_subscription>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	f43f af6a 	beq.w	800af16 <rclc_executor_spin_some.part.0+0x62>
 800b042:	e7ee      	b.n	800b022 <rclc_executor_spin_some.part.0+0x16e>
 800b044:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b048:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b04c:	4630      	mov	r0, r6
 800b04e:	f008 fce9 	bl	8013a24 <rcl_wait_set_add_timer>
 800b052:	2800      	cmp	r0, #0
 800b054:	f43f af5f 	beq.w	800af16 <rclc_executor_spin_some.part.0+0x62>
 800b058:	e7e3      	b.n	800b022 <rclc_executor_spin_some.part.0+0x16e>
 800b05a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b05e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b062:	4630      	mov	r0, r6
 800b064:	f008 fcb2 	bl	80139cc <rcl_wait_set_add_guard_condition>
 800b068:	2800      	cmp	r0, #0
 800b06a:	f43f af54 	beq.w	800af16 <rclc_executor_spin_some.part.0+0x62>
 800b06e:	e7d8      	b.n	800b022 <rclc_executor_spin_some.part.0+0x16e>
 800b070:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b074:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b078:	3110      	adds	r1, #16
 800b07a:	4630      	mov	r0, r6
 800b07c:	f009 fa34 	bl	80144e8 <rcl_action_wait_set_add_action_server>
 800b080:	2800      	cmp	r0, #0
 800b082:	f43f af48 	beq.w	800af16 <rclc_executor_spin_some.part.0+0x62>
 800b086:	e7cc      	b.n	800b022 <rclc_executor_spin_some.part.0+0x16e>
 800b088:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b08c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b090:	3110      	adds	r1, #16
 800b092:	2300      	movs	r3, #0
 800b094:	4630      	mov	r0, r6
 800b096:	f008 ffff 	bl	8014098 <rcl_action_wait_set_add_action_client>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f af3b 	beq.w	800af16 <rclc_executor_spin_some.part.0+0x62>
 800b0a0:	e7bf      	b.n	800b022 <rclc_executor_spin_some.part.0+0x16e>
 800b0a2:	f000 fa35 	bl	800b510 <rcutils_reset_error>
 800b0a6:	2701      	movs	r7, #1
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	b003      	add	sp, #12
 800b0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b0:	f000 fa2e 	bl	800b510 <rcutils_reset_error>
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	b003      	add	sp, #12
 800b0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0bc:	4627      	mov	r7, r4
 800b0be:	e7f3      	b.n	800b0a8 <rclc_executor_spin_some.part.0+0x1f4>
 800b0c0:	68ab      	ldr	r3, [r5, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 8092 	beq.w	800b1ec <rclc_executor_spin_some.part.0+0x338>
 800b0c8:	2400      	movs	r4, #0
 800b0ca:	46a0      	mov	r8, r4
 800b0cc:	f240 1991 	movw	r9, #401	@ 0x191
 800b0d0:	e008      	b.n	800b0e4 <rclc_executor_spin_some.part.0+0x230>
 800b0d2:	f7ff faad 	bl	800a630 <_rclc_check_for_new_data>
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	b108      	cbz	r0, 800b0de <rclc_executor_spin_some.part.0+0x22a>
 800b0da:	4548      	cmp	r0, r9
 800b0dc:	d1ee      	bne.n	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800b0de:	68ab      	ldr	r3, [r5, #8]
 800b0e0:	4598      	cmp	r8, r3
 800b0e2:	d265      	bcs.n	800b1b0 <rclc_executor_spin_some.part.0+0x2fc>
 800b0e4:	686a      	ldr	r2, [r5, #4]
 800b0e6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b0f0:	f108 0801 	add.w	r8, r8, #1
 800b0f4:	f1bc 0f00 	cmp.w	ip, #0
 800b0f8:	d1eb      	bne.n	800b0d2 <rclc_executor_spin_some.part.0+0x21e>
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b102:	4798      	blx	r3
 800b104:	2800      	cmp	r0, #0
 800b106:	d0d9      	beq.n	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800b108:	68ab      	ldr	r3, [r5, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0d6      	beq.n	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800b10e:	f04f 0800 	mov.w	r8, #0
 800b112:	f240 1991 	movw	r9, #401	@ 0x191
 800b116:	f240 2a59 	movw	sl, #601	@ 0x259
 800b11a:	e00e      	b.n	800b13a <rclc_executor_spin_some.part.0+0x286>
 800b11c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b120:	2b08      	cmp	r3, #8
 800b122:	d033      	beq.n	800b18c <rclc_executor_spin_some.part.0+0x2d8>
 800b124:	2b09      	cmp	r3, #9
 800b126:	d028      	beq.n	800b17a <rclc_executor_spin_some.part.0+0x2c6>
 800b128:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b12c:	b9fb      	cbnz	r3, 800b16e <rclc_executor_spin_some.part.0+0x2ba>
 800b12e:	68ab      	ldr	r3, [r5, #8]
 800b130:	f108 0801 	add.w	r8, r8, #1
 800b134:	4598      	cmp	r8, r3
 800b136:	d2b7      	bcs.n	800b0a8 <rclc_executor_spin_some.part.0+0x1f4>
 800b138:	2400      	movs	r4, #0
 800b13a:	6868      	ldr	r0, [r5, #4]
 800b13c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b140:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b144:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0b7      	beq.n	800b0bc <rclc_executor_spin_some.part.0+0x208>
 800b14c:	4631      	mov	r1, r6
 800b14e:	f7ff fabd 	bl	800a6cc <_rclc_take_new_data>
 800b152:	b118      	cbz	r0, 800b15c <rclc_executor_spin_some.part.0+0x2a8>
 800b154:	4548      	cmp	r0, r9
 800b156:	d001      	beq.n	800b15c <rclc_executor_spin_some.part.0+0x2a8>
 800b158:	4550      	cmp	r0, sl
 800b15a:	d10c      	bne.n	800b176 <rclc_executor_spin_some.part.0+0x2c2>
 800b15c:	686b      	ldr	r3, [r5, #4]
 800b15e:	eb13 000b 	adds.w	r0, r3, fp
 800b162:	d021      	beq.n	800b1a8 <rclc_executor_spin_some.part.0+0x2f4>
 800b164:	7842      	ldrb	r2, [r0, #1]
 800b166:	2a00      	cmp	r2, #0
 800b168:	d0d8      	beq.n	800b11c <rclc_executor_spin_some.part.0+0x268>
 800b16a:	2a01      	cmp	r2, #1
 800b16c:	d1df      	bne.n	800b12e <rclc_executor_spin_some.part.0+0x27a>
 800b16e:	f7ff fc21 	bl	800a9b4 <_rclc_execute.part.0>
 800b172:	2800      	cmp	r0, #0
 800b174:	d0db      	beq.n	800b12e <rclc_executor_spin_some.part.0+0x27a>
 800b176:	4607      	mov	r7, r0
 800b178:	e796      	b.n	800b0a8 <rclc_executor_spin_some.part.0+0x1f4>
 800b17a:	6843      	ldr	r3, [r0, #4]
 800b17c:	6a1a      	ldr	r2, [r3, #32]
 800b17e:	2a00      	cmp	r2, #0
 800b180:	d1f5      	bne.n	800b16e <rclc_executor_spin_some.part.0+0x2ba>
 800b182:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0d1      	beq.n	800b12e <rclc_executor_spin_some.part.0+0x27a>
 800b18a:	e7f0      	b.n	800b16e <rclc_executor_spin_some.part.0+0x2ba>
 800b18c:	6843      	ldr	r3, [r0, #4]
 800b18e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b190:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b194:	d1eb      	bne.n	800b16e <rclc_executor_spin_some.part.0+0x2ba>
 800b196:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	d1e7      	bne.n	800b16e <rclc_executor_spin_some.part.0+0x2ba>
 800b19e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d0c3      	beq.n	800b12e <rclc_executor_spin_some.part.0+0x27a>
 800b1a6:	e7e2      	b.n	800b16e <rclc_executor_spin_some.part.0+0x2ba>
 800b1a8:	270b      	movs	r7, #11
 800b1aa:	e77d      	b.n	800b0a8 <rclc_executor_spin_some.part.0+0x1f4>
 800b1ac:	686a      	ldr	r2, [r5, #4]
 800b1ae:	e6e2      	b.n	800af76 <rclc_executor_spin_some.part.0+0xc2>
 800b1b0:	686a      	ldr	r2, [r5, #4]
 800b1b2:	e7a2      	b.n	800b0fa <rclc_executor_spin_some.part.0+0x246>
 800b1b4:	6842      	ldr	r2, [r0, #4]
 800b1b6:	6a11      	ldr	r1, [r2, #32]
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	f47f af21 	bne.w	800b000 <rclc_executor_spin_some.part.0+0x14c>
 800b1be:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	f43f af0a 	beq.w	800afdc <rclc_executor_spin_some.part.0+0x128>
 800b1c8:	e71a      	b.n	800b000 <rclc_executor_spin_some.part.0+0x14c>
 800b1ca:	6842      	ldr	r2, [r0, #4]
 800b1cc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b1ce:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b1d2:	f47f af15 	bne.w	800b000 <rclc_executor_spin_some.part.0+0x14c>
 800b1d6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	f47f af10 	bne.w	800b000 <rclc_executor_spin_some.part.0+0x14c>
 800b1e0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	f43f aef9 	beq.w	800afdc <rclc_executor_spin_some.part.0+0x128>
 800b1ea:	e709      	b.n	800b000 <rclc_executor_spin_some.part.0+0x14c>
 800b1ec:	686a      	ldr	r2, [r5, #4]
 800b1ee:	461c      	mov	r4, r3
 800b1f0:	e783      	b.n	800b0fa <rclc_executor_spin_some.part.0+0x246>
 800b1f2:	686a      	ldr	r2, [r5, #4]
 800b1f4:	461c      	mov	r4, r3
 800b1f6:	e6be      	b.n	800af76 <rclc_executor_spin_some.part.0+0xc2>

0800b1f8 <rclc_executor_spin_some>:
 800b1f8:	b190      	cbz	r0, 800b220 <rclc_executor_spin_some+0x28>
 800b1fa:	b570      	push	{r4, r5, r6, lr}
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	6800      	ldr	r0, [r0, #0]
 800b200:	4616      	mov	r6, r2
 800b202:	461d      	mov	r5, r3
 800b204:	f006 feb0 	bl	8011f68 <rcl_context_is_valid>
 800b208:	b130      	cbz	r0, 800b218 <rclc_executor_spin_some+0x20>
 800b20a:	4632      	mov	r2, r6
 800b20c:	462b      	mov	r3, r5
 800b20e:	4620      	mov	r0, r4
 800b210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b214:	f7ff be4e 	b.w	800aeb4 <rclc_executor_spin_some.part.0>
 800b218:	f000 f97a 	bl	800b510 <rcutils_reset_error>
 800b21c:	2001      	movs	r0, #1
 800b21e:	bd70      	pop	{r4, r5, r6, pc}
 800b220:	200b      	movs	r0, #11
 800b222:	4770      	bx	lr

0800b224 <rclc_executor_handle_counters_zero_init>:
 800b224:	b130      	cbz	r0, 800b234 <rclc_executor_handle_counters_zero_init+0x10>
 800b226:	b508      	push	{r3, lr}
 800b228:	2220      	movs	r2, #32
 800b22a:	2100      	movs	r1, #0
 800b22c:	f00e f9df 	bl	80195ee <memset>
 800b230:	2000      	movs	r0, #0
 800b232:	bd08      	pop	{r3, pc}
 800b234:	200b      	movs	r0, #11
 800b236:	4770      	bx	lr

0800b238 <rclc_executor_handle_init>:
 800b238:	b168      	cbz	r0, 800b256 <rclc_executor_handle_init+0x1e>
 800b23a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b260 <rclc_executor_handle_init+0x28>
 800b23e:	2300      	movs	r3, #0
 800b240:	220b      	movs	r2, #11
 800b242:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b246:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b24a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b24e:	8002      	strh	r2, [r0, #0]
 800b250:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b252:	4618      	mov	r0, r3
 800b254:	4770      	bx	lr
 800b256:	200b      	movs	r0, #11
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	f3af 8000 	nop.w
	...

0800b268 <rclc_support_init>:
 800b268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b26c:	b086      	sub	sp, #24
 800b26e:	b3b8      	cbz	r0, 800b2e0 <rclc_support_init+0x78>
 800b270:	461c      	mov	r4, r3
 800b272:	b3ab      	cbz	r3, 800b2e0 <rclc_support_init+0x78>
 800b274:	460f      	mov	r7, r1
 800b276:	4690      	mov	r8, r2
 800b278:	4606      	mov	r6, r0
 800b27a:	f006 ffdf 	bl	801223c <rcl_get_zero_initialized_init_options>
 800b27e:	f104 030c 	add.w	r3, r4, #12
 800b282:	9005      	str	r0, [sp, #20]
 800b284:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b288:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b28c:	a805      	add	r0, sp, #20
 800b28e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b292:	f006 ffd5 	bl	8012240 <rcl_init_options_init>
 800b296:	4605      	mov	r5, r0
 800b298:	b9e0      	cbnz	r0, 800b2d4 <rclc_support_init+0x6c>
 800b29a:	ad02      	add	r5, sp, #8
 800b29c:	4628      	mov	r0, r5
 800b29e:	f006 fe59 	bl	8011f54 <rcl_get_zero_initialized_context>
 800b2a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b2a6:	4633      	mov	r3, r6
 800b2a8:	e886 0003 	stmia.w	r6, {r0, r1}
 800b2ac:	aa05      	add	r2, sp, #20
 800b2ae:	4641      	mov	r1, r8
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f006 febf 	bl	8012034 <rcl_init>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b9b8      	cbnz	r0, 800b2ea <rclc_support_init+0x82>
 800b2ba:	60b4      	str	r4, [r6, #8]
 800b2bc:	4622      	mov	r2, r4
 800b2be:	f106 010c 	add.w	r1, r6, #12
 800b2c2:	2003      	movs	r0, #3
 800b2c4:	f007 fde6 	bl	8012e94 <rcl_clock_init>
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	b970      	cbnz	r0, 800b2ea <rclc_support_init+0x82>
 800b2cc:	a805      	add	r0, sp, #20
 800b2ce:	f007 f81d 	bl	801230c <rcl_init_options_fini>
 800b2d2:	b108      	cbz	r0, 800b2d8 <rclc_support_init+0x70>
 800b2d4:	f000 f91c 	bl	800b510 <rcutils_reset_error>
 800b2d8:	4628      	mov	r0, r5
 800b2da:	b006      	add	sp, #24
 800b2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e0:	250b      	movs	r5, #11
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	b006      	add	sp, #24
 800b2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ea:	f000 f911 	bl	800b510 <rcutils_reset_error>
 800b2ee:	a805      	add	r0, sp, #20
 800b2f0:	f007 f80c 	bl	801230c <rcl_init_options_fini>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d0ef      	beq.n	800b2d8 <rclc_support_init+0x70>
 800b2f8:	e7ec      	b.n	800b2d4 <rclc_support_init+0x6c>
 800b2fa:	bf00      	nop

0800b2fc <rclc_node_init_default>:
 800b2fc:	b3b8      	cbz	r0, 800b36e <rclc_node_init_default+0x72>
 800b2fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b302:	460d      	mov	r5, r1
 800b304:	b0a1      	sub	sp, #132	@ 0x84
 800b306:	b329      	cbz	r1, 800b354 <rclc_node_init_default+0x58>
 800b308:	4616      	mov	r6, r2
 800b30a:	b31a      	cbz	r2, 800b354 <rclc_node_init_default+0x58>
 800b30c:	461f      	mov	r7, r3
 800b30e:	b30b      	cbz	r3, 800b354 <rclc_node_init_default+0x58>
 800b310:	f10d 0810 	add.w	r8, sp, #16
 800b314:	4604      	mov	r4, r0
 800b316:	4640      	mov	r0, r8
 800b318:	f007 f8b0 	bl	801247c <rcl_get_zero_initialized_node>
 800b31c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b320:	f10d 0918 	add.w	r9, sp, #24
 800b324:	e884 0003 	stmia.w	r4, {r0, r1}
 800b328:	4648      	mov	r0, r9
 800b32a:	f007 fa1f 	bl	801276c <rcl_node_get_default_options>
 800b32e:	4640      	mov	r0, r8
 800b330:	f007 f8a4 	bl	801247c <rcl_get_zero_initialized_node>
 800b334:	f8cd 9000 	str.w	r9, [sp]
 800b338:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b33c:	463b      	mov	r3, r7
 800b33e:	e884 0003 	stmia.w	r4, {r0, r1}
 800b342:	4632      	mov	r2, r6
 800b344:	4629      	mov	r1, r5
 800b346:	4620      	mov	r0, r4
 800b348:	f007 f8a2 	bl	8012490 <rcl_node_init>
 800b34c:	b930      	cbnz	r0, 800b35c <rclc_node_init_default+0x60>
 800b34e:	b021      	add	sp, #132	@ 0x84
 800b350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b354:	200b      	movs	r0, #11
 800b356:	b021      	add	sp, #132	@ 0x84
 800b358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b35c:	9003      	str	r0, [sp, #12]
 800b35e:	f000 f8d7 	bl	800b510 <rcutils_reset_error>
 800b362:	f000 f8d5 	bl	800b510 <rcutils_reset_error>
 800b366:	9803      	ldr	r0, [sp, #12]
 800b368:	b021      	add	sp, #132	@ 0x84
 800b36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b36e:	200b      	movs	r0, #11
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop

0800b374 <rclc_publisher_init_default>:
 800b374:	b368      	cbz	r0, 800b3d2 <rclc_publisher_init_default+0x5e>
 800b376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b37a:	460d      	mov	r5, r1
 800b37c:	b0a0      	sub	sp, #128	@ 0x80
 800b37e:	b321      	cbz	r1, 800b3ca <rclc_publisher_init_default+0x56>
 800b380:	4616      	mov	r6, r2
 800b382:	b312      	cbz	r2, 800b3ca <rclc_publisher_init_default+0x56>
 800b384:	461f      	mov	r7, r3
 800b386:	b303      	cbz	r3, 800b3ca <rclc_publisher_init_default+0x56>
 800b388:	4604      	mov	r4, r0
 800b38a:	f7ff f841 	bl	800a410 <rcl_get_zero_initialized_publisher>
 800b38e:	f10d 0810 	add.w	r8, sp, #16
 800b392:	6020      	str	r0, [r4, #0]
 800b394:	4640      	mov	r0, r8
 800b396:	f7ff f8d7 	bl	800a548 <rcl_publisher_get_default_options>
 800b39a:	490f      	ldr	r1, [pc, #60]	@ (800b3d8 <rclc_publisher_init_default+0x64>)
 800b39c:	2250      	movs	r2, #80	@ 0x50
 800b39e:	4640      	mov	r0, r8
 800b3a0:	f00e f98d 	bl	80196be <memcpy>
 800b3a4:	f8cd 8000 	str.w	r8, [sp]
 800b3a8:	463b      	mov	r3, r7
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff f834 	bl	800a41c <rcl_publisher_init>
 800b3b4:	b910      	cbnz	r0, 800b3bc <rclc_publisher_init_default+0x48>
 800b3b6:	b020      	add	sp, #128	@ 0x80
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3bc:	9003      	str	r0, [sp, #12]
 800b3be:	f000 f8a7 	bl	800b510 <rcutils_reset_error>
 800b3c2:	9803      	ldr	r0, [sp, #12]
 800b3c4:	b020      	add	sp, #128	@ 0x80
 800b3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ca:	200b      	movs	r0, #11
 800b3cc:	b020      	add	sp, #128	@ 0x80
 800b3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d2:	200b      	movs	r0, #11
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	0801ad10 	.word	0x0801ad10

0800b3dc <rclc_subscription_init_default>:
 800b3dc:	b368      	cbz	r0, 800b43a <rclc_subscription_init_default+0x5e>
 800b3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	b0a0      	sub	sp, #128	@ 0x80
 800b3e6:	b321      	cbz	r1, 800b432 <rclc_subscription_init_default+0x56>
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	b312      	cbz	r2, 800b432 <rclc_subscription_init_default+0x56>
 800b3ec:	461f      	mov	r7, r3
 800b3ee:	b303      	cbz	r3, 800b432 <rclc_subscription_init_default+0x56>
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	f007 fbf3 	bl	8012bdc <rcl_get_zero_initialized_subscription>
 800b3f6:	f10d 0810 	add.w	r8, sp, #16
 800b3fa:	6020      	str	r0, [r4, #0]
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	f007 fc9b 	bl	8012d38 <rcl_subscription_get_default_options>
 800b402:	490f      	ldr	r1, [pc, #60]	@ (800b440 <rclc_subscription_init_default+0x64>)
 800b404:	2250      	movs	r2, #80	@ 0x50
 800b406:	4640      	mov	r0, r8
 800b408:	f00e f959 	bl	80196be <memcpy>
 800b40c:	f8cd 8000 	str.w	r8, [sp]
 800b410:	463b      	mov	r3, r7
 800b412:	4632      	mov	r2, r6
 800b414:	4629      	mov	r1, r5
 800b416:	4620      	mov	r0, r4
 800b418:	f007 fbe6 	bl	8012be8 <rcl_subscription_init>
 800b41c:	b910      	cbnz	r0, 800b424 <rclc_subscription_init_default+0x48>
 800b41e:	b020      	add	sp, #128	@ 0x80
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	9003      	str	r0, [sp, #12]
 800b426:	f000 f873 	bl	800b510 <rcutils_reset_error>
 800b42a:	9803      	ldr	r0, [sp, #12]
 800b42c:	b020      	add	sp, #128	@ 0x80
 800b42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b432:	200b      	movs	r0, #11
 800b434:	b020      	add	sp, #128	@ 0x80
 800b436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43a:	200b      	movs	r0, #11
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	0801ad60 	.word	0x0801ad60

0800b444 <__default_zero_allocate>:
 800b444:	f00d bb36 	b.w	8018ab4 <calloc>

0800b448 <__default_reallocate>:
 800b448:	f00d bd08 	b.w	8018e5c <realloc>

0800b44c <__default_deallocate>:
 800b44c:	f00d bbb0 	b.w	8018bb0 <free>

0800b450 <__default_allocate>:
 800b450:	f00d bba6 	b.w	8018ba0 <malloc>

0800b454 <rcutils_get_zero_initialized_allocator>:
 800b454:	b510      	push	{r4, lr}
 800b456:	4c05      	ldr	r4, [pc, #20]	@ (800b46c <rcutils_get_zero_initialized_allocator+0x18>)
 800b458:	4686      	mov	lr, r0
 800b45a:	4684      	mov	ip, r0
 800b45c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b45e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	f8cc 3000 	str.w	r3, [ip]
 800b468:	4670      	mov	r0, lr
 800b46a:	bd10      	pop	{r4, pc}
 800b46c:	0801adb0 	.word	0x0801adb0

0800b470 <rcutils_set_default_allocator>:
 800b470:	b1a8      	cbz	r0, 800b49e <rcutils_set_default_allocator+0x2e>
 800b472:	6802      	ldr	r2, [r0, #0]
 800b474:	b1a2      	cbz	r2, 800b4a0 <rcutils_set_default_allocator+0x30>
 800b476:	6841      	ldr	r1, [r0, #4]
 800b478:	b1a1      	cbz	r1, 800b4a4 <rcutils_set_default_allocator+0x34>
 800b47a:	b410      	push	{r4}
 800b47c:	68c4      	ldr	r4, [r0, #12]
 800b47e:	b164      	cbz	r4, 800b49a <rcutils_set_default_allocator+0x2a>
 800b480:	6880      	ldr	r0, [r0, #8]
 800b482:	b138      	cbz	r0, 800b494 <rcutils_set_default_allocator+0x24>
 800b484:	4b08      	ldr	r3, [pc, #32]	@ (800b4a8 <rcutils_set_default_allocator+0x38>)
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	2200      	movs	r2, #0
 800b48a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b48e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b492:	2001      	movs	r0, #1
 800b494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	4620      	mov	r0, r4
 800b49c:	e7fa      	b.n	800b494 <rcutils_set_default_allocator+0x24>
 800b49e:	4770      	bx	lr
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4770      	bx	lr
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	4770      	bx	lr
 800b4a8:	20000158 	.word	0x20000158

0800b4ac <rcutils_get_default_allocator>:
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	4c05      	ldr	r4, [pc, #20]	@ (800b4c4 <rcutils_get_default_allocator+0x18>)
 800b4b0:	4686      	mov	lr, r0
 800b4b2:	4684      	mov	ip, r0
 800b4b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b4b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f8cc 3000 	str.w	r3, [ip]
 800b4c0:	4670      	mov	r0, lr
 800b4c2:	bd10      	pop	{r4, pc}
 800b4c4:	20000158 	.word	0x20000158

0800b4c8 <rcutils_allocator_is_valid>:
 800b4c8:	b158      	cbz	r0, 800b4e2 <rcutils_allocator_is_valid+0x1a>
 800b4ca:	6803      	ldr	r3, [r0, #0]
 800b4cc:	b143      	cbz	r3, 800b4e0 <rcutils_allocator_is_valid+0x18>
 800b4ce:	6843      	ldr	r3, [r0, #4]
 800b4d0:	b133      	cbz	r3, 800b4e0 <rcutils_allocator_is_valid+0x18>
 800b4d2:	68c3      	ldr	r3, [r0, #12]
 800b4d4:	b123      	cbz	r3, 800b4e0 <rcutils_allocator_is_valid+0x18>
 800b4d6:	6880      	ldr	r0, [r0, #8]
 800b4d8:	3800      	subs	r0, #0
 800b4da:	bf18      	it	ne
 800b4dc:	2001      	movne	r0, #1
 800b4de:	4770      	bx	lr
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	4770      	bx	lr

0800b4e4 <rcutils_get_error_string>:
 800b4e4:	4b06      	ldr	r3, [pc, #24]	@ (800b500 <rcutils_get_error_string+0x1c>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	b13b      	cbz	r3, 800b4fa <rcutils_get_error_string+0x16>
 800b4ea:	4b06      	ldr	r3, [pc, #24]	@ (800b504 <rcutils_get_error_string+0x20>)
 800b4ec:	781a      	ldrb	r2, [r3, #0]
 800b4ee:	b90a      	cbnz	r2, 800b4f4 <rcutils_get_error_string+0x10>
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	4b04      	ldr	r3, [pc, #16]	@ (800b508 <rcutils_get_error_string+0x24>)
 800b4f6:	7818      	ldrb	r0, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	4b04      	ldr	r3, [pc, #16]	@ (800b50c <rcutils_get_error_string+0x28>)
 800b4fc:	7818      	ldrb	r0, [r3, #0]
 800b4fe:	4770      	bx	lr
 800b500:	20010aa0 	.word	0x20010aa0
 800b504:	20010ab9 	.word	0x20010ab9
 800b508:	20010ab8 	.word	0x20010ab8
 800b50c:	0801adc4 	.word	0x0801adc4

0800b510 <rcutils_reset_error>:
 800b510:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b530 <rcutils_reset_error+0x20>
 800b514:	4a08      	ldr	r2, [pc, #32]	@ (800b538 <rcutils_reset_error+0x28>)
 800b516:	4809      	ldr	r0, [pc, #36]	@ (800b53c <rcutils_reset_error+0x2c>)
 800b518:	4909      	ldr	r1, [pc, #36]	@ (800b540 <rcutils_reset_error+0x30>)
 800b51a:	2300      	movs	r3, #0
 800b51c:	8013      	strh	r3, [r2, #0]
 800b51e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b522:	4a08      	ldr	r2, [pc, #32]	@ (800b544 <rcutils_reset_error+0x34>)
 800b524:	7003      	strb	r3, [r0, #0]
 800b526:	700b      	strb	r3, [r1, #0]
 800b528:	7013      	strb	r3, [r2, #0]
 800b52a:	4770      	bx	lr
 800b52c:	f3af 8000 	nop.w
	...
 800b538:	20010aa8 	.word	0x20010aa8
 800b53c:	20010ab9 	.word	0x20010ab9
 800b540:	20010ab8 	.word	0x20010ab8
 800b544:	20010aa0 	.word	0x20010aa0

0800b548 <rcutils_system_time_now>:
 800b548:	b308      	cbz	r0, 800b58e <rcutils_system_time_now+0x46>
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	4604      	mov	r4, r0
 800b550:	4669      	mov	r1, sp
 800b552:	2001      	movs	r0, #1
 800b554:	f7f6 fe04 	bl	8002160 <clock_gettime>
 800b558:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b55c:	2d00      	cmp	r5, #0
 800b55e:	db13      	blt.n	800b588 <rcutils_system_time_now+0x40>
 800b560:	9902      	ldr	r1, [sp, #8]
 800b562:	2900      	cmp	r1, #0
 800b564:	db0d      	blt.n	800b582 <rcutils_system_time_now+0x3a>
 800b566:	4e0b      	ldr	r6, [pc, #44]	@ (800b594 <rcutils_system_time_now+0x4c>)
 800b568:	fba3 3206 	umull	r3, r2, r3, r6
 800b56c:	185b      	adds	r3, r3, r1
 800b56e:	fb06 2205 	mla	r2, r6, r5, r2
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b57a:	e9c4 3200 	strd	r3, r2, [r4]
 800b57e:	b004      	add	sp, #16
 800b580:	bd70      	pop	{r4, r5, r6, pc}
 800b582:	ea53 0205 	orrs.w	r2, r3, r5
 800b586:	d1ee      	bne.n	800b566 <rcutils_system_time_now+0x1e>
 800b588:	2002      	movs	r0, #2
 800b58a:	b004      	add	sp, #16
 800b58c:	bd70      	pop	{r4, r5, r6, pc}
 800b58e:	200b      	movs	r0, #11
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	3b9aca00 	.word	0x3b9aca00

0800b598 <rcutils_steady_time_now>:
 800b598:	b308      	cbz	r0, 800b5de <rcutils_steady_time_now+0x46>
 800b59a:	b570      	push	{r4, r5, r6, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4669      	mov	r1, sp
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f7f6 fddc 	bl	8002160 <clock_gettime>
 800b5a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b5ac:	2d00      	cmp	r5, #0
 800b5ae:	db13      	blt.n	800b5d8 <rcutils_steady_time_now+0x40>
 800b5b0:	9902      	ldr	r1, [sp, #8]
 800b5b2:	2900      	cmp	r1, #0
 800b5b4:	db0d      	blt.n	800b5d2 <rcutils_steady_time_now+0x3a>
 800b5b6:	4e0b      	ldr	r6, [pc, #44]	@ (800b5e4 <rcutils_steady_time_now+0x4c>)
 800b5b8:	fba3 3206 	umull	r3, r2, r3, r6
 800b5bc:	185b      	adds	r3, r3, r1
 800b5be:	fb06 2205 	mla	r2, r6, r5, r2
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b5ca:	e9c4 3200 	strd	r3, r2, [r4]
 800b5ce:	b004      	add	sp, #16
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
 800b5d2:	ea53 0205 	orrs.w	r2, r3, r5
 800b5d6:	d1ee      	bne.n	800b5b6 <rcutils_steady_time_now+0x1e>
 800b5d8:	2002      	movs	r0, #2
 800b5da:	b004      	add	sp, #16
 800b5dc:	bd70      	pop	{r4, r5, r6, pc}
 800b5de:	200b      	movs	r0, #11
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	3b9aca00 	.word	0x3b9aca00

0800b5e8 <rmw_get_default_publisher_options>:
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	6002      	str	r2, [r0, #0]
 800b5ec:	7102      	strb	r2, [r0, #4]
 800b5ee:	4770      	bx	lr

0800b5f0 <rmw_uros_set_custom_transport>:
 800b5f0:	b470      	push	{r4, r5, r6}
 800b5f2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b5f6:	b162      	cbz	r2, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5f8:	b15b      	cbz	r3, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5fa:	b155      	cbz	r5, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5fc:	b14e      	cbz	r6, 800b612 <rmw_uros_set_custom_transport+0x22>
 800b5fe:	4c06      	ldr	r4, [pc, #24]	@ (800b618 <rmw_uros_set_custom_transport+0x28>)
 800b600:	7020      	strb	r0, [r4, #0]
 800b602:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b606:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b60a:	6166      	str	r6, [r4, #20]
 800b60c:	2000      	movs	r0, #0
 800b60e:	bc70      	pop	{r4, r5, r6}
 800b610:	4770      	bx	lr
 800b612:	200b      	movs	r0, #11
 800b614:	bc70      	pop	{r4, r5, r6}
 800b616:	4770      	bx	lr
 800b618:	20010abc 	.word	0x20010abc

0800b61c <flush_session>:
 800b61c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b61e:	f004 bc7b 	b.w	800ff18 <uxr_run_session_until_confirm_delivery>
 800b622:	bf00      	nop

0800b624 <rmw_publish>:
 800b624:	2800      	cmp	r0, #0
 800b626:	d053      	beq.n	800b6d0 <rmw_publish+0xac>
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	460d      	mov	r5, r1
 800b62c:	b08e      	sub	sp, #56	@ 0x38
 800b62e:	2900      	cmp	r1, #0
 800b630:	d04b      	beq.n	800b6ca <rmw_publish+0xa6>
 800b632:	4604      	mov	r4, r0
 800b634:	6800      	ldr	r0, [r0, #0]
 800b636:	f000 fced 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d045      	beq.n	800b6ca <rmw_publish+0xa6>
 800b63e:	6866      	ldr	r6, [r4, #4]
 800b640:	2e00      	cmp	r6, #0
 800b642:	d042      	beq.n	800b6ca <rmw_publish+0xa6>
 800b644:	69b4      	ldr	r4, [r6, #24]
 800b646:	4628      	mov	r0, r5
 800b648:	6923      	ldr	r3, [r4, #16]
 800b64a:	4798      	blx	r3
 800b64c:	69f3      	ldr	r3, [r6, #28]
 800b64e:	9005      	str	r0, [sp, #20]
 800b650:	b113      	cbz	r3, 800b658 <rmw_publish+0x34>
 800b652:	a805      	add	r0, sp, #20
 800b654:	4798      	blx	r3
 800b656:	9805      	ldr	r0, [sp, #20]
 800b658:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	9000      	str	r0, [sp, #0]
 800b660:	6972      	ldr	r2, [r6, #20]
 800b662:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b664:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b668:	ab06      	add	r3, sp, #24
 800b66a:	f005 fa41 	bl	8010af0 <uxr_prepare_output_stream>
 800b66e:	b1d8      	cbz	r0, 800b6a8 <rmw_publish+0x84>
 800b670:	68a3      	ldr	r3, [r4, #8]
 800b672:	a906      	add	r1, sp, #24
 800b674:	4628      	mov	r0, r5
 800b676:	4798      	blx	r3
 800b678:	6a33      	ldr	r3, [r6, #32]
 800b67a:	4604      	mov	r4, r0
 800b67c:	b10b      	cbz	r3, 800b682 <rmw_publish+0x5e>
 800b67e:	a806      	add	r0, sp, #24
 800b680:	4798      	blx	r3
 800b682:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b686:	2b01      	cmp	r3, #1
 800b688:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b68c:	d022      	beq.n	800b6d4 <rmw_publish+0xb0>
 800b68e:	6918      	ldr	r0, [r3, #16]
 800b690:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b692:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b696:	f004 fc3f 	bl	800ff18 <uxr_run_session_until_confirm_delivery>
 800b69a:	4020      	ands	r0, r4
 800b69c:	b2c4      	uxtb	r4, r0
 800b69e:	f084 0001 	eor.w	r0, r4, #1
 800b6a2:	b2c0      	uxtb	r0, r0
 800b6a4:	b00e      	add	sp, #56	@ 0x38
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}
 800b6a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b6ac:	6918      	ldr	r0, [r3, #16]
 800b6ae:	9b05      	ldr	r3, [sp, #20]
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e0 <rmw_publish+0xbc>)
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	9602      	str	r6, [sp, #8]
 800b6b8:	6972      	ldr	r2, [r6, #20]
 800b6ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b6bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6c0:	ab06      	add	r3, sp, #24
 800b6c2:	f005 fa45 	bl	8010b50 <uxr_prepare_output_stream_fragmented>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d1d2      	bne.n	800b670 <rmw_publish+0x4c>
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	b00e      	add	sp, #56	@ 0x38
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	4770      	bx	lr
 800b6d4:	6918      	ldr	r0, [r3, #16]
 800b6d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6da:	f004 f85d 	bl	800f798 <uxr_flash_output_streams>
 800b6de:	e7de      	b.n	800b69e <rmw_publish+0x7a>
 800b6e0:	0800b61d 	.word	0x0800b61d

0800b6e4 <rmw_create_publisher>:
 800b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	b087      	sub	sp, #28
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f000 80cc 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b6f0:	460e      	mov	r6, r1
 800b6f2:	2900      	cmp	r1, #0
 800b6f4:	f000 80c8 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	6800      	ldr	r0, [r0, #0]
 800b6fc:	4615      	mov	r5, r2
 800b6fe:	4698      	mov	r8, r3
 800b700:	f000 fc88 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b704:	2800      	cmp	r0, #0
 800b706:	f000 80bf 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b70a:	2d00      	cmp	r5, #0
 800b70c:	f000 80bc 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b710:	782b      	ldrb	r3, [r5, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 80b8 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b718:	f1b8 0f00 	cmp.w	r8, #0
 800b71c:	f000 80b4 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b720:	485c      	ldr	r0, [pc, #368]	@ (800b894 <rmw_create_publisher+0x1b0>)
 800b722:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b726:	f009 fe5f 	bl	80153e8 <get_memory>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f000 80ac 	beq.w	800b888 <rmw_create_publisher+0x1a4>
 800b730:	6884      	ldr	r4, [r0, #8]
 800b732:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b736:	f009 febf 	bl	80154b8 <rmw_get_implementation_identifier>
 800b73a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b73e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b742:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b746:	4628      	mov	r0, r5
 800b748:	f7f4 fd5a 	bl	8000200 <strlen>
 800b74c:	3001      	adds	r0, #1
 800b74e:	283c      	cmp	r0, #60	@ 0x3c
 800b750:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800b754:	f200 8091 	bhi.w	800b87a <rmw_create_publisher+0x196>
 800b758:	4a4f      	ldr	r2, [pc, #316]	@ (800b898 <rmw_create_publisher+0x1b4>)
 800b75a:	462b      	mov	r3, r5
 800b75c:	213c      	movs	r1, #60	@ 0x3c
 800b75e:	4650      	mov	r0, sl
 800b760:	f00d fad0 	bl	8018d04 <sniprintf>
 800b764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b768:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800b76a:	4641      	mov	r1, r8
 800b76c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800b770:	2250      	movs	r2, #80	@ 0x50
 800b772:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b776:	f00d ffa2 	bl	80196be <memcpy>
 800b77a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b77e:	4947      	ldr	r1, [pc, #284]	@ (800b89c <rmw_create_publisher+0x1b8>)
 800b780:	2b02      	cmp	r3, #2
 800b782:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b786:	bf0c      	ite	eq
 800b788:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800b78c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800b790:	67a3      	str	r3, [r4, #120]	@ 0x78
 800b792:	2300      	movs	r3, #0
 800b794:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b798:	4630      	mov	r0, r6
 800b79a:	f000 fc49 	bl	800c030 <get_message_typesupport_handle>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d06b      	beq.n	800b87a <rmw_create_publisher+0x196>
 800b7a2:	6842      	ldr	r2, [r0, #4]
 800b7a4:	61a2      	str	r2, [r4, #24]
 800b7a6:	2a00      	cmp	r2, #0
 800b7a8:	d067      	beq.n	800b87a <rmw_create_publisher+0x196>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4643      	mov	r3, r8
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	f00a f8e8 	bl	8015984 <create_topic>
 800b7b4:	6260      	str	r0, [r4, #36]	@ 0x24
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d063      	beq.n	800b882 <rmw_create_publisher+0x19e>
 800b7ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7c2:	2103      	movs	r1, #3
 800b7c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800b7c8:	1c42      	adds	r2, r0, #1
 800b7ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800b7ce:	f003 fe95 	bl	800f4fc <uxr_object_id>
 800b7d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800b7d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7da:	6120      	str	r0, [r4, #16]
 800b7dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800b7e0:	6910      	ldr	r0, [r2, #16]
 800b7e2:	2506      	movs	r5, #6
 800b7e4:	9500      	str	r5, [sp, #0]
 800b7e6:	6819      	ldr	r1, [r3, #0]
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b7ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b7f2:	f003 fd35 	bl	800f260 <uxr_buffer_create_publisher_bin>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b7fc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b800:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b804:	f000 fb86 	bl	800bf14 <run_xrce_session>
 800b808:	b3b8      	cbz	r0, 800b87a <rmw_create_publisher+0x196>
 800b80a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b80e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b812:	2105      	movs	r1, #5
 800b814:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800b818:	1c42      	adds	r2, r0, #1
 800b81a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800b81e:	f003 fe6d 	bl	800f4fc <uxr_object_id>
 800b822:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b826:	6160      	str	r0, [r4, #20]
 800b828:	691e      	ldr	r6, [r3, #16]
 800b82a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b82e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800b832:	f10d 0a10 	add.w	sl, sp, #16
 800b836:	4641      	mov	r1, r8
 800b838:	4650      	mov	r0, sl
 800b83a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800b83e:	f000 fb85 	bl	800bf4c <convert_qos_profile>
 800b842:	9503      	str	r5, [sp, #12]
 800b844:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b848:	9001      	str	r0, [sp, #4]
 800b84a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b84e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800b858:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b85c:	f8d8 1000 	ldr.w	r1, [r8]
 800b860:	4630      	mov	r0, r6
 800b862:	f003 fd5d 	bl	800f320 <uxr_buffer_create_datawriter_bin>
 800b866:	4602      	mov	r2, r0
 800b868:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b86c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b870:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b874:	f000 fb4e 	bl	800bf14 <run_xrce_session>
 800b878:	b938      	cbnz	r0, 800b88a <rmw_create_publisher+0x1a6>
 800b87a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b87c:	b108      	cbz	r0, 800b882 <rmw_create_publisher+0x19e>
 800b87e:	f000 fa47 	bl	800bd10 <rmw_uxrce_fini_topic_memory>
 800b882:	4638      	mov	r0, r7
 800b884:	f000 f9ec 	bl	800bc60 <rmw_uxrce_fini_publisher_memory>
 800b888:	2700      	movs	r7, #0
 800b88a:	4638      	mov	r0, r7
 800b88c:	b007      	add	sp, #28
 800b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b892:	bf00      	nop
 800b894:	200153b4 	.word	0x200153b4
 800b898:	0801add8 	.word	0x0801add8
 800b89c:	0801ab90 	.word	0x0801ab90

0800b8a0 <rmw_publisher_get_actual_qos>:
 800b8a0:	b150      	cbz	r0, 800b8b8 <rmw_publisher_get_actual_qos+0x18>
 800b8a2:	b508      	push	{r3, lr}
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	b149      	cbz	r1, 800b8bc <rmw_publisher_get_actual_qos+0x1c>
 800b8a8:	6841      	ldr	r1, [r0, #4]
 800b8aa:	2250      	movs	r2, #80	@ 0x50
 800b8ac:	3128      	adds	r1, #40	@ 0x28
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f00d ff05 	bl	80196be <memcpy>
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	bd08      	pop	{r3, pc}
 800b8b8:	200b      	movs	r0, #11
 800b8ba:	4770      	bx	lr
 800b8bc:	200b      	movs	r0, #11
 800b8be:	bd08      	pop	{r3, pc}

0800b8c0 <rmw_destroy_publisher>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	b128      	cbz	r0, 800b8d0 <rmw_destroy_publisher+0x10>
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	6800      	ldr	r0, [r0, #0]
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	f000 fba3 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b8ce:	b910      	cbnz	r0, 800b8d6 <rmw_destroy_publisher+0x16>
 800b8d0:	2401      	movs	r4, #1
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d0f9      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8dc:	2d00      	cmp	r5, #0
 800b8de:	d0f7      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8e0:	6828      	ldr	r0, [r5, #0]
 800b8e2:	f000 fb97 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d0f2      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8ea:	686c      	ldr	r4, [r5, #4]
 800b8ec:	2c00      	cmp	r4, #0
 800b8ee:	d0ef      	beq.n	800b8d0 <rmw_destroy_publisher+0x10>
 800b8f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b8f2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b8f6:	f00a f895 	bl	8015a24 <destroy_topic>
 800b8fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b8fe:	6962      	ldr	r2, [r4, #20]
 800b900:	6918      	ldr	r0, [r3, #16]
 800b902:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b906:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b90a:	6819      	ldr	r1, [r3, #0]
 800b90c:	f003 fbf4 	bl	800f0f8 <uxr_buffer_delete_entity>
 800b910:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b914:	6922      	ldr	r2, [r4, #16]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b91c:	4604      	mov	r4, r0
 800b91e:	6809      	ldr	r1, [r1, #0]
 800b920:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b924:	f003 fbe8 	bl	800f0f8 <uxr_buffer_delete_entity>
 800b928:	693e      	ldr	r6, [r7, #16]
 800b92a:	4622      	mov	r2, r4
 800b92c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b930:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b934:	4604      	mov	r4, r0
 800b936:	4630      	mov	r0, r6
 800b938:	f000 faec 	bl	800bf14 <run_xrce_session>
 800b93c:	693e      	ldr	r6, [r7, #16]
 800b93e:	4622      	mov	r2, r4
 800b940:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b944:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b948:	4604      	mov	r4, r0
 800b94a:	4630      	mov	r0, r6
 800b94c:	f000 fae2 	bl	800bf14 <run_xrce_session>
 800b950:	b12c      	cbz	r4, 800b95e <rmw_destroy_publisher+0x9e>
 800b952:	b120      	cbz	r0, 800b95e <rmw_destroy_publisher+0x9e>
 800b954:	2400      	movs	r4, #0
 800b956:	4628      	mov	r0, r5
 800b958:	f000 f982 	bl	800bc60 <rmw_uxrce_fini_publisher_memory>
 800b95c:	e7b9      	b.n	800b8d2 <rmw_destroy_publisher+0x12>
 800b95e:	2402      	movs	r4, #2
 800b960:	e7f9      	b.n	800b956 <rmw_destroy_publisher+0x96>
 800b962:	bf00      	nop

0800b964 <rmw_uxrce_init_service_memory>:
 800b964:	b1e2      	cbz	r2, 800b9a0 <rmw_uxrce_init_service_memory+0x3c>
 800b966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96a:	7b05      	ldrb	r5, [r0, #12]
 800b96c:	4606      	mov	r6, r0
 800b96e:	b9ad      	cbnz	r5, 800b99c <rmw_uxrce_init_service_memory+0x38>
 800b970:	23c8      	movs	r3, #200	@ 0xc8
 800b972:	e9c0 5500 	strd	r5, r5, [r0]
 800b976:	6083      	str	r3, [r0, #8]
 800b978:	f240 1301 	movw	r3, #257	@ 0x101
 800b97c:	4617      	mov	r7, r2
 800b97e:	8183      	strh	r3, [r0, #12]
 800b980:	460c      	mov	r4, r1
 800b982:	46a8      	mov	r8, r5
 800b984:	4621      	mov	r1, r4
 800b986:	4630      	mov	r0, r6
 800b988:	3501      	adds	r5, #1
 800b98a:	f009 fd3d 	bl	8015408 <put_memory>
 800b98e:	42af      	cmp	r7, r5
 800b990:	60a4      	str	r4, [r4, #8]
 800b992:	f884 800c 	strb.w	r8, [r4, #12]
 800b996:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b99a:	d1f3      	bne.n	800b984 <rmw_uxrce_init_service_memory+0x20>
 800b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop

0800b9a4 <rmw_uxrce_init_client_memory>:
 800b9a4:	b1e2      	cbz	r2, 800b9e0 <rmw_uxrce_init_client_memory+0x3c>
 800b9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9aa:	7b05      	ldrb	r5, [r0, #12]
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	b9ad      	cbnz	r5, 800b9dc <rmw_uxrce_init_client_memory+0x38>
 800b9b0:	23c8      	movs	r3, #200	@ 0xc8
 800b9b2:	e9c0 5500 	strd	r5, r5, [r0]
 800b9b6:	6083      	str	r3, [r0, #8]
 800b9b8:	f240 1301 	movw	r3, #257	@ 0x101
 800b9bc:	4617      	mov	r7, r2
 800b9be:	8183      	strh	r3, [r0, #12]
 800b9c0:	460c      	mov	r4, r1
 800b9c2:	46a8      	mov	r8, r5
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	f009 fd1d 	bl	8015408 <put_memory>
 800b9ce:	42af      	cmp	r7, r5
 800b9d0:	60a4      	str	r4, [r4, #8]
 800b9d2:	f884 800c 	strb.w	r8, [r4, #12]
 800b9d6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b9da:	d1f3      	bne.n	800b9c4 <rmw_uxrce_init_client_memory+0x20>
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop

0800b9e4 <rmw_uxrce_init_publisher_memory>:
 800b9e4:	b1e2      	cbz	r2, 800ba20 <rmw_uxrce_init_publisher_memory+0x3c>
 800b9e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ea:	7b05      	ldrb	r5, [r0, #12]
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	b9ad      	cbnz	r5, 800ba1c <rmw_uxrce_init_publisher_memory+0x38>
 800b9f0:	23d8      	movs	r3, #216	@ 0xd8
 800b9f2:	e9c0 5500 	strd	r5, r5, [r0]
 800b9f6:	6083      	str	r3, [r0, #8]
 800b9f8:	f240 1301 	movw	r3, #257	@ 0x101
 800b9fc:	4617      	mov	r7, r2
 800b9fe:	8183      	strh	r3, [r0, #12]
 800ba00:	460c      	mov	r4, r1
 800ba02:	46a8      	mov	r8, r5
 800ba04:	4621      	mov	r1, r4
 800ba06:	4630      	mov	r0, r6
 800ba08:	3501      	adds	r5, #1
 800ba0a:	f009 fcfd 	bl	8015408 <put_memory>
 800ba0e:	42af      	cmp	r7, r5
 800ba10:	60a4      	str	r4, [r4, #8]
 800ba12:	f884 800c 	strb.w	r8, [r4, #12]
 800ba16:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ba1a:	d1f3      	bne.n	800ba04 <rmw_uxrce_init_publisher_memory+0x20>
 800ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop

0800ba24 <rmw_uxrce_init_subscription_memory>:
 800ba24:	b1e2      	cbz	r2, 800ba60 <rmw_uxrce_init_subscription_memory+0x3c>
 800ba26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2a:	7b05      	ldrb	r5, [r0, #12]
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	b9ad      	cbnz	r5, 800ba5c <rmw_uxrce_init_subscription_memory+0x38>
 800ba30:	23d8      	movs	r3, #216	@ 0xd8
 800ba32:	e9c0 5500 	strd	r5, r5, [r0]
 800ba36:	6083      	str	r3, [r0, #8]
 800ba38:	f240 1301 	movw	r3, #257	@ 0x101
 800ba3c:	4617      	mov	r7, r2
 800ba3e:	8183      	strh	r3, [r0, #12]
 800ba40:	460c      	mov	r4, r1
 800ba42:	46a8      	mov	r8, r5
 800ba44:	4621      	mov	r1, r4
 800ba46:	4630      	mov	r0, r6
 800ba48:	3501      	adds	r5, #1
 800ba4a:	f009 fcdd 	bl	8015408 <put_memory>
 800ba4e:	42af      	cmp	r7, r5
 800ba50:	60a4      	str	r4, [r4, #8]
 800ba52:	f884 800c 	strb.w	r8, [r4, #12]
 800ba56:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ba5a:	d1f3      	bne.n	800ba44 <rmw_uxrce_init_subscription_memory+0x20>
 800ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <rmw_uxrce_init_node_memory>:
 800ba64:	b1e2      	cbz	r2, 800baa0 <rmw_uxrce_init_node_memory+0x3c>
 800ba66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	7b05      	ldrb	r5, [r0, #12]
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	b9ad      	cbnz	r5, 800ba9c <rmw_uxrce_init_node_memory+0x38>
 800ba70:	23a4      	movs	r3, #164	@ 0xa4
 800ba72:	e9c0 5500 	strd	r5, r5, [r0]
 800ba76:	6083      	str	r3, [r0, #8]
 800ba78:	f240 1301 	movw	r3, #257	@ 0x101
 800ba7c:	4617      	mov	r7, r2
 800ba7e:	8183      	strh	r3, [r0, #12]
 800ba80:	460c      	mov	r4, r1
 800ba82:	46a8      	mov	r8, r5
 800ba84:	4621      	mov	r1, r4
 800ba86:	4630      	mov	r0, r6
 800ba88:	3501      	adds	r5, #1
 800ba8a:	f009 fcbd 	bl	8015408 <put_memory>
 800ba8e:	42af      	cmp	r7, r5
 800ba90:	60a4      	str	r4, [r4, #8]
 800ba92:	f884 800c 	strb.w	r8, [r4, #12]
 800ba96:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ba9a:	d1f3      	bne.n	800ba84 <rmw_uxrce_init_node_memory+0x20>
 800ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop

0800baa4 <rmw_uxrce_init_session_memory>:
 800baa4:	b1ea      	cbz	r2, 800bae2 <rmw_uxrce_init_session_memory+0x3e>
 800baa6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baaa:	7b05      	ldrb	r5, [r0, #12]
 800baac:	4606      	mov	r6, r0
 800baae:	b9b5      	cbnz	r5, 800bade <rmw_uxrce_init_session_memory+0x3a>
 800bab0:	e9c0 5500 	strd	r5, r5, [r0]
 800bab4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800bab8:	f240 1301 	movw	r3, #257	@ 0x101
 800babc:	4617      	mov	r7, r2
 800babe:	f8c0 8008 	str.w	r8, [r0, #8]
 800bac2:	460c      	mov	r4, r1
 800bac4:	8183      	strh	r3, [r0, #12]
 800bac6:	46a9      	mov	r9, r5
 800bac8:	4621      	mov	r1, r4
 800baca:	4630      	mov	r0, r6
 800bacc:	3501      	adds	r5, #1
 800bace:	f009 fc9b 	bl	8015408 <put_memory>
 800bad2:	42af      	cmp	r7, r5
 800bad4:	60a4      	str	r4, [r4, #8]
 800bad6:	f884 900c 	strb.w	r9, [r4, #12]
 800bada:	4444      	add	r4, r8
 800badc:	d1f4      	bne.n	800bac8 <rmw_uxrce_init_session_memory+0x24>
 800bade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae2:	4770      	bx	lr

0800bae4 <rmw_uxrce_init_topic_memory>:
 800bae4:	b1e2      	cbz	r2, 800bb20 <rmw_uxrce_init_topic_memory+0x3c>
 800bae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baea:	7b05      	ldrb	r5, [r0, #12]
 800baec:	4606      	mov	r6, r0
 800baee:	b9ad      	cbnz	r5, 800bb1c <rmw_uxrce_init_topic_memory+0x38>
 800baf0:	231c      	movs	r3, #28
 800baf2:	e9c0 5500 	strd	r5, r5, [r0]
 800baf6:	6083      	str	r3, [r0, #8]
 800baf8:	f240 1301 	movw	r3, #257	@ 0x101
 800bafc:	4617      	mov	r7, r2
 800bafe:	8183      	strh	r3, [r0, #12]
 800bb00:	460c      	mov	r4, r1
 800bb02:	46a8      	mov	r8, r5
 800bb04:	4621      	mov	r1, r4
 800bb06:	4630      	mov	r0, r6
 800bb08:	3501      	adds	r5, #1
 800bb0a:	f009 fc7d 	bl	8015408 <put_memory>
 800bb0e:	42af      	cmp	r7, r5
 800bb10:	60a4      	str	r4, [r4, #8]
 800bb12:	f884 800c 	strb.w	r8, [r4, #12]
 800bb16:	f104 041c 	add.w	r4, r4, #28
 800bb1a:	d1f3      	bne.n	800bb04 <rmw_uxrce_init_topic_memory+0x20>
 800bb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop

0800bb24 <rmw_uxrce_init_static_input_buffer_memory>:
 800bb24:	b1ea      	cbz	r2, 800bb62 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb2a:	7b05      	ldrb	r5, [r0, #12]
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	b9b5      	cbnz	r5, 800bb5e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800bb30:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800bb34:	e9c0 5500 	strd	r5, r5, [r0]
 800bb38:	6083      	str	r3, [r0, #8]
 800bb3a:	f240 1301 	movw	r3, #257	@ 0x101
 800bb3e:	4617      	mov	r7, r2
 800bb40:	8183      	strh	r3, [r0, #12]
 800bb42:	460c      	mov	r4, r1
 800bb44:	46a8      	mov	r8, r5
 800bb46:	4621      	mov	r1, r4
 800bb48:	4630      	mov	r0, r6
 800bb4a:	3501      	adds	r5, #1
 800bb4c:	f009 fc5c 	bl	8015408 <put_memory>
 800bb50:	42af      	cmp	r7, r5
 800bb52:	60a4      	str	r4, [r4, #8]
 800bb54:	f884 800c 	strb.w	r8, [r4, #12]
 800bb58:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800bb5c:	d1f3      	bne.n	800bb46 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800bb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb62:	4770      	bx	lr

0800bb64 <rmw_uxrce_init_init_options_impl_memory>:
 800bb64:	b1e2      	cbz	r2, 800bba0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6a:	7b05      	ldrb	r5, [r0, #12]
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	b9ad      	cbnz	r5, 800bb9c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bb70:	232c      	movs	r3, #44	@ 0x2c
 800bb72:	e9c0 5500 	strd	r5, r5, [r0]
 800bb76:	6083      	str	r3, [r0, #8]
 800bb78:	f240 1301 	movw	r3, #257	@ 0x101
 800bb7c:	4617      	mov	r7, r2
 800bb7e:	8183      	strh	r3, [r0, #12]
 800bb80:	460c      	mov	r4, r1
 800bb82:	46a8      	mov	r8, r5
 800bb84:	4621      	mov	r1, r4
 800bb86:	4630      	mov	r0, r6
 800bb88:	3501      	adds	r5, #1
 800bb8a:	f009 fc3d 	bl	8015408 <put_memory>
 800bb8e:	42af      	cmp	r7, r5
 800bb90:	60a4      	str	r4, [r4, #8]
 800bb92:	f884 800c 	strb.w	r8, [r4, #12]
 800bb96:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800bb9a:	d1f3      	bne.n	800bb84 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop

0800bba4 <rmw_uxrce_init_wait_set_memory>:
 800bba4:	b1e2      	cbz	r2, 800bbe0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800bba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	7b05      	ldrb	r5, [r0, #12]
 800bbac:	4606      	mov	r6, r0
 800bbae:	b9ad      	cbnz	r5, 800bbdc <rmw_uxrce_init_wait_set_memory+0x38>
 800bbb0:	231c      	movs	r3, #28
 800bbb2:	e9c0 5500 	strd	r5, r5, [r0]
 800bbb6:	6083      	str	r3, [r0, #8]
 800bbb8:	f240 1301 	movw	r3, #257	@ 0x101
 800bbbc:	4617      	mov	r7, r2
 800bbbe:	8183      	strh	r3, [r0, #12]
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	46a8      	mov	r8, r5
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	3501      	adds	r5, #1
 800bbca:	f009 fc1d 	bl	8015408 <put_memory>
 800bbce:	42af      	cmp	r7, r5
 800bbd0:	60a4      	str	r4, [r4, #8]
 800bbd2:	f884 800c 	strb.w	r8, [r4, #12]
 800bbd6:	f104 041c 	add.w	r4, r4, #28
 800bbda:	d1f3      	bne.n	800bbc4 <rmw_uxrce_init_wait_set_memory+0x20>
 800bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop

0800bbe4 <rmw_uxrce_init_guard_condition_memory>:
 800bbe4:	b1e2      	cbz	r2, 800bc20 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800bbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbea:	7b05      	ldrb	r5, [r0, #12]
 800bbec:	4606      	mov	r6, r0
 800bbee:	b9ad      	cbnz	r5, 800bc1c <rmw_uxrce_init_guard_condition_memory+0x38>
 800bbf0:	2320      	movs	r3, #32
 800bbf2:	e9c0 5500 	strd	r5, r5, [r0]
 800bbf6:	6083      	str	r3, [r0, #8]
 800bbf8:	f240 1301 	movw	r3, #257	@ 0x101
 800bbfc:	4617      	mov	r7, r2
 800bbfe:	8183      	strh	r3, [r0, #12]
 800bc00:	460c      	mov	r4, r1
 800bc02:	46a8      	mov	r8, r5
 800bc04:	4621      	mov	r1, r4
 800bc06:	4630      	mov	r0, r6
 800bc08:	3501      	adds	r5, #1
 800bc0a:	f009 fbfd 	bl	8015408 <put_memory>
 800bc0e:	42af      	cmp	r7, r5
 800bc10:	60a4      	str	r4, [r4, #8]
 800bc12:	f884 800c 	strb.w	r8, [r4, #12]
 800bc16:	f104 0420 	add.w	r4, r4, #32
 800bc1a:	d1f3      	bne.n	800bc04 <rmw_uxrce_init_guard_condition_memory+0x20>
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop

0800bc24 <rmw_uxrce_fini_session_memory>:
 800bc24:	4601      	mov	r1, r0
 800bc26:	4801      	ldr	r0, [pc, #4]	@ (800bc2c <rmw_uxrce_fini_session_memory+0x8>)
 800bc28:	f009 bbee 	b.w	8015408 <put_memory>
 800bc2c:	200153d4 	.word	0x200153d4

0800bc30 <rmw_uxrce_fini_node_memory>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4604      	mov	r4, r0
 800bc34:	6800      	ldr	r0, [r0, #0]
 800bc36:	b128      	cbz	r0, 800bc44 <rmw_uxrce_fini_node_memory+0x14>
 800bc38:	4b07      	ldr	r3, [pc, #28]	@ (800bc58 <rmw_uxrce_fini_node_memory+0x28>)
 800bc3a:	6819      	ldr	r1, [r3, #0]
 800bc3c:	f7f4 fae8 	bl	8000210 <strcmp>
 800bc40:	b940      	cbnz	r0, 800bc54 <rmw_uxrce_fini_node_memory+0x24>
 800bc42:	6020      	str	r0, [r4, #0]
 800bc44:	6861      	ldr	r1, [r4, #4]
 800bc46:	b129      	cbz	r1, 800bc54 <rmw_uxrce_fini_node_memory+0x24>
 800bc48:	2500      	movs	r5, #0
 800bc4a:	4804      	ldr	r0, [pc, #16]	@ (800bc5c <rmw_uxrce_fini_node_memory+0x2c>)
 800bc4c:	610d      	str	r5, [r1, #16]
 800bc4e:	f009 fbdb 	bl	8015408 <put_memory>
 800bc52:	6065      	str	r5, [r4, #4]
 800bc54:	bd38      	pop	{r3, r4, r5, pc}
 800bc56:	bf00      	nop
 800bc58:	0801b7bc 	.word	0x0801b7bc
 800bc5c:	200153a4 	.word	0x200153a4

0800bc60 <rmw_uxrce_fini_publisher_memory>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	6800      	ldr	r0, [r0, #0]
 800bc66:	b128      	cbz	r0, 800bc74 <rmw_uxrce_fini_publisher_memory+0x14>
 800bc68:	4b06      	ldr	r3, [pc, #24]	@ (800bc84 <rmw_uxrce_fini_publisher_memory+0x24>)
 800bc6a:	6819      	ldr	r1, [r3, #0]
 800bc6c:	f7f4 fad0 	bl	8000210 <strcmp>
 800bc70:	b938      	cbnz	r0, 800bc82 <rmw_uxrce_fini_publisher_memory+0x22>
 800bc72:	6020      	str	r0, [r4, #0]
 800bc74:	6861      	ldr	r1, [r4, #4]
 800bc76:	b121      	cbz	r1, 800bc82 <rmw_uxrce_fini_publisher_memory+0x22>
 800bc78:	4803      	ldr	r0, [pc, #12]	@ (800bc88 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bc7a:	f009 fbc5 	bl	8015408 <put_memory>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	bd10      	pop	{r4, pc}
 800bc84:	0801b7bc 	.word	0x0801b7bc
 800bc88:	200153b4 	.word	0x200153b4

0800bc8c <rmw_uxrce_fini_subscription_memory>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	4604      	mov	r4, r0
 800bc90:	6800      	ldr	r0, [r0, #0]
 800bc92:	b128      	cbz	r0, 800bca0 <rmw_uxrce_fini_subscription_memory+0x14>
 800bc94:	4b06      	ldr	r3, [pc, #24]	@ (800bcb0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800bc96:	6819      	ldr	r1, [r3, #0]
 800bc98:	f7f4 faba 	bl	8000210 <strcmp>
 800bc9c:	b938      	cbnz	r0, 800bcae <rmw_uxrce_fini_subscription_memory+0x22>
 800bc9e:	6020      	str	r0, [r4, #0]
 800bca0:	6861      	ldr	r1, [r4, #4]
 800bca2:	b121      	cbz	r1, 800bcae <rmw_uxrce_fini_subscription_memory+0x22>
 800bca4:	4803      	ldr	r0, [pc, #12]	@ (800bcb4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800bca6:	f009 fbaf 	bl	8015408 <put_memory>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6063      	str	r3, [r4, #4]
 800bcae:	bd10      	pop	{r4, pc}
 800bcb0:	0801b7bc 	.word	0x0801b7bc
 800bcb4:	200153f4 	.word	0x200153f4

0800bcb8 <rmw_uxrce_fini_service_memory>:
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	4604      	mov	r4, r0
 800bcbc:	6800      	ldr	r0, [r0, #0]
 800bcbe:	b128      	cbz	r0, 800bccc <rmw_uxrce_fini_service_memory+0x14>
 800bcc0:	4b06      	ldr	r3, [pc, #24]	@ (800bcdc <rmw_uxrce_fini_service_memory+0x24>)
 800bcc2:	6819      	ldr	r1, [r3, #0]
 800bcc4:	f7f4 faa4 	bl	8000210 <strcmp>
 800bcc8:	b938      	cbnz	r0, 800bcda <rmw_uxrce_fini_service_memory+0x22>
 800bcca:	6020      	str	r0, [r4, #0]
 800bccc:	6861      	ldr	r1, [r4, #4]
 800bcce:	b121      	cbz	r1, 800bcda <rmw_uxrce_fini_service_memory+0x22>
 800bcd0:	4803      	ldr	r0, [pc, #12]	@ (800bce0 <rmw_uxrce_fini_service_memory+0x28>)
 800bcd2:	f009 fb99 	bl	8015408 <put_memory>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	6063      	str	r3, [r4, #4]
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	0801b7bc 	.word	0x0801b7bc
 800bce0:	200153c4 	.word	0x200153c4

0800bce4 <rmw_uxrce_fini_client_memory>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	4604      	mov	r4, r0
 800bce8:	6800      	ldr	r0, [r0, #0]
 800bcea:	b128      	cbz	r0, 800bcf8 <rmw_uxrce_fini_client_memory+0x14>
 800bcec:	4b06      	ldr	r3, [pc, #24]	@ (800bd08 <rmw_uxrce_fini_client_memory+0x24>)
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	f7f4 fa8e 	bl	8000210 <strcmp>
 800bcf4:	b938      	cbnz	r0, 800bd06 <rmw_uxrce_fini_client_memory+0x22>
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	6861      	ldr	r1, [r4, #4]
 800bcfa:	b121      	cbz	r1, 800bd06 <rmw_uxrce_fini_client_memory+0x22>
 800bcfc:	4803      	ldr	r0, [pc, #12]	@ (800bd0c <rmw_uxrce_fini_client_memory+0x28>)
 800bcfe:	f009 fb83 	bl	8015408 <put_memory>
 800bd02:	2300      	movs	r3, #0
 800bd04:	6063      	str	r3, [r4, #4]
 800bd06:	bd10      	pop	{r4, pc}
 800bd08:	0801b7bc 	.word	0x0801b7bc
 800bd0c:	20010ad8 	.word	0x20010ad8

0800bd10 <rmw_uxrce_fini_topic_memory>:
 800bd10:	b510      	push	{r4, lr}
 800bd12:	4604      	mov	r4, r0
 800bd14:	4621      	mov	r1, r4
 800bd16:	4803      	ldr	r0, [pc, #12]	@ (800bd24 <rmw_uxrce_fini_topic_memory+0x14>)
 800bd18:	f009 fb76 	bl	8015408 <put_memory>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	61a3      	str	r3, [r4, #24]
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	bf00      	nop
 800bd24:	20015404 	.word	0x20015404

0800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bd28:	b082      	sub	sp, #8
 800bd2a:	b530      	push	{r4, r5, lr}
 800bd2c:	4925      	ldr	r1, [pc, #148]	@ (800bdc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bd2e:	680d      	ldr	r5, [r1, #0]
 800bd30:	ac03      	add	r4, sp, #12
 800bd32:	e884 000c 	stmia.w	r4, {r2, r3}
 800bd36:	461c      	mov	r4, r3
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	d041      	beq.n	800bdc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	2100      	movs	r1, #0
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800bd48:	4290      	cmp	r0, r2
 800bd4a:	bf08      	it	eq
 800bd4c:	3101      	addeq	r1, #1
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1f6      	bne.n	800bd40 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800bd52:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	d029      	beq.n	800bdae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bd5a:	d907      	bls.n	800bd6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d005      	beq.n	800bd6c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bd60:	2100      	movs	r1, #0
 800bd62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd66:	4608      	mov	r0, r1
 800bd68:	b002      	add	sp, #8
 800bd6a:	4770      	bx	lr
 800bd6c:	b314      	cbz	r4, 800bdb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bd6e:	428c      	cmp	r4, r1
 800bd70:	d820      	bhi.n	800bdb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bd72:	2d00      	cmp	r5, #0
 800bd74:	d0f4      	beq.n	800bd60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bd76:	2100      	movs	r1, #0
 800bd78:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800bd7c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800bd80:	e002      	b.n	800bd88 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bd82:	686d      	ldr	r5, [r5, #4]
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	d0ec      	beq.n	800bd62 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bd88:	68ab      	ldr	r3, [r5, #8]
 800bd8a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800bd8e:	4290      	cmp	r0, r2
 800bd90:	d1f7      	bne.n	800bd82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bd92:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bd96:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800bd9a:	4562      	cmp	r2, ip
 800bd9c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bda0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bda4:	daed      	bge.n	800bd82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bda6:	4694      	mov	ip, r2
 800bda8:	461c      	mov	r4, r3
 800bdaa:	4629      	mov	r1, r5
 800bdac:	e7e9      	b.n	800bd82 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bdae:	b10c      	cbz	r4, 800bdb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bdb0:	428c      	cmp	r4, r1
 800bdb2:	d9d5      	bls.n	800bd60 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bdb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdb8:	4802      	ldr	r0, [pc, #8]	@ (800bdc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bdba:	b002      	add	sp, #8
 800bdbc:	f009 bb14 	b.w	80153e8 <get_memory>
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	e7c6      	b.n	800bd52 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800bdc4:	200153e4 	.word	0x200153e4

0800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800bdc8:	4b11      	ldr	r3, [pc, #68]	@ (800be10 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	b530      	push	{r4, r5, lr}
 800bdce:	b1e3      	cbz	r3, 800be0a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800bdd0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800bdd4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800bdd8:	2400      	movs	r4, #0
 800bdda:	e001      	b.n	800bde0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	b193      	cbz	r3, 800be06 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800bde0:	689a      	ldr	r2, [r3, #8]
 800bde2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800bde6:	4288      	cmp	r0, r1
 800bde8:	d1f8      	bne.n	800bddc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bdea:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800bdee:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800bdf2:	4571      	cmp	r1, lr
 800bdf4:	eb72 050c 	sbcs.w	r5, r2, ip
 800bdf8:	daf0      	bge.n	800bddc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bdfa:	461c      	mov	r4, r3
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	468e      	mov	lr, r1
 800be00:	4694      	mov	ip, r2
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1ec      	bne.n	800bde0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800be06:	4620      	mov	r0, r4
 800be08:	bd30      	pop	{r4, r5, pc}
 800be0a:	461c      	mov	r4, r3
 800be0c:	4620      	mov	r0, r4
 800be0e:	bd30      	pop	{r4, r5, pc}
 800be10:	200153e4 	.word	0x200153e4
 800be14:	00000000 	.word	0x00000000

0800be18 <rmw_uxrce_clean_expired_static_input_buffer>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4b3c      	ldr	r3, [pc, #240]	@ (800bf10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800be1e:	ed2d 8b06 	vpush	{d8-d10}
 800be22:	681f      	ldr	r7, [r3, #0]
 800be24:	b08d      	sub	sp, #52	@ 0x34
 800be26:	f00a fc1d 	bl	8016664 <rmw_uros_epoch_nanos>
 800be2a:	2f00      	cmp	r7, #0
 800be2c:	d05d      	beq.n	800beea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800be2e:	46b8      	mov	r8, r7
 800be30:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800bef8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800be34:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800be38:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800bf00 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800be42:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800bf08 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800be46:	4681      	mov	r9, r0
 800be48:	468a      	mov	sl, r1
 800be4a:	ac04      	add	r4, sp, #16
 800be4c:	d03f      	beq.n	800bece <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800be4e:	2b05      	cmp	r3, #5
 800be50:	d044      	beq.n	800bedc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800be52:	2b03      	cmp	r3, #3
 800be54:	d03b      	beq.n	800bece <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800be56:	ed8d 8b04 	vstr	d8, [sp, #16]
 800be5a:	ed8d ab06 	vstr	d10, [sp, #24]
 800be5e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800be62:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800be66:	ab08      	add	r3, sp, #32
 800be68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800be6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800be6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800be72:	f009 f8ed 	bl	8015050 <rmw_time_equal>
 800be76:	b118      	cbz	r0, 800be80 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800be78:	ed8d 9b04 	vstr	d9, [sp, #16]
 800be7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800be80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800be84:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800be88:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800be8c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800be90:	f009 f932 	bl	80150f8 <rmw_time_total_nsec>
 800be94:	1830      	adds	r0, r6, r0
 800be96:	eb47 0101 	adc.w	r1, r7, r1
 800be9a:	4548      	cmp	r0, r9
 800be9c:	eb71 030a 	sbcs.w	r3, r1, sl
 800bea0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800bea4:	db05      	blt.n	800beb2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800bea6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800beaa:	4591      	cmp	r9, r2
 800beac:	eb7a 0303 	sbcs.w	r3, sl, r3
 800beb0:	da03      	bge.n	800beba <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800beb2:	4817      	ldr	r0, [pc, #92]	@ (800bf10 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800beb4:	4641      	mov	r1, r8
 800beb6:	f009 faa7 	bl	8015408 <put_memory>
 800beba:	f1bb 0f00 	cmp.w	fp, #0
 800bebe:	d014      	beq.n	800beea <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bec0:	46d8      	mov	r8, fp
 800bec2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bec6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800beca:	2b04      	cmp	r3, #4
 800becc:	d1bf      	bne.n	800be4e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800bece:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bed2:	3340      	adds	r3, #64	@ 0x40
 800bed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800beda:	e7c0      	b.n	800be5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800bedc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800bee0:	3348      	adds	r3, #72	@ 0x48
 800bee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bee8:	e7b9      	b.n	800be5e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800beea:	b00d      	add	sp, #52	@ 0x34
 800beec:	ecbd 8b06 	vpop	{d8-d10}
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	f3af 8000 	nop.w
	...
 800bf00:	00000001 	.word	0x00000001
 800bf04:	00000000 	.word	0x00000000
 800bf08:	0000001e 	.word	0x0000001e
 800bf0c:	00000000 	.word	0x00000000
 800bf10:	200153e4 	.word	0x200153e4

0800bf14 <run_xrce_session>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	788c      	ldrb	r4, [r1, #2]
 800bf18:	b086      	sub	sp, #24
 800bf1a:	2c01      	cmp	r4, #1
 800bf1c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bf20:	d00c      	beq.n	800bf3c <run_xrce_session+0x28>
 800bf22:	4619      	mov	r1, r3
 800bf24:	2301      	movs	r3, #1
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	f10d 020e 	add.w	r2, sp, #14
 800bf2c:	f10d 0317 	add.w	r3, sp, #23
 800bf30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf34:	f004 f816 	bl	800ff64 <uxr_run_session_until_all_status>
 800bf38:	b006      	add	sp, #24
 800bf3a:	bd10      	pop	{r4, pc}
 800bf3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf40:	f003 fc2a 	bl	800f798 <uxr_flash_output_streams>
 800bf44:	4620      	mov	r0, r4
 800bf46:	b006      	add	sp, #24
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	bf00      	nop

0800bf4c <convert_qos_profile>:
 800bf4c:	7a4a      	ldrb	r2, [r1, #9]
 800bf4e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bf52:	2a02      	cmp	r2, #2
 800bf54:	bf18      	it	ne
 800bf56:	2200      	movne	r2, #0
 800bf58:	7002      	strb	r2, [r0, #0]
 800bf5a:	780a      	ldrb	r2, [r1, #0]
 800bf5c:	8889      	ldrh	r1, [r1, #4]
 800bf5e:	8081      	strh	r1, [r0, #4]
 800bf60:	f1ac 0c02 	sub.w	ip, ip, #2
 800bf64:	f1a2 0202 	sub.w	r2, r2, #2
 800bf68:	fabc fc8c 	clz	ip, ip
 800bf6c:	fab2 f282 	clz	r2, r2
 800bf70:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bf74:	0952      	lsrs	r2, r2, #5
 800bf76:	f880 c001 	strb.w	ip, [r0, #1]
 800bf7a:	7082      	strb	r2, [r0, #2]
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop

0800bf80 <generate_type_name>:
 800bf80:	b530      	push	{r4, r5, lr}
 800bf82:	2300      	movs	r3, #0
 800bf84:	700b      	strb	r3, [r1, #0]
 800bf86:	6803      	ldr	r3, [r0, #0]
 800bf88:	b087      	sub	sp, #28
 800bf8a:	4614      	mov	r4, r2
 800bf8c:	b1d3      	cbz	r3, 800bfc4 <generate_type_name+0x44>
 800bf8e:	4a0f      	ldr	r2, [pc, #60]	@ (800bfcc <generate_type_name+0x4c>)
 800bf90:	4615      	mov	r5, r2
 800bf92:	9203      	str	r2, [sp, #12]
 800bf94:	9500      	str	r5, [sp, #0]
 800bf96:	6842      	ldr	r2, [r0, #4]
 800bf98:	480d      	ldr	r0, [pc, #52]	@ (800bfd0 <generate_type_name+0x50>)
 800bf9a:	9001      	str	r0, [sp, #4]
 800bf9c:	4608      	mov	r0, r1
 800bf9e:	490d      	ldr	r1, [pc, #52]	@ (800bfd4 <generate_type_name+0x54>)
 800bfa0:	9204      	str	r2, [sp, #16]
 800bfa2:	9105      	str	r1, [sp, #20]
 800bfa4:	9102      	str	r1, [sp, #8]
 800bfa6:	4a0c      	ldr	r2, [pc, #48]	@ (800bfd8 <generate_type_name+0x58>)
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	f00c feab 	bl	8018d04 <sniprintf>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	db05      	blt.n	800bfbe <generate_type_name+0x3e>
 800bfb2:	4284      	cmp	r4, r0
 800bfb4:	bfd4      	ite	le
 800bfb6:	2000      	movle	r0, #0
 800bfb8:	2001      	movgt	r0, #1
 800bfba:	b007      	add	sp, #28
 800bfbc:	bd30      	pop	{r4, r5, pc}
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	b007      	add	sp, #28
 800bfc2:	bd30      	pop	{r4, r5, pc}
 800bfc4:	4b05      	ldr	r3, [pc, #20]	@ (800bfdc <generate_type_name+0x5c>)
 800bfc6:	4a01      	ldr	r2, [pc, #4]	@ (800bfcc <generate_type_name+0x4c>)
 800bfc8:	461d      	mov	r5, r3
 800bfca:	e7e2      	b.n	800bf92 <generate_type_name+0x12>
 800bfcc:	0801adc8 	.word	0x0801adc8
 800bfd0:	0801ade0 	.word	0x0801ade0
 800bfd4:	0801addc 	.word	0x0801addc
 800bfd8:	0801adcc 	.word	0x0801adcc
 800bfdc:	0801ba48 	.word	0x0801ba48

0800bfe0 <generate_topic_name>:
 800bfe0:	b510      	push	{r4, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	4614      	mov	r4, r2
 800bfe6:	9000      	str	r0, [sp, #0]
 800bfe8:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <generate_topic_name+0x2c>)
 800bfea:	4a09      	ldr	r2, [pc, #36]	@ (800c010 <generate_topic_name+0x30>)
 800bfec:	4608      	mov	r0, r1
 800bfee:	4621      	mov	r1, r4
 800bff0:	f00c fe88 	bl	8018d04 <sniprintf>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	db05      	blt.n	800c004 <generate_topic_name+0x24>
 800bff8:	4284      	cmp	r4, r0
 800bffa:	bfd4      	ite	le
 800bffc:	2000      	movle	r0, #0
 800bffe:	2001      	movgt	r0, #1
 800c000:	b002      	add	sp, #8
 800c002:	bd10      	pop	{r4, pc}
 800c004:	2000      	movs	r0, #0
 800c006:	b002      	add	sp, #8
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop
 800c00c:	0801adec 	.word	0x0801adec
 800c010:	0801ade4 	.word	0x0801ade4

0800c014 <is_uxrce_rmw_identifier_valid>:
 800c014:	b510      	push	{r4, lr}
 800c016:	4604      	mov	r4, r0
 800c018:	b140      	cbz	r0, 800c02c <is_uxrce_rmw_identifier_valid+0x18>
 800c01a:	f009 fa4d 	bl	80154b8 <rmw_get_implementation_identifier>
 800c01e:	4601      	mov	r1, r0
 800c020:	4620      	mov	r0, r4
 800c022:	f7f4 f8f5 	bl	8000210 <strcmp>
 800c026:	fab0 f080 	clz	r0, r0
 800c02a:	0940      	lsrs	r0, r0, #5
 800c02c:	bd10      	pop	{r4, pc}
 800c02e:	bf00      	nop

0800c030 <get_message_typesupport_handle>:
 800c030:	6883      	ldr	r3, [r0, #8]
 800c032:	4718      	bx	r3

0800c034 <get_message_typesupport_handle_function>:
 800c034:	b510      	push	{r4, lr}
 800c036:	4604      	mov	r4, r0
 800c038:	6800      	ldr	r0, [r0, #0]
 800c03a:	f7f4 f8e9 	bl	8000210 <strcmp>
 800c03e:	2800      	cmp	r0, #0
 800c040:	bf0c      	ite	eq
 800c042:	4620      	moveq	r0, r4
 800c044:	2000      	movne	r0, #0
 800c046:	bd10      	pop	{r4, pc}

0800c048 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04c:	6805      	ldr	r5, [r0, #0]
 800c04e:	4604      	mov	r4, r0
 800c050:	4628      	mov	r0, r5
 800c052:	460e      	mov	r6, r1
 800c054:	f7f4 f8dc 	bl	8000210 <strcmp>
 800c058:	b1c8      	cbz	r0, 800c08e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c05a:	4b11      	ldr	r3, [pc, #68]	@ (800c0a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	429d      	cmp	r5, r3
 800c060:	d112      	bne.n	800c088 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c062:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c066:	f8d8 4000 	ldr.w	r4, [r8]
 800c06a:	b16c      	cbz	r4, 800c088 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c06c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c070:	2700      	movs	r7, #0
 800c072:	3d04      	subs	r5, #4
 800c074:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c078:	4631      	mov	r1, r6
 800c07a:	f7f4 f8c9 	bl	8000210 <strcmp>
 800c07e:	00bb      	lsls	r3, r7, #2
 800c080:	b140      	cbz	r0, 800c094 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c082:	3701      	adds	r7, #1
 800c084:	42bc      	cmp	r4, r7
 800c086:	d1f5      	bne.n	800c074 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c088:	2000      	movs	r0, #0
 800c08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08e:	4620      	mov	r0, r4
 800c090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c094:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c09c:	58d3      	ldr	r3, [r2, r3]
 800c09e:	4718      	bx	r3
 800c0a0:	2000016c 	.word	0x2000016c

0800c0a4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c0a4:	4b04      	ldr	r3, [pc, #16]	@ (800c0b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	b10a      	cbz	r2, 800c0ae <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800c0aa:	4803      	ldr	r0, [pc, #12]	@ (800c0b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c0ac:	4770      	bx	lr
 800c0ae:	4a03      	ldr	r2, [pc, #12]	@ (800c0bc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800c0b0:	4801      	ldr	r0, [pc, #4]	@ (800c0b8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	4770      	bx	lr
 800c0b8:	2000017c 	.word	0x2000017c
 800c0bc:	2000016c 	.word	0x2000016c

0800c0c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c0c0:	4a02      	ldr	r2, [pc, #8]	@ (800c0cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800c0c2:	4b03      	ldr	r3, [pc, #12]	@ (800c0d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800c0c4:	6812      	ldr	r2, [r2, #0]
 800c0c6:	601a      	str	r2, [r3, #0]
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	2000016c 	.word	0x2000016c
 800c0d0:	2000017c 	.word	0x2000017c

0800c0d4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c0d4:	4b04      	ldr	r3, [pc, #16]	@ (800c0e8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>)
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	b10a      	cbz	r2, 800c0de <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0xa>
 800c0da:	4803      	ldr	r0, [pc, #12]	@ (800c0e8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>)
 800c0dc:	4770      	bx	lr
 800c0de:	4a03      	ldr	r2, [pc, #12]	@ (800c0ec <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x18>)
 800c0e0:	4801      	ldr	r0, [pc, #4]	@ (800c0e8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>)
 800c0e2:	6812      	ldr	r2, [r2, #0]
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	4770      	bx	lr
 800c0e8:	20000190 	.word	0x20000190
 800c0ec:	2000016c 	.word	0x2000016c

0800c0f0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c0f0:	4a02      	ldr	r2, [pc, #8]	@ (800c0fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0xc>)
 800c0f2:	4b03      	ldr	r3, [pc, #12]	@ (800c100 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x10>)
 800c0f4:	6812      	ldr	r2, [r2, #0]
 800c0f6:	601a      	str	r2, [r3, #0]
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	2000016c 	.word	0x2000016c
 800c100:	20000190 	.word	0x20000190

0800c104 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800c104:	2009      	movs	r0, #9
 800c106:	4770      	bx	lr

0800c108 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800c108:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop

0800c110 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800c110:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c118:	e9c2 0100 	strd	r0, r1, [r2]
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop

0800c120 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800c120:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c124:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c128:	e9c1 2300 	strd	r2, r3, [r1]
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop

0800c130 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800c130:	f00a bafe 	b.w	8016730 <sensor_msgs__msg__Imu__init>

0800c134 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800c134:	f00a bb52 	b.w	80167dc <sensor_msgs__msg__Imu__fini>

0800c138 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800c138:	2009      	movs	r0, #9
 800c13a:	4770      	bx	lr

0800c13c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800c13c:	2009      	movs	r0, #9
 800c13e:	4770      	bx	lr

0800c140 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800c140:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop

0800c148 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800c148:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop

0800c150 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800c150:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop

0800c158 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800c158:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop

0800c160 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800c160:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop

0800c168 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800c168:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c170:	e9c2 0100 	strd	r0, r1, [r2]
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop

0800c178 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800c178:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c17c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c180:	e9c1 2300 	strd	r2, r3, [r1]
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop

0800c188 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800c188:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c190:	e9c2 0100 	strd	r0, r1, [r2]
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop

0800c198 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800c198:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c19c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c1a0:	e9c1 2300 	strd	r2, r3, [r1]
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop

0800c1a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c1a8:	b510      	push	{r4, lr}
 800c1aa:	f000 fa41 	bl	800c630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c1ae:	4c0b      	ldr	r4, [pc, #44]	@ (800c1dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800c1b0:	60e0      	str	r0, [r4, #12]
 800c1b2:	f000 fb65 	bl	800c880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c1b6:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c1b8:	f000 fb74 	bl	800c8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c1bc:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800c1c0:	f000 fb70 	bl	800c8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c1c4:	4b06      	ldr	r3, [pc, #24]	@ (800c1e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c1c6:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	b10a      	cbz	r2, 800c1d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800c1ce:	4804      	ldr	r0, [pc, #16]	@ (800c1e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c1d0:	bd10      	pop	{r4, pc}
 800c1d2:	4a04      	ldr	r2, [pc, #16]	@ (800c1e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800c1d4:	4802      	ldr	r0, [pc, #8]	@ (800c1e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800c1d6:	6812      	ldr	r2, [r2, #0]
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	bd10      	pop	{r4, pc}
 800c1dc:	2000019c 	.word	0x2000019c
 800c1e0:	20000340 	.word	0x20000340
 800c1e4:	20000170 	.word	0x20000170

0800c1e8 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__size_function__Joy__axes>:
 800c1e8:	6840      	ldr	r0, [r0, #4]
 800c1ea:	4770      	bx	lr

0800c1ec <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_const_function__Joy__axes>:
 800c1ec:	6800      	ldr	r0, [r0, #0]
 800c1ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c1f2:	4770      	bx	lr

0800c1f4 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__fetch_function__Joy__axes>:
 800c1f4:	6803      	ldr	r3, [r0, #0]
 800c1f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c1fa:	680b      	ldr	r3, [r1, #0]
 800c1fc:	6013      	str	r3, [r2, #0]
 800c1fe:	4770      	bx	lr

0800c200 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__assign_function__Joy__axes>:
 800c200:	6803      	ldr	r3, [r0, #0]
 800c202:	6812      	ldr	r2, [r2, #0]
 800c204:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800c208:	600a      	str	r2, [r1, #0]
 800c20a:	4770      	bx	lr

0800c20c <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__size_function__Joy__buttons>:
 800c20c:	6840      	ldr	r0, [r0, #4]
 800c20e:	4770      	bx	lr

0800c210 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_const_function__Joy__buttons>:
 800c210:	6800      	ldr	r0, [r0, #0]
 800c212:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c216:	4770      	bx	lr

0800c218 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__fetch_function__Joy__buttons>:
 800c218:	6803      	ldr	r3, [r0, #0]
 800c21a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop

0800c224 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__assign_function__Joy__buttons>:
 800c224:	6803      	ldr	r3, [r0, #0]
 800c226:	6812      	ldr	r2, [r2, #0]
 800c228:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop

0800c230 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__Joy_init_function>:
 800c230:	f00a bae8 	b.w	8016804 <sensor_msgs__msg__Joy__init>

0800c234 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__Joy_fini_function>:
 800c234:	f00a bb26 	b.w	8016884 <sensor_msgs__msg__Joy__fini>

0800c238 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__resize_function__Joy__axes>:
 800c238:	b510      	push	{r4, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	4604      	mov	r4, r0
 800c23e:	9101      	str	r1, [sp, #4]
 800c240:	f00a fa36 	bl	80166b0 <rosidl_runtime_c__float__Sequence__fini>
 800c244:	9901      	ldr	r1, [sp, #4]
 800c246:	4620      	mov	r0, r4
 800c248:	b002      	add	sp, #8
 800c24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c24e:	f00a ba17 	b.w	8016680 <rosidl_runtime_c__float__Sequence__init>
 800c252:	bf00      	nop

0800c254 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__resize_function__Joy__buttons>:
 800c254:	b510      	push	{r4, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	4604      	mov	r4, r0
 800c25a:	9101      	str	r1, [sp, #4]
 800c25c:	f00a fa54 	bl	8016708 <rosidl_runtime_c__int32__Sequence__fini>
 800c260:	9901      	ldr	r1, [sp, #4]
 800c262:	4620      	mov	r0, r4
 800c264:	b002      	add	sp, #8
 800c266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c26a:	f00a ba35 	b.w	80166d8 <rosidl_runtime_c__int32__Sequence__init>
 800c26e:	bf00      	nop

0800c270 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_function__Joy__buttons>:
 800c270:	6800      	ldr	r0, [r0, #0]
 800c272:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c276:	4770      	bx	lr

0800c278 <sensor_msgs__msg__Joy__rosidl_typesupport_introspection_c__get_function__Joy__axes>:
 800c278:	6800      	ldr	r0, [r0, #0]
 800c27a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c27e:	4770      	bx	lr

0800c280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c280:	b508      	push	{r3, lr}
 800c282:	f000 f9d5 	bl	800c630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c286:	4b06      	ldr	r3, [pc, #24]	@ (800c2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x20>)
 800c288:	4906      	ldr	r1, [pc, #24]	@ (800c2a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x24>)
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	60c8      	str	r0, [r1, #12]
 800c28e:	b10a      	cbz	r2, 800c294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x14>
 800c290:	4803      	ldr	r0, [pc, #12]	@ (800c2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x20>)
 800c292:	bd08      	pop	{r3, pc}
 800c294:	4a04      	ldr	r2, [pc, #16]	@ (800c2a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x28>)
 800c296:	4802      	ldr	r0, [pc, #8]	@ (800c2a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x20>)
 800c298:	6812      	ldr	r2, [r2, #0]
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	bd08      	pop	{r3, pc}
 800c29e:	bf00      	nop
 800c2a0:	20000400 	.word	0x20000400
 800c2a4:	2000034c 	.word	0x2000034c
 800c2a8:	20000170 	.word	0x20000170

0800c2ac <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800c2ac:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c2b0:	4680      	mov	r8, r0
 800c2b2:	460f      	mov	r7, r1
 800c2b4:	f000 f9e0 	bl	800c678 <get_serialized_size_std_msgs__msg__Header>
 800c2b8:	183c      	adds	r4, r7, r0
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	f108 0018 	add.w	r0, r8, #24
 800c2c0:	f000 fafe 	bl	800c8c0 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800c2c4:	4404      	add	r4, r0
 800c2c6:	2108      	movs	r1, #8
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f002 fdf9 	bl	800eec0 <ucdr_alignment>
 800c2ce:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c2d2:	4425      	add	r5, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800c2da:	f000 fba9 	bl	800ca30 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c2de:	4405      	add	r5, r0
 800c2e0:	2108      	movs	r1, #8
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f002 fdec 	bl	800eec0 <ucdr_alignment>
 800c2e8:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c2ec:	4425      	add	r5, r4
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800c2f4:	f000 fb9c 	bl	800ca30 <get_serialized_size_geometry_msgs__msg__Vector3>
 800c2f8:	4405      	add	r5, r0
 800c2fa:	2108      	movs	r1, #8
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f002 fddf 	bl	800eec0 <ucdr_alignment>
 800c302:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c306:	4438      	add	r0, r7
 800c308:	4428      	add	r0, r5
 800c30a:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800c30e:	bf00      	nop

0800c310 <get_serialized_size_sensor_msgs__msg__Imu>:
 800c310:	b108      	cbz	r0, 800c316 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800c312:	f7ff bfcb 	b.w	800c2ac <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c316:	4770      	bx	lr

0800c318 <_Imu__get_serialized_size>:
 800c318:	b110      	cbz	r0, 800c320 <_Imu__get_serialized_size+0x8>
 800c31a:	2100      	movs	r1, #0
 800c31c:	f7ff bfc6 	b.w	800c2ac <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop

0800c324 <_Imu__cdr_deserialize>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	460c      	mov	r4, r1
 800c328:	b399      	cbz	r1, 800c392 <_Imu__cdr_deserialize+0x6e>
 800c32a:	4605      	mov	r5, r0
 800c32c:	f000 fa26 	bl	800c77c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c330:	6843      	ldr	r3, [r0, #4]
 800c332:	4621      	mov	r1, r4
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	4628      	mov	r0, r5
 800c338:	4798      	blx	r3
 800c33a:	f000 fb75 	bl	800ca28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c33e:	6843      	ldr	r3, [r0, #4]
 800c340:	f104 0118 	add.w	r1, r4, #24
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	4628      	mov	r0, r5
 800c348:	4798      	blx	r3
 800c34a:	2209      	movs	r2, #9
 800c34c:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c350:	4628      	mov	r0, r5
 800c352:	f000 ffed 	bl	800d330 <ucdr_deserialize_array_double>
 800c356:	f000 fbf7 	bl	800cb48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c35a:	6843      	ldr	r3, [r0, #4]
 800c35c:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	4628      	mov	r0, r5
 800c364:	4798      	blx	r3
 800c366:	2209      	movs	r2, #9
 800c368:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c36c:	4628      	mov	r0, r5
 800c36e:	f000 ffdf 	bl	800d330 <ucdr_deserialize_array_double>
 800c372:	f000 fbe9 	bl	800cb48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c376:	6843      	ldr	r3, [r0, #4]
 800c378:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	4628      	mov	r0, r5
 800c380:	4798      	blx	r3
 800c382:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c386:	4628      	mov	r0, r5
 800c388:	2209      	movs	r2, #9
 800c38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c38e:	f000 bfcf 	b.w	800d330 <ucdr_deserialize_array_double>
 800c392:	4608      	mov	r0, r1
 800c394:	bd38      	pop	{r3, r4, r5, pc}
 800c396:	bf00      	nop

0800c398 <_Imu__cdr_serialize>:
 800c398:	2800      	cmp	r0, #0
 800c39a:	d035      	beq.n	800c408 <_Imu__cdr_serialize+0x70>
 800c39c:	b538      	push	{r3, r4, r5, lr}
 800c39e:	460d      	mov	r5, r1
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	f000 f9eb 	bl	800c77c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c3a6:	6843      	ldr	r3, [r0, #4]
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	4798      	blx	r3
 800c3b0:	f000 fb3a 	bl	800ca28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800c3b4:	6843      	ldr	r3, [r0, #4]
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f104 0018 	add.w	r0, r4, #24
 800c3be:	4798      	blx	r3
 800c3c0:	2209      	movs	r2, #9
 800c3c2:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f000 ff5e 	bl	800d288 <ucdr_serialize_array_double>
 800c3cc:	f000 fbbc 	bl	800cb48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c3d0:	6843      	ldr	r3, [r0, #4]
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800c3da:	4798      	blx	r3
 800c3dc:	2209      	movs	r2, #9
 800c3de:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f000 ff50 	bl	800d288 <ucdr_serialize_array_double>
 800c3e8:	f000 fbae 	bl	800cb48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c3ec:	6843      	ldr	r3, [r0, #4]
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800c3f6:	4798      	blx	r3
 800c3f8:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	2209      	movs	r2, #9
 800c400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c404:	f000 bf40 	b.w	800d288 <ucdr_serialize_array_double>
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop

0800c40c <max_serialized_size_sensor_msgs__msg__Imu>:
 800c40c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800c410:	2301      	movs	r3, #1
 800c412:	7003      	strb	r3, [r0, #0]
 800c414:	4680      	mov	r8, r0
 800c416:	460f      	mov	r7, r1
 800c418:	f000 f9a6 	bl	800c768 <max_serialized_size_std_msgs__msg__Header>
 800c41c:	183c      	adds	r4, r7, r0
 800c41e:	4621      	mov	r1, r4
 800c420:	4640      	mov	r0, r8
 800c422:	f000 fadf 	bl	800c9e4 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800c426:	4404      	add	r4, r0
 800c428:	2108      	movs	r1, #8
 800c42a:	4620      	mov	r0, r4
 800c42c:	f002 fd48 	bl	800eec0 <ucdr_alignment>
 800c430:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800c434:	4425      	add	r5, r4
 800c436:	4629      	mov	r1, r5
 800c438:	4640      	mov	r0, r8
 800c43a:	f000 fb69 	bl	800cb10 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c43e:	4405      	add	r5, r0
 800c440:	2108      	movs	r1, #8
 800c442:	4628      	mov	r0, r5
 800c444:	f002 fd3c 	bl	800eec0 <ucdr_alignment>
 800c448:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800c44c:	4425      	add	r5, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	4640      	mov	r0, r8
 800c452:	f000 fb5d 	bl	800cb10 <max_serialized_size_geometry_msgs__msg__Vector3>
 800c456:	4405      	add	r5, r0
 800c458:	2108      	movs	r1, #8
 800c45a:	4628      	mov	r0, r5
 800c45c:	f002 fd30 	bl	800eec0 <ucdr_alignment>
 800c460:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800c464:	4438      	add	r0, r7
 800c466:	4428      	add	r0, r5
 800c468:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800c46c <_Imu__max_serialized_size>:
 800c46c:	b500      	push	{lr}
 800c46e:	b083      	sub	sp, #12
 800c470:	2100      	movs	r1, #0
 800c472:	f10d 0007 	add.w	r0, sp, #7
 800c476:	f7ff ffc9 	bl	800c40c <max_serialized_size_sensor_msgs__msg__Imu>
 800c47a:	b003      	add	sp, #12
 800c47c:	f85d fb04 	ldr.w	pc, [sp], #4

0800c480 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800c480:	4800      	ldr	r0, [pc, #0]	@ (800c484 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800c482:	4770      	bx	lr
 800c484:	2000040c 	.word	0x2000040c

0800c488 <_Joy__max_serialized_size>:
 800c488:	b500      	push	{lr}
 800c48a:	b083      	sub	sp, #12
 800c48c:	2301      	movs	r3, #1
 800c48e:	2100      	movs	r1, #0
 800c490:	f10d 0007 	add.w	r0, sp, #7
 800c494:	f88d 3007 	strb.w	r3, [sp, #7]
 800c498:	f000 f966 	bl	800c768 <max_serialized_size_std_msgs__msg__Header>
 800c49c:	b003      	add	sp, #12
 800c49e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4a2:	bf00      	nop

0800c4a4 <get_serialized_size_sensor_msgs__msg__Joy>:
 800c4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	b1b8      	cbz	r0, 800c4dc <get_serialized_size_sensor_msgs__msg__Joy+0x38>
 800c4ac:	460e      	mov	r6, r1
 800c4ae:	f000 f8e3 	bl	800c678 <get_serialized_size_std_msgs__msg__Header>
 800c4b2:	1837      	adds	r7, r6, r0
 800c4b4:	2104      	movs	r1, #4
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	f8d4 8018 	ldr.w	r8, [r4, #24]
 800c4bc:	f002 fd00 	bl	800eec0 <ucdr_alignment>
 800c4c0:	1d05      	adds	r5, r0, #4
 800c4c2:	443d      	add	r5, r7
 800c4c4:	f1b8 0f00 	cmp.w	r8, #0
 800c4c8:	d112      	bne.n	800c4f0 <get_serialized_size_sensor_msgs__msg__Joy+0x4c>
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	2104      	movs	r1, #4
 800c4ce:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 800c4d0:	f002 fcf6 	bl	800eec0 <ucdr_alignment>
 800c4d4:	4405      	add	r5, r0
 800c4d6:	3504      	adds	r5, #4
 800c4d8:	b917      	cbnz	r7, 800c4e0 <get_serialized_size_sensor_msgs__msg__Joy+0x3c>
 800c4da:	1ba8      	subs	r0, r5, r6
 800c4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	2104      	movs	r1, #4
 800c4e4:	f002 fcec 	bl	800eec0 <ucdr_alignment>
 800c4e8:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 800c4ec:	18c5      	adds	r5, r0, r3
 800c4ee:	e7f4      	b.n	800c4da <get_serialized_size_sensor_msgs__msg__Joy+0x36>
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	2104      	movs	r1, #4
 800c4f4:	f002 fce4 	bl	800eec0 <ucdr_alignment>
 800c4f8:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800c4fc:	4405      	add	r5, r0
 800c4fe:	e7e4      	b.n	800c4ca <get_serialized_size_sensor_msgs__msg__Joy+0x26>

0800c500 <_Joy__cdr_deserialize>:
 800c500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c502:	460c      	mov	r4, r1
 800c504:	b083      	sub	sp, #12
 800c506:	2900      	cmp	r1, #0
 800c508:	d035      	beq.n	800c576 <_Joy__cdr_deserialize+0x76>
 800c50a:	4606      	mov	r6, r0
 800c50c:	f000 f936 	bl	800c77c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c510:	6843      	ldr	r3, [r0, #4]
 800c512:	4621      	mov	r1, r4
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	4630      	mov	r0, r6
 800c518:	4798      	blx	r3
 800c51a:	69e5      	ldr	r5, [r4, #28]
 800c51c:	6961      	ldr	r1, [r4, #20]
 800c51e:	ab01      	add	r3, sp, #4
 800c520:	462a      	mov	r2, r5
 800c522:	4630      	mov	r0, r6
 800c524:	f002 fdce 	bl	800f0c4 <ucdr_deserialize_sequence_float>
 800c528:	b980      	cbnz	r0, 800c54c <_Joy__cdr_deserialize+0x4c>
 800c52a:	9a01      	ldr	r2, [sp, #4]
 800c52c:	4295      	cmp	r5, r2
 800c52e:	d326      	bcc.n	800c57e <_Joy__cdr_deserialize+0x7e>
 800c530:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800c532:	6a21      	ldr	r1, [r4, #32]
 800c534:	ab01      	add	r3, sp, #4
 800c536:	463a      	mov	r2, r7
 800c538:	4630      	mov	r0, r6
 800c53a:	f002 fd97 	bl	800f06c <ucdr_deserialize_sequence_int32_t>
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	4605      	mov	r5, r0
 800c542:	b130      	cbz	r0, 800c552 <_Joy__cdr_deserialize+0x52>
 800c544:	6263      	str	r3, [r4, #36]	@ 0x24
 800c546:	4628      	mov	r0, r5
 800c548:	b003      	add	sp, #12
 800c54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54c:	9b01      	ldr	r3, [sp, #4]
 800c54e:	61a3      	str	r3, [r4, #24]
 800c550:	e7ee      	b.n	800c530 <_Joy__cdr_deserialize+0x30>
 800c552:	429f      	cmp	r7, r3
 800c554:	d2f7      	bcs.n	800c546 <_Joy__cdr_deserialize+0x46>
 800c556:	2301      	movs	r3, #1
 800c558:	75b0      	strb	r0, [r6, #22]
 800c55a:	7573      	strb	r3, [r6, #21]
 800c55c:	4630      	mov	r0, r6
 800c55e:	6265      	str	r5, [r4, #36]	@ 0x24
 800c560:	2104      	movs	r1, #4
 800c562:	f002 fcc3 	bl	800eeec <ucdr_align_to>
 800c566:	9901      	ldr	r1, [sp, #4]
 800c568:	4630      	mov	r0, r6
 800c56a:	0089      	lsls	r1, r1, #2
 800c56c:	f002 fcf4 	bl	800ef58 <ucdr_advance_buffer>
 800c570:	4628      	mov	r0, r5
 800c572:	b003      	add	sp, #12
 800c574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c576:	460d      	mov	r5, r1
 800c578:	4628      	mov	r0, r5
 800c57a:	b003      	add	sp, #12
 800c57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c57e:	2201      	movs	r2, #1
 800c580:	75b0      	strb	r0, [r6, #22]
 800c582:	7572      	strb	r2, [r6, #21]
 800c584:	2104      	movs	r1, #4
 800c586:	61a0      	str	r0, [r4, #24]
 800c588:	4630      	mov	r0, r6
 800c58a:	f002 fcaf 	bl	800eeec <ucdr_align_to>
 800c58e:	9901      	ldr	r1, [sp, #4]
 800c590:	4630      	mov	r0, r6
 800c592:	0089      	lsls	r1, r1, #2
 800c594:	f002 fce0 	bl	800ef58 <ucdr_advance_buffer>
 800c598:	e7ca      	b.n	800c530 <_Joy__cdr_deserialize+0x30>
 800c59a:	bf00      	nop

0800c59c <_Joy__cdr_serialize>:
 800c59c:	b1a8      	cbz	r0, 800c5ca <_Joy__cdr_serialize+0x2e>
 800c59e:	b538      	push	{r3, r4, r5, lr}
 800c5a0:	460d      	mov	r5, r1
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	f000 f8ea 	bl	800c77c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800c5a8:	6843      	ldr	r3, [r0, #4]
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	689b      	ldr	r3, [r3, #8]
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	4798      	blx	r3
 800c5b2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f002 fd72 	bl	800f0a0 <ucdr_serialize_sequence_float>
 800c5bc:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c6:	f002 bd3f 	b.w	800f048 <ucdr_serialize_sequence_int32_t>
 800c5ca:	4770      	bx	lr

0800c5cc <_Joy__get_serialized_size>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	b190      	cbz	r0, 800c5f8 <_Joy__get_serialized_size+0x2c>
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	f000 f850 	bl	800c678 <get_serialized_size_std_msgs__msg__Header>
 800c5d8:	2104      	movs	r1, #4
 800c5da:	4605      	mov	r5, r0
 800c5dc:	69a6      	ldr	r6, [r4, #24]
 800c5de:	f002 fc6f 	bl	800eec0 <ucdr_alignment>
 800c5e2:	4428      	add	r0, r5
 800c5e4:	1d05      	adds	r5, r0, #4
 800c5e6:	b996      	cbnz	r6, 800c60e <_Joy__get_serialized_size+0x42>
 800c5e8:	2104      	movs	r1, #4
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800c5ee:	f002 fc67 	bl	800eec0 <ucdr_alignment>
 800c5f2:	4428      	add	r0, r5
 800c5f4:	1d04      	adds	r4, r0, #4
 800c5f6:	b90e      	cbnz	r6, 800c5fc <_Joy__get_serialized_size+0x30>
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	bd70      	pop	{r4, r5, r6, pc}
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	2104      	movs	r1, #4
 800c600:	f002 fc5e 	bl	800eec0 <ucdr_alignment>
 800c604:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800c608:	4404      	add	r4, r0
 800c60a:	4620      	mov	r0, r4
 800c60c:	bd70      	pop	{r4, r5, r6, pc}
 800c60e:	4628      	mov	r0, r5
 800c610:	2104      	movs	r1, #4
 800c612:	f002 fc55 	bl	800eec0 <ucdr_alignment>
 800c616:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800c61a:	4405      	add	r5, r0
 800c61c:	e7e4      	b.n	800c5e8 <_Joy__get_serialized_size+0x1c>
 800c61e:	bf00      	nop

0800c620 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Joy>:
 800c620:	4800      	ldr	r0, [pc, #0]	@ (800c624 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Joy+0x4>)
 800c622:	4770      	bx	lr
 800c624:	20000434 	.word	0x20000434

0800c628 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800c628:	f00a b93c 	b.w	80168a4 <std_msgs__msg__Header__init>

0800c62c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800c62c:	f00a b95e 	b.w	80168ec <std_msgs__msg__Header__fini>

0800c630 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800c630:	b508      	push	{r3, lr}
 800c632:	f000 f8ab 	bl	800c78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c636:	4b06      	ldr	r3, [pc, #24]	@ (800c650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c638:	4906      	ldr	r1, [pc, #24]	@ (800c654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	60c8      	str	r0, [r1, #12]
 800c63e:	b10a      	cbz	r2, 800c644 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800c640:	4803      	ldr	r0, [pc, #12]	@ (800c650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c642:	bd08      	pop	{r3, pc}
 800c644:	4a04      	ldr	r2, [pc, #16]	@ (800c658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800c646:	4802      	ldr	r0, [pc, #8]	@ (800c650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800c648:	6812      	ldr	r2, [r2, #0]
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	bd08      	pop	{r3, pc}
 800c64e:	bf00      	nop
 800c650:	200004d4 	.word	0x200004d4
 800c654:	2000045c 	.word	0x2000045c
 800c658:	20000170 	.word	0x20000170

0800c65c <_Header__max_serialized_size>:
 800c65c:	b500      	push	{lr}
 800c65e:	b083      	sub	sp, #12
 800c660:	2301      	movs	r3, #1
 800c662:	2100      	movs	r1, #0
 800c664:	f10d 0007 	add.w	r0, sp, #7
 800c668:	f88d 3007 	strb.w	r3, [sp, #7]
 800c66c:	f000 f8ec 	bl	800c848 <max_serialized_size_builtin_interfaces__msg__Time>
 800c670:	b003      	add	sp, #12
 800c672:	f85d fb04 	ldr.w	pc, [sp], #4
 800c676:	bf00      	nop

0800c678 <get_serialized_size_std_msgs__msg__Header>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	4605      	mov	r5, r0
 800c67c:	b168      	cbz	r0, 800c69a <get_serialized_size_std_msgs__msg__Header+0x22>
 800c67e:	460c      	mov	r4, r1
 800c680:	f000 f892 	bl	800c7a8 <get_serialized_size_builtin_interfaces__msg__Time>
 800c684:	1826      	adds	r6, r4, r0
 800c686:	2104      	movs	r1, #4
 800c688:	4630      	mov	r0, r6
 800c68a:	f002 fc19 	bl	800eec0 <ucdr_alignment>
 800c68e:	68e9      	ldr	r1, [r5, #12]
 800c690:	f1c4 0405 	rsb	r4, r4, #5
 800c694:	440c      	add	r4, r1
 800c696:	4404      	add	r4, r0
 800c698:	19a0      	adds	r0, r4, r6
 800c69a:	bd70      	pop	{r4, r5, r6, pc}

0800c69c <_Header__cdr_deserialize>:
 800c69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c69e:	460c      	mov	r4, r1
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	b1e1      	cbz	r1, 800c6de <_Header__cdr_deserialize+0x42>
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	f000 f8e3 	bl	800c870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c6aa:	6843      	ldr	r3, [r0, #4]
 800c6ac:	4621      	mov	r1, r4
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	4798      	blx	r3
 800c6b4:	6927      	ldr	r7, [r4, #16]
 800c6b6:	68a1      	ldr	r1, [r4, #8]
 800c6b8:	ab01      	add	r3, sp, #4
 800c6ba:	463a      	mov	r2, r7
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f002 fc7d 	bl	800efbc <ucdr_deserialize_sequence_char>
 800c6c2:	9b01      	ldr	r3, [sp, #4]
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	b920      	cbnz	r0, 800c6d2 <_Header__cdr_deserialize+0x36>
 800c6c8:	429f      	cmp	r7, r3
 800c6ca:	d30c      	bcc.n	800c6e6 <_Header__cdr_deserialize+0x4a>
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	b003      	add	sp, #12
 800c6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6d2:	b103      	cbz	r3, 800c6d6 <_Header__cdr_deserialize+0x3a>
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	60e3      	str	r3, [r4, #12]
 800c6da:	b003      	add	sp, #12
 800c6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6de:	460d      	mov	r5, r1
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	b003      	add	sp, #12
 800c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	75b0      	strb	r0, [r6, #22]
 800c6ea:	7571      	strb	r1, [r6, #21]
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	60e5      	str	r5, [r4, #12]
 800c6f0:	f002 fbfc 	bl	800eeec <ucdr_align_to>
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	9901      	ldr	r1, [sp, #4]
 800c6f8:	f002 fc2e 	bl	800ef58 <ucdr_advance_buffer>
 800c6fc:	4628      	mov	r0, r5
 800c6fe:	b003      	add	sp, #12
 800c700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c702:	bf00      	nop

0800c704 <_Header__cdr_serialize>:
 800c704:	b1f8      	cbz	r0, 800c746 <_Header__cdr_serialize+0x42>
 800c706:	b570      	push	{r4, r5, r6, lr}
 800c708:	4604      	mov	r4, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	f000 f8b0 	bl	800c870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c710:	6843      	ldr	r3, [r0, #4]
 800c712:	4629      	mov	r1, r5
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	4620      	mov	r0, r4
 800c718:	4798      	blx	r3
 800c71a:	68a6      	ldr	r6, [r4, #8]
 800c71c:	b156      	cbz	r6, 800c734 <_Header__cdr_serialize+0x30>
 800c71e:	4630      	mov	r0, r6
 800c720:	f7f3 fd6e 	bl	8000200 <strlen>
 800c724:	4631      	mov	r1, r6
 800c726:	60e0      	str	r0, [r4, #12]
 800c728:	1c42      	adds	r2, r0, #1
 800c72a:	4628      	mov	r0, r5
 800c72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c730:	f002 bc32 	b.w	800ef98 <ucdr_serialize_sequence_char>
 800c734:	4630      	mov	r0, r6
 800c736:	60e0      	str	r0, [r4, #12]
 800c738:	4632      	mov	r2, r6
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c742:	f002 bc29 	b.w	800ef98 <ucdr_serialize_sequence_char>
 800c746:	4770      	bx	lr

0800c748 <_Header__get_serialized_size>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4604      	mov	r4, r0
 800c74c:	b150      	cbz	r0, 800c764 <_Header__get_serialized_size+0x1c>
 800c74e:	2100      	movs	r1, #0
 800c750:	f000 f82a 	bl	800c7a8 <get_serialized_size_builtin_interfaces__msg__Time>
 800c754:	2104      	movs	r1, #4
 800c756:	4605      	mov	r5, r0
 800c758:	f002 fbb2 	bl	800eec0 <ucdr_alignment>
 800c75c:	68e2      	ldr	r2, [r4, #12]
 800c75e:	3205      	adds	r2, #5
 800c760:	1953      	adds	r3, r2, r5
 800c762:	4418      	add	r0, r3
 800c764:	bd38      	pop	{r3, r4, r5, pc}
 800c766:	bf00      	nop

0800c768 <max_serialized_size_std_msgs__msg__Header>:
 800c768:	b510      	push	{r4, lr}
 800c76a:	2301      	movs	r3, #1
 800c76c:	4604      	mov	r4, r0
 800c76e:	7003      	strb	r3, [r0, #0]
 800c770:	f000 f86a 	bl	800c848 <max_serialized_size_builtin_interfaces__msg__Time>
 800c774:	2300      	movs	r3, #0
 800c776:	7023      	strb	r3, [r4, #0]
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	bf00      	nop

0800c77c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800c77c:	4800      	ldr	r0, [pc, #0]	@ (800c780 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800c77e:	4770      	bx	lr
 800c780:	200004e0 	.word	0x200004e0

0800c784 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800c784:	f00a b8be 	b.w	8016904 <builtin_interfaces__msg__Time__init>

0800c788 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800c788:	f00a b8c0 	b.w	801690c <builtin_interfaces__msg__Time__fini>

0800c78c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c78c:	4b04      	ldr	r3, [pc, #16]	@ (800c7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	b10a      	cbz	r2, 800c796 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800c792:	4803      	ldr	r0, [pc, #12]	@ (800c7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c794:	4770      	bx	lr
 800c796:	4a03      	ldr	r2, [pc, #12]	@ (800c7a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800c798:	4801      	ldr	r0, [pc, #4]	@ (800c7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c79a:	6812      	ldr	r2, [r2, #0]
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	4770      	bx	lr
 800c7a0:	20000580 	.word	0x20000580
 800c7a4:	20000170 	.word	0x20000170

0800c7a8 <get_serialized_size_builtin_interfaces__msg__Time>:
 800c7a8:	b180      	cbz	r0, 800c7cc <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800c7aa:	b538      	push	{r3, r4, r5, lr}
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	2104      	movs	r1, #4
 800c7b2:	f002 fb85 	bl	800eec0 <ucdr_alignment>
 800c7b6:	1d2b      	adds	r3, r5, #4
 800c7b8:	181c      	adds	r4, r3, r0
 800c7ba:	2104      	movs	r1, #4
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f002 fb7f 	bl	800eec0 <ucdr_alignment>
 800c7c2:	f1c5 0504 	rsb	r5, r5, #4
 800c7c6:	4428      	add	r0, r5
 800c7c8:	4420      	add	r0, r4
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop

0800c7d0 <_Time__cdr_deserialize>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	b141      	cbz	r1, 800c7e8 <_Time__cdr_deserialize+0x18>
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	f001 fd8e 	bl	800e2f8 <ucdr_deserialize_int32_t>
 800c7dc:	1d21      	adds	r1, r4, #4
 800c7de:	4628      	mov	r0, r5
 800c7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e4:	f001 b96e 	b.w	800dac4 <ucdr_deserialize_uint32_t>
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}

0800c7ec <_Time__cdr_serialize>:
 800c7ec:	b160      	cbz	r0, 800c808 <_Time__cdr_serialize+0x1c>
 800c7ee:	b538      	push	{r3, r4, r5, lr}
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	6801      	ldr	r1, [r0, #0]
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	f001 fc4e 	bl	800e098 <ucdr_serialize_int32_t>
 800c7fc:	6861      	ldr	r1, [r4, #4]
 800c7fe:	4628      	mov	r0, r5
 800c800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c804:	f001 b82e 	b.w	800d864 <ucdr_serialize_uint32_t>
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop

0800c80c <_Time__get_serialized_size>:
 800c80c:	b160      	cbz	r0, 800c828 <_Time__get_serialized_size+0x1c>
 800c80e:	b510      	push	{r4, lr}
 800c810:	2104      	movs	r1, #4
 800c812:	2000      	movs	r0, #0
 800c814:	f002 fb54 	bl	800eec0 <ucdr_alignment>
 800c818:	1d04      	adds	r4, r0, #4
 800c81a:	2104      	movs	r1, #4
 800c81c:	4620      	mov	r0, r4
 800c81e:	f002 fb4f 	bl	800eec0 <ucdr_alignment>
 800c822:	3004      	adds	r0, #4
 800c824:	4420      	add	r0, r4
 800c826:	bd10      	pop	{r4, pc}
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop

0800c82c <_Time__max_serialized_size>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	2104      	movs	r1, #4
 800c830:	2000      	movs	r0, #0
 800c832:	f002 fb45 	bl	800eec0 <ucdr_alignment>
 800c836:	1d04      	adds	r4, r0, #4
 800c838:	2104      	movs	r1, #4
 800c83a:	4620      	mov	r0, r4
 800c83c:	f002 fb40 	bl	800eec0 <ucdr_alignment>
 800c840:	3004      	adds	r0, #4
 800c842:	4420      	add	r0, r4
 800c844:	bd10      	pop	{r4, pc}
 800c846:	bf00      	nop

0800c848 <max_serialized_size_builtin_interfaces__msg__Time>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	460c      	mov	r4, r1
 800c84c:	2301      	movs	r3, #1
 800c84e:	7003      	strb	r3, [r0, #0]
 800c850:	2104      	movs	r1, #4
 800c852:	4620      	mov	r0, r4
 800c854:	f002 fb34 	bl	800eec0 <ucdr_alignment>
 800c858:	1d25      	adds	r5, r4, #4
 800c85a:	4405      	add	r5, r0
 800c85c:	2104      	movs	r1, #4
 800c85e:	4628      	mov	r0, r5
 800c860:	f002 fb2e 	bl	800eec0 <ucdr_alignment>
 800c864:	f1c4 0404 	rsb	r4, r4, #4
 800c868:	4420      	add	r0, r4
 800c86a:	4428      	add	r0, r5
 800c86c:	bd38      	pop	{r3, r4, r5, pc}
 800c86e:	bf00      	nop

0800c870 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c870:	4800      	ldr	r0, [pc, #0]	@ (800c874 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800c872:	4770      	bx	lr
 800c874:	2000058c 	.word	0x2000058c

0800c878 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800c878:	f00a b84a 	b.w	8016910 <geometry_msgs__msg__Quaternion__init>

0800c87c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800c87c:	f00a b85c 	b.w	8016938 <geometry_msgs__msg__Quaternion__fini>

0800c880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800c880:	4b04      	ldr	r3, [pc, #16]	@ (800c894 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	b10a      	cbz	r2, 800c88a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800c886:	4803      	ldr	r0, [pc, #12]	@ (800c894 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c888:	4770      	bx	lr
 800c88a:	4a03      	ldr	r2, [pc, #12]	@ (800c898 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800c88c:	4801      	ldr	r0, [pc, #4]	@ (800c894 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800c88e:	6812      	ldr	r2, [r2, #0]
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	4770      	bx	lr
 800c894:	200006a4 	.word	0x200006a4
 800c898:	20000170 	.word	0x20000170

0800c89c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800c89c:	f00a b84e 	b.w	801693c <geometry_msgs__msg__Vector3__init>

0800c8a0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800c8a0:	f00a b850 	b.w	8016944 <geometry_msgs__msg__Vector3__fini>

0800c8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c8a4:	4b04      	ldr	r3, [pc, #16]	@ (800c8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	b10a      	cbz	r2, 800c8ae <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800c8aa:	4803      	ldr	r0, [pc, #12]	@ (800c8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c8ac:	4770      	bx	lr
 800c8ae:	4a03      	ldr	r2, [pc, #12]	@ (800c8bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800c8b0:	4801      	ldr	r0, [pc, #4]	@ (800c8b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c8b2:	6812      	ldr	r2, [r2, #0]
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	4770      	bx	lr
 800c8b8:	20000764 	.word	0x20000764
 800c8bc:	20000170 	.word	0x20000170

0800c8c0 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800c8c0:	b1f0      	cbz	r0, 800c900 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800c8c2:	b570      	push	{r4, r5, r6, lr}
 800c8c4:	460d      	mov	r5, r1
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	2108      	movs	r1, #8
 800c8ca:	f002 faf9 	bl	800eec0 <ucdr_alignment>
 800c8ce:	f105 0308 	add.w	r3, r5, #8
 800c8d2:	181e      	adds	r6, r3, r0
 800c8d4:	2108      	movs	r1, #8
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	f002 faf2 	bl	800eec0 <ucdr_alignment>
 800c8dc:	f100 0408 	add.w	r4, r0, #8
 800c8e0:	4434      	add	r4, r6
 800c8e2:	2108      	movs	r1, #8
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f002 faeb 	bl	800eec0 <ucdr_alignment>
 800c8ea:	3008      	adds	r0, #8
 800c8ec:	4404      	add	r4, r0
 800c8ee:	2108      	movs	r1, #8
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f002 fae5 	bl	800eec0 <ucdr_alignment>
 800c8f6:	f1c5 0508 	rsb	r5, r5, #8
 800c8fa:	4428      	add	r0, r5
 800c8fc:	4420      	add	r0, r4
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop

0800c904 <_Quaternion__cdr_deserialize>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	460c      	mov	r4, r1
 800c908:	b199      	cbz	r1, 800c932 <_Quaternion__cdr_deserialize+0x2e>
 800c90a:	4605      	mov	r5, r0
 800c90c:	f002 f8ec 	bl	800eae8 <ucdr_deserialize_double>
 800c910:	f104 0108 	add.w	r1, r4, #8
 800c914:	4628      	mov	r0, r5
 800c916:	f002 f8e7 	bl	800eae8 <ucdr_deserialize_double>
 800c91a:	f104 0110 	add.w	r1, r4, #16
 800c91e:	4628      	mov	r0, r5
 800c920:	f002 f8e2 	bl	800eae8 <ucdr_deserialize_double>
 800c924:	f104 0118 	add.w	r1, r4, #24
 800c928:	4628      	mov	r0, r5
 800c92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c92e:	f002 b8db 	b.w	800eae8 <ucdr_deserialize_double>
 800c932:	4608      	mov	r0, r1
 800c934:	bd38      	pop	{r3, r4, r5, pc}
 800c936:	bf00      	nop

0800c938 <_Quaternion__cdr_serialize>:
 800c938:	b1c0      	cbz	r0, 800c96c <_Quaternion__cdr_serialize+0x34>
 800c93a:	b538      	push	{r3, r4, r5, lr}
 800c93c:	ed90 0b00 	vldr	d0, [r0]
 800c940:	460d      	mov	r5, r1
 800c942:	4604      	mov	r4, r0
 800c944:	4608      	mov	r0, r1
 800c946:	f001 ff2d 	bl	800e7a4 <ucdr_serialize_double>
 800c94a:	ed94 0b02 	vldr	d0, [r4, #8]
 800c94e:	4628      	mov	r0, r5
 800c950:	f001 ff28 	bl	800e7a4 <ucdr_serialize_double>
 800c954:	ed94 0b04 	vldr	d0, [r4, #16]
 800c958:	4628      	mov	r0, r5
 800c95a:	f001 ff23 	bl	800e7a4 <ucdr_serialize_double>
 800c95e:	ed94 0b06 	vldr	d0, [r4, #24]
 800c962:	4628      	mov	r0, r5
 800c964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c968:	f001 bf1c 	b.w	800e7a4 <ucdr_serialize_double>
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop

0800c970 <_Quaternion__get_serialized_size>:
 800c970:	b1d0      	cbz	r0, 800c9a8 <_Quaternion__get_serialized_size+0x38>
 800c972:	b538      	push	{r3, r4, r5, lr}
 800c974:	2108      	movs	r1, #8
 800c976:	2000      	movs	r0, #0
 800c978:	f002 faa2 	bl	800eec0 <ucdr_alignment>
 800c97c:	f100 0508 	add.w	r5, r0, #8
 800c980:	2108      	movs	r1, #8
 800c982:	4628      	mov	r0, r5
 800c984:	f002 fa9c 	bl	800eec0 <ucdr_alignment>
 800c988:	f100 0408 	add.w	r4, r0, #8
 800c98c:	442c      	add	r4, r5
 800c98e:	2108      	movs	r1, #8
 800c990:	4620      	mov	r0, r4
 800c992:	f002 fa95 	bl	800eec0 <ucdr_alignment>
 800c996:	3008      	adds	r0, #8
 800c998:	4404      	add	r4, r0
 800c99a:	2108      	movs	r1, #8
 800c99c:	4620      	mov	r0, r4
 800c99e:	f002 fa8f 	bl	800eec0 <ucdr_alignment>
 800c9a2:	3008      	adds	r0, #8
 800c9a4:	4420      	add	r0, r4
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop

0800c9ac <_Quaternion__max_serialized_size>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	2108      	movs	r1, #8
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f002 fa85 	bl	800eec0 <ucdr_alignment>
 800c9b6:	f100 0508 	add.w	r5, r0, #8
 800c9ba:	2108      	movs	r1, #8
 800c9bc:	4628      	mov	r0, r5
 800c9be:	f002 fa7f 	bl	800eec0 <ucdr_alignment>
 800c9c2:	f100 0408 	add.w	r4, r0, #8
 800c9c6:	442c      	add	r4, r5
 800c9c8:	2108      	movs	r1, #8
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f002 fa78 	bl	800eec0 <ucdr_alignment>
 800c9d0:	3008      	adds	r0, #8
 800c9d2:	4404      	add	r4, r0
 800c9d4:	2108      	movs	r1, #8
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f002 fa72 	bl	800eec0 <ucdr_alignment>
 800c9dc:	3008      	adds	r0, #8
 800c9de:	4420      	add	r0, r4
 800c9e0:	bd38      	pop	{r3, r4, r5, pc}
 800c9e2:	bf00      	nop

0800c9e4 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	7003      	strb	r3, [r0, #0]
 800c9ec:	2108      	movs	r1, #8
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f002 fa66 	bl	800eec0 <ucdr_alignment>
 800c9f4:	f104 0508 	add.w	r5, r4, #8
 800c9f8:	1946      	adds	r6, r0, r5
 800c9fa:	2108      	movs	r1, #8
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f002 fa5f 	bl	800eec0 <ucdr_alignment>
 800ca02:	f100 0508 	add.w	r5, r0, #8
 800ca06:	4435      	add	r5, r6
 800ca08:	2108      	movs	r1, #8
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f002 fa58 	bl	800eec0 <ucdr_alignment>
 800ca10:	3008      	adds	r0, #8
 800ca12:	4405      	add	r5, r0
 800ca14:	2108      	movs	r1, #8
 800ca16:	4628      	mov	r0, r5
 800ca18:	f002 fa52 	bl	800eec0 <ucdr_alignment>
 800ca1c:	f1c4 0408 	rsb	r4, r4, #8
 800ca20:	4420      	add	r0, r4
 800ca22:	4428      	add	r0, r5
 800ca24:	bd70      	pop	{r4, r5, r6, pc}
 800ca26:	bf00      	nop

0800ca28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800ca28:	4800      	ldr	r0, [pc, #0]	@ (800ca2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800ca2a:	4770      	bx	lr
 800ca2c:	20000770 	.word	0x20000770

0800ca30 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ca30:	b1b8      	cbz	r0, 800ca62 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ca32:	b538      	push	{r3, r4, r5, lr}
 800ca34:	460d      	mov	r5, r1
 800ca36:	4628      	mov	r0, r5
 800ca38:	2108      	movs	r1, #8
 800ca3a:	f002 fa41 	bl	800eec0 <ucdr_alignment>
 800ca3e:	f105 0308 	add.w	r3, r5, #8
 800ca42:	181c      	adds	r4, r3, r0
 800ca44:	2108      	movs	r1, #8
 800ca46:	4620      	mov	r0, r4
 800ca48:	f002 fa3a 	bl	800eec0 <ucdr_alignment>
 800ca4c:	3008      	adds	r0, #8
 800ca4e:	4404      	add	r4, r0
 800ca50:	2108      	movs	r1, #8
 800ca52:	4620      	mov	r0, r4
 800ca54:	f002 fa34 	bl	800eec0 <ucdr_alignment>
 800ca58:	f1c5 0508 	rsb	r5, r5, #8
 800ca5c:	4428      	add	r0, r5
 800ca5e:	4420      	add	r0, r4
 800ca60:	bd38      	pop	{r3, r4, r5, pc}
 800ca62:	4770      	bx	lr

0800ca64 <_Vector3__cdr_deserialize>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	460c      	mov	r4, r1
 800ca68:	b171      	cbz	r1, 800ca88 <_Vector3__cdr_deserialize+0x24>
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	f002 f83c 	bl	800eae8 <ucdr_deserialize_double>
 800ca70:	f104 0108 	add.w	r1, r4, #8
 800ca74:	4628      	mov	r0, r5
 800ca76:	f002 f837 	bl	800eae8 <ucdr_deserialize_double>
 800ca7a:	f104 0110 	add.w	r1, r4, #16
 800ca7e:	4628      	mov	r0, r5
 800ca80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca84:	f002 b830 	b.w	800eae8 <ucdr_deserialize_double>
 800ca88:	4608      	mov	r0, r1
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}

0800ca8c <_Vector3__cdr_serialize>:
 800ca8c:	b198      	cbz	r0, 800cab6 <_Vector3__cdr_serialize+0x2a>
 800ca8e:	b538      	push	{r3, r4, r5, lr}
 800ca90:	ed90 0b00 	vldr	d0, [r0]
 800ca94:	460d      	mov	r5, r1
 800ca96:	4604      	mov	r4, r0
 800ca98:	4608      	mov	r0, r1
 800ca9a:	f001 fe83 	bl	800e7a4 <ucdr_serialize_double>
 800ca9e:	ed94 0b02 	vldr	d0, [r4, #8]
 800caa2:	4628      	mov	r0, r5
 800caa4:	f001 fe7e 	bl	800e7a4 <ucdr_serialize_double>
 800caa8:	ed94 0b04 	vldr	d0, [r4, #16]
 800caac:	4628      	mov	r0, r5
 800caae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab2:	f001 be77 	b.w	800e7a4 <ucdr_serialize_double>
 800cab6:	4770      	bx	lr

0800cab8 <_Vector3__get_serialized_size>:
 800cab8:	b198      	cbz	r0, 800cae2 <_Vector3__get_serialized_size+0x2a>
 800caba:	b510      	push	{r4, lr}
 800cabc:	2108      	movs	r1, #8
 800cabe:	2000      	movs	r0, #0
 800cac0:	f002 f9fe 	bl	800eec0 <ucdr_alignment>
 800cac4:	f100 0408 	add.w	r4, r0, #8
 800cac8:	2108      	movs	r1, #8
 800caca:	4620      	mov	r0, r4
 800cacc:	f002 f9f8 	bl	800eec0 <ucdr_alignment>
 800cad0:	3008      	adds	r0, #8
 800cad2:	4404      	add	r4, r0
 800cad4:	2108      	movs	r1, #8
 800cad6:	4620      	mov	r0, r4
 800cad8:	f002 f9f2 	bl	800eec0 <ucdr_alignment>
 800cadc:	3008      	adds	r0, #8
 800cade:	4420      	add	r0, r4
 800cae0:	bd10      	pop	{r4, pc}
 800cae2:	4770      	bx	lr

0800cae4 <_Vector3__max_serialized_size>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	2108      	movs	r1, #8
 800cae8:	2000      	movs	r0, #0
 800caea:	f002 f9e9 	bl	800eec0 <ucdr_alignment>
 800caee:	f100 0508 	add.w	r5, r0, #8
 800caf2:	2108      	movs	r1, #8
 800caf4:	4628      	mov	r0, r5
 800caf6:	f002 f9e3 	bl	800eec0 <ucdr_alignment>
 800cafa:	f100 0408 	add.w	r4, r0, #8
 800cafe:	442c      	add	r4, r5
 800cb00:	2108      	movs	r1, #8
 800cb02:	4620      	mov	r0, r4
 800cb04:	f002 f9dc 	bl	800eec0 <ucdr_alignment>
 800cb08:	3008      	adds	r0, #8
 800cb0a:	4420      	add	r0, r4
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
 800cb0e:	bf00      	nop

0800cb10 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	2301      	movs	r3, #1
 800cb14:	460c      	mov	r4, r1
 800cb16:	7003      	strb	r3, [r0, #0]
 800cb18:	2108      	movs	r1, #8
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f002 f9d0 	bl	800eec0 <ucdr_alignment>
 800cb20:	f104 0508 	add.w	r5, r4, #8
 800cb24:	1946      	adds	r6, r0, r5
 800cb26:	2108      	movs	r1, #8
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f002 f9c9 	bl	800eec0 <ucdr_alignment>
 800cb2e:	f100 0508 	add.w	r5, r0, #8
 800cb32:	4435      	add	r5, r6
 800cb34:	2108      	movs	r1, #8
 800cb36:	4628      	mov	r0, r5
 800cb38:	f002 f9c2 	bl	800eec0 <ucdr_alignment>
 800cb3c:	f1c4 0408 	rsb	r4, r4, #8
 800cb40:	4420      	add	r0, r4
 800cb42:	4428      	add	r0, r5
 800cb44:	bd70      	pop	{r4, r5, r6, pc}
 800cb46:	bf00      	nop

0800cb48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cb48:	4800      	ldr	r0, [pc, #0]	@ (800cb4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800cb4a:	4770      	bx	lr
 800cb4c:	20000798 	.word	0x20000798

0800cb50 <micro_ros_string_utilities_init_with_size>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	1c4c      	adds	r4, r1, #1
 800cb56:	4605      	mov	r5, r0
 800cb58:	a801      	add	r0, sp, #4
 800cb5a:	f7fe fca7 	bl	800b4ac <rcutils_get_default_allocator>
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	9905      	ldr	r1, [sp, #20]
 800cb62:	4620      	mov	r0, r4
 800cb64:	4798      	blx	r3
 800cb66:	4622      	mov	r2, r4
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	f00c fd3f 	bl	80195ee <memset>
 800cb70:	2300      	movs	r3, #0
 800cb72:	4628      	mov	r0, r5
 800cb74:	e9c5 6300 	strd	r6, r3, [r5]
 800cb78:	60ac      	str	r4, [r5, #8]
 800cb7a:	b006      	add	sp, #24
 800cb7c:	bd70      	pop	{r4, r5, r6, pc}
 800cb7e:	bf00      	nop

0800cb80 <micro_ros_string_utilities_append>:
 800cb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb84:	b08a      	sub	sp, #40	@ 0x28
 800cb86:	4604      	mov	r4, r0
 800cb88:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800cb8c:	a801      	add	r0, sp, #4
 800cb8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800cb92:	a805      	add	r0, sp, #20
 800cb94:	f7fe fc8a 	bl	800b4ac <rcutils_get_default_allocator>
 800cb98:	4640      	mov	r0, r8
 800cb9a:	f7f3 fb31 	bl	8000200 <strlen>
 800cb9e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800cba2:	9f03      	ldr	r7, [sp, #12]
 800cba4:	9d01      	ldr	r5, [sp, #4]
 800cba6:	eb00 0a09 	add.w	sl, r0, r9
 800cbaa:	45ba      	cmp	sl, r7
 800cbac:	4606      	mov	r6, r0
 800cbae:	d307      	bcc.n	800cbc0 <micro_ros_string_utilities_append+0x40>
 800cbb0:	f10a 0701 	add.w	r7, sl, #1
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	9b07      	ldr	r3, [sp, #28]
 800cbb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbba:	4639      	mov	r1, r7
 800cbbc:	4798      	blx	r3
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	1c72      	adds	r2, r6, #1
 800cbc2:	4641      	mov	r1, r8
 800cbc4:	eb05 0009 	add.w	r0, r5, r9
 800cbc8:	f00c fd79 	bl	80196be <memcpy>
 800cbcc:	4620      	mov	r0, r4
 800cbce:	e9c4 5a00 	strd	r5, sl, [r4]
 800cbd2:	60a7      	str	r7, [r4, #8]
 800cbd4:	b00a      	add	sp, #40	@ 0x28
 800cbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbda:	bf00      	nop

0800cbdc <micro_ros_string_utilities_remove_tail_chars>:
 800cbdc:	b500      	push	{lr}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	f10d 0e04 	add.w	lr, sp, #4
 800cbe4:	e88e 000e 	stmia.w	lr, {r1, r2, r3}
 800cbe8:	4684      	mov	ip, r0
 800cbea:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cbee:	e88c 000b 	stmia.w	ip, {r0, r1, r3}
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	9906      	ldr	r1, [sp, #24]
 800cbf6:	1a5b      	subs	r3, r3, r1
 800cbf8:	9901      	ldr	r1, [sp, #4]
 800cbfa:	f8cc 3004 	str.w	r3, [ip, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	4660      	mov	r0, ip
 800cc02:	54ca      	strb	r2, [r1, r3]
 800cc04:	b005      	add	sp, #20
 800cc06:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc0a:	bf00      	nop

0800cc0c <micro_ros_string_utilities_destroy>:
 800cc0c:	b510      	push	{r4, lr}
 800cc0e:	4604      	mov	r4, r0
 800cc10:	b086      	sub	sp, #24
 800cc12:	a801      	add	r0, sp, #4
 800cc14:	f7fe fc4a 	bl	800b4ac <rcutils_get_default_allocator>
 800cc18:	9b02      	ldr	r3, [sp, #8]
 800cc1a:	9905      	ldr	r1, [sp, #20]
 800cc1c:	6820      	ldr	r0, [r4, #0]
 800cc1e:	4798      	blx	r3
 800cc20:	2300      	movs	r3, #0
 800cc22:	e9c4 3300 	strd	r3, r3, [r4]
 800cc26:	60a3      	str	r3, [r4, #8]
 800cc28:	b006      	add	sp, #24
 800cc2a:	bd10      	pop	{r4, pc}

0800cc2c <ucdr_serialize_endian_array_char>:
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	4619      	mov	r1, r3
 800cc32:	461f      	mov	r7, r3
 800cc34:	4605      	mov	r5, r0
 800cc36:	4690      	mov	r8, r2
 800cc38:	f002 f8ea 	bl	800ee10 <ucdr_check_buffer_available_for>
 800cc3c:	b9e0      	cbnz	r0, 800cc78 <ucdr_serialize_endian_array_char+0x4c>
 800cc3e:	463e      	mov	r6, r7
 800cc40:	e009      	b.n	800cc56 <ucdr_serialize_endian_array_char+0x2a>
 800cc42:	68a8      	ldr	r0, [r5, #8]
 800cc44:	f00c fd3b 	bl	80196be <memcpy>
 800cc48:	68ab      	ldr	r3, [r5, #8]
 800cc4a:	6928      	ldr	r0, [r5, #16]
 800cc4c:	4423      	add	r3, r4
 800cc4e:	4420      	add	r0, r4
 800cc50:	1b36      	subs	r6, r6, r4
 800cc52:	60ab      	str	r3, [r5, #8]
 800cc54:	6128      	str	r0, [r5, #16]
 800cc56:	4631      	mov	r1, r6
 800cc58:	2201      	movs	r2, #1
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f002 f960 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800cc60:	1bb9      	subs	r1, r7, r6
 800cc62:	4441      	add	r1, r8
 800cc64:	4604      	mov	r4, r0
 800cc66:	4602      	mov	r2, r0
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d1ea      	bne.n	800cc42 <ucdr_serialize_endian_array_char+0x16>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	7da8      	ldrb	r0, [r5, #22]
 800cc70:	756b      	strb	r3, [r5, #21]
 800cc72:	4058      	eors	r0, r3
 800cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc78:	463a      	mov	r2, r7
 800cc7a:	68a8      	ldr	r0, [r5, #8]
 800cc7c:	4641      	mov	r1, r8
 800cc7e:	f00c fd1e 	bl	80196be <memcpy>
 800cc82:	68aa      	ldr	r2, [r5, #8]
 800cc84:	692b      	ldr	r3, [r5, #16]
 800cc86:	443a      	add	r2, r7
 800cc88:	443b      	add	r3, r7
 800cc8a:	60aa      	str	r2, [r5, #8]
 800cc8c:	612b      	str	r3, [r5, #16]
 800cc8e:	e7ed      	b.n	800cc6c <ucdr_serialize_endian_array_char+0x40>

0800cc90 <ucdr_deserialize_endian_array_char>:
 800cc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc94:	4619      	mov	r1, r3
 800cc96:	461f      	mov	r7, r3
 800cc98:	4605      	mov	r5, r0
 800cc9a:	4690      	mov	r8, r2
 800cc9c:	f002 f8b8 	bl	800ee10 <ucdr_check_buffer_available_for>
 800cca0:	b9e0      	cbnz	r0, 800ccdc <ucdr_deserialize_endian_array_char+0x4c>
 800cca2:	463e      	mov	r6, r7
 800cca4:	e009      	b.n	800ccba <ucdr_deserialize_endian_array_char+0x2a>
 800cca6:	68a9      	ldr	r1, [r5, #8]
 800cca8:	f00c fd09 	bl	80196be <memcpy>
 800ccac:	68ab      	ldr	r3, [r5, #8]
 800ccae:	6928      	ldr	r0, [r5, #16]
 800ccb0:	4423      	add	r3, r4
 800ccb2:	4420      	add	r0, r4
 800ccb4:	1b36      	subs	r6, r6, r4
 800ccb6:	60ab      	str	r3, [r5, #8]
 800ccb8:	6128      	str	r0, [r5, #16]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f002 f92e 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	1bb8      	subs	r0, r7, r6
 800ccc8:	4440      	add	r0, r8
 800ccca:	4622      	mov	r2, r4
 800cccc:	2c00      	cmp	r4, #0
 800ccce:	d1ea      	bne.n	800cca6 <ucdr_deserialize_endian_array_char+0x16>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	7da8      	ldrb	r0, [r5, #22]
 800ccd4:	756b      	strb	r3, [r5, #21]
 800ccd6:	4058      	eors	r0, r3
 800ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccdc:	463a      	mov	r2, r7
 800ccde:	68a9      	ldr	r1, [r5, #8]
 800cce0:	4640      	mov	r0, r8
 800cce2:	f00c fcec 	bl	80196be <memcpy>
 800cce6:	68aa      	ldr	r2, [r5, #8]
 800cce8:	692b      	ldr	r3, [r5, #16]
 800ccea:	443a      	add	r2, r7
 800ccec:	443b      	add	r3, r7
 800ccee:	60aa      	str	r2, [r5, #8]
 800ccf0:	612b      	str	r3, [r5, #16]
 800ccf2:	e7ed      	b.n	800ccd0 <ucdr_deserialize_endian_array_char+0x40>

0800ccf4 <ucdr_serialize_array_uint8_t>:
 800ccf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf8:	4688      	mov	r8, r1
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	4617      	mov	r7, r2
 800ccfe:	4605      	mov	r5, r0
 800cd00:	f002 f886 	bl	800ee10 <ucdr_check_buffer_available_for>
 800cd04:	b9e0      	cbnz	r0, 800cd40 <ucdr_serialize_array_uint8_t+0x4c>
 800cd06:	463e      	mov	r6, r7
 800cd08:	e009      	b.n	800cd1e <ucdr_serialize_array_uint8_t+0x2a>
 800cd0a:	68a8      	ldr	r0, [r5, #8]
 800cd0c:	f00c fcd7 	bl	80196be <memcpy>
 800cd10:	68aa      	ldr	r2, [r5, #8]
 800cd12:	692b      	ldr	r3, [r5, #16]
 800cd14:	4422      	add	r2, r4
 800cd16:	4423      	add	r3, r4
 800cd18:	1b36      	subs	r6, r6, r4
 800cd1a:	60aa      	str	r2, [r5, #8]
 800cd1c:	612b      	str	r3, [r5, #16]
 800cd1e:	4631      	mov	r1, r6
 800cd20:	2201      	movs	r2, #1
 800cd22:	4628      	mov	r0, r5
 800cd24:	f002 f8fc 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800cd28:	1bb9      	subs	r1, r7, r6
 800cd2a:	4441      	add	r1, r8
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	4602      	mov	r2, r0
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d1ea      	bne.n	800cd0a <ucdr_serialize_array_uint8_t+0x16>
 800cd34:	2301      	movs	r3, #1
 800cd36:	7da8      	ldrb	r0, [r5, #22]
 800cd38:	756b      	strb	r3, [r5, #21]
 800cd3a:	4058      	eors	r0, r3
 800cd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd40:	463a      	mov	r2, r7
 800cd42:	68a8      	ldr	r0, [r5, #8]
 800cd44:	4641      	mov	r1, r8
 800cd46:	f00c fcba 	bl	80196be <memcpy>
 800cd4a:	68aa      	ldr	r2, [r5, #8]
 800cd4c:	692b      	ldr	r3, [r5, #16]
 800cd4e:	443a      	add	r2, r7
 800cd50:	443b      	add	r3, r7
 800cd52:	60aa      	str	r2, [r5, #8]
 800cd54:	612b      	str	r3, [r5, #16]
 800cd56:	e7ed      	b.n	800cd34 <ucdr_serialize_array_uint8_t+0x40>

0800cd58 <ucdr_serialize_endian_array_uint8_t>:
 800cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	461f      	mov	r7, r3
 800cd60:	4605      	mov	r5, r0
 800cd62:	4690      	mov	r8, r2
 800cd64:	f002 f854 	bl	800ee10 <ucdr_check_buffer_available_for>
 800cd68:	b9e0      	cbnz	r0, 800cda4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800cd6a:	463e      	mov	r6, r7
 800cd6c:	e009      	b.n	800cd82 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800cd6e:	68a8      	ldr	r0, [r5, #8]
 800cd70:	f00c fca5 	bl	80196be <memcpy>
 800cd74:	68ab      	ldr	r3, [r5, #8]
 800cd76:	6928      	ldr	r0, [r5, #16]
 800cd78:	4423      	add	r3, r4
 800cd7a:	4420      	add	r0, r4
 800cd7c:	1b36      	subs	r6, r6, r4
 800cd7e:	60ab      	str	r3, [r5, #8]
 800cd80:	6128      	str	r0, [r5, #16]
 800cd82:	4631      	mov	r1, r6
 800cd84:	2201      	movs	r2, #1
 800cd86:	4628      	mov	r0, r5
 800cd88:	f002 f8ca 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800cd8c:	1bb9      	subs	r1, r7, r6
 800cd8e:	4441      	add	r1, r8
 800cd90:	4604      	mov	r4, r0
 800cd92:	4602      	mov	r2, r0
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d1ea      	bne.n	800cd6e <ucdr_serialize_endian_array_uint8_t+0x16>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	7da8      	ldrb	r0, [r5, #22]
 800cd9c:	756b      	strb	r3, [r5, #21]
 800cd9e:	4058      	eors	r0, r3
 800cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda4:	463a      	mov	r2, r7
 800cda6:	68a8      	ldr	r0, [r5, #8]
 800cda8:	4641      	mov	r1, r8
 800cdaa:	f00c fc88 	bl	80196be <memcpy>
 800cdae:	68aa      	ldr	r2, [r5, #8]
 800cdb0:	692b      	ldr	r3, [r5, #16]
 800cdb2:	443a      	add	r2, r7
 800cdb4:	443b      	add	r3, r7
 800cdb6:	60aa      	str	r2, [r5, #8]
 800cdb8:	612b      	str	r3, [r5, #16]
 800cdba:	e7ed      	b.n	800cd98 <ucdr_serialize_endian_array_uint8_t+0x40>

0800cdbc <ucdr_deserialize_array_uint8_t>:
 800cdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc0:	4688      	mov	r8, r1
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	4617      	mov	r7, r2
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	f002 f822 	bl	800ee10 <ucdr_check_buffer_available_for>
 800cdcc:	b9e0      	cbnz	r0, 800ce08 <ucdr_deserialize_array_uint8_t+0x4c>
 800cdce:	463e      	mov	r6, r7
 800cdd0:	e009      	b.n	800cde6 <ucdr_deserialize_array_uint8_t+0x2a>
 800cdd2:	68a9      	ldr	r1, [r5, #8]
 800cdd4:	f00c fc73 	bl	80196be <memcpy>
 800cdd8:	68aa      	ldr	r2, [r5, #8]
 800cdda:	692b      	ldr	r3, [r5, #16]
 800cddc:	4422      	add	r2, r4
 800cdde:	4423      	add	r3, r4
 800cde0:	1b36      	subs	r6, r6, r4
 800cde2:	60aa      	str	r2, [r5, #8]
 800cde4:	612b      	str	r3, [r5, #16]
 800cde6:	2201      	movs	r2, #1
 800cde8:	4631      	mov	r1, r6
 800cdea:	4628      	mov	r0, r5
 800cdec:	f002 f898 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	1bb8      	subs	r0, r7, r6
 800cdf4:	4440      	add	r0, r8
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	2c00      	cmp	r4, #0
 800cdfa:	d1ea      	bne.n	800cdd2 <ucdr_deserialize_array_uint8_t+0x16>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	7da8      	ldrb	r0, [r5, #22]
 800ce00:	756b      	strb	r3, [r5, #21]
 800ce02:	4058      	eors	r0, r3
 800ce04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce08:	463a      	mov	r2, r7
 800ce0a:	68a9      	ldr	r1, [r5, #8]
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	f00c fc56 	bl	80196be <memcpy>
 800ce12:	68aa      	ldr	r2, [r5, #8]
 800ce14:	692b      	ldr	r3, [r5, #16]
 800ce16:	443a      	add	r2, r7
 800ce18:	443b      	add	r3, r7
 800ce1a:	60aa      	str	r2, [r5, #8]
 800ce1c:	612b      	str	r3, [r5, #16]
 800ce1e:	e7ed      	b.n	800cdfc <ucdr_deserialize_array_uint8_t+0x40>

0800ce20 <ucdr_deserialize_endian_array_uint8_t>:
 800ce20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce24:	4619      	mov	r1, r3
 800ce26:	461f      	mov	r7, r3
 800ce28:	4605      	mov	r5, r0
 800ce2a:	4690      	mov	r8, r2
 800ce2c:	f001 fff0 	bl	800ee10 <ucdr_check_buffer_available_for>
 800ce30:	b9e0      	cbnz	r0, 800ce6c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800ce32:	463e      	mov	r6, r7
 800ce34:	e009      	b.n	800ce4a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800ce36:	68a9      	ldr	r1, [r5, #8]
 800ce38:	f00c fc41 	bl	80196be <memcpy>
 800ce3c:	68ab      	ldr	r3, [r5, #8]
 800ce3e:	6928      	ldr	r0, [r5, #16]
 800ce40:	4423      	add	r3, r4
 800ce42:	4420      	add	r0, r4
 800ce44:	1b36      	subs	r6, r6, r4
 800ce46:	60ab      	str	r3, [r5, #8]
 800ce48:	6128      	str	r0, [r5, #16]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f002 f866 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800ce54:	4604      	mov	r4, r0
 800ce56:	1bb8      	subs	r0, r7, r6
 800ce58:	4440      	add	r0, r8
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	2c00      	cmp	r4, #0
 800ce5e:	d1ea      	bne.n	800ce36 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800ce60:	2301      	movs	r3, #1
 800ce62:	7da8      	ldrb	r0, [r5, #22]
 800ce64:	756b      	strb	r3, [r5, #21]
 800ce66:	4058      	eors	r0, r3
 800ce68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce6c:	463a      	mov	r2, r7
 800ce6e:	68a9      	ldr	r1, [r5, #8]
 800ce70:	4640      	mov	r0, r8
 800ce72:	f00c fc24 	bl	80196be <memcpy>
 800ce76:	68aa      	ldr	r2, [r5, #8]
 800ce78:	692b      	ldr	r3, [r5, #16]
 800ce7a:	443a      	add	r2, r7
 800ce7c:	443b      	add	r3, r7
 800ce7e:	60aa      	str	r2, [r5, #8]
 800ce80:	612b      	str	r3, [r5, #16]
 800ce82:	e7ed      	b.n	800ce60 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800ce84 <ucdr_serialize_array_uint16_t>:
 800ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce88:	460e      	mov	r6, r1
 800ce8a:	2102      	movs	r1, #2
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	4617      	mov	r7, r2
 800ce90:	f002 f81e 	bl	800eed0 <ucdr_buffer_alignment>
 800ce94:	4601      	mov	r1, r0
 800ce96:	4620      	mov	r0, r4
 800ce98:	7d65      	ldrb	r5, [r4, #21]
 800ce9a:	f002 f85d 	bl	800ef58 <ucdr_advance_buffer>
 800ce9e:	7d21      	ldrb	r1, [r4, #20]
 800cea0:	7565      	strb	r5, [r4, #21]
 800cea2:	2901      	cmp	r1, #1
 800cea4:	d011      	beq.n	800ceca <ucdr_serialize_array_uint16_t+0x46>
 800cea6:	b15f      	cbz	r7, 800cec0 <ucdr_serialize_array_uint16_t+0x3c>
 800cea8:	3e02      	subs	r6, #2
 800ceaa:	2500      	movs	r5, #0
 800ceac:	e000      	b.n	800ceb0 <ucdr_serialize_array_uint16_t+0x2c>
 800ceae:	7d21      	ldrb	r1, [r4, #20]
 800ceb0:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	3501      	adds	r5, #1
 800ceb8:	f000 fb6a 	bl	800d590 <ucdr_serialize_endian_uint16_t>
 800cebc:	42af      	cmp	r7, r5
 800cebe:	d1f6      	bne.n	800ceae <ucdr_serialize_array_uint16_t+0x2a>
 800cec0:	7da0      	ldrb	r0, [r4, #22]
 800cec2:	f080 0001 	eor.w	r0, r0, #1
 800cec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceca:	007f      	lsls	r7, r7, #1
 800cecc:	4639      	mov	r1, r7
 800cece:	4620      	mov	r0, r4
 800ced0:	f001 ff9e 	bl	800ee10 <ucdr_check_buffer_available_for>
 800ced4:	b9f8      	cbnz	r0, 800cf16 <ucdr_serialize_array_uint16_t+0x92>
 800ced6:	46b8      	mov	r8, r7
 800ced8:	e00a      	b.n	800cef0 <ucdr_serialize_array_uint16_t+0x6c>
 800ceda:	68a0      	ldr	r0, [r4, #8]
 800cedc:	f00c fbef 	bl	80196be <memcpy>
 800cee0:	68a2      	ldr	r2, [r4, #8]
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	442a      	add	r2, r5
 800cee6:	442b      	add	r3, r5
 800cee8:	eba8 0805 	sub.w	r8, r8, r5
 800ceec:	60a2      	str	r2, [r4, #8]
 800ceee:	6123      	str	r3, [r4, #16]
 800cef0:	4641      	mov	r1, r8
 800cef2:	2202      	movs	r2, #2
 800cef4:	4620      	mov	r0, r4
 800cef6:	f002 f813 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800cefa:	eba7 0108 	sub.w	r1, r7, r8
 800cefe:	4431      	add	r1, r6
 800cf00:	4605      	mov	r5, r0
 800cf02:	4602      	mov	r2, r0
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d1e8      	bne.n	800ceda <ucdr_serialize_array_uint16_t+0x56>
 800cf08:	7da0      	ldrb	r0, [r4, #22]
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	7563      	strb	r3, [r4, #21]
 800cf0e:	f080 0001 	eor.w	r0, r0, #1
 800cf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf16:	463a      	mov	r2, r7
 800cf18:	68a0      	ldr	r0, [r4, #8]
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	f00c fbcf 	bl	80196be <memcpy>
 800cf20:	68a2      	ldr	r2, [r4, #8]
 800cf22:	6923      	ldr	r3, [r4, #16]
 800cf24:	443a      	add	r2, r7
 800cf26:	441f      	add	r7, r3
 800cf28:	60a2      	str	r2, [r4, #8]
 800cf2a:	6127      	str	r7, [r4, #16]
 800cf2c:	e7ec      	b.n	800cf08 <ucdr_serialize_array_uint16_t+0x84>
 800cf2e:	bf00      	nop

0800cf30 <ucdr_deserialize_array_uint16_t>:
 800cf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf34:	460e      	mov	r6, r1
 800cf36:	2102      	movs	r1, #2
 800cf38:	4604      	mov	r4, r0
 800cf3a:	4617      	mov	r7, r2
 800cf3c:	f001 ffc8 	bl	800eed0 <ucdr_buffer_alignment>
 800cf40:	4601      	mov	r1, r0
 800cf42:	4620      	mov	r0, r4
 800cf44:	7d65      	ldrb	r5, [r4, #21]
 800cf46:	f002 f807 	bl	800ef58 <ucdr_advance_buffer>
 800cf4a:	7d21      	ldrb	r1, [r4, #20]
 800cf4c:	7565      	strb	r5, [r4, #21]
 800cf4e:	2901      	cmp	r1, #1
 800cf50:	d011      	beq.n	800cf76 <ucdr_deserialize_array_uint16_t+0x46>
 800cf52:	b15f      	cbz	r7, 800cf6c <ucdr_deserialize_array_uint16_t+0x3c>
 800cf54:	2500      	movs	r5, #0
 800cf56:	e000      	b.n	800cf5a <ucdr_deserialize_array_uint16_t+0x2a>
 800cf58:	7d21      	ldrb	r1, [r4, #20]
 800cf5a:	4632      	mov	r2, r6
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	3501      	adds	r5, #1
 800cf60:	f000 fc0a 	bl	800d778 <ucdr_deserialize_endian_uint16_t>
 800cf64:	42af      	cmp	r7, r5
 800cf66:	f106 0602 	add.w	r6, r6, #2
 800cf6a:	d1f5      	bne.n	800cf58 <ucdr_deserialize_array_uint16_t+0x28>
 800cf6c:	7da0      	ldrb	r0, [r4, #22]
 800cf6e:	f080 0001 	eor.w	r0, r0, #1
 800cf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf76:	007f      	lsls	r7, r7, #1
 800cf78:	4639      	mov	r1, r7
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f001 ff48 	bl	800ee10 <ucdr_check_buffer_available_for>
 800cf80:	b9f8      	cbnz	r0, 800cfc2 <ucdr_deserialize_array_uint16_t+0x92>
 800cf82:	46b8      	mov	r8, r7
 800cf84:	e00a      	b.n	800cf9c <ucdr_deserialize_array_uint16_t+0x6c>
 800cf86:	68a1      	ldr	r1, [r4, #8]
 800cf88:	f00c fb99 	bl	80196be <memcpy>
 800cf8c:	68a2      	ldr	r2, [r4, #8]
 800cf8e:	6923      	ldr	r3, [r4, #16]
 800cf90:	442a      	add	r2, r5
 800cf92:	442b      	add	r3, r5
 800cf94:	eba8 0805 	sub.w	r8, r8, r5
 800cf98:	60a2      	str	r2, [r4, #8]
 800cf9a:	6123      	str	r3, [r4, #16]
 800cf9c:	2202      	movs	r2, #2
 800cf9e:	4641      	mov	r1, r8
 800cfa0:	4620      	mov	r0, r4
 800cfa2:	f001 ffbd 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	eba7 0008 	sub.w	r0, r7, r8
 800cfac:	4430      	add	r0, r6
 800cfae:	462a      	mov	r2, r5
 800cfb0:	2d00      	cmp	r5, #0
 800cfb2:	d1e8      	bne.n	800cf86 <ucdr_deserialize_array_uint16_t+0x56>
 800cfb4:	7da0      	ldrb	r0, [r4, #22]
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	7563      	strb	r3, [r4, #21]
 800cfba:	f080 0001 	eor.w	r0, r0, #1
 800cfbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc2:	463a      	mov	r2, r7
 800cfc4:	68a1      	ldr	r1, [r4, #8]
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f00c fb79 	bl	80196be <memcpy>
 800cfcc:	68a2      	ldr	r2, [r4, #8]
 800cfce:	6923      	ldr	r3, [r4, #16]
 800cfd0:	443a      	add	r2, r7
 800cfd2:	441f      	add	r7, r3
 800cfd4:	60a2      	str	r2, [r4, #8]
 800cfd6:	6127      	str	r7, [r4, #16]
 800cfd8:	e7ec      	b.n	800cfb4 <ucdr_deserialize_array_uint16_t+0x84>
 800cfda:	bf00      	nop

0800cfdc <ucdr_serialize_endian_array_int32_t>:
 800cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe0:	4688      	mov	r8, r1
 800cfe2:	2104      	movs	r1, #4
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	4616      	mov	r6, r2
 800cfe8:	461f      	mov	r7, r3
 800cfea:	f001 ff71 	bl	800eed0 <ucdr_buffer_alignment>
 800cfee:	4601      	mov	r1, r0
 800cff0:	4620      	mov	r0, r4
 800cff2:	7d65      	ldrb	r5, [r4, #21]
 800cff4:	f001 ffb0 	bl	800ef58 <ucdr_advance_buffer>
 800cff8:	f1b8 0f01 	cmp.w	r8, #1
 800cffc:	7565      	strb	r5, [r4, #21]
 800cffe:	d010      	beq.n	800d022 <ucdr_serialize_endian_array_int32_t+0x46>
 800d000:	b157      	cbz	r7, 800d018 <ucdr_serialize_endian_array_int32_t+0x3c>
 800d002:	3e04      	subs	r6, #4
 800d004:	2500      	movs	r5, #0
 800d006:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800d00a:	4641      	mov	r1, r8
 800d00c:	4620      	mov	r0, r4
 800d00e:	3501      	adds	r5, #1
 800d010:	f001 f8da 	bl	800e1c8 <ucdr_serialize_endian_int32_t>
 800d014:	42af      	cmp	r7, r5
 800d016:	d1f6      	bne.n	800d006 <ucdr_serialize_endian_array_int32_t+0x2a>
 800d018:	7da0      	ldrb	r0, [r4, #22]
 800d01a:	f080 0001 	eor.w	r0, r0, #1
 800d01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d022:	00bf      	lsls	r7, r7, #2
 800d024:	4639      	mov	r1, r7
 800d026:	4620      	mov	r0, r4
 800d028:	f001 fef2 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d02c:	b9f8      	cbnz	r0, 800d06e <ucdr_serialize_endian_array_int32_t+0x92>
 800d02e:	46b8      	mov	r8, r7
 800d030:	e00a      	b.n	800d048 <ucdr_serialize_endian_array_int32_t+0x6c>
 800d032:	68a0      	ldr	r0, [r4, #8]
 800d034:	f00c fb43 	bl	80196be <memcpy>
 800d038:	68a2      	ldr	r2, [r4, #8]
 800d03a:	6923      	ldr	r3, [r4, #16]
 800d03c:	442a      	add	r2, r5
 800d03e:	442b      	add	r3, r5
 800d040:	eba8 0805 	sub.w	r8, r8, r5
 800d044:	60a2      	str	r2, [r4, #8]
 800d046:	6123      	str	r3, [r4, #16]
 800d048:	4641      	mov	r1, r8
 800d04a:	2204      	movs	r2, #4
 800d04c:	4620      	mov	r0, r4
 800d04e:	f001 ff67 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800d052:	eba7 0108 	sub.w	r1, r7, r8
 800d056:	4431      	add	r1, r6
 800d058:	4605      	mov	r5, r0
 800d05a:	4602      	mov	r2, r0
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d1e8      	bne.n	800d032 <ucdr_serialize_endian_array_int32_t+0x56>
 800d060:	7da0      	ldrb	r0, [r4, #22]
 800d062:	2304      	movs	r3, #4
 800d064:	7563      	strb	r3, [r4, #21]
 800d066:	f080 0001 	eor.w	r0, r0, #1
 800d06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06e:	463a      	mov	r2, r7
 800d070:	68a0      	ldr	r0, [r4, #8]
 800d072:	4631      	mov	r1, r6
 800d074:	f00c fb23 	bl	80196be <memcpy>
 800d078:	68a2      	ldr	r2, [r4, #8]
 800d07a:	6923      	ldr	r3, [r4, #16]
 800d07c:	443a      	add	r2, r7
 800d07e:	441f      	add	r7, r3
 800d080:	60a2      	str	r2, [r4, #8]
 800d082:	6127      	str	r7, [r4, #16]
 800d084:	e7ec      	b.n	800d060 <ucdr_serialize_endian_array_int32_t+0x84>
 800d086:	bf00      	nop

0800d088 <ucdr_deserialize_endian_array_int32_t>:
 800d088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08c:	4688      	mov	r8, r1
 800d08e:	2104      	movs	r1, #4
 800d090:	4605      	mov	r5, r0
 800d092:	4614      	mov	r4, r2
 800d094:	461f      	mov	r7, r3
 800d096:	f001 ff1b 	bl	800eed0 <ucdr_buffer_alignment>
 800d09a:	4601      	mov	r1, r0
 800d09c:	4628      	mov	r0, r5
 800d09e:	7d6e      	ldrb	r6, [r5, #21]
 800d0a0:	f001 ff5a 	bl	800ef58 <ucdr_advance_buffer>
 800d0a4:	f1b8 0f01 	cmp.w	r8, #1
 800d0a8:	756e      	strb	r6, [r5, #21]
 800d0aa:	d010      	beq.n	800d0ce <ucdr_deserialize_endian_array_int32_t+0x46>
 800d0ac:	2600      	movs	r6, #0
 800d0ae:	b14f      	cbz	r7, 800d0c4 <ucdr_deserialize_endian_array_int32_t+0x3c>
 800d0b0:	4622      	mov	r2, r4
 800d0b2:	4641      	mov	r1, r8
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	3601      	adds	r6, #1
 800d0b8:	f001 f9ae 	bl	800e418 <ucdr_deserialize_endian_int32_t>
 800d0bc:	42b7      	cmp	r7, r6
 800d0be:	f104 0404 	add.w	r4, r4, #4
 800d0c2:	d1f5      	bne.n	800d0b0 <ucdr_deserialize_endian_array_int32_t+0x28>
 800d0c4:	7da8      	ldrb	r0, [r5, #22]
 800d0c6:	f080 0001 	eor.w	r0, r0, #1
 800d0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ce:	00bf      	lsls	r7, r7, #2
 800d0d0:	4639      	mov	r1, r7
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f001 fe9c 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d0d8:	b9f8      	cbnz	r0, 800d11a <ucdr_deserialize_endian_array_int32_t+0x92>
 800d0da:	46b8      	mov	r8, r7
 800d0dc:	e00a      	b.n	800d0f4 <ucdr_deserialize_endian_array_int32_t+0x6c>
 800d0de:	68a9      	ldr	r1, [r5, #8]
 800d0e0:	f00c faed 	bl	80196be <memcpy>
 800d0e4:	68aa      	ldr	r2, [r5, #8]
 800d0e6:	692b      	ldr	r3, [r5, #16]
 800d0e8:	4432      	add	r2, r6
 800d0ea:	4433      	add	r3, r6
 800d0ec:	eba8 0806 	sub.w	r8, r8, r6
 800d0f0:	60aa      	str	r2, [r5, #8]
 800d0f2:	612b      	str	r3, [r5, #16]
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	4641      	mov	r1, r8
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f001 ff11 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800d0fe:	4606      	mov	r6, r0
 800d100:	eba7 0008 	sub.w	r0, r7, r8
 800d104:	4420      	add	r0, r4
 800d106:	4632      	mov	r2, r6
 800d108:	2e00      	cmp	r6, #0
 800d10a:	d1e8      	bne.n	800d0de <ucdr_deserialize_endian_array_int32_t+0x56>
 800d10c:	7da8      	ldrb	r0, [r5, #22]
 800d10e:	2304      	movs	r3, #4
 800d110:	756b      	strb	r3, [r5, #21]
 800d112:	f080 0001 	eor.w	r0, r0, #1
 800d116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11a:	463a      	mov	r2, r7
 800d11c:	68a9      	ldr	r1, [r5, #8]
 800d11e:	4620      	mov	r0, r4
 800d120:	f00c facd 	bl	80196be <memcpy>
 800d124:	68aa      	ldr	r2, [r5, #8]
 800d126:	692b      	ldr	r3, [r5, #16]
 800d128:	443a      	add	r2, r7
 800d12a:	441f      	add	r7, r3
 800d12c:	60aa      	str	r2, [r5, #8]
 800d12e:	612f      	str	r7, [r5, #16]
 800d130:	e7ec      	b.n	800d10c <ucdr_deserialize_endian_array_int32_t+0x84>
 800d132:	bf00      	nop

0800d134 <ucdr_serialize_endian_array_float>:
 800d134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d138:	4688      	mov	r8, r1
 800d13a:	2104      	movs	r1, #4
 800d13c:	4604      	mov	r4, r0
 800d13e:	4616      	mov	r6, r2
 800d140:	461f      	mov	r7, r3
 800d142:	f001 fec5 	bl	800eed0 <ucdr_buffer_alignment>
 800d146:	4601      	mov	r1, r0
 800d148:	4620      	mov	r0, r4
 800d14a:	7d65      	ldrb	r5, [r4, #21]
 800d14c:	f001 ff04 	bl	800ef58 <ucdr_advance_buffer>
 800d150:	f1b8 0f01 	cmp.w	r8, #1
 800d154:	7565      	strb	r5, [r4, #21]
 800d156:	d00f      	beq.n	800d178 <ucdr_serialize_endian_array_float+0x44>
 800d158:	2500      	movs	r5, #0
 800d15a:	b147      	cbz	r7, 800d16e <ucdr_serialize_endian_array_float+0x3a>
 800d15c:	ecb6 0a01 	vldmia	r6!, {s0}
 800d160:	4641      	mov	r1, r8
 800d162:	4620      	mov	r0, r4
 800d164:	3501      	adds	r5, #1
 800d166:	f001 f9ed 	bl	800e544 <ucdr_serialize_endian_float>
 800d16a:	42af      	cmp	r7, r5
 800d16c:	d1f6      	bne.n	800d15c <ucdr_serialize_endian_array_float+0x28>
 800d16e:	7da0      	ldrb	r0, [r4, #22]
 800d170:	f080 0001 	eor.w	r0, r0, #1
 800d174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d178:	00bf      	lsls	r7, r7, #2
 800d17a:	4639      	mov	r1, r7
 800d17c:	4620      	mov	r0, r4
 800d17e:	f001 fe47 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d182:	b9f8      	cbnz	r0, 800d1c4 <ucdr_serialize_endian_array_float+0x90>
 800d184:	46b8      	mov	r8, r7
 800d186:	e00a      	b.n	800d19e <ucdr_serialize_endian_array_float+0x6a>
 800d188:	68a0      	ldr	r0, [r4, #8]
 800d18a:	f00c fa98 	bl	80196be <memcpy>
 800d18e:	68a2      	ldr	r2, [r4, #8]
 800d190:	6923      	ldr	r3, [r4, #16]
 800d192:	442a      	add	r2, r5
 800d194:	442b      	add	r3, r5
 800d196:	eba8 0805 	sub.w	r8, r8, r5
 800d19a:	60a2      	str	r2, [r4, #8]
 800d19c:	6123      	str	r3, [r4, #16]
 800d19e:	4641      	mov	r1, r8
 800d1a0:	2204      	movs	r2, #4
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f001 febc 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800d1a8:	eba7 0108 	sub.w	r1, r7, r8
 800d1ac:	4431      	add	r1, r6
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d1e8      	bne.n	800d188 <ucdr_serialize_endian_array_float+0x54>
 800d1b6:	7da0      	ldrb	r0, [r4, #22]
 800d1b8:	2304      	movs	r3, #4
 800d1ba:	7563      	strb	r3, [r4, #21]
 800d1bc:	f080 0001 	eor.w	r0, r0, #1
 800d1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c4:	463a      	mov	r2, r7
 800d1c6:	68a0      	ldr	r0, [r4, #8]
 800d1c8:	4631      	mov	r1, r6
 800d1ca:	f00c fa78 	bl	80196be <memcpy>
 800d1ce:	68a2      	ldr	r2, [r4, #8]
 800d1d0:	6923      	ldr	r3, [r4, #16]
 800d1d2:	443a      	add	r2, r7
 800d1d4:	441f      	add	r7, r3
 800d1d6:	60a2      	str	r2, [r4, #8]
 800d1d8:	6127      	str	r7, [r4, #16]
 800d1da:	e7ec      	b.n	800d1b6 <ucdr_serialize_endian_array_float+0x82>

0800d1dc <ucdr_deserialize_endian_array_float>:
 800d1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e0:	4688      	mov	r8, r1
 800d1e2:	2104      	movs	r1, #4
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	4614      	mov	r4, r2
 800d1e8:	461f      	mov	r7, r3
 800d1ea:	f001 fe71 	bl	800eed0 <ucdr_buffer_alignment>
 800d1ee:	4601      	mov	r1, r0
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	7d6e      	ldrb	r6, [r5, #21]
 800d1f4:	f001 feb0 	bl	800ef58 <ucdr_advance_buffer>
 800d1f8:	f1b8 0f01 	cmp.w	r8, #1
 800d1fc:	756e      	strb	r6, [r5, #21]
 800d1fe:	d010      	beq.n	800d222 <ucdr_deserialize_endian_array_float+0x46>
 800d200:	2600      	movs	r6, #0
 800d202:	b14f      	cbz	r7, 800d218 <ucdr_deserialize_endian_array_float+0x3c>
 800d204:	4622      	mov	r2, r4
 800d206:	4641      	mov	r1, r8
 800d208:	4628      	mov	r0, r5
 800d20a:	3601      	adds	r6, #1
 800d20c:	f001 fa34 	bl	800e678 <ucdr_deserialize_endian_float>
 800d210:	42b7      	cmp	r7, r6
 800d212:	f104 0404 	add.w	r4, r4, #4
 800d216:	d1f5      	bne.n	800d204 <ucdr_deserialize_endian_array_float+0x28>
 800d218:	7da8      	ldrb	r0, [r5, #22]
 800d21a:	f080 0001 	eor.w	r0, r0, #1
 800d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d222:	00bf      	lsls	r7, r7, #2
 800d224:	4639      	mov	r1, r7
 800d226:	4628      	mov	r0, r5
 800d228:	f001 fdf2 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d22c:	b9f8      	cbnz	r0, 800d26e <ucdr_deserialize_endian_array_float+0x92>
 800d22e:	46b8      	mov	r8, r7
 800d230:	e00a      	b.n	800d248 <ucdr_deserialize_endian_array_float+0x6c>
 800d232:	68a9      	ldr	r1, [r5, #8]
 800d234:	f00c fa43 	bl	80196be <memcpy>
 800d238:	68aa      	ldr	r2, [r5, #8]
 800d23a:	692b      	ldr	r3, [r5, #16]
 800d23c:	4432      	add	r2, r6
 800d23e:	4433      	add	r3, r6
 800d240:	eba8 0806 	sub.w	r8, r8, r6
 800d244:	60aa      	str	r2, [r5, #8]
 800d246:	612b      	str	r3, [r5, #16]
 800d248:	2204      	movs	r2, #4
 800d24a:	4641      	mov	r1, r8
 800d24c:	4628      	mov	r0, r5
 800d24e:	f001 fe67 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800d252:	4606      	mov	r6, r0
 800d254:	eba7 0008 	sub.w	r0, r7, r8
 800d258:	4420      	add	r0, r4
 800d25a:	4632      	mov	r2, r6
 800d25c:	2e00      	cmp	r6, #0
 800d25e:	d1e8      	bne.n	800d232 <ucdr_deserialize_endian_array_float+0x56>
 800d260:	7da8      	ldrb	r0, [r5, #22]
 800d262:	2304      	movs	r3, #4
 800d264:	756b      	strb	r3, [r5, #21]
 800d266:	f080 0001 	eor.w	r0, r0, #1
 800d26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d26e:	463a      	mov	r2, r7
 800d270:	68a9      	ldr	r1, [r5, #8]
 800d272:	4620      	mov	r0, r4
 800d274:	f00c fa23 	bl	80196be <memcpy>
 800d278:	68aa      	ldr	r2, [r5, #8]
 800d27a:	692b      	ldr	r3, [r5, #16]
 800d27c:	443a      	add	r2, r7
 800d27e:	441f      	add	r7, r3
 800d280:	60aa      	str	r2, [r5, #8]
 800d282:	612f      	str	r7, [r5, #16]
 800d284:	e7ec      	b.n	800d260 <ucdr_deserialize_endian_array_float+0x84>
 800d286:	bf00      	nop

0800d288 <ucdr_serialize_array_double>:
 800d288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d28c:	460e      	mov	r6, r1
 800d28e:	2108      	movs	r1, #8
 800d290:	4604      	mov	r4, r0
 800d292:	4617      	mov	r7, r2
 800d294:	f001 fe1c 	bl	800eed0 <ucdr_buffer_alignment>
 800d298:	4601      	mov	r1, r0
 800d29a:	4620      	mov	r0, r4
 800d29c:	7d65      	ldrb	r5, [r4, #21]
 800d29e:	f001 fe5b 	bl	800ef58 <ucdr_advance_buffer>
 800d2a2:	7d21      	ldrb	r1, [r4, #20]
 800d2a4:	7565      	strb	r5, [r4, #21]
 800d2a6:	2901      	cmp	r1, #1
 800d2a8:	d010      	beq.n	800d2cc <ucdr_serialize_array_double+0x44>
 800d2aa:	b157      	cbz	r7, 800d2c2 <ucdr_serialize_array_double+0x3a>
 800d2ac:	2500      	movs	r5, #0
 800d2ae:	e000      	b.n	800d2b2 <ucdr_serialize_array_double+0x2a>
 800d2b0:	7d21      	ldrb	r1, [r4, #20]
 800d2b2:	ecb6 0b02 	vldmia	r6!, {d0}
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	3501      	adds	r5, #1
 800d2ba:	f001 fb43 	bl	800e944 <ucdr_serialize_endian_double>
 800d2be:	42af      	cmp	r7, r5
 800d2c0:	d1f6      	bne.n	800d2b0 <ucdr_serialize_array_double+0x28>
 800d2c2:	7da0      	ldrb	r0, [r4, #22]
 800d2c4:	f080 0001 	eor.w	r0, r0, #1
 800d2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2cc:	00ff      	lsls	r7, r7, #3
 800d2ce:	4639      	mov	r1, r7
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f001 fd9d 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d2d6:	b9f8      	cbnz	r0, 800d318 <ucdr_serialize_array_double+0x90>
 800d2d8:	46b8      	mov	r8, r7
 800d2da:	e00a      	b.n	800d2f2 <ucdr_serialize_array_double+0x6a>
 800d2dc:	68a0      	ldr	r0, [r4, #8]
 800d2de:	f00c f9ee 	bl	80196be <memcpy>
 800d2e2:	68a2      	ldr	r2, [r4, #8]
 800d2e4:	6923      	ldr	r3, [r4, #16]
 800d2e6:	442a      	add	r2, r5
 800d2e8:	442b      	add	r3, r5
 800d2ea:	eba8 0805 	sub.w	r8, r8, r5
 800d2ee:	60a2      	str	r2, [r4, #8]
 800d2f0:	6123      	str	r3, [r4, #16]
 800d2f2:	4641      	mov	r1, r8
 800d2f4:	2208      	movs	r2, #8
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f001 fe12 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800d2fc:	eba7 0108 	sub.w	r1, r7, r8
 800d300:	4431      	add	r1, r6
 800d302:	4605      	mov	r5, r0
 800d304:	4602      	mov	r2, r0
 800d306:	2800      	cmp	r0, #0
 800d308:	d1e8      	bne.n	800d2dc <ucdr_serialize_array_double+0x54>
 800d30a:	7da0      	ldrb	r0, [r4, #22]
 800d30c:	2308      	movs	r3, #8
 800d30e:	7563      	strb	r3, [r4, #21]
 800d310:	f080 0001 	eor.w	r0, r0, #1
 800d314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d318:	463a      	mov	r2, r7
 800d31a:	68a0      	ldr	r0, [r4, #8]
 800d31c:	4631      	mov	r1, r6
 800d31e:	f00c f9ce 	bl	80196be <memcpy>
 800d322:	68a2      	ldr	r2, [r4, #8]
 800d324:	6923      	ldr	r3, [r4, #16]
 800d326:	443a      	add	r2, r7
 800d328:	441f      	add	r7, r3
 800d32a:	60a2      	str	r2, [r4, #8]
 800d32c:	6127      	str	r7, [r4, #16]
 800d32e:	e7ec      	b.n	800d30a <ucdr_serialize_array_double+0x82>

0800d330 <ucdr_deserialize_array_double>:
 800d330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d334:	460e      	mov	r6, r1
 800d336:	2108      	movs	r1, #8
 800d338:	4604      	mov	r4, r0
 800d33a:	4617      	mov	r7, r2
 800d33c:	f001 fdc8 	bl	800eed0 <ucdr_buffer_alignment>
 800d340:	4601      	mov	r1, r0
 800d342:	4620      	mov	r0, r4
 800d344:	7d65      	ldrb	r5, [r4, #21]
 800d346:	f001 fe07 	bl	800ef58 <ucdr_advance_buffer>
 800d34a:	7d21      	ldrb	r1, [r4, #20]
 800d34c:	7565      	strb	r5, [r4, #21]
 800d34e:	2901      	cmp	r1, #1
 800d350:	d011      	beq.n	800d376 <ucdr_deserialize_array_double+0x46>
 800d352:	b15f      	cbz	r7, 800d36c <ucdr_deserialize_array_double+0x3c>
 800d354:	2500      	movs	r5, #0
 800d356:	e000      	b.n	800d35a <ucdr_deserialize_array_double+0x2a>
 800d358:	7d21      	ldrb	r1, [r4, #20]
 800d35a:	4632      	mov	r2, r6
 800d35c:	4620      	mov	r0, r4
 800d35e:	3501      	adds	r5, #1
 800d360:	f001 fc88 	bl	800ec74 <ucdr_deserialize_endian_double>
 800d364:	42af      	cmp	r7, r5
 800d366:	f106 0608 	add.w	r6, r6, #8
 800d36a:	d1f5      	bne.n	800d358 <ucdr_deserialize_array_double+0x28>
 800d36c:	7da0      	ldrb	r0, [r4, #22]
 800d36e:	f080 0001 	eor.w	r0, r0, #1
 800d372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d376:	00ff      	lsls	r7, r7, #3
 800d378:	4639      	mov	r1, r7
 800d37a:	4620      	mov	r0, r4
 800d37c:	f001 fd48 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d380:	b9f8      	cbnz	r0, 800d3c2 <ucdr_deserialize_array_double+0x92>
 800d382:	46b8      	mov	r8, r7
 800d384:	e00a      	b.n	800d39c <ucdr_deserialize_array_double+0x6c>
 800d386:	68a1      	ldr	r1, [r4, #8]
 800d388:	f00c f999 	bl	80196be <memcpy>
 800d38c:	68a2      	ldr	r2, [r4, #8]
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	442a      	add	r2, r5
 800d392:	442b      	add	r3, r5
 800d394:	eba8 0805 	sub.w	r8, r8, r5
 800d398:	60a2      	str	r2, [r4, #8]
 800d39a:	6123      	str	r3, [r4, #16]
 800d39c:	2208      	movs	r2, #8
 800d39e:	4641      	mov	r1, r8
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f001 fdbd 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	eba7 0008 	sub.w	r0, r7, r8
 800d3ac:	4430      	add	r0, r6
 800d3ae:	462a      	mov	r2, r5
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	d1e8      	bne.n	800d386 <ucdr_deserialize_array_double+0x56>
 800d3b4:	7da0      	ldrb	r0, [r4, #22]
 800d3b6:	2308      	movs	r3, #8
 800d3b8:	7563      	strb	r3, [r4, #21]
 800d3ba:	f080 0001 	eor.w	r0, r0, #1
 800d3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c2:	463a      	mov	r2, r7
 800d3c4:	68a1      	ldr	r1, [r4, #8]
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f00c f979 	bl	80196be <memcpy>
 800d3cc:	68a2      	ldr	r2, [r4, #8]
 800d3ce:	6923      	ldr	r3, [r4, #16]
 800d3d0:	443a      	add	r2, r7
 800d3d2:	441f      	add	r7, r3
 800d3d4:	60a2      	str	r2, [r4, #8]
 800d3d6:	6127      	str	r7, [r4, #16]
 800d3d8:	e7ec      	b.n	800d3b4 <ucdr_deserialize_array_double+0x84>
 800d3da:	bf00      	nop

0800d3dc <ucdr_serialize_bool>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	460d      	mov	r5, r1
 800d3e0:	2101      	movs	r1, #1
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	f001 fd20 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d3e8:	b148      	cbz	r0, 800d3fe <ucdr_serialize_bool+0x22>
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	701d      	strb	r5, [r3, #0]
 800d3ee:	68a2      	ldr	r2, [r4, #8]
 800d3f0:	6923      	ldr	r3, [r4, #16]
 800d3f2:	2101      	movs	r1, #1
 800d3f4:	440a      	add	r2, r1
 800d3f6:	440b      	add	r3, r1
 800d3f8:	60a2      	str	r2, [r4, #8]
 800d3fa:	6123      	str	r3, [r4, #16]
 800d3fc:	7561      	strb	r1, [r4, #21]
 800d3fe:	7da0      	ldrb	r0, [r4, #22]
 800d400:	f080 0001 	eor.w	r0, r0, #1
 800d404:	bd38      	pop	{r3, r4, r5, pc}
 800d406:	bf00      	nop

0800d408 <ucdr_deserialize_bool>:
 800d408:	b538      	push	{r3, r4, r5, lr}
 800d40a:	460d      	mov	r5, r1
 800d40c:	2101      	movs	r1, #1
 800d40e:	4604      	mov	r4, r0
 800d410:	f001 fd0a 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d414:	b160      	cbz	r0, 800d430 <ucdr_deserialize_bool+0x28>
 800d416:	68a2      	ldr	r2, [r4, #8]
 800d418:	6923      	ldr	r3, [r4, #16]
 800d41a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d41e:	3900      	subs	r1, #0
 800d420:	bf18      	it	ne
 800d422:	2101      	movne	r1, #1
 800d424:	7029      	strb	r1, [r5, #0]
 800d426:	3301      	adds	r3, #1
 800d428:	2101      	movs	r1, #1
 800d42a:	60a2      	str	r2, [r4, #8]
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	7561      	strb	r1, [r4, #21]
 800d430:	7da0      	ldrb	r0, [r4, #22]
 800d432:	f080 0001 	eor.w	r0, r0, #1
 800d436:	bd38      	pop	{r3, r4, r5, pc}

0800d438 <ucdr_serialize_uint8_t>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	460d      	mov	r5, r1
 800d43c:	2101      	movs	r1, #1
 800d43e:	4604      	mov	r4, r0
 800d440:	f001 fcf2 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d444:	b148      	cbz	r0, 800d45a <ucdr_serialize_uint8_t+0x22>
 800d446:	68a3      	ldr	r3, [r4, #8]
 800d448:	701d      	strb	r5, [r3, #0]
 800d44a:	68a2      	ldr	r2, [r4, #8]
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	2101      	movs	r1, #1
 800d450:	440a      	add	r2, r1
 800d452:	440b      	add	r3, r1
 800d454:	60a2      	str	r2, [r4, #8]
 800d456:	6123      	str	r3, [r4, #16]
 800d458:	7561      	strb	r1, [r4, #21]
 800d45a:	7da0      	ldrb	r0, [r4, #22]
 800d45c:	f080 0001 	eor.w	r0, r0, #1
 800d460:	bd38      	pop	{r3, r4, r5, pc}
 800d462:	bf00      	nop

0800d464 <ucdr_deserialize_uint8_t>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	460d      	mov	r5, r1
 800d468:	2101      	movs	r1, #1
 800d46a:	4604      	mov	r4, r0
 800d46c:	f001 fcdc 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d470:	b150      	cbz	r0, 800d488 <ucdr_deserialize_uint8_t+0x24>
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	702b      	strb	r3, [r5, #0]
 800d478:	68a2      	ldr	r2, [r4, #8]
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	2101      	movs	r1, #1
 800d47e:	440a      	add	r2, r1
 800d480:	440b      	add	r3, r1
 800d482:	60a2      	str	r2, [r4, #8]
 800d484:	6123      	str	r3, [r4, #16]
 800d486:	7561      	strb	r1, [r4, #21]
 800d488:	7da0      	ldrb	r0, [r4, #22]
 800d48a:	f080 0001 	eor.w	r0, r0, #1
 800d48e:	bd38      	pop	{r3, r4, r5, pc}

0800d490 <ucdr_serialize_uint16_t>:
 800d490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	460b      	mov	r3, r1
 800d498:	2102      	movs	r1, #2
 800d49a:	4604      	mov	r4, r0
 800d49c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d4a0:	f001 fd16 	bl	800eed0 <ucdr_buffer_alignment>
 800d4a4:	4601      	mov	r1, r0
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	7d67      	ldrb	r7, [r4, #21]
 800d4aa:	f001 fd55 	bl	800ef58 <ucdr_advance_buffer>
 800d4ae:	2102      	movs	r1, #2
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f001 fcad 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d4b6:	bb78      	cbnz	r0, 800d518 <ucdr_serialize_uint16_t+0x88>
 800d4b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d4bc:	42ab      	cmp	r3, r5
 800d4be:	d926      	bls.n	800d50e <ucdr_serialize_uint16_t+0x7e>
 800d4c0:	1b5e      	subs	r6, r3, r5
 800d4c2:	60a3      	str	r3, [r4, #8]
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	f1c6 0802 	rsb	r8, r6, #2
 800d4ca:	4433      	add	r3, r6
 800d4cc:	6123      	str	r3, [r4, #16]
 800d4ce:	4641      	mov	r1, r8
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f001 fca9 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d03b      	beq.n	800d552 <ucdr_serialize_uint16_t+0xc2>
 800d4da:	7d23      	ldrb	r3, [r4, #20]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d04a      	beq.n	800d576 <ucdr_serialize_uint16_t+0xe6>
 800d4e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4e4:	702b      	strb	r3, [r5, #0]
 800d4e6:	2e00      	cmp	r6, #0
 800d4e8:	d040      	beq.n	800d56c <ucdr_serialize_uint16_t+0xdc>
 800d4ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4ee:	706b      	strb	r3, [r5, #1]
 800d4f0:	6923      	ldr	r3, [r4, #16]
 800d4f2:	68a2      	ldr	r2, [r4, #8]
 800d4f4:	7da0      	ldrb	r0, [r4, #22]
 800d4f6:	3302      	adds	r3, #2
 800d4f8:	1b9e      	subs	r6, r3, r6
 800d4fa:	4442      	add	r2, r8
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	f080 0001 	eor.w	r0, r0, #1
 800d502:	60a2      	str	r2, [r4, #8]
 800d504:	6126      	str	r6, [r4, #16]
 800d506:	7563      	strb	r3, [r4, #21]
 800d508:	b002      	add	sp, #8
 800d50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d50e:	2102      	movs	r1, #2
 800d510:	4620      	mov	r0, r4
 800d512:	f001 fc89 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d516:	b190      	cbz	r0, 800d53e <ucdr_serialize_uint16_t+0xae>
 800d518:	7d23      	ldrb	r3, [r4, #20]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	68a3      	ldr	r3, [r4, #8]
 800d51e:	d014      	beq.n	800d54a <ucdr_serialize_uint16_t+0xba>
 800d520:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d524:	701a      	strb	r2, [r3, #0]
 800d526:	68a3      	ldr	r3, [r4, #8]
 800d528:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d52c:	705a      	strb	r2, [r3, #1]
 800d52e:	68a2      	ldr	r2, [r4, #8]
 800d530:	6923      	ldr	r3, [r4, #16]
 800d532:	3202      	adds	r2, #2
 800d534:	3302      	adds	r3, #2
 800d536:	2102      	movs	r1, #2
 800d538:	60a2      	str	r2, [r4, #8]
 800d53a:	6123      	str	r3, [r4, #16]
 800d53c:	7561      	strb	r1, [r4, #21]
 800d53e:	7da0      	ldrb	r0, [r4, #22]
 800d540:	f080 0001 	eor.w	r0, r0, #1
 800d544:	b002      	add	sp, #8
 800d546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d54e:	801a      	strh	r2, [r3, #0]
 800d550:	e7ed      	b.n	800d52e <ucdr_serialize_uint16_t+0x9e>
 800d552:	68a2      	ldr	r2, [r4, #8]
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	7da0      	ldrb	r0, [r4, #22]
 800d558:	7567      	strb	r7, [r4, #21]
 800d55a:	1b92      	subs	r2, r2, r6
 800d55c:	1b9b      	subs	r3, r3, r6
 800d55e:	f080 0001 	eor.w	r0, r0, #1
 800d562:	60a2      	str	r2, [r4, #8]
 800d564:	6123      	str	r3, [r4, #16]
 800d566:	b002      	add	sp, #8
 800d568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d56c:	68a3      	ldr	r3, [r4, #8]
 800d56e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d572:	701a      	strb	r2, [r3, #0]
 800d574:	e7bc      	b.n	800d4f0 <ucdr_serialize_uint16_t+0x60>
 800d576:	4628      	mov	r0, r5
 800d578:	f10d 0506 	add.w	r5, sp, #6
 800d57c:	4629      	mov	r1, r5
 800d57e:	4632      	mov	r2, r6
 800d580:	f00c f89d 	bl	80196be <memcpy>
 800d584:	68a0      	ldr	r0, [r4, #8]
 800d586:	4642      	mov	r2, r8
 800d588:	19a9      	adds	r1, r5, r6
 800d58a:	f00c f898 	bl	80196be <memcpy>
 800d58e:	e7af      	b.n	800d4f0 <ucdr_serialize_uint16_t+0x60>

0800d590 <ucdr_serialize_endian_uint16_t>:
 800d590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d594:	b083      	sub	sp, #12
 800d596:	460d      	mov	r5, r1
 800d598:	2102      	movs	r1, #2
 800d59a:	4604      	mov	r4, r0
 800d59c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d5a0:	f001 fc96 	bl	800eed0 <ucdr_buffer_alignment>
 800d5a4:	4601      	mov	r1, r0
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d5ac:	f001 fcd4 	bl	800ef58 <ucdr_advance_buffer>
 800d5b0:	2102      	movs	r1, #2
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f001 fc2c 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d5b8:	bb70      	cbnz	r0, 800d618 <ucdr_serialize_endian_uint16_t+0x88>
 800d5ba:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d5be:	42be      	cmp	r6, r7
 800d5c0:	d925      	bls.n	800d60e <ucdr_serialize_endian_uint16_t+0x7e>
 800d5c2:	6923      	ldr	r3, [r4, #16]
 800d5c4:	60a6      	str	r6, [r4, #8]
 800d5c6:	1bf6      	subs	r6, r6, r7
 800d5c8:	4433      	add	r3, r6
 800d5ca:	f1c6 0902 	rsb	r9, r6, #2
 800d5ce:	6123      	str	r3, [r4, #16]
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f001 fc28 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d039      	beq.n	800d650 <ucdr_serialize_endian_uint16_t+0xc0>
 800d5dc:	2d01      	cmp	r5, #1
 800d5de:	d04a      	beq.n	800d676 <ucdr_serialize_endian_uint16_t+0xe6>
 800d5e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5e4:	703b      	strb	r3, [r7, #0]
 800d5e6:	2e00      	cmp	r6, #0
 800d5e8:	d040      	beq.n	800d66c <ucdr_serialize_endian_uint16_t+0xdc>
 800d5ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d5ee:	707b      	strb	r3, [r7, #1]
 800d5f0:	6923      	ldr	r3, [r4, #16]
 800d5f2:	68a2      	ldr	r2, [r4, #8]
 800d5f4:	7da0      	ldrb	r0, [r4, #22]
 800d5f6:	3302      	adds	r3, #2
 800d5f8:	444a      	add	r2, r9
 800d5fa:	1b9b      	subs	r3, r3, r6
 800d5fc:	2102      	movs	r1, #2
 800d5fe:	f080 0001 	eor.w	r0, r0, #1
 800d602:	60a2      	str	r2, [r4, #8]
 800d604:	6123      	str	r3, [r4, #16]
 800d606:	7561      	strb	r1, [r4, #21]
 800d608:	b003      	add	sp, #12
 800d60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d60e:	2102      	movs	r1, #2
 800d610:	4620      	mov	r0, r4
 800d612:	f001 fc09 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d616:	b188      	cbz	r0, 800d63c <ucdr_serialize_endian_uint16_t+0xac>
 800d618:	2d01      	cmp	r5, #1
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	d014      	beq.n	800d648 <ucdr_serialize_endian_uint16_t+0xb8>
 800d61e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	68a3      	ldr	r3, [r4, #8]
 800d626:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d62a:	705a      	strb	r2, [r3, #1]
 800d62c:	68a2      	ldr	r2, [r4, #8]
 800d62e:	6923      	ldr	r3, [r4, #16]
 800d630:	3202      	adds	r2, #2
 800d632:	3302      	adds	r3, #2
 800d634:	2102      	movs	r1, #2
 800d636:	60a2      	str	r2, [r4, #8]
 800d638:	6123      	str	r3, [r4, #16]
 800d63a:	7561      	strb	r1, [r4, #21]
 800d63c:	7da0      	ldrb	r0, [r4, #22]
 800d63e:	f080 0001 	eor.w	r0, r0, #1
 800d642:	b003      	add	sp, #12
 800d644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d648:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d64c:	801a      	strh	r2, [r3, #0]
 800d64e:	e7ed      	b.n	800d62c <ucdr_serialize_endian_uint16_t+0x9c>
 800d650:	68a2      	ldr	r2, [r4, #8]
 800d652:	6923      	ldr	r3, [r4, #16]
 800d654:	7da0      	ldrb	r0, [r4, #22]
 800d656:	f884 8015 	strb.w	r8, [r4, #21]
 800d65a:	1b92      	subs	r2, r2, r6
 800d65c:	1b9b      	subs	r3, r3, r6
 800d65e:	f080 0001 	eor.w	r0, r0, #1
 800d662:	60a2      	str	r2, [r4, #8]
 800d664:	6123      	str	r3, [r4, #16]
 800d666:	b003      	add	sp, #12
 800d668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d66c:	68a3      	ldr	r3, [r4, #8]
 800d66e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d672:	701a      	strb	r2, [r3, #0]
 800d674:	e7bc      	b.n	800d5f0 <ucdr_serialize_endian_uint16_t+0x60>
 800d676:	f10d 0506 	add.w	r5, sp, #6
 800d67a:	4629      	mov	r1, r5
 800d67c:	4632      	mov	r2, r6
 800d67e:	4638      	mov	r0, r7
 800d680:	f00c f81d 	bl	80196be <memcpy>
 800d684:	68a0      	ldr	r0, [r4, #8]
 800d686:	464a      	mov	r2, r9
 800d688:	19a9      	adds	r1, r5, r6
 800d68a:	f00c f818 	bl	80196be <memcpy>
 800d68e:	e7af      	b.n	800d5f0 <ucdr_serialize_endian_uint16_t+0x60>

0800d690 <ucdr_deserialize_uint16_t>:
 800d690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d694:	460d      	mov	r5, r1
 800d696:	2102      	movs	r1, #2
 800d698:	4604      	mov	r4, r0
 800d69a:	f001 fc19 	bl	800eed0 <ucdr_buffer_alignment>
 800d69e:	4601      	mov	r1, r0
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d6a6:	f001 fc57 	bl	800ef58 <ucdr_advance_buffer>
 800d6aa:	2102      	movs	r1, #2
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f001 fbaf 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d6b2:	bb60      	cbnz	r0, 800d70e <ucdr_deserialize_uint16_t+0x7e>
 800d6b4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d6b8:	42be      	cmp	r6, r7
 800d6ba:	d923      	bls.n	800d704 <ucdr_deserialize_uint16_t+0x74>
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	60a6      	str	r6, [r4, #8]
 800d6c0:	1bf6      	subs	r6, r6, r7
 800d6c2:	4433      	add	r3, r6
 800d6c4:	f1c6 0902 	rsb	r9, r6, #2
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f001 fbab 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d034      	beq.n	800d740 <ucdr_deserialize_uint16_t+0xb0>
 800d6d6:	7d23      	ldrb	r3, [r4, #20]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d042      	beq.n	800d762 <ucdr_deserialize_uint16_t+0xd2>
 800d6dc:	787b      	ldrb	r3, [r7, #1]
 800d6de:	702b      	strb	r3, [r5, #0]
 800d6e0:	2e00      	cmp	r6, #0
 800d6e2:	d03a      	beq.n	800d75a <ucdr_deserialize_uint16_t+0xca>
 800d6e4:	783b      	ldrb	r3, [r7, #0]
 800d6e6:	706b      	strb	r3, [r5, #1]
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	68a2      	ldr	r2, [r4, #8]
 800d6ec:	7da0      	ldrb	r0, [r4, #22]
 800d6ee:	2102      	movs	r1, #2
 800d6f0:	3302      	adds	r3, #2
 800d6f2:	444a      	add	r2, r9
 800d6f4:	1b9b      	subs	r3, r3, r6
 800d6f6:	7561      	strb	r1, [r4, #21]
 800d6f8:	60a2      	str	r2, [r4, #8]
 800d6fa:	6123      	str	r3, [r4, #16]
 800d6fc:	f080 0001 	eor.w	r0, r0, #1
 800d700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d704:	2102      	movs	r1, #2
 800d706:	4620      	mov	r0, r4
 800d708:	f001 fb8e 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d70c:	b180      	cbz	r0, 800d730 <ucdr_deserialize_uint16_t+0xa0>
 800d70e:	7d23      	ldrb	r3, [r4, #20]
 800d710:	2b01      	cmp	r3, #1
 800d712:	68a3      	ldr	r3, [r4, #8]
 800d714:	d011      	beq.n	800d73a <ucdr_deserialize_uint16_t+0xaa>
 800d716:	785b      	ldrb	r3, [r3, #1]
 800d718:	702b      	strb	r3, [r5, #0]
 800d71a:	68a3      	ldr	r3, [r4, #8]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	706b      	strb	r3, [r5, #1]
 800d720:	68a2      	ldr	r2, [r4, #8]
 800d722:	6923      	ldr	r3, [r4, #16]
 800d724:	3202      	adds	r2, #2
 800d726:	3302      	adds	r3, #2
 800d728:	2102      	movs	r1, #2
 800d72a:	60a2      	str	r2, [r4, #8]
 800d72c:	6123      	str	r3, [r4, #16]
 800d72e:	7561      	strb	r1, [r4, #21]
 800d730:	7da0      	ldrb	r0, [r4, #22]
 800d732:	f080 0001 	eor.w	r0, r0, #1
 800d736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	802b      	strh	r3, [r5, #0]
 800d73e:	e7ef      	b.n	800d720 <ucdr_deserialize_uint16_t+0x90>
 800d740:	68a2      	ldr	r2, [r4, #8]
 800d742:	6923      	ldr	r3, [r4, #16]
 800d744:	7da0      	ldrb	r0, [r4, #22]
 800d746:	f884 8015 	strb.w	r8, [r4, #21]
 800d74a:	1b92      	subs	r2, r2, r6
 800d74c:	1b9b      	subs	r3, r3, r6
 800d74e:	60a2      	str	r2, [r4, #8]
 800d750:	6123      	str	r3, [r4, #16]
 800d752:	f080 0001 	eor.w	r0, r0, #1
 800d756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d75a:	68a3      	ldr	r3, [r4, #8]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	706b      	strb	r3, [r5, #1]
 800d760:	e7c2      	b.n	800d6e8 <ucdr_deserialize_uint16_t+0x58>
 800d762:	4639      	mov	r1, r7
 800d764:	4632      	mov	r2, r6
 800d766:	4628      	mov	r0, r5
 800d768:	f00b ffa9 	bl	80196be <memcpy>
 800d76c:	68a1      	ldr	r1, [r4, #8]
 800d76e:	464a      	mov	r2, r9
 800d770:	19a8      	adds	r0, r5, r6
 800d772:	f00b ffa4 	bl	80196be <memcpy>
 800d776:	e7b7      	b.n	800d6e8 <ucdr_deserialize_uint16_t+0x58>

0800d778 <ucdr_deserialize_endian_uint16_t>:
 800d778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d77c:	460e      	mov	r6, r1
 800d77e:	2102      	movs	r1, #2
 800d780:	4604      	mov	r4, r0
 800d782:	4615      	mov	r5, r2
 800d784:	f001 fba4 	bl	800eed0 <ucdr_buffer_alignment>
 800d788:	4601      	mov	r1, r0
 800d78a:	4620      	mov	r0, r4
 800d78c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d790:	f001 fbe2 	bl	800ef58 <ucdr_advance_buffer>
 800d794:	2102      	movs	r1, #2
 800d796:	4620      	mov	r0, r4
 800d798:	f001 fb3a 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d79c:	bb70      	cbnz	r0, 800d7fc <ucdr_deserialize_endian_uint16_t+0x84>
 800d79e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d7a2:	4547      	cmp	r7, r8
 800d7a4:	d925      	bls.n	800d7f2 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	60a7      	str	r7, [r4, #8]
 800d7aa:	eba7 0708 	sub.w	r7, r7, r8
 800d7ae:	443b      	add	r3, r7
 800d7b0:	f1c7 0a02 	rsb	sl, r7, #2
 800d7b4:	6123      	str	r3, [r4, #16]
 800d7b6:	4651      	mov	r1, sl
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f001 fb35 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d034      	beq.n	800d82c <ucdr_deserialize_endian_uint16_t+0xb4>
 800d7c2:	2e01      	cmp	r6, #1
 800d7c4:	d043      	beq.n	800d84e <ucdr_deserialize_endian_uint16_t+0xd6>
 800d7c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d7ca:	702b      	strb	r3, [r5, #0]
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	d03a      	beq.n	800d846 <ucdr_deserialize_endian_uint16_t+0xce>
 800d7d0:	f898 3000 	ldrb.w	r3, [r8]
 800d7d4:	706b      	strb	r3, [r5, #1]
 800d7d6:	6923      	ldr	r3, [r4, #16]
 800d7d8:	68a2      	ldr	r2, [r4, #8]
 800d7da:	7da0      	ldrb	r0, [r4, #22]
 800d7dc:	2102      	movs	r1, #2
 800d7de:	3302      	adds	r3, #2
 800d7e0:	4452      	add	r2, sl
 800d7e2:	1bdb      	subs	r3, r3, r7
 800d7e4:	7561      	strb	r1, [r4, #21]
 800d7e6:	60a2      	str	r2, [r4, #8]
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	f080 0001 	eor.w	r0, r0, #1
 800d7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7f2:	2102      	movs	r1, #2
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f001 fb17 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d7fa:	b178      	cbz	r0, 800d81c <ucdr_deserialize_endian_uint16_t+0xa4>
 800d7fc:	2e01      	cmp	r6, #1
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	d011      	beq.n	800d826 <ucdr_deserialize_endian_uint16_t+0xae>
 800d802:	785b      	ldrb	r3, [r3, #1]
 800d804:	702b      	strb	r3, [r5, #0]
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	706b      	strb	r3, [r5, #1]
 800d80c:	68a2      	ldr	r2, [r4, #8]
 800d80e:	6923      	ldr	r3, [r4, #16]
 800d810:	3202      	adds	r2, #2
 800d812:	3302      	adds	r3, #2
 800d814:	2102      	movs	r1, #2
 800d816:	60a2      	str	r2, [r4, #8]
 800d818:	6123      	str	r3, [r4, #16]
 800d81a:	7561      	strb	r1, [r4, #21]
 800d81c:	7da0      	ldrb	r0, [r4, #22]
 800d81e:	f080 0001 	eor.w	r0, r0, #1
 800d822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	802b      	strh	r3, [r5, #0]
 800d82a:	e7ef      	b.n	800d80c <ucdr_deserialize_endian_uint16_t+0x94>
 800d82c:	68a2      	ldr	r2, [r4, #8]
 800d82e:	6923      	ldr	r3, [r4, #16]
 800d830:	7da0      	ldrb	r0, [r4, #22]
 800d832:	f884 9015 	strb.w	r9, [r4, #21]
 800d836:	1bd2      	subs	r2, r2, r7
 800d838:	1bdb      	subs	r3, r3, r7
 800d83a:	60a2      	str	r2, [r4, #8]
 800d83c:	6123      	str	r3, [r4, #16]
 800d83e:	f080 0001 	eor.w	r0, r0, #1
 800d842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d846:	68a3      	ldr	r3, [r4, #8]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	706b      	strb	r3, [r5, #1]
 800d84c:	e7c3      	b.n	800d7d6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800d84e:	4641      	mov	r1, r8
 800d850:	463a      	mov	r2, r7
 800d852:	4628      	mov	r0, r5
 800d854:	f00b ff33 	bl	80196be <memcpy>
 800d858:	68a1      	ldr	r1, [r4, #8]
 800d85a:	4652      	mov	r2, sl
 800d85c:	19e8      	adds	r0, r5, r7
 800d85e:	f00b ff2e 	bl	80196be <memcpy>
 800d862:	e7b8      	b.n	800d7d6 <ucdr_deserialize_endian_uint16_t+0x5e>

0800d864 <ucdr_serialize_uint32_t>:
 800d864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d868:	b082      	sub	sp, #8
 800d86a:	4604      	mov	r4, r0
 800d86c:	9101      	str	r1, [sp, #4]
 800d86e:	2104      	movs	r1, #4
 800d870:	f001 fb2e 	bl	800eed0 <ucdr_buffer_alignment>
 800d874:	4601      	mov	r1, r0
 800d876:	4620      	mov	r0, r4
 800d878:	7d67      	ldrb	r7, [r4, #21]
 800d87a:	f001 fb6d 	bl	800ef58 <ucdr_advance_buffer>
 800d87e:	2104      	movs	r1, #4
 800d880:	4620      	mov	r0, r4
 800d882:	f001 fac5 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d886:	2800      	cmp	r0, #0
 800d888:	d139      	bne.n	800d8fe <ucdr_serialize_uint32_t+0x9a>
 800d88a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d88e:	42ab      	cmp	r3, r5
 800d890:	d930      	bls.n	800d8f4 <ucdr_serialize_uint32_t+0x90>
 800d892:	1b5e      	subs	r6, r3, r5
 800d894:	60a3      	str	r3, [r4, #8]
 800d896:	6923      	ldr	r3, [r4, #16]
 800d898:	f1c6 0804 	rsb	r8, r6, #4
 800d89c:	4433      	add	r3, r6
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	4641      	mov	r1, r8
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	f001 fac0 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d04c      	beq.n	800d946 <ucdr_serialize_uint32_t+0xe2>
 800d8ac:	7d23      	ldrb	r3, [r4, #20]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d063      	beq.n	800d97a <ucdr_serialize_uint32_t+0x116>
 800d8b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8b6:	702b      	strb	r3, [r5, #0]
 800d8b8:	2e00      	cmp	r6, #0
 800d8ba:	d051      	beq.n	800d960 <ucdr_serialize_uint32_t+0xfc>
 800d8bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8c0:	706b      	strb	r3, [r5, #1]
 800d8c2:	2e01      	cmp	r6, #1
 800d8c4:	d050      	beq.n	800d968 <ucdr_serialize_uint32_t+0x104>
 800d8c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8ca:	70ab      	strb	r3, [r5, #2]
 800d8cc:	2e02      	cmp	r6, #2
 800d8ce:	d04f      	beq.n	800d970 <ucdr_serialize_uint32_t+0x10c>
 800d8d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8d4:	70eb      	strb	r3, [r5, #3]
 800d8d6:	6923      	ldr	r3, [r4, #16]
 800d8d8:	68a2      	ldr	r2, [r4, #8]
 800d8da:	7da0      	ldrb	r0, [r4, #22]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	1b9e      	subs	r6, r3, r6
 800d8e0:	4442      	add	r2, r8
 800d8e2:	2304      	movs	r3, #4
 800d8e4:	f080 0001 	eor.w	r0, r0, #1
 800d8e8:	60a2      	str	r2, [r4, #8]
 800d8ea:	6126      	str	r6, [r4, #16]
 800d8ec:	7563      	strb	r3, [r4, #21]
 800d8ee:	b002      	add	sp, #8
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	2104      	movs	r1, #4
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f001 fa96 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d8fc:	b1d0      	cbz	r0, 800d934 <ucdr_serialize_uint32_t+0xd0>
 800d8fe:	7d23      	ldrb	r3, [r4, #20]
 800d900:	2b01      	cmp	r3, #1
 800d902:	68a3      	ldr	r3, [r4, #8]
 800d904:	d01c      	beq.n	800d940 <ucdr_serialize_uint32_t+0xdc>
 800d906:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d90a:	701a      	strb	r2, [r3, #0]
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d912:	705a      	strb	r2, [r3, #1]
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d91a:	709a      	strb	r2, [r3, #2]
 800d91c:	68a3      	ldr	r3, [r4, #8]
 800d91e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d922:	70da      	strb	r2, [r3, #3]
 800d924:	68a2      	ldr	r2, [r4, #8]
 800d926:	6923      	ldr	r3, [r4, #16]
 800d928:	3204      	adds	r2, #4
 800d92a:	3304      	adds	r3, #4
 800d92c:	2104      	movs	r1, #4
 800d92e:	60a2      	str	r2, [r4, #8]
 800d930:	6123      	str	r3, [r4, #16]
 800d932:	7561      	strb	r1, [r4, #21]
 800d934:	7da0      	ldrb	r0, [r4, #22]
 800d936:	f080 0001 	eor.w	r0, r0, #1
 800d93a:	b002      	add	sp, #8
 800d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d940:	9a01      	ldr	r2, [sp, #4]
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	e7ee      	b.n	800d924 <ucdr_serialize_uint32_t+0xc0>
 800d946:	68a2      	ldr	r2, [r4, #8]
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	7da0      	ldrb	r0, [r4, #22]
 800d94c:	7567      	strb	r7, [r4, #21]
 800d94e:	1b92      	subs	r2, r2, r6
 800d950:	1b9b      	subs	r3, r3, r6
 800d952:	f080 0001 	eor.w	r0, r0, #1
 800d956:	60a2      	str	r2, [r4, #8]
 800d958:	6123      	str	r3, [r4, #16]
 800d95a:	b002      	add	sp, #8
 800d95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d960:	68a3      	ldr	r3, [r4, #8]
 800d962:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d966:	701a      	strb	r2, [r3, #0]
 800d968:	68a3      	ldr	r3, [r4, #8]
 800d96a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d96e:	701a      	strb	r2, [r3, #0]
 800d970:	68a3      	ldr	r3, [r4, #8]
 800d972:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d976:	701a      	strb	r2, [r3, #0]
 800d978:	e7ad      	b.n	800d8d6 <ucdr_serialize_uint32_t+0x72>
 800d97a:	4628      	mov	r0, r5
 800d97c:	ad01      	add	r5, sp, #4
 800d97e:	4629      	mov	r1, r5
 800d980:	4632      	mov	r2, r6
 800d982:	f00b fe9c 	bl	80196be <memcpy>
 800d986:	68a0      	ldr	r0, [r4, #8]
 800d988:	4642      	mov	r2, r8
 800d98a:	19a9      	adds	r1, r5, r6
 800d98c:	f00b fe97 	bl	80196be <memcpy>
 800d990:	e7a1      	b.n	800d8d6 <ucdr_serialize_uint32_t+0x72>
 800d992:	bf00      	nop

0800d994 <ucdr_serialize_endian_uint32_t>:
 800d994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d998:	b083      	sub	sp, #12
 800d99a:	460d      	mov	r5, r1
 800d99c:	2104      	movs	r1, #4
 800d99e:	4604      	mov	r4, r0
 800d9a0:	9201      	str	r2, [sp, #4]
 800d9a2:	f001 fa95 	bl	800eed0 <ucdr_buffer_alignment>
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9ae:	f001 fad3 	bl	800ef58 <ucdr_advance_buffer>
 800d9b2:	2104      	movs	r1, #4
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f001 fa2b 	bl	800ee10 <ucdr_check_buffer_available_for>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d138      	bne.n	800da30 <ucdr_serialize_endian_uint32_t+0x9c>
 800d9be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d9c2:	42b7      	cmp	r7, r6
 800d9c4:	d92f      	bls.n	800da26 <ucdr_serialize_endian_uint32_t+0x92>
 800d9c6:	6923      	ldr	r3, [r4, #16]
 800d9c8:	60a7      	str	r7, [r4, #8]
 800d9ca:	1bbf      	subs	r7, r7, r6
 800d9cc:	443b      	add	r3, r7
 800d9ce:	f1c7 0904 	rsb	r9, r7, #4
 800d9d2:	6123      	str	r3, [r4, #16]
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f001 fa26 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d04a      	beq.n	800da76 <ucdr_serialize_endian_uint32_t+0xe2>
 800d9e0:	2d01      	cmp	r5, #1
 800d9e2:	d063      	beq.n	800daac <ucdr_serialize_endian_uint32_t+0x118>
 800d9e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d9e8:	7033      	strb	r3, [r6, #0]
 800d9ea:	2f00      	cmp	r7, #0
 800d9ec:	d051      	beq.n	800da92 <ucdr_serialize_endian_uint32_t+0xfe>
 800d9ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9f2:	7073      	strb	r3, [r6, #1]
 800d9f4:	2f01      	cmp	r7, #1
 800d9f6:	d050      	beq.n	800da9a <ucdr_serialize_endian_uint32_t+0x106>
 800d9f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9fc:	70b3      	strb	r3, [r6, #2]
 800d9fe:	2f02      	cmp	r7, #2
 800da00:	d04f      	beq.n	800daa2 <ucdr_serialize_endian_uint32_t+0x10e>
 800da02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da06:	70f3      	strb	r3, [r6, #3]
 800da08:	6923      	ldr	r3, [r4, #16]
 800da0a:	68a2      	ldr	r2, [r4, #8]
 800da0c:	7da0      	ldrb	r0, [r4, #22]
 800da0e:	3304      	adds	r3, #4
 800da10:	444a      	add	r2, r9
 800da12:	1bdb      	subs	r3, r3, r7
 800da14:	2104      	movs	r1, #4
 800da16:	f080 0001 	eor.w	r0, r0, #1
 800da1a:	60a2      	str	r2, [r4, #8]
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	7561      	strb	r1, [r4, #21]
 800da20:	b003      	add	sp, #12
 800da22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da26:	2104      	movs	r1, #4
 800da28:	4620      	mov	r0, r4
 800da2a:	f001 f9fd 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800da2e:	b1c8      	cbz	r0, 800da64 <ucdr_serialize_endian_uint32_t+0xd0>
 800da30:	2d01      	cmp	r5, #1
 800da32:	68a3      	ldr	r3, [r4, #8]
 800da34:	d01c      	beq.n	800da70 <ucdr_serialize_endian_uint32_t+0xdc>
 800da36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da3a:	701a      	strb	r2, [r3, #0]
 800da3c:	68a3      	ldr	r3, [r4, #8]
 800da3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da42:	705a      	strb	r2, [r3, #1]
 800da44:	68a3      	ldr	r3, [r4, #8]
 800da46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da4a:	709a      	strb	r2, [r3, #2]
 800da4c:	68a3      	ldr	r3, [r4, #8]
 800da4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da52:	70da      	strb	r2, [r3, #3]
 800da54:	68a2      	ldr	r2, [r4, #8]
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	3204      	adds	r2, #4
 800da5a:	3304      	adds	r3, #4
 800da5c:	2104      	movs	r1, #4
 800da5e:	60a2      	str	r2, [r4, #8]
 800da60:	6123      	str	r3, [r4, #16]
 800da62:	7561      	strb	r1, [r4, #21]
 800da64:	7da0      	ldrb	r0, [r4, #22]
 800da66:	f080 0001 	eor.w	r0, r0, #1
 800da6a:	b003      	add	sp, #12
 800da6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da70:	9a01      	ldr	r2, [sp, #4]
 800da72:	601a      	str	r2, [r3, #0]
 800da74:	e7ee      	b.n	800da54 <ucdr_serialize_endian_uint32_t+0xc0>
 800da76:	68a2      	ldr	r2, [r4, #8]
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	7da0      	ldrb	r0, [r4, #22]
 800da7c:	f884 8015 	strb.w	r8, [r4, #21]
 800da80:	1bd2      	subs	r2, r2, r7
 800da82:	1bdb      	subs	r3, r3, r7
 800da84:	f080 0001 	eor.w	r0, r0, #1
 800da88:	60a2      	str	r2, [r4, #8]
 800da8a:	6123      	str	r3, [r4, #16]
 800da8c:	b003      	add	sp, #12
 800da8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da92:	68a3      	ldr	r3, [r4, #8]
 800da94:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	68a3      	ldr	r3, [r4, #8]
 800da9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800daa0:	701a      	strb	r2, [r3, #0]
 800daa2:	68a3      	ldr	r3, [r4, #8]
 800daa4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800daa8:	701a      	strb	r2, [r3, #0]
 800daaa:	e7ad      	b.n	800da08 <ucdr_serialize_endian_uint32_t+0x74>
 800daac:	ad01      	add	r5, sp, #4
 800daae:	4629      	mov	r1, r5
 800dab0:	463a      	mov	r2, r7
 800dab2:	4630      	mov	r0, r6
 800dab4:	f00b fe03 	bl	80196be <memcpy>
 800dab8:	68a0      	ldr	r0, [r4, #8]
 800daba:	464a      	mov	r2, r9
 800dabc:	19e9      	adds	r1, r5, r7
 800dabe:	f00b fdfe 	bl	80196be <memcpy>
 800dac2:	e7a1      	b.n	800da08 <ucdr_serialize_endian_uint32_t+0x74>

0800dac4 <ucdr_deserialize_uint32_t>:
 800dac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac8:	460d      	mov	r5, r1
 800daca:	2104      	movs	r1, #4
 800dacc:	4604      	mov	r4, r0
 800dace:	f001 f9ff 	bl	800eed0 <ucdr_buffer_alignment>
 800dad2:	4601      	mov	r1, r0
 800dad4:	4620      	mov	r0, r4
 800dad6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dada:	f001 fa3d 	bl	800ef58 <ucdr_advance_buffer>
 800dade:	2104      	movs	r1, #4
 800dae0:	4620      	mov	r0, r4
 800dae2:	f001 f995 	bl	800ee10 <ucdr_check_buffer_available_for>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	d138      	bne.n	800db5c <ucdr_deserialize_uint32_t+0x98>
 800daea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800daee:	42b7      	cmp	r7, r6
 800daf0:	d92f      	bls.n	800db52 <ucdr_deserialize_uint32_t+0x8e>
 800daf2:	6923      	ldr	r3, [r4, #16]
 800daf4:	60a7      	str	r7, [r4, #8]
 800daf6:	1bbf      	subs	r7, r7, r6
 800daf8:	443b      	add	r3, r7
 800dafa:	f1c7 0904 	rsb	r9, r7, #4
 800dafe:	6123      	str	r3, [r4, #16]
 800db00:	4649      	mov	r1, r9
 800db02:	4620      	mov	r0, r4
 800db04:	f001 f990 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800db08:	2800      	cmp	r0, #0
 800db0a:	d046      	beq.n	800db9a <ucdr_deserialize_uint32_t+0xd6>
 800db0c:	7d23      	ldrb	r3, [r4, #20]
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d05c      	beq.n	800dbcc <ucdr_deserialize_uint32_t+0x108>
 800db12:	78f3      	ldrb	r3, [r6, #3]
 800db14:	702b      	strb	r3, [r5, #0]
 800db16:	2f00      	cmp	r7, #0
 800db18:	d04c      	beq.n	800dbb4 <ucdr_deserialize_uint32_t+0xf0>
 800db1a:	78b3      	ldrb	r3, [r6, #2]
 800db1c:	706b      	strb	r3, [r5, #1]
 800db1e:	2f01      	cmp	r7, #1
 800db20:	f105 0302 	add.w	r3, r5, #2
 800db24:	d04a      	beq.n	800dbbc <ucdr_deserialize_uint32_t+0xf8>
 800db26:	7873      	ldrb	r3, [r6, #1]
 800db28:	70ab      	strb	r3, [r5, #2]
 800db2a:	2f02      	cmp	r7, #2
 800db2c:	f105 0303 	add.w	r3, r5, #3
 800db30:	d048      	beq.n	800dbc4 <ucdr_deserialize_uint32_t+0x100>
 800db32:	7833      	ldrb	r3, [r6, #0]
 800db34:	70eb      	strb	r3, [r5, #3]
 800db36:	6923      	ldr	r3, [r4, #16]
 800db38:	68a2      	ldr	r2, [r4, #8]
 800db3a:	7da0      	ldrb	r0, [r4, #22]
 800db3c:	2104      	movs	r1, #4
 800db3e:	3304      	adds	r3, #4
 800db40:	444a      	add	r2, r9
 800db42:	1bdb      	subs	r3, r3, r7
 800db44:	7561      	strb	r1, [r4, #21]
 800db46:	60a2      	str	r2, [r4, #8]
 800db48:	6123      	str	r3, [r4, #16]
 800db4a:	f080 0001 	eor.w	r0, r0, #1
 800db4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db52:	2104      	movs	r1, #4
 800db54:	4620      	mov	r0, r4
 800db56:	f001 f967 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800db5a:	b1b0      	cbz	r0, 800db8a <ucdr_deserialize_uint32_t+0xc6>
 800db5c:	7d23      	ldrb	r3, [r4, #20]
 800db5e:	2b01      	cmp	r3, #1
 800db60:	68a3      	ldr	r3, [r4, #8]
 800db62:	d017      	beq.n	800db94 <ucdr_deserialize_uint32_t+0xd0>
 800db64:	78db      	ldrb	r3, [r3, #3]
 800db66:	702b      	strb	r3, [r5, #0]
 800db68:	68a3      	ldr	r3, [r4, #8]
 800db6a:	789b      	ldrb	r3, [r3, #2]
 800db6c:	706b      	strb	r3, [r5, #1]
 800db6e:	68a3      	ldr	r3, [r4, #8]
 800db70:	785b      	ldrb	r3, [r3, #1]
 800db72:	70ab      	strb	r3, [r5, #2]
 800db74:	68a3      	ldr	r3, [r4, #8]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	70eb      	strb	r3, [r5, #3]
 800db7a:	68a2      	ldr	r2, [r4, #8]
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	3204      	adds	r2, #4
 800db80:	3304      	adds	r3, #4
 800db82:	2104      	movs	r1, #4
 800db84:	60a2      	str	r2, [r4, #8]
 800db86:	6123      	str	r3, [r4, #16]
 800db88:	7561      	strb	r1, [r4, #21]
 800db8a:	7da0      	ldrb	r0, [r4, #22]
 800db8c:	f080 0001 	eor.w	r0, r0, #1
 800db90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	e7ef      	b.n	800db7a <ucdr_deserialize_uint32_t+0xb6>
 800db9a:	68a2      	ldr	r2, [r4, #8]
 800db9c:	6923      	ldr	r3, [r4, #16]
 800db9e:	7da0      	ldrb	r0, [r4, #22]
 800dba0:	f884 8015 	strb.w	r8, [r4, #21]
 800dba4:	1bd2      	subs	r2, r2, r7
 800dba6:	1bdb      	subs	r3, r3, r7
 800dba8:	60a2      	str	r2, [r4, #8]
 800dbaa:	6123      	str	r3, [r4, #16]
 800dbac:	f080 0001 	eor.w	r0, r0, #1
 800dbb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbb4:	68a3      	ldr	r3, [r4, #8]
 800dbb6:	789b      	ldrb	r3, [r3, #2]
 800dbb8:	706b      	strb	r3, [r5, #1]
 800dbba:	1cab      	adds	r3, r5, #2
 800dbbc:	68a2      	ldr	r2, [r4, #8]
 800dbbe:	7852      	ldrb	r2, [r2, #1]
 800dbc0:	f803 2b01 	strb.w	r2, [r3], #1
 800dbc4:	68a2      	ldr	r2, [r4, #8]
 800dbc6:	7812      	ldrb	r2, [r2, #0]
 800dbc8:	701a      	strb	r2, [r3, #0]
 800dbca:	e7b4      	b.n	800db36 <ucdr_deserialize_uint32_t+0x72>
 800dbcc:	4631      	mov	r1, r6
 800dbce:	463a      	mov	r2, r7
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f00b fd74 	bl	80196be <memcpy>
 800dbd6:	68a1      	ldr	r1, [r4, #8]
 800dbd8:	464a      	mov	r2, r9
 800dbda:	19e8      	adds	r0, r5, r7
 800dbdc:	f00b fd6f 	bl	80196be <memcpy>
 800dbe0:	e7a9      	b.n	800db36 <ucdr_deserialize_uint32_t+0x72>
 800dbe2:	bf00      	nop

0800dbe4 <ucdr_deserialize_endian_uint32_t>:
 800dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe8:	460e      	mov	r6, r1
 800dbea:	2104      	movs	r1, #4
 800dbec:	4604      	mov	r4, r0
 800dbee:	4615      	mov	r5, r2
 800dbf0:	f001 f96e 	bl	800eed0 <ucdr_buffer_alignment>
 800dbf4:	4601      	mov	r1, r0
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dbfc:	f001 f9ac 	bl	800ef58 <ucdr_advance_buffer>
 800dc00:	2104      	movs	r1, #4
 800dc02:	4620      	mov	r0, r4
 800dc04:	f001 f904 	bl	800ee10 <ucdr_check_buffer_available_for>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	d13c      	bne.n	800dc86 <ucdr_deserialize_endian_uint32_t+0xa2>
 800dc0c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800dc10:	42bb      	cmp	r3, r7
 800dc12:	d933      	bls.n	800dc7c <ucdr_deserialize_endian_uint32_t+0x98>
 800dc14:	eba3 0807 	sub.w	r8, r3, r7
 800dc18:	60a3      	str	r3, [r4, #8]
 800dc1a:	6923      	ldr	r3, [r4, #16]
 800dc1c:	f1c8 0a04 	rsb	sl, r8, #4
 800dc20:	4443      	add	r3, r8
 800dc22:	6123      	str	r3, [r4, #16]
 800dc24:	4651      	mov	r1, sl
 800dc26:	4620      	mov	r0, r4
 800dc28:	f001 f8fe 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d048      	beq.n	800dcc2 <ucdr_deserialize_endian_uint32_t+0xde>
 800dc30:	2e01      	cmp	r6, #1
 800dc32:	d061      	beq.n	800dcf8 <ucdr_deserialize_endian_uint32_t+0x114>
 800dc34:	78fb      	ldrb	r3, [r7, #3]
 800dc36:	702b      	strb	r3, [r5, #0]
 800dc38:	f1b8 0f00 	cmp.w	r8, #0
 800dc3c:	d050      	beq.n	800dce0 <ucdr_deserialize_endian_uint32_t+0xfc>
 800dc3e:	78bb      	ldrb	r3, [r7, #2]
 800dc40:	706b      	strb	r3, [r5, #1]
 800dc42:	f1b8 0f01 	cmp.w	r8, #1
 800dc46:	f105 0302 	add.w	r3, r5, #2
 800dc4a:	d04d      	beq.n	800dce8 <ucdr_deserialize_endian_uint32_t+0x104>
 800dc4c:	787b      	ldrb	r3, [r7, #1]
 800dc4e:	70ab      	strb	r3, [r5, #2]
 800dc50:	f1b8 0f02 	cmp.w	r8, #2
 800dc54:	f105 0303 	add.w	r3, r5, #3
 800dc58:	d04a      	beq.n	800dcf0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800dc5a:	783b      	ldrb	r3, [r7, #0]
 800dc5c:	70eb      	strb	r3, [r5, #3]
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	68a2      	ldr	r2, [r4, #8]
 800dc62:	7da0      	ldrb	r0, [r4, #22]
 800dc64:	2104      	movs	r1, #4
 800dc66:	3304      	adds	r3, #4
 800dc68:	4452      	add	r2, sl
 800dc6a:	eba3 0308 	sub.w	r3, r3, r8
 800dc6e:	7561      	strb	r1, [r4, #21]
 800dc70:	60a2      	str	r2, [r4, #8]
 800dc72:	6123      	str	r3, [r4, #16]
 800dc74:	f080 0001 	eor.w	r0, r0, #1
 800dc78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7c:	2104      	movs	r1, #4
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f001 f8d2 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800dc84:	b1a8      	cbz	r0, 800dcb2 <ucdr_deserialize_endian_uint32_t+0xce>
 800dc86:	2e01      	cmp	r6, #1
 800dc88:	68a3      	ldr	r3, [r4, #8]
 800dc8a:	d017      	beq.n	800dcbc <ucdr_deserialize_endian_uint32_t+0xd8>
 800dc8c:	78db      	ldrb	r3, [r3, #3]
 800dc8e:	702b      	strb	r3, [r5, #0]
 800dc90:	68a3      	ldr	r3, [r4, #8]
 800dc92:	789b      	ldrb	r3, [r3, #2]
 800dc94:	706b      	strb	r3, [r5, #1]
 800dc96:	68a3      	ldr	r3, [r4, #8]
 800dc98:	785b      	ldrb	r3, [r3, #1]
 800dc9a:	70ab      	strb	r3, [r5, #2]
 800dc9c:	68a3      	ldr	r3, [r4, #8]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	70eb      	strb	r3, [r5, #3]
 800dca2:	68a2      	ldr	r2, [r4, #8]
 800dca4:	6923      	ldr	r3, [r4, #16]
 800dca6:	3204      	adds	r2, #4
 800dca8:	3304      	adds	r3, #4
 800dcaa:	2104      	movs	r1, #4
 800dcac:	60a2      	str	r2, [r4, #8]
 800dcae:	6123      	str	r3, [r4, #16]
 800dcb0:	7561      	strb	r1, [r4, #21]
 800dcb2:	7da0      	ldrb	r0, [r4, #22]
 800dcb4:	f080 0001 	eor.w	r0, r0, #1
 800dcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	602b      	str	r3, [r5, #0]
 800dcc0:	e7ef      	b.n	800dca2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800dcc2:	68a2      	ldr	r2, [r4, #8]
 800dcc4:	6923      	ldr	r3, [r4, #16]
 800dcc6:	7da0      	ldrb	r0, [r4, #22]
 800dcc8:	f884 9015 	strb.w	r9, [r4, #21]
 800dccc:	eba2 0208 	sub.w	r2, r2, r8
 800dcd0:	eba3 0308 	sub.w	r3, r3, r8
 800dcd4:	60a2      	str	r2, [r4, #8]
 800dcd6:	6123      	str	r3, [r4, #16]
 800dcd8:	f080 0001 	eor.w	r0, r0, #1
 800dcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dce0:	68a3      	ldr	r3, [r4, #8]
 800dce2:	789b      	ldrb	r3, [r3, #2]
 800dce4:	706b      	strb	r3, [r5, #1]
 800dce6:	1cab      	adds	r3, r5, #2
 800dce8:	68a2      	ldr	r2, [r4, #8]
 800dcea:	7852      	ldrb	r2, [r2, #1]
 800dcec:	f803 2b01 	strb.w	r2, [r3], #1
 800dcf0:	68a2      	ldr	r2, [r4, #8]
 800dcf2:	7812      	ldrb	r2, [r2, #0]
 800dcf4:	701a      	strb	r2, [r3, #0]
 800dcf6:	e7b2      	b.n	800dc5e <ucdr_deserialize_endian_uint32_t+0x7a>
 800dcf8:	4639      	mov	r1, r7
 800dcfa:	4642      	mov	r2, r8
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f00b fcde 	bl	80196be <memcpy>
 800dd02:	68a1      	ldr	r1, [r4, #8]
 800dd04:	4652      	mov	r2, sl
 800dd06:	eb05 0008 	add.w	r0, r5, r8
 800dd0a:	f00b fcd8 	bl	80196be <memcpy>
 800dd0e:	e7a6      	b.n	800dc5e <ucdr_deserialize_endian_uint32_t+0x7a>

0800dd10 <ucdr_serialize_uint64_t>:
 800dd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd14:	2108      	movs	r1, #8
 800dd16:	b082      	sub	sp, #8
 800dd18:	4604      	mov	r4, r0
 800dd1a:	e9cd 2300 	strd	r2, r3, [sp]
 800dd1e:	f001 f8d7 	bl	800eed0 <ucdr_buffer_alignment>
 800dd22:	4601      	mov	r1, r0
 800dd24:	4620      	mov	r0, r4
 800dd26:	7d67      	ldrb	r7, [r4, #21]
 800dd28:	f001 f916 	bl	800ef58 <ucdr_advance_buffer>
 800dd2c:	2108      	movs	r1, #8
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f001 f86e 	bl	800ee10 <ucdr_check_buffer_available_for>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d14e      	bne.n	800ddd6 <ucdr_serialize_uint64_t+0xc6>
 800dd38:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dd3c:	42ab      	cmp	r3, r5
 800dd3e:	d945      	bls.n	800ddcc <ucdr_serialize_uint64_t+0xbc>
 800dd40:	1b5e      	subs	r6, r3, r5
 800dd42:	60a3      	str	r3, [r4, #8]
 800dd44:	6923      	ldr	r3, [r4, #16]
 800dd46:	f1c6 0808 	rsb	r8, r6, #8
 800dd4a:	4433      	add	r3, r6
 800dd4c:	6123      	str	r3, [r4, #16]
 800dd4e:	4641      	mov	r1, r8
 800dd50:	4620      	mov	r0, r4
 800dd52:	f001 f869 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d074      	beq.n	800de44 <ucdr_serialize_uint64_t+0x134>
 800dd5a:	7d23      	ldrb	r3, [r4, #20]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	f000 809b 	beq.w	800de98 <ucdr_serialize_uint64_t+0x188>
 800dd62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd66:	702b      	strb	r3, [r5, #0]
 800dd68:	2e00      	cmp	r6, #0
 800dd6a:	d078      	beq.n	800de5e <ucdr_serialize_uint64_t+0x14e>
 800dd6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dd70:	706b      	strb	r3, [r5, #1]
 800dd72:	2e01      	cmp	r6, #1
 800dd74:	d077      	beq.n	800de66 <ucdr_serialize_uint64_t+0x156>
 800dd76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dd7a:	70ab      	strb	r3, [r5, #2]
 800dd7c:	2e02      	cmp	r6, #2
 800dd7e:	d076      	beq.n	800de6e <ucdr_serialize_uint64_t+0x15e>
 800dd80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dd84:	70eb      	strb	r3, [r5, #3]
 800dd86:	2e03      	cmp	r6, #3
 800dd88:	d075      	beq.n	800de76 <ucdr_serialize_uint64_t+0x166>
 800dd8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dd8e:	712b      	strb	r3, [r5, #4]
 800dd90:	2e04      	cmp	r6, #4
 800dd92:	d074      	beq.n	800de7e <ucdr_serialize_uint64_t+0x16e>
 800dd94:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dd98:	716b      	strb	r3, [r5, #5]
 800dd9a:	2e05      	cmp	r6, #5
 800dd9c:	d073      	beq.n	800de86 <ucdr_serialize_uint64_t+0x176>
 800dd9e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dda2:	71ab      	strb	r3, [r5, #6]
 800dda4:	2e06      	cmp	r6, #6
 800dda6:	d072      	beq.n	800de8e <ucdr_serialize_uint64_t+0x17e>
 800dda8:	f89d 3000 	ldrb.w	r3, [sp]
 800ddac:	71eb      	strb	r3, [r5, #7]
 800ddae:	6923      	ldr	r3, [r4, #16]
 800ddb0:	68a2      	ldr	r2, [r4, #8]
 800ddb2:	7da0      	ldrb	r0, [r4, #22]
 800ddb4:	3308      	adds	r3, #8
 800ddb6:	1b9e      	subs	r6, r3, r6
 800ddb8:	4442      	add	r2, r8
 800ddba:	2308      	movs	r3, #8
 800ddbc:	f080 0001 	eor.w	r0, r0, #1
 800ddc0:	60a2      	str	r2, [r4, #8]
 800ddc2:	6126      	str	r6, [r4, #16]
 800ddc4:	7563      	strb	r3, [r4, #21]
 800ddc6:	b002      	add	sp, #8
 800ddc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddcc:	2108      	movs	r1, #8
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f001 f82a 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800ddd4:	b350      	cbz	r0, 800de2c <ucdr_serialize_uint64_t+0x11c>
 800ddd6:	7d23      	ldrb	r3, [r4, #20]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d02d      	beq.n	800de38 <ucdr_serialize_uint64_t+0x128>
 800dddc:	68a3      	ldr	r3, [r4, #8]
 800ddde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dde2:	701a      	strb	r2, [r3, #0]
 800dde4:	68a3      	ldr	r3, [r4, #8]
 800dde6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddea:	705a      	strb	r2, [r3, #1]
 800ddec:	68a3      	ldr	r3, [r4, #8]
 800ddee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddf2:	709a      	strb	r2, [r3, #2]
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddfa:	70da      	strb	r2, [r3, #3]
 800ddfc:	68a3      	ldr	r3, [r4, #8]
 800ddfe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800de02:	711a      	strb	r2, [r3, #4]
 800de04:	68a3      	ldr	r3, [r4, #8]
 800de06:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800de0a:	715a      	strb	r2, [r3, #5]
 800de0c:	68a3      	ldr	r3, [r4, #8]
 800de0e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800de12:	719a      	strb	r2, [r3, #6]
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	f89d 2000 	ldrb.w	r2, [sp]
 800de1a:	71da      	strb	r2, [r3, #7]
 800de1c:	68a2      	ldr	r2, [r4, #8]
 800de1e:	6923      	ldr	r3, [r4, #16]
 800de20:	3208      	adds	r2, #8
 800de22:	3308      	adds	r3, #8
 800de24:	2108      	movs	r1, #8
 800de26:	60a2      	str	r2, [r4, #8]
 800de28:	6123      	str	r3, [r4, #16]
 800de2a:	7561      	strb	r1, [r4, #21]
 800de2c:	7da0      	ldrb	r0, [r4, #22]
 800de2e:	f080 0001 	eor.w	r0, r0, #1
 800de32:	b002      	add	sp, #8
 800de34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de38:	466b      	mov	r3, sp
 800de3a:	cb03      	ldmia	r3!, {r0, r1}
 800de3c:	68a3      	ldr	r3, [r4, #8]
 800de3e:	6018      	str	r0, [r3, #0]
 800de40:	6059      	str	r1, [r3, #4]
 800de42:	e7eb      	b.n	800de1c <ucdr_serialize_uint64_t+0x10c>
 800de44:	68a2      	ldr	r2, [r4, #8]
 800de46:	6923      	ldr	r3, [r4, #16]
 800de48:	7da0      	ldrb	r0, [r4, #22]
 800de4a:	7567      	strb	r7, [r4, #21]
 800de4c:	1b92      	subs	r2, r2, r6
 800de4e:	1b9b      	subs	r3, r3, r6
 800de50:	f080 0001 	eor.w	r0, r0, #1
 800de54:	60a2      	str	r2, [r4, #8]
 800de56:	6123      	str	r3, [r4, #16]
 800de58:	b002      	add	sp, #8
 800de5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de5e:	68a3      	ldr	r3, [r4, #8]
 800de60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800de64:	701a      	strb	r2, [r3, #0]
 800de66:	68a3      	ldr	r3, [r4, #8]
 800de68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	68a3      	ldr	r3, [r4, #8]
 800de70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800de74:	701a      	strb	r2, [r3, #0]
 800de76:	68a3      	ldr	r3, [r4, #8]
 800de78:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800de7c:	701a      	strb	r2, [r3, #0]
 800de7e:	68a3      	ldr	r3, [r4, #8]
 800de80:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800de8c:	701a      	strb	r2, [r3, #0]
 800de8e:	68a3      	ldr	r3, [r4, #8]
 800de90:	f89d 2000 	ldrb.w	r2, [sp]
 800de94:	701a      	strb	r2, [r3, #0]
 800de96:	e78a      	b.n	800ddae <ucdr_serialize_uint64_t+0x9e>
 800de98:	4628      	mov	r0, r5
 800de9a:	466d      	mov	r5, sp
 800de9c:	4629      	mov	r1, r5
 800de9e:	4632      	mov	r2, r6
 800dea0:	f00b fc0d 	bl	80196be <memcpy>
 800dea4:	68a0      	ldr	r0, [r4, #8]
 800dea6:	4642      	mov	r2, r8
 800dea8:	19a9      	adds	r1, r5, r6
 800deaa:	f00b fc08 	bl	80196be <memcpy>
 800deae:	e77e      	b.n	800ddae <ucdr_serialize_uint64_t+0x9e>

0800deb0 <ucdr_serialize_int16_t>:
 800deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb4:	b082      	sub	sp, #8
 800deb6:	460b      	mov	r3, r1
 800deb8:	2102      	movs	r1, #2
 800deba:	4604      	mov	r4, r0
 800debc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dec0:	f001 f806 	bl	800eed0 <ucdr_buffer_alignment>
 800dec4:	4601      	mov	r1, r0
 800dec6:	4620      	mov	r0, r4
 800dec8:	7d67      	ldrb	r7, [r4, #21]
 800deca:	f001 f845 	bl	800ef58 <ucdr_advance_buffer>
 800dece:	2102      	movs	r1, #2
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 ff9d 	bl	800ee10 <ucdr_check_buffer_available_for>
 800ded6:	bb78      	cbnz	r0, 800df38 <ucdr_serialize_int16_t+0x88>
 800ded8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dedc:	42ab      	cmp	r3, r5
 800dede:	d926      	bls.n	800df2e <ucdr_serialize_int16_t+0x7e>
 800dee0:	1b5e      	subs	r6, r3, r5
 800dee2:	60a3      	str	r3, [r4, #8]
 800dee4:	6923      	ldr	r3, [r4, #16]
 800dee6:	f1c6 0802 	rsb	r8, r6, #2
 800deea:	4433      	add	r3, r6
 800deec:	6123      	str	r3, [r4, #16]
 800deee:	4641      	mov	r1, r8
 800def0:	4620      	mov	r0, r4
 800def2:	f000 ff99 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800def6:	2800      	cmp	r0, #0
 800def8:	d03b      	beq.n	800df72 <ucdr_serialize_int16_t+0xc2>
 800defa:	7d23      	ldrb	r3, [r4, #20]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d04a      	beq.n	800df96 <ucdr_serialize_int16_t+0xe6>
 800df00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800df04:	702b      	strb	r3, [r5, #0]
 800df06:	2e00      	cmp	r6, #0
 800df08:	d040      	beq.n	800df8c <ucdr_serialize_int16_t+0xdc>
 800df0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800df0e:	706b      	strb	r3, [r5, #1]
 800df10:	6923      	ldr	r3, [r4, #16]
 800df12:	68a2      	ldr	r2, [r4, #8]
 800df14:	7da0      	ldrb	r0, [r4, #22]
 800df16:	3302      	adds	r3, #2
 800df18:	1b9e      	subs	r6, r3, r6
 800df1a:	4442      	add	r2, r8
 800df1c:	2302      	movs	r3, #2
 800df1e:	f080 0001 	eor.w	r0, r0, #1
 800df22:	60a2      	str	r2, [r4, #8]
 800df24:	6126      	str	r6, [r4, #16]
 800df26:	7563      	strb	r3, [r4, #21]
 800df28:	b002      	add	sp, #8
 800df2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df2e:	2102      	movs	r1, #2
 800df30:	4620      	mov	r0, r4
 800df32:	f000 ff79 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800df36:	b190      	cbz	r0, 800df5e <ucdr_serialize_int16_t+0xae>
 800df38:	7d23      	ldrb	r3, [r4, #20]
 800df3a:	2b01      	cmp	r3, #1
 800df3c:	68a3      	ldr	r3, [r4, #8]
 800df3e:	d014      	beq.n	800df6a <ucdr_serialize_int16_t+0xba>
 800df40:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800df44:	701a      	strb	r2, [r3, #0]
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df4c:	705a      	strb	r2, [r3, #1]
 800df4e:	68a2      	ldr	r2, [r4, #8]
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	3202      	adds	r2, #2
 800df54:	3302      	adds	r3, #2
 800df56:	2102      	movs	r1, #2
 800df58:	60a2      	str	r2, [r4, #8]
 800df5a:	6123      	str	r3, [r4, #16]
 800df5c:	7561      	strb	r1, [r4, #21]
 800df5e:	7da0      	ldrb	r0, [r4, #22]
 800df60:	f080 0001 	eor.w	r0, r0, #1
 800df64:	b002      	add	sp, #8
 800df66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800df6e:	801a      	strh	r2, [r3, #0]
 800df70:	e7ed      	b.n	800df4e <ucdr_serialize_int16_t+0x9e>
 800df72:	68a2      	ldr	r2, [r4, #8]
 800df74:	6923      	ldr	r3, [r4, #16]
 800df76:	7da0      	ldrb	r0, [r4, #22]
 800df78:	7567      	strb	r7, [r4, #21]
 800df7a:	1b92      	subs	r2, r2, r6
 800df7c:	1b9b      	subs	r3, r3, r6
 800df7e:	f080 0001 	eor.w	r0, r0, #1
 800df82:	60a2      	str	r2, [r4, #8]
 800df84:	6123      	str	r3, [r4, #16]
 800df86:	b002      	add	sp, #8
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df8c:	68a3      	ldr	r3, [r4, #8]
 800df8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df92:	701a      	strb	r2, [r3, #0]
 800df94:	e7bc      	b.n	800df10 <ucdr_serialize_int16_t+0x60>
 800df96:	4628      	mov	r0, r5
 800df98:	f10d 0506 	add.w	r5, sp, #6
 800df9c:	4629      	mov	r1, r5
 800df9e:	4632      	mov	r2, r6
 800dfa0:	f00b fb8d 	bl	80196be <memcpy>
 800dfa4:	68a0      	ldr	r0, [r4, #8]
 800dfa6:	4642      	mov	r2, r8
 800dfa8:	19a9      	adds	r1, r5, r6
 800dfaa:	f00b fb88 	bl	80196be <memcpy>
 800dfae:	e7af      	b.n	800df10 <ucdr_serialize_int16_t+0x60>

0800dfb0 <ucdr_deserialize_int16_t>:
 800dfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb4:	460d      	mov	r5, r1
 800dfb6:	2102      	movs	r1, #2
 800dfb8:	4604      	mov	r4, r0
 800dfba:	f000 ff89 	bl	800eed0 <ucdr_buffer_alignment>
 800dfbe:	4601      	mov	r1, r0
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dfc6:	f000 ffc7 	bl	800ef58 <ucdr_advance_buffer>
 800dfca:	2102      	movs	r1, #2
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f000 ff1f 	bl	800ee10 <ucdr_check_buffer_available_for>
 800dfd2:	bb60      	cbnz	r0, 800e02e <ucdr_deserialize_int16_t+0x7e>
 800dfd4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dfd8:	42be      	cmp	r6, r7
 800dfda:	d923      	bls.n	800e024 <ucdr_deserialize_int16_t+0x74>
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	60a6      	str	r6, [r4, #8]
 800dfe0:	1bf6      	subs	r6, r6, r7
 800dfe2:	4433      	add	r3, r6
 800dfe4:	f1c6 0902 	rsb	r9, r6, #2
 800dfe8:	6123      	str	r3, [r4, #16]
 800dfea:	4649      	mov	r1, r9
 800dfec:	4620      	mov	r0, r4
 800dfee:	f000 ff1b 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800dff2:	2800      	cmp	r0, #0
 800dff4:	d034      	beq.n	800e060 <ucdr_deserialize_int16_t+0xb0>
 800dff6:	7d23      	ldrb	r3, [r4, #20]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d042      	beq.n	800e082 <ucdr_deserialize_int16_t+0xd2>
 800dffc:	787b      	ldrb	r3, [r7, #1]
 800dffe:	702b      	strb	r3, [r5, #0]
 800e000:	2e00      	cmp	r6, #0
 800e002:	d03a      	beq.n	800e07a <ucdr_deserialize_int16_t+0xca>
 800e004:	783b      	ldrb	r3, [r7, #0]
 800e006:	706b      	strb	r3, [r5, #1]
 800e008:	6923      	ldr	r3, [r4, #16]
 800e00a:	68a2      	ldr	r2, [r4, #8]
 800e00c:	7da0      	ldrb	r0, [r4, #22]
 800e00e:	2102      	movs	r1, #2
 800e010:	3302      	adds	r3, #2
 800e012:	444a      	add	r2, r9
 800e014:	1b9b      	subs	r3, r3, r6
 800e016:	7561      	strb	r1, [r4, #21]
 800e018:	60a2      	str	r2, [r4, #8]
 800e01a:	6123      	str	r3, [r4, #16]
 800e01c:	f080 0001 	eor.w	r0, r0, #1
 800e020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e024:	2102      	movs	r1, #2
 800e026:	4620      	mov	r0, r4
 800e028:	f000 fefe 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e02c:	b180      	cbz	r0, 800e050 <ucdr_deserialize_int16_t+0xa0>
 800e02e:	7d23      	ldrb	r3, [r4, #20]
 800e030:	2b01      	cmp	r3, #1
 800e032:	68a3      	ldr	r3, [r4, #8]
 800e034:	d011      	beq.n	800e05a <ucdr_deserialize_int16_t+0xaa>
 800e036:	785b      	ldrb	r3, [r3, #1]
 800e038:	702b      	strb	r3, [r5, #0]
 800e03a:	68a3      	ldr	r3, [r4, #8]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	706b      	strb	r3, [r5, #1]
 800e040:	68a2      	ldr	r2, [r4, #8]
 800e042:	6923      	ldr	r3, [r4, #16]
 800e044:	3202      	adds	r2, #2
 800e046:	3302      	adds	r3, #2
 800e048:	2102      	movs	r1, #2
 800e04a:	60a2      	str	r2, [r4, #8]
 800e04c:	6123      	str	r3, [r4, #16]
 800e04e:	7561      	strb	r1, [r4, #21]
 800e050:	7da0      	ldrb	r0, [r4, #22]
 800e052:	f080 0001 	eor.w	r0, r0, #1
 800e056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e05a:	881b      	ldrh	r3, [r3, #0]
 800e05c:	802b      	strh	r3, [r5, #0]
 800e05e:	e7ef      	b.n	800e040 <ucdr_deserialize_int16_t+0x90>
 800e060:	68a2      	ldr	r2, [r4, #8]
 800e062:	6923      	ldr	r3, [r4, #16]
 800e064:	7da0      	ldrb	r0, [r4, #22]
 800e066:	f884 8015 	strb.w	r8, [r4, #21]
 800e06a:	1b92      	subs	r2, r2, r6
 800e06c:	1b9b      	subs	r3, r3, r6
 800e06e:	60a2      	str	r2, [r4, #8]
 800e070:	6123      	str	r3, [r4, #16]
 800e072:	f080 0001 	eor.w	r0, r0, #1
 800e076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	706b      	strb	r3, [r5, #1]
 800e080:	e7c2      	b.n	800e008 <ucdr_deserialize_int16_t+0x58>
 800e082:	4639      	mov	r1, r7
 800e084:	4632      	mov	r2, r6
 800e086:	4628      	mov	r0, r5
 800e088:	f00b fb19 	bl	80196be <memcpy>
 800e08c:	68a1      	ldr	r1, [r4, #8]
 800e08e:	464a      	mov	r2, r9
 800e090:	19a8      	adds	r0, r5, r6
 800e092:	f00b fb14 	bl	80196be <memcpy>
 800e096:	e7b7      	b.n	800e008 <ucdr_deserialize_int16_t+0x58>

0800e098 <ucdr_serialize_int32_t>:
 800e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	4604      	mov	r4, r0
 800e0a0:	9101      	str	r1, [sp, #4]
 800e0a2:	2104      	movs	r1, #4
 800e0a4:	f000 ff14 	bl	800eed0 <ucdr_buffer_alignment>
 800e0a8:	4601      	mov	r1, r0
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	7d67      	ldrb	r7, [r4, #21]
 800e0ae:	f000 ff53 	bl	800ef58 <ucdr_advance_buffer>
 800e0b2:	2104      	movs	r1, #4
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 feab 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d139      	bne.n	800e132 <ucdr_serialize_int32_t+0x9a>
 800e0be:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e0c2:	42ab      	cmp	r3, r5
 800e0c4:	d930      	bls.n	800e128 <ucdr_serialize_int32_t+0x90>
 800e0c6:	1b5e      	subs	r6, r3, r5
 800e0c8:	60a3      	str	r3, [r4, #8]
 800e0ca:	6923      	ldr	r3, [r4, #16]
 800e0cc:	f1c6 0804 	rsb	r8, r6, #4
 800e0d0:	4433      	add	r3, r6
 800e0d2:	6123      	str	r3, [r4, #16]
 800e0d4:	4641      	mov	r1, r8
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 fea6 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d04c      	beq.n	800e17a <ucdr_serialize_int32_t+0xe2>
 800e0e0:	7d23      	ldrb	r3, [r4, #20]
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d063      	beq.n	800e1ae <ucdr_serialize_int32_t+0x116>
 800e0e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e0ea:	702b      	strb	r3, [r5, #0]
 800e0ec:	2e00      	cmp	r6, #0
 800e0ee:	d051      	beq.n	800e194 <ucdr_serialize_int32_t+0xfc>
 800e0f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e0f4:	706b      	strb	r3, [r5, #1]
 800e0f6:	2e01      	cmp	r6, #1
 800e0f8:	d050      	beq.n	800e19c <ucdr_serialize_int32_t+0x104>
 800e0fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e0fe:	70ab      	strb	r3, [r5, #2]
 800e100:	2e02      	cmp	r6, #2
 800e102:	d04f      	beq.n	800e1a4 <ucdr_serialize_int32_t+0x10c>
 800e104:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e108:	70eb      	strb	r3, [r5, #3]
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	68a2      	ldr	r2, [r4, #8]
 800e10e:	7da0      	ldrb	r0, [r4, #22]
 800e110:	3304      	adds	r3, #4
 800e112:	1b9e      	subs	r6, r3, r6
 800e114:	4442      	add	r2, r8
 800e116:	2304      	movs	r3, #4
 800e118:	f080 0001 	eor.w	r0, r0, #1
 800e11c:	60a2      	str	r2, [r4, #8]
 800e11e:	6126      	str	r6, [r4, #16]
 800e120:	7563      	strb	r3, [r4, #21]
 800e122:	b002      	add	sp, #8
 800e124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e128:	2104      	movs	r1, #4
 800e12a:	4620      	mov	r0, r4
 800e12c:	f000 fe7c 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e130:	b1d0      	cbz	r0, 800e168 <ucdr_serialize_int32_t+0xd0>
 800e132:	7d23      	ldrb	r3, [r4, #20]
 800e134:	2b01      	cmp	r3, #1
 800e136:	68a3      	ldr	r3, [r4, #8]
 800e138:	d01c      	beq.n	800e174 <ucdr_serialize_int32_t+0xdc>
 800e13a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e13e:	701a      	strb	r2, [r3, #0]
 800e140:	68a3      	ldr	r3, [r4, #8]
 800e142:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e146:	705a      	strb	r2, [r3, #1]
 800e148:	68a3      	ldr	r3, [r4, #8]
 800e14a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e14e:	709a      	strb	r2, [r3, #2]
 800e150:	68a3      	ldr	r3, [r4, #8]
 800e152:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e156:	70da      	strb	r2, [r3, #3]
 800e158:	68a2      	ldr	r2, [r4, #8]
 800e15a:	6923      	ldr	r3, [r4, #16]
 800e15c:	3204      	adds	r2, #4
 800e15e:	3304      	adds	r3, #4
 800e160:	2104      	movs	r1, #4
 800e162:	60a2      	str	r2, [r4, #8]
 800e164:	6123      	str	r3, [r4, #16]
 800e166:	7561      	strb	r1, [r4, #21]
 800e168:	7da0      	ldrb	r0, [r4, #22]
 800e16a:	f080 0001 	eor.w	r0, r0, #1
 800e16e:	b002      	add	sp, #8
 800e170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e174:	9a01      	ldr	r2, [sp, #4]
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	e7ee      	b.n	800e158 <ucdr_serialize_int32_t+0xc0>
 800e17a:	68a2      	ldr	r2, [r4, #8]
 800e17c:	6923      	ldr	r3, [r4, #16]
 800e17e:	7da0      	ldrb	r0, [r4, #22]
 800e180:	7567      	strb	r7, [r4, #21]
 800e182:	1b92      	subs	r2, r2, r6
 800e184:	1b9b      	subs	r3, r3, r6
 800e186:	f080 0001 	eor.w	r0, r0, #1
 800e18a:	60a2      	str	r2, [r4, #8]
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	b002      	add	sp, #8
 800e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e194:	68a3      	ldr	r3, [r4, #8]
 800e196:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	68a3      	ldr	r3, [r4, #8]
 800e19e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e1a2:	701a      	strb	r2, [r3, #0]
 800e1a4:	68a3      	ldr	r3, [r4, #8]
 800e1a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	e7ad      	b.n	800e10a <ucdr_serialize_int32_t+0x72>
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	ad01      	add	r5, sp, #4
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	f00b fa82 	bl	80196be <memcpy>
 800e1ba:	68a0      	ldr	r0, [r4, #8]
 800e1bc:	4642      	mov	r2, r8
 800e1be:	19a9      	adds	r1, r5, r6
 800e1c0:	f00b fa7d 	bl	80196be <memcpy>
 800e1c4:	e7a1      	b.n	800e10a <ucdr_serialize_int32_t+0x72>
 800e1c6:	bf00      	nop

0800e1c8 <ucdr_serialize_endian_int32_t>:
 800e1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1cc:	b083      	sub	sp, #12
 800e1ce:	460d      	mov	r5, r1
 800e1d0:	2104      	movs	r1, #4
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	9201      	str	r2, [sp, #4]
 800e1d6:	f000 fe7b 	bl	800eed0 <ucdr_buffer_alignment>
 800e1da:	4601      	mov	r1, r0
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e1e2:	f000 feb9 	bl	800ef58 <ucdr_advance_buffer>
 800e1e6:	2104      	movs	r1, #4
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f000 fe11 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e1ee:	2800      	cmp	r0, #0
 800e1f0:	d138      	bne.n	800e264 <ucdr_serialize_endian_int32_t+0x9c>
 800e1f2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e1f6:	42b7      	cmp	r7, r6
 800e1f8:	d92f      	bls.n	800e25a <ucdr_serialize_endian_int32_t+0x92>
 800e1fa:	6923      	ldr	r3, [r4, #16]
 800e1fc:	60a7      	str	r7, [r4, #8]
 800e1fe:	1bbf      	subs	r7, r7, r6
 800e200:	443b      	add	r3, r7
 800e202:	f1c7 0904 	rsb	r9, r7, #4
 800e206:	6123      	str	r3, [r4, #16]
 800e208:	4649      	mov	r1, r9
 800e20a:	4620      	mov	r0, r4
 800e20c:	f000 fe0c 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e210:	2800      	cmp	r0, #0
 800e212:	d04a      	beq.n	800e2aa <ucdr_serialize_endian_int32_t+0xe2>
 800e214:	2d01      	cmp	r5, #1
 800e216:	d063      	beq.n	800e2e0 <ucdr_serialize_endian_int32_t+0x118>
 800e218:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e21c:	7033      	strb	r3, [r6, #0]
 800e21e:	2f00      	cmp	r7, #0
 800e220:	d051      	beq.n	800e2c6 <ucdr_serialize_endian_int32_t+0xfe>
 800e222:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e226:	7073      	strb	r3, [r6, #1]
 800e228:	2f01      	cmp	r7, #1
 800e22a:	d050      	beq.n	800e2ce <ucdr_serialize_endian_int32_t+0x106>
 800e22c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e230:	70b3      	strb	r3, [r6, #2]
 800e232:	2f02      	cmp	r7, #2
 800e234:	d04f      	beq.n	800e2d6 <ucdr_serialize_endian_int32_t+0x10e>
 800e236:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e23a:	70f3      	strb	r3, [r6, #3]
 800e23c:	6923      	ldr	r3, [r4, #16]
 800e23e:	68a2      	ldr	r2, [r4, #8]
 800e240:	7da0      	ldrb	r0, [r4, #22]
 800e242:	3304      	adds	r3, #4
 800e244:	444a      	add	r2, r9
 800e246:	1bdb      	subs	r3, r3, r7
 800e248:	2104      	movs	r1, #4
 800e24a:	f080 0001 	eor.w	r0, r0, #1
 800e24e:	60a2      	str	r2, [r4, #8]
 800e250:	6123      	str	r3, [r4, #16]
 800e252:	7561      	strb	r1, [r4, #21]
 800e254:	b003      	add	sp, #12
 800e256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e25a:	2104      	movs	r1, #4
 800e25c:	4620      	mov	r0, r4
 800e25e:	f000 fde3 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e262:	b1c8      	cbz	r0, 800e298 <ucdr_serialize_endian_int32_t+0xd0>
 800e264:	2d01      	cmp	r5, #1
 800e266:	68a3      	ldr	r3, [r4, #8]
 800e268:	d01c      	beq.n	800e2a4 <ucdr_serialize_endian_int32_t+0xdc>
 800e26a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e26e:	701a      	strb	r2, [r3, #0]
 800e270:	68a3      	ldr	r3, [r4, #8]
 800e272:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e276:	705a      	strb	r2, [r3, #1]
 800e278:	68a3      	ldr	r3, [r4, #8]
 800e27a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e27e:	709a      	strb	r2, [r3, #2]
 800e280:	68a3      	ldr	r3, [r4, #8]
 800e282:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e286:	70da      	strb	r2, [r3, #3]
 800e288:	68a2      	ldr	r2, [r4, #8]
 800e28a:	6923      	ldr	r3, [r4, #16]
 800e28c:	3204      	adds	r2, #4
 800e28e:	3304      	adds	r3, #4
 800e290:	2104      	movs	r1, #4
 800e292:	60a2      	str	r2, [r4, #8]
 800e294:	6123      	str	r3, [r4, #16]
 800e296:	7561      	strb	r1, [r4, #21]
 800e298:	7da0      	ldrb	r0, [r4, #22]
 800e29a:	f080 0001 	eor.w	r0, r0, #1
 800e29e:	b003      	add	sp, #12
 800e2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a4:	9a01      	ldr	r2, [sp, #4]
 800e2a6:	601a      	str	r2, [r3, #0]
 800e2a8:	e7ee      	b.n	800e288 <ucdr_serialize_endian_int32_t+0xc0>
 800e2aa:	68a2      	ldr	r2, [r4, #8]
 800e2ac:	6923      	ldr	r3, [r4, #16]
 800e2ae:	7da0      	ldrb	r0, [r4, #22]
 800e2b0:	f884 8015 	strb.w	r8, [r4, #21]
 800e2b4:	1bd2      	subs	r2, r2, r7
 800e2b6:	1bdb      	subs	r3, r3, r7
 800e2b8:	f080 0001 	eor.w	r0, r0, #1
 800e2bc:	60a2      	str	r2, [r4, #8]
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	b003      	add	sp, #12
 800e2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2c6:	68a3      	ldr	r3, [r4, #8]
 800e2c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2cc:	701a      	strb	r2, [r3, #0]
 800e2ce:	68a3      	ldr	r3, [r4, #8]
 800e2d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	68a3      	ldr	r3, [r4, #8]
 800e2d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e2dc:	701a      	strb	r2, [r3, #0]
 800e2de:	e7ad      	b.n	800e23c <ucdr_serialize_endian_int32_t+0x74>
 800e2e0:	ad01      	add	r5, sp, #4
 800e2e2:	4629      	mov	r1, r5
 800e2e4:	463a      	mov	r2, r7
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	f00b f9e9 	bl	80196be <memcpy>
 800e2ec:	68a0      	ldr	r0, [r4, #8]
 800e2ee:	464a      	mov	r2, r9
 800e2f0:	19e9      	adds	r1, r5, r7
 800e2f2:	f00b f9e4 	bl	80196be <memcpy>
 800e2f6:	e7a1      	b.n	800e23c <ucdr_serialize_endian_int32_t+0x74>

0800e2f8 <ucdr_deserialize_int32_t>:
 800e2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2fc:	460d      	mov	r5, r1
 800e2fe:	2104      	movs	r1, #4
 800e300:	4604      	mov	r4, r0
 800e302:	f000 fde5 	bl	800eed0 <ucdr_buffer_alignment>
 800e306:	4601      	mov	r1, r0
 800e308:	4620      	mov	r0, r4
 800e30a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e30e:	f000 fe23 	bl	800ef58 <ucdr_advance_buffer>
 800e312:	2104      	movs	r1, #4
 800e314:	4620      	mov	r0, r4
 800e316:	f000 fd7b 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d138      	bne.n	800e390 <ucdr_deserialize_int32_t+0x98>
 800e31e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e322:	42b7      	cmp	r7, r6
 800e324:	d92f      	bls.n	800e386 <ucdr_deserialize_int32_t+0x8e>
 800e326:	6923      	ldr	r3, [r4, #16]
 800e328:	60a7      	str	r7, [r4, #8]
 800e32a:	1bbf      	subs	r7, r7, r6
 800e32c:	443b      	add	r3, r7
 800e32e:	f1c7 0904 	rsb	r9, r7, #4
 800e332:	6123      	str	r3, [r4, #16]
 800e334:	4649      	mov	r1, r9
 800e336:	4620      	mov	r0, r4
 800e338:	f000 fd76 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e33c:	2800      	cmp	r0, #0
 800e33e:	d046      	beq.n	800e3ce <ucdr_deserialize_int32_t+0xd6>
 800e340:	7d23      	ldrb	r3, [r4, #20]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d05c      	beq.n	800e400 <ucdr_deserialize_int32_t+0x108>
 800e346:	78f3      	ldrb	r3, [r6, #3]
 800e348:	702b      	strb	r3, [r5, #0]
 800e34a:	2f00      	cmp	r7, #0
 800e34c:	d04c      	beq.n	800e3e8 <ucdr_deserialize_int32_t+0xf0>
 800e34e:	78b3      	ldrb	r3, [r6, #2]
 800e350:	706b      	strb	r3, [r5, #1]
 800e352:	2f01      	cmp	r7, #1
 800e354:	f105 0302 	add.w	r3, r5, #2
 800e358:	d04a      	beq.n	800e3f0 <ucdr_deserialize_int32_t+0xf8>
 800e35a:	7873      	ldrb	r3, [r6, #1]
 800e35c:	70ab      	strb	r3, [r5, #2]
 800e35e:	2f02      	cmp	r7, #2
 800e360:	f105 0303 	add.w	r3, r5, #3
 800e364:	d048      	beq.n	800e3f8 <ucdr_deserialize_int32_t+0x100>
 800e366:	7833      	ldrb	r3, [r6, #0]
 800e368:	70eb      	strb	r3, [r5, #3]
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	68a2      	ldr	r2, [r4, #8]
 800e36e:	7da0      	ldrb	r0, [r4, #22]
 800e370:	2104      	movs	r1, #4
 800e372:	3304      	adds	r3, #4
 800e374:	444a      	add	r2, r9
 800e376:	1bdb      	subs	r3, r3, r7
 800e378:	7561      	strb	r1, [r4, #21]
 800e37a:	60a2      	str	r2, [r4, #8]
 800e37c:	6123      	str	r3, [r4, #16]
 800e37e:	f080 0001 	eor.w	r0, r0, #1
 800e382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e386:	2104      	movs	r1, #4
 800e388:	4620      	mov	r0, r4
 800e38a:	f000 fd4d 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e38e:	b1b0      	cbz	r0, 800e3be <ucdr_deserialize_int32_t+0xc6>
 800e390:	7d23      	ldrb	r3, [r4, #20]
 800e392:	2b01      	cmp	r3, #1
 800e394:	68a3      	ldr	r3, [r4, #8]
 800e396:	d017      	beq.n	800e3c8 <ucdr_deserialize_int32_t+0xd0>
 800e398:	78db      	ldrb	r3, [r3, #3]
 800e39a:	702b      	strb	r3, [r5, #0]
 800e39c:	68a3      	ldr	r3, [r4, #8]
 800e39e:	789b      	ldrb	r3, [r3, #2]
 800e3a0:	706b      	strb	r3, [r5, #1]
 800e3a2:	68a3      	ldr	r3, [r4, #8]
 800e3a4:	785b      	ldrb	r3, [r3, #1]
 800e3a6:	70ab      	strb	r3, [r5, #2]
 800e3a8:	68a3      	ldr	r3, [r4, #8]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	70eb      	strb	r3, [r5, #3]
 800e3ae:	68a2      	ldr	r2, [r4, #8]
 800e3b0:	6923      	ldr	r3, [r4, #16]
 800e3b2:	3204      	adds	r2, #4
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	2104      	movs	r1, #4
 800e3b8:	60a2      	str	r2, [r4, #8]
 800e3ba:	6123      	str	r3, [r4, #16]
 800e3bc:	7561      	strb	r1, [r4, #21]
 800e3be:	7da0      	ldrb	r0, [r4, #22]
 800e3c0:	f080 0001 	eor.w	r0, r0, #1
 800e3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	602b      	str	r3, [r5, #0]
 800e3cc:	e7ef      	b.n	800e3ae <ucdr_deserialize_int32_t+0xb6>
 800e3ce:	68a2      	ldr	r2, [r4, #8]
 800e3d0:	6923      	ldr	r3, [r4, #16]
 800e3d2:	7da0      	ldrb	r0, [r4, #22]
 800e3d4:	f884 8015 	strb.w	r8, [r4, #21]
 800e3d8:	1bd2      	subs	r2, r2, r7
 800e3da:	1bdb      	subs	r3, r3, r7
 800e3dc:	60a2      	str	r2, [r4, #8]
 800e3de:	6123      	str	r3, [r4, #16]
 800e3e0:	f080 0001 	eor.w	r0, r0, #1
 800e3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e8:	68a3      	ldr	r3, [r4, #8]
 800e3ea:	789b      	ldrb	r3, [r3, #2]
 800e3ec:	706b      	strb	r3, [r5, #1]
 800e3ee:	1cab      	adds	r3, r5, #2
 800e3f0:	68a2      	ldr	r2, [r4, #8]
 800e3f2:	7852      	ldrb	r2, [r2, #1]
 800e3f4:	f803 2b01 	strb.w	r2, [r3], #1
 800e3f8:	68a2      	ldr	r2, [r4, #8]
 800e3fa:	7812      	ldrb	r2, [r2, #0]
 800e3fc:	701a      	strb	r2, [r3, #0]
 800e3fe:	e7b4      	b.n	800e36a <ucdr_deserialize_int32_t+0x72>
 800e400:	4631      	mov	r1, r6
 800e402:	463a      	mov	r2, r7
 800e404:	4628      	mov	r0, r5
 800e406:	f00b f95a 	bl	80196be <memcpy>
 800e40a:	68a1      	ldr	r1, [r4, #8]
 800e40c:	464a      	mov	r2, r9
 800e40e:	19e8      	adds	r0, r5, r7
 800e410:	f00b f955 	bl	80196be <memcpy>
 800e414:	e7a9      	b.n	800e36a <ucdr_deserialize_int32_t+0x72>
 800e416:	bf00      	nop

0800e418 <ucdr_deserialize_endian_int32_t>:
 800e418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e41c:	460e      	mov	r6, r1
 800e41e:	2104      	movs	r1, #4
 800e420:	4604      	mov	r4, r0
 800e422:	4615      	mov	r5, r2
 800e424:	f000 fd54 	bl	800eed0 <ucdr_buffer_alignment>
 800e428:	4601      	mov	r1, r0
 800e42a:	4620      	mov	r0, r4
 800e42c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e430:	f000 fd92 	bl	800ef58 <ucdr_advance_buffer>
 800e434:	2104      	movs	r1, #4
 800e436:	4620      	mov	r0, r4
 800e438:	f000 fcea 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	d13c      	bne.n	800e4ba <ucdr_deserialize_endian_int32_t+0xa2>
 800e440:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e444:	42bb      	cmp	r3, r7
 800e446:	d933      	bls.n	800e4b0 <ucdr_deserialize_endian_int32_t+0x98>
 800e448:	eba3 0807 	sub.w	r8, r3, r7
 800e44c:	60a3      	str	r3, [r4, #8]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	f1c8 0a04 	rsb	sl, r8, #4
 800e454:	4443      	add	r3, r8
 800e456:	6123      	str	r3, [r4, #16]
 800e458:	4651      	mov	r1, sl
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 fce4 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e460:	2800      	cmp	r0, #0
 800e462:	d048      	beq.n	800e4f6 <ucdr_deserialize_endian_int32_t+0xde>
 800e464:	2e01      	cmp	r6, #1
 800e466:	d061      	beq.n	800e52c <ucdr_deserialize_endian_int32_t+0x114>
 800e468:	78fb      	ldrb	r3, [r7, #3]
 800e46a:	702b      	strb	r3, [r5, #0]
 800e46c:	f1b8 0f00 	cmp.w	r8, #0
 800e470:	d050      	beq.n	800e514 <ucdr_deserialize_endian_int32_t+0xfc>
 800e472:	78bb      	ldrb	r3, [r7, #2]
 800e474:	706b      	strb	r3, [r5, #1]
 800e476:	f1b8 0f01 	cmp.w	r8, #1
 800e47a:	f105 0302 	add.w	r3, r5, #2
 800e47e:	d04d      	beq.n	800e51c <ucdr_deserialize_endian_int32_t+0x104>
 800e480:	787b      	ldrb	r3, [r7, #1]
 800e482:	70ab      	strb	r3, [r5, #2]
 800e484:	f1b8 0f02 	cmp.w	r8, #2
 800e488:	f105 0303 	add.w	r3, r5, #3
 800e48c:	d04a      	beq.n	800e524 <ucdr_deserialize_endian_int32_t+0x10c>
 800e48e:	783b      	ldrb	r3, [r7, #0]
 800e490:	70eb      	strb	r3, [r5, #3]
 800e492:	6923      	ldr	r3, [r4, #16]
 800e494:	68a2      	ldr	r2, [r4, #8]
 800e496:	7da0      	ldrb	r0, [r4, #22]
 800e498:	2104      	movs	r1, #4
 800e49a:	3304      	adds	r3, #4
 800e49c:	4452      	add	r2, sl
 800e49e:	eba3 0308 	sub.w	r3, r3, r8
 800e4a2:	7561      	strb	r1, [r4, #21]
 800e4a4:	60a2      	str	r2, [r4, #8]
 800e4a6:	6123      	str	r3, [r4, #16]
 800e4a8:	f080 0001 	eor.w	r0, r0, #1
 800e4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b0:	2104      	movs	r1, #4
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	f000 fcb8 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e4b8:	b1a8      	cbz	r0, 800e4e6 <ucdr_deserialize_endian_int32_t+0xce>
 800e4ba:	2e01      	cmp	r6, #1
 800e4bc:	68a3      	ldr	r3, [r4, #8]
 800e4be:	d017      	beq.n	800e4f0 <ucdr_deserialize_endian_int32_t+0xd8>
 800e4c0:	78db      	ldrb	r3, [r3, #3]
 800e4c2:	702b      	strb	r3, [r5, #0]
 800e4c4:	68a3      	ldr	r3, [r4, #8]
 800e4c6:	789b      	ldrb	r3, [r3, #2]
 800e4c8:	706b      	strb	r3, [r5, #1]
 800e4ca:	68a3      	ldr	r3, [r4, #8]
 800e4cc:	785b      	ldrb	r3, [r3, #1]
 800e4ce:	70ab      	strb	r3, [r5, #2]
 800e4d0:	68a3      	ldr	r3, [r4, #8]
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	70eb      	strb	r3, [r5, #3]
 800e4d6:	68a2      	ldr	r2, [r4, #8]
 800e4d8:	6923      	ldr	r3, [r4, #16]
 800e4da:	3204      	adds	r2, #4
 800e4dc:	3304      	adds	r3, #4
 800e4de:	2104      	movs	r1, #4
 800e4e0:	60a2      	str	r2, [r4, #8]
 800e4e2:	6123      	str	r3, [r4, #16]
 800e4e4:	7561      	strb	r1, [r4, #21]
 800e4e6:	7da0      	ldrb	r0, [r4, #22]
 800e4e8:	f080 0001 	eor.w	r0, r0, #1
 800e4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	602b      	str	r3, [r5, #0]
 800e4f4:	e7ef      	b.n	800e4d6 <ucdr_deserialize_endian_int32_t+0xbe>
 800e4f6:	68a2      	ldr	r2, [r4, #8]
 800e4f8:	6923      	ldr	r3, [r4, #16]
 800e4fa:	7da0      	ldrb	r0, [r4, #22]
 800e4fc:	f884 9015 	strb.w	r9, [r4, #21]
 800e500:	eba2 0208 	sub.w	r2, r2, r8
 800e504:	eba3 0308 	sub.w	r3, r3, r8
 800e508:	60a2      	str	r2, [r4, #8]
 800e50a:	6123      	str	r3, [r4, #16]
 800e50c:	f080 0001 	eor.w	r0, r0, #1
 800e510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e514:	68a3      	ldr	r3, [r4, #8]
 800e516:	789b      	ldrb	r3, [r3, #2]
 800e518:	706b      	strb	r3, [r5, #1]
 800e51a:	1cab      	adds	r3, r5, #2
 800e51c:	68a2      	ldr	r2, [r4, #8]
 800e51e:	7852      	ldrb	r2, [r2, #1]
 800e520:	f803 2b01 	strb.w	r2, [r3], #1
 800e524:	68a2      	ldr	r2, [r4, #8]
 800e526:	7812      	ldrb	r2, [r2, #0]
 800e528:	701a      	strb	r2, [r3, #0]
 800e52a:	e7b2      	b.n	800e492 <ucdr_deserialize_endian_int32_t+0x7a>
 800e52c:	4639      	mov	r1, r7
 800e52e:	4642      	mov	r2, r8
 800e530:	4628      	mov	r0, r5
 800e532:	f00b f8c4 	bl	80196be <memcpy>
 800e536:	68a1      	ldr	r1, [r4, #8]
 800e538:	4652      	mov	r2, sl
 800e53a:	eb05 0008 	add.w	r0, r5, r8
 800e53e:	f00b f8be 	bl	80196be <memcpy>
 800e542:	e7a6      	b.n	800e492 <ucdr_deserialize_endian_int32_t+0x7a>

0800e544 <ucdr_serialize_endian_float>:
 800e544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e548:	460d      	mov	r5, r1
 800e54a:	b083      	sub	sp, #12
 800e54c:	2104      	movs	r1, #4
 800e54e:	4604      	mov	r4, r0
 800e550:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e554:	f000 fcbc 	bl	800eed0 <ucdr_buffer_alignment>
 800e558:	4601      	mov	r1, r0
 800e55a:	4620      	mov	r0, r4
 800e55c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e560:	f000 fcfa 	bl	800ef58 <ucdr_advance_buffer>
 800e564:	2104      	movs	r1, #4
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fc52 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d138      	bne.n	800e5e2 <ucdr_serialize_endian_float+0x9e>
 800e570:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e574:	42b7      	cmp	r7, r6
 800e576:	d92f      	bls.n	800e5d8 <ucdr_serialize_endian_float+0x94>
 800e578:	6923      	ldr	r3, [r4, #16]
 800e57a:	60a7      	str	r7, [r4, #8]
 800e57c:	1bbf      	subs	r7, r7, r6
 800e57e:	443b      	add	r3, r7
 800e580:	f1c7 0904 	rsb	r9, r7, #4
 800e584:	6123      	str	r3, [r4, #16]
 800e586:	4649      	mov	r1, r9
 800e588:	4620      	mov	r0, r4
 800e58a:	f000 fc4d 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d04a      	beq.n	800e628 <ucdr_serialize_endian_float+0xe4>
 800e592:	2d01      	cmp	r5, #1
 800e594:	d063      	beq.n	800e65e <ucdr_serialize_endian_float+0x11a>
 800e596:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e59a:	7033      	strb	r3, [r6, #0]
 800e59c:	2f00      	cmp	r7, #0
 800e59e:	d051      	beq.n	800e644 <ucdr_serialize_endian_float+0x100>
 800e5a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e5a4:	7073      	strb	r3, [r6, #1]
 800e5a6:	2f01      	cmp	r7, #1
 800e5a8:	d050      	beq.n	800e64c <ucdr_serialize_endian_float+0x108>
 800e5aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e5ae:	70b3      	strb	r3, [r6, #2]
 800e5b0:	2f02      	cmp	r7, #2
 800e5b2:	d04f      	beq.n	800e654 <ucdr_serialize_endian_float+0x110>
 800e5b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e5b8:	70f3      	strb	r3, [r6, #3]
 800e5ba:	6923      	ldr	r3, [r4, #16]
 800e5bc:	68a2      	ldr	r2, [r4, #8]
 800e5be:	7da0      	ldrb	r0, [r4, #22]
 800e5c0:	3304      	adds	r3, #4
 800e5c2:	444a      	add	r2, r9
 800e5c4:	1bdb      	subs	r3, r3, r7
 800e5c6:	2104      	movs	r1, #4
 800e5c8:	f080 0001 	eor.w	r0, r0, #1
 800e5cc:	60a2      	str	r2, [r4, #8]
 800e5ce:	6123      	str	r3, [r4, #16]
 800e5d0:	7561      	strb	r1, [r4, #21]
 800e5d2:	b003      	add	sp, #12
 800e5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5d8:	2104      	movs	r1, #4
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f000 fc24 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e5e0:	b1c8      	cbz	r0, 800e616 <ucdr_serialize_endian_float+0xd2>
 800e5e2:	2d01      	cmp	r5, #1
 800e5e4:	68a3      	ldr	r3, [r4, #8]
 800e5e6:	d01c      	beq.n	800e622 <ucdr_serialize_endian_float+0xde>
 800e5e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e5ec:	701a      	strb	r2, [r3, #0]
 800e5ee:	68a3      	ldr	r3, [r4, #8]
 800e5f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e5f4:	705a      	strb	r2, [r3, #1]
 800e5f6:	68a3      	ldr	r3, [r4, #8]
 800e5f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5fc:	709a      	strb	r2, [r3, #2]
 800e5fe:	68a3      	ldr	r3, [r4, #8]
 800e600:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e604:	70da      	strb	r2, [r3, #3]
 800e606:	68a2      	ldr	r2, [r4, #8]
 800e608:	6923      	ldr	r3, [r4, #16]
 800e60a:	3204      	adds	r2, #4
 800e60c:	3304      	adds	r3, #4
 800e60e:	2104      	movs	r1, #4
 800e610:	60a2      	str	r2, [r4, #8]
 800e612:	6123      	str	r3, [r4, #16]
 800e614:	7561      	strb	r1, [r4, #21]
 800e616:	7da0      	ldrb	r0, [r4, #22]
 800e618:	f080 0001 	eor.w	r0, r0, #1
 800e61c:	b003      	add	sp, #12
 800e61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e622:	9a01      	ldr	r2, [sp, #4]
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	e7ee      	b.n	800e606 <ucdr_serialize_endian_float+0xc2>
 800e628:	68a2      	ldr	r2, [r4, #8]
 800e62a:	6923      	ldr	r3, [r4, #16]
 800e62c:	7da0      	ldrb	r0, [r4, #22]
 800e62e:	f884 8015 	strb.w	r8, [r4, #21]
 800e632:	1bd2      	subs	r2, r2, r7
 800e634:	1bdb      	subs	r3, r3, r7
 800e636:	f080 0001 	eor.w	r0, r0, #1
 800e63a:	60a2      	str	r2, [r4, #8]
 800e63c:	6123      	str	r3, [r4, #16]
 800e63e:	b003      	add	sp, #12
 800e640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e644:	68a3      	ldr	r3, [r4, #8]
 800e646:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e64a:	701a      	strb	r2, [r3, #0]
 800e64c:	68a3      	ldr	r3, [r4, #8]
 800e64e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e652:	701a      	strb	r2, [r3, #0]
 800e654:	68a3      	ldr	r3, [r4, #8]
 800e656:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e65a:	701a      	strb	r2, [r3, #0]
 800e65c:	e7ad      	b.n	800e5ba <ucdr_serialize_endian_float+0x76>
 800e65e:	ad01      	add	r5, sp, #4
 800e660:	4629      	mov	r1, r5
 800e662:	463a      	mov	r2, r7
 800e664:	4630      	mov	r0, r6
 800e666:	f00b f82a 	bl	80196be <memcpy>
 800e66a:	68a0      	ldr	r0, [r4, #8]
 800e66c:	464a      	mov	r2, r9
 800e66e:	19e9      	adds	r1, r5, r7
 800e670:	f00b f825 	bl	80196be <memcpy>
 800e674:	e7a1      	b.n	800e5ba <ucdr_serialize_endian_float+0x76>
 800e676:	bf00      	nop

0800e678 <ucdr_deserialize_endian_float>:
 800e678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e67c:	460e      	mov	r6, r1
 800e67e:	2104      	movs	r1, #4
 800e680:	4604      	mov	r4, r0
 800e682:	4615      	mov	r5, r2
 800e684:	f000 fc24 	bl	800eed0 <ucdr_buffer_alignment>
 800e688:	4601      	mov	r1, r0
 800e68a:	4620      	mov	r0, r4
 800e68c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e690:	f000 fc62 	bl	800ef58 <ucdr_advance_buffer>
 800e694:	2104      	movs	r1, #4
 800e696:	4620      	mov	r0, r4
 800e698:	f000 fbba 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d13c      	bne.n	800e71a <ucdr_deserialize_endian_float+0xa2>
 800e6a0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e6a4:	42bb      	cmp	r3, r7
 800e6a6:	d933      	bls.n	800e710 <ucdr_deserialize_endian_float+0x98>
 800e6a8:	eba3 0807 	sub.w	r8, r3, r7
 800e6ac:	60a3      	str	r3, [r4, #8]
 800e6ae:	6923      	ldr	r3, [r4, #16]
 800e6b0:	f1c8 0a04 	rsb	sl, r8, #4
 800e6b4:	4443      	add	r3, r8
 800e6b6:	6123      	str	r3, [r4, #16]
 800e6b8:	4651      	mov	r1, sl
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f000 fbb4 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d048      	beq.n	800e756 <ucdr_deserialize_endian_float+0xde>
 800e6c4:	2e01      	cmp	r6, #1
 800e6c6:	d061      	beq.n	800e78c <ucdr_deserialize_endian_float+0x114>
 800e6c8:	78fb      	ldrb	r3, [r7, #3]
 800e6ca:	702b      	strb	r3, [r5, #0]
 800e6cc:	f1b8 0f00 	cmp.w	r8, #0
 800e6d0:	d050      	beq.n	800e774 <ucdr_deserialize_endian_float+0xfc>
 800e6d2:	78bb      	ldrb	r3, [r7, #2]
 800e6d4:	706b      	strb	r3, [r5, #1]
 800e6d6:	f1b8 0f01 	cmp.w	r8, #1
 800e6da:	f105 0302 	add.w	r3, r5, #2
 800e6de:	d04d      	beq.n	800e77c <ucdr_deserialize_endian_float+0x104>
 800e6e0:	787b      	ldrb	r3, [r7, #1]
 800e6e2:	70ab      	strb	r3, [r5, #2]
 800e6e4:	f1b8 0f02 	cmp.w	r8, #2
 800e6e8:	f105 0303 	add.w	r3, r5, #3
 800e6ec:	d04a      	beq.n	800e784 <ucdr_deserialize_endian_float+0x10c>
 800e6ee:	783b      	ldrb	r3, [r7, #0]
 800e6f0:	70eb      	strb	r3, [r5, #3]
 800e6f2:	6923      	ldr	r3, [r4, #16]
 800e6f4:	68a2      	ldr	r2, [r4, #8]
 800e6f6:	7da0      	ldrb	r0, [r4, #22]
 800e6f8:	2104      	movs	r1, #4
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4452      	add	r2, sl
 800e6fe:	eba3 0308 	sub.w	r3, r3, r8
 800e702:	7561      	strb	r1, [r4, #21]
 800e704:	60a2      	str	r2, [r4, #8]
 800e706:	6123      	str	r3, [r4, #16]
 800e708:	f080 0001 	eor.w	r0, r0, #1
 800e70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e710:	2104      	movs	r1, #4
 800e712:	4620      	mov	r0, r4
 800e714:	f000 fb88 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e718:	b1a8      	cbz	r0, 800e746 <ucdr_deserialize_endian_float+0xce>
 800e71a:	2e01      	cmp	r6, #1
 800e71c:	68a3      	ldr	r3, [r4, #8]
 800e71e:	d017      	beq.n	800e750 <ucdr_deserialize_endian_float+0xd8>
 800e720:	78db      	ldrb	r3, [r3, #3]
 800e722:	702b      	strb	r3, [r5, #0]
 800e724:	68a3      	ldr	r3, [r4, #8]
 800e726:	789b      	ldrb	r3, [r3, #2]
 800e728:	706b      	strb	r3, [r5, #1]
 800e72a:	68a3      	ldr	r3, [r4, #8]
 800e72c:	785b      	ldrb	r3, [r3, #1]
 800e72e:	70ab      	strb	r3, [r5, #2]
 800e730:	68a3      	ldr	r3, [r4, #8]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	70eb      	strb	r3, [r5, #3]
 800e736:	68a2      	ldr	r2, [r4, #8]
 800e738:	6923      	ldr	r3, [r4, #16]
 800e73a:	3204      	adds	r2, #4
 800e73c:	3304      	adds	r3, #4
 800e73e:	2104      	movs	r1, #4
 800e740:	60a2      	str	r2, [r4, #8]
 800e742:	6123      	str	r3, [r4, #16]
 800e744:	7561      	strb	r1, [r4, #21]
 800e746:	7da0      	ldrb	r0, [r4, #22]
 800e748:	f080 0001 	eor.w	r0, r0, #1
 800e74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	602b      	str	r3, [r5, #0]
 800e754:	e7ef      	b.n	800e736 <ucdr_deserialize_endian_float+0xbe>
 800e756:	68a2      	ldr	r2, [r4, #8]
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	7da0      	ldrb	r0, [r4, #22]
 800e75c:	f884 9015 	strb.w	r9, [r4, #21]
 800e760:	eba2 0208 	sub.w	r2, r2, r8
 800e764:	eba3 0308 	sub.w	r3, r3, r8
 800e768:	60a2      	str	r2, [r4, #8]
 800e76a:	6123      	str	r3, [r4, #16]
 800e76c:	f080 0001 	eor.w	r0, r0, #1
 800e770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e774:	68a3      	ldr	r3, [r4, #8]
 800e776:	789b      	ldrb	r3, [r3, #2]
 800e778:	706b      	strb	r3, [r5, #1]
 800e77a:	1cab      	adds	r3, r5, #2
 800e77c:	68a2      	ldr	r2, [r4, #8]
 800e77e:	7852      	ldrb	r2, [r2, #1]
 800e780:	f803 2b01 	strb.w	r2, [r3], #1
 800e784:	68a2      	ldr	r2, [r4, #8]
 800e786:	7812      	ldrb	r2, [r2, #0]
 800e788:	701a      	strb	r2, [r3, #0]
 800e78a:	e7b2      	b.n	800e6f2 <ucdr_deserialize_endian_float+0x7a>
 800e78c:	4639      	mov	r1, r7
 800e78e:	4642      	mov	r2, r8
 800e790:	4628      	mov	r0, r5
 800e792:	f00a ff94 	bl	80196be <memcpy>
 800e796:	68a1      	ldr	r1, [r4, #8]
 800e798:	4652      	mov	r2, sl
 800e79a:	eb05 0008 	add.w	r0, r5, r8
 800e79e:	f00a ff8e 	bl	80196be <memcpy>
 800e7a2:	e7a6      	b.n	800e6f2 <ucdr_deserialize_endian_float+0x7a>

0800e7a4 <ucdr_serialize_double>:
 800e7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a8:	2108      	movs	r1, #8
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	ed8d 0b00 	vstr	d0, [sp]
 800e7b2:	f000 fb8d 	bl	800eed0 <ucdr_buffer_alignment>
 800e7b6:	4601      	mov	r1, r0
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	7d67      	ldrb	r7, [r4, #21]
 800e7bc:	f000 fbcc 	bl	800ef58 <ucdr_advance_buffer>
 800e7c0:	2108      	movs	r1, #8
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f000 fb24 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d14e      	bne.n	800e86a <ucdr_serialize_double+0xc6>
 800e7cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e7d0:	42ab      	cmp	r3, r5
 800e7d2:	d945      	bls.n	800e860 <ucdr_serialize_double+0xbc>
 800e7d4:	1b5e      	subs	r6, r3, r5
 800e7d6:	60a3      	str	r3, [r4, #8]
 800e7d8:	6923      	ldr	r3, [r4, #16]
 800e7da:	f1c6 0808 	rsb	r8, r6, #8
 800e7de:	4433      	add	r3, r6
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	4641      	mov	r1, r8
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 fb1f 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d074      	beq.n	800e8d8 <ucdr_serialize_double+0x134>
 800e7ee:	7d23      	ldrb	r3, [r4, #20]
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	f000 809b 	beq.w	800e92c <ucdr_serialize_double+0x188>
 800e7f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e7fa:	702b      	strb	r3, [r5, #0]
 800e7fc:	2e00      	cmp	r6, #0
 800e7fe:	d078      	beq.n	800e8f2 <ucdr_serialize_double+0x14e>
 800e800:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e804:	706b      	strb	r3, [r5, #1]
 800e806:	2e01      	cmp	r6, #1
 800e808:	d077      	beq.n	800e8fa <ucdr_serialize_double+0x156>
 800e80a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e80e:	70ab      	strb	r3, [r5, #2]
 800e810:	2e02      	cmp	r6, #2
 800e812:	d076      	beq.n	800e902 <ucdr_serialize_double+0x15e>
 800e814:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e818:	70eb      	strb	r3, [r5, #3]
 800e81a:	2e03      	cmp	r6, #3
 800e81c:	d075      	beq.n	800e90a <ucdr_serialize_double+0x166>
 800e81e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e822:	712b      	strb	r3, [r5, #4]
 800e824:	2e04      	cmp	r6, #4
 800e826:	d074      	beq.n	800e912 <ucdr_serialize_double+0x16e>
 800e828:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e82c:	716b      	strb	r3, [r5, #5]
 800e82e:	2e05      	cmp	r6, #5
 800e830:	d073      	beq.n	800e91a <ucdr_serialize_double+0x176>
 800e832:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e836:	71ab      	strb	r3, [r5, #6]
 800e838:	2e06      	cmp	r6, #6
 800e83a:	d072      	beq.n	800e922 <ucdr_serialize_double+0x17e>
 800e83c:	f89d 3000 	ldrb.w	r3, [sp]
 800e840:	71eb      	strb	r3, [r5, #7]
 800e842:	6923      	ldr	r3, [r4, #16]
 800e844:	68a2      	ldr	r2, [r4, #8]
 800e846:	7da0      	ldrb	r0, [r4, #22]
 800e848:	3308      	adds	r3, #8
 800e84a:	1b9e      	subs	r6, r3, r6
 800e84c:	4442      	add	r2, r8
 800e84e:	2308      	movs	r3, #8
 800e850:	f080 0001 	eor.w	r0, r0, #1
 800e854:	60a2      	str	r2, [r4, #8]
 800e856:	6126      	str	r6, [r4, #16]
 800e858:	7563      	strb	r3, [r4, #21]
 800e85a:	b002      	add	sp, #8
 800e85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e860:	2108      	movs	r1, #8
 800e862:	4620      	mov	r0, r4
 800e864:	f000 fae0 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e868:	b350      	cbz	r0, 800e8c0 <ucdr_serialize_double+0x11c>
 800e86a:	7d23      	ldrb	r3, [r4, #20]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d02d      	beq.n	800e8cc <ucdr_serialize_double+0x128>
 800e870:	68a3      	ldr	r3, [r4, #8]
 800e872:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e876:	701a      	strb	r2, [r3, #0]
 800e878:	68a3      	ldr	r3, [r4, #8]
 800e87a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e87e:	705a      	strb	r2, [r3, #1]
 800e880:	68a3      	ldr	r3, [r4, #8]
 800e882:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e886:	709a      	strb	r2, [r3, #2]
 800e888:	68a3      	ldr	r3, [r4, #8]
 800e88a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e88e:	70da      	strb	r2, [r3, #3]
 800e890:	68a3      	ldr	r3, [r4, #8]
 800e892:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e896:	711a      	strb	r2, [r3, #4]
 800e898:	68a3      	ldr	r3, [r4, #8]
 800e89a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e89e:	715a      	strb	r2, [r3, #5]
 800e8a0:	68a3      	ldr	r3, [r4, #8]
 800e8a2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e8a6:	719a      	strb	r2, [r3, #6]
 800e8a8:	68a3      	ldr	r3, [r4, #8]
 800e8aa:	f89d 2000 	ldrb.w	r2, [sp]
 800e8ae:	71da      	strb	r2, [r3, #7]
 800e8b0:	68a2      	ldr	r2, [r4, #8]
 800e8b2:	6923      	ldr	r3, [r4, #16]
 800e8b4:	3208      	adds	r2, #8
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	2108      	movs	r1, #8
 800e8ba:	60a2      	str	r2, [r4, #8]
 800e8bc:	6123      	str	r3, [r4, #16]
 800e8be:	7561      	strb	r1, [r4, #21]
 800e8c0:	7da0      	ldrb	r0, [r4, #22]
 800e8c2:	f080 0001 	eor.w	r0, r0, #1
 800e8c6:	b002      	add	sp, #8
 800e8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8cc:	466b      	mov	r3, sp
 800e8ce:	cb03      	ldmia	r3!, {r0, r1}
 800e8d0:	68a3      	ldr	r3, [r4, #8]
 800e8d2:	6018      	str	r0, [r3, #0]
 800e8d4:	6059      	str	r1, [r3, #4]
 800e8d6:	e7eb      	b.n	800e8b0 <ucdr_serialize_double+0x10c>
 800e8d8:	68a2      	ldr	r2, [r4, #8]
 800e8da:	6923      	ldr	r3, [r4, #16]
 800e8dc:	7da0      	ldrb	r0, [r4, #22]
 800e8de:	7567      	strb	r7, [r4, #21]
 800e8e0:	1b92      	subs	r2, r2, r6
 800e8e2:	1b9b      	subs	r3, r3, r6
 800e8e4:	f080 0001 	eor.w	r0, r0, #1
 800e8e8:	60a2      	str	r2, [r4, #8]
 800e8ea:	6123      	str	r3, [r4, #16]
 800e8ec:	b002      	add	sp, #8
 800e8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f2:	68a3      	ldr	r3, [r4, #8]
 800e8f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e8f8:	701a      	strb	r2, [r3, #0]
 800e8fa:	68a3      	ldr	r3, [r4, #8]
 800e8fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e900:	701a      	strb	r2, [r3, #0]
 800e902:	68a3      	ldr	r3, [r4, #8]
 800e904:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e908:	701a      	strb	r2, [r3, #0]
 800e90a:	68a3      	ldr	r3, [r4, #8]
 800e90c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e910:	701a      	strb	r2, [r3, #0]
 800e912:	68a3      	ldr	r3, [r4, #8]
 800e914:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e918:	701a      	strb	r2, [r3, #0]
 800e91a:	68a3      	ldr	r3, [r4, #8]
 800e91c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e920:	701a      	strb	r2, [r3, #0]
 800e922:	68a3      	ldr	r3, [r4, #8]
 800e924:	f89d 2000 	ldrb.w	r2, [sp]
 800e928:	701a      	strb	r2, [r3, #0]
 800e92a:	e78a      	b.n	800e842 <ucdr_serialize_double+0x9e>
 800e92c:	4628      	mov	r0, r5
 800e92e:	466d      	mov	r5, sp
 800e930:	4629      	mov	r1, r5
 800e932:	4632      	mov	r2, r6
 800e934:	f00a fec3 	bl	80196be <memcpy>
 800e938:	68a0      	ldr	r0, [r4, #8]
 800e93a:	4642      	mov	r2, r8
 800e93c:	19a9      	adds	r1, r5, r6
 800e93e:	f00a febe 	bl	80196be <memcpy>
 800e942:	e77e      	b.n	800e842 <ucdr_serialize_double+0x9e>

0800e944 <ucdr_serialize_endian_double>:
 800e944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e948:	460e      	mov	r6, r1
 800e94a:	b083      	sub	sp, #12
 800e94c:	2108      	movs	r1, #8
 800e94e:	4604      	mov	r4, r0
 800e950:	ed8d 0b00 	vstr	d0, [sp]
 800e954:	f000 fabc 	bl	800eed0 <ucdr_buffer_alignment>
 800e958:	4601      	mov	r1, r0
 800e95a:	4620      	mov	r0, r4
 800e95c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e960:	f000 fafa 	bl	800ef58 <ucdr_advance_buffer>
 800e964:	2108      	movs	r1, #8
 800e966:	4620      	mov	r0, r4
 800e968:	f000 fa52 	bl	800ee10 <ucdr_check_buffer_available_for>
 800e96c:	2800      	cmp	r0, #0
 800e96e:	d14d      	bne.n	800ea0c <ucdr_serialize_endian_double+0xc8>
 800e970:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800e974:	42bd      	cmp	r5, r7
 800e976:	d944      	bls.n	800ea02 <ucdr_serialize_endian_double+0xbe>
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	60a5      	str	r5, [r4, #8]
 800e97c:	1bed      	subs	r5, r5, r7
 800e97e:	442b      	add	r3, r5
 800e980:	f1c5 0908 	rsb	r9, r5, #8
 800e984:	6123      	str	r3, [r4, #16]
 800e986:	4649      	mov	r1, r9
 800e988:	4620      	mov	r0, r4
 800e98a:	f000 fa4d 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800e98e:	2800      	cmp	r0, #0
 800e990:	d072      	beq.n	800ea78 <ucdr_serialize_endian_double+0x134>
 800e992:	2e01      	cmp	r6, #1
 800e994:	f000 809b 	beq.w	800eace <ucdr_serialize_endian_double+0x18a>
 800e998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e99c:	703b      	strb	r3, [r7, #0]
 800e99e:	2d00      	cmp	r5, #0
 800e9a0:	d078      	beq.n	800ea94 <ucdr_serialize_endian_double+0x150>
 800e9a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e9a6:	707b      	strb	r3, [r7, #1]
 800e9a8:	2d01      	cmp	r5, #1
 800e9aa:	d077      	beq.n	800ea9c <ucdr_serialize_endian_double+0x158>
 800e9ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e9b0:	70bb      	strb	r3, [r7, #2]
 800e9b2:	2d02      	cmp	r5, #2
 800e9b4:	d076      	beq.n	800eaa4 <ucdr_serialize_endian_double+0x160>
 800e9b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e9ba:	70fb      	strb	r3, [r7, #3]
 800e9bc:	2d03      	cmp	r5, #3
 800e9be:	d075      	beq.n	800eaac <ucdr_serialize_endian_double+0x168>
 800e9c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e9c4:	713b      	strb	r3, [r7, #4]
 800e9c6:	2d04      	cmp	r5, #4
 800e9c8:	d074      	beq.n	800eab4 <ucdr_serialize_endian_double+0x170>
 800e9ca:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e9ce:	717b      	strb	r3, [r7, #5]
 800e9d0:	2d05      	cmp	r5, #5
 800e9d2:	d073      	beq.n	800eabc <ucdr_serialize_endian_double+0x178>
 800e9d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e9d8:	71bb      	strb	r3, [r7, #6]
 800e9da:	2d06      	cmp	r5, #6
 800e9dc:	d072      	beq.n	800eac4 <ucdr_serialize_endian_double+0x180>
 800e9de:	f89d 3000 	ldrb.w	r3, [sp]
 800e9e2:	71fb      	strb	r3, [r7, #7]
 800e9e4:	6923      	ldr	r3, [r4, #16]
 800e9e6:	68a2      	ldr	r2, [r4, #8]
 800e9e8:	7da0      	ldrb	r0, [r4, #22]
 800e9ea:	3308      	adds	r3, #8
 800e9ec:	1b5d      	subs	r5, r3, r5
 800e9ee:	444a      	add	r2, r9
 800e9f0:	2308      	movs	r3, #8
 800e9f2:	f080 0001 	eor.w	r0, r0, #1
 800e9f6:	60a2      	str	r2, [r4, #8]
 800e9f8:	6125      	str	r5, [r4, #16]
 800e9fa:	7563      	strb	r3, [r4, #21]
 800e9fc:	b003      	add	sp, #12
 800e9fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea02:	2108      	movs	r1, #8
 800ea04:	4620      	mov	r0, r4
 800ea06:	f000 fa0f 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800ea0a:	b348      	cbz	r0, 800ea60 <ucdr_serialize_endian_double+0x11c>
 800ea0c:	2e01      	cmp	r6, #1
 800ea0e:	d02d      	beq.n	800ea6c <ucdr_serialize_endian_double+0x128>
 800ea10:	68a3      	ldr	r3, [r4, #8]
 800ea12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ea16:	701a      	strb	r2, [r3, #0]
 800ea18:	68a3      	ldr	r3, [r4, #8]
 800ea1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea1e:	705a      	strb	r2, [r3, #1]
 800ea20:	68a3      	ldr	r3, [r4, #8]
 800ea22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ea26:	709a      	strb	r2, [r3, #2]
 800ea28:	68a3      	ldr	r3, [r4, #8]
 800ea2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ea2e:	70da      	strb	r2, [r3, #3]
 800ea30:	68a3      	ldr	r3, [r4, #8]
 800ea32:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ea36:	711a      	strb	r2, [r3, #4]
 800ea38:	68a3      	ldr	r3, [r4, #8]
 800ea3a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ea3e:	715a      	strb	r2, [r3, #5]
 800ea40:	68a3      	ldr	r3, [r4, #8]
 800ea42:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ea46:	719a      	strb	r2, [r3, #6]
 800ea48:	68a3      	ldr	r3, [r4, #8]
 800ea4a:	f89d 2000 	ldrb.w	r2, [sp]
 800ea4e:	71da      	strb	r2, [r3, #7]
 800ea50:	68a2      	ldr	r2, [r4, #8]
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	3208      	adds	r2, #8
 800ea56:	3308      	adds	r3, #8
 800ea58:	2108      	movs	r1, #8
 800ea5a:	60a2      	str	r2, [r4, #8]
 800ea5c:	6123      	str	r3, [r4, #16]
 800ea5e:	7561      	strb	r1, [r4, #21]
 800ea60:	7da0      	ldrb	r0, [r4, #22]
 800ea62:	f080 0001 	eor.w	r0, r0, #1
 800ea66:	b003      	add	sp, #12
 800ea68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea6c:	466b      	mov	r3, sp
 800ea6e:	cb03      	ldmia	r3!, {r0, r1}
 800ea70:	68a3      	ldr	r3, [r4, #8]
 800ea72:	6018      	str	r0, [r3, #0]
 800ea74:	6059      	str	r1, [r3, #4]
 800ea76:	e7eb      	b.n	800ea50 <ucdr_serialize_endian_double+0x10c>
 800ea78:	68a2      	ldr	r2, [r4, #8]
 800ea7a:	6923      	ldr	r3, [r4, #16]
 800ea7c:	7da0      	ldrb	r0, [r4, #22]
 800ea7e:	f884 8015 	strb.w	r8, [r4, #21]
 800ea82:	1b52      	subs	r2, r2, r5
 800ea84:	1b5b      	subs	r3, r3, r5
 800ea86:	f080 0001 	eor.w	r0, r0, #1
 800ea8a:	60a2      	str	r2, [r4, #8]
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	b003      	add	sp, #12
 800ea90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea94:	68a3      	ldr	r3, [r4, #8]
 800ea96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea9a:	701a      	strb	r2, [r3, #0]
 800ea9c:	68a3      	ldr	r3, [r4, #8]
 800ea9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eaa2:	701a      	strb	r2, [r3, #0]
 800eaa4:	68a3      	ldr	r3, [r4, #8]
 800eaa6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eaaa:	701a      	strb	r2, [r3, #0]
 800eaac:	68a3      	ldr	r3, [r4, #8]
 800eaae:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eab2:	701a      	strb	r2, [r3, #0]
 800eab4:	68a3      	ldr	r3, [r4, #8]
 800eab6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eaba:	701a      	strb	r2, [r3, #0]
 800eabc:	68a3      	ldr	r3, [r4, #8]
 800eabe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800eac2:	701a      	strb	r2, [r3, #0]
 800eac4:	68a3      	ldr	r3, [r4, #8]
 800eac6:	f89d 2000 	ldrb.w	r2, [sp]
 800eaca:	701a      	strb	r2, [r3, #0]
 800eacc:	e78a      	b.n	800e9e4 <ucdr_serialize_endian_double+0xa0>
 800eace:	466e      	mov	r6, sp
 800ead0:	4631      	mov	r1, r6
 800ead2:	462a      	mov	r2, r5
 800ead4:	4638      	mov	r0, r7
 800ead6:	f00a fdf2 	bl	80196be <memcpy>
 800eada:	68a0      	ldr	r0, [r4, #8]
 800eadc:	464a      	mov	r2, r9
 800eade:	1971      	adds	r1, r6, r5
 800eae0:	f00a fded 	bl	80196be <memcpy>
 800eae4:	e77e      	b.n	800e9e4 <ucdr_serialize_endian_double+0xa0>
 800eae6:	bf00      	nop

0800eae8 <ucdr_deserialize_double>:
 800eae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaec:	460d      	mov	r5, r1
 800eaee:	2108      	movs	r1, #8
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	f000 f9ed 	bl	800eed0 <ucdr_buffer_alignment>
 800eaf6:	4601      	mov	r1, r0
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f894 9015 	ldrb.w	r9, [r4, #21]
 800eafe:	f000 fa2b 	bl	800ef58 <ucdr_advance_buffer>
 800eb02:	2108      	movs	r1, #8
 800eb04:	4620      	mov	r0, r4
 800eb06:	f000 f983 	bl	800ee10 <ucdr_check_buffer_available_for>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d151      	bne.n	800ebb2 <ucdr_deserialize_double+0xca>
 800eb0e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800eb12:	42be      	cmp	r6, r7
 800eb14:	d948      	bls.n	800eba8 <ucdr_deserialize_double+0xc0>
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	60a6      	str	r6, [r4, #8]
 800eb1a:	1bf6      	subs	r6, r6, r7
 800eb1c:	4433      	add	r3, r6
 800eb1e:	f1c6 0808 	rsb	r8, r6, #8
 800eb22:	6123      	str	r3, [r4, #16]
 800eb24:	4641      	mov	r1, r8
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 f97e 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d06d      	beq.n	800ec0c <ucdr_deserialize_double+0x124>
 800eb30:	7d23      	ldrb	r3, [r4, #20]
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	f000 8093 	beq.w	800ec5e <ucdr_deserialize_double+0x176>
 800eb38:	79fb      	ldrb	r3, [r7, #7]
 800eb3a:	702b      	strb	r3, [r5, #0]
 800eb3c:	2e00      	cmp	r6, #0
 800eb3e:	d072      	beq.n	800ec26 <ucdr_deserialize_double+0x13e>
 800eb40:	79bb      	ldrb	r3, [r7, #6]
 800eb42:	706b      	strb	r3, [r5, #1]
 800eb44:	2e01      	cmp	r6, #1
 800eb46:	f105 0302 	add.w	r3, r5, #2
 800eb4a:	d070      	beq.n	800ec2e <ucdr_deserialize_double+0x146>
 800eb4c:	797b      	ldrb	r3, [r7, #5]
 800eb4e:	70ab      	strb	r3, [r5, #2]
 800eb50:	2e02      	cmp	r6, #2
 800eb52:	f105 0303 	add.w	r3, r5, #3
 800eb56:	d06e      	beq.n	800ec36 <ucdr_deserialize_double+0x14e>
 800eb58:	793b      	ldrb	r3, [r7, #4]
 800eb5a:	70eb      	strb	r3, [r5, #3]
 800eb5c:	2e03      	cmp	r6, #3
 800eb5e:	f105 0304 	add.w	r3, r5, #4
 800eb62:	d06c      	beq.n	800ec3e <ucdr_deserialize_double+0x156>
 800eb64:	78fb      	ldrb	r3, [r7, #3]
 800eb66:	712b      	strb	r3, [r5, #4]
 800eb68:	2e04      	cmp	r6, #4
 800eb6a:	f105 0305 	add.w	r3, r5, #5
 800eb6e:	d06a      	beq.n	800ec46 <ucdr_deserialize_double+0x15e>
 800eb70:	78bb      	ldrb	r3, [r7, #2]
 800eb72:	716b      	strb	r3, [r5, #5]
 800eb74:	2e05      	cmp	r6, #5
 800eb76:	f105 0306 	add.w	r3, r5, #6
 800eb7a:	d068      	beq.n	800ec4e <ucdr_deserialize_double+0x166>
 800eb7c:	787b      	ldrb	r3, [r7, #1]
 800eb7e:	71ab      	strb	r3, [r5, #6]
 800eb80:	2e06      	cmp	r6, #6
 800eb82:	f105 0307 	add.w	r3, r5, #7
 800eb86:	d066      	beq.n	800ec56 <ucdr_deserialize_double+0x16e>
 800eb88:	783b      	ldrb	r3, [r7, #0]
 800eb8a:	71eb      	strb	r3, [r5, #7]
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	68a2      	ldr	r2, [r4, #8]
 800eb90:	7da0      	ldrb	r0, [r4, #22]
 800eb92:	3308      	adds	r3, #8
 800eb94:	1b9e      	subs	r6, r3, r6
 800eb96:	2308      	movs	r3, #8
 800eb98:	4442      	add	r2, r8
 800eb9a:	7563      	strb	r3, [r4, #21]
 800eb9c:	60a2      	str	r2, [r4, #8]
 800eb9e:	6126      	str	r6, [r4, #16]
 800eba0:	f080 0001 	eor.w	r0, r0, #1
 800eba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba8:	2108      	movs	r1, #8
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f000 f93c 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800ebb0:	b310      	cbz	r0, 800ebf8 <ucdr_deserialize_double+0x110>
 800ebb2:	7d23      	ldrb	r3, [r4, #20]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	68a3      	ldr	r3, [r4, #8]
 800ebb8:	d023      	beq.n	800ec02 <ucdr_deserialize_double+0x11a>
 800ebba:	79db      	ldrb	r3, [r3, #7]
 800ebbc:	702b      	strb	r3, [r5, #0]
 800ebbe:	68a3      	ldr	r3, [r4, #8]
 800ebc0:	799b      	ldrb	r3, [r3, #6]
 800ebc2:	706b      	strb	r3, [r5, #1]
 800ebc4:	68a3      	ldr	r3, [r4, #8]
 800ebc6:	795b      	ldrb	r3, [r3, #5]
 800ebc8:	70ab      	strb	r3, [r5, #2]
 800ebca:	68a3      	ldr	r3, [r4, #8]
 800ebcc:	791b      	ldrb	r3, [r3, #4]
 800ebce:	70eb      	strb	r3, [r5, #3]
 800ebd0:	68a3      	ldr	r3, [r4, #8]
 800ebd2:	78db      	ldrb	r3, [r3, #3]
 800ebd4:	712b      	strb	r3, [r5, #4]
 800ebd6:	68a3      	ldr	r3, [r4, #8]
 800ebd8:	789b      	ldrb	r3, [r3, #2]
 800ebda:	716b      	strb	r3, [r5, #5]
 800ebdc:	68a3      	ldr	r3, [r4, #8]
 800ebde:	785b      	ldrb	r3, [r3, #1]
 800ebe0:	71ab      	strb	r3, [r5, #6]
 800ebe2:	68a3      	ldr	r3, [r4, #8]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	71eb      	strb	r3, [r5, #7]
 800ebe8:	68a2      	ldr	r2, [r4, #8]
 800ebea:	6923      	ldr	r3, [r4, #16]
 800ebec:	3208      	adds	r2, #8
 800ebee:	3308      	adds	r3, #8
 800ebf0:	2108      	movs	r1, #8
 800ebf2:	60a2      	str	r2, [r4, #8]
 800ebf4:	6123      	str	r3, [r4, #16]
 800ebf6:	7561      	strb	r1, [r4, #21]
 800ebf8:	7da0      	ldrb	r0, [r4, #22]
 800ebfa:	f080 0001 	eor.w	r0, r0, #1
 800ebfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	606b      	str	r3, [r5, #4]
 800ec08:	602a      	str	r2, [r5, #0]
 800ec0a:	e7ed      	b.n	800ebe8 <ucdr_deserialize_double+0x100>
 800ec0c:	68a2      	ldr	r2, [r4, #8]
 800ec0e:	6923      	ldr	r3, [r4, #16]
 800ec10:	7da0      	ldrb	r0, [r4, #22]
 800ec12:	f884 9015 	strb.w	r9, [r4, #21]
 800ec16:	1b92      	subs	r2, r2, r6
 800ec18:	1b9b      	subs	r3, r3, r6
 800ec1a:	60a2      	str	r2, [r4, #8]
 800ec1c:	6123      	str	r3, [r4, #16]
 800ec1e:	f080 0001 	eor.w	r0, r0, #1
 800ec22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec26:	68a3      	ldr	r3, [r4, #8]
 800ec28:	799b      	ldrb	r3, [r3, #6]
 800ec2a:	706b      	strb	r3, [r5, #1]
 800ec2c:	1cab      	adds	r3, r5, #2
 800ec2e:	68a2      	ldr	r2, [r4, #8]
 800ec30:	7952      	ldrb	r2, [r2, #5]
 800ec32:	f803 2b01 	strb.w	r2, [r3], #1
 800ec36:	68a2      	ldr	r2, [r4, #8]
 800ec38:	7912      	ldrb	r2, [r2, #4]
 800ec3a:	f803 2b01 	strb.w	r2, [r3], #1
 800ec3e:	68a2      	ldr	r2, [r4, #8]
 800ec40:	78d2      	ldrb	r2, [r2, #3]
 800ec42:	f803 2b01 	strb.w	r2, [r3], #1
 800ec46:	68a2      	ldr	r2, [r4, #8]
 800ec48:	7892      	ldrb	r2, [r2, #2]
 800ec4a:	f803 2b01 	strb.w	r2, [r3], #1
 800ec4e:	68a2      	ldr	r2, [r4, #8]
 800ec50:	7852      	ldrb	r2, [r2, #1]
 800ec52:	f803 2b01 	strb.w	r2, [r3], #1
 800ec56:	68a2      	ldr	r2, [r4, #8]
 800ec58:	7812      	ldrb	r2, [r2, #0]
 800ec5a:	701a      	strb	r2, [r3, #0]
 800ec5c:	e796      	b.n	800eb8c <ucdr_deserialize_double+0xa4>
 800ec5e:	4639      	mov	r1, r7
 800ec60:	4632      	mov	r2, r6
 800ec62:	4628      	mov	r0, r5
 800ec64:	f00a fd2b 	bl	80196be <memcpy>
 800ec68:	68a1      	ldr	r1, [r4, #8]
 800ec6a:	4642      	mov	r2, r8
 800ec6c:	19a8      	adds	r0, r5, r6
 800ec6e:	f00a fd26 	bl	80196be <memcpy>
 800ec72:	e78b      	b.n	800eb8c <ucdr_deserialize_double+0xa4>

0800ec74 <ucdr_deserialize_endian_double>:
 800ec74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec78:	460f      	mov	r7, r1
 800ec7a:	2108      	movs	r1, #8
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	4615      	mov	r5, r2
 800ec80:	f000 f926 	bl	800eed0 <ucdr_buffer_alignment>
 800ec84:	4601      	mov	r1, r0
 800ec86:	4620      	mov	r0, r4
 800ec88:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ec8c:	f000 f964 	bl	800ef58 <ucdr_advance_buffer>
 800ec90:	2108      	movs	r1, #8
 800ec92:	4620      	mov	r0, r4
 800ec94:	f000 f8bc 	bl	800ee10 <ucdr_check_buffer_available_for>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	d159      	bne.n	800ed50 <ucdr_deserialize_endian_double+0xdc>
 800ec9c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800eca0:	4546      	cmp	r6, r8
 800eca2:	d950      	bls.n	800ed46 <ucdr_deserialize_endian_double+0xd2>
 800eca4:	6923      	ldr	r3, [r4, #16]
 800eca6:	60a6      	str	r6, [r4, #8]
 800eca8:	eba6 0608 	sub.w	r6, r6, r8
 800ecac:	4433      	add	r3, r6
 800ecae:	f1c6 0a08 	rsb	sl, r6, #8
 800ecb2:	6123      	str	r3, [r4, #16]
 800ecb4:	4651      	mov	r1, sl
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 f8b6 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d073      	beq.n	800eda8 <ucdr_deserialize_endian_double+0x134>
 800ecc0:	2f01      	cmp	r7, #1
 800ecc2:	f000 809a 	beq.w	800edfa <ucdr_deserialize_endian_double+0x186>
 800ecc6:	f898 3007 	ldrb.w	r3, [r8, #7]
 800ecca:	702b      	strb	r3, [r5, #0]
 800eccc:	2e00      	cmp	r6, #0
 800ecce:	d078      	beq.n	800edc2 <ucdr_deserialize_endian_double+0x14e>
 800ecd0:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ecd4:	706b      	strb	r3, [r5, #1]
 800ecd6:	2e01      	cmp	r6, #1
 800ecd8:	f105 0302 	add.w	r3, r5, #2
 800ecdc:	d075      	beq.n	800edca <ucdr_deserialize_endian_double+0x156>
 800ecde:	f898 3005 	ldrb.w	r3, [r8, #5]
 800ece2:	70ab      	strb	r3, [r5, #2]
 800ece4:	2e02      	cmp	r6, #2
 800ece6:	f105 0303 	add.w	r3, r5, #3
 800ecea:	d072      	beq.n	800edd2 <ucdr_deserialize_endian_double+0x15e>
 800ecec:	f898 3004 	ldrb.w	r3, [r8, #4]
 800ecf0:	70eb      	strb	r3, [r5, #3]
 800ecf2:	2e03      	cmp	r6, #3
 800ecf4:	f105 0304 	add.w	r3, r5, #4
 800ecf8:	d06f      	beq.n	800edda <ucdr_deserialize_endian_double+0x166>
 800ecfa:	f898 3003 	ldrb.w	r3, [r8, #3]
 800ecfe:	712b      	strb	r3, [r5, #4]
 800ed00:	2e04      	cmp	r6, #4
 800ed02:	f105 0305 	add.w	r3, r5, #5
 800ed06:	d06c      	beq.n	800ede2 <ucdr_deserialize_endian_double+0x16e>
 800ed08:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ed0c:	716b      	strb	r3, [r5, #5]
 800ed0e:	2e05      	cmp	r6, #5
 800ed10:	f105 0306 	add.w	r3, r5, #6
 800ed14:	d069      	beq.n	800edea <ucdr_deserialize_endian_double+0x176>
 800ed16:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ed1a:	71ab      	strb	r3, [r5, #6]
 800ed1c:	2e06      	cmp	r6, #6
 800ed1e:	f105 0307 	add.w	r3, r5, #7
 800ed22:	d066      	beq.n	800edf2 <ucdr_deserialize_endian_double+0x17e>
 800ed24:	f898 3000 	ldrb.w	r3, [r8]
 800ed28:	71eb      	strb	r3, [r5, #7]
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	68a2      	ldr	r2, [r4, #8]
 800ed2e:	7da0      	ldrb	r0, [r4, #22]
 800ed30:	3308      	adds	r3, #8
 800ed32:	1b9e      	subs	r6, r3, r6
 800ed34:	2308      	movs	r3, #8
 800ed36:	4452      	add	r2, sl
 800ed38:	7563      	strb	r3, [r4, #21]
 800ed3a:	60a2      	str	r2, [r4, #8]
 800ed3c:	6126      	str	r6, [r4, #16]
 800ed3e:	f080 0001 	eor.w	r0, r0, #1
 800ed42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed46:	2108      	movs	r1, #8
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f000 f86d 	bl	800ee28 <ucdr_check_final_buffer_behavior>
 800ed4e:	b308      	cbz	r0, 800ed94 <ucdr_deserialize_endian_double+0x120>
 800ed50:	2f01      	cmp	r7, #1
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	d023      	beq.n	800ed9e <ucdr_deserialize_endian_double+0x12a>
 800ed56:	79db      	ldrb	r3, [r3, #7]
 800ed58:	702b      	strb	r3, [r5, #0]
 800ed5a:	68a3      	ldr	r3, [r4, #8]
 800ed5c:	799b      	ldrb	r3, [r3, #6]
 800ed5e:	706b      	strb	r3, [r5, #1]
 800ed60:	68a3      	ldr	r3, [r4, #8]
 800ed62:	795b      	ldrb	r3, [r3, #5]
 800ed64:	70ab      	strb	r3, [r5, #2]
 800ed66:	68a3      	ldr	r3, [r4, #8]
 800ed68:	791b      	ldrb	r3, [r3, #4]
 800ed6a:	70eb      	strb	r3, [r5, #3]
 800ed6c:	68a3      	ldr	r3, [r4, #8]
 800ed6e:	78db      	ldrb	r3, [r3, #3]
 800ed70:	712b      	strb	r3, [r5, #4]
 800ed72:	68a3      	ldr	r3, [r4, #8]
 800ed74:	789b      	ldrb	r3, [r3, #2]
 800ed76:	716b      	strb	r3, [r5, #5]
 800ed78:	68a3      	ldr	r3, [r4, #8]
 800ed7a:	785b      	ldrb	r3, [r3, #1]
 800ed7c:	71ab      	strb	r3, [r5, #6]
 800ed7e:	68a3      	ldr	r3, [r4, #8]
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	71eb      	strb	r3, [r5, #7]
 800ed84:	68a2      	ldr	r2, [r4, #8]
 800ed86:	6923      	ldr	r3, [r4, #16]
 800ed88:	3208      	adds	r2, #8
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	2108      	movs	r1, #8
 800ed8e:	60a2      	str	r2, [r4, #8]
 800ed90:	6123      	str	r3, [r4, #16]
 800ed92:	7561      	strb	r1, [r4, #21]
 800ed94:	7da0      	ldrb	r0, [r4, #22]
 800ed96:	f080 0001 	eor.w	r0, r0, #1
 800ed9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	606b      	str	r3, [r5, #4]
 800eda4:	602a      	str	r2, [r5, #0]
 800eda6:	e7ed      	b.n	800ed84 <ucdr_deserialize_endian_double+0x110>
 800eda8:	68a2      	ldr	r2, [r4, #8]
 800edaa:	6923      	ldr	r3, [r4, #16]
 800edac:	7da0      	ldrb	r0, [r4, #22]
 800edae:	f884 9015 	strb.w	r9, [r4, #21]
 800edb2:	1b92      	subs	r2, r2, r6
 800edb4:	1b9b      	subs	r3, r3, r6
 800edb6:	60a2      	str	r2, [r4, #8]
 800edb8:	6123      	str	r3, [r4, #16]
 800edba:	f080 0001 	eor.w	r0, r0, #1
 800edbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc2:	68a3      	ldr	r3, [r4, #8]
 800edc4:	799b      	ldrb	r3, [r3, #6]
 800edc6:	706b      	strb	r3, [r5, #1]
 800edc8:	1cab      	adds	r3, r5, #2
 800edca:	68a2      	ldr	r2, [r4, #8]
 800edcc:	7952      	ldrb	r2, [r2, #5]
 800edce:	f803 2b01 	strb.w	r2, [r3], #1
 800edd2:	68a2      	ldr	r2, [r4, #8]
 800edd4:	7912      	ldrb	r2, [r2, #4]
 800edd6:	f803 2b01 	strb.w	r2, [r3], #1
 800edda:	68a2      	ldr	r2, [r4, #8]
 800eddc:	78d2      	ldrb	r2, [r2, #3]
 800edde:	f803 2b01 	strb.w	r2, [r3], #1
 800ede2:	68a2      	ldr	r2, [r4, #8]
 800ede4:	7892      	ldrb	r2, [r2, #2]
 800ede6:	f803 2b01 	strb.w	r2, [r3], #1
 800edea:	68a2      	ldr	r2, [r4, #8]
 800edec:	7852      	ldrb	r2, [r2, #1]
 800edee:	f803 2b01 	strb.w	r2, [r3], #1
 800edf2:	68a2      	ldr	r2, [r4, #8]
 800edf4:	7812      	ldrb	r2, [r2, #0]
 800edf6:	701a      	strb	r2, [r3, #0]
 800edf8:	e797      	b.n	800ed2a <ucdr_deserialize_endian_double+0xb6>
 800edfa:	4641      	mov	r1, r8
 800edfc:	4632      	mov	r2, r6
 800edfe:	4628      	mov	r0, r5
 800ee00:	f00a fc5d 	bl	80196be <memcpy>
 800ee04:	68a1      	ldr	r1, [r4, #8]
 800ee06:	4652      	mov	r2, sl
 800ee08:	19a8      	adds	r0, r5, r6
 800ee0a:	f00a fc58 	bl	80196be <memcpy>
 800ee0e:	e78c      	b.n	800ed2a <ucdr_deserialize_endian_double+0xb6>

0800ee10 <ucdr_check_buffer_available_for>:
 800ee10:	7d83      	ldrb	r3, [r0, #22]
 800ee12:	b93b      	cbnz	r3, 800ee24 <ucdr_check_buffer_available_for+0x14>
 800ee14:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ee18:	4419      	add	r1, r3
 800ee1a:	4288      	cmp	r0, r1
 800ee1c:	bf34      	ite	cc
 800ee1e:	2000      	movcc	r0, #0
 800ee20:	2001      	movcs	r0, #1
 800ee22:	4770      	bx	lr
 800ee24:	2000      	movs	r0, #0
 800ee26:	4770      	bx	lr

0800ee28 <ucdr_check_final_buffer_behavior>:
 800ee28:	7d83      	ldrb	r3, [r0, #22]
 800ee2a:	b943      	cbnz	r3, 800ee3e <ucdr_check_final_buffer_behavior+0x16>
 800ee2c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ee30:	4291      	cmp	r1, r2
 800ee32:	b510      	push	{r4, lr}
 800ee34:	4604      	mov	r4, r0
 800ee36:	d205      	bcs.n	800ee44 <ucdr_check_final_buffer_behavior+0x1c>
 800ee38:	2301      	movs	r3, #1
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	bd10      	pop	{r4, pc}
 800ee3e:	2300      	movs	r3, #0
 800ee40:	4618      	mov	r0, r3
 800ee42:	4770      	bx	lr
 800ee44:	6982      	ldr	r2, [r0, #24]
 800ee46:	b13a      	cbz	r2, 800ee58 <ucdr_check_final_buffer_behavior+0x30>
 800ee48:	69c1      	ldr	r1, [r0, #28]
 800ee4a:	4790      	blx	r2
 800ee4c:	f080 0301 	eor.w	r3, r0, #1
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	75a0      	strb	r0, [r4, #22]
 800ee54:	4618      	mov	r0, r3
 800ee56:	bd10      	pop	{r4, pc}
 800ee58:	2001      	movs	r0, #1
 800ee5a:	75a0      	strb	r0, [r4, #22]
 800ee5c:	e7fa      	b.n	800ee54 <ucdr_check_final_buffer_behavior+0x2c>
 800ee5e:	bf00      	nop

0800ee60 <ucdr_set_on_full_buffer_callback>:
 800ee60:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ee64:	4770      	bx	lr
 800ee66:	bf00      	nop

0800ee68 <ucdr_init_buffer_origin_offset_endian>:
 800ee68:	b410      	push	{r4}
 800ee6a:	9c01      	ldr	r4, [sp, #4]
 800ee6c:	6001      	str	r1, [r0, #0]
 800ee6e:	440a      	add	r2, r1
 800ee70:	6042      	str	r2, [r0, #4]
 800ee72:	190a      	adds	r2, r1, r4
 800ee74:	441c      	add	r4, r3
 800ee76:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ee7a:	6082      	str	r2, [r0, #8]
 800ee7c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ee80:	7503      	strb	r3, [r0, #20]
 800ee82:	2200      	movs	r2, #0
 800ee84:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ee88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee8c:	7542      	strb	r2, [r0, #21]
 800ee8e:	7582      	strb	r2, [r0, #22]
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop

0800ee94 <ucdr_init_buffer_origin_offset>:
 800ee94:	b510      	push	{r4, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	9c04      	ldr	r4, [sp, #16]
 800ee9a:	9400      	str	r4, [sp, #0]
 800ee9c:	2401      	movs	r4, #1
 800ee9e:	9401      	str	r4, [sp, #4]
 800eea0:	f7ff ffe2 	bl	800ee68 <ucdr_init_buffer_origin_offset_endian>
 800eea4:	b002      	add	sp, #8
 800eea6:	bd10      	pop	{r4, pc}

0800eea8 <ucdr_init_buffer_origin>:
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	2400      	movs	r4, #0
 800eeae:	9400      	str	r4, [sp, #0]
 800eeb0:	f7ff fff0 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 800eeb4:	b002      	add	sp, #8
 800eeb6:	bd10      	pop	{r4, pc}

0800eeb8 <ucdr_init_buffer>:
 800eeb8:	2300      	movs	r3, #0
 800eeba:	f7ff bff5 	b.w	800eea8 <ucdr_init_buffer_origin>
 800eebe:	bf00      	nop

0800eec0 <ucdr_alignment>:
 800eec0:	fbb0 f3f1 	udiv	r3, r0, r1
 800eec4:	fb03 0011 	mls	r0, r3, r1, r0
 800eec8:	1a08      	subs	r0, r1, r0
 800eeca:	3901      	subs	r1, #1
 800eecc:	4008      	ands	r0, r1
 800eece:	4770      	bx	lr

0800eed0 <ucdr_buffer_alignment>:
 800eed0:	7d43      	ldrb	r3, [r0, #21]
 800eed2:	428b      	cmp	r3, r1
 800eed4:	d208      	bcs.n	800eee8 <ucdr_buffer_alignment+0x18>
 800eed6:	6900      	ldr	r0, [r0, #16]
 800eed8:	fbb0 f3f1 	udiv	r3, r0, r1
 800eedc:	fb01 0013 	mls	r0, r1, r3, r0
 800eee0:	1a08      	subs	r0, r1, r0
 800eee2:	3901      	subs	r1, #1
 800eee4:	4008      	ands	r0, r1
 800eee6:	4770      	bx	lr
 800eee8:	2000      	movs	r0, #0
 800eeea:	4770      	bx	lr

0800eeec <ucdr_align_to>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4604      	mov	r4, r0
 800eef0:	460d      	mov	r5, r1
 800eef2:	f7ff ffed 	bl	800eed0 <ucdr_buffer_alignment>
 800eef6:	68a3      	ldr	r3, [r4, #8]
 800eef8:	6921      	ldr	r1, [r4, #16]
 800eefa:	7565      	strb	r5, [r4, #21]
 800eefc:	181a      	adds	r2, r3, r0
 800eefe:	6863      	ldr	r3, [r4, #4]
 800ef00:	4293      	cmp	r3, r2
 800ef02:	4408      	add	r0, r1
 800ef04:	bf28      	it	cs
 800ef06:	4613      	movcs	r3, r2
 800ef08:	6120      	str	r0, [r4, #16]
 800ef0a:	60a3      	str	r3, [r4, #8]
 800ef0c:	bd38      	pop	{r3, r4, r5, pc}
 800ef0e:	bf00      	nop

0800ef10 <ucdr_buffer_length>:
 800ef10:	6882      	ldr	r2, [r0, #8]
 800ef12:	6800      	ldr	r0, [r0, #0]
 800ef14:	1a10      	subs	r0, r2, r0
 800ef16:	4770      	bx	lr

0800ef18 <ucdr_buffer_remaining>:
 800ef18:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ef1c:	1a10      	subs	r0, r2, r0
 800ef1e:	4770      	bx	lr

0800ef20 <ucdr_check_final_buffer_behavior_array>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	7d83      	ldrb	r3, [r0, #22]
 800ef24:	b963      	cbnz	r3, 800ef40 <ucdr_check_final_buffer_behavior_array+0x20>
 800ef26:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	460d      	mov	r5, r1
 800ef30:	d308      	bcc.n	800ef44 <ucdr_check_final_buffer_behavior_array+0x24>
 800ef32:	b139      	cbz	r1, 800ef44 <ucdr_check_final_buffer_behavior_array+0x24>
 800ef34:	6983      	ldr	r3, [r0, #24]
 800ef36:	b163      	cbz	r3, 800ef52 <ucdr_check_final_buffer_behavior_array+0x32>
 800ef38:	69c1      	ldr	r1, [r0, #28]
 800ef3a:	4798      	blx	r3
 800ef3c:	75a0      	strb	r0, [r4, #22]
 800ef3e:	b108      	cbz	r0, 800ef44 <ucdr_check_final_buffer_behavior_array+0x24>
 800ef40:	2000      	movs	r0, #0
 800ef42:	bd38      	pop	{r3, r4, r5, pc}
 800ef44:	4620      	mov	r0, r4
 800ef46:	f7ff ffe7 	bl	800ef18 <ucdr_buffer_remaining>
 800ef4a:	42a8      	cmp	r0, r5
 800ef4c:	bf28      	it	cs
 800ef4e:	4628      	movcs	r0, r5
 800ef50:	bd38      	pop	{r3, r4, r5, pc}
 800ef52:	2301      	movs	r3, #1
 800ef54:	7583      	strb	r3, [r0, #22]
 800ef56:	e7f3      	b.n	800ef40 <ucdr_check_final_buffer_behavior_array+0x20>

0800ef58 <ucdr_advance_buffer>:
 800ef58:	b538      	push	{r3, r4, r5, lr}
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	460d      	mov	r5, r1
 800ef5e:	f7ff ff57 	bl	800ee10 <ucdr_check_buffer_available_for>
 800ef62:	b178      	cbz	r0, 800ef84 <ucdr_advance_buffer+0x2c>
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	68a2      	ldr	r2, [r4, #8]
 800ef68:	442b      	add	r3, r5
 800ef6a:	6123      	str	r3, [r4, #16]
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	442a      	add	r2, r5
 800ef70:	7563      	strb	r3, [r4, #21]
 800ef72:	60a2      	str	r2, [r4, #8]
 800ef74:	bd38      	pop	{r3, r4, r5, pc}
 800ef76:	68a2      	ldr	r2, [r4, #8]
 800ef78:	6923      	ldr	r3, [r4, #16]
 800ef7a:	4402      	add	r2, r0
 800ef7c:	4403      	add	r3, r0
 800ef7e:	1a2d      	subs	r5, r5, r0
 800ef80:	60a2      	str	r2, [r4, #8]
 800ef82:	6123      	str	r3, [r4, #16]
 800ef84:	4629      	mov	r1, r5
 800ef86:	2201      	movs	r2, #1
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f7ff ffc9 	bl	800ef20 <ucdr_check_final_buffer_behavior_array>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d1f1      	bne.n	800ef76 <ucdr_advance_buffer+0x1e>
 800ef92:	2301      	movs	r3, #1
 800ef94:	7563      	strb	r3, [r4, #21]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}

0800ef98 <ucdr_serialize_sequence_char>:
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	4615      	mov	r5, r2
 800ef9c:	460e      	mov	r6, r1
 800ef9e:	7d01      	ldrb	r1, [r0, #20]
 800efa0:	4604      	mov	r4, r0
 800efa2:	f7fe fcf7 	bl	800d994 <ucdr_serialize_endian_uint32_t>
 800efa6:	b90d      	cbnz	r5, 800efac <ucdr_serialize_sequence_char+0x14>
 800efa8:	2001      	movs	r0, #1
 800efaa:	bd70      	pop	{r4, r5, r6, pc}
 800efac:	7d21      	ldrb	r1, [r4, #20]
 800efae:	462b      	mov	r3, r5
 800efb0:	4632      	mov	r2, r6
 800efb2:	4620      	mov	r0, r4
 800efb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efb8:	f7fd be38 	b.w	800cc2c <ucdr_serialize_endian_array_char>

0800efbc <ucdr_deserialize_sequence_char>:
 800efbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc0:	461d      	mov	r5, r3
 800efc2:	4616      	mov	r6, r2
 800efc4:	460f      	mov	r7, r1
 800efc6:	461a      	mov	r2, r3
 800efc8:	7d01      	ldrb	r1, [r0, #20]
 800efca:	4604      	mov	r4, r0
 800efcc:	f7fe fe0a 	bl	800dbe4 <ucdr_deserialize_endian_uint32_t>
 800efd0:	682b      	ldr	r3, [r5, #0]
 800efd2:	429e      	cmp	r6, r3
 800efd4:	bf3c      	itt	cc
 800efd6:	2201      	movcc	r2, #1
 800efd8:	75a2      	strbcc	r2, [r4, #22]
 800efda:	b913      	cbnz	r3, 800efe2 <ucdr_deserialize_sequence_char+0x26>
 800efdc:	2001      	movs	r0, #1
 800efde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe2:	7d21      	ldrb	r1, [r4, #20]
 800efe4:	463a      	mov	r2, r7
 800efe6:	4620      	mov	r0, r4
 800efe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efec:	f7fd be50 	b.w	800cc90 <ucdr_deserialize_endian_array_char>

0800eff0 <ucdr_serialize_sequence_uint8_t>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	4615      	mov	r5, r2
 800eff4:	460e      	mov	r6, r1
 800eff6:	7d01      	ldrb	r1, [r0, #20]
 800eff8:	4604      	mov	r4, r0
 800effa:	f7fe fccb 	bl	800d994 <ucdr_serialize_endian_uint32_t>
 800effe:	b90d      	cbnz	r5, 800f004 <ucdr_serialize_sequence_uint8_t+0x14>
 800f000:	2001      	movs	r0, #1
 800f002:	bd70      	pop	{r4, r5, r6, pc}
 800f004:	7d21      	ldrb	r1, [r4, #20]
 800f006:	462b      	mov	r3, r5
 800f008:	4632      	mov	r2, r6
 800f00a:	4620      	mov	r0, r4
 800f00c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f010:	f7fd bea2 	b.w	800cd58 <ucdr_serialize_endian_array_uint8_t>

0800f014 <ucdr_deserialize_sequence_uint8_t>:
 800f014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f018:	461d      	mov	r5, r3
 800f01a:	4616      	mov	r6, r2
 800f01c:	460f      	mov	r7, r1
 800f01e:	461a      	mov	r2, r3
 800f020:	7d01      	ldrb	r1, [r0, #20]
 800f022:	4604      	mov	r4, r0
 800f024:	f7fe fdde 	bl	800dbe4 <ucdr_deserialize_endian_uint32_t>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	429e      	cmp	r6, r3
 800f02c:	bf3c      	itt	cc
 800f02e:	2201      	movcc	r2, #1
 800f030:	75a2      	strbcc	r2, [r4, #22]
 800f032:	b913      	cbnz	r3, 800f03a <ucdr_deserialize_sequence_uint8_t+0x26>
 800f034:	2001      	movs	r0, #1
 800f036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03a:	7d21      	ldrb	r1, [r4, #20]
 800f03c:	463a      	mov	r2, r7
 800f03e:	4620      	mov	r0, r4
 800f040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f044:	f7fd beec 	b.w	800ce20 <ucdr_deserialize_endian_array_uint8_t>

0800f048 <ucdr_serialize_sequence_int32_t>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	4615      	mov	r5, r2
 800f04c:	460e      	mov	r6, r1
 800f04e:	7d01      	ldrb	r1, [r0, #20]
 800f050:	4604      	mov	r4, r0
 800f052:	f7fe fc9f 	bl	800d994 <ucdr_serialize_endian_uint32_t>
 800f056:	b90d      	cbnz	r5, 800f05c <ucdr_serialize_sequence_int32_t+0x14>
 800f058:	2001      	movs	r0, #1
 800f05a:	bd70      	pop	{r4, r5, r6, pc}
 800f05c:	7d21      	ldrb	r1, [r4, #20]
 800f05e:	462b      	mov	r3, r5
 800f060:	4632      	mov	r2, r6
 800f062:	4620      	mov	r0, r4
 800f064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f068:	f7fd bfb8 	b.w	800cfdc <ucdr_serialize_endian_array_int32_t>

0800f06c <ucdr_deserialize_sequence_int32_t>:
 800f06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f070:	461d      	mov	r5, r3
 800f072:	4616      	mov	r6, r2
 800f074:	460f      	mov	r7, r1
 800f076:	461a      	mov	r2, r3
 800f078:	7d01      	ldrb	r1, [r0, #20]
 800f07a:	4604      	mov	r4, r0
 800f07c:	f7fe fdb2 	bl	800dbe4 <ucdr_deserialize_endian_uint32_t>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	429e      	cmp	r6, r3
 800f084:	bf3c      	itt	cc
 800f086:	2201      	movcc	r2, #1
 800f088:	75a2      	strbcc	r2, [r4, #22]
 800f08a:	b913      	cbnz	r3, 800f092 <ucdr_deserialize_sequence_int32_t+0x26>
 800f08c:	2001      	movs	r0, #1
 800f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f092:	7d21      	ldrb	r1, [r4, #20]
 800f094:	463a      	mov	r2, r7
 800f096:	4620      	mov	r0, r4
 800f098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f09c:	f7fd bff4 	b.w	800d088 <ucdr_deserialize_endian_array_int32_t>

0800f0a0 <ucdr_serialize_sequence_float>:
 800f0a0:	b570      	push	{r4, r5, r6, lr}
 800f0a2:	4615      	mov	r5, r2
 800f0a4:	460e      	mov	r6, r1
 800f0a6:	7d01      	ldrb	r1, [r0, #20]
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	f7fe fc73 	bl	800d994 <ucdr_serialize_endian_uint32_t>
 800f0ae:	b90d      	cbnz	r5, 800f0b4 <ucdr_serialize_sequence_float+0x14>
 800f0b0:	2001      	movs	r0, #1
 800f0b2:	bd70      	pop	{r4, r5, r6, pc}
 800f0b4:	7d21      	ldrb	r1, [r4, #20]
 800f0b6:	462b      	mov	r3, r5
 800f0b8:	4632      	mov	r2, r6
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0c0:	f7fe b838 	b.w	800d134 <ucdr_serialize_endian_array_float>

0800f0c4 <ucdr_deserialize_sequence_float>:
 800f0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c8:	461d      	mov	r5, r3
 800f0ca:	4616      	mov	r6, r2
 800f0cc:	460f      	mov	r7, r1
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	7d01      	ldrb	r1, [r0, #20]
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	f7fe fd86 	bl	800dbe4 <ucdr_deserialize_endian_uint32_t>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	429e      	cmp	r6, r3
 800f0dc:	bf3c      	itt	cc
 800f0de:	2201      	movcc	r2, #1
 800f0e0:	75a2      	strbcc	r2, [r4, #22]
 800f0e2:	b913      	cbnz	r3, 800f0ea <ucdr_deserialize_sequence_float+0x26>
 800f0e4:	2001      	movs	r0, #1
 800f0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ea:	7d21      	ldrb	r1, [r4, #20]
 800f0ec:	463a      	mov	r2, r7
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f4:	f7fe b872 	b.w	800d1dc <ucdr_deserialize_endian_array_float>

0800f0f8 <uxr_buffer_delete_entity>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	b08e      	sub	sp, #56	@ 0x38
 800f0fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f102:	2303      	movs	r3, #3
 800f104:	9300      	str	r3, [sp, #0]
 800f106:	2204      	movs	r2, #4
 800f108:	ab06      	add	r3, sp, #24
 800f10a:	4604      	mov	r4, r0
 800f10c:	9103      	str	r1, [sp, #12]
 800f10e:	f001 f951 	bl	80103b4 <uxr_prepare_stream_to_write_submessage>
 800f112:	b918      	cbnz	r0, 800f11c <uxr_buffer_delete_entity+0x24>
 800f114:	4604      	mov	r4, r0
 800f116:	4620      	mov	r0, r4
 800f118:	b00e      	add	sp, #56	@ 0x38
 800f11a:	bd10      	pop	{r4, pc}
 800f11c:	9902      	ldr	r1, [sp, #8]
 800f11e:	aa05      	add	r2, sp, #20
 800f120:	4620      	mov	r0, r4
 800f122:	f001 fa7d 	bl	8010620 <uxr_init_base_object_request>
 800f126:	a905      	add	r1, sp, #20
 800f128:	4604      	mov	r4, r0
 800f12a:	a806      	add	r0, sp, #24
 800f12c:	f002 fcce 	bl	8011acc <uxr_serialize_DELETE_Payload>
 800f130:	4620      	mov	r0, r4
 800f132:	b00e      	add	sp, #56	@ 0x38
 800f134:	bd10      	pop	{r4, pc}
 800f136:	bf00      	nop

0800f138 <uxr_common_create_entity>:
 800f138:	b510      	push	{r4, lr}
 800f13a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f13e:	b08c      	sub	sp, #48	@ 0x30
 800f140:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f144:	f1bc 0f01 	cmp.w	ip, #1
 800f148:	bf0c      	ite	eq
 800f14a:	f003 0201 	andeq.w	r2, r3, #1
 800f14e:	2200      	movne	r2, #0
 800f150:	330e      	adds	r3, #14
 800f152:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800f156:	9101      	str	r1, [sp, #4]
 800f158:	441a      	add	r2, r3
 800f15a:	2301      	movs	r3, #1
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	9903      	ldr	r1, [sp, #12]
 800f160:	ab04      	add	r3, sp, #16
 800f162:	b292      	uxth	r2, r2
 800f164:	4604      	mov	r4, r0
 800f166:	f001 f925 	bl	80103b4 <uxr_prepare_stream_to_write_submessage>
 800f16a:	b918      	cbnz	r0, 800f174 <uxr_common_create_entity+0x3c>
 800f16c:	4604      	mov	r4, r0
 800f16e:	4620      	mov	r0, r4
 800f170:	b00c      	add	sp, #48	@ 0x30
 800f172:	bd10      	pop	{r4, pc}
 800f174:	9902      	ldr	r1, [sp, #8]
 800f176:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f178:	4620      	mov	r0, r4
 800f17a:	f001 fa51 	bl	8010620 <uxr_init_base_object_request>
 800f17e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f180:	4604      	mov	r4, r0
 800f182:	a804      	add	r0, sp, #16
 800f184:	f002 fbfe 	bl	8011984 <uxr_serialize_CREATE_Payload>
 800f188:	4620      	mov	r0, r4
 800f18a:	b00c      	add	sp, #48	@ 0x30
 800f18c:	bd10      	pop	{r4, pc}
 800f18e:	bf00      	nop

0800f190 <uxr_buffer_create_participant_bin>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800f196:	ac11      	add	r4, sp, #68	@ 0x44
 800f198:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800f19c:	2303      	movs	r3, #3
 800f19e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f1a2:	7223      	strb	r3, [r4, #8]
 800f1a4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800f1a6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	7122      	strb	r2, [r4, #4]
 800f1b2:	f88d 1014 	strb.w	r1, [sp, #20]
 800f1b6:	b1cb      	cbz	r3, 800f1ec <uxr_buffer_create_participant_bin+0x5c>
 800f1b8:	f88d 201c 	strb.w	r2, [sp, #28]
 800f1bc:	9308      	str	r3, [sp, #32]
 800f1be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1c2:	a915      	add	r1, sp, #84	@ 0x54
 800f1c4:	a809      	add	r0, sp, #36	@ 0x24
 800f1c6:	f7ff fe77 	bl	800eeb8 <ucdr_init_buffer>
 800f1ca:	a905      	add	r1, sp, #20
 800f1cc:	a809      	add	r0, sp, #36	@ 0x24
 800f1ce:	f001 ffbb 	bl	8011148 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f1d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1d4:	9600      	str	r6, [sp, #0]
 800f1d6:	9401      	str	r4, [sp, #4]
 800f1d8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f1dc:	60e3      	str	r3, [r4, #12]
 800f1de:	4628      	mov	r0, r5
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	f7ff ffa9 	bl	800f138 <uxr_common_create_entity>
 800f1e6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}
 800f1ec:	f88d 301c 	strb.w	r3, [sp, #28]
 800f1f0:	e7e5      	b.n	800f1be <uxr_buffer_create_participant_bin+0x2e>
 800f1f2:	bf00      	nop

0800f1f4 <uxr_buffer_create_topic_bin>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800f1fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f1fe:	9105      	str	r1, [sp, #20]
 800f200:	4605      	mov	r5, r0
 800f202:	a997      	add	r1, sp, #604	@ 0x25c
 800f204:	4618      	mov	r0, r3
 800f206:	2302      	movs	r3, #2
 800f208:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800f20c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800f210:	f000 f996 	bl	800f540 <uxr_object_id_to_raw>
 800f214:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800f216:	9306      	str	r3, [sp, #24]
 800f218:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800f21a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f21c:	2303      	movs	r3, #3
 800f21e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f222:	2301      	movs	r3, #1
 800f224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f228:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f22c:	a917      	add	r1, sp, #92	@ 0x5c
 800f22e:	2300      	movs	r3, #0
 800f230:	a80b      	add	r0, sp, #44	@ 0x2c
 800f232:	f88d 301c 	strb.w	r3, [sp, #28]
 800f236:	f7ff fe3f 	bl	800eeb8 <ucdr_init_buffer>
 800f23a:	a906      	add	r1, sp, #24
 800f23c:	a80b      	add	r0, sp, #44	@ 0x2c
 800f23e:	f001 ffa5 	bl	801118c <uxr_serialize_OBJK_Topic_Binary>
 800f242:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f244:	9316      	str	r3, [sp, #88]	@ 0x58
 800f246:	ac13      	add	r4, sp, #76	@ 0x4c
 800f248:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f24c:	9600      	str	r6, [sp, #0]
 800f24e:	9401      	str	r4, [sp, #4]
 800f250:	b29b      	uxth	r3, r3
 800f252:	4628      	mov	r0, r5
 800f254:	f7ff ff70 	bl	800f138 <uxr_common_create_entity>
 800f258:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800f25c:	bd70      	pop	{r4, r5, r6, pc}
 800f25e:	bf00      	nop

0800f260 <uxr_buffer_create_publisher_bin>:
 800f260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f262:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800f266:	4605      	mov	r5, r0
 800f268:	9105      	str	r1, [sp, #20]
 800f26a:	4618      	mov	r0, r3
 800f26c:	2603      	movs	r6, #3
 800f26e:	a992      	add	r1, sp, #584	@ 0x248
 800f270:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f274:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800f278:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800f27c:	f000 f960 	bl	800f540 <uxr_object_id_to_raw>
 800f280:	2300      	movs	r3, #0
 800f282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f286:	a912      	add	r1, sp, #72	@ 0x48
 800f288:	a806      	add	r0, sp, #24
 800f28a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f28e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f292:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800f296:	f7ff fe0f 	bl	800eeb8 <ucdr_init_buffer>
 800f29a:	a993      	add	r1, sp, #588	@ 0x24c
 800f29c:	a806      	add	r0, sp, #24
 800f29e:	f002 f829 	bl	80112f4 <uxr_serialize_OBJK_Publisher_Binary>
 800f2a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2a4:	9311      	str	r3, [sp, #68]	@ 0x44
 800f2a6:	ac0e      	add	r4, sp, #56	@ 0x38
 800f2a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f2ac:	9700      	str	r7, [sp, #0]
 800f2ae:	9401      	str	r4, [sp, #4]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	f7ff ff40 	bl	800f138 <uxr_common_create_entity>
 800f2b8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800f2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2be:	bf00      	nop

0800f2c0 <uxr_buffer_create_subscriber_bin>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800f2c6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f2ca:	9105      	str	r1, [sp, #20]
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	a992      	add	r1, sp, #584	@ 0x248
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	2304      	movs	r3, #4
 800f2d4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800f2d8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800f2dc:	f000 f930 	bl	800f540 <uxr_object_id_to_raw>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f2e6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800f2ea:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800f2ee:	a912      	add	r1, sp, #72	@ 0x48
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	a806      	add	r0, sp, #24
 800f2f4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f2f8:	f7ff fdde 	bl	800eeb8 <ucdr_init_buffer>
 800f2fc:	a993      	add	r1, sp, #588	@ 0x24c
 800f2fe:	a806      	add	r0, sp, #24
 800f300:	f002 f8a8 	bl	8011454 <uxr_serialize_OBJK_Subscriber_Binary>
 800f304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f306:	9311      	str	r3, [sp, #68]	@ 0x44
 800f308:	ac0e      	add	r4, sp, #56	@ 0x38
 800f30a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f30e:	9600      	str	r6, [sp, #0]
 800f310:	9401      	str	r4, [sp, #4]
 800f312:	b29b      	uxth	r3, r3
 800f314:	4628      	mov	r0, r5
 800f316:	f7ff ff0f 	bl	800f138 <uxr_common_create_entity>
 800f31a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800f31e:	bd70      	pop	{r4, r5, r6, pc}

0800f320 <uxr_buffer_create_datawriter_bin>:
 800f320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f324:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f328:	ac1d      	add	r4, sp, #116	@ 0x74
 800f32a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f32e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800f332:	9105      	str	r1, [sp, #20]
 800f334:	4606      	mov	r6, r0
 800f336:	a9a1      	add	r1, sp, #644	@ 0x284
 800f338:	4618      	mov	r0, r3
 800f33a:	2305      	movs	r3, #5
 800f33c:	7123      	strb	r3, [r4, #4]
 800f33e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800f342:	2703      	movs	r7, #3
 800f344:	f000 f8fc 	bl	800f540 <uxr_object_id_to_raw>
 800f348:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800f34a:	7227      	strb	r7, [r4, #8]
 800f34c:	a90e      	add	r1, sp, #56	@ 0x38
 800f34e:	f000 f8f7 	bl	800f540 <uxr_object_id_to_raw>
 800f352:	2300      	movs	r3, #0
 800f354:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f358:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800f35c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f360:	3d00      	subs	r5, #0
 800f362:	bf18      	it	ne
 800f364:	2501      	movne	r5, #1
 800f366:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f36a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f36e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f372:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f376:	2301      	movs	r3, #1
 800f378:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f37c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f380:	bb8a      	cbnz	r2, 800f3e6 <uxr_buffer_create_datawriter_bin+0xc6>
 800f382:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f386:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f38a:	f04f 0c13 	mov.w	ip, #19
 800f38e:	250b      	movs	r5, #11
 800f390:	2221      	movs	r2, #33	@ 0x21
 800f392:	2111      	movs	r1, #17
 800f394:	2009      	movs	r0, #9
 800f396:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800f39a:	b923      	cbnz	r3, 800f3a6 <uxr_buffer_create_datawriter_bin+0x86>
 800f39c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f3a0:	4672      	mov	r2, lr
 800f3a2:	4661      	mov	r1, ip
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d025      	beq.n	800f3fa <uxr_buffer_create_datawriter_bin+0xda>
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d029      	beq.n	800f406 <uxr_buffer_create_datawriter_bin+0xe6>
 800f3b2:	b32b      	cbz	r3, 800f400 <uxr_buffer_create_datawriter_bin+0xe0>
 800f3b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3b8:	a921      	add	r1, sp, #132	@ 0x84
 800f3ba:	a806      	add	r0, sp, #24
 800f3bc:	f7ff fd7c 	bl	800eeb8 <ucdr_init_buffer>
 800f3c0:	a90e      	add	r1, sp, #56	@ 0x38
 800f3c2:	a806      	add	r0, sp, #24
 800f3c4:	f002 f8f8 	bl	80115b8 <uxr_serialize_OBJK_DataWriter_Binary>
 800f3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3ca:	f8cd 8000 	str.w	r8, [sp]
 800f3ce:	9401      	str	r4, [sp, #4]
 800f3d0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f3d4:	60e3      	str	r3, [r4, #12]
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	f7ff fead 	bl	800f138 <uxr_common_create_entity>
 800f3de:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f3ea:	f04f 0c12 	mov.w	ip, #18
 800f3ee:	250a      	movs	r5, #10
 800f3f0:	2220      	movs	r2, #32
 800f3f2:	2110      	movs	r1, #16
 800f3f4:	2008      	movs	r0, #8
 800f3f6:	2702      	movs	r7, #2
 800f3f8:	e7cd      	b.n	800f396 <uxr_buffer_create_datawriter_bin+0x76>
 800f3fa:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f3fe:	e7d9      	b.n	800f3b4 <uxr_buffer_create_datawriter_bin+0x94>
 800f400:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f404:	e7d6      	b.n	800f3b4 <uxr_buffer_create_datawriter_bin+0x94>
 800f406:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f40a:	e7d3      	b.n	800f3b4 <uxr_buffer_create_datawriter_bin+0x94>

0800f40c <uxr_buffer_create_datareader_bin>:
 800f40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f410:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f414:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f416:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f41a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800f41e:	9105      	str	r1, [sp, #20]
 800f420:	4606      	mov	r6, r0
 800f422:	a9a3      	add	r1, sp, #652	@ 0x28c
 800f424:	4618      	mov	r0, r3
 800f426:	2306      	movs	r3, #6
 800f428:	7123      	strb	r3, [r4, #4]
 800f42a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800f42e:	2703      	movs	r7, #3
 800f430:	f000 f886 	bl	800f540 <uxr_object_id_to_raw>
 800f434:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800f436:	7227      	strb	r7, [r4, #8]
 800f438:	a90e      	add	r1, sp, #56	@ 0x38
 800f43a:	f000 f881 	bl	800f540 <uxr_object_id_to_raw>
 800f43e:	2300      	movs	r3, #0
 800f440:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800f444:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800f448:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800f44c:	3d00      	subs	r5, #0
 800f44e:	bf18      	it	ne
 800f450:	2501      	movne	r5, #1
 800f452:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f456:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800f45a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800f45e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800f462:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f466:	2301      	movs	r3, #1
 800f468:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800f46c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800f470:	bb8a      	cbnz	r2, 800f4d6 <uxr_buffer_create_datareader_bin+0xca>
 800f472:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f476:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800f47a:	f04f 0c13 	mov.w	ip, #19
 800f47e:	250b      	movs	r5, #11
 800f480:	2221      	movs	r2, #33	@ 0x21
 800f482:	2111      	movs	r1, #17
 800f484:	2009      	movs	r0, #9
 800f486:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800f48a:	b923      	cbnz	r3, 800f496 <uxr_buffer_create_datareader_bin+0x8a>
 800f48c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800f490:	4672      	mov	r2, lr
 800f492:	4661      	mov	r1, ip
 800f494:	4628      	mov	r0, r5
 800f496:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d025      	beq.n	800f4ea <uxr_buffer_create_datareader_bin+0xde>
 800f49e:	2b03      	cmp	r3, #3
 800f4a0:	d029      	beq.n	800f4f6 <uxr_buffer_create_datareader_bin+0xea>
 800f4a2:	b32b      	cbz	r3, 800f4f0 <uxr_buffer_create_datareader_bin+0xe4>
 800f4a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4a8:	a923      	add	r1, sp, #140	@ 0x8c
 800f4aa:	a806      	add	r0, sp, #24
 800f4ac:	f7ff fd04 	bl	800eeb8 <ucdr_init_buffer>
 800f4b0:	a90e      	add	r1, sp, #56	@ 0x38
 800f4b2:	a806      	add	r0, sp, #24
 800f4b4:	f002 f844 	bl	8011540 <uxr_serialize_OBJK_DataReader_Binary>
 800f4b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4ba:	f8cd 8000 	str.w	r8, [sp]
 800f4be:	9401      	str	r4, [sp, #4]
 800f4c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f4c4:	60e3      	str	r3, [r4, #12]
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	f7ff fe35 	bl	800f138 <uxr_common_create_entity>
 800f4ce:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800f4da:	f04f 0c12 	mov.w	ip, #18
 800f4de:	250a      	movs	r5, #10
 800f4e0:	2220      	movs	r2, #32
 800f4e2:	2110      	movs	r1, #16
 800f4e4:	2008      	movs	r0, #8
 800f4e6:	2702      	movs	r7, #2
 800f4e8:	e7cd      	b.n	800f486 <uxr_buffer_create_datareader_bin+0x7a>
 800f4ea:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800f4ee:	e7d9      	b.n	800f4a4 <uxr_buffer_create_datareader_bin+0x98>
 800f4f0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800f4f4:	e7d6      	b.n	800f4a4 <uxr_buffer_create_datareader_bin+0x98>
 800f4f6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800f4fa:	e7d3      	b.n	800f4a4 <uxr_buffer_create_datareader_bin+0x98>

0800f4fc <uxr_object_id>:
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	2300      	movs	r3, #0
 800f500:	f88d 1006 	strb.w	r1, [sp, #6]
 800f504:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f508:	f360 030f 	bfi	r3, r0, #0, #16
 800f50c:	f362 431f 	bfi	r3, r2, #16, #16
 800f510:	4618      	mov	r0, r3
 800f512:	b002      	add	sp, #8
 800f514:	4770      	bx	lr
 800f516:	bf00      	nop

0800f518 <uxr_object_id_from_raw>:
 800f518:	7843      	ldrb	r3, [r0, #1]
 800f51a:	7801      	ldrb	r1, [r0, #0]
 800f51c:	b082      	sub	sp, #8
 800f51e:	f003 020f 	and.w	r2, r3, #15
 800f522:	f88d 2006 	strb.w	r2, [sp, #6]
 800f526:	091b      	lsrs	r3, r3, #4
 800f528:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f52c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f530:	2000      	movs	r0, #0
 800f532:	f363 000f 	bfi	r0, r3, #0, #16
 800f536:	f362 401f 	bfi	r0, r2, #16, #16
 800f53a:	b002      	add	sp, #8
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop

0800f540 <uxr_object_id_to_raw>:
 800f540:	4602      	mov	r2, r0
 800f542:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f546:	b082      	sub	sp, #8
 800f548:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800f54c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800f550:	f881 c000 	strb.w	ip, [r1]
 800f554:	7048      	strb	r0, [r1, #1]
 800f556:	b002      	add	sp, #8
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop

0800f55c <on_get_fragmentation_info>:
 800f55c:	b500      	push	{lr}
 800f55e:	b08b      	sub	sp, #44	@ 0x2c
 800f560:	4601      	mov	r1, r0
 800f562:	2204      	movs	r2, #4
 800f564:	a802      	add	r0, sp, #8
 800f566:	f7ff fca7 	bl	800eeb8 <ucdr_init_buffer>
 800f56a:	f10d 0305 	add.w	r3, sp, #5
 800f56e:	f10d 0206 	add.w	r2, sp, #6
 800f572:	a901      	add	r1, sp, #4
 800f574:	a802      	add	r0, sp, #8
 800f576:	f001 f9d5 	bl	8010924 <uxr_read_submessage_header>
 800f57a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f57e:	2b0d      	cmp	r3, #13
 800f580:	d003      	beq.n	800f58a <on_get_fragmentation_info+0x2e>
 800f582:	2000      	movs	r0, #0
 800f584:	b00b      	add	sp, #44	@ 0x2c
 800f586:	f85d fb04 	ldr.w	pc, [sp], #4
 800f58a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f58e:	f013 0f02 	tst.w	r3, #2
 800f592:	bf14      	ite	ne
 800f594:	2002      	movne	r0, #2
 800f596:	2001      	moveq	r0, #1
 800f598:	b00b      	add	sp, #44	@ 0x2c
 800f59a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f59e:	bf00      	nop

0800f5a0 <read_submessage_get_info>:
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	2500      	movs	r5, #0
 800f5a4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f5ae:	460e      	mov	r6, r1
 800f5b0:	a810      	add	r0, sp, #64	@ 0x40
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f5b8:	f00a f819 	bl	80195ee <memset>
 800f5bc:	a903      	add	r1, sp, #12
 800f5be:	4630      	mov	r0, r6
 800f5c0:	f002 fa70 	bl	8011aa4 <uxr_deserialize_GET_INFO_Payload>
 800f5c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f5c8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f001 f81f 	bl	8010610 <uxr_session_header_offset>
 800f5d2:	462b      	mov	r3, r5
 800f5d4:	9000      	str	r0, [sp, #0]
 800f5d6:	220c      	movs	r2, #12
 800f5d8:	a905      	add	r1, sp, #20
 800f5da:	a808      	add	r0, sp, #32
 800f5dc:	f7ff fc5a 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 800f5e0:	a910      	add	r1, sp, #64	@ 0x40
 800f5e2:	a808      	add	r0, sp, #32
 800f5e4:	f002 fad0 	bl	8011b88 <uxr_serialize_INFO_Payload>
 800f5e8:	9b08      	ldr	r3, [sp, #32]
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f000 ffb8 	bl	8010564 <uxr_stamp_session_header>
 800f5f4:	a808      	add	r0, sp, #32
 800f5f6:	f7ff fc8b 	bl	800ef10 <ucdr_buffer_length>
 800f5fa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	a905      	add	r1, sp, #20
 800f600:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f604:	47a0      	blx	r4
 800f606:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f60a:	bd70      	pop	{r4, r5, r6, pc}

0800f60c <write_submessage_acknack.isra.0>:
 800f60c:	b570      	push	{r4, r5, r6, lr}
 800f60e:	b092      	sub	sp, #72	@ 0x48
 800f610:	4605      	mov	r5, r0
 800f612:	460e      	mov	r6, r1
 800f614:	4614      	mov	r4, r2
 800f616:	f000 fffb 	bl	8010610 <uxr_session_header_offset>
 800f61a:	a905      	add	r1, sp, #20
 800f61c:	9000      	str	r0, [sp, #0]
 800f61e:	2300      	movs	r3, #0
 800f620:	a80a      	add	r0, sp, #40	@ 0x28
 800f622:	2211      	movs	r2, #17
 800f624:	f7ff fc36 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 800f628:	2218      	movs	r2, #24
 800f62a:	fb02 5404 	mla	r4, r2, r4, r5
 800f62e:	2300      	movs	r3, #0
 800f630:	2205      	movs	r2, #5
 800f632:	3450      	adds	r4, #80	@ 0x50
 800f634:	210a      	movs	r1, #10
 800f636:	a80a      	add	r0, sp, #40	@ 0x28
 800f638:	f001 f95a 	bl	80108f0 <uxr_buffer_submessage_header>
 800f63c:	a903      	add	r1, sp, #12
 800f63e:	4620      	mov	r0, r4
 800f640:	f007 fbfe 	bl	8016e40 <uxr_compute_acknack>
 800f644:	ba40      	rev16	r0, r0
 800f646:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f64a:	a903      	add	r1, sp, #12
 800f64c:	a80a      	add	r0, sp, #40	@ 0x28
 800f64e:	f88d 6010 	strb.w	r6, [sp, #16]
 800f652:	f002 fb09 	bl	8011c68 <uxr_serialize_ACKNACK_Payload>
 800f656:	2200      	movs	r2, #0
 800f658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f65a:	4611      	mov	r1, r2
 800f65c:	4628      	mov	r0, r5
 800f65e:	f000 ff81 	bl	8010564 <uxr_stamp_session_header>
 800f662:	a80a      	add	r0, sp, #40	@ 0x28
 800f664:	f7ff fc54 	bl	800ef10 <ucdr_buffer_length>
 800f668:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f66a:	4602      	mov	r2, r0
 800f66c:	a905      	add	r1, sp, #20
 800f66e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f672:	47a0      	blx	r4
 800f674:	b012      	add	sp, #72	@ 0x48
 800f676:	bd70      	pop	{r4, r5, r6, pc}

0800f678 <uxr_init_session>:
 800f678:	b510      	push	{r4, lr}
 800f67a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f6b0 <uxr_init_session+0x38>
 800f67e:	2300      	movs	r3, #0
 800f680:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f684:	4604      	mov	r4, r0
 800f686:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f68a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f68e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f692:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f696:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f69a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f69e:	2181      	movs	r1, #129	@ 0x81
 800f6a0:	f000 fecc 	bl	801043c <uxr_init_session_info>
 800f6a4:	f104 0008 	add.w	r0, r4, #8
 800f6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6ac:	f001 b83c 	b.w	8010728 <uxr_init_stream_storage>
	...

0800f6b8 <uxr_set_status_callback>:
 800f6b8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop

0800f6c0 <uxr_set_topic_callback>:
 800f6c0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop

0800f6c8 <uxr_set_request_callback>:
 800f6c8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop

0800f6d0 <uxr_set_reply_callback>:
 800f6d0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop

0800f6d8 <uxr_create_output_best_effort_stream>:
 800f6d8:	b510      	push	{r4, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	e9cd 2100 	strd	r2, r1, [sp]
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	f000 ff95 	bl	8010610 <uxr_session_header_offset>
 800f6e6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	f104 0008 	add.w	r0, r4, #8
 800f6f0:	b004      	add	sp, #16
 800f6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6f6:	f001 b861 	b.w	80107bc <uxr_add_output_best_effort_buffer>
 800f6fa:	bf00      	nop

0800f6fc <uxr_create_output_reliable_stream>:
 800f6fc:	b510      	push	{r4, lr}
 800f6fe:	b088      	sub	sp, #32
 800f700:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800f704:	4604      	mov	r4, r0
 800f706:	9303      	str	r3, [sp, #12]
 800f708:	f000 ff82 	bl	8010610 <uxr_session_header_offset>
 800f70c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f710:	9000      	str	r0, [sp, #0]
 800f712:	9905      	ldr	r1, [sp, #20]
 800f714:	f104 0008 	add.w	r0, r4, #8
 800f718:	f001 f864 	bl	80107e4 <uxr_add_output_reliable_buffer>
 800f71c:	2200      	movs	r2, #0
 800f71e:	b2c3      	uxtb	r3, r0
 800f720:	f363 0207 	bfi	r2, r3, #0, #8
 800f724:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f728:	f363 220f 	bfi	r2, r3, #8, #8
 800f72c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f730:	f363 4217 	bfi	r2, r3, #16, #8
 800f734:	0e03      	lsrs	r3, r0, #24
 800f736:	f363 621f 	bfi	r2, r3, #24, #8
 800f73a:	4610      	mov	r0, r2
 800f73c:	b008      	add	sp, #32
 800f73e:	bd10      	pop	{r4, pc}

0800f740 <uxr_create_input_best_effort_stream>:
 800f740:	b082      	sub	sp, #8
 800f742:	3008      	adds	r0, #8
 800f744:	b002      	add	sp, #8
 800f746:	f001 b867 	b.w	8010818 <uxr_add_input_best_effort_buffer>
 800f74a:	bf00      	nop

0800f74c <uxr_create_input_reliable_stream>:
 800f74c:	b510      	push	{r4, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	4c0b      	ldr	r4, [pc, #44]	@ (800f780 <uxr_create_input_reliable_stream+0x34>)
 800f752:	9400      	str	r4, [sp, #0]
 800f754:	3008      	adds	r0, #8
 800f756:	f001 f875 	bl	8010844 <uxr_add_input_reliable_buffer>
 800f75a:	2200      	movs	r2, #0
 800f75c:	b2c3      	uxtb	r3, r0
 800f75e:	f363 0207 	bfi	r2, r3, #0, #8
 800f762:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f766:	f363 220f 	bfi	r2, r3, #8, #8
 800f76a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f76e:	f363 4217 	bfi	r2, r3, #16, #8
 800f772:	0e03      	lsrs	r3, r0, #24
 800f774:	f363 621f 	bfi	r2, r3, #24, #8
 800f778:	4610      	mov	r0, r2
 800f77a:	b004      	add	sp, #16
 800f77c:	bd10      	pop	{r4, pc}
 800f77e:	bf00      	nop
 800f780:	0800f55d 	.word	0x0800f55d

0800f784 <uxr_epoch_nanos>:
 800f784:	b510      	push	{r4, lr}
 800f786:	4604      	mov	r4, r0
 800f788:	f001 f912 	bl	80109b0 <uxr_nanos>
 800f78c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f790:	1ac0      	subs	r0, r0, r3
 800f792:	eb61 0102 	sbc.w	r1, r1, r2
 800f796:	bd10      	pop	{r4, pc}

0800f798 <uxr_flash_output_streams>:
 800f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f79c:	7e03      	ldrb	r3, [r0, #24]
 800f79e:	b084      	sub	sp, #16
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d035      	beq.n	800f812 <uxr_flash_output_streams+0x7a>
 800f7a6:	f04f 0900 	mov.w	r9, #0
 800f7aa:	4648      	mov	r0, r9
 800f7ac:	f10d 0802 	add.w	r8, sp, #2
 800f7b0:	af03      	add	r7, sp, #12
 800f7b2:	ae02      	add	r6, sp, #8
 800f7b4:	e006      	b.n	800f7c4 <uxr_flash_output_streams+0x2c>
 800f7b6:	7e23      	ldrb	r3, [r4, #24]
 800f7b8:	f109 0901 	add.w	r9, r9, #1
 800f7bc:	fa5f f089 	uxtb.w	r0, r9
 800f7c0:	4283      	cmp	r3, r0
 800f7c2:	d926      	bls.n	800f812 <uxr_flash_output_streams+0x7a>
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	4611      	mov	r1, r2
 800f7c8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f7cc:	f000 ff58 	bl	8010680 <uxr_stream_id>
 800f7d0:	3508      	adds	r5, #8
 800f7d2:	4684      	mov	ip, r0
 800f7d4:	4643      	mov	r3, r8
 800f7d6:	463a      	mov	r2, r7
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	f8cd c004 	str.w	ip, [sp, #4]
 800f7e0:	f007 fbb4 	bl	8016f4c <uxr_prepare_best_effort_buffer_to_send>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d0e6      	beq.n	800f7b6 <uxr_flash_output_streams+0x1e>
 800f7e8:	9b02      	ldr	r3, [sp, #8]
 800f7ea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f7ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f000 feb6 	bl	8010564 <uxr_stamp_session_header>
 800f7f8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f7fa:	9a03      	ldr	r2, [sp, #12]
 800f7fc:	685d      	ldr	r5, [r3, #4]
 800f7fe:	6818      	ldr	r0, [r3, #0]
 800f800:	9902      	ldr	r1, [sp, #8]
 800f802:	47a8      	blx	r5
 800f804:	f109 0901 	add.w	r9, r9, #1
 800f808:	7e23      	ldrb	r3, [r4, #24]
 800f80a:	fa5f f089 	uxtb.w	r0, r9
 800f80e:	4283      	cmp	r3, r0
 800f810:	d8d8      	bhi.n	800f7c4 <uxr_flash_output_streams+0x2c>
 800f812:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f816:	b38b      	cbz	r3, 800f87c <uxr_flash_output_streams+0xe4>
 800f818:	f04f 0900 	mov.w	r9, #0
 800f81c:	f10d 0802 	add.w	r8, sp, #2
 800f820:	af03      	add	r7, sp, #12
 800f822:	ae02      	add	r6, sp, #8
 800f824:	4648      	mov	r0, r9
 800f826:	2201      	movs	r2, #1
 800f828:	2102      	movs	r1, #2
 800f82a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f82e:	f000 ff27 	bl	8010680 <uxr_stream_id>
 800f832:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f836:	3520      	adds	r5, #32
 800f838:	9001      	str	r0, [sp, #4]
 800f83a:	e00d      	b.n	800f858 <uxr_flash_output_streams+0xc0>
 800f83c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f840:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f844:	9b02      	ldr	r3, [sp, #8]
 800f846:	f000 fe8d 	bl	8010564 <uxr_stamp_session_header>
 800f84a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f84c:	9a03      	ldr	r2, [sp, #12]
 800f84e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f852:	9902      	ldr	r1, [sp, #8]
 800f854:	6818      	ldr	r0, [r3, #0]
 800f856:	47d0      	blx	sl
 800f858:	4643      	mov	r3, r8
 800f85a:	463a      	mov	r2, r7
 800f85c:	4631      	mov	r1, r6
 800f85e:	4628      	mov	r0, r5
 800f860:	f007 fd92 	bl	8017388 <uxr_prepare_next_reliable_buffer_to_send>
 800f864:	4603      	mov	r3, r0
 800f866:	4620      	mov	r0, r4
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1e7      	bne.n	800f83c <uxr_flash_output_streams+0xa4>
 800f86c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f870:	f109 0901 	add.w	r9, r9, #1
 800f874:	fa5f f089 	uxtb.w	r0, r9
 800f878:	4283      	cmp	r3, r0
 800f87a:	d8d4      	bhi.n	800f826 <uxr_flash_output_streams+0x8e>
 800f87c:	b004      	add	sp, #16
 800f87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f882:	bf00      	nop

0800f884 <read_submessage_info>:
 800f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f888:	460d      	mov	r5, r1
 800f88a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f88e:	4669      	mov	r1, sp
 800f890:	4607      	mov	r7, r0
 800f892:	4628      	mov	r0, r5
 800f894:	f002 f814 	bl	80118c0 <uxr_deserialize_BaseObjectReply>
 800f898:	a902      	add	r1, sp, #8
 800f89a:	4604      	mov	r4, r0
 800f89c:	4628      	mov	r0, r5
 800f89e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f8a2:	f7fd fdb1 	bl	800d408 <ucdr_deserialize_bool>
 800f8a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f8aa:	4004      	ands	r4, r0
 800f8ac:	b2e4      	uxtb	r4, r4
 800f8ae:	b95b      	cbnz	r3, 800f8c8 <read_submessage_info+0x44>
 800f8b0:	a987      	add	r1, sp, #540	@ 0x21c
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f7fd fda8 	bl	800d408 <ucdr_deserialize_bool>
 800f8b8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f8bc:	4606      	mov	r6, r0
 800f8be:	b94b      	cbnz	r3, 800f8d4 <read_submessage_info+0x50>
 800f8c0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c8:	a903      	add	r1, sp, #12
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f001 fea0 	bl	8011610 <uxr_deserialize_ObjectVariant>
 800f8d0:	4004      	ands	r4, r0
 800f8d2:	e7ed      	b.n	800f8b0 <read_submessage_info+0x2c>
 800f8d4:	a988      	add	r1, sp, #544	@ 0x220
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	f7fd fdc4 	bl	800d464 <ucdr_deserialize_uint8_t>
 800f8dc:	4234      	tst	r4, r6
 800f8de:	d0ef      	beq.n	800f8c0 <read_submessage_info+0x3c>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d0ed      	beq.n	800f8c0 <read_submessage_info+0x3c>
 800f8e4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f8e8:	2b0d      	cmp	r3, #13
 800f8ea:	d1e9      	bne.n	800f8c0 <read_submessage_info+0x3c>
 800f8ec:	a98a      	add	r1, sp, #552	@ 0x228
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f7fe fb5e 	bl	800dfb0 <ucdr_deserialize_int16_t>
 800f8f4:	b140      	cbz	r0, 800f908 <read_submessage_info+0x84>
 800f8f6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	dd07      	ble.n	800f90e <read_submessage_info+0x8a>
 800f8fe:	f1b8 0f00 	cmp.w	r8, #0
 800f902:	bf14      	ite	ne
 800f904:	2001      	movne	r0, #1
 800f906:	2002      	moveq	r0, #2
 800f908:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f90c:	e7d8      	b.n	800f8c0 <read_submessage_info+0x3c>
 800f90e:	2000      	movs	r0, #0
 800f910:	e7fa      	b.n	800f908 <read_submessage_info+0x84>
 800f912:	bf00      	nop

0800f914 <read_submessage_list>:
 800f914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f918:	b097      	sub	sp, #92	@ 0x5c
 800f91a:	4ec1      	ldr	r6, [pc, #772]	@ (800fc20 <read_submessage_list+0x30c>)
 800f91c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f91e:	4604      	mov	r4, r0
 800f920:	460d      	mov	r5, r1
 800f922:	f04f 0801 	mov.w	r8, #1
 800f926:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f92a:	aa0c      	add	r2, sp, #48	@ 0x30
 800f92c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f930:	4628      	mov	r0, r5
 800f932:	f000 fff7 	bl	8010924 <uxr_read_submessage_header>
 800f936:	2800      	cmp	r0, #0
 800f938:	f000 813e 	beq.w	800fbb8 <read_submessage_list+0x2a4>
 800f93c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f940:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f944:	3b02      	subs	r3, #2
 800f946:	2b0d      	cmp	r3, #13
 800f948:	d8ed      	bhi.n	800f926 <read_submessage_list+0x12>
 800f94a:	a101      	add	r1, pc, #4	@ (adr r1, 800f950 <read_submessage_list+0x3c>)
 800f94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f950:	0800fbaf 	.word	0x0800fbaf
 800f954:	0800f927 	.word	0x0800f927
 800f958:	0800fb9f 	.word	0x0800fb9f
 800f95c:	0800fb3d 	.word	0x0800fb3d
 800f960:	0800fb33 	.word	0x0800fb33
 800f964:	0800f927 	.word	0x0800f927
 800f968:	0800f927 	.word	0x0800f927
 800f96c:	0800fa93 	.word	0x0800fa93
 800f970:	0800fa23 	.word	0x0800fa23
 800f974:	0800f9e3 	.word	0x0800f9e3
 800f978:	0800f927 	.word	0x0800f927
 800f97c:	0800f927 	.word	0x0800f927
 800f980:	0800f927 	.word	0x0800f927
 800f984:	0800f989 	.word	0x0800f989
 800f988:	a910      	add	r1, sp, #64	@ 0x40
 800f98a:	4628      	mov	r0, r5
 800f98c:	f002 f9bc 	bl	8011d08 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f990:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f994:	f1b9 0f00 	cmp.w	r9, #0
 800f998:	f000 8116 	beq.w	800fbc8 <read_submessage_list+0x2b4>
 800f99c:	f001 f808 	bl	80109b0 <uxr_nanos>
 800f9a0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	468c      	mov	ip, r1
 800f9ac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f9b0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f9b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f9b6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f9b8:	468c      	mov	ip, r1
 800f9ba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f9be:	46e2      	mov	sl, ip
 800f9c0:	46bc      	mov	ip, r7
 800f9c2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f9c6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f9ca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f9ce:	e9cd 7100 	strd	r7, r1, [sp]
 800f9d2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f9d6:	9106      	str	r1, [sp, #24]
 800f9d8:	4620      	mov	r0, r4
 800f9da:	47c8      	blx	r9
 800f9dc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f9e0:	e7a1      	b.n	800f926 <read_submessage_list+0x12>
 800f9e2:	a910      	add	r1, sp, #64	@ 0x40
 800f9e4:	4628      	mov	r0, r5
 800f9e6:	f002 f97d 	bl	8011ce4 <uxr_deserialize_HEARTBEAT_Payload>
 800f9ea:	2100      	movs	r1, #0
 800f9ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f9f0:	f000 fe70 	bl	80106d4 <uxr_stream_id_from_raw>
 800f9f4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f9f8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f9fa:	4639      	mov	r1, r7
 800f9fc:	f104 0008 	add.w	r0, r4, #8
 800fa00:	f000 ff56 	bl	80108b0 <uxr_get_input_reliable_stream>
 800fa04:	2800      	cmp	r0, #0
 800fa06:	d08e      	beq.n	800f926 <read_submessage_list+0x12>
 800fa08:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800fa0c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800fa10:	f007 fa0a 	bl	8016e28 <uxr_process_heartbeat>
 800fa14:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800fa18:	463a      	mov	r2, r7
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f7ff fdf6 	bl	800f60c <write_submessage_acknack.isra.0>
 800fa20:	e781      	b.n	800f926 <read_submessage_list+0x12>
 800fa22:	a910      	add	r1, sp, #64	@ 0x40
 800fa24:	4628      	mov	r0, r5
 800fa26:	f002 f935 	bl	8011c94 <uxr_deserialize_ACKNACK_Payload>
 800fa2a:	2100      	movs	r1, #0
 800fa2c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800fa30:	f000 fe50 	bl	80106d4 <uxr_stream_id_from_raw>
 800fa34:	900d      	str	r0, [sp, #52]	@ 0x34
 800fa36:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fa3a:	f104 0008 	add.w	r0, r4, #8
 800fa3e:	f000 ff23 	bl	8010888 <uxr_get_output_reliable_stream>
 800fa42:	4607      	mov	r7, r0
 800fa44:	2800      	cmp	r0, #0
 800fa46:	f43f af6e 	beq.w	800f926 <read_submessage_list+0x12>
 800fa4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800fa4e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800fa52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800fa56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fa5a:	b289      	uxth	r1, r1
 800fa5c:	f007 fd3e 	bl	80174dc <uxr_process_acknack>
 800fa60:	4638      	mov	r0, r7
 800fa62:	f007 fcfb 	bl	801745c <uxr_begin_output_nack_buffer_it>
 800fa66:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fa6a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800fa6e:	e006      	b.n	800fa7e <read_submessage_list+0x16a>
 800fa70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fa74:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fa78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fa7a:	6818      	ldr	r0, [r3, #0]
 800fa7c:	47c8      	blx	r9
 800fa7e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800fa82:	aa0f      	add	r2, sp, #60	@ 0x3c
 800fa84:	4651      	mov	r1, sl
 800fa86:	4638      	mov	r0, r7
 800fa88:	f007 fcea 	bl	8017460 <uxr_next_reliable_nack_buffer_to_send>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d1ef      	bne.n	800fa70 <read_submessage_list+0x15c>
 800fa90:	e749      	b.n	800f926 <read_submessage_list+0x12>
 800fa92:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800fa96:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800fa9a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800fa9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800faa2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800faa6:	4651      	mov	r1, sl
 800faa8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800faac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800fab0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800fab4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800fab8:	4628      	mov	r0, r5
 800faba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800fabe:	f001 fe49 	bl	8011754 <uxr_deserialize_BaseObjectRequest>
 800fac2:	4650      	mov	r0, sl
 800fac4:	a90f      	add	r1, sp, #60	@ 0x3c
 800fac6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800faca:	f000 fdc7 	bl	801065c <uxr_parse_base_object_request>
 800face:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800fad2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fad4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800fad8:	9110      	str	r1, [sp, #64]	@ 0x40
 800fada:	3f04      	subs	r7, #4
 800fadc:	f009 090e 	and.w	r9, r9, #14
 800fae0:	b2bf      	uxth	r7, r7
 800fae2:	f1bb 0f00 	cmp.w	fp, #0
 800fae6:	d006      	beq.n	800faf6 <read_submessage_list+0x1e2>
 800fae8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	4652      	mov	r2, sl
 800faf0:	2300      	movs	r3, #0
 800faf2:	4620      	mov	r0, r4
 800faf4:	47d8      	blx	fp
 800faf6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800faf8:	b16a      	cbz	r2, 800fb16 <read_submessage_list+0x202>
 800fafa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fafc:	2100      	movs	r1, #0
 800fafe:	3802      	subs	r0, #2
 800fb00:	e002      	b.n	800fb08 <read_submessage_list+0x1f4>
 800fb02:	3101      	adds	r1, #1
 800fb04:	4291      	cmp	r1, r2
 800fb06:	d006      	beq.n	800fb16 <read_submessage_list+0x202>
 800fb08:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fb0c:	4553      	cmp	r3, sl
 800fb0e:	d1f8      	bne.n	800fb02 <read_submessage_list+0x1ee>
 800fb10:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fb12:	2200      	movs	r2, #0
 800fb14:	545a      	strb	r2, [r3, r1]
 800fb16:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800fb1a:	9102      	str	r1, [sp, #8]
 800fb1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fb1e:	9101      	str	r1, [sp, #4]
 800fb20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fb22:	9100      	str	r1, [sp, #0]
 800fb24:	464b      	mov	r3, r9
 800fb26:	463a      	mov	r2, r7
 800fb28:	4629      	mov	r1, r5
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f007 fd94 	bl	8017658 <read_submessage_format>
 800fb30:	e6f9      	b.n	800f926 <read_submessage_list+0x12>
 800fb32:	4629      	mov	r1, r5
 800fb34:	4620      	mov	r0, r4
 800fb36:	f7ff fea5 	bl	800f884 <read_submessage_info>
 800fb3a:	e6f4      	b.n	800f926 <read_submessage_list+0x12>
 800fb3c:	2a00      	cmp	r2, #0
 800fb3e:	d03e      	beq.n	800fbbe <read_submessage_list+0x2aa>
 800fb40:	a910      	add	r1, sp, #64	@ 0x40
 800fb42:	4628      	mov	r0, r5
 800fb44:	f002 f802 	bl	8011b4c <uxr_deserialize_STATUS_Payload>
 800fb48:	a90e      	add	r1, sp, #56	@ 0x38
 800fb4a:	aa0d      	add	r2, sp, #52	@ 0x34
 800fb4c:	a810      	add	r0, sp, #64	@ 0x40
 800fb4e:	f000 fd85 	bl	801065c <uxr_parse_base_object_request>
 800fb52:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800fb56:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fb58:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800fb5c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800fb60:	910f      	str	r1, [sp, #60]	@ 0x3c
 800fb62:	f1ba 0f00 	cmp.w	sl, #0
 800fb66:	d006      	beq.n	800fb76 <read_submessage_list+0x262>
 800fb68:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800fb6c:	9300      	str	r3, [sp, #0]
 800fb6e:	463a      	mov	r2, r7
 800fb70:	464b      	mov	r3, r9
 800fb72:	4620      	mov	r0, r4
 800fb74:	47d0      	blx	sl
 800fb76:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800fb78:	2a00      	cmp	r2, #0
 800fb7a:	f43f aed4 	beq.w	800f926 <read_submessage_list+0x12>
 800fb7e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800fb80:	2100      	movs	r1, #0
 800fb82:	3802      	subs	r0, #2
 800fb84:	e003      	b.n	800fb8e <read_submessage_list+0x27a>
 800fb86:	3101      	adds	r1, #1
 800fb88:	4291      	cmp	r1, r2
 800fb8a:	f43f aecc 	beq.w	800f926 <read_submessage_list+0x12>
 800fb8e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800fb92:	42bb      	cmp	r3, r7
 800fb94:	d1f7      	bne.n	800fb86 <read_submessage_list+0x272>
 800fb96:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800fb98:	f803 9001 	strb.w	r9, [r3, r1]
 800fb9c:	e6c3      	b.n	800f926 <read_submessage_list+0x12>
 800fb9e:	2a00      	cmp	r2, #0
 800fba0:	f47f aec1 	bne.w	800f926 <read_submessage_list+0x12>
 800fba4:	4629      	mov	r1, r5
 800fba6:	4620      	mov	r0, r4
 800fba8:	f000 fc9e 	bl	80104e8 <uxr_read_create_session_status>
 800fbac:	e6bb      	b.n	800f926 <read_submessage_list+0x12>
 800fbae:	4629      	mov	r1, r5
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f7ff fcf5 	bl	800f5a0 <read_submessage_get_info>
 800fbb6:	e6b6      	b.n	800f926 <read_submessage_list+0x12>
 800fbb8:	b017      	add	sp, #92	@ 0x5c
 800fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbe:	4629      	mov	r1, r5
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f000 fc9d 	bl	8010500 <uxr_read_delete_session_status>
 800fbc6:	e6ae      	b.n	800f926 <read_submessage_list+0x12>
 800fbc8:	f000 fef2 	bl	80109b0 <uxr_nanos>
 800fbcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fbce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800fbd0:	464f      	mov	r7, r9
 800fbd2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800fbd6:	1812      	adds	r2, r2, r0
 800fbd8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fbda:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800fbdc:	eb47 0101 	adc.w	r1, r7, r1
 800fbe0:	464f      	mov	r7, r9
 800fbe2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800fbe6:	463b      	mov	r3, r7
 800fbe8:	4684      	mov	ip, r0
 800fbea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800fbee:	fbc7 0906 	smlal	r0, r9, r7, r6
 800fbf2:	eb1c 0c00 	adds.w	ip, ip, r0
 800fbf6:	464f      	mov	r7, r9
 800fbf8:	eb43 0307 	adc.w	r3, r3, r7
 800fbfc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800fc00:	eb61 0303 	sbc.w	r3, r1, r3
 800fc04:	0fda      	lsrs	r2, r3, #31
 800fc06:	eb12 020c 	adds.w	r2, r2, ip
 800fc0a:	f143 0300 	adc.w	r3, r3, #0
 800fc0e:	0852      	lsrs	r2, r2, #1
 800fc10:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800fc14:	105b      	asrs	r3, r3, #1
 800fc16:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800fc1a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800fc1e:	e6dd      	b.n	800f9dc <read_submessage_list+0xc8>
 800fc20:	3b9aca00 	.word	0x3b9aca00

0800fc24 <listen_message_reliably>:
 800fc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc28:	1e0b      	subs	r3, r1, #0
 800fc2a:	b09d      	sub	sp, #116	@ 0x74
 800fc2c:	bfb8      	it	lt
 800fc2e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800fc32:	4680      	mov	r8, r0
 800fc34:	9305      	str	r3, [sp, #20]
 800fc36:	f000 fea1 	bl	801097c <uxr_millis>
 800fc3a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800fc3e:	4681      	mov	r9, r0
 800fc40:	2a00      	cmp	r2, #0
 800fc42:	f000 80a1 	beq.w	800fd88 <listen_message_reliably+0x164>
 800fc46:	2600      	movs	r6, #0
 800fc48:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fc4c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fc50:	9303      	str	r3, [sp, #12]
 800fc52:	4630      	mov	r0, r6
 800fc54:	460f      	mov	r7, r1
 800fc56:	e00f      	b.n	800fc78 <listen_message_reliably+0x54>
 800fc58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fc5c:	9903      	ldr	r1, [sp, #12]
 800fc5e:	455a      	cmp	r2, fp
 800fc60:	f106 0601 	add.w	r6, r6, #1
 800fc64:	eb73 0101 	sbcs.w	r1, r3, r1
 800fc68:	b2f0      	uxtb	r0, r6
 800fc6a:	da01      	bge.n	800fc70 <listen_message_reliably+0x4c>
 800fc6c:	4693      	mov	fp, r2
 800fc6e:	9303      	str	r3, [sp, #12]
 800fc70:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fc74:	4283      	cmp	r3, r0
 800fc76:	d960      	bls.n	800fd3a <listen_message_reliably+0x116>
 800fc78:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800fc7c:	2102      	movs	r1, #2
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f000 fcfe 	bl	8010680 <uxr_stream_id>
 800fc84:	00e4      	lsls	r4, r4, #3
 800fc86:	f104 0520 	add.w	r5, r4, #32
 800fc8a:	4445      	add	r5, r8
 800fc8c:	4601      	mov	r1, r0
 800fc8e:	463b      	mov	r3, r7
 800fc90:	464a      	mov	r2, r9
 800fc92:	4628      	mov	r0, r5
 800fc94:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc96:	f007 fbb7 	bl	8017408 <uxr_update_output_stream_heartbeat_timestamp>
 800fc9a:	eb08 0304 	add.w	r3, r8, r4
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d0da      	beq.n	800fc58 <listen_message_reliably+0x34>
 800fca2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fca6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800fcaa:	9304      	str	r3, [sp, #16]
 800fcac:	4640      	mov	r0, r8
 800fcae:	f000 fcaf 	bl	8010610 <uxr_session_header_offset>
 800fcb2:	3501      	adds	r5, #1
 800fcb4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800fcb8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fcbc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	2211      	movs	r2, #17
 800fcc4:	9000      	str	r0, [sp, #0]
 800fcc6:	a90c      	add	r1, sp, #48	@ 0x30
 800fcc8:	4650      	mov	r0, sl
 800fcca:	f7ff f8e3 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 800fcce:	2300      	movs	r3, #0
 800fcd0:	2205      	movs	r2, #5
 800fcd2:	210b      	movs	r1, #11
 800fcd4:	4650      	mov	r0, sl
 800fcd6:	f000 fe0b 	bl	80108f0 <uxr_buffer_submessage_header>
 800fcda:	8968      	ldrh	r0, [r5, #10]
 800fcdc:	2101      	movs	r1, #1
 800fcde:	f007 fd85 	bl	80177ec <uxr_seq_num_add>
 800fce2:	892b      	ldrh	r3, [r5, #8]
 800fce4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800fce8:	4602      	mov	r2, r0
 800fcea:	9b04      	ldr	r3, [sp, #16]
 800fcec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800fcf0:	a90a      	add	r1, sp, #40	@ 0x28
 800fcf2:	4650      	mov	r0, sl
 800fcf4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800fcf8:	f001 ffe0 	bl	8011cbc <uxr_serialize_HEARTBEAT_Payload>
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	4611      	mov	r1, r2
 800fd00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fd02:	4640      	mov	r0, r8
 800fd04:	f000 fc2e 	bl	8010564 <uxr_stamp_session_header>
 800fd08:	4650      	mov	r0, sl
 800fd0a:	f7ff f901 	bl	800ef10 <ucdr_buffer_length>
 800fd0e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800fd12:	4602      	mov	r2, r0
 800fd14:	a90c      	add	r1, sp, #48	@ 0x30
 800fd16:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fd1a:	4444      	add	r4, r8
 800fd1c:	47a8      	blx	r5
 800fd1e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800fd22:	9903      	ldr	r1, [sp, #12]
 800fd24:	455a      	cmp	r2, fp
 800fd26:	f106 0601 	add.w	r6, r6, #1
 800fd2a:	eb73 0101 	sbcs.w	r1, r3, r1
 800fd2e:	b2f0      	uxtb	r0, r6
 800fd30:	db9c      	blt.n	800fc6c <listen_message_reliably+0x48>
 800fd32:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800fd36:	4283      	cmp	r3, r0
 800fd38:	d89e      	bhi.n	800fc78 <listen_message_reliably+0x54>
 800fd3a:	9a03      	ldr	r2, [sp, #12]
 800fd3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fd40:	429a      	cmp	r2, r3
 800fd42:	bf08      	it	eq
 800fd44:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800fd48:	d01e      	beq.n	800fd88 <listen_message_reliably+0x164>
 800fd4a:	ebab 0309 	sub.w	r3, fp, r9
 800fd4e:	9905      	ldr	r1, [sp, #20]
 800fd50:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	bf08      	it	eq
 800fd58:	2301      	moveq	r3, #1
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	bfa8      	it	ge
 800fd5e:	4619      	movge	r1, r3
 800fd60:	6894      	ldr	r4, [r2, #8]
 800fd62:	6810      	ldr	r0, [r2, #0]
 800fd64:	4689      	mov	r9, r1
 800fd66:	460b      	mov	r3, r1
 800fd68:	aa08      	add	r2, sp, #32
 800fd6a:	a907      	add	r1, sp, #28
 800fd6c:	47a0      	blx	r4
 800fd6e:	b968      	cbnz	r0, 800fd8c <listen_message_reliably+0x168>
 800fd70:	9b05      	ldr	r3, [sp, #20]
 800fd72:	eba3 0309 	sub.w	r3, r3, r9
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	9305      	str	r3, [sp, #20]
 800fd7a:	f73f af5c 	bgt.w	800fc36 <listen_message_reliably+0x12>
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4620      	mov	r0, r4
 800fd82:	b01d      	add	sp, #116	@ 0x74
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd88:	9b05      	ldr	r3, [sp, #20]
 800fd8a:	e7e0      	b.n	800fd4e <listen_message_reliably+0x12a>
 800fd8c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fd90:	4604      	mov	r4, r0
 800fd92:	a80c      	add	r0, sp, #48	@ 0x30
 800fd94:	f7ff f890 	bl	800eeb8 <ucdr_init_buffer>
 800fd98:	2500      	movs	r5, #0
 800fd9a:	f10d 031a 	add.w	r3, sp, #26
 800fd9e:	aa06      	add	r2, sp, #24
 800fda0:	a90c      	add	r1, sp, #48	@ 0x30
 800fda2:	4640      	mov	r0, r8
 800fda4:	f88d 5018 	strb.w	r5, [sp, #24]
 800fda8:	f000 fbf0 	bl	801058c <uxr_read_session_header>
 800fdac:	b918      	cbnz	r0, 800fdb6 <listen_message_reliably+0x192>
 800fdae:	4620      	mov	r0, r4
 800fdb0:	b01d      	add	sp, #116	@ 0x74
 800fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb6:	4629      	mov	r1, r5
 800fdb8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fdbc:	f000 fc8a 	bl	80106d4 <uxr_stream_id_from_raw>
 800fdc0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800fdc4:	2d01      	cmp	r5, #1
 800fdc6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fdca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800fdce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fdd2:	d04b      	beq.n	800fe6c <listen_message_reliably+0x248>
 800fdd4:	2d02      	cmp	r5, #2
 800fdd6:	d00f      	beq.n	800fdf8 <listen_message_reliably+0x1d4>
 800fdd8:	2d00      	cmp	r5, #0
 800fdda:	d1e8      	bne.n	800fdae <listen_message_reliably+0x18a>
 800fddc:	4629      	mov	r1, r5
 800fdde:	4628      	mov	r0, r5
 800fde0:	f000 fc78 	bl	80106d4 <uxr_stream_id_from_raw>
 800fde4:	a90c      	add	r1, sp, #48	@ 0x30
 800fde6:	4602      	mov	r2, r0
 800fde8:	4640      	mov	r0, r8
 800fdea:	920a      	str	r2, [sp, #40]	@ 0x28
 800fdec:	f7ff fd92 	bl	800f914 <read_submessage_list>
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	b01d      	add	sp, #116	@ 0x74
 800fdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf8:	4631      	mov	r1, r6
 800fdfa:	f108 0008 	add.w	r0, r8, #8
 800fdfe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800fe02:	f000 fd55 	bl	80108b0 <uxr_get_input_reliable_stream>
 800fe06:	4607      	mov	r7, r0
 800fe08:	b338      	cbz	r0, 800fe5a <listen_message_reliably+0x236>
 800fe0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe0c:	9203      	str	r2, [sp, #12]
 800fe0e:	a80c      	add	r0, sp, #48	@ 0x30
 800fe10:	f7ff f882 	bl	800ef18 <ucdr_buffer_remaining>
 800fe14:	4603      	mov	r3, r0
 800fe16:	f10d 0019 	add.w	r0, sp, #25
 800fe1a:	9000      	str	r0, [sp, #0]
 800fe1c:	9a03      	ldr	r2, [sp, #12]
 800fe1e:	4651      	mov	r1, sl
 800fe20:	4638      	mov	r0, r7
 800fe22:	f006 ff07 	bl	8016c34 <uxr_receive_reliable_message>
 800fe26:	b1c0      	cbz	r0, 800fe5a <listen_message_reliably+0x236>
 800fe28:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fe2c:	b393      	cbz	r3, 800fe94 <listen_message_reliably+0x270>
 800fe2e:	ad14      	add	r5, sp, #80	@ 0x50
 800fe30:	f04f 0a02 	mov.w	sl, #2
 800fe34:	e00a      	b.n	800fe4c <listen_message_reliably+0x228>
 800fe36:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800fe3a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800fe3e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800fe42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe44:	4629      	mov	r1, r5
 800fe46:	4640      	mov	r0, r8
 800fe48:	f7ff fd64 	bl	800f914 <read_submessage_list>
 800fe4c:	2204      	movs	r2, #4
 800fe4e:	4629      	mov	r1, r5
 800fe50:	4638      	mov	r0, r7
 800fe52:	f006 ff6f 	bl	8016d34 <uxr_next_input_reliable_buffer_available>
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d1ed      	bne.n	800fe36 <listen_message_reliably+0x212>
 800fe5a:	4640      	mov	r0, r8
 800fe5c:	4632      	mov	r2, r6
 800fe5e:	4649      	mov	r1, r9
 800fe60:	f7ff fbd4 	bl	800f60c <write_submessage_acknack.isra.0>
 800fe64:	4620      	mov	r0, r4
 800fe66:	b01d      	add	sp, #116	@ 0x74
 800fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6c:	4631      	mov	r1, r6
 800fe6e:	f108 0008 	add.w	r0, r8, #8
 800fe72:	f000 fd13 	bl	801089c <uxr_get_input_best_effort_stream>
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d099      	beq.n	800fdae <listen_message_reliably+0x18a>
 800fe7a:	4651      	mov	r1, sl
 800fe7c:	f006 fe46 	bl	8016b0c <uxr_receive_best_effort_message>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d094      	beq.n	800fdae <listen_message_reliably+0x18a>
 800fe84:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800fe88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe8a:	a90c      	add	r1, sp, #48	@ 0x30
 800fe8c:	4640      	mov	r0, r8
 800fe8e:	f7ff fd41 	bl	800f914 <read_submessage_list>
 800fe92:	e78c      	b.n	800fdae <listen_message_reliably+0x18a>
 800fe94:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800fe98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe9a:	a90c      	add	r1, sp, #48	@ 0x30
 800fe9c:	4640      	mov	r0, r8
 800fe9e:	f7ff fd39 	bl	800f914 <read_submessage_list>
 800fea2:	e7c4      	b.n	800fe2e <listen_message_reliably+0x20a>

0800fea4 <uxr_run_session_timeout>:
 800fea4:	b570      	push	{r4, r5, r6, lr}
 800fea6:	4604      	mov	r4, r0
 800fea8:	460d      	mov	r5, r1
 800feaa:	f000 fd67 	bl	801097c <uxr_millis>
 800feae:	4606      	mov	r6, r0
 800feb0:	4620      	mov	r0, r4
 800feb2:	f7ff fc71 	bl	800f798 <uxr_flash_output_streams>
 800feb6:	4629      	mov	r1, r5
 800feb8:	4620      	mov	r0, r4
 800feba:	f7ff feb3 	bl	800fc24 <listen_message_reliably>
 800febe:	f000 fd5d 	bl	801097c <uxr_millis>
 800fec2:	1b83      	subs	r3, r0, r6
 800fec4:	1ae9      	subs	r1, r5, r3
 800fec6:	2900      	cmp	r1, #0
 800fec8:	dcf6      	bgt.n	800feb8 <uxr_run_session_timeout+0x14>
 800feca:	f104 0008 	add.w	r0, r4, #8
 800fece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fed2:	f000 bcf7 	b.w	80108c4 <uxr_output_streams_confirmed>
 800fed6:	bf00      	nop

0800fed8 <uxr_run_session_until_data>:
 800fed8:	b570      	push	{r4, r5, r6, lr}
 800feda:	4604      	mov	r4, r0
 800fedc:	460d      	mov	r5, r1
 800fede:	f000 fd4d 	bl	801097c <uxr_millis>
 800fee2:	4606      	mov	r6, r0
 800fee4:	4620      	mov	r0, r4
 800fee6:	f7ff fc57 	bl	800f798 <uxr_flash_output_streams>
 800feea:	2300      	movs	r3, #0
 800feec:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800fef0:	4629      	mov	r1, r5
 800fef2:	e005      	b.n	800ff00 <uxr_run_session_until_data+0x28>
 800fef4:	f000 fd42 	bl	801097c <uxr_millis>
 800fef8:	1b83      	subs	r3, r0, r6
 800fefa:	1ae9      	subs	r1, r5, r3
 800fefc:	2900      	cmp	r1, #0
 800fefe:	dd07      	ble.n	800ff10 <uxr_run_session_until_data+0x38>
 800ff00:	4620      	mov	r0, r4
 800ff02:	f7ff fe8f 	bl	800fc24 <listen_message_reliably>
 800ff06:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d0f2      	beq.n	800fef4 <uxr_run_session_until_data+0x1c>
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ff14:	bd70      	pop	{r4, r5, r6, pc}
 800ff16:	bf00      	nop

0800ff18 <uxr_run_session_until_confirm_delivery>:
 800ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	460d      	mov	r5, r1
 800ff20:	f000 fd2c 	bl	801097c <uxr_millis>
 800ff24:	4607      	mov	r7, r0
 800ff26:	4630      	mov	r0, r6
 800ff28:	f7ff fc36 	bl	800f798 <uxr_flash_output_streams>
 800ff2c:	2d00      	cmp	r5, #0
 800ff2e:	f106 0808 	add.w	r8, r6, #8
 800ff32:	bfa8      	it	ge
 800ff34:	462c      	movge	r4, r5
 800ff36:	da07      	bge.n	800ff48 <uxr_run_session_until_confirm_delivery+0x30>
 800ff38:	e00e      	b.n	800ff58 <uxr_run_session_until_confirm_delivery+0x40>
 800ff3a:	f7ff fe73 	bl	800fc24 <listen_message_reliably>
 800ff3e:	f000 fd1d 	bl	801097c <uxr_millis>
 800ff42:	1bc3      	subs	r3, r0, r7
 800ff44:	1aec      	subs	r4, r5, r3
 800ff46:	d407      	bmi.n	800ff58 <uxr_run_session_until_confirm_delivery+0x40>
 800ff48:	4640      	mov	r0, r8
 800ff4a:	f000 fcbb 	bl	80108c4 <uxr_output_streams_confirmed>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	4621      	mov	r1, r4
 800ff52:	4630      	mov	r0, r6
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d0f0      	beq.n	800ff3a <uxr_run_session_until_confirm_delivery+0x22>
 800ff58:	4640      	mov	r0, r8
 800ff5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5e:	f000 bcb1 	b.w	80108c4 <uxr_output_streams_confirmed>
 800ff62:	bf00      	nop

0800ff64 <uxr_run_session_until_all_status>:
 800ff64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff68:	9c08      	ldr	r4, [sp, #32]
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460f      	mov	r7, r1
 800ff6e:	4691      	mov	r9, r2
 800ff70:	461d      	mov	r5, r3
 800ff72:	f7ff fc11 	bl	800f798 <uxr_flash_output_streams>
 800ff76:	b124      	cbz	r4, 800ff82 <uxr_run_session_until_all_status+0x1e>
 800ff78:	4622      	mov	r2, r4
 800ff7a:	21ff      	movs	r1, #255	@ 0xff
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f009 fb36 	bl	80195ee <memset>
 800ff82:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800ff86:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ff88:	f000 fcf8 	bl	801097c <uxr_millis>
 800ff8c:	3d01      	subs	r5, #1
 800ff8e:	f1a9 0902 	sub.w	r9, r9, #2
 800ff92:	4680      	mov	r8, r0
 800ff94:	4639      	mov	r1, r7
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7ff fe44 	bl	800fc24 <listen_message_reliably>
 800ff9c:	f000 fcee 	bl	801097c <uxr_millis>
 800ffa0:	eba0 0008 	sub.w	r0, r0, r8
 800ffa4:	1a39      	subs	r1, r7, r0
 800ffa6:	b344      	cbz	r4, 800fffa <uxr_run_session_until_all_status+0x96>
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	46ac      	mov	ip, r5
 800ffac:	2301      	movs	r3, #1
 800ffae:	e002      	b.n	800ffb6 <uxr_run_session_until_all_status+0x52>
 800ffb0:	42a3      	cmp	r3, r4
 800ffb2:	d20d      	bcs.n	800ffd0 <uxr_run_session_until_all_status+0x6c>
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ffba:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800ffbe:	d1f7      	bne.n	800ffb0 <uxr_run_session_until_all_status+0x4c>
 800ffc0:	42a3      	cmp	r3, r4
 800ffc2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ffc6:	d213      	bcs.n	800fff0 <uxr_run_session_until_all_status+0x8c>
 800ffc8:	2a00      	cmp	r2, #0
 800ffca:	d0f3      	beq.n	800ffb4 <uxr_run_session_until_all_status+0x50>
 800ffcc:	2900      	cmp	r1, #0
 800ffce:	dce2      	bgt.n	800ff96 <uxr_run_session_until_all_status+0x32>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800ffd4:	442c      	add	r4, r5
 800ffd6:	e001      	b.n	800ffdc <uxr_run_session_until_all_status+0x78>
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d812      	bhi.n	8010002 <uxr_run_session_until_all_status+0x9e>
 800ffdc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ffe0:	4284      	cmp	r4, r0
 800ffe2:	d1f9      	bne.n	800ffd8 <uxr_run_session_until_all_status+0x74>
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	bf8c      	ite	hi
 800ffe8:	2000      	movhi	r0, #0
 800ffea:	2001      	movls	r0, #1
 800ffec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff0:	2900      	cmp	r1, #0
 800fff2:	dded      	ble.n	800ffd0 <uxr_run_session_until_all_status+0x6c>
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	d1ce      	bne.n	800ff96 <uxr_run_session_until_all_status+0x32>
 800fff8:	e7ea      	b.n	800ffd0 <uxr_run_session_until_all_status+0x6c>
 800fffa:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800fffc:	2001      	movs	r0, #1
 800fffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010002:	2000      	movs	r0, #0
 8010004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010008 <wait_session_status>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	4604      	mov	r4, r0
 801000e:	b09d      	sub	sp, #116	@ 0x74
 8010010:	20ff      	movs	r0, #255	@ 0xff
 8010012:	7160      	strb	r0, [r4, #5]
 8010014:	9303      	str	r3, [sp, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	f000 80b6 	beq.w	8010188 <wait_session_status+0x180>
 801001c:	468a      	mov	sl, r1
 801001e:	4691      	mov	r9, r2
 8010020:	f04f 0b00 	mov.w	fp, #0
 8010024:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010026:	464a      	mov	r2, r9
 8010028:	e9d3 0500 	ldrd	r0, r5, [r3]
 801002c:	4651      	mov	r1, sl
 801002e:	47a8      	blx	r5
 8010030:	f000 fca4 	bl	801097c <uxr_millis>
 8010034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010038:	4605      	mov	r5, r0
 801003a:	e009      	b.n	8010050 <wait_session_status+0x48>
 801003c:	f000 fc9e 	bl	801097c <uxr_millis>
 8010040:	1b40      	subs	r0, r0, r5
 8010042:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010046:	2b00      	cmp	r3, #0
 8010048:	dd40      	ble.n	80100cc <wait_session_status+0xc4>
 801004a:	7960      	ldrb	r0, [r4, #5]
 801004c:	28ff      	cmp	r0, #255	@ 0xff
 801004e:	d145      	bne.n	80100dc <wait_session_status+0xd4>
 8010050:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010052:	a908      	add	r1, sp, #32
 8010054:	6896      	ldr	r6, [r2, #8]
 8010056:	6810      	ldr	r0, [r2, #0]
 8010058:	aa09      	add	r2, sp, #36	@ 0x24
 801005a:	47b0      	blx	r6
 801005c:	2800      	cmp	r0, #0
 801005e:	d0ed      	beq.n	801003c <wait_session_status+0x34>
 8010060:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010064:	a80c      	add	r0, sp, #48	@ 0x30
 8010066:	f7fe ff27 	bl	800eeb8 <ucdr_init_buffer>
 801006a:	2600      	movs	r6, #0
 801006c:	f10d 031e 	add.w	r3, sp, #30
 8010070:	aa07      	add	r2, sp, #28
 8010072:	a90c      	add	r1, sp, #48	@ 0x30
 8010074:	4620      	mov	r0, r4
 8010076:	f88d 601c 	strb.w	r6, [sp, #28]
 801007a:	f000 fa87 	bl	801058c <uxr_read_session_header>
 801007e:	2800      	cmp	r0, #0
 8010080:	d0dc      	beq.n	801003c <wait_session_status+0x34>
 8010082:	4631      	mov	r1, r6
 8010084:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010088:	f000 fb24 	bl	80106d4 <uxr_stream_id_from_raw>
 801008c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010090:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010094:	9302      	str	r3, [sp, #8]
 8010096:	2f01      	cmp	r7, #1
 8010098:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801009c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80100a0:	d05c      	beq.n	801015c <wait_session_status+0x154>
 80100a2:	2f02      	cmp	r7, #2
 80100a4:	d020      	beq.n	80100e8 <wait_session_status+0xe0>
 80100a6:	2f00      	cmp	r7, #0
 80100a8:	d1c8      	bne.n	801003c <wait_session_status+0x34>
 80100aa:	4639      	mov	r1, r7
 80100ac:	4638      	mov	r0, r7
 80100ae:	f000 fb11 	bl	80106d4 <uxr_stream_id_from_raw>
 80100b2:	a90c      	add	r1, sp, #48	@ 0x30
 80100b4:	4602      	mov	r2, r0
 80100b6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80100b8:	4620      	mov	r0, r4
 80100ba:	f7ff fc2b 	bl	800f914 <read_submessage_list>
 80100be:	f000 fc5d 	bl	801097c <uxr_millis>
 80100c2:	1b40      	subs	r0, r0, r5
 80100c4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	dcbe      	bgt.n	801004a <wait_session_status+0x42>
 80100cc:	9b03      	ldr	r3, [sp, #12]
 80100ce:	7960      	ldrb	r0, [r4, #5]
 80100d0:	f10b 0b01 	add.w	fp, fp, #1
 80100d4:	455b      	cmp	r3, fp
 80100d6:	d001      	beq.n	80100dc <wait_session_status+0xd4>
 80100d8:	28ff      	cmp	r0, #255	@ 0xff
 80100da:	d0a3      	beq.n	8010024 <wait_session_status+0x1c>
 80100dc:	38ff      	subs	r0, #255	@ 0xff
 80100de:	bf18      	it	ne
 80100e0:	2001      	movne	r0, #1
 80100e2:	b01d      	add	sp, #116	@ 0x74
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80100ec:	9304      	str	r3, [sp, #16]
 80100ee:	4631      	mov	r1, r6
 80100f0:	f104 0008 	add.w	r0, r4, #8
 80100f4:	f000 fbdc 	bl	80108b0 <uxr_get_input_reliable_stream>
 80100f8:	4680      	mov	r8, r0
 80100fa:	b348      	cbz	r0, 8010150 <wait_session_status+0x148>
 80100fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100fe:	9205      	str	r2, [sp, #20]
 8010100:	a80c      	add	r0, sp, #48	@ 0x30
 8010102:	f7fe ff09 	bl	800ef18 <ucdr_buffer_remaining>
 8010106:	4603      	mov	r3, r0
 8010108:	f10d 001d 	add.w	r0, sp, #29
 801010c:	9000      	str	r0, [sp, #0]
 801010e:	9a05      	ldr	r2, [sp, #20]
 8010110:	9902      	ldr	r1, [sp, #8]
 8010112:	4640      	mov	r0, r8
 8010114:	f006 fd8e 	bl	8016c34 <uxr_receive_reliable_message>
 8010118:	b1d0      	cbz	r0, 8010150 <wait_session_status+0x148>
 801011a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d03a      	beq.n	8010198 <wait_session_status+0x190>
 8010122:	9f04      	ldr	r7, [sp, #16]
 8010124:	e00a      	b.n	801013c <wait_session_status+0x134>
 8010126:	f04f 0302 	mov.w	r3, #2
 801012a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801012e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010132:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010138:	f7ff fbec 	bl	800f914 <read_submessage_list>
 801013c:	a914      	add	r1, sp, #80	@ 0x50
 801013e:	2204      	movs	r2, #4
 8010140:	4640      	mov	r0, r8
 8010142:	f006 fdf7 	bl	8016d34 <uxr_next_input_reliable_buffer_available>
 8010146:	4603      	mov	r3, r0
 8010148:	a914      	add	r1, sp, #80	@ 0x50
 801014a:	4620      	mov	r0, r4
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1ea      	bne.n	8010126 <wait_session_status+0x11e>
 8010150:	9904      	ldr	r1, [sp, #16]
 8010152:	4632      	mov	r2, r6
 8010154:	4620      	mov	r0, r4
 8010156:	f7ff fa59 	bl	800f60c <write_submessage_acknack.isra.0>
 801015a:	e76f      	b.n	801003c <wait_session_status+0x34>
 801015c:	4631      	mov	r1, r6
 801015e:	f104 0008 	add.w	r0, r4, #8
 8010162:	f000 fb9b 	bl	801089c <uxr_get_input_best_effort_stream>
 8010166:	2800      	cmp	r0, #0
 8010168:	f43f af68 	beq.w	801003c <wait_session_status+0x34>
 801016c:	9902      	ldr	r1, [sp, #8]
 801016e:	f006 fccd 	bl	8016b0c <uxr_receive_best_effort_message>
 8010172:	2800      	cmp	r0, #0
 8010174:	f43f af62 	beq.w	801003c <wait_session_status+0x34>
 8010178:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801017c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801017e:	a90c      	add	r1, sp, #48	@ 0x30
 8010180:	4620      	mov	r0, r4
 8010182:	f7ff fbc7 	bl	800f914 <read_submessage_list>
 8010186:	e759      	b.n	801003c <wait_session_status+0x34>
 8010188:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801018a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801018e:	47a0      	blx	r4
 8010190:	2001      	movs	r0, #1
 8010192:	b01d      	add	sp, #116	@ 0x74
 8010194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010198:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801019c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801019e:	a90c      	add	r1, sp, #48	@ 0x30
 80101a0:	4620      	mov	r0, r4
 80101a2:	f7ff fbb7 	bl	800f914 <read_submessage_list>
 80101a6:	e7bc      	b.n	8010122 <wait_session_status+0x11a>

080101a8 <uxr_delete_session_retries>:
 80101a8:	b530      	push	{r4, r5, lr}
 80101aa:	b08f      	sub	sp, #60	@ 0x3c
 80101ac:	4604      	mov	r4, r0
 80101ae:	460d      	mov	r5, r1
 80101b0:	f000 fa2e 	bl	8010610 <uxr_session_header_offset>
 80101b4:	2300      	movs	r3, #0
 80101b6:	2210      	movs	r2, #16
 80101b8:	9000      	str	r0, [sp, #0]
 80101ba:	a902      	add	r1, sp, #8
 80101bc:	a806      	add	r0, sp, #24
 80101be:	f7fe fe69 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 80101c2:	a906      	add	r1, sp, #24
 80101c4:	4620      	mov	r0, r4
 80101c6:	f000 f973 	bl	80104b0 <uxr_buffer_delete_session>
 80101ca:	2200      	movs	r2, #0
 80101cc:	4611      	mov	r1, r2
 80101ce:	9b06      	ldr	r3, [sp, #24]
 80101d0:	4620      	mov	r0, r4
 80101d2:	f000 f9c7 	bl	8010564 <uxr_stamp_session_header>
 80101d6:	a806      	add	r0, sp, #24
 80101d8:	f7fe fe9a 	bl	800ef10 <ucdr_buffer_length>
 80101dc:	462b      	mov	r3, r5
 80101de:	4602      	mov	r2, r0
 80101e0:	a902      	add	r1, sp, #8
 80101e2:	4620      	mov	r0, r4
 80101e4:	f7ff ff10 	bl	8010008 <wait_session_status>
 80101e8:	b118      	cbz	r0, 80101f2 <uxr_delete_session_retries+0x4a>
 80101ea:	7960      	ldrb	r0, [r4, #5]
 80101ec:	fab0 f080 	clz	r0, r0
 80101f0:	0940      	lsrs	r0, r0, #5
 80101f2:	b00f      	add	sp, #60	@ 0x3c
 80101f4:	bd30      	pop	{r4, r5, pc}
 80101f6:	bf00      	nop

080101f8 <uxr_create_session>:
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fc:	f100 0b08 	add.w	fp, r0, #8
 8010200:	b0ab      	sub	sp, #172	@ 0xac
 8010202:	4604      	mov	r4, r0
 8010204:	4658      	mov	r0, fp
 8010206:	f000 fa99 	bl	801073c <uxr_reset_stream_storage>
 801020a:	4620      	mov	r0, r4
 801020c:	f000 fa00 	bl	8010610 <uxr_session_header_offset>
 8010210:	2300      	movs	r3, #0
 8010212:	9000      	str	r0, [sp, #0]
 8010214:	221c      	movs	r2, #28
 8010216:	a90b      	add	r1, sp, #44	@ 0x2c
 8010218:	a812      	add	r0, sp, #72	@ 0x48
 801021a:	f7fe fe3b 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 801021e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010220:	8a1a      	ldrh	r2, [r3, #16]
 8010222:	3a04      	subs	r2, #4
 8010224:	b292      	uxth	r2, r2
 8010226:	a912      	add	r1, sp, #72	@ 0x48
 8010228:	4620      	mov	r0, r4
 801022a:	f000 f917 	bl	801045c <uxr_buffer_create_session>
 801022e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010230:	4620      	mov	r0, r4
 8010232:	f000 f983 	bl	801053c <uxr_stamp_create_session_header>
 8010236:	a812      	add	r0, sp, #72	@ 0x48
 8010238:	f7fe fe6a 	bl	800ef10 <ucdr_buffer_length>
 801023c:	23ff      	movs	r3, #255	@ 0xff
 801023e:	7163      	strb	r3, [r4, #5]
 8010240:	230a      	movs	r3, #10
 8010242:	46da      	mov	sl, fp
 8010244:	9303      	str	r3, [sp, #12]
 8010246:	4683      	mov	fp, r0
 8010248:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801024a:	465a      	mov	r2, fp
 801024c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010250:	a90b      	add	r1, sp, #44	@ 0x2c
 8010252:	47a8      	blx	r5
 8010254:	f000 fb92 	bl	801097c <uxr_millis>
 8010258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801025c:	4605      	mov	r5, r0
 801025e:	e009      	b.n	8010274 <uxr_create_session+0x7c>
 8010260:	f000 fb8c 	bl	801097c <uxr_millis>
 8010264:	1b40      	subs	r0, r0, r5
 8010266:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801026a:	2b00      	cmp	r3, #0
 801026c:	7962      	ldrb	r2, [r4, #5]
 801026e:	dd38      	ble.n	80102e2 <uxr_create_session+0xea>
 8010270:	2aff      	cmp	r2, #255	@ 0xff
 8010272:	d13c      	bne.n	80102ee <uxr_create_session+0xf6>
 8010274:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010276:	a907      	add	r1, sp, #28
 8010278:	6896      	ldr	r6, [r2, #8]
 801027a:	6810      	ldr	r0, [r2, #0]
 801027c:	aa08      	add	r2, sp, #32
 801027e:	47b0      	blx	r6
 8010280:	2800      	cmp	r0, #0
 8010282:	d0ed      	beq.n	8010260 <uxr_create_session+0x68>
 8010284:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010288:	a81a      	add	r0, sp, #104	@ 0x68
 801028a:	f7fe fe15 	bl	800eeb8 <ucdr_init_buffer>
 801028e:	2600      	movs	r6, #0
 8010290:	f10d 031a 	add.w	r3, sp, #26
 8010294:	aa06      	add	r2, sp, #24
 8010296:	a91a      	add	r1, sp, #104	@ 0x68
 8010298:	4620      	mov	r0, r4
 801029a:	f88d 6018 	strb.w	r6, [sp, #24]
 801029e:	f000 f975 	bl	801058c <uxr_read_session_header>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d0dc      	beq.n	8010260 <uxr_create_session+0x68>
 80102a6:	4631      	mov	r1, r6
 80102a8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80102ac:	f000 fa12 	bl	80106d4 <uxr_stream_id_from_raw>
 80102b0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80102b4:	2e01      	cmp	r6, #1
 80102b6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80102ba:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80102be:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80102c2:	d053      	beq.n	801036c <uxr_create_session+0x174>
 80102c4:	2e02      	cmp	r6, #2
 80102c6:	d018      	beq.n	80102fa <uxr_create_session+0x102>
 80102c8:	2e00      	cmp	r6, #0
 80102ca:	d1c9      	bne.n	8010260 <uxr_create_session+0x68>
 80102cc:	4631      	mov	r1, r6
 80102ce:	4630      	mov	r0, r6
 80102d0:	f000 fa00 	bl	80106d4 <uxr_stream_id_from_raw>
 80102d4:	a91a      	add	r1, sp, #104	@ 0x68
 80102d6:	4602      	mov	r2, r0
 80102d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80102da:	4620      	mov	r0, r4
 80102dc:	f7ff fb1a 	bl	800f914 <read_submessage_list>
 80102e0:	e7be      	b.n	8010260 <uxr_create_session+0x68>
 80102e2:	9b03      	ldr	r3, [sp, #12]
 80102e4:	3b01      	subs	r3, #1
 80102e6:	9303      	str	r3, [sp, #12]
 80102e8:	d001      	beq.n	80102ee <uxr_create_session+0xf6>
 80102ea:	2aff      	cmp	r2, #255	@ 0xff
 80102ec:	d0ac      	beq.n	8010248 <uxr_create_session+0x50>
 80102ee:	2a00      	cmp	r2, #0
 80102f0:	d051      	beq.n	8010396 <uxr_create_session+0x19e>
 80102f2:	2000      	movs	r0, #0
 80102f4:	b02b      	add	sp, #172	@ 0xac
 80102f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80102fe:	9304      	str	r3, [sp, #16]
 8010300:	4639      	mov	r1, r7
 8010302:	4650      	mov	r0, sl
 8010304:	f000 fad4 	bl	80108b0 <uxr_get_input_reliable_stream>
 8010308:	4680      	mov	r8, r0
 801030a:	b348      	cbz	r0, 8010360 <uxr_create_session+0x168>
 801030c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801030e:	9205      	str	r2, [sp, #20]
 8010310:	a81a      	add	r0, sp, #104	@ 0x68
 8010312:	f7fe fe01 	bl	800ef18 <ucdr_buffer_remaining>
 8010316:	4603      	mov	r3, r0
 8010318:	f10d 0019 	add.w	r0, sp, #25
 801031c:	9000      	str	r0, [sp, #0]
 801031e:	9a05      	ldr	r2, [sp, #20]
 8010320:	4649      	mov	r1, r9
 8010322:	4640      	mov	r0, r8
 8010324:	f006 fc86 	bl	8016c34 <uxr_receive_reliable_message>
 8010328:	b1d0      	cbz	r0, 8010360 <uxr_create_session+0x168>
 801032a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d038      	beq.n	80103a4 <uxr_create_session+0x1ac>
 8010332:	9e04      	ldr	r6, [sp, #16]
 8010334:	e00a      	b.n	801034c <uxr_create_session+0x154>
 8010336:	f04f 0302 	mov.w	r3, #2
 801033a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801033e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8010342:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010348:	f7ff fae4 	bl	800f914 <read_submessage_list>
 801034c:	a922      	add	r1, sp, #136	@ 0x88
 801034e:	2204      	movs	r2, #4
 8010350:	4640      	mov	r0, r8
 8010352:	f006 fcef 	bl	8016d34 <uxr_next_input_reliable_buffer_available>
 8010356:	4603      	mov	r3, r0
 8010358:	a922      	add	r1, sp, #136	@ 0x88
 801035a:	4620      	mov	r0, r4
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1ea      	bne.n	8010336 <uxr_create_session+0x13e>
 8010360:	9904      	ldr	r1, [sp, #16]
 8010362:	463a      	mov	r2, r7
 8010364:	4620      	mov	r0, r4
 8010366:	f7ff f951 	bl	800f60c <write_submessage_acknack.isra.0>
 801036a:	e779      	b.n	8010260 <uxr_create_session+0x68>
 801036c:	4639      	mov	r1, r7
 801036e:	4650      	mov	r0, sl
 8010370:	f000 fa94 	bl	801089c <uxr_get_input_best_effort_stream>
 8010374:	2800      	cmp	r0, #0
 8010376:	f43f af73 	beq.w	8010260 <uxr_create_session+0x68>
 801037a:	4649      	mov	r1, r9
 801037c:	f006 fbc6 	bl	8016b0c <uxr_receive_best_effort_message>
 8010380:	2800      	cmp	r0, #0
 8010382:	f43f af6d 	beq.w	8010260 <uxr_create_session+0x68>
 8010386:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801038a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801038c:	a91a      	add	r1, sp, #104	@ 0x68
 801038e:	4620      	mov	r0, r4
 8010390:	f7ff fac0 	bl	800f914 <read_submessage_list>
 8010394:	e764      	b.n	8010260 <uxr_create_session+0x68>
 8010396:	4650      	mov	r0, sl
 8010398:	f000 f9d0 	bl	801073c <uxr_reset_stream_storage>
 801039c:	2001      	movs	r0, #1
 801039e:	b02b      	add	sp, #172	@ 0xac
 80103a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80103a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103aa:	a91a      	add	r1, sp, #104	@ 0x68
 80103ac:	4620      	mov	r0, r4
 80103ae:	f7ff fab1 	bl	800f914 <read_submessage_list>
 80103b2:	e7be      	b.n	8010332 <uxr_create_session+0x13a>

080103b4 <uxr_prepare_stream_to_write_submessage>:
 80103b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103b8:	b082      	sub	sp, #8
 80103ba:	4682      	mov	sl, r0
 80103bc:	4610      	mov	r0, r2
 80103be:	4615      	mov	r5, r2
 80103c0:	461e      	mov	r6, r3
 80103c2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80103c6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80103ca:	9101      	str	r1, [sp, #4]
 80103cc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80103d0:	f000 face 	bl	8010970 <uxr_submessage_padding>
 80103d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103d8:	f105 0904 	add.w	r9, r5, #4
 80103dc:	2b01      	cmp	r3, #1
 80103de:	4481      	add	r9, r0
 80103e0:	d01d      	beq.n	801041e <uxr_prepare_stream_to_write_submessage+0x6a>
 80103e2:	2b02      	cmp	r3, #2
 80103e4:	d116      	bne.n	8010414 <uxr_prepare_stream_to_write_submessage+0x60>
 80103e6:	4621      	mov	r1, r4
 80103e8:	f10a 0008 	add.w	r0, sl, #8
 80103ec:	f000 fa4c 	bl	8010888 <uxr_get_output_reliable_stream>
 80103f0:	4604      	mov	r4, r0
 80103f2:	b158      	cbz	r0, 801040c <uxr_prepare_stream_to_write_submessage+0x58>
 80103f4:	4649      	mov	r1, r9
 80103f6:	4632      	mov	r2, r6
 80103f8:	f006 fe58 	bl	80170ac <uxr_prepare_reliable_buffer_to_write>
 80103fc:	4604      	mov	r4, r0
 80103fe:	b12c      	cbz	r4, 801040c <uxr_prepare_stream_to_write_submessage+0x58>
 8010400:	4643      	mov	r3, r8
 8010402:	b2aa      	uxth	r2, r5
 8010404:	4639      	mov	r1, r7
 8010406:	4630      	mov	r0, r6
 8010408:	f000 fa72 	bl	80108f0 <uxr_buffer_submessage_header>
 801040c:	4620      	mov	r0, r4
 801040e:	b002      	add	sp, #8
 8010410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010414:	2400      	movs	r4, #0
 8010416:	4620      	mov	r0, r4
 8010418:	b002      	add	sp, #8
 801041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801041e:	4621      	mov	r1, r4
 8010420:	f10a 0008 	add.w	r0, sl, #8
 8010424:	f000 fa28 	bl	8010878 <uxr_get_output_best_effort_stream>
 8010428:	4604      	mov	r4, r0
 801042a:	2800      	cmp	r0, #0
 801042c:	d0ee      	beq.n	801040c <uxr_prepare_stream_to_write_submessage+0x58>
 801042e:	4649      	mov	r1, r9
 8010430:	4632      	mov	r2, r6
 8010432:	f006 fd6b 	bl	8016f0c <uxr_prepare_best_effort_buffer_to_write>
 8010436:	4604      	mov	r4, r0
 8010438:	e7e1      	b.n	80103fe <uxr_prepare_stream_to_write_submessage+0x4a>
 801043a:	bf00      	nop

0801043c <uxr_init_session_info>:
 801043c:	0e13      	lsrs	r3, r2, #24
 801043e:	7043      	strb	r3, [r0, #1]
 8010440:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010444:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010448:	7001      	strb	r1, [r0, #0]
 801044a:	70c3      	strb	r3, [r0, #3]
 801044c:	2109      	movs	r1, #9
 801044e:	23ff      	movs	r3, #255	@ 0xff
 8010450:	f880 c002 	strb.w	ip, [r0, #2]
 8010454:	7102      	strb	r2, [r0, #4]
 8010456:	80c1      	strh	r1, [r0, #6]
 8010458:	7143      	strb	r3, [r0, #5]
 801045a:	4770      	bx	lr

0801045c <uxr_buffer_create_session>:
 801045c:	b530      	push	{r4, r5, lr}
 801045e:	b089      	sub	sp, #36	@ 0x24
 8010460:	2300      	movs	r3, #0
 8010462:	4d12      	ldr	r5, [pc, #72]	@ (80104ac <uxr_buffer_create_session+0x50>)
 8010464:	9307      	str	r3, [sp, #28]
 8010466:	f8ad 201c 	strh.w	r2, [sp, #28]
 801046a:	2201      	movs	r2, #1
 801046c:	9301      	str	r3, [sp, #4]
 801046e:	80c2      	strh	r2, [r0, #6]
 8010470:	f88d 2004 	strb.w	r2, [sp, #4]
 8010474:	682a      	ldr	r2, [r5, #0]
 8010476:	9200      	str	r2, [sp, #0]
 8010478:	88aa      	ldrh	r2, [r5, #4]
 801047a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801047e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8010482:	9202      	str	r2, [sp, #8]
 8010484:	460c      	mov	r4, r1
 8010486:	7802      	ldrb	r2, [r0, #0]
 8010488:	9303      	str	r3, [sp, #12]
 801048a:	4619      	mov	r1, r3
 801048c:	f88d 200c 	strb.w	r2, [sp, #12]
 8010490:	4620      	mov	r0, r4
 8010492:	2210      	movs	r2, #16
 8010494:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010498:	9306      	str	r3, [sp, #24]
 801049a:	f000 fa29 	bl	80108f0 <uxr_buffer_submessage_header>
 801049e:	4669      	mov	r1, sp
 80104a0:	4620      	mov	r0, r4
 80104a2:	f001 fa6d 	bl	8011980 <uxr_serialize_CREATE_CLIENT_Payload>
 80104a6:	b009      	add	sp, #36	@ 0x24
 80104a8:	bd30      	pop	{r4, r5, pc}
 80104aa:	bf00      	nop
 80104ac:	0801a9c4 	.word	0x0801a9c4

080104b0 <uxr_buffer_delete_session>:
 80104b0:	b510      	push	{r4, lr}
 80104b2:	4b0c      	ldr	r3, [pc, #48]	@ (80104e4 <uxr_buffer_delete_session+0x34>)
 80104b4:	b082      	sub	sp, #8
 80104b6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80104ba:	f8ad c006 	strh.w	ip, [sp, #6]
 80104be:	460c      	mov	r4, r1
 80104c0:	2202      	movs	r2, #2
 80104c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80104c6:	80c2      	strh	r2, [r0, #6]
 80104c8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80104cc:	2204      	movs	r2, #4
 80104ce:	2300      	movs	r3, #0
 80104d0:	2103      	movs	r1, #3
 80104d2:	4620      	mov	r0, r4
 80104d4:	f000 fa0c 	bl	80108f0 <uxr_buffer_submessage_header>
 80104d8:	a901      	add	r1, sp, #4
 80104da:	4620      	mov	r0, r4
 80104dc:	f001 faf6 	bl	8011acc <uxr_serialize_DELETE_Payload>
 80104e0:	b002      	add	sp, #8
 80104e2:	bd10      	pop	{r4, pc}
 80104e4:	0801a9c4 	.word	0x0801a9c4

080104e8 <uxr_read_create_session_status>:
 80104e8:	b510      	push	{r4, lr}
 80104ea:	b088      	sub	sp, #32
 80104ec:	4604      	mov	r4, r0
 80104ee:	4608      	mov	r0, r1
 80104f0:	a901      	add	r1, sp, #4
 80104f2:	f001 fafb 	bl	8011aec <uxr_deserialize_STATUS_AGENT_Payload>
 80104f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80104fa:	7163      	strb	r3, [r4, #5]
 80104fc:	b008      	add	sp, #32
 80104fe:	bd10      	pop	{r4, pc}

08010500 <uxr_read_delete_session_status>:
 8010500:	b510      	push	{r4, lr}
 8010502:	4604      	mov	r4, r0
 8010504:	b084      	sub	sp, #16
 8010506:	4608      	mov	r0, r1
 8010508:	a902      	add	r1, sp, #8
 801050a:	f001 fb1f 	bl	8011b4c <uxr_deserialize_STATUS_Payload>
 801050e:	88e3      	ldrh	r3, [r4, #6]
 8010510:	2b02      	cmp	r3, #2
 8010512:	d001      	beq.n	8010518 <uxr_read_delete_session_status+0x18>
 8010514:	b004      	add	sp, #16
 8010516:	bd10      	pop	{r4, pc}
 8010518:	f10d 000a 	add.w	r0, sp, #10
 801051c:	f7fe fffc 	bl	800f518 <uxr_object_id_from_raw>
 8010520:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010524:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8010528:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801052c:	b29b      	uxth	r3, r3
 801052e:	2b02      	cmp	r3, #2
 8010530:	bf04      	itt	eq
 8010532:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8010536:	7163      	strbeq	r3, [r4, #5]
 8010538:	b004      	add	sp, #16
 801053a:	bd10      	pop	{r4, pc}

0801053c <uxr_stamp_create_session_header>:
 801053c:	b510      	push	{r4, lr}
 801053e:	2208      	movs	r2, #8
 8010540:	b08a      	sub	sp, #40	@ 0x28
 8010542:	4604      	mov	r4, r0
 8010544:	eb0d 0002 	add.w	r0, sp, r2
 8010548:	f7fe fcb6 	bl	800eeb8 <ucdr_init_buffer>
 801054c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010550:	9400      	str	r4, [sp, #0]
 8010552:	2300      	movs	r3, #0
 8010554:	461a      	mov	r2, r3
 8010556:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801055a:	a802      	add	r0, sp, #8
 801055c:	f000 fbc2 	bl	8010ce4 <uxr_serialize_message_header>
 8010560:	b00a      	add	sp, #40	@ 0x28
 8010562:	bd10      	pop	{r4, pc}

08010564 <uxr_stamp_session_header>:
 8010564:	b530      	push	{r4, r5, lr}
 8010566:	b08d      	sub	sp, #52	@ 0x34
 8010568:	4604      	mov	r4, r0
 801056a:	460d      	mov	r5, r1
 801056c:	9203      	str	r2, [sp, #12]
 801056e:	4619      	mov	r1, r3
 8010570:	a804      	add	r0, sp, #16
 8010572:	2208      	movs	r2, #8
 8010574:	f7fe fca0 	bl	800eeb8 <ucdr_init_buffer>
 8010578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801057c:	9b03      	ldr	r3, [sp, #12]
 801057e:	9400      	str	r4, [sp, #0]
 8010580:	462a      	mov	r2, r5
 8010582:	a804      	add	r0, sp, #16
 8010584:	f000 fbae 	bl	8010ce4 <uxr_serialize_message_header>
 8010588:	b00d      	add	sp, #52	@ 0x34
 801058a:	bd30      	pop	{r4, r5, pc}

0801058c <uxr_read_session_header>:
 801058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010590:	4607      	mov	r7, r0
 8010592:	b084      	sub	sp, #16
 8010594:	4608      	mov	r0, r1
 8010596:	460c      	mov	r4, r1
 8010598:	4615      	mov	r5, r2
 801059a:	461e      	mov	r6, r3
 801059c:	f7fe fcbc 	bl	800ef18 <ucdr_buffer_remaining>
 80105a0:	2808      	cmp	r0, #8
 80105a2:	d803      	bhi.n	80105ac <uxr_read_session_header+0x20>
 80105a4:	2000      	movs	r0, #0
 80105a6:	b004      	add	sp, #16
 80105a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ac:	f10d 080c 	add.w	r8, sp, #12
 80105b0:	4633      	mov	r3, r6
 80105b2:	462a      	mov	r2, r5
 80105b4:	f8cd 8000 	str.w	r8, [sp]
 80105b8:	4620      	mov	r0, r4
 80105ba:	f10d 010b 	add.w	r1, sp, #11
 80105be:	f000 fbaf 	bl	8010d20 <uxr_deserialize_message_header>
 80105c2:	783a      	ldrb	r2, [r7, #0]
 80105c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d1eb      	bne.n	80105a4 <uxr_read_session_header+0x18>
 80105cc:	061b      	lsls	r3, r3, #24
 80105ce:	d41c      	bmi.n	801060a <uxr_read_session_header+0x7e>
 80105d0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80105d4:	787b      	ldrb	r3, [r7, #1]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d003      	beq.n	80105e2 <uxr_read_session_header+0x56>
 80105da:	2001      	movs	r0, #1
 80105dc:	f080 0001 	eor.w	r0, r0, #1
 80105e0:	e7e1      	b.n	80105a6 <uxr_read_session_header+0x1a>
 80105e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80105e6:	78bb      	ldrb	r3, [r7, #2]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	f107 0102 	add.w	r1, r7, #2
 80105ee:	d1f4      	bne.n	80105da <uxr_read_session_header+0x4e>
 80105f0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80105f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d1ee      	bne.n	80105da <uxr_read_session_header+0x4e>
 80105fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8010600:	784b      	ldrb	r3, [r1, #1]
 8010602:	429a      	cmp	r2, r3
 8010604:	d1e9      	bne.n	80105da <uxr_read_session_header+0x4e>
 8010606:	2000      	movs	r0, #0
 8010608:	e7e8      	b.n	80105dc <uxr_read_session_header+0x50>
 801060a:	2001      	movs	r0, #1
 801060c:	e7cb      	b.n	80105a6 <uxr_read_session_header+0x1a>
 801060e:	bf00      	nop

08010610 <uxr_session_header_offset>:
 8010610:	f990 3000 	ldrsb.w	r3, [r0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	bfac      	ite	ge
 8010618:	2008      	movge	r0, #8
 801061a:	2004      	movlt	r0, #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop

08010620 <uxr_init_base_object_request>:
 8010620:	b510      	push	{r4, lr}
 8010622:	88c3      	ldrh	r3, [r0, #6]
 8010624:	b082      	sub	sp, #8
 8010626:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801062a:	9101      	str	r1, [sp, #4]
 801062c:	f1a3 010a 	sub.w	r1, r3, #10
 8010630:	b289      	uxth	r1, r1
 8010632:	42a1      	cmp	r1, r4
 8010634:	d80e      	bhi.n	8010654 <uxr_init_base_object_request+0x34>
 8010636:	3301      	adds	r3, #1
 8010638:	b29c      	uxth	r4, r3
 801063a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801063e:	b2db      	uxtb	r3, r3
 8010640:	80c4      	strh	r4, [r0, #6]
 8010642:	9801      	ldr	r0, [sp, #4]
 8010644:	7011      	strb	r1, [r2, #0]
 8010646:	7053      	strb	r3, [r2, #1]
 8010648:	1c91      	adds	r1, r2, #2
 801064a:	f7fe ff79 	bl	800f540 <uxr_object_id_to_raw>
 801064e:	4620      	mov	r0, r4
 8010650:	b002      	add	sp, #8
 8010652:	bd10      	pop	{r4, pc}
 8010654:	230a      	movs	r3, #10
 8010656:	2100      	movs	r1, #0
 8010658:	461c      	mov	r4, r3
 801065a:	e7f1      	b.n	8010640 <uxr_init_base_object_request+0x20>

0801065c <uxr_parse_base_object_request>:
 801065c:	b570      	push	{r4, r5, r6, lr}
 801065e:	4604      	mov	r4, r0
 8010660:	3002      	adds	r0, #2
 8010662:	460d      	mov	r5, r1
 8010664:	4616      	mov	r6, r2
 8010666:	f7fe ff57 	bl	800f518 <uxr_object_id_from_raw>
 801066a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801066e:	8028      	strh	r0, [r5, #0]
 8010670:	806b      	strh	r3, [r5, #2]
 8010672:	7822      	ldrb	r2, [r4, #0]
 8010674:	7863      	ldrb	r3, [r4, #1]
 8010676:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801067a:	8033      	strh	r3, [r6, #0]
 801067c:	bd70      	pop	{r4, r5, r6, pc}
 801067e:	bf00      	nop

08010680 <uxr_stream_id>:
 8010680:	2901      	cmp	r1, #1
 8010682:	b082      	sub	sp, #8
 8010684:	d01d      	beq.n	80106c2 <uxr_stream_id+0x42>
 8010686:	2902      	cmp	r1, #2
 8010688:	f04f 0c00 	mov.w	ip, #0
 801068c:	d01e      	beq.n	80106cc <uxr_stream_id+0x4c>
 801068e:	2300      	movs	r3, #0
 8010690:	f36c 0307 	bfi	r3, ip, #0, #8
 8010694:	f360 230f 	bfi	r3, r0, #8, #8
 8010698:	f361 4317 	bfi	r3, r1, #16, #8
 801069c:	f362 631f 	bfi	r3, r2, #24, #8
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	2000      	movs	r0, #0
 80106a4:	f362 0007 	bfi	r0, r2, #0, #8
 80106a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80106ac:	f362 200f 	bfi	r0, r2, #8, #8
 80106b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80106b4:	f362 4017 	bfi	r0, r2, #16, #8
 80106b8:	0e1b      	lsrs	r3, r3, #24
 80106ba:	f363 601f 	bfi	r0, r3, #24, #8
 80106be:	b002      	add	sp, #8
 80106c0:	4770      	bx	lr
 80106c2:	f100 0c01 	add.w	ip, r0, #1
 80106c6:	fa5f fc8c 	uxtb.w	ip, ip
 80106ca:	e7e0      	b.n	801068e <uxr_stream_id+0xe>
 80106cc:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80106d0:	e7dd      	b.n	801068e <uxr_stream_id+0xe>
 80106d2:	bf00      	nop

080106d4 <uxr_stream_id_from_raw>:
 80106d4:	b082      	sub	sp, #8
 80106d6:	b130      	cbz	r0, 80106e6 <uxr_stream_id_from_raw+0x12>
 80106d8:	0603      	lsls	r3, r0, #24
 80106da:	d420      	bmi.n	801071e <uxr_stream_id_from_raw+0x4a>
 80106dc:	1e42      	subs	r2, r0, #1
 80106de:	b2d2      	uxtb	r2, r2
 80106e0:	f04f 0c01 	mov.w	ip, #1
 80106e4:	e001      	b.n	80106ea <uxr_stream_id_from_raw+0x16>
 80106e6:	4684      	mov	ip, r0
 80106e8:	4602      	mov	r2, r0
 80106ea:	2300      	movs	r3, #0
 80106ec:	f360 0307 	bfi	r3, r0, #0, #8
 80106f0:	f362 230f 	bfi	r3, r2, #8, #8
 80106f4:	f36c 4317 	bfi	r3, ip, #16, #8
 80106f8:	f361 631f 	bfi	r3, r1, #24, #8
 80106fc:	b2da      	uxtb	r2, r3
 80106fe:	2000      	movs	r0, #0
 8010700:	f362 0007 	bfi	r0, r2, #0, #8
 8010704:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010708:	f362 200f 	bfi	r0, r2, #8, #8
 801070c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010710:	f362 4017 	bfi	r0, r2, #16, #8
 8010714:	0e1b      	lsrs	r3, r3, #24
 8010716:	f363 601f 	bfi	r0, r3, #24, #8
 801071a:	b002      	add	sp, #8
 801071c:	4770      	bx	lr
 801071e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010722:	f04f 0c02 	mov.w	ip, #2
 8010726:	e7e0      	b.n	80106ea <uxr_stream_id_from_raw+0x16>

08010728 <uxr_init_stream_storage>:
 8010728:	2300      	movs	r3, #0
 801072a:	7403      	strb	r3, [r0, #16]
 801072c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010730:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010734:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop

0801073c <uxr_reset_stream_storage>:
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	7c03      	ldrb	r3, [r0, #16]
 8010740:	4604      	mov	r4, r0
 8010742:	b153      	cbz	r3, 801075a <uxr_reset_stream_storage+0x1e>
 8010744:	4606      	mov	r6, r0
 8010746:	2500      	movs	r5, #0
 8010748:	4630      	mov	r0, r6
 801074a:	f006 fbd9 	bl	8016f00 <uxr_reset_output_best_effort_stream>
 801074e:	7c23      	ldrb	r3, [r4, #16]
 8010750:	3501      	adds	r5, #1
 8010752:	42ab      	cmp	r3, r5
 8010754:	f106 0610 	add.w	r6, r6, #16
 8010758:	d8f6      	bhi.n	8010748 <uxr_reset_stream_storage+0xc>
 801075a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801075e:	b163      	cbz	r3, 801077a <uxr_reset_stream_storage+0x3e>
 8010760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010764:	2500      	movs	r5, #0
 8010766:	4630      	mov	r0, r6
 8010768:	f006 f9cc 	bl	8016b04 <uxr_reset_input_best_effort_stream>
 801076c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010770:	3501      	adds	r5, #1
 8010772:	42ab      	cmp	r3, r5
 8010774:	f106 0602 	add.w	r6, r6, #2
 8010778:	d8f5      	bhi.n	8010766 <uxr_reset_stream_storage+0x2a>
 801077a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801077e:	b163      	cbz	r3, 801079a <uxr_reset_stream_storage+0x5e>
 8010780:	f104 0618 	add.w	r6, r4, #24
 8010784:	2500      	movs	r5, #0
 8010786:	4630      	mov	r0, r6
 8010788:	f006 fc66 	bl	8017058 <uxr_reset_output_reliable_stream>
 801078c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010790:	3501      	adds	r5, #1
 8010792:	42ab      	cmp	r3, r5
 8010794:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010798:	d8f5      	bhi.n	8010786 <uxr_reset_stream_storage+0x4a>
 801079a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801079e:	b163      	cbz	r3, 80107ba <uxr_reset_stream_storage+0x7e>
 80107a0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80107a4:	2500      	movs	r5, #0
 80107a6:	4630      	mov	r0, r6
 80107a8:	f006 fa20 	bl	8016bec <uxr_reset_input_reliable_stream>
 80107ac:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80107b0:	3501      	adds	r5, #1
 80107b2:	42ab      	cmp	r3, r5
 80107b4:	f106 0618 	add.w	r6, r6, #24
 80107b8:	d8f5      	bhi.n	80107a6 <uxr_reset_stream_storage+0x6a>
 80107ba:	bd70      	pop	{r4, r5, r6, pc}

080107bc <uxr_add_output_best_effort_buffer>:
 80107bc:	b510      	push	{r4, lr}
 80107be:	7c04      	ldrb	r4, [r0, #16]
 80107c0:	f104 0c01 	add.w	ip, r4, #1
 80107c4:	b082      	sub	sp, #8
 80107c6:	f880 c010 	strb.w	ip, [r0, #16]
 80107ca:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80107ce:	f006 fb8d 	bl	8016eec <uxr_init_output_best_effort_stream>
 80107d2:	2201      	movs	r2, #1
 80107d4:	4611      	mov	r1, r2
 80107d6:	4620      	mov	r0, r4
 80107d8:	b002      	add	sp, #8
 80107da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107de:	f7ff bf4f 	b.w	8010680 <uxr_stream_id>
 80107e2:	bf00      	nop

080107e4 <uxr_add_output_reliable_buffer>:
 80107e4:	b510      	push	{r4, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	4684      	mov	ip, r0
 80107ea:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80107ee:	9000      	str	r0, [sp, #0]
 80107f0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80107f4:	2028      	movs	r0, #40	@ 0x28
 80107f6:	fb00 c004 	mla	r0, r0, r4, ip
 80107fa:	f104 0e01 	add.w	lr, r4, #1
 80107fe:	3018      	adds	r0, #24
 8010800:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010804:	f006 fbf0 	bl	8016fe8 <uxr_init_output_reliable_stream>
 8010808:	2201      	movs	r2, #1
 801080a:	2102      	movs	r1, #2
 801080c:	4620      	mov	r0, r4
 801080e:	b004      	add	sp, #16
 8010810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010814:	f7ff bf34 	b.w	8010680 <uxr_stream_id>

08010818 <uxr_add_input_best_effort_buffer>:
 8010818:	b510      	push	{r4, lr}
 801081a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801081e:	4603      	mov	r3, r0
 8010820:	1c62      	adds	r2, r4, #1
 8010822:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010826:	b082      	sub	sp, #8
 8010828:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801082c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010830:	f006 f964 	bl	8016afc <uxr_init_input_best_effort_stream>
 8010834:	2200      	movs	r2, #0
 8010836:	2101      	movs	r1, #1
 8010838:	4620      	mov	r0, r4
 801083a:	b002      	add	sp, #8
 801083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010840:	f7ff bf1e 	b.w	8010680 <uxr_stream_id>

08010844 <uxr_add_input_reliable_buffer>:
 8010844:	b510      	push	{r4, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	4684      	mov	ip, r0
 801084a:	9806      	ldr	r0, [sp, #24]
 801084c:	9000      	str	r0, [sp, #0]
 801084e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010852:	2018      	movs	r0, #24
 8010854:	fb00 c004 	mla	r0, r0, r4, ip
 8010858:	f104 0e01 	add.w	lr, r4, #1
 801085c:	3048      	adds	r0, #72	@ 0x48
 801085e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010862:	f006 f997 	bl	8016b94 <uxr_init_input_reliable_stream>
 8010866:	2200      	movs	r2, #0
 8010868:	2102      	movs	r1, #2
 801086a:	4620      	mov	r0, r4
 801086c:	b004      	add	sp, #16
 801086e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010872:	f7ff bf05 	b.w	8010680 <uxr_stream_id>
 8010876:	bf00      	nop

08010878 <uxr_get_output_best_effort_stream>:
 8010878:	7c03      	ldrb	r3, [r0, #16]
 801087a:	428b      	cmp	r3, r1
 801087c:	bf8c      	ite	hi
 801087e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010882:	2000      	movls	r0, #0
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop

08010888 <uxr_get_output_reliable_stream>:
 8010888:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801088c:	428b      	cmp	r3, r1
 801088e:	bf83      	ittte	hi
 8010890:	2328      	movhi	r3, #40	@ 0x28
 8010892:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010896:	3018      	addhi	r0, #24
 8010898:	2000      	movls	r0, #0
 801089a:	4770      	bx	lr

0801089c <uxr_get_input_best_effort_stream>:
 801089c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80108a0:	428b      	cmp	r3, r1
 80108a2:	bf86      	itte	hi
 80108a4:	3121      	addhi	r1, #33	@ 0x21
 80108a6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80108aa:	2000      	movls	r0, #0
 80108ac:	4770      	bx	lr
 80108ae:	bf00      	nop

080108b0 <uxr_get_input_reliable_stream>:
 80108b0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80108b4:	428b      	cmp	r3, r1
 80108b6:	bf83      	ittte	hi
 80108b8:	2318      	movhi	r3, #24
 80108ba:	fb03 0001 	mlahi	r0, r3, r1, r0
 80108be:	3048      	addhi	r0, #72	@ 0x48
 80108c0:	2000      	movls	r0, #0
 80108c2:	4770      	bx	lr

080108c4 <uxr_output_streams_confirmed>:
 80108c4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80108c8:	b183      	cbz	r3, 80108ec <uxr_output_streams_confirmed+0x28>
 80108ca:	b570      	push	{r4, r5, r6, lr}
 80108cc:	4606      	mov	r6, r0
 80108ce:	f100 0518 	add.w	r5, r0, #24
 80108d2:	2400      	movs	r4, #0
 80108d4:	e001      	b.n	80108da <uxr_output_streams_confirmed+0x16>
 80108d6:	3528      	adds	r5, #40	@ 0x28
 80108d8:	b138      	cbz	r0, 80108ea <uxr_output_streams_confirmed+0x26>
 80108da:	4628      	mov	r0, r5
 80108dc:	f006 fe2c 	bl	8017538 <uxr_is_output_up_to_date>
 80108e0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80108e4:	3401      	adds	r4, #1
 80108e6:	42a3      	cmp	r3, r4
 80108e8:	d8f5      	bhi.n	80108d6 <uxr_output_streams_confirmed+0x12>
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
 80108ec:	2001      	movs	r0, #1
 80108ee:	4770      	bx	lr

080108f0 <uxr_buffer_submessage_header>:
 80108f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108f2:	4604      	mov	r4, r0
 80108f4:	460e      	mov	r6, r1
 80108f6:	2104      	movs	r1, #4
 80108f8:	4615      	mov	r5, r2
 80108fa:	461f      	mov	r7, r3
 80108fc:	f7fe faf6 	bl	800eeec <ucdr_align_to>
 8010900:	2301      	movs	r3, #1
 8010902:	ea47 0203 	orr.w	r2, r7, r3
 8010906:	4631      	mov	r1, r6
 8010908:	7523      	strb	r3, [r4, #20]
 801090a:	4620      	mov	r0, r4
 801090c:	462b      	mov	r3, r5
 801090e:	f000 fa27 	bl	8010d60 <uxr_serialize_submessage_header>
 8010912:	4620      	mov	r0, r4
 8010914:	f7fe fb00 	bl	800ef18 <ucdr_buffer_remaining>
 8010918:	42a8      	cmp	r0, r5
 801091a:	bf34      	ite	cc
 801091c:	2000      	movcc	r0, #0
 801091e:	2001      	movcs	r0, #1
 8010920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010922:	bf00      	nop

08010924 <uxr_read_submessage_header>:
 8010924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010928:	4604      	mov	r4, r0
 801092a:	460d      	mov	r5, r1
 801092c:	2104      	movs	r1, #4
 801092e:	4616      	mov	r6, r2
 8010930:	4698      	mov	r8, r3
 8010932:	f7fe fadb 	bl	800eeec <ucdr_align_to>
 8010936:	4620      	mov	r0, r4
 8010938:	f7fe faee 	bl	800ef18 <ucdr_buffer_remaining>
 801093c:	2803      	cmp	r0, #3
 801093e:	bf8c      	ite	hi
 8010940:	2701      	movhi	r7, #1
 8010942:	2700      	movls	r7, #0
 8010944:	d802      	bhi.n	801094c <uxr_read_submessage_header+0x28>
 8010946:	4638      	mov	r0, r7
 8010948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801094c:	4633      	mov	r3, r6
 801094e:	4642      	mov	r2, r8
 8010950:	4620      	mov	r0, r4
 8010952:	4629      	mov	r1, r5
 8010954:	f000 fa18 	bl	8010d88 <uxr_deserialize_submessage_header>
 8010958:	f898 3000 	ldrb.w	r3, [r8]
 801095c:	f003 0201 	and.w	r2, r3, #1
 8010960:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010964:	f888 3000 	strb.w	r3, [r8]
 8010968:	7522      	strb	r2, [r4, #20]
 801096a:	4638      	mov	r0, r7
 801096c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010970 <uxr_submessage_padding>:
 8010970:	f010 0003 	ands.w	r0, r0, #3
 8010974:	bf18      	it	ne
 8010976:	f1c0 0004 	rsbne	r0, r0, #4
 801097a:	4770      	bx	lr

0801097c <uxr_millis>:
 801097c:	b510      	push	{r4, lr}
 801097e:	b084      	sub	sp, #16
 8010980:	4669      	mov	r1, sp
 8010982:	2001      	movs	r0, #1
 8010984:	f7f1 fbec 	bl	8002160 <clock_gettime>
 8010988:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801098c:	4906      	ldr	r1, [pc, #24]	@ (80109a8 <uxr_millis+0x2c>)
 801098e:	fba0 0301 	umull	r0, r3, r0, r1
 8010992:	1900      	adds	r0, r0, r4
 8010994:	fb01 3102 	mla	r1, r1, r2, r3
 8010998:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801099c:	4a03      	ldr	r2, [pc, #12]	@ (80109ac <uxr_millis+0x30>)
 801099e:	2300      	movs	r3, #0
 80109a0:	f7f0 f93c 	bl	8000c1c <__aeabi_ldivmod>
 80109a4:	b004      	add	sp, #16
 80109a6:	bd10      	pop	{r4, pc}
 80109a8:	3b9aca00 	.word	0x3b9aca00
 80109ac:	000f4240 	.word	0x000f4240

080109b0 <uxr_nanos>:
 80109b0:	b510      	push	{r4, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	4669      	mov	r1, sp
 80109b6:	2001      	movs	r0, #1
 80109b8:	f7f1 fbd2 	bl	8002160 <clock_gettime>
 80109bc:	4a06      	ldr	r2, [pc, #24]	@ (80109d8 <uxr_nanos+0x28>)
 80109be:	9800      	ldr	r0, [sp, #0]
 80109c0:	9902      	ldr	r1, [sp, #8]
 80109c2:	9c01      	ldr	r4, [sp, #4]
 80109c4:	fba0 0302 	umull	r0, r3, r0, r2
 80109c8:	1840      	adds	r0, r0, r1
 80109ca:	fb02 3304 	mla	r3, r2, r4, r3
 80109ce:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80109d2:	b004      	add	sp, #16
 80109d4:	bd10      	pop	{r4, pc}
 80109d6:	bf00      	nop
 80109d8:	3b9aca00 	.word	0x3b9aca00

080109dc <on_full_output_buffer_fragmented>:
 80109dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e0:	460c      	mov	r4, r1
 80109e2:	b08a      	sub	sp, #40	@ 0x28
 80109e4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80109e8:	4606      	mov	r6, r0
 80109ea:	f104 0008 	add.w	r0, r4, #8
 80109ee:	f7ff ff4b 	bl	8010888 <uxr_get_output_reliable_stream>
 80109f2:	4605      	mov	r5, r0
 80109f4:	f006 fdaa 	bl	801754c <get_available_free_slots>
 80109f8:	b968      	cbnz	r0, 8010a16 <on_full_output_buffer_fragmented+0x3a>
 80109fa:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80109fe:	4620      	mov	r0, r4
 8010a00:	4798      	blx	r3
 8010a02:	b918      	cbnz	r0, 8010a0c <on_full_output_buffer_fragmented+0x30>
 8010a04:	2001      	movs	r0, #1
 8010a06:	b00a      	add	sp, #40	@ 0x28
 8010a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	f006 fd9d 	bl	801754c <get_available_free_slots>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d0f6      	beq.n	8010a04 <on_full_output_buffer_fragmented+0x28>
 8010a16:	8929      	ldrh	r1, [r5, #8]
 8010a18:	89eb      	ldrh	r3, [r5, #14]
 8010a1a:	7b28      	ldrb	r0, [r5, #12]
 8010a1c:	686a      	ldr	r2, [r5, #4]
 8010a1e:	fbb2 f8f1 	udiv	r8, r2, r1
 8010a22:	fbb3 f2f1 	udiv	r2, r3, r1
 8010a26:	fb01 3112 	mls	r1, r1, r2, r3
 8010a2a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010a2e:	b289      	uxth	r1, r1
 8010a30:	fb08 f101 	mul.w	r1, r8, r1
 8010a34:	30fc      	adds	r0, #252	@ 0xfc
 8010a36:	f1a8 0804 	sub.w	r8, r8, #4
 8010a3a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010a3e:	4440      	add	r0, r8
 8010a40:	b287      	uxth	r7, r0
 8010a42:	1bdb      	subs	r3, r3, r7
 8010a44:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010a48:	682b      	ldr	r3, [r5, #0]
 8010a4a:	3104      	adds	r1, #4
 8010a4c:	4419      	add	r1, r3
 8010a4e:	4642      	mov	r2, r8
 8010a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	a802      	add	r0, sp, #8
 8010a58:	2300      	movs	r3, #0
 8010a5a:	f7fe fa1b 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 8010a5e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010a62:	f102 0308 	add.w	r3, r2, #8
 8010a66:	4543      	cmp	r3, r8
 8010a68:	d928      	bls.n	8010abc <on_full_output_buffer_fragmented+0xe0>
 8010a6a:	463a      	mov	r2, r7
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	210d      	movs	r1, #13
 8010a70:	a802      	add	r0, sp, #8
 8010a72:	f7ff ff3d 	bl	80108f0 <uxr_buffer_submessage_header>
 8010a76:	8929      	ldrh	r1, [r5, #8]
 8010a78:	89eb      	ldrh	r3, [r5, #14]
 8010a7a:	fbb3 f2f1 	udiv	r2, r3, r1
 8010a7e:	fb01 3312 	mls	r3, r1, r2, r3
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	686a      	ldr	r2, [r5, #4]
 8010a86:	fbb2 f2f1 	udiv	r2, r2, r1
 8010a8a:	fb02 f303 	mul.w	r3, r2, r3
 8010a8e:	682a      	ldr	r2, [r5, #0]
 8010a90:	f842 8003 	str.w	r8, [r2, r3]
 8010a94:	89e8      	ldrh	r0, [r5, #14]
 8010a96:	2101      	movs	r1, #1
 8010a98:	f006 fea8 	bl	80177ec <uxr_seq_num_add>
 8010a9c:	9904      	ldr	r1, [sp, #16]
 8010a9e:	9a03      	ldr	r2, [sp, #12]
 8010aa0:	81e8      	strh	r0, [r5, #14]
 8010aa2:	1a52      	subs	r2, r2, r1
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f7fe fa07 	bl	800eeb8 <ucdr_init_buffer>
 8010aaa:	4630      	mov	r0, r6
 8010aac:	490f      	ldr	r1, [pc, #60]	@ (8010aec <on_full_output_buffer_fragmented+0x110>)
 8010aae:	4622      	mov	r2, r4
 8010ab0:	f7fe f9d6 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	b00a      	add	sp, #40	@ 0x28
 8010ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010abc:	b292      	uxth	r2, r2
 8010abe:	2302      	movs	r3, #2
 8010ac0:	210d      	movs	r1, #13
 8010ac2:	a802      	add	r0, sp, #8
 8010ac4:	f7ff ff14 	bl	80108f0 <uxr_buffer_submessage_header>
 8010ac8:	8928      	ldrh	r0, [r5, #8]
 8010aca:	89eb      	ldrh	r3, [r5, #14]
 8010acc:	fbb3 f1f0 	udiv	r1, r3, r0
 8010ad0:	fb00 3311 	mls	r3, r0, r1, r3
 8010ad4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010ad8:	6869      	ldr	r1, [r5, #4]
 8010ada:	fbb1 f1f0 	udiv	r1, r1, r0
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	fb01 f303 	mul.w	r3, r1, r3
 8010ae4:	6829      	ldr	r1, [r5, #0]
 8010ae6:	3208      	adds	r2, #8
 8010ae8:	50ca      	str	r2, [r1, r3]
 8010aea:	e7d3      	b.n	8010a94 <on_full_output_buffer_fragmented+0xb8>
 8010aec:	080109dd 	.word	0x080109dd

08010af0 <uxr_prepare_output_stream>:
 8010af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010af2:	b087      	sub	sp, #28
 8010af4:	2707      	movs	r7, #7
 8010af6:	9202      	str	r2, [sp, #8]
 8010af8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010afa:	9103      	str	r1, [sp, #12]
 8010afc:	2500      	movs	r5, #0
 8010afe:	3204      	adds	r2, #4
 8010b00:	e9cd 7500 	strd	r7, r5, [sp]
 8010b04:	461c      	mov	r4, r3
 8010b06:	4606      	mov	r6, r0
 8010b08:	f7ff fc54 	bl	80103b4 <uxr_prepare_stream_to_write_submessage>
 8010b0c:	f080 0201 	eor.w	r2, r0, #1
 8010b10:	b2d2      	uxtb	r2, r2
 8010b12:	75a2      	strb	r2, [r4, #22]
 8010b14:	b112      	cbz	r2, 8010b1c <uxr_prepare_output_stream+0x2c>
 8010b16:	4628      	mov	r0, r5
 8010b18:	b007      	add	sp, #28
 8010b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b1c:	aa05      	add	r2, sp, #20
 8010b1e:	9902      	ldr	r1, [sp, #8]
 8010b20:	4630      	mov	r0, r6
 8010b22:	f7ff fd7d 	bl	8010620 <uxr_init_base_object_request>
 8010b26:	a905      	add	r1, sp, #20
 8010b28:	4605      	mov	r5, r0
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	f001 f88c 	bl	8011c48 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010b30:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010b34:	69a6      	ldr	r6, [r4, #24]
 8010b36:	69e7      	ldr	r7, [r4, #28]
 8010b38:	1a52      	subs	r2, r2, r1
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f7fe f9bc 	bl	800eeb8 <ucdr_init_buffer>
 8010b40:	4620      	mov	r0, r4
 8010b42:	463a      	mov	r2, r7
 8010b44:	4631      	mov	r1, r6
 8010b46:	f7fe f98b 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	b007      	add	sp, #28
 8010b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b50 <uxr_prepare_output_stream_fragmented>:
 8010b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b54:	b091      	sub	sp, #68	@ 0x44
 8010b56:	4605      	mov	r5, r0
 8010b58:	9105      	str	r1, [sp, #20]
 8010b5a:	3008      	adds	r0, #8
 8010b5c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010b60:	461e      	mov	r6, r3
 8010b62:	9204      	str	r2, [sp, #16]
 8010b64:	f7ff fe90 	bl	8010888 <uxr_get_output_reliable_stream>
 8010b68:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	f000 8091 	beq.w	8010c94 <uxr_prepare_output_stream_fragmented+0x144>
 8010b72:	4604      	mov	r4, r0
 8010b74:	2800      	cmp	r0, #0
 8010b76:	f000 808d 	beq.w	8010c94 <uxr_prepare_output_stream_fragmented+0x144>
 8010b7a:	f006 fce7 	bl	801754c <get_available_free_slots>
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	f000 8083 	beq.w	8010c8a <uxr_prepare_output_stream_fragmented+0x13a>
 8010b84:	8922      	ldrh	r2, [r4, #8]
 8010b86:	89e7      	ldrh	r7, [r4, #14]
 8010b88:	fbb7 f9f2 	udiv	r9, r7, r2
 8010b8c:	fb02 7919 	mls	r9, r2, r9, r7
 8010b90:	fa1f f989 	uxth.w	r9, r9
 8010b94:	6863      	ldr	r3, [r4, #4]
 8010b96:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	9203      	str	r2, [sp, #12]
 8010b9e:	fb02 f909 	mul.w	r9, r2, r9
 8010ba2:	f109 0904 	add.w	r9, r9, #4
 8010ba6:	4499      	add	r9, r3
 8010ba8:	7b23      	ldrb	r3, [r4, #12]
 8010baa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010bae:	4543      	cmp	r3, r8
 8010bb0:	f1a2 0b04 	sub.w	fp, r2, #4
 8010bb4:	d37a      	bcc.n	8010cac <uxr_prepare_output_stream_fragmented+0x15c>
 8010bb6:	f1ab 0a04 	sub.w	sl, fp, #4
 8010bba:	ebaa 0a03 	sub.w	sl, sl, r3
 8010bbe:	465a      	mov	r2, fp
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	4649      	mov	r1, r9
 8010bc4:	a808      	add	r0, sp, #32
 8010bc6:	f8cd 8000 	str.w	r8, [sp]
 8010bca:	f7fe f963 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 8010bce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010bd0:	fa1f fa8a 	uxth.w	sl, sl
 8010bd4:	4652      	mov	r2, sl
 8010bd6:	f103 0a08 	add.w	sl, r3, #8
 8010bda:	45da      	cmp	sl, fp
 8010bdc:	bf34      	ite	cc
 8010bde:	2302      	movcc	r3, #2
 8010be0:	2300      	movcs	r3, #0
 8010be2:	210d      	movs	r1, #13
 8010be4:	a808      	add	r0, sp, #32
 8010be6:	f7ff fe83 	bl	80108f0 <uxr_buffer_submessage_header>
 8010bea:	8921      	ldrh	r1, [r4, #8]
 8010bec:	fbb7 f2f1 	udiv	r2, r7, r1
 8010bf0:	fb01 7212 	mls	r2, r1, r2, r7
 8010bf4:	b292      	uxth	r2, r2
 8010bf6:	6863      	ldr	r3, [r4, #4]
 8010bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8010bfc:	fb02 f303 	mul.w	r3, r2, r3
 8010c00:	6822      	ldr	r2, [r4, #0]
 8010c02:	4638      	mov	r0, r7
 8010c04:	f842 b003 	str.w	fp, [r2, r3]
 8010c08:	2101      	movs	r1, #1
 8010c0a:	f006 fdef 	bl	80177ec <uxr_seq_num_add>
 8010c0e:	9b03      	ldr	r3, [sp, #12]
 8010c10:	f108 0104 	add.w	r1, r8, #4
 8010c14:	f1a3 0208 	sub.w	r2, r3, #8
 8010c18:	eba2 0208 	sub.w	r2, r2, r8
 8010c1c:	4449      	add	r1, r9
 8010c1e:	4607      	mov	r7, r0
 8010c20:	4630      	mov	r0, r6
 8010c22:	f7fe f949 	bl	800eeb8 <ucdr_init_buffer>
 8010c26:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010c28:	81e7      	strh	r7, [r4, #14]
 8010c2a:	1d1a      	adds	r2, r3, #4
 8010c2c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010c30:	bf28      	it	cs
 8010c32:	2200      	movcs	r2, #0
 8010c34:	2300      	movs	r3, #0
 8010c36:	b292      	uxth	r2, r2
 8010c38:	2107      	movs	r1, #7
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	f7ff fe58 	bl	80108f0 <uxr_buffer_submessage_header>
 8010c40:	9904      	ldr	r1, [sp, #16]
 8010c42:	aa07      	add	r2, sp, #28
 8010c44:	4628      	mov	r0, r5
 8010c46:	f7ff fceb 	bl	8010620 <uxr_init_base_object_request>
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	b318      	cbz	r0, 8010c96 <uxr_prepare_output_stream_fragmented+0x146>
 8010c4e:	a907      	add	r1, sp, #28
 8010c50:	4630      	mov	r0, r6
 8010c52:	f000 fff9 	bl	8011c48 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010c56:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010c5a:	4630      	mov	r0, r6
 8010c5c:	1a52      	subs	r2, r2, r1
 8010c5e:	f7fe f92b 	bl	800eeb8 <ucdr_init_buffer>
 8010c62:	9b05      	ldr	r3, [sp, #20]
 8010c64:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010c68:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010c6a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010c6e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010c70:	491b      	ldr	r1, [pc, #108]	@ (8010ce0 <uxr_prepare_output_stream_fragmented+0x190>)
 8010c72:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010c76:	4630      	mov	r0, r6
 8010c78:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010c7c:	462a      	mov	r2, r5
 8010c7e:	f7fe f8ef 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8010c82:	4620      	mov	r0, r4
 8010c84:	b011      	add	sp, #68	@ 0x44
 8010c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010c8c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010c8e:	4628      	mov	r0, r5
 8010c90:	4798      	blx	r3
 8010c92:	b920      	cbnz	r0, 8010c9e <uxr_prepare_output_stream_fragmented+0x14e>
 8010c94:	2400      	movs	r4, #0
 8010c96:	4620      	mov	r0, r4
 8010c98:	b011      	add	sp, #68	@ 0x44
 8010c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f006 fc54 	bl	801754c <get_available_free_slots>
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	f47f af6d 	bne.w	8010b84 <uxr_prepare_output_stream_fragmented+0x34>
 8010caa:	e7f3      	b.n	8010c94 <uxr_prepare_output_stream_fragmented+0x144>
 8010cac:	4638      	mov	r0, r7
 8010cae:	2101      	movs	r1, #1
 8010cb0:	f006 fd9c 	bl	80177ec <uxr_seq_num_add>
 8010cb4:	8921      	ldrh	r1, [r4, #8]
 8010cb6:	fbb0 f2f1 	udiv	r2, r0, r1
 8010cba:	fb01 0912 	mls	r9, r1, r2, r0
 8010cbe:	fa1f f289 	uxth.w	r2, r9
 8010cc2:	6863      	ldr	r3, [r4, #4]
 8010cc4:	fbb3 f9f1 	udiv	r9, r3, r1
 8010cc8:	6823      	ldr	r3, [r4, #0]
 8010cca:	fb02 f909 	mul.w	r9, r2, r9
 8010cce:	f109 0904 	add.w	r9, r9, #4
 8010cd2:	4499      	add	r9, r3
 8010cd4:	4607      	mov	r7, r0
 8010cd6:	7b23      	ldrb	r3, [r4, #12]
 8010cd8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010cdc:	e76b      	b.n	8010bb6 <uxr_prepare_output_stream_fragmented+0x66>
 8010cde:	bf00      	nop
 8010ce0:	080109dd 	.word	0x080109dd

08010ce4 <uxr_serialize_message_header>:
 8010ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	4616      	mov	r6, r2
 8010cea:	4604      	mov	r4, r0
 8010cec:	9301      	str	r3, [sp, #4]
 8010cee:	460d      	mov	r5, r1
 8010cf0:	9f08      	ldr	r7, [sp, #32]
 8010cf2:	f7fc fba1 	bl	800d438 <ucdr_serialize_uint8_t>
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f7fc fb9d 	bl	800d438 <ucdr_serialize_uint8_t>
 8010cfe:	9a01      	ldr	r2, [sp, #4]
 8010d00:	2101      	movs	r1, #1
 8010d02:	4620      	mov	r0, r4
 8010d04:	f7fc fc44 	bl	800d590 <ucdr_serialize_endian_uint16_t>
 8010d08:	062b      	lsls	r3, r5, #24
 8010d0a:	d501      	bpl.n	8010d10 <uxr_serialize_message_header+0x2c>
 8010d0c:	b003      	add	sp, #12
 8010d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d10:	2204      	movs	r2, #4
 8010d12:	4639      	mov	r1, r7
 8010d14:	4620      	mov	r0, r4
 8010d16:	b003      	add	sp, #12
 8010d18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d1c:	f7fb bfea 	b.w	800ccf4 <ucdr_serialize_array_uint8_t>

08010d20 <uxr_deserialize_message_header>:
 8010d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d22:	b083      	sub	sp, #12
 8010d24:	4616      	mov	r6, r2
 8010d26:	4604      	mov	r4, r0
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	460d      	mov	r5, r1
 8010d2c:	9f08      	ldr	r7, [sp, #32]
 8010d2e:	f7fc fb99 	bl	800d464 <ucdr_deserialize_uint8_t>
 8010d32:	4631      	mov	r1, r6
 8010d34:	4620      	mov	r0, r4
 8010d36:	f7fc fb95 	bl	800d464 <ucdr_deserialize_uint8_t>
 8010d3a:	9a01      	ldr	r2, [sp, #4]
 8010d3c:	2101      	movs	r1, #1
 8010d3e:	4620      	mov	r0, r4
 8010d40:	f7fc fd1a 	bl	800d778 <ucdr_deserialize_endian_uint16_t>
 8010d44:	f995 3000 	ldrsb.w	r3, [r5]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	da01      	bge.n	8010d50 <uxr_deserialize_message_header+0x30>
 8010d4c:	b003      	add	sp, #12
 8010d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d50:	2204      	movs	r2, #4
 8010d52:	4639      	mov	r1, r7
 8010d54:	4620      	mov	r0, r4
 8010d56:	b003      	add	sp, #12
 8010d58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d5c:	f7fc b82e 	b.w	800cdbc <ucdr_deserialize_array_uint8_t>

08010d60 <uxr_serialize_submessage_header>:
 8010d60:	b530      	push	{r4, r5, lr}
 8010d62:	b083      	sub	sp, #12
 8010d64:	4615      	mov	r5, r2
 8010d66:	4604      	mov	r4, r0
 8010d68:	9301      	str	r3, [sp, #4]
 8010d6a:	f7fc fb65 	bl	800d438 <ucdr_serialize_uint8_t>
 8010d6e:	4629      	mov	r1, r5
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7fc fb61 	bl	800d438 <ucdr_serialize_uint8_t>
 8010d76:	9a01      	ldr	r2, [sp, #4]
 8010d78:	2101      	movs	r1, #1
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	b003      	add	sp, #12
 8010d7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d82:	f7fc bc05 	b.w	800d590 <ucdr_serialize_endian_uint16_t>
 8010d86:	bf00      	nop

08010d88 <uxr_deserialize_submessage_header>:
 8010d88:	b530      	push	{r4, r5, lr}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	4615      	mov	r5, r2
 8010d8e:	4604      	mov	r4, r0
 8010d90:	9301      	str	r3, [sp, #4]
 8010d92:	f7fc fb67 	bl	800d464 <ucdr_deserialize_uint8_t>
 8010d96:	4629      	mov	r1, r5
 8010d98:	4620      	mov	r0, r4
 8010d9a:	f7fc fb63 	bl	800d464 <ucdr_deserialize_uint8_t>
 8010d9e:	9a01      	ldr	r2, [sp, #4]
 8010da0:	2101      	movs	r1, #1
 8010da2:	4620      	mov	r0, r4
 8010da4:	b003      	add	sp, #12
 8010da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010daa:	f7fc bce5 	b.w	800d778 <ucdr_deserialize_endian_uint16_t>
 8010dae:	bf00      	nop

08010db0 <uxr_serialize_CLIENT_Representation>:
 8010db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010db4:	2204      	movs	r2, #4
 8010db6:	460e      	mov	r6, r1
 8010db8:	4605      	mov	r5, r0
 8010dba:	f7fb ff9b 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010dbe:	2202      	movs	r2, #2
 8010dc0:	4607      	mov	r7, r0
 8010dc2:	1d31      	adds	r1, r6, #4
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f7fb ff95 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010dca:	4038      	ands	r0, r7
 8010dcc:	2202      	movs	r2, #2
 8010dce:	1db1      	adds	r1, r6, #6
 8010dd0:	b2c7      	uxtb	r7, r0
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f7fb ff8e 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010dd8:	2204      	movs	r2, #4
 8010dda:	4007      	ands	r7, r0
 8010ddc:	f106 0108 	add.w	r1, r6, #8
 8010de0:	4628      	mov	r0, r5
 8010de2:	f7fb ff87 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010de6:	7b31      	ldrb	r1, [r6, #12]
 8010de8:	4007      	ands	r7, r0
 8010dea:	4628      	mov	r0, r5
 8010dec:	f7fc fb24 	bl	800d438 <ucdr_serialize_uint8_t>
 8010df0:	7b71      	ldrb	r1, [r6, #13]
 8010df2:	4007      	ands	r7, r0
 8010df4:	4628      	mov	r0, r5
 8010df6:	f7fc faf1 	bl	800d3dc <ucdr_serialize_bool>
 8010dfa:	7b73      	ldrb	r3, [r6, #13]
 8010dfc:	ea07 0800 	and.w	r8, r7, r0
 8010e00:	b93b      	cbnz	r3, 8010e12 <uxr_serialize_CLIENT_Representation+0x62>
 8010e02:	8bb1      	ldrh	r1, [r6, #28]
 8010e04:	4628      	mov	r0, r5
 8010e06:	f7fc fb43 	bl	800d490 <ucdr_serialize_uint16_t>
 8010e0a:	ea08 0000 	and.w	r0, r8, r0
 8010e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e12:	6931      	ldr	r1, [r6, #16]
 8010e14:	4628      	mov	r0, r5
 8010e16:	f7fc fd25 	bl	800d864 <ucdr_serialize_uint32_t>
 8010e1a:	6933      	ldr	r3, [r6, #16]
 8010e1c:	b1e3      	cbz	r3, 8010e58 <uxr_serialize_CLIENT_Representation+0xa8>
 8010e1e:	b1c0      	cbz	r0, 8010e52 <uxr_serialize_CLIENT_Representation+0xa2>
 8010e20:	4637      	mov	r7, r6
 8010e22:	f04f 0900 	mov.w	r9, #0
 8010e26:	e001      	b.n	8010e2c <uxr_serialize_CLIENT_Representation+0x7c>
 8010e28:	3708      	adds	r7, #8
 8010e2a:	b194      	cbz	r4, 8010e52 <uxr_serialize_CLIENT_Representation+0xa2>
 8010e2c:	6979      	ldr	r1, [r7, #20]
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f005 fd8a 	bl	8016948 <ucdr_serialize_string>
 8010e34:	69b9      	ldr	r1, [r7, #24]
 8010e36:	4604      	mov	r4, r0
 8010e38:	4628      	mov	r0, r5
 8010e3a:	f005 fd85 	bl	8016948 <ucdr_serialize_string>
 8010e3e:	6933      	ldr	r3, [r6, #16]
 8010e40:	f109 0901 	add.w	r9, r9, #1
 8010e44:	4004      	ands	r4, r0
 8010e46:	4599      	cmp	r9, r3
 8010e48:	b2e4      	uxtb	r4, r4
 8010e4a:	d3ed      	bcc.n	8010e28 <uxr_serialize_CLIENT_Representation+0x78>
 8010e4c:	ea08 0804 	and.w	r8, r8, r4
 8010e50:	e7d7      	b.n	8010e02 <uxr_serialize_CLIENT_Representation+0x52>
 8010e52:	f04f 0800 	mov.w	r8, #0
 8010e56:	e7d4      	b.n	8010e02 <uxr_serialize_CLIENT_Representation+0x52>
 8010e58:	ea08 0800 	and.w	r8, r8, r0
 8010e5c:	e7d1      	b.n	8010e02 <uxr_serialize_CLIENT_Representation+0x52>
 8010e5e:	bf00      	nop

08010e60 <uxr_deserialize_CLIENT_Representation>:
 8010e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e64:	2204      	movs	r2, #4
 8010e66:	460c      	mov	r4, r1
 8010e68:	4605      	mov	r5, r0
 8010e6a:	f7fb ffa7 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8010e6e:	2202      	movs	r2, #2
 8010e70:	4607      	mov	r7, r0
 8010e72:	1d21      	adds	r1, r4, #4
 8010e74:	4628      	mov	r0, r5
 8010e76:	f7fb ffa1 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8010e7a:	4038      	ands	r0, r7
 8010e7c:	2202      	movs	r2, #2
 8010e7e:	1da1      	adds	r1, r4, #6
 8010e80:	b2c6      	uxtb	r6, r0
 8010e82:	4628      	mov	r0, r5
 8010e84:	f7fb ff9a 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8010e88:	2204      	movs	r2, #4
 8010e8a:	4006      	ands	r6, r0
 8010e8c:	f104 0108 	add.w	r1, r4, #8
 8010e90:	4628      	mov	r0, r5
 8010e92:	f7fb ff93 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8010e96:	f104 010c 	add.w	r1, r4, #12
 8010e9a:	4006      	ands	r6, r0
 8010e9c:	4628      	mov	r0, r5
 8010e9e:	f7fc fae1 	bl	800d464 <ucdr_deserialize_uint8_t>
 8010ea2:	f104 010d 	add.w	r1, r4, #13
 8010ea6:	ea06 0700 	and.w	r7, r6, r0
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f7fc faac 	bl	800d408 <ucdr_deserialize_bool>
 8010eb0:	7b63      	ldrb	r3, [r4, #13]
 8010eb2:	4007      	ands	r7, r0
 8010eb4:	b93b      	cbnz	r3, 8010ec6 <uxr_deserialize_CLIENT_Representation+0x66>
 8010eb6:	f104 011c 	add.w	r1, r4, #28
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7fc fbe8 	bl	800d690 <ucdr_deserialize_uint16_t>
 8010ec0:	4038      	ands	r0, r7
 8010ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ec6:	f104 0110 	add.w	r1, r4, #16
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f7fc fdfa 	bl	800dac4 <ucdr_deserialize_uint32_t>
 8010ed0:	6923      	ldr	r3, [r4, #16]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d903      	bls.n	8010ede <uxr_deserialize_CLIENT_Representation+0x7e>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	75ab      	strb	r3, [r5, #22]
 8010eda:	2700      	movs	r7, #0
 8010edc:	e7eb      	b.n	8010eb6 <uxr_deserialize_CLIENT_Representation+0x56>
 8010ede:	b30b      	cbz	r3, 8010f24 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	d0fa      	beq.n	8010eda <uxr_deserialize_CLIENT_Representation+0x7a>
 8010ee4:	46a0      	mov	r8, r4
 8010ee6:	f04f 0900 	mov.w	r9, #0
 8010eea:	e001      	b.n	8010ef0 <uxr_deserialize_CLIENT_Representation+0x90>
 8010eec:	2e00      	cmp	r6, #0
 8010eee:	d0f4      	beq.n	8010eda <uxr_deserialize_CLIENT_Representation+0x7a>
 8010ef0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ef8:	4628      	mov	r0, r5
 8010efa:	f005 fd35 	bl	8016968 <ucdr_deserialize_string>
 8010efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f02:	4606      	mov	r6, r0
 8010f04:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f005 fd2d 	bl	8016968 <ucdr_deserialize_string>
 8010f0e:	6923      	ldr	r3, [r4, #16]
 8010f10:	f109 0901 	add.w	r9, r9, #1
 8010f14:	4006      	ands	r6, r0
 8010f16:	4599      	cmp	r9, r3
 8010f18:	f108 0808 	add.w	r8, r8, #8
 8010f1c:	b2f6      	uxtb	r6, r6
 8010f1e:	d3e5      	bcc.n	8010eec <uxr_deserialize_CLIENT_Representation+0x8c>
 8010f20:	4037      	ands	r7, r6
 8010f22:	e7c8      	b.n	8010eb6 <uxr_deserialize_CLIENT_Representation+0x56>
 8010f24:	4007      	ands	r7, r0
 8010f26:	e7c6      	b.n	8010eb6 <uxr_deserialize_CLIENT_Representation+0x56>

08010f28 <uxr_serialize_AGENT_Representation>:
 8010f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f2c:	2204      	movs	r2, #4
 8010f2e:	460f      	mov	r7, r1
 8010f30:	4605      	mov	r5, r0
 8010f32:	f7fb fedf 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010f36:	2202      	movs	r2, #2
 8010f38:	4604      	mov	r4, r0
 8010f3a:	1d39      	adds	r1, r7, #4
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f7fb fed9 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010f42:	4020      	ands	r0, r4
 8010f44:	2202      	movs	r2, #2
 8010f46:	1db9      	adds	r1, r7, #6
 8010f48:	b2c4      	uxtb	r4, r0
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f7fb fed2 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010f50:	7a39      	ldrb	r1, [r7, #8]
 8010f52:	4004      	ands	r4, r0
 8010f54:	4628      	mov	r0, r5
 8010f56:	f7fc fa41 	bl	800d3dc <ucdr_serialize_bool>
 8010f5a:	7a3b      	ldrb	r3, [r7, #8]
 8010f5c:	ea00 0804 	and.w	r8, r0, r4
 8010f60:	b913      	cbnz	r3, 8010f68 <uxr_serialize_AGENT_Representation+0x40>
 8010f62:	4640      	mov	r0, r8
 8010f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f68:	68f9      	ldr	r1, [r7, #12]
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f7fc fc7a 	bl	800d864 <ucdr_serialize_uint32_t>
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	b303      	cbz	r3, 8010fb6 <uxr_serialize_AGENT_Representation+0x8e>
 8010f74:	b1d0      	cbz	r0, 8010fac <uxr_serialize_AGENT_Representation+0x84>
 8010f76:	463e      	mov	r6, r7
 8010f78:	f04f 0900 	mov.w	r9, #0
 8010f7c:	e001      	b.n	8010f82 <uxr_serialize_AGENT_Representation+0x5a>
 8010f7e:	3608      	adds	r6, #8
 8010f80:	b1a4      	cbz	r4, 8010fac <uxr_serialize_AGENT_Representation+0x84>
 8010f82:	6931      	ldr	r1, [r6, #16]
 8010f84:	4628      	mov	r0, r5
 8010f86:	f005 fcdf 	bl	8016948 <ucdr_serialize_string>
 8010f8a:	6971      	ldr	r1, [r6, #20]
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f005 fcda 	bl	8016948 <ucdr_serialize_string>
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f109 0901 	add.w	r9, r9, #1
 8010f9a:	4004      	ands	r4, r0
 8010f9c:	4599      	cmp	r9, r3
 8010f9e:	b2e4      	uxtb	r4, r4
 8010fa0:	d3ed      	bcc.n	8010f7e <uxr_serialize_AGENT_Representation+0x56>
 8010fa2:	ea08 0804 	and.w	r8, r8, r4
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fac:	f04f 0800 	mov.w	r8, #0
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fb6:	ea08 0800 	and.w	r8, r8, r0
 8010fba:	e7d2      	b.n	8010f62 <uxr_serialize_AGENT_Representation+0x3a>

08010fbc <uxr_serialize_DATAWRITER_Representation>:
 8010fbc:	b570      	push	{r4, r5, r6, lr}
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	7809      	ldrb	r1, [r1, #0]
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	f7fc fa38 	bl	800d438 <ucdr_serialize_uint8_t>
 8010fc8:	4604      	mov	r4, r0
 8010fca:	b130      	cbz	r0, 8010fda <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010fcc:	782b      	ldrb	r3, [r5, #0]
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	d00c      	beq.n	8010fec <uxr_serialize_DATAWRITER_Representation+0x30>
 8010fd2:	2b03      	cmp	r3, #3
 8010fd4:	d010      	beq.n	8010ff8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d008      	beq.n	8010fec <uxr_serialize_DATAWRITER_Representation+0x30>
 8010fda:	2202      	movs	r2, #2
 8010fdc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7fb fe87 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8010fe6:	4020      	ands	r0, r4
 8010fe8:	b2c0      	uxtb	r0, r0
 8010fea:	bd70      	pop	{r4, r5, r6, pc}
 8010fec:	6869      	ldr	r1, [r5, #4]
 8010fee:	4630      	mov	r0, r6
 8010ff0:	f005 fcaa 	bl	8016948 <ucdr_serialize_string>
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	e7f0      	b.n	8010fda <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011000:	3104      	adds	r1, #4
 8011002:	f7fd fff5 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 8011006:	4604      	mov	r4, r0
 8011008:	e7e7      	b.n	8010fda <uxr_serialize_DATAWRITER_Representation+0x1e>
 801100a:	bf00      	nop

0801100c <uxr_serialize_ObjectVariant.part.0>:
 801100c:	b570      	push	{r4, r5, r6, lr}
 801100e:	780b      	ldrb	r3, [r1, #0]
 8011010:	3b01      	subs	r3, #1
 8011012:	460c      	mov	r4, r1
 8011014:	4605      	mov	r5, r0
 8011016:	2b0d      	cmp	r3, #13
 8011018:	d854      	bhi.n	80110c4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801101a:	e8df f003 	tbb	[pc, r3]
 801101e:	0730      	.short	0x0730
 8011020:	07071b1b 	.word	0x07071b1b
 8011024:	0c530707 	.word	0x0c530707
 8011028:	494e0c0c 	.word	0x494e0c0c
 801102c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011030:	3104      	adds	r1, #4
 8011032:	f7ff bfc3 	b.w	8010fbc <uxr_serialize_DATAWRITER_Representation>
 8011036:	7909      	ldrb	r1, [r1, #4]
 8011038:	f7fc f9fe 	bl	800d438 <ucdr_serialize_uint8_t>
 801103c:	b1e8      	cbz	r0, 801107a <uxr_serialize_ObjectVariant.part.0+0x6e>
 801103e:	7923      	ldrb	r3, [r4, #4]
 8011040:	2b01      	cmp	r3, #1
 8011042:	d001      	beq.n	8011048 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011044:	2b02      	cmp	r3, #2
 8011046:	d13d      	bne.n	80110c4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011048:	68a1      	ldr	r1, [r4, #8]
 801104a:	4628      	mov	r0, r5
 801104c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011050:	f005 bc7a 	b.w	8016948 <ucdr_serialize_string>
 8011054:	7909      	ldrb	r1, [r1, #4]
 8011056:	f7fc f9ef 	bl	800d438 <ucdr_serialize_uint8_t>
 801105a:	4606      	mov	r6, r0
 801105c:	b120      	cbz	r0, 8011068 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801105e:	7923      	ldrb	r3, [r4, #4]
 8011060:	2b02      	cmp	r3, #2
 8011062:	d039      	beq.n	80110d8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011064:	2b03      	cmp	r3, #3
 8011066:	d02f      	beq.n	80110c8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011068:	2202      	movs	r2, #2
 801106a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801106e:	4628      	mov	r0, r5
 8011070:	f7fb fe40 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011074:	4030      	ands	r0, r6
 8011076:	b2c0      	uxtb	r0, r0
 8011078:	bd70      	pop	{r4, r5, r6, pc}
 801107a:	2000      	movs	r0, #0
 801107c:	bd70      	pop	{r4, r5, r6, pc}
 801107e:	7909      	ldrb	r1, [r1, #4]
 8011080:	f7fc f9da 	bl	800d438 <ucdr_serialize_uint8_t>
 8011084:	4606      	mov	r6, r0
 8011086:	b158      	cbz	r0, 80110a0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011088:	7923      	ldrb	r3, [r4, #4]
 801108a:	2b02      	cmp	r3, #2
 801108c:	d003      	beq.n	8011096 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801108e:	2b03      	cmp	r3, #3
 8011090:	d028      	beq.n	80110e4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8011092:	2b01      	cmp	r3, #1
 8011094:	d104      	bne.n	80110a0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8011096:	68a1      	ldr	r1, [r4, #8]
 8011098:	4628      	mov	r0, r5
 801109a:	f005 fc55 	bl	8016948 <ucdr_serialize_string>
 801109e:	4606      	mov	r6, r0
 80110a0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80110a4:	4628      	mov	r0, r5
 80110a6:	f7fc ff03 	bl	800deb0 <ucdr_serialize_int16_t>
 80110aa:	4030      	ands	r0, r6
 80110ac:	b2c0      	uxtb	r0, r0
 80110ae:	bd70      	pop	{r4, r5, r6, pc}
 80110b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110b4:	3104      	adds	r1, #4
 80110b6:	f7ff be7b 	b.w	8010db0 <uxr_serialize_CLIENT_Representation>
 80110ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110be:	3104      	adds	r1, #4
 80110c0:	f7ff bf32 	b.w	8010f28 <uxr_serialize_AGENT_Representation>
 80110c4:	2001      	movs	r0, #1
 80110c6:	bd70      	pop	{r4, r5, r6, pc}
 80110c8:	68a2      	ldr	r2, [r4, #8]
 80110ca:	f104 010c 	add.w	r1, r4, #12
 80110ce:	4628      	mov	r0, r5
 80110d0:	f7fd ff8e 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 80110d4:	4606      	mov	r6, r0
 80110d6:	e7c7      	b.n	8011068 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80110d8:	68a1      	ldr	r1, [r4, #8]
 80110da:	4628      	mov	r0, r5
 80110dc:	f005 fc34 	bl	8016948 <ucdr_serialize_string>
 80110e0:	4606      	mov	r6, r0
 80110e2:	e7c1      	b.n	8011068 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80110e4:	68a2      	ldr	r2, [r4, #8]
 80110e6:	f104 010c 	add.w	r1, r4, #12
 80110ea:	4628      	mov	r0, r5
 80110ec:	f7fd ff80 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 80110f0:	4606      	mov	r6, r0
 80110f2:	e7d5      	b.n	80110a0 <uxr_serialize_ObjectVariant.part.0+0x94>

080110f4 <uxr_deserialize_DATAWRITER_Representation>:
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	4606      	mov	r6, r0
 80110f8:	460d      	mov	r5, r1
 80110fa:	f7fc f9b3 	bl	800d464 <ucdr_deserialize_uint8_t>
 80110fe:	4604      	mov	r4, r0
 8011100:	b130      	cbz	r0, 8011110 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011102:	782b      	ldrb	r3, [r5, #0]
 8011104:	2b02      	cmp	r3, #2
 8011106:	d00c      	beq.n	8011122 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011108:	2b03      	cmp	r3, #3
 801110a:	d012      	beq.n	8011132 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801110c:	2b01      	cmp	r3, #1
 801110e:	d008      	beq.n	8011122 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011110:	2202      	movs	r2, #2
 8011112:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011116:	4630      	mov	r0, r6
 8011118:	f7fb fe50 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 801111c:	4020      	ands	r0, r4
 801111e:	b2c0      	uxtb	r0, r0
 8011120:	bd70      	pop	{r4, r5, r6, pc}
 8011122:	6869      	ldr	r1, [r5, #4]
 8011124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011128:	4630      	mov	r0, r6
 801112a:	f005 fc1d 	bl	8016968 <ucdr_deserialize_string>
 801112e:	4604      	mov	r4, r0
 8011130:	e7ee      	b.n	8011110 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011132:	1d2b      	adds	r3, r5, #4
 8011134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011138:	f105 0108 	add.w	r1, r5, #8
 801113c:	4630      	mov	r0, r6
 801113e:	f7fd ff69 	bl	800f014 <ucdr_deserialize_sequence_uint8_t>
 8011142:	4604      	mov	r4, r0
 8011144:	e7e4      	b.n	8011110 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011146:	bf00      	nop

08011148 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	460d      	mov	r5, r1
 801114c:	7809      	ldrb	r1, [r1, #0]
 801114e:	4606      	mov	r6, r0
 8011150:	f7fc f944 	bl	800d3dc <ucdr_serialize_bool>
 8011154:	782b      	ldrb	r3, [r5, #0]
 8011156:	4604      	mov	r4, r0
 8011158:	b94b      	cbnz	r3, 801116e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801115a:	7a29      	ldrb	r1, [r5, #8]
 801115c:	4630      	mov	r0, r6
 801115e:	f7fc f93d 	bl	800d3dc <ucdr_serialize_bool>
 8011162:	7a2b      	ldrb	r3, [r5, #8]
 8011164:	4004      	ands	r4, r0
 8011166:	b2e4      	uxtb	r4, r4
 8011168:	b943      	cbnz	r3, 801117c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801116a:	4620      	mov	r0, r4
 801116c:	bd70      	pop	{r4, r5, r6, pc}
 801116e:	6869      	ldr	r1, [r5, #4]
 8011170:	4630      	mov	r0, r6
 8011172:	f005 fbe9 	bl	8016948 <ucdr_serialize_string>
 8011176:	4004      	ands	r4, r0
 8011178:	b2e4      	uxtb	r4, r4
 801117a:	e7ee      	b.n	801115a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801117c:	68e9      	ldr	r1, [r5, #12]
 801117e:	4630      	mov	r0, r6
 8011180:	f005 fbe2 	bl	8016948 <ucdr_serialize_string>
 8011184:	4004      	ands	r4, r0
 8011186:	4620      	mov	r0, r4
 8011188:	bd70      	pop	{r4, r5, r6, pc}
 801118a:	bf00      	nop

0801118c <uxr_serialize_OBJK_Topic_Binary>:
 801118c:	b570      	push	{r4, r5, r6, lr}
 801118e:	460d      	mov	r5, r1
 8011190:	6809      	ldr	r1, [r1, #0]
 8011192:	4606      	mov	r6, r0
 8011194:	f005 fbd8 	bl	8016948 <ucdr_serialize_string>
 8011198:	7929      	ldrb	r1, [r5, #4]
 801119a:	4604      	mov	r4, r0
 801119c:	4630      	mov	r0, r6
 801119e:	f7fc f91d 	bl	800d3dc <ucdr_serialize_bool>
 80111a2:	792b      	ldrb	r3, [r5, #4]
 80111a4:	4004      	ands	r4, r0
 80111a6:	b2e4      	uxtb	r4, r4
 80111a8:	b943      	cbnz	r3, 80111bc <uxr_serialize_OBJK_Topic_Binary+0x30>
 80111aa:	7b29      	ldrb	r1, [r5, #12]
 80111ac:	4630      	mov	r0, r6
 80111ae:	f7fc f915 	bl	800d3dc <ucdr_serialize_bool>
 80111b2:	7b2b      	ldrb	r3, [r5, #12]
 80111b4:	4004      	ands	r4, r0
 80111b6:	b93b      	cbnz	r3, 80111c8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80111b8:	4620      	mov	r0, r4
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
 80111bc:	68a9      	ldr	r1, [r5, #8]
 80111be:	4630      	mov	r0, r6
 80111c0:	f005 fbc2 	bl	8016948 <ucdr_serialize_string>
 80111c4:	4004      	ands	r4, r0
 80111c6:	e7f0      	b.n	80111aa <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80111c8:	6929      	ldr	r1, [r5, #16]
 80111ca:	4630      	mov	r0, r6
 80111cc:	f005 fbbc 	bl	8016948 <ucdr_serialize_string>
 80111d0:	4004      	ands	r4, r0
 80111d2:	b2e4      	uxtb	r4, r4
 80111d4:	4620      	mov	r0, r4
 80111d6:	bd70      	pop	{r4, r5, r6, pc}

080111d8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80111d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111dc:	460c      	mov	r4, r1
 80111de:	7809      	ldrb	r1, [r1, #0]
 80111e0:	4606      	mov	r6, r0
 80111e2:	f7fc f8fb 	bl	800d3dc <ucdr_serialize_bool>
 80111e6:	7823      	ldrb	r3, [r4, #0]
 80111e8:	4605      	mov	r5, r0
 80111ea:	b96b      	cbnz	r3, 8011208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80111ec:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80111f0:	4630      	mov	r0, r6
 80111f2:	f7fc f8f3 	bl	800d3dc <ucdr_serialize_bool>
 80111f6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80111fa:	4005      	ands	r5, r0
 80111fc:	b2ed      	uxtb	r5, r5
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d169      	bne.n	80112d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011202:	4628      	mov	r0, r5
 8011204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011208:	6861      	ldr	r1, [r4, #4]
 801120a:	4630      	mov	r0, r6
 801120c:	f7fc fb2a 	bl	800d864 <ucdr_serialize_uint32_t>
 8011210:	6863      	ldr	r3, [r4, #4]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d06b      	beq.n	80112ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011216:	2800      	cmp	r0, #0
 8011218:	d067      	beq.n	80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801121a:	68a1      	ldr	r1, [r4, #8]
 801121c:	4630      	mov	r0, r6
 801121e:	f005 fb93 	bl	8016948 <ucdr_serialize_string>
 8011222:	6863      	ldr	r3, [r4, #4]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d953      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011228:	2800      	cmp	r0, #0
 801122a:	d05e      	beq.n	80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801122c:	68e1      	ldr	r1, [r4, #12]
 801122e:	4630      	mov	r0, r6
 8011230:	f005 fb8a 	bl	8016948 <ucdr_serialize_string>
 8011234:	6863      	ldr	r3, [r4, #4]
 8011236:	2b02      	cmp	r3, #2
 8011238:	d94a      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801123a:	2800      	cmp	r0, #0
 801123c:	d055      	beq.n	80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801123e:	6921      	ldr	r1, [r4, #16]
 8011240:	4630      	mov	r0, r6
 8011242:	f005 fb81 	bl	8016948 <ucdr_serialize_string>
 8011246:	6863      	ldr	r3, [r4, #4]
 8011248:	2b03      	cmp	r3, #3
 801124a:	d941      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801124c:	2800      	cmp	r0, #0
 801124e:	d04c      	beq.n	80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011250:	6961      	ldr	r1, [r4, #20]
 8011252:	4630      	mov	r0, r6
 8011254:	f005 fb78 	bl	8016948 <ucdr_serialize_string>
 8011258:	6863      	ldr	r3, [r4, #4]
 801125a:	2b04      	cmp	r3, #4
 801125c:	d938      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801125e:	2800      	cmp	r0, #0
 8011260:	d043      	beq.n	80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011262:	69a1      	ldr	r1, [r4, #24]
 8011264:	4630      	mov	r0, r6
 8011266:	f005 fb6f 	bl	8016948 <ucdr_serialize_string>
 801126a:	6863      	ldr	r3, [r4, #4]
 801126c:	2b05      	cmp	r3, #5
 801126e:	d92f      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011270:	2800      	cmp	r0, #0
 8011272:	d03a      	beq.n	80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011274:	69e1      	ldr	r1, [r4, #28]
 8011276:	4630      	mov	r0, r6
 8011278:	f005 fb66 	bl	8016948 <ucdr_serialize_string>
 801127c:	6863      	ldr	r3, [r4, #4]
 801127e:	2b06      	cmp	r3, #6
 8011280:	d926      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011282:	b390      	cbz	r0, 80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011284:	6a21      	ldr	r1, [r4, #32]
 8011286:	4630      	mov	r0, r6
 8011288:	f005 fb5e 	bl	8016948 <ucdr_serialize_string>
 801128c:	6863      	ldr	r3, [r4, #4]
 801128e:	2b07      	cmp	r3, #7
 8011290:	d91e      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011292:	b350      	cbz	r0, 80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011294:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011296:	4630      	mov	r0, r6
 8011298:	f005 fb56 	bl	8016948 <ucdr_serialize_string>
 801129c:	6863      	ldr	r3, [r4, #4]
 801129e:	2b08      	cmp	r3, #8
 80112a0:	d916      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112a2:	b310      	cbz	r0, 80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112a4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80112a6:	4630      	mov	r0, r6
 80112a8:	f005 fb4e 	bl	8016948 <ucdr_serialize_string>
 80112ac:	6863      	ldr	r3, [r4, #4]
 80112ae:	2b09      	cmp	r3, #9
 80112b0:	d90e      	bls.n	80112d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80112b2:	b1d0      	cbz	r0, 80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112b4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80112b8:	2709      	movs	r7, #9
 80112ba:	e000      	b.n	80112be <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80112bc:	b1a8      	cbz	r0, 80112ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80112be:	f858 1b04 	ldr.w	r1, [r8], #4
 80112c2:	4630      	mov	r0, r6
 80112c4:	f005 fb40 	bl	8016948 <ucdr_serialize_string>
 80112c8:	6862      	ldr	r2, [r4, #4]
 80112ca:	3701      	adds	r7, #1
 80112cc:	4297      	cmp	r7, r2
 80112ce:	d3f5      	bcc.n	80112bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80112d0:	4005      	ands	r5, r0
 80112d2:	b2ed      	uxtb	r5, r5
 80112d4:	e78a      	b.n	80111ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80112d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80112d8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80112dc:	4630      	mov	r0, r6
 80112de:	f7fd fe87 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 80112e2:	4005      	ands	r5, r0
 80112e4:	4628      	mov	r0, r5
 80112e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ea:	2500      	movs	r5, #0
 80112ec:	e77e      	b.n	80111ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80112ee:	4028      	ands	r0, r5
 80112f0:	b2c5      	uxtb	r5, r0
 80112f2:	e77b      	b.n	80111ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080112f4 <uxr_serialize_OBJK_Publisher_Binary>:
 80112f4:	b570      	push	{r4, r5, r6, lr}
 80112f6:	460d      	mov	r5, r1
 80112f8:	7809      	ldrb	r1, [r1, #0]
 80112fa:	4606      	mov	r6, r0
 80112fc:	f7fc f86e 	bl	800d3dc <ucdr_serialize_bool>
 8011300:	782b      	ldrb	r3, [r5, #0]
 8011302:	4604      	mov	r4, r0
 8011304:	b94b      	cbnz	r3, 801131a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011306:	7a29      	ldrb	r1, [r5, #8]
 8011308:	4630      	mov	r0, r6
 801130a:	f7fc f867 	bl	800d3dc <ucdr_serialize_bool>
 801130e:	7a2b      	ldrb	r3, [r5, #8]
 8011310:	4004      	ands	r4, r0
 8011312:	b2e4      	uxtb	r4, r4
 8011314:	b943      	cbnz	r3, 8011328 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011316:	4620      	mov	r0, r4
 8011318:	bd70      	pop	{r4, r5, r6, pc}
 801131a:	6869      	ldr	r1, [r5, #4]
 801131c:	4630      	mov	r0, r6
 801131e:	f005 fb13 	bl	8016948 <ucdr_serialize_string>
 8011322:	4004      	ands	r4, r0
 8011324:	b2e4      	uxtb	r4, r4
 8011326:	e7ee      	b.n	8011306 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011328:	f105 010c 	add.w	r1, r5, #12
 801132c:	4630      	mov	r0, r6
 801132e:	f7ff ff53 	bl	80111d8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011332:	4004      	ands	r4, r0
 8011334:	4620      	mov	r0, r4
 8011336:	bd70      	pop	{r4, r5, r6, pc}

08011338 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801133c:	460c      	mov	r4, r1
 801133e:	7809      	ldrb	r1, [r1, #0]
 8011340:	4606      	mov	r6, r0
 8011342:	f7fc f84b 	bl	800d3dc <ucdr_serialize_bool>
 8011346:	7823      	ldrb	r3, [r4, #0]
 8011348:	4605      	mov	r5, r0
 801134a:	b96b      	cbnz	r3, 8011368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 801134c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011350:	4630      	mov	r0, r6
 8011352:	f7fc f843 	bl	800d3dc <ucdr_serialize_bool>
 8011356:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801135a:	4005      	ands	r5, r0
 801135c:	b2ed      	uxtb	r5, r5
 801135e:	2b00      	cmp	r3, #0
 8011360:	d169      	bne.n	8011436 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011362:	4628      	mov	r0, r5
 8011364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011368:	6861      	ldr	r1, [r4, #4]
 801136a:	4630      	mov	r0, r6
 801136c:	f7fc fa7a 	bl	800d864 <ucdr_serialize_uint32_t>
 8011370:	6863      	ldr	r3, [r4, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d06b      	beq.n	801144e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8011376:	2800      	cmp	r0, #0
 8011378:	d067      	beq.n	801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801137a:	68a1      	ldr	r1, [r4, #8]
 801137c:	4630      	mov	r0, r6
 801137e:	f005 fae3 	bl	8016948 <ucdr_serialize_string>
 8011382:	6863      	ldr	r3, [r4, #4]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d953      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011388:	2800      	cmp	r0, #0
 801138a:	d05e      	beq.n	801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801138c:	68e1      	ldr	r1, [r4, #12]
 801138e:	4630      	mov	r0, r6
 8011390:	f005 fada 	bl	8016948 <ucdr_serialize_string>
 8011394:	6863      	ldr	r3, [r4, #4]
 8011396:	2b02      	cmp	r3, #2
 8011398:	d94a      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801139a:	2800      	cmp	r0, #0
 801139c:	d055      	beq.n	801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801139e:	6921      	ldr	r1, [r4, #16]
 80113a0:	4630      	mov	r0, r6
 80113a2:	f005 fad1 	bl	8016948 <ucdr_serialize_string>
 80113a6:	6863      	ldr	r3, [r4, #4]
 80113a8:	2b03      	cmp	r3, #3
 80113aa:	d941      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80113ac:	2800      	cmp	r0, #0
 80113ae:	d04c      	beq.n	801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80113b0:	6961      	ldr	r1, [r4, #20]
 80113b2:	4630      	mov	r0, r6
 80113b4:	f005 fac8 	bl	8016948 <ucdr_serialize_string>
 80113b8:	6863      	ldr	r3, [r4, #4]
 80113ba:	2b04      	cmp	r3, #4
 80113bc:	d938      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d043      	beq.n	801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80113c2:	69a1      	ldr	r1, [r4, #24]
 80113c4:	4630      	mov	r0, r6
 80113c6:	f005 fabf 	bl	8016948 <ucdr_serialize_string>
 80113ca:	6863      	ldr	r3, [r4, #4]
 80113cc:	2b05      	cmp	r3, #5
 80113ce:	d92f      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d03a      	beq.n	801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80113d4:	69e1      	ldr	r1, [r4, #28]
 80113d6:	4630      	mov	r0, r6
 80113d8:	f005 fab6 	bl	8016948 <ucdr_serialize_string>
 80113dc:	6863      	ldr	r3, [r4, #4]
 80113de:	2b06      	cmp	r3, #6
 80113e0:	d926      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80113e2:	b390      	cbz	r0, 801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80113e4:	6a21      	ldr	r1, [r4, #32]
 80113e6:	4630      	mov	r0, r6
 80113e8:	f005 faae 	bl	8016948 <ucdr_serialize_string>
 80113ec:	6863      	ldr	r3, [r4, #4]
 80113ee:	2b07      	cmp	r3, #7
 80113f0:	d91e      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80113f2:	b350      	cbz	r0, 801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80113f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80113f6:	4630      	mov	r0, r6
 80113f8:	f005 faa6 	bl	8016948 <ucdr_serialize_string>
 80113fc:	6863      	ldr	r3, [r4, #4]
 80113fe:	2b08      	cmp	r3, #8
 8011400:	d916      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011402:	b310      	cbz	r0, 801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011404:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011406:	4630      	mov	r0, r6
 8011408:	f005 fa9e 	bl	8016948 <ucdr_serialize_string>
 801140c:	6863      	ldr	r3, [r4, #4]
 801140e:	2b09      	cmp	r3, #9
 8011410:	d90e      	bls.n	8011430 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011412:	b1d0      	cbz	r0, 801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011414:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8011418:	2709      	movs	r7, #9
 801141a:	e000      	b.n	801141e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801141c:	b1a8      	cbz	r0, 801144a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801141e:	f858 1b04 	ldr.w	r1, [r8], #4
 8011422:	4630      	mov	r0, r6
 8011424:	f005 fa90 	bl	8016948 <ucdr_serialize_string>
 8011428:	6862      	ldr	r2, [r4, #4]
 801142a:	3701      	adds	r7, #1
 801142c:	4297      	cmp	r7, r2
 801142e:	d3f5      	bcc.n	801141c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011430:	4005      	ands	r5, r0
 8011432:	b2ed      	uxtb	r5, r5
 8011434:	e78a      	b.n	801134c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011436:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011438:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801143c:	4630      	mov	r0, r6
 801143e:	f7fd fdd7 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 8011442:	4005      	ands	r5, r0
 8011444:	4628      	mov	r0, r5
 8011446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801144a:	2500      	movs	r5, #0
 801144c:	e77e      	b.n	801134c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801144e:	4028      	ands	r0, r5
 8011450:	b2c5      	uxtb	r5, r0
 8011452:	e77b      	b.n	801134c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08011454 <uxr_serialize_OBJK_Subscriber_Binary>:
 8011454:	b570      	push	{r4, r5, r6, lr}
 8011456:	460d      	mov	r5, r1
 8011458:	7809      	ldrb	r1, [r1, #0]
 801145a:	4606      	mov	r6, r0
 801145c:	f7fb ffbe 	bl	800d3dc <ucdr_serialize_bool>
 8011460:	782b      	ldrb	r3, [r5, #0]
 8011462:	4604      	mov	r4, r0
 8011464:	b94b      	cbnz	r3, 801147a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8011466:	7a29      	ldrb	r1, [r5, #8]
 8011468:	4630      	mov	r0, r6
 801146a:	f7fb ffb7 	bl	800d3dc <ucdr_serialize_bool>
 801146e:	7a2b      	ldrb	r3, [r5, #8]
 8011470:	4004      	ands	r4, r0
 8011472:	b2e4      	uxtb	r4, r4
 8011474:	b943      	cbnz	r3, 8011488 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8011476:	4620      	mov	r0, r4
 8011478:	bd70      	pop	{r4, r5, r6, pc}
 801147a:	6869      	ldr	r1, [r5, #4]
 801147c:	4630      	mov	r0, r6
 801147e:	f005 fa63 	bl	8016948 <ucdr_serialize_string>
 8011482:	4004      	ands	r4, r0
 8011484:	b2e4      	uxtb	r4, r4
 8011486:	e7ee      	b.n	8011466 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8011488:	f105 010c 	add.w	r1, r5, #12
 801148c:	4630      	mov	r0, r6
 801148e:	f7ff ff53 	bl	8011338 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8011492:	4004      	ands	r4, r0
 8011494:	4620      	mov	r0, r4
 8011496:	bd70      	pop	{r4, r5, r6, pc}

08011498 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011498:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801149c:	4688      	mov	r8, r1
 801149e:	8809      	ldrh	r1, [r1, #0]
 80114a0:	4681      	mov	r9, r0
 80114a2:	f7fb fff5 	bl	800d490 <ucdr_serialize_uint16_t>
 80114a6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80114aa:	4606      	mov	r6, r0
 80114ac:	4648      	mov	r0, r9
 80114ae:	f7fb ff95 	bl	800d3dc <ucdr_serialize_bool>
 80114b2:	f898 3002 	ldrb.w	r3, [r8, #2]
 80114b6:	4006      	ands	r6, r0
 80114b8:	b2f5      	uxtb	r5, r6
 80114ba:	b9eb      	cbnz	r3, 80114f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80114bc:	f898 1006 	ldrb.w	r1, [r8, #6]
 80114c0:	4648      	mov	r0, r9
 80114c2:	f7fb ff8b 	bl	800d3dc <ucdr_serialize_bool>
 80114c6:	f898 3006 	ldrb.w	r3, [r8, #6]
 80114ca:	4005      	ands	r5, r0
 80114cc:	bb7b      	cbnz	r3, 801152e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80114ce:	f898 100c 	ldrb.w	r1, [r8, #12]
 80114d2:	4648      	mov	r0, r9
 80114d4:	f7fb ff82 	bl	800d3dc <ucdr_serialize_bool>
 80114d8:	f898 300c 	ldrb.w	r3, [r8, #12]
 80114dc:	4005      	ands	r5, r0
 80114de:	b9f3      	cbnz	r3, 801151e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80114e0:	f898 1014 	ldrb.w	r1, [r8, #20]
 80114e4:	4648      	mov	r0, r9
 80114e6:	f7fb ff79 	bl	800d3dc <ucdr_serialize_bool>
 80114ea:	f898 3014 	ldrb.w	r3, [r8, #20]
 80114ee:	4005      	ands	r5, r0
 80114f0:	b94b      	cbnz	r3, 8011506 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80114f2:	4628      	mov	r0, r5
 80114f4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80114f8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80114fc:	4648      	mov	r0, r9
 80114fe:	f7fb ffc7 	bl	800d490 <ucdr_serialize_uint16_t>
 8011502:	4005      	ands	r5, r0
 8011504:	e7da      	b.n	80114bc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011506:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801150a:	f108 011c 	add.w	r1, r8, #28
 801150e:	4648      	mov	r0, r9
 8011510:	f7fd fd6e 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 8011514:	4028      	ands	r0, r5
 8011516:	b2c5      	uxtb	r5, r0
 8011518:	4628      	mov	r0, r5
 801151a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801151e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011522:	4648      	mov	r0, r9
 8011524:	f7fc f99e 	bl	800d864 <ucdr_serialize_uint32_t>
 8011528:	4028      	ands	r0, r5
 801152a:	b2c5      	uxtb	r5, r0
 801152c:	e7d8      	b.n	80114e0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801152e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011532:	4648      	mov	r0, r9
 8011534:	f7fc f996 	bl	800d864 <ucdr_serialize_uint32_t>
 8011538:	4028      	ands	r0, r5
 801153a:	b2c5      	uxtb	r5, r0
 801153c:	e7c7      	b.n	80114ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801153e:	bf00      	nop

08011540 <uxr_serialize_OBJK_DataReader_Binary>:
 8011540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011542:	2202      	movs	r2, #2
 8011544:	460c      	mov	r4, r1
 8011546:	4606      	mov	r6, r0
 8011548:	f7fb fbd4 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 801154c:	78a1      	ldrb	r1, [r4, #2]
 801154e:	4605      	mov	r5, r0
 8011550:	4630      	mov	r0, r6
 8011552:	f7fb ff43 	bl	800d3dc <ucdr_serialize_bool>
 8011556:	78a3      	ldrb	r3, [r4, #2]
 8011558:	4005      	ands	r5, r0
 801155a:	b2ed      	uxtb	r5, r5
 801155c:	b90b      	cbnz	r3, 8011562 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801155e:	4628      	mov	r0, r5
 8011560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011562:	f104 0108 	add.w	r1, r4, #8
 8011566:	4630      	mov	r0, r6
 8011568:	f7ff ff96 	bl	8011498 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801156c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011570:	4607      	mov	r7, r0
 8011572:	4630      	mov	r0, r6
 8011574:	f7fb ff32 	bl	800d3dc <ucdr_serialize_bool>
 8011578:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801157c:	4038      	ands	r0, r7
 801157e:	b2c7      	uxtb	r7, r0
 8011580:	b95b      	cbnz	r3, 801159a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8011582:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8011586:	4630      	mov	r0, r6
 8011588:	f7fb ff28 	bl	800d3dc <ucdr_serialize_bool>
 801158c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8011590:	4007      	ands	r7, r0
 8011592:	b94b      	cbnz	r3, 80115a8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8011594:	403d      	ands	r5, r7
 8011596:	4628      	mov	r0, r5
 8011598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801159a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 801159e:	4630      	mov	r0, r6
 80115a0:	f7fc fbb6 	bl	800dd10 <ucdr_serialize_uint64_t>
 80115a4:	4007      	ands	r7, r0
 80115a6:	e7ec      	b.n	8011582 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80115a8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80115aa:	4630      	mov	r0, r6
 80115ac:	f005 f9cc 	bl	8016948 <ucdr_serialize_string>
 80115b0:	4007      	ands	r7, r0
 80115b2:	b2ff      	uxtb	r7, r7
 80115b4:	e7ee      	b.n	8011594 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80115b6:	bf00      	nop

080115b8 <uxr_serialize_OBJK_DataWriter_Binary>:
 80115b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ba:	2202      	movs	r2, #2
 80115bc:	460d      	mov	r5, r1
 80115be:	4606      	mov	r6, r0
 80115c0:	f7fb fb98 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 80115c4:	78a9      	ldrb	r1, [r5, #2]
 80115c6:	4604      	mov	r4, r0
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7fb ff07 	bl	800d3dc <ucdr_serialize_bool>
 80115ce:	78ab      	ldrb	r3, [r5, #2]
 80115d0:	4004      	ands	r4, r0
 80115d2:	b2e4      	uxtb	r4, r4
 80115d4:	b90b      	cbnz	r3, 80115da <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80115d6:	4620      	mov	r0, r4
 80115d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115da:	f105 0108 	add.w	r1, r5, #8
 80115de:	4630      	mov	r0, r6
 80115e0:	f7ff ff5a 	bl	8011498 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80115e4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80115e8:	4607      	mov	r7, r0
 80115ea:	4630      	mov	r0, r6
 80115ec:	f7fb fef6 	bl	800d3dc <ucdr_serialize_bool>
 80115f0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80115f4:	4038      	ands	r0, r7
 80115f6:	b2c7      	uxtb	r7, r0
 80115f8:	b913      	cbnz	r3, 8011600 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80115fa:	403c      	ands	r4, r7
 80115fc:	4620      	mov	r0, r4
 80115fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011600:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011604:	4630      	mov	r0, r6
 8011606:	f7fc fb83 	bl	800dd10 <ucdr_serialize_uint64_t>
 801160a:	4007      	ands	r7, r0
 801160c:	e7f5      	b.n	80115fa <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801160e:	bf00      	nop

08011610 <uxr_deserialize_ObjectVariant>:
 8011610:	b570      	push	{r4, r5, r6, lr}
 8011612:	4605      	mov	r5, r0
 8011614:	460e      	mov	r6, r1
 8011616:	f7fb ff25 	bl	800d464 <ucdr_deserialize_uint8_t>
 801161a:	b168      	cbz	r0, 8011638 <uxr_deserialize_ObjectVariant+0x28>
 801161c:	7833      	ldrb	r3, [r6, #0]
 801161e:	3b01      	subs	r3, #1
 8011620:	4604      	mov	r4, r0
 8011622:	2b0d      	cmp	r3, #13
 8011624:	d809      	bhi.n	801163a <uxr_deserialize_ObjectVariant+0x2a>
 8011626:	e8df f003 	tbb	[pc, r3]
 801162a:	0a41      	.short	0x0a41
 801162c:	0a0a2323 	.word	0x0a0a2323
 8011630:	10080a0a 	.word	0x10080a0a
 8011634:	565c1010 	.word	0x565c1010
 8011638:	2400      	movs	r4, #0
 801163a:	4620      	mov	r0, r4
 801163c:	bd70      	pop	{r4, r5, r6, pc}
 801163e:	1d31      	adds	r1, r6, #4
 8011640:	4628      	mov	r0, r5
 8011642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011646:	f7ff bd55 	b.w	80110f4 <uxr_deserialize_DATAWRITER_Representation>
 801164a:	1d31      	adds	r1, r6, #4
 801164c:	4628      	mov	r0, r5
 801164e:	f7fb ff09 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011652:	2800      	cmp	r0, #0
 8011654:	d0f0      	beq.n	8011638 <uxr_deserialize_ObjectVariant+0x28>
 8011656:	7933      	ldrb	r3, [r6, #4]
 8011658:	2b01      	cmp	r3, #1
 801165a:	d001      	beq.n	8011660 <uxr_deserialize_ObjectVariant+0x50>
 801165c:	2b02      	cmp	r3, #2
 801165e:	d1ec      	bne.n	801163a <uxr_deserialize_ObjectVariant+0x2a>
 8011660:	68b1      	ldr	r1, [r6, #8]
 8011662:	4628      	mov	r0, r5
 8011664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801166c:	f005 b97c 	b.w	8016968 <ucdr_deserialize_string>
 8011670:	1d31      	adds	r1, r6, #4
 8011672:	4628      	mov	r0, r5
 8011674:	f7fb fef6 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011678:	4604      	mov	r4, r0
 801167a:	b170      	cbz	r0, 801169a <uxr_deserialize_ObjectVariant+0x8a>
 801167c:	7933      	ldrb	r3, [r6, #4]
 801167e:	2b02      	cmp	r3, #2
 8011680:	d04c      	beq.n	801171c <uxr_deserialize_ObjectVariant+0x10c>
 8011682:	2b03      	cmp	r3, #3
 8011684:	d109      	bne.n	801169a <uxr_deserialize_ObjectVariant+0x8a>
 8011686:	f106 0308 	add.w	r3, r6, #8
 801168a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801168e:	f106 010c 	add.w	r1, r6, #12
 8011692:	4628      	mov	r0, r5
 8011694:	f7fd fcbe 	bl	800f014 <ucdr_deserialize_sequence_uint8_t>
 8011698:	4604      	mov	r4, r0
 801169a:	2202      	movs	r2, #2
 801169c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80116a0:	4628      	mov	r0, r5
 80116a2:	f7fb fb8b 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 80116a6:	4020      	ands	r0, r4
 80116a8:	b2c4      	uxtb	r4, r0
 80116aa:	e7c6      	b.n	801163a <uxr_deserialize_ObjectVariant+0x2a>
 80116ac:	1d31      	adds	r1, r6, #4
 80116ae:	4628      	mov	r0, r5
 80116b0:	f7fb fed8 	bl	800d464 <ucdr_deserialize_uint8_t>
 80116b4:	4604      	mov	r4, r0
 80116b6:	b130      	cbz	r0, 80116c6 <uxr_deserialize_ObjectVariant+0xb6>
 80116b8:	7933      	ldrb	r3, [r6, #4]
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	d036      	beq.n	801172c <uxr_deserialize_ObjectVariant+0x11c>
 80116be:	2b03      	cmp	r3, #3
 80116c0:	d03c      	beq.n	801173c <uxr_deserialize_ObjectVariant+0x12c>
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d032      	beq.n	801172c <uxr_deserialize_ObjectVariant+0x11c>
 80116c6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80116ca:	4628      	mov	r0, r5
 80116cc:	f7fc fc70 	bl	800dfb0 <ucdr_deserialize_int16_t>
 80116d0:	4020      	ands	r0, r4
 80116d2:	b2c4      	uxtb	r4, r0
 80116d4:	e7b1      	b.n	801163a <uxr_deserialize_ObjectVariant+0x2a>
 80116d6:	1d31      	adds	r1, r6, #4
 80116d8:	4628      	mov	r0, r5
 80116da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116de:	f7ff bbbf 	b.w	8010e60 <uxr_deserialize_CLIENT_Representation>
 80116e2:	2204      	movs	r2, #4
 80116e4:	18b1      	adds	r1, r6, r2
 80116e6:	4628      	mov	r0, r5
 80116e8:	f7fb fb68 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 80116ec:	2202      	movs	r2, #2
 80116ee:	f106 0108 	add.w	r1, r6, #8
 80116f2:	4604      	mov	r4, r0
 80116f4:	4628      	mov	r0, r5
 80116f6:	f7fb fb61 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 80116fa:	2202      	movs	r2, #2
 80116fc:	4004      	ands	r4, r0
 80116fe:	f106 010a 	add.w	r1, r6, #10
 8011702:	4628      	mov	r0, r5
 8011704:	f7fb fb5a 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011708:	b2e4      	uxtb	r4, r4
 801170a:	4603      	mov	r3, r0
 801170c:	f106 010c 	add.w	r1, r6, #12
 8011710:	4628      	mov	r0, r5
 8011712:	401c      	ands	r4, r3
 8011714:	f7fb fe78 	bl	800d408 <ucdr_deserialize_bool>
 8011718:	4004      	ands	r4, r0
 801171a:	e78e      	b.n	801163a <uxr_deserialize_ObjectVariant+0x2a>
 801171c:	68b1      	ldr	r1, [r6, #8]
 801171e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011722:	4628      	mov	r0, r5
 8011724:	f005 f920 	bl	8016968 <ucdr_deserialize_string>
 8011728:	4604      	mov	r4, r0
 801172a:	e7b6      	b.n	801169a <uxr_deserialize_ObjectVariant+0x8a>
 801172c:	68b1      	ldr	r1, [r6, #8]
 801172e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011732:	4628      	mov	r0, r5
 8011734:	f005 f918 	bl	8016968 <ucdr_deserialize_string>
 8011738:	4604      	mov	r4, r0
 801173a:	e7c4      	b.n	80116c6 <uxr_deserialize_ObjectVariant+0xb6>
 801173c:	f106 0308 	add.w	r3, r6, #8
 8011740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011744:	f106 010c 	add.w	r1, r6, #12
 8011748:	4628      	mov	r0, r5
 801174a:	f7fd fc63 	bl	800f014 <ucdr_deserialize_sequence_uint8_t>
 801174e:	4604      	mov	r4, r0
 8011750:	e7b9      	b.n	80116c6 <uxr_deserialize_ObjectVariant+0xb6>
 8011752:	bf00      	nop

08011754 <uxr_deserialize_BaseObjectRequest>:
 8011754:	b570      	push	{r4, r5, r6, lr}
 8011756:	2202      	movs	r2, #2
 8011758:	4605      	mov	r5, r0
 801175a:	460e      	mov	r6, r1
 801175c:	f7fb fb2e 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011760:	2202      	movs	r2, #2
 8011762:	4604      	mov	r4, r0
 8011764:	18b1      	adds	r1, r6, r2
 8011766:	4628      	mov	r0, r5
 8011768:	f7fb fb28 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 801176c:	4020      	ands	r0, r4
 801176e:	b2c0      	uxtb	r0, r0
 8011770:	bd70      	pop	{r4, r5, r6, pc}
 8011772:	bf00      	nop

08011774 <uxr_serialize_ActivityInfoVariant>:
 8011774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011778:	460d      	mov	r5, r1
 801177a:	7809      	ldrb	r1, [r1, #0]
 801177c:	4607      	mov	r7, r0
 801177e:	f7fb fe5b 	bl	800d438 <ucdr_serialize_uint8_t>
 8011782:	4681      	mov	r9, r0
 8011784:	b138      	cbz	r0, 8011796 <uxr_serialize_ActivityInfoVariant+0x22>
 8011786:	782b      	ldrb	r3, [r5, #0]
 8011788:	2b06      	cmp	r3, #6
 801178a:	f000 8082 	beq.w	8011892 <uxr_serialize_ActivityInfoVariant+0x11e>
 801178e:	2b0d      	cmp	r3, #13
 8011790:	d016      	beq.n	80117c0 <uxr_serialize_ActivityInfoVariant+0x4c>
 8011792:	2b05      	cmp	r3, #5
 8011794:	d002      	beq.n	801179c <uxr_serialize_ActivityInfoVariant+0x28>
 8011796:	4648      	mov	r0, r9
 8011798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801179c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80117a0:	4638      	mov	r0, r7
 80117a2:	f7fc fb85 	bl	800deb0 <ucdr_serialize_int16_t>
 80117a6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80117aa:	4681      	mov	r9, r0
 80117ac:	4638      	mov	r0, r7
 80117ae:	f7fc faaf 	bl	800dd10 <ucdr_serialize_uint64_t>
 80117b2:	ea09 0000 	and.w	r0, r9, r0
 80117b6:	fa5f f980 	uxtb.w	r9, r0
 80117ba:	4648      	mov	r0, r9
 80117bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80117c4:	4638      	mov	r0, r7
 80117c6:	f7fc fb73 	bl	800deb0 <ucdr_serialize_int16_t>
 80117ca:	68e9      	ldr	r1, [r5, #12]
 80117cc:	4681      	mov	r9, r0
 80117ce:	4638      	mov	r0, r7
 80117d0:	f7fc f848 	bl	800d864 <ucdr_serialize_uint32_t>
 80117d4:	68eb      	ldr	r3, [r5, #12]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d0eb      	beq.n	80117b2 <uxr_serialize_ActivityInfoVariant+0x3e>
 80117da:	b320      	cbz	r0, 8011826 <uxr_serialize_ActivityInfoVariant+0xb2>
 80117dc:	f105 080c 	add.w	r8, r5, #12
 80117e0:	2600      	movs	r6, #0
 80117e2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80117e6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80117ea:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80117ee:	4638      	mov	r0, r7
 80117f0:	f7fb fe22 	bl	800d438 <ucdr_serialize_uint8_t>
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d053      	beq.n	80118a0 <uxr_serialize_ActivityInfoVariant+0x12c>
 80117f8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80117fc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011800:	0074      	lsls	r4, r6, #1
 8011802:	00c9      	lsls	r1, r1, #3
 8011804:	2b03      	cmp	r3, #3
 8011806:	d854      	bhi.n	80118b2 <uxr_serialize_ActivityInfoVariant+0x13e>
 8011808:	e8df f003 	tbb	[pc, r3]
 801180c:	02102132 	.word	0x02102132
 8011810:	4441      	add	r1, r8
 8011812:	4638      	mov	r0, r7
 8011814:	6889      	ldr	r1, [r1, #8]
 8011816:	f005 f897 	bl	8016948 <ucdr_serialize_string>
 801181a:	68ea      	ldr	r2, [r5, #12]
 801181c:	3601      	adds	r6, #1
 801181e:	4296      	cmp	r6, r2
 8011820:	d242      	bcs.n	80118a8 <uxr_serialize_ActivityInfoVariant+0x134>
 8011822:	2800      	cmp	r0, #0
 8011824:	d1dd      	bne.n	80117e2 <uxr_serialize_ActivityInfoVariant+0x6e>
 8011826:	f04f 0900 	mov.w	r9, #0
 801182a:	e7b4      	b.n	8011796 <uxr_serialize_ActivityInfoVariant+0x22>
 801182c:	3108      	adds	r1, #8
 801182e:	4441      	add	r1, r8
 8011830:	2210      	movs	r2, #16
 8011832:	4638      	mov	r0, r7
 8011834:	f7fb fa5e 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011838:	4434      	add	r4, r6
 801183a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801183e:	4604      	mov	r4, r0
 8011840:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011842:	4638      	mov	r0, r7
 8011844:	f7fc f80e 	bl	800d864 <ucdr_serialize_uint32_t>
 8011848:	4020      	ands	r0, r4
 801184a:	b2c0      	uxtb	r0, r0
 801184c:	e7e5      	b.n	801181a <uxr_serialize_ActivityInfoVariant+0xa6>
 801184e:	3108      	adds	r1, #8
 8011850:	4441      	add	r1, r8
 8011852:	2204      	movs	r2, #4
 8011854:	4638      	mov	r0, r7
 8011856:	f7fb fa4d 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 801185a:	4434      	add	r4, r6
 801185c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011860:	4604      	mov	r4, r0
 8011862:	8b19      	ldrh	r1, [r3, #24]
 8011864:	4638      	mov	r0, r7
 8011866:	f7fb fe13 	bl	800d490 <ucdr_serialize_uint16_t>
 801186a:	4020      	ands	r0, r4
 801186c:	b2c0      	uxtb	r0, r0
 801186e:	e7d4      	b.n	801181a <uxr_serialize_ActivityInfoVariant+0xa6>
 8011870:	3108      	adds	r1, #8
 8011872:	4441      	add	r1, r8
 8011874:	2202      	movs	r2, #2
 8011876:	4638      	mov	r0, r7
 8011878:	f7fb fa3c 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 801187c:	4434      	add	r4, r6
 801187e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011882:	4604      	mov	r4, r0
 8011884:	7d99      	ldrb	r1, [r3, #22]
 8011886:	4638      	mov	r0, r7
 8011888:	f7fb fdd6 	bl	800d438 <ucdr_serialize_uint8_t>
 801188c:	4020      	ands	r0, r4
 801188e:	b2c0      	uxtb	r0, r0
 8011890:	e7c3      	b.n	801181a <uxr_serialize_ActivityInfoVariant+0xa6>
 8011892:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011896:	4638      	mov	r0, r7
 8011898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801189c:	f7fc bb08 	b.w	800deb0 <ucdr_serialize_int16_t>
 80118a0:	68ea      	ldr	r2, [r5, #12]
 80118a2:	3601      	adds	r6, #1
 80118a4:	42b2      	cmp	r2, r6
 80118a6:	d8be      	bhi.n	8011826 <uxr_serialize_ActivityInfoVariant+0xb2>
 80118a8:	ea09 0900 	and.w	r9, r9, r0
 80118ac:	fa5f f989 	uxtb.w	r9, r9
 80118b0:	e771      	b.n	8011796 <uxr_serialize_ActivityInfoVariant+0x22>
 80118b2:	68eb      	ldr	r3, [r5, #12]
 80118b4:	3601      	adds	r6, #1
 80118b6:	429e      	cmp	r6, r3
 80118b8:	f10a 0a18 	add.w	sl, sl, #24
 80118bc:	d395      	bcc.n	80117ea <uxr_serialize_ActivityInfoVariant+0x76>
 80118be:	e76a      	b.n	8011796 <uxr_serialize_ActivityInfoVariant+0x22>

080118c0 <uxr_deserialize_BaseObjectReply>:
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	2202      	movs	r2, #2
 80118c6:	4606      	mov	r6, r0
 80118c8:	460f      	mov	r7, r1
 80118ca:	f7fb fa77 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 80118ce:	2202      	movs	r2, #2
 80118d0:	18b9      	adds	r1, r7, r2
 80118d2:	4605      	mov	r5, r0
 80118d4:	4630      	mov	r0, r6
 80118d6:	f7fb fa71 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 80118da:	1d39      	adds	r1, r7, #4
 80118dc:	4680      	mov	r8, r0
 80118de:	4630      	mov	r0, r6
 80118e0:	f7fb fdc0 	bl	800d464 <ucdr_deserialize_uint8_t>
 80118e4:	1d79      	adds	r1, r7, #5
 80118e6:	4604      	mov	r4, r0
 80118e8:	4630      	mov	r0, r6
 80118ea:	f7fb fdbb 	bl	800d464 <ucdr_deserialize_uint8_t>
 80118ee:	ea05 0508 	and.w	r5, r5, r8
 80118f2:	402c      	ands	r4, r5
 80118f4:	4020      	ands	r0, r4
 80118f6:	b2c0      	uxtb	r0, r0
 80118f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118fc <uxr_serialize_ReadSpecification>:
 80118fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011900:	460e      	mov	r6, r1
 8011902:	7809      	ldrb	r1, [r1, #0]
 8011904:	4607      	mov	r7, r0
 8011906:	f7fb fd97 	bl	800d438 <ucdr_serialize_uint8_t>
 801190a:	7871      	ldrb	r1, [r6, #1]
 801190c:	4604      	mov	r4, r0
 801190e:	4638      	mov	r0, r7
 8011910:	f7fb fd92 	bl	800d438 <ucdr_serialize_uint8_t>
 8011914:	78b1      	ldrb	r1, [r6, #2]
 8011916:	4004      	ands	r4, r0
 8011918:	4638      	mov	r0, r7
 801191a:	f7fb fd5f 	bl	800d3dc <ucdr_serialize_bool>
 801191e:	78b3      	ldrb	r3, [r6, #2]
 8011920:	b2e4      	uxtb	r4, r4
 8011922:	4004      	ands	r4, r0
 8011924:	b94b      	cbnz	r3, 801193a <uxr_serialize_ReadSpecification+0x3e>
 8011926:	7a31      	ldrb	r1, [r6, #8]
 8011928:	4638      	mov	r0, r7
 801192a:	f7fb fd57 	bl	800d3dc <ucdr_serialize_bool>
 801192e:	7a33      	ldrb	r3, [r6, #8]
 8011930:	4004      	ands	r4, r0
 8011932:	b943      	cbnz	r3, 8011946 <uxr_serialize_ReadSpecification+0x4a>
 8011934:	4620      	mov	r0, r4
 8011936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801193a:	6871      	ldr	r1, [r6, #4]
 801193c:	4638      	mov	r0, r7
 801193e:	f005 f803 	bl	8016948 <ucdr_serialize_string>
 8011942:	4004      	ands	r4, r0
 8011944:	e7ef      	b.n	8011926 <uxr_serialize_ReadSpecification+0x2a>
 8011946:	8971      	ldrh	r1, [r6, #10]
 8011948:	4638      	mov	r0, r7
 801194a:	f7fb fda1 	bl	800d490 <ucdr_serialize_uint16_t>
 801194e:	89b1      	ldrh	r1, [r6, #12]
 8011950:	4605      	mov	r5, r0
 8011952:	4638      	mov	r0, r7
 8011954:	f7fb fd9c 	bl	800d490 <ucdr_serialize_uint16_t>
 8011958:	89f1      	ldrh	r1, [r6, #14]
 801195a:	4005      	ands	r5, r0
 801195c:	4638      	mov	r0, r7
 801195e:	f7fb fd97 	bl	800d490 <ucdr_serialize_uint16_t>
 8011962:	8a31      	ldrh	r1, [r6, #16]
 8011964:	4680      	mov	r8, r0
 8011966:	4638      	mov	r0, r7
 8011968:	f7fb fd92 	bl	800d490 <ucdr_serialize_uint16_t>
 801196c:	b2ed      	uxtb	r5, r5
 801196e:	4025      	ands	r5, r4
 8011970:	ea08 0505 	and.w	r5, r8, r5
 8011974:	ea00 0405 	and.w	r4, r0, r5
 8011978:	4620      	mov	r0, r4
 801197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801197e:	bf00      	nop

08011980 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011980:	f7ff ba16 	b.w	8010db0 <uxr_serialize_CLIENT_Representation>

08011984 <uxr_serialize_CREATE_Payload>:
 8011984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011986:	2202      	movs	r2, #2
 8011988:	4607      	mov	r7, r0
 801198a:	460e      	mov	r6, r1
 801198c:	f7fb f9b2 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011990:	2202      	movs	r2, #2
 8011992:	18b1      	adds	r1, r6, r2
 8011994:	4605      	mov	r5, r0
 8011996:	4638      	mov	r0, r7
 8011998:	f7fb f9ac 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 801199c:	7931      	ldrb	r1, [r6, #4]
 801199e:	4604      	mov	r4, r0
 80119a0:	4638      	mov	r0, r7
 80119a2:	f7fb fd49 	bl	800d438 <ucdr_serialize_uint8_t>
 80119a6:	b170      	cbz	r0, 80119c6 <uxr_serialize_CREATE_Payload+0x42>
 80119a8:	7933      	ldrb	r3, [r6, #4]
 80119aa:	402c      	ands	r4, r5
 80119ac:	3b01      	subs	r3, #1
 80119ae:	b2e4      	uxtb	r4, r4
 80119b0:	2b0d      	cmp	r3, #13
 80119b2:	d809      	bhi.n	80119c8 <uxr_serialize_CREATE_Payload+0x44>
 80119b4:	e8df f003 	tbb	[pc, r3]
 80119b8:	23230a4c 	.word	0x23230a4c
 80119bc:	0a0a0a0a 	.word	0x0a0a0a0a
 80119c0:	12121208 	.word	0x12121208
 80119c4:	3e45      	.short	0x3e45
 80119c6:	2400      	movs	r4, #0
 80119c8:	4620      	mov	r0, r4
 80119ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119cc:	f106 0108 	add.w	r1, r6, #8
 80119d0:	4638      	mov	r0, r7
 80119d2:	f7ff faf3 	bl	8010fbc <uxr_serialize_DATAWRITER_Representation>
 80119d6:	4004      	ands	r4, r0
 80119d8:	4620      	mov	r0, r4
 80119da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119dc:	7a31      	ldrb	r1, [r6, #8]
 80119de:	4638      	mov	r0, r7
 80119e0:	f7fb fd2a 	bl	800d438 <ucdr_serialize_uint8_t>
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d0ee      	beq.n	80119c6 <uxr_serialize_CREATE_Payload+0x42>
 80119e8:	7a33      	ldrb	r3, [r6, #8]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d001      	beq.n	80119f2 <uxr_serialize_CREATE_Payload+0x6e>
 80119ee:	2b02      	cmp	r3, #2
 80119f0:	d1ea      	bne.n	80119c8 <uxr_serialize_CREATE_Payload+0x44>
 80119f2:	68f1      	ldr	r1, [r6, #12]
 80119f4:	4638      	mov	r0, r7
 80119f6:	f004 ffa7 	bl	8016948 <ucdr_serialize_string>
 80119fa:	4004      	ands	r4, r0
 80119fc:	e7e4      	b.n	80119c8 <uxr_serialize_CREATE_Payload+0x44>
 80119fe:	7a31      	ldrb	r1, [r6, #8]
 8011a00:	4638      	mov	r0, r7
 8011a02:	f7fb fd19 	bl	800d438 <ucdr_serialize_uint8_t>
 8011a06:	4605      	mov	r5, r0
 8011a08:	b158      	cbz	r0, 8011a22 <uxr_serialize_CREATE_Payload+0x9e>
 8011a0a:	7a33      	ldrb	r3, [r6, #8]
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d034      	beq.n	8011a7a <uxr_serialize_CREATE_Payload+0xf6>
 8011a10:	2b03      	cmp	r3, #3
 8011a12:	d106      	bne.n	8011a22 <uxr_serialize_CREATE_Payload+0x9e>
 8011a14:	68f2      	ldr	r2, [r6, #12]
 8011a16:	f106 0110 	add.w	r1, r6, #16
 8011a1a:	4638      	mov	r0, r7
 8011a1c:	f7fd fae8 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 8011a20:	4605      	mov	r5, r0
 8011a22:	2202      	movs	r2, #2
 8011a24:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011a28:	4638      	mov	r0, r7
 8011a2a:	f7fb f963 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011a2e:	4028      	ands	r0, r5
 8011a30:	4004      	ands	r4, r0
 8011a32:	e7c9      	b.n	80119c8 <uxr_serialize_CREATE_Payload+0x44>
 8011a34:	f106 0108 	add.w	r1, r6, #8
 8011a38:	4638      	mov	r0, r7
 8011a3a:	f7ff f9b9 	bl	8010db0 <uxr_serialize_CLIENT_Representation>
 8011a3e:	4004      	ands	r4, r0
 8011a40:	e7c2      	b.n	80119c8 <uxr_serialize_CREATE_Payload+0x44>
 8011a42:	f106 0108 	add.w	r1, r6, #8
 8011a46:	4638      	mov	r0, r7
 8011a48:	f7ff fa6e 	bl	8010f28 <uxr_serialize_AGENT_Representation>
 8011a4c:	4004      	ands	r4, r0
 8011a4e:	e7bb      	b.n	80119c8 <uxr_serialize_CREATE_Payload+0x44>
 8011a50:	7a31      	ldrb	r1, [r6, #8]
 8011a52:	4638      	mov	r0, r7
 8011a54:	f7fb fcf0 	bl	800d438 <ucdr_serialize_uint8_t>
 8011a58:	4605      	mov	r5, r0
 8011a5a:	b130      	cbz	r0, 8011a6a <uxr_serialize_CREATE_Payload+0xe6>
 8011a5c:	7a33      	ldrb	r3, [r6, #8]
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	d011      	beq.n	8011a86 <uxr_serialize_CREATE_Payload+0x102>
 8011a62:	2b03      	cmp	r3, #3
 8011a64:	d015      	beq.n	8011a92 <uxr_serialize_CREATE_Payload+0x10e>
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d00d      	beq.n	8011a86 <uxr_serialize_CREATE_Payload+0x102>
 8011a6a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011a6e:	4638      	mov	r0, r7
 8011a70:	f7fc fa1e 	bl	800deb0 <ucdr_serialize_int16_t>
 8011a74:	4028      	ands	r0, r5
 8011a76:	4004      	ands	r4, r0
 8011a78:	e7a6      	b.n	80119c8 <uxr_serialize_CREATE_Payload+0x44>
 8011a7a:	68f1      	ldr	r1, [r6, #12]
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f004 ff63 	bl	8016948 <ucdr_serialize_string>
 8011a82:	4605      	mov	r5, r0
 8011a84:	e7cd      	b.n	8011a22 <uxr_serialize_CREATE_Payload+0x9e>
 8011a86:	68f1      	ldr	r1, [r6, #12]
 8011a88:	4638      	mov	r0, r7
 8011a8a:	f004 ff5d 	bl	8016948 <ucdr_serialize_string>
 8011a8e:	4605      	mov	r5, r0
 8011a90:	e7eb      	b.n	8011a6a <uxr_serialize_CREATE_Payload+0xe6>
 8011a92:	68f2      	ldr	r2, [r6, #12]
 8011a94:	f106 0110 	add.w	r1, r6, #16
 8011a98:	4638      	mov	r0, r7
 8011a9a:	f7fd faa9 	bl	800eff0 <ucdr_serialize_sequence_uint8_t>
 8011a9e:	4605      	mov	r5, r0
 8011aa0:	e7e3      	b.n	8011a6a <uxr_serialize_CREATE_Payload+0xe6>
 8011aa2:	bf00      	nop

08011aa4 <uxr_deserialize_GET_INFO_Payload>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	2202      	movs	r2, #2
 8011aa8:	4605      	mov	r5, r0
 8011aaa:	460e      	mov	r6, r1
 8011aac:	f7fb f986 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011ab0:	2202      	movs	r2, #2
 8011ab2:	18b1      	adds	r1, r6, r2
 8011ab4:	4604      	mov	r4, r0
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	f7fb f980 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011abc:	1d31      	adds	r1, r6, #4
 8011abe:	4004      	ands	r4, r0
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	f7fb ffff 	bl	800dac4 <ucdr_deserialize_uint32_t>
 8011ac6:	b2e4      	uxtb	r4, r4
 8011ac8:	4020      	ands	r0, r4
 8011aca:	bd70      	pop	{r4, r5, r6, pc}

08011acc <uxr_serialize_DELETE_Payload>:
 8011acc:	b570      	push	{r4, r5, r6, lr}
 8011ace:	2202      	movs	r2, #2
 8011ad0:	4605      	mov	r5, r0
 8011ad2:	460e      	mov	r6, r1
 8011ad4:	f7fb f90e 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011ad8:	2202      	movs	r2, #2
 8011ada:	4604      	mov	r4, r0
 8011adc:	18b1      	adds	r1, r6, r2
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f7fb f908 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011ae4:	4020      	ands	r0, r4
 8011ae6:	b2c0      	uxtb	r0, r0
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
 8011aea:	bf00      	nop

08011aec <uxr_deserialize_STATUS_AGENT_Payload>:
 8011aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af0:	4605      	mov	r5, r0
 8011af2:	460e      	mov	r6, r1
 8011af4:	f7fb fcb6 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011af8:	1c71      	adds	r1, r6, #1
 8011afa:	4604      	mov	r4, r0
 8011afc:	4628      	mov	r0, r5
 8011afe:	f7fb fcb1 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011b02:	2204      	movs	r2, #4
 8011b04:	18b1      	adds	r1, r6, r2
 8011b06:	4680      	mov	r8, r0
 8011b08:	4628      	mov	r0, r5
 8011b0a:	f7fb f957 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011b0e:	f106 0108 	add.w	r1, r6, #8
 8011b12:	4607      	mov	r7, r0
 8011b14:	2202      	movs	r2, #2
 8011b16:	4628      	mov	r0, r5
 8011b18:	f7fb f950 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011b1c:	ea04 0308 	and.w	r3, r4, r8
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	ea03 0407 	and.w	r4, r3, r7
 8011b26:	2202      	movs	r2, #2
 8011b28:	4607      	mov	r7, r0
 8011b2a:	f106 010a 	add.w	r1, r6, #10
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f7fb f944 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011b34:	f106 010c 	add.w	r1, r6, #12
 8011b38:	4603      	mov	r3, r0
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	461d      	mov	r5, r3
 8011b3e:	f7fb fc63 	bl	800d408 <ucdr_deserialize_bool>
 8011b42:	403c      	ands	r4, r7
 8011b44:	4025      	ands	r5, r4
 8011b46:	4028      	ands	r0, r5
 8011b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b4c <uxr_deserialize_STATUS_Payload>:
 8011b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b50:	2202      	movs	r2, #2
 8011b52:	4606      	mov	r6, r0
 8011b54:	460f      	mov	r7, r1
 8011b56:	f7fb f931 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011b5a:	2202      	movs	r2, #2
 8011b5c:	18b9      	adds	r1, r7, r2
 8011b5e:	4605      	mov	r5, r0
 8011b60:	4630      	mov	r0, r6
 8011b62:	f7fb f92b 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011b66:	1d39      	adds	r1, r7, #4
 8011b68:	4680      	mov	r8, r0
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f7fb fc7a 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011b70:	1d79      	adds	r1, r7, #5
 8011b72:	4604      	mov	r4, r0
 8011b74:	4630      	mov	r0, r6
 8011b76:	f7fb fc75 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011b7a:	ea05 0508 	and.w	r5, r5, r8
 8011b7e:	402c      	ands	r4, r5
 8011b80:	4020      	ands	r0, r4
 8011b82:	b2c0      	uxtb	r0, r0
 8011b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b88 <uxr_serialize_INFO_Payload>:
 8011b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b8c:	2202      	movs	r2, #2
 8011b8e:	460c      	mov	r4, r1
 8011b90:	4605      	mov	r5, r0
 8011b92:	f7fb f8af 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011b96:	2202      	movs	r2, #2
 8011b98:	18a1      	adds	r1, r4, r2
 8011b9a:	4680      	mov	r8, r0
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	f7fb f8a9 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011ba2:	7921      	ldrb	r1, [r4, #4]
 8011ba4:	4607      	mov	r7, r0
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f7fb fc46 	bl	800d438 <ucdr_serialize_uint8_t>
 8011bac:	7961      	ldrb	r1, [r4, #5]
 8011bae:	4606      	mov	r6, r0
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	f7fb fc41 	bl	800d438 <ucdr_serialize_uint8_t>
 8011bb6:	ea08 0807 	and.w	r8, r8, r7
 8011bba:	ea06 0608 	and.w	r6, r6, r8
 8011bbe:	4006      	ands	r6, r0
 8011bc0:	7a21      	ldrb	r1, [r4, #8]
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f7fb fc0a 	bl	800d3dc <ucdr_serialize_bool>
 8011bc8:	7a23      	ldrb	r3, [r4, #8]
 8011bca:	b2f7      	uxtb	r7, r6
 8011bcc:	4606      	mov	r6, r0
 8011bce:	b96b      	cbnz	r3, 8011bec <uxr_serialize_INFO_Payload+0x64>
 8011bd0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	f7fb fc01 	bl	800d3dc <ucdr_serialize_bool>
 8011bda:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011bde:	4030      	ands	r0, r6
 8011be0:	b2c6      	uxtb	r6, r0
 8011be2:	b983      	cbnz	r3, 8011c06 <uxr_serialize_INFO_Payload+0x7e>
 8011be4:	ea06 0007 	and.w	r0, r6, r7
 8011be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bec:	7b21      	ldrb	r1, [r4, #12]
 8011bee:	4628      	mov	r0, r5
 8011bf0:	f7fb fc22 	bl	800d438 <ucdr_serialize_uint8_t>
 8011bf4:	b188      	cbz	r0, 8011c1a <uxr_serialize_INFO_Payload+0x92>
 8011bf6:	f104 010c 	add.w	r1, r4, #12
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	f7ff fa06 	bl	801100c <uxr_serialize_ObjectVariant.part.0>
 8011c00:	4030      	ands	r0, r6
 8011c02:	b2c6      	uxtb	r6, r0
 8011c04:	e7e4      	b.n	8011bd0 <uxr_serialize_INFO_Payload+0x48>
 8011c06:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	f7ff fdb2 	bl	8011774 <uxr_serialize_ActivityInfoVariant>
 8011c10:	4006      	ands	r6, r0
 8011c12:	ea06 0007 	and.w	r0, r6, r7
 8011c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c1a:	4606      	mov	r6, r0
 8011c1c:	e7d8      	b.n	8011bd0 <uxr_serialize_INFO_Payload+0x48>
 8011c1e:	bf00      	nop

08011c20 <uxr_serialize_READ_DATA_Payload>:
 8011c20:	b570      	push	{r4, r5, r6, lr}
 8011c22:	2202      	movs	r2, #2
 8011c24:	4605      	mov	r5, r0
 8011c26:	460e      	mov	r6, r1
 8011c28:	f7fb f864 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011c2c:	2202      	movs	r2, #2
 8011c2e:	18b1      	adds	r1, r6, r2
 8011c30:	4604      	mov	r4, r0
 8011c32:	4628      	mov	r0, r5
 8011c34:	f7fb f85e 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011c38:	1d31      	adds	r1, r6, #4
 8011c3a:	4004      	ands	r4, r0
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f7ff fe5d 	bl	80118fc <uxr_serialize_ReadSpecification>
 8011c42:	b2e4      	uxtb	r4, r4
 8011c44:	4020      	ands	r0, r4
 8011c46:	bd70      	pop	{r4, r5, r6, pc}

08011c48 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011c48:	b570      	push	{r4, r5, r6, lr}
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	4605      	mov	r5, r0
 8011c4e:	460e      	mov	r6, r1
 8011c50:	f7fb f850 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011c54:	2202      	movs	r2, #2
 8011c56:	4604      	mov	r4, r0
 8011c58:	18b1      	adds	r1, r6, r2
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f7fb f84a 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011c60:	4020      	ands	r0, r4
 8011c62:	b2c0      	uxtb	r0, r0
 8011c64:	bd70      	pop	{r4, r5, r6, pc}
 8011c66:	bf00      	nop

08011c68 <uxr_serialize_ACKNACK_Payload>:
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	460e      	mov	r6, r1
 8011c6e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011c72:	4605      	mov	r5, r0
 8011c74:	f7fb fc0c 	bl	800d490 <ucdr_serialize_uint16_t>
 8011c78:	2202      	movs	r2, #2
 8011c7a:	4621      	mov	r1, r4
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f7fb f838 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011c84:	7931      	ldrb	r1, [r6, #4]
 8011c86:	4004      	ands	r4, r0
 8011c88:	4628      	mov	r0, r5
 8011c8a:	f7fb fbd5 	bl	800d438 <ucdr_serialize_uint8_t>
 8011c8e:	b2e4      	uxtb	r4, r4
 8011c90:	4020      	ands	r0, r4
 8011c92:	bd70      	pop	{r4, r5, r6, pc}

08011c94 <uxr_deserialize_ACKNACK_Payload>:
 8011c94:	b570      	push	{r4, r5, r6, lr}
 8011c96:	4605      	mov	r5, r0
 8011c98:	460e      	mov	r6, r1
 8011c9a:	f7fb fcf9 	bl	800d690 <ucdr_deserialize_uint16_t>
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	18b1      	adds	r1, r6, r2
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	f7fb f889 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011caa:	1d31      	adds	r1, r6, #4
 8011cac:	4004      	ands	r4, r0
 8011cae:	4628      	mov	r0, r5
 8011cb0:	f7fb fbd8 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011cb4:	b2e4      	uxtb	r4, r4
 8011cb6:	4020      	ands	r0, r4
 8011cb8:	bd70      	pop	{r4, r5, r6, pc}
 8011cba:	bf00      	nop

08011cbc <uxr_serialize_HEARTBEAT_Payload>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	460d      	mov	r5, r1
 8011cc0:	8809      	ldrh	r1, [r1, #0]
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	f7fb fbe4 	bl	800d490 <ucdr_serialize_uint16_t>
 8011cc8:	8869      	ldrh	r1, [r5, #2]
 8011cca:	4604      	mov	r4, r0
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f7fb fbdf 	bl	800d490 <ucdr_serialize_uint16_t>
 8011cd2:	7929      	ldrb	r1, [r5, #4]
 8011cd4:	4004      	ands	r4, r0
 8011cd6:	4630      	mov	r0, r6
 8011cd8:	f7fb fbae 	bl	800d438 <ucdr_serialize_uint8_t>
 8011cdc:	b2e4      	uxtb	r4, r4
 8011cde:	4020      	ands	r0, r4
 8011ce0:	bd70      	pop	{r4, r5, r6, pc}
 8011ce2:	bf00      	nop

08011ce4 <uxr_deserialize_HEARTBEAT_Payload>:
 8011ce4:	b570      	push	{r4, r5, r6, lr}
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	460e      	mov	r6, r1
 8011cea:	f7fb fcd1 	bl	800d690 <ucdr_deserialize_uint16_t>
 8011cee:	1cb1      	adds	r1, r6, #2
 8011cf0:	4604      	mov	r4, r0
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f7fb fccc 	bl	800d690 <ucdr_deserialize_uint16_t>
 8011cf8:	1d31      	adds	r1, r6, #4
 8011cfa:	4004      	ands	r4, r0
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f7fb fbb1 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011d02:	b2e4      	uxtb	r4, r4
 8011d04:	4020      	ands	r0, r4
 8011d06:	bd70      	pop	{r4, r5, r6, pc}

08011d08 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	460e      	mov	r6, r1
 8011d10:	f7fc faf2 	bl	800e2f8 <ucdr_deserialize_int32_t>
 8011d14:	1d31      	adds	r1, r6, #4
 8011d16:	4607      	mov	r7, r0
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f7fb fed3 	bl	800dac4 <ucdr_deserialize_uint32_t>
 8011d1e:	f106 0108 	add.w	r1, r6, #8
 8011d22:	4680      	mov	r8, r0
 8011d24:	4628      	mov	r0, r5
 8011d26:	f7fc fae7 	bl	800e2f8 <ucdr_deserialize_int32_t>
 8011d2a:	f106 010c 	add.w	r1, r6, #12
 8011d2e:	4604      	mov	r4, r0
 8011d30:	4628      	mov	r0, r5
 8011d32:	f7fb fec7 	bl	800dac4 <ucdr_deserialize_uint32_t>
 8011d36:	ea07 0708 	and.w	r7, r7, r8
 8011d3a:	403c      	ands	r4, r7
 8011d3c:	f106 0110 	add.w	r1, r6, #16
 8011d40:	4004      	ands	r4, r0
 8011d42:	4628      	mov	r0, r5
 8011d44:	f7fc fad8 	bl	800e2f8 <ucdr_deserialize_int32_t>
 8011d48:	f106 0114 	add.w	r1, r6, #20
 8011d4c:	4607      	mov	r7, r0
 8011d4e:	4628      	mov	r0, r5
 8011d50:	f7fb feb8 	bl	800dac4 <ucdr_deserialize_uint32_t>
 8011d54:	b2e4      	uxtb	r4, r4
 8011d56:	403c      	ands	r4, r7
 8011d58:	4020      	ands	r0, r4
 8011d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d5e:	bf00      	nop

08011d60 <uxr_serialize_SampleIdentity>:
 8011d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d64:	220c      	movs	r2, #12
 8011d66:	4604      	mov	r4, r0
 8011d68:	460d      	mov	r5, r1
 8011d6a:	f7fa ffc3 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011d6e:	2203      	movs	r2, #3
 8011d70:	f105 010c 	add.w	r1, r5, #12
 8011d74:	4607      	mov	r7, r0
 8011d76:	4620      	mov	r0, r4
 8011d78:	f7fa ffbc 	bl	800ccf4 <ucdr_serialize_array_uint8_t>
 8011d7c:	7be9      	ldrb	r1, [r5, #15]
 8011d7e:	4680      	mov	r8, r0
 8011d80:	4620      	mov	r0, r4
 8011d82:	f7fb fb59 	bl	800d438 <ucdr_serialize_uint8_t>
 8011d86:	6929      	ldr	r1, [r5, #16]
 8011d88:	4606      	mov	r6, r0
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f7fc f984 	bl	800e098 <ucdr_serialize_int32_t>
 8011d90:	6969      	ldr	r1, [r5, #20]
 8011d92:	4603      	mov	r3, r0
 8011d94:	4620      	mov	r0, r4
 8011d96:	ea07 0708 	and.w	r7, r7, r8
 8011d9a:	461c      	mov	r4, r3
 8011d9c:	f7fb fd62 	bl	800d864 <ucdr_serialize_uint32_t>
 8011da0:	403e      	ands	r6, r7
 8011da2:	4034      	ands	r4, r6
 8011da4:	4020      	ands	r0, r4
 8011da6:	b2c0      	uxtb	r0, r0
 8011da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011dac <uxr_deserialize_SampleIdentity>:
 8011dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db0:	220c      	movs	r2, #12
 8011db2:	4604      	mov	r4, r0
 8011db4:	460d      	mov	r5, r1
 8011db6:	f7fb f801 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011dba:	2203      	movs	r2, #3
 8011dbc:	f105 010c 	add.w	r1, r5, #12
 8011dc0:	4607      	mov	r7, r0
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f7fa fffa 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8011dc8:	f105 010f 	add.w	r1, r5, #15
 8011dcc:	4680      	mov	r8, r0
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f7fb fb48 	bl	800d464 <ucdr_deserialize_uint8_t>
 8011dd4:	f105 0110 	add.w	r1, r5, #16
 8011dd8:	4606      	mov	r6, r0
 8011dda:	4620      	mov	r0, r4
 8011ddc:	f7fc fa8c 	bl	800e2f8 <ucdr_deserialize_int32_t>
 8011de0:	f105 0114 	add.w	r1, r5, #20
 8011de4:	4603      	mov	r3, r0
 8011de6:	4620      	mov	r0, r4
 8011de8:	ea07 0708 	and.w	r7, r7, r8
 8011dec:	461c      	mov	r4, r3
 8011dee:	f7fb fe69 	bl	800dac4 <ucdr_deserialize_uint32_t>
 8011df2:	403e      	ands	r6, r7
 8011df4:	4034      	ands	r4, r6
 8011df6:	4020      	ands	r0, r4
 8011df8:	b2c0      	uxtb	r0, r0
 8011dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dfe:	bf00      	nop

08011e00 <nereo_interfaces__msg__ThrusterStatuses__init>:
 8011e00:	3800      	subs	r0, #0
 8011e02:	bf18      	it	ne
 8011e04:	2001      	movne	r0, #1
 8011e06:	4770      	bx	lr

08011e08 <nereo_interfaces__msg__ThrusterStatuses__fini>:
 8011e08:	4770      	bx	lr
 8011e0a:	bf00      	nop

08011e0c <rcl_client_get_rmw_handle>:
 8011e0c:	b118      	cbz	r0, 8011e16 <rcl_client_get_rmw_handle+0xa>
 8011e0e:	6800      	ldr	r0, [r0, #0]
 8011e10:	b108      	cbz	r0, 8011e16 <rcl_client_get_rmw_handle+0xa>
 8011e12:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011e16:	4770      	bx	lr

08011e18 <rcl_send_request>:
 8011e18:	b570      	push	{r4, r5, r6, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	b1e8      	cbz	r0, 8011e5a <rcl_send_request+0x42>
 8011e1e:	4604      	mov	r4, r0
 8011e20:	6800      	ldr	r0, [r0, #0]
 8011e22:	b1d0      	cbz	r0, 8011e5a <rcl_send_request+0x42>
 8011e24:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011e28:	b1bb      	cbz	r3, 8011e5a <rcl_send_request+0x42>
 8011e2a:	460e      	mov	r6, r1
 8011e2c:	b1d1      	cbz	r1, 8011e64 <rcl_send_request+0x4c>
 8011e2e:	4615      	mov	r5, r2
 8011e30:	b1c2      	cbz	r2, 8011e64 <rcl_send_request+0x4c>
 8011e32:	2105      	movs	r1, #5
 8011e34:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011e38:	f002 fd76 	bl	8014928 <__atomic_load_8>
 8011e3c:	6823      	ldr	r3, [r4, #0]
 8011e3e:	e9c5 0100 	strd	r0, r1, [r5]
 8011e42:	462a      	mov	r2, r5
 8011e44:	4631      	mov	r1, r6
 8011e46:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011e4a:	f003 ff21 	bl	8015c90 <rmw_send_request>
 8011e4e:	4606      	mov	r6, r0
 8011e50:	b160      	cbz	r0, 8011e6c <rcl_send_request+0x54>
 8011e52:	2601      	movs	r6, #1
 8011e54:	4630      	mov	r0, r6
 8011e56:	b002      	add	sp, #8
 8011e58:	bd70      	pop	{r4, r5, r6, pc}
 8011e5a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011e5e:	4630      	mov	r0, r6
 8011e60:	b002      	add	sp, #8
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
 8011e64:	260b      	movs	r6, #11
 8011e66:	4630      	mov	r0, r6
 8011e68:	b002      	add	sp, #8
 8011e6a:	bd70      	pop	{r4, r5, r6, pc}
 8011e6c:	6820      	ldr	r0, [r4, #0]
 8011e6e:	2105      	movs	r1, #5
 8011e70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011e74:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011e78:	9100      	str	r1, [sp, #0]
 8011e7a:	f002 fdc1 	bl	8014a00 <__atomic_exchange_8>
 8011e7e:	4630      	mov	r0, r6
 8011e80:	b002      	add	sp, #8
 8011e82:	bd70      	pop	{r4, r5, r6, pc}
 8011e84:	0000      	movs	r0, r0
	...

08011e88 <rcl_take_response>:
 8011e88:	b570      	push	{r4, r5, r6, lr}
 8011e8a:	468e      	mov	lr, r1
 8011e8c:	460c      	mov	r4, r1
 8011e8e:	4616      	mov	r6, r2
 8011e90:	4605      	mov	r5, r0
 8011e92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e96:	b08c      	sub	sp, #48	@ 0x30
 8011e98:	f10d 0c18 	add.w	ip, sp, #24
 8011e9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ea0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011ea4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011ea8:	b35d      	cbz	r5, 8011f02 <rcl_take_response+0x7a>
 8011eaa:	682b      	ldr	r3, [r5, #0]
 8011eac:	b34b      	cbz	r3, 8011f02 <rcl_take_response+0x7a>
 8011eae:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011eb2:	b330      	cbz	r0, 8011f02 <rcl_take_response+0x7a>
 8011eb4:	b346      	cbz	r6, 8011f08 <rcl_take_response+0x80>
 8011eb6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011f10 <rcl_take_response+0x88>
 8011eba:	2300      	movs	r3, #0
 8011ebc:	f88d 3007 	strb.w	r3, [sp, #7]
 8011ec0:	4632      	mov	r2, r6
 8011ec2:	f10d 0307 	add.w	r3, sp, #7
 8011ec6:	a902      	add	r1, sp, #8
 8011ec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ecc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011ed0:	f003 ffe6 	bl	8015ea0 <rmw_take_response>
 8011ed4:	4605      	mov	r5, r0
 8011ed6:	b9c8      	cbnz	r0, 8011f0c <rcl_take_response+0x84>
 8011ed8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011edc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011ee0:	2a00      	cmp	r2, #0
 8011ee2:	bf08      	it	eq
 8011ee4:	461d      	moveq	r5, r3
 8011ee6:	f10d 0e18 	add.w	lr, sp, #24
 8011eea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011eee:	46a4      	mov	ip, r4
 8011ef0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ef4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011ef8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011efc:	4628      	mov	r0, r5
 8011efe:	b00c      	add	sp, #48	@ 0x30
 8011f00:	bd70      	pop	{r4, r5, r6, pc}
 8011f02:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011f06:	e7ee      	b.n	8011ee6 <rcl_take_response+0x5e>
 8011f08:	250b      	movs	r5, #11
 8011f0a:	e7ec      	b.n	8011ee6 <rcl_take_response+0x5e>
 8011f0c:	2501      	movs	r5, #1
 8011f0e:	e7ea      	b.n	8011ee6 <rcl_take_response+0x5e>
	...

08011f18 <rcl_client_is_valid>:
 8011f18:	b130      	cbz	r0, 8011f28 <rcl_client_is_valid+0x10>
 8011f1a:	6800      	ldr	r0, [r0, #0]
 8011f1c:	b120      	cbz	r0, 8011f28 <rcl_client_is_valid+0x10>
 8011f1e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011f22:	3800      	subs	r0, #0
 8011f24:	bf18      	it	ne
 8011f26:	2001      	movne	r0, #1
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop

08011f2c <rcl_convert_rmw_ret_to_rcl_ret>:
 8011f2c:	280b      	cmp	r0, #11
 8011f2e:	dc0d      	bgt.n	8011f4c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	db09      	blt.n	8011f48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011f34:	280b      	cmp	r0, #11
 8011f36:	d807      	bhi.n	8011f48 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011f38:	e8df f000 	tbb	[pc, r0]
 8011f3c:	07060607 	.word	0x07060607
 8011f40:	06060606 	.word	0x06060606
 8011f44:	07070606 	.word	0x07070606
 8011f48:	2001      	movs	r0, #1
 8011f4a:	4770      	bx	lr
 8011f4c:	28cb      	cmp	r0, #203	@ 0xcb
 8011f4e:	bf18      	it	ne
 8011f50:	2001      	movne	r0, #1
 8011f52:	4770      	bx	lr

08011f54 <rcl_get_zero_initialized_context>:
 8011f54:	4a03      	ldr	r2, [pc, #12]	@ (8011f64 <rcl_get_zero_initialized_context+0x10>)
 8011f56:	4603      	mov	r3, r0
 8011f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011f60:	4618      	mov	r0, r3
 8011f62:	4770      	bx	lr
 8011f64:	0801b208 	.word	0x0801b208

08011f68 <rcl_context_is_valid>:
 8011f68:	b118      	cbz	r0, 8011f72 <rcl_context_is_valid+0xa>
 8011f6a:	6840      	ldr	r0, [r0, #4]
 8011f6c:	3800      	subs	r0, #0
 8011f6e:	bf18      	it	ne
 8011f70:	2001      	movne	r0, #1
 8011f72:	4770      	bx	lr

08011f74 <__cleanup_context>:
 8011f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f78:	4606      	mov	r6, r0
 8011f7a:	6800      	ldr	r0, [r0, #0]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	6073      	str	r3, [r6, #4]
 8011f80:	2800      	cmp	r0, #0
 8011f82:	d049      	beq.n	8012018 <__cleanup_context+0xa4>
 8011f84:	6947      	ldr	r7, [r0, #20]
 8011f86:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011f8a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011f8e:	b137      	cbz	r7, 8011f9e <__cleanup_context+0x2a>
 8011f90:	3014      	adds	r0, #20
 8011f92:	f000 f9bb 	bl	801230c <rcl_init_options_fini>
 8011f96:	4607      	mov	r7, r0
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d144      	bne.n	8012026 <__cleanup_context+0xb2>
 8011f9c:	6830      	ldr	r0, [r6, #0]
 8011f9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011fa0:	b143      	cbz	r3, 8011fb4 <__cleanup_context+0x40>
 8011fa2:	3028      	adds	r0, #40	@ 0x28
 8011fa4:	f003 fcbc 	bl	8015920 <rmw_context_fini>
 8011fa8:	b118      	cbz	r0, 8011fb2 <__cleanup_context+0x3e>
 8011faa:	2f00      	cmp	r7, #0
 8011fac:	d03e      	beq.n	801202c <__cleanup_context+0xb8>
 8011fae:	f7f9 faaf 	bl	800b510 <rcutils_reset_error>
 8011fb2:	6830      	ldr	r0, [r6, #0]
 8011fb4:	6a03      	ldr	r3, [r0, #32]
 8011fb6:	b1db      	cbz	r3, 8011ff0 <__cleanup_context+0x7c>
 8011fb8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011fbc:	2a01      	cmp	r2, #1
 8011fbe:	f17c 0100 	sbcs.w	r1, ip, #0
 8011fc2:	db11      	blt.n	8011fe8 <__cleanup_context+0x74>
 8011fc4:	2400      	movs	r4, #0
 8011fc6:	4625      	mov	r5, r4
 8011fc8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011fcc:	4649      	mov	r1, r9
 8011fce:	b1b8      	cbz	r0, 8012000 <__cleanup_context+0x8c>
 8011fd0:	47c0      	blx	r8
 8011fd2:	6833      	ldr	r3, [r6, #0]
 8011fd4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011fd8:	3401      	adds	r4, #1
 8011fda:	f145 0500 	adc.w	r5, r5, #0
 8011fde:	4294      	cmp	r4, r2
 8011fe0:	eb75 010c 	sbcs.w	r1, r5, ip
 8011fe4:	6a1b      	ldr	r3, [r3, #32]
 8011fe6:	dbef      	blt.n	8011fc8 <__cleanup_context+0x54>
 8011fe8:	4618      	mov	r0, r3
 8011fea:	4649      	mov	r1, r9
 8011fec:	47c0      	blx	r8
 8011fee:	6830      	ldr	r0, [r6, #0]
 8011ff0:	4649      	mov	r1, r9
 8011ff2:	47c0      	blx	r8
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	e9c6 3300 	strd	r3, r3, [r6]
 8011ffa:	4638      	mov	r0, r7
 8011ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012000:	3401      	adds	r4, #1
 8012002:	f145 0500 	adc.w	r5, r5, #0
 8012006:	4294      	cmp	r4, r2
 8012008:	eb75 010c 	sbcs.w	r1, r5, ip
 801200c:	dbdc      	blt.n	8011fc8 <__cleanup_context+0x54>
 801200e:	4618      	mov	r0, r3
 8012010:	4649      	mov	r1, r9
 8012012:	47c0      	blx	r8
 8012014:	6830      	ldr	r0, [r6, #0]
 8012016:	e7eb      	b.n	8011ff0 <__cleanup_context+0x7c>
 8012018:	4607      	mov	r7, r0
 801201a:	2300      	movs	r3, #0
 801201c:	e9c6 3300 	strd	r3, r3, [r6]
 8012020:	4638      	mov	r0, r7
 8012022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012026:	f7f9 fa73 	bl	800b510 <rcutils_reset_error>
 801202a:	e7b7      	b.n	8011f9c <__cleanup_context+0x28>
 801202c:	f7ff ff7e 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8012030:	4607      	mov	r7, r0
 8012032:	e7bc      	b.n	8011fae <__cleanup_context+0x3a>

08012034 <rcl_init>:
 8012034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012038:	1e05      	subs	r5, r0, #0
 801203a:	b09e      	sub	sp, #120	@ 0x78
 801203c:	460e      	mov	r6, r1
 801203e:	4690      	mov	r8, r2
 8012040:	461f      	mov	r7, r3
 8012042:	f340 809c 	ble.w	801217e <rcl_init+0x14a>
 8012046:	2900      	cmp	r1, #0
 8012048:	f000 809c 	beq.w	8012184 <rcl_init+0x150>
 801204c:	f1a1 0e04 	sub.w	lr, r1, #4
 8012050:	f04f 0c00 	mov.w	ip, #0
 8012054:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012058:	f10c 0c01 	add.w	ip, ip, #1
 801205c:	2c00      	cmp	r4, #0
 801205e:	f000 8091 	beq.w	8012184 <rcl_init+0x150>
 8012062:	4565      	cmp	r5, ip
 8012064:	d1f6      	bne.n	8012054 <rcl_init+0x20>
 8012066:	f1b8 0f00 	cmp.w	r8, #0
 801206a:	f000 808b 	beq.w	8012184 <rcl_init+0x150>
 801206e:	f8d8 4000 	ldr.w	r4, [r8]
 8012072:	2c00      	cmp	r4, #0
 8012074:	f000 8086 	beq.w	8012184 <rcl_init+0x150>
 8012078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801207a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801207e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012082:	6823      	ldr	r3, [r4, #0]
 8012084:	f8cc 3000 	str.w	r3, [ip]
 8012088:	a819      	add	r0, sp, #100	@ 0x64
 801208a:	f7f9 fa1d 	bl	800b4c8 <rcutils_allocator_is_valid>
 801208e:	2800      	cmp	r0, #0
 8012090:	d078      	beq.n	8012184 <rcl_init+0x150>
 8012092:	2f00      	cmp	r7, #0
 8012094:	d076      	beq.n	8012184 <rcl_init+0x150>
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d178      	bne.n	801218e <rcl_init+0x15a>
 801209c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80120a0:	2178      	movs	r1, #120	@ 0x78
 80120a2:	2001      	movs	r0, #1
 80120a4:	4798      	blx	r3
 80120a6:	4604      	mov	r4, r0
 80120a8:	6038      	str	r0, [r7, #0]
 80120aa:	2800      	cmp	r0, #0
 80120ac:	f000 80b6 	beq.w	801221c <rcl_init+0x1e8>
 80120b0:	a802      	add	r0, sp, #8
 80120b2:	f002 ff89 	bl	8014fc8 <rmw_get_zero_initialized_context>
 80120b6:	a902      	add	r1, sp, #8
 80120b8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80120bc:	2250      	movs	r2, #80	@ 0x50
 80120be:	ac19      	add	r4, sp, #100	@ 0x64
 80120c0:	f007 fafd 	bl	80196be <memcpy>
 80120c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120c6:	f8d7 e000 	ldr.w	lr, [r7]
 80120ca:	46f4      	mov	ip, lr
 80120cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	f8cc 3000 	str.w	r3, [ip]
 80120d6:	f10e 0114 	add.w	r1, lr, #20
 80120da:	4640      	mov	r0, r8
 80120dc:	f000 f940 	bl	8012360 <rcl_init_options_copy>
 80120e0:	4604      	mov	r4, r0
 80120e2:	2800      	cmp	r0, #0
 80120e4:	d144      	bne.n	8012170 <rcl_init+0x13c>
 80120e6:	f8d7 9000 	ldr.w	r9, [r7]
 80120ea:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80120ee:	f8c9 0020 	str.w	r0, [r9, #32]
 80120f2:	f8c9 5018 	str.w	r5, [r9, #24]
 80120f6:	f8c9 801c 	str.w	r8, [r9, #28]
 80120fa:	2d00      	cmp	r5, #0
 80120fc:	d04e      	beq.n	801219c <rcl_init+0x168>
 80120fe:	2e00      	cmp	r6, #0
 8012100:	d04c      	beq.n	801219c <rcl_init+0x168>
 8012102:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8012106:	2104      	movs	r1, #4
 8012108:	4628      	mov	r0, r5
 801210a:	4798      	blx	r3
 801210c:	f8c9 0020 	str.w	r0, [r9, #32]
 8012110:	f8d7 9000 	ldr.w	r9, [r7]
 8012114:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012118:	46ca      	mov	sl, r9
 801211a:	b343      	cbz	r3, 801216e <rcl_init+0x13a>
 801211c:	2d01      	cmp	r5, #1
 801211e:	f178 0300 	sbcs.w	r3, r8, #0
 8012122:	db3b      	blt.n	801219c <rcl_init+0x168>
 8012124:	2400      	movs	r4, #0
 8012126:	3e04      	subs	r6, #4
 8012128:	46a1      	mov	r9, r4
 801212a:	e00b      	b.n	8012144 <rcl_init+0x110>
 801212c:	6831      	ldr	r1, [r6, #0]
 801212e:	f007 fac6 	bl	80196be <memcpy>
 8012132:	3401      	adds	r4, #1
 8012134:	f149 0900 	adc.w	r9, r9, #0
 8012138:	45c8      	cmp	r8, r9
 801213a:	bf08      	it	eq
 801213c:	42a5      	cmpeq	r5, r4
 801213e:	d02b      	beq.n	8012198 <rcl_init+0x164>
 8012140:	f8d7 a000 	ldr.w	sl, [r7]
 8012144:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012148:	f7ee f85a 	bl	8000200 <strlen>
 801214c:	1c42      	adds	r2, r0, #1
 801214e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012150:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8012152:	f8da a020 	ldr.w	sl, [sl, #32]
 8012156:	9201      	str	r2, [sp, #4]
 8012158:	4610      	mov	r0, r2
 801215a:	4798      	blx	r3
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8012162:	6a1b      	ldr	r3, [r3, #32]
 8012164:	9a01      	ldr	r2, [sp, #4]
 8012166:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801216a:	2800      	cmp	r0, #0
 801216c:	d1de      	bne.n	801212c <rcl_init+0xf8>
 801216e:	240a      	movs	r4, #10
 8012170:	4638      	mov	r0, r7
 8012172:	f7ff feff 	bl	8011f74 <__cleanup_context>
 8012176:	4620      	mov	r0, r4
 8012178:	b01e      	add	sp, #120	@ 0x78
 801217a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801217e:	2900      	cmp	r1, #0
 8012180:	f43f af71 	beq.w	8012066 <rcl_init+0x32>
 8012184:	240b      	movs	r4, #11
 8012186:	4620      	mov	r0, r4
 8012188:	b01e      	add	sp, #120	@ 0x78
 801218a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801218e:	2464      	movs	r4, #100	@ 0x64
 8012190:	4620      	mov	r0, r4
 8012192:	b01e      	add	sp, #120	@ 0x78
 8012194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012198:	f8d7 9000 	ldr.w	r9, [r7]
 801219c:	4926      	ldr	r1, [pc, #152]	@ (8012238 <rcl_init+0x204>)
 801219e:	680b      	ldr	r3, [r1, #0]
 80121a0:	3301      	adds	r3, #1
 80121a2:	d036      	beq.n	8012212 <rcl_init+0x1de>
 80121a4:	600b      	str	r3, [r1, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	2400      	movs	r4, #0
 80121aa:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80121ae:	607b      	str	r3, [r7, #4]
 80121b0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80121b2:	3301      	adds	r3, #1
 80121b4:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80121b8:	d034      	beq.n	8012224 <rcl_init+0x1f0>
 80121ba:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80121be:	b93b      	cbnz	r3, 80121d0 <rcl_init+0x19c>
 80121c0:	3030      	adds	r0, #48	@ 0x30
 80121c2:	f000 f939 	bl	8012438 <rcl_get_localhost_only>
 80121c6:	4604      	mov	r4, r0
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d1d1      	bne.n	8012170 <rcl_init+0x13c>
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	6958      	ldr	r0, [r3, #20]
 80121d0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80121d2:	aa18      	add	r2, sp, #96	@ 0x60
 80121d4:	a917      	add	r1, sp, #92	@ 0x5c
 80121d6:	f001 f841 	bl	801325c <rcl_validate_enclave_name>
 80121da:	4604      	mov	r4, r0
 80121dc:	2800      	cmp	r0, #0
 80121de:	d1c7      	bne.n	8012170 <rcl_init+0x13c>
 80121e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80121e2:	b9eb      	cbnz	r3, 8012220 <rcl_init+0x1ec>
 80121e4:	6839      	ldr	r1, [r7, #0]
 80121e6:	694b      	ldr	r3, [r1, #20]
 80121e8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80121ea:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80121ee:	f000 fc3d 	bl	8012a6c <rcl_get_security_options_from_environment>
 80121f2:	4604      	mov	r4, r0
 80121f4:	2800      	cmp	r0, #0
 80121f6:	d1bb      	bne.n	8012170 <rcl_init+0x13c>
 80121f8:	6839      	ldr	r1, [r7, #0]
 80121fa:	6948      	ldr	r0, [r1, #20]
 80121fc:	3128      	adds	r1, #40	@ 0x28
 80121fe:	3018      	adds	r0, #24
 8012200:	f003 fa58 	bl	80156b4 <rmw_init>
 8012204:	4604      	mov	r4, r0
 8012206:	2800      	cmp	r0, #0
 8012208:	d0bd      	beq.n	8012186 <rcl_init+0x152>
 801220a:	f7ff fe8f 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 801220e:	4604      	mov	r4, r0
 8012210:	e7ae      	b.n	8012170 <rcl_init+0x13c>
 8012212:	2201      	movs	r2, #1
 8012214:	461c      	mov	r4, r3
 8012216:	600a      	str	r2, [r1, #0]
 8012218:	4613      	mov	r3, r2
 801221a:	e7c6      	b.n	80121aa <rcl_init+0x176>
 801221c:	240a      	movs	r4, #10
 801221e:	e7b2      	b.n	8012186 <rcl_init+0x152>
 8012220:	2401      	movs	r4, #1
 8012222:	e7a5      	b.n	8012170 <rcl_init+0x13c>
 8012224:	3024      	adds	r0, #36	@ 0x24
 8012226:	f005 ff93 	bl	8018150 <rcl_get_default_domain_id>
 801222a:	4604      	mov	r4, r0
 801222c:	2800      	cmp	r0, #0
 801222e:	d19f      	bne.n	8012170 <rcl_init+0x13c>
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	6958      	ldr	r0, [r3, #20]
 8012234:	e7c1      	b.n	80121ba <rcl_init+0x186>
 8012236:	bf00      	nop
 8012238:	20015424 	.word	0x20015424

0801223c <rcl_get_zero_initialized_init_options>:
 801223c:	2000      	movs	r0, #0
 801223e:	4770      	bx	lr

08012240 <rcl_init_options_init>:
 8012240:	b084      	sub	sp, #16
 8012242:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012244:	b097      	sub	sp, #92	@ 0x5c
 8012246:	ae1d      	add	r6, sp, #116	@ 0x74
 8012248:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801224c:	2800      	cmp	r0, #0
 801224e:	d058      	beq.n	8012302 <rcl_init_options_init+0xc2>
 8012250:	6803      	ldr	r3, [r0, #0]
 8012252:	4605      	mov	r5, r0
 8012254:	b133      	cbz	r3, 8012264 <rcl_init_options_init+0x24>
 8012256:	2464      	movs	r4, #100	@ 0x64
 8012258:	4620      	mov	r0, r4
 801225a:	b017      	add	sp, #92	@ 0x5c
 801225c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012260:	b004      	add	sp, #16
 8012262:	4770      	bx	lr
 8012264:	4630      	mov	r0, r6
 8012266:	f7f9 f92f 	bl	800b4c8 <rcutils_allocator_is_valid>
 801226a:	2800      	cmp	r0, #0
 801226c:	d049      	beq.n	8012302 <rcl_init_options_init+0xc2>
 801226e:	46b4      	mov	ip, r6
 8012270:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012274:	ac11      	add	r4, sp, #68	@ 0x44
 8012276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012278:	f8dc 3000 	ldr.w	r3, [ip]
 801227c:	6023      	str	r3, [r4, #0]
 801227e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8012280:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012282:	2050      	movs	r0, #80	@ 0x50
 8012284:	4798      	blx	r3
 8012286:	4604      	mov	r4, r0
 8012288:	6028      	str	r0, [r5, #0]
 801228a:	2800      	cmp	r0, #0
 801228c:	d03b      	beq.n	8012306 <rcl_init_options_init+0xc6>
 801228e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012292:	4686      	mov	lr, r0
 8012294:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012298:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801229c:	f8dc 3000 	ldr.w	r3, [ip]
 80122a0:	f8ce 3000 	str.w	r3, [lr]
 80122a4:	a802      	add	r0, sp, #8
 80122a6:	f002 fe9f 	bl	8014fe8 <rmw_get_zero_initialized_init_options>
 80122aa:	f10d 0e08 	add.w	lr, sp, #8
 80122ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122b2:	f104 0c18 	add.w	ip, r4, #24
 80122b6:	682f      	ldr	r7, [r5, #0]
 80122b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80122d0:	ac20      	add	r4, sp, #128	@ 0x80
 80122d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80122d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80122da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80122de:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80122e2:	f107 0018 	add.w	r0, r7, #24
 80122e6:	f003 f8ed 	bl	80154c4 <rmw_init_options_init>
 80122ea:	4604      	mov	r4, r0
 80122ec:	2800      	cmp	r0, #0
 80122ee:	d0b3      	beq.n	8012258 <rcl_init_options_init+0x18>
 80122f0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80122f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80122f4:	6828      	ldr	r0, [r5, #0]
 80122f6:	4798      	blx	r3
 80122f8:	4620      	mov	r0, r4
 80122fa:	f7ff fe17 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 80122fe:	4604      	mov	r4, r0
 8012300:	e7aa      	b.n	8012258 <rcl_init_options_init+0x18>
 8012302:	240b      	movs	r4, #11
 8012304:	e7a8      	b.n	8012258 <rcl_init_options_init+0x18>
 8012306:	240a      	movs	r4, #10
 8012308:	e7a6      	b.n	8012258 <rcl_init_options_init+0x18>
 801230a:	bf00      	nop

0801230c <rcl_init_options_fini>:
 801230c:	b530      	push	{r4, r5, lr}
 801230e:	b087      	sub	sp, #28
 8012310:	b1f0      	cbz	r0, 8012350 <rcl_init_options_fini+0x44>
 8012312:	6803      	ldr	r3, [r0, #0]
 8012314:	4604      	mov	r4, r0
 8012316:	b1db      	cbz	r3, 8012350 <rcl_init_options_fini+0x44>
 8012318:	469c      	mov	ip, r3
 801231a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801231e:	f10d 0e04 	add.w	lr, sp, #4
 8012322:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012326:	f8dc 3000 	ldr.w	r3, [ip]
 801232a:	f8ce 3000 	str.w	r3, [lr]
 801232e:	a801      	add	r0, sp, #4
 8012330:	f7f9 f8ca 	bl	800b4c8 <rcutils_allocator_is_valid>
 8012334:	b160      	cbz	r0, 8012350 <rcl_init_options_fini+0x44>
 8012336:	6820      	ldr	r0, [r4, #0]
 8012338:	3018      	adds	r0, #24
 801233a:	f003 f973 	bl	8015624 <rmw_init_options_fini>
 801233e:	4605      	mov	r5, r0
 8012340:	b950      	cbnz	r0, 8012358 <rcl_init_options_fini+0x4c>
 8012342:	6820      	ldr	r0, [r4, #0]
 8012344:	9b02      	ldr	r3, [sp, #8]
 8012346:	9905      	ldr	r1, [sp, #20]
 8012348:	4798      	blx	r3
 801234a:	4628      	mov	r0, r5
 801234c:	b007      	add	sp, #28
 801234e:	bd30      	pop	{r4, r5, pc}
 8012350:	250b      	movs	r5, #11
 8012352:	4628      	mov	r0, r5
 8012354:	b007      	add	sp, #28
 8012356:	bd30      	pop	{r4, r5, pc}
 8012358:	f7ff fde8 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 801235c:	4605      	mov	r5, r0
 801235e:	e7f8      	b.n	8012352 <rcl_init_options_fini+0x46>

08012360 <rcl_init_options_copy>:
 8012360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012364:	b094      	sub	sp, #80	@ 0x50
 8012366:	2800      	cmp	r0, #0
 8012368:	d058      	beq.n	801241c <rcl_init_options_copy+0xbc>
 801236a:	4604      	mov	r4, r0
 801236c:	6800      	ldr	r0, [r0, #0]
 801236e:	2800      	cmp	r0, #0
 8012370:	d054      	beq.n	801241c <rcl_init_options_copy+0xbc>
 8012372:	460e      	mov	r6, r1
 8012374:	f7f9 f8a8 	bl	800b4c8 <rcutils_allocator_is_valid>
 8012378:	2800      	cmp	r0, #0
 801237a:	d04f      	beq.n	801241c <rcl_init_options_copy+0xbc>
 801237c:	2e00      	cmp	r6, #0
 801237e:	d04d      	beq.n	801241c <rcl_init_options_copy+0xbc>
 8012380:	6833      	ldr	r3, [r6, #0]
 8012382:	b123      	cbz	r3, 801238e <rcl_init_options_copy+0x2e>
 8012384:	2464      	movs	r4, #100	@ 0x64
 8012386:	4620      	mov	r0, r4
 8012388:	b014      	add	sp, #80	@ 0x50
 801238a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238e:	6827      	ldr	r7, [r4, #0]
 8012390:	46bc      	mov	ip, r7
 8012392:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012396:	ad0f      	add	r5, sp, #60	@ 0x3c
 8012398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801239a:	f8dc 3000 	ldr.w	r3, [ip]
 801239e:	f8d7 8000 	ldr.w	r8, [r7]
 80123a2:	602b      	str	r3, [r5, #0]
 80123a4:	4619      	mov	r1, r3
 80123a6:	2050      	movs	r0, #80	@ 0x50
 80123a8:	47c0      	blx	r8
 80123aa:	4605      	mov	r5, r0
 80123ac:	6030      	str	r0, [r6, #0]
 80123ae:	b3d0      	cbz	r0, 8012426 <rcl_init_options_copy+0xc6>
 80123b0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 80123b4:	4686      	mov	lr, r0
 80123b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80123be:	f8dc 3000 	ldr.w	r3, [ip]
 80123c2:	f8ce 3000 	str.w	r3, [lr]
 80123c6:	4668      	mov	r0, sp
 80123c8:	f002 fe0e 	bl	8014fe8 <rmw_get_zero_initialized_init_options>
 80123cc:	46ee      	mov	lr, sp
 80123ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123d2:	f105 0c18 	add.w	ip, r5, #24
 80123d6:	6824      	ldr	r4, [r4, #0]
 80123d8:	6835      	ldr	r5, [r6, #0]
 80123da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123ee:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80123f2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80123f6:	f104 0018 	add.w	r0, r4, #24
 80123fa:	f105 0118 	add.w	r1, r5, #24
 80123fe:	f003 f8c9 	bl	8015594 <rmw_init_options_copy>
 8012402:	4604      	mov	r4, r0
 8012404:	2800      	cmp	r0, #0
 8012406:	d0be      	beq.n	8012386 <rcl_init_options_copy+0x26>
 8012408:	f7f9 f86c 	bl	800b4e4 <rcutils_get_error_string>
 801240c:	f7f9 f880 	bl	800b510 <rcutils_reset_error>
 8012410:	4630      	mov	r0, r6
 8012412:	f7ff ff7b 	bl	801230c <rcl_init_options_fini>
 8012416:	b140      	cbz	r0, 801242a <rcl_init_options_copy+0xca>
 8012418:	4604      	mov	r4, r0
 801241a:	e7b4      	b.n	8012386 <rcl_init_options_copy+0x26>
 801241c:	240b      	movs	r4, #11
 801241e:	4620      	mov	r0, r4
 8012420:	b014      	add	sp, #80	@ 0x50
 8012422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012426:	240a      	movs	r4, #10
 8012428:	e7ad      	b.n	8012386 <rcl_init_options_copy+0x26>
 801242a:	4620      	mov	r0, r4
 801242c:	b014      	add	sp, #80	@ 0x50
 801242e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012432:	f7ff bd7b 	b.w	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8012436:	bf00      	nop

08012438 <rcl_get_localhost_only>:
 8012438:	b510      	push	{r4, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	2300      	movs	r3, #0
 801243e:	9301      	str	r3, [sp, #4]
 8012440:	b1b8      	cbz	r0, 8012472 <rcl_get_localhost_only+0x3a>
 8012442:	4604      	mov	r4, r0
 8012444:	a901      	add	r1, sp, #4
 8012446:	480c      	ldr	r0, [pc, #48]	@ (8012478 <rcl_get_localhost_only+0x40>)
 8012448:	f002 fb12 	bl	8014a70 <rcutils_get_env>
 801244c:	b110      	cbz	r0, 8012454 <rcl_get_localhost_only+0x1c>
 801244e:	2001      	movs	r0, #1
 8012450:	b002      	add	sp, #8
 8012452:	bd10      	pop	{r4, pc}
 8012454:	9b01      	ldr	r3, [sp, #4]
 8012456:	b113      	cbz	r3, 801245e <rcl_get_localhost_only+0x26>
 8012458:	781a      	ldrb	r2, [r3, #0]
 801245a:	2a31      	cmp	r2, #49	@ 0x31
 801245c:	d004      	beq.n	8012468 <rcl_get_localhost_only+0x30>
 801245e:	2302      	movs	r3, #2
 8012460:	2000      	movs	r0, #0
 8012462:	7023      	strb	r3, [r4, #0]
 8012464:	b002      	add	sp, #8
 8012466:	bd10      	pop	{r4, pc}
 8012468:	785b      	ldrb	r3, [r3, #1]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1f7      	bne.n	801245e <rcl_get_localhost_only+0x26>
 801246e:	2301      	movs	r3, #1
 8012470:	e7f6      	b.n	8012460 <rcl_get_localhost_only+0x28>
 8012472:	200b      	movs	r0, #11
 8012474:	b002      	add	sp, #8
 8012476:	bd10      	pop	{r4, pc}
 8012478:	0801b210 	.word	0x0801b210

0801247c <rcl_get_zero_initialized_node>:
 801247c:	4a03      	ldr	r2, [pc, #12]	@ (801248c <rcl_get_zero_initialized_node+0x10>)
 801247e:	4603      	mov	r3, r0
 8012480:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012484:	e883 0003 	stmia.w	r3, {r0, r1}
 8012488:	4618      	mov	r0, r3
 801248a:	4770      	bx	lr
 801248c:	0801b234 	.word	0x0801b234

08012490 <rcl_node_init>:
 8012490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012494:	b0a9      	sub	sp, #164	@ 0xa4
 8012496:	4604      	mov	r4, r0
 8012498:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 801249c:	a823      	add	r0, sp, #140	@ 0x8c
 801249e:	460e      	mov	r6, r1
 80124a0:	4615      	mov	r5, r2
 80124a2:	461f      	mov	r7, r3
 80124a4:	f006 f87c 	bl	80185a0 <rcl_guard_condition_get_default_options>
 80124a8:	f1b8 0f00 	cmp.w	r8, #0
 80124ac:	f000 80e6 	beq.w	801267c <rcl_node_init+0x1ec>
 80124b0:	4640      	mov	r0, r8
 80124b2:	f7f9 f809 	bl	800b4c8 <rcutils_allocator_is_valid>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	f000 80e0 	beq.w	801267c <rcl_node_init+0x1ec>
 80124bc:	2e00      	cmp	r6, #0
 80124be:	f000 80dd 	beq.w	801267c <rcl_node_init+0x1ec>
 80124c2:	2d00      	cmp	r5, #0
 80124c4:	f000 80da 	beq.w	801267c <rcl_node_init+0x1ec>
 80124c8:	2c00      	cmp	r4, #0
 80124ca:	f000 80d7 	beq.w	801267c <rcl_node_init+0x1ec>
 80124ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80124d2:	f1b9 0f00 	cmp.w	r9, #0
 80124d6:	f040 80fd 	bne.w	80126d4 <rcl_node_init+0x244>
 80124da:	2f00      	cmp	r7, #0
 80124dc:	f000 80ce 	beq.w	801267c <rcl_node_init+0x1ec>
 80124e0:	4638      	mov	r0, r7
 80124e2:	f7ff fd41 	bl	8011f68 <rcl_context_is_valid>
 80124e6:	4682      	mov	sl, r0
 80124e8:	2800      	cmp	r0, #0
 80124ea:	f000 80cd 	beq.w	8012688 <rcl_node_init+0x1f8>
 80124ee:	464a      	mov	r2, r9
 80124f0:	a922      	add	r1, sp, #136	@ 0x88
 80124f2:	4630      	mov	r0, r6
 80124f4:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80124f8:	f002 ff18 	bl	801532c <rmw_validate_node_name>
 80124fc:	4681      	mov	r9, r0
 80124fe:	2800      	cmp	r0, #0
 8012500:	f040 80be 	bne.w	8012680 <rcl_node_init+0x1f0>
 8012504:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012506:	2800      	cmp	r0, #0
 8012508:	f040 80f0 	bne.w	80126ec <rcl_node_init+0x25c>
 801250c:	4628      	mov	r0, r5
 801250e:	f7ed fe77 	bl	8000200 <strlen>
 8012512:	2800      	cmp	r0, #0
 8012514:	f040 80bb 	bne.w	801268e <rcl_node_init+0x1fe>
 8012518:	4d7c      	ldr	r5, [pc, #496]	@ (801270c <rcl_node_init+0x27c>)
 801251a:	a922      	add	r1, sp, #136	@ 0x88
 801251c:	2200      	movs	r2, #0
 801251e:	4628      	mov	r0, r5
 8012520:	f002 fee6 	bl	80152f0 <rmw_validate_namespace>
 8012524:	4681      	mov	r9, r0
 8012526:	2800      	cmp	r0, #0
 8012528:	f040 80aa 	bne.w	8012680 <rcl_node_init+0x1f0>
 801252c:	4682      	mov	sl, r0
 801252e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012530:	2800      	cmp	r0, #0
 8012532:	f040 80e0 	bne.w	80126f6 <rcl_node_init+0x266>
 8012536:	f8d8 3000 	ldr.w	r3, [r8]
 801253a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801253e:	2078      	movs	r0, #120	@ 0x78
 8012540:	4798      	blx	r3
 8012542:	4681      	mov	r9, r0
 8012544:	6060      	str	r0, [r4, #4]
 8012546:	2800      	cmp	r0, #0
 8012548:	f000 80ca 	beq.w	80126e0 <rcl_node_init+0x250>
 801254c:	2200      	movs	r2, #0
 801254e:	2300      	movs	r3, #0
 8012550:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8012554:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8012558:	a808      	add	r0, sp, #32
 801255a:	f000 f907 	bl	801276c <rcl_node_get_default_options>
 801255e:	a908      	add	r1, sp, #32
 8012560:	4648      	mov	r0, r9
 8012562:	2268      	movs	r2, #104	@ 0x68
 8012564:	f007 f8ab 	bl	80196be <memcpy>
 8012568:	6861      	ldr	r1, [r4, #4]
 801256a:	6027      	str	r7, [r4, #0]
 801256c:	4640      	mov	r0, r8
 801256e:	f000 f90b 	bl	8012788 <rcl_node_options_copy>
 8012572:	2800      	cmp	r0, #0
 8012574:	d158      	bne.n	8012628 <rcl_node_init+0x198>
 8012576:	4628      	mov	r0, r5
 8012578:	f7ed fe42 	bl	8000200 <strlen>
 801257c:	4428      	add	r0, r5
 801257e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012582:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012586:	2b2f      	cmp	r3, #47	@ 0x2f
 8012588:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	bf0c      	ite	eq
 8012590:	4b5f      	ldreq	r3, [pc, #380]	@ (8012710 <rcl_node_init+0x280>)
 8012592:	4b60      	ldrne	r3, [pc, #384]	@ (8012714 <rcl_node_init+0x284>)
 8012594:	9302      	str	r3, [sp, #8]
 8012596:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801259a:	9301      	str	r3, [sp, #4]
 801259c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80125a0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80125a4:	f002 fa8c 	bl	8014ac0 <rcutils_format_string_limit>
 80125a8:	6823      	ldr	r3, [r4, #0]
 80125aa:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80125ae:	6818      	ldr	r0, [r3, #0]
 80125b0:	4631      	mov	r1, r6
 80125b2:	3028      	adds	r0, #40	@ 0x28
 80125b4:	462a      	mov	r2, r5
 80125b6:	6866      	ldr	r6, [r4, #4]
 80125b8:	f003 fad0 	bl	8015b5c <rmw_create_node>
 80125bc:	6863      	ldr	r3, [r4, #4]
 80125be:	66b0      	str	r0, [r6, #104]	@ 0x68
 80125c0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80125c2:	2800      	cmp	r0, #0
 80125c4:	d032      	beq.n	801262c <rcl_node_init+0x19c>
 80125c6:	f003 fb5d 	bl	8015c84 <rmw_node_get_graph_guard_condition>
 80125ca:	4681      	mov	r9, r0
 80125cc:	b360      	cbz	r0, 8012628 <rcl_node_init+0x198>
 80125ce:	f8d8 3000 	ldr.w	r3, [r8]
 80125d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80125d6:	6866      	ldr	r6, [r4, #4]
 80125d8:	2008      	movs	r0, #8
 80125da:	4798      	blx	r3
 80125dc:	6863      	ldr	r3, [r4, #4]
 80125de:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80125e0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80125e4:	f1bb 0f00 	cmp.w	fp, #0
 80125e8:	d020      	beq.n	801262c <rcl_node_init+0x19c>
 80125ea:	a806      	add	r0, sp, #24
 80125ec:	f005 ff48 	bl	8018480 <rcl_get_zero_initialized_guard_condition>
 80125f0:	a806      	add	r0, sp, #24
 80125f2:	c803      	ldmia	r0, {r0, r1}
 80125f4:	6863      	ldr	r3, [r4, #4]
 80125f6:	46c4      	mov	ip, r8
 80125f8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80125fc:	e88b 0003 	stmia.w	fp, {r0, r1}
 8012600:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012604:	ae23      	add	r6, sp, #140	@ 0x8c
 8012606:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012608:	f8dc 3000 	ldr.w	r3, [ip]
 801260c:	6033      	str	r3, [r6, #0]
 801260e:	ab28      	add	r3, sp, #160	@ 0xa0
 8012610:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012614:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012618:	4649      	mov	r1, r9
 801261a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801261c:	463a      	mov	r2, r7
 801261e:	4670      	mov	r0, lr
 8012620:	f005 ff38 	bl	8018494 <rcl_guard_condition_init_from_rmw>
 8012624:	4681      	mov	r9, r0
 8012626:	b328      	cbz	r0, 8012674 <rcl_node_init+0x1e4>
 8012628:	6863      	ldr	r3, [r4, #4]
 801262a:	b1f3      	cbz	r3, 801266a <rcl_node_init+0x1da>
 801262c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801262e:	b128      	cbz	r0, 801263c <rcl_node_init+0x1ac>
 8012630:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012634:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012638:	4798      	blx	r3
 801263a:	6863      	ldr	r3, [r4, #4]
 801263c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801263e:	b110      	cbz	r0, 8012646 <rcl_node_init+0x1b6>
 8012640:	f003 faa4 	bl	8015b8c <rmw_destroy_node>
 8012644:	6863      	ldr	r3, [r4, #4]
 8012646:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012648:	b148      	cbz	r0, 801265e <rcl_node_init+0x1ce>
 801264a:	f005 ff83 	bl	8018554 <rcl_guard_condition_fini>
 801264e:	6863      	ldr	r3, [r4, #4]
 8012650:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012654:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012656:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801265a:	4798      	blx	r3
 801265c:	6863      	ldr	r3, [r4, #4]
 801265e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012662:	4618      	mov	r0, r3
 8012664:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012668:	4798      	blx	r3
 801266a:	2300      	movs	r3, #0
 801266c:	e9c4 3300 	strd	r3, r3, [r4]
 8012670:	f04f 0901 	mov.w	r9, #1
 8012674:	f1ba 0f00 	cmp.w	sl, #0
 8012678:	d125      	bne.n	80126c6 <rcl_node_init+0x236>
 801267a:	e001      	b.n	8012680 <rcl_node_init+0x1f0>
 801267c:	f04f 090b 	mov.w	r9, #11
 8012680:	4648      	mov	r0, r9
 8012682:	b029      	add	sp, #164	@ 0xa4
 8012684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012688:	f04f 0965 	mov.w	r9, #101	@ 0x65
 801268c:	e7f8      	b.n	8012680 <rcl_node_init+0x1f0>
 801268e:	782b      	ldrb	r3, [r5, #0]
 8012690:	2b2f      	cmp	r3, #47	@ 0x2f
 8012692:	f43f af42 	beq.w	801251a <rcl_node_init+0x8a>
 8012696:	9503      	str	r5, [sp, #12]
 8012698:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	4b1e      	ldr	r3, [pc, #120]	@ (8012718 <rcl_node_init+0x288>)
 80126a0:	9302      	str	r3, [sp, #8]
 80126a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80126a6:	9301      	str	r3, [sp, #4]
 80126a8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80126ac:	f002 fa08 	bl	8014ac0 <rcutils_format_string_limit>
 80126b0:	4605      	mov	r5, r0
 80126b2:	b340      	cbz	r0, 8012706 <rcl_node_init+0x276>
 80126b4:	2200      	movs	r2, #0
 80126b6:	a922      	add	r1, sp, #136	@ 0x88
 80126b8:	9222      	str	r2, [sp, #136]	@ 0x88
 80126ba:	f002 fe19 	bl	80152f0 <rmw_validate_namespace>
 80126be:	4681      	mov	r9, r0
 80126c0:	2800      	cmp	r0, #0
 80126c2:	f43f af34 	beq.w	801252e <rcl_node_init+0x9e>
 80126c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80126ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80126ce:	4628      	mov	r0, r5
 80126d0:	4798      	blx	r3
 80126d2:	e7d5      	b.n	8012680 <rcl_node_init+0x1f0>
 80126d4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80126d8:	4648      	mov	r0, r9
 80126da:	b029      	add	sp, #164	@ 0xa4
 80126dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e0:	f04f 090a 	mov.w	r9, #10
 80126e4:	f1ba 0f00 	cmp.w	sl, #0
 80126e8:	d1ed      	bne.n	80126c6 <rcl_node_init+0x236>
 80126ea:	e7c9      	b.n	8012680 <rcl_node_init+0x1f0>
 80126ec:	f002 fe70 	bl	80153d0 <rmw_node_name_validation_result_string>
 80126f0:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80126f4:	e7c4      	b.n	8012680 <rcl_node_init+0x1f0>
 80126f6:	f002 fe0d 	bl	8015314 <rmw_namespace_validation_result_string>
 80126fa:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80126fe:	f1ba 0f00 	cmp.w	sl, #0
 8012702:	d1e0      	bne.n	80126c6 <rcl_node_init+0x236>
 8012704:	e7bc      	b.n	8012680 <rcl_node_init+0x1f0>
 8012706:	f04f 090a 	mov.w	r9, #10
 801270a:	e7b9      	b.n	8012680 <rcl_node_init+0x1f0>
 801270c:	0801b224 	.word	0x0801b224
 8012710:	0801ade4 	.word	0x0801ade4
 8012714:	0801b22c 	.word	0x0801b22c
 8012718:	0801b228 	.word	0x0801b228

0801271c <rcl_node_is_valid>:
 801271c:	b130      	cbz	r0, 801272c <rcl_node_is_valid+0x10>
 801271e:	6843      	ldr	r3, [r0, #4]
 8012720:	b123      	cbz	r3, 801272c <rcl_node_is_valid+0x10>
 8012722:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012724:	b113      	cbz	r3, 801272c <rcl_node_is_valid+0x10>
 8012726:	6800      	ldr	r0, [r0, #0]
 8012728:	f7ff bc1e 	b.w	8011f68 <rcl_context_is_valid>
 801272c:	2000      	movs	r0, #0
 801272e:	4770      	bx	lr

08012730 <rcl_node_get_name>:
 8012730:	b120      	cbz	r0, 801273c <rcl_node_get_name+0xc>
 8012732:	6840      	ldr	r0, [r0, #4]
 8012734:	b110      	cbz	r0, 801273c <rcl_node_get_name+0xc>
 8012736:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012738:	b100      	cbz	r0, 801273c <rcl_node_get_name+0xc>
 801273a:	6880      	ldr	r0, [r0, #8]
 801273c:	4770      	bx	lr
 801273e:	bf00      	nop

08012740 <rcl_node_get_namespace>:
 8012740:	b120      	cbz	r0, 801274c <rcl_node_get_namespace+0xc>
 8012742:	6840      	ldr	r0, [r0, #4]
 8012744:	b110      	cbz	r0, 801274c <rcl_node_get_namespace+0xc>
 8012746:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012748:	b100      	cbz	r0, 801274c <rcl_node_get_namespace+0xc>
 801274a:	68c0      	ldr	r0, [r0, #12]
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop

08012750 <rcl_node_get_options>:
 8012750:	b128      	cbz	r0, 801275e <rcl_node_get_options+0xe>
 8012752:	6840      	ldr	r0, [r0, #4]
 8012754:	b118      	cbz	r0, 801275e <rcl_node_get_options+0xe>
 8012756:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012758:	2b00      	cmp	r3, #0
 801275a:	bf08      	it	eq
 801275c:	2000      	moveq	r0, #0
 801275e:	4770      	bx	lr

08012760 <rcl_node_get_rmw_handle>:
 8012760:	b110      	cbz	r0, 8012768 <rcl_node_get_rmw_handle+0x8>
 8012762:	6840      	ldr	r0, [r0, #4]
 8012764:	b100      	cbz	r0, 8012768 <rcl_node_get_rmw_handle+0x8>
 8012766:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop

0801276c <rcl_node_get_default_options>:
 801276c:	b510      	push	{r4, lr}
 801276e:	2268      	movs	r2, #104	@ 0x68
 8012770:	4604      	mov	r4, r0
 8012772:	2100      	movs	r1, #0
 8012774:	f006 ff3b 	bl	80195ee <memset>
 8012778:	4620      	mov	r0, r4
 801277a:	f7f8 fe97 	bl	800b4ac <rcutils_get_default_allocator>
 801277e:	2301      	movs	r3, #1
 8012780:	7523      	strb	r3, [r4, #20]
 8012782:	4620      	mov	r0, r4
 8012784:	bd10      	pop	{r4, pc}
 8012786:	bf00      	nop

08012788 <rcl_node_options_copy>:
 8012788:	b1d0      	cbz	r0, 80127c0 <rcl_node_options_copy+0x38>
 801278a:	b570      	push	{r4, r5, r6, lr}
 801278c:	460c      	mov	r4, r1
 801278e:	b1a9      	cbz	r1, 80127bc <rcl_node_options_copy+0x34>
 8012790:	4288      	cmp	r0, r1
 8012792:	4684      	mov	ip, r0
 8012794:	d012      	beq.n	80127bc <rcl_node_options_copy+0x34>
 8012796:	4605      	mov	r5, r0
 8012798:	8a86      	ldrh	r6, [r0, #20]
 801279a:	468e      	mov	lr, r1
 801279c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801279e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80127a2:	682b      	ldr	r3, [r5, #0]
 80127a4:	f8ce 3000 	str.w	r3, [lr]
 80127a8:	f10c 0118 	add.w	r1, ip, #24
 80127ac:	2250      	movs	r2, #80	@ 0x50
 80127ae:	82a6      	strh	r6, [r4, #20]
 80127b0:	f104 0018 	add.w	r0, r4, #24
 80127b4:	f006 ff83 	bl	80196be <memcpy>
 80127b8:	2000      	movs	r0, #0
 80127ba:	bd70      	pop	{r4, r5, r6, pc}
 80127bc:	200b      	movs	r0, #11
 80127be:	bd70      	pop	{r4, r5, r6, pc}
 80127c0:	200b      	movs	r0, #11
 80127c2:	4770      	bx	lr

080127c4 <rcl_node_resolve_name>:
 80127c4:	b082      	sub	sp, #8
 80127c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ca:	b091      	sub	sp, #68	@ 0x44
 80127cc:	ac1a      	add	r4, sp, #104	@ 0x68
 80127ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80127d2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d03b      	beq.n	8012852 <rcl_node_resolve_name+0x8e>
 80127da:	460c      	mov	r4, r1
 80127dc:	4605      	mov	r5, r0
 80127de:	f7ff ffb7 	bl	8012750 <rcl_node_get_options>
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d037      	beq.n	8012856 <rcl_node_resolve_name+0x92>
 80127e6:	4628      	mov	r0, r5
 80127e8:	f7ff ffa2 	bl	8012730 <rcl_node_get_name>
 80127ec:	4606      	mov	r6, r0
 80127ee:	4628      	mov	r0, r5
 80127f0:	f7ff ffa6 	bl	8012740 <rcl_node_get_namespace>
 80127f4:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80127f8:	4681      	mov	r9, r0
 80127fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127fe:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012800:	46ac      	mov	ip, r5
 8012802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012806:	f8de 3000 	ldr.w	r3, [lr]
 801280a:	f8cc 3000 	str.w	r3, [ip]
 801280e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012810:	b1fb      	cbz	r3, 8012852 <rcl_node_resolve_name+0x8e>
 8012812:	468a      	mov	sl, r1
 8012814:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012818:	f002 faaa 	bl	8014d70 <rcutils_get_zero_initialized_string_map>
 801281c:	ab10      	add	r3, sp, #64	@ 0x40
 801281e:	9008      	str	r0, [sp, #32]
 8012820:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012824:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012828:	2100      	movs	r1, #0
 801282a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801282e:	a808      	add	r0, sp, #32
 8012830:	f002 fb16 	bl	8014e60 <rcutils_string_map_init>
 8012834:	4607      	mov	r7, r0
 8012836:	b180      	cbz	r0, 801285a <rcl_node_resolve_name+0x96>
 8012838:	f7f8 fe54 	bl	800b4e4 <rcutils_get_error_string>
 801283c:	f7f8 fe68 	bl	800b510 <rcutils_reset_error>
 8012840:	2f0a      	cmp	r7, #10
 8012842:	bf18      	it	ne
 8012844:	2701      	movne	r7, #1
 8012846:	4638      	mov	r0, r7
 8012848:	b011      	add	sp, #68	@ 0x44
 801284a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801284e:	b002      	add	sp, #8
 8012850:	4770      	bx	lr
 8012852:	270b      	movs	r7, #11
 8012854:	e7f7      	b.n	8012846 <rcl_node_resolve_name+0x82>
 8012856:	2701      	movs	r7, #1
 8012858:	e7f5      	b.n	8012846 <rcl_node_resolve_name+0x82>
 801285a:	9009      	str	r0, [sp, #36]	@ 0x24
 801285c:	9007      	str	r0, [sp, #28]
 801285e:	a808      	add	r0, sp, #32
 8012860:	f005 fe08 	bl	8018474 <rcl_get_default_topic_name_substitutions>
 8012864:	4607      	mov	r7, r0
 8012866:	b1a8      	cbz	r0, 8012894 <rcl_node_resolve_name+0xd0>
 8012868:	280a      	cmp	r0, #10
 801286a:	9c07      	ldr	r4, [sp, #28]
 801286c:	d000      	beq.n	8012870 <rcl_node_resolve_name+0xac>
 801286e:	2701      	movs	r7, #1
 8012870:	a808      	add	r0, sp, #32
 8012872:	f002 fb35 	bl	8014ee0 <rcutils_string_map_fini>
 8012876:	2800      	cmp	r0, #0
 8012878:	d13d      	bne.n	80128f6 <rcl_node_resolve_name+0x132>
 801287a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801287c:	4659      	mov	r1, fp
 801287e:	47d0      	blx	sl
 8012880:	4659      	mov	r1, fp
 8012882:	4620      	mov	r0, r4
 8012884:	47d0      	blx	sl
 8012886:	f1b8 0f00 	cmp.w	r8, #0
 801288a:	d0dc      	beq.n	8012846 <rcl_node_resolve_name+0x82>
 801288c:	2f67      	cmp	r7, #103	@ 0x67
 801288e:	bf08      	it	eq
 8012890:	2768      	moveq	r7, #104	@ 0x68
 8012892:	e7d8      	b.n	8012846 <rcl_node_resolve_name+0x82>
 8012894:	ab09      	add	r3, sp, #36	@ 0x24
 8012896:	9305      	str	r3, [sp, #20]
 8012898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801289a:	46ec      	mov	ip, sp
 801289c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128a0:	682b      	ldr	r3, [r5, #0]
 80128a2:	f8cc 3000 	str.w	r3, [ip]
 80128a6:	464a      	mov	r2, r9
 80128a8:	4631      	mov	r1, r6
 80128aa:	4620      	mov	r0, r4
 80128ac:	ab08      	add	r3, sp, #32
 80128ae:	f005 fc83 	bl	80181b8 <rcl_expand_topic_name>
 80128b2:	4607      	mov	r7, r0
 80128b4:	b9b8      	cbnz	r0, 80128e6 <rcl_node_resolve_name+0x122>
 80128b6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80128b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80128ba:	4602      	mov	r2, r0
 80128bc:	a90a      	add	r1, sp, #40	@ 0x28
 80128be:	4620      	mov	r0, r4
 80128c0:	f002 fc52 	bl	8015168 <rmw_validate_full_topic_name>
 80128c4:	b988      	cbnz	r0, 80128ea <rcl_node_resolve_name+0x126>
 80128c6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80128c8:	b9d5      	cbnz	r5, 8012900 <rcl_node_resolve_name+0x13c>
 80128ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80128cc:	a808      	add	r0, sp, #32
 80128ce:	601c      	str	r4, [r3, #0]
 80128d0:	f002 fb06 	bl	8014ee0 <rcutils_string_map_fini>
 80128d4:	4607      	mov	r7, r0
 80128d6:	b1a8      	cbz	r0, 8012904 <rcl_node_resolve_name+0x140>
 80128d8:	f7f8 fe04 	bl	800b4e4 <rcutils_get_error_string>
 80128dc:	462c      	mov	r4, r5
 80128de:	f7f8 fe17 	bl	800b510 <rcutils_reset_error>
 80128e2:	2701      	movs	r7, #1
 80128e4:	e7c9      	b.n	801287a <rcl_node_resolve_name+0xb6>
 80128e6:	9c07      	ldr	r4, [sp, #28]
 80128e8:	e7c2      	b.n	8012870 <rcl_node_resolve_name+0xac>
 80128ea:	f7f8 fdfb 	bl	800b4e4 <rcutils_get_error_string>
 80128ee:	2701      	movs	r7, #1
 80128f0:	f7f8 fe0e 	bl	800b510 <rcutils_reset_error>
 80128f4:	e7bc      	b.n	8012870 <rcl_node_resolve_name+0xac>
 80128f6:	f7f8 fdf5 	bl	800b4e4 <rcutils_get_error_string>
 80128fa:	f7f8 fe09 	bl	800b510 <rcutils_reset_error>
 80128fe:	e7bc      	b.n	801287a <rcl_node_resolve_name+0xb6>
 8012900:	2767      	movs	r7, #103	@ 0x67
 8012902:	e7b5      	b.n	8012870 <rcl_node_resolve_name+0xac>
 8012904:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012906:	4659      	mov	r1, fp
 8012908:	47d0      	blx	sl
 801290a:	4659      	mov	r1, fp
 801290c:	4638      	mov	r0, r7
 801290e:	47d0      	blx	sl
 8012910:	e799      	b.n	8012846 <rcl_node_resolve_name+0x82>
 8012912:	bf00      	nop

08012914 <exact_match_lookup>:
 8012914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012916:	f102 0708 	add.w	r7, r2, #8
 801291a:	460b      	mov	r3, r1
 801291c:	4614      	mov	r4, r2
 801291e:	4606      	mov	r6, r0
 8012920:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012924:	b085      	sub	sp, #20
 8012926:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801292a:	4618      	mov	r0, r3
 801292c:	4919      	ldr	r1, [pc, #100]	@ (8012994 <exact_match_lookup+0x80>)
 801292e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012932:	f002 f8b7 	bl	8014aa4 <rcutils_join_path>
 8012936:	7833      	ldrb	r3, [r6, #0]
 8012938:	2b2f      	cmp	r3, #47	@ 0x2f
 801293a:	4605      	mov	r5, r0
 801293c:	d023      	beq.n	8012986 <exact_match_lookup+0x72>
 801293e:	f104 030c 	add.w	r3, r4, #12
 8012942:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012946:	e88d 0003 	stmia.w	sp, {r0, r1}
 801294a:	1c70      	adds	r0, r6, #1
 801294c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012950:	f002 f8ae 	bl	8014ab0 <rcutils_to_native_path>
 8012954:	4606      	mov	r6, r0
 8012956:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801295a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801295e:	4631      	mov	r1, r6
 8012960:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012964:	4628      	mov	r0, r5
 8012966:	f002 f89d 	bl	8014aa4 <rcutils_join_path>
 801296a:	6862      	ldr	r2, [r4, #4]
 801296c:	6921      	ldr	r1, [r4, #16]
 801296e:	4603      	mov	r3, r0
 8012970:	4630      	mov	r0, r6
 8012972:	461e      	mov	r6, r3
 8012974:	4790      	blx	r2
 8012976:	4628      	mov	r0, r5
 8012978:	6863      	ldr	r3, [r4, #4]
 801297a:	6921      	ldr	r1, [r4, #16]
 801297c:	4798      	blx	r3
 801297e:	4635      	mov	r5, r6
 8012980:	4628      	mov	r0, r5
 8012982:	b005      	add	sp, #20
 8012984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012986:	7873      	ldrb	r3, [r6, #1]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d1d8      	bne.n	801293e <exact_match_lookup+0x2a>
 801298c:	4628      	mov	r0, r5
 801298e:	b005      	add	sp, #20
 8012990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012992:	bf00      	nop
 8012994:	0801b278 	.word	0x0801b278

08012998 <rcl_get_secure_root>:
 8012998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801299c:	b085      	sub	sp, #20
 801299e:	b168      	cbz	r0, 80129bc <rcl_get_secure_root+0x24>
 80129a0:	4607      	mov	r7, r0
 80129a2:	4608      	mov	r0, r1
 80129a4:	460c      	mov	r4, r1
 80129a6:	f7f8 fd8f 	bl	800b4c8 <rcutils_allocator_is_valid>
 80129aa:	b138      	cbz	r0, 80129bc <rcl_get_secure_root+0x24>
 80129ac:	2300      	movs	r3, #0
 80129ae:	482d      	ldr	r0, [pc, #180]	@ (8012a64 <rcl_get_secure_root+0xcc>)
 80129b0:	9303      	str	r3, [sp, #12]
 80129b2:	a903      	add	r1, sp, #12
 80129b4:	f002 f85c 	bl	8014a70 <rcutils_get_env>
 80129b8:	4605      	mov	r5, r0
 80129ba:	b120      	cbz	r0, 80129c6 <rcl_get_secure_root+0x2e>
 80129bc:	2500      	movs	r5, #0
 80129be:	4628      	mov	r0, r5
 80129c0:	b005      	add	sp, #20
 80129c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129c6:	9b03      	ldr	r3, [sp, #12]
 80129c8:	781a      	ldrb	r2, [r3, #0]
 80129ca:	2a00      	cmp	r2, #0
 80129cc:	d0f6      	beq.n	80129bc <rcl_get_secure_root+0x24>
 80129ce:	f104 090c 	add.w	r9, r4, #12
 80129d2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80129d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80129da:	4618      	mov	r0, r3
 80129dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80129e0:	f002 f988 	bl	8014cf4 <rcutils_strdup>
 80129e4:	4680      	mov	r8, r0
 80129e6:	2800      	cmp	r0, #0
 80129e8:	d0e8      	beq.n	80129bc <rcl_get_secure_root+0x24>
 80129ea:	481f      	ldr	r0, [pc, #124]	@ (8012a68 <rcl_get_secure_root+0xd0>)
 80129ec:	9503      	str	r5, [sp, #12]
 80129ee:	a903      	add	r1, sp, #12
 80129f0:	f002 f83e 	bl	8014a70 <rcutils_get_env>
 80129f4:	b160      	cbz	r0, 8012a10 <rcl_get_secure_root+0x78>
 80129f6:	2600      	movs	r6, #0
 80129f8:	6863      	ldr	r3, [r4, #4]
 80129fa:	6921      	ldr	r1, [r4, #16]
 80129fc:	4630      	mov	r0, r6
 80129fe:	4798      	blx	r3
 8012a00:	4640      	mov	r0, r8
 8012a02:	6863      	ldr	r3, [r4, #4]
 8012a04:	6921      	ldr	r1, [r4, #16]
 8012a06:	4798      	blx	r3
 8012a08:	4628      	mov	r0, r5
 8012a0a:	b005      	add	sp, #20
 8012a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a10:	9b03      	ldr	r3, [sp, #12]
 8012a12:	781e      	ldrb	r6, [r3, #0]
 8012a14:	b1f6      	cbz	r6, 8012a54 <rcl_get_secure_root+0xbc>
 8012a16:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012a1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012a24:	f002 f966 	bl	8014cf4 <rcutils_strdup>
 8012a28:	4606      	mov	r6, r0
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	d0e3      	beq.n	80129f6 <rcl_get_secure_root+0x5e>
 8012a2e:	4622      	mov	r2, r4
 8012a30:	4641      	mov	r1, r8
 8012a32:	f7ff ff6f 	bl	8012914 <exact_match_lookup>
 8012a36:	4605      	mov	r5, r0
 8012a38:	2d00      	cmp	r5, #0
 8012a3a:	d0dd      	beq.n	80129f8 <rcl_get_secure_root+0x60>
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	f002 f82f 	bl	8014aa0 <rcutils_is_directory>
 8012a42:	4603      	mov	r3, r0
 8012a44:	2800      	cmp	r0, #0
 8012a46:	d1d7      	bne.n	80129f8 <rcl_get_secure_root+0x60>
 8012a48:	4628      	mov	r0, r5
 8012a4a:	6921      	ldr	r1, [r4, #16]
 8012a4c:	461d      	mov	r5, r3
 8012a4e:	6863      	ldr	r3, [r4, #4]
 8012a50:	4798      	blx	r3
 8012a52:	e7d1      	b.n	80129f8 <rcl_get_secure_root+0x60>
 8012a54:	4622      	mov	r2, r4
 8012a56:	4638      	mov	r0, r7
 8012a58:	4641      	mov	r1, r8
 8012a5a:	f7ff ff5b 	bl	8012914 <exact_match_lookup>
 8012a5e:	4605      	mov	r5, r0
 8012a60:	e7ea      	b.n	8012a38 <rcl_get_secure_root+0xa0>
 8012a62:	bf00      	nop
 8012a64:	0801b284 	.word	0x0801b284
 8012a68:	0801b29c 	.word	0x0801b29c

08012a6c <rcl_get_security_options_from_environment>:
 8012a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a70:	b082      	sub	sp, #8
 8012a72:	2300      	movs	r3, #0
 8012a74:	4606      	mov	r6, r0
 8012a76:	460f      	mov	r7, r1
 8012a78:	4820      	ldr	r0, [pc, #128]	@ (8012afc <rcl_get_security_options_from_environment+0x90>)
 8012a7a:	9301      	str	r3, [sp, #4]
 8012a7c:	a901      	add	r1, sp, #4
 8012a7e:	4690      	mov	r8, r2
 8012a80:	f001 fff6 	bl	8014a70 <rcutils_get_env>
 8012a84:	b120      	cbz	r0, 8012a90 <rcl_get_security_options_from_environment+0x24>
 8012a86:	2501      	movs	r5, #1
 8012a88:	4628      	mov	r0, r5
 8012a8a:	b002      	add	sp, #8
 8012a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a90:	491b      	ldr	r1, [pc, #108]	@ (8012b00 <rcl_get_security_options_from_environment+0x94>)
 8012a92:	4604      	mov	r4, r0
 8012a94:	9801      	ldr	r0, [sp, #4]
 8012a96:	f7ed fbbb 	bl	8000210 <strcmp>
 8012a9a:	4605      	mov	r5, r0
 8012a9c:	b9e8      	cbnz	r0, 8012ada <rcl_get_security_options_from_environment+0x6e>
 8012a9e:	9001      	str	r0, [sp, #4]
 8012aa0:	f1b8 0f00 	cmp.w	r8, #0
 8012aa4:	d020      	beq.n	8012ae8 <rcl_get_security_options_from_environment+0x7c>
 8012aa6:	4817      	ldr	r0, [pc, #92]	@ (8012b04 <rcl_get_security_options_from_environment+0x98>)
 8012aa8:	a901      	add	r1, sp, #4
 8012aaa:	f001 ffe1 	bl	8014a70 <rcutils_get_env>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d1e9      	bne.n	8012a86 <rcl_get_security_options_from_environment+0x1a>
 8012ab2:	4915      	ldr	r1, [pc, #84]	@ (8012b08 <rcl_get_security_options_from_environment+0x9c>)
 8012ab4:	9801      	ldr	r0, [sp, #4]
 8012ab6:	f7ed fbab 	bl	8000210 <strcmp>
 8012aba:	fab0 f080 	clz	r0, r0
 8012abe:	0940      	lsrs	r0, r0, #5
 8012ac0:	f888 0000 	strb.w	r0, [r8]
 8012ac4:	4639      	mov	r1, r7
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	f7ff ff66 	bl	8012998 <rcl_get_secure_root>
 8012acc:	b170      	cbz	r0, 8012aec <rcl_get_security_options_from_environment+0x80>
 8012ace:	f8c8 0004 	str.w	r0, [r8, #4]
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	b002      	add	sp, #8
 8012ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ada:	4625      	mov	r5, r4
 8012adc:	4628      	mov	r0, r5
 8012ade:	f888 4000 	strb.w	r4, [r8]
 8012ae2:	b002      	add	sp, #8
 8012ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ae8:	250b      	movs	r5, #11
 8012aea:	e7cd      	b.n	8012a88 <rcl_get_security_options_from_environment+0x1c>
 8012aec:	f898 5000 	ldrb.w	r5, [r8]
 8012af0:	f1a5 0501 	sub.w	r5, r5, #1
 8012af4:	fab5 f585 	clz	r5, r5
 8012af8:	096d      	lsrs	r5, r5, #5
 8012afa:	e7c5      	b.n	8012a88 <rcl_get_security_options_from_environment+0x1c>
 8012afc:	0801b23c 	.word	0x0801b23c
 8012b00:	0801b250 	.word	0x0801b250
 8012b04:	0801b258 	.word	0x0801b258
 8012b08:	0801b270 	.word	0x0801b270

08012b0c <rcl_service_get_rmw_handle>:
 8012b0c:	b118      	cbz	r0, 8012b16 <rcl_service_get_rmw_handle+0xa>
 8012b0e:	6800      	ldr	r0, [r0, #0]
 8012b10:	b108      	cbz	r0, 8012b16 <rcl_service_get_rmw_handle+0xa>
 8012b12:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012b16:	4770      	bx	lr

08012b18 <rcl_take_request>:
 8012b18:	b570      	push	{r4, r5, r6, lr}
 8012b1a:	468e      	mov	lr, r1
 8012b1c:	460c      	mov	r4, r1
 8012b1e:	4616      	mov	r6, r2
 8012b20:	4605      	mov	r5, r0
 8012b22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b26:	b08c      	sub	sp, #48	@ 0x30
 8012b28:	f10d 0c18 	add.w	ip, sp, #24
 8012b2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b30:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012b34:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b38:	b30d      	cbz	r5, 8012b7e <rcl_take_request+0x66>
 8012b3a:	682b      	ldr	r3, [r5, #0]
 8012b3c:	b1fb      	cbz	r3, 8012b7e <rcl_take_request+0x66>
 8012b3e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012b42:	b1e0      	cbz	r0, 8012b7e <rcl_take_request+0x66>
 8012b44:	b336      	cbz	r6, 8012b94 <rcl_take_request+0x7c>
 8012b46:	2300      	movs	r3, #0
 8012b48:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b4c:	4632      	mov	r2, r6
 8012b4e:	f10d 0307 	add.w	r3, sp, #7
 8012b52:	a902      	add	r1, sp, #8
 8012b54:	f003 f8ea 	bl	8015d2c <rmw_take_request>
 8012b58:	4605      	mov	r5, r0
 8012b5a:	b198      	cbz	r0, 8012b84 <rcl_take_request+0x6c>
 8012b5c:	280a      	cmp	r0, #10
 8012b5e:	bf18      	it	ne
 8012b60:	2501      	movne	r5, #1
 8012b62:	f10d 0e18 	add.w	lr, sp, #24
 8012b66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b6a:	46a4      	mov	ip, r4
 8012b6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b70:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012b74:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b78:	4628      	mov	r0, r5
 8012b7a:	b00c      	add	sp, #48	@ 0x30
 8012b7c:	bd70      	pop	{r4, r5, r6, pc}
 8012b7e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8012b82:	e7ee      	b.n	8012b62 <rcl_take_request+0x4a>
 8012b84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012b88:	f240 2359 	movw	r3, #601	@ 0x259
 8012b8c:	2a00      	cmp	r2, #0
 8012b8e:	bf08      	it	eq
 8012b90:	461d      	moveq	r5, r3
 8012b92:	e7e6      	b.n	8012b62 <rcl_take_request+0x4a>
 8012b94:	250b      	movs	r5, #11
 8012b96:	e7e4      	b.n	8012b62 <rcl_take_request+0x4a>

08012b98 <rcl_send_response>:
 8012b98:	b170      	cbz	r0, 8012bb8 <rcl_send_response+0x20>
 8012b9a:	6800      	ldr	r0, [r0, #0]
 8012b9c:	b160      	cbz	r0, 8012bb8 <rcl_send_response+0x20>
 8012b9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012ba2:	b148      	cbz	r0, 8012bb8 <rcl_send_response+0x20>
 8012ba4:	b159      	cbz	r1, 8012bbe <rcl_send_response+0x26>
 8012ba6:	b510      	push	{r4, lr}
 8012ba8:	b15a      	cbz	r2, 8012bc2 <rcl_send_response+0x2a>
 8012baa:	f003 f91d 	bl	8015de8 <rmw_send_response>
 8012bae:	b110      	cbz	r0, 8012bb6 <rcl_send_response+0x1e>
 8012bb0:	2802      	cmp	r0, #2
 8012bb2:	bf18      	it	ne
 8012bb4:	2001      	movne	r0, #1
 8012bb6:	bd10      	pop	{r4, pc}
 8012bb8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012bbc:	4770      	bx	lr
 8012bbe:	200b      	movs	r0, #11
 8012bc0:	4770      	bx	lr
 8012bc2:	200b      	movs	r0, #11
 8012bc4:	bd10      	pop	{r4, pc}
 8012bc6:	bf00      	nop

08012bc8 <rcl_service_is_valid>:
 8012bc8:	b130      	cbz	r0, 8012bd8 <rcl_service_is_valid+0x10>
 8012bca:	6800      	ldr	r0, [r0, #0]
 8012bcc:	b120      	cbz	r0, 8012bd8 <rcl_service_is_valid+0x10>
 8012bce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012bd2:	3800      	subs	r0, #0
 8012bd4:	bf18      	it	ne
 8012bd6:	2001      	movne	r0, #1
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop

08012bdc <rcl_get_zero_initialized_subscription>:
 8012bdc:	4b01      	ldr	r3, [pc, #4]	@ (8012be4 <rcl_get_zero_initialized_subscription+0x8>)
 8012bde:	6818      	ldr	r0, [r3, #0]
 8012be0:	4770      	bx	lr
 8012be2:	bf00      	nop
 8012be4:	0801b2bc 	.word	0x0801b2bc

08012be8 <rcl_subscription_init>:
 8012be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bec:	b089      	sub	sp, #36	@ 0x24
 8012bee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8012bf0:	b1d6      	cbz	r6, 8012c28 <rcl_subscription_init+0x40>
 8012bf2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	4648      	mov	r0, r9
 8012bfa:	460d      	mov	r5, r1
 8012bfc:	4690      	mov	r8, r2
 8012bfe:	461f      	mov	r7, r3
 8012c00:	f7f8 fc62 	bl	800b4c8 <rcutils_allocator_is_valid>
 8012c04:	b180      	cbz	r0, 8012c28 <rcl_subscription_init+0x40>
 8012c06:	b17c      	cbz	r4, 8012c28 <rcl_subscription_init+0x40>
 8012c08:	4628      	mov	r0, r5
 8012c0a:	f7ff fd87 	bl	801271c <rcl_node_is_valid>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d054      	beq.n	8012cbc <rcl_subscription_init+0xd4>
 8012c12:	f1b8 0f00 	cmp.w	r8, #0
 8012c16:	d007      	beq.n	8012c28 <rcl_subscription_init+0x40>
 8012c18:	b137      	cbz	r7, 8012c28 <rcl_subscription_init+0x40>
 8012c1a:	6823      	ldr	r3, [r4, #0]
 8012c1c:	b14b      	cbz	r3, 8012c32 <rcl_subscription_init+0x4a>
 8012c1e:	2764      	movs	r7, #100	@ 0x64
 8012c20:	4638      	mov	r0, r7
 8012c22:	b009      	add	sp, #36	@ 0x24
 8012c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c28:	270b      	movs	r7, #11
 8012c2a:	4638      	mov	r0, r7
 8012c2c:	b009      	add	sp, #36	@ 0x24
 8012c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c32:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012c36:	aa07      	add	r2, sp, #28
 8012c38:	9205      	str	r2, [sp, #20]
 8012c3a:	9307      	str	r3, [sp, #28]
 8012c3c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8012c40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c44:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c48:	4639      	mov	r1, r7
 8012c4a:	e899 000c 	ldmia.w	r9, {r2, r3}
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f7ff fdb8 	bl	80127c4 <rcl_node_resolve_name>
 8012c54:	4607      	mov	r7, r0
 8012c56:	2800      	cmp	r0, #0
 8012c58:	d15f      	bne.n	8012d1a <rcl_subscription_init+0x132>
 8012c5a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8012c5e:	21c8      	movs	r1, #200	@ 0xc8
 8012c60:	2001      	movs	r0, #1
 8012c62:	4798      	blx	r3
 8012c64:	6020      	str	r0, [r4, #0]
 8012c66:	2800      	cmp	r0, #0
 8012c68:	d05d      	beq.n	8012d26 <rcl_subscription_init+0x13e>
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	f7ff fd78 	bl	8012760 <rcl_node_get_rmw_handle>
 8012c70:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8012c74:	9300      	str	r3, [sp, #0]
 8012c76:	9a07      	ldr	r2, [sp, #28]
 8012c78:	6827      	ldr	r7, [r4, #0]
 8012c7a:	4641      	mov	r1, r8
 8012c7c:	4633      	mov	r3, r6
 8012c7e:	f003 f99d 	bl	8015fbc <rmw_create_subscription>
 8012c82:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8012c86:	6827      	ldr	r7, [r4, #0]
 8012c88:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8012c8c:	b348      	cbz	r0, 8012ce2 <rcl_subscription_init+0xfa>
 8012c8e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8012c92:	f003 fa75 	bl	8016180 <rmw_subscription_get_actual_qos>
 8012c96:	4607      	mov	r7, r0
 8012c98:	b9a8      	cbnz	r0, 8012cc6 <rcl_subscription_init+0xde>
 8012c9a:	6820      	ldr	r0, [r4, #0]
 8012c9c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8012ca0:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8012ca4:	2270      	movs	r2, #112	@ 0x70
 8012ca6:	4631      	mov	r1, r6
 8012ca8:	f006 fd09 	bl	80196be <memcpy>
 8012cac:	9807      	ldr	r0, [sp, #28]
 8012cae:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012cb0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012cb2:	4798      	blx	r3
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	b009      	add	sp, #36	@ 0x24
 8012cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cbc:	27c8      	movs	r7, #200	@ 0xc8
 8012cbe:	4638      	mov	r0, r7
 8012cc0:	b009      	add	sp, #36	@ 0x24
 8012cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cc6:	6827      	ldr	r7, [r4, #0]
 8012cc8:	b32f      	cbz	r7, 8012d16 <rcl_subscription_init+0x12e>
 8012cca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012cce:	b14b      	cbz	r3, 8012ce4 <rcl_subscription_init+0xfc>
 8012cd0:	4628      	mov	r0, r5
 8012cd2:	f7ff fd45 	bl	8012760 <rcl_node_get_rmw_handle>
 8012cd6:	6823      	ldr	r3, [r4, #0]
 8012cd8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8012cdc:	f003 fa60 	bl	80161a0 <rmw_destroy_subscription>
 8012ce0:	6827      	ldr	r7, [r4, #0]
 8012ce2:	b197      	cbz	r7, 8012d0a <rcl_subscription_init+0x122>
 8012ce4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8012ce8:	4628      	mov	r0, r5
 8012cea:	f7f8 fbed 	bl	800b4c8 <rcutils_allocator_is_valid>
 8012cee:	b158      	cbz	r0, 8012d08 <rcl_subscription_init+0x120>
 8012cf0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012cf2:	b148      	cbz	r0, 8012d08 <rcl_subscription_init+0x120>
 8012cf4:	4629      	mov	r1, r5
 8012cf6:	f002 f98b 	bl	8015010 <rmw_subscription_content_filter_options_fini>
 8012cfa:	4605      	mov	r5, r0
 8012cfc:	b9b8      	cbnz	r0, 8012d2e <rcl_subscription_init+0x146>
 8012cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d00:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8012d02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012d04:	4798      	blx	r3
 8012d06:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8012d08:	6827      	ldr	r7, [r4, #0]
 8012d0a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012d0c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8012d0e:	4638      	mov	r0, r7
 8012d10:	4798      	blx	r3
 8012d12:	2300      	movs	r3, #0
 8012d14:	6023      	str	r3, [r4, #0]
 8012d16:	2701      	movs	r7, #1
 8012d18:	e7c8      	b.n	8012cac <rcl_subscription_init+0xc4>
 8012d1a:	2867      	cmp	r0, #103	@ 0x67
 8012d1c:	d0c6      	beq.n	8012cac <rcl_subscription_init+0xc4>
 8012d1e:	2869      	cmp	r0, #105	@ 0x69
 8012d20:	d003      	beq.n	8012d2a <rcl_subscription_init+0x142>
 8012d22:	280a      	cmp	r0, #10
 8012d24:	d1f7      	bne.n	8012d16 <rcl_subscription_init+0x12e>
 8012d26:	270a      	movs	r7, #10
 8012d28:	e7c0      	b.n	8012cac <rcl_subscription_init+0xc4>
 8012d2a:	2767      	movs	r7, #103	@ 0x67
 8012d2c:	e7be      	b.n	8012cac <rcl_subscription_init+0xc4>
 8012d2e:	f7ff f8fd 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8012d32:	6827      	ldr	r7, [r4, #0]
 8012d34:	e7e9      	b.n	8012d0a <rcl_subscription_init+0x122>
 8012d36:	bf00      	nop

08012d38 <rcl_subscription_get_default_options>:
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	4d14      	ldr	r5, [pc, #80]	@ (8012d8c <rcl_subscription_get_default_options+0x54>)
 8012d3c:	4914      	ldr	r1, [pc, #80]	@ (8012d90 <rcl_subscription_get_default_options+0x58>)
 8012d3e:	b08a      	sub	sp, #40	@ 0x28
 8012d40:	4604      	mov	r4, r0
 8012d42:	2250      	movs	r2, #80	@ 0x50
 8012d44:	4628      	mov	r0, r5
 8012d46:	f006 fcba 	bl	80196be <memcpy>
 8012d4a:	a804      	add	r0, sp, #16
 8012d4c:	f7f8 fbae 	bl	800b4ac <rcutils_get_default_allocator>
 8012d50:	f10d 0c10 	add.w	ip, sp, #16
 8012d54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d58:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012d5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012d60:	466e      	mov	r6, sp
 8012d62:	f8dc 3000 	ldr.w	r3, [ip]
 8012d66:	f8ce 3000 	str.w	r3, [lr]
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	f002 f96a 	bl	8015044 <rmw_get_default_subscription_options>
 8012d70:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012d74:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8012d78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012d7c:	2270      	movs	r2, #112	@ 0x70
 8012d7e:	4629      	mov	r1, r5
 8012d80:	4620      	mov	r0, r4
 8012d82:	f006 fc9c 	bl	80196be <memcpy>
 8012d86:	4620      	mov	r0, r4
 8012d88:	b00a      	add	sp, #40	@ 0x28
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
 8012d8c:	20015428 	.word	0x20015428
 8012d90:	0801b2c0 	.word	0x0801b2c0

08012d94 <rcl_take>:
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d04a      	beq.n	8012e2e <rcl_take+0x9a>
 8012d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	6800      	ldr	r0, [r0, #0]
 8012da0:	b0a4      	sub	sp, #144	@ 0x90
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d03b      	beq.n	8012e1e <rcl_take+0x8a>
 8012da6:	461f      	mov	r7, r3
 8012da8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d036      	beq.n	8012e1e <rcl_take+0x8a>
 8012db0:	460e      	mov	r6, r1
 8012db2:	2900      	cmp	r1, #0
 8012db4:	d039      	beq.n	8012e2a <rcl_take+0x96>
 8012db6:	4615      	mov	r5, r2
 8012db8:	2a00      	cmp	r2, #0
 8012dba:	d03c      	beq.n	8012e36 <rcl_take+0xa2>
 8012dbc:	a802      	add	r0, sp, #8
 8012dbe:	f002 f9cb 	bl	8015158 <rmw_get_zero_initialized_message_info>
 8012dc2:	f10d 0c08 	add.w	ip, sp, #8
 8012dc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dca:	46ae      	mov	lr, r5
 8012dcc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012dd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012dd4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012dd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ddc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012de0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012de4:	f04f 0800 	mov.w	r8, #0
 8012de8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012dec:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012df0:	6822      	ldr	r2, [r4, #0]
 8012df2:	462b      	mov	r3, r5
 8012df4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012df8:	9700      	str	r7, [sp, #0]
 8012dfa:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012dfe:	4631      	mov	r1, r6
 8012e00:	f003 fa2e 	bl	8016260 <rmw_take_with_info>
 8012e04:	4603      	mov	r3, r0
 8012e06:	b9c0      	cbnz	r0, 8012e3a <rcl_take+0xa6>
 8012e08:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012e0c:	f240 1291 	movw	r2, #401	@ 0x191
 8012e10:	2900      	cmp	r1, #0
 8012e12:	bf08      	it	eq
 8012e14:	4613      	moveq	r3, r2
 8012e16:	4618      	mov	r0, r3
 8012e18:	b024      	add	sp, #144	@ 0x90
 8012e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e1e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012e22:	4618      	mov	r0, r3
 8012e24:	b024      	add	sp, #144	@ 0x90
 8012e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e2a:	230b      	movs	r3, #11
 8012e2c:	e7f3      	b.n	8012e16 <rcl_take+0x82>
 8012e2e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012e32:	4618      	mov	r0, r3
 8012e34:	4770      	bx	lr
 8012e36:	ad14      	add	r5, sp, #80	@ 0x50
 8012e38:	e7c0      	b.n	8012dbc <rcl_take+0x28>
 8012e3a:	f7ff f877 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	e7e9      	b.n	8012e16 <rcl_take+0x82>
 8012e42:	bf00      	nop

08012e44 <rcl_subscription_get_rmw_handle>:
 8012e44:	b118      	cbz	r0, 8012e4e <rcl_subscription_get_rmw_handle+0xa>
 8012e46:	6800      	ldr	r0, [r0, #0]
 8012e48:	b108      	cbz	r0, 8012e4e <rcl_subscription_get_rmw_handle+0xa>
 8012e4a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012e4e:	4770      	bx	lr

08012e50 <rcl_subscription_is_valid>:
 8012e50:	b130      	cbz	r0, 8012e60 <rcl_subscription_is_valid+0x10>
 8012e52:	6800      	ldr	r0, [r0, #0]
 8012e54:	b120      	cbz	r0, 8012e60 <rcl_subscription_is_valid+0x10>
 8012e56:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012e5a:	3800      	subs	r0, #0
 8012e5c:	bf18      	it	ne
 8012e5e:	2001      	movne	r0, #1
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop

08012e64 <rcl_get_system_time>:
 8012e64:	4608      	mov	r0, r1
 8012e66:	f7f8 bb6f 	b.w	800b548 <rcutils_system_time_now>
 8012e6a:	bf00      	nop

08012e6c <rcl_get_steady_time>:
 8012e6c:	4608      	mov	r0, r1
 8012e6e:	f7f8 bb93 	b.w	800b598 <rcutils_steady_time_now>
 8012e72:	bf00      	nop

08012e74 <rcl_get_ros_time>:
 8012e74:	7a03      	ldrb	r3, [r0, #8]
 8012e76:	b510      	push	{r4, lr}
 8012e78:	460c      	mov	r4, r1
 8012e7a:	b133      	cbz	r3, 8012e8a <rcl_get_ros_time+0x16>
 8012e7c:	2105      	movs	r1, #5
 8012e7e:	f001 fd53 	bl	8014928 <__atomic_load_8>
 8012e82:	e9c4 0100 	strd	r0, r1, [r4]
 8012e86:	2000      	movs	r0, #0
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e8e:	4608      	mov	r0, r1
 8012e90:	f7f8 bb5a 	b.w	800b548 <rcutils_system_time_now>

08012e94 <rcl_clock_init>:
 8012e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e96:	4605      	mov	r5, r0
 8012e98:	4610      	mov	r0, r2
 8012e9a:	4614      	mov	r4, r2
 8012e9c:	460e      	mov	r6, r1
 8012e9e:	f7f8 fb13 	bl	800b4c8 <rcutils_allocator_is_valid>
 8012ea2:	b128      	cbz	r0, 8012eb0 <rcl_clock_init+0x1c>
 8012ea4:	2d03      	cmp	r5, #3
 8012ea6:	d803      	bhi.n	8012eb0 <rcl_clock_init+0x1c>
 8012ea8:	e8df f005 	tbb	[pc, r5]
 8012eac:	06532e1d 	.word	0x06532e1d
 8012eb0:	f04f 0c0b 	mov.w	ip, #11
 8012eb4:	4660      	mov	r0, ip
 8012eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb8:	2e00      	cmp	r6, #0
 8012eba:	d0f9      	beq.n	8012eb0 <rcl_clock_init+0x1c>
 8012ebc:	2c00      	cmp	r4, #0
 8012ebe:	d0f7      	beq.n	8012eb0 <rcl_clock_init+0x1c>
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012ec6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012f7c <rcl_clock_init+0xe8>
 8012eca:	6133      	str	r3, [r6, #16]
 8012ecc:	f106 0514 	add.w	r5, r6, #20
 8012ed0:	469c      	mov	ip, r3
 8012ed2:	2703      	movs	r7, #3
 8012ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012ed8:	6823      	ldr	r3, [r4, #0]
 8012eda:	602b      	str	r3, [r5, #0]
 8012edc:	7037      	strb	r7, [r6, #0]
 8012ede:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012ee2:	4660      	mov	r0, ip
 8012ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ee6:	2e00      	cmp	r6, #0
 8012ee8:	d0e2      	beq.n	8012eb0 <rcl_clock_init+0x1c>
 8012eea:	2300      	movs	r3, #0
 8012eec:	7033      	strb	r3, [r6, #0]
 8012eee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012ef2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012ef6:	469c      	mov	ip, r3
 8012ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012efa:	f106 0514 	add.w	r5, r6, #20
 8012efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f00:	6823      	ldr	r3, [r4, #0]
 8012f02:	602b      	str	r3, [r5, #0]
 8012f04:	4660      	mov	r0, ip
 8012f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f08:	2e00      	cmp	r6, #0
 8012f0a:	d0d1      	beq.n	8012eb0 <rcl_clock_init+0x1c>
 8012f0c:	2c00      	cmp	r4, #0
 8012f0e:	d0cf      	beq.n	8012eb0 <rcl_clock_init+0x1c>
 8012f10:	2700      	movs	r7, #0
 8012f12:	7037      	strb	r7, [r6, #0]
 8012f14:	46a4      	mov	ip, r4
 8012f16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f1a:	f106 0514 	add.w	r5, r6, #20
 8012f1e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012f22:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f28:	f8dc 3000 	ldr.w	r3, [ip]
 8012f2c:	602b      	str	r3, [r5, #0]
 8012f2e:	6921      	ldr	r1, [r4, #16]
 8012f30:	6823      	ldr	r3, [r4, #0]
 8012f32:	2010      	movs	r0, #16
 8012f34:	4798      	blx	r3
 8012f36:	6130      	str	r0, [r6, #16]
 8012f38:	b1d0      	cbz	r0, 8012f70 <rcl_clock_init+0xdc>
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	e9c0 2300 	strd	r2, r3, [r0]
 8012f42:	2301      	movs	r3, #1
 8012f44:	7207      	strb	r7, [r0, #8]
 8012f46:	4a0c      	ldr	r2, [pc, #48]	@ (8012f78 <rcl_clock_init+0xe4>)
 8012f48:	7033      	strb	r3, [r6, #0]
 8012f4a:	46bc      	mov	ip, r7
 8012f4c:	60f2      	str	r2, [r6, #12]
 8012f4e:	4660      	mov	r0, ip
 8012f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f52:	2e00      	cmp	r6, #0
 8012f54:	d0ac      	beq.n	8012eb0 <rcl_clock_init+0x1c>
 8012f56:	2c00      	cmp	r4, #0
 8012f58:	d0aa      	beq.n	8012eb0 <rcl_clock_init+0x1c>
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012f60:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012f80 <rcl_clock_init+0xec>
 8012f64:	6133      	str	r3, [r6, #16]
 8012f66:	f106 0514 	add.w	r5, r6, #20
 8012f6a:	469c      	mov	ip, r3
 8012f6c:	2702      	movs	r7, #2
 8012f6e:	e7b1      	b.n	8012ed4 <rcl_clock_init+0x40>
 8012f70:	f04f 0c0a 	mov.w	ip, #10
 8012f74:	e79e      	b.n	8012eb4 <rcl_clock_init+0x20>
 8012f76:	bf00      	nop
 8012f78:	08012e75 	.word	0x08012e75
 8012f7c:	08012e6d 	.word	0x08012e6d
 8012f80:	08012e65 	.word	0x08012e65

08012f84 <rcl_clock_get_now>:
 8012f84:	b140      	cbz	r0, 8012f98 <rcl_clock_get_now+0x14>
 8012f86:	b139      	cbz	r1, 8012f98 <rcl_clock_get_now+0x14>
 8012f88:	7803      	ldrb	r3, [r0, #0]
 8012f8a:	b11b      	cbz	r3, 8012f94 <rcl_clock_get_now+0x10>
 8012f8c:	68c3      	ldr	r3, [r0, #12]
 8012f8e:	b10b      	cbz	r3, 8012f94 <rcl_clock_get_now+0x10>
 8012f90:	6900      	ldr	r0, [r0, #16]
 8012f92:	4718      	bx	r3
 8012f94:	2001      	movs	r0, #1
 8012f96:	4770      	bx	lr
 8012f98:	200b      	movs	r0, #11
 8012f9a:	4770      	bx	lr

08012f9c <rcl_timer_call>:
 8012f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa0:	b087      	sub	sp, #28
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	d06d      	beq.n	8013082 <rcl_timer_call+0xe6>
 8012fa6:	6803      	ldr	r3, [r0, #0]
 8012fa8:	4604      	mov	r4, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d063      	beq.n	8013076 <rcl_timer_call+0xda>
 8012fae:	f3bf 8f5b 	dmb	ish
 8012fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012fb6:	f3bf 8f5b 	dmb	ish
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d150      	bne.n	8013060 <rcl_timer_call+0xc4>
 8012fbe:	6803      	ldr	r3, [r0, #0]
 8012fc0:	a904      	add	r1, sp, #16
 8012fc2:	6818      	ldr	r0, [r3, #0]
 8012fc4:	f7ff ffde 	bl	8012f84 <rcl_clock_get_now>
 8012fc8:	4605      	mov	r5, r0
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d14a      	bne.n	8013064 <rcl_timer_call+0xc8>
 8012fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	db4a      	blt.n	801306c <rcl_timer_call+0xd0>
 8012fd6:	6820      	ldr	r0, [r4, #0]
 8012fd8:	f04f 0a05 	mov.w	sl, #5
 8012fdc:	f8cd a000 	str.w	sl, [sp]
 8012fe0:	3020      	adds	r0, #32
 8012fe2:	f001 fd0d 	bl	8014a00 <__atomic_exchange_8>
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	f3bf 8f5b 	dmb	ish
 8012fec:	4680      	mov	r8, r0
 8012fee:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012ff2:	f3bf 8f5b 	dmb	ish
 8012ff6:	6820      	ldr	r0, [r4, #0]
 8012ff8:	4689      	mov	r9, r1
 8012ffa:	3028      	adds	r0, #40	@ 0x28
 8012ffc:	4651      	mov	r1, sl
 8012ffe:	f001 fc93 	bl	8014928 <__atomic_load_8>
 8013002:	4606      	mov	r6, r0
 8013004:	6820      	ldr	r0, [r4, #0]
 8013006:	460f      	mov	r7, r1
 8013008:	3018      	adds	r0, #24
 801300a:	4651      	mov	r1, sl
 801300c:	f001 fc8c 	bl	8014928 <__atomic_load_8>
 8013010:	1836      	adds	r6, r6, r0
 8013012:	4602      	mov	r2, r0
 8013014:	4682      	mov	sl, r0
 8013016:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801301a:	eb47 0701 	adc.w	r7, r7, r1
 801301e:	4286      	cmp	r6, r0
 8013020:	460b      	mov	r3, r1
 8013022:	eb77 010c 	sbcs.w	r1, r7, ip
 8013026:	da04      	bge.n	8013032 <rcl_timer_call+0x96>
 8013028:	ea53 0102 	orrs.w	r1, r3, r2
 801302c:	d12e      	bne.n	801308c <rcl_timer_call+0xf0>
 801302e:	4606      	mov	r6, r0
 8013030:	4667      	mov	r7, ip
 8013032:	6820      	ldr	r0, [r4, #0]
 8013034:	2105      	movs	r1, #5
 8013036:	4632      	mov	r2, r6
 8013038:	463b      	mov	r3, r7
 801303a:	3028      	adds	r0, #40	@ 0x28
 801303c:	9100      	str	r1, [sp, #0]
 801303e:	f001 fca9 	bl	8014994 <__atomic_store_8>
 8013042:	f1bb 0f00 	cmp.w	fp, #0
 8013046:	d00d      	beq.n	8013064 <rcl_timer_call+0xc8>
 8013048:	9a04      	ldr	r2, [sp, #16]
 801304a:	9b05      	ldr	r3, [sp, #20]
 801304c:	ebb2 0208 	subs.w	r2, r2, r8
 8013050:	4620      	mov	r0, r4
 8013052:	eb63 0309 	sbc.w	r3, r3, r9
 8013056:	47d8      	blx	fp
 8013058:	4628      	mov	r0, r5
 801305a:	b007      	add	sp, #28
 801305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	f240 3521 	movw	r5, #801	@ 0x321
 8013064:	4628      	mov	r0, r5
 8013066:	b007      	add	sp, #28
 8013068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801306c:	2501      	movs	r5, #1
 801306e:	4628      	mov	r0, r5
 8013070:	b007      	add	sp, #28
 8013072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013076:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801307a:	4628      	mov	r0, r5
 801307c:	b007      	add	sp, #28
 801307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013082:	250b      	movs	r5, #11
 8013084:	4628      	mov	r0, r5
 8013086:	b007      	add	sp, #28
 8013088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801308c:	1b80      	subs	r0, r0, r6
 801308e:	eb6c 0107 	sbc.w	r1, ip, r7
 8013092:	3801      	subs	r0, #1
 8013094:	f161 0100 	sbc.w	r1, r1, #0
 8013098:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801309c:	f7ed fdbe 	bl	8000c1c <__aeabi_ldivmod>
 80130a0:	9b02      	ldr	r3, [sp, #8]
 80130a2:	3001      	adds	r0, #1
 80130a4:	f141 0100 	adc.w	r1, r1, #0
 80130a8:	fb00 f303 	mul.w	r3, r0, r3
 80130ac:	fb01 330a 	mla	r3, r1, sl, r3
 80130b0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80130b4:	1986      	adds	r6, r0, r6
 80130b6:	4453      	add	r3, sl
 80130b8:	eb43 0707 	adc.w	r7, r3, r7
 80130bc:	e7b9      	b.n	8013032 <rcl_timer_call+0x96>
 80130be:	bf00      	nop

080130c0 <rcl_timer_is_ready>:
 80130c0:	b570      	push	{r4, r5, r6, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	b378      	cbz	r0, 8013126 <rcl_timer_is_ready+0x66>
 80130c6:	6803      	ldr	r3, [r0, #0]
 80130c8:	4604      	mov	r4, r0
 80130ca:	b383      	cbz	r3, 801312e <rcl_timer_is_ready+0x6e>
 80130cc:	460d      	mov	r5, r1
 80130ce:	b351      	cbz	r1, 8013126 <rcl_timer_is_ready+0x66>
 80130d0:	f3bf 8f5b 	dmb	ish
 80130d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80130d8:	f3bf 8f5b 	dmb	ish
 80130dc:	b953      	cbnz	r3, 80130f4 <rcl_timer_is_ready+0x34>
 80130de:	6803      	ldr	r3, [r0, #0]
 80130e0:	4669      	mov	r1, sp
 80130e2:	6818      	ldr	r0, [r3, #0]
 80130e4:	f7ff ff4e 	bl	8012f84 <rcl_clock_get_now>
 80130e8:	4606      	mov	r6, r0
 80130ea:	b140      	cbz	r0, 80130fe <rcl_timer_is_ready+0x3e>
 80130ec:	f240 3321 	movw	r3, #801	@ 0x321
 80130f0:	4298      	cmp	r0, r3
 80130f2:	d101      	bne.n	80130f8 <rcl_timer_is_ready+0x38>
 80130f4:	2600      	movs	r6, #0
 80130f6:	702e      	strb	r6, [r5, #0]
 80130f8:	4630      	mov	r0, r6
 80130fa:	b002      	add	sp, #8
 80130fc:	bd70      	pop	{r4, r5, r6, pc}
 80130fe:	6820      	ldr	r0, [r4, #0]
 8013100:	2105      	movs	r1, #5
 8013102:	3028      	adds	r0, #40	@ 0x28
 8013104:	f001 fc10 	bl	8014928 <__atomic_load_8>
 8013108:	9b00      	ldr	r3, [sp, #0]
 801310a:	1ac0      	subs	r0, r0, r3
 801310c:	9b01      	ldr	r3, [sp, #4]
 801310e:	eb61 0103 	sbc.w	r1, r1, r3
 8013112:	2801      	cmp	r0, #1
 8013114:	f171 0300 	sbcs.w	r3, r1, #0
 8013118:	bfb4      	ite	lt
 801311a:	2301      	movlt	r3, #1
 801311c:	2300      	movge	r3, #0
 801311e:	4630      	mov	r0, r6
 8013120:	702b      	strb	r3, [r5, #0]
 8013122:	b002      	add	sp, #8
 8013124:	bd70      	pop	{r4, r5, r6, pc}
 8013126:	260b      	movs	r6, #11
 8013128:	4630      	mov	r0, r6
 801312a:	b002      	add	sp, #8
 801312c:	bd70      	pop	{r4, r5, r6, pc}
 801312e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013132:	e7e1      	b.n	80130f8 <rcl_timer_is_ready+0x38>

08013134 <rcl_timer_get_time_until_next_call>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	b330      	cbz	r0, 8013188 <rcl_timer_get_time_until_next_call+0x54>
 801313a:	6803      	ldr	r3, [r0, #0]
 801313c:	4604      	mov	r4, r0
 801313e:	b33b      	cbz	r3, 8013190 <rcl_timer_get_time_until_next_call+0x5c>
 8013140:	460d      	mov	r5, r1
 8013142:	b309      	cbz	r1, 8013188 <rcl_timer_get_time_until_next_call+0x54>
 8013144:	f3bf 8f5b 	dmb	ish
 8013148:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801314c:	f3bf 8f5b 	dmb	ish
 8013150:	b9ab      	cbnz	r3, 801317e <rcl_timer_get_time_until_next_call+0x4a>
 8013152:	6803      	ldr	r3, [r0, #0]
 8013154:	4669      	mov	r1, sp
 8013156:	6818      	ldr	r0, [r3, #0]
 8013158:	f7ff ff14 	bl	8012f84 <rcl_clock_get_now>
 801315c:	4606      	mov	r6, r0
 801315e:	b958      	cbnz	r0, 8013178 <rcl_timer_get_time_until_next_call+0x44>
 8013160:	6820      	ldr	r0, [r4, #0]
 8013162:	2105      	movs	r1, #5
 8013164:	3028      	adds	r0, #40	@ 0x28
 8013166:	f001 fbdf 	bl	8014928 <__atomic_load_8>
 801316a:	9b00      	ldr	r3, [sp, #0]
 801316c:	1ac0      	subs	r0, r0, r3
 801316e:	9b01      	ldr	r3, [sp, #4]
 8013170:	6028      	str	r0, [r5, #0]
 8013172:	eb61 0103 	sbc.w	r1, r1, r3
 8013176:	6069      	str	r1, [r5, #4]
 8013178:	4630      	mov	r0, r6
 801317a:	b002      	add	sp, #8
 801317c:	bd70      	pop	{r4, r5, r6, pc}
 801317e:	f240 3621 	movw	r6, #801	@ 0x321
 8013182:	4630      	mov	r0, r6
 8013184:	b002      	add	sp, #8
 8013186:	bd70      	pop	{r4, r5, r6, pc}
 8013188:	260b      	movs	r6, #11
 801318a:	4630      	mov	r0, r6
 801318c:	b002      	add	sp, #8
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013194:	e7f0      	b.n	8013178 <rcl_timer_get_time_until_next_call+0x44>
 8013196:	bf00      	nop

08013198 <rcl_timer_get_guard_condition>:
 8013198:	b130      	cbz	r0, 80131a8 <rcl_timer_get_guard_condition+0x10>
 801319a:	6800      	ldr	r0, [r0, #0]
 801319c:	b120      	cbz	r0, 80131a8 <rcl_timer_get_guard_condition+0x10>
 801319e:	68c3      	ldr	r3, [r0, #12]
 80131a0:	b10b      	cbz	r3, 80131a6 <rcl_timer_get_guard_condition+0xe>
 80131a2:	3008      	adds	r0, #8
 80131a4:	4770      	bx	lr
 80131a6:	4618      	mov	r0, r3
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop

080131ac <rcl_validate_enclave_name_with_size>:
 80131ac:	b378      	cbz	r0, 801320e <rcl_validate_enclave_name_with_size+0x62>
 80131ae:	b570      	push	{r4, r5, r6, lr}
 80131b0:	4615      	mov	r5, r2
 80131b2:	b0c2      	sub	sp, #264	@ 0x108
 80131b4:	b302      	cbz	r2, 80131f8 <rcl_validate_enclave_name_with_size+0x4c>
 80131b6:	461e      	mov	r6, r3
 80131b8:	466a      	mov	r2, sp
 80131ba:	ab01      	add	r3, sp, #4
 80131bc:	460c      	mov	r4, r1
 80131be:	f002 f849 	bl	8015254 <rmw_validate_namespace_with_size>
 80131c2:	4684      	mov	ip, r0
 80131c4:	b9e8      	cbnz	r0, 8013202 <rcl_validate_enclave_name_with_size+0x56>
 80131c6:	9b00      	ldr	r3, [sp, #0]
 80131c8:	b923      	cbnz	r3, 80131d4 <rcl_validate_enclave_name_with_size+0x28>
 80131ca:	2300      	movs	r3, #0
 80131cc:	602b      	str	r3, [r5, #0]
 80131ce:	4660      	mov	r0, ip
 80131d0:	b042      	add	sp, #264	@ 0x108
 80131d2:	bd70      	pop	{r4, r5, r6, pc}
 80131d4:	2b07      	cmp	r3, #7
 80131d6:	d007      	beq.n	80131e8 <rcl_validate_enclave_name_with_size+0x3c>
 80131d8:	1e5a      	subs	r2, r3, #1
 80131da:	2a05      	cmp	r2, #5
 80131dc:	d833      	bhi.n	8013246 <rcl_validate_enclave_name_with_size+0x9a>
 80131de:	e8df f002 	tbb	[pc, r2]
 80131e2:	2c2f      	.short	0x2c2f
 80131e4:	1a232629 	.word	0x1a232629
 80131e8:	2cff      	cmp	r4, #255	@ 0xff
 80131ea:	d9ee      	bls.n	80131ca <rcl_validate_enclave_name_with_size+0x1e>
 80131ec:	602b      	str	r3, [r5, #0]
 80131ee:	2e00      	cmp	r6, #0
 80131f0:	d0ed      	beq.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 80131f2:	23fe      	movs	r3, #254	@ 0xfe
 80131f4:	6033      	str	r3, [r6, #0]
 80131f6:	e7ea      	b.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 80131f8:	f04f 0c0b 	mov.w	ip, #11
 80131fc:	4660      	mov	r0, ip
 80131fe:	b042      	add	sp, #264	@ 0x108
 8013200:	bd70      	pop	{r4, r5, r6, pc}
 8013202:	f7fe fe93 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 8013206:	4684      	mov	ip, r0
 8013208:	4660      	mov	r0, ip
 801320a:	b042      	add	sp, #264	@ 0x108
 801320c:	bd70      	pop	{r4, r5, r6, pc}
 801320e:	f04f 0c0b 	mov.w	ip, #11
 8013212:	4660      	mov	r0, ip
 8013214:	4770      	bx	lr
 8013216:	2306      	movs	r3, #6
 8013218:	602b      	str	r3, [r5, #0]
 801321a:	2e00      	cmp	r6, #0
 801321c:	d0d7      	beq.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 801321e:	9b01      	ldr	r3, [sp, #4]
 8013220:	6033      	str	r3, [r6, #0]
 8013222:	4660      	mov	r0, ip
 8013224:	b042      	add	sp, #264	@ 0x108
 8013226:	bd70      	pop	{r4, r5, r6, pc}
 8013228:	2305      	movs	r3, #5
 801322a:	602b      	str	r3, [r5, #0]
 801322c:	e7f5      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 801322e:	2304      	movs	r3, #4
 8013230:	602b      	str	r3, [r5, #0]
 8013232:	e7f2      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 8013234:	2303      	movs	r3, #3
 8013236:	602b      	str	r3, [r5, #0]
 8013238:	e7ef      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 801323a:	2302      	movs	r3, #2
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	e7ec      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 8013240:	2301      	movs	r3, #1
 8013242:	602b      	str	r3, [r5, #0]
 8013244:	e7e9      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 8013246:	4a04      	ldr	r2, [pc, #16]	@ (8013258 <rcl_validate_enclave_name_with_size+0xac>)
 8013248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801324c:	a802      	add	r0, sp, #8
 801324e:	f001 fd25 	bl	8014c9c <rcutils_snprintf>
 8013252:	f04f 0c01 	mov.w	ip, #1
 8013256:	e7ba      	b.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 8013258:	0801b310 	.word	0x0801b310

0801325c <rcl_validate_enclave_name>:
 801325c:	b168      	cbz	r0, 801327a <rcl_validate_enclave_name+0x1e>
 801325e:	b570      	push	{r4, r5, r6, lr}
 8013260:	460d      	mov	r5, r1
 8013262:	4616      	mov	r6, r2
 8013264:	4604      	mov	r4, r0
 8013266:	f7ec ffcb 	bl	8000200 <strlen>
 801326a:	4633      	mov	r3, r6
 801326c:	4601      	mov	r1, r0
 801326e:	462a      	mov	r2, r5
 8013270:	4620      	mov	r0, r4
 8013272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013276:	f7ff bf99 	b.w	80131ac <rcl_validate_enclave_name_with_size>
 801327a:	200b      	movs	r0, #11
 801327c:	4770      	bx	lr
 801327e:	bf00      	nop

08013280 <rcl_get_zero_initialized_wait_set>:
 8013280:	b510      	push	{r4, lr}
 8013282:	4c08      	ldr	r4, [pc, #32]	@ (80132a4 <rcl_get_zero_initialized_wait_set+0x24>)
 8013284:	4686      	mov	lr, r0
 8013286:	4684      	mov	ip, r0
 8013288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801328a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801328e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013296:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	f8cc 3000 	str.w	r3, [ip]
 80132a0:	4670      	mov	r0, lr
 80132a2:	bd10      	pop	{r4, pc}
 80132a4:	0801b370 	.word	0x0801b370

080132a8 <rcl_wait_set_is_valid>:
 80132a8:	b118      	cbz	r0, 80132b2 <rcl_wait_set_is_valid+0xa>
 80132aa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80132ac:	3800      	subs	r0, #0
 80132ae:	bf18      	it	ne
 80132b0:	2001      	movne	r0, #1
 80132b2:	4770      	bx	lr

080132b4 <rcl_wait_set_fini>:
 80132b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132b8:	b082      	sub	sp, #8
 80132ba:	2800      	cmp	r0, #0
 80132bc:	f000 8095 	beq.w	80133ea <rcl_wait_set_fini+0x136>
 80132c0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80132c2:	4604      	mov	r4, r0
 80132c4:	2e00      	cmp	r6, #0
 80132c6:	f000 808c 	beq.w	80133e2 <rcl_wait_set_fini+0x12e>
 80132ca:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80132cc:	f003 f9b6 	bl	801663c <rmw_destroy_wait_set>
 80132d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132d2:	1e06      	subs	r6, r0, #0
 80132d4:	bf18      	it	ne
 80132d6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80132da:	2d00      	cmp	r5, #0
 80132dc:	f000 8081 	beq.w	80133e2 <rcl_wait_set_fini+0x12e>
 80132e0:	6820      	ldr	r0, [r4, #0]
 80132e2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80132e6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80132e8:	2700      	movs	r7, #0
 80132ea:	6067      	str	r7, [r4, #4]
 80132ec:	602f      	str	r7, [r5, #0]
 80132ee:	b120      	cbz	r0, 80132fa <rcl_wait_set_fini+0x46>
 80132f0:	9101      	str	r1, [sp, #4]
 80132f2:	47c0      	blx	r8
 80132f4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132f6:	9901      	ldr	r1, [sp, #4]
 80132f8:	6027      	str	r7, [r4, #0]
 80132fa:	68a8      	ldr	r0, [r5, #8]
 80132fc:	b120      	cbz	r0, 8013308 <rcl_wait_set_fini+0x54>
 80132fe:	47c0      	blx	r8
 8013300:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013302:	2300      	movs	r3, #0
 8013304:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013308:	68a0      	ldr	r0, [r4, #8]
 801330a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801330c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801330e:	f04f 0800 	mov.w	r8, #0
 8013312:	f8c4 800c 	str.w	r8, [r4, #12]
 8013316:	f8c5 800c 	str.w	r8, [r5, #12]
 801331a:	b128      	cbz	r0, 8013328 <rcl_wait_set_fini+0x74>
 801331c:	47b8      	blx	r7
 801331e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013320:	f8c4 8008 	str.w	r8, [r4, #8]
 8013324:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013326:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013328:	6968      	ldr	r0, [r5, #20]
 801332a:	f04f 0800 	mov.w	r8, #0
 801332e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013332:	b128      	cbz	r0, 8013340 <rcl_wait_set_fini+0x8c>
 8013334:	47b8      	blx	r7
 8013336:	f8c5 8014 	str.w	r8, [r5, #20]
 801333a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801333c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801333e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013340:	6920      	ldr	r0, [r4, #16]
 8013342:	f04f 0800 	mov.w	r8, #0
 8013346:	f8c4 8014 	str.w	r8, [r4, #20]
 801334a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801334e:	b128      	cbz	r0, 801335c <rcl_wait_set_fini+0xa8>
 8013350:	47b8      	blx	r7
 8013352:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013354:	f8c4 8010 	str.w	r8, [r4, #16]
 8013358:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801335a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801335c:	69a0      	ldr	r0, [r4, #24]
 801335e:	f04f 0800 	mov.w	r8, #0
 8013362:	f8c4 801c 	str.w	r8, [r4, #28]
 8013366:	f8c5 8018 	str.w	r8, [r5, #24]
 801336a:	b128      	cbz	r0, 8013378 <rcl_wait_set_fini+0xc4>
 801336c:	9101      	str	r1, [sp, #4]
 801336e:	47b8      	blx	r7
 8013370:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013372:	9901      	ldr	r1, [sp, #4]
 8013374:	f8c4 8018 	str.w	r8, [r4, #24]
 8013378:	6a28      	ldr	r0, [r5, #32]
 801337a:	b120      	cbz	r0, 8013386 <rcl_wait_set_fini+0xd2>
 801337c:	47b8      	blx	r7
 801337e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013380:	2300      	movs	r3, #0
 8013382:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8013386:	6a20      	ldr	r0, [r4, #32]
 8013388:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801338c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801338e:	2700      	movs	r7, #0
 8013390:	6267      	str	r7, [r4, #36]	@ 0x24
 8013392:	626f      	str	r7, [r5, #36]	@ 0x24
 8013394:	b120      	cbz	r0, 80133a0 <rcl_wait_set_fini+0xec>
 8013396:	9101      	str	r1, [sp, #4]
 8013398:	47c0      	blx	r8
 801339a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801339c:	9901      	ldr	r1, [sp, #4]
 801339e:	6227      	str	r7, [r4, #32]
 80133a0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80133a2:	b120      	cbz	r0, 80133ae <rcl_wait_set_fini+0xfa>
 80133a4:	47c0      	blx	r8
 80133a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133a8:	2300      	movs	r3, #0
 80133aa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80133ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80133b0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80133b4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133b6:	2700      	movs	r7, #0
 80133b8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80133ba:	632f      	str	r7, [r5, #48]	@ 0x30
 80133bc:	b120      	cbz	r0, 80133c8 <rcl_wait_set_fini+0x114>
 80133be:	9101      	str	r1, [sp, #4]
 80133c0:	47c0      	blx	r8
 80133c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133c4:	9901      	ldr	r1, [sp, #4]
 80133c6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80133c8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80133ca:	b120      	cbz	r0, 80133d6 <rcl_wait_set_fini+0x122>
 80133cc:	47c0      	blx	r8
 80133ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133d0:	2300      	movs	r3, #0
 80133d2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80133d6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80133d8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133da:	4628      	mov	r0, r5
 80133dc:	4798      	blx	r3
 80133de:	2300      	movs	r3, #0
 80133e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80133e2:	4630      	mov	r0, r6
 80133e4:	b002      	add	sp, #8
 80133e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ea:	260b      	movs	r6, #11
 80133ec:	4630      	mov	r0, r6
 80133ee:	b002      	add	sp, #8
 80133f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133f4 <rcl_wait_set_add_subscription>:
 80133f4:	b318      	cbz	r0, 801343e <rcl_wait_set_add_subscription+0x4a>
 80133f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	4604      	mov	r4, r0
 80133fc:	b30b      	cbz	r3, 8013442 <rcl_wait_set_add_subscription+0x4e>
 80133fe:	b319      	cbz	r1, 8013448 <rcl_wait_set_add_subscription+0x54>
 8013400:	681d      	ldr	r5, [r3, #0]
 8013402:	6840      	ldr	r0, [r0, #4]
 8013404:	4285      	cmp	r5, r0
 8013406:	d217      	bcs.n	8013438 <rcl_wait_set_add_subscription+0x44>
 8013408:	6820      	ldr	r0, [r4, #0]
 801340a:	1c6e      	adds	r6, r5, #1
 801340c:	601e      	str	r6, [r3, #0]
 801340e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013412:	b102      	cbz	r2, 8013416 <rcl_wait_set_add_subscription+0x22>
 8013414:	6015      	str	r5, [r2, #0]
 8013416:	4608      	mov	r0, r1
 8013418:	f7ff fd14 	bl	8012e44 <rcl_subscription_get_rmw_handle>
 801341c:	b150      	cbz	r0, 8013434 <rcl_wait_set_add_subscription+0x40>
 801341e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013420:	6842      	ldr	r2, [r0, #4]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013428:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801342a:	6853      	ldr	r3, [r2, #4]
 801342c:	3301      	adds	r3, #1
 801342e:	2000      	movs	r0, #0
 8013430:	6053      	str	r3, [r2, #4]
 8013432:	bd70      	pop	{r4, r5, r6, pc}
 8013434:	2001      	movs	r0, #1
 8013436:	bd70      	pop	{r4, r5, r6, pc}
 8013438:	f240 3086 	movw	r0, #902	@ 0x386
 801343c:	bd70      	pop	{r4, r5, r6, pc}
 801343e:	200b      	movs	r0, #11
 8013440:	4770      	bx	lr
 8013442:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013446:	bd70      	pop	{r4, r5, r6, pc}
 8013448:	200b      	movs	r0, #11
 801344a:	bd70      	pop	{r4, r5, r6, pc}

0801344c <rcl_wait_set_clear>:
 801344c:	2800      	cmp	r0, #0
 801344e:	d073      	beq.n	8013538 <rcl_wait_set_clear+0xec>
 8013450:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013452:	b510      	push	{r4, lr}
 8013454:	4604      	mov	r4, r0
 8013456:	2b00      	cmp	r3, #0
 8013458:	d070      	beq.n	801353c <rcl_wait_set_clear+0xf0>
 801345a:	6800      	ldr	r0, [r0, #0]
 801345c:	b138      	cbz	r0, 801346e <rcl_wait_set_clear+0x22>
 801345e:	6862      	ldr	r2, [r4, #4]
 8013460:	2100      	movs	r1, #0
 8013462:	0092      	lsls	r2, r2, #2
 8013464:	f006 f8c3 	bl	80195ee <memset>
 8013468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801346a:	2200      	movs	r2, #0
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	68a0      	ldr	r0, [r4, #8]
 8013470:	b138      	cbz	r0, 8013482 <rcl_wait_set_clear+0x36>
 8013472:	68e2      	ldr	r2, [r4, #12]
 8013474:	2100      	movs	r1, #0
 8013476:	0092      	lsls	r2, r2, #2
 8013478:	f006 f8b9 	bl	80195ee <memset>
 801347c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801347e:	2200      	movs	r2, #0
 8013480:	60da      	str	r2, [r3, #12]
 8013482:	69a0      	ldr	r0, [r4, #24]
 8013484:	b138      	cbz	r0, 8013496 <rcl_wait_set_clear+0x4a>
 8013486:	69e2      	ldr	r2, [r4, #28]
 8013488:	2100      	movs	r1, #0
 801348a:	0092      	lsls	r2, r2, #2
 801348c:	f006 f8af 	bl	80195ee <memset>
 8013490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013492:	2200      	movs	r2, #0
 8013494:	619a      	str	r2, [r3, #24]
 8013496:	6a20      	ldr	r0, [r4, #32]
 8013498:	b138      	cbz	r0, 80134aa <rcl_wait_set_clear+0x5e>
 801349a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801349c:	2100      	movs	r1, #0
 801349e:	0092      	lsls	r2, r2, #2
 80134a0:	f006 f8a5 	bl	80195ee <memset>
 80134a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134a6:	2200      	movs	r2, #0
 80134a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80134aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80134ac:	b138      	cbz	r0, 80134be <rcl_wait_set_clear+0x72>
 80134ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80134b0:	2100      	movs	r1, #0
 80134b2:	0092      	lsls	r2, r2, #2
 80134b4:	f006 f89b 	bl	80195ee <memset>
 80134b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134ba:	2200      	movs	r2, #0
 80134bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80134be:	6920      	ldr	r0, [r4, #16]
 80134c0:	b138      	cbz	r0, 80134d2 <rcl_wait_set_clear+0x86>
 80134c2:	6962      	ldr	r2, [r4, #20]
 80134c4:	2100      	movs	r1, #0
 80134c6:	0092      	lsls	r2, r2, #2
 80134c8:	f006 f891 	bl	80195ee <memset>
 80134cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134ce:	2200      	movs	r2, #0
 80134d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80134d2:	6898      	ldr	r0, [r3, #8]
 80134d4:	b138      	cbz	r0, 80134e6 <rcl_wait_set_clear+0x9a>
 80134d6:	685a      	ldr	r2, [r3, #4]
 80134d8:	2100      	movs	r1, #0
 80134da:	0092      	lsls	r2, r2, #2
 80134dc:	f006 f887 	bl	80195ee <memset>
 80134e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134e2:	2200      	movs	r2, #0
 80134e4:	605a      	str	r2, [r3, #4]
 80134e6:	6958      	ldr	r0, [r3, #20]
 80134e8:	b138      	cbz	r0, 80134fa <rcl_wait_set_clear+0xae>
 80134ea:	691a      	ldr	r2, [r3, #16]
 80134ec:	2100      	movs	r1, #0
 80134ee:	0092      	lsls	r2, r2, #2
 80134f0:	f006 f87d 	bl	80195ee <memset>
 80134f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134f6:	2200      	movs	r2, #0
 80134f8:	611a      	str	r2, [r3, #16]
 80134fa:	6a18      	ldr	r0, [r3, #32]
 80134fc:	b138      	cbz	r0, 801350e <rcl_wait_set_clear+0xc2>
 80134fe:	69da      	ldr	r2, [r3, #28]
 8013500:	2100      	movs	r1, #0
 8013502:	0092      	lsls	r2, r2, #2
 8013504:	f006 f873 	bl	80195ee <memset>
 8013508:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801350a:	2200      	movs	r2, #0
 801350c:	61da      	str	r2, [r3, #28]
 801350e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013510:	b138      	cbz	r0, 8013522 <rcl_wait_set_clear+0xd6>
 8013512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013514:	2100      	movs	r1, #0
 8013516:	0092      	lsls	r2, r2, #2
 8013518:	f006 f869 	bl	80195ee <memset>
 801351c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801351e:	2200      	movs	r2, #0
 8013520:	629a      	str	r2, [r3, #40]	@ 0x28
 8013522:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013524:	b138      	cbz	r0, 8013536 <rcl_wait_set_clear+0xea>
 8013526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013528:	2100      	movs	r1, #0
 801352a:	0092      	lsls	r2, r2, #2
 801352c:	f006 f85f 	bl	80195ee <memset>
 8013530:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013532:	2000      	movs	r0, #0
 8013534:	6358      	str	r0, [r3, #52]	@ 0x34
 8013536:	bd10      	pop	{r4, pc}
 8013538:	200b      	movs	r0, #11
 801353a:	4770      	bx	lr
 801353c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013540:	bd10      	pop	{r4, pc}
 8013542:	bf00      	nop

08013544 <rcl_wait_set_resize>:
 8013544:	2800      	cmp	r0, #0
 8013546:	f000 8185 	beq.w	8013854 <rcl_wait_set_resize+0x310>
 801354a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013550:	b083      	sub	sp, #12
 8013552:	4605      	mov	r5, r0
 8013554:	2c00      	cmp	r4, #0
 8013556:	f000 817f 	beq.w	8013858 <rcl_wait_set_resize+0x314>
 801355a:	f04f 0900 	mov.w	r9, #0
 801355e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8013562:	461f      	mov	r7, r3
 8013564:	4688      	mov	r8, r1
 8013566:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801356a:	4616      	mov	r6, r2
 801356c:	f8c0 9004 	str.w	r9, [r0, #4]
 8013570:	f8c4 9000 	str.w	r9, [r4]
 8013574:	2900      	cmp	r1, #0
 8013576:	f000 80bd 	beq.w	80136f4 <rcl_wait_set_resize+0x1b0>
 801357a:	008c      	lsls	r4, r1, #2
 801357c:	6800      	ldr	r0, [r0, #0]
 801357e:	9301      	str	r3, [sp, #4]
 8013580:	4652      	mov	r2, sl
 8013582:	4621      	mov	r1, r4
 8013584:	4798      	blx	r3
 8013586:	9b01      	ldr	r3, [sp, #4]
 8013588:	6028      	str	r0, [r5, #0]
 801358a:	2800      	cmp	r0, #0
 801358c:	f000 80cb 	beq.w	8013726 <rcl_wait_set_resize+0x1e2>
 8013590:	4622      	mov	r2, r4
 8013592:	4649      	mov	r1, r9
 8013594:	9301      	str	r3, [sp, #4]
 8013596:	f006 f82a 	bl	80195ee <memset>
 801359a:	f8c5 8004 	str.w	r8, [r5, #4]
 801359e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80135a2:	9b01      	ldr	r3, [sp, #4]
 80135a4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80135a8:	f8c8 9004 	str.w	r9, [r8, #4]
 80135ac:	4652      	mov	r2, sl
 80135ae:	4621      	mov	r1, r4
 80135b0:	4798      	blx	r3
 80135b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80135b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	f000 80ac 	beq.w	8013718 <rcl_wait_set_resize+0x1d4>
 80135c0:	4622      	mov	r2, r4
 80135c2:	4649      	mov	r1, r9
 80135c4:	4618      	mov	r0, r3
 80135c6:	f006 f812 	bl	80195ee <memset>
 80135ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80135d0:	f04f 0800 	mov.w	r8, #0
 80135d4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80135d8:	f8c5 800c 	str.w	r8, [r5, #12]
 80135dc:	f8c4 800c 	str.w	r8, [r4, #12]
 80135e0:	2e00      	cmp	r6, #0
 80135e2:	f040 80a4 	bne.w	801372e <rcl_wait_set_resize+0x1ea>
 80135e6:	68a8      	ldr	r0, [r5, #8]
 80135e8:	b128      	cbz	r0, 80135f6 <rcl_wait_set_resize+0xb2>
 80135ea:	4649      	mov	r1, r9
 80135ec:	4790      	blx	r2
 80135ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135f0:	60ae      	str	r6, [r5, #8]
 80135f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80135f6:	f04f 0800 	mov.w	r8, #0
 80135fa:	19f6      	adds	r6, r6, r7
 80135fc:	f8c4 8010 	str.w	r8, [r4, #16]
 8013600:	f040 80ac 	bne.w	801375c <rcl_wait_set_resize+0x218>
 8013604:	6960      	ldr	r0, [r4, #20]
 8013606:	b130      	cbz	r0, 8013616 <rcl_wait_set_resize+0xd2>
 8013608:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801360a:	4649      	mov	r1, r9
 801360c:	4798      	blx	r3
 801360e:	6166      	str	r6, [r4, #20]
 8013610:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013612:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013616:	2600      	movs	r6, #0
 8013618:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801361c:	616e      	str	r6, [r5, #20]
 801361e:	6426      	str	r6, [r4, #64]	@ 0x40
 8013620:	2f00      	cmp	r7, #0
 8013622:	f040 80ad 	bne.w	8013780 <rcl_wait_set_resize+0x23c>
 8013626:	6928      	ldr	r0, [r5, #16]
 8013628:	b138      	cbz	r0, 801363a <rcl_wait_set_resize+0xf6>
 801362a:	4649      	mov	r1, r9
 801362c:	47d0      	blx	sl
 801362e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013630:	612f      	str	r7, [r5, #16]
 8013632:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013636:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801363a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801363c:	2600      	movs	r6, #0
 801363e:	61ee      	str	r6, [r5, #28]
 8013640:	61a6      	str	r6, [r4, #24]
 8013642:	2b00      	cmp	r3, #0
 8013644:	f040 80af 	bne.w	80137a6 <rcl_wait_set_resize+0x262>
 8013648:	69a8      	ldr	r0, [r5, #24]
 801364a:	b120      	cbz	r0, 8013656 <rcl_wait_set_resize+0x112>
 801364c:	4649      	mov	r1, r9
 801364e:	47d0      	blx	sl
 8013650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013652:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013654:	61ab      	str	r3, [r5, #24]
 8013656:	6a20      	ldr	r0, [r4, #32]
 8013658:	b128      	cbz	r0, 8013666 <rcl_wait_set_resize+0x122>
 801365a:	4649      	mov	r1, r9
 801365c:	47d0      	blx	sl
 801365e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013660:	2300      	movs	r3, #0
 8013662:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013668:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801366a:	2600      	movs	r6, #0
 801366c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013670:	626e      	str	r6, [r5, #36]	@ 0x24
 8013672:	6266      	str	r6, [r4, #36]	@ 0x24
 8013674:	2b00      	cmp	r3, #0
 8013676:	f000 80b6 	beq.w	80137e6 <rcl_wait_set_resize+0x2a2>
 801367a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801367e:	6a28      	ldr	r0, [r5, #32]
 8013680:	463a      	mov	r2, r7
 8013682:	4651      	mov	r1, sl
 8013684:	47c8      	blx	r9
 8013686:	6228      	str	r0, [r5, #32]
 8013688:	2800      	cmp	r0, #0
 801368a:	d04c      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 801368c:	4652      	mov	r2, sl
 801368e:	4631      	mov	r1, r6
 8013690:	f005 ffad 	bl	80195ee <memset>
 8013694:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013698:	626b      	str	r3, [r5, #36]	@ 0x24
 801369a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801369c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801369e:	463a      	mov	r2, r7
 80136a0:	4651      	mov	r1, sl
 80136a2:	47c8      	blx	r9
 80136a4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80136a6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80136a8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80136aa:	2c00      	cmp	r4, #0
 80136ac:	f000 80f0 	beq.w	8013890 <rcl_wait_set_resize+0x34c>
 80136b0:	4620      	mov	r0, r4
 80136b2:	4652      	mov	r2, sl
 80136b4:	4631      	mov	r1, r6
 80136b6:	f005 ff9a 	bl	80195ee <memset>
 80136ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136be:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80136c0:	2600      	movs	r6, #0
 80136c2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80136c6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80136c8:	6326      	str	r6, [r4, #48]	@ 0x30
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f040 809d 	bne.w	801380a <rcl_wait_set_resize+0x2c6>
 80136d0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80136d2:	b120      	cbz	r0, 80136de <rcl_wait_set_resize+0x19a>
 80136d4:	4639      	mov	r1, r7
 80136d6:	47c0      	blx	r8
 80136d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136dc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80136de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80136e0:	b310      	cbz	r0, 8013728 <rcl_wait_set_resize+0x1e4>
 80136e2:	4639      	mov	r1, r7
 80136e4:	47c0      	blx	r8
 80136e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80136e8:	2000      	movs	r0, #0
 80136ea:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80136ee:	b003      	add	sp, #12
 80136f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f4:	6800      	ldr	r0, [r0, #0]
 80136f6:	b120      	cbz	r0, 8013702 <rcl_wait_set_resize+0x1be>
 80136f8:	4651      	mov	r1, sl
 80136fa:	47d8      	blx	fp
 80136fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136fe:	f8c5 8000 	str.w	r8, [r5]
 8013702:	68a0      	ldr	r0, [r4, #8]
 8013704:	2800      	cmp	r0, #0
 8013706:	f43f af61 	beq.w	80135cc <rcl_wait_set_resize+0x88>
 801370a:	4651      	mov	r1, sl
 801370c:	47d8      	blx	fp
 801370e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013710:	2300      	movs	r3, #0
 8013712:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013716:	e759      	b.n	80135cc <rcl_wait_set_resize+0x88>
 8013718:	6828      	ldr	r0, [r5, #0]
 801371a:	9301      	str	r3, [sp, #4]
 801371c:	4651      	mov	r1, sl
 801371e:	47d8      	blx	fp
 8013720:	9b01      	ldr	r3, [sp, #4]
 8013722:	e9c5 3300 	strd	r3, r3, [r5]
 8013726:	200a      	movs	r0, #10
 8013728:	b003      	add	sp, #12
 801372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372e:	00b4      	lsls	r4, r6, #2
 8013730:	68a8      	ldr	r0, [r5, #8]
 8013732:	464a      	mov	r2, r9
 8013734:	4621      	mov	r1, r4
 8013736:	4798      	blx	r3
 8013738:	60a8      	str	r0, [r5, #8]
 801373a:	2800      	cmp	r0, #0
 801373c:	d0f3      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 801373e:	4622      	mov	r2, r4
 8013740:	4641      	mov	r1, r8
 8013742:	f005 ff54 	bl	80195ee <memset>
 8013746:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013748:	60ee      	str	r6, [r5, #12]
 801374a:	f04f 0800 	mov.w	r8, #0
 801374e:	19f6      	adds	r6, r6, r7
 8013750:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013754:	f8c4 8010 	str.w	r8, [r4, #16]
 8013758:	f43f af54 	beq.w	8013604 <rcl_wait_set_resize+0xc0>
 801375c:	00b6      	lsls	r6, r6, #2
 801375e:	464a      	mov	r2, r9
 8013760:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013762:	6960      	ldr	r0, [r4, #20]
 8013764:	4631      	mov	r1, r6
 8013766:	4798      	blx	r3
 8013768:	4681      	mov	r9, r0
 801376a:	6160      	str	r0, [r4, #20]
 801376c:	2800      	cmp	r0, #0
 801376e:	d076      	beq.n	801385e <rcl_wait_set_resize+0x31a>
 8013770:	4632      	mov	r2, r6
 8013772:	4641      	mov	r1, r8
 8013774:	f005 ff3b 	bl	80195ee <memset>
 8013778:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801377a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801377e:	e74a      	b.n	8013616 <rcl_wait_set_resize+0xd2>
 8013780:	00bc      	lsls	r4, r7, #2
 8013782:	6928      	ldr	r0, [r5, #16]
 8013784:	464a      	mov	r2, r9
 8013786:	4621      	mov	r1, r4
 8013788:	47c0      	blx	r8
 801378a:	6128      	str	r0, [r5, #16]
 801378c:	2800      	cmp	r0, #0
 801378e:	d0ca      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 8013790:	4622      	mov	r2, r4
 8013792:	4631      	mov	r1, r6
 8013794:	f005 ff2b 	bl	80195ee <memset>
 8013798:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801379a:	616f      	str	r7, [r5, #20]
 801379c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80137a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80137a4:	e749      	b.n	801363a <rcl_wait_set_resize+0xf6>
 80137a6:	009c      	lsls	r4, r3, #2
 80137a8:	69a8      	ldr	r0, [r5, #24]
 80137aa:	464a      	mov	r2, r9
 80137ac:	4621      	mov	r1, r4
 80137ae:	47c0      	blx	r8
 80137b0:	61a8      	str	r0, [r5, #24]
 80137b2:	2800      	cmp	r0, #0
 80137b4:	d0b7      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 80137b6:	4622      	mov	r2, r4
 80137b8:	4631      	mov	r1, r6
 80137ba:	f005 ff18 	bl	80195ee <memset>
 80137be:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80137c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137c2:	61eb      	str	r3, [r5, #28]
 80137c4:	6a38      	ldr	r0, [r7, #32]
 80137c6:	61fe      	str	r6, [r7, #28]
 80137c8:	464a      	mov	r2, r9
 80137ca:	4621      	mov	r1, r4
 80137cc:	47c0      	blx	r8
 80137ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80137d0:	6238      	str	r0, [r7, #32]
 80137d2:	6a1f      	ldr	r7, [r3, #32]
 80137d4:	2f00      	cmp	r7, #0
 80137d6:	d054      	beq.n	8013882 <rcl_wait_set_resize+0x33e>
 80137d8:	4622      	mov	r2, r4
 80137da:	4631      	mov	r1, r6
 80137dc:	4638      	mov	r0, r7
 80137de:	f005 ff06 	bl	80195ee <memset>
 80137e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137e4:	e73f      	b.n	8013666 <rcl_wait_set_resize+0x122>
 80137e6:	6a28      	ldr	r0, [r5, #32]
 80137e8:	b120      	cbz	r0, 80137f4 <rcl_wait_set_resize+0x2b0>
 80137ea:	4639      	mov	r1, r7
 80137ec:	47c0      	blx	r8
 80137ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80137f0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137f2:	622b      	str	r3, [r5, #32]
 80137f4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80137f6:	2800      	cmp	r0, #0
 80137f8:	f43f af60 	beq.w	80136bc <rcl_wait_set_resize+0x178>
 80137fc:	4639      	mov	r1, r7
 80137fe:	47c0      	blx	r8
 8013800:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013802:	2300      	movs	r3, #0
 8013804:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013808:	e758      	b.n	80136bc <rcl_wait_set_resize+0x178>
 801380a:	009c      	lsls	r4, r3, #2
 801380c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801380e:	463a      	mov	r2, r7
 8013810:	4621      	mov	r1, r4
 8013812:	47c8      	blx	r9
 8013814:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013816:	2800      	cmp	r0, #0
 8013818:	d085      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 801381a:	4622      	mov	r2, r4
 801381c:	4631      	mov	r1, r6
 801381e:	f005 fee6 	bl	80195ee <memset>
 8013822:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013828:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801382a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801382e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013832:	463a      	mov	r2, r7
 8013834:	4621      	mov	r1, r4
 8013836:	47c8      	blx	r9
 8013838:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801383a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013840:	b36b      	cbz	r3, 801389e <rcl_wait_set_resize+0x35a>
 8013842:	4622      	mov	r2, r4
 8013844:	4631      	mov	r1, r6
 8013846:	4618      	mov	r0, r3
 8013848:	f005 fed1 	bl	80195ee <memset>
 801384c:	4630      	mov	r0, r6
 801384e:	b003      	add	sp, #12
 8013850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013854:	200b      	movs	r0, #11
 8013856:	4770      	bx	lr
 8013858:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801385c:	e764      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 801385e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013860:	68a8      	ldr	r0, [r5, #8]
 8013862:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013866:	4798      	blx	r3
 8013868:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801386a:	6928      	ldr	r0, [r5, #16]
 801386c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801386e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013870:	f8c5 900c 	str.w	r9, [r5, #12]
 8013874:	f8c5 9008 	str.w	r9, [r5, #8]
 8013878:	4790      	blx	r2
 801387a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801387e:	200a      	movs	r0, #10
 8013880:	e752      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 8013882:	69a8      	ldr	r0, [r5, #24]
 8013884:	4649      	mov	r1, r9
 8013886:	47d0      	blx	sl
 8013888:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801388c:	200a      	movs	r0, #10
 801388e:	e74b      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 8013890:	6a28      	ldr	r0, [r5, #32]
 8013892:	4639      	mov	r1, r7
 8013894:	47c0      	blx	r8
 8013896:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801389a:	200a      	movs	r0, #10
 801389c:	e744      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 801389e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80138a0:	9301      	str	r3, [sp, #4]
 80138a2:	4639      	mov	r1, r7
 80138a4:	47c0      	blx	r8
 80138a6:	9b01      	ldr	r3, [sp, #4]
 80138a8:	200a      	movs	r0, #10
 80138aa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80138ae:	e73b      	b.n	8013728 <rcl_wait_set_resize+0x1e4>

080138b0 <rcl_wait_set_init>:
 80138b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138b4:	b084      	sub	sp, #16
 80138b6:	4604      	mov	r4, r0
 80138b8:	a810      	add	r0, sp, #64	@ 0x40
 80138ba:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80138be:	460f      	mov	r7, r1
 80138c0:	4690      	mov	r8, r2
 80138c2:	4699      	mov	r9, r3
 80138c4:	f7f7 fe00 	bl	800b4c8 <rcutils_allocator_is_valid>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d06b      	beq.n	80139a4 <rcl_wait_set_init+0xf4>
 80138cc:	2c00      	cmp	r4, #0
 80138ce:	d069      	beq.n	80139a4 <rcl_wait_set_init+0xf4>
 80138d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80138d2:	b125      	cbz	r5, 80138de <rcl_wait_set_init+0x2e>
 80138d4:	2564      	movs	r5, #100	@ 0x64
 80138d6:	4628      	mov	r0, r5
 80138d8:	b004      	add	sp, #16
 80138da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138de:	f1ba 0f00 	cmp.w	sl, #0
 80138e2:	d05f      	beq.n	80139a4 <rcl_wait_set_init+0xf4>
 80138e4:	4650      	mov	r0, sl
 80138e6:	f7fe fb3f 	bl	8011f68 <rcl_context_is_valid>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	d067      	beq.n	80139be <rcl_wait_set_init+0x10e>
 80138ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138f0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80138f2:	205c      	movs	r0, #92	@ 0x5c
 80138f4:	4798      	blx	r3
 80138f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d062      	beq.n	80139c2 <rcl_wait_set_init+0x112>
 80138fc:	4629      	mov	r1, r5
 80138fe:	225c      	movs	r2, #92	@ 0x5c
 8013900:	f005 fe75 	bl	80195ee <memset>
 8013904:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013908:	eb03 0e02 	add.w	lr, r3, r2
 801390c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801390e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013910:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013914:	449e      	add	lr, r3
 8013916:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801391a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801391e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013922:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013926:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801392a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801392e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013932:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013936:	f8da a000 	ldr.w	sl, [sl]
 801393a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801393c:	44c6      	add	lr, r8
 801393e:	f8dc 3000 	ldr.w	r3, [ip]
 8013942:	602b      	str	r3, [r5, #0]
 8013944:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013948:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801394c:	f002 fe6c 	bl	8016628 <rmw_create_wait_set>
 8013950:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013952:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8013954:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013956:	b350      	cbz	r0, 80139ae <rcl_wait_set_init+0xfe>
 8013958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801395a:	9302      	str	r3, [sp, #8]
 801395c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801395e:	9301      	str	r3, [sp, #4]
 8013960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	4642      	mov	r2, r8
 8013966:	464b      	mov	r3, r9
 8013968:	4639      	mov	r1, r7
 801396a:	4620      	mov	r0, r4
 801396c:	f7ff fdea 	bl	8013544 <rcl_wait_set_resize>
 8013970:	4605      	mov	r5, r0
 8013972:	2800      	cmp	r0, #0
 8013974:	d0af      	beq.n	80138d6 <rcl_wait_set_init+0x26>
 8013976:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013978:	bb2b      	cbnz	r3, 80139c6 <rcl_wait_set_init+0x116>
 801397a:	2600      	movs	r6, #0
 801397c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013980:	9600      	str	r6, [sp, #0]
 8013982:	4633      	mov	r3, r6
 8013984:	4632      	mov	r2, r6
 8013986:	4631      	mov	r1, r6
 8013988:	4620      	mov	r0, r4
 801398a:	f7ff fddb 	bl	8013544 <rcl_wait_set_resize>
 801398e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013990:	2800      	cmp	r0, #0
 8013992:	d0a0      	beq.n	80138d6 <rcl_wait_set_init+0x26>
 8013994:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013996:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013998:	4798      	blx	r3
 801399a:	4628      	mov	r0, r5
 801399c:	6326      	str	r6, [r4, #48]	@ 0x30
 801399e:	b004      	add	sp, #16
 80139a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a4:	250b      	movs	r5, #11
 80139a6:	4628      	mov	r0, r5
 80139a8:	b004      	add	sp, #16
 80139aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ae:	2501      	movs	r5, #1
 80139b0:	f002 fe44 	bl	801663c <rmw_destroy_wait_set>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	bf18      	it	ne
 80139b8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80139bc:	e7dd      	b.n	801397a <rcl_wait_set_init+0xca>
 80139be:	2565      	movs	r5, #101	@ 0x65
 80139c0:	e789      	b.n	80138d6 <rcl_wait_set_init+0x26>
 80139c2:	250a      	movs	r5, #10
 80139c4:	e787      	b.n	80138d6 <rcl_wait_set_init+0x26>
 80139c6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80139c8:	e7f2      	b.n	80139b0 <rcl_wait_set_init+0x100>
 80139ca:	bf00      	nop

080139cc <rcl_wait_set_add_guard_condition>:
 80139cc:	b318      	cbz	r0, 8013a16 <rcl_wait_set_add_guard_condition+0x4a>
 80139ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	4604      	mov	r4, r0
 80139d4:	b30b      	cbz	r3, 8013a1a <rcl_wait_set_add_guard_condition+0x4e>
 80139d6:	b319      	cbz	r1, 8013a20 <rcl_wait_set_add_guard_condition+0x54>
 80139d8:	68dd      	ldr	r5, [r3, #12]
 80139da:	68c0      	ldr	r0, [r0, #12]
 80139dc:	4285      	cmp	r5, r0
 80139de:	d217      	bcs.n	8013a10 <rcl_wait_set_add_guard_condition+0x44>
 80139e0:	68a0      	ldr	r0, [r4, #8]
 80139e2:	1c6e      	adds	r6, r5, #1
 80139e4:	60de      	str	r6, [r3, #12]
 80139e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80139ea:	b102      	cbz	r2, 80139ee <rcl_wait_set_add_guard_condition+0x22>
 80139ec:	6015      	str	r5, [r2, #0]
 80139ee:	4608      	mov	r0, r1
 80139f0:	f004 fdf2 	bl	80185d8 <rcl_guard_condition_get_rmw_handle>
 80139f4:	b150      	cbz	r0, 8013a0c <rcl_wait_set_add_guard_condition+0x40>
 80139f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80139f8:	6842      	ldr	r2, [r0, #4]
 80139fa:	695b      	ldr	r3, [r3, #20]
 80139fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a02:	6913      	ldr	r3, [r2, #16]
 8013a04:	3301      	adds	r3, #1
 8013a06:	2000      	movs	r0, #0
 8013a08:	6113      	str	r3, [r2, #16]
 8013a0a:	bd70      	pop	{r4, r5, r6, pc}
 8013a0c:	2001      	movs	r0, #1
 8013a0e:	bd70      	pop	{r4, r5, r6, pc}
 8013a10:	f240 3086 	movw	r0, #902	@ 0x386
 8013a14:	bd70      	pop	{r4, r5, r6, pc}
 8013a16:	200b      	movs	r0, #11
 8013a18:	4770      	bx	lr
 8013a1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a1e:	bd70      	pop	{r4, r5, r6, pc}
 8013a20:	200b      	movs	r0, #11
 8013a22:	bd70      	pop	{r4, r5, r6, pc}

08013a24 <rcl_wait_set_add_timer>:
 8013a24:	b328      	cbz	r0, 8013a72 <rcl_wait_set_add_timer+0x4e>
 8013a26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	b31b      	cbz	r3, 8013a76 <rcl_wait_set_add_timer+0x52>
 8013a2e:	b329      	cbz	r1, 8013a7c <rcl_wait_set_add_timer+0x58>
 8013a30:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013a32:	6965      	ldr	r5, [r4, #20]
 8013a34:	42a8      	cmp	r0, r5
 8013a36:	d219      	bcs.n	8013a6c <rcl_wait_set_add_timer+0x48>
 8013a38:	6925      	ldr	r5, [r4, #16]
 8013a3a:	1c46      	adds	r6, r0, #1
 8013a3c:	641e      	str	r6, [r3, #64]	@ 0x40
 8013a3e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013a42:	b102      	cbz	r2, 8013a46 <rcl_wait_set_add_timer+0x22>
 8013a44:	6010      	str	r0, [r2, #0]
 8013a46:	4608      	mov	r0, r1
 8013a48:	f7ff fba6 	bl	8013198 <rcl_timer_get_guard_condition>
 8013a4c:	b168      	cbz	r0, 8013a6a <rcl_wait_set_add_timer+0x46>
 8013a4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a50:	68e3      	ldr	r3, [r4, #12]
 8013a52:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013a54:	3b01      	subs	r3, #1
 8013a56:	441d      	add	r5, r3
 8013a58:	f004 fdbe 	bl	80185d8 <rcl_guard_condition_get_rmw_handle>
 8013a5c:	b180      	cbz	r0, 8013a80 <rcl_wait_set_add_timer+0x5c>
 8013a5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a60:	6842      	ldr	r2, [r0, #4]
 8013a62:	695b      	ldr	r3, [r3, #20]
 8013a64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a68:	2000      	movs	r0, #0
 8013a6a:	bd70      	pop	{r4, r5, r6, pc}
 8013a6c:	f240 3086 	movw	r0, #902	@ 0x386
 8013a70:	bd70      	pop	{r4, r5, r6, pc}
 8013a72:	200b      	movs	r0, #11
 8013a74:	4770      	bx	lr
 8013a76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a7a:	bd70      	pop	{r4, r5, r6, pc}
 8013a7c:	200b      	movs	r0, #11
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
 8013a80:	2001      	movs	r0, #1
 8013a82:	bd70      	pop	{r4, r5, r6, pc}

08013a84 <rcl_wait_set_add_client>:
 8013a84:	b318      	cbz	r0, 8013ace <rcl_wait_set_add_client+0x4a>
 8013a86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a88:	b570      	push	{r4, r5, r6, lr}
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	b30b      	cbz	r3, 8013ad2 <rcl_wait_set_add_client+0x4e>
 8013a8e:	b319      	cbz	r1, 8013ad8 <rcl_wait_set_add_client+0x54>
 8013a90:	699d      	ldr	r5, [r3, #24]
 8013a92:	69c0      	ldr	r0, [r0, #28]
 8013a94:	4285      	cmp	r5, r0
 8013a96:	d217      	bcs.n	8013ac8 <rcl_wait_set_add_client+0x44>
 8013a98:	69a0      	ldr	r0, [r4, #24]
 8013a9a:	1c6e      	adds	r6, r5, #1
 8013a9c:	619e      	str	r6, [r3, #24]
 8013a9e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013aa2:	b102      	cbz	r2, 8013aa6 <rcl_wait_set_add_client+0x22>
 8013aa4:	6015      	str	r5, [r2, #0]
 8013aa6:	4608      	mov	r0, r1
 8013aa8:	f7fe f9b0 	bl	8011e0c <rcl_client_get_rmw_handle>
 8013aac:	b150      	cbz	r0, 8013ac4 <rcl_wait_set_add_client+0x40>
 8013aae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ab0:	6842      	ldr	r2, [r0, #4]
 8013ab2:	6a1b      	ldr	r3, [r3, #32]
 8013ab4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ab8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013aba:	69d3      	ldr	r3, [r2, #28]
 8013abc:	3301      	adds	r3, #1
 8013abe:	2000      	movs	r0, #0
 8013ac0:	61d3      	str	r3, [r2, #28]
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}
 8013ac4:	2001      	movs	r0, #1
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}
 8013ac8:	f240 3086 	movw	r0, #902	@ 0x386
 8013acc:	bd70      	pop	{r4, r5, r6, pc}
 8013ace:	200b      	movs	r0, #11
 8013ad0:	4770      	bx	lr
 8013ad2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013ad6:	bd70      	pop	{r4, r5, r6, pc}
 8013ad8:	200b      	movs	r0, #11
 8013ada:	bd70      	pop	{r4, r5, r6, pc}

08013adc <rcl_wait_set_add_service>:
 8013adc:	b318      	cbz	r0, 8013b26 <rcl_wait_set_add_service+0x4a>
 8013ade:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ae0:	b570      	push	{r4, r5, r6, lr}
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	b30b      	cbz	r3, 8013b2a <rcl_wait_set_add_service+0x4e>
 8013ae6:	b319      	cbz	r1, 8013b30 <rcl_wait_set_add_service+0x54>
 8013ae8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013aea:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013aec:	4285      	cmp	r5, r0
 8013aee:	d217      	bcs.n	8013b20 <rcl_wait_set_add_service+0x44>
 8013af0:	6a20      	ldr	r0, [r4, #32]
 8013af2:	1c6e      	adds	r6, r5, #1
 8013af4:	625e      	str	r6, [r3, #36]	@ 0x24
 8013af6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013afa:	b102      	cbz	r2, 8013afe <rcl_wait_set_add_service+0x22>
 8013afc:	6015      	str	r5, [r2, #0]
 8013afe:	4608      	mov	r0, r1
 8013b00:	f7ff f804 	bl	8012b0c <rcl_service_get_rmw_handle>
 8013b04:	b150      	cbz	r0, 8013b1c <rcl_wait_set_add_service+0x40>
 8013b06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b08:	6842      	ldr	r2, [r0, #4]
 8013b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b0c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b10:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b12:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013b14:	3301      	adds	r3, #1
 8013b16:	2000      	movs	r0, #0
 8013b18:	6293      	str	r3, [r2, #40]	@ 0x28
 8013b1a:	bd70      	pop	{r4, r5, r6, pc}
 8013b1c:	2001      	movs	r0, #1
 8013b1e:	bd70      	pop	{r4, r5, r6, pc}
 8013b20:	f240 3086 	movw	r0, #902	@ 0x386
 8013b24:	bd70      	pop	{r4, r5, r6, pc}
 8013b26:	200b      	movs	r0, #11
 8013b28:	4770      	bx	lr
 8013b2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}
 8013b30:	200b      	movs	r0, #11
 8013b32:	bd70      	pop	{r4, r5, r6, pc}
 8013b34:	0000      	movs	r0, r0
	...

08013b38 <rcl_wait>:
 8013b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b3c:	ed2d 8b02 	vpush	{d8}
 8013b40:	b08d      	sub	sp, #52	@ 0x34
 8013b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b46:	2800      	cmp	r0, #0
 8013b48:	f000 8143 	beq.w	8013dd2 <rcl_wait+0x29a>
 8013b4c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013b4e:	4605      	mov	r5, r0
 8013b50:	2e00      	cmp	r6, #0
 8013b52:	f000 8112 	beq.w	8013d7a <rcl_wait+0x242>
 8013b56:	6843      	ldr	r3, [r0, #4]
 8013b58:	b983      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b5a:	68eb      	ldr	r3, [r5, #12]
 8013b5c:	b973      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b5e:	696b      	ldr	r3, [r5, #20]
 8013b60:	b963      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b62:	69eb      	ldr	r3, [r5, #28]
 8013b64:	b953      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b66:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013b68:	b943      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013b6c:	b933      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b6e:	f240 3085 	movw	r0, #901	@ 0x385
 8013b72:	b00d      	add	sp, #52	@ 0x34
 8013b74:	ecbd 8b02 	vpop	{d8}
 8013b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b7c:	9b04      	ldr	r3, [sp, #16]
 8013b7e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	9b05      	ldr	r3, [sp, #20]
 8013b84:	f173 0300 	sbcs.w	r3, r3, #0
 8013b88:	f2c0 80f0 	blt.w	8013d6c <rcl_wait+0x234>
 8013b8c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013b90:	4643      	mov	r3, r8
 8013b92:	2a00      	cmp	r2, #0
 8013b94:	f000 8133 	beq.w	8013dfe <rcl_wait+0x2c6>
 8013b98:	2400      	movs	r4, #0
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013e10 <rcl_wait+0x2d8>
 8013ba0:	46a2      	mov	sl, r4
 8013ba2:	46a3      	mov	fp, r4
 8013ba4:	f240 3921 	movw	r9, #801	@ 0x321
 8013ba8:	4632      	mov	r2, r6
 8013baa:	e014      	b.n	8013bd6 <rcl_wait+0x9e>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d1e0      	bne.n	8013b72 <rcl_wait+0x3a>
 8013bb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013bb4:	4542      	cmp	r2, r8
 8013bb6:	eb73 0107 	sbcs.w	r1, r3, r7
 8013bba:	da03      	bge.n	8013bc4 <rcl_wait+0x8c>
 8013bbc:	4690      	mov	r8, r2
 8013bbe:	461f      	mov	r7, r3
 8013bc0:	f04f 0b01 	mov.w	fp, #1
 8013bc4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013bc6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013bc8:	3401      	adds	r4, #1
 8013bca:	f14a 0a00 	adc.w	sl, sl, #0
 8013bce:	429c      	cmp	r4, r3
 8013bd0:	f17a 0100 	sbcs.w	r1, sl, #0
 8013bd4:	d228      	bcs.n	8013c28 <rcl_wait+0xf0>
 8013bd6:	6928      	ldr	r0, [r5, #16]
 8013bd8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013bdc:	a908      	add	r1, sp, #32
 8013bde:	00a6      	lsls	r6, r4, #2
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d0f1      	beq.n	8013bc8 <rcl_wait+0x90>
 8013be4:	68eb      	ldr	r3, [r5, #12]
 8013be6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013bea:	4423      	add	r3, r4
 8013bec:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013bf0:	f1be 0f00 	cmp.w	lr, #0
 8013bf4:	d006      	beq.n	8013c04 <rcl_wait+0xcc>
 8013bf6:	6913      	ldr	r3, [r2, #16]
 8013bf8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013bfc:	3301      	adds	r3, #1
 8013bfe:	6113      	str	r3, [r2, #16]
 8013c00:	692b      	ldr	r3, [r5, #16]
 8013c02:	5998      	ldr	r0, [r3, r6]
 8013c04:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013c08:	f7ff fa94 	bl	8013134 <rcl_timer_get_time_until_next_call>
 8013c0c:	4548      	cmp	r0, r9
 8013c0e:	d1cd      	bne.n	8013bac <rcl_wait+0x74>
 8013c10:	692b      	ldr	r3, [r5, #16]
 8013c12:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013c14:	2100      	movs	r1, #0
 8013c16:	5199      	str	r1, [r3, r6]
 8013c18:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013c1a:	3401      	adds	r4, #1
 8013c1c:	f14a 0a00 	adc.w	sl, sl, #0
 8013c20:	429c      	cmp	r4, r3
 8013c22:	f17a 0100 	sbcs.w	r1, sl, #0
 8013c26:	d3d6      	bcc.n	8013bd6 <rcl_wait+0x9e>
 8013c28:	4616      	mov	r6, r2
 8013c2a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	46d9      	mov	r9, fp
 8013c32:	f040 80a9 	bne.w	8013d88 <rcl_wait+0x250>
 8013c36:	2300      	movs	r3, #0
 8013c38:	2200      	movs	r2, #0
 8013c3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013c42:	ab08      	add	r3, sp, #32
 8013c44:	9302      	str	r3, [sp, #8]
 8013c46:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013c48:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013c4c:	e9cd 3200 	strd	r3, r2, [sp]
 8013c50:	f106 0110 	add.w	r1, r6, #16
 8013c54:	f106 031c 	add.w	r3, r6, #28
 8013c58:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013c5c:	1d30      	adds	r0, r6, #4
 8013c5e:	f002 fb6b 	bl	8016338 <rmw_wait>
 8013c62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013c66:	4680      	mov	r8, r0
 8013c68:	b1ca      	cbz	r2, 8013c9e <rcl_wait+0x166>
 8013c6a:	2400      	movs	r4, #0
 8013c6c:	4627      	mov	r7, r4
 8013c6e:	692a      	ldr	r2, [r5, #16]
 8013c70:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013c74:	f10d 011f 	add.w	r1, sp, #31
 8013c78:	00a6      	lsls	r6, r4, #2
 8013c7a:	b160      	cbz	r0, 8013c96 <rcl_wait+0x15e>
 8013c7c:	f88d 701f 	strb.w	r7, [sp, #31]
 8013c80:	f7ff fa1e 	bl	80130c0 <rcl_timer_is_ready>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	f47f af74 	bne.w	8013b72 <rcl_wait+0x3a>
 8013c8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013c8e:	b90b      	cbnz	r3, 8013c94 <rcl_wait+0x15c>
 8013c90:	692a      	ldr	r2, [r5, #16]
 8013c92:	5193      	str	r3, [r2, r6]
 8013c94:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013c98:	3401      	adds	r4, #1
 8013c9a:	42a2      	cmp	r2, r4
 8013c9c:	d8e7      	bhi.n	8013c6e <rcl_wait+0x136>
 8013c9e:	f038 0002 	bics.w	r0, r8, #2
 8013ca2:	f040 8090 	bne.w	8013dc6 <rcl_wait+0x28e>
 8013ca6:	686e      	ldr	r6, [r5, #4]
 8013ca8:	4602      	mov	r2, r0
 8013caa:	b91e      	cbnz	r6, 8013cb4 <rcl_wait+0x17c>
 8013cac:	e00d      	b.n	8013cca <rcl_wait+0x192>
 8013cae:	3201      	adds	r2, #1
 8013cb0:	42b2      	cmp	r2, r6
 8013cb2:	d00a      	beq.n	8013cca <rcl_wait+0x192>
 8013cb4:	6899      	ldr	r1, [r3, #8]
 8013cb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013cba:	2900      	cmp	r1, #0
 8013cbc:	d1f7      	bne.n	8013cae <rcl_wait+0x176>
 8013cbe:	682c      	ldr	r4, [r5, #0]
 8013cc0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013cc4:	3201      	adds	r2, #1
 8013cc6:	42b2      	cmp	r2, r6
 8013cc8:	d1f4      	bne.n	8013cb4 <rcl_wait+0x17c>
 8013cca:	68ee      	ldr	r6, [r5, #12]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	b91e      	cbnz	r6, 8013cd8 <rcl_wait+0x1a0>
 8013cd0:	e00d      	b.n	8013cee <rcl_wait+0x1b6>
 8013cd2:	3201      	adds	r2, #1
 8013cd4:	42b2      	cmp	r2, r6
 8013cd6:	d00a      	beq.n	8013cee <rcl_wait+0x1b6>
 8013cd8:	6959      	ldr	r1, [r3, #20]
 8013cda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013cde:	2900      	cmp	r1, #0
 8013ce0:	d1f7      	bne.n	8013cd2 <rcl_wait+0x19a>
 8013ce2:	68ac      	ldr	r4, [r5, #8]
 8013ce4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013ce8:	3201      	adds	r2, #1
 8013cea:	42b2      	cmp	r2, r6
 8013cec:	d1f4      	bne.n	8013cd8 <rcl_wait+0x1a0>
 8013cee:	69ee      	ldr	r6, [r5, #28]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	b91e      	cbnz	r6, 8013cfc <rcl_wait+0x1c4>
 8013cf4:	e00d      	b.n	8013d12 <rcl_wait+0x1da>
 8013cf6:	3201      	adds	r2, #1
 8013cf8:	42b2      	cmp	r2, r6
 8013cfa:	d00a      	beq.n	8013d12 <rcl_wait+0x1da>
 8013cfc:	6a19      	ldr	r1, [r3, #32]
 8013cfe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d02:	2900      	cmp	r1, #0
 8013d04:	d1f7      	bne.n	8013cf6 <rcl_wait+0x1be>
 8013d06:	69ac      	ldr	r4, [r5, #24]
 8013d08:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d0c:	3201      	adds	r2, #1
 8013d0e:	42b2      	cmp	r2, r6
 8013d10:	d1f4      	bne.n	8013cfc <rcl_wait+0x1c4>
 8013d12:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013d14:	2200      	movs	r2, #0
 8013d16:	b91e      	cbnz	r6, 8013d20 <rcl_wait+0x1e8>
 8013d18:	e00d      	b.n	8013d36 <rcl_wait+0x1fe>
 8013d1a:	3201      	adds	r2, #1
 8013d1c:	4296      	cmp	r6, r2
 8013d1e:	d00a      	beq.n	8013d36 <rcl_wait+0x1fe>
 8013d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013d22:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d26:	2900      	cmp	r1, #0
 8013d28:	d1f7      	bne.n	8013d1a <rcl_wait+0x1e2>
 8013d2a:	6a2c      	ldr	r4, [r5, #32]
 8013d2c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d30:	3201      	adds	r2, #1
 8013d32:	4296      	cmp	r6, r2
 8013d34:	d1f4      	bne.n	8013d20 <rcl_wait+0x1e8>
 8013d36:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013d38:	2200      	movs	r2, #0
 8013d3a:	b91e      	cbnz	r6, 8013d44 <rcl_wait+0x20c>
 8013d3c:	e00d      	b.n	8013d5a <rcl_wait+0x222>
 8013d3e:	3201      	adds	r2, #1
 8013d40:	42b2      	cmp	r2, r6
 8013d42:	d00a      	beq.n	8013d5a <rcl_wait+0x222>
 8013d44:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013d46:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d4a:	2900      	cmp	r1, #0
 8013d4c:	d1f7      	bne.n	8013d3e <rcl_wait+0x206>
 8013d4e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013d50:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d54:	3201      	adds	r2, #1
 8013d56:	42b2      	cmp	r2, r6
 8013d58:	d1f4      	bne.n	8013d44 <rcl_wait+0x20c>
 8013d5a:	f1b8 0f02 	cmp.w	r8, #2
 8013d5e:	f47f af08 	bne.w	8013b72 <rcl_wait+0x3a>
 8013d62:	464b      	mov	r3, r9
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	bf08      	it	eq
 8013d68:	2002      	moveq	r0, #2
 8013d6a:	e702      	b.n	8013b72 <rcl_wait+0x3a>
 8013d6c:	2a00      	cmp	r2, #0
 8013d6e:	d03a      	beq.n	8013de6 <rcl_wait+0x2ae>
 8013d70:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013d74:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013d78:	e70e      	b.n	8013b98 <rcl_wait+0x60>
 8013d7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d7e:	b00d      	add	sp, #52	@ 0x34
 8013d80:	ecbd 8b02 	vpop	{d8}
 8013d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d88:	9b04      	ldr	r3, [sp, #16]
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	9b05      	ldr	r3, [sp, #20]
 8013d8e:	f173 0300 	sbcs.w	r3, r3, #0
 8013d92:	db24      	blt.n	8013dde <rcl_wait+0x2a6>
 8013d94:	2f00      	cmp	r7, #0
 8013d96:	bfbc      	itt	lt
 8013d98:	f04f 0800 	movlt.w	r8, #0
 8013d9c:	4647      	movlt	r7, r8
 8013d9e:	a31e      	add	r3, pc, #120	@ (adr r3, 8013e18 <rcl_wait+0x2e0>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da4:	4640      	mov	r0, r8
 8013da6:	4639      	mov	r1, r7
 8013da8:	f7ec ff38 	bl	8000c1c <__aeabi_ldivmod>
 8013dac:	a31a      	add	r3, pc, #104	@ (adr r3, 8013e18 <rcl_wait+0x2e0>)
 8013dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013db6:	4640      	mov	r0, r8
 8013db8:	4639      	mov	r1, r7
 8013dba:	f7ec ff2f 	bl	8000c1c <__aeabi_ldivmod>
 8013dbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013dc2:	ab08      	add	r3, sp, #32
 8013dc4:	e73e      	b.n	8013c44 <rcl_wait+0x10c>
 8013dc6:	2001      	movs	r0, #1
 8013dc8:	b00d      	add	sp, #52	@ 0x34
 8013dca:	ecbd 8b02 	vpop	{d8}
 8013dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd2:	200b      	movs	r0, #11
 8013dd4:	b00d      	add	sp, #52	@ 0x34
 8013dd6:	ecbd 8b02 	vpop	{d8}
 8013dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dde:	465b      	mov	r3, fp
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d1d7      	bne.n	8013d94 <rcl_wait+0x25c>
 8013de4:	e72e      	b.n	8013c44 <rcl_wait+0x10c>
 8013de6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013dea:	430b      	orrs	r3, r1
 8013dec:	bf08      	it	eq
 8013dee:	4691      	moveq	r9, r2
 8013df0:	f43f af21 	beq.w	8013c36 <rcl_wait+0xfe>
 8013df4:	9b04      	ldr	r3, [sp, #16]
 8013df6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013dfa:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013dfe:	2b01      	cmp	r3, #1
 8013e00:	9b05      	ldr	r3, [sp, #20]
 8013e02:	f173 0300 	sbcs.w	r3, r3, #0
 8013e06:	f04f 0300 	mov.w	r3, #0
 8013e0a:	4699      	mov	r9, r3
 8013e0c:	dac2      	bge.n	8013d94 <rcl_wait+0x25c>
 8013e0e:	e719      	b.n	8013c44 <rcl_wait+0x10c>
 8013e10:	ffffffff 	.word	0xffffffff
 8013e14:	7fffffff 	.word	0x7fffffff
 8013e18:	3b9aca00 	.word	0x3b9aca00
 8013e1c:	00000000 	.word	0x00000000

08013e20 <rcl_action_take_goal_response>:
 8013e20:	2800      	cmp	r0, #0
 8013e22:	d039      	beq.n	8013e98 <rcl_action_take_goal_response+0x78>
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	4604      	mov	r4, r0
 8013e28:	6800      	ldr	r0, [r0, #0]
 8013e2a:	b380      	cbz	r0, 8013e8e <rcl_action_take_goal_response+0x6e>
 8013e2c:	460d      	mov	r5, r1
 8013e2e:	4616      	mov	r6, r2
 8013e30:	f7fe f872 	bl	8011f18 <rcl_client_is_valid>
 8013e34:	b330      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e36:	6820      	ldr	r0, [r4, #0]
 8013e38:	3004      	adds	r0, #4
 8013e3a:	f7fe f86d 	bl	8011f18 <rcl_client_is_valid>
 8013e3e:	b308      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e40:	6820      	ldr	r0, [r4, #0]
 8013e42:	3008      	adds	r0, #8
 8013e44:	f7fe f868 	bl	8011f18 <rcl_client_is_valid>
 8013e48:	b1e0      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e4a:	6820      	ldr	r0, [r4, #0]
 8013e4c:	300c      	adds	r0, #12
 8013e4e:	f7fe ffff 	bl	8012e50 <rcl_subscription_is_valid>
 8013e52:	b1b8      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e54:	6820      	ldr	r0, [r4, #0]
 8013e56:	3010      	adds	r0, #16
 8013e58:	f7fe fffa 	bl	8012e50 <rcl_subscription_is_valid>
 8013e5c:	b190      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e5e:	b1cd      	cbz	r5, 8013e94 <rcl_action_take_goal_response+0x74>
 8013e60:	b1c6      	cbz	r6, 8013e94 <rcl_action_take_goal_response+0x74>
 8013e62:	6820      	ldr	r0, [r4, #0]
 8013e64:	4632      	mov	r2, r6
 8013e66:	4629      	mov	r1, r5
 8013e68:	f7fe f80e 	bl	8011e88 <rcl_take_response>
 8013e6c:	b148      	cbz	r0, 8013e82 <rcl_action_take_goal_response+0x62>
 8013e6e:	280a      	cmp	r0, #10
 8013e70:	d007      	beq.n	8013e82 <rcl_action_take_goal_response+0x62>
 8013e72:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013e76:	f640 0337 	movw	r3, #2103	@ 0x837
 8013e7a:	4290      	cmp	r0, r2
 8013e7c:	bf0c      	ite	eq
 8013e7e:	4618      	moveq	r0, r3
 8013e80:	2001      	movne	r0, #1
 8013e82:	bd70      	pop	{r4, r5, r6, pc}
 8013e84:	f7f7 fb44 	bl	800b510 <rcutils_reset_error>
 8013e88:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e8c:	bd70      	pop	{r4, r5, r6, pc}
 8013e8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e92:	bd70      	pop	{r4, r5, r6, pc}
 8013e94:	200b      	movs	r0, #11
 8013e96:	bd70      	pop	{r4, r5, r6, pc}
 8013e98:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop

08013ea0 <rcl_action_send_result_request>:
 8013ea0:	b390      	cbz	r0, 8013f08 <rcl_action_send_result_request+0x68>
 8013ea2:	b570      	push	{r4, r5, r6, lr}
 8013ea4:	4604      	mov	r4, r0
 8013ea6:	6800      	ldr	r0, [r0, #0]
 8013ea8:	b348      	cbz	r0, 8013efe <rcl_action_send_result_request+0x5e>
 8013eaa:	460d      	mov	r5, r1
 8013eac:	4616      	mov	r6, r2
 8013eae:	f7fe f833 	bl	8011f18 <rcl_client_is_valid>
 8013eb2:	b1f8      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013eb4:	6820      	ldr	r0, [r4, #0]
 8013eb6:	3004      	adds	r0, #4
 8013eb8:	f7fe f82e 	bl	8011f18 <rcl_client_is_valid>
 8013ebc:	b1d0      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013ebe:	6820      	ldr	r0, [r4, #0]
 8013ec0:	3008      	adds	r0, #8
 8013ec2:	f7fe f829 	bl	8011f18 <rcl_client_is_valid>
 8013ec6:	b1a8      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013ec8:	6820      	ldr	r0, [r4, #0]
 8013eca:	300c      	adds	r0, #12
 8013ecc:	f7fe ffc0 	bl	8012e50 <rcl_subscription_is_valid>
 8013ed0:	b180      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013ed2:	6820      	ldr	r0, [r4, #0]
 8013ed4:	3010      	adds	r0, #16
 8013ed6:	f7fe ffbb 	bl	8012e50 <rcl_subscription_is_valid>
 8013eda:	b158      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013edc:	b195      	cbz	r5, 8013f04 <rcl_action_send_result_request+0x64>
 8013ede:	b18e      	cbz	r6, 8013f04 <rcl_action_send_result_request+0x64>
 8013ee0:	6820      	ldr	r0, [r4, #0]
 8013ee2:	4632      	mov	r2, r6
 8013ee4:	4629      	mov	r1, r5
 8013ee6:	3008      	adds	r0, #8
 8013ee8:	f7fd ff96 	bl	8011e18 <rcl_send_request>
 8013eec:	3800      	subs	r0, #0
 8013eee:	bf18      	it	ne
 8013ef0:	2001      	movne	r0, #1
 8013ef2:	bd70      	pop	{r4, r5, r6, pc}
 8013ef4:	f7f7 fb0c 	bl	800b510 <rcutils_reset_error>
 8013ef8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013efc:	bd70      	pop	{r4, r5, r6, pc}
 8013efe:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f02:	bd70      	pop	{r4, r5, r6, pc}
 8013f04:	200b      	movs	r0, #11
 8013f06:	bd70      	pop	{r4, r5, r6, pc}
 8013f08:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f0c:	4770      	bx	lr
 8013f0e:	bf00      	nop

08013f10 <rcl_action_take_result_response>:
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d03a      	beq.n	8013f8a <rcl_action_take_result_response+0x7a>
 8013f14:	b570      	push	{r4, r5, r6, lr}
 8013f16:	4604      	mov	r4, r0
 8013f18:	6800      	ldr	r0, [r0, #0]
 8013f1a:	b388      	cbz	r0, 8013f80 <rcl_action_take_result_response+0x70>
 8013f1c:	460d      	mov	r5, r1
 8013f1e:	4616      	mov	r6, r2
 8013f20:	f7fd fffa 	bl	8011f18 <rcl_client_is_valid>
 8013f24:	b338      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f26:	6820      	ldr	r0, [r4, #0]
 8013f28:	3004      	adds	r0, #4
 8013f2a:	f7fd fff5 	bl	8011f18 <rcl_client_is_valid>
 8013f2e:	b310      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f30:	6820      	ldr	r0, [r4, #0]
 8013f32:	3008      	adds	r0, #8
 8013f34:	f7fd fff0 	bl	8011f18 <rcl_client_is_valid>
 8013f38:	b1e8      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f3a:	6820      	ldr	r0, [r4, #0]
 8013f3c:	300c      	adds	r0, #12
 8013f3e:	f7fe ff87 	bl	8012e50 <rcl_subscription_is_valid>
 8013f42:	b1c0      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f44:	6820      	ldr	r0, [r4, #0]
 8013f46:	3010      	adds	r0, #16
 8013f48:	f7fe ff82 	bl	8012e50 <rcl_subscription_is_valid>
 8013f4c:	b198      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f4e:	b1d5      	cbz	r5, 8013f86 <rcl_action_take_result_response+0x76>
 8013f50:	b1ce      	cbz	r6, 8013f86 <rcl_action_take_result_response+0x76>
 8013f52:	6820      	ldr	r0, [r4, #0]
 8013f54:	4632      	mov	r2, r6
 8013f56:	4629      	mov	r1, r5
 8013f58:	3008      	adds	r0, #8
 8013f5a:	f7fd ff95 	bl	8011e88 <rcl_take_response>
 8013f5e:	b148      	cbz	r0, 8013f74 <rcl_action_take_result_response+0x64>
 8013f60:	280a      	cmp	r0, #10
 8013f62:	d007      	beq.n	8013f74 <rcl_action_take_result_response+0x64>
 8013f64:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013f68:	f640 0337 	movw	r3, #2103	@ 0x837
 8013f6c:	4290      	cmp	r0, r2
 8013f6e:	bf0c      	ite	eq
 8013f70:	4618      	moveq	r0, r3
 8013f72:	2001      	movne	r0, #1
 8013f74:	bd70      	pop	{r4, r5, r6, pc}
 8013f76:	f7f7 facb 	bl	800b510 <rcutils_reset_error>
 8013f7a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f7e:	bd70      	pop	{r4, r5, r6, pc}
 8013f80:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f84:	bd70      	pop	{r4, r5, r6, pc}
 8013f86:	200b      	movs	r0, #11
 8013f88:	bd70      	pop	{r4, r5, r6, pc}
 8013f8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f8e:	4770      	bx	lr

08013f90 <rcl_action_take_cancel_response>:
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d03a      	beq.n	801400a <rcl_action_take_cancel_response+0x7a>
 8013f94:	b570      	push	{r4, r5, r6, lr}
 8013f96:	4604      	mov	r4, r0
 8013f98:	6800      	ldr	r0, [r0, #0]
 8013f9a:	b388      	cbz	r0, 8014000 <rcl_action_take_cancel_response+0x70>
 8013f9c:	460d      	mov	r5, r1
 8013f9e:	4616      	mov	r6, r2
 8013fa0:	f7fd ffba 	bl	8011f18 <rcl_client_is_valid>
 8013fa4:	b338      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fa6:	6820      	ldr	r0, [r4, #0]
 8013fa8:	3004      	adds	r0, #4
 8013faa:	f7fd ffb5 	bl	8011f18 <rcl_client_is_valid>
 8013fae:	b310      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fb0:	6820      	ldr	r0, [r4, #0]
 8013fb2:	3008      	adds	r0, #8
 8013fb4:	f7fd ffb0 	bl	8011f18 <rcl_client_is_valid>
 8013fb8:	b1e8      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fba:	6820      	ldr	r0, [r4, #0]
 8013fbc:	300c      	adds	r0, #12
 8013fbe:	f7fe ff47 	bl	8012e50 <rcl_subscription_is_valid>
 8013fc2:	b1c0      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fc4:	6820      	ldr	r0, [r4, #0]
 8013fc6:	3010      	adds	r0, #16
 8013fc8:	f7fe ff42 	bl	8012e50 <rcl_subscription_is_valid>
 8013fcc:	b198      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fce:	b1d5      	cbz	r5, 8014006 <rcl_action_take_cancel_response+0x76>
 8013fd0:	b1ce      	cbz	r6, 8014006 <rcl_action_take_cancel_response+0x76>
 8013fd2:	6820      	ldr	r0, [r4, #0]
 8013fd4:	4632      	mov	r2, r6
 8013fd6:	4629      	mov	r1, r5
 8013fd8:	3004      	adds	r0, #4
 8013fda:	f7fd ff55 	bl	8011e88 <rcl_take_response>
 8013fde:	b148      	cbz	r0, 8013ff4 <rcl_action_take_cancel_response+0x64>
 8013fe0:	280a      	cmp	r0, #10
 8013fe2:	d007      	beq.n	8013ff4 <rcl_action_take_cancel_response+0x64>
 8013fe4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013fe8:	f640 0337 	movw	r3, #2103	@ 0x837
 8013fec:	4290      	cmp	r0, r2
 8013fee:	bf0c      	ite	eq
 8013ff0:	4618      	moveq	r0, r3
 8013ff2:	2001      	movne	r0, #1
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}
 8013ff6:	f7f7 fa8b 	bl	800b510 <rcutils_reset_error>
 8013ffa:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ffe:	bd70      	pop	{r4, r5, r6, pc}
 8014000:	f640 0036 	movw	r0, #2102	@ 0x836
 8014004:	bd70      	pop	{r4, r5, r6, pc}
 8014006:	200b      	movs	r0, #11
 8014008:	bd70      	pop	{r4, r5, r6, pc}
 801400a:	f640 0036 	movw	r0, #2102	@ 0x836
 801400e:	4770      	bx	lr

08014010 <rcl_action_take_feedback>:
 8014010:	2800      	cmp	r0, #0
 8014012:	d038      	beq.n	8014086 <rcl_action_take_feedback+0x76>
 8014014:	b530      	push	{r4, r5, lr}
 8014016:	4604      	mov	r4, r0
 8014018:	6800      	ldr	r0, [r0, #0]
 801401a:	b091      	sub	sp, #68	@ 0x44
 801401c:	b378      	cbz	r0, 801407e <rcl_action_take_feedback+0x6e>
 801401e:	460d      	mov	r5, r1
 8014020:	f7fd ff7a 	bl	8011f18 <rcl_client_is_valid>
 8014024:	b328      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 8014026:	6820      	ldr	r0, [r4, #0]
 8014028:	3004      	adds	r0, #4
 801402a:	f7fd ff75 	bl	8011f18 <rcl_client_is_valid>
 801402e:	b300      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 8014030:	6820      	ldr	r0, [r4, #0]
 8014032:	3008      	adds	r0, #8
 8014034:	f7fd ff70 	bl	8011f18 <rcl_client_is_valid>
 8014038:	b1d8      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 801403a:	6820      	ldr	r0, [r4, #0]
 801403c:	300c      	adds	r0, #12
 801403e:	f7fe ff07 	bl	8012e50 <rcl_subscription_is_valid>
 8014042:	b1b0      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 8014044:	6820      	ldr	r0, [r4, #0]
 8014046:	3010      	adds	r0, #16
 8014048:	f7fe ff02 	bl	8012e50 <rcl_subscription_is_valid>
 801404c:	b188      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 801404e:	b1ed      	cbz	r5, 801408c <rcl_action_take_feedback+0x7c>
 8014050:	6820      	ldr	r0, [r4, #0]
 8014052:	2300      	movs	r3, #0
 8014054:	466a      	mov	r2, sp
 8014056:	4629      	mov	r1, r5
 8014058:	300c      	adds	r0, #12
 801405a:	f7fe fe9b 	bl	8012d94 <rcl_take>
 801405e:	b160      	cbz	r0, 801407a <rcl_action_take_feedback+0x6a>
 8014060:	f240 1391 	movw	r3, #401	@ 0x191
 8014064:	4298      	cmp	r0, r3
 8014066:	d014      	beq.n	8014092 <rcl_action_take_feedback+0x82>
 8014068:	280a      	cmp	r0, #10
 801406a:	bf18      	it	ne
 801406c:	2001      	movne	r0, #1
 801406e:	b011      	add	sp, #68	@ 0x44
 8014070:	bd30      	pop	{r4, r5, pc}
 8014072:	f7f7 fa4d 	bl	800b510 <rcutils_reset_error>
 8014076:	f640 0036 	movw	r0, #2102	@ 0x836
 801407a:	b011      	add	sp, #68	@ 0x44
 801407c:	bd30      	pop	{r4, r5, pc}
 801407e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014082:	b011      	add	sp, #68	@ 0x44
 8014084:	bd30      	pop	{r4, r5, pc}
 8014086:	f640 0036 	movw	r0, #2102	@ 0x836
 801408a:	4770      	bx	lr
 801408c:	200b      	movs	r0, #11
 801408e:	b011      	add	sp, #68	@ 0x44
 8014090:	bd30      	pop	{r4, r5, pc}
 8014092:	f640 0037 	movw	r0, #2103	@ 0x837
 8014096:	e7f0      	b.n	801407a <rcl_action_take_feedback+0x6a>

08014098 <rcl_action_wait_set_add_action_client>:
 8014098:	2800      	cmp	r0, #0
 801409a:	d048      	beq.n	801412e <rcl_action_wait_set_add_action_client+0x96>
 801409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409e:	460c      	mov	r4, r1
 80140a0:	2900      	cmp	r1, #0
 80140a2:	d03c      	beq.n	801411e <rcl_action_wait_set_add_action_client+0x86>
 80140a4:	4605      	mov	r5, r0
 80140a6:	6808      	ldr	r0, [r1, #0]
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d038      	beq.n	801411e <rcl_action_wait_set_add_action_client+0x86>
 80140ac:	4617      	mov	r7, r2
 80140ae:	461e      	mov	r6, r3
 80140b0:	f7fd ff32 	bl	8011f18 <rcl_client_is_valid>
 80140b4:	b3b0      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140b6:	6820      	ldr	r0, [r4, #0]
 80140b8:	3004      	adds	r0, #4
 80140ba:	f7fd ff2d 	bl	8011f18 <rcl_client_is_valid>
 80140be:	b388      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140c0:	6820      	ldr	r0, [r4, #0]
 80140c2:	3008      	adds	r0, #8
 80140c4:	f7fd ff28 	bl	8011f18 <rcl_client_is_valid>
 80140c8:	b360      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140ca:	6820      	ldr	r0, [r4, #0]
 80140cc:	300c      	adds	r0, #12
 80140ce:	f7fe febf 	bl	8012e50 <rcl_subscription_is_valid>
 80140d2:	b338      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140d4:	6820      	ldr	r0, [r4, #0]
 80140d6:	3010      	adds	r0, #16
 80140d8:	f7fe feba 	bl	8012e50 <rcl_subscription_is_valid>
 80140dc:	b310      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140de:	6821      	ldr	r1, [r4, #0]
 80140e0:	4628      	mov	r0, r5
 80140e2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80140e6:	f7ff fccd 	bl	8013a84 <rcl_wait_set_add_client>
 80140ea:	b9b8      	cbnz	r0, 801411c <rcl_action_wait_set_add_action_client+0x84>
 80140ec:	6821      	ldr	r1, [r4, #0]
 80140ee:	4628      	mov	r0, r5
 80140f0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80140f4:	3104      	adds	r1, #4
 80140f6:	f7ff fcc5 	bl	8013a84 <rcl_wait_set_add_client>
 80140fa:	b978      	cbnz	r0, 801411c <rcl_action_wait_set_add_action_client+0x84>
 80140fc:	6821      	ldr	r1, [r4, #0]
 80140fe:	4628      	mov	r0, r5
 8014100:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014104:	3108      	adds	r1, #8
 8014106:	f7ff fcbd 	bl	8013a84 <rcl_wait_set_add_client>
 801410a:	b938      	cbnz	r0, 801411c <rcl_action_wait_set_add_action_client+0x84>
 801410c:	6821      	ldr	r1, [r4, #0]
 801410e:	4628      	mov	r0, r5
 8014110:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014114:	310c      	adds	r1, #12
 8014116:	f7ff f96d 	bl	80133f4 <rcl_wait_set_add_subscription>
 801411a:	b158      	cbz	r0, 8014134 <rcl_action_wait_set_add_action_client+0x9c>
 801411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801411e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014124:	f7f7 f9f4 	bl	800b510 <rcutils_reset_error>
 8014128:	f640 0036 	movw	r0, #2102	@ 0x836
 801412c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801412e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014132:	4770      	bx	lr
 8014134:	6821      	ldr	r1, [r4, #0]
 8014136:	4628      	mov	r0, r5
 8014138:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801413c:	3110      	adds	r1, #16
 801413e:	f7ff f959 	bl	80133f4 <rcl_wait_set_add_subscription>
 8014142:	2800      	cmp	r0, #0
 8014144:	d1ea      	bne.n	801411c <rcl_action_wait_set_add_action_client+0x84>
 8014146:	b11f      	cbz	r7, 8014150 <rcl_action_wait_set_add_action_client+0xb8>
 8014148:	6823      	ldr	r3, [r4, #0]
 801414a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801414e:	603b      	str	r3, [r7, #0]
 8014150:	2e00      	cmp	r6, #0
 8014152:	d0e3      	beq.n	801411c <rcl_action_wait_set_add_action_client+0x84>
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801415a:	6033      	str	r3, [r6, #0]
 801415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801415e:	bf00      	nop

08014160 <rcl_action_client_wait_set_get_entities_ready>:
 8014160:	2800      	cmp	r0, #0
 8014162:	f000 808d 	beq.w	8014280 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8014166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801416a:	460c      	mov	r4, r1
 801416c:	2900      	cmp	r1, #0
 801416e:	d077      	beq.n	8014260 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014170:	4605      	mov	r5, r0
 8014172:	6808      	ldr	r0, [r1, #0]
 8014174:	2800      	cmp	r0, #0
 8014176:	d073      	beq.n	8014260 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014178:	4616      	mov	r6, r2
 801417a:	461f      	mov	r7, r3
 801417c:	f7fd fecc 	bl	8011f18 <rcl_client_is_valid>
 8014180:	2800      	cmp	r0, #0
 8014182:	d071      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014184:	6820      	ldr	r0, [r4, #0]
 8014186:	3004      	adds	r0, #4
 8014188:	f7fd fec6 	bl	8011f18 <rcl_client_is_valid>
 801418c:	2800      	cmp	r0, #0
 801418e:	d06b      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014190:	6820      	ldr	r0, [r4, #0]
 8014192:	3008      	adds	r0, #8
 8014194:	f7fd fec0 	bl	8011f18 <rcl_client_is_valid>
 8014198:	2800      	cmp	r0, #0
 801419a:	d065      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801419c:	6820      	ldr	r0, [r4, #0]
 801419e:	300c      	adds	r0, #12
 80141a0:	f7fe fe56 	bl	8012e50 <rcl_subscription_is_valid>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d05f      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80141a8:	6820      	ldr	r0, [r4, #0]
 80141aa:	3010      	adds	r0, #16
 80141ac:	f7fe fe50 	bl	8012e50 <rcl_subscription_is_valid>
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d059      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80141b4:	2e00      	cmp	r6, #0
 80141b6:	d060      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141b8:	2f00      	cmp	r7, #0
 80141ba:	d05e      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141bc:	9b06      	ldr	r3, [sp, #24]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d05b      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141c2:	9b07      	ldr	r3, [sp, #28]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d058      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141c8:	9b08      	ldr	r3, [sp, #32]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d055      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141ce:	6823      	ldr	r3, [r4, #0]
 80141d0:	686a      	ldr	r2, [r5, #4]
 80141d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80141d6:	428a      	cmp	r2, r1
 80141d8:	d94c      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141da:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80141de:	4282      	cmp	r2, r0
 80141e0:	d948      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141e2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80141e6:	69ea      	ldr	r2, [r5, #28]
 80141e8:	42a2      	cmp	r2, r4
 80141ea:	d943      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141ec:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80141f0:	4562      	cmp	r2, ip
 80141f2:	d93f      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141f4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80141f8:	4572      	cmp	r2, lr
 80141fa:	d93b      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141fc:	69aa      	ldr	r2, [r5, #24]
 80141fe:	682d      	ldr	r5, [r5, #0]
 8014200:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014204:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014208:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801420c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014210:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014214:	f103 0c0c 	add.w	ip, r3, #12
 8014218:	eba5 050c 	sub.w	r5, r5, ip
 801421c:	fab5 f585 	clz	r5, r5
 8014220:	096d      	lsrs	r5, r5, #5
 8014222:	7035      	strb	r5, [r6, #0]
 8014224:	f103 0510 	add.w	r5, r3, #16
 8014228:	1b64      	subs	r4, r4, r5
 801422a:	fab4 f484 	clz	r4, r4
 801422e:	0964      	lsrs	r4, r4, #5
 8014230:	703c      	strb	r4, [r7, #0]
 8014232:	eba3 0008 	sub.w	r0, r3, r8
 8014236:	1d1c      	adds	r4, r3, #4
 8014238:	3308      	adds	r3, #8
 801423a:	1ad3      	subs	r3, r2, r3
 801423c:	fab0 f080 	clz	r0, r0
 8014240:	9a06      	ldr	r2, [sp, #24]
 8014242:	0940      	lsrs	r0, r0, #5
 8014244:	1b09      	subs	r1, r1, r4
 8014246:	7010      	strb	r0, [r2, #0]
 8014248:	fab1 f181 	clz	r1, r1
 801424c:	9a07      	ldr	r2, [sp, #28]
 801424e:	0949      	lsrs	r1, r1, #5
 8014250:	7011      	strb	r1, [r2, #0]
 8014252:	fab3 f383 	clz	r3, r3
 8014256:	9a08      	ldr	r2, [sp, #32]
 8014258:	095b      	lsrs	r3, r3, #5
 801425a:	2000      	movs	r0, #0
 801425c:	7013      	strb	r3, [r2, #0]
 801425e:	e001      	b.n	8014264 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014260:	f640 0036 	movw	r0, #2102	@ 0x836
 8014264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014268:	f7f7 f952 	bl	800b510 <rcutils_reset_error>
 801426c:	f640 0036 	movw	r0, #2102	@ 0x836
 8014270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014274:	2001      	movs	r0, #1
 8014276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801427a:	200b      	movs	r0, #11
 801427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014280:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014284:	4770      	bx	lr
 8014286:	bf00      	nop

08014288 <rcl_action_take_goal_request>:
 8014288:	2800      	cmp	r0, #0
 801428a:	d039      	beq.n	8014300 <rcl_action_take_goal_request+0x78>
 801428c:	b570      	push	{r4, r5, r6, lr}
 801428e:	4604      	mov	r4, r0
 8014290:	6800      	ldr	r0, [r0, #0]
 8014292:	b380      	cbz	r0, 80142f6 <rcl_action_take_goal_request+0x6e>
 8014294:	460d      	mov	r5, r1
 8014296:	4616      	mov	r6, r2
 8014298:	f7fe fc96 	bl	8012bc8 <rcl_service_is_valid>
 801429c:	b330      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 801429e:	6820      	ldr	r0, [r4, #0]
 80142a0:	3004      	adds	r0, #4
 80142a2:	f7fe fc91 	bl	8012bc8 <rcl_service_is_valid>
 80142a6:	b308      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142a8:	6820      	ldr	r0, [r4, #0]
 80142aa:	3008      	adds	r0, #8
 80142ac:	f7fe fc8c 	bl	8012bc8 <rcl_service_is_valid>
 80142b0:	b1e0      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142b2:	6820      	ldr	r0, [r4, #0]
 80142b4:	300c      	adds	r0, #12
 80142b6:	f7f6 f999 	bl	800a5ec <rcl_publisher_is_valid>
 80142ba:	b1b8      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142bc:	6820      	ldr	r0, [r4, #0]
 80142be:	3010      	adds	r0, #16
 80142c0:	f7f6 f994 	bl	800a5ec <rcl_publisher_is_valid>
 80142c4:	b190      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142c6:	b1cd      	cbz	r5, 80142fc <rcl_action_take_goal_request+0x74>
 80142c8:	b1c6      	cbz	r6, 80142fc <rcl_action_take_goal_request+0x74>
 80142ca:	6820      	ldr	r0, [r4, #0]
 80142cc:	4632      	mov	r2, r6
 80142ce:	4629      	mov	r1, r5
 80142d0:	f7fe fc22 	bl	8012b18 <rcl_take_request>
 80142d4:	b148      	cbz	r0, 80142ea <rcl_action_take_goal_request+0x62>
 80142d6:	280a      	cmp	r0, #10
 80142d8:	d007      	beq.n	80142ea <rcl_action_take_goal_request+0x62>
 80142da:	f240 2259 	movw	r2, #601	@ 0x259
 80142de:	f640 0399 	movw	r3, #2201	@ 0x899
 80142e2:	4290      	cmp	r0, r2
 80142e4:	bf0c      	ite	eq
 80142e6:	4618      	moveq	r0, r3
 80142e8:	2001      	movne	r0, #1
 80142ea:	bd70      	pop	{r4, r5, r6, pc}
 80142ec:	f7f7 f910 	bl	800b510 <rcutils_reset_error>
 80142f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80142f4:	bd70      	pop	{r4, r5, r6, pc}
 80142f6:	f640 0098 	movw	r0, #2200	@ 0x898
 80142fa:	bd70      	pop	{r4, r5, r6, pc}
 80142fc:	200b      	movs	r0, #11
 80142fe:	bd70      	pop	{r4, r5, r6, pc}
 8014300:	f640 0098 	movw	r0, #2200	@ 0x898
 8014304:	4770      	bx	lr
 8014306:	bf00      	nop

08014308 <rcl_action_send_goal_response>:
 8014308:	b390      	cbz	r0, 8014370 <rcl_action_send_goal_response+0x68>
 801430a:	b570      	push	{r4, r5, r6, lr}
 801430c:	4604      	mov	r4, r0
 801430e:	6800      	ldr	r0, [r0, #0]
 8014310:	b348      	cbz	r0, 8014366 <rcl_action_send_goal_response+0x5e>
 8014312:	460d      	mov	r5, r1
 8014314:	4616      	mov	r6, r2
 8014316:	f7fe fc57 	bl	8012bc8 <rcl_service_is_valid>
 801431a:	b1f8      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 801431c:	6820      	ldr	r0, [r4, #0]
 801431e:	3004      	adds	r0, #4
 8014320:	f7fe fc52 	bl	8012bc8 <rcl_service_is_valid>
 8014324:	b1d0      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 8014326:	6820      	ldr	r0, [r4, #0]
 8014328:	3008      	adds	r0, #8
 801432a:	f7fe fc4d 	bl	8012bc8 <rcl_service_is_valid>
 801432e:	b1a8      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 8014330:	6820      	ldr	r0, [r4, #0]
 8014332:	300c      	adds	r0, #12
 8014334:	f7f6 f95a 	bl	800a5ec <rcl_publisher_is_valid>
 8014338:	b180      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 801433a:	6820      	ldr	r0, [r4, #0]
 801433c:	3010      	adds	r0, #16
 801433e:	f7f6 f955 	bl	800a5ec <rcl_publisher_is_valid>
 8014342:	b158      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 8014344:	b195      	cbz	r5, 801436c <rcl_action_send_goal_response+0x64>
 8014346:	b18e      	cbz	r6, 801436c <rcl_action_send_goal_response+0x64>
 8014348:	6820      	ldr	r0, [r4, #0]
 801434a:	4632      	mov	r2, r6
 801434c:	4629      	mov	r1, r5
 801434e:	f7fe fc23 	bl	8012b98 <rcl_send_response>
 8014352:	b110      	cbz	r0, 801435a <rcl_action_send_goal_response+0x52>
 8014354:	2802      	cmp	r0, #2
 8014356:	bf18      	it	ne
 8014358:	2001      	movne	r0, #1
 801435a:	bd70      	pop	{r4, r5, r6, pc}
 801435c:	f7f7 f8d8 	bl	800b510 <rcutils_reset_error>
 8014360:	f640 0098 	movw	r0, #2200	@ 0x898
 8014364:	bd70      	pop	{r4, r5, r6, pc}
 8014366:	f640 0098 	movw	r0, #2200	@ 0x898
 801436a:	bd70      	pop	{r4, r5, r6, pc}
 801436c:	200b      	movs	r0, #11
 801436e:	bd70      	pop	{r4, r5, r6, pc}
 8014370:	f640 0098 	movw	r0, #2200	@ 0x898
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop

08014378 <rcl_action_take_result_request>:
 8014378:	2800      	cmp	r0, #0
 801437a:	d03a      	beq.n	80143f2 <rcl_action_take_result_request+0x7a>
 801437c:	b570      	push	{r4, r5, r6, lr}
 801437e:	4604      	mov	r4, r0
 8014380:	6800      	ldr	r0, [r0, #0]
 8014382:	b388      	cbz	r0, 80143e8 <rcl_action_take_result_request+0x70>
 8014384:	460d      	mov	r5, r1
 8014386:	4616      	mov	r6, r2
 8014388:	f7fe fc1e 	bl	8012bc8 <rcl_service_is_valid>
 801438c:	b338      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 801438e:	6820      	ldr	r0, [r4, #0]
 8014390:	3004      	adds	r0, #4
 8014392:	f7fe fc19 	bl	8012bc8 <rcl_service_is_valid>
 8014396:	b310      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 8014398:	6820      	ldr	r0, [r4, #0]
 801439a:	3008      	adds	r0, #8
 801439c:	f7fe fc14 	bl	8012bc8 <rcl_service_is_valid>
 80143a0:	b1e8      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 80143a2:	6820      	ldr	r0, [r4, #0]
 80143a4:	300c      	adds	r0, #12
 80143a6:	f7f6 f921 	bl	800a5ec <rcl_publisher_is_valid>
 80143aa:	b1c0      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 80143ac:	6820      	ldr	r0, [r4, #0]
 80143ae:	3010      	adds	r0, #16
 80143b0:	f7f6 f91c 	bl	800a5ec <rcl_publisher_is_valid>
 80143b4:	b198      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 80143b6:	b1d5      	cbz	r5, 80143ee <rcl_action_take_result_request+0x76>
 80143b8:	b1ce      	cbz	r6, 80143ee <rcl_action_take_result_request+0x76>
 80143ba:	6820      	ldr	r0, [r4, #0]
 80143bc:	4632      	mov	r2, r6
 80143be:	4629      	mov	r1, r5
 80143c0:	3008      	adds	r0, #8
 80143c2:	f7fe fba9 	bl	8012b18 <rcl_take_request>
 80143c6:	b148      	cbz	r0, 80143dc <rcl_action_take_result_request+0x64>
 80143c8:	280a      	cmp	r0, #10
 80143ca:	d007      	beq.n	80143dc <rcl_action_take_result_request+0x64>
 80143cc:	f240 2259 	movw	r2, #601	@ 0x259
 80143d0:	f640 0399 	movw	r3, #2201	@ 0x899
 80143d4:	4290      	cmp	r0, r2
 80143d6:	bf0c      	ite	eq
 80143d8:	4618      	moveq	r0, r3
 80143da:	2001      	movne	r0, #1
 80143dc:	bd70      	pop	{r4, r5, r6, pc}
 80143de:	f7f7 f897 	bl	800b510 <rcutils_reset_error>
 80143e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143e6:	bd70      	pop	{r4, r5, r6, pc}
 80143e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80143ec:	bd70      	pop	{r4, r5, r6, pc}
 80143ee:	200b      	movs	r0, #11
 80143f0:	bd70      	pop	{r4, r5, r6, pc}
 80143f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143f6:	4770      	bx	lr

080143f8 <rcl_action_take_cancel_request>:
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d03a      	beq.n	8014472 <rcl_action_take_cancel_request+0x7a>
 80143fc:	b570      	push	{r4, r5, r6, lr}
 80143fe:	4604      	mov	r4, r0
 8014400:	6800      	ldr	r0, [r0, #0]
 8014402:	b388      	cbz	r0, 8014468 <rcl_action_take_cancel_request+0x70>
 8014404:	460d      	mov	r5, r1
 8014406:	4616      	mov	r6, r2
 8014408:	f7fe fbde 	bl	8012bc8 <rcl_service_is_valid>
 801440c:	b338      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 801440e:	6820      	ldr	r0, [r4, #0]
 8014410:	3004      	adds	r0, #4
 8014412:	f7fe fbd9 	bl	8012bc8 <rcl_service_is_valid>
 8014416:	b310      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 8014418:	6820      	ldr	r0, [r4, #0]
 801441a:	3008      	adds	r0, #8
 801441c:	f7fe fbd4 	bl	8012bc8 <rcl_service_is_valid>
 8014420:	b1e8      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 8014422:	6820      	ldr	r0, [r4, #0]
 8014424:	300c      	adds	r0, #12
 8014426:	f7f6 f8e1 	bl	800a5ec <rcl_publisher_is_valid>
 801442a:	b1c0      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 801442c:	6820      	ldr	r0, [r4, #0]
 801442e:	3010      	adds	r0, #16
 8014430:	f7f6 f8dc 	bl	800a5ec <rcl_publisher_is_valid>
 8014434:	b198      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 8014436:	b1d5      	cbz	r5, 801446e <rcl_action_take_cancel_request+0x76>
 8014438:	b1ce      	cbz	r6, 801446e <rcl_action_take_cancel_request+0x76>
 801443a:	6820      	ldr	r0, [r4, #0]
 801443c:	4632      	mov	r2, r6
 801443e:	4629      	mov	r1, r5
 8014440:	3004      	adds	r0, #4
 8014442:	f7fe fb69 	bl	8012b18 <rcl_take_request>
 8014446:	b148      	cbz	r0, 801445c <rcl_action_take_cancel_request+0x64>
 8014448:	280a      	cmp	r0, #10
 801444a:	d007      	beq.n	801445c <rcl_action_take_cancel_request+0x64>
 801444c:	f240 2259 	movw	r2, #601	@ 0x259
 8014450:	f640 0399 	movw	r3, #2201	@ 0x899
 8014454:	4290      	cmp	r0, r2
 8014456:	bf0c      	ite	eq
 8014458:	4618      	moveq	r0, r3
 801445a:	2001      	movne	r0, #1
 801445c:	bd70      	pop	{r4, r5, r6, pc}
 801445e:	f7f7 f857 	bl	800b510 <rcutils_reset_error>
 8014462:	f640 0098 	movw	r0, #2200	@ 0x898
 8014466:	bd70      	pop	{r4, r5, r6, pc}
 8014468:	f640 0098 	movw	r0, #2200	@ 0x898
 801446c:	bd70      	pop	{r4, r5, r6, pc}
 801446e:	200b      	movs	r0, #11
 8014470:	bd70      	pop	{r4, r5, r6, pc}
 8014472:	f640 0098 	movw	r0, #2200	@ 0x898
 8014476:	4770      	bx	lr

08014478 <rcl_action_send_cancel_response>:
 8014478:	b398      	cbz	r0, 80144e2 <rcl_action_send_cancel_response+0x6a>
 801447a:	b570      	push	{r4, r5, r6, lr}
 801447c:	4604      	mov	r4, r0
 801447e:	6800      	ldr	r0, [r0, #0]
 8014480:	b350      	cbz	r0, 80144d8 <rcl_action_send_cancel_response+0x60>
 8014482:	460d      	mov	r5, r1
 8014484:	4616      	mov	r6, r2
 8014486:	f7fe fb9f 	bl	8012bc8 <rcl_service_is_valid>
 801448a:	b300      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 801448c:	6820      	ldr	r0, [r4, #0]
 801448e:	3004      	adds	r0, #4
 8014490:	f7fe fb9a 	bl	8012bc8 <rcl_service_is_valid>
 8014494:	b1d8      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 8014496:	6820      	ldr	r0, [r4, #0]
 8014498:	3008      	adds	r0, #8
 801449a:	f7fe fb95 	bl	8012bc8 <rcl_service_is_valid>
 801449e:	b1b0      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 80144a0:	6820      	ldr	r0, [r4, #0]
 80144a2:	300c      	adds	r0, #12
 80144a4:	f7f6 f8a2 	bl	800a5ec <rcl_publisher_is_valid>
 80144a8:	b188      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 80144aa:	6820      	ldr	r0, [r4, #0]
 80144ac:	3010      	adds	r0, #16
 80144ae:	f7f6 f89d 	bl	800a5ec <rcl_publisher_is_valid>
 80144b2:	b160      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 80144b4:	b19d      	cbz	r5, 80144de <rcl_action_send_cancel_response+0x66>
 80144b6:	b196      	cbz	r6, 80144de <rcl_action_send_cancel_response+0x66>
 80144b8:	6820      	ldr	r0, [r4, #0]
 80144ba:	4632      	mov	r2, r6
 80144bc:	4629      	mov	r1, r5
 80144be:	3004      	adds	r0, #4
 80144c0:	f7fe fb6a 	bl	8012b98 <rcl_send_response>
 80144c4:	b110      	cbz	r0, 80144cc <rcl_action_send_cancel_response+0x54>
 80144c6:	2802      	cmp	r0, #2
 80144c8:	bf18      	it	ne
 80144ca:	2001      	movne	r0, #1
 80144cc:	bd70      	pop	{r4, r5, r6, pc}
 80144ce:	f7f7 f81f 	bl	800b510 <rcutils_reset_error>
 80144d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80144d6:	bd70      	pop	{r4, r5, r6, pc}
 80144d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80144dc:	bd70      	pop	{r4, r5, r6, pc}
 80144de:	200b      	movs	r0, #11
 80144e0:	bd70      	pop	{r4, r5, r6, pc}
 80144e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80144e6:	4770      	bx	lr

080144e8 <rcl_action_wait_set_add_action_server>:
 80144e8:	2800      	cmp	r0, #0
 80144ea:	d04d      	beq.n	8014588 <rcl_action_wait_set_add_action_server+0xa0>
 80144ec:	b570      	push	{r4, r5, r6, lr}
 80144ee:	460c      	mov	r4, r1
 80144f0:	b159      	cbz	r1, 801450a <rcl_action_wait_set_add_action_server+0x22>
 80144f2:	4605      	mov	r5, r0
 80144f4:	6808      	ldr	r0, [r1, #0]
 80144f6:	b140      	cbz	r0, 801450a <rcl_action_wait_set_add_action_server+0x22>
 80144f8:	4616      	mov	r6, r2
 80144fa:	f7fe fb65 	bl	8012bc8 <rcl_service_is_valid>
 80144fe:	b120      	cbz	r0, 801450a <rcl_action_wait_set_add_action_server+0x22>
 8014500:	6820      	ldr	r0, [r4, #0]
 8014502:	3004      	adds	r0, #4
 8014504:	f7fe fb60 	bl	8012bc8 <rcl_service_is_valid>
 8014508:	b910      	cbnz	r0, 8014510 <rcl_action_wait_set_add_action_server+0x28>
 801450a:	f640 0098 	movw	r0, #2200	@ 0x898
 801450e:	bd70      	pop	{r4, r5, r6, pc}
 8014510:	6820      	ldr	r0, [r4, #0]
 8014512:	3008      	adds	r0, #8
 8014514:	f7fe fb58 	bl	8012bc8 <rcl_service_is_valid>
 8014518:	2800      	cmp	r0, #0
 801451a:	d0f6      	beq.n	801450a <rcl_action_wait_set_add_action_server+0x22>
 801451c:	6820      	ldr	r0, [r4, #0]
 801451e:	300c      	adds	r0, #12
 8014520:	f7f6 f87c 	bl	800a61c <rcl_publisher_is_valid_except_context>
 8014524:	2800      	cmp	r0, #0
 8014526:	d0f0      	beq.n	801450a <rcl_action_wait_set_add_action_server+0x22>
 8014528:	6820      	ldr	r0, [r4, #0]
 801452a:	3010      	adds	r0, #16
 801452c:	f7f6 f876 	bl	800a61c <rcl_publisher_is_valid_except_context>
 8014530:	2800      	cmp	r0, #0
 8014532:	d0ea      	beq.n	801450a <rcl_action_wait_set_add_action_server+0x22>
 8014534:	6821      	ldr	r1, [r4, #0]
 8014536:	4628      	mov	r0, r5
 8014538:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801453c:	f7ff face 	bl	8013adc <rcl_wait_set_add_service>
 8014540:	2800      	cmp	r0, #0
 8014542:	d1e4      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 8014544:	6821      	ldr	r1, [r4, #0]
 8014546:	4628      	mov	r0, r5
 8014548:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801454c:	3104      	adds	r1, #4
 801454e:	f7ff fac5 	bl	8013adc <rcl_wait_set_add_service>
 8014552:	2800      	cmp	r0, #0
 8014554:	d1db      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 8014556:	6821      	ldr	r1, [r4, #0]
 8014558:	4628      	mov	r0, r5
 801455a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801455e:	3108      	adds	r1, #8
 8014560:	f7ff fabc 	bl	8013adc <rcl_wait_set_add_service>
 8014564:	2800      	cmp	r0, #0
 8014566:	d1d2      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 8014568:	6821      	ldr	r1, [r4, #0]
 801456a:	4628      	mov	r0, r5
 801456c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014570:	3114      	adds	r1, #20
 8014572:	f7ff fa57 	bl	8013a24 <rcl_wait_set_add_timer>
 8014576:	2800      	cmp	r0, #0
 8014578:	d1c9      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 801457a:	2e00      	cmp	r6, #0
 801457c:	d0c7      	beq.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8014584:	6033      	str	r3, [r6, #0]
 8014586:	bd70      	pop	{r4, r5, r6, pc}
 8014588:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop

08014590 <rcl_action_server_wait_set_get_entities_ready>:
 8014590:	2800      	cmp	r0, #0
 8014592:	d05a      	beq.n	801464a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8014594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014596:	460c      	mov	r4, r1
 8014598:	b161      	cbz	r1, 80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801459a:	4605      	mov	r5, r0
 801459c:	6808      	ldr	r0, [r1, #0]
 801459e:	b148      	cbz	r0, 80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145a0:	4616      	mov	r6, r2
 80145a2:	461f      	mov	r7, r3
 80145a4:	f7fe fb10 	bl	8012bc8 <rcl_service_is_valid>
 80145a8:	b120      	cbz	r0, 80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145aa:	6820      	ldr	r0, [r4, #0]
 80145ac:	3004      	adds	r0, #4
 80145ae:	f7fe fb0b 	bl	8012bc8 <rcl_service_is_valid>
 80145b2:	b910      	cbnz	r0, 80145ba <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80145b4:	f640 0098 	movw	r0, #2200	@ 0x898
 80145b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ba:	6820      	ldr	r0, [r4, #0]
 80145bc:	3008      	adds	r0, #8
 80145be:	f7fe fb03 	bl	8012bc8 <rcl_service_is_valid>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d0f6      	beq.n	80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145c6:	6820      	ldr	r0, [r4, #0]
 80145c8:	300c      	adds	r0, #12
 80145ca:	f7f6 f827 	bl	800a61c <rcl_publisher_is_valid_except_context>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d0f0      	beq.n	80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145d2:	6820      	ldr	r0, [r4, #0]
 80145d4:	3010      	adds	r0, #16
 80145d6:	f7f6 f821 	bl	800a61c <rcl_publisher_is_valid_except_context>
 80145da:	2800      	cmp	r0, #0
 80145dc:	d0ea      	beq.n	80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145de:	b3be      	cbz	r6, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145e0:	b3b7      	cbz	r7, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145e2:	9b06      	ldr	r3, [sp, #24]
 80145e4:	b3a3      	cbz	r3, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145e6:	9b07      	ldr	r3, [sp, #28]
 80145e8:	b393      	cbz	r3, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145ea:	6821      	ldr	r1, [r4, #0]
 80145ec:	692a      	ldr	r2, [r5, #16]
 80145ee:	6a2c      	ldr	r4, [r5, #32]
 80145f0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80145f4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80145f8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80145fc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014600:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8014604:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014608:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801460c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014610:	1a64      	subs	r4, r4, r1
 8014612:	fab4 f484 	clz	r4, r4
 8014616:	0964      	lsrs	r4, r4, #5
 8014618:	7034      	strb	r4, [r6, #0]
 801461a:	1d0c      	adds	r4, r1, #4
 801461c:	1b1b      	subs	r3, r3, r4
 801461e:	fab3 f383 	clz	r3, r3
 8014622:	095b      	lsrs	r3, r3, #5
 8014624:	f101 0408 	add.w	r4, r1, #8
 8014628:	703b      	strb	r3, [r7, #0]
 801462a:	f101 0314 	add.w	r3, r1, #20
 801462e:	1b01      	subs	r1, r0, r4
 8014630:	1ad3      	subs	r3, r2, r3
 8014632:	fab1 f181 	clz	r1, r1
 8014636:	9a06      	ldr	r2, [sp, #24]
 8014638:	0949      	lsrs	r1, r1, #5
 801463a:	7011      	strb	r1, [r2, #0]
 801463c:	fab3 f383 	clz	r3, r3
 8014640:	9a07      	ldr	r2, [sp, #28]
 8014642:	095b      	lsrs	r3, r3, #5
 8014644:	2000      	movs	r0, #0
 8014646:	7013      	strb	r3, [r2, #0]
 8014648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801464a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801464e:	4770      	bx	lr
 8014650:	200b      	movs	r0, #11
 8014652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014654 <_execute_event_handler>:
 8014654:	2002      	movs	r0, #2
 8014656:	4770      	bx	lr

08014658 <_cancel_goal_event_handler>:
 8014658:	2003      	movs	r0, #3
 801465a:	4770      	bx	lr

0801465c <_succeed_event_handler>:
 801465c:	2004      	movs	r0, #4
 801465e:	4770      	bx	lr

08014660 <_abort_event_handler>:
 8014660:	2006      	movs	r0, #6
 8014662:	4770      	bx	lr

08014664 <_canceled_event_handler>:
 8014664:	2005      	movs	r0, #5
 8014666:	4770      	bx	lr

08014668 <rcl_action_transition_goal_state>:
 8014668:	b2c2      	uxtb	r2, r0
 801466a:	2a06      	cmp	r2, #6
 801466c:	d80c      	bhi.n	8014688 <rcl_action_transition_goal_state+0x20>
 801466e:	2904      	cmp	r1, #4
 8014670:	d80a      	bhi.n	8014688 <rcl_action_transition_goal_state+0x20>
 8014672:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8014676:	b410      	push	{r4}
 8014678:	1853      	adds	r3, r2, r1
 801467a:	4c06      	ldr	r4, [pc, #24]	@ (8014694 <rcl_action_transition_goal_state+0x2c>)
 801467c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014680:	b123      	cbz	r3, 801468c <rcl_action_transition_goal_state+0x24>
 8014682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014686:	4718      	bx	r3
 8014688:	2000      	movs	r0, #0
 801468a:	4770      	bx	lr
 801468c:	2000      	movs	r0, #0
 801468e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014692:	4770      	bx	lr
 8014694:	0801b3a4 	.word	0x0801b3a4

08014698 <rcl_action_get_zero_initialized_cancel_response>:
 8014698:	b510      	push	{r4, lr}
 801469a:	4c07      	ldr	r4, [pc, #28]	@ (80146b8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801469c:	4686      	mov	lr, r0
 801469e:	4684      	mov	ip, r0
 80146a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146ac:	6823      	ldr	r3, [r4, #0]
 80146ae:	f8cc 3000 	str.w	r3, [ip]
 80146b2:	4670      	mov	r0, lr
 80146b4:	bd10      	pop	{r4, pc}
 80146b6:	bf00      	nop
 80146b8:	0801b430 	.word	0x0801b430

080146bc <rclc_action_send_result_request>:
 80146bc:	b1d0      	cbz	r0, 80146f4 <rclc_action_send_result_request+0x38>
 80146be:	b500      	push	{lr}
 80146c0:	4684      	mov	ip, r0
 80146c2:	b087      	sub	sp, #28
 80146c4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80146c8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80146cc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80146d0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80146d4:	f10d 0e08 	add.w	lr, sp, #8
 80146d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80146dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80146e0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80146e4:	a902      	add	r1, sp, #8
 80146e6:	3010      	adds	r0, #16
 80146e8:	f7ff fbda 	bl	8013ea0 <rcl_action_send_result_request>
 80146ec:	b920      	cbnz	r0, 80146f8 <rclc_action_send_result_request+0x3c>
 80146ee:	b007      	add	sp, #28
 80146f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80146f4:	200b      	movs	r0, #11
 80146f6:	4770      	bx	lr
 80146f8:	9001      	str	r0, [sp, #4]
 80146fa:	f7f6 ff09 	bl	800b510 <rcutils_reset_error>
 80146fe:	9801      	ldr	r0, [sp, #4]
 8014700:	b007      	add	sp, #28
 8014702:	f85d fb04 	ldr.w	pc, [sp], #4
 8014706:	bf00      	nop

08014708 <rclc_action_take_goal_handle>:
 8014708:	b160      	cbz	r0, 8014724 <rclc_action_take_goal_handle+0x1c>
 801470a:	6883      	ldr	r3, [r0, #8]
 801470c:	b143      	cbz	r3, 8014720 <rclc_action_take_goal_handle+0x18>
 801470e:	6819      	ldr	r1, [r3, #0]
 8014710:	6081      	str	r1, [r0, #8]
 8014712:	2200      	movs	r2, #0
 8014714:	721a      	strb	r2, [r3, #8]
 8014716:	68c1      	ldr	r1, [r0, #12]
 8014718:	6019      	str	r1, [r3, #0]
 801471a:	621a      	str	r2, [r3, #32]
 801471c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801471e:	60c3      	str	r3, [r0, #12]
 8014720:	4618      	mov	r0, r3
 8014722:	4770      	bx	lr
 8014724:	4603      	mov	r3, r0
 8014726:	e7fb      	b.n	8014720 <rclc_action_take_goal_handle+0x18>

08014728 <rclc_action_remove_used_goal_handle>:
 8014728:	b180      	cbz	r0, 801474c <rclc_action_remove_used_goal_handle+0x24>
 801472a:	b179      	cbz	r1, 801474c <rclc_action_remove_used_goal_handle+0x24>
 801472c:	68c3      	ldr	r3, [r0, #12]
 801472e:	4299      	cmp	r1, r3
 8014730:	d00d      	beq.n	801474e <rclc_action_remove_used_goal_handle+0x26>
 8014732:	b12b      	cbz	r3, 8014740 <rclc_action_remove_used_goal_handle+0x18>
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	4291      	cmp	r1, r2
 8014738:	d003      	beq.n	8014742 <rclc_action_remove_used_goal_handle+0x1a>
 801473a:	4613      	mov	r3, r2
 801473c:	2b00      	cmp	r3, #0
 801473e:	d1f9      	bne.n	8014734 <rclc_action_remove_used_goal_handle+0xc>
 8014740:	4770      	bx	lr
 8014742:	680a      	ldr	r2, [r1, #0]
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	6883      	ldr	r3, [r0, #8]
 8014748:	600b      	str	r3, [r1, #0]
 801474a:	6081      	str	r1, [r0, #8]
 801474c:	4770      	bx	lr
 801474e:	680b      	ldr	r3, [r1, #0]
 8014750:	60c3      	str	r3, [r0, #12]
 8014752:	e7f8      	b.n	8014746 <rclc_action_remove_used_goal_handle+0x1e>

08014754 <rclc_action_find_goal_handle_by_uuid>:
 8014754:	b538      	push	{r3, r4, r5, lr}
 8014756:	b180      	cbz	r0, 801477a <rclc_action_find_goal_handle_by_uuid+0x26>
 8014758:	460d      	mov	r5, r1
 801475a:	b181      	cbz	r1, 801477e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801475c:	68c4      	ldr	r4, [r0, #12]
 801475e:	b914      	cbnz	r4, 8014766 <rclc_action_find_goal_handle_by_uuid+0x12>
 8014760:	e009      	b.n	8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014762:	6824      	ldr	r4, [r4, #0]
 8014764:	b13c      	cbz	r4, 8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014766:	f104 0009 	add.w	r0, r4, #9
 801476a:	2210      	movs	r2, #16
 801476c:	4629      	mov	r1, r5
 801476e:	f004 ff14 	bl	801959a <memcmp>
 8014772:	2800      	cmp	r0, #0
 8014774:	d1f5      	bne.n	8014762 <rclc_action_find_goal_handle_by_uuid+0xe>
 8014776:	4620      	mov	r0, r4
 8014778:	bd38      	pop	{r3, r4, r5, pc}
 801477a:	4604      	mov	r4, r0
 801477c:	e7fb      	b.n	8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 801477e:	460c      	mov	r4, r1
 8014780:	e7f9      	b.n	8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014782:	bf00      	nop

08014784 <rclc_action_find_first_handle_by_status>:
 8014784:	b140      	cbz	r0, 8014798 <rclc_action_find_first_handle_by_status+0x14>
 8014786:	68c0      	ldr	r0, [r0, #12]
 8014788:	b910      	cbnz	r0, 8014790 <rclc_action_find_first_handle_by_status+0xc>
 801478a:	e005      	b.n	8014798 <rclc_action_find_first_handle_by_status+0x14>
 801478c:	6800      	ldr	r0, [r0, #0]
 801478e:	b118      	cbz	r0, 8014798 <rclc_action_find_first_handle_by_status+0x14>
 8014790:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014794:	428b      	cmp	r3, r1
 8014796:	d1f9      	bne.n	801478c <rclc_action_find_first_handle_by_status+0x8>
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop

0801479c <rclc_action_find_first_terminated_handle>:
 801479c:	b140      	cbz	r0, 80147b0 <rclc_action_find_first_terminated_handle+0x14>
 801479e:	68c0      	ldr	r0, [r0, #12]
 80147a0:	b910      	cbnz	r0, 80147a8 <rclc_action_find_first_terminated_handle+0xc>
 80147a2:	e005      	b.n	80147b0 <rclc_action_find_first_terminated_handle+0x14>
 80147a4:	6800      	ldr	r0, [r0, #0]
 80147a6:	b118      	cbz	r0, 80147b0 <rclc_action_find_first_terminated_handle+0x14>
 80147a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80147ac:	2b03      	cmp	r3, #3
 80147ae:	ddf9      	ble.n	80147a4 <rclc_action_find_first_terminated_handle+0x8>
 80147b0:	4770      	bx	lr
 80147b2:	bf00      	nop

080147b4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80147b4:	b170      	cbz	r0, 80147d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80147b6:	68c0      	ldr	r0, [r0, #12]
 80147b8:	b160      	cbz	r0, 80147d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80147ba:	b410      	push	{r4}
 80147bc:	e001      	b.n	80147c2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80147be:	6800      	ldr	r0, [r0, #0]
 80147c0:	b128      	cbz	r0, 80147ce <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80147c2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80147c6:	4299      	cmp	r1, r3
 80147c8:	bf08      	it	eq
 80147ca:	4294      	cmpeq	r4, r2
 80147cc:	d1f7      	bne.n	80147be <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80147ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147d2:	4770      	bx	lr
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop

080147d8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80147d8:	b170      	cbz	r0, 80147f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80147da:	68c0      	ldr	r0, [r0, #12]
 80147dc:	b160      	cbz	r0, 80147f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80147de:	b410      	push	{r4}
 80147e0:	e001      	b.n	80147e6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80147e2:	6800      	ldr	r0, [r0, #0]
 80147e4:	b128      	cbz	r0, 80147f2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80147e6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80147ea:	4299      	cmp	r1, r3
 80147ec:	bf08      	it	eq
 80147ee:	4294      	cmpeq	r4, r2
 80147f0:	d1f7      	bne.n	80147e2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80147f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147f6:	4770      	bx	lr
 80147f8:	4770      	bx	lr
 80147fa:	bf00      	nop

080147fc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80147fc:	b170      	cbz	r0, 801481c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80147fe:	68c0      	ldr	r0, [r0, #12]
 8014800:	b160      	cbz	r0, 801481c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014802:	b410      	push	{r4}
 8014804:	e001      	b.n	801480a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014806:	6800      	ldr	r0, [r0, #0]
 8014808:	b128      	cbz	r0, 8014816 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801480a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801480e:	4299      	cmp	r1, r3
 8014810:	bf08      	it	eq
 8014812:	4294      	cmpeq	r4, r2
 8014814:	d1f7      	bne.n	8014806 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801481a:	4770      	bx	lr
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop

08014820 <rclc_action_find_first_handle_with_goal_response>:
 8014820:	b140      	cbz	r0, 8014834 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014822:	68c0      	ldr	r0, [r0, #12]
 8014824:	b910      	cbnz	r0, 801482c <rclc_action_find_first_handle_with_goal_response+0xc>
 8014826:	e005      	b.n	8014834 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014828:	6800      	ldr	r0, [r0, #0]
 801482a:	b118      	cbz	r0, 8014834 <rclc_action_find_first_handle_with_goal_response+0x14>
 801482c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d0f9      	beq.n	8014828 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop

08014838 <rclc_action_find_first_handle_with_result_response>:
 8014838:	b140      	cbz	r0, 801484c <rclc_action_find_first_handle_with_result_response+0x14>
 801483a:	68c0      	ldr	r0, [r0, #12]
 801483c:	b910      	cbnz	r0, 8014844 <rclc_action_find_first_handle_with_result_response+0xc>
 801483e:	e005      	b.n	801484c <rclc_action_find_first_handle_with_result_response+0x14>
 8014840:	6800      	ldr	r0, [r0, #0]
 8014842:	b118      	cbz	r0, 801484c <rclc_action_find_first_handle_with_result_response+0x14>
 8014844:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014848:	2b00      	cmp	r3, #0
 801484a:	d0f9      	beq.n	8014840 <rclc_action_find_first_handle_with_result_response+0x8>
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop

08014850 <rclc_action_server_response_goal_request>:
 8014850:	b198      	cbz	r0, 801487a <rclc_action_server_response_goal_request+0x2a>
 8014852:	b510      	push	{r4, lr}
 8014854:	6844      	ldr	r4, [r0, #4]
 8014856:	b086      	sub	sp, #24
 8014858:	2200      	movs	r2, #0
 801485a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801485e:	460b      	mov	r3, r1
 8014860:	9205      	str	r2, [sp, #20]
 8014862:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8014866:	aa03      	add	r2, sp, #12
 8014868:	f104 0010 	add.w	r0, r4, #16
 801486c:	f88d 300c 	strb.w	r3, [sp, #12]
 8014870:	f7ff fd4a 	bl	8014308 <rcl_action_send_goal_response>
 8014874:	b918      	cbnz	r0, 801487e <rclc_action_server_response_goal_request+0x2e>
 8014876:	b006      	add	sp, #24
 8014878:	bd10      	pop	{r4, pc}
 801487a:	200b      	movs	r0, #11
 801487c:	4770      	bx	lr
 801487e:	9001      	str	r0, [sp, #4]
 8014880:	f7f6 fe46 	bl	800b510 <rcutils_reset_error>
 8014884:	9801      	ldr	r0, [sp, #4]
 8014886:	b006      	add	sp, #24
 8014888:	bd10      	pop	{r4, pc}
 801488a:	bf00      	nop
 801488c:	0000      	movs	r0, r0
	...

08014890 <rclc_action_server_goal_cancel_accept>:
 8014890:	b310      	cbz	r0, 80148d8 <rclc_action_server_goal_cancel_accept+0x48>
 8014892:	b510      	push	{r4, lr}
 8014894:	b090      	sub	sp, #64	@ 0x40
 8014896:	4604      	mov	r4, r0
 8014898:	a806      	add	r0, sp, #24
 801489a:	f7ff fefd 	bl	8014698 <rcl_action_get_zero_initialized_cancel_response>
 801489e:	2300      	movs	r3, #0
 80148a0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80148a4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80148a8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80148ac:	f88d 3018 	strb.w	r3, [sp, #24]
 80148b0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80148b4:	f8cd d01c 	str.w	sp, [sp, #28]
 80148b8:	46ec      	mov	ip, sp
 80148ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148be:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80148e0 <rclc_action_server_goal_cancel_accept+0x50>
 80148c2:	6860      	ldr	r0, [r4, #4]
 80148c4:	aa06      	add	r2, sp, #24
 80148c6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80148ca:	3010      	adds	r0, #16
 80148cc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80148d0:	f7ff fdd2 	bl	8014478 <rcl_action_send_cancel_response>
 80148d4:	b010      	add	sp, #64	@ 0x40
 80148d6:	bd10      	pop	{r4, pc}
 80148d8:	200b      	movs	r0, #11
 80148da:	4770      	bx	lr
 80148dc:	f3af 8000 	nop.w
 80148e0:	00000001 	.word	0x00000001
 80148e4:	00000001 	.word	0x00000001

080148e8 <rclc_action_server_goal_cancel_reject>:
 80148e8:	b082      	sub	sp, #8
 80148ea:	b530      	push	{r4, r5, lr}
 80148ec:	b08b      	sub	sp, #44	@ 0x2c
 80148ee:	ac0e      	add	r4, sp, #56	@ 0x38
 80148f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80148f4:	b188      	cbz	r0, 801491a <rclc_action_server_goal_cancel_reject+0x32>
 80148f6:	4604      	mov	r4, r0
 80148f8:	a801      	add	r0, sp, #4
 80148fa:	460d      	mov	r5, r1
 80148fc:	f7ff fecc 	bl	8014698 <rcl_action_get_zero_initialized_cancel_response>
 8014900:	aa01      	add	r2, sp, #4
 8014902:	a90e      	add	r1, sp, #56	@ 0x38
 8014904:	f104 0010 	add.w	r0, r4, #16
 8014908:	f88d 5004 	strb.w	r5, [sp, #4]
 801490c:	f7ff fdb4 	bl	8014478 <rcl_action_send_cancel_response>
 8014910:	b00b      	add	sp, #44	@ 0x2c
 8014912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014916:	b002      	add	sp, #8
 8014918:	4770      	bx	lr
 801491a:	200b      	movs	r0, #11
 801491c:	b00b      	add	sp, #44	@ 0x2c
 801491e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014922:	b002      	add	sp, #8
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop

08014928 <__atomic_load_8>:
 8014928:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801492c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014930:	4a15      	ldr	r2, [pc, #84]	@ (8014988 <__atomic_load_8+0x60>)
 8014932:	4b16      	ldr	r3, [pc, #88]	@ (801498c <__atomic_load_8+0x64>)
 8014934:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014938:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801493c:	fb02 f101 	mul.w	r1, r2, r1
 8014940:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014944:	fba3 2301 	umull	r2, r3, r3, r1
 8014948:	091b      	lsrs	r3, r3, #4
 801494a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801494e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014952:	b4d0      	push	{r4, r6, r7}
 8014954:	4c0e      	ldr	r4, [pc, #56]	@ (8014990 <__atomic_load_8+0x68>)
 8014956:	1ac9      	subs	r1, r1, r3
 8014958:	1862      	adds	r2, r4, r1
 801495a:	f04f 0c01 	mov.w	ip, #1
 801495e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014962:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014966:	2e00      	cmp	r6, #0
 8014968:	d1f9      	bne.n	801495e <__atomic_load_8+0x36>
 801496a:	f3bf 8f5b 	dmb	ish
 801496e:	b2db      	uxtb	r3, r3
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1f4      	bne.n	801495e <__atomic_load_8+0x36>
 8014974:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014978:	f3bf 8f5b 	dmb	ish
 801497c:	5463      	strb	r3, [r4, r1]
 801497e:	4630      	mov	r0, r6
 8014980:	4639      	mov	r1, r7
 8014982:	bcd0      	pop	{r4, r6, r7}
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	27d4eb2d 	.word	0x27d4eb2d
 801498c:	b21642c9 	.word	0xb21642c9
 8014990:	20015498 	.word	0x20015498

08014994 <__atomic_store_8>:
 8014994:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014998:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801499c:	b570      	push	{r4, r5, r6, lr}
 801499e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80149a2:	4c14      	ldr	r4, [pc, #80]	@ (80149f4 <__atomic_store_8+0x60>)
 80149a4:	4d14      	ldr	r5, [pc, #80]	@ (80149f8 <__atomic_store_8+0x64>)
 80149a6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80149aa:	fb04 f101 	mul.w	r1, r4, r1
 80149ae:	4c13      	ldr	r4, [pc, #76]	@ (80149fc <__atomic_store_8+0x68>)
 80149b0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80149b4:	fba4 4e01 	umull	r4, lr, r4, r1
 80149b8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80149bc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80149c0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80149c4:	eba1 0e0e 	sub.w	lr, r1, lr
 80149c8:	eb05 0c0e 	add.w	ip, r5, lr
 80149cc:	f04f 0401 	mov.w	r4, #1
 80149d0:	e8dc 1f4f 	ldrexb	r1, [ip]
 80149d4:	e8cc 4f46 	strexb	r6, r4, [ip]
 80149d8:	2e00      	cmp	r6, #0
 80149da:	d1f9      	bne.n	80149d0 <__atomic_store_8+0x3c>
 80149dc:	f3bf 8f5b 	dmb	ish
 80149e0:	b2c9      	uxtb	r1, r1
 80149e2:	2900      	cmp	r1, #0
 80149e4:	d1f4      	bne.n	80149d0 <__atomic_store_8+0x3c>
 80149e6:	e9c0 2300 	strd	r2, r3, [r0]
 80149ea:	f3bf 8f5b 	dmb	ish
 80149ee:	f805 100e 	strb.w	r1, [r5, lr]
 80149f2:	bd70      	pop	{r4, r5, r6, pc}
 80149f4:	27d4eb2d 	.word	0x27d4eb2d
 80149f8:	20015498 	.word	0x20015498
 80149fc:	b21642c9 	.word	0xb21642c9

08014a00 <__atomic_exchange_8>:
 8014a00:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014a04:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014a08:	4916      	ldr	r1, [pc, #88]	@ (8014a64 <__atomic_exchange_8+0x64>)
 8014a0a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014a0e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014a12:	fb01 fc0c 	mul.w	ip, r1, ip
 8014a16:	4914      	ldr	r1, [pc, #80]	@ (8014a68 <__atomic_exchange_8+0x68>)
 8014a18:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014a1c:	b570      	push	{r4, r5, r6, lr}
 8014a1e:	4605      	mov	r5, r0
 8014a20:	fba1 010c 	umull	r0, r1, r1, ip
 8014a24:	0909      	lsrs	r1, r1, #4
 8014a26:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014a2a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8014a6c <__atomic_exchange_8+0x6c>)
 8014a30:	ebac 0c01 	sub.w	ip, ip, r1
 8014a34:	eb06 010c 	add.w	r1, r6, ip
 8014a38:	f04f 0e01 	mov.w	lr, #1
 8014a3c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014a40:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d1f9      	bne.n	8014a3c <__atomic_exchange_8+0x3c>
 8014a48:	f3bf 8f5b 	dmb	ish
 8014a4c:	b2e4      	uxtb	r4, r4
 8014a4e:	2c00      	cmp	r4, #0
 8014a50:	d1f4      	bne.n	8014a3c <__atomic_exchange_8+0x3c>
 8014a52:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014a56:	e9c5 2300 	strd	r2, r3, [r5]
 8014a5a:	f3bf 8f5b 	dmb	ish
 8014a5e:	f806 400c 	strb.w	r4, [r6, ip]
 8014a62:	bd70      	pop	{r4, r5, r6, pc}
 8014a64:	27d4eb2d 	.word	0x27d4eb2d
 8014a68:	b21642c9 	.word	0xb21642c9
 8014a6c:	20015498 	.word	0x20015498

08014a70 <rcutils_get_env>:
 8014a70:	b168      	cbz	r0, 8014a8e <rcutils_get_env+0x1e>
 8014a72:	b510      	push	{r4, lr}
 8014a74:	460c      	mov	r4, r1
 8014a76:	b129      	cbz	r1, 8014a84 <rcutils_get_env+0x14>
 8014a78:	f004 f84a 	bl	8018b10 <getenv>
 8014a7c:	b120      	cbz	r0, 8014a88 <rcutils_get_env+0x18>
 8014a7e:	6020      	str	r0, [r4, #0]
 8014a80:	2000      	movs	r0, #0
 8014a82:	bd10      	pop	{r4, pc}
 8014a84:	4803      	ldr	r0, [pc, #12]	@ (8014a94 <rcutils_get_env+0x24>)
 8014a86:	bd10      	pop	{r4, pc}
 8014a88:	4b03      	ldr	r3, [pc, #12]	@ (8014a98 <rcutils_get_env+0x28>)
 8014a8a:	6023      	str	r3, [r4, #0]
 8014a8c:	bd10      	pop	{r4, pc}
 8014a8e:	4803      	ldr	r0, [pc, #12]	@ (8014a9c <rcutils_get_env+0x2c>)
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop
 8014a94:	0801b470 	.word	0x0801b470
 8014a98:	0801ba48 	.word	0x0801ba48
 8014a9c:	0801b454 	.word	0x0801b454

08014aa0 <rcutils_is_directory>:
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	4770      	bx	lr

08014aa4 <rcutils_join_path>:
 8014aa4:	b082      	sub	sp, #8
 8014aa6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014aaa:	2000      	movs	r0, #0
 8014aac:	b002      	add	sp, #8
 8014aae:	4770      	bx	lr

08014ab0 <rcutils_to_native_path>:
 8014ab0:	b084      	sub	sp, #16
 8014ab2:	a801      	add	r0, sp, #4
 8014ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014ab8:	b004      	add	sp, #16
 8014aba:	2000      	movs	r0, #0
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop

08014ac0 <rcutils_format_string_limit>:
 8014ac0:	b40f      	push	{r0, r1, r2, r3}
 8014ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ac4:	b083      	sub	sp, #12
 8014ac6:	ac08      	add	r4, sp, #32
 8014ac8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ace:	b34e      	cbz	r6, 8014b24 <rcutils_format_string_limit+0x64>
 8014ad0:	a808      	add	r0, sp, #32
 8014ad2:	f7f6 fcf9 	bl	800b4c8 <rcutils_allocator_is_valid>
 8014ad6:	b328      	cbz	r0, 8014b24 <rcutils_format_string_limit+0x64>
 8014ad8:	2100      	movs	r1, #0
 8014ada:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014adc:	4632      	mov	r2, r6
 8014ade:	4608      	mov	r0, r1
 8014ae0:	e9cd 3300 	strd	r3, r3, [sp]
 8014ae4:	f000 f8f4 	bl	8014cd0 <rcutils_vsnprintf>
 8014ae8:	1c43      	adds	r3, r0, #1
 8014aea:	4605      	mov	r5, r0
 8014aec:	d01a      	beq.n	8014b24 <rcutils_format_string_limit+0x64>
 8014aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014af0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014af2:	1c47      	adds	r7, r0, #1
 8014af4:	429f      	cmp	r7, r3
 8014af6:	bf84      	itt	hi
 8014af8:	461f      	movhi	r7, r3
 8014afa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014afe:	4638      	mov	r0, r7
 8014b00:	9b08      	ldr	r3, [sp, #32]
 8014b02:	4798      	blx	r3
 8014b04:	4604      	mov	r4, r0
 8014b06:	b168      	cbz	r0, 8014b24 <rcutils_format_string_limit+0x64>
 8014b08:	9b01      	ldr	r3, [sp, #4]
 8014b0a:	4632      	mov	r2, r6
 8014b0c:	4639      	mov	r1, r7
 8014b0e:	f000 f8df 	bl	8014cd0 <rcutils_vsnprintf>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	db02      	blt.n	8014b1c <rcutils_format_string_limit+0x5c>
 8014b16:	2300      	movs	r3, #0
 8014b18:	5563      	strb	r3, [r4, r5]
 8014b1a:	e004      	b.n	8014b26 <rcutils_format_string_limit+0x66>
 8014b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b1e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014b20:	4620      	mov	r0, r4
 8014b22:	4798      	blx	r3
 8014b24:	2400      	movs	r4, #0
 8014b26:	4620      	mov	r0, r4
 8014b28:	b003      	add	sp, #12
 8014b2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b2e:	b004      	add	sp, #16
 8014b30:	4770      	bx	lr
 8014b32:	bf00      	nop

08014b34 <rcutils_repl_str>:
 8014b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b38:	ed2d 8b02 	vpush	{d8}
 8014b3c:	b087      	sub	sp, #28
 8014b3e:	4680      	mov	r8, r0
 8014b40:	4608      	mov	r0, r1
 8014b42:	f8cd 8004 	str.w	r8, [sp, #4]
 8014b46:	ee08 2a10 	vmov	s16, r2
 8014b4a:	468a      	mov	sl, r1
 8014b4c:	4699      	mov	r9, r3
 8014b4e:	f7eb fb57 	bl	8000200 <strlen>
 8014b52:	2600      	movs	r6, #0
 8014b54:	4647      	mov	r7, r8
 8014b56:	9002      	str	r0, [sp, #8]
 8014b58:	46b3      	mov	fp, r6
 8014b5a:	2510      	movs	r5, #16
 8014b5c:	46b0      	mov	r8, r6
 8014b5e:	e01d      	b.n	8014b9c <rcutils_repl_str+0x68>
 8014b60:	f10b 0b01 	add.w	fp, fp, #1
 8014b64:	455e      	cmp	r6, fp
 8014b66:	d211      	bcs.n	8014b8c <rcutils_repl_str+0x58>
 8014b68:	442e      	add	r6, r5
 8014b6a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014b6e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014b72:	00b1      	lsls	r1, r6, #2
 8014b74:	4798      	blx	r3
 8014b76:	2800      	cmp	r0, #0
 8014b78:	f000 8088 	beq.w	8014c8c <rcutils_repl_str+0x158>
 8014b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b80:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014b84:	4680      	mov	r8, r0
 8014b86:	bf28      	it	cs
 8014b88:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014b8c:	9a01      	ldr	r2, [sp, #4]
 8014b8e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014b92:	1aa2      	subs	r2, r4, r2
 8014b94:	f843 2c04 	str.w	r2, [r3, #-4]
 8014b98:	9b02      	ldr	r3, [sp, #8]
 8014b9a:	18e7      	adds	r7, r4, r3
 8014b9c:	4651      	mov	r1, sl
 8014b9e:	4638      	mov	r0, r7
 8014ba0:	f004 fce5 	bl	801956e <strstr>
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	4640      	mov	r0, r8
 8014ba8:	2c00      	cmp	r4, #0
 8014baa:	d1d9      	bne.n	8014b60 <rcutils_repl_str+0x2c>
 8014bac:	46b8      	mov	r8, r7
 8014bae:	4607      	mov	r7, r0
 8014bb0:	4640      	mov	r0, r8
 8014bb2:	f7eb fb25 	bl	8000200 <strlen>
 8014bb6:	9b01      	ldr	r3, [sp, #4]
 8014bb8:	eba8 0303 	sub.w	r3, r8, r3
 8014bbc:	181c      	adds	r4, r3, r0
 8014bbe:	9404      	str	r4, [sp, #16]
 8014bc0:	f1bb 0f00 	cmp.w	fp, #0
 8014bc4:	d04a      	beq.n	8014c5c <rcutils_repl_str+0x128>
 8014bc6:	ee18 0a10 	vmov	r0, s16
 8014bca:	f7eb fb19 	bl	8000200 <strlen>
 8014bce:	9b02      	ldr	r3, [sp, #8]
 8014bd0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014bd4:	1ac3      	subs	r3, r0, r3
 8014bd6:	fb0b 4303 	mla	r3, fp, r3, r4
 8014bda:	461a      	mov	r2, r3
 8014bdc:	9305      	str	r3, [sp, #20]
 8014bde:	4606      	mov	r6, r0
 8014be0:	f8d9 3000 	ldr.w	r3, [r9]
 8014be4:	1c50      	adds	r0, r2, #1
 8014be6:	4798      	blx	r3
 8014be8:	9003      	str	r0, [sp, #12]
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d04f      	beq.n	8014c8e <rcutils_repl_str+0x15a>
 8014bee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bf2:	683a      	ldr	r2, [r7, #0]
 8014bf4:	4641      	mov	r1, r8
 8014bf6:	f004 fd62 	bl	80196be <memcpy>
 8014bfa:	683d      	ldr	r5, [r7, #0]
 8014bfc:	9b03      	ldr	r3, [sp, #12]
 8014bfe:	9701      	str	r7, [sp, #4]
 8014c00:	46ba      	mov	sl, r7
 8014c02:	441d      	add	r5, r3
 8014c04:	9f02      	ldr	r7, [sp, #8]
 8014c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c0a:	2401      	movs	r4, #1
 8014c0c:	46d1      	mov	r9, sl
 8014c0e:	ee18 aa10 	vmov	sl, s16
 8014c12:	e00a      	b.n	8014c2a <rcutils_repl_str+0xf6>
 8014c14:	f8d9 5000 	ldr.w	r5, [r9]
 8014c18:	1aaa      	subs	r2, r5, r2
 8014c1a:	1885      	adds	r5, r0, r2
 8014c1c:	f004 fd4f 	bl	80196be <memcpy>
 8014c20:	45a3      	cmp	fp, r4
 8014c22:	f104 0201 	add.w	r2, r4, #1
 8014c26:	d935      	bls.n	8014c94 <rcutils_repl_str+0x160>
 8014c28:	4614      	mov	r4, r2
 8014c2a:	4632      	mov	r2, r6
 8014c2c:	4651      	mov	r1, sl
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f004 fd45 	bl	80196be <memcpy>
 8014c34:	f859 2b04 	ldr.w	r2, [r9], #4
 8014c38:	45a3      	cmp	fp, r4
 8014c3a:	443a      	add	r2, r7
 8014c3c:	eb05 0006 	add.w	r0, r5, r6
 8014c40:	eb08 0102 	add.w	r1, r8, r2
 8014c44:	d1e6      	bne.n	8014c14 <rcutils_repl_str+0xe0>
 8014c46:	9b04      	ldr	r3, [sp, #16]
 8014c48:	1a9a      	subs	r2, r3, r2
 8014c4a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014c4e:	f004 fd36 	bl	80196be <memcpy>
 8014c52:	9a03      	ldr	r2, [sp, #12]
 8014c54:	9905      	ldr	r1, [sp, #20]
 8014c56:	2300      	movs	r3, #0
 8014c58:	5453      	strb	r3, [r2, r1]
 8014c5a:	e00b      	b.n	8014c74 <rcutils_repl_str+0x140>
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8014c62:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c66:	3001      	adds	r0, #1
 8014c68:	4798      	blx	r3
 8014c6a:	9003      	str	r0, [sp, #12]
 8014c6c:	b110      	cbz	r0, 8014c74 <rcutils_repl_str+0x140>
 8014c6e:	9901      	ldr	r1, [sp, #4]
 8014c70:	f004 fd33 	bl	80196da <strcpy>
 8014c74:	4638      	mov	r0, r7
 8014c76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014c7a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c7e:	4798      	blx	r3
 8014c80:	9803      	ldr	r0, [sp, #12]
 8014c82:	b007      	add	sp, #28
 8014c84:	ecbd 8b02 	vpop	{d8}
 8014c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c8c:	4647      	mov	r7, r8
 8014c8e:	2300      	movs	r3, #0
 8014c90:	9303      	str	r3, [sp, #12]
 8014c92:	e7ef      	b.n	8014c74 <rcutils_repl_str+0x140>
 8014c94:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014c98:	e7db      	b.n	8014c52 <rcutils_repl_str+0x11e>
 8014c9a:	bf00      	nop

08014c9c <rcutils_snprintf>:
 8014c9c:	b40c      	push	{r2, r3}
 8014c9e:	b530      	push	{r4, r5, lr}
 8014ca0:	b083      	sub	sp, #12
 8014ca2:	ab06      	add	r3, sp, #24
 8014ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ca8:	9301      	str	r3, [sp, #4]
 8014caa:	b152      	cbz	r2, 8014cc2 <rcutils_snprintf+0x26>
 8014cac:	b138      	cbz	r0, 8014cbe <rcutils_snprintf+0x22>
 8014cae:	b141      	cbz	r1, 8014cc2 <rcutils_snprintf+0x26>
 8014cb0:	f004 fa70 	bl	8019194 <vsniprintf>
 8014cb4:	b003      	add	sp, #12
 8014cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014cba:	b002      	add	sp, #8
 8014cbc:	4770      	bx	lr
 8014cbe:	2900      	cmp	r1, #0
 8014cc0:	d0f6      	beq.n	8014cb0 <rcutils_snprintf+0x14>
 8014cc2:	f004 fccf 	bl	8019664 <__errno>
 8014cc6:	2316      	movs	r3, #22
 8014cc8:	6003      	str	r3, [r0, #0]
 8014cca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014cce:	e7f1      	b.n	8014cb4 <rcutils_snprintf+0x18>

08014cd0 <rcutils_vsnprintf>:
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	b13a      	cbz	r2, 8014ce4 <rcutils_vsnprintf+0x14>
 8014cd4:	b120      	cbz	r0, 8014ce0 <rcutils_vsnprintf+0x10>
 8014cd6:	b129      	cbz	r1, 8014ce4 <rcutils_vsnprintf+0x14>
 8014cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cdc:	f004 ba5a 	b.w	8019194 <vsniprintf>
 8014ce0:	2900      	cmp	r1, #0
 8014ce2:	d0f9      	beq.n	8014cd8 <rcutils_vsnprintf+0x8>
 8014ce4:	f004 fcbe 	bl	8019664 <__errno>
 8014ce8:	2316      	movs	r3, #22
 8014cea:	6003      	str	r3, [r0, #0]
 8014cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014cf0:	bd70      	pop	{r4, r5, r6, pc}
 8014cf2:	bf00      	nop

08014cf4 <rcutils_strdup>:
 8014cf4:	b084      	sub	sp, #16
 8014cf6:	b570      	push	{r4, r5, r6, lr}
 8014cf8:	b082      	sub	sp, #8
 8014cfa:	ac07      	add	r4, sp, #28
 8014cfc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014d00:	4605      	mov	r5, r0
 8014d02:	b1b0      	cbz	r0, 8014d32 <rcutils_strdup+0x3e>
 8014d04:	f7eb fa7c 	bl	8000200 <strlen>
 8014d08:	1c42      	adds	r2, r0, #1
 8014d0a:	9b07      	ldr	r3, [sp, #28]
 8014d0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014d0e:	9201      	str	r2, [sp, #4]
 8014d10:	4606      	mov	r6, r0
 8014d12:	4610      	mov	r0, r2
 8014d14:	4798      	blx	r3
 8014d16:	4604      	mov	r4, r0
 8014d18:	b128      	cbz	r0, 8014d26 <rcutils_strdup+0x32>
 8014d1a:	9a01      	ldr	r2, [sp, #4]
 8014d1c:	4629      	mov	r1, r5
 8014d1e:	f004 fcce 	bl	80196be <memcpy>
 8014d22:	2300      	movs	r3, #0
 8014d24:	55a3      	strb	r3, [r4, r6]
 8014d26:	4620      	mov	r0, r4
 8014d28:	b002      	add	sp, #8
 8014d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d2e:	b004      	add	sp, #16
 8014d30:	4770      	bx	lr
 8014d32:	4604      	mov	r4, r0
 8014d34:	e7f7      	b.n	8014d26 <rcutils_strdup+0x32>
 8014d36:	bf00      	nop

08014d38 <rcutils_strndup>:
 8014d38:	b082      	sub	sp, #8
 8014d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d3c:	ac06      	add	r4, sp, #24
 8014d3e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014d42:	4605      	mov	r5, r0
 8014d44:	b188      	cbz	r0, 8014d6a <rcutils_strndup+0x32>
 8014d46:	1c4f      	adds	r7, r1, #1
 8014d48:	460e      	mov	r6, r1
 8014d4a:	4638      	mov	r0, r7
 8014d4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014d4e:	4790      	blx	r2
 8014d50:	4604      	mov	r4, r0
 8014d52:	b128      	cbz	r0, 8014d60 <rcutils_strndup+0x28>
 8014d54:	463a      	mov	r2, r7
 8014d56:	4629      	mov	r1, r5
 8014d58:	f004 fcb1 	bl	80196be <memcpy>
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	55a3      	strb	r3, [r4, r6]
 8014d60:	4620      	mov	r0, r4
 8014d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014d66:	b002      	add	sp, #8
 8014d68:	4770      	bx	lr
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	e7f8      	b.n	8014d60 <rcutils_strndup+0x28>
 8014d6e:	bf00      	nop

08014d70 <rcutils_get_zero_initialized_string_map>:
 8014d70:	4b01      	ldr	r3, [pc, #4]	@ (8014d78 <rcutils_get_zero_initialized_string_map+0x8>)
 8014d72:	2000      	movs	r0, #0
 8014d74:	6018      	str	r0, [r3, #0]
 8014d76:	4770      	bx	lr
 8014d78:	200154b0 	.word	0x200154b0

08014d7c <rcutils_string_map_reserve>:
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	d05f      	beq.n	8014e40 <rcutils_string_map_reserve+0xc4>
 8014d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d84:	460c      	mov	r4, r1
 8014d86:	6801      	ldr	r1, [r0, #0]
 8014d88:	b082      	sub	sp, #8
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	b129      	cbz	r1, 8014d9a <rcutils_string_map_reserve+0x1e>
 8014d8e:	68cb      	ldr	r3, [r1, #12]
 8014d90:	42a3      	cmp	r3, r4
 8014d92:	d906      	bls.n	8014da2 <rcutils_string_map_reserve+0x26>
 8014d94:	461c      	mov	r4, r3
 8014d96:	2900      	cmp	r1, #0
 8014d98:	d1f9      	bne.n	8014d8e <rcutils_string_map_reserve+0x12>
 8014d9a:	201f      	movs	r0, #31
 8014d9c:	b002      	add	sp, #8
 8014d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da2:	688b      	ldr	r3, [r1, #8]
 8014da4:	42a3      	cmp	r3, r4
 8014da6:	d047      	beq.n	8014e38 <rcutils_string_map_reserve+0xbc>
 8014da8:	6a0e      	ldr	r6, [r1, #32]
 8014daa:	2c00      	cmp	r4, #0
 8014dac:	d034      	beq.n	8014e18 <rcutils_string_map_reserve+0x9c>
 8014dae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014db2:	d243      	bcs.n	8014e3c <rcutils_string_map_reserve+0xc0>
 8014db4:	00a7      	lsls	r7, r4, #2
 8014db6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014dba:	6808      	ldr	r0, [r1, #0]
 8014dbc:	4632      	mov	r2, r6
 8014dbe:	4639      	mov	r1, r7
 8014dc0:	47c0      	blx	r8
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	d03a      	beq.n	8014e3c <rcutils_string_map_reserve+0xc0>
 8014dc6:	682b      	ldr	r3, [r5, #0]
 8014dc8:	4632      	mov	r2, r6
 8014dca:	6018      	str	r0, [r3, #0]
 8014dcc:	4639      	mov	r1, r7
 8014dce:	6858      	ldr	r0, [r3, #4]
 8014dd0:	47c0      	blx	r8
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d032      	beq.n	8014e3c <rcutils_string_map_reserve+0xc0>
 8014dd6:	682d      	ldr	r5, [r5, #0]
 8014dd8:	68ab      	ldr	r3, [r5, #8]
 8014dda:	6068      	str	r0, [r5, #4]
 8014ddc:	42a3      	cmp	r3, r4
 8014dde:	d226      	bcs.n	8014e2e <rcutils_string_map_reserve+0xb2>
 8014de0:	682a      	ldr	r2, [r5, #0]
 8014de2:	eb00 0c07 	add.w	ip, r0, r7
 8014de6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014dea:	45e6      	cmp	lr, ip
 8014dec:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014df0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014df4:	d203      	bcs.n	8014dfe <rcutils_string_map_reserve+0x82>
 8014df6:	eb02 0c07 	add.w	ip, r2, r7
 8014dfa:	4566      	cmp	r6, ip
 8014dfc:	d322      	bcc.n	8014e44 <rcutils_string_map_reserve+0xc8>
 8014dfe:	1ae3      	subs	r3, r4, r3
 8014e00:	009a      	lsls	r2, r3, #2
 8014e02:	4670      	mov	r0, lr
 8014e04:	2100      	movs	r1, #0
 8014e06:	9201      	str	r2, [sp, #4]
 8014e08:	f004 fbf1 	bl	80195ee <memset>
 8014e0c:	9a01      	ldr	r2, [sp, #4]
 8014e0e:	2100      	movs	r1, #0
 8014e10:	4630      	mov	r0, r6
 8014e12:	f004 fbec 	bl	80195ee <memset>
 8014e16:	e00a      	b.n	8014e2e <rcutils_string_map_reserve+0xb2>
 8014e18:	694f      	ldr	r7, [r1, #20]
 8014e1a:	6808      	ldr	r0, [r1, #0]
 8014e1c:	4631      	mov	r1, r6
 8014e1e:	47b8      	blx	r7
 8014e20:	682b      	ldr	r3, [r5, #0]
 8014e22:	4631      	mov	r1, r6
 8014e24:	6858      	ldr	r0, [r3, #4]
 8014e26:	601c      	str	r4, [r3, #0]
 8014e28:	47b8      	blx	r7
 8014e2a:	682d      	ldr	r5, [r5, #0]
 8014e2c:	606c      	str	r4, [r5, #4]
 8014e2e:	2000      	movs	r0, #0
 8014e30:	60ac      	str	r4, [r5, #8]
 8014e32:	b002      	add	sp, #8
 8014e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e38:	2000      	movs	r0, #0
 8014e3a:	e7af      	b.n	8014d9c <rcutils_string_map_reserve+0x20>
 8014e3c:	200a      	movs	r0, #10
 8014e3e:	e7ad      	b.n	8014d9c <rcutils_string_map_reserve+0x20>
 8014e40:	200b      	movs	r0, #11
 8014e42:	4770      	bx	lr
 8014e44:	1f0b      	subs	r3, r1, #4
 8014e46:	4418      	add	r0, r3
 8014e48:	4413      	add	r3, r2
 8014e4a:	3a04      	subs	r2, #4
 8014e4c:	4417      	add	r7, r2
 8014e4e:	2200      	movs	r2, #0
 8014e50:	f843 2f04 	str.w	r2, [r3, #4]!
 8014e54:	42bb      	cmp	r3, r7
 8014e56:	f840 2f04 	str.w	r2, [r0, #4]!
 8014e5a:	d1f9      	bne.n	8014e50 <rcutils_string_map_reserve+0xd4>
 8014e5c:	e7e7      	b.n	8014e2e <rcutils_string_map_reserve+0xb2>
 8014e5e:	bf00      	nop

08014e60 <rcutils_string_map_init>:
 8014e60:	b082      	sub	sp, #8
 8014e62:	b570      	push	{r4, r5, r6, lr}
 8014e64:	ac04      	add	r4, sp, #16
 8014e66:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e6a:	b380      	cbz	r0, 8014ece <rcutils_string_map_init+0x6e>
 8014e6c:	6806      	ldr	r6, [r0, #0]
 8014e6e:	4604      	mov	r4, r0
 8014e70:	b12e      	cbz	r6, 8014e7e <rcutils_string_map_init+0x1e>
 8014e72:	251e      	movs	r5, #30
 8014e74:	4628      	mov	r0, r5
 8014e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e7a:	b002      	add	sp, #8
 8014e7c:	4770      	bx	lr
 8014e7e:	a804      	add	r0, sp, #16
 8014e80:	460d      	mov	r5, r1
 8014e82:	f7f6 fb21 	bl	800b4c8 <rcutils_allocator_is_valid>
 8014e86:	b310      	cbz	r0, 8014ece <rcutils_string_map_init+0x6e>
 8014e88:	9b04      	ldr	r3, [sp, #16]
 8014e8a:	9908      	ldr	r1, [sp, #32]
 8014e8c:	2024      	movs	r0, #36	@ 0x24
 8014e8e:	4798      	blx	r3
 8014e90:	6020      	str	r0, [r4, #0]
 8014e92:	b310      	cbz	r0, 8014eda <rcutils_string_map_init+0x7a>
 8014e94:	f10d 0e10 	add.w	lr, sp, #16
 8014e98:	e9c0 6600 	strd	r6, r6, [r0]
 8014e9c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014ea0:	f100 0c10 	add.w	ip, r0, #16
 8014ea4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ea8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eac:	f8de 3000 	ldr.w	r3, [lr]
 8014eb0:	f8cc 3000 	str.w	r3, [ip]
 8014eb4:	4629      	mov	r1, r5
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f7ff ff60 	bl	8014d7c <rcutils_string_map_reserve>
 8014ebc:	4605      	mov	r5, r0
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d0d8      	beq.n	8014e74 <rcutils_string_map_init+0x14>
 8014ec2:	9b05      	ldr	r3, [sp, #20]
 8014ec4:	9908      	ldr	r1, [sp, #32]
 8014ec6:	6820      	ldr	r0, [r4, #0]
 8014ec8:	4798      	blx	r3
 8014eca:	6026      	str	r6, [r4, #0]
 8014ecc:	e7d2      	b.n	8014e74 <rcutils_string_map_init+0x14>
 8014ece:	250b      	movs	r5, #11
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ed6:	b002      	add	sp, #8
 8014ed8:	4770      	bx	lr
 8014eda:	250a      	movs	r5, #10
 8014edc:	e7ca      	b.n	8014e74 <rcutils_string_map_init+0x14>
 8014ede:	bf00      	nop

08014ee0 <rcutils_string_map_fini>:
 8014ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee4:	b082      	sub	sp, #8
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d03a      	beq.n	8014f60 <rcutils_string_map_fini+0x80>
 8014eea:	6804      	ldr	r4, [r0, #0]
 8014eec:	4606      	mov	r6, r0
 8014eee:	2c00      	cmp	r4, #0
 8014ef0:	d032      	beq.n	8014f58 <rcutils_string_map_fini+0x78>
 8014ef2:	68a3      	ldr	r3, [r4, #8]
 8014ef4:	b32b      	cbz	r3, 8014f42 <rcutils_string_map_fini+0x62>
 8014ef6:	2500      	movs	r5, #0
 8014ef8:	6822      	ldr	r2, [r4, #0]
 8014efa:	462f      	mov	r7, r5
 8014efc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014f00:	b1e0      	cbz	r0, 8014f3c <rcutils_string_map_fini+0x5c>
 8014f02:	6a21      	ldr	r1, [r4, #32]
 8014f04:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014f08:	9101      	str	r1, [sp, #4]
 8014f0a:	47c0      	blx	r8
 8014f0c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f10:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014f14:	9901      	ldr	r1, [sp, #4]
 8014f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f1a:	47c0      	blx	r8
 8014f1c:	68e3      	ldr	r3, [r4, #12]
 8014f1e:	6862      	ldr	r2, [r4, #4]
 8014f20:	3b01      	subs	r3, #1
 8014f22:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014f26:	60e3      	str	r3, [r4, #12]
 8014f28:	6834      	ldr	r4, [r6, #0]
 8014f2a:	68a3      	ldr	r3, [r4, #8]
 8014f2c:	3501      	adds	r5, #1
 8014f2e:	429d      	cmp	r5, r3
 8014f30:	d207      	bcs.n	8014f42 <rcutils_string_map_fini+0x62>
 8014f32:	6822      	ldr	r2, [r4, #0]
 8014f34:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	d1e2      	bne.n	8014f02 <rcutils_string_map_fini+0x22>
 8014f3c:	3501      	adds	r5, #1
 8014f3e:	429d      	cmp	r5, r3
 8014f40:	d3dc      	bcc.n	8014efc <rcutils_string_map_fini+0x1c>
 8014f42:	2100      	movs	r1, #0
 8014f44:	4630      	mov	r0, r6
 8014f46:	f7ff ff19 	bl	8014d7c <rcutils_string_map_reserve>
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	b920      	cbnz	r0, 8014f58 <rcutils_string_map_fini+0x78>
 8014f4e:	6830      	ldr	r0, [r6, #0]
 8014f50:	6943      	ldr	r3, [r0, #20]
 8014f52:	6a01      	ldr	r1, [r0, #32]
 8014f54:	4798      	blx	r3
 8014f56:	6034      	str	r4, [r6, #0]
 8014f58:	4620      	mov	r0, r4
 8014f5a:	b002      	add	sp, #8
 8014f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f60:	240b      	movs	r4, #11
 8014f62:	4620      	mov	r0, r4
 8014f64:	b002      	add	sp, #8
 8014f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6a:	bf00      	nop

08014f6c <rcutils_string_map_getn>:
 8014f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f70:	b300      	cbz	r0, 8014fb4 <rcutils_string_map_getn+0x48>
 8014f72:	6807      	ldr	r7, [r0, #0]
 8014f74:	b1ff      	cbz	r7, 8014fb6 <rcutils_string_map_getn+0x4a>
 8014f76:	4688      	mov	r8, r1
 8014f78:	b1e1      	cbz	r1, 8014fb4 <rcutils_string_map_getn+0x48>
 8014f7a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014f7e:	683e      	ldr	r6, [r7, #0]
 8014f80:	f1ba 0f00 	cmp.w	sl, #0
 8014f84:	d016      	beq.n	8014fb4 <rcutils_string_map_getn+0x48>
 8014f86:	4691      	mov	r9, r2
 8014f88:	3e04      	subs	r6, #4
 8014f8a:	2400      	movs	r4, #0
 8014f8c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014f94:	4628      	mov	r0, r5
 8014f96:	3401      	adds	r4, #1
 8014f98:	b155      	cbz	r5, 8014fb0 <rcutils_string_map_getn+0x44>
 8014f9a:	f7eb f931 	bl	8000200 <strlen>
 8014f9e:	4548      	cmp	r0, r9
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	4629      	mov	r1, r5
 8014fa4:	bf38      	it	cc
 8014fa6:	464a      	movcc	r2, r9
 8014fa8:	4640      	mov	r0, r8
 8014faa:	f004 face 	bl	801954a <strncmp>
 8014fae:	b128      	cbz	r0, 8014fbc <rcutils_string_map_getn+0x50>
 8014fb0:	45a2      	cmp	sl, r4
 8014fb2:	d1eb      	bne.n	8014f8c <rcutils_string_map_getn+0x20>
 8014fb4:	2700      	movs	r7, #0
 8014fb6:	4638      	mov	r0, r7
 8014fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f853 700b 	ldr.w	r7, [r3, fp]
 8014fc2:	4638      	mov	r0, r7
 8014fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014fc8 <rmw_get_zero_initialized_context>:
 8014fc8:	b510      	push	{r4, lr}
 8014fca:	4604      	mov	r4, r0
 8014fcc:	3010      	adds	r0, #16
 8014fce:	f000 f80b 	bl	8014fe8 <rmw_get_zero_initialized_init_options>
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	e9c4 0100 	strd	r0, r1, [r4]
 8014fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014fe0:	60a3      	str	r3, [r4, #8]
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	bd10      	pop	{r4, pc}
 8014fe6:	bf00      	nop

08014fe8 <rmw_get_zero_initialized_init_options>:
 8014fe8:	b510      	push	{r4, lr}
 8014fea:	2238      	movs	r2, #56	@ 0x38
 8014fec:	4604      	mov	r4, r0
 8014fee:	2100      	movs	r1, #0
 8014ff0:	f004 fafd 	bl	80195ee <memset>
 8014ff4:	f104 0010 	add.w	r0, r4, #16
 8014ff8:	f000 f806 	bl	8015008 <rmw_get_default_security_options>
 8014ffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015000:	60e3      	str	r3, [r4, #12]
 8015002:	4620      	mov	r0, r4
 8015004:	bd10      	pop	{r4, pc}
 8015006:	bf00      	nop

08015008 <rmw_get_default_security_options>:
 8015008:	2200      	movs	r2, #0
 801500a:	7002      	strb	r2, [r0, #0]
 801500c:	6042      	str	r2, [r0, #4]
 801500e:	4770      	bx	lr

08015010 <rmw_subscription_content_filter_options_fini>:
 8015010:	b1b0      	cbz	r0, 8015040 <rmw_subscription_content_filter_options_fini+0x30>
 8015012:	b538      	push	{r3, r4, r5, lr}
 8015014:	4604      	mov	r4, r0
 8015016:	4608      	mov	r0, r1
 8015018:	460d      	mov	r5, r1
 801501a:	f7f6 fa55 	bl	800b4c8 <rcutils_allocator_is_valid>
 801501e:	b168      	cbz	r0, 801503c <rmw_subscription_content_filter_options_fini+0x2c>
 8015020:	6820      	ldr	r0, [r4, #0]
 8015022:	b120      	cbz	r0, 801502e <rmw_subscription_content_filter_options_fini+0x1e>
 8015024:	686b      	ldr	r3, [r5, #4]
 8015026:	6929      	ldr	r1, [r5, #16]
 8015028:	4798      	blx	r3
 801502a:	2300      	movs	r3, #0
 801502c:	6023      	str	r3, [r4, #0]
 801502e:	1d20      	adds	r0, r4, #4
 8015030:	f003 fbaa 	bl	8018788 <rcutils_string_array_fini>
 8015034:	3800      	subs	r0, #0
 8015036:	bf18      	it	ne
 8015038:	2001      	movne	r0, #1
 801503a:	bd38      	pop	{r3, r4, r5, pc}
 801503c:	200b      	movs	r0, #11
 801503e:	bd38      	pop	{r3, r4, r5, pc}
 8015040:	200b      	movs	r0, #11
 8015042:	4770      	bx	lr

08015044 <rmw_get_default_subscription_options>:
 8015044:	2200      	movs	r2, #0
 8015046:	e9c0 2200 	strd	r2, r2, [r0]
 801504a:	6082      	str	r2, [r0, #8]
 801504c:	4770      	bx	lr
 801504e:	bf00      	nop

08015050 <rmw_time_equal>:
 8015050:	b4f0      	push	{r4, r5, r6, r7}
 8015052:	b084      	sub	sp, #16
 8015054:	ac04      	add	r4, sp, #16
 8015056:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801505a:	4603      	mov	r3, r0
 801505c:	4924      	ldr	r1, [pc, #144]	@ (80150f0 <rmw_time_equal+0xa0>)
 801505e:	9e03      	ldr	r6, [sp, #12]
 8015060:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015064:	2202      	movs	r2, #2
 8015066:	4299      	cmp	r1, r3
 8015068:	41aa      	sbcs	r2, r5
 801506a:	d330      	bcc.n	80150ce <rmw_time_equal+0x7e>
 801506c:	4c21      	ldr	r4, [pc, #132]	@ (80150f4 <rmw_time_equal+0xa4>)
 801506e:	fba3 3204 	umull	r3, r2, r3, r4
 8015072:	fb04 2205 	mla	r2, r4, r5, r2
 8015076:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801507a:	43dd      	mvns	r5, r3
 801507c:	1a8c      	subs	r4, r1, r2
 801507e:	4285      	cmp	r5, r0
 8015080:	41b4      	sbcs	r4, r6
 8015082:	d332      	bcc.n	80150ea <rmw_time_equal+0x9a>
 8015084:	eb10 0c03 	adds.w	ip, r0, r3
 8015088:	eb42 0106 	adc.w	r1, r2, r6
 801508c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015090:	4817      	ldr	r0, [pc, #92]	@ (80150f0 <rmw_time_equal+0xa0>)
 8015092:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015094:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8015096:	2202      	movs	r2, #2
 8015098:	4298      	cmp	r0, r3
 801509a:	41b2      	sbcs	r2, r6
 801509c:	d31c      	bcc.n	80150d8 <rmw_time_equal+0x88>
 801509e:	4c15      	ldr	r4, [pc, #84]	@ (80150f4 <rmw_time_equal+0xa4>)
 80150a0:	fba3 3204 	umull	r3, r2, r3, r4
 80150a4:	fb04 2206 	mla	r2, r4, r6, r2
 80150a8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80150ac:	43de      	mvns	r6, r3
 80150ae:	1a84      	subs	r4, r0, r2
 80150b0:	42ae      	cmp	r6, r5
 80150b2:	41bc      	sbcs	r4, r7
 80150b4:	d315      	bcc.n	80150e2 <rmw_time_equal+0x92>
 80150b6:	195b      	adds	r3, r3, r5
 80150b8:	eb42 0207 	adc.w	r2, r2, r7
 80150bc:	428a      	cmp	r2, r1
 80150be:	bf08      	it	eq
 80150c0:	4563      	cmpeq	r3, ip
 80150c2:	bf0c      	ite	eq
 80150c4:	2001      	moveq	r0, #1
 80150c6:	2000      	movne	r0, #0
 80150c8:	b004      	add	sp, #16
 80150ca:	bcf0      	pop	{r4, r5, r6, r7}
 80150cc:	4770      	bx	lr
 80150ce:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80150d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150d6:	e7d9      	b.n	801508c <rmw_time_equal+0x3c>
 80150d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150dc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80150e0:	e7ec      	b.n	80150bc <rmw_time_equal+0x6c>
 80150e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150e6:	4602      	mov	r2, r0
 80150e8:	e7e8      	b.n	80150bc <rmw_time_equal+0x6c>
 80150ea:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80150ee:	e7cd      	b.n	801508c <rmw_time_equal+0x3c>
 80150f0:	25c17d04 	.word	0x25c17d04
 80150f4:	3b9aca00 	.word	0x3b9aca00

080150f8 <rmw_time_total_nsec>:
 80150f8:	b470      	push	{r4, r5, r6}
 80150fa:	b085      	sub	sp, #20
 80150fc:	ac04      	add	r4, sp, #16
 80150fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015102:	4603      	mov	r3, r0
 8015104:	4912      	ldr	r1, [pc, #72]	@ (8015150 <rmw_time_total_nsec+0x58>)
 8015106:	9e03      	ldr	r6, [sp, #12]
 8015108:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801510c:	2202      	movs	r2, #2
 801510e:	4299      	cmp	r1, r3
 8015110:	41aa      	sbcs	r2, r5
 8015112:	d311      	bcc.n	8015138 <rmw_time_total_nsec+0x40>
 8015114:	4c0f      	ldr	r4, [pc, #60]	@ (8015154 <rmw_time_total_nsec+0x5c>)
 8015116:	fba3 3204 	umull	r3, r2, r3, r4
 801511a:	fb04 2205 	mla	r2, r4, r5, r2
 801511e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015122:	43dd      	mvns	r5, r3
 8015124:	1a8c      	subs	r4, r1, r2
 8015126:	4285      	cmp	r5, r0
 8015128:	41b4      	sbcs	r4, r6
 801512a:	d30c      	bcc.n	8015146 <rmw_time_total_nsec+0x4e>
 801512c:	1818      	adds	r0, r3, r0
 801512e:	eb42 0106 	adc.w	r1, r2, r6
 8015132:	b005      	add	sp, #20
 8015134:	bc70      	pop	{r4, r5, r6}
 8015136:	4770      	bx	lr
 8015138:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801513c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015140:	b005      	add	sp, #20
 8015142:	bc70      	pop	{r4, r5, r6}
 8015144:	4770      	bx	lr
 8015146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801514a:	b005      	add	sp, #20
 801514c:	bc70      	pop	{r4, r5, r6}
 801514e:	4770      	bx	lr
 8015150:	25c17d04 	.word	0x25c17d04
 8015154:	3b9aca00 	.word	0x3b9aca00

08015158 <rmw_get_zero_initialized_message_info>:
 8015158:	b510      	push	{r4, lr}
 801515a:	2240      	movs	r2, #64	@ 0x40
 801515c:	4604      	mov	r4, r0
 801515e:	2100      	movs	r1, #0
 8015160:	f004 fa45 	bl	80195ee <memset>
 8015164:	4620      	mov	r0, r4
 8015166:	bd10      	pop	{r4, pc}

08015168 <rmw_validate_full_topic_name>:
 8015168:	2800      	cmp	r0, #0
 801516a:	d057      	beq.n	801521c <rmw_validate_full_topic_name+0xb4>
 801516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015170:	460d      	mov	r5, r1
 8015172:	2900      	cmp	r1, #0
 8015174:	d054      	beq.n	8015220 <rmw_validate_full_topic_name+0xb8>
 8015176:	4616      	mov	r6, r2
 8015178:	4604      	mov	r4, r0
 801517a:	f7eb f841 	bl	8000200 <strlen>
 801517e:	b148      	cbz	r0, 8015194 <rmw_validate_full_topic_name+0x2c>
 8015180:	7823      	ldrb	r3, [r4, #0]
 8015182:	2b2f      	cmp	r3, #47	@ 0x2f
 8015184:	d00d      	beq.n	80151a2 <rmw_validate_full_topic_name+0x3a>
 8015186:	2302      	movs	r3, #2
 8015188:	602b      	str	r3, [r5, #0]
 801518a:	b13e      	cbz	r6, 801519c <rmw_validate_full_topic_name+0x34>
 801518c:	2000      	movs	r0, #0
 801518e:	6030      	str	r0, [r6, #0]
 8015190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015194:	2301      	movs	r3, #1
 8015196:	602b      	str	r3, [r5, #0]
 8015198:	2e00      	cmp	r6, #0
 801519a:	d1f7      	bne.n	801518c <rmw_validate_full_topic_name+0x24>
 801519c:	2000      	movs	r0, #0
 801519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151a2:	1e43      	subs	r3, r0, #1
 80151a4:	5ce2      	ldrb	r2, [r4, r3]
 80151a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80151a8:	d03c      	beq.n	8015224 <rmw_validate_full_topic_name+0xbc>
 80151aa:	1e63      	subs	r3, r4, #1
 80151ac:	eb03 0800 	add.w	r8, r3, r0
 80151b0:	f1c4 0e01 	rsb	lr, r4, #1
 80151b4:	eb0e 0703 	add.w	r7, lr, r3
 80151b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80151bc:	f021 0220 	bic.w	r2, r1, #32
 80151c0:	3a41      	subs	r2, #65	@ 0x41
 80151c2:	2a19      	cmp	r2, #25
 80151c4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80151c8:	d90b      	bls.n	80151e2 <rmw_validate_full_topic_name+0x7a>
 80151ca:	295f      	cmp	r1, #95	@ 0x5f
 80151cc:	d009      	beq.n	80151e2 <rmw_validate_full_topic_name+0x7a>
 80151ce:	f1bc 0f0a 	cmp.w	ip, #10
 80151d2:	d906      	bls.n	80151e2 <rmw_validate_full_topic_name+0x7a>
 80151d4:	2304      	movs	r3, #4
 80151d6:	602b      	str	r3, [r5, #0]
 80151d8:	2e00      	cmp	r6, #0
 80151da:	d0df      	beq.n	801519c <rmw_validate_full_topic_name+0x34>
 80151dc:	6037      	str	r7, [r6, #0]
 80151de:	2000      	movs	r0, #0
 80151e0:	e7d6      	b.n	8015190 <rmw_validate_full_topic_name+0x28>
 80151e2:	4543      	cmp	r3, r8
 80151e4:	d1e6      	bne.n	80151b4 <rmw_validate_full_topic_name+0x4c>
 80151e6:	4f1a      	ldr	r7, [pc, #104]	@ (8015250 <rmw_validate_full_topic_name+0xe8>)
 80151e8:	2301      	movs	r3, #1
 80151ea:	e004      	b.n	80151f6 <rmw_validate_full_topic_name+0x8e>
 80151ec:	4298      	cmp	r0, r3
 80151ee:	f104 0401 	add.w	r4, r4, #1
 80151f2:	d91c      	bls.n	801522e <rmw_validate_full_topic_name+0xc6>
 80151f4:	4613      	mov	r3, r2
 80151f6:	4298      	cmp	r0, r3
 80151f8:	f103 0201 	add.w	r2, r3, #1
 80151fc:	d0f6      	beq.n	80151ec <rmw_validate_full_topic_name+0x84>
 80151fe:	7821      	ldrb	r1, [r4, #0]
 8015200:	292f      	cmp	r1, #47	@ 0x2f
 8015202:	d1f3      	bne.n	80151ec <rmw_validate_full_topic_name+0x84>
 8015204:	7861      	ldrb	r1, [r4, #1]
 8015206:	292f      	cmp	r1, #47	@ 0x2f
 8015208:	d01c      	beq.n	8015244 <rmw_validate_full_topic_name+0xdc>
 801520a:	5dc9      	ldrb	r1, [r1, r7]
 801520c:	0749      	lsls	r1, r1, #29
 801520e:	d5ed      	bpl.n	80151ec <rmw_validate_full_topic_name+0x84>
 8015210:	2206      	movs	r2, #6
 8015212:	602a      	str	r2, [r5, #0]
 8015214:	2e00      	cmp	r6, #0
 8015216:	d0c1      	beq.n	801519c <rmw_validate_full_topic_name+0x34>
 8015218:	6033      	str	r3, [r6, #0]
 801521a:	e7bf      	b.n	801519c <rmw_validate_full_topic_name+0x34>
 801521c:	200b      	movs	r0, #11
 801521e:	4770      	bx	lr
 8015220:	200b      	movs	r0, #11
 8015222:	e7b5      	b.n	8015190 <rmw_validate_full_topic_name+0x28>
 8015224:	2203      	movs	r2, #3
 8015226:	602a      	str	r2, [r5, #0]
 8015228:	2e00      	cmp	r6, #0
 801522a:	d1f5      	bne.n	8015218 <rmw_validate_full_topic_name+0xb0>
 801522c:	e7b6      	b.n	801519c <rmw_validate_full_topic_name+0x34>
 801522e:	28f7      	cmp	r0, #247	@ 0xf7
 8015230:	d802      	bhi.n	8015238 <rmw_validate_full_topic_name+0xd0>
 8015232:	2000      	movs	r0, #0
 8015234:	6028      	str	r0, [r5, #0]
 8015236:	e7ab      	b.n	8015190 <rmw_validate_full_topic_name+0x28>
 8015238:	2307      	movs	r3, #7
 801523a:	602b      	str	r3, [r5, #0]
 801523c:	2e00      	cmp	r6, #0
 801523e:	d0ad      	beq.n	801519c <rmw_validate_full_topic_name+0x34>
 8015240:	23f6      	movs	r3, #246	@ 0xf6
 8015242:	e7e9      	b.n	8015218 <rmw_validate_full_topic_name+0xb0>
 8015244:	2205      	movs	r2, #5
 8015246:	602a      	str	r2, [r5, #0]
 8015248:	2e00      	cmp	r6, #0
 801524a:	d1e5      	bne.n	8015218 <rmw_validate_full_topic_name+0xb0>
 801524c:	e7a6      	b.n	801519c <rmw_validate_full_topic_name+0x34>
 801524e:	bf00      	nop
 8015250:	0801bb5e 	.word	0x0801bb5e

08015254 <rmw_validate_namespace_with_size>:
 8015254:	b340      	cbz	r0, 80152a8 <rmw_validate_namespace_with_size+0x54>
 8015256:	b570      	push	{r4, r5, r6, lr}
 8015258:	4614      	mov	r4, r2
 801525a:	b0c2      	sub	sp, #264	@ 0x108
 801525c:	b332      	cbz	r2, 80152ac <rmw_validate_namespace_with_size+0x58>
 801525e:	2901      	cmp	r1, #1
 8015260:	460d      	mov	r5, r1
 8015262:	461e      	mov	r6, r3
 8015264:	d102      	bne.n	801526c <rmw_validate_namespace_with_size+0x18>
 8015266:	7803      	ldrb	r3, [r0, #0]
 8015268:	2b2f      	cmp	r3, #47	@ 0x2f
 801526a:	d012      	beq.n	8015292 <rmw_validate_namespace_with_size+0x3e>
 801526c:	aa01      	add	r2, sp, #4
 801526e:	4669      	mov	r1, sp
 8015270:	f7ff ff7a 	bl	8015168 <rmw_validate_full_topic_name>
 8015274:	b978      	cbnz	r0, 8015296 <rmw_validate_namespace_with_size+0x42>
 8015276:	9b00      	ldr	r3, [sp, #0]
 8015278:	b14b      	cbz	r3, 801528e <rmw_validate_namespace_with_size+0x3a>
 801527a:	2b07      	cmp	r3, #7
 801527c:	d007      	beq.n	801528e <rmw_validate_namespace_with_size+0x3a>
 801527e:	1e5a      	subs	r2, r3, #1
 8015280:	2a05      	cmp	r2, #5
 8015282:	d82b      	bhi.n	80152dc <rmw_validate_namespace_with_size+0x88>
 8015284:	e8df f002 	tbb	[pc, r2]
 8015288:	1e212427 	.word	0x1e212427
 801528c:	141b      	.short	0x141b
 801528e:	2df5      	cmp	r5, #245	@ 0xf5
 8015290:	d803      	bhi.n	801529a <rmw_validate_namespace_with_size+0x46>
 8015292:	2000      	movs	r0, #0
 8015294:	6020      	str	r0, [r4, #0]
 8015296:	b042      	add	sp, #264	@ 0x108
 8015298:	bd70      	pop	{r4, r5, r6, pc}
 801529a:	2307      	movs	r3, #7
 801529c:	6023      	str	r3, [r4, #0]
 801529e:	2e00      	cmp	r6, #0
 80152a0:	d0f9      	beq.n	8015296 <rmw_validate_namespace_with_size+0x42>
 80152a2:	23f4      	movs	r3, #244	@ 0xf4
 80152a4:	6033      	str	r3, [r6, #0]
 80152a6:	e7f6      	b.n	8015296 <rmw_validate_namespace_with_size+0x42>
 80152a8:	200b      	movs	r0, #11
 80152aa:	4770      	bx	lr
 80152ac:	200b      	movs	r0, #11
 80152ae:	e7f2      	b.n	8015296 <rmw_validate_namespace_with_size+0x42>
 80152b0:	2306      	movs	r3, #6
 80152b2:	6023      	str	r3, [r4, #0]
 80152b4:	2e00      	cmp	r6, #0
 80152b6:	d0ee      	beq.n	8015296 <rmw_validate_namespace_with_size+0x42>
 80152b8:	9b01      	ldr	r3, [sp, #4]
 80152ba:	6033      	str	r3, [r6, #0]
 80152bc:	e7eb      	b.n	8015296 <rmw_validate_namespace_with_size+0x42>
 80152be:	2305      	movs	r3, #5
 80152c0:	6023      	str	r3, [r4, #0]
 80152c2:	e7f7      	b.n	80152b4 <rmw_validate_namespace_with_size+0x60>
 80152c4:	2304      	movs	r3, #4
 80152c6:	6023      	str	r3, [r4, #0]
 80152c8:	e7f4      	b.n	80152b4 <rmw_validate_namespace_with_size+0x60>
 80152ca:	2303      	movs	r3, #3
 80152cc:	6023      	str	r3, [r4, #0]
 80152ce:	e7f1      	b.n	80152b4 <rmw_validate_namespace_with_size+0x60>
 80152d0:	2302      	movs	r3, #2
 80152d2:	6023      	str	r3, [r4, #0]
 80152d4:	e7ee      	b.n	80152b4 <rmw_validate_namespace_with_size+0x60>
 80152d6:	2301      	movs	r3, #1
 80152d8:	6023      	str	r3, [r4, #0]
 80152da:	e7eb      	b.n	80152b4 <rmw_validate_namespace_with_size+0x60>
 80152dc:	4a03      	ldr	r2, [pc, #12]	@ (80152ec <rmw_validate_namespace_with_size+0x98>)
 80152de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80152e2:	a802      	add	r0, sp, #8
 80152e4:	f7ff fcda 	bl	8014c9c <rcutils_snprintf>
 80152e8:	2001      	movs	r0, #1
 80152ea:	e7d4      	b.n	8015296 <rmw_validate_namespace_with_size+0x42>
 80152ec:	0801b48c 	.word	0x0801b48c

080152f0 <rmw_validate_namespace>:
 80152f0:	b168      	cbz	r0, 801530e <rmw_validate_namespace+0x1e>
 80152f2:	b570      	push	{r4, r5, r6, lr}
 80152f4:	460d      	mov	r5, r1
 80152f6:	4616      	mov	r6, r2
 80152f8:	4604      	mov	r4, r0
 80152fa:	f7ea ff81 	bl	8000200 <strlen>
 80152fe:	4633      	mov	r3, r6
 8015300:	4601      	mov	r1, r0
 8015302:	462a      	mov	r2, r5
 8015304:	4620      	mov	r0, r4
 8015306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801530a:	f7ff bfa3 	b.w	8015254 <rmw_validate_namespace_with_size>
 801530e:	200b      	movs	r0, #11
 8015310:	4770      	bx	lr
 8015312:	bf00      	nop

08015314 <rmw_namespace_validation_result_string>:
 8015314:	2807      	cmp	r0, #7
 8015316:	bf9a      	itte	ls
 8015318:	4b02      	ldrls	r3, [pc, #8]	@ (8015324 <rmw_namespace_validation_result_string+0x10>)
 801531a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801531e:	4802      	ldrhi	r0, [pc, #8]	@ (8015328 <rmw_namespace_validation_result_string+0x14>)
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop
 8015324:	0801b684 	.word	0x0801b684
 8015328:	0801b4dc 	.word	0x0801b4dc

0801532c <rmw_validate_node_name>:
 801532c:	2800      	cmp	r0, #0
 801532e:	d03b      	beq.n	80153a8 <rmw_validate_node_name+0x7c>
 8015330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015334:	460d      	mov	r5, r1
 8015336:	2900      	cmp	r1, #0
 8015338:	d038      	beq.n	80153ac <rmw_validate_node_name+0x80>
 801533a:	4616      	mov	r6, r2
 801533c:	4604      	mov	r4, r0
 801533e:	f7ea ff5f 	bl	8000200 <strlen>
 8015342:	b1e0      	cbz	r0, 801537e <rmw_validate_node_name+0x52>
 8015344:	1e63      	subs	r3, r4, #1
 8015346:	eb03 0800 	add.w	r8, r3, r0
 801534a:	f1c4 0101 	rsb	r1, r4, #1
 801534e:	18cf      	adds	r7, r1, r3
 8015350:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015354:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015358:	f02e 0c20 	bic.w	ip, lr, #32
 801535c:	2a09      	cmp	r2, #9
 801535e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015362:	d914      	bls.n	801538e <rmw_validate_node_name+0x62>
 8015364:	f1bc 0f19 	cmp.w	ip, #25
 8015368:	d911      	bls.n	801538e <rmw_validate_node_name+0x62>
 801536a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801536e:	d00e      	beq.n	801538e <rmw_validate_node_name+0x62>
 8015370:	2302      	movs	r3, #2
 8015372:	602b      	str	r3, [r5, #0]
 8015374:	b106      	cbz	r6, 8015378 <rmw_validate_node_name+0x4c>
 8015376:	6037      	str	r7, [r6, #0]
 8015378:	2000      	movs	r0, #0
 801537a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801537e:	2301      	movs	r3, #1
 8015380:	602b      	str	r3, [r5, #0]
 8015382:	2e00      	cmp	r6, #0
 8015384:	d0f8      	beq.n	8015378 <rmw_validate_node_name+0x4c>
 8015386:	2000      	movs	r0, #0
 8015388:	6030      	str	r0, [r6, #0]
 801538a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801538e:	4543      	cmp	r3, r8
 8015390:	d1dd      	bne.n	801534e <rmw_validate_node_name+0x22>
 8015392:	7822      	ldrb	r2, [r4, #0]
 8015394:	4b0d      	ldr	r3, [pc, #52]	@ (80153cc <rmw_validate_node_name+0xa0>)
 8015396:	5cd3      	ldrb	r3, [r2, r3]
 8015398:	f013 0304 	ands.w	r3, r3, #4
 801539c:	d110      	bne.n	80153c0 <rmw_validate_node_name+0x94>
 801539e:	28ff      	cmp	r0, #255	@ 0xff
 80153a0:	d806      	bhi.n	80153b0 <rmw_validate_node_name+0x84>
 80153a2:	602b      	str	r3, [r5, #0]
 80153a4:	4618      	mov	r0, r3
 80153a6:	e7e8      	b.n	801537a <rmw_validate_node_name+0x4e>
 80153a8:	200b      	movs	r0, #11
 80153aa:	4770      	bx	lr
 80153ac:	200b      	movs	r0, #11
 80153ae:	e7e4      	b.n	801537a <rmw_validate_node_name+0x4e>
 80153b0:	2204      	movs	r2, #4
 80153b2:	602a      	str	r2, [r5, #0]
 80153b4:	2e00      	cmp	r6, #0
 80153b6:	d0df      	beq.n	8015378 <rmw_validate_node_name+0x4c>
 80153b8:	22fe      	movs	r2, #254	@ 0xfe
 80153ba:	6032      	str	r2, [r6, #0]
 80153bc:	4618      	mov	r0, r3
 80153be:	e7dc      	b.n	801537a <rmw_validate_node_name+0x4e>
 80153c0:	2303      	movs	r3, #3
 80153c2:	602b      	str	r3, [r5, #0]
 80153c4:	2e00      	cmp	r6, #0
 80153c6:	d1de      	bne.n	8015386 <rmw_validate_node_name+0x5a>
 80153c8:	e7d6      	b.n	8015378 <rmw_validate_node_name+0x4c>
 80153ca:	bf00      	nop
 80153cc:	0801bb5e 	.word	0x0801bb5e

080153d0 <rmw_node_name_validation_result_string>:
 80153d0:	2804      	cmp	r0, #4
 80153d2:	bf9a      	itte	ls
 80153d4:	4b02      	ldrls	r3, [pc, #8]	@ (80153e0 <rmw_node_name_validation_result_string+0x10>)
 80153d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80153da:	4802      	ldrhi	r0, [pc, #8]	@ (80153e4 <rmw_node_name_validation_result_string+0x14>)
 80153dc:	4770      	bx	lr
 80153de:	bf00      	nop
 80153e0:	0801b790 	.word	0x0801b790
 80153e4:	0801b6a4 	.word	0x0801b6a4

080153e8 <get_memory>:
 80153e8:	4603      	mov	r3, r0
 80153ea:	6840      	ldr	r0, [r0, #4]
 80153ec:	b158      	cbz	r0, 8015406 <get_memory+0x1e>
 80153ee:	6842      	ldr	r2, [r0, #4]
 80153f0:	605a      	str	r2, [r3, #4]
 80153f2:	b10a      	cbz	r2, 80153f8 <get_memory+0x10>
 80153f4:	2100      	movs	r1, #0
 80153f6:	6011      	str	r1, [r2, #0]
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	6042      	str	r2, [r0, #4]
 80153fc:	b102      	cbz	r2, 8015400 <get_memory+0x18>
 80153fe:	6010      	str	r0, [r2, #0]
 8015400:	2200      	movs	r2, #0
 8015402:	6002      	str	r2, [r0, #0]
 8015404:	6018      	str	r0, [r3, #0]
 8015406:	4770      	bx	lr

08015408 <put_memory>:
 8015408:	680b      	ldr	r3, [r1, #0]
 801540a:	b10b      	cbz	r3, 8015410 <put_memory+0x8>
 801540c:	684a      	ldr	r2, [r1, #4]
 801540e:	605a      	str	r2, [r3, #4]
 8015410:	684a      	ldr	r2, [r1, #4]
 8015412:	b102      	cbz	r2, 8015416 <put_memory+0xe>
 8015414:	6013      	str	r3, [r2, #0]
 8015416:	6803      	ldr	r3, [r0, #0]
 8015418:	428b      	cmp	r3, r1
 801541a:	6843      	ldr	r3, [r0, #4]
 801541c:	bf08      	it	eq
 801541e:	6002      	streq	r2, [r0, #0]
 8015420:	604b      	str	r3, [r1, #4]
 8015422:	b103      	cbz	r3, 8015426 <put_memory+0x1e>
 8015424:	6019      	str	r1, [r3, #0]
 8015426:	2300      	movs	r3, #0
 8015428:	600b      	str	r3, [r1, #0]
 801542a:	6041      	str	r1, [r0, #4]
 801542c:	4770      	bx	lr
 801542e:	bf00      	nop

08015430 <rmw_destroy_client>:
 8015430:	b570      	push	{r4, r5, r6, lr}
 8015432:	b128      	cbz	r0, 8015440 <rmw_destroy_client+0x10>
 8015434:	4604      	mov	r4, r0
 8015436:	6800      	ldr	r0, [r0, #0]
 8015438:	460d      	mov	r5, r1
 801543a:	f7f6 fdeb 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 801543e:	b910      	cbnz	r0, 8015446 <rmw_destroy_client+0x16>
 8015440:	2401      	movs	r4, #1
 8015442:	4620      	mov	r0, r4
 8015444:	bd70      	pop	{r4, r5, r6, pc}
 8015446:	6863      	ldr	r3, [r4, #4]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d0f9      	beq.n	8015440 <rmw_destroy_client+0x10>
 801544c:	2d00      	cmp	r5, #0
 801544e:	d0f7      	beq.n	8015440 <rmw_destroy_client+0x10>
 8015450:	6828      	ldr	r0, [r5, #0]
 8015452:	f7f6 fddf 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8015456:	2800      	cmp	r0, #0
 8015458:	d0f2      	beq.n	8015440 <rmw_destroy_client+0x10>
 801545a:	686e      	ldr	r6, [r5, #4]
 801545c:	2e00      	cmp	r6, #0
 801545e:	d0ef      	beq.n	8015440 <rmw_destroy_client+0x10>
 8015460:	6864      	ldr	r4, [r4, #4]
 8015462:	6932      	ldr	r2, [r6, #16]
 8015464:	6920      	ldr	r0, [r4, #16]
 8015466:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801546a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801546e:	6819      	ldr	r1, [r3, #0]
 8015470:	f002 f8c6 	bl	8017600 <uxr_buffer_cancel_data>
 8015474:	4602      	mov	r2, r0
 8015476:	6920      	ldr	r0, [r4, #16]
 8015478:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801547c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015480:	f7f6 fd48 	bl	800bf14 <run_xrce_session>
 8015484:	6920      	ldr	r0, [r4, #16]
 8015486:	6932      	ldr	r2, [r6, #16]
 8015488:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801548c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015490:	6819      	ldr	r1, [r3, #0]
 8015492:	f7f9 fe31 	bl	800f0f8 <uxr_buffer_delete_entity>
 8015496:	4602      	mov	r2, r0
 8015498:	6920      	ldr	r0, [r4, #16]
 801549a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801549e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80154a2:	f7f6 fd37 	bl	800bf14 <run_xrce_session>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	4628      	mov	r0, r5
 80154aa:	bf14      	ite	ne
 80154ac:	2400      	movne	r4, #0
 80154ae:	2402      	moveq	r4, #2
 80154b0:	f7f6 fc18 	bl	800bce4 <rmw_uxrce_fini_client_memory>
 80154b4:	e7c5      	b.n	8015442 <rmw_destroy_client+0x12>
 80154b6:	bf00      	nop

080154b8 <rmw_get_implementation_identifier>:
 80154b8:	4b01      	ldr	r3, [pc, #4]	@ (80154c0 <rmw_get_implementation_identifier+0x8>)
 80154ba:	6818      	ldr	r0, [r3, #0]
 80154bc:	4770      	bx	lr
 80154be:	bf00      	nop
 80154c0:	0801b7bc 	.word	0x0801b7bc

080154c4 <rmw_init_options_init>:
 80154c4:	b084      	sub	sp, #16
 80154c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154c8:	b083      	sub	sp, #12
 80154ca:	ad09      	add	r5, sp, #36	@ 0x24
 80154cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80154d0:	b130      	cbz	r0, 80154e0 <rmw_init_options_init+0x1c>
 80154d2:	4604      	mov	r4, r0
 80154d4:	4628      	mov	r0, r5
 80154d6:	f7f5 fff7 	bl	800b4c8 <rcutils_allocator_is_valid>
 80154da:	b108      	cbz	r0, 80154e0 <rmw_init_options_init+0x1c>
 80154dc:	68a6      	ldr	r6, [r4, #8]
 80154de:	b12e      	cbz	r6, 80154ec <rmw_init_options_init+0x28>
 80154e0:	200b      	movs	r0, #11
 80154e2:	b003      	add	sp, #12
 80154e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80154e8:	b004      	add	sp, #16
 80154ea:	4770      	bx	lr
 80154ec:	2200      	movs	r2, #0
 80154ee:	2300      	movs	r3, #0
 80154f0:	e9c4 2300 	strd	r2, r3, [r4]
 80154f4:	4b22      	ldr	r3, [pc, #136]	@ (8015580 <rmw_init_options_init+0xbc>)
 80154f6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8015590 <rmw_init_options_init+0xcc>
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	60a3      	str	r3, [r4, #8]
 80154fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015500:	f104 0c20 	add.w	ip, r4, #32
 8015504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015508:	466f      	mov	r7, sp
 801550a:	682b      	ldr	r3, [r5, #0]
 801550c:	f8cc 3000 	str.w	r3, [ip]
 8015510:	4638      	mov	r0, r7
 8015512:	f8c4 e01c 	str.w	lr, [r4, #28]
 8015516:	60e6      	str	r6, [r4, #12]
 8015518:	f7ff fd76 	bl	8015008 <rmw_get_default_security_options>
 801551c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015520:	f104 0310 	add.w	r3, r4, #16
 8015524:	e883 0003 	stmia.w	r3, {r0, r1}
 8015528:	2203      	movs	r2, #3
 801552a:	4816      	ldr	r0, [pc, #88]	@ (8015584 <rmw_init_options_init+0xc0>)
 801552c:	4916      	ldr	r1, [pc, #88]	@ (8015588 <rmw_init_options_init+0xc4>)
 801552e:	7626      	strb	r6, [r4, #24]
 8015530:	f7f6 fb18 	bl	800bb64 <rmw_uxrce_init_init_options_impl_memory>
 8015534:	4813      	ldr	r0, [pc, #76]	@ (8015584 <rmw_init_options_init+0xc0>)
 8015536:	f7ff ff57 	bl	80153e8 <get_memory>
 801553a:	b1f0      	cbz	r0, 801557a <rmw_init_options_init+0xb6>
 801553c:	4a13      	ldr	r2, [pc, #76]	@ (801558c <rmw_init_options_init+0xc8>)
 801553e:	6883      	ldr	r3, [r0, #8]
 8015540:	6851      	ldr	r1, [r2, #4]
 8015542:	7810      	ldrb	r0, [r2, #0]
 8015544:	6363      	str	r3, [r4, #52]	@ 0x34
 8015546:	7418      	strb	r0, [r3, #16]
 8015548:	6159      	str	r1, [r3, #20]
 801554a:	68d1      	ldr	r1, [r2, #12]
 801554c:	61d9      	str	r1, [r3, #28]
 801554e:	6911      	ldr	r1, [r2, #16]
 8015550:	6219      	str	r1, [r3, #32]
 8015552:	6951      	ldr	r1, [r2, #20]
 8015554:	6892      	ldr	r2, [r2, #8]
 8015556:	619a      	str	r2, [r3, #24]
 8015558:	6259      	str	r1, [r3, #36]	@ 0x24
 801555a:	f7fb fa29 	bl	80109b0 <uxr_nanos>
 801555e:	f003 fc11 	bl	8018d84 <srand>
 8015562:	f003 fc3d 	bl	8018de0 <rand>
 8015566:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015568:	6298      	str	r0, [r3, #40]	@ 0x28
 801556a:	2800      	cmp	r0, #0
 801556c:	d0f9      	beq.n	8015562 <rmw_init_options_init+0x9e>
 801556e:	2000      	movs	r0, #0
 8015570:	b003      	add	sp, #12
 8015572:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015576:	b004      	add	sp, #16
 8015578:	4770      	bx	lr
 801557a:	2001      	movs	r0, #1
 801557c:	e7b1      	b.n	80154e2 <rmw_init_options_init+0x1e>
 801557e:	bf00      	nop
 8015580:	0801b7bc 	.word	0x0801b7bc
 8015584:	20015394 	.word	0x20015394
 8015588:	20010c30 	.word	0x20010c30
 801558c:	20010abc 	.word	0x20010abc
 8015590:	0801b224 	.word	0x0801b224

08015594 <rmw_init_options_copy>:
 8015594:	b570      	push	{r4, r5, r6, lr}
 8015596:	b158      	cbz	r0, 80155b0 <rmw_init_options_copy+0x1c>
 8015598:	460d      	mov	r5, r1
 801559a:	b149      	cbz	r1, 80155b0 <rmw_init_options_copy+0x1c>
 801559c:	4604      	mov	r4, r0
 801559e:	6880      	ldr	r0, [r0, #8]
 80155a0:	b120      	cbz	r0, 80155ac <rmw_init_options_copy+0x18>
 80155a2:	4b1e      	ldr	r3, [pc, #120]	@ (801561c <rmw_init_options_copy+0x88>)
 80155a4:	6819      	ldr	r1, [r3, #0]
 80155a6:	f7ea fe33 	bl	8000210 <strcmp>
 80155aa:	bb90      	cbnz	r0, 8015612 <rmw_init_options_copy+0x7e>
 80155ac:	68ab      	ldr	r3, [r5, #8]
 80155ae:	b113      	cbz	r3, 80155b6 <rmw_init_options_copy+0x22>
 80155b0:	250b      	movs	r5, #11
 80155b2:	4628      	mov	r0, r5
 80155b4:	bd70      	pop	{r4, r5, r6, pc}
 80155b6:	4623      	mov	r3, r4
 80155b8:	462a      	mov	r2, r5
 80155ba:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80155be:	f8d3 c000 	ldr.w	ip, [r3]
 80155c2:	6858      	ldr	r0, [r3, #4]
 80155c4:	6899      	ldr	r1, [r3, #8]
 80155c6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80155ca:	f8c2 e00c 	str.w	lr, [r2, #12]
 80155ce:	3310      	adds	r3, #16
 80155d0:	42b3      	cmp	r3, r6
 80155d2:	f8c2 c000 	str.w	ip, [r2]
 80155d6:	6050      	str	r0, [r2, #4]
 80155d8:	6091      	str	r1, [r2, #8]
 80155da:	f102 0210 	add.w	r2, r2, #16
 80155de:	d1ee      	bne.n	80155be <rmw_init_options_copy+0x2a>
 80155e0:	6819      	ldr	r1, [r3, #0]
 80155e2:	685b      	ldr	r3, [r3, #4]
 80155e4:	480e      	ldr	r0, [pc, #56]	@ (8015620 <rmw_init_options_copy+0x8c>)
 80155e6:	6053      	str	r3, [r2, #4]
 80155e8:	6011      	str	r1, [r2, #0]
 80155ea:	f7ff fefd 	bl	80153e8 <get_memory>
 80155ee:	b198      	cbz	r0, 8015618 <rmw_init_options_copy+0x84>
 80155f0:	6883      	ldr	r3, [r0, #8]
 80155f2:	636b      	str	r3, [r5, #52]	@ 0x34
 80155f4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80155f6:	f102 0c10 	add.w	ip, r2, #16
 80155fa:	f103 0410 	add.w	r4, r3, #16
 80155fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015604:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015608:	2500      	movs	r5, #0
 801560a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801560e:	4628      	mov	r0, r5
 8015610:	bd70      	pop	{r4, r5, r6, pc}
 8015612:	250c      	movs	r5, #12
 8015614:	4628      	mov	r0, r5
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	2501      	movs	r5, #1
 801561a:	e7ca      	b.n	80155b2 <rmw_init_options_copy+0x1e>
 801561c:	0801b7bc 	.word	0x0801b7bc
 8015620:	20015394 	.word	0x20015394

08015624 <rmw_init_options_fini>:
 8015624:	2800      	cmp	r0, #0
 8015626:	d03d      	beq.n	80156a4 <rmw_init_options_fini+0x80>
 8015628:	b510      	push	{r4, lr}
 801562a:	4604      	mov	r4, r0
 801562c:	b08e      	sub	sp, #56	@ 0x38
 801562e:	3020      	adds	r0, #32
 8015630:	f7f5 ff4a 	bl	800b4c8 <rcutils_allocator_is_valid>
 8015634:	b360      	cbz	r0, 8015690 <rmw_init_options_fini+0x6c>
 8015636:	68a0      	ldr	r0, [r4, #8]
 8015638:	b120      	cbz	r0, 8015644 <rmw_init_options_fini+0x20>
 801563a:	4b1c      	ldr	r3, [pc, #112]	@ (80156ac <rmw_init_options_fini+0x88>)
 801563c:	6819      	ldr	r1, [r3, #0]
 801563e:	f7ea fde7 	bl	8000210 <strcmp>
 8015642:	bb68      	cbnz	r0, 80156a0 <rmw_init_options_fini+0x7c>
 8015644:	4b1a      	ldr	r3, [pc, #104]	@ (80156b0 <rmw_init_options_fini+0x8c>)
 8015646:	6819      	ldr	r1, [r3, #0]
 8015648:	b331      	cbz	r1, 8015698 <rmw_init_options_fini+0x74>
 801564a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801564c:	e001      	b.n	8015652 <rmw_init_options_fini+0x2e>
 801564e:	6849      	ldr	r1, [r1, #4]
 8015650:	b311      	cbz	r1, 8015698 <rmw_init_options_fini+0x74>
 8015652:	688b      	ldr	r3, [r1, #8]
 8015654:	429a      	cmp	r2, r3
 8015656:	d1fa      	bne.n	801564e <rmw_init_options_fini+0x2a>
 8015658:	4815      	ldr	r0, [pc, #84]	@ (80156b0 <rmw_init_options_fini+0x8c>)
 801565a:	f7ff fed5 	bl	8015408 <put_memory>
 801565e:	4668      	mov	r0, sp
 8015660:	f7ff fcc2 	bl	8014fe8 <rmw_get_zero_initialized_init_options>
 8015664:	46ee      	mov	lr, sp
 8015666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801566a:	46a4      	mov	ip, r4
 801566c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015670:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015678:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801567c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015680:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015684:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015688:	2300      	movs	r3, #0
 801568a:	4618      	mov	r0, r3
 801568c:	b00e      	add	sp, #56	@ 0x38
 801568e:	bd10      	pop	{r4, pc}
 8015690:	230b      	movs	r3, #11
 8015692:	4618      	mov	r0, r3
 8015694:	b00e      	add	sp, #56	@ 0x38
 8015696:	bd10      	pop	{r4, pc}
 8015698:	2301      	movs	r3, #1
 801569a:	4618      	mov	r0, r3
 801569c:	b00e      	add	sp, #56	@ 0x38
 801569e:	bd10      	pop	{r4, pc}
 80156a0:	230c      	movs	r3, #12
 80156a2:	e7f2      	b.n	801568a <rmw_init_options_fini+0x66>
 80156a4:	230b      	movs	r3, #11
 80156a6:	4618      	mov	r0, r3
 80156a8:	4770      	bx	lr
 80156aa:	bf00      	nop
 80156ac:	0801b7bc 	.word	0x0801b7bc
 80156b0:	20015394 	.word	0x20015394

080156b4 <rmw_init>:
 80156b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156b8:	b083      	sub	sp, #12
 80156ba:	2800      	cmp	r0, #0
 80156bc:	f000 80d3 	beq.w	8015866 <rmw_init+0x1b2>
 80156c0:	460e      	mov	r6, r1
 80156c2:	2900      	cmp	r1, #0
 80156c4:	f000 80cf 	beq.w	8015866 <rmw_init+0x1b2>
 80156c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80156ca:	4605      	mov	r5, r0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	f000 80ca 	beq.w	8015866 <rmw_init+0x1b2>
 80156d2:	4b78      	ldr	r3, [pc, #480]	@ (80158b4 <rmw_init+0x200>)
 80156d4:	6880      	ldr	r0, [r0, #8]
 80156d6:	681f      	ldr	r7, [r3, #0]
 80156d8:	b128      	cbz	r0, 80156e6 <rmw_init+0x32>
 80156da:	4639      	mov	r1, r7
 80156dc:	f7ea fd98 	bl	8000210 <strcmp>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	f040 80ca 	bne.w	801587a <rmw_init+0x1c6>
 80156e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80156ea:	4c73      	ldr	r4, [pc, #460]	@ (80158b8 <rmw_init+0x204>)
 80156ec:	4973      	ldr	r1, [pc, #460]	@ (80158bc <rmw_init+0x208>)
 80156ee:	4874      	ldr	r0, [pc, #464]	@ (80158c0 <rmw_init+0x20c>)
 80156f0:	60b7      	str	r7, [r6, #8]
 80156f2:	e9c6 2300 	strd	r2, r3, [r6]
 80156f6:	68eb      	ldr	r3, [r5, #12]
 80156f8:	64b3      	str	r3, [r6, #72]	@ 0x48
 80156fa:	2201      	movs	r2, #1
 80156fc:	f7f6 f9d2 	bl	800baa4 <rmw_uxrce_init_session_memory>
 8015700:	4620      	mov	r0, r4
 8015702:	4970      	ldr	r1, [pc, #448]	@ (80158c4 <rmw_init+0x210>)
 8015704:	2204      	movs	r2, #4
 8015706:	f7f6 fa0d 	bl	800bb24 <rmw_uxrce_init_static_input_buffer_memory>
 801570a:	f04f 0800 	mov.w	r8, #0
 801570e:	486c      	ldr	r0, [pc, #432]	@ (80158c0 <rmw_init+0x20c>)
 8015710:	f884 800d 	strb.w	r8, [r4, #13]
 8015714:	f7ff fe68 	bl	80153e8 <get_memory>
 8015718:	2800      	cmp	r0, #0
 801571a:	f000 80a9 	beq.w	8015870 <rmw_init+0x1bc>
 801571e:	6884      	ldr	r4, [r0, #8]
 8015720:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8015722:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8015724:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015728:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801572c:	9101      	str	r1, [sp, #4]
 801572e:	6a00      	ldr	r0, [r0, #32]
 8015730:	9000      	str	r0, [sp, #0]
 8015732:	f104 0910 	add.w	r9, r4, #16
 8015736:	4661      	mov	r1, ip
 8015738:	4648      	mov	r0, r9
 801573a:	f001 f999 	bl	8016a70 <uxr_set_custom_transport_callbacks>
 801573e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8015742:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015746:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801574a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801574e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8015752:	495d      	ldr	r1, [pc, #372]	@ (80158c8 <rmw_init+0x214>)
 8015754:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8015758:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801575c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8015760:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8015764:	4859      	ldr	r0, [pc, #356]	@ (80158cc <rmw_init+0x218>)
 8015766:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801576a:	2201      	movs	r2, #1
 801576c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801576e:	f7f6 f979 	bl	800ba64 <rmw_uxrce_init_node_memory>
 8015772:	4957      	ldr	r1, [pc, #348]	@ (80158d0 <rmw_init+0x21c>)
 8015774:	4857      	ldr	r0, [pc, #348]	@ (80158d4 <rmw_init+0x220>)
 8015776:	2205      	movs	r2, #5
 8015778:	f7f6 f954 	bl	800ba24 <rmw_uxrce_init_subscription_memory>
 801577c:	4956      	ldr	r1, [pc, #344]	@ (80158d8 <rmw_init+0x224>)
 801577e:	4857      	ldr	r0, [pc, #348]	@ (80158dc <rmw_init+0x228>)
 8015780:	220a      	movs	r2, #10
 8015782:	f7f6 f92f 	bl	800b9e4 <rmw_uxrce_init_publisher_memory>
 8015786:	4956      	ldr	r1, [pc, #344]	@ (80158e0 <rmw_init+0x22c>)
 8015788:	4856      	ldr	r0, [pc, #344]	@ (80158e4 <rmw_init+0x230>)
 801578a:	2201      	movs	r2, #1
 801578c:	f7f6 f8ea 	bl	800b964 <rmw_uxrce_init_service_memory>
 8015790:	4955      	ldr	r1, [pc, #340]	@ (80158e8 <rmw_init+0x234>)
 8015792:	4856      	ldr	r0, [pc, #344]	@ (80158ec <rmw_init+0x238>)
 8015794:	2201      	movs	r2, #1
 8015796:	f7f6 f905 	bl	800b9a4 <rmw_uxrce_init_client_memory>
 801579a:	4955      	ldr	r1, [pc, #340]	@ (80158f0 <rmw_init+0x23c>)
 801579c:	4855      	ldr	r0, [pc, #340]	@ (80158f4 <rmw_init+0x240>)
 801579e:	220f      	movs	r2, #15
 80157a0:	f7f6 f9a0 	bl	800bae4 <rmw_uxrce_init_topic_memory>
 80157a4:	4954      	ldr	r1, [pc, #336]	@ (80158f8 <rmw_init+0x244>)
 80157a6:	4855      	ldr	r0, [pc, #340]	@ (80158fc <rmw_init+0x248>)
 80157a8:	2203      	movs	r2, #3
 80157aa:	f7f6 f9db 	bl	800bb64 <rmw_uxrce_init_init_options_impl_memory>
 80157ae:	4954      	ldr	r1, [pc, #336]	@ (8015900 <rmw_init+0x24c>)
 80157b0:	4854      	ldr	r0, [pc, #336]	@ (8015904 <rmw_init+0x250>)
 80157b2:	2204      	movs	r2, #4
 80157b4:	f7f6 f9f6 	bl	800bba4 <rmw_uxrce_init_wait_set_memory>
 80157b8:	4953      	ldr	r1, [pc, #332]	@ (8015908 <rmw_init+0x254>)
 80157ba:	4854      	ldr	r0, [pc, #336]	@ (801590c <rmw_init+0x258>)
 80157bc:	2204      	movs	r2, #4
 80157be:	f7f6 fa11 	bl	800bbe4 <rmw_uxrce_init_guard_condition_memory>
 80157c2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80157c4:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80157c6:	4642      	mov	r2, r8
 80157c8:	f000 fd9e 	bl	8016308 <rmw_uxrce_transport_init>
 80157cc:	4607      	mov	r7, r0
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d158      	bne.n	8015884 <rmw_init+0x1d0>
 80157d2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80157d4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80157d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80157da:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80157de:	4628      	mov	r0, r5
 80157e0:	f7f9 ff4a 	bl	800f678 <uxr_init_session>
 80157e4:	494a      	ldr	r1, [pc, #296]	@ (8015910 <rmw_init+0x25c>)
 80157e6:	4622      	mov	r2, r4
 80157e8:	4628      	mov	r0, r5
 80157ea:	f7f9 ff69 	bl	800f6c0 <uxr_set_topic_callback>
 80157ee:	4949      	ldr	r1, [pc, #292]	@ (8015914 <rmw_init+0x260>)
 80157f0:	463a      	mov	r2, r7
 80157f2:	4628      	mov	r0, r5
 80157f4:	f7f9 ff60 	bl	800f6b8 <uxr_set_status_callback>
 80157f8:	4947      	ldr	r1, [pc, #284]	@ (8015918 <rmw_init+0x264>)
 80157fa:	463a      	mov	r2, r7
 80157fc:	4628      	mov	r0, r5
 80157fe:	f7f9 ff63 	bl	800f6c8 <uxr_set_request_callback>
 8015802:	4946      	ldr	r1, [pc, #280]	@ (801591c <rmw_init+0x268>)
 8015804:	463a      	mov	r2, r7
 8015806:	4628      	mov	r0, r5
 8015808:	f7f9 ff62 	bl	800f6d0 <uxr_set_reply_callback>
 801580c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015810:	2304      	movs	r3, #4
 8015812:	0092      	lsls	r2, r2, #2
 8015814:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8015818:	4628      	mov	r0, r5
 801581a:	f7f9 ff97 	bl	800f74c <uxr_create_input_reliable_stream>
 801581e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8015822:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8015826:	0092      	lsls	r2, r2, #2
 8015828:	2304      	movs	r3, #4
 801582a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801582e:	4628      	mov	r0, r5
 8015830:	f7f9 ff64 	bl	800f6fc <uxr_create_output_reliable_stream>
 8015834:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8015838:	4628      	mov	r0, r5
 801583a:	f7f9 ff81 	bl	800f740 <uxr_create_input_best_effort_stream>
 801583e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8015842:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8015846:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801584a:	3114      	adds	r1, #20
 801584c:	4628      	mov	r0, r5
 801584e:	f7f9 ff43 	bl	800f6d8 <uxr_create_output_best_effort_stream>
 8015852:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8015856:	4628      	mov	r0, r5
 8015858:	f7fa fcce 	bl	80101f8 <uxr_create_session>
 801585c:	b1f8      	cbz	r0, 801589e <rmw_init+0x1ea>
 801585e:	4638      	mov	r0, r7
 8015860:	b003      	add	sp, #12
 8015862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015866:	270b      	movs	r7, #11
 8015868:	4638      	mov	r0, r7
 801586a:	b003      	add	sp, #12
 801586c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015870:	2701      	movs	r7, #1
 8015872:	4638      	mov	r0, r7
 8015874:	b003      	add	sp, #12
 8015876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801587a:	270c      	movs	r7, #12
 801587c:	4638      	mov	r0, r7
 801587e:	b003      	add	sp, #12
 8015880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015884:	4648      	mov	r0, r9
 8015886:	f001 f935 	bl	8016af4 <uxr_close_custom_transport>
 801588a:	480d      	ldr	r0, [pc, #52]	@ (80158c0 <rmw_init+0x20c>)
 801588c:	4621      	mov	r1, r4
 801588e:	f7ff fdbb 	bl	8015408 <put_memory>
 8015892:	4638      	mov	r0, r7
 8015894:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8015898:	b003      	add	sp, #12
 801589a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801589e:	4648      	mov	r0, r9
 80158a0:	f001 f928 	bl	8016af4 <uxr_close_custom_transport>
 80158a4:	4806      	ldr	r0, [pc, #24]	@ (80158c0 <rmw_init+0x20c>)
 80158a6:	4621      	mov	r1, r4
 80158a8:	f7ff fdae 	bl	8015408 <put_memory>
 80158ac:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80158ae:	2701      	movs	r7, #1
 80158b0:	e7d5      	b.n	801585e <rmw_init+0x1aa>
 80158b2:	bf00      	nop
 80158b4:	0801b7bc 	.word	0x0801b7bc
 80158b8:	200153e4 	.word	0x200153e4
 80158bc:	20011690 	.word	0x20011690
 80158c0:	200153d4 	.word	0x200153d4
 80158c4:	20012c38 	.word	0x20012c38
 80158c8:	20010cb4 	.word	0x20010cb4
 80158cc:	200153a4 	.word	0x200153a4
 80158d0:	20014d38 	.word	0x20014d38
 80158d4:	200153f4 	.word	0x200153f4
 80158d8:	20010d58 	.word	0x20010d58
 80158dc:	200153b4 	.word	0x200153b4
 80158e0:	200115c8 	.word	0x200115c8
 80158e4:	200153c4 	.word	0x200153c4
 80158e8:	20010ae8 	.word	0x20010ae8
 80158ec:	20010ad8 	.word	0x20010ad8
 80158f0:	20015170 	.word	0x20015170
 80158f4:	20015404 	.word	0x20015404
 80158f8:	20010c30 	.word	0x20010c30
 80158fc:	20015394 	.word	0x20015394
 8015900:	20015314 	.word	0x20015314
 8015904:	20015414 	.word	0x20015414
 8015908:	20010bb0 	.word	0x20010bb0
 801590c:	20015384 	.word	0x20015384
 8015910:	080187e1 	.word	0x080187e1
 8015914:	080187d9 	.word	0x080187d9
 8015918:	08018879 	.word	0x08018879
 801591c:	08018915 	.word	0x08018915

08015920 <rmw_context_fini>:
 8015920:	4b17      	ldr	r3, [pc, #92]	@ (8015980 <rmw_context_fini+0x60>)
 8015922:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8015924:	b570      	push	{r4, r5, r6, lr}
 8015926:	681c      	ldr	r4, [r3, #0]
 8015928:	4605      	mov	r5, r0
 801592a:	b334      	cbz	r4, 801597a <rmw_context_fini+0x5a>
 801592c:	2600      	movs	r6, #0
 801592e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015932:	6902      	ldr	r2, [r0, #16]
 8015934:	428a      	cmp	r2, r1
 8015936:	d018      	beq.n	801596a <rmw_context_fini+0x4a>
 8015938:	2c00      	cmp	r4, #0
 801593a:	d1f8      	bne.n	801592e <rmw_context_fini+0xe>
 801593c:	b189      	cbz	r1, 8015962 <rmw_context_fini+0x42>
 801593e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8015942:	789b      	ldrb	r3, [r3, #2]
 8015944:	2b01      	cmp	r3, #1
 8015946:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801594a:	bf14      	ite	ne
 801594c:	210a      	movne	r1, #10
 801594e:	2100      	moveq	r1, #0
 8015950:	f7fa fc2a 	bl	80101a8 <uxr_delete_session_retries>
 8015954:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8015956:	f7f6 f965 	bl	800bc24 <rmw_uxrce_fini_session_memory>
 801595a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801595c:	3010      	adds	r0, #16
 801595e:	f001 f8c9 	bl	8016af4 <uxr_close_custom_transport>
 8015962:	2300      	movs	r3, #0
 8015964:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8015966:	4630      	mov	r0, r6
 8015968:	bd70      	pop	{r4, r5, r6, pc}
 801596a:	3018      	adds	r0, #24
 801596c:	f000 f90e 	bl	8015b8c <rmw_destroy_node>
 8015970:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8015972:	4606      	mov	r6, r0
 8015974:	2c00      	cmp	r4, #0
 8015976:	d1da      	bne.n	801592e <rmw_context_fini+0xe>
 8015978:	e7e0      	b.n	801593c <rmw_context_fini+0x1c>
 801597a:	4626      	mov	r6, r4
 801597c:	e7de      	b.n	801593c <rmw_context_fini+0x1c>
 801597e:	bf00      	nop
 8015980:	200153a4 	.word	0x200153a4

08015984 <create_topic>:
 8015984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015988:	4605      	mov	r5, r0
 801598a:	b084      	sub	sp, #16
 801598c:	4822      	ldr	r0, [pc, #136]	@ (8015a18 <create_topic+0x94>)
 801598e:	460f      	mov	r7, r1
 8015990:	4616      	mov	r6, r2
 8015992:	f7ff fd29 	bl	80153e8 <get_memory>
 8015996:	4604      	mov	r4, r0
 8015998:	2800      	cmp	r0, #0
 801599a:	d039      	beq.n	8015a10 <create_topic+0x8c>
 801599c:	692b      	ldr	r3, [r5, #16]
 801599e:	6884      	ldr	r4, [r0, #8]
 80159a0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015a20 <create_topic+0x9c>
 80159a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80159a8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80159ac:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80159b0:	1c42      	adds	r2, r0, #1
 80159b2:	2102      	movs	r1, #2
 80159b4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80159b8:	f7f9 fda0 	bl	800f4fc <uxr_object_id>
 80159bc:	223c      	movs	r2, #60	@ 0x3c
 80159be:	6120      	str	r0, [r4, #16]
 80159c0:	4641      	mov	r1, r8
 80159c2:	4638      	mov	r0, r7
 80159c4:	f7f6 fb0c 	bl	800bfe0 <generate_topic_name>
 80159c8:	b1f0      	cbz	r0, 8015a08 <create_topic+0x84>
 80159ca:	4f14      	ldr	r7, [pc, #80]	@ (8015a1c <create_topic+0x98>)
 80159cc:	4630      	mov	r0, r6
 80159ce:	2264      	movs	r2, #100	@ 0x64
 80159d0:	4639      	mov	r1, r7
 80159d2:	f7f6 fad5 	bl	800bf80 <generate_type_name>
 80159d6:	b1b8      	cbz	r0, 8015a08 <create_topic+0x84>
 80159d8:	6928      	ldr	r0, [r5, #16]
 80159da:	2306      	movs	r3, #6
 80159dc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80159e0:	f8cd 8000 	str.w	r8, [sp]
 80159e4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80159e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159ec:	6811      	ldr	r1, [r2, #0]
 80159ee:	696b      	ldr	r3, [r5, #20]
 80159f0:	6922      	ldr	r2, [r4, #16]
 80159f2:	f7f9 fbff 	bl	800f1f4 <uxr_buffer_create_topic_bin>
 80159f6:	4602      	mov	r2, r0
 80159f8:	6928      	ldr	r0, [r5, #16]
 80159fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80159fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015a02:	f7f6 fa87 	bl	800bf14 <run_xrce_session>
 8015a06:	b918      	cbnz	r0, 8015a10 <create_topic+0x8c>
 8015a08:	4620      	mov	r0, r4
 8015a0a:	f7f6 f981 	bl	800bd10 <rmw_uxrce_fini_topic_memory>
 8015a0e:	2400      	movs	r4, #0
 8015a10:	4620      	mov	r0, r4
 8015a12:	b004      	add	sp, #16
 8015a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a18:	20015404 	.word	0x20015404
 8015a1c:	200154f0 	.word	0x200154f0
 8015a20:	200154b4 	.word	0x200154b4

08015a24 <destroy_topic>:
 8015a24:	b538      	push	{r3, r4, r5, lr}
 8015a26:	6985      	ldr	r5, [r0, #24]
 8015a28:	b1d5      	cbz	r5, 8015a60 <destroy_topic+0x3c>
 8015a2a:	4604      	mov	r4, r0
 8015a2c:	6928      	ldr	r0, [r5, #16]
 8015a2e:	6922      	ldr	r2, [r4, #16]
 8015a30:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015a34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015a38:	6819      	ldr	r1, [r3, #0]
 8015a3a:	f7f9 fb5d 	bl	800f0f8 <uxr_buffer_delete_entity>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	6928      	ldr	r0, [r5, #16]
 8015a42:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015a46:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015a4a:	f7f6 fa63 	bl	800bf14 <run_xrce_session>
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	4620      	mov	r0, r4
 8015a52:	bf14      	ite	ne
 8015a54:	2400      	movne	r4, #0
 8015a56:	2402      	moveq	r4, #2
 8015a58:	f7f6 f95a 	bl	800bd10 <rmw_uxrce_fini_topic_memory>
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	bd38      	pop	{r3, r4, r5, pc}
 8015a60:	2401      	movs	r4, #1
 8015a62:	4620      	mov	r0, r4
 8015a64:	bd38      	pop	{r3, r4, r5, pc}
 8015a66:	bf00      	nop

08015a68 <create_node>:
 8015a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a6c:	b083      	sub	sp, #12
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d05f      	beq.n	8015b32 <create_node+0xca>
 8015a72:	4606      	mov	r6, r0
 8015a74:	4835      	ldr	r0, [pc, #212]	@ (8015b4c <create_node+0xe4>)
 8015a76:	460f      	mov	r7, r1
 8015a78:	4690      	mov	r8, r2
 8015a7a:	461d      	mov	r5, r3
 8015a7c:	f7ff fcb4 	bl	80153e8 <get_memory>
 8015a80:	2800      	cmp	r0, #0
 8015a82:	d056      	beq.n	8015b32 <create_node+0xca>
 8015a84:	6884      	ldr	r4, [r0, #8]
 8015a86:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015a88:	6123      	str	r3, [r4, #16]
 8015a8a:	f7ff fd15 	bl	80154b8 <rmw_get_implementation_identifier>
 8015a8e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8015a92:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015a96:	f8c4 9020 	str.w	r9, [r4, #32]
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f7ea fbb0 	bl	8000200 <strlen>
 8015aa0:	1c42      	adds	r2, r0, #1
 8015aa2:	2a3c      	cmp	r2, #60	@ 0x3c
 8015aa4:	f104 0518 	add.w	r5, r4, #24
 8015aa8:	d840      	bhi.n	8015b2c <create_node+0xc4>
 8015aaa:	4648      	mov	r0, r9
 8015aac:	4631      	mov	r1, r6
 8015aae:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8015ab2:	f003 fe04 	bl	80196be <memcpy>
 8015ab6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8015aba:	4638      	mov	r0, r7
 8015abc:	f7ea fba0 	bl	8000200 <strlen>
 8015ac0:	1c42      	adds	r2, r0, #1
 8015ac2:	2a3c      	cmp	r2, #60	@ 0x3c
 8015ac4:	d832      	bhi.n	8015b2c <create_node+0xc4>
 8015ac6:	4639      	mov	r1, r7
 8015ac8:	4648      	mov	r0, r9
 8015aca:	f003 fdf8 	bl	80196be <memcpy>
 8015ace:	6923      	ldr	r3, [r4, #16]
 8015ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015ad4:	2101      	movs	r1, #1
 8015ad6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8015ada:	1842      	adds	r2, r0, r1
 8015adc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8015ae0:	f7f9 fd0c 	bl	800f4fc <uxr_object_id>
 8015ae4:	6160      	str	r0, [r4, #20]
 8015ae6:	783b      	ldrb	r3, [r7, #0]
 8015ae8:	2b2f      	cmp	r3, #47	@ 0x2f
 8015aea:	d127      	bne.n	8015b3c <create_node+0xd4>
 8015aec:	787b      	ldrb	r3, [r7, #1]
 8015aee:	bb2b      	cbnz	r3, 8015b3c <create_node+0xd4>
 8015af0:	4a17      	ldr	r2, [pc, #92]	@ (8015b50 <create_node+0xe8>)
 8015af2:	4818      	ldr	r0, [pc, #96]	@ (8015b54 <create_node+0xec>)
 8015af4:	4633      	mov	r3, r6
 8015af6:	213c      	movs	r1, #60	@ 0x3c
 8015af8:	f003 f904 	bl	8018d04 <sniprintf>
 8015afc:	6920      	ldr	r0, [r4, #16]
 8015afe:	4915      	ldr	r1, [pc, #84]	@ (8015b54 <create_node+0xec>)
 8015b00:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015b04:	9100      	str	r1, [sp, #0]
 8015b06:	2106      	movs	r1, #6
 8015b08:	9101      	str	r1, [sp, #4]
 8015b0a:	6811      	ldr	r1, [r2, #0]
 8015b0c:	6962      	ldr	r2, [r4, #20]
 8015b0e:	fa1f f388 	uxth.w	r3, r8
 8015b12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015b16:	f7f9 fb3b 	bl	800f190 <uxr_buffer_create_participant_bin>
 8015b1a:	4602      	mov	r2, r0
 8015b1c:	6920      	ldr	r0, [r4, #16]
 8015b1e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015b22:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015b26:	f7f6 f9f5 	bl	800bf14 <run_xrce_session>
 8015b2a:	b918      	cbnz	r0, 8015b34 <create_node+0xcc>
 8015b2c:	4628      	mov	r0, r5
 8015b2e:	f7f6 f87f 	bl	800bc30 <rmw_uxrce_fini_node_memory>
 8015b32:	2500      	movs	r5, #0
 8015b34:	4628      	mov	r0, r5
 8015b36:	b003      	add	sp, #12
 8015b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b3c:	4a06      	ldr	r2, [pc, #24]	@ (8015b58 <create_node+0xf0>)
 8015b3e:	9600      	str	r6, [sp, #0]
 8015b40:	463b      	mov	r3, r7
 8015b42:	213c      	movs	r1, #60	@ 0x3c
 8015b44:	4803      	ldr	r0, [pc, #12]	@ (8015b54 <create_node+0xec>)
 8015b46:	f003 f8dd 	bl	8018d04 <sniprintf>
 8015b4a:	e7d7      	b.n	8015afc <create_node+0x94>
 8015b4c:	200153a4 	.word	0x200153a4
 8015b50:	0801add8 	.word	0x0801add8
 8015b54:	20015554 	.word	0x20015554
 8015b58:	0801b22c 	.word	0x0801b22c

08015b5c <rmw_create_node>:
 8015b5c:	b199      	cbz	r1, 8015b86 <rmw_create_node+0x2a>
 8015b5e:	780b      	ldrb	r3, [r1, #0]
 8015b60:	468c      	mov	ip, r1
 8015b62:	b183      	cbz	r3, 8015b86 <rmw_create_node+0x2a>
 8015b64:	b410      	push	{r4}
 8015b66:	4614      	mov	r4, r2
 8015b68:	b14a      	cbz	r2, 8015b7e <rmw_create_node+0x22>
 8015b6a:	7813      	ldrb	r3, [r2, #0]
 8015b6c:	b13b      	cbz	r3, 8015b7e <rmw_create_node+0x22>
 8015b6e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8015b70:	4603      	mov	r3, r0
 8015b72:	4621      	mov	r1, r4
 8015b74:	4660      	mov	r0, ip
 8015b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b7a:	f7ff bf75 	b.w	8015a68 <create_node>
 8015b7e:	2000      	movs	r0, #0
 8015b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b84:	4770      	bx	lr
 8015b86:	2000      	movs	r0, #0
 8015b88:	4770      	bx	lr
 8015b8a:	bf00      	nop

08015b8c <rmw_destroy_node>:
 8015b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b8e:	b328      	cbz	r0, 8015bdc <rmw_destroy_node+0x50>
 8015b90:	4607      	mov	r7, r0
 8015b92:	6800      	ldr	r0, [r0, #0]
 8015b94:	b120      	cbz	r0, 8015ba0 <rmw_destroy_node+0x14>
 8015b96:	4b36      	ldr	r3, [pc, #216]	@ (8015c70 <rmw_destroy_node+0xe4>)
 8015b98:	6819      	ldr	r1, [r3, #0]
 8015b9a:	f7ea fb39 	bl	8000210 <strcmp>
 8015b9e:	b9e8      	cbnz	r0, 8015bdc <rmw_destroy_node+0x50>
 8015ba0:	687d      	ldr	r5, [r7, #4]
 8015ba2:	b1dd      	cbz	r5, 8015bdc <rmw_destroy_node+0x50>
 8015ba4:	4b33      	ldr	r3, [pc, #204]	@ (8015c74 <rmw_destroy_node+0xe8>)
 8015ba6:	681c      	ldr	r4, [r3, #0]
 8015ba8:	2c00      	cmp	r4, #0
 8015baa:	d05f      	beq.n	8015c6c <rmw_destroy_node+0xe0>
 8015bac:	2600      	movs	r6, #0
 8015bae:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015bb2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8015bb6:	429d      	cmp	r5, r3
 8015bb8:	d013      	beq.n	8015be2 <rmw_destroy_node+0x56>
 8015bba:	2c00      	cmp	r4, #0
 8015bbc:	d1f7      	bne.n	8015bae <rmw_destroy_node+0x22>
 8015bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8015c78 <rmw_destroy_node+0xec>)
 8015bc0:	681c      	ldr	r4, [r3, #0]
 8015bc2:	b1c4      	cbz	r4, 8015bf6 <rmw_destroy_node+0x6a>
 8015bc4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015bc8:	6a0b      	ldr	r3, [r1, #32]
 8015bca:	429d      	cmp	r5, r3
 8015bcc:	d1f9      	bne.n	8015bc2 <rmw_destroy_node+0x36>
 8015bce:	317c      	adds	r1, #124	@ 0x7c
 8015bd0:	4638      	mov	r0, r7
 8015bd2:	f000 fae5 	bl	80161a0 <rmw_destroy_subscription>
 8015bd6:	2801      	cmp	r0, #1
 8015bd8:	4606      	mov	r6, r0
 8015bda:	d1f2      	bne.n	8015bc2 <rmw_destroy_node+0x36>
 8015bdc:	2601      	movs	r6, #1
 8015bde:	4630      	mov	r0, r6
 8015be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015be2:	3184      	adds	r1, #132	@ 0x84
 8015be4:	4638      	mov	r0, r7
 8015be6:	f7f5 fe6b 	bl	800b8c0 <rmw_destroy_publisher>
 8015bea:	2801      	cmp	r0, #1
 8015bec:	4606      	mov	r6, r0
 8015bee:	d0f5      	beq.n	8015bdc <rmw_destroy_node+0x50>
 8015bf0:	2c00      	cmp	r4, #0
 8015bf2:	d1dc      	bne.n	8015bae <rmw_destroy_node+0x22>
 8015bf4:	e7e3      	b.n	8015bbe <rmw_destroy_node+0x32>
 8015bf6:	4b21      	ldr	r3, [pc, #132]	@ (8015c7c <rmw_destroy_node+0xf0>)
 8015bf8:	681c      	ldr	r4, [r3, #0]
 8015bfa:	b16c      	cbz	r4, 8015c18 <rmw_destroy_node+0x8c>
 8015bfc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015c00:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015c02:	429d      	cmp	r5, r3
 8015c04:	d1f9      	bne.n	8015bfa <rmw_destroy_node+0x6e>
 8015c06:	317c      	adds	r1, #124	@ 0x7c
 8015c08:	4638      	mov	r0, r7
 8015c0a:	f000 f993 	bl	8015f34 <rmw_destroy_service>
 8015c0e:	2801      	cmp	r0, #1
 8015c10:	4606      	mov	r6, r0
 8015c12:	d0e3      	beq.n	8015bdc <rmw_destroy_node+0x50>
 8015c14:	2c00      	cmp	r4, #0
 8015c16:	d1f1      	bne.n	8015bfc <rmw_destroy_node+0x70>
 8015c18:	4b19      	ldr	r3, [pc, #100]	@ (8015c80 <rmw_destroy_node+0xf4>)
 8015c1a:	681c      	ldr	r4, [r3, #0]
 8015c1c:	b16c      	cbz	r4, 8015c3a <rmw_destroy_node+0xae>
 8015c1e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8015c22:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8015c24:	429d      	cmp	r5, r3
 8015c26:	d1f9      	bne.n	8015c1c <rmw_destroy_node+0x90>
 8015c28:	317c      	adds	r1, #124	@ 0x7c
 8015c2a:	4638      	mov	r0, r7
 8015c2c:	f7ff fc00 	bl	8015430 <rmw_destroy_client>
 8015c30:	2801      	cmp	r0, #1
 8015c32:	4606      	mov	r6, r0
 8015c34:	d0d2      	beq.n	8015bdc <rmw_destroy_node+0x50>
 8015c36:	2c00      	cmp	r4, #0
 8015c38:	d1f1      	bne.n	8015c1e <rmw_destroy_node+0x92>
 8015c3a:	6928      	ldr	r0, [r5, #16]
 8015c3c:	696a      	ldr	r2, [r5, #20]
 8015c3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015c42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c46:	6819      	ldr	r1, [r3, #0]
 8015c48:	f7f9 fa56 	bl	800f0f8 <uxr_buffer_delete_entity>
 8015c4c:	4602      	mov	r2, r0
 8015c4e:	6928      	ldr	r0, [r5, #16]
 8015c50:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015c54:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015c58:	f7f6 f95c 	bl	800bf14 <run_xrce_session>
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	bf08      	it	eq
 8015c60:	2602      	moveq	r6, #2
 8015c62:	4638      	mov	r0, r7
 8015c64:	f7f5 ffe4 	bl	800bc30 <rmw_uxrce_fini_node_memory>
 8015c68:	4630      	mov	r0, r6
 8015c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c6c:	4626      	mov	r6, r4
 8015c6e:	e7a6      	b.n	8015bbe <rmw_destroy_node+0x32>
 8015c70:	0801b7bc 	.word	0x0801b7bc
 8015c74:	200153b4 	.word	0x200153b4
 8015c78:	200153f4 	.word	0x200153f4
 8015c7c:	200153c4 	.word	0x200153c4
 8015c80:	20010ad8 	.word	0x20010ad8

08015c84 <rmw_node_get_graph_guard_condition>:
 8015c84:	6843      	ldr	r3, [r0, #4]
 8015c86:	6918      	ldr	r0, [r3, #16]
 8015c88:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8015c8c:	4770      	bx	lr
 8015c8e:	bf00      	nop

08015c90 <rmw_send_request>:
 8015c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c94:	4604      	mov	r4, r0
 8015c96:	6800      	ldr	r0, [r0, #0]
 8015c98:	b08b      	sub	sp, #44	@ 0x2c
 8015c9a:	460e      	mov	r6, r1
 8015c9c:	4615      	mov	r5, r2
 8015c9e:	b128      	cbz	r0, 8015cac <rmw_send_request+0x1c>
 8015ca0:	4b21      	ldr	r3, [pc, #132]	@ (8015d28 <rmw_send_request+0x98>)
 8015ca2:	6819      	ldr	r1, [r3, #0]
 8015ca4:	f7ea fab4 	bl	8000210 <strcmp>
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d139      	bne.n	8015d20 <rmw_send_request+0x90>
 8015cac:	6864      	ldr	r4, [r4, #4]
 8015cae:	6963      	ldr	r3, [r4, #20]
 8015cb0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015cb4:	689b      	ldr	r3, [r3, #8]
 8015cb6:	4798      	blx	r3
 8015cb8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cc2:	4798      	blx	r3
 8015cc4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015cc8:	9000      	str	r0, [sp, #0]
 8015cca:	6922      	ldr	r2, [r4, #16]
 8015ccc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015cce:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015cd2:	ab02      	add	r3, sp, #8
 8015cd4:	f7fa ff0c 	bl	8010af0 <uxr_prepare_output_stream>
 8015cd8:	2700      	movs	r7, #0
 8015cda:	6028      	str	r0, [r5, #0]
 8015cdc:	606f      	str	r7, [r5, #4]
 8015cde:	b198      	cbz	r0, 8015d08 <rmw_send_request+0x78>
 8015ce0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015ce4:	a902      	add	r1, sp, #8
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	4798      	blx	r3
 8015cea:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015cee:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d00c      	beq.n	8015d10 <rmw_send_request+0x80>
 8015cf6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015cf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015cfc:	f7fa f90c 	bl	800ff18 <uxr_run_session_until_confirm_delivery>
 8015d00:	4638      	mov	r0, r7
 8015d02:	b00b      	add	sp, #44	@ 0x2c
 8015d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d08:	2001      	movs	r0, #1
 8015d0a:	b00b      	add	sp, #44	@ 0x2c
 8015d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d14:	f7f9 fd40 	bl	800f798 <uxr_flash_output_streams>
 8015d18:	4638      	mov	r0, r7
 8015d1a:	b00b      	add	sp, #44	@ 0x2c
 8015d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d20:	200c      	movs	r0, #12
 8015d22:	b00b      	add	sp, #44	@ 0x2c
 8015d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d28:	0801b7bc 	.word	0x0801b7bc

08015d2c <rmw_take_request>:
 8015d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d30:	4605      	mov	r5, r0
 8015d32:	6800      	ldr	r0, [r0, #0]
 8015d34:	b089      	sub	sp, #36	@ 0x24
 8015d36:	460c      	mov	r4, r1
 8015d38:	4690      	mov	r8, r2
 8015d3a:	461e      	mov	r6, r3
 8015d3c:	b128      	cbz	r0, 8015d4a <rmw_take_request+0x1e>
 8015d3e:	4b28      	ldr	r3, [pc, #160]	@ (8015de0 <rmw_take_request+0xb4>)
 8015d40:	6819      	ldr	r1, [r3, #0]
 8015d42:	f7ea fa65 	bl	8000210 <strcmp>
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d146      	bne.n	8015dd8 <rmw_take_request+0xac>
 8015d4a:	b10e      	cbz	r6, 8015d50 <rmw_take_request+0x24>
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	7033      	strb	r3, [r6, #0]
 8015d50:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015d54:	f7f6 f860 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8015d58:	4648      	mov	r0, r9
 8015d5a:	f7f6 f835 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015d5e:	4607      	mov	r7, r0
 8015d60:	b3b0      	cbz	r0, 8015dd0 <rmw_take_request+0xa4>
 8015d62:	6885      	ldr	r5, [r0, #8]
 8015d64:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015d68:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015d6c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015d70:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015d74:	7423      	strb	r3, [r4, #16]
 8015d76:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015d7a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015d7e:	74e2      	strb	r2, [r4, #19]
 8015d80:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015d84:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015d88:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8015d8c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015d90:	61e1      	str	r1, [r4, #28]
 8015d92:	6162      	str	r2, [r4, #20]
 8015d94:	61a3      	str	r3, [r4, #24]
 8015d96:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015d9a:	689b      	ldr	r3, [r3, #8]
 8015d9c:	4798      	blx	r3
 8015d9e:	6844      	ldr	r4, [r0, #4]
 8015da0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8015da4:	f105 0110 	add.w	r1, r5, #16
 8015da8:	4668      	mov	r0, sp
 8015daa:	f7f9 f885 	bl	800eeb8 <ucdr_init_buffer>
 8015dae:	68e3      	ldr	r3, [r4, #12]
 8015db0:	4641      	mov	r1, r8
 8015db2:	4668      	mov	r0, sp
 8015db4:	4798      	blx	r3
 8015db6:	4639      	mov	r1, r7
 8015db8:	4604      	mov	r4, r0
 8015dba:	480a      	ldr	r0, [pc, #40]	@ (8015de4 <rmw_take_request+0xb8>)
 8015dbc:	f7ff fb24 	bl	8015408 <put_memory>
 8015dc0:	b106      	cbz	r6, 8015dc4 <rmw_take_request+0x98>
 8015dc2:	7034      	strb	r4, [r6, #0]
 8015dc4:	f084 0001 	eor.w	r0, r4, #1
 8015dc8:	b2c0      	uxtb	r0, r0
 8015dca:	b009      	add	sp, #36	@ 0x24
 8015dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dd0:	2001      	movs	r0, #1
 8015dd2:	b009      	add	sp, #36	@ 0x24
 8015dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dd8:	200c      	movs	r0, #12
 8015dda:	b009      	add	sp, #36	@ 0x24
 8015ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015de0:	0801b7bc 	.word	0x0801b7bc
 8015de4:	200153e4 	.word	0x200153e4

08015de8 <rmw_send_response>:
 8015de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dea:	4605      	mov	r5, r0
 8015dec:	6800      	ldr	r0, [r0, #0]
 8015dee:	b091      	sub	sp, #68	@ 0x44
 8015df0:	460c      	mov	r4, r1
 8015df2:	4616      	mov	r6, r2
 8015df4:	b128      	cbz	r0, 8015e02 <rmw_send_response+0x1a>
 8015df6:	4b29      	ldr	r3, [pc, #164]	@ (8015e9c <rmw_send_response+0xb4>)
 8015df8:	6819      	ldr	r1, [r3, #0]
 8015dfa:	f7ea fa09 	bl	8000210 <strcmp>
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	d141      	bne.n	8015e86 <rmw_send_response+0x9e>
 8015e02:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015e06:	9306      	str	r3, [sp, #24]
 8015e08:	4623      	mov	r3, r4
 8015e0a:	9207      	str	r2, [sp, #28]
 8015e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e10:	686d      	ldr	r5, [r5, #4]
 8015e12:	789b      	ldrb	r3, [r3, #2]
 8015e14:	68a1      	ldr	r1, [r4, #8]
 8015e16:	f88d 2017 	strb.w	r2, [sp, #23]
 8015e1a:	f88d 3016 	strb.w	r3, [sp, #22]
 8015e1e:	68e2      	ldr	r2, [r4, #12]
 8015e20:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015e24:	6860      	ldr	r0, [r4, #4]
 8015e26:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015e2a:	ab02      	add	r3, sp, #8
 8015e2c:	c307      	stmia	r3!, {r0, r1, r2}
 8015e2e:	696b      	ldr	r3, [r5, #20]
 8015e30:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015e32:	68db      	ldr	r3, [r3, #12]
 8015e34:	4798      	blx	r3
 8015e36:	6844      	ldr	r4, [r0, #4]
 8015e38:	4630      	mov	r0, r6
 8015e3a:	6923      	ldr	r3, [r4, #16]
 8015e3c:	4798      	blx	r3
 8015e3e:	f100 0318 	add.w	r3, r0, #24
 8015e42:	6938      	ldr	r0, [r7, #16]
 8015e44:	9300      	str	r3, [sp, #0]
 8015e46:	692a      	ldr	r2, [r5, #16]
 8015e48:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015e4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e4e:	ab08      	add	r3, sp, #32
 8015e50:	f7fa fe4e 	bl	8010af0 <uxr_prepare_output_stream>
 8015e54:	b910      	cbnz	r0, 8015e5c <rmw_send_response+0x74>
 8015e56:	2001      	movs	r0, #1
 8015e58:	b011      	add	sp, #68	@ 0x44
 8015e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e5c:	a902      	add	r1, sp, #8
 8015e5e:	a808      	add	r0, sp, #32
 8015e60:	f7fb ff7e 	bl	8011d60 <uxr_serialize_SampleIdentity>
 8015e64:	68a3      	ldr	r3, [r4, #8]
 8015e66:	a908      	add	r1, sp, #32
 8015e68:	4630      	mov	r0, r6
 8015e6a:	4798      	blx	r3
 8015e6c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015e70:	6938      	ldr	r0, [r7, #16]
 8015e72:	2b01      	cmp	r3, #1
 8015e74:	d00a      	beq.n	8015e8c <rmw_send_response+0xa4>
 8015e76:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015e78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e7c:	f7fa f84c 	bl	800ff18 <uxr_run_session_until_confirm_delivery>
 8015e80:	2000      	movs	r0, #0
 8015e82:	b011      	add	sp, #68	@ 0x44
 8015e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e86:	200c      	movs	r0, #12
 8015e88:	b011      	add	sp, #68	@ 0x44
 8015e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e90:	f7f9 fc82 	bl	800f798 <uxr_flash_output_streams>
 8015e94:	2000      	movs	r0, #0
 8015e96:	b011      	add	sp, #68	@ 0x44
 8015e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e9a:	bf00      	nop
 8015e9c:	0801b7bc 	.word	0x0801b7bc

08015ea0 <rmw_take_response>:
 8015ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea4:	4604      	mov	r4, r0
 8015ea6:	6800      	ldr	r0, [r0, #0]
 8015ea8:	b088      	sub	sp, #32
 8015eaa:	4688      	mov	r8, r1
 8015eac:	4617      	mov	r7, r2
 8015eae:	461d      	mov	r5, r3
 8015eb0:	b120      	cbz	r0, 8015ebc <rmw_take_response+0x1c>
 8015eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8015f2c <rmw_take_response+0x8c>)
 8015eb4:	6819      	ldr	r1, [r3, #0]
 8015eb6:	f7ea f9ab 	bl	8000210 <strcmp>
 8015eba:	bb78      	cbnz	r0, 8015f1c <rmw_take_response+0x7c>
 8015ebc:	b10d      	cbz	r5, 8015ec2 <rmw_take_response+0x22>
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	702b      	strb	r3, [r5, #0]
 8015ec2:	6864      	ldr	r4, [r4, #4]
 8015ec4:	f7f5 ffa8 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f7f5 ff7d 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ece:	4606      	mov	r6, r0
 8015ed0:	b340      	cbz	r0, 8015f24 <rmw_take_response+0x84>
 8015ed2:	6963      	ldr	r3, [r4, #20]
 8015ed4:	6884      	ldr	r4, [r0, #8]
 8015ed6:	68db      	ldr	r3, [r3, #12]
 8015ed8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015edc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015ee0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015ee4:	4798      	blx	r3
 8015ee6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015eea:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015eee:	f104 0110 	add.w	r1, r4, #16
 8015ef2:	4668      	mov	r0, sp
 8015ef4:	f7f8 ffe0 	bl	800eeb8 <ucdr_init_buffer>
 8015ef8:	4639      	mov	r1, r7
 8015efa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015efe:	4668      	mov	r0, sp
 8015f00:	4798      	blx	r3
 8015f02:	4631      	mov	r1, r6
 8015f04:	4604      	mov	r4, r0
 8015f06:	480a      	ldr	r0, [pc, #40]	@ (8015f30 <rmw_take_response+0x90>)
 8015f08:	f7ff fa7e 	bl	8015408 <put_memory>
 8015f0c:	b105      	cbz	r5, 8015f10 <rmw_take_response+0x70>
 8015f0e:	702c      	strb	r4, [r5, #0]
 8015f10:	f084 0001 	eor.w	r0, r4, #1
 8015f14:	b2c0      	uxtb	r0, r0
 8015f16:	b008      	add	sp, #32
 8015f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f1c:	200c      	movs	r0, #12
 8015f1e:	b008      	add	sp, #32
 8015f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f24:	2001      	movs	r0, #1
 8015f26:	b008      	add	sp, #32
 8015f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f2c:	0801b7bc 	.word	0x0801b7bc
 8015f30:	200153e4 	.word	0x200153e4

08015f34 <rmw_destroy_service>:
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	b128      	cbz	r0, 8015f44 <rmw_destroy_service+0x10>
 8015f38:	4604      	mov	r4, r0
 8015f3a:	6800      	ldr	r0, [r0, #0]
 8015f3c:	460d      	mov	r5, r1
 8015f3e:	f7f6 f869 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8015f42:	b910      	cbnz	r0, 8015f4a <rmw_destroy_service+0x16>
 8015f44:	2401      	movs	r4, #1
 8015f46:	4620      	mov	r0, r4
 8015f48:	bd70      	pop	{r4, r5, r6, pc}
 8015f4a:	6863      	ldr	r3, [r4, #4]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d0f9      	beq.n	8015f44 <rmw_destroy_service+0x10>
 8015f50:	2d00      	cmp	r5, #0
 8015f52:	d0f7      	beq.n	8015f44 <rmw_destroy_service+0x10>
 8015f54:	6828      	ldr	r0, [r5, #0]
 8015f56:	f7f6 f85d 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8015f5a:	2800      	cmp	r0, #0
 8015f5c:	d0f2      	beq.n	8015f44 <rmw_destroy_service+0x10>
 8015f5e:	686e      	ldr	r6, [r5, #4]
 8015f60:	2e00      	cmp	r6, #0
 8015f62:	d0ef      	beq.n	8015f44 <rmw_destroy_service+0x10>
 8015f64:	6864      	ldr	r4, [r4, #4]
 8015f66:	6932      	ldr	r2, [r6, #16]
 8015f68:	6920      	ldr	r0, [r4, #16]
 8015f6a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015f6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f72:	6819      	ldr	r1, [r3, #0]
 8015f74:	f001 fb44 	bl	8017600 <uxr_buffer_cancel_data>
 8015f78:	4602      	mov	r2, r0
 8015f7a:	6920      	ldr	r0, [r4, #16]
 8015f7c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015f80:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015f84:	f7f5 ffc6 	bl	800bf14 <run_xrce_session>
 8015f88:	6920      	ldr	r0, [r4, #16]
 8015f8a:	6932      	ldr	r2, [r6, #16]
 8015f8c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015f90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f94:	6819      	ldr	r1, [r3, #0]
 8015f96:	f7f9 f8af 	bl	800f0f8 <uxr_buffer_delete_entity>
 8015f9a:	4602      	mov	r2, r0
 8015f9c:	6920      	ldr	r0, [r4, #16]
 8015f9e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015fa2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015fa6:	f7f5 ffb5 	bl	800bf14 <run_xrce_session>
 8015faa:	2800      	cmp	r0, #0
 8015fac:	4628      	mov	r0, r5
 8015fae:	bf14      	ite	ne
 8015fb0:	2400      	movne	r4, #0
 8015fb2:	2402      	moveq	r4, #2
 8015fb4:	f7f5 fe80 	bl	800bcb8 <rmw_uxrce_fini_service_memory>
 8015fb8:	e7c5      	b.n	8015f46 <rmw_destroy_service+0x12>
 8015fba:	bf00      	nop

08015fbc <rmw_create_subscription>:
 8015fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc0:	b08d      	sub	sp, #52	@ 0x34
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	f000 80d1 	beq.w	801616a <rmw_create_subscription+0x1ae>
 8015fc8:	460e      	mov	r6, r1
 8015fca:	2900      	cmp	r1, #0
 8015fcc:	f000 80cd 	beq.w	801616a <rmw_create_subscription+0x1ae>
 8015fd0:	4604      	mov	r4, r0
 8015fd2:	6800      	ldr	r0, [r0, #0]
 8015fd4:	4615      	mov	r5, r2
 8015fd6:	4698      	mov	r8, r3
 8015fd8:	f7f6 f81c 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	f000 80c4 	beq.w	801616a <rmw_create_subscription+0x1ae>
 8015fe2:	2d00      	cmp	r5, #0
 8015fe4:	f000 80c1 	beq.w	801616a <rmw_create_subscription+0x1ae>
 8015fe8:	782b      	ldrb	r3, [r5, #0]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	f000 80bd 	beq.w	801616a <rmw_create_subscription+0x1ae>
 8015ff0:	f1b8 0f00 	cmp.w	r8, #0
 8015ff4:	f000 80b9 	beq.w	801616a <rmw_create_subscription+0x1ae>
 8015ff8:	485e      	ldr	r0, [pc, #376]	@ (8016174 <rmw_create_subscription+0x1b8>)
 8015ffa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015ffe:	f7ff f9f3 	bl	80153e8 <get_memory>
 8016002:	4604      	mov	r4, r0
 8016004:	2800      	cmp	r0, #0
 8016006:	f000 80b1 	beq.w	801616c <rmw_create_subscription+0x1b0>
 801600a:	6887      	ldr	r7, [r0, #8]
 801600c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8016010:	f7ff fa52 	bl	80154b8 <rmw_get_implementation_identifier>
 8016014:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8016018:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801601a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801601e:	4628      	mov	r0, r5
 8016020:	f7ea f8ee 	bl	8000200 <strlen>
 8016024:	3001      	adds	r0, #1
 8016026:	283c      	cmp	r0, #60	@ 0x3c
 8016028:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 801602c:	f200 8096 	bhi.w	801615c <rmw_create_subscription+0x1a0>
 8016030:	4a51      	ldr	r2, [pc, #324]	@ (8016178 <rmw_create_subscription+0x1bc>)
 8016032:	462b      	mov	r3, r5
 8016034:	213c      	movs	r1, #60	@ 0x3c
 8016036:	4650      	mov	r0, sl
 8016038:	f002 fe64 	bl	8018d04 <sniprintf>
 801603c:	4641      	mov	r1, r8
 801603e:	f8c7 9020 	str.w	r9, [r7, #32]
 8016042:	2250      	movs	r2, #80	@ 0x50
 8016044:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8016048:	f003 fb39 	bl	80196be <memcpy>
 801604c:	494b      	ldr	r1, [pc, #300]	@ (801617c <rmw_create_subscription+0x1c0>)
 801604e:	4630      	mov	r0, r6
 8016050:	f7f5 ffee 	bl	800c030 <get_message_typesupport_handle>
 8016054:	2800      	cmp	r0, #0
 8016056:	f000 8081 	beq.w	801615c <rmw_create_subscription+0x1a0>
 801605a:	6842      	ldr	r2, [r0, #4]
 801605c:	61ba      	str	r2, [r7, #24]
 801605e:	2a00      	cmp	r2, #0
 8016060:	d07c      	beq.n	801615c <rmw_create_subscription+0x1a0>
 8016062:	4629      	mov	r1, r5
 8016064:	4643      	mov	r3, r8
 8016066:	4648      	mov	r0, r9
 8016068:	f7ff fc8c 	bl	8015984 <create_topic>
 801606c:	61f8      	str	r0, [r7, #28]
 801606e:	2800      	cmp	r0, #0
 8016070:	d078      	beq.n	8016164 <rmw_create_subscription+0x1a8>
 8016072:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801607a:	2104      	movs	r1, #4
 801607c:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8016080:	1c42      	adds	r2, r0, #1
 8016082:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8016086:	f7f9 fa39 	bl	800f4fc <uxr_object_id>
 801608a:	6138      	str	r0, [r7, #16]
 801608c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016090:	2506      	movs	r5, #6
 8016092:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8016096:	9500      	str	r5, [sp, #0]
 8016098:	6819      	ldr	r1, [r3, #0]
 801609a:	693a      	ldr	r2, [r7, #16]
 801609c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80160a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80160a4:	f7f9 f90c 	bl	800f2c0 <uxr_buffer_create_subscriber_bin>
 80160a8:	4602      	mov	r2, r0
 80160aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80160ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80160b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80160b6:	f7f5 ff2d 	bl	800bf14 <run_xrce_session>
 80160ba:	2800      	cmp	r0, #0
 80160bc:	d04e      	beq.n	801615c <rmw_create_subscription+0x1a0>
 80160be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80160c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80160c6:	4629      	mov	r1, r5
 80160c8:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80160cc:	1c42      	adds	r2, r0, #1
 80160ce:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80160d2:	f7f9 fa13 	bl	800f4fc <uxr_object_id>
 80160d6:	ae08      	add	r6, sp, #32
 80160d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80160dc:	69fb      	ldr	r3, [r7, #28]
 80160de:	6178      	str	r0, [r7, #20]
 80160e0:	4641      	mov	r1, r8
 80160e2:	4630      	mov	r0, r6
 80160e4:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80160e8:	9305      	str	r3, [sp, #20]
 80160ea:	f7f5 ff2f 	bl	800bf4c <convert_qos_profile>
 80160ee:	9503      	str	r5, [sp, #12]
 80160f0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80160f4:	9b05      	ldr	r3, [sp, #20]
 80160f6:	9001      	str	r0, [sp, #4]
 80160f8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80160fc:	691b      	ldr	r3, [r3, #16]
 80160fe:	9300      	str	r3, [sp, #0]
 8016100:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8016104:	f8db 1000 	ldr.w	r1, [fp]
 8016108:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801610c:	f7f9 f97e 	bl	800f40c <uxr_buffer_create_datareader_bin>
 8016110:	4602      	mov	r2, r0
 8016112:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016116:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801611a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801611e:	f7f5 fef9 	bl	800bf14 <run_xrce_session>
 8016122:	b1d8      	cbz	r0, 801615c <rmw_create_subscription+0x1a0>
 8016124:	f898 3008 	ldrb.w	r3, [r8, #8]
 8016128:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801612c:	2b02      	cmp	r3, #2
 801612e:	bf0c      	ite	eq
 8016130:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8016134:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8016138:	9307      	str	r3, [sp, #28]
 801613a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801613e:	2200      	movs	r2, #0
 8016140:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8016144:	ab0a      	add	r3, sp, #40	@ 0x28
 8016146:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801614a:	9300      	str	r3, [sp, #0]
 801614c:	697a      	ldr	r2, [r7, #20]
 801614e:	9b07      	ldr	r3, [sp, #28]
 8016150:	6809      	ldr	r1, [r1, #0]
 8016152:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016156:	f001 fa19 	bl	801758c <uxr_buffer_request_data>
 801615a:	e007      	b.n	801616c <rmw_create_subscription+0x1b0>
 801615c:	69f8      	ldr	r0, [r7, #28]
 801615e:	b108      	cbz	r0, 8016164 <rmw_create_subscription+0x1a8>
 8016160:	f7f5 fdd6 	bl	800bd10 <rmw_uxrce_fini_topic_memory>
 8016164:	4620      	mov	r0, r4
 8016166:	f7f5 fd91 	bl	800bc8c <rmw_uxrce_fini_subscription_memory>
 801616a:	2400      	movs	r4, #0
 801616c:	4620      	mov	r0, r4
 801616e:	b00d      	add	sp, #52	@ 0x34
 8016170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016174:	200153f4 	.word	0x200153f4
 8016178:	0801add8 	.word	0x0801add8
 801617c:	0801ab90 	.word	0x0801ab90

08016180 <rmw_subscription_get_actual_qos>:
 8016180:	b150      	cbz	r0, 8016198 <rmw_subscription_get_actual_qos+0x18>
 8016182:	b508      	push	{r3, lr}
 8016184:	460b      	mov	r3, r1
 8016186:	b149      	cbz	r1, 801619c <rmw_subscription_get_actual_qos+0x1c>
 8016188:	6841      	ldr	r1, [r0, #4]
 801618a:	2250      	movs	r2, #80	@ 0x50
 801618c:	3128      	adds	r1, #40	@ 0x28
 801618e:	4618      	mov	r0, r3
 8016190:	f003 fa95 	bl	80196be <memcpy>
 8016194:	2000      	movs	r0, #0
 8016196:	bd08      	pop	{r3, pc}
 8016198:	200b      	movs	r0, #11
 801619a:	4770      	bx	lr
 801619c:	200b      	movs	r0, #11
 801619e:	bd08      	pop	{r3, pc}

080161a0 <rmw_destroy_subscription>:
 80161a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161a2:	b128      	cbz	r0, 80161b0 <rmw_destroy_subscription+0x10>
 80161a4:	4604      	mov	r4, r0
 80161a6:	6800      	ldr	r0, [r0, #0]
 80161a8:	460d      	mov	r5, r1
 80161aa:	f7f5 ff33 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 80161ae:	b910      	cbnz	r0, 80161b6 <rmw_destroy_subscription+0x16>
 80161b0:	2401      	movs	r4, #1
 80161b2:	4620      	mov	r0, r4
 80161b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161b6:	6863      	ldr	r3, [r4, #4]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d0f9      	beq.n	80161b0 <rmw_destroy_subscription+0x10>
 80161bc:	2d00      	cmp	r5, #0
 80161be:	d0f7      	beq.n	80161b0 <rmw_destroy_subscription+0x10>
 80161c0:	6828      	ldr	r0, [r5, #0]
 80161c2:	f7f5 ff27 	bl	800c014 <is_uxrce_rmw_identifier_valid>
 80161c6:	2800      	cmp	r0, #0
 80161c8:	d0f2      	beq.n	80161b0 <rmw_destroy_subscription+0x10>
 80161ca:	686c      	ldr	r4, [r5, #4]
 80161cc:	2c00      	cmp	r4, #0
 80161ce:	d0ef      	beq.n	80161b0 <rmw_destroy_subscription+0x10>
 80161d0:	6a26      	ldr	r6, [r4, #32]
 80161d2:	6962      	ldr	r2, [r4, #20]
 80161d4:	6930      	ldr	r0, [r6, #16]
 80161d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80161da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80161de:	6819      	ldr	r1, [r3, #0]
 80161e0:	f001 fa0e 	bl	8017600 <uxr_buffer_cancel_data>
 80161e4:	4602      	mov	r2, r0
 80161e6:	6930      	ldr	r0, [r6, #16]
 80161e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80161ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80161f0:	f7f5 fe90 	bl	800bf14 <run_xrce_session>
 80161f4:	69e0      	ldr	r0, [r4, #28]
 80161f6:	f7ff fc15 	bl	8015a24 <destroy_topic>
 80161fa:	6a23      	ldr	r3, [r4, #32]
 80161fc:	6962      	ldr	r2, [r4, #20]
 80161fe:	6918      	ldr	r0, [r3, #16]
 8016200:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016204:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016208:	6819      	ldr	r1, [r3, #0]
 801620a:	f7f8 ff75 	bl	800f0f8 <uxr_buffer_delete_entity>
 801620e:	6a23      	ldr	r3, [r4, #32]
 8016210:	6922      	ldr	r2, [r4, #16]
 8016212:	691b      	ldr	r3, [r3, #16]
 8016214:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8016218:	4604      	mov	r4, r0
 801621a:	6809      	ldr	r1, [r1, #0]
 801621c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016220:	f7f8 ff6a 	bl	800f0f8 <uxr_buffer_delete_entity>
 8016224:	6937      	ldr	r7, [r6, #16]
 8016226:	4622      	mov	r2, r4
 8016228:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801622c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8016230:	4604      	mov	r4, r0
 8016232:	4638      	mov	r0, r7
 8016234:	f7f5 fe6e 	bl	800bf14 <run_xrce_session>
 8016238:	6936      	ldr	r6, [r6, #16]
 801623a:	4622      	mov	r2, r4
 801623c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8016240:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8016244:	4604      	mov	r4, r0
 8016246:	4630      	mov	r0, r6
 8016248:	f7f5 fe64 	bl	800bf14 <run_xrce_session>
 801624c:	b12c      	cbz	r4, 801625a <rmw_destroy_subscription+0xba>
 801624e:	b120      	cbz	r0, 801625a <rmw_destroy_subscription+0xba>
 8016250:	2400      	movs	r4, #0
 8016252:	4628      	mov	r0, r5
 8016254:	f7f5 fd1a 	bl	800bc8c <rmw_uxrce_fini_subscription_memory>
 8016258:	e7ab      	b.n	80161b2 <rmw_destroy_subscription+0x12>
 801625a:	2402      	movs	r4, #2
 801625c:	e7f9      	b.n	8016252 <rmw_destroy_subscription+0xb2>
 801625e:	bf00      	nop

08016260 <rmw_take_with_info>:
 8016260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016262:	4604      	mov	r4, r0
 8016264:	6800      	ldr	r0, [r0, #0]
 8016266:	b089      	sub	sp, #36	@ 0x24
 8016268:	460f      	mov	r7, r1
 801626a:	4615      	mov	r5, r2
 801626c:	b128      	cbz	r0, 801627a <rmw_take_with_info+0x1a>
 801626e:	4b24      	ldr	r3, [pc, #144]	@ (8016300 <rmw_take_with_info+0xa0>)
 8016270:	6819      	ldr	r1, [r3, #0]
 8016272:	f7e9 ffcd 	bl	8000210 <strcmp>
 8016276:	2800      	cmp	r0, #0
 8016278:	d13e      	bne.n	80162f8 <rmw_take_with_info+0x98>
 801627a:	b305      	cbz	r5, 80162be <rmw_take_with_info+0x5e>
 801627c:	6864      	ldr	r4, [r4, #4]
 801627e:	2300      	movs	r3, #0
 8016280:	702b      	strb	r3, [r5, #0]
 8016282:	f7f5 fdc9 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016286:	4620      	mov	r0, r4
 8016288:	f7f5 fd9e 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801628c:	4606      	mov	r6, r0
 801628e:	b1f0      	cbz	r0, 80162ce <rmw_take_with_info+0x6e>
 8016290:	6881      	ldr	r1, [r0, #8]
 8016292:	4668      	mov	r0, sp
 8016294:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016298:	3110      	adds	r1, #16
 801629a:	f7f8 fe0d 	bl	800eeb8 <ucdr_init_buffer>
 801629e:	69a3      	ldr	r3, [r4, #24]
 80162a0:	4639      	mov	r1, r7
 80162a2:	68db      	ldr	r3, [r3, #12]
 80162a4:	4668      	mov	r0, sp
 80162a6:	4798      	blx	r3
 80162a8:	4631      	mov	r1, r6
 80162aa:	4604      	mov	r4, r0
 80162ac:	4815      	ldr	r0, [pc, #84]	@ (8016304 <rmw_take_with_info+0xa4>)
 80162ae:	f7ff f8ab 	bl	8015408 <put_memory>
 80162b2:	702c      	strb	r4, [r5, #0]
 80162b4:	f084 0001 	eor.w	r0, r4, #1
 80162b8:	b2c0      	uxtb	r0, r0
 80162ba:	b009      	add	sp, #36	@ 0x24
 80162bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162be:	6864      	ldr	r4, [r4, #4]
 80162c0:	f7f5 fdaa 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 80162c4:	4620      	mov	r0, r4
 80162c6:	f7f5 fd7f 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80162ca:	4605      	mov	r5, r0
 80162cc:	b910      	cbnz	r0, 80162d4 <rmw_take_with_info+0x74>
 80162ce:	2001      	movs	r0, #1
 80162d0:	b009      	add	sp, #36	@ 0x24
 80162d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162d4:	68a9      	ldr	r1, [r5, #8]
 80162d6:	4668      	mov	r0, sp
 80162d8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80162dc:	3110      	adds	r1, #16
 80162de:	f7f8 fdeb 	bl	800eeb8 <ucdr_init_buffer>
 80162e2:	69a3      	ldr	r3, [r4, #24]
 80162e4:	4639      	mov	r1, r7
 80162e6:	68db      	ldr	r3, [r3, #12]
 80162e8:	4668      	mov	r0, sp
 80162ea:	4798      	blx	r3
 80162ec:	4629      	mov	r1, r5
 80162ee:	4604      	mov	r4, r0
 80162f0:	4804      	ldr	r0, [pc, #16]	@ (8016304 <rmw_take_with_info+0xa4>)
 80162f2:	f7ff f889 	bl	8015408 <put_memory>
 80162f6:	e7dd      	b.n	80162b4 <rmw_take_with_info+0x54>
 80162f8:	200c      	movs	r0, #12
 80162fa:	b009      	add	sp, #36	@ 0x24
 80162fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162fe:	bf00      	nop
 8016300:	0801b7bc 	.word	0x0801b7bc
 8016304:	200153e4 	.word	0x200153e4

08016308 <rmw_uxrce_transport_init>:
 8016308:	b508      	push	{r3, lr}
 801630a:	b108      	cbz	r0, 8016310 <rmw_uxrce_transport_init+0x8>
 801630c:	f100 0210 	add.w	r2, r0, #16
 8016310:	b139      	cbz	r1, 8016322 <rmw_uxrce_transport_init+0x1a>
 8016312:	6949      	ldr	r1, [r1, #20]
 8016314:	4610      	mov	r0, r2
 8016316:	f000 fbb9 	bl	8016a8c <uxr_init_custom_transport>
 801631a:	f080 0001 	eor.w	r0, r0, #1
 801631e:	b2c0      	uxtb	r0, r0
 8016320:	bd08      	pop	{r3, pc}
 8016322:	4b04      	ldr	r3, [pc, #16]	@ (8016334 <rmw_uxrce_transport_init+0x2c>)
 8016324:	4610      	mov	r0, r2
 8016326:	6859      	ldr	r1, [r3, #4]
 8016328:	f000 fbb0 	bl	8016a8c <uxr_init_custom_transport>
 801632c:	f080 0001 	eor.w	r0, r0, #1
 8016330:	b2c0      	uxtb	r0, r0
 8016332:	bd08      	pop	{r3, pc}
 8016334:	20010abc 	.word	0x20010abc

08016338 <rmw_wait>:
 8016338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801633c:	b089      	sub	sp, #36	@ 0x24
 801633e:	4605      	mov	r5, r0
 8016340:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016342:	460e      	mov	r6, r1
 8016344:	4698      	mov	r8, r3
 8016346:	4691      	mov	r9, r2
 8016348:	2a00      	cmp	r2, #0
 801634a:	f000 810a 	beq.w	8016562 <rmw_wait+0x22a>
 801634e:	b16c      	cbz	r4, 801636c <rmw_wait+0x34>
 8016350:	4bae      	ldr	r3, [pc, #696]	@ (801660c <rmw_wait+0x2d4>)
 8016352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016354:	af04      	add	r7, sp, #16
 8016356:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801635a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801635e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016362:	f7fe fe75 	bl	8015050 <rmw_time_equal>
 8016366:	2800      	cmp	r0, #0
 8016368:	f000 8127 	beq.w	80165ba <rmw_wait+0x282>
 801636c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016370:	f7f5 fd52 	bl	800be18 <rmw_uxrce_clean_expired_static_input_buffer>
 8016374:	4ba6      	ldr	r3, [pc, #664]	@ (8016610 <rmw_wait+0x2d8>)
 8016376:	681c      	ldr	r4, [r3, #0]
 8016378:	b14c      	cbz	r4, 801638e <rmw_wait+0x56>
 801637a:	4623      	mov	r3, r4
 801637c:	2100      	movs	r1, #0
 801637e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016382:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016386:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801638a:	2b00      	cmp	r3, #0
 801638c:	d1f7      	bne.n	801637e <rmw_wait+0x46>
 801638e:	f1b9 0f00 	cmp.w	r9, #0
 8016392:	d011      	beq.n	80163b8 <rmw_wait+0x80>
 8016394:	f8d9 1000 	ldr.w	r1, [r9]
 8016398:	b171      	cbz	r1, 80163b8 <rmw_wait+0x80>
 801639a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801639e:	2300      	movs	r3, #0
 80163a0:	2001      	movs	r0, #1
 80163a2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80163a6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80163a8:	6912      	ldr	r2, [r2, #16]
 80163aa:	3301      	adds	r3, #1
 80163ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80163b0:	4299      	cmp	r1, r3
 80163b2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80163b6:	d1f4      	bne.n	80163a2 <rmw_wait+0x6a>
 80163b8:	f1b8 0f00 	cmp.w	r8, #0
 80163bc:	d011      	beq.n	80163e2 <rmw_wait+0xaa>
 80163be:	f8d8 1000 	ldr.w	r1, [r8]
 80163c2:	b171      	cbz	r1, 80163e2 <rmw_wait+0xaa>
 80163c4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80163c8:	2300      	movs	r3, #0
 80163ca:	2001      	movs	r0, #1
 80163cc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80163d0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80163d2:	6912      	ldr	r2, [r2, #16]
 80163d4:	3301      	adds	r3, #1
 80163d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80163da:	4299      	cmp	r1, r3
 80163dc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80163e0:	d1f4      	bne.n	80163cc <rmw_wait+0x94>
 80163e2:	b185      	cbz	r5, 8016406 <rmw_wait+0xce>
 80163e4:	6829      	ldr	r1, [r5, #0]
 80163e6:	b171      	cbz	r1, 8016406 <rmw_wait+0xce>
 80163e8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80163ec:	2300      	movs	r3, #0
 80163ee:	2001      	movs	r0, #1
 80163f0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80163f4:	6a12      	ldr	r2, [r2, #32]
 80163f6:	6912      	ldr	r2, [r2, #16]
 80163f8:	3301      	adds	r3, #1
 80163fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80163fe:	4299      	cmp	r1, r3
 8016400:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016404:	d1f4      	bne.n	80163f0 <rmw_wait+0xb8>
 8016406:	b34c      	cbz	r4, 801645c <rmw_wait+0x124>
 8016408:	4622      	mov	r2, r4
 801640a:	2300      	movs	r3, #0
 801640c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016410:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016414:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016418:	440b      	add	r3, r1
 801641a:	b2db      	uxtb	r3, r3
 801641c:	2a00      	cmp	r2, #0
 801641e:	d1f5      	bne.n	801640c <rmw_wait+0xd4>
 8016420:	2b00      	cmp	r3, #0
 8016422:	f000 8084 	beq.w	801652e <rmw_wait+0x1f6>
 8016426:	1c7a      	adds	r2, r7, #1
 8016428:	d00d      	beq.n	8016446 <rmw_wait+0x10e>
 801642a:	ee07 7a90 	vmov	s15, r7
 801642e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016432:	ee07 3a90 	vmov	s15, r3
 8016436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801643a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801643e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016442:	ee17 7a90 	vmov	r7, s15
 8016446:	68a0      	ldr	r0, [r4, #8]
 8016448:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801644c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016450:	2b00      	cmp	r3, #0
 8016452:	f040 8090 	bne.w	8016576 <rmw_wait+0x23e>
 8016456:	6864      	ldr	r4, [r4, #4]
 8016458:	2c00      	cmp	r4, #0
 801645a:	d1f4      	bne.n	8016446 <rmw_wait+0x10e>
 801645c:	f1b9 0f00 	cmp.w	r9, #0
 8016460:	f000 80bc 	beq.w	80165dc <rmw_wait+0x2a4>
 8016464:	f8d9 7000 	ldr.w	r7, [r9]
 8016468:	2f00      	cmp	r7, #0
 801646a:	f000 808e 	beq.w	801658a <rmw_wait+0x252>
 801646e:	2400      	movs	r4, #0
 8016470:	4627      	mov	r7, r4
 8016472:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016476:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801647a:	f7f5 fca5 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801647e:	2800      	cmp	r0, #0
 8016480:	d05f      	beq.n	8016542 <rmw_wait+0x20a>
 8016482:	f8d9 3000 	ldr.w	r3, [r9]
 8016486:	3401      	adds	r4, #1
 8016488:	42a3      	cmp	r3, r4
 801648a:	f04f 0701 	mov.w	r7, #1
 801648e:	d8f0      	bhi.n	8016472 <rmw_wait+0x13a>
 8016490:	f1b8 0f00 	cmp.w	r8, #0
 8016494:	d012      	beq.n	80164bc <rmw_wait+0x184>
 8016496:	f8d8 3000 	ldr.w	r3, [r8]
 801649a:	b17b      	cbz	r3, 80164bc <rmw_wait+0x184>
 801649c:	2400      	movs	r4, #0
 801649e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80164a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80164a6:	f7f5 fc8f 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80164aa:	2800      	cmp	r0, #0
 80164ac:	d051      	beq.n	8016552 <rmw_wait+0x21a>
 80164ae:	f8d8 3000 	ldr.w	r3, [r8]
 80164b2:	3401      	adds	r4, #1
 80164b4:	42a3      	cmp	r3, r4
 80164b6:	f04f 0701 	mov.w	r7, #1
 80164ba:	d8f0      	bhi.n	801649e <rmw_wait+0x166>
 80164bc:	b1dd      	cbz	r5, 80164f6 <rmw_wait+0x1be>
 80164be:	682b      	ldr	r3, [r5, #0]
 80164c0:	b1cb      	cbz	r3, 80164f6 <rmw_wait+0x1be>
 80164c2:	2400      	movs	r4, #0
 80164c4:	686b      	ldr	r3, [r5, #4]
 80164c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80164ca:	f7f5 fc7d 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80164ce:	b158      	cbz	r0, 80164e8 <rmw_wait+0x1b0>
 80164d0:	682b      	ldr	r3, [r5, #0]
 80164d2:	3401      	adds	r4, #1
 80164d4:	42a3      	cmp	r3, r4
 80164d6:	d969      	bls.n	80165ac <rmw_wait+0x274>
 80164d8:	686b      	ldr	r3, [r5, #4]
 80164da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80164de:	2701      	movs	r7, #1
 80164e0:	f7f5 fc72 	bl	800bdc8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	d1f3      	bne.n	80164d0 <rmw_wait+0x198>
 80164e8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80164ec:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80164f0:	3401      	adds	r4, #1
 80164f2:	42a3      	cmp	r3, r4
 80164f4:	d8e6      	bhi.n	80164c4 <rmw_wait+0x18c>
 80164f6:	b1a6      	cbz	r6, 8016522 <rmw_wait+0x1ea>
 80164f8:	6834      	ldr	r4, [r6, #0]
 80164fa:	b194      	cbz	r4, 8016522 <rmw_wait+0x1ea>
 80164fc:	2300      	movs	r3, #0
 80164fe:	461d      	mov	r5, r3
 8016500:	e004      	b.n	801650c <rmw_wait+0x1d4>
 8016502:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016506:	3301      	adds	r3, #1
 8016508:	42a3      	cmp	r3, r4
 801650a:	d00a      	beq.n	8016522 <rmw_wait+0x1ea>
 801650c:	6870      	ldr	r0, [r6, #4]
 801650e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016512:	7c0a      	ldrb	r2, [r1, #16]
 8016514:	2a00      	cmp	r2, #0
 8016516:	d0f4      	beq.n	8016502 <rmw_wait+0x1ca>
 8016518:	3301      	adds	r3, #1
 801651a:	42a3      	cmp	r3, r4
 801651c:	740d      	strb	r5, [r1, #16]
 801651e:	4617      	mov	r7, r2
 8016520:	d1f4      	bne.n	801650c <rmw_wait+0x1d4>
 8016522:	2f00      	cmp	r7, #0
 8016524:	d03e      	beq.n	80165a4 <rmw_wait+0x26c>
 8016526:	2000      	movs	r0, #0
 8016528:	b009      	add	sp, #36	@ 0x24
 801652a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801652e:	68a0      	ldr	r0, [r4, #8]
 8016530:	2100      	movs	r1, #0
 8016532:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016536:	f7f9 fcb5 	bl	800fea4 <uxr_run_session_timeout>
 801653a:	6864      	ldr	r4, [r4, #4]
 801653c:	2c00      	cmp	r4, #0
 801653e:	d1f6      	bne.n	801652e <rmw_wait+0x1f6>
 8016540:	e78c      	b.n	801645c <rmw_wait+0x124>
 8016542:	e9d9 3200 	ldrd	r3, r2, [r9]
 8016546:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801654a:	3401      	adds	r4, #1
 801654c:	42a3      	cmp	r3, r4
 801654e:	d890      	bhi.n	8016472 <rmw_wait+0x13a>
 8016550:	e79e      	b.n	8016490 <rmw_wait+0x158>
 8016552:	e9d8 3200 	ldrd	r3, r2, [r8]
 8016556:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801655a:	3401      	adds	r4, #1
 801655c:	429c      	cmp	r4, r3
 801655e:	d39e      	bcc.n	801649e <rmw_wait+0x166>
 8016560:	e7ac      	b.n	80164bc <rmw_wait+0x184>
 8016562:	2b00      	cmp	r3, #0
 8016564:	f47f aef3 	bne.w	801634e <rmw_wait+0x16>
 8016568:	2800      	cmp	r0, #0
 801656a:	f47f aef0 	bne.w	801634e <rmw_wait+0x16>
 801656e:	2900      	cmp	r1, #0
 8016570:	f47f aeed 	bne.w	801634e <rmw_wait+0x16>
 8016574:	e7d7      	b.n	8016526 <rmw_wait+0x1ee>
 8016576:	4639      	mov	r1, r7
 8016578:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801657c:	f7f9 fcac 	bl	800fed8 <uxr_run_session_until_data>
 8016580:	6864      	ldr	r4, [r4, #4]
 8016582:	2c00      	cmp	r4, #0
 8016584:	f47f af5f 	bne.w	8016446 <rmw_wait+0x10e>
 8016588:	e768      	b.n	801645c <rmw_wait+0x124>
 801658a:	f1b8 0f00 	cmp.w	r8, #0
 801658e:	d032      	beq.n	80165f6 <rmw_wait+0x2be>
 8016590:	f8d8 3000 	ldr.w	r3, [r8]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d181      	bne.n	801649c <rmw_wait+0x164>
 8016598:	461f      	mov	r7, r3
 801659a:	2d00      	cmp	r5, #0
 801659c:	d18f      	bne.n	80164be <rmw_wait+0x186>
 801659e:	462f      	mov	r7, r5
 80165a0:	2e00      	cmp	r6, #0
 80165a2:	d1a9      	bne.n	80164f8 <rmw_wait+0x1c0>
 80165a4:	2002      	movs	r0, #2
 80165a6:	b009      	add	sp, #36	@ 0x24
 80165a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ac:	2e00      	cmp	r6, #0
 80165ae:	d0ba      	beq.n	8016526 <rmw_wait+0x1ee>
 80165b0:	6834      	ldr	r4, [r6, #0]
 80165b2:	2701      	movs	r7, #1
 80165b4:	2c00      	cmp	r4, #0
 80165b6:	d1a1      	bne.n	80164fc <rmw_wait+0x1c4>
 80165b8:	e7b5      	b.n	8016526 <rmw_wait+0x1ee>
 80165ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80165be:	f7fe fd9b 	bl	80150f8 <rmw_time_total_nsec>
 80165c2:	2300      	movs	r3, #0
 80165c4:	4a13      	ldr	r2, [pc, #76]	@ (8016614 <rmw_wait+0x2dc>)
 80165c6:	f7ea fb79 	bl	8000cbc <__aeabi_uldivmod>
 80165ca:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80165ce:	f171 0300 	sbcs.w	r3, r1, #0
 80165d2:	4607      	mov	r7, r0
 80165d4:	bfa8      	it	ge
 80165d6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80165da:	e6c9      	b.n	8016370 <rmw_wait+0x38>
 80165dc:	f1b8 0f00 	cmp.w	r8, #0
 80165e0:	d009      	beq.n	80165f6 <rmw_wait+0x2be>
 80165e2:	f8d8 3000 	ldr.w	r3, [r8]
 80165e6:	464f      	mov	r7, r9
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	f47f af57 	bne.w	801649c <rmw_wait+0x164>
 80165ee:	2d00      	cmp	r5, #0
 80165f0:	f47f af65 	bne.w	80164be <rmw_wait+0x186>
 80165f4:	e7d3      	b.n	801659e <rmw_wait+0x266>
 80165f6:	b17d      	cbz	r5, 8016618 <rmw_wait+0x2e0>
 80165f8:	682b      	ldr	r3, [r5, #0]
 80165fa:	4647      	mov	r7, r8
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	f47f af60 	bne.w	80164c2 <rmw_wait+0x18a>
 8016602:	2e00      	cmp	r6, #0
 8016604:	f47f af78 	bne.w	80164f8 <rmw_wait+0x1c0>
 8016608:	e7cc      	b.n	80165a4 <rmw_wait+0x26c>
 801660a:	bf00      	nop
 801660c:	0801a9d0 	.word	0x0801a9d0
 8016610:	200153d4 	.word	0x200153d4
 8016614:	000f4240 	.word	0x000f4240
 8016618:	2e00      	cmp	r6, #0
 801661a:	d0c3      	beq.n	80165a4 <rmw_wait+0x26c>
 801661c:	6834      	ldr	r4, [r6, #0]
 801661e:	462f      	mov	r7, r5
 8016620:	2c00      	cmp	r4, #0
 8016622:	f47f af6b 	bne.w	80164fc <rmw_wait+0x1c4>
 8016626:	e7bd      	b.n	80165a4 <rmw_wait+0x26c>

08016628 <rmw_create_wait_set>:
 8016628:	b508      	push	{r3, lr}
 801662a:	4803      	ldr	r0, [pc, #12]	@ (8016638 <rmw_create_wait_set+0x10>)
 801662c:	f7fe fedc 	bl	80153e8 <get_memory>
 8016630:	b108      	cbz	r0, 8016636 <rmw_create_wait_set+0xe>
 8016632:	6880      	ldr	r0, [r0, #8]
 8016634:	3010      	adds	r0, #16
 8016636:	bd08      	pop	{r3, pc}
 8016638:	20015414 	.word	0x20015414

0801663c <rmw_destroy_wait_set>:
 801663c:	b508      	push	{r3, lr}
 801663e:	4b08      	ldr	r3, [pc, #32]	@ (8016660 <rmw_destroy_wait_set+0x24>)
 8016640:	6819      	ldr	r1, [r3, #0]
 8016642:	b911      	cbnz	r1, 801664a <rmw_destroy_wait_set+0xe>
 8016644:	e00a      	b.n	801665c <rmw_destroy_wait_set+0x20>
 8016646:	6849      	ldr	r1, [r1, #4]
 8016648:	b141      	cbz	r1, 801665c <rmw_destroy_wait_set+0x20>
 801664a:	688b      	ldr	r3, [r1, #8]
 801664c:	3310      	adds	r3, #16
 801664e:	4298      	cmp	r0, r3
 8016650:	d1f9      	bne.n	8016646 <rmw_destroy_wait_set+0xa>
 8016652:	4803      	ldr	r0, [pc, #12]	@ (8016660 <rmw_destroy_wait_set+0x24>)
 8016654:	f7fe fed8 	bl	8015408 <put_memory>
 8016658:	2000      	movs	r0, #0
 801665a:	bd08      	pop	{r3, pc}
 801665c:	2001      	movs	r0, #1
 801665e:	bd08      	pop	{r3, pc}
 8016660:	20015414 	.word	0x20015414

08016664 <rmw_uros_epoch_nanos>:
 8016664:	4b05      	ldr	r3, [pc, #20]	@ (801667c <rmw_uros_epoch_nanos+0x18>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	b123      	cbz	r3, 8016674 <rmw_uros_epoch_nanos+0x10>
 801666a:	6898      	ldr	r0, [r3, #8]
 801666c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016670:	f7f9 b888 	b.w	800f784 <uxr_epoch_nanos>
 8016674:	2000      	movs	r0, #0
 8016676:	2100      	movs	r1, #0
 8016678:	4770      	bx	lr
 801667a:	bf00      	nop
 801667c:	200153d4 	.word	0x200153d4

08016680 <rosidl_runtime_c__float__Sequence__init>:
 8016680:	b530      	push	{r4, r5, lr}
 8016682:	4604      	mov	r4, r0
 8016684:	b087      	sub	sp, #28
 8016686:	b130      	cbz	r0, 8016696 <rosidl_runtime_c__float__Sequence__init+0x16>
 8016688:	460d      	mov	r5, r1
 801668a:	b931      	cbnz	r1, 801669a <rosidl_runtime_c__float__Sequence__init+0x1a>
 801668c:	4608      	mov	r0, r1
 801668e:	e9c4 0500 	strd	r0, r5, [r4]
 8016692:	60a5      	str	r5, [r4, #8]
 8016694:	2001      	movs	r0, #1
 8016696:	b007      	add	sp, #28
 8016698:	bd30      	pop	{r4, r5, pc}
 801669a:	a801      	add	r0, sp, #4
 801669c:	f7f4 ff06 	bl	800b4ac <rcutils_get_default_allocator>
 80166a0:	9b01      	ldr	r3, [sp, #4]
 80166a2:	9905      	ldr	r1, [sp, #20]
 80166a4:	00a8      	lsls	r0, r5, #2
 80166a6:	4798      	blx	r3
 80166a8:	2800      	cmp	r0, #0
 80166aa:	d1f0      	bne.n	801668e <rosidl_runtime_c__float__Sequence__init+0xe>
 80166ac:	e7f3      	b.n	8016696 <rosidl_runtime_c__float__Sequence__init+0x16>
 80166ae:	bf00      	nop

080166b0 <rosidl_runtime_c__float__Sequence__fini>:
 80166b0:	b188      	cbz	r0, 80166d6 <rosidl_runtime_c__float__Sequence__fini+0x26>
 80166b2:	b510      	push	{r4, lr}
 80166b4:	6803      	ldr	r3, [r0, #0]
 80166b6:	b086      	sub	sp, #24
 80166b8:	4604      	mov	r4, r0
 80166ba:	b153      	cbz	r3, 80166d2 <rosidl_runtime_c__float__Sequence__fini+0x22>
 80166bc:	a801      	add	r0, sp, #4
 80166be:	f7f4 fef5 	bl	800b4ac <rcutils_get_default_allocator>
 80166c2:	9b02      	ldr	r3, [sp, #8]
 80166c4:	9905      	ldr	r1, [sp, #20]
 80166c6:	6820      	ldr	r0, [r4, #0]
 80166c8:	4798      	blx	r3
 80166ca:	2300      	movs	r3, #0
 80166cc:	e9c4 3300 	strd	r3, r3, [r4]
 80166d0:	60a3      	str	r3, [r4, #8]
 80166d2:	b006      	add	sp, #24
 80166d4:	bd10      	pop	{r4, pc}
 80166d6:	4770      	bx	lr

080166d8 <rosidl_runtime_c__int32__Sequence__init>:
 80166d8:	b530      	push	{r4, r5, lr}
 80166da:	4604      	mov	r4, r0
 80166dc:	b087      	sub	sp, #28
 80166de:	b130      	cbz	r0, 80166ee <rosidl_runtime_c__int32__Sequence__init+0x16>
 80166e0:	460d      	mov	r5, r1
 80166e2:	b931      	cbnz	r1, 80166f2 <rosidl_runtime_c__int32__Sequence__init+0x1a>
 80166e4:	4608      	mov	r0, r1
 80166e6:	e9c4 0500 	strd	r0, r5, [r4]
 80166ea:	60a5      	str	r5, [r4, #8]
 80166ec:	2001      	movs	r0, #1
 80166ee:	b007      	add	sp, #28
 80166f0:	bd30      	pop	{r4, r5, pc}
 80166f2:	a801      	add	r0, sp, #4
 80166f4:	f7f4 feda 	bl	800b4ac <rcutils_get_default_allocator>
 80166f8:	9b01      	ldr	r3, [sp, #4]
 80166fa:	9905      	ldr	r1, [sp, #20]
 80166fc:	00a8      	lsls	r0, r5, #2
 80166fe:	4798      	blx	r3
 8016700:	2800      	cmp	r0, #0
 8016702:	d1f0      	bne.n	80166e6 <rosidl_runtime_c__int32__Sequence__init+0xe>
 8016704:	e7f3      	b.n	80166ee <rosidl_runtime_c__int32__Sequence__init+0x16>
 8016706:	bf00      	nop

08016708 <rosidl_runtime_c__int32__Sequence__fini>:
 8016708:	b188      	cbz	r0, 801672e <rosidl_runtime_c__int32__Sequence__fini+0x26>
 801670a:	b510      	push	{r4, lr}
 801670c:	6803      	ldr	r3, [r0, #0]
 801670e:	b086      	sub	sp, #24
 8016710:	4604      	mov	r4, r0
 8016712:	b153      	cbz	r3, 801672a <rosidl_runtime_c__int32__Sequence__fini+0x22>
 8016714:	a801      	add	r0, sp, #4
 8016716:	f7f4 fec9 	bl	800b4ac <rcutils_get_default_allocator>
 801671a:	9b02      	ldr	r3, [sp, #8]
 801671c:	9905      	ldr	r1, [sp, #20]
 801671e:	6820      	ldr	r0, [r4, #0]
 8016720:	4798      	blx	r3
 8016722:	2300      	movs	r3, #0
 8016724:	e9c4 3300 	strd	r3, r3, [r4]
 8016728:	60a3      	str	r3, [r4, #8]
 801672a:	b006      	add	sp, #24
 801672c:	bd10      	pop	{r4, pc}
 801672e:	4770      	bx	lr

08016730 <sensor_msgs__msg__Imu__init>:
 8016730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016734:	4605      	mov	r5, r0
 8016736:	b3c0      	cbz	r0, 80167aa <sensor_msgs__msg__Imu__init+0x7a>
 8016738:	f000 f8b4 	bl	80168a4 <std_msgs__msg__Header__init>
 801673c:	4604      	mov	r4, r0
 801673e:	b310      	cbz	r0, 8016786 <sensor_msgs__msg__Imu__init+0x56>
 8016740:	f105 0618 	add.w	r6, r5, #24
 8016744:	4630      	mov	r0, r6
 8016746:	f000 f8e3 	bl	8016910 <geometry_msgs__msg__Quaternion__init>
 801674a:	4604      	mov	r4, r0
 801674c:	2800      	cmp	r0, #0
 801674e:	d040      	beq.n	80167d2 <sensor_msgs__msg__Imu__init+0xa2>
 8016750:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8016754:	4638      	mov	r0, r7
 8016756:	f000 f8f1 	bl	801693c <geometry_msgs__msg__Vector3__init>
 801675a:	4604      	mov	r4, r0
 801675c:	b348      	cbz	r0, 80167b2 <sensor_msgs__msg__Imu__init+0x82>
 801675e:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8016762:	4640      	mov	r0, r8
 8016764:	f000 f8ea 	bl	801693c <geometry_msgs__msg__Vector3__init>
 8016768:	4604      	mov	r4, r0
 801676a:	b9d8      	cbnz	r0, 80167a4 <sensor_msgs__msg__Imu__init+0x74>
 801676c:	4628      	mov	r0, r5
 801676e:	f000 f8bd 	bl	80168ec <std_msgs__msg__Header__fini>
 8016772:	4630      	mov	r0, r6
 8016774:	f000 f8e0 	bl	8016938 <geometry_msgs__msg__Quaternion__fini>
 8016778:	4638      	mov	r0, r7
 801677a:	f000 f8e3 	bl	8016944 <geometry_msgs__msg__Vector3__fini>
 801677e:	4640      	mov	r0, r8
 8016780:	f000 f8e0 	bl	8016944 <geometry_msgs__msg__Vector3__fini>
 8016784:	e00e      	b.n	80167a4 <sensor_msgs__msg__Imu__init+0x74>
 8016786:	4628      	mov	r0, r5
 8016788:	f000 f8b0 	bl	80168ec <std_msgs__msg__Header__fini>
 801678c:	f105 0018 	add.w	r0, r5, #24
 8016790:	f000 f8d2 	bl	8016938 <geometry_msgs__msg__Quaternion__fini>
 8016794:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8016798:	f000 f8d4 	bl	8016944 <geometry_msgs__msg__Vector3__fini>
 801679c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80167a0:	f000 f8d0 	bl	8016944 <geometry_msgs__msg__Vector3__fini>
 80167a4:	4620      	mov	r0, r4
 80167a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167aa:	4604      	mov	r4, r0
 80167ac:	4620      	mov	r0, r4
 80167ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167b2:	4628      	mov	r0, r5
 80167b4:	f000 f89a 	bl	80168ec <std_msgs__msg__Header__fini>
 80167b8:	4630      	mov	r0, r6
 80167ba:	f000 f8bd 	bl	8016938 <geometry_msgs__msg__Quaternion__fini>
 80167be:	4638      	mov	r0, r7
 80167c0:	f000 f8c0 	bl	8016944 <geometry_msgs__msg__Vector3__fini>
 80167c4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80167c8:	f000 f8bc 	bl	8016944 <geometry_msgs__msg__Vector3__fini>
 80167cc:	4620      	mov	r0, r4
 80167ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d2:	4628      	mov	r0, r5
 80167d4:	f000 f88a 	bl	80168ec <std_msgs__msg__Header__fini>
 80167d8:	4630      	mov	r0, r6
 80167da:	e7d9      	b.n	8016790 <sensor_msgs__msg__Imu__init+0x60>

080167dc <sensor_msgs__msg__Imu__fini>:
 80167dc:	b188      	cbz	r0, 8016802 <sensor_msgs__msg__Imu__fini+0x26>
 80167de:	b510      	push	{r4, lr}
 80167e0:	4604      	mov	r4, r0
 80167e2:	f000 f883 	bl	80168ec <std_msgs__msg__Header__fini>
 80167e6:	f104 0018 	add.w	r0, r4, #24
 80167ea:	f000 f8a5 	bl	8016938 <geometry_msgs__msg__Quaternion__fini>
 80167ee:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80167f2:	f000 f8a7 	bl	8016944 <geometry_msgs__msg__Vector3__fini>
 80167f6:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80167fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167fe:	f000 b8a1 	b.w	8016944 <geometry_msgs__msg__Vector3__fini>
 8016802:	4770      	bx	lr

08016804 <sensor_msgs__msg__Joy__init>:
 8016804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016806:	4605      	mov	r5, r0
 8016808:	b310      	cbz	r0, 8016850 <sensor_msgs__msg__Joy__init+0x4c>
 801680a:	f000 f84b 	bl	80168a4 <std_msgs__msg__Header__init>
 801680e:	4604      	mov	r4, r0
 8016810:	b188      	cbz	r0, 8016836 <sensor_msgs__msg__Joy__init+0x32>
 8016812:	f105 0614 	add.w	r6, r5, #20
 8016816:	2100      	movs	r1, #0
 8016818:	4630      	mov	r0, r6
 801681a:	f7ff ff31 	bl	8016680 <rosidl_runtime_c__float__Sequence__init>
 801681e:	4604      	mov	r4, r0
 8016820:	b1c8      	cbz	r0, 8016856 <sensor_msgs__msg__Joy__init+0x52>
 8016822:	f105 0720 	add.w	r7, r5, #32
 8016826:	2100      	movs	r1, #0
 8016828:	4638      	mov	r0, r7
 801682a:	f7ff ff55 	bl	80166d8 <rosidl_runtime_c__int32__Sequence__init>
 801682e:	4604      	mov	r4, r0
 8016830:	b1e8      	cbz	r0, 801686e <sensor_msgs__msg__Joy__init+0x6a>
 8016832:	4620      	mov	r0, r4
 8016834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016836:	4628      	mov	r0, r5
 8016838:	f000 f858 	bl	80168ec <std_msgs__msg__Header__fini>
 801683c:	f105 0014 	add.w	r0, r5, #20
 8016840:	f7ff ff36 	bl	80166b0 <rosidl_runtime_c__float__Sequence__fini>
 8016844:	f105 0020 	add.w	r0, r5, #32
 8016848:	f7ff ff5e 	bl	8016708 <rosidl_runtime_c__int32__Sequence__fini>
 801684c:	4620      	mov	r0, r4
 801684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016850:	4604      	mov	r4, r0
 8016852:	4620      	mov	r0, r4
 8016854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016856:	4628      	mov	r0, r5
 8016858:	f000 f848 	bl	80168ec <std_msgs__msg__Header__fini>
 801685c:	4630      	mov	r0, r6
 801685e:	f7ff ff27 	bl	80166b0 <rosidl_runtime_c__float__Sequence__fini>
 8016862:	f105 0020 	add.w	r0, r5, #32
 8016866:	f7ff ff4f 	bl	8016708 <rosidl_runtime_c__int32__Sequence__fini>
 801686a:	4620      	mov	r0, r4
 801686c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801686e:	4628      	mov	r0, r5
 8016870:	f000 f83c 	bl	80168ec <std_msgs__msg__Header__fini>
 8016874:	4630      	mov	r0, r6
 8016876:	f7ff ff1b 	bl	80166b0 <rosidl_runtime_c__float__Sequence__fini>
 801687a:	4638      	mov	r0, r7
 801687c:	f7ff ff44 	bl	8016708 <rosidl_runtime_c__int32__Sequence__fini>
 8016880:	e7d7      	b.n	8016832 <sensor_msgs__msg__Joy__init+0x2e>
 8016882:	bf00      	nop

08016884 <sensor_msgs__msg__Joy__fini>:
 8016884:	b168      	cbz	r0, 80168a2 <sensor_msgs__msg__Joy__fini+0x1e>
 8016886:	b510      	push	{r4, lr}
 8016888:	4604      	mov	r4, r0
 801688a:	f000 f82f 	bl	80168ec <std_msgs__msg__Header__fini>
 801688e:	f104 0014 	add.w	r0, r4, #20
 8016892:	f7ff ff0d 	bl	80166b0 <rosidl_runtime_c__float__Sequence__fini>
 8016896:	f104 0020 	add.w	r0, r4, #32
 801689a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801689e:	f7ff bf33 	b.w	8016708 <rosidl_runtime_c__int32__Sequence__fini>
 80168a2:	4770      	bx	lr

080168a4 <std_msgs__msg__Header__init>:
 80168a4:	b570      	push	{r4, r5, r6, lr}
 80168a6:	4605      	mov	r5, r0
 80168a8:	b1a8      	cbz	r0, 80168d6 <std_msgs__msg__Header__init+0x32>
 80168aa:	f000 f82b 	bl	8016904 <builtin_interfaces__msg__Time__init>
 80168ae:	4604      	mov	r4, r0
 80168b0:	b140      	cbz	r0, 80168c4 <std_msgs__msg__Header__init+0x20>
 80168b2:	f105 0608 	add.w	r6, r5, #8
 80168b6:	4630      	mov	r0, r6
 80168b8:	f002 f89e 	bl	80189f8 <rosidl_runtime_c__String__init>
 80168bc:	4604      	mov	r4, r0
 80168be:	b168      	cbz	r0, 80168dc <std_msgs__msg__Header__init+0x38>
 80168c0:	4620      	mov	r0, r4
 80168c2:	bd70      	pop	{r4, r5, r6, pc}
 80168c4:	4628      	mov	r0, r5
 80168c6:	f000 f821 	bl	801690c <builtin_interfaces__msg__Time__fini>
 80168ca:	f105 0008 	add.w	r0, r5, #8
 80168ce:	f002 f8a9 	bl	8018a24 <rosidl_runtime_c__String__fini>
 80168d2:	4620      	mov	r0, r4
 80168d4:	bd70      	pop	{r4, r5, r6, pc}
 80168d6:	4604      	mov	r4, r0
 80168d8:	4620      	mov	r0, r4
 80168da:	bd70      	pop	{r4, r5, r6, pc}
 80168dc:	4628      	mov	r0, r5
 80168de:	f000 f815 	bl	801690c <builtin_interfaces__msg__Time__fini>
 80168e2:	4630      	mov	r0, r6
 80168e4:	f002 f89e 	bl	8018a24 <rosidl_runtime_c__String__fini>
 80168e8:	e7ea      	b.n	80168c0 <std_msgs__msg__Header__init+0x1c>
 80168ea:	bf00      	nop

080168ec <std_msgs__msg__Header__fini>:
 80168ec:	b148      	cbz	r0, 8016902 <std_msgs__msg__Header__fini+0x16>
 80168ee:	b510      	push	{r4, lr}
 80168f0:	4604      	mov	r4, r0
 80168f2:	f000 f80b 	bl	801690c <builtin_interfaces__msg__Time__fini>
 80168f6:	f104 0008 	add.w	r0, r4, #8
 80168fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168fe:	f002 b891 	b.w	8018a24 <rosidl_runtime_c__String__fini>
 8016902:	4770      	bx	lr

08016904 <builtin_interfaces__msg__Time__init>:
 8016904:	3800      	subs	r0, #0
 8016906:	bf18      	it	ne
 8016908:	2001      	movne	r0, #1
 801690a:	4770      	bx	lr

0801690c <builtin_interfaces__msg__Time__fini>:
 801690c:	4770      	bx	lr
 801690e:	bf00      	nop

08016910 <geometry_msgs__msg__Quaternion__init>:
 8016910:	b160      	cbz	r0, 801692c <geometry_msgs__msg__Quaternion__init+0x1c>
 8016912:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8016930 <geometry_msgs__msg__Quaternion__init+0x20>
 8016916:	2200      	movs	r2, #0
 8016918:	2300      	movs	r3, #0
 801691a:	e9c0 2300 	strd	r2, r3, [r0]
 801691e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016922:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016926:	ed80 7b06 	vstr	d7, [r0, #24]
 801692a:	2001      	movs	r0, #1
 801692c:	4770      	bx	lr
 801692e:	bf00      	nop
 8016930:	00000000 	.word	0x00000000
 8016934:	3ff00000 	.word	0x3ff00000

08016938 <geometry_msgs__msg__Quaternion__fini>:
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop

0801693c <geometry_msgs__msg__Vector3__init>:
 801693c:	3800      	subs	r0, #0
 801693e:	bf18      	it	ne
 8016940:	2001      	movne	r0, #1
 8016942:	4770      	bx	lr

08016944 <geometry_msgs__msg__Vector3__fini>:
 8016944:	4770      	bx	lr
 8016946:	bf00      	nop

08016948 <ucdr_serialize_string>:
 8016948:	b510      	push	{r4, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	4604      	mov	r4, r0
 801694e:	4608      	mov	r0, r1
 8016950:	9101      	str	r1, [sp, #4]
 8016952:	f7e9 fc55 	bl	8000200 <strlen>
 8016956:	9901      	ldr	r1, [sp, #4]
 8016958:	1c42      	adds	r2, r0, #1
 801695a:	4620      	mov	r0, r4
 801695c:	b002      	add	sp, #8
 801695e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016962:	f7f8 bb19 	b.w	800ef98 <ucdr_serialize_sequence_char>
 8016966:	bf00      	nop

08016968 <ucdr_deserialize_string>:
 8016968:	b500      	push	{lr}
 801696a:	b083      	sub	sp, #12
 801696c:	ab01      	add	r3, sp, #4
 801696e:	f7f8 fb25 	bl	800efbc <ucdr_deserialize_sequence_char>
 8016972:	b003      	add	sp, #12
 8016974:	f85d fb04 	ldr.w	pc, [sp], #4

08016978 <get_custom_error>:
 8016978:	4b01      	ldr	r3, [pc, #4]	@ (8016980 <get_custom_error+0x8>)
 801697a:	7818      	ldrb	r0, [r3, #0]
 801697c:	4770      	bx	lr
 801697e:	bf00      	nop
 8016980:	20015590 	.word	0x20015590

08016984 <recv_custom_msg>:
 8016984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016988:	4693      	mov	fp, r2
 801698a:	b089      	sub	sp, #36	@ 0x24
 801698c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8016990:	9305      	str	r3, [sp, #20]
 8016992:	468a      	mov	sl, r1
 8016994:	2100      	movs	r1, #0
 8016996:	4604      	mov	r4, r0
 8016998:	f88d 101e 	strb.w	r1, [sp, #30]
 801699c:	b322      	cbz	r2, 80169e8 <recv_custom_msg+0x64>
 801699e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80169a2:	f10d 081f 	add.w	r8, sp, #31
 80169a6:	af05      	add	r7, sp, #20
 80169a8:	f10d 061e 	add.w	r6, sp, #30
 80169ac:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80169b0:	e002      	b.n	80169b8 <recv_custom_msg+0x34>
 80169b2:	9b05      	ldr	r3, [sp, #20]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	dd0f      	ble.n	80169d8 <recv_custom_msg+0x54>
 80169b8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80169bc:	4623      	mov	r3, r4
 80169be:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80169c2:	e9cd 5600 	strd	r5, r6, [sp]
 80169c6:	4622      	mov	r2, r4
 80169c8:	4648      	mov	r0, r9
 80169ca:	f001 f92d 	bl	8017c28 <uxr_read_framed_msg>
 80169ce:	2800      	cmp	r0, #0
 80169d0:	d0ef      	beq.n	80169b2 <recv_custom_msg+0x2e>
 80169d2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80169d6:	b1b3      	cbz	r3, 8016a06 <recv_custom_msg+0x82>
 80169d8:	4b0f      	ldr	r3, [pc, #60]	@ (8016a18 <recv_custom_msg+0x94>)
 80169da:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80169de:	701a      	strb	r2, [r3, #0]
 80169e0:	2000      	movs	r0, #0
 80169e2:	b009      	add	sp, #36	@ 0x24
 80169e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e8:	f10d 021f 	add.w	r2, sp, #31
 80169ec:	9200      	str	r2, [sp, #0]
 80169ee:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80169f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80169f6:	4601      	mov	r1, r0
 80169f8:	47a8      	blx	r5
 80169fa:	2800      	cmp	r0, #0
 80169fc:	d0ec      	beq.n	80169d8 <recv_custom_msg+0x54>
 80169fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d1e8      	bne.n	80169d8 <recv_custom_msg+0x54>
 8016a06:	f8cb 0000 	str.w	r0, [fp]
 8016a0a:	2001      	movs	r0, #1
 8016a0c:	f8ca 4000 	str.w	r4, [sl]
 8016a10:	b009      	add	sp, #36	@ 0x24
 8016a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a16:	bf00      	nop
 8016a18:	20015590 	.word	0x20015590

08016a1c <send_custom_msg>:
 8016a1c:	b530      	push	{r4, r5, lr}
 8016a1e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8016a22:	b087      	sub	sp, #28
 8016a24:	4615      	mov	r5, r2
 8016a26:	b974      	cbnz	r4, 8016a46 <send_custom_msg+0x2a>
 8016a28:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8016a2c:	f10d 0317 	add.w	r3, sp, #23
 8016a30:	47a0      	blx	r4
 8016a32:	b108      	cbz	r0, 8016a38 <send_custom_msg+0x1c>
 8016a34:	42a8      	cmp	r0, r5
 8016a36:	d015      	beq.n	8016a64 <send_custom_msg+0x48>
 8016a38:	4b0c      	ldr	r3, [pc, #48]	@ (8016a6c <send_custom_msg+0x50>)
 8016a3a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8016a3e:	701a      	strb	r2, [r3, #0]
 8016a40:	2000      	movs	r0, #0
 8016a42:	b007      	add	sp, #28
 8016a44:	bd30      	pop	{r4, r5, pc}
 8016a46:	460b      	mov	r3, r1
 8016a48:	2200      	movs	r2, #0
 8016a4a:	f10d 0117 	add.w	r1, sp, #23
 8016a4e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8016a52:	4602      	mov	r2, r0
 8016a54:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8016a58:	9500      	str	r5, [sp, #0]
 8016a5a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8016a5e:	f000 feeb 	bl	8017838 <uxr_write_framed_msg>
 8016a62:	e7e6      	b.n	8016a32 <send_custom_msg+0x16>
 8016a64:	2001      	movs	r0, #1
 8016a66:	b007      	add	sp, #28
 8016a68:	bd30      	pop	{r4, r5, pc}
 8016a6a:	bf00      	nop
 8016a6c:	20015590 	.word	0x20015590

08016a70 <uxr_set_custom_transport_callbacks>:
 8016a70:	b410      	push	{r4}
 8016a72:	9c01      	ldr	r4, [sp, #4]
 8016a74:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8016a78:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8016a7c:	9b02      	ldr	r3, [sp, #8]
 8016a7e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8016a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a86:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8016a8a:	4770      	bx	lr

08016a8c <uxr_init_custom_transport>:
 8016a8c:	b538      	push	{r3, r4, r5, lr}
 8016a8e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8016a92:	b303      	cbz	r3, 8016ad6 <uxr_init_custom_transport+0x4a>
 8016a94:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8016a98:	4604      	mov	r4, r0
 8016a9a:	b1e2      	cbz	r2, 8016ad6 <uxr_init_custom_transport+0x4a>
 8016a9c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8016aa0:	b1ca      	cbz	r2, 8016ad6 <uxr_init_custom_transport+0x4a>
 8016aa2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8016aa6:	b1b2      	cbz	r2, 8016ad6 <uxr_init_custom_transport+0x4a>
 8016aa8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8016aac:	4798      	blx	r3
 8016aae:	4605      	mov	r5, r0
 8016ab0:	b188      	cbz	r0, 8016ad6 <uxr_init_custom_transport+0x4a>
 8016ab2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8016ab6:	b98b      	cbnz	r3, 8016adc <uxr_init_custom_transport+0x50>
 8016ab8:	490b      	ldr	r1, [pc, #44]	@ (8016ae8 <uxr_init_custom_transport+0x5c>)
 8016aba:	4b0c      	ldr	r3, [pc, #48]	@ (8016aec <uxr_init_custom_transport+0x60>)
 8016abc:	4a0c      	ldr	r2, [pc, #48]	@ (8016af0 <uxr_init_custom_transport+0x64>)
 8016abe:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8016ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016ac6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8016aca:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8016ace:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8016ad2:	4628      	mov	r0, r5
 8016ad4:	bd38      	pop	{r3, r4, r5, pc}
 8016ad6:	2500      	movs	r5, #0
 8016ad8:	4628      	mov	r0, r5
 8016ada:	bd38      	pop	{r3, r4, r5, pc}
 8016adc:	2100      	movs	r1, #0
 8016ade:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8016ae2:	f000 fea3 	bl	801782c <uxr_init_framing_io>
 8016ae6:	e7e7      	b.n	8016ab8 <uxr_init_custom_transport+0x2c>
 8016ae8:	08016a1d 	.word	0x08016a1d
 8016aec:	08016985 	.word	0x08016985
 8016af0:	08016979 	.word	0x08016979

08016af4 <uxr_close_custom_transport>:
 8016af4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8016af8:	4718      	bx	r3
 8016afa:	bf00      	nop

08016afc <uxr_init_input_best_effort_stream>:
 8016afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016b00:	8003      	strh	r3, [r0, #0]
 8016b02:	4770      	bx	lr

08016b04 <uxr_reset_input_best_effort_stream>:
 8016b04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016b08:	8003      	strh	r3, [r0, #0]
 8016b0a:	4770      	bx	lr

08016b0c <uxr_receive_best_effort_message>:
 8016b0c:	b538      	push	{r3, r4, r5, lr}
 8016b0e:	4604      	mov	r4, r0
 8016b10:	8800      	ldrh	r0, [r0, #0]
 8016b12:	460d      	mov	r5, r1
 8016b14:	f000 fe72 	bl	80177fc <uxr_seq_num_cmp>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016b20:	bfb8      	it	lt
 8016b22:	8025      	strhlt	r5, [r4, #0]
 8016b24:	bd38      	pop	{r3, r4, r5, pc}
 8016b26:	bf00      	nop

08016b28 <on_full_input_buffer>:
 8016b28:	b570      	push	{r4, r5, r6, lr}
 8016b2a:	4605      	mov	r5, r0
 8016b2c:	460c      	mov	r4, r1
 8016b2e:	682b      	ldr	r3, [r5, #0]
 8016b30:	6809      	ldr	r1, [r1, #0]
 8016b32:	8920      	ldrh	r0, [r4, #8]
 8016b34:	6862      	ldr	r2, [r4, #4]
 8016b36:	fbb2 f2f0 	udiv	r2, r2, r0
 8016b3a:	eba3 0c01 	sub.w	ip, r3, r1
 8016b3e:	fbbc fcf2 	udiv	ip, ip, r2
 8016b42:	f10c 0c01 	add.w	ip, ip, #1
 8016b46:	fa1f f38c 	uxth.w	r3, ip
 8016b4a:	fbb3 f6f0 	udiv	r6, r3, r0
 8016b4e:	fb00 3316 	mls	r3, r0, r6, r3
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	fb02 f303 	mul.w	r3, r2, r3
 8016b58:	1d18      	adds	r0, r3, #4
 8016b5a:	4408      	add	r0, r1
 8016b5c:	7d26      	ldrb	r6, [r4, #20]
 8016b5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016b62:	b116      	cbz	r6, 8016b6a <on_full_input_buffer+0x42>
 8016b64:	2600      	movs	r6, #0
 8016b66:	f840 6c04 	str.w	r6, [r0, #-4]
 8016b6a:	2a03      	cmp	r2, #3
 8016b6c:	d801      	bhi.n	8016b72 <on_full_input_buffer+0x4a>
 8016b6e:	2001      	movs	r0, #1
 8016b70:	bd70      	pop	{r4, r5, r6, pc}
 8016b72:	3308      	adds	r3, #8
 8016b74:	4419      	add	r1, r3
 8016b76:	4628      	mov	r0, r5
 8016b78:	692b      	ldr	r3, [r5, #16]
 8016b7a:	3a04      	subs	r2, #4
 8016b7c:	f7f8 f994 	bl	800eea8 <ucdr_init_buffer_origin>
 8016b80:	4628      	mov	r0, r5
 8016b82:	4903      	ldr	r1, [pc, #12]	@ (8016b90 <on_full_input_buffer+0x68>)
 8016b84:	4622      	mov	r2, r4
 8016b86:	f7f8 f96b 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8016b8a:	2000      	movs	r0, #0
 8016b8c:	bd70      	pop	{r4, r5, r6, pc}
 8016b8e:	bf00      	nop
 8016b90:	08016b29 	.word	0x08016b29

08016b94 <uxr_init_input_reliable_stream>:
 8016b94:	b500      	push	{lr}
 8016b96:	e9c0 1200 	strd	r1, r2, [r0]
 8016b9a:	f04f 0e00 	mov.w	lr, #0
 8016b9e:	9a01      	ldr	r2, [sp, #4]
 8016ba0:	8103      	strh	r3, [r0, #8]
 8016ba2:	6102      	str	r2, [r0, #16]
 8016ba4:	f880 e014 	strb.w	lr, [r0, #20]
 8016ba8:	b1d3      	cbz	r3, 8016be0 <uxr_init_input_reliable_stream+0x4c>
 8016baa:	f8c1 e000 	str.w	lr, [r1]
 8016bae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016bb2:	f1bc 0f01 	cmp.w	ip, #1
 8016bb6:	d913      	bls.n	8016be0 <uxr_init_input_reliable_stream+0x4c>
 8016bb8:	2301      	movs	r3, #1
 8016bba:	fbb3 f1fc 	udiv	r1, r3, ip
 8016bbe:	fb0c 3111 	mls	r1, ip, r1, r3
 8016bc2:	b289      	uxth	r1, r1
 8016bc4:	6842      	ldr	r2, [r0, #4]
 8016bc6:	fbb2 f2fc 	udiv	r2, r2, ip
 8016bca:	fb01 f202 	mul.w	r2, r1, r2
 8016bce:	6801      	ldr	r1, [r0, #0]
 8016bd0:	f841 e002 	str.w	lr, [r1, r2]
 8016bd4:	3301      	adds	r3, #1
 8016bd6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	459c      	cmp	ip, r3
 8016bde:	d8ec      	bhi.n	8016bba <uxr_init_input_reliable_stream+0x26>
 8016be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016be4:	60c3      	str	r3, [r0, #12]
 8016be6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bea:	bf00      	nop

08016bec <uxr_reset_input_reliable_stream>:
 8016bec:	8901      	ldrh	r1, [r0, #8]
 8016bee:	b1e9      	cbz	r1, 8016c2c <uxr_reset_input_reliable_stream+0x40>
 8016bf0:	f04f 0c00 	mov.w	ip, #0
 8016bf4:	b500      	push	{lr}
 8016bf6:	4663      	mov	r3, ip
 8016bf8:	46e6      	mov	lr, ip
 8016bfa:	fbb3 f2f1 	udiv	r2, r3, r1
 8016bfe:	fb01 3312 	mls	r3, r1, r2, r3
 8016c02:	b29b      	uxth	r3, r3
 8016c04:	6842      	ldr	r2, [r0, #4]
 8016c06:	fbb2 f2f1 	udiv	r2, r2, r1
 8016c0a:	fb02 f303 	mul.w	r3, r2, r3
 8016c0e:	6802      	ldr	r2, [r0, #0]
 8016c10:	f842 e003 	str.w	lr, [r2, r3]
 8016c14:	f10c 0c01 	add.w	ip, ip, #1
 8016c18:	8901      	ldrh	r1, [r0, #8]
 8016c1a:	fa1f f38c 	uxth.w	r3, ip
 8016c1e:	4299      	cmp	r1, r3
 8016c20:	d8eb      	bhi.n	8016bfa <uxr_reset_input_reliable_stream+0xe>
 8016c22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016c26:	60c3      	str	r3, [r0, #12]
 8016c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016c30:	60c3      	str	r3, [r0, #12]
 8016c32:	4770      	bx	lr

08016c34 <uxr_receive_reliable_message>:
 8016c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c38:	4604      	mov	r4, r0
 8016c3a:	460d      	mov	r5, r1
 8016c3c:	8901      	ldrh	r1, [r0, #8]
 8016c3e:	8980      	ldrh	r0, [r0, #12]
 8016c40:	4690      	mov	r8, r2
 8016c42:	461f      	mov	r7, r3
 8016c44:	f000 fdd2 	bl	80177ec <uxr_seq_num_add>
 8016c48:	4629      	mov	r1, r5
 8016c4a:	4606      	mov	r6, r0
 8016c4c:	89a0      	ldrh	r0, [r4, #12]
 8016c4e:	f000 fdd5 	bl	80177fc <uxr_seq_num_cmp>
 8016c52:	2800      	cmp	r0, #0
 8016c54:	db0a      	blt.n	8016c6c <uxr_receive_reliable_message+0x38>
 8016c56:	2600      	movs	r6, #0
 8016c58:	89e0      	ldrh	r0, [r4, #14]
 8016c5a:	4629      	mov	r1, r5
 8016c5c:	f000 fdce 	bl	80177fc <uxr_seq_num_cmp>
 8016c60:	2800      	cmp	r0, #0
 8016c62:	da00      	bge.n	8016c66 <uxr_receive_reliable_message+0x32>
 8016c64:	81e5      	strh	r5, [r4, #14]
 8016c66:	4630      	mov	r0, r6
 8016c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c6c:	4630      	mov	r0, r6
 8016c6e:	4629      	mov	r1, r5
 8016c70:	f000 fdc4 	bl	80177fc <uxr_seq_num_cmp>
 8016c74:	2800      	cmp	r0, #0
 8016c76:	dbee      	blt.n	8016c56 <uxr_receive_reliable_message+0x22>
 8016c78:	6923      	ldr	r3, [r4, #16]
 8016c7a:	4640      	mov	r0, r8
 8016c7c:	4798      	blx	r3
 8016c7e:	2101      	movs	r1, #1
 8016c80:	4681      	mov	r9, r0
 8016c82:	89a0      	ldrh	r0, [r4, #12]
 8016c84:	f000 fdb2 	bl	80177ec <uxr_seq_num_add>
 8016c88:	f1b9 0f00 	cmp.w	r9, #0
 8016c8c:	d101      	bne.n	8016c92 <uxr_receive_reliable_message+0x5e>
 8016c8e:	4285      	cmp	r5, r0
 8016c90:	d047      	beq.n	8016d22 <uxr_receive_reliable_message+0xee>
 8016c92:	8922      	ldrh	r2, [r4, #8]
 8016c94:	fbb5 f0f2 	udiv	r0, r5, r2
 8016c98:	fb02 5010 	mls	r0, r2, r0, r5
 8016c9c:	b280      	uxth	r0, r0
 8016c9e:	6863      	ldr	r3, [r4, #4]
 8016ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ca4:	fb00 f303 	mul.w	r3, r0, r3
 8016ca8:	6820      	ldr	r0, [r4, #0]
 8016caa:	3304      	adds	r3, #4
 8016cac:	4418      	add	r0, r3
 8016cae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d1cf      	bne.n	8016c56 <uxr_receive_reliable_message+0x22>
 8016cb6:	4641      	mov	r1, r8
 8016cb8:	463a      	mov	r2, r7
 8016cba:	f002 fd00 	bl	80196be <memcpy>
 8016cbe:	8921      	ldrh	r1, [r4, #8]
 8016cc0:	fbb5 f2f1 	udiv	r2, r5, r1
 8016cc4:	fb01 5212 	mls	r2, r1, r2, r5
 8016cc8:	b292      	uxth	r2, r2
 8016cca:	6863      	ldr	r3, [r4, #4]
 8016ccc:	fbb3 f3f1 	udiv	r3, r3, r1
 8016cd0:	fb02 f303 	mul.w	r3, r2, r3
 8016cd4:	6822      	ldr	r2, [r4, #0]
 8016cd6:	50d7      	str	r7, [r2, r3]
 8016cd8:	9a08      	ldr	r2, [sp, #32]
 8016cda:	2301      	movs	r3, #1
 8016cdc:	7013      	strb	r3, [r2, #0]
 8016cde:	f1b9 0f00 	cmp.w	r9, #0
 8016ce2:	d0b8      	beq.n	8016c56 <uxr_receive_reliable_message+0x22>
 8016ce4:	89a6      	ldrh	r6, [r4, #12]
 8016ce6:	4630      	mov	r0, r6
 8016ce8:	2101      	movs	r1, #1
 8016cea:	f000 fd7f 	bl	80177ec <uxr_seq_num_add>
 8016cee:	8922      	ldrh	r2, [r4, #8]
 8016cf0:	6863      	ldr	r3, [r4, #4]
 8016cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8016cf6:	4606      	mov	r6, r0
 8016cf8:	fbb0 f0f2 	udiv	r0, r0, r2
 8016cfc:	fb02 6010 	mls	r0, r2, r0, r6
 8016d00:	b280      	uxth	r0, r0
 8016d02:	fb00 f303 	mul.w	r3, r0, r3
 8016d06:	6820      	ldr	r0, [r4, #0]
 8016d08:	3304      	adds	r3, #4
 8016d0a:	4418      	add	r0, r3
 8016d0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d0a0      	beq.n	8016c56 <uxr_receive_reliable_message+0x22>
 8016d14:	6923      	ldr	r3, [r4, #16]
 8016d16:	4798      	blx	r3
 8016d18:	2802      	cmp	r0, #2
 8016d1a:	d008      	beq.n	8016d2e <uxr_receive_reliable_message+0xfa>
 8016d1c:	2801      	cmp	r0, #1
 8016d1e:	d0e2      	beq.n	8016ce6 <uxr_receive_reliable_message+0xb2>
 8016d20:	e799      	b.n	8016c56 <uxr_receive_reliable_message+0x22>
 8016d22:	9b08      	ldr	r3, [sp, #32]
 8016d24:	81a5      	strh	r5, [r4, #12]
 8016d26:	2601      	movs	r6, #1
 8016d28:	f883 9000 	strb.w	r9, [r3]
 8016d2c:	e794      	b.n	8016c58 <uxr_receive_reliable_message+0x24>
 8016d2e:	2601      	movs	r6, #1
 8016d30:	e792      	b.n	8016c58 <uxr_receive_reliable_message+0x24>
 8016d32:	bf00      	nop

08016d34 <uxr_next_input_reliable_buffer_available>:
 8016d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d38:	4604      	mov	r4, r0
 8016d3a:	460f      	mov	r7, r1
 8016d3c:	8980      	ldrh	r0, [r0, #12]
 8016d3e:	2101      	movs	r1, #1
 8016d40:	4690      	mov	r8, r2
 8016d42:	f000 fd53 	bl	80177ec <uxr_seq_num_add>
 8016d46:	8922      	ldrh	r2, [r4, #8]
 8016d48:	fbb0 f6f2 	udiv	r6, r0, r2
 8016d4c:	fb02 0616 	mls	r6, r2, r6, r0
 8016d50:	b2b6      	uxth	r6, r6
 8016d52:	6863      	ldr	r3, [r4, #4]
 8016d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d58:	fb06 f303 	mul.w	r3, r6, r3
 8016d5c:	6826      	ldr	r6, [r4, #0]
 8016d5e:	3304      	adds	r3, #4
 8016d60:	441e      	add	r6, r3
 8016d62:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016d66:	f1b9 0f00 	cmp.w	r9, #0
 8016d6a:	d023      	beq.n	8016db4 <uxr_next_input_reliable_buffer_available+0x80>
 8016d6c:	6923      	ldr	r3, [r4, #16]
 8016d6e:	4605      	mov	r5, r0
 8016d70:	4630      	mov	r0, r6
 8016d72:	4798      	blx	r3
 8016d74:	4682      	mov	sl, r0
 8016d76:	b300      	cbz	r0, 8016dba <uxr_next_input_reliable_buffer_available+0x86>
 8016d78:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016d7c:	2101      	movs	r1, #1
 8016d7e:	4650      	mov	r0, sl
 8016d80:	f000 fd34 	bl	80177ec <uxr_seq_num_add>
 8016d84:	8921      	ldrh	r1, [r4, #8]
 8016d86:	fbb0 f2f1 	udiv	r2, r0, r1
 8016d8a:	4682      	mov	sl, r0
 8016d8c:	fb01 0212 	mls	r2, r1, r2, r0
 8016d90:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016d94:	b292      	uxth	r2, r2
 8016d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8016d9a:	fb02 f303 	mul.w	r3, r2, r3
 8016d9e:	3304      	adds	r3, #4
 8016da0:	4418      	add	r0, r3
 8016da2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016da6:	b12b      	cbz	r3, 8016db4 <uxr_next_input_reliable_buffer_available+0x80>
 8016da8:	6923      	ldr	r3, [r4, #16]
 8016daa:	4798      	blx	r3
 8016dac:	2802      	cmp	r0, #2
 8016dae:	d01b      	beq.n	8016de8 <uxr_next_input_reliable_buffer_available+0xb4>
 8016db0:	2801      	cmp	r0, #1
 8016db2:	d0e3      	beq.n	8016d7c <uxr_next_input_reliable_buffer_available+0x48>
 8016db4:	2000      	movs	r0, #0
 8016db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dba:	464a      	mov	r2, r9
 8016dbc:	4631      	mov	r1, r6
 8016dbe:	4638      	mov	r0, r7
 8016dc0:	f7f8 f87a 	bl	800eeb8 <ucdr_init_buffer>
 8016dc4:	8921      	ldrh	r1, [r4, #8]
 8016dc6:	fbb5 f2f1 	udiv	r2, r5, r1
 8016dca:	fb01 5212 	mls	r2, r1, r2, r5
 8016dce:	b292      	uxth	r2, r2
 8016dd0:	6863      	ldr	r3, [r4, #4]
 8016dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8016dd6:	fb02 f303 	mul.w	r3, r2, r3
 8016dda:	6822      	ldr	r2, [r4, #0]
 8016ddc:	f842 a003 	str.w	sl, [r2, r3]
 8016de0:	2001      	movs	r0, #1
 8016de2:	81a5      	strh	r5, [r4, #12]
 8016de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016de8:	8920      	ldrh	r0, [r4, #8]
 8016dea:	fbb5 f3f0 	udiv	r3, r5, r0
 8016dee:	fb00 5513 	mls	r5, r0, r3, r5
 8016df2:	b2ad      	uxth	r5, r5
 8016df4:	6863      	ldr	r3, [r4, #4]
 8016df6:	fbb3 f3f0 	udiv	r3, r3, r0
 8016dfa:	fb03 f505 	mul.w	r5, r3, r5
 8016dfe:	6823      	ldr	r3, [r4, #0]
 8016e00:	2000      	movs	r0, #0
 8016e02:	5158      	str	r0, [r3, r5]
 8016e04:	eb06 0108 	add.w	r1, r6, r8
 8016e08:	eba9 0208 	sub.w	r2, r9, r8
 8016e0c:	4638      	mov	r0, r7
 8016e0e:	f7f8 f853 	bl	800eeb8 <ucdr_init_buffer>
 8016e12:	4638      	mov	r0, r7
 8016e14:	4903      	ldr	r1, [pc, #12]	@ (8016e24 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016e16:	4622      	mov	r2, r4
 8016e18:	f7f8 f822 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8016e1c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016e20:	2001      	movs	r0, #1
 8016e22:	e7c8      	b.n	8016db6 <uxr_next_input_reliable_buffer_available+0x82>
 8016e24:	08016b29 	.word	0x08016b29

08016e28 <uxr_process_heartbeat>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4611      	mov	r1, r2
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	89c0      	ldrh	r0, [r0, #14]
 8016e30:	4615      	mov	r5, r2
 8016e32:	f000 fce3 	bl	80177fc <uxr_seq_num_cmp>
 8016e36:	2800      	cmp	r0, #0
 8016e38:	bfb8      	it	lt
 8016e3a:	81e5      	strhlt	r5, [r4, #14]
 8016e3c:	bd38      	pop	{r3, r4, r5, pc}
 8016e3e:	bf00      	nop

08016e40 <uxr_compute_acknack>:
 8016e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e44:	8903      	ldrh	r3, [r0, #8]
 8016e46:	8985      	ldrh	r5, [r0, #12]
 8016e48:	4604      	mov	r4, r0
 8016e4a:	460e      	mov	r6, r1
 8016e4c:	b1d3      	cbz	r3, 8016e84 <uxr_compute_acknack+0x44>
 8016e4e:	4628      	mov	r0, r5
 8016e50:	2701      	movs	r7, #1
 8016e52:	e003      	b.n	8016e5c <uxr_compute_acknack+0x1c>
 8016e54:	4567      	cmp	r7, ip
 8016e56:	d215      	bcs.n	8016e84 <uxr_compute_acknack+0x44>
 8016e58:	89a0      	ldrh	r0, [r4, #12]
 8016e5a:	3701      	adds	r7, #1
 8016e5c:	b2b9      	uxth	r1, r7
 8016e5e:	f000 fcc5 	bl	80177ec <uxr_seq_num_add>
 8016e62:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e66:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e6a:	fb0c 0313 	mls	r3, ip, r3, r0
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016e74:	fbb3 f3fc 	udiv	r3, r3, ip
 8016e78:	fb02 f303 	mul.w	r3, r2, r3
 8016e7c:	58cb      	ldr	r3, [r1, r3]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d1e8      	bne.n	8016e54 <uxr_compute_acknack+0x14>
 8016e82:	4605      	mov	r5, r0
 8016e84:	8035      	strh	r5, [r6, #0]
 8016e86:	2101      	movs	r1, #1
 8016e88:	4628      	mov	r0, r5
 8016e8a:	89e7      	ldrh	r7, [r4, #14]
 8016e8c:	f000 fcb2 	bl	80177f4 <uxr_seq_num_sub>
 8016e90:	4601      	mov	r1, r0
 8016e92:	4638      	mov	r0, r7
 8016e94:	f000 fcae 	bl	80177f4 <uxr_seq_num_sub>
 8016e98:	4605      	mov	r5, r0
 8016e9a:	b318      	cbz	r0, 8016ee4 <uxr_compute_acknack+0xa4>
 8016e9c:	f04f 0900 	mov.w	r9, #0
 8016ea0:	464f      	mov	r7, r9
 8016ea2:	f04f 0801 	mov.w	r8, #1
 8016ea6:	fa1f f189 	uxth.w	r1, r9
 8016eaa:	8830      	ldrh	r0, [r6, #0]
 8016eac:	f000 fc9e 	bl	80177ec <uxr_seq_num_add>
 8016eb0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016eb4:	fbb0 f3fc 	udiv	r3, r0, ip
 8016eb8:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016ebc:	fb03 001c 	mls	r0, r3, ip, r0
 8016ec0:	b283      	uxth	r3, r0
 8016ec2:	fbb2 f2fc 	udiv	r2, r2, ip
 8016ec6:	fb02 f303 	mul.w	r3, r2, r3
 8016eca:	fa08 f209 	lsl.w	r2, r8, r9
 8016ece:	58cb      	ldr	r3, [r1, r3]
 8016ed0:	f109 0901 	add.w	r9, r9, #1
 8016ed4:	b90b      	cbnz	r3, 8016eda <uxr_compute_acknack+0x9a>
 8016ed6:	4317      	orrs	r7, r2
 8016ed8:	b2bf      	uxth	r7, r7
 8016eda:	454d      	cmp	r5, r9
 8016edc:	d1e3      	bne.n	8016ea6 <uxr_compute_acknack+0x66>
 8016ede:	4638      	mov	r0, r7
 8016ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ee4:	4607      	mov	r7, r0
 8016ee6:	4638      	mov	r0, r7
 8016ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016eec <uxr_init_output_best_effort_stream>:
 8016eec:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016ef0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016ef4:	6001      	str	r1, [r0, #0]
 8016ef6:	7303      	strb	r3, [r0, #12]
 8016ef8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016efc:	4770      	bx	lr
 8016efe:	bf00      	nop

08016f00 <uxr_reset_output_best_effort_stream>:
 8016f00:	7b02      	ldrb	r2, [r0, #12]
 8016f02:	6042      	str	r2, [r0, #4]
 8016f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f08:	81c3      	strh	r3, [r0, #14]
 8016f0a:	4770      	bx	lr

08016f0c <uxr_prepare_best_effort_buffer_to_write>:
 8016f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f0e:	4604      	mov	r4, r0
 8016f10:	b083      	sub	sp, #12
 8016f12:	6840      	ldr	r0, [r0, #4]
 8016f14:	460d      	mov	r5, r1
 8016f16:	4616      	mov	r6, r2
 8016f18:	f7f9 fd2a 	bl	8010970 <uxr_submessage_padding>
 8016f1c:	6863      	ldr	r3, [r4, #4]
 8016f1e:	4418      	add	r0, r3
 8016f20:	68a3      	ldr	r3, [r4, #8]
 8016f22:	1942      	adds	r2, r0, r5
 8016f24:	4293      	cmp	r3, r2
 8016f26:	bf2c      	ite	cs
 8016f28:	2701      	movcs	r7, #1
 8016f2a:	2700      	movcc	r7, #0
 8016f2c:	d202      	bcs.n	8016f34 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016f2e:	4638      	mov	r0, r7
 8016f30:	b003      	add	sp, #12
 8016f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f34:	9000      	str	r0, [sp, #0]
 8016f36:	6821      	ldr	r1, [r4, #0]
 8016f38:	4630      	mov	r0, r6
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	f7f7 ffaa 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 8016f40:	6861      	ldr	r1, [r4, #4]
 8016f42:	4638      	mov	r0, r7
 8016f44:	4429      	add	r1, r5
 8016f46:	6061      	str	r1, [r4, #4]
 8016f48:	b003      	add	sp, #12
 8016f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f4c <uxr_prepare_best_effort_buffer_to_send>:
 8016f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f50:	4604      	mov	r4, r0
 8016f52:	461d      	mov	r5, r3
 8016f54:	6840      	ldr	r0, [r0, #4]
 8016f56:	7b23      	ldrb	r3, [r4, #12]
 8016f58:	4298      	cmp	r0, r3
 8016f5a:	bf8c      	ite	hi
 8016f5c:	2601      	movhi	r6, #1
 8016f5e:	2600      	movls	r6, #0
 8016f60:	d802      	bhi.n	8016f68 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016f62:	4630      	mov	r0, r6
 8016f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f68:	4688      	mov	r8, r1
 8016f6a:	89e0      	ldrh	r0, [r4, #14]
 8016f6c:	2101      	movs	r1, #1
 8016f6e:	4617      	mov	r7, r2
 8016f70:	f000 fc3c 	bl	80177ec <uxr_seq_num_add>
 8016f74:	6823      	ldr	r3, [r4, #0]
 8016f76:	81e0      	strh	r0, [r4, #14]
 8016f78:	8028      	strh	r0, [r5, #0]
 8016f7a:	f8c8 3000 	str.w	r3, [r8]
 8016f7e:	6863      	ldr	r3, [r4, #4]
 8016f80:	603b      	str	r3, [r7, #0]
 8016f82:	7b23      	ldrb	r3, [r4, #12]
 8016f84:	6063      	str	r3, [r4, #4]
 8016f86:	4630      	mov	r0, r6
 8016f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f8c <on_full_output_buffer>:
 8016f8c:	b538      	push	{r3, r4, r5, lr}
 8016f8e:	6802      	ldr	r2, [r0, #0]
 8016f90:	460c      	mov	r4, r1
 8016f92:	6809      	ldr	r1, [r1, #0]
 8016f94:	8923      	ldrh	r3, [r4, #8]
 8016f96:	eba2 0c01 	sub.w	ip, r2, r1
 8016f9a:	6862      	ldr	r2, [r4, #4]
 8016f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8016fa0:	fbbc fcf2 	udiv	ip, ip, r2
 8016fa4:	f10c 0c01 	add.w	ip, ip, #1
 8016fa8:	fa1f fc8c 	uxth.w	ip, ip
 8016fac:	fbbc fef3 	udiv	lr, ip, r3
 8016fb0:	fb03 c31e 	mls	r3, r3, lr, ip
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	fb02 f303 	mul.w	r3, r2, r3
 8016fba:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016fbe:	58ca      	ldr	r2, [r1, r3]
 8016fc0:	4463      	add	r3, ip
 8016fc2:	eba2 020c 	sub.w	r2, r2, ip
 8016fc6:	3308      	adds	r3, #8
 8016fc8:	4605      	mov	r5, r0
 8016fca:	4419      	add	r1, r3
 8016fcc:	3a04      	subs	r2, #4
 8016fce:	6903      	ldr	r3, [r0, #16]
 8016fd0:	f7f7 ff6a 	bl	800eea8 <ucdr_init_buffer_origin>
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	4903      	ldr	r1, [pc, #12]	@ (8016fe4 <on_full_output_buffer+0x58>)
 8016fd8:	4622      	mov	r2, r4
 8016fda:	f7f7 ff41 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8016fde:	2000      	movs	r0, #0
 8016fe0:	bd38      	pop	{r3, r4, r5, pc}
 8016fe2:	bf00      	nop
 8016fe4:	08016f8d 	.word	0x08016f8d

08016fe8 <uxr_init_output_reliable_stream>:
 8016fe8:	b410      	push	{r4}
 8016fea:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016fee:	8103      	strh	r3, [r0, #8]
 8016ff0:	e9c0 1200 	strd	r1, r2, [r0]
 8016ff4:	f880 c00c 	strb.w	ip, [r0, #12]
 8016ff8:	b1d3      	cbz	r3, 8017030 <uxr_init_output_reliable_stream+0x48>
 8016ffa:	f8c1 c000 	str.w	ip, [r1]
 8016ffe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017002:	f1bc 0f01 	cmp.w	ip, #1
 8017006:	d913      	bls.n	8017030 <uxr_init_output_reliable_stream+0x48>
 8017008:	2301      	movs	r3, #1
 801700a:	fbb3 f1fc 	udiv	r1, r3, ip
 801700e:	fb0c 3111 	mls	r1, ip, r1, r3
 8017012:	b289      	uxth	r1, r1
 8017014:	6842      	ldr	r2, [r0, #4]
 8017016:	6804      	ldr	r4, [r0, #0]
 8017018:	fbb2 f2fc 	udiv	r2, r2, ip
 801701c:	fb01 f202 	mul.w	r2, r1, r2
 8017020:	7b01      	ldrb	r1, [r0, #12]
 8017022:	50a1      	str	r1, [r4, r2]
 8017024:	3301      	adds	r3, #1
 8017026:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801702a:	b29b      	uxth	r3, r3
 801702c:	459c      	cmp	ip, r3
 801702e:	d8ec      	bhi.n	801700a <uxr_init_output_reliable_stream+0x22>
 8017030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017034:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017038:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801703c:	4905      	ldr	r1, [pc, #20]	@ (8017054 <uxr_init_output_reliable_stream+0x6c>)
 801703e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017042:	f8c0 100e 	str.w	r1, [r0, #14]
 8017046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801704a:	2300      	movs	r3, #0
 801704c:	8242      	strh	r2, [r0, #18]
 801704e:	8403      	strh	r3, [r0, #32]
 8017050:	4770      	bx	lr
 8017052:	bf00      	nop
 8017054:	ffff0000 	.word	0xffff0000

08017058 <uxr_reset_output_reliable_stream>:
 8017058:	8901      	ldrh	r1, [r0, #8]
 801705a:	b1b1      	cbz	r1, 801708a <uxr_reset_output_reliable_stream+0x32>
 801705c:	f04f 0c00 	mov.w	ip, #0
 8017060:	4663      	mov	r3, ip
 8017062:	fbb3 f2f1 	udiv	r2, r3, r1
 8017066:	fb01 3312 	mls	r3, r1, r2, r3
 801706a:	b29b      	uxth	r3, r3
 801706c:	6842      	ldr	r2, [r0, #4]
 801706e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017072:	6801      	ldr	r1, [r0, #0]
 8017074:	fb02 f303 	mul.w	r3, r2, r3
 8017078:	7b02      	ldrb	r2, [r0, #12]
 801707a:	50ca      	str	r2, [r1, r3]
 801707c:	f10c 0c01 	add.w	ip, ip, #1
 8017080:	8901      	ldrh	r1, [r0, #8]
 8017082:	fa1f f38c 	uxth.w	r3, ip
 8017086:	4299      	cmp	r1, r3
 8017088:	d8eb      	bhi.n	8017062 <uxr_reset_output_reliable_stream+0xa>
 801708a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801708e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017092:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017096:	4904      	ldr	r1, [pc, #16]	@ (80170a8 <uxr_reset_output_reliable_stream+0x50>)
 8017098:	f8c0 100e 	str.w	r1, [r0, #14]
 801709c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80170a0:	2300      	movs	r3, #0
 80170a2:	8242      	strh	r2, [r0, #18]
 80170a4:	8403      	strh	r3, [r0, #32]
 80170a6:	4770      	bx	lr
 80170a8:	ffff0000 	.word	0xffff0000

080170ac <uxr_prepare_reliable_buffer_to_write>:
 80170ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170b0:	4604      	mov	r4, r0
 80170b2:	b091      	sub	sp, #68	@ 0x44
 80170b4:	8900      	ldrh	r0, [r0, #8]
 80170b6:	89e6      	ldrh	r6, [r4, #14]
 80170b8:	6823      	ldr	r3, [r4, #0]
 80170ba:	9204      	str	r2, [sp, #16]
 80170bc:	fbb6 f2f0 	udiv	r2, r6, r0
 80170c0:	fb00 6212 	mls	r2, r0, r2, r6
 80170c4:	b292      	uxth	r2, r2
 80170c6:	6865      	ldr	r5, [r4, #4]
 80170c8:	fbb5 f5f0 	udiv	r5, r5, r0
 80170cc:	fb05 3202 	mla	r2, r5, r2, r3
 80170d0:	3204      	adds	r2, #4
 80170d2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80170d6:	f894 900c 	ldrb.w	r9, [r4, #12]
 80170da:	9203      	str	r2, [sp, #12]
 80170dc:	468b      	mov	fp, r1
 80170de:	1f2f      	subs	r7, r5, #4
 80170e0:	2800      	cmp	r0, #0
 80170e2:	f000 814c 	beq.w	801737e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80170e6:	f04f 0c00 	mov.w	ip, #0
 80170ea:	46e2      	mov	sl, ip
 80170ec:	4661      	mov	r1, ip
 80170ee:	fbb1 f2f0 	udiv	r2, r1, r0
 80170f2:	fb00 1212 	mls	r2, r0, r2, r1
 80170f6:	b292      	uxth	r2, r2
 80170f8:	fb05 f202 	mul.w	r2, r5, r2
 80170fc:	f10c 0c01 	add.w	ip, ip, #1
 8017100:	589a      	ldr	r2, [r3, r2]
 8017102:	454a      	cmp	r2, r9
 8017104:	bf08      	it	eq
 8017106:	f10a 0a01 	addeq.w	sl, sl, #1
 801710a:	fa1f f18c 	uxth.w	r1, ip
 801710e:	bf08      	it	eq
 8017110:	fa1f fa8a 	uxtheq.w	sl, sl
 8017114:	4281      	cmp	r1, r0
 8017116:	d3ea      	bcc.n	80170ee <uxr_prepare_reliable_buffer_to_write+0x42>
 8017118:	4640      	mov	r0, r8
 801711a:	2104      	movs	r1, #4
 801711c:	f8cd a014 	str.w	sl, [sp, #20]
 8017120:	f7f7 fece 	bl	800eec0 <ucdr_alignment>
 8017124:	4480      	add	r8, r0
 8017126:	eb08 020b 	add.w	r2, r8, fp
 801712a:	42ba      	cmp	r2, r7
 801712c:	f240 80cd 	bls.w	80172ca <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017130:	7b22      	ldrb	r2, [r4, #12]
 8017132:	445a      	add	r2, fp
 8017134:	42ba      	cmp	r2, r7
 8017136:	f240 80b5 	bls.w	80172a4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801713a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801713e:	33fc      	adds	r3, #252	@ 0xfc
 8017140:	b2ba      	uxth	r2, r7
 8017142:	4413      	add	r3, r2
 8017144:	b29b      	uxth	r3, r3
 8017146:	fb0a f903 	mul.w	r9, sl, r3
 801714a:	45d9      	cmp	r9, fp
 801714c:	9305      	str	r3, [sp, #20]
 801714e:	9306      	str	r3, [sp, #24]
 8017150:	f0c0 80b7 	bcc.w	80172c2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017154:	f108 0304 	add.w	r3, r8, #4
 8017158:	42bb      	cmp	r3, r7
 801715a:	f080 80db 	bcs.w	8017314 <uxr_prepare_reliable_buffer_to_write+0x268>
 801715e:	f1a2 0904 	sub.w	r9, r2, #4
 8017162:	eba9 0908 	sub.w	r9, r9, r8
 8017166:	9b05      	ldr	r3, [sp, #20]
 8017168:	fa1f f989 	uxth.w	r9, r9
 801716c:	ebab 0b09 	sub.w	fp, fp, r9
 8017170:	fbbb f2f3 	udiv	r2, fp, r3
 8017174:	fb03 b312 	mls	r3, r3, r2, fp
 8017178:	2b00      	cmp	r3, #0
 801717a:	f000 80c8 	beq.w	801730e <uxr_prepare_reliable_buffer_to_write+0x262>
 801717e:	3201      	adds	r2, #1
 8017180:	b292      	uxth	r2, r2
 8017182:	9306      	str	r3, [sp, #24]
 8017184:	4552      	cmp	r2, sl
 8017186:	f200 809c 	bhi.w	80172c2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801718a:	f10d 0b20 	add.w	fp, sp, #32
 801718e:	2a00      	cmp	r2, #0
 8017190:	d042      	beq.n	8017218 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017192:	f8cd 801c 	str.w	r8, [sp, #28]
 8017196:	f04f 0a00 	mov.w	sl, #0
 801719a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801719e:	9505      	str	r5, [sp, #20]
 80171a0:	f10d 0b20 	add.w	fp, sp, #32
 80171a4:	4615      	mov	r5, r2
 80171a6:	e000      	b.n	80171aa <uxr_prepare_reliable_buffer_to_write+0xfe>
 80171a8:	46c1      	mov	r9, r8
 80171aa:	8920      	ldrh	r0, [r4, #8]
 80171ac:	fbb6 f2f0 	udiv	r2, r6, r0
 80171b0:	fb00 6112 	mls	r1, r0, r2, r6
 80171b4:	b28a      	uxth	r2, r1
 80171b6:	6863      	ldr	r3, [r4, #4]
 80171b8:	fbb3 f1f0 	udiv	r1, r3, r0
 80171bc:	6823      	ldr	r3, [r4, #0]
 80171be:	fb02 f101 	mul.w	r1, r2, r1
 80171c2:	3104      	adds	r1, #4
 80171c4:	4419      	add	r1, r3
 80171c6:	4658      	mov	r0, fp
 80171c8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80171cc:	9200      	str	r2, [sp, #0]
 80171ce:	2300      	movs	r3, #0
 80171d0:	463a      	mov	r2, r7
 80171d2:	f7f7 fe5f 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 80171d6:	464a      	mov	r2, r9
 80171d8:	2300      	movs	r3, #0
 80171da:	210d      	movs	r1, #13
 80171dc:	4658      	mov	r0, fp
 80171de:	f7f9 fb87 	bl	80108f0 <uxr_buffer_submessage_header>
 80171e2:	8921      	ldrh	r1, [r4, #8]
 80171e4:	fbb6 f2f1 	udiv	r2, r6, r1
 80171e8:	fb01 6212 	mls	r2, r1, r2, r6
 80171ec:	b292      	uxth	r2, r2
 80171ee:	6863      	ldr	r3, [r4, #4]
 80171f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80171f4:	fb02 f303 	mul.w	r3, r2, r3
 80171f8:	6822      	ldr	r2, [r4, #0]
 80171fa:	4630      	mov	r0, r6
 80171fc:	50d7      	str	r7, [r2, r3]
 80171fe:	2101      	movs	r1, #1
 8017200:	f000 faf4 	bl	80177ec <uxr_seq_num_add>
 8017204:	f10a 0a01 	add.w	sl, sl, #1
 8017208:	fa1f f38a 	uxth.w	r3, sl
 801720c:	429d      	cmp	r5, r3
 801720e:	4606      	mov	r6, r0
 8017210:	d8ca      	bhi.n	80171a8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017212:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017216:	9d05      	ldr	r5, [sp, #20]
 8017218:	8920      	ldrh	r0, [r4, #8]
 801721a:	fbb6 f3f0 	udiv	r3, r6, r0
 801721e:	fb00 6313 	mls	r3, r0, r3, r6
 8017222:	b299      	uxth	r1, r3
 8017224:	6863      	ldr	r3, [r4, #4]
 8017226:	fbb3 f3f0 	udiv	r3, r3, r0
 801722a:	fb01 f303 	mul.w	r3, r1, r3
 801722e:	6821      	ldr	r1, [r4, #0]
 8017230:	3304      	adds	r3, #4
 8017232:	4419      	add	r1, r3
 8017234:	463a      	mov	r2, r7
 8017236:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801723a:	9000      	str	r0, [sp, #0]
 801723c:	2300      	movs	r3, #0
 801723e:	4658      	mov	r0, fp
 8017240:	f7f7 fe28 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 8017244:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017248:	4658      	mov	r0, fp
 801724a:	fa1f f289 	uxth.w	r2, r9
 801724e:	2302      	movs	r3, #2
 8017250:	210d      	movs	r1, #13
 8017252:	f7f9 fb4d 	bl	80108f0 <uxr_buffer_submessage_header>
 8017256:	9b03      	ldr	r3, [sp, #12]
 8017258:	8927      	ldrh	r7, [r4, #8]
 801725a:	7b20      	ldrb	r0, [r4, #12]
 801725c:	f108 0104 	add.w	r1, r8, #4
 8017260:	440b      	add	r3, r1
 8017262:	4619      	mov	r1, r3
 8017264:	fbb6 f3f7 	udiv	r3, r6, r7
 8017268:	fb07 6313 	mls	r3, r7, r3, r6
 801726c:	f1a5 0208 	sub.w	r2, r5, #8
 8017270:	b29d      	uxth	r5, r3
 8017272:	3004      	adds	r0, #4
 8017274:	6863      	ldr	r3, [r4, #4]
 8017276:	fbb3 f3f7 	udiv	r3, r3, r7
 801727a:	fb05 f303 	mul.w	r3, r5, r3
 801727e:	6825      	ldr	r5, [r4, #0]
 8017280:	4448      	add	r0, r9
 8017282:	50e8      	str	r0, [r5, r3]
 8017284:	9d04      	ldr	r5, [sp, #16]
 8017286:	eba2 0208 	sub.w	r2, r2, r8
 801728a:	4628      	mov	r0, r5
 801728c:	f7f7 fe14 	bl	800eeb8 <ucdr_init_buffer>
 8017290:	4628      	mov	r0, r5
 8017292:	493c      	ldr	r1, [pc, #240]	@ (8017384 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017294:	4622      	mov	r2, r4
 8017296:	f7f7 fde3 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 801729a:	2001      	movs	r0, #1
 801729c:	81e6      	strh	r6, [r4, #14]
 801729e:	b011      	add	sp, #68	@ 0x44
 80172a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172a4:	2101      	movs	r1, #1
 80172a6:	89e0      	ldrh	r0, [r4, #14]
 80172a8:	f000 faa0 	bl	80177ec <uxr_seq_num_add>
 80172ac:	8921      	ldrh	r1, [r4, #8]
 80172ae:	4605      	mov	r5, r0
 80172b0:	8a60      	ldrh	r0, [r4, #18]
 80172b2:	f000 fa9b 	bl	80177ec <uxr_seq_num_add>
 80172b6:	4601      	mov	r1, r0
 80172b8:	4628      	mov	r0, r5
 80172ba:	f000 fa9f 	bl	80177fc <uxr_seq_num_cmp>
 80172be:	2800      	cmp	r0, #0
 80172c0:	dd42      	ble.n	8017348 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80172c2:	2000      	movs	r0, #0
 80172c4:	b011      	add	sp, #68	@ 0x44
 80172c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ca:	8921      	ldrh	r1, [r4, #8]
 80172cc:	8a60      	ldrh	r0, [r4, #18]
 80172ce:	9205      	str	r2, [sp, #20]
 80172d0:	f000 fa8c 	bl	80177ec <uxr_seq_num_add>
 80172d4:	4601      	mov	r1, r0
 80172d6:	4630      	mov	r0, r6
 80172d8:	f000 fa90 	bl	80177fc <uxr_seq_num_cmp>
 80172dc:	2800      	cmp	r0, #0
 80172de:	9a05      	ldr	r2, [sp, #20]
 80172e0:	dcef      	bgt.n	80172c2 <uxr_prepare_reliable_buffer_to_write+0x216>
 80172e2:	8927      	ldrh	r7, [r4, #8]
 80172e4:	fbb6 f3f7 	udiv	r3, r6, r7
 80172e8:	fb07 6313 	mls	r3, r7, r3, r6
 80172ec:	b29d      	uxth	r5, r3
 80172ee:	6863      	ldr	r3, [r4, #4]
 80172f0:	6824      	ldr	r4, [r4, #0]
 80172f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80172f6:	fb05 f303 	mul.w	r3, r5, r3
 80172fa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80172fe:	50e2      	str	r2, [r4, r3]
 8017300:	2300      	movs	r3, #0
 8017302:	f8cd 8000 	str.w	r8, [sp]
 8017306:	f7f7 fdc5 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 801730a:	2001      	movs	r0, #1
 801730c:	e7da      	b.n	80172c4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801730e:	b293      	uxth	r3, r2
 8017310:	461a      	mov	r2, r3
 8017312:	e737      	b.n	8017184 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017314:	4630      	mov	r0, r6
 8017316:	2101      	movs	r1, #1
 8017318:	9207      	str	r2, [sp, #28]
 801731a:	f000 fa67 	bl	80177ec <uxr_seq_num_add>
 801731e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017322:	fbb0 f1fc 	udiv	r1, r0, ip
 8017326:	fb0c 0111 	mls	r1, ip, r1, r0
 801732a:	4606      	mov	r6, r0
 801732c:	b288      	uxth	r0, r1
 801732e:	6863      	ldr	r3, [r4, #4]
 8017330:	fbb3 f1fc 	udiv	r1, r3, ip
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	9a07      	ldr	r2, [sp, #28]
 8017338:	fb00 f101 	mul.w	r1, r0, r1
 801733c:	3104      	adds	r1, #4
 801733e:	440b      	add	r3, r1
 8017340:	9303      	str	r3, [sp, #12]
 8017342:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017346:	e70a      	b.n	801715e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017348:	8921      	ldrh	r1, [r4, #8]
 801734a:	fbb5 f3f1 	udiv	r3, r5, r1
 801734e:	fb01 5313 	mls	r3, r1, r3, r5
 8017352:	b29a      	uxth	r2, r3
 8017354:	6863      	ldr	r3, [r4, #4]
 8017356:	fbb3 f3f1 	udiv	r3, r3, r1
 801735a:	6821      	ldr	r1, [r4, #0]
 801735c:	9804      	ldr	r0, [sp, #16]
 801735e:	fb02 f303 	mul.w	r3, r2, r3
 8017362:	3304      	adds	r3, #4
 8017364:	7b22      	ldrb	r2, [r4, #12]
 8017366:	4419      	add	r1, r3
 8017368:	445a      	add	r2, fp
 801736a:	f841 2c04 	str.w	r2, [r1, #-4]
 801736e:	7b23      	ldrb	r3, [r4, #12]
 8017370:	9300      	str	r3, [sp, #0]
 8017372:	2300      	movs	r3, #0
 8017374:	f7f7 fd8e 	bl	800ee94 <ucdr_init_buffer_origin_offset>
 8017378:	81e5      	strh	r5, [r4, #14]
 801737a:	2001      	movs	r0, #1
 801737c:	e7a2      	b.n	80172c4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801737e:	4682      	mov	sl, r0
 8017380:	e6ca      	b.n	8017118 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017382:	bf00      	nop
 8017384:	08016f8d 	.word	0x08016f8d

08017388 <uxr_prepare_next_reliable_buffer_to_send>:
 8017388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801738a:	4604      	mov	r4, r0
 801738c:	460f      	mov	r7, r1
 801738e:	8a00      	ldrh	r0, [r0, #16]
 8017390:	2101      	movs	r1, #1
 8017392:	4616      	mov	r6, r2
 8017394:	461d      	mov	r5, r3
 8017396:	f000 fa29 	bl	80177ec <uxr_seq_num_add>
 801739a:	8028      	strh	r0, [r5, #0]
 801739c:	8922      	ldrh	r2, [r4, #8]
 801739e:	fbb0 f3f2 	udiv	r3, r0, r2
 80173a2:	fb02 0c13 	mls	ip, r2, r3, r0
 80173a6:	fa1f fc8c 	uxth.w	ip, ip
 80173aa:	6863      	ldr	r3, [r4, #4]
 80173ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80173b0:	fb0c fc03 	mul.w	ip, ip, r3
 80173b4:	6823      	ldr	r3, [r4, #0]
 80173b6:	89e1      	ldrh	r1, [r4, #14]
 80173b8:	f10c 0c04 	add.w	ip, ip, #4
 80173bc:	4463      	add	r3, ip
 80173be:	603b      	str	r3, [r7, #0]
 80173c0:	6823      	ldr	r3, [r4, #0]
 80173c2:	449c      	add	ip, r3
 80173c4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80173c8:	6033      	str	r3, [r6, #0]
 80173ca:	f000 fa17 	bl	80177fc <uxr_seq_num_cmp>
 80173ce:	2800      	cmp	r0, #0
 80173d0:	dd01      	ble.n	80173d6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80173d2:	2000      	movs	r0, #0
 80173d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173d6:	7b23      	ldrb	r3, [r4, #12]
 80173d8:	6832      	ldr	r2, [r6, #0]
 80173da:	429a      	cmp	r2, r3
 80173dc:	d9f9      	bls.n	80173d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80173de:	8a61      	ldrh	r1, [r4, #18]
 80173e0:	8a20      	ldrh	r0, [r4, #16]
 80173e2:	f000 fa07 	bl	80177f4 <uxr_seq_num_sub>
 80173e6:	8923      	ldrh	r3, [r4, #8]
 80173e8:	4283      	cmp	r3, r0
 80173ea:	d0f2      	beq.n	80173d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80173ec:	8828      	ldrh	r0, [r5, #0]
 80173ee:	89e3      	ldrh	r3, [r4, #14]
 80173f0:	8220      	strh	r0, [r4, #16]
 80173f2:	4298      	cmp	r0, r3
 80173f4:	d001      	beq.n	80173fa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80173f6:	2001      	movs	r0, #1
 80173f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173fa:	2101      	movs	r1, #1
 80173fc:	f000 f9f6 	bl	80177ec <uxr_seq_num_add>
 8017400:	81e0      	strh	r0, [r4, #14]
 8017402:	2001      	movs	r0, #1
 8017404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017406:	bf00      	nop

08017408 <uxr_update_output_stream_heartbeat_timestamp>:
 8017408:	b570      	push	{r4, r5, r6, lr}
 801740a:	8a01      	ldrh	r1, [r0, #16]
 801740c:	4604      	mov	r4, r0
 801740e:	8a40      	ldrh	r0, [r0, #18]
 8017410:	4615      	mov	r5, r2
 8017412:	461e      	mov	r6, r3
 8017414:	f000 f9f2 	bl	80177fc <uxr_seq_num_cmp>
 8017418:	2800      	cmp	r0, #0
 801741a:	db07      	blt.n	801742c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801741c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017420:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017424:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017428:	2000      	movs	r0, #0
 801742a:	bd70      	pop	{r4, r5, r6, pc}
 801742c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017430:	b940      	cbnz	r0, 8017444 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017432:	2301      	movs	r3, #1
 8017434:	f884 3020 	strb.w	r3, [r4, #32]
 8017438:	3564      	adds	r5, #100	@ 0x64
 801743a:	f146 0600 	adc.w	r6, r6, #0
 801743e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017442:	bd70      	pop	{r4, r5, r6, pc}
 8017444:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017448:	4295      	cmp	r5, r2
 801744a:	eb76 0303 	sbcs.w	r3, r6, r3
 801744e:	bfa5      	ittet	ge
 8017450:	3001      	addge	r0, #1
 8017452:	f884 0020 	strbge.w	r0, [r4, #32]
 8017456:	2000      	movlt	r0, #0
 8017458:	2001      	movge	r0, #1
 801745a:	e7ed      	b.n	8017438 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801745c <uxr_begin_output_nack_buffer_it>:
 801745c:	8a40      	ldrh	r0, [r0, #18]
 801745e:	4770      	bx	lr

08017460 <uxr_next_reliable_nack_buffer_to_send>:
 8017460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017464:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017468:	b082      	sub	sp, #8
 801746a:	f1b8 0f00 	cmp.w	r8, #0
 801746e:	d011      	beq.n	8017494 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017470:	4604      	mov	r4, r0
 8017472:	8818      	ldrh	r0, [r3, #0]
 8017474:	460e      	mov	r6, r1
 8017476:	4617      	mov	r7, r2
 8017478:	461d      	mov	r5, r3
 801747a:	2101      	movs	r1, #1
 801747c:	f000 f9b6 	bl	80177ec <uxr_seq_num_add>
 8017480:	8028      	strh	r0, [r5, #0]
 8017482:	8a21      	ldrh	r1, [r4, #16]
 8017484:	f000 f9ba 	bl	80177fc <uxr_seq_num_cmp>
 8017488:	2800      	cmp	r0, #0
 801748a:	dd07      	ble.n	801749c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801748c:	f04f 0800 	mov.w	r8, #0
 8017490:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017494:	4640      	mov	r0, r8
 8017496:	b002      	add	sp, #8
 8017498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801749c:	8921      	ldrh	r1, [r4, #8]
 801749e:	8828      	ldrh	r0, [r5, #0]
 80174a0:	6823      	ldr	r3, [r4, #0]
 80174a2:	fbb0 f2f1 	udiv	r2, r0, r1
 80174a6:	fb01 0c12 	mls	ip, r1, r2, r0
 80174aa:	fa1f f28c 	uxth.w	r2, ip
 80174ae:	9301      	str	r3, [sp, #4]
 80174b0:	6863      	ldr	r3, [r4, #4]
 80174b2:	fbb3 fcf1 	udiv	ip, r3, r1
 80174b6:	9b01      	ldr	r3, [sp, #4]
 80174b8:	fb02 fc0c 	mul.w	ip, r2, ip
 80174bc:	f10c 0c04 	add.w	ip, ip, #4
 80174c0:	4463      	add	r3, ip
 80174c2:	6033      	str	r3, [r6, #0]
 80174c4:	6823      	ldr	r3, [r4, #0]
 80174c6:	4463      	add	r3, ip
 80174c8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80174cc:	603b      	str	r3, [r7, #0]
 80174ce:	7b22      	ldrb	r2, [r4, #12]
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d0d2      	beq.n	801747a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80174d4:	4640      	mov	r0, r8
 80174d6:	b002      	add	sp, #8
 80174d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174dc <uxr_process_acknack>:
 80174dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174de:	4604      	mov	r4, r0
 80174e0:	460e      	mov	r6, r1
 80174e2:	4610      	mov	r0, r2
 80174e4:	2101      	movs	r1, #1
 80174e6:	f000 f985 	bl	80177f4 <uxr_seq_num_sub>
 80174ea:	8a61      	ldrh	r1, [r4, #18]
 80174ec:	f000 f982 	bl	80177f4 <uxr_seq_num_sub>
 80174f0:	b1c0      	cbz	r0, 8017524 <uxr_process_acknack+0x48>
 80174f2:	4605      	mov	r5, r0
 80174f4:	2700      	movs	r7, #0
 80174f6:	2101      	movs	r1, #1
 80174f8:	8a60      	ldrh	r0, [r4, #18]
 80174fa:	f000 f977 	bl	80177ec <uxr_seq_num_add>
 80174fe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017502:	fbb0 f1fc 	udiv	r1, r0, ip
 8017506:	e9d4 2300 	ldrd	r2, r3, [r4]
 801750a:	fb0c 0111 	mls	r1, ip, r1, r0
 801750e:	b289      	uxth	r1, r1
 8017510:	3701      	adds	r7, #1
 8017512:	fbb3 f3fc 	udiv	r3, r3, ip
 8017516:	fb01 f303 	mul.w	r3, r1, r3
 801751a:	42bd      	cmp	r5, r7
 801751c:	7b21      	ldrb	r1, [r4, #12]
 801751e:	8260      	strh	r0, [r4, #18]
 8017520:	50d1      	str	r1, [r2, r3]
 8017522:	d1e8      	bne.n	80174f6 <uxr_process_acknack+0x1a>
 8017524:	3e00      	subs	r6, #0
 8017526:	f04f 0300 	mov.w	r3, #0
 801752a:	bf18      	it	ne
 801752c:	2601      	movne	r6, #1
 801752e:	f884 3020 	strb.w	r3, [r4, #32]
 8017532:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017538 <uxr_is_output_up_to_date>:
 8017538:	8a01      	ldrh	r1, [r0, #16]
 801753a:	8a40      	ldrh	r0, [r0, #18]
 801753c:	b508      	push	{r3, lr}
 801753e:	f000 f95d 	bl	80177fc <uxr_seq_num_cmp>
 8017542:	fab0 f080 	clz	r0, r0
 8017546:	0940      	lsrs	r0, r0, #5
 8017548:	bd08      	pop	{r3, pc}
 801754a:	bf00      	nop

0801754c <get_available_free_slots>:
 801754c:	8902      	ldrh	r2, [r0, #8]
 801754e:	b1da      	cbz	r2, 8017588 <get_available_free_slots+0x3c>
 8017550:	b530      	push	{r4, r5, lr}
 8017552:	2100      	movs	r1, #0
 8017554:	6843      	ldr	r3, [r0, #4]
 8017556:	6805      	ldr	r5, [r0, #0]
 8017558:	7b04      	ldrb	r4, [r0, #12]
 801755a:	fbb3 fef2 	udiv	lr, r3, r2
 801755e:	4608      	mov	r0, r1
 8017560:	460b      	mov	r3, r1
 8017562:	fbb3 fcf2 	udiv	ip, r3, r2
 8017566:	fb02 331c 	mls	r3, r2, ip, r3
 801756a:	b29b      	uxth	r3, r3
 801756c:	fb0e f303 	mul.w	r3, lr, r3
 8017570:	3101      	adds	r1, #1
 8017572:	f855 c003 	ldr.w	ip, [r5, r3]
 8017576:	4564      	cmp	r4, ip
 8017578:	bf08      	it	eq
 801757a:	3001      	addeq	r0, #1
 801757c:	b28b      	uxth	r3, r1
 801757e:	bf08      	it	eq
 8017580:	b280      	uxtheq	r0, r0
 8017582:	4293      	cmp	r3, r2
 8017584:	d3ed      	bcc.n	8017562 <get_available_free_slots+0x16>
 8017586:	bd30      	pop	{r4, r5, pc}
 8017588:	4610      	mov	r0, r2
 801758a:	4770      	bx	lr

0801758c <uxr_buffer_request_data>:
 801758c:	b530      	push	{r4, r5, lr}
 801758e:	b095      	sub	sp, #84	@ 0x54
 8017590:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8017594:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8017596:	9303      	str	r3, [sp, #12]
 8017598:	2200      	movs	r2, #0
 801759a:	2d00      	cmp	r5, #0
 801759c:	bf14      	ite	ne
 801759e:	2101      	movne	r1, #1
 80175a0:	4611      	moveq	r1, r2
 80175a2:	4604      	mov	r4, r0
 80175a4:	f88d 301c 	strb.w	r3, [sp, #28]
 80175a8:	f88d 201d 	strb.w	r2, [sp, #29]
 80175ac:	f88d 201e 	strb.w	r2, [sp, #30]
 80175b0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80175b4:	d021      	beq.n	80175fa <uxr_buffer_request_data+0x6e>
 80175b6:	682a      	ldr	r2, [r5, #0]
 80175b8:	686b      	ldr	r3, [r5, #4]
 80175ba:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80175be:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80175c2:	2210      	movs	r2, #16
 80175c4:	2308      	movs	r3, #8
 80175c6:	2100      	movs	r1, #0
 80175c8:	e9cd 3100 	strd	r3, r1, [sp]
 80175cc:	4620      	mov	r0, r4
 80175ce:	9905      	ldr	r1, [sp, #20]
 80175d0:	ab0c      	add	r3, sp, #48	@ 0x30
 80175d2:	f7f8 feef 	bl	80103b4 <uxr_prepare_stream_to_write_submessage>
 80175d6:	b918      	cbnz	r0, 80175e0 <uxr_buffer_request_data+0x54>
 80175d8:	4604      	mov	r4, r0
 80175da:	4620      	mov	r0, r4
 80175dc:	b015      	add	sp, #84	@ 0x54
 80175de:	bd30      	pop	{r4, r5, pc}
 80175e0:	9904      	ldr	r1, [sp, #16]
 80175e2:	aa06      	add	r2, sp, #24
 80175e4:	4620      	mov	r0, r4
 80175e6:	f7f9 f81b 	bl	8010620 <uxr_init_base_object_request>
 80175ea:	a906      	add	r1, sp, #24
 80175ec:	4604      	mov	r4, r0
 80175ee:	a80c      	add	r0, sp, #48	@ 0x30
 80175f0:	f7fa fb16 	bl	8011c20 <uxr_serialize_READ_DATA_Payload>
 80175f4:	4620      	mov	r0, r4
 80175f6:	b015      	add	sp, #84	@ 0x54
 80175f8:	bd30      	pop	{r4, r5, pc}
 80175fa:	2208      	movs	r2, #8
 80175fc:	e7e2      	b.n	80175c4 <uxr_buffer_request_data+0x38>
 80175fe:	bf00      	nop

08017600 <uxr_buffer_cancel_data>:
 8017600:	b510      	push	{r4, lr}
 8017602:	b094      	sub	sp, #80	@ 0x50
 8017604:	2300      	movs	r3, #0
 8017606:	9202      	str	r2, [sp, #8]
 8017608:	9205      	str	r2, [sp, #20]
 801760a:	9301      	str	r3, [sp, #4]
 801760c:	2201      	movs	r2, #1
 801760e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017612:	f88d 301e 	strb.w	r3, [sp, #30]
 8017616:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801761a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801761e:	2308      	movs	r3, #8
 8017620:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8017624:	9300      	str	r3, [sp, #0]
 8017626:	2210      	movs	r2, #16
 8017628:	ab0c      	add	r3, sp, #48	@ 0x30
 801762a:	4604      	mov	r4, r0
 801762c:	9103      	str	r1, [sp, #12]
 801762e:	f7f8 fec1 	bl	80103b4 <uxr_prepare_stream_to_write_submessage>
 8017632:	b918      	cbnz	r0, 801763c <uxr_buffer_cancel_data+0x3c>
 8017634:	4604      	mov	r4, r0
 8017636:	4620      	mov	r0, r4
 8017638:	b014      	add	sp, #80	@ 0x50
 801763a:	bd10      	pop	{r4, pc}
 801763c:	9905      	ldr	r1, [sp, #20]
 801763e:	aa06      	add	r2, sp, #24
 8017640:	4620      	mov	r0, r4
 8017642:	f7f8 ffed 	bl	8010620 <uxr_init_base_object_request>
 8017646:	a906      	add	r1, sp, #24
 8017648:	4604      	mov	r4, r0
 801764a:	a80c      	add	r0, sp, #48	@ 0x30
 801764c:	f7fa fae8 	bl	8011c20 <uxr_serialize_READ_DATA_Payload>
 8017650:	4620      	mov	r0, r4
 8017652:	b014      	add	sp, #80	@ 0x50
 8017654:	bd10      	pop	{r4, pc}
 8017656:	bf00      	nop

08017658 <read_submessage_format>:
 8017658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801765c:	b095      	sub	sp, #84	@ 0x54
 801765e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8017662:	b113      	cbz	r3, 801766a <read_submessage_format+0x12>
 8017664:	b015      	add	sp, #84	@ 0x54
 8017666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801766a:	460c      	mov	r4, r1
 801766c:	4615      	mov	r5, r2
 801766e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8017672:	4607      	mov	r7, r0
 8017674:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017676:	9004      	str	r0, [sp, #16]
 8017678:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801767a:	9005      	str	r0, [sp, #20]
 801767c:	1a52      	subs	r2, r2, r1
 801767e:	a80c      	add	r0, sp, #48	@ 0x30
 8017680:	4699      	mov	r9, r3
 8017682:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8017686:	f7f7 fc17 	bl	800eeb8 <ucdr_init_buffer>
 801768a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801768e:	a80c      	add	r0, sp, #48	@ 0x30
 8017690:	f7f7 fbe6 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8017694:	69e2      	ldr	r2, [r4, #28]
 8017696:	b19a      	cbz	r2, 80176c0 <read_submessage_format+0x68>
 8017698:	f1b8 0f07 	cmp.w	r8, #7
 801769c:	f882 9014 	strb.w	r9, [r2, #20]
 80176a0:	d040      	beq.n	8017724 <read_submessage_format+0xcc>
 80176a2:	f1b8 0f08 	cmp.w	r8, #8
 80176a6:	d02e      	beq.n	8017706 <read_submessage_format+0xae>
 80176a8:	f1b8 0f06 	cmp.w	r8, #6
 80176ac:	d011      	beq.n	80176d2 <read_submessage_format+0x7a>
 80176ae:	2301      	movs	r3, #1
 80176b0:	7513      	strb	r3, [r2, #20]
 80176b2:	4629      	mov	r1, r5
 80176b4:	4620      	mov	r0, r4
 80176b6:	f7f7 fc4f 	bl	800ef58 <ucdr_advance_buffer>
 80176ba:	b015      	add	sp, #84	@ 0x54
 80176bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c0:	f1b8 0f07 	cmp.w	r8, #7
 80176c4:	d02e      	beq.n	8017724 <read_submessage_format+0xcc>
 80176c6:	f1b8 0f08 	cmp.w	r8, #8
 80176ca:	d01c      	beq.n	8017706 <read_submessage_format+0xae>
 80176cc:	f1b8 0f06 	cmp.w	r8, #6
 80176d0:	d1ef      	bne.n	80176b2 <read_submessage_format+0x5a>
 80176d2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80176d6:	f1b8 0f00 	cmp.w	r8, #0
 80176da:	d011      	beq.n	8017700 <read_submessage_format+0xa8>
 80176dc:	ab0c      	add	r3, sp, #48	@ 0x30
 80176de:	e9cd 3500 	strd	r3, r5, [sp]
 80176e2:	2306      	movs	r3, #6
 80176e4:	f88d 3016 	strb.w	r3, [sp, #22]
 80176e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80176ec:	9302      	str	r3, [sp, #8]
 80176ee:	4632      	mov	r2, r6
 80176f0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80176f4:	4638      	mov	r0, r7
 80176f6:	47c0      	blx	r8
 80176f8:	2301      	movs	r3, #1
 80176fa:	69e2      	ldr	r2, [r4, #28]
 80176fc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017700:	2a00      	cmp	r2, #0
 8017702:	d1d4      	bne.n	80176ae <read_submessage_format+0x56>
 8017704:	e7d5      	b.n	80176b2 <read_submessage_format+0x5a>
 8017706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801770a:	2b00      	cmp	r3, #0
 801770c:	d0f8      	beq.n	8017700 <read_submessage_format+0xa8>
 801770e:	a906      	add	r1, sp, #24
 8017710:	a80c      	add	r0, sp, #48	@ 0x30
 8017712:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017716:	f7fa fb49 	bl	8011dac <uxr_deserialize_SampleIdentity>
 801771a:	b9a0      	cbnz	r0, 8017746 <read_submessage_format+0xee>
 801771c:	69e2      	ldr	r2, [r4, #28]
 801771e:	2a00      	cmp	r2, #0
 8017720:	d1c5      	bne.n	80176ae <read_submessage_format+0x56>
 8017722:	e7c6      	b.n	80176b2 <read_submessage_format+0x5a>
 8017724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017728:	b13b      	cbz	r3, 801773a <read_submessage_format+0xe2>
 801772a:	a906      	add	r1, sp, #24
 801772c:	a80c      	add	r0, sp, #48	@ 0x30
 801772e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8017732:	f7fa f80f 	bl	8011754 <uxr_deserialize_BaseObjectRequest>
 8017736:	bb60      	cbnz	r0, 8017792 <read_submessage_format+0x13a>
 8017738:	69e2      	ldr	r2, [r4, #28]
 801773a:	68a3      	ldr	r3, [r4, #8]
 801773c:	442b      	add	r3, r5
 801773e:	60a3      	str	r3, [r4, #8]
 8017740:	2a00      	cmp	r2, #0
 8017742:	d1b4      	bne.n	80176ae <read_submessage_format+0x56>
 8017744:	e7b5      	b.n	80176b2 <read_submessage_format+0x5a>
 8017746:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801774a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801774c:	1a52      	subs	r2, r2, r1
 801774e:	eba8 0803 	sub.w	r8, r8, r3
 8017752:	a80c      	add	r0, sp, #48	@ 0x30
 8017754:	f7f7 fbb0 	bl	800eeb8 <ucdr_init_buffer>
 8017758:	44a8      	add	r8, r5
 801775a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801775e:	a80c      	add	r0, sp, #48	@ 0x30
 8017760:	f7f7 fb7e 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 8017764:	fa1f f888 	uxth.w	r8, r8
 8017768:	ab0c      	add	r3, sp, #48	@ 0x30
 801776a:	9300      	str	r3, [sp, #0]
 801776c:	f8cd 8004 	str.w	r8, [sp, #4]
 8017770:	2108      	movs	r1, #8
 8017772:	f88d 1016 	strb.w	r1, [sp, #22]
 8017776:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801777a:	9102      	str	r1, [sp, #8]
 801777c:	ab06      	add	r3, sp, #24
 801777e:	4632      	mov	r2, r6
 8017780:	9905      	ldr	r1, [sp, #20]
 8017782:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8017786:	4638      	mov	r0, r7
 8017788:	47b0      	blx	r6
 801778a:	2301      	movs	r3, #1
 801778c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8017790:	e7c4      	b.n	801771c <read_submessage_format+0xc4>
 8017792:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8017796:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017798:	1a52      	subs	r2, r2, r1
 801779a:	a80c      	add	r0, sp, #48	@ 0x30
 801779c:	eba8 0803 	sub.w	r8, r8, r3
 80177a0:	f7f7 fb8a 	bl	800eeb8 <ucdr_init_buffer>
 80177a4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80177a8:	a80c      	add	r0, sp, #48	@ 0x30
 80177aa:	f7f7 fb59 	bl	800ee60 <ucdr_set_on_full_buffer_callback>
 80177ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80177b0:	9300      	str	r3, [sp, #0]
 80177b2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80177b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80177ba:	44a8      	add	r8, r5
 80177bc:	fa1f f888 	uxth.w	r8, r8
 80177c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80177c4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80177c8:	2107      	movs	r1, #7
 80177ca:	f88d 1016 	strb.w	r1, [sp, #22]
 80177ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80177d2:	9102      	str	r1, [sp, #8]
 80177d4:	4632      	mov	r2, r6
 80177d6:	b29b      	uxth	r3, r3
 80177d8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80177dc:	9905      	ldr	r1, [sp, #20]
 80177de:	4638      	mov	r0, r7
 80177e0:	47b0      	blx	r6
 80177e2:	2301      	movs	r3, #1
 80177e4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80177e8:	e7a6      	b.n	8017738 <read_submessage_format+0xe0>
 80177ea:	bf00      	nop

080177ec <uxr_seq_num_add>:
 80177ec:	4408      	add	r0, r1
 80177ee:	b280      	uxth	r0, r0
 80177f0:	4770      	bx	lr
 80177f2:	bf00      	nop

080177f4 <uxr_seq_num_sub>:
 80177f4:	1a40      	subs	r0, r0, r1
 80177f6:	b280      	uxth	r0, r0
 80177f8:	4770      	bx	lr
 80177fa:	bf00      	nop

080177fc <uxr_seq_num_cmp>:
 80177fc:	4288      	cmp	r0, r1
 80177fe:	d011      	beq.n	8017824 <uxr_seq_num_cmp+0x28>
 8017800:	d309      	bcc.n	8017816 <uxr_seq_num_cmp+0x1a>
 8017802:	4288      	cmp	r0, r1
 8017804:	d910      	bls.n	8017828 <uxr_seq_num_cmp+0x2c>
 8017806:	1a40      	subs	r0, r0, r1
 8017808:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801780c:	bfd4      	ite	le
 801780e:	2001      	movle	r0, #1
 8017810:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8017814:	4770      	bx	lr
 8017816:	1a0b      	subs	r3, r1, r0
 8017818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801781c:	daf1      	bge.n	8017802 <uxr_seq_num_cmp+0x6>
 801781e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017822:	4770      	bx	lr
 8017824:	2000      	movs	r0, #0
 8017826:	4770      	bx	lr
 8017828:	2001      	movs	r0, #1
 801782a:	4770      	bx	lr

0801782c <uxr_init_framing_io>:
 801782c:	2300      	movs	r3, #0
 801782e:	7041      	strb	r1, [r0, #1]
 8017830:	7003      	strb	r3, [r0, #0]
 8017832:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8017834:	4770      	bx	lr
 8017836:	bf00      	nop

08017838 <uxr_write_framed_msg>:
 8017838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801783c:	4617      	mov	r7, r2
 801783e:	7842      	ldrb	r2, [r0, #1]
 8017840:	b083      	sub	sp, #12
 8017842:	460e      	mov	r6, r1
 8017844:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8017848:	469a      	mov	sl, r3
 801784a:	2901      	cmp	r1, #1
 801784c:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8017850:	4604      	mov	r4, r0
 8017852:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8017856:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801785a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801785e:	f240 8137 	bls.w	8017ad0 <uxr_write_framed_msg+0x298>
 8017862:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017866:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801786a:	2901      	cmp	r1, #1
 801786c:	f04f 0202 	mov.w	r2, #2
 8017870:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017874:	f240 808f 	bls.w	8017996 <uxr_write_framed_msg+0x15e>
 8017878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801787a:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801787e:	b2dd      	uxtb	r5, r3
 8017880:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017884:	2203      	movs	r2, #3
 8017886:	2901      	cmp	r1, #1
 8017888:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801788c:	f240 809a 	bls.w	80179c4 <uxr_write_framed_msg+0x18c>
 8017890:	18a1      	adds	r1, r4, r2
 8017892:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017894:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8017898:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801789c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80178a0:	3201      	adds	r2, #1
 80178a2:	2801      	cmp	r0, #1
 80178a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80178a8:	f240 80a0 	bls.w	80179ec <uxr_write_framed_msg+0x1b4>
 80178ac:	18a0      	adds	r0, r4, r2
 80178ae:	3201      	adds	r2, #1
 80178b0:	b2d2      	uxtb	r2, r2
 80178b2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80178b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f000 80a9 	beq.w	8017a12 <uxr_write_framed_msg+0x1da>
 80178c0:	f04f 0900 	mov.w	r9, #0
 80178c4:	46c8      	mov	r8, r9
 80178c6:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80178ca:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80178ce:	2901      	cmp	r1, #1
 80178d0:	f240 80c3 	bls.w	8017a5a <uxr_write_framed_msg+0x222>
 80178d4:	2a29      	cmp	r2, #41	@ 0x29
 80178d6:	f200 809f 	bhi.w	8017a18 <uxr_write_framed_msg+0x1e0>
 80178da:	18a1      	adds	r1, r4, r2
 80178dc:	3201      	adds	r2, #1
 80178de:	b2d2      	uxtb	r2, r2
 80178e0:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80178e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80178e8:	ea89 0303 	eor.w	r3, r9, r3
 80178ec:	498c      	ldr	r1, [pc, #560]	@ (8017b20 <uxr_write_framed_msg+0x2e8>)
 80178ee:	b2db      	uxtb	r3, r3
 80178f0:	f108 0801 	add.w	r8, r8, #1
 80178f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80178f8:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80178fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178fe:	4543      	cmp	r3, r8
 8017900:	d8e1      	bhi.n	80178c6 <uxr_write_framed_msg+0x8e>
 8017902:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017906:	fa5f f889 	uxtb.w	r8, r9
 801790a:	9301      	str	r3, [sp, #4]
 801790c:	f04f 0900 	mov.w	r9, #0
 8017910:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8017914:	fa5f f18a 	uxtb.w	r1, sl
 8017918:	2901      	cmp	r1, #1
 801791a:	d921      	bls.n	8017960 <uxr_write_framed_msg+0x128>
 801791c:	2a29      	cmp	r2, #41	@ 0x29
 801791e:	f240 80af 	bls.w	8017a80 <uxr_write_framed_msg+0x248>
 8017922:	2500      	movs	r5, #0
 8017924:	e000      	b.n	8017928 <uxr_write_framed_msg+0xf0>
 8017926:	b160      	cbz	r0, 8017942 <uxr_write_framed_msg+0x10a>
 8017928:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801792c:	1b52      	subs	r2, r2, r5
 801792e:	465b      	mov	r3, fp
 8017930:	4421      	add	r1, r4
 8017932:	4638      	mov	r0, r7
 8017934:	47b0      	blx	r6
 8017936:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801793a:	4405      	add	r5, r0
 801793c:	4295      	cmp	r5, r2
 801793e:	d3f2      	bcc.n	8017926 <uxr_write_framed_msg+0xee>
 8017940:	d003      	beq.n	801794a <uxr_write_framed_msg+0x112>
 8017942:	2000      	movs	r0, #0
 8017944:	b003      	add	sp, #12
 8017946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801794a:	fa5f f18a 	uxtb.w	r1, sl
 801794e:	f04f 0300 	mov.w	r3, #0
 8017952:	2901      	cmp	r1, #1
 8017954:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017958:	f04f 0200 	mov.w	r2, #0
 801795c:	f200 8090 	bhi.w	8017a80 <uxr_write_framed_msg+0x248>
 8017960:	1c51      	adds	r1, r2, #1
 8017962:	b2c9      	uxtb	r1, r1
 8017964:	2929      	cmp	r1, #41	@ 0x29
 8017966:	d8dc      	bhi.n	8017922 <uxr_write_framed_msg+0xea>
 8017968:	18a5      	adds	r5, r4, r2
 801796a:	4421      	add	r1, r4
 801796c:	3202      	adds	r2, #2
 801796e:	f088 0820 	eor.w	r8, r8, #32
 8017972:	4648      	mov	r0, r9
 8017974:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8017978:	b2d2      	uxtb	r2, r2
 801797a:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801797e:	f04f 0901 	mov.w	r9, #1
 8017982:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017986:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801798a:	2800      	cmp	r0, #0
 801798c:	f040 8085 	bne.w	8017a9a <uxr_write_framed_msg+0x262>
 8017990:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017994:	e7bc      	b.n	8017910 <uxr_write_framed_msg+0xd8>
 8017996:	4611      	mov	r1, r2
 8017998:	f04f 0c03 	mov.w	ip, #3
 801799c:	2204      	movs	r2, #4
 801799e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80179a0:	4421      	add	r1, r4
 80179a2:	b2dd      	uxtb	r5, r3
 80179a4:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80179a8:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80179ac:	44a4      	add	ip, r4
 80179ae:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80179b2:	f080 0020 	eor.w	r0, r0, #32
 80179b6:	2901      	cmp	r1, #1
 80179b8:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80179bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80179c0:	f63f af66 	bhi.w	8017890 <uxr_write_framed_msg+0x58>
 80179c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80179c6:	18a0      	adds	r0, r4, r2
 80179c8:	f085 0520 	eor.w	r5, r5, #32
 80179cc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80179d0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80179d4:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80179d8:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80179dc:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80179e0:	3202      	adds	r2, #2
 80179e2:	2801      	cmp	r0, #1
 80179e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80179e8:	f63f af60 	bhi.w	80178ac <uxr_write_framed_msg+0x74>
 80179ec:	1c50      	adds	r0, r2, #1
 80179ee:	18a5      	adds	r5, r4, r2
 80179f0:	fa54 f080 	uxtab	r0, r4, r0
 80179f4:	3202      	adds	r2, #2
 80179f6:	f081 0120 	eor.w	r1, r1, #32
 80179fa:	b2d2      	uxtb	r2, r2
 80179fc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8017a00:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8017a04:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017a08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	f47f af57 	bne.w	80178c0 <uxr_write_framed_msg+0x88>
 8017a12:	9301      	str	r3, [sp, #4]
 8017a14:	4698      	mov	r8, r3
 8017a16:	e779      	b.n	801790c <uxr_write_framed_msg+0xd4>
 8017a18:	2500      	movs	r5, #0
 8017a1a:	e001      	b.n	8017a20 <uxr_write_framed_msg+0x1e8>
 8017a1c:	2800      	cmp	r0, #0
 8017a1e:	d090      	beq.n	8017942 <uxr_write_framed_msg+0x10a>
 8017a20:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017a24:	1b52      	subs	r2, r2, r5
 8017a26:	465b      	mov	r3, fp
 8017a28:	4421      	add	r1, r4
 8017a2a:	4638      	mov	r0, r7
 8017a2c:	47b0      	blx	r6
 8017a2e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017a32:	4405      	add	r5, r0
 8017a34:	4295      	cmp	r5, r2
 8017a36:	d3f1      	bcc.n	8017a1c <uxr_write_framed_msg+0x1e4>
 8017a38:	d183      	bne.n	8017942 <uxr_write_framed_msg+0x10a>
 8017a3a:	f04f 0300 	mov.w	r3, #0
 8017a3e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017a42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a44:	4543      	cmp	r3, r8
 8017a46:	d964      	bls.n	8017b12 <uxr_write_framed_msg+0x2da>
 8017a48:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8017a4c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8017a50:	2901      	cmp	r1, #1
 8017a52:	f04f 0200 	mov.w	r2, #0
 8017a56:	f63f af3d 	bhi.w	80178d4 <uxr_write_framed_msg+0x9c>
 8017a5a:	1c51      	adds	r1, r2, #1
 8017a5c:	b2c9      	uxtb	r1, r1
 8017a5e:	2929      	cmp	r1, #41	@ 0x29
 8017a60:	d8da      	bhi.n	8017a18 <uxr_write_framed_msg+0x1e0>
 8017a62:	18a0      	adds	r0, r4, r2
 8017a64:	4421      	add	r1, r4
 8017a66:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8017a6a:	3202      	adds	r2, #2
 8017a6c:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8017a70:	b2d2      	uxtb	r2, r2
 8017a72:	f083 0020 	eor.w	r0, r3, #32
 8017a76:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8017a7a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017a7e:	e733      	b.n	80178e8 <uxr_write_framed_msg+0xb0>
 8017a80:	18a1      	adds	r1, r4, r2
 8017a82:	3201      	adds	r2, #1
 8017a84:	4648      	mov	r0, r9
 8017a86:	b2d2      	uxtb	r2, r2
 8017a88:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8017a8c:	f04f 0901 	mov.w	r9, #1
 8017a90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017a94:	2800      	cmp	r0, #0
 8017a96:	f43f af7b 	beq.w	8017990 <uxr_write_framed_msg+0x158>
 8017a9a:	2500      	movs	r5, #0
 8017a9c:	e002      	b.n	8017aa4 <uxr_write_framed_msg+0x26c>
 8017a9e:	2800      	cmp	r0, #0
 8017aa0:	f43f af4f 	beq.w	8017942 <uxr_write_framed_msg+0x10a>
 8017aa4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8017aa8:	1b52      	subs	r2, r2, r5
 8017aaa:	465b      	mov	r3, fp
 8017aac:	4421      	add	r1, r4
 8017aae:	4638      	mov	r0, r7
 8017ab0:	47b0      	blx	r6
 8017ab2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8017ab6:	4405      	add	r5, r0
 8017ab8:	4295      	cmp	r5, r2
 8017aba:	d3f0      	bcc.n	8017a9e <uxr_write_framed_msg+0x266>
 8017abc:	f47f af41 	bne.w	8017942 <uxr_write_framed_msg+0x10a>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8017ac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ac8:	b298      	uxth	r0, r3
 8017aca:	b003      	add	sp, #12
 8017acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad0:	217d      	movs	r1, #125	@ 0x7d
 8017ad2:	f082 0220 	eor.w	r2, r2, #32
 8017ad6:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8017ada:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8017ade:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8017ae2:	2901      	cmp	r1, #1
 8017ae4:	f04f 0203 	mov.w	r2, #3
 8017ae8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017aec:	d804      	bhi.n	8017af8 <uxr_write_framed_msg+0x2c0>
 8017aee:	4611      	mov	r1, r2
 8017af0:	f04f 0c04 	mov.w	ip, #4
 8017af4:	2205      	movs	r2, #5
 8017af6:	e752      	b.n	801799e <uxr_write_framed_msg+0x166>
 8017af8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017afa:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8017afe:	b2dd      	uxtb	r5, r3
 8017b00:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8017b04:	2204      	movs	r2, #4
 8017b06:	2901      	cmp	r1, #1
 8017b08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8017b0c:	f63f aec0 	bhi.w	8017890 <uxr_write_framed_msg+0x58>
 8017b10:	e758      	b.n	80179c4 <uxr_write_framed_msg+0x18c>
 8017b12:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017b16:	fa5f f889 	uxtb.w	r8, r9
 8017b1a:	9301      	str	r3, [sp, #4]
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	e6f5      	b.n	801790c <uxr_write_framed_msg+0xd4>
 8017b20:	0801b7c0 	.word	0x0801b7c0

08017b24 <uxr_framing_read_transport>:
 8017b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b28:	4604      	mov	r4, r0
 8017b2a:	b083      	sub	sp, #12
 8017b2c:	461f      	mov	r7, r3
 8017b2e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8017b32:	4689      	mov	r9, r1
 8017b34:	4692      	mov	sl, r2
 8017b36:	f7f8 ff21 	bl	801097c <uxr_millis>
 8017b3a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017b3e:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8017b42:	42b3      	cmp	r3, r6
 8017b44:	4680      	mov	r8, r0
 8017b46:	d061      	beq.n	8017c0c <uxr_framing_read_transport+0xe8>
 8017b48:	d81c      	bhi.n	8017b84 <uxr_framing_read_transport+0x60>
 8017b4a:	1e75      	subs	r5, r6, #1
 8017b4c:	1aed      	subs	r5, r5, r3
 8017b4e:	b2ed      	uxtb	r5, r5
 8017b50:	2600      	movs	r6, #0
 8017b52:	455d      	cmp	r5, fp
 8017b54:	d81f      	bhi.n	8017b96 <uxr_framing_read_transport+0x72>
 8017b56:	19ab      	adds	r3, r5, r6
 8017b58:	455b      	cmp	r3, fp
 8017b5a:	bf84      	itt	hi
 8017b5c:	ebab 0605 	subhi.w	r6, fp, r5
 8017b60:	b2f6      	uxtbhi	r6, r6
 8017b62:	b9ed      	cbnz	r5, 8017ba0 <uxr_framing_read_transport+0x7c>
 8017b64:	f04f 0b00 	mov.w	fp, #0
 8017b68:	f7f8 ff08 	bl	801097c <uxr_millis>
 8017b6c:	683b      	ldr	r3, [r7, #0]
 8017b6e:	eba0 0808 	sub.w	r8, r0, r8
 8017b72:	eba3 0308 	sub.w	r3, r3, r8
 8017b76:	4658      	mov	r0, fp
 8017b78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b7c:	603b      	str	r3, [r7, #0]
 8017b7e:	b003      	add	sp, #12
 8017b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b84:	2e00      	cmp	r6, #0
 8017b86:	d049      	beq.n	8017c1c <uxr_framing_read_transport+0xf8>
 8017b88:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8017b8c:	b2ed      	uxtb	r5, r5
 8017b8e:	3e01      	subs	r6, #1
 8017b90:	455d      	cmp	r5, fp
 8017b92:	b2f6      	uxtb	r6, r6
 8017b94:	d9df      	bls.n	8017b56 <uxr_framing_read_transport+0x32>
 8017b96:	fa5f f58b 	uxtb.w	r5, fp
 8017b9a:	2600      	movs	r6, #0
 8017b9c:	2d00      	cmp	r5, #0
 8017b9e:	d0e1      	beq.n	8017b64 <uxr_framing_read_transport+0x40>
 8017ba0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017ba4:	3102      	adds	r1, #2
 8017ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ba8:	9300      	str	r3, [sp, #0]
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	4421      	add	r1, r4
 8017bae:	462a      	mov	r2, r5
 8017bb0:	4650      	mov	r0, sl
 8017bb2:	47c8      	blx	r9
 8017bb4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8017c24 <uxr_framing_read_transport+0x100>)
 8017bba:	4403      	add	r3, r0
 8017bbc:	0859      	lsrs	r1, r3, #1
 8017bbe:	fba2 2101 	umull	r2, r1, r2, r1
 8017bc2:	0889      	lsrs	r1, r1, #2
 8017bc4:	222a      	movs	r2, #42	@ 0x2a
 8017bc6:	fb02 3111 	mls	r1, r2, r1, r3
 8017bca:	4683      	mov	fp, r0
 8017bcc:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8017bd0:	2800      	cmp	r0, #0
 8017bd2:	d0c7      	beq.n	8017b64 <uxr_framing_read_transport+0x40>
 8017bd4:	42a8      	cmp	r0, r5
 8017bd6:	d1c7      	bne.n	8017b68 <uxr_framing_read_transport+0x44>
 8017bd8:	2e00      	cmp	r6, #0
 8017bda:	d0c5      	beq.n	8017b68 <uxr_framing_read_transport+0x44>
 8017bdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bde:	9300      	str	r3, [sp, #0]
 8017be0:	3102      	adds	r1, #2
 8017be2:	4632      	mov	r2, r6
 8017be4:	4421      	add	r1, r4
 8017be6:	2300      	movs	r3, #0
 8017be8:	4650      	mov	r0, sl
 8017bea:	47c8      	blx	r9
 8017bec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8017c24 <uxr_framing_read_transport+0x100>)
 8017bf2:	180b      	adds	r3, r1, r0
 8017bf4:	0859      	lsrs	r1, r3, #1
 8017bf6:	fba2 1201 	umull	r1, r2, r2, r1
 8017bfa:	0892      	lsrs	r2, r2, #2
 8017bfc:	212a      	movs	r1, #42	@ 0x2a
 8017bfe:	fb01 3312 	mls	r3, r1, r2, r3
 8017c02:	eb00 0b05 	add.w	fp, r0, r5
 8017c06:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8017c0a:	e7ad      	b.n	8017b68 <uxr_framing_read_transport+0x44>
 8017c0c:	2600      	movs	r6, #0
 8017c0e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8017c12:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8017c14:	d9bf      	bls.n	8017b96 <uxr_framing_read_transport+0x72>
 8017c16:	2102      	movs	r1, #2
 8017c18:	2529      	movs	r5, #41	@ 0x29
 8017c1a:	e7c4      	b.n	8017ba6 <uxr_framing_read_transport+0x82>
 8017c1c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8017c20:	b2ed      	uxtb	r5, r5
 8017c22:	e796      	b.n	8017b52 <uxr_framing_read_transport+0x2e>
 8017c24:	30c30c31 	.word	0x30c30c31

08017c28 <uxr_read_framed_msg>:
 8017c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c2c:	461e      	mov	r6, r3
 8017c2e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8017c32:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8017c36:	429d      	cmp	r5, r3
 8017c38:	b083      	sub	sp, #12
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	4688      	mov	r8, r1
 8017c3e:	4691      	mov	r9, r2
 8017c40:	f000 8188 	beq.w	8017f54 <uxr_read_framed_msg+0x32c>
 8017c44:	7823      	ldrb	r3, [r4, #0]
 8017c46:	4dc1      	ldr	r5, [pc, #772]	@ (8017f4c <uxr_read_framed_msg+0x324>)
 8017c48:	4fc1      	ldr	r7, [pc, #772]	@ (8017f50 <uxr_read_framed_msg+0x328>)
 8017c4a:	2b07      	cmp	r3, #7
 8017c4c:	d8fd      	bhi.n	8017c4a <uxr_read_framed_msg+0x22>
 8017c4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017c52:	0115      	.short	0x0115
 8017c54:	00d600f6 	.word	0x00d600f6
 8017c58:	009000b9 	.word	0x009000b9
 8017c5c:	0030004d 	.word	0x0030004d
 8017c60:	0008      	.short	0x0008
 8017c62:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017c66:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017c6a:	4299      	cmp	r1, r3
 8017c6c:	f000 814a 	beq.w	8017f04 <uxr_read_framed_msg+0x2dc>
 8017c70:	18e2      	adds	r2, r4, r3
 8017c72:	7892      	ldrb	r2, [r2, #2]
 8017c74:	2a7d      	cmp	r2, #125	@ 0x7d
 8017c76:	f000 8199 	beq.w	8017fac <uxr_read_framed_msg+0x384>
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	0858      	lsrs	r0, r3, #1
 8017c7e:	fba5 1000 	umull	r1, r0, r5, r0
 8017c82:	0880      	lsrs	r0, r0, #2
 8017c84:	212a      	movs	r1, #42	@ 0x2a
 8017c86:	fb01 3310 	mls	r3, r1, r0, r3
 8017c8a:	2a7e      	cmp	r2, #126	@ 0x7e
 8017c8c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017c90:	f000 8252 	beq.w	8018138 <uxr_read_framed_msg+0x510>
 8017c94:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017c96:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8017c98:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017c9c:	b29b      	uxth	r3, r3
 8017c9e:	2200      	movs	r2, #0
 8017ca0:	4299      	cmp	r1, r3
 8017ca2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8017ca4:	7022      	strb	r2, [r4, #0]
 8017ca6:	f000 8179 	beq.w	8017f9c <uxr_read_framed_msg+0x374>
 8017caa:	2000      	movs	r0, #0
 8017cac:	b003      	add	sp, #12
 8017cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cb2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017cb6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017cba:	4299      	cmp	r1, r3
 8017cbc:	f000 8131 	beq.w	8017f22 <uxr_read_framed_msg+0x2fa>
 8017cc0:	18e2      	adds	r2, r4, r3
 8017cc2:	7890      	ldrb	r0, [r2, #2]
 8017cc4:	287d      	cmp	r0, #125	@ 0x7d
 8017cc6:	f000 8190 	beq.w	8017fea <uxr_read_framed_msg+0x3c2>
 8017cca:	3301      	adds	r3, #1
 8017ccc:	085a      	lsrs	r2, r3, #1
 8017cce:	fba5 1202 	umull	r1, r2, r5, r2
 8017cd2:	0892      	lsrs	r2, r2, #2
 8017cd4:	212a      	movs	r1, #42	@ 0x2a
 8017cd6:	fb01 3312 	mls	r3, r1, r2, r3
 8017cda:	287e      	cmp	r0, #126	@ 0x7e
 8017cdc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017ce0:	f000 821a 	beq.w	8018118 <uxr_read_framed_msg+0x4f0>
 8017ce4:	2307      	movs	r3, #7
 8017ce6:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8017ce8:	7023      	strb	r3, [r4, #0]
 8017cea:	e7ae      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017cec:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017cee:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017cf2:	459e      	cmp	lr, r3
 8017cf4:	d938      	bls.n	8017d68 <uxr_read_framed_msg+0x140>
 8017cf6:	ee07 8a90 	vmov	s15, r8
 8017cfa:	212a      	movs	r1, #42	@ 0x2a
 8017cfc:	e020      	b.n	8017d40 <uxr_read_framed_msg+0x118>
 8017cfe:	f89b c002 	ldrb.w	ip, [fp, #2]
 8017d02:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8017d06:	f000 80d4 	beq.w	8017eb2 <uxr_read_framed_msg+0x28a>
 8017d0a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017d0e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017d12:	f000 8219 	beq.w	8018148 <uxr_read_framed_msg+0x520>
 8017d16:	f806 c003 	strb.w	ip, [r6, r3]
 8017d1a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8017d1e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8017d20:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8017d24:	ea8a 000c 	eor.w	r0, sl, ip
 8017d28:	b2c0      	uxtb	r0, r0
 8017d2a:	3301      	adds	r3, #1
 8017d2c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017d30:	b29b      	uxth	r3, r3
 8017d32:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8017d36:	4573      	cmp	r3, lr
 8017d38:	8663      	strh	r3, [r4, #50]	@ 0x32
 8017d3a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8017d3c:	f080 8120 	bcs.w	8017f80 <uxr_read_framed_msg+0x358>
 8017d40:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8017d44:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017d48:	f100 0c01 	add.w	ip, r0, #1
 8017d4c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017d50:	fba5 8202 	umull	r8, r2, r5, r2
 8017d54:	0892      	lsrs	r2, r2, #2
 8017d56:	4582      	cmp	sl, r0
 8017d58:	eb04 0b00 	add.w	fp, r4, r0
 8017d5c:	fb01 c212 	mls	r2, r1, r2, ip
 8017d60:	d1cd      	bne.n	8017cfe <uxr_read_framed_msg+0xd6>
 8017d62:	ee17 8a90 	vmov	r8, s15
 8017d66:	459e      	cmp	lr, r3
 8017d68:	f040 8111 	bne.w	8017f8e <uxr_read_framed_msg+0x366>
 8017d6c:	2306      	movs	r3, #6
 8017d6e:	7023      	strb	r3, [r4, #0]
 8017d70:	e76b      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017d72:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017d76:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017d7a:	4298      	cmp	r0, r3
 8017d7c:	f000 80c2 	beq.w	8017f04 <uxr_read_framed_msg+0x2dc>
 8017d80:	18e2      	adds	r2, r4, r3
 8017d82:	7891      	ldrb	r1, [r2, #2]
 8017d84:	297d      	cmp	r1, #125	@ 0x7d
 8017d86:	f000 814c 	beq.w	8018022 <uxr_read_framed_msg+0x3fa>
 8017d8a:	3301      	adds	r3, #1
 8017d8c:	085a      	lsrs	r2, r3, #1
 8017d8e:	fba5 0202 	umull	r0, r2, r5, r2
 8017d92:	0892      	lsrs	r2, r2, #2
 8017d94:	202a      	movs	r0, #42	@ 0x2a
 8017d96:	fb00 3312 	mls	r3, r0, r2, r3
 8017d9a:	297e      	cmp	r1, #126	@ 0x7e
 8017d9c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017da0:	f000 81ca 	beq.w	8018138 <uxr_read_framed_msg+0x510>
 8017da4:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8017da6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017daa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017dac:	b29b      	uxth	r3, r3
 8017dae:	2000      	movs	r0, #0
 8017db0:	428b      	cmp	r3, r1
 8017db2:	8623      	strh	r3, [r4, #48]	@ 0x30
 8017db4:	8660      	strh	r0, [r4, #50]	@ 0x32
 8017db6:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8017db8:	f240 80df 	bls.w	8017f7a <uxr_read_framed_msg+0x352>
 8017dbc:	7020      	strb	r0, [r4, #0]
 8017dbe:	b003      	add	sp, #12
 8017dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017dc8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017dcc:	4299      	cmp	r1, r3
 8017dce:	f000 80a8 	beq.w	8017f22 <uxr_read_framed_msg+0x2fa>
 8017dd2:	18e2      	adds	r2, r4, r3
 8017dd4:	7890      	ldrb	r0, [r2, #2]
 8017dd6:	287d      	cmp	r0, #125	@ 0x7d
 8017dd8:	f000 8164 	beq.w	80180a4 <uxr_read_framed_msg+0x47c>
 8017ddc:	3301      	adds	r3, #1
 8017dde:	085a      	lsrs	r2, r3, #1
 8017de0:	fba5 1202 	umull	r1, r2, r5, r2
 8017de4:	0892      	lsrs	r2, r2, #2
 8017de6:	212a      	movs	r1, #42	@ 0x2a
 8017de8:	fb01 3312 	mls	r3, r1, r2, r3
 8017dec:	287e      	cmp	r0, #126	@ 0x7e
 8017dee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017df2:	f000 8191 	beq.w	8018118 <uxr_read_framed_msg+0x4f0>
 8017df6:	2304      	movs	r3, #4
 8017df8:	8620      	strh	r0, [r4, #48]	@ 0x30
 8017dfa:	7023      	strb	r3, [r4, #0]
 8017dfc:	e725      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017dfe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8017e02:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017e06:	4290      	cmp	r0, r2
 8017e08:	f000 80b3 	beq.w	8017f72 <uxr_read_framed_msg+0x34a>
 8017e0c:	18a3      	adds	r3, r4, r2
 8017e0e:	7899      	ldrb	r1, [r3, #2]
 8017e10:	297d      	cmp	r1, #125	@ 0x7d
 8017e12:	f000 8164 	beq.w	80180de <uxr_read_framed_msg+0x4b6>
 8017e16:	3201      	adds	r2, #1
 8017e18:	0850      	lsrs	r0, r2, #1
 8017e1a:	fba5 3000 	umull	r3, r0, r5, r0
 8017e1e:	0880      	lsrs	r0, r0, #2
 8017e20:	232a      	movs	r3, #42	@ 0x2a
 8017e22:	fb03 2210 	mls	r2, r3, r0, r2
 8017e26:	297e      	cmp	r1, #126	@ 0x7e
 8017e28:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017e2c:	f000 8188 	beq.w	8018140 <uxr_read_framed_msg+0x518>
 8017e30:	7863      	ldrb	r3, [r4, #1]
 8017e32:	428b      	cmp	r3, r1
 8017e34:	bf0c      	ite	eq
 8017e36:	2303      	moveq	r3, #3
 8017e38:	2300      	movne	r3, #0
 8017e3a:	7023      	strb	r3, [r4, #0]
 8017e3c:	e705      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017e3e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8017e42:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8017e46:	2200      	movs	r2, #0
 8017e48:	4299      	cmp	r1, r3
 8017e4a:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8017e4e:	d06c      	beq.n	8017f2a <uxr_read_framed_msg+0x302>
 8017e50:	18e2      	adds	r2, r4, r3
 8017e52:	7890      	ldrb	r0, [r2, #2]
 8017e54:	287d      	cmp	r0, #125	@ 0x7d
 8017e56:	f000 8101 	beq.w	801805c <uxr_read_framed_msg+0x434>
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	085a      	lsrs	r2, r3, #1
 8017e5e:	fba5 1202 	umull	r1, r2, r5, r2
 8017e62:	0892      	lsrs	r2, r2, #2
 8017e64:	212a      	movs	r1, #42	@ 0x2a
 8017e66:	fb01 3312 	mls	r3, r1, r2, r3
 8017e6a:	287e      	cmp	r0, #126	@ 0x7e
 8017e6c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8017e70:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017e74:	d059      	beq.n	8017f2a <uxr_read_framed_msg+0x302>
 8017e76:	2302      	movs	r3, #2
 8017e78:	7023      	strb	r3, [r4, #0]
 8017e7a:	e6e6      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017e7c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8017e80:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017e84:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8017e88:	1c51      	adds	r1, r2, #1
 8017e8a:	084b      	lsrs	r3, r1, #1
 8017e8c:	fba5 c303 	umull	ip, r3, r5, r3
 8017e90:	089b      	lsrs	r3, r3, #2
 8017e92:	fb0e 1313 	mls	r3, lr, r3, r1
 8017e96:	4592      	cmp	sl, r2
 8017e98:	eb04 0002 	add.w	r0, r4, r2
 8017e9c:	b2da      	uxtb	r2, r3
 8017e9e:	f43f af04 	beq.w	8017caa <uxr_read_framed_msg+0x82>
 8017ea2:	7883      	ldrb	r3, [r0, #2]
 8017ea4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8017ea8:	2b7e      	cmp	r3, #126	@ 0x7e
 8017eaa:	d1ed      	bne.n	8017e88 <uxr_read_framed_msg+0x260>
 8017eac:	2301      	movs	r3, #1
 8017eae:	7023      	strb	r3, [r4, #0]
 8017eb0:	e6cb      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017eb2:	f100 0c01 	add.w	ip, r0, #1
 8017eb6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017eba:	fba5 8202 	umull	r8, r2, r5, r2
 8017ebe:	0892      	lsrs	r2, r2, #2
 8017ec0:	fb01 c212 	mls	r2, r1, r2, ip
 8017ec4:	eb04 0c02 	add.w	ip, r4, r2
 8017ec8:	b2d2      	uxtb	r2, r2
 8017eca:	4592      	cmp	sl, r2
 8017ecc:	f100 0002 	add.w	r0, r0, #2
 8017ed0:	f43f af47 	beq.w	8017d62 <uxr_read_framed_msg+0x13a>
 8017ed4:	0842      	lsrs	r2, r0, #1
 8017ed6:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017eda:	fba5 8202 	umull	r8, r2, r5, r2
 8017ede:	0892      	lsrs	r2, r2, #2
 8017ee0:	fb01 0012 	mls	r0, r1, r2, r0
 8017ee4:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8017ee8:	f08a 0c20 	eor.w	ip, sl, #32
 8017eec:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8017ef0:	f47f af11 	bne.w	8017d16 <uxr_read_framed_msg+0xee>
 8017ef4:	459e      	cmp	lr, r3
 8017ef6:	ee17 8a90 	vmov	r8, s15
 8017efa:	f43f af37 	beq.w	8017d6c <uxr_read_framed_msg+0x144>
 8017efe:	2301      	movs	r3, #1
 8017f00:	7023      	strb	r3, [r4, #0]
 8017f02:	e6a2      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f06:	9300      	str	r3, [sp, #0]
 8017f08:	2301      	movs	r3, #1
 8017f0a:	9301      	str	r3, [sp, #4]
 8017f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f0e:	464a      	mov	r2, r9
 8017f10:	4641      	mov	r1, r8
 8017f12:	4620      	mov	r0, r4
 8017f14:	f7ff fe06 	bl	8017b24 <uxr_framing_read_transport>
 8017f18:	2800      	cmp	r0, #0
 8017f1a:	f43f aec6 	beq.w	8017caa <uxr_read_framed_msg+0x82>
 8017f1e:	7823      	ldrb	r3, [r4, #0]
 8017f20:	e693      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017f22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f24:	9300      	str	r3, [sp, #0]
 8017f26:	2302      	movs	r3, #2
 8017f28:	e7ef      	b.n	8017f0a <uxr_read_framed_msg+0x2e2>
 8017f2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f2c:	9300      	str	r3, [sp, #0]
 8017f2e:	2304      	movs	r3, #4
 8017f30:	9301      	str	r3, [sp, #4]
 8017f32:	464a      	mov	r2, r9
 8017f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f36:	4641      	mov	r1, r8
 8017f38:	4620      	mov	r0, r4
 8017f3a:	f7ff fdf3 	bl	8017b24 <uxr_framing_read_transport>
 8017f3e:	2800      	cmp	r0, #0
 8017f40:	d1ed      	bne.n	8017f1e <uxr_read_framed_msg+0x2f6>
 8017f42:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017f46:	2b7e      	cmp	r3, #126	@ 0x7e
 8017f48:	d0e9      	beq.n	8017f1e <uxr_read_framed_msg+0x2f6>
 8017f4a:	e6ae      	b.n	8017caa <uxr_read_framed_msg+0x82>
 8017f4c:	30c30c31 	.word	0x30c30c31
 8017f50:	0801b7c0 	.word	0x0801b7c0
 8017f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f56:	9300      	str	r3, [sp, #0]
 8017f58:	2305      	movs	r3, #5
 8017f5a:	9301      	str	r3, [sp, #4]
 8017f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f5e:	f7ff fde1 	bl	8017b24 <uxr_framing_read_transport>
 8017f62:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8017f66:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	f43f ae9d 	beq.w	8017caa <uxr_read_framed_msg+0x82>
 8017f70:	e668      	b.n	8017c44 <uxr_read_framed_msg+0x1c>
 8017f72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f74:	9300      	str	r3, [sp, #0]
 8017f76:	2303      	movs	r3, #3
 8017f78:	e7c7      	b.n	8017f0a <uxr_read_framed_msg+0x2e2>
 8017f7a:	2305      	movs	r3, #5
 8017f7c:	7023      	strb	r3, [r4, #0]
 8017f7e:	e664      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8017f80:	ee17 8a90 	vmov	r8, s15
 8017f84:	f43f aef2 	beq.w	8017d6c <uxr_read_framed_msg+0x144>
 8017f88:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8017f8c:	d08e      	beq.n	8017eac <uxr_read_framed_msg+0x284>
 8017f8e:	ebae 0303 	sub.w	r3, lr, r3
 8017f92:	3302      	adds	r3, #2
 8017f94:	9301      	str	r3, [sp, #4]
 8017f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f98:	9300      	str	r3, [sp, #0]
 8017f9a:	e7b7      	b.n	8017f0c <uxr_read_framed_msg+0x2e4>
 8017f9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017f9e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8017fa2:	7013      	strb	r3, [r2, #0]
 8017fa4:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8017fa6:	b003      	add	sp, #12
 8017fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fac:	f103 0c01 	add.w	ip, r3, #1
 8017fb0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017fb4:	fba5 0202 	umull	r0, r2, r5, r2
 8017fb8:	0892      	lsrs	r2, r2, #2
 8017fba:	202a      	movs	r0, #42	@ 0x2a
 8017fbc:	fb00 c212 	mls	r2, r0, r2, ip
 8017fc0:	fa5f fc82 	uxtb.w	ip, r2
 8017fc4:	4561      	cmp	r1, ip
 8017fc6:	d09d      	beq.n	8017f04 <uxr_read_framed_msg+0x2dc>
 8017fc8:	3302      	adds	r3, #2
 8017fca:	4422      	add	r2, r4
 8017fcc:	0859      	lsrs	r1, r3, #1
 8017fce:	7892      	ldrb	r2, [r2, #2]
 8017fd0:	fba5 c101 	umull	ip, r1, r5, r1
 8017fd4:	0889      	lsrs	r1, r1, #2
 8017fd6:	fb00 3311 	mls	r3, r0, r1, r3
 8017fda:	2a7e      	cmp	r2, #126	@ 0x7e
 8017fdc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8017fe0:	f000 80aa 	beq.w	8018138 <uxr_read_framed_msg+0x510>
 8017fe4:	f082 0220 	eor.w	r2, r2, #32
 8017fe8:	e654      	b.n	8017c94 <uxr_read_framed_msg+0x6c>
 8017fea:	1c58      	adds	r0, r3, #1
 8017fec:	0842      	lsrs	r2, r0, #1
 8017fee:	fba5 c202 	umull	ip, r2, r5, r2
 8017ff2:	0892      	lsrs	r2, r2, #2
 8017ff4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8017ff8:	fb0c 0212 	mls	r2, ip, r2, r0
 8017ffc:	b2d0      	uxtb	r0, r2
 8017ffe:	4281      	cmp	r1, r0
 8018000:	d08f      	beq.n	8017f22 <uxr_read_framed_msg+0x2fa>
 8018002:	4422      	add	r2, r4
 8018004:	3302      	adds	r3, #2
 8018006:	7890      	ldrb	r0, [r2, #2]
 8018008:	085a      	lsrs	r2, r3, #1
 801800a:	fba5 1202 	umull	r1, r2, r5, r2
 801800e:	0892      	lsrs	r2, r2, #2
 8018010:	fb0c 3312 	mls	r3, ip, r2, r3
 8018014:	287e      	cmp	r0, #126	@ 0x7e
 8018016:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801801a:	d07d      	beq.n	8018118 <uxr_read_framed_msg+0x4f0>
 801801c:	f080 0020 	eor.w	r0, r0, #32
 8018020:	e660      	b.n	8017ce4 <uxr_read_framed_msg+0xbc>
 8018022:	1c59      	adds	r1, r3, #1
 8018024:	084a      	lsrs	r2, r1, #1
 8018026:	fba5 c202 	umull	ip, r2, r5, r2
 801802a:	0892      	lsrs	r2, r2, #2
 801802c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8018030:	fb0c 1212 	mls	r2, ip, r2, r1
 8018034:	b2d1      	uxtb	r1, r2
 8018036:	4288      	cmp	r0, r1
 8018038:	f43f af64 	beq.w	8017f04 <uxr_read_framed_msg+0x2dc>
 801803c:	4422      	add	r2, r4
 801803e:	3302      	adds	r3, #2
 8018040:	7891      	ldrb	r1, [r2, #2]
 8018042:	085a      	lsrs	r2, r3, #1
 8018044:	fba5 0202 	umull	r0, r2, r5, r2
 8018048:	0892      	lsrs	r2, r2, #2
 801804a:	fb0c 3312 	mls	r3, ip, r2, r3
 801804e:	297e      	cmp	r1, #126	@ 0x7e
 8018050:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018054:	d070      	beq.n	8018138 <uxr_read_framed_msg+0x510>
 8018056:	f081 0120 	eor.w	r1, r1, #32
 801805a:	e6a3      	b.n	8017da4 <uxr_read_framed_msg+0x17c>
 801805c:	f103 0c01 	add.w	ip, r3, #1
 8018060:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018064:	fba5 0202 	umull	r0, r2, r5, r2
 8018068:	0892      	lsrs	r2, r2, #2
 801806a:	202a      	movs	r0, #42	@ 0x2a
 801806c:	fb00 c212 	mls	r2, r0, r2, ip
 8018070:	fa5f fc82 	uxtb.w	ip, r2
 8018074:	4561      	cmp	r1, ip
 8018076:	f43f af58 	beq.w	8017f2a <uxr_read_framed_msg+0x302>
 801807a:	4422      	add	r2, r4
 801807c:	3302      	adds	r3, #2
 801807e:	7891      	ldrb	r1, [r2, #2]
 8018080:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8018084:	085a      	lsrs	r2, r3, #1
 8018086:	fba5 c202 	umull	ip, r2, r5, r2
 801808a:	0892      	lsrs	r2, r2, #2
 801808c:	fb00 3312 	mls	r3, r0, r2, r3
 8018090:	297e      	cmp	r1, #126	@ 0x7e
 8018092:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8018096:	f43f af48 	beq.w	8017f2a <uxr_read_framed_msg+0x302>
 801809a:	f081 0120 	eor.w	r1, r1, #32
 801809e:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80180a2:	e6e8      	b.n	8017e76 <uxr_read_framed_msg+0x24e>
 80180a4:	1c58      	adds	r0, r3, #1
 80180a6:	0842      	lsrs	r2, r0, #1
 80180a8:	fba5 c202 	umull	ip, r2, r5, r2
 80180ac:	0892      	lsrs	r2, r2, #2
 80180ae:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80180b2:	fb0c 0212 	mls	r2, ip, r2, r0
 80180b6:	b2d0      	uxtb	r0, r2
 80180b8:	4281      	cmp	r1, r0
 80180ba:	f43f af32 	beq.w	8017f22 <uxr_read_framed_msg+0x2fa>
 80180be:	4422      	add	r2, r4
 80180c0:	3302      	adds	r3, #2
 80180c2:	7890      	ldrb	r0, [r2, #2]
 80180c4:	085a      	lsrs	r2, r3, #1
 80180c6:	fba5 1202 	umull	r1, r2, r5, r2
 80180ca:	0892      	lsrs	r2, r2, #2
 80180cc:	fb0c 3312 	mls	r3, ip, r2, r3
 80180d0:	287e      	cmp	r0, #126	@ 0x7e
 80180d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80180d6:	d01f      	beq.n	8018118 <uxr_read_framed_msg+0x4f0>
 80180d8:	f080 0020 	eor.w	r0, r0, #32
 80180dc:	e68b      	b.n	8017df6 <uxr_read_framed_msg+0x1ce>
 80180de:	1c51      	adds	r1, r2, #1
 80180e0:	084b      	lsrs	r3, r1, #1
 80180e2:	fba5 c303 	umull	ip, r3, r5, r3
 80180e6:	089b      	lsrs	r3, r3, #2
 80180e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80180ec:	fb0c 1313 	mls	r3, ip, r3, r1
 80180f0:	b2d9      	uxtb	r1, r3
 80180f2:	4288      	cmp	r0, r1
 80180f4:	f43f af3d 	beq.w	8017f72 <uxr_read_framed_msg+0x34a>
 80180f8:	3202      	adds	r2, #2
 80180fa:	4423      	add	r3, r4
 80180fc:	0850      	lsrs	r0, r2, #1
 80180fe:	789b      	ldrb	r3, [r3, #2]
 8018100:	fba5 1000 	umull	r1, r0, r5, r0
 8018104:	0880      	lsrs	r0, r0, #2
 8018106:	fb0c 2210 	mls	r2, ip, r0, r2
 801810a:	2b7e      	cmp	r3, #126	@ 0x7e
 801810c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8018110:	d016      	beq.n	8018140 <uxr_read_framed_msg+0x518>
 8018112:	f083 0120 	eor.w	r1, r3, #32
 8018116:	e68b      	b.n	8017e30 <uxr_read_framed_msg+0x208>
 8018118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801811a:	9300      	str	r3, [sp, #0]
 801811c:	2302      	movs	r3, #2
 801811e:	9301      	str	r3, [sp, #4]
 8018120:	464a      	mov	r2, r9
 8018122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018124:	4641      	mov	r1, r8
 8018126:	4620      	mov	r0, r4
 8018128:	f7ff fcfc 	bl	8017b24 <uxr_framing_read_transport>
 801812c:	2800      	cmp	r0, #0
 801812e:	f47f aef6 	bne.w	8017f1e <uxr_read_framed_msg+0x2f6>
 8018132:	2301      	movs	r3, #1
 8018134:	7023      	strb	r3, [r4, #0]
 8018136:	e588      	b.n	8017c4a <uxr_read_framed_msg+0x22>
 8018138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801813a:	9300      	str	r3, [sp, #0]
 801813c:	2301      	movs	r3, #1
 801813e:	e7ee      	b.n	801811e <uxr_read_framed_msg+0x4f6>
 8018140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018142:	9300      	str	r3, [sp, #0]
 8018144:	2303      	movs	r3, #3
 8018146:	e7ea      	b.n	801811e <uxr_read_framed_msg+0x4f6>
 8018148:	ee17 8a90 	vmov	r8, s15
 801814c:	e6ae      	b.n	8017eac <uxr_read_framed_msg+0x284>
 801814e:	bf00      	nop

08018150 <rcl_get_default_domain_id>:
 8018150:	b530      	push	{r4, r5, lr}
 8018152:	b083      	sub	sp, #12
 8018154:	2300      	movs	r3, #0
 8018156:	9300      	str	r3, [sp, #0]
 8018158:	b1d0      	cbz	r0, 8018190 <rcl_get_default_domain_id+0x40>
 801815a:	4604      	mov	r4, r0
 801815c:	4669      	mov	r1, sp
 801815e:	4815      	ldr	r0, [pc, #84]	@ (80181b4 <rcl_get_default_domain_id+0x64>)
 8018160:	f7fc fc86 	bl	8014a70 <rcutils_get_env>
 8018164:	4602      	mov	r2, r0
 8018166:	b110      	cbz	r0, 801816e <rcl_get_default_domain_id+0x1e>
 8018168:	2001      	movs	r0, #1
 801816a:	b003      	add	sp, #12
 801816c:	bd30      	pop	{r4, r5, pc}
 801816e:	9b00      	ldr	r3, [sp, #0]
 8018170:	b18b      	cbz	r3, 8018196 <rcl_get_default_domain_id+0x46>
 8018172:	7818      	ldrb	r0, [r3, #0]
 8018174:	2800      	cmp	r0, #0
 8018176:	d0f8      	beq.n	801816a <rcl_get_default_domain_id+0x1a>
 8018178:	a901      	add	r1, sp, #4
 801817a:	4618      	mov	r0, r3
 801817c:	9201      	str	r2, [sp, #4]
 801817e:	f000 ffb5 	bl	80190ec <strtoul>
 8018182:	4605      	mov	r5, r0
 8018184:	b150      	cbz	r0, 801819c <rcl_get_default_domain_id+0x4c>
 8018186:	1c43      	adds	r3, r0, #1
 8018188:	d00d      	beq.n	80181a6 <rcl_get_default_domain_id+0x56>
 801818a:	6025      	str	r5, [r4, #0]
 801818c:	2000      	movs	r0, #0
 801818e:	e7ec      	b.n	801816a <rcl_get_default_domain_id+0x1a>
 8018190:	200b      	movs	r0, #11
 8018192:	b003      	add	sp, #12
 8018194:	bd30      	pop	{r4, r5, pc}
 8018196:	4618      	mov	r0, r3
 8018198:	b003      	add	sp, #12
 801819a:	bd30      	pop	{r4, r5, pc}
 801819c:	9b01      	ldr	r3, [sp, #4]
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d0f2      	beq.n	801818a <rcl_get_default_domain_id+0x3a>
 80181a4:	e7e0      	b.n	8018168 <rcl_get_default_domain_id+0x18>
 80181a6:	f001 fa5d 	bl	8019664 <__errno>
 80181aa:	6803      	ldr	r3, [r0, #0]
 80181ac:	2b22      	cmp	r3, #34	@ 0x22
 80181ae:	d1ec      	bne.n	801818a <rcl_get_default_domain_id+0x3a>
 80181b0:	e7da      	b.n	8018168 <rcl_get_default_domain_id+0x18>
 80181b2:	bf00      	nop
 80181b4:	0801b9c0 	.word	0x0801b9c0

080181b8 <rcl_expand_topic_name>:
 80181b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181bc:	b08b      	sub	sp, #44	@ 0x2c
 80181be:	9306      	str	r3, [sp, #24]
 80181c0:	2800      	cmp	r0, #0
 80181c2:	f000 80ad 	beq.w	8018320 <rcl_expand_topic_name+0x168>
 80181c6:	460e      	mov	r6, r1
 80181c8:	2900      	cmp	r1, #0
 80181ca:	f000 80a9 	beq.w	8018320 <rcl_expand_topic_name+0x168>
 80181ce:	4617      	mov	r7, r2
 80181d0:	2a00      	cmp	r2, #0
 80181d2:	f000 80a5 	beq.w	8018320 <rcl_expand_topic_name+0x168>
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	f000 80a2 	beq.w	8018320 <rcl_expand_topic_name+0x168>
 80181dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80181de:	2b00      	cmp	r3, #0
 80181e0:	f000 809e 	beq.w	8018320 <rcl_expand_topic_name+0x168>
 80181e4:	2200      	movs	r2, #0
 80181e6:	a909      	add	r1, sp, #36	@ 0x24
 80181e8:	4680      	mov	r8, r0
 80181ea:	f000 f9fb 	bl	80185e4 <rcl_validate_topic_name>
 80181ee:	4604      	mov	r4, r0
 80181f0:	2800      	cmp	r0, #0
 80181f2:	f040 8096 	bne.w	8018322 <rcl_expand_topic_name+0x16a>
 80181f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	f040 809a 	bne.w	8018332 <rcl_expand_topic_name+0x17a>
 80181fe:	4602      	mov	r2, r0
 8018200:	a909      	add	r1, sp, #36	@ 0x24
 8018202:	4630      	mov	r0, r6
 8018204:	f7fd f892 	bl	801532c <rmw_validate_node_name>
 8018208:	2800      	cmp	r0, #0
 801820a:	f040 808e 	bne.w	801832a <rcl_expand_topic_name+0x172>
 801820e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018210:	2a00      	cmp	r2, #0
 8018212:	f040 8093 	bne.w	801833c <rcl_expand_topic_name+0x184>
 8018216:	a909      	add	r1, sp, #36	@ 0x24
 8018218:	4638      	mov	r0, r7
 801821a:	f7fd f869 	bl	80152f0 <rmw_validate_namespace>
 801821e:	2800      	cmp	r0, #0
 8018220:	f040 8083 	bne.w	801832a <rcl_expand_topic_name+0x172>
 8018224:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018226:	2c00      	cmp	r4, #0
 8018228:	f040 80ed 	bne.w	8018406 <rcl_expand_topic_name+0x24e>
 801822c:	217b      	movs	r1, #123	@ 0x7b
 801822e:	4640      	mov	r0, r8
 8018230:	f001 f97e 	bl	8019530 <strchr>
 8018234:	f898 3000 	ldrb.w	r3, [r8]
 8018238:	2b2f      	cmp	r3, #47	@ 0x2f
 801823a:	4605      	mov	r5, r0
 801823c:	f000 809e 	beq.w	801837c <rcl_expand_topic_name+0x1c4>
 8018240:	2b7e      	cmp	r3, #126	@ 0x7e
 8018242:	f040 80a2 	bne.w	801838a <rcl_expand_topic_name+0x1d2>
 8018246:	4638      	mov	r0, r7
 8018248:	f7e7 ffda 	bl	8000200 <strlen>
 801824c:	4a82      	ldr	r2, [pc, #520]	@ (8018458 <rcl_expand_topic_name+0x2a0>)
 801824e:	4b83      	ldr	r3, [pc, #524]	@ (801845c <rcl_expand_topic_name+0x2a4>)
 8018250:	2801      	cmp	r0, #1
 8018252:	bf18      	it	ne
 8018254:	4613      	movne	r3, r2
 8018256:	9302      	str	r3, [sp, #8]
 8018258:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018260:	f108 0301 	add.w	r3, r8, #1
 8018264:	9305      	str	r3, [sp, #20]
 8018266:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801826a:	9301      	str	r3, [sp, #4]
 801826c:	ab14      	add	r3, sp, #80	@ 0x50
 801826e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018270:	f7fc fc26 	bl	8014ac0 <rcutils_format_string_limit>
 8018274:	4682      	mov	sl, r0
 8018276:	2800      	cmp	r0, #0
 8018278:	f000 80c7 	beq.w	801840a <rcl_expand_topic_name+0x252>
 801827c:	2d00      	cmp	r5, #0
 801827e:	f000 80a2 	beq.w	80183c6 <rcl_expand_topic_name+0x20e>
 8018282:	217b      	movs	r1, #123	@ 0x7b
 8018284:	f001 f954 	bl	8019530 <strchr>
 8018288:	46d1      	mov	r9, sl
 801828a:	4605      	mov	r5, r0
 801828c:	9407      	str	r4, [sp, #28]
 801828e:	46d3      	mov	fp, sl
 8018290:	464c      	mov	r4, r9
 8018292:	2d00      	cmp	r5, #0
 8018294:	f000 80be 	beq.w	8018414 <rcl_expand_topic_name+0x25c>
 8018298:	217d      	movs	r1, #125	@ 0x7d
 801829a:	4620      	mov	r0, r4
 801829c:	f001 f948 	bl	8019530 <strchr>
 80182a0:	eba0 0905 	sub.w	r9, r0, r5
 80182a4:	f109 0a01 	add.w	sl, r9, #1
 80182a8:	486d      	ldr	r0, [pc, #436]	@ (8018460 <rcl_expand_topic_name+0x2a8>)
 80182aa:	4652      	mov	r2, sl
 80182ac:	4629      	mov	r1, r5
 80182ae:	f001 f94c 	bl	801954a <strncmp>
 80182b2:	2800      	cmp	r0, #0
 80182b4:	d067      	beq.n	8018386 <rcl_expand_topic_name+0x1ce>
 80182b6:	486b      	ldr	r0, [pc, #428]	@ (8018464 <rcl_expand_topic_name+0x2ac>)
 80182b8:	4652      	mov	r2, sl
 80182ba:	4629      	mov	r1, r5
 80182bc:	f001 f945 	bl	801954a <strncmp>
 80182c0:	b130      	cbz	r0, 80182d0 <rcl_expand_topic_name+0x118>
 80182c2:	4869      	ldr	r0, [pc, #420]	@ (8018468 <rcl_expand_topic_name+0x2b0>)
 80182c4:	4652      	mov	r2, sl
 80182c6:	4629      	mov	r1, r5
 80182c8:	f001 f93f 	bl	801954a <strncmp>
 80182cc:	2800      	cmp	r0, #0
 80182ce:	d137      	bne.n	8018340 <rcl_expand_topic_name+0x188>
 80182d0:	46b9      	mov	r9, r7
 80182d2:	ab16      	add	r3, sp, #88	@ 0x58
 80182d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80182d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80182dc:	ab14      	add	r3, sp, #80	@ 0x50
 80182de:	4628      	mov	r0, r5
 80182e0:	cb0c      	ldmia	r3, {r2, r3}
 80182e2:	4651      	mov	r1, sl
 80182e4:	f7fc fd28 	bl	8014d38 <rcutils_strndup>
 80182e8:	4605      	mov	r5, r0
 80182ea:	2800      	cmp	r0, #0
 80182ec:	f000 809c 	beq.w	8018428 <rcl_expand_topic_name+0x270>
 80182f0:	464a      	mov	r2, r9
 80182f2:	4620      	mov	r0, r4
 80182f4:	ab14      	add	r3, sp, #80	@ 0x50
 80182f6:	4629      	mov	r1, r5
 80182f8:	f7fc fc1c 	bl	8014b34 <rcutils_repl_str>
 80182fc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80182fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018300:	4604      	mov	r4, r0
 8018302:	4628      	mov	r0, r5
 8018304:	4798      	blx	r3
 8018306:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018308:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801830a:	4658      	mov	r0, fp
 801830c:	4798      	blx	r3
 801830e:	2c00      	cmp	r4, #0
 8018310:	d07b      	beq.n	801840a <rcl_expand_topic_name+0x252>
 8018312:	217b      	movs	r1, #123	@ 0x7b
 8018314:	4620      	mov	r0, r4
 8018316:	f001 f90b 	bl	8019530 <strchr>
 801831a:	46a3      	mov	fp, r4
 801831c:	4605      	mov	r5, r0
 801831e:	e7b8      	b.n	8018292 <rcl_expand_topic_name+0xda>
 8018320:	240b      	movs	r4, #11
 8018322:	4620      	mov	r0, r4
 8018324:	b00b      	add	sp, #44	@ 0x2c
 8018326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801832a:	f7f9 fdff 	bl	8011f2c <rcl_convert_rmw_ret_to_rcl_ret>
 801832e:	4604      	mov	r4, r0
 8018330:	e7f7      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 8018332:	2467      	movs	r4, #103	@ 0x67
 8018334:	4620      	mov	r0, r4
 8018336:	b00b      	add	sp, #44	@ 0x2c
 8018338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801833c:	24c9      	movs	r4, #201	@ 0xc9
 801833e:	e7f0      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 8018340:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018344:	9806      	ldr	r0, [sp, #24]
 8018346:	1c69      	adds	r1, r5, #1
 8018348:	f7fc fe10 	bl	8014f6c <rcutils_string_map_getn>
 801834c:	4681      	mov	r9, r0
 801834e:	2800      	cmp	r0, #0
 8018350:	d1bf      	bne.n	80182d2 <rcl_expand_topic_name+0x11a>
 8018352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018354:	aa16      	add	r2, sp, #88	@ 0x58
 8018356:	6018      	str	r0, [r3, #0]
 8018358:	ca07      	ldmia	r2, {r0, r1, r2}
 801835a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801835e:	ab14      	add	r3, sp, #80	@ 0x50
 8018360:	cb0c      	ldmia	r3, {r2, r3}
 8018362:	4651      	mov	r1, sl
 8018364:	4628      	mov	r0, r5
 8018366:	f7fc fce7 	bl	8014d38 <rcutils_strndup>
 801836a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801836c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801836e:	4798      	blx	r3
 8018370:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018372:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018374:	4658      	mov	r0, fp
 8018376:	2469      	movs	r4, #105	@ 0x69
 8018378:	4798      	blx	r3
 801837a:	e7d2      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 801837c:	2800      	cmp	r0, #0
 801837e:	d05b      	beq.n	8018438 <rcl_expand_topic_name+0x280>
 8018380:	46c1      	mov	r9, r8
 8018382:	46a2      	mov	sl, r4
 8018384:	e782      	b.n	801828c <rcl_expand_topic_name+0xd4>
 8018386:	46b1      	mov	r9, r6
 8018388:	e7a3      	b.n	80182d2 <rcl_expand_topic_name+0x11a>
 801838a:	2800      	cmp	r0, #0
 801838c:	d1f8      	bne.n	8018380 <rcl_expand_topic_name+0x1c8>
 801838e:	4638      	mov	r0, r7
 8018390:	f7e7 ff36 	bl	8000200 <strlen>
 8018394:	4a35      	ldr	r2, [pc, #212]	@ (801846c <rcl_expand_topic_name+0x2b4>)
 8018396:	4b36      	ldr	r3, [pc, #216]	@ (8018470 <rcl_expand_topic_name+0x2b8>)
 8018398:	f8cd 8010 	str.w	r8, [sp, #16]
 801839c:	2801      	cmp	r0, #1
 801839e:	bf18      	it	ne
 80183a0:	4613      	movne	r3, r2
 80183a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80183a6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80183aa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80183ac:	9703      	str	r7, [sp, #12]
 80183ae:	9200      	str	r2, [sp, #0]
 80183b0:	ab14      	add	r3, sp, #80	@ 0x50
 80183b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80183b4:	f7fc fb84 	bl	8014ac0 <rcutils_format_string_limit>
 80183b8:	4682      	mov	sl, r0
 80183ba:	4653      	mov	r3, sl
 80183bc:	b32b      	cbz	r3, 801840a <rcl_expand_topic_name+0x252>
 80183be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183c0:	f8c3 a000 	str.w	sl, [r3]
 80183c4:	e7ad      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 80183c6:	f89a 3000 	ldrb.w	r3, [sl]
 80183ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80183cc:	d0f7      	beq.n	80183be <rcl_expand_topic_name+0x206>
 80183ce:	4638      	mov	r0, r7
 80183d0:	f7e7 ff16 	bl	8000200 <strlen>
 80183d4:	4a25      	ldr	r2, [pc, #148]	@ (801846c <rcl_expand_topic_name+0x2b4>)
 80183d6:	4b26      	ldr	r3, [pc, #152]	@ (8018470 <rcl_expand_topic_name+0x2b8>)
 80183d8:	f8cd a010 	str.w	sl, [sp, #16]
 80183dc:	2801      	cmp	r0, #1
 80183de:	bf18      	it	ne
 80183e0:	4613      	movne	r3, r2
 80183e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80183e6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80183ea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80183ec:	9703      	str	r7, [sp, #12]
 80183ee:	9200      	str	r2, [sp, #0]
 80183f0:	ab14      	add	r3, sp, #80	@ 0x50
 80183f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80183f4:	f7fc fb64 	bl	8014ac0 <rcutils_format_string_limit>
 80183f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80183fa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80183fc:	4605      	mov	r5, r0
 80183fe:	4650      	mov	r0, sl
 8018400:	4798      	blx	r3
 8018402:	46aa      	mov	sl, r5
 8018404:	e7d9      	b.n	80183ba <rcl_expand_topic_name+0x202>
 8018406:	24ca      	movs	r4, #202	@ 0xca
 8018408:	e78b      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 801840a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801840c:	2300      	movs	r3, #0
 801840e:	6013      	str	r3, [r2, #0]
 8018410:	240a      	movs	r4, #10
 8018412:	e786      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 8018414:	465b      	mov	r3, fp
 8018416:	9c07      	ldr	r4, [sp, #28]
 8018418:	46da      	mov	sl, fp
 801841a:	2b00      	cmp	r3, #0
 801841c:	d1d3      	bne.n	80183c6 <rcl_expand_topic_name+0x20e>
 801841e:	f898 3000 	ldrb.w	r3, [r8]
 8018422:	2b2f      	cmp	r3, #47	@ 0x2f
 8018424:	d0cb      	beq.n	80183be <rcl_expand_topic_name+0x206>
 8018426:	e7b2      	b.n	801838e <rcl_expand_topic_name+0x1d6>
 8018428:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801842c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801842e:	6015      	str	r5, [r2, #0]
 8018430:	4658      	mov	r0, fp
 8018432:	4798      	blx	r3
 8018434:	240a      	movs	r4, #10
 8018436:	e774      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 8018438:	ab17      	add	r3, sp, #92	@ 0x5c
 801843a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801843e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018442:	ab14      	add	r3, sp, #80	@ 0x50
 8018444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018446:	4640      	mov	r0, r8
 8018448:	f7fc fc54 	bl	8014cf4 <rcutils_strdup>
 801844c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801844e:	2800      	cmp	r0, #0
 8018450:	6018      	str	r0, [r3, #0]
 8018452:	bf08      	it	eq
 8018454:	240a      	moveq	r4, #10
 8018456:	e764      	b.n	8018322 <rcl_expand_topic_name+0x16a>
 8018458:	0801b9d0 	.word	0x0801b9d0
 801845c:	0801add4 	.word	0x0801add4
 8018460:	0801b9d8 	.word	0x0801b9d8
 8018464:	0801b9e0 	.word	0x0801b9e0
 8018468:	0801b9e8 	.word	0x0801b9e8
 801846c:	0801b22c 	.word	0x0801b22c
 8018470:	0801ade4 	.word	0x0801ade4

08018474 <rcl_get_default_topic_name_substitutions>:
 8018474:	2800      	cmp	r0, #0
 8018476:	bf0c      	ite	eq
 8018478:	200b      	moveq	r0, #11
 801847a:	2000      	movne	r0, #0
 801847c:	4770      	bx	lr
 801847e:	bf00      	nop

08018480 <rcl_get_zero_initialized_guard_condition>:
 8018480:	4a03      	ldr	r2, [pc, #12]	@ (8018490 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018482:	4603      	mov	r3, r0
 8018484:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018488:	e883 0003 	stmia.w	r3, {r0, r1}
 801848c:	4618      	mov	r0, r3
 801848e:	4770      	bx	lr
 8018490:	0801b9f4 	.word	0x0801b9f4

08018494 <rcl_guard_condition_init_from_rmw>:
 8018494:	b082      	sub	sp, #8
 8018496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801849a:	b086      	sub	sp, #24
 801849c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80184a0:	4604      	mov	r4, r0
 80184a2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80184a6:	460e      	mov	r6, r1
 80184a8:	4617      	mov	r7, r2
 80184aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80184ae:	f10d 0e04 	add.w	lr, sp, #4
 80184b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80184b6:	f8dc 3000 	ldr.w	r3, [ip]
 80184ba:	f8ce 3000 	str.w	r3, [lr]
 80184be:	a801      	add	r0, sp, #4
 80184c0:	f7f3 f802 	bl	800b4c8 <rcutils_allocator_is_valid>
 80184c4:	b350      	cbz	r0, 801851c <rcl_guard_condition_init_from_rmw+0x88>
 80184c6:	b34c      	cbz	r4, 801851c <rcl_guard_condition_init_from_rmw+0x88>
 80184c8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80184cc:	f1b8 0f00 	cmp.w	r8, #0
 80184d0:	d11e      	bne.n	8018510 <rcl_guard_condition_init_from_rmw+0x7c>
 80184d2:	b31f      	cbz	r7, 801851c <rcl_guard_condition_init_from_rmw+0x88>
 80184d4:	4638      	mov	r0, r7
 80184d6:	f7f9 fd47 	bl	8011f68 <rcl_context_is_valid>
 80184da:	b328      	cbz	r0, 8018528 <rcl_guard_condition_init_from_rmw+0x94>
 80184dc:	9b01      	ldr	r3, [sp, #4]
 80184de:	9905      	ldr	r1, [sp, #20]
 80184e0:	201c      	movs	r0, #28
 80184e2:	4798      	blx	r3
 80184e4:	4605      	mov	r5, r0
 80184e6:	6060      	str	r0, [r4, #4]
 80184e8:	b358      	cbz	r0, 8018542 <rcl_guard_condition_init_from_rmw+0xae>
 80184ea:	b1fe      	cbz	r6, 801852c <rcl_guard_condition_init_from_rmw+0x98>
 80184ec:	6006      	str	r6, [r0, #0]
 80184ee:	f880 8004 	strb.w	r8, [r0, #4]
 80184f2:	ac01      	add	r4, sp, #4
 80184f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184f6:	f105 0c08 	add.w	ip, r5, #8
 80184fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184fe:	6823      	ldr	r3, [r4, #0]
 8018500:	f8cc 3000 	str.w	r3, [ip]
 8018504:	2000      	movs	r0, #0
 8018506:	b006      	add	sp, #24
 8018508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801850c:	b002      	add	sp, #8
 801850e:	4770      	bx	lr
 8018510:	2064      	movs	r0, #100	@ 0x64
 8018512:	b006      	add	sp, #24
 8018514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018518:	b002      	add	sp, #8
 801851a:	4770      	bx	lr
 801851c:	200b      	movs	r0, #11
 801851e:	b006      	add	sp, #24
 8018520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018524:	b002      	add	sp, #8
 8018526:	4770      	bx	lr
 8018528:	2065      	movs	r0, #101	@ 0x65
 801852a:	e7f2      	b.n	8018512 <rcl_guard_condition_init_from_rmw+0x7e>
 801852c:	6838      	ldr	r0, [r7, #0]
 801852e:	3028      	adds	r0, #40	@ 0x28
 8018530:	f000 fa3a 	bl	80189a8 <rmw_create_guard_condition>
 8018534:	6028      	str	r0, [r5, #0]
 8018536:	6865      	ldr	r5, [r4, #4]
 8018538:	682e      	ldr	r6, [r5, #0]
 801853a:	b126      	cbz	r6, 8018546 <rcl_guard_condition_init_from_rmw+0xb2>
 801853c:	2301      	movs	r3, #1
 801853e:	712b      	strb	r3, [r5, #4]
 8018540:	e7d7      	b.n	80184f2 <rcl_guard_condition_init_from_rmw+0x5e>
 8018542:	200a      	movs	r0, #10
 8018544:	e7e5      	b.n	8018512 <rcl_guard_condition_init_from_rmw+0x7e>
 8018546:	4628      	mov	r0, r5
 8018548:	9b02      	ldr	r3, [sp, #8]
 801854a:	9905      	ldr	r1, [sp, #20]
 801854c:	4798      	blx	r3
 801854e:	6066      	str	r6, [r4, #4]
 8018550:	2001      	movs	r0, #1
 8018552:	e7de      	b.n	8018512 <rcl_guard_condition_init_from_rmw+0x7e>

08018554 <rcl_guard_condition_fini>:
 8018554:	b570      	push	{r4, r5, r6, lr}
 8018556:	b082      	sub	sp, #8
 8018558:	b1f0      	cbz	r0, 8018598 <rcl_guard_condition_fini+0x44>
 801855a:	6843      	ldr	r3, [r0, #4]
 801855c:	4604      	mov	r4, r0
 801855e:	b163      	cbz	r3, 801857a <rcl_guard_condition_fini+0x26>
 8018560:	6818      	ldr	r0, [r3, #0]
 8018562:	68de      	ldr	r6, [r3, #12]
 8018564:	6999      	ldr	r1, [r3, #24]
 8018566:	b160      	cbz	r0, 8018582 <rcl_guard_condition_fini+0x2e>
 8018568:	791d      	ldrb	r5, [r3, #4]
 801856a:	b965      	cbnz	r5, 8018586 <rcl_guard_condition_fini+0x32>
 801856c:	4618      	mov	r0, r3
 801856e:	47b0      	blx	r6
 8018570:	2300      	movs	r3, #0
 8018572:	4628      	mov	r0, r5
 8018574:	6063      	str	r3, [r4, #4]
 8018576:	b002      	add	sp, #8
 8018578:	bd70      	pop	{r4, r5, r6, pc}
 801857a:	461d      	mov	r5, r3
 801857c:	4628      	mov	r0, r5
 801857e:	b002      	add	sp, #8
 8018580:	bd70      	pop	{r4, r5, r6, pc}
 8018582:	4605      	mov	r5, r0
 8018584:	e7f2      	b.n	801856c <rcl_guard_condition_fini+0x18>
 8018586:	9101      	str	r1, [sp, #4]
 8018588:	f000 fa22 	bl	80189d0 <rmw_destroy_guard_condition>
 801858c:	1e05      	subs	r5, r0, #0
 801858e:	6863      	ldr	r3, [r4, #4]
 8018590:	9901      	ldr	r1, [sp, #4]
 8018592:	bf18      	it	ne
 8018594:	2501      	movne	r5, #1
 8018596:	e7e9      	b.n	801856c <rcl_guard_condition_fini+0x18>
 8018598:	250b      	movs	r5, #11
 801859a:	4628      	mov	r0, r5
 801859c:	b002      	add	sp, #8
 801859e:	bd70      	pop	{r4, r5, r6, pc}

080185a0 <rcl_guard_condition_get_default_options>:
 80185a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185a2:	b087      	sub	sp, #28
 80185a4:	4606      	mov	r6, r0
 80185a6:	4668      	mov	r0, sp
 80185a8:	f7f2 ff80 	bl	800b4ac <rcutils_get_default_allocator>
 80185ac:	4b09      	ldr	r3, [pc, #36]	@ (80185d4 <rcl_guard_condition_get_default_options+0x34>)
 80185ae:	46ee      	mov	lr, sp
 80185b0:	469c      	mov	ip, r3
 80185b2:	461d      	mov	r5, r3
 80185b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80185b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185be:	4634      	mov	r4, r6
 80185c0:	f8de 7000 	ldr.w	r7, [lr]
 80185c4:	f8cc 7000 	str.w	r7, [ip]
 80185c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185ca:	4630      	mov	r0, r6
 80185cc:	6027      	str	r7, [r4, #0]
 80185ce:	b007      	add	sp, #28
 80185d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185d2:	bf00      	nop
 80185d4:	20015594 	.word	0x20015594

080185d8 <rcl_guard_condition_get_rmw_handle>:
 80185d8:	b110      	cbz	r0, 80185e0 <rcl_guard_condition_get_rmw_handle+0x8>
 80185da:	6840      	ldr	r0, [r0, #4]
 80185dc:	b100      	cbz	r0, 80185e0 <rcl_guard_condition_get_rmw_handle+0x8>
 80185de:	6800      	ldr	r0, [r0, #0]
 80185e0:	4770      	bx	lr
 80185e2:	bf00      	nop

080185e4 <rcl_validate_topic_name>:
 80185e4:	2800      	cmp	r0, #0
 80185e6:	d07a      	beq.n	80186de <rcl_validate_topic_name+0xfa>
 80185e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185ec:	460e      	mov	r6, r1
 80185ee:	2900      	cmp	r1, #0
 80185f0:	d07c      	beq.n	80186ec <rcl_validate_topic_name+0x108>
 80185f2:	4617      	mov	r7, r2
 80185f4:	4605      	mov	r5, r0
 80185f6:	f7e7 fe03 	bl	8000200 <strlen>
 80185fa:	b1b0      	cbz	r0, 801862a <rcl_validate_topic_name+0x46>
 80185fc:	f895 9000 	ldrb.w	r9, [r5]
 8018600:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8018784 <rcl_validate_topic_name+0x1a0>
 8018604:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018608:	f013 0304 	ands.w	r3, r3, #4
 801860c:	d169      	bne.n	80186e2 <rcl_validate_topic_name+0xfe>
 801860e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018612:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018616:	2a2f      	cmp	r2, #47	@ 0x2f
 8018618:	d10e      	bne.n	8018638 <rcl_validate_topic_name+0x54>
 801861a:	2202      	movs	r2, #2
 801861c:	6032      	str	r2, [r6, #0]
 801861e:	b36f      	cbz	r7, 801867c <rcl_validate_topic_name+0x98>
 8018620:	f8c7 8000 	str.w	r8, [r7]
 8018624:	4618      	mov	r0, r3
 8018626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801862a:	2301      	movs	r3, #1
 801862c:	6033      	str	r3, [r6, #0]
 801862e:	b32f      	cbz	r7, 801867c <rcl_validate_topic_name+0x98>
 8018630:	2000      	movs	r0, #0
 8018632:	6038      	str	r0, [r7, #0]
 8018634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018638:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801863c:	461c      	mov	r4, r3
 801863e:	4619      	mov	r1, r3
 8018640:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018644:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8018648:	f1be 0f09 	cmp.w	lr, #9
 801864c:	d919      	bls.n	8018682 <rcl_validate_topic_name+0x9e>
 801864e:	f022 0e20 	bic.w	lr, r2, #32
 8018652:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8018656:	f1be 0f19 	cmp.w	lr, #25
 801865a:	d912      	bls.n	8018682 <rcl_validate_topic_name+0x9e>
 801865c:	2a5f      	cmp	r2, #95	@ 0x5f
 801865e:	d019      	beq.n	8018694 <rcl_validate_topic_name+0xb0>
 8018660:	2a2f      	cmp	r2, #47	@ 0x2f
 8018662:	d051      	beq.n	8018708 <rcl_validate_topic_name+0x124>
 8018664:	2a7e      	cmp	r2, #126	@ 0x7e
 8018666:	d048      	beq.n	80186fa <rcl_validate_topic_name+0x116>
 8018668:	2a7b      	cmp	r2, #123	@ 0x7b
 801866a:	d054      	beq.n	8018716 <rcl_validate_topic_name+0x132>
 801866c:	2a7d      	cmp	r2, #125	@ 0x7d
 801866e:	d161      	bne.n	8018734 <rcl_validate_topic_name+0x150>
 8018670:	2c00      	cmp	r4, #0
 8018672:	d155      	bne.n	8018720 <rcl_validate_topic_name+0x13c>
 8018674:	2305      	movs	r3, #5
 8018676:	6033      	str	r3, [r6, #0]
 8018678:	b107      	cbz	r7, 801867c <rcl_validate_topic_name+0x98>
 801867a:	6039      	str	r1, [r7, #0]
 801867c:	2000      	movs	r0, #0
 801867e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018682:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018686:	0752      	lsls	r2, r2, #29
 8018688:	d504      	bpl.n	8018694 <rcl_validate_topic_name+0xb0>
 801868a:	b11c      	cbz	r4, 8018694 <rcl_validate_topic_name+0xb0>
 801868c:	b111      	cbz	r1, 8018694 <rcl_validate_topic_name+0xb0>
 801868e:	1e4a      	subs	r2, r1, #1
 8018690:	429a      	cmp	r2, r3
 8018692:	d02d      	beq.n	80186f0 <rcl_validate_topic_name+0x10c>
 8018694:	3101      	adds	r1, #1
 8018696:	4288      	cmp	r0, r1
 8018698:	d1d2      	bne.n	8018640 <rcl_validate_topic_name+0x5c>
 801869a:	2c00      	cmp	r4, #0
 801869c:	d145      	bne.n	801872a <rcl_validate_topic_name+0x146>
 801869e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80186a2:	d04f      	beq.n	8018744 <rcl_validate_topic_name+0x160>
 80186a4:	4620      	mov	r0, r4
 80186a6:	2301      	movs	r3, #1
 80186a8:	e006      	b.n	80186b8 <rcl_validate_topic_name+0xd4>
 80186aa:	428b      	cmp	r3, r1
 80186ac:	f105 0501 	add.w	r5, r5, #1
 80186b0:	f103 0201 	add.w	r2, r3, #1
 80186b4:	d236      	bcs.n	8018724 <rcl_validate_topic_name+0x140>
 80186b6:	4613      	mov	r3, r2
 80186b8:	4580      	cmp	r8, r0
 80186ba:	f100 0001 	add.w	r0, r0, #1
 80186be:	d0f4      	beq.n	80186aa <rcl_validate_topic_name+0xc6>
 80186c0:	782a      	ldrb	r2, [r5, #0]
 80186c2:	2a2f      	cmp	r2, #47	@ 0x2f
 80186c4:	d1f1      	bne.n	80186aa <rcl_validate_topic_name+0xc6>
 80186c6:	786a      	ldrb	r2, [r5, #1]
 80186c8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80186cc:	0754      	lsls	r4, r2, #29
 80186ce:	d5ec      	bpl.n	80186aa <rcl_validate_topic_name+0xc6>
 80186d0:	2204      	movs	r2, #4
 80186d2:	6032      	str	r2, [r6, #0]
 80186d4:	2f00      	cmp	r7, #0
 80186d6:	d0d1      	beq.n	801867c <rcl_validate_topic_name+0x98>
 80186d8:	603b      	str	r3, [r7, #0]
 80186da:	2000      	movs	r0, #0
 80186dc:	e7aa      	b.n	8018634 <rcl_validate_topic_name+0x50>
 80186de:	200b      	movs	r0, #11
 80186e0:	4770      	bx	lr
 80186e2:	2304      	movs	r3, #4
 80186e4:	6033      	str	r3, [r6, #0]
 80186e6:	2f00      	cmp	r7, #0
 80186e8:	d1a2      	bne.n	8018630 <rcl_validate_topic_name+0x4c>
 80186ea:	e7c7      	b.n	801867c <rcl_validate_topic_name+0x98>
 80186ec:	200b      	movs	r0, #11
 80186ee:	e7a1      	b.n	8018634 <rcl_validate_topic_name+0x50>
 80186f0:	2309      	movs	r3, #9
 80186f2:	6033      	str	r3, [r6, #0]
 80186f4:	2f00      	cmp	r7, #0
 80186f6:	d1c0      	bne.n	801867a <rcl_validate_topic_name+0x96>
 80186f8:	e7c0      	b.n	801867c <rcl_validate_topic_name+0x98>
 80186fa:	2900      	cmp	r1, #0
 80186fc:	d0ca      	beq.n	8018694 <rcl_validate_topic_name+0xb0>
 80186fe:	2306      	movs	r3, #6
 8018700:	6033      	str	r3, [r6, #0]
 8018702:	2f00      	cmp	r7, #0
 8018704:	d1b9      	bne.n	801867a <rcl_validate_topic_name+0x96>
 8018706:	e7b9      	b.n	801867c <rcl_validate_topic_name+0x98>
 8018708:	2c00      	cmp	r4, #0
 801870a:	d0c3      	beq.n	8018694 <rcl_validate_topic_name+0xb0>
 801870c:	2308      	movs	r3, #8
 801870e:	6033      	str	r3, [r6, #0]
 8018710:	2f00      	cmp	r7, #0
 8018712:	d1b2      	bne.n	801867a <rcl_validate_topic_name+0x96>
 8018714:	e7b2      	b.n	801867c <rcl_validate_topic_name+0x98>
 8018716:	2c00      	cmp	r4, #0
 8018718:	d1f8      	bne.n	801870c <rcl_validate_topic_name+0x128>
 801871a:	460b      	mov	r3, r1
 801871c:	2401      	movs	r4, #1
 801871e:	e7b9      	b.n	8018694 <rcl_validate_topic_name+0xb0>
 8018720:	2400      	movs	r4, #0
 8018722:	e7b7      	b.n	8018694 <rcl_validate_topic_name+0xb0>
 8018724:	2000      	movs	r0, #0
 8018726:	6030      	str	r0, [r6, #0]
 8018728:	e784      	b.n	8018634 <rcl_validate_topic_name+0x50>
 801872a:	2205      	movs	r2, #5
 801872c:	6032      	str	r2, [r6, #0]
 801872e:	2f00      	cmp	r7, #0
 8018730:	d1d2      	bne.n	80186d8 <rcl_validate_topic_name+0xf4>
 8018732:	e7a3      	b.n	801867c <rcl_validate_topic_name+0x98>
 8018734:	2c00      	cmp	r4, #0
 8018736:	bf14      	ite	ne
 8018738:	2308      	movne	r3, #8
 801873a:	2303      	moveq	r3, #3
 801873c:	6033      	str	r3, [r6, #0]
 801873e:	2f00      	cmp	r7, #0
 8018740:	d19b      	bne.n	801867a <rcl_validate_topic_name+0x96>
 8018742:	e79b      	b.n	801867c <rcl_validate_topic_name+0x98>
 8018744:	2301      	movs	r3, #1
 8018746:	e00a      	b.n	801875e <rcl_validate_topic_name+0x17a>
 8018748:	2c01      	cmp	r4, #1
 801874a:	d013      	beq.n	8018774 <rcl_validate_topic_name+0x190>
 801874c:	4299      	cmp	r1, r3
 801874e:	f104 0401 	add.w	r4, r4, #1
 8018752:	f105 0501 	add.w	r5, r5, #1
 8018756:	f103 0201 	add.w	r2, r3, #1
 801875a:	d9e3      	bls.n	8018724 <rcl_validate_topic_name+0x140>
 801875c:	4613      	mov	r3, r2
 801875e:	45a0      	cmp	r8, r4
 8018760:	d0f4      	beq.n	801874c <rcl_validate_topic_name+0x168>
 8018762:	782a      	ldrb	r2, [r5, #0]
 8018764:	2a2f      	cmp	r2, #47	@ 0x2f
 8018766:	d1ef      	bne.n	8018748 <rcl_validate_topic_name+0x164>
 8018768:	786a      	ldrb	r2, [r5, #1]
 801876a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801876e:	0752      	lsls	r2, r2, #29
 8018770:	d5ec      	bpl.n	801874c <rcl_validate_topic_name+0x168>
 8018772:	e7ad      	b.n	80186d0 <rcl_validate_topic_name+0xec>
 8018774:	2307      	movs	r3, #7
 8018776:	6033      	str	r3, [r6, #0]
 8018778:	2f00      	cmp	r7, #0
 801877a:	f43f af7f 	beq.w	801867c <rcl_validate_topic_name+0x98>
 801877e:	603c      	str	r4, [r7, #0]
 8018780:	2000      	movs	r0, #0
 8018782:	e757      	b.n	8018634 <rcl_validate_topic_name+0x50>
 8018784:	0801bb5e 	.word	0x0801bb5e

08018788 <rcutils_string_array_fini>:
 8018788:	b320      	cbz	r0, 80187d4 <rcutils_string_array_fini+0x4c>
 801878a:	b570      	push	{r4, r5, r6, lr}
 801878c:	4604      	mov	r4, r0
 801878e:	6840      	ldr	r0, [r0, #4]
 8018790:	b1d8      	cbz	r0, 80187ca <rcutils_string_array_fini+0x42>
 8018792:	f104 0008 	add.w	r0, r4, #8
 8018796:	f7f2 fe97 	bl	800b4c8 <rcutils_allocator_is_valid>
 801879a:	b1b8      	cbz	r0, 80187cc <rcutils_string_array_fini+0x44>
 801879c:	6823      	ldr	r3, [r4, #0]
 801879e:	b1bb      	cbz	r3, 80187d0 <rcutils_string_array_fini+0x48>
 80187a0:	2500      	movs	r5, #0
 80187a2:	6860      	ldr	r0, [r4, #4]
 80187a4:	462e      	mov	r6, r5
 80187a6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80187aa:	68e3      	ldr	r3, [r4, #12]
 80187ac:	69a1      	ldr	r1, [r4, #24]
 80187ae:	4798      	blx	r3
 80187b0:	e9d4 3000 	ldrd	r3, r0, [r4]
 80187b4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80187b8:	3501      	adds	r5, #1
 80187ba:	429d      	cmp	r5, r3
 80187bc:	d3f3      	bcc.n	80187a6 <rcutils_string_array_fini+0x1e>
 80187be:	68e3      	ldr	r3, [r4, #12]
 80187c0:	69a1      	ldr	r1, [r4, #24]
 80187c2:	4798      	blx	r3
 80187c4:	2000      	movs	r0, #0
 80187c6:	e9c4 0000 	strd	r0, r0, [r4]
 80187ca:	bd70      	pop	{r4, r5, r6, pc}
 80187cc:	200b      	movs	r0, #11
 80187ce:	bd70      	pop	{r4, r5, r6, pc}
 80187d0:	6860      	ldr	r0, [r4, #4]
 80187d2:	e7f4      	b.n	80187be <rcutils_string_array_fini+0x36>
 80187d4:	200b      	movs	r0, #11
 80187d6:	4770      	bx	lr

080187d8 <on_status>:
 80187d8:	b082      	sub	sp, #8
 80187da:	b002      	add	sp, #8
 80187dc:	4770      	bx	lr
 80187de:	bf00      	nop

080187e0 <on_topic>:
 80187e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187e4:	4a22      	ldr	r2, [pc, #136]	@ (8018870 <on_topic+0x90>)
 80187e6:	b094      	sub	sp, #80	@ 0x50
 80187e8:	6812      	ldr	r2, [r2, #0]
 80187ea:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80187ec:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80187f0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80187f4:	b3c2      	cbz	r2, 8018868 <on_topic+0x88>
 80187f6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80187fa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80187fe:	e001      	b.n	8018804 <on_topic+0x24>
 8018800:	6852      	ldr	r2, [r2, #4]
 8018802:	b38a      	cbz	r2, 8018868 <on_topic+0x88>
 8018804:	6894      	ldr	r4, [r2, #8]
 8018806:	8aa3      	ldrh	r3, [r4, #20]
 8018808:	428b      	cmp	r3, r1
 801880a:	d1f9      	bne.n	8018800 <on_topic+0x20>
 801880c:	7da3      	ldrb	r3, [r4, #22]
 801880e:	4283      	cmp	r3, r0
 8018810:	d1f6      	bne.n	8018800 <on_topic+0x20>
 8018812:	2248      	movs	r2, #72	@ 0x48
 8018814:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018818:	4668      	mov	r0, sp
 801881a:	f000 ff50 	bl	80196be <memcpy>
 801881e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018822:	cb0c      	ldmia	r3, {r2, r3}
 8018824:	4620      	mov	r0, r4
 8018826:	f7f3 fa7f 	bl	800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>
 801882a:	4607      	mov	r7, r0
 801882c:	b1e0      	cbz	r0, 8018868 <on_topic+0x88>
 801882e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018832:	4632      	mov	r2, r6
 8018834:	4628      	mov	r0, r5
 8018836:	f108 0110 	add.w	r1, r8, #16
 801883a:	f7f4 fabf 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 801883e:	b930      	cbnz	r0, 801884e <on_topic+0x6e>
 8018840:	480c      	ldr	r0, [pc, #48]	@ (8018874 <on_topic+0x94>)
 8018842:	4639      	mov	r1, r7
 8018844:	b014      	add	sp, #80	@ 0x50
 8018846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801884a:	f7fc bddd 	b.w	8015408 <put_memory>
 801884e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8018852:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8018856:	f7fd ff05 	bl	8016664 <rmw_uros_epoch_nanos>
 801885a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801885e:	2305      	movs	r3, #5
 8018860:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018864:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8018868:	b014      	add	sp, #80	@ 0x50
 801886a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801886e:	bf00      	nop
 8018870:	200153f4 	.word	0x200153f4
 8018874:	200153e4 	.word	0x200153e4

08018878 <on_request>:
 8018878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801887c:	4823      	ldr	r0, [pc, #140]	@ (801890c <on_request+0x94>)
 801887e:	b094      	sub	sp, #80	@ 0x50
 8018880:	6800      	ldr	r0, [r0, #0]
 8018882:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018884:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018888:	9113      	str	r1, [sp, #76]	@ 0x4c
 801888a:	2800      	cmp	r0, #0
 801888c:	d03b      	beq.n	8018906 <on_request+0x8e>
 801888e:	461d      	mov	r5, r3
 8018890:	e001      	b.n	8018896 <on_request+0x1e>
 8018892:	6840      	ldr	r0, [r0, #4]
 8018894:	b3b8      	cbz	r0, 8018906 <on_request+0x8e>
 8018896:	6884      	ldr	r4, [r0, #8]
 8018898:	8b21      	ldrh	r1, [r4, #24]
 801889a:	4291      	cmp	r1, r2
 801889c:	d1f9      	bne.n	8018892 <on_request+0x1a>
 801889e:	2248      	movs	r2, #72	@ 0x48
 80188a0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80188a4:	4668      	mov	r0, sp
 80188a6:	f000 ff0a 	bl	80196be <memcpy>
 80188aa:	f104 0320 	add.w	r3, r4, #32
 80188ae:	cb0c      	ldmia	r3, {r2, r3}
 80188b0:	4620      	mov	r0, r4
 80188b2:	f7f3 fa39 	bl	800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>
 80188b6:	4680      	mov	r8, r0
 80188b8:	b328      	cbz	r0, 8018906 <on_request+0x8e>
 80188ba:	4638      	mov	r0, r7
 80188bc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80188c0:	4632      	mov	r2, r6
 80188c2:	f107 0110 	add.w	r1, r7, #16
 80188c6:	f7f4 fa79 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 80188ca:	b930      	cbnz	r0, 80188da <on_request+0x62>
 80188cc:	4810      	ldr	r0, [pc, #64]	@ (8018910 <on_request+0x98>)
 80188ce:	4641      	mov	r1, r8
 80188d0:	b014      	add	sp, #80	@ 0x50
 80188d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188d6:	f7fc bd97 	b.w	8015408 <put_memory>
 80188da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188dc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80188e0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80188e4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80188e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80188ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80188f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80188f4:	f7fd feb6 	bl	8016664 <rmw_uros_epoch_nanos>
 80188f8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80188fc:	2303      	movs	r3, #3
 80188fe:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018902:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018906:	b014      	add	sp, #80	@ 0x50
 8018908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801890c:	200153c4 	.word	0x200153c4
 8018910:	200153e4 	.word	0x200153e4

08018914 <on_reply>:
 8018914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018918:	4821      	ldr	r0, [pc, #132]	@ (80189a0 <on_reply+0x8c>)
 801891a:	b094      	sub	sp, #80	@ 0x50
 801891c:	6800      	ldr	r0, [r0, #0]
 801891e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8018920:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8018924:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018926:	b3b8      	cbz	r0, 8018998 <on_reply+0x84>
 8018928:	461d      	mov	r5, r3
 801892a:	e001      	b.n	8018930 <on_reply+0x1c>
 801892c:	6840      	ldr	r0, [r0, #4]
 801892e:	b398      	cbz	r0, 8018998 <on_reply+0x84>
 8018930:	6884      	ldr	r4, [r0, #8]
 8018932:	8b21      	ldrh	r1, [r4, #24]
 8018934:	4291      	cmp	r1, r2
 8018936:	d1f9      	bne.n	801892c <on_reply+0x18>
 8018938:	2248      	movs	r2, #72	@ 0x48
 801893a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801893e:	4668      	mov	r0, sp
 8018940:	f000 febd 	bl	80196be <memcpy>
 8018944:	f104 0320 	add.w	r3, r4, #32
 8018948:	cb0c      	ldmia	r3, {r2, r3}
 801894a:	4620      	mov	r0, r4
 801894c:	f7f3 f9ec 	bl	800bd28 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018950:	4680      	mov	r8, r0
 8018952:	b308      	cbz	r0, 8018998 <on_reply+0x84>
 8018954:	4638      	mov	r0, r7
 8018956:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801895a:	4632      	mov	r2, r6
 801895c:	f107 0110 	add.w	r1, r7, #16
 8018960:	f7f4 fa2c 	bl	800cdbc <ucdr_deserialize_array_uint8_t>
 8018964:	b930      	cbnz	r0, 8018974 <on_reply+0x60>
 8018966:	480f      	ldr	r0, [pc, #60]	@ (80189a4 <on_reply+0x90>)
 8018968:	4641      	mov	r1, r8
 801896a:	b014      	add	sp, #80	@ 0x50
 801896c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018970:	f7fc bd4a 	b.w	8015408 <put_memory>
 8018974:	2200      	movs	r2, #0
 8018976:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801897a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801897e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8018982:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8018986:	f7fd fe6d 	bl	8016664 <rmw_uros_epoch_nanos>
 801898a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801898e:	2304      	movs	r3, #4
 8018990:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018994:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8018998:	b014      	add	sp, #80	@ 0x50
 801899a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801899e:	bf00      	nop
 80189a0:	20010ad8 	.word	0x20010ad8
 80189a4:	200153e4 	.word	0x200153e4

080189a8 <rmw_create_guard_condition>:
 80189a8:	b538      	push	{r3, r4, r5, lr}
 80189aa:	4605      	mov	r5, r0
 80189ac:	4807      	ldr	r0, [pc, #28]	@ (80189cc <rmw_create_guard_condition+0x24>)
 80189ae:	f7fc fd1b 	bl	80153e8 <get_memory>
 80189b2:	b148      	cbz	r0, 80189c8 <rmw_create_guard_condition+0x20>
 80189b4:	6884      	ldr	r4, [r0, #8]
 80189b6:	2300      	movs	r3, #0
 80189b8:	7423      	strb	r3, [r4, #16]
 80189ba:	61e5      	str	r5, [r4, #28]
 80189bc:	f7fc fd7c 	bl	80154b8 <rmw_get_implementation_identifier>
 80189c0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80189c4:	f104 0014 	add.w	r0, r4, #20
 80189c8:	bd38      	pop	{r3, r4, r5, pc}
 80189ca:	bf00      	nop
 80189cc:	20015384 	.word	0x20015384

080189d0 <rmw_destroy_guard_condition>:
 80189d0:	b508      	push	{r3, lr}
 80189d2:	4b08      	ldr	r3, [pc, #32]	@ (80189f4 <rmw_destroy_guard_condition+0x24>)
 80189d4:	6819      	ldr	r1, [r3, #0]
 80189d6:	b911      	cbnz	r1, 80189de <rmw_destroy_guard_condition+0xe>
 80189d8:	e00a      	b.n	80189f0 <rmw_destroy_guard_condition+0x20>
 80189da:	6849      	ldr	r1, [r1, #4]
 80189dc:	b141      	cbz	r1, 80189f0 <rmw_destroy_guard_condition+0x20>
 80189de:	688b      	ldr	r3, [r1, #8]
 80189e0:	3314      	adds	r3, #20
 80189e2:	4298      	cmp	r0, r3
 80189e4:	d1f9      	bne.n	80189da <rmw_destroy_guard_condition+0xa>
 80189e6:	4803      	ldr	r0, [pc, #12]	@ (80189f4 <rmw_destroy_guard_condition+0x24>)
 80189e8:	f7fc fd0e 	bl	8015408 <put_memory>
 80189ec:	2000      	movs	r0, #0
 80189ee:	bd08      	pop	{r3, pc}
 80189f0:	2001      	movs	r0, #1
 80189f2:	bd08      	pop	{r3, pc}
 80189f4:	20015384 	.word	0x20015384

080189f8 <rosidl_runtime_c__String__init>:
 80189f8:	b510      	push	{r4, lr}
 80189fa:	4604      	mov	r4, r0
 80189fc:	b086      	sub	sp, #24
 80189fe:	b170      	cbz	r0, 8018a1e <rosidl_runtime_c__String__init+0x26>
 8018a00:	a801      	add	r0, sp, #4
 8018a02:	f7f2 fd53 	bl	800b4ac <rcutils_get_default_allocator>
 8018a06:	9b01      	ldr	r3, [sp, #4]
 8018a08:	9905      	ldr	r1, [sp, #20]
 8018a0a:	2001      	movs	r0, #1
 8018a0c:	4798      	blx	r3
 8018a0e:	6020      	str	r0, [r4, #0]
 8018a10:	b128      	cbz	r0, 8018a1e <rosidl_runtime_c__String__init+0x26>
 8018a12:	2100      	movs	r1, #0
 8018a14:	2201      	movs	r2, #1
 8018a16:	7001      	strb	r1, [r0, #0]
 8018a18:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8018a1c:	4610      	mov	r0, r2
 8018a1e:	b006      	add	sp, #24
 8018a20:	bd10      	pop	{r4, pc}
 8018a22:	bf00      	nop

08018a24 <rosidl_runtime_c__String__fini>:
 8018a24:	b320      	cbz	r0, 8018a70 <rosidl_runtime_c__String__fini+0x4c>
 8018a26:	b510      	push	{r4, lr}
 8018a28:	6803      	ldr	r3, [r0, #0]
 8018a2a:	b086      	sub	sp, #24
 8018a2c:	4604      	mov	r4, r0
 8018a2e:	b173      	cbz	r3, 8018a4e <rosidl_runtime_c__String__fini+0x2a>
 8018a30:	6883      	ldr	r3, [r0, #8]
 8018a32:	b1f3      	cbz	r3, 8018a72 <rosidl_runtime_c__String__fini+0x4e>
 8018a34:	a801      	add	r0, sp, #4
 8018a36:	f7f2 fd39 	bl	800b4ac <rcutils_get_default_allocator>
 8018a3a:	9b02      	ldr	r3, [sp, #8]
 8018a3c:	9905      	ldr	r1, [sp, #20]
 8018a3e:	6820      	ldr	r0, [r4, #0]
 8018a40:	4798      	blx	r3
 8018a42:	2300      	movs	r3, #0
 8018a44:	e9c4 3300 	strd	r3, r3, [r4]
 8018a48:	60a3      	str	r3, [r4, #8]
 8018a4a:	b006      	add	sp, #24
 8018a4c:	bd10      	pop	{r4, pc}
 8018a4e:	6843      	ldr	r3, [r0, #4]
 8018a50:	b9db      	cbnz	r3, 8018a8a <rosidl_runtime_c__String__fini+0x66>
 8018a52:	6883      	ldr	r3, [r0, #8]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d0f8      	beq.n	8018a4a <rosidl_runtime_c__String__fini+0x26>
 8018a58:	4b12      	ldr	r3, [pc, #72]	@ (8018aa4 <rosidl_runtime_c__String__fini+0x80>)
 8018a5a:	4813      	ldr	r0, [pc, #76]	@ (8018aa8 <rosidl_runtime_c__String__fini+0x84>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	2251      	movs	r2, #81	@ 0x51
 8018a60:	68db      	ldr	r3, [r3, #12]
 8018a62:	2101      	movs	r1, #1
 8018a64:	f000 fbf0 	bl	8019248 <fwrite>
 8018a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a6c:	f000 f83e 	bl	8018aec <exit>
 8018a70:	4770      	bx	lr
 8018a72:	4b0c      	ldr	r3, [pc, #48]	@ (8018aa4 <rosidl_runtime_c__String__fini+0x80>)
 8018a74:	480d      	ldr	r0, [pc, #52]	@ (8018aac <rosidl_runtime_c__String__fini+0x88>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	224c      	movs	r2, #76	@ 0x4c
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	2101      	movs	r1, #1
 8018a7e:	f000 fbe3 	bl	8019248 <fwrite>
 8018a82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a86:	f000 f831 	bl	8018aec <exit>
 8018a8a:	4b06      	ldr	r3, [pc, #24]	@ (8018aa4 <rosidl_runtime_c__String__fini+0x80>)
 8018a8c:	4808      	ldr	r0, [pc, #32]	@ (8018ab0 <rosidl_runtime_c__String__fini+0x8c>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	224e      	movs	r2, #78	@ 0x4e
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	2101      	movs	r1, #1
 8018a96:	f000 fbd7 	bl	8019248 <fwrite>
 8018a9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a9e:	f000 f825 	bl	8018aec <exit>
 8018aa2:	bf00      	nop
 8018aa4:	200007cc 	.word	0x200007cc
 8018aa8:	0801ba9c 	.word	0x0801ba9c
 8018aac:	0801b9fc 	.word	0x0801b9fc
 8018ab0:	0801ba4c 	.word	0x0801ba4c

08018ab4 <calloc>:
 8018ab4:	4b02      	ldr	r3, [pc, #8]	@ (8018ac0 <calloc+0xc>)
 8018ab6:	460a      	mov	r2, r1
 8018ab8:	4601      	mov	r1, r0
 8018aba:	6818      	ldr	r0, [r3, #0]
 8018abc:	f000 b802 	b.w	8018ac4 <_calloc_r>
 8018ac0:	200007cc 	.word	0x200007cc

08018ac4 <_calloc_r>:
 8018ac4:	b570      	push	{r4, r5, r6, lr}
 8018ac6:	fba1 5402 	umull	r5, r4, r1, r2
 8018aca:	b93c      	cbnz	r4, 8018adc <_calloc_r+0x18>
 8018acc:	4629      	mov	r1, r5
 8018ace:	f000 f899 	bl	8018c04 <_malloc_r>
 8018ad2:	4606      	mov	r6, r0
 8018ad4:	b928      	cbnz	r0, 8018ae2 <_calloc_r+0x1e>
 8018ad6:	2600      	movs	r6, #0
 8018ad8:	4630      	mov	r0, r6
 8018ada:	bd70      	pop	{r4, r5, r6, pc}
 8018adc:	220c      	movs	r2, #12
 8018ade:	6002      	str	r2, [r0, #0]
 8018ae0:	e7f9      	b.n	8018ad6 <_calloc_r+0x12>
 8018ae2:	462a      	mov	r2, r5
 8018ae4:	4621      	mov	r1, r4
 8018ae6:	f000 fd82 	bl	80195ee <memset>
 8018aea:	e7f5      	b.n	8018ad8 <_calloc_r+0x14>

08018aec <exit>:
 8018aec:	b508      	push	{r3, lr}
 8018aee:	4b06      	ldr	r3, [pc, #24]	@ (8018b08 <exit+0x1c>)
 8018af0:	4604      	mov	r4, r0
 8018af2:	b113      	cbz	r3, 8018afa <exit+0xe>
 8018af4:	2100      	movs	r1, #0
 8018af6:	f3af 8000 	nop.w
 8018afa:	4b04      	ldr	r3, [pc, #16]	@ (8018b0c <exit+0x20>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	b103      	cbz	r3, 8018b02 <exit+0x16>
 8018b00:	4798      	blx	r3
 8018b02:	4620      	mov	r0, r4
 8018b04:	f7e9 fcc0 	bl	8002488 <_exit>
 8018b08:	00000000 	.word	0x00000000
 8018b0c:	200156e8 	.word	0x200156e8

08018b10 <getenv>:
 8018b10:	b507      	push	{r0, r1, r2, lr}
 8018b12:	4b04      	ldr	r3, [pc, #16]	@ (8018b24 <getenv+0x14>)
 8018b14:	4601      	mov	r1, r0
 8018b16:	aa01      	add	r2, sp, #4
 8018b18:	6818      	ldr	r0, [r3, #0]
 8018b1a:	f000 f805 	bl	8018b28 <_findenv_r>
 8018b1e:	b003      	add	sp, #12
 8018b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b24:	200007cc 	.word	0x200007cc

08018b28 <_findenv_r>:
 8018b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b2c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018b9c <_findenv_r+0x74>
 8018b30:	4606      	mov	r6, r0
 8018b32:	4689      	mov	r9, r1
 8018b34:	4617      	mov	r7, r2
 8018b36:	f000 fdf7 	bl	8019728 <__env_lock>
 8018b3a:	f8da 4000 	ldr.w	r4, [sl]
 8018b3e:	b134      	cbz	r4, 8018b4e <_findenv_r+0x26>
 8018b40:	464b      	mov	r3, r9
 8018b42:	4698      	mov	r8, r3
 8018b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b48:	b13a      	cbz	r2, 8018b5a <_findenv_r+0x32>
 8018b4a:	2a3d      	cmp	r2, #61	@ 0x3d
 8018b4c:	d1f9      	bne.n	8018b42 <_findenv_r+0x1a>
 8018b4e:	4630      	mov	r0, r6
 8018b50:	f000 fdf0 	bl	8019734 <__env_unlock>
 8018b54:	2000      	movs	r0, #0
 8018b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b5a:	eba8 0809 	sub.w	r8, r8, r9
 8018b5e:	46a3      	mov	fp, r4
 8018b60:	f854 0b04 	ldr.w	r0, [r4], #4
 8018b64:	2800      	cmp	r0, #0
 8018b66:	d0f2      	beq.n	8018b4e <_findenv_r+0x26>
 8018b68:	4642      	mov	r2, r8
 8018b6a:	4649      	mov	r1, r9
 8018b6c:	f000 fced 	bl	801954a <strncmp>
 8018b70:	2800      	cmp	r0, #0
 8018b72:	d1f4      	bne.n	8018b5e <_findenv_r+0x36>
 8018b74:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018b78:	eb03 0508 	add.w	r5, r3, r8
 8018b7c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018b80:	2b3d      	cmp	r3, #61	@ 0x3d
 8018b82:	d1ec      	bne.n	8018b5e <_findenv_r+0x36>
 8018b84:	f8da 3000 	ldr.w	r3, [sl]
 8018b88:	ebab 0303 	sub.w	r3, fp, r3
 8018b8c:	109b      	asrs	r3, r3, #2
 8018b8e:	4630      	mov	r0, r6
 8018b90:	603b      	str	r3, [r7, #0]
 8018b92:	f000 fdcf 	bl	8019734 <__env_unlock>
 8018b96:	1c68      	adds	r0, r5, #1
 8018b98:	e7dd      	b.n	8018b56 <_findenv_r+0x2e>
 8018b9a:	bf00      	nop
 8018b9c:	20000000 	.word	0x20000000

08018ba0 <malloc>:
 8018ba0:	4b02      	ldr	r3, [pc, #8]	@ (8018bac <malloc+0xc>)
 8018ba2:	4601      	mov	r1, r0
 8018ba4:	6818      	ldr	r0, [r3, #0]
 8018ba6:	f000 b82d 	b.w	8018c04 <_malloc_r>
 8018baa:	bf00      	nop
 8018bac:	200007cc 	.word	0x200007cc

08018bb0 <free>:
 8018bb0:	4b02      	ldr	r3, [pc, #8]	@ (8018bbc <free+0xc>)
 8018bb2:	4601      	mov	r1, r0
 8018bb4:	6818      	ldr	r0, [r3, #0]
 8018bb6:	f000 bdc3 	b.w	8019740 <_free_r>
 8018bba:	bf00      	nop
 8018bbc:	200007cc 	.word	0x200007cc

08018bc0 <sbrk_aligned>:
 8018bc0:	b570      	push	{r4, r5, r6, lr}
 8018bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8018c00 <sbrk_aligned+0x40>)
 8018bc4:	460c      	mov	r4, r1
 8018bc6:	6831      	ldr	r1, [r6, #0]
 8018bc8:	4605      	mov	r5, r0
 8018bca:	b911      	cbnz	r1, 8018bd2 <sbrk_aligned+0x12>
 8018bcc:	f000 fd3a 	bl	8019644 <_sbrk_r>
 8018bd0:	6030      	str	r0, [r6, #0]
 8018bd2:	4621      	mov	r1, r4
 8018bd4:	4628      	mov	r0, r5
 8018bd6:	f000 fd35 	bl	8019644 <_sbrk_r>
 8018bda:	1c43      	adds	r3, r0, #1
 8018bdc:	d103      	bne.n	8018be6 <sbrk_aligned+0x26>
 8018bde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018be2:	4620      	mov	r0, r4
 8018be4:	bd70      	pop	{r4, r5, r6, pc}
 8018be6:	1cc4      	adds	r4, r0, #3
 8018be8:	f024 0403 	bic.w	r4, r4, #3
 8018bec:	42a0      	cmp	r0, r4
 8018bee:	d0f8      	beq.n	8018be2 <sbrk_aligned+0x22>
 8018bf0:	1a21      	subs	r1, r4, r0
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	f000 fd26 	bl	8019644 <_sbrk_r>
 8018bf8:	3001      	adds	r0, #1
 8018bfa:	d1f2      	bne.n	8018be2 <sbrk_aligned+0x22>
 8018bfc:	e7ef      	b.n	8018bde <sbrk_aligned+0x1e>
 8018bfe:	bf00      	nop
 8018c00:	200155a8 	.word	0x200155a8

08018c04 <_malloc_r>:
 8018c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c08:	1ccd      	adds	r5, r1, #3
 8018c0a:	f025 0503 	bic.w	r5, r5, #3
 8018c0e:	3508      	adds	r5, #8
 8018c10:	2d0c      	cmp	r5, #12
 8018c12:	bf38      	it	cc
 8018c14:	250c      	movcc	r5, #12
 8018c16:	2d00      	cmp	r5, #0
 8018c18:	4606      	mov	r6, r0
 8018c1a:	db01      	blt.n	8018c20 <_malloc_r+0x1c>
 8018c1c:	42a9      	cmp	r1, r5
 8018c1e:	d904      	bls.n	8018c2a <_malloc_r+0x26>
 8018c20:	230c      	movs	r3, #12
 8018c22:	6033      	str	r3, [r6, #0]
 8018c24:	2000      	movs	r0, #0
 8018c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018d00 <_malloc_r+0xfc>
 8018c2e:	f000 f89d 	bl	8018d6c <__malloc_lock>
 8018c32:	f8d8 3000 	ldr.w	r3, [r8]
 8018c36:	461c      	mov	r4, r3
 8018c38:	bb44      	cbnz	r4, 8018c8c <_malloc_r+0x88>
 8018c3a:	4629      	mov	r1, r5
 8018c3c:	4630      	mov	r0, r6
 8018c3e:	f7ff ffbf 	bl	8018bc0 <sbrk_aligned>
 8018c42:	1c43      	adds	r3, r0, #1
 8018c44:	4604      	mov	r4, r0
 8018c46:	d158      	bne.n	8018cfa <_malloc_r+0xf6>
 8018c48:	f8d8 4000 	ldr.w	r4, [r8]
 8018c4c:	4627      	mov	r7, r4
 8018c4e:	2f00      	cmp	r7, #0
 8018c50:	d143      	bne.n	8018cda <_malloc_r+0xd6>
 8018c52:	2c00      	cmp	r4, #0
 8018c54:	d04b      	beq.n	8018cee <_malloc_r+0xea>
 8018c56:	6823      	ldr	r3, [r4, #0]
 8018c58:	4639      	mov	r1, r7
 8018c5a:	4630      	mov	r0, r6
 8018c5c:	eb04 0903 	add.w	r9, r4, r3
 8018c60:	f000 fcf0 	bl	8019644 <_sbrk_r>
 8018c64:	4581      	cmp	r9, r0
 8018c66:	d142      	bne.n	8018cee <_malloc_r+0xea>
 8018c68:	6821      	ldr	r1, [r4, #0]
 8018c6a:	1a6d      	subs	r5, r5, r1
 8018c6c:	4629      	mov	r1, r5
 8018c6e:	4630      	mov	r0, r6
 8018c70:	f7ff ffa6 	bl	8018bc0 <sbrk_aligned>
 8018c74:	3001      	adds	r0, #1
 8018c76:	d03a      	beq.n	8018cee <_malloc_r+0xea>
 8018c78:	6823      	ldr	r3, [r4, #0]
 8018c7a:	442b      	add	r3, r5
 8018c7c:	6023      	str	r3, [r4, #0]
 8018c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8018c82:	685a      	ldr	r2, [r3, #4]
 8018c84:	bb62      	cbnz	r2, 8018ce0 <_malloc_r+0xdc>
 8018c86:	f8c8 7000 	str.w	r7, [r8]
 8018c8a:	e00f      	b.n	8018cac <_malloc_r+0xa8>
 8018c8c:	6822      	ldr	r2, [r4, #0]
 8018c8e:	1b52      	subs	r2, r2, r5
 8018c90:	d420      	bmi.n	8018cd4 <_malloc_r+0xd0>
 8018c92:	2a0b      	cmp	r2, #11
 8018c94:	d917      	bls.n	8018cc6 <_malloc_r+0xc2>
 8018c96:	1961      	adds	r1, r4, r5
 8018c98:	42a3      	cmp	r3, r4
 8018c9a:	6025      	str	r5, [r4, #0]
 8018c9c:	bf18      	it	ne
 8018c9e:	6059      	strne	r1, [r3, #4]
 8018ca0:	6863      	ldr	r3, [r4, #4]
 8018ca2:	bf08      	it	eq
 8018ca4:	f8c8 1000 	streq.w	r1, [r8]
 8018ca8:	5162      	str	r2, [r4, r5]
 8018caa:	604b      	str	r3, [r1, #4]
 8018cac:	4630      	mov	r0, r6
 8018cae:	f000 f863 	bl	8018d78 <__malloc_unlock>
 8018cb2:	f104 000b 	add.w	r0, r4, #11
 8018cb6:	1d23      	adds	r3, r4, #4
 8018cb8:	f020 0007 	bic.w	r0, r0, #7
 8018cbc:	1ac2      	subs	r2, r0, r3
 8018cbe:	bf1c      	itt	ne
 8018cc0:	1a1b      	subne	r3, r3, r0
 8018cc2:	50a3      	strne	r3, [r4, r2]
 8018cc4:	e7af      	b.n	8018c26 <_malloc_r+0x22>
 8018cc6:	6862      	ldr	r2, [r4, #4]
 8018cc8:	42a3      	cmp	r3, r4
 8018cca:	bf0c      	ite	eq
 8018ccc:	f8c8 2000 	streq.w	r2, [r8]
 8018cd0:	605a      	strne	r2, [r3, #4]
 8018cd2:	e7eb      	b.n	8018cac <_malloc_r+0xa8>
 8018cd4:	4623      	mov	r3, r4
 8018cd6:	6864      	ldr	r4, [r4, #4]
 8018cd8:	e7ae      	b.n	8018c38 <_malloc_r+0x34>
 8018cda:	463c      	mov	r4, r7
 8018cdc:	687f      	ldr	r7, [r7, #4]
 8018cde:	e7b6      	b.n	8018c4e <_malloc_r+0x4a>
 8018ce0:	461a      	mov	r2, r3
 8018ce2:	685b      	ldr	r3, [r3, #4]
 8018ce4:	42a3      	cmp	r3, r4
 8018ce6:	d1fb      	bne.n	8018ce0 <_malloc_r+0xdc>
 8018ce8:	2300      	movs	r3, #0
 8018cea:	6053      	str	r3, [r2, #4]
 8018cec:	e7de      	b.n	8018cac <_malloc_r+0xa8>
 8018cee:	230c      	movs	r3, #12
 8018cf0:	6033      	str	r3, [r6, #0]
 8018cf2:	4630      	mov	r0, r6
 8018cf4:	f000 f840 	bl	8018d78 <__malloc_unlock>
 8018cf8:	e794      	b.n	8018c24 <_malloc_r+0x20>
 8018cfa:	6005      	str	r5, [r0, #0]
 8018cfc:	e7d6      	b.n	8018cac <_malloc_r+0xa8>
 8018cfe:	bf00      	nop
 8018d00:	200155ac 	.word	0x200155ac

08018d04 <sniprintf>:
 8018d04:	b40c      	push	{r2, r3}
 8018d06:	b530      	push	{r4, r5, lr}
 8018d08:	4b17      	ldr	r3, [pc, #92]	@ (8018d68 <sniprintf+0x64>)
 8018d0a:	1e0c      	subs	r4, r1, #0
 8018d0c:	681d      	ldr	r5, [r3, #0]
 8018d0e:	b09d      	sub	sp, #116	@ 0x74
 8018d10:	da08      	bge.n	8018d24 <sniprintf+0x20>
 8018d12:	238b      	movs	r3, #139	@ 0x8b
 8018d14:	602b      	str	r3, [r5, #0]
 8018d16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018d1a:	b01d      	add	sp, #116	@ 0x74
 8018d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018d20:	b002      	add	sp, #8
 8018d22:	4770      	bx	lr
 8018d24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018d28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018d2c:	bf14      	ite	ne
 8018d2e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8018d32:	4623      	moveq	r3, r4
 8018d34:	9304      	str	r3, [sp, #16]
 8018d36:	9307      	str	r3, [sp, #28]
 8018d38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018d3c:	9002      	str	r0, [sp, #8]
 8018d3e:	9006      	str	r0, [sp, #24]
 8018d40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018d44:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018d46:	ab21      	add	r3, sp, #132	@ 0x84
 8018d48:	a902      	add	r1, sp, #8
 8018d4a:	4628      	mov	r0, r5
 8018d4c:	9301      	str	r3, [sp, #4]
 8018d4e:	f000 fd9d 	bl	801988c <_svfiprintf_r>
 8018d52:	1c43      	adds	r3, r0, #1
 8018d54:	bfbc      	itt	lt
 8018d56:	238b      	movlt	r3, #139	@ 0x8b
 8018d58:	602b      	strlt	r3, [r5, #0]
 8018d5a:	2c00      	cmp	r4, #0
 8018d5c:	d0dd      	beq.n	8018d1a <sniprintf+0x16>
 8018d5e:	9b02      	ldr	r3, [sp, #8]
 8018d60:	2200      	movs	r2, #0
 8018d62:	701a      	strb	r2, [r3, #0]
 8018d64:	e7d9      	b.n	8018d1a <sniprintf+0x16>
 8018d66:	bf00      	nop
 8018d68:	200007cc 	.word	0x200007cc

08018d6c <__malloc_lock>:
 8018d6c:	4801      	ldr	r0, [pc, #4]	@ (8018d74 <__malloc_lock+0x8>)
 8018d6e:	f000 bca4 	b.w	80196ba <__retarget_lock_acquire_recursive>
 8018d72:	bf00      	nop
 8018d74:	200156ed 	.word	0x200156ed

08018d78 <__malloc_unlock>:
 8018d78:	4801      	ldr	r0, [pc, #4]	@ (8018d80 <__malloc_unlock+0x8>)
 8018d7a:	f000 bc9f 	b.w	80196bc <__retarget_lock_release_recursive>
 8018d7e:	bf00      	nop
 8018d80:	200156ed 	.word	0x200156ed

08018d84 <srand>:
 8018d84:	b538      	push	{r3, r4, r5, lr}
 8018d86:	4b10      	ldr	r3, [pc, #64]	@ (8018dc8 <srand+0x44>)
 8018d88:	681d      	ldr	r5, [r3, #0]
 8018d8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018d8c:	4604      	mov	r4, r0
 8018d8e:	b9b3      	cbnz	r3, 8018dbe <srand+0x3a>
 8018d90:	2018      	movs	r0, #24
 8018d92:	f7ff ff05 	bl	8018ba0 <malloc>
 8018d96:	4602      	mov	r2, r0
 8018d98:	6328      	str	r0, [r5, #48]	@ 0x30
 8018d9a:	b920      	cbnz	r0, 8018da6 <srand+0x22>
 8018d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8018dcc <srand+0x48>)
 8018d9e:	480c      	ldr	r0, [pc, #48]	@ (8018dd0 <srand+0x4c>)
 8018da0:	2146      	movs	r1, #70	@ 0x46
 8018da2:	f000 fca3 	bl	80196ec <__assert_func>
 8018da6:	490b      	ldr	r1, [pc, #44]	@ (8018dd4 <srand+0x50>)
 8018da8:	4b0b      	ldr	r3, [pc, #44]	@ (8018dd8 <srand+0x54>)
 8018daa:	e9c0 1300 	strd	r1, r3, [r0]
 8018dae:	4b0b      	ldr	r3, [pc, #44]	@ (8018ddc <srand+0x58>)
 8018db0:	6083      	str	r3, [r0, #8]
 8018db2:	230b      	movs	r3, #11
 8018db4:	8183      	strh	r3, [r0, #12]
 8018db6:	2100      	movs	r1, #0
 8018db8:	2001      	movs	r0, #1
 8018dba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018dbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	611c      	str	r4, [r3, #16]
 8018dc4:	615a      	str	r2, [r3, #20]
 8018dc6:	bd38      	pop	{r3, r4, r5, pc}
 8018dc8:	200007cc 	.word	0x200007cc
 8018dcc:	0801baee 	.word	0x0801baee
 8018dd0:	0801bb05 	.word	0x0801bb05
 8018dd4:	abcd330e 	.word	0xabcd330e
 8018dd8:	e66d1234 	.word	0xe66d1234
 8018ddc:	0005deec 	.word	0x0005deec

08018de0 <rand>:
 8018de0:	4b16      	ldr	r3, [pc, #88]	@ (8018e3c <rand+0x5c>)
 8018de2:	b510      	push	{r4, lr}
 8018de4:	681c      	ldr	r4, [r3, #0]
 8018de6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018de8:	b9b3      	cbnz	r3, 8018e18 <rand+0x38>
 8018dea:	2018      	movs	r0, #24
 8018dec:	f7ff fed8 	bl	8018ba0 <malloc>
 8018df0:	4602      	mov	r2, r0
 8018df2:	6320      	str	r0, [r4, #48]	@ 0x30
 8018df4:	b920      	cbnz	r0, 8018e00 <rand+0x20>
 8018df6:	4b12      	ldr	r3, [pc, #72]	@ (8018e40 <rand+0x60>)
 8018df8:	4812      	ldr	r0, [pc, #72]	@ (8018e44 <rand+0x64>)
 8018dfa:	2152      	movs	r1, #82	@ 0x52
 8018dfc:	f000 fc76 	bl	80196ec <__assert_func>
 8018e00:	4911      	ldr	r1, [pc, #68]	@ (8018e48 <rand+0x68>)
 8018e02:	4b12      	ldr	r3, [pc, #72]	@ (8018e4c <rand+0x6c>)
 8018e04:	e9c0 1300 	strd	r1, r3, [r0]
 8018e08:	4b11      	ldr	r3, [pc, #68]	@ (8018e50 <rand+0x70>)
 8018e0a:	6083      	str	r3, [r0, #8]
 8018e0c:	230b      	movs	r3, #11
 8018e0e:	8183      	strh	r3, [r0, #12]
 8018e10:	2100      	movs	r1, #0
 8018e12:	2001      	movs	r0, #1
 8018e14:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018e18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018e1a:	480e      	ldr	r0, [pc, #56]	@ (8018e54 <rand+0x74>)
 8018e1c:	690b      	ldr	r3, [r1, #16]
 8018e1e:	694c      	ldr	r4, [r1, #20]
 8018e20:	4a0d      	ldr	r2, [pc, #52]	@ (8018e58 <rand+0x78>)
 8018e22:	4358      	muls	r0, r3
 8018e24:	fb02 0004 	mla	r0, r2, r4, r0
 8018e28:	fba3 3202 	umull	r3, r2, r3, r2
 8018e2c:	3301      	adds	r3, #1
 8018e2e:	eb40 0002 	adc.w	r0, r0, r2
 8018e32:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018e36:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018e3a:	bd10      	pop	{r4, pc}
 8018e3c:	200007cc 	.word	0x200007cc
 8018e40:	0801baee 	.word	0x0801baee
 8018e44:	0801bb05 	.word	0x0801bb05
 8018e48:	abcd330e 	.word	0xabcd330e
 8018e4c:	e66d1234 	.word	0xe66d1234
 8018e50:	0005deec 	.word	0x0005deec
 8018e54:	5851f42d 	.word	0x5851f42d
 8018e58:	4c957f2d 	.word	0x4c957f2d

08018e5c <realloc>:
 8018e5c:	4b02      	ldr	r3, [pc, #8]	@ (8018e68 <realloc+0xc>)
 8018e5e:	460a      	mov	r2, r1
 8018e60:	4601      	mov	r1, r0
 8018e62:	6818      	ldr	r0, [r3, #0]
 8018e64:	f000 b8a6 	b.w	8018fb4 <_realloc_r>
 8018e68:	200007cc 	.word	0x200007cc

08018e6c <std>:
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	b510      	push	{r4, lr}
 8018e70:	4604      	mov	r4, r0
 8018e72:	e9c0 3300 	strd	r3, r3, [r0]
 8018e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e7a:	6083      	str	r3, [r0, #8]
 8018e7c:	8181      	strh	r1, [r0, #12]
 8018e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018e80:	81c2      	strh	r2, [r0, #14]
 8018e82:	6183      	str	r3, [r0, #24]
 8018e84:	4619      	mov	r1, r3
 8018e86:	2208      	movs	r2, #8
 8018e88:	305c      	adds	r0, #92	@ 0x5c
 8018e8a:	f000 fbb0 	bl	80195ee <memset>
 8018e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8018ec4 <std+0x58>)
 8018e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8018e92:	4b0d      	ldr	r3, [pc, #52]	@ (8018ec8 <std+0x5c>)
 8018e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018e96:	4b0d      	ldr	r3, [pc, #52]	@ (8018ecc <std+0x60>)
 8018e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8018ed0 <std+0x64>)
 8018e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8018e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8018ed4 <std+0x68>)
 8018ea0:	6224      	str	r4, [r4, #32]
 8018ea2:	429c      	cmp	r4, r3
 8018ea4:	d006      	beq.n	8018eb4 <std+0x48>
 8018ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018eaa:	4294      	cmp	r4, r2
 8018eac:	d002      	beq.n	8018eb4 <std+0x48>
 8018eae:	33d0      	adds	r3, #208	@ 0xd0
 8018eb0:	429c      	cmp	r4, r3
 8018eb2:	d105      	bne.n	8018ec0 <std+0x54>
 8018eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ebc:	f000 bbfc 	b.w	80196b8 <__retarget_lock_init_recursive>
 8018ec0:	bd10      	pop	{r4, pc}
 8018ec2:	bf00      	nop
 8018ec4:	0801a18d 	.word	0x0801a18d
 8018ec8:	0801a1af 	.word	0x0801a1af
 8018ecc:	0801a1e7 	.word	0x0801a1e7
 8018ed0:	0801a20b 	.word	0x0801a20b
 8018ed4:	200155b0 	.word	0x200155b0

08018ed8 <stdio_exit_handler>:
 8018ed8:	4a02      	ldr	r2, [pc, #8]	@ (8018ee4 <stdio_exit_handler+0xc>)
 8018eda:	4903      	ldr	r1, [pc, #12]	@ (8018ee8 <stdio_exit_handler+0x10>)
 8018edc:	4803      	ldr	r0, [pc, #12]	@ (8018eec <stdio_exit_handler+0x14>)
 8018ede:	f000 b90f 	b.w	8019100 <_fwalk_sglue>
 8018ee2:	bf00      	nop
 8018ee4:	200007c0 	.word	0x200007c0
 8018ee8:	0801a12d 	.word	0x0801a12d
 8018eec:	200007d0 	.word	0x200007d0

08018ef0 <cleanup_stdio>:
 8018ef0:	6841      	ldr	r1, [r0, #4]
 8018ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8018f24 <cleanup_stdio+0x34>)
 8018ef4:	4299      	cmp	r1, r3
 8018ef6:	b510      	push	{r4, lr}
 8018ef8:	4604      	mov	r4, r0
 8018efa:	d001      	beq.n	8018f00 <cleanup_stdio+0x10>
 8018efc:	f001 f916 	bl	801a12c <_fflush_r>
 8018f00:	68a1      	ldr	r1, [r4, #8]
 8018f02:	4b09      	ldr	r3, [pc, #36]	@ (8018f28 <cleanup_stdio+0x38>)
 8018f04:	4299      	cmp	r1, r3
 8018f06:	d002      	beq.n	8018f0e <cleanup_stdio+0x1e>
 8018f08:	4620      	mov	r0, r4
 8018f0a:	f001 f90f 	bl	801a12c <_fflush_r>
 8018f0e:	68e1      	ldr	r1, [r4, #12]
 8018f10:	4b06      	ldr	r3, [pc, #24]	@ (8018f2c <cleanup_stdio+0x3c>)
 8018f12:	4299      	cmp	r1, r3
 8018f14:	d004      	beq.n	8018f20 <cleanup_stdio+0x30>
 8018f16:	4620      	mov	r0, r4
 8018f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f1c:	f001 b906 	b.w	801a12c <_fflush_r>
 8018f20:	bd10      	pop	{r4, pc}
 8018f22:	bf00      	nop
 8018f24:	200155b0 	.word	0x200155b0
 8018f28:	20015618 	.word	0x20015618
 8018f2c:	20015680 	.word	0x20015680

08018f30 <global_stdio_init.part.0>:
 8018f30:	b510      	push	{r4, lr}
 8018f32:	4b0b      	ldr	r3, [pc, #44]	@ (8018f60 <global_stdio_init.part.0+0x30>)
 8018f34:	4c0b      	ldr	r4, [pc, #44]	@ (8018f64 <global_stdio_init.part.0+0x34>)
 8018f36:	4a0c      	ldr	r2, [pc, #48]	@ (8018f68 <global_stdio_init.part.0+0x38>)
 8018f38:	601a      	str	r2, [r3, #0]
 8018f3a:	4620      	mov	r0, r4
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	2104      	movs	r1, #4
 8018f40:	f7ff ff94 	bl	8018e6c <std>
 8018f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018f48:	2201      	movs	r2, #1
 8018f4a:	2109      	movs	r1, #9
 8018f4c:	f7ff ff8e 	bl	8018e6c <std>
 8018f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018f54:	2202      	movs	r2, #2
 8018f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f5a:	2112      	movs	r1, #18
 8018f5c:	f7ff bf86 	b.w	8018e6c <std>
 8018f60:	200156e8 	.word	0x200156e8
 8018f64:	200155b0 	.word	0x200155b0
 8018f68:	08018ed9 	.word	0x08018ed9

08018f6c <__sfp_lock_acquire>:
 8018f6c:	4801      	ldr	r0, [pc, #4]	@ (8018f74 <__sfp_lock_acquire+0x8>)
 8018f6e:	f000 bba4 	b.w	80196ba <__retarget_lock_acquire_recursive>
 8018f72:	bf00      	nop
 8018f74:	200156ee 	.word	0x200156ee

08018f78 <__sfp_lock_release>:
 8018f78:	4801      	ldr	r0, [pc, #4]	@ (8018f80 <__sfp_lock_release+0x8>)
 8018f7a:	f000 bb9f 	b.w	80196bc <__retarget_lock_release_recursive>
 8018f7e:	bf00      	nop
 8018f80:	200156ee 	.word	0x200156ee

08018f84 <__sinit>:
 8018f84:	b510      	push	{r4, lr}
 8018f86:	4604      	mov	r4, r0
 8018f88:	f7ff fff0 	bl	8018f6c <__sfp_lock_acquire>
 8018f8c:	6a23      	ldr	r3, [r4, #32]
 8018f8e:	b11b      	cbz	r3, 8018f98 <__sinit+0x14>
 8018f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f94:	f7ff bff0 	b.w	8018f78 <__sfp_lock_release>
 8018f98:	4b04      	ldr	r3, [pc, #16]	@ (8018fac <__sinit+0x28>)
 8018f9a:	6223      	str	r3, [r4, #32]
 8018f9c:	4b04      	ldr	r3, [pc, #16]	@ (8018fb0 <__sinit+0x2c>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d1f5      	bne.n	8018f90 <__sinit+0xc>
 8018fa4:	f7ff ffc4 	bl	8018f30 <global_stdio_init.part.0>
 8018fa8:	e7f2      	b.n	8018f90 <__sinit+0xc>
 8018faa:	bf00      	nop
 8018fac:	08018ef1 	.word	0x08018ef1
 8018fb0:	200156e8 	.word	0x200156e8

08018fb4 <_realloc_r>:
 8018fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fb8:	4680      	mov	r8, r0
 8018fba:	4615      	mov	r5, r2
 8018fbc:	460c      	mov	r4, r1
 8018fbe:	b921      	cbnz	r1, 8018fca <_realloc_r+0x16>
 8018fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fc4:	4611      	mov	r1, r2
 8018fc6:	f7ff be1d 	b.w	8018c04 <_malloc_r>
 8018fca:	b92a      	cbnz	r2, 8018fd8 <_realloc_r+0x24>
 8018fcc:	f000 fbb8 	bl	8019740 <_free_r>
 8018fd0:	2400      	movs	r4, #0
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fd8:	f001 f8d0 	bl	801a17c <_malloc_usable_size_r>
 8018fdc:	4285      	cmp	r5, r0
 8018fde:	4606      	mov	r6, r0
 8018fe0:	d802      	bhi.n	8018fe8 <_realloc_r+0x34>
 8018fe2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018fe6:	d8f4      	bhi.n	8018fd2 <_realloc_r+0x1e>
 8018fe8:	4629      	mov	r1, r5
 8018fea:	4640      	mov	r0, r8
 8018fec:	f7ff fe0a 	bl	8018c04 <_malloc_r>
 8018ff0:	4607      	mov	r7, r0
 8018ff2:	2800      	cmp	r0, #0
 8018ff4:	d0ec      	beq.n	8018fd0 <_realloc_r+0x1c>
 8018ff6:	42b5      	cmp	r5, r6
 8018ff8:	462a      	mov	r2, r5
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	bf28      	it	cs
 8018ffe:	4632      	movcs	r2, r6
 8019000:	f000 fb5d 	bl	80196be <memcpy>
 8019004:	4621      	mov	r1, r4
 8019006:	4640      	mov	r0, r8
 8019008:	f000 fb9a 	bl	8019740 <_free_r>
 801900c:	463c      	mov	r4, r7
 801900e:	e7e0      	b.n	8018fd2 <_realloc_r+0x1e>

08019010 <_strtoul_l.constprop.0>:
 8019010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019014:	4e34      	ldr	r6, [pc, #208]	@ (80190e8 <_strtoul_l.constprop.0+0xd8>)
 8019016:	4686      	mov	lr, r0
 8019018:	460d      	mov	r5, r1
 801901a:	4628      	mov	r0, r5
 801901c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019020:	5d37      	ldrb	r7, [r6, r4]
 8019022:	f017 0708 	ands.w	r7, r7, #8
 8019026:	d1f8      	bne.n	801901a <_strtoul_l.constprop.0+0xa>
 8019028:	2c2d      	cmp	r4, #45	@ 0x2d
 801902a:	d12f      	bne.n	801908c <_strtoul_l.constprop.0+0x7c>
 801902c:	782c      	ldrb	r4, [r5, #0]
 801902e:	2701      	movs	r7, #1
 8019030:	1c85      	adds	r5, r0, #2
 8019032:	f033 0010 	bics.w	r0, r3, #16
 8019036:	d109      	bne.n	801904c <_strtoul_l.constprop.0+0x3c>
 8019038:	2c30      	cmp	r4, #48	@ 0x30
 801903a:	d12c      	bne.n	8019096 <_strtoul_l.constprop.0+0x86>
 801903c:	7828      	ldrb	r0, [r5, #0]
 801903e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019042:	2858      	cmp	r0, #88	@ 0x58
 8019044:	d127      	bne.n	8019096 <_strtoul_l.constprop.0+0x86>
 8019046:	786c      	ldrb	r4, [r5, #1]
 8019048:	2310      	movs	r3, #16
 801904a:	3502      	adds	r5, #2
 801904c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019050:	2600      	movs	r6, #0
 8019052:	fbb8 f8f3 	udiv	r8, r8, r3
 8019056:	fb03 f908 	mul.w	r9, r3, r8
 801905a:	ea6f 0909 	mvn.w	r9, r9
 801905e:	4630      	mov	r0, r6
 8019060:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019064:	f1bc 0f09 	cmp.w	ip, #9
 8019068:	d81c      	bhi.n	80190a4 <_strtoul_l.constprop.0+0x94>
 801906a:	4664      	mov	r4, ip
 801906c:	42a3      	cmp	r3, r4
 801906e:	dd2a      	ble.n	80190c6 <_strtoul_l.constprop.0+0xb6>
 8019070:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019074:	d007      	beq.n	8019086 <_strtoul_l.constprop.0+0x76>
 8019076:	4580      	cmp	r8, r0
 8019078:	d322      	bcc.n	80190c0 <_strtoul_l.constprop.0+0xb0>
 801907a:	d101      	bne.n	8019080 <_strtoul_l.constprop.0+0x70>
 801907c:	45a1      	cmp	r9, r4
 801907e:	db1f      	blt.n	80190c0 <_strtoul_l.constprop.0+0xb0>
 8019080:	fb00 4003 	mla	r0, r0, r3, r4
 8019084:	2601      	movs	r6, #1
 8019086:	f815 4b01 	ldrb.w	r4, [r5], #1
 801908a:	e7e9      	b.n	8019060 <_strtoul_l.constprop.0+0x50>
 801908c:	2c2b      	cmp	r4, #43	@ 0x2b
 801908e:	bf04      	itt	eq
 8019090:	782c      	ldrbeq	r4, [r5, #0]
 8019092:	1c85      	addeq	r5, r0, #2
 8019094:	e7cd      	b.n	8019032 <_strtoul_l.constprop.0+0x22>
 8019096:	2b00      	cmp	r3, #0
 8019098:	d1d8      	bne.n	801904c <_strtoul_l.constprop.0+0x3c>
 801909a:	2c30      	cmp	r4, #48	@ 0x30
 801909c:	bf0c      	ite	eq
 801909e:	2308      	moveq	r3, #8
 80190a0:	230a      	movne	r3, #10
 80190a2:	e7d3      	b.n	801904c <_strtoul_l.constprop.0+0x3c>
 80190a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80190a8:	f1bc 0f19 	cmp.w	ip, #25
 80190ac:	d801      	bhi.n	80190b2 <_strtoul_l.constprop.0+0xa2>
 80190ae:	3c37      	subs	r4, #55	@ 0x37
 80190b0:	e7dc      	b.n	801906c <_strtoul_l.constprop.0+0x5c>
 80190b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80190b6:	f1bc 0f19 	cmp.w	ip, #25
 80190ba:	d804      	bhi.n	80190c6 <_strtoul_l.constprop.0+0xb6>
 80190bc:	3c57      	subs	r4, #87	@ 0x57
 80190be:	e7d5      	b.n	801906c <_strtoul_l.constprop.0+0x5c>
 80190c0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80190c4:	e7df      	b.n	8019086 <_strtoul_l.constprop.0+0x76>
 80190c6:	1c73      	adds	r3, r6, #1
 80190c8:	d106      	bne.n	80190d8 <_strtoul_l.constprop.0+0xc8>
 80190ca:	2322      	movs	r3, #34	@ 0x22
 80190cc:	f8ce 3000 	str.w	r3, [lr]
 80190d0:	4630      	mov	r0, r6
 80190d2:	b932      	cbnz	r2, 80190e2 <_strtoul_l.constprop.0+0xd2>
 80190d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190d8:	b107      	cbz	r7, 80190dc <_strtoul_l.constprop.0+0xcc>
 80190da:	4240      	negs	r0, r0
 80190dc:	2a00      	cmp	r2, #0
 80190de:	d0f9      	beq.n	80190d4 <_strtoul_l.constprop.0+0xc4>
 80190e0:	b106      	cbz	r6, 80190e4 <_strtoul_l.constprop.0+0xd4>
 80190e2:	1e69      	subs	r1, r5, #1
 80190e4:	6011      	str	r1, [r2, #0]
 80190e6:	e7f5      	b.n	80190d4 <_strtoul_l.constprop.0+0xc4>
 80190e8:	0801bb5e 	.word	0x0801bb5e

080190ec <strtoul>:
 80190ec:	4613      	mov	r3, r2
 80190ee:	460a      	mov	r2, r1
 80190f0:	4601      	mov	r1, r0
 80190f2:	4802      	ldr	r0, [pc, #8]	@ (80190fc <strtoul+0x10>)
 80190f4:	6800      	ldr	r0, [r0, #0]
 80190f6:	f7ff bf8b 	b.w	8019010 <_strtoul_l.constprop.0>
 80190fa:	bf00      	nop
 80190fc:	200007cc 	.word	0x200007cc

08019100 <_fwalk_sglue>:
 8019100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019104:	4607      	mov	r7, r0
 8019106:	4688      	mov	r8, r1
 8019108:	4614      	mov	r4, r2
 801910a:	2600      	movs	r6, #0
 801910c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019110:	f1b9 0901 	subs.w	r9, r9, #1
 8019114:	d505      	bpl.n	8019122 <_fwalk_sglue+0x22>
 8019116:	6824      	ldr	r4, [r4, #0]
 8019118:	2c00      	cmp	r4, #0
 801911a:	d1f7      	bne.n	801910c <_fwalk_sglue+0xc>
 801911c:	4630      	mov	r0, r6
 801911e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019122:	89ab      	ldrh	r3, [r5, #12]
 8019124:	2b01      	cmp	r3, #1
 8019126:	d907      	bls.n	8019138 <_fwalk_sglue+0x38>
 8019128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801912c:	3301      	adds	r3, #1
 801912e:	d003      	beq.n	8019138 <_fwalk_sglue+0x38>
 8019130:	4629      	mov	r1, r5
 8019132:	4638      	mov	r0, r7
 8019134:	47c0      	blx	r8
 8019136:	4306      	orrs	r6, r0
 8019138:	3568      	adds	r5, #104	@ 0x68
 801913a:	e7e9      	b.n	8019110 <_fwalk_sglue+0x10>

0801913c <_vsniprintf_r>:
 801913c:	b530      	push	{r4, r5, lr}
 801913e:	4614      	mov	r4, r2
 8019140:	2c00      	cmp	r4, #0
 8019142:	b09b      	sub	sp, #108	@ 0x6c
 8019144:	4605      	mov	r5, r0
 8019146:	461a      	mov	r2, r3
 8019148:	da05      	bge.n	8019156 <_vsniprintf_r+0x1a>
 801914a:	238b      	movs	r3, #139	@ 0x8b
 801914c:	6003      	str	r3, [r0, #0]
 801914e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019152:	b01b      	add	sp, #108	@ 0x6c
 8019154:	bd30      	pop	{r4, r5, pc}
 8019156:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801915a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801915e:	bf14      	ite	ne
 8019160:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019164:	4623      	moveq	r3, r4
 8019166:	9302      	str	r3, [sp, #8]
 8019168:	9305      	str	r3, [sp, #20]
 801916a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801916e:	9100      	str	r1, [sp, #0]
 8019170:	9104      	str	r1, [sp, #16]
 8019172:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019176:	4669      	mov	r1, sp
 8019178:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801917a:	f000 fb87 	bl	801988c <_svfiprintf_r>
 801917e:	1c43      	adds	r3, r0, #1
 8019180:	bfbc      	itt	lt
 8019182:	238b      	movlt	r3, #139	@ 0x8b
 8019184:	602b      	strlt	r3, [r5, #0]
 8019186:	2c00      	cmp	r4, #0
 8019188:	d0e3      	beq.n	8019152 <_vsniprintf_r+0x16>
 801918a:	9b00      	ldr	r3, [sp, #0]
 801918c:	2200      	movs	r2, #0
 801918e:	701a      	strb	r2, [r3, #0]
 8019190:	e7df      	b.n	8019152 <_vsniprintf_r+0x16>
	...

08019194 <vsniprintf>:
 8019194:	b507      	push	{r0, r1, r2, lr}
 8019196:	9300      	str	r3, [sp, #0]
 8019198:	4613      	mov	r3, r2
 801919a:	460a      	mov	r2, r1
 801919c:	4601      	mov	r1, r0
 801919e:	4803      	ldr	r0, [pc, #12]	@ (80191ac <vsniprintf+0x18>)
 80191a0:	6800      	ldr	r0, [r0, #0]
 80191a2:	f7ff ffcb 	bl	801913c <_vsniprintf_r>
 80191a6:	b003      	add	sp, #12
 80191a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80191ac:	200007cc 	.word	0x200007cc

080191b0 <_fwrite_r>:
 80191b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191b4:	9c08      	ldr	r4, [sp, #32]
 80191b6:	468a      	mov	sl, r1
 80191b8:	4690      	mov	r8, r2
 80191ba:	fb02 f903 	mul.w	r9, r2, r3
 80191be:	4606      	mov	r6, r0
 80191c0:	b118      	cbz	r0, 80191ca <_fwrite_r+0x1a>
 80191c2:	6a03      	ldr	r3, [r0, #32]
 80191c4:	b90b      	cbnz	r3, 80191ca <_fwrite_r+0x1a>
 80191c6:	f7ff fedd 	bl	8018f84 <__sinit>
 80191ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80191cc:	07dd      	lsls	r5, r3, #31
 80191ce:	d405      	bmi.n	80191dc <_fwrite_r+0x2c>
 80191d0:	89a3      	ldrh	r3, [r4, #12]
 80191d2:	0598      	lsls	r0, r3, #22
 80191d4:	d402      	bmi.n	80191dc <_fwrite_r+0x2c>
 80191d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80191d8:	f000 fa6f 	bl	80196ba <__retarget_lock_acquire_recursive>
 80191dc:	89a3      	ldrh	r3, [r4, #12]
 80191de:	0719      	lsls	r1, r3, #28
 80191e0:	d516      	bpl.n	8019210 <_fwrite_r+0x60>
 80191e2:	6923      	ldr	r3, [r4, #16]
 80191e4:	b1a3      	cbz	r3, 8019210 <_fwrite_r+0x60>
 80191e6:	2500      	movs	r5, #0
 80191e8:	454d      	cmp	r5, r9
 80191ea:	d01f      	beq.n	801922c <_fwrite_r+0x7c>
 80191ec:	68a7      	ldr	r7, [r4, #8]
 80191ee:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80191f2:	3f01      	subs	r7, #1
 80191f4:	2f00      	cmp	r7, #0
 80191f6:	60a7      	str	r7, [r4, #8]
 80191f8:	da04      	bge.n	8019204 <_fwrite_r+0x54>
 80191fa:	69a3      	ldr	r3, [r4, #24]
 80191fc:	429f      	cmp	r7, r3
 80191fe:	db0f      	blt.n	8019220 <_fwrite_r+0x70>
 8019200:	290a      	cmp	r1, #10
 8019202:	d00d      	beq.n	8019220 <_fwrite_r+0x70>
 8019204:	6823      	ldr	r3, [r4, #0]
 8019206:	1c5a      	adds	r2, r3, #1
 8019208:	6022      	str	r2, [r4, #0]
 801920a:	7019      	strb	r1, [r3, #0]
 801920c:	3501      	adds	r5, #1
 801920e:	e7eb      	b.n	80191e8 <_fwrite_r+0x38>
 8019210:	4621      	mov	r1, r4
 8019212:	4630      	mov	r0, r6
 8019214:	f000 f864 	bl	80192e0 <__swsetup_r>
 8019218:	2800      	cmp	r0, #0
 801921a:	d0e4      	beq.n	80191e6 <_fwrite_r+0x36>
 801921c:	2500      	movs	r5, #0
 801921e:	e005      	b.n	801922c <_fwrite_r+0x7c>
 8019220:	4622      	mov	r2, r4
 8019222:	4630      	mov	r0, r6
 8019224:	f000 f81e 	bl	8019264 <__swbuf_r>
 8019228:	3001      	adds	r0, #1
 801922a:	d1ef      	bne.n	801920c <_fwrite_r+0x5c>
 801922c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801922e:	07da      	lsls	r2, r3, #31
 8019230:	d405      	bmi.n	801923e <_fwrite_r+0x8e>
 8019232:	89a3      	ldrh	r3, [r4, #12]
 8019234:	059b      	lsls	r3, r3, #22
 8019236:	d402      	bmi.n	801923e <_fwrite_r+0x8e>
 8019238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801923a:	f000 fa3f 	bl	80196bc <__retarget_lock_release_recursive>
 801923e:	fbb5 f0f8 	udiv	r0, r5, r8
 8019242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019248 <fwrite>:
 8019248:	b507      	push	{r0, r1, r2, lr}
 801924a:	9300      	str	r3, [sp, #0]
 801924c:	4613      	mov	r3, r2
 801924e:	460a      	mov	r2, r1
 8019250:	4601      	mov	r1, r0
 8019252:	4803      	ldr	r0, [pc, #12]	@ (8019260 <fwrite+0x18>)
 8019254:	6800      	ldr	r0, [r0, #0]
 8019256:	f7ff ffab 	bl	80191b0 <_fwrite_r>
 801925a:	b003      	add	sp, #12
 801925c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019260:	200007cc 	.word	0x200007cc

08019264 <__swbuf_r>:
 8019264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019266:	460e      	mov	r6, r1
 8019268:	4614      	mov	r4, r2
 801926a:	4605      	mov	r5, r0
 801926c:	b118      	cbz	r0, 8019276 <__swbuf_r+0x12>
 801926e:	6a03      	ldr	r3, [r0, #32]
 8019270:	b90b      	cbnz	r3, 8019276 <__swbuf_r+0x12>
 8019272:	f7ff fe87 	bl	8018f84 <__sinit>
 8019276:	69a3      	ldr	r3, [r4, #24]
 8019278:	60a3      	str	r3, [r4, #8]
 801927a:	89a3      	ldrh	r3, [r4, #12]
 801927c:	071a      	lsls	r2, r3, #28
 801927e:	d501      	bpl.n	8019284 <__swbuf_r+0x20>
 8019280:	6923      	ldr	r3, [r4, #16]
 8019282:	b943      	cbnz	r3, 8019296 <__swbuf_r+0x32>
 8019284:	4621      	mov	r1, r4
 8019286:	4628      	mov	r0, r5
 8019288:	f000 f82a 	bl	80192e0 <__swsetup_r>
 801928c:	b118      	cbz	r0, 8019296 <__swbuf_r+0x32>
 801928e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019292:	4638      	mov	r0, r7
 8019294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019296:	6823      	ldr	r3, [r4, #0]
 8019298:	6922      	ldr	r2, [r4, #16]
 801929a:	1a98      	subs	r0, r3, r2
 801929c:	6963      	ldr	r3, [r4, #20]
 801929e:	b2f6      	uxtb	r6, r6
 80192a0:	4283      	cmp	r3, r0
 80192a2:	4637      	mov	r7, r6
 80192a4:	dc05      	bgt.n	80192b2 <__swbuf_r+0x4e>
 80192a6:	4621      	mov	r1, r4
 80192a8:	4628      	mov	r0, r5
 80192aa:	f000 ff3f 	bl	801a12c <_fflush_r>
 80192ae:	2800      	cmp	r0, #0
 80192b0:	d1ed      	bne.n	801928e <__swbuf_r+0x2a>
 80192b2:	68a3      	ldr	r3, [r4, #8]
 80192b4:	3b01      	subs	r3, #1
 80192b6:	60a3      	str	r3, [r4, #8]
 80192b8:	6823      	ldr	r3, [r4, #0]
 80192ba:	1c5a      	adds	r2, r3, #1
 80192bc:	6022      	str	r2, [r4, #0]
 80192be:	701e      	strb	r6, [r3, #0]
 80192c0:	6962      	ldr	r2, [r4, #20]
 80192c2:	1c43      	adds	r3, r0, #1
 80192c4:	429a      	cmp	r2, r3
 80192c6:	d004      	beq.n	80192d2 <__swbuf_r+0x6e>
 80192c8:	89a3      	ldrh	r3, [r4, #12]
 80192ca:	07db      	lsls	r3, r3, #31
 80192cc:	d5e1      	bpl.n	8019292 <__swbuf_r+0x2e>
 80192ce:	2e0a      	cmp	r6, #10
 80192d0:	d1df      	bne.n	8019292 <__swbuf_r+0x2e>
 80192d2:	4621      	mov	r1, r4
 80192d4:	4628      	mov	r0, r5
 80192d6:	f000 ff29 	bl	801a12c <_fflush_r>
 80192da:	2800      	cmp	r0, #0
 80192dc:	d0d9      	beq.n	8019292 <__swbuf_r+0x2e>
 80192de:	e7d6      	b.n	801928e <__swbuf_r+0x2a>

080192e0 <__swsetup_r>:
 80192e0:	b538      	push	{r3, r4, r5, lr}
 80192e2:	4b29      	ldr	r3, [pc, #164]	@ (8019388 <__swsetup_r+0xa8>)
 80192e4:	4605      	mov	r5, r0
 80192e6:	6818      	ldr	r0, [r3, #0]
 80192e8:	460c      	mov	r4, r1
 80192ea:	b118      	cbz	r0, 80192f4 <__swsetup_r+0x14>
 80192ec:	6a03      	ldr	r3, [r0, #32]
 80192ee:	b90b      	cbnz	r3, 80192f4 <__swsetup_r+0x14>
 80192f0:	f7ff fe48 	bl	8018f84 <__sinit>
 80192f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192f8:	0719      	lsls	r1, r3, #28
 80192fa:	d422      	bmi.n	8019342 <__swsetup_r+0x62>
 80192fc:	06da      	lsls	r2, r3, #27
 80192fe:	d407      	bmi.n	8019310 <__swsetup_r+0x30>
 8019300:	2209      	movs	r2, #9
 8019302:	602a      	str	r2, [r5, #0]
 8019304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019308:	81a3      	strh	r3, [r4, #12]
 801930a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801930e:	e033      	b.n	8019378 <__swsetup_r+0x98>
 8019310:	0758      	lsls	r0, r3, #29
 8019312:	d512      	bpl.n	801933a <__swsetup_r+0x5a>
 8019314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019316:	b141      	cbz	r1, 801932a <__swsetup_r+0x4a>
 8019318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801931c:	4299      	cmp	r1, r3
 801931e:	d002      	beq.n	8019326 <__swsetup_r+0x46>
 8019320:	4628      	mov	r0, r5
 8019322:	f000 fa0d 	bl	8019740 <_free_r>
 8019326:	2300      	movs	r3, #0
 8019328:	6363      	str	r3, [r4, #52]	@ 0x34
 801932a:	89a3      	ldrh	r3, [r4, #12]
 801932c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019330:	81a3      	strh	r3, [r4, #12]
 8019332:	2300      	movs	r3, #0
 8019334:	6063      	str	r3, [r4, #4]
 8019336:	6923      	ldr	r3, [r4, #16]
 8019338:	6023      	str	r3, [r4, #0]
 801933a:	89a3      	ldrh	r3, [r4, #12]
 801933c:	f043 0308 	orr.w	r3, r3, #8
 8019340:	81a3      	strh	r3, [r4, #12]
 8019342:	6923      	ldr	r3, [r4, #16]
 8019344:	b94b      	cbnz	r3, 801935a <__swsetup_r+0x7a>
 8019346:	89a3      	ldrh	r3, [r4, #12]
 8019348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801934c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019350:	d003      	beq.n	801935a <__swsetup_r+0x7a>
 8019352:	4621      	mov	r1, r4
 8019354:	4628      	mov	r0, r5
 8019356:	f000 f83f 	bl	80193d8 <__smakebuf_r>
 801935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801935e:	f013 0201 	ands.w	r2, r3, #1
 8019362:	d00a      	beq.n	801937a <__swsetup_r+0x9a>
 8019364:	2200      	movs	r2, #0
 8019366:	60a2      	str	r2, [r4, #8]
 8019368:	6962      	ldr	r2, [r4, #20]
 801936a:	4252      	negs	r2, r2
 801936c:	61a2      	str	r2, [r4, #24]
 801936e:	6922      	ldr	r2, [r4, #16]
 8019370:	b942      	cbnz	r2, 8019384 <__swsetup_r+0xa4>
 8019372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019376:	d1c5      	bne.n	8019304 <__swsetup_r+0x24>
 8019378:	bd38      	pop	{r3, r4, r5, pc}
 801937a:	0799      	lsls	r1, r3, #30
 801937c:	bf58      	it	pl
 801937e:	6962      	ldrpl	r2, [r4, #20]
 8019380:	60a2      	str	r2, [r4, #8]
 8019382:	e7f4      	b.n	801936e <__swsetup_r+0x8e>
 8019384:	2000      	movs	r0, #0
 8019386:	e7f7      	b.n	8019378 <__swsetup_r+0x98>
 8019388:	200007cc 	.word	0x200007cc

0801938c <__swhatbuf_r>:
 801938c:	b570      	push	{r4, r5, r6, lr}
 801938e:	460c      	mov	r4, r1
 8019390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019394:	2900      	cmp	r1, #0
 8019396:	b096      	sub	sp, #88	@ 0x58
 8019398:	4615      	mov	r5, r2
 801939a:	461e      	mov	r6, r3
 801939c:	da0d      	bge.n	80193ba <__swhatbuf_r+0x2e>
 801939e:	89a3      	ldrh	r3, [r4, #12]
 80193a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80193a4:	f04f 0100 	mov.w	r1, #0
 80193a8:	bf14      	ite	ne
 80193aa:	2340      	movne	r3, #64	@ 0x40
 80193ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80193b0:	2000      	movs	r0, #0
 80193b2:	6031      	str	r1, [r6, #0]
 80193b4:	602b      	str	r3, [r5, #0]
 80193b6:	b016      	add	sp, #88	@ 0x58
 80193b8:	bd70      	pop	{r4, r5, r6, pc}
 80193ba:	466a      	mov	r2, sp
 80193bc:	f000 f920 	bl	8019600 <_fstat_r>
 80193c0:	2800      	cmp	r0, #0
 80193c2:	dbec      	blt.n	801939e <__swhatbuf_r+0x12>
 80193c4:	9901      	ldr	r1, [sp, #4]
 80193c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80193ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80193ce:	4259      	negs	r1, r3
 80193d0:	4159      	adcs	r1, r3
 80193d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80193d6:	e7eb      	b.n	80193b0 <__swhatbuf_r+0x24>

080193d8 <__smakebuf_r>:
 80193d8:	898b      	ldrh	r3, [r1, #12]
 80193da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193dc:	079d      	lsls	r5, r3, #30
 80193de:	4606      	mov	r6, r0
 80193e0:	460c      	mov	r4, r1
 80193e2:	d507      	bpl.n	80193f4 <__smakebuf_r+0x1c>
 80193e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80193e8:	6023      	str	r3, [r4, #0]
 80193ea:	6123      	str	r3, [r4, #16]
 80193ec:	2301      	movs	r3, #1
 80193ee:	6163      	str	r3, [r4, #20]
 80193f0:	b003      	add	sp, #12
 80193f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193f4:	ab01      	add	r3, sp, #4
 80193f6:	466a      	mov	r2, sp
 80193f8:	f7ff ffc8 	bl	801938c <__swhatbuf_r>
 80193fc:	9f00      	ldr	r7, [sp, #0]
 80193fe:	4605      	mov	r5, r0
 8019400:	4639      	mov	r1, r7
 8019402:	4630      	mov	r0, r6
 8019404:	f7ff fbfe 	bl	8018c04 <_malloc_r>
 8019408:	b948      	cbnz	r0, 801941e <__smakebuf_r+0x46>
 801940a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801940e:	059a      	lsls	r2, r3, #22
 8019410:	d4ee      	bmi.n	80193f0 <__smakebuf_r+0x18>
 8019412:	f023 0303 	bic.w	r3, r3, #3
 8019416:	f043 0302 	orr.w	r3, r3, #2
 801941a:	81a3      	strh	r3, [r4, #12]
 801941c:	e7e2      	b.n	80193e4 <__smakebuf_r+0xc>
 801941e:	89a3      	ldrh	r3, [r4, #12]
 8019420:	6020      	str	r0, [r4, #0]
 8019422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019426:	81a3      	strh	r3, [r4, #12]
 8019428:	9b01      	ldr	r3, [sp, #4]
 801942a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801942e:	b15b      	cbz	r3, 8019448 <__smakebuf_r+0x70>
 8019430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019434:	4630      	mov	r0, r6
 8019436:	f000 f8f5 	bl	8019624 <_isatty_r>
 801943a:	b128      	cbz	r0, 8019448 <__smakebuf_r+0x70>
 801943c:	89a3      	ldrh	r3, [r4, #12]
 801943e:	f023 0303 	bic.w	r3, r3, #3
 8019442:	f043 0301 	orr.w	r3, r3, #1
 8019446:	81a3      	strh	r3, [r4, #12]
 8019448:	89a3      	ldrh	r3, [r4, #12]
 801944a:	431d      	orrs	r5, r3
 801944c:	81a5      	strh	r5, [r4, #12]
 801944e:	e7cf      	b.n	80193f0 <__smakebuf_r+0x18>

08019450 <iprintf>:
 8019450:	b40f      	push	{r0, r1, r2, r3}
 8019452:	b507      	push	{r0, r1, r2, lr}
 8019454:	4906      	ldr	r1, [pc, #24]	@ (8019470 <iprintf+0x20>)
 8019456:	ab04      	add	r3, sp, #16
 8019458:	6808      	ldr	r0, [r1, #0]
 801945a:	f853 2b04 	ldr.w	r2, [r3], #4
 801945e:	6881      	ldr	r1, [r0, #8]
 8019460:	9301      	str	r3, [sp, #4]
 8019462:	f000 fb39 	bl	8019ad8 <_vfiprintf_r>
 8019466:	b003      	add	sp, #12
 8019468:	f85d eb04 	ldr.w	lr, [sp], #4
 801946c:	b004      	add	sp, #16
 801946e:	4770      	bx	lr
 8019470:	200007cc 	.word	0x200007cc

08019474 <_puts_r>:
 8019474:	6a03      	ldr	r3, [r0, #32]
 8019476:	b570      	push	{r4, r5, r6, lr}
 8019478:	6884      	ldr	r4, [r0, #8]
 801947a:	4605      	mov	r5, r0
 801947c:	460e      	mov	r6, r1
 801947e:	b90b      	cbnz	r3, 8019484 <_puts_r+0x10>
 8019480:	f7ff fd80 	bl	8018f84 <__sinit>
 8019484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019486:	07db      	lsls	r3, r3, #31
 8019488:	d405      	bmi.n	8019496 <_puts_r+0x22>
 801948a:	89a3      	ldrh	r3, [r4, #12]
 801948c:	0598      	lsls	r0, r3, #22
 801948e:	d402      	bmi.n	8019496 <_puts_r+0x22>
 8019490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019492:	f000 f912 	bl	80196ba <__retarget_lock_acquire_recursive>
 8019496:	89a3      	ldrh	r3, [r4, #12]
 8019498:	0719      	lsls	r1, r3, #28
 801949a:	d502      	bpl.n	80194a2 <_puts_r+0x2e>
 801949c:	6923      	ldr	r3, [r4, #16]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d135      	bne.n	801950e <_puts_r+0x9a>
 80194a2:	4621      	mov	r1, r4
 80194a4:	4628      	mov	r0, r5
 80194a6:	f7ff ff1b 	bl	80192e0 <__swsetup_r>
 80194aa:	b380      	cbz	r0, 801950e <_puts_r+0x9a>
 80194ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80194b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80194b2:	07da      	lsls	r2, r3, #31
 80194b4:	d405      	bmi.n	80194c2 <_puts_r+0x4e>
 80194b6:	89a3      	ldrh	r3, [r4, #12]
 80194b8:	059b      	lsls	r3, r3, #22
 80194ba:	d402      	bmi.n	80194c2 <_puts_r+0x4e>
 80194bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80194be:	f000 f8fd 	bl	80196bc <__retarget_lock_release_recursive>
 80194c2:	4628      	mov	r0, r5
 80194c4:	bd70      	pop	{r4, r5, r6, pc}
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	da04      	bge.n	80194d4 <_puts_r+0x60>
 80194ca:	69a2      	ldr	r2, [r4, #24]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	dc17      	bgt.n	8019500 <_puts_r+0x8c>
 80194d0:	290a      	cmp	r1, #10
 80194d2:	d015      	beq.n	8019500 <_puts_r+0x8c>
 80194d4:	6823      	ldr	r3, [r4, #0]
 80194d6:	1c5a      	adds	r2, r3, #1
 80194d8:	6022      	str	r2, [r4, #0]
 80194da:	7019      	strb	r1, [r3, #0]
 80194dc:	68a3      	ldr	r3, [r4, #8]
 80194de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80194e2:	3b01      	subs	r3, #1
 80194e4:	60a3      	str	r3, [r4, #8]
 80194e6:	2900      	cmp	r1, #0
 80194e8:	d1ed      	bne.n	80194c6 <_puts_r+0x52>
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	da11      	bge.n	8019512 <_puts_r+0x9e>
 80194ee:	4622      	mov	r2, r4
 80194f0:	210a      	movs	r1, #10
 80194f2:	4628      	mov	r0, r5
 80194f4:	f7ff feb6 	bl	8019264 <__swbuf_r>
 80194f8:	3001      	adds	r0, #1
 80194fa:	d0d7      	beq.n	80194ac <_puts_r+0x38>
 80194fc:	250a      	movs	r5, #10
 80194fe:	e7d7      	b.n	80194b0 <_puts_r+0x3c>
 8019500:	4622      	mov	r2, r4
 8019502:	4628      	mov	r0, r5
 8019504:	f7ff feae 	bl	8019264 <__swbuf_r>
 8019508:	3001      	adds	r0, #1
 801950a:	d1e7      	bne.n	80194dc <_puts_r+0x68>
 801950c:	e7ce      	b.n	80194ac <_puts_r+0x38>
 801950e:	3e01      	subs	r6, #1
 8019510:	e7e4      	b.n	80194dc <_puts_r+0x68>
 8019512:	6823      	ldr	r3, [r4, #0]
 8019514:	1c5a      	adds	r2, r3, #1
 8019516:	6022      	str	r2, [r4, #0]
 8019518:	220a      	movs	r2, #10
 801951a:	701a      	strb	r2, [r3, #0]
 801951c:	e7ee      	b.n	80194fc <_puts_r+0x88>
	...

08019520 <puts>:
 8019520:	4b02      	ldr	r3, [pc, #8]	@ (801952c <puts+0xc>)
 8019522:	4601      	mov	r1, r0
 8019524:	6818      	ldr	r0, [r3, #0]
 8019526:	f7ff bfa5 	b.w	8019474 <_puts_r>
 801952a:	bf00      	nop
 801952c:	200007cc 	.word	0x200007cc

08019530 <strchr>:
 8019530:	b2c9      	uxtb	r1, r1
 8019532:	4603      	mov	r3, r0
 8019534:	4618      	mov	r0, r3
 8019536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801953a:	b112      	cbz	r2, 8019542 <strchr+0x12>
 801953c:	428a      	cmp	r2, r1
 801953e:	d1f9      	bne.n	8019534 <strchr+0x4>
 8019540:	4770      	bx	lr
 8019542:	2900      	cmp	r1, #0
 8019544:	bf18      	it	ne
 8019546:	2000      	movne	r0, #0
 8019548:	4770      	bx	lr

0801954a <strncmp>:
 801954a:	b510      	push	{r4, lr}
 801954c:	b16a      	cbz	r2, 801956a <strncmp+0x20>
 801954e:	3901      	subs	r1, #1
 8019550:	1884      	adds	r4, r0, r2
 8019552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019556:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801955a:	429a      	cmp	r2, r3
 801955c:	d103      	bne.n	8019566 <strncmp+0x1c>
 801955e:	42a0      	cmp	r0, r4
 8019560:	d001      	beq.n	8019566 <strncmp+0x1c>
 8019562:	2a00      	cmp	r2, #0
 8019564:	d1f5      	bne.n	8019552 <strncmp+0x8>
 8019566:	1ad0      	subs	r0, r2, r3
 8019568:	bd10      	pop	{r4, pc}
 801956a:	4610      	mov	r0, r2
 801956c:	e7fc      	b.n	8019568 <strncmp+0x1e>

0801956e <strstr>:
 801956e:	780a      	ldrb	r2, [r1, #0]
 8019570:	b570      	push	{r4, r5, r6, lr}
 8019572:	b96a      	cbnz	r2, 8019590 <strstr+0x22>
 8019574:	bd70      	pop	{r4, r5, r6, pc}
 8019576:	429a      	cmp	r2, r3
 8019578:	d109      	bne.n	801958e <strstr+0x20>
 801957a:	460c      	mov	r4, r1
 801957c:	4605      	mov	r5, r0
 801957e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019582:	2b00      	cmp	r3, #0
 8019584:	d0f6      	beq.n	8019574 <strstr+0x6>
 8019586:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801958a:	429e      	cmp	r6, r3
 801958c:	d0f7      	beq.n	801957e <strstr+0x10>
 801958e:	3001      	adds	r0, #1
 8019590:	7803      	ldrb	r3, [r0, #0]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d1ef      	bne.n	8019576 <strstr+0x8>
 8019596:	4618      	mov	r0, r3
 8019598:	e7ec      	b.n	8019574 <strstr+0x6>

0801959a <memcmp>:
 801959a:	b510      	push	{r4, lr}
 801959c:	3901      	subs	r1, #1
 801959e:	4402      	add	r2, r0
 80195a0:	4290      	cmp	r0, r2
 80195a2:	d101      	bne.n	80195a8 <memcmp+0xe>
 80195a4:	2000      	movs	r0, #0
 80195a6:	e005      	b.n	80195b4 <memcmp+0x1a>
 80195a8:	7803      	ldrb	r3, [r0, #0]
 80195aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80195ae:	42a3      	cmp	r3, r4
 80195b0:	d001      	beq.n	80195b6 <memcmp+0x1c>
 80195b2:	1b18      	subs	r0, r3, r4
 80195b4:	bd10      	pop	{r4, pc}
 80195b6:	3001      	adds	r0, #1
 80195b8:	e7f2      	b.n	80195a0 <memcmp+0x6>

080195ba <memmove>:
 80195ba:	4288      	cmp	r0, r1
 80195bc:	b510      	push	{r4, lr}
 80195be:	eb01 0402 	add.w	r4, r1, r2
 80195c2:	d902      	bls.n	80195ca <memmove+0x10>
 80195c4:	4284      	cmp	r4, r0
 80195c6:	4623      	mov	r3, r4
 80195c8:	d807      	bhi.n	80195da <memmove+0x20>
 80195ca:	1e43      	subs	r3, r0, #1
 80195cc:	42a1      	cmp	r1, r4
 80195ce:	d008      	beq.n	80195e2 <memmove+0x28>
 80195d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80195d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80195d8:	e7f8      	b.n	80195cc <memmove+0x12>
 80195da:	4402      	add	r2, r0
 80195dc:	4601      	mov	r1, r0
 80195de:	428a      	cmp	r2, r1
 80195e0:	d100      	bne.n	80195e4 <memmove+0x2a>
 80195e2:	bd10      	pop	{r4, pc}
 80195e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80195e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80195ec:	e7f7      	b.n	80195de <memmove+0x24>

080195ee <memset>:
 80195ee:	4402      	add	r2, r0
 80195f0:	4603      	mov	r3, r0
 80195f2:	4293      	cmp	r3, r2
 80195f4:	d100      	bne.n	80195f8 <memset+0xa>
 80195f6:	4770      	bx	lr
 80195f8:	f803 1b01 	strb.w	r1, [r3], #1
 80195fc:	e7f9      	b.n	80195f2 <memset+0x4>
	...

08019600 <_fstat_r>:
 8019600:	b538      	push	{r3, r4, r5, lr}
 8019602:	4d07      	ldr	r5, [pc, #28]	@ (8019620 <_fstat_r+0x20>)
 8019604:	2300      	movs	r3, #0
 8019606:	4604      	mov	r4, r0
 8019608:	4608      	mov	r0, r1
 801960a:	4611      	mov	r1, r2
 801960c:	602b      	str	r3, [r5, #0]
 801960e:	f7e8 ff6f 	bl	80024f0 <_fstat>
 8019612:	1c43      	adds	r3, r0, #1
 8019614:	d102      	bne.n	801961c <_fstat_r+0x1c>
 8019616:	682b      	ldr	r3, [r5, #0]
 8019618:	b103      	cbz	r3, 801961c <_fstat_r+0x1c>
 801961a:	6023      	str	r3, [r4, #0]
 801961c:	bd38      	pop	{r3, r4, r5, pc}
 801961e:	bf00      	nop
 8019620:	200156f0 	.word	0x200156f0

08019624 <_isatty_r>:
 8019624:	b538      	push	{r3, r4, r5, lr}
 8019626:	4d06      	ldr	r5, [pc, #24]	@ (8019640 <_isatty_r+0x1c>)
 8019628:	2300      	movs	r3, #0
 801962a:	4604      	mov	r4, r0
 801962c:	4608      	mov	r0, r1
 801962e:	602b      	str	r3, [r5, #0]
 8019630:	f7e8 ff6e 	bl	8002510 <_isatty>
 8019634:	1c43      	adds	r3, r0, #1
 8019636:	d102      	bne.n	801963e <_isatty_r+0x1a>
 8019638:	682b      	ldr	r3, [r5, #0]
 801963a:	b103      	cbz	r3, 801963e <_isatty_r+0x1a>
 801963c:	6023      	str	r3, [r4, #0]
 801963e:	bd38      	pop	{r3, r4, r5, pc}
 8019640:	200156f0 	.word	0x200156f0

08019644 <_sbrk_r>:
 8019644:	b538      	push	{r3, r4, r5, lr}
 8019646:	4d06      	ldr	r5, [pc, #24]	@ (8019660 <_sbrk_r+0x1c>)
 8019648:	2300      	movs	r3, #0
 801964a:	4604      	mov	r4, r0
 801964c:	4608      	mov	r0, r1
 801964e:	602b      	str	r3, [r5, #0]
 8019650:	f7e8 ff76 	bl	8002540 <_sbrk>
 8019654:	1c43      	adds	r3, r0, #1
 8019656:	d102      	bne.n	801965e <_sbrk_r+0x1a>
 8019658:	682b      	ldr	r3, [r5, #0]
 801965a:	b103      	cbz	r3, 801965e <_sbrk_r+0x1a>
 801965c:	6023      	str	r3, [r4, #0]
 801965e:	bd38      	pop	{r3, r4, r5, pc}
 8019660:	200156f0 	.word	0x200156f0

08019664 <__errno>:
 8019664:	4b01      	ldr	r3, [pc, #4]	@ (801966c <__errno+0x8>)
 8019666:	6818      	ldr	r0, [r3, #0]
 8019668:	4770      	bx	lr
 801966a:	bf00      	nop
 801966c:	200007cc 	.word	0x200007cc

08019670 <__libc_init_array>:
 8019670:	b570      	push	{r4, r5, r6, lr}
 8019672:	4d0d      	ldr	r5, [pc, #52]	@ (80196a8 <__libc_init_array+0x38>)
 8019674:	4c0d      	ldr	r4, [pc, #52]	@ (80196ac <__libc_init_array+0x3c>)
 8019676:	1b64      	subs	r4, r4, r5
 8019678:	10a4      	asrs	r4, r4, #2
 801967a:	2600      	movs	r6, #0
 801967c:	42a6      	cmp	r6, r4
 801967e:	d109      	bne.n	8019694 <__libc_init_array+0x24>
 8019680:	4d0b      	ldr	r5, [pc, #44]	@ (80196b0 <__libc_init_array+0x40>)
 8019682:	4c0c      	ldr	r4, [pc, #48]	@ (80196b4 <__libc_init_array+0x44>)
 8019684:	f001 f8f4 	bl	801a870 <_init>
 8019688:	1b64      	subs	r4, r4, r5
 801968a:	10a4      	asrs	r4, r4, #2
 801968c:	2600      	movs	r6, #0
 801968e:	42a6      	cmp	r6, r4
 8019690:	d105      	bne.n	801969e <__libc_init_array+0x2e>
 8019692:	bd70      	pop	{r4, r5, r6, pc}
 8019694:	f855 3b04 	ldr.w	r3, [r5], #4
 8019698:	4798      	blx	r3
 801969a:	3601      	adds	r6, #1
 801969c:	e7ee      	b.n	801967c <__libc_init_array+0xc>
 801969e:	f855 3b04 	ldr.w	r3, [r5], #4
 80196a2:	4798      	blx	r3
 80196a4:	3601      	adds	r6, #1
 80196a6:	e7f2      	b.n	801968e <__libc_init_array+0x1e>
 80196a8:	0801bd48 	.word	0x0801bd48
 80196ac:	0801bd48 	.word	0x0801bd48
 80196b0:	0801bd48 	.word	0x0801bd48
 80196b4:	0801bd58 	.word	0x0801bd58

080196b8 <__retarget_lock_init_recursive>:
 80196b8:	4770      	bx	lr

080196ba <__retarget_lock_acquire_recursive>:
 80196ba:	4770      	bx	lr

080196bc <__retarget_lock_release_recursive>:
 80196bc:	4770      	bx	lr

080196be <memcpy>:
 80196be:	440a      	add	r2, r1
 80196c0:	4291      	cmp	r1, r2
 80196c2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80196c6:	d100      	bne.n	80196ca <memcpy+0xc>
 80196c8:	4770      	bx	lr
 80196ca:	b510      	push	{r4, lr}
 80196cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80196d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80196d4:	4291      	cmp	r1, r2
 80196d6:	d1f9      	bne.n	80196cc <memcpy+0xe>
 80196d8:	bd10      	pop	{r4, pc}

080196da <strcpy>:
 80196da:	4603      	mov	r3, r0
 80196dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80196e0:	f803 2b01 	strb.w	r2, [r3], #1
 80196e4:	2a00      	cmp	r2, #0
 80196e6:	d1f9      	bne.n	80196dc <strcpy+0x2>
 80196e8:	4770      	bx	lr
	...

080196ec <__assert_func>:
 80196ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80196ee:	4614      	mov	r4, r2
 80196f0:	461a      	mov	r2, r3
 80196f2:	4b09      	ldr	r3, [pc, #36]	@ (8019718 <__assert_func+0x2c>)
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	4605      	mov	r5, r0
 80196f8:	68d8      	ldr	r0, [r3, #12]
 80196fa:	b954      	cbnz	r4, 8019712 <__assert_func+0x26>
 80196fc:	4b07      	ldr	r3, [pc, #28]	@ (801971c <__assert_func+0x30>)
 80196fe:	461c      	mov	r4, r3
 8019700:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019704:	9100      	str	r1, [sp, #0]
 8019706:	462b      	mov	r3, r5
 8019708:	4905      	ldr	r1, [pc, #20]	@ (8019720 <__assert_func+0x34>)
 801970a:	f000 fd83 	bl	801a214 <fiprintf>
 801970e:	f000 fdd9 	bl	801a2c4 <abort>
 8019712:	4b04      	ldr	r3, [pc, #16]	@ (8019724 <__assert_func+0x38>)
 8019714:	e7f4      	b.n	8019700 <__assert_func+0x14>
 8019716:	bf00      	nop
 8019718:	200007cc 	.word	0x200007cc
 801971c:	0801bc99 	.word	0x0801bc99
 8019720:	0801bc6b 	.word	0x0801bc6b
 8019724:	0801bc5e 	.word	0x0801bc5e

08019728 <__env_lock>:
 8019728:	4801      	ldr	r0, [pc, #4]	@ (8019730 <__env_lock+0x8>)
 801972a:	f7ff bfc6 	b.w	80196ba <__retarget_lock_acquire_recursive>
 801972e:	bf00      	nop
 8019730:	200156ec 	.word	0x200156ec

08019734 <__env_unlock>:
 8019734:	4801      	ldr	r0, [pc, #4]	@ (801973c <__env_unlock+0x8>)
 8019736:	f7ff bfc1 	b.w	80196bc <__retarget_lock_release_recursive>
 801973a:	bf00      	nop
 801973c:	200156ec 	.word	0x200156ec

08019740 <_free_r>:
 8019740:	b538      	push	{r3, r4, r5, lr}
 8019742:	4605      	mov	r5, r0
 8019744:	2900      	cmp	r1, #0
 8019746:	d041      	beq.n	80197cc <_free_r+0x8c>
 8019748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801974c:	1f0c      	subs	r4, r1, #4
 801974e:	2b00      	cmp	r3, #0
 8019750:	bfb8      	it	lt
 8019752:	18e4      	addlt	r4, r4, r3
 8019754:	f7ff fb0a 	bl	8018d6c <__malloc_lock>
 8019758:	4a1d      	ldr	r2, [pc, #116]	@ (80197d0 <_free_r+0x90>)
 801975a:	6813      	ldr	r3, [r2, #0]
 801975c:	b933      	cbnz	r3, 801976c <_free_r+0x2c>
 801975e:	6063      	str	r3, [r4, #4]
 8019760:	6014      	str	r4, [r2, #0]
 8019762:	4628      	mov	r0, r5
 8019764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019768:	f7ff bb06 	b.w	8018d78 <__malloc_unlock>
 801976c:	42a3      	cmp	r3, r4
 801976e:	d908      	bls.n	8019782 <_free_r+0x42>
 8019770:	6820      	ldr	r0, [r4, #0]
 8019772:	1821      	adds	r1, r4, r0
 8019774:	428b      	cmp	r3, r1
 8019776:	bf01      	itttt	eq
 8019778:	6819      	ldreq	r1, [r3, #0]
 801977a:	685b      	ldreq	r3, [r3, #4]
 801977c:	1809      	addeq	r1, r1, r0
 801977e:	6021      	streq	r1, [r4, #0]
 8019780:	e7ed      	b.n	801975e <_free_r+0x1e>
 8019782:	461a      	mov	r2, r3
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	b10b      	cbz	r3, 801978c <_free_r+0x4c>
 8019788:	42a3      	cmp	r3, r4
 801978a:	d9fa      	bls.n	8019782 <_free_r+0x42>
 801978c:	6811      	ldr	r1, [r2, #0]
 801978e:	1850      	adds	r0, r2, r1
 8019790:	42a0      	cmp	r0, r4
 8019792:	d10b      	bne.n	80197ac <_free_r+0x6c>
 8019794:	6820      	ldr	r0, [r4, #0]
 8019796:	4401      	add	r1, r0
 8019798:	1850      	adds	r0, r2, r1
 801979a:	4283      	cmp	r3, r0
 801979c:	6011      	str	r1, [r2, #0]
 801979e:	d1e0      	bne.n	8019762 <_free_r+0x22>
 80197a0:	6818      	ldr	r0, [r3, #0]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	6053      	str	r3, [r2, #4]
 80197a6:	4408      	add	r0, r1
 80197a8:	6010      	str	r0, [r2, #0]
 80197aa:	e7da      	b.n	8019762 <_free_r+0x22>
 80197ac:	d902      	bls.n	80197b4 <_free_r+0x74>
 80197ae:	230c      	movs	r3, #12
 80197b0:	602b      	str	r3, [r5, #0]
 80197b2:	e7d6      	b.n	8019762 <_free_r+0x22>
 80197b4:	6820      	ldr	r0, [r4, #0]
 80197b6:	1821      	adds	r1, r4, r0
 80197b8:	428b      	cmp	r3, r1
 80197ba:	bf04      	itt	eq
 80197bc:	6819      	ldreq	r1, [r3, #0]
 80197be:	685b      	ldreq	r3, [r3, #4]
 80197c0:	6063      	str	r3, [r4, #4]
 80197c2:	bf04      	itt	eq
 80197c4:	1809      	addeq	r1, r1, r0
 80197c6:	6021      	streq	r1, [r4, #0]
 80197c8:	6054      	str	r4, [r2, #4]
 80197ca:	e7ca      	b.n	8019762 <_free_r+0x22>
 80197cc:	bd38      	pop	{r3, r4, r5, pc}
 80197ce:	bf00      	nop
 80197d0:	200155ac 	.word	0x200155ac

080197d4 <__ssputs_r>:
 80197d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197d8:	688e      	ldr	r6, [r1, #8]
 80197da:	461f      	mov	r7, r3
 80197dc:	42be      	cmp	r6, r7
 80197de:	680b      	ldr	r3, [r1, #0]
 80197e0:	4682      	mov	sl, r0
 80197e2:	460c      	mov	r4, r1
 80197e4:	4690      	mov	r8, r2
 80197e6:	d82d      	bhi.n	8019844 <__ssputs_r+0x70>
 80197e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80197ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80197f0:	d026      	beq.n	8019840 <__ssputs_r+0x6c>
 80197f2:	6965      	ldr	r5, [r4, #20]
 80197f4:	6909      	ldr	r1, [r1, #16]
 80197f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80197fa:	eba3 0901 	sub.w	r9, r3, r1
 80197fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019802:	1c7b      	adds	r3, r7, #1
 8019804:	444b      	add	r3, r9
 8019806:	106d      	asrs	r5, r5, #1
 8019808:	429d      	cmp	r5, r3
 801980a:	bf38      	it	cc
 801980c:	461d      	movcc	r5, r3
 801980e:	0553      	lsls	r3, r2, #21
 8019810:	d527      	bpl.n	8019862 <__ssputs_r+0x8e>
 8019812:	4629      	mov	r1, r5
 8019814:	f7ff f9f6 	bl	8018c04 <_malloc_r>
 8019818:	4606      	mov	r6, r0
 801981a:	b360      	cbz	r0, 8019876 <__ssputs_r+0xa2>
 801981c:	6921      	ldr	r1, [r4, #16]
 801981e:	464a      	mov	r2, r9
 8019820:	f7ff ff4d 	bl	80196be <memcpy>
 8019824:	89a3      	ldrh	r3, [r4, #12]
 8019826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801982a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801982e:	81a3      	strh	r3, [r4, #12]
 8019830:	6126      	str	r6, [r4, #16]
 8019832:	6165      	str	r5, [r4, #20]
 8019834:	444e      	add	r6, r9
 8019836:	eba5 0509 	sub.w	r5, r5, r9
 801983a:	6026      	str	r6, [r4, #0]
 801983c:	60a5      	str	r5, [r4, #8]
 801983e:	463e      	mov	r6, r7
 8019840:	42be      	cmp	r6, r7
 8019842:	d900      	bls.n	8019846 <__ssputs_r+0x72>
 8019844:	463e      	mov	r6, r7
 8019846:	6820      	ldr	r0, [r4, #0]
 8019848:	4632      	mov	r2, r6
 801984a:	4641      	mov	r1, r8
 801984c:	f7ff feb5 	bl	80195ba <memmove>
 8019850:	68a3      	ldr	r3, [r4, #8]
 8019852:	1b9b      	subs	r3, r3, r6
 8019854:	60a3      	str	r3, [r4, #8]
 8019856:	6823      	ldr	r3, [r4, #0]
 8019858:	4433      	add	r3, r6
 801985a:	6023      	str	r3, [r4, #0]
 801985c:	2000      	movs	r0, #0
 801985e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019862:	462a      	mov	r2, r5
 8019864:	f7ff fba6 	bl	8018fb4 <_realloc_r>
 8019868:	4606      	mov	r6, r0
 801986a:	2800      	cmp	r0, #0
 801986c:	d1e0      	bne.n	8019830 <__ssputs_r+0x5c>
 801986e:	6921      	ldr	r1, [r4, #16]
 8019870:	4650      	mov	r0, sl
 8019872:	f7ff ff65 	bl	8019740 <_free_r>
 8019876:	230c      	movs	r3, #12
 8019878:	f8ca 3000 	str.w	r3, [sl]
 801987c:	89a3      	ldrh	r3, [r4, #12]
 801987e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019882:	81a3      	strh	r3, [r4, #12]
 8019884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019888:	e7e9      	b.n	801985e <__ssputs_r+0x8a>
	...

0801988c <_svfiprintf_r>:
 801988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019890:	4698      	mov	r8, r3
 8019892:	898b      	ldrh	r3, [r1, #12]
 8019894:	061b      	lsls	r3, r3, #24
 8019896:	b09d      	sub	sp, #116	@ 0x74
 8019898:	4607      	mov	r7, r0
 801989a:	460d      	mov	r5, r1
 801989c:	4614      	mov	r4, r2
 801989e:	d510      	bpl.n	80198c2 <_svfiprintf_r+0x36>
 80198a0:	690b      	ldr	r3, [r1, #16]
 80198a2:	b973      	cbnz	r3, 80198c2 <_svfiprintf_r+0x36>
 80198a4:	2140      	movs	r1, #64	@ 0x40
 80198a6:	f7ff f9ad 	bl	8018c04 <_malloc_r>
 80198aa:	6028      	str	r0, [r5, #0]
 80198ac:	6128      	str	r0, [r5, #16]
 80198ae:	b930      	cbnz	r0, 80198be <_svfiprintf_r+0x32>
 80198b0:	230c      	movs	r3, #12
 80198b2:	603b      	str	r3, [r7, #0]
 80198b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80198b8:	b01d      	add	sp, #116	@ 0x74
 80198ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198be:	2340      	movs	r3, #64	@ 0x40
 80198c0:	616b      	str	r3, [r5, #20]
 80198c2:	2300      	movs	r3, #0
 80198c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80198c6:	2320      	movs	r3, #32
 80198c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80198cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80198d0:	2330      	movs	r3, #48	@ 0x30
 80198d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019a70 <_svfiprintf_r+0x1e4>
 80198d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80198da:	f04f 0901 	mov.w	r9, #1
 80198de:	4623      	mov	r3, r4
 80198e0:	469a      	mov	sl, r3
 80198e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198e6:	b10a      	cbz	r2, 80198ec <_svfiprintf_r+0x60>
 80198e8:	2a25      	cmp	r2, #37	@ 0x25
 80198ea:	d1f9      	bne.n	80198e0 <_svfiprintf_r+0x54>
 80198ec:	ebba 0b04 	subs.w	fp, sl, r4
 80198f0:	d00b      	beq.n	801990a <_svfiprintf_r+0x7e>
 80198f2:	465b      	mov	r3, fp
 80198f4:	4622      	mov	r2, r4
 80198f6:	4629      	mov	r1, r5
 80198f8:	4638      	mov	r0, r7
 80198fa:	f7ff ff6b 	bl	80197d4 <__ssputs_r>
 80198fe:	3001      	adds	r0, #1
 8019900:	f000 80a7 	beq.w	8019a52 <_svfiprintf_r+0x1c6>
 8019904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019906:	445a      	add	r2, fp
 8019908:	9209      	str	r2, [sp, #36]	@ 0x24
 801990a:	f89a 3000 	ldrb.w	r3, [sl]
 801990e:	2b00      	cmp	r3, #0
 8019910:	f000 809f 	beq.w	8019a52 <_svfiprintf_r+0x1c6>
 8019914:	2300      	movs	r3, #0
 8019916:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801991a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801991e:	f10a 0a01 	add.w	sl, sl, #1
 8019922:	9304      	str	r3, [sp, #16]
 8019924:	9307      	str	r3, [sp, #28]
 8019926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801992a:	931a      	str	r3, [sp, #104]	@ 0x68
 801992c:	4654      	mov	r4, sl
 801992e:	2205      	movs	r2, #5
 8019930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019934:	484e      	ldr	r0, [pc, #312]	@ (8019a70 <_svfiprintf_r+0x1e4>)
 8019936:	f7e6 fc7b 	bl	8000230 <memchr>
 801993a:	9a04      	ldr	r2, [sp, #16]
 801993c:	b9d8      	cbnz	r0, 8019976 <_svfiprintf_r+0xea>
 801993e:	06d0      	lsls	r0, r2, #27
 8019940:	bf44      	itt	mi
 8019942:	2320      	movmi	r3, #32
 8019944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019948:	0711      	lsls	r1, r2, #28
 801994a:	bf44      	itt	mi
 801994c:	232b      	movmi	r3, #43	@ 0x2b
 801994e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019952:	f89a 3000 	ldrb.w	r3, [sl]
 8019956:	2b2a      	cmp	r3, #42	@ 0x2a
 8019958:	d015      	beq.n	8019986 <_svfiprintf_r+0xfa>
 801995a:	9a07      	ldr	r2, [sp, #28]
 801995c:	4654      	mov	r4, sl
 801995e:	2000      	movs	r0, #0
 8019960:	f04f 0c0a 	mov.w	ip, #10
 8019964:	4621      	mov	r1, r4
 8019966:	f811 3b01 	ldrb.w	r3, [r1], #1
 801996a:	3b30      	subs	r3, #48	@ 0x30
 801996c:	2b09      	cmp	r3, #9
 801996e:	d94b      	bls.n	8019a08 <_svfiprintf_r+0x17c>
 8019970:	b1b0      	cbz	r0, 80199a0 <_svfiprintf_r+0x114>
 8019972:	9207      	str	r2, [sp, #28]
 8019974:	e014      	b.n	80199a0 <_svfiprintf_r+0x114>
 8019976:	eba0 0308 	sub.w	r3, r0, r8
 801997a:	fa09 f303 	lsl.w	r3, r9, r3
 801997e:	4313      	orrs	r3, r2
 8019980:	9304      	str	r3, [sp, #16]
 8019982:	46a2      	mov	sl, r4
 8019984:	e7d2      	b.n	801992c <_svfiprintf_r+0xa0>
 8019986:	9b03      	ldr	r3, [sp, #12]
 8019988:	1d19      	adds	r1, r3, #4
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	9103      	str	r1, [sp, #12]
 801998e:	2b00      	cmp	r3, #0
 8019990:	bfbb      	ittet	lt
 8019992:	425b      	neglt	r3, r3
 8019994:	f042 0202 	orrlt.w	r2, r2, #2
 8019998:	9307      	strge	r3, [sp, #28]
 801999a:	9307      	strlt	r3, [sp, #28]
 801999c:	bfb8      	it	lt
 801999e:	9204      	strlt	r2, [sp, #16]
 80199a0:	7823      	ldrb	r3, [r4, #0]
 80199a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80199a4:	d10a      	bne.n	80199bc <_svfiprintf_r+0x130>
 80199a6:	7863      	ldrb	r3, [r4, #1]
 80199a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80199aa:	d132      	bne.n	8019a12 <_svfiprintf_r+0x186>
 80199ac:	9b03      	ldr	r3, [sp, #12]
 80199ae:	1d1a      	adds	r2, r3, #4
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	9203      	str	r2, [sp, #12]
 80199b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80199b8:	3402      	adds	r4, #2
 80199ba:	9305      	str	r3, [sp, #20]
 80199bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019a80 <_svfiprintf_r+0x1f4>
 80199c0:	7821      	ldrb	r1, [r4, #0]
 80199c2:	2203      	movs	r2, #3
 80199c4:	4650      	mov	r0, sl
 80199c6:	f7e6 fc33 	bl	8000230 <memchr>
 80199ca:	b138      	cbz	r0, 80199dc <_svfiprintf_r+0x150>
 80199cc:	9b04      	ldr	r3, [sp, #16]
 80199ce:	eba0 000a 	sub.w	r0, r0, sl
 80199d2:	2240      	movs	r2, #64	@ 0x40
 80199d4:	4082      	lsls	r2, r0
 80199d6:	4313      	orrs	r3, r2
 80199d8:	3401      	adds	r4, #1
 80199da:	9304      	str	r3, [sp, #16]
 80199dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199e0:	4824      	ldr	r0, [pc, #144]	@ (8019a74 <_svfiprintf_r+0x1e8>)
 80199e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80199e6:	2206      	movs	r2, #6
 80199e8:	f7e6 fc22 	bl	8000230 <memchr>
 80199ec:	2800      	cmp	r0, #0
 80199ee:	d036      	beq.n	8019a5e <_svfiprintf_r+0x1d2>
 80199f0:	4b21      	ldr	r3, [pc, #132]	@ (8019a78 <_svfiprintf_r+0x1ec>)
 80199f2:	bb1b      	cbnz	r3, 8019a3c <_svfiprintf_r+0x1b0>
 80199f4:	9b03      	ldr	r3, [sp, #12]
 80199f6:	3307      	adds	r3, #7
 80199f8:	f023 0307 	bic.w	r3, r3, #7
 80199fc:	3308      	adds	r3, #8
 80199fe:	9303      	str	r3, [sp, #12]
 8019a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a02:	4433      	add	r3, r6
 8019a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a06:	e76a      	b.n	80198de <_svfiprintf_r+0x52>
 8019a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a0c:	460c      	mov	r4, r1
 8019a0e:	2001      	movs	r0, #1
 8019a10:	e7a8      	b.n	8019964 <_svfiprintf_r+0xd8>
 8019a12:	2300      	movs	r3, #0
 8019a14:	3401      	adds	r4, #1
 8019a16:	9305      	str	r3, [sp, #20]
 8019a18:	4619      	mov	r1, r3
 8019a1a:	f04f 0c0a 	mov.w	ip, #10
 8019a1e:	4620      	mov	r0, r4
 8019a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a24:	3a30      	subs	r2, #48	@ 0x30
 8019a26:	2a09      	cmp	r2, #9
 8019a28:	d903      	bls.n	8019a32 <_svfiprintf_r+0x1a6>
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d0c6      	beq.n	80199bc <_svfiprintf_r+0x130>
 8019a2e:	9105      	str	r1, [sp, #20]
 8019a30:	e7c4      	b.n	80199bc <_svfiprintf_r+0x130>
 8019a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a36:	4604      	mov	r4, r0
 8019a38:	2301      	movs	r3, #1
 8019a3a:	e7f0      	b.n	8019a1e <_svfiprintf_r+0x192>
 8019a3c:	ab03      	add	r3, sp, #12
 8019a3e:	9300      	str	r3, [sp, #0]
 8019a40:	462a      	mov	r2, r5
 8019a42:	4b0e      	ldr	r3, [pc, #56]	@ (8019a7c <_svfiprintf_r+0x1f0>)
 8019a44:	a904      	add	r1, sp, #16
 8019a46:	4638      	mov	r0, r7
 8019a48:	f3af 8000 	nop.w
 8019a4c:	1c42      	adds	r2, r0, #1
 8019a4e:	4606      	mov	r6, r0
 8019a50:	d1d6      	bne.n	8019a00 <_svfiprintf_r+0x174>
 8019a52:	89ab      	ldrh	r3, [r5, #12]
 8019a54:	065b      	lsls	r3, r3, #25
 8019a56:	f53f af2d 	bmi.w	80198b4 <_svfiprintf_r+0x28>
 8019a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019a5c:	e72c      	b.n	80198b8 <_svfiprintf_r+0x2c>
 8019a5e:	ab03      	add	r3, sp, #12
 8019a60:	9300      	str	r3, [sp, #0]
 8019a62:	462a      	mov	r2, r5
 8019a64:	4b05      	ldr	r3, [pc, #20]	@ (8019a7c <_svfiprintf_r+0x1f0>)
 8019a66:	a904      	add	r1, sp, #16
 8019a68:	4638      	mov	r0, r7
 8019a6a:	f000 f9bb 	bl	8019de4 <_printf_i>
 8019a6e:	e7ed      	b.n	8019a4c <_svfiprintf_r+0x1c0>
 8019a70:	0801bc9a 	.word	0x0801bc9a
 8019a74:	0801bca4 	.word	0x0801bca4
 8019a78:	00000000 	.word	0x00000000
 8019a7c:	080197d5 	.word	0x080197d5
 8019a80:	0801bca0 	.word	0x0801bca0

08019a84 <__sfputc_r>:
 8019a84:	6893      	ldr	r3, [r2, #8]
 8019a86:	3b01      	subs	r3, #1
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	b410      	push	{r4}
 8019a8c:	6093      	str	r3, [r2, #8]
 8019a8e:	da08      	bge.n	8019aa2 <__sfputc_r+0x1e>
 8019a90:	6994      	ldr	r4, [r2, #24]
 8019a92:	42a3      	cmp	r3, r4
 8019a94:	db01      	blt.n	8019a9a <__sfputc_r+0x16>
 8019a96:	290a      	cmp	r1, #10
 8019a98:	d103      	bne.n	8019aa2 <__sfputc_r+0x1e>
 8019a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a9e:	f7ff bbe1 	b.w	8019264 <__swbuf_r>
 8019aa2:	6813      	ldr	r3, [r2, #0]
 8019aa4:	1c58      	adds	r0, r3, #1
 8019aa6:	6010      	str	r0, [r2, #0]
 8019aa8:	7019      	strb	r1, [r3, #0]
 8019aaa:	4608      	mov	r0, r1
 8019aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ab0:	4770      	bx	lr

08019ab2 <__sfputs_r>:
 8019ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ab4:	4606      	mov	r6, r0
 8019ab6:	460f      	mov	r7, r1
 8019ab8:	4614      	mov	r4, r2
 8019aba:	18d5      	adds	r5, r2, r3
 8019abc:	42ac      	cmp	r4, r5
 8019abe:	d101      	bne.n	8019ac4 <__sfputs_r+0x12>
 8019ac0:	2000      	movs	r0, #0
 8019ac2:	e007      	b.n	8019ad4 <__sfputs_r+0x22>
 8019ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ac8:	463a      	mov	r2, r7
 8019aca:	4630      	mov	r0, r6
 8019acc:	f7ff ffda 	bl	8019a84 <__sfputc_r>
 8019ad0:	1c43      	adds	r3, r0, #1
 8019ad2:	d1f3      	bne.n	8019abc <__sfputs_r+0xa>
 8019ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019ad8 <_vfiprintf_r>:
 8019ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019adc:	460d      	mov	r5, r1
 8019ade:	b09d      	sub	sp, #116	@ 0x74
 8019ae0:	4614      	mov	r4, r2
 8019ae2:	4698      	mov	r8, r3
 8019ae4:	4606      	mov	r6, r0
 8019ae6:	b118      	cbz	r0, 8019af0 <_vfiprintf_r+0x18>
 8019ae8:	6a03      	ldr	r3, [r0, #32]
 8019aea:	b90b      	cbnz	r3, 8019af0 <_vfiprintf_r+0x18>
 8019aec:	f7ff fa4a 	bl	8018f84 <__sinit>
 8019af0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019af2:	07d9      	lsls	r1, r3, #31
 8019af4:	d405      	bmi.n	8019b02 <_vfiprintf_r+0x2a>
 8019af6:	89ab      	ldrh	r3, [r5, #12]
 8019af8:	059a      	lsls	r2, r3, #22
 8019afa:	d402      	bmi.n	8019b02 <_vfiprintf_r+0x2a>
 8019afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019afe:	f7ff fddc 	bl	80196ba <__retarget_lock_acquire_recursive>
 8019b02:	89ab      	ldrh	r3, [r5, #12]
 8019b04:	071b      	lsls	r3, r3, #28
 8019b06:	d501      	bpl.n	8019b0c <_vfiprintf_r+0x34>
 8019b08:	692b      	ldr	r3, [r5, #16]
 8019b0a:	b99b      	cbnz	r3, 8019b34 <_vfiprintf_r+0x5c>
 8019b0c:	4629      	mov	r1, r5
 8019b0e:	4630      	mov	r0, r6
 8019b10:	f7ff fbe6 	bl	80192e0 <__swsetup_r>
 8019b14:	b170      	cbz	r0, 8019b34 <_vfiprintf_r+0x5c>
 8019b16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019b18:	07dc      	lsls	r4, r3, #31
 8019b1a:	d504      	bpl.n	8019b26 <_vfiprintf_r+0x4e>
 8019b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b20:	b01d      	add	sp, #116	@ 0x74
 8019b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b26:	89ab      	ldrh	r3, [r5, #12]
 8019b28:	0598      	lsls	r0, r3, #22
 8019b2a:	d4f7      	bmi.n	8019b1c <_vfiprintf_r+0x44>
 8019b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019b2e:	f7ff fdc5 	bl	80196bc <__retarget_lock_release_recursive>
 8019b32:	e7f3      	b.n	8019b1c <_vfiprintf_r+0x44>
 8019b34:	2300      	movs	r3, #0
 8019b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b38:	2320      	movs	r3, #32
 8019b3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b42:	2330      	movs	r3, #48	@ 0x30
 8019b44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019cf4 <_vfiprintf_r+0x21c>
 8019b48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019b4c:	f04f 0901 	mov.w	r9, #1
 8019b50:	4623      	mov	r3, r4
 8019b52:	469a      	mov	sl, r3
 8019b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b58:	b10a      	cbz	r2, 8019b5e <_vfiprintf_r+0x86>
 8019b5a:	2a25      	cmp	r2, #37	@ 0x25
 8019b5c:	d1f9      	bne.n	8019b52 <_vfiprintf_r+0x7a>
 8019b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8019b62:	d00b      	beq.n	8019b7c <_vfiprintf_r+0xa4>
 8019b64:	465b      	mov	r3, fp
 8019b66:	4622      	mov	r2, r4
 8019b68:	4629      	mov	r1, r5
 8019b6a:	4630      	mov	r0, r6
 8019b6c:	f7ff ffa1 	bl	8019ab2 <__sfputs_r>
 8019b70:	3001      	adds	r0, #1
 8019b72:	f000 80a7 	beq.w	8019cc4 <_vfiprintf_r+0x1ec>
 8019b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019b78:	445a      	add	r2, fp
 8019b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8019b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	f000 809f 	beq.w	8019cc4 <_vfiprintf_r+0x1ec>
 8019b86:	2300      	movs	r3, #0
 8019b88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b90:	f10a 0a01 	add.w	sl, sl, #1
 8019b94:	9304      	str	r3, [sp, #16]
 8019b96:	9307      	str	r3, [sp, #28]
 8019b98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8019b9e:	4654      	mov	r4, sl
 8019ba0:	2205      	movs	r2, #5
 8019ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ba6:	4853      	ldr	r0, [pc, #332]	@ (8019cf4 <_vfiprintf_r+0x21c>)
 8019ba8:	f7e6 fb42 	bl	8000230 <memchr>
 8019bac:	9a04      	ldr	r2, [sp, #16]
 8019bae:	b9d8      	cbnz	r0, 8019be8 <_vfiprintf_r+0x110>
 8019bb0:	06d1      	lsls	r1, r2, #27
 8019bb2:	bf44      	itt	mi
 8019bb4:	2320      	movmi	r3, #32
 8019bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019bba:	0713      	lsls	r3, r2, #28
 8019bbc:	bf44      	itt	mi
 8019bbe:	232b      	movmi	r3, #43	@ 0x2b
 8019bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8019bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8019bca:	d015      	beq.n	8019bf8 <_vfiprintf_r+0x120>
 8019bcc:	9a07      	ldr	r2, [sp, #28]
 8019bce:	4654      	mov	r4, sl
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	f04f 0c0a 	mov.w	ip, #10
 8019bd6:	4621      	mov	r1, r4
 8019bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bdc:	3b30      	subs	r3, #48	@ 0x30
 8019bde:	2b09      	cmp	r3, #9
 8019be0:	d94b      	bls.n	8019c7a <_vfiprintf_r+0x1a2>
 8019be2:	b1b0      	cbz	r0, 8019c12 <_vfiprintf_r+0x13a>
 8019be4:	9207      	str	r2, [sp, #28]
 8019be6:	e014      	b.n	8019c12 <_vfiprintf_r+0x13a>
 8019be8:	eba0 0308 	sub.w	r3, r0, r8
 8019bec:	fa09 f303 	lsl.w	r3, r9, r3
 8019bf0:	4313      	orrs	r3, r2
 8019bf2:	9304      	str	r3, [sp, #16]
 8019bf4:	46a2      	mov	sl, r4
 8019bf6:	e7d2      	b.n	8019b9e <_vfiprintf_r+0xc6>
 8019bf8:	9b03      	ldr	r3, [sp, #12]
 8019bfa:	1d19      	adds	r1, r3, #4
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	9103      	str	r1, [sp, #12]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	bfbb      	ittet	lt
 8019c04:	425b      	neglt	r3, r3
 8019c06:	f042 0202 	orrlt.w	r2, r2, #2
 8019c0a:	9307      	strge	r3, [sp, #28]
 8019c0c:	9307      	strlt	r3, [sp, #28]
 8019c0e:	bfb8      	it	lt
 8019c10:	9204      	strlt	r2, [sp, #16]
 8019c12:	7823      	ldrb	r3, [r4, #0]
 8019c14:	2b2e      	cmp	r3, #46	@ 0x2e
 8019c16:	d10a      	bne.n	8019c2e <_vfiprintf_r+0x156>
 8019c18:	7863      	ldrb	r3, [r4, #1]
 8019c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019c1c:	d132      	bne.n	8019c84 <_vfiprintf_r+0x1ac>
 8019c1e:	9b03      	ldr	r3, [sp, #12]
 8019c20:	1d1a      	adds	r2, r3, #4
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	9203      	str	r2, [sp, #12]
 8019c26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019c2a:	3402      	adds	r4, #2
 8019c2c:	9305      	str	r3, [sp, #20]
 8019c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019d04 <_vfiprintf_r+0x22c>
 8019c32:	7821      	ldrb	r1, [r4, #0]
 8019c34:	2203      	movs	r2, #3
 8019c36:	4650      	mov	r0, sl
 8019c38:	f7e6 fafa 	bl	8000230 <memchr>
 8019c3c:	b138      	cbz	r0, 8019c4e <_vfiprintf_r+0x176>
 8019c3e:	9b04      	ldr	r3, [sp, #16]
 8019c40:	eba0 000a 	sub.w	r0, r0, sl
 8019c44:	2240      	movs	r2, #64	@ 0x40
 8019c46:	4082      	lsls	r2, r0
 8019c48:	4313      	orrs	r3, r2
 8019c4a:	3401      	adds	r4, #1
 8019c4c:	9304      	str	r3, [sp, #16]
 8019c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c52:	4829      	ldr	r0, [pc, #164]	@ (8019cf8 <_vfiprintf_r+0x220>)
 8019c54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019c58:	2206      	movs	r2, #6
 8019c5a:	f7e6 fae9 	bl	8000230 <memchr>
 8019c5e:	2800      	cmp	r0, #0
 8019c60:	d03f      	beq.n	8019ce2 <_vfiprintf_r+0x20a>
 8019c62:	4b26      	ldr	r3, [pc, #152]	@ (8019cfc <_vfiprintf_r+0x224>)
 8019c64:	bb1b      	cbnz	r3, 8019cae <_vfiprintf_r+0x1d6>
 8019c66:	9b03      	ldr	r3, [sp, #12]
 8019c68:	3307      	adds	r3, #7
 8019c6a:	f023 0307 	bic.w	r3, r3, #7
 8019c6e:	3308      	adds	r3, #8
 8019c70:	9303      	str	r3, [sp, #12]
 8019c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c74:	443b      	add	r3, r7
 8019c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c78:	e76a      	b.n	8019b50 <_vfiprintf_r+0x78>
 8019c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c7e:	460c      	mov	r4, r1
 8019c80:	2001      	movs	r0, #1
 8019c82:	e7a8      	b.n	8019bd6 <_vfiprintf_r+0xfe>
 8019c84:	2300      	movs	r3, #0
 8019c86:	3401      	adds	r4, #1
 8019c88:	9305      	str	r3, [sp, #20]
 8019c8a:	4619      	mov	r1, r3
 8019c8c:	f04f 0c0a 	mov.w	ip, #10
 8019c90:	4620      	mov	r0, r4
 8019c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c96:	3a30      	subs	r2, #48	@ 0x30
 8019c98:	2a09      	cmp	r2, #9
 8019c9a:	d903      	bls.n	8019ca4 <_vfiprintf_r+0x1cc>
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d0c6      	beq.n	8019c2e <_vfiprintf_r+0x156>
 8019ca0:	9105      	str	r1, [sp, #20]
 8019ca2:	e7c4      	b.n	8019c2e <_vfiprintf_r+0x156>
 8019ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019ca8:	4604      	mov	r4, r0
 8019caa:	2301      	movs	r3, #1
 8019cac:	e7f0      	b.n	8019c90 <_vfiprintf_r+0x1b8>
 8019cae:	ab03      	add	r3, sp, #12
 8019cb0:	9300      	str	r3, [sp, #0]
 8019cb2:	462a      	mov	r2, r5
 8019cb4:	4b12      	ldr	r3, [pc, #72]	@ (8019d00 <_vfiprintf_r+0x228>)
 8019cb6:	a904      	add	r1, sp, #16
 8019cb8:	4630      	mov	r0, r6
 8019cba:	f3af 8000 	nop.w
 8019cbe:	4607      	mov	r7, r0
 8019cc0:	1c78      	adds	r0, r7, #1
 8019cc2:	d1d6      	bne.n	8019c72 <_vfiprintf_r+0x19a>
 8019cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019cc6:	07d9      	lsls	r1, r3, #31
 8019cc8:	d405      	bmi.n	8019cd6 <_vfiprintf_r+0x1fe>
 8019cca:	89ab      	ldrh	r3, [r5, #12]
 8019ccc:	059a      	lsls	r2, r3, #22
 8019cce:	d402      	bmi.n	8019cd6 <_vfiprintf_r+0x1fe>
 8019cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019cd2:	f7ff fcf3 	bl	80196bc <__retarget_lock_release_recursive>
 8019cd6:	89ab      	ldrh	r3, [r5, #12]
 8019cd8:	065b      	lsls	r3, r3, #25
 8019cda:	f53f af1f 	bmi.w	8019b1c <_vfiprintf_r+0x44>
 8019cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ce0:	e71e      	b.n	8019b20 <_vfiprintf_r+0x48>
 8019ce2:	ab03      	add	r3, sp, #12
 8019ce4:	9300      	str	r3, [sp, #0]
 8019ce6:	462a      	mov	r2, r5
 8019ce8:	4b05      	ldr	r3, [pc, #20]	@ (8019d00 <_vfiprintf_r+0x228>)
 8019cea:	a904      	add	r1, sp, #16
 8019cec:	4630      	mov	r0, r6
 8019cee:	f000 f879 	bl	8019de4 <_printf_i>
 8019cf2:	e7e4      	b.n	8019cbe <_vfiprintf_r+0x1e6>
 8019cf4:	0801bc9a 	.word	0x0801bc9a
 8019cf8:	0801bca4 	.word	0x0801bca4
 8019cfc:	00000000 	.word	0x00000000
 8019d00:	08019ab3 	.word	0x08019ab3
 8019d04:	0801bca0 	.word	0x0801bca0

08019d08 <_printf_common>:
 8019d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d0c:	4616      	mov	r6, r2
 8019d0e:	4698      	mov	r8, r3
 8019d10:	688a      	ldr	r2, [r1, #8]
 8019d12:	690b      	ldr	r3, [r1, #16]
 8019d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	bfb8      	it	lt
 8019d1c:	4613      	movlt	r3, r2
 8019d1e:	6033      	str	r3, [r6, #0]
 8019d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019d24:	4607      	mov	r7, r0
 8019d26:	460c      	mov	r4, r1
 8019d28:	b10a      	cbz	r2, 8019d2e <_printf_common+0x26>
 8019d2a:	3301      	adds	r3, #1
 8019d2c:	6033      	str	r3, [r6, #0]
 8019d2e:	6823      	ldr	r3, [r4, #0]
 8019d30:	0699      	lsls	r1, r3, #26
 8019d32:	bf42      	ittt	mi
 8019d34:	6833      	ldrmi	r3, [r6, #0]
 8019d36:	3302      	addmi	r3, #2
 8019d38:	6033      	strmi	r3, [r6, #0]
 8019d3a:	6825      	ldr	r5, [r4, #0]
 8019d3c:	f015 0506 	ands.w	r5, r5, #6
 8019d40:	d106      	bne.n	8019d50 <_printf_common+0x48>
 8019d42:	f104 0a19 	add.w	sl, r4, #25
 8019d46:	68e3      	ldr	r3, [r4, #12]
 8019d48:	6832      	ldr	r2, [r6, #0]
 8019d4a:	1a9b      	subs	r3, r3, r2
 8019d4c:	42ab      	cmp	r3, r5
 8019d4e:	dc26      	bgt.n	8019d9e <_printf_common+0x96>
 8019d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019d54:	6822      	ldr	r2, [r4, #0]
 8019d56:	3b00      	subs	r3, #0
 8019d58:	bf18      	it	ne
 8019d5a:	2301      	movne	r3, #1
 8019d5c:	0692      	lsls	r2, r2, #26
 8019d5e:	d42b      	bmi.n	8019db8 <_printf_common+0xb0>
 8019d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019d64:	4641      	mov	r1, r8
 8019d66:	4638      	mov	r0, r7
 8019d68:	47c8      	blx	r9
 8019d6a:	3001      	adds	r0, #1
 8019d6c:	d01e      	beq.n	8019dac <_printf_common+0xa4>
 8019d6e:	6823      	ldr	r3, [r4, #0]
 8019d70:	6922      	ldr	r2, [r4, #16]
 8019d72:	f003 0306 	and.w	r3, r3, #6
 8019d76:	2b04      	cmp	r3, #4
 8019d78:	bf02      	ittt	eq
 8019d7a:	68e5      	ldreq	r5, [r4, #12]
 8019d7c:	6833      	ldreq	r3, [r6, #0]
 8019d7e:	1aed      	subeq	r5, r5, r3
 8019d80:	68a3      	ldr	r3, [r4, #8]
 8019d82:	bf0c      	ite	eq
 8019d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d88:	2500      	movne	r5, #0
 8019d8a:	4293      	cmp	r3, r2
 8019d8c:	bfc4      	itt	gt
 8019d8e:	1a9b      	subgt	r3, r3, r2
 8019d90:	18ed      	addgt	r5, r5, r3
 8019d92:	2600      	movs	r6, #0
 8019d94:	341a      	adds	r4, #26
 8019d96:	42b5      	cmp	r5, r6
 8019d98:	d11a      	bne.n	8019dd0 <_printf_common+0xc8>
 8019d9a:	2000      	movs	r0, #0
 8019d9c:	e008      	b.n	8019db0 <_printf_common+0xa8>
 8019d9e:	2301      	movs	r3, #1
 8019da0:	4652      	mov	r2, sl
 8019da2:	4641      	mov	r1, r8
 8019da4:	4638      	mov	r0, r7
 8019da6:	47c8      	blx	r9
 8019da8:	3001      	adds	r0, #1
 8019daa:	d103      	bne.n	8019db4 <_printf_common+0xac>
 8019dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019db4:	3501      	adds	r5, #1
 8019db6:	e7c6      	b.n	8019d46 <_printf_common+0x3e>
 8019db8:	18e1      	adds	r1, r4, r3
 8019dba:	1c5a      	adds	r2, r3, #1
 8019dbc:	2030      	movs	r0, #48	@ 0x30
 8019dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019dc2:	4422      	add	r2, r4
 8019dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019dcc:	3302      	adds	r3, #2
 8019dce:	e7c7      	b.n	8019d60 <_printf_common+0x58>
 8019dd0:	2301      	movs	r3, #1
 8019dd2:	4622      	mov	r2, r4
 8019dd4:	4641      	mov	r1, r8
 8019dd6:	4638      	mov	r0, r7
 8019dd8:	47c8      	blx	r9
 8019dda:	3001      	adds	r0, #1
 8019ddc:	d0e6      	beq.n	8019dac <_printf_common+0xa4>
 8019dde:	3601      	adds	r6, #1
 8019de0:	e7d9      	b.n	8019d96 <_printf_common+0x8e>
	...

08019de4 <_printf_i>:
 8019de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019de8:	7e0f      	ldrb	r7, [r1, #24]
 8019dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019dec:	2f78      	cmp	r7, #120	@ 0x78
 8019dee:	4691      	mov	r9, r2
 8019df0:	4680      	mov	r8, r0
 8019df2:	460c      	mov	r4, r1
 8019df4:	469a      	mov	sl, r3
 8019df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019dfa:	d807      	bhi.n	8019e0c <_printf_i+0x28>
 8019dfc:	2f62      	cmp	r7, #98	@ 0x62
 8019dfe:	d80a      	bhi.n	8019e16 <_printf_i+0x32>
 8019e00:	2f00      	cmp	r7, #0
 8019e02:	f000 80d2 	beq.w	8019faa <_printf_i+0x1c6>
 8019e06:	2f58      	cmp	r7, #88	@ 0x58
 8019e08:	f000 80b9 	beq.w	8019f7e <_printf_i+0x19a>
 8019e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019e14:	e03a      	b.n	8019e8c <_printf_i+0xa8>
 8019e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019e1a:	2b15      	cmp	r3, #21
 8019e1c:	d8f6      	bhi.n	8019e0c <_printf_i+0x28>
 8019e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8019e24 <_printf_i+0x40>)
 8019e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e24:	08019e7d 	.word	0x08019e7d
 8019e28:	08019e91 	.word	0x08019e91
 8019e2c:	08019e0d 	.word	0x08019e0d
 8019e30:	08019e0d 	.word	0x08019e0d
 8019e34:	08019e0d 	.word	0x08019e0d
 8019e38:	08019e0d 	.word	0x08019e0d
 8019e3c:	08019e91 	.word	0x08019e91
 8019e40:	08019e0d 	.word	0x08019e0d
 8019e44:	08019e0d 	.word	0x08019e0d
 8019e48:	08019e0d 	.word	0x08019e0d
 8019e4c:	08019e0d 	.word	0x08019e0d
 8019e50:	08019f91 	.word	0x08019f91
 8019e54:	08019ebb 	.word	0x08019ebb
 8019e58:	08019f4b 	.word	0x08019f4b
 8019e5c:	08019e0d 	.word	0x08019e0d
 8019e60:	08019e0d 	.word	0x08019e0d
 8019e64:	08019fb3 	.word	0x08019fb3
 8019e68:	08019e0d 	.word	0x08019e0d
 8019e6c:	08019ebb 	.word	0x08019ebb
 8019e70:	08019e0d 	.word	0x08019e0d
 8019e74:	08019e0d 	.word	0x08019e0d
 8019e78:	08019f53 	.word	0x08019f53
 8019e7c:	6833      	ldr	r3, [r6, #0]
 8019e7e:	1d1a      	adds	r2, r3, #4
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	6032      	str	r2, [r6, #0]
 8019e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	e09d      	b.n	8019fcc <_printf_i+0x1e8>
 8019e90:	6833      	ldr	r3, [r6, #0]
 8019e92:	6820      	ldr	r0, [r4, #0]
 8019e94:	1d19      	adds	r1, r3, #4
 8019e96:	6031      	str	r1, [r6, #0]
 8019e98:	0606      	lsls	r6, r0, #24
 8019e9a:	d501      	bpl.n	8019ea0 <_printf_i+0xbc>
 8019e9c:	681d      	ldr	r5, [r3, #0]
 8019e9e:	e003      	b.n	8019ea8 <_printf_i+0xc4>
 8019ea0:	0645      	lsls	r5, r0, #25
 8019ea2:	d5fb      	bpl.n	8019e9c <_printf_i+0xb8>
 8019ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019ea8:	2d00      	cmp	r5, #0
 8019eaa:	da03      	bge.n	8019eb4 <_printf_i+0xd0>
 8019eac:	232d      	movs	r3, #45	@ 0x2d
 8019eae:	426d      	negs	r5, r5
 8019eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019eb4:	4859      	ldr	r0, [pc, #356]	@ (801a01c <_printf_i+0x238>)
 8019eb6:	230a      	movs	r3, #10
 8019eb8:	e011      	b.n	8019ede <_printf_i+0xfa>
 8019eba:	6821      	ldr	r1, [r4, #0]
 8019ebc:	6833      	ldr	r3, [r6, #0]
 8019ebe:	0608      	lsls	r0, r1, #24
 8019ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ec4:	d402      	bmi.n	8019ecc <_printf_i+0xe8>
 8019ec6:	0649      	lsls	r1, r1, #25
 8019ec8:	bf48      	it	mi
 8019eca:	b2ad      	uxthmi	r5, r5
 8019ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8019ece:	4853      	ldr	r0, [pc, #332]	@ (801a01c <_printf_i+0x238>)
 8019ed0:	6033      	str	r3, [r6, #0]
 8019ed2:	bf14      	ite	ne
 8019ed4:	230a      	movne	r3, #10
 8019ed6:	2308      	moveq	r3, #8
 8019ed8:	2100      	movs	r1, #0
 8019eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019ede:	6866      	ldr	r6, [r4, #4]
 8019ee0:	60a6      	str	r6, [r4, #8]
 8019ee2:	2e00      	cmp	r6, #0
 8019ee4:	bfa2      	ittt	ge
 8019ee6:	6821      	ldrge	r1, [r4, #0]
 8019ee8:	f021 0104 	bicge.w	r1, r1, #4
 8019eec:	6021      	strge	r1, [r4, #0]
 8019eee:	b90d      	cbnz	r5, 8019ef4 <_printf_i+0x110>
 8019ef0:	2e00      	cmp	r6, #0
 8019ef2:	d04b      	beq.n	8019f8c <_printf_i+0x1a8>
 8019ef4:	4616      	mov	r6, r2
 8019ef6:	fbb5 f1f3 	udiv	r1, r5, r3
 8019efa:	fb03 5711 	mls	r7, r3, r1, r5
 8019efe:	5dc7      	ldrb	r7, [r0, r7]
 8019f00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019f04:	462f      	mov	r7, r5
 8019f06:	42bb      	cmp	r3, r7
 8019f08:	460d      	mov	r5, r1
 8019f0a:	d9f4      	bls.n	8019ef6 <_printf_i+0x112>
 8019f0c:	2b08      	cmp	r3, #8
 8019f0e:	d10b      	bne.n	8019f28 <_printf_i+0x144>
 8019f10:	6823      	ldr	r3, [r4, #0]
 8019f12:	07df      	lsls	r7, r3, #31
 8019f14:	d508      	bpl.n	8019f28 <_printf_i+0x144>
 8019f16:	6923      	ldr	r3, [r4, #16]
 8019f18:	6861      	ldr	r1, [r4, #4]
 8019f1a:	4299      	cmp	r1, r3
 8019f1c:	bfde      	ittt	le
 8019f1e:	2330      	movle	r3, #48	@ 0x30
 8019f20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019f24:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019f28:	1b92      	subs	r2, r2, r6
 8019f2a:	6122      	str	r2, [r4, #16]
 8019f2c:	f8cd a000 	str.w	sl, [sp]
 8019f30:	464b      	mov	r3, r9
 8019f32:	aa03      	add	r2, sp, #12
 8019f34:	4621      	mov	r1, r4
 8019f36:	4640      	mov	r0, r8
 8019f38:	f7ff fee6 	bl	8019d08 <_printf_common>
 8019f3c:	3001      	adds	r0, #1
 8019f3e:	d14a      	bne.n	8019fd6 <_printf_i+0x1f2>
 8019f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f44:	b004      	add	sp, #16
 8019f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f4a:	6823      	ldr	r3, [r4, #0]
 8019f4c:	f043 0320 	orr.w	r3, r3, #32
 8019f50:	6023      	str	r3, [r4, #0]
 8019f52:	4833      	ldr	r0, [pc, #204]	@ (801a020 <_printf_i+0x23c>)
 8019f54:	2778      	movs	r7, #120	@ 0x78
 8019f56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019f5a:	6823      	ldr	r3, [r4, #0]
 8019f5c:	6831      	ldr	r1, [r6, #0]
 8019f5e:	061f      	lsls	r7, r3, #24
 8019f60:	f851 5b04 	ldr.w	r5, [r1], #4
 8019f64:	d402      	bmi.n	8019f6c <_printf_i+0x188>
 8019f66:	065f      	lsls	r7, r3, #25
 8019f68:	bf48      	it	mi
 8019f6a:	b2ad      	uxthmi	r5, r5
 8019f6c:	6031      	str	r1, [r6, #0]
 8019f6e:	07d9      	lsls	r1, r3, #31
 8019f70:	bf44      	itt	mi
 8019f72:	f043 0320 	orrmi.w	r3, r3, #32
 8019f76:	6023      	strmi	r3, [r4, #0]
 8019f78:	b11d      	cbz	r5, 8019f82 <_printf_i+0x19e>
 8019f7a:	2310      	movs	r3, #16
 8019f7c:	e7ac      	b.n	8019ed8 <_printf_i+0xf4>
 8019f7e:	4827      	ldr	r0, [pc, #156]	@ (801a01c <_printf_i+0x238>)
 8019f80:	e7e9      	b.n	8019f56 <_printf_i+0x172>
 8019f82:	6823      	ldr	r3, [r4, #0]
 8019f84:	f023 0320 	bic.w	r3, r3, #32
 8019f88:	6023      	str	r3, [r4, #0]
 8019f8a:	e7f6      	b.n	8019f7a <_printf_i+0x196>
 8019f8c:	4616      	mov	r6, r2
 8019f8e:	e7bd      	b.n	8019f0c <_printf_i+0x128>
 8019f90:	6833      	ldr	r3, [r6, #0]
 8019f92:	6825      	ldr	r5, [r4, #0]
 8019f94:	6961      	ldr	r1, [r4, #20]
 8019f96:	1d18      	adds	r0, r3, #4
 8019f98:	6030      	str	r0, [r6, #0]
 8019f9a:	062e      	lsls	r6, r5, #24
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	d501      	bpl.n	8019fa4 <_printf_i+0x1c0>
 8019fa0:	6019      	str	r1, [r3, #0]
 8019fa2:	e002      	b.n	8019faa <_printf_i+0x1c6>
 8019fa4:	0668      	lsls	r0, r5, #25
 8019fa6:	d5fb      	bpl.n	8019fa0 <_printf_i+0x1bc>
 8019fa8:	8019      	strh	r1, [r3, #0]
 8019faa:	2300      	movs	r3, #0
 8019fac:	6123      	str	r3, [r4, #16]
 8019fae:	4616      	mov	r6, r2
 8019fb0:	e7bc      	b.n	8019f2c <_printf_i+0x148>
 8019fb2:	6833      	ldr	r3, [r6, #0]
 8019fb4:	1d1a      	adds	r2, r3, #4
 8019fb6:	6032      	str	r2, [r6, #0]
 8019fb8:	681e      	ldr	r6, [r3, #0]
 8019fba:	6862      	ldr	r2, [r4, #4]
 8019fbc:	2100      	movs	r1, #0
 8019fbe:	4630      	mov	r0, r6
 8019fc0:	f7e6 f936 	bl	8000230 <memchr>
 8019fc4:	b108      	cbz	r0, 8019fca <_printf_i+0x1e6>
 8019fc6:	1b80      	subs	r0, r0, r6
 8019fc8:	6060      	str	r0, [r4, #4]
 8019fca:	6863      	ldr	r3, [r4, #4]
 8019fcc:	6123      	str	r3, [r4, #16]
 8019fce:	2300      	movs	r3, #0
 8019fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fd4:	e7aa      	b.n	8019f2c <_printf_i+0x148>
 8019fd6:	6923      	ldr	r3, [r4, #16]
 8019fd8:	4632      	mov	r2, r6
 8019fda:	4649      	mov	r1, r9
 8019fdc:	4640      	mov	r0, r8
 8019fde:	47d0      	blx	sl
 8019fe0:	3001      	adds	r0, #1
 8019fe2:	d0ad      	beq.n	8019f40 <_printf_i+0x15c>
 8019fe4:	6823      	ldr	r3, [r4, #0]
 8019fe6:	079b      	lsls	r3, r3, #30
 8019fe8:	d413      	bmi.n	801a012 <_printf_i+0x22e>
 8019fea:	68e0      	ldr	r0, [r4, #12]
 8019fec:	9b03      	ldr	r3, [sp, #12]
 8019fee:	4298      	cmp	r0, r3
 8019ff0:	bfb8      	it	lt
 8019ff2:	4618      	movlt	r0, r3
 8019ff4:	e7a6      	b.n	8019f44 <_printf_i+0x160>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	4632      	mov	r2, r6
 8019ffa:	4649      	mov	r1, r9
 8019ffc:	4640      	mov	r0, r8
 8019ffe:	47d0      	blx	sl
 801a000:	3001      	adds	r0, #1
 801a002:	d09d      	beq.n	8019f40 <_printf_i+0x15c>
 801a004:	3501      	adds	r5, #1
 801a006:	68e3      	ldr	r3, [r4, #12]
 801a008:	9903      	ldr	r1, [sp, #12]
 801a00a:	1a5b      	subs	r3, r3, r1
 801a00c:	42ab      	cmp	r3, r5
 801a00e:	dcf2      	bgt.n	8019ff6 <_printf_i+0x212>
 801a010:	e7eb      	b.n	8019fea <_printf_i+0x206>
 801a012:	2500      	movs	r5, #0
 801a014:	f104 0619 	add.w	r6, r4, #25
 801a018:	e7f5      	b.n	801a006 <_printf_i+0x222>
 801a01a:	bf00      	nop
 801a01c:	0801bcab 	.word	0x0801bcab
 801a020:	0801bcbc 	.word	0x0801bcbc

0801a024 <__sflush_r>:
 801a024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a02c:	0716      	lsls	r6, r2, #28
 801a02e:	4605      	mov	r5, r0
 801a030:	460c      	mov	r4, r1
 801a032:	d454      	bmi.n	801a0de <__sflush_r+0xba>
 801a034:	684b      	ldr	r3, [r1, #4]
 801a036:	2b00      	cmp	r3, #0
 801a038:	dc02      	bgt.n	801a040 <__sflush_r+0x1c>
 801a03a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	dd48      	ble.n	801a0d2 <__sflush_r+0xae>
 801a040:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a042:	2e00      	cmp	r6, #0
 801a044:	d045      	beq.n	801a0d2 <__sflush_r+0xae>
 801a046:	2300      	movs	r3, #0
 801a048:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a04c:	682f      	ldr	r7, [r5, #0]
 801a04e:	6a21      	ldr	r1, [r4, #32]
 801a050:	602b      	str	r3, [r5, #0]
 801a052:	d030      	beq.n	801a0b6 <__sflush_r+0x92>
 801a054:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a056:	89a3      	ldrh	r3, [r4, #12]
 801a058:	0759      	lsls	r1, r3, #29
 801a05a:	d505      	bpl.n	801a068 <__sflush_r+0x44>
 801a05c:	6863      	ldr	r3, [r4, #4]
 801a05e:	1ad2      	subs	r2, r2, r3
 801a060:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a062:	b10b      	cbz	r3, 801a068 <__sflush_r+0x44>
 801a064:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a066:	1ad2      	subs	r2, r2, r3
 801a068:	2300      	movs	r3, #0
 801a06a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a06c:	6a21      	ldr	r1, [r4, #32]
 801a06e:	4628      	mov	r0, r5
 801a070:	47b0      	blx	r6
 801a072:	1c43      	adds	r3, r0, #1
 801a074:	89a3      	ldrh	r3, [r4, #12]
 801a076:	d106      	bne.n	801a086 <__sflush_r+0x62>
 801a078:	6829      	ldr	r1, [r5, #0]
 801a07a:	291d      	cmp	r1, #29
 801a07c:	d82b      	bhi.n	801a0d6 <__sflush_r+0xb2>
 801a07e:	4a2a      	ldr	r2, [pc, #168]	@ (801a128 <__sflush_r+0x104>)
 801a080:	410a      	asrs	r2, r1
 801a082:	07d6      	lsls	r6, r2, #31
 801a084:	d427      	bmi.n	801a0d6 <__sflush_r+0xb2>
 801a086:	2200      	movs	r2, #0
 801a088:	6062      	str	r2, [r4, #4]
 801a08a:	04d9      	lsls	r1, r3, #19
 801a08c:	6922      	ldr	r2, [r4, #16]
 801a08e:	6022      	str	r2, [r4, #0]
 801a090:	d504      	bpl.n	801a09c <__sflush_r+0x78>
 801a092:	1c42      	adds	r2, r0, #1
 801a094:	d101      	bne.n	801a09a <__sflush_r+0x76>
 801a096:	682b      	ldr	r3, [r5, #0]
 801a098:	b903      	cbnz	r3, 801a09c <__sflush_r+0x78>
 801a09a:	6560      	str	r0, [r4, #84]	@ 0x54
 801a09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a09e:	602f      	str	r7, [r5, #0]
 801a0a0:	b1b9      	cbz	r1, 801a0d2 <__sflush_r+0xae>
 801a0a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a0a6:	4299      	cmp	r1, r3
 801a0a8:	d002      	beq.n	801a0b0 <__sflush_r+0x8c>
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	f7ff fb48 	bl	8019740 <_free_r>
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	6363      	str	r3, [r4, #52]	@ 0x34
 801a0b4:	e00d      	b.n	801a0d2 <__sflush_r+0xae>
 801a0b6:	2301      	movs	r3, #1
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	47b0      	blx	r6
 801a0bc:	4602      	mov	r2, r0
 801a0be:	1c50      	adds	r0, r2, #1
 801a0c0:	d1c9      	bne.n	801a056 <__sflush_r+0x32>
 801a0c2:	682b      	ldr	r3, [r5, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d0c6      	beq.n	801a056 <__sflush_r+0x32>
 801a0c8:	2b1d      	cmp	r3, #29
 801a0ca:	d001      	beq.n	801a0d0 <__sflush_r+0xac>
 801a0cc:	2b16      	cmp	r3, #22
 801a0ce:	d11e      	bne.n	801a10e <__sflush_r+0xea>
 801a0d0:	602f      	str	r7, [r5, #0]
 801a0d2:	2000      	movs	r0, #0
 801a0d4:	e022      	b.n	801a11c <__sflush_r+0xf8>
 801a0d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a0da:	b21b      	sxth	r3, r3
 801a0dc:	e01b      	b.n	801a116 <__sflush_r+0xf2>
 801a0de:	690f      	ldr	r7, [r1, #16]
 801a0e0:	2f00      	cmp	r7, #0
 801a0e2:	d0f6      	beq.n	801a0d2 <__sflush_r+0xae>
 801a0e4:	0793      	lsls	r3, r2, #30
 801a0e6:	680e      	ldr	r6, [r1, #0]
 801a0e8:	bf08      	it	eq
 801a0ea:	694b      	ldreq	r3, [r1, #20]
 801a0ec:	600f      	str	r7, [r1, #0]
 801a0ee:	bf18      	it	ne
 801a0f0:	2300      	movne	r3, #0
 801a0f2:	eba6 0807 	sub.w	r8, r6, r7
 801a0f6:	608b      	str	r3, [r1, #8]
 801a0f8:	f1b8 0f00 	cmp.w	r8, #0
 801a0fc:	dde9      	ble.n	801a0d2 <__sflush_r+0xae>
 801a0fe:	6a21      	ldr	r1, [r4, #32]
 801a100:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a102:	4643      	mov	r3, r8
 801a104:	463a      	mov	r2, r7
 801a106:	4628      	mov	r0, r5
 801a108:	47b0      	blx	r6
 801a10a:	2800      	cmp	r0, #0
 801a10c:	dc08      	bgt.n	801a120 <__sflush_r+0xfc>
 801a10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a116:	81a3      	strh	r3, [r4, #12]
 801a118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a120:	4407      	add	r7, r0
 801a122:	eba8 0800 	sub.w	r8, r8, r0
 801a126:	e7e7      	b.n	801a0f8 <__sflush_r+0xd4>
 801a128:	dfbffffe 	.word	0xdfbffffe

0801a12c <_fflush_r>:
 801a12c:	b538      	push	{r3, r4, r5, lr}
 801a12e:	690b      	ldr	r3, [r1, #16]
 801a130:	4605      	mov	r5, r0
 801a132:	460c      	mov	r4, r1
 801a134:	b913      	cbnz	r3, 801a13c <_fflush_r+0x10>
 801a136:	2500      	movs	r5, #0
 801a138:	4628      	mov	r0, r5
 801a13a:	bd38      	pop	{r3, r4, r5, pc}
 801a13c:	b118      	cbz	r0, 801a146 <_fflush_r+0x1a>
 801a13e:	6a03      	ldr	r3, [r0, #32]
 801a140:	b90b      	cbnz	r3, 801a146 <_fflush_r+0x1a>
 801a142:	f7fe ff1f 	bl	8018f84 <__sinit>
 801a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d0f3      	beq.n	801a136 <_fflush_r+0xa>
 801a14e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a150:	07d0      	lsls	r0, r2, #31
 801a152:	d404      	bmi.n	801a15e <_fflush_r+0x32>
 801a154:	0599      	lsls	r1, r3, #22
 801a156:	d402      	bmi.n	801a15e <_fflush_r+0x32>
 801a158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a15a:	f7ff faae 	bl	80196ba <__retarget_lock_acquire_recursive>
 801a15e:	4628      	mov	r0, r5
 801a160:	4621      	mov	r1, r4
 801a162:	f7ff ff5f 	bl	801a024 <__sflush_r>
 801a166:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a168:	07da      	lsls	r2, r3, #31
 801a16a:	4605      	mov	r5, r0
 801a16c:	d4e4      	bmi.n	801a138 <_fflush_r+0xc>
 801a16e:	89a3      	ldrh	r3, [r4, #12]
 801a170:	059b      	lsls	r3, r3, #22
 801a172:	d4e1      	bmi.n	801a138 <_fflush_r+0xc>
 801a174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a176:	f7ff faa1 	bl	80196bc <__retarget_lock_release_recursive>
 801a17a:	e7dd      	b.n	801a138 <_fflush_r+0xc>

0801a17c <_malloc_usable_size_r>:
 801a17c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a180:	1f18      	subs	r0, r3, #4
 801a182:	2b00      	cmp	r3, #0
 801a184:	bfbc      	itt	lt
 801a186:	580b      	ldrlt	r3, [r1, r0]
 801a188:	18c0      	addlt	r0, r0, r3
 801a18a:	4770      	bx	lr

0801a18c <__sread>:
 801a18c:	b510      	push	{r4, lr}
 801a18e:	460c      	mov	r4, r1
 801a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a194:	f000 f872 	bl	801a27c <_read_r>
 801a198:	2800      	cmp	r0, #0
 801a19a:	bfab      	itete	ge
 801a19c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a19e:	89a3      	ldrhlt	r3, [r4, #12]
 801a1a0:	181b      	addge	r3, r3, r0
 801a1a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a1a6:	bfac      	ite	ge
 801a1a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a1aa:	81a3      	strhlt	r3, [r4, #12]
 801a1ac:	bd10      	pop	{r4, pc}

0801a1ae <__swrite>:
 801a1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1b2:	461f      	mov	r7, r3
 801a1b4:	898b      	ldrh	r3, [r1, #12]
 801a1b6:	05db      	lsls	r3, r3, #23
 801a1b8:	4605      	mov	r5, r0
 801a1ba:	460c      	mov	r4, r1
 801a1bc:	4616      	mov	r6, r2
 801a1be:	d505      	bpl.n	801a1cc <__swrite+0x1e>
 801a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1c4:	2302      	movs	r3, #2
 801a1c6:	2200      	movs	r2, #0
 801a1c8:	f000 f846 	bl	801a258 <_lseek_r>
 801a1cc:	89a3      	ldrh	r3, [r4, #12]
 801a1ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a1d6:	81a3      	strh	r3, [r4, #12]
 801a1d8:	4632      	mov	r2, r6
 801a1da:	463b      	mov	r3, r7
 801a1dc:	4628      	mov	r0, r5
 801a1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e2:	f000 b85d 	b.w	801a2a0 <_write_r>

0801a1e6 <__sseek>:
 801a1e6:	b510      	push	{r4, lr}
 801a1e8:	460c      	mov	r4, r1
 801a1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1ee:	f000 f833 	bl	801a258 <_lseek_r>
 801a1f2:	1c43      	adds	r3, r0, #1
 801a1f4:	89a3      	ldrh	r3, [r4, #12]
 801a1f6:	bf15      	itete	ne
 801a1f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a1fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a1fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a202:	81a3      	strheq	r3, [r4, #12]
 801a204:	bf18      	it	ne
 801a206:	81a3      	strhne	r3, [r4, #12]
 801a208:	bd10      	pop	{r4, pc}

0801a20a <__sclose>:
 801a20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a20e:	f000 b813 	b.w	801a238 <_close_r>
	...

0801a214 <fiprintf>:
 801a214:	b40e      	push	{r1, r2, r3}
 801a216:	b503      	push	{r0, r1, lr}
 801a218:	4601      	mov	r1, r0
 801a21a:	ab03      	add	r3, sp, #12
 801a21c:	4805      	ldr	r0, [pc, #20]	@ (801a234 <fiprintf+0x20>)
 801a21e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a222:	6800      	ldr	r0, [r0, #0]
 801a224:	9301      	str	r3, [sp, #4]
 801a226:	f7ff fc57 	bl	8019ad8 <_vfiprintf_r>
 801a22a:	b002      	add	sp, #8
 801a22c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a230:	b003      	add	sp, #12
 801a232:	4770      	bx	lr
 801a234:	200007cc 	.word	0x200007cc

0801a238 <_close_r>:
 801a238:	b538      	push	{r3, r4, r5, lr}
 801a23a:	4d06      	ldr	r5, [pc, #24]	@ (801a254 <_close_r+0x1c>)
 801a23c:	2300      	movs	r3, #0
 801a23e:	4604      	mov	r4, r0
 801a240:	4608      	mov	r0, r1
 801a242:	602b      	str	r3, [r5, #0]
 801a244:	f7e8 f948 	bl	80024d8 <_close>
 801a248:	1c43      	adds	r3, r0, #1
 801a24a:	d102      	bne.n	801a252 <_close_r+0x1a>
 801a24c:	682b      	ldr	r3, [r5, #0]
 801a24e:	b103      	cbz	r3, 801a252 <_close_r+0x1a>
 801a250:	6023      	str	r3, [r4, #0]
 801a252:	bd38      	pop	{r3, r4, r5, pc}
 801a254:	200156f0 	.word	0x200156f0

0801a258 <_lseek_r>:
 801a258:	b538      	push	{r3, r4, r5, lr}
 801a25a:	4d07      	ldr	r5, [pc, #28]	@ (801a278 <_lseek_r+0x20>)
 801a25c:	4604      	mov	r4, r0
 801a25e:	4608      	mov	r0, r1
 801a260:	4611      	mov	r1, r2
 801a262:	2200      	movs	r2, #0
 801a264:	602a      	str	r2, [r5, #0]
 801a266:	461a      	mov	r2, r3
 801a268:	f7e8 f95d 	bl	8002526 <_lseek>
 801a26c:	1c43      	adds	r3, r0, #1
 801a26e:	d102      	bne.n	801a276 <_lseek_r+0x1e>
 801a270:	682b      	ldr	r3, [r5, #0]
 801a272:	b103      	cbz	r3, 801a276 <_lseek_r+0x1e>
 801a274:	6023      	str	r3, [r4, #0]
 801a276:	bd38      	pop	{r3, r4, r5, pc}
 801a278:	200156f0 	.word	0x200156f0

0801a27c <_read_r>:
 801a27c:	b538      	push	{r3, r4, r5, lr}
 801a27e:	4d07      	ldr	r5, [pc, #28]	@ (801a29c <_read_r+0x20>)
 801a280:	4604      	mov	r4, r0
 801a282:	4608      	mov	r0, r1
 801a284:	4611      	mov	r1, r2
 801a286:	2200      	movs	r2, #0
 801a288:	602a      	str	r2, [r5, #0]
 801a28a:	461a      	mov	r2, r3
 801a28c:	f7e8 f907 	bl	800249e <_read>
 801a290:	1c43      	adds	r3, r0, #1
 801a292:	d102      	bne.n	801a29a <_read_r+0x1e>
 801a294:	682b      	ldr	r3, [r5, #0]
 801a296:	b103      	cbz	r3, 801a29a <_read_r+0x1e>
 801a298:	6023      	str	r3, [r4, #0]
 801a29a:	bd38      	pop	{r3, r4, r5, pc}
 801a29c:	200156f0 	.word	0x200156f0

0801a2a0 <_write_r>:
 801a2a0:	b538      	push	{r3, r4, r5, lr}
 801a2a2:	4d07      	ldr	r5, [pc, #28]	@ (801a2c0 <_write_r+0x20>)
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	4608      	mov	r0, r1
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	602a      	str	r2, [r5, #0]
 801a2ae:	461a      	mov	r2, r3
 801a2b0:	f7e7 fe36 	bl	8001f20 <_write>
 801a2b4:	1c43      	adds	r3, r0, #1
 801a2b6:	d102      	bne.n	801a2be <_write_r+0x1e>
 801a2b8:	682b      	ldr	r3, [r5, #0]
 801a2ba:	b103      	cbz	r3, 801a2be <_write_r+0x1e>
 801a2bc:	6023      	str	r3, [r4, #0]
 801a2be:	bd38      	pop	{r3, r4, r5, pc}
 801a2c0:	200156f0 	.word	0x200156f0

0801a2c4 <abort>:
 801a2c4:	b508      	push	{r3, lr}
 801a2c6:	2006      	movs	r0, #6
 801a2c8:	f000 f82c 	bl	801a324 <raise>
 801a2cc:	2001      	movs	r0, #1
 801a2ce:	f7e8 f8db 	bl	8002488 <_exit>

0801a2d2 <_raise_r>:
 801a2d2:	291f      	cmp	r1, #31
 801a2d4:	b538      	push	{r3, r4, r5, lr}
 801a2d6:	4605      	mov	r5, r0
 801a2d8:	460c      	mov	r4, r1
 801a2da:	d904      	bls.n	801a2e6 <_raise_r+0x14>
 801a2dc:	2316      	movs	r3, #22
 801a2de:	6003      	str	r3, [r0, #0]
 801a2e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2e4:	bd38      	pop	{r3, r4, r5, pc}
 801a2e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a2e8:	b112      	cbz	r2, 801a2f0 <_raise_r+0x1e>
 801a2ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a2ee:	b94b      	cbnz	r3, 801a304 <_raise_r+0x32>
 801a2f0:	4628      	mov	r0, r5
 801a2f2:	f000 f831 	bl	801a358 <_getpid_r>
 801a2f6:	4622      	mov	r2, r4
 801a2f8:	4601      	mov	r1, r0
 801a2fa:	4628      	mov	r0, r5
 801a2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a300:	f000 b818 	b.w	801a334 <_kill_r>
 801a304:	2b01      	cmp	r3, #1
 801a306:	d00a      	beq.n	801a31e <_raise_r+0x4c>
 801a308:	1c59      	adds	r1, r3, #1
 801a30a:	d103      	bne.n	801a314 <_raise_r+0x42>
 801a30c:	2316      	movs	r3, #22
 801a30e:	6003      	str	r3, [r0, #0]
 801a310:	2001      	movs	r0, #1
 801a312:	e7e7      	b.n	801a2e4 <_raise_r+0x12>
 801a314:	2100      	movs	r1, #0
 801a316:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a31a:	4620      	mov	r0, r4
 801a31c:	4798      	blx	r3
 801a31e:	2000      	movs	r0, #0
 801a320:	e7e0      	b.n	801a2e4 <_raise_r+0x12>
	...

0801a324 <raise>:
 801a324:	4b02      	ldr	r3, [pc, #8]	@ (801a330 <raise+0xc>)
 801a326:	4601      	mov	r1, r0
 801a328:	6818      	ldr	r0, [r3, #0]
 801a32a:	f7ff bfd2 	b.w	801a2d2 <_raise_r>
 801a32e:	bf00      	nop
 801a330:	200007cc 	.word	0x200007cc

0801a334 <_kill_r>:
 801a334:	b538      	push	{r3, r4, r5, lr}
 801a336:	4d07      	ldr	r5, [pc, #28]	@ (801a354 <_kill_r+0x20>)
 801a338:	2300      	movs	r3, #0
 801a33a:	4604      	mov	r4, r0
 801a33c:	4608      	mov	r0, r1
 801a33e:	4611      	mov	r1, r2
 801a340:	602b      	str	r3, [r5, #0]
 801a342:	f7e8 f891 	bl	8002468 <_kill>
 801a346:	1c43      	adds	r3, r0, #1
 801a348:	d102      	bne.n	801a350 <_kill_r+0x1c>
 801a34a:	682b      	ldr	r3, [r5, #0]
 801a34c:	b103      	cbz	r3, 801a350 <_kill_r+0x1c>
 801a34e:	6023      	str	r3, [r4, #0]
 801a350:	bd38      	pop	{r3, r4, r5, pc}
 801a352:	bf00      	nop
 801a354:	200156f0 	.word	0x200156f0

0801a358 <_getpid_r>:
 801a358:	f7e8 b87e 	b.w	8002458 <_getpid>

0801a35c <atan2>:
 801a35c:	f000 b800 	b.w	801a360 <__ieee754_atan2>

0801a360 <__ieee754_atan2>:
 801a360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a364:	ec57 6b11 	vmov	r6, r7, d1
 801a368:	4273      	negs	r3, r6
 801a36a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a4e8 <__ieee754_atan2+0x188>
 801a36e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a372:	4333      	orrs	r3, r6
 801a374:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a378:	4543      	cmp	r3, r8
 801a37a:	ec51 0b10 	vmov	r0, r1, d0
 801a37e:	4635      	mov	r5, r6
 801a380:	d809      	bhi.n	801a396 <__ieee754_atan2+0x36>
 801a382:	4244      	negs	r4, r0
 801a384:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a388:	4304      	orrs	r4, r0
 801a38a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a38e:	4544      	cmp	r4, r8
 801a390:	468e      	mov	lr, r1
 801a392:	4681      	mov	r9, r0
 801a394:	d907      	bls.n	801a3a6 <__ieee754_atan2+0x46>
 801a396:	4632      	mov	r2, r6
 801a398:	463b      	mov	r3, r7
 801a39a:	f7e5 ff9f 	bl	80002dc <__adddf3>
 801a39e:	ec41 0b10 	vmov	d0, r0, r1
 801a3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a3aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a3ae:	4334      	orrs	r4, r6
 801a3b0:	d103      	bne.n	801a3ba <__ieee754_atan2+0x5a>
 801a3b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3b6:	f000 b8b7 	b.w	801a528 <atan>
 801a3ba:	17bc      	asrs	r4, r7, #30
 801a3bc:	f004 0402 	and.w	r4, r4, #2
 801a3c0:	ea53 0909 	orrs.w	r9, r3, r9
 801a3c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a3c8:	d107      	bne.n	801a3da <__ieee754_atan2+0x7a>
 801a3ca:	2c02      	cmp	r4, #2
 801a3cc:	d05f      	beq.n	801a48e <__ieee754_atan2+0x12e>
 801a3ce:	2c03      	cmp	r4, #3
 801a3d0:	d1e5      	bne.n	801a39e <__ieee754_atan2+0x3e>
 801a3d2:	a141      	add	r1, pc, #260	@ (adr r1, 801a4d8 <__ieee754_atan2+0x178>)
 801a3d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3d8:	e7e1      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a3da:	4315      	orrs	r5, r2
 801a3dc:	d106      	bne.n	801a3ec <__ieee754_atan2+0x8c>
 801a3de:	f1be 0f00 	cmp.w	lr, #0
 801a3e2:	da5f      	bge.n	801a4a4 <__ieee754_atan2+0x144>
 801a3e4:	a13e      	add	r1, pc, #248	@ (adr r1, 801a4e0 <__ieee754_atan2+0x180>)
 801a3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3ea:	e7d8      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a3ec:	4542      	cmp	r2, r8
 801a3ee:	d10f      	bne.n	801a410 <__ieee754_atan2+0xb0>
 801a3f0:	4293      	cmp	r3, r2
 801a3f2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a3f6:	d107      	bne.n	801a408 <__ieee754_atan2+0xa8>
 801a3f8:	2c02      	cmp	r4, #2
 801a3fa:	d84c      	bhi.n	801a496 <__ieee754_atan2+0x136>
 801a3fc:	4b34      	ldr	r3, [pc, #208]	@ (801a4d0 <__ieee754_atan2+0x170>)
 801a3fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a402:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a406:	e7ca      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a408:	2c02      	cmp	r4, #2
 801a40a:	d848      	bhi.n	801a49e <__ieee754_atan2+0x13e>
 801a40c:	4b31      	ldr	r3, [pc, #196]	@ (801a4d4 <__ieee754_atan2+0x174>)
 801a40e:	e7f6      	b.n	801a3fe <__ieee754_atan2+0x9e>
 801a410:	4543      	cmp	r3, r8
 801a412:	d0e4      	beq.n	801a3de <__ieee754_atan2+0x7e>
 801a414:	1a9b      	subs	r3, r3, r2
 801a416:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a41a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a41e:	da1e      	bge.n	801a45e <__ieee754_atan2+0xfe>
 801a420:	2f00      	cmp	r7, #0
 801a422:	da01      	bge.n	801a428 <__ieee754_atan2+0xc8>
 801a424:	323c      	adds	r2, #60	@ 0x3c
 801a426:	db1e      	blt.n	801a466 <__ieee754_atan2+0x106>
 801a428:	4632      	mov	r2, r6
 801a42a:	463b      	mov	r3, r7
 801a42c:	f7e6 fa36 	bl	800089c <__aeabi_ddiv>
 801a430:	ec41 0b10 	vmov	d0, r0, r1
 801a434:	f000 fa10 	bl	801a858 <fabs>
 801a438:	f000 f876 	bl	801a528 <atan>
 801a43c:	ec51 0b10 	vmov	r0, r1, d0
 801a440:	2c01      	cmp	r4, #1
 801a442:	d013      	beq.n	801a46c <__ieee754_atan2+0x10c>
 801a444:	2c02      	cmp	r4, #2
 801a446:	d015      	beq.n	801a474 <__ieee754_atan2+0x114>
 801a448:	2c00      	cmp	r4, #0
 801a44a:	d0a8      	beq.n	801a39e <__ieee754_atan2+0x3e>
 801a44c:	a318      	add	r3, pc, #96	@ (adr r3, 801a4b0 <__ieee754_atan2+0x150>)
 801a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a452:	f7e5 ff41 	bl	80002d8 <__aeabi_dsub>
 801a456:	a318      	add	r3, pc, #96	@ (adr r3, 801a4b8 <__ieee754_atan2+0x158>)
 801a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a45c:	e014      	b.n	801a488 <__ieee754_atan2+0x128>
 801a45e:	a118      	add	r1, pc, #96	@ (adr r1, 801a4c0 <__ieee754_atan2+0x160>)
 801a460:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a464:	e7ec      	b.n	801a440 <__ieee754_atan2+0xe0>
 801a466:	2000      	movs	r0, #0
 801a468:	2100      	movs	r1, #0
 801a46a:	e7e9      	b.n	801a440 <__ieee754_atan2+0xe0>
 801a46c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a470:	4619      	mov	r1, r3
 801a472:	e794      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a474:	a30e      	add	r3, pc, #56	@ (adr r3, 801a4b0 <__ieee754_atan2+0x150>)
 801a476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a47a:	f7e5 ff2d 	bl	80002d8 <__aeabi_dsub>
 801a47e:	4602      	mov	r2, r0
 801a480:	460b      	mov	r3, r1
 801a482:	a10d      	add	r1, pc, #52	@ (adr r1, 801a4b8 <__ieee754_atan2+0x158>)
 801a484:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a488:	f7e5 ff26 	bl	80002d8 <__aeabi_dsub>
 801a48c:	e787      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a48e:	a10a      	add	r1, pc, #40	@ (adr r1, 801a4b8 <__ieee754_atan2+0x158>)
 801a490:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a494:	e783      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a496:	a10c      	add	r1, pc, #48	@ (adr r1, 801a4c8 <__ieee754_atan2+0x168>)
 801a498:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a49c:	e77f      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a49e:	2000      	movs	r0, #0
 801a4a0:	2100      	movs	r1, #0
 801a4a2:	e77c      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a4a4:	a106      	add	r1, pc, #24	@ (adr r1, 801a4c0 <__ieee754_atan2+0x160>)
 801a4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a4aa:	e778      	b.n	801a39e <__ieee754_atan2+0x3e>
 801a4ac:	f3af 8000 	nop.w
 801a4b0:	33145c07 	.word	0x33145c07
 801a4b4:	3ca1a626 	.word	0x3ca1a626
 801a4b8:	54442d18 	.word	0x54442d18
 801a4bc:	400921fb 	.word	0x400921fb
 801a4c0:	54442d18 	.word	0x54442d18
 801a4c4:	3ff921fb 	.word	0x3ff921fb
 801a4c8:	54442d18 	.word	0x54442d18
 801a4cc:	3fe921fb 	.word	0x3fe921fb
 801a4d0:	0801bce8 	.word	0x0801bce8
 801a4d4:	0801bcd0 	.word	0x0801bcd0
 801a4d8:	54442d18 	.word	0x54442d18
 801a4dc:	c00921fb 	.word	0xc00921fb
 801a4e0:	54442d18 	.word	0x54442d18
 801a4e4:	bff921fb 	.word	0xbff921fb
 801a4e8:	7ff00000 	.word	0x7ff00000

0801a4ec <sqrtf>:
 801a4ec:	b508      	push	{r3, lr}
 801a4ee:	ed2d 8b02 	vpush	{d8}
 801a4f2:	eeb0 8a40 	vmov.f32	s16, s0
 801a4f6:	f000 f9b7 	bl	801a868 <__ieee754_sqrtf>
 801a4fa:	eeb4 8a48 	vcmp.f32	s16, s16
 801a4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a502:	d60c      	bvs.n	801a51e <sqrtf+0x32>
 801a504:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801a524 <sqrtf+0x38>
 801a508:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a510:	d505      	bpl.n	801a51e <sqrtf+0x32>
 801a512:	f7ff f8a7 	bl	8019664 <__errno>
 801a516:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a51a:	2321      	movs	r3, #33	@ 0x21
 801a51c:	6003      	str	r3, [r0, #0]
 801a51e:	ecbd 8b02 	vpop	{d8}
 801a522:	bd08      	pop	{r3, pc}
 801a524:	00000000 	.word	0x00000000

0801a528 <atan>:
 801a528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a52c:	ec55 4b10 	vmov	r4, r5, d0
 801a530:	4bbf      	ldr	r3, [pc, #764]	@ (801a830 <atan+0x308>)
 801a532:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a536:	429e      	cmp	r6, r3
 801a538:	46ab      	mov	fp, r5
 801a53a:	d918      	bls.n	801a56e <atan+0x46>
 801a53c:	4bbd      	ldr	r3, [pc, #756]	@ (801a834 <atan+0x30c>)
 801a53e:	429e      	cmp	r6, r3
 801a540:	d801      	bhi.n	801a546 <atan+0x1e>
 801a542:	d109      	bne.n	801a558 <atan+0x30>
 801a544:	b144      	cbz	r4, 801a558 <atan+0x30>
 801a546:	4622      	mov	r2, r4
 801a548:	462b      	mov	r3, r5
 801a54a:	4620      	mov	r0, r4
 801a54c:	4629      	mov	r1, r5
 801a54e:	f7e5 fec5 	bl	80002dc <__adddf3>
 801a552:	4604      	mov	r4, r0
 801a554:	460d      	mov	r5, r1
 801a556:	e006      	b.n	801a566 <atan+0x3e>
 801a558:	f1bb 0f00 	cmp.w	fp, #0
 801a55c:	f340 812b 	ble.w	801a7b6 <atan+0x28e>
 801a560:	a597      	add	r5, pc, #604	@ (adr r5, 801a7c0 <atan+0x298>)
 801a562:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a566:	ec45 4b10 	vmov	d0, r4, r5
 801a56a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a56e:	4bb2      	ldr	r3, [pc, #712]	@ (801a838 <atan+0x310>)
 801a570:	429e      	cmp	r6, r3
 801a572:	d813      	bhi.n	801a59c <atan+0x74>
 801a574:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a578:	429e      	cmp	r6, r3
 801a57a:	d80c      	bhi.n	801a596 <atan+0x6e>
 801a57c:	a392      	add	r3, pc, #584	@ (adr r3, 801a7c8 <atan+0x2a0>)
 801a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a582:	4620      	mov	r0, r4
 801a584:	4629      	mov	r1, r5
 801a586:	f7e5 fea9 	bl	80002dc <__adddf3>
 801a58a:	4bac      	ldr	r3, [pc, #688]	@ (801a83c <atan+0x314>)
 801a58c:	2200      	movs	r2, #0
 801a58e:	f7e6 faeb 	bl	8000b68 <__aeabi_dcmpgt>
 801a592:	2800      	cmp	r0, #0
 801a594:	d1e7      	bne.n	801a566 <atan+0x3e>
 801a596:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801a59a:	e029      	b.n	801a5f0 <atan+0xc8>
 801a59c:	f000 f95c 	bl	801a858 <fabs>
 801a5a0:	4ba7      	ldr	r3, [pc, #668]	@ (801a840 <atan+0x318>)
 801a5a2:	429e      	cmp	r6, r3
 801a5a4:	ec55 4b10 	vmov	r4, r5, d0
 801a5a8:	f200 80bc 	bhi.w	801a724 <atan+0x1fc>
 801a5ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a5b0:	429e      	cmp	r6, r3
 801a5b2:	f200 809e 	bhi.w	801a6f2 <atan+0x1ca>
 801a5b6:	4622      	mov	r2, r4
 801a5b8:	462b      	mov	r3, r5
 801a5ba:	4620      	mov	r0, r4
 801a5bc:	4629      	mov	r1, r5
 801a5be:	f7e5 fe8d 	bl	80002dc <__adddf3>
 801a5c2:	4b9e      	ldr	r3, [pc, #632]	@ (801a83c <atan+0x314>)
 801a5c4:	2200      	movs	r2, #0
 801a5c6:	f7e5 fe87 	bl	80002d8 <__aeabi_dsub>
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	4606      	mov	r6, r0
 801a5ce:	460f      	mov	r7, r1
 801a5d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	4629      	mov	r1, r5
 801a5d8:	f7e5 fe80 	bl	80002dc <__adddf3>
 801a5dc:	4602      	mov	r2, r0
 801a5de:	460b      	mov	r3, r1
 801a5e0:	4630      	mov	r0, r6
 801a5e2:	4639      	mov	r1, r7
 801a5e4:	f7e6 f95a 	bl	800089c <__aeabi_ddiv>
 801a5e8:	f04f 0a00 	mov.w	sl, #0
 801a5ec:	4604      	mov	r4, r0
 801a5ee:	460d      	mov	r5, r1
 801a5f0:	4622      	mov	r2, r4
 801a5f2:	462b      	mov	r3, r5
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	4629      	mov	r1, r5
 801a5f8:	f7e6 f826 	bl	8000648 <__aeabi_dmul>
 801a5fc:	4602      	mov	r2, r0
 801a5fe:	460b      	mov	r3, r1
 801a600:	4680      	mov	r8, r0
 801a602:	4689      	mov	r9, r1
 801a604:	f7e6 f820 	bl	8000648 <__aeabi_dmul>
 801a608:	a371      	add	r3, pc, #452	@ (adr r3, 801a7d0 <atan+0x2a8>)
 801a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a60e:	4606      	mov	r6, r0
 801a610:	460f      	mov	r7, r1
 801a612:	f7e6 f819 	bl	8000648 <__aeabi_dmul>
 801a616:	a370      	add	r3, pc, #448	@ (adr r3, 801a7d8 <atan+0x2b0>)
 801a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61c:	f7e5 fe5e 	bl	80002dc <__adddf3>
 801a620:	4632      	mov	r2, r6
 801a622:	463b      	mov	r3, r7
 801a624:	f7e6 f810 	bl	8000648 <__aeabi_dmul>
 801a628:	a36d      	add	r3, pc, #436	@ (adr r3, 801a7e0 <atan+0x2b8>)
 801a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a62e:	f7e5 fe55 	bl	80002dc <__adddf3>
 801a632:	4632      	mov	r2, r6
 801a634:	463b      	mov	r3, r7
 801a636:	f7e6 f807 	bl	8000648 <__aeabi_dmul>
 801a63a:	a36b      	add	r3, pc, #428	@ (adr r3, 801a7e8 <atan+0x2c0>)
 801a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a640:	f7e5 fe4c 	bl	80002dc <__adddf3>
 801a644:	4632      	mov	r2, r6
 801a646:	463b      	mov	r3, r7
 801a648:	f7e5 fffe 	bl	8000648 <__aeabi_dmul>
 801a64c:	a368      	add	r3, pc, #416	@ (adr r3, 801a7f0 <atan+0x2c8>)
 801a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a652:	f7e5 fe43 	bl	80002dc <__adddf3>
 801a656:	4632      	mov	r2, r6
 801a658:	463b      	mov	r3, r7
 801a65a:	f7e5 fff5 	bl	8000648 <__aeabi_dmul>
 801a65e:	a366      	add	r3, pc, #408	@ (adr r3, 801a7f8 <atan+0x2d0>)
 801a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a664:	f7e5 fe3a 	bl	80002dc <__adddf3>
 801a668:	4642      	mov	r2, r8
 801a66a:	464b      	mov	r3, r9
 801a66c:	f7e5 ffec 	bl	8000648 <__aeabi_dmul>
 801a670:	a363      	add	r3, pc, #396	@ (adr r3, 801a800 <atan+0x2d8>)
 801a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a676:	4680      	mov	r8, r0
 801a678:	4689      	mov	r9, r1
 801a67a:	4630      	mov	r0, r6
 801a67c:	4639      	mov	r1, r7
 801a67e:	f7e5 ffe3 	bl	8000648 <__aeabi_dmul>
 801a682:	a361      	add	r3, pc, #388	@ (adr r3, 801a808 <atan+0x2e0>)
 801a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a688:	f7e5 fe26 	bl	80002d8 <__aeabi_dsub>
 801a68c:	4632      	mov	r2, r6
 801a68e:	463b      	mov	r3, r7
 801a690:	f7e5 ffda 	bl	8000648 <__aeabi_dmul>
 801a694:	a35e      	add	r3, pc, #376	@ (adr r3, 801a810 <atan+0x2e8>)
 801a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a69a:	f7e5 fe1d 	bl	80002d8 <__aeabi_dsub>
 801a69e:	4632      	mov	r2, r6
 801a6a0:	463b      	mov	r3, r7
 801a6a2:	f7e5 ffd1 	bl	8000648 <__aeabi_dmul>
 801a6a6:	a35c      	add	r3, pc, #368	@ (adr r3, 801a818 <atan+0x2f0>)
 801a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ac:	f7e5 fe14 	bl	80002d8 <__aeabi_dsub>
 801a6b0:	4632      	mov	r2, r6
 801a6b2:	463b      	mov	r3, r7
 801a6b4:	f7e5 ffc8 	bl	8000648 <__aeabi_dmul>
 801a6b8:	a359      	add	r3, pc, #356	@ (adr r3, 801a820 <atan+0x2f8>)
 801a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6be:	f7e5 fe0b 	bl	80002d8 <__aeabi_dsub>
 801a6c2:	4632      	mov	r2, r6
 801a6c4:	463b      	mov	r3, r7
 801a6c6:	f7e5 ffbf 	bl	8000648 <__aeabi_dmul>
 801a6ca:	4602      	mov	r2, r0
 801a6cc:	460b      	mov	r3, r1
 801a6ce:	4640      	mov	r0, r8
 801a6d0:	4649      	mov	r1, r9
 801a6d2:	f7e5 fe03 	bl	80002dc <__adddf3>
 801a6d6:	4622      	mov	r2, r4
 801a6d8:	462b      	mov	r3, r5
 801a6da:	f7e5 ffb5 	bl	8000648 <__aeabi_dmul>
 801a6de:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a6e2:	4602      	mov	r2, r0
 801a6e4:	460b      	mov	r3, r1
 801a6e6:	d148      	bne.n	801a77a <atan+0x252>
 801a6e8:	4620      	mov	r0, r4
 801a6ea:	4629      	mov	r1, r5
 801a6ec:	f7e5 fdf4 	bl	80002d8 <__aeabi_dsub>
 801a6f0:	e72f      	b.n	801a552 <atan+0x2a>
 801a6f2:	4b52      	ldr	r3, [pc, #328]	@ (801a83c <atan+0x314>)
 801a6f4:	2200      	movs	r2, #0
 801a6f6:	4620      	mov	r0, r4
 801a6f8:	4629      	mov	r1, r5
 801a6fa:	f7e5 fded 	bl	80002d8 <__aeabi_dsub>
 801a6fe:	4b4f      	ldr	r3, [pc, #316]	@ (801a83c <atan+0x314>)
 801a700:	4606      	mov	r6, r0
 801a702:	460f      	mov	r7, r1
 801a704:	2200      	movs	r2, #0
 801a706:	4620      	mov	r0, r4
 801a708:	4629      	mov	r1, r5
 801a70a:	f7e5 fde7 	bl	80002dc <__adddf3>
 801a70e:	4602      	mov	r2, r0
 801a710:	460b      	mov	r3, r1
 801a712:	4630      	mov	r0, r6
 801a714:	4639      	mov	r1, r7
 801a716:	f7e6 f8c1 	bl	800089c <__aeabi_ddiv>
 801a71a:	f04f 0a01 	mov.w	sl, #1
 801a71e:	4604      	mov	r4, r0
 801a720:	460d      	mov	r5, r1
 801a722:	e765      	b.n	801a5f0 <atan+0xc8>
 801a724:	4b47      	ldr	r3, [pc, #284]	@ (801a844 <atan+0x31c>)
 801a726:	429e      	cmp	r6, r3
 801a728:	d21c      	bcs.n	801a764 <atan+0x23c>
 801a72a:	4b47      	ldr	r3, [pc, #284]	@ (801a848 <atan+0x320>)
 801a72c:	2200      	movs	r2, #0
 801a72e:	4620      	mov	r0, r4
 801a730:	4629      	mov	r1, r5
 801a732:	f7e5 fdd1 	bl	80002d8 <__aeabi_dsub>
 801a736:	4b44      	ldr	r3, [pc, #272]	@ (801a848 <atan+0x320>)
 801a738:	4606      	mov	r6, r0
 801a73a:	460f      	mov	r7, r1
 801a73c:	2200      	movs	r2, #0
 801a73e:	4620      	mov	r0, r4
 801a740:	4629      	mov	r1, r5
 801a742:	f7e5 ff81 	bl	8000648 <__aeabi_dmul>
 801a746:	4b3d      	ldr	r3, [pc, #244]	@ (801a83c <atan+0x314>)
 801a748:	2200      	movs	r2, #0
 801a74a:	f7e5 fdc7 	bl	80002dc <__adddf3>
 801a74e:	4602      	mov	r2, r0
 801a750:	460b      	mov	r3, r1
 801a752:	4630      	mov	r0, r6
 801a754:	4639      	mov	r1, r7
 801a756:	f7e6 f8a1 	bl	800089c <__aeabi_ddiv>
 801a75a:	f04f 0a02 	mov.w	sl, #2
 801a75e:	4604      	mov	r4, r0
 801a760:	460d      	mov	r5, r1
 801a762:	e745      	b.n	801a5f0 <atan+0xc8>
 801a764:	4622      	mov	r2, r4
 801a766:	462b      	mov	r3, r5
 801a768:	4938      	ldr	r1, [pc, #224]	@ (801a84c <atan+0x324>)
 801a76a:	2000      	movs	r0, #0
 801a76c:	f7e6 f896 	bl	800089c <__aeabi_ddiv>
 801a770:	f04f 0a03 	mov.w	sl, #3
 801a774:	4604      	mov	r4, r0
 801a776:	460d      	mov	r5, r1
 801a778:	e73a      	b.n	801a5f0 <atan+0xc8>
 801a77a:	4b35      	ldr	r3, [pc, #212]	@ (801a850 <atan+0x328>)
 801a77c:	4e35      	ldr	r6, [pc, #212]	@ (801a854 <atan+0x32c>)
 801a77e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a786:	f7e5 fda7 	bl	80002d8 <__aeabi_dsub>
 801a78a:	4622      	mov	r2, r4
 801a78c:	462b      	mov	r3, r5
 801a78e:	f7e5 fda3 	bl	80002d8 <__aeabi_dsub>
 801a792:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a796:	4602      	mov	r2, r0
 801a798:	460b      	mov	r3, r1
 801a79a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a79e:	f7e5 fd9b 	bl	80002d8 <__aeabi_dsub>
 801a7a2:	f1bb 0f00 	cmp.w	fp, #0
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	460d      	mov	r5, r1
 801a7aa:	f6bf aedc 	bge.w	801a566 <atan+0x3e>
 801a7ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a7b2:	461d      	mov	r5, r3
 801a7b4:	e6d7      	b.n	801a566 <atan+0x3e>
 801a7b6:	a51c      	add	r5, pc, #112	@ (adr r5, 801a828 <atan+0x300>)
 801a7b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a7bc:	e6d3      	b.n	801a566 <atan+0x3e>
 801a7be:	bf00      	nop
 801a7c0:	54442d18 	.word	0x54442d18
 801a7c4:	3ff921fb 	.word	0x3ff921fb
 801a7c8:	8800759c 	.word	0x8800759c
 801a7cc:	7e37e43c 	.word	0x7e37e43c
 801a7d0:	e322da11 	.word	0xe322da11
 801a7d4:	3f90ad3a 	.word	0x3f90ad3a
 801a7d8:	24760deb 	.word	0x24760deb
 801a7dc:	3fa97b4b 	.word	0x3fa97b4b
 801a7e0:	a0d03d51 	.word	0xa0d03d51
 801a7e4:	3fb10d66 	.word	0x3fb10d66
 801a7e8:	c54c206e 	.word	0xc54c206e
 801a7ec:	3fb745cd 	.word	0x3fb745cd
 801a7f0:	920083ff 	.word	0x920083ff
 801a7f4:	3fc24924 	.word	0x3fc24924
 801a7f8:	5555550d 	.word	0x5555550d
 801a7fc:	3fd55555 	.word	0x3fd55555
 801a800:	2c6a6c2f 	.word	0x2c6a6c2f
 801a804:	bfa2b444 	.word	0xbfa2b444
 801a808:	52defd9a 	.word	0x52defd9a
 801a80c:	3fadde2d 	.word	0x3fadde2d
 801a810:	af749a6d 	.word	0xaf749a6d
 801a814:	3fb3b0f2 	.word	0x3fb3b0f2
 801a818:	fe231671 	.word	0xfe231671
 801a81c:	3fbc71c6 	.word	0x3fbc71c6
 801a820:	9998ebc4 	.word	0x9998ebc4
 801a824:	3fc99999 	.word	0x3fc99999
 801a828:	54442d18 	.word	0x54442d18
 801a82c:	bff921fb 	.word	0xbff921fb
 801a830:	440fffff 	.word	0x440fffff
 801a834:	7ff00000 	.word	0x7ff00000
 801a838:	3fdbffff 	.word	0x3fdbffff
 801a83c:	3ff00000 	.word	0x3ff00000
 801a840:	3ff2ffff 	.word	0x3ff2ffff
 801a844:	40038000 	.word	0x40038000
 801a848:	3ff80000 	.word	0x3ff80000
 801a84c:	bff00000 	.word	0xbff00000
 801a850:	0801bd00 	.word	0x0801bd00
 801a854:	0801bd20 	.word	0x0801bd20

0801a858 <fabs>:
 801a858:	ec51 0b10 	vmov	r0, r1, d0
 801a85c:	4602      	mov	r2, r0
 801a85e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a862:	ec43 2b10 	vmov	d0, r2, r3
 801a866:	4770      	bx	lr

0801a868 <__ieee754_sqrtf>:
 801a868:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a86c:	4770      	bx	lr
	...

0801a870 <_init>:
 801a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a872:	bf00      	nop
 801a874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a876:	bc08      	pop	{r3}
 801a878:	469e      	mov	lr, r3
 801a87a:	4770      	bx	lr

0801a87c <_fini>:
 801a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a87e:	bf00      	nop
 801a880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a882:	bc08      	pop	{r3}
 801a884:	469e      	mov	lr, r3
 801a886:	4770      	bx	lr
